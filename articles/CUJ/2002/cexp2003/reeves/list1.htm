<HTML><HEAD>
<TITLE>March 2002 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The public interface of class IndexedFile</A></H4>
<pre>
/*******************************************************************
  File: IndexedFile.hpp
  Copyright (c) 2002 Bleading Edge Software Technologies, Inc.
  
  This Software is distributed under the open source, free software
  model. Permission to use, modify, and distribute this Software, 
  including incorporating it into proprietary software, is granted
  without fee, provided this copyright notice appear in all copies 
  of the code. You are under no obligation to distribute source 
  code which is derived from or uses this Software. You may not do 
  anything however, such as copyrighting or claiming authorship, to
  prevent the continued distribution of this Software under an open
  source distribution model. This Software is distributed in the 
  hope that it will be useful, but it is provide "as is", 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  
//$----------------------------------------------------------------
Author: Jack W. Reeves
  
//!----------------------------------------------------------------|
Description:
  
//#----------------------------------------------------------------|
Notes:
  
//%****************************************************************/
#ifndef UTIL_INDEXED_FILE_HPP
#define UTIL_INDEXED_FILE_HPP
  
  
namespace Util {
  
template &lt;typename Item&gt;
struct XDR_Traits {
    typedef        XIOFileStream            xio_type;
    static oXDR_Stream&amp; encode(oXDR_Stream&amp; oxs, const Item&amp; val)
        { return oxs &lt;&lt; val; }
    static iXDR_Stream&amp; decode(iXDR_Stream&amp; ixs, Item&amp; val)
        { return ixs &gt;&gt; val; }
};
  
  
template&lt;typename Key,
         typename Compare = std::less&lt;Key&gt;,
         typename KeyTraits = XDR_Traits&lt;Key&gt;,
         size_t PageSize = 4096&gt;
class BtreeIndex {
public:
    class Iterator;
    class StreamposProxy;
    friend class Iterator;
    friend class StreamposProxy;
  
    typedef Key                          key_type;
    typedef std::pair&lt;const Key, size_t&gt; value_type;
    typedef Compare                      key_compare;
    typedef Iterator                     iterator;
    typedef size_t                       size_type;
    typedef ptrdiff_t                    difference_type;
  
    enum DeleteStrategy { None, Compact, Shuffle };
    enum UpdateStrategy { Unsafe, MostlySafe, Safe };
  
    // iterators
    class StreamposProxy {
    public:
        // LWC - default copy and destroy Ok
        // conversion
        operator size_t();
        // assignment
        void operator=(size_t newlink);
    };
        
    class Iterator :
        public std::iterator&lt;std::bidirectional_iterator_tag, 
                             std::pair&lt;const Key, 
                             StreamposProxy&gt; &gt; {
    public:
        Iterator();
        Iterator(const Iterator&amp; x);
        Iterator&amp; operator=(const Iterator&amp; x);
  
        std::pair&lt;const Key, StreamposProxy&gt; operator*();
        Iterator&amp;                            operator++();
        Iterator                             operator++(int);
        Iterator&amp;                            operator--();
        Iterator                             operator--(int);
  
        bool operator==(const Iterator&amp; x) const;
        bool operator!=(const Iterator&amp; x) const;
    };
  
    // construct / destroy
    explicit BtreeIndex(Compare comp = Compare());
    explicit BtreeIndex(const std::string&amp; name, 
                        std::ios_base::openmode mode =
                        std::ios_base::in|std::ios_base::out,
                        Compare comp = Compare());
    ~BtreeIndex();
  
    // open/close/test state
    bool           is_open();
    void           open(const std::string&amp; name,
                        std::ios_base::openmode mode =
                        std::ios_base::in|std::ios_base::out);
    void           close();
    void           flush();
    operator void*() const;
    bool operator!() const;
  
    // iterators
    iterator        begin();
    iterator        end();
  
    // capacity
    bool            empty();
    size_type       size();
  
    // modifiers
    iterator        insert(const value_type&amp; x);
    iterator        insert(const Key&amp; k);
    template&lt;typename InputIterator&gt;
    void            insert(InputIterator first, InputIterator last);
  
    void           erase(Iterator pos);
    size_type      erase(const Key&amp; x);
    void           erase(iterator first, iterator last);
    void           clear();
  
    // observers
    key_compare       key_comp() const;
    size_type         page_size() const;
    XDR_Stream&amp;       xdrstream();
  
    // operations
    iterator        find(const Key&amp; x);
    size_type       count(const Key&amp; x);
  
    iterator        lower_bound(const Key&amp; x);
    iterator        upper_bound(const Key&amp; x);
    std::pair&lt;iterator, iterator&gt;
                    equal_range(const Key&amp; x);
  
    // utilities
    void              reindex();
    DeleteStrategy    set_delete_strategy(DeleteStrategy strategy);
    UpdateStrategy    set_update_strategy(UpdateStrategy strategy);
    int               set_cache_size(int size);
};
  
  
//
// Class IndexedFile
//
template&lt;typename Key,
         typename Item,
         typename Compare = std::less&lt;Key&gt;,
         typename KeyTraits = XDR_Traits&lt;Key&gt;,
         typename ItemTraits = XDR_Traits&lt;Item&gt;,
         size_t PageSize = 4096&gt;
class IndexedFile {
public:
    // types
    class Iterator;
  
    typedef Key                          key_type;
    typedef std::pair&lt;const Key, Item&gt;   value_type;
    typedef Compare                      key_compare;
    typedef Iterator                     iterator;
    typedef size_t                       size_type;
    typedef ptrdiff_t                    difference_type;
    typedef BtreeIndex&lt;Key, Compare, KeyTraits, PageSize&gt; index_type;
  
    class ItemProxy {
        friend class Iterator;
    public:
        // conversion
        operator const Item&amp;();
  
        // assignment
        void operator=(const Item&amp; itm);
    };
  
    class Iterator : 
        public std::iterator&lt;std::bidirectional_iterator_tag,
                             std::pair&lt;const Key, ItemProxy&gt; &gt; {
    public:
        Iterator();
        Iterator(const Iterator&amp; x);
        Iterator&amp; operator=(const Iterator&amp; x);
  
        std::pair&lt;const Key, ItemProxy&gt;    operator*();
        Iterator&amp;                          operator++();
        Iterator                           operator++(int);
        Iterator&amp;                          operator--();
        Iterator                           operator--(int);
  
        index_type::Iterator       base();
  
        bool operator==(const Iterator&amp; x) const;
        bool operator!=(const Iterator&amp; x) const
        { return !(*this == x); }
    };
  
    // construct / destroy
    explicit IndexedFile(Compare comp = Compare());
    explicit IndexedFile(const std::string&amp; name, 
                         std::ios_base::openmode mode =
                         std::ios_base::in|std::ios_base::out, 
                         Compare comp = Compare());
    ~IndexedFile();
  
    // open/close
    bool           is_open();
    void           open(const std::string&amp; name,
                        std::ios_base::openmode mode =
                        std::ios_base::in|std::ios_base::out);
    void           close();
  
    // iterators
    Iterator        begin();
    Iterator        end();
  
    // capacity
    bool           empty();
    size_type      size();
  
    // modifiers
    Iterator       insert(const value_type&amp; x);
    template&lt;typename InputIterator&gt;
    void           insert(InputIterator first, InputIterator last);
  
    void           erase(Iterator pos);
    size_type      erase(const Key&amp; x);
    void           erase(Iterator first, Iterator last);
    void           clear();
  
    // observers
    Compare          key_comp() const;
    size_t           page_size()    const;
    index_type&amp;      index();
    XDR_Stream&amp;      xdrstream();
  
    // operations
    Iterator        find(const Key&amp; x);
    size_type       count(const Key&amp; x);
  
    Iterator        lower_bound(const Key&amp; x);
    Iterator        upper_bound(const Key&amp; x);
    std::pair&lt;Iterator, Iterator&gt;
                    equal_range(const Key&amp; x);
  
    // utilities
    void           compact();
    Item           read(size_t pos); // decodes and returns
                                     // the Item at pos
};
  
  
} //&gt; namespace Util
  
  
#endif
</PRE></BODY></HTML>
