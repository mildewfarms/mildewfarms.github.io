<HTML>   
     <HEAD>
<TITLE>March 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.03/tocmar.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Template Specializations, Default Parameters, and Other Fun Stuff</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>
<p>We watched the gate from a short distance, alert that the invaders might follow us through from the Europan base. It appeared, however, that the enemy was quite content to abandon us, or at least wait us out. The gate remained quiet.</p>
<p>Despite constant alertness, Goofies had got a couple of our sentries. We had killed many Goofies &#151; sometimes with our conventional weapons, sometimes as tests of the alien artifacts, at least one of which spewed huge energy bolts that made it dangerous to aim at anything too close nearby &#151; but the Goofies seemed to be in unlimited supply.</p>
<p>So it was that we were only partly surprised by the mutiny.</p>

<hr>

<p>&quot;Hey, Junior, how's it going?&quot; I tensed at Bob's voice. But then it struck me &#151; Bob was not his usual condescending self. He was almost... dare I say... civil.</p>
<p>&quot;Not bad, Bob,&quot; I replied, turning to face him. We stared at each other for a moment.</p>
<p>&quot;Uh, say, Junior, I was wondering if I could get a little help.&quot;</p>
<p>I was stunned. Speechless. Bob, the worst programmer in the department; the man who delighted in writing obscure, difficult to maintain code; the man whose arrogance was so thick you could smell it a block away; the man who stopped by my cubicle only long enough to dump his problems in my lap (and latte on my desk) was standing at my cubicle, asking <i>me</i> for help?</p> 
<p>&quot;Aaah, sure, Bob,&quot; I finally answered. &quot;What's up?&quot;</p>
<p>Bob sat himself down in the guest chair. &quot;OK, here's the scoop. I've managed to condense it down to this source code.&quot; He took over on the keyboard and called up a file on my workstation. I looked closely at it:</p>

<pre>
#include &lt;iostream&gt;

template&lt;typename T, std::size_t size = 10&gt;
class c
{
  T m[size];
public:
  void print_size() 
  {
    std::cout &lt;&lt; size &lt;&lt; std::endl;
  }
};

template&lt;&gt; class c&lt;char&gt;
{
  char m[100];
public:
  void print_size()
  {
    std::cout &lt;&lt; 100 &lt;&lt; std::endl;
  }
};

int main()
{
  c&lt;char&gt;().print_size();
  c&lt;char, 10&gt;().print_size();
}
</pre>

<p>&quot;First, I don't see how it can compile. I mean, I thought the template argument has to be a class or type name, not a... well, an ordinary parameter.&quot;</p>
<p>&quot;You mean the <b>size_t</b> parameter?&quot; I quizzed. Bob grunted, which I took to mean an affirmative. &quot;Yeah, the first time I saw a non-type parameter, my brain stopped for a moment too. I was used to seeing <b>class</b> or <b>typename</b> declarations, not regular parameters. The Guru assured me that it was allowed, but she made me look it up in the Standard for myself. You can only use integral or enumeration types, pointers or references to objects or functions, or pointers to member <a href="#1">[1]</a>. In fact, with integral types, the parameter becomes an integral constant expression....&quot;</p>
<p>&quot;A whozer whatzit?&quot; Bob interrupted.</p>
<p>&quot;A compile-time constant,&quot; I translated from Standardese to English. &quot;Anyway, since it's an integr&#151; er, that is, since it's a compile-time constant, that allows you to use <b>size</b> to declare the array of <b>T</b> objects. Pretty nifty.</p>
<p>&quot;Once I learned this, I was toying with the idea of using a template to provide a more flexible <b>switch</b> statement, something like,&quot; I opened a new text file and typed in:</p>

<pre>
template&lt;int value1, int value2, int value3&gt;
void f(int currentValue)
{
    switch(currentValue)
    {
    case value1:
        ...
    case value2:
        ...
    case value3:
        ...
    }
}
void g()
{
    f&lt;1, 2, 3&gt;(1); // executes value1 case
    f&lt;2, 3, 1&gt;(1); // executes value3 case
}
</pre>

<p>&quot;I couldn't come up with a practical application for it, so I filed it in the 'nifty but no practical application for it' category...&quot;</p>
<p>&quot;Alongside other useless information that gets trotted out at parties, no doubt,&quot; Bob interrupted, glancing at his watch. &quot;That's, uh, real interesting, Junior, but getting back to my problem,&quot; he reached over, closed my text window, and restored his original program. &quot;See, when I compiled and ran this, the first template prints out 100, just like I thought it would, 'cause it um... instantiates the... uh.... specialization <b>c&lt;char&gt;</b>. I expected the second template to print out 10, because I figured it'd match up the 10 with the default parameter of 10, but it prints out 100 as well.&quot;</p>
<p>I studied the code. Bob sipped his latte.</p>
<p>&quot;Well,&quot; I welled to fill in the silence, &quot;My first reaction would be that I'd expect both templates to print out 10.&quot; </p>
<p>&quot;Y'know, that's what I told Her Holine&#151; uh, I mean, that's what I thought at first.&quot; Ah, that was a little more like the Bob I knew &#151; he was about to call the Guru a nasty name.</p>
<p>&quot;I try to think of default parameters as 'lazy shortcuts',&quot; I continued. &quot;Whenever I write something that takes advantage of default parameters, I have to remember that the compiler treats it <i>as if</i> I had actually written the parameter.&quot;</p> 
<p>&quot;I know that,&quot; Bob said impatiently. He took over the keyboard and modified the program slightly:</p>

<pre>
int main()
{
  c&lt;char&gt;().print_size();
  // compiler acts as if I’d written
  // c&lt;char, 10&gt;().print_size();

  c&lt;char, 10&gt;().print_size();
}
</pre>

<p>&quot;This is an exact match for the base template. In that case, though, the program would print out 10 for each size, but it prints out 100, so what's going on?&quot; Bob asked impatiently, glancing again at his watch.</p>
<p>I savored this moment. Not only was Bob aware that I knew something he didn't, but he was actually <i>acknowledging</i> it!</p>
<p>&quot;That's not the only place the default parameter is used,&quot; I finally said. Bob gave me a quizzical look. &quot;The specialization uses it, too.&quot; I took over the keyboard, after carefully moving Bob's latte out of the way. &quot;The specialization that you wrote as...&quot;</p> 

<pre>
template&lt;&gt; class c&lt;char&gt;
</pre>

<p>&quot;... acts as if you wrote:&quot;</p>

<pre>
template&lt;&gt; class c&lt;char, 10&gt;
</pre>

<p>&quot;So,&quot; I continued, &quot;you have not specialized on <b>c&lt;char&gt;</b>, but on <b>c&lt;char, 10&gt;</b>, where the <b>size</b> template parameter is an integral constant-expression with the value 10. In other words, your program acts as if you had written:&quot;</p>

<pre>
#include &lt;iostream&gt;
template&lt;typename T, std::size_t size = 10&gt;
class c
{
  T m[size];
public:
  void print_size() 
  {
    std::cout &lt;&lt; size &lt;&lt; std::endl;
  }
};
 
template&lt;&gt; class c&lt;char, 10&gt;
{
  char m[100];
public:
  void print_size()
  {
    std::cout &lt;&lt; 100 &lt;&lt; std::endl;
  }
};

int main()
{
  c&lt;char, 10&gt;().print_size();
  c&lt;char, 10&gt;().print_size();
}
</pre>

<p>&quot;I get it,&quot; Bob smiled as he leaned back in his chair. &quot;In <b>main()</b>, both instantiations of <b>c</b> instantiate the specialization.&quot; I didn't like the look of that smile on his face. He stood up, then in a louder tone of voice, he continued, &quot;And remember, Junior, that default parameters apply to template specializations as well.&quot; I was puzzled by his sudden change. I spotted the Guru approaching, an open tome in her hand as usual.</p>
<p>She stopped in front of Bob. &quot;Why are you interrupting my apprentice's devotions?&quot; the Guru demanded.</p>
<p>&quot;Hello, doll-face,&quot; Bob beamed at the Guru. &quot;I was just explaining to Junior here, why the correct output of that program we were talking about is 100 100.&quot; He glanced at his watch. &quot;Yep, coming up on two o'clock &#151; I better get to Pete's office and go over this with him.&quot;</p> 
<p>The Guru and I watched him disappear in the direction of Pete Williams's office. Pete was the new manager brought in when our company was acquired last month.</p>
<p>&quot;Figured it out, did he?&quot; the Guru murmured as she turned to me. &quot;Now matters are worse.&quot; My stomach did a flip-flop.</p>
<p>&quot;Um, what was that all about?&quot; I asked.</p>
<p>The Guru sat down wearily in the guest chair. With Bob gone, she was back in &quot;normal&quot; mode. &quot;You asked me once why Bob was still around, even though he's an...&quot; I could see her struggling for words.</p>
<p>&quot;Incompetent, arrogant, misogynistic... &quot; I supplied, which the Guru capped with a word I would not care to repeat to my mother, even if she is stone deaf.</p>
<p>&quot;Yes, exactly,&quot; the Guru continued, calmer now. &quot;Bob was in quite tight with the previous upper management. He somehow had them hoodwinked into believing he's a... well, a golden boy. All my attempts to expose him for what he is were swept aside because he had the upper management convinced that I was still bitter about our divorce. As if!</p>
<p>&quot;Anyway,&quot; she continued, &quot;when we had our change in management, I saw a perfect opportunity. I convinced Pete Williams to pose him a challenging question, which I knew Bob would never figure out. Or so I thought. Pete agreed that the question I posed would be simple enough even for you to answer.&quot; I bristled at that, but the Guru, absorbed in her explanation, ignored me. &quot;If Bob could not figure out the answer by two o'clock, Pete was going to keep a close eye on him, perhaps even put him on probation. Eventually, I'm sure I could have got Bob what he deserved &#151; a pink slip. Now, though, it's going to be much harder.&quot;</p>
<p>She sighed and silently stood and glided away.</p>
<p>My stomach rose in my throat. &quot;What have I done?&quot; I muttered to myself.</p>

<hr>

<p>It was just before daybreak that the conspirators acted. Several officers went armed into Da Rosa’s tent, and we quickly discovered that only the mutineers’ sergeants had functioning weapons. Da Rosa put up no real opposition; I think he was tired and already resigned to the fact that holding out further would be futile. He gave up his sidearm, Hinckel took command, and we prepared to surrender.</p>
<p>A man was sent to throw a surrender note through the gate. We could see a brief glimpse of movement through the gate as the note was retrieved and soon came the reply. Following instructions, we put down our weapons and filed through the gate one by one. When my turn came, I stepped through into the dimly lit Ballroom and turned to find myself staring at the business end of weapons carried by grim-faced men. I sighed and was bound like the others.</p> 

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]</span><b> </b>ISO C++ Standard, IOS/IEC 14882, clause 14.1 paragraph 4.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>Thanks to Sergei (<b>sergei@summertime.mtu...</b>) for asking the question in comp.lang.c++ that inspired this article.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>

<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is an independent consultant and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). He is also secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>.</i></p>

</BLOCKQUOTE></body></html>

