<HTML>   
     <HEAD>
<TITLE>July 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.07/tocjul.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Getting to the Point</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE></p>


<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>&quot;Argh!&quot;</p>
<p>It was my seventh cry of frustration in one hour. Wendy was obviously getting tired of them. &quot;Look, pardner, pipe down over there, will ya?&quot; her voice floated over the cubicle. I suppose that was better than her previous reaction.</p>
<p>I had been wrestling with <b>auto_ptr</b>s. Within the first few days of working for the Guru, I had learned the usefulness of <b>auto_ptr</b>s &#151; and their not-so-obvious pitfalls <a href="#1">[1]</a>. I had been stung by <b>auto_ptr</b>'s strange ownership semantics. The <b>auto_ptr</b> uses move operations that are disguised as copy operations. Imagine this scenario: you walk up to a photocopier, place your sheet in the feeder, and press the &quot;Copy&quot; button. A few moments later, the photocopier gives you a copy &#151; then runs the original through a shredder. That pretty much sums up what the <b>auto_ptr</b>'s copy and assignment operators do.</p>
<p>Anyway, here I was, a little wiser and more experienced, and I was still running into <b>auto_ptr</b>'s various limitations. For one, an <b>auto_ptr</b> can't be used to hold pointers to arrays. I had toyed with hacking around that, by explicitly using array <b>delete</b>:</p>

<pre>
auto_ptr&lt;T&gt; autoArray(new T[10]);
// ...
delete [] autoArray.release();
</pre>
</b></p>

<p>but had dismissed that idea almost immediately. Even I could see the many dangers of such an &quot;abomination&quot; (as the Guru would call it). The whole, er, point of <b>auto_ptr</b> was to own and destroy the memory; doing it manually would completely defeat the purpose.</p>
<p>So, I decided to use a <b>vector</b> instead to own an array. It was a little more powerful than I needed, since I didn't need any dynamic resizing of the <b>vector</b>, but it served the purpose. What I really wanted was a smart pointer that would automatically handle the pointer and memory management, and that I could use to hold an array.</p>
<p>&quot;Use the Boost, Luke,&quot; I heard the Guru's voice behind me. </p>
<p>&quot;Isn't that 'Use the Force, Luke'?&quot; I said over my shoulder. &quot;And don't call me Luke.&quot;</p>
<p>&quot;The Boost library can be a powerful ally,&quot; the Guru continued in her full act.</p>
<p>I wasn't in the mood today, though, so I interrupted. &quot;Uh, can we dispense with the theatrics today? Bob's at our London office, and there are no interns to freak out.&quot;</p>
<p>She came around and I saw her smile and shrug. &quot;Oh, I just felt like being silly,&quot; she sighed. &quot;Have you checked out the Boost library's smart pointers?&quot;</p>
<p>&quot;Uh, well,&quot; I hesitated, &quot;I haven't had a chance to look at the Boost library in detail. What's it got in the way of smart pointers?&quot;</p>
<p>&quot;There are five smart pointers in all,&quot; the Guru said as she sat down. &quot;Two of them provide simple pointer ownership, and two provide shared ownership.&quot;</p>
<p>&quot;Shared ownership? Oh, you mean like a reference-counted class?&quot;</p>
<p>&quot;Exactly. The smart pointers are in pairs, so you have one for pointers to single objects, and one for pointers to arrays.&quot; As she spoke, she began writing on the whiteboard: <b>scoped_ptr</b>, <b>scoped_array</b>, <b>shared_ptr</b>, and <b>shared_array</b>.</p>
<p>&quot;That's only four; you said there were five?&quot; I queried.</p>
<p>&quot;The remaining one is called <b>weak_ptr</b>. It's a non-owning observer of a <b>shared_ptr</b>. I'll get to that one in a minute. The <b>scoped_*</b> pointers automatically destroy the object pointed to when they go out of scope. One suggested use is to implement the Pimpl Idiom &#151; pointer to Implementation,&quot; she hastily added, forestalling my next pun.</p>
<p>&quot;So... they're like <b>auto_ptr</b>, right?&quot;</p>
<p>&quot;Not quite. <b>scoped_ptr</b> and <b>scoped_array</b> are not copyable.&quot;</p>
<p>&quot;Not copyable? So, if I had a pointer as a class member&#151;&quot; I said as I took up the marker and started scrawling on the whiteboard:</p>

<pre>
class T
{
 scoped_ptr&lt;TImpl&gt; p;
 ...
</pre>

<p>&quot;&#151;how would I implement copying and assignment?&quot;</p>
<p>&quot;The same as you would with an <b>auto_ptr</b>,&quot; the Guru replied, as she wrote:</p>

<pre>
T( const T&amp; other )
: p(new TImpl(*other.p))
{
}

T &amp;operator=( const T&amp; other )
{
  scoped_ptr&lt;TImpl&gt; tmp(new TImpl(*other.p));
  p.swap(tmp);
}</pre>

<p>&quot;Ooookay,&quot; I drawled as I digested this. &quot;So, when I'm using a <b>scoped_ptr</b>, I have to do all the work I'd have to do with an <b>auto_ptr</b>, right? So why not just use <b>auto_ptr</b>?&quot;</p>
<p>&quot;Because using an <b>auto_ptr</b> would compile, but do the wrong thing, for the automatically generated functions. Using <b>scoped_ptr</b> makes it much more difficult to accidentally overlook the copying semantics, because the compiler will refuse to compile the class if you use the compiler-generated versions. Also, a <b>scoped_ptr</b> cannot be used on an incomplete type.&quot; I gave the Guru my favorite deer-in-the-headlights look. She sighed. &quot;Consider this,&quot; she said as she wrote on the whiteboard:</p>

<pre>
class Simple;

Simple * CreateSimple();

void f()
{
 auto_ptr&lt;Simple&gt; autoS(CreateSimple());
 scoped_ptr&lt;Simple&gt; scopedS(CreateSimple());
 //...
}
</pre>

<p>&quot;Inside the function, <b>Simple</b> is an incomplete type. If its destructor is non-trivial, then destroying it through the <b>auto_ptr</b> or the <b>scoped_ptr</b> will result in undefined behavior. Some compilers will warn you about this when you instantiate the <b>auto_ptr</b>, but not all will. The <b>scoped_ptr</b>, on the other hand, does a little behind the scenes work to force a compiler error if it is instantiated with an incomplete type.&quot;</p>
<p>&quot;Oh, right, of course,&quot; I jumped in, eager to show I understood. &quot;So we should use <b>scoped_ptr</b> all the time, instead of <b>auto_ptr</b>, right?&quot;</p>
<p>&quot;Wrong, sorry,&quot; she said, sadly. &quot;An <b>auto_ptr</b> still has its uses. Unlike <b>auto_ptr</b>, <b>scoped_ptr</b> has no <b>release()</b> member &#151; it cannot relinquish ownership of the pointer. Because of this, and because a <b>scoped_ptr</b> cannot be copied, when a <b>scoped_ptr</b> goes out of scope, the pointer it manages will always be deleted. This makes <b>scoped_ptr</b> unsuitable for those occasions where you really want to transfer ownership, such as a factory.</p> 
<p>&quot;Using <b>scoped_ptr</b> telegraphs your intent to other programmers. It tells others, 'This pointer should not be copied outside the current scope.' An <b>auto_ptr</b>, on the other hand, grants permission to transfer ownership outside the scope of where the pointer was created, but it maintains control over the pointer until that transfer of ownership is complete. This is, of course, important in writing exception-safe code.&quot;</p>
<p>&quot;Ah, okay, I got it,&quot; I mumbled. &quot;What about the other smart pointers you mentioned?&quot;</p>
<p>&quot;<b>scoped_array</b> behaves the same as <b>scoped_ptr</b>, except that it manages an array of objects, not a single object. <b>scoped_array</b> provides slightly different access functions. It does not have <b>operator *</b> or <b>operator-&gt;</b>, but it does have <b>operator []</b>. I  believe,&quot; she concluded, &quot;that the smart pointer you need is a <b>scoped_array</b> pointer.&quot;</p>
<p>&quot;Maybe,&quot; I replied, &quot;but I think I'd like to understand more about these <b>shared_*</b> smart pointers before I decide.&quot;</p>
<p>&quot;Very wise, my apprent... er, sorry, I slipped there.&quot; The Guru gave me a sheepish grin. &quot;Yes, being familiar with your options before you make a decision is good engineering practice.&quot;</p>
<p>&quot;The <b>shared_*</b> smart pointers,&quot; she pointed at <b>shared_ptr</b> and <b>shared_array</b> on the whiteboard, &quot;are very powerful tools. They are reference-counting pointers, which can differentiate between owners and observers. For example, using the class <b>T</b> from above:&quot;</p>

<pre>
void sharing()
{
 shared_ptr&lt;T&gt; firstShared (new T);
 shared_ptr&lt;T&gt; secondShared(firstShared);
 // ...
}
</pre>

<p>&quot;Both <b>shared_ptr</b> objects refer to the same <b>T</b> object. The use count for the <b>shared_ptr</b> is now <b>2</b>. Since the <b>shared_ptr</b> is reference counted, the object will not be destroyed until the last <b>shared_ptr</b> goes out of scope &#151; when the use count falls to zero.</p>
<p>&quot;The <b>shared_*</b> pointers are quite flexible, in that you can use them to hold pointers to incomplete types.&quot;</p>
<p>&quot;I thought you said that was bad?&quot;</p>
<p>&quot;It is bad, if you are careless. The <b>shared_*</b> pointers can be instantiated using a pointer to an incomplete type, but only if you specify a function or function object that will be called when the owned object is destroyed. For example, say we modify our little function <b>f</b> above:&quot;</p>

<pre>
void DestroySimple( Simple* );

void f()
{
 shared_ptr&lt;Simple&gt; sharedSFails( CreateSimple() );
 shared_ptr&lt;Simple&gt; sharedSSucceeds
            ( CreateSimple(), DestroySimple );
}
</pre>

<p>&quot;The first <b>shared_ptr</b> fails, because <b>Simple</b> is an incomplete type. The second one succeeds, because you have explicitly told the <b>shared_ptr</b> how to destroy the pointer. </p>

<p>&quot;Because the <b>shared_</b> pointers are designed to be copied, they are well-suited for use in standard containers, including associative containers. And, on those rare occasions where casting is required, there are special cast operators defined, which create new <b>shared_*</b> pointers. For example, if we have the classes <b>Base</b> and <b>Derived</b> with the obvious public inheritance, and an unrelated class, then you could have:&quot;</p> 

<pre>
void g()
{
 shared_ptr&lt;Base&gt; sharedBase( new Derived );
 shared_ptr&lt;Derived&gt; sharedDer = 
      shared_dynamic_cast&lt;Derived&gt;( sharedBase );
 shared_ptr&lt;Unrelated&gt; sharedUnrelated = 
     shared_dynamic_cast&lt;Unrelated&gt;( sharedBase );
 try
 {
    shared_ptr&lt;Unrelated&gt; oops = 
     shared_polymorphic_cast&lt;Unrelated&gt;( sharedBase );
 }
 catch( bad_cast )
 {
    //...
 }
}</pre>

<p>&quot;There is also a <b>shared_static_cast</b>, for those rare occasions when it is needed,&quot; the Guru concluded.</p>
<p>I studied the function for a moment. &quot;Okay, let me see if I can follow what's going on. The first <b>shared_dynamic_cast</b> performs a <b>dynamic_cast</b> on the smart pointer and returns a new smart pointer. What if the <b>dynamic_cast</b> fails &#151; what happens to the use count?&quot;</p>
<p>The Guru nodded sagely. &quot;In that case, the original counter is not affected, and the new <b>shared_ptr</b> contains a null pointer. As you can probably infer from the <b>try</b>/<b>catch</b> clause, a <b>shared_polymorphic_cast</b> will also attempt to perform a <b>dynamic_cast</b> on the owned pointer. If the cast fails, it will throw a <b>bad_cast </b>exception.&quot;</p>
<p>&quot;Wow,&quot; I wowed, &quot;this really is quite the class. It looks really well thought out.&quot;</p>
<p>&quot;Indeed,&quot; the Guru agreed. &quot;There are a couple of things to be aware of, though. The reference counting is simple and cannot detect any cyclic references. Also, the <b>shared_ptr</b> does not implement any form of copy-on-write, so you must exercise caution if it is used to implement a Pimpl idiom.&quot;</p>
<p>I mulled it over and decided I liked it. &quot;Hey,&quot; I added, remembering, &quot;what about that <b>weak_ptr</b> you mentioned?&quot;</p>
<p>&quot;Ah, yes. A <b>weak_ptr</b> is used in conjunction with <b>shared_ptr</b>s. The <b>weak_ptr</b> is an observer, which does not affect the usage count of the shared object. The main purpose of <b>weak_ptr</b> is to allow the <b>shared_ptr</b> to participate in cyclic dependencies &#151; <b>A</b> holds a reference to <b>B</b>, which in turn holds a reference to <b>A</b>. I like to think of <b>weak_ptr</b> as an Associate Member in a club &#151; it has no voting privileges, but can attend the club meetings.&quot;</p>
<p>&quot;Hmmm...&quot; I thought this over a bit. &quot;Since the <b>weak_ptr</b> doesn't affect the usage count, what happens if the club disbands &#151; in other words, the last <b>shared_ptr </b>goes out of scope &#151; while a <b>weak_ptr</b> is using a shared object?&quot;</p>
<p>&quot;In that case, the <b>weak_ptr</b>'s managed pointer gets set to null. And speaking of null, none of the operators that involve dereferencing, such as <b>operator *</b>, <b>operator -&gt;</b>, or <b>operator []</b>, check for a null pointer before dereferencing. So, just as you must check that a raw pointer is not null before dereferencing it, you must check that a smart pointer is not null. This restriction applies to all the smart pointers in the Boost library.&quot;</p>
<p>&quot;Man, that's a lot of stuff to remember,&quot; I said, looking over my heavily-scribbled-upon whiteboard.</p>
<p>&quot;Don't worry,&quot; the Guru smiled, as she stood up to leave. &quot;I'll email you the URL for the Boost smart library and a small program that exercises and demonstrates the various pointers.&quot; She was, of course, true to her word, for within minutes I received an email from her. I rolled my eyes as soon as I read it:</p>
<UL><p>&quot;My young apprentice, as promised here is a link to the blessed Boost writings: &lt;www.boost.org/libs/smart_ptr/smart_ptr.htm&gt; <a href="#2">[2]</a>. Read and meditate on the attached humble parable <a href="#3">[3]</a>.&quot; </p></UL>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>Thanks to Peter Dimov and Bjorn Karlsson for providing valuable comments and updates.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1] Jim Hyslop and Herb Sutter. &quot;Conversations #1,&quot; <i>C++ Report</i>, April 2000. </p>
<p><a name="2"></a>[2] The most recent version of the library and documentation can also be obtained via anonymous CVS checkout from the Source Forge project. Detailed instructions can be found at: &lt;http://sourceforge.net/projects/boost/&gt;.</p>
<p><a name="3"></a>[3] The sample code can be downloaded from the <i>CUJ</i> website: hyslop.zip.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>
</body>

</html>
