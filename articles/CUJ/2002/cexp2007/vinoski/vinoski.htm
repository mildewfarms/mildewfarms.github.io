<HTML>   
     <HEAD>
<TITLE>July 2002 C++ Experts Forum/Object Interconnections</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.07/tocjul.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: Dynamic CORBA, Part 1: The Dynamic Invocation Interface</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Douglas C. Schmidt and Steve Vinoski</FONT></H3>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Dynamic CORBA is a capability provided by CORBA that we have not covered in our column yet, and that readers ask us about occasionally. Despite the fact that the CORBA specification has defined dynamic invocation features ever since version 1.0 was published in 1991, those features have not been as widely used by CORBA developers as the static features, such as the stubs and skeletons generated automatically by an IDL compiler. There are several reasons for this:</p> 
<UL><LI>Most CORBA developers use statically typed programming languages, such as C++ and Java, and Dynamic CORBA can be awkward to use in such languages.</LI>
<LI>The Dynamic CORBA features are less efficient than the static features.</LI></UL>
<p>Recently, however, there's been increased interest in Dynamic CORBA, due in part to the OMG standardizing mappings for two scripting languages, CORBAscript <a href="#1">[1]</a> and Python <a href="#2">[2]</a>. It's also a natural outcome of developers continuing to apply CORBA to an ever-increasing number of varied and diverse problem domains.</p>
<p>In this column, we'll cover the basics of the DII (Dynamic Invocation Interface), the client-side interface used for dynamic CORBA applications. In future columns, we'll discuss the Dynamic Any, used to create and examine values in Dynamic CORBA applications; the DSI (Dynamic Skeleton Interface), the server-side counterpart to the DII; and the IFR (Interface Repository), a distributed service that provides run-time access to CORBA type information.</p>

<H3><FONT COLOR="#000080">Dynamic Invocation Basics</FONT></H3>

<p>When you compile an IDL file, the compiler typically generates a C++ stub file for the client and a C++ skeleton file for the server. For the client, you compile the stub file into your application to allow it to access CORBA objects. Likewise, for the server, you compile both the stub file and the skeleton file and link them with your servant implementations. <a href="fig1.htm">Figure 1</a> illustrates the general process.</p> 
<p>It is probably no exaggeration to claim that <i>all</i> CORBA C++ programmers are familiar with stub-based CORBA client applications. The first sample program that ORB providers direct their C++ customers to work with is invariably a stub-based application. Books, papers, articles, and even newsgroup postings regarding CORBA and C++ rely almost exclusively on static stubs as the basis for their discussions. Given that C++ is a statically typed programming language, this focus is not surprising, because static stubs are a natural fit for the way that C++ programmers write their applications.</p>
<p>There's another way to invoke requests on CORBA objects, however, without relying on static stubs. This approach involves the following steps:</p> 

<OL><LI>Invoking a built-in operation on the object's interface to dynamically construct a request object.</LI>
<LI>Providing details for the request such as the operation name, argument types and values, and return type.</LI>
<LI>Calling an operation on the request object itself to invoke it, causing the request to be sent to the target CORBA object.</LI></OL>

<p>Although a static stub has type information compiled directly into it, applications must explicitly provide this information to dynamically constructed request objects. These extra steps are precisely the source of the difference in the names of these approaches: <i>static</i> implies that all information required to invoke the request is built in, whereas <i>dynamic</i> implies that such information must be supplied at run time.</p> 

<H3><FONT COLOR="#000080">A Simple DII Use Case</FONT></H3>

<p>The DII allows a client to identify an operation via its string name and to &quot;push&quot; arguments onto a <b>CORBA::Request</b> stack. To illustrate how the DII works, we'll start by creating and invoking a DII request with no arguments and a <b>void</b> return type, as defined by the following simple IDL:</p>

<pre>
// IDL
interface A {
 void op();
};
</pre>

<p>All object references support the ability to create DII requests because the base <b>CORBA::Object</b> interface, inherited by all IDL interfaces, defines these operations. To create a DII request, therefore, the client must first have an object reference, as shown below:</p>

<pre>
// C++
CORBA::Object_var obj = // ...obtain object reference...
CORBA::Request_var req = obj-&gt;_request (&quot;op&quot;);
</pre>

<p>On the first line above, we initialize an object reference variable named <b>obj</b>. We do not show the details of this initialization, but we assume that it's done typically, such as by looking up an object reference in the Naming or Trading services or by invoking an object creation operation on a factory object. By passing in the name of the operation we want to invoke on the target object, we then use this object reference to create the <b>CORBA::Request</b> pseudo-object that represents our DII request.</p>
<p>To actually direct the <b>Request</b> to the target object, we first initialize it and then invoke it explicitly, as follows:</p>

<pre>
req-&gt;set_return_type (CORBA::_tc_void);
req-&gt;invoke ();
</pre>

<p>By default, a <b>Request</b> created in the manner we've shown does not have its arguments or its return type initialized, but it does have its argument count set to zero by default. Our operation <b>op</b> has no arguments, so we rely on this default. We do, however, have to explicitly set the <b>Request</b>'s return type using the static <b>TypeCode</b> constant for the <b>void</b> type. Finally, after initializing the <b>Request</b>, we invoke it on the target object by calling its <b>invoke</b> operation.</p> 
<p>Let's look at the equivalent code for static invocation:</p>

<pre>
CORBA::Object_var obj = // ...obtain object reference...
A_var a_obj = A::_narrow (obj);
obj-&gt;op ();
</pre>

<p>There are three major differences between these static and dynamic invocation examples:</p>

<OL><LI><i>Narrowing.</i> Due to static typing, the static code requires object-reference narrowing. Without narrowing, you won't be able to compile the code invoking the <b>op</b> operation. The code using the DII does not require narrowing, on the other hand, because all object references support the DII by virtue of the fact that they inherit from the base <b>CORBA::Object</b> interface.</LI> 
<LI><i>Request initialization.</i> In the static code, invoking <b>op</b> invokes a C++ method &#151; the static stub code  &#151; that uses a private interface to the underlying ORB to send the request. All information about the request is compiled into the stub code, and any initialization it might require to get the ORB to send the request is hidden entirely from the application. In the dynamic invocation scenario, however, the application is completely responsible for supplying all the information required to complete the <b>Request</b> object. In our example, this difference is shown by the fact that we initialize the <b>Request</b> return type explicitly.</LI> 
<LI><i>Explicit invocation.</i> The static code implicitly invokes a request by calling a method on the static stub class. Generally, a stub's methods correspond to the operations defined in the IDL interface (and its base interfaces) supported by that stub. The DII has no specific operation names built into it since it's essentially a &quot;generic stub.&quot; It therefore requires the application to explicitly invoke the <b>Request</b> via the general <b>invoke</b> operation.</LI> 
</OL>

<H3><FONT COLOR="#000080">More Realistic DII Use Case</FONT></H3>

<p>For a more realistic example of DII, we'll go back to our old friend from past columns, the stock quote interface:</p>

<pre>
// IDL
module Stock {
  exception Invalid_Stock {};
  interface Quoter {
   long get_quote (in string stock_name) raises (Invalid_Stock);
 };
};
</pre>

<p>As shown below, invoking the <b>Stock::Quoter::get_quote</b> operation through the DII is somewhat more complicated.<br>

<pre>
1  CORBA::Object_var obj = // ...obtain object reference...
2  CORBA::Request_var req = obj-&gt;_request (&quot;get_quote&quot;);
3  req-&gt;add_in_arg () &lt;&lt;= &quot;IONA&quot;;
4  req-&gt;set_return_type (CORBA::_tc_long);
5  req-&gt;exceptions ()-&gt;add (Stock::_tc_Invalid_Stock);
6  req-&gt;invoke ();
7  CORBA::Environment_ptr env = req-&gt;env ();
8  if (!CORBA::is_nil (env) &amp;&amp; env-&gt;exception () == 0) {
9    CORBA::Long retval;
10   req-&gt;return_value () &gt;&gt;= retval;
11 }</p>
</pre>

<p>In this example, we create a <b>Request</b> object as in our first example. The rest of the example differs significantly from the first example, however, mainly due to the need to fully initialize the <b>Request</b>. We describe the necessary steps in detail below.</p>

<UL><LI><i>Line 3: argument initialization.</i> This line looks rather simple, but it does a lot behind the scenes. What line 3 does is add an input argument to the <b>Request</b>. In our stock quoter IDL, the <b>get_quote</b> operation takes one argument of type string as an <b>in</b> argument. In our example code, we call the <b>add_in_arg</b> operation on the <b>Request</b>, which creates an uninitialized <b>in</b> argument as part of the <b>Request</b> and returns a C++ reference to that argument as a <b>CORBA::Any&amp;</b>. On the same line, we use the <b>Any</b> insertion <b>operator &lt;&lt;=</b> to insert a string value into the newly-created argument. The net effect of this single line is to add a single typed <b>in</b> argument and its value to the <b>Request</b>.</LI>
<LI><i>Line 4: set the return type.</i> As in our first example, we call <b>set_return_type</b> on the <b>Request</b> to initialize the return type to that of the operation we're invoking. In this example, the return type is IDL <b>long</b>, so we use the static <b>TypeCode</b> for the <b>long</b> type for this initialization.</LI>
<LI><i>Line 5: list possible user exceptions.</i> Like line 3, the simple look of this line belies its actual complexity. On this line, we augment the <b>Request</b> with information about the user-defined exceptions that could be raised if the <b>Request</b> is invoked. Like IDL <b>struct</b>s, user-defined IDL exceptions can contain any number of data members of any type. Unlike CORBA system exceptions, which are all structurally identical, the structure of a user-defined exception is defined completely by the IDL developer. ORB implementations generally have built into them the ability to demarshal system exceptions, since they're all structured the same way, but they cannot know <i>a priori</i> how to demarshal a given user-defined exception. By adding to the <b>Request</b> structural information about each possible user-defined exception that might be raised, we are essentially giving the ORB run-time engine the information it needs to recognize each user-defined exception and demarshal it properly. In our example above, there's only a single user-defined exception that could result from an invocation of the <b>get_quote</b> operation, so we add that to the <b>Request</b>'s exception list.</LI>
<LI><i>Line 6: invoke the operation.</i> Now that we've set up all the information needed to complete the <b>Request</b>, we invoke it.</LI>
<LI><i>Line 7-8: check for exceptions.</i> After <b>invoke</b> returns, we can check the <b>Request</b> to see whether the return was normal or exceptional. On line 7, we get the <b>CORBA::Environment</b> pseudo-object from the <b>Request</b>. In a DII <b>Request</b>, the <b>Environment</b> pseudo-object is used to contain exception information. On line 8, we perform a test to see if the <b>Environment</b> is valid and whether it holds an exception. If the <b>Environment_ptr</b> is nil, or if its exception accessor method returns a null <b>CORBA::Exception</b> pointer, then the operation returned normally. DII implementations do not throw exceptions the way static stubs do, so <b>try</b>/<b>catch</b> blocks are not used with the DII.</LI>
<LI><i>Line 9-10: extract the result.</i> Now that we've determined that the operation returned normally, we can obtain the result. We do this by accessing the <b>CORBA::Any</b> representing the return value via the <b>Request::return_value</b> function and then extracting the <b>CORBA::Long</b> return value from it using normal <b>Any</b> extraction.</LI>
</UL>

<p>Perhaps you've heard that using the DII is complicated, but as this example shows, it need not be. However, be aware that we've achieved some simplicity in our example by avoiding the issue of creating or using values based on complex IDL types. Our example uses only the built-in IDL <b>string</b> and <b>long</b> types, which both map to simple C++ types. If we had to pass a value of an IDL <b>struct</b> or <b>union</b> type, our example would be far more complex. We'll show such an example in our next column.</p>
<p>Another reason our example is so simple is that we assume that our application has built into it all the necessary information needed to create the DII request, such as the operation name, the number and types of the arguments, information about the user-defined exceptions, and the return type. In reality, if an application already has all this information built into it, there is little reason to use the DII. Dynamic applications do not normally possess such information, and thus they must obtain it elsewhere at run time. Applications needing dynamic access to such information normally obtain it via the IFR (Interface Repository). We'll cover the IFR in a future column and show how you use it for Dynamic CORBA applications.</p>

<H3><FONT COLOR="#000080">Deferred Synchronous Invocations</FONT></H3>

<p>So far our examples have assumed that the caller performs strict request/reply invocation using <b>Request::invoke</b>. The ORB's <b>invoke</b> implementation sends the request to the target object and then waits for the reply. The blocking semantics of <b>invoke</b> are therefore identical to that of an invocation through a static stub. Sometimes, however, applications want to avoid blocking and continue processing while awaiting responses from servers. The DII supports this capability via a <i>deferred synchronous invocation</i>.</p>
<p>When a client makes a deferred synchronous invocation, the ORB sends the request and allows the client to perform other work. The client can retrieve the response later when it needs the results. Changing our first example to use deferred synchronous invocation is easy:</p>

<pre>
// C++
CORBA::Object_var obj = // ...obtain object reference...
CORBA::Request_var req = obj-&gt;_request (&quot;op&quot;);
req-&gt;set_return_type (CORBA::_tc_void);
req-&gt;send_deferred ();</b></p>
</pre>

<p>This code creates the <b>Request</b> and sends it, which allows the application to continue processing without waiting for the response. To get the response, we simply call <b>get_response</b>:

<pre>
req-&gt;get_response ();
</pre>

<p>The <b>get_response</b> call blocks the caller until the response becomes available. To avoid blocking, we can call <b>poll_response</b>:<br>

<pre>
if (req-&gt;poll_response ())
   req-&gt;get_response ();
</pre>

<p>The <b>poll_response</b> operation returns true if the response is available, false otherwise. After calling <b>get_response</b>, the application can examine the <b>Request</b> to see whether the return was normal or exceptional, exactly as we showed in our stock quoter example above.</p>
<p>The DII also supports the ability to call operations using <b>oneway</b> semantics via the <b>Request::send_oneway</b> operation. (You can even use <b>send_oneway</b> to invoke operations that are not defined as <b>oneway</b> in their IDL definitions, though this feature is seldom used.) You use <b>Request::send_oneway</b> the same way you use <b>invoke</b> and <b>send_deferred</b>, except that by definition, a <b>oneway</b> call normally has no response. If you want a response, you must set the <b>SyncScopePolicy</b> to either:</p>

<UL><LI><b>SYNC_WITH_SERVER</b> &#151; With this option, the server sends a reply before it dispatches the request to the target object. </LI>
<LI><b>SYNC_WITH_TARGET</b> &#151; This option is equivalent to a synchronous two-way CORBA operation (i.e., the client will block until the server ORB sends a reply after the target object has processed the operation). </LI></UL>

<p>In either case, you must call <b>get_response</b> to ensure proper request processing. The <b>SyncScopePolicy</b> can be set by a client and uses new flags in the <b>response_requested</b> field of the GIOP header. The server ORB checks this field to determine what type of a reply, if any, is required for a one-way invocation. </p>
<p>The deferred synchronous invocation feature of the DII was originally the only portable way to perform request invocations using anything other than the strict request/response model. There are a broader range of options now that the AMI (asynchronous method invocation) and TII (time-independent invocation) messaging capabilities have been added to CORBA <a href="#3">[3]</a>. Many ORBs now support AMI, which is an efficient and elegant way of decoupling request invocations from their responses.</p>

<H3><FONT COLOR="#000080">Creating Requests</FONT></H3>

<p>All of the examples above use the <b>_request</b> operation to create <b>Request</b> objects. This operation, which does not appear in the <b>CORBA::Object</b> pseudo-IDL definition, was originally added as a helper function in the first IDL C++ Language Mapping specification. The IDL Java Language Mapping later adopted the same function. The <b>_request</b> function allows you to create an unpopulated <b>Request</b> based only on the name of the target operation.</p>
<p>Another way to create a <b>Request</b> requires you to supply most of the information for the request up front, rather than adding it to the <b>Request</b> after creating it. You do this by calling <b>_create_request</b> on an object reference. There are two forms of <b>_create_request</b>: </p>

<UL><LI>The one that we recommend that you always use.</LI>
<LI>The one based on the original CORBA 1.0 DII specification that we recommend you avoid because it doesn't support all the features needed for real-world DII applications. </LI></UL>

<p>We therefore show only the first form of <b>_create_request</b> here, as shown in the following signature:</p>

<pre>
// C++
void Object::_create_request (Context_ptr operation_context,
                              const char *operation_name,
                              NVList_ptr argument_list,
                              NamedValue_ptr result,
                              ExceptionList_ptr exception_list,
                              ContextList_ptr context_list,
                              Request_out request,
                              Flags flags);
</pre>

<p>Below we rework our stock quoter example to use <b>_create_request</b> rather than <b>_request</b>. First, we create an <b>NVList</b> via the ORB's <b>create_list</b> operation and then populate it with the name of the stock we're interested in.</p>

<pre>
// C++
CORBA::NVList_var nvlist;
orb-&gt;create_list (1, nvlist.out ());
*(nvlist-&gt;add (CORBA::ARG_IN)-&gt;value ()) &lt;&lt;= &quot;IONA&quot;;
</pre>

<p>This code creates an <b>NVList</b> of length <b>1</b>, sets the <b>ARG_IN</b> flag for the input argument, and then accesses the <b>Any</b> to set the <b>string</b> argument using <b>Any</b> insertion.</p>
<p>Next, we create a single <b>NamedValue</b> to hold the operation's return value, again using the ORB's factory operation:</p>

<pre>
CORBA::NamedValue_var result;
orb-&gt;create_named_value (result.out ());
result-&gt;value ()-&gt;replace (CORBA::_tc_long, 0);
</pre>

<p>This code creates the <b>NamedValue</b> to hold the return value and sets the appropriate <b>TypeCode</b> for that value using the static <b>TypeCode</b> constant for the IDL <b>long</b> type.</p>
<p>Next, we again use the ORB to create and populate an <b>ExceptionList</b> to hold information about the <b>Invalid_Stock</b> user exception:</p>

<pre>
CORBA::ExceptionList_var exc_list;
orb-&gt;create_exception_list (exc_list.out ());
exc_list-&gt;add (Stock::_tc_Invalid_Stock);
</pre>

<p>Now that we've set up the information needed to create the <b>Request</b>, we pass it all to the <b>_create_request</b> operation:</p>

<pre>
CORBA::Object_var obj = // ...obtain object reference...
CORBA::Request_var request;
obj-&gt;_create_request (CORBA::Context::_nil (),
                            &quot;get_quote&quot;,
                            nvlist,
                            result, 
                            exc_list,
                            CORBA::ContextList::_nil (),
                            request.out (),
                            0);
request-&gt;invoke ();
</pre>

<p>The remainder of the code, needed to check for exceptions and examine the result, is the same as in the original example.</p>

<p>As our example shows, using <b>_create_request</b> can be more complicated than creating a <b>Request</b> using the <b>_request</b> operation. This is because the <b>Request</b> interface supplies a number of short-cut operations that make setting arguments, exception types, and return types easier than setting them individually on the underlying <b>NVList</b>, <b>ExceptionList</b>, and <b>NamedValue</b>. We therefore recommend using the <b>_request</b> operation in preference to <b>_create_request</b>.</p>

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<p>CORBA provides two different ways for clients to communicate with servers:</p>
<UL><LI>The SSI (Static Invocation Interface) is provided by static stubs generated by a CORBA IDL compiler and is useful when client applications know the interface offered by the server at compile time.</LI>
<LI>The DII (Dynamic Invocation Interface) is provided by an ORB's dynamic messaging mechanism and is most useful when client applications do not have compile-time knowledge of the interfaces offered by servers.</LI></UL>

<p>Many distributed applications can be written using CORBA's SII. However, an important and growing class of applications, such as interface browsers, network management applications, distributed visualization tools, debuggers, configuration management tools, and scripting languages, require the type of flexibility provided by Dynamic CORBA features like the DII. The DII enables applications to construct and invoke CORBA requests at run time by querying an Interface Repository. In addition, the DII is required for applications that use CORBA's deferred synchronous model of operation invocation, which decouples a request from the response so that other client activities can occur while the server is processing the response.</p> 
<p>Our next column will focus on Dynamic Any. We'll show how to use Dynamic Any to create and manipulate complex arguments and return types in Dynamic CORBA applications. If you have comments, questions, or suggestions regarding Dynamic CORBA or our column, please let us know at <b>object_connect@cs.wustl.edu</b>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Object Management Group. &quot;CORBA Scripting Language, v1.0,&quot; OMG Document formal/01-06-05, June 2001.</p>
<p><a name="2"></a>[2] Object Management Group. &quot;Python Language Mapping Specification,&quot; OMG Document formal/01-02-66, February 2001.</p>
<p><a name="3"></a>[3] Douglas C. Schmidt and Steve Vinoski. &quot;Object Interconnections: An Introduction to CORBA Messaging,&quot; <i>C++ Report</i>, November/December 1998.</p>

<p><i><B>Steve Vinoski</B> (&lt;http://www.iona.com/hyplan/vinoski/&gt;) is vice president of Platform Technologies and chief architect for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of </i>Advanced CORBA Programming with C++<i>, published in January 1999 by Addison Wesley Longman. Steve is also IONA's primary representative to the W3C (World Wide Web Consortium) Web Services Architecture Working Group.</p> 
<p><B>Doug Schmidt</B> (&lt;http://www.ece.uci.edu/~schmidt/&gt;) is an associate professor at the University of California, Irvine. His research focuses on patterns, optimization principles, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded system interconnects.  He is the lead author of the books </i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects<i>, published in 2000 by Wiley and Sons, and </i>C++ Network Programming: Mastering Complexity with ACE and Patterns<i>, published in 2002 by Addison-Wesley. He can be contacted at <b>schmidt@uci.edu</b>. </p>

</BLOCKQUOTE></BODY></HTML>
