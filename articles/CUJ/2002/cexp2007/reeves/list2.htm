<HTML><HEAD>
<TITLE>July 2002/The (B)Leading Edge/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: XInDataBuf and XoutDataBuf</A></h4>
<pre>
// My header
#include &quot;IndexedFile.h&quot;


namespace Util {

//
// XIODataStreambuf - accepts all base class default operations
//
template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::XIODataStreambuf(
                  char* buf, size_t size, size_t len)
  : _buf(reinterpret_cast&lt;XDR_Char*&gt;(buf)),
      _size(size / sizeof(XDR_Char)),
      _len(len / sizeof(XDR_Char))
{
      // Set up the get and put areas
      setg(_buf, _buf, _buf+_len);
      setp(_buf+len, _buf+size);
}


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::~XIODataStreambuf()
{
      // empty
}


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::pos_type 
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::seekoff(
            off_type off, std::ios_base::seekdir dir,
            std::ios_base::openmode which)
{
      if (which &amp; std::ios_base::in and
            which &amp; std::ios_base::out and 
            dir &amp; std::ios_base::cur) return -1; // not valid

      pos_type rtn;
      if (which &amp; std::ios_base::in) {
            int curoff = gptr() - eback();
            int newoff;
            if (dir &amp; std::ios_base::beg) newoff = 0;
            else if (dir &amp; std::ios_base::cur) newoff = curoff;
            else newoff = egptr() - eback();
            if (newoff + off &lt; 0 or newoff + off &gt; egptr() - eback()) return -1;
            if (newoff + off != curoff) gbump(newoff - curoff + off);
            rtn = newoff + off;
      }
      if (which &amp; std::ios_base::out) {
            int curoff = pptr() - pbase();
            int newoff;
            if (dir &amp; std::ios_base::beg) newoff = 0;
            else if (dir &amp; std::ios_base::cur) newoff = curoff;
            else newoff = epptr() - pbase();
            if (newoff + off &lt; 0 or newoff + off &gt; epptr() - pbase()) return -1;
            if (newoff + off != curoff) pbump(newoff - curoff + off);
            rtn = newoff + off;
      }
      return rtn;
}


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::pos_type 
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XIODataStreambuf::seekpos(
            pos_type pos, std::ios_base::openmode which)
{
      return seekoff(pos, std::ios_base::beg, which);
}


//
// XOutDataBuf - the XDR_Stream class
//
template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XOutDataBuf::XOutDataBuf(
                  oXDR_Stream&amp; xstrm,
                  char* buf, 
                  size_t size)
  : _refstrm(xstrm),
      _xstreambuf(buf, size, 0)
{
      // Initialize the base class
      init(&amp;_xstreambuf);

      // Copy the formating, and polymorphic support information
      copyfmt(xstrm);
      obj2id() = xstrm.obj2id();
      type2id() = xstrm.type2id();
}



template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XOutDataBuf::~XOutDataBuf()
{
      // copy the formating data back
      _refstrm.copyfmt(*this);
      _refstrm.obj2id() = obj2id();
      _refstrm.type2id() = type2id();
}


//
// XInDataBuf - the XDR_Stream class
//
template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XInDataBuf::XInDataBuf(
                  iXDR_Stream&amp; xstrm,
                  char* buf, 
                  size_t len)
  : _refstrm(xstrm),
      _xstreambuf(buf, len, len)
{
      // Initialize the base class
      init(&amp;_xstreambuf);

      // Copy the formating, and polymorphic support information
      copyfmt(xstrm);
      id2obj() = xstrm.id2obj();
      id2type() = xstrm.id2type();
}



template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::XInDataBuf::~XInDataBuf()
{
      // copy the formating data back
      _refstrm.copyfmt(*this);
      _refstrm.id2obj() = id2obj();
      _refstrm.id2type() = id2type();
}


} //&gt; namespace
</pre>
</body>
</html>
