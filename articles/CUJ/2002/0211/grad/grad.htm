<HTML>   
     <HEAD>
<TITLE>November 2002/A Cleanup Framework in C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Cleanup Framework in C</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Stephane Grad</FONT></H3>

<BLOCKQUOTE>
<p>Use this simple framework to ensure proper resource cleanup.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Constructors and destructors are very important tools for C++ developers. When these tools are used properly, they reduce implementation time and source code complexity. When combined with automatic variables, constructors and destructors give the programmer a powerful mechanism for guaranteeing the initialization and de-initialization of resources. Since constructors and destructors do not exist in C, C programmers have to be careful with resource cleanup. Cleanup is often difficult to manage in the middle of a busy project. In this article, I propose a simple framework that offers C programmers a general approach to the cleanup problem.</p>

<H3><FONT COLOR="#000080">The Framework</FONT></H3>

<p>The framework is simply based on the concept of a cleanup stack. A cleanup stack is a stack whose elements are function addresses with optional parameters. In the implementation of a function, when you allocate a resource, you can push it to the stack together with the address of a cleanup function. Later, when the function leaves, the stack is automatically popped and the cleanup function deallocates the resource.</p>

<H3><FONT COLOR="#000080">Structures</FONT></H3>

<p>An element of a cleanup stack is a pair consisting of a function address and an optional pointer, which is usually the resource to clean up. This <B>struct</B> definition is then <B>typedef</B>ed to get rid of the <B>struct</B> keyword, which gives the new type <B>tCleanupElm</B>:</p>

<pre>
struct sCleanupElm
{
  void (*clean)(void*);
  void* ptr;
};
</pre>

<p>A cleanup stack consists of a constant integer that is the stack&#146;s capacity (<B>max</B>), an array of the previously defined elements (<B>tCleanupElm</B>), and an index that is the position of the current free element in the stack (<B>index</B>). This <B>struct</B> definition is also <B>typedef</B>ed for convenience (<B>tCleanupStack</B>):</p>

<pre>
struct sCleanupStack
{
  const unsigned int max;
  tCleanupElm* stack;
  unsigned int index;
};
</pre>

<p>For simplicity, I define the stack  as basic arrays. The programmer fixes the maximum number of entries at the start of each function that needs the stack.</p>

<pre>
tCleanupElm stack[n];
tCleanupStack cleanup_stack = {n, stack, 0};
</pre>

<H3><FONT COLOR="#000080">Functions</FONT></H3>

<p>To manage a stack, you at least need the <B>push</B> and <B>pop</B> functions:</p>

<pre>
void _cl_push(tCleanupStack* aStack,
  void* aPtr, void (*aClean)(void*));

void _cl_pop(tCleanupStack* aStack,
  unsigned int n);
</pre>

<p><B>push</B> adds an element (resource plus cleanup function) to the stack. (In other words, <B>aStack-&gt;stack[aStack-&gt;index]-&gt;ptr</B> is set to the resource&#146;s address, <B>aStack-&gt;stack[aStack-&gt;index]-&gt;clean</B> is set to the cleanup function&#146;s address, and the stack index, <B>aStack-&gt;index</B>, is incremented.)</p>
<p><B>pop</B> removes <B>n</B> elements from the stack. Removing an element from the stack means executing the cleanup function on its associated resource and decrementing the stack&#146;s array index. For convenience, I also added a <B>popa</B> function that pops all the elements from the stack.</p>
<p>All the ingredients are now available to finalize the framework. To simplify using stack functions, I wrapped them in macros.</p>

<H3><FONT COLOR="#000080">Macros</FONT></H3>

<p>INITCL</B> defines a cleanup stack with a maximum of <B>n</B> elements for the current function:</p>

<pre>
#define INITCL(n) \
tCleanupElm _cl_current_stack[(n)]; \
tCleanupStack _cl_cleanup_stack = \
{ (n), _cl_current_stack, 0}; \
if (0) goto _cl_l_cleanup
</pre>

<p>The first three lines of this macro declare the stack and the structure that contains its related data. The last line is only there to raise a compile-time error if the user forgets to use the <B>DONECL()</B> macro at the end of the function that was started by <B>INITCL</B>.</p>

<pre>
#define DONECL() \
_cl_l_cleanup: \
_cl_popa(&amp;_cl_cleanup_stack)
</pre>

<p>If the user forgets to use <B>DONECL</B>, the compiler will not find the <B>_cl_l_cleanup</B> label, which will stop the compilation. This trick is necessary to guarantee the call to the <B>_cl_popa</B> function at the end of the function that uses the stack. The purpose of <B>DONECL</B> is thus to pop all the elements of the stack when the function reaches its end. But this is not enough; the function can exit anywhere thanks to the keyword <B>return</B>. <B>return</B> therefore needs special treatment:</p>

<pre>
#define return \
{_cl_popa(&amp;_cl_cleanup_stack);} \
return
</pre>

<p>This new <B>return</B> guarantees that the stack will be called prior to leaving the function. From its definition, you see that the new <B>return</B> replaces the old one and does not require any adaptation to the code that will use it.</p>
<p>Actually, this solution is fine for functions that use <B>INITCL</B> because in this case the variable <B>_cl_cleanup_stack</B> exists and the compiler is happy. But for the other functions that don&#146;t use <B>INITCL</B>, the compilation fails unless a global (dummy) stack <B>_cl_cleanup_stack</B> exists in the source file. To solve this minor issue, you can declare a dummy stack in the header file <B>cleanup.h</B> (the header file that defines all the structures, functions, and macros that make up the framework).</p>
<p>I advise including <B>cleanup.h</B> only in source files (not header files) and preferably at the end of the <B>#include</B> section to avoid replacement of <B>return</B> keywords in inline functions or macros that are defined in the different header files.</p>

<H3><FONT COLOR="#000080">Example</FONT></H3>

<p>You are now ready to use the cleanup framework. Consider the following example:</p>

<pre>
void f()
{
  INITCL(2);
  {
    int *pi,*pj;
    pi=malloc(1000);
    if (!pi)
      return FAILED;
    PUSHCL(pi, free);
    pj=malloc(1000);
    if (!pj)
      return FAILED;
    PUSHCL(pj, free);
    // use pi and pj
    return OK;
  }
  DONECL();
}
</pre>

<p>In this example, the function <B>f</B> uses a cleanup stack that is declared to contain up to two elements. Once <B>pi</B> is correctly allocated, it is pushed to the stack together with its cleanup function, which is the standard function <B>free</B>. The same scenario is repeated for <B>pj</B>. If <B>pj</B> cannot be allocated, the function returns <B>FAILED</B> after having popped <B>pi</B> from the stack, which helps prevent a memory leak. But if it succeeds, the function continues and uses <B>pi</B> and <B>pj</B>. At the end, the function can return directly, since the stack takes care of freeing <B>pj</B> and <B>pi</B>.</p>
<p>Note: since this framework is generic, you can use a stack for different purposes. Instead of <B>malloc</B>, you could have a function that acquires a semaphore, and the cleanup function would release it. Or you could just push a function you want to execute to the end of the function (e.g., a debug trace function).</p>

<H3><FONT COLOR="#000080">Debugging</FONT></H3>

<p>This approach works great until your program becomes complex and bugs appear. For example, suppose you declare a too small stack for function <B>g</B>. During the execution of your program, the stack overflow has to be detected. The basic way to detect stack overflow is to use assertion to check array indexes. Thus, when your program crashes, you can use a debugger to back trace to the function that did the lethal <B>push</B> operation: <B>g</B>. You can then fix the problem by extending the stack capacity.</p>
<p>Unfortunately, a debugger is not always available, especially in embedded systems. In such environments, crashes due to stack errors (overflow or underflow) are difficult to locate. To ease debugging in these situations, I added debug information to the stack structures and functions. The macros and the functions are declared and implemented with additional parameters that are grouped in preprocessor variables.</p>
<p>Here is the definition of the macro <B>PUSHCL</B>:</p>

<pre>
#define PUSHCL(ptr, clean) \
_cl_push(&amp;_cl_cleanup_stack, \
(ptr), (clean) \
DEBUGCL_EXTRA_INFO)
</pre>

<p>When the framework is not configured in debug mode, the preprocessor variable <B>DEBUGCL_EXTRA_INFO</B> is empty; otherwise, it is defined like this:</p>

<pre>
#define DEBUGCL_EXTRA_INFO \
, __FILE__, __LINE__
</pre>

<p>Thus, each use of stack macros by the user is logged into the stack itself. Of course, in order to do so, the function <B>_cl_push</B> has to be updated to store this extra information to the stack. Actually, in debug mode, data structures <B>sCleanupElm</B> and <B>sCleanupStack</B> depend on another preprocessor variable that is equal to:</p>

<pre>
#define DEBUGCL_EXTRA_STRUCT \
const char* filename; \
int lineno;
</pre>

<p>The same work is done for all the other stack operations. Thus, in case of stack overflow or underflow, you can stop the program after it has displayed:</p>

<UL><LI>  Where (file and line number) the stack has been initialized.</LI>
<LI>  The contents of the stack.</LI>
<LI>  Where the program did an invalid stack operation.</LI></UL>

<p>In the complete implementation (available for download at &lt;www.cuj.com/code&gt;), all this debug information is available once you define the macro <B>DEBUGCL_PRINT</B> to be your favorite <B>printf</B>-like function.</p>

<h4><a href="../../../source/2002/nov02/grad.zip"></a></h4>

<p><i><B>Stephane Grad</B> has a Bachelor of Science in Mathematics and has been working as a software developer for two-and-a-half years. His computer-related interests are C++ programming, 3-D algorithms, and Linux.</i></p>
</blockquote></body></html>
