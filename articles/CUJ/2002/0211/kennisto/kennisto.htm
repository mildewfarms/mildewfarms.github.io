<HTML>   
     <HEAD>
<TITLE>November 2002/Dimension Checking of Physical Quantities</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   Scientific Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Dimension Checking of Physical Quantities</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Kenniston</FONT></H3>

<BLOCKQUOTE>
<p>A practical yet powerful tool for catching unit errors at compile time.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>When you write a program to solve a scientific or engineering problem, you aren&#146;t just dealing with numbers; most of those numbers actually correspond to physical quantities like density or area. These quantities have not only a magnitude but also dimensions (e.g., length, speed, or acceleration) and units (e.g., meters, feet, and inches). Explicitly including this additional information in source code makes programs easier to understand, and having the compiler verify consistency makes development faster and more reliable. But due to a lack of suitable tools, hardly anyone applies a systematic technique to associating dimensions and units with scientific variables.</p>
<p>This article describes one such tool: a C++ Quantity library which, by taking advantage of a number of generally useful template programming techniques, provides a system of types to keep track of dimensions automatically. Because this library uses templates, in most cases, the run-time performance is equivalent to that of primitive numerical types but with the benefit of compile-time consistency checking.</p>

<H3><FONT COLOR="#000080">The Problem and the Constraints</FONT></H3>

<p>Generations of high-school science students have checked the results of their calculations for sanity by verifying that the dimensions come out right. Since the rules are relatively simple, it would make a lot of sense to automate those rules. Any search engine will confirm that the Internet is awash with interactive calculators that automate the rules, but interactive tools are not particularly useful to a programmer.</p>
<p>What would really be helpful, at least to readers of this journal, is something that allows compilers to do the checking. The idea is certainly nothing new (see <a href="#1">[1]</a> for a detailed list of references). Variations on the idea have been implemented (e.g., [<a href="#1">1</a>, <a href="#2">2</a>, <a href="#3">3</a>, <a href="#4">4</a>]), but in the past there hasn&#146;t really been much support for this technique in commonly used languages. However, with the widespread availability of classes and templates in C++, it is now possible to build suitable tools for general use. This article examines the design of a simple, portable Quantity library, which uses templates to do compile-time checking of dimensional consistency. Although this library doesn&#146;t check units explicitly, most unit errors will be caught at compile time as well.</p>
<p>If it isn&#146;t obvious how helpful and useful this checking could be, simply consider the loss of the $125 million Mars Climate Orbiter <a href="#5">[5]</a>. Though there were many factors involved, the root cause was that one subsystem passed numbers to another subsystem, and the two subsystems did not agree on what the units were. The expected dimensions and units of the numbers were apparently not represented in a way that allowed automatic detection of this improper use. The result was both expensive and embarrassing. Of course, most software has far less spectacular failure modes, but, even for mundane work, it still makes sense to increase reliability by using as much automatic checking as possible.</p>
<p>Since the dimension-checking library described in this article is intended to solve a very practical problem, I felt it appropriate to impose a very practical constraint on it. In order to ensure that as many programmers as possible can use this code, it must not depend on C++ language features that don&#146;t work (or don&#146;t work well) on popular compilers &#151; regardless of whether the ISO language specification says they should work. This constraint leads to some odd and inelegant implementation strategies, but C++ is tough enough to handle this constraint and still keep the library interface reasonably clean.</p>

<H3><FONT COLOR="#000080">The Obvious Solution</FONT></H3>

<p>Physical quantities can be represented as a floating-point magnitude and a vector of integer exponents (see sidebar, <a href="side1.htm">&#147;The SI System of Units&#148;</a>), so the obvious solution is to define a class that contains magnitude and exponent values:</p>

<pre>
class quantity
{
  // ...
  private:
    double m_magnitude;
    int    m_length_exponent;
    int    m_mass_exponent;
    int    m_time_exponent;
    // ...
};
</pre>

<p>Appropriate constructors and arithmetic operators could then be defined for objects of this <B>quantity</B> class. The actual arithmetic is fairly easy. For example, to multiply two quantities, you simply multiply the magnitudes and add the exponents (e.g., <I>meters * meters squared = meters cubed</I>), and each member function can check for dimensional consistency as needed.</p>
<p>Such a class would work fine. It would even be necessary for certain applications, such as an interactive calculator, where the exact dimensions are not known until run time. It would also be an appropriate solution in Java. However, this approach does not provide compile-time checking of dimensional consistency, and it also imposes a serious run-time overhead in both space and time relative to arithmetic with primitive numeric types.</p>

<H3><FONT COLOR="#000080">The Better Solution</FONT></H3>

<p>A better design (for most problems) is to define a separate class for each possible combination of dimension exponents so that you have separate types for length, area, volume, time, speed, density, and so on. This solution makes the dimension exponents part of the type rather than part of the data, so dimension exponents do not consume space or processor overhead at run time. Since this technique specifies all dimensional information at compile time, it also allows the compiler to do consistency checking.</p>
<p>Of course, you must define many possible types. There are seven SI dimensions (length, mass, time, electric current, thermodynamic temperature, amount of substance, and luminous intensity). Even if you make the dubious assumption that no dimension will ever have an exponent larger than four, it still leaves nine possibilities (-4 through +4) for each of the seven exponents. A distinct type is required for each of the 97 possible combinations of exponents, since each represents a different sort of physical quantity. That&#146;s over 4 million types, and then you need to define a multiplication operator for each possible pair of those types, which means <I>(9</I>7<I>)*(9</I>7<I>)</I> distinct operators. Now double that by adding division to the mix, and you have over 40 trillion operator functions.</p>
<p>Fortunately, you don&#146;t have to define them all by hand. Templates can tame this complexity, and the most basic one just wraps all the dimension exponents into a single type:</p>

<pre>
template&lt; int D1, int D2, int D3 &gt;
struct dims
{
  enum { dim1 = D1,
         dim2 = D2,
         dim3 = D3 };
};
</pre>

<p>(For brevity, these examples include only the first three dimensions, but the code at &lt;www.cuj.com/code&gt; includes all seven.) <B>struct</B> and <B>enum</B> simply allow access to the template arguments from other places; this is a fairly standard technique in template programming.</p>
<p>The <B>dims</B> class really only has one purpose, to serve as a parameter for other template classes, for example, an improved <B>quantity</B> class:</p>

<pre>
template&lt; typename D &gt;
class quantity
{
  public:
    quantity() {}
    // default copy ctor is ok
    // default operator=() is ok
    // default dtor is ok
  private:
    explicit
      quantity( double m ) :
      m_magnitude( m ) {}
    double  m_magnitude;
};
</pre>

<p>The class definition provides a default constructor so that I can create arrays of quantities, so I can use quantities in STL containers. In order to be as efficient as a naked <B>double</B>, the default constructor leaves the actual value undefined. The copy constructor and assignment operator are as efficient as those of a <B>double</B>, and they provide exactly the correct semantics: only objects whose class is the same (i.e., whose dimensions are exactly the same) can be copied and assigned. When you need variables to hold accelerations, for example, you can now declare and use them like this:</p>

<pre>
typedef dims&lt; 1, 0, -2 &gt; accel_d;
quantity&lt; accel_d &gt; lead_accel;
quantity&lt; accel_d &gt; feather_accel;
feather_accel = lead_accel;
</pre>

<p>A full complement of arithmetic operators is also necessary. Most of these operators could be defined as member functions, but it works out better if they are just plain old (non-member) functions. These functions are quite easy to define, although naturally they must be templated (&#147;lhs&#148; and &#147;rhs&#148; are common abbreviations for &#147;left-hand side&#148; and &#147;right-hand side&#148;):</p>

<pre>
template&lt; typename D &gt;
quantity&lt; D &gt; operator+ (
  quantity&lt; D &gt; lhs,
  quantity&lt; D &gt; rhs )
{
  return quantity&lt; D &gt;(
    lhs.m_magnitude +
    rhs.m_magnitude );
}
</pre>

<p>At first, it might appear easier to use the whole <B>quantity&lt;&gt;</B> type as the operator function&#146;s template parameter (rather than just the dimension type), but then the compiler would think this definition should be used for every addition, no matter what the operand types were. The definition above restricts this <B>operator+</B> to apply only to <B>quantity&lt;&gt;</B>, so you can still have <B>operator+</B> defined for other types.</p>
<p>You can define all the unary and binary addition and subtraction operators in a similar way, so long as you declare them all to be friends of the <B>quantity&lt;&gt;</B> class so they can use the constructor they need to create their results.</p>

<H3><FONT COLOR="#000080">Type Generators</FONT></H3>

<p>Multiplication is a bit messier because you can mix types. Even worse, the result type of a multiply is usually different from either of the operand types (e.g., <I>speed * time = length</I>). This presents something of a problem: in the definition of the <B>operator*</B> function, what is the return type?</p>
<p>The solution to this problem is a &#147;type generator,&#148; a class whose purpose is simply to define a type. An example will make this clearer:</p>

<pre>
template&lt; typename D_LHS,
          typename D_RHS &gt;
struct product
{
  enum { d1 = D_LHS::dim1 +
              D_RHS::dim1,
         d2 = D_LHS::dim2 +
              D_RHS::dim2,
         d3 = D_LHS::dim3 +
              D_RHS::dim3 };
  typedef quantity&lt; dims&lt;
    d1, d2, d3 &gt; &gt; result_type;
};

template&lt; typename D_LHS,
          typename D_RHS &gt;
typename
product&lt; D_LHS,
         D_RHS &gt;::result_type
  operator*(
    quantity&lt; D_LHS &gt; lhs,
    quantity&lt; D_RHS &gt; rhs )
{
  return typename
    product&lt; D_LHS, D_RHS &gt;::
    result_type(
      lhs.m_magnitude *
      rhs.m_magnitude );
}
</pre>

<p>Here <B>struct</B> <B>product</B> is the type generator. Its purpose is to define the result type of a multiplication of two quantities of differing dimensions. The actual calculation is trivial, which is good because all calculations in a type generator must be done at compile time. In other words, the expressions must be compile-time constants. The trick is to use the type generator to create a name that you can use for the return type in the declaration of the <B>operator*</B> function. (Whenever a type is pulled out of an instantiation of a templated class or <B>struct</B> like this &#151; i.e., whenever you invoke a type generator &#151; precede it with the keyword <B>typename</B> to let the compiler know what you&#146;re doing.)</p>
<p>Division is handled in a similar way, with its own type generators. The complete Quantity library (available at &lt;www.cuj.com/code&gt;) also adds definitions of integer powers and roots of quantities.</p>

<H3><FONT COLOR="#000080">Dimensionless Results</FONT></H3>

<p>Multiplication and division introduce another twist into the situation: the dimension exponents of the results can be all zero. In other words, the result is just a number. For example, <I>time * frequency</I> or <I>speed / speed</I> just produce a dimensionless number.</p>
<p>The type generators described above actually create results of type <B>quantity&lt; dims&lt; 0, 0, 0&gt; &gt;</B>, which is going to create a problem. You cannot assign an object of that type to a <B>double</B>, or vice versa, because the types don&#146;t match. C++ allows the creation of implicit conversion functions, but because implicit conversions tend to make a program &#151; and its bugs &#151; very hard to understand, it&#146;s better in the long run to make the result of things like <I>speed / speed</I> really come out as a number instead of as a <B>quantity&lt; dims&lt; 0, 0, 0 &gt; &gt;</B>.</p>
<p>Another type generator can handle this job, though this one needs to be a little fancier, since it uses specialization to detect the interesting special case:</p>

<pre>
template&lt; typename D &gt;
class collapse
{
  typedef quantity&lt; D &gt;
    result_type;
}

template&lt;&gt;
class collapse&lt; dims&lt; 0, 0, 0 &gt; &gt;
{
  typedef double result_type;
}
</pre>

<p>In effect, this is the compile-time equivalent of an if statement. Invoking <B>collapse&lt; D &gt;::result_type</B> will produce the same thing as <B>quantity&lt; D &gt;</B>, except that, if <B>D</B> is <B>dims&lt; 0, 0, 0 &gt;</B>, the result collapses down to a <B>double</B> instead.</p>
<p>It&#146;s fairly simple to insert this logic into the code, as the operator functions don&#146;t change. All that&#146;s needed is to replace the <B>typedef</B> inside each operation&#146;s type generator with this new <B>typedef</B>:</p>

<pre>
typedef typename
  collapse&lt; dims&lt; d1, d2, d3 &gt; &gt;::
    result_type result_type;
</pre>

<p>Since there are no implicit conversions to or from <B>double</B>, you must add dedicated <B>operator*</B> and <B>operator/</B> functions to handle the cases where one operand is a <B>quantity&lt;&gt;</B> and the other is a <B>double</B>.</p>
<p>This takes care of automatically generated types, but it&#146;s still possible that the user might (incorrectly) instantiate <B>quantity&lt; dims&lt; 0, 0, 0 &gt; &gt;</B> explicitly. Another template, specialized for only one value of its <B>bool</B> template argument and deliberately left undefined for the other, can provide compile-time detection of this error:</p>

<pre>
template&lt; bool B &gt;
  struct static_assert;

template&lt;&gt; struct
  static_assert&lt; true &gt;
{
  typedef char dummy;
};
</pre>

(In spite of any appearance to the contrary, this technique is not called &#147;partial template specialization&#148; &#151; that term is used when you specify some but not all parameters of a template.) Now, inside the class <B>dims&lt;&gt; enum</B>, you add:</p>

<pre>
not_all_zero =
  D1 != 0 || D2 != 0 || D3 != 0
</pre>

and inside <B>class quantity&lt;&gt;</B>, you add:</p>

<pre>
enum { ok = D::not_all_zero };
typedef
typename static_assert&lt; ok &gt;::dummy
  dimensions_must_not_all_be_zero;
</pre>

<p>With these additions, if <B>quantity&lt; dims&lt; 0, 0, 0 &gt; &gt;</B> is ever instantiated, the compiler will generate a reference to <B>static_assert&lt; false &gt;::dummy</B>, and since that is undefined, a compile-time error will result. If you&#146;re lucky, the diagnostic will include the long name <B>dimensions_must_not_all_be_zero</B>, thereby giving the user a hint as to what actually went wrong. For more extensive examples of this technique, see the <B>static_assert</B> library in <a href="#7">[7]</a>.</p>

<H3><FONT COLOR="#000080">Input/Output</FONT></H3>

<p>An output operator is straightforward and can produce something that is as close to the official standard as you can get in plain ASCII. Just output the magnitude, and then, for each dimension, output the official abbreviation and the exponent.</p>
<p>An input operator is harder to implement, and it is also less important (since you can just read a <B>double</B> and convert it as described below). For a simple library, an input operator isn&#146;t necessary at all.</p>

<H3><FONT COLOR="#000080">Units and Conversions</FONT></H3>

<p>The last crucial piece of the puzzle is a set of constants for the base units (meters, kilograms, seconds), since without these constants there is no way to get a defined value into a <B>quantity&lt;&gt;</B> variable.</p>
<p>C++ provides various ways of defining these constants, but one of the simplest ways is to use inline functions. There are only a handful of these base units, and each must be declared as a friend of the <B>quantity&lt;&gt;</B> class to give it access to the private constructor:</p>

<pre>
inline quantity&lt; dims&lt; 1, 0, 0 &gt; &gt; meter() { return
quantity&lt; dims&lt; 1, 0, 0 &gt; &gt;( 1.0 ); }

inline quantity&lt; dims&lt; 0, 1, 0 &gt; &gt; kilogram() { return
quantity&lt; dims&lt; 0, 1, 0 &gt; &gt;( 1.0 ); }

inline quantity&lt; dims&lt; 0, 0, 1 &gt; &gt; second() { return
quantity&lt; dims&lt; 0, 0, 1 &gt; &gt;( 1.0 ); }
</pre>

<p>The constructor arguments supplied in these functions determine the internal representation that is being used. In this case, all internal values are stored as meters, kilograms, and seconds, but that association is hidden from the user, so it doesn&#146;t normally matter what numbers are used internally.</p>
<p>Now the library is finally complete enough to initialize a <B>quantity&lt;&gt;</B> variable, for example:</p>

<pre>
quantity&lt; accel_d &gt; free_fall;
free_fall = 9.80665 * meter() /
  ( second() * second() );
</pre>

<p>The compile-time type checking forces the units to be stated explicitly this way, so there is no way that the programmer can simply forget to specify the units. Notice that there is an intermediate expression <B>( second() * second() )</B> that has a type of &#147;second squared,&#148; but the templates generate that type automatically. The only time a programmer has to specify dimensions is when declaring a variable.</p>
<p>Definitions of other units are easy:</p>

<pre>
inline quantity&lt; dims&lt; 1, 1, -2 &gt; &gt;
  newton() { return meter() *
    kilogram() /
    ( second() * second() ); }

inline quantity&lt; dims&lt; 1, 0, 0 &gt; &gt;
  yard() { return
    0.9144 * meter(); }
</pre>

<p>and so on.</p>
<p>One very nice feature that falls out of this design is that you don&#146;t need any special conversion functions. To convert a <B>quantity&lt;&gt;</B> to a particular unit, just divide by that unit. Look at it this way: to find out how many 3&#146;s there are in 12, divide 12 by 3. To find out how many yards there are in a <B>quantity&lt;&gt; x</B>, divide <B>x</B> by <B>yard()</B>. To verify at compile time that the dimensions match, just feed the result to the constructor for <B>double</B>:</p>

<pre>
cout &lt;&lt; "x = " &lt;&lt;
  double( x / yard() ) &lt;&lt;
  " yards\n";
</pre>

<p>If you forget the <B>double</B> constructor, and <B>x</B> is not a length <B>quantity&lt;&gt;</B>, you will still find out at run time that something is wrong because the output will include other units in addition to <B>"yards"</B>.</p>

<H3><FONT COLOR="#000080">Portability Considerations</FONT></H3>

<p>To maximize portability, the Quantity library implementation is tweaked to use only a subset of ISO-Standard C++. Some of these tweaks are minor and subtle, while others are glaring and pervasive.</p>
<p>The least noticeable technique is to make parsing easier by putting all compile-time arithmetic operations inside <B>enum</B> declarations. Since this approach is still ISO-Standard C++, it doesn&#146;t create problems for compliant compilers, but it makes it possible for other compilers to parse the code.</p>
<p>A less subtle technique is to define the <B>operator*</B> and <B>operator/</B> functions with two <B>quantity&lt;&gt;</B> operands as member functions of class <B>quantity&lt;&gt;</B>. Again, this solution is perfectly legal ISO C++, but it avoids problems that sometimes arise in non-compliant compilers.</p>
<p>Because MSVC (Microsoft Visual C++) doesn&#146;t support partial template specializations at all, the library is structured to completely avoid using them. It was pure luck that I was able to get away with this; sometimes there are workarounds, but in many cases partial template specialization is essential to the design of the program, and you have no choice but to write off any compiler that doesn&#146;t support it.</p>
<p>Last, but by no means least, the <B>operator*</B> and <B>operator/</B> functions must be friends of all instantiations of class <B>quantity&lt;&gt;</B>. Getting friend declarations to work correctly when both the class and the function were templated proved very troublesome, so to make my life easier, I used an odd technique to avoid the need for friend declarations at all. Let me say right up front that this is ugly, but the alternatives I tried were even worse.</p>
<p>The trick is to define a &#147;wrapper&#148; class called <B>permit</B>:</p>

<pre>
struct permit
{
  permit() {}
  explicit permit( double v ) :
    m_value( v ) {}
  operator double() const
    { return m_value; }
  double m_value;
};
</pre>

<p>This class acts like a <B>double</B>, but it has a distinguishable type. Then I defined a constructor and an accessor function in class <B>quantity&lt;&gt;</B> that each take <B>permit</B> as an argument, thus allowing non-friends to create and read the internal representation of <B>quantity&lt;&gt;</B>.</p>
<p>Of course this technique violates encapsulation, but it does so in a disciplined way. To penetrate the encapsulation barrier, you must explicitly create a <B>permit</B> object, which the library actually places inside a detail namespace to make it even more obvious that you shouldn&#146;t be messing with it. Thus it is impossible to <I>accidentally</I> violate the encapsulation. Since the philosophy of C++ itself is to prevent accidents but not to try to protect against malicious mischief, I felt this was a reasonable tradeoff in return for simple, robust code that would be easy to support. (Any programmer truly determined to access the representation could already do so with either a union or a <B>reinterpret_cast</B> anyway.) Of course as soon as compiler support for template friends improves sufficiently, I will rip this out in a heartbeat and replace it with the correct friend declarations.</p>
<p>To date, this code has been compiled and run under three compilers (MSVC, gnu g++, and Metrowerks) and three operating systems (Windows NT, SunOS, and Macintosh), but the library is still a work-in-progress and I intend to support it under other popular compilers as well.</p>

<H3><FONT COLOR="#000080">Performance</FONT></H3>

<p>When you compile a program using this library in debug mode, the performance will be much worse than if you use raw <B>double</B>s. However, things get better when you turn on the optimizer. Exactly how much better depends on the compiler. This library is still new, and there isn&#146;t much experience with it yet, but in preliminary testing, the gnu g++ compiler produced code whose execution time was so close to that of raw <B>double</B>s that the difference was less than the measurement uncertainty, indicating that it is reasonable to expect zero cost at run time.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Gordon S. Novak, Jr. &#147;Conversion of Units of Measurement,&#148; <I>IEEE Transactions on Software Engineering</I>, August 1995, pp. 651-661, &lt;www.cs.utexas.edu/users/novak/units95.html&gt;.</p>
<p><a name="2"></a>[2]  Citrus is a library and suite of demo applications for converting numbers with units into numbers with different units. &lt;http://citrus.sourceforge.net/&gt;.</p>
<p><a name="3"></a>[3]  <I>The SI Library of Unit-Based Computation</I>, &lt;www.fnal.gov/fermitools/abstracts/siunits/abstract.html&gt;. This is similar to the Quantity library discussed in this article, but it has more features and is less portable.</p>
<p><a name="4"></a>[4]  John J. Barton and Lee R. Nackman. <I>Scientific and Engineering C++: An Introduction with Advanced Techniques and Examples</I> (Addison-Wesley, 1994).</p>
<p><a name="5"></a>[5]  &#147;NASA&#146;s Metric Confusion Caused Mars Orbiter Loss,&#148; &lt;www.cnn.com/TECH/space/9909/30/mars.metric/index.html&gt;</p>
<p><a name="6"></a>[6]  Barry N. Taylor. &#147;Guide for the Use of the International System of Units (SI),&#148; <I>National Institute of Standards and Technology Special Publication 811</I>, &lt;http://physics.nist.gov/Document/sp811.pdf&gt;.</p>
<p><a name="7"></a>[7]  The Boost website provides free peer-reviewed portable C++ source libraries. &lt;www.boost.org&gt;.</p>

<h4><a href="../../../source/2002/nov02/kennisto.zip"></a></h4>


<p><i><B>Michael Kenniston</B> has a B.S. in Mathematics from Worcester Polytechnic Institute and a Ph.D. in Computer Science from Stanford University. He spent 15 years as a software engineer in industry, first at Bell Laboratories and later at FutureSource; he is now bringing his real-world experience back to the world of academia as a visiting assistant professor at DePaul University. He can be contacted at <B>mkenniston@cs.depaul.edu</B>.</i></p>

</blockquote></body></html>
