<HTML>   
     <HEAD>
<TITLE>November 2002/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: 106 Miles to Vancouver</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>A <b>const</b> conundrum and how to weasel out of it.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><b><I>Copyright &copy; 2002 Robert H. Schmidt</I></b></p>

<p>They&#146;re putting the band back together.</p>
<p>By the time you read this, Halloween will be only a few weeks away. If your Samhain dance card is still empty, may I recommend a date with The C++ Seminar #3 <a href="#1">[1]</a> in Vancouver, WA <a href="#2">[2]</a>. The setting this time is The Heathman Lodge, which I&#146;m told looks like a timber-hewn Swiss mountain retreat.</p>
<p>Continuing their tradition, the Fab Five <a href="#3">[3]</a> will perform new material never before seen in decent society. In addition, I&#146;ll be driving down to play moderator (translation: ringmaster) for the panels. I thoroughly enjoyed TCS 1, was sorry to miss TCS 2, and very much look forward to TCS 3. If you are fans of the presenters, or just want concentrated time with fellow C++ophiles, I encourage you to attend.</p>

<H3><FONT COLOR="#000080">Mem Fun for the Whole Family!</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p>Hello,</p>
<p>I hope you find this an interesting question. I&#146;d really like to understand this area better, and I&#146;ve not had much luck finding an answer.</p>
<p>Here&#146;s my situation:</p>
<p>I have a container class <B>C</B> with a private STL vector member <B>v</B>. The vector holds objects (not pointers) of element type <B>E</B>. Some of the container functions just go through the vector and call a member function for each item in the vector. I&#146;m using the STL algorithm <B>for_each</B> to iterate over the vector.</p>
<p>At first, I had written an intermediate function that called the member function and then passed that intermediate function to <B>for_each</B>. But then I found I could use the pointer-to-member function adapter <B>mem_fun_ref</B> to do the same thing. This code works fine and now looks like:</p>

<pre>
void C::show_each()
   {
   for_each(v.begin(), v.end(),
      mem_fun_ref(&amp;E::show));
   }
</pre>

<p>The problem comes when I have a similar situation, but the member function takes a parameter. Herb Schildt&#146;s <I>STL from the Ground Up</I> (Osborne McGraw-Hill, 1998, p. 283) has an example just like this &#151; the example uses the <B>bind2nd</B> binder to force <B>for_each</B> to pass the parameter with each function call. But one difference is that the vector contains pointers to the objects, not copies of the objects, and it uses the adapter <B>mem_fun1</B>.</p>
<p>I&#146;m trying to adapt the code to use <B>mem_fun1_ref</B> without any luck. Here&#146;s the non-compiling code, which shows error messages in Microsoft Visual C++ 6.0:</p>

<pre>
void C::show_each_in(int width)
   {
   for_each(v.begin(), v.end(),
      bind2nd(mem_fun1_ref
         (&amp;E::show_in), width));
   }
</pre>

<p>Any idea what gives? It seems the <B>bind2nd</B> binder doesn&#146;t work with the object references, but is there a substitute that does? Or is the problem something completely different? Thanks for any help or advice you might be able to give!</p>
<p>&#151; Dave Gustafson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Since you don&#146;t provide me any additional code, I&#146;ve had to make some educated guesses toward reconstructing your original problem. I&#146;m pretty sure I now know what is happening; at the very least, I can reproduce your compiler diagnostics.</p>
<p>I&#146;ve kept the logic of your code fragments intact, but altered the names for publication. From those fragments I&#146;ve extrapolated the complete program that appears as <a href="list1.htm">Listing 1</a>. That program, when compiled with Visual C++ 6.0 SP 4, produces the diagnostic in <a href="list2.htm">Listing 2</a>.</p>
<p>When I first saw this diagnostic, it took me a few moments to connect the dots:</p>
<UL><LI>   Line 37 of the header <B>&lt;algorithm&gt;</B> lies within <B>for_each</B>, at the point of an attempted call to <B>binder2nd</B>&#146;s <B>operator()</B>. <B>binder2nd</B>&#146;s <B>operator()</B> takes a <B>const</B> reference to the class type wrapped/adapted by <B>mem_fun1_ref_t</B>. In this case, that class type is <B>E</B>.</LI>
<LI>   <B>binder2nd</B>&#146;s <B>operator()</B> passes the <B>const E</B> reference onto <B>mem_fun1_ref_t</B>&#146;s <B>operator()</B>.</LI>
<LI>   Because its <B>E</B> parameter is <B>const</B>, <B>mem_fun1_ref_t</B>&#146;s <B>operator()</B> can call only <B>const</B> members of that <B>E</B> parameter.</LI>
<LI>   <B>E::show_in</B> is not a <B>const</B> member.</LI>
<LI>   Therefore, <B>mem_fun1_ref_t</B>&#146;s <B>operator()</B> cannot call <B>E::show_in</B>.</LI></UL>

<p>While the diagnostic&#146;s immediate cause is <B>mem_fun1_ref_t</B>&#146;s <B>operator()</B> trying to call a non-<B>const</B> member on a <B>const E</B>, the underlying cause is <B>binder2nd</B>&#146;s <B>operator()</B> assuming and allowing only <B>const</B> arguments. Both <B>binder1st</B> and <B>binder2nd</B> suffer this same limitation, one that the C++ committee considers a defect in the Standard <a href="#4">[4]</a>. I expect that by the time the next standard is approved &#151; and possibly before that, in a Technical Corrigendum &#151; the committee will have fixed this defect.</p>
<p>After changing <B>E::show_in</B> to be a <B>const</B> member, I&#146;m left with one new diagnostic: </p>

<pre>
test.cpp(42) : error C2664: 
'mem_fun1_ref' :   cannot convert
parameter 1 from 
void (__thiscall E::*)(int) const
to void
(__thiscall E::*)(int)'

Types pointed to are unrelated; 
conversion requires reinterpret_cast, 
C-style cast or function-style cast
</pre>

<p><B>mem_fun1_ref</B> is not part of the C++ Standard library, but rather is a non-standard extension particular to the Dinkumware implementation <a href="#5">[5]</a>. That extension is defined essentially as:</p>

<pre>
template&lt;typename R, typename T, typename A&gt;
mem_fun1_ref_t&lt;R, T, A&gt;
mem_fun1_ref(R (T::*m)(A))
   {
   return (mem_fun1_ref_t&lt;R, T, A&gt;(m));
   }
</pre>

<p>mem_fun1_ref</B> can adapt only a non-<B>const</B> member. Asking it to adapt a <B>const</B> member leads to the diagnostic. To adapt a <B>const</B> member function, <B>mem_fun1_ref</B> would need a slightly different definition:</p>

<pre>
template&lt;typename R, typename T, typename A&gt; /*
vvvvv*/
const_mem_fun1_ref_t&lt;R, T, A&gt; /*
^^^^^                     vvvvv*/
mem_fun1_ref(R (T::*m)(A) const)
   {     //vvvvv          ^^^^^
   return (const_mem_fun1_ref_t&lt;R, T, A&gt;(m));
   }     //^^^^^
</pre>

<p>You&#146;re caught in a dilemma:</p>

<UL><LI>   <B>bind2nd</B> requires a <B>const</B> member function.</LI>
<LI>   <B>mem_fun1_ref</B> requires a non-<B>const</B> member function.</LI></UL>

<p>The Standard seems to offer hope through <B>mem_fun_ref</B>, which is specified to come in four flavors:</p>

<pre>
//
// non-const member with no arguments
//
template&lt;typename R, typename T&gt;
mem_fun_ref_t&lt;R, T&gt;
mem_fun_ref(R (T::*m)());
//
// non-const member with one argument
//
template&lt;typename R, typename T, typename A&gt;
mem_fun1_ref_t&lt;R, T, A&gt;
mem_fun_ref(R (T::*m)(A));
//
// const member with no arguments
//
template&lt;typename R, typename T&gt;
const_mem_fun_ref_t&lt;R, T&gt;
mem_fun_ref(R (T::*m)() const);
//
// const member with one argument
//
template&lt;typename R, typename T, typename A&gt;
const_mem_fun1_ref_t&lt;R, T, A&gt;
mem_fun_ref(R (T::*m)(A) const);
</pre>

<p>The second overload is equivalent to <B>mem_fun1_ref</B>. The fourth overload seems to be what we want and should allow:</p>

<pre>
bind2nd(mem_fun_ref(E::show_in), width)
</pre>

<p>You can probably guess the punch line: the Visual C++ 6.0 library does not properly support this overload set. Of the four overloads, the library defines only the first one.</p>
<p>Ultimately, then, you can&#146;t do what you want with the stock Visual C++ 6.0 library. Your useful choices seem to be these:</p>

<UL><LI>   Roll your own <B>for_each</B> algorithm.</LI>
<LI>   Roll your own adapter(s).</LI>
<LI>   Implement the missing <B>mem_fun_ref</B> adapter factory.</LI>
<LI>   Forget <B>mem_fun_ref</B> and <B>mem_fun1_ref</B>, and construct the <B>const_mem_fun1_ref_t&lt;void, E, int&gt;</B> adapter yourself.</LI>
<LI>   Use a different library. (The Dinkumware library shipping with Visual C++ .NET correctly provides all four overloads.)</LI></UL>

<p>If I change the two places I&#146;ve indicated &#151; declaring <B>E::show_in</B> <B>const</B>, and calling <B>mem_fun_ref</B> instead of <B>mem_fun1_ref</B> &#151; the program in <a href="list1.htm">Listing 1</a> compiles and runs correctly on all of my other test systems. In addition, the latest libraries from Dinkumware and Metrowerks add an extra non-standard <B>operator()</B> to <B>binder1st</B> and <B>binder2nd</B>. These extra overloads let the binders work with non-<B>const</B> member functions, in accordance with how I expect the Standard to evolve.</p>
<p>The above discussion involves MEMber FUNctions invoked on REFerences to objects; that&#146;s why the adapter names all start with <B>mem_fun_ref</B>. The same ideas apply to member functions invoked on pointers to objects (<B>mem_fun</B>...) and non-member functions (<B>ptr_fun</B>...). Scott Meyers discusses the three adapter families in Item 41 of his <I>Effective STL</I> <a href="#6">[6]</a>.</p>

<H3><FONT COLOR="#000080">It&#146;s a long&lt;N&gt; World, Revisited</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> (In reference to &#147;It&#146;s a <B>long</B> <B>long</B> <B>long</B> <B>long</B> world&#148; in your July column.)</p>
<p>Why do all answers to this issue ignore templates?</p>
<p>In this case, the question suggests <B>s8</B>, <B>u128</B>, etc; the answer suggests <B>int</B><I>N</I><B>_t</B>.</p>
<p>The approach taken by many people who model hardware is to define templates, such as <B>Uint&lt;</B><I>N</I><B>&gt;</B>. One example of this, which seems to be becoming accepted, is the SystemC.org framework.</p>
<p>I&#146;ve never seen this problem solved as templates outside of the hardware modeling community. Is there a good reason why this seemingly obvious approach is not used more widely?</p>
<p>&#151; Dave Whipp</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> (For those who tuned in late: in my July column, I answered a question from Tony Clifton, who wondered about possible Standard-sanctioned names for C++ integer types beyond <B>long</B>. I surmised that any solution would come in the library instead of the language, and that the C99 library offered a likely direction.)</p>
<p>I had considered templates while crafting that column. Indeed, I offered a template solution to this very problem way back in my January 1998 column. I ultimately decided not to bring up templates for three reasons:</p>

<UL><LI>   This is a problem that scopes both C and C++. C lacks templates and is not likely to ever get them.</LI>
<LI>   Many members of the C++ committee still believe that C compatibility is important, even vital. As the C committee already selected the <B>int</B><I>N</I><B>_t</B> approach, the C++ committee will certainly consider that same approach.</LI>
<LI>   With a template mechanism, you must allow declarations you probably don&#146;t want.</LI></UL>

<p>I want to briefly explore this last point here.</p>
<p>Assume you want a template that wraps exact-size integers. One simple and simplistic implementation is:</p>

<pre>
template&lt;size_t bit_count&gt;
class Int
   {
   };

template&lt;&gt;
class Int&lt;8&gt;
   {
private:
   typedef signed char native;
public:
   Int(native n = 0) : n(n)
      {
      }
   operator native &amp;()
      {
      return n;
      }
private:
   native n;
   };

template&lt;&gt;
class Int&lt;16&gt;
   {
private:
   typedef short native;
public:
   Int(native n = 0) : n(n)
      {
      }
   operator native &amp;()
      {
      return n;
      }
private:
   native n;
   };
</pre>

<p>and so on, for all of the native integer sizes available. You can use these types in lieu of real integers in many contexts:</p>

<pre>
Int&lt;16&gt; i16 = 111;
int i = i16;
i16 = 222;
++i16;
cout &lt;&lt; i16;
</pre>

<p>But then consider:</p>

<pre>
Int&lt;21&gt; i21;
Int&lt;21&gt; *p21;
</pre>

<p>What does this mean on a system lacking 21-bit integers? Should such declarations be allowed? If not, how do you completely and elegantly enforce that rule? Or should <B>Int&lt;21&gt;</B> round up/down to the nearest native size?</p>
<p>I&#146;ve never seen the SystemC code <a href="#7">[7]</a>, so I don&#146;t know if it addresses these problems.</p>
<p>Overall, if you care about neither C portability nor (likely) C++ library conformance, and if you find a satisfactory answer to the <B>Int&lt;21&gt;</B> problem, then templates are a quite valid approach, one in many ways superior to the C99 <B>typedef</B>s.</p>

<H3><FONT COLOR="#000080">Spatial Anomaly in my Inbox</FONT></H3>

<p>The saga of the DOS parallel port reaches an ironic conclusion.</p>
<p>Last time I cited several Diligent Readers for their help in this cause and promised to summarize their replies. Today I can find neither their messages nor the notes I had put together from those messages; even my usually reliable backups are no help. Just as the original question fell from another reality into this one, my answer has vanished, possibly back to the question&#146;s home continuum.</p>
<p>I suppose I could solicit help again or try researching this on my own. I could, but I won&#146;t, for there&#146;s clearly a Deeper Truth at work here. Like the Grail perched tantalizing out of Indiana Jones&#146;s grasp <a href="#8">[8]</a>, there are some things we are allowed to hold briefly yet are never meant to keep.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>My May column item &#147;Mystery Date&#148; contains this simple exception-handling sequence:</p>

<pre>
try
   {
   // exception thrown...
   }
catch (std::exception)
   {
   }
catch (int)
   {
   }
catch (...)
   {
   // ...and caught here
   }
</pre>

<p>It also contains a typo. As Diligent Reader Jonas Meyer Rasmussen points out, the first catch clause should be:</p>

<pre>
catch (std::exception &amp;)
</pre>

<p>or more likely:</p>

<pre>
catch (std::exception const &amp;)
</pre>

<p>Otherwise the original thrown exception is needlessly copied and sliced.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  &lt;www.thecppseminar.com/03/ index.htm&gt;</p>
<p><a name="2"></a>[2]  Not to be confused with Vancouver, BC. Vancouver, WA is across the Columbia River from Portland, OR.</p>
<p><a name="3"></a>[3]  For the uninitiated, that&#146;s Andrei Alexandrescu, Steve Dewhurst, Scott Meyers, Dan Saks, and Herb Sutter.</p>
<p><a name="4"></a>[4]  http://anubis.dkuug.dk/jtc1/sc22/ wg21/docs/lwg-defects.html#109</p>
<p><a name="5"></a>[5]  The Dinkumware library bundled with Visual C++ 6.0 was first published in 1995, three years before the C++ Standard froze. I suspect that <B>mem_fun1_ref</B> was an interim part of the library that didn&#146;t make the final cut.</p>
<p><a name="6"></a>[6]  Scott Meyers. <I>Effective STL</I> (Addison-Wesley, 2001), pp 173-7. And yes, the <B>mem_fun</B> family should be called the <B>mem_fun_ptr</B> family for consistency with <B>mem_fun_ref</B>. But <B>mem_fun</B> was used first, and the name stuck. The library people on the standards committee are funny this way. In an apparent policy of stare decisis, they in some ways abide by precedent; yet in other ways &#151; templatizing library elements, moving elements into namespace <B>std</B> &#151; they radically disregard precedent.</p>
<p><a name="7"></a>[7]  &lt;www.SystemC.org/&gt;</p>
<p><a name="8"></a>[8]  &lt;http://us.imdb.com/Title?0097576&gt;</p>

<h4><a href="../../../source/2002/nov02/schmidt.zip"></a></h4>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>


</blockquote></body></html>
