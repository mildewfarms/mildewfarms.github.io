<HTML>   
     <HEAD>
<TITLE>November 2002/C/C++ Tip #9: Lexical Conversions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   C/C++ Tip</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #9: Lexical Conversions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bjorn Karlsson</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>With unrelenting power, the programmer hacks away at yet another conversion between <B>int</B> and <B>string</B>, <B>string</B> and <B>double</B>, and more. Spread throughout the code like a disease, these conversions, once deemed too simplistic for reuse, are beginning to impact the clarity of the code. The remedy is close at hand, and it&#146;s called <B>lexical_cast</B>.</p>
<p>From the deep forests of Boost <a href="#1">[1]</a> come a number of useful C++ class libraries, covering an impressive range of domains &#151; numerical processing, graphs [<a href="#2">2</a>, <a href="#3">3</a>], threads <a href="#4">[4]</a>, metaprogramming, smart pointers <a href="#5">[5]</a>, and much more. It is here that you find <B>lexical_cast</B>, a small utility for performing lexical conversions consistently and correctly.</p>

<H3><FONT COLOR="#000080">lexical_cast</FONT></H3>

<p><a href="list1.htm">Listing 1</a> demonstrates how to use <B>lexical_cast</B>.</p>
<p><a href="list1.htm">Listing 1</a> tries to perform two conversions: one from <B>string</B> to <B>double</B>, and one from a <B>literal string</B> to <B>int</B>. The first conversion is done like this:</p>

<pre>
double d=boost::lexical_cast&lt;double&gt;(s);
</pre>

<p><B>lexical_cast</B> is a templated function, parameterized on the target type of the conversion. It works with all types that are <I>streamable</I> <a href="#6">[6]</a>. If a conversion fails, <B>lexical_cast</B> throws an exception of type <B>bad_lexical_cast</B>. In <a href="list1.htm">Listing 1</a>, such a failure is provoked by the second call to <B>lexical_cast</B>:</p>

<pre>
int i=boost::lexical_cast&lt;int&gt;("123 4");
</pre>

<p>The value <B>"123 4&#148;</B> is clearly not convertible to an <B>int</B>, causing the call to fail. The protection with <B>try</B>/<B>catch</B> must only be omitted when there is absolute certainty that the conversion cannot fail.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Tedious and repetitive tasks often offer opportunities for reuse. That is definitely the case with lexical conversions, and <B>lexical_cast</B> adds even more value than mere reuse with its elegant resemblance of a C++ cast &#151; the syntax and semantics become obvious. Thanks to Kevlin Henney, father of <B>lexical_cast</B>, you don&#146;t have to do much work to benefit from this fine piece of creative engineering &#151; just visit &lt;www.boost.org&gt; and get on with it!</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Boost, &lt;www.boost.org&gt;.</p>
<p><a name="2"></a>[2]  Jeremy G. Siek, Lie-Quan Lee, and Andrew Lumsdaine. <I>The Boost Graph Library: User Guide and Reference Manual</I> (Addison-Wesley, 2002).</p>
<p><a name="3"></a>[3]  Vitaly Ablavsky. &#147;Applying BGL to Computational Geometry,&#148; <I>C/C++ Users Journal</I>, August 2002.</p>
<p><a name="4"></a>[4]  Bill Kempf. &#147;The Boost.Threads Library,&#148; <I>C/C++ Users Journal</I>, May 2002.</p>
<p><a name="5"></a>[5]  Bjorn Karlsson. &#147;Smart Pointers in Boost,&#148; <I>C/C++ Users Journal</I>, April 2002.</p>
<p><a name="6"></a>[6]  The resulting type for the conversion must support <B>operator &gt;&gt;</B>, and the source type must support <B>operator &lt;&lt;</B>.</p>

<h4><a href="../../../source/2002/nov02/karlsson.zip"></a></h4>

<p><i><B>Bjorn Karlsson</B> works as a project manager at ReadSoft. He is the kind of out-going guy who likes to read ISO/IEC 14882:98. Bjorn can be reached at <B>bjorn.karlsson@readsoft.com</B>.</i></p>

</blockquote></body></html>
