<HTML><HEAD>
<TITLE>November 2002/Scientific Computing Using POOMA/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: The multiprocessor program</A></h4>
<pre>
#include "Pooma/Arrays.h"
int main(int argc, char* argv[])
{
  Pooma::initialize(argc,argv);
  Inform output;
  int nuProcessors, n, nuDiffusions;
  double alpha;
  const double beta =
    2.0 /* 2 created */ - 1.0 /* one consumed */;
  if (!processCommandLine(argc, argv, output,
              nuProcessors, n, nuDiffusions, alpha))
    return EXIT_FAILURE;

  Interval&lt;1&gt; N(0, n-1);
  Interval&lt;2&gt; vertDomain(N, N);
  Interval&lt;1&gt; I(1,n-2);
  Interval&lt;2&gt; interiorDomain(I,I);

  UniformGridPartition&lt;2&gt; partition
    (Loc&lt;2&gt;(nuProcessors, nuProcessors),
     GuardLayers&lt;2&gt;(1),
     GuardLayers&lt;2&gt;(0));
  UniformGridLayout&lt;2&gt; layout
    (vertDomain, partition, DistributedTag());

  Array&lt;2, double, MultiPatch&lt;UniformTag, Remote&lt;Brick&gt; &gt; &gt; Na
    (layout);
  Array&lt;2, double, MultiPatch&lt;UniformTag, Remote&lt;Brick&gt; &gt; &gt; Nb
    (layout);

  Na = Nb = 0.0;
  Pooma::blockAndEvaluate();
  Nb(n/2,n/2) = 1.0e+7;

  Fisher fisher(alpha, beta);
  Stencil&lt;Fisher&gt; stencil(fisher);

  for (int k = 0; k &lt; nuDiffusions; k += 2) {
    Na(interiorDomain) = stencil(Nb, interiorDomain);
    Nb(interiorDomain) = stencil(Na, interiorDomain);
  }

  Pooma::blockAndEvaluate();
  output &lt;&lt; (nuDiffusions % 2 ? Na(n/2,n/2) : Nb(n/2,n/2)) 
         &lt;&lt; std::endl;

  Pooma::finalize();
  return EXIT_SUCCESS;
}
&#151; End of Listing &#151;</pre></body></html>
