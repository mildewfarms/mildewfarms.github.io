<HTML>   
     <HEAD>
<TITLE>Java Solutions April 2002/Angelika Langer and Klaus Kreft</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjapr.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Angelika Langer and Klaus Kreft</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Secrets of equals</FONT></H3>

<BLOCKQUOTE>
<p>A wake-up call for Java developers: not all implementations of equals are equal.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Java magazines are full of articles describing the hottest and latest Java novelty to the interested reader. There is, however, little discussion of seemingly trivial core features of the Java programming language itself. Take for instance the <B>equals</B> method. It is a piece of basic infrastructure that is common to all classes. It is defined in class <B>Object</B>, and, as a consequence, all objects are equality comparable. <B>Object.equals</B> provides a default implementation of equality comparison, and, at times, the default implementation is just fine and semantically correct for a newly defined class. In other situations, the new class must override <B>equals</B> to provide meaningful and semantically correct equality comparison.</p>
<p>One would expect that overriding <B>equals</B>, since it is a fairly common task, should be a piece of cake. The reality is far from that. There is an amazing amount of disagreement in the Java community regarding correct implementation of <B>equals</B>. Look at the next best Java source code or open an arbitrary Java textbook and take a look at what you find. Chances are good that you will find several different approaches and a variety of recommendations.</p>
<p>In this article we take a closer look at the different techniques available for implementing <B>equals</B>. Our goal is to evaluate the approaches in order to gain a deeper understanding of the related ups and downs. For purpose of discussion, we arbitrarily picked a number of sample implementations that are accessible because they have been published. They are taken from <I>Program Development in Java</I> by Barbara Liskov with John Guttag <a href="#1">[1]</a>, <I>Effective Java</I> by Joshua Bloch <a href="#2">[2]</a>, <I>Practical Java</I> by Peter Haggar <a href="#3">[3]</a>, and the JDK 1.3 source code <a href="#4">[4]</a> (authors: James Gosling, Arthur van Hoff, Alan Liu). <a href="list1.htm">Listings 1</a>-<a href="list4.htm">4</a> show the examples.</p>
<p>A first glance at the source code reveals that the respective authors use a variety of techniques:</p>

<UL><LI>   <I>Signature.</I> It starts with disagreement regarding the signature of <B>equals</B>. One author (<a href="list1.htm">Listing 1</a>) uses overriding in combination with overloading and provides several versions of the <B>equals</B> method, while most authors just override the <B>equals</B> method defined in class <B>Object</B>, namely <B>Object.equals(Object o)</B>, without adding further versions with different signatures.</LI>
<LI>   <I>Comparing fields.</I> All authors agree that an <B>equals</B> implementation must compare fields defined in the class if these fields contribute to the state of the object. <a href="list2.htm">Listing 2</a> demonstrates that, in particular, transient and static fields are not considered.</LI>
<LI>   <I>Delegation to </I><B>super</B><I>.</I> There is agreement that <B>super.equals</B> should be invoked if the class has a superclass other than <B>Object</B>.</LI>
<LI>   <I>Type check and downcast.</I> All authors agree that a check must be performed to make sure that the other object is of a type comparable to this object. Note, there is disagreement regarding the way in which the type check is performed: most authors use the <B>instanceof</B> operator, while one author (<a href="list4.htm">Listing 4</a>) uses the <B>getClass</B> method.</LI></UL>

<p>Obviously there is not just one way of implementing <B>equals</B>. Each of the issues listed above is worth further exploration. In this article, we focus on the available possibilities to perform the necessary type check. Basically there are two approaches: using the <B>instanceof</B> operator or using the <B>getClass</B> method. Before we delve into the details, let us see why we would want to override <B>Object.equals</B> in the first place.</p>

<H3><FONT COLOR="#000080">Entity Types vs. Value Types</FONT></H3>

<p>When I define a new class, do I have to override <B>Object.equals</B>?</p>
<p>To answer this question, we need to understand what the default implementation provided by <B>Object.equals</B> does. It exhibits the same behavior as the <B>==</B> operator, namely a check for <I>identity</I> of two objects. Two objects are identical if they occupy the same memory location and are effectively the &#147;same&#148; object. Identity is different from <I>equality</I>. Two objects are equal when they behave in the same way, which often means that they have the same state or content. Equality is what the <B>equals</B> method is supposed to check for; identity is what <B>operator ==</B> (and <B>Object.equals</B>) checks for.</p>
<p>Whether or not a class must override the default behavior of <B>equals</B> (namely the check for identity provided by <B>Object.equals</B>) depends on the semantics of the class. There is a fundamental distinction between value types on the one hand and non-value types, sometimes called entity types, on the other hand:</p>

<UL><LI>   Value types are types that have content and whose behavior depends vitally on this content. Typical examples are classes like <B>BigDecimal</B>, <B>String</B>, <B>Date</B>, <B>Point</B>, etc. Two strings, for instance, behave differently when they have different content, and they behave in the same way and compare equal if they have the same content.</LI>
<LI>   Entity types are types whose behavior is not strictly determined by their content. Examples are <B>Thread</B>, <B>FileOutputStream</B>, or entity beans in EJB. There are a variety of entity types. Some entity types are service-based types, which means that their behavior, not their state, is the most important feature. Other entity types represent handles to an underlying object, like a stream: it is nothing but a handle to a file in the file system.</LI></UL>

<p>Entity types normally do not override <B>Object.equals</B>, because there is no point in comparing their content, since it is not overly relevant anyway. In contrast, value types do override <B>Object.equals</B>, because equality means &#147;equal content.&#148; For a value type, there is a significant difference between identity and equality. In other words, only classes that represent value types have a need to override <B>Object.equals</B>. For this reason, the subsequent discussion of implementing <B>equals</B> is only relevant for value types.</p>

<H3><FONT COLOR="#000080">The equals Contract</FONT></H3>

<p>Classes that override <B>Object.equals</B> must provide an implementation that compares for equality of objects. That&#146;s the intended and expected semantic meaning of method <B>equals</B>. In addition, there are a couple of other requirements that an implementation of <B>equals</B> must meet. These requirements stem from the fact that the Java platform libraries use <B>equals</B> in various places, most notably in the hash-based collections such as <B>HashSet</B> and <B>HashMap</B>. These collections have certain expectations regarding the behavior of <B>equals</B>; otherwise they do not work properly. This behavior expected of <B>equals</B> is defined in the so-called <B>equals</B> contract. It is described in the Java platform libraries&#146; documentation. Here is the contract as stated in the Java 2 Platform, Standard Edition, v1.3.1 API Specification <a href="#5">[5]</a>, to be looked up under <B>Object.equals</B>:</p>
<p>The <B>equals</B> method implements an equivalence relation:</p>

<UL><LI>   It is reflexive: for any reference value <B>x</B>, <B>x.equals(x)</B> should return true.</LI>
<LI>   It is symmetric: for any reference values <B>x</B> and <B>y</B>, <B>x.equals(y)</B> should return true if and only if <B>y.equals(x)</B> returns true.</LI>
<LI>   It is transitive: for any reference values <B>x</B>, <B>y</B>, and <B>z</B>, if <B>x.equals(y)</B> returns true and <B>y.equals(z)</B> returns true, then <B>x.equals(z)</B> should return true.</LI>
<LI>   It is consistent: for any reference values <B>x</B> and <B>y</B>, multiple invocations of <B>x.equals(y)</B> consistently return true or consistently return false, provided no information used in <B>equals</B> comparisons on the object is modified.</LI>
<LI>   For any non-null reference value <B>x</B>, <B>x.equals(null)</B> should return false.</LI></UL>

<p>In plain English, the <B>equals</B> contract requires the following properties:</p>

<UL><LI>   <I>Reflexivity.</I> An object must be equal to itself.</LI>
<LI>   <I>Symmetry.</I> It does not make a difference whether I compare <B>x</B> to <B>y</B> or <B>y</B> to <B>x</B>; the result is the same.</LI>
<LI>   <I>Transitivity.</I> If one object is equal to a second and the second is equal to a third, then the first and third object must be equal, too.</LI>
<LI>   <I>Consistency.</I> I can compare two objects as often as I want; the result remains the same unless the objects have been modified between subsequent comparisons.</LI>
<LI>   <I>Comparison to null.</I> No object is equal to <B>null</B>.</LI></UL>

<p>Consistency with the <B>equals</B> contract is a fundamental requirement to every implementation of <B>equals</B>. Not only do the hash-based collections rely on reflexivity, symmetry, and transitivity, but everybody who calls <B>equals</B> will expect exactly this behavior. Failure to comply to the <B>equals</B> contract leads to subtle bugs that are difficult to track down because they are conceptual problems. When the resulting bugs eventually show up (typically in the production and test phase of a project), the underlying conceptual problem will be extremely hard to identify; conceptual problems are not detected by debugging source code. The recommendation is: never provide a incorrect implementation of <B>equals</B>.</p>
<p>Let us now take a look at the sample implementations in <a href="list1.htm">Listings 1</a>-<a href="list4.htm">4</a>. Not all of them are correct.</p>

<H3><FONT COLOR="#000080"><a href="list1.htm">Listing 1</a>: An Incorrect Implementation</FONT></H3>

<p>Closer examination discloses that the implementation in <a href="list1.htm">Listing 1</a> is not transitive and for that reason incorrect. The example in <a href="list1.htm">Listing 1</a> shows a subclass <B>Point3</B> derived of a superclass <B>Point2</B> that provides three versions of <B>equals</B> with three different signatures. Let us see what happens when we use these classes. Consider the following situation (see <a href="fig1.htm">Figure 1</a>):</p>

<pre>
Point2 origin(0,0);
Point3 p1(0,0,-1);
point3 p2(0,0,1);

// calls Point3.equals(Point2)
System.out.println(p1.equals(origin));
// calls Point2.equals(Point2)
System.out.println(origin.equals(p2));
// calls Point3.equals(Point3)
System.out.println(p1.equals(p2));
</pre>

<p>We would expect that the program prints:</p>

<pre>
true
true
true
</pre>

<p>Instead the program prints:</p>

<pre>
true
true
false
</pre>

<p>Apparently the implementation of <B>equals</B> is not transitive. The lack of transitivity stems from the fact that the different <B>equals</B> methods in <B>Point2</B> and <B>Point3</B> perform semantically different comparisons. Let us see how this happens.</p>
<p>Let&#146;s start with the first comparison <B>p1.equals(origin)</B>. Method <B>Point3.equals(Point2)</B> is called. Here is the implementation:</p>

<pre>
public class Point3 extends Point2 {
  ...
  // overriding definition
  public boolean equals(Point2 p) {
    if (p instanceof Point3)
      return equals((Point3)p);
    return super.equals();
  }
  ...
}
</pre>

<p>Method <B>Point3.equals(Point2)</B> checks whether the other object (namely <B>origin</B>) is a subobject of this object (namely <B>p1</B>), which is false. It is the other way round: <B>p1</B> is a subobject of <B>origin</B>. The <B>instanceof</B> test yields false, and, in this case, <B>super.equals</B> is called, which is <B>Point2.equals(Point2)</B>. Method <B>Point2.equals(Point2)</B> is not shown in <a href="list1.htm">Listing 1</a>, but we can safely assume that its implementation follows the same line of logic that is used for the implementation of the <B>equals</B> methods in class <B>Point3</B>. Method <B>Point2.equals(Point2)</B> compares objects of type <B>Point2</B>; in this case, it compares the superclass object <B>origin</B> to the superclass part of the subclass object <B>p1</B>. The result is true. The same happens when <B>origin</B> is compared to <B>p2</B>.</p>
<p>Both comparisons are mixed-type comparisons involving a superclass and a subclass object. The functionality of mixed-type comparison in this sample implementation is a comparison of the part that both objects have in common, namely the superclass. We will refer to this kind of comparison as slice comparison.</p>
<p>Eventually method <B>Point3.equals(Point3)</B> is called to compare <B>p1</B> and <B>p2</B>. Following the rule of transitivity their comparison by means of <B>equals</B> must yield true. Quite obviously <B>p1</B> and <B>p2</B> are not equal and indeed <B>p1.equals(p2)</B> yields false. So, what&#146;s going on here? The transitivity is violated because <B>Point3.equals(Point3)</B> performs a semantically different comparison. It does not compare superclass slices, in which case <B>p1</B> and <B>p2</B> would compare equal, because they both contain (0,0). Instead it compares the entire subclass objects including their subclass-specific parts, and <B>p1</B> and <B>p2</B> happen to have a different <B>z</B> coordinate. For this reason, the result is false.</p>
<p><B>equals</B> methods that perform semantically different comparisons in a class hierarchy and allow mixed-type comparison can never by transitive. The problem is not an implementation problem; it is a conceptual problem. Method <B>equals</B> is required to be transitive because of the <B>equals</B> contract. At the same time, it is required to perform a comparison for equality of objects; that&#146;s the natural and intended semantics of <B>equals</B>. Objects of different types in a class hierarchy of value types can have a different structure: typically subclass objects have more fields than superclass objects. In this case, the subclass must provide an overriding version of the <B>equals</B> method that takes the subclass-specific fields into account <a href="#6">[6]</a>. Inevitably, the subclass version of <B>equals</B> performs a comparison that is semantically different from its superclass version. If <B>equals</B> permits mixed-type comparison in such a situation, then it can never be transitive. Either the <B>equals</B> method is non-transitive (and incorrect, as in <a href="list1.htm">Listing 1</a>), it does not allow slice comparison of superclass and subclass objects (as will be demonstrated in <a href="list4.htm">Listing 4</a>), or the <B>equals</B> method is final in the superclass and not overridden in any of the subclasses (similar to <a href="list3.htm">Listing 3</a>).</p>

<H3><FONT COLOR="#000080"><a href="list2.htm">Listing 2</a>: A Common, Yet Debatable Implementation</FONT></H3>

<p>The example in <a href="list2.htm">Listing 2</a> is taken from the Java platform libraries. It is the example of a non-final class that represents a value type, namely class <B>Date</B>. There is no problem with class <B>Date</B> itself or its implementation of the <B>equals</B> method. Note, however, that neither class <B>Date</B> not its <B>equals</B> method are final. Someone can derive a subclass of <B>Date</B> and override <B>equals</B>. This subclass in conjunction with superclass <B>Date</B> will ask for trouble. Here is a conceivable implementation of a subclass and its <B>equals</B> method:</p>

<pre>
public class NamedDate extends Date {
  private String name;
  public boolean equals(Object other) {
    if (other instanceof NamedDate &amp;&amp; !name.equals
      (((NamedDate)other).name)) return false;
    return super.equals(other));
  }
}
</pre>

<p>Other implementations of class <B>NamedDate</B> are conceivable, but this would be a typical one <a href="#7">[7]</a>. It follows the logic demonstrated by its superclass <B>Date</B>. To remind you, here is the implementation of the superclass version of <B>equals</B>:</p>

<pre>
public class Date {
  ...
  public boolean equals(Object obj) {
    return obj instanceof Date &amp;&amp; 
  getTime() ==
      ((Date) obj).getTime();
  }
}
</pre>

<p>Both versions of <B>equals</B> perform the necessary type check via the <B>instanceof</B> operator, which means that they both permit mixed-type comparison. Consider the following situation (see <a href="fig2.htm">Figure 2</a>):</p>

<pre>
NamedDate EndOfMillenium =
  new NamedDate(99,11,31,
    "end of 2nd millenium AC");
NamedDate TheEnd         =
  new NamedDate(99,11,31,
    "end of the world");
Date      NewYearsEve    =
  new Date(99,11,31);

// slice comparison: true
EndOfMillenium.equals(NewYearsEve)
// slice comparison: true
NewYearsEve.equals(TheEnd)
// whole-object comparison: false
EndOfMillenium.equals(TheEnd)
</pre>

<p>Again we run into the same transitivity problem as in <a href="list1.htm">Listing 1</a>. <B>Date.equals</B> allows for slice comparison. Every overriding version of <B>equals</B> in a subclass performs a semantically different comparison, namely a whole-object comparison that includes the subclass-specific name field, and inevitably it exhibits the incorrect non-transitive behavior. The class <B>Date</B> author could have avoided this pitfall by declaring at least the <B>equals</B> method final, if not the entire class.</p>

<H3><FONT COLOR="#000080"><a href="list3.htm">Listing 3</a>: A Correct Implementation</FONT></H3>

<p><a href="list3.htm">Listing 3</a> shows a final class <B>PhoneNumber</B>. Its implementation of <B>equals</B> is similar to the solution in <a href="list2.htm">Listing 2</a> in that it uses the <B>instanceof</B> test. Since the class is final, no subclasses can ever exist and the transitivity problem discussed above can never come up. This solution is flawless, but restricted to final classes.</p>

<H3><FONT COLOR="#000080"><a href="list4.htm">Listing 4</a>: Another Correct Implementation</FONT></H3>

<p><a href="list4.htm">Listing 4</a> shows yet another approach. Here we have a superclass <B>Golfball</B> and its subclass <B>MyGolfball</B>, which overrides <B>equals</B> because it has a subclass-specific field. The superclass performs the check for type match not using the <B>instanceof</B> operator as in the previous examples, but using the <B>getClass</B> method instead.</p>
<p>Here are the implementations of the two <B>equals</B> methods:</p>

<pre>
class Golfball {
   ...
   public boolean equals(object obj) {
     if (this == obj)
        return true;
     if (obj!=null &amp;&amp; getClass() == 
       obj.getClass())
     {
        // Classes are equal, downcast.
        Golfball gb = (Golfball)obj;
        // Compare atrributes.
        if (brand.equals(gb.brand())  &amp;&amp;  
            make.equals(gb.make()) &amp;&amp;
            compression == 
              gb.compression())
          return true;
     }
     return false;
   }
}
class MyGolfball extends Golfball {
  ...
  public boolean equals(Object obj) {
    if (super.equals(obj))
    {
      // Classes equal, downcast.
      MyGolfball bg = (MyGolfball)obj;
      if (ballConstruction == 
        gb.construction())
        return true;
    }
    return false;
  }
}
</pre>

<p>The fundamental difference in this class hierarchy is that slice comparison is not permitted. Or, to be more precise, the mixed-type comparison is allowed, but an object of type <B>Golfball</B> never compares equal to an object of type <B>MyGolfball</B>. They are of different types and therefore their <B>Class</B> objects (obtained via <B>getClass</B>) are different. The type check via <B>getClass</B> yields false for all attempts of mixed-type comparison. For example (see <a href="fig3.htm">Figure 3</a>):</p>

<pre>
Golfball original =
  new Golfball("xyz", "abc",100);
MyGolfball gb1 =
  new MyGolfball("xyz", "abc", 100, 
    MyGolfball.TwoPiece);
MyGolfball gb2 =
  new MyGolfball("xyz", "abc", 100, 
    MyGolfball.ThreePiece);

gb1.equals(original) // mixed-type 
                     // comparison:
                     // yields false
original.equals(gb2) // mixed-type 
                     // comparison:
                     // yields false
gb1.equals(gb2)      // same-type 
                     // comparison:
                     // yields false
</pre>

<p>This kind of implementation is correct and fully complies to the <B>equals</B> contract. In class hierarchies of value types, where the <B>equals</B> method must be overridden, it is the only correct approach.</p>

<H3><FONT COLOR="#000080">Revisiting <a href="list2.htm">Listing 2</a></FONT></H3>

<p>Can we use this approach (using <B>getClass</B> instead of <B>instanceof</B>) to solve the problem with the subclass of class <B>Date</B>?</p>
<p>Unfortunately not. The superclass <B>Date</B> permits mixed-type comparison. For sake of symmetry, any subclass must also allow mixed-type comparison. Here is what an incorrect, asymmetric implementation of <B>NamedDate.equals</B> using <B>getClass</B> could look like:</p>

<pre>
public class Date {  // as before
  ...
  public boolean equals(Object obj) {
    return obj instanceof Date &amp;&amp; getTime() ==
      ((Date) obj).getTime();
  }
}
public class NamedDate extends Date {
  private String name;
  public boolean equals(Object other) {
    // getClass() instead of instanceof
    if (other!=null &amp;&amp; getClass() == other.getClass()) {
      if (!super.equals(other))  return false;
      return name.equals(((NamedDate)other).name));
    }
  }
  }

NamedDate EndOfMillenium =
  new NamedDate(99,11,31,"end of 2nd millenium AC");
Date      NewYearsEve    =
  new Date(99,11,31);

// slice comparison: false
EndOfMillenium.equals(NewYearsEve)
// slice comparison: true
NewYearsEve.equals(EndOfMillenium)
</pre>

<p>In general, any subclass of a superclass that uses the <B>instanceof</B> test in its <B>equals</B> implementation cannot switch to the <B>getClass</B> test without violating the symmetry requirement. The same is true for subclasses of superclasses that use the <B>getClass</B> test: the subclass cannot allow mixed-type comparison via <B>instanceof</B> if the superclass disallows it via <B>getClass</B>; otherwise the symmetry requirement would be violated. The fundamental realization is that the strategy chosen for a superclass&#146;s <B>equals</B> method determines the implementation of <B>equals</B> for the entire class hierarchy. All classes in the hierarchy either allow slice comparison and use <B>instanceof</B>, or they disallow it and use <B>getClass</B>.</p>

<H3><FONT COLOR="#000080">Conclusions</FONT></H3>

<p>Having dissected the four arbitrarily chosen examples of <B>equals</B> implementations, what do we conclude?</p>
<p>First of all, there are two substantially different ways of performing the check for type match in an <B>equals</B> implementation. A class can allow mixed-type comparison between superclass and subclass objects by means of the <B>instanceof</B> operator, or a class can treat objects of different types as non-equal by means of the <B>getClass</B> test. The examples above illustrated nicely that implementations of <B>equals</B> using <B>getClass</B> are generally more robust than those implementations using <B>instanceof</B>.</p>
<p>The <B>instanceof</B> test is correct only for final classes or if at least method <B>equals</B> is final in a superclass. The latter essentially implies that no subclass must extend the superclass&#146;s state, but can only add functionality or fields that are irrelevant for the object&#146;s state and behavior, such as transient or static fields.</p>
<p>Implementations using the <B>getClass</B> test, on the other hand, always comply to the <B>equals</B> contract; they are correct and robust. They are, however, semantically very different from implementations that use the <B>instanceof</B> test. Implementations using <B>getClass</B> do not allow comparison of subclass with superclass objects, not even when the subclass does not add any fields and would not even want to override <B>equals</B>. Such a &#147;trivial&#148; class extension for instance would be the addition of a debug-print method in a subclass defined for exactly this &#147;trivial&#148; purpose. If the superclass prohibits mixed-type comparison via the <B>getClass</B> check, then the trivial extension would not be comparable to its superclass. Whether or not this is a problem fully depends on the semantics of the class and the purpose of the extension.</p>

<H3><FONT COLOR="#000080">Guidelines for Practitioners</FONT></H3>

<p>Ultimately, what do we do when we design a class and/or use an existing class as a superclass?</p>
<p>Considering the different approaches and their respective ups and downs, it should by now be clear that none of the solutions is the silver bullet. There is no easy recipe for doing this. A designer of a new class must carefully evaluate the intended and required semantics of the class in order to come to a decision regarding the right implementation of <B>equals</B> (and other pieces of basic infrastructure not discussed in this article). Here are some guidelines:</p>

<UL><LI>   <I>Entity types.</I> If the class represents a non-value type, then no implementation of <B>equals</B> is needed for this class because the inherited <B>Object.equals</B> does the right thing. Hence there is nothing to do and nothing to worry about regarding comparison for equality.</LI>
<LI>   <I>Final classes.</I> If the class represents a value type and is final, then it must override <B>equals</B> to provide equality comparison, but it basically does not matter how the type check in <B>equals</B> is performed. All the problems discussed above only pop up in class hierarchies of value types. If the class is final, then there will never be any subclasses, and, consequently, there will be no problem. In general, it is much easier to get a final class right than to design a robust superclass. It is unfortunate that in Java every class is a superclass by default <a href="#8">[8]</a>.</LI>
<LI>   <I>Value type superclasses.</I> The problematic cases are non-final classes that represent value types. They must implement <B>equals</B> to reflect the value semantics, and they are superclasses, because every non-final class by definition is a potential superclass.</LI></UL>

<p>If the designer of such a non-final class decides in favor of implementing <B>equals</B> using <B>instanceof</B>, then no subclass can ever add fields and override <B>equals</B> without violating the transitivity requirement of the <B>equals</B> contract.</p>
<p>If the designer decides in favor of implementing <B>equals</B> using <B>getClass</B>, then no subclass object will ever be comparable to a superclass object and trivial extensions may not make a lot of sense.</p>
<p>Users of superclasses who wish to extend them should carefully study the superclass&#146;s implementation of <B>equals</B> because it has an impact on the subclass and how it must be implemented and used.</p>

<UL><LI>   <I>Mixed-type comparison permitted.</I> If the implementation uses the <B>instanceof</B> test and thus permits slice comparison of subclass and superclass objects, then <B>equals</B> must not be overridden in the subclass. The superclass designer should actually make sure that you can&#146;t step into this pitfall by qualifying the <B>equals</B> method as a final method in the superclass <a href="#9">[9]</a>.</LI>
<LI>   <I>Same-type comparison only.</I> If the superclass&#146;s implementation of <B>equals</B> uses the <B>getClass</B> test, then subclass and superclass objects will never compare equal. This means, for instance, that you cannot ask a <B>HashSet</B> of subclass objects whether it contains an equal superclass object; the answer would always be no.</LI></UL>

<H3><FONT COLOR="#000080">Delegation as an Alternative to Inheritance</FONT></H3>

<p>Instead of worrying about how to correctly design a superclass or how to implement a subclass of a superclass, why don&#146;t we simply avoid inheritance in the first place?</p>
<p>One way of making life easy is to habitually declare every new class a final class, unless you are sure that it is supposed to be a superclass. In case of defining a superclass, the effort of providing a robust and correct implementation can be substantially higher. More often than not you&#146;ll find that you do not really want or need to go to all the trouble of defining a superclass. Keep it simple; try out a final class before you consider implementing a non-final class.</p>
<p>Another way is to avoid subclassing. In many situations, inheritance can be replaced by delegation. Instead of implementing a new class as a subclass of an existing class, the new class can be implemented as an unrelated class that holds a reference to an object of the existing class type and implements the same methods as the existing class by delegation to the existing class&#146;s method.</p>
<p>As an example, let&#146;s re-implement class <B>NamedDate</B>:</p>

<pre>
// does not extend Date
public class NamedDate {  
  private String name;
  // Date as a field instead of a superclass
  private Date   date;    
  ...
  public boolean equals(Object other) {
    if (other!=null &amp;&amp; getClass()==other.getClass()) {
      if(date.equals
        (((NamedDate)other).date) &amp;&amp; 
          name.equals(((NamedDate)other).name))
        return true;
    }
    return false;
  }
  ...
  public boolean before(Date when) {
    return date.before(when);
  }
  public boolean after(Date when) {
    return date.after(when);
  }
  ...
}
</pre>

<p>This implementation technique often requires some tedious typing, because the entire public interface of the existing class must be repeated (see methods <B>before</B> and <B>after</B> in the example), but it is a sensible and robust alternative to inheritance.</p>
<p>Note its similarity to the <B>getClass</B> approach to <B>equals</B>: in this case <B>NamedDate</B> would not be considered as compatible with <B>Date</B>, and nobody would expect that objects of type <B>Date</B> and type <B>NamedDate</B> would be comparable for equality. If such a comparison were needed, it would be provided in terms of methods such as <B>NamedDate.isSameDateAs(Date)</B> or <B>Date.isSameDateAs(NamedDate)</B>, both of which would be final methods that perform a slice comparison. But they would have nothing to do with <B>equals</B>.</p>
<p>As useful as delegation is as an alternative to subclassing, there are situations in which delegation cannot replace inheritance. An example is cases in which protected parts of the superclass must be accessed by the subclass. An example is implementations of the Template Method pattern as described in the GOF book <a href="#10">[10]</a>. In these cases, inheritance cannot be avoided and the user must live with the resulting restrictions. Another example is frameworks in which subclassing cannot be avoided because the superclass serves as a marker interface at the same time. An example is the class hierarchy of standard exceptions, most notably classes <B>Throwable</B>, <B>Error</B>, <B>Exception</B>, and <B>RuntimeException</B>. If you need to define a user-defined domain-specific exception type, then you must derive from one of these classes or any subclass thereof. Delegation is not an option here; a class that contained an <B>IndexOutOfBoundsException</B>, instead of being derived from it, would not be an exception type. The moral of the story is: avoid subclassing if you can and try to live with it if you can&#146;t.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>In this article, we looked at implementations of <B>equals</B>, studying various published implementations for illustration of the non-trivial nature of a method that compares objects for equality of content.</p>
<p>One case turned out to be problematic; it is the case of hierarchies of value types in which <B>equals</B> is overridden on various levels of the hierarchy with naturally different semantics. In this case, any mixed-type comparison between subclass and superclass objects fails to be transitive. But transitivity is one of the fundamental pieces of the <B>equals</B> contract.</p>
<p>The implementation detail of relevance in this article is the check for type match that is performed in an implementation of <B>equals</B>. There are two techniques: using the <B>instanceof</B> operator, which allows mixed-type comparison of subclass and superclass objects, and using <B>getClass</B> to make sure that mixed-type comparisons always fail.</p>
<p><B>equals</B> implementations using <B>getClass</B> are more robust, because they are always correct. <B>equals</B> implementations using <B>instanceof</B> should be final methods; in practice they rarely are declared final, which opens up a notorious pitfall.</p>
<p>This was a snippet of what must be said about <B>equals</B> and other basic infrastructure of types in Java. We haven&#146;t even touched on related issues such as:</p>

<UL><LI>   What is the impact on implementations of <B>hashCode</B>? &#147;Equal&#148; objects must produce equal hash codes; how do we achieve this?</LI>
<LI>   How does the technique chosen for <B>equals</B> affect implementations of <B>compareTo</B>? It is recommended that a comparison via <B>compareTo</B> is consistent with equality via <B>equals</B>. How do we achieve this?</LI>
<LI>   We haven&#146;t discussed the signature of <B>equals</B> in subclasses. Should there be just one overriding version with the signature of <B>Object.equals</B>? Or should there be overloaded versions, as suggested in <a href="list1.htm">Listing 1</a>? What are the tradeoffs?</LI></UL>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>The ideas in this article were in part inspired by a private email discussion with Joshua Bloch in the summer 2001; we thank Josh for his patience and thoughtful response. Another source of invaluable insight was Mark Weiss, a fellow instructor at DevelopMentor; he sat through our Java course in February 2001 and spotted the non-transitivity of our first naive attempts to get <B>equals</B> right.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Barbara Liskov with John Guttag. <I>Program Development in Java: Abstraction, Specification, and Object-Oriented Design</I> (Addison-Wesley, 2000).</p>
<p><a name="2"></a>[2]  Josh Bloch. <I>Effective Java Programming Language Guide</I> (Addison-Wesley, 2001).</p>
<p><a name="3"></a>[3]  Peter Haggar. <I>Practical Java: Programming Language Guide</I> (Addison-Wesley, 2000).</p>
<p><a name="4"></a>[4]  Java 2 Platform, Standard Edition v1.3.1, &lt;http://java.sun.com/j2se/1.3/&gt;.</p>
<p><a name="5"></a>[5]  Java 2 Platform, Standard Edition, v 1.3.1, API Specification, &lt;http://java.sun.com/j2se/1.3/docs/api/index.html&gt;.</p>
<p><a name="6"></a>[6]  The assumption here is that the additional field contributes to the state of the object. If an irrelevant field is added, then there is no need to override <B>equals</B> in the subclass.</p>
<p><a name="7"></a>[7]  Another common mistake is the violation of the symmetry requirement. For example:</p>
<pre>
public class NamedDate extends Date {
  private String name;
  public boolean equals(Object other) {
    if ( !(other instanceof NamedDate) )
      return false;
    else if ( !name.equals(((NamedDate)other).name) )
      return false;
    else if ( !super.equals(other) )
      return false;
    else
      return true;
  }
}
</pre>

<p>If a <B>Date</B> is compared to a <B>NamedDate</B> via <B>Date.equals</B>, then the <B>NamedDate</B> object will pass the <B>instanceof</B> test and the comparison will be performed; the result can be false or true. If we swap the two objects and compare the same <B>NamedDate</B> to the same <B>Date</B> via <B>NamedDate.equals</B>, then the <B>Date</B> object will not pass the <B>instanceof</B> test; these two objects will never compare equal. This behavior violates the symmetry requirement of the <B>equals</B> contract. Unfortunately this kind of implementation was fairly common in Java platform library classes before version 1.3.</p>
<p><a name="8"></a>[8]  It is beyond the scope of this article to go into any details here, but superclass design is hard, much harder than designing a final class. For instance, every use of a non-final method requires that the contract, under which this method is used, is properly defined and documented. A superclass designer cannot assume that the method called does what is expected, if he doesn&#146;t tell anybody what to expect. When the final method is invoked at run time, it might not be the class designer&#146;s method, but an overriding subclass version of it. How does the designer make sure that he knows what this &#147;alien&#148; method does? This is accomplished only by publishing the contract for this method and hoping for the best, namely that subclass implementers will comply with the published contract. The reality is that in practice there are oodles of non-final classes that should actually be final because they have never been properly designed and documented as superclasses.</p>
<p><a name="9"></a>[9]  Sadly, in practice, you find countless examples of non-final classes with non-final <B>equals</B> methods that use the <B>instanceof</B> test, especially in the Java platform libraries. And you will find an equally large number of examples of programmers who step right into the pitfall and provide incorrect subclass implementation, both in real-world Java code as well as in Java publications. Just think of <a href="list2.htm">Listing 2</a>. We did not look for a particularly bad book to find an example of an incorrect implementation of <B>equals</B>. The opposite is true. <I>Program Development in Java</I> is an otherwise recommendable book. The fact that is suggests a flawed implementation of <B>equals</B> simply illustrates how easy it is to step into the pitfall of overwriting an implementation of <B>equals</B> that uses the <B>instanceof</B> test without being aware of the resulting problems.</p>
<p><a name="10"></a>[10]  Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995).</p>

<p><i><B>Angelika Langer</B> works as an independent freelance trainer/consultant. Her main area of interest and expertise is object-oriented software development in C++ and Java. She can be reached at <B>langer@camelot.de</B>.</i></p>
<p><i><B>Klaus Kreft</B> is a senior consultant at Siemens Nixdorf in Germany. He can be reached at <B>klaus.kreft@mch.sni.de</B>.</i></p>

<h4><a href="../../../source/2002/japr02/langer.zip"></a></h4>
</blockquote></body></html>
