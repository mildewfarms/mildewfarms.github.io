<HTML>   
     <HEAD>
<TITLE>February 2002 C++ Experts Forum/Generic&lt;Programming&gt</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.02/tocfeb.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Generic&lt;Programming&gt;: Typelists and Applications</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrei Alexandrescu</FONT></H3>

<HR>
<BLOCKQUOTE>
<P>It's not exactly known how it started.</P>
<P>I only can tell my side of the story: I first saw some weird recursive templates in a post on the Usenet newsgroup <B>comp.lang.c++.moderated</B> (highly recommended, by the way). Later, while in desperate need to automate an Abstract Factory implementation, a certain structure started to occupy my mind.</P>
<P>Other people have independently gone through a similar process, because typelists are all over the place, in various flavors. Czarnecki and Eisenecker introduce in <a href="#1">[1]</a> a typelist that actually holds constant integral values. The MPL library <a href="#2">[2]</a> defines typelists as well, together with a host of algorithms that operate on them. <I>Modern C++ Design</I> also describes a simple typelist implementation and applies it in no less than five generic components (<B>Functor</B>, <B>Visitor</B>, <B>AbstractFactory</B>, <B>StaticDispatcher</B>, and <B>Tuple</B>), not to mention two automatic hierarchy generators (<B>GenScatterHierarchy</B> and <B>GenLinearHierarchy</B>). </P>
<P>By now the usefulness and applicability of typelists is proven, and knowing about them would certainly improve your arsenal of techniques and your understanding of existing and future C++ libraries. At least that smart intern won't catch you in off guard during a water cooler chat. (Provided that your employer would hire interns these days &#151; but well, that's another story.)</P>
<P>This article reintroduces typelists, together with an interesting application for solving a real-world problem. If you can't tell a typelist from a Christmas wish list, you're in the right place. If you absorb like a sponge everything that's going on in C++, you might still find some interesting stuff, so, read on.</P>

<H3><FONT color=#000080>So What Is a Typelist?</FONT></H3>

<P>It's got to be one of those weird template beasts, right? Actually, typelists are so simple, and so devoid of any value (in the most literal sense), that it's actually quite amazing the C++ community didn't put them to work earlier.</P>

<PRE>
template &lt;class H, class T&gt;
struct typelist
{
    typedef H head;
    typedef T tail;
};
</PRE>

<P>That's really all there is to it! Nothing up my sleeves, really. Nevertheless, with this simple cell you can build typelists of any length, using the tail composition pioneered by LISP a long time ago:</P>

<PRE>
typedef typelist&lt;float, typelist&lt;double, long double&gt; &gt;
    floating_point_types;
</PRE>

<P>You can do this because a <B>typelist</B> is a type, and as such it can participate as one of the types in a larger typelist. By convention, a typelist can appear in another typelist only in the tail position, not in the head; this makes typelist processing simpler, without reducing flexibility.</P>
<P>We're almost there; we only need to define an ancillary type that marks the end of a typelist (analogous to LISP's <B>nil</B>). Let's call it <B>null_typelist</B>:</P>

<PRE>
class null_typelist {};
</PRE>

<P>So the correct version of the typelist that holds all floating points is:</P>

<PRE> 
typedef typelist&lt;float, typelist&lt;double,
    typelist&lt;long double, null_typelist&gt; &gt; &gt;
    floating_point_types;
</PRE>

<H3><FONT color=#000080>Linearizing Typelist Creation: Three Schools</FONT></H3>

<P>It doesn't take a vulture's eye to see that creating typelists becomes extremely awkward beyond only a few elements. All those nested template instantiations and the closing <B>&gt;</B>s that need to have a space between them, to avoid confusion with the <B>&gt;&gt;</B> operator &#151; ah, the joys of C++ parsing &#151; are quite unwieldy.</P>
<P>There are several schools of thought in tackling this problem. Loki <a href="#3">[3]</a> relies on macros, which are defined as follows:</P>

<PRE>
#define TYPELIST_1(T1) typelist&lt;T1, null_typelist&gt;
#define TYPELIST_2(T1, T2) typelist&lt;T1, TYPELIST_1(T2) &gt;
#define TYPELIST_3(T1, T2, T3) typelist&lt;T1, TYPELIST_2(T2, T3) &gt;
...
#define TYPELIST_50...
</PRE>

<P>As you see, each macro relies on the previous one. Loki defines such "constructors" for typelists with up to 50 elements. Beyond that limit, you can either define new macros or concatenate typelists programatically.</P>
<P>I should have known better than to use macros. Text transformation is very powerful, but C++'s macro preprocessor is so primitive, that, almost invariably, when you thought you did something actually interesting with it, it comes from behind to bite you.</P>
<P>In this case, the problem is that you cannot use the macros with simple templates, for example:</P>

<PRE>
typedef TYPELIST_2(vector&lt;int, allocator&gt;,
    vector&lt;int, my_allocator&gt;)
    storage_choices;
</PRE>

<P>The preprocessor can handle parentheses, but not the angle brackets <B>&lt;</B> and <B>&gt;</B>. So, the text inside <B>TYPELIST_2</B> looks like <I>four</I> parameters to the preprocessor &#151; namely (1) <B>vector&lt;int</B>, (2) <B>allocator&gt;</B>, (3) <B>vector&lt;int</B>, and (4) <B>my_allocator&gt;</B> &#151; not two as intended. Worse, some preprocessors won't even issue an error &#151; they will just silently ignore arguments (3) and (4) and generate a nonsensical expansion that's bound to cause you a headache.</P>
<P>A better solution is to use templates for generating typelists. The idea is as follows:</P>

<PRE>
template &lt;class T1&gt;
struct cons&lt;T1, null_typelist, null_typelist,
    null_typelist&gt;
{
    typedef typelist&lt;T1, null_typelist&gt; type;
};

template &lt;class T1, class T2&gt;
struct cons&lt;T1, T2, null_typelist, null_typelist&gt;
{
    typedef typelist&lt;T1, typelist&lt;T2,
        null_typelist&gt; &gt; type;
};

template &lt;class T1, class T2, class T3&gt;
struct cons&lt;T1, T2, T3, null_typelist&gt;
{
    typedef typelist&lt;T1, typelist&lt;T2, typelist&lt;T3,
        null_typelist&gt; &gt; &gt; type;
};

template &lt;class T1, class T2, class T3, class T4&gt;
struct cons
{
    typedef typelist&lt;T1, typelist&lt;T2, typelist&lt;T3, 
        typelist&lt;T4, null_typelist&gt; &gt; &gt; &gt; type;
};
</PRE>

<P>The example above works for up to four types. You use <B>cons</B> like this:</P>

<PRE>
typedef cons&lt;float, double, long double&gt;::type
    floating_point_types;
</PRE>

<P>The <B>cons</B> template relies on partial specialization. When you instantiate <B>cons&lt;float, double, long double&gt;</B>, first the compiler fills in the fourth argument of <B>cons</B> with the default, so it's really about <B>cons&lt; float, double, long double, null_typelist&gt;</B>. Then, the compiler matches this instantiation against the four defined specializations. </P>
<P>The first specialization is not a match because it requires <B>T2</B> to be <B>null_typelist</B>, while the concrete <B>T2</B> is <B>double</B>. Similarly, the second specialization fails due to lack of agreement on <B>T3</B>. The third specialization is a valid candidate because it accepts arbitrary types for <B>T1</B>, <B>T2</B>, <B>T3</B>. All bets are not off yet; the compiler also checks the fourth specialization, which matches as well! It accepts arbitrary types for <B>T1</B>, <B>T2</B>, <B>T3</B>, and <B>T4</B>, so it doesn't have any trouble if <B>T4</B> is <B>null_typelist</B>. But before you can say "compile-time error," a discriminator kicks in: the third instantiation is selected because it is <I>more specialized</I> than the fourth.</P>
<P>The algorithm for deciding "more specialized"-ness is quite complex, but at an intuitive level, a partial specialization of a template is <I>more specialized</I> than another if it is less general (has fewer degrees of freedom). When matching a concrete argument list against several partially specialized versions of a template, the winner is the most specialized version that can still accommodate the arguments. In our example, the third partial specialization of <B>cons</B> wins because it does match the instantiation <B>cons&lt;float, double, long double, null_typelist&gt;</B> and is more specialized than the fourth specialization. That is because the fourth specialization accepts any type for <B>T4</B>, while the third accepts only <B>null_typelist</B> for <B>T4</B>, thus being more specific.</P>
<P>You can extend <B>cons</B> to work with any number of types, but alas, you cannot extend that upper bound unless you do surgery on <B>cons</B>, or, again, if you rely on some preprocessor tricks.</P>
<P>The third approach uses function signatures. Consider the following:</P>

<PRE>
template &lt;class Fun&gt; struct cons;

template &lt;class T1&gt; struct cons&lt;void (*)(T1)&gt;
{
    typedef typelist&lt;T1, null_typelist&gt; type;
};

template &lt;class T1, class T2&gt;
struct cons&lt;void (*)(T1, T2)&gt;
{
    typedef typelist&lt;T1, typelist&lt;T2,
        null_typelist&gt; &gt; type;
};

template &lt;class T1, class T2, class T3&gt;
struct cons&lt; void (*)(T1, T2, T3)&gt;
{
    typedef typelist&lt;T1, typelist&lt;T2, 
        typelist&lt;T3, null_typelist&gt; &gt; &gt; type;
};

template &lt;class T1, class T2, class T3, class T4&gt;
struct cons&lt;void (*)(T1, T2, T3, T4)&gt;
{
    typedef typelist&lt;T1, typelist&lt;T2, typelist&lt;T3,
        typelist&lt;T4, null_typelist&gt; &gt; &gt; &gt; type;
};
</PRE>

<P>Now if you define a macro like this:</P>

<PRE>
#define TYPELIST(a) cons&lt; void (*)a &gt;::type
</PRE>

<P>then you can write this:</P>

<PRE>typedef TYPELIST((float, double, long double))
    floating_point_types;
</PRE>

<P>Not bad at all ... if you manage to convince people of the beauty of the two sets of parentheses. </P>
<P>Ok, I know I owe some explanations, so here they are. First thing, the <B>void (*)(T1)</B> is a C++ type (no typo, no emoticon in there!): a pointer to function that takes one argument of type <B>T1</B> and returns <B>void</B>. The type is more familiar in the form <B>void (*Fun)(T1)</B>, a construct that actually contains a name in it.</P>
<P>The <B>cons</B> class template is specialized on pointers to functions returning <B>void</B> and taking one, two, three, and four arguments of any type. Then, the macro <B>TYPELIST</B> expands the construct: </P>

<PRE>
TYPELIST((float, double, long double))
</PRE>

<P>into:</P>

<PRE>
cons&lt; void (*) (float, double, long double) &gt;::type
</PRE>

<P>which in turn is exactly:</P>

<PRE>typelist&lt;float, typelist&lt;double,
    typelist&lt;long double, null_typelist&gt; &gt; &gt;
</PRE>

<P>As a mini-conclusion to this section, no solution above is perfect; until some language support for variable template arguments is there, you will have to pay a mixed toll in cleanliness, convenience, extensibility, and ease of use.</P>
<P>For the remainder of the article, let's use the second solution &#151; the one with <B>cons&lt;...&gt;::type</B>. </P>
<P>It is time now to put typelists to work. A previous article <a href="#4">[4]</a> shows, for example, how to compute the length of a typelist. In the following, we'll see a new application of typelists in real-world problems.</P>

<H3><FONT color=#000080>Ad-Hoc Visitation</FONT></H3>

<P>The Visitor design pattern offers you a clean solution to hairy problems, but it has drawbacks that limit its applicability. In essence, Visitor offers you a method for safely adding operations to a class hierarchy without touching the hierarchy itself, at the cost of having to modify all those operations when the hierarchy changes. For the full story, refer to the legendary <I>Design Patterns</I> book <a href="#5">[5]</a> or to the C++-centered description in <I>Modern C++ Design</I> <a href="#3">[3]</a>.</P>
<P>One less mentioned problem with visitation is that you must implement support for the Visitor pattern in the hierarchy, in the form of an <B>Accept</B> member function; in other words, if you don't have write access to a hierarchy that hasn't been designed to support Visitor, you cannot, well, visit it.</P>
<P>If support for visitation is missing, and if you want to add a new operation to a class hierarchy without touching it, you are doomed to rely on the dreaded switch-on-type approach. The common real-world case is when you use some base classes from an ancient class library (deployed by You-Know-Who) and add your own derived classes. </P>
<P>Consider, for example, a hierarchy rooted in <B>DocumentItem</B> featuring the concrete types <B>TextArea</B>, <B>VectorGraphics</B>, and <B>Bitmap</B>, all directly derived from <B>DocumentItem</B>. To add <B>SomeOperation</B>, you can do the following:</P>

<PRE>
void SomeOperation(DocumentItem* p)
{
    if (TextArea* pTextArea = dynamic_cast&lt;TextArea*&gt;(p))
    {
        ... operate on a TextArea object ...
    }
    else if (VectorGraphics* pVectorGraphics =
        dynamic_cast&lt;VectorGraphics*&gt;(p))
    {
        ... operate on a VectorGraphics object ...
    }
    else if (Bitmap* pBitmap = dynamic_cast&lt;Bitmap*&gt;(p))
    {
        ... operate on a Bitmap object ...
    }
    else
    {
        throw "Unknown type passed";
    }
}
</PRE>

<P>In addition to being thoroughly ugly, the code above has the conceptual problem of being unable to catch at compile time the "forgot to handle this type" error. If our hypothetical hierarchy gets extended with a new type <B>PieChart</B>, or if the implementer of <B>SomeOperation</B> above forgets to treat an already existing type, the only solution is to resort to throwing an exception at run time. </P>
<P>Maybe one such blob is not really bad, but three or more certainly are, slowly transmogrifying your application into a Dr. Moreau's island <a href="#6">[6]</a>.</P>
<P>A partial approach to this problem is to somehow automate and factor out the code that computes the casts from the code that does something. This way, there will be a unique point of maintenance when you change the hierarchy. Here's where typelists can be of help.</P>
<P>Consider the code below:</P>

<PRE>
template &lt;class tlist&gt; class AdHocVisitor;

template &lt;class H, class T&gt;
class AdHocVisitor&lt; typelist&lt;H, T&gt; &gt; 
    : public AdHocVisitor&lt;T&gt;
{
public:
    using AdHocVisitor&lt;T&gt;::Visit;
    virtual void Visit(H*) = 0;
    template &lt;class SomeClass&gt;
    void StartVisit(SomeClass* p)
    {
        if (H* pFound = dynamic_cast&lt;H*&gt;(p))
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Visit(pFound);
        }
        else
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;AdHocVisitor&lt;T&gt;::StartVisit(p);
        }
    }
};

template &lt;class H&gt;
class AdHocVisitor&lt; typelist&lt;H, null_typelist&gt; &gt; 
{
public:
    virtual void Visit(H*) = 0;
    template &lt;class SomeClass&gt;
    void StartVisit(SomeClass* p)
    {
        if (H* pFound = dynamic_cast&lt;H*&gt;(p))
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Visit(pFound);
        }
        else
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw "Unknown type passed";
        }
    }
};</PRE>

<P><B>AdHocVisitor</B> accepts a typelist as its argument and uses a technique similar to the one used by <B>cons</B>. Namely, <B>AdHocVisitor</B> has two specializations: one that handles the head of the typelist and recurses on the tail, and one that stops the recursion.</P>
<P>The first specialization defines a pure virtual function <B>Visit(H*)</B>, where <B>H</B> is the head of the typelist. Also, <B>AdHocVisitor</B> inherits itself, this time instantiated with the tail of the typelist. Essentially, <B>AdHocVisitor&lt;tl&gt;</B> defines a pure virtual function <B>Visit</B> for each type in the typelist <B>tl</B>.</P>
<P>This is a good start, because it's what the Visitor pattern prescribes. But we also need to do the actual dispatch. This is the job of <B>StartVisit</B>, which has quite an interesting implementation.</P>
<P>Let's start with the implementation of <B>StartVisit</B> in the first specialization of <B>AdHocVisitor</B>. It tries a <B>dynamic_cast</B> on the passed-in pointer (which, quite remarkably, can be of any type). If the cast succeeds, <B>StartVisit</B> materializes the visit by calling the pure virtual function <B>Visit</B> and passing it the result of the cast. If the cast does not succeed, <B>StartVisit</B> invokes <B>AdHocVisitor&lt;T&gt;::StartVisit</B>. <B>AdHocVisitor&lt;T&gt;</B> being the base class of <B>AdHocVisitor&lt; typelist&lt;H, T&gt; &gt;</B>, the call is nothing else but a straight invocation of the base class member function. That function will continue to perform the <B>dynamic_cast</B> in search for the right type.</P>
<P>The recursion must end at some point, and this is the role of the second specialization of <B>AdHocVisitor</B>. That specialization handles a typelist with only one element (the other one being <B>null_typelist</B>). The difference is that, in case the <B>dynamic_cast</B> fails, <B>StartVisit</B> throws an exception. As you'll soon see, that's not as bad as it looks.</P><P>Now let's see how to use the newly defined <B>AdHocVisitor</B>. Consider the definition above in place of a simple <B>main</B> function:</P>

<PRE>
int main()
{
    typedef cons&lt;TextArea, VectorGraphics,
        Bitmap&gt;::type MyHierarchy;
    DocElement *p = new Bitmap;
    struct ConcreteVisitor : AdHocVisitor&lt;MyHierarchy&gt;
    {
        void Visit(TextArea* p) 
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... 
        }
        void Visit(VectorGraphics* p) 
        {
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... 
        }
        void Visit(Bitmap* p) 
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... 
        }
    };
    ConcreteVisitor visitor;
    visitor.StartVisit(p);
}</PRE>

<P>Let's see how it all works. The first line defines <B>MyHierarchy</B> as a typelist containing <B>TextArea</B>, <B>VectorGraphics</B>, and <B>Bitmap</B>. Note that the root class, <B>DocElement</B>, is not part of the typelist. </P><P>The <B>ConcreteVisitor</B> class is defined right inside the <B>main</B> function &#151; quite in spirit of the "ad hoc" name of the implementation. As you'd expect, <B>ConcreteVisitor</B> inherits <B>AdHocVisitor&lt;MyHierarchy&gt;</B> and overrides all three pure virtual functions that <B>AdHocVisitor&lt;MyHierarchy&gt;</B> declares. </P>
<P>When the <B>main</B> function calls <B>StartVisit</B> against <B>p</B>, the mechanism described above enters into action and smoothly dispatches execution to the appropriate <B>Visit</B> overload.</P>

<H3><FONT color=#000080>Analysis of Ad Hoc Visitation</FONT></H3>

<P>This is one of those cases where analyzing the outcome of some code is as satisfying as hacking the code together.</P>

<H4><FONT color=#000080>Efficiency</FONT></H4>

<P>Well, compared to the clumsy <B>if</B>/<B>else</B> solution presented above, this solution isn't as efficient. We still do a <B>dynamic_cast</B>, and we do an extra virtual function call (<B>Visit</B>).</P>
<P>The virtual call can be eliminated quite easily by taking the following steps:</P>

<UL>
<LI>Have <B>AdHocVisitor</B> take a second template argument <B>Effector</B>, and derive from it.</LI> 
<LI>Instead of defining the pure virtual functions <B>Visit</B>, just have <B>AdHocVisitor</B> assume those functions are defined by <B>Effector</B> and use them. </LI>
<LI>(Optional) Inside each successful <B>dynamic_cast</B> branch, ensure at compile time that <B>Effector::Visit</B> has the appropriate signature. The compile-time test can be done quite easily by taking the address of <B>Effector::Visit</B>. </LI>
<LI>Take <B>ConcreteVisitor</B> out of <B>main</B>. There's nothing conceptually wrong with <B>ConcreteVisitor</B> being inside a function, but, alas, C++ does not allow local types to be passed as template arguments. </LI>
<LI>Use the <B>AdHocVisitor</B> template, passing it a typelist and your <B>ConcreteVisitor</B> class. You put the whole engine in motion by invoking <B>StartVisitation</B>.</LI></UL>

<P>Why didn't the article discuss this optimized solution from the very beginning (rather than leave it in the dreaded form of an exercise for the reader)? The optimized solution needs pounding out of some nuts and bolts, and this article's focus is applying typelists.</P>

<H4><FONT color=#000080>Coupling</FONT></H4>

<P>Both solutions need knowledge about the hierarchy. However, it is important to note that the brute force solution asks you to spread that hierarchy knowledge throughout the code; the typelist-based solution allows you to concentrate that knowledge in a unique place: you just provide a <B>typedef,</B> and you change it only when you change the hierarchy. </P>

<H4><FONT color=#000080>Maintainability</FONT></H4><P>Don't forget that we're already talking about a special situation: you cannot change the class hierarchy to which you want to add operations. That does impose some disadvantages upon us from the outset.</P>
<P>This being said, the typelist-based solution brings a very important maintainability boon. Consider you forget to handle the <B>Bitmap</B> type in your <B>ConcreteVisitor</B> class:</P>

<PRE>
&nbsp;&nbsp;&nbsp; struct ConcreteVisitor : AdHocVisitor&lt;MyHierarchy&gt;
    {
        void Visit(TextArea* p) 
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... 
        }
        void Visit(VectorGraphics* p) 
        {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... 
        }
    };</PRE>

<P>Then the compiler will not allow you to instantiate <B>ConcreteVisitor</B>, because <B>AdHocVisitor&lt;MyHierarchy&gt;</B> defines a virtual <I>pure</I> function <B>void Visit(Bitmap*)</B>, and, as you well know, pure functions are required to be overridden!</P>
<P>In other words, you ensure that, once you have defined the <B>MyHierarchy</B> typelist correctly, all handling omissions in all code will be flagged at compile time. This unique point of maintenance design is very appealing. (Unfortunately, however, the solution does not handle the case in which <B>ConcreteVisitor</B> has a spurious handler, say <B>void Visit(IrrelevantType*)</B>).</P>

<H3><FONT color=#000080>Conclusion</FONT></H3>

<P>This article presented a typelist implementation in C++, together with a complete use example. Typelists are powerful and important, mostly because they enable completely new idioms, thus bringing better solutions to complex problems. Most of all, typelists encourage reuse by allowing you to factor out tediously repetitive code.</P>

<H3><FONT color=#000080>Bibliography and References</FONT></H3>

<P><A name=1></A>[1] K. Czarnecki and U. Eisenecker. <I>Generative Programming: Methods, Tools, and Applications</I> (Addison-Wesley Longman, 2000).</P>
<P><A name=2></A>[2] See &lt;www.boost.org&gt;.</P>
<P><A name=3></A>[3] A. Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley Longman, 2001).</P>
<P><A name=4></A>[4] J. Vlissides and A. Alexandrescu. "To Code or Not to Code II," <I>C++ Report</I>, June 2000, &lt;www.research.ibm.com/designpatterns/pubs/ph-jun00.pdf&gt;.</P>
<P><A name=5></A>[5] E. Gamma, et al. <I>Design Patterns</I> (Addison-Wesley Longman, 1995).</P>
<P><A name=6></A>[6] H.G. Wells' novel <I>The Island of Dr. Moreau</I> (Dover, 1996) describes a mad doctor who transformed animals into humans on an isolated island. What he couldn't predict, however, was that his creatures were slowly returning back to their animal state, causing themselves and him much harm in the process.</P>

<P><i><B>Andrei Alexandrescu</B> is a Ph.D. student at University of Washington in Seattle, and author of the acclaimed book <I>Modern C++ Design</I>. He may be contacted at <b>andrei@metalanguage.com</b>. Andrei is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></P></blockquote></BODY></HTML>
