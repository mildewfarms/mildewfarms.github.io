<HTML>   
     <HEAD>
<TITLE>June 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr>
<p>Dear <I>CUJ</I>,</p>
<p>I just got hold of your March 2002 issue and read John F. Hubbard&#146;s article on binary code reuse (&#147;Binary Code Reuse in a Linux Environment&#148;). The use of Flex and Bison were given as an example to demonstrate a general point in solving a problem of launching Unix tools that work on <B>stdin</B>/<B>stdout</B> only. I agree with the general thrust of the argument, but found the article slightly misleading, particularly the assertion that &#147;if you left things as Flex and Bison have set them up, you would require your end users to type:&#148;</p>

<pre>
cat input_file.txt | BigCompiler"
</pre>

<p>By default, Flex will read from <B>stdin</B>, which seems like a reasonable default. However, it is a trivial task to make your Flex program read from an input file &#151; an example is even given on the &#147;man&#148; pages for my system, which (slightly reformatted) looks something like this:</p>

<pre>
#include &lt;stdio.h&gt;
int main( int argc, char* argv[] )
{
    ++argv, --argc;  /* skip over program name */
    if ( argc &gt; 0 )
        yyin = fopen( argv[0], "r" );
    else
        yyin = stdin;
    yylex();
    return 0;
}
</pre>

<p>The variable <B>yyin</B> is a <B>FILE*</B>. By simply assigning it to something other than <B>stdin</B>, you can read from an input file in about three lines of C code. I find this solution a lot less onerous than the one presented in the article for this particular class of problem.</p>
<p>Regards,</p>
<p>Paul Whitehead</p>

<p><I>Dear Paul,</I></p>
<p><I>Thanks for pointing out a simple, elegant solution to the problem of &#147;how to redirect Flex&#146;s input.&#148; Had I known about this technique, I might have chosen a different example for the article, if for no other reason than to avoid distracting readers who are Flex experts. As it was, I was simply delighted that I could run Flex and Bison effectively, without wasting most of my time!</I></p>
<p><I>Even with your technique available, however, I find that the compiler/compiler-driver architecture is a highly recommended approach for many problem domains. GCC uses it, as will many compiler creators, because it allows you to partition a complex problem along classic, easily understandable lines. That is to say, the driver program manages I/O and processes, while the other programs are specialized, encapsulated units of reuse.</I></p>
<p><I>Thanks,</I></p>
<p><I>John Hubbard</I></p>

<hr><p>Hi <I>CUJ</I>,</p>
<p>Regarding Joey Roger&#146;s article &#147;Encapsulating Virtual Memory in Windows&#148; in <I>CUJ</I> (January 2002), there is a bug in Listing 1 on page 37.</p>

<pre>
m_hFile = ::CreateFile(filename, 
                       accessMode,
                       shareMode, NULL,
                       OPEN_EXISTING,
                       FILE_ATTRIBUTE_NORMAL,
                       NULL);
if(m_hFile == NULL)
  return 0;
</pre>

<p>This return value error checking is buggy. The MSDN documentation for <B>CreateFile</B> says:</p>
<UL><p>If the function fails, the return value is <B>INVALID_HANDLE_VALUE</B>. To get extended error information, call <B>GetLastError</B>.</p></UL>
<p>The macro <B>INVALID_HANDLE_VALUE</B> is not <B>NULL</B>. For example, if the <B>CreateFile</B> tries to open a file that doesn&#146;t exist, the return value will be <B>0xffffffff</B>, which is not <B>NULL</B>. The caller of <B>CreateFile</B> should check the return value against <B>INVALID_HANDLE_VALUE</B>.</p>
<p>Regards,</p>
<p>Unnikrishnan.C</p>
<hr><p>Hi <I>CUJ</I>,</p>
<p>I am referring to Bill Gatliff&#146;s article &#147;Implementing Interrupt Service Routines in C++&#148; in the February 2002 issue of <I>CUJ</I>.</p>
<p>In regards to the methods of handling the absence of the <B>this</B> pointer in ISR routines, I think the following snippet of code would illustrate Bill&#146;s point clearer. Consider:</p>

<pre>
class device_c
{
public:
  device_c()
  // constructor initialize static "this" 
  // counterpart
  { me = this; };
  // non-static Interrupt Service Routine
  void isr();
  // this-like static member
  static device_c *me;
  // static interrupt dispatcher, should be
  // inlined for efficiency
  static interrupt void isr_raw() { me-&gt;isr(); }
  // example of non-static data member
  int count;
};

// your interrupt vector table has addresses of
// raw handlers
void (*vector_table[])() =
{
  &amp;device_c::isr_raw,
  // more raw ISRs
};

// storage for static "this"-like member
device_c *device_c::me = NULL; 

void device_c::isr()
{
  // yes, we can do this, we have "this"
  // pointer!!!
  count++;
}
</pre>

<p>By using this method, you do not need to use the <B>me</B> pointer in your real ISRs and can simply reference your non-static class members in a non-static member ISR function.</p>
<p>Of course, you should not create more than one instance of the <B>device_c</B> class without imposing a rule that the <B>isr</B> routine must only access <B>static </B>members. Therefore, this schema is useful for Singletons, and the only thing it really achieves is it avoids declaring of class members used in the <B>isr</B> function as <B>static</B> (fairly valid reason, I think).</p>
<p>Cheers</p>
<p>Michael Melkonian</p>

<hr><p>Andrew and Barbara,</p>
<p>I have a minor nit-pick on an otherwise excellent article (&#147;C++ Made Easier: Naming Unknown Types,&#148; <I>CUJ</I>, February 2002). The <B>typeof</B> operator is more generally applicable than the article implies. In particular, it is not true that, with <B>typeof</B>, &#147;if <B>f</B> is a function, and we know that <B>f</B> takes a single argument, there is no way to write an expression that represents the type of that argument.&#148; The way out, as usual, is the canonical extra level of indirection, as shown in the attached code (which works with gcc 2.95.2).</p>
<p>The trick is to invoke the helper function <B>std::ptr_fun</B> inside a <B>typeof</B> expression and use the <B>typedef</B>s defined by the resulting function adapter:</p>

<pre>
typedef typeof( std::ptr_fun( f ) ) fpo_t;
typedef fpo_t::argument_type argtype;
typedef fpo_t::result_type restype;
</pre>

<p>For example, if <B>f</B> is declared as:</p>

<pre>
double f( int );
</pre>

<p>then those <B>typedef</B>s are equivalent to:</p>

<pre>
typedef std::pointer_to_unary_function
  &lt;int,double&gt; fpo_t;
typedef int argtype;
typedef double restype;
</pre>

<p>The key observations are:</p>

<UL><LI>   The helper function <B>std::ptr_fun</B> is never called.</LI>
<LI>   The function adapter object is never created.</LI>
<LI>   The programmer never needs to write out the explicit type of the function adapter.</LI>
<LI>   The scope of the definitions of <B>argtype</B> and <B>restype</B> are not restricted to a single function.</LI>
</UL>

<p>This trick works with <B>std::ptr_fun</B> for functions with one or two arguments and can be extended easily to functions with more arguments, class member functions, and doubtless other tricky cases &#151; or at least it would if <B>typeof</B> were standard.</p>
<p>Robert P. Goddard</p>

<p><I>You are quite right that if we can obtain a name that corresponds to the type of a function &#151; something that </I><B>typeof</B><I> could do for us &#151; we can then use a technique such as the one you suggest to obtain the type of the function&#146;s argument. Indeed, this particular technique is widely used in the standard library, </I><B>std::ptr_fun</B><I> being just one place where it is used.</I></p>
<p><I>But the fact that the technique is already used in the standard library shows that </I><B>typeof</B><I> is not necessary in order to solve that particular problem. In fact, I don&#146;t see how </I><B>typeof</B><I> would make the solution any easier. All that </I><B>typeof</B><I> would do is to give us a way of going from the name of a function to its type; the problem of extracting the argument type from the function type is still solved in the same way, with or without </I><B>typeof</B><I>.</I></p>
<p><I>For example, suppose we were to make a tiny change to the C++ language definition to allow an expression of the form </I><B>e.m</B><I> to denote either a value or a type, depending on whether member </I><B>m</B><I> of the class that is the type of </I><B>e</B><I> denotes a value or a type. Suppose further that if </I><B>e.m</B><I> denotes a type, then the expression </I><B>e</B><I> is not evaluated. (It doesn&#146;t need to be evaluated, because all we need is its type.) Then we wouldn&#146;t need </I><B>typeof</B><I> to solve the function-argument problem, because we could write something like this:</I></p>

<pre>
// This class is already in the standard
// library
template &lt;class Arg, class Res&gt;
struct unary_function {
  typedef Arg argument_type;
  typedef Res result_type;
};

// This function is new
template &lt;class Arg, class Res&gt;
unary_function&lt;Arg, Res&gt; 
  reveal(Res (*f)(Arg)) {
  return unary_function&lt;Arg, Res&gt;();
};
</pre>

<p><I>Then with our tiny language change, </I><B>reveal(f).argument_type</B><I> would be the type of </I><B>f</B><I>&#146;s argument, and </I><B>reveal(f).result_type</B><I> would be the type of </I><B>f</B><I>&#146;s result.</I></p>
<p><I>In this example, as in yours, what really extracts the argument type from the function type is not the use of </I><B>typeof</B><I>, nor it is the use of our hypothetical language feature. Rather it is a mechanism that already exists in C++, namely the ability to compute several template parameters from a single template-function argument that happens to incorporate several types. So in that sense, it&#146;s not really </I><B>typeof</B><I> that&#146;s solving the problem.</I></p>
<p><I>I imagine that this discussion sounds like splitting hairs. Indeed, it probably is. The reason for splitting them is to try to clarify the sense in which we were claiming that </I><B>typeof</B><I> doesn&#146;t solve the original problem.</I></p>
<p><I>Regards,</I></p>
<p><I>Andrew Koenig</I></p>
</blockquote></body></html>
