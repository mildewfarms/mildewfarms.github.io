<HTML>   
     <HEAD>
<TITLE>June 2002/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: STL Function Objects and Their Adaptors</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>STL is more than just algorithms, containers, and iterators. Function objects and adaptors greatly enhance your ability to use STL effectively.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>In one of the first installments of this column almost two years ago, I said that the STL rests on three pillars: containers, iterators, and algorithms. Since then, I have tried to pass on to you what I have learned about these three topics in my own work as a software engineer. Perhaps I was able to save you from some of the cuts and bruises that we suffered when we first started using the STL in our shop. I am now almost ready to move on to the next chapter in my overall plan for this column, namely, generic programming techniques that are not specifically related to the STL. However, before I can do that, I must conduct a little mopping-up operation and talk about one last group of classes and functions that the STL provides, often overlooked but really nifty and useful nonetheless: function objects and their adaptors.</p>

<H3><FONT COLOR="#000080">Overloading operator()</FONT></H3>

<p>Let me begin by reminding you that one of the many operators that C++ lets you overload is <B>operator()</B>, the function call operator. More precisely, if we define a class <B>Func</B> as follows:</p>

<pre>
class Func
{
public:
  int operator()(int i) const
  { return i * 42; }
};
</pre>

<p>then we can use any object of type <B>Func</B> just like a function:</p>

<pre>
// Writes 84 to standard out
Func foo;
std::cout &lt;&lt; foo(2);
</pre>

<p>The expression <B>foo(2)</B> is simply a syntactically different way of saying:</p>

<pre>
foo.operator()(2);
</pre>

<p>We can also use an unnamed temporary local object of type <B>Func</B> to make the same function call. This leads to the following syntactic construct, which you may find confusing at first:</p>

<pre>
std::cout &lt;&lt; Func()(2);
</pre>

<p>The <B>Func()</B> part creates an unnamed temporary object of type <B>Func</B>, and the <B>(2)</B> part causes the call to <B>operator()</B>. Again, we could be more verbose and write</p>

<pre>
Func().operator()(2);
</pre>

<p>Needless to say, <B>operator()</B> can take any number of arguments of any type, and it can have any result type. In fact, you can do almost anything with <B>operator()</B> that you can do with an ordinary member function, like overload it (i.e., write multiple versions of it with different parameter lists) or make it virtual, private, or what not. However, I have never used or seen anybody use <B>operator()</B> as anything other than a plain old public, non-virtual, non-overloaded member function. In fact, at this point, you are probably asking yourself what reason anybody could possibly have for writing a function call operator for some class and then using objects of that type as if they were functions. Other than to satisfy a C++ programmer&#146;s notorious desire for being syntactically cute, why would anybody do such a thing? In the course of this column, I&#146;ll give you several good reasons for using such function objects instead of old-fashioned functions.</p>
<p>There is just one more thing I need to address, and that is terminology. The gurus of C++ and the STL commonly use the term &#147;function object&#148; for objects that are used like functions, and the term &#147;functor&#148; for both classes of this kind and their objects. Chuck Allison, senior editor of <I>CUJ</I>, has raised the objection that the word functor already has a rigorously defined meaning in mathematics, and that this meaning is not exactly compatible with the new use of the word in the C++ community. As a former research mathematician who has had more than a brush with category theory where functors abound, I have to agree with his point. On the other hand, the dictionary defines &#147;functor&#148; as &#147;something that performs a function or an operation,&#148; which is a perfect fit for C++-style function objects. Moreover, it seems to me that mathematics and C++ programming are sufficiently disjoint disciplines that they can each have their own definition of the term &#147;functor&#148; without causing confusion or misunderstanding. In short, I will agree with Chuck Allison&#146;s point, but I will not accept it as a reason for not referring to classes with an overloaded <B>operator()</B> and their objects as functors.</p>

<H3><FONT COLOR="#000080">STL Functors</FONT></H3>

<p>The STL provides us with a number of predefined functors. Perhaps not surprisingly, they are all class templates. I will not list them all here, letting you look them up in your favorite STL book instead. Let us look at <B>std::plus</B> as an example. On the surface, <B>plus</B> is nothing but a functor whose function call operator adds two things of a templatized type:</p>

<pre>
template&lt;typename T&gt;
class plus
{
  // Some more stuff...
public:
  T operator()(
    const T&amp; x,
    const T&amp; y
    ) const
  { return x + y; }
};
</pre>

<p>When I saw this for the first time, I was a bit annoyed. Hadn&#146;t they told me that the hottest thing since sliced bread was to overload <B>operator+</B>? If, for example, I am to write a matrix class, I&#146;m supposed to overload its <B>operator+</B> so that I can write:</p>

<pre>
Matrix A,B,C;
[...]
C = A + B;
</pre>

<p>rather than something like:</p>

<pre>
C = A.add(B);
</pre>

<p>or:</p>

<pre>
C = add(A, B);
</pre>

<p>Aren&#146;t we going in circles here? First, we make it so that writing <B>A + B</B> calls <B>operator+</B> of the matrix class, and then we introduce a functor <B>std::plus</B> so that we can write:</p>

<pre>
plus&lt;Matrix&gt;()(A, B);
</pre>

<p>to have the function call operator of class <B>plus</B> call <B>A + B</B>. In fact, if you were to use <B>std::plus</B> in that manner, writing:</p>

<pre>
plus&lt;Matrix&gt;()(A, B);
</pre>

<p>instead of <B>A + B</B>, then you would be going in circles. But that&#146;s not what <B>std::plus</B> is for. All the good reasons for overloading <B>operator+</B>, or <B>operator-</B> and <B>operator*</B> for that matter, remain valid. Functors such as <B>std::plus</B> are useful for specific purposes in the context of generic programming, the prime example being the customization of STL-style algorithms. Suppose, for example, that you have two STL vectors of equal size containing objects of class <B>Matrix</B>, and <B>operator+</B> is defined for these matrices. Now you want to add to each element in the first vector the corresponding element of the second vector. That is, you want to do what this code does:</p>

<pre>
for(int i=0; i&lt;vect1.size(); ++i)
  vect1[i] += vect2[i];
</pre>

<p>As good STL users, we prefer algorithms to explicit loops, so we should do it like this:</p>

<pre>
std::transform(
  vect1.begin(),
  vect1.end(),
  vect2.begin(),
  vect1.begin(),
  std::plus&lt;Matrix&gt;()
  );
</pre>

<p>If you&#146;re not sure, look up <B>std::transform</B> in your documentation to verify that what I&#146;m doing here is correct and safe. Notice how we are passing an unnamed temporary object of type <B>std::plus</B> to the algorithm. This object will be used as a function object to perform the desired addition.</p>
<p>Now we have seen an example where the functor <B>std::plus</B> is put to good use: an object of type <B>std::plus</B> is passed to an STL algorithm to customize the action of the algorithm. This makes it possible to have an algorithm like <B>std::transform</B> perform an enormous variety of tasks. Interestingly, though, I have still not given you a good reason why <B>std::plus</B> is a functor rather than a plain old non-member function. The algorithm <B>std::transform</B> accepts anything that can be called like a function as its last argument, and the same is true for other STL algorithms that can be similarly customized. Therefore, function pointers work fine here. One great reason to prefer functors over function pointers in a situation like that is, somewhat surprisingly, efficiency. When the compiler generates the instantiation of <B>std::transform</B> with the template arguments of the example above, it is very likely that the call to <B>std::plus</B>&#146;s <B>operator()</B> will be inlined. Function pointers, on the other hand, inhibit inlining. Therefore, contrary to the common wisdom that object-oriented design comes at a performance cost, STL-style algorithms used with functors often perform better than their C-style counterparts such as <B>qsort</B>, because the latter use function pointers that prevent the compiler from inlining.</p>
<p>Another great reason for making <B>std::plus</B> a functor rather than a non-member function becomes apparent when we start using STL function object adaptors.</p>

<H3><FONT COLOR="#000080">STL Function Object Adaptors</FONT></H3>

<p>Let us look at a slight modification of the vector example that we used earlier. Suppose we have a vector of <B>Matrix</B> objects, where, as before, <B>operator+</B> is defined for matrices, and we want to add a constant value, say <B>C</B>, to each element of the vector, like this:</p>

<pre>
for(int i=0; i&lt;vect.size(); ++i)
  vect[i] += C;
</pre>

<p>Again, since STL algorithms are to be preferred over explicit loops, you want to write something like this instead:</p>

<pre>
std::transform(
  vect1.begin(),
  vect1.end(),
  vect1.begin(),
  add_const&lt;Matrix&gt;(C)
  );
</pre>

<p>where <B>add_const</B> is a functor that takes one argument and returns the result of adding to this argument a value that is specified upon construction:</p>

<pre>
template&lt;typename T&gt;
class add_const
{
public:
  add_const(const T&amp; c) : m_c(c) {}
  T operator()(const T&amp; x) const
  { return x + m_c; }

private:
  const T m_c;
};
</pre>

<p>There is a more &#147;generically correct&#148; way of doing this, which I&#146;ll get to in a moment, but let me first point out that we have just stumbled upon another reason to prefer functors over non-member functions: functors are full-fledged classes, and therefore they can store state. In this case, we used state to hold the constant value that the functor adds to its argument. Another thing that I find myself doing quite frequently is to use functors to query a collection of objects for information. For example, if you have a collection whose elements are themselves collections, like a vector of vectors, then you can obtain the collections&#146; maximum sizes by calling <B>std::for_each</B> with a functor that stores the maximum size of the collections that it has seen. <a href="list1.htm">Listing 1</a> shows the code. Notice how the algorithm <B>std::for_each</B> takes its last argument by value, but it returns a copy of that argument so that it can be inspected when the algorithm is finished.</p>
<p>So now you have two reasons to familiarize yourself with functors and use them with STL-style algorithms. But it gets better. Let&#146;s go back to the example of adding a constant value to every element in a vector of matrices. The STL way of doing this is as follows:</p>

<pre>
std::transform(
  vect1.begin(),
  vect1.end(),
  vect1.begin(),
  std::bind2nd(std::plus&lt;Matrix&gt;(), C)
  );
</pre>

<p><a href="list2.htm">Listing 2</a> shows a typical implementation of <B>std::bind2nd</B>. It is really just one of those little generating functions that the STL often uses to create objects. In this case, the object created is of type <B>std::binder2nd</B>. <B>std::binder2nd</B> is a typical example of an STL function object adaptor. It takes two constructor arguments: a functor <B>func</B> that takes two arguments, and a value <B>secondArg</B> for the second argument. The resulting object is a new functor that takes one argument. Calling this new functor with an argument <B>x</B> results in a call to the original functor <B>func</B>, with <B>x</B> as the first argument and <B>secondArg</B> as the second argument. In short, <B>std::binder2nd</B> turns a binary functor into a unary functor by fixing the second argument to a user-supplied value.</p>
<p>This takes us to the most important reason why things like <B>std::plus</B> are functors rather than non-member functions. If you take one quick look at <B>std::binder2nd</B>&#146;s definition, you&#146;ll notice immediately that the adaptor <B>std::binder2nd</B> needs quite a bit of type information about its adaptee <B>func</B>: it uses <B>func</B>&#146;s result type as well as its two arguments&#146; types. When using functors instead of functions, this information can easily be provided in the form of <B>typedef</B>s. The STL has, of course, a standard way of providing this type information. Every time you write a unary functor, you should derive your class from <B>std::unary_function</B>, and when you write a binary functor, you should derive from <B>std::binary_function</B>. In both cases, you must specify the template parameters in the obvious way. Look at <B>std::binder2nd</B> in <a href="list2.htm">Listing 2</a> for an example. Your functor then provides all necessary type information via the <B>typedef</B>s <B>result_type</B>, <B>first_argument_type</B>, and <B>second_argument_type</B>. In STL terminology, your functor has become an adaptable functor, and it is thus ready to be used with STL-style adaptors such as <B>std::binder2nd</B>.</p>
<p>Just as with algorithms, iterators, functors, and the like, the STL provides only the most commonly needed function object adaptors, and you are encouraged to write your own. As a matter of fact, I personally find that the STL&#146;s supply of adaptors is a bit on the meager side. For example, since much of my software development is scientific and mathematical in nature, I often need the composition of two functors, which the STL does not have. Matt Austern mentions composition adaptors as a &#147;frequent addition to the STL&#148; in Sections 15.8.6-15.8.8 of his book <a href="#1">[1]</a>. The ones that I wrote for myself can be found, together with some other stuff that you may find useful, in the code that came with my article on STL extensions in the June 2000 issue of <I>CUJ</I> <a href="#2">[2]</a>. Slightly different versions of the composition adaptors are available from the Boost website <a href="#3">[3]</a>. I would recommend that you use the Boost versions, because they have an excellent chance of being included in the STL in the future.</p>

<H3><FONT COLOR="#000080">STL Member Function Adaptors</FONT></H3>

<p>There is one more group of adaptors in the STL that I want to mention, namely, member function adaptors. As usual, I will not provide you with a complete documentation here. There are two reasons for mentioning these adaptors. First, they are so important that you simply must be familiar with them. Second, under certain circumstances, they bring out a rather ugly problem with the STL, which you must be warned about.</p>
<p>Suppose you wish to perform some action on each element in a container; say, you want to serialize each object in the container. The STL way of doing this is to call <B>std::for_each</B> with the <B>begin</B> and <B>end</B> iterators of the container and a suitable functor. Therefore, we would expect the code to look something like this:</p>

<pre>
std::vector&lt;SomeClass&gt; vect;

// Add elements to the vector
[...]

std::for_each(
  vect.begin(),
  vect.end(),
  FuncSerialize()
  );
</pre>

<p>Here, <B>FuncSerialize</B> would be a unary functor that takes an argument of type reference to <B>SomeClass</B>. The code above creates an unnamed temporary object of type <B>FuncSerialize</B>, and the algorithm <B>std::for_each</B> calls this function object on each element of the vector. Now is the time to remember that, despite the fact that generic programming is really cool, the primary paradigm of software that is written in C++ is still the object-oriented paradigm. Serializing an object should not be done by calling a non-member function that takes the object as an argument. It should be done by calling a member function. At this point, it looks as if we have to abandon the STL and write an explicit loop:</p>

<pre>
for(int i=0; i&lt;vect1.size(); ++i)
  vect[i].Serialize();
</pre>

<p>Fortunately, this is not necessary. The STL provides us with a way to reconcile generic programming and object-oriented programming. Here&#146;s what you must write to call the member function <B>SomeClass::Serialize</B> on each object in our vector <B>vect</B>:</p>

<pre>
std::for_each(
  vect.begin(),
  vect.end(),
  std::mem_fun_ref(SomeClass::Serialize)
  );
</pre>

<p>Even without looking at source code, it is not hard to guess how <B>std::mem_fun_ref</B> works here. It is a helper function that returns a unary functor. This functor stores the address of the member function <B>SomeClass::Serialize</B>. The functor takes one argument of type <B>SomeClass&amp;</B>. When called with an argument <B>x</B> of type <B>SomeClass</B>, the functor will call <B>x.Serialize</B>.</p>
<p>The STL has a whole zoo of member function adaptors of this type. Their names all have &#147;<B>mem_fun</B>&#148; in them, and you should familiarize yourself with them. The STL implementation that comes with Microsoft Visual C++ 6.0 is incomplete in this area insofar as you cannot adapt <B>const</B> member functions, and you cannot adapt member functions that return <B>void</B>. The code that came with my article on STL extensions <a href="#2">[2]</a> provides what&#146;s missing.</p>
<p>In the serialization example above, I assumed that the member function <B>SomeClass::Serialize</B> takes no arguments. In real life, you will probably encounter serialization functions that are declared like this:</p>

<pre>
void Serialize(Archive&amp; ar);
</pre>

<p>Here, the <B>Archive</B> argument specifies the destination of the serialization process. The task of serializing each object in a container has just become a little more complex, but the STL can still handle it. Suppose <B>ar</B> is the archive to which you want to serialize each element of the vector <B>vect</B>. Here&#146;s what you must write:</p>

<pre>
std::for_each(
  vect.begin(),
  vect.end(),
  std::bind2nd(std::mem_fun1_ref
              (SomeClass::Serialize), ar)
  );
</pre>

<p>std::mem_fun1_ref</B> works much like <B>std::mem_fun_ref</B>, which we looked at earlier. The difference is that <B>std::mem_fun1_ref</B> adapts member functions that take one argument. The resulting functor takes two arguments. The first one is a reference to the object on which the member function is to be called. The second one is the argument that is to be passed to the member function. In other words, if <B>x</B> is an object of type <B>SomeClass</B>, and <B>ar</B> is an object of type <B>Archive</B>, then the functor call:</p>

<pre>
std::mem_fun1_ref(SomeClass::Serialize)
                 (x, ar);
</pre>

<p>results in the call:</p>

<pre>
x.Serialize(ar);
</pre>

<p>Since we already know all about <B>std::bind2nd</B>, it should be clear now how the <B>for_each</B> example above works. The algorithm simply calls:</p>

<pre>
x.Serialize(ar);
</pre>

<p>on each element <B>x</B> of the vector <B>vect</B> &#151; so far, so good. This is exactly the way we&#146;re supposed to do this. Except, the code won&#146;t compile under any STL implementation that I am aware of. To see why, let us take a second look at <B>binder2nd</B>&#146;s class definition in <a href="list2.htm">Listing 2</a>. Specifically, look at the type of the second constructor argument. It is a <B>const</B> reference to the second argument type of the underlying binary functor. In our example, what is the underlying binary functor? It is the member function adaptor that <B>std::mem_fun1_ref</B> has created. And what is the second argument type of this functor? It is <B>Archive&amp;</B>. Ouch. What <B>binder2nd</B> is presenting to the compiler here is the &#147;type&#148; <B>Archive&amp;const&amp;</B>. The compiler politely and rightfully declines to deal with this: references to references are not allowed.</p>
<p>Another area where the reference-to-reference problem tends to rear its ugly head is locales. In my last column, I had an example that used the STL algorithm <B>std::transform</B> to read characters from the standard input stream, upcase them, and write them back to standard out. To avoid having to address the reference-to-reference problem, I used the musty old <B>toupper</B> function from the C runtime library to achieve the upcasing. The STL way to do it would have been to create a functor that uses the <B>locale</B> object stored with the <B>cin</B> object. Do yourself a favor and use your STL documentation and literature to fully understand the following line of code, which creates such a functor:</p>

<pre>
std::bind2nd(
  std::ptr_fun(std::toupper&lt;char&gt;),
  std::cin.getloc()
  );
</pre>

<p>Then try to compile this and understand why you get a reference-to-reference error.</p>
<p>This problem is extremely annoying, and if you use the STL extensively, as you should, then you are practically guaranteed to run into it. Is there a solution to this problem? Yes, there is. Rather than grabbing the argument types of its underlying binary functor and slapping references on them, which will likely result in references to references, what <B>binder2nd</B> should do is this: it should ask each of these types if it is a reference. If so, the type is used as is. If not, a reference to the type is used. Does this remind you of something? It should. It&#146;s a compile-time if-else of types. If some type is a reference, do one thing. Else, do another. It&#146;s the kind of problem that can be solved with a traits class. I&#146;ll explain the solution in detail in my next column. In the meantime, if you want to do some research on your own, check out Boost&#146;s <B>call_traits</B> <a href="#4">[4]</a> or Andrei Alexandrescu&#146;s <B>type_traits</B> <a href="#5">[5]</a>. Notice, however, that you cannot fix the reference-to-reference problem that we encountered when combining <B>std::bind2nd</B> and <B>std::mem_fun1_ref</B> by just downloading some code and adding it to your project. The source code of classes such as <B>std::binder2nd</B> needs to be changed. Boost has appropriate replacements for the STL function object adapters <a href="#6">[6]</a>. Notice that for all this to work, you need a compiler that supports partial template specialization. Most compilers these days do, the most notable exception being Microsoft&#146;s Visual C++.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Matthew H. Austern. <I>Generic Programming and the STL</I> (Addison Wesley, 1998).</p>
<p><a name="2"></a>[2]  Thomas Becker. &#147;STL &amp; Generic Programming: Generic Extensions to the STL,&#148; <I>C/C++ Users Journal</I>, June 2000. The code is available at &lt;www.cuj.com/code/archive.htm&gt; under June 2000.</p>
<p><a name="3"></a>[3]  &lt;www.boost.org/libs/compose&gt;</p>
<p><a name="4"></a>[4]  &lt;www.boost.org/libs/utility/call_traits.htm&gt;</p>
<p><a name="5"></a>[5]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001), Section 2.10.</p>
<p><a name="6"></a>[6]  &lt;www.boost.org/libs/functional&gt;</p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2002/jun02/becker.zip"></a></h4>
</blockquote></body></html>
