<HTML>
<HEAD>
<TITLE>June 2002</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">June 2002<BR>
                Volume 20 Number 6</FONT></H3>
               
<H3><FONT COLOR="#FF0000">ALGORITHMS</FONT></H3>

<H4><A HREF="halibard/halibard.htm">A Multiple Substring Search Algorithm</A></H4>
<p><b>Moishe Halibard and Moshe Rubin</b><br>
<i>You will surely find this generalization of <b>find_first_of</b> for multiple substrings both elegant and useful. What's more, it's very efficient.</i></p>

<H4><A HREF="andrews/andrews.htm">Keyword Correction from a Dictionary</A></H4>
<p><b>Larry Andrews</b><br>
<i>Have your computer understand what you mean, not just what you say, with this effective string matching algorithm.</i></p>

<H4><A HREF="bucci/bucci.htm">Using Genetic Algorithms</A></H4>
<p><b>Mark Bucci</b><br>
<i>A lucid primer on genetic algorithms, along with a handy template to get you started.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>
<H4><A HREF="collison/collison.htm">Retargeting the GNU C Compiler</A></H4>
<p><b>Michael Collison</b><br>
<i>An inside look on how to deploy the GNU C compiler to your platform of choice.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="becker/becker.htm">STL &amp; Generic Programming: STL Function Objects and Their Adaptors</A></H4>
<p><b>Thomas Becker</b><br>
<i>STL is more than just algorithms, containers, and iterators. Function objects and adaptors greatly enhance your ability to use STL effectively.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: Avoiding Array Overruns</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>The abstractions in the Standard C++ library keep you from trashing memory and committing related transgressions (admit it </I>&#151;<I> you're guilty!), and they make for more elegant code. Use them.</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: Running Circles Round You, Logically</A></H4>
<p><b>Steve Dewhurst</b><br>
<i>Remember that old bitwise trick to swap two integers without a temporary? (Of course you do </I>&#151;<I> it's Common Knowledge). With a little imagination you can use that technique to craft iterators that don't know which way to go.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<p>In this web-only component of <I>CUJ</I>, we publish columns by experts involved in the development, standardization, and deployment of C++. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp2006/henney/henney.htm">&#147;From Mechanism to Method: State Government&#148;</A></H4>
<p><b>by Kevlin Henney</b><br>
<i>Sometimes objects can get themselves into a state. It is a matter of design (art, science, inspiration, and coffee) that determines whether this state is a comfortable one or not. This month&#146;s column tackles some of the issues involved in realizing state models in C++, exploring a language oddity, and redressing some common pattern misconceptions en route.</i></p>

<H4><A HREF="../cexp2006/alexandr/alexandr.htm">&#147;Generic&lt;Programming&gt;: Discriminated Unions (II)&#148;</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<i>We continue working on our <b>Variant</b> design and implementation. This time we focus on storage &#151; how data is stored and accessed. This article presents techniques for computing alignment of types with reasonable accuracy and portability. Then, once the storage proper is in place, we need polymorphic means to manipulate that storage &#151; for which <b>Variant</b> uses the fake <b>vtable</b> idiom.</i></p>

<H4><A HREF="../cexp2006/hyslop/hyslop.htm">&#147;Conversations: The Good, the Bad, and the Deprecated&#148;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b></p>
<i>What can go wrong when your code gives you a bit too much... er... static.</i></p>

</BLOCKQUOTE></BODY></HTML>
