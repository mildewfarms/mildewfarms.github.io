<HTML>   
     <HEAD>
<TITLE>June 2002/A Multiple Substring Search Algorithm</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Multiple Substring Search Algorithm</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Moishe Halibard and Moshe Rubin</FONT></H3>

<BLOCKQUOTE>
<p>You will surely find this generalization of <b>find_first_of</b> for multiple substrings both elegant and useful. What's more, it's very efficient.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>The problem of searching for a substring within a given string is well researched, and many fast, optimized algorithms for differing needs have been published <a href="#1">[1]</a>. However, we found no published efficient algorithm for searching for multiple substrings within a string. An example of this would be finding the first occurrence of any of the substrings <B>apple</B>, <B>orange</B>, <B>pear</B>, or <B>banana</B> within the string <B>"The fruit bowl contained a large variety of fruits, including oranges, lemons and grapefruits"</B>.</p>
<p>In its simplest form, using a brute force method, one can search for each substring one at a time, looping through the string for each search. However, this is clearly not optimized (i.e., <I>O(N</I>2<I>)</I>) and more efficient methods must intuitively be possible.</p>
<p>Kernighan <a href="#2">[2]</a>, when writing an email spam filter, encountered exactly this problem when scanning incoming emails for a large number of characteristic spam substrings. He initially used the brute force method to scan the incoming email, but found that the spam filter was unacceptably slow. He found that the repeated scanning of the email for each substring proved to be the bottleneck in the filter code. To clear this bottleneck, he made a major improvement to the brute force method by setting up an array of the initial letter of each of the spam substrings. The array elements contained pointers to each of the substrings starting with that letter. The array typically has far fewer entries than the number of substrings, since many of the substrings share common initial letters. This reduction becomes more pronounced when there are a large number of substrings.</p>
<p>Kernighan then made a loop through this array into the primary loop. He searched the email message once for each entry in the initial-letter array. For each loop iteration, he progressed through the entire string, pausing to check when he encountered a character identical to the one represented by that array element. In these cases, he checked for each of the substrings starting with that array entry. His solution cleared the bottleneck in his spam filter and was therefore not generalized to a fully optimized solution, which would entirely eliminate repeatedly scanning the string.</p>
<p>This article summarizes the algorithm we developed to search efficiently and simultaneously for multiple substrings within a string. The algorithm uses a single pass through the string, with occasional backtracking. Possible extensions to this algorithm are discussed at the end of the article.</p>

<H3><FONT COLOR="#000080">Outline</FONT></H3>
<p>The program must make a single pass through a string, simultaneously searching for any of several substrings. To accomplish this task, the program must first preprocess the substrings to build an FSM (finite state machine) <a href="#3">[3]</a>. An FSM is a matrix of states. Each state represents a scenario within the search. In other words, the state describes a partial result of a substring search and defines what character(s) must occur next if a substring is present. Each state is assigned a numerical value, and each state points to the next state in the chain. The matrix therefore defines a path through the states that indicates the successful discovery of a substring.</p>
<p>Once this FSM is prepared, a single pass is made through the string. The program processes each character in the string and traverses the FSM matrix accordingly. The current state and the current character define a matrix value that points to a new state. Some small-scale backtracking is required after following false leads, but globally, this is a one-pass algorithm, <I>O(n log n)</I>, scaling with the length of the string and the sum total length of all the substrings.</p>
<p>The implementation in this article returns the offset within the string of the first matching substring and stops processing.</p>

<H3><FONT COLOR="#000080">Building the FSM</FONT></H3>
<p>The FSM is a matrix bounded in one dimension by the size of the character alphabet, and in the other, by the maximum theoretical number of states &#151; in our case, the sum of the lengths of all the substrings. At startup time, all the matrix entries are set to zero.</p>
<p>Starting with state <B>0</B> and the first character of the first substring, you set the variable at matrix position <B>[0][char value]</B> to the state to jump to if that character is encountered. This will be the first unused state. After reading the first character, this will be <B>1</B>. Setting the current state to <B>1</B> and moving to the next character in the substring, you set the variable at matrix position <B>[current state] [char value]</B> to the state to jump to if that character is found. The same procedure is followed for all the characters in the initial substring. When the final substring character is reached, the value entered into the FSM should be some special value (e.g., <B>-1</B>) to denote complete matching.</p>
<p>For example, after entering the single substring <B>banana</B>, the FSM would resemble <a href="tab1.htm">Table 1</a> (zeros are not shown).</p>
<p>Here is pseudocode for entering a single substring into the FSM:</p>

<pre>
for each character in the substring
{
  if this is the last character of substring
    set the matrix entry for this character
    and state to -1
  else
    set the matrix entry for this character
    and state to the next available state
    and set the current state equal to the next available
    state.
}
</pre>

<p>The substring <B>banana</B> is therefore processed as follows (see <a href="tab1.htm">Table 1</a>):</p>

<OL><LI>At initial state <B>0</B> and at the matrix position corresponding to the first character in the substring (<B>b</B> in this case), record the value of the next unused state (<B>1</B> in this case).</LI>
<LI>Read the next character in the substring. At the state referenced in the previous step (<B>1</B> in this case) and at the matrix position corresponding to the new character (<B>a</B> in this case), record the value of the next unused state (<B>2</B> in this case).</LI>
<LI>Process subsequent characters in the substring as described in Step 2.</LI>
<LI>When you reach the last character in the substring, record a <B>-1</B> in the matrix, signifying the end of the substring.</LI></OL>

<p>The next substrings are entered in an identical fashion, also starting from initial state <B>0</B>. If any entries match those of earlier strings, for example entering <B>banner</B> after <B>banana</B>, their state path can be followed until the substrings diverge, whereupon a further state needs to be instantiated.</p>
<p><a href="tab1.htm">Table 1</a> would then resemble <a href="tab2.htm">Table 2</a>, with the changed entries shown in bold.</p>
<p>The second substring <B>banner</B> is processed as follows (see <a href="tab2.htm">Table 2</a>):</p>

<OL><LI>The first three letters of <B>banner</B> are identical to the first three letters of <B>banana</B>. Therefore, these characters are processed exactly as before, and the result is that the first three states of the FSM (states <B>0</B>, <B>1</B>, and <B>2</B>) are unchanged.</LI>
<LI>The fourth character of <B>banner</B> is different from the fourth character of <B>banana</B>. In state <B>3</B> (representing character <B>4</B>), record the next unused state for the value corresponding to the letter <B>n</B>. The next unused state in this case is state <B>6</B> (see <a href="tab2.htm">Table 2</a>).</LI>
<LI>Read the next character of <B>banner</B> (<B>e</B>). At state <B>6</B>, record the next unused state (<B>7</B>) for the letter <B>e</B> (see <a href="tab2.htm">Table 2</a>).</LI>
<LI>At state <B>7</B>, record a <B>-1</B> for the character <B>r</B>, signifying the end of the substring.</LI></OL>

<p>It is worth noting that in this example the number of used states, seven, is far less than the theoretical maximum of <I>6+6=12</I>.</p>
<p>You can use this method to add additional substrings to the FSM. For example, <a href="tab3.htm">Table 3</a> shows the substrings <B>banana</B>, <B>banner</B>, <B>banned</B>, <B>banter</B>, <B>adder</B>, <B>red</B>, and <B>tab</B>. Note that the new words <B>banned</B> and <B>banter</B> diverge from the original <B>ban</B> chain in a fashion similar to the word <B>banner</B>, as described in <a href="tab2.htm">Table 2</a>. The substrings <B>adder</B>, <B>red</B>, and <B>tab</B> have new initial characters that begin new chains from the <B>0</B> state. The value recorded for each of these characters is the next unused state at the time the substring is processed (in this case, <B>10</B> for <B>a</B>, <B>14</B> for <B>r</B>, and <B>16</B> for <B>t</B> &#151; see <a href="tab3.htm">Table 3</a>).</p>
<p>Extra care is required when entering strings that are truncated or elongated versions of previous strings. In the truncated case (e.g., the substring <B>ban</B>, being entered after <B>banana</B>), the special matching value (<B>-1</B>) should be set at the earlier terminating position. In the elongated case (e.g., the substring <B>banana</B> being entered after <B>ban</B>), the special end value (<B>-1</B>), which denotes the end of the shorter substring, should not be changed. After reaching the <B>-1</B> end value of the previous string, no more of the longer substring needs to be entered.</p>
<p>This implementation precludes finding any elongated substrings, if truncated versions are also present, which is fine if you are interested in finding only the first of any substring matches. If all substring matches are needed, instead of denoting termination with a simple <B>-1</B>, the state values would have to set aside one bit to denote termination, while allowing the other bits to contain a value denoting the state path of any continuing substring.</p>
<p>As an example of entering a truncated version of a previous string, if the next string entered were <B>ban</B>, the only change to the FSM would be inserting <B>-1</B> at the end of the shorter string. The table now looks like <a href="tab4.htm">Table 4</a>.</p>
<p>Notice how entry <B>[2][n]</B> has changed from <B>3</B> to <B>-1</B>. If the string contains any of the longer strings that start with <B>ban</B> (i.e., <B>banana</B>, <B>banner</B>, <B>banned</B>, and <B>banter</B>), you will now always first find <B>ban</B>, which is in fact the desired result.</p>
<p>Sample code to enter a single substring into the FSM is shown in <a href="list1.htm">Listing 1</a> (<B>BuildingFSM.cpp</B>). Note that this code expects all the substring characters to have positive ASCII values (i.e., no greater than <B>0x7F</B>). In order for all extended ASCII character values to occur in the substrings (i.e., up to <B>0xFF</B>), they must be cast to <B>unsigned char</B> before they are entered into the FSM.</p>

<H3><FONT COLOR="#000080">Searching for All Substrings Using the FSM</FONT></H3>

<p>Once the FSM is prepared, the program must search the string for any occurrences of the substrings. This search consists of reading each character in the string and proceeding accordingly through the FSM matrix. As each character is read, the program checks the FSM for the value associated with the current state and the current character. If that value is zero, no substring starts with the current letter, and you progress to the next character of the string. If, however, the value is non-zero, you have possibly found a matching substring, so you store the current string position (to return to in the case of a false lead). The value obtained from the matrix becomes the new state. You continue the character-by-character search, until you either reach the special value (<B>-1</B>) denoting a complete match, or you return to state <B>0</B>. In the former case, a match has been found. In the latter case, the search must backtrack and continue from where it left the <B>0</B> state, which you have saved.</p>
<p>For example, consider the FSM populated as shown in <a href="fig1.htm">Figure 1</a>, for the strings <B>banana</B>, <B>banner</B>, <B>banter</B>, <B>banned</B>, <B>ban</B>, <B>adder</B>, <B>red</B>, and <B>tab</B>. Encountering the character <B>b</B> in initial state <B>0</B>, you would see from the FSM that the current state should be set to <B>1</B>. If an <B>a</B> followed, you would set the current state to <B>2</B>. If an <B>n</B> now followed, the state would be set to <B>-1</B>, reporting a complete match. If instead any other letter followed the <B>a</B>, the state would be reset to <B>0</B>, and searching would resume from the next character after the start of the false trail &#151; the character <B>a</B>. Since the FSM reports that the value for this state (<B>0</B>) and character (<B>a</B>) is <B>10</B>, the start of another substring, the state is set to <B>10</B> and searching simply continues onwards. If any letter other than <B>d</B> follows, the state is once again reset to <B>0</B>, and the value for that letter and state <B>0</B> is looked up.</p>
<p>Although the FSM is an algorithmically compact representation of the saved substrings, it is difficult to visualize its contents and the searching method using it. It is more helpful to visualize it using <a href="fig1.htm">Figure 1</a>, which is in fact algorithmically identical. Using <a href="fig1.htm">Figure 1</a>, you can follow the path of any substring and set the current state based on the next character. Any character found that is not connected with an arrow from the given state reverts the state back to the starting state of <B>0</B>.</p>

<H3><FONT COLOR="#000080">Pseudocode for Searching</FONT></H3>
<pre>
for each character in the string
{
  Save the value of the current state
  (called the previous state)

  If the current state is 0, save a pointer to
  this character (called starting character),
  since this may be the start of a full match.

  The value in the FSM for the current state and
  character becomes the new current state

  If the new current state is -1, a full match
  has been found, so return the pointer to the
  starting character

  If the new state is 0, while the previous state
  was non-zero, we have followed a false lead
  So, backtrack the current search position to the
  character following the starting character,
  and reset the current state to 0 

  Progress to the next character in the string
}
</pre>

<p>If the loop exits with no matches found, no substrings exist within the string.</p>
<p>Sample code to search a string (<B>pStr</B>) of length <B>strlength</B> is shown in <a href="list2.htm">Listing 2</a> (<B>SearchingFSM.cpp</B>). As with <a href="list1.htm">Listing 1</a>, this code expects all the substring characters to have positive ASCII values.</p>
<p>The backtracking done after a false lead has been followed is an obvious inefficiency. However, the speed for several substring searches was so fast with this algorithm that no need was found to optimize it further.</p>

<H3><FONT COLOR="#000080">Extensions</FONT></H3>

<p>Some simple amendments can be made to the algorithm presented here.</p>
<p>If the identity of the found substring is required, the FSM could use a negative index to signify the end of a substring, rather than a simple <B>-1</B> value. The index could simply be the count of substrings entered so that the first one entered would have value <B>-1</B>, the second <B>-2</B>, and so on. In this manner, a negative value encountered in the FSM would signify both termination of a substring and the identity of the substring found.</p>
<p>If all substring matches are required, rather than using a <B>-1</B> to denote string termination, a high-order bit could be set denoting termination, with the rest of the integer value storing the next state to move to if longer strings exist.</p>
<p>The backtracking done after a false lead has been followed could be further optimized. Such optimization lies at the core of the Boyer-Moore algorithm <a href="#1">[1]</a>. As an example, consider if the string contains the characters <B>ADDED</B>. Using the FSM described above, the algorithm fails on the final <B>D</B> and backtracks to the first <B>D</B>. However, there is no substring starting with <B>D</B> or <B>E</B>, so no backtracking should be done at all. Instead the character following <B>ADDED</B> should be investigated. In order to implement this &#147;clever backtracking,&#148; you would need to post-process the FSM, adding to each non-zero entry a value denoting how many characters to skip when backtracking. This would require the FSM to be a matrix of structures rather than simple integers and the development of an algorithm for post-processing the FSM.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>The FSM is a powerful tool and is ideally suited to searching for multiple substrings within a string. The algorithm presented is robust and efficient and joins the growing number of published string searching algorithms, solving a problem not previously addressed in the open literature.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p><a name="1"></a>[1]  An excellent summary of many string searching algorithms, as well as code to implement them, can be found at &lt;www.dir.univ-rouen.fr/~charras/string/string.html&gt;.</p>
<p><a name="2"></a>[2]  B.W.Kernighan and B. Pike. <I>The Practice of Programming</I> (Addison-Wesley, 1999).</p>
<p><a name="3"></a>[3]  FSMs are discussed in numerous texts on algorithms. For example, see R. Sedgewick. <I>Algorithms in C</I> (Addison-Wesley, 2001).</p>

<p><i><B>Moishe Halibard</B> is a Windows Internals programmer at Alchemedia Technologies, Inc. in Beit Shemesh, Israel. He can be reached at <B>mhalibard@alchemedia.com</B>.</i></p>
<p><i><B>Moshe Rubin</B> heads up the Windows Internals group at Alchemedia Technologies, Inc. in Beit Shemesh, Israel. He can be reached at <B>mrubin@alchemedia.com</B>.</i></p>

<h4><a href="../../../source/2002/jun02/halibard.zip"></a></h4>
</blockquote></body></html>
