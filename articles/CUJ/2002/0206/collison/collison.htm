<HTML>   
     <HEAD>
<TITLE>June 2002/Retargeting the GNU C Compiler</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Retargeting the GNU C Compiler</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Collison</FONT></H3>

<BLOCKQUOTE>
<p>An inside look on how to deploy the GNU C compiler to your platform of choice.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The GCC (GNU C compiler) is a highly optimizing and retargetable compiler from the FSF (Free Software Foundation). Richard Stallman originally developed the compiler with the source code made freely available via the FSF&#146;s copyleft agreement <a href="#1">[1]</a>.</p>
<p>Today GCC can generate code for approximately 41 different microprocessors. The ability to generate code for many different processor architectures is known as &#147;retargetability.&#148; GCC also supports different languages including C, C++, Java, Ada, Pascal, and Fortran.</p>

<H3><FONT COLOR="#000080">Compiler Overview</FONT></H3>

<p>As shown in <a href="fig1.htm">Figure 1</a>, a compiler is typically divided into two parts, a front end and a back end. The front end is responsible for reading and understanding the input language, issuing diagnostic messages, and translating the program into an IL (intermediate language) suitable for the back end. The GCC front end converts the input language into a tree-based IL. The GCC front end eventually converts the tree-based IL into a more machine-specific IL known as RTL (register transfer language). A compiler&#146;s back end is typically responsible for code optimizations and code generation for a particular microprocessor. The GCC back end includes most state-of-the-art optimizations including instruction scheduling, various loop optimizations, and common sub-expression elimination. The GNU compiler&#146;s optimizations work directly on the RTL with machine-specific details provided by the machine description files. This means that once a retarget to a new processor is complete all of GCC&#146;s state-of-the-art optimizations already work on the new processor.</p>

<H3><FONT COLOR="#000080">The RTL IL</FONT></H3>

<p>The GCC back end performs all of its operations on the RTL IL. RTL is a low-level language that models the registers, memory, and instructions of a microprocessor. RTL is written and modeled in a &#147;lisp-like&#148; form, which affords it tremendous power and flexibility. Unlike other ILs, such as tuples, RTL imposes no arbitrary limits on constructs such as the number of operands except where necessary to enforce correctness.</p>

<H3><FONT COLOR="#000080">Machine Modes</FONT></H3>

<p>The first important idea in RTL is a machine mode. A machine mode represents the data type of an object such as a register or memory. It is a machine-independent way of describing a machine-specific constraint, namely the size of an object.</p>
<p><a href="tab1.htm">Table 1</a> illustrates some commonly used machine modes in GCC and their machine-independent meaning.</p>
<p>Based on information in the target machine macro file (described later), GCC maps the machine mode to specific bit sizes on the target machine. For example, on an 8-bit byte machine like the 386, <B>QImode</B> would be equal to 8 bits, <B>HImode</B> would be 16 bits, and <B>SImode</B> would be 32 bits. However, on a port that I completed to a 16-bit DSP processor, <B>QImode</B> was equal to 16 bits, <B>HImode</B> was equal to 32 bits, and <B>SImode</B> was equal to 64 bits. Based on this description, obviously the only information you can infer about modes is their sizes relative to each other. For example, you can always assume that <B>HImode</B> is twice the size of <B>QImode</B>.</p>

<H3><FONT COLOR="#000080">RTL Object Types</FONT></H3>

<p>RTL has five types of objects: expressions, integers, wide integers, strings, and vectors. For our purposes, expressions and vectors are the most important and commonly used. RTL expressions represent hardware concepts like registers, memory, and instruction operations. They are distinguished by a predefined expression code, such as a <B>plus</B> operation. By examining the expression code, it is possible to determine how many operands an expression has and what kind of operands they are (i.e., their type, such as integer or floating point). Expressions are written as parentheses containing the name of the expression type, its flags and machine mode if any, and then the operands of the expression (separated by spaces). Below is an example of an arithmetic expression in RTL:</p>

<pre>
(plus:SI (reg:SI 2)
                (const_int 10))
</pre>

<p>This expression is interpreted as follows: add register <B>2</B> with machine mode <B>SImode</B> and the integer constant <B>10</B>. The addition is carried out in <B>SImode</B>. Note that integer constants have no machine mode and that the expression does not specify a destination for the result of the addition. Finally, note the similarity to lisp code and the heavy emphasis on parenthesis.</p>
<p>A vector is an arbitrary number of expressions. The number of expressions is embedded within the vector itself. The vector is a very powerful way of expressing parallelism among a set of expressions or more realistically instructions, as you will see later.</p>

<H4><FONT COLOR="#000080">Constant Type Expressions</FONT></H4>

<p><a href="tab2.htm">Table 2</a> shows some of the commonly used constant RTL expression types.</p>

<H4><FONT COLOR="#000080">Register and Memory Types</FONT></H4>

<p><a href="tab3.htm">Table 3</a> shows some of the commonly used register and memory RTL types.</p>

<H4><FONT COLOR="#000080">Arithmetic RTL Expression Types</FONT></H4>

<p><a href="tab4.htm">Table 4</a> shows some commonly used arithmetic expressions.</p>

<H3><FONT COLOR="#000080">The Retargeting Process</FONT></H3>

<p>The first step in the retargeting process is to understand the architecture of the target microprocessor. Key items to understand are the pipeline model of the processor (e.g., are there hazards or stalls?), the register file (e.g., is it orthogonal or are there special purpose registers?), and the instruction set.</p>
<p>The second step in the retargeting process is to define the ABI (application binary interface). The ABI defines how arguments are passed to functions, the layout of the stack frame, and register usage conventions.</p>
<p>The third and final step in the retargeting process is to define three key files that will describe the microprocessor and its operating environment to GCC. These three files are the target machine macro file (<B>machine.h</B>), the machine description file (<B>machine.md</B>), and a third file containing helper functions for the previous two files (<B>machine.c</B>) <a href="#2">[2]</a>.</p>
<p>The manual, <I>Using and Porting the GNU Compiler Collection (GCC)</I> <a href="#3">[3]</a>, is the bible on retargeting a GCC port and should be read and understood before beginning a port. Additionally, if possible, finding and learning from other GCC ports that have a processor with a similar architecture is very helpful.</p>

<H3><FONT COLOR="#000080">The Target Description Macro File</FONT></H3>

<p>The target description macro file (<B>machine.h</B>) is used to parameterize portions of GCC that would otherwise have to be modified for each target processor. My typical approach to writing the target description macro file is to develop it by section as outlined in <I>Using and Porting the GNU Compiler Collection (GCC)</I> <a href="#3">[3]</a>. There are literally hundreds of macros documented in the manual, some of which need to be defined, others that do not, and some that have reasonable defaults. The best advice I can give with regard to these macros is to consult other GCC ports to see which macros they have defined; the most common macros are defined for almost every port. Below I will outline some of the more important macros you will need to define. Note that in the target description macro file these are C preprocessor macros defined with <B>#define</B>.</p>

<H3><FONT COLOR="#000080">Storage Layout</FONT></H3>

<UL><LI>   <B>BYTES_BIG_ENDIAN</B> &#151; On a big endian processor, this variable would be defined as <B>1</B> and as <B>0</B> on a little endian processor.</LI>
<LI>   <B>BITS_PER_UNIT</B> &#151; On an 8-bit byte machine, such as the x86 family, this would be defined as <B>8</B>. For a word machine, such as the DSP1600 port I completed, this would be the size of a word on the target machine. In the case of the DSP1600 family, this has the value <B>16</B>. As you can see, GCC is not locked into viewing a processor as an 8-bit byte machine as is commonly assumed by many compilers I have encountered.</LI>
<LI>   <B>BITS_PER_WORD</B> &#151; This macro is the number of bits in a word. For the x86 family, this would equal the value <B>32</B>. Note that by using the formula <B>BITS_PER_WORD</B>/<B>BITS_PER_UNIT</B>, GCC is able to determine the number of bytes in a word. Note, a byte to GCC is <B>BITS_PER_UNIT</B>. For the DSP1600 family, this has the value <B>16</B>, which means that there is one byte (16 bits) in a word (16 bits).</LI>
<LI>   <B>POINTER_SIZE</B> &#151; This macro is the number of bits in a pointer. This must be a multiple of <B>BITS_PER_UNIT</B>. For the x86 processor family, this has the value <B>32</B>.</LI></UL>

<H3><FONT COLOR="#000080">Layout of Source Language Data Types</FONT></H3>

<UL><LI>   <B>INT_TYPE_SIZE</B> &#151; This is a C expression for the number of bits for the type <B>int</B>. Default is <B>BITS_PER_WORD</B>.</LI>
<LI>   <B>FLOAT_TYPE_SIZE</B> &#151; This is a C expression for the number of bits for the type <B>float</B>. Default is <B>BITS_PER_WORD</B>.</LI></UL>

<H3><FONT COLOR="#000080">Basic Characteristics of Registers</FONT></H3>

<UL><LI>   <B>FIRST_PSEUDO_REGISTER</B> &#151; The number of hardware registers known to the compiler. These registers receive number <B>0</B> thru <B>(FIRST_PSEUDO_REGISTER - 1)</B>. The compiler creates pseudo registers for early optimization passes. Register allocation then binds these pseudo registers to actual hardware registers. Let&#146;s say a hypothetical new processor contained eight general purposes named <B>r0</B>-<B>r7</B>. In this case, you would define <B>FIRST_PSEUDO_REGISTER</B> as <B>8</B>.</LI>
<LI>   <B>FIXED_REGISTERS</B> &#151; Used to initialize an array that indicates by the value <B>1</B> that registers are unavailable to the register allocator. The value <B>0</B> indicates that the register is available for allocation. The stack pointer is a typical fixed register.</LI>
<LI>   <B>CALL_USED_REGISTERS</B> &#151; Used to initialize an array like <B>FIXED_REGISTERS</B>, but has the value <B>1</B> for any register that is overwritten by a function call as well as for fixed registers. The value <B>0</B> indicates to GCC that the register must be saved and restored in the prologue and epilogue code of a function.</LI></UL>

<H3><FONT COLOR="#000080">Register Class Information</FONT></H3>

<p>The register class macros in this section are very important in determining the quality of register allocation that GCC is able to perform. There is one very important variable in this section defined as:</p>

<pre>
enum reg_class { ..... }
</pre>

<p>where the various register classes are specified as C enumerations.</p>
<p>Quoting from the GCC manual:</p>

<UL><p>On many machines, the numbered registers are not all equivalent. For example, certain registers may not be allowed for indexed addressing; certain registers may not be allowed in some instructions. These machine restrictions are described to the compiler using register classes. You define a number of register classes, giving each one a name and saying which of the registers belong to it. Then you can specify register classes that are allowed as operands to particular instruction patterns.</p></UL>

<p>There are several register classes that must always be defined: the set of all registers called <B>ALL_REGS</B>, the set of registers containing no registers called <B>NO_REGS</B>, and a set of registers the user must define as <B>GENERAL_REGS</B>. Most GCC ports define <B>GENERAL_REGS</B> and <B>ALL_REGS</B> to be equivalent.</p>
<p>You should also define the union of two register classes whenever an instruction may need them. For example, if you define one class of registers called address registers and another class of registers called data registers, more than likely you want a class of registers that represents their union. The reason the union of two registers' classes should be defined is to give the register allocator flexibility in choosing registers and also for better register allocation. Let me make all this practical with an example. Say you have a machine that has eight data registers (<B>d0</B>-<B>d7</B>), address registers (<B>a0</B>-<B>a7</B>), and floating-point registers. In this case, register classes for data, address, and floating-point registers should be defined. A class that represents the union of data and address registers should also be defined. Finally you may want a class that represents the union of the data and floating-point registers if the data registers can contain floating-point values temporarily. This is how you would represent this information to GCC:</p>

<pre>
enum reg_class {NO_REGS, DATA_REGS,
  ADDR_REGS, DATA_ADDR_REGS, FP_REGS,
  DATA_FP_REGS,  ALL_REGS}
</pre>

<p>You may be wondering how you connect register numbers to the above register classes? To understand the connection, assume that the data registers are numbered <B>0</B>-<B>7</B>, the address registers are numbered <B>8</B>-<B>15</B>, and the floating-point registers are numbered <B>16</B>-<B>23</B>. You then define another macro in this section call <B>REG_CLASS_CONTENTS</B>, which defines the bit contents of each register class:</p>

<pre>
#define REG_CLASS_CONTENTS  {0x00000000,
  0x000000ff, 0x0000ff00, 0x0000ffff,
  0x00ff0000, 0x00ff00ff,0x00ffffff}
</pre>

<p>The second initializer in the table indicates that the data registers <B>d0</B>-<B>d7</B>, with values <B>0</B>-<B>7</B>, are represented as the value <B>0x000000ff</B>. The other values in the table are derived accordingly. The important point to note about this table is that the register allocator uses it when it must allocate a register from a particular class. If the register allocator needs to allocate a floating-point register, it would use the enumeration constant <B>FP_REG</B> as an index into the array initialized from <B>REG_CLASS_CONTENTS</B>. It would get the value <B>0x00ff0000</B>, which represents the set of all floating-point registers. Note, there is a one-to-one correlation between the enumeration <B>enum reg_class</B> and the macro <B>REG_CLASS_CONTENTS</B>.</p>
<p>The final macro I will cover maps the register class names to letters of the alphabet. These letters are shortcuts for the register class names and are used in the machine description file. For example the 68000 GCC port uses the letter <B>"a"</B> to represent address registers, the letter <B>"d"</B> to represent data registers, and the letter <B>"f"</B> to represent floating-point registers. This would be represented as follows:</p>

<pre>
#define REG_CLASS_FROM_LETTER(c)
  ((c) == 'a' ? ADDR_REGS :
   (c) == 'd' ? DATA_REGS :
   (c) == 'f' ? FP_REG : NO_REGS)
</pre>

<p>Now when the compiler sees the letter <B>"a"</B> in the machine description file, as I will describe later, it will know that an address register must be allocated using the procedure I described above.</p>

<H3><FONT COLOR="#000080">Machine Description File</FONT></H3>

<p>An overview of GCC&#146;s use of the machine description file follows. Quoting from <I>Using and Compiling the GNU Compiler Collection (GCC)</I>, there are three main conversions that happen in the compiler:</p>

<OL><LI>The front end reads the source code and builds a parse tree.</LI>
<LI>The parse tree is used to generate an RTL instruction list based on named instruction patterns.</LI>
<LI>The instruction list is matched against the RTL templates to produce assembler code.</LI></OL>

<p>Steps 2 and 3 use the machine description file heavily.</p>
<p>When GCC must generate code for an expression in the source language, it looks for a predefined named pattern in the machine description file. This predefined pattern then generates the appropriate RTL IL statements. These predefined patterns are defined using either a <B>define_insn</B> or <B>define_expand</B> in the machine description file. So, for example, if GCC needs to generate RTL code for a 32-bit on an x86 machine, GCC will look for a named pattern in the machine description file called <B>addsi3</B>. It is called <B>addsi3</B> because it is an addition instruction, using machine mode <B>SImode</B>, and it takes three operands. Remember that <B>SImode</B> is 32-bits on the x86, but it may not be the case on another processor. GCC has a predefined set of patterns, such as <B>addsi3</B>, which it uses to generate code for source language constructs. These patterns are called &#147;standard names&#148; in the GCC manual. One note about nomenclature, GCC uses the abbreviation <B>insn</B> to refer to an RTL instruction.</p>

<H3><FONT COLOR="#000080">Defining Machine Instructions</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows how to define a 32-bit add instruction for a hypothetical processor. There is a lot of information in this pattern, so I will explain it one step at a time. First, the front end uses this pattern when it wants to generate code for a 32-bit (<B>SImode</B> in this case) addition. A function call <B>gen_addsi3</B> will be created when GCC is built and will be called by the front end to generate the appropriate RTL. In this case, the RTL generated would look like:</p>

<pre>
(set (reg:SI 150) (plus:SI (reg:SI 151) (reg:SI 152)))
</pre>

<p>The numbers <B>150</B>-<B>152</B> in the register RTL expression are pseudo registers whose numbers I chose at random. Note how <B>(reg:150)</B> corresponds to operand <B>0</B> and so forth for the other operands.</p>
<p>Second, this pattern is used for matching the RTL generated by the front end or other phases of the compiler to patterns in the machine description file. This is important: any RTL <B>insn</B> that is generated by any phase of the compiler must eventually match a legal RTL template in the machine description file. The way matching works in this case is that GCC would look at the entire RTL <B>insn</B> and make sure that every operand, operator, and machine mode match. So, in <a href="list1.htm">Listing 1</a>, GCC would first check that the entire operation was a set with a plus in <B>SImode</B>, with three registers all with mode <B>SImode</B>. GCC calls the <B>register_operand</B> construct a predicate. The predicate is a C function that checks the validity of the operator or operand passed to it. In this case, a predefined C function called <B>register_operand</B> will be called three times (once for each operand of the <B>plus</B> operation). Its job will be to insure that its operand is a RTL register. If it is an RTL register, the function returns <B>1</B>. If the test fails, it will return zero. Additionally, by the time register allocation is finished, GCC will have substituted actual hardware registers for the pseudo register above. So the final RTL <B>insn</B> looks like:</p>

<pre>
(set (reg:SI 0) (plus:SI 
     (reg:SI 1) (reg:SI 2)))
</pre>

<p>The registers I have chosen correspond to registers <B>d0</B>-<B>d2</B> as discussed above. The one-letter characters following the predicate are called the constraint. The constraint is used to &#147;squeeze&#148; the already legal predicate (in this case a register) into a particular hardware resource (in this case a specific set of registers). The constraint <B>r</B> says to use any general-purpose register. This corresponds to the register class <B>GENERAL_REGS</B> as discussed above. From this set of registers, GCC is free to pick any register it chooses.</p>
<p>The final component of this template is the assembly language output string. This string is used once the pattern has been matched and the operands substituted as shown in the code above. The assembly language pattern says to output an instruction substituting the operands into the output string. So in the example above, you would end up with the assembly language instruction <B>"add d0, d1, d2"</B>. The construct <B>%n</B> says to substitute the actual operand from the template into the output string.</p>
<p>The machine description file should contain template patterns for all the common operations your microprocessor supports, including addition, subtraction, compare, jump, call, etc. In fact, the more patterns you add to the machine description file, the better the final code GCC can generate. This is because, if a pattern that GCC wishes to generate code for is missing, the compiler assumes the instruction does not exist on the processor. The compiler will then generate a function call to a predefined name. This is not what you want if a native instruction exists on your microprocessor. This default behavior is fine for operations like floating point if your chip only supports fixed-point instructions. As a final note, if GCC has to create function calls for operations that do not exist, it is up to you as the compiler developer to provide the missing functionality as a library routine. The official GCC comes with a set of common missing functionality, such as IEEE floating-point math.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The GCC is a highly retargetable compiler that implements state-of-the art optimizations. By describing the architecture and instruction set of your target processor, a compiler can be developed in a relatively short period of time.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  The GNU General Public License, &lt;www.fsf.org/licenses/licenses.html&gt;.</p>
<p><a name="2"></a>[2]  The source code for GCC may be downloaded from &lt;http://gcc.gnu.org&gt;.</p>
<p><a name="3"></a>[3]  <I>Using and Compiling the GNU Compiler Collection (GCC)</I>, &lt;http://gcc.gnu.org/onlinedocs)&gt;.</p>

<p><i><B>Michael Collison</B> has been involved in compiler development since 1988. He has developed several C compilers based on the GNU C compiler for several processor architectures. He is official GNU C compiler developer and maintainer for the Lucent DSP1600 DSP chip. This port can be found in the official GNU C compiler distribution.</i></p>

<h4><a href="../../../source/2002/jun02/collison.zip"></a></h4>
</blockquote></body></html>
