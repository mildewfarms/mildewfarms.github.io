<HTML>   
     <HEAD>
<TITLE>June 2002/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Running Circles Round You, Logically</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Remember that old bitwise trick to swap two integers without a temporary? (Of course you do &#151; it's Common Knowledge). With a little imagination you can use that technique to craft iterators that don't know which way to go.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>It&#146;s hard times in small-town New England. Town meeting&#146;s coming up, state and local tax revenues are way down, and things don&#146;t look good for the school budget. High-school programming courses are being cut. What&#146;s a concerned C++ hacker to do? Pitch in and teach, of course! Things have changed a lot since my day, and the College Board now offers an advanced placement examination (actually two) for computer science. Amazing.</p>
<p>However, amazement gives way to, well, amazement on close reading of the description of the subset of C++ used in the examination (which is, perforce, the subset that will be taught). In the section that describes that portion of C++ not included in the subset, we learn that the &#147;operators: comma, <B>?:</B>, bitwise, <B>sizeof</B>&#148; are &#147;not essential&#148; <a href="#1">[1]</a>. Not essential! Just to give you an idea how the youth of America is being corrupted, inheritance is not discussed either. Or reference variables. Or <B>typedef</B>. Or implicit conversions. But the comment about bitwise operators stings.</p>
<p>In this installment of &#147;Common Knowledge,&#148; I hope to strike a blow for bitwise operators. I intend to show that, far from being outmoded antiquities, they can be alloyed with the most recent enhancements of C++ to the benefit of both. We&#146;re going to meld the STL with the bitwise exclusive-or operator. And like it.</p>

<H3><FONT COLOR="#000080">Illogical Irritants</FONT></H3>

<p>Isn&#146;t it irritating to see code like this?</p>

<pre>
bool r;
if( a &lt; b )
  r = true;
else
  r = false;
</pre>

<p>Instead of this?</p>

<pre>
bool r = a&lt;b;
</pre>

<p>Do you have to count to eight when presented with the following?</p>

<pre>
int ctr = 0;
for( int i = 0; i &lt; 8; ++i )
  if( bits &amp; 1&lt;&lt;(8+i) )
    if( ctr++ ) {
      cerr &lt;&lt; "Too many options 
           &lt;&lt; selected";
      break;
    }
</pre>

<p>Instead of this?</p>

<pre>
if( bits&amp;0xFF00 &amp; (bits&amp;0xFF00)-1 )
  cerr &lt;&lt; "Too many options selected";
</pre>

<p>What ever happened to Boolean logic? Why, when I was a boy, machines had only two registers, and believe-you-me, we were happy to have them! And memory was scarce, but we got by because we knew the virtue of thrift and had low expectations. And not only that, we had to walk miles to the computer center through snow that was...oh, excuse me.</p>
<p>In any case, we employed a number of simple coding tricks that could be used profitably in these constrained circumstances. One of my favorites is the &#147;exclusive-or trick&#148; for swapping values without a temporary.</p>

<pre>
void swap( int &amp;a, int &amp;b ) {
  a ^= b;
  b ^= a;
  a ^= b;
}</pre>

<p>A moment&#146;s reflection shows that the values <B>a^b</B> and <B>b</B> can be used to derive <B>a</B>, and that <B>a^b</B> and <B>a</B> can be used to derive <B>b</B>. And of course, inasmuch as pointers to data are really just integers with an attitude, we have the following:</p>

<pre>
template &lt;typename T&gt;
void swap( T *&amp;a, T *&amp;b ) {
  typedef ptrdiff_t I;
  (I &amp;)a ^= (I &amp;)b;
  (I &amp;)b ^= (I &amp;)a;
  (I &amp;)a ^= (I &amp;)b;
}
</pre>

<p>At an intermediate stage in the swap, we have a value that is essentially a two-way pointer that is just waiting to be decoded <a href="#2">[2]</a>. Let&#146;s use this observation in the design of an STL-like container with a charmingly ambivalent attitude toward order and direction.</p>

<H3><FONT COLOR="#000080">A List, Naturally</FONT></H3>

<p>Our list container will be composed of the nodes that form the list, a list handle, and iterators over the list.</p>

<pre>
template &lt;typename T&gt; class ListEl;
template &lt;typename T&gt; class List;
template &lt;typename T&gt; class Iter;
</pre>

<p>The list nodes contain a single pointer that is the encoding of both the previous and next elements in the sequence of nodes.</p>

<pre>
struct ListElBase {
  ListElBase () : ptr(0) {}
  ListElBase *ptr;
  typedef std::ptrdiff_t Bits;
};

template &lt;typename T&gt;
class ListEl : public ListElBase {
  ListEl( const T &amp;v ) : el( v ) {}
  T el;
  friend class List&lt;T&gt;;
  friend class Iter&lt;T&gt;;
};
</pre>

<p>The two-way pointer can be decoded with the address of the previous node to produce the address of the following node, or with the address of the following node to produce the previous node. That is, since the value of the node&#146;s pointer is <B>previous^next</B>, <B>previous^next^previous == next</B>, and <B>previous^next^next == previous</B>.</p>
<p>The list container itself is not very impressive, and we&#146;ll keep things to a manageable minimum here for reasons of space <a href="#3">[3]</a>.</p>

<pre>
template &lt;typename T&gt;
class List {
  public:
  typedef Iter&lt;T&gt; iterator;
  typedef T value_type;
  typedef std::ptrdiff_t difference_type;
  typedef std::size_t size_type;
  //...
  List();
  List( const List &amp; );
  List &amp;operator =( const List &amp; );
  bool empty() const;
  size_type size() const;
  size_type max_size() const;
  void swap( List &amp; );
  void push_back( const T &amp;v );
  void push_front( const T &amp;v );
  void pop_front();
  void pop_back();
  iterator begin();
  iterator end();
  void reverse();
  //...
};
</pre>

<p>Most list implementations employ either a dummy node to indicate the start and end of the list, or a pair of pointers to the first and last elements on the list. Here, we&#146;ll use both.</p>

<pre>
template &lt;class T&gt;
class List {
  //...
private:
    typedef ListElBase::Bits Bits;
    typedef ListEl&lt;T&gt; *Ptr;
    ListElBase clasp; // dummy node
    ListEl&lt;T&gt; *hd, *tl;
    void push( const T &amp;value, Ptr &amp;head, Ptr &amp;tail );
    void pop( Ptr &amp;head, Ptr &amp;tail );
  friend class Iter&lt;T&gt;;
};
</pre>

<p>The implementation is a circular list; that is, the next element after the last element is the first element again, and vice versa. The circular list is rooted in a dummy first/last node of type <B>ListElBase</B>. The dummy node is of the base class type rather than <B>ListEl&lt;T&gt;</B> in order to avoid the necessity of instantiating an unused member of type <B>T</B> in the dummy node. Not only would this be wasteful, it would also preclude our instantiating a list with element types that did not support default construction. The curious <B>clasp</B> identifier comes from my visualizing this structure as a bead necklace, which is held together by a clasp that differs in structure from the beads. The <B>hd</B> and <B>tl</B> pointers simply refer to the first and last elements of the list, respectively, or to <B>clasp</B> if there are no beads in the necklace.</p>

<H3><FONT COLOR="#000080">You Want Me to Push <I>Where</I>?</FONT></H3>

<p>The <B>push</B> and <B>pop</B> operations are not too difficult, once you get the hang of dereferencing a two-way pointer. Let&#146;s look first at pushing.</p>

<pre>
template &lt;typename T&gt;
void List&lt;T&gt;::push( const T &amp;v, Ptr &amp;hd, Ptr &amp;tl ) {
  ListEl&lt;T&gt; *newEl = new ListEl&lt;T&gt;( v );
  newEl-&gt;ptr = Ptr( Bits(&amp;clasp)^Bits(hd) );
  hd-&gt;ptr = Ptr( Bits(hd-&gt;ptr)^Bits(newEl)^Bits(&amp;clasp) );
  clasp.ptr = Ptr( Bits(clasp.ptr)^Bits(newEl)^Bits(hd) );
  if( empty() )
    tl = newEl;
  hd = newEl;
}
</pre>

<p>The new list element is inserted between the clasp and the head of the list, so its pointer will refer simultaneously to these nodes (<B>&amp;clasp^hd</B>). The pointers in the clasp and (former) head node are fixed up to take the new node into account. For example, we reset the value of the (former) head node&#146;s pointer from referring to clasp and the node following the head node (<B>&amp;clasp^&amp;next</B>) to referring to the new head node and <B>next</B> (<B>&amp;clasp^&amp;next^newel^&amp;clasp == newEl^&amp;next</B>).</p>
<p>Oops! I guess we should have called that operation <B>push_front</B>, to be conformant with other STL-like containers. That&#146;s easily fixed, and while we&#146;re at it, we&#146;ll implement <B>push_back</B>.</p>

<pre>
template &lt;typename T&gt;
void List&lt;T&gt;::push_front( const T &amp;v )
  { push( v, hd, tl ); }

template &lt;typename T&gt;
void List&lt;T&gt;::push_back( const T &amp;v )
  { push( v, tl, hd ); }
</pre>

<p>The use of the two-way pointers adds a pleasing note of symmetry to the circular list data structure. It doesn&#146;t really matter which is the head or the tail of the list, since traversal can proceed in either direction. This allows us to change a <B>push_front</B> into a <B>push_back</B> simply by labeling the head as the tail and vice versa. Implementation of the <B>pop</B> operations is similar.</p>

<pre>
template &lt;typename T&gt;
void List&lt;T&gt;::pop( Ptr &amp;hd, Ptr &amp;tl ) {
  Ptr n = Ptr( Bits(hd-&gt;ptr)^Bits(&amp;clasp) );
  clasp.ptr = Ptr( Bits(tl)^Bits(n) );
  n-&gt;ptr = Ptr( Bits(n-&gt;ptr)^Bits(hd)^Bits(&amp;clasp) );
  if( tl == hd )
    tl = n;
  delete hd;
  hd = n;
}

template &lt;class T&gt;
void List&lt;T&gt;::pop_front()
  { pop( hd, tl ); }

template &lt;class T&gt;
void List&lt;T&gt;::pop_back()
  { pop( tl, hd ); }
</pre>

<H3><FONT COLOR="#000080">Fickle Iterators</FONT></H3>

<p>We could use the two-way pointer implementation of the list nodes to produce a bidirectional list that uses half the pointer space of a more traditional implementation. Boring. Let&#146;s instead give our list container a forward iterator. A weird one.</p>

<pre>
template &lt;class T&gt;
class Iter
  : public std::iterator&lt;std::forward_iterator_tag,
    T, std::ptrdiff_t&gt; {
  public:
  Iter( ListEl&lt;T&gt; *start, ListEl&lt;T&gt; *previous );
  Iter() {}
  Iter &amp;operator ++();
  Iter operator ++(int);
  T &amp;operator *();
  T *operator -&gt;();
  bool operator ==( const Iter &amp;that ) const;
  bool operator !=( const Iter &amp;that ) const;
  void reverse();
  private:
    typedef ListEl&lt;T&gt;::Bits Bits;
    typedef List&lt;T&gt;::Ptr Ptr;
    ListEl&lt;T&gt; *prev, *curr;
};
</pre>

<p>The iterator is implemented with a (plain old) pointer to the current element and a pointer to the previous element. That second address is necessary to decode the two-way pointer in the list element to which the &#147;current&#148; pointer refers <a href="#4">[4]</a>.</p>

<pre>
template &lt;typename T&gt;
Iter&lt;T&gt; &amp;Iter&lt;T&gt;::operator ++() {
  ListEl&lt;T&gt; *tmp = curr;
  curr = (ListEl&lt;T&gt; *)(Bits(curr-&gt;ptr) ^ Bits(prev));
  prev = tmp;
  return *this;
}
</pre>

<p>Dereference and equality operations are concerned only with the current node.</p>

<pre>
template &lt;typename T&gt;
T *Iter&lt;T&gt;::operator -&gt;()
  { return &amp;curr-&gt;el; }

template &lt;typename T&gt;
bool Iter&lt;T&gt;::operator ==( const Iter &amp;that ) const
  { return curr == that.curr; }
</pre>

<p>What happens if we change the previous pointer in an iterator to refer to the node following the current node?</p>

<pre>
template &lt;typename T&gt;
void Iter&lt;T&gt;::reverse()
  { prev = Ptr(Bits(curr-&gt;ptr) ^ Bits(prev)); }
</pre>

<p>That&#146;s right, the iterator will now move in the other direction. Note that it is not a bidirectional iterator, since it cannot &#147;back up&#148; with a <B>--</B>operator. It can still move only in a forward direction, but it can change its mind with respect to what that direction is. This is the major reason that the iterator equality operators do not examine the <B>prev</B> pointer. If we compare two iterators into the same sequence, we are probably interested only in whether they refer to the same list element, and not with what direction they happen to be moving.</p>
<p>This brings up a rather unusual property of the end value of a list sequence produced by the <B>List</B> container. There are two of them, and which one applies depends on the direction of motion. (This is rather like the low-level values +0 and -0, found on some computer architectures, which compare equal but are produced by different operations.)</p>

<pre>
template &lt;typename T&gt;
Iter&lt;T&gt; List&lt;T&gt;::begin()
  { return Iter&lt;T&gt;(hd,Ptr(&amp;clasp)); }

template &lt;typename T&gt;
Iter&lt;T&gt; List&lt;T&gt;::end()
  { return Iter&lt;T&gt;( Ptr(&amp;clasp), tl );
</pre>

<p>The list returns the end value that specifies not only that it is an end value, but that the previous position is the last element, or tail, of the list. Reversing the iterator returned by <B>List::end</B> will traverse the list &#147;backwards.&#148; The other reasonable value for <B>List::end</B> is <B>Iter&lt;T&gt;(Ptr(&amp;clasp), hd)</B>, which compares equal to the other value of <B>List::end</B>, but when reversed will traverse the list elements in the &#147;forward&#148; direction.</p>
<p>It&#146;s fairly difficult to take advantage of this flexibility within the current STL framework, which has the notions of forward and bidirectional iterators, but not fickle-forward iterators. But the capability can be useful. For example, the standard reverse algorithm requires a bidirectional sequence.</p>

<pre>
template &lt;typename Bi&gt;
void reverse( Bi first, Bi last ) {
  while( true )
    if( first == last || first == --last )
      return;
    else
      iter_swap( first++, last );
}
</pre>

<p>With a fickle-forward iterator, we can reverse a <B>List</B> with the same linear complexity.</p>

<pre>
template &lt;class FF&gt;
void ffReverse( FF first, FF last ) {
  last.reverse();
  while( true )
    if( first == last || first == ++last )
      return;
    else
      iter_swap( first++, last );
}
//...
List&lt;std::string&gt; names;
//...
ffReverse( names.begin(), names.end() );
</pre>

<H3><FONT COLOR="#000080">Symmetric Lists</FONT></H3>

<p>Of course, the standard STL <B>list</B> container has a linear reverse algorithm implemented as a member. So does <B>List</B>, but it&#146;s a constant-time algorithm.</p>

<pre>
names.reverse();
</pre>

<p>Because of the symmetric structure of the circular list implementation and &#151; more importantly &#151; the symmetric structure of the nodes&#146; two-way pointers, all <B>reverse</B> has to do is swap the head and tail of the list. A quick change to the implementation will handle that.</p>

<pre>
template &lt;class T&gt;
class List {
  //...
private:
    //...
    ListElBase clasp;
    ListEl&lt;T&gt; *&amp;hd, *&amp;tl, *p1, *p2;
};
</pre>

<p>The head and tail pointers now refer indirectly to pointers to the actual head and tail nodes of the list. This allows us to use the uniform names <B>hd</B> and <B>tl</B> for these concepts while swapping the actual head and tail nodes easily <a href="#5">[5]</a>. Reversing a <B>List</B>, as well as the direction of generated (but not existing) iterators, the type of end value returned by <B>List::end</B>, and the <B>List</B>&#146;s insertion and deletion operations is accomplished by swapping <B>p1</B> and <B>p2</B>.</p>

<pre>
template &lt;typename T&gt;
void List&lt;T&gt;::reverse() {
  // We should use std::swap, but...
  (Bits &amp;)p1 ^= (Bits &amp;)p2;
  (Bits &amp;)p2 ^= (Bits &amp;)p1;
  (Bits &amp;)p1 ^= (Bits &amp;)p2;
}
</pre>

<H3><FONT COLOR="#000080">It&#146;s Logical, after All</FONT></H3>
<p>This column often deals with what was formerly common knowledge among competent C++ programmers, but has not been communicated to newer C++ programmers. This poverty of history has consequences. Ignorance of the ban on cosmic hierarchies leads to dynamic casting, exceptions, and failure. Ignorance of problems associated with casting leads to code that cannot adapt itself automatically to remote maintenance. And ignorance of the simple and basic bitwise operators in C++ can lead to bloated and inefficient code. This ignorance also comes at a cost to the C++ apprentice, who does not experience the spare elegance of many of these techniques, and who will be a poorer programmer and person for the lack. It is certainly not the case that these established techniques should be used precisely as they were when they were first developed, but knowledge of both the new and the old allows them to be leveraged off each other in new, interesting, and useful ways. Such a combination can often put our newer techniques in a different light and lead to a deeper understanding of them.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  &lt;www.collegeboard.com/ap/students/compsci/subset04.html&gt;</p>
<p><a name="2"></a>[2]  Of course, we can encode any number of binary values in this way. However, the usefulness of the technique is diminished with multiple encoding, since <I>n-1</I> &#147;clear&#148; values (or partial encodings of the <I>n-1</I> clear values) are needed to decode an encoding of <I>n</I> values.</p>
<p><a name="3"></a>[3]  This is the reason for the waffle-words &#147;STL-like,&#148; rather than &#147;STL-compliant,&#148; in the description of the container. We could produce an STL-compliant list container without too much difficulty, but the implementation would be much too long for the space we have available.</p>
<p><a name="4"></a>[4]  STL wonks may well argue that this implies that our list is not a &#147;node-based&#148; container, since <B>remove</B> operations (like our <B>pop</B> operations) in all node-based containers affect only iterators to the removed elements. However, removal of the previous element will affect an iterator to the following element as well. Some picky readers might also point out that I could avoid the temporary in the implementation of <B>operator ++</B> through the use of <B>^</B>. As an exercise, these readers are invited to rewrite the entire implementation of <B>List</B>, substituting <B>^</B> and <B>^=</B> for assignment, and eliminating all temporaries.</p>
<p><a name="5"></a>[5]  We used reference data members here so as to avoid having to rewrite any of our earlier source code. However, the use of reference or constant data members is generally a bad idea (just try to write <B>List::operator =</B>), and a pointer to a pointer would have been a better choice.</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
