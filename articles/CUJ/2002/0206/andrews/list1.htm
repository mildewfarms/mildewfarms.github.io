<HTML><HEAD>
<TITLE>June 2002/Keyword Correction from a Dictionary/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Key parts of template implementation</A></h4>
<pre>
#include &lt;valarray&gt;
//#include &lt;algorithm&gt;
// this is supposed to contain max, but it didn't 
//on MS VC++ 6.0

using namespace std;

//=================================================================
// std::max is not in the library
template &lt; typename T_a, typename T_b &gt;  
that I have
T_a max ( const T_a&amp; a, const T_b&amp; b )
{
   return ( a &gt;= b ? a : static_cast&lt;T_a&gt; ( b ) );
};

class CThetaSizeError
{
};

template &lt; typename T &gt;
class CThetaMatch
{
public:

//=================================================================
   CThetaMatch ( )
   {
      m_lMaxCharacter = 256;
      m_wf.resize( m_lMaxCharacter, 1.0 );
      m_wr.resize( m_lMaxCharacter, 0.8 );
      m_wc.resize( m_lMaxCharacter, 0.0 );
      m_bDoCompensation = false;
   };

//=================================================================
   CThetaMatch ( const size_t lMaxCharacter )
   {
      m_lMaxCharacter = lMaxCharacter;
      m_wf.resize( m_lMaxCharacter, 1.0 );
      m_wr.resize( m_lMaxCharacter, 0.8 );
      m_wc.resize( m_lMaxCharacter, 0.0 );
      m_bDoCompensation = false;
   };

//=================================================================
   CThetaMatch ( const valarray&lt;T&gt; vForwardWeights,
      const valarray&lt;T&gt; vReverseWeights )
   {
      m_lMaxCharacter = vForwardWeights.size( );
      m_wf = vForwardWeights;
      m_wr = vReverseWeights;
      m_wc.resize( m_lMaxCharacter, 0.0 );
      m_bDoCompensation = false;
   };

//=================================================================
   double operator ( ) ( const T&amp; s, const T&amp; t ) const
   {
      if ( s == t )
         return ( 0.0 );
      else
         return ( theta( s, t ) );
   };

//=================================================================
   void SetThetaWeights ( const valarray&lt;double&gt;&amp; wf,
      const valarray&lt;double&gt;&amp; wr )
   {
      if ( wf.size( ) != m_lMaxCharacter ) throw CThetaSizeError( );
      if ( wr.size( ) != m_lMaxCharacter ) throw CThetaSizeError( );
      m_wf = wf;
      m_wr = wr;
   };

//=================================================================
   void SetThetaWeights ( const double&amp; wf, const double&amp; wr )
   {
      m_wf = wf;
      m_wr = wr;
   };

//=================================================================
   double theta (const T&amp; s, const T&amp; t ) const
   {
      const double dTemp = totalM( s ) + totalM( t );
      if ( dTemp == 0.0 )
         return ( 1.0 );
      else
         return ( 1.0-
            (( m(s, t, 1, m_wf ) + m( s, t, -1, m_wr ) ) / dTemp ));
   };

//=================================================================
private:
   valarray&lt;double&gt; m_wf ;
   valarray&lt;double&gt; m_wr ;
   valarray&lt;double&gt; m_wc ;
   size_t m_lMaxCharacter;
   bool m_bDoCompensation;

//=================================================================
   double totalM ( const T&amp; x ) const
   {
      size_t lParticularCharacter;
      double dReturn = 0;
      const size_t lLengthOfString = x.length( );

      for ( size_t i=0; i&lt;lLengthOfString; ++i )
      {
         lParticularCharacter = static_cast&lt;long&gt; (x[i] );
         dReturn += ( lLengthOfString - i ) *
            m_wf[ lParticularCharacter ] +
            ( i + 1 ) * m_wr[ lParticularCharacter ];
      }
      return ( dReturn );
   };

//=================================================================
   double m( const T&amp; s, const T&amp; t, const int&amp; direction,
      const valarray&lt;double&gt;&amp; w ) const
   // this code could probably get into trouble if characters are 
   // signed char
   {  
       double sum = 0.0;
       size_t i;
       const long lIncrement = ( direction&gt;0 ? 1 : -1 );

       valarray&lt;size_t&gt; cnts ( m_lMaxCharacter );
       valarray&lt;size_t&gt; cntt ( m_lMaxCharacter );
       cnts = 0;
       cntt = 0;

       long lpts = ( lIncrement &lt; 1 ? s.length( ) : -1 );
       long lptt = ( lIncrement &lt; 1 ? t.length( ) : -1 );
       long s_count = s.length( ) + 1;
       long t_count = t.length( ) + 1;
       size_t s_char;
       size_t t_char;

       //cout &lt;&lt; endl &lt;&lt; endl;
       //cout &lt;&lt; " increment " &lt;&lt; direction &lt;&lt; endl;
       //cout &lt;&lt; " s \"" &lt;&lt; s &lt;&lt; "\"  t \"" &lt;&lt; t &lt;&lt; "\"" &lt;&lt; endl;
       //cout &lt;&lt; " i \t lpts \t lptt \t s_count  t_count " &lt;&lt; endl;
       for ( i=0; i&lt;max( s.length( ), t.length( ) ); i++ )
       {
           lpts += lIncrement;
           lptt += lIncrement;
           s_count = max( s_count-1, 0 );
           t_count = max( t_count-1, 0 );
           //cout &lt;&lt; i &lt;&lt; " \t" &lt;&lt; lpts &lt;&lt; " \t" &lt;&lt; lptt 
                  &lt;&lt; " \t" &lt;&lt; s_count &lt;&lt; " \t" &lt;&lt; t_count &lt;&lt; endl;
           if ( s_count &gt; 0 )
           {
               s_char = static_cast&lt;size_t&gt; ( s[lpts] );
               cnts[s_char] += 1;
           }
           if ( t_count &gt; 0)
           {
               t_char = static_cast&lt;size_t&gt; ( t[lptt] );
               cntt[t_char] += 1;
           }
           if ( ( s_count &gt; 0 ) &amp;&amp; ( t_count &gt; 0 ) &amp;&amp; 
              ( s_char == t_char ))
               sum += w[s_char] * ( s_count+t_count );
           else
           {
               if ( ( s_count &gt; 0 ) &amp;&amp; ( cnts[s_char] &lt;= cntt[s_char] ))
                   sum += w[s_char] * ( s_count+t_count );
               if ( ( t_count &gt; 0 ) &amp;&amp; ( cntt[t_char] &lt;= cnts[t_char] ))
                   sum += w[t_char] * ( s_count+t_count ) ;
           }
       }
       //  only do compensation once (if at all) !
       if ( m_bDoCompensation &amp;&amp; direction &gt; 0 )  
          sum += + compensation( lpts, lptt, cnts, cntt );
       return ( sum );
   };

}; // template class CThetaMatch




&#151; End of Listing &#151;</pre></body></html>
