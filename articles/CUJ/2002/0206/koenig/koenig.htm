<HTML>   
     <HEAD>
<TITLE>June 2002/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Avoiding Array Overruns</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>The abstractions in the Standard C++ library keep you from trashing memory and committing related transgressions (admit it &#151; you're guilty!), and they make for more elegant code. Use them.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>It is hard to get into a technical discussion these days without the conversation turning at some point to security &#151; particularly security of computer systems connected to a network. Over and over, people who believe that their systems are secure discover that they really aren&#146;t. If they&#146;re lucky, the discovery takes the form of a bug report from their quality-assurance organization, or a warning and security update from their vendor. If they&#146;re unlucky, they discover the problems only after someone has broken into their systems.</p>
<p>Large software systems can be vulnerable to attack for many reasons. This article discusses one common reason, often called buffer overrun: a program attempts to write past the end of an array, thereby overwriting whatever is in the memory next to the array. A prospective intruder who understands enough about the structure of the program can often use a buffer overrun to set an apparently unrelated variable to a value that allows the system to be penetrated.</p>
<p>As an example, consider a program fragment as simple as this one:</p>

<pre>
char buffer[100];

std::cin &gt;&gt; buffer;
</pre>

<p>This fragment reads a line from the standard input stream into an array named <B>buffer</B>, which contains 100 characters including a null character at the end. If the corresponding input is a line with 100 or more characters, part of the input will spill over the end of <B>buffer</B> and overwrite whatever follows <B>buffer</B> in memory.</p>
<p>We cannot forestall this problem by making <B>buffer</B> larger, because an input line might be larger still. However, if we change the definition of <B>buffer</B> so that it has a type that is capable of expanding with its input, such as:</p>

<pre>
std::string buffer;
</pre>

<p>we can avoid this overrun entirely &#151; as more input arrives, the <B>std::string</B> class will take care of enlarging <B>buffer</B> dynamically to be as large as needed.</p>
<p>Reading into a fixed-size array obviously risks buffer overrun whenever the input exceeds the pre-allocated array size. In general, one can avoid such overruns by using a data structure that grows dynamically. Sometimes, however, buffer overruns can occur even when we don&#146;t appear to need a dynamic data structure. For example, consider the following code that appeared in <I>C Traps and Pitfalls</I> (Addison-Wesley, 1988). This example creates a buffer overrun even though we might think we know at compile time that the array is large enough to contain what we&#146;re putting into it. Here, a simple bug can lead to disastrous results:</p>

<pre>
int i, a[10];
for (i=1; i&lt;=10; i++)
    a[i] = 0;
</pre>

<p>The problem with this example is that <B>i&lt;=10</B> should have been <B>i&lt;10</B>. Accordingly, <B>i</B> takes on values from <B>0</B> through <B>10</B> inclusive, but the array <B>a</B> doesn&#146;t have an element with index <B>10</B>. Therefore, the effect of assigning to <B>a[10]</B> is to assign a value to whatever happens to follow array <B>a</B> in memory.</p>
<p>Many C implementations allocate consecutive memory locations for variables that are defined together. The implementation that was used to test this particular example allocates local variables, such as <B>i</B> and <B>a</B>, in reverse order of their definition, because the variables are part of a stack that grows downward in memory. Accordingly, <B>i</B> occupies the same memory that <B>a[10]</B> would occupy if it existed.</p>
<p>On this particular implementation, then, this example has the same effect as if it had been written as:</p>

<pre>
int i, a[10];
for (i=1; i&lt;=10; i++) {
    if (i != 10)
        a[i] = 0;
    else
        i = 0;
}
</pre>

<p>The effect is to set <B>i</B> to <B>0</B> the last time through the loop, which, of course, has the effect of starting the loop over again and making the program fragment run forever.</p>
<p>Of course, other implementations may well behave differently.  For example:</p>

<UL><LI>   The implementation might store local variables in the same order as their definitions, instead of storing them in reverse order.  In that case, <B>a[10]</B> wouldn&#146;t share memory with <B>i</B>, and assigning to <B>a[10]</B> would have a different effect.  Just what that effect might be is impossible to say.</LI>
<LI>   The implementation might optimize the program by keeping i in a register during the loop.  In that case, assigning to <B>a[10]</B> would overwrite the memory normally associated with <B>i</B>, but because <B>i</B> was temporarily in a register, overwriting that memory would have no effect. </LI>
<LI>   The implementation might be kind enough to detect the attempt to overrun the bounds of <B>a</B>, in which case it might terminate the program with an appropriate diagnostic message. </LI>
<LI>   Something else might happen that hasn&#146;t occurred to us.</LI></UL>

<p>As you can see, array overruns are particularly insidious because their effects can differ from one C++ implementation to another, which means that no amount of testing can absolutely guarantee their absence.  Accordingly, it is important for programmers to write their programs in such a way as to make it unlikely that such problems will occur in the first place.</p>
<p>The rest of this article explains some guidelines that, if followed consistently, can make bounds errors much less likely. We understand that it may sometimes be impossible to follow these guidelines.  In such cases, it is worth giving extra scrutiny to the code that violates the guidelines to see if that code might be exceeding an array bound.</p>

<H3><FONT COLOR="#000080">Use Library Containers and Iterators Instead of Arrays and Pointers</FONT></H3>

<p>Pointers and arrays are low-level data structures that are intended to mirror the behavior of typical computer hardware.  This mirroring is good for performance, because it implies that the hardware will be able to execute array and pointer operations efficiently.  However, this performance comes at a price: allocating an array fixes its size, and that size is not easy to change later.</p>
<p>How many times have you seen structures such as this one?</p>

<pre>
struct Customer {
    char name[20];
    char street_address[40];
    // ...
};
</pre>

<p>In C and C++, the size of an array element of a structure is fixed during compilation, so if we want to store a customer&#146;s name and address as part of a structure, we have little choice but to put an absolute upper bound on the size. However, there is rarely an absolute need to store such information directly as part of the structure.</p>
<p>In C, we might define a data structure that represents a variable-length string:</p>

<pre>
struct String {
    char *data;
    size_t length;
};
</pre>

<p>and then use instances of that structure instead of fixed-length arrays as part of our customer information:</p>

<pre>
struct Customer {
    struct String name;
    struct String street_address;
    /* ... */
};
</pre>

<p>This strategy would then require us to write &#151; or obtain &#151; a collection of subroutines that would deal with these <B>String</B> structures.</p>
<p>In practice, few C programmers adopt such techniques because of the difficulty of making them work well with common operations such as built-in assignment. For example, suppose we had defined a <B>String</B> structure such as this one, and suppose further that we had two <B>Customer</B> records:</p>

<pre>
struct Customer c1, c2;
</pre>

<p>In that case, we would have a problem with a statement such as:</p>

<pre>
c1 = c2;
</pre>

<p>The trouble is that in C, assigning one structure to another copies the contents of the structure. In particular, it copies the data and length members of each of the <B>String</B> structures that constitute <B>c2</B>. After such a copy, the pointers in <B>c1</B> and <B>c2</B> point to the same memory, which makes it difficult to decide when to deallocate that memory. It is such difficulties that discourage C programmers from creating abstractions such as the <B>String</B> structure above.</p>
<p>The story is quite different in C++, because along with a data structure that defines a variable-length string, it is possible to define the algorithm to follow when someone tries to copy such a string. Indeed, the C++ Standard library has already done this work for us:</p>

<pre>
struct Customer {
    std::string name;
    std::string street_address;
    // ...
};
</pre>

<p>Now, if we write:</p>

<pre>
Customer c1, c2;
</pre>

<p>and execute:</p>

<pre>
c1 = c2;
</pre>

<p>the effect will be to deallocate whatever memory <B>c1</B> was previously using, allocate enough memory to hold a copy of each component of <B>c2</B>, and copy all of those components. By offering the possibility of richer abstractions, C++ makes it much more straightforward to use those abstractions.</p>
<p>Fortunately, it is straightforward to learn how to use such abstractions in ordinary contexts. More advanced uses are also possible and require understanding of how and when to use them in order to do so effectively. The rest of this article will illustrate several guidelines for avoiding buffer overruns in C++ programs.</p>

<H3><FONT COLOR="#000080">Append to Vectors Instead of Pre-allocating Them</FONT></H3>

<p>Just as the library string class is often a good substitute for character arrays, the library vector template is often a good substitute for arrays of other types. However, it is usually wise to use a vector slightly differently from the way one would use the corresponding array. The key difference is that there is a reasonably efficient way of appending an element to a vector, namely to use <B>push_back</B>.</p>
<p>Suppose, for example, that we have defined an <B>operator&gt;&gt;</B> that is capable of reading <B>Customer</B> records from a file:</p>

<pre>
std::istream&amp; operator&gt;&gt;(std::istream in, Customer&amp; cust) {
    // ...
    return in;
}
</pre>

<p>and we want to read the entire contents of the standard input file, which contains <B>Customer</B> records. To do so, we can define a vector with no elements and append each <B>Customer</B> record to the vector as we read it:</p>

<pre>
std::vector&lt;Customer&gt; customers;
Customer c;

while (std::cin &gt;&gt; c)
    customers.push_back(c);
</pre>

<p>This technique is likely to be familiar only after using vectors for a while. If, instead, we are accustomed to using arrays instead of vectors, we might be tempted to estimate how many elements the vector will contain and pre-allocate that many elements:</p>

<pre>
// a dubious approach
// a vector with 42 elements
std::vector&lt;Customer&gt; customers(42);
int count = 0;
Customer c;
while (std::cin &gt;&gt; c)
    customers[count++] = c;     // Wrong!
</pre>

<p>The trouble with this approach is that it is sure to overrun the bounds of the <B>customers</B> array eventually. To forestall this overrun, it would be necessary to replace:</p>

<pre>
customers[count++] = c;
</pre>

<p>with statements that check whether count has reached <B>customers.size</B>, and, if so, to increase the number of elements in <B>customers</B>. Such checking and adjustment is just what <B>push_back</B> does for us automatically.</p>
<p>Aside from force of habit, there are two contexts in which you might want to define the size of a vector in advance. One context is when you really do know &#151; without having to guess &#151; how many elements the vector will have. Even in such a context, however, you may well want to use <B>push_back</B> anyway. The reason is that giving a vector a size defines its elements, and initializing those elements takes time. For example, if we define:</p>

<pre>
vector&lt;int&gt; v(10000);
</pre>

<p>we are not merely defining a 10,000-element vector &#151; we are initializing its elements to zero. There is no reason to take the time for such initialization unless we intend to use the elements.</p>
<p>The other context for defining the size of a vector is to avoid having to reallocate the vector when we use <B>push_back</B> to append to it. In this context, however, we don&#146;t really want to define the number of elements in the vector &#151; rather, we want to allocate enough memory to it that when it comes time to append elements to the vector, we do not need to allocate memory again.</p>
<p>As an example, let&#146;s look again at our vector of <B>Customer</B> records. Instead of actually creating 42 records, let&#146;s suppose instead that we had measured the performance of our program, and we were convinced that we needed to avoid having to allocate more memory until we actually had more than 42 records. Then, instead of writing:</p>

<pre>
std::vector&lt;Customer&gt; customers(42);  // construct 42 records
</pre>

<p>we would write:</p>

<pre>
std::vector&lt;Customer&gt; customers;
customers.reserve(42);  // leave room for 42 records
</pre>

<p>In the first of these examples, we define <B>customers</B> as a vector with 42 elements, each of which has whatever default value is appropriate for a <B>Customer</B>. In the second example, the call to <B>reserve</B> does not change the number of elements in <B>customers</B>. That number was zero before we called <B>reserve</B>, and it is still zero. What the call does is to ensure that <B>customers</B> has enough memory that it can grow to at least 42 elements without needing to allocate more memory.</p>
<p>By using reserve, we can make it unnecessary for subsequent calls to <B>push_back</B> to have to allocate additional memory and therefore avoid the associated overhead, without having to say for certain how many elements our vector will eventually have.</p>

<H3><FONT COLOR="#000080">Use Inserters as Destinations</FONT></H3>

<p>By appending elements to containers instead of guessing the containers&#146; size, we can avoid overrunning the container&#146;s bounds when we guess wrong. This principle also comes into play when we use algorithms that store sequences of elements into containers. For example, suppose we have a vector named <B>v</B>:</p>

<pre>
std::vector&lt;int&gt; v;
for (int i = 0; i != 10; ++i)
    v.push_back(i);
</pre>

<p>and we want to copy its elements into another vector named <B>w</B>. Here is a common beginner&#146;s mistake:</p>

<pre>
std::vector&lt;int&gt; w;

std::copy(v.begin(), v.end(), w.begin());// Wrong!
</pre>

<p>The difficulty is in the third argument to <B>std::copy</B>. The first two arguments represent the source; the third argument represents the destination. By giving <B>w.begin()</B> as the third argument to <B>std::copy</B>, we are saying that we want <B>std::copy</B> to overwrite elements of <B>w</B>, starting at the initial element.</p>
<p>The trouble with this strategy is that <B>std::copy</B> will go on overwriting elements as long as there are elements of <B>v</B> to copy. In other words, unless <B>w</B> has at least as many elements as <B>v</B> before we call <B>std::copy</B>, the call to <B>std::copy</B> will overrun <B>w</B>&#146;s bounds. In this particular example, <B>w</B> has no elements at all &#151; because we never gave it any &#151; so if <B>v</B> has so much as a single element, the program won&#146;t work.</p>
<p>The way around this problem is to use inserters instead of plain iterators on the receiving end of algorithms such as <B>std::copy</B> whenever possible. For example, if we know that <B>w</B> has no elements, and we want to copy <B>v</B>&#146;s elements into <B>w</B>, we might do so this way:</p>

<pre>
// Much better!
std::copy(v.begin(), v.end(), std::back_inserter(w));
</pre>

<p>Now, each element that we copy will extend <B>w</B> appropriately, so there is no possibility of overrunning <B>w</B>&#146;s bounds.</p>
<p>Equivalently, we might write:</p>

<pre>
w.insert(w.end(), v.begin(), v.end());
</pre>

<p>This call to insert will insert copies of the elements delimited by <B>v.begin() </B>and <B>v.end()</B> into <B>w</B> immediately before <B>w.end()</B>. In other words, it will append the elements of <B>v</B> to those of <B>w</B>.</p>
<p>Even more straightforwardly, if we know that <B>w</B> is empty before we start, we can write:</p>

<pre>
w = v;
</pre>

<p>which will cause <B>w</B>&#146;s elements to be copies of those of <B>v</B>. However, this straightforward assignment works only if <B>v</B> and <B>w</B> are the same type, whereas the calls to copy and insert will work even if <B>v</B> and <B>w</B> are different kinds of containers.</p>
<p>From a safety viewpoint, the important property of an inserter is that it is an iterator that causes its corresponding container to grow automatically to contain the inserted elements. By far the most common inserter is <B>back_inserter</B>, which, as its name suggests, yields an iterator that inserts elements at the back of its container. As we have already seen, we can use <B>copy</B> and <B>back_inserter</B> together to append the contents of one container to another.</p>
<p>If a container supports efficient insertion at the beginning, it also supports <B>front_inserter</B>, which yields an iterator that inserts elements at the front of the container. For example, if <B>l</B> is a <B>list&lt;int&gt;</B>:</p>

<pre>
std::list&lt;int&gt; l;
</pre>

<p>then we can insert a copy of the elements of <B>v</B> at the beginning of <B>l</B> by writing:</p>

<pre>
std::copy(v.begin(), v.end(), std::front_inserter(l));
</pre>

<p>Equivalently, we can use insert directly:</p>

<pre>
l.insert(l.begin(), v.begin(), v.end());
</pre>

<p>Finally, for containers, such as <B>list</B>, that support efficient insertion in the middle, there is an inserter called <B>inserter</B> that allows for insertion anywhere in the container. For example, <B>std::front_inserter(l)</B> is equivalent to <B>std::inserter(l, l.begin())</B>, and <B>std::back_inserter(l)</B> is equivalent to <B>std::inserter(l, l.end())</B>.</p>
<p>In all cases, inserters provide a place where algorithms can put their output without the programmer having to worry whether there is enough room for that output.</p>

<H3><FONT COLOR="#000080">Use == and != for Bounds Comparisons</FONT></H3>

<p>Let&#146;s look again at the example from <I>C Traps and Pitfalls</I>:</p>

<pre>
int i, a[10];
for (i=1; i&lt;=10; i++)
    a[i] = 0;
</pre>

<p>Surprising as it may seem, one way to avoid mistakes of this kind is to use <B>!=</B> and <B>==</B> to terminate loops instead of <B>&lt;</B>, <B>&lt;=</B>, <B>&gt;</B>, or <B>&gt;=</B>. For example, if the loop had been written this way:</p>

<pre>
for (i=1; i!=10; i++)
    a[i] = 0;
</pre>

<p>the bounds overrun in the original example would not have occurred <a href="#1">[1]</a>.</p>
<p>This guideline stems from the fundamental tendency of C and C++ programs to express ranges in terms of the first element of the range and a value that is one past the last element. For example, if we have an array with 10 elements, then <B>0</B> is the index of the first element and <B>10</B> is one past the index of the last element.</p>
<p>Because we express ranges asymmetrically in this way, no element in the range is equal to the range&#146;s upper bound. Accordingly, we can iterate over the elements of a range this way:</p>

<pre>
for (var = lower_bound; var != upper_bound; ++var)
    // ...
</pre>

<p>We know that the <B>!=</B> condition is correct because the upper bound is not part of the range. Using <B>!=</B> in this way means that we never have to worry about whether to use <B>&lt;</B> or <B>&lt;=</B>.</p>
<p>There is another reason to avoid <B>&lt;</B>, <B>&lt;=</B>, <B>&gt;</B>, and <B>&gt;=</B>: these operators are not general across all iterator types. For example, look again at our vector named <B>customers</B>, and see how we might write the contents of that vector on the standard output stream:</p>

<pre>
std::vector&lt;Customer&gt;::iterator it;
for (it = customers.begin(); it !
        = customers.end(); ++it)
    std::cout &lt;&lt; *it &lt;&lt; std::endl;
</pre>

<p>In this example, we use <B>!=</B> instead of <B>&lt;</B> to compare it to <B>customers.end()</B>. We have already argued that it is wise to use <B>!=</B> instead of <B>&lt;</B> so that we do not need to think about whether to use <B>&lt;</B> or <B>&lt;=</B>. What we are saying now is that the other advantage of using <B>!=</B> is that this code would continue to work even if we were to use a list instead of a vector:</p>

<pre>
std::list&lt;Customer&gt; customer_list;
std::list&lt;Customer&gt;::iterator it;

// We can write a list as easily as we 
// can write a vector
// because we used != instead of &lt;.
for (it = customer_list.begin(); it !
        = customer_list.end();
    ++it)
    std::cout &lt;&lt; *it &lt;&lt; std::endl;
</pre>

<p>The point is that unlike vector iterators, list iterators support only the <B>==</B> and <B>!=</B> comparisons. Therefore, the only way to express the bounds of a list if by using values that the <B>==</B> and <B>!=</B> comparisons can detect. By restricting iterations to these operations, then, we gain not only safety but also flexibility.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>We have discussed three ways of avoiding bounds overruns:</p>

<UL><LI>   Using data structures that allow bounds to change before they can be overrun.</LI>
<LI>   Using inserters to allow output sequences&#146; bounds to grow as necessary.</LI>
<LI>   Stopping at the right place in an input sequence.</LI></UL>

<p>By far the most important of these strategies is to use standard library containers instead of built-in arrays. Particularly useful is starting with an empty container using <B>push_back</B> to append elements to the container as needed.</p>
<p>If your program needs to transfer data from one container to another, it is often wise to use an inserter to represent the transfer&#146;s destination. Using an inserter will create new container elements instead of overwriting elements that are already there and will cause the container&#146;s bounds to grow automatically to accommodate those elements.</p>
<p>Finally, once you have a container full of data, you can avoid reading past the end of the container by using asymmetric bounds &#151; which will happen automatically if you express those bounds with <B>begin</B> and <B>end</B> &#151; and using only the <B>==</B> and <B>!=</B> operators to check whether you have reached the end.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>[1]  Of course, there is still the problem that the first value of <B>i</B> in the loop is one instead of zero, but that is not a bounds overrun error. Indeed, it might not even be an error at all. In any event, if we use library containers in place of arrays, we will write <B>a.begin()</B> instead of <B>0</B>, solving that problem too. </p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of <I>C Traps and Pitfalls</I> and co-author of <I>Ruminations on C++</I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of <I>Ruminations on C++</I> and lectures worldwide.</i></p>

</blockquote></body></html>
