<HTML>   
     <HEAD>
<TITLE>August 2002 C++ Experts Forum/The New C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C++: Smart(er) Pointers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<HR>

<BLOCKQUOTE>
<p><b>Copyright &copy; 2002 Herb Sutter</b></p>

<p>Last time <a href="#1">[1]</a>, I gave a survey of the first batch of suggested library extensions that were considered at the October 2001 C++ standards meeting in Redmond, Washington, USA. This time, as promised, we'll take a closer look at one of the proposed facilities &#151; smart pointers, which were discussed again at the following April 2002 standards meeting in Cura&ccedil;ao, in the Netherlands Antilles.</p>

<H3><FONT COLOR="#000080">And Then There Was One</FONT></H3>

<p>In today's Standard C++, there's only one smart pointer: <b>std::auto_ptr</b>.</p>
<p>Considering that it's such a tiny feature, <b>auto_ptr</b> sure has received copious attention. The main reason for the attention is that attention is deserved, both positively and negatively. On the one hand, <b>auto_ptr</b> is very useful for specific situations and those uses deserve to be described; see the discussion in Items 19 and 37 of <i>Exceptional C++</i> <a href="#2">[2]</a>, Item 10 of <i>More Effective C++</i> <a href="#3">[3]</a>, and my article &quot;Using <b>auto_ptr</b> Effectively,&quot; available online <a href="#4">[4]</a>. On the other hand, <b>auto_ptr</b> can also be moderately suspicious to highly dangerous in other situations, such as the minefield of trying to put <b>auto_ptr</b>s into standard containers like <b>vector</b> and <b>map</b>; see for example Item 21 of <i>More Exceptional C++</i> <a href="#5">[5]</a> and Item 28 of <i>More Effective C++</i> <a href="#3">[3]</a>. (On the gripping hand, as Niven and Pournelle might say, <b>auto_ptr</b> relies on some fairly obscure language trickery to make it deliberately not work in some dangerous cases. Fortunately this trickery gets less press &#151; the details are not for the faint of heart. Suffice it to say that <b>auto_ptr</b> is designed with some sleight of hand that's intended to make it deliberately break when used with, say, standard containers.)</p>
<p>So today's Standard C++ has exactly one smart pointer: <b>auto_ptr</b>. That's it. So it must be all you need, right? Not a bit of it. There's more to this story.</p>
<p>It's actually a real shame that <b>auto_ptr</b> is the only standard smart pointer, for at least two reasons. First, <b>auto_ptr</b> doesn't do all the useful things that smart pointers might be good for; there are many good uses of smart pointers that poor <b>auto_ptr</b> was never designed to support, and shouldn't, and doesn't. Second, <b>auto_ptr</b> can be a dangerous snake that turns and bites you on the hand if you do try to use it in some of those other ways.</p>
<p>The first piece of good news is that many good and useful smart pointers are available and were available even before <b>auto_ptr</b>. The only problem is that they weren't, and aren't, standard. That's somewhere between disappointing and annoying, depending on how portable your code needs to be &#151; standard features are of course generally the most portable.</p>
<p>The second piece of good news is that those alternative smart pointers are now strong candidates for inclusion into the Standard. (Some could have been in the original Standard; see <a href="#1">[1]</a>. But better late than never.)</p>

<H3><FONT COLOR="#000080">If One Is Good, Six Are Better... (?)</FONT></H3>

<p>The Boost library ships with five additional smart pointers <a href="#6">[6]</a>. All of these smart pointer templates take a single type parameter specifying the type of the object to be held. Briefly, here they are:</p>

<UL><LI><b><i>scoped_ptr</i></b>: a non-copyable smart pointer intended to be used as an auto (stack) object. When a <b>scoped_ptr</b> goes out of scope and is destroyed, it will automatically delete the single object it points to. Arguably, <b>scoped_ptr</b> is what <b>auto_ptr</b> ought to have been in the first place, way back when <b>auto_ptr</b> was first meant to be really an &quot;auto&quot; pointer. But <b>scoped_ptr</b> doesn't support the modern <b>auto_ptr</b>'s important additional usefulness for sources and sinks (described in <a href="#4">[4]</a>).</LI>
<LI><b><i>scoped_array</i></b>: like <b>scoped_ptr</b>, but owns an array instead of a single object.</LI>
<LI><b><i>shared_ptr</i></b>: a reference-counted smart pointer intended to be used to share &quot;handles&quot; to the pointed-at object. When a <b>shared_ptr</b> goes out of scope and is destroyed, if it is the last <b>shared_ptr</b> pointing at the owned object, it will automatically delete the owned object &#151; a classic case of &quot;last one out, turn off the lights.&quot; Note that <b>shared_ptr</b> does support <b>auto_ptr</b>'s important use for sources and sinks. More importantly, it can be safely used in a container, which for <b>auto_ptr</b>s is not allowed and highly dangerous.</LI>
<LI><b><i>shared_array</i></b>: like <b>shared_ptr</b>, but owns an array instead of a single object.</LI>
<LI><b><i>weak_ptr</i></b>: to be used in conjunction with a <b>shared_ptr</b>. If you have an object that's already managed by one or more <b>shared_ptr</b>s, you can create <b>weak_ptr</b>s to it too. Now, the <b>shared_ptr</b>s still follow the &quot;last one out, turn off the lights&quot; policy; the last <b>shared_ptr</b> will delete the owned object even if there are still <b>weak_ptr</b>s to it. How is <b>weak_ptr</b> then any better than just a bald pointer to the object? Because the <b>shared_ptr</b> that turns off the lights will also check to see if any <b>weak_ptr</b>s still point to that object and set them to null if they do. That's a level of safety you don't get with plain old raw pointers.</LI>
</UL>

<p>Let me repeat some advice from last time, because it's worth repeating: if you know nothing else about Boost, know about <b>shared_ptr</b>. It's especially valuable if you ever want to have a container of pointers, because what you almost always really want is a container of <b>shared_ptr</b>s. For one thing, they'll be managed for you and will get cleaned up correctly, and they'll avoid the usual pitfalls of using mutating STL algorithms on containers of bald pointers. For another, they are <i>not</i> <b>auto_ptr</b>s, which is a Good Thing because <b>auto_ptr</b>s should never be put into STL containers.</p>
<p>The Boost approach is to have lots of special-purpose smart pointer types, one for each kind of smart pointer behavior. In this model, a smart pointer template is quite simple:</p>

<pre>
template&lt;typename T&gt; class scoped_ptr;
template&lt;typename T&gt; class scoped_array;
template&lt;typename T&gt; class shared_ptr;
template&lt;typename T&gt; class shared_array;
template&lt;typename T&gt; class weak_ptr;
</pre>

<p>Only one template parameter is needed, to specify the type of the owned object. It is both an advantage and a disadvantage that these little class templates can all have very different interfaces if they want to. On the one hand, it allows customization, say when a member function might make sense for one but not another smart pointer. But, on the other hand, it also means that it's easy to get inconsistent interfaces, especially when people start extending the facility by providing more smart pointers of their own, both within and outside the Boost library.</p>

<H3><FONT COLOR="#000080">If Six Are Good, Infinity Is Better... (?!)</FONT></H3>

<p>Although Boost chooses to follow the model of designing special-purpose smart pointer templates, we can ask: &quot;Why stop there?&quot; In fact, some very bright language designers, notably Andrei Alexandrescu in <i>Modern C++ Design</i> <a href="#7">[7]</a>, have proposed that a &quot;one size fits all&quot;  &uuml;ber-pointer may be an achievable dream, using policy-based design.</p> 
<p>Policy-based design takes the view that certain details, such as checking policies and ownership policies, can be abstracted out into their own classes, which are then supplied as template parameters to configure or customize the basic smart pointer. Thus Loki's <b>SmartPtr</b> template looks something like this:</p>

<pre>
template
&lt;
  typename T,
  template &lt;class&gt; class OwnershipPolicy = RefCounted,
  class ConversionPolicy = DisallowConversion,
  template &lt;class&gt; class CheckingPolicy = AssertCheck,
  template &lt;class&gt; class StoragePolicy = DefaultSPStorage
&gt;
class SmartPtr;
</pre>

<p>Note that we still have the obligatory template parameter <b>T</b> that describes the type of the pointed-at object. But we also get policies that govern much of the behavior of the smart pointer. The policies may look cumbersome to type out, but they are defaulted for those who don't want or need to specify them; the default <b>Loki::SmartPtr</b> is a lot like a <b>boost::shared_ptr</b>. In fact, <b>SmartPtr</b> covers all that the four basic Boost smart pointers can do, and more. (An equivalent of Boost's <b>weak_ptr</b> could also be provided to work with a partial specialization of <b>SmartPtr</b> corresponding to <b>shared_ptr</b>.)</p>
<p>Indeed, Loki's <b>SmartPtr</b> is so much a superset of Boost's smart pointers that we would love to just create synonyms. In Standard C++, the following code won't work because it relies on a feature that was frankly just overlooked, namely <b>typedef</b> templates (for some existing discussion, see <a href="#8">[8]</a>; I'll be writing more about this up-and-coming feature in the future). Barring major surprises, such as the Earth suddenly deciding to break out of its usual orbit and head for Mars on a holiday, <b>typedef</b> templates will be in the next C++ Standard, C++0x (see <a href="#9">[9]</a>). If we had this feature, we could write the following synonym:</p>

<pre>
namespace boost {
  template&lt;typename T&gt;    // typedef templates aren't standard
  typedef Loki::SmartPtr  // yet, but let's overlook that for now...
    &lt;
      T,                  // note, T still varies
      RefCounted,         // but everything else is fixed
      DisallowConversion,
      NoCheck,
      DefaultSPStorage
    &gt;
    shared_ptr;
}
</pre>

<p>So that the usage would simply be, as usual:</p>

<pre>
shared_ptr&lt;int&gt; a;        // simple -- no fuss, no muss!
</pre>

<p>Similar synonyms could be created for <b>shared_array</b>, <b>scoped_ptr</b>, <b>scoped_array</b>, and even <b>std::auto_ptr</b>. Such simple names for common configurations would make all the tedious template parameters go away for those common cases. We can't do that today, alas, but once <b>typedef</b> templates become commonly available we will be able to do this and more.</p> 
<p><b>SmartPtr</b> really then describes an <i>unlimited family</i> of smart pointers having a consistent interface. Note that because Loki's <b>SmartPtr</b> inherits publicly from its template parameter types, the interface does not have to be identical across the whole family; the policies could add some visible functionality too. Loki already comes with several predefined policies allowing hundreds of combinations. But you can add your own policies, such as for managing COM and CORBA distributed objects and other advances uses, so the size of the <b>SmartPtr</b> family really is effectively unlimited.</p> 

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>The standards committee is still considering these options and welcomes other smart pointer submissions. In particular, there is ongoing discussion, with different points of view, about whether the &quot;one size fits all&quot; customizable policy-based design is the way to go, or whether just a few special-purpose smart pointer templates are needed. Want to weigh in? Start discussion on the Boost reflector <a href="#10">[10]</a> or on the <b>comp.std.c++</b> newsgroup.</p>
<p>Next time: more news from the April 2002 standards meeting in Cura&ccedil;ao. Stay tuned.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] H. Sutter. &quot;The New C++: The Group of Seven &#151; Extensions under Consideration for the C++ Standard Library,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, April 2002, &lt;www.cuj.com/experts/2004/sutter.htm&gt;.</p>
<p><a name="2"></a>[2] H. Sutter. <i>Exceptional C++</i> (Addison-Wesley, 2000).</p>
<p><a name="3"></a>[3] S. Meyers. <i>More Effective C++</i> (Addison-Wesley, 1996).</p>
<p><a name="4"></a>[4] H. Sutter. &quot;Using <b>auto_ptr</b> Effectively,&quot; <i>C/C++ Users Journal</i>, October 1999, available online at &lt;www.gotw.ca/publications/using_auto_ptr_effectively.htm&gt;.</p>
<p><a name="5"></a>[5] H. Sutter. <i>More Exceptional C++</i> (Addison-Wesley, 2002).</p>
<p><a name="6"></a>[6] &lt;www.boost.org/libs/smart_ptr/index.htm&gt;</p>
<p><a name="7"></a>[7] A. Alexandrescu. <i>Modern C++ Design</i> (Addison-Wesley, 2001).</p>
<p><a name="8"></a>[8] H. Sutter. &quot;Guru of the Week #79: Template Typedef,&quot; available online at &lt;www.gotw.ca/gotw/079.htm&gt;.</p>
<p><a name="9"></a>[9] H. Sutter. &quot;The New C++,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, February 2002, &lt;www.cuj.com/experts/2002/sutter.htm&gt;.</p>
<p><a name="10"></a>[10] C++ Boost, &lt;www.boost.org&gt;.</p>

<H3><FONT COLOR="#000080">About the Author</FONT></H3>

<p><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>

</body>
</html>
