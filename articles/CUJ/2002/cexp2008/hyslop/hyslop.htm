<HTML>   
     <HEAD>
<TITLE>August 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: A Midsummer Night’s Madness</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE><p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>&quot;Say, um, you got a minute?&quot;</p>
<p>I recognized the timid voice behind me. Kerry, our department's new intern, was standing at my cubicle. He was bright enough, but... man, what a geek. I had told Wendy so, but she had only muttered something I didn't quite catch about pots and kettles.</p>
<p>&quot;Yeah, sure,&quot; I swung around to face him. I didn't have a whole lot more experience under my belt than Kerry did, but it felt good to be regarded as an experienced hand. I was ready for anything he could throw at me.</p>
<p>&quot;What's the speed-dial code for our London office?&quot;</p>
<p>I sighed. So much for being the guiding expert. I jotted the code down on a sticky note and handed it to him.</p>
<p>&quot;Thanks,&quot; he said as he turned. &quot;I have to ask Bob something.&quot;</p>
<p><i>Danger, Will Robinson!</i> My heart leaped into my throat as I leaped to my feet. &quot;Don't!&quot; I blurted. Kerry froze in his tracks. &quot;That is, don't bother asking him. I mean uh,&quot; think fast... think fast... &quot;don't bother him. I'm sure we can handle it.&quot;</p>
<p>&quot;But Bob said I should leave you alone,&quot; Kerry stammered out. &quot;Before he left, he said if I had any questions, I should call him. He said, 'Whatever you do, make sure you stay way from...' &quot;</p>
<p>&quot;Oh, look at the time,&quot; I interrupted. &quot;It's way past quitting time in London. Bob'll be long gone.&quot;</p>
<p>&quot;But it's only 3:30 there.&quot;</p>
<p><i>Yeah, that's about quitting time for Bob,</i> I thought. Out loud, I said, &quot;Bob... works early shifts when he's in London.&quot;</p>
<p>&quot;Oh. Well, I suppose it'd be OK,&quot; Kerry didn't seem too convinced, but he did sit in my guest chair. &quot;The problem is, I have a function that takes a <b>typedef</b> of a pointer,&quot; he said, as he wrote on the whiteboard:</p>

<pre>
typedef T* Tptr;

void f( const Tptr t )
{
  *t = T(); // don't want this, but it's allowed
}
</pre>

<p>&quot;Inside the function, I can modify <b>t</b>, even though I've declared it <b>const</b>. I also tried <b>Tptr const t</b>, but it didn't work either. I know if I wasn't using the <b>typedef</b>, I could write <b>const T * t</b>, and that'd do what I wanted.&quot;</p>
<p>&quot;Ah,&quot; I said, stalling for time as I thought about this. I knew I'd come across this before. But where? When? &quot;Well, a <b>typedef</b> isn't quite like a macro text substitution. I don't recall the ins and outs of it, but I do remember that if you write it with the <b>const</b> qualifier after the type, it behaves more like you'd expect.&quot; I modified his code slightly:</p>

<pre>
void f( Tptr const t ) // still means T* const
</pre>

<p>Kerry squinted at the new code. &quot;But <b>Tptr const</b> <b>t</b> is different from <b>const Tptr t</b>. Isn't it?&quot;</p>
<p>A new voice said: &quot;No! No different.&quot;</p>
<p>I jumped slightly at the Guru's voice behind us. Kerry squeaked as he shot out of his chair. The Guru continued calmly, closing the thick book in her hand and ignoring the reaction: &quot;Tell me, young learner, what is the difference between <b>int const i </b>and <b>const int i</b>?&quot;</p>
<p>Kerry's eyes were wide &#151; so wide, that I started wondering what Bob had said to him about the Guru. For her part, the Guru seemed not to notice his trembling.</p>
<p>I decided now would not be a good time to participate in the Guru's act: &quot;They're the same thing. Aren't they, Kerry?&quot; I prompted. Kerry nodded dumbly.</p>
<p>The Guru's brow furrowed slightly. &quot;So, if <b>const int</b> and <b>int const</b> the same are, expect you <b>Tptr const</b> and <b>const Tptr</b> to be different, do you? Hmm? And well you should not.&quot;</p>
<p>&quot;Uh, yes, I was explaining that part,&quot; I cut in, remembering. &quot;Okay, Kerry, in this code, what's <b>const</b>?&quot; I wrote:</p>

<pre>
const int i; // or int const i;
</pre>

<p>&quot;The <b>int</b>,&quot; Kerry said slowly. The simplicity of the question brought him round.</p>
<p>&quot;Okay,&quot; I nodded. &quot;Now in <i>this</i> code, what's <b>const</b>, even if <b>T</b> is a <b>typedef</b>?&quot; I wrote:</p>

<pre>
const T t; // or T const t
</pre>

<p>&quot;The <b>T</b> object,&quot; Kerry said, more confidently now.</p>
<p>&quot;Good. Now in <i>this</i> code, what's <b>const</b>?&quot; I wrote:</p>

<pre>const Tptr t; // or Tptr const t
</pre>

<p>&quot;The...&quot; Kerry trailed off. &quot;Oh. The <b>Tptr</b>?&quot;</p>
<p>&quot;Right. But the <b>Tptr</b> represents a compound type, and the <b>const</b> can only apply to one of part of the type. The pointer itself is <b>const</b>; this is the same as <b>T* const</b>. Now, just one more: in <i>this</i> code, what's <b>const</b>? I wrote:</p> 

<pre>const T* t; // or T const* t
</pre>

<p>&quot;The... object pointed at,&quot; he got out.</p>
<p>&quot;Right,&quot; I concluded and set the whiteboard marker down. &quot;That's the difference between <b>const Tptr</b> and <b>const T*</b>.</p>
<p>The Guru placed a hand on my shoulder briefly and took over again: &quot;This, indeed, is one reason a few prophets <a href="#1">[1]</a> say to put the <b>const</b> keyword as far to the right as you can without changing the meaning of the declaration. Then you can mentally expand the <b>typedef</b> as if it were an unholy macro,&quot; she shuddered, &quot;to get the correct meaning.&quot;</p>
<p>&quot;Yeah, but I've always thought that's backwards,&quot; I complained. &quot;I want to declare something like '<b>const int * iptr</b>' because when I read it, I can say 'constant <b>int</b> pointer <b>iptr</b>'. Almost everybody, including all the books, writes it that way. The other way feels backwards.&quot;</p>
<p>&quot;Backwards?&quot; the Guru arched an eyebrow. &quot;Although we neither recommend nor disclaim the '<b>const</b> to the right' style, the pious one's argument has some merit. It can make reading the declaration easier.&quot;</p>
<p>&quot;How?&quot; asked Kerry.</p>
<p>&quot;Read it the way of the compiler, you must. What you are really saying is '<b>iptr</b> is a pointer to a constant <b>int</b>', which from right to left is exactly what '<b>int const * iptr;</b>' declares to the world.&quot;</p>
<p>&quot;But, so, how do I declare my function so that the <b>T</b> object really is constant?&quot; Kerry asked to get back to his original question.</p>
<p>&quot;Ah, my child, quite simply.&quot; The Guru wrote:</p>

<pre>
void f( const T* t )
</pre>

<p>&quot;But I really want to use a <b>typedef</b>,&quot; Kerry protested.</p>
<p>&quot;Ah, the rub. If a <b>typedef</b> you must have, a separate <b>typedef</b> for a constant <b>T</b> you need:&quot;</p> 

<pre>
typedef const T* Tcptr;
void f( Tcptr t )
</pre>

<p>&quot;Beware, though,&quot; the Guru added ominously, &quot;we have found that using a <b>typedef</b> simply to create a pointer adornment adds very little value. Because of the <b>const</b> limitations we have discussed, you must provide two separate <b>typedef</b>s. Such a proliferation of <b>typedef</b>s with very little difference in meaning can serve only to confuse the unwary. This too is vanity.&quot;</p>
<p>The Guru reopened her book, turned, and glided away. &quot;Confusion is the dark side of programming. Too many <b>typedef</b>s, poor naming choices &#151; these all lead to...&quot; Her voice faded as she disappeared around a corner.</p>
<p>I looked at Kerry. He stared at me and gulped.</p>
<p>&quot;Don't worry,&quot; I said reassuringly, &quot;you'll get used to her. She really is an excellent programmer.&quot; Kerry blinked, opened his mouth, closed it, and wandered off in a daze. I shrugged and went back to work.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Notably Dan Saks.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>
</body>

</html>
