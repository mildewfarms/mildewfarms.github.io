<HTML>   
     <HEAD>
<TITLE>March 2002/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Complex Numbers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>While complex numbers are simple in theory, it should be no surprise that in practice, they&#146;re well, complex.</p>
</BLOCKQUOTE>

<HR>

<blockquote>

<p>Scientific computing has a long history, and, like most computer languages, C++ includes features to support the special needs of scientists. One way in which C++ differs from such languages as Fortran, however, is that much of this support is in the library rather than in the core language. One of the basic guiding principles of C++ (it inherited this principle from C) was that the language should focus on general abstraction mechanisms: if you can think of a facility that ought to be supported, then it&#146;s likely that other people will need two or three other similar facilities that you haven&#146;t thought of. Rather than building just one of them into the language, it&#146;s better to build in general mechanisms so that all of them, and more, can be expressed as libraries.</p>
<p>One illustration of this general dictum is C++&#146;s support for complex numbers. Mathematically, the easiest way to think about complex numbers is that a complex number has a <I>real</I> part and an <I>imaginary</I> part: <I>z</I> = <I>x</I> + <I>i y</I>, where <I>x</I> and <I>y</I> are ordinary real numbers and where <I>i</I><SUP>2</SUP> = -1. All of the ordinary rules of arithmetic apply. For example:</p>
<p><I>z</I><SUB>1</SUB><I> z</I><SUB>2</SUB> = (<I>x</I><SUB>1</SUB> + <I>i y</I><SUB>1</SUB>) (<I>x</I><SUB>2</SUB> + <I>i y</I><SUB>2</SUB>) = (<I>x</I><SUB>1</SUB><I> x</I><SUB>2</SUB> - <I>y</I><SUB>1</SUB><I> y</I><SUB>2</SUB>) + <I>i</I>(<I>x</I><SUB>1</SUB><I> y</I><SUB>2</SUB> + <I>y</I><SUB>1</SUB><I> x</I><SUB>2</SUB>)</p>
<p>We can of course think of the ordered pair (<I>x</I>, <I>y</I>) as a point on the plane, and, again of course, we can choose to represent that point in polar rather than rectangular coordinates: instead of the ordered pair (<I>x</I>, <I>y</I>), we can use the ordered pair (<I>r</I>, <FONT FACE="Symbol">q</font>). One of the fundamental equations of complex arithmetic is the relation between those two representations:</p>
<p><I>z</I> = <I>re</I><SUP>i<FONT FACE="Symbol">q</FONT></SUP> = <I>r cos </I><FONT FACE="Symbol">q</FONT> + <I>i r sin </I><FONT FACE="Symbol">q</FONT></p>
<p>Complex numbers are ubiquitous: they appear in the theory of equations (an <I>n</I>th order polynomial always has <I>n</I> complex roots), in the analysis of special functions, in quantum mechanics (the wave amplitude in the Schr&ouml;dinger equation is complex), in electrical engineering, and in digital signal processing. Practically every technical field uses complex numbers, and they appear in many kinds of scientific computation.</p>
<p>What kind of support for complex numbers do we need in a computer language?</p>

<H3><FONT COLOR="#000080">A Complex Number Class</FONT></H3>

<p>To some extent, Fortran taught us the answer long ago: complex numbers in a computer program should behave, to the extent possible, just like any other numbers. That is:</p>

<ul>
<li>You should be able to initialize a complex number, assign one complex number to another, and assign a real number to a complex number.</li>
<li>You should be able to use ordinary mathematical notation for complex arithmetic.</li>
<li>You should be able to use standard mathematical functions, like <B>sin</B>, <B>cos</B>, <B>exp</B>, and <B>sqrt</B> .</li>
<li>You should be able to access a complex number&#146;s components, either in (<I>x</I>, <I>y</I>) form or in (<I>r</I>, <FONT FACE="Symbol">q</FONT>) form.</li>
<li>You should be able to perform I/O with complex numbers just the same way that you do with real numbers.</li>
</ul>

<p>Fortran achieves these goals by building complex numbers into the language. In C++, it&#146;s more natural to represent complex numbers as a class, where the real and imaginary parts are member variables. We can overload arithmetic operators to achieve ordinary mathematical notation, and we can overload functions like <B>sin</B> and <B>exp</B> for complex arguments. Finally, since C++&#146;s <B>iostream</B> system is a user-extensible library, we can easily support complex I/O: all we have to do is supply the appropriate versions of <B>operator&lt;&lt;</B> and <B>operator&gt;&gt;</B>. To look at it differently, complex was a test of C++&#146;s abstraction mechanisms. If you couldn&#146;t write a complex number class in C++, it would be a sign that there was something wrong with C++ classes <a href="#1">[1]</a>.</p>
<p>(As an aside: I meant it when I said that the member variables in a complex number class should be the real and imaginary part. Sometimes books use a complex number class as an example of data abstraction and suggest that internally such a class could use either an (<I>x</I>, <I>y</I>) or an (<I>r</I>, <FONT FACE="Symbol">q</FONT>) representation without affecting any user-visible behavior. Those examples aren&#146;t usually thought through. Addition of two complex numbers in (<I>r</I>, <FONT FACE="Symbol">q</FONT>) representation is horrendously complicated; in general, there&#146;s no better technique than converting them to (<I>x</I>, <I>y</I>) representation, doing the addition, and converting back again. I&#146;ve never seen a complete complex number class that uses an (<I>r</I>, <FONT FACE="Symbol">q</FONT>) representation, and I don&#146;t expect to.)</p>
<p>Complex number classes have appeared in many C++ books, beginning with the first edition of Bjarne Stroustrup&#146;s <I>The C++ Programming Language</I>, and pre-standard complex number classes shipped with cfront and other early compilers. The C++ Standard includes a complex number class, but it differs from the pre-standard version in an important way: it&#146;s a template. That, too, is a lesson from Fortran&#146;s complex numbers. In Fortran, you declare single-precision complex numbers to be of type <B>COMPLEX*8</B> (i.e., twice the size of a single-precision real number) and double-precision complex numbers to be of type <B>COMPLEX*16</B>. C++ has three distinct floating-point types, <B>float</B>, <B>double</B>, and <B>long double</B>; users should have the same choice of precision for complex numbers that they do for ordinary real numbers.</p>
<p>Here&#146;s a simple test program, just to show what C++&#146;s complex numbers look like:</p>

<pre>
#include &lt;complex&gt;
#include &lt;iostream&gt;

int main()
{
  std::complex&lt;double&gt; z1, z2;
  std::cout &lt;&lt; "z1 -&gt; ";
  std::cin &gt;&gt; z1;
  std::cout &lt;&lt; "z2 -&gt; ";
  std::cin &gt;&gt; z2;

  std::complex&lt;double&gt; z3 = 
    z1 * std::exp(z2);
  std::cout &lt;&lt; "Result: " &lt;&lt; z3 
            &lt;&lt; std::endl;
}
</pre>

<p>There should be no surprises here: we&#146;re using the same syntax to work with variables of type <B>complex&lt;double&gt;</B> that we would use with <B>double</B> or <B>float</B>. Running the program, we would see something like this:</p>

<pre>
z1 -&gt; (1, 3)
z2 -&gt; (0.5, 0.5)
Result: (-0.924428,5.13111)
</pre>

<p>Complex output always looks like this: the number is written as an ordered pair, with the real part followed by the imaginary part. That&#146;s also the usual form for complex input, but, as a special convenience, the library will also accept a number that&#146;s written as the real part alone. So, for example, our test program will also accept these inputs:</p>

<pre>
z1 -&gt; 2
z2 -&gt; (0, 3.14159265)
Result: (-2,7.17959e-09)
</pre>

<p>The standard library provides the usual functions to decompose a complex number into its component parts or to build one out of those parts: <B>std::real(z)</B> and <B>std::imag(z)</B> for the real and imaginary components, <B>std::abs(z)</B> and <B>std::arg(z)</B> for the magnitude <a href="#2">[2]</a> and angle, <B>std::conj(z)</B> for the complex conjugate <a href="#3">[3]</a>, and <B>std::polar(r, theta)</B> to create the complex number <I>r</I> <I>e</I><SUP>i<FONT FACE="Symbol">q</FONT></SUP>. You don&#146;t need to use any of these functions to create a complex number given its real and imaginary parts; you just use the class&#146;s constructor. For example:</p>

<pre>
std::complex&lt;float&gt; i(0, 1);
std::complex&lt;float&gt;z
  =std::polar(1, 0.785398163);
</pre>

<p>In addition to these essentially structural functions, the standard library also gives us complex overloads of the mathematical functions defined in <B>&lt;math.h&gt;</B>: <B>exp</B>, <B>log</B>, <B>log10</B>, <B>pow</B>, <B>sqrt</B>, <B>sin</B>, <B>cos</B>, <B>tan</B>, <B>sinh</B>, <B>cosh</B>, and <B>tanh</B>. For the most part there are no mysteries in these functions, but there is one small technical issue. For any complex number <I>z</I>, it&#146;s easy to see that <I>e</I><SUP>z</SUP> = <I>e</I><SUP>z</SUP>+2<SUP>i<FONT FACE="Symbol">p</FONT></SUP>. Since the natural logarithm is defined as the inverse of the exponential, this presents a problem: when we take the logarithm of a complex number, we&#146;ve got an infinite number of answers to choose from. When we take the logarithm of -1, should we get <I>i</I><FONT FACE="Symbol">p</FONT>, or -<I>i</I><FONT FACE="Symbol">p</FONT>, or 3<I>i</I><FONT FACE="Symbol">p</FONT>? The choice is essentially a matter of convention; following earlier programming languages, the C++ Standard says that the answer is <I>i</I><FONT FACE="Symbol">p</FONT>. Or more formally, what it says is that the <I>branch cut</I> for <B>std::log</B> lies on the negative real axis. The choice of branch cut is the same for <B>log10</B>, <B>pow</B>, and <B>sqrt</B>, all of which are similarly multi-valued &#151; and all of which can be defined in terms of <B>log</B>, hence the importance of defining the branch cuts the same way for all of them.</p>
<p>The inverse circular and hyperbolic functions, <B>sin<SUP>-1</SUP></B>, <B>cos<SUP>-1</SUP></B>, <B>tan<SUP>-1</SUP></B>, <B>sinh<SUP>-1</SUP></B>, <B>cosh<SUP>-1</SUP></B>, and <B>tanh<SUP>-1</SUP></B>, would present the same issue: they too are multi-valued, so they too require a choice of branch cut to be well-defined &#151; except that the issue doesn&#146;t arise, because the C++ Standard doesn&#146;t include them. Why not? Mainly because, at the time this portion of the C++ Standard was written, Fortran didn&#146;t have those functions either. The standardization committee decided (wisely, in my opinion) that this was an area where it was better to be conservative than to be innovative. </p>

<H3><FONT COLOR="#000080">Future Evolution</FONT></H3>

<p>As discussion begins on a future revision of C++, it&#146;s time to revisit decisions like this: <B>std::complex</B> is useful, but it has some minor annoyances that ought to be corrected.</p>
<p>First, the inverse trigonometric and hyperbolic functions point to an important issue: C compatibility. Standard C++ was designed to be compatible with C &#151; which meant C90, since that was the only Standard C that existed at the time. There&#146;s a new C Standard now, though, C99. C99 defines new math functions, including inverse functions like <B>acosh</B> and special functions like <B>erf</B> and <B>gamma</B>. Even more important, C99 includes complex numbers (not as classes, since C99 doesn&#146;t have classes, but as new built-in types), and the new C99 math functions are defined for both real and complex arguments. C compatibility is still an important goal; at the least, a future version of C++ probably ought to define the same functions that C does.</p>
<p>Second, while <B>std::complex</B> is integrated into the C++ I/O mechanism, it doesn&#146;t make as good a use of that mechanism as it ought to. The built-in types delegate formatting decisions to user-replaceable facets, but <B>std::complex</B> uses a single unmodifiable format. This can interact poorly with internationalization. Consider, for example, the following program, which combines complex output with a European locale:</p>

<pre>
#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;locale&gt;

int main()
{
  std::locale L("German");
  std::cout.imbue(L);
  std::complex&lt;float&gt; z(1.2, 0.3);
  std::cout &lt;&lt; z &lt;&lt; std::endl;
}
</pre>

<p>Using the latest version of Microsoft C++, the output is:</p>

<pre>
(1,2,0,3)
</pre>

<p>This is hardly satisfactory, and there&#146;s no good mechanism for users to do anything better.</p>
<p>Finally, while <B>std::complex</B> is a template, it&#146;s an odd sort of template: it&#146;s illegal to instantiate it for any types other than <B>float</B>, <B>double</B>, or <B>long double</B> <a href="#4">[4]</a>. There&#146;s a reason for that restriction: it&#146;s not clear how implementors could write a fully general template for, say, <B>std::sin(const std::complex&lt;T&gt;&amp; z)</B>. There are a number of possibilities. We might, for example, require complex <B>sin</B> to be implemented in terms of specified real transcendental functions. Or, alternatively, we might allow <B>std::complex&lt;T&gt;</B> to be instantiated for arbitrary types but define transcendental functions only for the three built-in floating-point types. For the C++ Standard, we chose the simplest solution of all, but a future version of C++ may wish to do something more elaborate.</p>
<p>Complex numbers are a well-known example of an abstract data type, and <B>std::complex</B> is one of the simplest classes in the Standard C++ library. Despite that simplicity, <B>std::complex</B> still presents nontrivial design issues. Several of the obvious candidates for library extensions involve <B>std::complex</B>.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1] That&#146;s not such a foregone conclusion as it might seem! Java, for example, doesn&#146;t satisfy these criteria: it doesn&#146;t have operator overloading for user-defined types. Similarly, I found implementing complex numbers in the original version of Eiffel more difficult than I had expected. See my article &#147;Implementing a Complex Number Class in Eiffel,&#148; <I>Eiffel Outlook</I>, 1995.</p>
<p><a name="2"></a>[2] There&#146;s also another function, <B>std::norm</B>, which returns the square of the absolute value. The name <B>norm</B> is now somewhat controversial; I&#146;m one of the people responsible for it. I&#146;m afraid there&#146;s no deep significance to the name: we chose it because |<I>z</I>|<SUP>2</SUP> was obviously an important operation, and we simply couldn&#146;t think of a better name for it. [How about <B>norml</B>? &#151;cda]</p>
<p><a name="3"></a>[3] The complex conjugate of <I>z</I> is written as <IMG align="middle" SRC="spechar.gif">. If, <I>z</I> = <I>x</I> + <I>iy</I> then <IMG align="middle" SRC="spechar.gif"> = <I>x</I> - <I>iy</I>.</p>
<p><a name="4"></a>[4] The C++ Standard, &#167;26.2, paragraph 2, says &#147;The effect of instantiating the template complex for any type other than <B>float</B>, <B>double</B>, or <B>long double</B> is unspecified.&#148; </p>

<p><i><B>Matt Austern</B> is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <b>austern@research.att.com</b>.</p>

</blockquote>
</body>
</html>

