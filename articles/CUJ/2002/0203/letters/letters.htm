<HTML>   
     <HEAD>
<TITLE>March 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I greatly enjoyed the December 2001 <I>CUJ</I> issue, but I have a problem with Koenig &amp; Moo&#146;s first example in their column on <B>for</B> and <B>while</B> loops. They find the sum of the integers from 1 to 10 using a loop, an <B>O(n)</B> solution, but a constant time solution was devised some time ago!</p>
<p>By noting that</p>

<pre>
1+10 = 2+9 = 3+8 = ... = 11
</pre>

<p>we can deduce the sum</p>

<pre>
1+2+...+10 = 11*10/2 = 55
</pre>

<p>and in general, the sum of the integers <B>1..n</B> is <B>(n+1)n/2</B>.</p>
<p>Of course, the purpose of the article was not to demonstrate the best way to sum series of integers, but I found the use of such an inferior algorithm distracting. Their second example would have sufficed for the entire article.</p>
<p>I am of course nitpicking, but everybody needs a hobby. Keep up the great work;)</p>
<p>Regards,</p>
<p>Patrick King</p>

<p><I>You are quite correct that it is easy to compute the sum of the first </I><B>n</B><I> integers without actually adding the integers. In that sense, the second example,</I></p>

<pre>
for (Node* p = head; p; p-&gt;next)
{ /* ... */ }
</pre>
<p><I>is more satisfying. However, in presenting a language feature, we often find it useful to choose a first example that is obvious in all respects except for its use of the feature. That way, the reader doesn&#146;t have to think of anything else.</I></p>
<p><I>With that strategy in mind, the second example might be too distracting. To understand it, one has to understand the meaning of the </I><B>-&gt;</B><I> operator and to know that using a pointer as a condition implicitly compares that pointer to zero. Of course, these facts are common knowledge to many C and C++ programmers, but not to all of them &#151; especially if they have approached C++ in the way that our book </I>Accelerated C++<I> recommends. In that case, they may well understand how to use containers and iterators and may never even have written a pointer.</I></p>
<p><I>For these reasons, we hope that you will forgive our choice of a deliberately trivial first example.</I></p>
<p><I>Regards,</I></p>
<p><I>Andrew Koenig<br>
Barbara E. Moo</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I was reading the article, &#147;C++ Made Easier: A New Look at <B>for</B> Statements&#148; (December 2001), and thoroughly enjoyed the way Andrew Koenig and Barbara E. Moo have put together this discussion on when one would choose to use a <B>for</B> or <B>while</B> statement.</p>
<p>There is a place in the article where the authors have advocated the use of:</p>

<pre>
while(*p != &#146; &#146; ) ++p;
</pre>

<p>to</p>

<pre>
for( ; *p != &#146;  &#146;; ++p);
</pre>

<p>I, however, believe that there are places where the <B>for</B> statement without the initialization part is a better alternative to a <B>while</B> statement. Imagine a situation where one would have to iterate through a list of elements and based on its type or some condition decide as to whether or not to process it. When we do not want to process an element, we just continue with the other elements. For example:</p>

<pre>
while(*p!=&#146; &#146;){
  if ( p-&gt;type != the type we expect it
       to be ){
    ++p;
    continue;
  }
  process element....
  ......

  if( the element does not satisfy some
      other condition ){
    ++p;
    continue;
  }
  .....
  ++p; // we repeat the increment 
       // statement more than one time
       // in the code
}
</pre>

<p>the same loop written with a <B>for</B> statement look like this:</p>

<pre>
for( ; *p != &#146;  &#146;; ++p){
  if ( p-&gt;type != the type we expect it
       to be )
    continue;
  process element....
  ......

  if( the element does not satisfy some
      other condition )
    continue;
  .....
}
</pre>

<p>I would personally prefer the one written with a <B>for</B> statement in this case as I would not have to repeat the increment instruction every so often in the code. One might argue that if there are so many <B>continue</B>s in the loop, then the loop is not well designed, but we still see a lot code that resembles the above-mentioned scenario. We might first write a loop with a <B>while</B> statement, and somebody else adds a condition check in the code with a <B>continue</B> on failure or success. This would go on until one fine day, we might have a loop with <B>n</B> <B>continue</B>s.</p>
<p>The authors have very clearly pointed out that they strongly prefer <B>while</B> to <B>for</B> when one does not have to declare and initialize a variable. However, where we use what kind of a loop should be completely a matter of choice.</p>
<p>With Regards,</p>
<p>Vivek Venkatesan<br>
Design Engineer<br>
IBM</p>

<p><I>Your example points out a context that we did not explore in which it might make sense to prefer a </I><B>for</B><I> to a </I><B>while</B><I>: when each iteration of the loop corresponds to a single value of the control variable.</I></p>
<p><I>Loops with that property usually initialize the control variable at the beginning, which is why we didn&#146;t mention explicitly the case where they don&#146;t do so. In your example, for example, we would expect it to be more common to see:</I></p>

<pre>
for (p = buffer; *p != &#146; &#146;; ++p) {
  // ...
}
</pre>

<p><I>than to see</I></p>

<pre>
for ( ; *p != &#146; &#146;; ++p) {
  // ...
}
</pre>

<p><I>Nevertheless, the second form does occur from time to time, and if the loop really does have a unique value of </I><B>p</B><I> that corresponds to each iteration, a </I><B>for</B><I> statement may well be the most appropriate form.</I></p>
<p><I>We completely agree with you that recommendations &#151; ours and others&#146; &#151; should never override programmers&#146; responsibility to think about what they do and exercise their judgment.</I></p>
<p><I>Regards,</I></p>
<p><I>Andrew Koenig<br>
Barbara E. Moo</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I am creating a C++ class that will contain and operate on many different component classes.</p>
<p>(Call the big parent class <B>vehicle</B>.)</p>
<p>Although most of the component classes will usually be created by a parent <B>vehicle</B>, I want these component classes to be able to exist independently of <B>vehicle</B>.</p>
<p>(Call one of these component classes <B>radio</B>.)</p>
<p>There are times however in the component classes where I need to get a handle to the parent <B>vehicle</B> if present. (<B>radio</B> needs to get a handle to the battery, which is only known by the <B>vehicle</B>.)</p>
<p>On to the question: Any thoughts on how to set up an interface so <B>radio</B> can get a handle on its parent <B>vehicle</B>? I am hoping there is some solution in which I do not have to store a pointer to parent <B>vehicle</B> in every base component class.</p>
<p>In MFC apps, this problem is solved with the use of <B>AfxGetApp</B> where the <B>vehicle</B> is a <B>CWinApp</B> object. However, unlike MFC apps, which are constrained to have a single <B>CWinApp</B> object, I want to allow my program to have more than one <B>vehicle</B> in it.</p>
<p>Any thoughts ?</p>
<p>Thanks,</p>
<p>Matt McGarvey</p>

<p><I>If a radio can only be in one vehicle at a time, then it makes sense to have a pointer to the parent and a member function to yield that pointer. If a component can be connected to multiple parent objects, then you might want to register interest between the objects a la the Observer Pattern. In the absence of more information, that&#146;s the best I can come up with. &#151; cda</I></p>

<hr><p>Hello,</p>
<p>This may be a question you get a lot; if so I apologize for that. I am looking for some sample C++ code to help me hone my programming skills and to learn OOP. The books I have looked at are either mostly theoretical or contain only short snippets of code. What would be extremely helpful would be a complete working program that follows the guidelines set out by the gurus. I think a medium-sized program would be the most valuable. Perhaps something between 1k and 10k lines of code. It would also be nice if it was something that was useful or interesting to the average person (a game would be great). Another nicety would be that there are obvious features that can be added to the project. This way the programmer could get hands-on experience working with the code. I believe a professionally constructed piece of software of this nature would prove extremely useful for countless programmers at many different skill levels.</p>
<p>Michael Solem</p>

<p><I>As you imagine, we cannot run such large code examples in </I>CUJ<I>. My book (</I>C &amp; C++ Code Capsules<I>) has several chapters with large code projects, but they are somewhat beyond what a beginner would like to see (that&#146;s the innate difficulty with fulfilling your request). John Lakos&#146; book (</I>Large-scale C++ Software Design<I>) is filled with wisdom for building large C++ projects, but again, it doesn&#146;t have lengthy code excerpts. Let&#146;s see if other readers may be able to help. &#151; cda</I></p>

<hr><p>Re: Editor&#146;s Forum, January 2002</p>
<p>One <B>valarray</B> use: I used <B>valarray</B> in some scientific C++/Fortran-90 code and found implementations from several vendors to be defective in several ways &#151; especially exception-safety. I&#146;ve provided fixes to some and have even extended it to allow for optional externally-provided storage (e.g., to wrap a <B>valarray</B> around a too-large-to-copy Fortran array).</p>
<p>Regarding language definition committees: from the perspective of an HPC programmer, issues such as large arrays (64-bit indexing) and cross-language interfacing need to be considered by those committees specifying languages so that we practitioners are not burdened with the need to create hard-to-port hacks to workaround the &#147;undefined behavior&#148; cop-outs and imprecision found in the language specs. Saying that &#147;interfacing with other languages is beyond our scope&#148; is not good enough. C++&#146;s <B>extern "C"</B> and other language&#146;s C interfacing mechanisms are a helpful start, but more needs to be done by coordinating groups &#151; e.g., Fortran name-mangling, strings, exact basic type sizes (C9X), exceptions, memory allocation, GC, initialization, finalization, concurrency, etc., to facilitate real-world multi-platform multi-language application development.</p>
<p>It is time to place the needs of application programmers above those of compiler writers &#151; after all we outnumber them by several orders of magnitude. Survey the audience and practical usage of the languages. Every major language committee should include members that are experienced practitioners in other related (in practice) languages so that crucial compatibility and cross-language interfacing issues are not overlooked.</p>
<p>Todd Plessel</p>

<p><I>Concerning </I><B>valarray</B><I>, one of the designers of that class recently made the following comment in a private email: &#147;Believe it or not, I never use </I><B>valarray</B><I> any more. It was designed with an architecture in mind (the vectorized supercomputer) that is obsolete.&#148; Numerical C++ programmers seem to be migrating to libraries like Blitz.</I></p>
<p><I>Some (but not all) of your recommendations for C++ extensions are currently being considering by the standards committee for the next version of the language (C++0x). The committee is open for all organizations that want to participate. It is true that implementors sit on the committee, but many user representatives also participate. &#151; cda</I></p>
</blockquote></body></html>
