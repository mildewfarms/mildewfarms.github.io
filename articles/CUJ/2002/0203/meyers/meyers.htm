<HTML>   
     <HEAD>
<TITLE>March 2002/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: VLAs, Part 4: VLA typedefs and Flexible Array Members</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>The Rest of the Story on variable-length arrays in C99. Yes, they&#146;re well-behaved and very flexible, but use them with caution.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>My last few columns have dealt with VLAs (Variable Length Arrays) in C99 [<a href="#1">1</a>, <a href="#2">2</a>, <a href="#3">3</a>]. VLAs are arrays with run-time expressions instead of compile-time constant expressions for the bounds of the array. The bounds expression is evaluated when the declaration of a VLA is reached inside of a block, and the array has the calculated bounds until its lifetime ends (usually by exiting the block).</p>
<p>This column discusses the remaining feature of VLAs, VLA <B>typedef</B>s. I will also discuss flexible array members, a C99 feature similar to VLAs.</p>

<H3><FONT COLOR="#000080">VLA typedefs</FONT></H3>

<p>As I discussed in previous columns, the size of a VLA is needed at run time to perform indexing and address arithmetic, so the compiler must make arrangements to store the size of the array somewhere. However, the size is not stored in the array object itself. It is not stored as part of the pointer if you have a pointer to a VLA. The size of a VLA is an attribute of the VLA type <a href="#3">[3]</a>.</p>
<p>Consider the following:</p>

<pre>
void ex1(int n)
{
    char (*pvla)[n];
     n += 10;
    printf("%zu", sizeof *pvla);
}
</pre>

<p><B>pvla</B> is a pointer to a VLA of <B>n</B> <B>char</B>s. In order to do pointer arithmetic with <B>pvla</B> or in order to be able to return the size of the objects to which <B>pvla</B> points, the compiler must calculate the size of a VLA of <B>n</B> elements of type <B>char</B>. Since the C99 rules say that a VLA&#146;s size is fixed at the point the declaration of its type is encountered, the compiler must perform the calculation of the array&#146;s size at the point of the declaration to protect against the value of the bounds expression changing later in the program. The function <B>ex1</B> prints the size of the array to which <B>pvla</B> points. Since the size of an array of <B>n</B> elements of type <B>char</B> is just <B>n</B>, that is the value that the function prints. However, it prints the original value of <B>n</B> passed to the function, not the value of <B>n</B> after <B>10</B> has been added to it.</p>
<p>Note that the function <B>ex1</B> works even though <B>pvla</B> is uninitialized stack trash. The program is perfectly valid because <B>sizeof</B> does not actually evaluate its argument: the uninitialized pointer <B>pvla</B> is not actually dereferenced. The <B>sizeof</B> operator only inspects its operand in order to determine the resulting type, and in C, size is an attribute of the type of an expression. The function <B>ex1</B> makes this clear. <B>pvla</B> does not actually point at an array, so the size information could not be stored as part of the array object. Likewise, <B>pvla</B> is uninitialized stack trash, so the size information could not be part of its value.</p>
<p>Instead, compilers generate code to record the size of VLA types in the program, not the VLA objects themselves. For every VLA type that occurs in a block, the compiler creates an unnamed automatic temporary variable that holds the size of that VLA type during its lifetime. When the type is executed by program flow of control reaching a declaration or cast involving a VLA type, the size of the VLA type is stored in the temporary variable. If the size of a VLA is needed, then the value is fetched from the temporary variable associated with the VLA type. When the block containing the VLA type exits, then the temporary variable is deallocated along with all of the other automatic variables.</p>
<p>Of course, a clever compiler might not create a temporary for every VLA type in a block. If the compiler can prove that several of the temporaries always hold the same value or that the temporaries are not used later in the block, the compiler might optimize them away.</p>
<p>Clearly, C99 compilers are proficient in handling the bookkeeping associated with VLA types. The C99 language builds upon that by allowing VLA <B>typedef</B>s.</p>

<pre>
void ex2(int n)
{
    typedef int VARRAY[n];
    n += 10;
    VARRAY a1, a2;
}
</pre>

<p>The <B>typedef</B> declares <B>VARRAY</B> to be the name of the type &#147;variable length array of <B>n</B> elements of type <B>int</B>,&#148; where <B>n</B> has the value it had at the point the <B>typedef</B> declaration was executed. <B>VARRAY</B> is used to declare <B>a1</B> and <B>a2</B> to be VLAs of <B>n</B> elements of type <B>int</B> where <B>n</B> has the value it had when the <B>typedef</B> was executed. Thus, if you make the call <B>ex2(5)</B>, <B>a1</B> and <B>a2</B> are both VLAs of five <B>int</B>s even though the value of <B>n</B> has been changed to 15 by the time <B>a1</B> and <B>a2</B> are declared. Of course, <B>a1</B> and <B>a2</B> can be used like any other arrays of five <B>int</B>s.</p>
<p>VLA <B>typedef</B>s follow the same rules as other VLA types. They can only appear in a block: they cannot appear at file scope. (VLA parameters are permitted because parameters are considered to be local to the function body.) The size of a VLA <B>typedef</B> is constant during its lifetime. The size is fixed when the <B>typedef</B> is executed. The size is no longer associated with the VLA <B>typedef</B> when the lifetime ends by either exiting the block or branching backwards in the block to a point before the <B>typedef</B> declaration <a href="#2">[2]</a>. VLA <B>typedef</B>s, like other VLAs, cannot be <B>struct</B> or <B>union</B> members.</p>

<H3><FONT COLOR="#000080">Flexible Array Members</FONT></H3>

<p>The last rule above about VLAs probably disappoints some of you. There are times when it would be useful for a VLA to be a <B>struct</B> member. While C99 does not permit that, it does permit a similar feature that standardizes an extension that some pre-C99 compilers permit in one form or another.</p>
<p>In C99, the last member of a <B>struct</B> may be an array with no bounds expression, called a flexible array member. A <B>struct</B> ending with a flexible array member allows you to have a <B>struct</B> object that ends with an array of any size you choose, if you are willing to do a little extra work. In fact, every different object with that <B>struct</B> type may end in a different-sized array.</p>
<p>The C99 compiler treats the flexible array member mostly like it is a zero-length array (ignoring the fact that zero-length arrays are invalid in C). So, the size of <B>struct</B> containing the flexible array member is identical to the offset in bytes of the flexible array member. If you just declare an object of a <B>struct</B> type with a flexible array member, you get an object that behaves normally except that no space is allocated for the elements of the flexible array member, and thus it is invalid to attempt to use those array elements.</p>
<p>If that was the full story of flexible array members, they would not be very useful. But, that brings us to that matter of extra work: if you allocate a <B>struct</B> with a flexible array member yourself on the heap, you control how much memory the object uses. If you allocate extra memory, it can be used for the elements of the flexible array member. It is valid to access any flexible array elements for which you allocated space. For example, if you allocate enough extra space for a three-element array, you can access elements zero through two of the flexible array member.</p>
<p><a href="list1.htm">Listing 1</a> shows the use of a flexible array member. Some programming languages store strings not as a zero-terminated sequence of bytes like C, but as a count followed by the number of bytes specified by the value of the count. PL/I uses such a representation for its &#147;varying strings.&#148; Java uses a similar representation (including an extra descriptor member) for string literals in class files. In <a href="list1.htm">Listing 1</a>, the <B>struct PLIstring</B> gives the layout of a PL/I string. The member <B>s</B> is the flexible array member whose elements hold the characters in the string. The function <B>toPLI</B> converts the C string that is its argument into a newly allocated PL/I string on the heap. Note that a call to <B>malloc</B> passes not just the size of <B>struct PLIstring</B>, which is the size of the <B>struct</B> without any array elements, but it adds the size of the array that is to appear at the end of this particular <B>PLIstring</B> object, which is the value <B>len</B>.</p>
<p>If you run the program in <a href="list1.htm">Listing 1</a> using the command:</p>

<pre>
listing1 this is a test
</pre>

<p>you get the output (the first line is system specific):</p>

<pre>
count=12, s="listing1.exe"
count=4, s="this"
count=2, s="is"
count=1, s="a"
count=4, s="test"
</pre>

<p>There are various rules that flexible array members must follow:</p>

<UL><LI>   Only the last member of a <B>struct</B> may be a flexible array member. This rule follows from the fact that any extra space you allocate dynamically for the <B>struct</B> appears at the end of the <B>struct</B>, so that is where the flexible array should be.</LI>
<LI>   There must be at least one named member before the flexible array member. This avoids problems with zero-sized <B>struct</B>s, since the flexible array itself takes up no storage.</LI>
<LI>   A <B>struct</B> with a flexible array member may be a member of a <B>union</B>, but it may not be a member of another <B>struct</B>. A <B>union</B> containing a nested flexible array member may be a member of another <B>union</B>, but it may not be a member of a <B>struct</B>.</LI>
<LI>   You may not have an array whose elements are <B>struct</B>s with a flexible array member. You may not have an array whose elements are <B>union</B>s who have a nested flexible array member.</LI>
</UL>

<p>Unlike VLAs, the C implementation keeps no run-time information about the size of a flexible array member. It is the programmer&#146;s responsibility to allocate the space for the array and remember the number of elements in the array. If you assign a <B>struct</B> with a flexible array member or pass it as an argument to a function (not through a pointer), then the compiler generates code based on its compile-time information about the <B>struct</B> type. Since the compiler believes that the flexible array member has no elements, no elements will be copied during assignment. If you want to assign <B>struct</B>s that contain flexible array elements, you must make sure the target has the proper amount of memory allocated and then use <B>memcpy</B> or a loop to copy the flexible array elements.</p>
<p>As mentioned before, some pre-C99 compilers permit flexible array members. Some of those compilers use a slightly different syntax: rather than the flexible array member having no bounds inside the <B>[]</B>, the compilers permit the array bounds to be zero. (Officially, arrays of zero elements are not permitted in C.) Programs that use the <B>[0]</B> form of the extension can be converted to C99 merely by removing the <B>0</B>.</p>
<p>Unfortunately, in some cases, programmers relied on tricks before C99 to get the effect of flexible array members. Perhaps the most common form of that trick is to declare the fake flexible array with bounds <B>1</B>. When allocating the <B>struct</B> with <B>malloc</B>, extra space for an array of one less than the desired number of elements was allocated since the <B>struct</B> already had one element built in. While this technique is likely to work for most C and C++ implementations, it does break the rules. A small number of C implementations generate code to check if array indexes are in bounds, and they will complain about any index other than <B>0</B> being used with the fake flexible array. (Such checking is automatically turned off when using a real C99 flexible array.)</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Randy Meyers. &#147;The New C: Why Variable Length Arrays?&#148; <I>C/C++ Users Journal</I>, October 2001.</p>
<p><a name="2"></a>[2]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 2,&#148; <I>C/C++ Users Journal</I>, December 2001.</p>
<p><a name="3"></a>[3]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 3: Pointers and Parameters,&#148; <I>C/C++ Users Journal</I>, January 2002. </p>

<p><i><B>Randy Meyers</B> is a consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

<h4><a href="../../../source/2002/mar02/meyers.zip"></a></h4>
</blockquote></body></html>
