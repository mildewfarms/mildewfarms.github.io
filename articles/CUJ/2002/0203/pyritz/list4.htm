<HTML><HEAD>
<TITLE>March 2002/A Technique for Efficient Logging and Monitoring of Real-Time Systems/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: The result of the code generator running on <a href="list3.htm">Listing 3</a></A></h4>
<pre>
class RunCall
{
public:
  void run()
  {
    SimpleCall call( "630-979-2001", "630-979-2000" );
  
    // Start the call. This will put us in a transient state.
    call.inputMakeCall();
    
    // Force an error to occur -- i.e., the "make call"
    // input is not allowed in the transient state.
    call.inputMakeCall();

    // Simulate a network route complete input
    call.inputRouteComplete();
  
    // Simulate the called party going off hook
    call.inputAnswer();

    // Simulate the called party hanging up
    call.inputDisconnectCalled();

    // Simulate the called party going back off hook
    call.inputAnswer();

    // Simulate the calling party going on hook
    call.inputDisconnectCalling();

    // Simulate call billing at end of call
    call.inputBillCall();

    // Done with call
    LogRecord lrecWATCH1(INFO, 1, 2, 53, 16, __LINE__); 
    lrecInsert( lrecWATCH1, 17, call ); 
    LogStore::GetInstance()-&gt;store(&amp;lrecWATCH1);
  }
};

main()
{
  RunCall r;
  
  try
  {
    r.run();
    LogStore::GetInstance()-&gt;outputAll(cout);
  }
  catch( CallStateException&amp; ex )
  {
    LogRecord lrecERROR1(MAJOR, 1, 11, 54, 16, __LINE__); 
    lrecInsert( lrecERROR1, 55, ex.getMsg().c_str() );
    LogStore::GetInstance()-&gt;store(&amp;lrecERROR1);
  }
}
&#151; End of Listing &#151;</pre></body></html>
