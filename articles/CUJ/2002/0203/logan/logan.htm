<HTML>   
     <HEAD>
<TITLE>March 2002/Widgets in Gtk+</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Linux</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Widgets in Gtk+</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Syd Logan</FONT></H3>

<BLOCKQUOTE>
<p>A detailed How-To for using and extending GNOME&#146;s developer toolkit.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Gtk+ is one of several GUI (graphical user interface) toolkits currently in use by Linux developers. <a href="fig1.htm">Figure 1</a> illustrates some of the choices currently available. Of these, Gtk+ is of special interest in the Linux world, as it is the foundation upon which the GNOME desktop (&lt;www.gnome.org&gt;) is based. Qt is the toolkit that sits behind the other major Linux desktop, KDE.</p>
<p>As you can see, each of these toolkits is layered above the X Window System libraries, the most important of these libraries being Xlib. The reason for this layering is simple. While Xlib could be used to create a GUI application, it is far too primitive for such a task. The Xlib API exposes functions that allow one to, among other things, create simple windows; draw lines, circles, and text; and request and receive events (mouse-button presses and keyboard presses for example). But most application developers would prefer to work with abstractions such as buttons, menus, scrollbars, toolbars, and so forth, and these are what a widget set like Gtk+ provides. A widget is to Xlib what C is to programming in assembly.</p>
<p>For an example of how a toolkit and widget set might be used, let&#146;s look at a trivial application such as the one illustrated in <a href="fig2.htm">Figure 2</a> (see also <a href="list1.htm">Listing 1</a>). This Gtk+ application creates three widgets. A dialog (<B>GtkDialog</B>) provides a window that consists of two separate areas: one for content and the other for controls. A label widget (<B>GtkLabel</B>) is added into the content area, and a pushbutton (<B>GtkButton</B>) is added into the control area. The pushbutton widget, when clicked by the user, will emit a &#147;clicked&#148; signal. A callback function (<B>MyExitApp</B>) is registered with the button widget, associating it with the &#147;clicked&#148; signal. This instructs the button widget to call <B>MyExitApp</B> whenever the user clicks on the Quit button. <B>MyExitApp</B>, when invoked, calls <B>exit(2)</B>, which is enough for the purposes of this example. Writing such an application in Xlib would be much more difficult.</p>

<H3><FONT COLOR="#000080">Widget Types</FONT></H3>

<p>Before looking at how to write a widget, it is useful to begin with a look at the kind of widgets that Gtk+ supports. There are three kinds to consider: control widgets, container widgets, and composite widgets.</p>

<H4><FONT COLOR="#000080">Control Widgets</FONT></H4>

<p>GtkButton</B> is the canonical example of a control widget. <B>GtkButton</B> is an attempt to model the look, feel, and behavior of buttons as they exist in the real world. Like real buttons, they display markings that convey to the user what will happen when they are pressed. Like real buttons, they provide feedback letting you know that they are being pressed. And, most importantly, they do something interesting when they are pressed, just like real buttons.</p>
<p>A control widget usually is at the bottom of the widget instance hierarchy, as it does not manage or contain other widgets. <B>GtkButton</B> is an example of a control widget that does in fact contain another widget, in this case a label. However, since a button can&#146;t be used to arrange arbitrary widgets (like an instance of <B>GtkBox</B>), it is a control widget, not a container widget.</p>

<H4><FONT COLOR="#000080">Container Widgets</FONT></H4>

<p>In contrast to a control widget, a container widget does not represent a real-world object that the user can interact with. Rather, the job of a container widget is to visually arrange a set of control widgets for the user, in some meaningful way, according to some predefined heuristic that is associated with the container widget class. For example, a paned widget (<B>GtkPaned</B>, see <a href="fig3.htm">Figure 3</a>) splits the area of a window that it manages into two pieces. The developer can add arbitrary widgets to either portion of the window, and the user can (if the application allows it) change the relative size of these areas at run time. A container can manage other containers, allowing the Gtk+ developer to create visual layouts that are of arbitrary complexity, constrained by the capabilities provided by the container widget classes that are being combined and constrained by the good esthetic sense of the developer. <B>GtkBox</B> is perhaps the most flexible and the most widely used container widget provided by Gtk+.</p>

<H4><FONT COLOR="#000080">Composite Widgets</FONT></H4>

<p>A composite widget is a collection of control widgets and container widgets that have been organized in some meaningful way. While a composite widget is visible to the user and can be interacted with, it is different from a control widget in that container widgets generally are higher than control widgets in the widget instance hierarchy of the application. A typical example of a composite widget is <B>GtkColorSelectionDialog</B> (<a href="fig4.htm">Figure 4</a>), which is an instance of <B>GtkColorSelection</B>, and some instances of <B>GtkButton</B>, all packed into instances of <B>GtkBox</B>, <B>GtkFrame</B>, and <B>GtkButtonBox</B>.</p>

<H3><FONT COLOR="#000080">Gtk+ Objects</FONT></H3>

<p>Gtk+ is an object-oriented toolkit (written in a non object-oriented language, C). Implementing object-oriented worlds in C is nothing new: the Xt Intrinsics did this 15 or so years ago. Many of you, using simple C features like function pointers, have created object-oriented worlds in some of your own program designs. Such is the case with Gtk+.</p>
<p>Classes in Gtk+ become increasingly specialized as one descends down the slopes of the Gtk+ widget class hierarchy. The most abstract Gtk+ class, <B>GtkObject</B>, provides functionality that is important to all of the classes below it. The ability of an object to send a signal to an application (such as when a button is &#147;clicked&#148;) is rooted in the <B>GtkObject</B> class, as are methods that allow attributes of an object instance to be set or read (either by other objects, or an application). <B>GtkObject</B> also provides methods that are invoked when a widget instance is destroyed and during application shutdown.</p>
<p>Immediately below <B>GtkObject</B> are a few important classes, but the class of most interest to us is <B>GtkWidget</B>. All control and container widgets are instances of <B>GtkWidget</B> (just as widgets are instances of <B>GtkObject</B>). <B>GtkWidget</B> extends the <B>GtkObject</B> class to support features that user-interface widgets need.</p>

<H3><FONT COLOR="#000080">GtkWidget</FONT></H3>

<p>So, what exactly does <B>GtkWidget</B> provide? Let&#146;s take a look at the definition of <B>GtkWidget</B> to find out. Each widget class consists of data structures and assorted macros and <B>#define</B>s, as well as an API, all packaged up in an include file. The naming convention for the include file is simple: <B>GtkWidget</B> is defined in <B>gtkwidget.h</B>, <B>GtkButton</B> is defined in <B>gtkbutton.h</B>, and so forth. A C source file implements the functionality of the widget. The name of the C source file is usually the same as the include file, except for the <B>.c</B> suffix. Let&#146;s take a look at <B>GtkWidget.h</B>, focusing on two important data structures: the widget instance <B>struct</B> and the widget class <B>struct</B>. <a href="fig5.htm">Figure 5</a> illustrates the difference between a widget instance hierarchy, which exists at run time (gray boxes), and a widget class hierarchy, which organizes widget classes based upon their functionality (white boxes).</p>

<H3><FONT COLOR="#000080">Widget Instance struct</FONT></H3>

<p>The first important data structure, <B>struct _GtkWidget</B> (see below), is used to represent an instance of a widget. Instances of a widget are returned by the widget creation function associated with the widget class (e.g., <B>gtk_button_new</B>, <B>gtk_clist_new</B>, <B>gtk_tree_new</B>, etc.). The widget instance <B>struct</B> will vary at run time from widget to widget. For example, each widget that creates a window will have its own value for the window field, its own state (<B>GTK_STATE_NORMAL</B>, <B>GTK_STATE_ACTIVE</B>, etc.), and its own parent widget. Thus, the widget instance <B>struct</B> holds, at run time, what is different among individual instances of a widget class. The style field holds a pointer to a <B>struct</B> of type <B>GtkStyle</B>. Information provided here is used by the widget to determine what fonts and colors it should use in each of its various states and is the basis by which theme support in Gtk+ and GNOME is provided.</p>

<pre>
struct _GtkWidget
{
  // a widget is an object
  GtkObject object;
  // per-widget flags
  guint16 private_flags;
  // standard state of widget
  guint8 state;
  // state prior to becoming disabled
  guint8 saved_state;
  // the name of the widget
  gchar *name;
  // style data for this widget
  GtkStyle *style;
  // how big the widget wants to be
  GtkRequisition requisition;
  // how big the widget is allowed to be
  GtkAllocation allocation;
  // the X window, if any, the widget
  // lives in
  GdkWindow *window;
  // the parent of the widget in the
  // instance hierarchy
  GtkWidget *parent;
};
</pre>

<p>Two fields in the widget instance <B>struct</B>, <B>requisition</B> and <B>allocation</B>, deserve special comment. Here they are:</p>

<pre>
struct _GtkRequisition
{
  gint16 width;     // desired width
  gint16 height;    // desired height
};

struct _GtkAllocation
{
  gint16 x;         // upper left corner of the widget, 
                    // x coordinate
  gint16 y;         // upper left corner of the widget, 
                    // y coordinate
  guint16 width;    // actual width of the widget
  guint16 height;   // actual height of the widget
};
</pre>

<p>A requisition is passed to each widget by its containing parent, allowing the widget to tell the containing parent how big it would like to be. The width and height values returned by the widget will depend upon the widget and its specific needs. A simple widget might return a constant width and height. A label widget would return the width and height that allows it to display its text using the font defined by the widget&#146;s style data. The size requisition process is a recursive one: if the child is a container, it will call down to its children to see how big they want to be and use these results to compute its own size request. So much for requisitions.</p>
<p>An allocation tells a widget how big it actually is, and where it is located on the screen. It defines the bounding box into which the widget draws itself. Events occurring within the bounding box (mouse-button and keyboard presses, <B>expose</B> events, etc.) will be routed to the widget by Gtk+ as they are received.</p>
<p>Notice that the first element of the <B>GtkWidget</B> instance <B>struct</B> is a <B>GtkObject</B>. This is how <B>GtkObject</B> is inherited by <B>GtkWidget</B>. It is like this all the way down the instance hierarchy, with each class including the widget instance <B>struct</B> of its immediate parent as the first element of its instance <B>struct</B>. The <B>GtkToggleButton</B> widget instance <B>struct</B>, shown below, illustrates how it inherits the <B>GtkButton</B> instance <B>struct</B>:</p>

<pre>
struct _GtkToggleButton
{
  GtkButton button;

  guint active : 1;
  guint draw_indicator : 1;

  GdkWindow *event_window;
};
</pre>

<p>Each instance of <B>GtkToggleButton</B> is an instance of <B>GtkButton</B>, plus additional data that is needed by toggle buttons (<B>active</B>, <B>draw_indicator</B>, and <B>event_window</B> in this case).</p>

<H3><FONT COLOR="#000080">Widget Class struct</FONT></H3>

<p>The widget class <B>struct</B> encapsulates the unique functionality of the widget class it represents. A portion of the widget class <B>struct</B> for <B>GtkWidget</B> is shown below. Inclusion of the parent class <B>struct</B> inside the widget class gives the widget class easy access to the parent class when needed. Widget writing, for the most part, amounts to creating your own widget class, including the widget class <B>struct</B> of the parent, overriding methods of the parent class, and adding new methods to the widget class as needed.</p>

<pre>
struct _GtkWidgetClass
{
  GtkObjectClass parent_class;
  guint activate_signal;
  guint set_scroll_adjustments_signal;
  
  void (* show) (GtkWidget *widget);
  void (* show_all) (GtkWidget *widget);
  void (* hide) (GtkWidget *widget);
  void (* hide_all) (GtkWidget *widget);
  void (* map) (GtkWidget *widget);
  void (* unmap) (GtkWidget *widget);
  void (* realize) (GtkWidget *widget);
  void (* unrealize) (GtkWidget *widget);
  void (* draw) (GtkWidget *widget, GdkRectangle *area);

...

  void (* size_request) 
    (GtkWidget *widget, GtkRequisition *requisition);
  void (* size_allocate) 
    (GtkWidget *widget, GtkAllocation *allocation);
  void (* state_changed) 
    (GtkWidget *widget, GtkStateType previous_state);

...
  
  gint (* event) (GtkWidget *widget, GdkEvent *event);
  gint (* button_press_event) 
    (GtkWidget *widget, GdkEventButton *event);
  gint (* button_release_event) 
    (GtkWidget *widget, GdkEventButton *event);
  gint (* motion_notify_event) 
    (GtkWidget *widget, GdkEventMotion *event);

...

};
</pre>

<p>GtkToggleButton</B>, for example, is a subclass of <B>GtkButton</B>. The complete widget class <B>struct</B> for <B>GtkToggleButton</B> is as follows:</p>

<pre>
struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;    // a toggled button is a 
                                  // button...

  void (* toggled) (GtkToggleButton *toggle_button);
};
</pre>

<p>As you can see, the <B>GtkToggleButton</B> class <B>struct</B> includes as its first element the <B>GtkButtonClass</B> class <B>struct</B> and adds to this a toggled function. You can deduce from this that a toggled button is exactly the same as a button, except it implements a toggled function. (The purpose of this function is outside the scope of this article.) Such a deduction is almost true, however, a widget class also overrides functions in the parent widget class (or higher), as required. This is done by creating new implementations of the functions and replacing the function pointers in the ancestor classes from within the <B>class_init</B> function. <a href="list2.htm">Listing 2</a> illustrates how <B>GtkToggleButton</B> does this. For those of you experienced with object-oriented development, it should be obvious that Gtk+ is cleverly making use of the facilities provided by C to manually implement what object-oriented languages like C++ provide for free. For some of you, this approach is worth serious study; you may someday find the need to build an object-oriented architecture within the constraints of C, and it is good to know that, with a bit of elbow grease, such an endeavor is possible.</p>
<p>Notice how the class argument can be assigned to <B>object_class</B>, <B>widget_class</B>, <B>container_class</B>, and <B>button_class</B> with casts. This is possible since the first member of a class <B>struct</B> is the class <B>struct</B> of the parent. Note that Gtk+ is limited to single inheritance only due to this layout of the class <B>struct</B>, although hacks do exist in <B>GtkWidget</B> so that the <B>GtkWidget</B> class can support a form of multiple inheritance. In the above code, <B>GtkToggledButton</B> overrides the <B>leave</B>, <B>enter</B>, <B>clicked</B>, <B>released</B>, and <B>pressed</B> functions of <B>GtkButton</B>; the <B>unmap</B>, <B>map</B>, <B>unrealize</B>, etc. functions of <B>GtkWidget</B>; and the <B>set_arg</B> and <B>get_arg</B> functions of <B>GtkObject</B>. The rest of the functions that are implemented by these ancestor classes are left untouched.</p>

<H3><FONT COLOR="#000080">Creating a Seven-Segment LED Widget</FONT></H3>

<p>The widget that I created for this article is capable of displaying a single, seven-segment LED. (<a href="fig6.htm">Figure 6</a> illustrates a set of <B>GtkSegment</B> widgets packed into a ticker widget, <B>GtkTicker</B>. Source for both widgets and the sample application are available at &lt;www.cuj.com/code&gt; and &lt;www.users.cts.com/crash/s/slogan/gtkbook/widgets.html&gt;). The application can create an instance of <B>GtkSegment</B>, set its value, and set its color to black, red, blue, green, or yellow.</p>
<p>The first step in creating this widget, once I had the concept in mind, was to determine where it belongs in the Gtk+ widget class hierarchy. If it were a container, which it is not, it would have been placed somewhere below <B>GtkContainer</B>. I decided to place it below <B>GtkMisc</B>, which inherits from <B>GtkWidget</B> and adds x and y padding and alignment attributes to the widget instance <B>struct</B>.</p>
<p>The next step was to find a class that inherits from <B>GtkMisc</B> and clone its source code (both the include file and C source). I decided that <B>GtkArrow</B> was the closest match. The next several steps were fairly boilerplate. First, I copied <B>gtkarrow.h</B> to <B>gtksegment.h</B>, and <B>gtkarrow.c</B> to <B>gtksegment.c</B>. Next, I opened <B>gtksegment.h</B> and did the following (case sensitivity is important):</p>

<OL><LI>replaced all instances of <B>ARROW</B> with <B>SEGMENT</B></LI>
<LI>replaced all instances of <B>Arrow</B> with <B>Segment</B></LI>
<LI>replaced all instances of <B>arrow</B> with <B>segment</B></LI></OL>

<p>The above substitutions will rename all functions, macros, and data structures in the include file to be compatible with <B>GtkSegment</B>.</p>
<p>Once this was completed, I turned my attention to the public APIs. As a result of the previous text substitutions, I was left with the following:</p>

<pre>
GtkType    gtk_segment_get_type   (void);
GtkWidget* gtk_segment_new        (GtkSegmentType   segment_type,
         GtkShadowType  shadow_type);
void       gtk_segment_set        (GtkSegment      *segment,
         GtkSegmentType   segment_type,
         GtkShadowType  shadow_type);
</pre>

<p>Some minor changes in the public API resulted in the changes shown here:</p>

<pre>
GtkType    gtk_segment_get_type(void);
GtkWidget* gtk_segment_new();
GtkWidget* gtk_segment_new_with_color(GtkSegmentColor color);
int       gtk_segment_set_color(GtkSegment *segment, 
  GtkSegmentColor color);
int       gtk_segment_set_value(GtkSegment *segment, 
  unsigned char value);
</pre>

<p>An <B>enum</B> and a <B>typedef GtkSegmentColor</B> are used to represent supported colors:</p>

<pre>
enum {
  GTK_SEGMENT_BLACK,
  GTK_SEGMENT_RED,      // default
  GTK_SEGMENT_GREEN,
  GTK_SEGMENT_BLUE,
  GTK_SEGMENT_YELLOW
};

typedef gint16 GtkSegmentColor;
</pre>

<p>The widget instance <B>struct</B> was then modified, with the following results:</p>

<pre>
struct _GtkSegment
{
  GtkMisc misc;

  // color of the segment
  GtkSegmentColor segment_color;
  // its value, '0', '1', '2', etc.
  unsigned char segment_value;
  // GCs for each possible color
  GdkGC *redGC;
  GdkGC *greenGC;
  GdkGC *blueGC;
  GdkGC *yellowGC;
  // height of the segment in pixels
  int height;
};
</pre>

<p>Other than the name change from <B>GtkArrowClass</B> to <B>GtkSegmentClass</B>, the widget class <B>struct</B> was left the same as it is for <B>GtkArrow</B>.</p>
<p>The next step was to edit the source file (<B>gtksegment.c</B>). After opening the file, I performed the same text substitutions that I applied to the include file. The source file implements the following core methods:</p>

<pre>
static void
gtk_segment_class_init
  (GtkSegmentClass *klass);
static void gtk_segment_init
  (GtkSegment *segment);
static void
gtk_segment_unrealize
  (GtkWidget *widget);
static gint gtk_segment_expose
  (GtkWidget *widget,
  GdkEventExpose *event);
static void
gtk_segment_size_request
  (GtkWidget *widget,
  GtkRequisition *requisition);
</pre>

<p>The <B>class_init</B> and <B>init</B> functions are mostly boilerplate. In the <B>class_init</B> function, I commented out support for <B>GtkObject</B> arguments. I also overrode the <B>GtkWidget</B> class <B>size_request</B> and <B>unrealize</B> methods, by adding the following lines:</p>

<pre>
  widget_class-&gt;size_request = gtk_segment_size_request;
  widget_class-&gt;unrealize = gtk_segment_unrealize;
</pre>

<p>The <B>size_request</B> function is simple: it checks the requisition it is passed and makes sure that the height and width are at least as large as <B>MIN_SEGMENT_SIZE&lt;D&gt;, a constant I defined in the source. If the value of the segment is '.'</B>, then the requisition width is divided in half. Here is the complete source:</p>

<pre>
static void
gtk_segment_size_request(GtkWidget *widget, 
  GtkRequisition *requisition)
{
  g_return_if_fail (widget != NULL);
  g_return_if_fail (GTK_IS_SEGMENT (widget));
  g_return_if_fail (requisition != NULL);

  if ( requisition-&gt;height &lt; MIN_SEGMENT_SIZE )
    requisition-&gt;height = MIN_SEGMENT_SIZE;
  if ( requisition-&gt;width &lt; MIN_SEGMENT_SIZE )
    requisition-&gt;width = MIN_SEGMENT_SIZE;
  if ( GTK_SEGMENT(widget)-&gt;segment_value == '.' )
    requisition-&gt;width = requisition-&gt;width &gt;&gt; 1;
}</pre>

<p>The other function I override, <B>expose</B>, is where all the remaining work is done. The <B>expose</B> function is called whenever the widget is exposed (i.e., it becomes visible for the first time, or when some portion of the widget window becomes unobscured). The <B>expose</B> event is passed to the function by Gtk+, and it indicates the area of the window that is in need of redrawing. (This is used to set clip rectangles for the foreground and background GCs prior to drawing). The only remaining task is to draw the segments&#146; value into the window, the size and location of which is determined by the widget allocation:</p>

<pre>
    width = widget-&gt;allocation.width;
    height = widget-&gt;allocation.height;
</pre>

<p>The foreground color, as well as the value of the segment, are obtained from the widget instance <B>struct</B> (<B>segment_color</B> is used to determine which GC to use, e.g., <B>redGC</B>, <B>blueGC</B>, etc.). The drawing is done using GDK graphics primitives (which are mostly wrappers above the Xlib graphics functions).</p>

<H3><FONT COLOR="#000080">Public Setter Functions</FONT></H3>

<p>Two functions defined in the public API, namely <B>gtk_segment_set_color</B> and <B>gtk_segment_set_value</B>, are all that remain to be discussed. Both take the value that is passed by the application and store it in the appropriate widget instance <B>struct</B> field (after error checking). Then, if the widget is in a drawable state (meaning it is realized and mapped), a call to <B>gtk_widget_queue_clear</B> is made. This causes Gtk+ to issue a redraw request on the widget, which, in this case, lands us in the <B>gtk_segment_expose</B> method, where the widget contents are then redrawn as explained above.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Gtk+ provides programmers with a rich set of user-interface widgets. However, some of you will find the need to extend the Gtk+ widget set by creating your own widgets. Gtk+&#146;s object system and widget class hierarchy make it relatively easy to create widgets of either type (control or container). In most cases, creating a new widget amounts to applying boilerplate modifications to a carefully selected Gtk+ widget class and replacing widget-specific code with code that implements the behavior of the new widget class. By following the steps outlined above, as well as studying the Gtk+ widget source code provided with this article and the Gtk+ sources that are available at &lt;www.gtk.org&gt;, you should be well on your way towards writing great Gtk+ widget classes of your own.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>My thanks to Rob Flynn and Eric Warmenhoven (&lt;http://gaim.sourceforge.net&gt;) for providing technical reviews of this article.</p>

<p><i><B>Syd Logan</B> is a senior technical manager at AOL/Netscape and has been involved with the Netscape 6 browser project for two years. He enjoys hacking on, and writing about, Unix, C, and X Window System software and has doing so for 15 years. Information on his recent book, <I>Gtk+ Programming in C</I>, can be found at &lt;www.users.cts.com/crash/s/slogan/gtkbook.html&gt;.</i></p>

<h4><a href="../../../source/2002/mar02/logan.zip"></a></h4>
</blockquote></body></html>
