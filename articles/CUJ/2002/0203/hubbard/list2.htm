<HTML><HEAD>
<TITLE>March 2002/Binary Code Reuse in a Linux Environment/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: ProcessDriver.cpp</A></h4>
<pre>
#include &lt;string&gt;
#include &lt;iostream&gt;
#include "HelperRoutines.h"
#include "ExtendedCommands.h"

std::string
GetVersion()
{  return "1.10-ProcessDriver";
}

void
Usage()
{
  std::cout &lt;&lt; std::endl &lt;&lt;
  "ProcessDriver version " &lt;&lt; GetVersion() &lt;&lt;
   ", built on 03 December 2001." &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt;
   "Usage: ProcessDriver -file input_file " &lt;&lt;
   "-child child_program [-trace_grammar]"
  &lt;&lt; std::endl &lt;&lt; "  [-show_intermediate_files] [-yydebug]"
  &lt;&lt; std::endl;
}

int main(int argc, char* argv[])
{
  std::string childProgram;
  std::string inputFile;
  try
  {
    using namespace out_of_band_example;
    ExtendedCommands commands( argc, argv);

    if( ! commands.GetOption("child_program", "child",
                              childProgram) )
    {  
      childProgram = GetEnv("CHILD_PROCESS");
      if( childProgram.length() == 0 )
      {  childProgram = "SimpleCalculator";
      }
      else
      {  childProgram = CombinePathAndFile(childProgram,
                                           "SimpleCalculator");
      }
    }

    if( commands.Exists("version") )
    {
      childProgram += " -version";
      std::cout &lt;&lt; "ProcessDriver version: " &lt;&lt; GetVersion() 
                &lt;&lt; std::endl;
    }
    else
    {
      if( ! commands.GetOption("file", "f",  inputFile ) )
      {  throw(std::string("ProcessDriver: -file is required."));
      }
  
      childProgram += commands
        .SynthesizeOptionString("file","f"  );
      childProgram += commands
        .SynthesizeOptionString("show_intermediate_results",
                                "show" );
      childProgram += commands
        .SynthesizeOptionString("trace_grammar", "t" );
      childProgram += commands
        .SynthesizeOptionString("yydebug", "y" );
    }
    FeedFileToSubprogram( inputFile, childProgram, commands );
  }
  catch( std::string&amp; strCommandLineError )
  {
    Usage();
    exit(10);
  }
  return 0;
}
&#151; End of Listing &#151;</pre></body></html>
