<HTML>   
     <HEAD>
<TITLE>March 2002/Binary Code Reuse in a Linux Environment</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Linux</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Binary Code Reuse in a Linux Environment</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">John F. Hubbard</FONT></H3>

<BLOCKQUOTE>
<p>Traditional Unix-like filters meet C++ in these useful classes for launching and controlling processes in Linux.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>In a Linux environment, there is a significant body of well-tested, readily available code. Some of the most useful pieces, however, are lurking just out of sight, deep within the internals of compiled, executable programs. A C++ programmer new to Linux would not hesitate to make use of a standard routine such as <B>qsort</B> or <B>std::cout</B>, but that same programmer is likely to overlook the opportunity to reuse the larger works of code embodied in, for example, cpp <a href="#1">[1]</a>. With a tool such as cpp, sophisticated file preprocessing is easy; the catch is that cpp is a program, rather than a convenient library <a href="#2">[2]</a>.</p>
<p>In fact, there are two distinct situations in which a Linux C++ programmer will find it helpful to implement &#147;binary code reuse&#148; of this sort. The first situation arises when you need to use an existing utility, such as the cpp program mentioned above. The second occurs when you are creating programs that, like the Linux utilities, expect to communicate via standard input and standard output. In each case, there is a need for a routine that accepts the name of an input file, the path to an external program, and the command-line arguments to be sent. This routine should read the input file, launch the external program with the supplied command-line arguments, pipe the file contents to the external program&#146;s standard input via Unix pipes <a href="#3">[3]</a>, and (typically) wait for the external program to finish its work before continuing on. The <B>FeedFileToSubprogram</B> routine shown in <a href="list1.htm">Listing 1</a> meets all of these requirements.</p>
<p>This has all been done countless times, of course. However, only in this article will you find a single routine, with a modern C++ interface, to do all of these things in one step. This article is also the only place that you can find a complete, concise (under 300 lines of code, total) set of parent and child programs, each with a modern C++ implementation, that provide an immediately accessible implementation of this form of binary code reuse. And if that&#146;s not enough, if you read carefully, you&#146;ll also find a standard Flex- and Bison-based parser hiding within the same 300 lines of code.</p>

<H3><FONT COLOR="#000080">GNU&#146;s Flex and Bison</FONT></H3>

<p>In order to provide both an article example and a coding template to be used in the near future, I decided to create a simple calculator, using GNU&#146;s Flex lexer generator and GNU&#146;s Bison parser generator. Although the example might seem artificial, it is not. One of the single most powerful code reuse opportunities in the software industry is that of automatically generating lexers and parsers, from high-level BNF (Backus Naur Form) grammar specifications. Pick up any book on compilers and parsers, and you will be subjected to a lecture by the author on the value of using Lex and Yacc to generate your parser, or &#151; if it is a really modern book &#151; perhaps the author will even exhort you to use Flex and Bison <a href="#4">[4]</a>. And yet, despite all of this supposedly heavy backing, it is surprisingly time-consuming to get polished programs up and running using these tools unless you are already very familiar with them. I was amazed to discover that none of the manuals contain modern, fully working sample programs that use Flex and Bison. You have to read two or three manuals and piece together the missing pieces and bug workarounds all by yourself &#151; unless, of course, you are clever enough to use my two grammar files (one each for the lexer and parser) as the starting point for any new parsing project. I have kept the grammar files exceedingly small and simple, because I intend on using them as templates myself on an upcoming compiler project.</p>

<H3><FONT COLOR="#000080">The ProcessDriver and SimpleCalculator Programs</FONT></H3>

<p><a href="fig1.htm">Figure 1</a> shows the architecture and intended use of this mini-system. The <B>SimpleCalculator</B> program accepts floating-point numbers and performs some basic operations; it also handles nested parentheses correctly. It does all of this in 50 or 100 lines of BNF grammar, mixed in with some C++. (Unfortunately, space limitations preclude the possibility of actually discussing the BNF. There&#146;s no help for it; you&#146;ll just have to peek at the source code on the <I>CUJ</I> website.) This creates just the right sort of problem, because, lo and behold, Flex and Bison generate code that expects to perform I/O via standard input and standard output (<B>stdin</B> and <B>stdout</B>). If you left things as Flex and Bison have set them up, you would be in the embarrassing position of requiring your end users to type</p>

<pre>
cat input_file.txt | BigCompiler
</pre>

<p>to run your compiler. The <B>ProcessDriver</B> program provides a way to read the input file and send its contents to your new parser.</p>
<p>The <B>ProcessDriver</B> program, shown in <a href="list2.htm">Listing 2</a>, acts as a driver program. The <B>SimpleCalculator</B> program, shown in <a href="list3.htm">Listing 3</a>, acts as a subprogram. Both &#147;driver-plus-subprogram&#148; and &#147;parent-child&#148; phrases are useful ways to describe the relationship here; I use the terms interchangeably throughout both this article and the code itself. These programs are simple, but do not be deceived into thinking that they are unrealistic. The fact is neither <B>ProcessDriver.cpp</B> nor <B>SimpleCalculator.cpp</B> need any changes at all in order to be used as the foundation for a Flex- and Bison-based system.</p>
<p><a href="fig2.htm">Figure 2</a> shows an example session with the <B>ProcessDriver</B> program, including command-line parameters, input file contents, and program output. In upcoming sections, I will discuss selected pieces of the source code.</p>

<H3><FONT COLOR="#000080">Using the CommandLine Class</FONT></H3>

<p>In order to control a complex parser or compiler, the conventional approach is to supply long lists of command-line options. (GCC <a href="#5">[5]</a> is my favorite example, with scores of options that only a few rabid enthusiasts can remember without the aid of a hyperlinked index.) Of course, the only civilized way to manage basic command-line options is to use the <B>CommandLine</B> class, whose public interface is shown in <a href="list4.htm">Listing 4</a>. In the simplest case, you construct a <B>CommandLine</B> object instance by passing it exactly what you receive from <B>main</B>&#146;s argument list: <B>argc</B> and <B>argv</B>. Thereafter, any of the command-line parameters are available for your inspection via these two methods: <B>Exists(optionName)</B> and <B>GetByName(optionName)</B>.</p>
<p>The most straightforward use of <B>CommandLine</B> is to use it to provide simplified ways to parameterize unit tests, as in this fragment:</p>

<pre>
int main(int argc, char* argv[])
{
    try
    {
        tools::CommandLine commands(argc, argv);
        FastSAX_Parser
          theParser(commands.GetByName("file"));
        // ...etc...
    }
    catch(std::string&amp; strError)
    {
        std::cout &lt;&lt; "Command-line error:"
                  &lt;&lt; strError &lt;&lt; std::endl;
        Usage();
    }
    return 0;
}
</pre>

<p>A more powerful technique is to pass around a <B>const</B> reference to the original <B>CommandLine</B> object. This allows read-only access to the original command-line parameters, available to any part of the program to which you care to hand the <B>CommandLine</B> reference. You can see how this is done in <a href="list3.htm">Listing 3</a>, which shows the <B>SimpleCalculator</B>&#146;s <B>main</B> module.</p>

<H3><FONT COLOR="#000080">Out-of-Band Parameter Passing</FONT></H3>

<p>As soon as you have more than one program, you have to deal with how to communicate between them. There are two choices: pass information from parent to child program in the command-line arguments, or simply pipe information between parent and child via Unix pipes. The cleanest, simplest choice is the a judicious mix of both: you pass control information from parent to child in the child&#146;s command-line arguments. (The argument list is actually part of a single string, passed as an argument to the <B>popen</B> call, which includes both the child program&#146;s name and its argument list.) You pass data to be processed via the standard Unix pipe that is called <B>stdin</B>; this is the child program&#146;s standard input. This approach allows you to avoid reinventing minor data-passing protocols that would be necessary in order to pass control information over a Unix pipe.</p>
<p>I call this approach &#147;Out-of-band Parameter Passing.&#148; As the name implies, there are two separate channels (&#147;bands,&#148; in telecom speak) for communications between the parent and child processes: one for control information, and one for the data to be processed. The <B>CommandLine</B> and <B>ExtendedCommands</B> classes make this easy to implement. You can see the entire mechanism in <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>.</p>

<H3><FONT COLOR="#000080">Long and Short Forms: Command Filtering</FONT></H3>

<p>For readability and self-documenting systems, long, spelled-out command-line options are indispensable. However, to keep from going mad when typing in seemingly endless streams of long options, short forms of the same options are equally valuable. Therefore, it is important to provide both: new users learn from the long forms, and once familiar with the program, they shift to the short forms (or more likely, simply use shell aliasing to hide the whole thing).</p>
<p>Having two forms of the same option is no big deal, until your hierarchy of programs (driver plus subprograms) begins to grow. Clearly, the driver program is in the perfect position to provide command filtering, in the following sense: the driver program can accept both long and short forms of the same option, and perhaps other combinations or aggregates, such as an <B>-all</B> option. However, each subprogram should only handle the long form of each option. The driver program examines all of the original options and then synthesizes a precise set of options for each of its subprograms. This fits the situation nicely; the subprograms require inhumanly precise option lists, which is fine as their only direct user is another program. The subprograms are thus spared the repetitive complexity of checking for alternate forms and may simply write:</p>

<pre>
    commands.GetByName( longFormOptionA );
</pre>

<p>rather than</p>

<pre>
    if (commands.Exists(shortNameA))
    {    optionA = commands.GetByName(shortNameA);
    }
    else if (commands.Exists(longNameA))
    {    optionA = commands.GetByName(longNameA);
    }
</pre>

<p>The <B>ExtendedCommands</B> class, whose implementation is shown in <a href="list5.htm">Listing 5</a>, inherits from the <B>CommandLine</B> class. The <B>ExtendedCommands</B> class provides the ability to search for a command by both a long and a short name, as well as the ability to synthesize a new command-line string from an existing <B>CommandLine</B> class (plus a few hints).</p>

<H3><FONT COLOR="#000080">Emerging Conventions</FONT></H3>

<p>As you can see from <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>, the parent and child programs cooperate in order to provide version reporting. This is important because a common mistake would be to update the child program (which the end user likely never even sees), yet leave the version number of the parent program unchanged. This causes you to instantly lose track of who has which version of the anonymous child program.</p>

<H3><FONT COLOR="#000080">Linux Utility Programs</FONT></H3>

<p>Part of the pleasure in working with Linux is the remarkable depth of pre-existing utilities. There are hundreds, if not thousands, of utilities that ship with a modern GNU Linux distribution. Poke around in Linux long enough, and you will find a utility to do just about anything that can be done.</p>
<p>Because most of the utilities do just one thing, you may end up delighted at the near-infinite possible combinations available, or frustrated that you have to routinely run many programs to do just about anything useful from the shell prompt. Here is an example, complete with the legendary, apocryphal &#147;regular expression&#148; syntax that preprocesses a C/C++ file:</p>

<pre>
cat input_file.cpp | cpp | egrep -v "^[#\t\n]"
</pre>

<p>For those of you who are delighted, you have a lot of enjoyable projects ahead of you now that it is easy to gain precise control of each program to be launched. You now have two additional ways to run utilities such as cpp: 1) run the <B>ProcessDriver</B> program, or 2) programmatically call the <B>FeedFileToSubprogram</B> routine.</p>

<H3><FONT COLOR="#000080">Details</FONT></H3>

<p>Note that the <B>FeedFileToSubprogram</B> routine in <a href="list1.htm">Listing 1</a> uses <B>popen("w")</B>, which means &#147;write&#148; as in &#147;launch the subprogram and write to the subprogram&#146;s standard input.&#148; You can also specify <B>"r"</B>, which means &#147;launch the subprogram and read from the program&#146;s standard output.&#148; I will leave further exploration of this to the reader; <B>popen</B> is explained, with Stevens&#146; usual clarity, in <a href="#3">[3]</a>.</p>
<p>The code shown in this article has been tested on Linux Redhat 7.1 (x86), Solaris 7 (Sparc), Solaris 8 (Sparc), and Cygwin 1.3.x (running on Microsoft Windows 2000, SP1). The compiler in all cases was GNU&#146;s GCC 2.95.3, augmented with STLport-4.5 <a href="#6">[6]</a>. I doubt that you&#146;ll be able to compile the code as is on &#147;stock&#148; GCC; that compiler has been a bit slow on adopting the full C++ Standard library. STLport, on the other hand, is a thread-safe, portable, standards-compliant implementation of the C++ Standard library, and I&#146;ve had excellent results with it so far.</p>
<p>The <B>CommandLine</B> class is supplied as part of the <B>ClassCreator</B> <a href="#7">[7]</a> application. As a convenience &#151; and of course, to encourage wider use of <B>ClassCreator</B> &#151; the entire <B>ClassCreator</B> source code is included along with this article&#146;s source code at &lt;www.cuj.com/code&gt;.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  The cpp (C/C++ preprocessor program) reads text files (normally C or C++ source code, but not necessarily) and does the fussy work of parsing, including files, stripping out comments, processing macros, selecting active code, and all the rest of the wondrous behavior that you may previously have mentally lumped together with the C++ compiler itself.</p>
<p><a name="2"></a>[2]  While it is true that all parts of a GNU Linux distribution are required to ship with the source code for each program, most of us eventually come to the bleak realization that having a given set of source code does not necessarily mean that we&#146;d want to use it in our current project. For a variety of reasons, the most effective way to reuse the code within a Linux utility is very often to simply run the utility and communicate with it via IPC.</p>
<p><a name="3"></a>[3]  W. Richard Stevens. <I>Advanced Programming in the Unix Environment</I> (Addison Wesley Longman, 1993). Stevens has some of the best explanations of Unix pipes that you&#146;ll find anywhere.</p>
<p><a name="4"></a>[4]  Lex and Yacc are early implementations of automatic lexer and parser generators, respectively. These programs generate C code that generally will not compile, unmodified, as C++ code. GNU Flex and GNU Bison were designed to replace Lex and Yacc. Flex and Bison are widely acknowledged to be superior implementations; one of the most important improvements (there are many) is that Bison-generated code can be compiled as C++ code, allowing seamless integration with modern C++ programs.</p>
<p><a name="5"></a>[5]  GCC is GNU&#146;s C/C++ compiler, for those of you who have been off-planet for the past few years.</p>
<p><a name="6"></a>[6]  STLport-4.5 is available at &lt;www.stlport.org&gt;.</p>
<p><a name="7"></a>[7]  John F. Hubbard. &#147;Building a Professional Software Toolkit,&#148; <I>C/C++ Users Journal</I>, May 2001. I originally introduced the <B>CommandLine</B> class, in this article, as part a C++ code generation utility called <B>ClassCreator</B>. Since then, <B>CommandLine</B> has not changed, despite heavy use; the interface appears to be mature at this point. </p>

<p><i><B>John F. Hubbard</B> spent eight years as a nuclear submarine line officer, logging thousands of hours of submerged operations before finally succumbing to the lure of civilian computer technology. He currently works as a senior software engineer at ATD Azad Technology Development Corporation, a software outsourcing company that specializes in real-time programming, embedded systems, and factory automation. Mr. Hubbard holds a BS in Electrical Engineering from Utah State University. He may be reached at <B>hubbardjohn@earthlink.net</B>.</i></p>

<h4><a href="../../../source/2002/mar02/hubbard.zip"></a></h4>

</blockquote></body></html>
