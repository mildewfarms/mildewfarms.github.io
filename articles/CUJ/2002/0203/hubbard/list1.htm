<HTML><HEAD>
<TITLE>March 2002/Binary Code Reuse in a Linux Environment/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: HelperRoutines.cpp</A></h4>
<pre>
#include &lt;unistd.h&gt;    
#include &lt;stdio.h&gt;    
#include &lt;sys/types.h&gt;   
#include &lt;sys/wait.h&gt;    
#include &lt;stdlib.h&gt;    
#include &lt;sys/utsname.h&gt;
#include &lt;stdlib.h&gt;    
#include &lt;string&gt;
#include &lt;iostream&gt;
#include "HelperRoutines.h"
#include "CommandLine.h"

namespace out_of_band_example
{
static const int MAX_LINE_LENGTH = 4096;

void
FeedFileToSubprogram( const std::string&amp; aFileName,
                      const std::string&amp; aSubprogramPath,
                      const tools::CommandLine&amp; commands )
{
  // Open the input file and pipe the contents to the child
  // program:
  FILE * fdInput = fopen( aFileName.c_str(), "r");
  if( fdInput &lt; 0 )
  {
    std::cout &lt;&lt; "Failed to open the input file: " &lt;&lt; aFileName
              &lt;&lt; std::endl;
    exit(1);
  }
  // Launch the child program:
  FILE * fdChildProgram;
  if ( (fdChildProgram = popen( aSubprogramPath.c_str(), "w")) &lt; 0 )
  {  
    std::cout &lt;&lt; "Failed to launch program " &lt;&lt; aSubprogramPath
              &lt;&lt; std::endl;
    exit(2);
  }
  if( commands.Exists("version") )
  {
    pclose( fdChildProgram );
    exit(0);
  }
  // Pipe contents of the input file to the child program's 
  // standard input:
  int bytesRead = 0;
  char buffer [ MAX_LINE_LENGTH ];
  memset(buffer, 0, sizeof(buffer));

  while( fgets(buffer, MAX_LINE_LENGTH, fdInput ) != NULL)
  {
    if( fputs( buffer, fdChildProgram) == EOF )
    {  
      std::cout &lt;&lt; "Error writing to the child process." 
                &lt;&lt; std::endl;
      exit(3);
    }
  }

  if( ferror( fdInput) )
  {  std::cout &lt;&lt; "Error reading from the file: " &lt;&lt; aFileName 
               &lt;&lt; std::endl;
  }

  fclose( fdInput );
  if( -1 == pclose( fdChildProgram ) )
  {  
    std::cout &lt;&lt; "Error closing the pipe to the child process: " &lt;&lt;
           aSubprogramPath &lt;&lt; std::endl;
    exit(4);
  }
}

std::string
GetEnv(const std::string&amp; variableName)
{
  std::string strValue;
  char* pValue = getenv( variableName.c_str() );

  if( pValue )
  {  strValue = pValue;
  }
  return strValue;
}

std::string
CombinePathAndFile( const std::string&amp; aPath,
                    const std::string&amp; aFileName)
{
  if( aPath[aPath.length() - 1] == '/' )
  {  return (aPath + aFileName);
  }
  return aPath + "/" + aFileName;
}

} // end of the out_of_band_example namespace


&#151; End of Listing &#151;</pre></body></html>
