<HTML>   
     <HEAD>
<TITLE>March 2002/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Space-Time Discontinuum</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>&#147;Namelessspace?&#148; How about Lost in Space? You decide, Gentle Reader.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2002 Robert H. Schmidt</p>
<p>I recently received my most breathtakingly off-topic reader question yet. Here it is, with the lightest of editorial dusting:</p> 
<BLOCKQUOTE>
<p>I built a two-channel 12-bit A/D card for connection to a parallel port. I tried to make a communication program in DOS for 12-bit communication from the card to a PC. I used 8 bits from the <B>DATA</B> register and 4 bits from <B>(ACK, BUSY, PAPER, ONLINE)</B>. For handshaking, I used <B>ERROR</B> on the <B>STATUS</B> port. Now I don&#146;t know how to get input from the <B>DATA</B> register although I tried to use EPP and ECP for bi-directional transfer. Is it possible to make data transfer in this way or should I use standard 8-bit communication?</p>
</BLOCKQUOTE>
<p>Several thoughts intrude:</p>

<UL><LI>   Was this question really meant for me? Yes, I could write the questioner back to find out, but I&#146;m almost afraid to.</LI>
<LI>   I use Macs. What&#146;s a &#147;parallel port&#148;? And is it compatible with a perpendicular port?</LI>
<LI>   Does anybody really do this kind of programming anymore? I&#146;m now thinking that the question fell from a rupture in the space-time continuum and was actually targeting <I>Dr. Dobbs</I> ca. 1984.</LI>
<LI>   Didn&#146;t <B>ACK</B> go out with Bill the Cat?</LI></UL>

<p>Still...</p>
<p>Okay, I admit it: resistance is futile. This topic is so completely off course &#151; light years off course &#151; that I&#146;m now strangely charmed and intrigued. So if one of you has a genuine answer to this reader&#146;s question, please send it to me. If I get something that sounds right, I&#146;ll go ahead and publish it. Even if it&#146;s wrong but entertaining, I&#146;ll probably publish it.</p>
<p>(God help me, but this gives me an idea for a regular column feature: The Spatial and/or Temporal Anomaly, a real question apparently meant for another place, time, or both. Chuck, you&#146;d better intervene now, or I&#146;m running with this!) [Get a grip, Bobby. Consider the exception &#147;caught.&#148; &#151;The Intervener]</p>

<H3><FONT COLOR="#000080">Sweet Home Translation Unit</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> In your last Erratica item (January 2001), you quoted George Kaplan talking about ODR. I&#146;ve seen mention of ODR before, but I&#146;ve never known what it means. I&#146;m hoping you can enlighten me.</p>
<p>I&#146;ve been afraid to ask on the newsgroups. People there can be harsh, and I don&#146;t want to be dismissed as a newbie wimp.</p>
<p>Thanks &#151; R.O. Thornhill</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> At the risk of appearing Kelly-Bootlesque, I shall paraphrase everyone&#146;s favorite X Files character, FBI Assistant Deputy Director Skynyrd:</p>
<BLOCKQUOTE>
<p>Oo-oo, that ODoR.<br>
Can&#146;t you smell that ODoR?<br>
Oo-oo, that ODoR.<br>
The smell of <B>def</B>s around you.</p>
</BLOCKQUOTE>

<p>ODR is a TLA for One Definition Rule. Given that name, you might think the rule requires everything in a program to be defined exactly once. The truth, as unraveled in the C++ Standard, is somewhat more complex:</p>

<UL><LI>   Some things can be left undefined altogether.</LI>
<LI>   Some things must be defined exactly once in a given program.</LI>
<LI>   Some things must be defined exactly once in a given translation unit.</LI>
<LI>   Some things can be defined in multiple translation units.</LI>
<LI>   Some things must be defined in multiple translation units.</LI>
</UL>

<p>Reader Kaplan brushes up against the final two points during his spiel about namespaces and headers.</p>
<p>When you define the same entity in multiple translation units, each definition must have the same token sequence. Further, the resulting name resolution and binding must yield the same net meaning in all definitions. If the ODR did not allow such multiple definitions, you couldn&#146;t <B>#include</B> most header files.</p>
<p>Once you inject <B>using</B> clauses into headers, the meanings of other definitions in the headers can vary, in violation of the ODR. This is particularly dangerous when headers make assumptions about or requirements on their context.</p>
<p>Consider the header <B>trace_max.h</B>:</p>

<pre>
#include &lt;iostream&gt;

extern inline void trace_max(int a, int b)
    {
    std::cout &lt;&lt; max(a, b) &lt;&lt; std::endl;
    }
</pre>

<p>which traces the maximum of two arbitrary integers. As an inline function, <B>trace_max</B> must be included and thus defined in each translation unit that uses it. And because <B>trace_max</B> is non-static, all definitions refer to a common function and must all be &#147;the same&#148; in accordance with the ODR.</p>
<p>That &#147;sameness&#148; can hinge on the meaning of <B>max</B> in the context of <B>trace_max</B>. For example, in the sequence:</p>

<pre>
int max(int a, long b)
    {
    return a &gt; b ? a : b;
    }

#include "trace_max.h"
</pre>

<p>the <B>max</B> in <B>trace_max</B> resolves to the genuine global function <B>::max</B>. But in the alternative sequence:</p>

<pre>
#include &lt;algorithm&gt;
using std::max;

#include "trace_max.h"
</pre>

<p>the <B>max</B> in <B>trace_max</B> resolves to the specialization <B>std::max&lt;int&gt;</B>, which &#151; thanks to the <B>using</B> declaration &#151; can be referenced unqualified as plain <B>max</B>.</p>
<p>You probably see the punch line: the two definitions of <B>max</B> differ, which means the two definitions of the common inline <B>trace_max</B> differ across translation units <a href="#1">[1]</a>. This difference violates the ODR, the program is ill-formed, and much hilarity ensues. Had the second sequence not injected <B>std::max</B> into the global namespace, the violation would never have occurred, for the compiler would have caught the missing <B>max</B> definition while parsing <B>trace_max</B>.</p>
<p>If you insist on contravening the ODR, you need not conjure headers and <B>using</B> clauses. These two simple source files will do the trick:</p>

<pre>
//
// file1.cpp
//
class X
    {
    int i;
    };

//
// file2.cpp
//
class X
    {
private:
    int i;
    };
</pre>

<p>There are a couple of lessons you should draw from this.</p>
<p>First, even though the two <B>X</B> definitions have the same net behavior, their token sequences are different, and that&#146;s enough to trump the ODR. (Conjecture: the committee chose this conservative criterion because it&#146;s easier to specify and validate.)</p>
<p>Second, class names have external linkage. In this case, all global-scope <B>class</B> <B>X</B> definitions must be the same across translation units &#151; even if the definitions are logically distinct and just happen to share the same name! This may well be news to you and many others. Indeed, I suspect most of us reuse pet names for &#147;local&#148; classes scattered across our projects, believing the names are mutually ignorant and isolated as long as they aren&#146;t in shared headers. Oops.</p>
<p>If you want to avoid this whole mess and have a class act is if it&#146;s internally linked, define it in an unnamed namespace:</p>

<pre>
//
// file1.cpp
//
class X
    {
    int i;
    };

//
// file2.cpp
//
namespace
    {
    class X
        {
    private:
        int i;
        };
    }
</pre>

<p>Now the two <B>X</B> definitions refer to distinct things.</p>
<p>(Note to future historians: I am coining a new term. From now on, I shall refer to unnamed namespaces as &#147;namelesspaces.&#148; You read it here first.)</p>
<p>ODR-related bugs can be especially difficult to ferret out. Compilers and linkers typically miss many ODR violations and often allow offending programs to (apparently) work. This is added incentive to correctly package common externally-linked definitions in headers, hide non-common definitions in namespaces, and not mingle the two worlds via <B>using</B> clauses.</p>

<H3><FONT COLOR="#000080">This Month&#146;s Obligatory Scott Meyers Item</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> &#147;Mrs. Meyers&#148; is my mother, not my wife. I&#146;m afraid your stock is down sharply after I showed Nancy that. It&#146;ll take more than lame music videos to recover from that faux pas, and I&#146;m looking forward to seeing how you approach the problem :-) &#151; Mr. Meyers.</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Scott alludes here to the preamble leading my September 2001 column:</p>
<BLOCKQUOTE>
<p>If you overlook a shameless play for Mrs. Meyers, Bobby serves up precious pointers on, well, pointers (smart ones anyway), and on the proper use of namespaces.</p>
</BLOCKQUOTE>
<p>In my defense, I don&#146;t write these initial blurbs. I don&#146;t even see them before the magazine comes out. So if Nancy ~Meyers wants a perpetrator, she must look to the collective editorship of <I>CUJ</I> <a href="#2">[2]</a>. [I was unaware of the naming convention in Persephone&#146;s household. &#151;cda]</p>
<p>In reference to &#147;lame music videos&#148;: both Nancy and I share a fondness for early &#146;80s music videos, especially those involving European synth-pop <a href="#3">[3]</a>. In one of my last visits to Nancy, I brought her a gift of many such videos, thereby earning beaucoup points. Scott&#146;s simply jealous, as his point count at home hovers near zero.</p>

<H3><FONT COLOR="#000080">rotareti_tsnoc</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>The following code doesn&#146;t compile with either VC++ 6.0 or gcc 2.95:</p>

<pre>
#include &lt;vector&gt;

void f(std::vector&lt;int&gt; &amp;v)
    {
    std::vector&lt;int&gt;::
            const_reverse_iterator it
            = v.rbegin();
    while (it != v.rend())
        ++it;
    }
</pre>

<p>VC++ complains about assigning <B>reverse_iterator</B> to <B>const_reverse_iterator</B>. gcc complains about comparison.</p>
<p>My understanding of the C++ Standard is that, in this case, the versions of <B>rbegin</B> and <B>rend</B> that return non-<B>const</B> iterators should be called. But as iterators are convertible to <B>const</B> iterators, assignment and comparison should be OK. The same code with <B>iterator</B>, <B>begin</B>, and <B>end</B> substituted for <B>reverse_iterator</B>, <B>rbegin</B>, and <B>rend</B> compiles fine with both compilers. What I am missing? Isn&#146;t it legal C++ code?</p>
<p>Thanks in advance &#151; Ilya Levinson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> I can hear Mr. Meyers in the back of the room going &#147;Ooo, ooo, pick me, Mr. Kotter!&#148;: Item 26 of his <I>Effective STL</I> involves this topic. I invite you to peruse that item for an explanation more complete than what I&#146;ll give here.</p>
<p>We are accustomed to pointers to non-<B>const</B> things converting to pointers to <B>const</B> things:</p>

<pre>
X *p;
X const *cp;
...
cp = p;      // OK
if (p == cp) // OK
</pre>

<p>Such conversions are &#147;safe&#148; in that pointers to <B>const</B> cause less damage than pointers to non-<B>const</B>.</p>
<p>Since STL iterators are generally modeled on pointers, we should expect that iterators will follow the pointer pattern of safety and implicit conversion:</p>

<pre>
X::iterator p;
X::const_iterator cp;
...
cp = p;      // OK?
if (p == cp) // OK?
</pre>

<p>Yea verily, the C++ Standard requires that an STL container&#146;s <B>iterator</B> type be convertible to that container&#146;s <B>const_iterator</B> type. As Scott discusses, not all libraries honor this requirement, although apparently yours do.</p>
<p>Your problem is specifically about reverse iterators. As there are no reverse pointers (such that <B>++</B> moves backward), we can&#146;t appeal to the behavior of pointers for guidance. At the same time, it seems reasonable to expect the conversion relationship between regular iterators to also exist between reverse iterators.</p>
<p>Reasonable, but apparently not required, for I can find no passage in the C++ Standard compelling a conversion from <B>reverse_iterator</B> to <B>const_reverse_iterator</B>. I have to believe the intent is there; I just can&#146;t find the wording. So based on my strict reading of the Standard, the behavior you are getting is Standard-conformant, if inconvenient. (If any Diligent Reader knows a place in the Standard requiring such a conversion, please write me.)</p>
<p>Scott suggests one possible fix: always compare mixed <B>const</B>/non-<B>const</B> iterators so that the iterator to non-<B>const</B> comes first. In your case, that means you&#146;d rewrite the comparison as:</p>

<pre>
while (v.rend() != it)
</pre>

<p>While I can&#146;t guarantee this will fix your problem, it&#146;s worth a shot.</p>
<p>Another possibility: initialize a second <B>const_reverse_iterator</B> and then compare the two <B>const_reverse_iterators</B>:</p>

<pre>
std::vector&lt;int&gt;::const_reverse_iterator it
        = v.rbegin();
std::vector&lt;int&gt;::const_reverse_iterator rend
        = v.rend();
while (it != rend)
    ++it;
</pre>

<p>Otherwise, you may have to either go with <B>reverse_iterator</B>s instead of <B>const_reverse_iterator</B>s or give up on reverse iterators altogether. (In his Item 26, Scott recommends you use plain old non-<B>const</B> non-reverse iterators anyway, to avoid these and other problems.)</p>

<H3><FONT COLOR="#000080">Parent(hetic)al Rights</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> In a piece of code I recently wrote:</p>

<pre>
a = b - c - d;
</pre>

<p>I intended left-to-right ordering, so that the code would act as if I wrote:</p>

<pre>
a = (b - c) - d;
</pre>

<p>However, the compiler produced code equivalent to:</p>

<pre>
a = b - (c - d);
</pre>

<p>My compiler support person at Green Hills says I can&#146;t rely on the order. (It mildly surprised me that the spec would leave this open.) He then astounded me by claiming that even:</p>

<pre>
a = (b - c) - d;
</pre>

<p>does not guarantee evaluation order. Instead, I have to do</p>

<pre>
tmp = b - c;
a = tmp - d;
</pre>

<p>Is he right? The only point in having parentheses is to define the way things should be combined. I know that the time evaluation order is undefined; I think he is mixed up with this issue.</p>
<p>Your expert advice will be helpful &#151; and if you can quote the appropriate K&amp;R I will pass it on to Green Hills. (Unfortunately I don&#146;t have a copy &#151; isn&#146;t there an &#147;online&#148; definition of the language?)</p>
<p>Thanks &#151; Yonatan Lehman</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> You really have three questions here:</p>

<UL><LI>   What is the associativity of <B>a = b - c - d</B>?</LI>
<LI>   What is the evaluation order of <B>a = b - c - d</B>?</LI>
<LI>   Where can you get the language standards online?</LI></UL>

<p>You don&#146;t say in your mail, but I&#146;m assuming you are using built-in types (in either C or C++) and no macros.</p>
<p>Question 1: The associativity of:</p>

<pre>
a = b - c - d;
</pre>

<p>is fixed by each language&#146;s standard <a href="#4">[4]</a>. As the additive operators binary <B>+</B> and binary <B>-</B> have left-to-right associativity, your original expression should behave as if written:</p>

<pre>
a = (b - c) - d;
</pre>

<p>I&#146;d be fairly surprised if the Green Hills compiler gets this wrong. Are you sure you&#146;re interpreting the code and results correctly?</p>
<p>Question 2: The Green Hills support person is correct. In the expression:</p>

<pre>
a = b - c - d;
</pre>

<p>you don&#146;t know which of the subexpressions <B>b - c</B> or <B>d</B> will evaluate first &#151; the actual ordering is unspecified.</p>
<p>If you aren&#146;t generating side effects in <B>b - c - d</B>, and if you avoid overflow and underflow, the evaluation order shouldn&#146;t be significant. If the order does matter, the support person&#146;s suggestion will work, by interposing a sequence point between the subexpressions:</p>

<pre>
tmp = b - c;
//         ^
// sequence point here ensures
// b - c evaluates before d
//
a = tmp - d;
</pre>

<p>Question 3: The C and C++ Standards are not legitimately available for free; you need to pay ISO for copies. There was a time you could find the drafts online. For all I know, you could still stumble into them via a web search.</p>
<p>While I&#146;m largely sticking to my new policy of not quoting or attributing the Standard, I&#146;ll make an exception here, since you specifically asked:</p>

<UL><LI>   The C99 Standard covers expressions generally in Subclause 6.5 and additive operators specifically in Subclause 6.5.6. There is also a related example in Subclause 5.1.2.3/14.</LI>
<LI>   The C++ Standard covers expressions generally in Clause 5 and additive operators specifically in Subclause 5.7.</LI></UL>

<p>If you insist on referencing K&amp;R, know that I have only the early (1978) pre-Standard version. There you can find what you want on page 48, in the section numbered 2.12 and titled &#147;Precedence and Order of Evaluation.&#148;</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  There&#146;s an excellent chance the implementation of <B>std::max&lt;int&gt;</B> is the same as that of the stand-alone <B>::max</B> &#151; after all, there are only so many decent ways to implement a <B>max</B> function. But even then, the parameter lists won&#146;t match: the specialization has two <B>int</B>s, while the stand-alone function has an <B>int</B> and a <B>long</B>.</p>
<p><a name="2"></a>[2]  For those keeping score, Scott&#146;s bride goes by her pre-marriage surname Urbano. So does their dog Persephone. This is actually high praise for Nancy, since Persephone is fairly deified in their home. Come to think of it, both Urbanos are. Maybe Scott should change his name, for at the moment he&#146;s really (get ready for it) Suburbano.</p>
<p><a name="3"></a>[3]  I was a DJ at my college&#146;s FM radio station from 1979 to 1985. European synth-pop was a staple of our new-music rotation and thus infiltrated my brain, as well as my subsequent music collection.</p>
<p><a name="4"></a>[4]  At least implicitly. As neither Standard explicitly lists operator precedence and associativity, you must infer them from the language grammars. </p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
