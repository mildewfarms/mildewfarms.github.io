<HTML>   
     <HEAD>
<TITLE>July 2002/Identifying and Managing Cyclic Physical Dependencies</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">  Software Tools</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Identifying and Managing Cyclic Physical Dependencies</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Bergin</FONT></H3>

<BLOCKQUOTE>
<p>If you're not careful, a complex project can set you spinning in circles. This tool can help set your project straight.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>A development team has been given the task of creating a transactional processing system that will receive text files containing transactions of various types, perform data validation, and load the data into the database. After a brief design meeting, the team decides that the following components must be created:</p>

<OL><LI>A parsing class to read the data from the files.</LI>
<LI>An exception class for error handling.</LI>
<LI>A class to handle the database interaction.</LI>
<LI>A base class to serve as the transaction interface.</LI>
<LI>A set of derived classes that each represent a specific type of transaction.</LI></OL>

<p>The team divvies up the assignments and goes their separate ways. Bob will write the base transaction class, Jim the derived transaction classes, Sarah the exception class, John the parser class, and Jane the database class.</p>
<p>After all of the components are created, compiled, and linked, the testing begins. On day one, Bob announces that a function in the base transaction class was supposed to return <B>int</B> instead of <B>bool</B> and schedules a compile for about noon. Jim says that he will recompile and retest the derived classes when Bob is done. Sarah, John, and Jane are happy that they are unaffected.</p>
<p>On day two, Jim announces that there is a bug in one of the derived transaction classes and that he will recompile and retest later in the morning. (No one else cares leaving Jim to wonder why he said anything at all.)</p>
<p>On day three, Sarah wants to modify a public function in the exception class and will recompile at about 10:00 a.m. This is a big deal. Bob, Jim, and Jane all must recompile and retest their code.</p>
<p>John notices that Jim&#146;s <B>tran_3</B> class has a <B>date</B> utility function that sounds like something he has been trying to work the bugs out of and decides in the spirit of code reuse to include it in his parser.</p>
<p>On day four, Bob announces that he is going to change the <B>int</B> return back to a <B>bool</B>. This means that Jim is going to have to recompile and retest the derived classes. Then John says that he will recompile and retest the parser when Jim is done. Now everyone cares about Jim&#146;s recompile. Sarah says that she must recompile and retest, then Jane, then Bob, and then Jim. The team now realizes that if any of them makes a change to their code, all of the components in the system must be retested.</p>

<H3><FONT COLOR="#000080">Finding Cyclic Dependencies</FONT></H3>

<p>This is an extremely simplistic example but it shows how easily a cyclic physical dependency can creep into a project. A physical dependency is created by using an <B>#include</B> directive to bring the definition of another class into a translation unit. In the real world, a cyclic dependency may be much more difficult to find. Imagine a project with scores of files, each with a dozen <B>#include</B> directives. It is easy to see how a cycle can remain undetected, only manifesting itself as very long compile/link cycles and bugs in code thought to be sufficiently tested. Poor communication within a team may also compound the problem, as not all of the players may be aware that the actions taken with their own code cascade throughout the entire team.</p>
<p>A simple UML diagram can make the cyclic dependencies a bit easier to spot. <a href="fig1.htm">Figure 1</a> is a class diagram of the original project. The dashed lines are drawn from each class to the classes on which it depends. (Note that the multiple paths from <B>trans_b</B> to <B>parse</B> are acceptable provided that the headers contain the appropriate code blocks to prevent multiple inclusions.) <a href="fig2.htm">Figure 2</a> shows the resulting cycles created by the inclusion of <B>tran_3.h</B> into <B>parse.h</B>. Although only the cycle itself is in bold, all of the components in the project depend upon a component in the cycle, so the entire project is affected by a change to any of the components in the cycle. <a href="fig3.htm">Figure 3</a> shows one possible solution to break the cycle. Placing the date functionality in its own class is an obvious solution since Jim never should have included it within the derived transaction in the first place.</p>
<p>This solution brings about a few interesting changes. The <B>parse</B> and <B>tran_3</B> components are now free to use the common code in the <B>date</B> component, but <B>tran_3</B> is also free to be modified without affecting any other components. This arrangement works out well for <B>tran_3</B> because it is probably going to be subjected to the most pressure for functional changes as the project matures and the business rules governing this transaction migrate. The <B>parse</B> class has been altered as well but in the opposite manner. It now has a dependency that it did not have in the original design. It is obvious by looking at <a href="fig3.htm">Figure 3</a> that the <B>date</B> component must be very stable because a change will cascade through the entire project.</p>
<p>Robert Martin formalized this concept <a href="#1">[1]</a> by defining the &#147;Stable Dependencies Principle&#148; as &#147;a package should only depend upon packages that are more stable than it is.&#148; The design in <a href="fig3.htm">Figure 3</a> will work fine provided that the most depended upon components are also the most stable. The design in <a href="fig2.htm">Figure 2</a> not only creates the situation where a change to any component will cascade throughout the entire system, but it also guarantees that this will happen by making all of the components dependent upon the least stable component. It is this property that makes all cyclic dependencies inherently destabilizing.</p>
<p>The occurrence of cyclic dependencies and possible solutions are covered from a similar object-oriented design perspective in <a href="#2">[2]</a> and <a href="#3">[3]</a>. John Lakos also covers this topic focusing on the proliferation of link cycles in Chapter 4 of <I>Large-Scale C++ Software Design</I> <a href="#4">[4]</a>. In this book, the focus is on the nature of the dependency graph, and how that affects the number of components that must be linked in order to test each.</p>
<p>For example, in order for a component to be tested, a test driver must link to that component and all of the components upon which it depends. If the original seven components were not dependent upon each other at all, it would take seven test drivers a total of seven links to test the entire system. (This system would not provide very much functionality, but it would test very quickly.) The system depicted in <a href="fig1.htm">Figure 1</a> requires seven test drivers and twenty-one links (an average of 3.0 components linked for each one tested). Once the cycle has been established (<a href="fig2.htm">Figure 2</a>), the same seven components require thirty-one links to test (4.4 components linked for each one tested). The solution shown in <a href="fig3.htm">Figure 3</a> adds an additional component, and therefore an additional test driver, but the eight components only require a total of twenty-nine links (3.6 components linked for each one tested). In general, an unconnected system with <I>N</I> components requires <I>N</I> links while the same system completely connected requires <I>N</I>2<I> </I>links. By comparison, a graph resembling a binary tree, which is more likely to represent a real-world dependency graph than the other two extremes, requires <I>NlogN</I> links. Testing a single component in a system with hundreds of files may take several minutes or hours to link depending on the nature of the dependencies.</p>
<p>I suggest that you read the sources listed below for a much deeper understanding of the subject. The remainder of this article will focus on identifying cyclic dependencies programmatically.</p>

<H3><FONT COLOR="#000080">The Program</FONT></H3>
<p>The <B>dep_graph</B> class searches out dependencies and builds a dependency graph (see sidebar <a href="sidebar.htm">&#147;Graphs and Graph Traversal&#148;</a>) similar to the graphs shown in <a href="fig1.htm">Figures 1</a>-<a href="fig3.htm">3</a>. <B>dep_graph</B> has a very simple interface for the construction of a directed graph, the processing of that graph, the output of the dependencies of each file, and the output of all possible paths for each file.</p>
<p>The <B>dep_graph</B> class requires three input files:</p>

<UL><LI>   <B>files.txt</B> &#151; A file that contains the names of the files to be processed.</LI>
<LI>   <B>search_paths.txt</B> &#151; A file containing the search paths to find these files.</LI>
<LI>   <B>defines.txt</B> &#151; A list of the preprocessor definitions that are to be provided to the compiler.</LI>
</UL>

<p>During the construction of a graph, the input files are read, the search paths are used to find the files to process, the preprocessor definitions are applied to the files, and a directed graph based on the <B>#include</B> statements that exist in each of the files is created. After the object is created, the graph can be processed and the output produced.</p>
<p>Each of the names listed in <B>files.txt</B> (as well as each of the names that have been included in these files) are treated as nodes in a potential graph. (I say potential graph because the program will map all of the paths regardless of whether the nodes form one or several graphs. If a change is made in the dependency graph that severs a path, then the output will reflect the paths that exist in both graphs.)</p>
<p>The physical dependencies between files can be determined using the <B>#include</B> directives alone <a href="#4">[4]</a>. This is because a file cannot use a component that is defined in a different file without either including the definition of the class that represents that component (to use an instance of) or by indirectly including a file that includes that definition (to use a reference of).</p>
<p>The processing for a particular file in <B>files.txt</B> begins with that file being read into a string. (If the file cannot be found in any of the search paths, it is ignored.) After the file has been read, the preprocessor definitions are evaluated and all excluded text (based on preprocessor directive conditional statements) is removed. The purpose of this step is to allow for conditional inclusion of files. This may be necessary for source code that is to be compiled on multiple platforms. <a href="list1.htm">Listing 1</a> shows <B>tran_3.h</B> and <B>parse.h</B> where I use conditional inclusion of files to test the various configurations shown in <a href="fig1.htm">Figures 1</a>-<a href="fig3.htm">3</a>.</p>
<p>A separate class (function object) handles the preprocessing stage. The workings of this class are beyond the scope of this paper, so I will not spend much time on details. In order for a class to serve as a preprocessor, the class must have a default constructor and a function call operator that takes the file to be processed as a <B>string&amp;</B> and the file containing the preprocessor definitions as a <B>const string&amp;</B>. The <B>operator()(string&amp;, const string&amp;)</B> does the actual work of evaluating the directives and pruning the file.</p>
<p>Aside: I am sure that there are utilities available specifically for this purpose. My primary reason for writing the utility myself was that upon reading about postfix and infix expression evaluation in <I>Algorithms in C++</I> by Robert Sedgewick <a href="#5">[5]</a>, it seemed like a fun exercise. The important thing is that the <B>dep_graph</B> object can use a preprocessor object to create a file that does not contain ambiguous <B>#include</B> directives. The preprocessor is provided as a template parameter, so users of the <B>dep_graph</B> class have the ability to wrap their own preprocessor in a function object and use it instead.</p>
<p>Once a file has been preprocessed, it is searched for <B>#include</B> statements. The node is created using a <B>map&lt;string, vector&lt;string&gt; &gt;</B> to represent the node and its associated edges. The traversal of the graph begins with a call to the <B>dep_graph::check_deps</B> function. This version does not take any parameters and is not recursively called. This function calls the recursive <B>version check_deps(const string&amp; cur_dep)</B> passing the name of one of the nodes in the graph as it argument. This call marks the start of a particular path. The recursive function calls itself passing each of its connecting nodes as arguments. The function returns if it finds a node with an empty node list (no edges) or it encounters a node in the path more than once. This is the simple algorithm for performing the depth-first search of the directed graph.</p>

<pre>
check_deps(current node name)
  add this node to the current path
  if this node has no edges, return
  if this node is already in the path, set cycle flag, return
  check_deps(next node name in the current node&#146;s list of 
    connecting nodes)
</pre>

<p><a href="list2.htm">Listing 2</a> shows the implementation of this function.</p>

<H3><FONT COLOR="#000080">Using the Program to Map Physical Dependencies</FONT></H3>
<p>There are two functions that print data to an output file. The function <B>print_all_files(ostream&amp; out)</B> creates a list of each file that is either listed in <B>files.txt</B> or has been <B>#include</B>d in one of those files. The function <B>print_all_paths(ostream&amp; out)</B> prints all dependency paths beginning at each of the files either listed in <B>files.txt</B> or that have been <B>#include</B>d in one of those files.</p>
<p>The analysis is performed iteratively by starting with a short file list and expanding it based on the results in the output file. This control is necessary so that the program does not run down all the dark alleys of the vendor library files without the user specifically asking it to do so.</p>
<p>This is an example session based on the code described above. First, I start with the list of the <B>*.cpp</B> files in the project. <a href="fig6.htm">Figure 6</a> shows the contents of <B>files.txt</B> and the resulting <B>output.txt</B>. Each of the files listed in <B>files.txt</B> has a path for each of the <B>#include</B> directives.</p>
<p>This is obviously not enough information, so I take the filenames that terminate the paths in the first <B>output.txt</B> and add them to <B>files.txt</B>. <a href="fig7.htm">Figure 7</a> shows the result of this second run. A comparison to <a href="fig1.htm">Figure 1</a> shows that all of the paths represented in the UML diagram have been produced on a separate line in the <B>output.txt</B> file. In this case, the system was sufficiently analyzed in just two iterations. A larger project may take several. As expected, the output contains no cycles.</p>
<p>The requirement that a file must be explicitly listed in <B>files.txt</B> may seem like a burden at first. However, had there been the usual set of standard <B>#include</B> files for iostream and STL libraries, the output would very quickly grow to an unusable size. This requirement allows the user to chase down a specific path through a library without viewing paths that are not covered in the current development.</p>
<p><a href="fig8.htm">Figure 8</a> contains the <B>output.txt</B> file that was created after <B>parse.h</B> included <B>tran_3.h</B> (by placing <B>VER_2</B> in the <B>defines.txt</B> file). This particular dependency graph is so small that all paths result in a cycle, although this is not always the case. The program stops pursuing a path as soon as it has encountered the same node twice and labels that path with the tag <B>{cycle}</B>.</p>
<p><a href="fig9.htm">Figure 9</a> shows <B>files.txt</B> and <B>output.txt</B> after the <B>date</B> class was added and <B>parse.h</B> and <B>tran_3.h</B> were modified to include it (by placing <B>VER_3</B> in <B>defines.txt</B>). Note that there are no cyclic dependencies.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This program provides a simple interface to produce a list of dependencies and all dependency paths for a desired group of files. The current driver that I use to run this program simply passes the command-line arguments to the constructor of a <B>dep_graph</B> object and then calls the two output functions. The <B>dep_graph</B> object can also be placed inside an enhanced driver if a more user-friendly interface is desired.</p>
<p>The best use of a utility such as this is to be periodically run on a system as part of the development cycle to prevent either the initial design or subsequent enhancements from introducing unforeseen and unwanted dependencies, particularly cyclic dependencies. (This can take place as soon as the initial headers have been created and long before any of the actual implementation has been written.)</p>
<p>If you are interested in a more robust set of applications that provides features such as adherence to certain coding standards and project statistics (levels of dependency, component dependency count, cumulative component dependency count, etc.), Appendix C in <I>Large-Scale C++ Software Design</I> by John Lakos <a href="#4">[4]</a> describes such a set of applications.</p>

<H3><FONT COLOR="#000080">Source Code</FONT></H3>

<p>The source code for this article is available for download at &lt;www.cuj.com/code&gt;. <B>dep_code.zip</B> within <B>bergin.zip</B> contains the code for the dependency graph and preprocessor utilities, as well as the driver. The program compiles on Hewlett-Packard 3.31 and Microsoft Visual C++ 6.0. The code for the dependency graph class has the implementation in the header so that the template member functions can be used. This is a trade-off to get the flexibility of a templatized preprocessor. <B>project_files.zip</B> also included in <B>bergin.zip</B> contains the stubbed files that make up the example project used in the article to allow the program to be run on real code.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  R.C. Martin. &#147;Large-Scale Stability,&#148; <I>C++ Report</I>, February 1997.</p>
<p><a name="2"></a>[2]  R.C. Martin. &#147;Granularity&#148;, <I>C++ Report</I>, November-December 1996.</p>
<p><a name="3"></a>[3]  R.C. Martin. &#147;Design Principles and Design Patterns,&#148; &lt;www.objectmentor.com&gt;, 2000.</p>
<p><a name="4"></a>[4]  John Lakos. <I>Large-Scale C++ Software Design</I> (Addison-Wesley, 1996).</p>
<p><a name="5"></a>[5]  Robert Sedgewick. <I>Algorithms in C++</I> (Addison-Wesley, 1998). </p>

<p><i><b>Thomas Bergin</B> has been programming C++ applications for the last six years after having spent ten years as an environmental geologist. He is currently working at the Kansas City, MO office of the National Association of Insurance Commissioners.</i></p>

<h4><a href="../../../source/2002/jul02/bergin.zip"></a></h4>

</blockquote></body></html>
