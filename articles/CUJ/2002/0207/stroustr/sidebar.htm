<html><HEAD>
<TITLE>July 2002/C and C++: Siblings/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Macros</FONT></H3>

<HR>

<BLOCKQUOTE>

<p>C and C++ programmers view macros very differently. The difference is so great that it can be considered philosophical. C++ programmers typically avoid macros wherever possible, preferring facilities that obey type and scope rules. In most cases, C programmers don&#146;t have such alternatives and use macros. For example, a C++ programmer might write something like:</p>

<pre>
const  int  mx = 7;

template&lt;class  T&gt; inline  T  abs(T  a)
{ return (a&lt;0)?-a:a; }

namespace  N {
  void  f(int  i) { /* ... */ }
};

class  X {
public:
  X(int);
  ~X();
  // ...
};
</pre>

<p>A C programmer facing a similar task might write something like:</p>

<pre>
#define  MX  7

#define  ABS(a) (((a)&lt;0)?-(a):(a))

void  N_f(int  i) { /* ... */ }

struct  X { /* ... */ };
void  init_X(struct  X *p, int  i);
void  cleanup_X(struct  X *p);
</pre>

<p>At the core of many C++ programmers&#146; distrust of macros lies the fact that macros transform the program text before tools such as compilers see it. Because macro substitution follows rules that don&#146;t involve scope or semantics, surprises can result. Namespaces, class scopes, and function scopes provide no protection against a macro. Eliminating the use of macros to express ideas in code has been a constant aim of C++ (see Chapter 18 of <a href="stroustr.htm#8">[8]</a>). A C++ programmer tends to view a solution involving a macro with suspicion and, at best, as a lesser evil. On the other hand, a C programmer often views that same solution as natural and often as elegant. Both programmers are right in their respective languages, and this is a source of some misunderstanding. Any solution to a compatibility problem that involves a macro is automatically considered suspect by many C++ programmers. Thus, any use of a macro in the Standard becomes a potential incompatibility as the C++ community looks for alternative solutions to avoid its use. The only macro found in the C++ Standard (besides those inherited from C) is <B>__cplusplus</B>.</p>

</blockquote></body></html>
