<HTML>   
     <HEAD>
<TITLE>July 2002/C and C++: Siblings</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C and C++: Siblings</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bjarne Stroustrup</FONT></H3>

<BLOCKQUOTE>
<p>We're at a crossroads for compatibility between C and C++. Can siblings go their separate ways and still remain on speaking terms? In this first of three parts, Bjarne provides context for the discussion.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Classic C <a href="#1">[1]</a> has two main descendants: ISO C and ISO C++. Over the years, these languages have evolved at different paces and in different directions. One result of this evolution is that each language provides support for traditional C-style programming in slightly different ways. The resulting incompatibilities can make life miserable for people who use both C and C++, for people who write in one language using libraries implemented in the other, and for implementers of C and C++ tools.</p>
<p>This article is Part 1 in a series that explores the relationship between K&amp;R C&#146;s <a href="#2">[2]</a> most prominent descendants: ISO C and ISO C++. My focus is the areas where C and C++ differ slightly (&#147;the incompatibilities&#148;), rather than on the large area of commonality or the areas where one language provides facilities not offered by the other. A longer technical report that presents more historical context and many more examples is available online <a href="#3">[3]</a>.</p>

<H3><FONT COLOR="#000080">A Family Tree</FONT></H3>

<p>How can I call C and C++ siblings? C++ is a descendant of K&amp;R C. However, what we call &#147;C&#148; today (the C89 or C99 Standard) is also a descendent of K&amp;R C, and it is therefore appropriate to think of C and C++ as siblings.</p>
<p><a href="fig1.htm">Figure 1</a> shows the C family tree. ISO C and ISO C++ emerge as the two major descendants of K&amp;R C, and as siblings. Each carries with it the key aspects of Classic C, and neither is 100-percent compatible with Classic C. For example, both siblings consider <B>const</B> a keyword, and both deem this famous Classic C program non-standard compliant:</p>

<pre>
main()
{
  printf("Hello, world\n");
}
</pre>

<p>As a C89 program, Kernighan and Ritchie&#146;s classic &#147;Hello World&#148; has one error. As a C++98 program, it has two errors. As a C99 program, it has the same two errors, and if those were fixed, the meaning would be subtly different from the identical C++ program.</p>
<p>As C and C++ drift further from Classic C, incompatibilities become more numerous and more pronounced. The siblings of Classic C share their various traits in a confusing array of combinations. <a href="fig2.htm">Figure 2</a> reveals seven compatibility categories, and a programmer must understand which features fall in which category in order to write compatible code (see <a href="tab1.htm">Table 1</a>).</p>
<p>One of the big questions for the C/C++ community is whether the next phase of standardization (potentially adding two more circles to <a href="fig2.htm">Figure 2</a>) will pull the languages together or tear them further apart. In 10 years, there will be large and thriving C and C++ communities. However, if the languages are allowed to drift further apart, there will not be a C/C++ community, sharing tools, implementations, techniques, headers, and code. <a href="fig3.htm">Figure 3</a> shows my nightmare scenario. Each separate area of the diagram represents a different set of incompatibilities that an implementer must address and that a programmer may have to be aware of.</p>
<p>The differences between C++ and C89 are documented in Appendix C of the ISO C++ Standard <a href="#4">[4]</a>. The major differences between C89 and C99 are summarized on two pages of the C99 foreword <a href="#5">[5]</a>. The differences between C++ and C99 are not officially documented because the ISO C committee had neither the time nor the expertise to document differences, and the C99 committee&#146;s charter <a href="#6">[6]</a> did not require documenting C++/C99 incompatibilities. An unofficial, but extensive list of incompatibilities can be found on the Web <a href="#7">[7]</a>.</p>

<H3><FONT COLOR="#000080">The Spirit of C</FONT></H3>

<p>The phrases &#147;the spirit of C&#148; and &#147;the spirit of C++&#148; are often used as weapons to condemn notions supposedly not in the right spirit and therefore somehow illegitimate. More reasonably, these phrases can be used to distinguish languages aimed at supporting low-level systems programming, such as C and C++, from languages without such support. I find these &#147;spirit&#148; arguments poisonous when they are thoughtlessly applied within the C/C++ community. More often than not, these phrases dress up personal likes and dislikes as philosophies supposedly backed by &#147;the fathers of C&#148; or &#147;the fathers of C++.&#148; These attacks can be amusing and occasionally embarrassing to Dennis Ritchie and me. We are still alive and do hold opinions, though Dennis, being older and wiser, is better able to keep quiet.</p>
<p>The following rules are often claimed as part of &#147;the spirit of C&#148;:</p>

<OL><LI>Keep the built-in operations close to the machine (and efficient).</LI>
<LI>Keep the built-in data types close to the machine (and efficient).</LI>
<LI>No built-in operations on composite objects.</LI>
<LI>Don&#146;t do in the language what can be done in a library.</LI>
<LI>The standard library can be written in the language itself.</LI>
<LI>Trust the programmer.</LI>
<LI>The compiler is simple.</LI>
<LI>The run-time support is very simple.</LI>
<LI>In principle, the language is type-safe, but not automatically checked (use <B>lint</B> for checking).</LI>
<LI>The language isn&#146;t perfect because practical concerns are taken seriously.</LI>
</UL>

<p>You can find support for all of these rules in the opening pages of <a href="#2">[2]</a>.</p>
<p>Naturally, Classic C is a good approximation of &#147;the spirit of C.&#148; C99 and C++ are less so, but they still approximate those ideals. This is significant because most languages don&#146;t. From the perspective of Ada, Java, or Python, C and C++ appear as twins. Only in discussions within the C/C++ community do the differences appear to overwhelm the commonalities.</p>
<p>In the spirit of rule 10, Classic C breaks rule 3 by adding structure assignment and structure argument passing to K&amp;R C.</p>
<p>C++ starts out by breaking rule 7: a greater emphasis on type and scope distinguishes C++ compared to C. Consequently, a C++ compiler front end must do much more than a Classic C front end does. The introduction of exceptions complicates C++&#146;s run-time support, violating rule 8. However, that may be defended on the grounds that if you don&#146;t need exceptions, you can avoid using them. After 20 years, it is more remarkable that C++ closely follows the remaining eight criteria. In particular, C++ can be seen as the result of following rules 1 to 5 to their logical conclusion by allowing the user to define general and efficient types and libraries.</p>
<p>Compared to early C compilers, modern C implementations cannot be called simple, so C99 also breaks rule 7. Since <B>&lt;tgmath.h&gt;</B> cannot be written in C (though something almost identical can be written in C++), C99 breaks rule 5. Arguably, C99&#146;s <B>complex</B> facilities violate rules 1, 2, and 3.</p>
<p>Contrary to popular myths, there is no more tolerance of time and space overheads in C++ than there is in C. The emphasis on run-time performance varies more between different communities using the languages than between the languages themselves. In other words, overheads are found in some uses of the languages rather than in the language features.</p>
<p>Underlying the flame wars over &#147;the Spirit of C&#148; is a genuine concern for the direction of C&#146;s and/or C++&#146;s evolution &#151; that is, a consistent aim to provide a coherent language from a set of changes and extensions.</p>
<p>In their evolution from Classic C, C99 and C++ differ in philosophy. C++ has a clearly stated philosophy of language: the emphasis in the selection of new facilities is on mechanisms for defining and using new types safely and efficiently. Basic facilities for computation were, as much as possible, inherited from Classic C and later from C89. C++ will go a long way to avoid introducing a new fundamental type. The prevailing view is that if you need one type then many programmers will need similar types. Consequently, providing mechanisms for expressing such types in the language will serve many more programmers than providing the one type as a built-in. In other words, the emphasis is on facilities for organizing code and building libraries (often referred to as &#147;abstraction mechanisms&#148;).</p>
<p>By contrast, the emphasis in the evolution of C89 into C99 has been on the direct support for traditional (Fortran-style) numerical computation. Consequently, the major extensions of C99 compared to C89 are in new built-in numeric types, new mathematical functions and macros, numeric I/O facilities, and extensions to the notion of an array. The contrasting approaches to complex numbers and to <B>vector</B>s/VLAs illustrate the difference in C++&#146;s and C99&#146;s design philosophies: C adds built-in facilities where C++ adds to the standard library <a href="#3">[3]</a>.</p>
<p>Ideally, C&#146;s emphasis on built-in facilities and C++&#146;s emphasis on abstraction mechanisms are complementary. However, to maximize compatibility, the emphasis on built-in facilities must be on fundamental computational issues (i.e., on facilities that cannot elegantly and efficiently be provided by composing already existing facilities). Care must be taken not to increase reliance on mechanisms known to cause problems for the abstraction mechanisms, such as macros (see <a href="sidebar.htm">sidebar</a>), uneven support for built-in types, and type violations.</p>

<H3><FONT COLOR="#000080">Understanding C/C++ Feature Differences</FONT></H3>

<p>Most C and C++ compatibility problems fall into one of the following catagories:</p>

<UL><LI>   Issues that affect interfaces, such as virtual functions and VLAs.</LI>
<LI>   Issues that affect only the form of the code that they are part of, such as declarations in conditions and designated initializers.</LI></UL>

<p>The following sections give examples of these compatibility issues and explore some of the perils programmers face when they navigate the incongruities of C and C++.</p>

<H3><FONT COLOR="#000080">Trivial Interfaces</FONT></H3>

<p>C++ programmers have always known that to make code accessible to C programs they must provide interfaces that avoid non-C features, such as classes with virtual functions. These C-to-C++ interfaces have typically been trivial. For example:</p>

<pre>
// C interface:
extern  int  f(struct  X* p, int  i);

// C++ implementation of C interface:
extern "C" int  f(X* p, int  i) 
{ return  p-&gt;f(i); }
</pre>

<p>C programmers typically assume any C header can be used from a C++ program. This assumption has largely been true (after someone adds suitable <B>extern "C"</B> directives), though headers that use C++ keywords as identifiers have been a constant irritant to C++ programmers (and sometimes a serious practical problem). For example:</p>

<pre>// not C:
class  X { /* ... */ };
// not C++:
struct  S { int  class; /* ... */ };
</pre>

<p>C99 introduces several features that, if placed in a header, will prohibit the use of that header in a C++ program (or in a C89 program). Examples include VLAs, restricted pointers, <B>_Bool</B>, <B>_Complex</B>, some <B>inline</B> functions, and macros with a variable number of arguments. For example:</p>

<pre>
// C99 interface features, not found in 
// C++ or C89: equivalent to 
// f(int *const):
void  f1(int[const]);
// p is supposed to point to at least
// 8 chars:
void  f2(char  p[static  8]);
void  f3(double *restrict);
// p is a VLA
void  f4(char  p[*]);

// may or may not be C++ also [3]:
inline  void  f5(int  i) { /* ... */ }
void  f6(Bool);
void  f7(Complex);

#define  PRINT(form ...) \
fprintf(form,__VA_ARGS__)
</pre>

<p>If a C header uses one of those features, mediation code and a C++ header must be provided for the C code to be used from C++.</p>
<p>The ability to share header files is an important aspect of C and C++ culture and a key to performance of programs using both languages. If the header files are kept compatible, C and C++ programs can call libraries implemented in &#147;the other language&#148; with no data conversion overheads and no (or very minimal) call overhead.</p>

<H3><FONT COLOR="#000080">Thin Bindings</FONT></H3>

<p>Shared declarations are sometimes an insufficient solution to the header compatibility problem. In cases where the languages provide similar functionality in different ways, another approach to header compatibility is to provide &#147;compatibility headers&#148; that, through liberal use of <B>#ifdef</B>s, provide very different definitions for each language, but allow user code to look very similar. For example:</p>

<pre>
// my double precision complex

#ifdef  __cplusplus
  #include&lt;complex&gt;
  using  namespace  std;
  typedef  complex&lt;double&gt; Cmplx;
  inline  Cmplx  Cmplx_ctor(double  r,
    double  i)
  { return  Cmplx(r,i); }
  //...
#else
  #include&lt;complex.h&gt;
  typedef  double  complex  Cmplx;
  #define  Cmplx_ctor(r,i) \
  ((double)(r)+I*(double)(i))
  //...
#endif

void  f(Cmplx  z)
{
  Cmplx  zz = z+Cmplx_ctor(1,2);
  Cmplx  z2 = sin(zz);
  // ...
}
</pre>

<p>This approach requires the programmer to create a new dialect that maps into both languages. In other words, a user (or a library vendor) must invent a private language simply to compensate for compatibility problems. The resulting code is typically neither good C nor good C++. In particular, by using this technique, the C++ programmer is restricted to using what is easily represented in C. For example, unless exceptional effort is expended on the C mapping, arrays must be used rather than containers, overloading beyond what is offered by C99&#146;s <B>&lt;tgmath.h&gt;</B> must be avoided, and errors cannot be reported using exceptions. In addition, macros tend to be used much more heavily than C++ programmers would like. Such restrictions can be acceptable when providing interfaces to other code, but these restrictions are typically too constraining for a C++ programmer to use within the implementation. Similarly, a C programmer using this technique is prevented from using C facilities not also supported by C++, such as VLAs and restricted pointers.</p>
<p>Real code/libraries will have much larger &#147;thin bindings&#148; with many more macros, <B>typedef</B>s, <B>inline</B>s, etc., and more conventions for their use. The likelihood that two such &#147;thin bindings&#148; can be used in combination is slim and the effort to learn a new binding is non-trivial. Thus, the &#147;compatibility header&#148; approach doesn&#146;t scale and fractures the community.</p>

<H3><FONT COLOR="#000080">Competing Programming Models</FONT></H3>

<p>Interfaces (e.g., information in header files) are all that matter to people who see C and C++ as distinct languages that just happen to be able to produce code that can be linked together (like C and Fortran). However, teachers, implementers, and all other programmers who work in both languages must contend with equally intractable compatibility issues related to the facilities used to express computations.</p>
<p>The differing programming models of C and C++ lead to alternative solutions for many common tasks. These alternative approaches are problematic for the following reasons:</p>

<OL><LI>An alternative forces programmers to choose between two sets of facilities and their associated programming techniques.</LI>
<LI>An alternative more than doubles the effort for teachers and students.</LI>
<LI>Code using separate alternatives can often cooperate only through specially written mediation code.</LI></OL>

<p>Consider the problem of manipulating a number of objects where that number is known only at run time. C++ and C99 offer alternative solutions not present in C89. Consider a C89 example:</p>

<pre>
/* C89: v points to m Ys */
void  f89(int n, int m, struct Y* v)
{
  /* not Classic C; not C++ */
  struct X* p = 
    malloc(n*sizeof(struct  X));
  struct Y* q = 
    malloc(m*sizeof(struct  Y));
  /* memory exhausted */
  if (p==NULL || q==NULL) exit(-1);
  if (3&lt;n &amp;&amp; 4&lt;m) p[3] = v[4];
  /* copy */
  memcpy(q,v,v+m*sizeof(struct  Y));
  /* ... */
  free(q);
  free(p);
}
</pre>

<p>Among the potential problems with this code is that <B>v</B> might not point to an array with at least <B>m</B> elements.</p>
<p>The obvious C99 alternative is:</p>

<pre>
// C99: v points to m Ys
void  f99(int n, int m, struct Y v[m])  
{
  // not C89; not C++
  struct X p[n];
  struct Y q[m];
  if (3&lt;n &amp;&amp; 4&lt;m) p[3] = v[4];
  // copy
  memcpy(q,v,v+m*sizeof(struct  Y));
  // ...
}
</pre>

<p>The nicer syntax makes it less likely that <B>v</B> does not point to an array with at least <B>m</B> elements, but that is still possible. Unfortunately, the code does not define what happens if the array definition fails to allocate memory for the <B>n</B> elements required. The use of arrays automates the freeing of memory, though there could still be a memory leak if <B>f99</B> is exited through a <B>longjmp</B>.</p>
<p>The obvious C++ alternative is:</p>

<pre>
// C++: v holds v.size() Ys
void  fpp(int n, vector&lt;Y&gt;&amp; v)
{
  // not C89; not C99
  vector&lt;X&gt; p(n);
  if (3&lt;p.size() &amp;&amp; 4&lt;v.size()) p[3] =
    v[4];
  // copy
  vector&lt;Y&gt; q = v;
  // ...
}
</pre>

<p>A <B>vector</B> contains the number of its elements, so the programmer doesn&#146;t have to worry about keeping track of array sizes or about freeing the memory used to hold those elements.</p>
<p>The standard library <B>vector</B> is more general than a VLA. For example, <B>vector</B> has a copy operation, you can change the size of a <B>vector</B>, and <B>vector</B> operations are exception safe (see Appendix E of <a href="#9">[9]</a>). This could imply a performance overhead compared to VLAs on some implementations, but so far I have not found significant overheads.</p>
<p>The key point is that users have to choose and the users of more than one of these languages have to understand the different programming styles and remember where to apply them. The result is that these differences in the programming models of C and C++ make it significantly more difficult to program in both languages than to program in one &#151; even though the two languages share many features and are supposed to be closely related.</p>

<H3><FONT COLOR="#000080">As Close as Possible...</FONT></H3>

<p>The semi-official policy for C++ in regards to C compatibility has always been &#147;As Close as Possible to C, but no Closer&#148; <a href="#10">[10]</a>. Naturally, wits have answered with &#147;As Close as Possible to C++, but no Closer,&#148; but I have never seen that in any official context nor seen any elaboration of what it means.</p>
<p>How close is &#147;as close as possible to C&#148;? Traditionally, this statement has meant &#147;compatible with C except where the C++ type system would be compromised.&#148; Differences such as those for <B>void*</B>, C++&#146;s insistence on function prototypes, the use of built-in types for <B>bool</B> and <B>wchar_t</B>, and even the <B>inline</B> rules, can be explained that way <a href="#3">[3]</a>.</p>
<p>The &#147;as close as possible...&#148; rules were crafted under the assumption that &#147;the other language&#148; was immutable. In reality, it has not been so: just look at the number of cross borrowings between C and C++ <a href="#3">[3]</a>. I believe that it would be technically feasible for &#147;as close as possible&#148; to be &#147;identical in the subset supporting traditional C-style programming&#148; assuming that changes could be made simultaneously to both languages systematically bringing them closer together.</p>
<p>Whatever is (or isn&#146;t) done must be considered in light of the fact that the world changes rapidly and users expect programming languages to evolve to meet new challenges. Thus, compatibility issues must be considered in the wider context of language evolution. The most promising approach is to consider C and C++ close to complete in language support for their respective programming styles. Future extensions can focus on provision of standard or non-standard libraries. If you think of C and C++ as essentially complete, C/C++ compatibility emerges as part of the consolidation and cleanup of basic facilities.</p>
<p>You&#146;ll learn more about the case for C and C++ compatibility in next month&#146;s <I>CUJ</I>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Classic C is K&amp;R C plus structure assignment, enumerations, and <B>void</B>. I picked the term &#147;Classic C&#148; from a sticker that used to be affixed to Dennis Ritchie&#146;s terminal.</p>
<p><a name="2"></a>[2]  Brian Kernighan and Dennis Ritchie. <I>The C Programming Language</I> (Prentice-Hall, 1978).</p>
<p><a name="3"></a>[3]  Bjarne Stroustrup. <I>Sibling Rivalry: C and C++</I> (AT&amp;T Labs &#151; Research Technical Report TD-54MQZY, January 2002), &lt;www.research.att.com/~bs/siblingrivalry.pdf&gt;.</p>
<p><a name="4"></a>[4]  ISO/IEC 14882, Standard for the C++ Language.</p>
<p><a name="5"></a>[5]  ISO/IEIC 9899:1999, Programming Languages C.</p>
<p><a name="6"></a>[6]  John Benito, the ISO C committee liaison to the ISO C++ committee, in response to a request to document C++/C99 incompatibilities similar to C89/C++ incompatibilities.</p>
<p><a name="7"></a>[7]  David R. Tribble. &#147;Incompatibilities between ISO C and ISO C++,&#148; &lt;http://david.tribble.com/text/cdiffs.htm&gt;.</p>
<p><a name="8"></a>[8]  Bjarne Stroustrup. <I>The Design and Evolution of C++</I> (Addison-Wesley, 1994).</p>
<p><a name="9"></a>[9]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, Special Edition, (Addison-Wesley, 2000).</p>
<p><a name="10"></a>[10]  Andrew Koenig and Bjarne Stroustrup. &#147;C++: As Close to C as Possible but No Closer,&#148; <I>The C++ Report</I>, July 1989.</p>
<p><a name="11"></a>[11]  Graham Birtwistle, Ole-Johan Dahl, Bjorn Myrhaug, and Kristen Nygaard. <I>SIMULA BEGIN</I> (Studentlitteratur, 1979).</p>
<p><a name="12"></a>[12]  ISO/IEC 9899:1990, Programming Languages C.</p>
<p><a name="13"></a>[13]  Brian Kernighan and Dennis Ritchie. <I>The C Programming Language</I>, Second Edition (Prentice-Hall, 1988).</p>
<p><a name="14"></a>[14]  Martin Richards and Colin Whitby-Strevens. <I>BCPL, the language and its compiler</I> (Cambridge University Press, 1980). </p>

<p><i><B>Bjarne Stroustrup</B> is the designer and original implementer of C++. He has been a member of the C/C++ community since he first used C in 1975. For 17 years, he worked in Bell Labs&#146; Computer Science Research Center alongside people such as Dennis Ritchie and Brian Kernighan. In the early 1980s, he participated in the internal Bell Labs standardization of C. He is the author of <I>The C++ Programming Language</I> and <I>The Design and Evolution of C++</I>. His research interests include distributed systems, operating systems, simulation, design, and programming. He is an AT&amp;T Fellow and heads AT&amp;T Lab&#146;s Large-scale Programming Research department. He is actively involved in the ANSI/ISO standardization of C++. He received the 1993 ACM Grace Murray Hopper award and is an ACM fellow.</i></p>

</blockquote></body></html>
