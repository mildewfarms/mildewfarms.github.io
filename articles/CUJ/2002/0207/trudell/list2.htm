<HTML><HEAD>
<TITLE>July 2002/The Application Watchman Class/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: AppWatchMan.cpp</A></h4>
<pre>
// Definition for Application Watch Man Class Functions
#include &lt;time.h&gt;
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;malloc.h&gt;
#include &lt;crtdbg.h&gt;
#include &lt;memory.h&gt;
#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;
#include &lt;windows.h&gt;
#include &lt;string&gt;
#include "AppWatchMan.h"

using namespace std;

// Since _Crt functions are only compiled if _DEBUG
#ifdef   _DEBUG
  const bool AppWatchMan::m_bOnDuty = true;
#else
  const bool AppWatchMan::m_bOnDuty = false;
#endif

AppWatchMan::AppWatchMan() : m_pStrLog(&amp;cout)
{
  if ( m_bOnDuty )
  {
    ios::sync_with_stdio();

    _CrtSetReportMode(_CRT_WARN,   _CRTDBG_MODE_FILE );
    _CrtSetReportFile(_CRT_WARN,   _CRTDBG_FILE_STDOUT);
    _CrtSetReportMode(_CRT_ERROR,  _CRTDBG_MODE_FILE );
    _CrtSetReportFile(_CRT_ERROR,  _CRTDBG_FILE_STDOUT);
    _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE );
    _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDOUT);

    memset((void *)&amp;m_stFirst,    0, sizeof(m_stFirst));
    memset((void *)&amp;m_stPrevious, 0, sizeof(m_stPrevious));
    memset((void *)&amp;m_stLast,     0, sizeof(m_stLast));
    memset((void *)&amp;m_stDiff,     0, sizeof(m_stDiff));

    time_t ltime;
    time( &amp;ltime );
    *m_pStrLog &lt;&lt; ON_DUTY_STR &lt;&lt; ctime(&amp;ltime);

    int nHeapOkay = TRUE;
    *m_pStrLog &lt;&lt; CHECK_HEAP_STR &lt;&lt; endl;
    _ASSERT(nHeapOkay = _CrtCheckMemory());
    if ( nHeapOkay == TRUE )
    {
      *m_pStrLog &lt;&lt; HEAP_IS_OKAY_STR &lt;&lt; endl;
    }
    *m_pStrLog &lt;&lt; TAKE_SNAPSHOT_STR &lt;&lt; endl;
    _CrtMemCheckpoint(&amp;m_stFirst);
    *m_pStrLog &lt;&lt; DUMP_SNAPSHOT_STR &lt;&lt; endl;
    _CrtMemDumpStatistics(&amp;m_stFirst);
    m_stLast = m_stFirst;
  }
}

bool AppWatchMan::DoRounds(const char* szComment, FLAGS flags)
{
  bool bErrorFound = false;

  if ( m_bOnDuty )
  {
    bool bPotentialLeak = false;
    int  nHeapOkay      = TRUE;

    time_t ltime;
    time( &amp;ltime );
    *m_pStrLog &lt;&lt; endl &lt;&lt; DO_ROUNDS_STR &lt;&lt; szComment &lt;&lt; " " \
               &lt;&lt; ctime(&amp;ltime);

    // Check the heap memory integrity before anything
    if ( (flags &amp; CHECK_HEAP) != 0 )
    {
      *m_pStrLog &lt;&lt; CHECK_HEAP_STR &lt;&lt; endl;
      _ASSERT(nHeapOkay = _CrtCheckMemory());
      if ( nHeapOkay == TRUE )
      {
        *m_pStrLog &lt;&lt; HEAP_IS_OKAY_STR &lt;&lt; endl;
      }
      else
      {
        bErrorFound = true;
      }
    }

    // TAKE_SNAPSHOT
    if ( (flags &amp; TAKE_SNAPSHOT) != 0 )
    {
      // Move Last Reading to Previous
      m_stPrevious = m_stLast;

      // Take a Reading (Win32 C Run Time Library)
      *m_pStrLog &lt;&lt; TAKE_SNAPSHOT_STR &lt;&lt; endl;
      _CrtMemCheckpoint(&amp;m_stLast);

      if ( (flags &amp; DUMP_SNAPSHOT) != 0  )
      {
        *m_pStrLog &lt;&lt; DUMP_SNAPSHOT_STR &lt;&lt; endl;
        _CrtMemDumpStatistics(&amp;m_stLast);
      }
    }

    // COMP_TO_PREV
    if ( (flags &amp; COMP_TO_PREV) != 0 )
    {
      bPotentialLeak = 
        (_CrtMemDifference( &amp;m_stDiff,
                            &amp;m_stPrevious,
                            &amp;m_stLast )== TRUE) ? true : false;
      if ( bPotentialLeak )
      {
        bErrorFound = true;
        *m_pStrLog &lt;&lt; POTENTIAL_LEAK_STR &lt;&lt; endl;
      }
      *m_pStrLog &lt;&lt; COMP_TO_PREV_STR &lt;&lt; endl;
      _CrtMemDumpStatistics(&amp;m_stDiff);
    }

    // COMP_TO_START
    if ( (flags &amp; COMP_TO_START) != 0 )
    {
      bPotentialLeak = 
        (_CrtMemDifference( &amp;m_stDiff,
                            &amp;m_stFirst,
                            &amp;m_stLast )== TRUE) ? true : false;
      if ( bPotentialLeak )
      {
        bErrorFound = true;
        *m_pStrLog &lt;&lt; POTENTIAL_LEAK_STR &lt;&lt; endl;
      }
      *m_pStrLog &lt;&lt; COMP_TO_START_STR &lt;&lt; endl;
      _CrtMemDumpStatistics(&amp;m_stDiff);
    }

    // LEAKS_FROM_PREV (only if there is a diff.)
    if ( (flags &amp; LEAKS_FROM_PREV) != 0 )
    {
      bPotentialLeak = 
        (_CrtMemDifference( &amp;m_stDiff,
                            &amp;m_stPrevious,
                            &amp;m_stLast )== TRUE) ? true : false;
      if ( bPotentialLeak )
      {
        bErrorFound = true;
        *m_pStrLog &lt;&lt; POTENTIAL_LEAK_STR &lt;&lt; endl;
        *m_pStrLog &lt;&lt; LEAKS_FROM_PREV_STR &lt;&lt; endl;
        _CrtMemDumpAllObjectsSince(&amp;m_stPrevious);
      }
    }

    // LEAKS_FROM_START
    if ( (flags &amp; LEAKS_FROM_START) != 0 )
    {
      bPotentialLeak = 
        (_CrtMemDifference( &amp;m_stDiff,
                            &amp;m_stFirst,
                            &amp;m_stLast ) == TRUE) ? true : false;
      if ( bPotentialLeak )
      {
        bErrorFound = true;
        *m_pStrLog &lt;&lt; POTENTIAL_LEAK_STR &lt;&lt; endl;
        *m_pStrLog &lt;&lt; LEAKS_FROM_START_STR &lt;&lt; endl;
        _CrtMemDumpAllObjectsSince(&amp;m_stFirst);
      }
      else
      {
        *m_pStrLog &lt;&lt; NO_LEAKS_STR &lt;&lt; " Since First Snapshot!" 
                   &lt;&lt; endl;
      }
    }
  }
  return bErrorFound;
}

// end of AppWatchMan.cpp
&#151; End of Listing &#151;</pre></body></html>
