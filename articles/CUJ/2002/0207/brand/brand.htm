<HTML>   
     <HEAD>
<TITLE>July 2002/XParam &#151; A General Purpose Serialization Framework for C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">XParam &#151; A General Purpose Serialization Framework for C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Brand, Ronnie Maor, and Sasha Gontmakher</FONT></H3>

<BLOCKQUOTE>
<p>From command-line processing to object serialization &#151; this class does it all.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE></p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>One of the first things a program should do is parse input parameters. There are several tools for accomplishing this, such as the GNU <B>getopt</B> <a href="#1">[1]</a>. However, most of these tools are C-based.</p>
<p>We have developed a C++-based tool for parsing parameters. It improves the process in a way similar to how <B>iostream</B> is an improvement over <B>printf</B>/<B>scanf</B>: it is type-safe and extensible. We call the tool XParam, which stands for Transfer of Parameters.</p>
<p>Traditionally, program parameters are expected to be of basic types. <B>getopt</B> allows you to pass integers, floats, and string values to programs. While this is sufficient in C, in C++ you want to be able to use any object as a parameter. In XParam, parameters can be of simple types, such as <B>int</B>, <B>double</B>, or <B>string</B>. In addition, they can be of any C++ type, including STL classes and user-defined types.</p>
<p>In order to initialize general C++ types from input text in a type-safe manner, XParam includes a complex value manipulation engine. This engine must know parts of the types&#146; interfaces. Ideally, it should receive the necessary information directly from C++. However, C++ has no reflection capabilities. Therefore, these types need to be described to XParam explicitly. This is accomplished by registration, which we will describe later in this article.</p>
<p>Using object-oriented methodology in parameter handling naturally suggests extensions that were previously impossible. We added a crucial feature that allows polymorphism across the input barrier. This addition almost immediately found use in several software projects that employed XParam as their plug-in management framework, easily achieving what previously necessitated a very costly implementation.</p>
<p>Adding an output capability to XParam was also immediately put to use for cross-program communication: the output of one program can readily be processed as the input of another and can be passed across communication lines and between platforms.</p>
<p>In this article, we present XParam and describe some interesting C++ techniques that were used in writing it. We will base our examples on a hypothetical object-drawing program, which uses classes such as <B>Point</B>, <B>Line</B>, and <B>Circle</B>.</p>
<p>XParam is free and available at &lt;http://xparam.sourceforge.net&gt;.</p>

<H3><FONT COLOR="#000080">Usage Examples</FONT></H3>

<p>Suppose you want to write a program for drawing shapes on the graphic screen. With some work, you can program classes <B>Line</B>, <B>Point</B>, <B>Circle</B>, etc., which can display themselves. There is only one thing left to do at this point: you need to write the <B>main</B> function. But how do you get the user to tell you what she wants to draw?</p>
<p>Without XParam, this would be a grueling task: every time you want to finish a project of this sort, you need to write command-line parsing code specific for it and its objects. With XParam, however, command-line parsing is generic and easy to use, so you are only a few lines of code away from a working program.</p>

<H3><FONT COLOR="#000080">Concrete Classes</FONT></H3>

<p>To keep the explanation simple, we will begin by letting the user enter two points. The program will draw a line connecting them.</p>
<p>A sample call to your program might look like this:</p>

<pre>
draw "p1=Point(7,8) p2=Point(10,3)"
</pre>

<p>The program that reads this input and draws the line looks like this:</p>

<pre>
#include &lt;xparam.h&gt;
#include "drawing_objects.h"
using namespace xParam;

int main(int argc, char* argv[]) {
  Point pt1,pt2;
  ParamSet ps;
  ps &lt;&lt; iParamVar(pt1,"p1")
     &lt;&lt; iParamVar(pt2,"p2");

  ps.input(argc,argv);
  Line l(pt1,pt2);
  l.draw();
  return 0;
}
</pre>

<p>The first thing this program does is to define a <B>ParamSet</B> object. <B>ParamSet</B>s are objects that contain the list of parameters that you wish to read. Parameters are inserted into the <B>ParamSet</B> using <B>operator&lt;&lt;</B>. For each parameter, you need to specify the name the users will assign to on the command line (e.g., <B>"p1"</B>), and the variable into which XParam will assign the value read (e.g., <B>pt1</B>). Typically, you would use the same name for both the C++ variable and the parameter name. The only reason for not doing so here is to clarify that these two names are conceptually independent.</p>
<p>The call to <B>ParamSet::input</B> reads and parses the command line. Once this line executes, <B>pt1</B> and <B>pt2</B> are initialized with values and ready to use, so we can simply construct <B>Line l</B> from them and draw it.</p>
<p>When XParam parses the input <B>Point(7,8)</B> it understands that it should build a <B>Point</B> object from two integers. It does this by calling <B>Point</B>&#146;s suitable constructor. For this to work, all you need to do is to register class <B>Point</B> and its constructors. Registration is a simple and non-intrusive process. <a href="list1.htm">Listing 1</a> shows the registration code for this example. Link it into the project and you&#146;re done. The registration code will be explained later on in this article.</p>
<p>As with <B>iostream</B>, the input process is type safe. The variables <B>pt1</B> and <B>pt2</B> have a C++ type of <B>Point</B>. Trying to initialize them with anything that isn&#146;t compatible with a <B>Point</B> will trigger error handling. On the other hand, if <B>Point</B>&#146;s constructor requires <B>double</B>s instead of integers, the input <B>Point(7,8)</B> will still work &#151; XParam will automatically convert the integers to <B>double</B>s.</p>

<H3><FONT COLOR="#000080">Handling Complex Classes</FONT></H3>

<p>You are now ready for Draw 2.0, a follow-up to your successful drawing program. Draw 2.0 will still draw a line, but instead of reading two <B>Point</B> objects and combining them, it will read a <B>Line</B> object directly.</p>

<pre>
int main(int argc, char* argv[]) {
  Line l;
  ParamSet ps;
  ps &lt;&lt; iParamVar(l,"l");
  ps.input(argc,argv);
  l.draw();
  return 0;
}
</pre>

<p>You can now invoke the program like this:</p>

<pre>
dr2 l="Line(Point(2,3),Point(4,5))"
</pre>

<p>It works! To do this, XParam creates two <B>Point</B> objects, as in the previous example, and then calls <B>Line</B>&#146;s constructor, passing the two <B>Point</B>s as arguments.</p>
<p>Since XParam uses the class&#146;s own constructors, the user can build objects on the command line using the same syntax she would use to build them inside a C++ program.</p>
<p>Overloading is also supported. If a class has several constructors, the user is free to use any one of them, and XParam will find and call the appropriate one. Assuming the relevant C++ constructor is defined and registered, you can also invoke Draw 2.0 like this:</p>

<pre>
dr2 l="Line(Point(2,3), \
            Offset(2,2))"
</pre>

<p>It will produce the same <B>Line</B>. The choice is now up to the user.</p>
<p>The algorithm that XParam uses to match a suitable constructor is modeled after C++&#146;s overloading resolution rules. If no suitable constructor is found, or an ambiguity is discovered, XParam will trigger an error.</p>

<H3><FONT COLOR="#000080">Polymorphism and Dynamic Loading</FONT></H3>

<p>After the success of your first two drawing programs, you are now ready to flood the market with Draw 3.0, the polymorphic drawing utility. This program has an abstract <B>Shape</B> class that all your concrete shape classes, such as <B>Point</B>, <B>Line</B>, and <B>Circle</B>, inherit from.</p>
<p>To let your users draw an arbitrary shape, the <B>main</B> function is changed to this:</p>

<pre>
int main(int argc, char* argv[]) {
  Shape* s;
  ParamSet ps;
  ps &lt;&lt; iParamPtrVar(s,"s");
  ps.input(argc,argv);
  s-&gt;draw();
  delete s;
  return 0;
}
</pre>

<p>The program can now recognize both <B>s=Line(Point(7,8),Point(9,10))</B> and <B>s=Circle(Point(1,2),7)</B>. XParam will call the correct constructor, making <B>s</B> point to a <B>Line</B> or a <B>Circle</B>, respectively.</p>
<p>As you can see, XParam simplifies your initialization command when it comes to polymorphism and pointer syntax: even though <B>s</B> is a <B>Shape</B> pointer, you still write <B>Line</B>, not <B>Line*</B> or <B>new Line</B>, on the command line.</p>
<p>By allowing polymorphism, XParam allows you to support plug-ins effortlessly. Users can write <B>Shape</B> classes of their own, such as <B>Rectangle</B> or <B>Triangle</B>, and XParam will automatically find and use them. Here&#146;s how it works: when XParam encounters a class name that it does not recognize, it tries to dynamically load the shared library that contains the class and its registration. If such a library is found, XParam uses the new class, just as if it had been registered all along.</p>

<H3><FONT COLOR="#000080">Vector Support and Input Redirection</FONT></H3>

<p>Users of Draw 3.0 may want to draw more than one shape. To support this, you would write Draw2000 like this:</p>

<pre>
std::vector&lt;Shape*&gt; s;
. . .
ps &lt;&lt; iParamVar(s,"s");
. . .
for_each(s.begin(),s.end(),
            mem_fun(&amp;Shape::draw));
. . .
</pre>

<p>A user might call the program to draw a shape composed of a line and a circle with this execution command:</p>

<pre>
draw2000 s="[Line(Point(10,10), \
                  Point(20,0)), \
          Circle(Point(10,10),10)]"
</pre>

<p>The <B>[x,y,...]</B> syntax allows XParam users to pass entire vectors in a single line. Creating vectors this way is actually simpler than doing the same in C++.</p>
<p>Though this is great for drawing two or three shapes, for more interesting drawings writing everything on the command line becomes rather cumbersome. To help with this, XParam provides a feature for reading the input, or parts of it, from a file.</p>
<p>Suppose, for example, that the user has prepared the file in <a href="list2.htm">Listing 2</a>. The following call will then draw the stick figure shown in <a href="fig1.htm">Figure 1</a>:</p>

<pre>
draw2000 s=@shapes.txt
</pre>

<p>The <B>@</B> is a redirection operator. It tells XParam to read the value for <B>s</B> from the file <B>shapes.txt</B> before reading the rest of the command line. The <B>@</B> operator can appear anywhere a value is required, or where an entire list of <B>key=value</B> commands is expected.</p>
<p>To make XParam read from the standard input, you can use the special redirection source <B>@stdin</B>. This is particularly useful for piping the output of one program into another.</p>
<p>In the future, we plan to extend the redirection mechanism by using the URL concept. This will enable XParam to handle TCP sockets, database connections, HTTP, etc.</p>

<H3><FONT COLOR="#000080">Output and Inter-Program Communication</FONT></H3>

<p>So far we have talked about the Draw2000 program, which only displays its input. Now, we would like to provide a graphic editor that can save drawings to a file in a Draw2000-compatible format. For such purposes, XParam lets you output parameters. Here are the relevant portions of the graphic editing program:</p>

<pre>
. . .
std::vector&lt;Shape*&gt; s;
. . .
ParamSet ps;
ps &lt;&lt; oParamVar(s, "s");
ofstream os("shapes.txt");
ps.output(os);
. . .
</pre>

<p>After running this program, you can display the shapes with:</p>

<pre>
Draw2000 @shapes.txt
</pre>

<p>XParam&#146;s I/O format is human readable and editable. This makes XParam ideally suited for managing configuration files.</p>

<H3><FONT COLOR="#000080">Single Object Serialization</FONT></H3>

<p>Often, all you need is to save an object to a stream in order to read it back later, for example to achieve persistence. Here&#146;s how it is done with XParam. To write an object to a file, use XParam&#146;s <B>Saver</B> class:</p>

<pre>
. . .
MyObj obj;
. . .
ofstream os("obj.txt");
Saver(os) &lt;&lt; Val(obj);
. . .
</pre>

<p>To read the object, use the <B>Loader</B> class:</p>

<pre>
ifstream is("obj.txt");
Loader(is) &gt;&gt; Var(obj);
</pre>

<p>The <B>ParamSet</B> class, described above, actually uses <B>Saver</B> and <B>Loader</B>, so the format of serialized objects is the same in both cases.</p>

<H3><FONT COLOR="#000080">Registration</FONT></H3>

<p>We have briefly shown a registration example for the class <B>Point</B>. In this section, we will explain the registration process in more detail.</p>
<p>All classes that you want XParam to recognize should be registered. For your convenience, XParam pre-registers the built-in types and <B>std::string</B>. It also pre-registers the instantiations of <B>std::vector</B> for all these types.</p>
<p>The process of registration is very straightforward (see <a href="list1.htm">Listing 1</a> for an example). The registration code is regular C++ code.</p>
<p>Typically, you want the registration to be performed automatically, so you won&#146;t have to worry about the exact time it takes place. You can do this by enclosing your registration commands between <B>PARAM_BEGIN_REG</B> and <B>PARAM_END_REG</B> macros. These macros do nothing more than execute the C++ code between them before <B>main</B> is entered (see the <a href="sidebar.htm">sidebar</a> for details).</p>

<H3><FONT COLOR="#000080">Registering a Class</FONT></H3>

<p>The following command registers the C++ class <B>Point</B> and tells XParam to recognize it in the input under the name <B>"Point"</B>:</p>

<pre>
param_class&lt;Point&gt;("Point");
</pre>

<p>Most often, the name given to XParam is identical to the C++ name of the class. When this is the case, you can use the macro <B>PARAM_CLASS</B>. The following registration command has the same effect as the previous one:</p>

<pre>
PARAM_CLASS(Point);
</pre>

<H3><FONT COLOR="#000080">Registering Constructors</FONT></H3>

<p>Class <B>Point</B> has three constructors:</p>

<pre>
Point::Point();
Point::Point(int x, int y);
Point::Point(const Point&amp; old);
</pre>

<p>XParam requires that all concrete classes be copy-constructible and assignable. The copy constructor is registered automatically. The following lines from <a href="list1.htm">Listing 1</a> register the two other constructors:</p>

<pre>
param_ctor&lt;Point&gt;();
param_ctor&lt;Point&gt;(ByVal&lt;int&gt;("x"),
                  ByVal&lt;int&gt;("y"));
</pre>

<p>For each parameter in a constructor, you tell XParam its type, its formal name, and how to pass it. In the above example, <B>ByVal&lt;int&gt;("x")</B> tells XParam that the argument&#146;s name is <B>"x"</B>, that it&#146;s an <B>int</B>, and that it is passed by value. The formal parameter names are necessary for providing detailed error reporting and run-time help.</p>
<p>Passing by value is not the only way to pass parameters. There are several other modes. For example, arguments passed by <B>const</B> reference use <B>ConstRef&lt;T&gt;</B>, so the constructor:</p>

<pre>
Line::Line(const Point&amp; a,
           const Point&amp; b);
</pre>

<p>is registered by:</p>

<pre>
param_ctor&lt;Line&gt;(
             ConstRef&lt;Point&gt;("a"),
             ConstRef&lt;Point&gt;("b"));
</pre>

<p>For arguments passed as pointers, you should specify whether the pointer should be deleted by the caller (i.e., XParam), or whether ownership of the pointer is passed to the called class. A pointer parameter can also be either <B>T*</B> or <B>const T*</B>. Thus, these four passing modes are available: <B>CallerPtr&lt;T&gt;</B>, <B>ClassPtr&lt;T&gt;</B>, <B>CallerConstPtr&lt;T&gt;</B>, and <B>ClassConstPtr&lt;T&gt;</B>.</p>

<H3><FONT COLOR="#000080">Registering Output</FONT></H3>

<p>To output your classes, you need to tell XParam how to serialize them. This registration process is as easy as registering constructors. When constructing, you show how to build your class from simpler ones. Equivalently, output registration need only tell XParam how to break down an object into simpler sub-objects. When serializing an object, XParam recursively decomposes it into its sub-objects, until reaching primitive types, which are output as literals.</p>
<p><a href="list3.htm">Listing 3</a> shows the code required to register an output capacity for class <B>Point</B>. The code registers <B>Point_output</B>, the helper class that will perform the output. <B>Point_output</B> tells XParam how to decompose the <B>Point</B> object <B>p</B> into two integers. Here&#146;s an example of output produced by this code:</p>

<pre>
Point(2,3)
</pre>

<p>Such output can be used by XParam to construct a <B>Point</B> using the second constructor registered above.</p>
<p>Outputting complex objects is still simple. <a href="list4.htm">Listing 4</a> demonstrates that registering class <B>Line</B> is as easy as registering class <B>Point</B>. Output produced by serializing a <B>Line</B> will look like this:</p>

<pre>
Line(Point(2,3),Point(4,5))
</pre>

<p>This can be used to rebuild the entire <B>Line</B> object, using the constructors for <B>Point</B> and <B>Line</B> registered above. Note that your output functor does not need to break the <B>Line</B> object all the way down into basic types. You just specify how to decompose the line into <B>Point</B>s, and XParam handles the rest.</p>
<p>This even works if <B>Line</B>&#146;s sub-objects are polymorphic. Consider a <B>Line</B> that supports different ending styles. Such a <B>Line</B> will have a constructor from two <B>Point*</B> members. Serializing a <B>Line</B> with an arrowhead ending will still produce the correct output:</p>

<pre>
Line(Point(2,3),ArrowPoint(4,5))
</pre>

<p>Registering output as described in this section carries important benefits. First, it is less error prone than writing the output code manually. Second, if XParam is extended to support other formats, such as XML, your registration code need not change. Finally, you are insulated from changes in the sub-objects. For example, if class <B>Point</B>&#146;s output is changed to use polar coordinates instead of Cartesian coordinates, the registration of <B>Line</B> remains unchanged.</p>

<H3><FONT COLOR="#000080">Other Registration Commands</FONT></H3>

<p>XParam has many other registration commands. You can register conversion operators, describe inheritance relationships, register constants and enumeration types, and so on. The XParam documentation explains these commands in detail.</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<p>In the previous sections, we described XParam&#146;s main features. At first glance, some of the above may have seemed like magic. In this section, we will show how it can all be translated to C++ code. Several of the techniques we present are widely applicable, regardless of XParam.</p>

<H3><FONT COLOR="#000080">Overview</FONT></H3>

<p>Here is what XParam does when it is asked to build a <B>Line</B> from the following string:</p>

<pre>
Line(Point(2,3),Point(4,5))
</pre>

<p>First, the line is parsed to reveal the construction tree shown in <a href="fig2.htm">Figure 2</a>. At this point, XParam recursively builds the <B>Line</B> object by applying constructors. This is the C++ code that we want to be executed behind the scenes:</p>

<pre>
Point tmp1 = Point(2,3);
Point tmp2 = Point(4,5);
Line  tmp3 = Line(tmp1,tmp2);
return tmp3;
</pre>

<p>The problem is that all the information required is only available at run time, as strings. The key to XParam is the ability to create live objects from strings in a type-safe manner.</p>

<H3><FONT COLOR="#000080">Holding Values</FONT></H3>

<p>To deal with objects of different types, XParam needs to be able to access them through a common interface. However, requiring all the types to inherit from a common base is impractical: this is too intrusive and does not solve the problem of basic types. Instead, XParam employs external polymorphism <a href="#2">[2]</a>. Using it, we have implemented a class called <B>Value</B>, similar in design to the any class described by Henney <a href="#3">[3]</a>.</p>

<H3><FONT COLOR="#000080">Constructing Values</FONT></H3>

<p>You need to do more than simply hold the data. You need the ability to construct a <B>Value</B> from other <B>Value</B> objects, by locating and applying the most suitable constructor.</p>
<p>The built-in C literals are recognized by the parser, and a suitable value object is built for them. In the above example, these are the integers <B>2</B>, <B>3</B>, <B>4</B>, and <B>5</B>.</p>
<p>Now, XParam has to construct the <B>Value</B> object for <B>Point(2,3)</B> from two <B>Value</B> objects containing the integers <B>2</B> and <B>3</B>. How does XParam find and apply the correct constructor for <B>Point</B>?</p>
<p>As you recall, a class must be registered to work with XParam. Registering a type creates an object of class <B>Type</B>, which stores all the information about that type. This object is stored in the Registry Singleton, which contains a map from strings to <B>Type</B> objects.</p>
<p>Now, to construct the <B>Value</B> for <B>Point(2,3)</B>, XParam uses the class name, <B>"Point"</B>, to retrieve the corresponding <B>Type</B> object from the registry. It can also retrieve the type information for the arguments <B>2</B> and <B>3</B> from their <B>Value</B> objects. XParam now needs to find the most suitable constructor for <B>Point</B> and apply it.</p>
<p>Handling constructors polymorphically is very similar to handling <B>Value</B>s polymorphically: the constructor information is contained in a class, which has a polymorphic common ancestor, and a template implementation. The polymorhic interface contains, among other methods, the method to apply the wrapped constructor:</p>

<pre>
Value* Ctor::construct(
       const vector&lt;Value*&gt;&amp; args);
</pre>

<p>A simplified version of the template implementation of this method for a two-argument constructor is shown in <a href="list5.htm">Listing 5</a>. Similar template implementations are available for constructors receiving a different number of arguments.</p>

<H3><FONT COLOR="#000080">Handling Implicit Conversions</FONT></H3>

<p>Using the process shown above, XParam begins by constructing literal constants and proceeds by building increasingly complex classes until reaching the required class. However, often none of the registered constructors match the required types exactly. When this is the case, XParam will try to find the best matching constructor and will apply an implicit conversion sequence to each of its arguments.</p>
<p>For each argument, the exact conversion is the simplest conversion sequence from the given type to the type required in the constructor. The simplicity of a conversion sequence is measured by the kinds of atomic conversions composing it (built-in, user defined, etc.) By constructing a graph of all the possible conversions, you can employ a shortest path algorithm, such as Dijkstra, to find the best conversion sequence.</p>
<p>Now that you know the best conversion for every argument in each of the candidate constructors, you need to choose the most suitable constructor. This is done in exactly the same way as done by the C++ compiler.</p>
<p>The process described above is a simplified version of the actual matching algorithm. In reality, the algorithm must handle more complicated cases. For example, when constructing a vector from input in the form <B>[a, b, c]</B>, the vector type is not always explicitly specified. Since <B>a</B>, <B>b</B>, and <B>c</B> may be of different types, XParam must deduce the best common type <B>T</B> to build the object <B>vector&lt;T&gt;</B>.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>In this article, we have briefly introduced the XParam template library. The full source code and documentation for the latest version at the time of writing (version 1.11) can be downloaded at &lt;www.cuj.com/code&gt;. As newer versions are released, they will be available from &lt;http://xparam.sourceforge.net&gt;.</p>
<p>XParam&#146;s strengths of object serialization and deserialization, command-line input and output, cross-program communication, and plug-in management (through dynamic loading) have already been put to use by many programmers, ourselves included. We hope that you will find the library as useful as we do and encourage you to contact us for comments, suggestions, and improvements. This can be done through the XParam homepage.</p>
<p>We would like to acknowledge the help of the SourceForge organization in hosting the XParam project, and of jGuru in providing the ANTLR parser generator used by XParam. We would also like to thank Richard Stallman for his assistance in turning the XParam library into free software.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p><a name="1"></a>[1]  The GNU C++ Library, The Single Unix Specification, Version 2 (The Open Group, 1997).</p>
<p><a name="2"></a>[2]  Chris Cleeland et. al. &#147;External Polymorphism,&#148; <I>Pattern Languages of Program Design 3</I>, edited by Robert Martin et. al. (Addison-Wesley, 1998).</p>
<p><a name="3"></a>[3]  Kevlin Henney. &#147;Valued Conversions,&#148; <I>The C++ Report</I>, July/August 2000. </p>

<p><i><B>Michael Brand</B> has worked in the computer industry for many years, being employed as a program architecture designer, an algorithm developer, a programmer, and a teacher of programming. His specialties include object-oriented design and C++. He holds a B.Sc. from Tel-Aviv University.</i></p>
<p><i><B>Ronnie Maor</B> has an M.Sc. in computer science from Tel-Aviv University. He has spent the last few years designing and programming large C++ projects and is currently working for Kashya inc., a start-up company developing new solutions in the field of storage.</i></p>
<p><i><B>Sasha Gontmakher</B> has an M.A. from the Technion, Israel Institute of Technology, and is currently studying towards his Ph.D. degree. He specializes in object-oriented programming and design and parallel programming.</i></p>

<h4><a href="../../../source/2002/jul02/brand.zip"></a></h4>
</blockquote></body></html>
