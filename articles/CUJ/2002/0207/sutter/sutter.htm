<HTML>   
     <HEAD>
<TITLE>July 2002/Sutter&#146;s Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: A Pragmatic Look at Exception Specifications</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>The C++ feature that wasn&#146;t.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>As we consider work now underway on the new C++ Standard, C++0x, it&#146;s a good time to take stock of what we&#146;re doing with, and have learned from, our experience with the current C++98 Standard. The vast majority of Standard C++&#146;s features are good, and they get the lion&#146;s share of the print because there&#146;s not much point harping on the weaker features. Rather, the weaker and less useful features more often just get ignored and atrophy from disuse until many people forget they&#146;re even there (not always a bad thing). That&#146;s why you&#146;ve seen relatively few articles about obscure features like <B>valarray</B>, <B>bitset</B>, locales, and the legal expression <B>5[a]</B> &#151; and the same is true, for reasons which we shall see in this column and the next, for exception specifications and <B>export</B>.</p>
<p>This time, let&#146;s take a closer look at the state of our experience with Standard C++ exception specifications.</p>

<H3><FONT COLOR="#000080">The Story So Far</FONT></H3>

<p>The idea behind exception specifications is easy to understand: in a C++ program, unless otherwise specified, any function might conceivably emit any type of exception. Consider a function named <B>Func()</B> (because the name <B>f()</B> is so dreadfully overused):</p>

<pre>
// Example 1(a)
//
// can throw anything
int Func();
</pre>

<p>By default, in C++, <B>Func()</B> could indeed throw anything, just as the comment says. Now, often we know just what kinds of things a function might throw, and then it&#146;s certainly reasonable to want to supply the compiler and the human programmer with some information limiting what exceptions could come tearing out of a function. For example:</p>

<pre>
// Example 1(b)
//
// will throw nothing
int Gunc() throw();

// can only throw A or B
int Hunc() throw(A,B);
</pre>

<p>In these cases, the function&#146;s exception specification exists in order to say something about what the functions <B>Gunc()</B> and <B>Hunc()</B> could emit. The comments document colloquially what the specifications say. We&#146;ll return to that &#147;colloquially&#148; part in a moment, because as it turns out these two comments are deceptively close to being correct.</p>
<p>One might naturally think that making a statement about what the functions might throw would be a good thing, that more information is better. One would not necessarily be right, because the devil is in the details: although the motivation is noble, the way exception specifications are, well, specified in C++ isn&#146;t always useful and can often be downright detrimental.</p>

<H3><FONT COLOR="#000080">Issue the First: A &#147;Shadow Type System&#148;</FONT></H3>

<p>John Spicer, of Edison Design Group fame <a href="#1">[1]</a> and an author of large swathes of the template chapter of the C++ Standard, has been known to call C++&#146;s exception specifications a &#147;shadow type system.&#148; One of C++&#146;s strongest features is its strong type system, and that&#146;s well and good. Why would we call exception specifications a &#147;shadow type system&#148; instead of just &#147;part of the type system&#148;?</p>
<p>The reason is simple, and twofold:</p>

<UL><p>a)  Exception specifications don&#146;t participate in a function&#146;s type.</p>
<p>b)  Except when they do.</p>
</UL>

<p>Consider first an example of when exception specifications don&#146;t participate in a function&#146;s type. Reflect on the following code:</p>

<pre>
// Example 2(a): You can&#146;t write an ES
// in a typedef.
//
void f() throw(A,B);
 
// syntax error
typedef void (*PF)() throw(A,B);

// can&#146;t get here
PF pf = f;
</pre>

<p>The throw-specification on the <B>typedef</B> is illegal. C++ doesn&#146;t let you write that, so the exception specification is not allowed to participate in the type of a function... at least, not in the context of a <B>typedef</B>, it&#146;s not. But in other cases, exception specifications do indeed participate in the function&#146;s type, such as if you wrote the same function declaration without the <B>typedef</B>:</p>

<pre>
// Example 2(b): But you can if you omit
// the typedef!
//
void f() throw(A,B);
void (*pf)() throw(A,B);   // ok
pf = f;                    // ok
</pre>

<p>Incidentally, you can do this kind of assignment of a pointer to a function as long as the target&#146;s exception specification is no more restrictive than the source&#146;s:</p>

<pre>
// Example 2(c): Also kosher, low-carb,
// and fat-free.
//
void f() throw(A,B);
void (*pf)() throw(A,B,C); // ok
pf = f;                    // ok, less 
                           // restrictive
</pre>

<p>Exception specifications also participate in a virtual function&#146;s type when you try to override it:</p>

<pre>
// Example 2(d): And the ES in the 
// signature does matter if it&#146;s a 
// virtual function.
//
class C
{
  virtual void f() throw(A,B); // same ES
};

class D : C
{
  void f();  // error, now the ES matters
};
</pre>

<p>So the first issue with exception specifications as they exist in today&#146;s C++ is that they&#146;re really a &#147;shadow type system&#148; that plays by different rules than the rest of the type system.</p>

<H3><FONT COLOR="#000080">Issue the Second: (Mis)understandings</FONT></H3>

<p>The second issue has to do with knowing what you&#146;re getting. As many notable persons, including the authors of the Boost exception specification rationale <a href="#2">[2]</a>, have put it, programmers tend to use exception specifications as though they behaved the way the programmer would like, instead of the way they actually do behave. (For a brief mention of this, with longer related discussion about whether exception safety is worth it, see <a href="#3">[3]</a>.)</p>
<p>Here&#146;s what many people think that exception specifications do:</p>

<UL><LI>   Guarantee that functions will only throw listed exceptions (possibly none).</LI>
<LI>   Enable compiler optimizations based on the knowledge that only listed exceptions (possibly none) will be thrown.</LI>
</UL>

<p>The above expectations are, again, deceptively close to being correct. Consider again the code in Example 1(b):</p>

<pre>
// Example 1(b) reprise, and two
// potential white lies:
//
int Gunc() throw();       // will throw nothing    (?)

int Hunc() throw(A,B);    // can only throw A or B (?)
</pre>

<p>Are the comments correct? Not quite. <B>Gunc()</B> may indeed throw something, and <B>Hunc()</B> may well throw something other than <B>A</B> or <B>B</B>! The compiler just guarantees to beat them senseless if they do... oh, and to beat your program senseless too, most of the time.</p>
<p>Because <B>Gunc()</B> or <B>Hunc()</B> could indeed throw something they promised not to, not only can&#146;t the compiler assume it won&#146;t happen, but the compiler is responsible for being the policeman with the billy club who checks to make sure such a bad thing doesn&#146;t happen undetected. If it does happen, then the compiler must invoke the <B>unexpected()</B> function. Most of the time, that will terminate your program. Why? Because there are only two ways out of <B>unexpected()</B>, neither of which is a normal return. You can pick your poison:</p>

<OL><LI>Throw instead an exception that the exception specification does allow. If so, the exception propagation continues as it would normally have. But remember that the <B>unexpected()</B> handler is global &#151; there is only one for the whole program. A global handler is highly unlikely to be smart enough to Do the Right Thing for any given particular case, and the result is to go to <B>terminate()</B>, go directly to <B>terminate()</B>, do not pass <B>catch</B>, do not collect $200.</LI>
<LI>Throw instead (or rethrow) an exception that the exception specification (still) doesn&#146;t allow. If the original function allowed a <B>bad_exception</B> type in its exception specification, okay, then it&#146;s a <B>bad_exception</B> that will now get propagated. But if not, then go to <B>terminate()</B>, go directly to <B>terminate()</B>....</LI></OL>

<p>Because violated exception specifications end up terminating your program the vast majority of the time, I think it&#146;s legitimate to call that &#147;beat[ing] your program senseless.&#148;</p>
<p>Above, we saw two bullets stating what many people think that exception specifications do. Here is an edited statement that more accurately portrays what they actually do do:</p>

<UL><LI>   <I>Enforce at run time</I> that functions will only throw listed exceptions (possibly none).</LI>
<LI>   Enable <I>or prevent</I> compiler optimizations based on <I>having to check whether listed exceptions are indeed being thrown</I>.</LI>
</UL>

<p>To see what a compiler has to do, consider the following code, which provides a body for one of our sample functions, <B>Hunc()</B>:</p>

<pre>
// Example 3(a)
//
int Hunc() throw(A,B)
{
  return Junc();
}
</pre>

<p>Functionally, the compiler must generate code like the following, and it&#146;s typically just as costly at run time as if you&#146;d hand-written it yourself (though less typing because the compiler generates it for you):</p>

<pre>
// Example 3(b): A compiler&#146;s massaged
// version of Example 3(a)
//
int Hunc()
try
{
  return Junc();
}
catch( A )
{
  throw;
}
catch( B )
{
  throw;
}
catch( ... )
{
  std::unexpected(); // will not return! but
} // might throw an A or a B if you&#146;re lucky
</pre>

<p>Here we can see more clearly why, rather than letting the compiler make optimizations by assuming only certain exceptions will be thrown, it&#146;s exactly the reverse: the compiler has to do more work to enforce at run time that only those exceptions are indeed thrown.</p>

<H3><FONT COLOR="#000080">The Scoop on Exception Specifications</FONT></H3>

<p>Besides the overhead for generating the <B>try</B>/<B>catch</B> blocks shown above, which might be minor on efficient compilers, there are at least two other ways that exception specifications can commonly cost you in run-time performance. First, some compilers will automatically refuse to inline a function having an exception specification, just as they can apply other heuristics such as refusing to inline functions that have more than a certain number of nested statements or that contain any kind of loop construct. This is similar to how some compilers apply similar heuristics to disable inlining, such as refusing to inline functions that have more than a certain number of nested statements or that contain any kind of loop construct. Second, some compilers don&#146;t optimize exception-related knowledge well at all and will add the above-shown <B>try</B>/<B>catch</B> blocks even when the function body provably can&#146;t throw.</p>
<p>Moving beyond run-time performance, exception specifications can cost you programmer time because they increase coupling. For example, removing a type from the base class virtual function&#146;s exception specification is a quick and easy way to break lots of derived classes in one swell foop (if you&#146;re looking for a way). Try it on a Friday afternoon checkin, and start a pool to guess the number of angry emails that will be waiting for you in your inbox on Monday morning.</p>
<p>So here&#146;s what seems to be the best advice we as a community have learned as of today:</p>
<p>Moral #1: Never write an exception specification.</p>
<p>Moral #2: Except possibly an empty one, but if I were you I&#146;d avoid even that.</p>
<p>Boost&#146;s experience is that a throws-nothing specification on a non-inline function is the only place where an exception specification &#147;May have <I>some</I> benefit with <I>some</I> compilers [emphasis mine]&#148;. That&#146;s a rather underwhelming statement in its own right, but a useful consideration if you have to write portable code that will be used on more than one compiler platform.</p>
<p>It&#146;s actually even a bit worse than that in practice, because it turns out that popular implementations vary in how they actually handle exception specifications. At least one popular C++ compiler (Microsoft&#146;s, up to version 7.x) parses exception specifications but does not actually enforce them, reducing the exception specifications to glorified comments. But, on the other hand, there are legal optimizations a compiler can perform outside a function, and which the Microsoft 7.x compiler does perform, that rely on the ES enforcement being done inside each function &#151; the idea is that if the function did try to throw something it shouldn&#146;t the internal handler would stop the program and control would never return to the caller. So since control did return to the caller, the <I>calling</I> code can assume nothing was thrown and do things like eliminate external try/catch blocks. So on that compiler, because the checking is not done but the legal optimization that relies on it <I>is</I> done, the meaning of <B>throw()</B> changes from the standard &#147;check me on this, stop me if I inadvertently throw&#148; to a &#147;trust me on this, assume I&#146;ll never throw and optimize away.&#148; So beware: if you do choose to use even an empty throw-specification, read your compiler&#146;s documentation and check to see what it will really do with it. You might just be surprised. Be aware, drive with care.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>While mentioning this material as part of a broader talk at the ACCU conference this past spring, I asked how many of the about 100 people in the room each time had used exception specifications. About half put up their hands. Then a wag at the back said (quite correctly) that I should also ask how many of those people later took the exception specifications back out again afterwards, so I asked; about the same number of hands went up. This is telling. Boost went through the same experience, and that&#146;s why their coding policy on writing exception specifications pretty much boils down to &#147;don&#146;t do that&#148; <a href="#2">[2]</a>.</p>
<p>True, many well-intentioned people wanted exception specifications in the language, so that&#146;s why we have them. This reminds me of a cute poem that I first encountered about 15 years ago as it circulated in midwinter holiday emails. Set to the cadence of &#147;&#146;Twas the Night Before Christmas,&#148; these days it&#146;s variously titled &#147;&#146;Twas the Night Before Implementation&#148; or &#147;&#146;Twas the Night Before Crisis.&#148; It tells of a master programmer who slaves away late at night in the holiday season to meet user deadlines and performs multiple miracles to pull out a functioning system that perfectly implements the requirements... only to experience a final metaphorical kick in the teeth as the last four lines of the ditty report:</p>
<UL>
The system was finished, the tests were concluded,</p>
The users&#146; last changes were even included.</p>
And the users exclaimed, with a snarl and a taunt,</p>
&#147;It&#146;s just what we asked for, but not what we want!&#148; <a href="#4">[4]</a> </p>
</UL>

<p>The thought resonates as we finish considering our current experience with exception specifications. The feature seemed like a good idea at the time, and it is just what some asked for.</p>
<p>But wait, there&#146;s more: might the same be said about <B>export</B>? More on that one next time, when we return....</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  See &lt;www.edg.com&gt;.</p>
<p><a name="2"></a>[2]  Available via &lt;www.gotw.ca/publications/xc++s/boost_es.htm&gt;.</p>
<p><a name="3"></a>[3]  Herb Sutter. &#147;Exception Safety and Exception Specifications &#151; Are They Worth It?&#148; <I>Guru of the Week #82</I>, available at &lt;www.gotw.ca/gotw/082.htm&gt;.</p>
<p><a name="4"></a>[4]  A web search for &#147;a snarl and a taunt&#148; will get you several variations on this poem. Enjoy! Alas, the original author of the poem is unknown (to me). If anyone has information about the original, or at least earliest known, source of this poem, please send me mail.</p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>

</blockquote></body></html>
