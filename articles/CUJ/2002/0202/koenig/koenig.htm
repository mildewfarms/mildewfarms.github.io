<HTML>   
     <HEAD>
<TITLE>February 2002/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Naming Unknown Types</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>Sometimes you can finesse your way around hard problems with programming conventions. STL does. Why don&#146;t you try it?</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>It is usually easy to figure out the type of an expression in a C++ program. For example, suppose we have defined <B>vi</B> to be a vector of integers:</p>

<pre>
vector&lt;int&gt; vi;
</pre>

<p>Then we know that <B>vi[i]</B> has type <B>int</B>, and similarly for other expressions that involve <B>vi</B>.</p>
<p>More generally, if we write a template function that we know takes a <B>vector&lt;T&gt;</B>, such as:</p>

<pre>
template&lt;class T&gt;
void process(const vector&lt;T&gt;&amp; v)
{
     // ...
}
</pre>

<p>and we refer to <B>v[i]</B> in this function, we know that <B>v[i]</B> has type <B>T</B>. Although we do not know the specific type of <B>v[i]</B> &#151; this knowledge is impossible, as it depends on <B>T</B>, which we do not know &#151; we can express the type of <B>v[i]</B> in terms of <B>T</B>.</p>
<p>It may be surprising, but there are times when we cannot even know enough about an expression&#146;s type to express it in terms of types that we do know. For example, suppose we modify our <B>process</B> function slightly:</p>

<pre>
template&lt;class T&gt;
void process(T&amp; v)
{
     // ...
}
</pre>

<p>Now, instead of insisting that <B>v</B> be a <B>vector</B> of some kind, we are allowing it to be any type at all. If we refer to <B>v[i]</B> in this revised <B>process</B> function, we cannot know anything about the type of <B>v[i]</B> until we have inspected the definition of the type to which <B>T</B> is bound during template instantiation. In other words, it is not until we write a program that calls <B>process</B> that it is possible even to know the type that corresponds to <B>T</B>, which means that in general we cannot know that type at the time we define <B>process</B> itself.</p>
<p>In such a context, how can we give a name to the type of <B>v[i]</B>? We might wish to do so, for example, in order to copy <B>v[i]</B> to a local variable of the same type:</p>

<pre>
??? vi = v[i];
</pre>

<p>Here, we need to figure out what to put in place of the <B>???</B> to give <B>vi</B> the same type as <B>v[i]</B>.</p>
<p>There is no known solution to problems such as this one that is totally satisfactory, so we shall not propose one. Instead, we will talk about an idea for a language extension that has been around for a while, as well as two solutions that are usable now.</p>
<p>The language extension is called <B>typeof</B> and would let us write something such as:</p>

<pre>
typeof(v[i]) vi = v[i];
</pre>

<p>Of course, as an extension, it does not presently exist.</p>
<p>One solution that does already exist is to use an auxiliary template function; the other is to rely on programming conventions, such as those that are part of the standard library. Each of these solutions has advantages and disadvantages, which we shall now discuss.</p>

<H3><FONT COLOR="#000080">The typeof Solution</FONT></H3>

<p>C++ already has a pseudo-operator named <B>sizeof</B>, which takes a type or an expression as its argument and yields an integer that represents the size of the object of that type (if the operand is a type), or of the type of the object that the expression would have if evaluated (if the operand is an expression). We refer to <B>sizeof</B> as a pseudo-operator to distinguish it from true operators, such as <B>*</B>, that take only expressions as arguments. A useful peculiarity of <B>sizeof</B> is that it does not actually evaluate the expression. It doesn&#146;t need to do so, because the size of an object depends only on the object&#146;s type. Therefore, the implementation of <B>sizeof</B> needs only to determine the expression&#146;s type, which does not require evaluating the expression.</p>
<p>It is tempting to imagine a similar pseudo-operator named <B>typeof</B>, which would yield the type of its argument expression. Unlike <B>sizeof</B>, <B>typeof</B> would represent a type, not a value. For example, <B>typeof(3)</B> would be equivalent to <B>int</B>, and we could write:</p>

<pre>
typeof(3) x;
</pre>

<p>to mean the same as:</p>

<pre>
int x;
</pre>

<p>It is clear that such a facility would be useful. We have already seen that we could use it to solve our problem by writing:</p>

<pre>
typeof(v[i]) vi = v[i];
</pre>

<p>Moreover, there are some implementations of C++ that already support <B>typeof</B>. Why not consider it a universal solution? There are three reasons.</p>
<p>The first reason is that <B>typeof</B> is not presently part of Standard C++, hence it is not universally available. Therefore, a programmer who uses <B>typeof</B> is limited to using one of the compilers that supports it.</p>
<p>The second reason is that using <B>typeof</B> often requires writing the same expression twice, as we did with <B>v[i]</B> in our most recent example. It is generally wise to avoid programming constructs that require the programmer to write the same thing twice, because it is altogether too easy to write them differently by mistake.</p>
<p>The third reason is that in order to use <B>typeof</B>, we have to be able to write an expression that represents the type we want, and it may not always be possible to write such an expression. For example, if <B>f</B> is a function, and we know that <B>f</B> takes a single argument, there is no way to write an expression that represents the type of that argument.</p>
<p>In short, we cannot be sure that <B>typeof</B> is available, using it often invites subtle programming errors, and there are some problems that it cannot solve. Perhaps we should turn our attention to another solution.</p>

<H3><FONT COLOR="#000080">Auxiliary Templates</FONT></H3>

<p>Suppose we wish to know the type of <B>v[i]</B> so that we can exchange it with <B>v[j]</B>. For example, we might wish to write something like this:</p>

<pre>
typeof(v[i]) vi = v[i];
v[i] = v[j];
v[j] = vi;
</pre>

<p>When we see this example, we should realize almost immediately that there is already a way to accomplish the same goal:</p>

<pre>
std::swap(v[i], v[j]);
</pre>

<p>How is it that the <B>swap</B> library function can accomplish what we cannot?</p>
<p>The answer is important: whenever we pass an expression as an argument to a template parameter, we can give a name to that parameter&#146;s type. So, for example, the implementation of <B>swap</B> might look something like this:</p>

<pre>
template&lt;class T&gt;
void swap(T x, T y)
{
     T temp = x;
     x = y;
     y = t;
}
</pre>

<p>Within the body of this <B>swap</B> function, <B>T</B> is the name for the type of <B>x</B> and <B>y</B> (both of which had better have the same type). More generally, when we need to be able to name the type of an expression, we can do so by creating an appropriate template function and passing that expression as an argument.</p>
<p>Moreover, sometimes we can use this technique to overcome one of the problems with <B>typeof</B>, by revealing more about the type of an expression than <B>typeof</B> would make possible. For example, suppose we know that <B>f</B> is a function with one argument, and we wish to give a name to the type of that argument. Then we might write a template function that looks like this:</p>

<pre>
template&lt;class Arg, class Res&gt;
void decompose_function(Res (*fp)(Arg))
{
     // ...
}
</pre>

<p>We define <B>fp</B> as a pointer to a function rather than a function because whenever we pass a function as an argument to another function, what is passed is the address of the argument function rather than the function itself. If we now call <B>decompose_function(f)</B>, then inside the body of <B>decompose_function</B>, <B>Arg</B> will be the argument type of <B>f</B> and <B>Res</B> will be <B>f</B>&#146;s result type.</p>
<p>This technique of using an auxiliary template function has two powerful advantages over <B>typeof</B>. First, it exists already in every C++ implementation that supports templates. Second, it makes it possible to extract information that <B>typeof</B> does not supply.</p>
<p>On the other hand, the technique has some disadvantages over <B>typeof</B> as well. It requires that the expression actually be evaluated, as it is hard to see how to pass an expression as an argument to a function without evaluating it. Moreover, because the name given to a type is always a template parameter, it does not persist beyond the body of the function in which it is defined. Therefore, we cannot use this technique to define a local variable with a type that depends on the type of an expression such as <B>v[i]</B>. The best we can do is define a new function and use the type of <B>v[i]</B> to determine the type of a variable in that function. Finally, defining an auxiliary function is relatively verbose, hence error-prone.</p>
<p>To avoid these disadvantages, we turn to programming conventions.</p>

<H3><FONT COLOR="#000080">Library Type Conventions</FONT></H3>

<p>Let&#146;s look again at that expression <B>v[i]</B>. What is <B>v</B>? Suppose we know that <B>v</B> is a standard-library container that has type <B>T</B>. Then we can take advantage of the fact that the library defines, as part of the definition of that container, a type named <B>value_type</B> that is a name for the type of a container element. In other words, we can write:</p>

<pre>
T::value_type vi = v[i];     <a href="#1">[1]</a>
</pre>

<p>It might appear on the surface that being able to use <B>value_type</B> in this way relies on <B>v</B> being a standard-library container. However, all it really requires is for the author of <B>T</B> to define an appropriate type named <B>value_type</B> as a member of <B>T</B>. In effect, we can compensate for the nonexistence of <B>typeof</B> and get around the disadvantages of having to define a local template function, if the authors of classes that behave like standard containers observe the same conventions as the standard containers themselves. These conventions include the requirement to define a type named <B>value_type</B> to denote the type of a container element, types named <B>iterator</B> and <B>const_iterator</B> to denote appropriate iterator types for the container, and <B>size_type</B> to denote an unsigned integral type sufficient to hold the number of elements in the container.</p>
<p>A powerful advantage of such conventions over other ways of determining unknown types is that they can provide information that is difficult to obtain otherwise. For example, if <B>T</B> is the type of a container, then <B>T::iterator</B> is the type of an iterator that corresponds to <B>T</B>. If we had <B>typeof</B> available, then we could use <B>typeof(T.begin())</B> to obtain the same information &#151; but doing so requires the additional knowledge that <B>begin</B> yields an iterator. Although this knowledge is available in this particular case, it is not available in general. In other words, type conventions such as the ones in the standard library are a more general technique than either <B>typeof</B> or defining auxiliary templates, because the only limits on the information available from such conventions are in the conventions themselves.</p>
<p>On the other hand, any convention has the potential problem that programmers might not use it consistently. It is easy to imagine a type that looks a lot like a standard container but does not follow all of the container conventions. It is up to programmers who wish their classes to be as useful as possible to learn about the contexts in which those classes might be used.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>
<p>Whenever we write a template function, there is the possibility of writing expressions with types that are not known until our program is compiled. This article has considered three ways of giving names to such types, each of which has advantages and disadvantages.</p>
<p>If we have access to a compiler that supports <B>typeof</B>, and we are willing to write nonstandard programs, then we can use <B>typeof</B>. However, we can often use auxiliary template functions to solve problems that we might otherwise use <B>typeof</B> to solve &#151; and sometimes even to solve some problems that <B>typeof</B> cannot solve.</p>
<p>If we are willing to insist that the classes we use must follow conventions similar to those in the standard library, we can make our work even easier. It is true that then our programs depend on following the conventions, but such dependence is not much different from any other dependence we might have on the correctness of the programs that we use.</p>
<p>If we are defining classes that do not fit the standard library&#146;s conventions, we can define our own conventions to allow our users to obtain appropriate type information as needed. Such conventions are not particularly difficult to define or use; the hardest part of using them is to remember to do it in the first place.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>[1]  If <B>T</B> is a template parameter, we have to write</p>
<pre>
typename T::value_type vi=v[i];
</pre>

<p>because the compiler has no way of knowing that <B>T::value_type</B> is the name of a type until it knows the identity of <B>T</B>.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>

</blockquote></body></html>
