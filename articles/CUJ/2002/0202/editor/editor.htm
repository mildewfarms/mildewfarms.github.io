<HTML>   
     <HEAD>
<TITLE>February 2002/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>
<p>There are many levels of C++ programmers; all are important and I believe most are productive.</p>
<p>I just finished teaching an introductory course in C++ to freshman CS majors. Not surprisingly, they were excited to understand more deeply the inner workings of objects and algorithms, and I always enjoy explaining the power of object-oriented and generic programming.</p>
<p>On the other extreme, brilliant folks like Andrei Alexandrescu and the many contributors to the Boost libraries <a href="#1">[1]</a> continue to enlarge the field of what C++ can do. And if Koenig &amp; Moo&#146;s <I>Accelerated C++</I> hasn&#146;t already completely put to rest the myth that C++ is not fit for high-level programming, template meta-programming and policy-driven design handily squelch any such lingering nay-saying noise. (Be sure to read Thomas Becker&#146;s excellent article on policy-driven design in this issue).</p>
<p>What of the rest of us in-betweeners? I hope we find ourselves happily sandwiched, picking up wisdom from mentors here at <I>CUJ</I> and elsewhere, and in turn nurturing newbies in our wake.</p>
<p>Let me share a less imposing contribution to the &#147;literature&#148; that recently came my way. The author is well known in the C++ world, but he/she wishes to remain anonymous (therefore I will keep his/her identity along with any revealing comments to myself). In this particular piece, our mystery author, H. P. Typecraft, speaks of names in C++. As you read, be sure to pronounce &#147;std&#148; as a single syllable, somewhat like &#147;stood&#148; (or &#147;stud&#148; for you macho types :-). Enjoy.</p>

<H4><FONT COLOR="#000080">The Naming of Types</FONT></H4>

<pre>
According To T(ype) S(afe) Eliot
(with apologies to T.S. Eliot and [*] the One Definition Rule)
The Naming of Types is a difficult matter,
        It isn&#146;t just one of your J16 games;
You may think at first that I&#146;m madly ambiguous
        When I tell you, some types may have THREE DIFFERENT NAMES.
First of all, there&#146;s the name that the coders use daily,
        Such as string or ofstream or size_t[] array,
Such as vector or multiset, stack or bad_alloc &#151;
        All of them sensible library names.
There are fancier names if you think they sound sweeter,
        Some for the future, some for today:
Such as std::string, std::vector, std::size_t, std::hash_map &#151;
        But all of them sensible library names.
But an implementer&#146;s type needs a name that&#146;s particular,
        A name that&#146;s peculiar, and more uglified,
Else how can it keep a unique definitional,
        Or spread out its members, or work out its size?
Of names of this kind, I can give you a quorum,
        Such as __void_vector, _FILLALL, or __generate_n,
Such as _CharT or _long__long, or else __hash_map_impl &#151;
        Names that never belong to some user&#146;s type.
But above and beyond there&#146;s still one name left over,
        In namespace unnamed that you never will guess;
The name that no human research can discover&#151;
        But THE COMPILER ITSELF KNOWS, and will never confess.
When you notice a committee in profound meditation,
        The reason, I tell you, is always the same:
Their minds are engaged in a rapt contemplation
        Of the thought, of the fear, of making a &#147;hash&#148; of a name;
                A definable, spellable, nicely incantable
Maybe-overloadable but (had-better-be-)singular[*] Name.
 
&#151; H.P. Typecraft
</pre>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>[1]  Boost is a community of top-flight C++ developers and researchers working in open-source fashion to create important libraries for C++, many of which will likely find their way into the next version of Standard C++. We&#146;ll see more on Boost in forthcoming issues.</p>

<p>Chuck Allison<br>
Senior Editor<br>
<B>cda@freshsources.com</B></p></blockquote></body></html>
