<HTML>   
     <HEAD>
<TITLE>February 2002/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Output Iterator Adapters</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Once again, uncommonly cogent wisdom &#151; this time about output iterators, suitable for use by trolls and other serious programmers.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>In the last installment of this column, we examined how to design generic algorithms for flexibility and efficiency. In this installment we&#146;ll look at an indirect mechanism for algorithm customization: the design of output iterator adapters. In effect, a properly designed iterator adapter can be used to customize a generic algorithm as effectively as production of an entirely new algorithm.</p>

<H3><FONT COLOR="#000080">Standard Adapters</FONT></H3>

<p>Let&#146;s start with a look at two singularly pleasant and useful iterator adapters drawn from the C++ Standard library. Consider the problem of copying a sequence into a container. The best procedure is generally to leverage an existing generic algorithm, since this approach has the advantage of correctness, efficiency, reuse, and self-documentation.</p>

<pre>
extern vector&lt;State&gt; &amp;src;
//...
list&lt;State&gt; res;
copy( src.begin(), src.end(),
    res.begin() ); // boom.
</pre>

<p>The problem is that the <B>copy</B> algorithm assumes the result sequence is large enough to hold the source sequence; no checking is (or, generally, can be) done.</p>

<pre>
template &lt;typename In, typename Out&gt;
Out copy( In b, In e, Out r ) {
    while( b != e ) {
        *r = *b; // problem area
        ++b;
        ++r;
    }
    return r;
}
</pre>

<p>We could preallocate a result sequence of the appropriate length, but this is potentially wasteful and definitely socially gauche <a href="#1">[1]</a>.</p>

<pre>
list&lt;State&gt; res2( src.size() );
copy( src.begin(), src.end(), 
    res2.begin() ); // often works...
</pre>

<p>Another alternative would be to dispense with <B>copy</B> and just hand code the operation using <B>list</B>&#146;s <B>push_back</B> operation.</p>

<pre>
for( vector&lt;State&gt;::iterator i( 
    src.begin() );
    i != src.end(); ++i )
    res.push_back( *i );
</pre>

<p>What we&#146;d really like is the effect of a <B>push_back</B> while retaining the ability to use a standard generic algorithm. Note that there is nothing in the definition or implementation of the <B>copy</B> algorithm that requires an assignment operator to perform an assignment. All that&#146;s required is that the assignment syntax be supported and that the semantics do something reasonable. (Reasonable, as we shall see throughout this column, is a delightfully flexible term.) The standard approach to this copy problem is to employ a <B>back_insert_iterator</B>.</p>

<pre>
copy( src.begin(), src.end(), 
    back_inserter( res ) );
</pre>

<p>A <B>back_insert_iterator</B> is initialized with a container that supports the <B>push_back</B> operation and defines assignment to perform a <B>push_back</B> into the container. The syntax of the resulting iterator usage is impeccable; it just changes the meaning of assignment to something more appropriate. Let&#146;s look at a typical implementation.</p>

<pre>
template &lt;class Cont&gt;
class back_insert_iterator
    : public std::iterator&lt;
        std::output_iterator_tag,
        void,void,void,void&gt; {
  public:
    explicit 
    back_insert_iterator( Cont &amp;c )
        : c_(&amp;c){}
    back_insert_iterator &amp;
    operator =( const typename
        Cont::value_type &amp;v ) {
        c_-&gt;push_back( v );
        return *this; }
    back_insert_iterator &amp;operator *()
        { return *this; }
    back_insert_iterator &amp;operator ++()
        { return *this; }
    back_insert_iterator operator ++(int)
        { return *this; }
  private:
    Cont *c_;
};
</pre>

<p>Like all good, STL-compliant iterators that are implemented as classes, <B>back_insert_iterator</B> is derived from the standard <B>iterator</B> base class. This ensures that the iterator defines the proper set of type names and can be interrogated at compile time as to its properties <a href="#2">[2]</a>. The only property <I>typically</I> of interest to users of a <B>back_insert_iterator</B> is the iterator category, defined appropriately as the standard <B>output_iterator_tag</B> type. Most of the operations are no-ops, except assignment, which is defined to perform the <B>push_back</B>. This means our &#147;problem area&#148; line in the <B>copy</B> algorithm above, written as <B>*r = *b;</B>, will be translated as:</p>

<pre>
(r.operator *()).operator =( *b );
</pre>

<p>The <B>operator *</B> just returns its object, and <B>operator =</B> inlines the <B>push_back</B>, so we&#146;re left with:</p>

<pre>
r.c_-&gt;push_back( *b );
</pre>

<p>Simple and effective. The syntax required for instantiating and initializing a <B>back_insert_iterator</B> is tedious enough for us to employ a helper function.</p>

<pre>
template &lt;class Cont&gt;
back_insert_iterator&lt;Cont&gt;
back_inserter( Cont &amp;c )
    { return 
back_insert_iterator&lt;Cont&gt;( c ); }
</pre>

<p>In effect, we use the compiler&#146;s ability to perform template argument deduction for function templates to instantiate the class template for us.</p>

<pre>
copy( src.begin(), src.end(),
    back_inserter(res) ); // with helper
copy( src.begin(), src.end(),
    back_insert_iterator&lt; 
list&lt;State&gt; &gt;(res) ); // without
</pre>

<H3><FONT COLOR="#000080">Raw Deal</FONT></H3>

<p>Consider a class type that has non-encapsulated resources, like a financial bond deal with an associated pricing algorithm <a href="#3">[3]</a>.</p>

<pre>
class Bond {
  public:
    Bond &amp;operator =( const Bond &amp;that ) {
        if( this != &amp;that ) {
            //...
            delete m_; // problem area
            m_ = that.m_-&gt;clone();
        }
        return *this;
    }
    //...
  private:
    //...
    PVModel *m_;
};
</pre>

<p>The line indicated as a problem area is perfectly correct. An assignment operation is similar (but not identical!) to a destruction of the target of the assignment followed by its initialization; it&#146;s perfectly proper for a bond&#146;s assignment to delete its existing pricing model before attaching a new one. But what if we engage in foul trickery?</p>

<pre>
extern Bond x;
Bond *buf = static_cast&lt;Bond *&gt;
    (malloc( sizeof(Bond) )); // raw storage...
Bond &amp;rx = *buf; // foul trickery...
rx = x; // probable error!
</pre>

<p>An assignment operator must assume that it is working with two objects, but in this case we&#146;re dealing with one object (the right argument) and a block of uninitialized storage (the left argument). As a result, we may attempt to delete a bad pointer value. Code like the above is actually fairly hard to produce in isolation, except as an act of malice aforethought. However, it&#146;s not uncommon to use the standard library to leverage an error like this into existence.</p>

<pre>
extern Bond a[10];
Bond *ary = static_cast&lt;Bond *&gt;(malloc( 10*sizeof(Bond) ));
copy( a, a+10, ary ); // oops!
</pre>

<p>In this case, the clever author of this code is attempting to circumvent the cost or unavailability of a default initialization of an array of <B>Bond</B>s by copying into uninitialized storage. What is really needed here is not assignment, but copy construction. Well, why not? A <B>raw_storage_iterator</B> reinterprets assignment to do just that.</p>

<pre>
template &lt;class Out, class T&gt;
class raw_storage_iterator
    : public std::iterator&lt;std::output_iterator_tag,
        void,void,void,void&gt; {
  public:
    explicit raw_storage_iterator( Out cur )
        : cur_(cur) {}
    raw_storage_iterator &amp;operator *()
        { return *this; }
    raw_storage_iterator &amp;operator =( const T&amp; element );
    raw_storage_iterator &amp;operator ++()
        { ++cur_; return *this; }
    raw_storage_iterator operator ++( int ) {
        raw_storage_iterator tmp( *this );
        ++*this;
        return tmp;
    }
  private:
    Out cur_;
};
</pre>

<p>As with a <B>back_insert_iterator</B>, we are primarily concerned with the semantics of assignment, but we must also implement the increment operations on the underlying iterator. I understand that some readers may be upset to see that the dereference operator returns a <B>raw_storage_iterator</B> rather than an object of type <B>T</B>. However, a <B>raw_storage_iterator</B> is an output iterator, and only usage that employs both dereference and assignment must have a useful meaning. In other words, if <B>o</B> is an output iterator, and <B>v</B> is a compatible value, then only <B>*o = v</B> is required to mean anything useful <a href="#4">[4]</a>.</p>
<p>It is impossible to call a constructor directly, or to take its address, so assignment uses the placement form of <B>new</B> to trick the compiler into invoking a copy constructor.</p>

<pre>
template &lt;typename Out, typename T&gt;
raw_storage_iterator&lt;Out,T&gt; &amp;
raw_storage_iterator&lt;Out,T&gt;::operator =( const T &amp;v ) {
    T *elem = &amp;*cur_; // cur_ is initializing iterator
    new ( elem ) T(v); // placement and copy constructor
    return *this;
}
</pre>

<p>Now we can use a <B>raw_storage_iterator</B> to copy into unintialized storage without untoward side effects. Note that no helper function is provided. A <B>raw_storage_iterator</B> is typically used deep in the implementation of some other feature that is written and maintained by troll-like programmers who actually prefer the arcane template instantiation syntax.</p>

<pre>
Bond *ary = static_cast&lt;Bond *&gt;(malloc( 10*sizeof(Bond) ));
copy( a, a+10,
    raw_storage_iterator&lt;Bond *, Bond&gt;( ary ) );
</pre>

<H3><FONT COLOR="#000080">Which Way? Both!</FONT></H3>

<p>Now that we&#146;ve seen a couple of useful iterator adapters, let&#146;s engage in a somewhat less serious design problem. Suppose we&#146;d like to write to several different output streams simultaneously, rather than in sequence. For example, we might want to copy the same sequence to both a vector and to an output stream, or to a vector and the end of a list, and so on. Let&#146;s design a <B>MultiOut</B> iterator adapter that allows us to do just that.</p>

<pre>
Bond a[12];
list&lt;Bond&gt; lb;
vector&lt;Bond&gt; vb( 6 );
Bond *b = static_cast&lt;Bond *&gt;(malloc( sizeof(a) ));
//...
copy( a, a+6,
    multiOut( vb.begin(),
        ostream_iterator&lt;int&gt;(cout, " ") ) );
copy( a, a+6,
    multiOut( vb.begin(), back_inserter(lb) ) );
copy( a, a+6,
    multiOut( lb.begin(),
        raw_storage_iterator&lt;Bond *, Bond&gt;(b) ) );
</pre>

<p>Our first task is to make sure that our new iterator type properly defines its iterator traits and identifies itself as an output iterator. As before, we&#146;ll employ the standard <B>iterator</B> base class. A <B>MultiOut</B> adapter is instantiated with two output iterator types.</p>

<pre>
template &lt;typename Out1, typename Out2&gt;
class MultiOut : public std::iterator&lt;
    std::output_iterator_tag,
        // this is an output iterator
    typename std::iterator_traits&lt;Out1&gt;::value_type,
        // use Out1&#146;s value
    void&gt;;
        // difference_type not used
</pre>

<p>Note that, in specifying the second argument to the <B>iterator</B> base class, we arbitrarily chose the <B>value_type</B> of the first template argument to be the <B>value_type</B> of the <B>MultiOut</B>. This will allow us to instantiate a <B>MultiOut</B> with different value types, provided that the <B>value_type</B> of <B>Out1</B> can be converted implicitly to that of <B>Out2</B>.</p>

<pre>
int a[] = { 1,2,3,4,5,6 };
list&lt;int&gt; li;
vector&lt;double&gt; vd;
deque&lt;int&gt; di( 6 );
copy( a, a+6,
    multiOut( di.begin(), 
    back_inserter(vd) ) );
</pre>

<p>We initialize a <B>MultiOut</B> with two output iterators and provide a helper function to perform the instantiation.</p>

<pre>
template &lt;typename Out1, typename Out2&gt;
class MultiOut : public iterator&lt; 
    /*...*/ &gt; {
  public:
    MultiOut( Out1 a, Out2 b ) 
    : _a( a ), _b( b ) {}
    //...
  private:
    Out1 _a;
    Out2 _b;
};
template &lt;typename Out1, typename Out2&gt;
MultiOut&lt;Out1,Out2&gt; 
multiOut( Out1 a, Out2 b )
    { return 
MultiOut&lt;Out1,Out2&gt;( a, b ); }
</pre>

<p>We provide the standard output operator operations of increment and &#147;dereferenced assignment&#148; to perform those operations on each subsidiary iterator in sequence <a href="#5">[5]</a>.</p>

<pre>
template &lt;typename Out1, typename Out2&gt;
class MultiOut : public iterator&lt; 
    /*...*/ &gt; {
  public:
    //...
    MultiOut &amp;operator ++()
        { ++_a; ++_b; return *this; }
    MultiOut operator ++(int)
        { MultiOut tmp( *this ); ++*this; return tmp; }
    MultiOut &amp;operator =( const value_type &amp;v )
        { *_a = v; *_b = v; return *this; }
    MultiOut &amp;operator *()
        { return *this; }
    //...
};
</pre>

<p>That&#146;s all there is to it. However, it might also be nice to write simultaneously to three, four, or more output streams. The simplest way to achieve this is to recognize that a <B>MultiOut</B> is, itself, an output iterator. We can then provide additional helper functions to cascade <B>MultiOut</B>s for us.</p>

<pre>
template &lt;typename Out1, typename Out2&gt;
struct M2{ typedef MultiOut&lt;Out1,Out2&gt; 
    T; };

template &lt;typename Out1, typename Out2,
    typename Out3&gt;
struct M3{ typedef MultiOut&lt;Out1,
    M2&lt;Out2,Out3&gt;::T&gt; T; };

template &lt;class Out1, class Out2, 
    class Out3, class Out4&gt;
struct M4{ typedef MultiOut&lt;Out1,
    M3&lt;Out2,Out3,Out4&gt;::T&gt; T; };

template &lt;class Out1, class Out2, 
    class Out3&gt;
M3&lt;Out1,Out2,Out3&gt;::T
multiOut( Out1 a, Out2 b, Out3 c ) {
    return M3&lt;Out1,Out2,Out3&gt;
    ::T( a, multiOut(b,c) );
}

template &lt;typename Out1, typename Out2,
    typename Out3, typename Out4&gt;
M4&lt;Out1,Out2,Out3,Out4&gt;::T
multiOut( Out1 a, Out2 b, 
    Out3 c, Out4 d ) {
    return M4&lt;Out1,Out2,Out3,Out4&gt;
    ::T( a, multiOut(b,c,d) );
}
</pre>

<p>This gives us the convenience of broadcasting to an unbounded number (here, four) of output sinks. This allows us to solve the common problem of writing simultaneously to the back of a vector, the front and back of a list, and the front of a deque.</p>

<pre>
copy( a, a+6,
    multiOut( back_inserter(vd), 
            back_inserter( li ),
            front_inserter(li),
            front_inserter(di)) );
</pre>

<H3><FONT COLOR="#000080">Standard Whining</FONT></H3>

<p>Unfortunately, that last piece of code may not compile on all platforms. In fact, if we had been a little less circumspect with some of our earlier uses of <B>MultiOut</B>, we would have had the same portability difficulties. For example, our earlier example of copying to a vector and the end of a list is portable.</p>

<pre>
copy( a, a+6,
    multiOut( vb.begin(), 
    back_inserter(li) ) );
</pre>

<p>However, if we reverse the arguments to the <B>multiOut</B> helper, the code may not compile on many platforms.</p>

<pre>
copy( a, a+6,
    multiOut( back_inserter(li), 
    vb.begin() ) );
</pre>

<p>The problem is that the <B>back_insert_iterator</B> template, as we defined it above, has no <B>value_type</B>, or, more precisely, its <B>value_type</B> is defined to be <B>void</B>. For its part, the <B>MultiOut</B> template (arbitrarily) chooses the <B>value_type</B> of its first template argument to construct the argument used by its definition of <B>operator =</B>, <B>const value_type &amp;</B>. If the first template argument neglects to define a <B>value_type</B>, then <B>MultiOut</B> will attempt to define an illegal argument type of <B>const void &amp;</B>.</p>
<p>The reason <B>back_insert_iterator</B> may not define a <B>value_type</B> is that it is precisely an output iterator, without also being a more general iterator. (On the contrary, the iterator returned by <B>vb.begin()</B> is an output iterator, but it is also an input, forward, bidirectional, and random access iterator as well.) The reason output iterators are allowed to get away with this is a little obscure (at least, it is to me) <a href="#6">[6]</a>.</p>
<p>The Standard says in section 24.1 that &#147;All iterators <B>i</B> support the expression <B>*i</B>, resulting in a value of some class, enumeration, or built-in type <B>T</B>, called the <I>value type</I> of the iterator.&#148; This is clearly not the case for most implementations of pure output iterators, like <B>back_insert_iterator</B> and <B>raw_storage_iterator</B>, where <B>operator *</B> returns a proxy object for use in &#147;dereferenced assignment,&#148; typically a reference to the iterator itself. In section 24.1.2, we see that <B>operator *</B> may not necessarily be used by itself on an output iterator, but only in the context of dereferenced assignment. This restriction may be used, I suppose, to exempt the earlier statement of section 24.1. In my opinion, a more useful definition of <B>value_type</B> is, quite naturally, the type of a value in the sequence. This is a concept that is well defined for all iterator types, and, as we&#146;ve seen with the implementation of <B>MultiOut</B>, it renders the resulting iterator more useful. Most importantly, it would help us to avoid the problems of using constructs that may or may not support a particular feature; this leads to complexity and unportability.</p>
<p>The particular problem with <B>value_type</B> in the context of output iterators is that it often exists simply by accident, as an artifact of a particular implementation. For example, consider the declaration of assignment that we used in our implementation of <B>back_insert_iterator</B> above.</p>

<pre>
back_insert_iterator&lt;Cont&gt;&amp;
    operator =( const typename Cont::value_type &amp;v );
</pre>

<p>Another perfectly rational implementation might have employed a <B>typedef</B>.</p>

<pre>
typedef typename Cont::value_type value_type;
back_insert_iterator &amp;
    operator =( const value_type &amp;v );
</pre>

<p>This second version of <B>back_insert_iterator</B> defines a <B>value_type</B> within the template and can, therefore, be used as the first argument to the <B>MultiOut</B> template. This is the kind of undocumented and unstable state of affairs that makes our lives miserable when porting to a new environment or when accepting a new version of an existing library. It would be much better, I think, for the Standard to require that every output iterator define a <B>value_type</B>.</p>

<pre>
template &lt;class Cont&gt;
class back_insert_iterator
    : public std::iterator&lt;std::output_iterator_tag,
        typename Cont::value_type,
        void&gt;;
</pre>

<H3><FONT COLOR="#000080">Stepping Back, Going Forward</FONT></H3>

<p>STL generic algorithms can be customized by a variety of mechanisms. As we have seen in the previous installment of &#147;Common Knowledge,&#148; a generic algorithm can be customized through compile time queries of its iterator&#146;s capabilities and by allowing customization of its predicates and comparators. In this installment, we&#146;ve seen how to modify the semantics of a generic algorithm indirectly, by modifying the semantics of its output iterators through the use of output iterator adapters. In effect, a properly designed generic algorithm is often only a high-level suggestion of an algorithm&#146;s intent, whose concrete semantics are determined by many different components. We&#146;ll continue in this vein in the next installment of this column, where we&#146;ll use some simple template metaprogramming to create an unusual input iterator adapter.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Note that it also requires that the <B>State</B> class provide a default constructor, which is both costly and restrictive, since many useful classes do not offer defaults. Another alternative would be to dispense with the <B>copy</B> algorithm and employ an alternate form of the list constructor, as in <B>list&lt;State&gt; res2( src.begin(), src.end() );</B>. This will probably work on most compilers, depending on the implementation of <B>vector&lt;State&gt;::iterator</B>. However, the moderately different <B>list&lt;State&gt; res3( res2.begin(), res2.end() );</B> will likely fail on compilers that do not support template member functions.</p>
<p><a name="2"></a>[2]  See the previous installment of this column, &#147;Common Knowledge: Conventional Generic Algorithms,&#148; <I>C/C++ Users Journal</I>, October 2001. Note that some authors, including the venerable Dr. Stroustrup (<I>The C++ Programming Language</I>, 3rd edition, Addison-Wesley, 1997, pp. 562-3), will on occasion derive an iterator from <B>std::iterator_traits</B> rather than <B>std::iterator</B>. Although either will have the same practical effect at present, I disagree with this approach. First, public inheritance from the <B>iterator</B> base class is an explicit statement that you are creating a new iterator type; there in no such implication when deriving from <B>iterator_traits</B>. Second, <B>iterator</B> and <B>iterator_traits</B> are separate entities, and there is no guarantee that they will always be interchangeable in this regard. For example, in the future, <B>iterator</B> may define additional information that is not present in <B>iterator_traits</B>.</p>
<p><a name="3"></a>[3]  For those who are keeping score, this is an instance of the Strategy pattern.</p>
<p><a name="4"></a>[4]  The best and most complete discussion of this and many other fine points of the STL is to be found in Matt Austern&#146;s <I>Generic Programming and the STL</I> (Addison-Wesley, 1999).</p>
<p><a name="5"></a>[5]  Note that the compiler will correctly (in this case) provide the destructor, copy constructor, and assignment operator for <B>MultiOut</B>.</p>
<p><a name="6"></a>[6]  It is also the case that output iterators do not have to define a <B>difference_type</B> or support the equality operators. The reasons behind this indecision are, I think, much more technically defensible than those surrounding the decision not to require a definition of <B>value_type</B>. </p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
