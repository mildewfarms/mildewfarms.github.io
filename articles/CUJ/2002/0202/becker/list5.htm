<HTML><HEAD>
<TITLE>February 2002/STL &amp; Generic Programming/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: A prototype factory with multiple policies</A></h4>
<pre>
// Default policies defined in Listing 6
//
template
&lt;
  typename Proto, 
  typename Id,
  typename ProtoTypingPolicy = PFPlainOwnedPointers&lt;Proto&gt;,
  typename ThreadingPolicy = PFSingleThreaded
&gt;
class ProtoTypeFactory : public ThreadingPolicy
{

  typedef std::map&lt;Id, ProtoTypingPolicy::stored_type&gt; 
    PrototypeMap;

public:
  bool RegisterProtoType(
    const ProtoTypingPolicy::stored_type&amp; protoType,
    Id id
  )
  { 
    Lock lock(this);
    return protoTypeCollection.insert(
      std::make_pair(id, protoType)
      ).second;
  }
  
  ProtoTypingPolicy::cloning_result_type GetClone(Id id)
  { 
    PrototypeMap::iterator itProto, itEnd;
    {
      Lock lock(this);
      itEnd = protoTypeCollection.end();
      itProto = protoTypeCollection.find(id);
    }    
    
    // Can do this outside of lock scope:
    // map insertions do not invalidate iterators.
    //
    if( itEnd == itProto )
      return NULL;
    else
      return ProtoTypingPolicy::Clone(itProto-&gt;second); 
  }

  ~ProtoTypeFactory()
  { 
    ProtoTypingPolicy::DestroyProtoTypes(
      protoTypeCollection.begin(),
      protoTypeCollection.end()
      );
  }

private:
  PrototypeMap protoTypeCollection;

};
&#151; End of Listing &#151;</pre></body></html>
