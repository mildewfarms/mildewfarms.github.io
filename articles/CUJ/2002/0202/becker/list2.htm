<HTML><HEAD>
<TITLE>February 2002/STL &amp; Generic Programming/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The prototype factory class using traits</A></h4>
<pre>
template&lt;typename Proto&gt;
class prototype_traits
{
public:
  typedef Proto* stored_type;
  typedef Proto* cloning_result_type;
  
  enum{ destroy_prototypes = true, };

  static cloning_result_type Clone(stored_type p)
  { return p-&gt;Clone(); }

  static void Destroy(stored_type p)
  { delete p; }

};

template&lt;typename Proto, typename Id&gt;
class ProtoTypeFactory
{
public:
  void RegisterProtoType(
    const prototype_traits&lt;Proto&gt;::stored_type&amp; protoType,
    Id id
  )
  { protoTypeCollection[id] = protoType; }
  
  prototype_traits&lt;Proto&gt;::cloning_result_type
  GetClone(Id id)
  { 
    return prototype_traits&lt;Proto&gt;::Clone(
      protoTypeCollection[id]
      ); 
  }

  ~ProtoTypeFactory()
  { 
    if( prototype_traits&lt;Proto&gt;::destroy_prototypes )
    {
      std::for_each(
        protoTypeCollection.begin(),
        protoTypeCollection.end(),
        DestroyPrototype()
        );
    }
   }

protected:
  std::map&lt;Id, prototype_traits&lt;Proto&gt;::stored_type&gt;
    protoTypeCollection;

private:
  class DestroyPrototype
  {
  public:
    operator()(std::pair&lt;Id, prototype_traits&lt;Proto&gt;::stored_type&gt; elem)
    { prototype_traits&lt;Proto&gt;::Destroy(elem.second); }
  };
};
&#151; End of Listing &#151;</pre></body></html>
