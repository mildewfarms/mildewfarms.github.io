<HTML>   
     <HEAD>
<TITLE>February 2002/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: Policy-Driven Design</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>If you had to struggle a bit on your first pass through Alexandrescu&#146;s Modern C++ Design, let this gem serve as a gentler introduction to policy-based design in C++.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Within the overall plan of my column, &#147;STL &amp; Generic Programming,&#148; I am still in the process of making a first pass through the STL. After that, I will be talking about generic programming techniques in general. In my last column, however, I digressed and talked about something that is not specific to the STL, namely, traits classes. Digressions are a dangerous thing. You can get lost in them. As a matter of fact, I have decided that there is another topic so closely related to traits classes and so important that I must talk about it now, before returning to my discussion of the STL. The topic is policy classes and policy-driven design. Before I tell you about policy classes and why I feel compelled to discuss them, let me say that the definitive source on the subject is Andrei Alexandrescu&#146;s book <I>Modern C++ Design</I> <a href="#1">[1]</a>. I cannot recommend this book strongly enough to anybody with an interest in cutting-edge C++ programming. Reading it makes you wonder if perhaps it can cause cancer in laboratory rats. It&#146;s that good. You will also encounter the idea of policy-driven design in some of the stuff at &lt;http://boost.org&gt;, a site that you should check out frequently if you use the STL.</p>
<p>In my last column (<I>CUJ</I>, December 2001), I used a prototype factory class as an example to illustrate traits classes. When I read my column again after it had gone to print, all of a sudden I felt that this was a poorly chosen example. It looked to me as if policy classes would have been a much better way to make the prototype factory customizable for different purposes. Dazed and confused, I picked up Andrei Alexandrescu&#146;s book and re-read Chapter 1, &#147;Policy Based Class Design.&#148; There, I found the following enlightening sentence: &#147;Policies have much in common with traits [...] but differ in that they put less emphasis on type and more emphasis on behavior&#148; <a href="#2">[2]</a>. Looking at my example again, I now understood that traits and policies are closely related techniques, and that there is in fact an overlap of problem domains where either one of the two is applicable. My doubts about the use of traits with the prototype factory example stemmed from the fact that this example does reside in that gray zone, where both traits and policies can be used.</p>
<p>Therefore, in this column I will first remind you of my last column&#146;s prototype factory example and how it used traits classes. After that, I will rework the example completely using policy classes, and voila, I have not only shown you traits and policies, but we also have a single example that illustrates the relationship and the tradeoffs between the two.</p>

<H3><FONT COLOR="#000080">The Prototype Factory Example Revisited</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows the bare essence of the prototype factory class template that was the main example in my December 2001 column. The factory stores pointers to objects of type <B>Proto</B>, indexed by identifies of type <B>Id</B>. Such a prototype factory would, for example, be useful in a CAD program, where it would hold prototypes of the different parts that go into a drawing. Creating the first instance of a particular part is typically costly, involving a trip to a database or a website. Subsequent instances can be obtained much more easily as clones of the first instance. Therefore, it is a good idea to store the first instance of each part in a prototype factory and get all subsequent instances from there. The prototype factory pattern is described in more detail in Chapter 3 of the Gang-of-Four book <a href="#3">[3]</a>.</p>
<p>The starting point for my discussion of traits classes was the observation that the class <B>ProtoTypeFactory</B>, although templatized with the type of the prototypes and the type of the index, is not very generic. For example, we might want to store prototypes of some type <B>Widget</B>, but the <B>Widget</B> method that needs to be called to create the clone happens to be called <B>DeepCopy</B> rather than <B>Clone</B>. Then the line:</p>

<pre>
return protoTypeCollection[id]-&gt;Clone();
</pre>

<p>in <B>ProtoTypeFactory</B>&#146;s <B>GetClone</B> method must be changed to:</p>

<pre>
return 
protoTypeCollection[id]-&gt;DeepCopy();
</pre>

<p>In order to achieve this change generically, without having to change the factory&#146;s source code, we routed the call to the prototype&#146;s cloning operation through a traits class. To this end, we implemented the factory&#146;s <B>GetClone</B> method as:</p>

<pre>
return prototype_traits&lt;Proto&gt;::Clone(
  protoTypeCollection[id]);
</pre>

<p>The default implementation of the class template <B>prototype_traits</B> looked as follows:</p>

<pre>
template&lt;typename Proto&gt;
class prototype_traits
{
public:
  static Proto* Clone(Proto* p)
  { return p-&gt;Clone(); }
};
</pre>

<p>So far, the whole caboodle behaved exactly like <a href="list1.htm">Listing 1</a>&#146;s prototype factory, except for an extra level of indirection when calling the prototype&#146;s <B>Clone</B> method. But we could now easily solve the <B>Widget</B> problem. To this end, we provided an explicit template specialization of the <B>prototype_traits</B> class template for widgets, like this:</p>

<pre>
template&lt;&gt;
class prototype_traits&lt;Widget&gt;
{
public:
  static Widget* Clone(Widget* p)
  { return p-&gt;DeepCopy(); }
}
</pre>

<p>Now if we instantiated a widget prototype factory, like this:</p>

<pre>
ProtoTypeFactory&lt;Widget, int&gt; widgetFactory;</p>
</pre>

<p>then the call:</p>

<pre>
Widget* clone = widgetFactory.GetClone(42);
</pre>

<p>would retrieve the prototype with index <B>42</B> and then return the result of calling <B>DeepCopy</B> on this prototype.</p>
<p>Once we had this traits mechanism in place, we used it to make the prototype factory even more generic. For example, instead of hard coding the map of <B>Id</B>s to prototypes as:</p>

<pre>
std::map&lt;Id, Proto*&gt; protoTypeCollection;
</pre>

<p>we wrote:</p>

<pre>
std::map&lt;Id, prototype_traits&lt;Proto&gt;::stored_type&gt;
  protoTypeCollection;
</pre>

<p>The default implementation of the <B>prototype_traits</B> class template had the <B>typedef</B>:</p>

<pre>
typedef Proto* stored_type;
</pre>

<p>which took us right back to the original:</p>

<pre>
std::map&lt;Id, Proto*&gt; protoTypeCollection;
</pre>

<p>However, explicit specializations of <B>prototype_traits</B> are now free to store something other than a plain pointer to the prototype object (e.g., some sort of smart pointer). <a href="list2.htm">Listing 2</a> shows the end result of pursuing this idea. What we&#146;ve done here can be loosely described as follows: wherever there is something in <B>ProtoTypeFactory</B>&#146;s implementation that could be done in more than one way, we do not make a decision and hard-code one possibility. Instead, we say to the prototype factory, &#147;Go ask the traits of your template argument <B>Proto</B>. They&#146;ll tell you what to do.&#148;</p>
<p>So why was I uncomfortable with all this when I read it again after it had gone to print? One could argue that the decision whether to store plain pointers or smart pointers or what have you is not really a property of the type <B>Proto</B>. One could conceivably use two different prototype factories for the same type of prototype: one that stores plain pointers, and another that stores something else. Similarly, one factory for a particular type of prototype may use the prototype&#146;s <B>DeepCopy</B> method for cloning, while another factory for the same type may prefer to obtain its clones as shallow copies. From this point of view, all the decisions that we have previously deferred to the traits class must really be made by the factory class itself. It is thus not a good idea to specify a particular policy for each type of prototype. Instead, we want to set things up so that the client programmer can, upon instantiation of a prototype factory object, flip a few switches to give this particular factory object certain behavioral characteristics. This is exactly what policy classes and policy-driven design are all about.</p>

<H3><FONT COLOR="#000080">A Prototype Factory with Policies</FONT></H3>

<p>Let us go back to the original, non-customizable prototype factory of <a href="list1.htm">Listing 1</a> and give it a &#147;policy template&#148; so that the client programmer can specify, upon instantiation of a factory object, what function should be called on the prototype object to obtain the clone. <a href="list3.htm">Listing 3</a> shows how this is done. The <B>ProtoTypeFactory</B> class template takes an additional template argument <B>CloningPolicy</B>. Looking at <B>ProtoTypeFactory</B>&#146;s <B>GetClone</B> method and the class template <B>CloneFromPointer</B>, which is the default value for <B>CloningPolicy</B>, it is easy to see how it all works. <B>GetClone</B> simply defers the decision of how to obtain the clone to a static member function of the cloning policy. The default policy <B>CloneFromPointer</B> gives us exactly what we had before in the simple factory of <a href="list1.htm">Listing 1</a>. However, we can now create a prototype factory that calls <B>DeepCopy</B> to obtain the clone by specifying a new policy, like this:</p>

<pre>
template&lt;typename Proto&gt;
class DeepCopyFromPointer
{
public:
  typedef Proto* cloning_result_type;
  static cloning_result_type Clone(Proto* p)
  { return p-&gt;DeepCopy(); }
};

ProtoTypeFactory&lt;
  Widget,
  int,
  DeepCopyFromPointer&lt;Widget&gt;
  &gt;
  deep_widget_factory;
</pre>

<p>If the same class <B>Widget</B> also has a method <B>ShallowCopy</B>, then we can have another widget prototype factory that hands out shallow clones:</p>

<pre>
template&lt;typename Proto&gt;
class ShallowCopyFromPointer
{
public:
  typedef Proto* cloning_result_type;
  static cloning_result_type Clone(Proto* p)
  { return p-&gt;ShallowCopy(); }
};

ProtoTypeFactory&lt;
  Widget,
  int,
  ShallowCopyFromPointer&lt;Widget&gt;
  &gt;
  shallow_widget_factory;
</pre>

<p>Notice how the cloning policy also specifies the result type of the factory&#146;s <B>GetClone</B> method. The clone can thus be returned by value, by reference, as a plain pointer, or as some smart pointer, as desired.</p>
<p>That&#146;s pretty much it: policy-driven design in a nutshell. Using the same loose language as before with traits, what we&#146;ve done here can be described as follows: wherever there is something in <B>ProtoTypeFactory</B>&#146;s implementation that could be done in more than one way, we do not make a decision and hard-code one possibility. Instead, we say to the prototype factory, &#147;Don&#146;t worry about it now. When you&#146;re instantiated, you&#146;ll be given a policy (via a template argument) that will tell you what to do.&#148;</p>
<p>The beauty and the power of policy-driven design become apparent when we start to combine and layer different policies. Due to the magic of combinatorics, it is then possible to obtain an enormous amount of functionality from very little source code. The prototype factory example can be used to illustrate this to some extent. But before I do this, I want to pause briefly to mention a C++ language feature that I should be using here, but can&#146;t because it is not supported by Microsoft&#146;s Visual C++ compiler, which many if not most of us use in our daily work.</p>

<H3><FONT COLOR="#000080">Template Template Parameters</FONT></H3>

<p>Let us look at a very simple example of a class template:</p>

<pre>
template&lt;typename T&gt;
class X
{
  // Some stuff
  ...

  private:
  T m_templMember;
};
</pre>

<p>This class template has a member of type <B>T</B>, the template parameter. Upon instantiation, the client programmer can specify any type for the template parameter. It can be a built-in type, as in:</p>

<pre>
X&lt;int&gt; someVariable;
</pre>

<p>or it can be a class type, as in:</p>

<pre>
class SomeClass { ... } ;
X&lt;SomeClass&gt; anotherVariable;
</pre>

<p>It can even be an instantiation of a class template, like this:</p>

<pre>
template&lt;typname S&gt;
class SomeClassTemplate { ... };

X&lt;SomeClassTemplate&lt;int&gt; &gt; yetAnotherVariable;
</pre>

<p>By the time the template parameter <B>S</B> of <B>SomeClassTemplate</B> has been specified to <B>int</B>, <B>SomeClassTemplate&lt;int&gt;</B> is just another class type. The fact that it came into existence as an instantiation of a class template is now irrelevant. It can therefore be used as a value for <B>X</B>&#146;s template parameter <B>T</B> just like any other class type. However, C++ allows us to go one step further and use, as values for template parameters, class templates whose template parameters have not yet been specified. Here&#146;s an example:</p>

<pre>
template&lt;template&lt;typename S&gt; T&gt;
class A
{
  // Some stuff
  ...

  private:
  T&lt;int&gt; m_aTOfInt;
  T&lt;double&gt; m_aTOfDouble;
}
</pre>

<p>The line:</p>

<pre>
template&lt;template&lt;typename S&gt; T&gt;
</pre>

<p>in the code above says that <B>A</B> is going to be a class template with one template argument. Furthermore, any value used for this template argument must itself be a class template with one template argument. Inside the definition of <B>A</B>, the class template <B>T</B> is used twice, once with its template argument <B>S</B> specified to <B>int</B>, and then again with <B>S</B> specified to <B>double</B>. Client code that uses <B>A</B> could, for example, look like this:</p>

<pre>
template&lt;typename S&gt;
class SomeClassTemplate { ... };

A&lt;SomeClassTemplate&gt; someVariable;
</pre>

<p>So far so good, but how is this relevant to policy-driven design? Take another look at our instantiation of a prototype factory using the shallow copy cloning policy:</p>

<pre>
ProtoTypeFactory&lt;
  Widget,
  int,
  DeepCopyFromPointer&lt;Widget&gt;
  &gt;
  deep_widget_factory;
</pre>

<p>The first template parameter of the factory class template is specified to be <B>Widget</B>. The cloning policy class (<B>DeepCopyFromPointer</B> in this case) also has a template parameter, and that parameter must be specified to the same class <B>Widget</B>. This is a redundancy that is plain ugly. Furthermore, the poor client programmer who inadvertently mixes types, as in:</p>

<pre>
ProtoTypeFactory&lt;
  Widget,
  int,
  DeepCopyFromPointer&lt;Gadget&gt; // Oohps...
  &gt;
  deep_widget_factory;
</pre>

<p>ends up in template-error-message hell, and it would certainly be nice to prevent that from ever happening. This can indeed be achieved using template template parameters, as shown in <a href="list4.htm">Listing 4</a>. The template parameter <B>CloningPolicy</B> is now specified to be a class template that takes one template argument. Therefore, a typical instantiation now looks like this:</p>

<pre>
ProtoTypeFactory&lt;
  Widget,
  int,
  DeepCopyFromPointer
  &gt;
  deep_widget_factory;
</pre>

<p>The client programmer does not have to redundantly specify <B>Widget</B> as the cloning policy&#146;s template argument anymore. It suffices to just provide a class template such as <B>DeepCopyFromPointer</B>. Inside <B>ProtoTypeFactory</B>&#146;s class definition, the value of the cloning policy&#146;s template argument is hard-wired to always be the same as the value of <B>Proto</B>: no more redundancy, no more error-proneness.</p>
<p>Notice how in <a href="list4.htm">Listing 4</a>, the template template parameter <B>CloningPolicy</B> is declared as:</p>

<pre>
template&lt;typename&gt; CloningPolicy = 
  CloneFromPointer
</pre>

<p>This demonstrates that C++ allows you to skip naming the inner template parameters. All the compiler needs to know is how many of them there will be.</p>
<p>If you try to use template template parameters with Microsoft&#146;s VC++ v6 compiler, you get two error messages: &#147;template definitions cannot nest&#148; and &#147;template declarations are only permitted at global or namespace scope.&#148; The purpose of this little excursion was to make it clear that these statements are somewhat misleading, to put it mildly. The correct error message would be, &#147;template template parameters not supported.&#148;</p>

<H3><FONT COLOR="#000080">Combining Policies</FONT></H3>

<p>As I said before, the real power and beauty of policy-driven design comes to light when a class allows the client programmer to specify policies for different aspects of its behavior. Because of the sheer combinatorial number of possibilities, a relatively small number of policy implementations for each aspect will magically produce a large number of classes with different behavior. <a href="list5.htm">Listing 5</a> shows the prototype factory of <a href="list4.htm">Listing 4</a> with many more aspects of its behavior delegated to policy classes. There are two policy template parameters, <B>ProtoTypingPolicy</B> and <B>ThreadingPolicy</B>.</p>
<p><B>ProtoTypingPolicy</B> handles all aspects of storing, cloning, and destroying the prototype objects. It should not be necessary to discuss the code in detail; it is rather obvious how <B>ProtoTypeFactory</B> delegates the relevant behavior to the policy class. <a href="list6.htm">Listing 6</a> shows the default policy, which makes the factory store owned pointers to prototypes. <a href="list7.htm">Listing 7</a> shows an alternate policy, where the factory stores copies of prototypes and hands out copy-constructed clones.</p>
<p>One could of course, in the interest of better reusability, choose a finer granularity and have separate policy template arguments for storing, cloning, and destroying prototypes. On the other hand, having many very specialized policy arguments complicates things for the author of the class, as well as the client programmer, because it becomes harder to understand and handle the interdependencies between the different aspects of behavior. This is one of those situations where it is ultimately a matter of discretion how one weighs the tradeoffs.</p>
<p>The second policy argument of our <B>ProtoTypeFactory</B> is the threading policy. It is quite likely that such a factory will be used in a multithreaded environment, where registering a new prototype and cloning an existing one can occur concurrently. In this case, access to the collection of prototypes must be synchronized appropriately. Delegating this synchronization to a policy brings two advantages: first, it allows us to implement synchronization as a no-op when it is known that the object will be used in a single-threaded environment, thus saving us the overhead of acquiring and releasing locks. Secondly, we can write synchronization policies for different environments and operating systems, thus greatly increasing reusability.</p>
<p>All the synchronization stuff is in the <B>RegisterProtoType</B> and <B>Clone</B> methods of <a href="list5.htm">Listing 5</a>. Looking at <B>RegisterProtoType</B> and comparing it to the versions of <a href="list1.htm">Listings 1</a>, <a href="list2.htm">2</a>, and <a href="list3.htm">3</a>, you&#146;ll find that for simplicity, we now strictly disallow re-registering a prototype with the same ID. To allow re-registering is of course a reasonable demand. It is an interesting exercise to make this possible via a policy and handle thread-safety correctly and efficiently. In our case, in the absence of re-registering, all we have to do is serialize access to the collection of prototypes with a lock. We do this in the standard way, by constructing a dummy object whose lifetime is the scope of the operation that is to be synchronized. For the default threading policy <B>PFSingleThreaded</B> as shown in <a href="list6.htm">Listing 6</a>, construction and destruction of this dummy object is a no-op, which is practically guaranteed to be optimized away by the compiler. For multithreaded policies, construction of the object must acquire a lock, and destruction must release it. <a href="list8.htm">Listing 8</a> shows an example that works under Win32.</p>
<p>The interesting point here is that we want to synchronize on the object level (i.e., we must have one lock per factory object). On the other hand, the lock conceptually resides in the policy class; otherwise, there would be no customizability. This dilemma can be resolved by making the lock a member of the threading policy class and letting the factory class inherit from its own template argument <B>ThreadingPolicy</B>. That way, the lock ends up being a data member of the factory object, as desired. This little gimmick of inheriting from one&#146;s own template argument is known among C++ buffs as the CRTP (Curiously Recurring Template Pattern), a term that was coined by James Coplien <a href="#4">[4]</a>. As an alternative, the factory class could aggregate an object of type <B>ThreadingPolicy</B>.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Policy-driven design is a great way to enhance reusability by delegating certain aspects of the behavior of a class to external policy classes. Since policies can often be used in different combinations, a relatively small amount of source code leads to a large number of classes with different behavior.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>
<p><a name="2"></a>[2]  Ibid., p. 8.</p>
<p><a name="3"></a>[3]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns</I> (Addison-Wesley, 1994).</p>
<p><a name="4"></a>[4]  James Coplien. &#147;The column without a name: A curiously recurring template pattern,&#148; <I>C++ Report</I>, February 1995. </p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2002/feb02/becker.zip"></a></h4>
</blockquote></body></html>
