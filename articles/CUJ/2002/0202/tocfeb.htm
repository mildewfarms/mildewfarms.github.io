<HTML>
<HEAD>
<TITLE>February 2002</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">February 2002<BR>
                Volume 20 Number 2</FONT></H3>
               
<H3><FONT COLOR="#FF0000">EMBEDDED SYSTEMS</FONT></H3>
<H4><A HREF="harmon/harmon.htm">Probing the Palm OS</A></H4>
<p><b>Trevor Harmon</b><br>
<i>You can develop Palm applications in most any host language. Here&#146;s how to do so in C.</i></p>

<H4><A HREF="gatliff/gatliff.htm">Implementing Interrupt Service Routines in C++</A></H4>
<p><b>Bill Gatliff</b><br>
<i>Handling interrupts isn&#146;t a job for only C or assembly language programmers. C++ can do the job with elegance and efficiency.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>
<H4><A HREF="sutter/sutter.htm">Extensible Templates: Via Inheritance or Traits?</A></H4>
<p><b>Herb Sutter</b><br>
<i>Traits classes have become de rigueur in C++ template programming. Read this to find out why.</i></p>


<H3><FONT COLOR="#FF0000">C/C++ Contributing Editors</FONT></H3>

<H4><A HREF="becker/becker.htm">STL &amp; Generic Programming: Policy-Driven Design</A></H4>
<p><b>Thomas Becker</b><br>
<i>If you had to struggle a bit on your first pass through Alexandrescu&#146;s </I>Modern C++ Design<I>, let this gem serve as a gentler introduction to policy-based design in C++.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: Naming Unknown Types</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>Sometimes you can finesse your way around hard problems with programming conventions. STL does. Why don&#146;t you try it?</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: Output Iterator Adapters</A></H4>
<p><b>Steve Dewhurst</b><br>
<i>Once again, uncommonly cogent wisdom &#151; this time about output iterators, suitable for use by trolls and other serious programmers.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>
<p>In this, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:<P>

<H4><A HREF="../cexp2002/alexandr/alexandr.htm">&#147;Generic&lt;Programming&gt;: Typelists and Applications&#148;</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<i>This month&#146;s installment of &#147;Generic&lt;Programming&gt;&#148; reintroduces typelists, discusses alternatives for implementing typelist creation, and presents a concrete application of typelists in a real-world problem: visiting a hierarchy that wasn&#146;t designed for visitation.</i></p>

<H4><A HREF="../cexp2002/hyslop/hyslop.htm">&#147;Conversations: New Bases, Part 2&#148;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<I>Basic reading and writing from a standard stream sounds simple, but can harbor its share of little complexities. Here is a simple example, with notes about the kinds of complexity that can usually be deferred.</I></p>

<H4><A HREF="../cexp2002/henney/henney.htm">&#147;From Mechanism to Method: The Safe Stacking of Cats&#148;</A></H4>
<p><b>by Kevlin Henney</b><br>
<I>What can you do with a cat? Many things, perhaps the most surprising of which (not least to the cat) is to stack it. However, not all attempts at cat stacking are successful. This column explores the safety aspect of such antics in C++: What are the levels of exception safety that we can assume? By what means can we achieve exception safety? What are the five different approaches to cat stacking? What are their relative merits and drawbacks?</I></p>

<H4><A HREF="../cexp2002/austern/austern.htm">&#147;The Standard Librarian: Containers of Incomplete Types&#148;</A></H4>
<p><b>by Matt Austern</b><br>
<I>Unlike most of my columns, this one is about something you can&#146;t do with the C++ Standard library: put incomplete types in one of the standard containers. This column explains why you might want to do this, why the standardization committee banned it even though they knew it was useful, and what you might be able to do to get around the restriction.</I></p>

<H4><A HREF="../cexp2002/sutter/sutter.htm">&#147;The New C++&#148;</A></H4>
<p><b>by Herb Sutter</b><br>
<I>A new C++ Standard library and language are now in the making. This is a fitting time to introduce &#147;The New C++,&#148; a new column dedicated to keeping you up-to-date with the latest status of the coming brand-new release of the C++ Standard.</I></p>
</BLOCKQUOTE></BODY></HTML>
