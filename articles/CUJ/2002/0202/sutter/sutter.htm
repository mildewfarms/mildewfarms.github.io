<HTML>   
     <HEAD>
<TITLE>February 2002/Extensible Templates: Via Inheritance or Traits?</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Extensible Templates: Via Inheritance or Traits?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>Traits classes have become de rigueur in C++ template programming. Read this to find out why.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><b>Adapted from item four from the forthcoming book by Herb Sutter, <i>More Exceptional C++</i>. &copy; 2002 Pearson Education, Inc. Reprinted by permission of Pearson Education, Inc. All rights reserved.</b></p>
<p>The Greek philosopher Socrates taught by asking his students questions &#151; questions designed to guide them and help them draw conclusions from what they already knew, and to show them how the things they were learning related to each other and to their existing knowledge. This method has become so famous that we now call it the &#147;Socratic method.&#148; From our point of view as students, Socrates&#146; approach involves us, makes us think, and helps us relate and apply what we already know to new information. <I>More Exceptional C++</I> <a href="#1">[1]</a> uses a Socratic problem-solution format to teach how to make effective use of Standard C++ and its standard library with a particular focus on sound software engineering in modern C++.</p>
<p>In this excerpt from <I>More Exceptional C++</I> (Item 4, drawn from the opening section on &#147;Generic Programming and the C++ Standard Library&#148;), our focus is on traits templates and some cool traits techniques. Even without traits, what can a template figure out about its type &#151; and what can it do about it? And how, then, can traits make life even clearer and more extensible? The answers are nifty and illuminating, and not just for people who write C++ libraries.</p>

<H3><FONT COLOR="#000080">Problem</FONT></H3>

1.  What is a traits class?</p>
2.  Demonstrate how to detect and make use of template parameters&#146; members, using the following motivating case: you want to write a class template <B>C</B> that can only be instantiated on types that have a <B>const</B> member function named <B>Clone()</B> that takes no parameters and returns a pointer to the same kind of object.</p>

<pre>
// T must provide
// T* T::Clone() const
template&lt;typename T&gt;
class C
{
  // ...
};
</pre>

<p>Note: it&#146;s obvious that if <B>C</B> writes code that just tries to invoke <B>T::Clone()</B> without parameters, then such code will fail to compile if there isn&#146;t a <B>T::Clone()</B> that can be called without parameters. But that&#146;s not enough to answer this question, because just trying to call <B>T::Clone()</B> without parameters would also succeed in calling a <B>Clone()</B> that has default parameters and/or does not return a <B>T*</B>. The goal here is to specifically enforce that <B>T</B> provide a function that looks exactly like this: <B>T* T::Clone() const</B>.</p>
<p>3.  A programmer wants to write a template that can require (or just detect) whether the type on which it is instantiated has a <B>Clone()</B> member function. The programmer decides to do this by requiring that classes offering such a <B>Clone()</B> must derive from a predetermined <B>Cloneable</B> base class. Demonstrate how to write the following template:</p>

<pre>
template&lt;typename T&gt;
class X
{
  // ...
};
</pre>

<p>a.  to require that <B>T</B> be derived from <B>Cloneable</B>; and</p>
<p>b.  to provide an alternative implementation if <B>T</B> is derived from <B>Cloneable</B>, and work in some default mode otherwise.</p>
<p>4.  Is the approach in #3 the best way to require/detect the availability of a <B>Clone()</B>? Describe alternatives.</p>
<p>5.  How useful is it for a template to know that its parameter type <B>T</B> is derived from some other type? Does knowing about such derivation give any benefit that couldn&#146;t also be achieved without the inheritance relationship?</p>

<H3><FONT COLOR="#000080">Solution</FONT></H3>

<p><I>1.  What is a traits class?</I></p>
<p>Quoting 17.1.18 in the C++ Standard <a href="#2">[2]</a>, a traits class is:</p>
<UL>
<p>a class that encapsulates a set of types and functions necessary for template classes and template functions to manipulate objects of types for which they are instantiated. <a href="#3">[3]</a></p>
</UL>
<p>The idea is that traits classes are instances of templates and are used to carry extra information &#151; especially information that other templates can use &#151; about the types on which the traits template is instantiated. The nice thing is that the traits class <B>T&lt;C&gt;</B> lets us record such extra information about a class <B>C</B>, without requiring any change at all to <B>C</B>.</p>
<p>For example, in the Standard itself, <B>std::char_traits&lt;T&gt;</B> gives information about the character-like type <B>T</B>, particularly how to compare and manipulate such <B>T</B> objects. This information is used in such templates as <B>std::basic_string</B> and <B>std::basic_ostream</B> to allow them to work with character types that are not necessarily <B>char</B> or <B>wchar_t</B>, including working with user-defined types for which you provide a suitable specialization of <B>std::char_traits</B>. Similarly, <B>std::iterator_traits</B> provides information about iterators that other templates, particularly algorithms and containers, can put to good use. Even <B>std::numeric_limits</B> gets into the traits act, providing information about the capabilities and behavior of various kinds of numeric types as they&#146;re implemented on your particular platform and compiler.</p>
<p>For more examples, see:</p>
<UL><LI>   Items 30 and 31 on smart pointer members</LI>
<LI>   <I>Exceptional C++</I> <a href="#4">[4]</a> Items 2 and 3, which show how to customize <B>std::char_traits</B> to customize the behavior of <B>std::basic_string</B></LI>
<LI>   The April, May, and June 2000 issues of <I>C++ Report</I>, which contained several excellent columns about traits</LI></UL>

<H4><FONT COLOR="#000080">Requiring Member Functions</FONT></H4>

<p><I>2.  Demonstrate how to detect and make use of template parameters&#146; members, using the following motivating case: you want to write a class template </I><B>C</B><I> that can only be instantiated on types that have a member function named </I><B>Clone()</B><I> that takes no parameters and returns a pointer to the same kind of object.</I></p>

<pre>
// Example 2
//
// T must provide
// T* T::Clone() const
template&lt;typename T&gt;
class C
{
  // ...
};
</pre>

<p><I>Note: it&#146;s obvious that if </I><B>C</B><I> writes code that just tries to invoke </I><B>T::Clone()</B><I> without parameters, then such code will fail to compile if there isn&#146;t a </I><B>T::Clone()</B><I> that can be called without parameters.</I></p>
<p>For an example to illustrate that last note, consider the following:</p>

<pre>
// Example 2(a): Initial attempt,
// sort of requires Clone()
//
// T must provide /*...*/ 
// T::Clone( /*...*/ )
template&lt;typename T&gt;
class C
{
public:
  void SomeFunc( const T* t )
  {
    // ...
    t-&gt;Clone();
    // ...
  }
};
</pre>

<p>The first problem with Example 2(a) is that it doesn&#146;t necessarily require anything at all. In a template, only the member functions that are actually used will be instantiated <a href="#5">[5]</a>. If <B>SomeFunc</B> is never used, it will never be instantiated, so <B>C</B> can easily be instantiated with types <B>T</B> that don&#146;t have anything resembling <B>Clone()</B>.</p>
<p>The solution is to put the code that enforces the requirement into a function that&#146;s sure to be instantiated. Many people put it in the constructor, because it&#146;s impossible to use <B>C</B> without invoking its constructor somewhere, right? (This approach is mentioned, for example, in <a href="#6">[6]</a>.) True enough, but there could be multiple constructors. Then, to be safe, we&#146;d have to put the requirement-enforcing code into every constructor. An easier solution is to put it in the destructor. After all, there&#146;s only one destructor, and it&#146;s unlikely that <B>C</B> will be used without invoking its destructor (by creating a <B>C</B> object dynamically and never deleting it). So, perhaps, the destructor is a somewhat simpler place for the requirement-enforcing code to live:</p>

<pre>
// Example 2(b): Revised attempt, 
// requires Clone()
//
// T must provide /*...*/ 
// T::Clone( /*...*/ )
template&lt;typename T&gt;
class C
{
public:
  ~C()
  {
    // ...
    const T t; // kind of wasteful, 
               // plus also requires
               // that T have a default
               // constructor
    t.Clone();
    // ...
  }
};
</pre>

<p>That&#146;s still not entirely satisfactory. Let&#146;s set this aside for now, but we&#146;ll soon come back and improve this enforcement further, after we&#146;ve done a bit more thinking about it.</p>
<p>This leaves us with the second problem: both Examples 2(a) and 2(b) don&#146;t so much test the constraint as simply rely on it. (In the case of Example 2(b), it&#146;s even worse because 2(b) does it in a wasteful way that adds unnecessary run-time code just to try to enforce a constraint.)</p>
<p><I>But that&#146;s not enough to answer this question, because just trying to call </I><B>T::Clone()</B><I> without parameters would also succeed in calling a </I><B>Clone()</B><I> that has defaulted parameters and/or does not return a </I><B>T*</B><I>.</I></p>
<p>The code in Examples 2(a) and 2(b) will indeed work most swimmingly if there is a function that looks like <B>T* T::Clone()</B>. The problem is that it will also work most swimmingly if there is a function <B>void T::Clone()</B>, or <B>T* T::Clone( int = 42 )</B>, or with some other oddball variant signature, like <B>T* T::Clone( const char* = "xyzzy" )</B>, just as long as it can be called without parameters. (For that matter, it will work even if there isn&#146;t a <B>Clone()</B> member function at all, as long as there&#146;s a macro that changes the name <B>Clone</B> to something else, but there&#146;s little we can do about that.)</p>
<p>All that may be fine in some applications, but it&#146;s not what the question asked for. What we want to achieve is stronger:</p>
<p><I>The goal here is to specifically enforce that </I><B>T</B><I> provide a function that looks exactly like this: </I><B>T* T::Clone() const</B><I>.</I></p>
<p>So here&#146;s one way we can do it:</p>

<pre>
// Example 4-2(c): Better, requires
// exactly T* T::Clone() const
//
// T must provide T* T::Clone() const
template&lt;typename T&gt;
class C
{
public:
  // in C&#146;s destructor (easier than 
  // putting it in every C constructor):
  ~C()
  {
    T* (T::*test)() const = &amp;T::Clone;
    test; // suppress warnings about 
          // unused variables
          // this unused variable is
          // likely to be optimized
          // away entirely

    // ...
  }

  // ...
};
</pre>

<p>Or, a little more cleanly and extensibly:</p>

<pre>
// Example 4-2(d): Alternative way of 
// requiring exactly T* T::Clone() const
//
// T must provide T* T::Clone() const
template&lt;typename T&gt;
class C
{
  bool ValidateRequirements() const
  {
    T* (T::*test)() const = &amp;T::Clone;
    test; // suppress warnings about
          // unused variables
    // ...
    return true;
  }

public:
  // in C&#146;s destructor (easier than
  // putting it in every C constructor):
~C()
  {
    assert( ValidateRequirements() );
  }

  // ...
};
</pre>

<p>Having a <B>ValidateRequirements()</B> function is extensible, for it gives us a nice clean place to add any future requirement checks. Calling it within an <B>assert</B> further ensures that all traces of the requirements machinery will disappear from release builds.</p>

<H4><FONT COLOR="#000080">Constraints Classes</FONT></H4>

<p>There&#146;s an even cleaner way to do it, though. The following technique is publicized by Bjarne Stroustrup in his <I>C++ Style and Technique FAQ</I> <a href="#7">[7]</a>, crediting Alex Stepanov and Jeremy Siek for the use of pointer to function.</p>
<p>Suppose we write the following <B>HasClone</B> constraints class:</p>

<pre>
// Example 4-2(e): Using constraint 
// inheritance to require exactly T*
// T::Clone() const
//

// HasClone requires that T must provide
// T* T::Clone() const
template&lt;typename T&gt;
class HasClone
{
public:
  static void Constraints()
  {
    T* (T::*test)() const = &amp;T::Clone;
    test; // suppress warnings about 
          // unused variables
  }
  HasClone() { void (*p)() = Constraints; }
};
</pre>

<p>Now we have an elegant &#151; dare I say &#147;cool&#148;? &#151; way to enforce the constraint at compile time:</p>

<pre>
template&lt;typename T&gt;
class C : HasClone&lt;T&gt;
{
  // ...
};
</pre>

<p>The idea is simple: every <B>C</B> constructor must invoke the <B>HasClone&lt;T&gt;</B> default constructor, which does nothing but test the constraint. If the constraint test fails, most compilers will emit a fairly readable error message. The <B>HasClone&lt;T&gt;</B> derivation amounts to an assertion about a characteristic of <B>T</B> in a way that&#146;s easy to diagnose.</p>

<H4><FONT COLOR="#000080">Requiring Inheritance, Take 1: IsDerivedFrom1 Value Helper</FONT></H4>

<p><I>3.  A programmer wants to write a template that can require (or just detect) whether the type on which it is instantiated has a </I><B>Clone()</B><I> member function. The programmer decides to do this by requiring that classes offering such a </I><B>Clone()</B><I> must derive from a predetermined </I><B>Cloneable</B><I> base class. Demonstrate how to write the following template:</I></p>

<pre>
template&lt;typename T&gt;
class X
{
  // ...
};
</pre>

<p><I>a) to require that </I><B>T</B><I> be derived from </I><B>Cloneable</B></p>
<p>We&#146;ll take a look at two approaches. Both work. The first approach is a bit tricky and complex; the second is simple and elegant. It&#146;s valuable to consider both approaches because they both demonstrate interesting techniques that are good to know about, even though one technique happens to be more applicable here.</p>
<p>The first approach is based on Andrei Alexandrescu&#146;s ideas in &#147;Mappings Between Types and Values&#148; <a href="#8">[8]</a>. First, we define a helper template that tests whether a candidate type <B>D</B> is derived from <B>B</B>. It determines this by determining whether a pointer to <B>D</B> can be converted to a pointer to <B>B</B>. Here&#146;s one way to do it, similar to Alexandrescu&#146;s approach:</p>

<pre>
// Example 4-3(a): An IsDerivedFrom1 value helper
//
// Advantages: Can be used for compile-time value test
// Drawbacks:  Pretty complex
//
template&lt;typename D, typename B&gt;
class IsDerivedFrom1
{
  class No { };
  class Yes { No no[3]; };

  static Yes Test( B* ); // declared, but not defined
  static No Test( ... ); // declared, but not defined

public:
  enum { Is = sizeof(Test(static_cast&lt;D*&gt;(0))) == sizeof(Yes) };
};
</pre>

<p>Get it? Think about this code for a moment before reading on.</p>
<p>The above trick relies on three things:</p>
<p>1.  <B>Yes</B> and <B>No</B> have different sizes. This is guaranteed by having a <B>Yes</B> contain an array of more than one <B>No</B> object. (And anyway, two negatives sometimes do make a positive. This time it&#146;s not really a <B>No</B> no.)</p>
<p>2.  Overload resolution and determining the value of <B>sizeof</B> are both performed at compile time, not run time.</p>
<p>3.  Enum values are evaluated, and can be used, at compile time.</p>
<p>Let&#146;s analyze the <B>enum</B> definition in more detail. First, the innermost part is:</p>

<pre>
Test(static_cast&lt;D*&gt;(0))
</pre>

<p>All this does is mention a function named <B>Test</B> and pretend to pass it a <B>D*</B> &#151; in this case, a suitably cast null pointer will do. Note that nothing is actually being done here, and no code is being generated, so the pointer is never dereferenced or, for that matter, even ever actually created. All we&#146;re doing is creating a typed expression. Now, the compiler knows what <B>D</B> is and will apply overload resolution at compile time to decide which of the two overloads of <B>Test</B> ought to be chosen: if a <B>D*</B> can be converted to a <B>B*, then Test( B* )</B>, which returns a <B>Yes</B>, would get selected; otherwise, <B>Test( ... )</B>, which returns a <B>No</B>, would get selected.</p>
<p>The obvious next step, then, is to check which overload would get selected:</p>

<pre>
sizeof(Test(static_cast&lt;D*&gt;(0))) == sizeof(Yes)
</pre>

<p>This expression, still evaluated entirely at compile time, will yield <B>1</B> if a <B>D*</B> can be converted to a <B>B*</B>, and <B>0</B> otherwise. That&#146;s pretty much all we want to know, because a <B>D*</B> can be converted to a <B>B*</B> if and only if <B>D</B> is derived from <B>B</B>, or <B>D</B> is the same as <B>B</B> <a href="#9">[9]</a>.</p>
<p>So now that we&#146;ve calculated what we need to know, we just need to store the result someplace. The said &#147;someplace&#148; has to be a place that can be set and the value used, all at compile time. Fortunately, an <B>enum</B> fits the bill nicely:</p>

<pre>
enum { Is = sizeof(Test(static_cast&lt;D*&gt;(0))) == sizeof(Yes) };
</pre>

<p>In this case, for our <B>Cloneable</B> purposes, we don&#146;t care if <B>D</B> and <B>B</B> are the same type. We just want to know whether a <B>D</B> can be used polymorphically as a <B>B</B>, and that&#146;s what&#146;s being tested in <B>IsDerivedFrom1</B>. It&#146;s trivially true that a <B>B</B> can be used as a <B>B</B>.</p>
<p>That&#146;s it. We can now use this facility to help build an answer to the question, to wit:</p>

<pre>
// Example 4-3(a), continued: Using IsDerivedFrom1
// helper to enforce derivation from Cloneable
//
template&lt;typename T&gt;
class X
{
  bool ValidateRequirements() const
  {
    // typedef needed because otherwise the , will be
    // interpreted as delimiting macro parameters to assert
    typedef IsDerivedFrom1&lt;T, Cloneable&gt; Y; 

    // a runtime check, but one that can be turned
    // into a compile-time check without much work
    assert( Y::Is );

    return true;
  }

public:
  // in X's destructor (easier than putting it
  // in every X constructor):
  ~X()
  {
    assert( ValidateRequirements() );
  }

  // ...
};</pre>

<H4><FONT COLOR="#000080">Requiring Inheritance, Take 2: IsDerivedFrom2 Constraints Base Class</FONT></H4>

<p>By now you&#146;ve probably noticed that we could use Stroustrup&#146;s approach to create a functionally equivalent version, which is syntactically nicer:</p>

<pre>
// Example 4-3(b): An IsDerivedFrom2 constraints base class
//
// Advantages: Compile-time evaluation
//             Simpler to use directly
// Drawbacks:  Not directly usable for compile-time value test
//
template&lt;typename D, typename B&gt;
class IsDerivedFrom2
{
  static void Constraints(D* p)
  {
    B* pb = p;
    pb = p; // suppress warnings about unused variables
  }

protected:
  IsDerivedFrom2() { void(*p)(D*) = Constraints; }
};

// Force it to fail in the case where B is void
template&lt;typename D&gt;
class IsDerivedFrom2&lt;D, void&gt;
{
  IsDerivedFrom2() { char* p = (int*)0; /* error */ }
};
</pre>

<p>Now the check is much simpler:</p>

<pre>
// Example 4-3(b), continued: Using IsDerivedFrom2
// constraints base to enforce derivation from Cloneable
//
template&lt;typename T&gt;
class X : IsDerivedFrom2&lt;T,Cloneable&gt;
{
  // ...
};
</pre>

<H4><FONT COLOR="#000080">Requiring Inheritance, Take 3: A Merged IsDerivedFrom</FONT></H4>

<p>The main advantage of <B>IsDerivedFrom1</B> over <B>IsDerivedFrom2</B> is that <B>IsDerivedFrom1</B> provides an <B>enum</B> value that&#146;s generated, and can be tested, at compile time. This isn&#146;t important to the class <B>X</B> example shown here, but it will be important in the following section, when we want to switch on just such a value to select different traits implementations at compile time. On the other hand, <B>IsDerivedFrom2</B> provides significant ease of use for the common case, when we just need to place a requirement on a template parameter to ensure some facility will exist, but without doing anything fancy, such as selecting from among alternative implementations. We could just provide both versions, but the duplicated and similar functionality is a problem, especially for naming. We can&#146;t do much better to distinguish them than we have done, namely by tacking on some wart to make the names different, so that users would always have to remember whether they wanted <B>IsDerivedFrom1</B> or <B>IsDerivedFrom2</B>. That&#146;s ugly.</p>
<p>Why not have our cake and eat it, too? Let&#146;s just merge the two approaches:</p>

<pre>
// Example 4-3(c): An IsDerivedFrom constraints base
// with testable value
//
template&lt;typename D, typename B&gt;
class IsDerivedFrom
{
  class No { };
  class Yes { No no[3]; };

  static Yes Test( B* ); // not defined
  static No Test( ... ); // not defined

  static void Constraints(D* p) { B* pb = p; pb = p; }

public:
  enum { Is = sizeof(Test(static_cast&lt;D*&gt;(0))) == sizeof(Yes) };

  IsDerivedFrom() { void(*p)(D*) = Constraints; }
};
</pre>

<H4><FONT COLOR="#000080">Selecting Alternative Implementations</FONT></H4>

<p>The solutions in 3(a) are nice and all, and they&#146;ll make sure <B>T</B> must be a <B>Cloneable</B>. But what if <B>T</B> isn&#146;t a <B>Cloneable</B>? What if there was some alternative action we could take? Perhaps we could make things even more flexible &#151; which brings us to the second part of the question.</p>
<p><I>b) ... provide an alternative implementation if </I><B>T</B><I> is derived from </I><B>Cloneable</B><I>, and work in some default mode otherwise.</I></p>
<p>To do this, we introduce the proverbial &#147;extra level of indirection&#148; that solves many computing problems. In this case, the extra level of indirection takes the form of a helper template: <B>X</B> will use <B>IsDerivedFrom</B> from Example 4-3(c) and use partial specialization of the helper to switch between &#147;is-<B>Cloneable</B>&#148; and &#147;isn&#146;t-<B>Cloneable</B>&#148; implementations. (Note that this requires the compile-time testable value from <B>IsDerivedFrom1</B>, also incorporated into <B>IsDerivedFrom</B>, so that we have something we can test in order to switch among different implementations.)</p>

<pre>
// Example 4-3(d): Using IsDerivedFrom to make use of
// derivation from Cloneable if available, and do
// something else otherwise.
//
template&lt;typename T, int&gt;
class XImpl
{
  // general case: T is not derived from Cloneable
};

template&lt;typename T&gt;
class XImpl&lt;T, 1&gt;
{
  // T is derived from Cloneable
};

template&lt;typename T&gt;
class X
{
  XImpl&lt;T, IsDerivedFrom&lt;T, Cloneable&gt;::Is&gt; impl_;
  // ... delegates to impl_ ...
};
</pre>

<p>Do you see how this works? Let&#146;s work through it with a quick example:</p>

<pre>
class MyCloneable : public Cloneable { /*...*/ };

X&lt;MyCloneable&gt; x1;
</pre>

<p>X&lt;T&gt;</B>&#146;s <B>impl_</B> has type:</p>

<pre>
XImpl&lt;T, IsDerivedFrom&lt;T, Cloneable&gt;::Is&gt;
</pre>

<p>In this case, <B>T</B> is <B>MyCloneable</B>, and so <B>X&lt;MyCloneable&gt;</B>&#146;s <B>impl_</B> has type:</p>

<pre>
XImpl&lt;MyCloneable, IsDerivedFrom&lt;MyCloneable, Cloneable&gt;::Is&gt;
</pre>

<p>which evaluates to</p>

<pre>
XImpl&lt;MyCloneable, 1&gt;
</pre>

<p>which uses the specialization of <B>XImpl</B> that makes use of the fact that <B>MyCloneable</B> is derived from <B>Cloneable</B>. But what if we instantiate <B>X</B> with some other type? Consider:</p>

<pre>
X&lt;int&gt; x2;
</pre>

<p>Now <B>T</B> is <B>int</B>, and so <B>X&lt;int&gt;</B>&#146;s <B>impl_</B> has type</p>

<pre>
XImpl&lt;MyCloneable, IsDerivedFrom&lt;int, Cloneable&gt;::Is&gt;
</pre>

<p>which evaluates to</p>

<pre>
XImpl&lt;MyCloneable, 0&gt;
</pre>

<p>which uses the unspecialized <B>XImpl</B>. Nifty, isn&#146;t it? It&#146;s not even hard to use, once written. From the user&#146;s point of view, the complexity is hidden inside <B>X</B>. From the point of view of <B>X</B>&#146;s author, it&#146;s just a matter of directly reusing the machinery already encapsulated in <B>IsDerivedFrom</B>, without needing to understand how the magic works.</p>
<p>Note that we&#146;re not proliferating template instantiations. Exactly one <B>XImpl&lt;T,...&gt;</B> will ever be instantiated for any given <B>T</B>, either <B>XImpl&lt;T,0&gt;</B> or <B>XImpl&lt;T,1&gt;</B>. Although <B>XImpl</B>&#146;s second parameter could theoretically take any integer value, we&#146;ve set things up here so that the integer can only ever be <B>0</B> or <B>1</B>. (In that case, why not use a <B>bool</B> instead of an <B>int</B>? The answer is, for extensibility: it doesn&#146;t hurt to use an <B>int</B>, and doing so allows additional alternative implementations to be added easily in the future as needed &#151; for example, if we later want to add support for another hierarchy that has a <B>Cloneable</B>-like base class with a different interface.)</p>

<H4><FONT COLOR="#000080">Requirements versus Traits</FONT></H4>

<p><I>4. Is the approach in #3 the best way to require/detect the availability of a </I><B>Clone()</B><I>? Describe alternatives.</I></p>
<p>The approach in Question #3 is nifty, but I tend to like traits better in many cases &#151; they&#146;re about as simple (except when they have to be specialized for every class in a hierarchy), and they&#146;re more extensible as shown in Items 30 and 31.</p>
<p>The idea is to create a traits template whose sole purpose in life, in this case, is to implement a <B>Clone</B> operation. The traits template looks a lot like <B>XImpl</B>, in that there&#146;ll be a general-purpose unspecialized version that does something general-purpose, as well as possibly multiple specialized versions that deal with classes that provide better or just different ways of cloning.</p>

<pre>
// Example 4-4: Using traits instead of 
// IsDerivedFrom to make use of 
// Cloneability if available, and do
// something else otherwise. Requires
// writing a specialization for each 
// Cloneable class.
//
template&lt;typename T&gt;
class XTraits
{
public:
  // general case: use copy constructor
  static T* Clone( const T* p ) { return new T( *p ); }
};

template&lt;&gt;
class XTraits&lt;MyCloneable&gt;
{
public:
  // MyCloneable is derived from 
  // Cloneable, so use Clone()
  static MyCloneable* Clone( const MyCloneable* p )
  {
    return p-&gt;Clone();
  }
};

// ... etc. for every class derived from
// Cloneable
</pre>

<p><B>X&lt;T&gt;</B> then simply calls <B>XTraits&lt;T&gt;::Clone()</B> where appropriate, and it will do the right thing.</p>
<p>The main difference between traits and the plain old <B>XImpl</B> shown in Example 4-3(b) is that, with traits, when the user defines some new type, the most work that has to be done to use it with <B>X</B> is external to <B>X</B> &#151; just specialize the traits template to &#147;do the right thing&#148; for the new type. That&#146;s more extensible than the relatively hard-wired approach in #3 above, which does all the selection inside the implementation of <B>XImpl</B> instead of opening it up for extensibility. It also allows for other cloning methods, not just a function specifically named <B>Clone()</B> that is inherited from a specifically named base class, and this too provides extra flexibility.</p>
<p>For more details, including a longer sample implementation of traits for a very similar example, see <I>More Exceptional C++</I> <a href="#1">[1]</a> Item 31, Examples 31-2(d) and 31-2(e).</p>
<p>Note: the main drawback of the traits approach above is that it requires individual specializations for every class in a hierarchy. There are ways to provide traits for a whole hierarchy of classes at a time, instead of tediously writing lots of specializations. See <a href="#10">[10]</a>, which describes a nifty technique to do just this. Alexandrescu&#146;s technique requires minor surgery on the base class of the outside class hierarchy &#151; in this case, <B>Cloneable</B>.</p>

<H3><FONT COLOR="#000080">Inheritance versus Traits</FONT></H3>

<p><I>5. How useful is it for a template to know that its parameter type </I><B>T</B><I> is derived from some other type? Does knowing about such derivation give any benefit that couldn&#146;t also be achieved without the inheritance relationship?</I></p>
<p>There is little extra benefit a template can gain from knowing that one of its template parameters is derived from some given base class that it couldn&#146;t gain more extensibly via traits. The only real drawback to using traits is that traits can require writing lots of specializations to handle many classes in a big hierarchy, but there are techniques that mitigate or eliminate this drawback.</p>
<p>A principal motivator for this Item was to demonstrate that &#147;using inheritance for categorization in templates&#148; is perhaps not as necessary a reason to use inheritance as some have thought. Traits provide a more general mechanism that&#146;s more extensible when it comes time to instantiate an existing template on new types &#151; such as types that come from a third-party library &#151; that may not be easy to derive from a foreordained base class.</p>

<H3><FONT COLOR="#000080">References and Notes</FONT></H3>
<p><a name="1"></a>[1]  H. Sutter. <I>More Exceptional C++</I> (Addison-Wesley, 2002).</p>
<p><a name="2"></a>[2]  ISO/IEC 14882:1998(E), Programming Languages-C++ (ISO and ANSI C++ Standard).</p>
<p><a name="3"></a>[3]  Here <I>encapsulates</I> is used in the sense of bringing together in one place, rather than hiding behind a shell. It&#146;s common for everything in traits classes to be public, and indeed they are typically implemented as <B>struct</B> templates.</p>
<p><a name="4"></a>[4]  H. Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</p>
<p><a name="5"></a>[5]  Eventually, all compilers will get this rule right. Yours might still instantiate all functions, not just the ones that are used.</p>
<p><a name="6"></a>[6]  B. Stroustrup. <I>The Design and Evolution of C++</I>, section 15.4.2 (Addison-Wesley, 1994).</p>
<p><a name="7"></a>[7]  B. Stroustrup. <I>C++ Style and Technique FAQ</I>. Available online at &lt;www.gotw.ca/publications/mxc++/bs_constraints.htm&gt;.</p>
<p><a name="8"></a>[8]  A. Alexandrescu. &#147;Mappings between Types and Values,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, October 2000. Available online at &lt;www.gotw.ca/publications/mxc++/aa_mappings.htm&gt;.</p>
<p><a name="9"></a>[9]  Or <B>B</B> happens to be <B>void</B>.</p>
<p><a name="10"></a>[10]  A. Alexandrescu. &#147;Traits on Steroids,&#148; <I>C++ Report</I>, June 2000. </p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I> (available summer 2001). Herb is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
