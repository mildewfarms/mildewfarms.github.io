<HTML>   
     <HEAD>
<TITLE>August 2002/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: C++ Template Metaprogramming</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>The C++ template metaprogramming primer you've been waiting for.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>OK, OK, I know what you&#146;re thinking. You&#146;re thinking, he&#146;s done with his pass through the STL, he&#146;s written about traits and policies, now he needs to write about more topics in generic programming in general, and he can&#146;t think of anything that a real software engineer would be interested in. Template metaprogramming. Who has ever heard of such a thing, and why would I even care. He&#146;s just desperate for things to write about. Not so. The fact of the matter is that many of the nifty techniques that you encounter in the Boost library <a href="#1">[1]</a>, in Andrei Alexandrescu&#146;s book and his Loki library <a href="#2">[2]</a>, and in other places where people share cutting-edge C++ programming techniques, are really examples of template metaprogramming. Once you&#146;ve taken a step back and looked at template metaprogramming from a conceptual point of view, you will find it much easier to understand things such as compile-time lists, type traits, and the like. Right now, it may seem to you that stuff like that is just for C++ geeks who don&#146;t have anything better to do than play with a bunch of obscure C++ template features. My hunch is that these ideas will enter the mainstream of C++ programming sooner than many people think. It is true that at first you are more likely to use libraries that employ these techniques than to use them in the code that you yourself write. But then, in my experience, libraries tend to be 50-percent code reuse and 50-percent inspiration to write my own code in a certain way. And even if you steadfastly refuse to ever write anything that even remotely resembles template metaprogramming, what if you&#146;re asked to work with someone else&#146;s code that uses these techniques? In short, as a professional C++ developer, you simply cannot afford to be clueless about template metaprogramming and the ideas that have sprung from it.</p>
<p>Before I tell you what template metaprogramming is, I need to mention the fact that this is not really a feature that was intentionally built into the C++ language. Templates were added to C++ for all the good reasons that you&#146;ve read about in your introductory books (e.g., to be able to write container classes without having to specify the type of element that goes into the container). It wasn&#146;t until after the fact that people noticed that there was much more to C++ templates than anybody had thought <a href="#3">[3]</a>. An excellent introduction to template metaprogramming can be found in Chapter 10 of Czarnecki&#146;s and Eisenecker&#146;s book on generative programming <a href="#4">[4]</a>.</p>
<p>Another thing I need to address (once again) before I can get to the point of this column is the subject of Microsoft&#146;s support of C++ template features. Microsoft&#146;s Visual C++ 6.0 compiler supports neither template template parameters <a href="#5">[5]</a> nor partial template specialization, and the first .NET release is no improvement in this respect. However, for the first time since I started this column, I have the pleasure to report that this extremely annoying situation is going to change in the near future <a href="#6">[6]</a>. In previous columns, I have always gone out of my way to present only examples that do not use partial template specialization in order to keep VC++ users from deserting me. In the second part of this column, I will be using partial template specialization for the first time. If I didn&#146;t, I would be withholding some of the most important, interesting, and exciting techniques in C++ template programming. I urge you to read on, though, even if your compiler currently cannot handle the examples. You don&#146;t want to fall behind on your professional expertise just because of temporary limitations imposed by someone&#146;s tool.</p>

<H3><FONT COLOR="#000080">Template Metaprogramming with Integers</FONT></H3>

<p>So what&#146;s a C++ template metaprogram? It&#146;s a program that is executed by the C++ compiler when it compiles your &#147;real&#148; program. The input to the metaprogram is in the C++ code that you write, and its output is injected into that code. But how exactly is it done, and how do templates figure into all this? The best answer to that question is to look at an example. To emphasize the point that a C++ template metaprogram is a real program, I&#146;ll use the one example that every teacher of programming languages has always used as the first example of a program, namely, the calculation of the factorial of a natural number.</p>
<p>Recall that the factorial of a non-zero natural number <B>n</B> is defined as:</p>

<pre>
n! = 1 * 2 * ... * (n-1) * n
</pre>

<p>and <B>0!</B> is defined to be <B>1</B>. In C++, the factorial can therefore be computed as follows:</p>

<pre>
int cpp_factorial(int n)
{
  assert(0 &lt;= n);
  int fact = 1;
  for(int i=1; i&lt;=n; ++i) {
    fact *= i;
  }
  return fact;
}
</pre>

<p>Alternatively, the factorial can be computed using recursion:</p>

<pre>
int cpp_r_factorial(int n)
{
  assert(0 &lt;= n);
  if( 0 == n )
    return 1;
  return n * cpp_r_factorial(n-1);
}
</pre>

<p>Because of its simplicity, this is a favorite example for teachers and authors to demonstrate recursive programming. Notice, however, that the factorial is also the standard example of a function where the use of recursion is possible, but rather ill advised. The time required for calculating the factorial of <B>n</B> increases linearly with <B>n</B> in both the recursive and the non-recursive version. The space required for the calculation, however, is constant in the non-recursive version and linear in the recursive version, which makes the recursive version an extremely poor choice. There are other algorithms, such as the traversal of trees without child-to-parent node back pointers, where the space consumption required by a recursive implementation is unavoidable, even in non-recursive versions. In those cases, the simplicity and elegance of the recursive implementation usually makes it the preferred choice.</p>
<p>All that being said, let us now look at the factorial as a C++ template metaprogram. Here&#146;s how it&#146;s done:</p>

<pre>
template&lt;int n&gt;
class META_FACTORIAL
{
public:
  enum{
    RET = n * META_FACTORIAL&lt;n-1&gt;::RET
  };
};

template&lt;&gt;
class META_FACTORIAL&lt;0&gt;
{
public:
  enum{ RET = 1 };
};

int main()
{
  std::cout &lt;&lt; META_FACTORIAL&lt;5&gt;::RET
            &lt;&lt; std::flush;
  return 0;
}
</pre>

<p>This program will output <B>120</B>, which is the factorial of <B>5</B>. So what&#146;s going on here? First of all, notice that <B>META_FACTORIAL</B> is a class template that takes a template argument of type <B>int</B>. We&#146;re all accustomed to seeing template parameters that are types, as in:</p>

<pre>
template&lt;typename T&gt;
class X{ /* ... */ };
</pre>

<p>but sometimes we have to remember that C++ allows template arguments that are values (integers in our case) and not types. The other thing to notice here is that the definition of the class template <B>META_FACTORIAL</B> contains a nested occurrence of <B>META_FACTORIAL</B> itself, namely, the expression:</p>

<pre>
META_FACTORIAL&lt;n-1&gt;::RET
</pre>

<p>When the compiler instantiates <B>META_FACTORIAL</B> with the template argument <B>5</B> in our <B>main</B> function, this nesting triggers a compile-time recursion. Regardless of implementation details, every C++ compiler conceptually has a template instantiation stack. When the expression:</p>

<pre>
META_FACTORIAL&lt;n-1&gt;::RET
</pre>

<p>is encountered during the processing of <B>META_FACTORIAL&lt;5&gt;</B>, the compiler pushes whatever it has so far for <B>META_FACTORIAL&lt;5&gt;</B> on that stack and begins instantiation of <B>META_FACTORIAL</B> with the template argument set to <B>4</B>. This is repeated until <B>META_FACTORIAL&lt;0&gt;</B> is encountered, for which we have provided an explicit specialization. In this specialization, the <B>enum</B> value of <B>RET</B> is set to <B>1</B>. This enables the compiler to resume processing <B>META_FACTORIAL&lt;1&gt;</B>, <B>META_FACTORIAL&lt;2&gt;</B>, and so on, popping things off its template instantiation stack up to the top level of <B>META_FACTORIAL&lt;5&gt;</B>. In the process, the <B>enum</B> values of <B>RET</B> in the various instantiations of <B>META_FACTORIAL</B> are set to <B>1</B>, <B>2</B>, <B>6</B>, <B>24</B>, and <B>120</B>, respectively. In the end, the compiler has recursively calculated <B>5!</B>.</p>
<p>The remarkable thing here is that in the final compiled code no trace remains of the compile-time calculation. If you want to spend a few minutes on a real eye-opener, compile and run the code above, then add the line:</p>

<pre>
std::cout &lt;&lt; 120 &lt;&lt; std::flush;
</pre>

<p>to your <B>main</B> function. Look at the executable code that your compiler generates. You will see that the two lines:</p>

<pre>
std::cout &lt;&lt; META_FACTORIAL&lt;5&gt;::RET &lt;&lt; std::flush;
std::cout &lt;&lt; 120 &lt;&lt; std::flush;
</pre>

<p>have produced the exact same machine code. Our factorial program has been executed entirely at compile time, and its output has been injected into the C++ code that was then translated into machine code.</p>
<p>So, as you can see, it&#146;s not too hard to understand how our metaprogram gets executed at compile time. What makes C++ compile-time programs often a little hard to comprehend is that the language they are written in is so different from what we expect a programming language to look like. For easier reference, let us call this language MetaC++. (I just made this up; it is not an established technical term.) Let us look at our factorial metaprogram again and see what MetaC++ language constructs we have used. MetaC++ functions are C++ class templates. Our <B>META_FACTORIAL</B> is a MetaC++ function. MetaC++ functions receive their arguments via template parameters. In our case, there is just one argument, an integer. A MetaC++ function does not formally have a return value, which seems odd at first. The return value of our <B>META_FACTORIAL</B> is a public <B>enum</B> value, which I have conveniently named <B>RET</B>. Obviously, a C++ class template can have more than one public <B>enum</B> value, and it can have other public things that can be retrieved at compile time, such as <B>typedef</B>s. The totality of all such public items can be viewed as the &#147;return value&#148; of a MetaC++ function. Thus, MetaC++, for all its clunkiness, has one major advantage over most conventional programming languages: you never have to worry about how to go about returning several items. The old shall-I-package-the-return-values-in-a-structure-or-use-reference-arguments headache has just disappeared.</p>
<p>MetaC++ functions can be called recursively, and that is how we have implemented the loop construct of the original C++ implementation <B>cpp_factorial</B>. Recursion is, in fact, the only way to do loops in MetaC++, which automatically makes it an inefficient language. As I said earlier, the factorial is the standard example of a loop that should not be implemented recursively because of space inefficiency. But then, in practice, efficiency is not usually a major concern in C++ compile-time programming.</p>
<p>Finally, our factorial metaprogram demonstrates a way to express an if-construct in MetaC++, namely the explicit specialization of meta_factorial for the argument value <B>0</B>. This explicit specialization amounts to a MetaC++ implementation of the equivalent C++ lines:</p>

<pre>
if( 0 == n )
  return 1;
</pre>

<p>Under certain circumstances, MetaC++ also allows the conditional operator <B>?:</B> to express an if-construct. I&#146;ll come back to that at the end of this column.</p>
<p>I said before that C++ template metaprogramming is not just for geeks, but gives rise to important programming techniques. Now what&#146;s so important about being able to calculate a factorial at compile time? Nothing much, I&#146;ll have to admit. There are possible applications of compile-time calculations with natural numbers and integers, such as the calculation of hash values at compile time, but it would require quite a stretch of the imagination to call that mainstream C++ programming. The real relevance of C++ template metaprogramming lies in the fact that it can operate not only on integers, but also on types <a href="#7">[7]</a>.</p>

<H3><FONT COLOR="#000080">Template Metaprogramming with Types</FONT></H3>

<p>Recall that functions in the meta-language MetaC++ are C++ class templates. These MetaC++ functions take their arguments via template parameters, and they can return anything that can be retrieved from the class template at compile time. Our MetaC++ function <B>META_FACTORIAL</B> above took one argument, an <B>int</B>, and it returned an <B>int</B> via a public <B>enum</B> value. But C++ class templates can have parameters that are types, and we can retrieve <B>typedef</B>s from a class template at compile time. Therefore, MetaC++ functions can take types as arguments and return types. Those are the ones that are most useful in real-life C++ programming. Here&#146;s an example that is simple but important and useful nonetheless. It is a MetaC++ function that solves the reference-to-reference problem, which I mentioned in my last column in connection with STL function object adapters. The following class template illustrates the essence of the reference-to-reference problem:</p>

<pre>
template&lt;typename T&gt;
class R2RProblem
{
  typedef typename T::SomeType S;
public:
  void Foo(S&amp; anS)
  { /* modify anS */ }
};
</pre>

<p>This class template has a member function <B>Foo</B> that takes an argument of type <B>S</B> by reference. The type <B>S</B> is given indirectly as a <B>typedef</B> that comes out of the template parameter <B>T</B>. For example, suppose we have a class <B>SomeClass</B> that looks like this:</p>

<pre>
class SomeClass
{
public:
  typedef int SomeType;
};
</pre>

<p>Then if we use <B>SomeClass</B> as the template argument for <B>R2RProblem</B>, as in:</p>

<pre>
R2RProblem&lt;SomeClass&gt; x;
</pre>

<p>then <B>R2RProblem::Foo</B> gets the signature:</p>

<pre>
void R2RProblem::Foo(int&amp;);
</pre>

<p>The reference-to-reference problem occurs when <B>SomeType</B> is a reference type, as in:</p>

<pre>
class SomeOtherClass
{
public:
  typedef int&amp; SomeType;
};
</pre>

<p>Now if we try to instantiate the class template <B>R2RProblem</B> with <B>SomeOtherClass</B> as the template argument, as in:</p>

<pre>
R2RProblem&lt;SomeOtherClass&gt; x;
</pre>

<p>then <B>Foo</B> ends up having the signature:</p>

<pre>
void R2RProblem::Foo(int&amp;&amp;);
</pre>

<p>which the compiler will reject as an illegal reference to reference. In order to fix this, we want to change the original declaration of <B>Foo</B> from:</p>

<pre>
void Foo(S&amp; anS)
</pre>

<p>to something like:</p>

<pre>
void Foo(META_REF(S) anS);
</pre>

<p>where <B>META_REF</B> is a compile-time function that takes a type as its argument, returns a type, and behaves as indicated by the following pseudo-code:</p>

<pre>
META_REF(S)
{
  if( S is a reference type )
    return S;
  return S&amp;;
}
</pre>

<p>Since we already know how to express the if-construct in our C++ compile-time metalanguage MetaC++ using specialization, implementing <B>META_REF</B> in MetaC++ is now a cinch:</p>

<pre>
template&lt;typename S&gt;
class META_REF
{
public:
  typedef S&amp; RET;
};

template&lt;typename U&gt;
class META_REF&lt;U&amp;&gt;
{
public:
  typedef U&amp; RET;
};
</pre>

<p>If we now declare <B>Foo</B> as:</p>

<pre>
void Foo(typename META_REF&lt;S&gt;::RET anS);
</pre>

<p>then the class <B>R2RProblem</B> does not deserve its name anymore. If <B>S</B> is a non-reference type, then the default implementation of <B>META_REF</B> applies, and <B>META_REF&lt;S&gt;::RET</B> is <B>S&amp;</B>. If <B>S</B> is a reference type, say <B>U&amp;</B>, then the partial specialization of <B>META_REF</B> kicks in, and <B>META_REF&lt;S&gt;::RET</B> is <B>U&amp;</B> (i.e., it is <B>S</B> itself). In other words, for non-reference types <B>S</B>, we have slapped a reference on <B>S</B>, but for reference types <B>S</B>, we have done nothing, thus avoiding the second reference that caused the problem before.</p>
<p>Make sure you understand this example thoroughly. Understand what it does, and understand that we are looking at a compile-time function that takes a type as its argument, returns a type, and has an if-construct inside. You are now set to enter a whole new world of cutting-edge C++ programming. If you look at Boost&#146;s <B>call_traits</B> <a href="#8">[8]</a> or Andrei Alexandrescu&#146;s <B>type_traits</B> (Section 2.10. of <a href="#2">[2]</a>), you&#146;ll find many MetaC++ functions that are similar to the example above. But that is only the beginning. Andrei Alexandrescu&#146;s book <a href="#2">[2]</a> will take you to a veritable wonderland of C++ template metaprogramming.</p>

<H3><FONT COLOR="#000080">Template Metaprogramming and Laziness</FONT></H3>

<p>I said earlier that it is sometimes possible to use the conditional operator <B>?:</B> to express the if-construct in MetaC++. Here&#146;s a silly example:</p>

<pre>
template&lt;int n&gt;
class SILLY
{
public:
  enum{
    RET = n&gt;0 ? 42 : 43
  };
};
</pre>

<p>This is a metafunction taking an integer argument that &#147;returns&#148; <B>42</B> when its argument is positive, and <B>43</B> otherwise. Let us now take another look at <B>cpp_r_factorial</B>, the recursive version of the C++ implementation of the factorial. It is entirely possible to rewrite that function using the conditional operator <B>?:</B>, like this:</p>

<pre>
int cpp_r_factorial_alt(int n)
{
  assert(0 &lt;= n);
  return 0 == n ?
    1 : n * cpp_r_factorial_alt(n-1);
}
</pre>

<p>Therefore, you may be tempted to do the same for the metafunction <B>META_FACTORIAL</B>, replacing the explicit specialization gimmick with operator <B>?:</B>, like this:</p>

<pre>
template&lt;int n&gt;
class BAD_META_FACTORIAL
{
public:
  enum{
     RET = n==0 ?
     1 : n * BAD_META_FACTORIAL&lt;n-1&gt;::RET
  };
};
</pre>

<p>This will, perhaps somewhat surprisingly to you, cause an infinite recursion. The compiler will instantiate <B>BAD_META_FACTORIAL&lt;n&gt;</B> for infinitely descending <B>n</B>, until the limit on the template nesting depth puts it out of its misery <a href="#9">[9]</a>. Why is it that in the run-time version <B>cpp_r_factorial</B> the use of operator <B>?:</B> does not cause an infinite recursion, and here it does? The answer lies in the subtleties of lazy evaluation. The C++ Standard requires that at run time all logical and conditional expressions are evaluated lazily (from left to right if applicable). For example, suppose you have a <B>boolean</B> variable <B>cond</B> and a function <B>foo</B> returning a <B>bool</B>. Assume further that the if-condition:</p>

<pre>
if(cond &amp;&amp; foo())
</pre>

<p>is encountered at run time, and the current value of <B>cond</B> is false. Lazy evaluation, as required by the Standard, guarantees that in this situation <B>foo</B> will not be called. The same applies to operator <B>?:</B>. If the expression:</p>

<pre>
x ? y : z;
</pre>

<p>is encountered and <B>x</B> evaluates to true, then only <B>y</B> but not <B>z</B> will be evaluated, and vice versa.</p>
<p>But all this applies to evaluation at run time. When the <B>enum</B> value:</p>

<pre>
RET = n==0 ? 1 : 
  n * BAD_META_FACTORIAL&lt;n-1&gt;::RET
</pre>

<p>in the class <B>BAD_META_FACTORIAL</B> above is encountered at compile time, the compiler does instantiate <B>BAD_META_FACTORIAL&lt;n-1&gt;</B> regardless of whether <B>n</B> equals zero or not. C++ template instantiation works quite lazily in several other respects. (I&#146;ll come back to that in my next column.) However, there is no such thing as lazy evaluation of logical and conditional expressions at compile time. If your template metaprogram causes an infinite recursion at compile time, the explanation is most likely that you have intuitively relied on lazy evaluation when you shouldn&#146;t have <a href="#10">[10]</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  &lt;www.boost.org&gt;</p>
<p><a name="2"></a>[2]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>
<p><a name="3"></a>[3]  If there is one person who is to be credited with the discovery of C++ template metaprogramming, then I believe it would have to be Erwin Unruh, who in 1994 wrote a metaprogram that calculated prime numbers at compile time and printed them out as compiler warnings.</p>
<p><a name="4"></a>[4]  Krzystof Czarnecki and Ulrich W. Eisenecker. <I>Generative Programming, Methods, Tools, and Applications</I> (Addison-Wesley, 2000).</p>
<p><a name="5"></a>[5]  For an explanation of template template parameters and partial template specialization, see my February 2002 column, &#147;STL &amp; Generic Programming: Policy-Driven Design,&#148; and my December 2001 column, &#147;STL &amp; Generic Programming: Traits Classes,&#148; in <I>C/C++ Users Journal</I>, respectively.</p>
<p><a name="6"></a>[6]  I occasionally meet people who avoid C++ templates and the generic programming techniques that they are used for. Their argument is, &#147;If Microsoft doesn&#146;t think it is important, why would I?&#148; If you are one of those people, your world has just changed: &lt;www.gotw.ca/microsoft&gt;.</p>
<p><a name="7"></a>[7]  From a purely theoretical and academic point of view, using integers in template metaprogramming is of course more important than using types. It can be shown that template metaprogramming with just integers is a Turing-complete language. Again, I believe it was Erwin Unruh who first presented a back-of-the-envelope proof of this fact. If you are interested in these more theoretical aspects of programming, Hopcroft and Ullman&#146;s <I>Introduction to Automata Theory, Languages, and Computation</I> (Addison-Wesley, 2000) is a good place to start.</p>
<p><a name="8"></a>[8]  &lt;www.boost.org/libs/utility/call_traits.htm&gt;</p>
<p><a name="9"></a>[9]  The Standard requires a template nesting depth of at least 17, but the actual value is compiler-dependent. Some compilers allow you to set it via an option.</p>
<p><a name="10"></a>[10]  On some compilers, infinite template recursion generates some of the most entertainingly bizarre error messages. Check out &lt;www.bdsoft.com/tools/stlfilt.html&gt; to help you improve your compiler&#146;s template-related error messages. </p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, Lake Tahoe. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

</blockquote></body></html>
