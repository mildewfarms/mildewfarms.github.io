<HTML><HEAD>
<TITLE>August 2002/Using Constructed Types in C++ Unions/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A working example of the idiom</A></h4>
<pre>
#include "stdafx.h"
#pragma warning( disable : 4786 )  
#include &lt;list&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;

#define max(a,b) (a)&gt;(b)?(a):(b)

typedef list&lt;int&gt; LIST;
typedef string STRING;

struct MYUNION {
    MYUNION() : currtype( NONE ) {}
    ~MYUNION() {cleanup();}

    enum uniontype {NONE,_INT,_LIST,_STRING}; 
    uniontype currtype; 

    inline int&amp; getint();
    inline LIST&amp; getlist();
    inline STRING&amp; getstring();

protected:
    union {
        int i;
        unsigned char buff[max(sizeof(LIST),sizeof(STRING))];
    } U; 
    
    void cleanup();
}; 

inline int&amp; MYUNION::getint()
{
    if( currtype==_INT ) {
        return U.i;
    } else {
        cleanup();
        currtype=_INT;
        return U.i; 
    } // else
}

inline LIST&amp; MYUNION::getlist()
{
    if( currtype==_LIST ) {
        return *(reinterpret_cast&lt;LIST*&gt;(U.buff));
    } else {
        cleanup();
        LIST* ptype = new(U.buff) LIST();
        currtype=_LIST; 
        return *ptype; 
    } // else
}

inline STRING&amp; MYUNION::getstring()
{
    if( currtype==_STRING) {
        return *(reinterpret_cast&lt;STRING*&gt;(U.buff));
    } else {
        cleanup();
        STRING* ptype = new(U.buff) STRING();
        currtype=_STRING; 
        return *ptype; 
    } // else
}

void MYUNION::cleanup()
{
    switch( currtype ) {
        case _LIST: {
            LIST&amp; ptype = getlist();
            ptype.~LIST();
            break; 
        } // case
        case _STRING: {
            STRING&amp; ptype = getstring();
            ptype.~STRING();
            break;
        } // case
        default: break;
    } // switch
    currtype=NONE;
}

int main(int argc, char* argv[])
{
    cout &lt;&lt; "sizeof(int)="       &lt;&lt; sizeof(int)     &lt;&lt; endl;
    cout &lt;&lt; "sizeof(LIST)="    &lt;&lt; sizeof(LIST)    &lt;&lt; endl;
    cout &lt;&lt; "sizeof(STRING)="  &lt;&lt; sizeof(STRING)  &lt;&lt; endl;
    cout &lt;&lt; "sizeof(MYUNION)=" &lt;&lt; sizeof(MYUNION) &lt;&lt; endl;

    MYUNION u; 

    // access union as integer
    u.getint() = 12345;
    cout &lt;&lt; "int=" &lt;&lt; u.getint() &lt;&lt; endl;

    // access union as std::list
    LIST&amp; list = u.getlist();
    list.push_back(5);
    list.push_back(10);
    list.push_back(15);

    LIST::iterator it = list.begin();
    while( it != list.end() ) {
        cout &lt;&lt; "list item=" &lt;&lt; *(it) &lt;&lt; endl;
        it++; 
    } // while

    // access union as std::string
    STRING&amp; str = u.getstring();
    str = "Hello world!";

    cout &lt;&lt; "string='" &lt;&lt; str.c_str() &lt;&lt; "'" &lt;&lt; endl;

    return 0;
}
&#151; End of Listing &#151;</pre></body></html>
