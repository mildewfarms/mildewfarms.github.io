<HTML>   
     <HEAD>
<TITLE>August 2002/Using Constructed Types in C++ Unions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Using Constructed Types in C++ Unions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kevin T. Manley</FONT></H3>

<BLOCKQUOTE>
<p>Toward a more perfect union.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>The C++ Standard states that a <B>union</B> type cannot have a member with a non-trivial constructor or destructor. While at first this seems unreasonable, further thought makes it clear why this is the case:</p>

<pre>
class A { A() {}};
class B { B() {} };
union U { A a; B b; };
U u; // which constructor should be 
     // called? a::A() or b::B()?
</pre>

<p>The crux of the problem is that unions don&#146;t have built-in semantics for denoting when a member is the &#147;current&#148; member of the union. Therefore, the compiler can&#146;t know when it&#146;s appropriate to call constructors or destructors on the union members.</p>
<p>Still, there are good reasons for wanting to use constructed object types in a union. For example, you might want to implement a scripting language with a single variable type that can either be an integer, a string, or a list. A union is the perfect candidate for implementing such a composite type, but the restriction on constructed union members may prevent you from using an existing string or list class (for example, from the STL) to provide the underlying functionality.</p>
<p>Luckily, a feature of C++ called <BR>

<p>placement new</B> can provide a workaround. What I&#146;ll show next is an idiom you can use to get the same effect as having object members in a union. The idea is that instead of declaring object members, you instead declare a raw buffer and instantiate the needed objects on the fly. To use the idiom, just follow these steps:</p>
<OL><LI>For each constructed object type, declare a <B>typedef</B>. I&#146;ll illustrate the next steps with one integer member and two object members of types <B>TYPE1</B> and <B>TYPE2</B>.</LI>
<LI>Declare a <B>struct MYUNION</B> with a protected union member <B>U</B>.</LI>
<LI>Give <B>MYUNION</B> an enumeration <B>uniontype</B> with the value <B>NONE</B>, plus one value for each type, both non-object and object. For instance:</LI>

<pre>
enum uniontype { NONE, _INT, _TYPE1, 
                 _TYPE2};
</pre>

<LI>4.  Give <B>MYUNION</B> a member variable <B>currtype</B> of type <B>uniontype</B>. This is the discriminator that will keep track of the union&#146;s current type. Define a constructor for <B>MYUNION</B> that sets <B>currtype</B> to <B>NONE</B>.</LI>
<LI>In <B>union U</B>, declare an unsigned character buffer <B>buff</B> with a size equal to that of the largest object type. If you want to have non-object types in the union, include them in <B>U</B> also. For example:</LI>

<pre>
union {
  int i; // non-object type
  unsigned char buff[max(sizeof(TYPE1),
    sizeof(TYPE2))];
} U;
</pre>

<LI>6.  For each object type, give <B>MYUNION</B> a member function as follows:<LI>
<pre>
TYPE1&amp; MYUNION::gettype1()
{
  if( currtype==_TYPE1 ) {
    return *
      (reinterpret_cast&lt;TYPE1*&gt;(buff));
  } else {
    cleanup();
    TYPE1* ptype1 = new(buff) TYPE1();
    currtype=_TYPE1;
    return *ptype1;
  } // else
}
</pre>

<p>This serves as the accessor for the given type and takes the place of referencing the object member directly by name. Thanks to the flexibility of C++ references, the accessor function can be used instead of a named reference as either an l-value (left side of assignment operator) or r-value (right side of assignment operator). First, the function checks to see whether the &#147;current type&#148; of the union is the requested type. If it isn&#146;t, it calls <B>cleanup</B> to destroy any previously constructed object member. The function then calls <B>placement new</B> to construct the requested type. <B>placement new</B> doesn&#146;t allocate any additional memory. Instead, it constructs the type within the previously declared raw buffer. Since the buffer is sized to the largest of the union&#146;s object members, you can safely construct any of the object members within the buffer. After constructing the object, the function updates the current type and returns a reference to the new object. When the accessor is called and the requested type is the same as the current type, the function simply casts the buffer to the current type and returns a reference to the object.</p>
<LI>For each non-object type, give <B>MYUNION</B> a similar member function that returns a reference to the appropriate union member. For example:</LI>

<pre>
int&amp; MYUNION::getint()
{
  if( currtype==_INT ) {
    return U.i;
  } else {
    cleanup();
    currtype=_INT;
    return U.i;
  } // else
}
</pre>

<p>Note that you could treat non-object types the same as objects as shown in step 6, instantiating them in the raw buffer. But the generated code is a little more efficient if you handle the non-objects separately.</p>
<LI>Give <B>MYUNION</B> a member function <B>cleanup</B> as follows, with one case statement for each constructed object type. You should make access to this function protected.</LI>

<pre>
void MYUNION::cleanup()
{
  switch( currtype ) {
    case _TYPE1 : {
      TYPE1&amp; ptype1 = gettype1();
      ptype1.~TYPE1();
      break;
    } // case
// ... repeat above for _TYPE2, _TYPE3, etc...
    default: break;
  } // switch
  currtype=NONE;
}
</pre>

<p>This function destroys the current object type, if any. The trick here is the explicit destructor call. Since <B>placement new</B> didn&#146;t allocate memory, it wouldn&#146;t work to call <B>delete</B> to deallocate the object. Instead, you have to explicitly invoke the destructor by name.</p>
<LI>Finally, give <B>MYUNION</B> a destructor that just calls <B>cleanup</B>.</LI></UL>

<p>By using this idiom, you can create unions that freely mix primitive and object types. When you reference an object type by its accessor, it is automatically instantiated. Later, if you access a different object type in the union, the old object is automatically destroyed, and the new object instantiated in its place. I hope you find this technique useful. For a complete working example, see <a href="list1.htm">Listing 1</a>.</p>

<p><i><B>Kevin T. Manley</B> is a software developer and consultant working in Seattle, WA. He&#146;s currently working toward his Masters degree in Computer Science at the University of Washington. You can reach him at <B>kmanley@cs.washington.edu</B>.</i></p>

<h4><a href="../../../source/2002/aug02/manley.zip"></a></h4>

</blockquote></body></html>
