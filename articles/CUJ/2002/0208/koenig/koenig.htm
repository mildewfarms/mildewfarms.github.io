<HTML>   
     <HEAD>
<TITLE>August 2002/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Handles and Exception Safety, Part 1: A Simple Handle Class</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>Understanding exception safety made easier. Really.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>A fundamental property of C++ is that run-time polymorphism happens only through references or pointers to class objects. In consequence, object-oriented programs must deal with memory management; neither references nor pointers do so automatically. Class authors who wish to avoid managing memory can foist off the problem on their users. Indeed, doing so may be tempting, because ignoring memory management makes classes easier to write. However, such classes are harder for users to use, and the overall complexity of a system increases greatly if user code must manage the system&#146;s memory directly.</p>
<p>Not surprisingly, the C++ community has developed techniques to simplify memory management in object-oriented programs. One common technique of long standing is to use interface classes, typically called <I>handles</I>, to hide inheritance hierarchies. Such an interface class will hide a pointer to an object with a type from an inheritance hierarchy of implementation classes and will manage that object&#146;s memory in the handle&#146;s constructors and destructor. This technique shields user code from the complexities of using pointers, but still obtains polymorphic behavior.</p>
<p>Handles are so fundamental that it should come as no surprise that they take many forms. The most direct form is for each interface object to represent a separate implementation object. Copying the interface object copies the implementation object, destroying the interface object destroys the implementation object, and so on.</p>
<p>If this form is not flexible enough, we can add flexibility &#151; and complexity &#151; by adding what is usually called either a <I>use count</I> or a <I>reference count</I> to the interface object. By doing so, we allow multiple interface objects to share a single implementation object, while still being able to manage memory. Such schemes reduce memory allocation and can have a significant impact on run-time performance.</p>
<p>We first discussed handles in the <I>Journal of Object-Oriented Programming</I> [<a href="#1">1</a>, <a href="#2">2</a>], then expanded on that discussion in <I>Ruminations on C++</I> <a href="#3">[3]</a>, and, most recently, used generic handles as an implementation vehicle in <I>Accelerated C++</I> <a href="#4">[4]</a>. During that time, our understanding of handles and how to use them has evolved. In particular, we &#151; along with others in the C++ community &#151; have begun to appreciate how much more useful a general-purpose tool such as a handle can be if it behaves sensibly in the face of exceptions.</p>
<p>In this series of columns, we intend first to review our understanding of how handles work, then to give examples of various kinds of handles, and finally to describe what we think is a new technique for implementing reference-counted handles that makes exception safety much easier to achieve. This first column will concentrate on the most straightforward kind of handle, in which there is a one-to-one correspondence between interface and implementation objects.</p>

<H3><FONT COLOR="#000080">Why We Shouldn&#146;t Leave Memory Management to Our Users</FONT></H3>

<p>In general, a handle is a kind of interface class; each object of the interface class contains a pointer to the base class of a hierarchy of implementation classes and provides operations that mirror that base class&#146; public operations. The object to which any particular interface-class object points might be a base-class object or an object of one of its derived classes. </p>
<p>User code operates strictly in terms of the interface class. Interface functions call the corresponding implementation functions through the stored base-class pointer, thus obtaining the correct polymorphic behavior at run time. User code operates on objects in the hierarchy only through objects of the interface type, thereby avoiding the problems inherent in dynamic allocation. The interface class does all the dynamic memory allocation so that it can control and verify that allocation.</p>
<p>In order to make our discussion more concrete, we&#146;ll use one of the oldest and most illustrative object-oriented programming examples: a program that deals with various kinds of shapes, each of which can be drawn on a display device. Of course, in a real graphical system, the classes would be much more complicated than the ones we&#146;re using here, but the underlying ideas are the same.</p>
<p>We shall begin with an abstract base class, from which all of the others will be derived:</p>

<pre>
class Shape_base {
public:
     virtual void draw() const = 0;
     virtual ~Shape_base();
};
</pre>

<p>Every class derived from <B>Shape_base</B> will have at least two virtual functions: <B>draw</B>, which will draw the shape on the display device, and the destructor, which might behave differently for different kinds of shapes.</p>
<p>We expect that there will be other classes derived from <B>Shape_base</B>:</p>

<pre>
class Circle: public Shape_base {
public:
     virtual void draw() const;
private:
     double diameter;
};

class Polygon: public Shape_base {
public:
     virtual void draw() const;
private:
     std::vector&lt;Point&gt; vertices;
};
</pre>

<p>Of course, we will want to add more members to each of these classes to make it possible to specify the shape&#146;s dimensions, control where it will be displayed, and so on. However, these skeletal classes will serve for our purposes.</p>
<p>Part of the reason for using an inheritance hierarchy is to make it easy to have heterogeneous containers of shapes. For example:</p>

<pre>
std::vector&lt;Shape_base*&gt; shapes;
shapes.push_back(new Circle);
shapes.push_back(new Polygon);
// ...

for (std::vector&lt;Shape_base*&gt;::const_iterator s = 
    shapes.begin(); s != shapes.end(); ++s) {
     (*s)-&gt;draw();
}
</pre>

<p>Yes, we mean <B>(*s)-&gt;draw()</B>, not <B>s-&gt;draw()</B> or <B>(*s).draw()</B>. Here&#146;s what&#146;s going on:</p>

<IMG SRC="emb1.gif">

<p>The iterator <B>s</B> refers successively to each element of <B>shapes</B>. Each of these elements is a pointer that points to a shape of some kind. In this particular illustration, the initial element of <B>shapes</B> points to a <B>Circle</B>, the next element points to a <B>Polygon</B>, and subsequent elements presumably point to additional shapes.</p>
<p>It should be clear that <B>*s</B> is an element of <B>shapes</B>, and that element is itself a pointer. Therefore, the shape to which <B>*s</B> points is <B>**s</B>, and we can call that shape&#146;s <B>draw</B> member by calling <B>(**s).draw</B> or, equivalently, by calling <B>(*s)-&gt;draw</B>.</p>
<p>Suppose now that we want to form another collection that contains only some of the objects in the <B>shapes</B> collection. We might write something like this:</p>

<pre>
std::vector&lt;Shape_base*&gt; some_shapes;

for (std::vector&lt;Shape_base*&gt;::const_iterator s = 
    shapes.begin(); s != shapes.end(); ++s) {
     if (condition(s))
          some_shapes.push_back(*s);
}
</pre>

<p>Here, <B>condition</B> represents whatever test we might use to decide whether to include a shape in <B>some_shapes</B>. After we have executed this code, <B>shapes</B> still refers to all of our shapes, but <B>some_shapes</B> refers to some of the shapes as well:</p>

<IMG SRC="emb2.gif">

<p>Suppose now that we&#146;re done using the <B>shapes</B> vector and want to deallocate it. We cannot simply run through the vector and delete every object to which it points, because <B>some_shapes</B> still needs some of those objects. However, we might not even be aware of the existence of the <B>some_shapes</B> vector, because it might have been created in a part of our program that someone else wrote.</p>
<p>Evidently, we can get into trouble.</p>

<H3><FONT COLOR="#000080">A Simple Handle</FONT></H3>

<p>In order to avoid our memory-allocation problems, we shall define a handle class, which we shall name <B>Shape</B>, and ask our users to use objects of this class instead of <B>Shape_base</B> pointers. In other words, instead of writing:</p>

<pre>
Shape_base* p = new Circle;
</pre>

<p>our users should write:</p>

<pre>
Shape s(new Circle);
</pre>

<p>and instead of calling <B>p-&gt;draw</B>, they should call <B>s.draw</B>. Deleting the object <B>s</B> will delete the shape to which it points as well.</p>
<p>We now know enough to start defining our handle class:</p>

<pre>
class Shape {
public:
     Shape(Shape_base* p0): p(p0) { }
     ~Shape() { delete p; }

     void draw() const { p-&gt;draw(); }
     // other functions as needed

     Shape(const Shape&amp;);
     Shape&amp; operator=(const Shape&amp;);
private:
     Shape_base* p;
};
</pre>

<p>Our constructor and destructor are straightforward: the constructor accepts a pointer from our user and remembers it; the destructor deletes the object to which our pointer points. The <B>draw</B> function is similarly straightforward: it merely calls the <B>draw</B> function associated with the object to which we&#146;re referring.</p>
<p>Unfortunately, we&#146;re not done &#151; we haven&#146;t yet written our copy constructor or assignment operator. Whenever a class needs a destructor, you can be pretty certain that it will also need a copy constructor and an assignment operator.</p>

<H3><FONT COLOR="#000080">The Copy Constructor</FONT></H3>

<p>What should copying a <B>Shape</B> do? On the surface, the answer is trivial: because we decided that every <B>Shape</B> would correspond to a single object with a type derived from <B>Shape_base</B>, copying <B>Shape</B> must copy the corresponding object. Indeed, doing so must allocate a new object of the same type in order to make the copy.</p>
<p>In order to do so, let&#146;s give our inheritance hierarchy a new virtual function named <B>clone</B>:</p>

<pre>
class Shape_base {
public:
     virtual void draw() const = 0;
     // added
     virtual Shape_base* clone() const = 0;    
     virtual ~Shape_base();
};

class Circle: public Shape_base {
public:
     virtual void draw() const;
     // added
     virtual Shape_base* clone() const;
private:
     double diameter;
};
</pre>

<p>The idea is that if we call the <B>clone</B> member of any shape, it will construct a new object of the same type that is a copy of the original and return a pointer to the copy as a <B>Shape_base*</B>. Because the <B>clone</B> member is a pure virtual, every one of the derived classes will have to define it.</p>

<p>Once we have our <B>clone</B> function, the <B>Shape</B> copy constructor is not hard to define:</p>

<pre>
Shape::Shape(const Shape&amp; s): p<BR>
            (s.p-&gt;clone()) { }
</pre>

<p>We copy a <B>Shape</B> by asking the object to which the <B>Shape</B> points to clone itself.</p>
<p>Suppose, for example, that we allocate a <B>Circle</B> and bind a <B>Shape</B> to it:</p>

<pre>
Shape s = new Circle;
</pre>

<p>Then we have the following situation:</p>

<IMG SRC="emb3.gif">

<p>If we now form a copy of <B>Shape</B>, doing so will call the <B>Circle</B> object&#146;s <B>clone</B> member, which will create a new <B>Circle</B> object bound to the copy of the <B>Shape</B>. For example, if we execute:</p>

<pre>
Shape s1 = s;
</pre>

<p>the situation will look like this:</p>

<IMG SRC="emb4.gif">

<p>Now we can rewrite our examples to use <B>Shape</B> objects instead of <B>Shape_base*</B> pointers. We begin by creating our <B>shapes</B> vector again:</p>

<pre>
std::vector&lt;Shape&gt; shapes;
shapes.push_back(new Circle);
shapes.push_back(new Polygon);
// ...

for (std::vector&lt;Shape&gt;::const_iterator
     s = shapes.begin();
     s != shapes.end(); ++s) {
     s-&gt;draw();
}
</pre>

<p>Yes, we mean <B>s-&gt;draw()</B>, not <B>(*s)-&gt;draw()</B> or <B>s.draw()</B>. The reason is that <B>s</B> is still an iterator, so <B>*s</B> is still the object to which that iterator refers, but now that object is a <B>Shape</B> rather than a pointer. If you look back at the definition of the <B>Shape</B> class, you will see that it has a <B>draw</B> function that calls the <B>Shape_base</B> class&#146; <B>draw</B> function.</p>
<p>Now let&#146;s select some of our shapes again and put them in <B>some_shapes</B>:</p>

<pre>
std::vector&lt;Shape&gt; some_shapes;

for (std::vector&lt;Shape&gt;::const_iterator
     s = shapes.begin();
     s != shapes.end(); ++s) {
     if (condition(s))
          some_shapes.push_back(*s);
}
</pre>

<p>Look at that call to:</p>

<pre>
some_shapes.push_back(*s);
</pre>

<p>Because <B>some_shapes</B> is a <B>vector&lt;Shape&gt;</B> and <B>*s</B> is now a <B>Shape</B>, this call is copying a <B>Shape</B> object. Accordingly, it is also copying (via the <B>clone</B> function) the object to which that <B>Shape</B> refers. It has no choice but to do so, because of our decision that each <B>Shape</B> object refers to a unique object from the <B>Shape_base</B> hierarchy.</p>
<p>After executing this code, the situation looks like this:</p>

<IMG SRC="emb5.gif">

<p>By copying the <B>Polygon</B>, we have completely gotten rid of the allocation problems we had before: deallocating either of the <B>shapes</B> or <B>some_shapes</B> vectors will have no effect on the other vector, as they no longer have any objects in common. The key to being able to avoid the allocation problems is our handle class, which ensures that users will not forget to copy shapes when they copy the pointers to them.</p>

<H3><FONT COLOR="#000080">Exception Safety</FONT></H3>
<p>So far, we have not considered what happens if one of the functions that we have written throws an exception <a href="#5">[5]</a>. Fortunately, the answer turns out to be &#147;not much.&#148; In general, exceptions cause trouble only if they occur after the programs&#146; state has changed in some way, either by allocating a resource or modifying a data structure. An exception that occurs before the first state change is harmless, because when the exception is handled, the state will be as if nothing had happened. Therefore, to convince ourselves that the program so far is exception safe, we need to look only at places where the state changes.</p>
<p>There aren&#146;t many such places. We assume that the <B>draw</B> function doesn&#146;t change the state, and that destructors don&#146;t throw exceptions. Except for the copy constructor, our constructors don&#146;t do anything that might throw an exception; allocating the <B>Shape_base</B> objects in the first place is our user&#146;s responsibility.</p>
<p>The only potential problem, then, is the copy constructor and the <B>clone</B> function that it calls. Even here, there should be no problem &#151; because calling the <B>clone</B> function is the first thing the copy constructor does. Therefore, to ensure exception safety, all we need to assume is that if the <B>clone</B> function throws an exception, it first cleans up any resources that it might have allocated. Again, that responsibility is part of writing the <B>clone</B> function; if that function is exception safe, our code so far will not cause any new problems with exceptions.</p>

<H3><FONT COLOR="#000080">Assignment</FONT></H3>

<p>We have only one problem left to solve, namely defining our assignment operator. We didn&#146;t need to use the assignment operator in this article, but of course we need to define it if we want our <B>Shape</B> class to be generally useful. Curiously enough, it is here that we have to work the hardest to ensure exception safety.</p>
<p>We have lost count of how many times we have seen assignment operators defined along the following lines. Sometimes, we have even defined them this way ourselves:</p>

<pre>
// What's wrong with this code?
Shape&amp; Shape::operator=(const Shape&amp; 
                        source)
{
     if (this != &amp;source) {
          delete p;
          p = source-&gt;clone();
     }

     return *this;
}
</pre>

<p>Most C++ programmers these days are aware of the need to ensure that an assignment operator works correctly when we use it to assign an object to itself. For example, suppose we have a <B>Shape</B> named <B>s</B> that happens to refer to a <B>Circle</B>:</p>

<IMG SRC="emb6.gif">

<p>and we execute:</p>

<pre>
s = s;
</pre>

<p>Then, within the body of the assignment operator, <B>this</B> will point to the same object to which <B>source</B> refers. If we did not compare <B>this</B> with <B>&amp;source</B>, we would first delete <B>this-&gt;p</B>, which would destroy the <B>Circle</B> object:</p>

<IMG SRC="emb7.gif">

<p>Then we would attempt to clone the object pointed to by <B>source-&gt;p</B>, which is the same object that we had just deleted. The result would be undefined behavior.</p>
<p>Therefore, we need a strategy that will ensure that the assignment works even if we are assigning an object to itself. However, this particular strategy still leaves us with an exception-safety problem.</p>
<p>The reason is that it makes two changes to the program&#146;s state: first it deallocates the object to which <B>p</B> points; then it allocates a new object. We assume that deleting an object will not throw an exception, but allocating the new object might do so. As we already noted, our trouble comes from the fact that we might have to deal with an exception after we have changed the program&#146;s state.</p>
<p>When we describe the problem that way, the solution is easy: rewrite the assignment operator so that it does not change the state until it is no longer possible for exceptions to be thrown. We can achieve that state of affairs by calling <B>clone</B> first &#151; because that&#146;s where the exception might be &#151; and only then deleting <B>p</B>. Of course, if we follow that strategy, we need a place to save the result of calling <B>clone</B>:</p>

<pre>
// This one is much better
Shape&amp; Shape::operator=(const Shape&amp; source)
{
     Shape_base* new_p = source-&gt;clone(); // might throw
     // No exceptions possible beyond this point
     delete p;
     p = new_p;

     return *this;
}
</pre>

<p>We have rewritten our assignment operator so that the first state change happens only after the call to <B>clone</B> &#151; a point at which no future exceptions are possible. Accordingly, this version of the assignment operator is exception safe.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>

<p>Every C++ program that uses inheritance must manage memory somehow. The most obvious way to do so is directly, but programmers who create complicated data structures often have trouble figuring out what parts of those data structures are safe to delete when.</p>
<p>The classical method of dealing with such complexity is to hide it in a class. Such classes are typically called handles; the idea is to attach a handle object to another object that contains the actual data. The simplest form of a handle, which we have discussed in this article, is one in which each handle object corresponds to a single object from the inheritance hierarchy. Such handles are straightforward to use and to implement and tend to be intrinsically exception safe in almost all respects.</p>
<p>The one exception hazard in such a class is typically the assignment operator. Assignment operators often test for self-assignment to avoid aliasing problems. As Herb Sutter has observed in <a href="#6">[6]</a>, programs that need such tests are almost always exception unsafe.</p>
<p>By rewriting the assignment operator, we ensure that we do not do anything irrevocable until the possibility of throwing an exception has passed. This strategy ensures that if an exception occurs while our assignment operator is executing, we do not corrupt the rest of our system.</p>
<p>Our <B>Shape</B> class still has a significant shortcoming: when we copy <B>Shape</B> objects, as we did to create the <B>some_shapes</B> vector, we create what might be unnecessary copies of the objects to which the <B>Shape</B> objects refer. In our next article, we will modify our handle to deal with this problem and see how that modification affects our efforts to maintain exception safety.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  A. R. Koenig. &#147;Variations on a Handle Theme,&#148; <I>Journal of Object-Oriented Programming</I>, 8(6).</p>
<p><a name="2"></a>[2]  A. R. Koenig. &#147;Another Handle Variation,&#148; <I>Journal of Object-Oriented Programming</I>, 8(7).</p>
<p><a name="3"></a>[3]  A. R. Koenig and B. E. Moo. <I>Ruminations on C++</I> (Addison-Wesley, 1997).</p>
<p><a name="4"></a>[4]  A. R. Koenig and B. E. Moo. <I>Accelerated C++</I> (Addison-Wesley, 2000).</p>
<p><a name="5"></a>[5]  H. Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</p>
<p><a name="6"></a>[6]  B. Stroustrup. <I>The C++ Programming Language</I>, Third Edition (Addison-Wesley, 1997). Appendix E discusses exception safety in detail. </p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of <I>C Traps and Pitfalls</I> and co-author of <I>Ruminations on C++</I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of <I>Ruminations on C++</I> and lectures worldwide.</i></p>

</blockquote></body></html>
