<HTML>   
     <HEAD>
<TITLE>August 2002/Applying BGL to Computational Geometry</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Applying BGL to Computational Geometry</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Vitaly Ablavsky</FONT></H3>

<BLOCKQUOTE>
<p>Graphs, graphics, and generic programming combine in this novel use of the Boost Graph Library.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The Boost libraries <a href="#1">[1]</a> extend the C++ Standard library by providing new functionality (e.g., threads <a href="#2">[2]</a> and smart pointers <a href="#3">[3]</a>) and establishing an extensive set of language idioms. Not surprisingly, Boost will have an impact on the emerging C++ Library Extensions Technical Report (see Herb Sutter&#146;s discussion in <a href="#4">[4]</a>). Among Boost&#146;s several dozen libraries, the BGL (Boost Graph Library) stands as a prime example of modern C++ design applied to advanced algorithmic concepts. You do not need to be doing scientific computing for a living to appreciate graph-theoretic concepts. For instance, your build system analyzes the directed (and, hopefully, acyclic!) graph of file dependencies to control compilation. Many network routing problems are solved in the graph framework.</p>
<p>In this article, I apply BGL to the domain of computational geometry (see <a href="sidebar1.htm">sidebar</a>). First, I formulate a concrete problem in graph terms. Second, I develop a way to transform the output of an existing algorithm into an appropriate BGL data structure. Finally, I implement two new algorithms for my BGL graph. The first algorithm gets the job done, but could have been written in any programming language. The second algorithm, however, shows the power of BGL&#146;s generic programming approach.</p>

<H3><FONT COLOR="#000080">A Brief Overview of BGL</FONT></H3>

<p>BGL originated at the Laboratory for Scientific Computing at the University of Notre Dame. The initiative started around 1998 and was initially termed the GGCL (Generic Graph Component Library). GGCL joined forces with Boost two years later and became BGL at the end of 2000. As of this writing, the latest version of Boost is version 1.27.0. You can master BGL through online documentation <a href="#5">[5]</a> or a recently published book <a href="#6">[6]</a>.</p>
<p>BGL is not about data structures and algorithms, although it contains both. It is about writing interfaces in an efficient and extensible way. In doing so, BGL tries to correct several key problems that plague scientific software. First, the majority of such software does not separate algorithms from underlying data types, guaranteeing that the next person to come along will have to modify both to solve their particular problem. Second, and this applies particularly to problems in graph domains, an application often already has its own data representation and converting that data structure into some graph library format may severely degrade performance. For example, in the domain of geographic information systems, one might want to compute object mobility on a particular kind of terrain. This can easily be done using Dijkstra&#146;s single-source shortest-paths algorithm. The problem is that DEMs (digital elevation maps) can take up megabytes (and even gigabytes) of storage, and you would not want to copy such a behemoth into a new graph data structure (represented as, say, a linked list) just to run one algorithm. Instead, you should superimpose the graph structure on the existing data in an implicit fashion by providing the right interface and then run your graph algorithm against that interface.</p>
<p>BGL achieves these and several other goals through consistent application of generic programming principles influenced by the C++ Standard library. BGL clearly separates containers (graphs) from algorithms (graph-traversal, etc.) by writing the latter against the <B>graph_traits&lt;&gt;</B> interface <a href="#7">[7]</a> instead of hard-coded member functions. Although BGL provides several reference graph representations such as <B>adjacency_list</B> and <B>adjacency_matrix</B>, it supplies examples of interfacing to external graphs (such as LEDA graphs) and encourages you to write your own graph adapters to suit your problem domain.</p>
<p>The unifying implementation theme of BGL is template metaprogramming <a href="#8">[8]</a>. For example, in <a href="list1.htm">Listing 1</a>, I pass a list of visitors (functors) to a graph-traversal algorithm. Do not search for <B>vector&lt;Visitor&gt;</B> in <a href="list1.htm">Listing 1</a> &#151; it is not there. Instead the list of visitors consists of nested <B>std::pair</B>s and is treated as a type known at compile time. Similarly, should you look at the graph-traversal algorithm implementation, do not try to find a <B>switch</B> statement that selects the right visitor at the right time. Again, the decision of which visitor to apply is made at compile time via the compile-time <B>if</B> idiom. I cannot even begin to list the benefits of compile-time checks for static program validation, but I will briefly mention the performance gain. On a lark, I wrote a benchmark to compare element access using a compile-time list data structure coupled with the compile-time <B>if</B> idiom and a dynamic container (<B>std::vector</B>) coupled with an inheritance-based idiom. The compile-time approach outperformed the other by a factor of 20. When I introduced inlining, the Microsoft Visual C++ compiler increased the performance gap to a factor of 100. After that, I stopped doubting BGL creators&#146; claim that generic programming matches hand-optimized math libraries.</p>

<H3><FONT COLOR="#000080">BGL Meets Legacy Code</FONT></H3>

<p>My favorite book on computational geometry by O&#146;Rourke <a href="#9">[9]</a> refers to a very efficient plane sweep algorithm for constructing Voronoi diagrams published by Steve Fortune in 1987. I located the implementation <a href="#10">[10]</a>, which was in plain C and produced only ASCII output (i.e., not an in-memory graph data structure). Here is how I &#147;boosted&#148; it to C++.</p>
<p>As Fortune&#146;s algorithm sweeps across the plane, it emits events corresponding to newly constructed portions of the Voronoi diagram. Each event is output in ASCII in one of the four formats:</p>

<OL><LI><I>s x y</I> indicates an input point at coordinates <I>(x,y)</I>.</LI>
<LI><I>l a b c</I> indicates a line <I>1</I> with equation <I>ax + by = c</I>.</LI>
<LI><I>v x y</I> indicates a vertex at <I>(x,y)</I>.</LI>
<LI><I>e l v1 v2</I> indicates a Voronoi segment, which is a subsegment of line l above, with endpoints numbered <I>v1</I> and <I>v2</I>. If <I>v1</I> or <I>v2</I> is -1, the line extends to infinity.</LI></OL>

<p>I don&#146;t care about output records of type 1 since they represent the input data. I can also deduce that an output record of type 4 has to refer to valid values of <I>v1</I>, <I>v2</I>, and <I>1</I>, and therefore must be emitted only after the corresponding records of type 2 and 3 have been emitted.</p>
<p>I am going to make one simplification. Since the final result I want is the medial axis, I know I will have to prune unbounded edges. Therefore, I ignore records of type 2 and type 4 when the line extends to infinity.</p>
<p>To define the BGL graph, I chose the <B>adjacency_list</B> representation over <B>adjacency_matrix</B> because the graph will be sparse and will change over time.</p>

<pre>
typedef
adjacency_list&lt;vecS, vecS,
   undirectedS,VertexProp,
   no_property&gt; MedialAxisGraph;
</pre>

<p>This defines an undirected graph that has no properties attached to edges, but has data associated with vertices. Furthermore, I use the <B>vecS</B> selector tags to pick <B>std::vector</B> as the underlying container to hold vertices and edges. This choice will simplify some of the code in <a href="list2.htm">Listing 2</a>.</p>
<p>The vertex property (<B>VertexProp</B>) ties in the abstract graph with the concrete geometric problem I am trying to solve. You need to follow a three-step process to attach properties to either vertices or edges. First, you need to decide what you want stored at each vertex. This can be an object of either a fundamental (e.g., <B>bool</B>) or a user-defined type (e.g., <B>Point</B>). In this example, I use both. Second, you need to define a property type tag. BGL&#146;s internal machinery needs this tag type to distinguish properties. Finally, you define the property type by constructing a compile-time property list. I show these steps in <a href="list3.htm">Listing 3</a> by attaching a boolean and a <B>Point</B> vertex property. <a href="list2.htm">Listing 2</a> shows how the graph is populated during the run of Fortune&#146;s Voronoi algorithm.</p>
<p>Here is what&#146;s going on. When the record type indicates a Voronoi vertex, the code adds a new graph vertex and then sets its two properties. Notice how type tags allow overload resolution (once again, a compile-time decision). The <B>coord_t</B> property gets the <I>x,y</I> coordinates. The <B>insidecurve_t</B> property gets <B>true</B> as a default value. The case is trickier for handling Voronoi segments. All I want to do is add an edge, but what are the corresponding graph vertices? Because my Voronoi vertices are zero-based, and because I chose <B>std::vector</B> as the underlying storage for vertices, I can type cast the former into the latter.</p>

<H3><FONT COLOR="#000080">BGL Graph Processing (A Non-BGL Way)</FONT></H3>

<p>I skip the details of iterating through the graph and setting the <B>insidecurve_t</B> property to the correct boolean value. Testing the location of a point with respect to a closed polygon is one of the fundamental topics in computational geometry, and you have a choice of many algorithms. The next step, however, is more interesting because it illustrates Boost graph editing at run time. I want to prune the graph, removing vertices whose <B>insidecurve_t</B> property is <B>false</B>. Since the BGL interface is iterator based, I have to make sure that I do not accidentally invalidate my iterators while removing vertices. A quick look through online documentation reveals that I am out of luck: <B>adjacency_list&lt;vecS,vecS,...&gt;</B> invalidates all iterators on vertex removal. Hence the double for-loop in <a href="list4.htm">Listing 4</a>. Notice the call to <B>clear_vertex</B> prior to <B>remove_vertex</B>. The code transforms the graph in <a href="fig3.htm">Figure 3</a> into the graph in <a href="fig4.htm">Figure 4</a>.</p>

<H3><FONT COLOR="#000080">BGL All the Way</FONT></H3>

<p>My goal is to compute the shape structure graph shown in <a href="fig5.htm">Figure 5</a>. Intuitively this entails iterating through the medial axis graph and marking each vertex whose degree is not equal to two. Then for each marked vertex you can search for the nearest marked vertex and add the appropriate edge to the shape structure graph. Such a naive implementation is opaque and has <I>O(N</I>2<I>)</I> complexity.</p>
<p>A better approach takes advantage of two BGL features: generic graph-traversal algorithms and visitors. Generic graph traversals, such as <B>depth_first_search</B> and <B>breadth_first_search</B> parallel <B>std::transform</B> from the C++ Standard library. Since graph traversal involves backtracking and other &#147;interesting&#148; events, BGL lets you pass a list of visitors rather than a single functor to the traversal function.</p>
<p>I chose the <B>depth_first_search</B> for graph traversal and a single visitor, <B>DiscoverVertex</B>, that processes <B>on_discover_vertex</B> events (i.e., the first time the traversal algorithm encounters the vertex). <a href="list1.htm">Listing 1</a> shows key elements of <B>DiscoverVertex</B>. The <B>typedef</B> sets up the event filter so that DiscoverVertex::operator() is called only once per vertex. The <B>depth_first_search</B> algorithm expects a visitor list, which I create using <B>std::make_pair</B>. Since <B>DiscoverVertex</B> builds the shape structure graph along the way, it stores a pointer to the (initially empty) graph in <B>sGraph_</B>. You can see how it all fits together in the source code available from <I>CUJ</I>&#146;s website (&lt;www.cuj.com/code&gt;).</p>

<H3><FONT COLOR="#000080">Conclusions</FONT></H3>

<p>BGL provides an elegant and extensible framework for building graph data structures and algorithms. Whether you are retrofitting an old but reliable algorithm or are developing a brand-new one, the extra effort to &#147;boostify&#148; your code will pay off. However, the beauty of BGL comes at the price of complexity, both to the programmer and the compiler. Unless you dream of partially instantiated templates at night, expect to spend some time getting used to the Boost design philosophy. Likewise, compilers have a rough time handling some of the code&#146;s idioms. I primarily use Microsoft Visual C++ v6.0 and have stared at the &#147;Internal Compiler Error&#148; message many times while working with BGL. (Things are better, but still not perfect, with GCC 3.0.x.) Most of the time (but not always), you can push forward by breaking up complex expressions into multiple statements or rearranging the code in some other way. The end result is certainly worth the investment.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>This work was supported by the Air Force Research Labs, Eglin AFB, under Contract F08630-99-C-0022. In addition, I want to thank A. J. Fox for helpful suggestions.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Boost. &lt;www.boost.org&gt;.</p>
<p><a name="2"></a>[2]  Bill Kempf. &#147;The Boost.Threads Library,&#148; <I>C/C++ Users Journal</I>, May 2002.</p>
<p><a name="3"></a>[3]  Bjorn Karlsson. &#147;Smart Pointers in Boost,&#148; <I>C/C++ Users Journal</I>, April 2002.</p>
<p><a name="4"></a>[4]  Herb Sutter. &#147;The New C++: The Group of Seven &#151; Extensions under Consideration for the C++ Standard Library,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, April 2002, &lt;www.cuj.com/experts/2004/sutter.htm&gt;.</p>
<p><a name="5"></a>[5]  BGL. &lt;www.boost.org/libs/graph/doc/table_of_contents.html&gt;.</p>
<p><a name="6"></a>[6]  Jeremy G. Siek, Lie-Quan Lee, and Andrew Lumsdaine. <I>The Boost Graph Library: User Guide and Reference Manual</I> (Addison-Wesley, 2002).</p>
<p><a name="7"></a>[7]  Thomas Becker. &#147;STL &amp; Generic Programming: Traits Classes,&#148; <I>C/C++ Users Journal</I>, December 2001.</p>
<p><a name="8"></a>[8]  For more information on template metaprogramming, see Thomas Becker&#146;s column in this issue. (Thomas Becker. &#147;STL &amp; Generic Programming: C++ Template Metaprogramming,&#148; <I>C/C++ Users Journal</I>, August 2002.)</p>
<p><a name="9"></a>[9]  Joseph O&#146;Rourke. <I>Computational Geometry in C</I> (Cambridge University Press, 1998).</p>
<p><a name="10"></a>[10]  Steven Fortune&#146;s Voronoi diagram code. &lt;http://cm.bell-labs.com/who/sjf&gt;. </p>

<p><i><B>Vitaly Ablavsky</B> holds a B.A. in Mathematics from Brandeis University and an M.S. in Computer Science from UMass Amherst. He is a senior software engineer at Charles River Analytics in Cambridge, MA. His interests are computer vision and pattern recognition. He can be contacted at <B>v.ablavsky@ieee.org</B>.</i></p>

<h4><a href="../../../source/2002/aug02/ablavsky.zip"></a></h4>
</blockquote></body></html>
