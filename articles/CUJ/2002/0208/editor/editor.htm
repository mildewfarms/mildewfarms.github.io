<HTML>   
     <HEAD>
<TITLE>August 2002/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>
<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">New Cheese</FONT></H3>

<p>There was a time in the mid-to-late &#146;90s that I considered myself a C++ &#147;expert&#148; (whatever that means). I would imagine it lasted for about, say, two months. I had spent most of that decade participating on the C++ standards committee, writing some pretty dang good C++ code, and teaching all over the country. My book <a href="#1">[1]</a> was the third on the market to be compliant with the recently-established C++98 Standard (after Stroustrup&#146;s 3rd Edition and Scott Meyers&#146; 2nd Edition of <I>Effective C++</I>), and my article, &#147;What&#146;s New in Standard C++?&#148; <a href="#2">[2]</a>, was well received and quoted a number of times in other places. Then somebody moved my cheese <a href="#3">[3]</a>.</p>
<p>Not that being an &#147;expert&#148; is important, let alone well defined. I&#146;ve never been so delusional as to think I knew even &#147;most everything&#148; about <I>anything</I> (I&#146;m still picking up insights on C, for goodness&#146; sake), but it does feel good once in a while to display a noticeable level of mastery of one&#146;s craft. If the craft is software development, I&#146;m still in good shape; if it&#146;s purely C++, I&#146;ve a little catching up to do. (The fact that I must now teach such a vast variety of college subjects may have something to do with it). There was a day when mastery of a programming language lasted for a while (I was a FORTRAN expert for years, not just months :-), but no more. After a brief (and fruitful) detour into the wonderful world of Java, I returned to C++ Land with a mouthful of others&#146; dust.</p>
<p>So what&#146;s new <I>since</I> Standard C++? Most notably, template metaprogramming and exception-safe design, I would say. Template metaprogramming, C++&#146;s curious language within a language, came about as a happy accident. Templates began as a mechanism for type-safe containers of <B>T</B> and were refined further to make STL doable; I don&#146;t think anyone gave a passing thought to the fact that the template facility constituted a compile-time, Turing-complete language in its own right. Now there are entire libraries that perform most of their magic before you can even say &#147;go&#148; at run time. If this is all new to you, have a look at the contributions from columnists Thomas Becker and Steve Dewhurst in this issue <a href="#4">[4]</a>.</p>
<p>Tom Cargill gave the C++ industry a bit of a scare at the end of 1994 in his infamous article, &#147;Exception Handling: A False Sense of Security&#148; <a href="#5">[5]</a>. Some of us began to wonder if we had created a monster by adding exceptions to the language. Over time, all of Cargill&#146;s issues have been resolved (not without deliberate effort on your part, however), thanks to pioneering work by Greg Colvin, David Abrahams, and Herb Sutter <a href="#6">[6]</a>, among others. Not surprisingly, Koenig and Moo&#146;s treatment of the subject this month is the clearest you can find in print.</p>
<p>A quote from that article reads thus:</p>

<UL>
<p>We first discussed handles in the <I>Journal of Object-Oriented Programming</I>, then expanded on that discussion in <I>Ruminations on C++</I>, and, most recently, used generic handles as an implementation vehicle in <I>Accelerated C++</I>. During that time, our understanding of handles and how to use them has evolved. In particular, we &#151; along with others in the C++ community &#151; have begun to appreciate how much more useful a general-purpose tool such as a handle can be if it behaves sensibly in the face of exceptions.</p>
</UL>

<p>And that&#146;s the point: things change. Our understanding evolves (or at least it should). Languages and tools and all other such worthwhile creations from the mind of man must progress or fade into oblivion. So while I clean the dust out of my mouth, I&#146;ll be taking Haw&#146;s advice <a href="#7">[7]</a>: &#147;Savor the Adventure and Enjoy the Taste of New Cheese&#148;.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  <I>C &amp; C++ Code Capsules: A Guide for Practitioners</I> (Prentice-Hall, 1998).</p>
<p><a name="2"></a>[2]  <I>C/C++ Users Journal</I>, December 1998.</p>
<p><a name="3"></a>[3]  As you may surmise, I recently read Spencer Johnson&#146;s book about dealing with change, <I>Who Moved My Cheese?</I></p>
<p><a name="4"></a>[4]  I would be severely amiss, of course, if I didn&#146;t mention some related must-reads: <I>Generative Programming</I> by Czarnecki and Eisenecker, and <I>Modern C++ Design</I> by Andrei Alexandrescu. Pioneering work related to template metaprogramming surfaced in David Vandervoorde&#146;s and Al Vermuelen&#146;s independent work on <I>Expression Templates</I>.</p>
<p><a name="5"></a>[5]  <I>C++ Report</I>, November-December 1994. This magazine is no longer available, but the article appears on Scott Meyers&#146; <I>Effective C++</I> CD-ROM.</p>
<p><a name="6"></a>[6]  See Herb&#146;s books, <I>Exceptional C++</I> and <I>More Exceptional C++</I>.</p>
<p><a name="7"></a>[7]  From Spencer Johnson, M.D. <I>Who Moved My Cheese?</I> (Putnam, 1998). </p>
<p>Chuck Allison<br>
Senior Editor<br>
<B>cda@freshsources.com</B></p></blockquote></body></html>
