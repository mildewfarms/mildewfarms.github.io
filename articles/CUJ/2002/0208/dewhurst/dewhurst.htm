<HTML>   
     <HEAD>
<TITLE>August 2002/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: A Bitwise typeof Operator, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>It'll be a long time before we see a portable typeof operator in Standard C++. In the meantime, here's one based on a brilliant, portable design.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Readers who braved the previous installment of this column may recall that I was greatly put out by the College Board&#146;s dismissal of bitwise operators as &#147;not essential&#148; <a href="#1">[1]</a>. Usually, I can work through emotional issues like this in a month or so, but due to a rather inconvenient change to this journal&#146;s editorial calendar, I&#146;m writing this installment only two weeks after I submitted that one. I&#146;m still steaming, and that means we&#146;re in for more bit manipulation.</p>
<p>As with the previous column, we&#146;ll be using the lower-level (but essential!) bit manipulation operations in combination with more recent techniques. Last time, we used exclusive-or to create two-way pointers for an unusual STL container. This time, we&#146;ll use shifting and masking of raw bits combined with template metaprogramming to approximate a G&ouml;del numbering for the C++ type system, which will then be used to implement a &#147;bitwise&#148; <B>typeof</B> operator <a href="#2">[2]</a>.</p>

<H3><FONT COLOR="#000080">Type Algebras and typeof</FONT></H3>

<p>Most well designed compilers have a notion of a type algebra that is used to construct and manipulate types at compile time. The operations defined in the algebra are operators like <B>dereference</B>, <B>makereference</B>, <B>makearray</B>, etc. These operators are used to construct a name&#146;s type as its declaration is parsed and to construct new types from existing types as names are manipulated in expressions. Note that these types are statically determined compile-time properties of names and expressions, so we can emulate the compiler&#146;s manipulation of types (to a large extent) with simple template metaprogramming techniques. In fact, it&#146;s pretty easy to manipulate a type at compile time once you&#146;ve got one. The trouble is, it&#146;s not always easy to determine the type of an expression so that you&#146;ll have a type to manipulate.</p>

<pre>
template &lt;typename Cont&gt;
void process( const Cont &amp;cont ) {
    Sometype value( cont[0] );
    //...
</pre>

<p>The trouble here is that, while we know that the type of <B>cont</B> is <B>Cont</B>, we have no notion what the type of <B>cont[0]</B> might be. The STL uses convention to solve the problem.</p>

<pre>
typename Cont::value_type value( cont[0] );
</pre>

<p>All STL-compliant containers can be queried for their element type. If we&#146;re not necessarily dealing with STL-compliant containers, and we&#146;re desperate, we can establish our own convention using some sort of ad hoc traits class.</p>

<pre>
template &lt;class Cont&gt;
struct ContainerTraits {
    typedef typename Const::value_type
        Etype;
    //...
};
template &lt;class T&gt;
struct ContainerTraits&lt;MyContainer&lt;T&gt; &gt; {
    typedef T Etype;
    //...
};
//...
typename ContainerTraits&lt;Cont&gt;::Etype
    value( cont[0] );
</pre>

<p>By default, our <B>ContainerTraits</B> assumes an STL-compliant container. We can augment the set of containers by providing a partial or complete specialization of the template. However, convention is costly to design and promulgate; that is, one not only has to establish a convention, one has to convince everyone else concerned to employ the convention. It would be much easier to dispense with convention and simply extract the type of the expression.</p>

<pre>
typeof(cont[0]) value( cont[0] );
</pre>

<p>Some C++ compilers do, in fact, provide a <B>typeof</B> operator as a nonstandard, non-portable extension. In this column and the next, we&#146;ll design and implement an effective, portable <B>typeof</B> facility and make some points about the continued viability of bitwise operators along the way.</p>

<H3><FONT COLOR="#000080">Dysfunctional Deduction</FONT></H3>

<p>One fairly standard approach to uncovering type information about expressions is function template argument deduction. Unfortunately, a template function returns a value of a particular type, not a type.</p>

<pre>
template &lt;typename T&gt;
struct Type {
    typedef T R; // what we want
    enum { // what we get
        isptr = IsPtr&lt;T&gt;::result,
        isconst = IsConst&lt;T&gt;::result,
        isDouble = 
            IsSame&lt;T,double&gt;::result,
        //...
    };
};
template &lt;typename T&gt;
Type&lt;T&gt; extractType( T &amp; )
    { return Type&lt;T&gt;(); }
</pre>

<p>This approach fails because there is no way to access the return type of the instantiated template function, only the return value.</p>

<pre>
extractType(cont[0])::R value
           ( cont[0] ); // error!
Select&lt;extractType(cont[0]).isDouble,
       double,BadGuess&gt;
    // not what we want
    ::Result value( cont[0] ); 
</pre>

<p>In effect, we can collect an arbitrary amount of information about an expression&#146;s type, but we can&#146;t access the actual type. That is, we can determine whether an expression&#146;s type is constant, a pointer, or a pointer to an array of <B>10</B>. If we&#146;re willing to ask a direct question (&#147;Are you a <B>double</B>?&#148;) we can, by chance, uncover the actual type. But there is no direct way to extract the type of an expression. Frustrating.</p>
<p>Well, let&#146;s return a value, then.</p>

<pre>
template &lt;typename T&gt;
struct TypeVal {
    typedef T R;
    static const long typecode;
};
template &lt;typename T&gt;
const long TypeVal&lt;T&gt;::typecode = (long)&amp;typecode;

template &lt;typename T&gt;
TypeVal&lt;T&gt; extractType( T )
    { return TypeVal&lt;T&gt;(); }
</pre>

<p>The value of <B>TypeVal&lt;T&gt;::typecode</B> is unique for each type <B>T</B> used to instantiate <B>TypeVal</B> and can be used to distinguish types. (The value is unique because the static <B>typecode</B> contains its own address, and such addresses are unique.)</p>

<pre>
if( extractType( cont[0] ).typecode
        == TypeVal&lt;char **&gt;::typecode )
    //...
</pre>

<p>Unfortunately, the static <B>typecode</B> member is not an integer constant-expression, and any use of it, as in the conditional above, will be performed at run time rather than compile time. This implies that this approach cannot be used to extract a (compile-time) type. But mapping a type to an integer is not a bad idea.</p>

<H3><FONT COLOR="#000080">Mapping a Round Trip</FONT></H3>

<p>If the root of our problem is obtaining a unique integer constant-expression for each type, we can explicitly associate each type with a unique integer and use old-fashioned function overloading to map a type to its unique integral value.</p>

<pre>
const int DoubleVal = 12; // code for double
const int CharVal = 10; // code for char

template &lt;int v&gt;
struct Int2Int { enum { value = v }; };

Int2Int&lt;DoubleVal&gt; typeCode(double &amp;);
Int2Int&lt;CharVal&gt; typeCode(char &amp;);
</pre>

<p>Note that the overloaded <B>typeCode</B> functions cannot simply return an integral value, since the result of invoking the function would not be an integer constant expression. Instead, we return an object of a unique type that contains an enumerator with the type&#146;s code. In that way, the return value is known at compile time.</p>
<p>Once we&#146;ve mapped a type to an integer constant-expression, we can perform the reverse mapping to regenerate the original type.</p>

<pre>
template &lt;int typecode&gt; struct DeCode;
template &lt;&gt; struct DeCode&lt;DoubleVal&gt;
    { typedef double R;};
template &lt;&gt; struct DeCode&lt;CharVal&gt;
    { typedef char R;};
</pre>

<p>The round trip from type to integer to type again allows us to extract the type of an expression <a href="#3">[3]</a>.</p>

<pre>
DeCode&lt;typeCode(cont[0]).value&gt;::R value( cont[0] );
</pre>

<p>If it so happens that the expression <B>cont[0]</B> has type <B>double</B> or <B>char</B>, we&#146;re in luck. Otherwise, we&#146;ll get a compile-time error. Obviously, we should be able to recognize more types than just <B>double</B> and <B>char</B>. Unfortunately, a macro is the easiest way to accomplish this.</p>

<pre>
#define REGISTER( T, N )\
    Int2Int&lt;N&gt; typeCode(T &amp;);\
    template &lt;&gt; struct DeCode&lt;N&gt; { typedef T R;}
</pre>

<p>This mechanism will allow us to determine the type of any expression whose type has been previously registered. The value of the codes associated with the types is immaterial. If the same code is associated with two different types, then a compile-time error will occur, at least if the registrations occur in the same translation unit <a href="#4">[4]</a>.</p>

<pre>
REGISTER( float, 19 );
REGISTER( std::string, 72 );
REGISTER( char *, 39 );
REGISTER( std::deque&lt;char *const *&gt;, 9031 );
typedef int *(*FP)(std::string);
REGISTER( FP, 42 );
</pre>

<p>Note that the <B>typedef</B> in the last registration is required, since otherwise the macro expansion would result in erroneous syntax in the argument declaration of the <B>typeCode</B> function. Macros. What can you do <a href="#5">[5]</a>? Since we&#146;ve already opened the floodgates, let&#146;s employ yet another macro to simplify the syntax of using our facility <a href="#6">[6]</a>.</p>

<pre>
#define TYPEOF( e ) DeCode&lt;typeCode( e ).value&gt;::R
</pre>

<p>The <B>typeof</B> facility is effective, in that it works (mostly), but it does require explicit registration of every type of interest.</p>

<pre>
template &lt;typename Cont&gt;
void process( const Cont &amp;cont ) {
    TYPEOF(cont[0]) value( cont[0] );
    //...
</pre>

<p>One potential problem with this approach is that the <B>TYPEOF</B> of an expression with reference type will not be a reference, but the dereferenced type. This actually mirrors the behavior of many of the <B>typeof</B> operator extensions mentioned earlier and is conformant with the behavior of the standard <B>typeid</B> operator. (I don&#146;t like this aspect of <B>typeid</B> either.) However, recovering the fact that a name is actually a reference can be difficult or impossible, while it&#146;s trivial to strip a reference modifier from a type. As my old barber used to say, &#147;I can take more off, but I can&#146;t put it back on!&#148;</p>

<H3><FONT COLOR="#000080">G&ouml;del Numbering</FONT></H3>

<p>Explicit type registration can get pretty tedious, even if all the built-in types are preregistered. For example, even if the type <B>int</B> is registered, we still have to register explicitly <B>int *</B>, <B>int **</B>, <B>const int</B>, <B>int (*)[10]</B>, <B>int (*)[11]</B>, and so on.</p>
<p>C++ compiler writers face a similar problem when generating external names for overloaded functions and similar complex language structures. The name of a function in C++ is really a composition of the function identifier and the formal argument types. Typically, the compiler will perform what is known as &#147;name mangling&#148; in order to produce a unique identifier for a (potentially overloaded) function. For example, a function declared as <B>void func( int, char *, double )</B> might be encoded as <B>func__FiPcd</B>. (Note that the return type does not participate in the encoding, although technically it could.) One of the nice things about name mangling is that the encoded name typically has a well-defined internal structure and is, therefore, invertible. That is, we can take the encoded name <B>func__FiPcd</B> and recognize that the function used to generate it took three formal arguments of types <B>int</B>, <B>char *</B>, and <B>double</B> in that order. It would be nice to be able to encode a general type in this way at compile time and then decode it to produce the type used to generate the encoded name. Unfortunately, effective compile-time manipulation of character string literals is not possible.</p>
<p>However, effective compile-time manipulation of integers is both possible and common. If we can find an effective way to &#147;mangle&#148; a type into an integer, then we should be able to decode the integer to restore the type.</p>
<p>This approach is reminiscent of the encoding process the logician Kurt G&ouml;del described in the proof of his famous (and famously difficult) 1931 incompleteness theorem. As a preliminary step in the proof, G&ouml;del describes a structured mapping from a sequence of symbols that represents a mathematical proof to a unique integer <a href="#7">[7]</a>. We&#146;d like to construct an analogous mapping from C++ types to integers; that is, each type would map to a unique integral value. If the encoding process is deterministic and does not lose information, the internal logical structure of the integer can then be decoded to restore the type.</p>
<p>The encoding described here is just one of many reasonable possibilities. The representation of a base type like <B>int</B> or <B>std::string</B> will be a unique integer value set by the registration process described earlier. For convenience we will restrict the value so that it is representable in a specified number of bits. (A more sophisticated implementation might encode the length of the field in the field itself.)</p>
<p>A pointer modifier applied to a base type, as in <B>int *</B> or <B>std::string *</B>, would be represented by shifting the base type encoding left an appropriate number of bits and appending an integer code representing the pointer modifier.</p>

<IMG SRC="emb1.gif">

<p>Since the concatenation of base type and pointer modifier codes is itself a unique code for the pointer-modified base type, we can construct a pointer to a pointer (to a pointer, etc.) to the base type by repeating the process. The type qualifiers are handled for both base and modifier codes by setting specific bits within each field. For example, the integer code for the pointer modifier might be <B>0x01</B>, a constant pointer <B>0x09</B>, a volatile pointer <B>0x11</B>, and a constant volatile pointer <B>0x19</B>. The handling of the reference modifier is similar to that of the pointer modifier. Other type modifiers are handled in a similar fashion. The array modifier must include the array bound.</p>

<IMG SRC="emb2.gif">

<p>A pointer to a class member must include the class type. The class type is simply the registered code for the class.</p>

<IMG SRC="emb3.gif">

<p>The function modifier is a bit more involved and requires a little more finesse. Because the return type and argument types can be of any length, it&#146;s necessary to distinguish where one type ends and another begins. One way to do this is to record the number and length of the argument types. For example, function types with zero, one, and two arguments could be encoded as follows.</p>

<IMG SRC="emb4.gif">

<p>Note that each of these encodings is recursively defined. That is, subsidiary types may themselves be complex types.</p>
<p>Once we have constructed an integer from a type, it&#146;s trivial to decode the integer to restore the type. For example, if the lower <B>N</B> bits of the integer indicate a pointer modifier, then we recursively decode the remainder of the integer encoding (producing, say, type <B>T1</B>) and affix a pointer modifier to the result (producing <B>T1 *</B>). If the lower <B>N</B> bits indicate a pointer to class member modifier, we decode the preceding class type (producing, say, the class type <B>C</B>), then recursively decode the remainder of the integer encoding (producing, say, the type <B>T2</B>), and affix a pointer to member modifier to it (producing <B>T2 C::*</B>).</p>
<p>As a side note, the mapping between types and integers is not one to one. A given type may be represented by different integers. For example, if we register <B>int *</B> directly with the <B>REGISTER</B> macro, both the registered value and a different value constructed from <B>int</B> and the pointer modifier will map to <B>int *</B>. This is not a problem unless the integer values are used directly. For example, the two different integer values for <B>int *</B> will not compare equal although they represent the same type. If we&#146;re careful to register only base types, however, each type will correspond to a single encoding. Of course, there will also be an infinite number of integer values that do not correspond to any type, because they will not be well formed according to the encoding rules.</p>
<p>That&#146;s basically it. The only major problem is the limited set of integers sizes available in C++. If the maximum integer size is 32 or 64 bits, this mechanism will not be able to encode complex types.</p>

<H3><FONT COLOR="#000080">Next Time</FONT></H3>

<p>Next time, we&#146;ll get into serious bit manipulation. First, we&#146;ll solve the problem of performing logical operations on integers of unbounded length at compile time. Then we&#146;ll implement some rather involved recursive compile-time bit-twiddling using template metaprogramming and send a big &#147;so there!&#148; to the College Board.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  S. C. Dewhurst. &#147;Common Knowledge: Running Circles Round You, Logically,&#148; <I>C/C++ Users Journal</I>, June 2002.</p>
<p><a name="2"></a>[2]  I originally started thinking about this problem after reading Koenig and Moo&#146;s interesting &#147;C++ Made Easier: Naming Unknown Types&#148; (just perform a Koenig lookup in the February 2002 <I>CUJ</I>), in which the authors mention briefly the problems posed by the unavailability of a portable <B>typeof</B> operator. (Beware that any article that is even indirectly concerned with Andy Koenig will inevitably contain a pun. A bad one, typically.)</p>
<p><a name="3"></a>[3]  This is a simplified version of a technique described by Bill Gibbons in &#147;A Portable &#146;typeof&#146; Operator,&#148; <I>C/C++ Users Journal</I>, November 2000.</p>
<p><a name="4"></a>[4]  This implies that it might be best to centralize registration. There&#146;s at least one deranged person on every project who would actually like to write a script to extract and centralize <B>REGISTRATION</B>s from all the project source as a step in the build. Please leave me out of it.</p>
<p><a name="5"></a>[5]  For one thing, you can wrap the <B>typedef</B> in a template and extract the syntactically simpler type name as a member of the template. Gibbons uses this approach in his article <a href="#3">[3]</a>.</p>
<p><a name="6"></a>[6]  Note that, contrary to standard advice, we have not parenthesized this <B>TYPEOF</B> macro. What would happen if we did? See why I dislike macros?</p>
<p><a name="7"></a>[7]  See Nagel and Newman&#146;s <I>Godel&#146;s Proof</I> (NYU Press, 1958) for a pleasant description of the numbering scheme.</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>
</blockquote></body></html>
