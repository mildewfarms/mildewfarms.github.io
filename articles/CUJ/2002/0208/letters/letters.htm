<HTML>   
     <HEAD>
<TITLE>August 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>
<hr><p>Hello,</p>
<p>I read Tomer Abramson&#146;s short article identified above with interest. For the benefit of less experienced developers, however, he seemed to casually gloss over the issues of actually creating the correct type of events required to support his functionality.</p>
<p>For example, in his first example class <B>RWLock</B>, he shows the constructor with a comment <B>/* create events */</B>. At the very least, Tomer should have pointed out that for his <B>RWLock</B> class to work correctly, these events must be created as Auto-Reset events with an initial state of signaled. Otherwise, the <B>Acquire</B> methods simply wait forever.</p>
<p>Kevin Frey</p>

<p><I>Hi Kevin,</p>
<p>Thank you for your comment. You are definitely right.</p>
<p>The only excuse I have for not supplying the full code for the events creation is that I wanted to keep things as short and simple as possible (which eventually turned out to be too short...).</p>
<p>So, here is the full code for the constructor:</I></p>

<pre>
RWLock() : m_nReaders(0)
{  
  m_hDataEvent = CreateEvent
    (NULL, FALSE, TRUE, NULL);
  hReadersEvent = CreateEvent
    (NULL, FALSE, TRUE, NULL);
 }
</pre>

<p><I>And of course, when you add the </I><B>m_hAnotherDataEvent</B><I> event (to support multiple locks), you should create it exactly in the same manner as the two events above.</p>
<p>Regards,</p>
<p>Tomer Abramson</I></p>

<hr><p>Patrik Tennberg,</p>
<p>One note on your great article on multithreading: in your May 2002 issue of <I>C/C++ Users Journal</I> on page 22, you have a paragraph titled &#147;TLS on Other Platforms.&#148; The first sentence states: &#147;Java has no explicit support for TLS...&#148;. As of JDK 1.2, Java does support TLS via its <B>ThreadLocal</B> class.</p>
<p>Sun&#146;s documentation on the <B>ThreadLocal</B> class is available at: &lt;http://java.sun.com/j2se/1.4/docs/api/java/lang/ThreadLocal.html&gt;.</p>
<p>Before JDK 1.2, you had to simulate TLS as you describe in the article, though.</p>
<p>Nathan Ciliberto</p>

<p><I>Hi Nathan,</p>
<p>You are right &#151; I have spent far too many hours in browser land (where JDK 1.1.8 is king), so I have missed this little gem. Using <B>ThreadLocal</B> classes, you can emulate WIN32 thread-local storage perfectly. We use </I><B>collection.jar</B><I> for our browser-based projects, and they give access to all 1.2 collection classes even in 1.1.8.</p>
<p>I was actually reviewing code for a project when I saw that the developer had used <B>ThreadLocal</B>, and I then immediately thought about my oversight.</p>
<p>Thanks for pointing this out.</p>
<p>Patrik Tennberg</I></p>

<hr><p>Hi,</p>
<p>Reading the &#147;Common Knowledge&#148; column in the April 2002 issue of <I>CUJ</I>, I found the techniques (e.g., testing for type equality) interesting, but unfortunately found that one part of the column is based on a faulty assumption. I&#146;m not certain whether it is a simple error, or that the techniques described in the column encourage such over use (leading to maintenance problems later on). For the <B>MultiIn</B> iterator, it is stated that &#147;<B>operator==</B> is fundamentally different depending on whether <B>In1</B> and <B>In2</B> are the same type or not.&#148; It then gives an implementation of <B>operator==</B> if the types are equal. No explanation is given, and there are many good reasons for not using the special <B>operator==</B>:</p>
<OL>
<LI>If we have <B>a==b</B>, we should be able to guarantee that <B>++a==++b</B>, and similarly for <B>--</B> (if applicable). In fact this holds for neither of the two definitions of <B>operator==</B>. To meet that criteria, <B>operator==</B> should be defined as:</LI>
<pre>
bool operator==(const MultiIn&amp;that) const {
  return first_==that.first_ &amp;&amp; c1_==that.c1__
    &amp;&amp; e1_==that.e1_ &amp;&amp; c2_==that.c2_;
}
</pre>
<p>This removes all complex if-statements and works splendidly for comparing against the end of the sequence, and it guarantees that if <B>a==b</B>, then <B>a</B> and <B>b</B> will behave the same.</p>
<LI>One use of <B>MultiIn</B> would be to send the same sequence twice to a function (e.g., <B>copy(multiIn(d1,d1),multiEnd(d1,d1),...);</B>). With the special <B>operator==</B>, it will only be copied once. I would not like that as a user of a template.</LI>
<LI>It does not generalize to the case <B>MultiIn&lt;In1,MultiIn&lt;In1,In1&gt; &gt;</B> since <B>In1</B> and <B>MultiIn&lt;In1,In1&gt;</B> are not the same type. It sort of covers <B>MultiIn&lt;In1,MultiIn&lt;In2,In2&gt; &gt;</B>, but not <B>MultiIn&lt;In1,MultiIn&lt;In1,In2&gt; &gt;</B>!</LI>
<LI>It does not generalize to the case where we have conversion operators between the iterators (e.g., <B>MultiIn&lt;T::iterator, T::const_iterator&gt;</B>). I believe that one part of the problem is that it is too easy to make a template specialization behave in other ways (e.g., <B>std::vector&lt;bool&gt;</B> and the above <B>MultiIn&lt;In1,In1&gt;</B>). Basically, we do not always follow some &#147;Liskov&#148; substitution principle for template specializations. (If a program works for the unspecialized template, it should work the same for the specialized version.) Without such a guarantee, correct programs will suddenly break when adding template specializations. Following such a principle would ensure that <B>multiIn&lt;In1,In1&gt;</B> was only specialized for <I>efficiency</I> and for adding special operations that do not make sense for the general <B>multiIn</B>.</LI>
</OL>
<p>Best regards,</p>
<p>Hans Olsson</p>

<p><I>Hans,</p>
<p>Thank you for your interesting comments on the article. I would like to re-emphasize that the purpose of the article was not to recommend the use of </I><B>MultiIn</B><I> in production code, but to show how easily simple metaprogramming techniques could be applied in a design. However, let me try to justify my approach to the implementation by addressing each of your points below. </p>

<p>1. If we have <B>a==b</B>, we should be able to guarantee that <B>++a==++b</B>, and similarly for <B>--</B> (if applicable). In fact this holds for neither of the two definitions of <B>operator==</B>. To meet that criteria, <B>operator==</B> should be defined as:</I></p>

<pre>
bool operator==(const MultiIn&amp;that) const {
  return first_==that.first_ &amp;&amp; c1_==that.c1__
    &amp;&amp; e1_==that.e1_ &amp;&amp;
c2_==that.c2_;
}
</pre>
<p><I>It is indeed the case that, for a forward iterator, the Standard states that incrementing (or decrementing) iterators that compare equal will result in iterators that still compare equal (though this guarantee does not have to hold for input iterators). However, it is also the case that the Standard guarantees for all iterator types that two iterators will compare equal if and only if the addresses of the elements to which they refer compare equal. The solution you present above satisfies the former requirement but not the latter, whereas mine satisfies the latter but not the former. I would like to claim that my approach is preferable, since it would allow iterators from two different <B>MultiIn</B> sequences to be compared successfully, even if the composed sequences themselves are different. For example, if I were to compose two different <B>MultiIn</B>s from three lists &#151; one from the first and second list, and one from the second and third list &#151; I would like the iterators to compare equal if they referred to the same element of the second list. In fact, neither of our approaches is standard and I can&#146;t claim that a <B>MultiIn</B> is ever a forward iterator under either of our implementations, though I can (I believe) still make that claim in the case of the input iterator.</p>
<p>This problem of running into mutually incompatible guarantees seems to be a common one when extending the STL into areas that were perhaps not foreseen during its original design. (For example, in the June issue of </I>CUJ<I>, &#147;Common Knowledge&#148; features a construct I&#146;ve decided to call a &#147;fickle-forward&#148; iterator, which does not fall squarely into either the forward or the bidirectional iterator category.) </p>
<p>2. One use of <B>MultiIn</B> would be to send the same sequence twice to a function (e.g., <B>copy(multiIn(d1,d1),multiEnd(d1,d1),...);</B>). With the special <B>operator==</B>, it will only be copied once. I would not like that as a user of a template.</p>
<p>I&#146;m sorry to say that I have not observed this behavior in any of the implementations of operator </I><B>=</B><I> that appeared in the article. </p>
<p>3. It does not generalize to the case <B>MultiIn&lt;In1,MultiIn&lt;In1,In1&gt; &gt;</B>, since <B>In1</B> and <B>MultiIn&lt;In1,In1&gt;</B> are not the same type. It sort of covers <B>MultiIn&lt;In1,MultiIn&lt;In2,In2&gt; &gt;</B>, but not <B>MultiIn&lt;In1,MultiIn&lt;In1,In2&gt; &gt;</B>! </p>
<p>4. It does not generalize to the case where we have conversion operators between the iterators (e.g., <B>MultiIn&lt;T::iterator, T::const_iterator&gt;</B>).</p>
<p>I don&#146;t think it&#146;s reasonable to expect a <B>MultiIn</B> specialization to generalize to those cases, since a <B>MultiIn&lt;I,I&gt;</B> is a different type from <B>I</B>, and there is no guarantee that a <B>const_iterator</B> type has any association with that of the corresponding non-<B>const</B> iterator other than the required existence of a conversion. The abstract behavior of both the general and specialized versions of <B>MultiIn</B> is (intended to be) identical, and the purpose of the specialization in the case of identical iterator types is purely for efficiency.</p>
<p>This brings us to your final point regarding the danger that template specialization may introduce unintended changes in semantics. I agree that substitutability is a goal with any specialization that is intended to augment an existing public interface, just as it is with run-time polymorphism. Run-time polymorphism is invaluable for leveraging object code (no recompliation necessary) through the addition of substitutable derived classes. Compile-time polymorphism permits similar leveraging of source code (no editing necessary) provided that the overloaded or specialized versions of components fulfill the guarantees specified by the more general versions. I agree also that either form of polymorphism permits extension of the capabilities of the base, provided that the base contract is fulfilled. </p>
<p>Steve Dewhurst</I></p>

<hr><p>Dear Editor:</p>
<p>On page 60 in <I>CUJ</I> May 2002, David Binner asked about &#147;best practices&#148; in scientific applications, such as matrix inversion, numerical integration, and root finding.</p>
<p>For matrix inversion, check out &lt;www.research.att.com/~bs/C++.html&gt;, where POOMA from LANL, Blitz++ from University of Waterloo, MTL from University of Notre Dame, and ROOT from CERN are mentioned.</p>
<p>For numerical integration and root finding: check out June 2001 of <I>C/C++ Users Journal</I>.</p>
<p>Thanks,</p>
<p>Qiang Liu</p>

<hr><p><I>CUJ</I>,</p>
<p>Kudos to both Angelika Langer and Klaus Kreft for their extremely well written and informative April 2002 <I>Java Solutions</I> article (&#147;Secrets of <B>equals</B>&#148;). The article should be mandatory reading for all Java programmers regardless of experience and skill level.</p>
<p>Pat Paternostro</p>

<p><I>See the </I>Java Solutions<I> supplement to </I>CUJ <I>this month for Langer and Kreft&#146;s follow-up article, &#147;Implementing <B>equals</B> for Mixed Typed Comparison.&#148; &#151; ap</I></p>
</blockquote></body></html>
