<HTML>   
     <HEAD>
<TITLE>January 2002/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>
<H3><FONT COLOR="#000080">A Simple Collection of Bits</FONT></H3>

<p>In Redmond, Washington last October, I attended the C++ standards committee meeting for the first time in five years. Many faces were familiar, as were the procedures. There were two noticeable differences from previous meetings, however: 1) all members had their laptops constantly hooked up to the Internet, allowing us to spend as much time reading mail and playing games as we did listening, so almost every statement of consequence had to be repeated before action could be taken (kudos to Matt Austern for his patience with the Library Group), and 2) there was a whole lot more experience with advanced C++ techniques and concerns in the brains of Smart People there to help the committee make better decisions. So I guess things sort of balanced out.</p>
<p>Perhaps the most noteworthy item on the committee&#146;s To Do list was to discuss what should constitute C++0x. (Yes, gentle reader, it&#146;s time again for a new version of C++). See this month&#146;s installments of &#147;Sutter&#146;s Mill&#148; and &#147;The Standard Librarian&#148; for interesting copy on that topic.</p>
<p>Perhaps less noteworthy but still noticed by This Prodigal were the not-so-subtle barbs levied at <B>valarray</B> and <B>vector&lt;bool&gt;</B>. The <B>valarray</B> class template, as you may recall, is the slice-&#145;em-and-dice-&#145;em array class defined by and for scientific programmers. Supposedly no one is using this &#147;embarrassment.&#148; (If anyone &#147;out there&#148; is actually using it, please let me know.) Even more maligned is <B>vector&lt;bool&gt;</B>, the STL-ized version of the <B>bitstring</B> class I proposed and which was accepted into the standard library in 1993. I actually proposed two companion classes: <B>bitset</B> and <B>bitstring</B>. <B>bitset</B> holds bits the number of which is fixed at compile time, and was the first (and only?) class in the library to use a non-type template parameter. <B>bitstring</B> was a dynamic version of <B>bitset</B> &#151; less efficient but more flexible (the quintessential trade-off). Both classes overloaded <B>operator[]</B> to use proxied indexing to allow for the optimization of packing bits into words. It seemed like a good idea at the time. I needed both in my work, so I proposed them, the committee accepted them, and that settled it.</p>
<p>And then along came STL. It was &#147;obvious&#148; that <B>bitstring</B> was just a simple sequence of bits, so the <B>vector&lt;bool&gt;</B> specialization took its place. As the requirements for STL containers were tightened up, I had to leave the committee, and like the proverbial neglected stepchild, <B>vector&lt;bool&gt;</B> was soon forgotten... until the Standard was finished and people actually started using the library. It turns out the <B>vector&lt;bool&gt;</B> is not a container after all; the proxy class gets in the way of getting a direct reference to an individual bit (of course). Furthermore, <B>operator[]</B> is defined, but the equivalent of a random access iterator is not. It is not possible, therefore, to use most standard algorithms on a <B>vector&lt;bool&gt;</B> object. So here we have a specialization of a container that itself is not a container.</p>
<p>Fine. I always thought we should have left <B>bitstring</B> alone anyway. But I thought a lot of things (like we should be able to define conversion operators to be <B>explicit</B>, just like single-arg constructors, for example). It turns out that the <B>bitstring</B> will reappear in a more modern form in a future proposal from that fleet of Smart People I alluded to in the first paragraph above. Then maybe we&#146;ll have a more politically correct collection of bits (for those of us who care). </p>
<p>Chuck Allison<br>
Senior Editor</p>
</blockquote></body></html>
