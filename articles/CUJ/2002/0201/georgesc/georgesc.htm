<HTML>   
     <HEAD>
<TITLE>January 2002/Code Generation Templates Using XML and XSL</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Mixed-Language Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Code Generation Templates Using XML and XSL</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Cristian Georgescu</FONT></H3>

<BLOCKQUOTE>
<p>XML is indisputably the long-awaited lingua franca for defining and transmitting structured data. With a little help from XSL, it can also generate C++ code for you.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Dealing with complexity is one of the biggest challenges of programming. There is a great need for tools that help us to better understand and manage software complexity. Such tools would not only help create better code, but would also increase software development productivity. Code generators are tools that generate complex code from a simpler model. Code generators are therefore an ideal candidate for helping cope with software complexity.</p>
<p>XML is an open standard of the W3C (World Wide Web Consortium) designed for describing structured data. XSL (eXtensible Stylesheet Language) is a companion language used to transform and format XML. While XML is a way of representing information, XSL is the language for manipulating information <a href="#1">[1]</a>.</p>
<p>XML and XSL have emerged from the need to exchange and present data over the Internet. Another reason for the emphatic acceptance of XML is that this technology has an unprecedented capability to yield surprisingly elegant solutions for the most unexpected problems. And perhaps the best kept secret of today&#146;s hype around XSL is that it gives you the power to create your own code generators. Using XML and XSL together to create custom code generation templates may be yet another killer app for these two technologies.</p>
<p>In this article, I will explore the possibility of creating custom code generators using XML and XSL by presenting a simple example. XML will contain a representation of the conceptual model of the problem, whereas XSL will do the work of generating the code, based on information extracted from the XML model.</p>
<p>I assume the reader already knows what XML is and how it is structured, as well as the basics of XSL. There are many books and sources that cover XML and XSL in more detail. For a detailed introduction to these topics, a good starting point is <a href="#2">[2]</a> and <a href="#3">[3]</a>. For in-depth coverage of XSL, see <a href="#4">[4]</a> and <a href="#5">[5]</a>.</p>

<H3><FONT COLOR="#000080">Code Generators</FONT></H3>

<H4><FONT COLOR="#000080">Coping with Complexity</FONT></H4>

<p>A difficult problem will usually lead to a difficult solution and a complex program. Good design can lead to simpler and more understandable code, but there are limits to what good design can do. Mixing the information contained in a conceptual model with the artifacts of the language obscures the ideas behind the code, makes tracking the requirements into code more difficult, and affects the capacity to make easy changes to the implementation. One way to address this issue is to separate the conceptual model from the process of converting the model into code and to use a code-generating tool to create the final code.</p>
<p>A code generator has two inputs: the information model containing any data describing the conceptual model of the problem domain and the implementation logic that contains the processing instructions necessary to generate the code (see <a href="fig1.htm">Figure 1</a>). A meta-model that describes the structure of the information model is also necessary. The meta-model is a model&#146;s model that contains metadata or information about information. A second type of code generator has a more elaborate architecture that involves the creation of an intermediate design model and possibly iterating through several design models before the final step of code generation (see <a href="fig2.htm">Figure 2</a>).</p>
<p>Having a separate information model allows requirements to be mapped directly to the elements of this model. A separate implementation logic, on the other hand, facilitates changes in the implementation. These changes can be either small coding style changes or more drastic ones like switching to a different implementation language. Any redundancy in the generated code will not affect the information model, but rather it will be dealt with by the implementation logic.</p>

<H4><FONT COLOR="#000080">The Case against &#147;Copy and Paste&#148;</FONT></H4>

<p>Everybody agrees that using &#147;copy and paste&#148; is evil because it leads to code duplication that makes the resulting code more difficult to maintain. Factoring out the redundancy in a separate function or a class is the better approach. But a fact of life remains: &#147;copy and paste&#148; is not only a fast and dirty way to reuse code, but, in some cases, it is also the only alternative.</p>
<p>When dealing with code reuse, not all languages are created equal. C++ has arguably the most powerful built-in language tools for code reuse: inheritance, templates, and macros. Yet there is intrinsic code redundancy required by C++ that may be difficult to avoid. For instance, the duplication of a method signature declared in the <B>.h</B> file and implemented in the <B>.cpp</B> file demands that changes to one parameter require changes to be made in two different places in code: the <B>.h</B> file and the <B>.cpp</B> file.</p>
<p>This is just the tip of the iceberg. A bigger source of redundancy is that during the translation of a conceptual model into code, one piece of otherwise atomically indivisible information cannot always be mapped to only one language artifact. This leads to redundancy in code consisting of the same piece of information having to be repeated in different places in code. Redundancy makes the code more difficult to understand, as well as more resilient in the face of changes.</p>
<p>As an example, consider a simple <B>Employee</B> class with only a few properties. The conceptual model of the class is presented in <a href="fig3.htm">Figure 3</a>. Using a common language idiom, a property is implemented as a private field with associated public <B>get</B> and <B>set</B> methods. The resulting design model and code is also presented in <a href="fig3.htm">Figure 3</a>. In this approach, the property name and its type are the pieces of information that have to be duplicated in several places in code.</p>
<p>Other languages, like the new Microsoft C#, may have explicit support for properties, by introducing an additional language feature and thus making the implementation of properties less reliant on the vilified &#147;copy and paste.&#148; However, there is no language that can be infinitely extensible in order to incorporate all desirable features needed by a scrupulous no &#147;copy and paste&#148; policy.</p>
<p>Yet another source of information duplication appears when additional production-related issues are addressed by adding code to an initially simple class prototype. Real production code often requires additional error-handling code, unit tests, and extensive documentation. A simple class may need a wrapper to be used as a command-line tool or as a COM component. In the case of a COM wrapper around an existing C++ class, the class information will be duplicated in an IDL file, and COM-related support has to be added, usually by delegating the wrapper calls to a contained object. A GUI interface for the COM component will require some Visual Basic code to display and manipulate the class functionality. Persistence to a relational database will require SQL code to create underlying tables for storing the class objects, as well as SQL code to select, update, insert, and delete rows in these tables. The final code required by a simple class in the real world may contain thousands of lines distributed over many files containing code written not only in C++ but also in other languages like SQL, Visual Basic, and Java. The information contained in these files is largely redundant, stemming from maybe just a few properties.</p>

<H4><FONT COLOR="#000080">Other Advantages</FONT></H4>

<p>Having the code generated automatically makes the task of enforcing consistent coding conventions much easier. If you ask two people to write a simple <B>Employee</B> class, you will probably get two different versions of the code. Using a code generator to create <B>Employee</B> will ensure coding consistency. Any set of coding conventions, style, rules, and best practices can be uniformly enforced for all classes by incorporating them in the code generator.</p>
<p>The technique of restructuring code, known as refactoring, is part of every programmer&#146;s tools of the trade, but it has always been a tedious and error-prone manual &#147;cut and paste&#148; activity. By having the implementation logic removed from the code and put into the code generator, the refactoring process is simplified by replacing the need of low-level &#147;cut and paste&#148; with higher-level modifications of the code generation logic.</p>
<p>The only drawback of automatic code generation is the overhead incurred by the need to create the information model and to write the implementation logic. The danger lies in running into a hodgepodge of model metadata, code generating, and auxiliary code files written in different languages. But this is far outweighed by the fact that different people with different skills can work on the two different models: business knowledge goes directly into the information model, whereas programming skills are required to create the implementation logic. This approach radically changes the software development process by separating the modeling activity from the design and implementation. While collaboration is still required between the business expert and the programmer, they can work independently on the business information and the implementation. One big advantage is that the separation of the code generation from the information model encourages the division of work between business expert and programmer.</p>

<H3><FONT COLOR="#000080">XSL Code Generators</FONT></H3>

<H4><FONT COLOR="#000080">Why XML and XSL?</FONT></H4>

<p>An important decision related to custom code generators is the format used for the representation of the information model and the implementation logic.</p>
<p>XML has established itself as a widely accepted industry standard of a universal data format to be used by applications that exchange data over the Internet in an application-independent and platform-neutral manner.</p>
<p>XML standardization, acceptance, and flexibility as a data format make it an obvious choice to store the information model. Therefore, a natural choice for the implementation logic is to write it as an XSL stylesheet that uses the information contained in the XML information model to generate the final code.</p>
<p>Alternatively, XSL can be used to indirectly generate a UML model rather than directly generate code. The MOF (Meta Object Facility) language defined by OMG can be used for describing UML-based design meta-models. Efforts to provide a standard way to represent UML models as XML are under way. XMI (XML Metadata Interchange Format) is an XML-based representation of UML. Generating a design meta-model from an XML information model can be done by using either XMI or MOF. Converting to an intermediate XMI model should be straightforward because XSL simplifies the XML to XML transformations. Such an approach to code generation, with an intermediate design model, is presented in <a href="fig2.htm">Figure 2</a>.</p>
<p>I will show how to build an XSL code generation template that can read XML files containing the information model and write out the resulting generated code. I will concentrate on a simple example that will give the reader a better understanding of how to use XML and XSL to write custom code generators.</p>
<p>One important advantage of using an XSL stylesheet for translating the information model into code is that XSL is a declarative language. XSL is declarative (as compared to procedural) in the sense that it describes results of the translation rather than the steps to perform it. This pervades in a higher-level of abstraction. XSL also has some procedural control structures, but these features are somehow limited when compared to the power offered by a real procedural language. Therefore, complex code generation logic is better addressed by a combination of XSL and a procedural language <a href="#6">[6]</a>.</p>

<H4><FONT COLOR="#000080">How It Works</FONT></H4>

<p>Any XML document is structured like a tree with the nodes having a name, a text value, named attributes, and child sub-nodes. XML&#146;s simple and generic design makes it possible that virtually any kind of information can be stored in an XML document. An XML document can be associated with a DTD (Document Type Definition) document that contains metadata describing the structure of the XML document. The XML document can be checked against the corresponding DTD file to ensure that its structure is valid.</p>
<p>An XSL stylesheet consists of a set of rules that determine how specific elements from the XML document should be processed. Each rule has a match criteria that specifies the pattern of elements for which the rule is activated. Each rule also has an associated transformation that acts on the matching elements. Rules are composed hierarchically because each rule can trigger other rules by using the <B>&lt;xsl:apply-templates&gt;</B> tag that indicates the hot spots where other rules can bind and become active.</p>
<p>The following XSL tags are most frequently used and their meaning is intuitive. <B>&lt;xsl:value-of&gt;</B> is used to select the value of an element from the XML document. <B>&lt;xsl:text&gt;</B> is used to specify custom text. <B>&lt;xsl:if&gt;</B> and <B>&lt;xsl:when&gt;</B> are the XSL analog of if-then-else and switch control structures, while <B>&lt;xsl:for-each&gt;</B> iterates through a collection of XML elements. <B>&lt;xsl:include&gt;</B> simply includes the contents of one stylesheet into another.</p>
<p>An XSL processor is required to apply an XSL stylesheet to an XML document. The XSL processor reads both the XML document and the XSL stylesheet, and then applies a set of transformation rules from the stylesheet to the XML document in order to produce the desired output. In this article, I have used XT, a freely available XSLT processor developed by James Clark. For additional information on installing and using this program as well as other tools and information related to XML and XSL, see <a href="#7">[7]</a>.</p>
<p>The code generator will contain the following files (see <a href="fig1.htm">Figures 1</a> and <a href="fig2.htm">2</a>):</p>

<UL><LI>   The meta-model with the XML metadata schema described in a DTD file.</LI>
<LI>   The information model stored in XML files.</LI>
<LI>   The XSL code template files used to generate the source code.</LI>
</UL>

<p>The data representing the information model that is stored in the XML file has to follow the structure defined by the DTD meta-model file. The XSL template extracts information from the XML file and generates the source code.</p>
<p>The software development process tailored for the XML and XSL code generation techniques (see <a href="fig1.htm">Figure 1</a>) consists of several steps:</p>

<OL><LI>1.  The business analyst creates the conceptual model that specifies the structure of the data for the code generator in the form of XML metadata in a DTD file. The metadata includes the name of the elements that can be contained in the XML file and their possible attributes, as well as the relationship between these elements.</p>
<p>For example, a first cut at the UML-like meta-model from <a href="fig1.htm">Figure 1</a> might only be composed of <B>class</B> elements. Each <B>class </B>should have a required <B>name</B> attribute:</p>
<pre>
&lt;!ATTLIST class
  name NMTOKEN #REQUIRED&gt;
</pre>

<p>Each <B>class</B> element could optionally have a <B>properties</B> element (&#147;zero or one&#148; cardinality of an element is designated by <B>?</B>):</p>

<pre>
&lt;!ELEMENT class (properties?)&gt;
</pre>

<p>The <B>properties</B> element is a collection of elements that could contain several <B>property</B> elements (&#147;zero or many&#148; cardinality is designated by the <B>*</B>):</p>

<pre>
&lt;!ELEMENT properties (property*)&gt;
</pre>

<p>Each property should have a required <B>name</B> attribute and a required <B>type</B> attribute:</p>

<pre>
&lt;!ATTLIST property
  name NMTOKEN #REQUIRED
  type CDATA #REQUIRED&gt;
</pre>

<p>These DTD statements specify a simplified meta-model that will be expanded to a more realistic example in the following section.</p>
</LI>
<LI>2.  The business expert stores data for the information model in an XML file. This data consists of specific elements with their attributes and their sub-elements. The structure of these elements has to follow the structure defined by the DTD file created in Step 1. For example, an <B>Employee</B> class that has a <B>Name</B> property of type <B>string</B> and a <B>Salary</B> property of type <B>double</B> is stored as the following XML file:</p>

<pre>
&lt;class name="Employee"&gt;
  &lt;properties&gt;
    &lt;property name="Name"
              type="string"&gt;
    &lt;/property&gt;
    &lt;property name="Salary"
              type="double"&gt;
    &lt;/property&gt;
  &lt;/properties&gt;
&lt;/class&gt;
</pre>
</LI>
<LI>3.  The programmer writes the code generation logic in the form of XSL scripts. The XSL scripts containing the code templates extract the data from the information model and use it to generate source code.</p>
<p>For example, the following XSL template operates on the XML elements named <B>class</B> by inserting the C++ keyword <B>class</B>, selecting the <B>name</B> attribute of the current element <B>class</B>, adding the <B>{</B>, activating the templates for the sub-sub-elements <B>property</B> contained in the sub-element <B>properties</B>, and finally inserting the terminating <B>};</B>:</p>

<pre>
&lt;xsl:template match="class"&gt;
 &lt;xsl:text&gt;class &lt;/xsl:text&gt;
 &lt;xsl:value-of select="@name"/&gt;
 &lt;xsl:text&gt;
{&lt;/xsl:text&gt;
 &lt;xsl:for-each
    select="properties/property"&gt;
  &lt;xsl:apply-templates select="."/&gt;
 &lt;/xsl:for-each&gt;
&lt;xsl:text&gt;
};&lt;/xsl:text&gt;
&lt;/xsl:template&gt;
</pre>
</LI>
</OL>

<p>The XSL template for the sub-elements <B>property</B> inserts some indenting white space, selects the attribute <B>type</B> of the current element <B>property</B>, and inserts a white space and the attribute <B>name</B> prefixed by <B>_</B> and terminated by <B>;</B>:</p>

<pre>
&lt;xsl:template match="property"&gt;
 &lt;xsl:text&gt;
    &lt;/xsl:text&gt;
 &lt;xsl:value-of select="@type"/&gt;
 &lt;xsl:text&gt; _&lt;/xsl:text&gt;
 &lt;xsl:value-of select="@name"/&gt;
 &lt;xsl:text&gt;;&lt;/xsl:text&gt;
&lt;/xsl:template&gt;
</pre>

<p>The generated code will be:</p>

<pre>
class Employee
{
    string _Name;
    double _Salary;
};
</pre>

<p>While this is an over-simplified example, it should nevertheless give an idea of the steps involved in writing a code generator.</p>

<H3><FONT COLOR="#000080">A Concrete Example</FONT></H3>

<p>I will expand the previous example to build a non-trivial code generator. I will follow the same step-by-step approach as in the previous section.</p>

<H4><FONT COLOR="#000080">The Meta-Model</FONT></H4>

<p>The meta-model has to be developed by a business analyst, and specifies the structure of the model. Our sample meta-model consists of classes with properties and associated methods. <a href="fig4.htm">Figure 4</a> shows this meta-model using UML. The resulting meta-model is defined in the DTD schema file, <B>Model.dtd</B>, in <a href="list1.htm">Listing 1</a>.</p>
<p>Each <B>class</B> element has a <B>name</B> and belongs to a <B>package</B> that can be mapped to a C++ namespace. Each class has a set of dependencies and uses relationships that map to <B>#include</B> C++ statements. Each class has parent classes that map to C++ base classes. Each class has methods that map to C++ functions and properties that map to C++ data members with additional <B>get</B> and <B>set</B> functions.</p>
<p>Each <B>method</B> element has a list of exceptions, a return type, and a set of parameters. Each of the parameters has a <B>name</B>, a <B>type</B>, and a possible <B>default</B> value. Additionally, methods have a <B>visibility</B> attribute that can take values in the set: (<B>public</B>, <B>protected</B>, <B>private</B>) with a default value of <B>public</B>. Methods also have a <B>modifier</B> attribute that can be <B>virtual</B> or <B>static</B> and a <B>const</B> attribute that can be <B>true</B> or <B>false</B>. The following DTD snippet specifies the structure of the <B>method</B> element:</p>

<pre>
&lt;!ATTLIST method
  name NMTOKEN #REQUIRED
  type CDATA #REQUIRED
  visibility (public | protected |
              private) "public"
  modifier (virtual | static) ""
  const (true | false) "false"&gt;
</pre>

<p>Each <B>property</B> element has a <B>name</B> and <B>type</B>, as well as additional attributes that specify if <B>get</B> and <B>set</B> functions are required and if there is a data member to store the value of the property. All classes, properties, methods, and parameters have an <B>info</B> field that is used for documentation and will map to C++ comments.</p>
<p>Designing the meta-model is perhaps the single most critical step of building the code generator because both the model and the code generator will depend on the meta-model. A carefully thought out meta-model will allow enough flexibility without sacrificing simplicity.</p>

<H4><FONT COLOR="#000080">The Information Model</FONT></H4>

<p>Based on the meta-model, a business expert builds the information model. The information model becomes a repository of business knowledge. In this case, the information model is stored in <B>Employee.xml</B> (<a href="list2.htm">Listing 2</a>). Our example has an <B>Employee</B> that is an <B>Object</B> (no pun intended here) that has a <B>Name</B>, an <B>SSN</B> (Social Security Number), and a <B>Salary</B>. The <B>Employee</B> class has only one very appealing business method: <B>increaseSalary</B>.</p>
<p>The <B>Object</B> class is the root of our inheritance hierarchy, and it is introduced only as an example of handling inheritance relationships. For simplicity, the inheritance is the only class relationship considered here, and other relationships like association or containment are not handled by the XSL code-generating template. Their implementation would closely follow the XSL code that handles the inheritance relationship. The model for the <B>Object</B> class is defined in <B>Object.xml</B> (<a href="list3.htm">Listing 3</a>).</p>
<p>The generation of <B>Employee.h</B> (<a href="list4.htm">Listing 4</a>) that defines the <B>Employee</B> class, based on the XML model in <B>Employee.xml</B> and using the XSL translation logic from <B>CppClass.xsl</B>, can be done with the following command line:</p>

<pre>
C:\&gt;xt Employee.xml CppClass.xsl Employee.h
</pre>

<p>In a similar way, I have generated <B>Object.h</B>, which contains the definition of the class <B>Object</B> (<a href="list5.htm">Listing 5</a>).</p>

<H4><FONT COLOR="#000080">The Implementation Logic</FONT></H4>

<p>CppClass.xsl</B> (<a href="list6.htm">Listing 6</a>) contains part of the XSL code generating template. It mainly consists of the top-level template for the class element defined by <B>&lt;xsl:template match="class"&gt;</B>. This template outputs boilerplate code and, in turn, calls other templates. Boilerplate code that is output as text to the generated file is usually surrounded by the <B>&lt;xsl:text&gt;</B> tag. The templates for handling the <B>#include</B>s and the class inheritance can also be found in <a href="list6.htm">Listing 6</a>. <a href="list7.htm">Listing 7</a> shows the implementation of the <B>CppMethod.xsl</B> stylesheet, which handles the code generation for the C++ class methods.</p>
<p>The code generation always follows the same pattern: the stylesheet writes to the output the code for the current element and then iterates through the sub-elements and calls the corresponding templates associated with each specific sub-element. For instance, in this case, the <B>class</B> template generates the skeleton for the class code and then iterates through all <B>method</B> elements; for each method, it applies the <B>method</B> template. The <B>&lt;xsl:for-each&gt;</B> XSL control structure is used to perform this iteration:</p>

<pre>
&lt;xsl:for-each
  select="methods/method"&gt;
  &lt;xsl:apply-templates select="."/&gt;
&lt;/xsl:for-each&gt;
</pre>

<p>The <B>method</B> template, in turn, generates the method code and iterates through all the <B>param</B> elements by applying the <B>param</B> templates, and so on.</p>
<p>It is straightforward to implement simple language idioms via code generation. In my example, the class properties are translated into <B>get</B> and <B>set</B> functions and an associated data member. Enough flexibility is provided through the XML element attributes so that read-only, as well as read-write, properties can be generated. The translation of properties into code is handled by <B>CppProperty.xsl</B> (<a href="list8.htm">Listing 8</a>).</p>

<H4><FONT COLOR="#000080">Extending the Horizon</FONT></H4>

<p>In an enterprise application, the same business object is distributed across different tiers and is often implemented in different languages: C++, Visual Basic, Java, and SQL. A code generator can use the same information model to automatically generate the corresponding pieces of code in different languages. The task of generating documentation can also be automated by a special XSL stylesheet that extracts only the specific documentation tags and formats them, (i.e., an HTML document).</p>
<p>Up to this point, I have only generated C++ code. However the information model for the <B>Employee</B> class (<a href="list1.htm">Listing 1</a>) is an abstract model not necessarily bound to C++. Only minor modifications are required to the <B>CppClass.xsl</B>, <B>CppMethod.xsl</B>, and <B>CppProperty.xsl</B> templates in order to generate Java code or even Visual Basic code.</p>
<p>In order to prove the power of this approach, I have considered the generation of SQL code that can be used for persisting the C++ objects. The additional <B>SqlTable.xsl</B> and <B>SqlProperty.xsl</B> stylesheets were used to generate the <B>Employees.sql</B> script (all available for download at &lt;www.cuj.com/code&gt;). This SQL script creates an <B>Employees</B> database table that can be used to store the <B>Employee</B> objects.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Code generators can help you cope with software development complexity by separating the conceptual model of the problem from its translation into code. Code generators can save time by generating important amounts of code from smaller information models. They also handle code duplication (&#147;copy and paste&#148;) and help with code refactoring (&#147;cut and paste&#148;) by factoring out the redundant information and by isolating changes to the information model. Increased code quality can be achieved by easily enforcing consistent coding standards during the code generation. Code generators will not replace the need for good design, but they can certainly be made to do a lot of the dirty work for you.</p>
<p>Using XSL to create your own code generators based on models stored in XML files offers the advantage of using XML as a standard and flexible data format together with XSL as a powerful processing language that was specially designed to operate on XML.</p>
<p>The increased leverage over code production and maintenance obtained by using a code generator does comes at the expense of having to create a separate information model, as well as the effort to specify and customize the code generation logic. But the benefits far outweigh the additional overhead, especially in larger projects.</p>
<p>I encourage you to experiment with the code samples provided in this article and to modify them in order to fit specific needs. With minor changes to the XSL templates, code can be generated in Java instead of C++. See &lt;www.cuj.com/code&gt; for the complete source code.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Technically, XSL can be further split into XSLT, which defines the transformations, and XSL Formatting Objects. In this article, I will consistently use XSL to refer to all of the technologies defined under the XSL umbrella.</p>
<p><a name="2"></a>[2]  Elliotte Rusty Harold and W. Scott Means. <I>XML in a Nutshell: A Desktop Quick Reference</I> (O&#146;Reilly &amp; Associates, 2001).</p>
<p><a name="3"></a>[3]  Mark Birbeck, et al. <I>Professional XML</I> (WROX Press, 2000).</p>
<p><a name="4"></a>[4]  Michael Kay. <I>XSLT Programmer&#146;s Reference</I> (WROX Press, 2001).</p>
<p><a name="5"></a>[5]  Neil Bradley. <I>The XSL Companion</I> (Addison-Wesley, 2000).</p>
<p><a name="6"></a>[6]  Another way to extend the present approach is to replace the XSL stylesheet with a C++ or Java program that parses an XML file and walks through the parsed tree-like representation and writes the generated code. This programmatic solution might be more scalable than a simple XSL stylesheet when the XSL code generator logic becomes too complicated.</p>
<p><a name="7"></a>[7]  James Clark. XML resources at &lt;www.jclark.com/xml/&gt;. XT is a free implementation of XSL Transformations available at &lt;www.jclark.com/xml/xt.html&gt;.</p>
<p><a name="8"></a>[8]  John Hubbard. &#147;Building a Professional Software Toolkit,&#148; <I>C/C++ Users Journal</I>, May 2001.</p>
<p><a name="9"></a>[9]  Fred Pace. &#147;Modeling Metadata for API Generation,&#148; <I>MDSN</I>, May 1996.</p>
<p><a name="10"></a>[10]  Fred Pace. &#147;Generating Code Using Templates and Metadata,&#148; <I>MSDN</I>, July 1997.</p>
<p><a name="11"></a>[11]  Mark Pollack. &#147;Code Generation Using Javadoc,&#148; <I>JavaWorld</I>, August 2000.</p>
<p><a name="12"></a>[12]  Chris Sells. &#147;Code Generalization and Replication,&#148; &lt;www.develop.com/genx/code_gen_article.htm&gt;.</p>

<p><i><B>Cristian Georgescu</B> has more than a decade of experience in writing software for the financial industry, aerospace and defense, and energy management. He is currently developing infrastructure software for a major Wall Street financial company. His present professional focus is in enterprise distributed applications. He can be reached at <B>Cristian.Georgescu@worldnet.att.net</B>.</i></p>

<h4><a href="../../../source/2002/jan02/georgesc.zip"></a></h4>

</blockquote></body></html>
