<HTML>   
     <HEAD>
<TITLE>January 2002/Sutter&#146;s Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Toward a Standard C++0x Library, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>Have you hugged your C++ vendor lately? You'll agree that they certainly deserve it as Herb takes us through the sticky wicket of versioning Standard C++.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>I&#146;m writing this just after the Redmond standards meeting in October 2001. The ISO/ANSI C++ Standards Committee has now begun actively soliciting and considering new features that will eventually go into the next version of the C++ Standard, which is colloquially being called C++0x (in contrast to the existing Standard, C++98). For details on how you can participate, see Matt Austern&#146;s column in this issue. At the moment, we&#146;re concentrating primarily on new library features, with little or no change to the existing C++98 core language. The more-distant core changes are also on the radar screen, but still out at the edges.</p>
<p>Beyond the selection of individual features, however, lurks a more fundamental issue: What about migration? Exactly how should the C++0x Standard library be distinguished from the C++98 library? Should it be in a different namespace? What kinds or <I>categories</I> of additions, deletions, and changes might we want to be able to make, and what&#146;s the best way to go about making them? Note that third-party C++ libraries face the same challenges, and the choices made in a new &#147;release&#148; of the standard library ought to be exemplary, demonstrating a method that other libraries should be encouraged to follow in their new releases. No pressure!</p>
<p>You should care about this, because at the end of the day how we end up versioning or migrating the standard library affects you directly. In case you think it doesn&#146;t, consider just one example: Does the compiler you use today, three years after the Standard was passed and four since it was cast in stone, still support both classic and modern templated iostreams, in the name of backward compatibility? Did you ever encounter problems because these facilities had the same name but different specifications in different drafts of the Standard? Food for thought, the more so since there are also still prestandard <B>string</B> and <B>auto_ptr</B> implementations out there. This is one example of the kind of potential problems we would like to avoid creating again.</p>
<p>Here&#146;s a sampling intended to give you a taste for the kinds of common cases that need to be considered, and why they&#146;re not always quite as simple as they seem. None of these are necessarily things the committee is, or is not, going to do, although I picked them because they&#146;re likely examples.</p>

<H3><FONT COLOR="#000080">Adding New Stuff</FONT></H3>
<p>Here&#146;s the simplest case: adding something completely new to the standard library that the C++ community has never seen before.</p>

<pre>
// Example 1: Adding something new.
// How hard can it be?
//
namespace std
{
  template&lt;class In, class Out, 
    class Pred&gt;
  Out copy_if(In first, In last, 
    Out result, Pred p);
}
</pre>

<p>Example 1&#146;s <B>copy_if</B> is a good example of something simple and obvious that we almost certainly want to add. That it&#146;s not already in the Standard is pretty much just an oversight. For more details on <B>copy_if</B>, including how to write your own correctly if you want to, see Item 36 in <a href="#1">[1]</a>.</p>
<p>&#147;Oh, that&#146;s easy,&#148; some might think and wave dismissively while sipping their lattes. After all, adding something new that wasn&#146;t in C++98 does look like the easiest possible case, doesn&#146;t it? And indeed for <B>copy_if</B> it&#146;s pretty easy. But if you&#146;re inclined to think that it&#146;s always so easy, consider this:</p>

<pre>
// Example 2: Adding something new.
// How hard it can be!
//
namespace std
{
  template&lt; /* ... */ &gt;
  class slist { /* ... */  };

  template&lt; /* ... */ &gt;
  class hash_set { /* ... */  };

  template&lt; /* ... */ &gt;
  class hash_multiset { /* ... */  };

  template&lt; /* ... */ &gt;
  class hash_map { /* ... */  };

  template&lt; /* ... */ &gt;
  class hash_multimap { /* ... */  };
}
</pre>

<p>&#147;But that&#146;s still easy,&#148; some may protest. &#147;Those are commonly provided extensions, and commonly used names, but there&#146;s no migration issue here &#151; those names can&#146;t collide with anything in C++98 because they aren&#146;t already in namespace <B>std</B>!&#148;</p>
<p>And that, as they say, is where the detritus meets the rotating ventilation device.</p>
<p>Although C++98 doesn&#146;t put such names into namespace <B>std</B>, more than one standard library implementation does precisely that as an extension. Whether the Standard actually does or should permit library implementations to do that is at the moment the subject of a bit of a vigorous debate, and there&#146;s a fairly strong feeling that allowing it is not a good idea, but it&#146;s also a debate that&#146;s mostly beside the point: the point is that real-world implementations exist that already provide those names in <B>std</B>, that the implementations already vary (which is part of the reason for wanting to standardize such things in the first place), and therefore whatever the committee standardizes will not necessarily be exactly what those implementations already provide. (Even if we were to pick one of the alternative existing implementations, we&#146;d be specifying something that&#146;s different from the other ones.) We have to figure out the best way to live with that to best protect the programmers out there in the trenches who are already using such implementations.</p>
<p>To see how thorny this can get, consider a few major alternatives.</p>
<p><I>Option 1: Standardize existing practice: use the common names in </I><B>std</B>. This is an obvious alternative, and it has the advantage of standardizing what are indeed the well-known names already being used. But it also means that users of standard library implementations that already use those names, expecting different semantics, will have their programs that use those names either stop working or silently change meaning if nothing is done. So, for practical purposes, the best that those standard library implementations can probably do is provide some sort of switch for choosing between the old and the new versions, bending over backwards to avoid ODR (one definition rule) violations, and over time migrate their user base to the new versions. (Which will take years. Classic vs. templated iostreams, anyone?)</p>
<p>So Option 1, while obvious and aesthetically pleasing to many, still screeches a bit when the rubber hits the real-world road: affected users will for years have two versions of the facility with exactly the <I>same name but different semantics</I> (and have to switch with compiler flags or something). Ugh.</p>
<p><I>Option 2: Tweak existing practice: use variant names in </I><B>std</B>. The next-most-obvious alternative, and indeed the one that initially got a good reaction in the Library Working Group on the face of it, was to use a slightly different name for the problematic extensions. After all, if the problem with Option 1 is the unfortunate naming situation, then using different names might help. For example, instead of standardizing hash-based maps using the name <B>hash_map</B>, we could call it <B>hashed_map</B> (which is arguably more accurate anyway), <B>hashmap</B>, <B>hmap</B>, <B>map_hashed</B>, or something else.</p>
<p>Did you spot the parallel issue? Alas, Option 2, although an obvious workaround that can be a tempting compromise on the face of it, also makes rude noises when the rubber hits the real-world road: affected users will for years have two versions of the facility with <I>similar names but different semantics</I>. I&#146;d rather not be the one to repeatedly answer the new frequently-asked-question &#147;What&#146;s the difference between <B>hash_map</B> and <B>hashmap</B>?&#148; although I&#146;m sure that people who like to run obfuscated C++ programming contents, as well as those who enjoy ridiculing C++ for its complexity, would have a heyday with it. It&#146;s arguable whether this is better or worse than Option 1.</p>
<p><I>Option 3: Specialize behavior of the existing </I><B>map</B> to provide hashing through the existing names. For example, we could add &#147;hashing&#148; predicates and partially specialize <B>map</B> on such predicates. Here&#146;s a sketch of the idea (details could vary):</p>

<pre>
namespace std
{
  // Base template:
  // Tree-based semantics.
  //
  template
  &lt;
    class Key,
    class T,
    class Compare = less&lt;Key&gt;,
    class Alloc = 
      allocator&lt;pair&lt;const Key, T&gt; &gt;
  &gt;
  class map { /* ... */ };

  // Partially specialized template:
  // Hash-based semantics.
  //
  template
  &lt;
    class Key,
    class T,
    class Alloc = 
      allocator&lt; pair&lt;const Key, T&gt; &gt;
  &gt;
  class map&lt;Key,T,hash&lt;Key&gt;,Alloc&gt; 
    { /* ... */ };
}
</pre>

<p>The idea is that, this way, all existing uses are supported &#151; when users write any of today&#146;s legal code that uses <B>map</B>s, they get the C++98 tree-based behavior:</p>

<pre>
// use C++98 tree-based
map&lt;string, string&gt; dictionary;
</pre>

<p>To use the hash-based internal representations, they use the version that takes (a possibly-specialized version of) a new <B>std::hash&lt;&gt;</B> template that encapsulates knowledge of the hash function to be used, the desired bucket size or load factor, and other controlling parameters:</p>

<pre>
// use fanciful hash-based
map&lt;string, string, hash&lt;string&gt; &gt; 
  dictionary;
</pre>

<p>Note that in this model the programmer can customize his own hashing and comparison functions by specializing or deriving from the <B>hash&lt;&gt;</B> template.</p>
<p>What do you think of Option 3? It doesn&#146;t change the meaning of existing valid programs, and it avoids the naming problems as much as they can be avoided: affected users will for years have two versions of the facility with different names and different semantics. But this comes at a cost, for the semantics of the normal existing <B>set</B> and <B>map</B> and so forth would be extended in a way that adds complexity and will almost certainly be less intuitive than just using a separate <B>hash_map</B> name would have been.</p>
<p>There are other choices, including just giving up and not standardizing those names, which is probably worse than any of the above. The choices sketched here show the main serious alternatives under discussion at the time of this writing. Each will undoubtedly be analyzed further, and there may be important tradeoffs not mentioned here. In the end, the committee&#146;s choice will be primarily influenced by what is best for all users, including those affected by real-world migration issues.</p>
<p>Note that, regardless which of the above (or other) choices are eventually adopted to resolve this <B>slist</B> and <B>hash_*</B> problem, there is another parallel effort that library implementations in this situation can (and many feel should) pursue. They can begin now to migrate their hash-based containers out of namespace <B>std</B>, before workarounds like <B>std::hash</B> are even specified, much less become final, reducing the problem to the same as the <B>copy_if</B> example and removing the barrier to adopting the obvious default Option 1. There are many who strongly believe that this is the highest quality option, and it&#146;s worth noting that some library implementations have already taken this path. They originally put <B>slist</B> and the <B>hash_*</B> containers into <B>std</B> some years ago, noticed the problem and felt that they&#146;d made a mistake, and have spent years migrating their users away through a three-step process. In the next available release, they moved the containers to their own vendor-specific <B>vendor::</B> namespace and documented that it should be used from there, but provided compatibility headers so that their customers&#146; existing code that relied on those containers being in <B>std::</B> would still work; in the subsequent release, they emitted warnings for use of those facilities via namespace <B>std</B>; and in the third release, it was gone from <B>std::</B> and available only in <B>vendor::</B>.</p>
<p>There are other cases of adding new facilities that I haven&#146;t touched on here. For example:</p>

<UL><LI>   What about adding an overload of an existing nonmember function that is not currently overloaded? That would break currently-working code that tries to take that function&#146;s address without explicitly stating the function&#146;s type via a cast or assignment to a named object, for example.</LI>
<LI>   What about providing new concepts, such as move-construction and move-assignment semantics (very different from copy construction and copy assignment), such as <B>auto_ptr</B> already provides?</LI>
<LI>   What about extending the interface of existing classes, such as giving allocator a <B>realloc</B>-like facility? Should the C++0x containers be extended to use this feature? If so, does that mean C++0x containers shouldn&#146;t work with today&#146;s user-written allocators, which of course don&#146;t know about any <B>realloc</B>-like extension, or should the implementers of the C++0x containers be required to be smart enough to use the new semantics only when they are available?</LI></UL>

<p>Some of these cases can be categorized, but others will probably have to be considered on a case-by-case basis.</p>

<H3><FONT COLOR="#000080">Removing Existing Stuff</FONT></H3>

<p>The next-simplest case is: removing something already in the C++98 Standard library because it&#146;s broken, dangerous, or embarrassing.</p>
<p>I won&#146;t name any of the usual suspects here simply because some of them are contentious, even ones like <B>vector&lt;bool&gt;</B> that are probably not widely relied upon in the field and are pretty much unanimously viewed as broken in that at best it should have been its own container rather than an incompatible specialization of <B>vector</B> &#151; oops, I guess I did name one, so sue me. But since we&#146;re talking about <B>vector&lt;bool&gt;</B>, let&#146;s use it as an example: people could have already written code that relies on its <B>vector</B>-incompatible behavior, such as the extra <B>flip</B> function. I suppose the committee could just decide that probably few enough people rely on that behavior that it would be safe to remove it (or, put another way, the committee could decide that they didn&#146;t give a <B>flip</B>), but that&#146;s still a potentially contentious issue even for this well-known example.</p>
<p>The issue with the items on this short list of wouldn&#146;t-it-be-nice-if-we-could-jettison-them facilities, to a greater or lesser degree, is that they&#146;re already there and people are using them. Even if the Standard were to officially remove them today, they would linger in implementations for years because backward compatibility can&#146;t be ignored; vendors can&#146;t just abandon their existing users who may still be using those facilities.</p>
<p>So, like it or not, most of the existing facilities are probably here to stay, and the focus will be on adding new facilities without repeating the mistakes of the past.</p>

<H3><FONT COLOR="#000080">Mechanics</FONT></H3>

<p>Besides looking at the merits of particular facilities and proposals, there are some more basic questions that need to be answered about the C++0x facilities:</p>

<UL><LI>   What header(s) are they going to go in?</LI>
<LI>   What namespace(s) are they going to go in?</LI>
<LI>   What migration impact will these choices have on users?</LI></UL>

<p>More on these issues when we return, next time.</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>
<p>Thanks to the members of the C++ Standards Committee Library Working Group, and particularly to Matt Austern, Pete Becker, Howard Hinnant, and P.J. Plauger for their observations and for their comments on drafts of this article. </p>

<H3><FONT COLOR="#000080">Reference</FONT></H3>

<p><a name="1"></a>[1]  Scott Meyers. <I>Effective STL</I> (Addison-Wesley, 2001).</p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I> (available summer 2001). Herb is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
