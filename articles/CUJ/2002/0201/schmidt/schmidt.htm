<HTML>   
     <HEAD>
<TITLE>January 2002/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Retreat</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Have you ever wondered why no one ever tells Language Lawyer jokes? It may be because we need them so badly. The mighty Barrister shows his stuff again this month.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>I&#146;ve just returned from &#147;The C++ Seminar: Three Days With Five Experts.&#148; I quite enjoyed meeting and chatting with several of you Diligent Readers. I also enjoyed getting drafted to play moderator for some of the panels; it reminded me a lot of my radio days, which I sometimes miss horribly. I think the seminar went quite well, especially when considering that none of the presenters had ever done anything like it before.</p>
<p>The seminar was a three-hour drive from my home. I rode down with Andrei Alexandrescu and rode back with Scott Meyers. During our drive, Scott and I spent quite a while ruminating on my career. Along the way, he made a suggestion about my column, which I think I&#146;ll adopt.</p>
<p>Scott sometimes finds me and others using a style he calls &#147;retreating to the Standard&#148;: relying on quotes from the C++ Standard to &#147;prove&#148; or justify the theoretical basis of compiler or program behavior. Scott believes that lengthy Standard citings detract editorially from writing, especially given that most readers don&#146;t have the Standard. He suggests I simply aver that the Standard supports my allegations without quoting or even citing chapter and verse. In effect, he trusts that enough of the time, my interpretation will be right enough.</p>
<p>It&#146;s an intriguing idea, one that I&#146;ll try on for a while to see how it fits, starting with this column.</p>
<p>As for my career: exactly one day before I turned 40, and without any warning or consultation, MSDN canceled my C# writing/community project. Two weeks later came September 11th. The combination has put me in a place familiar to many of you: reassessing the purpose and priorities of my life.</p>
<p>I always knew the day would come that I stopped writing about programming. At least within the context of my Microsoft career, I believe that day is likely here. I am instead feeling pulled &#151; indeed, almost called &#151; to a very different direction, to find or create a position of moral leadership within the company. I&#146;m not yet sure exactly what that means. I know only that the stirring has grown quite strong.</p>
<p>To help me gain clarity, I&#146;m taking a solo road trip to visit my father in his new California home. The trip and visit will be a retreat of sorts, away from home and job. I plan to take in some stunning natural vistas along the way: Crater Lake, Mount Shasta, Lake Tahoe, the wild Pacific coast.</p>
<p>I&#146;m not looking for answers on this trip, just the clarity to eventually find answers. One way or another, those answers will affect what I write here in <I>CUJ</I>. Stay tuned.</p>

<H3><FONT COLOR="#000080">When Life Begins</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby.</p>
<p>I have a question about a previous answer you gave. Maybe you already answered a question like this before. If you did, I will appreciate it if you will tell me where I can find the answer.</p>
<p>You wrote in February that an object starts to exist only when the last line in the constructor finishes. If so, why does the compiler give me the option to use <B>this</B> inside the constructor? (I tried it with gcc and VC++, and the program worked fine!)</p>
<p>Regards &#151; Tony Abramson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I&#146;ll answer your question in two parts: what <B>this</B> means in a constructor body, and how you can use it. </p>
<p>What <B>this</B> means:</p>
<UL><LI>   In the context of a non-static member function, the keyword <B>this</B> is a pointer to the object for which the function is called.</LI>
<LI>   A constructor is a non-static member function.</LI>
<LI>   Ergo, within a constructor, <B>this</B> points to the object being constructed.</LI>
</UL>

<p>How you can use it (including an apparent contradiction or ambiguity):</p>

<UL><LI>   Before its constructor returns, an object&#146;s storage has been allocated, but its lifetime has not yet begun.</LI>
<LI>   You can hold a pointer to such a prenatal blob of storage, but are limited in how you can use that pointer.</LI>
<LI>   One such limitation: you can&#146;t access non-static members through the pointer.</LI></UL>

<p>This combination suggests that within a constructor, you can&#146;t reference non-static members of the object under construction without hitting undefined behavior. And yet we make such references all of the time via <B>this</B>. Consider:</p>

<pre>
class X
    {
public:
    X()
        {
        i = 7; // HERE
        }
private:
    int i;
    }
</pre>

<p>which is equivalent to:</p>

<pre>
class X
    {
public:
    X()
        {
        this-&gt;i = 7; // HERE
        }
private:
    int i;
    }
</pre>

<p>Does such usage engender undefined behavior? My literal reading of the Standard suggests yes; yet that can&#146;t be right, lest many common idioms fail.</p>
<p>The prose in C++ Standard Subclause 3.8 concerning object lifetime could stand some tightening and does appear to preclude <B>this</B> in constructors. But I don&#146;t think for a moment that&#146;s the intent. My bottom line advice: <B>this</B> works in constructors as you probably expect, so long as you don&#146;t engage in genuinely undefined behavior.</p>
<p>(Note of supreme irony: I recommend one such usage of undefined behavior in my October column. I discuss this usage in the Erratica section below.)</p>

<H3><FONT COLOR="#000080">using Blues</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> In reference to &#147;Namespace Madness&#148;:</p>
<p>As soon as I saw the question, &#147;How do I control the scope of <B>using</B> namespace within header files?&#148; I immediately reacted, &#147;Never do that.&#148;</p>
<p>Basically, I recommend never writing a namespace <B>using</B> in a header file, never ever ever cross your heart and hope to die, because among other things <B>using</B> declarations in particular can make you sensitive to header file inclusion ordering and actually violate the ODR (making the whole program ill-formed).</p>
<p>I know the original reader was talking about a <B>using</B> directive, not a <B>using</B> declaration, but I recommend all of those never appear anywhere near a header file &#151; where &#147;anywhere near&#148; means even in source files before the last <B>#include</B>.</p>
<p>Just a data point; discussion is welcome! &#151; George Kaplan</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You are talking about my September 2001 column, where reader Stewart Trickett wants to reference <B>std::string</B> and <B>std::vector</B> as <B>string</B> and <B>vector</B> in a header file, but only in the header file. Most of my proposed solutions involve <B>using</B> declarations. You advise that such declarations, and their <B>using</B>-directive brethren, are bad news in the context of header files.</p>
<p>You raise a valuable safety issue I hadn&#146;t considered in my initial answer, one I&#146;d like to briefly explore here.</p>
<p>A <B>using</B> declaration redeclares a namespace member in the scope containing the <B>using</B> declaration. In effect, the original declaration is cloned at a new point:</p>

<pre>
#include &lt;string&gt;

namespace N
    {
    using std::string;
    //
    //    From here to the end of 'N',
    //    'string' is declared in both
    //    the scope of 'std' and
    //    the scope of 'N'.
    //
    void f()
        {
        std::string s1; // OK
        N::string s2;   // OK
    // OK, finds 'N::string'
        string s3;      
        }
    }
</pre>

<p>A <B>using</B> directive has a related but different effect:</p>

<UL><LI>   An entire namespace is affected, not just one member.</LI>
<LI>   Member names are not actually declared in a new place; they simply appear that way during lookup.</LI>
<LI>   The lookup rules for unqualified names are more complicated than with <B>using</B> declarations. This is particularly true when multiple affected namespaces declare the same name.</LI></UL>

<p>Because <B>using</B> clauses shift the apparent location of declarations, they can fool code not expecting such shifts. Further, the <B>using</B> clauses themselves are sensitive to the declaration context preceding them. Finally, <B>using</B> declarations can hide names introduced by <B>using</B> directives. These considerations can lead to surprises and even undefined behavior:</p>

<pre>
//
//    header.h
//
namespace N
    {
    typedef char *string;
    }

int abs(int)
    {
    }

//
//    source1.cpp
//
#include &lt;cstdlib&gt;
#include &lt;string&gt;
using namespace std;

#include "header.h"

void f1()
    {
    string s1; // uses &#146;std::string&#146;
    using N::string;
    string s2; // uses &#146;N::string&#146;
    }

void f2()
    {
    string s1;
    using namespace N;
    string s2; // error, ambiguous
    }

void f3()
    {
    abs(1); // error, ambiguous
    using namespace std::abs;
    abs(2); // uses &#146;std::abs&#146;
    }
</pre>

<p>So I second your advice: don&#146;t put <B>using</B> clauses in, before, or among headers. Save them for after inclusion of all headers. One allowable deviation: create a canonical include-me-last header (such as <B>stdafx.h</B> in Windows programs) and append the <B>using</B> clauses to that header.</p>

<H3><FONT COLOR="#000080">To Serve Man</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hello Bobby,</p>
<p>I have a question for which I hope you can help find the answer. It may elude you why I would seek an answer to such a question, and I&#146;m not even sure I could explain. Nevertheless, here goes.</p>
<p>During the mid-late 80s, using the old Lattice C compiler v3.x, I was delayed for several hours on a compiler bug (actually, Lattice said it wasn&#146;t a bug, but a definition of the language). I wrote a small C function that moved memory from <B>src</B> to <B>dest</B>.</p>

<pre>
void mov_mem(byte *src, 
             byte *dest, unsigned len)
    {
    while (len&#151;)
        {
        *dest++ = *src;
        *src ^= *src++;
        }
    }
</pre>

<p>I can&#146;t remember the assembler code that the compiler generated, but the result was that in the second line of the loop body, <B>src</B> was incremented before the XOR operation was performed. However, if <B>dest</B> and <B>src</B> were word-size objects, then the correct code was generated.</p>
<p>I&#146;m trying to remember why that is correct according to the definition of the C language. Of course, as we know, K&amp;R, as well as ANSI, left much of the language to be implementation specific, and therefore up to the compiler author.</p>
<p>Regards &#151; Dan a.k.a. &#147;TheScot&#148;</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You&#146;re in a maze of twisty passages, all alike.</p>
<p>Oops, sorry &#151; that&#146;s the C++ Standard.</p>
<p>Here we go: you&#146;re traveling through another dimension, a dimension not only of reason and rules but of whim &#151; a journey into a wondrous land whose boundaries are that of your implementation. Next stop: The Unspecified Zone.</p>
<p>Your code manifests unspecified behavior. In the statement:</p>

<pre>
*src ^= *src++;
</pre>

<p>you don&#146;t know when the side effect of <B>++</B> will occur relative to the assignment via <B>^=</B>. Apparently on your implementation, the side effect occurs before the assignment for byte-size operands, but after the assignment for word-size operands. You deem the latter behavior &#147;correct.&#148;</p>
<p>The C Standard does not compel C implementers to document unspecified behavior, although implementers are free to do so if they choose. The Standard also does not compel implementers to guarantee the predictability of said behavior, a sad fact you discovered the hard way. The Standard does compel them to treat the program as valid C, so that the program must compile and run, albeit with possibly unpredictable results.</p>
<p>In the end, Lattice told the truth. The problem was not a compiler bug, and they were operating within the rights granted them by the C Standard.</p>
<p>Assuming this is even an issue anymore, you can work around the problem by decoupling the assignment from the increment. One possibility:</p>

<pre>
while (len&#151;)
    {
    *dest++ = *src;
    *src ^= *src;
    ++src;
    }
</pre>

<p>Note: all of the above applies to C++ as well.</p>
<p>Further note: I cut my teeth on Lattice C as well. I first learned C on both Lattice and Aztec&#146;s compilers for MS-DOS in 1986.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>Every so often I publish something embarrassingly wrong. Such is the case in my October 2001 column item &#147;The Long And Winding Road.&#148; What&#146;s supremely ironic is that the item in part conflicts with advice I give this month (regarding <B>this</B> in constructors).</p>
<p>Several Diligent Readers have noted my lapse. The most complete commentary comes from a Canadian reader who wishes to remain anonymous. For editorial purposes, I shall call him Dudley Do-Right.</p>
<p>The code to which Dudley objects nets out to:</p>

<pre>
class X
    {
public:
    X(int i)
        {
        // ...
        }
    X()
        {
        this-&gt;X::X(0); // oops...
        }
    }
</pre>

<p>Dudley has three objections:</p>

<UL><LI>   The code shouldn&#146;t compile.</LI>
<LI>   Calling constructors for code reuse is bad.</LI>
<LI>   Reconstructing an unconstructed object is bad.</LI></UL>

<p>I&#146;ll address each point in turn.</p>
<p>Point #1: Dudley is right &#151; the code won&#146;t compile on a Standard-conforming implementation. I implied the code would, or should, which is just plain wrong. My bad.</p>
<p>I routinely test all of my published code, even for &#147;trivial&#148; examples that I should be able to compile by eye. This example astonishingly compiles on Visual C++ and Metrowerks CodeWarrior. (If I can take any comfort from my mistake, it&#146;s that I am in good company.) Happily and comfortingly, the EDG front end catches the error. That I didn&#146;t catch the error tells me I forgot to run the code through EDG&#146;s translator. Oops.</p>
<p>Point #2: In my original column, I write that &#147;on the surface [constructors] make sense as a code reuse mechanism.&#148; I stand by that statement. On the surface, or in the abstract, they do make sense this way. That the rules of C++ disallow such practice doesn&#146;t negate their attraction or theoretical benefit <a href="#1">[1]</a>.</p>
<p>Now Dudley may object that code reuse is best achieved through an intermediate non-constructor function. But consider:</p>

<pre>
class X
    {
public:
    X(int i) : x (i), y (-i)
        {
        }
    X() : x (1), y (-1)
        {
        }
private:
    int const x;
    int const y;
    }
</pre>

<p>Such code can&#146;t have the common initialization pulled into a single function, since the <B>const</B> members must be initialized in the constructors&#146; member initializer lists. Other than resorting to a default argument for <B>i</B> &#151; which brings its own problems &#151; there is no easy and reliable way to avoid code duplication here.</p>
<p>Point #3: For non-<B>const</B> members, you can apparently address Point #2&#146;s code reuse problem via:</p>

<pre>
class X
    {
public:
    X(int i) : x (i), y (-i)
        {
        }
    X()
        {
        new (this) X(1); // HERE
        }
private:
    int x;
    int y;
    }
</pre>

<p>which mimics what I show in the original column. For POD types such as <B>X</B> (or the original circle), this tactic may well work, especially given that the destructors are trivial and may require no actual generated code. However, the behavior is undefined according to the Standard and is not guaranteed to work reliably or at all.</p>
<p>Dudley&#146;s response exposes an editorial tension between what is sanctioned in theory, and what is possible and/or predictable in practice. For a particular implementation using this particular code, placement <B>new</B> within a constructor may well work. In my original response, I was addressing Diligent Reader Williamson&#146;s specific context; I wasn&#146;t intentionally recommending a universally guaranteed practice.</p>
<p>Yet given my position among the scribbling class, I need to be more conscious of how far my examples and advice will be taken. In this instance, I didn&#146;t raise the warning about undefined behavior, or mark the solution as specific to the original problem, or to a particular environment and context. Scott Meyers and I talked this over on our way home, and at least in this regard, he&#146;s persuaded me to be a more Diligent Writer.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>1.  Woo-hoo! As I type, I&#146;m attending the ISO C++ standardization meeting hosted by Microsoft in Redmond. Bjarne Stroustrup is fielding proposed extensions to the core language. A couple of committee members have suggested constructor reuse as a desirable future language feature. </p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
