<HTML>   
     <HEAD>
<TITLE>January 2002/Extending Pocket PC Apps Written in C with VB</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Mixed-Language Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Extending Pocket PC Apps Written in C with VB</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Geoffrey Feldman</FONT></H3>

<BLOCKQUOTE>
<p>Using Visual Basic for handheld applications is not standard fare, but it's not that hard either.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>This article will show how to extend embedded systems written predominantly in C/C++ using VB (Visual Basic) modules. VB is popular with programmers as well as nonprogrammers. The core system can be robust, efficient, and well made, but open to end users who wish to try programming, but are not ready to try C/C++. As handheld computers such as the Pocket PC become more powerful, there is a real benefit to exploring more complex software architectures on these small but capable machines. A top of the line Compaq iPAQ has a 200 MHz processor with 64 MB memory. There are even 1 GB hard drives available. Only a few years ago, this described a high-end PC; now it fits in a pocket or purse. Consequently, it is appropriate to discuss mixed languages, interprocess communications, and complex architectures for such powerful computers, as well as explore what can be provided for users.</p>
<p>The benefit of supporting VB extension has already been demonstrated; it is one cornerstone of the Microsoft product strategy. Desktop VB uses the same code generator and compiler as C/C++ and can produce COM objects as well as use them. Desktop VB can implement COM interfaces and produce modules that work where VB was not even anticipated. The late model versions of desktop Win32 support DCOM (Distributed Component Object Model).</p>
<p>Desktop VB is far more powerful than its cousin embedded VB. Embedded VB has a <B>PCODE</B> run time and cannot produce COM objects or DLLs. Therefore, there is no simple way to call an embedded VB program from another environment or even a separately compiled VB program. Fortunately, embedded VB can use COM objects written in C or C++. If this were not the case, it would be unfair to even suggest that it was VB. This article uses a COM object that implements the ActiveX COM interfaces to provide an IPC (interprocess communications) link between an embedded VB program and some other program written in a different language (in this example, C).</p>
<p>VB programmers are very familiar with using ActiveX controls designed to help solve a particular problem. These controls have Properties, Methods, and fire &#147;Events,&#148; which are callbacks into the VB environment. The ActiveX control should hide system programming issues and worries from the VB programmer as much as possible. If designed carefully, VB programmers will appreciate it as a useful and seamless extension to their normal working environment.</p>
<p>There are other ways to extend a VB program than with an ActiveX control. These might appear easier to implement, but this is not so when the different programming skills and project concerns held by VB and C programmers are fully considered. With some effort and cleverness, most of the Windows API can be called from VB on the desktop as well as the Pocket PC. There are limitations especially in the way the VB run-time system interacts with window messages and the general state of its windows. Except for events in an ActiveX control, there is no way for some routine to execute a callback into the VB environment. These limitations are present on the Desktop version but are far more ticklish on the Pocket PC version. When a set of DLL calls becomes too numerous, or is designed without comprehension of the VB data types, it can become very disruptive to the normal programming flow on a typical VB project. An interface must be designed for its audience. I don&#146;t want to spend time explaining how to do something the wrong way. It is enough to say that the VB run-time system can provide challenging and even mysterious technical problems, while VB programmers are often not comfortable with a complex API and translations out of their own programming environment.</p>
<p>Four separate executable elements must be implemented to demonstrate extending a C/C++ program with a VB plugin:</p>

<OL><LI>An ActiveX COM component inside a DLL implemented with ATL and C++. This component is referred to as <B>PluginOCX.dll</B>.</LI>
<LI>A simple C Win32 Program that starts the VB program and then sends and receives IPC messages with the <B>PluginOCX</B> ActiveX control in the VB program. This is referred to as <B>HostProg.exe</B>.</LI>
<LI>A simple VB program is provided that demonstrates using <B>PluginOCX</B>, the ActiveX object provided in this demonstration; this program is <B>Project1.vb</B>, the default name for VB programs.</LI>
<LI>In order to support the &#147;Design Time&#148; use of the control in the embedded VB desktop integrated development environment, <B>PluginOCX.dll</B> must also run in part on the desktop, so the control must be ported so that it works on Windows NT, 2000, and XP. All Windows CE programs are Unicode. Compile the desktop version with Unicode to avoid possibly unpleasant porting problems.</LI>
</OL>

<p>The IPC mechanism used here is based on the <B>SendMessage</B> Win32 API call and the message, <B>WM_COPYDATA</B>. It was chosen for simplicity in copying blocks of memory from one process to another. Shared memory could have been used. It might have been fun to port Sun RPC as well &#151; something I have done on other projects. In a real world implementation, these might well be worthy options.</p>
<p>Custom messages for <B>SendMessage</B> could be defined. Windows provides two ranges of message values for user definition on two constants: <B>WM_USER</B> and <B>WM_APP</B>. Many programmers mistakenly use the <B>WM_USER</B> range for cross-process messages. This is expressly forbidden in the specification. <B>WM_USER</B> should be used only within an application, and <B>WM_APP</B> should be used for crossing application process boundaries. Messages devised this way have no marshalling capability and are only able to provide a pair of 32-bit values. <B>WM_APP</B> could be used, but the fish to be fried in this demonstration are longer than 32 bits. <B>WM_APP</B> is more efficient though and the correct solution for simpler messages.</p>
<p><B>WM_COPYDATA</B> is a window message that passes the host window handle in <B>WPARAM</B> and a pointer to a 12-byte data structure defined as <B>COPYDATASTRUCT</B>. <B>COPYDATASTRUCT</B> has a double word message identifier, a pointer to memory, and a count of the bytes in the structure pointed to. This code fragment from <B>Hostprog</B> demonstrates sending data:</p>

<pre>
LRESULT lrResp;
wchar_t szSomethingToSay[] =
   L"Hi There VB World!";
COPYDATASTRUCT   CopyData;
CopyData.dwData = COPYDATA_TEXT;
CopyData.cbData = sizeof(szSomethingToSay);
CopyData.lpData = szSomethingToSay;
lrResp== SendMessage(
   g_Plugin.hwndControl,  
   WM_COPYDATA,  
   (WPARAM)hWnd,  
   (LPARAM)&amp;CopyData ) );
</pre>

<p>All Programs in Windows CE are built using wide characters, or 16-bit Unicode code points. COM is also more comfortable with Unicode. Note the use of <B>sizeof(szSomethingToSay)</B> to provide the number of bytes. Use of <B>strlen(szSomethingToSay)</B> returns the number of characters, which is the wrong value. This is another area where people familiar with ANSI programming techniques could be unpleasantly surprised by the Unicode version of Win32 where the number of bytes and the number of characters is different. I consider it wise porting practice to make the distinction between buffer size and character count. This code fragment demonstrates receiving <B>WM_COPYDATA</B>, also based on the source for <B>HostProg</B>. The fragment appears in the switch on window messages for the main window.</p>

<pre>
case WM_COPYDATA:
{
   PCOPYDATASTRUCT lpCopyDataStruct =
      (PCOPYDATASTRUCT)lParam;
   if (NULL!= lpCopyDataStruct)
   {
      if (COPYDATA_TEXT == lpCopyDataStruct-&gt;dwData)
      {
         ::MessageBox (
            hWnd,  
            (LPTSTR)lpCopyDataStruct-&gt;lpData,
            L"Host Message", MB_OK);
      }
   }
}
return 1;
</pre>

<p>Here <B>lpData (a void*)</B> simply needs to be cast to the character type expected by <B>MessageBox</B>.</p>
<p>To use <B>WM_COPYDATA</B> or any other <B>SendMessage</B>, a handle to a window in the other process is needed. There are several ways to find the handle; all depend on looking for some window characteristic we know to uniquely identify the desired handle. Each method might be best in some applications and not in others. A window can be identified by its text, class name text, or a <B>long</B> value, which is stored and whose use is user defined.</p>
<p><B>Hostprog</B> uses the text of the parent window, which in the case of VB is also the title that appears in the VB &#147;Form&#148; and defaults to the VB &#147;Name&#148; of the form object for the VB program. This is done because the class name of a window form is not easily controlled and not likely to remain the same in subsequent releases of the VB run-time system. <B>PluginOCX</B> uses the class name of the main window of <B>HostProg.exe</B>. Either method is accomplished with the Win32 API call, <B>FindWindow</B>, which takes two parameters, one specifying the class name string and the other the text string for a possible window sought. One of these can be <B>NULL</B>, meaning that any value is acceptable.</p>
<p>Once a handle to the main window for the other process task is found, the proper child window must be found:</p>

<pre>
for (
   hwndControl =
      GetWindow (hwndPlugin, GW_CHILD);
   hwndControl != NULL;
   hwndControl =
      GetWindow (hwndControl, GW_HWNDNEXT))
{
   GetWindowText (hwndControl,
      szControlText, MAX_PLUGINNAME-2);
   if (0== wcscmp (szControlText, L"PluginOCX") )
      break;
}
</pre>

<p>(Note the use of <B>wcscmp</B>, which is the wide character version of <B>strcmp</B>.)</p>
<p>At this point, a simple IPC mechanism has been defined, but there still is no reasonable way to exploit it with a VB program on the Pocket PC. This IPC mechanism must now be fitted to an ActiveX control designed for the purpose. The Visual C++ compiler generates most of the code implementing <B>PluginOCX</B>.</p>
<p>This ActiveX control is designed for simplicity, only enough to illustrate this article. A more typical control for VB application programmers might represent a business problem and not a technical solution. If used in a hospital, the control might have a collection of <B>Patients</B> consisting of <B>Patient</B> objects, each with attributes defining their name, doctor, treatment, and so on. Adding and removing patients or changing information about them would then interact with some C program through the IPC mechanism, but the VB programmer would be working in the business world and not the world of system programmers.</p>
<p>The business problem that <B>PluginOCX</B> is designed to solve illustrates a technique to C programmers. The code generating instructions are based on this simple design: it will behave similar to a &#147;Button&#148; control in VB. It will have properties that allow us to change its &#147;Caption&#148; or the text legend that appears in it, and it will have properties that allow us to direct how it behaves in its role in IPC processing. The control ultimately must support VB &#147;Events&#148; or callbacks into the VB environment.</p>
<p>The code provided with this article (available for download at &lt;www.cuj.com/code&gt;) consists of two archives. <B>Phase1.zip</B> is untouched by human hands, generated entirely by the IDE (including <B>HostProg</B>). <B>Phase2.zip</B> contains my work, with my comments that define what code I wrote and what springs from the robotic machinations of the embedded Visual C++ IDE. A good portion of code appearing in <B>Phase2.zip</B> was also generated by the IDE.</p>
<p>To create Phase 1 of <B>PluginOCX</B>, fitting with the plan defined above, I started embedded Visual C++ and ran the &#147;WINCE ATL COM App Wizard&#148; for a project named &#147;PluginOCX&#148;. I told it I didn&#146;t want MFC (Microsoft Foundation Classes). This step produces stub code for a DLL that can host one or more ATL COM objects. Next I selected Insert/New ATL Object from the menu. From the dialog box, I chose the Control Wizard and then a &#147;Full Control&#148; and clicked &#147;Next&gt;&#148;.</p>
<p>There are several steps taken in the Visual C++ development environment to produce the Phase 1 code:</p>

<OL><LI>On the &#147;Names&#148; tab, type &#147;PluginConnect&#148; in the short name. This will also be the name of the control a VB programmer sees. You will notice that all the other text boxes on this daunting form are filled in for you. Leave them alone.</LI>
<LI>Select the &#147;Attributes&#148; tab. Pick Single Threading model, Dual Interface, and &#147;No&#148; aggregation (defaults). This simplifies the control. Be sure to check &#147;Support Connection Points&#148; since that is COM speak for &#147;Events.&#148;</LI>
<LI>The &#147;Miscellaneous&#148; tab is most important and so named to deter the uninitiated because the choices made here really define the code that will be generated. Select &#147;Button&#148; from the &#147;Add Control based on&#148; combo box and check the box &#147;Acts like Button&#148; as well. Clear the check box that says &#147;Normalize DC&#148;.</LI>
<LI>The &#147;Stock Properties&#148; tab defines properties that typify ActiveX controls and have defined offsets in the COM interface. I would only select the <B>Caption</B> property.</LI>
<LI>Click OK.</LI></OL>

<p>Following the above steps should yield generated code quite similar to the <B>Phase1.zip</B> archive in the online code samples.</p>
<p>The control appears in a VB object known as a &#147;Form.&#148; The form is implemented with a Win32 window. The control I created is implemented with a window, and this is a child of the form window. However, the part of the control that will be seen is yet a third window, a child of the control window and a grandchild of the form. The control (unseen) window handles the receipt of all Win32 messages, in particular the IPC messages. Since the control window is never really seen, I am free to change its text (or other characteristics) so that <B>HostProg</B> can find its window handle. The <B>FindWindow</B> calls explained above find first the form window and then its child, the control window. The grandchild is only of concern inside the ActiveX control. All this design was implemented by clicking the correct buttons in the IDE and not through programming.</p>
<p>The ActiveX control needs two events to implement callbacks into the VB environment. The events exist in a connection point object used to execute back to the client, using the ActiveX architecture. ActiveX events also provide the VB development environment with information to provide the VB programmer with a list of available events and, if selected, a stub of the event call.</p>
<p><B>PluginOCX</B>&#146;s interface structure is defined by <B>PluginOCX.idl</B>, using the Microsoft variant of the IDL (Interface Definition Language). There is little time to delve into IDL here. Looking at the generated IDL is instructive and a good way to get working knowledge. In this particular ActiveX control, the IDL is generated for us except in this one particular case.</p>
<p>The IDL initially contains an empty stub defining events. This is what was generated:</p>

<pre>
dispinterface _IPluginConnectEvents
{
   properties:
   methods:
};
</pre>

<p>Now change the generated code above to this:

<pre>
dispinterface _IPluginConnectEvents
{
   properties:
   methods:
      [id(1)] HRESULT OnHostNotice(BSTR bstrMessage);
      [id(2)] HRESULT OnButtonClick();
};
</pre>

<p><B>OnHostNotice</B> is the event that will call the VB program with the text that originated from <B>Hostprog</B>. The other event is simply to be fired when the button is clicked. You still need an implementation of this interface. Happily, the VC++ IDE will create all but two lines of code by using the IDL added above. In the &#147;Class View&#148; of the IDE, right click &#147;CPluginEvents&#148; and select &#147;Implement Connection Points&#148;. Pick the two events shown above. The implementation will be generated for you. Take a look at the generated code in <B>PluginOCXP.h</B>. There are two C++ routines defined as methods in class <B>CProxy_IPluginConnectEvents</B>. They are <B>Fire_OnHostNotice(BSTR bstrMessage)</B> and <B>Fire_OnButtonClick</B>.</p>
<p>What remains is to fasten the arrival of the <B>WM_COPYDATA</B> message to calling these fire event routines in the C++ code that implements the control.</p>
<p>The IDE generates a message map, which directs Windows messages to the proper methods in the C++ object. Another bit of work is to add the message handler and command code handler lines to the generated code for the message map:</p>

<pre>
BEGIN_MSG_MAP(CPluginConnect)
...
MESSAGE_HANDLER(WM_COPYDATA, OnHostMsg)
COMMAND_CODE_HANDLER(BN_CLICKED,
                     OnButtonClick)
...
END_MSG_MAP()
</pre>

<p>Next the code must be added to <B>PluginConnect.cpp</B> to implement <B>OnButtonClick</B>:</p>

<pre>
LRESULT CPluginConnect::OnButtonClick
   (WORD wNotifyCode, WORD wID,
   HWND hWndCtl, BOOL&amp; bHandled)
{
   return Fire_OnButtonClick();
}
</pre>

<p>All that is needed is a routine to link the <B>BN_CLICKED</B> window command message to the <B>Fire_OnButtonClick</B> call that was generated for us. Clicking our little button control will invoke a VB routine (as described in the IDL) called <B>OnButtonClick</B>.</p>
<p>Here is the implementation of <B>OnHostMessage</B> that responds to <B>WM_COPYDATA</B> and calls <B>Fire_HostNotice</B>:</p>

<pre>
LRESULT CPluginConnect::OnHostMsg(
   UINT uMsg,  
   WPARAM wParam,  
   LPARAM lParam,  
   BOOL&amp; bHandled)
{
   PCOPYDATASTRUCT lpCopyData =  
      (PCOPYDATASTRUCT)lParam;
   if (NULL != lpCopyData)
   {
      switch (lpCopyData-&gt;dwData)
      {
         case COPYDATA_TEXT:
            m_strHostMessage =
               (LPCOLESTR)lpCopyData-&gt;lpData;
            break;
            // Other kinds of WM_COPYDATA messages
            // can be added here as other Cases.
           ...
         default:
            m_strHostMessage = L"Err: Bogus Data";
      }
   }
   else
   {
     m_strHostMessage = L"Err: Bogus Message";
   }
   // Fire an event into our host VB  
   // Program, using generated code.
   return Fire_OnHostNotice
      (m_strHostMessage);
}
</pre>

<p><B>m_strHostMessage</B> is implemented with the ATL class <B>CComBSTR</B>. <B>CComBSTR</B> implements a <B>BSTR</B> (basic string), which is needed to pass character data into the VB environment. <B>BSTR</B> management is very easy to mess up and is one of the more obscure aspects of COM programming. <B>CComBSTR</B> handles the details and has some very handy overloaded operators. The class properly allocates a <B>BSTR</B> and copies the wide character string into it. It also handles reallocation for subsequent string copies and frees it when destroyed. You need this assistance since <B>WM_COPYDATA</B> sent wide character, Unicode data that must now be converted to a <B>BSTR</B>. At the system level, a <B>BSTR</B> is a pointer to an array of <B>short</B>s (wide characters) allocated from a special pool (using <B>SysAllocString</B>). The pointer is preceded by a long count of the number of characters provided. Memory leaks, occasional failures, and other unpleasant bugs in ActiveX controls often are traced to erroneous use of <B>BSTR</B>-related calls. <B>CComBSTR</B> removes a good part of these problems. Use the IDE to add the <B>HostMessage</B> property. The code to implement the property is very similar to the code used in <B>HostProg</B> to send a message, except in <B>PluginOCX</B> the property implementation sends the string value of the property to <B>Hostprog</B>. This implements the return bidirectional message capability. What about the VB program? Here it is:</p>

<pre>
Private Sub Form_OKClick()
    App.End
End Sub

Private Sub _
    PluginConnect1_OnButtonClick()
&#146;    MsgBox ("Button Click")
    PluginConnect1.HostMessage = _
    "Hi there C World!"
End Sub

Private Sub _
    PluginConnect1_OnHostNotice( _
        ByVal bstrMessage As String)
    MsgBox bstrMessage, vbOKOnly, _
        "Host Notice"
End Sub
</pre>

<p>When <B>HostProg</B> sends a <B>WM_COPYDATA</B> message, the event is fired, and <B>PluginConnect1_OnHostNotice</B> is called in the VB program. This VB program then displays the text in a message box. (Of course, the VB programmer can do something else with the message if desired.)</p>
<p>When someone clicks on the control, it actually could be some other stock button control, the control fires the event, and a variant on &#147;Hello World&#148; is put in the &#147;Host Message&#148; property. This becomes a <B>WM_COPYDATA</B> message inside the control and is received in <B>HostProg</B> (which uses the text to display a message box).</p>
<p>Connecting dissimilar environments is not just about moving the bits from one to the other. I wanted to show a way to do this that respects the culture of both C and VB programmers and enhances the programming experience for both groups rather than burdening either with the others absurdity. Although an ActiveX control is complex, I have tried to show that the tools reduce a great deal of the effort. The programming effort for all presented here took less than two days. The key is to get the job done and not write code when a tool can do the job. As Tim, the Tool Man, used to say on <I>Home Improvement</I>, &#147;Let the tool do the work.&#148; Now, where the heck is Pamela Anderson?</p>

<H3><FONT COLOR="#000080">Bibliography</FONT></H3>

<p>Brent Rector and Chris Sells. <I>ATL Internals</I> (Addison Wesley, 1999).</p>
<p>Douglas Boling. <I>Programming Microsoft Windows CE</I>, Second Edition (Microsoft Press, 2001). Comes with the programming environment to work the companion code in this article. </p>

<p><i><B>Geoffrey Feldman</B> is currently an independent consultant who specializes in connecting different platforms and environments. He worked for several years at Bell Atlantic as a system architect and prior to that nine years at Digital Equipment Corp as a product developer in the AI Technology group and High Performance Systems group. He began his career 25 years ago as a logic and microcode designer. Geoffrey can be reached at <B>geoff@seabasecns.com</B>.</i></p>

<h4><a href="../../../source/2002/jan02/feldman.zip"></a></h4>

</blockquote></body></html>
