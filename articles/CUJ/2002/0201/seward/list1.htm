<HTML><HEAD>
<TITLE>January 2002/A Stream Class for Calling Perl from C++/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Example code using PerlStream and PerlValue</A></h4>
<pre>
PerlStream ps;

// Have Perl do simple addition in a scalar context
ps &lt;&lt; "10+5" &lt;&lt; perl_execute;
int fifteen = ps[0];
   
// Return a list of values, including a hash reference
ps.array() &lt;&lt; "(2,5,{'a'=&gt;'foo', 'b'=&gt;'bar'})" &lt;&lt; perl_execute;
int two = ps[0]; // line 9
double five = ps[-2]; // line 10
string foo = ps[2]["a"]; // line 11

ps.voidc() &lt;&lt; "require Cwd;" &lt;&lt; perl_execute;  // void context

// Bad string of references are tolerated
int undefined = ps[0]["a"][-3]["bar"];         // line 16; undefined = 0

// iterate over an array and hash
ps.array() &lt;&lt; "( [4, 9, 16], {'a'=&gt;25, 'b'=&gt;36, 'c'=&gt;49} )" &lt;&lt;
    perl_execute;
PerlValue::array_iter ai; // line 21
for (ai = ps[0].array_begin(); ai != ps[0].array_end(); ++ai) {
  if (ai-&gt;isInt())
    cout &lt;&lt; "Value = " &lt;&lt; static_cast&lt;int&gt;(*ai) &lt;&lt; endl;
}
PerlValue::hash_iter hi; // line 26
for (hi = ps[1].hash_begin(); hi != ps[1].hash_end(); ++hi) {
  cout &lt;&lt; "Key=" &lt;&lt; hi-&gt;first &lt;&lt; " Val=" &lt;&lt; hi-&gt;second &lt;&lt; endl;
}

// Cause an evaluation exception
ps.setExceptionFlags(PerlStream::eEvalFail);
try { // line 33
  ps &lt;&lt; "[ 10, 15" &lt;&lt; perl_execute;       // Missing ']'
}
catch (exception &amp;e) {
  cerr &lt;&lt; "Error: " &lt;&lt; e.what() &lt;&lt; endl;  // e is PerlEvalError
}
&#151; End of Listing &#151;</pre></body></html>
