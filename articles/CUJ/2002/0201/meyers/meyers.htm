<HTML>   
     <HEAD>
<TITLE>January 2002/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Variable Length Arrays, Part 3: Pointers and Parameters</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>Randy shows that pointers to VLAs are as convenient as pointers to normal arrays. The question is: how many programmers understand pointers to arrays in the first place? Look here to see if you're one of them.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Every C programmer knows that pointers and arrays are closely related. In fact, many students learning C wonder how they differ once they are told that you can apply the square bracket indexing operator to both arrays and pointers, and that an array name becomes a pointer to the first element of the array except when the array name is the operand of <B>sizeof</B> or the address of operator (<B>unary &amp;</B>).</p>
<p>Pointer arithmetic is one of the reasons why arrays and pointers are intertwined <a href="#1">[1]</a>; another reason is that many operations on arrays cannot be performed on arrays directly. In particular, you cannot pass an entire array as an argument to a function. Instead, a pointer to the array is passed, and the function operates on the array indirectly through the pointer. So close is the relationship between arrays and pointers that C syntax and semantics somewhat obscure the fact that C lacks array parameters.</p>
<p>It should not be surprising that the new VLA (variable length array) feature in C99 <a href="#2">[2]</a> has the companion feature of pointer to variable array, and that one of the useful places to use a pointer to a VLA is as a parameter to a function.</p>

<H3><FONT COLOR="#000080">Pointer to VLA</FONT></H3>

<p>A pointer to VLA can be declared using the syntax similar to pointer to (normal) array:</p>

<pre>
int (*pa)[10];
int (*pvla)[f()];
</pre>

<p><B>pa</B> is a pointer to an array of 10 <B>int</B>s. <B>pvla</B> is a pointer to a VLA of the number of <B>int</B>s given by expression <B>f()</B> when the declaration is reached in the normal flow of control in the program. The difference between a pointer to an array and a pointer to a VLA is that the bounds of the (normal) array is a constant expression <a href="#3">[3]</a> while the bounds of the VLA is a run-time expression. Normally such a small difference between a new language feature and an old feature would mean that programmers would have little trouble understanding the new feature. Unfortunately, even though pointers to arrays date back to early C, many programmers are unfamiliar with them.</p>
<p>There are two reasons for this unfamiliarity. First, as we will see in the next section, pointers to arrays most naturally occur as function parameters, and C syntax and semantics handle this with so much grace that many programmers fail to notice. Second, while pointers to arrays can be used to process a single dimensional array, it is more natural in C to process such an array using a pointer to the element type.</p>
<p>Consider <a href="list1.htm">Listing 1</a>, which initializes the elements of an array and a VLA to <B>1</B> indirectly through pointers. The pattern in this code should look familiar to even a programmer with little experience with pointers to arrays. A pointer is declared. The pointer is assigned or initialized with a pointer to the object that it is to operate on, usually by applying the <B>&amp;</B> operator to the object to be accessed indirectly. The <B>*</B> operator is applied to the pointer, and the result of the <B>*</B> operator is treated as if it was the original object referenced by the pointer. The only unusual thing about <a href="list1.htm">Listing 1</a> is that applying <B>*</B> to the pointers yields arrays.</p>
<p><a href="list2.htm">Listing 2</a> is the more common way to write the function in <a href="list1.htm">Listing 1</a>. In <a href="list2.htm">Listing 2</a>, pointers to <B>int</B> are used to process the arrays of <B>int</B>s rather than using pointers to (normal or variable length) arrays of <B>int</B>s. In C, because of pointer arithmetic and the fact that the index operator is defined in terms of pointer arithmetic <a href="#1">[1]</a>, a pointer of type <B>T</B> can also be used to process an array of type <B>T</B>. As <a href="list2.htm">Listing 2</a> shows, a pointer can process all of the elements of an array merely by indexing the pointer. (Remember, <B>E[i]</B> means <B>*(E + i)</B> regardless of whether <B>E</B> is an array or a pointer expression.)</p>
<p>Contrast the initializations of the pointers in <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a>. In <a href="list1.htm">Listing 1</a>, the initializations of <B>pa</B> and <B>pvla</B> use the <B>&amp;</B> operator on arrays yielding respectively a pointer to an array of three <B>int</B>s and a pointer to a VLA of <B>bounds int</B>s. In <a href="list2.htm">Listing 2</a>, the initializations of <B>p1</B> and <B>p2</B> just use the array names without the <B>&amp;</B> operator. Whenever an array name appears in an expression except as the operand of <B>unary &amp;</B> or the <B>sizeof</B> operator, the value of the array name becomes a pointer to the first element of the array. More formally, if <B>A</B> is an expression with type array, except when the operand of <B>unary &amp;</B> or <B>sizeof</B>, <B>A</B> has the value and type of <B>&amp;((A)[0])</B>. Thus in <a href="list2.htm">Listing 2</a>, <B>p1</B> and <B>p2</B> are initialized with pointers to <B>int</B>s. Note that a single dimensional VLA yields a pointer type that carries no hint that it came from a VLA.</p>
<p>Given <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a>, why are pointers to arrays needed at all? The answer is that pointers to arrays are useful when processing multidimensional arrays. Consider <a href="list3.htm">Listing 3</a>.</p>
<p><a href="list3.htm">Listing 3</a> seems to be a cross between <a href="list1.htm">Listing 1</a> and <a href="list2.htm">Listing 2</a> for good reasons. <a href="list1.htm">Listing 1</a> uses pointers to arrays, as does <a href="list3.htm">Listing 3</a>. <a href="list2.htm">Listing 2</a> shows how a pointer to type <B>T</B> can be used to process an array with elements of type <B>T</B>, as does <a href="list3.htm">Listing 3</a>. The difference between <a href="list2.htm">Listing 2</a> and <a href="list3.htm">Listing 3</a> is that in <a href="list3.htm">Listing 3</a> type <B>T</B> is an array type rather than a basic type like <B>int</B>.</p>
<p>In <a href="list3.htm">Listing 3</a>, the pointers are pointers to arrays (normal or variable length). When you dereference a pointer to an array, the result is an array (which might then become a pointer to its first element, as described above). When you add one to a pointer to an array, then you move the pointer to the next entire array that follows the one the pointer originally pointed to. When you index a pointer to an array, each index selects an array object. Thus in <a href="list3.htm">Listing 3</a>, <B>pa[i]</B> or <B>pvla[i]</B> yields an array object that may be further indexed. As I wrote above, in C, if you have a pointer to type <B>T</B>, you can use it to process an array of type <B>T</B>, even if type <B>T</B> is an array type. Note that when <B>pa</B> and <B>pvla</B> are initialized in <a href="list3.htm">Listing 3</a> that just the array names are used (no <B>&amp;</B> operator). As explained above, the array names become pointers to their first elements. Thus, <B>pa</B> is initialized with <B>&amp;(a[0])</B>, a pointer to an array of three <B>int</B>s. <B>pvla</B> is initialized with <B>&amp;(vla[0])</B>, a pointer to an array of <B>bounds int</B>s.</p>
<p>As I discussed in <a href="#1">[1]</a>, pointer arithmetic in C requires knowing the size of the object that the pointer is pointing to. In <a href="list3.htm">Listing 3</a>, the size of the objects pointed to by <B>pa</B> is known at compile time: it is <B>sizeof (int [3])</B>. In contrast, the size of the objects pointed to by <B>pvla</B> is not known at compile time: it is <B>sizeof(int [bounds])</B>. As I discussed in <a href="#2">[2]</a>, the result of a <B>sizeof</B> operator is computed at run time for a VLA. Not surprisingly, <B>sizeof</B> is also a run-time operation if you ask for the size of a VLA reached indirectly through a pointer.</p>
<p>Thus in <a href="list3.htm">Listing 3</a>, <B>sizeof (*pvla)</B> is an expression whose value is computed at run time and is equal to <B>sizeof(int [bounds])</B>. If <B>sizeof(int)</B> is <B>4</B> and <B>bounds</B> had the value <B>3</B>, the result of the <B>sizeof</B> expressions would be <B>12</B>. Note that <B>sizeof (pvla)</B> is not a run-time operation since it is just the size of the pointer <B>pvla</B> itself, which is known at compile time.</p>
<p><B>sizeof(*pvla)</B> is used whenever pointer arithmetic or indexing is done on <B>pvla</B>. This means that the C implementation must record the size of the VLA type that the pointer type points to. Like other VLA types, the size information associated with a pointer to VLA is saved when the declaration is executed and does not change during the declaration&#146;s lifetime. The expression that is the <B>bounds</B> of the VLA is not reevaluated until next time the declaration is executed.</p>
<p>Consider <a href="list4.htm">Listing 4</a>. (By the way, the &#147;z&#148; in the format is a new C99 modifier that means the argument is <B>size_t</B> or the corresponding signed integer type. Thus, &#147;%zu&#148; prints a <B>size_t</B> number as unsigned.) When run, the program in <a href="list4.htm">Listing 4</a> prints out <B>10 20 30</B> even though the value of <B>n</B> changes between when the pointer to VLA is declared and the <B>sizeof</B> expression that yields the size of the array pointed to. However, since each pass through the loop enters and exits the block that is the loop body, each pass of the loop picks up a new value of <B>n</B> for the <B>bounds</B> of the pointer to VLA. <a href="list1.htm">Listings 1</a>, <a href="list2.htm">2</a>, and <a href="list3.htm">3</a> show a useful coding technique. Although from the C implementation&#146;s point of view the <B>bounds</B> of a VLA are fixed from the time its declaration is executed until the lifetime of the declaration ends, that does not mean that the programmer can conveniently compute that <B>bounds</B> later in the program. If the <B>bounds</B> expression of a VLA is complex or might change value, you might want to assign the value of the <B>bounds</B> expression to a local variable and use the local variable as the <B>bounds</B> in the declaration. If you fail to do this, all is not lost: see the discussion of <B>sizeof</B> in <a href="#2">[2]</a>.</p>
<p><a href="list4.htm">Listing 4</a> also shows another point about the size information that the C implementation saves for VLAs. That size information is associated with the type and not the value of the pointer to VLA or even the VLA object itself. In <a href="list4.htm">Listing 4</a>, <B>pvla</B> is uninitialized stack trash (that is OK since the <B>sizeof</B> expression does not actually evaluate its operand: <B>pvla</B> is never actually dereferenced). Clearly, the size of the array that <B>pvla</B> is suppose to point to is not part of the value of <B>pvla</B>. Likewise, there is no array to which <B>pvla</B> points in <a href="list4.htm">Listing 4</a>, so the size is not part of the array object. Instead, every VLA type in a program causes the C implementation to set aside an unnamed variable to hold the size of arrays of that type. (The optimizer might combine several such variables into one if it proves that they hold the same value).</p>
<p>Note that this approach uses less memory than making the size information part of the array object itself. Consider the declaration:</p>

<pre>
int x[m][n];
</pre>

<p>C needs only storage to hold two sizes: the size of the two-dimensional array <B>x</B> and the size of the elements of <B>x</B> (all of which are the same size). If size was part of the array object (Java does things this way), the <B>x</B> object itself would contain space to store the entire size of the array, and each element of <B>x</B> would contain space to store the size of the subarray that is that element. The Java approach needs to store <B>m+1</B> lengths while the C approach stores only two. Another advantage of the C approach is since the size information is not part of the object, a VLA has the same size and storage layout as a non-VLA with the same element type and array <B>bounds</B>.</p>
<p>Since the size is not part of the array, and VLAs and normal arrays have the same representation, pointers to VLAs are permitted to point at normal arrays and pointers to normal arrays are permitted to point at VLAs. When you assign a pointer to a (normal or variable length) array to a pointer to a (normal or variable length) array, the number of elements and the type of the elements must match. As long as both pointers point to normal arrays, both of these requirements are checked at compile time. If either the source or destination of the assignment is a pointer to a VLA, then only the element types will be checked by the compiler. The number of elements must still match. If they do not, then the program has a run-time error that the C implementation has no obligation to catch: the program might terminate immediately or continue to run with mysterious behavior or even appear to work. <a href="list5.htm">Listing 5</a> shows the four combinations of assignments between pointers to (normal or variable length) arrays. All four pointer assignments are valid, as long as function <B>ex5</B> is called with the argument <B>10</B>. Only the first and last assignments are valid if any other argument is passed. Only the first assignment is checked at compile time for the proper number of elements in the array types.</p>

<H3><FONT COLOR="#000080">VLA Parameters</FONT></H3>

<p>C does not permit function parameters to be arrays; it does not permit entire arrays to be passed as arguments. However, the language finesses this so well that some programmers do not realize this.</p>
<p>If a parameter to a function has type array of type <B>T</B>, the C compiler rewrites the declaration of the parameter to be a pointer to type <B>T</B>. The result is exactly as if the programmer wrote the pointer form of the parameter declaration in the first place. This rule is followed whether the array parameter is a normal array or a VLA.</p>
<p>Note how the semantics of C dovetail to handle &#147;array&#148; parameters seamlessly. If you write an array parameter, the compiler rewrites the function declaration to have a pointer parameter. This is OK since you can write the body of the function as if the parameter was still an array since the index operator works as well on a pointer as on an array. When you call the function, you can pass an array name as an argument because any expression of type array (except when the operand of <B>unary &amp;</B> or <B>sizeof</B>) becomes a pointer. If the array being passed as an argument was compatible with the original array type of parameter, then the pointer type of the argument will match the pointer rewrite of the parameter. This works the same for VLAs or normal arrays.</p>
<p>One somewhat surprising thing is that single-dimensional VLA parameters become plain old pointers after the rewrite. Consider:</p>

<pre>
void f(int n, int a[n])
</pre>

<p>after the compiler automatically rewrites the function, it becomes:</p>

<pre>
void f(int n, int *a)
</pre>

<p>However, multiple dimensional VLA parameters become pointers to VLAs after the rewrite. For example,</p>

<pre>
void g(int n, int a[n][n+1])
</pre>

<p>becomes:</p>

<pre>
void g(int n, int (*a)[n+1])
</pre>

<p>Of course, multiple dimensional normal array parameters become pointers to normal arrays. It is in this context that most C programmers have used pointers to arrays without realizing it.</p>
<p>The act of passing an &#147;array&#148; argument to an &#147;array&#148; function parameter is really a form of pointer assignment and works as described in the previous section. Thus you can pass either a normal array or a VLA to a function whose parameter is a normal array. You can also pass either a normal array or a VLA to a function whose parameter is a VLA.</p>
<p><a href="list6.htm">Listing 6</a> shows a function that sets the diagonal of its square array parameter to one and sets all other elements to zero. This function can be called on any <B>n</B> by <B>n</B> array of <B>int</B>s since the <B>bounds</B> of the array is passed as an argument. It is fairly common for the <B>bounds</B> of VLA parameters to be another parameter to the same function as in <a href="list6.htm">Listing 6</a>, but this is not required. The run-time expression that is the <B>bounds</B> of the VLA may be any expression involving any variables or functions that are in scope at the time the parameter is declared. The <B>bounds</B> expression is evaluated each time the function is called since calling the function causes its parameter&#146;s declarations to be executed, and the lifetime of the parameters ends when the function returns.</p>
<p>Function prototypes with VLA parameters can be written just like the function definition. For example, a prototype for the function in <a href="list6.htm">Listing 6</a> could be:</p>

<pre>
void diag(int n, int a[n][n]);
</pre>

<p>There is an advantage to writing the prototype that way since it makes clear the relationship between the parameter <B>n</B> and the <B>bounds</B> of <B>a</B>. However, the <B>bounds</B> expression is not really needed for the prototype, and sometimes the <B>bounds</B> expressions might be complex or reference identifiers only in scope at the point of the function definition. Because of this, the <B>bounds</B> expression of a VLA in a function prototype may be replaced with a &#147;*&#148; character. In this context, the asterisk is just a placeholder for a run-time expression that will appear in the function definition. Thus, the function prototype for the function in <a href="list6.htm">Listing 6</a> can also be written as:</p>

<pre>
void diag(int n, int a[*][*]);
</pre>

<p>As far as the compiler is concerned, the two prototypes for <B>diag</B> given above are identical.</p>

<H3><FONT COLOR="#000080">Limitations on Pointers to VLAs</FONT></H3>

<p>Like VLAs, pointers to VLAs cannot appear at file scope. They must be either parameters to function prototypes or local variables of a block. (The C Standard considers a function&#146;s parameters to be locals of the block that is the function body.)</p>
<p>Pointers to VLAs may not be <B>static</B> or <B>extern</B>. Such objects have a lifetime that starts before <B>main</B> is called and ends when the program exits. Since the size information for a VLA or pointer to VLA is fixed during its lifetime, such objects would have a size fixed during the running of the program. That sort of takes the variable out of variable length.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Randy Meyers. &#147;The New C: Why Variable Length Arrays?&#148; <I>C/C++ Users Journal</I>, October 2001.</p>
<p><a name="2"></a>[2]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 2,&#148; <I>C/C++ Users Journal</I>, December 2001.</p>
<p><a name="3"></a>[3]  Randy Meyers. &#147;The New C: Declarations and Initializations,&#148; <I>C/C++ Users Journal</I>, April 2001, &lt;www.cuj.com/reference/articles/2001/0104/0104d/0104d.htm&gt;.</p>

<p><i><B>Randy Meyers</B> is a consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

<h4><a href="../../../source/2002/jan02/meyers.zip"></a></h4>

</blockquote></body></html>
