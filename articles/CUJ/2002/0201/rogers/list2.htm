<HTML><HEAD>
<TITLE>January 2002/Encapsulating Virtual Memory in Windows/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Illustrates a complex task being performed by CVirtMemFile</A></h4>
<pre>
////////////////////////////////////////////////////////
// example.cpp - Sorting Large Files with CVirtMemFile
//
// Compile as a Console Application with Visual C++.
////////////////////////////////////////////////////////

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include&lt;windows.h&gt;
#include "vmfile.h"

struct sampleRec   
   {
   unsigned long key;
   char data[40];
   };


int compareSampleRec( const void *arg1, const void *arg2 )
   {
   sampleRec *rec1=(sampleRec *)arg1;
   sampleRec *rec2=(sampleRec *)arg2;
   if (rec1-&gt;key&lt;rec2-&gt;key) return -1;
   if (rec1-&gt;key&gt;rec2-&gt;key) return 1;
   return 0;
   }

int main( void )
   {
   
   FILE *filePtr;
   sampleRec rec;
   char filename[]="testfile.dta";

  // Create a sample file to sort 
   filePtr=fopen(filename,"wb");

   if (filePtr==NULL)
      return 0;

   for (int i=0; i&lt;10000; i++)
      {
      rec.key=rand();
      sprintf(rec.data,"This is record: %ld",i);
      fwrite(&amp;rec,sizeof(sampleRec),1,filePtr);
      }

   fclose(filePtr);

  // Sort the file   
   CVirtMemFile vmFile;
   if (vmFile.Open(filename, CVirtMemFile::READ_WRITE_MODE))
      {
      unsigned long count=vmFile.GetFileSize()/sizeof(sampleRec);
      qsort( vmFile.GetBasePtr(), count, sizeof(sampleRec),
             compareSampleRec );
      vmFile.Close();
      printf("%ld records sorted.\n", count);
      }
   else
      {
      printf("Unable to sort file.\n");
      return 0;
      }

   return 1;
   }
&#151; End of Listing &#151;</pre></body></html>
