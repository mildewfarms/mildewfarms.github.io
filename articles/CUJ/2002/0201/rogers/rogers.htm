<HTML>   
     <HEAD>
<TITLE>January 2002/Encapsulating Virtual Memory in Windows</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Joey Rogers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Encapsulating Virtual Memory in Windows</FONT></H3>

<BLOCKQUOTE>
<p>This class gives you convenient, direct control over memory-mapped files in Win32.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Virtual memory is a powerful feature in Windows. It extends available memory resources beyond their physical limits, provides a flat memory addressing scheme for all processes, and hides the complicated mechanics of managing memory from applications. Virtual memory works by mapping a large memory address space (possibly larger than the available physical memory) to a file on disk. The virtual memory manager swaps pages of memory to and from disk to give an application the appearance that its entire address space exists. While virtual memory is essential to the normal operation of any application, it may be overlooked as a programming tool in Windows development. Using the operating system&#146;s virtual memory manager to map any file to a virtual memory address space allows an application to treat the mapped file as physical memory. This ability can simplify coding when you must process data from memory and from files in the same way or when your application needs to be scalable beyond physical memory limits. The <B>CVirtMemFile</B> class (<a href="list1.htm">Listing 1</a>) presented in this article encapsulates the commonly used virtual memory functionality to simplify its use in application development.</p>
<p>The Win32 API provides several functions to utilize Windows&#146; virtual memory manager. These functions are not overly complex, but their usage can be simplified significantly by encapsulating the basic functionality of mapping a file on disk to virtual memory in a class. The <B>CVirtMemFile</B> class shown in <a href="list1.htm">Listing 1</a> is small yet generic enough to use in a variety of applications. Its purpose is to make mapping a file to virtual memory and using it as easy as opening and using a file.</p>
<p>The <B>CVirtMemFile</B> class provides five methods:</p>
<UL><LI>   <B>long Open( const char filename[], long mode )</B></LI>
<LI>   <B>void Close( void )</B></LI>
<LI>   <B>long GetStatus( void )</B></LI>
<LI>   <B>DWORD GetFileSize( void )</B></LI>
<LI>   <B>const LPVOID GetBasePtr( void )</B></LI></UL>

<p>The <B>Open</B> method maps a file on disk to virtual memory. The filename parameter is the full path to the file you wish to map. The mode parameter specifies for the file to be Read Only or Read Write and must have one of the following values provided by the <B>CVirtMemFile</B> class as a public enumeration:</p>

<pre>
READ_ONLY_MODE = 0
READ_WRITE_MODE = 1
</pre>

<p><B>Open</B> returns a true value if the file is mapped successfully and a false value otherwise.</p>
<p>The <B>Close</B> method unmaps and closes the open file.</p>
<p>The <B>GetStatus</B> method returns the current status with one of the following enumerated values:</p>

<pre>
FILE_NOT_OPEN = 0
FILE_OPEN = 1
</pre>

<p>The <B>GetFileSize</B> method returns the size in bytes of the open file.</p>
<p>The <B>GetBasePtr</B> method returns the base address of the file as a <B>void</B> pointer. This pointer is valid only if <B>Open</B> successfully maps a file to virtual memory. The base memory address points to the first byte of the file in virtual memory. The beauty of using a virtual memory-mapped file is that it is used just like dynamically allocated memory. There is no seeking, reading data to a buffer, or writing data from a buffer. As you reference memory relative to the base pointer, the appropriate portions of the file are automatically paged into memory as they are needed. If the file is opened in Read Write mode, any changes made to the virtual memory will also be made to the file.</p>
<p>Since the focus of this article is to illustrate how easy it is to use virtual memory in your applications with the <B>CVirtMemFile</B> class, the details of directly using the Win32 API virtual memory functions (<B>CreateFileMapping</B>, <B>MapViewOfFile</B>, and <B>UnmapViewOfFile</B>) are omitted. Information on these functions can be found at: &lt;http://msdn.microsoft.com/library/psdk/winbase/filemap_0583.htm&gt;.</p>

<H3><FONT COLOR="#000080">Examples</FONT></H3>

<p>The following code segment maps a file to virtual memory and accesses the file&#146;s contents like an array of characters. This example is trivial, but it shows how easy it is to use virtual memory.</p>

<pre>
CVirtMemFile vmFile;

vmFile.Open("c:\\temp\\test.dta",
  CVirtMemFile::READ_ONLY_MODE);

char value;

for (int i=0; i&lt;100; i++)
{
  value=
    static_cast&lt;char *&gt;
      (vmFile.GetBasePtr())[i];
  cout &lt;&lt; "Pos: "
       &lt;&lt; i
       &lt;&lt; "  Value: "
       &lt;&lt; (long)value
       &lt;&lt; endl;    
  }

vmFile.Close();
</pre>

<p><a href="list2.htm">Listing 2</a> contains a more practical example. It illustrates how a potentially complex task can be performed with the <B>CVirtMemFile</B> class. Sorting large or very large files is a task with a scalability problem. The sorting algorithms normally used with smaller amounts of data are still applicable, but the techniques used to implement these algorithms usually do not scale to cope with large amounts of data. If you can sort files containing 100,000 records with your favorite implementation, can you also sort files containing 50 million or even more? Using the <B>CVirtMemFile</B> class, a file can be mapped to virtual memory and sorted just like it were an array in memory. The following code segment demonstrates how the C++ provided <B>qsort</B> function (which is designed to work with data in memory) can easily sort a file of any size:</p>

<pre>
CVirtMemFile vmFile;

if (vmFile.Open(filename, CVirtMemFile::READ_WRITE_MODE))
  {
  unsigned long count=
    vmFile.GetFileSize()/sizeof(sampleRec);
  qsort( vmFile.GetBasePtr(),
    count, sizeof(sampleRec), compareSampleRec );
  vmFile.Close();
  printf("%ld records sorted.\n", count);
  }
</pre>

<p>The first step is to map the file on disk with the <B>Open</B> method. Since we are rearranging the data as it is sorted, the file must be opened in the Read Write mode. The second step is to sort the file with the <B>qsort</B> function, which requires a pointer to the data in memory (returned by <B>GetBasePtr</B>), the number of records to sort (<B>GetFileSize</B>&#146;s return value divided by the record size), the size of the records, and a comparison function. The last step is to close the file with the <B>Close</B> method. While not all sorting algorithms will work well with virtual memory, the Quick Sort algorithm used by <B>qsort</B> and its locality of reference characteristic work very well with paged memory. However, the limitations of the Quick Sort algorithm (such as poor performance with ordered values) still apply.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>By directly using the Win32 API or by using a class like <B>CVirtMemFile</B>, the powerful features provided by the operating system&#146;s virtual memory manager can be directly leveraged by your applications. Whether you need tools to solve a scalability problem or to simply write homogenous code to handle data in memory and on disk, virtual memory may be useful to your application&#146;s development; both of these benefits are seen in the sorting example. Applications using virtual memory not only exploit some of the best features offered by Windows, they will be cleaner, smaller, and more powerful.</p>

<p><i><B>Joey Rogers</B> is an application developer for Graphic Technologies, Inc. in Huntsville, Alabama. He can be reached at <B>Joey.Rogers@gti-us.com</B>.</i></p>

<h4><a href="../../../source/2002/jan02/rogers.zip"></a></h4>

</blockquote></body></html>
