<HTML>   
     <HEAD>
<TITLE>January 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><i>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</i></p>
<hr><p>Re: Steve Dewhurst&#146;s August 2001 &#147;Common Knowledge&#148; column</p>
<p>When the compiler eliminates the code in the <B>if</B> part of <B>if ( false )</B>, the resulting executable of the release version and the debug version are different, just as is the case if the <B>#ifndef</B> construct is used. In other words, you still have to compile the code just as many times with either construct (ignoring syntactical errors in the <B>#ifndef</B> case, which are missed when <B>NDEBUG</B> &#151; or whatever the controlling macro is &#151; is defined). The real problem seems to be that side effects in the code, which are either present or absent depending on the <B>NDEBUG</B> or <B>const bool debug</B>, influences the behavior of the code. I do not see the gain in your proposal, except that it is &#151; under the right circumstances &#151; aesthetically more pleasing, which helps to concentrate on the code while reviewing it, thus improving the chance of detecting bugs. In other cases (e.g., h-files), it may be more attractive to stick to the <B>#ifdef</B> mechanism. Please, tell me if I missed your point.</p>
<p>Nico Valster</p>

<p><I>Nico,</I></p>
<p><I>It&#146;s true that in both cases the effect on the generated object code is largely the same, in that the code is eliminated. What differs is the mechanism by which the code is eliminated, and the likelihood that each mechanism will produce a correct result. In the case of the </I><B>#ifdef</B><I> version, the fallible human programmer has decided that the meanings of the debug/no-debug versions are identical except for some additional debugging behavior. In the version that depends on the compile-time evaluation of a constant-expression, the infallible compiler ensures that there will be no semantic change when the code is eliminated. The elimination comes late in translation, when the source code has been not only parsed, but has undergone a static semantic check. Before the code elimination takes place, the compiler&#146;s static checking will have propagated any possible side effect of the eliminated code, and its removal is therefore provably safe. This safety is guaranteed even as the code is maintained.</I></p>
<p><I>Consider an analogous problem that often arises with the standard </I><B>assert</B><I> macro. The experienced original programmer knows that </I><B>assert</B><I> expressions should have no side effects.</I></p>

<pre>
// ...
a = b;
assert( a );
//...
</pre>

<p><I>Later maintainers may not be as careful, valuing brevity over correctness.</I></p>

<pre>
//...
assert( a = b );
//...
</pre>

<p><I>This kind of thing can&#146;t happen if we let the compiler handle the elimination.</I></p>
<p><I>It is true, as you point out, that we will still have two different sets of behaviors depending on the compile-time value of the debug flag.</I></p>

<pre>
const bool debug = false;
//...
if( debug )
    // probably elimination...
</pre>

<p><I>However, this is true of any conditional or polymorphic code and is certainly no more complex than the case in which the value of the debug flag is not determinable at compile time.</I></p>

<pre>
const bool debug = 
    getDebugValueFromCommandLine();
//...
if( debug )
    // probably no elimination...
</pre>

<p><I>The only difference between these two versions is that the compiler is better capable of optimizing the first. Use of a </I><B>debug</B><I> variable in preference to a </I><B>#ifdef</B><I> allows the code turn debugging on at compile time, off at compile time, or allow a run-time on/off switch. All three programs will have the same meaning &#151; up to whatever optimization the compiler is capable of applying. This is the case for conditional code in general.</I></p>
<p><I>I agree with your point about aesthetics. As a practical matter, use of </I><B>#ifdef</B><I> with a single symbol (like </I><B>NDEBUG</B><I>) is more problematic than a simple conditional, but generally does not cause insurmountable problems. However, the resulting code is more difficult to read and maintain. The real problems arise when the </I><B>#ifdef</B><I>s employ very complex expressions and are deeply nested. In effect, we have a pre-compile (preprocessor) conditional structure that overlays whatever conditional structure is present at compile time and run time. The resulting complexity is a mess both aesthetically and practically. Even in the case of header files, use of </I><B>#ifdef</B><I> is generally a poorer approach than a redesign.</I></p>
<p><I>Steve Dewhurst</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>Regarding Mark Nelson&#146;s article &#147;A C++ Debug Stream for Win32&#148; in <I>CUJ</I> (September 2001), I&#146;d like to add one or two comments.</p>
<p>Like the author, I&#146;ve been in the business long before Win-whatever came up, and everyone from the past has at least written 3...8 debug-output-libraries, sometimes in C, later in C++. However (let me get to the point): there is a far easier way to get the results described in this article. The simple solution is use <B>printf</B>; use <B>cout &lt;&lt; something</B>. You don&#146;t see the output when running a GUI-application; it goes to the sink, but, hey, simply redirect the output on a command line (usually called DOS box) to a file, and there it is. It even works with complex MFC apps and is more or less thread-safe because the output is line-buffered (imagine the authors output with, say, 20 threads or so). <B>printf</B> works; <B>cout</B> works; what else do you need? I am not talking about performance, neither in this aritcle, nor in my solution. All the output is formatted before it goes (99%) to the sink. If you really want a console output, which I don&#146;t prefer (because the important line is generally the line just scrolled off the window), you can pipe the output to some other program, which uses named pipes or even send the output via TCP/IP to your machine. One more advantage: it&#146;s not platform specific, at least it will compile and run on Unix machines (whatever happens there with the output). As far as I remember, it even works on OS/2 (ever heard of it?). Conclusion: it&#146;s fun to write (debug) classes, but sometimes you can spend some more time with your family, because it&#146;s already there.</p>
<p>Regards</p>
<p>Andreas Gruen <br>
Notes Development GmbH <br>
Hannover, Germany <br>
<B>ag@notesdev.de</B></p>

<p><I>Hi Andreas,</I></p>
<p><I>Thanks for your comments on the article. While it&#146;s true that in modern incarnations of Windows, </I><B>cout</B><I> and </I><B>printf</B><I> can be used with no harm, they aren&#146;t much help in debugging unless you write some additional glue code. My goal was to have quick and easy text mode output that I could enable and disable programmatically, and the code in the article does that without minimal effort.</I></p>
<p><I>Using standard input and output can accomplish the same thing if one writes a bit of glue code. From the perspective of the code writer, there&#146;s not much difference though. If my debug statement looks like this:</I></p>

<pre>
foo &lt;&lt; "Current value is: " 
    &lt;&lt; value 
    &lt;&lt; endl;
</pre>

<p><I>I don&#146;t really care whether </I><B>foo</B><I> is a contrived class or simply a reference to </I><B>cout</B><I>. The level of effort is the same regardless!</I></p>
<p><I>Mark Nelson</I></p>

<hr><p>Recently I wrote about a correction [in &#147;<I>CUJ</I>&#146;s Most Loyal Readers,&#148; November 2001] regarding the term &#147;Brain Damage&#148; with respect to the &#147;BDS&#148; C compiler &#151; in particular to correct an inadvertent &#147;d&#148; that crept in during the editing process, turning it erroneously into &#147;Brain Damaged.&#148; [This has now been updated on our website &#151; ap.]</p>
<p>I must now also report another error, this one my own. Leor Zolman recently sent me an email wherein he pointed out that I was in error in attributing &#147;Brain Damage&#148; (as in BDS C) to the character with that name in Doonesbury. It turns out that the &#147;Brain Damage&#148; in BD Software had a different origin. Leor&#146;s website, &lt;www.bdsoft.com&gt;, has a link to a site containing a biographical sketch, which, presumably, has an accurate description of the origination of the name.</p>
<p>Thanks.</p>
<p>Jay R. Jaeger</p>

<hr><p>Re: C++ Experts Forum</p>
<p>So glad you kept such incredible sources of knowledge available to us mortals! I missed reading their articles in <I>C++ Report</I> and am glad you picked up their writings. Keep this web page running!</p>
<p>Jeffrey T. Bush<br>
Capt USAF</p>

<hr><p>Hello,</p>
<p>I downloaded the code for Michael Yoder&#146;s article in the March 2001 issue, but it doesn&#146;t compile.</p>
<p>Thanks,</p>
<p>Robert Schwartz</p>

<p><I>Hi Robert,</I></p>
<p><I>Unfortunately, Microsoft&#146;s Visual C++ doesn&#146;t support partial ordering of function templates. You can still use the techniques described in the article, although it disallows capturing groups of types at compile time with a policy. This is described in the section of the article entitled &#147;Function Templates and ANSI Compliance.&#148; For this example, the change to </I><B>user.cpp</B><I> would be to replace these lines:</I></p>

<pre>
template&lt;class T&gt;
void policy
  (const MyContainer&lt;Element2&lt;T&gt; &gt; * c)
</pre>

<p><I>with:</I></p>

<pre>
template&lt;&gt;
void policy
  (const MyContainer&lt;Element2&lt;int&gt; &gt; * c)
</pre>

<p><I>which results in the output:</I></p>

<pre>
D:\Example3&gt;cl -GX user.cpp
Microsoft (R) 32-bit C/C++ Optimizing
Compiler Version 12.00.8804 for 80x86
Copyright (C) Microsoft Corp 1984-1998.
All rights reserved.

user.cpp
Microsoft (R) Incremental Linker
Version 6.00.8447 Copyright (C) 
Microsoft Corp 1992-1998. All rights
reserved.

/out:user.exe
user.obj

D:\Example3&gt;user
Performing Default Policy

Performing My Policy
</pre>

<p><I>This lets you set a policy for all </I><B>Element2</B><I> types specialized on </I><B>int</B><I>, which is somewhat less powerful than setting one for all </I><B>Element2</B><I> specializations.</I></p>
<p><I>Regards,</I></p>
<p><I>Michael Yoder</I></p>

<hr><p>Regarding Fabio Lopiano&#146;s article, &#147;Sending Objects across Platforms&#148; (October 2001), here is my question:</p>

<pre>
void NetBuffer::put(const char * aBuffer, 
                    size_t aSize)
{
if( theWriteCounter + aSize &lt;= size() )
  {
    memcpy(&amp;(theBuffer[theWriteCounter]),
      aBuffer, aSize);
  }
  theWriteCounter += aSize;
}
</pre>

<p>If I&#146;m reading this right, in the following code when copying a string into the vector array based on the <B>theWriteCounter</B> variable, it is storing data all over the array. For example:</p>

<pre>
theWriteCounter = 10;
memcpy(&amp;(theBuffer[theWriteCounter]),
  aBuffer, aSize);
</pre>

<p>After these two lines of code run, the <B>aBuffer</B> data will exist in the <B>theBuffer[10]</B> slot. That would mean that data would be randomly dispersed throughout the vector array. In this example, only slot <B>10</B> has data; if ran again and <B>theWriteCounter</B> equals <B>20</B>, then the data would be placed in that slot skipping all of the other slots.</p>
<p>Thank you for your time.</p>
<p>Ken Fellows</p>

<p><I>Well, the data is not actually dispersed throughout the array; instead the vector is continuously filled. In fact, the </I><B>memcpy</B><I> doesn&#146;t write &#147;in the slot,&#148; but &#147;starting from the slot.&#148; After all, each slot contains only one byte.</I></p>
<p><I>For example, when </I><B>theWriteCounter</B><I> is </I><B>1</B><I>0 and we put an integer into the </I><B>NetBuffer</B><I>, the </I><B>aSize</B><I> variable holds the value </I><B>4 (sizeof(int))</B><I>, and the data is copied on the four bytes starting from the tenth slot to the thirteenth. (</I><B>&amp;(theBuffer[theWriteCounter])</B><I> means the address of the slot at the position </I><B>theWriteCounter</B><I>, not the slot itself.) </I><B>theWriteCounter</B><I> is then updated, adding </I><B>4</B><I> to it, and the next call to </I><B>NetBuffer::put</B><I> will copy starting from the next position, filling the buffer without gaps.</I></p>
<p><I>Note also that </I><B>theWriteCounter</B><I> variable can be changed only inside this method, that this variable can only grow, and that when we copy some data into the buffer, we add the size of the data copied to that variable.</I></p>
<p><I>Best regards,</I></p>
<p><I>Fabio Lopiano</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I very much enjoyed the article &#147;Extending the Standard Template Library with Association Classes&#148; by Eli Tilevich (September 2001). I think it is worth pointing out that a many-to-many mapping with relationships for each link can be described as an undirected graph with the relationships assigned to edges. Existing graph software (the Boost Graph Library at &lt;www.boost.org&gt;) provides the necessary accessors and iterators described in the article and hence can satisfy the requirements given in the article. Such software will usually provide additional higher-level algorithms for analysis, which depending upon the application might be of use.</p>
<p>Craig Hicks<br>
Engineer, KGK Ltd.,<br>
Tokyo, Japan</p>

<p><I>There is always more than one way to do the same thing when dealing with computer algorithms and data structures. Your observation about being able to describe a many-to-many mapping with an undirected graph is interesting. The question is whether using a graph library to represent a many-to-many association between application classes is more convenient than using a special purpose association class. While existing graph software provides the necessary accessors and iterators described in the article, using them can be quite cumbersome. For example, since every graph vertex can be of one of the two application class types participating in the association, accessing all classes of a particular type requires some additional filtering. While my many-to-many association class guarantees logarithmic complexity time for most operations, using a graph will result in only linear time: the search operation on a graph requires going over all the vertices. I don&#146;t see much value in being able to get access to higher-level algorithms for analysis that comes with graph software. A graph used to represent associations between classes will be very disconnected in most cases. This happens because each vertex (application class object) will only have edges to the vertices it has a relationship with. I believe that these and other reasons justify the need for a special purpose many-to-many association class.</I></p>
<p>Eli Tilevich</p>
</blockquote></body></html>
