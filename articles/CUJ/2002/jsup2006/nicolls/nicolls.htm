<HTML>   
     <HEAD>
<TITLE>Java Solutions June 2002/DocumentBuilder: An Alternative to Hard-Coded String Concatenation</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjjun.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">DocumentBuilder: An Alternative to Hard-Coded String Concatenation</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Nicolls</FONT></H3>

<BLOCKQUOTE>
<p>Separating structure from content always begets a welcome flexibility. An effective deployment of Template Method, &agrave; la Mail Merge in this case, does the trick.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Overview</FONT></H3>

<p>Whether it be SQL, HTML, XML, or even ASCII, odds are just about every application you&#146;ve written has to generate a formatted <B>String</B> of some kind that represents the state of an object. <a href="fig1.htm">Figure 1</a> shows a common (albeit bad) way to generate an <B>INSERT SQL</B> statement for a <B>Customer</B> object. <a href="fig2.htm">Figure 2</a> shows a similar approach to creating an XML representation of a <B>Customer</B> object.</p>
<p>The problem with concatenating <B>String</B>s this way is that the hard-coded values bind your application to the implementation they are dealing with. For example, you could not change the name of a field of a table in your database or modify the format of your XML without having to change, recompile, retest, and re-deploy your application. The string-concatenation overhead is also nontrivial.</p>
<p>The ideal solution is to put the SQL, XML, HTML, etc. into a template file or database that you can load at run time. Doing so will allow you to change the text at any time without having to change your code. This is a simple enough concept that I&#146;m sure most developers have used it at one time or another, but it becomes difficult when the document you need to generate is riddled with dynamic information.</p>
<p>Using <B>DocumentBuilder</B> to generate documents relieves your application from knowing anything about the text (a.k.a. document) it is generating. This means that you can change the name of your <B>Customer</B> table without having to change a single line of code. Or, you can completely redesign your XML structure, and your application doesn&#146;t even know it happened.</p>

<H3><FONT COLOR="#000080">How It Works</FONT></H3>

<p>DocumentBuilder</B> is based on a concept similar to Mail Merge (found in most popular word processors). It merges a document template with data to produce something meaningful. The template contains &#147;field codes&#148; that <B>DocumentBuilder</B> looks for and then replaces the codes with data. <a href="fig3.htm">Figure 3</a> shows a sample template and results for creating a <B>Customer</B> XML document. <a href="fig4.htm">Figure 4</a> shows an HTML document.</p>
<p>Once <B>DocumentBuilder</B> has a template, it parses it and locates the field codes. As it finds each field code, it calls its own abstract method, <B>getValue(String code)</B>, passing in the field code that it found. The <B>getValue(code)</B> method returns a <B>String</B> value that should replace the field code. And, since the <B>getValue(code)</B> method is abstract, it is up to the class that extends <B>DocumentBuilder</B> (a.k.a. subclass) to implement the logic that evaluates the code and returns an appropriate value. Though I&#146;ve used function-like field codes in the earlier example, I could use any arbitrary string (such as <B>Object_reference:Attribute_name</B>).</p>

<H3><FONT COLOR="#000080">A Closer Look</FONT></H3>

<p>Fear not! I&#146;ve written some of the most common implementations of <B>DocumentBuilder</B>. But before I talk about those, let&#146;s first take a look at the source code for <B>DocumentBuilder</B> (see <a href="list1.htm">Listing 1</a> and <a href="fig5.htm">Figure 5</a>).</p>
<p>The <B>DocumentBuilder</B> implementation is a classic example of the Gang-of-Four Template Method design pattern. The real work is done in <B>build_document</B>, which calls various abstract methods to do implementation-specific work. Another viable alternative would be to provide an interface that defined the user overrides and then pass an implementation of that interface into <B>buildDocument</B> as an argument. (This latter solution would be an example of the Gang-of-Four Strategy pattern.)</p>

<H3><FONT COLOR="#000080">Open/Close Delimiters</FONT></H3>

<p>The open and close delimiters are used to tell <B>DocumentBuilder</B> what characters are used to encapsulate field codes in document templates. The default open delimiter is a left French brace (&#147;{&#147;); likewise, the default close delimiter is the right French brace (&#147;}&#148;).</p>
<p>You can set the open and close delimiters to whatever you want. You might use &#147;[&#147; and &#147;]&#148;, or even &#147;~&#148; and &#147;~&#148;. Try not to use &#147;&lt;&#148; and/or &#147;&gt;&#148; when building an HTML or XML document though (see the sidebar, <a href="sidebar.htm">&#147;Delimiter Issues&#148;</a>).</p>

<H3><FONT COLOR="#000080">The getValue Method</FONT></H3>

<p>The coolest part of <B>DocumentBuilder</B> is that it does everything for you. The only thing it leaves up to its subclasses is the <B>getValue</B> method. This is why <B>DocumentBuilder</B> is so flexible, because it leaves the processing up to the specific implementation.</p>
<p>For example, I&#146;ll talk later about three basic implementations of <B>DocumentBuilder</B>:</p>

<OL><LI><B>HashtableDocumentBuilder</B></LI>
<LI><B>ResultSetDocumentBuilder</B></LI>
<LI><B>ObjectDocumentBuilder</B></LI></OL>

<p>These subclasses implement the <B>getValue</B> method as shown in <a href="fig6.htm">Figure 6</a>.</p>

<H3><FONT COLOR="#000080">Useful Implementations</FONT></H3>

<H4><FONT COLOR="#000080">ObjectDocumentBuilder</FONT></H4>

<p>ObjectDocumentBuilder</B> is probably the most useful of the three implementations I&#146;ve provided (see <a href="list2.htm">Listing 2</a>). You&#146;ll notice that the constructor (lines 18-21) accepts both a document template and an <B>Object</B>. The <B>Object</B> will be used in the <B>getValue</B> method to retrieve values from its accessor <B>Method</B>s (using reflection &#151; if you&#146;re unfamiliar with Java&#146;s &#147;reflection&#148; APIs, see the tutorial at &lt;http://java.sun.com/docs/books/tutorial/reflect/index.html&gt;).</p>
<p>Lines 40 and 41 are where I actually grab a reference to the <B>Method</B> using the <B>fieldCode</B> argument as the name of the <B>Method</B> and the <B>Object model</B> as the target. I wrap this call in a try/catch block &#151; so if any <B>Exception</B>s are fired, I simply return <B>null</B>.</p>

<H4><FONT COLOR="#000080">ResultSetDocumentBuilder</FONT></H4>

<p>ResultSetDocumentBuilder</B> is another useful implementation of <B>DocumentBuilder</B> (see <a href="list3.htm">Listing 3</a>). You&#146;ll notice that the constructor (lines 20-23) accepts both a document template and a JDBC <B>ResultSet</B>. The <B>ResultSet</B> is used in the <B>getValue</B> method to retrieve values from its <B>getString(String fieldName)</B> method.</p>
<p>Line 35 is where I actually grab the value of the field in the <B>ResultSet</B>. If the field is not found, or there are any other <B>Exception</B>s, <B>null</B> is returned.</p>

<H4><FONT COLOR="#000080">HashtableDocumentBuilder</FONT></H4>

<p>HashtableDocumentBuilder</B> (see <a href="list4.htm">Listing 4</a>) is similar to <B>ResultSetDocumentBuilder</B>. Except, instead of wrapping a JDBC <B>ResultSet</B>, it wraps a <B>Hashtable</B>. The <B>Hashtable</B> is used in the <B>getValue</B> method to retrieve values from its <B>get(Object key)</B> method.</p>
<p>Line 36 is where I actually grab the value <B>Object</B> stored in the <B>Hashtable</B>. The <B>fieldCode</B> argument is used as the key, and if it is not found, or there are any other <B>Exception</B>s, <B>null</B> is returned.</p>

<H3><FONT COLOR="#000080">Moving On</FONT></H3>

<p>As you can see, the <B>DocumentBuilder</B> utility classes are very useful. The three implementations provided should give you most of what you need, but other implementations can easily be created to meet your specific needs. So whether you need to create SQL, HTML, XML, or just plain ASCII, <B>DocumentBuilder</B> will help you do this easily, while relieving your application code from having hard-coded <B>String</B> concatenation.</p>

<p><i><B>Matt Nicolls</B> is president and founder of Streamlined Technology LLC, a software-design firm based in St. Louis. Streamlined Technology provides Java mentoring, application design and development services, as well as packaged software solutions. In addition to being a member of MENSA, Matt is an expert in both enterprise software development and object-oriented analysis and design and has worked in the IT field for over 10 years. Visit his company website at &lt;www.stream-tech.com&gt; or email him directly at <B>matt@stream-tech.com</B>.</i></p>

<h4><a href="../../../source/2002/jjun02/nicolls.zip"></a></h4>
</blockquote></body></html>
