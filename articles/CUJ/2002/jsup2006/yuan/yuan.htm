<HTML>   
     <HEAD>
<TITLE>June 2002/Writing Java Applications for Mobile Devices</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjjun.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Writing Java Applications for Mobile Devices</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael J. Yuan</FONT></H3>

<BLOCKQUOTE>
<p>J2ME: Making good on the Write Once Run Anywhere promise. Here's how to make it happen in the Palm world.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Java in a Wireless World</FONT></H3>

<p>One of Java&#146;s greatest promises is the ability to build platform-independent applications. Java applications are byte-code programs running inside VMs (virtual machines). VMs can be ported to many operating systems (OSs) and allow Java byte code to run independent of the hosting OS. However, the cross-platform compatibility of Java has been embraced with limited success in the world of desktop computing. Desktop computers are dominated by one platform: Windows. The performance penalty of running non-native byte code on Windows discourages developers from using Java in single-platform applications.</p>
<p>However, in the world of handheld devices, Java&#146;s ability to &#147;write once, run anywhere&#148; might give Java the ultimate chance for success. As wireless hardware quickly improves, you will soon see standard cell phones running sophisticated client-side programs on various hardware/OS platforms. It is crucial for wireless application developers to use a language that can work with various device platforms on the market. Java&#146;s promise of platform independence meets such a demand.</p>
<p>Using Java to develop mobile applications has other advantages: Java is a well designed object-oriented language that supports advanced programming techniques; Java VMs can safeguard memory leaks, which are especially dangerous for small memory devices; Java-based mobile applications can integrate seamlessly with the large number of Java server-side applications existing on the Internet.</p>
<p>In this article, I will discuss how to use the Java platform to develop mobile applications using Palm application development as my example.</p>

<H3><FONT COLOR="#000080">MIDP</FONT></H3>

<p>J2SE (Java 2, Standard Edition) is designed for desktop computers. Since handheld devices have much less processing power and memory than desktop computers, it would be unwise to port the whole J2SE environment to the wireless world. Instead, you need a small footprint, fast Java run-time environment with a limited set of the most useful functionalities for mobile applications.</p>
<p>To enable Java development for wireless devices, Sun released a stripped down version of Java called J2ME (Java 2, Micro Edition). J2ME is divided into configurations and profiles. You can use different combinations for different processing power and memory requirements. The CLDC (Connected Limited Device Configuration) and MIDP (Mobile Information Device Profile) combination is designed for resource-constrained mobile devices, such as cell phones and low-end PDAs. CLDC provides class libraries to support a limited set of Java core language APIs; MIDP provides device-specific implementations for application-level APIs, such as GUI components, network connection, and persistent storage. CLDC and MIDP work together to provide a complete development and run-time environment for mobile devices. In this article, I will refer the CLDC/MIDP combination as MIDP. To create MIDP applications, you need implementations of CLDC and MIDP, which can be downloaded from Sun&#146;s website (&lt;http://java.sun.com/products/cldc/&gt; for CLDC and &lt;http://java.sun.com/products/midp/&gt; for MIDP).</p>
<p>MIDP applications run on any cell phone or PDA device that has an MIDP VM installed. A particularly important platform for MIDP is the Palm devices. In this article, I will use an MIDP environment for Palm devices to illustrate how to develop MIDP applications.</p>

<H3><FONT COLOR="#000080">Example</FONT></H3>

<p>An MIDP application usually consists of one or several related MIDlets and their supporting classes. A MIDlet is a Java class extending <B>javax.microedition.midlet.MIDlet</B>. The example application consists of two MIDlets (see <a href="fig1.htm">Figure 1</a>). The MIDlet <B>FetchPage</B> allows a user to enter an Internet URL in a text field (see <a href="fig2.htm">Figure 2</a>). After the user hits the <B>FETCH</B> button, <B>FetchPage</B> makes an HTTP connection to that URL and displays the content it fetched in a text box (see <a href="fig3.htm">Figure 3</a>). If the URL is not valid, <B>FetchPage</B> returns an error message (see <a href="fig4.htm">Figure 4</a>). The MIDlet <B>FetchPage</B> stores all the valid URLs it visited in an on-device database, which can persist through soft resets. The MIDlet <B>History</B> allows you to read the stored list of visited URLs (see <a href="fig5.htm">Figure 5</a>). The source code for this application can be downloaded from &lt;www.cuj.com/code&gt;.</p>
<p>The implementation of this example covers major topics of MIDP programming, including high-level GUI components and event handling, network connectivity, and persistent storage. In the next two sections, I will discuss the above topics in detail. The only topic that I leave out in this example is low-level GUI programming. If your main interest is using MIDP to develop wireless games, you can refer to <a href="#3">[3]</a> for topics on low-level GUI programming.</p>

<H3><FONT COLOR="#000080">MIDP GUI Programming</FONT></H3>
<p>In a nutshell, a high-level GUI MIDlet has the following components:</p>

<OL><LI>A <B>Display</B>: Before the MIDlet can display anything on the PDA screen, it has to get a <B>Display</B> object through static method <B>javax.microedition.lcdui. Display.getDisplay</B>. <B>Display</B> is associated with the hardware LCD.</LI>
<LI>One or more <B>Screen</B>s: a MIDlet can have one <B>Display</B> object and several <B>Screen</B> objects. <B>Display</B> can make any one of the <B>Screen</B> objects visible at a given time by calling the <B>Display.setCurrent</B> method. There are four types of <B>Screen</B> objects: <B>Alert</B>, <B>TextBox</B>, <B>List</B>, and <B>Form</B>. Among them, <B>Form</B> is the most flexible since you can add other smaller GUI components in a <B>Form</B>. Those smaller components include <B>ChoiceGroup</B>, <B>DateField</B>, <B>Gauge</B>, <B>StringItem</B>, <B>TextField</B>, and <B>ImageItem</B>.</LI>
<LI><B>Command</B> buttons: a <B>Screen</B> contains multiple <B>Command</B> objects, which appear like buttons on the display. When the user presses a <B>Command</B> button, it generates an event that can be captured by the <B>CommandListener</B> object of the current <B>Screen</B>. <B>Command</B> is the only way to navigate among <B>Screen</B>s and invoke GUI event-processing methods.</LI>
<LI>A <B>CommandListener</B> for each <B>Screen</B>: a <B>CommandListener</B> is associated with a <B>Screen</B> through the <B>Screen.setCommandListener</B> method. <B>CommandListener</B> analyzes the events from <B>Command</B> buttons and performs appropriate actions through its <B>commandAction</B> method. In my example, the <B>CommandListener</B> of <B>Screen</B>s in a MIDlet is set to be the MIDlet itself for simplicity.</LI></OL>

<p>Skeleton code for the example MIDlet <B>FetchPage</B> is shown in <a href="list1.htm">Listing 1</a>.</p>

<H3><FONT COLOR="#000080">Network Connectivity and Persistent Storage</FONT></H3>

<p>An MIDP application can access remote and local data through HTTP network connections and local persistent data storage.</p>
<p><B>HTTP network connections:</B> mobile Internet applications need to deal with data anywhere on the Internet. Therefore, the ability to establish network connections and read/write data streams through these connections is very important. Interface <B>HttpConnection</B> defines basic HTTP functions MIDP can perform. You can create an <B>HttpConnection</B> object by passing a valid HTTP URL as a string parameter to static method <B>javax.microedition.io.Connector.open</B>. Methods <B>openDataInputStream</B> and <B>openDataOutputStream</B> in an <B>HttpConnection</B> object return the input and output streams from the current connection. You can then send data to the HTTP server at the other end of the connection by writing into the output stream and retrieve data from the server by reading from the input stream. <a href="list2.htm">Listing 2</a> illustrates the use of HTTP connections in the MIDlet <B>FetchPage</B>.</p>
<p><B>Local data storage:</B> in addition to remote data, applications also need to store and access data locally. Local data access is fast and reliable. In the case of mobile applications, locally stored data allows the program to function continuously even when the network connection is temporarily lost. In the MIDP specification, the RMS (Record Management System) is designed to store data in on-device memory. A RMS record store acts like a file in the file system. It can be accessed by its name through static method <B>javax.microedition.rms.RecordStore.openRecordStore</B>. Since a record store is accessed by its name rather than its reference, the same store can be accessed from different MIDlets. RMS record stores can survive power off and soft resets. Data in a RMS store is organized in a series of records. You can add a new record to a store using the <B>addRecord</B> method, and it returns a serial number that is automatically assigned to the new record. A record can be accessed by its serial number through the record store&#146;s <B>getRecord</B> method. If you do not know the serial number of your target record, you can iterate through all records using a <B>RecordEnumeration</B> object returned by the <B>RecordStore.enumerateRecords</B> method. <a href="list3.htm">Listing 3</a> shows skeleton code for the RMS store management in the MIDlets <B>FetchPage</B> and <B>History</B>.</p>

<H3><FONT COLOR="#000080">Steps to Create an MIDP Application</FONT></H3>

<p>Since MIDP applications are Java byte-code applications, you need an MIDP VM on the target platform to interpret and run the byte code. The target platform in this example is the Palm OS. The MIDP 1.0 VM for Palm devices can be downloaded from Sun&#146;s website (packaged in the MIDP4Palm development kit) at &lt;http://java.sun.com/products/midp4palm&gt;. To install it, you just need to synchronize the VM executable <B>MIDP.prc</B> into your Palm device. To run the example code correctly, you need to enable networking in the Preferences section. The Palm MIDP VM itself is around 600 KB. The development kit also includes a conversion tool to convert Java classes into a Palm executable.</p>
<p>If you do not have a network-enabled Palm device, you can still develop network MIDP applications using an emulator. A Palm OS emulator can emulate all combinations of Palm hardware and OS versions on your desktop computer. The emulator software is available for Windows, MacOS, and Unix/Linux platforms. You can download it from Palm Developers website (&lt;www.palmos.com/dev/tools/emulator/&gt;). To run network applications, make sure you select &#147;Settings/Preferences/Redirect NetLib calls to Host TCP/IP&#148; on the emulator.</p>
<p>The following steps are required to create an MIDP application:</p>
<OL><LI>Use the J2SE byte-code compiler to compile the source code files into class files. Use the CLDC/MIDP <B>classpath</B> as the compiler&#146;s <B>-bootclasspath</B> and <B>-classpath</B>.</LI>
<LI>Use the Preverify tool packaged inside the CLDC development kit to pre-verify the compiled classes into directory output. Pre-verification makes the MIDP VM light weight and fast. Use the same <B>-classpath</B> as in Step 1.</LI>
<LI>Pack the pre-verified classes&#146; output/<B>*.class</B> into a jar file. To convert the jar file into an executable MIDP application, you need to specify meta information such as the MIDP VM version, the MIDlet names, and the corresponding class for each MIDlet. The meta information is specified in the Jar manifest file. The manifest file I used in the example application is shown in <a href="list4.htm">Listing 4</a>. The manifest file can be specified using the <B>jar</B> command&#146;s <B>m</B> option.</LI>
<LI>Use the class <B>com.sun.midp.palm.database.MakeMIDPApp</B> in <B>Converter.jar</B>, which is distributed with the MIDP4Palm package, to convert the jar file in Step 3 into a Palm <B>.prc</B> application.</LI>
<LI>Upload the <B>.prc</B> application created in Step 4 onto the Palm device.</LI></OL>

<p>Now, when you click on the icon of the new MIDP application on your Palm PDA, it will automatically invoke the MIDP VM and start execution.</p>

<H3><FONT COLOR="#000080">Integrate MIDP with J2EE Using XML</FONT></H3>

<p>My example application shows that it is quite easy to write a simple GUI-based network application using MIDP. But fetching and displaying raw HTML code is not very useful in the real world. To harness the full potential of a J2ME mobile application, you need not only to connect with Internet back-end services, but also to understand and manipulate the content. This requires the MIDP application to speak the same language as the back-end application servers. That language is XML.</p>
<p>XML has become the standard communication language between application servers because it is very robust. XML functionality is the most important feature you need in order to integrate MIDP applications with web service back-ends. The current MIDP specification does not have XML processing requirements. So, for now, you have to rely on third-party tools. Although there are a lot of Java-based XML tools available, most of them cannot be used in MIDP applications because they require string and I/O functions beyond the CLDC core APIs. You need a light-weight, robust XML processing tool for MIDP applications. One of the best CLDC-compatible XML parsers is the open source kXML developed by Enhydra. The kXML parser supports both stream-based and tree-based XML parsing. To learn more about kXML, visit its website (&lt;http://kxml.enhydra.org/&gt;). For more information about integrating MIDP applications with J2EE servers, see <a href="#1">[1]</a>.</p>

<H3><FONT COLOR="#000080">The Future of MIDP</FONT></H3>

<p>As discussed above, the lack of XML capabilities in the current MIDP 1.0 specification has impeded the ability to create a MIDP front end for enterprise database and application servers. In addition, secure connectivity is not built into the current MIDP standard either. The lack of a secure communication channel limits MIDP&#146;s application in mobile commerce. On the user-interface front, the limited MIDP GUI design makes it difficult to create multimedia or game applications.</p>
<p>The next generation MIDP standard, MIDP 2.0, currently under Java Community Process (&lt;http://jcp.org/jsr/detail/118.jsp&gt;), addresses the above concerns while remaining compatible with MIDP 1.0. New features proposed in MIDP 2.0 include:</p>
<OL><LI>A security model including code signing and verification.</LI>
<LI>Secure networking including HTTPS.</LI>
<LI>A built-in lightweight XML parser.</LI>
<LI>A more flexible low-level GUI control.</LI>
<LI>PUSH architecture.</LI>
<LI>A sound API.</LI></OL>

<H3><FONT COLOR="#000080">Beyond MIDP</FONT></H3>

<p>MIDP strives to be a device-independent Java mobile application platform. However, in order to run on the smallest mobile devices, MIDP must have a conservative set of features. Today&#146;s PDAs have hardware capabilities much greater than mobile phones, which MIDP was originally designed for. If your target devices are low-end PDAs (such as Palm devices), you may consider using other Java development tools to take advantage of their power.</p>
<p>J2ME PDA Profile (&lt;http://jcp.org/jsr/detail/75.jsp&gt;) is an upcoming J2ME profile based on CLDC. It is designed for PDA devices, which are generally more powerful than MIDP devices. However, at the time of this writing, its specification has not been finalized.</p>
<p>kAWT (&lt;www.kawt.de/&gt;) is an AWT port for J2ME KVM. It relies only on the core API functions provided by CLDC. It allows desktop Java GUI programs implemented using AWT to be ported to PDA platforms with little modification. kAWT also supports color LCD devices. Compared with MIDP, kAWT offers much better functionality in GUI programming and provides better support for new hardware.</p>
<p>If your target platforms are high-end PDAs such as iPAQ and Zaurus, there are more powerful Java environments. Jeode (&lt;www.insignia.com/products/default.asp&gt;), developed by Insignia Solutions, offers Emdedded Java- and PersonalJava-compatible VMs and core API classes. Jeode has almost the full power of J2SE. You can run multi-tier networked Java applications directly from Jeode powered devices.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>In this article, I have reviewed popular Java technologies for writing portable programs on mobile devices. In particular, I have discussed J2ME/MIDP technology and given an example on how to create GUI-based network programs for Palm devices.</p>

<H3><FONT COLOR="#000080">Notes and Resources</FONT></H3>

<p><a name="1"></a>[1]  Michael Yuan and Ju Long. &#147;Build Database-Powered Mobile Applications on the Java Platform,&#148; <I>JavaWorld</I>, January 2002, &lt;www.javaworld.com/javaworld/jw-01-2002/jw-0118-midp.html&gt;.</p>
<p><a name="2"></a>[2]  Sun&#146;s SmartTicket J2ME/J2EE showcase demonstrates the power of enterprise J2ME applications, &lt;http://java.sun.com/blueprints/code/jsm10/application.html&gt;.</p>
<p><a name="3"></a>[3]  Two good J2ME/MIDP books are <I>Learning Wireless Java</I> by Qusay Mahmoud (O&#146;Reilly &amp; Associates, 2001) and <I>Wireless Java Programming with J2ME</I> by Yu Feng and Jun Zhu (Sams, 2001). </p>

<p><i><B>Michael J. Yuan</B> is a PhD candidate at the University of Texas at Austin. He is interested in utilizing advanced computer technology to help scientific research.</i></p>

<h4><a href="../../../source/2002/jjun02/yuan.zip"></a></h4>
</blockquote></body></html>
