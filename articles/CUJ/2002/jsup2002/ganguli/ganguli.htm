<HTML>   
     <HEAD>
<TITLE>Java Solutions February 2002/Building a Simple Client/Server App with Java and CORBA</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjfeb.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Building a Simple Client/Server App with Java and CORBA</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Mrittika Ganguli</FONT></H3>

<BLOCKQUOTE>
<p>CORBA is the ubiquitous standard for distributed computing, and Java is an ideal language for implementing CORBA implementations and delivering them to clients. Here&#146;s a thorough backgrounder and &#147;how-to.&#148;</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>With the Internet becoming a critical piece of the business infrastructure, many legacy-distributed applications are getting a make over. Network and telecommunications management applications are being developed today with the Internet in mind. Companies with development labs and customers around the world are also adopting the distributed development philosophy as a mode to develop and deploy their applications to their products&#146; users. For example, a large manufacturing company may include remote diagnostics software as part of their maintenance package. Similarly, a telecommunications giant might sell operations management software as part of their switch.</p>
<p>All distributed applications, especially those with a large number of users, must be robust, scaleable, interoperable, mobile, and platform independent. As many would agree, Java is the object-oriented language of the Internet that provides portability, a highly creative execution environment, and a very strong and secure platform. Among the existing distributed technologies, CORBA (Common Object Request Broker Architecture) is an open standard, is object-oriented, and binds with many existing languages, including Java. It communicates across a network, consisting of different operating systems running programs written in various languages, using standard protocols. CORBA provides the infrastructure and services needed for a scaleable environment. Consequently, Java and CORBA complement each other.</p>
<p>In this article, I will introduce the basic features of CORBA and Java and guide you through building a simple client-server application. You will also learn about the vendors who sell CORBA middleware and how CORBA stacks up against other distributed technologies.</p>

<H3><FONT COLOR="#000080">The CORBA Feel</FONT></H3>

<p>You may already know about the OMG (Object Management Group), &lt;www.omg.org&gt;, which defined the OMA (Object Management Architecture) that specifies how components in a distributed application can interact. From the OMA, CORBA came into existence.</p>
<p>The CORBA specification contains all the features necessary to build a distributed application. It specifies an implementation language neutral IDL (Interface Definition Language) that you can use to write interfaces for the distributed components. IDL specifications are translated into your implementation language by means of a vendor-supplied compiler, thus providing platform independence (since the IDL can be translated into many languages, provided that you have the requisite compiler). Compiling the IDL to generate code in Java, C++, and other languages provides language independence. For communication over protocols like TCP/IP or IPX/SPX, CORBA also specifies an interface to the middleware, called the ORB (Object Request Broker). The ORB implementation handles the necessary inter-language or inter-OS translation for making disparate programs work together. Besides these basic services, CORBA provides system-level services like security, naming, transactions, etc. They are collectively named CORBAServices (see <a href="tab1.htm">Table 1</a>).</p>

<H3><FONT COLOR="#000080">The Java Taste</FONT></H3>

<p>If your application has an Internet interface, you need a language that provides simplicity and platform independence. Some of the features of Java make it the right choice for building component-based applications. They are:</p>

<OL><LI>Java is object-oriented, which helps in building a component architecture framework.</LI>
<LI>The CORBA IDL interfaces map directly to Java interfaces and classes. In fact, with some CORBA vendors, you don&#146;t need to write an IDL at all since they can generate the required code directly from a <B>.class</B> file that represents an interface (and often generate the IDL as well).</LI>
<LI>A CORBA module is similar to a Java package (i.e., they both group related interfaces).</LI>
<LI>Exceptions in Java have to be thrown explicitly and handled accordingly. You will find it similar to the exceptions in CORBA and quite unlike those in C++.</LI></OL>

<H3><FONT COLOR="#000080">The ORB and Its Satellites, IDL and OA</FONT></H3>

<p>The ORB is essentially a software bus and a universal translator. CORBA defines the interface to the ORB for various languages, and the ORB vendor provides the implementation. ORBs are typically implemented by a vendor as a <B>.class</B> library, a <B>.so</B> file, a <B>.dll</B> file, or the equivalent, along with a suite of stand-alone services. It transmits requests from the client to the target components and translates the messages according to the underlying OS and network layer. Thus the ORB is central to the CORBA architecture, and you must initialize it on both the client and the server.</p>
<p>A CORBA ORB does the following:</p>

<OL><LI>Locate and instantiate objects on remote machines. The server ORB will prepare the server to receive requests once it is located.</LI>
<LI>Marshal and unmarshal parameters (see sidebar, <a href="side.htm">&#147;Stubs, Skeletons, and Marshalling&#148;</a>) and their values to and from remote method calls. The server ORB unmarshals these parameters and sends them to the server component. This is how platform independence, network independence, and OS independence are achieved.</LI></OL>

<p>You can build the component interfaces and supporting data structures using the CORBA IDL. Of course there are vendors, like VisiBroker, who give you the facility to directly generate interfaces from a Java class. That helps if you know Java but haven&#146;t worked with the IDL. But if you wish to use components developed in different languages, then you must expose the Java class&#146;s methods through an IDL interface. You can declare variables of basic types (see <a href="tab2.htm">Table 2</a>) or of user-defined types (<B>struct</B>, <B>union</B>, <B>enum</B>, and <B>sequence</B>). On the down side, CORBA must use a least-common-denominator strategy in determining legal parameter and return-value types. The entire typing system of the implementation language is not available to methods that will be called using CORBA. In particular, passing an object reference between two languages will be difficult at best, especially if one of the languages is not an object-oriented language (e.g, FORTRAN). Each IDL user-defined type gets compiled to a Java class, each IDL interface to a Java interface, and each IDL module to a Java package. When you compile the IDL, the compiler creates client stubs and server skeletons (see <a href="side.htm">sidebar</a>). <a href="fig1.htm">Figure 1</a> shows marshaling and unmarshaling in the context of this application, with an actual call going from the client through the stub and skeleton to the server and back.</p>
<p>Besides the ORB and IDL, you need an interface between the user-defined component implementations and the ORB. For that the CORBA standard describes a number of OAs (object adapters). Each CORBA interface is an abstract object and its Java (or any language) implementation is concrete and is termed a servant. The object adapter provides the servant a mechanism to access the services provided by the ORB. In particular, the OA will create and manage component IORs (Interoperable Object References, discussed below), provide interfaces to register the components with the ORB, dispatch component requests from the client, and activate inactive registered components on the server if requests either come to the server or start server processes with registered components.</p>

<H3><FONT COLOR="#000080">The CORBA Application</FONT></H3>

<H4><FONT COLOR="#000080">Interaction between CORBA Components</FONT></H4>

<p>Interaction between CORBA Components is based on the following basic concepts:</p>

<UL><LI>  <B>The IOR.</B> This is the core of all communication between components. A component exports its IOR to a file or database. The client obtains the required IOR and uses it to then invoke operations on the component. The IOR is composed of the hostname and the port number where the component resides, and a unique object key. <a href="fig2.htm">Figure 2</a> shows an example IOR.</LI>
<LI>  <B>The client.</B> This is an application that makes calls to functions of CORBA components and uses their services by using the components&#146; IOR. The client ORB marshals parameters from the client to the server during a method call to the server component.</LI>
<LI>  <B>The server.</B> This contains the CORBA components that need to be created, their IOR published, and their services made ready for the client. The application that does all these functions is called a server. It initializes the ORB, initializes the OA, and exports the IORs. The server ORB marshals any return values or exceptions from the server components to the client. The client ORB unmarshals whatever it got from the server.</LI>
<LI>  <B>The CORBA call.</B> When the client calls a member function of a server component, it is said to have made a CORBA call. A component can call a member function or operation of another component. All these operations have to be siphoned through the ORB. <a href="fig1.htm">Figure 1</a> demonstrates one CORBA call.</LI>
</UL>

<H4><FONT COLOR="#000080">Steps to Building the Application</FONT></H4>

<OL><LI>To build the distributed application, you first decide on an ORB and install that software. For Java, you install a JDK package, like JDK 1.3 from &lt;http://java.sun.com/j2se/1.3/&gt;.</LI>
<LI>Then you decide on the core functionality of the application and separate the services from the user interface. That is, not all methods of the exposed classes (and certainly not all classes) of the application need to be accessible via CORBA.</LI>
<LI>Your services can be grouped into one or more components (think &#147;class&#148;). Those components will be on your server.</LI>
<LI>The user interface will be your client.</LI></OL>

<p>My application gets values and properties from the server and displays a simple bar chart on the client screen. The inspiration for this application comes from the Bar Chart applet included with Sun&#146;s JDK 1.3 package, which I downloaded and installed. I have used IONA&#146;s ORBIX 2000 as the ORB. You can download and install the trial version from &lt;www.iona.com&gt;.</p>

<H4><FONT COLOR="#000080">The Software Setup</FONT></H4>

<p>You must install JDK first and set the system variable <B>JAVA_HOME</B> to the <B>&lt;install_path&gt;/jdk1.3/bin</B> directory. Installing the ORBIX software is quite easy. You follow the steps for installation and then configure. For configuring I ran the Orbix program <B>it_configure</B> from the command prompt and entered the default values.</p>

<H4><FONT COLOR="#000080">The Server</FONT></H4>

<p><a href="list1.htm">Listing 1</a> shows the IDL interface, <B>Chart.idl</B>, and the functions that I developed first. To create a package, I gave <B>chartmanager</B> as the module name. In the interface definition, you will see that the input parameters are preceded by the <B>in</B> keyword, and the output parameters are preceded by the <B>out</B> keyword. <B>in</B> parameters are passed from the client to the component; <B>out</B> parameters are passed from the component to the client. You can also have <B>inout</B> parameters, which are passed in both directions.</p>
<p>I compiled this IDL using <B>idl.exe</B> (<a href="list2.htm">Listing 2</a>), and it created the following class files (<a href="fig3.htm">Figure 3</a>):</p>

<UL><LI>  From the <B>enum</B> and <B>struct</B> definitions, one Java class like <B>Style</B> was created and a helper and holder class like <B>StyleHelper</B> and <B>StyleHolder</B> were created. You can use the holder class for marshaling data from the server to the client.</LI>
<LI>  From the interface definition <B>if_chartServer</B>, one stub class <B>if_ChartServerStub</B> was created for client marshaling; one <B>if_ChartServerPOA</B> was created for the component interface to interact with the OA; one <B>if_Chartserver</B> was created for the OA to use for calling the component&#146;s member functions; one <B>if_ChartServerOperations</B> and similar helper and holder classes were created. Refer to <a href="list3.htm">Listing 3</a> for snippets of these classes.</LI>
<LI>  The generated classes are not to be edited. Since, the OA is the interface to the ORB, I created <B>ChartImpl</B> (see <a href="list4.htm">Listing 4</a>) derived from the skeleton, <B>if_ChartServerPOA</B>. This class forms the basis and is the only point of entry and exit for all <B>ChartServer</B> interactions with the outside world (i.e., any remote client or remote component).</LI>
</UL>

<p>I created a <B>ChartServer</B> (<a href="list5.htm">Listing 5</a>) class to instantiate the ORB, instantiate the OA, create the IOR of the component, and save it in <B>chart.ior</B>. At every stage, I am printing a message to the system, which is useful for debugging.</p>

<H4><FONT COLOR="#000080">The Client</FONT></H3>

<p>For the client I have one class, <B>Chart</B>. It has the <B>main</B>, <B>init</B> and <B>paint</B> member functions.</p>
<p>In the <B>main</B> function (<a href="list6.htm">Listing 6</a>), I instantiate the ORB, read the IOR of the object from <B>chart.ior</B>, and use <B>if_ChartServerHelper</B> to narrow the object reference of the component to an <B>if_ChartServer</B> object. Narrowing involves (<a href="list3.htm">Listing 3</a>) either typecasting the reference to an <B>if_ChartServer</B> object or retrieving the actual object through the client stub.</p>
<p>In the <B>init</B> function (<a href="list6.htm">Listing 6</a>), I use this object to call its member functions like <B>getCommonProperties</B> and <B>getBarProperties</B> to get the chart values, color, scale, and shading and save them in local variables.</p>
<p>Finally in the <B>paint</B> function (<a href="list6.htm">Listing 6</a>), I use these values to draw the bar chart.</p>

<H4><FONT COLOR="#000080">The Build File and Final Execution</FONT></H4>

<p>The build file (<B>build.bat</B>) has all the compile statements (<a href="list2.htm">Listing 2</a>) for compiling the IDL to Java files and for compiling the IDL generated files and the server and client files. Make sure the directory containing your classes is in the <B>classpath</B>. After compiling, I started the server from the classes&#146; directory by typing:</p>

<pre>
D:\corba\classes it_java corba.code.ChartServer
</pre>

<p>I got the messages shown in <a href="fig4.htm">Figure 4</a>.</p>
<p>I verified that <B>chart.ior</B> was created in the classes directory. In a separate DOS window, I ran the client by typing:</p>

<pre>
D:\corba\classes it_java corba.code.Chart
</pre>

<p>I got similar messages (<a href="fig4.htm">Figure 4</a>), and then the chart application showed up on the screen.</p>

<H3><FONT COLOR="#000080">The Vendors</FONT></H3>

<p>Over the years, a number of vendors have come up with CORBA ORBs that provide some or all of the CORBAServices in addition to the basic CORBA functionality. Some of them are:</p>

<UL><LI>  Orbix from IONA Technologies, &lt;www.iona.com&gt;</LI>
<LI>  VisiBroker from Borland, &lt;www.borland.com/products&gt;</LI>
<LI>  e*ORB from Vertel, &lt;www.vertel.com/products/eorb.asp&gt;</LI>
<LI>  Component Broker from IBM, &lt;www-4.ibm.com/software/ad/cb/&gt;</LI>
<LI>  Sun&#146;s JDK 1.2 (and above) has an ORB bundled with it</LI></UL>

<p>Refer to <a href="tab3.htm">Table 3</a> for a list of some of the features for each of these products.</p>
<p>I used Orbix 2000 for the chart application for no particular reason other than the fact that my team was developing network management software with this ORB; it was quite stable and I was familiar with its environment.</p>

<H3><FONT COLOR="#000080">The Others</FONT></H3>

<p><a href="tab4.htm">Table 4</a> gives an overview of how other distributed technologies, such as DCOM, RMI, and EJB, stack up against CORBA.</p>

<H3><FONT COLOR="#000080">Conclusions and Future Expansion</FONT></H3>

<p>This application is a simple demonstration of a CORBA server serving a few requests from a client application. The data is hard coded in the server. You could read the data from a file or enhance the application further by storing the chart data in a database and use JDBC to retrieve it when needed. That way searching and manipulation of data would become much simpler. Currently every time the server is run on a different machine, you need to export the IOR to a file. To avoid that, you can use the CORBA NS (Naming Service) to locate them by a name.</p>
<p>The NS is like a directory tree of component naming contexts: naming contexts contain name bindings or other naming contexts. Each name binding maps to an object reference. Hence unlike the IOR, you have a machine-independent form of representing and locating objects. The components can be located anywhere on the network instead of a particular machine. After creating a name, you register it and publish it in the NS. The client attaches (binds) to the NS and uses the name, from a file or database, to resolve and get a handle of the component object instance.</p>
<p>To use the NS, you need to create a naming tree or graph using the following constructs from the <B>Cosnaming</B> module in Orbix:</p>

<pre>
module CosNaming{
  typedef string Istring;
  struct NameComponent {
    Istring id;
    Istring kind;
  }
  typedef  sequence&lt;NameComponent&gt; Name;
  ...
};
</pre>

<p>The <B>id</B> field is mandatory, and <B>kind</B> is optional. If you want to use the same <B>id</B> for different components, you can differentiate by using the <B>kind</B> field. Otherwise you can leave it empty. To create a naming context for the Chart server, you create the naming graph with:</p>

<pre>
org.omg.CosNaming.NameComponent[] chart_name =
  new org.omg.CosNaming.NameComponent[]
{
  new NameComponent("ChartManager", "");
  new NameComponent("ChartServer", "performance");
};
</pre>

<p>In the server after you initialize the ORB, you get a CORBA reference to the initial naming context of the NS with:</p>

<pre>
org.omg.CORBA.Object obj =
  orb.resolve_initial_references("NameService");
</pre>

<p>Then you obtain a reference to the naming context by narrowing it: </p>

<pre>
org.omg.CosNaming.NamingContextExt root_cxt =
  org.omg.CosNaming.NamingContextExtHelper.narrow(obj))
if (root_cxt = null)
// show some error
else {...}
</pre>

<p>Now you have the root of the naming directory (or NS). To this root, you add your component-naming context by attaching (binding) to it:</p>

<pre>
// create naming context
org.omg.CosNaming.NamingContext chartserver_cxt =
  root_cxt.new_context();

// bind the new context to the name you created above
root_cxt.bind_context(chart_name, chartserver_cxt);
</pre>

<p>To access the server component in the client, you get the root context and create the <B>chart_name</B> exactly as in the server. Then you get a handle to the server object with</p>

<pre>
org.omg.CORBA.Object obj =
  root_cxt.resolve(chart_name);
</pre>

<p>and then narrow the CORBA object to an instance of <B>if_chartServer</B> with:</p>

<pre>
if_ChartServer chartSer =
  if_ChartServerHelper.narrow (obj);
</pre>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Viswajit Aklecha. <I>Object-Oriented Frameworks using C++ and CORBA</I> (Coriolis Group, 2000).</p>
<p><a name="2"></a>[2]  D. Slama, J. Garbis, and P. Russell. <I>Enterprise CORBA</I> (Prentice Hall, 1999).</p>
<p><a name="3"></a>[3]  Orbix 2000, documentation. </p>

<p><i><B>Mrittika Ganguli</B> is a systems analyst at Satyam Computer Services Ltd., Bangalore, India. She holds a Masters in Computer Systems from RPI, Troy, NY and has about six years of experience working with C++ and Java technologies. Her current assignment is guiding a team of engineers in designing and developing a distributed telecom application. Mrittika can be reached at <B>gangulm@yahoo.com</B>.</i></p>

<h4><a href="../../../source/2002/jfeb02/ganguli.zip"></a></h4>


</blockquote></body></html>
