<HTML><HEAD>
<TITLE>December 2002/STL &amp; Generic Programming/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A simple tuple class using typelists</A></h4>
<pre>
template&lt;int n&gt;
class NthElem{};

template&lt;typename TL&gt;
class Tuple;

template&lt;&gt;
class Tuple&lt;Nil&gt;{};

template&lt;typename TL&gt;
class Tuple
{
  
  typedef typename TL::Head ElementType;
  typedef typename Tuple&lt;TL::Tail&gt; RestType;

public:

  // Get Functions
  // =============

  // Get function for the nth element.
  template&lt;int m&gt;
  typename boost::add_reference&lt;
    typename MetaNthType&lt;TL, m&gt;::Ret
    &gt;::type 
  Get()
  { return UglyGet(NthElem&lt;m&gt;()); };

  // Ugly get function for the nth element, default 
  // implementation: look in the nested rest object.
  template&lt;int m&gt;
  typename boost::add_reference&lt;
    typename MetaNthType&lt;TL, m&gt;::Ret
    &gt;::type 
  UglyGet(NthElem&lt;m&gt;)
  { return m_rest.UglyGet(NthElem&lt;m-1&gt;()); };

  // Ugly get function for the nth element, overload for m=0:
  // return the element.
  typename boost::add_reference&lt;ElementType&gt;::type 
  UglyGet(NthElem&lt;0&gt;)
  { return m_elem; };

private:

  // Data members
  // ============
  ElementType m_elem;
  RestType m_rest;

};
&#151; End of Listing &#151;</pre></body></html>
