<HTML>   
     <HEAD>
<TITLE>December 2002/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: Typelists</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>Variable-length template argument lists are a cinch with this fundamental metaprogramming technique.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>A friend of mine recently sent me an email in which he told me about an upcoming film festival that is devoted entirely to local filmmakers. He expressed his excitement by saying, &#147;I love filmmakers. Without them, films would only be made by accident.&#148; I thought that was funny. If I as a software engineer were to say, &#147;I love creators of programming languages. Without them, programming languages would only be created by accident,&#148; then that would not really be funny. The programming language that I learned most recently and am really excited about was created entirely by accident. I am of course talking about C++ template metaprogramming, or MetaC++, as I have christened it for easier reference in this column. In my last two columns, I showed you how certain C++ template constructs can be used to write functions that are executed at compile time and whose output is injected in the source code that is then compiled into the actual machine code. These MetaC++ functions typically operate on types and <B>int</B>s (more precisely, on anything that can be passed as a template argument). They receive their arguments via template parameters, and they return their values via <B>typedef</B>s and <B>enum</B>s. The basic language constructs in MetaC++ are if branching and looping.</p>
<p>If you did not read my last two columns or have forgotten all about them, and this sounds mysterious to you, please read on. You will shortly see some simple MetaC++ functions at work, and I&#146;ll explain again briefly how it all works. This month&#146;s column can in fact be viewed as a third installment in a sequence on C++ template metaprogramming.</p>
<p>I mentioned before that the presence of if branching and looping makes MetaC++ as full-fledged a programming language as can possibly be: MetaC++ is Turing-complete, as the theoretical computer scientist would say. Of course, no designer of programming languages would seriously ask you to program with nothing but if branching and looping, or with any other minimal set of constructs, for that matter. But there is no designer behind MetaC++, so we have no one to complain to. And yet, it turns out that there is one more language construct available in MetaC++, and a very powerful one to boot, namely, lists of types. In this column, I&#146;ll show you what typelists are and how they can be used in conjunction with the MetaC++ techniques that we already know about.</p>
<p>Good introductions to typelists can be found in Chapter 3 of Andrei Alexandrescu&#146;s book <a href="#1">[1]</a>, in his online article <a href="#2">[2]</a>, and in Section 10.10.5 of Czarnecki and Eisenecker&#146;s book <a href="#3">[3]</a>. Andrei Alexandrescu&#146;s book <a href="#1">[1]</a> again tops the list for interesting applications. Other places you can look for applications are <a href="#4">[4]</a>, <a href="#5">[5]</a>, and <a href="#6">[6]</a>, among others.</p>
<p>As with most code that involves template metaprogramming, the examples in this column will compile only if partial template specialization is supported. In particular, Microsoft&#146;s Visual C++ will not compile any of this. However, as I have mentioned in my recent columns, Microsoft has made a commitment to rectify this situation in the near future.</p>

<H3><FONT COLOR="#000080">Typelists</FONT></H3>
<p>You are certainly familiar with the way lists are typically implemented in languages such as C and C++ (or Pascal, Modula, etc., for that matter): in these languages, a list is usually a set of nodes that is chained together by next pointers. The last node of the list can be identified by the fact that its next pointer is a null pointer. The list can be traversed by following the next pointers until the last node is reached. Conceptually, typelists in MetaC++ are very much like that: they are collections of types, not necessarily all different, which can be traversed in a well-defined order until the last element of the list is reached. Technically, this list structure is realized very differently in MetaC++ than in C or C++. Typelists very much resemble lists in good old Lisp, which I suppose only a minority of you are familiar with. In Lisp, lists are implemented using a nested structure. The empty list is a special object, usually called <B>nil</B>. A non-empty list is a pair. The first entry in the pair is the first element of the list, and the second entry in the pair is another list consisting of the remaining list elements. Here&#146;s an example: if we use the notation <B>(x, y)</B> for a pair, then the list of integers whose elements are <B>42</B>, <B>43</B>, <B>42</B>, and <B>41</B> (in that order) looks like this:</p>

<pre>
(42, (43, (42, (41, nil))))
</pre>

<p>Make sure you understand that you are looking at a pair whose first entry is the first list element &#151; the integer <B>42</B> in this case &#151; and whose second entry is again a pair of the form <B>(element, list)</B>.</p>
<p>The two entries of a non-empty, Lisp-style list are often called <B>head</B> and <B>tail</B>, <B>first</B> and <B>rest</B>, or, in most Lisp dialects, <B>car</B> and <B>cdr</B> (and you thought C++ nomenclature was unintuitive). Traversing such a list is a recursive affair: look at the head, and then traverse the tail. Stop when you encounter <B>nil</B>.</p>
<p>This being said, we&#146;re ready to look at typelists in MetaC++. The empty typelist is a specially named class that has no members and serves no other purpose than to be the empty typelist:</p>

<pre>
class Nil {};
</pre>

<p>To get non-empty typelists, we need the following class template:</p>

<pre>
template&lt;typename H, typename T&gt;
class TypeList
{
public:
  typedef H Head;
  typedef T Tail;
};
</pre>

<p>We can of course instantiate <B>TypeList</B> with any old value for the template parameters <B>H</B> and <B>T</B>, but the intended use is for <B>T</B> to be either <B>Nil</B> or another instance of <B>TypeList</B>. And that leads us to the formal definition of a typelist in MetaC++:</p>

<OL><LI><B>Nil</B> is the empty typelist.</LI>
<LI>A non-empty typelist is an instantiation of the class template <B>TypeList</B>, where the second template argument is again a typelist, possibly the empty one.</LI></OL>

<p>That way, we get the same nested structure as in a Lisp-style list. Here are three examples:</p>

<pre>
TypeList&lt;int, Nil&gt;
TypeList&lt;char*, TypeList&lt;int, Nil&gt; &gt;
TypeList&lt;int, TypeList&lt;char*, TypeList&lt;int, Nil&gt; &gt; &gt;
</pre>

<p>If you compare these to the Lisp-style lists that we discussed earlier, in a purely formal way, then you see that you can view each of these as a list of types. The third one, for example, can be viewed as a list containing the types <B>int</B>, <B>char*</B>, and <B>int</B>.</p>
<p>Notice that so far, we&#146;re just playing. The three things above are instantiations of a class template. Therefore, we could declare objects of any one of these types, as in:</p>

<pre>
TypeList&lt;int, TypeList&lt;char*, TypeList&lt;int, Nil&gt; &gt; &gt;
  someSillyObject;
</pre>

<p>But that hardly makes any sense: neither the class <B>Nil</B> nor the class template <B>TypeList</B> have any member functions or member variables, and therefore, an object such as <B>someSillyObject</B> above is just dumb and empty. What else could we possibly do with a class template instantiation? Let&#146;s try using it in a <B>typedef</B>:</p>

<pre>
typedef
  TypeList&lt;int, TypeList&lt;char*, TypeList&lt;int, Nil&gt; &gt; &gt;
    MyFirstTypeList;
</pre>

<p>Next, we could retrieve from <B>MyFirstTypeList</B> the three types that make up the typelist, using them, for example, to declare objects of the respective types:</p>

<pre>
MyFirstTypeList::Head thisIsAnInt;
MyFirstTypeList::Tail::Head thisIsACharStar;
MyFirstTypeList::Tail::Tail::Head thisIsAnotherInt;
</pre>

<p>What we have achieved by building a typelist from the three types <B>int</B>, <B>char*</B>, and <B>int</B> is this: we have taken three types and encoded them into one new type, in such a way that the three original types can be retrieved from the new type. Clearly, we can do this for any number of types. And all of this is happening at compile time. This is certainly rather intriguing. In fact, we&#146;re almost at a point where I can demonstrate to you the enormous programming power of typelists. Bear with me for one more ingredient in the mix.</p>

<H3><FONT COLOR="#000080">MetaC++ Functions That Operate on Typelists</FONT></H3>

<p>It is clear that an implementation of the list concept can only be useful if it comes with a certain minimal set of functions that do things such as getting the length of the list, retrieving the nth element, concatenating two lists, and so on. It turns out that everything our hearts desire along those lines can be written in MetaC++ for typelists. You can find a comprehensive treatment of this subject in Section 10.10.5 of Czarnecki and Eisenecker&#146;s book <a href="#3">[3]</a>, or in Chapter 3 of Andrei Alexandrescu&#146;s book <a href="#1">[1]</a>. As examples, I will show you the length function and the nth-element function.</p>
<p>For the length, we need a MetaC++ function that implements the following pseudocode:</p>

<pre>
int Length(typelist TL)
{
  if( TL == Nil )
    return 0;
  return Length(TL::Tail) + 1;
}
</pre>

<p>Here is how it&#146;s done <a href="#8">[8]</a>:</p>

<pre>
template&lt;typename TL&gt;
class MetaLength
{
public:
  enum{
    Ret = MetaLength&lt;typename TL::Tail&gt;::Ret + 1
  };
};

template&lt;&gt;
class MetaLength&lt;Nil&gt;
{
public:
  enum{ Ret = 0 };
};
</pre>

<p>Notice that <B>MetaLength</B> is your typical MetaC++ function. The function is implemented as a class template. Its argument is a type, which must be a typelist in this special case. The argument is passed to the function as a template parameter. The function &#147;returns&#148; an integer by defining a public <B>enum</B> value named <B>Ret</B>, which can be retrieved at compile time. The if construct of the pseudocode is implemented using explicit template specialization. If you want to convince yourself that MetaC++ functions are executed entirely at compile time, put the lines:</p>

<pre>
std::cout
  &lt;&lt; MetaLength&lt;MyFirstTypeList&gt;::Ret
  &lt;&lt; std::flush;
</pre>

<p>in your main program, where <B>MyFirstTypeList</B> is the <B>typedef</B> given above for the three-element typelist. You will find that the machine code that your compiler generates from these lines is identical to the machine code generated from the line:</p>

<pre>
std::cout &lt;&lt; 3 &lt;&lt; std::flush;
</pre>

<p>The pseudocode for the nth-element function looks like this:</p>

<pre>
type NthType(typelist TL, int n)
{
  assert( n &lt; Length(TL) );
  if( 0 == n )
    return TL::Head;
  return NthType(TL::Tail, n-1);
}
</pre>

<p>The MetaC++ code is:</p>

<pre>
template&lt;typename TL, int n&gt;
class MetaNthType
{
public:
  typedef MetaNthType&lt;typename TL::Tail, n-1 &gt;::Ret Ret;
};

template&lt;typename TL&gt;
class MetaNthType&lt;TL, 0&gt;
{
public:
  typedef typename TL::Head Ret;
};
</pre>

<p>This is an example of a MetaC++ function that takes two arguments, a type and an <B>int</B>. The function returns a type through the public <B>typedef</B> <B>Ret</B>. The if construct of the pseudocode is implemented via partial template specialization. Using the type <B>MyFirstTemplateList</B> defined earlier, the line:</p>

<pre>
MetaNthType&lt;MyFirstTypeList, 1&gt;::Ret aCharStar;
</pre>

<p>now declares a variable of type <B>char*</B>.</p>

<H3><FONT COLOR="#000080">Typelists: Putting It All Together</FONT></H3>

<p>What I have shown you so far is this: typelists provide us with a mechanism to encode any given ordered set of C++ types, basic or user-defined, not necessarily pair-wise different, into one new type, namely, a typelist. The typelist can be queried for its length, and the original types can be retrieved from the typelist by index. All this is happening at compile time using template metaprogramming. The significance of this for actual C++ programming lies in the fact that we can now encode several types into a typelist, pass that typelist to a class template as a single template argument, and then retrieve the elements of the typelist from the template argument. Here&#146;s a silly example:</p>

<pre>
template&lt;typename TL&gt;
class SillyUseOfTypeLists
{
private:
  enum{ nTypeListLen =
    MetaLength&lt;TL&gt;::Ret
  };
  MetaNthType&lt;TL, nTypeListLen-1&gt;::Ret
    sillyDataMember;
};
</pre>

<p>This class template takes a non-empty typelist as its template argument and defines a member variable whose type is the last type on the list. Okay, that&#146;s silly, but never mind. You&#146;ll see a serious example in just a moment. But you can already see what we have achieved here: we have extended the C++ language so that it now supports variable-length template parameter lists! In ordinary C++, a class template must have a fixed number of template parameters. Since C++ template parameters can be given default values, you may be able to instantiate a class template by giving it fewer arguments than the fixed number of template parameters, but you can never give it more template arguments than that. Using typelists, we can write class templates that effectively take an arbitrary number of template parameters. To do this, we write the class template in such a way that it takes one template parameter, a typelist. We then ask the client who instantiates the class to please take the template argument list that she wishes to pass to us and encode it into a typelist. Inside our class template, we retrieve these intended template arguments using the MetaC++ functions <B>MetaLength</B> and <B>MetaNthType</B>.</p>

<H3><FONT COLOR="#000080">A Dusting of Syntactic Sugar</FONT></H3>

<p>There is just one little dash of syntactic sugar that I want to mention before moving on to a real example of using typelists. Let us look at our earlier example of a three-element typelist again:</p>

<pre>
typedef
  TypeList&lt;int, TypeList&lt;char*, TypeList&lt;int, Nil&gt; &gt; &gt;
    MyFirstTypeList;
</pre>

<p>As the number of types you put in a list increases, typing the nested construct of heads and tails becomes increasingly annoying. Even Lisp programmers, who are not known to be easily intimidated by nested parenthesized expressions, have recognized that. Lisp traditionally has a function called <B>list</B>, which takes an arbitrary number of arguments and returns a list whose elements are those arguments, in the order that they were passed to the function <B>list</B>. It would be nice to have the same thing in MetaC++. In other words, we would like to have a MetaC++ function that implements the following pseudocode:</p>

<pre>
typelist List(type T1,..., type Tn)
{
  // Zero arguments passed
  if( 0 == n )
    return Nil;
  
  return TypeList&lt;T1, List(T2,..., Tn)&gt;;
}
</pre>

<p>where <B>T1,..., Tn</B> indicates a variable-length parameter list. There is just one little problem with translating this pseudocode into valid MetaC++. It&#146;s called the chicken-and-egg problem. The only way for us to implement variable-length parameter lists in MetaC++ is via typelists, and the sole purpose of the function <B>List</B> is to create typelists in the first place. Therefore, we&#146;ll have to settle for something less than a full-fledged <B>List</B> function. I mentioned before that by using default values for template arguments, we can write class templates in C++ that allow the client to pass any number of arguments up to the maximum that is specified in the definition of the class template. Using this technique, we can write a <B>List</B> function in MetaC++ that works for up to <B>n</B> elements, where <B>n</B> is an arbitrary but fixed number. We can still use the pseudocode for <B>List</B> given above as guidance on how to write the MetaC++ code. For example, for lists of up to four elements:</p>

<pre>
template&lt;
  typename T1=Nil,
  typename T2=Nil,
  typename T3=Nil,
  typename T4=Nil
  &gt;
class MetaList
{
public:
  typedef typename
    TypeList&lt;T1, typename MetaList
    &lt;T2, T3, T4&gt;::Ret&gt; Ret;
};

// Kicks in for zero arguments passed or 
// any number of Nil&#146;s passed.
template&lt;&gt;
class MetaList&lt;Nil, Nil, Nil, Nil&gt;
{
  public:
    typedef typename Nil Ret;
};
</pre>

<p>Our typelist <B>MyFirstTypeList</B> can now conveniently be generated as follows:</p>

<pre>
typedef MetaList&lt;int, char*, 
  int&gt;::Ret MyFirstTypeList;
</pre>

<p>A list with two elements can be generated just as easily:</p>

<pre>
typedef MetaList&lt;int&amp;, const char*&gt;::Ret MySecondTypeList;
</pre>

<p>Notice that the limitation of <B>MetaList</B> to a fixed maximal number of arguments does not compromise our ability to use typelists of arbitrary length. First of all, any given version of <B>MetaList</B> can easily be extended to any larger number of arguments with full downward compatibility: it is easy to find the three places in the definition of <B>MetaList</B> above where you have to add a little something to increase the maximal number of arguments. Secondly, in a full-fledged MetaC++ environment, you&#146;ll have the capability of concatenating any two typelists. Using that in conjunction with <B>MetaList</B>, you can build typelists of arbitrary length with relative ease. Finally, <B>MetaList</B> was only syntactic sugar to begin with. If all else fails, then you can always use the explicit nested form to generate your typelist.</p>

<H3><FONT COLOR="#000080">A Simple Application of Typelists</FONT></H3>

<p>If is often desirable to package objects of different, unrelated types into some sort of container. Think of the situation where you want to return a number of items from a function. Unfortunately, STL-style containers are homogeneous containers that hold objects of one and the same type. It is of course possible to work around that limitation using pointers and inheritance, but the extra effort, complexity, and overhead often make this an undesirable design choice. But what if you knew the number of elements that your container needs to hold and their types at compile time? This is almost like one of those interview questions where they test if you can still see the simplest things when surrounded by complex issues. A heterogeneous container whose size and element types are known at compile time is simply a <B>struct</B> whose member variables are the desired elements, possibly with <B>get</B> and <B>set</B> functions. Simple as this is, there is room for improvement here. Rather than having to define such a <B>struct</B> from scratch every time you need one, it would be nice to have a simple generic mechanism to generate the <B>struct</B> definition at compile time. All you&#146;d have to do would be to specify the types of the elements that you want in your <B>struct</B>. This can actually be achieved in MetaC++ with typelists. The resulting objects are a little more complex than the plain <B>struct</B>s that you would have written manually, but they behave in a very similar way.</p>
<p>Before I show you the basics of how all this can be done with MetaC++, let me point out that the whole idea has been implemented and brought to maturity by Jaakko J&auml;rvi. His tuple library is part of the Boost library <a href="#7">[7]</a>, and he has explained his implementation in <I>CUJ</I> <a href="#4">[4]</a>. The objects that he works with are called tuples, because you access the elements in there by index and not by name, as you would with a plain old <B>struct</B>. <a href="list1.htm">Listing 1</a> shows you a primitive tuple implementation that uses typelists. The class template <B>Tuple</B> of <a href="list1.htm">Listing 1</a> has one template parameter <B>TL</B>, a typelist. The class has two data members. The type of the first one, <B>m_elem</B>, is the first type on the typelist <B>TL</B>. The type of the second one is another instance of <B>Tuple</B>, with the template parameter set to the tail of the typelist <B>TL</B>. To visualize this nested structure, suppose we have instantiated <B>Tuple</B> as follows:</p>

<pre>
typedef MetaList&lt;int, char*, int&gt;::Ret ATypeList;
Tuple&lt;ATypeList&gt; aTuple;
</pre>

<p>The object <B>aTuple</B> is much like a simple <B>struct</B> that has two <B>int</B>s and a <B>char*</B> as its members. Except <B>aTuple</B> has a nested structure: it contains an <B>int</B> member and another <B>Tuple</B> object, which in turn holds the <B>char*</B> and the second <B>int</B>, using the same nested structure. Think of a set of Russian dolls, where each doll contains a coin of some type and another doll.</p>
<p>The <B>Get</B> function deserves some attention. Let us first look at how it is used. The following lines of code get and set the value of the second one of the three elements of our tuple object <B>aTuple</B>:</p>

<pre>
char* p = aTuple.Get&lt;1&gt;();
char c = &#146;x&#146;;
aTuple.Get&lt;1&gt;() = &amp;c;
</pre>

<p>You can see that the index of the element that is to be accessed is passed to the <B>Get</B> function as a template argument. Accordingly, the function <B>Tuple::Get</B> in <a href="list1.htm">Listing 1</a> is a function template with an integer template parameter. Don&#146;t look at the result type of this function for now. The function body does nothing but forward to a corresponding helper called <B>Tuple::UglyGet</B>. The forwarding call adds an argument, namely a tag object of type <B>NthElem&lt;m&gt;</B>, where <B>m</B> is the index of the element that we want to get or set. <B>NthElem</B> is an empty class template with a template parameter of type <B>int</B>. The only purpose of this class is to provide tags that have different types for different integer values. The helper <B>Tuple::UglyGet</B> is overloaded on the type of the tag argument. If <B>m</B> is <B>0</B>, it gets the element of the <B>this</B> object. If <B>m</B> is greater than <B>0</B>, it forwards the <B>get</B> request to the nested tuple object, with the index <B>m</B> decremented by <B>1</B>.</p>
<p>Conceptually, <B>Tuple::UglyGet</B> is a helper that ought to be private. The reason why it is not is that in the nested structure of tuples, the inner tuple <B>m_rest</B> is of a completely different, unrelated type than its containing tuple. Therefore, the call:</p>

<pre>
m_rest.UglyGet(NthElem&lt;m-1&gt;())
</pre>

<p>inside <B>Tuple::UglyGet</B> is not a recursive call. It is a call to a member of an object of an unrelated type. If <B>UglyGet</B> were a private member of the <B>Tuple</B> class template, this would not compile. The only way to fix it would be to establish an appropriate friend relationship. This, however, is notoriously difficult to achieve in the presence of templates. Therefore, <B>UglyGet</B> is a public member of the <B>Tuple</B> class template. That&#146;s not exactly pretty, but it is not a disaster either. <B>UglyGet</B> exposes no more and no less to the outside world than <B>Get</B> itself.</p>
<p>The other thing about the <B>Get</B> function that we need to look at is its result type. For someone who is not familiar with C++ template metaprogramming, the declaration:</p>

<pre>
template&lt;int m&gt;
typename boost::add_reference&lt;
  typename MetaNthType&lt;TL, m&gt;::Ret
  &gt;::type
Get();
</pre>

<p>must look quite intimidating. With a good understanding of MetaC++, figuring this out is a cinch. The function <B>Get</B> must return a reference to the <B>m</B>th tuple element. The type of this element is the <B>m</B>th type on the tuple&#146;s typelist <B>TL</B>. Therefore, the <B>Get</B> function&#146;s desired result type is obtained by first calling the MetaC++ function <B>MetaNthType</B> with the typelist <B>TL</B> and the integer <B>m</B> as its arguments. The return value of this call is then passed to a MetaC++ function that adds a reference in a way that does not cause a reference-to-reference situation. The appropriate choice for this function is Boost&#146;s <B>add_reference</B>.</p>
<p>Let me stress again that the tuple class in <a href="list1.htm">Listing 1</a> is only meant as a very simple example for the use of typelists. Jaakko J&auml;rvi&#146;s library implementation (see <a href="#4">[4]</a> and <a href="#7">[7]</a>) is much more mature. In particular, you won&#146;t find any explicit use of typelists in his implementation. The reason for this is that the nested structure of tuples parallels the nested structure of lists. It is therefore possible to incorporate the typelist structure into the tuple class itself. <a href="list2.htm">Listing 2</a> shows the essence of such a tuple class.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>
<p><a name="2"></a>[2]  Andrei Alexandrescu. &#147;Generic  &lt;Programming&gt;: Typelists and Applications,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, February 2002, &lt;www.cuj.com/experts/2002/alexandr.htm&gt;.</p>
<p><a name="3"></a>[3]  Krzystof Czarnecki and Ulrich W. Eisenecker. <I>Generative Programming, Methods, Tools, and Applications</I> (Addision Wesley, 2000).</p>
<p><a name="4"></a>[4]  Jaakko J&auml;rvi. &#147;Tuple Types and Multiple Return Values,&#148; <I>C/C++ Users Journal</I>, August 2001.</p>
<p><a name="5"></a>[5]  Ulrich W. Eisenecker, Frank Blinn, and Krzystof Czarnecki. &#147;A Solution to the Constructor Problem of Mixin-Based Programming in C++,&#148; &lt;www.oonumerics.org/tmpw00/&gt;.</p>
<p><a name="6"></a>[6]  Emily Winch. &#147;Heterogeneous Lists of Named Objects,&#148; &lt;www.oonumerics.org/tmpw01/&gt;.</p>
<p><a name="7"></a>[7]   &lt;www.boost.org/libs/tuple/doc/tuple_users_guide.html&gt;</p>
<p><a name="8"></a>[8]  If you have read my previous columns, you&#146;ll notice that I have changed my notational convention for MetaC++ functions. I used to write them in all upper case letters, alluding to the dank and musty old world of preprocessor macros. I have decided that is ugly. Why not just prefix the names of MetaC++ functions with &#147;Meta&#148;?</p>

<p><i><b>Thomas Becker</b> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, Lake Tahoe. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2002/dec02/becker.zip"></a></h4>
</blockquote></body></html>


