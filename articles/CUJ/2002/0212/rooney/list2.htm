<HTML><HEAD>
<TITLE>December 2002/A Templated Library for Fast Multiplexing/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2:	Two delegates&#146; implementations of remove</A></h4>
<pre>
a) kqueue delegate's remove()
  ...
    vector &lt;struct kevent&gt; poll_queue_,change_queue_;
    typedef std::hash_map&lt;int, callback_wrapper&gt; fd_map;
    struct fd_maps {
      fd_map reader,writer; 
      inline int size(){return reader.size()+writer.size();}
      inline fd_map &amp;get_map(short interest){
        return (interest &amp; WRITE) ? writer : reader;
      }
    };
    fd_maps fd_maps_;
  ...

  void poller_kqueue::remove(int fd, short interest){
    fd_map &amp;map = fd_maps_.get_map(interest);
    fd_map::iterator it = map.find(fd);
    if (it != map.end()){
      struct kevent k;
      EV_SET(&amp;k,fd,poll_to_kq(interest),EV_DELETE,0,0,0);
      map.erase(it);
      change_queue_.push_back(k);
    }
  }

b) traditional poll() delegate's remove()
  ...
    struct fd_info {
      callback_wrapper reader,writer;
      int pollfds_index;
    };
    typedef std::hash_map&lt;int,fd_info&gt; fd_map;
    fd_map fd_map_;
  ...

  void poller_generic::remove(int fd, short interest){
    fd_map::iterator iter = fd_map_.find(fd);
    if (iter != fd_map_.end()){
      fd_info &amp;info = iter-&gt;second;
      int &amp;index = info.pollfds_index;
      pollfd &amp;pfd = pollfds_[index];
      if (interest ^ pfd.events &gt; 0){
      //the fd waits on other events just disable interest
      pfd.events ^= interest;
      if (interest &amp; READ){
        info.reader = callback_wrapper();
      }
      if (interest &amp; WRITE){
        info.writer = callback_wrapper();
      }
      }else{
      //actually remove
      pfd.fd = -1;
      pfd.events = 0;
      pfd.revents = 0;
      available_.push(index);
      if (index &gt;= num_fds_){
        for(;pollfds_[num_fds_].fd &lt;0 &amp;&amp; num_fds_;){
          num_fds_--;
        }
      }
      fd_map_.erase(iter);
      }
    }
  }
&#151; End of Listing &#151;</pre></body></html>
