<HTML>   
     <HEAD>
<TITLE>December 2002/Adaptable-Size Classes</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Adaptable-Size Classes</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Julian Bushell</FONT></H3>

<BLOCKQUOTE>
<p>Save space by letting the C++ template facility generate classes with only the data you need.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>This article describes a technique I developed called adaptable-size classes. This technique helped me build a software system that minimized disk I/O and maximized available memory at high levels of data throughput. The resulting C++ code was not only easy on the eye, but it also minimized code bloat and promoted the powerful constructs of abstraction and reusability for which C++ is famous.</p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>To put this article into context, I will first briefly describe the system that I developed using this technique. Next, I will show the boilerplate code that enables C++ classes to be adaptable in size. Then, I will delve deeper into business data objects and explain some practical technologies that anyone can use to implement their own adaptable-size classes.</p>
<p>To keep the code minimal for this article, I&#146;ve omitted the use of private attributes and accessors. In my explanations, I&#146;ve used the term class to mean both a C++ class and a C++ <B>struct</B>.</p>

<H3><FONT COLOR="#000080">History</FONT></H3>

<p>Not long ago, I had the opportunity to develop a financial reporting system in C++ that used as its input future-projected, simulated balance-sheet data items from 5,000 possible future scenarios for 20 future years from over 100 companies &#151; in other words, gigabytes of data, more than could fit into available memory. Any calculation involved the relatively slow access of retrieval from a database.</p>
<p>Being a lazy programmer, I wanted to write as little code as possible, make it look beautiful and maintainable, yet cope with the massive amount of data to be processed by being both efficient in its memory use while minimizing disk I/O (the bottleneck in system performance). As a result, I decided to develop the adaptable-size class technique.</p>

<H3><FONT COLOR="#000080">Adaptable-Size Classes</FONT></H3>

<p>Imagine a C++ class defined with three attributes:</p>

<pre>
struct CBA {
    double a;
    double b;
    double c;
};
</pre>

<p>My definition of an adaptable-size class is a family of classes with the same or a subset of its attributes in any order. Each variation on the class I term a class variation.</p>
<p>Hence to make <B>struct CBA</B> into an adaptable-size class, just define other class variations. For example:</p>

<pre>
struct CB {
    double b;
    double c;
};

struct CA {
    double a;
    double c;
};

struct AC {
    double c;
    double a;
};

struct B {
    double b;
};

etc.
</pre>

<H3><FONT COLOR="#000080">Defining Adaptable-Size Classes</FONT></H3>

<p>Though every class variation above can be hard coded as shown in the previous section, this will rapidly lead to code bloat and decrease the maintainability of your code, which is definitely not in keeping with my lazy programmer attitude. Also the variants will not possess any of the <I>magical</I> properties highlighted in the next section. But with my technique of adaptable-size classes, only one statement is required to define each class variation. For example, for the classes in the previous section, the class variations are defined:</p>

<pre>
typedef C_&lt;B_&lt;A_&lt;Base_&gt; &gt; &gt; CBA;
typedef C_&lt;B_&lt;Base_&gt; &gt; CB;
typedef C_&lt;A_&lt;Base_&gt; &gt; CA;
typedef A_&lt;C_&lt;Base_&gt; &gt; AC;
typedef B_&lt;Base_&gt; B;
</pre>

<p>Taking an arbitrary class variation:</p>

<pre>
typedef C_&lt;A_&lt;Base_&gt; &gt; CA;
</pre>

<p>this defines a class variation <B>CA</B> that uses inheritance to combine template classes <B>C_</B> and <B>A_</B> where <B>A_</B> contains attribute <B>a</B> and class <B>C_</B> attribute <B>c</B>.</p>

<pre>
template &lt;class Parent&gt; struct A_: public Parent {
    double a;
};

template &lt;class Parent &gt; struct C_: public Parent {
    double c;
};
</pre>

<p>Hence class <B>CA</B> will contain the attributes <B>a</B> and <B>c</B>. I call template classes <B>C_</B> and <B>A_</B> attribute classes. You can think of an attribute class as a wrapper class that exposes one attribute.</p>
<p>So to define any class variation combination, just list the attribute classes as nested template parameters, immediately after the <B>typedef</B> and before the class (variation) name.</p>
<p>To recap, an adaptable class is made up of class variations, and each class variation is made up of a subset of attribute classes in any order.</p>

<H3><FONT COLOR="#000080">Magical Powers of Adaptable-Size Classes</FONT></H3>

<p>So far, I&#146;ve told you how to define an adaptable size class, but not what they can do. For starters, by adding an assignment operator to each attribute class, when assigning one object class variation to another, it is possible to assign values for all attributes that are common to both classes, using just one line of code.</p>
<p>For example, instantiating these objects:</p>

<pre>
CBA cba;
CA ca;
</pre>

<p>and then later assigning <B>cba</B> to <B>ca</B>:</p>

<pre>
ca = cba
</pre>

<p>will cause the values for attributes <B>c</B> and <B>a</B> of <B>cba</B> to be assigned to the corresponding attributes of <B>c</B> and <B>a</B> in object <B>ca</B>. Conceptually the compiler expands the line <B>ca=cba</B> to:</p>

<pre>
ca.a=cba.a
ca.c=cba.c
</pre>

<p>In fact, adaptable-size classes allow any combination of attributes&#146; values to be copied/assigned. Here are some further examples with comments on the right:</p>

<pre>
cba = b;   // cba.b=b.b
cb = cba;  // cb.b=cba.b and cb.c=cba.c
ac = ca;   // ac.c=ca.c and ac.a=ca.a
cba = ac;  // cba.a=ac.a and cba.c=ac.c
cba = cb;  // cba.b=cb.b and cba.c=cb.c
</pre>

<p>Notice that it doesn&#146;t matter if the left-hand side-object contains a subset of attributes of the right-hand-side or if it is a superset of the right-hand side object.</p>
<p>Of course, this isn&#146;t just limited to assignment operators; it can be extended to any behavioral operation or method you can imagine. For example, addition:</p>

<pre>
cba = ca + b
</pre>

<H3><FONT COLOR="#000080">Required Boilerplate Code</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows the boilerplate code required for an attribute class <B>A_</B> with an assignment operator and a copy constructor that will allow class variations to be assigned/copied between each other. This code is the same for each attribute class. The only difference will be the class name and its attribute name. The full source code for <a href="list1.htm">Listing 1</a> is in the Visual C++ project <B>CBA</B> available for download at &lt;www.cuj.com/code&gt;. The source code has also been tested with Code Warrior Pro 6.1.</p>
<p>The <B>Base_</B> class is used as the root class to end the nesting of attribute classes when defining a class variation.</p>

<pre>
struct Base_ {
    
    template &lt;class T&gt; Base_(const T &amp;) {}
    Base_() {}
    
    void set(...) const {}
};
</pre>

<p>The boilerplate code relies heavily on the use of overloading and templates to achieve the overall functionality provided by each class variation.</p>

<H3><FONT COLOR="#000080">Figure 1</FONT></H3>
<p>It is useful to understand that each class variation has its own individual inheritance hierarchy of attribute classes, each starting with <B>Base_</B> as the root. (See <a href="fig1.htm">Figure 1</a> for the class hierarchy of two class variations.) By calling parent class methods and using overloading to traverse up and down these hierarchies, the boilerplate code is able to find the common matching attributes between the two class variations. In <a href="fig1.htm">Figure 1</a>, the common attributes are those in classes <B>C_</B> and <B>A_</B>. So executing the line:</p>

<pre>
cba=ca
</pre>

<p>causes the <B>ca</B>&#146;s <B>a</B> attribute to be assigned to <B>cba</B>&#146;s <B>a</B> attribute and the <B>c</B> attribute from <B>ca</B> to be assigned to <B>cba</B>&#146;s <B>c</B> attribute.</p>
<p>Okay, let&#146;s delve deeper into this. (If you understand how this works already, please go to the next section). The first method that is executed is <B>cba</B>&#146;s assignment operator (i.e., <B>C_B_A_&lt;Base_&gt; &gt; &gt;::operator=(ca)</B>).</p>
<p>Examine the source code for <B>cba</B>&#146;s assignment operator:</p>

<pre>
template &lt;class T&gt; C_ &amp; operator=(const T &amp; t_)
{
    Parent::operator=(t_);
    t_.set(this-&gt;c, C_&lt;Unique_&gt;());
        
    return *this;
}
</pre>

<p>The first line <B>Parent::operator=(t_)</B> invokes <B>cba</B>&#146;s assignment operator for its <B>Parent</B> class <B>B_&lt;A_&lt;Base_&gt; &gt;::operator=(ca)</B>. Since the boilerplate code for each attribute class is the same, the execution proceeds up the inheritance hierarchy from <B>B_&lt;A_&lt;Base_&gt;</B> until the <B>Base_</B> class is reached.</p>

<H3><FONT COLOR="#000080">Figure 2</FONT></H3>

<p><a href="fig2.htm">Figure 2</a> illustrates the following flow. As the default assignment operator of <B>Base_</B> does nothing, the program stack is unwound to <B>A_&lt;Base_&gt; &gt;::operator=(ca)</B>, and its second line <B>t_.set(this-&gt;a, A_&lt;Unique_&gt;())</B> is called. This effectively swaps the left-hand- side and right-hand-side class variations, and this time the method <B>Parent::set(t_, t)</B> in the boilerplate code (see <a href="list1.htm">Listing 1</a>) leads to a traversal up <B>ca</B>&#146;s class hierarchy. This continues until the <B>ca</B>&#146;s <B>Base_ class</B> has been reached or until an overloaded set method with a second parameter of type <B>A_&lt;Unique_&gt;()</B> has been matched in one of the attribute classes that make up <B>ca</B>&#146;s class hierarchy. In this case, <B>ca</B>&#146;s class attribute <B>A_</B> does have such a method <B>set(double &amp; a, A_&lt;Unique_&gt;)</B>. Its implementation is <B>a = this-&gt;a</B>, which assigns the value in <B>ca</B>&#146;s <B>a</B> attribute to <B>cba</B>&#146;s <B>a</B> attribute. Phew, that&#146;s one attribute assigned.</p>
<p>Next, the program stack is unwound again and the method <B>set(this-&gt;b, B_&lt;Unique_&gt;())</B> is looked for in <B>ca</B>&#146;s class hierarchy. Since <B>ca</B> does not have a <B>B_</B> attribute class, the method is not found and class <B>Base_</B> is reached.</p>
<p>The program stack is unwound one last time. The class hierarchy for <B>ca</B> does have a <B>set(double &amp; c, C_&lt;Unique_&gt;)</B> method, so assignment of the attribute <B>c</B> in <B>ca</B> is made to <B>cba</B>&#146;s <B>c</B> attribute.</p>

<H3><FONT COLOR="#000080">A Real World Example</FONT></H3>
<p>There are three things that need to happen when I code:</p>

<UL><LI>   I want to be able to go on holiday and still understand my code when I return.</LI>
<LI>   I don&#146;t want to write time-wasting code to translate from a relational database to an object-oriented system. Been there, done that.</LI>
<LI>   I want to minimize database access because this is the number one factor affecting the run time in the software system I developed.</LI>
</UL>

<p>The first point is a subject of readability, understandability, and maintainability of my source code. I like to represent real-world business objects in the code itself. With adaptable-size classes, I can do this throughout the code. I name the attributes and attribute classes in a manner consistent with the naming conventions used by the business domain experts. For example, here are some of the attribute classes that make up the adaptable-size class for a company balance sheet:</p>

<pre>
RetainedProfit_, ShareCapital_,
CurrentLiabilities_, Machinery_,
Land, Cash_, Debtors_, Stock_
</pre>

<p>Next, here are some class variations in my source code using these attribute classes:</p>

<pre>
typedef RetainedProfit_&lt;
  ShareCapital_&lt; 
  CurrentLiabilities_&lt; 
  Machinery_&lt;Land_&lt;Cash_&lt; 
  Debtors_&lt;Stock_&lt;
  Base_&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; BalanceSheet;

typedef  Cash_&lt; Debtors_&lt;Stock_&lt;
  Base_&gt; &gt; &gt; CurrentAssets;
typedef  Machinery_&lt; Land_&lt; 
  Base_&gt; &gt; FixedAssets;

typedef  CurrentLiabilities_&lt;
  Base_&gt; CurrentLiabilities;

typedef RetainedProfit_&lt;
  ShareCapital_&lt;Base_&gt; &gt; Equity;
</pre>

<p>Then in true generic programming fashion, I would place these objects in STL containers when needed and feed them to various algorithms that would access them via iterators. But how do you get them from the database to the STL containers in the first place?</p>
<p>This brings me to my second point: avoiding having to deal with the conceptual shift from the relational database world to the object-oriented/generic paradigms of C++. My answer is to use a database abstraction layer that makes my database look like an STL container. This technology is called the DTL (Database Template Library) and is available as a free download. DTL allows an ODBC database to be viewed as an STL container and is an easy way of storing and retrieving adaptable-size objects to and from a database. Without going into too much detail, DTL works by allowing attributes in classes to bind with fields in database tables.</p>
<p>To get DTL working with adaptable-size classes, all you need to do is implement an extra method in the boilerplate code and in each attribute class. For example, this method in the <B>Debtors</B> attribute class:</p>

<pre>
void bindColumns(BoundIOs &amp;cols)
{
 cols["debtors"] == debtors;
Parent::bindColumns(cols);
}
</pre>

<p>binds the attribute <B>debtors</B> to a field <B>&#147;debtors&#148;</B> of a database table and then calls the <B>bindColumns</B> method of the parent class ensuring that all the other attributes that make up the class variation have their attributes bound to the database table as well. For details on how to use DTL, visit their website. For details on how to use DTL with adaptable-size classes, see the source code in the BalanceSheet Visual C++ 6 project available for download at &lt;www.cuj.com/code&gt;.</p>
<p>Instead of setting up SQL statements to select the data that is needed from the database and then extra code to put them into objects&#146; attributes, you can set up a class variation in one line:</p>

<pre>
typedef  Cash_&lt; Debtors_&lt; Stock_&lt;
  Base_&gt; &gt; &gt; &gt; CurrentAssets;
</pre>

<p>Then give this class to DTL and let its abstraction layer deal with loading/saving the data in the object attributes from/to the database table.</p>
<p>This brings me to my last point: minimizing database access. If a user of my software system elects to run a report involving current assets, then I will keep the <B>CurrentAssets</B> objects residing in memory after the report has completed. If the next report requires a calculation that uses, for example, only <B>Debtors</B> since this is one of the attributes of <B>CurrentAssets</B>, some or all of the values needed will already be held in memory from the previous run. For each <B>CurrentAssets</B> object in memory, I will then assign them to the smaller class variation <B>Debtors</B> using the one-line assignment:</p>

<pre>
Debtors = CurrentAssets
</pre>

<p>Hence, this eliminates the need to reload any <B>Debtors</B> details that are already being held in memory via any <B>CurrentAssets</B> objects. When memory is at a premium, because <B>Debtors</B> objects are smaller than <B>CurrentAssets</B> objects, I can load a lot more into memory.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Adaptable-size classes represent an easy-to-use syntax for defining a family of classes that share a subset of common attributes. The ease to which class variations of an adaptable-size class can be defined allows for custom classes that hold only just enough data required for a particular algorithm. This allows for efficient use of memory. If objects of these classes are persisted in a database, then disk I/O is also reduced as unnecessary attributes are not read/written from/to the database.</p>
<p>Adaptable-size classes allow for easy assignment/copying of values of common attributes between different classes. This type of cooperating behavior can be extended to other operators and methods.</p>

<H3><FONT COLOR="#000080">Acknowledgement</FONT></H3>

<p>Thanks to Jason Poynting for proofreading and pointing out a code improvement.</p>

<p><i><B>Julian Bushell</B> holds a Bsc(Eng) in Computing Science at London Imperial College of Science, Technology, and Medicine. He is a software consultant currently working with Deloitte and Touche and specializes in financial modeling systems. He is also studying an MSc in Financial Markets and Derivatives at London Guildhall University. He can be reached at <B>jabushell@btinternet.com</B>.</i></p>

<h4><a href="../../../source/2002/dec02/bushell.zip"></a></h4>
</blockquote></body></html>
