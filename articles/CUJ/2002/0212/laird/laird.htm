<HTML>   
     <HEAD>
<TITLE>December 2002/How to Use Tcl and C Together</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">How to Use Tcl and C Together</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Cameron Laird</FONT></H3>

<BLOCKQUOTE>
<p>Mixing Tcl and C/C++ just got a whole lot easier.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>&#147;How do I call a C program from Tcl?&#148; is one of the most frequent questions Tcl newcomers ask. As simple as the question seems, it has dozens of useful answers.</p>
<p>Understand, that&#146;s not a defect in Tcl. There are situations where a choice between several alternatives hints that none of them is really complete or polished. That&#146;s not the case for marriages between Tcl and C, though; in fact, a principle design goal for Tcl was for it to make good &#147;glue&#148; for C functions. To meet that goal, the Tcl core technology reuses a few simple principles to expose several different approaches to uniting the two languages. Each one is best for at least some applications. Note, by the way, that this article consistently uses C as an abbreviation for C/C++. All the technologies profiled here apply equally to C or C++.</p>

<H3><FONT COLOR="#000080">An Easy Warm-Up</FONT></H3>

<p>Let&#146;s start with the simplest combination. You&#146;re likely to run into Tcl in all kinds of architectures: within web servers, scripting IRC (Internet Relay Chat) sessions, embedded in proprietary hardware, and so on. The easiest way to begin your Tcl career, though, is with a standard distribution interpreter. The latest information on standard Tcl appears at the Tcl Developer Xchange, available at  &lt;http://tcl-tk.net/&gt; or &lt;www.tcl.tk/&gt;.</p>
<p>After a quick download and installation to your Macintosh, Windows, or Unix desktop, you launch a Tcl interpreter or &#147;shell.&#148; It prompts you with a &#147;%&#148;. You begin:</p>

<pre>
% info tclversion
8.3
% puts "Hello, world."
Hello, world.
</pre>

<p>The lines that begin with &#147;%&#148; here are ones you type. Think of the others as Tcl&#146;s replies to you. Read more about how to begin to use Tcl at &lt;http://wiki.tcl.tk/298&gt;.</p>
<p>Typical Tcl development is highly <I>interactive</I>. In contrast to C&#146;s familiar edit-compile-link-execute cycle, Tcl calculations feel <I>immediate</I>.</p>
<p>In particular, Tcl only needs a single line to retrieve results from a C-coded application. Here&#146;s an example:</p>

<pre>
% set result [exec ping -c 3 tcl-tk.net]
PING tcl-tk.net (212.73.209.252): 
  56 data bytes
64 bytes from 212.73.209.252: 
  icmp_seq=0 ttl=244 time=107.6 ms
64 bytes from 212.73.209.252: 
  icmp_seq=1 ttl=244 time=107.3 ms
64 bytes from 212.73.209.252: 
  icmp_seq=2 ttl=244 time=107.6 ms

&#151;- tcl-tk.net ping statistics &#151;-
3 packets transmitted, 3 packets received,
  0% packet loss
round-trip min/avg/max = 
  107.3/107.5/107.6 ms
</pre>

<p>That&#146;s a typical result when using Linux or a similar Unix host. If you&#146;re on Windows, drop the <B>-c 3</B> arguments.</p>
<p>There! You&#146;ve just invoked a C-coded function &#151; the <B>main</B> that implements <B>ping</B> &#151; from Tcl.</p>

<H3><FONT COLOR="#000080">What&#146;s the Point?</FONT></H3>

<p>This example is a better one than might first appear. Many Tcl beginners see how easily Tcl manages external processes and conclude that <B>exec</B> and related conveniences aren&#146;t for serious programming. That&#146;s a mistake. One of Tcl&#146;s best uses is to &#147;wrap&#148; existing programs. Many programs in the world do important work, but clumsily. Preserve them for the good they do by wrapping them inside a friendlier, more flexible Tcl interface. By keeping the legacy C-coded programs unchanged, you eliminate the need to configure and test them for a new deployment. You can enhance and customize them purely through the wrapping code. Because Tcl is a succinct, high-level language, this will almost always be more productive than modifications to the legacy programs.</p>
<p>Dataplot is an example of this approach. Dataplot (&lt;http://wiki.tcl.tk/dataplot&gt;) is a Fortran-coded statistical package originally written at the National Bureau of Standards (now known as the National Institute of Standards and Technology) in the 1970s. Its command-line version is still in use on several platforms, essentially none of which existed when Dataplot was first coded. For modern users, a GUI written in Tcl wraps the command-line Dataplot.</p>
<p>If you&#146;re working with C and Tcl, your first instinct should be to look for the simplest feasible partnership between them. In many cases, construction of a stand-alone C executable, managed by Tcl as an external process, will meet all your needs. Tcl&#146;s <B>exec</B> recognizes flags for passing command-line variables and input and also can receive output (both <B>stdout</B> and <B>stderr</B>) as well as the managed process&#146;s &#147;exit value.&#148; <B>exec</B>&#146;s flexibility and polish are quite remarkable. Consider, for comparison, Tcl&#146;s peer languages, Python and Perl. While both also have mechanisms for controlling external processes, they&#146;re quite a bit &#147;clunkier&#148;: more obscure, and less succinct and portable. Documentation at &lt;http://wiki.tcl.tk/exec&gt; gives examples.</p>
<p><B>exec</B>&#146;s process control is the simplest possible: Tcl starts an external process and then &#147;blocks&#148; while the external process is active. Only when the other process is completely done does Tcl regain control and restart its own calculations, based on the result of the external process. <B>exec</B> also recognizes an option for launching long-running &#147;service&#148; or &#147;daemon&#148; processes &#147;in the background.&#148; In this case, though, there&#146;s no direct way to receive data back.</p>
<p><B>open</B> is a Tcl command that offers a bit more sophistication. <B>open</B> makes it possible to launch an external process and then resume Tcl operations. Tcl and the external process act <I>concurrently</I>.</p>

<H3><FONT COLOR="#000080">Process-Level Concurrency</FONT></H3>

<p>Several pieces need to be in place to demonstrate <B>open</B>&#146;s power. Perhaps the best way is to build a simple GUI that simultaneously displays results from an external process, while remaining responsive to such user actions as keystrokes. An example is this:</p>

<pre>
package require Tk

entry .e
text .t
pack .e .t

proc receive {} {
    if [eof $::fp] {
        set line DONE
        close $::fp
    } else {
      gets $::fp line
    }
    .t insert end $line\n
}

set fp [open "|ping -n 5 tcl-tk.net"]
fileevent $fp readable receive
</pre>

<p>If you run this script under Windows, you&#146;ll see a GUI screen that looks like <a href="fig1.htm">Figure 1</a>. For Unix, change the <B>-n 5</B> to <B>-c 5</B> (but see <a href="sidebar1.htm">sidebar</a> on portability). As you execute this small program, notice that the GUI stays &#147;live;&#148; you can type in the entry at the top at the same time as <B>ping</B> is gathering its results.</p>
<p><B>exec</B> and <B>open</B> are the most important built-in facilities for teaming two different processes, one coded in Tcl, and the other in C. They&#146;re far from the only ones, though. Under MacOS, Tcl speaks Applescript. On Windows, Tcl knows DDE (Dynamic Data Exchange), and popular extensions provide COM (Component Object Model) capabilities. Under all operating systems, Tcl has a lovely socket-oriented network-programming interface, one that makes it easy to build network servers and clients. Each of these technologies, along with the others mentioned in &lt;http://wiki.tcl.tk/1228&gt;, has a place in constructing architectures for teamwork between Tcl- and C-coded processes.</p>

<H3><FONT COLOR="#000080">Bare-Fisted Coding</FONT></H3>

<p>None of this, though, gets at what most Tcl newcomers think they want in regard to combining C and Tcl: in-process means to pass program execution back and forth between modules coded in the two languages. The rest of this article surveys these possibilities.</p>
<p>Even restricting focus to same-process architectures leaves several distinct engineering designs. Early in Tcl&#146;s history, it was common to &#147;extend&#148; the standard Tcl processor. That means that developers would build a new Tcl interpreter, based on the standard one, but with a few extra C functions exposed as Tcl commands. This is essentially the difference between Tcl and Tk, as most users see them: the latter is just a bigger executable, with more available commands.</p>
<p>For the past few years, though, it&#146;s been most common to use an unmodified, &#147;stock&#148; Tcl interpreter. New C functions are packaged into loadable objects, which the standard interpreter loads dynamically, at run time.</p>
<p>Tcl documentation is sufficiently lucid that many programmers learn how to interface C functions just by reading material in the standard distribution. Most, though, have studied one of two books that detail how to build new commands: <I>Tcl and the Tk Toolkit</I> (by John K. Ousterhout, Addison-Wesley Professional Computing, 1994), or <I>Practical Programming in Tcl and Tk</I> (by Brent B. Welch, Prentice Hall, 1999). Find out more about these and other Tcl-related books at &lt;http://wiki.tcl.tk/book&gt;. The two chapters in <I>Practical Programming in Tcl and Tk</I> most important for using C functions are available at &lt;www.beedub.com/book/3rd/bookTOC.html&gt;.</p>

<H3><FONT COLOR="#000080">An Example C-Coded Command</FONT></H3>

<p>In this section, I&#146;ll show you how to integrate a C function into Tcl as a loadable object. This example assumes gcc or a similar Unix-oriented compiler. Use these commands:</p>

<pre>
cc -c example.c -o example.o
ld -shared -expect_unresolved \
    -o mycommand.so example.o
</pre>

<p>to compile this source file, <B>example.c</B>:</p>

<pre>
#include &lt;tcl.h&gt;

int MyCommand(ClientData clientData,
              Tcl_Interp *interp,
              int argc, char *argv[])
{
    char *datum, temp;

    datum = "";
    if (argc &gt;= 2) {
        datum = argv[1];
        if (strlen(datum) &gt; 3) {
        temp = datum[0];
        datum[0] = datum[1];
        datum[1] = temp;
        }
    }
    Tcl_SetResult(interp, datum, NULL);
    return TCL_OK;
}

int Mycommand_Init(Tcl_Interp *interp)
{
    if (Tcl_InitStubs(interp, "8.1", 0) == NULL) {
    return TCL_ERROR;
    }
    Tcl_CreateCommand(interp, "mycommand", MyCommand,
    (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
    return TCL_OK;
}
</pre>

<p>Once you&#146;ve created <B>mycommand.so</B>, you can exercise it this way:</p>

<pre>
% mycommand abcd
invalid command name "mycommand"
% load mycommand.so
% mycommand abcd
bacd
% mycommand abc
abc
% mycommand
</pre>

<p>The first invocation of <B>mycommand abcd</B> demonstrates that <B>mycommand</B> is not known to the standard Tcl interpreter. After loading in the <B>mycommand.so</B> module, though, we can use <B>mycommand</B> as freely as any other Tcl command. (The <B>mycommand</B> function returns a string based on its input, but with the first two characters transposed, if the string exceeds a minimum length.)</p>
<p>This recipe requires only minor tweaks for proper configuration. The C code is slightly simpler if you&#146;re working with a Tcl version before 8.0; on the other hand, the advantage of version 8.1 and later is that a loadable module made with any newer release works properly with any other recent Tcl release. This is the benefit of Tcl&#146;s &#147;Stubs&#148; (&lt;http://wiki.tcl.tk/stubs&gt;) technology: when you make an extension with Tcl v8.4, for example, you can safely pass it on to a friend or customer who&#146;s replying on 8.2. Also, be aware you might have to give your compilation a &#147;hint&#148; such as <B>cc -I/usr/local/include</B>.</p>
<p>As exciting as it is to be able to alloy two different languages with so little trouble, there are three reasons why commercial-grade implementations are likely to look different from this example.</p>

<H3><FONT COLOR="#000080">But I Want <I>My</I> C Function!</FONT></H3>

<p>Tcl has a &#147;package&#148; structure for managing external modules. A refined C-coded command generally includes a bit more information to help it fit in the <B>package</B> framework.</p>
<p>Also, note that the example above didn&#146;t really make <I>your</I> function available as a Tcl command; what it did was to register a function with a specific argument signature, starting with:</p>

<pre>
ClientData clientData
</pre>

<p>In any practical example, you&#146;ll certainly need to wrap up the C function you&#146;ve already written inside another one, which translates to the Tcl calling conventions:</p>

<pre>
int MyCommand(ClientData clientData,
              Tcl_Interp *interp,
              int argc, char *argv[])
{
    ...
    my_real_function(...)
    ...
}
</pre>

<p>Other programmers have passed this way before, though, and have created several specialized tools for automating Tcl-C combinations.</p>
<p>The example code above is a good basis for adding one or two new commands to Tcl. If you&#146;re working with a broad API, though, like a whole new Internet protocol, or the command set to control new hardware, you&#146;ll want to learn about SWIG (Simplified Wrapper and Interface Generator), &lt;www.swig.com&gt;. SWIG automates creation of the &#147;glue&#148; code between Tcl and a collection of C functions. SWIG is actively supported and widely used, not just between Tcl and C, but for many other combinations of languages, including C++, Perl, Python, and so on.</p>

<H3><FONT COLOR="#000080">Many Variations</FONT></H3>

<p>That&#146;s not all, though. Along with writing Tcl-C glue yourself, or using SWIG, there are a handful of other specialized approaches in productive use at many sites.</p>
<p>One particularly apt for <I>C/C++ Users Journal</I> readers is ffidl (Foreign Function Interface with Dynamic Loading), &lt;http://wiki.tcl.tk/ffidl&gt;. This is an extension to Tcl that makes it possible to call C functions directly, without any auxiliary code. Although ffidl&#146;s author, Roger Critchlow, labels it &#147;experimental,&#148; it&#146;s already the basis for several applications doing good service for end users.</p>
<p>This article has presented all its examples as cases of a Tcl program controlling a C program or function. Tcl was designed from the beginning to be &#147;invertible,&#148; though. D. Richard Hipp is a consultant whose work emphasizes the &#147;dual&#148; approach of C programs that manage small Tcl scripts. mktclapp (&lt;http://wiki.tcl.tk/mktclapp&gt;) is his tool for simplifying &#147;the task of constructing a stand-alone program that uses both C and Tcl/Tk.&#148;</p>
<p>These are ways to bind together Tcl and C that are most apt to appeal immediately to readers coming from a C background.  Database specialist Jean-Claude Wippler&#146;s latest of many contributions to Tcl programming, CriTcl (&lt;http://wiki.tcl.tk/critcl&gt;), promises to revolutionize the way Tcl and C are used together.</p>

<H3><FONT COLOR="#000080">Cheap Idea, Deep Consequences</FONT></H3>
<p>CriTcl is reminiscent of the <B>Inline</B> module Brian Ingerson pioneered for Perl, and Wippler credits <B>Inline</B> as a partial inspiration. With CriTcl, a programmer only writes Tcl source. If he or she needs C code, that, too, is part of the Tcl source. Here&#146;s a demonstration:</p>

<pre>
package require critcl
namespace import critcl::*

cproc cube {int x} int {
    return x * x * x;
}

proc report number {
    puts "The cube of $number is [cube $number]."
}

report 4
report 13
</pre>

<p>This program reports the cubes of <B>4</B> and <B>13</B>, after computing them directly through C-coded calculations.</p>
<p>The superficial appeal of CriTcl, then, is that programs can be managed in a more unified way. A conventional application built with both Tcl and C involves at least Tcl sources, C sources, and compilation scripts certain to vary from one operating system to another. With CriTcl, there are only Tcl sources.</p>
<p>In all this, CriTcl is like <B>Inline</B>. Wippler explains, though, &#147;The difference is that Tcl&#146;s &#145;stub&#146; architecture makes it much simpler to combine the results &#151; the resulting shared library does not care where the Tcl runtime is or what version it is, yet this design supports callbacks between Tcl and C in both directions, and provides full access to the Tcl C API. This simplicity comes back in the form of generality, portability, and robustness. As an example of the latter, CriTcl does not need to figure out how to link to a runtime, meaning that there&#146;s one less source of potential problems/variability.&#148;</p>
<p>&#147;Stub&#148; here is one of Wippler&#146;s earlier co-inventions. It was <B>Tcl_InitStubs</B> in the example code above that lets <B>mycommand</B> work across versions.</p>
<p>Developers with large-project experience appreciate how important the release-neutrality afforded by CriTcl is. That&#146;s just &#147;plumbing,&#148; though, as beneficial as it is. Wippler anticipates bigger consequences, as Tcl sites accept CriTcl. As he told me, &#147;There are many implications of having a system like CriTcl in place. First of all, one can now surgically replace hot spots in a large body of Tcl code to get speed improvements. Second, there is no longer a need to set up a build system: source code is recompiled when it changes, and libs are cached when it does not. The complexity of managing software snippets goes down, because small dabs of C &#145;grease&#146; can be inside the Tcl scripts, next to the Tcl code that uses, tests, and wraps it.&#148;</p>
<p>The ultimate achievement he foresees is a possibility to re-factor the architecture of the Tcl interpreter radically. While it&#146;s beyond the scope of this article to explain CriTcl fully, the effect will be something like Perl 6&#146;s proposed exposure of its own parser and extension interface: designers and architects will solve problems dynamically, and at higher levels, while retaining full ability to program with the power and efficiency of C.</p>
<p>As of November 2001, CriTcl v0.18 works for Linux and MinGW-endowed Windows. Other operating systems should follow before long.</p>

<H3><FONT COLOR="#000080">Variations</FONT></H3>

<p>This presentation slightly simplifies Tcl&#146;s story to a few points to make for an easier introduction. The most crucial have to do with portability and the Tcl-C programming interface.</p>
<p>The maintainers of the standard Tcl distribution are committed to keeping the language fully current on MacOS, Unix, and Windows. There are times when one of these &#151; usually MacOS &#151; lags the others by a bit. In general, though, they all move forward together.</p>
<p>Moreover, specialists maintain ports of Tcl to other operating systems such as BeOS, OpenVMS, handheld computers, and so on.</p>
<p>Also, the section on interfacing C and Tcl above mentions that there are three ways the example differs from most professionally engineered Tcl extensions. The first two, already mentioned, have to do with <B>package</B> hooks and the difference between an arbitrary C function signature and the signature Tcl requires.</p>
<p>The third difference has to do with Tcl&#146;s &#147;object interface.&#148; Tcl is &#147;dual-ported;&#148; it provides two distinct APIs for in-process communication between C and Tcl. This article presents the &#147;classic&#148; interface, which both recommended books cover. In the last few years, though, most serious Tcl programming has switched over to a variant interface, which is slightly more complex, but often improves performance. The references throughout this article detail its use. </p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>C and Tcl make good partners. Working together, they&#146;re able to get more done faster than either can working alone. While there are over forty systems for combining the speed and efficiency of C with Tcl&#146;s expressiveness and dynamism, readers of this article can learn in one sitting the most important and broadly applicable. </p>
<p>For more on this and related subjects, see at &lt;http://phaseit.net/claird/comp.lang.tcl/HowToC.html&gt;.

<p><i><B>Cameron Laird</B> is vice president of Phaseit, Inc. &lt;www.phaseit.net/&gt;. Tcl is the single computing language he most often uses, although most of his projects combine at least two of a dozen or so different languages. Cameron has contributed to several books on Tcl and often teaches classes on the language. Write to him at <B>claird@phaseit.net</B>.</i></p>

</p></blockquote></body></html>
