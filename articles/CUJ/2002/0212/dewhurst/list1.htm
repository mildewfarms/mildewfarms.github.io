<HTML><HEAD>
<TITLE>December 2002/Common Knowledge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Implementation for the function modifier </A></h4>
<pre>
template &lt;Code argcount, Code code4, Code code3, Code code2,
  Code code1&gt;
struct FunSwitch; // no definition of primary

template &lt;Code code4, Code code3, Code code2, Code code1&gt;
struct FunSwitch&lt;0,code4,code3,code2,code1&gt; { // R ()
  typedef typename GenType&lt;code4,code3,code2,code1&gt;::GTR RetType;
  typedef RetType FSR(void);
};

template &lt;Code code4, Code code3, Code code2, Code code1&gt;
struct FunSwitch&lt;1,code4,code3,code2,code1&gt; { // R (A)
  enum {
    arglen = code1 &amp; ((1&lt;&lt;ArglenLen)-1),
    argshiftlen = (CodeLen*NumCodes)-(arglen+ArglenLen),
    
    rc1 = ShiftRight&lt;code4,code3,code2,code1,
      arglen+ArglenLen&gt;::code1,
    rc2 = ShiftRight&lt;code4,code3,code2,code1,
      arglen+ArglenLen&gt;::code2,
    rc3 = ShiftRight&lt;code4,code3,code2,code1,
      arglen+ArglenLen&gt;::code3,
    rc4 = ShiftRight&lt;code4,code3,code2,code1,
      arglen+ArglenLen&gt;::code4,
    
    t1 = ShiftLeft&lt;code4,code3,code2,code1,argshiftlen&gt;::code1,
    t2 = ShiftLeft&lt;code4,code3,code2,code1,argshiftlen&gt;::code2,
    t3 = ShiftLeft&lt;code4,code3,code2,code1,argshiftlen&gt;::code3,
    t4 = ShiftLeft&lt;code4,code3,code2,code1,argshiftlen&gt;::code4,
    
    ac1 = ShiftRight&lt;t4,t3,t2,t1,argshiftlen+ArglenLen&gt;::code1,
    ac2 = ShiftRight&lt;t4,t3,t2,t1,argshiftlen+ArglenLen&gt;::code2,
    ac3 = ShiftRight&lt;t4,t3,t2,t1,argshiftlen+ArglenLen&gt;::code3,
    ac4 = ShiftRight&lt;t4,t3,t2,t1,argshiftlen+ArglenLen&gt;::code4
  };
  typedef typename GenType&lt;rc4,rc3,rc2,rc1&gt;::GTR RetType;
  typedef typename GenType&lt;ac4,ac3,ac2,ac1&gt;::GTR ArgType;
  typedef RetType FSR( ArgType );
};
  
template &lt;Code code4, Code code3, Code code2, Code code1&gt;
struct ModSwitch&lt;Fun,code4,code3,code2,code1&gt; { // ()
  enum {
    argcount = code1 &amp; ((1&lt;&lt;ArgcountLen)-1),
    c1 = 
      ShiftRight&lt;code4,code3,code2,code1,ArgcountLen&gt;::code1,
    c2 =  
      ShiftRight&lt;code4,code3,code2,code1,ArgcountLen&gt;::code2,
    c3 = 
      ShiftRight&lt;code4,code3,code2,code1,ArgcountLen&gt;::code3,
    c4 = 
      ShiftRight&lt;code4,code3,code2,code1,ArgcountLen&gt;::code4
  };
  typedef typename FunSwitch&lt;argcount,c4,c3,c2,c1&gt;::FSR MSR;
};
&#151; End of Listing &#151;</pre></body></html>
