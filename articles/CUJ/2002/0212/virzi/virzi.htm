<HTML>   
     <HEAD>
<TITLE>December 2002/C/C++ Tip #11: Overwrite Iterator</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Tip</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #11: Overwrite Iterator</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Ray Virzi</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>If you want to copy a sequence into a container, you might use the <B>std::copy</B> algorithm like this:</p>

<pre>
std::copy(start, end, std::back_inserter(container));
</pre>

<p>Here <B>start</B> and <B>end</B> are iterators pointing to an input sequence of size <B>N</B>, and <B>container</B> is a container with the <B>push_back</B> function defined in its interface. Assuming that the container starts empty, it will end up containing a copy of each of the <B>N</B> elements in the same order as the original sequence. The <B>back_inserter</B> template function provided by the standard library is very handy because it returns a <B>back_insert_iterator</B> for the container, which is defined in a clever way so that it appends the copied elements to the back of the container.</p>
<p>Now suppose the container is not empty to begin with (e.g., when the container must be reused several times in an iteration loop). You may have to call the <B>clear</B> function on the container first and then insert the new sequence. This will cause all the old objects to be destroyed and each newly inserted object to be constructed. Not only that, but any dynamic storage used by the container itself will also have to be destroyed and recreated, such as the nodes of a <B>list</B>, <B>map</B>, or <B>set</B>. Some implementations of <B>vector</B> may even de-allocate the entire array block when <B>clear</B> is called. It is often much more efficient to copy over the existing elements in place. At first, you might try this:</p>

<pre>
std::copy(start, end, container.begin());
</pre>

<p>Here you have a copy-over operation starting at the beginning of the container. But this code will cause a crash if the size of the container is less than the length <B>N</B> of the input sequence. What is needed is a new iterator type that combines both of these methods. The new iterator must perform a copy-over operation until it reaches the end of the container and from then on simply append the items to the end. I call this an overwrite iterator (see <a href="list1.htm">Listing 1</a>). Following the Standard&#146;s convention, I provide two helper template functions (see <a href="list2.htm">Listing 2</a>) that will generate an overwrite iterator for a given container.</p>
<p>Using the helper functions, you can write:</p>

<pre>
std::copy(start, end, overwriter(container));
</pre>

<p>Or if you want to start the copy at another location in the container that begins at some iterator location, you can write:</p>

<pre>
std::copy(start, end, overwriter(container, it));
</pre>

<p>The copy algorithm returns an overwrite iterator that points to the next container item following the copied sequence. Since this iterator contains an implicit conversion to the container&#146;s original iterator type, it can easily be used to erase the remaining items in the container (if needed) or to copy another sequence into the container starting where you left off. This solution is now efficient, flexible, safe, and best of all, easy to use.</p>

<p><i><B>Ray Virzi</B> has been programming in C and C++ for about eight years and is currently writing software for helicopter maintenance equipment at Chadwick-Helmuth Company in El Monte, California, which was recently acquired by Honeywell Corp. He can be reached for comment via email at <B>mail@rvirzi.com</B>.</i></p>

<h4><a href="../../../source/2002/dec02/virzi.zip"></a></h4>
</blockquote></body></html>
