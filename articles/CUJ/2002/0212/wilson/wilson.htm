<HTML>   
     <HEAD>
<TITLE>December 2002/C/C++ Tip #10: Efficient Integer to String Conversions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000"> C/C++ Tip</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #10: Efficient Integer to String Conversions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matthew Wilson</FONT></H3>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p><B>sprintf</B> is probably the most common way to convert integers to string form, whether you call it directly or indirectly (e.g., within <B>iostream</B> insertion manipulators). However, the very powerful <B>sprintf</B> function is overkill for many simple conversions, and there is a performance penalty for using it.</p>
<p>This article describes a simple template-based technique, applicable on all platforms and compatible with multithreaded processes, for efficiently converting 8-, 16-, 32-, and 64-bit signed and unsigned integers to strings.</p>
<p>The article will also present performance results quantifying the advantages in different scenarios, and for different compilers/runtime libraries, on both Win32 and Linux platforms. The results show that the conversion functions can perform at as little as 13% of the call cost of <B>sprintf</B>.</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<p>The implementation <a href="#1">[1]</a> is template-based, providing a function for unsigned-integer conversion (which is more efficient, there being no sign) and one for signed-integer conversions (which needs to account for processing negative numbers and prepending the minus sign). Abridged implementations of the unsigned and signed versions are shown in <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> respectively <a href="#2">[2]</a>.</p>
<p>The functions work by writing backwards into a caller-supplied character buffer and returning a pointer to the converted form within the buffer. The least significant digit is calculated and written to the current endpoint within the buffer. The digit is converted into its equivalent character value via the lookup table contained within <B>get_digit_character</B> <a href="#3">[3]</a> (see <a href="list3.htm">Listing 3</a>). The convertee value is then divided by 10, the endpoint moved backwards, the cycle repeated until 0 is reached, and the current endpoint is returned as a pointer to the converted string. For signed integers with a negative value, a minus sign is first prepended, and the function returns a pointer to that character.</p>

<H3><FONT COLOR="#000080">Performance</FONT></H3>

<p>I&#146;ll discuss two performance scenarios. The first scenario is a simple conversion, returning a pointer to a converted value. The second scenario involves the <B>sprintf</B> statement:</p>

<pre>
sprintf("string0:%dstring1:%dstring2:%dstring3:%dstring4:%d", ...);
</pre>

<p>and its equivalent combination of <B>strcpy</B> and <B>integer_to_string</B> calls. The scenarios were tested on Win32 (Borland 5.51, GCC MinGW, and Visual C++ 6.0) and Linux (GCC). <a href="tab1.htm">Tables 1</a> and <a href="tab2.htm">2</a> and show the results <a href="#4">[4]</a>, which are expressed as a percentage of the <B>sprintf</B> time.</p>
<p>As the results show, simple conversions can be as low as 15% of the cost of using <B>sprintf</B>. For the complex conversion, the efficiency gain is less significant for all compilers/platforms other than Visual C++.</p>
<p>Also notable is that the gains are much less for 64-bit integers than for 8, 16, or 32 and in some cases can actually be more expensive.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The use of these functions avoids the higher call cost of <B>sprintf</B> and also lends simple code construction by virtue of returning a pointer to the converted string. An additional advantage is that it can help in avoiding linking to the C runtime library in circumstances where this is desirable <a href="#5">[5]</a>.</p>
<p>They are thread-safe, since they do not use a static internal buffer. The original (non-thread-safe) version did so, and tests showed that it was somewhat better performing, but thread-safety was deemed more important.</p>
<p>For 64-bit conversions it may be better to stick with <B>sprintf</B> on performance grounds (at least on non-64-bit platforms). This is presumably because the <B>sprintf</B> implementations have been optimized to deal with 64-bit integers on 32-bit systems <a href="#6">[6]</a>.</p>
<p>The current implementation does not provide any zero padding, but the intention is merely to provide an efficient alternative to the common default conversion. Formatting should still be carried out in <B>sprintf</B>, which has a long history and is no doubt well optimized for such sophisticated operations.</p>
<p>Another criticism is that this solution is limited to base 10. I am currently working on adding an additional template parameter for the base, which I expect to be no less efficient. The implementations will have the same algorithm(s), but will use an expanded lookup table and use the parameterized base rather than the hard-coded 10 in the implementations.(In further research conducted after this article was written, Digital Mars C/C++ 8.29 shows a creditable best performance range of 46% (worst is 97%), and Metrowerks&#146; CodeWarrior 8.0 shows a very impressive 9% (worst 117%). The full results for these two compilers are included in the online archive <a href="#2">[2]</a>, along with all the source code and project files for Visual C++ 5.0/6.0, Digital Mars 8.29, and Metrowerks CodeWarrior 8.0.) </p>

<H3><FONT COLOR="#000080">Potential Applications</FONT></H3>

<p>You could use these functions in the implementation of serialization libraries, since the functions convert much quicker than <B>sprintf</B> for single variables. Furthermore, they are also useful in any situation where a function needs a pointer to <B>char</B> containing the (decimal) string form of an integer (e.g., when setting the text of a window in a UI), or when you want to avoid linking in the C runtime library <a href="#5">[5]</a>.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  These functions form part of the STLSoft Conversion Library, available at &lt;http://stlsoft.org/libraries/conversion_library.html&gt;. STLSoft is an open-source organization for the development of robust, lightweight, cross-platform STL software.</p>
<p><a name="2"></a>[2]  The full implementation, along with the test program and supporting headers, is available for download from &lt;www.cuj.com/code&gt; or [1].</p>
<p><a name="3"></a>[3]  As well as providing flexibility beyond the decimal digits (in anticipation of supporting the planned non-base 10 implementations), this implementation will also work with character encoding schemes that do not have contiguous ordering of the characters &#147;0&#148; and &#147;1&#148; through &#147;9.&#148;</p>
<p><a name="4"></a>[4]  The results were insignificantly affected by targeting particular (versions of Intel) processors.</p>
<p><a name="5"></a>[5]  There are various reasons why one might wish to avoid linking to the C runtime library, such as reliability (e.g., Win32 with Visual C++), executable size (e.g., creating very small executables, usually on Win32), and providing one&#146;s own chopped-down version, though discussion of such is outside the scope of this article.</p>
<p><a name="6"></a>[6]  I am currently working on a custom implementation for 64-bit conversions on Intel 32-bit platforms.</p>

<p><i><B>Matthew Wilson</B> holds a degree in Information Technology and a Phd in Electrical Engineering and is a software development consultant for Synesis Software. Matthew&#146;s work interests are in writing bullet-proof real-time, GUI, and software-analysis software in C, C++, and Java. He has been working with C++ for over 10 years and is currently bringing STLSoft.org and its offshoots into the public domain. Matthew can be contacted via <B>matthew@synesis.com.au</B> or at &lt;http://stlsoft.org&gt;.</i></p>

<h4><a href="../../../source/2002/dec02/wilson.zip"></a></h4>
</blockquote></body></html>
