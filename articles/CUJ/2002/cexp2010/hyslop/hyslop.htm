<HTML>   
     <HEAD>
<TITLE>October 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.10/tococt.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Contracts, Promises, and Mere Semantics</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>I began that day as I began most workdays &#151; sitting in my cube with fresh coffee at my elbow, catching up on the morning's email before turning to pound out some new code. Oddly enough, it wasn't a day that the Guru suddenly appeared behind me at an opportune time... instead, it was a day I overheard it happening to someone else.</p>
<p>I was sitting at my desk in my cube, working quietly, and hearing the faint keyclicks of nearby coworkers working invisibly in their cubes, when the voice came.</p>
<p>&quot;The time has come,&quot; the Guru said, &quot;to speak of many things.&quot;</p>
<p>I jumped, mostly out of habit I think. I looked around, but the Guru wasn't standing behind me. I kept listening and heard a chair squeak in the cubicle next to mine &#151; it was Kerry <a href="#1">[1]</a>, our group's new bright but geeky intern, jumping in his seat. She had to be with him. I wondered how long he'd last; the Guru was known to scare away most interns in the first few months, before their probation period could finish. Kerry was already showing the early signs of cracking. I figured he'd last another few weeks.</p>
<p>I eavesdropped, with only slight feelings of guilt:</p>
<p>&quot;Bob was showing me a problem with my new code...&quot; I heard Kerry begin gamely.</p>
<p>&quot;Indeed, my child?&quot; I could imagine her eyebrow arching and smiled to myself.</p>
<p>&quot;Uh... yeah. It's a coding standards thing, I'll work it out myself...&quot;</p>
<p>I heard the <i>snap</i> of a book shutting. The Guru would have closed the tome she was carrying. I wondered idly which tome she was carrying today. &quot;Tell me, young one,&quot; I overheard the Guru say to Kerry, &quot;what is it that our coding standards say? Pray tell.&quot;</p>
<p>&quot;Uh... they're right here.&quot; As Kerry's fingers clicked on the keys, I quietly pulled up the same document on my screen and searched to the right spot as I heard him recite. It was this portion:</p>

<UL>
<p><i>When declaring parameter types, prefer to follow the traditional C++ interface idioms:</p>
<UL>
<LI>If the argument will be changed, pass it by pointer.</LI>
<LI>If the argument will not be changed, pass it by value.</i></LI>
</UL>
</UL>

<p>&quot;I didn't do it that way, so Bob pointed it out. That's all. It's okay. It's okay; I'll change it; really I will,&quot; Kerry finished, sounding nervous.</p>
<p>There was a pause, and I wondered whether the Guru was smiling or frowning. Finally, she said: &quot;Let his words stand... for now. Update the code, but do not check it in. Instead, give Bob the updated version for his review and his own local use, and wait.&quot;</p>
<p>&quot;Wait? ... For what?&quot; Kerry's voice asked.</p>
<p>This time I was sure the Guru was smiling. &quot;Only wait, my apprentice,&quot; she said, and I heard the rustle of paper and receding footsteps.</p>

<p><i>Show's over</i>, I thought, and went back to work. But the best was yet to come....</p>

<hr>

<p>A few hours later, I was still pounding away in my cubicle when I heard Kerry get called to Bob's desk, which was a little further away, but not far enough away that I didn't hear Bob chewing poor Kerry right out. After some more of that, which Bob quite seemed to enjoy, Kerry was eventually released and forlornly (I imagined) returned to his cubicle beside mine. His chair creaked as he sat down, and all was quiet again ... but not for very long.</p>
<p>Barely five minutes later, there was another Guru voice, another squeak of Kerry's chair (or was it Kerry? he did have a tendency to emit squeaks when the Guru appeared), another dialogue:</p>
<p>&quot;Of why the <i>C</i> is boiling hot,&quot; the Guru announced suddenly, &quot;and whether <i>pigs</i> have wings.&quot; I smiled at the last, realizing that she might mean Bob.</p>
<p>(squeak) &quot;I... I spoke to Bob...&quot;</p>
<p>&quot;Indeed you did, my child, I could hear it across the building,&quot; came the Guru's soft voice. There was another <i>snap</i> of a quickly closed tome. &quot;And what did he say?&quot;</p>
<p>&quot;That my code must be wrong; it broke his code,&quot; Kerry stammered. &quot;But I don't know what I've done wrong. I did just what he said! I did just what the coding standards said, too!&quot;</p>
<p>&quot;Ah,&quot; &#151; I imagined that here the Guru smiled sharply &#151; &quot;but the two are the same thing. For Bob is the one who wrote that part of the coding standard.&quot;</p>
<p>&quot;... He... He is?&quot;</p>
<p>&quot;Oh, yes. He most certainly is, my apprentice. That is why the coding standards are wrong.&quot;</p>
<p>&quot;Wrong?&quot;</p>
<p>&quot;Wrong for idiomatic C++, that is,&quot; she added. &quot;They were mostly correct for idiomatic C, which did not have references.&quot;</p>
<p>&quot;But... if they're wrong, then why weren't they updated?&quot;</p>
<p>&quot;Our new manager, Pete Williams, listens overmuch to Bob and does not see the need,&quot; she sighed. &quot;Nor did his predecessor. Still, the coding standards are not that incorrect. The idiomatic C++ would be more like this...&quot; I heard the squeak of a marker on the whiteboard, and here is what I saw on that whiteboard later:</p>

<UL>
<p><i>When declaring parameter types, prefer to follow the traditional C++ interface idioms unless it is inappropriate:</p>

<UL><LI>If the argument will be changed, pass it by pointer or reference to non-<b>const</b>.</LI>
<LI>If the argument will not be changed, pass it by reference to <b>const</b>, or if it is cheap to copy, by value.</i></LI>
</UL>
</UL>

<p>&quot;This statement is closer to the truth,&quot; the Guru concluded, &quot;but, my apprentice, you must note the words 'prefer' and 'unless'. This merely documents common idiom. It is not dogma. It is not without exceptions.&quot;</p>
<p>&quot;Uh... yeah. That's right. Bob said that it works with everything he tried except for...&quot;</p>
<p>&quot;<b>auto_ptr</b> objects,&quot; the Guru nodded, finishing for him, and I heard the marker resume squeaking as she continued writing on the whiteboard.</p>
<p>Kerry made a gurgled astonished sound. &quot;How did you know that! Did Bob tell you? Did you see?&quot;</p>
<p>&quot;I merely know. I need not see.&quot; She continued writing on the board, and here is what I saw a few minutes later:</p>

<pre>
template&lt;typename T&gt;
void Mutate( T* byPointer );

template&lt;typename T&gt;
void Mutate( T&amp; byReference );

template&lt;typename T&gt;
void LeaveAlone( const T* byPointerToConst );

template&lt;typename T&gt;
void LeaveAlone( const T&amp; byReferenceToConst );

template&lt;typename T&gt;
void LeaveAlone( T byValue );
</pre>

<p>&quot;Meditate on this parable, and then answer: For which types <b>T</b> are the function names true? Apprentice!&quot; she called.</p>
<p>I didn't know she meant me until I heard a different kind of <i>snap</i>, and a rubber band bounced off my head. Then I scrambled up quickly and joined them, rubbing my scalp. &quot;Huh? What?&quot; I muttered. &quot;I was busy working.&quot;</p>
<p>&quot;Indeed you were working your ears.&quot; The Guru narrowed her eyes for a moment, feigning annoyance, and then let me see a twinkle in her eye. Putting down the whiteboard marker, she reopened the thick tome I now saw her carrying, tucked a gray lock behind one ear, smiled beatifically, and began to walk away. &quot;My apprentice will explain, my child...&quot; her parting words wafted back over her shoulder just before she turned the corner and disappeared.</p>
<p>I shook my head, grinning. What a character! But Kerry looked oddly at me, and I wonder if maybe he wasn't starting to put me in the same &quot;odd bloke&quot; category as the Guru. I discovered that I didn't mind if he did, which was an interesting revelation to me.</p>
<p>&quot;Young one,&quot; I said, and smiled, and smiled more widely still once I realized what I'd just said, &quot;what happens when you pass an <b>auto_ptr</b>?&quot;</p>
<p>&quot;Uh... oh!&quot; Clearly Kerry's penny had dropped. &quot;You transfer ownership! Is that what she meant?&quot;</p>
<p>&quot;Yup,&quot; I agreed. &quot;You've got it. And the same would be true of any class that transferred ownership &#151; one way to spot them, by the way, is by the non-<b>const</b> reference parameter in their copy constructor. So here's your answer: pass-by-value normally means you're leaving the source object alone, except that for <b>auto_ptr</b>s it means exactly the opposite &#151; and worse, because you're not just changing the source <b>auto_ptr</b>, but resetting it to null. And pass-by-pointer usually means you're planning to change the source object, except that for <b>auto_ptr</b>s it means exactly the opposite &#151; that you're <i>avoiding</i> changing it. For <b>auto_ptr</b>, the traditional idioms work exactly backwards, and that's why code that assumes the usual idioms, such as containers assume for their contained objects, does not work with <b>auto_ptr</b>s. But it's not just <b>auto_ptr</b>s; it's the case for any class with unusual transfer-of-ownership copy semantics. Always watch for that non-<b>const</b> reference parameter in the copy constructor; that's your dead giveaway that something unusual is going on.</p> 
<p>&quot;And now,&quot; I said to Kerry, walking away and letting my voice drift away behind me, &quot;I must go to resume my meditations.&quot; I reached the end of the hallway and turned the corner just in time to get out of his view before I couldn't hold it inside any more and succumbed to a sudden fit of silent giggles.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] H. Sutter and J. Hyslop. &quot;Conversations: A Midsummer Night's Madness,&quot;</a> <i>C/C++ Users Journal C++ Experts Forum</i>, August 2002, &lt;www.cuj.com/experts/2008/hyslop.htm&gt;.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>


</div>

</body>

</html>
