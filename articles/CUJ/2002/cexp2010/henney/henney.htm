<HTML>   
     <HEAD>
<TITLE>October 2002 C++ Experts Forum/From Mechanism to Method</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.10/tococt.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">From Mechanism to Method: A Fair Share, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Kevlin Henney</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>List processing has a long and venerable history stretching back from the STL through a range of object-oriented collection libraries of the past and, ultimately, to Lisp, the original list processing language. The multitude of interfaces across this history almost hides the similarities. In most cases, though, the popular array type is put to shame.</p>
<p>I still have a deep fondness for the Lisp model. It is simple, elegant, and something with which all developers should have an infatuation at least once in their programming life. When I first worked with C, it was the Lisp model I turned to for the design of my linked lists. When I started working with C++, it was the Lisp model that I wrapped up in a class. Slowly the influence of other libraries affected and evolved my approach to writing and using lists. I noticed a creeping featurism that started to populate the interface of mine and others' classes, normally in the name of some nebulous concept of <i>generality</i> or mistaken pursuit of <i>reuse</i>, which seemed to displace the pragmatic reality of <i>use</i> <a href="#1">[1]</a>.</p>
<p>And then came the STL. This was a breath of fresh air that blew away cobwebs and overweight interfaces. It articulated a minimal but comprehensive and extensible model of containers that included, unsurprisingly, lists. Its orthogonal design allowed a range of expression broader than could be achieved with the broad interfaces of more ambitious classes, all thanks to the combination of a few containers, iterators, algorithms, and function objects. (We will pass politely and quietly over the failed experiment in policy-based design that constitutes allocators.)</p>
<p>But the STL is not the end of history. Last year I was leafing through Koenig and Moo's excellent but often overlooked <i>Ruminations on C++</i> <a href="#2">[2]</a> relocating a particular passage when I stumbled across a section on lists:</p>

<UL><p>The USL list class has 70 members and one friend function.... The implementation is more than 900 lines of source code.... All this is nice, but it sometimes leaves one wishing for less. If we can have lightweight processes and reduced instruction set computer (RISC) chips, why not a RISC (reduced instruction set container) class? For inspiration, I went back more than a third of a century and looked at Lisp.</p></UL>

<p>Although we're all STL now, this inspiration was an inspiration. It was time to get reinfatuated.</p>


<H3><FONT COLOR="#000080">STL with a Lisp</FONT></H3>

<p>If you have not come across Lisp lists, here is a quick overview:</p>

<UL>
<LI>A list is a singly linked sequence of nodes.</LI>
<LI>Lists may share representation with other lists, but, because lists and their elements are immutable, this sharing is transparent.</LI>
<LI>Memory management is automatic.</LI>
<LI>The empty list is known as <b>nil</b>.</LI>
<LI>The head of a list (i.e., its initial element) is returned using the <b>car</b> function.</LI>
<LI>The tail of a list (i.e., all the elements excluding its head) is returned using the <b>cdr</b> function. <b>nil</b> is returned for a single-element list.</LI>
<LI>A new list is constructed using the <b>cons</b> function, which prepends a new element to a list. To create a list of one element, you <b>cons</b> that element with <b>nil</b>. Once you have that, you're under way: you can <b>cons</b> up another list with that first list as the tail, and so on.</LI>
</UL>

<p>There's a bit more to it than this &#151; in Lisp, lists are not just data structures: they are also the program &#151; but that's enough for what we want from them in C++.</p>

<H4><FONT COLOR="#000080">A Basic Wrapper</FONT></H4>

<p>Leaving aside a couple of the features, it is easy to get a feel for Lisp-like programming in C++ by writing some functions around the <b>std::list</b> template:</p>

<pre>
enum nil_type
{
   nil
};

template&lt;typename type&gt;
std::list&lt;type&gt; cons(
   const type &amp;head, const std::list&lt;type&gt; &amp;tail)
{
   std::list&lt;type&gt; result = tail;
   result.push_front(head);
   return result;
}

template&lt;typename type&gt;
std::list&lt;type&gt; cons(const type &amp;head, nil_type)
{
   return cons(head, std::list&lt;type&gt;());
}

template&lt;typename type&gt;
type car(const std::list&lt;type&gt; &amp;list)
{
   return list.front();
}

template&lt;typename type&gt;
std::list&lt;type&gt; cdr(const std::list&lt;type&gt; &amp;list)
{
   return std::list&lt;type&gt;(++list.begin(), list.end());
}
</pre>

<p>The dummy <b>nil_type</b> is introduced to distinguish a convenience overload for <b>cons</b>. The difference in convenience is clear when you want to start building a list:</p>

<pre>
std::list&lt;char&gt; letters = cons('a', std::list&lt;char&gt;());
</pre>

<p>Versus:</p>

<pre>
std::list&lt;char&gt; letters = cons('a', nil);
</pre>

<p>To compose a list of two items, you apply <b>cons</b> again:</p>

<pre>
std::list&lt;char&gt; letters = cons('a', cons('e', nil));
</pre>

<p>And repeatedly for more:</p>

<pre>
std::list&lt;char&gt; letters =
   cons('a', cons('e', cons('i', cons('o', cons('u', nil)))));
</pre>

<p>Applied to this last example, <b>car(letters)</b> returns <b>'a'</b> and <b>cdr(letters)</b> returns the list <b>'e'</b>, <b>'i'</b>, <b>'o'</b>, and <b>'u'</b>.</p>

<H4><FONT COLOR="#000080">Adding Some Convenience</FONT></H4>

<p>You can determine whether a <b>std::list</b> is empty by using its <b>empty</b> member function. However, this cannot be uniformly applied to an empty list that is actually expressed as <b>nil</b> rather than a <b>std::list</b> with no elements. An implementation of the standard Lisp <b>null</b> function provides this uniformity:</p>

<pre>
template&lt;typename type&gt;
bool null(const std::list&lt;type&gt; &amp;list)
{
   return list.empty();
}

bool null(nil_type)
{
   return true;
}
</pre>

<p>Similar reasoning applies to the use of the <b>std::list</b> equality operator and the need for a consistent equality function that works with <b>nil</b>:</p>

<pre>
template&lt;typename type&gt;
bool equal(
   const std::list&lt;type&gt; &amp;lhs, const std::list&lt;type&gt; &amp;rhs)
{
   return lhs == rhs;
}

template&lt;typename type&gt;
bool equal(const std::list&lt;type&gt; &amp;list, nil_type)
{
   return list.empty();
}

template&lt;typename type&gt;
bool equal(nil_type, const std::list&lt;type&gt; &amp;list)
{
   return list.empty();
}

bool equal(nil_type, nil_type)
{
   return true;
}
</pre>

<p>When translated into C++, the Lisp approach more naturally favors global functions over member functions for uniform access.</p>

<p>Using <b>cons</b> is marginally more convenient than calling <b>push_back</b> or <b>push_front</b>:</p>

<pre>
std::list&lt;char&gt; letters;
letters.push_back('a');
letters.push_back('e');
letters.push_back('i');
letters.push_back('o');
letters.push_back('u');
</pre>

<p>Had the STL chosen to support the idiomatic use of chaining, the economy of <b>cons</b> would have been even more marginal:</p>

<pre>
std::list&lt;char&gt; letters;
letters.push_back('a').push_back('e').push_back('i').
        push_back('o').push_back('u');
</pre>

<p>Lisp addresses this issue of convenience in a number of ways. The most appropriate to translate into C++ is the <b>list</b> function that effectively allows a list to be <b>cons</b>ed up like an array initializer. We could emulate this capability by introducing another overload dummy and overloading the comma operator (not a practice that is generally recommended, but certainly one that offers unrivaled opportunities for you to encrypt your code if you think there is a danger of anyone understanding it...). The usage syntax would actually be truer to Lisp than the C++ function-call style used for the functions implemented so far:</p>

<pre>
std::list&lt;char&gt; letters =
   (list, 'a', 'e', 'i', 'o', 'u');
</pre>

<p>This is a reasonably discreet use of the comma operator, but it may be more appropriate to resort to something closer to an existing C++ idiom, streaming, to which you can add parentheses to taste, should you wish:</p>

<pre>
std::list&lt;char&gt; letters = 
   list &lt;&lt; 'a' &lt;&lt; 'e' &lt;&lt; 'i' &lt;&lt; 'o' &lt;&lt; 'u';
</pre>

<p>The implementation is straightforward:</p>

<pre>
enum list_type
{
   list
};

template&lt;typename type&gt;
std::list&lt;type&gt; operator&lt;&lt;(list_type, const type &amp;head)
{
    return cons(head, nil);
}

template&lt;typename type&gt;
std::list&lt;type&gt; operator&lt;&lt;(
   const std::list&lt;type&gt; &amp;list, const type &amp;last)
{
   std::list&lt;type&gt; result = list;
   result.push_back(last);
   return result;
}
</pre>

<H4><FONT COLOR="#000080">Opportunities for Further Generalization</FONT></H4>

<p>How far can you take this? Well, a quick look at the whole of Common Lisp <a href="#3">[3]</a> suggests a very long way indeed &#151; compared to the original Lisp 1.5, the standardized Common Lisp does not epitomize sufficiency in quite the same way.</p>
<p>You can keep on adding convenience functions for list construction and extraction. You could choose to pursue the comma-based syntax for all functions so that your Lispish C++ looked more like Lisp.</p>
<p>If you really feel that you want to recapture Lisp's more carefree approach to typing, you can use a variant type and constrain your wrapper functions to something like <b>std::list&lt;boost::any&gt;</b> [<a href="#4">4</a>, <a href="#5">5</a>], or a suitable <b>typedef</b>. Alternatively, if you want to keep the typing strict but more open, you could free the function templates from working with <b>std::list</b>. A little bit of extra templating and some metaprogramming will support this liberalization. As an aside, you will find that many C++ compile-time techniques recall Lisp [<a href="#6">6</a>, <a href="#7">7</a>].</p>

<H3><FONT COLOR="#000080">Share and Share Alike</FONT></H3>

<p>In spite of all the possibilities, I want to pursue a different course, away from the wrappers and back to STL. For all the attractions of Lispish, when I am working in C++, I want to work as closely to the model and idioms of that language as I can, importing stylistic idioms from elsewhere only when they clearly offer something better. The same thinking applies with any language &#151; C++ is not Java, Java is not Smalltalk, etc. &#151; which is why idioms are <i>idioms</i> and not <i>universals</i>. It's fun to do as an exercise, but unless you really are getting something that is novel but not just novelty, that's probably about as far as it goes. However, that does not stop me importing design ideas from elsewhere and representing them in a C++ style.</p>
<p>I would like to use the Lisp list model, but riddling my code with Lispisms is more of an affectation than a necessity. The model does not imply the syntax. And, as you may have noticed, all we have done so far is ape the syntax not the underlying model. <b>std::list</b> is not really up to the job, and not just because it's doubly linked rather than singly linked. If you were to use the common &#151; but not yet standard &#151; <b>slist</b> <a href="#8">[8]</a>, you would encounter the same problems. Certainly, the memory management is automatic, but only as a result of excessive copying and temporary object creation. For anything but the most trivial of applications, <b>cons</b> and <b>cdr</b> might as well be spelt <b>bottle</b> and <b>neck</b>.</p> 
<p>A <b>std::list</b> fully contains its internal node structure, and the closest it gets to sharing is the exclusive exchange of its contents through <b>swap</b> and <b>splice</b> member functions. True representation sharing would be inappropriate because it would not necessarily be transparent. If you were to <b>cons</b> one list from another and then use iterators to <b>erase</b> all the elements from the newly built list, what would be the effect on the old list? &quot;Unfortunate and surprising&quot; would be a modest understatement.</p> 

<H4><FONT COLOR="#000080">Immutability and Sharing</FONT></H4>

<p>In contrast to the modern financial markets, the shares we want here shouldn't change. We want certainty and satisfaction of the principle of least astonishment, and we don't want performance to crash. I'm going to suggest a design similar to one that I previously outlined for sharing string representation <a href="#9">[9]</a>. We need a list type that holds immutable elements and supports only a limited range of modification operations that are guaranteed not to break the transparency of the sharing.</p>
<p>Let's clarify how far this transparency should go before we examine the interface of such a list abstraction. <b>const</b> suggests everything that we want, but does not necessarily guarantee it. Thanks to <b>mutable</b>, <b>const_cast</b>, and the freedom to change anything at a level of indirection without a cast in a <b>const</b> member function, a <b>const</b>-qualified object is not actually guaranteed to leave the physical state of an object immutable. In a multithreaded environment, an unsynchronized or non-atomic change may corrupt the state of an object; no matter how discreet or well intentioned such a change would be in a single-threaded context.</p> 
<p>A working definition of immutability is that snapshots of an object <b>obj</b>'s full state at one point in time, call it <b>mem_t0</b>, and another, call it <b>mem_t1</b>, should always yield <b>memcmp(mem_t0, mem_t1, sizeof(obj)) == 0</b>, and that this should apply recursively through any level of indirection or any non-member state used to supplement the object's own representation.</p> 
<p>In the absence of threads or interrupts, or with synchronized and atomic changes, a less strict rule is to require <i>logical</i> or <i>conceptual <b>const</b>-ness</i> of the elements in the list. This means that for all intents and purposes any physically altered state makes no impression on the externally observed functional behavior of an object. If such an object has a <b>mutable</b> member, it should be used for caching or some other optimization, but otherwise it should have no externally observable effect.</p> 
<p>These two levels of requirement are not too draconian: they cover the range of how you should be using <b>const</b> and <b>mutable</b> anyway. Therefore, if we stipulate that the elements of the list are <b>const</b> qualified &#151; conforming to either true immutability or just conceptual <b>const</b>-ness, depending on the context of use &#151; then the only types that will break the requirements of our data structure are the ones that are broken in the first place.</p>
<p>The <b>const</b> requirement as stated means you can freely share an element between two lists, eliminating the cost of copying when creating a new list by prepending an existing one. It can only work with singly linked lists: a change downstream will not affect existing lists that share elements, but a change upstream would. The only way that you can detect the sharing is if you start taking the address of elements in different lists and comparing them. However, that is not a concern: as with other STL containers, the proposed list is value based, and identity is an uninteresting property for values <a href="#5">[5]</a>.</p> 

<H4><FONT COLOR="#000080">An Interface</FONT></H4>

<p>So let's describe the interface to this class template, <b>lispt</b>, parameterized on a value type that will be treated as <b>const</b> so that <b>lispt&lt;<i>type</i>&gt;</b> is effectively the same as <b>lispt&lt;const <i>type</i>&gt;</b>.</p>
<p>Allocators are fortunately not required in order to conform to container requirements and, as they serve little useful role, we can omit them easily. This simplification means that we can concentrate on the mandatory container requirements, the mandatory sequence requirements, and the appropriate optional sequence requirements that would make the type a bona fide STL sequence <a href="#10">[10]</a>. Leaving aside all the <b>typedef</b>s required of a container and the superfluous <b>max_size</b> operation, but including a couple of convenience operations, such as <b>assign</b>, gives the following interface:</p> 

<pre>
template&lt;typename type&gt;
class lispt
{
public: // structors

    lispt();
    lispt(const lispt &amp;);
    lispt(const type &amp;, const lispt &amp;);
    template&lt;typename input_iterator&gt;
      lispt(input_iterator, input_iterator);
    explicit lispt(std::size_t, const type &amp; = type());
    ~lispt();

public: // assignment

    lispt &amp;operator=(const lispt &amp;);
    template&lt;typename input_iterator&gt;
      void assign(input_iterator, input_iterator end);
    void assign(std::size_t, const type &amp;);
    void swap(lispt &amp;);

public: // iteration

    class const_iterator;
    typedef const_iterator iterator;
    const_iterator begin() const;
    const_iterator end() const;

public: // access

    const type &amp;front() const;
    void pop_front();
    void push_front(const type &amp;);

public: // capacity

    bool empty() const;
    std::size_t size() const;
    void clear();
    void reserve();

private: // representation
    ...
};

// comparison
template&lt;typename type&gt;
  bool operator==(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
template&lt;typename type&gt;
  bool operator!=(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
template&lt;typename type&gt;
  bool operator&lt;(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
template&lt;typename type&gt;
  bool operator&lt;=(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
template&lt;typename type&gt;
  bool operator&gt;(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
template&lt;typename type&gt;
  bool operator&gt;=(
    const lispt&lt;type&gt; &amp;, const lispt&lt;type&gt; &amp;);
</pre>

<p>In addition to the self-explanatory parts of the interface, there are some things to note:</p>

<UL>
<LI>Because of its singly linked nature, a <b>lispt</b> is not a reversible container. Its iterators are forward iterators only, so there is no support for reverse iteration or even a <b>reverse</b> operation.</LI> 
<LI>The immutability of each element is assured. The <b>front</b> operation returns a <b>const</b> reference and does not exist in an overloaded non-<b>const</b> form. Because only the capability for <b>const_iterator</b> is defined &#151; like many implementations of <b>std::set</b>, <b>iterator</b> and <b>const_iterator</b> are the same type &#151; only browsing access is provided for iteration.</LI>
<LI>A sleight of hand allows the <b>insert</b> and <b>erase</b> operations to be omitted: they would have to be operations on a <b>const_iterator</b> type, for which <b>insert</b> and <b>erase</b> are not required. Their inclusion would successfully torpedo any transparent shareability.</LI>
<LI>Only the <b>push_front</b> and <b>pop_front</b> dispensing operations are supported. These can be supported in constant time and without violating the shareability of the rest of the list.</LI>
<LI>Operations that work on the list as a whole, such as <b>swap</b> and assignment, are the only other modifiers supported. These can be expressed without violating any sharing constraints because they operate on the aggregating object rather than the individual elements.</LI>
<LI>The <b>reserve</b> operation unshares a copy of the elements for a <b>lispt</b>.</LI>
<LI>The extra constructor, taking a value and a <b>lispt</b>, is effectively <b>cons</b>.</LI>
</UL>

<H4><FONT COLOR="#000080">A First Implementation</FONT></H4>

<p>The implementation is mostly straightforward. Starting with the internal representation:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
private:
    struct link
    {
        link(const type &amp;value, link *next = 0)
          : value(value), next(next)
        {
        }
        const type value;
        link *next;
    };
    link *head;
    std::size_t length;
};
</pre>

<p><b>lispt</b> uses a fairly conventional link, holding a pointer to the head of a chain of links plus a count of the chain length. Many of the operations are quite simple:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
    void swap(lispt &amp;other)
    {
        std::swap(head, other.head);
        std::swap(length, other.length);
    }
    const type &amp;front() const
    {
        return head-&gt;value;
    }
    void pop_front()
    {
        --length;
        head = head-&gt;next;
    }
    void push_front(const type &amp;new_front)
    {
        head = new link(new_front, head);
        ++length;
    }
    bool empty() const
    {
        return length == 0;
    }
    std::size_t size() const
    {
        return length;
    }
    void clear()
    {
        head = 0;
        length = 0;
    }
    ...
};
</pre>

<p>Because they are aliasing, operations such as copy construction and assignment can be generated by the compiler. However, there is one quite involved constructor:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
    template&lt;typename input_iterator&gt;
    lispt(input_iterator begin, input_iterator end)
      : head(0), length(0)
    {
        if(begin != end)
        {
            head = new link(*begin++);
            ++length;

            for(link *current = head; begin != end;
                ++begin)
            {
                current-&gt;next = new link(*begin);
                current = current-&gt;next;
                ++length;
            }
        }
    }
    ...
};
</pre>

<p>Many other operations can be defined in terms of the existing operations:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
    lispt(const type &amp;front, const lispt &amp;tail)
      : head(tail.head), length(tail.length)
    {
        push_front(front);
    }
    explicit lispt(
        std::size_t initial_size, 
        const type &amp;fill = type())
      : head(0), length(0)
    {
        while(initial_size-- &gt; 0)
            push_front(fill);
    }
    template&lt;typename input_iterator&gt;
    void assign(
        input_iterator begin, input_iterator end)
    {
        lispt copy(begin, end);
        swap(copy);
    }
    void assign(
        std::size_t new_size, const type &amp;fill)
    {
        lispt copy(new_size, fill);
        swap(copy);
    }
    ...
};
</pre>

<p>All of the remaining operations depend on iterators, so let's take a look at the nested <b>const_iterator</b> class:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
    class const_iterator :
        public std::iterator&lt;
            std::forward_iterator_tag, type, 
            std::ptrdiff_t, const type *, 
            const type &amp;&gt;
    {
    public:
        explicit const_iterator(const link *start = 0)
          : current(start)
        {
        }
        const type &amp;operator*() const
        {
            return current-&gt;value;
        }
        const type *operator-&gt;() const
        {
            return &amp;current-&gt;value;
        }
        const_iterator &amp;operator++()
        {
            current = current-&gt;next;
            return *this;
        }
        const_iterator operator++(int)
        {
            const_iterator former_self = *this;
            ++*this;
            return former_self;
        }
        bool operator==(
            const const_iterator &amp;rhs) const
        {
            return current == rhs.current;
        }
        bool operator!=(
            const const_iterator &amp;rhs) const
        {
            return current != rhs.current;
        }
    private:
        const link *current;
    };
    ...
};
</pre>

<p>This lightweight iterator type is used by the following member functions:</p>

<pre>
template&lt;typename type&gt;
class lispt
{
    ...
    const_iterator begin() const
    {
        return const_iterator(head);
    }
    const_iterator end() const
    {
        return const_iterator();
    }
    void reserve()
    {
        lispt copy(begin(), end());
        swap(copy);
    }
    ...
};
</pre>

<p>Nothing unusual to note, except perhaps that a default constructed iterator plays the role of the end marker. Unlike doubly linked lists, which require a dummy element at the end to allow reverse iteration, a singly linked list can make do with a simple and traditional null to terminate the list.</p> 
<p>The only remaining operations are the non-member relational operators:</p>

<pre>
template&lt;typename type&gt;
bool operator==(
    const lispt&lt;type&gt; &amp;lhs, const lispt&lt;type&gt; &amp;rhs)
{
    return lhs.begin() == rhs.begin() ||
           (lhs.size() == rhs.size() &amp;&amp;
            std::equal(
                lhs.begin(), lhs.end(), rhs.begin()));
}

template&lt;typename type&gt;
bool operator&lt;(
    const lispt&lt;type&gt; &amp;lhs, const lispt&lt;type&gt; &amp;rhs)
{
    return std::lexicographical_compare(
                lhs.begin(), lhs.end(), 
                rhs.begin(), rhs.end());
}
</pre>

<p>The equality and less-than operator demonstrate the essential anatomy; the others can be defined in terms of them and also make use of the equality shortcut based on identity.</p>
<p>It is left as an exercise for the reader to go back and rewrite <b>cons</b>, <b>car</b>, <b>cdr</b>, etc. in terms of <b>lispt</b> instead of <b>std::list</b>.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Readers with an eye for running code through the virtual machine in their head will spot a surprising omission from the code so far: memory management. Sure, lots of things are created, but what about tidying up? Where are the <b>delete</b> expressions to counterbalance those <b>new</b> expressions? If alarm bells were not ringing in your head, get a fresh coffee and look back through the code.</p>
<p>I don't normally like to program or demonstrate in terms of broken code without reaching a resolution in the same session. This time I will break with that. Just comfort yourself with the knowledge that (1) I will deal with that next time, (2) there is often more to effective memory management than meets the eye, and (3) the orthogonality of the STL and the minimalism of the Lisp list model make a lovely couple.</p> 

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Kevlin Henney. &quot;The Imperial Clothing Crisis,&quot; <i>Overload</i> 47, February 2002, &lt;www.curbralan.com&gt;.</p>
<p><a name="2"></a>[2] Andrew Koenig and Barbara Moo. <i>Ruminations on C++</i> (Addison-Wesley, 1996).</p>
<p><a name="3"></a>[3] Guy L. Steele. <i>Common Lisp: the Language</i>, 2<sup>nd</sup> edition (Digital Press, 1990), &lt;www-2.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/cltl2.html&gt;.</p> 
<p><a name="4"></a>[4] Boost C++ Libraries, &lt;http://boost.org&gt;.</p>
<p><a name="5"></a>[5] Kevlin Henney. &quot;Valued Conversions.&quot; <i>C++ Report</i>, July-August 2000, &lt;www.curbralan.com&gt;.</p>
<p><a name="6"></a>[6] Andrei Alexandrescu. <i>Modern C++ Design</i> (Addison-Wesley, 2001).</p>
<p><a name="7"></a>[7] Krzysztof Czarnecki and Ulrich W. Eisenecker. <i>Generative Programming</i> (Addison-Wesley, 2000).</p>
<p><a name="8"></a>[8] Matthew H. Austern. <i>Generic Programming and the STL</i> (Addison-Wesley, 1999).</p>
<p><a name="9"></a>[9] Kevlin Henney. &quot;From Mechanism to Method: Distinctly Qualified,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, May 2001, &lt;www.cuj.com/experts/1905/henney.htm&gt;.</p>
<p><a name="10"></a>[10] <i>International Standard: Programming Language - C++</i>, ISO/IEC 14882:1998(E), 1998.</p>

<p><i><b>Kevlin Henney</b> is an independent consultant and trainer specializing in C++, Java, OO design, patterns, and software architecture.  He can be reached at <b>kevlin@curbralan.com</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
