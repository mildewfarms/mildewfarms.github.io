<HTML>   
     <HEAD>
<TITLE>June 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.06/tocjun.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: The Good, the Bad, and the Deprecated</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>
<p>The funny thing about my first programming job (I said many years later to my new wife, Jeannine, as we sipped our morning tea) was how long Bob managed to stay employed despite his being an incompetent nitwit. I remember one fine spring morning in particular....</p>
<p>I was hard at work, implementing a piece of new code, when Bob sauntered over to my cubicle and leaned against the cubicle wall, sipping a latte. &#151; No, I don't know why he always had a latte, he just did. &#151; So he stood there and smiled and said: &quot;Hey, Junior.&quot;</p>
<p>I sat back. &quot;Hey, Bob. What's up?&quot;</p>
<p>&quot;Y'know that code you checked in last week?&quot; He shrugged. &quot;Well, it just broke the build. The compiler says that you defined the function <b>Output</b> twice. You shouldn't do stuff like that.&quot;</p>
<p>&quot;Huh?&quot; I huhhed. &quot;But I'm sure I had a clean build....&quot; In my editor I quickly pulled up the file I'd been working on the week before:</p>

<pre>
//--- file trans.cpp -----------------------------
//
static void Output( ostream&amp; o ) { /*...*/ }

// ...

void ProcessTransaction( /*...*/ )
{
  // ...
  Output( cout );
  // ...
}
</pre>

<p>&quot;There. Looks fine to me,&quot; I said and sat back, satisfied that I had caught Bob in yet another unfounded criticism.</p>
<p>Bob smiled. &quot;Keep looking,&quot; he prodded.</p>
<p>I frowned, then did a quick <b>grep</b> on the source tree to see if there were any other occurrences of <b>Output</b> in the same module, and to my surprise, I found it in three more files:</p>

<pre>
//--- file output.h ------------------------------
void Output( std::ostream&amp; );

//--- file output.cpp ----------------------------
#include &quot;output.h&quot;
// ...
void Output( ostream&amp; out ) { /*...*/ }

//--- file dbinit.cpp ----------------------------
//
#include &quot;output.h&quot;

// ...

void InitDatabase()
{
  // ...
  Output( clog );
  // ...
}
</pre>

<p>I mulled it over. &quot;But that's a different <b>Output</b> function. Isn't it?&quot; I asked.</p>
<p>Bob gestured impatiently with his latte cup. &quot;Weren't you listening? I just told you that it broke the build.&quot;</p>
<p>&quot;Which build?&quot;</p>
<p>&quot;Just the build targeting our embedded platform, or at least that's all I saw the build machine complain about. Fix it, and let me know when you've checked it in so I can get some work done.&quot; Bob sipped again, chuckled, and left.</p>
<p>All right, I admit it: at first I didn't believe Bob.</p>
<p>I tried rebuilding all the code using our usual compiler and found that it was fine. Encouraged thusly, I then switched shells and tried building the code with our other compiler that we used for the embedded target &#151; and sure enough, it broke. I sat back, bemused: my first compiler allowed the two <b>Output</b>s to coexist with no problem, but the other compiler thought they were the same and complained about a duplicate definition.</p>
<p>I was about to give up and ask Wendy about it when I heard a rustling of pages behind me. I froze. A moment passed, then another. Then the pages rustled again, and I heard a book close. &quot;Acolyte,&quot; said the Guru's voice behind me, &quot;you seem to be in some difficulty. May I be of assistance?&quot;</p>
<p>I turned and saw that she was smiling, so I relaxed. &quot;Sure,&quot; I said, happy for the help. &quot;Here's the code I've got, and here's what the compilers say. What am I doing wrong?&quot;</p>
<p>She quickly glanced at the code and the compiler results. &quot;Ah,&quot; she said, &quot;there are two problems here. But before we delve into those, what do <i>you</i> think is happening? Explain it as best you can.&quot;</p>
<p>I took up the challenge: &quot;Well, okay... On the one hand, inside <b>trans.cpp</b>, I'd expect that <b>ProcessTransaction</b>'s call to <b>Output</b> would call that static version of <b>Output</b>.&quot;</p> 
<p>&quot;And...?&quot; she prompted.</p>
<p>&quot;On the other hand, inside <b>dbinit.cpp</b>, I'd expect that <b>InitDatabase</b>'s call to <b>Output</b> would call the externally defined <b>Output</b> that lives inside <b>output.cpp</b>.&quot;</p>
<p>&quot;But...?&quot; she prompted again.</p>
<p>&quot;On the gripping hand, our main compiler seems to agree with me &#151; if it hadn't, I would have noticed the problem before checking it in &#151; but our other compiler doesn't.&quot;</p>
<p>&quot;You have done well,&quot; the Guru said calmly. &quot;Now meditate on what you have seen, and you will find that there are really two problems here. The first problem is that the embedded compiler is wrong. In particular, your code is legal, and our main compiler did handle it correctly. A function declared static has internal linkage only; for so says the blessed Standard in Concepts 3:5, paragraph 3. But the other <b>Output</b> has external linkage, and so according to Concepts 3:5, paragraph 9, it is not the same function as the static <b>Output</b> internal to <b>trans.cpp</b>. And that is why the embedded compiler is wrong: it fails to correctly distinguish between the two <b>Output</b>s. There are clearly two distinct functions here, not one.&quot;</p>
<p>&quot;All right,&quot; I said, reassured. &quot;Cool. So I was right to&#151;&quot;</p>
<p>&quot;So certain are you? The second problem,&quot; the Guru continued kindly, but firmly, &quot;is that although your code is legal, it does not conform to our coding standards.&quot;</p>
<p>&quot;Huh? Sure it does. I used the right brace placement, the right indentation, the...&quot;</p>
<p>The Guru winced, eyes tightly shut, and waved me to silence. &quot;No. No, no, no. No coding standard worth your time defines such things, nor does ours, except of course that embedded tabs are pernicious and whatever indentation you choose should be made up of spaces. No. You may have been looking at the standards Bob brought with him from his last job, but those things certainly do not apply here.</p>
<p>&quot;Rather,&quot; she continued, &quot;the problem is your use of <b>static</b>, for this use of <b>static</b> is old-fashioned, antique, discouraged, and most of all deprecated.&quot; She opened her book, which I now saw was a copy of Stroustrup's <i>The C++ Programming Language</i> <a href="#1">[1]</a>, found a place near the back, and quoted: &quot;'The use of <b>static</b> to indicate &quot;local to translation unit&quot; is deprecated in C++. ...'&quot; She looked over her glasses at me, then down again to finish: &quot;'... Use unnamed namespaces instead.'&quot;</p>
<p>Then the light went on inside my head. &quot;Ah, so I should do this,&quot; and I wrote:</p>

<pre>
//--- file trans.cpp -----------------------------
//
<b>namespace</b>
<b>{</b>
  void Output( ostream&amp; o ) { /*...*/ }
<b>}</b>

// ...

void ProcessTransaction( /*...*/ )
{
  // ...
  Output( cout );
  // ...
}</pre>

<p>&quot;Indeed, my apprentice. I do believe that even our back-released embedded compiler will understand your revised writings correctly....&quot; The words faded away, and I turned to find that the Guru had already silently disappeared, as was her wont.</p>
<p>I smiled, cracked my knuckles, successfully reran the code through both compilers, successfully reran the unit tests, and checked in the code. Then I smiled, opened a new email window, and began writing a short and cryptic notice to Bob....</p>

<H3><FONT COLOR="#000080">Reference</FONT></H3>

<p><a name="1"></a>[1] Bjarne Stroustrup. <i>The C++ Programming Language, 3rd Edition</i> (Addison-Wesley, 1997).</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>

</BLOCKQUOTE></BODY></HTML>
