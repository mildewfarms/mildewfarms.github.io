<HTML>   
     <HEAD>
<TITLE>January 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.01/tocjan.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: New Bases, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>Copyright 2002, Jim Hyslop and Herb Sutter</p>
<p>Things were very quiet in the Ballroom.</p>
<p>That wasn't entirely unexpected; after all, we had no idea how we would ever leave it. It was the second day after the attacking forces had invaded our position inside the alien city beneath the Europan ice. With no help within reach from our own political faction on Earth, Gilb ordered retreat into the Ballroom and we barricaded the doors. The room was immense, but fortunately had few entrances. A few of our people had left us and surrendered in the disorder of the retreat; Jeannine and I didn't get the chance, for we were watched too closely by Gilb and his officers.</p>
<p>It was cold in the Ballroom, and getting colder. Gilb authorized turning on the two portable heaters, since we had more energy cells with us than our group was likely to use in a year. It helped.</p>
<p>We also had with us several of the alien artifacts, now powered but still mysterious, for we had only just managed to activate them and had had no time to experiment. J&auml;ger was with us, which was something; he knew the mysterious city's language better than anyone.</p>
<p>The three 10-foot-diameter balls still hung suspended above the floor. Each still showed a different scene: the field of yellowish grasses with something like trees nearby; the dusk beach scene; and the metallic room much like our own, with the cabinets, where we had seen the gray-clad human who had started at seeing us and then had run away. He had not returned, nor had anyone else. We knew that throwing small objects into the balls put them into the scenes; a spent energy cell thrown through the meadow gate &#151; we were beginning to think of the balls as &quot;gates&quot; now &#151; pushed through the growths and bounced on the grassy ground before coming to rest. The energy cell was still visible, and nothing had jumped on it or otherwise reacted to the experiment.</p>
<p>I turned to Jeannine, and we spoke of other cold and quiet times. It helped to distract us, while J&auml;ger tried to make himself more useful at the other end of the room by continuing to experiment carefully with one of the artifacts.</p>

<hr>

<p>Things were very quiet around the office.</p>
<p>That wasn't entirely unexpected; after all, it was January 2, and many people had taken the day off. I was puttering around with some small bits of programming on my to-do list, because my mind wasn't ready for anything big.</p> 
<p>I had recently started getting &quot;internal library&quot; development requests, which was a real thrill for me even though the tasks were small. You see, our company didn't have an officially separate team whose job was to build software library infrastructure for the whole company, which I thought was a good thing. That organization style never made sense to me, nor I think to the Guru. But we did have a set of internal libraries for common things that were shared by several projects. The internal libraries had no single &quot;owner,&quot; but items to be added or changed were reviewed by one of the more experienced developers. If we wrote something that was a likely candidate for reuse, we'd submit it to the shared libraries. Less often, someone would request a feature that wasn't in the shared area yet but probably should be, and someone capable would pick up the request and write it.</p>
<p>So I was thrilled because being asked to write an addition to the internal library branded me as &quot;possibly capable.&quot; I was also thrilled because Bob wasn't ever asked, and this knowledge gave me a little ego boost. Ah, the vanity of youth.</p> 
<p>The problem seemed easy: &quot;Write a <b>ConvertBase</b> function that takes a <b>string</b> representing a number in base N and converts it to a <b>string</b> representing the same number in base M.&quot;</p>
<p>My first reaction was to write a hard-coded solution, something like this:</p>

<pre>
string ConvertBase( size_t base1, size_t base2,
                    const string&amp; src )
{
  long value = 0;

  // Read a base base1 number from src
  for( int i = 0; i &lt; src.size(); ++i )
  {
    // if src[i] is a valid base1 character,
    //  multiply value by base1 and add the next digit
    // else if src[i] is whitespace
    //  break
    // else
    //  throw logic_error
  }

  // Write a base base2 number to dest
  string dest;
  while( value &gt; 0 )
  {
    // find highest base2 digit
    // append to dest
    // reduce value appropriately
  }
}
</pre>

<p>I had roughed in about that much and was still typing the last comment when a gentle throat-clearing behind me alerted me to the Guru's presence.</p>
<p>I froze. There was silence.</p>
<p>Then I heard a brief rustle of pages that I knew without looking was the Guru putting a marker into her book and closing it, and a calm low voice: &quot;Goodeve, my child.&quot;</p>
<p>&quot;Ah, goodeve, master,&quot; I replied. If she was in her Guru shtick, then Bob had to be nearby, and appearances were important to successfully bugging Bob.</p>
<p>&quot;Your code,&quot; she gestured, walking around me into view and tapping on my display with her pen, &quot;bears a striking resemblance to library request 247.&quot;</p>
<p>&quot;Ah, yes, I hope it does,&quot; I acknowledged. &quot;That's what I was working on. It looks like it's going to get kind of longish.&quot;</p>
<p>She nodded thoughtfully. There was another pause. After a moment she added: &quot;Did you happen to notice library request 314?&quot;</p>
<p>&quot;Ah, er... no,&quot; I admitted.</p>
<p>&quot;No harm done. Request 314 asks for a facility to read and write a number of arbitrary base from a text stream. I presume that whoever codes 314 will end up writing much the same code as you were about to write there. May I make a suggestion, my apprentice?&quot;</p>
<p>&quot;Sure. You want me to do 314 too?&quot; I asked, hope rising. If it was an honor to be asked to write one shared library facility, imagine the honor of being asked to write two after such a short time on the team!</p>
<p>&quot;Yes, but not immediately,&quot; said the Guru, arranging a wisp of graying hair behind her ear. &quot;A principle of programming is that we often gain useful insights into our code by writing the test cases first. Beck, Fowler, Martin, and others preach this gospel to anyone who will listen and to many who will not. In this case, why not write the code for request 247 assuming that you already had the code for 314? Then write a simple test case for 247 and hard code just enough of a stub for 314 to make that test case compile. Finally, when you see in your 247 code the form that the solution to 314 should take, confirm that that form is acceptable to the people requesting 314, and do 314 too.&quot;</p> 
<p>I blinked. &quot;I think I got that. So I'll take a first cut at 247 that uses 314's not-yet-written facility, which will let me see what 314's facility ought to look like. Right?&quot;</p>
<p>&quot;Indeed.&quot;</p>
<p>&quot;Okay.&quot; I thought for a moment and then started typing. I could assume that I had &quot;a facility to read and write a number of arbitrary base from a text stream.&quot; All right. If I had that, I could use streams to translate between bases. After further thought, I eventually came up with this code:</p>

<pre>
string ConvertBase( size_t base1, size_t base2,
                    const string&amp; src )
{
  stringstream s1( src );
  long value;

  if( !( s1 &gt;&gt; Num( base1, value ) ) || 
      !( s1 &gt;&gt; std::ws ).eof() )
    throw logic_error
      ( &quot;src is not a valid number&quot; );

  stringstream s2;
  if( !( s2 &lt;&lt; Num( base2, value ) ) )
    throw logic_error
      ( &quot;unexpected error emitting converted number&quot; );

  return s2.str();
}
</pre>

<p>Then I wrote a simple test case, with just enough of a <b>Num</b> stub hardwired to make the case compile:</p>

<pre>
class Num
{
public:
  Num( size_t base, long&amp; value ) :
    base_(base), value_(value) { }

  size_t Base() const { return base_;  }
  long&amp; Value()       { return value_; }

private:
  size_t base_;
  long&amp; value_;
};

istream&amp; operator&gt;&gt;( istream&amp; i, Num&amp; n )
{
  string s;
  i &gt;&gt; s;
  // todo: really convert input to n's base_
  n.Value() = 255; 
  return i;
}

ostream&amp; operator&lt;&lt;( ostream&amp; o, const Num&amp; /* n */ )
{
  // todo: really output n.value_ in n.base_
  return o &lt;&lt; &quot;FF&quot;; 
}

int main()
{
  string result = ConvertBase( 10, 16, &quot;255&quot; );
  cout &lt;&lt; result &lt;&lt; endl;
  return result == &quot;FF&quot; ? 0 : 1;
}
</pre>

<p>After the compiler caught a few typos, I was satisfied that this skeletal attempt worked. Next, I knew I would have to more fully address request 314 by actually implementing <b>&lt;&lt;</b> and <b>&gt;&gt;</b> for <b>Num</b>s.</p>
<p>I looked at my watch; it was well past quitting time, but I could still make my train and therefore my date with Anna. Request 314 could wait till the morning.</p>

<hr>

<p>I looked at my watch; it was well past time for our turn to sleep, so we took the opportunity. There was periodic banging on the other side of one of the doors, presumably from the invading force, but that was all &#151; so far. Unless something more happened, the strange balls, or gates, could wait till the morning. Although Gilb's people were still trying to use our portable comms gear to get a message to Earth, or to ships in transit I didn't know about, I had a feeling that the gates would be our only way out.</p>

<H3><FONT COLOR="#000080">About the Authors</FONT></H3>

<p><i><B>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <B>jim.hyslop@leitch.com</B>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <B>hsutter@acm.org</B>.</i></p>

</BLOCKQUOTE></BODY></HTML>

