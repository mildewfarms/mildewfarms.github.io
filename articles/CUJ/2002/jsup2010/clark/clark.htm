<HTML>   
     <HEAD>
<TITLE>Java Solutions October 2002/Dynamically Binding EJBs Using the Java Reflection API</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjoct.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Dynamically Binding EJBs Using the Java Reflection API</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Douglas A. Clark</FONT></H3>

<BLOCKQUOTE>
<p>Empower your deployments with this novel technique for dynamically binding EJB components.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The software development profession has moved towards making the assembly of an application independent from the development of the application&#146;s components. Though this component-based approach has proven unworkable in many situations, in other cases, a component-based design leads to a lower-cost and higher-speed application. If the design of the original component is sufficiently flexible, you can even combine this component with new components in ways you didn&#146;t anticipate when you developed the original component. (This quest for flexibility can also become a burden. Sometimes it is impossible to have sufficient flexibility and a reasonable interface without the component becoming so heavyweight that it is unusable.)</p>
<p>Achieving immutable source code is an important step in the evolution of software development. To meet this requirement, component architectures such as EJB (Enterprise JavaBeans) must provide the means to dynamically bind components. Dynamic binding is the deferral until deployment &#151; or even run time &#151; of a client object&#146;s association with a specific enterprise bean. With dynamic binding, a developer implements a client class that interacts with an enterprise bean through a particular interface. Any enterprise bean that implements this interface may be associated with the client at run time &#151; without requiring the alteration of the client&#146;s source code.</p>
<p>The EJB architecture contains a framework for binding enterprise beans statically (at compile time). However, this framework provides no obvious means for performing dynamic binding.</p>
<p>Last year, I designed and implemented a JMS (Java Message Service) framework that I used numerous times in several different systems. For each instance of this framework, I had to couple the message-driven bean in the framework to a session bean that could process the set of message types. Since this session bean would be developed long after the JMS framework, I needed some method to dynamically bind the message-driven bean to the session bean. This article describes the resulting method for dynamically binding beans using Java&#146;s Reflection API.</p>

<H3><FONT COLOR="#000080">Static Binding</FONT></H3>

<p>The following discussion presumes some familiarity with EJB. See the <a href="sidebar1.htm">sidebar</a> for information on implementing and deploying a session bean.</p>
<p>In the conventional approach, the EJB Specification stipulates that every session bean must expose at least two interfaces to its clients. The first interface is a proxy interface that extends either the <B>javax.ejb.EJBObject</B> or <B>javax.ejb.EJBLocalObject</B> interface. The second interface is a home interface that extends either the <B>javax.ejb.EJBHome</B> or <B>javax.ejb.EJBLocalHome</B> interface <a href="#4">[4]</a>. The exposed home interface must contain one or more <B>create</B> methods that return a reference to an instance of the bean&#146;s proxy interface. The proxy interface contains the set of methods that the bean exposes to its clients. The EJB specification further requires that clients use the <B>javax.rmi.PortableRemoteObject</B> class to cast from the generic <B>java.lang.Object</B> reference returned by the namespace to the specific home interface reference needed to interact with the desired enterprise bean <a href="#5">[5]</a>.</p>
<p>Imagine a session bean named <B>StaticLiaisonBean</B> that relies on an <B>UpperCaseConverterBean</B> to help it accomplish some unit of work. At run time, the client <B>StaticLiaisonBean</B> needs to look up the home interface for <B>UpperCaseConverterBean</B> in the EJB container&#146;s namespace, resolve this generic reference to a usable home-interface reference, and invoke the desired <B>create</B> method exposed by that home interface to acquire a reference to a proxy object for an instance of <B>UpperCaseConverterBean</B> (see <a href="list1.htm">Listing 1</a>).</p>
<p>The <B>StaticLiaisonBean</B> class knows, at compile time, everything it needs to know about the session bean it plans to work with:</p>

<UL><LI>   The JNDI name that maps to the home interface (string <B>"ejb/TargetBean"</B> in <a href="list1.htm">Listing 1</a>, line B).</LI>
<LI>   The actual home interface name and its package (<B>UpperCaseConverterHome</B> in <a href="list1.htm">Listing 1</a>, line C and its corresponding import statement).</LI>
<LI>   The proxy interface name and its package (<B>UpperCaseConverterRemoteProxy</B> in <a href="list1.htm">Listing 1</a>, line A and its corresponding import statement).</LI></UL>

<p>Thus, <B>StaticLiaisonBean</B> is statically bound to <B>UpperCaseConverterBean</B>. To reuse the logic contained in <B>StaticLiaisonBean</B>, but have it interact with a <B>LowerCaseConverterBean</B>, all three of these lines (and supporting import statements) need to be modified and the bean recompiled.</p>

<H3><FONT COLOR="#000080">Dynamic Binding</FONT></H3>

<p>To permit dynamic binding, one must implement <B>StaticLiaisonBean</B> such that it does not require recompilation when associated with a session bean other than <B>UpperCaseConverterBean</B>. The problem can be broken into a set of intertwined challenges:</p>

<OL><LI>Abstract away from a specific JNDI name that maps to an object that implements an arbitrary session bean&#146;s home interface.</LI>
<LI>Provide the <B>javax.rmi.PortableRemoteObject.narrow</B> method with a <B>java.lang.Class</B> object that represents the home interface for an arbitrary session bean.</LI>
<LI>Devise a way to acquire a reference to the home of an arbitrary session bean and create a reference to the remote proxy.</LI>
<LI>Devise a way to declare a variable to hold a reference to the remote proxy of an arbitrary session bean in order to call the session bean&#146;s methods.</LI></OL>

<p>To address the first challenge, I added a layer of indirection by introducing a new environment entry to the liaison bean&#146;s deployment descriptor to store the JNDI name string for the desired target bean&#146;s home interface.</p>

<pre>
&lt;env-entry&gt;
  &lt;env-entry-name&gt;targetJNDI&lt;/env-entry-name&gt;
  &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;
  &lt;env-entry-value&gt;ejb/TargetBean&lt;/env-entry-value&gt;
&lt;/env-entry&gt;
</pre>

<p>The liaison bean&#146;s source code still has a hard-coded JNDI name string (<a href="list7.htm">Listing 7</a>, line F). However, instead of referencing the target bean&#146;s home interface, the liaison bean now references a second JNDI name string. This second JNDI name string references the target bean&#146;s home interface (<a href="list7.htm">Listing 7</a>, line G). Since this second JNDI name string resides in the deployment descriptor, it is easily configurable until run time. Thus, I have deferred until application assembly the need to specify the JNDI name this bean should use to locate its associate.</p>
<p>I applied this same approach along with Reflection <a href="#6">[6]</a> to solve the second challenge. I add another environment entry to the liaison bean&#146;s deployment descriptor to store the fully specified name for the target bean&#146;s home interface.</p>

<pre>
&lt;env-entry&gt;
  &lt;env-entry-name&gt;targetHomeClass&lt;/env-entry-name&gt;
  &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;
  &lt;env-entry-value&gt;
    ...converter.LowerCaseConverterHome
  &lt;/env-entry-value&gt;
&lt;/env-entry&gt;
</pre>

<p>At run time, the liaison bean fetches this home-interface name (<a href="list7.htm">Listing 7</a>, line H) and passes it as an argument to the reflective static method <B>java.lang.Class.forName( String converterHomeInterface )</B> to acquire an instance of the home interface&#146;s associated <B>java.lang.Class</B> (<a href="list7.htm">Listing 7</a>, line I). The liaison bean also acquires the generic <B>java.lang.Object</B> reference to the desired target bean&#146;s home interface (<a href="list7.htm">Listing 7</a>, line J). The liaison bean ensures it acquired what it expected by passing the home-interface reference and the <B>java.lang.Class</B> instance to the static method <B>javax.rmi.PortableRemoteObject.narrow</B> in order to safely downcast the reference to the target bean&#146;s home-interface type (<a href="list7.htm">Listing 7</a>, line K).</p>
<p>I also made use of Reflection to solve the third challenge. My approach assumes the set of interchangeable beans can all employ a common set of arguments for the <B>create</B> methods in their home interfaces. (Given the objective of immutable source code, I cannot modify the client bean to accommodate new arguments.) For my purposes, I am content to use a <B>create</B> method with no arguments. I use the <B>java.lang.Class</B> instance of the target bean&#146;s home interface (acquired while solving the second challenge) and invoke its <B>getMethod( String name, Class[] parameterTypes )</B> method to acquire a <B>java.lang.reflect.Method</B> instance for this <B>create</B> method (<a href="list7.htm">Listing 7</a>, line L). I then call the <B>invoke</B> method of this <B>java.lang.reflect.Method</B> instance, passing in the home-interface instance, and cast the returned remote proxy reference to the <B>ConverterInterface</B> common interface (<a href="list7.htm">Listing 7</a>, line M).</p>
<p>The common interface design strategy described by Richard Monson-Haefel <a href="#7">[7]</a> provides part of the solution to the fourth challenge. The motivation for this design strategy is the desire to ensure that the set of business methods exposed by the enterprise bean is consistent with the business methods declared by the enterprise bean&#146;s remote interface <a href="#8">[8]</a>. To apply the strategy, one collects the set of business methods exposed by the enterprise bean in an interface (<a href="list8.htm">Listing 8</a>). One then extends this common interface with the proxy interface (<a href="list9.htm">Listing 9</a>) and implements the interface via the bean class (<a href="list7.htm">Listing 7</a>, line D). Since the remote interface is tied to the bean class by this common interface, the Java compiler can ensure their consistency, and anyone reviewing the code will immediately discern the relationship.</p>
<p>I can take advantage of this design strategy in another way. The common interface provides a data type you can use to declare a variable that holds a reference to an arbitrary remote proxy. I need only use a single common interface for all of the beans that collaborate with the liaison bean. I can then provide a reference to this common interface in the liaison bean&#146;s source code and interact with the different session beans through this common interface (<a href="list7.htm">Listing 7</a>, line E).</p>
<p>Using the common interface, <B>ConverterInterface</B>, I add a sibling bean to <B>UpperConverterBean</B> called <B>LowerConverterBean</B>. To demonstrate dynamic binding, I assembled a liaison component called <B>DynamicLiaison</B> (<a href="list10.htm">Listing 10</a>, bold stanzas). This component contains two beans, both instances of <B>DynamicLiaisonBean</B>. One dynamically binds to <B>UpperConverterBean</B>, while the other binds dynamically to <B>LowerConverterBean</B>. If you download the application that complements this article (&lt;www.cuj.com/java/code.htm&gt;, you may exercise <B>DynamicLiaisonClient</B> and see this component in action.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The solution I have described is a useful technique that belongs in every EJB developer&#146;s toolbox. However, you should use this technique judiciously. Although Reflection offers a powerful means to loosely couple object associations, this power comes with a price. Reflection will degrade an application&#146;s performance if you deploy it carelessly. This technique can also obscure your view of an application&#146;s design, which can complicate knowledge transfer and troubleshooting.</p>
<p>As I wrote this article, I found two other reports [<a href="#9">9</a>, <a href="#10">10</a>] from EJB developers who independently encountered problems requiring the application of dynamic binding. Each of these developers came up with a solution that relied on the Java Reflection API. I would be interested in hearing from any developers who have used other strategies. </p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Richard Monson-Haefel. <I>Enterprise JavaBeans</I> (O&#146;Reilly &amp; Associates, Inc., 2001).</p>
<p><a name="2"></a>[2]  If you elect to use a J2EE application server other than the J2EE reference implementation, you will need to modify and possibly extend the component and application deployment descriptors I have provided to conform to your vendor&#146;s augmentation of the specification.</p>
<p><a name="3"></a>[3]  Richard Monson-Haefel describes this bean adaptor design strategy in [1] (see chapter 15).</p>
<p><a name="4"></a>[4]  Prior to the EJB 2.0 specification, interaction between client objects, session beans, and entity beans could only occur through a component interface that derived from <B>java.rmi.Remote</B>. In using this component interface, enterprise beans residing in the same EJB container needlessly incurred the overhead associated with RMI. The EJB 2.0 specification addressed this issue by defining a local component interface that is not based on a distributed object communication protocol.</p>
<p><a name="5"></a>[5]  This is because the EJB Specification employs Java RMI-IIOP, which requires compliance with the IIOP 1.2 protocol.o</p>
<p><a name="6"></a>[6]  I presume that the reader is familiar with the Java Reflection API. If an overview is desired, I would suggest section 11.2 of Ken Arnold&#146;s book [11]. A quick search of the Web will also yield a number of useful articles. I have suggested a few in the references too.</p>
<p><a name="7"></a>[7]  Richard Monson-Haefel describes this common interface design strategy in [1] (see chapter 15).</p>
<p><a name="8"></a>[8]  The EJB architecture does not link a bean class and its associated remote interface through a common ancestor. Rather, it relies on the automated deployment tool associated with an EJB container to enforce consistency between the two.</p>
<p><a name="9"></a>[9]  Sriram Chakravarthy. &#147;Bringing Together the Power of Application Servers and JMS Messaging,&#148; &lt;www.theserverside.com/resources/article.jsp?l=Bringing-Together-Application-Servers-and-JMS-Messaging&gt;.</p>
<p><a name="10"></a>[10]  Gorsen Huang. &#147;Java Tip 118: Utilize the EjbProxy,&#148; <I>Java World</I>, &lt;www.javaworld.com/javaworld/javatips/jw-javatip118.html&gt;.</p>
<p><a name="1"></a>[11]  Ken Arnold, James Gosling, and David Holmes. <I>The Java Programming Language</I>, Third Edition (Addison-Wesley, 2000).</p>
<p><a name="12"></a>[12]  Linda G. DeMichiel, L.Yalcinalp, and Sanjeev Krishnan. <I>EJB Specification, Version 2.0</I> (Sun Microsystems, 2001).</p>

<p><i><B>Douglas A. Clark</B> is a consulting software developer working in the Kansas City area. He holds a master&#146;s degree in Computer Science and has more than eight years experience designing and implementing distributed systems. His areas of interest include component-based software and transaction-oriented systems. He can be reached at <B>douglas.clark@mcgconsultants.com</B>.</i></p>

<h4><a href="../../../source/2002/joct02/clark.zip"></a></h4>


</blockquote></body></html>
