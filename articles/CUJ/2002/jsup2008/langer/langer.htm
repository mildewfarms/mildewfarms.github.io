<HTML>   
     <HEAD>
<TITLE>Java Solutions August 2002/Implementing equals for Mixed-Type Comparison</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjaug.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Implementing equals for Mixed-Type Comparison</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Angelika Langer and Klaus Kreft</FONT></H3>

<BLOCKQUOTE>
<p>Sometimes you want objects to be equal even if they're not. Here's how to make it happen.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>All objects in Java are equality comparable via the <B>equals</B> method because all classes inherit the <B>equals</B> method from class <B>Object</B>. As a result, each time a programmer implements a new class, he or she must check whether the inherited version of <B>equals</B> provides the correct semantics for the new class or whether the default implementation must be overridden. Naturally, any user-defined version of <B>equals</B> should be correct. What does &#147;correct&#148; mean? It means meeting the requirements of the so-called <B>equals</B> contract, which is specified in JavaDoc of <B>Object.equals</B>.</p>
<p>In a previous article <a href="#1">[1]</a>, we discussed at length how easy it is to inadvertently provide incorrect implementations of <B>equals</B>. The most common mistake is violation of the transitivity requirement imposed by the <B>equals</B> contract. It requires the following: if one object is equal to a second and the second is equal to a third object, then the first and the third object must be equal as well.</p>
<p>The core problem of a non-transitive implementation is that it attempts to allow comparison of objects of different types. All the problems regarding transitivity go away as soon as you disallow mixed-type comparison in the sense that <B>equals</B> returns <B>false</B> unless the two objects are of the exact same type.</p>
<p>The same-type comparison is easy to implement. Here is an example:</p>

<pre>
public boolean equals(Object other) {
  ...
  if (this.getClass() !=
      other.getClass())
    return false;
  else
    // these objects can be compared;
    // go and compare their fields
    ...
}
</pre>

<p>This type of implementation of the <B>equals</B> method is easy to get right; it is robust, easy to understand, easy to maintain, and for that reason the recommended way of implementing <B>equals</B> &#151; unless you need something else.</p>

<H3><FONT COLOR="#000080">Implementation of a Mixed-Type Comparison</FONT></H3>

<p>The idea of comparing objects of different types is not entirely off base, in particular for classes from the same class hierarchy. After all, objects from the same class hierarchy (and by class hierarchy we mean all classes derived from a common superclass other than <B>Object</B>) have something in common, namely at least the superclass part. As we demonstrated in <a href="#1">[1]</a>, providing a correct implementation of a mixed-type comparison is a non-trivial task. In this article, we will show one way of implementing a mixed-type comparison of objects from the same class hierarchy that meets the requirements of the <B>equals</B> contract.</p>

<H3><FONT COLOR="#000080">Mixed-Type Comparison Semantics</FONT></H3>

<p>The most common mistake in mixed-type comparison implementations is the semantics of the comparison.</p>
<p>Q:  Under which circumstances do we consider two objects of different types from the same class hierarchy as equal?</p>
<p>A:  If they have equal superclass parts.</p>
<p>Q:  How about the subclass-specific parts?</p>
<p>The problem is that the intransitive implementations of <B>equals</B> do not care about the subclass-specific parts of the objects that they compare. Here is an example: say we have a <B>Point</B> superclass and a <B>ColoredPoint</B> subclass. When we compare <B>ColoredPoint(0,0,RED)</B> to <B>Point(0,0)</B>, the typical implementation says they are equal. If you then go on to compare <B>Point(0,0)</B> to <B>ColoredPoint(0,0,BLUE)</B>, then they, too, will compare equal. But when we compare <B>ColoredPoint(0,0,RED)</B> and <B>ColoredPoint(0,0,BLUE)</B>, they should compare equal because of the transitivity requirement of the <B>equals</B> contract, but in fact they compare unequal. What went wrong?</p>
<p>The crux lies in the subclass-specific color field. A <B>Point</B> object should only compare equal to a <B>ColoredPoint</B> object if the color field contains a default value. Under this rule, the three objects from the example above are no longer equal. <B>Point</B>s and <B>ColoredPoint</B>s only compare equal when the <B>ColoredPoint</B> has a default color (i.e., <B>Point(0,0)</B> is equal to one and only one <B>ColoredPoint</B> with the coordinates <B>(0,0)</B>).</p>
<p>Transitivity is preserved under this rule. The default color does not matter. The only thing that counts is that for a transitive mixed-type comparison all the fields that cannot be compared (namely the subclass-specific fields) have well-defined default values. Hence the rule is: two objects from the same class hierarchy compare equal if and only if they have:</p>

<UL><LI>   Equal values for all fields that they have in common (the equal superclass part).</LI>
<LI>   Default values for all other fields (the default subclass-specific part).</LI>
</UL>

<p>To make things a little more challenging, let us consider a slightly more complex class hierarchy and see whether the rule holds. Say, we have an additional subclass <B>Point3D</B> that is derived from class <B>Point</B> and that represents three-dimensional points. Both <B>ColoredPoint</B> and <B>Point3D</B> belong to the same class hierarchy &#151; class <B>Point</B> being the root class of that hierarchy. What does it mean to compare a <B>ColoredPoint</B> to a <B>Point3D</B>?</p>
<p>Under the rule above, it means that a <B>ColoredPoint</B> and a <B>Point3D</B> compare equal if and only if they have the same <B>Point</B> part and default values for their subclass-specific parts, namely the color and the third coordinate. For instance, if black is the default color and zero the default coordinate, then <B>Point(0,0)</B>, <B>ColoredPoint(0,0,BLACK)</B>, and <B>Point3D(0,0,0)</B> would be equal, but neither <B>ColoredPoint(0,0,RED)</B> nor <B>Point3D(0,0,1)</B> would be equal to <B>Point(0,0)</B>.</p>
<p>Let us now implement the rule.</p>

<H3><FONT COLOR="#000080">Implementing the Mixed-Type Comparison</FONT></H3>

<p>The functionality that we want to implement depends on the type of the <B>this</B> object and the <B>other</B> object. There are four cases:</p>

<OL><LI><B>this</B> and <B>other</B> are of the exact same type. All fields can and must be compared.</LI>
<LI><B>this</B> is of a subtype of <B>other</B>. <B>other</B> is smaller than <B>this</B>, and only the superclass fields can be compared for equality; the subclass-specific fields of this object must have default values.</LI>
<LI><B>this</B> is of a supertype of <B>other</B>. <B>other</B> is the larger object that has subclass-specific fields that must have default values. This can be implemented easiest if we let <B>other</B> do the work, which brings us back to case 2 with the roles of <B>this</B> and <B>other</B> being switched.</LI>
<LI><B>this</B> and <B>other</B> are from different branches of the class hierarchy. Both objects have something in common, which must be compared for equality, and they both have subclass-specific fields, which must be checked against the default values. This is the tricky part. First, we must identify the superclass that <B>this</B> and <B>other</B> have in common. Second, we must check the subclass-specific fields of both objects for default values.</LI></OL>

<p>The principle of the implementation is the usual recursion: every class&#146;s implementation of <B>equals</B> takes care of comparing its own fields and delegates to the superclass&#146;s implementation of <B>equals</B> for comparison of the inherited fields. Comparing one&#146;s own fields comes in two flavors: either <B>other</B> has fields that <B>this</B> can compare with its own fields, or not. The first flavor is relevant when <B>this</B> is of the same type or of a subtype of <B>other</B> (see cases 1 and 2); in this instance, compare <B>this</B>&#146;s fields with <B>other</B>&#146;s fields. The second flavor (&#147;there is nothing to compare on this level because <B>other</B> is too different&#148;) happens in cases 3 and 4; in this instance, check that <B>this</B>&#146;s fields have default values.</p>
<p>We will encapsulate the actual comparison of a class&#146;s own fields into a private helper method that every class in a class hierarchy must provide. Here is the sketch of an implementation of the helper method, which we named <B>_compareFields</B>, for a class with two <B>int</B> fields:</p>

<pre>
public class MyClass extends MySuperClass {
  static final int
    field1Default = 0,
    field2Default = 0;
  private int field1 = field1Default;
  private int field2 = field2Default;
  
  ...

  private boolean _compareFields(Object other) {
    // at least my type, check fields
    if (other instanceof MyClass) {
      if (   field1 != ((MyClass)other). field1
        || field2 != ((MyClass)other). field2
         )
         return false;
    // higher type, check defaults
    } else {
      if (   field1 != field1Default
        || field2 != field2Default
        )
        return false;

    }
    return true;
  }
}
</pre>

<p>Note, that <B>_compareFields</B> is a private method in our sample implementation. This is intentionally so in order to make sure that the method remains class-specific and cannot be overridden in a subclass.</p>
<p>In principle, <B>equals</B> does no more than call the helper method and delegate to <B>super.equals</B>. However, matters are not that simple. This strategy would be fine for cases 1 and 2, but more work is needed to address cases 3 and 4. Case 3, &#147;<B>this</B> is of a supertype of <B>other</B>,&#148; can best be addressed by passing the task on the <B>other</B> object&#146;s <B>equals</B> method. By switching the roles of <B>this</B> and <B>other</B>, we simply reduce case 3 to case 2. Case 4, &#147;<B>this</B> and <B>other</B> are from different branches of the class hierarchy,&#148; is the really challenging situation where we must identify the superclass that both objects have in common and must navigate the class tree in a more sophisticated way than simply going straight up from the subclass to the root class.</p>
<p>Before we delve into the solution for case 4, let us take a look at the implementation of the <B>equals</B> method itself.</p>

<pre>
public class MyClass extends MySuperClass {
  
  ...

  public boolean equals(Object other) {
    // identical
    if (other == this) return true;
    // null
    if (other == null) return false;
    // incomparable types
    if (!(other instanceof RootClass)) return false;
    // subtype of root; go and compare
    return _navigateClassHierarchy(other);
    }
}
</pre>

<p>The <B>equals</B> method performs a couple of preliminary checks, like checking whether <B>other</B> is a <B>null</B> reference and whether <B>other</B> belongs to the same class hierarchy as <B>this</B>. The assumption here is that the topmost superclass of the class hierarchy is a class named <B>RootClass</B>. After the preliminaries, <B>equals</B> delegates to another helper method named <B>_navigateClassHierarchy</B>, which controls the class tree traversal and triggers the actual field comparison provided by the other helper method <B>_compareFields</B>.</p>

<H3><FONT COLOR="#000080">The Tree Traversal</FONT></H3>

<p>For illustration, let us consider the following class hierarchy shown in <a href="fig1.htm">Figure 1</a>. For each of the four relevant situations, <a href="fig2.htm">Figures 2</a>, <a href="fig3.htm">3</a>, <a href="fig4.htm">4</a>, and <a href="fig5.htm">5</a> illustrate the location of <B>thisObject</B> and <B>theOtherObject</B> in the class hierarchy (see the box around the class name) and the size of each object in terms of the class slices it comprises (see the yellow box). For instance, in case 1, <B>thisObject</B> is an object of type <B>MyClass</B> and contains a <B>MySuperClass</B> and a <B>MyClass</B>.</p>

<pre>
MyClass thisObject = new MyClass();
MyClass theOtherObject = null;
</pre>

<p><a href="fig2.htm">Figure 2</a> diagrams case 1:</p>

<pre>
// (1) this and other are of the exact same type
// theOtherObject = new MyClass();
... thisObject.equals(theOtherObject) ... 
</pre>

<p><a href="fig3.htm">Figure 3</a> diagrams case 2:</p>

<pre>
// (2) this is of a subtype of other
   theOtherObject  = new MySuperClass();
   ... thisObject.equals(theOtherObject) ...
</pre>

<p><a href="fig4.htm">Figure 4</a> diagrams case 3:</p>

<pre>
// (3) this is of a supertype of other
   theOtherObject  = new MySubClass_1 ();
   ... thisObject.equals(theOtherObject) ...
</pre>

<p><a href="fig5.htm">Figure 5</a> diagrams case 4:</p>

<pre>
// (4) this and other are from different
//     branches of the class hierarchy
   thisObject      = new MySubClass_1();
   theOtherObject  = new MySubClass_2();
   ... thisObject.equals(theOtherObject) ...
</pre>

<p>The algorithm is easy for the cases 1, &#147;<B>this</B> and <B>other</B> are of the exact same type,&#148; and 2, &#147;<B>this</B> is of a subtype of <B>other</B>.&#148; In these cases, we will either compare <B>this</B>&#146;s fields to <B>other</B>&#146;s fields (case 1) or check <B>this</B>&#146;s field against the default values (case 2). This is exactly what method <B>_compareFields</B> does. Afterwards, we delegate to the superclass for comparison of the inherited fields and start the recursive traversal up the class tree. Here is a first (still incomplete) snippet of the helper method <B>_navigateClassHierarchy</B>:</p>

<pre>
public class MyClass extends MySuperClass { 

  
  ...

  protected boolean _navigateClassHierarchy(Object other) {

      ...

      // compare my fields
      if(!_compareFields(other)) return false;
      // pass the buck up
      return super._navigateClassHierarchy(other);

  }
}
</pre>

<p>Case 3, &#147;<B>this</B> is of a supertype of <B>other</B>,&#148; is similar to case 2, &#147;<B>this</B> is of a subtype of <B>other</B>.&#148; If we switch the roles of <B>this</B> and <B>other</B>, we can use the solution of case 2, which means that we simply call <B>other</B>&#146;s <B>_navigateClassHierarchy</B> method and provide <B>this</B> as an argument. Here is a more elaborate implementation of the tree navigation method:</p>

<pre>
public class MyClass extends MySuperClass {
  ...

  protected boolean _navigateClassHierarchy(Object other) {

    if (other instanceof MyClass)
    {  // switch roles         
      return ((MyClass)other)._navigateClassHierarchy(this);
    }
    else
    {   // compare my fields
      if(!_compareFields(other)) return false;
      // pass the buck up
      return super._navigateClassHierarchy(other);
    }
  }
}
</pre>

<p>Note, this implementation is still incomplete, since we haven&#146;t addressed case 4, &#147;<B>this</B> and <B>other</B> are from different branches of the class hierarchy,&#148; yet.</p>
<p>In our case 4 example, <B>this</B> is a <B>MySubClass_1</B> object, and <B>other</B> is a <B>MySubSubClass</B> object. Control flow in the tentative implementation of <B>_navigateClassHierarchy</B> shown above will go to the <B>else</B>-branch because <B>other</B> is not an instance of <B>MyClass</B>. The <B>compareFields</B> method will correctly check whether <B>this</B>&#146;s field has default values. Then control flow delegates to the superclass (i.e., <B>MyClass._navigateClassHierarchy</B> will be invoked).</p>
<p>This time <B>other</B> is an instance of <B>MyClass</B>, because <B>MyClass</B> happens to be superclass that <B>this</B> and <B>other</B> have in common. Note, we have not yet checked whether <B>other</B> has default values for its own subclass-specific fields; in order words, we must still traverse the branch of the class tree from which <B>other</B> stems. This can be achieved by switching roles and calling <B>MySubSubClass._navigateClassHierarchy</B>. This happens to be exactly what the <B>then</B>-branch does anyway. So far, so good.</p>
<p>In <B>MySubSubClass._navigateClassHierarchy</B>, we will check for default values of the sub-subclass-specific fields; we will move up the class tree and process the subclass-specific fields until we end up in <B>MyClass._navigateClassHierarchy</B> again. With the implementation as it is, control flow would now descend again down the other branch that we already traversed (i.e., we will end up in an infinite loop).</p>
<p>To break the cycle, we need to memorize that we already traversed that other branch of the tree. For this purpose, we introduce a boolean flag, which we name <B>reverseOrder</B>, to maintain this extra piece of information. Here is the complete implementation of the <B>_navigateClassHierarchy</B> method:</p>

<pre>
public class MyClass extends MySuperClass {
  ...
  protected boolean _navigateClassHierarchy
    (Object other, boolean reverseOrder) {

    if (other instanceof MyClass &amp;&amp; !reverseOrder)
    {  // reverse order     
      return 
        ((MyClass)other)._navigateClassHierarchy(this,true);
    }
    else
    {   // compare my fields
      if(!_compareFields(other)) return false;
        // pass the buck up
        return
          super._navigateClassHierarchy(other,reverseOrder);
    }
  }
}
</pre>

<p>Before switching the roles of <B>this</B> and <B>other</B> in order to traverse the other branch of the class tree, we check whether we did it before. If so, we refrain from doing it again and instead start the normal straight ascent up the hierarchy from here on, since both sub-branches have already been traversed. The boolean flag works like a so-called latch: it starts with the initial value <B>false</B>, flips exactly once (namely when traversal of the other branch starts), and never changes its value again. It is handed from one <B>_navigateClassHierarchy</B> method to the next, each of which checks the flag in order to find out whether the other branch has already been traversed or not.</p>
<p>That&#146;s it! This is one way of implementing a correct mixed-type comparison. It is certainly not the only conceivable implementation, but no matter how you achieve the goal, it will take more than a simple <B>instanceof</B> test to get it right. <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> show the complete source code for the root class and one of the subclasses.</p>
<p>As with all implementations of <B>equals</B>, no matter whether they are same-type comparisons only or mixed-type comparisons, any new class in the class hierarchy must join the game and must employ the same mechanism for its implementation of <B>equals</B>. In our case, it means that all classes in the hierarchy must override the helper methods <B>_navigateClassHierarchy</B> and <B>_compareFields</B>. The <B>equals</B> method itself is identical in all classes and needs only be defined once in the root class.</p>
<p>The implementations of the <B>_compareFields</B> methods are entirely class-specific and fully depend on the number and types of the fields that the respective class adds to the hierarchy. Note, <B>_compareFields</B> is a private method in our sample implementation. This is intentionally so in order to make sure that the method remains class-specific and cannot be overridden in a subclass. Alternatively, we could have implemented a final method in each class that has a class-specific name using a naming scheme like <B>_compare&lt;classname&gt;Fields</B>.</p>
<p>The implementations of <B>_navigateClassHierarchy</B> are mostly identical. This is really boilerplate code that you copy and paste. The few modifications are that the class name in the <B>instanceof</B> test and the cast expression must be changed; it is the name of respective class.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>
<p>The ideas discussed in this article were inspired by comments we received from readers our earlier article on <B>equals</B> <a href="#1">[1]</a>. These readers were (in the order their emails arrived) Larry Kuenning, Mark Davis, and Frank Griswold. All three pointed out that there is a way of implementing <B>equals</B> so that it performs a transitive mixed-type comparison. From their tentative first ideas and code snippets, we derived the solution explained in this article. Mark Davis&#146;s suggestions are the main foundation of this article; he precisely described the algorithm and provided most of the implementation.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Klaus Kreft and Angelika Langer. &#147;Secrets of <B>equals</B>,&#148; <I>Java Solutions</I> Supplement to <I>C/C++ Users Journal</I>, April 2002, &lt;www.cuj.com/java/articles/a19.htm?topic=java&gt;.</p>
<p><a name="2"></a>[2]  Mark Davis. &#147;Libert&eacute;, Egalit&eacute;, Fraternit&eacute;,&#148; <I>Java Report</I>, January 2000, &lt;www.macchiato.com/columns/Durable5.html&gt;.</p>

<p><i><B>Angelika Langer</B> works as an independent freelance trainer/consultant. Her main area of interest and expertise is object-oriented software development in C++ and Java. She can be reached at <B>langer@camelot.de</B>.</i></p>
<p><i><B>Klaus Kreft</B> is a senior consultant at Siemens Nixdorf in Germany. He can be reached at <B>klaus.kreft@mch.sni.de</B>.</i></p>

<h4><a href="../../../source/2002/jaug02/langer.zip"></a></h4>
</blockquote></body></html>
