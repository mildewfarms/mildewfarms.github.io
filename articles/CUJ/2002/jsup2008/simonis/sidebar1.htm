<html><HEAD>
<TITLE>Java Solutions August 2002/International Swinging: Making Swing Components Locale-Sensitive/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Resource Bundles</FONT></H3>

<HR>

<BLOCKQUOTE>
<p>Even for applications not created with localization in mind, it is reasonable to separate any resources presented by the program to the user (such as strings, sounds, or icons) from the program code. The reason is not only program modularization, but also a division of responsibility (i.e., icons are designed by artists and not by programmers).</p>
<p>In order to support this approach, Java defines the abstract class <B>ResourceBundle</B> along with the two concrete implementations: <B>ListResourceBundle</B> and <B>PropertyResourceBundle</B>. <B>PropertyResourceBundle</B> reads its key/value pairs from a file, the name of which must correspond to the following naming schema:</p>

<pre>
<I>name</I>[_<I>language</I>[_<I>country</I>[_<I>variant</I>]]].properties
</pre>

<p>The language and country fields are the two-letter codes discussed in the main article.</p>
<p>The parts in square brackets are optional. The file format consists of lines of key/value pairs, where the key and the value are separated by an equal sign (=) or a colon (:). Lines beginning with a pound sign (#) or an exclamation mark (!) are ignored. Values spanning multiple lines can be defined by ending incomplete lines with a backslash (\) <a href="simonis.htm#7">[7]</a>.</p>
<p><B>ListResourceBundle</B> stores its key/value pairs internally. In contrast to <B>PropertyResourceBundle</B>, it can store not only <B>String</B> values, but objects of arbitrary type as well. To use it, subclass <B>ListResourceBundle</B> and override the method <B>getContents</B> to return a two-dimensional <B>Object</B> array containing the key/value pairs. The names of the derived classes must conform to the following naming conventions:</p>

<pre>
<I>name</I>[_<I>language</I>[_country[_<I>variant</I>]]]
</pre>

<p>Again, the parts in square brackets are optional.</p>
<p>Thus every resource bundle can be identified by a name and a locale. A set of resource bundles consists of resource bundles with the same name, but with different locale suffixes. <B>ResourceBundle</B> objects search for resource bundles by name, the requested locale (<B>1</B>), and the current default locale as returned by <B>Locale.getDefault</B> (<B>2</B>), in the following order:</p>

<pre>
name + "_" + language1 + "_" + country1 + "_" + variant1
name + "_" + language1 + "_" + country1 + "_" + variant1 + 
  ".properties"
name + "_" + language1 + "_" + country1
name + "_" + language1 + "_" + country1 + ".properties"
name + "_" + language1
name + "_" + language1 + ".properties"
name + "_" + language2 + "_" + country2 + "_" + variant2
name + "_" + language2 + "_" + country2 + "_" + variant2 + 
  ".properties"
name + "_" + language2 + "_" + country2
name + "_" + language2 + "_" + country2 + ".properties"
name + "_" + language2
name + "_" + language2 + ".properties"
name
name + ".properties"
</pre>

<p>Odd lines denote Java classes while even lines identify property files, so classes may hide property files with the same name. The name must be fully qualified &#151; it must contain the full package name. A key/value pair defined in a parent-level bundle must not be specified in a lower-level bundle if its value does not change. A search for a key that&#146;s undefined in a lower-level bundle will find the value of the corresponding key from the parent-level bundle.</p>
<p>Further information about resource bundles can be found in the Java API documentation for the classes <B>java.util.ResourceBundle</B>, <B>java.util.PropertyResourceBundle</B>, and <B>java.util.ListResourceBundle</B> [<a href="simonis.htm#6">6</a>, <a href="simonis.htm#8">8</a>].</p>
</blockquote></body></html>
