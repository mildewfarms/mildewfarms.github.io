<HTML>   
     <HEAD>
<TITLE>Java Solutions August 2002/International Swinging: Making Swing Components Locale-Sensitive</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjaug.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">International Swinging: Making Swing Components Locale-Sensitive</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Volker H. Simonis</FONT></H3>

<BLOCKQUOTE>
<p>Internationalization of components is nothing new, but switching locales at run time without changing existing code is new and very cool.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Although Java and its GUI library Swing provide software developers with a highly customizable framework for creating truly &#147;international&#148; applications, the Swing library is not sensitive to locale switches: it cannot automatically change an application's appearance to conform to the conventions of a specific locale at run time. Several types of applications benefit from the ability to easily switch the language at run time. Training applications and other programs that run on computers in public spaces (such as libraries, airports, or government offices) may need to support multiple languages. Other applications (like travel dictionaries or translation programs) are inherently multilingual and are specifically designed to support users of dissimilar tongues. Such applications would greatly benefit if the user-interface language could be customized at run time.</p>
<p>This article shows you how to customize Swing to support locale switching at run time. I have created a new look-and-feel called the MLMetalLookandFeel (where ML stands for multilingual). This new look-and-feel extends the standard Metal look-and-feel but is locale-sensitive at run time.</p>
<p>As an example, I&#146;ll modify the Notepad application from the J2SDK distribution in the &#147;demo/jfc/Notepad/&#148; directory. The original version is localized for French, Swedish, and Chinese, as can be seen from the different resource files located in the &#147;resources/&#148; subdirectory. Depending on the host locale that JVM is running on, the application will get all the text resources visible in the GUI from the corresponding resource file. You can load the resource file with the following code (from <B>Notepad.java</B>):</p>

<pre>
try {
  resources = ResourceBundle
    .getBundle("resources.Notepad",
               Locale.getDefault());
}
catch (MissingResourceException e) {
  System.err.println("resources/" +
    "Notepad.properties not found");
  System.exit(1);
}
</pre>

<p>The <B>ResourceBundle</B> class (see <a href="sidebar1.htm">sidebar</a>) tries to load the file <B>resources/Notepad_XX_YY.properties</B> where <B>XX</B> is the two letter ISO-639 language code <a href="#1">[1]</a> of the current default locale and <B>YY</B> the two letter ISO-3166 country code <a href="#2">[2]</a>. For more detailed information about locales, see the JavaDoc documentation of <B>java.util.Locale</B>. The <a href="sidebar1.htm">sidebar</a> describes the exact resolution mechanism for resource bundles if there is no exact match for the requested locales. In any case, the file <B>resources/Notepad.properties</B> is the last resort if no better match is found.</p>
<p>You can try out the available resources by setting the default locale at program startup with the two properties <B>user.language</B> and <B>user.country</B> <a href="#3">[3]</a>. For example, to run the Notepad application with a Swedish user interface, type:</p>

<pre>
java -Duser.language=sv Notepad
</pre>

<p>A user interface internationalized in this way is only customizable once, at program startup. After the resources for the default locale are loaded, there is no way to switch the locale until the next program startup. I call this type of internationalization <I>static</I> internationalization. Throughout this article, I modify <B>Notepad.java</B> to make it <I>dynamically</I> internationalized (i.e., locale-sensitive at run time). I call this new application IntNotepad.</p>

<H3><FONT COLOR="#000080">The Java Swing Architecture</FONT></H3>

<p>A GUI application is composed of many UI components such as labels, buttons, menus, tool tips, etc. Each of these components must display some text (usually specified in the constructor) in order to be useful. In more complex components, like file choosers, the text can be accessed with <B>set</B> and <B>get</B> methods.</p>
<p>Internationalized applications like Notepad do not hard code these text strings into the program, but read the displayed text from resource files. Instead of:</p>

<pre>
JFrame frame = new JFrame();
frame.setTitle("Notepad");
</pre>

<p>they use the following code:</p>

<pre>
JFrame frame = new JFrame();
frame.setTitle(
  resources.getString("Title"));
</pre>

<p>where <B>resources</B> denotes the resource bundle opened in the previous code snippet. (It&#146;s unfortunate that the <B>String</B> class doesn&#146;t have a constructor that does the resource lookup automatically, but that&#146;s life.)</p>
<p>You could reset all these strings at run time every time the user chooses a different locale, but a manual switch is impractical in an application that uses hundreds of different components. Even worse, some components like <B>JFileChooser</B> do not offer accessory methods for all the strings they display. You must come up with another solution, which requires a closer look at the Swing architecture.</p>
<p>Swing&#146;s design is based on a simplified MVC (Model-View-Controller) <a href="#4">[4]</a> architecture, called Separable Model (or Model/UI-Delegate) <a href="#5">[5]</a>. The Model-Delegate pattern combines the View and the Controller into a single object called the UI Delegate (see <a href="fig1.htm">Figure 1</a>). In Swing, these delegates are look-and-feel specific. They derive from the abstract class <B>ComponentUI</B>. By convention, they have the name of the corresponding Swing component, with the &#147;J&#148; in the component class name replaced by the name of the specific look-and-feel. For example, the UI delegate for <B>JLabel</B> in the Metal look-and-feel is named <B>MetalLabelUI</B>.</p>
<p>The UI delegate must paint the component to which it is tied. In contrast to the AWT library, the <B>paint</B> method of a Swing component just calls the <B>paint</B> method of its delegate along with a reference to itself to render itself.</p>

<H3><FONT COLOR="#000080">The Solution: Idea and Implementation</FONT></H3>

<p>Knowing the internals of the Swing architecture, you are ready to make the Swing components aware of locale switches at run time. Instead of setting the text field of a component to the string that should be displayed, you set the field to contain a key that identifies the displayed string. Then you override the UI delegate so that it uses the key to look up the local-specific string (instead of painting the key string obtained from its associated component) and prints that locale-specific string.</p>
<p><a href="list1.htm">Listing 1</a> shows how a <B>JLabel</B> is usually created and initialized, followed by a code snippet taken from the <B>BasicLabelUI.paint</B> method, which is responsible for rendering the label&#146;s text.</p>
<p>I will now create a new UI delegate for <B>Jlabel</B>, called <B>MLBasicLabelUI</B>, which overrides the <B>paint</B> method to interpret the string received from its associated <B>JLabel</B> as a key into a resource, parameterized by the current <B>Locale</B>. The string passed to the <B>Jlabel</B> is rendered only if the UI delegate can&#146;t find an entry in the resource file. The changes in the UI are fully transparent to the component itself.</p>

<H3><FONT COLOR="#000080">Getting the Localized Resource Strings</FONT></H3>

<p>Since the procedure for fetching the localized text of a component is the same in all UI delegates, I put the code into a static method called <B>getResourceString</B>, defined in the class <B>MLUtils.java</B> (<a href="list2.htm">Listing 2</a>).</p>
<p>This method builds the name of the resource file. It first queries the system properties for an entry called <B>MainClassName</B>. If it succeeds, the resource file will be a file with the same name in the &#147;resources/&#148; subdirectory. If not, it will assume ML as the default resource filename. This filename along with the original key argument is passed to the second, two-parameter version of <B>getResourceString</B> (shown in <a href="list3.htm">Listing 3</a>).</p>
<p>This method finally translates the key text into the appropriate localized value. If it cannot find the corresponding value for a certain key, it returns the key itself, so a component that is unaware of the multilingual UI is rendered normally.</p>
<p>For performance reasons, <B>getResourceString</B> stores resource files in a static <B>Map</B> after using them for the first time. Subsequent accesses use this cached version, without reloading the file again.</p>

<H3><FONT COLOR="#000080">Overloading the UI Delegates&#146; paint Method</FONT></H3>

<p>Having seen how localized strings can be replaced by their localized equivalent, the overloaded version of the <B>paint</B> method in <B>MLBasicLabelUI</B> (<a href="list4.htm">Listing 4</a>) should be no surprise. The label is now initialized to <B>"MyApplication.HelloString"</B>, which is a key into the localized resource file <B>resources/MainClassName_XX_YY.properties</B>.</p>
<p>A string not found in the resource file is displayed &#147;as is&#148; in the label, so my example works fine with the usual component UI; it would not respond to locale changes at run time, however.</p>
<p>If you want to make an entire application&#146;s GUI locale-sensitive at run time, you must create new UI classes for each Swing component used in the GUI. This sounds like a lot of work, but all it requires is redefining the methods that request text data from the method&#146;s associated component.</p>
<p>One potential problem is that in Swing the actual look-and-feels (like the Metal or Windows look-and-feel) use their own UI classes that are not directly derived from <B>ComponentUI</B> (see <a href="fig2.htm">Figure 2</a>). Instead, all the different UI classes for a single component inherit from a class called <B>Basic</B><I>XXX</I>UI where <I>XXX</I> stands for an arbitrary component name. This base class factors out the functionality common to all the different look-and-feels.</p>
<p>This derivation hierarchy makes your job more difficult, because you would like to override the UIs of a distinct look-and-feel, but often the task of requesting and painting the actual text is done only, or at least in part, in the <B>Basic</B><I>XXX</I>UI base classes. Therefore, you must specialize two classes. First you specialize the <B>Basic</B><I>XXX</I>UI class for your component and redefine the methods that query the component&#146;s text fields. Call this class <B>MLBasic</B><I>XXX</I>UI. Then you copy and rename the actual component UI belonging to your desired look-and-feel from <B>Metal</B><I>XXX</I>UI to <B>MLMetal</B><I>XXX</I>UI. Next, change the base class from which it inherits from <B>Basic</B><I>XXX</I>UI to <B>MLBasic</B><I>XXX</I>UI, which is the name of your overloaded version of <B>Basic</B><I>XXX</I>UI. Again, Metal is just an example here. It could be Windows, Motif, or any other look-and-feel. Additionally, if necessary, you may need to redefine the methods in <B>MLMetal</B><I>XXX</I>UI that display text attributes from your associated component.</p>
<p>After implementing all the needed UI delegates, you tell your application to use the new delegates instead of the old ones. This can be done in two ways. You can register your delegates along with the component names at program startup (shown in <a href="list5.htm">Listing 5</a>), or you can define a new look-and-feel that uses your custom UI delegates (shown in <a href="list6.htm">Listing 6</a>).</p>
<p>After each locale switch, you trigger a repaint of the dynamically internationalized components. This is done by the little helper function in <a href="list7.htm">Listing 7</a>, which takes a root window as argument and simply invalidates all the necessary child components so they will be repainted. It uses the helper method, <B>recursiveFindMLJComponents</B>, which recursively finds all the child components of a given container. As shown in <a href="list8.htm">Listing 8</a>, the method returns all components that are instances of <B>JComponent</B>, but a more sophisticated version could return only dynamically internationalized components.</p>
<p>Notice that my version of <B>repaintMLJComponents</B> works only in applications with a single root window. If an application uses more than one root window, or if it uses non-modal dialogs, these additional windows also must be repainted. This can be done by defining a static method for registering the additional windows and dialogs and by extending <B>repaintMLJComponents</B> to invalidate these registered components as well. The version of <B>repaintMLJComponents</B> included in the online source code (&lt;www.cuj.com/java/code.htm&gt;) contains these extensions.</p>

<H3><FONT COLOR="#000080">The Locale Chooser</FONT></H3>

<p>The last step in the custom-localization process it to build a widget that displays all the available locales and allows users to choose a new default locale from this list.</p>
<p><a href="fig3.htm">Figure 3</a> and <a href="fig4.htm">4</a> show the new IntNotepad application with the built-in locale chooser. I added a permanent status bar to demonstrate locale switches for labels. <a href="fig3.htm">Figure 3</a> shows the application with the English default locale while the user is switching it to Russian.</p>
<p><a href="fig4.htm">Figure 4</a> shows the application after the switch to Russian. Menus, labels, buttons, and even tool tips are now displayed with Cyrillic letters in Russian. Notice that the size of the menus has been resized automatically in order to hold the longer Russian menu names.</p>
<p>The class <B>LocaleChooser</B> is a small extension of a <B>JComboBox</B> with a custom renderer that displays each available <B>Locale</B> with a picture of the country&#146;s flag and the name of the corresponding language. The language name is displayed in its own language if available and in English otherwise. Please notice that there is no one-to-one mapping between languages and country flags, as many languages are spoken in more than one country and there are countries in which more then one language is spoken. Therefore one must be careful when choosing a flag to not hurt the feelings of people who speak that language in a different country. After all, the flags should be just visual hints to simplify the selection of a particular language.</p>
<p>The <B>LocaleChooser</B> constructor is passed a <B>String</B> that denotes the resource directory of the application and the <B>Container</B> that is the root component passed to the <B>repaintMLJComponentes</B> method shown in <a href="list7.htm">Listing 7</a>.</p>
<p>For every language or language/country combination, the resource directory passed to the <B>LocaleChooser</B> constructor should contain a subdirectory named by the two-letter language code or the two-letter language code plus an underscore plus the two-letter country code. Each of these subdirectories should contain a file <B>flag.gif</B>, which will be the image icon displayed by the <B>LocaleChooser</B> for the corresponding language.</p>
<p>Add more locales to the list of locales simply by adding the corresponding directories and files to the resource directory. You do not need to recompile <B>LocaleChooser</B>. Remember, however, for a locale switch to show any effects, a resource file with the localized component strings must be available as well.</p>

<H3><FONT COLOR="#000080">Putting It All Together</FONT></H3>

<p>After discussing how to make Swing components aware of locale switches at run time, I will now summarize the important steps and show how they fit into a real application.</p>
<p>First of all, the new component UI delegates must be created for all components that should be dynamically internationalizable. These UI delegates should be packed together into a new look-and-feel that is derived from an existing look-and-feel. This way, you don&#146;t have to create UI delegates for the full set of Swing components at the very beginning, but you have the possibility to stepwise extend your new look-and-feel for new components.</p>
<p>Once your new look-and-feel is available, you can start to modify your application to make it locale-sensitive at run time. The first step is to set the system property <B>MainClassName</B> to the name of your application. This information will be needed by the <B>getResourceString</B> method shown in <a href="list2.htm">Listing 2</a>. Then you set your new look-and-feel as the standard look-and-feel for your application. You can achieve these two steps with the following code:</p>

<pre>
System.setProperty("MainClassName",
                   "IntNotepad");
UIManager.setLookAndFeel(
          new MLMetalLookAndFeel());
</pre>

<p>As a third step, you install an instance of the <B>LocaleChooser</B> presented in the last section somewhere in your application. Usually this will be the tool bar, but it can also be installed in a menu or a special options window along with other configuration options. The <B>LocaleChooser</B> must be instantiated with a reference to the main application window in order for the <B>repaint</B> method shown in <a href="list7.htm">Listing 7</a> to work properly.</p>
<p>That&#146;s all. From now on, whenever you create a new Swing component, you have the choice of setting its string attributes to either a concrete string or to a key value. If the string attribute will be available in the applications resource file as a key, the key&#146;s value is displayed instead, according to the current default locale. Otherwise, the string attribute itself will be displayed.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This article presents a technique to make Swing components locale-sensitive at run time. It works by simply creating a new look-and-feel without changing any code in the components themselves. As an example, I derived the IntNotepad application from the Notepad example application available in every JDK distribution. IntNotepad is aware of locale changes and rebuilds the whole user interface every time such a change occurs at run time. It is available for download from the <I>CUJ</I> website &lt;www.cuj.com/java/code.htm&gt;.</p>
<p>By using the techniques presented here, it would be possible to lift the entire Swing library and make it locale-sensitive for run-time locale switches without any compatibility problems with older library versions.</p>
<p>Finally, I want to thank Roland Weiss and Dieter B&uuml;hler for their assistance and for reviewing this paper.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  ISO. &#147;The ISO-639 Two Letter Language Codes,&#148; &lt;www.unicode.org/unicode/onlinedata/languages.html&gt;.</p>
<p><a name="2"></a>[2]  ISO. &#147;The ISO-3166 Two Letter Country Codes,&#148; &lt;www.unicode.org/unicode/onlinedata/countries.html&gt;.</p>
<p><a name="3"></a>[3]  Be aware that setting the default locale on the command line with help of the mentioned properties does not work with all JDK versions on all platforms. Refer to the bugs 4152725, 4179660, and 4127375 in the Java Bug Database [9].</p>
<p><a name="4"></a>[4]  E. Gamma, R. Helm, R. Johnson, and J. Vlissides. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995).</p>
<p><a name="5"></a>[5]  John Zukowski and Scott Stanchfield. &#147;Fundamentals of JFC/Swing, Part II,&#148; MageLang Institute, &lt;http://developer.java.sun.com/developer/onlineTraining/GUI/Swing&gt;.</p>
<p><a name="6"></a>[6]  Andrew Deitsch and David Czarnecki. <I>Java internationalization</I> (O&#146;Reilly &amp; Associates, 2001).</p>
<p><a name="7"></a>[7]  Notice that property files are restricted to the ISO 8859-1 encoding. Any characters not available in this encoding must be expressed as Unicode escape sequences. The Java utility native2ascii may be used to convert files from an arbitrary encoding into an ASCII-encoded file with Unicode escape sequences.</p>
<p><a name="8"></a>[8]  Sun Microsystems, Inc. &#147;The Java Tutorial,&#148; &lt;http://java.sun.com/docs/books/tutorial/i18n/resbundle/index.html&gt;.</p>
<p><a name="9"></a>[9]  Sun Microsystems, Inc. &#147;The Java Bug Database,&#148; &lt;http://developer.java.sun.com/developer/bugParade&gt;.</p>
<p><a name="10"></a>[10]  Sun Microsystems, Inc. &#147;Java Internationalization and Localization Toolkit 2.0,&#148; &lt;http://java.sun.com/products/jilkit&gt;. </p>

<p><i><B>Volker H. Simonis</B> received a Masters Degree in Computer Science from the University of T&uuml;bingen (Germany). He is an expert in the field of generic programming, C++, and Java, with about five years of working experience in these areas. Currently he is writing his PhD thesis at the Computer-Algebra department of the University of T&uuml;bingen. He can be reached at <B>simonis@informatik.uni-tuebingen.de</B>.</i></p>

<h4><a href="../../../source/2002/jaug02/simonis.zip"></a></h4>
</blockquote></body></html>
