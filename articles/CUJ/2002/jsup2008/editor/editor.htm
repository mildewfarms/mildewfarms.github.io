<HTML>   
     <HEAD>
<TITLE>Java Solutions August 2002/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjaug.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Know Thy Machine</FONT></H3>

<p>More for amusement than anything else, I occasionally teach a 10-week Java-programming class for the University of California Extension. Since I give out a lot of homework, cruel taskmaster that I am, I end up looking at a lot of code &#151; some good, some not. All of my students are working professionals, some with decades of programming experience. Lately I&#146;ve noticed a disturbing phenomena, illustrated with the following example.</p>
<p>In one of last semester&#146;s homework assignments, I told the class that they should constrain the size of a collection to the maximum value of an <B>int</B>. I saw the following code several times:</p>

<pre>
int value;
//...
if( value &lt;= Integer.MAX_VALUE )
  // do something
</pre>

<p>The problem with this statement is that it doesn&#146;t work &#151; it&#146;s always true. The difficulty is in the hardware, which uses two&#146;s-complement arithmetic. (If it doesn&#146;t, Java requires the JVM to emulate two&#146;s-complement arithmetic, so everything I&#146;m about to say still applies.) In a two&#146;s-complement system, the most significant bit of a positive number is always zero, and the most significant bit of a negative number is always one. Given the 32-bit <B>int</B> mandated by the Java specification, this means that <B>Integer.MAX_VALUE</B> has the value <B>0x7fffffff</B>. If you add one to this value, you&#146;ll end up with <B>0x80000000</B>. (All bits except the high bit are zero.) This number is, interestingly enough, <B>Integer.MIN_VALUE</B>. The foregoing <B>if</B> statement never fails because all negative numbers are certainly less than <B>Integer.MAX_VALUE</B>. The worst case of this problem is:</p>

<pre>
for( int i = 0; i &lt;= Integer.MAX_VALUE, ++i )
  // do something
</pre>

<p>which is an infinite loop.</p>
<p>The point of this discussion is actually not to look at the odd behavior of arithmetic in a computer, but to address a more fundamental programmer&#146;s (not programming) issue. In spite of some programmer&#146;s beliefs, Java is not the Alfred E. Neuman programming environment. (MAD Magazine readers are familiar with Alfred&#146;s motto: &#147;What, me worry?&#148;) &#147;Don&#146;t think about the machine, the VM will hide it from you.&#148; That&#146;s nonsense, of course. Our programs are running on real hardware, which has real limitations in how it works, and we have to be aware of these limitations to use the language effectively. Remember, a computer program is really a bunch of electrons moving across a sheet of carefully dirtied sand and aluminum. If you don&#146;t know how the machine works at the binary level, then you are bound to get bitten eventually by an expression that is intuitively correct but which yields nonsense on a real computer.</p>
<p>If you&#146;ve never done it (or haven&#146;t done it lately), you should read a good algorithms book and a good book that discusses how machines work at the hardware level. Programming is a craft, and unless you know the fundamentals of your craft, you can&#146;t do the best possible work.</p>

<p>Allen Holub<br>
Senior Editor</p>
</blockquote></body></html>
