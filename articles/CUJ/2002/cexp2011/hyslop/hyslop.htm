<HTML>   
     <HEAD>
<TITLE>November 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.11/tocnov.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Truth or Consequences</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>
<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>Ahhh... today's task was going to be a cakewalk. I had some minor changes to make in a module I'd written not too long ago. I took a swig of the caffeinated drink stuff that some people in the lunchroom call coffee, sat back in my chair, and settled in to look at my code.</p>
<p><i>What in heck is this?</i> I wondered:</p>

<pre>
void f()
{
 TextHandler t;
 t.sendText(&quot;Hello, world&quot;, true);
// ...
}
</pre>

<p>I couldn't remember what the Boolean parameter meant. I had to look up the class definition to remind myself:</p>

<pre>
class TextHandler
{
public:
 void sendText( const std::string &amp; msg, 
                bool sendNewLine );
//...
};
</pre>

<p><i>Ah, of course, </i>I mused, the warm glow of familiarity returning (helped along by another sip of coffee), <i>the function appends a carriage return/line feed if the parameter is true. How could I have forgotten?</i></p>
<p><i>Snap!</i> That would be the Guru snapping her huge tome closed. I managed not to spill any coffee in my surprise. After recovering my composure, I turned to greet her and was again taken aback. Her book was a tiny paperback that couldn't have contained more than a hundred pages. I was mystified how she had managed to extract such a resounding <i>thwack</i> from such a little book.</p> 
<p>&quot;My child, if you can forget so easily what the parameter means, how do you expect other programmers to understand, when they are looking at your writings for the first time?&quot;</p>
<p>&quot;Uh, well,&quot; I hemmed and hawed, &quot;Don't most of our source editors show the function's parameters when you hold the mouse over the function?&quot;</p>
<p>&quot;Some, my child, but not all &#151; or even most. I have oft preached that the primary purpose of source code is communication &#151; communication of intent from one programmer to another. The book in my hands is an old, well-respected tome on the art of communication. In here, it is written, 'use definite, specific, concrete language' <a href="#1">[1]</a>. In your parable, <b>bool</b> is none of these. It conveys nothing useful to the reader.&quot;</p>
<p>&quot;Uh, no, but it's not that hard to remember once you know, is it?&quot; The Guru fixed her steely blue eyes on me. I was getting decidedly hot under her gaze.</p>
<p>&quot;How long ago did you write this code?&quot; the Guru's voice was mild &#151; too mild for my liking.</p>
<p>&quot;So, um, how should I fix it?&quot; I neatly sidestepped her question.</p>
<p>&quot;Can you think of no other way to express your intention?&quot; Yep, sidestepped my way out of the frying pan into the fire.</p>
<p>&quot;I could eliminate the second parameter and force the user to send the newline,&quot; I said as I wrote on the whiteboard:</p>

<pre>
{
 t.sendText(&quot;Hello, world\n&quot;);
}
</pre>

<p>&quot;The thing is, though, the code that uses the <b>TextHandler</b> usually prints a variable just before the line terminator, not a hard-coded string,&quot; I continued writing, &quot;so I'd have to do this:&quot;</p>

<pre>
{
 t.sendText( variable1 );
 t.sendText( &quot;:&quot; );
 t.sendText( variable2 );
 t.sendText( &quot;\n&quot; );
}</pre>

<p>&quot;I am not convinced that your writings would suffer greatly from such a change, my child. However, for the sake of further, deeper enlightenment, let us assume that the distinction is necessary. How else could you achieve this?&quot;</p>
<p>&quot;Well, I could provide two separate functions, I suppose:&quot;</p>
 
<pre>
void sendText( const std::string &amp; );
void sendTextWithNewLine( const std::string &amp; );
</pre>

<p>&quot;Hmmmm... yes, that could work for your particular case,&quot; the Guru frowned slightly as she considered it. &quot;Any other possibilities?&quot;</p>
<p>She wasn't letting me off easily today. I thought furiously for a moment, then... gave up. I shrugged my shoulders at her.</p>
<p>The Guru picked up the whiteboard marker. &quot;There is another aspect to this quest you are undertaking, my child. Consider this parable:&quot;</p>

<pre>
void displayText( const std::string &amp;,
                  bool applyItalics, 
                  bool applyBold );

void f()
{
 displayText( &quot;This is bold but not italic&quot;,
              true, 
              false );
}</pre>

<p>&quot;The intent is to have the text appear in bold, but the poor scribe that wrote the parable has been confounded by the order of the parameters. The text will appear in italics. The compiler will not flag such a failing, for the compiler sees nothing out of the ordinary.</p>

<p>&quot;Now consider what would happen if Bob got at the code and re-ordered the parameters, a technique known as 'Permute And Baffle'<a href="#2">[2]</a>:&quot;</p>

<pre>
void displayText( const std::string &amp;, 
                  bool applyBold,
                  bool applyItalics );
</pre>

<p>&quot;The disciple who created the false writings, the problematic <b>displayText</b>, has failed to require definite, specific, concrete parameters.</p>
<p>&quot;Neither of your two solutions would work. The <b>displayText</b> function requires additional parameters to indicate the disposition of the text. This smites down your first solution. Your second solution would work, but it would be quite brittle. In the event additional formatting styles &#151; such as color, font type, and so on &#151; are added, the number of functions required will grow exponentially. Yet there is another solution which you have not... ahem... <i>enumerated</i>...&quot; She paused.</p>
<p>&quot;Enumerations?&quot; I asked.</p>
<p>&quot;Very good, my child. Yes, enumerations would serve your purpose quite well here. Behold:&quot;</p>

<pre>
class TextHandler 
{
public:
 enum NewLineDisposition { sendNewLine, noNewLine };
 void sendText( const std::string &amp;, NewLineDisposition );
};

void f()
{
 TextHandler t;
 t.sendText( &quot;Hello, &quot;, TextHandler::noNewLine );
 t.sendText( &quot;world&quot;, TextHandler::sendNewLine );
}</pre>

<p>&quot;These writings are good. The code is now self-documenting &#151; you will note there is not a comment in sight, yet the intent and end result are perfectly clear. Disciples meditating upon the function <b>f()</b> do not need to interrupt their thoughts to look up what the parameters to <b>sendText</b> mean.</p>
<p>&quot;The enumeration has the added blessing that it is quite easily extensible. Should you ever need to send a carriage return before the string, for example, then it is a simple matter to add an enumeration such as <b>prependNewLine</b>, and none of your existing code will break.</p>
<p>&quot;Do not lose heart and discard your first solutions, my child. In other quests, they may be the worthy champions that vanquish the demons of the solution domain.&quot; She turned, reopened her book, and gracefully glided away, around the corner.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1] William Strunk Jr. and E.B. White. <i>The Elements of Style</i> (MacMillan Publishing Co. Ltd, 1979).</p>

<p><a name="2"></a>[2] From Roedy Green's &quot;How To Write Unmaintainable Code,&quot; &lt;http://mindprod.com/unmaindesign.html&gt;. (Primarily aimed at Java programmers, it still has lots of relevance for C++ programmers.)</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is convener of the ISO C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>


</div>

</body>

</html>
