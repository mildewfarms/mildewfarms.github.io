<HTML>   
     <HEAD>
<TITLE>May 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.05/tocmay.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Making a Real Hash of Things</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>I was groggy when we landed, but free. After returning to Terran orbit and spending over a month in detention, we had been released when the tensions were defused. Control of the alien technology would be overseen by a newly formed body and protected by militia from all of the world's major factions.</p>
<p>We were waiting for the elevator. Jeannine grunted. &quot;I feel so heavy. It's like acceleration that won't stop.&quot;</p>
<p>&quot;We were used to it once; we'll acclimatize again.&quot; I sank back into the chair; it was too hard to stand for long. &quot;How long is that blasted thing going to take?&quot;</p>
<p>&quot;I think they made the mistake of optimizing the elevator schedule to get the minimum average wait time.&quot; Jeannine sat too. &quot;Which is too bad for us when we happen to hit the unbearable worst-case wait time, unfortunately.&quot;</p>
<p>&quot;I'm just glad to be home.&quot;</p>
<p>There was quiet between us for a time, while we waited in the crowd. I was thinking of the trials of the past two years. I knew Jeannine was thinking about them too. &quot;We sure made a hash of things,&quot; she said, finally, and I laughed tiredly. &quot;Oh,&quot; she smiled, &quot;that reminds you of a story, doesn't it? Well, go ahead. What is it, hon? Don't keep me in suspense.&quot;</p>
<p>And so I began to tell that story, just as I would continue to tell many others in the happy years to come, during our new life together...</p>

<hr>

<p>It was the elevators and the word &quot;hash&quot; that made me think of that day, when I was at my first programming job, years ago.</p>
<p>&quot;Oh, and d'ja hear what <i>Bahb</i> did?&quot; Wendy was saying and chuckled with a merry gleam in her eye. &quot;The new boss is big on standards. So <i>Bahb</i> decided that it was time to look good and be the fair-haired standards-conforming boy in his latest piece of code.&quot;</p>
<p>&quot;But isn't that a good thing?&quot; I asked, puzzled.</p>
<p>Wendy smiled and walked away. The words &quot;Wait till you see his code...&quot; wafted over her shoulder as she turned the corner into her cube. I shrugged mentally and went back to work.</p>
<p>It was later the next day that the first explosion hit. The sound seemed to come from the direction of Bob's cube, so I walked over to see what was going on. I found Bob glowering at his screen, muttering foul things under his breath. A forgotten latte was sitting, cold, at his elbow.</p>
<p>&quot;Wassup?&quot; I asked innocently. I was putting myself in a dangerous position, but I judged that the potential humor value was worth the risk.</p>
<p>Bob muttered something more, and I thought I caught the words &quot;standards&quot; and &quot;stupid&quot; and &quot;slow&quot; in the mix. &quot;Williams hasn't got the faintest clue what it means to write production code,&quot; he grumbled on, more audibly now. &quot;First he wants me to use standard stuff, now <i>this</i>.&quot;</p>
<p>I looked over Bob's shoulder and saw an email from the QA department. Skimming it quickly, I saw that it was complaining about the speed of the code Bob had checked in the day before. &quot;What's their beef?&quot; I asked.</p>
<p>&quot;Speed,&quot; Bob said, scratching himself. &quot;<i>Speed.</i> It seems the artsy-fartsy testing department doesn't care that my code works; they just claim it's not <i>fast</i> enough to meet spec.&quot;</p>
<p>&quot;What's the spec?&quot;</p>
<p>&quot;Oh, constant-time lookup, on average. I could've told them that those stupid STL containers wouldn't hack it.&quot; In another window, I saw part of his code:</p>

<pre>
typedef map&lt;string, Employee&gt; SearchIndex;

// ...

SearchIndex::iterator result = ind.find( empname );
</pre>

<p>&quot;How many <b>map</b> entries will there be?&quot; I asked.</p>
<p>&quot;Oh, lots,&quot; Bob waved vaguely.</p>
<p><i>Snap!</i> The sudden sound of a book snapping shut made us both jump a bit. The Guru, who had once again appeared behind us silently, gave a stern look. She pointed at the cold latte, then at Bob's gut, and demanded: &quot;How do you get so big eating food of this kind?&quot; I suppressed a laugh, and Bob turned red and drew breath, but the Guru continued before Bob could respond: &quot;This performance problem is not the fault of the blessed Standard Template Library. It is the fault of the programmer who uses the wrong container. Why did you use a <b>map</b>?&quot;</p> 
<p>&quot;Because that's the blasted standard container for looking stuff up!&quot; Bob groused irritably. &quot;Why d'you think I've been pulling my hair out, sweetheart? Just shows those ivory-tower folks who designed the STL haven't got a clue what we need out here in the real world. This container with its internal trees and all always does logarithmic lookup, and that's just too slow for us.&quot;</p>
<p>&quot;And, in this case, does it matter if sometimes a search may take a longer time, as long as the average case remains constant time?&quot; the Guru asked sweetly. Something about her mien told me that she already knew the answer.</p>
<p>Bob saw it too. &quot;No, we only care what the stress-test benchmarks show for millions of searches. You should know; you wrote the spec!&quot;</p>
<p>&quot;That,&quot; she agreed, &quot;I did. The solution you require involves adding five characters to your code and using mostly-standard-conforming containers that are not, yet, themselves part of the C++ Standard.&quot;</p>
<p>&quot;Huh?&quot; Bob and I said together.</p>
<p>In answer, the Guru reached over and slightly modified one line of Bob's source code:</p>

<pre>
typedef <span style='color:blue'>hash_</span>map&lt;string, Employee&gt; SearchIndex;
</pre>

<p>&quot;Now you have constant-time lookup, in the average case,&quot; she said. &quot;In production code, when you want associative containers, you almost always want hash-based containers, and not tree-based ones. Note that the <b>hash_map</b> is not yet standard, but the one we have here is available to us on all the platforms we are using <a href="#1">[1]</a>. You must change the included header name, of course. You should also check whether the default hash function is good for your data and customize it if needs must. Test it, time it, and if it suffices check it in.&quot;</p> 
<p>And before we could ask anything more, she had already reopened her tome and walked off. Thinking it was a good time to disappear, I too made my escape before Bob could recover.</p>
<p>Later that day, at the water cooler, I learned that Bob had made the suggested change, and that it indeed had solved the problem. The QA department was happy, our manager Pete Williams was happy, Bob was unhappy but he was that way most of the time anyway, and I thought I'd heard the last of it.</p>
<p>Not so.</p>
<p>It was two days later that the second explosion happened. I rushed over to Bob's cube and saw almost the identical scene: a cold latte, a heated Bob, and an email from QA. This time, I saw after a quick glance, QA was complaining about the speed of a new piece of code Bob had written the night before and checked into version control.</p>
<p>&quot;Hey, Bob,&quot; I said innocently. &quot;What's got their shorts in a knot now?&quot;</p>
<p>&quot;Speed,&quot; Bob said, scratching himself. &quot;<i>Speed.</i> What do they want from me? My code works! I'm even using a <b>hash_map</b> just to suit the powers-that-be and their blessed coding requirements. Now those idiots in QA have the nerve to complain <i>again</i> that my code's not fast enough for spec.&quot;</p>
<p>&quot;What's this code for?&quot;</p>
<p>&quot;Oh,&quot; Bob waved his hand listlessly, &quot;I think they're using my routine in a real-time interrupt handler or something.&quot; I managed to catch a glimpse of his source:</p>

<pre>
typedef hash_map&lt;Descriptor, Resource&gt; Lookup;

// ...

Lookup::iterator result = res.find( d );
</pre>

<p>&quot;How many <b>map</b> entries will there be?&quot; I asked again.</p>
<p>&quot;Oh, lots,&quot; Bob waved vaguely as before.</p>
<p><i>Snap!</i> There she was again, and although I'd half-suspected the Guru would be nearby I was still surprised. So was Bob. &quot; 'One size fits all,' is it?&quot; she asked quietly. &quot;Why are you using a <b>hash_map</b> here?&quot;</p>
<p>Bob turned deep red. I backed away a few steps, sensing that today his fuse was short and burning quickly. &quot;Because,&quot; he said carefully, &quot;just a couple of days ago <i>you told me that I should always use those nonstandard hash-based containers!</i>&quot;</p>
<p>The Guru shook her head sadly. &quot;I said nothing of the sort.&quot; Bob nearly exploded, but she continued: &quot;I said you almost always want hash-based containers. My acolyte?&quot; she added, turning now to me.</p>
<p>The last thing in the world I wanted was to be roped into this situation. &quot;Uh, yes?&quot; I uhhhed as intelligently as I could.</p>
<p>A moment of silence passed between us, and another. Then: &quot;Did you ever hear, my child,&quot; the Guru asked pensively, &quot;of the man who drowned crossing a river that averaged only three feet deep?&quot;</p>
<p>A ray of light gleamed in my mind. &quot;Ah,&quot; I nodded, &quot;and the man who waited fifteen minutes for an elevator that averaged only a one-minute wait. The usual containers are tree-based and they always offer logarithmic lookup, in both the average and worst cases. That makes hash-based containers faster on average &#151; and if you pick a suitable hash function,&quot; I was quick to add and got the instant gratification of the Guru's nod and smile, &quot;but their worst case might be, uh, worse, is that it?&quot;</p>
<p>&quot;Indeed. My child, never,&quot; she emphasized, &quot;ever confuse the average and worst cases.&quot; The Guru reopened the tome she was carrying and found a different page. &quot;Here,&quot; she pointed, and: &quot;Hear. The prophet Musser.&quot; She looked over the edge of the book at me, then at Bob, then back down to the page, and read: &quot;'Worst-case performance of hash table operations can be very bad &#151; linear in the size, <i>N</i>, of the table &#151; under some circumstances, but that of balanced binary trees is always O(log <i>N</i>).'&quot; <a href="#2">[2]</a></p>
<p>&quot;Right,&quot; I pressed on, eager to show off my understanding over Bob's. &quot;And two days ago all that mattered was the total time for millions of searches, so it didn't matter if a handful were slow, only the average case was important. But with a service routine...&quot; I trailed off.</p> 
<p>&quot;...you have a hard upper limit on the amount of time that may be consumed,&quot; she confirmed, &quot;and the worst case becomes the more important criterion to manage.&quot;</p>
<p>Bob just kept looking from one of us to the other and back, as though he were watching a tennis match. &quot;Enough!&quot; he bellowed, and got up so quickly his chair nearly tipped over, and stormed off in the direction of the local latte outlet.</p>
<p>&quot;Indeed,&quot; the Guru continued, also turning to leave, &quot;hashing offers the advantage of constant average time for insertion and searching, while tree-based lookup offers reliable performance. Choose which you need. As I said,&quot; she smiled back mischievously for a moment, &quot;'in production code, when you want associative containers, you almost always want hash-based containers...'&quot;</p>

<hr>

<p>Our wedding day came a few months later, a quiet family event, a new start. Some political infighting continued in the world at large, as nations continued to jockey for position and advantage with the alien technology, but it didn't concern me any more. It didn't concern us. We were well shut of that.</pre> 
<p>One sunny afternoon not many weeks after the wedding, Jeannine sat in our new living room, thumbing through a book.</pre>
<p>&quot;What's that?&quot; I asked, and she showed me the book and the passage she was reading. &quot;Oh,&quot; I said, &quot;of course. Well, will our road go ever on and on, do you think?&quot;</pre>
<p>&quot;'Down from the door where it began,'&quot; she agreed, smiling. &quot;And I think we have an ending for the first volume of our book, too. 'And they lived happily until the end of their days,' see Volume Two for details.&quot;</pre>
<p>I laughed, and we laughed, and it was true. And that is the end of the story of this part of our life, of how Jeannine and I met and went to Jove, and made wonderful discoveries and had terrible adventures, and safely returned. But our happy life went on, and you may be sure that in our later life together we would often continue to reminisce about the events of our youth, long before we'd ever met, and I would tell Jeannine about many more funny and touching and dangerous and memorable times I'd had, together with Wendy, and Bob, and the local Guru.</p> 

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Implementations of hash-based containers are typically called <b>hash_set</b>, <b>hash_multiset</b>, <b>hash_map</b>, and <b>hash_multimap</b>. You can get them in the box with several popular C++ compilers, including Comeau (which uses a modified version of the SGI STL or Dinkumware standard library), Metrowerks (which has implemented its own, originally based on Modena's but since completely redesigned and rewritten), and Microsoft (which uses the Dinkumware standard library). They're also included in several popular third-party standard library implementations that you can probably use with your existing compiler, including Dinkumware, SGI STL, and STLport (which is based on the SGI STL). Some implementation details vary; consult your library's documentation.</p> 
<p><a name="2"></a>[2] D. Musser et al. <i>STL Tutorial and Reference Guide, Second Edition</i> (Addison-Wesley, 2001).</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>
</BLOCKQUOTE></BODY></HTML>
