<HTML>   
     <HEAD>
<TITLE>September 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.09/tocsep.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Baseless Exceptions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>&quot;Well, well, well,&quot; I said to myself with only a touch of smugness. &quot;Looks like I've found a compiler bug.&quot;</p>
<p>I had been chasing down a problem where an exception wasn't being properly caught by the exception handler. I had boiled it down to a small code fragment:</p>

<pre>
class Base
{
// ... whatever ...
};

class Derived : private Base
{
  void f() {
    try {
      throw Derived();
    }
    catch (Base &amp;) {
      cout &lt;&lt; &quot;Caught Base&quot; &lt;&lt; endl;
    } catch (...) {
      cout &lt;&lt; &quot;Caught something else&quot; &lt;&lt; endl;
    }
  }
};
</pre>

<p>I was expecting the program to implicitly convert the <b>Derived</b> object to a <b>Base &amp;</b>, so it would print out &quot;Caught Base.&quot; Instead, though, it was ignoring the conversion and printing out &quot;Caught something else.&quot; Gloating over my discovery about the compiler's error, I remembered the words of the Guru: &quot;Remember, my young apprentice, never assume either you or your compiler is correct. Always read the Holy Standard to confirm your understanding and wisdom.&quot; A few minutes later, my gloating had turned to puzzlement, because the Standard said my compiler was behaving correctly:</p>

<UL>
<p>A handler is a match for a throw-expression with an object of type <b>E</b> if ... the handler is of type <b>cv T</b> or <b>cv T&amp;</b> and <b>T</b> is an unambiguous public base class of <b>E</b>.... <a href="#1">[1]</a></p></UL>

<p><i>Unambiguous public base class? Well, that seems pretty unreasonable,</i> I thought. <i>After all, the <b>Derived</b> can be converted to a <b>Base</b>, because it's in the scope of <b>Derived</b>.</i> To test it, I added the statement</p>

<pre>
Base &amp; testRef = *this;
</pre>

<p>just before the <b>try</b> statement. Sure enough, it compiled without any problems.</p>
<p>&quot;You seem to be meditating upon a puzzlement, my apprentice.&quot; I jumped slightly &#151; I didn't think I'd ever get used to the Guru's sudden appearances.</p>
<p>&quot;Uh, yeah,&quot; I muttered. &quot;I don't understand why the Standard doesn't allow the exception to be converted, even though it's allowable within the scope.&quot;</p>
<p>She carefully marked her place and closed the tome she was carrying. &quot;For the conversion on your<b> 'Base &amp; testRef = *this;'</b> statement, when does the compiler determine whether the conversion is allowed, due to access privileges or inheritance?&quot;</p>
<p>&quot;Well, it does it when it's constructing the reference. No, wait &#151; that's wrong. It does it at compile time.&quot;</p>
<p>&quot;Correct, my child. Now, when does the compiler check these requirements for the conversion of your exception handler?&quot;</p>
<p>&quot;It would happen at compile time too, wouldn't it?&quot; The Guru did not respond. Instead, she cocked an eyebrow, and her grey eyes bored into me &#151; her &quot;Are you sure about that?&quot; expression. I thought desperately for a moment. Then the penny dropped. &quot;Oh, of course,&quot; I said. &quot;The evaluation has to happen at run time. Any kind of an exception object can be thrown, so the exception handler has to look at the actual object to determine its type.&quot;</p>
<p>&quot;And where is access information stored at run time?&quot; the Guru prompted.</p>
<p>&quot;It's stored....&quot; I paused a moment. &quot;Hey, that's a trick question &#151; access checking is done at compile time, no run-time information should be stored. Ah, I get it now &#151; the restriction is there because of the lack of access information.&quot;</p>
<p>I expected the Guru to walk away at this point. She didn't, though. She simply stood serenely beside my cubicle. I pondered the issue some more.</p>
<p>&quot;Wait a second,&quot; I said slowly. &quot;No, I don't get it. The program still has to know whether or not there's an unambiguous, public base class accessible for conversion. What about this...&quot; I turned to my whiteboard and wrote out a more complicated example:</p>

<pre>
#include&lt;iostream&gt;
using namespace std;
class Base
{
public:
  virtual ~Base(){}
};

class DerivedPrivately : private Base
{
  // ... whatever ...
};

class DerivedPublicly : public Base
{
  // ... whatever ...
};

void g(int which)
{
  if (which &lt; 0) throw DerivedPublicly();
  else if (which == 0) throw Base();
  else throw DerivedPrivately();
}

void f(int value)
{
  try {
    g(value);
  }
  catch(Base &amp;)
  {
    cout &lt;&lt; &quot;Caught Base&quot; &lt;&lt; endl;
  }
  catch ( ... )
  {
    cout &lt;&lt; &quot;Caught something else&quot; &lt;&lt; endl;
  }
}

int main()
{
  f(-1);
  f(0);
  f(1);
}
</pre>

<p>&quot;If I understand the Standard properly, the output should be 'Caught Base' for the first two calls, and 'Caught something else' on the last call. The compiler is obviously doing some kind of run-time checking, so why limit it to public, unambiguous base classes?&quot;</p>
<p>&quot;Ah, my child, consider if you change your privately derived class, by adding a <b>friend void f(int);</b> statement. What would you expect then?&quot;</p>
<p>&quot;Well, the <b>DerivedPrivately</b> object has declared <b>f()</b> a friend, so I'd expect it to print out 'Caught Base'.&quot;</p>
<p>She smiled. &quot;Now, what information will the program require in order to know that the conversion is acceptable?&quot;</p>
<p>Have I ever mentioned how annoying the Guru's Socratic method can be sometimes? I pondered for a moment. &quot;Well,&quot; I ventured, &quot;Obviously it has to keep track of the inheritance tree. And I guess it has to keep track of friends, too. That could be done fairly easily, though &#151; just keep some sort of table in <b>f()</b>'s object file.&quot;</p>
<p>&quot;Ah, but what if <b>f()</b> doesn't know that it is a friend of <b>DerivedPrivately</b>? That is to say, <b>f()</b>'s translation unit refers only to <b>Base</b>, and it does not include the header file wherein <b>DerivedPrivately </b>is declared. No, my child, the information would have to be stored globally, and the program would require some mechanism that would allow it to map specific machine code to a particular function, in order to determine if the function it is executing is a friend. In a complex heirarchy, which might have any number of friends or implicit conversion sequences, keeping track of such information would represent a significant overhead, which would otherwise be unneccessary. It is far simpler to keep a list of unambiguous, public base classes.</p>
<p>&quot;You will note, by the way, that the same restriction applies to catching pointers. The compiler will only convert a pointer if the type you want to convert it to is an unambiguous public base class of the original type. Pointers do have the added ability to perform qualification conversions.&quot;</p>
<p>The Guru turned and glided away. &quot;The solution to your problems should be obvious by now, my apprentice. Exception handling, by the way, is one of only two places where the Holy Standard requires run-time checking of access privileges. The other place, of course, is ...&quot; but she turned a corner, and I lost the rest of what she was saying.</p>
<p>Naturally, the Guru was right. The solution to my problem was simple: add an exception handler for <b>Derived:</b></p>

<pre>
class Derived : private Base
{
  void f() {
    try {
      throw Derived();
    }
    catch (Derived &amp;) {
      cout &lt;&lt; &quot;Caught Derived&quot; &lt;&lt; endl;
    } catch (Base &amp;) {
      cout &lt;&lt; &quot;Caught Base&quot; &lt;&lt; endl;
    } catch (...) {
      cout &lt;&lt; &quot;Caught something else&quot; &lt;&lt; endl;
    }
  }
};
</pre>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1] ISO C++ Standard, clause 15.3 paragraph 3.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>
<p><i><b>Herb Sutter</b> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>

</body>

</html>
