<HTML>   
     <HEAD>
<TITLE>September 2002 C++ Experts Forum/Object Interconnections</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.09/tocsep.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: Dynamic CORBA, Part 2 &#151; Dynamic Any</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Douglas C. Schmidt and Steve Vinoski</FONT></H3>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Welcome to the second part of our series covering Dynamic CORBA. In Part 1 <a href="#1">[1]</a>, we explained the basics of the CORBA DII (Dynamic Invocation Interface). The DII allows CORBA clients to invoke operations on target objects without having compile-time knowledge of the targets' interfaces. The DII is not widely used in C++ or Java applications, but it's indispensable for those applications that do use it, such as scripting applications or application gateways.</p>
<p>Our presentation in Part 1 showed two examples of using the DII to invoke simple operations. The first example explained how to invoke an operation with no arguments or return value. The second example was slightly more complicated than the first and showed how to use the DII to invoke a stock quote operation. We kept the arguments and return value of the stock quote operation simple so we could focus on the fundamentals of using the DII. That wasn't the only reason, however &#151; we also kept the arguments and return value simple out of necessity. Without the compile-time type information normally provided by C++ stubs, our DII example was unable to create or examine values of constructed IDL types, at least by conventional C++ means.</p>
<p>Real-world IDL operations often include arguments of constructed types, such as <b>struct</b>s, <b>union</b>s, and <b>sequence</b>s. In this column, we explain the Dynamic Any, which is the standard facility for manipulating values of such types within Dynamic CORBA applications. The CORBA Dynamic Any facility has undergone several revisions &#151; this column describes the latest version.</p> 

<H3><FONT COLOR="#000080">Why We Need the Dynamic Any</FONT></H3>

<p>Let's change our stock quote example slightly to introduce more features into its interface.</p>

<pre>
// IDL
module Stock {
  exception Invalid_Stock {};

  struct Info {
    long high;
    long low;
    long last;
  };

  interface Quoter {
    Info get_quote (in string stock_name) raises (Invalid_Stock);
  };
};
</pre>

<p>Rather than simply returning the current value of the requested stock, <b>get_value</b> now returns a <b>struct</b> containing the stock's highest price, lowest price, and current price for the day. The following code shows how we can use the DII to invoke this new version of <b>get_quote</b>.</p> 

<pre>
CORBA::Object_var obj = // ...obtain object reference...
CORBA::Request_var req = obj-&gt;_request (&quot;get_quote&quot;);
req-&gt;add_in_arg () &lt;&lt;= &quot;IONA&quot;;
req-&gt;set_return_type (Stock::_tc_Info);
req-&gt;exceptions ()-&gt;add (Stock::_tc_Invalid_Stock);
req-&gt;invoke ();
CORBA::Environment_ptr env = req-&gt;env ();
if (!CORBA::is_nil (env) &amp;&amp; env-&gt;exception () == 0) {
   Stock::Info retval;
   req-&gt;return_value () &gt;&gt;= retval;
   ...
}
</pre>

<p>This code works, but it isn't fully dynamic. It uses the static <b>TypeCode</b> constants <b>Stock::_tc_Info</b> and <b>Stock::_tc_Invalid_Stock</b> to populate the DII request, and it uses the static <b>Stock::Info</b> type to extract the return value. If we have this much compile-time information about the <b>Stock</b> module, we might as well forego using the DII and just use the conventional CORBA SII (static invocation interface) since it's more efficient and less error prone.</p>
<p>As we noted in our previous column, we can replace the use of the static <b>TypeCode</b> constants with information retrieved from the CORBA IFR (Interface Repository). We're not going to show that in this column, however. We'll cover it later in this series of columns when we explore the IFR.</p>
<p>While the IFR can help us avoid the need for static <b>TypeCode</b> constants, it can't help us entirely with the <b>get_quote</b> return value. We can get the <i>type</i> of the return value from the IFR, but we can't examine the return <i>value</i> itself using IFR facilities. Moreover, without having the type of the return value compiled into our program, we can't make use of <b>Any</b> extraction operators either.</p>
<p>The Dynamic Any facility provides the solution to allow us to examine the <b>get_quote </b>return value. It allows a CORBA application to create, examine, or modify a value of any IDL type without having compile-time information for that type.  This capability is essential for truly dynamic CORBA applications.</p>

<H3><FONT COLOR="#000080">Dynamic Any Basics</FONT></H3>

<p>The operation of the Dynamic Any hinges on a single fundamental characteristic of all constructed IDL types: they are all ultimately composed of &quot;atomic&quot; basic IDL types, such as <b>long</b>, <b>short</b>, <b>boolean</b>, and <b>char</b>. The Dynamic Any allows an application to create or modify a value of a constructed type by individually setting each of the basic values that comprise it. Similarly, an application can examine a value of a constructed type by examining each of its basic &quot;atomic&quot; values. As we'll show below, when creating a Dynamic Any, you pass in a <b>TypeCode</b>, either directly or indirectly as part of an <b>Any</b>. The Dynamic Any uses this <b>TypeCode</b> as the source of structural information about the value it stores. Unlike a regular <b>Any</b>, where you can change both its value and its <b>TypeCode</b> over the course of its lifetime, once you create a Dynamic Any, its <b>TypeCode</b> remains invariant.</p> 
<p>For example, our <b>Stock::Info</b> <b>struct</b> is composed of three basic elements, each of type <b>long</b>. A sequence of <b>Stock::Info</b> <b>struct</b>s would be composed of multiple <b>struct</b> elements, each of them composed of three <b>long</b> values. Suppose you defined another <b>struct</b> that had a <b>Stock::Info</b> as one of its members, like this:</p>

<pre>
// IDL
module Stock {
  struct Report {
    string analyst_brief;
    CORBA::StringSeq inside_trading_cronies;
    Info price_info;
  };
};
</pre>

<p>A <b>Stock::Report</b> has as its basic elements a <b>string</b>, a <b>sequence</b> of <b>string</b>s, as well as the three <b>long</b> members of the <b>Stock::Info</b> type.</p>

<H3><FONT COLOR="#000080">Creating a Dynamic Any</FONT></H3>

<p>To create a Dynamic Any, you use a <b>DynamicAny::DynAnyFactory</b>. You first retrieve a reference to such a factory from the ORB using <b>ORB::resolve_initial_references</b>, as shown below.</p>

<pre>
CORBA::Object_var obj =
  orb-&gt;resolve_initial_references (&quot;DynAnyFactory&quot;);
DynamicAny::DynAnyFactory_var dynfactory =
  DynamicAny::DynAnyFactory::_narrow (obj);
</pre>

<p>Using a <b>DynAnyFactory</b>, you can create a Dynamic Any from either a <b>TypeCode</b> or from an <b>Any</b>. These two approaches for creating Dynamic Anys correspond to the two modes of using them: you use the <b>TypeCode</b> creation approach when using a Dynamic Any to <i>compose</i> a value, and you use the <b>Any</b> creation approach when using a Dynamic Any to <i>decompose</i> a value. You compose or create a value in a Dynamic Any by initializing each of its basic elements. If on the other hand you already have a value, you can use Dynamic Any to decompose it into its basic elements, each of which you can examine or change. Our <b>get_quote</b> operation's return value is easily accessible in the form of an <b>Any</b>, so we'll create a <b>DynamicAny::DynAny</b> using that <b>Any</b>, as shown below.</p>

<pre>
// ...same code as in previous get_quote example...
req-&gt;invoke ();
CORBA::Environment_ptr env = req-&gt;env ();
if (!CORBA::is_nil (env) &amp;&amp; env-&gt;exception () == 0) {
  DynamicAny::DynAny_var dynany = dynfactory-&gt;create_dyn_any (req-&gt;return_value ());
  ...
}
</pre>

<p>Once we've created the Dynamic Any, we can choose to deal with the value either through the base <b>DynamicAny::DynAny</b> interface or through the derived interface corresponding to the value's type, in this case <b>DynamicAny::DynStruct</b>. We'll show both approaches. Our first example uses the <b>DynAny</b> interface to examine each of the three <b>long</b> values in the <b>Stock::Info</b> <b>struct</b>.</p>

<pre>
long high = dynany-&gt;get_long ();
dynany-&gt;next ();
long low = dynany-&gt;get_long ();
dynany-&gt;next ();
long current = dynany-&gt;get_long ();
</pre>

<p>This example clearly illustrates the nature of a Dynamic Any as a sequence of basic types that can be accessed via an internal iterator. We examine all the basic values making up the <b>Stock::Info</b> value by repeatedly retrieving a <b>long</b> value and then advancing the internal iterator of the <b>DynAny</b> to &quot;point&quot; to the next <b>long</b> value.</p> 
<p>The fact that our <b>DynAny</b> holds a value of a <b>struct</b> type is not explicit in this code, but nevertheless this example still contains implicit static assumptions about the contained value's type. Specifically, it assumes that the value in the <b>DynAny</b> is composed of three basic elements of type<b> long</b>. There are two ways to solve this issue: we can either write more general code based on the <b>DynAny</b> interface, or we can use the <b>DynStruct</b> interface as we mentioned above. To use <b>DynStruct</b>, we have to narrow to it from <b>DynAny</b>:</p>

<pre>
DynamicAny::DynStruct_var dynstruct =
  DynamicAny::DynStruct::_narrow (dynany);
if (!CORBA::is_nil (dynstruct)) {
  // narrow succeeded
  ...
}
</pre>

<p>We can ensure that the <b>narrow</b> will succeed by checking the value's type using the <b>DynAny::type</b> operation:</p>

<pre>
CORBA::TypeCode_var typecode = dynany-&gt;type ();
if (typecode-&gt;kind () == CORBA::tk_struct) {
  DynamicAny::DynStruct_var dynstruct =
    DynamicAny::DynStruct::_narrow (dynany);
  assert (!CORBA::is_nil (dynstruct));
  ...
}
</pre>

<p>Once we have a <b>DynStruct</b>, we can use its specialized interface to access the <b>struct</b> members. We can either access the members via accessor methods similar to those in the <b>DynAny</b> interface, or we can take a &quot;batch&quot; approach by asking for a sequence of name/value pairs representing all member values of the <b>struct</b>. In the following example, we determine the name and type of each member using the <b>DynStruct</b> accessor approach:</p> 

<pre>
DynamicAny::DynStruct_var dynstruct =
  DynamicAny::DynStruct::_narrow (dynany);
cout &lt;&lt; &quot;This is a struct with &quot; 
     &lt;&lt; dynstruct-&gt;component_count () 
     &lt;&lt; &quot; members:\n&quot;;
do {
  CORBA::String_var name =
    dynstruct-&gt;current_member_name ();
  cout &lt;&lt; &quot;member name: &quot; &lt;&lt; name;
  switch (dynstruct-&gt;current_member_kind ()) {
    case CORBA::tk_long:
    cout &lt;&lt; &quot;, type: long, value: &quot; &lt;&lt; dynstruct-&gt;get_long ();
    break;
    // similar for other type cases
  }
  cout &lt;&lt; '\n';
} while (dynstruct-&gt;next ());
</pre>

<p>The form of the loop above will work for any <b>struct</b> type, regardless of how many members it has or what types they are. The <b>next</b> operation returns false once all members have been accessed. Note that <b>current_member_name</b> and <b>current_member_kind</b> are <b>DynStruct</b> operations, whereas <b>component_count</b>, <b>get_long</b>, and <b>next</b> are operations on the base <b>DynAny</b> interface. A similar iterative approach can be accomplished using the <b>DynAny</b> interface, but it can provide only values and not member names.</p> 
<p>Alternatively, by calling the <b>DynStruct::get_members</b> method, you can use the batch approach to obtain a sequence of name/value pairs representing all <b>struct</b> members. This method returns a <b>NameValuePairSeq</b>, which is a sequence of the following structure:</p>

<pre>
// IDL
module DynAny {
  typedef string FieldName;
  struct NameValuePair {
    FieldName id;
    any value;
  };
  ...</b></p>
};
</pre>

<p>Using this function, you can write a loop similar to the one in the example above as follows:</p>

<pre>
DynamicAny::DynStruct_var dynstruct = 
  DynamicAny::DynStruct::_narrow (dynany);
NameValuePairSeq_var nvseq = dynstruct-&gt;get_members ();
const CORBA::ULong count = nvseq-&gt;length ();
cout &lt;&lt; &quot;This is a struct with &quot; 
     &lt;&lt; count 
     &lt;&lt; &quot; members:\n&quot;;
for (CORBA::ULong i = 0; i &lt; count; ++i) {
  cout &lt;&lt; &quot;member name: &quot; &lt;&lt; nvseq[i].id;
  switch (nvseq[i].value.kind ()) {
    case CORBA::tk_long:
    {
      CORBA::Long val;
      nvseq[i].value &gt;&gt;= val;
      cout &lt;&lt; &quot;, type: long, value: &quot; &lt;&lt; val;
    }
    break;
    // similar for other type cases
  }
  cout &lt;&lt; '\n';
}
</pre>

<p>As you can see, the batch approach and the accessor approach are quite similar to each other.</p>

<H3><FONT COLOR="#000080">Creating Dynamic Any Values</FONT></H3>

<p>You can also use the Dynamic Any to create or modify values, using either the modifier functions for basic types as provided by the base <b>DynAny</b> interface, or by using specialized modifier functions provided by derived interfaces, such as <b>DynStruct</b>. For example, to set each of the basic values in a <b>DynAny</b> holding a <b>Stock::Info</b> <b>struct</b> value, you can use the <b>insert_long</b> operation as shown below.</p> 

<pre>
dynany-&gt;insert_long (12.40); // set the stock's high value
dynany-&gt;next ();
dynany-&gt;insert_long (10.80); // set the stock's low value
dynany-&gt;next ();
dynany-&gt;insert_long (11.20); // set the stock's current value
</pre>

<p>Naturally, all the iterative and recursive capabilities described above for examining values in a Dynamic Any can be applied to modify its values as well.</p>

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<p>In this column, we introduced the Dynamic Any, which is useful for creating and manipulating values of constructed IDL types in Dynamic CORBA programs. We scratched the surface by focusing on the <b>DynAny</b> and <b>DynStruct</b> interfaces. However, CORBA specifies a specialized Dynamic Any interface derived from <b>DynAny</b> for each different type, such as <b>DynEnum</b>, <b>DynUnion</b>, <b>DynSequence</b>, and <b>DynArray</b>. Each specialized Dynamic Any interface has its own way to deal with values of its particular type. Rather than try to cover all of these interfaces in this column, we suggest downloading the freely available Dynamic Any chapter from the book <i>Advanced CORBA Programming with C++</i> <a href="#2">[2]</a> from &lt;www.triodia.com/staff/michi/advanced_corba/chapter_17.pdf&gt;, since it provides full and detailed coverage of the entire <b>DynAny</b> interface hierarchy.</p>
<p>Our next column will focus on the DSI (Dynamic Skeleton Interface), which is the server-side counterpart to the DII. The DSI allows you to write server applications using servants that dynamically determine the interface definitions of the objects they're incarnating. If you have comments, questions, or suggestions regarding Dynamic CORBA or our column, please let us know at <b>mailto:object_connect@cs.wustl.edu</b>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Steve Vinoski and Douglas C. Schmidt, &quot;Dynamic CORBA: Part 1, The Dynamic Invocation Interface,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, July 2002. &lt;www.cuj.com/experts/2007/vinoski.htm&gt;.</p>
<p><a name="2"></a>[2] Michi Henning and Steve Vinoski, <i>Advanced CORBA Programming with C++</i> (Addison-Wesley, 1999).</p>

<p><i><B>Steve Vinoski</B> is vice president of Platform Technologies and chief architect for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of </i>Advanced CORBA Programming with C++<i>, published in January 1999 by Addison Wesley Longman. Steve also represents IONA in the W3C (World Wide Web Consortium) Web Services Architecture Working Group.</i></p> 
<p><i><B>Doug Schmidt</B> is an associate professor at the University of California, Irvine. His research focuses on patterns, optimization principles, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded system interconnects.  He is the lead author of the books </i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects<i>, published in 2000 by Wiley and Sons, and </i>C++ Network Programming: Mastering Complexity with ACE and Patterns<i>, published in 2002 by Addison-Wesley. He can be contacted at <b>schmidt@uci.edu</b>.</i></p>

</body>

</html>
