<HTML><HEAD>
<TITLE>September 2002 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The BtreeIndex class</A></h4>

<pre>
namespace Util {

//
//
BtreeIndex --
//
template&lt;typename Key,
         typename Compare = std::less&lt;Key&gt;,
         typename KeyTraits = XDR_Traits&lt;Key&gt;,
         size_t PageSize = 4096&gt;
class BtreeIndex {
public:
    // public types
    class Iterator;
    class StreamposProxy;

    typedef Key                            key_type;
    typedef std::pair&lt;const Key, size_t&gt; value_type;
    typedef Compare                        key_compare;
    typedef Iterator                    iterator;
    typedef size_t                        size_type;
    typedef ptrdiff_t                    difference_type;

    enum DeleteStrategy { None, Compact, Shuffle };
    enum UpdateStrategy { Unsafe, MostlySafe, Safe };
    
    class StreamposProxy;
    class Iterator;
 

    // construct / destroy
    explicit BtreeIndex(Compare comp = Compare());
    explicit BtreeIndex(const std::string&amp; name, 
        std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out,
        Compare comp = Compare()); 
    ~BtreeIndex();

    // open/close/test state
    bool            is_open();
    void            open(const std::string&amp; name, 
                        std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out);
    void            close();
    void            flush();
    operator void*() const; 
    bool operator!() const;

    // iterators
    iterator        begin();
    iterator        end();
 
    // capacity
    bool            empty();
    size_type        size();
 
    // modifiers
    iterator        insert(const value_type&amp; x);
    iterator        insert(const Key&amp; k);
    template&lt;typename InputIterator&gt;
        void        insert(InputIterator first, InputIterator last);
 
    void            erase(iterator pos);
    size_type        erase(const Key&amp; x);
    void            erase(iterator first, iterator last);
    void            clear();
 
    // observers
    key_compare        key_comp() const;
    size_type        page_size() const;
    XDR_Stream&amp;        xdrstream();
         // operations
    iterator        find(const Key&amp; x);
    size_type        count(const Key&amp; x);
 
    iterator        lower_bound(const Key&amp; x);
    iterator        upper_bound(const Key&amp; x);
    std::pair&lt;iterator, iterator&gt;
                    equal_range(const Key&amp; x);
 
    // utilities
    void            reindex();
    DeleteStrategy    set_delete_strategy(DeleteStrategy strategy);
    UpdateStrategy    set_update_strategy(UpdateStrategy strategy);
    int                set_cache_size(int size);
 
private:
    // private types
    class XIODataStreambuf;
    class XInDataBuf;
    class XOutDataBuf;
    class Page;
    class RootPage;
    class PageCache;
 
        // friends
    friend class Iterator;
    friend class StreamposProxy;
    friend class Page;
    friend class RootPage;

    // data
    Compare                    _comp;
    typename KeyTraits::xio_type _xstream; 
    RootPage*                _root;
    PageCache                _pageCache;
    DeleteStrategy            _dStrategy;
    UpdateStrategy            _uStrategy;
 
    // Iterator utility functions - used by friends
    std::pair&lt;const Key, StreamposProxy&gt;
                    get_value(size_t page, size_t slot);
    void            prev_iter(Iterator&amp; it);
    void            next_iter(Iterator&amp; it);
 
    // StreamposProxy utility functions - used by friends
    void            update_link(size_t page, size_t offset, size_t link);
 
    // BtreeIndex utility functions
    Page*            get_page(size_t pageId);
    Page*            get_free_page();
    void            add_free_page(Page* p);
    iterator        lower_bound(Page* p, int depth, const Key&amp; k);
    iterator        upper_bound(Page* p, int depth, const Key&amp; k);
    iterator        insert(Page*, int depth, const value_type&amp; x);
    std::pair&lt;bool,bool&gt; erase(Page* p, int depth, const Key&amp; k, iterator pos);
 
    void            flush(UpdateStrategy s);
}; //&gt; BtreeIndex 


//
// BtreeIndex inline function definitions
//
template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline bool
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::is_open()
{
return _xstream.is_open(); }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline 
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::operator void*() const
{
    if (_xstream.fail()) return null;
    return const_cast&lt;BtreeIndex*&gt;(this);
}


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline bool
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::operator!() const
{ return _xstream.fail(); } 


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline bool
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::empty()
{ return size() == 0; }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline size_t
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::size()
{ return _root-&gt;total_keys(); }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline typename BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::Iterator
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::insert(const Key&amp; key)
{ return insert(value_type(key, 0)); }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline Compare
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::key_comp() const
{ return _comp; }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline size_t
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::page_size() const
{ return PageSize; }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline XDR_Stream&amp;
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::xdrstream()
{
return _xstream; }


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline typename BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::DeleteStrategy
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::set_delete_strategy(DeleteStrategy s)
{
    DeleteStrategy t = _dStrategy;
    _dStrategy = s;
    return t;
}

template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline typename BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::UpdateStrategy
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::set_update_strategy(UpdateStrategy s)
{ 
    UpdateStrategy t = _uStrategy;
    _uStrategy = s;
    return t;
}


template&lt;typename Key, typename Compare, typename KeyTraits, size_t PageSize&gt;
inline int
BtreeIndex&lt;Key,Compare,KeyTraits,PageSize&gt;::set_cache_size(int size)
{ 
    int t = _pageCache.max_size();
    _pageCache.max_size(size);
    return t;
}


} //&gt; namespace
</pre>
</body>
</html>
