<HTML>   
     <HEAD>
<TITLE>September 2002 C++ .NET Solutions/C++ in .NET</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../toccnet.htm"></A><FONT COLOR="#FF0000">   C++ .NET Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ in .NET</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Rex Jaeschke</FONT></H3>

<BLOCKQUOTE>
<p>Need a jumpstart on Managed C++? Here it is in the proverbial nutshell.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2002 Rex Jaeschke.</p>
<p>The .NET Framework includes a specification for a virtual machine instruction set, metadata, and an extensive class library. Compilers targeting this framework process source code that uses this class library. The output from each compiler is in the form of metadata, which contains the MSIL (Microsoft Intermediate Language) instructions needed to perform the task defined by the code and descriptive information about those instructions. Such output is known as &#147;managed code&#148; and is generated when the <B>/clr</B> compiler option is used. (Unmanaged code, which is compiled to the machine language of a physical processor, occurs when the <B>/clr</B> compiler option is omitted.) The metadata can be used by a variety of tools, such as browsers, profilers, and debuggers, as well as other compilers. Finally, the generated code is executed by the CLR (Common Language Runtime). In the simplest case, the intermediate code can be interpreted. However, a more efficient approach is to compile this code to native machine code, either when the application is installed or each time it is run.</p>
<p>The compilation model for Managed C++ code is different from that used by earlier Visual C++ versions. Historically, each source file was compiled to an <B>.obj</B> file, with all such files being combined into an <B>.exe</B> file by the linker. Now, there is only one step, &#147;building,&#148; rather than the separate compilation and link.</p>
<p>The output from a single build is called an &#147;assembly,&#148; which has the form of an <B>.exe</B> or a <B>.dll</B> file. Typically, an executable application program is made up of one <B>.exe</B> assembly, zero or more application <B>.dll</B> assemblies, and the core library assembly <B>mscorlib.dll</B>.</p>
<p>Most existing C++ source can be compiled to managed code without any change in meaning simply by using the <B>/clr</B> compiler option. However, certain constructs still generate unmanaged code, resulting in an application that is part managed and part unmanaged. Simply compiling in managed mode does not magically cause the code to immediately take full advantage of the .NET Framework. It does, however, make available the facilities to do so if the programmer wishes to make the necessary changes or additions.</p>
<p>When any Managed C++ project template is used, the &#147;Use Managed Extensions&#148; property in the project&#146;s &#147;General&#148; properties page is activated; the compiler option <B>/clr</B> is selected, so managed code is generated as much as possible. A consequence of selecting <B>/clr</B> is that is also selects multithreaded mode. A managed application runs on the main thread while the garbage collector runs on a lower-priority background thread; all managed applications are multithreaded.</p>

<H3><FONT COLOR="#000080">A Simple Example</FONT></H3>

<p>Here&#146;s a simple application that consists of two separate source files, <B>main.cpp</B> and <B>f.cpp</B>, each of which is built into a separate assembly. The <B>main</B> function identifies itself and then calls function <B>f</B>, which also identifies itself.</p>

<pre>
// main.cpp

#using &lt;mscorlib.dll&gt;
#using &lt;f.dll&gt;
using namespace System;

int main()
{
  Console::Write(S"Hello from main\n");
  Lib::f();
}
</pre>

<p>Every source file for which managed code should be generated must contain the <B>#using</B> directive shown above. Directives such as this allow a program to directly import metadata from another assembly. Here, you import the metadata from the core class library <B>mscorlib</B> and the assembly <B>f</B> (which will be created shortly). This mechanism removes the need for headers.</p>
<p>.NET provides a complete I/O library. For example, <B>System::Write</B> writes to the standard output device. <B>Write</B> (and its sibling <B>WriteLine</B>) support format specifiers that provide behavior equivalent to Standard C++&#146;s manipulators. It also supports currency formatting and, of course, internationalization.</p>
<p>Managed C++ introduces a new form of string, having a prefix <B>S</B> and type <B>String</B>. Note carefully that objects of this type are immutable; their contents cannot be changed. Identically spelled <B>S</B>-type literals share the same memory.</p>

<pre>
// f.cpp

#using &lt;mscorlib.dll&gt;
using namespace System;

public __gc class Lib
{
public:
  static void f()
  {
    Console::WriteLine(S"Hello from f");
  }
};
</pre>

<p>Types are exported from an assembly by declaring them public. By defining <B>f</B> inside a public type such as <B>Lib</B>, that function can be called from another assembly. Since functions cannot be exported directly, any functions you wish to write in C++ and make publicly available to other .NET-compliant languages will have to be encapsulated inside a public class or struct. The <B>__gc</B> modifier declares <B>Lib</B> to be a managed type. (Unless this modifier is present, you cannot make the class public.)</p>
<p>For <B>main.cpp</B> to compile, the assembly <B>f.dll</B> must exist and be accessible to the compiler. To achieve this, you tell the compiler where to look for assemblies that are imported, via the project properties page for &#147;C/C++&#148; and the property &#147;Resolve <B>#using</B> References.&#148;</p>

<H3><FONT COLOR="#000080">The Type System</FONT></H3>

<p>.NET supports two type categories: value types and reference types. (Note carefully that the term &#147;reference&#148; as used here is unrelated to C++&#146;s notion of a reference variable.)</p>
<p>The value types include the built-in types, such as <B>int</B> and <B>double</B>. The set of reference types includes all user-defined class types having the <B>__gc</B> modifier. A variable of a reference type can only be created on the managed heap. (The managed and unmanaged heaps are separate. The former is subject to automatic garbage collection while the latter is not. However, both are accessed via the <B>new</B> operator.) Such variables cannot have automatic or static storage duration.</p>
<p>Ordinarily, the value of an uninitialized automatic pointer is undefined. However, when that pointer is to a managed type, the compiler and runtime combine to make sure it is initialized to zero, as an arbitrary pointer value could play havoc in a garbage-collected heap environment.</p>
<p>Note that managed pointers cannot be dereferenced. As a result, managed objects cannot be passed or returned by value, they cannot be copied using assignment (instead a <B>Clone</B> function must be called), and you cannot take their size using <B>sizeof</B>. As such, a managed class has no need for a copy constructor or an assignment operator.</p>
<p>In the .NET Framework, every managed class type is (ultimately) derived from class <B>Object</B>.</p>
<p>Occasionally, it is useful to be able to deal with value-type values in a reference-type context. To achieve this, the value of any value-type expression can be converted implicitly to type <B>Object</B>. This process is called &#147;boxing.&#148; The resulting <B>Object</B> expression can also be converted back again explicitly in a process known as &#147;unboxing.&#148;</p>
<p>The Standard C++ built-in types are mapped directly onto .NET Framework types that are implemented as lightweight classes (which are allocated on the stack rather than the managed heap), so they are more efficient and are suitable for use as value types. For example, <B>int</B> is a synonym for <B>System::Int32</B>, so the members of that class are available to all <B>int</B> variables.</p>

<H3><FONT COLOR="#000080">Garbage Collection</FONT></H3>
<p>You can allocate any number of objects on the managed heap using <B>new</B>, yet you don&#146;t have to worry about explicitly freeing them when you are done with them. At run time, the execution environment runs a garbage collector to gather up discarded memory and make it part of the managed heap again.</p>
<p>Conceptually, it is useful to think that each object allocated on the managed heap is associated with a reference count, which simply keeps track of the number of pointer or reference variables that currently refer to that object. When an object&#146;s reference count is decremented to zero, that object becomes a candidate for garbage collection.</p>

<H3><FONT COLOR="#000080">Managed Arrays</FONT></H3>

<p>Arrays in Standard C++ are fixed size; their size is set at compile time. However, the .NET platform (and hence Managed C++) supports managed arrays, whose size can seemingly vary at run time. For example:</p>

<pre>
int totals __gc[];
</pre>

<p>I have declared a reference to a one-dimensional managed array of arbitrary size. And even though <B>totals</B> is an automatic variable and has no explicit initializer, its initial value is set to null. As such, it does not currently refer to an array. Based on its type, this reference can only be made to point to a one-dimensional managed array of <B>int</B> or have the value null. No dimension size is specified, nor is one permitted.</p>
<p>Let&#146;s initialize <B>totals</B> to point to a managed array of <B>4 int</B>, which, like all managed objects, is allocated on the managed heap:</p>

<pre>
totals = new int __gc[4];
totals[0] = 5;
totals[2] = 3;
</pre>

<p>You access array elements in the usual way. By default, elements take on a value of zero, false, null, etc., as appropriate for their type. Array bounds checking is done at run time.</p>
<p>All managed arrays are derived implicitly from class <B>Array</B>, and all managed arrays have a read-only property called <B>Length</B>, which indicates their size. (A property is a class member that is used like a field, yet it is implemented as a function. It is used to get and/or set the value of some logical property for an object.)</p>
<p>Note carefully that a managed array subscript expression cannot be rewritten as a pointer arithmetic expression.</p>
<p>By making <B>totals</B> refer to a different managed array of <B>int</B> whose size is smaller or larger, you can give the illusion that the size of the array <B>totals</B> has changed. But, of course, <B>totals</B> is not really an array.</p>

<pre>
totals = new int __gc[8];
</pre>

<p>Since <B>totals</B> was the only reference to the previously allocated managed array of <B>4 int</B>, once <B>totals</B> has been made to refer to some other managed array, the original array can be garbage collected.</p>
<p>Managed C++ supports true multidimensional arrays, unlike the arrays of arrays used by unmanaged C++. (There is no such thing as a managed array of array.) For example:</p>

<pre>
double values __gc[,];
values = new double __gc[5,7];
values = new double __gc[20,17];
values = 0;
</pre>

<p>Unfortunately, Managed C++ does not permit multidimensional arrays to have initializer lists, so you must initialize each element using assignment.</p>
<p>Since copying reference variables only does a shallow copy, to make a deep copy of an array, you must use the function <B>Array::Copy</B>.</p>
<p>Since a function can return a single value, and an array reference is such a value, a function can return a reference to a managed array. For example, the following function returns a reference to a managed array of <B>int</B>:</p>

<pre>
int GetNewArray
  (int count, int initValue)  __gc[];
</pre>

<H3><FONT COLOR="#000080">Classes</FONT></H3>
<H4><FONT COLOR="#000080">Properties</FONT></H4>

<p>As I mentioned earlier, a managed class can have read and/or write properties. For example:</p>

<pre>
public __gc class Point
{
  int xor;
  int yor;
public:
  __property int get_X() { return xor; }
  __property void set_X(int x) { xor = x; }
  __property int get_Y() { return yor; }
  __property void set_Y(int y) { yor = y; }

  Point()
  {
    X = 0; // use property [get_]X
  Y = 0; // use property [get_]Y
  }
};
</pre>

<p>Properties can be accessed like fields from languages that support them or by using functional notation from languages that don&#146;t.</p>

<H4><FONT COLOR="#000080">Static Members</FONT></H4>

<p>Static members in managed classes need not be defined (and initialized) separately from their class.</p>
<p>A managed class can have static properties. It can also have a static constructor. If present, this constructor is executed once, before any instances of this type are created, and before any static members of this type are accessed.</p>

<H4><FONT COLOR="#000080">Destruction</FONT></H4>

<p>Unlike the destructor for an unmanaged class type, the destructor for a managed class type is automatically called by the system during garbage collection, which happens asynchronously. As such, a different approach to programming is required if object cleanup needs to occur at well-defined times.</p>

<H4><FONT COLOR="#000080">Abstract Classes</FONT></H4>

<p>To inhibit explicit instantiation of an unmanaged class type, at least one of its member functions must be declared as pure virtual. You achieve the same effect with a managed class type by declaring it abstract, as follows:</p>

<pre>
public __gc __abstract class Vehicle
{
  // ...
};
</pre>

<p>An abstract class need not have any pure virtual functions.</p>

<H4><FONT COLOR="#000080">Sealed Classes</FONT></H4>

<p>A class that is complete, either because it contains everything it needs or it inherits what it needs, can be defined such that it cannot be used as a base class. This is achieved by making that class sealed, as follows:</p>

<pre>
public __gc __sealed class String
{
  // ...
};
</pre>

<H4><FONT COLOR="#000080">Inheritance</FONT></H4>

<p>As stated earlier, all arrays are derived from <B>System::Array</B>. Likewise, all managed enumerated types are derived from <B>System::Enum</B>.</p>
<p>.NET supports single inheritance only.</p>

<H4><FONT COLOR="#000080">Interfaces</FONT></H4>

<p>.NET provides a way for multiple classes to implement a common set of capabilities through an &#147;interface.&#148; An interface is a set of function declarations. Note that the functions are only declared, not defined; an interface defines a type consisting of abstract functions, where those functions are implemented by client classes as they see fit. An interface allows unrelated classes to implement the same facilities with the same names and types without requiring those classes to share a common base class. For example:</p>

<pre>
// implicitly __abstract
// implicitly derived from System::Object
public __gc __interface ICollection
{
  // implicitly public, pure virtual
  void Put(Object *o); 
  // implicitly public, pure virtual
  Object *Get(); 
};
</pre>

<p>A class implements an interface using the same notation as it does for deriving from a base class; for example:</p>

<pre>
public __gc class List : public ICollection
{
public:
  void Put(Object *o)
  {
    // ...
  }
  // ...
};
</pre>

<p>A class can implement more than one interface, in which case, there is a comma-separated list of interfaces, whose order is arbitrary.</p>

<H4><FONT COLOR="#000080">Operator Overloading</FONT></H4>

<p>While operators can be overloaded for a managed class, there are some differences from Standard C++:</p>

<pre>
public __gc class Point
{
public:
  static bool op_Equality(Point&amp; p1, Point&amp; p2)
  {
    // ...
  }
};

Point&amp; pa = *new Point(1, 2);
Point&amp; pb = *new Point(1, 2);

if (pa == pb) ...
</pre>

<p>An operator overload function must be static, so all arguments must be declared explicitly.</p>
<p>An operator overload function must be <B>static</B>, so all arguments must be passed by address. Unfortunately, as a result, they can only be called on reference types using function notation. For example:</p>

<pre>
bool result = Point::op_Equality(p1, p2);
// can't use p1 == p2
</pre>

<H4><FONT COLOR="#000080">Limitations</FONT></H4>

<p>Managed class types have the following limitations:</p>

<UL><LI>   They cannot contain members of managed pointer type.</LI>
<LI>   Neither the <B>sizeof</B> operator nor the <B>offsetof</B> macro can be applied to a managed type or instance thereof.</LI>
<LI>   Member functions cannot have default arguments.</LI>
<LI>   Member functions cannot have a <B>const</B> or <B>volatile</B> qualifier.</LI>
<LI>   The destructor is implicitly virtual.</LI>
<LI>   They cannot have friend classes, functions, or interfaces.</LI>
<LI>   They cannot be used as the base class for an unmanaged class.</LI>
<LI>   They cannot be derived from an unmanaged base class.</LI>
<LI>   They cannot inherit privately from a class.</LI>
<LI>   They cannot inherit from more than one managed class.</LI>
<LI>   They cannot contain a <B>using</B> declaration.</LI></UL>

<H3><FONT COLOR="#000080">Exception Handling</FONT></H3>
<p>.NET defines its own set of exception classes. However, a try block can have catch clauses for both managed and unmanaged exceptions.</p>
<p>The <B>__finally</B> keyword provided as part of structured exception handling some years ago is very useful for handling managed exceptions. Consider the case in which a try block has several catch blocks followed by a <B>__finally</B> block. When the try block completes normally, or any of its catch blocks completes, the associated <B>__finally</B> block is executed. This is especially useful since the timing of the execution of destructors of managed types is unspecified. A <B>__finally</B> block allows cleanup to be synchronized.</p>

<H3><FONT COLOR="#000080">Delegates</FONT></H3>

<p>A delegate is an object that encapsulates one or more functions, and for instance functions, it also associates each one with a particular instance. Once a delegate has been made to encapsulate one or more functions, you can invoke those functions via that delegate without knowing which functions have been encapsulated. Although C++ supports a delegate-like facility via function pointers, delegates provide more capability, and they are supported across .NET languages.</p>
<p>A common use of delegates is in the creation of event-handler lists. Each function that wants to be called when some event occurs adds itself to a delegate list that is used when that event occurs. Functions can also be removed from delegates.</p>

<pre>
#using &lt;mscorlib.dll&gt;
using namespace System;

__delegate void Del(int value);

public __gc class A
{
public:
   static void f1(int i) { /* ... */ }
};

public __gc class B
{
public:
  void f2(int i) { /* ... */ }
};

int main()
{
/*1*/ Del *d = new Del(0, &amp;A::f1);
      d(3);

/*2*/ B *b = new B;
      d += new Del(b, &amp;B::f2);
      d(5);

/*3*/ d -= new Del(0, &amp;A::f1);
      d(6);
}
</pre>

<p>In case 1, delegate <B>d</B> is made to point to the static function <B>A::f1</B>, which is then called indirectly with an argument of <B>3</B>. In case 2, the instance function <B>B::f2</B> is added to <B>d</B>&#146;s delegate list, and then both functions are called indirectly with an argument of <B>5</B>, in the order in which they were added to the list. Finally, in case 3, the static function <B>A::f1</B> is removed from the delegate list leaving <B>B::f2</B> only, which is then called indirectly with an argument of <B>6</B>. </p>

<H3><FONT COLOR="#000080">Lightweight Classes</FONT></H3>

<p>A value class type is a value type; when you declare a variable of some value class type, memory is allocated for all the fields of that type at that time &#151; no pointer is involved. A value class variable can contain instance constructors, constants, fields, functions, properties, operators, and nested types. However, it cannot contain events or static constructors. Value classes are particularly useful for reasonably small data structures that have value semantics. Examples include points in a coordinate system and complex numbers.</p>

<pre>
public __value class Complex
{
  // ...
};
</pre>

<H3><FONT COLOR="#000080">The Class Library</FONT></H3>
<p>The .NET library is extensive. There are classes for threading, serialization, sockets, numerous collection types, database access, SQL, graphics, GUI, Web, and XML parsing, to name a few. And, of course, there is full support for internationalization.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>.NET is very much a cornerstone of Microsoft&#146;s strategy, so you can reasonably assume it&#146;s here to stay. It&#146;s certainly permeating their product line, and it&#146;s no longer a proprietary platform. In December 2001, ECMA adopted an international standard on a subset of .NET, called CLI (Common Language Infrastructure). (It also adopted a standard for C#.) Co-sponsored by HP, Intel, and Microsoft, this standard was developed over a year, with participation from numerous other companies, including Fujitsu and IBM. That standard is now being considered for adoption as an ISO and ANSI standard.</p>
<p>Ximian, a software development company, has announced its intent to implement the complete .NET environment plus C# compiler for Linux. For more information, read about their &#147;Mono&#148; project at &lt;www.ximian.com&gt;.</p>
<p>For more information on Managed C++, see the Word file <B>managedextensionsspec.doc</B> in the directory Vc7 of the Visual Studio .NET installation directory. See also <I>Essential Guide to Managed Extensions for C++</I> by Challa and Laksberg (Apress, 2002) and <I>Developing Applications with Visual Studio.NET</I> by Grimes (Addison-Wesley, 2002).</p>

<p><i><B>Rex Jaeschke</B> is an independent consultant, and developer and leader of seminars, specializing in programming languages and environments. He serves as editor of the C# Standard. Rex can be reached at <b>rex@RexJaeschke.com</b>.</i></p>

</blockquote></body></html>
