<HTML>   
     <HEAD>
<TITLE>September 2002 C++ .NET Solutions/Building .NET Components with Managed C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../toccnet.htm"></A><FONT COLOR="#FF0000">   C++ .NET Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Building .NET Components with Managed C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Nick Hodapp</FONT></H3>

<BLOCKQUOTE>
<p>A guide to building .NET components, with a useful example and some insider tips.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Given the high level of attention focused on C# (brand new) and Visual Basic .NET (overhauled) by Microsoft and the media, C++ (proven) is often overlooked as a &#147;real&#148; language for .NET. Each of these languages has its own unique strengths and weaknesses, and developers need to understand these when selecting the best tool for the job. For C++ developers, Visual C++ with Managed Extensions offers a compelling route to begin leveraging the .NET Framework.</p>
<p>Creating .NET components in Visual C++ is simple. You can start clean with a new project (select &#147;Managed C++ Class Library&#148; in the New Project dialog in Visual Studio) or decide to migrate or wrap existing code. If you choose to take existing code and enable it for .NET, you&#146;ll have to manually update your project settings to specify <B>/CLR</B> for compilation of one or more modules. <B>/CLR</B> is a new compiler switch that tells the compiler to generate MSIL (Microsoft Intermediate Language) rather than x86 instructions. It is turned off by default, so your existing projects will continue to build as expected. There are a number of restrictions and behaviors to be aware of when using <B>/CLR</B> (see the Visual C++ .NET documentation <a href="#1">[1]</a>).</p>
<p>Once an application is compiled to MSIL, it can begin consuming .NET Framework provided types, or any other .NET managed types. And there are a lot of types available for consumption &#151; roughly 7,000 classes across the hundreds of namespaces in the .NET Framework alone. C++ developers currently using MFC and ATL should take note: the .NET Framework is the place to find ready-made application infrastructure, and it is <I>all</I> consumable and extendable from C++. Combined with powerful features like templates and high-performance native-code interop, C++ developers have a lot of options and flexibility not available in C# or VB.</p>
<p>Using the new compiler directive <B>#using</B> to consume preexisting managed types is easy: specify a .NET DLL assembly containing the desired types, and begin writing code using those types. Think of <B>#using</B> as similar to <B>#import</B> or <B>#include</B> &#151; it makes visible to the compiler all the information necessary to write C++ code that references types and methods described elsewhere. Unlike <B>#import</B>, <B>#using</B> doesn&#146;t generate a header file behind the scenes &#151; instead the compiler reads the assembly&#146;s metadata and populates its internal data structures directly:</p>

<pre>
// use types in the .NET Framework's
// System::Windows::Forms namespace
#using &lt;system.windows.forms.dll&gt;
</pre>

<p>While the compiler will generate managed code when <B>/CLR</B> is specified, it does nothing to magically transform existing C++ data types into CLR (Common Language Runtime) managed data types enabled with features like automatic garbage collection. To create types whose lifetimes are managed by the GC (garbage collector) and that are consumable by other .NET languages, the developer must employ the new Managed Extension keywords. For example, to create a managed class that is exported from the compiled assembly for public consumption, decorate the class definition with <B>public __gc</B>:</p>

<pre>
public __gc class MyClass
{
};
</pre>

<p>GC classes must be allocated with <B>new</B>, implying they cannot be instantiated as stack-based, or automatic, variables. Once allocated, there is no need to call <B>delete</B>; the GC will free the object at some point in the future when it is no longer being referenced by the application:</p>

<pre>
// no need to ever delete this managed object
MyClass* mc = new MyClass();
</pre>

<p>In addition to the obvious disparity in lifetime management schemes, GC classes and traditional C++ classes have several additional incongruities. The reason for this is that the .NET object model is quite different from the C++ object model. In practice, it isn&#146;t hard to obey the additional rules, many of which are concisely defined in the Microsoft documentation <a href="#2">[2]</a> for <B>__gc</B>.</p>
<p>Perhaps the most obvious constraint on <B>__gc</B> classes is that they cannot multiply inherit from other classes. (Many would ask &#147;Is this really a bad thing?&#148;) They may singly inherit from another <B>__gc</B> class, and they may multiply inherit from interfaces. Another constraint states that <B>__gc</B> classes cannot declare friend classes or functions. These and others are restrictions of the .NET runtime, not of C++. There is simply no mapping of C++ multiple inheritance, or of friend classes, to the CLR. However, there are several CLR features that are not available in traditional C++ that are exposed through the Managed Extensions.</p>
<p>A good example of a CLR feature exposed in Managed C++ is object properties. You may understand properties because COM has them too; syntactically, properties behave like fields, but behind the scenes properties are implemented as methods on an object. Because C++ doesn&#146;t have native support for COM properties, a naming convention (<B>get_</B>, <B>set_</B>) is generally used to implement IDL-defined properties as methods on C++ classes.</p>
<p>Managed Extensions for C++ introduces a new <B>__property</B> keyword that marks a method as a .NET property. (A naming convention still exists to &#147;get&#148; and &#147;set&#148; methods for a property).</p>

<pre>
public __gc class MyClass
{
public:

    __property int get_Value(void);
    __property void set_Value(int);
};
</pre>

<p>I mentioned that friend classes and functions are incompatible with .NET objects. While this seems quite an insult, .NET does have a similar notion of &#147;internal access.&#148; Portions of a C++ class that are marked <B>private public:</B> are made accessible to any type also defined in the same assembly, but are not accessible by any code that consumes the assembly.</p>
<p>.NET enables the concept of &#147;declarative programming&#148; with attributes. Attributes are applied to code constructs to specify special behavior for that construct or denote additional information associated with that construct. They serve much the same purpose as IDL attributes for COM programming. The .NET Framework provides many predefined attributes, but because attributes are simply classes, you can create your own.</p>
<p>The .NET Framework provides classes and attributes that make it very easy to create a managed component in C++ that is consumable by other managed languages and also that has tight integration with RAD programming tools like Visual Studio .NET. Just as you would have created ActiveX controls before that were consumable by Visual Basic, C++ developers can create .NET controls that are consumable by any number of languages. To demonstrate this, let&#146;s examine the parts of a sample component, WindowSnapper (available for download at &lt;www.cuj.com/code&gt;.</p>
<p>WindowSnapper is a .NET component written in C++. Yes, it could have been written in VB.NET or C# and as such could have been largely implemented using .NET Framework APIs. (A single P/Invoke call to the Windows API <B>BitBlt()</B> would be necessary.) But this is an example to demonstrate technique. One of the primary strengths of Managed C++ is that it is very easy to keep using the unmanaged programming techniques and APIs, which you already know and understand, for writing .NET components. In this example, I rely on plain-Jane Windows GDI calls &#151; something I&#146;m very familiar with.</p>
<p>WindowSnapper enables a developer to programmatically obtain screenshots. The component is a <B>public __gc</B> class that derives from <B>System::ComponentServices::Component</B>. This grants the type a default implementation of the <B>IComponent</B> managed interface, enabling it to talk to containers like the Visual Studio .NET toolbox.</p>
<p>As long as the component is capable of sitting in the Visual Studio toolbox <a href="#3">[3]</a>, it may as well have an icon associated with it.</p>
<p>An attribute named <B>ToolboxBitmapAttribute</B> is used on the class to specify the particular bitmap resource associated with the component. In this example, the attribute is initialized with two parameters (there are other overloads available). The first parameter specifies a type that lives in the same assembly as the resource; the second parameter specifies the name of the resource. Note that the specified type lives in a particular namespace within the assembly, and the fully qualified name of the resource must mirror this namespace hierarchy. For example, if the type is in the <B>NickHod.Drawing</B> namespace, the resource&#146;s textual name is going to be <B>NickHod.Drawing.WindowSnapper.bmp</B>.</p>
<p>When you look at the sample code (available at &lt;www.cuj.com/code&gt;), you&#146;ll see the attribute being initialized with <B>__typeof(ThisAssembly)</B>. <B>__typeof</B> is a new Managed Extensions keyword that returns a <B>System::Type</B> reference for the specified type. Ideally you would simply use <B>__typeof(WindowSnapper)</B> here to denote that the resource lives in the same assembly and namespace as the component. Unfortunately, a known bug prevents <B>__typeof</B> from evaluating types that haven&#146;t yet been defined during compilation. I use a workaround to define a private class <B>ThisAssembly</B> ahead of the component and specify it instead.</p>
<p>The second parameter denotes the name of the resource itself. There are two types of managed resources. Manifest resources are simply files that are bound to the assembly with a strong name. .NET <B>.resx</B> files are special XML files compiled by the .NET <B>resgen.exe</B> utility and bound to the assembly. <B>ToolboxBitmapAttribute</B> requires the bitmap to be a manifest resource.</p>
<p>Use the <B>/ASSEMBLYRESOURCE</B> compiler switch to bind a manifest resource to the assembly. The resource name will be the same as the filename. In the Visual Studio .NET IDE, this switch can be set in the Project Properties dialog under Linker\Input\Embed Managed Resource File.</p>

<pre>
namespace NickHod
{
namespace Drawing
{
    // work-around for __typeof(), below.
    private __gc class ThisAssembly
    {
    };

    // The bitmap for this component lives in file
// NickHod.Drawing.WindowSnapper.bmp
    // It is bound to the assembly with the compiler switch
// /ASSEMBLYRESOURCE:NickHod.Drawing.WindowSnapper.bmp
    [ToolboxBitmapAttribute(__typeof(ThisAssembly),
        S"WindowSnapper.bmp") ]
    public __gc class WindowSnapper :
        public System::ComponentModel::Component
    {
...
</pre>

<p>WindowSnapper has two managed properties. The first, <B>CurrentSnapshot</B>, is a read-only property that returns the <B>Bitmap</B> object that is the last snapshot taken.</p>

<pre>
[BrowsableAttribute(false)]
__property Bitmap* get_CurrentSnapshot(void);
</pre>

<p>Note the <B>BrowsableAttribute(false)</B> attribute; it provides a hint to designers like Visual Studio that this property shouldn&#146;t be listed in a designer property grid. Remove the attribute temporarily and recompile to see how Visual Studio displays the <B>CurrentSnapshot</B> property in the property grid of the Forms designer.</p>
<p>The second property simply sets and retrieves a Boolean value.</p>
<p>In order for the component to be recognized by the toolbox in Visual Studio .NET, it must reside in the GAC (Global Assembly Cache). The GAC is a repository where assemblies that are shared by multiple applications are registered. To reside in the GAC, the component&#146;s assembly must have a strong name, which is analogous to a GUID in COM.</p>
<p>The <B>sn.exe</B> utility creates a strong-name key file:</p>

<pre>
C:\&gt;sn -k NickHod.Drawing.key

Microsoft (R) .NET Framework Strong Name Utility Version 1.0.3705.0
Copyright (C) Microsoft Corporation 1998-2001. All rights reserved.

Key pair written to NickHod.Drawing.key
</pre>

<p>A global, assembly-level attribute is used to reference the key file and embed the strong name in the assembly. In the <B>AssemblyInfo.cpp</B> module:</p>

<pre>
[assembly:AssemblyKeyFileAttribute("NickHod.Drawing.WindowSnapper.key")];
</pre>

<p>some magic happens when the compiler encounters the <B>AssemblyKeyFileAttribute</B>: the key file is accessed and bound to the assembly.</p>
<p>Now that the assembly has a strong name, it can be registered in the GAC. In a deployment scenario, the installer handles this operation. In a development environment, the <B>gacutil.exe</B> utility is used. In a C++ project, you can use a custom build step (in Project Properties) to register the assembly. The command line to specify for the custom build step looks like this:</p>

<pre>
gacutil /if $(TargetPath)
</pre>

<p>The <B>/if</B> switch specifies that <B>gacutil</B> should overwrite any preexisting occurrences of the assembly in the GAC and is useful if you don&#146;t want to register multiple versions of your assembly while testing.</p>
<p>Also, specify for Additional Dependencies:</p>

<pre>
$(TargetPath)
</pre>

<p>The contents of the GAC can be viewed in the assembly folder found in the Windows directory. To remove an item from the GAC, simply delete the entry in this folder or unregister it with <B>gacutil /u</B>.</p>
<p>The sample project includes a test client in C# demonstrating how WindowSnapper is used.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>Here are some additional tips and tricks to consider when writing .NET components in C++:</p>
<OL><LI>When hard-coding managed strings into your code, use the new <B>S</B> prefix. The compiler will place the string in the assembly&#146;s metadata for more optimal performance. For example:</LI>
<pre>
  String* s = S"Hello, World";
</pre>
<LI>There are about 35 predefined attribute classes that enable different functionality for components (see the documentation <a href="#4">[4]</a> for their capabilities).</LI>
<LI>Experiment with <B>#pragma</B> managed and <B>#pragma</B> unmanaged. These new compiler directives enable you to control on a per-method basis what methods are compiled to MSIL or x86 (only for unmanaged data types).</LI>
<LI>Update your project&#146;s linker settings to generate a managed assembly with a name that corresponds to the namespace of the objects it implements. This convention is followed by the .NET Framework and makes it easier to see what assemblies are yours in the GAC. For example, the sample project assembly is named <B>NickHod.Drawing.dll</B>.</LI></OL>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  &lt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/<br>html/vcrefEECOMCompilation.asp&gt;</p>
<p><a name="2"></a>[2]  &lt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vcmxspec/<br>html/vcManagedExtensionsSpec_4.asp&gt;</p>
<p><a name="3"></a>[3]  To add WindowSnapper to the Visual Studio .NET toolbox, select the &#147;Components&#148; tab of the toolbox and select &#147;Customize Toolbox...&#148;. Select &#147;.NET Framework Components,&#148; and then browse for the <B>WindowSnapper.dll</B> assembly. Selecting OK will place the component on the toolbox, ready to be used in a project.</p>
<p><a name="4"></a>[4] &lt; http://msdn.microsoft.com/library/en-us/cpref/html/<br>frlrfsystemattributeclasshierarchy.asp&gt;</p>

<p><i><B>Nick Hodapp</B> is Microsoft&#146;s product manager for Visual C++ .NET, a developer tool for creating best-in-class applications for Windows and .NET using the C++ language. Previously Nick enjoyed an eight-year career in the Midwest developing Windows-based GIS software for telecommunication and power utilities.</i></p>

<h4><a href="../../../source/2002/csep02/hodapp2.zip"></a></h4>
</blockquote></body></html>
