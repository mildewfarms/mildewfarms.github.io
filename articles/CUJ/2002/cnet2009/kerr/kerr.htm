<HTML>   
     <HEAD>
<TITLE>September 2002 C++ .NET Solutions/Icon Browser: An Exercise in Resource Management</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../toccnet.htm"></A><FONT COLOR="#FF0000">   C++ .NET Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Icon Browser: An Exercise in Resource Management</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kenny Kerr</FONT></H3>

<BLOCKQUOTE>
<p>How to expertly manage resources in managed code.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>The <B>System::Runtime:: InteropServices</B> namespace contains many useful classes, structures, and attributes that you can use to access your legacy libraries and resources. The .NET Framework as a whole also provides many services for migrating existing code and resources to managed code. This article explains how to use these services to extract resources from Win32 resource files, as well as how to write icon resources to <B>.ICO</B> files. It also covers many of the issues surrounding resource management and interoperating with unmanaged code, memory, and binary formats.</p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>Every so often, I find myself needing to extract an icon from an executable or DLL (dynamic-link library), and every time I end up bending over backwards to get this done, especially if the library contains hundreds of icons and I have to sift through all of them until I find the one I want. So I decided to write a little program to make the process of extracting an icon from a library much easier. Well, it started out simple. I wrote the Icon Browser application in Managed C++ using the .NET Framework, and, in about 45 minutes, I had a really cool icon viewer. The .NET Framework provides a vast library of classes that boosts productivity immensely by providing many of the building blocks you would normally have to write yourself. Then I attempted to implement the export feature that would allow the user to choose any icon in the library and save it to an external <B>.ICO</B> file. I hit a brick wall. It turns out there&#146;s no simple way to save an icon to a file.</p>
<p>In this article, I present the Icon Browser application. It is a small desktop application that allows you to browse through the icons embedded in executables and DLLs and to save any of the icons to a <B>.ICO</B> file. I will use this application as a vehicle for exploring programming tasks such as reading and writing unmanaged resources and other issues related to porting or coexisting with legacy code and binaries. In addition, I&#146;ll look at taking unmanaged C++ classes employing traditional deterministic finalization and show you how to implement them as Managed C++ and C# classes, ensuring that they behave well in the .NET environment where the garbage collector reigns.</p>
<p>Most of the functions, classes, and structures that are mentioned in this article are documented in the MSDN Library, which is available at Microsoft&#146;s website. If you want to find out more about a particular point that I mention, the MSDN Library is a good place to start.</p>

<H3><FONT COLOR="#000080">Icon Browser</FONT></H3>
<p>Before I get into the programming details, let me quickly introduce the Icon Browser and show you how to use it. Even if you&#146;re not too interested in resource management and interoperating with unmanaged code from .NET, you might find this application useful. Icon Browser is very easy to use (see <a href="fig1.htm">Figure 1</a>). You can type a filename in the edit box and click the Go button, and Icon Browser will search the given file and display any icons it finds in the list view. If you&#146;re not sure about the name or location of the file, you can click the Browse button and search for a file using the familiar &#147;Choose a File&#148; dialog box. Once the icons have been loaded into Icon Browser, you can choose any one of the icons and click the Export Icon button to save the icon to a <B>.ICO</B> file. You will be presented with a &#147;Save Icon As&#148; dialog box so that you can indicate where to save the new <B>.ICO</B> file. I&#146;ve also added a handy context menu to the list view so that you can just right click on an icon and select the Export Icon command.</p>
<p>If you are following along with me on your own computer, you will notice that there is a default filename in the &#147;Save Icon As&#148; dialog box, and it&#146;s probably a number. That name or number is the resource name for the icon in the library. It&#146;s just a unique way to identify a resource in a library. The resource name is also used as the title for each of the icons displayed in Icon Browser (see <a href="fig1.htm">Figure 1</a>).</p>
<p>And that&#146;s the Icon Browser application, simple but effective! The application as well as its source code is available for download at &lt;www.cuj.com/code&gt;.</p>

<H3><FONT COLOR="#000080">What Are Icons Anyway?</FONT></H3>
<p>Most people think of icons as the little images that represent documents and other files in the Windows shell. Technically, an icon is a group of icon images. An icon image resembles a DIB (device-independent bitmap). So an icon can be represented by a number of different images tailored for different display configurations. In fact, when designing icons for Windows XP, you are encouraged to include nine different images. <a href="fig2.htm">Figure 2</a> shows the images for Microsoft Notepad in GIF Movie Gear, which is a tool you can use to assemble icon images and save to a <B>.ICO</B> file.</p>
<p>When using an icon, you will typically only deal with a handle to the icon and not the actual icon resource. In C or C++, you will use <B>HICON</B>, which is simply an abstract handle to the icon, and pass it to the various Win32 API calls. This is the traditional way that resources are managed in C. In the managed world of .NET, you will use the <B>Icon</B> class.</p>

<H3><FONT COLOR="#000080">Loading Icons, So Many Choices!</FONT></H3>
<p>There are many different ways to load an icon. Two of the most common Win32 API functions you can use are <B>ExtractIcon</B> and <B>LoadIcon</B>. <B>ExtractIcon</B> will return an <B>HICON</B> given a filename and the zero-based index of the icon in the file. This is useful if you just want to enumerate all or some of the icons in a file. <B>LoadIcon</B> is a bit more useful in that you can identify an icon based on its resource name or identifier. In .NET, you don&#146;t generally load icons from unmanaged executables or DLLs. Instead you will normally use the <B>ResourceManager</B> class to load resources from resource files as defined by the .NET Framework.</p>
<p>So how do you read icons from unmanaged libraries? Read on.</p>

<H3><FONT COLOR="#000080">P/Invoke</FONT></H3>
<p>P/Invoke (Platform Invoke) is the bridge between the managed world of .NET and unmanaged code like the Win32 APIs. P/Invoke is part of the .NET Framework&#146;s extensive interoperability layer. To call an unmanaged function, you need to use the <B>DllImport</B> attribute to identify the function and the DLL that implements it. You can still of course use the linker to link to a <B>.LIB</B> file and include the appropriate headers, as has been done by C++ programmers for years. But P/Invoke provides an alternative for C++ programmers and is the only way to accomplish this from other managed languages like C#. Here is the declaration for the <B>LoadIcon</B> API:</p>

<pre>
// Original declared in: winuser.h
// HICON LoadIcon(HINSTANCE hInstance,
//                PCTSTR pName);

[DllImport("User32.dll", SetLastError=true,
           CharSet=CharSet::Auto)]
static void* LoadIcon(System::IntPtr hInstance,
                      System::IntPtr pName);
</pre>

<p><B>"User32.dll"</B> is the single parameter to the <B>DllImportAttribute</B> instance constructor. It identifies the DLL implementing the unmanaged function. <B>SetLastError</B> and <B>CharSet</B> are public fields for the <B>DllImportAttribute</B> class.</p>
<p>Setting the <B>SetLastError</B> field to <B>true</B> informs the CLR (Common Language Runtime) that the unmanaged function may call the <B>SetLastError</B> Win32 API function. In response, the CLR will cache the value returned by the <B>GetLastError</B> Win32 API function so that you can retrieve it later. This avoids race conditions, as it is possible for another function used by the CLR to call <B>SetLastError</B> before you get around to retrieving the error code. The .NET Framework exposes the cached error code through the <B>GetLastWin32Error</B> <B>static</B> method on the <B>Marshal</B> class. So it is a good idea to set this field if you suspect your unmanaged functions may set the last error code and you are interested in retrieving it.</p>
<p>Setting the <B>CharSet</B> field to <B>CharSet::Auto</B> indicates that the unmanaged function has a Unicode and an ANSI version. Most Win32 API functions that deal in any way with strings qualify. For example, a function named <B>LoadIcon</B> doesn&#146;t actually exist. It is actually <B>#define</B>d to <B>LoadIconW</B> if <B>UNICODE</B> is defined or <B>LoadIconA</B> if it is not. The <B>-W</B>, or Unicode, versions of the functions were introduced with Windows NT as Windows NT and it successors, Windows 2000 and XP, deal natively with Unicode strings. Windows 9x and its successor Windows ME mostly only support the <B>-A</B>, or ANSI, versions. Setting <B>CharSet</B> to <B>CharSet::Auto</B> instructs the CLR to pick the right version based on the operating system that the code is running on. If you don&#146;t explicitly set the <B>CharSet</B> field, it defaults to <B>CharSet::Ansi</B>, which won&#146;t give you the best performance on Windows XP as the operating system will have to convert any strings from ANSI to Unicode before it can use them. This is an improvement over unmanaged C++ where you had to create separate builds to optimize for ANSI and Unicode, using the <B>_T</B> macro to create text-generic literals.</p>
<p>The next thing you&#146;ll notice is that I&#146;ve changed the parameter types to the <B>IntPtr</B> value type. You will normally use <B>IntPtr</B> for opaque unmanaged types that can&#146;t be represented by corresponding managed types. Although <B>pName</B> is a <B>PCTSTR</B>, which is a constant pointer to a <B>TCHAR</B> (in other words a string), it is more commonly used to pass an integer identifier using the <B>MAKEINTRESOURCE</B> macro. For this reason, <B>pName</B> is also declared as an <B>IntPtr</B>.</p>
<p><B>LoadIcon</B>, as with many of the resource management functions, requires an instance handle. If you&#146;re programming in C++, then this is no problem. The operating system will assign your process an instance handle when it first starts up. And if you need to get resources from another DLL or executable, you simply call <B>LoadLibraryEx</B> and pass the <B>LOAD_LIBRARY_AS_DATAFILE</B> flag to indicate that you just want access to the resources within the library and don&#146;t want to execute any code it may contain. Here&#146;s an example of using the <B>LoadLibraryEx</B> function to load the Windows Explorer shell executable from unmanaged C++:</p>

<pre>
HMODULE hModule = ::LoadLibraryEx
    (_T("C:\\Windows\\Explorer.exe"),
     0, // must be zero.
     LOAD_LIBRARY_AS_DATAFILE);
</pre>

<p>Although <B>LoadLibraryEx</B> returns a module handle, it is generally interchangeable with an instance handle, so you can freely pass it to functions that expect a <B>HINSTANCE</B>. In fact, a <B>HMODULE</B> is <B>typedef</B>ed to be a <B>HINSTANCE</B> in <B>windef.h</B>. In the world of .NET however, you don&#146;t deal with instance handles but rather with assemblies. An assembly, which is usually packaged as an executable or DLL, can be loaded using the <B>Assembly::LoadFrom</B> method as shown here:</p>

<pre>
Assembly* assembly =
    Assembly::LoadFrom(S"C:\\MyResources.dll");
</pre>

<p>The <B>Assembly</B> class contains a host of properties and methods for accessing the various types defined in an assembly and can be used with the classes in the <B>System::Resources</B> namespace to retrieve any resources.</p>

<H3><FONT COLOR="#000080">Resource Management</FONT></H3>

<p>Let&#146;s get back to the problem at hand. To retrieve resources from unmanaged libraries, you need to declare a few of the Win32 API functions for use in .NET. I tend to put all my declarations in a single class that I call <B>WindowsAPI</B>. This way I can check at a glance what dependencies my project may have to ensure that they are available on any platforms that I support. You can download the <B>WindowsAPI</B> class at &lt;www.cuj.com/code&gt;. Because resource management is so important (yes, even when using .NET), you should avoid using these functions directly as your code will end up getting quite messy as you try to free the various resources when you&#146;re done using them. Remember that you must always write your code to be resilient to exceptions. The best way to do this is to wrap any resource management functions inside a class. If you are a traditional C++ programmer, your first pass at writing a Managed C++ class to wrap the library functions might look something like <a href="fig3.htm">Figure 3</a>, with error handling code omitted for brevity. The <B>__gc</B> keyword indicates that the class is garbage collected, and its lifetime is managed by the CLR.</p>
<p>This is perfectly acceptable from an unmanaged C++ point of view, and it will even compile and work in Managed C++. There&#146;s only one problem. The .NET Framework uses non-deterministic finalization. What this means is that .NET&#146;s garbage collector will call your object&#146;s destructor (called a finalizer in .NET speak) in a non-deterministic fashion, most likely when it notices you&#146;re low on memory. So unlike in unmanaged C++ where your destructor is guaranteed to be called when execution leaves the scope in which the object was created, in .NET you cannot rely on a destructor to free your resources in such a timely fashion. Remember that all reference types in the CLR are created on the managed heap and the managed heap is controlled by the garbage collector. Fortunately .NET defines a pattern for resource management, which if followed consistently makes resource management a breeze. The .NET Framework defines the <B>IDisposable</B> interface, which has a single method called <B>Dispose</B>. When used in conjunction with the C# <B>using</B> statement, it provides precise control over when your class will be disposed. So I&#146;ll rewrite the <B>Library</B> class to make use of the <B>IDisposable</B> interface, again with error handling omitted for brevity (see <a href="fig4.htm">Figure 4</a>). This is a simplification of the <B>Dispose</B> pattern, but it effectively illustrates the point without sacrificing too many trees. My new <B>Library</B> class can now be used as follows from C#:</p>

<pre>
using (Library library = new Library
    (@"C:\Windows\Explorer.exe"
     WindowsAPI.LOAD_LIBRARY_AS_DATAFILE))
{
    // use the library
}
</pre>

<p>Before execution leaves the <B>using</B> scope, the library will be freed. But what about using it from Managed C++? Well, although managed C++ doesn&#146;t have a <B>using</B> keyword, you can use the <B>__finally</B> statement (which Visual C++ has had for many years to support Win32 structured exception handling) to call <B>Library::Dispose</B> as shown here. This ensures that the <B>Library</B> object will be freed even if an exception is thrown at any point after creating the object.</p>

<pre>
Library* library = 0; 

try
{
    library = new Library
        (S"C:\\Windows\\Explorer.exe",
         WindowsAPI::LOAD_LIBRARY_AS_DATAFILE);

    // Use the library
}
__finally
{
    if (0 != library)
    {
        library-&gt;Dispose();
    }
}
</pre>

<p>Note that this doesn&#146;t free the memory held by the <B>Library</B> object, it merely frees the resources held by that object. The memory for the object itself will still be freed by the garbage collector eventually. If you&#146;re like me, you love the elegance of C++, and looking at the code fragment above will make you feel gloomy and want to go back to unmanaged code where you can use the &#147;resource acquisition is initialization&#148; technique to release your resources deterministically and elegantly. Well don&#146;t despair, because there is a solution: templates. Even though the CLR doesn&#146;t support generics yet, you are still programming in C++, so there&#146;s nothing stopping you from employing them to solve this problem. I wrote a template class called <B>Using</B> that can be employed to achieve the same affect as C#&#146;s <B>using</B> statement (see <a href="fig5.htm">Figure 5</a>). The <B>Using</B> class is an unmanaged C++ class, so it is not controlled by the garbage collector and can be trusted to free your resources when it goes out of scope. It&#146;s basically an unmanaged wrapper for any <B>IDisposable</B>-derived class, such as my <B>Library</B> class presented above. The <B>Using</B> class makes use of the <B>gcroot</B> class that ships with the .NET Framework SDK. <B>gcroot</B> is basically a smart pointer for managed pointers in unmanaged C++. <B>gcroot</B> does nothing more than wrap the managed pointer, but it can easily be extended to provide more interesting behavior as shown here.  Many of the .NET Framework classes implement <B>IDisposable</B> too, so the <B>Using</B> class is a very handy class to have in your tool chest. When the <B>Using</B> object goes out of scope, it ensures that the object&#146;s <B>Dispose</B> method gets called. This is kind of like deterministic finalization for managed objects! Now using the <B>Library</B> class becomes much simpler:</p>

<pre>
void UseLibrary()
{
    Using&lt;Library*&gt; library = new Library
        (S"C:\\Windows\\Explorer.exe",
         WindowsAPI::LOAD_LIBRARY_AS_DATAFILE);

    // Use library
}
</pre>

<p>And that&#146;s the basics of resource management in .NET using C# and Managed C++.</p>

<H3><FONT COLOR="#000080">So Where Are the Icons?</FONT></H3>

<p>Now that you know how to load an unmanaged library, you need to determine whether a library contains any icons. As I mentioned before, you can use the <B>LoadIcon</B> function to load an icon from a library as long as you have the name or identifier for the icon resource. If you don&#146;t know the name of a particular icon, you can enumerate all the icons until you find the one you want. This is done using the <B>EnumResourceNames</B> function, which is declared as follows in <B>Kernel32.dll</B>:</p>

<pre>
BOOL EnumResourceNames(HMODULE hModule,
                       PCTSTR pType,
                       ENUMRESNAMEPROC pCallback,
                       LONG_PTR lParam);
</pre>

<p>The <B>hModule</B> parameter is a module handle, which you can get by calling <B>LoadLibraryEx</B>, so I can use my <B>Library</B> class for this. The <B>pType</B> parameter identifies the type of resource. Although you can define your own resource types, you will generally use one of the standard resource types. Two resource types of interest in this discussion are <B>RT_GROUP_ICON</B> and <B>RT_ICON</B>. An <B>RT_GROUP_ICON</B> resource represents an icon. It is basically just a directory of icon images. Each directory entry refers to a <B>RT_ICON</B> resource, which contains the actual image data (see <a href="fig6.htm">Figure 6</a>). So to enumerate the icons in a library, you pass <B>RT_GROUP_ICON</B> as the type of resource to enumerate. The next parameter is the callback function, which is the traditional way of implementing an enumerator in C. You simply pass the address of a function to <B>EnumResourceNames</B>, and it will call that function for each matching resource. Simple. Well not really. The problem is that .NET has no notion of a function pointer. Fortunately, the .NET Framework has a thing called a delegate, which is much more powerful and can be used to implement callback functions, too. A delegate can refer to a static or instance method. You can&#146;t pass <B>EnumResourceNames</B> a pointer to a function, but you certainly can pass it a delegate, assuming you declared the <B>EnumResourceNames</B> function appropriately and declared the matching delegate. Here&#146;s how you would do that. This discussion assumes you&#146;re using Managed C++ for everything. You could of course have simply <B>#include</B>d <B>Windows.h</B> and used a callback function; however, using delegates provides benefits even for the C++ programmer.</p>

<pre>
__delegate bool EnumResNameProc(System::IntPtr hModule,
                                System::IntPtr pType,
                                System::IntPtr pName,
                                System::IntPtr param);

[DllImport("Kernel32.dll", SetLastError=true,
    CharSet=CharSet::Auto)]
static bool EnumResourceNames(System::IntPtr hModule,
                              System::IntPtr pType,
                              EnumResNameProc* enumFunc,
                              System::IntPtr param);
</pre>

<p>Since <B>EnumResourceNames</B> really operates on a library, I&#146;ve added a method to my <B>Library</B> class that calls this import. This saves you from having to pass it a module handle every time. And of course this is the more object-oriented way to do it. Now enumerating the icon resources in a library becomes very easy (see <a href="fig7.htm">Figure 7</a>). At this point, you can call <B>LoadIcon</B> to get a handle to an icon tailored for the current display configuration. This can then be passed to the <B>Icon::FromHandle</B> method to get an <B>Icon</B> object, which in turn can be displayed in various ways in a .NET application. If you recall, one of my objectives for the Icon Browser application is to be able to save an icon to a <B>.ICO</B> file. To do this, I need to dig a little deeper and get at the actual resource data.</p>
<p>To get the resource data, you need to use the <B>FindResource</B> and <B>LoadResource</B> functions to locate and load the resource. This is different from calling <B>LoadIcon</B>, which generates a displayable icon based on the icon resource. Once the resource is loaded, you call the <B>LockResource</B> function to get a pointer to the actual resource bytes. This pointer is valid until such time as the library containing the resource is freed. I&#146;ve declared structures to represent the resource data (see <a href="fig8.htm">Figure 8</a>). The <B>__nogc</B> keyword informs the compiler that these are unmanaged C++ structures. You won&#146;t find these data structures defined in the Platform SDK documentation. It is worth noting that although this poses no challenges to C++, you will run into a number of issues if you try to do the same thing in C# or even Managed C++. What complicates matters, when trying to use them from C#, is that <B>MEMICONDIR</B> is actually a variable-length structure. The length of the <B>arEntries</B> array is defined by <B>wCount</B>. In other words, <B>arEntries</B> is an inline array as opposed to a pointer to the first element of an array. So to get to the various elements of the array, you need to perform a bit of pointer arithmetic. Although this is no problem to a seasoned C or C++ developer, it poses a challenge as C# does not encourage the use of pointers. In addition, managed structures cannot have inline arrays. So, if I had declared the C++ structures as managed structures, the compiler would have refused to compile them. If you are dealing with this problem, there is a solution. You do however need to explicitly mark code blocks as unsafe before you can make use of pointers in C#. This can be done using the C# <B>unsafe</B> keyword. Please bear in mind that it is called unsafe for a reason. Misuse of pointers often leads to very buggy code. This is why even in C++ the use of pointers is discouraged and should usually be localized to C++ classes employing the &#147;resource acquisition is initialization&#148; idiom. If you use any unsafe code in a .NET assembly, the entire assembly is marked as unsafe. <a href="fig9.htm">Figure 9</a> contains a simple C# console application that demonstrates how to load the icon resource for the Microsoft Notepad application and how to use pointer arithmetic to access the last entry in the <B>arEntries</B> array. This code assumes you declared the managed structures in C# like this:</p>

<pre>
[StructLayout(LayoutKind.Sequential, Pack=2)]
public struct MEMICONDIR
{
    public ushort wReserved;
    public ushort wType;
    public ushort wCount;
    public MEMICONDIRENTRY arEntries; // inline array
}
</pre>

<p>Now that you know how to access these structures, lets take a closer look at them. Both <B>MEMICONDIR</B> and <B>MEMICONDIRENTRY</B> have been decorated in both the C# and C++ form. The C# structures have the <B>StructLayout</B> attribute applied to them. <B>LayoutKind::Sequential</B> is the single parameter to the <B>StructLayoutAttribute</B> instance constructor. It indicates that the members of the structure must be laid out sequentially in memory so as to be memory-compatible with unmanaged code. Otherwise, the CLR is free to move the object&#146;s members around in memory for efficiency. The <B>Pack</B> field indicates the alignment of the members in memory. The <B>Pack</B> field defaults to <B>8</B>, which is convenient as this is what Visual C++ 6 uses. And since most unmanaged structures you might encounter were probably declared and implemented using Visual C++ 6, it is a safe default. However the icon resource uses a <B>Pack</B> value of <B>2</B>, which is why you need to declare it explicitly. This results in a slightly smaller memory footprint, as most of the structure members are two-byte words or smaller. To put this in perspective, the same affect is achieved in C++ using the <B>pack</B> pragma.</p>
<p>The <B>MEMICONDIRENTRY</B> structure contains information about an individual icon image. The <B>wID</B> member is of particular interest as it contains the resource identifier for the <B>RT_ICON</B> resource within the library that contains the actual image bitmap information. You can use this identifier with the <B>FindResource</B> and <B>LoadResource</B> functions to locate and load the <B>RT_ICON</B> resource. Then you can use the <B>LockResource</B> function to get at the bitmap information. Finally, you&#146;ve found the images! The <B>RT_ICON</B> resource data is stored in memory similar to a DIB. So much so that you can use the <B>BITMAPINFO</B> structure, which defines a DIB in memory, to access the <B>RT_ICON</B> resource data. For more information about DIBs and the <B>BITMAPINFO</B> structure, consult the Platform SDK documentation. Technically the icon image uses the same format as the <B>CF_DIB</B> clipboard format where the DIB bits follow the <B>BITMAPINFO</B> header and color table. You will need to know this if you want to render the image yourself using the icon resource. For the purpose of this discussion, you can ignore this fact except to remember that the <B>BITMAPINFO</B> is yet another variable-length structure, and you must treat it accordingly. One thing to keep in mind is that icons deviate slightly from the <B>BITMAPINFOHEADER</B> semantics in that the <B>biHeight</B> member is double the actual height. <a href="fig6.htm">Figure 6</a> illustrates how the <B>RT_GROUP_ICON</B> and <B>RT_ICON</B> resources are laid out in memory.</p>
<p>Next, I&#146;ll show how you can wrap all this resource management code in a few well-defined classes to reduce this complexity.</p>

<H3><FONT COLOR="#000080">Resource Management Revisited</FONT></H3>
<p>I have written two classes: <B>IconResource</B> and <B>IconImage</B>. The <B>IconResource</B> class takes care of loading an <B>RT_GROUP_ICON</B> resource from a library and populates an array of <B>IconImage</B> objects. Each <B>IconImage</B> object represents an <B>RT_ICON</B> resource, which is a single image for the icon resource. As a user of the <B>IconResource</B> class is entitled to keep a reference to an <B>IconResource</B> object long after the library that it originated from has been freed, you need to be careful about the memory that gets returned by calls to <B>LockResource</B>. Although you don&#146;t have to worry about releasing this memory (the operating system will ensure that it is freed once its parent library is unloaded from the process), you do need to concern yourself with any pointers to this memory that you may hold on to. The <B>IconImage</B> class needs to hold on to its resource data so that it can be used to write it to a <B>.ICO</B> file. I will talk more about this later. To satisfy this requirement, the <B>IconImage</B> class makes a local copy of the image bits. When the <B>IconImage</B> object is constructed, it loads the <B>RT_ICON</B> resource, which is just the DIB bits for the image. It then copies these image bits into a managed byte array using the <B>Copy</B> method on the <B>Marshal</B> class. Now that the <B>IconImage</B> class contains its own copy of the resource data, the library where the resource was originally retrieved from can be freed without affecting the <B>IconImage</B> class.</p>

<H3><FONT COLOR="#000080">Let&#146;s See What You&#146;ve Got!</FONT></H3>
<p>Icons aren&#146;t much fun if you can&#146;t see them. So let&#146;s take a look at the Icon Browser&#146;s <B>MainWindow</B> class and how it employs the classes that I&#146;ve discussed so far to implement icon browsing. I first wrote the Icon Browser application in C#. For this article, I rewrote the entire application in Managed C++. The <B>MainWindow</B> class from the original C# version was generated using the Visual Studio Forms Designer. The C++ version I wrote completely by hand. You can judge for yourself which one is cleaner. The source code for both versions is available at &lt;www.cuj.com/code&gt;. Although I am generally weary of computer-generated code, the Visual Studio Forms Designer does a remarkable job of generating user-interface code. It is a huge boon to productivity if handled correctly. The trick is to be conscious of the code it generates and to maintain your coding and naming standards. For example, if you drag three text boxes onto a form, it will name them <B>textBox1</B>, <B>textBox2</B>, and <B>textBox3</B>. Be sure to give them meaningful names in the context of your application, as well as following any naming conventions you may be employing for your project. Further, for any non-trivial user-interface component, you need to employ standard design practices to ensure separation of data and presentation. This can be done using design patterns such as the Document/View pattern employed by MFC or the MVC (Model/View/Controller) pattern.</p>
<p>As shown in <a href="fig1.htm">Figure 1</a>, the Icon Browser is a simple forms-based application. It&#146;s made up of a resizable window that contains a list view for displaying the icons, as well as a toolbar of sorts exposing the functionality supported by the Icon Browser application. The code of interest is in the <B>GoEventHandler</B> method, which is called in response to the <B>Click</B> event on the Go button. This brings everything you have learnt so far together. The <B>GoEventHandler</B> method uses the <B>Library</B> class to load the user-provided file. It then calls the <B>Library</B> class&#146; <B>EnumResourceNames</B> method to enumerate the <B>RT_GROUP_ICON</B> resources. <B>AddIconToList</B> is the delegate called by <B>EnumResourceNames</B> for each icon resource that is found. It uses the <B>IconResource</B> class to load the resource data and adds an <B>IconItem</B> to the <B>ListView</B> to represent the icon to the user. <B>IconItem</B> is a simple class that derives from <B>ListViewItem</B> that is used to initialize the <B>ListViewItem</B> text and image index.</p>

<H3><FONT COLOR="#000080">Exporting Icons</FONT></H3>
<p>There&#146;s one more thing left to do. At the beginning of this article, I mentioned that the Icon Browser would allow the user to export any icon to a <B>.ICO</B> file. Unfortunately, the <B>.ICO</B> file format is different to the format used to store icons in resource files. <a href="fig10.htm">Figure 10</a> illustrates how an icon is stored in a <B>.ICO</B> file. It somewhat resembles the memory layout of the <B>RT_GROUP_ICON</B> resource. So, with a little bit of translation code, you can convert the one to the other. The major difference with the way the <B>.ICO</B> file format is written is that the icon image directory entry for each image stores a byte offset to the location of the image, whereas the <B>RT_GROUP_ICON</B> resource stores the resource name that you use to load the image. For the purposes of writing a <B>.ICO</B> file, I have added a <B>Save</B> method to the <B>IconResource</B> class. This method takes a single string parameter that indicates the file to write the icon data to. It uses the <B>BinaryWriter</B> class to write the <B>.ICO</B> file header information. It then delegates to the <B>IconImage</B> class to write the directory entry information, as well as the image bits.</p>

<H3><FONT COLOR="#000080">A Note about Managed and Unmanaged C++</FONT></H3>
<p>Although I have focused this article on writing Managed C++ code, one of the great advantages of C++ over other languages targeted at the CLR is that in C++ you can freely mix managed and unmanaged code. On the other hand, using managed code entirely allows you to isolate yourself from third-party source code, such as header files that you must include, which may populate the global namespace with definitions that you are not interested in and do other nasty things to your code (such as, what happens when you include a Windows header and name a method of your own with a name that is used by a Win32 API function).</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>Reading and writing Win32 resources is a non-trivial exercise in C++. Being able to pull it off entirely in managed code displays some of the power and flexibility of the .NET Framework. Resource management code should always be written carefully. Using the .NET Framework&#146;s <B>IDisposable</B> class lends a helping hand by providing a common pattern for resource management. I hope that this exercise of walking through the development of the Icon Browser application helped you understand some of the services provided by the .NET Framework for writing code to interoperate with unmanaged code and resources.</p>

<p><i><B>Kenny Kerr</B> specializes in component-based development of desktop and distributed applications for the Microsoft Windows platform. He works at PlateSpin, Inc. in Toronto, Canada where he heads up the Windows development. Reach Kenny at kennykerr@hotmail.com or visit his website: &lt;www.kennyandkarin.com/Kenny/&gt;.</i></p>

<h4><a href="../../../source/2002/csep02/kerr.zip"></a></h4>
</blockquote></body></html>
