<HTML>   
     <HEAD>
<TITLE>September 2002 C++ .NET Solutions/Pinning in Managed C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../toccnet.htm"></A><FONT COLOR="#FF0000">   C++ .NET Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Pinning in Managed C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Nick Hodapp</FONT></H3>

<BLOCKQUOTE>
<p>If mixing managed and unmanaged code has you on pins and needles, here&#146;s how to make them work together.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Pinning refers to the process of informing the CLR&#146;s (Common Language Runtime) GC (Garbage Collector) that it is not to relocate a specified object in memory. Pinning is necessary in certain scenarios where it is necessary to pass managed data to unmanaged code, or potentially in code that is attempting to eke out the highest possible performance.</p>
<p>Consider a scenario in which a managed array of integers is passed by reference to an unmanaged function for manipulation, sans pinning. Unaware that there is now an unmanaged pointer to this data, the GC could decide to compact its heap, moving the original data, and leaving the unmanaged code poised to access now indeterminate memory.</p>
<p>Different managed languages provide varying levels of support for pinning. Visual Basic provides no means to explicitly pin an object. C# provides in the language a &#147;fixed&#148; statement, which enables an object to be explicitly pinned in an unsafe context (enabling the use of pointers, in that language). Managed C++ provides similar explicit pinning capability with its <B>__pin</B> keyword.</p>
<p>Additionally, the .NET Framework&#146;s P/Invoke (Platform Invoke) technology automatically pins many types of arguments that are passed to an unmanaged API, regardless of language used. C++ developers can rely on this mechanism, or choose to use the higher performing (and easier to use) IJW (It Just Works) mechanism for calling unmanaged code. In the case of IJW, however, it is the developer&#146;s responsibility to manually pin any managed data being passed.</p>
<p>Finally, any .NET consumer language, regardless of whether or not it provides intrinsic language support for pinning, can pin some types of objects by calling the static <B>Alloc()</B> method of the .NET Framework&#146;s <B>GCHandle</B> class, as shown by this MC++ code:</p>

<pre>
// a simple .NET string, pinned
// manually by GCHandle::Alloc()
using namespace System::Runtime::InteropServices;
...

String* s = S"Hello, World";
GCHandle gch = GCHandle::Alloc(s,
  GCHandleType::Pinned);

// here we gain access to the string's buffer
wchar_t* ps = reinterpret_cast&lt;wchar_t*&gt;
  (gch.AddrOfPinnedObject().ToInt32());

...

// and, we're responsible for releasing the pin
gch.Free();
</pre>

<p>I&#146;ll cover more on this technique in a moment.</p>
<p>Explicit pinning in Managed C++ is different than explicit pinning in C#. In C# the language provides the &#147;fixed&#148; construct, which accepts an object to be pinned for the scope of the statement. Nested fixed statements are necessary to pin multiple objects:</p>

<pre>
int[] arr_int = new int[10];
double[] arr_double = new double[10];

unsafe
{
fixed (int* pi = &amp;arr_int[5])
{
  fixed (double* pd = &amp;arr_double[5])
  {
    *pi = 5;
    *pd = 10.0;
  }
}
}
</pre>

<p>In Managed C++, the <B>__pin</B> keyword modifies a pointer type, creating a type called a &#147;pinning pointer.&#148; It is used to specify that a pointer to an instance of an object is to be pinned:</p>

<pre>
Int32 arr_int[] = new Int32[10];
Double arr_double[] = new Double[10];

int __pin* pi = &amp;arr_int[5];
double __pin* pd = &amp;arr_double[5];

*pi = 5;
*pd = 10;
</pre>

<p>The pinning remains in effect as long as the declared variable remains in scope. It&#146;s interesting to note that this behavior is actually achieved because the compiler will inject code at the end of the scope to nullify the pinning variable, causing the object to unpin. This is because IL (Intermediate Language) has no concept of block scope.</p>
<p>(In each of the above examples, it is important to note that while you are declaratively pinning the fifth element of the arrays, the GC is in actuality pinning the entire array. And, when pinning a member of a managed object, the GC will pin the whole object.)</p>
<p>While <B>__pin</B> is somewhat more flexible than fixed, it does have certain limitations. <B>__pin</B> can only be used in a local context (a member of a class cannot be a pinning pointer), and <B>__pin</B> cannot be used in cast expressions, requiring the developer to pre-declare a pinning pointer variable before referencing it.</p>
<p>Specifically, Microsoft documentation identifies the following characteristics and constraints of pinning pointers:</p>

<UL><LI>  Except for its pinning properties, a pinning pointer is identical to a <B>__gc</B> pointer.</LI>
<LI>  A pinning pointer can be implicitly converted to a <B>__nogc</B> pointer. (Note this is done in the previous examples.)</LI>
<LI>  A pinning variable shall be a non-static local variable.</LI>
<LI>  Two function overloads shall not differ only by the use of pin and <B>__gc</B> pointer types.</LI>
<LI>  A pinning pointer type shall not be used in a cast expression. It can only be used to declare a variable.</LI></UL>

<p>Earlier I briefly showed how it is possible to call <B>GCHandle::Alloc()</B> to pin an object, without relying on language constructs. This technique is interesting because it behaves somewhat differently than <B>__pin</B> (or fixed) and has its own (differing) set of limitations.</p>
<p>The first major difference is that <B>GCHandle::Alloc(..., GCHandleType::Pinned)</B> will only pin certain types. Specifically, it will pin <B>String</B>s, <B>Array</B>s, and any type that is deemed &#147;blittable.&#148; Blittable types are those that have a static, well-defined memory layout that can be copied directly while being marshaled across managed and unmanaged code boundaries. Blittable types intrinsic to the CLR include the core integral types. User-defined value and reference types can be made blittable by declaring them with the <B>StructLayout</B> attribute, specifying a <B>LayoutKind</B> of either <B>Sequential</B> or <B>Explicit</B>. For value and reference types that weren&#146;t defined with <B>StructLayout</B>, there&#146;s nothing that can be done to enable their pinning by <B>GCHandle::Alloc()</B>.</p>
<p>An <B>InvalidArgument</B> exception will be raised if a non-blittable type is passed to <B>GCHandle::Alloc()</B> for pinning.</p>
<p>Conversely, <B>__pin</B> will pin any type, blittable or not.</p>
<p>A second major behavior difference is that the pointer resolved by using <B>__pin</B> to pin an instance of a <B>String</B> will point to a different location than the pointer retrieved by <B>GCHandle::AddrOfPinnedObject()</B>. How can this be?</p>
<p>For <B>String</B>s and <B>Array</B>s, <B>GCHandle::AddrOfPinnedObject()</B> is hard coded to calculate and return an interior pointer to the data buffer of the string or array it is acting upon. <B>__pin</B> simply returns the base address of the <B>String</B> or <B>Array</B> object.</p>
<p>For other (blittable) types, <B>GCHandle::AddrOfPinnedObject()</B> will calculate and return a pointer to the first data member of the type. Again, <B>__pin</B> returns the base address of the entire pinned object.</p>
<p>This behavior is actually desirable in many cases. In the case of a <B>String</B>, or other non-blittable types, you are not privy to the internal layout of the object. So you would not know how to access any data in particular once you&#146;d pinned an instance with <B>__pin</B>. (Actually, this is not 100 percent true. The framework does provide a value that is the offset into a string to its internal data buffer.) And for blittable types, you are not typically interested in the layout of the type beyond what is the known blittable portion.</p>
<p>The two pinning techniques do differ in performance. <B>__pin</B> prompts the compiler to emit a single attribute in MSIL (Microsoft Intermediate Language) specifying to the CLR and the GC to pin the denoted object. <B>GCHandle</B> adds the overhead of type checking, pointer arithmetic, and several function calls.</p>
<p>Manually calling the <B>GCHandle</B> methods to perform pinning would normally be more cumbersome than using <B>__pin</B>, but it is pretty simple to create a C++ template class that will use <B>GCHandle</B> to enable inline pinning, like this:</p>

<pre>
String* s = S"Hello, World.";
SomeUnmanagedFunction
  ( pin_cast&lt;const wchar_t*&gt;(s) );
</pre>

<p>The <B>pin_cast&lt;&gt; struct</B> (see <a href="list1.htm">Listing 1</a>) is modeled after the <B>gcroot&lt;&gt;</B> class provided with Visual C++ .NET. (<B>gcroot&lt;&gt;</B> enables unmanaged classes to hold pointers to managed objects.) When instantiated inline, the constructor pins the passed object by calling <B>GCHandle::Alloc()</B>, storing the newly initialized <B>GCHandle</B> as a member of the class. The function-call operator calls <B>GCHandle::AddrOfPinnedObject()</B>, retrieves the pinned address (which will point to the data buffer of a string or array, or the first data member of a blittable type), and returns it, casting it to the type specified in the template parameter. The destructor, of course, calls <B>GCHandle::Free()</B> to release the pin. All very tidy.</p>
<p>One last important point: in some of these examples, I&#146;m showing how <B>pin_cast</B> can be used to access the private data buffer of managed <B>String</B>s and <B>Array</B>s, possibly in a non-<B>const</B> manner. Given these are sealed types, and that the entire implementation is unknown, it would be bad to assume you could safely modify the contents of these buffers, even if the memory is pinned.</p>
<p>At first glance, Visual C++ with Managed Extensions may appear bizarre or perhaps even an oddity along side the other managed .NET languages. The keywords added to the language, to expose and enable CLR concepts (such as pinning) within C++ code, do require an understanding of their specific purpose and syntax. But Managed C++ is just as capable as C# and Visual Basic and even offers advanced developers more opportunity for better performance and increased flexibility in code, all without abandoning their favorite language.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p><a name="1"></a>[1]  &lt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vcmxspec/<br>html/vcManagedExtensionsSpec_7_7.asp&gt;</p>
<p><a name="2"></a>[2]  &lt;http://msdn.microsoft.com/library/en-us/vcmex/html/ vclrf__pin.asp?frame=true&gt;</p>

<p><i><B>Nick Hodapp</B> is Microsoft&#146;s product manager for Visual C++ .NET, a developer tool for creating best-in-class applications for Windows and .NET using the C++ language. Previously Nick enjoyed an eight-year career in the Midwest developing Windows-based GIS software for telecommunication and power utilities.</i></p>

<h4><a href="../../../source/2002/csep02/hodapp1.zip"></a></h4>
</blockquote></body></html>
