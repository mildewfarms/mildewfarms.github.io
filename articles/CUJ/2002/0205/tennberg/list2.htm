<HTML><HEAD>
<TITLE>May 2002/Refactoring Global Objects in Multithreaded Applications/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The test program using the TLS proxy class</A></h4>
<pre>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;process.h&gt;
#include "DataProxy.h"

class Counter
{
public:
    Counter(const std::string &amp;name);
    Counter &amp;operator+=(int);
    int getValue() const;
    const std::string &amp;getName() const;

private:
    std::string    name;
    int            n;
};

inline Counter::Counter(const std::string &amp;p_name) : 
    name(p_name), n(0)
{
}

Counter &amp;Counter::operator+=(int rh)
{
    n += rh;
    return *this;
}

int Counter::getValue() const
{
    return n;
}

const std::string &amp;Counter::getName() const
{
    return name;
}

DataProxy&lt;Counter&gt; CounterProxy;

// A function that uses a singleton. In a single threaded environment
// everything was fine. When we move the architecture change to 
// facilitate a multithreaded environment we are using CounterProxy 
// instead to make it appear as every thread instance has its own 
// data.
void PrintResult()
{
    std::cout &lt;&lt; CounterProxy-&gt;getValue() &lt;&lt; CounterProxy-&gt;getName() 
              &lt;&lt; std::endl; 
    *CounterProxy += (CounterProxy-&gt;getValue() % 2) ? 1 : 2;    
}

DWORD WINAPI ThreadFunction1(LPVOID param)
{
    Counter counter("ThreadFunction1");

    CounterProxy.setData(&amp;counter);    
    for (int i = 0;i &lt; 100;i++)
    {
        PrintResult();
        Sleep(100);
    }
    return 0;
}

DWORD WINAPI ThreadFunction2(LPVOID param)
{
    Counter counter("ThreadFunction2");

    CounterProxy.setData(&amp;counter);
    for (int i = 0;i &lt; 100;i++)
    {
        PrintResult();
        Sleep(200);
    }    
    return 0;
}

int main(int argc, char* argv[])
{
    const int N_THREADS = 2;
    DWORD dwThreadId;
    HANDLE hThread[N_THREADS]; 
    
    hThread[0] =        
        CreateThread(NULL,0,::ThreadFunction1,NULL,0,&amp;dwThreadId)   
    hThread[1] =
        CreateThread(NULL,0,::ThreadFunction2,NULL,0,&amp;dwThreadId)
    WaitForMultipleObjects(N_THREADS,hThread,TRUE,INFINITE);
    CloseHandle(hThread[0]);
    CloseHandle(hThread[1]);
    return 0;
}

&#151; End of Listing &#151;</pre></body></html>
