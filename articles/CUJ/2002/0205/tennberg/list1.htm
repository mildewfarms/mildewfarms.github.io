<HTML><HEAD>
<TITLE>May 2002/Refactoring Global Objects in Multithreaded Applications/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The TLS proxy class</A></h4>
<pre>
#if !defined(XYZ_DataProxy_H)
#define XYZ_DataProxy_H

#include &lt;assert.h&gt;
#include &lt;windows.h&gt;

template &lt;class T&gt;
class DataProxy
{
public:
    DataProxy();
    ~DataProxy();
    void setData(T *data);
    T *operator-&gt;();
    T &amp;operator*();

private:
    // We do not support copy semantics.
    DataProxy(const DataProxy &amp;);
    DataProxy&amp; operator = (const DataProxy &amp;);
    DWORD tlsIndex;
};

template &lt;class T&gt;
inline DataProxy&lt;T&gt;::DataProxy()
{
    tlsIndex = TlsAlloc();
    assert(tlsIndex != 0xFFFFFFFF);
}

template &lt;class T&gt;
inline DataProxy&lt;T&gt;::~DataProxy()
{
    TlsFree(tlsIndex);    
}

template &lt;class T&gt;
inline void DataProxy&lt;T&gt;::setData(T *data)
{
    TlsSetValue(tlsIndex,data);
}

template &lt;class T&gt;
inline T* DataProxy&lt;T&gt;::operator-&gt;()
{
    return reinterpret_cast&lt;T *&gt;(TlsGetValue(tlsIndex));
}

template &lt;class T&gt;
inline T&amp; DataProxy&lt;T&gt;::operator*()
{
    return *reinterpret_cast&lt;T *&gt;(TlsGetValue(tlsIndex));
}
#endif
&#151; End of Listing &#151;</pre></body></html>
