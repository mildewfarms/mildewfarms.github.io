<HTML>   
     <HEAD>
<TITLE>May 2002/Sutter&#146;s Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Toward a Standard C++0x Library, Part 2<br> Namespaces and Library Versioning</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>The migrating habits of the Standard C++ library: a work in progress.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Now that work on the next version of the C++ Standard library is underway, there are some basic logistical questions that need to be answered about the C++0x facilities:</p>

<UL><LI>   What namespace(s) are they going to go in?</LI>
<LI>   Do we want to support source compatibility (existing C++ programs using the C++98 Standard library continue to work with unchanged meaning)? This is almost certainly necessary.</LI>
<LI>   Do we want to support binary compatibility (vendors can ship a C++0x Standard library that is link-compatible with code written to their C++98 Standard library)? This is less obviously necessary, although some users and some vendors will consider it essential.</LI></UL>

<p>These questions are thornier than they look. The choices that are made for the C++ Standard library ought to be exemplary, showing library writers in general how library versioning ought to be done in C++. And, anyway, that&#146;s one of the big things namespaces were supposed to be good for, right? So don&#146;t we have the tools to do a better job than namespace-less languages? Alas, it&#146;s not quite that simple, as we shall see.</p>

<H3><FONT COLOR="#000080">Source and Binary Compatibility</FONT></H3>

<p>First, consider one of the most basic issues facing any library vendor contemplating a new release: whether to support source compatibility, binary compatibility, both, or neither. The answer may be different for different parts of a library; for example, the vendor may choose to maintain source compatibility in general but give it up as a tradeoff in the case of a particular facility.</p>
<p><I>Source compatibility</I> loosely means that the user may have to recompile existing code, but the code will still work, and its meaning won&#146;t change. If you want to maintain source compatibility with older versions of a library, don&#146;t change the meanings of any existing names or functions. Pure syntactic extensions that won&#146;t alter the meaning of existing code are okay.</p>
<p>What&#146;s okay for source compatibility?</p>

<UL><LI>   Adding new facilities (classes or functions) with different names is okay. They won&#146;t conflict with anything else that users may be doing with the library; if some user just happens to already have something lying around with that same new name, oh well, it&#146;s bad luck.</LI>
<LI>   Adding new defaulted parameters to existing function signatures is okay, as long as when existing code is recompiled it will use the defaulted parameters and run with the same semantics as before (but see a caveat below under &#147;what&#146;s not okay&#148;).</LI>
<LI>   Similarly, adding new defaulted template parameters to existing templates in a way that preserves the original semantics is okay (also with caveats, described below).</LI></UL>

<p>What&#146;s not okay for source compatibility?</p>

<UL><LI>   Adding new overloads of existing function names is often not okay. For example, in the presence of conversions, some existing code may end up calling the wrong function (or none at all if it has become ambiguous). In rarer cases, if existing code attempts to take the address of the function, adding new overloads will make that ambiguous.</LI>
<LI>   Adding new defaulted parameters to a function, although generally okay as noted above, could break existing code that tries to take the address of the function and might depend on exactly its original signature; for example:</LI>

<pre>
// Example 1-1
//
typedef int (*PF)(int);

// original library function
int f( int );
PF pf = &amp;f; // okay

// changed library function
int f( int, float = 0.0 ); 
PF pf = &amp;f; // error: no longer okay
</pre>

<LI>   Similarly, adding new defaulted template parameters to a template, although generally okay, could break existing code that uses template template parameters and thus relies on the exact original number of parameters:</LI>

<pre>
// Example 1-2
//
template&lt;template&lt;typename U&gt; class V&gt;
  class Y { V&lt;int&gt; v_; };

template&lt;typename T&gt;
// original library template
  class X { }; 
Y&lt;X&gt; yx; // okay

template&lt;typename T, typename U = int&gt;
// changed library template
  class X { }; 
Y&lt;X&gt; yx; // error: no longer okay
</pre>
</UL>

<p>Next, <I>binary compatibility</I> loosely means that the user is not required to recompile any existing code, but only relink it with the new library, and that the link will still work and the resulting executable&#146;s meaning won&#146;t change. If you want to maintain binary compatibility with older versions of a library, be careful that you don&#146;t change any existing names or function signatures. These participate in name mangling, and absent some really Herculean efforts, this won&#146;t work.</p>
<p>What&#146;s okay for binary compatibility?</p>

<UL><LI>   Adding new facilities (classes or functions) with different names is okay.</LI>
<LI>   Adding new overloads of existing function names is okay because these won&#146;t cause link errors.</LI></UL>

<p>What&#146;s not okay for binary compatibility?</p>

<UL><LI>   Adding new defaulted parameters to existing function signatures will cause link incompatibilities.</LI>
<LI>   Adding new defaulted template parameters to existing templates will cause link incompatibilities.</LI>
<LI>   Perhaps the biggest issue in terms of this article&#146;s discussion: <I>changing namespaces</I> will likewise break link compatibility, which is one of the biggest problems with &#147;Option 2: Move out, but stay in touch&#148; below.</LI></UL>

<p>The above lists, summarized as a Venn diagram in <a href="fig1.htm">Figure 1</a>, are not meant to be exhaustive. There are many more &#147;what&#146;s okay&#148; and &#147;what&#146;s not okay&#148; issues for source and binary compatibility, some of them platform-dependent. For example, changing entry points: moving a function&#146;s ordinal entry point number in a DLL or changing a member function&#146;s <B>vtable</B> slot are binary-incompatible even if the function itself is otherwise unchanged.</p>
<p>This is a sufficient summary of major source and binary incompatibility issues for the purposes of this article. You should get the sense that, in general, binary compatibility is more difficult to maintain than source compatibility, but that they are different if overlapping problems, and there are cases where binary compatibility is easier to maintain than source compatibility.</p>
<p>Having those issues well in mind, now, let&#146;s get back to the bigger issue: version control for a C++ library, specifically the C++ Standard library.</p>

<H3><FONT COLOR="#000080">Finding a Home: The Basic Choices</FONT></H3>

<p>When it comes to finding a home for the next-generation C++0x Standard library, the question boils down to two basic choices.</p>
<p><I>Option 1: Live with your parents.</I> It&#146;s cheap, and it&#146;s perfectly fine if you and your folks can get along together. Taking this route for the C++0x Standard library means dumping everything in the same place where the C++98 library already lives, namely namespace <B>std</B>. This is one obvious possibility, because this is precisely what libraries in namespace-less environments, such as the C99 Standard library, have to do. But for C++, it may smack a bit of inelegance, mightn&#146;t it, because weren&#146;t those newfangled namespaces supposed to be a useful tool for versioning libraries? Hence, the second option.</p>
<p><I>Option 2: Move out, but stay in touch.</I> This can be more flexible, but it&#146;s more work, and depending on your self-restraint and maturity, it can also get you into trouble if you&#146;re not careful. Taking this approach would put the C++98 and the C++0x libraries in different namespaces. Add magic to make life easier for backward compatibility with existing code and migration to use the new facilities (there are many spices and seasonings to choose from here, so be creative), stir well, and hope for the best.</p>

<H3><FONT COLOR="#000080">Option 1: Live with Your Parents in ::std</FONT></H3>

<p>This option is the most straightforward. The issues are pretty much as described above, with few new wrinkles.</p>

<H3><FONT COLOR="#000080">Option 2: Move Out into Another Namespace, but Keep in Touch with ::std</FONT></H3>

<p>The scenario: the entire new C++0x Standard library, including parts it shares with the original C++98 Standard library, has moved out of its parents&#146; place (<B>::std</B>) and lives on its own in a new namespace (for the sake of discussion, let&#146;s call it <B>::std2</B>). The original C++98 Standard library continues to live in namespace <B>::std</B>, blissfully oblivious to the wild parties going on across town night after night in <B>std2</B>&#146;s bachelor pad with its new additions (such as those newfangled hash-based containers) and other differences (maybe <B>std2</B> got bored of always tripping over the <B>vector&lt;bool&gt;</B> specialization lying around on the floor and tossed it out with last week&#146;s trash).</p>
<p>This works reasonably well in the simple cases:</p>

<UL><LI>   <I>Using existing code with the old standard library:</I> existing code continues to work unbroken. There are no changes in meaning, because of course <B>std</B> is still the good old <B>std</B> it always was.</LI>
<LI>   <I>Switching wholesale to the new standard library:</I> using the new standard library as a drop-in replacement in existing programs is as simple as globally replacing <B>std::</B> with <B>std2::</B> and changing &#147;<B>using namespace std;</B>&#148; to &#147;<B>using namespace std2;</B>&#148;. (For a discussion of why using-directives are not evil, see Item 40 in <a href="#1">[1]</a>.) The only changes in meaning would be to facilities that exist in both versions of the library and that the committee explicitly decided to change; these are expected to be few and well documented.</LI></UL>

<p>There are three areas where this approach works less well. The first was already noted above: changing names breaks link compatibility, and some of the techniques we&#146;ll discuss in a moment rely on changing the namespace of residence for facilities currently resident in <B>std</B>.</p>
<p>The other two areas are worth delving into in some detail. One area is visible to the user, and one is visible to the library writer. Let&#146;s tackle them in that order.</p>

<H3><FONT COLOR="#000080">Option 2, First Problem: Using Existing Code with the New Standard Library</FONT></H3>

<p>User code that wants to use some of the new standard library can do it by asking for <B>std2::</B>, but that can still be annoying. Consider the following existing code:</p>

<pre>
// Example 2-1:
// PROBLEM: An innocent happy declaration
// in some existing header file.
//
int f( std::vector&lt;int&gt;&amp; );

// Sample code that uses it does not play
// well with the new library because of std2.
//
std::vector&lt;int&gt; int v1;
f( v1 ); // ok

std2::vector&lt;int&gt; int v2;
f( v2 ); // error, f() only wants a std::vector
</pre>

<p>This is a real issue. &#147;Ah, but that&#146;s easy to fix,&#148; some may say, &#147;just don&#146;t write <B>std::</B> in the function declaration; just write a using declaration or using directive near the top of <B>f</B>&#146;s header, and you&#146;ll only have to change it in one place in each header.&#148; But that&#146;s not right: you should indeed write an explicit <B>std::</B> in the function declaration, because it turns out there are good reasons to never write namespace using declarations or directives in header files, ever. Always use explicit namespace qualifications in function declarations like <B>f</B>&#146;s (see again Item 40 in <a href="#1">[1]</a>).</p>
<p>Now, notice that the problem does not occur if <B>f</B> is already a template like so:</p>

<pre>
// Example 2-2: (BAD)
// An impractical non-solution.
//
template&lt;typename T&gt;
int f( T&amp; );

// Sample code that uses it is now okay:
//
std::vector&lt;int&gt; int v1;
// ok, uses f&lt;std::vector&lt;int&gt; &gt;
f( v1 ); 

std2::vector&lt;int&gt; int v2;
// ok, uses f&lt;std2::vector&lt;int&gt; &gt;
f( v2 ); 
</pre>

<p>Although the above code is perfectly legal, it&#146;s not a &#147;solution&#148; to the problem. I think it&#146;s untenable that we tell users that if they write their own function that happens to mention a standard facility as a parameter type, they should make their function a template (ditto for their own classes). That&#146;s just foolish. In the above case, there&#146;s probably no reason why <B>f</B> should be templated. Dispensing advice to make all such constructs into templates would mean recommending lots of user templates, never mind a renewed round of vigorous accusations that C++ is complicated. Let&#146;s not go there. We definitely would like functions like <B>int f( std::vector&lt;int&gt;&amp; )</B> to keep working with the new standard library <B>vector</B>, whether <B>vector</B> is changed in C++0x or not.</p>

<H3><FONT COLOR="#000080">Option 2, Second Problem: How to Implement and Maintain Separate C++98 and C++0x Library Namespaces</FONT></H3>
<p>I usually write about C++ from the point of view of C++ programmers in the trenches who have to use this stuff. After all, that&#146;s the viewpoint of most of us. For just a moment, though, come along and let&#146;s pretend that we&#146;re standard library implementers, and see how we might deal with a requirement to implement the full C++98 Standard library in namespace <B>std</B>, and the full C++0x Standard library (whatever that turns out to be, but probably with major additions but also with most common things completely unchanged) in some other namespace <B>std2</B>.</p>
<p>The main question is what to do about all the common things that are unchanged from C++98 to C++0x. We&#146;d sure like not to have to write them all twice, once in <B>std</B> and once in <B>std2</B>! Here follow some major options, and why they&#146;re problematic.</p>

<H3><FONT COLOR="#000080">Option 2(a): Code-Pasting via #include &lt;impl&gt;</FONT></H3>

<p>The idea in this &#147;code-pasting&#148; option is to put the implementation of some facility that hasn&#146;t changed (let&#146;s pick on <B>vector</B> again) into a common implementation file and then brute-force <B>#include</B> that in both namespaces:</p>

<pre>
// Example 3
//

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// __vector_impl.h: common stuff
namespace __STDNAMESPACE {
  template&lt; /*...*/ &gt;
    class vector { /*...*/ };
}

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// C++98 header
#define __STDNAMESPACE std
#include &lt;__vector_impl.h&gt;
#undef __STDNAMESPACE

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// C++0x header
#define __STDNAMESPACE std2
#include &lt;__vector_impl.h&gt;
#undef __STDNAMESPACE
</pre>

<p>This avoids code duplication, which is good.</p>
<p>A big drawback, however, is that it does not give a true shared implementation: if the same program uses <B>std::vector&lt;int&gt;</B> and <B>std2::vector&lt;int&gt;</B>, we may be in for some link-time bloat for non-inlined functions because there are two implementations, which happen to be identical except that because they&#146;re in different namespaces their mangled names vary, so most linkers wouldn&#146;t eliminate one. Perhaps an imaginary omniscient linker could notice that the generated code for both was identical <I>and</I> that the parameter lists were basically identical and fold the two copies, but noticing that the parameter lists were really identical would be tough when, for example, the two versions of the default constructor would still take different types of parameters (for example, <B>std::allocator&lt;int&gt;</B> vs. <B>std2::allocator&lt;int&gt;</B>). It&#146;s probably not practical to imagine omniscient linkers. Besides, many commercial linkers are still only C-aware, not C++-aware even for basic things, much less such esoterica like this.</p>
<p>Now, although the naive cut-and-paste brute-force approach above wouldn&#146;t share implementation well, we could take it a step further.</p>

<H3><FONT COLOR="#000080">Option 2(b): Wrapper around an __impl</FONT></H3>
<p>The idea here is to wrap both <B>std::vector</B> and <B>std2::vector</B> around a common implementation, say <B>__myob::__vector_impl</B>. It could look something like this:</p>

<pre>
// Example 4
//

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// __vector_impl.h: common stuff
namespace __myob {
  template&lt; /*...*/ &gt;
    class __vector_impl { /*...*/ };
}

namespace __STDNAMESPACE {
  template&lt; /*...*/ &gt; class vector {
    // implemented in terms of
    // __myob::__vector_impl
  };
}

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// C++98 header
#define __STDNAMESPACE std
#include &lt;__vector_impl.h&gt;
#undef __STDNAMESPACE

//&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;&#151;
// C++0x header
#define __STDNAMESPACE std2
#include &lt;__vector_impl.h&gt;
#undef __STDNAMESPACE
</pre>

<p>Because the visible <B>std::vector</B> and <B>std2::vector</B> are just passthroughs, they likely won&#146;t incur similar link-time code duplication even if <B>std::vector&lt;int&gt;</B> and <B>std2::vector&lt;int&gt;</B> are used in the same program, because all their functions are typically one-line <B>inline</B> forwarding functions. The single shared <B>__vector_impl</B> does all the real work, and this time there truly is only one implementation. We don&#146;t need to imagine an omniscient linker to strip duplicates, because the library implementer prevented duplicates from occurring.</p>

<H3><FONT COLOR="#000080">Option 2(c): Use &#147;Using&#148;</FONT></H3>

<p>One might think that a more C++-ish way of hoisting a facility into two namespaces would be to use a using declaration. One would be almost right. The idea here could look something like this:</p>

<pre>
// Example 5-1: Alternative 1,
// real declaration lives elsewhere
//
namespace std {
  using __myob::vector;
}

namespace std2 {
  using __myob::vector;
}
</pre>

<p>or like this:</p>

<pre>
// Example 5-2: Alternative 2,
// real declaration lives in std
//
namespace std2 {
  using std::vector;
}
</pre>

<p>or even like this:</p>

<pre>
// Example 5-3: Alternative 3,
// real declaration lives in std2
//
namespace std {
  using std2::vector;
}
</pre>

<p>Alas, this also has problems. (Surprise.) In this case, the problems stem from the fact that an entity pulled in via a using declaration doesn&#146;t have all the same status and perks as the real declaration.</p>
<p>Here&#146;s one of the problems: users are allowed to specialize standard library templates on their own user-defined types. That&#146;s a perfectly legal C++98 technique today. But, if the above alternatives were allowed and you wanted to specialize <B>vector</B>, where would you specialize it? The specialization must reside in the same namespace as the original template, after all, and the user might not be able to tell where the original template lives; it&#146;s especially bad if that answer changes from C++98.</p>
<p>Consider the following currently-legal code:</p>

<pre>
// This is legal today in C++98:
//
class MyClass { };

namespace std {
  template&lt;&gt; class vector&lt;MyClass&gt; { };
}
</pre>

<p>If we were to adopt Alternative 3 above, then code could still refer to <B>std::vector&lt;int&gt;</B>, but the above attempt at partial specialization would break:</p>

<pre>
// Alternative 3 again: Why it&#146;s unworkable
//
namespace std {
  using std2::vector;
}

// Used to be legal in C++98, but would break
// if the above were adopted:
//
class MyClass { };

namespace std {
  template&lt;&gt; class vector&lt;MyClass&gt; { };
    // error, base template is in std2, not std
}
</pre>

<p>Indeed, we&#146;ll now see that the fourth and similar option has the same problem.</p>

<H3><FONT COLOR="#000080">Option 2(d): Use an Alias</FONT></H3>

<p>Namespace aliases are a little-known feature of C++, if the amount of press they get is any indication. Most authors don&#146;t talk about them much. What they do is really simple, and here it is:</p>

<pre>
// Example 6: Namespace aliases
//
namespace SomeLongNameThatsAnnoyingToSpellOut {
  class Thing { };
}

namespace That = SomeLongNameThatsAnnoyingToSpellOut;

That::Thing t;
</pre>

<p>That is, a namespace alias is just another name for a namespace. Alas, what you can&#146;t do is reopen the namespace using the alias:</p>

<pre>
namespace X = Y;

namespace X { // error, can&#146;t reopen X, it&#146;s an alias
  // ... never get here ...
}
</pre>

<p>Why would we care about this? Because, in particular, it might be nice to rename namespace <B>std</B> to <B>std1</B>, say, and put the C++98 Standard library there, then create a new <B>std2</B> namespace and put the C++0x Standard library there, and then just use <B>std</B> as an alias for the real namespace name:</p>

<pre>
namespace std = std2; // wouldn&#146;t this be nice?
</pre>

<p>But then you&#146;re back in I-can-refer-to-things-using-that-name-but-I-can&#146;t-specialize-templates-using-that-name land:</p>

<pre>
// Used to be legal in C++98, but would break
// if the above were adopted:
//
namespace std { // error, can&#146;t reopen std... rats
  template&lt;&gt; class vector&lt;T*&gt; { };
}
</pre>

<p>The user would have to know about the implementation technique and instead reopen namespace <B>std2</B>. And so, alas, when it comes to namespace aliases for library versioning, saying &#147;<B>=</B>&#148; is not quite enough.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>There are some secondary issues I&#146;ve not addressed in this discussion. Some of the issues I did address had some details slightly glossed for ease of presentation. But the fundamental issues and problems are valid ones, and seeing this should give you a flavor for the issues involved in trying to use C++98 namespaces to manage version change in new library releases. The standard library itself is the case in point, but the discussion applies equally well to any third-party vendor library, for all libraries face these versioning challenges.</p>
<p>There are additional options that are so bad I haven&#146;t even talked about them. For example, one &#147;anti-solution&#148; to Example 2-1 would be to inherit <B>std2::vector</B> from <B>std::vector</B>. This is an absolutely horrid idea. For one thing, it would add overhead to <B>std::vector</B>, because then <B>std::vector</B> would need to be polymorphic solely to make a compatibility hack work. For another, that same addition of polymorphism would change <B>std::vector</B>&#146;s design in a way that gratuitously breaks binary compatibility. For a third, it&#146;s against the spirit of generic programming. For a fourth, if a fourth be needed, it&#146;s just plain ornery wrongheaded, probably fattening, and known to cause cancer in laboratory animals.</p>
<p>When Tom Cargill published his seminal 1994 article &#147;Exception Handling: A False Sense of Security&#148; <a href="#3">[3]</a>, he showed that we as a community didn&#146;t really yet know how to write exception-safe code. What was interesting about that article was that he ended his analysis, not by saying &#147;and here&#146;s how to do it,&#148; but rather by saying &#147;don&#146;t think that the issues I&#146;ve listed are all the issues because there are issues I know about that I haven&#146;t discussed here, I don&#146;t even know if I know all the issues, I don&#146;t think anyone else does either, so I encourage someone in the C++ community to write an article showing how it&#146;s done.&#148; It took three years for such an article to appear (that material, since greatly expanded, is now the Exception Safety section of <a href="#2">[2]</a>).</p>
<p>I&#146;d like to end this article on a similar Cargillesque note: I claim that, due to the above issues and others, we as a community don&#146;t really yet know how to use namespaces to effectively version library releases, and at this point, we can&#146;t do better than just keep everything in namespace <B>std</B> forever. There are issues I haven&#146;t discussed here, I don&#146;t even know if I know all the issues, I don&#146;t think anyone else does either, so I encourage someone in the C++ community to write an article showing how it&#146;s done. (There is a group of interested people inside the committee&#146;s library working group discussing this very problem, which group I was volunteered to coordinate, and if an answer is forthcoming it will likely be from someone in that group. That doesn&#146;t mean that other experts shouldn&#146;t try, though.)</p>
<p>Even if a complete solution is possible, I suspect that it will almost certainly require at least minor changes to the core language namespace feature. In the meantime, don&#146;t be surprised if the eventual C++0x Standard library, extensions and all, still ends up living at home in namespace <B>std</B>. Sometimes the outside rent is just too costly, and it pays to live at home.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Herb Sutter. <I>More Exceptional C++</I> (Addison-Wesley, 2002), &lt;www.gotw.ca/publications/mxc++.htm&gt;.</p>
<p><a name="2"></a>[2]  Herb Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000), &lt;www.gotw.ca/publications/xc++.htm&gt;.</p>
<p><a name="3"></a>[3]  Tom Cargill. &#147;Exception Handling: A False Sense of Security,&#148; <I>C++ Report</I>, November-December 1994. </p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>

</blockquote></body></html>
