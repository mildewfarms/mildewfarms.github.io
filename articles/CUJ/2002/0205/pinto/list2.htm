<HTML><HEAD>
<TITLE>May 2002/Programming in GNOME with C++/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: A GUI version of the wc program</A></h4>
<pre>
/*
 * Paulo Pinto (pjmlp_pt@yahoo.com) (c) 2001
 * An GUI version of the wc program
 */
#include &lt;gtk--/label.h&gt;
#include &lt;gtk--/fileselection.h&gt;
#include &lt;gnome--/main.h&gt;
#include &lt;gnome--/app.h&gt;
#include &lt;gnome--/stock.h&gt;

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;cctype&gt;

//Bring the slot binding command to global scope
using SigC::slot;

// Application
// A minimalist graphical view of wc
class GWCApp: public Gnome::App {
public:
  GWCApp ();
  virtual ~GWCApp ();

protected:
  gint delete_event_impl (GdkEventAny*);

  //Signal handlers:
  virtual void on_menu_open ();

  void process_file ();

private:
  bool count_words (const std::string &amp;filename, int &amp;words, 
    int &amp;lines, int &amp;bytes);
  void init_menus ();
  void init_toolbar ();

  Gtk::Label *m_text;
  Gtk::FileSelection *m_filesel;
};

// The program entry point.
// Just create a GWCApp instance and
// launch it.
// Please note that in ANSI C++ the
// return is optional
int main (int argc, char *argv [])
{
  // Initialize the framework
  Gnome::Main kit ("gwc", "0.0.1", argc, argv);
  GWCApp app;

  // Make the window appear
  app.show ();

  // Enter into the event loop
  kit.run ();
}



GWCApp::GWCApp ():
  Gnome::App ("gwc", "GWC")
{
  // Create the text label for showing the word count
  m_text = new Gtk::Label ("No file counted");

  // Set the window contents. Please note that
  // m_text must be deleted explicitly.
  // It is deleted in GWCApp::~GWCApp ()
  set_contents (*m_text);

  // Create the dialog box for opening files
  // We don't need to create it here but this
  // is just for ilustrive purposes.
  m_filesel = manage (new Gtk::FileSelection ("Open File"));

  // Connect the ok_button to file_ok_sel function
  m_filesel-&gt;get_ok_button()-&gt;clicked.connect(slot(this, 
    &amp;GWCApp::process_file));

  // Connect the cancel_button to hide the window
  m_filesel-&gt;get_cancel_button()-&gt;clicked.connect
    (m_filesel-&gt;hide.slot());
  
  init_menus ();
  init_toolbar ();
}


GWCApp::~GWCApp ()
{
  // Delete the label. We don't need to delete
  // the file selection because it is handled
  // by manage.
  delete m_text;
}

// Creates the application menus
void GWCApp::init_menus ()
{
  // Create a file menu using helper functios.
  // There are other ways of building menus but this
  // is the easiest.
  using namespace Gnome;
  using namespace Gtk::Menu_Helpers;
  
  // Entries for the file submenu
  UI::Info file_menu[] = { MenuItems::Open (slot (this, 
    &amp;GWCApp::on_menu_open)),
               UI::Separator(),
               MenuItems::Exit(Gtk::Main::quit.slot ())
  };

  // This is the for the menu toolbar
  UI::SubTree menus[] = { Menus::File(file_menu) };
  
  //  Create and attach the menus to the
  // application window
  create_menus(menus);
}



// Creates the application toolbar
void GWCApp::init_toolbar ()
{
  // Create a toolbar using helper functios.
  using namespace Gnome;

  UI::Info toolbar[] = {UI::Item(UI::Icon(GNOME_STOCK_PIXMAP_OPEN),
                                "Open", slot(this, 
                                  &amp;GWCApp::on_menu_open),
                                "Open a file"),
                        UI::Separator (),
                        UI::Item(UI::Icon(GNOME_STOCK_PIXMAP_EXIT),
                                 "Exit", Gtk::Main::quit.slot (),
                                 "Exit the application")
                       };
  
  //  Create and attach the toolbar to the
  // application window
  create_toolbar(toolbar);
}



//  Called when the user presses the 'X' mark
// on the window.
//  Redefining this method is another way of
// receiving the 'delete' signal.
gint GWCApp::delete_event_impl(GdkEventAny*)
{ 
  Gtk::Main::quit();
  return FALSE; 
}


//  Called when the user selects the
// File-&gt;Open option
void GWCApp::on_menu_open ()
{
  m_filesel-&gt;set_modal (true);
  m_filesel-&gt;show ();
}

//  Called when the user presses the
// Ok button on the FileSelection dialog
void GWCApp::process_file ()
{
  m_filesel-&gt;hide ();
  std::string filename = m_filesel-&gt;get_filename ();
  int words, lines, bytes;
  std::ostringstream msg;

  // Clear and force a redraw, or else
  // the older string will appear
  m_text-&gt;set_text ("");
  draw (0);

  if (!count_words (filename, words, lines, bytes)) {
    msg &lt;&lt; "Couldn't open " &lt;&lt; filename;
    Gnome::Dialogs::error (msg.str ());
  }
  else {
    msg &lt;&lt; "The file " &lt;&lt; filename;
    msg &lt;&lt; ", has " &lt;&lt; lines &lt;&lt; " lines, " &lt;&lt; words &lt;&lt; " words and ";        
    msg &lt;&lt; bytes &lt;&lt; " bytes." ;

    m_text-&gt;set_text (msg.str ());
  }
}

// Counts all the words, lines and bytes.
// This isn't the most eficient way to do it, but
// it servers the purpose of the example.
bool GWCApp::count_words (const std::string &amp;filename, int &amp;words, 
  int &amp;lines, int &amp;bytes)
{
  std::ifstream in (filename.c_str ());
  if (!in)
     return false;

  words = 0;
  lines = 0;
  bytes = 0;
  char ch;
  while (!in.eof ()) {
    // Advance the file pointer to the next
    // word
    do {
      in.get (ch);
      if (!in.eof ()){
        bytes++;

        // Ok, now changing for the next line
        if (ch == '\n')
          lines++;
      }
    } while (!in.eof () &amp;&amp; isspace (ch));

    // Advance the file pointer to the next
    // white space
    if (!in.eof ()) {
      words++;
      do {
        in.get (ch);
        if (!in.eof ())
          bytes++;
      } while (!in.eof () &amp;&amp; !isspace (ch));
    }
  }

  return true;
}
&#151; End of Listing &#151;</pre></body></html>
