<HTML>   
     <HEAD>
<TITLE>May 2002/Programming in GNOME with C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Programming in GNOME with C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Paulo Pinto</FONT></H3>

<BLOCKQUOTE>
<p>A C++ binding for GNOME makes Linux GUIs easy work.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>When choosing a programming language in which to develop an application for GNOME (GNU Network Object Model Environment), C is the natural choice. This is because C is used to develop GNOME. So what options are available to C++ programmers? One of them is to create your own framework, wrapping the C API that you need for your application. However, it would be better if such a framework already existed. In fact, it does, and it is accepted as the official C++ binding for GNOME. It is known as Gnomemm and will be the focus of this article.</p>

<H3><FONT COLOR="#000080">Overview</FONT></H3>

<p>As with any other framework, Gnomemm is composed of several parts (see <a href="fig1.htm">Figure 1</a>). The main parts are Gtkmm, which wraps Gtk+ functionality; Gnomemm for the GUI part of GNOME; and libsigc++ for signal/slot handling. <a href="tab1.htm">Table 1</a> shows all the major components and their functionality.</p>
<p>To build Gnomemm applications, you need to have at least three components:</p>

<UL><LI>   libsigc++</LI>
<LI>   Gtkmm</LI>
<LI>   Gnomemm</LI></UL>

<p>Gtkmm/Gnomemm <a href="#1">[1]</a> make heavy use on the abstraction features provided by C++, such as namespaces, templates, and the STL. This means that you need to have a C++ compiler that supports ANSI C++ as closely as possible. For g++, this means at least version 2.95.2.</p>

<H3><FONT COLOR="#000080">Advantages</FONT></H3>

<p>Experienced C++ developers will be able to anticipate the advantages of wrapping a C API like Gtk+ with an object-oriented framework. But just in case, the advantages are:</p>
<UL><LI>   a clearer API:</LI>
<UL><LI>   better cohesion between the functions and data structures</LI>
<LI>   type-specific parameters (e.g., no mysterious <B>void* struct</B> members, which suppress errors caused by bad parameters)</LI>
<LI>   no need to use several arguments just to pass state around (like handles)</LI></UL>
<LI>   less code:</LI>
<UL><LI>   no need for repetitive cast macros, like <B>GTK_WIDGET</B></LI>
<LI>   the C++ type system will handle conversions between widgets</LI></UL>
<LI>   increased type-safety:</LI>
<UL><LI>   more code problems found at compile time</LI></UL>
<LI>   incredibly simple derivation of new widgets, using C++ inheritance:</LI>
<UL><LI>   derivation of new widgets is complex and error-prone in normal Gtk+, because it forces the user to create several structures with a specific layout and with complex initializations</LI></UL>
<LI>   type-safe callbacks:</LI>
<UL><LI>   the compiler will tell you if your callback (signal handler) does not match the signal</LI>
<LI>   in Gtk+/GNOME it is possible to associate a callback to a signal with the wrong signature</LI></UL>
<LI>   more organized code:</LI>
<UL><LI>   the simpler code and ease of derivation remove obstacles to code refactoring</LI></UL>
<LI>   simpler memory management:</LI>
<UL><LI>   no worrying about when a <B>char*</B> or <B>GList*</B> should be deallocated; the constructors and destructors of the widgets handle the allocation/deallocation of data</LI></UL>
</UL>

<H3><FONT COLOR="#000080">Creating a Window</FONT></H3>

<p>It&#146;s time to show a Gtkmm application. Start by creating a window with &#147;Hello World&#148; as the caption, using the Gtk+ part of the framework.</p>
<p>Start by including common headers:</p>

<pre>
#include &lt;gtk&#151;/main.h&gt;
#include &lt;gtk&#151;/window.h&gt;
</pre>

<p>Initialize the framework and create the window:</p>

<pre>
int main (int argc, char *argv [])
{
  Gtk::Main kit (argc, argv);
  Gtk::Window win;
</pre>

<p>Set the window caption to &#147;Hello World&#148;:</p>

<pre>
  win.set_title ("Hello World");
</pre>

<p>The destroy signal must be handled or the user won&#146;t be able to close the window by clicking on the &#147;X&#148; button:</p>

<pre>
  win.destroy.connect
    (Gtk::Main::quit.slot ());
</pre>

<p>Show the window and begin the event-processing loop:</p>

<pre>
  win.show ();

  kit.run ();
}
</pre>

<p><a href="list1.htm">Listing 1</a> shows the complete source code for the program.</p>
<p>To compile the application, you will need to use the following command:</p>

<pre>
g++ -o hello hello.cpp 'gtkmm-config &#151;cflags &#151;libs' -lgnomemm
</pre>

<p>For those who are curious about <B>gtkmm-config</B>, it is a shell script that gives the compiler the correct flags for the platform where it is run.</p>
<p>When running the application, a window (see <a href="fig2.htm">Figure 2</a>) will appear, which you can close by clicking on the &#147;X&#148; part of the window.</p>

<H3><FONT COLOR="#000080">What Are Signals and Slots?</FONT></H3>

<p>Many readers may not know what signals and slots are if they haven&#146;t looked at Gtk+, or even Qt, before. In GUI toolkits like Gtk+, the events that are sent to the application are known as signals. The callbacks associated with those signals are called slots.</p>
<p>Every signal can have multiple slots, and a slot can respond to several different signals. In Gtk+ slots are functions. In Gtkmm/Gnomemm, they can be simple functions or member functions. In the case of member functions, they can be virtual or static.</p>

<H3><FONT COLOR="#000080">A Better wc</FONT></H3>

<p>The hello world program is fine for a first example, but now it&#146;s time to do something more substantial. Let&#146;s next create a GNOME version of the popular Unix command-line program, wc <a href="#2">[2]</a>. This program will allow the user to select a file and then display the line, word, and byte count of the file, just like wc. <a href="fig3.htm">Figure 3</a> shows gwc after it is launched. In <a href="fig4.htm">Figure 4</a>, gwc displays the results of processing a file.</p>
<p>In Gnomemm, all GNOME applications inherit from <B>Gnome::App</B>, and so will gwc. The gwc window will be composed of a menu, a toolbar, and a text label for displaying results. These items will be created in the constructor of the application window (shown below).</p>
<p>First, the label is created and used as the contents for the application window:</p>

<pre>
m_text = new Gtk::Label ("No file counted");
set_contents (*m_text);
</pre>

<p>The created label will have to be explicitly deleted. Compare this with the use of the <B>manage</B> call (described below).</p>
<p>Then a file selection dialog is created so that whenever gwc needs to ask the user for a file, it is already there. Note that this is just an application design choice. You could alternatively choose to create the dialog every time the user tries to open a file.</p>

<pre>
// Allocate the dialog and let the
// library handle the memory used by it
m_filesel =
  manage (new Gtk::FileSelection ("Open File"));

// Connect the ok_button to file_ok_sel function
m_filesel-&gt;get_ok_button()-&gt;clicked.connect
  (slot(this, &amp;GWCApp::process_file));

// Connect the cancel_button to hide the window
m_filesel-&gt;get_cancel_button()-&gt;clicked.connect
  (m_filesel-&gt;hide.slot());
</pre>

<p>Some things need to be emphasized here. First, a slot must be connected to the signal that is triggered when the user presses the OK button. This is the best way to process the information from the dialog. Another solution would be to set a flag so that the code that calls the dialog knows the user has selected a file.</p>
<p>The second noteworthy point has to do with the <B>manage</B> call. In Gtkmm/Gnomemm, you can create widgets on the stack, inside class objects, or on the heap. If you create them on the heap, you are expected to delete the widgets unless you pass the ownership of the widget to the Gtkmm/Gnomemm library, by calling <B>manage</B>. In that case, the library will delete the widget when it is safe to do so. There are some subtleties in using <B>manage</B>, so some care must be taken in its use. Don&#146;t use <B>manage</B> like it is the solution for all your memory problems. In fact, use it only for widgets that are added to a containers <a href="#3">[3]</a> and not for top-level windows, or dialogs for that matter. Think of it as letting the widget be &#147;managed&#148; by the container that owns it.</p>
<p>Next, how are the menus constructed? You can use the wrapped Gtk+/GNOME APIs, the native Gtk+/GNOME APIs, or the menu helpers. Our sample gwc program will use the last solution because it is simple to understand, and to me it&#146;s also the most natural choice. Helpers are special objects that manage the creation of widgets that must be inserted into <B>Gtk::Container</B> widgets. Their use makes the task of building multi-item widgets, like menus, less error-prone.</p>
<p><B>gwc</B>&#146;s &#147;File&#148; menu is built like this:</p>

<pre>
UI::Info file_menu[] =
  { MenuItems::Open (slot (this, &amp;GWCApp::on_menu_open)),
    UI::Separator(),
    MenuItems::Exit(Gtk::Main::quit.slot ())
    };
</pre>

<p>The first and third array entries create standard menu options and specify which slots will be invoked when the user selects that option. As for the second entry, it is a normal horizontal line that&#146;s commonly used to separate different sets of menu options. But a menu will be useless if it isn&#146;t attached to a menu bar, so you will also need to declare the menu bar:</p>

<pre>
UI::SubTree menus[] = { Menus::File(file_menu) };
</pre>

<p>Now that you have a menu bar, the application must generate the menu layout from it and attach the result to the application window.</p>

<pre>
create_menus(menus);
</pre>

<p>I must emphasize that although the menu helpers are based on templates, they are quite easy to use.</p>
<p>You may have noted that <a href="list2.htm">Listing 2</a> doesn&#146;t connect a callback to the delete event, which would seem to mean that the users won&#146;t be able to close the gwc window. Well that isn&#146;t quite true, because the user will be able to close it.</p>
<p>How? If you take a closer look at <a href="list2.htm">Listing 2</a>, you will see a declaration for <B>delete_event_impl</B>, and that method is responsible for terminating the application. All widgets have virtual member functions for their signals, with the same name as the signal and a <B>_impl</B> suffix. So it is possible to process signals without having to connect the signal to a slot. That was what happened to the delete event. This way it is easier to alter the behavior of some signal handlers.</p>
<p>Finally, no modern GUI application would be complete without a toolbar, so gwc should also have one. The process for creating toolbars is the same as for menus, so a vector is declared with an item for each toolbar button and an icon for that button <a href="#4">[4]</a>. After that, the following are added: a name for the button, the slot to call when the user presses the button, and the text for the tooltip. Simple, isn&#146;t it?</p>

<pre>
UI::Info toolbar[] =
  {UI::Item(UI::Icon
    (GNOME_STOCK_PIXMAP_OPEN),
    "Open", slot(this,
      &amp;GWCApp::on_menu_open),
    "Open a file"),
    UI::Separator (),
    UI::Item(UI::Icon
    (GNOME_STOCK_PIXMAP_EXIT),
      "Exit", Gtk::Main::quit.slot (),
      "Exit the application")
    };
</pre>

<p>After initializing the <B>toolbar</B> vector, it must be added to the application window with:</p>

<pre>
create_toolbar(toolbar);
</pre>

<p>In this case, I just used a built-in array of <B>UI::Info</B>, but <B>create_toolbar</B> accepts other types (i.e., <B>std::vector&lt;&gt;</B> or <B>std::list&lt;&gt;</B> with an <B>UI::Info</B> argument can also be used). It all depends on the needs of your application.</p>

<H3><FONT COLOR="#000080">Current State of Gtkmm/Gnomemm</FONT></H3>

<p>At this time, Gtkmm wraps all of the widgets provided by the stable Gtk+ 1.2.x. Support for the upcomming Gtk+ 2.0, with Pango and GObject, is now available in CVS as of version 1.3.x. Gnomemm wraps all the <B>gnome-libs</B> 1.2.x widgets. Unfortunately, Gnomemm still lacks support for Bonobo components, the XML handling framework <a href="#5">[5]</a>, the audio handling, and some other things. But don&#146;t be put off by this; after all, Gtkmm/Gnomemm are already very usable, and you can always wrap the functionality that you need. And who knows, you could even give that work back to the community and help Gtkmm in doing so.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This article provides a very quick overview about Gtkmm and shows that C++ programmers are supported and welcome in GNOME. Of course many things are still lacking. If you can help, the Gtkmm team would surely appreciate your help.</p>
<p>I hope that you will give Gtkmm a try in you next project.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>I wish to thank to Murray Cumming, one of the Gtkmm developers, for his input on this article. I also dedicate this article to the memory to my grandfathers.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Gtkmm/Gnomemm were previously known as Gtk--/Gnome--.</p>
<p><a name="2"></a>[2]  For those who don&#146;t know what wc is, it is a very common program in Unix that counts the number of words, lines and bytes in a file.</p>
<p><a name="3"></a>[3]  That is, widgets that can own other widgets. For example, a window is a container for any kind of widget that can be placed inside it.</p>
<p><a name="4"></a>[4]  In Gtk+/GNOME, the icons in the toolbars are optional.</p>
<p><a name="5"></a>[5]  You also could use any other C++ XML parser, such as Xerces from &lt;http://xml.apache.org&gt;. Bakery uses Xerces-C++ to provide a Document/View for Gnome--, which uses XML.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
Gtkmm &#151; &lt;http://gtkmm.sourceforge.net/&gt;</p>
Gtkmm mailing list &#151; &lt;http://gtkmm.sourceforge.net/mailinglist.html&gt;</p>
Gtkmm FAQ &#151; &lt;http://gtkmm.sourceforge.net/docs/gtkmm-faq.html&gt;</p>
libsigc++ &#151; &lt;http://libsigc.sourceforge.net/&gt;</p>
Bakery &#151; &lt;http://bakery.sourceforge.net&gt;</p>
Glade-- &#151; &lt;http://home.wtal.de/petig/Gtk/&gt;</p>
Gladecc &#151; &lt;www.geocities.com/SiliconValley/Bit/8083/gladecc.htm&gt;</p>
GConf-- &#151; &lt;http://gconfmm.sourceforge.net/&gt;</p>
GtkExtra-- &#151; &lt;http://gtkextramm.sourceforge.net/&gt;</p>
GtkGLArea-- &#151; &lt;www.ece.ucdavis.edu/~kenelson/gtkglareamm/&gt;</p>
Gtk+ &#151; &lt;www.gtk.org&gt;</p>
GNOME &#151; &lt;www.gnome.org&gt;</p>

<p><i><B>Paulo Pinto</B> holds a degree in CS from New University of Lisbon. He currently works at Altitude Software doing systems programming. His interests include graphics programming and compiler development.</i></p>

<h4><a href="../../../source/2002/may02/pinto.zip"></a></h4>
</blockquote></body></html>
