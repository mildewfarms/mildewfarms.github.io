<HTML>   
     <HEAD>
<TITLE>May 2002/A Per-Thread Singleton Class</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Multithreading</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Per-Thread Singleton Class</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Puneesh Chaudhry</FONT></H3>

<BLOCKQUOTE>
<p>A refreshing look at an old pattern.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>A <B>Singleton</B> class is used when there must be exactly one instance of a class, and it must be accessible to all users from a well-known access point. To ensure that exactly one instance of a class is created, the class itself is made responsible for keeping track of its sole instance. Most <B>Singleton</B> classes ensure this by intercepting requests to create new objects. Whenever there is a request for an instance of a class, the class checks to see if an instance already exists. If the instance exists, then the class returns it, else a new instance is created, which is returned in response to the current and subsequent requests.</p>

<H3><FONT COLOR="#000080">Need for a Per-Thread Singleton</FONT></H3>

<p>The traditional <B>Singleton</B> class allows exactly one instance per process (see sidebar, <a href="sidebar1.htm">&#147;How a Traditional <B>Singleton</B> Class Works&#148;</a>), but in the multithreaded world of today, often you need an instance of a class for every thread in the process. For example, many Windows NT services are implemented as a server in a client-server environment. Many of these services create a separate thread to process an incoming request from a client. In most of these implementations, the different threads can run completely independent of each other. Usually each of these threads creates one or more objects, which contain the context information specific to the thread. Examples of the contents of these objects may be sockets on which the thread communicates with the client, thread-specific logging information, etc. Most of the functions that are executed as part of the thread execution need access to these objects in order to do their job. Short of passing these objects as a parameter to every function, you need a way to allow all the functions to access these objects. In a multithreaded environment, it is not possible to have this object as a global variable. A traditional <B>Singleton</B> class also does not work here, as you need multiple instances per process and, to be precise, a single instance per thread. This is where a per-thread <B>Singleton</B> class can be helpful.</p>

<H3><FONT COLOR="#000080">Per-Thread Singleton Attributes</FONT></H3>

<p>A thread-specific <B>Singleton</B> class should have the following properties:</p>

<UL><LI>   exactly one instance per thread</LI>
<LI>   a global point of access</LI>
<LI>   a way to destroy the thread-specific instance</LI></UL>

<p>The first two properties are similar to those of a traditional <B>Singleton</B> class. The third is usually not an issue for the traditional <B>Singleton</B> class since the solitary instance is created and stored as a static member variable in the class, which goes away when the program exits. However, the same strategy doesn&#146;t work for a thread-specific <B>Singleton</B> class. Because of the way the per-thread <B>Singleton</B> class is implemented, the thread-specific instance needs to be explicitly destroyed (more on this later).</p>

<H3><FONT COLOR="#000080">Ensuring One Instance per Thread</FONT></H3>

<p>You need a way to store instances of the class on a per thread basis. You cannot store them as static members as there is only one copy of a static member per process. The Windows NT/2000 operating system has a really cool feature called TLS (Thread Local Storage) that can help here (see the sidebar, <a href="sidebar2.htm">&#147;TLS&#148;</a>). TLS is a method by which each thread in a multithreaded process may allocate locations in which to store thread-specific data. These locations are referenced by TLS indexes, which are unique in a process. Using the same index in different threads in a process, you can retrieve data that is local to each of the threads.</p>

<H3><FONT COLOR="#000080">Global Point of Access</FONT></H3>

<p>Similar to the traditional <B>Singleton</B> classes, the per-thread <B>Singleton</B> classes provide a <B>GetObject</B> type function, which is the only publicly available interface to access an instance of the class. <B>GetObject</B> takes care of returning the thread-specific instance of the class to the caller.</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows an implementation of a per-thread <B>Singleton</B> class. The implementation uses Win32 APIs for TLS. This class looks similar to the traditional <B>Singleton</B> class and has the following things in common:</p>

<UL><LI>   The constructor of the class is private.</LI>
<LI>   The class has a public, static member function called <B>GetObject</B> to get an instance of the class.</LI></UL>

<p>Although this class also has a static member variable like the traditional <B>Singleton</B> class, the purpose of this member is very different. This variable stores the TLS index, which can be used to retrieve the thread-specific instance of this class. Whenever you need an class object, you can call the function <B>ThreadSingleton :: GetObject</B>. This function checks the TLS index to see if an instance of the class already exists for the current thread. If the instance exists, this function just returns the instance; else it creates a class object, stores it in the TLS index, and returns the newly created object. Any further calls to get the object just retrieve the object from the TLS index and return that instance. This way, functions executing in different threads can all access an instance of the object created for their own thread.</p>
<p>As shown in <a href="list1.htm">Listing 1</a>, there are two threads:</p>

<OL><LI>The main thread, which gets created when the function <B>main</B> is entered.</LI>
<LI>The second thread, which is created using the Win32 API <B>CreateThread</B> inside the function <B>main</B>.</LI></OL>

<p>Both the threads create an instance of the <B>ThreadSingleton</B> class using the member function <B>GetObject</B>. You can see that both the threads get their own copy of the <B>ThreadSingleton</B> object by the different thread IDs returned by the function <B>GetThreadID</B>.</p>

<H3><FONT COLOR="#000080">Destroying the Per-Thread Instance</FONT></H3>

<p>When the thread exits, the instance stored in the TLS area doesn&#146;t get deleted automatically. This instance needs to be explicitly destroyed. To destroy the instance, the class provides another static member function, <B>ThreadSingleton :: DestroyObject</B>. To destroy the thread-specific instance, you need to ensure that this function gets called, exactly once, at the end when the thread is exiting. The easiest way to do this is to declare an object of a class that I call <B>ThreadSingletonDestroyer</B> at the top of the <B>ThreadMain</B> function. You&#146;ll make use of the property that a thread exits whenever <B>ThreadMain</B> exits and that the exit of <B>ThreadMain</B> results in calling the destructor of the <B>ThreadSingletonDestroyer</B> object declared in <B>ThreadMain</B>. To destroy the thread-specific instance, you will call the function <B>ThreadSingleton :: DestroyObject</B> in the destructor of the <B>ThreadSingletonDestroyer</B> class, thereby ensuring that the thread-specific instance is automatically deleted when the thread exits (see <a href="list1.htm">Listing 1</a>). <B>DestroyObject</B> is a private function of the <B>ThreadSingleton</B> class, preventing anybody other than the <B>ThreadSingletonDestroyer</B> class, which is a <B>friend</B>, from calling it.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The per-thread <B>Singleton</B> class provides a convenient way to access thread-specific data. No longer do you need to pass thread-specific context data to all the functions that need it; the data is just one well-known function call away. The <B>ThreadSingleton</B> class interface is very similar to the traditional <B>Singleton</B> class interface making it easy to use and understand. A benefit of the class is that it also hides operating-system-specific mechanisms to access thread-specific data. For example, many operating systems support thread-specific storage, but the usage is always different. With this class, it is easy to tailor the implementation of the class to use operating-system-specific ways to store and retrieve thread-specific data, while the interface remains the same and the caller does not need to change.</p>

<p><i><B>Puneesh Chaudhry</B> is a principal software engineer for EMC Corporation in Milford, MA. He has a B.E. in Computer Science from Delhi College of Engineering. His interests include backup and other storage technologies. He can be reached at <B>puneesh@mil.emc.com</B>.</i></p>

<h4><a href="../../../source/2002/may02/chaudhry.zip"></a></h4>
</blockquote></body></html>
