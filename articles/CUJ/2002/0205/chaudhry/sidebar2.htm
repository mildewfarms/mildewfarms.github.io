<html><HEAD>
<TITLE>May 2002/A Per-Thread Singleton Class/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">TLS</FONT></H3>

<HR>

<BLOCKQUOTE>
<p>TLS is a Win32 mechanism that allows multiple threads of a process to store and retrieve data that is unique for each thread. Any one thread allocates an index, and then this index is available for use by all the threads in the process. Each thread in the process has its own TLS slot for this index where a 32-bit pointer to data can be stored and retrieved from. TLS is used as follows:</p>

<OL><LI>Use the Win32 API <B>TlsAlloc</B> to allocate a TLS index.</LI>
<LI>In a thread that needs to use TLS storage, allocate dynamic storage and then use the Win32 API <B>TlsSetValue</B> to associate the index with a pointer to the dynamic storage.</LI>
<LI>In the same thread, when any piece of code wants to retrieve the data structure stored in the specified TLS index, use the Win32 API <B>TlsGetValue</B>, which retrieves the pointer stored using <B>TlsSetValue</B>.</LI>
<LI>Use the Win32 API <B>TlsFree</B> to free the index when all the threads are done using the index. In addition, each thread must free the dynamic storage it allocated to associate with the TLS index.</LI></OL>

<p>The APIs <B>TlsSetValue</B> and <B>TlsGetValue</B> are designed for extremely fast storage and retrieval. As a result, these APIs do minimal parameter checking. For example, as long as the index specified in these APIs is less than the value <B>TLS_MINIMUM_AVAILABLE</B>, these APIs succeed, even though the index may not have been allocated. It is up to the programmer to ensure that the index is valid.</p>
</blockquote></body></html>
