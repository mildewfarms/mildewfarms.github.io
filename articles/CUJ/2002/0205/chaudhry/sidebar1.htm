<html><HEAD>
<TITLE>May 2002/A Per-Thread Singleton Class/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">How a Traditional Singleton Class Works</FONT></H3>

<HR>

<BLOCKQUOTE>

<p>As the name indicates, the traditional <B>Singleton</B> class allows exactly one instance of the class to be created. The class ensures this by assuming the responsibility to regulate the creation of its objects. The class makes its constructor private, disallowing the direct creation of its objects. In addition, the class defines a static member function that must be called to get an instance of the class. The class also has a static member that stores the pointer to the sole instance of the class. A sample class is shown below:</p>
<pre>
class Singleton
{
public:
static Singleton* GetObject();
protected:
         Singleton();
private:
static Singleton *m_Instance;
}
</pre>

<p>The only way to get access to an object of the class is to call the static member function <B>GetObject</B>. When called, <B>GetObject</B> first checks if an instance of the class exists, by checking if <B>m_Instance</B> is <B>NULL</B>. If <B>m_Instance</B> is <B>NULL</B>, then this function creates the first and only instance of the class <B>Singleton</B>, assigns it to <B>m_Instance</B>, and returns it. Subsequent calls to <B>GetObject</B> just return the value stored in <B>m_Instance</B>, ensuring that only one instance of the class is ever created.</p>
</blockquote></body></html>
