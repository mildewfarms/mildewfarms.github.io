<HTML>   
     <HEAD>
<TITLE>May 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>In a footnote to his article on complex numbers in the March 2002 issue of <I>CUJ</I>, Matt Austern suggests that the name &#147;norm&#148; used to denote the square of the absolute value of a complex number is somehow arbitrary. I disagree: this is a perfectly standard term in algebraic number theory for the product of the conjugates of an element of a field extension and applies perfectly to a templated complex number class.</p>
<p>John Wilkinson</p>

<p><I>In the world of algebraic number theory, then, we&#146;re in good shape. Perhaps Matt was commenting on that fact that in many areas of applied mathematics, &#147;norm&#148; usually denotes the square root of that product, most notably, the Euclidean norm for finite-dimensional vector spaces. In fact, in the theory of linear spaces, &#147;norm&#148; is considered a generalization of length, which supports using the square root. Because of the similarity of two-dimensional Euclidean space to the complex plane, the term &#147;norm&#148; most often refers to the Euclidean norm, which is the square root of what </I><B>std::norm</B><I> computes. Both quantities satisfy the properties of norms, of course, but most practitioners in disciplines with physical, scientific applications (i.e., those that use computers in their daily work of numerical computation) find a function named &#147;norm&#148; that returns the square of the Euclidean norm a bit odd, so they naturally look askance at </I><B>std::norm</B><I>.</I></p>
<p><I>By the way, in the footnote of that article, my editorial comment should have read &#147;how about </I><B>norm2</B><I>,&#148; (for some reason it was edited incorrectly to read &#147;how about </I><B>norml</B><I>&#148;) to suggest &#147;norm-squared.&#148;</I></p>
<p><I>Thank you for the positive feedback. (We need all we can get!). &#151; cda</I></p>

<hr><p>Hello.</p>
<p>I do some numerical programming and would be interested in issues on floating-point math algorithms: tips for enhanced speed and accuracy, etc.</p>
<p>For example, a specific program I am working on at the moment requires me to write a matrix inversion utility for dynamic two-dimensional arrays (an <B>N</B> by <B>N</B> array) in C++. The user will input the size, <B>N</B>, of the array he wants to analyze, the data will then be read from a file, and my utility will solve it. I have been on several forum sites, and everybody has a different way of doing it. I would like to know if there is a &#147;best practices&#148; for the input of dynamic two-dimensional arrays in C++.</p>
<p>I would be interested in similar &#147;best practices&#148; for other generic scientific/engineering applications; for example, matrix inversion, numerical integration, root finding, etc.</p>
<p>Do you have an upcoming issue planned that will address some of these issues? Or if they have already been covered in previous issues, please let me know the issues, so I can dig up the relevant back issues.</p>
<p>Thank you.</p>
<p>David Binner</p>

<p><I>We occasionally run articles of this nature, especially in our Scientific Programming theme issue (November). You can find many answers in the excellent book, </I>Numerical Recipes in C++<I>, by William H. Press et al, Cambridge University Press, 2002.</I></p>

<hr><p><I>CUJ</I>,</p>
<p>After reading Fabio Lopiano&#146;s article, &#147;Sending Objects across Platforms&#148; (October 2001), I decided to go ahead and try his approach. However, what I soon realized was that there was no support for sending <B>char * (eg. char *t=new char[10];)</B> class members easily using his method. Of course, you can cheat by using the <B>netarray</B> class (or something very similar to it), but that means you need to specify the size of the <B>char *</B> both when sending and receiving to/from the buffer. This leaves me wondering if there&#146;s a better way to implement the support of <B>char *</B> class members (and most other pointer types, by the way).</p>

<p><I>When sending an object through the network, both sides need to know the object&#146;s exact size. If the object is an array (or in general a sequence of objects of the same fixed size), there are two possibilities: either both sides know in advance the number of elements of the sequence, or this information must be sent along with the objects. The first case is addressed by the class </I><B>NetArray&lt;&gt;</B><I>, the latter by </I><B>NetVector&lt;&gt;</B><I>.</I></p>
<p><I>So, if you use those two classes (or other containers structured in the same way) to store your sequences, you should not have any problems.</I></p>
<p><I>On the other hand, if you insist on using a </I><B>char *</B><I> member in your class, you should keep track of how many elements it holds in some way (not only in order to send them through the network, but also to access them in your program).</I></p>
<p><I>It is enough to send the length before the data and use it in the receiving side to allocate enough memory to store the array. For example:</I></p>

<pre>
class A : public NetObject
{
  char * data;

  // ... other members omitted

  void netWrite(NetBuffer &amp;buf) const
  {
    // get number of elements in data[]
    int len = ...
    buf &lt;&lt; len;
    for(int i=0; i&lt;len;++i) buf
      &lt;&lt; data[i];
  }

  void netRead(NetBuffer &amp;buf)
  {
    int len;
    buf &gt;&gt; len;
    char new_data = new char[len];
    for (int i=0; i&lt;len;++i) but
      &gt;&gt; new_data[i];
    delete[] data;
    data = new_data;
  }
};</pre>

<p><I>Note that there is no portable way to determine the size of memory pointed to by a </I><B>char *</B><I>, so it&#146;s up to your class to keep the accounting for the length of the array. But again, I suggest using standard containers like </I><B>std::vector&lt;&gt;</B><I> to store your data and wrapping them with </I><B>NetObject</B><I>-derived classes like </I><B>NetVector&lt;&gt;</B><I> to use them inside objects that must be sent over the Internet.</I></p>
<p><I>A final note about your piece of code: in order to </I><B>delete[]</B><I> an array, the compiler may keep track of the number of elements pointed to, but not where you are looking at it. In fact, this information should survive the function where the data is allocated (in order to allow the deletion in other functions), so the information must be kept in the heap and not in the stack. For example, this information may be put in the few bytes before the start of the array. Again, the information is compiler-dependent, and usually it does not match the exact size of the array, but the size actually allocated (which may be rounded up to some multiple of eight, for example).</I></p>
<p><I>Best regards,</I></p>
<p><I>Fabio Lopiano</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I&#146;m sure you&#146;ve gotten a hundred letters on this, but Mark Nelson&#146;s daughter&#146;s homework problem (March 2002, &#147;C++ Algorithms: <B>next_permutation</B>&#148;) has no solution. His code (Listing 1, page 42) lists only five of the six constraints on the magic square. When the sixth constraint is added,</p>

<pre>
(a[3] + a[4] + a[5]) == 17
</pre>

<p>the program fails to return any results.</p>
<p>Grant Schultz</p>

<p><I>Hi Grant,</I></p>
<p><I>You are quite correct that the figure in the article has an error. Mea culpa! This is an example of a common programming problem: the documentation doesn&#146;t match the code. And as always, you have to trust the code.</I></p>
<p><I>I posted an updated copy of the figure with the article on my website, &lt;http://dogma.net/markn/articles/Permutations/&gt;.</I></p>
<p><I>Thanks for keeping an eye on things!</I></p>
<p><I>Mark Nelson</I></p>

<hr><p><I>CUJ</I>,</p>
<p>I just recently read Andrew Koenig and Barbara Moo&#146;s article &#147;C++ Made Easier: Naming Unknown Types&#148; (February 2002). In the article, they present three solutions to finding out the type of an expression. I think there is also a fourth way of discerning the type; however, I&#146;m not sure as GCC 2.96 won&#146;t compile it and I don&#146;t know if it is a problem with GCC or with the code; so, here it is to be examined:</p>

<pre>
template&lt; class T &gt;
class CTypeof {
  public:
    typedef T Type;
};

template&lt; class T &gt;
CTypeof&lt;T&gt; type_of(T) {
  return CTypeof&lt;T&gt;();
}

int main() {
  type_of(3)::Type x = 5;
}
</pre>

<p>I would really appreciate if you could tell me whether my solution is valid C++ or not, as well as if it is a general solution to determining the compile time type of an expression.</p>
<p>Thanks!</p>
<p>Tanton Gibbs</p>

<p><I>I&#146;m sorry to say that this solution doesn&#146;t work. The problem is that </I><B>type_of</B><I> is a template function, and functions return values rather than types. Whenever you use the </I><B>::</B><I> operator, whatever is on the left of the </I><B>::</B><I> must be the name of a scope, such as a type or a namespace, rather than an expression that denotes a value.</I></p>
<p>What you&#146;d really like is to be able to use the </I><B>.</B><I> (dot) operator to select a type member. Then you could refer to </I><B>type_of(3).Type</B><I> and it would work. However, there is the problem that the </I><B>type_of</B><I> function would presumably have to be called &#151; either that or there would have to be a rule that in an expression of the form </I><B>x.y</B><I>, where </I><B>y</B><I> represents a member that is a type, the implementation is not permitted to evaluate </I><B>x</B><I>.</I></p>
<p>If it were possible to extract type members of expressions in this way, I can see a number of uses for that ability. Unfortunately, the language doesn&#146;t allow it at present.</I></p>
<p><I>Regards,<br>
Andrew Koenig</I></p>
</blockquote></body></html>
