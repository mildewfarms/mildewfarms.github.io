<HTML>   
     <HEAD>
<TITLE>May 2002/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: bool, Advice to C and C++ Programmers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>True or False: The type bool behaves identically in C99 and C++. True or False: Your C89 bool hackery will survive unscathed under C99. Read and find out.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>There is nothing new under the sun. As I wrote in my first installment of &#147;The New C&#148; <a href="#1">[1]</a>, the C99 Standard contains almost nothing new. Except for two or three features, C99 standardized extensions from existing compilers. So, even if you are using a C compiler that has not been updated in several years, it might contain little pieces of C99. For example, variable length arrays [<a href="#2">2</a>, <a href="#3">3</a>, <a href="#4">4</a>, <a href="#5">5</a>] came from the Cray C compiler, and a similar feature is in GNU C. Compound literals <a href="#6">[6]</a> and designated initializers <a href="#7">[7]</a> came from the Plan 9 C compiler. Lots of compilers have supported <B>long long</B> <a href="#8">[8]</a> for a long, long time. Restricted pointers <a href="#9">[9]</a> have been in compilers for high performance systems for years. The good news for programmers is that if you are using an old compiler that supports an extension that is now part of C99, you need not fear the portability consequences of using that extension quite so much.</p>
<p>There is another aspect of C99 that I find profound (but I am easily awed). There are at least two parts of C99 that any programmer can add to an older compiler simply by creating a header file. The first is the generalized integer support <a href="#10">[10]</a> in the C99 <B>&lt;stdint.h&gt;</B> and <B>&lt;inttypes.h&gt;</B> headers. The second is subject of this column, the <B>bool</B> type.</p>
<p>The <B>bool</B> type came from C++. When I wrote that C99 standardized extensions from existing compilers, I was careful not to over qualify my statement by writing &#147;existing C compilers.&#148; C++ was the source of several features in C99 including mixed declarations and code and new lifetime and initialization rules <a href="#7">[7]</a>. The C99 committee felt strongly that the <B>bool</B> type in C99 should be compatible with C++ and should serve to broaden the intersection of the two languages. However, the C99 committee also had to introduce <B>bool</B> into C99 in such a way as to limit its impact on the existing C code base: moving even large programs from C90 to C99 should be nearly effortless. The C99 committee solved this problem by in effect making the new <B>bool</B> type conditional on whether a new header <B>&lt;stdbool.h&gt;</B> is included. The <B>&lt;stdbool.h&gt;</B> header may be included by C++, where it does nothing. This allows the same source code to be compiled either by C or C++, a particularly important feature when writing header files. Placing <B>bool</B> support in <B>&lt;stdbool.h&gt;</B> also allows programmers without access to C99 to create their own <B>&lt;stdbool.h&gt;</B> and get an approximation to the C99 and C++ feature.</p>
<p>In this column, I am going to discuss the <B>bool</B> type in C99 and describe how to write your own <B>&lt;stdbool.h&gt;</B> if you do not have access to C99.</p>

<H3><FONT COLOR="#000080">Compatibility with Old Code</FONT></H3>

<p>Strictly speaking, there is no functional need for the <B>bool</B> type. Any program that needs a flag can use an <B>int</B> instead. However, even with the crummy variable name, the declaration <B>bool x;</B> communicates a great deal of information to the programmer about the purpose of variable <B>x</B> and how variable <B>x</B> is likely to be used in expressions. Likewise, the expression <B>y = true;</B> communicates information lacking in the computationally equivalent <B>y = 1;</B>. Not surprisingly, many C programmers have their own homegrown version of <B>bool</B> to increase the expressiveness of their programs.</p>
<p>C99 followed C++&#146;s lead and added the type <B>bool</B> and the two boolean constants <B>true</B> and <B>false</B>. In C++, <B>bool</B>, <B>true</B>, and <B>false</B> are keywords in the language. This is a reasonable approach given the pervasive use of overloading involving <B>bool</B> in C++ and its library. However, it does mean that C programs using homegrown <B>bool</B> being ported to C++ frequently encounter compilation errors due to the C++ keywords. Worse, if the homegrown <B>bool</B> uses macros, the C program may hijack the C++ type system causing overloading and the C++ library to malfunction.</p>
<p>C99 lacks user overloading, and <B>bool</B> is not used throughout the C library. Thus, C99 has few problems coexisting with a homegrown <B>bool</B>. To avoid invalidating homegrown versions of <B>bool</B>, C99 declares <B>bool</B>, <B>true</B>, and <B>false</B> as macros in the header <B>&lt;stdbool.h&gt;</B>. If <B>&lt;stdbool.h&gt;</B> is not included, the program can ignore the new boolean type in C99 and can use the names <B>bool</B>, <B>true</B>, and <B>false</B> in any way it pleases. Even when <B>&lt;stdbool.h&gt;</B> is included, there are some provisions for accommodating a homegrown <B>bool</B> (discussed below).</p>
<p>C99 does add one new keyword: <B>_Bool</B>. This is the boolean type built into the C99 compiler. The <B>bool</B> macro in <B>&lt;stdbool.h&gt;</B> merely expands into <B>_Bool</B>. Note that since 1989 the C Standard has reserved all identifiers beginning with an underscore followed by either another underscore or a capital letter. So, the <B>_Bool</B> keyword should not interfere with existing code. Note also that the intended way to use the boolean type in C99 is to include <B>&lt;stdbool.h&gt;</B> and use <B>bool</B>. Not only is <B>bool</B> more tasteful and easier to type, it is also compatible with C++. Never use the <B>_Bool</B> keyword directly.</p>

<H3><FONT COLOR="#000080">The Boolean Type</FONT></H3>

<p>Unless I specifically write otherwise, C and C++ have the same semantics for <B>bool</B>.</p>
<p>The <B>bool</B> type only holds the values <B>true</B> and <B>false</B>. While this requirement only necessitates a single bit of storage, <B>sizeof</B> still needs to return an integral value for <B>sizeof(bool)</B>, and you can take the address of a <B>bool</B> using the <B>&amp;</B> operator. Thus, <B>bool</B> must take up at least a byte of storage, but both C and C++ allow the compiler to use more than one byte. For example, some compiler might make <B>sizeof(bool)</B> equal <B>sizeof(int)</B>.</p>
<p>The <B>bool</B> type is considered to be a member of the integer family of types. Thus, an expression of type <B>bool</B> can be used wherever an expression of type <B>int</B> can be used. (C++ makes an exception for the <B>++</B> and <B>-</B> operators). When a numeric value is needed for a value of type <B>bool</B>, the <B>bool</B> automatically promotes to <B>int</B>. If the <B>bool</B> value is <B>true</B>, its value becomes <B>1</B>. If the <B>bool</B> value is <B>false</B>, its value becomes <B>0</B>.</p>
<p>Arithmetic types and pointer types may be converted to <B>bool</B>. However, this is not the normal conversion to an integer type. A conversion to <B>bool</B> converts the value to <B>true</B> or <B>false</B> the same way that the <B>if</B> statement determines whether its controlling expression is <B>true</B> or <B>false</B>: it implicitly compares the value against zero. Thus,</p>

<pre>
void ex1(char c, int i, double d, char *p)
{
    bool b1 = c;
    bool b2 = i;
    bool b3 = d;
    bool b4 = p;
}
</pre>

<p>is compiled exactly as if it had been written:</p>

<pre>
void ex1(char c, int i, double d, char *p)
{
    bool b1 = c != '\0';
    bool b2 = i != 0;
    bool b3 = d != 0.0;
    bool b4 = p != NULL;
}
</pre>

<p>The conversion to <B>bool</B> works the same regardless of whether it is an explicit or an implicit conversion. Thus, all legitimate ways of getting a value into a <B>bool</B> result in the <B>bool</B> being either <B>true</B> or <B>false</B>, <B>1</B> or <B>0</B>. If the <B>bool</B> is uninitialized or has received a value through some invalid method (assignment through the wrong member of a union or via a mistyped pointer), the program has undefined behavior if it tries to use the value of the <B>bool</B>. Whether such a &#147;bad&#148; <B>bool</B> is either <B>true</B> or <B>false</B> is undefined.</p>
<p>The two boolean constants are <B>true</B> and <B>false</B>, which have the numeric values <B>1</B> and <B>0</B>, respectively. In C99, these constants have type <B>int</B>. In C++, they have type <B>bool</B>. A very minor incompatibility between C99 and C++ is that <B>sizeof(bool)</B> might not equal <B>sizeof(true)</B> in C99. In C99, <B>true</B> and <B>false</B> are just macros that expand to <B>1</B> and <B>0</B>, respectively.</p>
<p><B>true</B> and <B>false</B> may be used in the controlling expressions of preprocessor <B>#if</B> directives. While this is part of both C99 and C++, I&#146;ve encountered a few C++ compilers that issue errors about this. Also beware: a standard feature of the preprocessor is that any identifiers used in the controlling expression of <B>#if</B> that are not defined to be macros are replaced with the constant <B>0</B>. Thus, a preprocessor may consider <B>true</B> to be <B>0</B> (<B>false</B>) if <B>&lt;stdbool.h&gt;</B> is not included when compiling C99. This problem can also occur when compiling C++ if the preprocessor has not been updated to understand <B>true</B> and <B>false</B> for C++.</p>
<p>Bitfield members may have type <B>bool</B>. A <B>bool</B> bitfield never sign extends. Thus, if you store <B>1</B> in a one-bit <B>bool</B> bitfield, the value of that bitfield will be <B>1</B> (a clean <B>true</B>) and never <B>-1</B>. For this reason, C99 considers <B>bool</B> to be an unsigned type. C++ requires this semantics for <B>bool</B> bitfields, but does not explicitly say <B>bool</B>s are unsigned.</p>
<p>The behavior of <B>bools</B> in expressions follows from the rules above. Interesting cases are the <B>++</B> and <B>--</B> operators. <B>++</B> adds one to its operand. If the operand is a <B>bool</B>, its value is converted to an <B>int</B> in order to perform the operation, and then the result is converted back to a <B>bool</B> to be stored. Thus, if you increment a <B>bool</B> whose value is <B>false</B>, you add <B>1</B> to zero getting one, which converts back to <B>true</B>. If you increment a <B>bool</B> whose value is <B>true</B>, you add <B>1</B> to one getting two, which converts back to <B>true</B>. Thus, incrementing a <B>bool</B> always sets its value to <B>true</B>. Likewise, decrementing a <B>bool</B> sets the <B>bool</B> to its logically complemented value (think it through). C++ allows incrementing a <B>bool</B> (but marks the feature as deprecated, which means it might be removed in a future standard). C++ forbids decrementing a <B>bool</B>. C99 allows both.</p>

<H3><FONT COLOR="#000080">&lt;stdbool.h&gt; Coexistence</FONT></H3>

<p>In addition to defining macros for <B>bool</B>, <B>true</B>, and <B>false</B>, <B>&lt;stdbool.h&gt;</B> defines the macro <B>__bool_true_false_are_defined</B> to be <B>1</B>. This warns a homegrown version of <B>bool</B> that <B>&lt;stddef.h&gt;</B> has been included and has defined macros for <B>bool</B>, <B>true</B>, and <B>false</B>.</p>
<p>The homegrown version of <B>bool</B> might check <B>__bool_true_false_are_defined</B> and not define its own versions of <B>bool</B>, <B>true</B>, and <B>false</B>. This might be useful if the homegrown <B>bool</B> is in a project-wide header file that is included everywhere, but a few modules have been converted to use the C99 version of <B>bool</B>.</p>
<p>The homegrown version of <B>bool</B> might also check <B>__bool_true_false_are_defined</B> in order to undefine the macros from <B>&lt;stdbool.h&gt;</B>. Normally, it is undefined behavior to undefine a macro from a standard header. However, C99 permits <B>bool</B>, <B>true</B>, and <B>false</B> from <B>&lt;stdbool.h&gt;</B> to be undefined and possibly redefined to something else. This is considered a short-term concession to coexistence with homegrown versions of <B>bool</B>. The feature is marked obsolescent, and the next version of C99 may withdraw this permission.</p>

<H3><FONT COLOR="#000080">Roll Your Own &lt;stdbool.h&gt;</FONT></H3>

<p>Although you cannot fully add <B>bool</B> to a pre-C99 compiler merely by writing a header file, you can come close. The only thing lacking is that conversions to your own <B>bool</B> will not have the proper semantics of testing the value being converted against zero. If you write such comparisons explicitly, you can write your own version of <B>&lt;stdbool.h&gt;</B> and program portably between C90, C99, and C++.</p>
<p><a href="list1.htm">Listing 1</a> shows my version of <B>&lt;stdbool.h&gt;</B>. Note that no macros are defined if the header is included from C++ in order to not interfere with C++&#146;s built-in <B>bool</B>. If the file is compiled by C99, <B>bool</B> is defined to be <B>_Bool</B> as required by the C99 Standard. If included from pre-C99, <B>bool</B> is defined to be an unsigned type suitable for use as a bitfield. By making the type unsigned, bitfields of length <B>1</B> will not sign extend and thus meet the requirements of C99 and C++. Not all compilers permit unsigned <B>char</B> bitfields, but it is a popular extension. If your compiler complains, define <B>bool</B> to be unsigned <B>int</B>.</p>
<p><a href="list2.htm">Listing 2</a> is a short test program that checks our version of <B>&lt;stdbool.h&gt;</B>. The program can be run under C90, C99, or C++. Note that <B>stdbool.h</B> is included using the quoted form of the directive. This allows the compiler to find our <B>stdbool.h</B> even though it is not located with the system <B>include</B>s. If an official C99 version becomes available, merely deleting our own file will cause the compiler to find the system version since the quoted <B>#include</B> searches the system area if it cannot find the header in the user area. Some compilers have options to allow additional directories to be searched when the <B>&lt;&gt;</B> form of <B>#include</B> is used. Under such a compiler, <B>#include &lt;stdbool.h&gt;</B> would work.</p>
<p>C99 and C++ should pass the test in <a href="list2.htm">Listing 2</a> without any warnings from the test program run. A few C++ compilers will issue compile-time warnings about the implicit conversions to <B>bool</B> and perhaps using <B>bool</B> with a relational operator. These operations are valid C++, but sometimes misused, and so the compilers are trying to be helpful. A pre-C99 compiler should only get one warning that the conversion to <B>bool</B> does not compare against zero.</p>
<p>One popular C++ compiler issues errors and fails to compile the <B>#if</B> directives that test whether <B>true</B> and <B>false</B> can be used in the preprocessor. If you encounter this compiler bug, feel free to delete or comment out the tests.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>C99 makes programs more readable and increases the overlap between C and C++ by adding the <B>bool</B> type. Programs using <B>bool</B> can be compiled under either C99 or C++ by including <B>&lt;stdbool.h&gt;</B>, and by defining <B>bool</B>, <B>true</B>, and <B>false</B> in <B>&lt;stdbool.h&gt;</B>, C99 avoids keyword problems that might trouble old C code. Pre-C99 programmers or even C++ programmers writing source to be shared with C can write their own version of <B>&lt;stdbool.h&gt;</B> without waiting for a C99 implementation to be available.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Randy Meyers. &#147;The New C,&#148; <I>C/C++ Users Journal</I>, October 2000.</p>
<p><a name="2"></a>[2]  Randy Meyers. &#147;The New C: Why Variable Length Arrays,&#148; <I>C/C++ Users Journal</I>, October 2001.</p>
<p><a name="3"></a>[3]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 2,&#148; <I>C/C++ Users Journal</I>, December 2001.</p>
<p><a name="4"></a>[4]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 3: Pointers and Parameters,&#148; <I>C/C++ Users Journal</I>, January 2002.</p>
<p><a name="5"></a>[5]  Randy Meyers. &#147;The New C: Variable Length Arrays, Part 4: VLA <B>typedef</B>s and Flexible Array Members,&#148; <I>C/C++ Users Journal</I>, March 2002.</p>
<p><a name="6"></a>[6]  Randy Meyers. &#147;The New C: Compound Literals,&#148; <I>C/C++ Users Journal</I>, June 2001.</p>
<p><a name="7"></a>[7]  Randy Meyers. &#147;The New C: Declarations and Initializations,&#148; <I>C/C++ Users Journal</I>, April 2001.</p>
<p><a name="8"></a>[8]  Randy Meyers. &#147;The New C: Integers in C99, Part 1,&#148; <I>C/C++ Users Journal</I>, December 2000.</p>
<p><a name="9"></a>[9]  Randy Meyers. &#147;The New C: Restricted Pointers,&#148; <I>C/C++ Users Journal</I>, November 2000.</p>
<p><a name="10"></a>[10]  Randy Meyers. &#147;The New C: Integers, Part 3,&#148; <I>C/C++ Users Journal</I>, February 2001. </p>

<p><i><B>Randy Meyers</B> is a consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

<h4><a href="../../../source/2002/may02/meyers.zip"></a></h4>
</blockquote></body></html>
