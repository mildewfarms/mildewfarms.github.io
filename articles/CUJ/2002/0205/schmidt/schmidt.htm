<HTML>   
     <HEAD>
<TITLE>May 2002/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Don&#146;t Read This Title!</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Don&#146;t read this blurb! Read this column instead. It&#146;s about lifetime, exceptions, and other anomalies. Incredilorious!</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2002 Robert H. Schmidt</p>
<p>I recently shared dinner with Doug Payne, a close friend since our days in college radio. Our conversations typically meander in unpredictable and interesting ways. That evening we veered into the topic of &#147;Numbers Stations,&#148; sources of mysterious short-wave broadcasts disavowed by governments and other public agencies.</p>
<p>To a casual listener these broadcasts make no sense. They typically feature voices reading long lists of numbers or letters, Morse code transmissions of same, repeated music, or noise. They are presumably not designed as entertainment. Most expert listeners believe the transmissions to be encrypted messages sent by shadowy government organizations.</p>
<p>That conversational meandering inspired Internet meandering. I eventually tripped upon reviews describing a four-CD set of Numbers Stations&#146; recordings. Called The Conet Project <a href="#1">[1]</a>, the set seemed to be out of print. But after a bit of research, I found a U.K. distributor (THESE Records) that had a few copies left. One week and 50&#163; later, the set was mine.</p>
<p>The fascinating companion booklet illuminates the bureaucratic mind. According to a quoted representative of Britain&#146;s DTI (their equivalent of our FCC):</p>

<BLOCKQUOTE>
<p>&#147;[Journalists] shouldn&#146;t have any interest in Numbers Stations because they shouldn&#146;t be listening to them because they are illegal to listen to.&#148;</p>
</BLOCKQUOTE>

<p>Incrediburgible!</p>
<p>What makes this even more astonishing: you can&#146;t know a station is illegal until you hear it, by which point you&#146;re already a criminal. And since these stations don&#146;t publish broadcast schedules, every random flip through the short-wave dial risks such illegality.</p>
<p>As I read this, my mind toyed with the boundary conditions. Is it illegal in the U.K. to listen to recordings of these broadcasts? Is it illegal to listen to the recordings themselves being broadcast, instead of an actual live broadcast? Is it illegal for a licensed broadcaster to read the same set of numbers live?</p>
<p>And why are the stations illegal to hear? Because of their content, as if lists of numbers or noises are inherently threatening? Because of their unlicensed state, &aacute; la pirate radio? Because of their presumed use as communication in other illegal activity <a href="#2">[2]</a>?</p>
<p>If any Diligent Reader from that part of the world knows the answer or rationale, please enlighten me. I&#146;d really like to know. Meanwhile, I&#146;ll continue playing the recordings as an oddly soothing audio wallpaper.</p>

<H3><FONT COLOR="#000080">This &#146;n This</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>I seem not to understand templates correctly. The following code doesn&#146;t compile:</p>

<pre>
class X
    {
public:
    X();
    template &lt;class T&gt;
        void f(T *p);
    };

X::X()
    {
    f&lt;X&gt;(this); // error
    }
</pre>

<p>I always get:</p>

<pre>
error C2275: 'X' : illegal use
of this type as an expression
</pre>

<p>It compiles if I declare <B>f</B> global, but then I of course have no access to private members of <B>X</B> (except if I use <B>friend</B>). I hope this is some kind of interesting question, if not, sorry to bother you.</p>
<p>Cheers &#151; Werner Hartinger</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> The fault, dear Werner, is not in yourself, but in your compiler: the above code is correct.</p>
<p>While you don&#146;t say what compiler you&#146;re using, your diagnostic&#146;s format strongly suggests Visual C++ v6. As I don&#146;t have that compiler installed anymore, I can&#146;t verify my assumption; but given that compiler&#146;s anemic template support, the result you&#146;re getting sounds right.</p>
<p>I&#146;ll add two more observations.</p>
<p>First, you can rewrite:</p>

<pre>
f&lt;X&gt;(this)
</pre>

<p>as:</p>

<pre>
f(this)
</pre>

<p>The function call&#146;s argument type (<B>X*</B>) forces the implicit instantiation of function <B>f&lt;X&gt;(X*)</B> to match. Microsoft&#146;s compiler should accept this construction and thereby solve your immediate problem.</p>
<p>Second, I find the call:</p>

<pre>
f&lt;X&gt;(this)
</pre>

<p>suspicious. You are effectively providing the same argument to <B>f&lt;X&gt; </B>twice, as both an implicit <B>this</B> pointer and as an explicit parameter. Since I don&#146;t know if this is a demonstrative example only, or part of a more serious design, I can&#146;t know if this call makes sense.</p>

<H3><FONT COLOR="#000080">Space &#146;n Time</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear Sir,</p>
<p>I have tested the following code under the Microsoft Visual C++ compiler with service pack 4:</p>

<pre>
int &amp;f()
    {
    static int slocal = 0;
    return slocal;
    }
</pre>

<p><B>f</B> returns the valid address. Is this behavior legal? Does this mean the scope of the local static variable is out of the defining method? Does the ANSI C++ Standard state something about this topic?</p>
<p>Thanks in advance. &#151; David Leal</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> This behavior is allowed and correct.</p>
<p>The issue is not scope but lifetime. Scope is spatial, describing the region over which the name <B>slocal</B> is visible. Lifetime is temporal, describing when <B>slocal</B> is created and destroyed.</p>
<p><B>slocal</B> is declared within the body of <B>f</B>. Its scope (spatial extent) is therefore limited to the body of <B>f</B>. Within that body, <B>f</B> is visible. Outside that body, it is not.</p>
<p><B>slocal</B> is also declared with static duration. Its lifetime (temporal extent) starts when it&#146;s initialized &#151; that is, when <B>f</B> is first entered &#151; and ends when the program ends. Any pointers or references to <B>slocal</B> are similarly viable until the program ends.</p>
<p>Had you declared <B>slocal</B> with automatic duration:</p>

<pre>
int &amp;f()
    {
    int slocal = 0; // not static
    return slocal;
    }
</pre>

<p>the same analysis would apply, but with very different results. Spatially, <B>slocal</B> is still confined to the body of <B>f</B>. But temporally, <B>slocal</B> is created anew every time <B>f</B> is entered and is destroyed anew every time <B>f</B> is exited. Outside <B>f</B>, pointers and references to <B>slocal</B> are invalid <a href="#3">[3]</a>, since <B>slocal</B> no longer exists; but again, this is because of lifetime, not scope.</p>

<H3><FONT COLOR="#000080">Mystery Date</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I am writing a C++ project that uses exception handling. In addition to catching typed exceptions, my software catches untyped exceptions (those caught with <B>catch (...)</B>) in order to gracefully shutdown in the event something extraordinarily bad happens (e.g., an invalid memory access).</p>
<p>It would be nice to have some information to report in a log. Specifically, it would be helpful to get, at the very least, the address where the exception occurred and the cause of the exception. Getting a snapshot of the stack frame at that point would be even better.</p>
<p>Is there a way to get this information within Standard C++?</p>
<p>Thanks. &#151; Dave Stycos</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I&#146;m treating your question as if it were really two:</p>

<UL><LI>   How can you learn an exception&#146;s context, specifically location and stack frame?</LI>
<LI>   What can you know from <B>catch (...)</B>?</LI>
</UL>

<p>Answer #1:</p>
<p>What you&#146;re probably looking for is some Standard C++ library call or object that yields the context of the most recently-thrown exception. Sadly for you, no such standard capability exists for C++ <a href="#4">[4]</a>.</p>
<p>Depending on your compiler&#146;s non-standard library and your operating environment, there may be proprietary calls you can make to ferret out this information <a href="#5">[5]</a>. If so, you may want to package that context within the thrown exception object so that your exceptions become self-describing. It may help to declare your exceptions with a common interface to this information, possibly by deriving from a common abstract base.</p>
<p>Answer #2:</p>
<p>At the point of <B>catch (...)</B>, you know only two things:</p>

<UL><LI>   That an exception of some type was caught.</LI>
<LI>   That the exception isn&#146;t of a type catchable in any previously tried handlers.</LI></UL>

<p>For example, at the indicated point in:</p>

<pre>
try
    {
    // exception thrown...
    }
catch (std::exception)
    {
    }
catch (int)
    {
    }
catch (...)
    {
    // ...and caught here
    }
</pre>

<p>you know that:</p>

<UL><LI>   Some exception was caught.</LI>
<LI>   The exception is not type <B>std::exception</B> or derived from <B>std::exception</B>.</LI>
<LI>   The exception is not type <B>int</B>.</LI></UL>

<p>Otherwise, you know nothing, including the exception&#146;s actual type. You don&#146;t even have a name for the exception, or a <B>void *</B> or similar typeless &#147;handle&#148; to the exception.</p>
<p>In practical effect, you aren&#146;t catching and handling an exception, but rather you are catching a notification that some exception of some type occurred. The only way to directly make the exception concrete and knowable is to rethrow it and then hope that another handler can grab it by type:</p>

<pre>
try
    {
    try
        {
        throw x;
        }
    // ...
    catch (...)
        {
        // Anonymous exception of 
        // unknown type. Do something to 
        // note the exception, then 
        // rethrow, hoping another 
        // handler catches it more 
        // precisely.
        throw;
        }
    }
catch (X x)
    {
    // Ah, now the exception has an identity!
    }
</pre>

<p>As an alternative, you can maintain the state of the last thrown exception and then query that state:</p>

<pre>
struct
    {
    char const *file;
    char const *line;
    int name;
    // ...
    }
exception_state;

#define THROW(e) \
    do \
        { \
        exception_state.file = __FILE__; \
        exception_state.line = __LINE__; \
        exception_state.name = #e; \
        /* ... */ \
        throw e; \
        } \
    while (false)

// ...

try
    {
    THROW(x);
    }
// ...
catch (...)
    {
    // 'exception_state' contains the
    // state of the last thrown exception.
    }
</pre>

<p>In the spirit of Answer #1, you can extend this technique to capture non-standard state information such as stack trace, assuming your system yields such information.</p>

<H3><FONT COLOR="#000080">Ancient History</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby,</p>
<p>I use an <B>enum</B> variable to differentiate among the various configurations of my application that I can produce for different customers. However, my executable has gotten way too big. Since the value of the <B>enum</B> variable is constant for any particular customer&#146;s build, I thought I could just <B>#define</B> the value as a symbol on the compiler command line (Borland C++ Builder 4.x) and then use <B>#ifdef</B> to compile only the code relevant in the build.</p>
<p>This is not working out well at all. What I want is something like:</p>

<pre>
#ifdef A || B || C
    // ...
#elifdef D || E
    // ...
#else
    // ...
#endif
</pre>

<p>Can you suggest anything better than:</p>

<pre>
#ifdef A
    // ...section A
#else
    #ifdef B
        // ...section A repeated
    #else
        #ifdef C
            // ... section A repeated
        #endif
    #endif
#endif
// ...
</pre>

<p>Thanks in advance &#151; John Billings</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Your answer requires a simple but woefully underused language feature: the preprocessing unary operator <B>defined</B>.</p>
<p>The two directives:</p>

<pre>
#ifdef A
#ifndef B
</pre>

<p>are exactly equivalent to:</p>

<pre>
#if defined A
#if !defined B
</pre>

<p>You can combine <B>defined</B> with other expressions to form more complex conditional inclusion:</p>

<pre>
#if (defined A || B &gt; 1) &amp;&amp; !C
</pre>

<p>In your case, the correct combination is:</p>

<pre>
#if defined A || defined B || defined C
    // ...
#elif defined D || defined E
    // ...
#else
    // ...
#endif
</pre>

<p><B>defined</B> is part of the first ANSI C Standard and is thus over twelve years old. Yet I almost never see header files or other source using it, in production or print. I suspect a lot of programmers are either ignorant of its existence or don&#146;t appreciate its versatility compared to <B>#ifdef</B>s.</p>
<p>I can think of no good technical reason to use <B>#ifdef</B> and <B>#ifndef</B> with modern compilers and related tools. Any Diligent Reader still writing new code with these should immediately cease and desist!</p>

<H3><FONT COLOR="#000080">Temporal Anomaly on Europa</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I am interested to get an answer from you.</p>
<p>How do I use a combo box, list box, or text box as in Visual Basic using the C or C++ language in my application?</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Sorry, but that&#146;s not my table.</p>

<H3><FONT COLOR="#000080">Spatial Anomaly in Never-Never Land</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear Sir,</p>
<p>This is not exactly a C/C++ question.</p>
<p>[Rest of question lost in a wormhole.]</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Remember last month, when I printed what I claimed as my most off-topic post yet? I lied.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>In my January 2002 column item &#147;When Life Begins,&#148; I proffered that constructs such as:</p>

<pre>
this-&gt;i
</pre>

<p>were allowable in constructors, even though my literal reading of the Standard suggested such usage led to undefined behavior. To my rescue comes Steve Cleary, Diligent Reader and self-described &#147;lurking language lawyer pupil&#148; <a href="#6">[6]</a>:</p>
<BLOCKQUOTE>
<p>I agree with everything you say in that article except when you say that the &#147;C++ Standard Subclause 3.8 ... does appear to preclude this in constructors.&#148;</p>
<p>If I may draw your attention to the last sentence of [3.8/3], which redirects you to [12.6.2] and [12.7] for special rules applied during construction and destruction. One of those special rules covers the accessing of nonstatic members (found buried in [12.7/2]).</p>
<p>Thus, I believe that your example of <B>this-&gt;i = 7;</B> is perfectly legal and upheld by the current Standard wording.</p>
</BLOCKQUOTE>
<p>Steve, you are today&#146;s winner! I do believe you are correct. I&#146;m a little dismayed I didn&#146;t find and follow that trail myself, but hey! That&#146;s why we have Diligent Readers on the payroll.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  &lt;www.ibmpcug.co.uk/~irdial/conet.htm&gt;</p>
<p><a name="2"></a>[2]  Lest you think I&#146;m picking on the British government: I see many parallels here with our own government&#146;s stance on CSS-decryption source code.</p>
<p><a name="3"></a>[3]  Holding a pointer or reference to non-static <B>slocal</B> outside <B>f</B> is &#147;legal&#148; in that the Standard permits such code to compile. However, the resulting program yields undefined behavior.</p>
<p><a name="4"></a>[4]  I can hear the Java partisans in the crowd chortling smugly, since Java programs can portably retrieve much of this information through their analogue of a standard library.</p>
<p><a name="5"></a>[5]  As an example: Microsoft&#146;s .NET Framework lets you gather such information for exceptions in managed C++ code.</p>
<p><a name="6"></a>[6]  Before you get excited, Dr. Meyers, note that technically I&#146;m not the one citing the Standard here!</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
