<HTML>   
     <HEAD>
<TITLE>May 2002/C/C++ Tip #8: Performing Multiple Read/Write Locks</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Tips</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #8: Performing Multiple Read/Write Locks</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Tomer Abramson</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>The readers/writer lock is a well-known pattern in multithreaded programming. It allows multiple readers or a single writer to access a critical section at the same time.</p>
<p>Using the readers/writer lock pattern can create a problem: what do you do about multiple locks? For example:</p>

<pre>
RWLock lockA, lockB;
Thread 1                  Thread 2
lockA.AcquireWriteLock()  lockB.AcquireWriteLock()
lockB.AcquireReadLock()   lockA. AcquireReadLock()
</pre>

<p>The preceding code can lead to a deadlock. Assume the order of locks is:</p>

<OL><LI><B>Thread 1</B> acquires a write lock on <B>lockA</B>.</LI>
<LI><B>Thread 2</B> acquires a write lock on <B>lockB</B>.</LI></OL>

<p>Now, <B>Thread 1</B> will wait for <B>Thread 2</B> to release the write lock on <B>lockB</B> in order to acquire a read lock on <B>lockB</B>. <B>Thread 2</B> will wait for <B>Thread 1</B> to release the write lock on <B>lockA</B> in order to acquire a read lock on <B>lockA</B>. Consequently, the threads will deadlock.</p>
<p>A typical implementation of the readers/writer pattern is:</p>

<pre>
#include &lt;windows.h&gt;
class RWLock  
{
public:
  RWLock() : m_nReaders(0) { /* create events */ }
  virtual ~RWLock() { /* close handles */ }

  void AcquireWriteLock() const
  { WaitForSingleObject(m_hDataEvent, INFINITE); }
  void ReleaseWriteLock() const
  { SetEvent(m_hDataEvent); }

  void AcquireReadLock()
  {
    WaitForSingleObject(m_hReadersEvent, INFINITE);
    if (m_nReaders++ == 0)
      WaitForSingleObject(m_hDataEvent, INFINITE);
  SetEvent(m_hReadersEvent);
  }
  void ReleaseReadLock()
  {
    WaitForSingleObject(m_hReadersEvent, INFINITE);
    if (--m_nReaders == 0)
      SetEvent(m_hDataEvent);
    SetEvent(m_hReadersEvent);
  }

private:
  int      m_nReaders;
  HANDLE   m_hReadersEvent;
  HANDLE   m_hDataEvent;

};
</pre>

<p>I want to add another method, <B>MultipleRWLock</B>, that allows multiple locks as atomic action. In other words, multiple locks are performed logically as one inseparable operation. This approach is analogous to the behavior of the Win32 <B>WaitForMultipleObjects</B>. Applying this approach to the previous example yields two scenarios for locking. In each scenario, only one thread waits:</p>

<OL><LI><B>Thread 1</B> acquires a write lock on <B>lockA</B> and a read lock on <B>lockB</B> (with both locks treated as one operation), and <B>Thread 2</B> waits.</LI>
<LI><B>Thread 2</B> acquires a write lock on <B>lockB</B> and a read lock on <B>lockA</B> (with both locks treated as one operation), and <B>Thread 1</B> waits.</LI></OL>

<p>This scheme eliminates the deadlock scenario, in which each thread waits for the other.</p>
<p>Trying to implement <B>MultipleRWLock</B> by using <B>WaitForMultipleObjects</B> with any combination of the <B>RWLock</B> handles is doomed to fail. In order to perform a read lock, you need to lock <B>m_nReaders</B>, compare <B>m_nReaders</B> to zero and increment it, and, if <B>m_nReaders</B> equals zero, lock the data. Based on that, you would expect the <B>MultipleRWLock</B> implementation to perform the following tasks:</p>

<OL><LI>Lock all <B>m_nReaders</B> for all read requests.</LI>
<LI>Compare all <B>m_nReaders</B> to zero and increment.</LI>
<LI>Lock data for all read requests with <B>m_nReaders == 0</B> and for all write requests.</LI>
<LI>Release all <B>m_nReaders</B> that were locked in Step 1.</LI></OL>

<p><a href="list1.htm">Listing 1</a> contains the code for this implementation of <B>MultipleRWLock</B>.</p>
<p>The problem with this implementation is that the <B>MultipleRWLock</B> interferes with the operation of the <B>AcquireReadLock</B>. Assume you have two resources (<B>R1</B> and <B>R2</B>) and three threads (<B>T1</B>, <B>T2</B>, <B>T3</B>). Now you have a sequence of locks:</p>

<UL><LI>   <B>T1</B> locks <B>R1</B> for writing with <B>AcquireWriteLock</B>.</LI>
<LI>   <B>T2</B> tries to lock <B>R1</B> and <B>R2</B> for reading with <B>MultipleRWLock</B>.</LI>
<LI>   <B>T3</B> tries to lock <B>R2</B> for reading with <B>AcquireReadLock</B>.</LI></UL>

<p><B>T2</B> will lock <B>m_nReaders</B> of <B>R1</B> and <B>R2</B>, increment <B>R1</B> and <B>R2</B>, and wait for <B>T1</B> to release the write lock on <B>R1</B> in order to lock the data.</p>
<p>Now <B>T3</B> will not be able to acquire a read lock on <B>R2</B> because <B>T3</B> will wait for <B>T2</B> to release the lock on <B>m_nReaders</B>. So, although no one locks <B>R2</B>, <B>T3</B> still has to wait for it. <B>T3</B> actually waits for <B>T1</B> to release the write lock on <B>R1</B>!</p>
<p>The solution is simple: you must add another handle in order to synchronize the locks from <B>MultipleRWLock</B>. These are the changes to perform:</p>

<OL><LI>Add to <B>RWLock</B> another member:</LI>
<pre>
HANDLE m_hAnotherDataEvent;
</pre>

<LI>Change <B>AcquireWriteLock</B>:</LI>

<pre>
HANDLE handles[2] =
{ m_hDataEvent, m_hAnotherDataEvent };
WaitForMultipleObjects(2, handles, TRUE, INFINITE);
</pre>

<LI>Change <B>ReleaseWriteLock</B>:</LI>

<pre>
SetEvent(m_hDataEvent);
SetEvent(m_hAnotherDataEvent);
</pre>

<LI>Add a <B>struct</B> that encapsulates the lock request:</LI>

<pre>
struct LockRequest
{
  enum LockType_En   
  { READ_LOCK, WRITE_LOCK };
  LockRequest(RWLock* pRWLock, LockType_En lockType) :
    m_pRWLock(pRWLock), m_lockType(lockType) {};

  RWLock* m_pRWLock;
  LockType_En m_lockType;
};
</pre>
</OL>

<p>Now you are ready to implement <B>MultipleRWLock</B>:</p>

<pre>
static void RWLock::MultipleRWLock
  (LockRequest* pRequest, int nCount)
{
  HANDLE
    dataHandles[MAXIMUM_WAIT_OBJECTS];
  RWLock*
    readers[MAXIMUM_WAIT_OBJECTS];
      int nDataHandles = 0, nReaders= 0;
  
    
  for (int i = 0; i &lt; nCount; i++)
  {
    // Build data handles array
    dataHandles[nDataHandles++] =
      pRequest[i].m_pRWLock
        -&gt;m_hAnotherDataEvent;
    if (pRequest[i].m_lockType ==
      LockRequest::WRITE_LOCK)
      dataHandles[nDataHandles++] =
        pRequest[i].m_pRWLock
          -&gt;m_hDataEvent;
    else
      // Build readers array
      readers[nReaders++] =
        pRequest[i].m_pRWLock;
  }

  // Perform the locks
  WaitForMultipleObjects(nDataHandles,
    dataHandles, TRUE, INFINITE);
  
  // For each read request update 
  // readers counter
  for (i = 0; i &lt; nReaders; i++)
  {
    readers[i]-&gt;AcquireReadLock();
    SetEvent(readers[i]
      -&gt;m_hAnotherDataEvent);
  }  
}
</pre>

<p>By adding the <B>m_hAnotherDataEvent</B>, I accomplished the ability to request a read lock from <B>MultipleRWLock</B> without interfering with a read lock from <B>AcquireReadLock</B> and still block any write lock attempt.</p>
<p>Finally, here is how to use it:</p>

<pre>
RWLock lockA, lockB;
LockRequest lockRequests[2] =
  { LockRequest(&amp;lockA, LockRequest::WRITE_LOCK),
    LockRequest(&amp;lockB, LockRequest::READ_LOCK) };

RWLock::MultipleRWLock(lockRequests, 2);
</pre>

<p>Note: in my code, I didn&#146;t perform any error checking, and all my <B>waitForObjects</B> are waiting an infinite time. This was done only to simplify the code.</p>

<h4><a href="../../../source/2002/may02/abramson.zip"></a></h4>

</blockquote></body></html>
