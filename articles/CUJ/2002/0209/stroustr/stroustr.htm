<HTML>   
     <HEAD>
<TITLE>September 2002/C and C++: Case Studies in Compatibility</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C and C++: Case Studies in Compatibility</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bjarne Stroustrup</FONT></H3>

<BLOCKQUOTE>
<p>Reconcilable differences? You decide.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In previous issues of <I>CUJ</I>, I have provided a philosophical view of the C/C++ relationship and presented a case for significantly increasing the compatibility of C and C++. In this final article of the series, I&#146;ll give examples of how one might go about increasing C/C++ compatibility. The ideal is full compatibility. The topics include, variadic functions, <B>void*</B>, <B>bool</B>, <B>f(void)</B>, <B>const</B>, <B>inline</B>, and VLAs (variable length arrays). These topics demonstrate concerns that must be taken into account when trying to increase C/C++ compatibility.</p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Making changes to a language in widespread use, such as C [<a href="#1">1</a>, <a href="#2">2</a>] and C++ <a href="#3">[3]</a>, is not easy. In reality, even the slightest change requires discussion and consideration beyond what would fit in this article. Consequently, each of the eleven &#147;case studies&#148; I present here lacks detail from the perspective of the C and C++ ISO standards committees. However, the point here is not to present complete proposals or to try to tell the standards committees how to do their job. The point is to give examples of directions that might (or might not) be taken and examples of the kind of considerations that will be part of any work to improve C and/or C++ in the direction of greater C/C++ compatibility. The examples are chosen to illustrate both the difficulties and the possibilities involved.</p>
<p>In many cases, the reader will ask &#147;How did the designers of C and C++ get themselves into such a mess?&#148; My general opinion is that the designers (not excluding me) and committees (not excluding the one on which I serve) got into those messes for reasons that looked good to competent people on the day, but weren&#146;t <a href="#4">[4]</a>. Let me emphasize that my answer is not a variant of &#147;let C adopt C++&#146;s rules.&#148; That would be both arrogant and pointless. The opposite suggestion, &#147;let C++ adopt C&#146;s rules,&#148; is equally extreme and unrealistic. To make progress, both languages and language communities must move towards a common center. My suggested resolutions are primarily based on the following considerations:</p>

<OL><LI>What would break the least code?</LI>
<LI>How easy is it to recover from code broken by a change?</LI>
<LI>What would give the greatest benefits in the long run?</LI>
<LI>How complicated would it be to implement the resolution?</LI></OL>

<p>Many changes suggested here to increase C/C++ compatibility break some code and all involve some work from implementers. Some of the suggested changes would, if seen in isolation, be detrimental to the language in which they are suggested. That is, I see them as sacrifices necessary to achieve a greater good (C/C++ compatibility). I would never dream of suggesting each by itself and would fight many of the suggested resolutions except in the context of a major increase in C/C++ compatibility. A language is more than the sum of its individual features.</p>

<H3><FONT COLOR="#000080">Variadic Function Syntax</FONT></H3>

<p>In C, a variadic function is indicated by a comma followed by an ellipsis at the end of an argument list. In C++, the ellipsis suffices. For example:</p>

<pre>
// C and C++
int  printf(const  char*, ...);
// C++
int  printf(const  char* ...);
</pre>

<p>The obvious resolution is for C to accept the plain ellipsis in addition to what is currently accepted. This resolution breaks no code, imposes no run-time overhead, and the additional compiler complexity is negligible. Any other resolution breaks lots of code without compensating advantages.</p>
<p>C requires a variadic function to have at least one argument specified; C++ doesn&#146;t require that. For example:</p>

<pre>
void  f(...);   // C++, not C
</pre>

<p>This case could be dealt with either by allowing the construct in C or by disallowing it in C++. The first solution would break no user code, but could possibly cause problems for some C implementers. The latter could break some code. However, such code is likely to be rare and obscure, and there are obvious ways of rewriting it. Consequently, I suggest adopting the C rule and banning the construct in C++.</p>
<p>Breaking code should never be done lightly. However, sometimes it is better to break code than to let a problem fester. In making such a case, the likely importance of the banned construct should be taken into account, as should the likelihood of code using the construct hiding errors. The probable benefits of the change have to be major. Whenever possible (meaning almost always), code broken by a language change should be easily detected by a compiler.</p>
<p>Breaking code isn&#146;t all bad. The odd easily diagnosable incompatibility that doesn&#146;t affect link compatibility, such as the introduction of a <B>new</B> keyword, can be good for the long-term health of the community. It reminds people that the world changes and gives encouragement to review old code. Compatibility switches are needed, though, to serve people who can&#146;t/won&#146;t touch old source code. I&#146;m no fan of compiler options, but they are a fact of life and a compatibility switch providing practical backwards compatibility can be a price worth paying for progress.</p>

<H3><FONT COLOR="#000080">Pointer to void and NULL</FONT></H3>
<p>In C, a <B>void*</B> can be assigned to any <B>T*</B> without an explicit cast. In C++, it cannot. The reason for the C++ restriction is that a <B>void*</B>-to-<B>T*</B> conversion can be unsafe <a href="#4">[4]</a>. On the other hand, this implicit conversion is widely used in C. For example:</p>

<pre>
// malloc() returns a void*
int* p = malloc(sizeof(int)*n);
// NULL is often a macro for (void*)0
struct  X* p = NULL;
</pre>

<p>From a C++ point of view, <B>malloc</B> is itself best avoided in favor of <B>new</B>, but C&#146;s use of <B>(void*)0</B> provides the benefit of distinguishing a nil pointer from plain <B>0</B>. However, C++ retained the Classic C definition of <B>NULL</B> and maintained a tradition for using plain <B>0</B> rather than the macro <B>NULL</B>. Had assignment of <B>(void*)0</B> to a pointer been valid C++, it would have helped in overloading:</p>

<pre>
void  f(int);
void  f(char*);

void  g()
{
    // 0 is an int, call f(int)
    f(0);
    // error in C++, but why not call f(char*)?
    f((void*)0);
}
</pre>

<p>What can be done to resolve this incompatibility?</p>
<OL><LI>C++ accepts the C rule.</LI>
<LI>C accepts the C++ rule.</LI>
<LI>Both languages ban the implicit conversion except for specific cases in the standard library, such as <B>NULL</B> and <B>malloc</B>.</LI>
<LI>C++ accepts the C rule for <B>void*</B>, and both languages introduce a new type, say <B>raw*</B>, which provides the safer C++ semantics. </LI></OL>
<p>I could construct several more scenarios, involving features such as a null keyword, a new operator for C, and macro magic. Such ideas may have value in their own right. However, among the alternatives listed, the right answer must be (1). Resolution (2) breaks too much code, and (3) breaks too much code and is also messy. Note that I say this while insisting that much of the code that (3) would break deserves to be broken, and that &#147;a type violation&#148; is my primary criterion for deeming a C/C++ incompatibility &#147;non-gratuitous&#148; <a href="#5">[5]</a>. This is an example where I suggest that in the interest of the C/C++ community, we must leave our &#147;language theory ivory towers,&#148; accept a wart, and get on with more important things. Alternative (4) allows programmers to preserve type safety in new code (and in code converted to use it), but don&#146;t think that benefit is sufficient to add a new feature.</p>
<p>In addition, I would seriously consider a variant of (1) that also introduced a keyword meaning &#147;the <B>NULL</B> pointer&#148; to save C++ programmers from unnecessarily depending on a macro <a href="#6">[6]</a>.</p>

<H3><FONT COLOR="#000080">wchar_t and bool</FONT></H3>
<p>C introduced the <B>typedef</B> <B>wchar_t</B> for wide characters. C++ then adopted the idea, but needed a unique wide character type to guide overloading for proper stream I/O, etc., so <B>wchar_t</B> was made a keyword.</p>
<p>C++ introduced a Boolean type named by the keyword <B>bool</B>. C then introduced a macro <B>bool</B> (in a standard header) naming a keyword <B>_Bool</B>. The C choices were made to increase C++ compatibility while avoiding breaking existing code using <B>bool</B> as an identifier.</p>
<p>For people using both languages, this is a mess (see the appendix of <a href="#4">[4]</a>). Again we can consider alternative resolutions:</p>
<OL><LI>C adopts <B>wchar_t</B> and <B>bool</B> as keywords.</LI>
<LI>C++ adopts C&#146;s definitions and abolishes <B>wchar_t</B> and <B>bool</B> as keywords.</LI>
<LI>C++ abolishes <B>wchar_t</B> and <B>bool</B> as keywords and adopts <B>wchar_t</B> and <B>bool</B> as <B>typedef</B>s, defined in some standard library header, for keywords <B>_Wchar</B> and <B>_Bool</B>. C adopts <B>_Wchar</B> as the type for which <B>wchar_t</B> is a <B>typedef</B>.</LI>
<LI>Both languages adopt a new mechanism, possibly called <B>typename</B>, that is similar to <B>typedef</B> except that it makes new type rather than just a synonym. <B>typename</B> is then used to provide <B>bool</B> and <B>wchar_t</B> in some standard header. The keywords <B>bool</B>, <B>wchar_t</B>, and <B>_Bool</B> would no longer be needed.</LI>
<LI>C++ introduces <B>wchar</B> as a keyword, removes <B>wchar_t</B> as a keyword, and introduces <B>wchar_t</B> as a <B>typedef</B> for <B>wchar</B> in the appropriate standard header. C introduces <B>bool</B> and <B>wchar</B> as keywords.</LI></OL>

<p>Many C++ facilities depend on overloading, so C++ must have specific types rather than just <B>typedef</B>s. Therefore (2) is not a possible resolution. I consider (3) complicated (introducing two &#147;special words&#148; where one would do), and its compatibility advantages are illusory. If <B>bool</B> is a name in a standard header, all code had better avoid that word because there is no way of knowing whether that header might be used in the future, and any usage that differs from the Standard will cause confusion and maintenance problems <a href="#4">[4]</a>. Suggestion (4) is an intriguing idea, but in this particular context, it shares the weaknesses of (3). Solution (1) is the simplest, but a keyword, <B>wchar_t</B>, with a name that indicates that it is a <B>typedef</B> is also a mistake, so I suggest that (5) is the best solution.</p>
<p>One way of looking at an incompatibility is: &#147;What could we have done then, had we known what we know now? What is the ideal solution?&#148; That was how I found (5). Preserving <B>wchar_t</B> as a <B>typedef</B> is a simple backwards-compatibility hack. In addition, either C must remove <B>_Bool</B> as a keyword, or C++ must add it. The latter is the simplest solution and breaks no code.</p>

<H3><FONT COLOR="#000080">Empty Function Argument Specification</FONT></H3>
<p>In C, the function prototype:</p>

<pre>
int  f();
</pre>

<p>declares a function <B>f</B> that may accept any number of arguments of any type (but <B>f</B> may not be variadic) as long as the arguments and types match the (unknown) definition of the function. In C++, the function declaration:</p>

<pre>
int  f();
</pre>

<p>declares <B>f</B> as a function that accepts no arguments. In both C and C++:</p>

<pre>
int  f(void);
</pre>

<p>declares <B>f</B> as a function that accepts no arguments. In addition, the C99 committee (following C89) deprecated:</p>

<pre>
int  f();
</pre>

<p>This <B>f()</B> incompatibility could be resolved cleanly by banning the C++ usage. However, that would break a majority of C++ programs ever written and force everyone to use the more verbose notation:</p>

<pre>
int  f(void);
</pre>

<p>which many consider an abomination <a href="#4">[4]</a>.</p>
<p>The obvious alternative would be to break C code that relies on being able to call a function declared without arguments with arguments. For example:</p>

<pre>
int  f();

int  g(int  a)
{
    return  f(a);  // not C++, deprecated in C
}
</pre>

<p>I think that banning such calls is the right solution. It breaks C code, but the usage is most error-prone, has been deprecated in C since 1989, and has been caught by compiler warnings and lint for much longer. Thus:</p>

<pre>
int  f();
</pre>

<p>should declare <B>f</B> to be a function taking no arguments. Again, a backwards-compatibility switch might be useful.</p>

<H3><FONT COLOR="#000080">Prototypes</FONT></H3>

<p>In C++, no function can be called without a previous declaration. In C, a non-variadic function may be called without a previous prototype, but doing so has been deprecated since 1989. For example:</p>

<pre>
int  f(i)
{
    // error in C++, deprecated in C
    int  x = g(i);  
    // ...
}
</pre>

<p>All compilers and lints that I know of have mechanisms for detecting such usage. The alternatives are clear:</p>

<OL><LI>Allow such calls (as in C, but deprecated).</LI>
<LI>Disallow calls to undeclared functions (as in C++).</LI></OL>

<p>The resolution must be (2) to follow C++ and the intent of the C committee, as represented by the deprecation. Choosing (1) would seriously weaken the type checking in C++ and go against the general trend of programming without compensating benefits.</p>

<H3><FONT COLOR="#000080">Old-Style Function Definition</FONT></H3>

<p>C supports the Classic C function declaration syntax; C++ does not. For example:</p>

<pre>
int  f(a,b) double  b;  /* not C++ */
{
    /* ... */
}

int  g(char *p)
{
    f(p,p); // uncaught type error
    // ...
}
</pre>

<p>The problem with the call of <B>f</B> arises because a function defined using the old-style function syntax has a different semantics from a function declared using the modern (prototype-style, C++-style) definition syntax. The function <B>f</B> is not considered prototyped, so type checking and conversion is not done.</p>
<p>Resolving this cannot be done painlessly. I see three alternatives:</p>

<OL><LI>Adopt C&#146;s rules (i.e., allow old-style definitions with separate semantics).</LI>
<LI>Adopt C++&#146;s rules (i.e., ban old-style definitions).</LI>
<LI>Allow old-style definitions with exactly the same semantics as other function definitions.</LI></OL>

<p>Alternative (1) is not a possible solution because it eliminates important type checking and leads to surprises. I consider (2) the best solution, but see no hope for its acceptance. It has the virtues of simplicity, simple compile-time detection of all errors, and simple conversion to a more modern style. However, my impression is that old-style function definitions are still widely used and sometimes even liked for aesthetic reasons. That leaves (3), which has the virtues of simple implementation and better type checking, but suffers from the possibility of silent changes of the meaning of code. Warnings and a backwards-compatibility switch would definitely be needed.</p>

<H3><FONT COLOR="#000080">Enumerations</FONT></H3>
<p>In C, an <B>int</B> can be assigned to a value of type <B>enum</B> without a cast. In C++, it cannot. For example:</p>

<pre>
enum  E { a, b };

E  x = 1;   // error in C++, ok in C
E  x = 99;  // error in C++, ok in C
</pre>

<p>I think that the only realistic resolution would be for C++ to adopt the C rule. The C++ rule provides better type safety, but the amount of C code relying on treating an enumerator as an <B>int</B> is too large to change, and I don&#146;t see a third alternative.</p>
<p>The definition of <B>enum</B> in C and C++ also differs in several details relating to size. However, the simple fact that C and C++ code today interoperate while using <B>enum</B>s indicates that the definitional issues can be reconciled.</p>

<H3><FONT COLOR="#000080">Constants</FONT></H3>

<p>In C, the default storage class of a non-local <B>const</B> is <B>extern</B> and in C++ it is static. The result is one of the hardest-to-resolve incompatibilities. Consider:</p>

<pre>
// uninitialized const
const  int  x;
const  int  y = 2;

int  f(int  i)
{
    switch (i) {
    // use y as a constant expression
    case  y:
        return  i;
    // ...
    }
}
</pre>

<p>An uninitialized <B>const</B> is not allowed in C++, and the use of a <B>const</B> in a constant expression is not allowed in C. Both of these uses are so widespread in their respective languages that examples such as the one above must be allowed. This precludes simply adopting the rule from one language or the other.</p>
<p>It follows that some subtlety is needed in the resolution, and subtlety implies the need for experimentation and examination of lots of existing code to see that undesired side effects really are absent. That said, here is a suggestion: distinguish between initialized and uninitialized <B>const</B>s. Initialized <B>const</B>s follow the C++ rule. This preserves <B>const</B>s in constant expressions, and if an initialized <B>const</B> needs to be accessed from another translation unit, <B>extern</B> must be explicitly used:</p>

<pre>
// local to this translation unit
const  int  c1 = 17;
// available in other translation units
extern  const  int  c2 = 7;
</pre>

<p>On the other hand, follow the C rule for uninitialized <B>const</B>s. For example:</p>

<pre>
// available in other translation units
const  int  c3;     
// error: uninitialized const
static  const  int  c4;
</pre>

<H3><FONT COLOR="#000080">Inlining</FONT></H3>
<p>Both C and C99 provide <B>inline</B>. Unfortunately, the semantics of <B>inline</B> differ <a href="#4">[4]</a>. Basically, the C++ rules require an <B>inline</B> function to be defined with identical meaning in every translation unit, even though an implementation is not required to detect violations of this &#147;one definition rule,&#148; and many implementations can&#146;t. On the other hand, C99 allows <B>inline</B> functions in different translation units to differ, while imposing restrictions intended to avoid potential linker problems. A good resolution would:</p>
<OL><LI>Not impose burdens on C linker technology.</LI>
<LI>Not break the C++ type system.</LI>
<LI>Break only minimal and pathological code.</LI>
<LI>Not increase the area of undefined or implementation-specific behavior.</LI></OL>

<p>An ideal solution would strengthen (3) and (4), but that&#146;s unfortunately impossible.</p>
<p>Requirement (2) basically implies that the C++ ODR must be the rule, even if its enforcement must &#151; in the Classic C tradition <a href="#6">[6]</a> &#151; be left to a lint-like utility. This leaves the problem of what to do about uses of static data. For example:</p>

<pre>
// use of static variables in/from
// inlines ok in C++, errors in C:

static  int  a;
extern  inline  int  count() {
    return ++a;
}

extern  inline  int  count2() {
    static  int  b = 0; b+=2; return  b;
}
</pre>

<p>Accepting such code would put a burden on C linkers; not accepting it would break C++ code. I think the most realistic choice is to ban such code, realizing that some implementations would accept it as an extension. The reason that I can envision banning such code is that I consider it relatively rare and relatively unimportant. Naturally, we&#146;d have to look at a lot of code before accepting that evaluation.</p>
<p>There is a more important use of static data in C++ that cannot be banned: static class members. However, since static class members have no equivalent in C, this is not a compatibility problem.</p>

<H3><FONT COLOR="#000080">static</FONT></H3>

<p>C++ deprecates the use of <B>static</B> for declaring something &#147;local to this translation unit&#148; in favor of the more general notion of namespaces. The possible resolutions are:</p>
<OL><LI>Withdraw that deprecation in C++.</LI>
<LI>Deprecate or ban that use of <B>static</B> in C and introduce namespaces.</LI></OL>

<p>Only (1) is realistic.</p>

<H3><FONT COLOR="#000080">Variable-Sized Data Structures</FONT></H3>

<p>Classic C arrays are too low level for many uses: they have a fixed size, specified as a constant, and an array doesn&#146;t carry its size with it when passed as a function argument. Both C++ and C99 added features to deal with this issue:</p>

<OL><LI>C++ added standard library containers. In particular, it added <B>std::vector</B>. A vector can be specified by a size that is a variable, a vector can be resized, and a vector knows its size (i.e., a vector can be passed as an object with its size included, there is a member function for examining that size, and the size can be changed).</LI>
<LI>C99 added VLAs. A VLA can be specified by a size that is a variable, but a VLA cannot be resized, and a VLA doesn&#146;t know its size.</LI></OL>

<p>The syntax of the two constructs differ, and either could be argued to be more convenient and readable than the other:</p>

<pre>
void  f(int  m)
{
    int  a[m];        // variable length array
    vector&lt;int&gt; v(m); // standard library vector
    // ...
}
</pre>

<p>A VLA behaves much like a vector without the ability to resize. On the other hand, VLAs are designed with a heavier emphasis on run-time performance. In particular, elements of a VLA can be, but are not required to be, allocated on the stack.</p>
<p>For C/C++ compatibility, there are two obvious alternatives:</p>

<p>1. Accept VLAs as defined in C99.</p>
<p>Ban VLAs.</p>

<p>Choosing (1) seems obvious. After all, VLAs are arguably the C99 committee&#146;s greatest contribution to C and the most significant language feature added to C since prototypes and <B>const</B> were imported from C with Classes. They are easy to implement, efficient, reasonably easy to use, and backwards compatible.</p>
<p>Unfortunately, from a C++ point of view, VLAs have several serious problems <a href="#7">[7]</a>:</p>
<p>a.  They are a very low-level mechanism, requiring programmers to remember sizes and pass them along. This is error-prone. This same lack of size information means that operations, such as copying and range checking, cannot be simply provided.</p>
<p>b.  A VLA can allocate an arbitrary amount of memory, specified at run time. However, there is no standard mechanism for detecting or handling memory exhaustion. This is particularly bothersome because a VLA looks so much like an ordinary array, for which the memory requirements can be calculated at compile time. For example:</p>
<pre>
#define  M1  99

int  f(int  m2)
{
    // array, space requirement known
    int  a[M1];
    // VLA, space requirement unknown
    int  b[m2];
    // ...
}
</pre>
<p>This can lead to undefined behavior and obscure bugs.</p>
<p>c.  There is no guarantee that memory allocated for elements of a VLA is freed if a function containing it is exited abnormally (such as by an exception or a <B>longjmp</B>). Thus, use of VLAs can lead to memory leaks.</p>
<p>d.  By using the array syntax, many programmers will see VLAs as &#147;favored by the language&#148; or &#147;recommended&#148; over alternatives, such as <B>std::vector</B>, and as more efficient (even if only potentially so).</p>
<p>e.  VLAs are part of C, and <B>std::vector</B> is not, so if VLAs were accepted for the sake of C/C++ compatibility, people would accept the problems with VLAs and use them in the interest of maximal portability.</p>
<p>The net effect is that by accepting VLAs, the result would be a language that encouraged something that, from a C++ point of view, is unnecessarily low-level, unsafe, and can leak memory.</p>
<p>It follows that a third alternative is needed. Consider:</p>
<p>3.  Ban VLAs and replace them with <B>vector</B> (possibly provided as a built-in type).</p>
<p>4.  Define a VLA to be equivalent and interchangeable with a suitably designed container, <B>array</B>.</p>
<p>Naturally, (3) is unacceptable because VLAs exist in the C Standard, but it would have been a close-to-ideal solution. However, we can use the idea as a springboard to a more acceptable resolution. How would <B>array</B> have to be designed to bridge the gap between VLAs and C++ Standard library containers? Consider possible implementations of VLAs. For C-only, a VLA and its size are needed together only at the point of allocation. If extended to support C++, destructors must be called for VLA elements, so the size must (conceptually, at least) be stored with a pointer to the elements. Therefore, a naive implementation of <B>array</B> would be something like this:</p>
<pre>
template&lt;class  T&gt; class  array {
    int  s;
    T* elements;
public:
    // allocate "n" elements and
    // let "elements" refer to them
    array(int  n);
    // make this array refer to p[0..n-1]
    array(T* p, int  n);
    operator  T*() { return  elements; }
    int  size() const { return  s; }

    // the usual container operations,
    // such as = and [], much like vector
};
</pre>

<p>Apart from the two-argument constructor, this would simply be an ordinary container that could be designed to allocate from the stack, just like some VLA implementations. The key to compatibility is its integration with VLAs:</p>

<pre>
void  h(array&lt;double&gt; a);  // C++

void  g(int  m, double  vla[m]);  // C99

void  f(int  m, double  vla1[m], <BR>
  array&lt;double&gt; a1)
{
    // a2 refers to vla1
    array&lt;double&gt;a2(vla1,m);  
    // p refers to a1&#146;s elements
    double* p = a1;

    h(a1);
    h(array(vla1,m));   // a bit verbose
    h(m,vla1);          // ???

    g(m,vla1);
    g(a1.size(),a1);    // a bit verbose
    g(a1);              // ???
}
</pre>

<p>The calls marked with &#147;???&#148; cannot be written in C++. Had they gotten past the type checking, the result would have executed correctly because of structural equivalence. If we somehow accept these calls, by a general mechanism or by a special rule for <B>array</B> and VLAs, <B>array</B>s and VLAs would be completely interchangeable, and a programmer could choose whichever style best suited taste and application.</p>
<p>Clearly, the <B>array</B> idea is not a complete proposal, but it shows a possible direction for coping with a particularly nasty problem of divergent language evolution.</p>

<H3><FONT COLOR="#000080">Afterword</FONT></H3>
<p>There are many more compatibility issues that must be dealt with by a thorough description of C/C++ incompatibilities and their possible resolution. However, the examples here should give a concrete basis for a debate both on principles and practical resolutions. Again, please note that the suggested resolutions don&#146;t make much sense in isolation; I see them as part of a comprehensive review to eliminate C/C++ incompatibilities.</p>
<p>I suspect that the main practical problem in eliminating the C/C++ incompatibilities would not be one of the compatibility problems listed above. The main problem would be that starting with Dennis Ritchie&#146;s original text the two standards have evolved independently using related but subtly different vocabularies, phrases, and styles. Reconciling those would take painstaking work of several experienced people for several months. The C++ Standard is 720 pages; the C99 standard is 550 pages. I think the work would be worth it for the C/C++ community. The result would be a better language for all C and C++ programmers.</p>

<H3><FONT COLOR="#000080">References and Notes</FONT></H3>
<p><a name="1"></a>[1]  ISO/IEC 9899:1990, Programming Languages C.</p>
<p><a name="2"></a>[2]  ISO/IEIC 9899:1999, Programming Languages C.</p>
<p><a name="3"></a>[3]  ISO/IEC 14882, Standard for the C++ Language.</p>
<p><a name="4"></a>[4]  Bjarne Stroustrup. <I>Sibling Rivalry: C and C++</I> (AT&amp;T Labs &#151; Research Technical Report TD-54MQZY, January 2002), &lt;www.research.att.com/ ~bs/sibling_rivalry.pdf&gt;.</p>
<p><a name="5"></a>[5]  Andrew Koenig and Bjarne Stroustrup. &#147;C++: As Close to C as Possible But No Closer,&#148; <I>The C++ Report</I>, July 1989.</p>
<p><a name="6"></a>[6]  Bjarne Stroustrup. &#147;C and C++: Siblings,&#148; <I>C/C++ Users Journal</I>, July 2002.</p>
<p><a name="7"></a>[7]  It has been suggested that considering VLAs from a C++ point of view is unfair and disrespectful to the C committee because C is not C++ and C/C++ compatibility isn&#146;t part of the C Standard committee&#146;s charter. I mean no disrespect to the C committee, its members, or to the ISO process that the C committee is part of. However, given that a large C/C++ community exists and that VLAs will inevitably be used together with C++ code (either through linkage or through permissive compiler switches), an analysis is unavoidable and needed.</p>
<p><a name="8"></a>[8]  Bjarne Stroustrup. &#147;C and C++: A Case for Compatibility,&#148; <I>C/C++ User&#146;s Journal</I>, August 2002. </p>

<p><i><B>Bjarne Stroustrup</B> is the designer and original implementer of C++. He has been a member of the C/C++ community since he first used C in 1975. For 17 years, he worked in Bell Labs&#146; Computer Science Research Center alongside people such as Dennis Ritchie and Brian Kernighan. In the early 1980s, he participated in the internal Bell Labs standardization of C. He is the author of <I>The C++ Programming Language</I> and <I>The Design and Evolution of C++</I>. His research interests include distributed systems, operating systems, simulation, design, and programming. He is an AT&amp;T Fellow and heads AT&amp;T Lab&#146;s Large-scale Programming Research department. He is actively involved in the ANSI/ISO standardization of C++. He received the 1993 ACM Grace Murray Hopper award and is an ACM fellow.</i></p>

</blockquote></body></html>
