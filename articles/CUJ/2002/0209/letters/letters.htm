<HTML>   
     <HEAD>
<TITLE>September 2002/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</i></p>
<hr>
<p>Dear <I>C/C++ Users Journal</I>,</p>
<p>Thank you for your efforts to give us the best information. I am a recent subscriber (I have received four issues) and wish to express my complete satisfaction with what I have received.</p>
<p>Thanks especially for remembering Linux and GTK+. A substantial number of programmers are migrating there, and I believe the number will increase sharply.</p>
<p>For your demographics, I program for a radio station (automation, recording and playback from satellite, news cuts, music playlists, etc). Thanks again for an outstanding product.</p>
<p>George Vacca</p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I have read Andrew Koenig and Barbara E. Moo&#146;s article &#147;C++ Made Easier: Naming Unknown Types&#148; (February 2002) with great interest. However, the authors discussed only solutions that already exist as an extension or as a part of the language, and these still leave much to be desired. Therefore I returned to my favorite pet idea for a core language extension: a keyword for an unknown type. It would work exactly like the <B>typeof</B> extension, but without taking any parameters, so one could consider this new keyword to be just a syntactic sugar on <B>typeof</B> operator. In this letter, I will name this imaginary keyword: <B>unknowntype</B>. This doesn&#146;t mean that I&#146;m necessarily proposing that particular keyword since we could as well reuse <B>typename</B> (my personal favorite) or use <B>typeof</B> without parameters or find some better match. To illustrate what the proposed keyword would do, let me start with an example from the article:</p>

<pre>
template&lt;class T&gt;
void process(T&amp; v)
{
    // ...
}
</pre>

<p>In the body of the template function, instead of writing:</p>

<pre>
typeof(v[i]) vi = v[i];
</pre>

<p>or</p>

<pre>
T::value_type vi = v[i];
</pre>

<p>we would write:</p>

<pre>
unknowntype vi = v[i];
</pre>

<p>because all we really care is that the type of <B>vi</B> corresponds to <B>v[i]</B>. We don&#146;t want to have to write things twice (and we have to with <B>typeof</B>) nor should we rely on a convention (a good thing convention, but one can&#146;t always use it, and it also increases the amount of necessary knowledge to start writing code). The compiler knows what type is returned by <B>v[i]</B>, and therefore we are using that knowledge to our advantage. Notice that all this doesn&#146;t diminish the type safety since the <B>unknowntype</B> of <B>vi</B> is known at compile type (just as it is known for <B>typeof(vi[i])</B> and <B>T::value_type</B>), and <B>vi</B> can be further used only as an object of that particular type.</p>
<p>The previous example is rather simple, so advantage is not enough to warrant a core language extension. However, consider this example (adapted slightly from <I>The C++ Standard Library: A Tutorial and Reference</I> by Nicolai M. Josuttis, page 306):</p>

<pre>
pos = find_if(coll.begin(), coll.end(),
  std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2)));
</pre>

<p>Imagine that we want to make a variable of the type returned by the <B>std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2))</B> expression for further reuse. We would have to write:</p>

<pre>
typeof(std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2))) f =
  std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2));
</pre>

<p>or (after finding out what is the exact type returned by the expression):</p>

<pre>
std::unary_negate&lt;std::binder2nd&lt;std::modulus&lt;int&gt; &gt; &gt; f =
  std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2));
</pre>

<p>In my opinion, typing:</p>

<pre>
unknowntype f = std::not1(std::bind2nd(std::modulus&lt;int&gt;(),2));
</pre>

<p>is more appealing and the meaning is clearer. Not to mention the advantage of what would happen if the type returned by the expression changed tomorrow.</p>
<p>Of course, typing:</p>

<pre>
unknowntype f;
</pre>

<p>would raise a compile-time error since in that case the compiler wouldn&#146;t be able to deduce the real type of <B>f</B>.</p>
<p>As our knowledge of generic programming is growing, complex usage patterns are increasing in number, and I think that this new keyword would make writing and maintenance of generic code much easier. As I stated previously, this proposal could be considered just as syntactic sugar on <B>typeof</B> operator. While I think that having standard <B>typeof</B> is a very good thing and would be a step forward in the right direction, the additional advantage of not having to write duplicate code and the simplicity to expressions that this proposal brings, could be, in my opinion, a step forward in making C++ easier to understand and write.</p>
<p>Finally, since the proposal is so straightforward, I&#146;m certain that I&#146;m not the first one to come up with it, so my question is this: why not this extension and what would be its negative consequences?</p>
<p>Best regards,</p>
<p>Ivan Erceg<br>
ivanerceg@manquehue.net</p>

<p><I>Dear Ivan Erceg,</p>
<p>You suggest the following.</p>
<p>In the body of the template function, instead of writing:</I></p>

<pre>
typeof(v[i]) vi = v[i];
</pre>

<p><I>or</I></p>

<pre>
T::value_type vi = v[i];
</pre>

<p><I>we would write:</I></p>

<pre>
unknowntype vi = v[i];
</pre>

<p><I>because all we really care is that the type of <B>vi</B> corresponds to <B>v[i]</B>.</p>
<p>I completely agree with your suggestion and think it would be very nice indeed if C++ had such a feature. Unfortunately, one case in which it would be particularly useful is also very hard to implement. Consider this function:</I></p>

<pre>
unknowntype abs(const unknowntype&amp; x)
{
  if (x &lt; 0)
    x = -x;
  return x;
}
</pre>

<p><I>In this form, this function is similar in effect to:</I></p>

<pre>
template &lt;class T&gt; T abs(const T&amp; x)
{
  if (x &lt; 0)
    x = -x;
  return x;
}
</pre>

<p><I>because in both cases, it is possible to determine from inspection that the return type is the same as the argument type. However, consider what happens in the presence of separate compilation. It is possible to examine the declaration:</I></p>

<pre>
template&lt;class T&gt; T abs(const T&amp;);
</pre>

<p><I>and figure out the return type from the argument type. However, it is not possible to do so with:</I></p>

<pre>
anytype abs(const anytype&amp;);
</pre>

<p><I>Now, the function declaration no longer contains any clue as to the relationship between the argument and result types. As a result, implementation becomes much more difficult.</p>
<p>Because of this difficulty, a facility such as <B>anytype</B> might not find its way into a future revision of the C++ Standard as readily as you or I might like. In any event, our best course right now is to use the same conventions as the standard library when we have the opportunity to do so &#151; and that was the point of our article.</p>
<p>Regards,</p>
<p>Andrew Koenig</I></p>

<hr><p>Hello,</p>
<p>The June issue of the <I>C/C++ Users Journal</I> certainly is interesting. Keep up the good work.</p>
<p>The reference at the end of the article, &#147;A Multiple Substring Search Algorithm,&#148; by Moishe Halibard and Moshe Rubin (June 2002) to &lt;www.dir.univ-rouen.fr/~charras/string/string.html&gt; does not work. Do you know of an accurate URL?</p>
Charles Elliott</p>

<p><I>Charles,</p>
<p>Thank you very much for your kind words about our recent article in CUJ.</p>
<p>We apologize for the fact that the URL referenced at the end of the article is no longer available. Although the bad link is referenced from scores of sites on the Web, the site together with the content was removed without notice.</p>
<p>Fortunately, we have since found that Christian Charras and others have reopened a newer and very impressive site: &lt;www-igm.univ-mlv.fr/~lecroq/string/index.html&gt;. This site not only carries all the content of the previous one, but each algorithm now has a Java applet that shows the algorithm in action. We&#146;re convinced you will find the site very informative.</p>
<p>We thank you again for your email and apologize for the inconvenience.</p>
<p>Moshe Rubin and Moishe Halibard<BR>
Alchemedia Ltd.<br>
&lt;www.alchemedia.com&gt;</I></p>


<hr>
<p>I thoroughly enjoyed Mark Bucci&#146;s article, &#147;Using Genetic Algorithms&#148; in the June 2002 issue of <I>CUJ</I>. I was struck by two important details concerning his evolutionary analogy.</p>
<p>First, his genetic algorithm required the concerted intervention of a creator. I don&#146;t know of any cases of computers spontaneously spawning useful programs.</p>
<p>Second, although his algorithm was very clever at producing micro evolution, or adaptation as it is commonly called, it never evolved into an entirely different species, providing solutions for problems other than its designed purpose, thus failing to demonstrate macro evolution.</p>
<p>I think his article was a prime example of intelligent design.</p>
<Steve Holle</p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>Recently I read a great article &#147;Sutter&#146;s Mill: Why Not Specialize Function Templates?&#148; by Herb Sutter, July 2001. This is really one of beautiful matters.</p>
<p>One thing I noticed though is that example 2.c says:</p>

<pre>
// (c) explicit specialization of (b),
// because the signature can match
// either base template and (b) is
// more specialized than (a)
template&lt;&gt;           
void f&lt;int*&gt;(int*);  //
</pre>

<p>This is not correct because that is exactly the specialization of (a) and not (b). The specialization of (b) will be:</p>

<pre>
template&lt;&gt;
void f&lt;int&gt;(int*);  // T == int !
</pre>

<p>Therefore the last line in this example calls (b) and not (c).</p>
<p>The code in examples 2 and 3 differs only in the order of template declaration. The author implies that specialization depends on that order. Actually both specializations in both examples are exactly the same (specialization of (a)).</p>
<p>If we want to make the difference, then we have to force the compiler to deduce template argument from function argument. For example,</p>

<pre>
template&lt;&gt; void f(int*);
</pre>

<p>However the Standard (14.7.3.12) says that this specialization is ambiguous if it comes after:</p>

<pre>
template&lt;class T&gt; void f(T);
template&lt;class T&gt; void f(T*);
</pre>

<p>So we also will need to change the order of declarations in example 2, first in the (b) declaration, then (c), and then (a).</p>
<p>Thank you,</p>
<p>Oleg Mazonka, Ph.D.<BR>
Software Engineer Motorola</p>

<p><I>Hi Oleg,</p>
<p>Thanks for your mail. The bugs you note are corrected in the version posted online at &lt;www.gotw.ca/publications/mill17.htm&gt;.</p>
<p>I&#146;m glad you enjoyed the article! </p>
<p>Best wishes,</p>
<p>Herb Sutter</I></p>

</blockquote></body></html>
