<HTML>   
     <HEAD>
<TITLE>September 2002/Towards Improved Static Safety: Expressing Meaning by Type</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Towards Improved Static Safety: Expressing Meaning by Type</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Karsten Weihe</FONT></H3>

<BLOCKQUOTE>
<p>With a little extra type discipline on your part, you can greatly increase the reliability of mixed-type computations.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Many logical errors can be caught by a good compiler because they provoke compiler errors or at least warnings. For example, many logical errors appear as type errors in the code. If a wrong object appears in an expression (logical error!), then it may or may not have a compatible type. If not, this results in a type error, and the compiler issues an error message.</p>
<p>However, many other logical errors silently pass all compiler checks and may make debugging a nightmare. In this article, I discuss a simple and convenient technique to increase the degree to which the compiler can check your logical errors. In fact, this technique made my own code much more reliable. A similar idea can be found in Section 16.5 of Barton and Nackman&#146;s seminal book, <I> Scientific and Engineering C++</I> <a href="#1">[1]</a>. However, I will go far beyond them and show that there is much more inside their fundamental idea.</p>
<p>In the following case study, I will stick to a simple, ubiquitous example: integral numbers. This case study stands for a variety of possible applications.</p>

<H3><FONT COLOR="#000080">Case Study</FONT></H3>
<p>Consider this innocent-looking example, which works on an object <B>A</B> of some array class and on an object <B>M</B> of some matrix class:</p>

<pre>
int h = 0;
for ( int i = 0;
  i &lt; M.number_of_columns(); ++i )
  for ( int j = 0;
    j &lt; M.number_of_rows(); ++j )

    {
    M[i][j] = A[h];
    ++h;
    }
</pre>

<p>It is very easy to make a typo here: <B>M[i][i]</B>, <B>M[j][j]</B>, <B>M[j][i]</B>, <B>M[h][j]</B>, or <B>M[i][h]</B> instead of <B>M[i][j]</B>; <B>A[i]</B> or <B>A[j]</B> instead of <B>A[h]</B>, etc. The compiler has no chance to find such an error. Hence, the error must be found by an extensive code review or by extensive run-time tests. Clearly, even the most extensive code review or run-time test is by far less reliable than a compiler check.</p>
<p>The problem is even more virulent during maintenance. For the sake of exposition, suppose you decided to exchange the order of columns and rows: from now on, <B>M[i][j]</B> shall not refer to the entry in column <B>i</B> and row <B>j</B> anymore, but to the entry in row <B>i</B> and column j. Each and every expression of the form <B>M[i][j]</B> must be modified. Moreover, you must not forget the headers of the <B>for</B> loops: it is quite easy to overlook something here. Then, for example, the column index may erroneously run up to <B>M.number_of_rows()</B> or the row index up to <B>M.number_of_columns()</B>, or the wrong variable may be incremented.</p>
<p>However, in the following variant, the compiler can indeed catch every error of this kind:</p>

<pre>
#define array_loop(Type,index_name,size) \
  for ( Type index_name = 0;
  index_name &lt; size; ++index_name )

...

ArrayIndex h = 0;
array_loop ( ColumnIndex, i,
  M.number_of_columns() )
  array_loop ( RowIndex, j,
    M.number_of_rows() )
    {
    M[i][j] = A[h]; // Fine
    M[i][i] = A[h]; // Error:
    // Wrong type of second matrix index
    M[j][j] = A[h]; // Error:
    // Wrong type of first matrix index
    M[i][i] = A[i]; // Error:
    // Wrong type of array index 
    }
</pre>

<p>I will look at the types <B>ArrayIndex</B>, <B>ColumnIndex</B>, and <B>RowIndex</B> in a minute. The crucial point is that these three types are identical but mutually incompatible, thus every mismatch in the body of the loop is caught because it provokes a type error.</p>
<p>Thanks to the macro <B>array_loop</B>, it is also nearly impossible to make an error in the headers of the loops. If you prefer to avoid macros like <B>array_loop</B> and write down the headers of the <B>for</B> loops explicitly, most imaginable errors can still be caught in the new version. For example, if <B>M.number_of_columns()</B> is of type <B>ColumnIndex</B> and <B>M.number_of_rows()</B> of type <B>RowIndex</B>, any confusion of these two methods will be caught:</p>

<pre>
ArrayIndex h = 0;
for ( ColumnIndex i = 0;
  // Error
  i &lt; M.number_of_rows(); ++i )
  for ( RowIndex j = 0;
    // Error
    j &lt; M.number_of_columns(); ++j ) 
   ...
</pre>

<p>In fact, only one serious source of errors remains then, namely confusions of the two increment statements, <B>++i</B> instead of <B>++j</B> or vice versa.</p>
<p>However, this kind of error is eliminated by the macro <B>array_loop</B>.</p>
<p>Now I&#146;ll return to the above maintenance scenario: I want to exchange the roles of the row and column index in expressions of the form <B>M[i][j]</B>. Of course, I will overlook many points where a revision is necessary and will do the revision erroneously at many other points in the program. However, the compiler will mercilessly face me with each error. In other words, the program will be correct again once I have managed to bring it through the compiler (unless the revision was done incredibly sloppily).</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<p>It is not too hard to implement a class <B>ColumnIndex</B> and a class <B>RowIndex</B> that may replace <B>int</B>, but are mutually incompatible, for example:</p>

<pre>
class ColumnIndex
  {
  int _i;
  public:
  ColumnIndex ( int n ) : _i(n) {}
  ...

  bool operator&lt;
    ( ColumnIndex const&amp; n ) const
    { return _i &lt; n._i; }
  ...

  ColumnIndex const&amp; operator=
    ( ColumnIndex const&amp; n )
    { _i = n._i; return *this; }

  ColumnIndex const&amp; operator+=
    ( ColumnIndex const&amp; n )
    { _i += n._i; return *this; }

  ColumnIndex const&amp; operator++
    ( ColumnIndex const&amp; n )
    { ++_i; return *this; }
  ...

  int int_value () const
    { return _i; }
  };
</pre>

<p>Method <B>int_value()</B> allows access to the real value of an <B>ColumnIndex</B> object. It is tempting to define a conversion operator instead of <B>int_value</B>:</p>

<pre>
operator int () const { return _i; }
</pre>

<p>However, this would silently break the static safety that has been achieved. For example, the following line would not raise a compiler error anymore:</p>

<pre>
for ( ColumnIndex i = 0;
  i &lt; M.number_of_rows(); ++i )
</pre>

<p>In fact, both <B>i</B> and <B>M.number_of_rows()</B> would silently convert to <B>int</B>, which means that <B>operator&lt;(int,int)</B> would be called. However, the absence of an implicit conversion to <B>int</B> has an undesirable consequence: it is not possible to use a <B>ColumnIndex</B> object wherever an <B>int</B> is expected. Here is a simple example:</p>

<pre>
ColumnIndex  i (1000);
double*  p1 = new [i];         // Error
double*  p2 = new [i.int_value()];   // Fine
</pre>

<p>This is particularly annoying in template code, because template code should be applicable to both built-in integral types and integer classes:</p>

<pre>
template &lt; typename IntegerType &gt;
double*  allocate ( IntegerType i )
  {
  return new [ /* 'i' or 'i.int_value()' ??? */ ];
  }
</pre>

<p>The following standard trick solves this problem: simply introduce a common syntax for <B>int</B> and <B>ColumnIndex</B>.</p>

<pre>
int int_value ( int i )
  {
  return i;
  }

int int_value ( ColumnIndex i )
  {
  return i.int_value();
  }

template &lt; typename IntegerType &gt;
double*  allocate ( IntegerType i )
  {
  return new [ int_value(i) ];
  }
</pre>

<H3><FONT COLOR="#000080">Template Solution</FONT></H3>

<p>In a real program, you potentially need many types like <B>ColumnIndex</B> and <B>RowIndex</B>, and you do not want to write as many complete integer classes from scratch. There is a feature in C++ that allows you to write the necessary code once and for all: templates. However, I will &#147;misuse&#148; templates in a sense; the template argument <B>T</B> does not appear at all in the code of the template. At first glance, this may look a bit strange. However, such an &#147;anonymous&#148; template argument allows you to generate an infinite set of types that are identical but not compatible. Here is a sketch of the class template:</p>

<pre>
template &lt; typename T &gt;
class Integer
  {
  int _i;
  public:
  Integer ( int n ) : _i(n) {}
  ...
  bool operator&lt; ( Integer const&amp; n ) const
    { return _i &lt; n._i; }
  ...
  Integer const&amp; operator= ( Integer const&amp; n )
    { _i = n._i; return *this; }
  ...

  int int_value () const
    { return _i; }
  };
</pre>

<p>For each type that you want to create, you have to define a template argument to replace the placeholder <B>T</B>. An empty <B>struct</B> suffices. However, you need one separate empty <B>struct</B> for every type:</p>

<pre>
struct ColumnIndexDiscriminator {};
struct  RowIndexDiscriminator {};
</pre>

<p>Now you can define the types <B>ColumnIndex</B> and <B>RowIndex</B>:</p>

<pre>
typedef Integer &lt; ColumnIndexDiscriminator &gt;  ColumnIndex;
typedef Integer &lt;  RowIndexDiscriminator &gt;   RowIndex;
</pre>

<p>Although the <B>struct</B>s <B>ColumnIndexDiscriminator</B> and <B>RowIndexDiscriminator</B> are identical, they are not compatible. Hence, their template instantiations, <B>ColumnIndex</B> and <B>RowIndex</B>, are not compatible either. In summary, you have to write two lines for every type such as <B>ColumnIndex</B> and <B>RowIndex</B>. This is certainly a worthwhile effort for such an increase of static safety. (If you are a minimalist, write a macro for it!)</p>
<p>To conclude, a template such as <B>Integer</B> makes it easy to express different meanings by different types. A column index and a row index have different meanings, which means that every replacement of a column index by a row index or vice versa is a logical error. In the above approach, column and row indexes indeed have different types, so the compiler can catch these logical errors.</p>

<H3><FONT COLOR="#000080">Collaborating Types</FONT></H3>

<p>However, this is not yet the whole story. Although types like <B>ColumnIndex</B> and <B>RowIndex</B> shall not replace each other, they often should be able to collaborate. To understand this point better, I now turn your attention to a completely different context: the management of bank accounts. For ease of exposition, I will assume for a moment that each amount of money is integral (only dollars, no cents). Then you could define an instantiation of class template <B>Integer</B> for money:</p>

<pre>
struct MoneyDiscriminator {};
typedef Integer &lt; MoneyDiscriminator &gt;  Money;
</pre>

<p>However, a bank account may have credits and debits, and any confusion of credits and debits would be a serious logical error (presumably with serious consequences for the bank or its customers). Hence, separate types for credits and debits would even increase the static safety of the program:</p>

<pre>
struct CreditDiscriminator {};
struct  DebitDiscriminator {};

typedef Integer &lt; CreditDiscriminator &gt;  Credit;
typedef Integer &lt;  DebitDiscriminator &gt;   Debit;
</pre>

<p>However, you want to subtract debits from credits to obtain the balance of the account. For this, I introduce yet another type, <B>Balance</B>, and operators to add credits and subtract debits:</p>

<pre>
struct BalanceDiscriminator {};
typedef Integer &lt; BalanceDiscriminator &gt;  Balance;

Balance operator- ( Credit c, Debit d )
  {
  return Balance ( c.int_value() - d.int_value() );
  }

Balance operator+ ( Balance b, Credit c )
  {
  return Balance ( b.int_value() + c.int_value() );
  }

Balance operator+ ( Credit c, Balance b )
  {
  return Balance ( b.int_value() + c.int_value() );
  }

Balance operator- ( Balance c, Debit d )
  {
  return Balance ( c.int_value() - d.int_value() );
  }
</pre>

<p>The profit from these operators&#146; definitions is a significant increase in static safety.</p>
<p>If an expression made of credits, debits, and balances does not explicitly call method <B>int_value()</B>, then the collaboration of these types perfectly conforms to their meanings.</p>
<p>In other words: as long as <B>int_value()</B> is not used explicitly outside these few lines, you may blindly assume that credits are always added and debits are always subtracted. Of course, that does not mean that credits and debits can never be added. A call to <B>int_value</B> circumvents all precautions:</p>

<pre>
Credit c;
Debit  d;

Balance b = c.int_value() + d.int_value();
</pre>

<p>In some rare cases, this might indeed be reasonable, so you should not try to close this security gap (to close this gap, you could make <B>int_value</B> private and the above operators friends). The crucial point is that all points where you circumvented your precautions &#151; be it for good or bad reasons &#151; are easily found by searching the source files once for the pattern <B>int_value</B>.</p>

<H3><FONT COLOR="#000080">Analogy in Science</FONT></H3>

<p>This concept has an interesting analogy in science, notably in the realm of physics. Every physical value has a specific dimension, for example, speed, weight, power, performance, whatever. You learned in school that a physical formula is only correct if the dimensions of all involved variables are correct. To give a concrete example: speed is distance divided by time, and if a speed value is on the left-hand side of an equation, the right-hand side must not multiply distance and time. Hence, if speed, distance, and time are realized as different types and the operators:</p>

<pre>
Speed   operator/ (Distance, Time);
Distance  operator* (Speed, Time);
Distance  operator* (Time, Speed);
Time    operator/ (Distance, Speed);
</pre>

<p>are the only operators defined for this triple of types, then no expression on these three types can yield physical nonsense.</p>
<p>This analogy is not new. In the introduction, I mentioned Section 16.5 of Barton and Nackman&#146;s book <a href="#1">[1]</a>. There they introduce physical dimensions as C++ types to ensure that the dimensions in scientific formulae are correct. However, the banking account example demonstrates that there is much more inside this general idea. For example, in physics, you cannot subtract two values of different dimensions from each other, whereas it makes perfect sense to give credits and debits different types just to ensure that they may be subtracted from each other and nothing else. In the following, I will completely leave the analogy to science behind.</p>

<H3><FONT COLOR="#000080">Semi-Compatible Types</FONT></H3>

<p>From now on, I will distinguish between dollars and cents in the banking program. Of course, every confusion of amounts in dollar and amounts in cent would be a serious error. All errors of this kind can be avoided by introducing incompatible types for dollars and cents:</p>

<pre>
struct CreditInDollarsDiscriminator {};
struct CreditInCentsDiscriminator   {};

typedef Integer &lt; CreditInDollarsDiscriminator &gt;  CreditInDollars;
typedef Integer &lt; CreditInCentsDiscriminator   &gt;  CreditInCents;
</pre>

<p>However, I want to add amounts in dollars and amounts in cents. Operators such as:</p>

<pre>
CreditInCents operator+ ( CreditInDollars, CreditInCents )
</pre>

<p>are certainly not appropriate, because the correct semantics is counter-intuitive:</p>

<pre>
CreditInCents  credit_in_cents   (1000);   // $10
CreditInDollars  credit_in_dollars (1);    // $1

// Should write '11' or '1100', not the "arithmetically
// correct" value '1001':
cout &lt;&lt; credit_in_cents + credit_in_dollars;
</pre>

<p>The code becomes more intuitive when the programmer is forced to insert the conversion factor explicitly:</p>

<pre>
cout &lt;&lt; credit_in_cents + credit_in_dollars * cents_per_dollar;
</pre>

<p>Object <B>cents_per_dollar</B> is of a specific &#147;conversion-factor type,&#148; which is compatible with the dollar type and the cent type exactly in the way in which a collaboration makes sense:</p>

<pre>
struct CentsPerDollarDiscriminator {};
typedef Integer &lt; CentsPerDollarDiscriminator &gt;  CentsPerDollar;

CreditInCents operator* ( CreditInDollars i, CentsPerDollar j )
  {
  return CreditInCents ( i.int_value() * j.int_value() );
  }

CreditInCents operator* ( CentsPerDollar i, CreditInDollars j )
  {
  return CreditInCents ( i.int_value() * j.int_value() );
  }

CentsPerDollar const  cents_per_dollar (100);
</pre>

<p>This conversion-factor type can also be used for conversions &#147;the other way round,&#148; from cents to dollars:</p>

<pre>
CreditInDollars operator/ ( CreditInCents i, CentsPerDollar j )
  {
  return CreditInDollars ( i.int_value() / j.int_value() );
  }

CreditInCents operator% ( CreditInCents i, CentsPerDollar j )
  {
  return CreditInCents ( i.int_value() % j.int_value() );
  }

CreditInCents  i (1234);   // $12 + 34c

// Writes '12.34' as desired:
cout &lt;&lt; i / cents_per_dollar &lt;&lt; '.' &lt;&lt; i % cents_per_dollar;
</pre>

<H3><FONT COLOR="#000080">Constants</FONT></H3>

<p>Very often, the conversion factor between two units of measure is not fixed (e.g., the rate of exchange between two currencies). In this case, a constant or variable object like the first version of <B>cents_per_dollar</B> is appropriate. However, in case of a fixed conversion factor such as factor 100 for the conversion between cents and dollars, such an object is unnecessarily unsafe: any object of type <B>CentsPerDollar</B> can replace <B>cents_per_dollar</B>, whatever its value will be.</p>
<p>To close this final gap in the static safety of the code, you could define <B>CentsPerDollar</B> slightly differently, namely such that the constructor has no arguments and initializes the private member <B>_i</B> to be $100. Of course, all non-<B>const</B> methods should then be omitted, because it does not make sense to change the value of a <B>CentsPerDollar</B> object.</p>
<p>Many constant conversion factors like <B>cents_per_dollar</B> may occur in a program. Hence, I will again realize this class as a template. The conversion factor is introduced as an additional template argument value:</p>

<pre>
template &lt; typename T, int value &gt;
class ConstantInteger
  {
  int const _i;
  public:
  ConstantInteger () : _i(value) {}
  ...
  };
</pre>

<p>Now you can blindly rely on the correct value of <B>cents_per_dollar</B>:</p>

<pre>
struct CentsPerDollarDiscriminator {};
typedef ConstantInteger &lt; CentsPerDollarDiscriminator, 100 &gt; CentsPerDollar;

CentsPerDollar  cents_per_dollar;   // 100
</pre>

<H3><FONT COLOR="#000080">Which Operations to Predefine?</FONT></H3>

<p>Some of the standard operators for integral types should be predefined as templates in the same namespace as template class <B>Integer</B> so that they are available for all instantiations of <B>Integer</B>. Clearly, the question of which operations to predefine cannot be answered ultimately. Here is my favorite list: </p>

<pre>
bool operator== ( Integer &lt; T &gt;, Integer &lt; T &gt; );
bool operator!= ( Integer &lt; T &gt;, Integer &lt; T &gt; );
bool operator&lt;  ( Integer &lt; T &gt;, Integer &lt; T &gt; );
bool operator&lt;= ( Integer &lt; T &gt;, Integer &lt; T &gt; );
bool operator&gt;  ( Integer &lt; T &gt;, Integer &lt; T &gt; );
bool operator&gt;= ( Integer &lt; T &gt;, Integer &lt; T &gt; );

Integer &lt; T &gt; operator+ ( Integer &lt; T &gt;, Integer &lt; T &gt; );

Integer &lt; T &gt; operator* ( Integer &lt; T &gt;, int );
Integer &lt; T &gt; operator* ( int, Integer &lt; T &gt; );

Integer &lt; T &gt; operator/ ( Integer &lt; T &gt;, int);
int       operator/ ( Integer &lt; T &gt;, Integer &lt; T &gt; );
</pre>

<p>At first glance, multiplication and division look a bit strange. Again the physical analogy helps clarify things: when you multiply or divide a speed value by a dimensionless value, you will get another speed value. In turn, when you divide two speed values, you will get their ratio, which is dimensionless. This analogy is reflected by the above definitions of <B>operator*</B> and <B>operator/</B>.</p>
<p>On the other hand, if you multiply two speed values, you will get a value of dimension &#147;speed squared,&#148; and if you divide a dimensionless value by a speed value, you will get a value of dimension &#147;time by distance.&#148; Dimensions of this kind do not make sense in most potential applications of my technique. (What is &#147;dollar squared&#148;?). Hence, these versions should not be defined as templates but &#147;by hand,&#148; only for instantiations of template <B>Integer</B> for which they make sense. For example, for a <B>Distance</B> type, the square type does make sense:</p>

<pre>
struct  DistanceDiscriminator {};
struct    AreaDiscriminator {};

typedef Integer &lt; DistanceDiscriminator &gt;  Distance;
typedef Integer &lt;   AreaDiscriminator &gt;  Area;

Area operator* ( Distance, Distance );
</pre>

<p>For analogous reasons, <B>operator%</B> does not always make sense and is thus omitted from the above list.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Programs can be made more reliable by turning (different) meanings into (incompatible) types. This is particularly useful during maintenance: there is a high chance that errors in a revision process result in type errors and are thus caught by the compiler.</p>
<p>The idea of dimensions borrowed from physics makes even more sense if you apply it in a more fine-grained way than in physics.</p>
<p>C++ templates allow a short, convenient, flexible realization. Typically, a function or class is made a template to create a class of similar types. I have shown an example where it makes sense to create a class of identical (yet not compatible) types using the template mechanism of C++.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]  John J. Barton and Lee R. Nackman. <I>Scientific and Engineering C++</I> (Addison-Wesley, 1995). </p>

<p><i><B>Karsten Weihe</B> is a professor of computer science at the Darmstadt University of Technology, Germany. His main research topic is mathematical optimization and its application in business and industry. This interest has guided his focus to problems of algorithmic software development, especially in C++.</i></p>

</blockquote></body></html>
