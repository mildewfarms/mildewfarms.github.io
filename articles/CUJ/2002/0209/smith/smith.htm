<HTML>   
     <HEAD>
<TITLE>September 2002/Inside .NET&#146;s Delegates and Events Using C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C# and .NET</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Inside .NET&#146;s Delegates and Events Using C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">J. Daniel Smith</FONT></H3>

<BLOCKQUOTE>
<p>The best way to really understand delegates and events is to implement them yourself &#151; in plain old C++.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The .NET Framework has introduced delegates and events as a type-safe replacement for C-style <B>callback</B> functions; they are used extensively. Implementing similar functionality using Standard C++ provides a better understanding of these concepts, while also exploring some interesting C++ techniques.</p>

<H3><FONT COLOR="#000080">The Delegate and Event Keywords in C#</FONT></H3>

<p>Let&#146;s start by taking a look at a simple program in C# (the code below is slightly abbreviated). The following program displays this output:</p>

<pre>
SimpleDelegateFunction called from Ob1,
  string=Event fired!
Event fired!(Ob1): 3:49:46 PM on
  Friday, May 10, 2002
Event fired!(Ob1): 1056318417
SimpleDelegateFunction called from Ob2,
  string=Event fired!
Event fired!(Ob2): 3:49:46 PM on
  Friday, May 10, 2002
Event fired!(Ob2): 1056318417
</pre>

<p>All of this happens as a result of the line <B>dae.FirePrintString("Event fired!")</B>. In developing a C++ implementation, I wanted to mimic the C# syntax and duplicate the functionality.</p>

<pre>
namespace DelegatesAndEvents
{
  class DelegatesAndEvents
  {
    public delegate void PrintString<BR>
      (string s);
    public event PrintString <BR>
      MyPrintString;

    public void FirePrintString(string s)
    {
      if (MyPrintString != null)
        MyPrintString(s);
    }
  }

  class TestDelegatesAndEvents
  {
    [STAThread]
    static void Main(string[] args)
    {
      DelegatesAndEvents dae = <BR>
        new DelegatesAndEvents();

      MyDelegates d = new MyDelegates();
      d.Name = "Ob1";
      dae.MyPrintString += <BR>
        new DelegatesAndEvents.PrintString
        (d.SimpleDelegateFunction);

      // ... more code similar to the <BR>
      // above few lines ...

      dae.FirePrintString("Event fired!");
    }
  }

  class MyDelegates
  {
    // ... "Name" property omitted...
    public void SimpleDelegateFunction<BR>
      (string s)
    {
      Console.WriteLine
        ("SimpleDelegateFunction called <BR>
         from {0}, string={1}", m_name, s);
    }
    // ... more methods ...

  }
}
</pre>

<H3><FONT COLOR="#000080">Type-Safe Function Pointers in C++</FONT></H3>

<p>One of the criticisms of the &#147;old ways&#148; is that they are not type safe <a href="#1">[1]</a>. As proof, code such as:</p>

<pre>
typedef size_t (*FUNC)(const char*);
void printSize(const char* str) {
  FUNC f = strlen;
  (void) printf("%s is %ld chars\n", str, f(str));
}
void crashAndBurn(const char* str) {
  FUNC f = reinterpret_cast&lt;FUNC&gt;(strcat);
  f(str);
}
</pre>

<p>is offered <a href="#2">[2]</a>. Of course, anytime you use <B>reinterpret_cast</B>, you&#146;re probably asking for trouble. The C++ compiler will complain if you take out the <B>cast</B>, and the much safer <B>static_cast</B> won&#146;t do the conversion either. The example is also a bit like comparing apples and oranges since everything in C# is an object, and <B>reinterpret_cast</B> is supposed to be an escape hatch. A better C++ example would avoid using <B>reinterpret_cast</B> with member function pointers:</p>

<pre>
struct Object { };
struct Str : public Object {
  size_t Len(const char* str) {
    return strlen(str);
  }
  char* Cat(char* s1, const char* s2) {
    return strcat(s1, s2);
  }
};

typedef size_t (Object::*FUNC)(const char*);
void printSize(const char* s) {
  Str str;
  FUNC f = static_cast&lt;FUNC&gt;(&amp;Str::Len);
  (void) printf("%s is %ld chars\n", s, (str.*f)(s));
}
void crashAndBurn(const char* s) {
  Str str;
  FUNC f = static_cast&lt;FUNC&gt;(&amp;Str::Cat);
  (str.*f)(s);
}
</pre>

<p>The <B>static_cast</B> operator will convert the <B>Str::Len</B> function pointer since <B>Str</B> is derived from <B>Object</B>, but it is type safe in that <B>Str::Cat</B> can&#146;t be converted because the function signatures don&#146;t match.</p>
<p>Member function pointers work much like regular function pointers; the only difference (besides the even more complicated syntax) is that you need a class instance through which to call the member function. Of course, member functions can also be called through a pointer to a class instance using the <B>-&gt;*</B> operator:</p>

<pre>
  Str* pStr = new Str();
  FUNC f = static_cast&lt;FUNC&gt;(&amp;Str::Len);
  (void) printf("%s is %ld chars\n", s, (str-&gt;*f)(s));
  delete pStr;
</pre>

<p>As long as everything derives from a base <B>Object</B> class (which is the case in C#), you can create type-safe member function pointers in C++.</p>

<H3><FONT COLOR="#000080">Creating a Delegate Class</FONT></H3>

<p>Having type-safe member function pointers is the first step in duplicating the .NET functionality. However, a member function pointer is useless on its own &#151; you always need a class instance; a <B>Delegate</B> object holds on to both pieces making it easy to call a member function. Continuing with the above example, you could write:</p>

<pre>
struct StrLen_Delegate
{
  typedef size_t (Str::*MF_T)(const char*);
  MF_T m_method;
  Object&amp; m_pTarget;

  StrLen_Delegate(Object&amp; o, const MF_T&amp; mf) :
    m_pTarget(&amp;o), m_method(mf) {}

  MF_T Method() const {
    return m_method;
  }
  Object&amp; Target() const {
    return *m_pTarget;
  }

  size_t Invoke(const char* s) {
    (m_pTarget.*m_method)(s);
  }
};

void printSize2(const char* s) {
  Str str;
  StrLen_Delegate d(str, &amp;Str::Len);
  (void) printf("%s is %ld chars\n", s, <BR>
     d.Invoke(s));
}
</pre>

<p>With the delegate class, calling a member function is much simpler. Making this class a functor by using <B>operator</B> instead of <B>Invoke</B> would reduce the call to just <B>d(s)</B>; I used <B>Invoke</B> for clarity and to match .NET conventions. Notice, the class instance is an <B>Object</B> rather than <B>Str</B>. This allows a member function pointer from any class derived from <B>Object</B> to be used to create this delegate as long as the signature matches.</p>
<p>This class works fine for this example, but it&#146;s not very flexible; a new delegate class must be written for each possible member function signature. .NET solves this by using the rich type information maintained by the CLR (Common Language Runtime). This isn&#146;t a very viable option in C++, but templates can be used to achieve similar results. Rather than fixing the parameters of <B>Invoke</B> as <B>const char* s</B>, you specify the type as a template argument:</p>

<pre>
template &lt;typename ARG1&gt;
struct StrLen_Delegate
{
  typedef size_t (Str::*MF_T)(ARG1);
  // ... as above ...
  size_t Invoke(ARG1 v1) {
    (m_pTarget.*m_method)(v1);
  }
};
</pre>

<p>This is better, but <B>Invoke</B> will only work for single argument member functions. Also, a delegate just cares about a class instance and member function pointer; it doesn&#146;t really concern itself with the details of the member function pointer. Finally, it will be convenient (for use as a template argument) to be able to easily generate a <B>typedef</B> for the member function pointer. Since everything derives from an <B>Object</B> class, these details can all be moved there:</p>

<pre>
struct Object
{
  template &lt;typename ARG1&gt;
  struct void1_T {
    typedef void (Object::*mf_t)(ARG1);
  };

  template &lt;typename ARG1, typename ARG2&gt;
  void Invoke(void1_T&lt;ARG1&gt;::mf_t mf, ARG1 v1, ARG2) const {
    (this-&gt;*mf)(v1);
  }
};
template &lt;typename CLASS&gt;
class ObjectT : public Object {};
typedef  ObjectT&lt;void&gt; VoidType;
</pre>

<p>This base <B>Object</B> class contains a <B>typedef</B> for each member function signature; I&#146;ve simplified things by using a <B>void</B> return type. The <B>typedef</B> can be used as follows:</p>

<pre>
typedef Object::void1_T&lt;std::string&gt;::mf_t StringMF_t;
</pre>

<p>to easily create a <B>typedef</B> for a member function pointer taking a <B>std::string</B> argument and returning <B>void</B>.</p>
<p><B>Invoke</B> has been tweaked to account for additional arguments. This is necessary because all of the <B>Invoke</B> methods must have the same number of arguments; the overload resolution is done based on the first argument &#151; the type of the member function pointer. Note that most of the .NET Framework avoids this complication by always using an <B>EventArgs</B> object in delegates. You can add additional arguments by deriving from <B>EventArgs</B> rather than adding to the signature of the delegate.</p>
<p>Finally, the <B>ObjectT</B> template provides a simple way to generate unique types, each of which is ultimately derived from <B>Object</B>. This ensures type safety.</p>
<p>With all of that, the delegate class now looks like:</p>

<pre>
template &lt;typename MF_T&gt;
class DelegateT_ : public ObjectT&lt;MF_T&gt;
{
  MF_T m_method;
  Object* m_pTarget;

protected:
  DelegateT_() : m_pTarget(NULL), m_method(NULL) {}
  DelegateT_(Object&amp; o, const MF_T&amp; mf) :
    m_pTarget(&amp;o), m_method(mf) {}

public:
  MF_T Method() const {
    return m_method;
  }
  Object&amp; Target() const {
    return *m_pTarget;
  }
};
</pre>

<p>The template argument is now a member function pointer <B>typedef</B> (generated as shown above), and the <B>Invoke</B> methods are now inherited from the base <B>Object</B> class.</p>

<H3><FONT COLOR="#000080">Maintaining a Collection of Delegates</FONT></H3>

<p>In C#, the <B>Delegate</B> and <B>Event</B> keywords work together to create a list of delegates. Referring to the first example above:</p>

<pre>
  new DelegatesAndEvents.PrintString(d.SimpleDelegateFunction);
</pre>

<p>creates a new delegate object similar to my C++ implementation:</p>

<pre>
StrLen_Delegate d(str, &amp;Str::Len);
</pre>

<p>The <B>MyPrintString</B> object is an event that has an overloaded <B>operator+=</B> for adding delegates. Similar things in C++ can be done to duplicate this functionality.</p>
<p>The <B>Delegate</B> keyword in C# really creates a <B>MultiCastDelegate</B> object (see <a href="#3">[3]</a> for details). You&#146;ll notice that I called the delegate class above <B>DelegateT_</B> (the trailing underscore indicates that the name is reserved). Strictly speaking, the name <B>_DelegateT</B> is reserved for the implementation (as is <B>__DelegateT</B>) because a capital letter follows the underscore. <B>_delegateT</B> would be OK (only one underscore followed by a lowercase letter), but I tend to avoid any potential for problems with leading underscores (somebody else reading my code might not be aware of all the rules) rather than use a trailing one instead. The reason for making <B>DelegateT_</B> reserved is that the delegate class that duplicates .NET functionality is derived from <B>MultiCastDelegate</B>.</p>
<p><B>Delegate</B> objects can easily be stored in a Standard C++ container. I use <B>list</B> since it is closest to what .NET does. Depending on your needs, a <B>vector</B> or <B>deque</B> could also be used. Using a <B>set</B> provides the interesting characteristic of invoking each delegate only once no matter how many times it&#146;s added. The first part of <B>MultiCastDelegate</B> is written as:</p>

<pre>
template &lt;typename MF_T, typename ARG1 = VoidType,
  typename ARG2 = VoidType&gt;
class MulticastDelegateT : public DelegateT_&lt;MF_T&gt;
{
  typedef DelegateT_&lt;MF_T&gt; Delegate;
  typedef std::list&lt;Delegate&gt; Delegates_t;
protected:
  MulticastDelegateT() {}
public:
  MulticastDelegateT(Object&amp; o, const MF_T&amp; mf) :
    Delegate(o, mf) {}

  MulticastDelegateT&amp; operator+=(const Delegate&amp; d) {
    m_delegates.push_back(d);
    return *this;
  }

private:
  Delegates_t m_delegates;
};
</pre>

<p>This uses a <B>list</B> together with a few convenient <B>typedef</B>s to store a collection of delegates. It needs to derive from <B>DelegateT_</B> since I&#146;m in turn going to derive <B>DelegateT</B> from <B>MultiCastDelegateT</B> as the real delegate class.</p>
<p>Firing an event in C# iterates over all the stored delegates and invokes each one. Since I&#146;m using a standard container, this is simple using iterators:</p>

<pre>
  void operator()(ARG1 v1 = VoidType(),
    ARG2 v2 = VoidType()) const {
    for (Delegates_t::const_iterator it = m_delegates.begin();
      it != m_delegates.end(); ++it)
      (it-&gt;Target()).Invoke(it-&gt;Method(), v1, v2);
  }
</pre>

<p>Even if you&#146;re comfortable with Standard C++ containers, this is quite a line of code: using an iterator to call a member function all within a templatized class! Dereferencing the iterator makes it easier to see what&#146;s going on:</p>

<pre>
const Delegate&amp; d = *it;
d.Invoke(d.Method(), v1, v2);
</pre>

<p>and if you&#146;re not comfortable with iterators, you can index a <B>deque</B> just like an array:</p>

<pre>
for (int i=0; i&lt;m_delegates.size(); i++)
  Delegate d = m_delegates[i];
</pre>

<p>At this point, you could add the following template member function to the <B>DelegateT_</B> class:</p>

<pre>
  template &lt;typename ARG1, typename ARG2&gt;
  void Invoke_(ARG1 v1 = ARG1(), ARG2 v2 = ARG2()) const {
    this-&gt;Invoke(m_method, v1, v2);
  }
</pre>

<p>which would free the <B>MultiCastDelegateT::Invoke</B> method from having to pass the member function pointer to <B>Object::Invoke</B>:</p>

<pre>
d.Invoke_(v1, v2);
</pre>

<p>However, that requires each argument to have a default constructor, which isn&#146;t always the case. Also, since <B>MultiCastDelegateT</B> is the real delegate base class, it didn&#146;t seem like too much of a burden to call the <B>Object::Invoke</B> directory &#151; even if the code is more complicated because of it. (It also causes the dreaded &#147;Internal Compiler Error&#148; in Visual C++ .NET).</p>
<p>The actual delegate class is now just a simple wrapper around <B>MultiCastDelegateT</B>:</p>

<pre>
template &lt;typename MF_T, typename ARG1 = VoidType,
  typename ARG2 = VoidType&gt;
struct DelegateT :
  public MulticastDelegateT&lt;MF_T, ARG1, ARG2&gt;
{
  DelegateT(Object&amp; o, const MF_T&amp; mf) :
    MulticastDelegateT&lt;MF_T, ARG1, ARG2&gt;(o, mf) {}
  DelegateT() {}
  typedef DelegateT&lt;MF_T, ARG1, ARG2&gt; Event;
};
</pre>

<p>Its main purpose is to provide the <B>Event typedef</B>.</p>

<H3><FONT COLOR="#000080">Putting It All Together</FONT></H3>

<p>You can now write the <B>DelegatesAndEvents</B> class from the C# example in C++:</p>

<pre>
class DelegatesAndEvents
{
  // C#: public delegate void PrintString(string s);
  typedef DelegateT&lt;Object::void1_T&lt;std::string&gt;::mf_t,
    std::string&gt; PrintString_;
public:
  template &lt;typename OBJECT&gt;
    static PrintString_ PrintString(OBJECT&amp; o,
      void (OBJECT::*mf)(std::string)) {
    return PrintString_(o,
      static_cast&lt;Object::void1_T&lt;std::string&gt;::mf_t&gt;(mf));
  }
  // C#: public event PrintString MyPrintString;
  PrintString_::Event MyPrintString;  

  void FirePrintString(std::string s) {
    MyPrintString(s);
  }
};
</pre>

<p>The syntax is horrible and could probably be simplified with a few clever macros if desired. But macros have a bad reputation these days, and the whole point of this exercise is to understand the details. In any case, you can appreciate the work the C# compiler is doing for you.</p>
<p>The first line creates a private <B>typedef</B> of the member function pointer called <B>PrintString_</B>. It&#146;s a shame that the argument type <B>std::string</B> has to be listed twice, but that&#146;s a result of Visual C++ not supporting partial template specialization. The <B>static</B> method provides an easy way to create a delegate of your type, which lets you write:</p>

<pre>
DelegatesAndEvents::PrintString_ 
  myDelegate =
  DelegatesAndEvents::PrintString(d,
    &amp;MyDelegates::SimpleDelegateFunction);
</pre>

<p>which is similar to the C# code above.</p>
<p>Then, the event is created using the <B>Event typedef</B> from <B>DelegateT_</B>. Notice how this series of <B>typedef</B>s allows the C++ code to at least have some resemblance to C#. Finally, there is a method to fire the event, which is practically identical to C#. (Because you&#146;re using a standard container, you don&#146;t have to worry about a <B>NULL</B> list.)</p>
<p>Client code for using this delegate and event is now straightforward and also quite similar to the C# code (again, this code is slightly abbreviated):</p>

<pre>
struct MyDelegates : public ObjectT&lt;MyDelegates&gt;
{
  // ... Name omitted...
  void SimpleDelegateFunction(std::string s)
  {
    printf("SimpleDelegateFunction called from %s,
      string=%s\n", m_name.c_str(), s.c_str());
  }
  // ... more methods ...
};
void CppStyle()
{
     DelegatesAndEvents dae;

    MyDelegates d;
  d.Name() = "Obj1";

  dae.MyPrintString += DelegatesAndEvents::PrintString
    (d, &amp;MyDelegates::SimpleDelegateFunction);
    // ... more code similar to the above few lines ...

  dae.FirePrintString("Event fired!");
}
</pre>

<p>Notice how <B>MultiCastDelegateT::operator+=</B> is called to add each new delegate returned by the static method <B>DelegatesAndEvents::PrintString</B> to the list of delegates.</p>

<H3><FONT COLOR="#000080">Managed C++</FONT></H3>

<p>Since delegates and events are part of the .NET framework, all .NET languages can use them. The template-based implementation I&#146;ve described is specific to C++. Microsoft has taken a different approach to exposing this functionality in C++ &#151; an extension to Standard C++ called Managed C++. Perhaps not too surprisingly, writing this sample in Managed C++ is quite similar to the original code:</p>

<pre>
public __gc struct DelegatesAndEvents {
   __event void MyPrintString(String* s);
   void FirePrintString(String* s) {
    MyPrintString(s);
   }
};

__gc struct MyDelegates
{
  String* Name;
  void SimpleDelegateFunction(String* s) {
    Console::WriteLine
      ("SimpleDelegateFunction called from {0} string={1}",
       Name, s);
  }
};

void ManagedCpp()
{
  DelegatesAndEvents* dae = new DelegatesAndEvents();

  MyDelegates* d = new MyDelegates();
  d-&gt;Name = "Obj1";
  __hook(&amp;DelegatesAndEvents::MyPrintString, dae,
    &amp;MyDelegates::SimpleDelegateFunction, d);

  dae-&gt;FirePrintString(S"Event fired!");
}
</pre>

<p>The keyword <B>__gc</B> marks a class as being garbage collected (managed); no calls to <B>delete</B> are needed. The single <B>__event</B> keyword does the work of most of the code presented above. Notice that instead of providing <B>operator+=</B>, Managed C++ uses the <B>__hook</B> keyword instead. You might find it interesting to run the (managed) C++ compiler with the <B>-Fx</B> flag <a href="#4">[4]</a> on the above code and examine the resulting <B>.mrg</B> file. It sure is easier to add new functionality at the compiler level instead of writing templates.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>By using some rather advanced C++ techniques, I&#146;ve shown that it is possible to implement delegates and events for some simple example code. This implementation is intentionally based on the .NET Framework. A more elegant and pure C++ solution might leverage adapters and binders from the Standard C++ library.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p><a name="1"></a>[1]  Jeffrey Richter. &#147;An Introduction to Delegates,&#148; <I>MSDN Magazine</I>, April 2001, &lt;http://msdn.microsoft.com/msdnmag/issues/01/04/net/net0104.asp&gt;.</p>
<p><a name="2"></a>[2]  Richard Grimes. &#147;.NET Delegates: Making Asynchronous Method Calls in the .NET Environment,&#148; <I>MSDN Magazine</I>, August 2001, &lt;http://msdn.microsoft.com/msdnmag/issues/01/08/Async/Async.asp&gt;.</p>
<p><a name="3"></a>[3]  Jeffrey Richter. &#147;Delegates, Part 2,&#148; <I>MSDN Magazine</I>, June 2001, &lt;http://msdn.microsoft.com/msdnmag/issues/01/06/net/net0106.asp&gt;.</p>
<p><a name="4"></a>[4]  Bobby Schmidt. &#147;The Red Pill,&#148; April 23, 2002, &lt;http://msdn.microsoft.com/library/en-us/dndeepc/html/deep04232002.asp&gt;. </p>

<p><i><B>J. Daniel Smith</B> is a software engineer with Autodesk in Novi, Michigan. He holds a B.S. from Calvin College and a M.S. in Computer Science from Michigan State University. You may contact him at <B>cuj@jdanielsmith.org</B>.</i></p>

</blockquote></body></html>
