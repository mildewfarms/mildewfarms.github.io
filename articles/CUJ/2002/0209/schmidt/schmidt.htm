<HTML>   
     <HEAD>
<TITLE>September 2002/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: The Game of the Name</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Straight talk on the name and content of Redmond&#146;s compilers, and why <b>operator bool()</b> is rarely the right choice.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2002 Robert H. Schmidt</p>
<p>Over the past few years, successive versions of Microsoft&#146;s Visual C++ compiler have featured familiar numerical branding: 4.0, 4.2, 5.0, 6.0. Following the logic of this pattern, many people refer to the most recently released compiler as version 7.0. I&#146;m part of that group, having made reference to &#147;Visual C++ v7&#148; in my previous column. It all makes such simple perfect sense.</p>
<p>As Scott Meyers is fond of saying: What <I>was</I> I thinking?</p>
<p>You see, Microsoft has no product called Visual C++ v7 or 7.0 or 007 or anything remotely 7esque. What they do have is a compiler first released this past February under the full name &#147;Microsoft Visual C++ .NET 2002.&#148; I just learned this factoid from Visual C++ product management.</p>
<p>I don&#146;t know about you, but I&#146;d never before seen or heard that full appellation. At best I knew the product as &#147;Visual C++ .NET.&#148; But 2002? Even the main page of Microsoft&#146;s official Visual C++ .NET product site <a href="#1">[1]</a> doesn&#146;t use this name. The name does appear on the site&#146;s support page <a href="#2">[2]</a>, although there it&#146;s called &#147;Visual C++ .NET (2002).&#148; As is often the case with C++, the parentheses might not be significant.</p>
<p>It gets better. Visual C++ .NET 2002 is just the general product name; the SKU (or &#147;shelf-keeping unit&#148;) name is more elaborate. For example, if you buy the non-optimizing or academic version of Visual C++ .NET, the SKU you purchase is &#147;Microsoft Visual C++ .NET Standard 2002.&#148; Or if you buy the optimizing compiler as part of the cheapest Visual Studio .NET, your SKU is &#147;Microsoft Visual Studio .NET Professional 2002.&#148;</p>
<p>For some reason I&#146;m suddenly reminded of Westminster Kennel Club dog names.</p>
<p>You&#146;ll notice that this month&#146;s <I>CUJ</I> highlights all things .NET 2002 and features a new supplement titled <I>C++ .NET Solutions</I>. I particularly direct your attention to Stan Lippman&#146;s article on the Managed Extensions to C++. I will be writing a lot about these extensions in my <I>MSDN</I> columns <a href="#3">[3]</a>. If you care about such things, or think you will start caring, I recommend Stan&#146;s piece as an appropriate starting place.</p>

<H3><FONT COLOR="#000080">Waist Deep in the Big Muddy</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>I really only have questions &#151; never answers. This month, I&#146;ll only plague you with one:</p>

<pre>
if (cin)
    {
    /* ... */
    }
if (cout &lt;&lt; x)
    {
    /* ... */
    }
</pre>

<p>and so on.</p>
<p>I believe this type of syntax can be achieved with any user-defined type when <B>operator</B> <B>void *()</B> is defined within the type. I have many C++ books &#151; modern and older &#151; but few seem to discuss this, and those that do don&#146;t exactly glorify it. I would love to know the dirt on it &#151; the pros and the cons. I personally love the clean and concise syntax, so why don&#146;t people use it more often?</p>
<p>I&#146;m a fairly new subscriber, so I apologize if you&#146;ve addressed this recently. Thanks for any and all help.</p>
<p>Regards &#151; Shane Neph</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> The technique you cite compactly queries a stream&#146;s error state. I&#146;ll give a synopsis of the technique and then ruminate a bit on its merits. While all of the identifiers I mention below are declared in namespace <B>std</B>, I&#146;ll be omitting the <B>std::</B> qualifiers for clarity.</p>
<p><B>cin</B> and <B>cout</B> have types <B>istream</B> and <B>ostream</B>, both of which are derived from <B>ios</B>. That base in turn derives from <B>ios_base</B> <a href="#4">[4]</a>. These bases conspire to implement a stream&#146;s error state.</p>
<p>Conceptually, each stream maintains its error state as a set. The set contains any or all of three elements, each representing a particular error aspect:</p>

<UL><LI>   loss of stream integrity</LI>
<LI>   end of input</LI>
<LI>   failure to read/write correct characters</LI></UL>

<p>An empty set represents a good or error-free state.</p>
<p>Physically, the set is held in a value of type <B>ios_base::iostate</B>, which is an implementation-defined integer or enumeration &#151; something that can handle bitwise operation. The value is created through the bitwise ORing of these flags:</p>

<UL><LI>   <B>ios_base::badbit</B></LI>
<LI>   <B>ios_base::eofbit</B></LI>
<LI>   <B>ios_base::failbit</B></LI></UL>

<p>When all bits are off, all bets are on, and the state value is <B>0</B>. <B>ios_base</B> defines the special symbol <B>goodbit</B> to represent this error-free state <a href="#5">[5]</a>.</p>
<p>You can query the error state with <B>ios::rdstate()</B>, which returns the entire set of bit flags <a href="#6">[6]</a>. Examples:</p>

<pre>
if (cin.rdstate() &amp; ios_base::eofbit)
    // ...
if (cin.rdstate() &amp;
        (ios_base::eofbit | ios_base::badbit))
    // ...
if (cin.rdstate() == ios_base::goodbit)
    // ...
</pre>

<p>If you find this a bit chatty, <B>ios</B> provides more succinct equivalents:</p>

<pre>
if (cin.eof())
    // ...
if (cin.eof() | cout.bad())
    // ...
if (cin.good())
    // ...
</pre>

<p>Yes, there is a <B>fail()</B> call, but no, it doesn&#146;t work like the others. You might expect that these would be equivalent:</p>

<UL><LI>  <B>cin.fail()</B></LI>
<LI> <B>cin.rdstate() &amp; ios_base::failbit</B></LI></UL>
<p>They are not. For reasons unclear to me, these two are actually equivalent:</p>
<UL><LI>  <B>cin.fail()</B></LI>
<LI>  <B>cin.rdstate() &amp; (ios_base::badbit | ios_base:failbit)</B></LI></UL>

<p>That is, <B>fail()</B> returns <B>true</B> if either <B>badbit</B> or <B>failbit</B> is set. This ruins the symmetry of <B>bad</B>/<B>badbit</B> and <B>eof</B>/<B>eofbit</B> and (in my mind) makes the stream-state semantics more complex.</p>
<p>As if that&#146;s not confusing enough, <B>ios</B> supports an even terser form:</p>

<pre>
if (!cin)
</pre>

<p>which is equivalent to:</p>

<pre>
if (cin.fail())
</pre>

<p>and implemented as:</p>

<pre>
if (cin.operator!())
</pre>

<p>For symmetry and naturalness, <B>ios</B> also allows:</p>

<pre>
if (cin)
</pre>

<p>which is unsurprisingly equivalent to:</p>

<pre>
if (!cin.fail())
</pre>

<p>For this to work, <B>cin</B> must turn itself into some type implicitly convertible to <B>bool</B>. Of the possible types available, the C++ Standard committee chose <B>void *</B> and defined <B>ios</B> as declaring <B>operator</B> <B>void *()</B>.</p>
<p>Why did the committee choose <B>void *</B> and not the apparently more obvious <B>bool</B>? According to P. J. Plauger, the committee at one point considered <B>bool</B>, until the members realized they had unleashed such horrors as:</p>

<pre>
int i = cin + 2;
vector&lt;int&gt; v(cout);
</pre>

<p><B>void *</B> allows presumably milder horrors:</p>

<pre>
delete cin;
</pre>

<p>I still don&#146;t know why <B>ios</B> declares <B>operator</B> <B>!()</B>, which seems redundant. If <B>ios</B> didn&#146;t declare <B>operator</B> <B>!()</B>, then:</p>

<pre>
if (!cin)
</pre>

<p>would actually be:</p>

<pre>
if (!cin.operator void *())
</pre>

<p>and evalute to:</p>

<pre>
if (cin.fail())
</pre>

<p>just as <B>operator</B> <B>!()</B> does. PJP suspects the operator is leftover DNA that the committee neglected to snip off. Angelika Langer surmises that the committee defines <B>operator</B> <B>!()</B> on purpose, to keep users from defining their own nonsensical implementation.</p>
<p>I&#146;m not an unbridled fan of this extreme shorthand. If streams were simple objects with simple states, so that mapping the real state to logical <B>TRUE</B>/<B>FALSE</B> were unambiguous, I&#146;d more likely endorse the technique. But as things stand, there are multiple reasonable interpretations for what statements such as:</p>

<pre>
if (!cin)
</pre>

<p>and:</p>

<pre>
if (cout &lt;&lt; x)
</pre>

<p>could mean. Indeed, I can well imagine a novice programmer reading:</p>

<pre>
while (cin)
    // read more stuff
</pre>

<p>as:</p>

<pre>
while (!cin.eof())
    // read more stuff
</pre>

<p>Given this real potential for ambiguity, I prefer more verbose and explicit forms such as:</p>

<pre>
if (!cin.fail())
</pre>

<p>and:</p>

<pre>
if (cout &lt;&lt; x, !cout.fail())
</pre>

<p>As Angelika Langer and Klaus Kreft describe <a href="#7">[7]</a>, input streams can have funky interactions between their <B>ios_base::eofbit</B> and <B>ios_base::failbit</B> states, so that you often need to test for both. Accordingly, I follow the authors&#146; recommendation to use:</p>

<pre>
if (!cin.good())
</pre>

<p>as a general-purpose test for input stream failure.</p>
<p>If you want to adapt the streams&#146; technique for your own classes, I can recommend implicit conversion to a <B>bool</B>-like type only if one obvious and reasonable interpretation for that conversion exists. If a user of your class sees:</p>

<pre>
your_class yc;
// ...
if (yc)
// ...
if (!yc)
</pre>

<p>and has any doubt about the meaning of <B>yc</B> and <B>!yc</B> in a logical context, syntactic clarity has just yielded to semantic obscurity.</p>
<p>(Many thanks go to P. J., Angelika, and Chuck Allison for their help on this item.)</p>

<H3><FONT COLOR="#000080">Doo-Wacka-Doo</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby,</p>
<p>I have a query arising from your response to Dave Stycos&#146; letter in your May 2002 column, where you define a macro like so:</p>

<pre>
#define THROW(e) \
    do \
        { \
        /* ... */ \
        } \
    while (false)
</pre>

<p>I&#146;ve noticed the one-time <B>do</B>-<B>while</B> loop idiom above appearing frequently in macros. Presumably the motivation for using it is to introduce a new scope, allowing the declaration of &#147;in-line&#148; variables that are &#147;local&#148; to the macro. (Although this doesn&#146;t apply in the case of your <B>THROW</B> macro; I assume you were leaving room for future expansion.)</p>
<p>What puzzles is me is why people bother with the (to my mind) redundant loop construct &#151; the following &#147;naked&#148; block achieves the same effect:</p>

<pre>
#define MACRO(args) \
    { \
    /* declarations */ \
    /* ... */ \
    }
</pre>

<p>A good compiler will recognize the loop test is constant in the former example and optimize it away, so it doesn&#146;t involve any run-time overhead. But it still offends my aesthetic sense to have extraneous keywords present &#151; is it just convention or is there a good reason?</p>
<p>My reading of Appendix A.9 in K&amp;R (2nd Edition) suggests that the latter has been legal since at least the first ANSI C draft. In K&amp;R&#146;s terminology, &#147;compound statements&#148; can be used anywhere a simple statement can &#151; so it&#146;s not that support for &#147;naked&#148; blocks has been introduced inadvertently by dual C/C++ compilers.</p>
<p>Anyway, keep up the good work.</p>
<p>Regards &#151; Kieran Tully</p>


<H4><FONT COLOR="#000080">A</FONT></H4>

<p> As I mention later in this column, I&#146;m all for aesthetic sense, so I must have some other clever motive for this macro style.</p>
<p>You&#146;ve actually stumbled upon a central mystery of educational writing: how much do we assume of our readers? In this particular case, I used (without explanation) a macro idiom that I assumed would be familiar. But as your question demonstrates, familiar does not always mean understood.</p>
<p>Fortunately the answer is actually quite simple:</p>

<UL><LI>   By wrapping a block (a.k.a. compound statement) in a <B>do</B>/<B>while</B> pair, you turn the block into a <B>do</B> statement.</LI>
<LI>   According to the C and C++ grammars, <B>do</B> statements end with a semicolon (;) while compound statements do not.</LI>
<LI>   Implemented as a <B>do</B> statement and thus allowing or requiring a trailing semicolon, the <B>THROW</B> macro syntactically appears more like a real function call.</LI></UL>

<p>For example, if <B>THROW</B> were implemented as a plain block, then the construct:</p>

<pre>
if (x)
    THROW(1);
f();
</pre>

<p>could be written unnaturally as:</p>

<pre>
if (x)
    THROW(1)
f();
</pre>

<p>without the semicolon. Implemented as a <B>do</B> statement, <B>THROW</B> requires the semicolon and avoids the unnaturalness.</p>
<p>Next consider the related example:</p>

<pre>
if (x)
    THROW(1);
else
</pre>

<p>With the <B>do</B>/<B>while</B> definition of <B>THROW</B>, this expands to:</p>

<pre>
if (x)
    do
        {
        /* ... */
        }
    while (0); // ; okay
else
</pre>

<p>A plain block or compound statement wouldn&#146;t do:</p>

<pre>
if (x)
    {
    /* ... */
    }; // oops, can&#146;t have ; here
else
</pre>

<p>As you surmise, an optimizer worth its name will remove the <B>do</B>/<B>while</B> scaffolding; but even if the optimizer doesn&#146;t, the loop will never iterate. The net semantic result is that of a compound statement; only the syntactic appearance changes.</p>

<H3><FONT COLOR="#000080">Bugaboo</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Hi there.</p>
<p>I would like to know why the attached code always uses the <B>create&lt;C2&gt;</B> instantiation in Visual C++ v6 SP5. It should use <B>create&lt;C1&gt;</B>. The output should be:</p>

<pre>
C1
</pre>

<p>and not:</p>

<pre>
C2
</pre>

<p>It works on Visual C++ v7.</p>
<p>In Visual C++ v6 what is a good guideline to source code organization for templates? Visual C++ v6/v7 does not have the keyword <B>export</B>, and without this, it appears awkward to comply with the one definition rule.</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I spent quite a while reducing your sample to a bare minimum. My distillation appears as <a href="list1.htm">Listing 1</a>.</p>
<p>What you&#146;ve run into is a pretty amazing bug. My experimenting showed that any of these changes makes the bug go away:</p>

<UL><LI>   Removing the unreachable call to <B>create&lt;C2&gt;</B>.</LI>
<LI>   Defining an explicit specialization for <B>create&lt;C2&gt;</B>.</LI>
<LI>   Changing <B>create</B> so that its template argument can be deduced.</LI></UL>

<p>Exploring the generated code, I finally tracked down the problem: the compiler generates the same decorated name for all <B>create</B> calls, regardless of the template argument. As a result, all calls route through the same code. How that code is generated depends on which template arguments the compiler sees.</p>
<p>Visual C++ v7 &#151; sorry, .NET 2002 &#151; generates the correct decorated names and code.</p>
<p>As for template organization: at the time of this writing, nobody completely implements the <B>export</B> keyword. [See &#147;Sutter&#146;s Mill&#148; in this issue for an update on the state of <B>export</B> support. --cda] So the organization you use in general will apply to Visual C++ in particular. That most likely means inclusion-model templates implemented in headers and included in multiple translation units.</p>
<p>You are right about ODR complications, something I wrote about in my March 2002 column. But truthfully, <B>export</B> and separation-model templates do not eliminate ODR problems. In fact, the separation model may actually make the problems worse. John Spicer from Edison Design Group has written a nice treatise on this subject <a href="#8">[8]</a>.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>
<p>In my March column, I ran a reader question about parallel ports in DOS and asked Diligent Readers who understood the question to write me. Happily, several of you responded. I particularly want to thank Diligent Readers Aki Peltonen, Chris Howe, and Paul Turelinckx for helping lift me from my ignorance. I&#146;ll summarize your answers in this space next time; I just wanted to acknowledge your help now.</p>
<p>At the same time, a couple of readers felt that I mocked the original questioner. For one of those readers, my answer apparently helped convince him to drop his subscription. I have written those readers privately and won&#146;t debate them here. My remarks are for everyone else.</p>
<p>In that item, I consciously and deliberately omitted the questioner&#146;s name so that I&#146;d specifically avoid any appearance of personal mockery. I wrote that the question was inappropriate for my column, not inappropriate in general. My attempted tone was light humor, nothing more. I even poked fun at myself.</p>
<p>In my almost seven years writing for <I>CUJ</I>, this is the first time I&#146;ve received any such criticism. Maybe I did cross some invisible line. I&#146;m still not sure. But if ever I&#146;m tempted toward that same humoristic direction, I&#146;ll pay more attention to the potential (if unintended) effect.</p>
<p>I&#146;m encouraged that most people who wrote me saw the intended humor. (One reader even claimed to fall out of his chair laughing.) And even without any humorous veneer, I still would have rejected the original question as inappropriate for my column: it was not at all specific to C and C++, was quite platform-bound, and was way outside my zone of expertise.</p>
<p>One constantly enjoyable aspect of my <I>CUJ</I> career is the artistic freedom I&#146;m granted, for I do consider myself an artist, with this space as my canvas. I don&#146;t put on a persona to write this column; I write as I speak. I know that my style is unorthodox, especially for this field. I make pop-culture allusions and inside jokes that you might not get. I insert personal experience and observation, as I&#146;m doing now. I often look for truth within truth, so that by answering a programming question I can also illuminate some larger reality. And yeah, sometimes I just try to be funny.</p>
<p>In the end, I can control and take responsibility only for what I write, and not for what you read into my writing. As the reader, and as the one controlling your reading, please remember this: my desire is truth, aesthetic, and entertainment. I never, ever, set out to offend.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  &lt;http://msdn.microsoft.com/visualc/ Default.asp&gt;</p>
<p><a name="2"></a>[2]  &lt;http://msdn.microsoft.com/visualc/ support/default.asp&gt;</p>
<p><a name="3"></a>[3]  &lt;http://msdn.microsoft.com/columns/ deepc.asp&gt;</p>
<p><a name="4"></a>[4]  Why the two-tier derivation? Because <B>std::ios</B> is really a <B>typedef</B> for <B>std::basic_ios&lt;char, std::char_traits&lt;char&gt;&gt;</B> and specific to streams of <B>char</B>, while <B>std::ios_base</B> is a non-template class common to all streams.</p>
<p><a name="5"></a>[5]  I find the name <B>goodbit</B> unintuitive since 1) <B>goodbit</B>&#146;s not the opposite of <B>badbit</B> as one might expect, and 2) <B>goodbit</B>&#146;s actually a set, not a single element (bit) and thus would more logically be called <B>goodbits</B> or <B>goodset</B> or <B>goodstate</B>.</p>
<p><a name="6"></a>[6]  Please don&#146;t ask me why this accessor function is <B>rdstate</B> and not <B>readstate</B>, when the paired mutator function is <B>setstate</B> and not <B>ststate</B>.</p>
<p><a name="7"></a>[7]  Angelika Langer and Klaus Kreft. <I>Standard C++ IOStreams and Locales</I> (Addison-Wesley, 2000), p. 35.</p>
<p><a name="8"></a>[8]  &lt;http://std.dkuug.dk/jtc1/sc22/wg21/ docs/papers/1996/N0872.pdf&gt;</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2002/sep02/schmidt.zip"></a></h4>
</blockquote></body></html>
