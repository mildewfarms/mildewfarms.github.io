<HTML>   
     <HEAD>
<TITLE>September 2002/Sutter's Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Herb Sutter&#147;Export&#148; Restrictions, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>Support for the separation model of template compilation is finally emerging &#151; but it&#146;s not as &#147;separate&#148; as you might expect.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE></p>
<p>The Standard C++ template <B>export</B> feature is widely misunderstood, with more restrictions and consequences than most people at first realize. This column takes a closer look at our experience to date with <B>export</B>.</p>
<p>&#147;What experience with <B>export</B>?&#148; you might ask. After all, as I write this in early June, there is still no commercially available compiler that supports the export feature. The Comeau compiler <a href="#1">[1]</a>, built on the EDG (Edison Design Group) <a href="#2">[2]</a> front-end C++ language implementation that has just added support for <B>export</B>, has been hoping since last year to become the first shipping <B>export</B>-capable compiler. As of this writing, that product is currently still in beta, though they continue to hope to ship soon, and it may be available by the time you read this. Still, the fact that no capable compilers yet exist naturally means that we have practically no experience with <B>export</B> on real-world projects; fair enough.</p>
<p>What we do have for the first time ever, however, is real-world nuts-and-bolts experience with what it takes to implement <B>export</B>, what effects <B>export</B> actually has on the existing C++ language, what the corner cases and issues really are, and how the interactions are likely to affect real-world users &#151; all this from some of the world&#146;s top C++ compiler writers at EDG who have actually gone and done the work to implement the feature. This is a huge step forward from anything we knew for certain even a year ago (although in fairness a few smart people, including some of those selfsame compiler writers, saw many of the effects coming and warned the committee about them years ago). Now that EDG has indeed been doing the work to create the world&#146;s first implementation of <B>export</B>, confirming suspicions and making new technical discoveries along the way, it turns out that the confirmations and discoveries are something of a mixed bag.</p>
<p>Here&#146;s what this column and the next cover:</p>

<UL><LI>   What <B>export</B> is, and how it&#146;s intended to be used.</LI>
<LI>   The problems <B>export</B> is widely assumed to address, and why it does not in fact address them the way most people think.</LI>
<LI>   The current state of <B>export</B>, including what our implementation experience to date has been.</LI>
<LI>   The (often non-obvious) ways that <B>export</B> changes the fundamental meaning of other apparently unrelated parts of the C++ language.</LI>
<LI>   Some advice on how to use <B>export</B> effectively if and when you do happen to acquire an <B>export</B>-capable compiler.</LI></UL>

<H3><FONT COLOR="#000080">A Tale of Two Models</FONT></H3>

<p>The C++ Standard supports two distinct template source code organization models: the inclusion model that we&#146;ve been using for years, and the export model, which is relatively new.</p>
<p>In the <I>inclusion model</I>, template code is as good as all inline from a source perspective (though the template doesn&#146;t have to be actually inline): the template&#146;s full source code must be visible to any code that uses the template. This is called the inclusion model because we basically have to <B>#include</B> all template definitions right there in the template&#146;s header file <a href="#3">[3]</a>.</p>
<p>If you know today&#146;s C++ templates, you know the inclusion model. It&#146;s the only template source model that has gotten any real press over the past 10 years because it&#146;s the only model that has been available on Standard C++ compilers until now. All of the templates you&#146;re likely to have ever seen over the years in C++ books and articles up to the time of this writing fall into this category.</p>
<p>On the other hand, the <I>export model</I> is intended to allow &#147;separate&#148; compilation of templates. (The &#147;separate&#148; is in quotation marks for a reason.) In the export model, template definitions do not need to be visible to callers. It&#146;s tempting to add, &#147;just like plain functions,&#148; but that&#146;s actually incorrect &#151; it&#146;s a similar mental picture, but the effects are significantly different, as we shall see when we get to the surprises. The export model is relatively new &#151; it was added to the Standard in the mid-1990s, but the first commercial implementation, by EDG <a href="#2">[2]</a>, didn&#146;t appear until the summer of 2002 <a href="#4">[4]</a>.</p>
<p>Bear with me as I risk delving too deeply into compilerese for one paragraph: a subtle but important distinction to keep in mind is that the inclusion and export models really are different <I>source code organization models</I>. They&#146;re about massaging and organizing your source code. They are not different instantiation models; this means that a compiler must do essentially the same work to instantiate templates under either source model, inclusion or export. This is important because this is part of the underlying reason why <B>export</B>&#146;s limitations, which we&#146;ll get to in a moment, surprise many people, especially that using <B>export</B> is unlikely to greatly improve build times. For example, under either source model, the compiler can still perform optimizations like relying on the ODR (one definition rule) to only instantiate each unique combination of template parameters once, no matter how often and widely that combination is used throughout your project. Such optimizations and instantiation policies are available to compiler implementers regardless of whether the inclusion or export model is being used to physically organize the template&#146;s source code; while it&#146;s true that the export model allows the optimizations, so does the inclusion model.</p>

<H3><FONT COLOR="#000080">Illustrating the Issues</FONT></H3>

<p>To illustrate, let&#146;s look at some code. We&#146;ll look at a function template under both the inclusion and export models, but for comparison purposes I&#146;m also going to show a plain old function under the usual inline and out-of-line separately compiled models. This will help to highlight the differences between today&#146;s usual function separate compilation and export&#146;s &#147;separate&#148; template compilation. The two are not the same, even though the terms commonly used to describe them look the same, and that&#146;s why I put &#147;separate&#148; in quotes for the latter.</p>
<p>Consider the following code, a plain old inline function and an inclusion-model function template:</p>

<pre>
// Example 1(a):
// A garden-variety inline function
//

// --- file f.h, shipped to user ---
namespace MyLib
{
  inline void f( int )
  {
    // natty and quite dazzling implementation,
    // the product of many years of work, uses
    // some other helper classes and functions
  }
}
</pre>

<p>The following inclusion-model template demonstrates the parallel case for templates:</p>

<pre>
// Example 1(b):
// An innocent and happy little template,
// using the inclusion model
//

// --- file g.h, shipped to user ---
namespace MyLib
{
  template&lt;typename T&gt;
  void g( T&amp; )
  {
    // avant-garde, truly stellar implementation,
    // the product of many years of work, uses
    // some other helper classes and functions
    // -- not necessarily inline, but the body's
    // code is all here in the same file
  }
}
</pre>

<p>In both cases, the Example 1 code harbors issues familiar to C++ programmers:</p>

<UL><LI>   <I>Source exposure for the definitions</I>: the whole world can see the perhaps-proprietary definitions for <B>f()</B> and <B>g()</B>. In itself, that may or may not be such a bad thing &#151; more on that later.</LI>
<LI>   <I>Source dependencies</I>: all callers of <B>f()</B> and <B>g()</B> depend on the respective bodies&#146; internal details, so every time the body changes, all its callers have to recompile. Also, if either <B>f()</B>&#146;s or <B>g()</B>&#146;s body uses any other types not already mentioned in their respective declarations, then all of their respective callers will need to see those types&#146; full definitions too.</LI></UL>

<H3><FONT COLOR="#000080">Export InAction [sic]</FONT></H3>

<p>Can we solve, or at least mitigate, these problems? For the function, the answer is an easy &#147;of course,&#148; because of separate compilation:</p>

<pre>
// Example 2(a):
// A garden-variety separately compiled function
//

// --- file f.h, shipped to user ---
namespace MyLib
{
  void f( int ); // MYOB
}

// --- file f.cpp, optionally shipped ---
namespace MyLib
{
  void f( int )
  {
    // natty and quite dazzling implementation,
    // the product of many years of work, uses
    // some other helper classes and functions
    // -- now compiled separately
  }
}
</pre>

<p>Unsurprisingly, this solves both problems, at least in the case of <B>f()</B>. (The same idea can be applied to whole classes using the Pimpl Idiom <a href="#5">[5]</a>.)</p>

<UL><LI>   <I>No source exposure for the definition</I>: we can still ship the implementation&#146;s source code if we want to, but we don&#146;t have to. Note that many popular libraries, even very proprietary ones, ship source code anyway (possibly at extra cost) because users demand it for debuggability and other reasons.</LI>
<LI>   <I>No source dependencies</I>: callers no longer depend on <B>f()</B>&#146;s internal details, so every time the body changes, all its callers only have to relink. This frequently makes builds an order of magnitude or more faster. Similarly, usually to somewhat less dramatic effect on build times, <B>f()</B>&#146;s callers no longer depend on types used only in the body of <B>f()</B>.</LI></UL>

<p>That&#146;s all well and good for the function, but we already knew all that. We&#146;ve been doing the above since C, and since before C (which is a very very long time ago). The real question is: What about the template?</p>
<p>The idea behind <B>export</B> is to get something like this effect for templates. One might naively expect the following code to get the same advantages as the code in Example 2(a). One would be wrong, but one would still be in good company because this has surprised a lot of people including world-class experts:</p>

<pre>
// Example 2(b):
// A more independent little template?
//

// --- file g.h, shipped to user ---
namespace MyLib
{
  export template&lt;typename T&gt;
  void g( T&amp; ); // MYOB
}

// --- file g.cpp, ??shipped to user?? ---
namespace MyLib
{
  template&lt;typename T&gt;
  void g( T&amp; )
  {
    // avant-garde, truly stellar implementation,
    // the product of many years of work, uses
    // some other helper classes and functions
    // -- now "separately" compiled
  }
}
</pre>

<p>Highly surprisingly to many people, this does not solve both problems in the case of <B>g()</B>. It might have ameliorated one of them, depending. Let&#146;s consider the issues in turn.</p>

<H3><FONT COLOR="#000080">Issue the First: Source Exposure</FONT></H3>

<UL><LI>   <I>Source exposure for the definition remains</I>: not solved. Nothing in the C++ Standard says or implies that the <B>export</B> keyword means you won&#146;t have to ship full source code for <B>g()</B> anyway.</LI></UL>
<p>Indeed, in the only existing (and almost-available) implementation of <B>export</B>, the compiler requires that the template&#146;s full definition be shipped &#151; the full source code <a href="#6">[6]</a>. One reason is that a C++ compiler still needs the exported template definition&#146;s full definition context when instantiating the template elsewhere as it&#146;s used. For just one example why, consider 14.6.2 from the C++ Standard about what happens when instantiating a template:</p>

<UL><p>[Dependent] names are unbound and are looked up at the point of the template instantiation in both the context of the template definition and the context of the point of instantiation.</p></UL>

<p>A dependent name is a name that depends on the type of a template parameter; most useful templates mention dependent names. At the point of instantiation, or a use of the template, dependent names must be looked up in two places. They must be looked up in the instantiation context; that&#146;s easy, because that&#146;s where the compiler is already working. But they must <I>also</I> be looked up in the definition context, and there&#146;s the rub, because that includes not only knowing the template&#146;s full definition, but also the context of that definition inside the file containing the definition, including what other relevant function signatures are in scope and so forth so that overload resolution and other work can be performed.</p>
<p>Think about Example 2(b) from the compiler&#146;s point of view: your library has an exported function template <B>g()</B> with its definition nicely ensconced away outside the header. Well and good. The library gets shipped. A year later, one fine sunny day, it&#146;s used in some customer&#146;s translation unit <B>h.cpp</B> where he decides to instantiate <B>g&lt;CustType&gt;</B> for a <B>CustType</B> that he just wrote that morning... what does the compiler have to do to generate object code? It has to look, among other places, at <B>g()</B>&#146;s definition, at your implementation file. And there&#146;s the rub... <B>export</B> does not eliminate such dependencies on the template&#146;s definition; it merely hides them.</p>
<p>Exported templates are not truly &#147;separately compiled&#148; in the usual sense we mean when we apply that term to functions. Exported templates cannot in general be separately compiled to object code in advance of use; for one thing, until the exact point of use, we can&#146;t even know the actual types the template will be instantiated with. So exported templates are at best &#147;separately partly compiled&#148; or &#147;separately parsed.&#148; The template&#146;s definition needs to be actually compiled with each instantiation.</p>

<H3><FONT COLOR="#000080">Issue the Second: Dependencies and Build Times</FONT></H3>

<UL><LI>   <I>Dependencies are hidden, but remain</I>: every time the template&#146;s body changes, the compiler still has to go and reinstantiate all the uses of the template every time. During that process, the translation units that use <B>g()</B> are still processed together with all of <B>g()</B>&#146;s internals, including the definition of <B>g()</B> and the types used only in the body of <B>g()</B>.</LI></UL>
<p>The template code still has to be compiled in full later, when each instantiation context is known. Here is the key concept, as explained by <B>export</B> expert Daveed Vandevoorde:</p>

<UL><p><B>export</B> hides the dependencies. It does not eliminate them.</p></UL>

<p>It&#146;s true that callers no longer visibly depend on <B>g()</B>&#146;s internal details, inasmuch as <B>g()</B>&#146;s definition is no longer openly brought into the caller&#146;s translation unit via <B>#include</B>d code; the dependency can be said to be hidden at the human-reading-the-source-code level.</p>
<p>But that&#146;s not the whole story, because we&#146;re talking compilation-the-compiler-must-perform dependencies here, not human-reading-the-code-while-sipping-a-latte dependencies, and compilation dependencies on the template definitions still exist. True, the compiler may not have to go recompile every translation unit that uses the template, but it must go away and recompile at least enough of the other translation units that use the template such that all the combinations of template parameter types on which the template is ever used get reinstantiated from scratch. It certainly can&#146;t just go relink truly, separately compiled object code.</p>
<p>For an example why this is so, and one that actually shows that there&#146;s a new dependency being created here that we haven&#146;t talked about yet, recall again that quote from the C++ Standard:</p>

<UL><p>[Dependent] names are unbound and are looked up at the point of the template instantiation in both the context of the template definition and the context of the point of instantiation.</p></UL>

<p>If either the context of the template&#146;s instantiation or the context of the template&#146;s definition changes, both get recompiled. That&#146;s why, if the template definition changes, we have to go back to all the points of instantiation and rebuild those translation units. (In the case of the EDG compiler, the compiler recompiles all the calling translation units needed to recreate every distinct specialization, in order to recreate all of the instantiation contexts, and for each of those calling translation units, it also recompiles the file containing the template definition in order to recreate the definition context.) Note that compilers could be made smart enough to handle inclusion-model templates the same way -- not rebuilding all files that use the template but only enough of them to cover all the instantiations &#151; if the code is organized as shown in Example 2(b), but with <B>export</B> removed and a new line <B>#include g.cpp</B>added to <B>g.h</B>.</p>
<p>But there&#146;s actually a new dependency created here that wasn&#146;t there before, because of the reverse case: if the template&#146;s instantiation context changes &#151; that is, if you change one of the files that use the template &#151; the compiler also has to go back to the template definition and <I>rebuild the template definition too</I>. EDG rebuilds the whole translation unit where the template definition resides &#151; yes, the one that many people expected <B>export</B> to compile &#147;separately&#148; only once &#151; because it&#146;s too expensive to keep a database of copies of all the current template definition contexts. This is exactly the reverse of the usual build dependency, and probably more work than the inclusion model for at least this part of the compilation process because the whole translation unit containing the template definition is compiled anew. It&#146;s possible to avoid this rebuilding of the template definition, of course, simply by keeping around a database of all the template instantiation contexts. One reason EDG chose not to do this is because such a database quickly gets extremely large and caching the definition contexts could easily become a pessimization. </p>
<p>Further, remember that many templates use other templates, and therefore the compiler next performs a cascading recompilation of those templates (and their translation units) too, and then of whatever templates those templates use, and so on recursively, until there are no more cascading instantiations to be done. (If, at this point in our discussion, you are glad that you personally don&#146;t have to implement <B>export</B>, that&#146;s a normal reaction.)</p>
<p>Even with <B>export</B>, it is not the case that all callers of a changed exported template &#147;just have to relink.&#148; The experts at EDG report that, unlike the situation with true separate function compilation where builds will speed dramatically, <B>export</B>-ized builds are expected in general to be the same speed or slower except for carefully constructed cases.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>
<p>So far, we&#146;ve looked at the motivation behind <B>export</B>, and why it&#146;s not truly &#147;separate&#148; compilation for templates in the same way we have separate compilation for non-templates. Many people expect that <B>export</B> means that template libraries can be shipped without full definitions, and/or that build speeds will be faster. Neither outcome is promised by <B>export</B>. The community&#146;s experience to date is that source or its direct equivalent must still be shipped and that build speeds are expected to be the same or slower, rarely faster, principally because dependencies, though masked, still exist, and the compiler still has to do at least the same amount of work in common cases.</p>
<p>Next time, we&#146;ll see why <B>export</B> complicates the C++ language and makes it trickier to use, including that <B>export</B> actually changes the fundamental meaning of parts of the rest of the language in surprising ways that it is not clear were foreseen. We&#146;ll also see some initial advice on how to use <B>export</B> effectively if you happen to acquire an <B>export</B>-capable compiler. More on those topics, when we return.</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>
<p>Many thanks to Steve Adamczyk, John Spicer, and Daveed Vandevoorde &#151; also known as EDG <a href="#2">[2]</a> &#151; for being the first to be brave enough to implement <B>export</B>, for imparting their valuable understanding and insights to me and to the community, and for their comments on drafts of this material. As of this writing, they are the only people in the world who have experience implementing <B>export</B>, never mind that they are already regarded by many as the best C++ compiler writers on the planet. For one small but public measure of their contribution to the state of our knowledge, do a Google search for articles in the newsgroups <B>comp.lang.c++.moderated</B> and <B>comp.std.c++</B> by Daveed this year (2002). Happy reading!</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  See &lt;www.comeaucomputing.com&gt;.</p>
<p><a name="2"></a>[2]  See &lt;www.edg.com&gt;.</p>
<p><a name="3"></a>[3]  Or the equivalent, such as stripping the definitions out into a separate <B>.cpp</B> file but having the template&#146;s <B>.h</B> header file <B>#include</B> the <B>.cpp</B> definition file, which amounts to the same thing.</p>
<p><a name="4"></a>[4]  It&#146;s true that Cfront had some similar functionality a decade earlier. But Cfront&#146;s implementation was slow, and it was based on a &#147;works most of the time&#148; heuristic such that, when Cfront users encountered template-related build problems, a common first step to get rid of the problem was to blow away the cache of instantiated templates and reinstantiate everything from scratch.</p>
<p><a name="5"></a>[5]  H. Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</p>
<p><a name="6"></a>[6]  &#147;But couldn&#146;t we ship encrypted source code?&#148; is a common question. The answer is that any encryption that a program can undo without user intervention (say to enter a password each time) is easily breakable. Also, several companies have already tried &#147;encrypting&#148; or otherwise obfuscating source code before, for a variety of purposes including protecting inclusion-model templates in C++. Those attempts have been widely abandoned because the practice annoys customers, doesn&#146;t really protect the source code well, and the source code rarely needs such protection in the first place because there are other and better ways to protect intellectual property claims &#151; obfuscation comes to the same end here.</p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee, author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</i></p>

</blockquote></body></html>
