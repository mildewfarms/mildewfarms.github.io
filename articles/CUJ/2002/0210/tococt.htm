<HTML>
<HEAD>
<TITLE>October 2002</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">October 2002<BR>
                Volume 20 Number 10</FONT></H3>
               
<H3><FONT COLOR="#FF0000">DEVELOPMENT METHODOLOGIES</FONT></H3>
<H4><A HREF="koss/koss.htm">Test Driven Development in C/C++</A></H4>
<p><b>Dr. Robert Koss and Jeff Langr</b><br>
<i>Automated testing for C: The simplest explanation that could possibly work.</i></p>
<H4><A HREF="cummins/cummins.htm">The Development Game</A></H4>
<p><b>Darin Cummins</b><br>
<i>You already know how difficult it is to get a development team to change </I>anything<I>, let alone its process. Here&#146;s a simple approach that works.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>
<H4><A HREF="plauger/plauger.htm">The C/C++ Programming Language</A></H4>
<p><b>P.J. Plauger</b><br>
<i>From the trenches of a seasoned developer: C/C++ compatibility in practice.</i></p>

<H4><A HREF="brodski/brodski.htm">Policy Wrapper</A></H4>
<p><b>Matvei Brodski</b><br>
<i>What do you get when you combine policies and wrappers? Yet another surprisingly brilliant, extensible mechanism for developing smart library components.</i></p>

<H4><A HREF="caves/caves.htm">Using the C++ Standard Library with Managed Types</A></H4>
<p><b>Jonathan Caves</b><br>
<i>Yes, you can use STL with Managed C++ garbage-collected types. Really.</i></p>

<H3><FONT COLOR="#FF0000">CONTRIBUTING EDITORS</FONT></H3>
<H4><A HREF="becker/becker.htm">STL &amp; Generic Programming &#151; More on C++ Metaprogramming</A></H4>
<p><b>Thomas Becker</b><br>
<i>Towards readable metaprograms: Literate Template Metaprogramming. (You heard it here first!) </i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier &#151; Handles and Exception Safety, Part 2: Intrusive Reference Counting</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>More on handle classes. This time you&#146;ll see how to optimize them.</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge &#151; A Bit-Wise Typeof Operator, Part 2</A></H4>
<p><b>Steve Dewhurst</b><br>
<i>Beyond the Alexandrescu Horizon: Part 2 of 3 on implementing a <b>typeof</b> operator, and why you may have to wait for compilers to catch up anyway.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<H4><A HREF="../cexp2010/alexandr/alexandr.htm">Generic&lt;Programming&gt;: Efficient Generic Sorting and Searching in C++ (I): In Search of a Better Search</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<i>This first of a two-parts treatment on generic sorting and searching in C++ is in search of a better search. It would appear it&#146;s hard to improve on a two-liner, but you can if you think outside the loop. Literally.</i></p>

<H4><A HREF="../cexp2010/henney/henney.htm">From Mechanism to Method: A Fair Share, Part 1</A></H4>
<p><b>by Kevlin Henney</b><br>
<i>Many programmers develop an infatuation with Lisp at least once in their programming lives. If you haven&#146;t yet, now is your chance. How would a Lisp style of programming look in C++? And, more interestingly, what would an STL version of a Lisp-like <b>list</b> class look like?</i></p>

<H4><A HREF="../cexp2010/sutter/sutter.htm">The New C++: C and C++: Wedding Bells?</A></H4>
<p><b>by Herb Sutter</b><br>
<i>For several years now, C and C++ have been following parallel but slightly divergent evolutionary paths. The existing divergences if unaddressed could increase in the up-and-coming versions of the standards. The time is ripe, some influential experts believe, to seriously consider harmonizing Standard C and Standard C++ while still allowing each to address its own vision and strengths.</i></p>

<H4><A HREF="../cexp2010/hyslop/hyslop.htm">Conversations: Contracts, Promises, and Mere Semantics</A></h4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<i>What is a function saying when it takes a parameter by pointer, by reference, or by value? When interface idioms lie, sometimes there’s no good way to avoid the surprises.</i></p>
</body>
</html>
