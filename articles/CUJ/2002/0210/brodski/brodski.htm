<HTML>   
     <HEAD>
<TITLE>October 2002/Policy Wrapper</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Policy Wrapper</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matvei Brodski</FONT></H3>

<BLOCKQUOTE>
<p>What do you get when you combine policies and wrappers? Yet another surprisingly brilliant, extensible mechanism for developing smart library components.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>On May 18, 2001, Andrei Alexandrescu posted a message <a href="#1">[1]</a> on comp.lang.c++.moderated proposing &#147;Yet Another Implementation of the Standard Library&#148; that was going to be very efficient and highly configurable. Extensive use of policy classes in library class templates would allow users to &#147;configure STL at compile time for optimization preferences &#151; speed, space, safety, debuggability.&#148; One of the problems Alexandrescu discussed was packaging the per-component configurability. Because you can&#146;t add template parameters to a standard container, you must invent a way to pack the template parameters within the allocator class or some other existing parameter. I wondered whether I could put all the policies in some kind of a wrapper so that they could be represented by one parameter of a class template. This way, if I create a policy-based template, I can add a new policy later without breaking the existing interface.</p>

<H3><FONT COLOR="#000080">Using Typelists</FONT></H3>

<p>My first idea was to use <B>Typelist</B>, a class template created by Alexandrescu <a href="#2">[2]</a>. Basically, a <B>Typelist</B> is defined like this:</p>

<pre>
template &lt; class H, class T &gt;
struct Typelist
{
  typedef H Head;
  typedef T Tail;
}
</pre>

<p>Alexandrescu also provides a set of useful macros that help linearize the <B>Typelist</B> definition:</p>

<pre>
#define TYPELIST_1 (T1) \
Typelist&lt;T1, NullType&gt;
#define TYPELIST_2 (T1,T2) \
Typelist&lt;T1, TYPELIST_1(T2) &gt;
#define TYPELIST_3 (T1,T2,T3) \
Typelist&lt;T1, TYPELIST_2(T2,T3) &gt;
</pre>

<p>and so on. My idea was to pass a set of policies packed in a <B>Typelist</B>. Consider some class template, say <B>FixedSizeArray</B>, that has two policy parameters: a range-checking policy and a threading policy. <a href="list1.htm">Listing 1</a> shows one possible solution that uses <B>Typelist</B>s. I used two templates defined by Alexandrescu in the Loki library described in <a href="#2">[2]</a>. First:</p>

<pre>
struct Conversion &lt; class A,
  class B &gt; { ... }
</pre>

<p>defines an <B>enum</B> value <B>SameType</B> that is <B>1</B> if <B>A</B> and <B>B</B> are the same type and <B>0</B> otherwise. Second:</p>

<pre>
struct Select&lt; bool Flag, class A,
  class B &gt; { ... }
</pre>

<p>defines (through a <B>typedef</B>) a <B>Result</B> type that is equivalent either to <B>A</B> or to <B>B</B> depending on the <B>Flag</B> value. Using these two templates, I created a template:</p>

<pre>
template &lt; class PolicyList,
           class PolicyID,
           class DefaultPolicy
         &gt;
struct SelectPolicy { ... }
</pre>

<p>that looks for a class with an internally defined <B>PolicyID</B> type equivalent to a given <B>PolicyID</B>. The template then &#147;returns&#148; the class (by again defining an internal <B>Result</B> type), or, if no class is found, it returns the <B>DefaultPolicy</B> class. If the first template argument happens to be a <B>Typelist&lt; Head,Tail &gt;</B>, the partial specialization template is used. The partial specialization template defers to <B>Conversion</B> to determine if the <B>PolicyID</B> parameter is of the same type as <B>Head::PolicyID</B>. If the types are the same, <B>Result</B> is defined as a synonym of the <B>Head</B> class. Otherwise, <B>SelectPolicy</B> is used recursively on the <B>Tail</B>.</p>
<p>To use this idea, the policy writer has to define <B>PolicyID</B>:</p>

<pre>
  typedef ParticularPolicyID PolicyID;
</pre>

<p>in all the classes that implement that particular policy, and so on. As a reward, the user can now instantiate <B>FixedSizeContainer</B> like this:</p>

<pre>
FixedSizeContainer&lt; int &gt;;
</pre>

<p>which uses all default policies, or like this:</p>

<pre>
FixedSizeContainer&lt; double,
  TYPELIST_2( ClassLocking,
    NoCheck ) &gt;
</pre>

<p>which uses two explicitly supplied policies. Note also that one can put policies in <B>Typelist</B> in any order and omit any of them to use the default policies.</p>

<H3><FONT COLOR="#000080">Using Tags</FONT></H3>

<p>The solution in <a href="list1.htm">Listing 1</a> is limited in that it does not allow the use of template template policies. I wondered if I could pass some tag instead of the policy class itself. I could then use the tag for selecting and instantiating a new policy. <a href="list2.htm">Listing 2</a> illustrates this approach.</p>
<p>Let me explain the differences between <a href="list1.htm">Listing 1</a> and <a href="list2.htm">Listing 2</a> using threading policy as an example. First, <a href="list2.htm">Listing 2</a> does not place <B>PolicyID typedef</B> inside the classes that implement the threading policy (<B>SingleThread</B>, <B>ClassLocking</B>). Instead <a href="list2.htm">Listing 2</a> defines a set of tags (<B>SingleThreadTag</B>, <B>ClassLockingTag</B>) that are publicly derived from the base tag (<B>ThreadingPolicyTag</B>) for this policy. Furthermore, a single class template representing this policy (<B>ThreadingPolicy</B>) is introduced. This single class template has one additional parameter: the tag type. A number of partial specializations for this policy for various types of tags are provided by deriving publicly from corresponding policy implementation classes. In other words, to create a new kind of threading policy (e.g., <B>ObjectLocking</B>), you need to do the following:</p>

<OL><LI>Create a class template <B>ObjectLocking</B> that implements the policy:</LI>

<pre>
template &lt; class T &gt;
struct ObjectLocking
{
  // implementation
};
</pre>

<LI>Derive <B>ObjectLockingTag</B> from <B>ThreadingPolicyTag</B>:</LI>

<pre>
struct ObjectLockingTag : ThreadingPolicyTag {};
</pre>

<LI>Provide partial specialization of the <B>ThreadingPolicy</B> template where the first template parameter is <B>ObjectLockingTag</B>. It should inherit from the <B>ObjectLocking</B> template:</LI>

<pre>
template &lt; class T &gt;
struct ThreadingPolicy&lt; ObjectLockingTag, T &gt; :
        ObjectLocking&lt; T &gt; {};
</pre>
</OL>
<p>The <B>SelectPolicyTag</B> class template (which is very much like <B>SelectPolicy</B>) uses the <B>SUPERSUBCLASS</B> macro from Loki to determine if a given policy tag is derived from the base tag type that we are looking for. <B>SelectPolicyTag</B> finds some concrete <B>ThreadingPolicyTag</B> in <B>PolicyTagList</B> and returns it via <B>Result</B>. The tag is then passed on to the <B>ThreadingPolicy</B> template as a first template parameter. As a result, <B>MyThreadingPolicy</B> is <B>typedef</B>ed to the correct specialization of <B>ThreadingPolicy</B>. </p>
<p><a href="list2.htm">Listing 2</a> allows you to use template template parameters. Other advantages include listing any policies in any order and skippping any of them in the <B>Typelist</B>. If you skip a policy, the default policies are used. <a href="list2.htm">Listing 2</a> also allows you to add new policies to your templates with minimal changes to the code that uses the templates.  </p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  &#147;YASTLI &#151; Yet Another STL Implementation &#151; any interest?&#148; &lt;http://groups.google.com/groups?hl=en&amp;safe=off&amp;th=32731af79c219247,63&amp;start=0&gt;.</p>
<p><a name="2"></a>[2]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>

<p><i><B>Matvei Brodski</B> is an associate director at Bear, Stearns &amp; Co. Inc. and can be reached at <B>mbrodski@bear.com</B>.</i></p>

<h4><a href="../../../source/2002/oct02/brodski.zip"></a></h4>
</blockquote></body></html>
