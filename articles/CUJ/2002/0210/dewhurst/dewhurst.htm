<HTML>   
     <HEAD>
<TITLE>October 2002/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: A Bit-Wise Typeof Operator, Part 2</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Beyond the Alexandrescu Horizon: Part 2 of 3 on implementing a typeof operator, and why you may have to wait for compilers to catch up anyway.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In the last installment of this column, we looked at an approach for producing a G&ouml;del numbering for the C++ type system. That is, we described a mapping from the set of C++ types to the set of integers, such that the mapping is structured and invertible. The goal is to implement an effective, portable <B>typeof</B> facility by conducting a &#147;round-trip&#148; translation of a type to an integer and back to a type again <a href="#1">[1]</a>. Step one employs function template argument deduction to instantiate a &#147;G&ouml;del number&#148; template for the type of an expression. Step two extracts the G&ouml;del number from the template as an enumerator defined within the instantiated template. Step three decodes the G&ouml;del number to regenerate the type of the expression. Performing this sequence of operations at compile time allows us to determine the type of an expression: a <B>typeof</B> operation. In this installment, which is part two of three, we&#146;ll implement the code to extract an expression&#146;s type and generate an integer from it.</p>
<p>At the conclusion of part one, I described two outstanding implementation problems. First, we have to be able to construct and manipulate integers of unbounded size. Second, we have to be able to perform rather involved recursive bit twiddling on these large integers at compile time. That&#146;s just what we&#146;ll do for the remainder of this column. Be warned that this column is very heavy on implementation and contains a lot of code, but, even so, there isn&#146;t space to include the entire implementation <a href="#2">[2]</a>.</p>

<H3><FONT COLOR="#000080">Multipart Integer Operations</FONT></H3>

<p>Creating a usable integer of arbitrary precision is not difficult if one has access to all of C++&#146;s facilities for constructing abstract data types. However, we are limited by the need to manipulate our large integers at compile time. This means that we are restricted to the use of integer constant-expressions, which in turn means that we must use only predefined integral types.</p>
<p>Well, all is not lost. If we can&#146;t create any new types for compile-time arithmetic, we can instead create new operations on the existing types. Let&#146;s look at a &#147;left-shift&#148; operation on an unsigned integer type.</p>

<pre>
typedef unsigned short Code;
const Code CodeLen
  = std::numeric_limits&lt;Code&gt;::digits;
#define MASK( n )\
  (((1&lt;&lt;((n)-1))-1)|(1&lt;&lt;((n)-1)))
const Code CodeMax = MASK(CodeLen);
#define BOUND( n ) ((n)&amp;MASK(CodeLen))
//...
template &lt;Code c, Code n&gt;
struct ShiftLeft1 {
  enum {
    basemask = MASK(n),
    leftendmask
      = BOUND(basemask &lt;&lt; CodeLen-n),
    lostbits
      = BOUND((c &amp; leftendmask) &gt;&gt; CodeLen-n),
    r1 = BOUND(c &lt;&lt; n)
  };
};
</pre>

<p>The <B>ShiftLeft1</B> template simply shifts its first argument left by the number of bits specified by its second argument. The shifted result is available as the nested enumerator <B>r1</B>. Any bits that fall off the left end of the first argument as the result of the shift are available in the enumerator <B>lostbits</B>. For example, <B>ShiftLeft1&lt;0xFFFF,4&gt;::r1</B> is <B>0xFFF0</B>, and <B>ShiftLeft1&lt;0xFFFF,4&gt;::lostbits</B> is <B>0x000F</B>. Note the need to <B>BOUND</B> the shifted results by zeroing out bits in positions greater than <B>CodeLen</B>. Otherwise, depending on the underlying integral type the compiler uses to represent the enumerator, the bits that should have &#147;fallen off the end&#148; of the shifted <B>Code</B> may be retained in the enumerator, giving incorrect results <a href="#3">[3]</a>.</p>
<p>The ability to perform a compile-time shift of a single integral value is not so useful in itself, but we can use <B>ShiftLeft1</B> to implement a left-shift operation on a pair of <B>Code</B>s.</p>

<pre>
template &lt;Code c2, Code c1, Code n&gt;
struct ShiftLeft2 {
  enum {
    r1 = ShiftLeft1&lt;c1,n&gt;::r1,
    r2 = ShiftLeft1&lt;c2,n&gt;::r1
      | ShiftLeft1&lt;c1,n&gt;::lostbits,
    lostbits = ShiftLeft1&lt;c2,n&gt;::lostbits
  };
};
</pre>

<p>The result of shifting the multipart integer composed of <B>c2</B> and <B>c1</B> left by <B>n</B> bits is available in the enumerators <B>r2</B> and <B>r1</B>. We can consider <B>r2</B> and <B>r1</B> as the double-precision result of performing a left shift of <B>n</B> bits on the double-precision argument composed of <B>c2</B> and <B>c1</B>. We can continue in this fashion to produce a left-shift operation on an unbounded number of <B>Code</B>s. Inasmuch as I have a life, I decided to stop at 4, though a more reasonable lower limit for a production <B>typeof</B> operator might be 12 or more.</p>

<pre>
template &lt;Code c4, Code c3, Code c2, Code c1, Code n&gt;
struct ShiftLeft4 {
  enum {
    r1 = ShiftLeft3&lt;c3,c2,c1,n&gt;::r1,
    r2 = ShiftLeft3&lt;c3,c2,c1,n&gt;::r2,
    r3 = ShiftLeft3&lt;c3,c2,c1,n&gt;::r3,
    r4 = ShiftLeft1&lt;c4,n&gt;::r1
      | ShiftLeft3&lt;c3,c2,c1,n&gt;::lostbits,
    lostbits = ShiftLeft1&lt;c4,n&gt;::lostbits
  };
};
</pre>

<p>This mechanism works well if the length of the shift is less than the number of bits in <B>Code</B>, but fails for longer shift amounts. Let&#146;s put a layer over our simple left-shift operation to take long shifts into account.</p>

<pre>
template &lt;bool, Code c, Code n&gt;
struct ShiftLeftLong1Impl {
  enum { r1 = 0 };
};
template &lt;Code c, Code n&gt;
struct ShiftLeftLong1Impl&lt;false,c,n&gt; {
  enum { r1 = ShiftLeft1&lt;c,n&gt;::r1 };
};
template &lt;Code c, Code n&gt;
struct ShiftLeftLong1 {
  enum { r1 = ShiftLeftLong1Impl&lt;(n&gt;CodeLen),c,n&gt;::r1 };
};
template &lt;bool, Code c2, Code c1, Code n&gt;
struct ShiftLeftLong2Impl {
  enum { r2 = ShiftLeftLong1&lt;c1,n-CodeLen&gt;::r1 };
};
template &lt;Code c2, Code c1, Code n&gt;
struct ShiftLeftLong2Impl&lt;false,c2,c1,n&gt; {
  enum { r2 = ShiftLeft2&lt;c2,c1,n&gt;::r2 };
};
template &lt;Code c2, Code c1, Code n&gt;
struct ShiftLeftLong2 {
  enum {
    r1 = ShiftLeftLong1&lt;c1,n&gt;::r1,
    r2 = ShiftLeftLong2Impl&lt;(n&gt;CodeLen),c2,c1,n&gt;::r2
  };
};
//...
</pre>

<p>Finally, let&#146;s wrap up the left-shift facility with a clean interface.</p>

<pre>
template &lt;Code c4, Code c3, Code c2, Code c1, Code n&gt;
struct ShiftLeft {
  enum {
    code1 = ShiftLeftLong4&lt;c4,c3,c2,c1,n&gt;::r1,
    code2 = ShiftLeftLong4&lt;c4,c3,c2,c1,n&gt;::r2,
    code3 = ShiftLeftLong4&lt;c4,c3,c2,c1,n&gt;::r3,
    code4 = ShiftLeftLong4&lt;c4,c3,c2,c1,n&gt;::r4
  };
};
</pre>

<p>The implementation of multipart integer right shift is similar. Other bitwise operations can be implemented in a similar manner, but we need only left and right shift to implement <B>typeof</B>.</p>

<H3><FONT COLOR="#000080">Generating a G&ouml;del Number</FONT></H3>

<p>The first step in mapping an expression&#146;s type to an integer involves using function template argument deduction to uncover the type of the expression.</p>

<pre>
template &lt;typename T&gt;
char (*genGN1( T &amp; ))[GN&lt;T&gt;::code1+1];
template &lt;typename T&gt;
char (*genGN2( T &amp; ))[GN&lt;T&gt;::code2+1];
template &lt;typename T&gt;
char (*genGN3( T &amp; ))[GN&lt;T&gt;::code3+1];
template &lt;typename T&gt;
char (*genGN4( T &amp; ))[GN&lt;T&gt;::code4+1];
</pre>

<p>The <B>genGN</B> templates do not have to be defined, as these template functions are &#147;invoked&#148; at compile time without being called. When we invoke a <B>genGN</B>, the compiler performs template argument deduction and instantiates the <B>GN</B> (G&ouml;del Number) template with the type of the argument. As we noted in part one, the formal argument is declared to be a reference so that <B>const</B> and <B>volatile</B> modifiers will not be stripped from <B>T</B>. The <B>genGN</B> template functions produce their results by returning a type that encodes the value of interest in a type; we cannot return a value from a function at compile time. Here, we return a pointer to an array of characters. The number of interest is the array bound, incremented by one to avoid the possibility of a zero bound. </p>
<p>The general (unspecialized) definition of the <B>GN</B> template is straightforward.</p>

<pre>
template &lt;typename T&gt;
struct GN {
  enum {
    code4 = 0,
    code3 = 0,
    code2 = 0,
    code1 = BaseType&lt;T&gt;::code,
    len = BaseType&lt;T&gt;::len
  };
  GODEL_NUMBER_LENGTH_CHECK(len);
};
</pre>

<p>This unspecialized template assumes that the type name <B>T</B> represents a base type, so it instantiates the <B>BaseType</B> template to obtain the unique integer value for that base type. The check on the length of the result is used to detect cases where the generated G&ouml;del number overflows the multipart integer that holds it.</p>

<pre>
#define GODEL_NUMBER_LENGTH_CHECK(n)\
    char xxx_[4*CodeLen-(n)+1]
</pre>

<p>If the generated number does overflow, then we will get a compile-time error for attempting to declare an array of zero or negative bound and &#151; one hopes &#151; a compiler error message that mentions the macro name. The <B>BaseType</B> template generates a unique integer for the type using the registration mechanism described in the previous installment of this column <a href="#4">[4]</a>.</p>

<pre>
template &lt;typename T&gt;
struct BaseType {
  typedef typename DeQual&lt;T&gt;::R S;
  enum {
    base = TypeCode&lt;S&gt;::value,
    code = base
      | (IsConst&lt;T&gt;::result &lt;&lt; ConstBasePos)
      | (IsVol&lt;T&gt;::result &lt;&lt; VolBasePos),
    len = QualBaseLen // fixed length of a qualified base
  };
};
</pre>

<p><B>BaseType</B> first strips off any type qualifiers, generates the unique code for the unqualified base type, and then sets bits to represent the <B>const</B> and <B>volatile</B> qualifiers as appropriate. The stripping or detection of type qualifiers may be handled in an ad hoc manner, or by a more general facility. In this case, we were ad hoc.</p>

<pre>
template &lt;typename T&gt;
struct IsConst {
    enum { result = false }; };
template &lt;typename T&gt;
struct IsConst&lt;const T&gt; {
    enum { result = true }; };

template &lt;typename T&gt;
struct DeConst {
    typedef T R; };
template &lt;typename T&gt;
struct DeConst&lt;const T&gt; {
    typedef T R; };

// volatile similar to const...

template &lt;typename T&gt;
struct IsQual {
    enum { result = IsConst&lt;T&gt;::result
                  || IsVol&lt;T&gt;::result }; };

template &lt;typename T&gt;
struct DeQual {
    typedef typename DeVol&lt;typename DeConst&lt;T&gt;::R&gt;::R R; };
</pre>

<p>Types with modifiers are handled by a number of different partial specializations of <B>GN</B>. As described in part one, we construct the code for a modified type by shifting the code for the unmodified type left and appending the code corresponding to the modifier. Let&#146;s look at the partial specialization of <B>GN</B> for the pointer modifier.</p>

<pre>
template &lt;typename T&gt;
struct GN&lt;T *&gt; {
  enum {
    // generate base code...
    c1 = GN&lt;T&gt;::code1,
    c2 = GN&lt;T&gt;::code2,
    c3 = GN&lt;T&gt;::code3,
    c4 = GN&lt;T&gt;::code4,
    // ...shift it left...
    code4 = ShiftLeft&lt;c4,c3,c2,c1,ModLen&gt;::code4,
    code3 = ShiftLeft&lt;c4,c3,c2,c1,ModLen&gt;::code3,
    code2 = ShiftLeft&lt;c4,c3,c2,c1,ModLen&gt;::code2,
    // ...and append code for pointer modifier.
    code1 = ShiftLeft&lt;c4,c3,c2,c1,ModLen&gt;::code1 | Ptr,
    len = GN&lt;T&gt;::len+ModLen
  };
  GODEL_NUMBER_LENGTH_CHECK(len);
};
</pre>

<p>First, we generate the multipart integer that represents the pointed-to type. Then, we shift the multipart integer left by <B>ModLen</B>, the number of bits that a modifier occupies. The code for a pointer modifier, <B>Ptr</B>, is or-ed onto the right end of the multipart integer. Again, we keep track of the length of the generated multipart integer in order to detect overflow. Qualified pointer modifiers are handled in a similar way, but we also set bits to indicate <B>const</B>, <B>volatile</B>, or both.</p>

<pre>
template &lt;typename T&gt;
struct GN&lt;T * const&gt; {
  enum {
    // same as above...
    code1 = ShiftLeft&lt;c4,c3,c2,c1,ModLen&gt;::code1 | Ptr+Const,
    len = GN&lt;T&gt;::len+ModLen
  };
  GODEL_NUMBER_LENGTH_CHECK(len);
};
</pre>

<p>Here, the choice to use addition instead of bitwise or to &#147;add&#148; the <B>Const</B> qualifier code to the <B>Ptr</B> modifier code is purely a stylistic one, since <B>code1</B> has been shifted left, and its rightmost <B>ModLen</B> bits are, therefore, all zeros. A bitwise or would have functioned just as well.</p>
<p>As mentioned above, we don&#146;t have space to show the entire implementation, but we can look at one of <B>GN</B>&#146;s more complex specializations. <a href="list1.htm">Listing 1</a> shows the specialization of <B>GN</B> for unary functions. Recall that the encoding of a unary function follows the structure below.</p>

<IMG SRC="fig1.gif">

<p>The specialization of <B>GN</B> in <a href="list1.htm">Listing 1</a> first extracts the argument and return types of the function. It also extracts the type of the function as a whole, even though this type name is not used in the implementation of the template. It&#146;s often a good idea when designing a template to provide more information than is strictly required for its implementation, since this information can be valuable both for debugging the template and for possible later use of the template in a manner that was not envisioned when it was first designed. </p>
<p>We then recursively instantiate <B>GN</B> to generate the encodings for the argument and return types and left shift these encodings to the positions they will occupy in the final encoding of the function type as a whole. Finally, we use bitwise or to paste the return and argument types together and append the length of the argument, followed by the number of arguments (one, since this is a unary function) and the code for a function modifier. As always, we calculate the total number of bits used by the encoding and check that we have not exceeded the maximum.</p>
<p>As an example, the encoding for the type <B>bool (*const*)(bool S::*)</B> can be determined by invoking <B>genGN</B>.</p>

<pre>
bool (*const*fp)(bool S::*);
const int c4 = sizeof(*genGN4(fp))-1; // subtract fudge factor
const int c3 = sizeof(*genGN3(fp))-1;
const int c2 = sizeof(*genGN2(fp))-1;
const int c1 = sizeof(*genGN1(fp))-1;
</pre>

<p>If the class type <B>S</B> has been registered with the (decimal) value <B>31</B>, the result is <B>[0X0040, 0X5F04, 0X5905, 0X0901]</B>, given the current, in some cases arbitrary, integer sizes and base type and modifier values used in the <B>GN</B> source code.</p>

<H3><FONT COLOR="#000080">Observations and Confessions</FONT></H3>

<p>In some ways, coding with template metaprogramming is liberating. Execution is performed at compile time, so there is no cost for code that would otherwise cry out for factoring if it were to be executed at run time. In the partial specialization of <B>GN</B> for pointer modifiers, for example, we instantiated the <B>GN</B> and <B>ShiftLeft</B> templates multiple times with the same arguments. In the implementation of <B>ShiftLeft</B>, for clarity, we layered the implementation based on both the length of the shift and on the number of constituent parts of the multipart integer being shifted. Clarity and ease of maintenance are always a consideration in any style of coding. In coding with templates, these considerations are paramount, due to the difficulty of debugging generic code and the low cost of such an organization.</p>
<p>A confession is also in order. Like much bleeding-edge template metaprogramming, the implementation of <B>GN</B> has crossed over what can only be called the &#147;Alexandrescu horizon&#148; <a href="#5">[5]</a>, and the compiler is unable to cope with some of its complexities. As a result, some aspects of the G&ouml;del number generation do not work perfectly as of this writing. It is possible, of course, that some of the fault is with the implementation, but my preference is to blame the compiler instead.</p>
<p>In the next and final installment of this series, we&#146;ll use template metaprogramming to implement compile-time switch and if statements. We&#146;ll then use these control structures to decode the G&ouml;del numbers to extract the types that they encode, thereby completing our round trip and implementing a portable <B>typeof</B> operator.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  An ancillary goal is to demonstrate to the College Board the continued viability of the C++ bitwise operators. But enough with the College Board already.</p>
<p><a name="2"></a>[2]  For the interested reader, the source code for the portion of the <B>typeof</B> facility described in this article is available at &lt;www.semantics.org/code.html&gt;. The full implementation will be made available after the third (and final) part of this column.</p>
<p><a name="3"></a>[3]  The rules for the precision of enumerators are non-trivial. See the C++ Standard, section 7.2.</p>
<p><a name="4"></a>[4]  S.C. Dewhurst. &#147;Common Knowledge: A Bit-Wise <B>typeof</B>, Part 1,&#148; <I>C/C++ Users Journal</I>, August 2002.</p>
<p><a name="5"></a>[5]  After Andrei Alexandrescu, who had the cheek to publish a book of groundbreaking C++ programming techniques in advance of the existence of a compiler that could actually translate them. My reference to &#147;the compiler&#148; is generic and may be more precisely stated as &#147;the set of C++ compilers that I used to attempt to compile this code.&#148;</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

<h4><a href="../../../source/2002/oct02/dewhurst.zip"></a></h4>

</blockquote></body></html>
