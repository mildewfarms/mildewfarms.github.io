<HTML><HEAD>
<TITLE>October 2002/STL &amp; Generic Programming/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Unconsting and unrefing with trace</A></h4>
<pre>
template&lt;typename U&gt;
class NONCONST
{
public:
  typedef U RET;
  static void trace()
  { std::cout &lt;&lt; "Default NONCONST&lt;U&gt;" &lt;&lt; std::endl; }
};

template&lt;typename U&gt;
class NONCONST&lt;const U&gt;
{
public:
  typedef U RET;
  static void trace()
  { std::cout &lt;&lt; "NONCONST&lt;const U&gt;" &lt;&lt; std::endl; }
};

template&lt;typename U&gt;
class NONREF
{
public:
  typedef U RET;
  static void trace()
  { std::cout &lt;&lt; "Default NONREF&lt;U&gt;" &lt;&lt; std::endl; }
};

template&lt;typename U&gt;
class NONREF&lt;U&amp;&gt;
{
public:
  typedef U RET;
  static void trace()
  { std::cout &lt;&lt; "NONREF&lt;U&amp;&gt;" &lt;&lt; std::endl; }
};

template&lt;typename Func&gt;
class X
{
  typedef Func::first_argument_type first_arg;
  typedef NONCONST&lt;NONREF&lt;first_arg&gt;::RET&gt;::RET raw_first_arg;
public:
  X( const raw_first_arg &amp; theFirstArg) : m_theFirstArg(theFirstArg)
  { 
    NONREF&lt;first_arg&gt;::trace();
    NONCONST&lt;NONREF&lt;first_arg&gt;::RET&gt;::trace();
    std::cout &lt;&lt; std::endl;
  }
  
private:
  raw_first_arg m_theFirstArg;
};

class func1
{
  typedef int first_argument_type;
};

class func2
{
  typedef const int first_argument_type;
};

class func3
{
  typedef int&amp; first_argument_type;
};

class func4
{
  typedef const int&amp; first_argument_type;
};

int main()
{
  int arg = 42;
  X&lt;func1&gt; x1(arg);
  X&lt;func2&gt; x2(arg);
  X&lt;func3&gt; x3(arg);
  X&lt;func4&gt; x4(arg);
  return 0;
}
&#151; End of Listing &#151;</pre></body></html>
