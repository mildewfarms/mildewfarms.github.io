<HTML><HEAD>
<TITLE>October 2002/Using the C++ Standard Library with Managed Types/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: gcroot</A></h4>
<pre>
#using &lt;mscorlib.dll&gt;
#using &lt;mscorlib.dll&gt;
#include &lt;stddef.h&gt;

template &lt;class T&gt; struct gcroot {
  typedef System::Runtime::InteropServices::GCHandle GCHandle;

  gcroot() {
    handle = GCHandle::op_Explicit(GCHandle::Alloc(0)).ToInt32();
  }

  gcroot(T t) {
  _handle = GCHandle::op_Explicit(GCHandle::Alloc(t)).ToInt32();
  }

  gcroot(const gcroot&amp; r) {
    // don't copy a handle, copy what it points to
  _handle = GCHandle::op_Explicit(
    GCHandle::Alloc(
      GCHandle::op_Explicit(r._handle).Target )).ToInt32();
  }

  ~gcroot() {
    GCHandle g = GCHandle::op_Explicit(_handle);
    g.Free();
  _handle = 0; // should fail if reconstituted
  }

  gcroot&amp; operator=(T t) {
    GCHandle::op_Explicit(_handle).Target = t;
    return *this;
  }

  gcroot&amp; operator=(const gcroot &amp;r) {
    T t = (T)r;
    GCHandle::op_Explicit(_handle).Target = t;
    return *this;
  }

  operator T () const {
    return static_cast&lt;T&gt;( GCHandle::op_Explicit(_handle).Target );
  }

  T operator-&gt;() const {
    return static_cast&lt;T&gt;(GCHandle::op_Explicit(_handle).Target);
  }

private:
        intptr_t _handle;
        T* operator&amp; ();
};
&#151; End of Listing &#151;</pre></body></html>
