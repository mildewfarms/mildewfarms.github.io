<HTML>   
     <HEAD>
<TITLE>October 2002/Using the C++ Standard Library with Managed Types</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Using the C++ Standard Library with Managed Types</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jonathan Caves</FONT></H3>

<BLOCKQUOTE>
<p>Yes, you can use STL with Managed C++ garbage-collected types. Really.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Although the Base Class library that ships with the .NET platform does come with its own containers and manipulators, they are  in general not as powerful or as optimal as their counterparts in the C++ Standard library (previously known as STL). So, is it possible to use a C++ container like <B>std::vector</B> with a managed type like <B>System::String</B>? Can templates and managed types work well together? This article explores the issues and shows that with a little bit of care and attention it is indeed possible to mix types from the two worlds.</p>

<H3><FONT COLOR="#000080">What We&#146;d Like to Be Able to Do</FONT></H3>

<p>&#147;So,&#148; you may ask, &#147;what&#146;s stopping me from just writing code like the following?&#148;</p>

<pre>
#using &lt;mscorlib.dll&gt;
#include &lt;vector&gt;

using namespace System;
using namespace std;

int main()
{
  vector&lt;String *&gt; fruit;

  fruit.push_back(S"Peach");
  fruit.push_back(S"Apple");
  fruit.push_back(S"Banana");
  fruit.push_back(S"Orange");
  fruit.push_back(S"Apricot");

  for (vector&lt;String *&gt;::iterator iter =
    fruit.begin();
    iter != fruit.end(); iter++) {
    Console::WriteLine(*iter);
  }
}
</pre>

<p>The problem is that in the managed world there is a garbage collector, and in order for the garbage collector to work correctly, it needs to know the location of every reference to every managed object. Unfortunately, the garbage collector knows nothing about the C++ heap. When <B>vector</B> allocates internal storage, it does so from the C++ heap, and when it then stores a reference to a managed <B>String</B> in this memory, the garbage collector loses track of <B>String</B>.</p>
<p>If in the simple program above you forced the garbage collector to wake up and do its stuff by adding a call to:</p>

<pre>
System::GC::Collect();
</pre>

<p>then the collector would notice that there are no references to any of the <B>String</B> objects you added to <B>vector</B>, so it would be free to collect the memory. If at a later point in the program you tried to access one of these <B>String</B> objects, then the program would crash &#151; a classic attempt to access freed memory.</p>

<H3><FONT COLOR="#000080">Containers of Managed Types: Solving the Problem</FONT></H3>

<p>So what to do? Can you somehow tell the garbage collector that there are references in the C++ heap to managed objects?</p>
<p>Fortunately, the Base Class library does provide the necessary functionality. The class <B>GCHandle</B> exists exactly for this purpose. To make it easy to use, the C++ compiler team has created a class template, <B>gcroot</B>, which encapsulates the functionality. The definition of the class template can be found in the header file <B>gcroot.h</B>. See <a href="list1.htm">Listing 1</a> for a slightly simplified version, minus some <B>#ifdef</B>s.</p>
<p>The <B>gcroot</B> class template is used to wrap a managed type. <B>gcroot</B> inserts the appropriate calls to register and deregister references in the C++ heap to the managed object, seamlessly enabling a managed type to be used in a C++ container like <B>vector</B>.</p>
<p>So you just update the original code to use the <B>gcroot</B> class:</p>

<pre>
#using &lt;mscorlib.dll&gt;
#include &lt;vector&gt;
#include &lt;gcroot.h&gt;

using namespace System;
using namespace std;

typedef gcroot&lt;String *&gt; wrappedString;

int main()
{
  vector&lt;wrappedString&gt; fruit;

  fruit.push_back(S"Peach");
  fruit.push_back(S"Apple");
  fruit.push_back(S"Banana");
  fruit.push_back(S"Orange");
  fruit.push_back(S"Apricot");

  for (vector&lt;wrappedString&gt;::iterator
    iter =
    fruit.begin();
    iter != fruit.end(); iter++) {
    Console::WriteLine(*iter);
  }
}
</pre>

<p>You&#146;ll notice that even though the element type of <B>vector</B> is now <B>gcroot&lt;String *&gt;</B>, you can continue to use the iterator as before. This is because the <B>gcroot</B> class template has a user-defined conversion operator:</p>

<pre>
operator T() const
</pre>

<p>So <B>gcroot&lt;String *&gt;</B> has an implicit conversion to <B>String *</B>, and you do not need to add an explicit cast to the code above.</p>

<H3><FONT COLOR="#000080">Using Standard Algorithms on Containers of Managed Types</FONT></H3>

<p>The same ease of use you get for the containers applies to the <B>algorithms</B> in the C++ Standard library. For example, replace the use of <B>for</B> with a call to <B>for_each</B> in the above example. First, you define a <B>Print</B> function:</p>

<pre>
void Print(const wrappedString &amp;wstr)
{
  Console::WriteLine(wstr);
}
</pre>

<p>and then we use it as usual:</p>

<pre>
for_each(fruit.begin(), fruit.end(), Print);
</pre>

<p>Again the user-defined conversion takes care of the implicit conversion from a <B>gcroot&lt;String *&gt;</B> to a <B>String *</B>.</p>
<p>You can also sort the <B>String</B> objects &#151; for this you need to define a less-than operator for your wrapped <B>String</B>:</p>

<pre>
bool operator&lt;(const wrappedString &amp;wstr1,
const wrappedString &amp;wstr2)
{
  return String::Compare(wstr1, wstr2) &lt; 0;
}
</pre>

<p>and then we can just sort our vector of Strings:</p>

<pre>
sort(fruit.begin(), fruit.end());
</pre>

<H3><FONT COLOR="#000080">Putting It All Together</FONT></H3>

<p>You can now assemble the pieces to get:</p>

<pre>
#using &lt;mscorlib.dll&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;gcroot.h&gt;

using namespace System;
using namespace std;

typedef gcroot&lt;String *&gt; wrappedString;

void Print(const wrappedString &amp;wstr)
{
  Console::WriteLine(wstr);
}

bool operator&lt;(const wrappedString &amp;wstr1,
  const wrappedString &amp;wstr2)
{
  return String::Compare(wstr1, wstr2) &lt; 0;
}

int main()
{
  vector&lt;wrappedString&gt; fruit;

  fruit.push_back(S"Peach");
  fruit.push_back(S"Apple");
  fruit.push_back(S"Banana");
  fruit.push_back(S"Orange");
  fruit.push_back(S"Apricot");

  Console::WriteLine(S"Unsorted:");

  for_each(fruit.Begin(), fruit.End(), Print);

  sort(fruit.begin(), sort.end());

  Console::WriteLine();
  Console::WriteLine(S"Sorted");

  for_each(fruit.Begin(), fruit.End(), Print);
}
</pre>

<p>The output is:</p>

<pre>
Unsorted:
Peach
Apple
Banana
Orange
Apricot

Sorted:
Apple
Apricot
Banana
Orange
Peach
</pre>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>With the use of the class template <B>gcroot</B>, it is possible to use the full functionality of the Standard C++ library with managed types like <B>System::String</B>.</p>

<p><i><B>Jonathan Caves</B> is Microsoft&#146;s principal representative at the ANSI C++ standards committee. He has been a member of Microsoft&#146;s Visual C++ group since 1993 and is currently a lead software engineer for Visual C++.</i></p>

<h4><a href="../../../source/2002/oct02/caves.zip"></a></h4>
</blockquote></body></html>
