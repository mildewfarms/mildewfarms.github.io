<HTML>   
     <HEAD>
<TITLE>April 2002/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: STL Algorithms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>Wait! Don&#146;t write that algorithm! Someone already did. But if you insist, follow this advice.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>When I started this column a little more than a year ago, one of the first things that I said about the STL was that it consists of three major components, which I referred to as the &#147;Three Pillars of the STL,&#148; namely, containers, iterators, and algorithms. So far, I have discussed containers and iterators, and I have spent a total of four columns on these two subjects. Therefore, you might now expect at least two columns on the subject of algorithms. Indeed, I could easily fill several columns discussing what kind of algorithms there are in the STL and then looking at each of them individually. But then, this is the kind of information you can get more easily and more systematically from your favorite book on the STL. Personally, I like the presentation that&#146;s given in Josuttis&#146; book <a href="#1">[1]</a> and also the one in Chapter 18 of Stroustrup&#146;s book on the C++ language <a href="#2">[2]</a>. Here, I will be content with giving you a little bit of general advice and direction on how to use the algorithms that the STL provides, and how to write your own.</p>
<p>My advice to you on the subject of algorithms can be summarized as follows:</p>

<OL><LI>Make yourself familiar with the algorithms that the STL offers and use them wisely.</LI>
<LI>Whenever you write a function that operates on a range of elements, write it as a generic STL-style algorithm.</LI></OL>

<p>Let me now elaborate on each of these two points in more detail.</p>

<H3><FONT COLOR="#000080">STL Algorithms Are Non-Intrusive</FONT></H3>

<p>An STL algorithm operates on one or more ranges of elements. Each range is given by a pair of iterators. In certain rare cases, of which I&#146;ll give an example shortly, a single iterator pointing to the begin position of a range suffices to specify the range. The standard example of an STL algorithm is our old friend <B>std::find</B>. Here&#146;s how it&#146;s typically implemented:</p>

<pre>
template&lt;typename _It, typename _T&gt;
inline _It find(_It beg, _It end, 
                const _T&amp; val)
{
  for(; beg != end; ++beg)
    if(val == *beg)
      break;
  return beg;
}
</pre>

<p>If you don&#146;t already know what <B>std::find</B> does, you can easily deduce it from the code above. The point that I&#146;m trying to illustrate here is that an algorithm has no knowledge whatsoever of the exact nature of the data structure that holds the range of elements. As a matter of fact, there does not have to be a data structure at all. Consider the following example:</p>

<pre>
std::istreambuf_iterator&lt;char&gt;
  it_in(std::cin.rdbuf());
std::istreambuf_iterator&lt;char&gt;
  eos;
it_in = std::find(it_in, eos, 'x');
</pre>

<p>Here, the algorithm <B>std::find</B> looks at characters as the user enters them and returns when either <B>&#146;x&#146;</B> is read, or when the user enters Ctrl-Z. The fact that algorithms have so little knowledge of the nature of the ranges that they operate on is the key to their reusability. On the other hand, it does of course impose certain limitations on the actions that an algorithm can possibly perform on a range of elements. It is extremely important to understand these limitations, or else you may end up misinterpreting the action of certain algorithms completely. A famous example of this kind of possible misinterpretation is the algorithm <B>std::remove</B>. Suppose you have an <B>std::vector</B> with some integers in it, some of which equal <B>42</B> <a href="#3">[3]</a>, as in:</p>

<pre>
std::vector&lt;int&gt; vect(4);
vect[0] = 41;
vect[1] = 42;
vect[2] = 43;
vect[3] = 42;
</pre>

<p>In order to remove all occurrences of <B>42</B> from the vector, you make the following call:</p>

<pre>
std::vector&lt;int&gt;::iterator ret_it =
  std::remove(vect.begin(), 
              vect.end(), 42);
</pre>

<p>Someone with a superficial understanding of the STL might think that after this call, the vector <B>vect</B> has two elements, namely, <B>41</B> and <B>43</B>. That is of course impossible. When the algorithm <B>std::remove</B> gets called with the vector&#146;s begin and end iterators as arguments, it gains access to the elements of the vector in the sense that it can read any element or modify any element or both, depending on the nature of the iterator. It does not have access to or even any kind of knowledge of the vector&#146;s member functions that modify its size.</p>
<p>So if it didn&#146;t change the vector&#146;s size, then in what sense did <B>std::remove</B> get rid of the occurrences of <B>42</B> in the vector? The key to the answer lies in the fact that <B>std::remove</B> returns an iterator. <B>std::remove</B> promises that after the call:</p>

<pre>
ret_it = std::remove(beg, end, val);
</pre>

<p>the range that is delimited by <B>beg</B> and <B>ret_it</B> contains the elements that were previously in the range delimited by <B>beg</B> and <B>end</B>, in the original order, with all occurrences of <B>val</B> omitted. It is not hard to see how this can indeed be accomplished given nothing but the two iterators <B>beg</B> and <B>end</B> and the value to be removed: conceptually, the algorithm iterates through the given range, and every time it finds an occurrence of <B>val</B>, it copies all subsequent elements to the position immediately to their left, thereby overwriting the occurrence of <B>val</B>. All that&#146;s needed to do this is a pair of forward iterators. <a href="list1.htm">Listing 1</a> shows a typical implementation, which, of course, goes about shifting elements in a way that&#146;s much smarter than what I just described. Only one pass through the range is required, and at most n-1 copy operations take place. By the way, the STL makes no guarantee about what elements you&#146;ll find in the &#147;leftover range&#148; from <B>ret_it</B> to <B>end</B>.</p>
<p>If this kind of &#147;non-intrusive&#148; removal is not good enough, and you need to really throw the leftover elements out of your vector, then you need to follow the call to <B>std::remove</B> with a call to <B>std::vector::erase</B>, like this:</p>

<pre>
vect.erase(
  std::remove(vect.begin(), vect.end(),42),
  vect.end()
  );
</pre>

<p>If you have read a good book on the STL, or if you regularly read the columns in this magazine, then you probably already know why the following alternative to the code above is not good at all. The net effect of the code above could also have been achieved using just the member function <B>std::vector::erase</B> like this:</p>

<pre>
std::vector&lt;int&gt;::iterator beg = vect.begin();
while(beg != vect.end()) {
  if(42 == *beg)
    beg = vect.erase(beg);
  else
    ++beg;
}
</pre>

<p>This is bad, bad, bad, for at least two reasons. First of all, it is very poor style to write an explicit loop when an STL algorithm does the job just as well. Using a one-line call to an algorithm will greatly improve the readability and maintainability of your code, and it will make it much less error-prone. Due to inlining and the fact that the designer of the algorithm probably knew more about the problem at hand than you and me, using an algorithm is also likely to result in better performance. And that takes us to the second reason why the code above is bad. It betrays ignorance of <B>std::vector</B>&#146;s efficiency characteristics. Every time the loop finds an occurrence of <B>42</B>, it completely rearranges the vector so as to eliminate this particular occurrence. This will most certainly result in copying all elements to the right of the occurrence. Worse still, it may well result in a reallocation of memory and subsequent copying of all remaining elements in the vector. Compare this to the remove-erase solution, where you iterate through the vector just once, copy each element at most once, and then perform one resizing operation.</p>
<p>So now we know that the remove-erase trick is the best way to perform conditional erasing from a vector. This is important because we frequently choose <B>std::vector</B> as our container for other, more important reasons and then find ourselves in need of conditional erasing. If, on the other hand, conditional erasing is a frequently occurring and performance-critical operation, then <B>std::vector</B> was probably the wrong choice of container to begin with: we should have used <B>std::list</B>, which is specifically geared toward efficient insertion and deletion of elements at arbitrary positions.</p>
<p>This takes me to another very important point concerning the use of STL algorithms, namely, the issue of algorithms versus member functions.</p>

<H3><FONT COLOR="#000080">Algorithms vs. Member Functions</FONT></H3>

<p>If we have chosen <B>std::list</B> as the container type for the sake of more efficient insertion and deletion at arbitrary positions, then the example above would look like this:</p>

<pre>
std::list&lt;int&gt; li;
li.push_back(41);
li.push_back(42);
li.push_back(43);
li.push_back(42);

li.remove(42);
</pre>

<p>After the call to <B>std::list::remove</B>, our list will contain the two elements <B>41</B> and <B>43</B>, and nothing else. The member function <B>std::list::remove</B> did, of course, make use of the specific structure of a linked list to perform the deletion of elements in the most efficient way. No shifting of elements has occurred; all that <B>std::list::remove</B> did was to iterate linearly through the list, bend a few pointers here and there, and zap some deleted elements. Given the fact that an algorithm such as <B>std::remove</B> has no access to the internal structure of the container that it operates on (in fact, it does not even know whether it&#146;s operating on a container or not), it is clear that you can reap the benefit of <B>std::list</B>&#146;s efficient deletion only by using the member function <B>std::list::remove</B> rather than the algorithm <B>std::remove</B>.</p>
<p>Another important example of this relationship between algorithms and member functions is <B>std::find</B> versus the <B>find</B> member function of the STL&#146;s associative containers, such as <B>std::map</B> and <B>std::set</B>. If you call <B>std::find</B> on a range of elements, you will be iterating linearly through the range, stopping at the first occurrence of an element with the value you are looking for. The STL&#146;s associative containers are designed for a vastly more efficient type of lookup, namely, lookup of no more than logarithmic complexity. However, you cannot get the benefit of this enormous gain in efficiency unless you use the respective container&#146;s member function <B>find</B> rather than the algorithm <B>std::find</B>.</p>

<H3><FONT COLOR="#000080">Algorithms and Insert Iterators</FONT></H3>

<p>I said before that STL algorithms are non-intrusive in the sense that they cannot modify the structure of a container that they operate on, the reason being that they don&#146;t even know whether or not they&#146;re operating on a container at all. However, there is a fairly common STL idiom that allows you to cheat on this restriction of algorithms. Let&#146;s take a look at the algorithm <B>std::transform</B>.</p>

<pre>
template&lt;typname _InIt, typename _OutIt, typename _Func&gt;
std::transform(
  _InIt in_beg,
  _InIt in_end,
  _OutIt out_beg,
  _Func func
  );
</pre>

<p>This algorithm iterates over a range of elements given by a pair of input iterators: <B>in_beg</B> and <B>in_end</B>. To each element in the range, it applies a function that is supplied by the caller as a function pointer or a function object. The return values are copied to a second range, whose begin position is specified by a single output iterator <B>out_beg</B>. Here&#146;s an example:</p>

<pre>
std::istreambuf_iterator&lt;char&gt;
  it_in(std::cin.rdbuf());
std::istreambuf_iterator&lt;char&gt;
  eos;
std::ostreambuf_iterator&lt;char&gt;
  it_out(std::cout.rdbuf());

std::transform(it_in, eos, it_out, toupper);
</pre>

<p>This call to <B>std::transform</B> will read characters from the input and write an up-cased version of each character to the output until the user enters Ctrl-Z. Notice that I have passed the address of the function <B>toupper</B> from the C run-time library&#146;s <B>ctype.h</B> as the last argument to <B>std::transform</B>. From the C++ Standard library&#146;s viewpoint, this is poor style. However, doing it right will in this case open several cans of worms (one of them being quite ugly) that I don&#146;t want to talk about now. I promise that I&#146;ll come back to this in my next column.</p>
<p>Now assume that rather than writing the up-cased characters to the standard output stream, you want to write them to a vector. The problem is that we don&#146;t know ahead of time how many characters the user will enter. But the algorithm <B>std::transform</B> assumes that it can write as many elements as it finds in its input range, given by <B>in_beg</B> and <B>in_end</B>, to the range that begins at <B>out_beg</B>. If <B>out_beg</B> is the begin iterator of some vector, then that vector&#146;s size must be greater than or equal to the number of elements in the input range. There is no way for the algorithm <B>std::transform</B> to manipulate the vector&#146;s size as it goes along. This problem would be a rather unpleasant restriction to the use of algorithms, such as <B>std::transform</B>, if the STL did not have a solution for it. The answer is insert iterators. The STL has several kinds of insert iterators, and you should make yourself familiar with all of them. What they all have in common is the fact that they hold a reference to the container that they operate on. Therefore, they can do what regular iterators cannot do: they can modify the size of the container that they refer to. A suitable example of <B>std::transform</B> trying to write to a vector is <B>std::back_insert_iterator</B>:</p>

<pre>
std::vector&lt;char&gt; vect;
std::back_insert_iterator&lt;std::vector&lt;char&gt; &gt;
  inserter(vect);

std::istreambuf_iterator&lt;char&gt;
  it_in(std::cin.rdbuf());
std::istreambuf_iterator&lt;char&gt;
  eos;

std::transform(it_in, eos, inserter, toupper);
</pre>

<p>Every time that <B>std::transform</B> performs an assignment to <B>inserter</B>, as in:</p>

<pre>
*inserter = toupper(c);</pre>

<p>the <B>back_insert_iterator</B> inserter internally calls <B>std::vector</B>&#146;s <B>push_back</B> member function on the vector <B>vect</B>. This is possible because <B>inserter</B> holds a reference to <B>vect</B>. Therefore, the up-cased characters read from the input stream will be pushed onto the back of the vector in an orderly manner.</p>
<p>In this example, we are forced to use an insert iterator with <B>std::transform</B> because we don&#146;t know ahead of time how many elements the algorithm <B>std::transform</B> will find in its input range. When the length of the input range is known or can easily be determined as the difference between the two iterators that specify the input range, then a regular iterator could be used after sizing the target vector, as in the following example. Here, <B>beg</B> and <B>end</B> are random access iterators that dereference to <B>char</B>s.</p>

<pre>
std::vector&lt;char&gt; vect(end - beg);
std::transform(beg, end, vect.begin(), toupper);
</pre>

<p>Even though we could thus avoid the use of insert iterators in this situation, a better solution in general is as follows:</p>

<pre>
std::vector&lt;char&gt; vect;
vect.reserve(end - beg);
std::back_insert_iterator&lt;std::vector&lt;char&gt; &gt;
  inserter(vect);

std::transform(beg, end, inserter, toupper);
</pre>

<p>For vectors of <B>char</B>s there is probably no discernible difference between this solution and the previous one. But if the element type of the vector is something more complex than a <B>char</B>, then sizing the vector upfront is likely to result in superfluous calls to the default constructor, which can be avoided altogether by calling <B>reserve</B> and then adding elements through an insert iterator, as shown above.</p>
<p>Here are some more scenarios where the use of an insert iterator is or could be preferable to the use of a regular iterator with algorithms such as <B>std::transform</B>:</p>

<UL>
<LI>   The target container is a list. Here, sizing the container upfront and then assigning through a regular iterator is in fact more expensive than repeatedly calling <B>push_front</B> or <B>push_back</B> or <B>insert</B> through an insert iterator.</LI>
<LI>   The target container is an associative container, such as <B>std::set</B>. Here, sizing the container upfront and then assigning through a regular iterator does not even make sense. An insert iterator is the only option.</LI>
<LI>   The input range is given by a pair of iterators that are not random access iterators. In this case, determining the size of the input range, if it is possible at all, is an expensive operation whose cost must be weighed carefully in the decision between the use of insert iterators and regular iterators.</LI></UL>

<H3><FONT COLOR="#000080">Writing Your Own Algorithms</FONT></H3>

<p>It should be clear by now that in the interest of reusability, any function that operates on one or more ranges of elements should be written as an STL-style algorithm, where the ranges are given by pairs of iterators, and the types of the iterators are template arguments, one for each pair of iterators. In fact, I have already shown you an example in my April column in connection with iterator traits, namely, the sample standard deviation algorithm. Writing STL-style algorithms is usually a rather straightforward affair. There is only one thing that I need to remind you of: whenever your algorithm is such that it can operate more efficiently on iterators of a certain category, then you should write the algorithm in such a way that it branches out at compile time according to the iterator category. Again, I already showed you that in the April column, where the algorithm was able to perform better for random access iterators as opposed to all other iterator categories. <a href="list2.htm">Listing 2</a> shows you how this compile-time branching is set up. <a href="list3.htm">Listing 3</a> shows the <B>_Iter_cat</B> kludge that you must resort to if you are working with a compiler that is behind on template support, such as Microsoft&#146;s Visual C++.</p>
<p>Let&#146;s do one more concrete example of an STL-style algorithm. Suppose you need to determine the median of a range of numbers that are already sorted in ascending or descending order. Basically, what the algorithm must do is find out the length of the range and then proceed to the position in the middle. These are typical examples of operations that can be performed for all forward iterators, but they can be done much more efficiently for random access iterators than for all other forward iterators: for random access iterators, these operations can be performed in constant time using expressions such as <B>end-beg</B> and <B>beg+n</B>. For all other forward iterators, one must hop through the sequence in linear time using only <B>operator++</B>.</p>
<p>Therefore, you might expect to have to set up compile-time branching as shown in <a href="list2.htm">Listing 2</a> for your median algorithm. As it happens so often, the STL already has a few building blocks that make our lives quite easy. I am talking about <B>std::advance</B> and <B>std::distance</B>. The first of these will advance an iterator by a given number of steps; the second one will determine the number of elements in the range given by a pair of iterators. Both are function templates that internally branch at compile time on the category of the iterator arguments, thereby employing the most efficient strategy to perform their respective tasks. <a href="list4.htm">Listing 4</a> shows how we can now easily implement our median algorithm without any further branching.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>Make sure you know what the STL has to offer in the way of algorithms, or else you&#146;ll be missing out on a lot of powerful functionality. But don&#146;t forget: before you use an algorithm on a container or parts of a container, make sure that there isn&#146;t a container member function that does the same job more efficiently. Make it a habit to write all functions that operate on ranges of elements as reusable STL-style algorithms. For more valuable advice along the lines of this column, see Chapter 5 of Scott Meyers&#146;s <I>Effective STL</I> <a href="#4">[4]</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Nicolai M. Josuttis. <I>The C++ Standard Library: A Tutorial and Reference</I> (Addison-Wesley, 1999).</p>
<p><a name="2"></a>[2]  Bjarne Stroustrup. <I>The C++ Programming Language, 3rd Edition</I> (Addison-Wesley, 1997).</p>
<p><a name="3"></a>[3]  In case you haven&#146;t heard, Douglas Adams, author of <I>The Hitchhiker&#146;s Guide to the Galaxy</I> and many other fine books, passed away on May 11, 2001 at the age of 48. A sad and untimely demise, no doubt, but at least he lived long enough to give us the answer.</p>
<p><a name="4"></a>[4]  Scott Meyers. <I>Effective STL</I> (Addison-Wesley, 2001).</p>


<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2002/apr02/becker.zip"></a></h4>
</blockquote></body></html>


