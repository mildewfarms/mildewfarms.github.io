<HTML>   
     <HEAD>
<TITLE>April 2002/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Metaprogrammed Adapters</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>A little template metaprogramming goes a very long way. This time it lets you treat multiple sequences as a single, logical sequence. Cool.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In this installment of &#147;Common Knowledge,&#148; we&#146;ll look at the use of some simple template metaprogramming in the design of a fairly unusual STL iterator adapter. However, its implementation illustrates techniques that can and should be commonly applied. And who knows? Even this adapter may be commonly used some day.</p>

<H3><FONT COLOR="#000080">Supersequences and MultiIn</FONT></H3>

<p>Perhaps the most brilliantly simple aspect of the STL architecture is that generic algorithms are designed to work with sequences rather than containers. Among other benefits, this provides the flexibility to work with any valid subsequence of a more complete sequence. For example, we could choose to sort only a portion of a container&#146;s content or examine only every third element of a complete sequence, and so on.</p>

<pre>
vector&lt;int&gt; data;
//...
const int n = data.size()/4;
bubblesort( data.begin()+n, data.end()-n );
</pre>

<p>What if the sequence of interest is not contained within a single container or other source? A commonplace and effective approach is to copy the values of sequences of interest into a single sequence and work with the new, combined sequence. A less common and, admittedly, often less effective approach would be to design an iterator adapter that can combine two sequences into a supersequence without copying. Let&#146;s call this adapter <B>MultiIn</B>, since it will be adapting two input sequences to behave as a single input sequence.</p>
<p>Let&#146;s assume that we&#146;d like to iterate through a supersequence defined by, potentially, two different types of input iterator. As with the <B>MultiOut</B> iterator adapter we designed in the previous installment of this column, we arbitrarily define the value type to be that of the first template argument. Note that, unlike the corresponding case in <B>MultiOut</B>, there really is no opportunity for conversion between the value types of <B>In1</B> and <B>In2</B>. This is because the sequence element to which an input iterator refers may be read, and this is accomplished by returning a reference to the sequence element when the iterator is dereferenced with <B>operator *</B>.</p>

<pre>
template &lt;typename In1, typename In2&gt;
class MultiIn : public std::iterator&lt;
    std::input_iterator_tag, // category
                             // is input
    typename
std::iterator_traits&lt;In1&gt;::value_type,
    ptrdiff_t&gt; { //...
</pre>

<p>What about the iterator category? Wouldn&#146;t it be nice if <B>MultiIn</B> were a forward iterator if possible? It would <a href="#1">[1]</a>.</p>

<pre>
template &lt;typename In1, typename In2&gt;
class MultiIn : public std::iterator&lt;
    // category depends...
    typename BothFor&lt;In1,In2&gt;::Result,
    typename
std::iterator_traits&lt;In1&gt;::value_type,
    ptrdiff_t&gt; { //...
</pre>

<H3><FONT COLOR="#000080">Compile-Time Questions and Template Metaprogramming</FONT></H3>

<p>Much of what is considered &#147;advanced&#148; generic programming has the undeserved reputation of being difficult <a href="#2">[2]</a>. However, there are many simple generic-programming techniques that can be used to make our code more flexible without increasing its complexity. Consider the situation when you&#146;d like to say, &#147;If the following condition is true, then the type is <B>A</B>; otherwise it&#146;s <B>B</B>.&#148; This is easy to accomplish with class template partial specialization.</p>

<pre>
template &lt;bool cond, typename A, 
          typename B&gt;
struct Select {
    typedef A Result;
};
template &lt;typename A, typename B&gt;
struct Select&lt;false, A, B&gt; {
    typedef B Result;
};
</pre>

<p>For example, we can select the type of a variable based on compile-time arithmetic <a href="#3">[3]</a>.</p>

<pre>
const Select&lt;__LINE__&lt;=CHAR_MAX,char,
    long&gt;::Result
    curLine = __LINE__;
</pre>

<p>An expansion of the <B>Select</B> template evaluates a condition at compile time and then instantiates one of two versions of the template depending on the Boolean result of the expression. It&#146;s a compile-time if-statement that says, &#147;If the condition is true, the nested <B>Result</B> type is <B>A</B>; otherwise it&#146;s <B>B</B>.&#148;</p>
<p>We can use simple building blocks like this to perform what is often referred to as &#147;template metaprogramming&#148;: using templates to perform calculation, control flow, and type selection at compile time. In the case of <B>MultiIn</B>, we want to determine whether both <B>In1</B> and <B>In2</B> are forward iterators, and if so, to set the iterator category for <B>MultiIn</B> to be <B>std::forward_iterator_tag</B> rather than <B>std::input_iterator_tag</B>.</p>

<pre>
template &lt;typename In&gt;
struct IsFor {
    enum { isfor = Conversion&lt;
        typename
std::iterator_traits&lt;In&gt;
    ::iterator_category,
std::forward_iterator_tag&gt;::exists };
    typedef Select&lt;isfor,
        std::forward_iterator_tag,
        std::input_iterator_tag&gt;::Result
    Result;
};
template &lt;typename In1, typename In2&gt;
struct BothFor {
    enum { result = IsFor&lt;In1&gt;::isfor &amp;&amp;
    IsFor&lt;In2&gt;::isfor };
    typedef Select&lt;result,
        std::forward_iterator_tag,
        std::input_iterator_tag&gt;::Result
    Result;
};
</pre>

<H3><FONT COLOR="#000080">Implementing MultiIn</FONT></H3>

<p>The most straightforward way to represent a pair of sequences is as a pair of sequences. However, it is not necessarily possible to distinguish the end of one sequence from the end of another. For example, a sequence obtained from a node-based container like <B>std::list</B> might implement the end value of any sequence that is not part of a larger sequence as a null pointer to a node. A more effective approach is to maintain a flag to indicate in which sequence the iterator is currently resident. We also don&#146;t care about the end value of the second sequence, unless we&#146;re constructing an end value for the <B>MultiIn</B> itself, but we must record an end value for the first sequence in order to recognize when it&#146;s time to proceed to the second.</p>

<pre>
template &lt;typename In1, typename In2&gt;
class MultiIn : public std::iterator&lt;
    typename BothFor&lt;In1,In2&gt;::Result,
    typename
std::iterator_traits&lt;In1&gt;::value_type,
    ptrdiff_t&gt; {
    //...
    MultiIn( In1 b1, In1 e1, In2 b2 )
        : c1_(b1), e1_(e1), c2_(b2),
          first_(b1!=e1) {}
    MultiIn( In1 e1, In2 e2 )
        : c1_(e1), e1_(e1), c2_(e2),
          first_(false) {}
    MultiIn()
        {}
    //...
    In1 c1_; // first
    In1 e1_; // end of first
    In2 c2_; // second
    bool first_; // in first sequence?
};
</pre>

<p>The first constructor is used to create <B>MultiIn</B> from two input sequences, whereas the second constructor is used to create an end value for the <B>MultiIn</B> sequence itself. This is a rather clunky and anti-intuitive interface. We&#146;ll look at this problem and try to improve the situation a bit later.</p>
<p>Implementing increment is straightforward <a href="#4">[4]</a>.</p>

<pre>
MultiIn &amp;operator ++() {
    if( first_ ) {
        if( ++c1_ == e1_ )
            first_ = false;
    }
    else
        ++c2_;
    return *this;
}
MultiIn operator ++( int ) {
    MultiIn tmp( *this );
    ++*this;
    return tmp;
}
</pre>

<p>The implementation of the dereference operators is a little more nuanced. A first attempt might simply return the <B>value_type</B> of the sequence.</p>

<pre>
typedef typename
std::iterator_traits&lt;In1&gt;
    ::value_type value_type;
value_type &amp;operator *() const {
    if( first_ )
        return *c1_;
    else
        return *c2_;
}
value_type *operator -&gt;() const
    { return &amp;operator *(); }
</pre>

<p>However, the return value for these operators may have to vary depending on whether one of <B>In1</B> or <B>In2</B> is a &#147;pure&#148; input iterator, like an <B>istream_iterator</B>, rather than an input iterator that is also a forward iterator and can therefore be written, like a <B>list::iterator</B>. In that case, the return value of <B>In1::operator *</B> or <B>In2::operator *</B> will be <B>const value_type &amp;</B>, rather than simply <B>value_type &amp;</B>; this should be reflected in the return value of <B>MultiIn::operator *</B>. We can accomplish this with a little more compile-time type selection <a href="#5">[5]</a>.</p>

<pre>
typedef typename
    Select&lt;BothFor&lt;In1,In2&gt;::result,
        value_type &amp;, 
const value_type &amp;&gt;
        ::Result R;
R operator *();
typedef typename
    Select&lt;BothFor&lt;In1,In2&gt;::result,
        value_type *, 
const value_type *&gt;
        ::Result P;
P operator -&gt;();
</pre>

<H3><FONT COLOR="#000080">Compile-Time Conditionals and Selective Instantiation</FONT></H3>

<p>Our first problem occurs with the implementation of the equality operators. The implementation of <B>operator ==</B> is fundamentally different depending on whether <B>In1</B> and <B>In2</B> are the same type or not. If they are the same type, then the following implementation is legal:</p>

<pre>
bool operator ==( const MultiIn &amp;that )
    const {
    // if In1 is same type as In2
    In1 i1( first_ ? c1_ : c2_ );
    In1 i2( that.first_ ? that.c1_ :
    that.c2_ );
    return i1 == i2;
}
</pre>

<p>If the types are different, a somewhat more complex implementation is required:</p>

<pre>
bool operator ==( const MultiIn &amp;that )
    const {
    // if In1 is different type from In2
    if( first_ )
        if( that.first_ )
            return c1_ == that.c1_;
        else
            return false;
    else
        if( that.first_ )
            return false;
        else
            return c2_ == that.c2_;
}
</pre>

<p>Note that the first version of <B>operator ==</B> is illegal if <B>In1</B> is different from <B>In2</B>. The second version will compile, but is incorrect for the case where <B>In1</B> is the same as <B>In2</B>, because it is optimized with the assumption that <B>In1</B> is a different type from <B>In2</B> and can therefore avoid a direct comparison of the iterators in two of the four cases. It could be modified to handle the case where <B>In1</B> and <B>In2</B> are the same type, but that would penalize instantiations where the types differ. It&#146;s the moral equivalent of a type-based conditional executed at run time and is just not done. To avoid the run-time type-based conditional, we&#146;ll execute the conditional code at compile time.</p>

<pre>
struct Yes {};
struct No {};
template &lt;typename A, typename B&gt;
struct IsSame {
   enum { is_same = false };
   typedef No Result;
};
template &lt;typename A&gt;
struct IsSame&lt;A,A&gt; {
   enum { is_same = true };
   typedef Yes Result;
};
</pre>

<p>Here we have another use of class template partial specialization for implementing a compile-time conditional <a href="#6">[6]</a>. We&#146;ll use the conditional to select the appropriate implementation of <B>operator ==</B> through the use of overload resolution.</p>

<pre>
bool compare( const MultiIn &amp;that, Yes )
    const {
    // if In1 is same type as In2
    //...
}
bool compare( const MultiIn &amp;that, No )
    const {
    // if In1 is different type from In2
    //...
}
bool operator ==( const MultiIn &amp;that )
    const
    { return compare( that,
    IsSame&lt;In1,In2&gt;::Result() ); }
</pre>

<p>This is a version of the same trick we used in an earlier installment of this column to choose among sorting algorithms based on iterator category <a href="#7">[7]</a>. In this case, we&#146;re selecting the implementation of <B>operator ==</B> based on whether or not <B>In1</B> and <B>In2</B> are the same type. Note that only one implementation of <B>compare</B> will be called and instantiated. The uncalled version of <B>compare</B> will not be instantiated, and no compile-time error will result.</p>

<H3><FONT COLOR="#000080">Full Implementation Specialization</FONT></H3>

<p>At this point, we recognize that many other aspects of the implementation of <B>MultiIn</B> can be improved if they are special-cased according to whether <B>In1</B> and <B>In2</B> are the same type. We could continue in the same vein as we did with <B>operator ==</B>, special-casing each operation. However, if most of the implementation will differ, it makes more sense to use partial specialization on the <B>MultiIn</B> template as a whole.</p>
<p>The unspecialized version handles the general case where <B>In1</B> differs from <B>In2</B>.</p>

<pre>
template &lt;typename In1, typename In2&gt;
class MultiIn : public std::iterator&lt;
    typename BothFor&lt;In1,In2&gt;::Result,
    typename
std::iterator_traits&lt;In1&gt;::value_type,
    ptrdiff_t&gt; {
  public:
    MultiIn( In1 b1, In1 e1, In2 b2 );
    MultiIn( In1 e1, In2 e2 );
    MultiIn();
    //...
    R operator *() const;
    P operator -&gt;() const;
    MultiIn &amp;operator ++();
    MultiIn operator ++(int);
    bool operator ==( const MultiIn
    &amp;that ) const;
    bool operator !=( const MultiIn
    &amp;that ) const;
  private:
    In1 c1_, e1_;
    In2 c2_;
    bool first_;
};
</pre>

<p>The specialization handles the case where <B>In1</B> and <B>In2</B> are the same.</p>

<pre>
template &lt;class In&gt;
class MultiIn&lt;In,In&gt; 
: public std::iterator&lt;
    typename IsFor&lt;In&gt;::Result,
    typename
std::iterator_traits&lt;In&gt;::value_type,
    ptrdiff_t&gt; {
  public:
    typedef typename
    std::iterator_traits&lt;In&gt;
        ::value_type value_type;
    MultiIn( In b1, In e1, In b2 )
        : c_(b1), e1_(e1), b2_(b2),
    first_(b1 != e1)
        { if( !first_ ) c_ = b2; }
    MultiIn( In e1, In e2 )
        : c_(e2), e1_(e1), b2_(e2),
    first_(false) {}
    MultiIn()
        {}
    //...
    R operator *() const;
    P operator -&gt;() const;
    MultiIn &amp;operator ++();
    MultiIn operator ++(int);
    bool operator ==( const MultiIn
    &amp;that ) const;
    bool operator !=( const MultiIn
    &amp;that ) const;
  private:
    In c_, e1_, b2_;
    bool first_;
};
</pre>

<p>Another advantage of specialization is that it allows us to change the actual content of the template rather than simply select among different versions of operations. In this case, choosing a different set of data members allows us to simplify a number of other operations in addition to <B>operator ==</B>.</p>

<pre>
value_type &amp;operator *() const
    { return *c_; }

MultiIn &amp;operator ++() {
    ++c_;
    if( first_ &amp;&amp; c_ == e1_ ) {
        c_ = b2_;
        first_ = false;
    }
    return *this;
}
bool operator ==( const MultiIn &amp;that )
    const
    { return c_ == that.c_; }
</pre>

<H3><FONT COLOR="#000080">Cascading Helpers</FONT></H3>

<p>As we noted earlier, the interface for creating <B>MultiIn</B>s is less than ideal.</p>

<pre>
MultiIn&lt;deque&lt;int&gt;::iterator,
    list&lt;int&gt;::iterator&gt;
mibegin( aDeque.begin(), aDeque.end(),
    aList.begin() );
MultiIn&lt;deque&lt;int&gt;::iterator,
    list&lt;int&gt;::iterator&gt;
miend( aDeque.end(), aList.end() );
</pre>

<p>To simplify things for our users, we&#146;ll provide helper functions to deal with common cases. The following helpers can be used to generate <B>MultiIn</B>s for the beginning and ending of supersequences extracted from pairs of STL-compliant containers.</p>

<pre>
template &lt;class C1, class C2&gt;
MultiIn&lt;typename C1::iterator,typename
    C2::iterator&gt;
multiIn( C1 &amp;c1, C2 &amp;c2 ) {
    typedef typename C1::iterator I1;
    typedef typename C2::iterator I2;
    return MultiIn&lt;I1,I2&gt;( c1.begin(),
    c1.end(), c2.begin() );
}

template &lt;class C1, class C2&gt;
MultiIn&lt;typename C1::iterator,typename
    C2::iterator&gt;
multiInEnd( C1 &amp;c1, C2 &amp;c2 ) {
    typedef typename C1::iterator I1;
    typedef typename C2::iterator I2;
    return MultiIn&lt;I1,I2&gt;( c1.end(),
    c2.end() );
}
</pre>

<p>Since <B>MultiIn</B> is an input iterator, and perhaps a forward iterator as well, it can be cascaded to provide traversal over an unbounded number of sequences. Helpers are a help here as well.</p>

<pre>
template &lt;class C1, class C2, class C3&gt;
MultiIn&lt; typename C1::iterator,
         MultiIn&lt; typename C2::iterator,
            typename C3::iterator&gt; &gt;
multiIn( C1 &amp;c1, C2 &amp;c2, C3 &amp;c3 ) {
    typedef typename C1::iterator I1;
    typedef typename C2::iterator I2;
    typedef typename C3::iterator I3;

    return MultiIn&lt; I1, MultiIn&lt;I2,I3&gt; &gt;
        (
            c1.begin(),
            c1.end(),
            multiIn( c2, c3 )
        );
}
</pre>

<H3><FONT COLOR="#000080">Manipulating Supersequences with MultiIn </FONT></H3>

<p>Now we can, finally, do some serious work with supersequences. For example, we can <B>bubblesort</B> a supersequence constructed from two <B>deque</B>s and a <B>list</B>.</p>

<pre>
deque&lt;E&gt; d1;
list&lt;E&gt; l1;
deque&lt;E&gt; d2;
//...
bubblesort( multiIn( d1, l1, d2 ), multiInEnd( d1, l1, d2 ) );
copy( multiIn( d1, l1, d2 ), multiInEnd( d1, l1, d2 ),
    ostream_iterator&lt;E&gt;( cout, " " ) );
</pre>

<p>At the end of the sort operation, we&#146;ll find the original sequences of objects in their respective containers, but their values will have been configured into sorted order. Note that this is a different operation with a potentially very different result from concatenating the component sequences into a single sequence before sorting.</p>

<pre>
cout &lt;&lt; "\nSTART: ";
copy(d1.begin(), d1.end(), ostream_iterator&lt;E&gt;( cout, " " ) );
cout &lt;&lt; "\nMIDDLE: ";
copy(l1.begin(), l1.end(), ostream_iterator&lt;E&gt;( cout, " " ) );
cout &lt;&lt; "\nEND: ";
copy(d2.begin(), d2.end(), ostream_iterator&lt;E&gt;( cout, " " ) );
cout &lt;&lt; endl;
</pre>

<H3><FONT COLOR="#000080">Uncommonly Useful Techniques</FONT></H3>

<p><B>MultiIn</B> is not likely to be as commonly useful as other iterator adapters, but the techniques used in its implementation could and should be commonly used. Often, a little template metaprogramming can go a long way toward making components both flexible and efficient. In the case of our implementation of <B>MultiIn</B>, we were able to examine the characteristics of its initializing iterators at compile time and configure the implementation appropriately. We achieved maximal flexibility and efficiency using compile-time metaprogramming, based on information available in the precise context of each <B>MultiIn</B>&#146;s instantiation.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  We are now entering into the realm of class template partial specialization, which is, tragically and inexcusably, not universally supported. It would also be nice if <B>MultiIn</B> supported the other iterator categories and a proper <B>difference_type</B> rather than assume it&#146;s <B>ptrdiff_t</B>. This is certainly possible, but we don&#146;t have the space here to examine such an involved implementation.</p>
<p><a name="2"></a>[2]  This misconception is largely due to the efforts of Andrei Alexandrescu and his <I>Modern C++ Design</I> (Addison Wesley, 2001). Joke. The implementation of <B>Select</B> is adapted from Chapter 2 of <I>Modern C++ Design</I>, where the curious reader may find an implementation of the <B>Conversion</B> template used later in this section.</p>
<p><a name="3"></a>[3]  This is one of the few examples where formatting is directly related to the correctness of a program. This code has a bug.</p>
<p><a name="4"></a>[4]  Note that, for brevity and presumably for clarity, I&#146;ve omitted the enclosing class template definitions for template member functions.</p>
<p><a name="5"></a>[5]  However, the reader may very likely find that the compiler is not up to the task! In fact, the code presented here should really be written more simply:</p>

<pre>
typedef typename
    Select&lt;BothFor&lt;In1,In2&gt;::result,
        value_type, const value_type&gt;
        ::Result R;
R &amp;operator *();
R *operator -&gt;();
</pre>

<p>But some otherwise reliable compilers balked at this version. This is one of the problems of being on the bleeding edge, but we can expect most platforms will be able to translate code like this in the &#147;near&#148; future.</p>
<p><a name="6"></a>[6]  The functionality of the <B>IsSame</B> template is subsumed by that of the <B>Conversion</B> template, but the <B>IsSame</B> implementation is instructive in that it shows how simple a metaprogramming solution can be.</p>
<p><a name="7"></a>[7]  S. C. Dewhurst. &#147;Common Knowledge: Conventional Generic Algorithms,&#148; <I>C/C++ Users Journal</I>, December 2001.</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
