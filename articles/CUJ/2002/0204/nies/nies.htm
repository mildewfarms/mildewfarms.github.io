<HTML>   
     <HEAD>
<TITLE>April 2002/Tracing Exceptions with an Exception Stack</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   Testing &amp; Debugging</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Tracing Exceptions with an Exception Stack</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Richard Nies</FONT></H3>

<BLOCKQUOTE>
<p>Ever wonder what happened to that lost exception? Traceable exceptions to the rescue!</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">An Exceptional Problem</FONT></H3>

<p>Writing highly reusable software components within a framework often requires deferring the logging of errors and exceptions to the higher application-specific levels of a program. However, the quest for reusability in production systems is often at odds with the critical need for error tracing. This is especially true with exception handling. A framework of reusable components can bubble up an exception for an application to log and handle, but the important information regarding the exception origin point and handling path are usually unknown. This is further complicated by the fact that the original exception may be lost if, during the exception&#146;s ascent, it is filtered by being caught and then re-thrown as another exception type.</p>

<H3><FONT COLOR="#000080">A Traceable Solution</FONT></H3>

<p><I>Traceable</I> exceptions can solve these problems. Traceable exceptions are exceptions that carry information about the &#147;throw&#148; locations and exception types in the form of an exception information <I>stack</I>. An exception information stack can be viewed much like a stack dump received through a debugger when viewing a core file. The difference is that the exception stack contains a data entry for each point in the exception handling propagation where the exception is created, thrown, and re-thrown.</p>

<H3><FONT COLOR="#000080">Benefits</FONT></H3>

<p>The power behind combining exception handling with a stack construct can be exploited for a variety of benefits:</p>

<UL><LI>   The original exception type is identifiable along with the file, method, and line number where it was declared. Each handling point where the exception is caught and re-thrown is also preserved providing the propagation trace path.</LI>
<LI>   If the original exception is filtered into a different exception type, the exception stack is passed on to the filtered exception. This allows trace information to be preserved across exception type changes during exception ascent.</LI>
<LI>   Applications can delay the logging of exception events until higher application-specific processing levels. This strengthens the ability to write reusable software components that don&#146;t burden the user with a preconceived logging approach.</LI>
<LI>   The stack construct allows the reporting and processing of the exception data to operate on the entire exception stack as one package of information at one point in the program. This allows the reporting point to easily maintain the correlation of the different exception entries with a single exceptional event. This also provides performance benefits as reporting occurs at one point instead of at each stage in the exception ascent as in traditional logging.</LI>
<LI>   Third party exceptions, such as CORBA exceptions, can be handled generically while the exception is propagating up through intermediate exception neutral components. Then the original exception can be recreated and thrown at a higher level (such as at a CORBA interface). An example of this type of exception recovery using CORBA system exceptions will be discussed later in this article.</LI></UL>

<H3><FONT COLOR="#000080">Traceable Exception Architecture</FONT></H3>

<p><a href="fig1.htm">Figure 1</a> shows some of the top branches of a sample traceable exception class hierarchy. All traceable exceptions ultimately derive from the <B>CommonExcep</B> base class. This base class provides the internal implementation for the exception stack and the corresponding exploitation methods that are inherited by all derived exception classes.</p>

<H3><FONT COLOR="#000080">CommonExcep and ExcepInfo Classes</FONT></H3>

<p>The <B>CommonExcep</B> base class and the <B>ExcepInfo</B> class are the key components of the traceable exception architecture. <a href="list1.htm">Listing 1</a> shows these classes&#146; significant elements.</p>
<p>The <B>CommonExcep</B> class contains the internal STL container for exception information storage. Although a stack is the best logical view of this information, an STL deque (which is a variation of a queue) is the actual implementation container used. A deque allows easy access to the original exception from the bottom of the stack without unloading the rest of the stack&#146;s contents. (Referring to a deque as a stack may at first seem like a deception, or worse a mistake, but I have found that talking about an &#147;exception deque&#148; often produces no recognition of the tracing concept, while referring to an &#147;exception stack&#148; draws an immediate association with a calling stack and a common understanding of its purpose.)</p>
<p>Each entry in the stack is an instance of the <B>ExcepInfo</B> class. <B>ExcepInfo</B> represents an <I>information reference point</I> to where an exception is handled (i.e., created, thrown, or re-thrown). It is a container class composed of the following reference information:</p>

<OL><LI>An identifier string that uniquely identifies the exception. This identifier is returned by each derived exception class via its overloaded <B>id</B> method inherited from the <B>CommonExcep</B> class.</LI>
<LI>The filename and method name strings along with the integer line number for identifying the specific point where the exception was created, thrown, or re-thrown.</LI>
<LI>An optional error-message string to describe additional details of the exceptional condition.</LI>
<LI>An optional integer-based error code field.</LI>
<LI>An optional sub-identifier string that can be used in conjunction with the identifier to control exception class explosion when wrapping third-party exceptions. This field allows a single more generic exception identifier to carry a more specific sub-type of exception. It is provided for pragmatic reasons, and its usage is discussed later in this article.</LI></OL>

<p>The three most important <B>CommonExcep</B> methods used in the generation and tracing of exceptions are the protected <B>CommonExcep</B> constructor, the public <B>push</B> method, and the <B>importPrior</B> method.</p>
<p>The <B>CommonExcep</B> protected constructor accepts a derived exception&#146;s unique identifier string along with the required arguments specifying the filename, method name, and line number for the exception&#146;s creation point. It also accepts the optional arguments consisting of the error message, error code, and sub-identifier. The constructor uses this data to construct an <B>ExcepInfo</B> object, which becomes the first entry pushed on its internal stack. A derived exception&#146;s constructor simply calls this protected constructor passing in its unique identifier and all the required and optional arguments.</p>
<p>The <B>push</B> method is called on an exception object from within a catch block. The <B>push</B> method also accepts the required arguments of filename, method name, and line number, which indicate the location where the exception is being handled. This <B>push</B> method creates another <B>ExcepInfo</B> object and pushes it on the internal exception stack. Following this, the exception object may be re-thrown.</p>
<p>The <B>importPrior</B> method imports the exception stack from one exception object to another. It is used primarily during exception filtering when an exception of one type is caught, but another exception type is created and thrown from the catch block. The <B>importPrior</B> method is called on the newly declared exception object, and the caught exception object is supplied as the primary argument. As a result, the caught exception stack entries are copied over to the new exception&#146;s stack in the original sequence and stack position. This allows the original exception stack information to be preserved during exception redefinition and filtering.</p>

<H3><FONT COLOR="#000080">Simple Usage Example</FONT></H3>

<p>Using traceable exceptions is very easy. Let&#146;s assume that the <B>doWork</B> method from a <B>WidgetA</B> class is designed to detect a specific error condition and to throw an <B>InvalidDataExcep</B> exception as a result. <a href="list2.htm">Listing 2</a> shows this method declaring an <B>InvalidDataExcep</B> object and throwing it.</p>
<p><a href="list2.htm">Listing 2</a> also shows the <B>WidgetB</B> class <B>startWork</B> method that calls the <B>doWork</B> method on a <B>WidgetA</B> object. To propagate the <B>InvalidDataExcep</B> object, the <B>WidgetB</B> class simply calls the <B>push</B> method on the caught exception and re-throws it.</p>
<p>In addition, <a href="list2.htm">Listing 2</a> shows an application-level method catching all traceable exceptions and, in this case, simply logging them.</p>
<p><a href="fig2.htm">Figure 2</a> shows a raw stack dump of the trace information that would result from the <B>WidgetA</B> <B>doWork</B> method throwing an <B>InvalidDataExcep</B> exception. The output shows the original exception entry first followed by subsequent entries. The exception origin point and the propagation path are clearly shown.</p>

<H3><FONT COLOR="#000080">Usage Considerations</FONT></H3>

<p>There are several exception handling considerations to discuss from this example. The <B>WidgetA</B> <B>doWork</B> method employs a very specific exception-handling approach. This method first catches third-party specific exceptions, which it converts to traceable exception types and throws. Next, it catches the expected specific <B>InvalidDataExcep</B> exception and simply re-throws it (since it was created locally and already contains the required trace information). Finally, unexpected exceptions are caught and handled.</p>
<p>It is possible to have a more generic approach to a method&#146;s catch blocks, which is the approach taken by the <B>WidgetB</B> <B>startWork</B> method. This method also converts third-party exceptions to traceable exception equivalents that it throws. Then, it simply catches all <B>CommonExcep</B>-derived exceptions in a single catch clause, pushes its handling point trace information onto the caught exceptions, and then rethrows them. C++ preserves the original derived exception type even though the base class is referenced in the catch clause. This catch clause ensures that no traceable exception leaves the method without being traced.</p>
<p>In fact, if the <B>WidgetA</B> <B>doWork</B> adopted the generic exception-handling approach, the <B>InvalidDataExcep</B> catch clause (and any other specific traceable exception catch clauses) would be replaced by the single catch clause specifying the <B>CommonExcep</B> base class. One item worth noting with this modification to the <B>doWork</B> method: since both the construction of an exception and the <B>push</B> method create an <B>ExcepInfo</B> entry on the exception stack, there would be two entries for the <B>InvalidDataConfig</B> exception from the originating <B>doWork</B> method. This second stack entry from the originating method is redundant. To address this, the <B>push</B> method always checks the previous stack entry to see if the filename and method name match the previous entry on the stack. If so, the <B>push</B> method does not create a new stack entry but simply returns. The validity of this lies in the fact that the real area of interest for tracing an exception is its method entry point. An exception&#146;s entry point is either its creation point for exceptions generated within the method, or the first catch block of the method that encounters an outside exception.</p>
<p>There is a tradeoff for unexpected exceptions. Unexpected exceptions can be thrown as received, so as not to interfere with the possibility of a higher-level component recognizing and handling the exception. However, it should be noted that doing so will result in a break in traceability for this component for unknown exceptions. Alternatively, the exception can be filtered into a traceable <B>UnknownExcep</B> object, which is thrown.</p>

<H3><FONT COLOR="#000080">Creating Traceable Exceptions</FONT></H3>

<p>The traceable exception classes shown in <a href="fig1.htm">Figure 1</a> are just the starting point for defining a traceable exception hierarchy. The derived traceable exceptions can be extremely thin classes whose main purpose is to provide a unique type through their class definition. For this type of exception, the derived class simply needs to provide three methods.</p>

<OL><LI>A public constructor.</LI>
<LI>An overloaded <B>id</B> method to return its unique exception string identifier.</LI>
<LI>A protected constructor for its own derived classes to call that can be chained up through the hierarchy to invoke the <B>CustomExcep</B> protected constructor.</LI></OL>

<p>Derived exceptions may also extend the minimal <B>CommonExcep</B> base class by adding more specific exception information and specialized methods. An example of this is the <B>CorbaSystemExcep</B> class shown in <a href="fig1.htm">Figure 1</a>. It adds a <B>throwCorba</B> public method and some internal data members that specify a CORBA minor code and completion status.</p>
<p>Different methods may be employed to produce a unique exception string identifier required by the <B>id</B> method. The simplest method is to return the class name of the exception (which should include a namespace qualifier). This could be generated by coding the identifier string into the class method, or by the more sophisticated technique of using the C++ RTTI (Run-Time Type Information) to retrieve the unique class name. The RTTI method has the advantage of ensuring that there will be no mistaken identifier name clashes.</p>

<H3><FONT COLOR="#000080">Wrapping Third-Party Exceptions</FONT></H3>

<p>Tracing is available only within <B>CommonExcep</B>-derived exception classes. Because of this, third-party exceptions need to be translated into traceable exception counterparts in order to trace them. At first, this may seem like a daunting task. In reality, it is not as hard as it sounds. There are three different techniques that can be used to accomplish this.</p>

<OL><LI>Create individual traceable exception counterparts for all specific third-party exceptions that are actually encountered through interfacing with the third-party software.</LI>
<LI>Create a single broader traceable exception to provide traceability for a group of third-party exception types and use the exception&#146;s sub-identifier field for distinction between individual third-party exception types within the group.</LI>
<LI>Use a combination of the first and second techniques where appropriate.</LI></OL>

<p>The first technique for creating individual traceable exception counterparts is the most robust method (and the purer object-oriented approach). Each of the third-party exceptions can still be easily distinguished and handled individually if needed based on the traceable exception type. The main drawback is that there may be a significant number of third-party exceptions to wrap.</p>
<p>The second technique defines a single base traceable exception that represents a group of related third-party exceptions. This single base traceable exception would still have a unique identifier for the exception group. The sub-identifier field is then used to capture the unique third-party exception identifier actually being thrown within the group. The benefit is that a traceable exception class explosion can be mitigated. The main disadvantage with this approach is that the ability to easily distinguish between the individual third-party exception types is compromised (although still possible by looking at the sub-identifer field). Also, any unique individual exception information will be lost as the exception is reduced to a sub-identifier string.</p>
<p>The third technique is a combination of the first two techniques. In this approach, a single base traceable exception is defined that represents a particular group of related exceptions. Specific traceable exception counterparts are then derived as needed from the created base exception where the framework requires the third-party exception distinction. This technique can allow minimal work to initially wrap a set of third-party exceptions, but can grow to encompass the evolving needs for type distinction. The maximum benefit for this approach hinges on how well the initial hierarchy breakdown is done and the real degree and rate of evolution it must ultimately endure. (Of course, this really applies to building anything in software!)</p>

<H3><FONT COLOR="#000080">CORBA Example</FONT></H3>

<p>The traceable exception architecture in <a href="fig1.htm">Figure 1</a> shows a limited example of the third technique discussed for wrapping CORBA third-party exceptions. The traceable <B>CorbaExcep</B> base class is used to generalize all CORBA exceptions. Deriving from this initial base class are two more specific traceable base classes that segregate CORBA system exceptions from CORBA user exceptions.</p>
<p>In a particular framework, it might be reasonable to initially expect the need for only a few derived exception types under the <B>CorbaSystemExcep</B> class. This design decision might be supported on the basis that the framework being built only needs to distinguish between a subset of important CORBA system exceptions. All others could be represented by the more generalized <B>CorbaSystemExcep</B> class.</p>
<p>On the other hand, the designers might expect to create individual traceable exception classes derived from the <B>CorbaUserExcep</B> class for all the CORBA user exceptions defined in the framework&#146;s IDL interfaces. Since the framework IDL is defining the specific CORBA user exceptions, it is reasonable to expect that the framework will need to distinguish between the types in handling them.</p>

<H3><FONT COLOR="#000080">Third-Party Exception Recovery</FONT></H3>

<p>In many cases, it is possible for a traceable exception to retain enough information to recreate the corresponding original third-party exception. This can be a very useful feature.</p>
<p>The <B>CorbaSystemExcep</B> class shown in <a href="fig1.htm">Figure 1</a> illustrates this capability. This class includes two additional member variables that represent the CORBA standard &#147;minor code&#148; and &#147;completion status&#148; for a CORBA system exception. It also adds a <B>throwCorba</B> method to its public interface. The two additional member variables allow the original CORBA system exception to be reconstructed according to the CORBA standard. This is done via a call to the <B>throwCorba</B> method, which recreates the original CORBA system exception and then throws it.</p>
<p>There are many ways to take advantage of the recoverable <B>CorbaSystemExcep</B> class. Framework components can bubble up a <B>CorbaSystemExcep</B> traceable exception (via the <B>CommonExcep</B> catch clause) without any specific CORBA &#147;awareness.&#148; However, a top-level CORBA interface method can specifically catch the <B>CorbaSystemExcep</B> object, recreate the original CORBA system exception, and throw it across the CORBA interface by simply calling the <B>throwCorba</B> method on the exception object. The original exception is recovered while still preserving the ability to trace the exception origin point and propagation path.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Traceable exceptions are most effective when the software trace coverage is maximized. Towards this goal, every possible method should minimally have a default outer try/catch block with a <B>CommonExcep</B> catch clause that invokes the <B>push</B> method.</p>
<p>Traceable exceptions are not complicated structures, but I have found them to be enormously beneficial in preserving the critical error-tracking information required for exceptional conditions in large-scale production systems. Not only do they prove more robust than traditional exception logging approaches, but they also promote the generation of reusable components and frameworks by allowing cohesive application-level trace reporting and generic exception handling.</p>

<p><i><B>Richard Nies</B> is currently a lead software developer/architect for Harris Corp. He has worked for the last 17 years developing software products including large-scale C++ production systems involving: weather analysis, high-speed data delivery, embedded real-time communication, image processing and exploitation, and client/sever information access. He has a MSCS from Louisiana Tech University. He can be reached at <B>rnies@harris.com</B>.</i></p>

<h4><a href="../../../source/2002/apr02/nies.zip"></a></h4>
</blockquote></body></html>
