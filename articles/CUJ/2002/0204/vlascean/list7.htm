<HTML><HEAD>
<TITLE>April 2002/Debugging Memory Errors with Custom Allocators/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7: Implementation of allocator with member functions allocate and deallocate</A></h4>
<pre>
template&lt;class T&gt;
class Allocator : public BaseAllocator
{
public:
    typedef size_t     size_type;
    typedef T*         pointer;
    typedef const T*   const_pointer;

     // more type definitions and methods
     // required by proper working with
     // STL containers not shown here

    pointer allocate(size_type n, const_pointer = 0)
    {
        const size_type size =
            calcMemSize(n, sizeof(T));

        void* ptr = STLMemDebug::allocate(size);
        // register the newly allocated block
        // with the memory manager object
        getMemMgr().insert(ptr, size);
        return reinterpret_cast&lt;pointer&gt;(ptr);
    }

    // Deallocate n elements at address p
    void deallocate(pointer p, size_type n)
    {
        const size_type size =
            calcMemSize(n, sizeof(T));

        // remove memory block starting at
        // 'p' and of size 'size' from
        // the memory manager's internal
        // list of allocated block
        getMemMgr().erase(p, size);
        STLMemDebug::deallocate(p, size);
    }
};
&#151; End of Listing &#151;</pre></body></html>
