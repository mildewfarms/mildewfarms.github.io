<HTML><HEAD>
<TITLE>April 2002/Debugging Memory Errors with Custom Allocators/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: A memory corruption example with a data structure that has a non-contiguous memory layout</A></h4>
<pre>
typedef map&lt;int, string&gt; MapType;

// This function corrupts the memory
void offender(const void* ptr)
{
    const char trash[] = "TRASH THE MEMORY";
    ::memcpy(const_cast&lt;void*&gt;(ptr), trash, sizeof(trash));
}

// Prints map element. Although the code
// is correct, the function may crash when
// invoked from the main program
void printElem(const MapType&amp; m, int i)
{
    MapType::const_iterator iter(m.find(i));

    if (iter != m.end())
        cout &lt;&lt; iter-&gt;second &lt;&lt; endl;
    else
        cout &lt;&lt; "element not found" &lt;&lt; endl;
}

int main()
{
    MapType m;

    // Initialize the map
    m.insert(MapType::value_type(1, "one"));
    m.insert(MapType::value_type(2, "two"));

    offender(&amp;(m.find(1)-&gt;second));
    printElem(m, 1);

    return 0;
}
&#151; End of Listing &#151;</pre></body></html>
