<HTML><HEAD>
<TITLE>April 2002/Debugging Memory Errors with Custom Allocators/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: Streamlined implementation of allocate and deallocate</A></h4>
<pre>
namespace STLMemDebug
{

void* allocate(size_t size)
{
    void *pv = 0;

#if defined(WIN32)

    pv = ::VirtualAlloc(0, size, MEM_COMMIT, PAGE_READWRITE);

#elif defined(UNIX)

    // allocate memory aligned to a page boundary
    pv = ::pvalloc(size);
#endif // UNIX

    if (pv == 0)
    {
        throw std::bad_alloc(); // pvalloc failed
    }

    return pv;
}


void deallocate(void* ptr, size_t size) throw()
{
#if defined(WIN32)

    ::VirtualFree(ptr, size, MEM_DECOMMIT);

#elif defined(UNIX)

    ::free(ptr);

#endif // UNIX
}
} // namespace STLMemDebug
&#151; End of Listing &#151;</pre></body></html>
