<HTML><HEAD>
<TITLE>April 2002/We Have Mail/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:	Hicks&#146; compiled code</A></h4>
<pre>
struct Thing
{
    int a,b,c;
};
std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os,
    Thing t)
{
    return os &lt;&lt; "a=" &lt;&lt; t.a &lt;&lt; ", b=" 
    &lt;&lt; t.b &lt;&lt; ", c=" &lt;&lt; t.c;
}


namespace SomeFunc_ns
{
struct disposable_ftr
{
    Thing *p;
    operator()(int x, int y)
    {
        return p[x].a&lt;p[y].a
        || (p[x].a==p[y].a
            &amp;&amp; p[x].b&lt;p[y].b)
        || (p[x].a==p[y].a
            &amp;&amp; p[x].b==p[y].b
            &amp;&amp; p[x].c&lt;p[y].c);
    }
};
}

void SomeFunc(std::ostream&amp; os)
{
    using namespace SomeFunc_ns;
    std::vector&lt;Thing&gt; lotsofthings;

    for (int a=0; a&lt;2; a++)
    for (int b=0; b&lt;2; b++)
    for (int c=0; c&lt;2; c++)
    {
        Thing t;
        t.a=1-a; t.b=b; t.c=1-c;
        lotsofthings.push_back(t);
    }

    disposable_ftr f;
    f.p = &amp;*lotsofthings.begin();

    typedef 
    std::set&lt;unsigned int, disposable_ftr&gt; Set;
    Set indexedthings(f);

    for (unsigned int n=0; 
         n&lt;lotsofthings.size(); n++)
        indexedthings.insert(n);

    os &lt;&lt; "original order" &lt;&lt; std::endl;
    for (int n=0; n&lt;lotsofthings.size(); n++)
    {
        os &lt;&lt; "[" &lt;&lt; n &lt;&lt; "] " 
           &lt;&lt; lotsofthings[n] &lt;&lt; std::endl;
    }
    os &lt;&lt; std::endl
    &lt;&lt; "index array order" &lt;&lt; std::endl;
    Set::iterator it = indexedthings.begin();
    for (int n=0; it != indexedthings.end(); 
         it++, n++)
    {
        os
        &lt;&lt;  "[" &lt;&lt; n &lt;&lt; ", " &lt;&lt; *it &lt;&lt; "] "
        &lt;&lt; lotsofthings[*it] &lt;&lt; std::endl;
    }
    os &lt;&lt; std::endl;

}
&#151; End of Listing &#151;</pre></body></html>
