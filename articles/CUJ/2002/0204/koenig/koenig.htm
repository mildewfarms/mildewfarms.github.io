<HTML>   
     <HEAD>
<TITLE>April 2002/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Plain Old Data</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>Refresh your memory on why traditional techniques for processing plain old data don't apply to objects.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Several people have recently asked us questions similar to this one: &#147;Can I use <B>memcpy</B> to copy an object of type <B>string</B>?&#148;</p>
<p>Our first impulse is to say that if you have to ask, you shouldn&#146;t be doing it &#151; because you will get in trouble if you try. Nevertheless, the concepts behind the question are interesting enough to merit a closer look.</p>
<p>Briefly, the answer is that you can use <B>memcpy</B> safely to copy an object only if the object&#146;s type is what is called a POD type, which stands for &#147;Plain Old Data.&#148; Because <B>string</B> is not a POD type, there is no guarantee that it is safe to use <B>memcpy</B> on a <B>string</B>.</p>

<H3><FONT COLOR="#000080">What memcpy Does</FONT></H3>

<p>As its name suggests, the <B>memcpy</B> function, from the C Standard library, copies memory:</p>

<pre>
void* memcpy(void* dest,
  const void* source, size_t n);
</pre>

<p>The <B>source</B> and <B>dest</B> arguments each refer to the initial byte of an <B>n</B>-byte region of memory; the two regions must not overlap. The <B>memcpy</B> function copies the memory in the <B>source</B> region to the memory in the <B>dest</B> region, obliterating whatever contents the <B>dest</B> region might have had previously. The <B>memcpy</B> function returns a copy of the <B>dest</B> pointer.</p>
<p>For example, suppose we write:</p>

<pre>
int x = 42;
int y;
memcpy(&amp;y, &amp;x, sizeof(int));
</pre>

<p>As it happens, <B>int</B> is a POD type, so it is safe to use <B>memcpy</B> on <B>int</B> objects. Accordingly, after executing these statements, <B>y</B> will have a value of <B>42</B>, just as if we had executed:</p>

<pre>
y = x;
</pre>

<p>instead of calling <B>memcpy</B>.</p>
<p>The question, then, is what will happen if we write:</p>

<pre>
string s = "Hello, world!";
string t;
memcpy(&amp;t, &amp;s, sizeof(string));
</pre>

<p>Will <B>t</B> have <B>Hello, world!</B> as its value or will the value be different? Will such a program even work at all?</p>
<p>The answer is that the program is not guaranteed to work, because <B>string</B> is not a POD type. Indeed, it is likely that this program fragment will cause a crash, as we shall see. The rest of this article explains what a POD type is and gives an idea of why memory-manipulation functions such as <B>memcpy</B> are generally safe only when applied to objects of POD type.</p>

<H3><FONT COLOR="#000080">Fundamental Types</FONT></H3>

<p>We can think of the memory in any computer that supports C++ as being composed of a collection of bytes, each of which contains an implementation-defined number of bits. All bytes contain the same number of bits. In a C++ implementation, that number must be at least eight; if the computer hardware does not support 8-bit or larger bytes, the C++ implementation must fake it in software. Most computers that support C++ have bytes that are exactly 8 bits long, but we have seen computers with bytes as long as 64 bits.</p>
<p>There are three important facts to know about bytes:</p>

<OL><LI>A byte is the smallest addressable unit of memory. That is, every region of memory that it is possible to use pointers to define comprises an integral number of bytes. Accordingly, it is possible to use a byte address (which C++ uses the <B>void*</B> type to express) and an integer (which represents an object&#146;s size) to refer to the memory that any object occupies.</LI>
<LI>Every bit in a region of memory is part of exactly one byte. In particular, there is no information that might somehow fall into the cracks between the bytes <a href="#1">[1]</a>.</LI>
<LI>The <B>sizeof</B> operator, when given an object or a type as its argument, returns the number of bytes in an object of that type. All objects of a given type are the same size, so only the type matters.</LI></OL>

<p>These three properties imply that if <B>x</B> is an object, we can use <B>((void*)&amp;x)</B> and <B>sizeof(x)</B> together to represent the memory that <B>x</B> occupies. The question, then, is whether there is any more to <B>x</B> than the contents of its memory. It is that question that the POD notion exists to address: if a type is a POD type, the implication is that there is nothing more to an object of that type than the contents of its memory.</p>
<p>The fundamental types &#151; that is, the arithmetic, enumeration, and pointer types &#151; are POD types. In other words, the value of an object of a fundamental type depends entirely on the contents of the region of memory that corresponds to that object. It follows that using <B>memcpy</B> to copy an object of a fundamental type will copy that object&#146;s value.</p>
<p>To see what&#146;s happening more clearly, let&#146;s look again at our earlier example:</p>

<pre>
int x = 42;
int y;
memcpy(&amp;y, &amp;x, sizeof(int));
</pre>

<p>Here, <B>x</B> and <B>y</B> are of fundamental type <B>(int)</B>. They are therefore of POD type, so the bytes that constitute them completely determine their values. Moreover, every object of type <B>int</B> comprises <B>sizeof(int)</B> bytes.</p>
<p>When we call <B>memcpy</B>, it copies a number of bytes given by its third argument&#151; in this case, <B>sizeof(int)</B> &#151; from the region of memory occupied by <B>x</B> to the region occupied by <B>y</B>. Accordingly, the call to <B>memcpy</B> has the same effect as executing:</p>

<pre>
y = x;
</pre>

<p>because there is nothing more to <B>x</B> or <B>y</B> than the contents of the corresponding memory.</p>

<H3><FONT COLOR="#000080">Structures</FONT></H3>

<p>Let&#146;s expand our universe by using <B>memcpy</B> to copy a structure. For example:</p>

<pre>
struct Point {
  int x, y;
};

Point p, q;
p.x = 123;
p.y = 456;
memcpy(q, p);
</pre>

<p>Will the call to <B>memcpy</B> still have the same effect as executing:</p>

<pre>
q = p;
</pre>

<p>or does the fact that <B>Point</B> is a user-defined type make <B>memcpy</B> not work?</p>
<p>The answer is that this structure is a POD type, because it is still so simple that its memory entirely determines its value, and therefore <B>memcpy</B> is safe to use in this context.</p>

<H3><FONT COLOR="#000080">Structure Assignment</FONT></H3>

<p>When we defined our <B>Point</B> structure, we did not give it an assignment operator. When we try to assign objects of such a type, the compiler treats such an assignment as being equivalent to assigning the objects&#146; data members. In other words, executing:</p>

<pre>
q = p;
</pre>

<p>has the same effect as executing:</p>

<pre>
q.x = p.x;
q.y = p.y;
</pre>

<p>Because the <B>x</B> and <B>y</B> members of <B>Point</B> are of fundamental type, we can use <B>memcpy</B> to copy those members. Accordingly, it is also safe to use <B>memcpy</B> to copy the entire object.</p>
<p>Suppose, now, that we were to redefine <B>Point</B> to include an assignment operator:</p>

<pre>
struct Point {
  int x, y;
  Point&amp; operator=(const Point&amp;);
};
</pre>

<p>We have deliberately omitted the definition of this assignment operator so that you won&#146;t be tempted to think that you know what it does. It should now be clear that defining the assignment operator for <B>Point</B> has removed the guarantee that <B>memcpy</B> is safe to use on <B>Point</B> objects, because without seeing the definition of the assignment operator, we have no way of knowing that it has the same effect as calling <B>memcpy</B>.</p>
<p>Even if we define our assignment operator to have the same effect as the compiler-generated one:</p>

<pre>
Point&amp; Point::operator=(const Point&amp; p)
{
  x = p.x;
  y = p.y;
  return *this;
}
</pre>

<p>we should no longer consider it safe to use <B>memcpy</B> to copy a <B>Point</B> object, because doing so would rely on knowledge of the inner workings of the <B>Point</B> type, and those workings might change in the future.</p>
<p>In other words, we should be able to trust <B>memcpy</B> only when we are confident that using <B>memcpy</B> to copy an object will have the same effect as the assignment operator for that object. If the object, or any of its (non-static) data members, has a user-defined assignment operator, the compiler would have to read the definition of that operator to figure out whether it has the same effect as the compiler-generated assignment operator; such figuring in general is provably beyond the reach of any program. The moment any member acquires a user-defined assignment operator, this confidence vanishes. Therefore, a type that has a user-defined assignment operator in any of its data members is not a POD.</p>

<H3><FONT COLOR="#000080">A More Precise Definition</FONT></H3>

<p>We have seen two aspects of POD types: the fundamental types are POD types, and structures with user-defined assignment operators are not POD types. Here are the rest of the details:</p>

<UL><LI>   Arithmetic types, enumeration types, and pointers (including pointers to functions and pointers to members) are POD types.</LI>
<LI>   An array is a POD type if its elements are.</LI>
<LI>   A structure or union is a POD if all of the following are true:</LI>
<UL><LI>   Every one of its non-static data members is a POD.</LI>
<LI>   It has no user-declared constructors, assignment operators, or destructor.</LI>
<LI>   It has no private or protected non-static data members.</LI>
<LI>   It has no base classes.</LI>
<LI>   It has no virtual functions.</LI></UL></UL>

<p>The idea is that a class is a POD type if it has nothing to hide about its representation. Therefore, we can be sure that the value of an object of such a type is nothing more or less than the values of its components, so that copying the object is equivalent to copying its memory.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>

<p>Let us return to our original question: Is it safe to use <B>memcpy</B> to copy a <B>string</B>? We know that the <B>string</B> class has constructors, so it is not a POD. Therefore, the answer must be no. But what happens if we try anyway? Saying that a class is not a POD is saying only that <B>memcpy</B> is not guaranteed to work. It is not necessarily guaranteed to fail either. The question is whether copying the object is equivalent to copying its memory. To answer this question for the <B>string</B> class, we need to think about how it might be implemented.</p>
<p>A plausible implementation uses the <B>string</B> object itself to store an integer that represents the <B>string</B>&#146;s length and pointer to dynamically allocated memory that contains the <B>string</B>&#146;s characters. This integer and pointer are fundamental types, so surely it must be possible to use <B>memcpy</B> to copy them, right?</p>
<p>Wrong. Here&#146;s the problem:</p>

<pre>
string s = "hello", t = "world";
memcpy(&amp;s, &amp;t, sizeof(string));
</pre>

<p>Before we call the <B>memcpy</B>, both <B>s</B> and <B>t</B> contain pointers that refer to memory somewhere:</p>

<IMG SRC="fig1.gif" width=50%>

<p>Calling <B>memcpy</B> will overwrite the pointer in <B>s</B> with a copy of the pointer in <B>t</B>. Now, both pointers will point to the same memory, and the memory holding <B>hello</B>, to which <B>s</B> formerly referred, will be inaccessible and will therefore never be freed:</p>

<IMG SRC="fig2.gif" width=50%>

<p>This program fragment will therefore leak memory. Moreover, when it comes time to destroy <B>s</B> and <B>t</B>, the effect of doing so is likely to be to try to deallocate the same memory twice, resulting in a crash.</p>
<p>This example should make it clear why the rules for defining POD types exclude types such as <B>string</B>. The moment a class author defines a constructor, destructor, or assignment operator, we can no longer be confident that copying an object of that class is equivalent to copying the object&#146;s memory.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Functions such as <B>memcpy</B>, which deal with a class object&#146;s memory directly, undercut the class author&#146;s intentions. Doing so is dangerous unless the intentions are at so low a level as to make them impossible to undercut. Such a class is called a POD (Plain Old Data) to indicate that there is nothing more to the class than its contents. The moment data abstraction enters the picture, be it through constructors, destructors, assignment operators, base classes, or virtual functions, it is time to use only the operations that the class provides, and eschew low-level operations such as <B>memcpy</B>.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>[1]  This fact is not as obvious as it sounds. For example, we have seen computers with 36-bit words in which the usual way to represent characters is to stuff five seven-bit characters into a word, with one bit per word left over. This implementation strategy fails on two counts: bytes contain fewer than eight bits, and there are bits that are not part of any byte.</p>
<p>A C++ implementation could solve the first problem by using eight-bit bytes, but that strategy would still leave unused bits in each word. Therefore, a correct solution would have to involve bytes with a size that divides evenly into 36, namely 9, 18, or 36 bits.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>
</blockquote></body></html>
