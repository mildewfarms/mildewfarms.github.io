<HTML>   
     <HEAD>
<TITLE>April 2002/Smart Pointers in Boost</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Smart Pointers in Boost</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bjorn Karlsson</FONT></H3>

<BLOCKQUOTE>
<p>Welcome to Boost, the peerless community of C++ innovators. If you can't find what you need in the Standard C++ library, chances are Boost has it production-ready.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introducing Boost</FONT></H3>

<p>According to the Boost website, Boost is &#147;a repository of free, portable, peer-reviewed C++ libraries. Boost acts as a proving ground for new libraries, particularly those that work well with the ISO C++ Standard library.&#148; But Boost is more than a collection of libraries. It is also the focus of a rapidly growing community of developers who create, use, and discuss the Boost libraries. Beyond making these excellent libraries available, Boost also offers a place to learn. The libraries are examples of solid library design in a world that seldom seems to look further than the next release. Joining the discussions on the Boost mailing list (either actively or just by listening) is a good way to improve your understanding of library design problems and solutions. Boost also provides a rapidly growing Boost-Users mailing list that focuses on questions related to using the libraries.</p>
<p>The quality and the technological standard of the Boost libraries are amazing. And the Boost portability standard ensures that when you move your code to another platform, you&#146;ll know the libraries will still work. The current release, Boost 1.25.0, consists of libraries ranging from smart pointers to regular expressions to a portable threading library. Boost currently supports 35 libraries, all of which have been thoroughly reviewed by community members. These libraries can be freely used, and many of them are being used in commercial applications.</p>
<p>Boost is one of the strongest C++ communities. Among the 2,000 members are many of the world&#146;s top C++ programmers. Members stay involved because they like working with some of the best minds in programming. They also know their efforts are bound to have an impact on the C++ community, since much of what you see in Boost is a strong candidate for inclusion in the next C++ Standard.</p>
<p>The best way to get acquainted with Boost is to tour the Boost libraries. In this article, I&#146;ll introduce you to the Boost smart pointer library <B>smart_ptr</B>. <B>smart_ptr</B> is a good example of the innovation and sound design you&#146;ll find in Boost. I encourage you to visit the Boost website (&lt;www.boost.org&gt;) for more on the other 34 libraries in the Boost collection.</p>

<H3><FONT COLOR="#000080">Smart Pointers</FONT></H3>

<p>One of the smaller (size-wise) Boost libraries is <B>smart_ptr</B>. <B>smart_ptr</B> is one of the libraries that I think is going to end up in the C++ Standard. This article discusses the Boost <B>smart_ptr</B> library. But first, I&#146;ll begin with a brief introduction to smart pointers.</p>

<H3><FONT COLOR="#000080">30-Second Introduction to Smart Pointers</FONT></H3>

<p>Smart pointers are classes that store pointers to dynamically allocated (heap) objects. They behave much like built-in C++ pointers except that they automatically delete the object pointed to at the appropriate time. Smart pointers are particularly useful in the face of exceptions as they ensure proper destruction of dynamically allocated objects. They can also be used to keep track of dynamically allocated objects shared by multiple owners.</p>
<p>Actually, smart pointers can do more, such as handle thread safety, provide copy-on-write, ensure protocols, and provide remote communication services. There are ways to create generic smart pointers for these ESPs (Extremely Smart Pointers), but those won&#146;t be covered here. (See <a href="#1">[1]</a> for in-depth coverage of this topic. By the way, Alexandrescu is currently considering submitting his C++ library Loki to Boost.)</p>
<p>Most uses of smart pointers are for lifetime control, period. They implement <B>operator-&gt;</B> and <B>operator*</B> to yield the raw pointer, allowing the smart pointer to look like an ordinary pointer.</p>
<p>One such class comes with the standard library: <B>std::auto_ptr</B>. It is designed to handle ownership of a resource, but lacks support for reference counting and arrays. Also, <B>std::auto_ptr</B> transfers ownership when it is copied. In many cases, you need more and/or different functionality. Enter the <B>smart_ptr</B> classes.</p>

<H3><FONT COLOR="#000080">smart_ptr Classes</FONT></H3>

<p>The smart pointers in Boost are:</p>

<UL><LI>   <B>scoped_ptr</B>, which handles sole ownership of single objects; unlike <B>std::auto_ptr</B>, <B>scoped_ptr</B> cannot be copied</LI>
<LI>   <B>scoped_array</B>, which is similar to <B>scoped_ptr</B>, but handles arrays</LI>
<LI>   <B>shared_ptr</B>, which allows object ownership to be shared</LI>
<LI>   <B>shared_array</B>, which allows sharing of ownership for arrays</LI></UL>

<H3><FONT COLOR="#000080">scoped_ptr</FONT></H3>

<p>The <B>scoped_ptr</B> smart pointer differs from <B>std::auto_ptr</B> in that it doesn&#146;t transfer ownership. In fact, it explicitly forbids any attempt to do so! This is important for any scenario where you need to be sure that there is only ever one owner to a pointer. Without <B>scoped_ptr</B>, you would probably be inclined to use <B>std::auto_ptr</B>, but take a look at the following code:</p>

<pre>
auto_ptr&lt;string&gt; MyOwnString
  (new string("This is mine to keep!"));
auto_ptr&lt;string&gt; NoItsMine(MyOwnString);

cout &lt;&lt; *MyOwnString &lt;&lt; endl; // Boom
</pre>

<p>This code will obviously fail, since ownership of the string has been transferred to <B>NoItsMine</B>. This is not a design flaw in <B>std::auto_ptr</B> &#151; it is a feature. However, when you need <B>MyOwnString</B> to be just that, you&#146;ll want to use <B>scoped_ptr</B>:</p>

<pre>
scoped_ptr&lt;string&gt; MyOwnString
  (new string("This is mine to keep for real!"));
// Compiler error - there is no copy constructor.
scoped_ptr&lt;string&gt; TryingToTakeItAnyway
  (MyOwnString); 
</pre>

<p>The <B>scoped_ptr</B> accomplishes this behavior by inheriting from <B>boost::noncopyable</B> (found in the library <B>Boost.utility</B>). The non-copyable class declares the copy constructor and the assignment operator as private.</p>

<H3><FONT COLOR="#000080">scoped_array</FONT></H3>

<p>scoped_array</B> is obviously the equivalent of <B>scoped_ptr</B>, but for arrays. You&#146;ll get no help from the standard library here &#151; unless of course you&#146;re using <B>std::vector</B>, which is the right way to go in most cases.</p>
<p>The usage is similar to <B>scoped_ptr</B>:</p>

<pre>
typedef tuples::tuple&lt;string, int&gt; ArrayTuple;

scoped_array&lt;ArrayTuple&gt; MyArray(new ArrayTuple[10]);
tuples::get&lt;0&gt;(MyArray[5]) =
  "The library Tuples is also part of Boost";
</pre>

<p>Tuples are collections of elements &#151; for example pairs, triples, and quadruples. A typical use of tuples is returning multiple values from a function. The Boost Tuple Library can be thought of as an extended generalization of the standard library&#146;s pair, and it currently works with up to 10 tuple elements. It supports tuple streaming, comparison, assignment, unpacking, and more. For more information about the Boost Tuple Library, see <a href="#2">[2]</a> and <a href="#3">[3]</a>.</p>
<p>As the <B>scoped_array</B> goes out of scope, <B>delete[]</B> will be properly called. This eliminates a common mistake, namely invoking the wrong operator <B>delete</B>.</p>

<H3><FONT COLOR="#000080">shared_ptr</FONT></H3>

<p>Here&#146;s an offering that you won&#146;t find in the standard library &#151; a reference-counted smart pointer. Most of you have rolled your own smart pointers, and there is plenty of literature regarding the issues involved in reference counting. One of the most important details is how the reference count is implemented &#151; intrusive, which means that you add support to the classes being reference counted, or non-intrusive, which means you don&#146;t. The Boost <B>shared_ptr</B> is non-intrusive, and the implementation uses a reference counter allocated from the heap. There has been much discussion about providing parameterized strategies to best suit any given situation, but in the end it was decided against to focus on usability. Don&#146;t expect the discussions to go away though.</p>
<p>The usage of <B>shared_ptr</B> does what you&#146;d expect: it takes responsibility of deleting the pointee when there are no more users of the instance, and it shares its pointee freely.</p>

<pre>
void PrintIfString(const any&amp; Any) {
  if (const shared_ptr&lt;string&gt;* s =
    any_cast&lt;shared_ptr&lt;string&gt; &gt;(&amp;Any)) {
      cout &lt;&lt; **s &lt;&lt; endl;
    }
}

int main(int argc, char* argv[])
{
  std::vector&lt;boost::any&gt; Stuff;

  shared_ptr&lt;string&gt; SharedString1
    (new string("Share me. By the way,
     Boost.any is another useful Boost
     library"));

  shared_ptr&lt;string&gt; SharedString2
    (SharedString1);
  shared_ptr&lt;int&gt; SharedInt1
    (new int(42));
  shared_ptr&lt;int&gt; SharedInt2
    (SharedInt1);

  Stuff.push_back(SharedString1);
  Stuff.push_back(SharedString2);
  Stuff.push_back(SharedInt1);
  Stuff.push_back(SharedInt2);

  // Print the strings
  for_each(Stuff.begin(), Stuff.end(),
    PrintIfString);

  Stuff.clear();

  // The pointees of the shared_ptr&#146;s
  // will be released on leaving scope
  return 0;
}
</pre>

<p>The <B>any</B> library offers a way to store just about anything <a href="#2">[2]</a><a href="#4">[4]</a>. The requirements on contained types are that they are <B>CopyConstructible</B>, the destructor must not throw, and they should typically be <B>Assignable</B>. How do we store and pass &#147;anything&#148;? Indiscriminate types (read <B>void*</B>) can refer to just about anything, but that means throwing type safety (and knowledge) out the door. Using <B>any</B>, type safety is preserved. All types satisfying the requirements for <B>any</B> can be assigned, but extraction demands knowing the exact type. <B>any_cast</B> is the key for unlocking the value held by <B>any</B>. <B>any_cast</B> works like <B>dynamic_cast</B> &#151; casts to pointer types succeed or fail by returning a null pointer whereas casts to reference types throw an exception (<B>bad_any_cast</B>) on failure. </p>

<H3><FONT COLOR="#000080">shared_array</FONT></H3>

<p>Again, <B>shared_array</B> is the equivalent of <B>shared_ptr</B>, but it is used with arrays.</p>

<pre>
shared_array&lt;Base&gt; MyStrings( new Base[20] );
</pre>

<H3><FONT COLOR="#000080">Diving into the shared_ptr Implementation</FONT></H3>

<p>Creating a simple smart pointer is fairly easy. Creating a smart pointer that will work with most compilers is more difficult. Creating a smart pointer with exception safety in mind is a lot more difficult. <B>Boost::shared_ptr</B> does it all, and here&#146;s how. (Note: <B>include</B>s, broken compiler fixes, and parts of the implementation are omitted, but you&#146;ll find them in <B>Boost.smart_ptr</B>).</p>
<p>First, the class definition: obviously, smart pointers are (almost always) templates.</p>

<pre>
template&lt;typename T&gt; class shared_ptr {
</pre>

<p>The public interface:</p>

<pre>
explicit shared_ptr(T* p =0) : px(p) {
  // fix: prevent leak if new throws
  try { pn = new long(1); }  
  catch (...) { checked_delete(p); throw; }
}
</pre>

<p>Now, in the constructor there are two things that are easily forgotten. The constructor is explicit, just like most constructors that can take a single argument. The other important thing to note is that the heap allocation of the reference counter is protected by a try-catch block. Without it, you would have a flawed smart pointer that wouldn&#146;t do its only job if the reference counter can&#146;t be allocated.</p>

<pre>
  ~shared_ptr() { dispose(); }
</pre>

<p>The destructor has another important task: if the reference count goes down to zero, it should safely delete the pointee. The destructor delegates this task to another method: <B>dispose</B>.</p>

<pre>
void dispose() { if (&#151;*pn == 0)
{ checked_delete(px); delete pn; } }
</pre>

<p>As you can see, the reference count (<B>pn</B>) is decremented. If it comes down to zero, <B>checked_delete</B> is called on the pointee (<B>px</B>), and then the reference count (<B>pn</B>) is also deleted.</p>
<p>So, what does <B>checked_delete</B> do? This handy function (which you&#146;ll find in <B>Boost.utility</B>) makes sure that the pointer represents a complete type. Do you have that in your own smart pointer classes?</p>
<p>Now, here&#146;s the first assignment operator:</p>

<pre>
template&lt;typename Y&gt; shared_ptr&amp; operator=
  (const shared_ptr&lt;Y&gt;&amp; r) {
  share(r.px,r.pn);
  return *this;
}
</pre>

<p>This is a member template, and if it had not been, there are two scenarios:</p>

<OL><LI>If there is no parameterized copy constructor, assignment of the type <B>Base = Derived</B> won&#146;t work.</LI>
<LI>If there is a parameterized copy constructor, assignments will work, but it involves creating an unnecessary temporary <B>smart_ptr</B>.</LI></OL>

<p>Again, this shows you a very good reason why you shouldn&#146;t roll your own smart pointers &#151; these are not obvious issues.</p>
<p>The actual work of this assignment operator is done by <B>share</B>:</p>

<pre>
void share(T* rpx, long* rpn) {
  if (pn != rpn) { // Q: why not px != rpx?
                   // A: fails when both == 0
    ++*rpn; // done before dispose() in case
            // rpn transitively dependent on
            // *this (bug reported by Ken Johnson)
    dispose();
    px = rpx;
    pn = rpn;
  }
}
</pre>

<p>Note that the comparison for self assignment (or rather self sharing) is done by comparing the reference counters, not the pointers. Why? They both can be zero, but not necessarily the same.</p>

<pre>
template&lt;typename Y&gt; shared_ptr
  (const shared_ptr&lt;Y&gt;&amp; r) : px(r.px) {  // never throws
    ++*(pn = r.pn);
  }
</pre>

<p>This version is a templated copy constructor. See above for a good reason why.</p>
<p>The assignment operator and copy constructor also have non-templated versions:</p>

<pre>
shared_ptr(const shared_ptr&amp; r) :
// never throws
  px(r.px) { ++*(pn = r.pn); }
shared_ptr&amp; operator=
  (const shared_ptr&amp; r) {
  share(r.px,r.pn);
  return *this;
}
</pre>

<p>The <B>reset</B> function is true to its name by resetting the pointee. Very handy if you need to destroy a pointee before leaving scope, or simply to invalidate some cached values.</p>

<pre>
  void reset(T* p=0) {
    // fix: self-assignment safe
    if ( px == p ) return;  
    if (&#151;*pn == 0) 
    { checked_delete(px); }
    else { // allocate new reference 
           // counter
      // fix: prevent leak if new throws
      try { pn = new long; }  
      catch (...) {
        // undo effect of &#151;*pn above to
        // meet effects guarantee
        ++*pn;  
        checked_delete(p);
        throw;
      } // catch
    } // allocate new reference counter
    *pn = 1;
    px = p;
  } // reset
</pre>

<p>Again, note the care that has been taken to avoid potential leaks and to maintain exception safety.</p>
<p>Then you have the operators that enable the &#147;smart&#148; of the smart pointer:</p>

<pre>
// never throws
T&amp; operator*() const   { return *px; }
// never throws
T* operator-&gt;() const  { return px; }
// never throws
T* get() const         { return px; }  
</pre>

<p>Just a note: there are smart pointers that implement a <B>cast</B> operator to <B>T*</B>. This is not a good idea, and more often than not, you&#146;ll burn your fingers. The inconvenience of having to write <B>get</B> disables the compiler from playing games with your sanity.</p>
<p>I think it was Andrei Alexandrescu who said &#147;If your smart pointer behaves exactly like dumb pointers, they are dumb pointers.&#148; True enough.</p>
<p>In closing, here are a couple of convenient functions.</p>

<pre>
long use_count() const  
{ return *pn; }  // never throws
bool unique() const     
{ return *pn == 1; }  // never throws
</pre>

<p>The names are self-explanatory, right?</p>
<p>There is a lot more to mention about <B>Boost.smart_ptr</B> (such as specializations for <B>std::swap and std::less</B>, members for compatibility and convenience together with <B>std::auto_ptr</B>, etc.), but I&#146;m running out of space. See <B>smart_ptr.hpp</B> in the Boost distribution (&lt;www.boost.org&gt;) for the gory details. Even without those extras, isn&#146;t this indeed a very smart pointer?</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This has been a short introduction to the world of Boost. Anyone is welcome to join, and frankly, I think that most C++ programmers have very good reasons to do so. I&#146;d like to thank Beman Dawes, David Abrahams, and Jens Maurer for their help in answering questions and sharing their opinions (see sidebar, <a href="side1.htm">&#147;Answers from the Original Boosters&#148;</a>).</p>
<p>See you at Boost!</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>
<p><a name="2"></a>[2]  Boost, &lt;www.boost.org&gt;.</p>
<p><a name="3"></a>[3]  Jaako Jarvi. &#147;Tuple Types and Multiple Return Values,&#148; <I>C/C++ Users Journal</I>, August 2001.</p>
<p><a name="4"></a>[4]  Jim Hyslop and Herb Sutter. &#147;I&#146;d Hold Anything for You,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, December 2001, &lt;www.cuj.com/experts/1912/hyslop.htm&gt;.</p>
<p><a name="5"></a>[5]  Boost mailing list, &lt;http://groups.yahoo.com/group/Boost&gt;.</p>
<p><a name="6"></a>[6]  Boost-Users mailing list, &lt;http://groups.yahoo.com/group/Boost-Users&gt;.</p>
<p><a name="7"></a>[7]  C++ Standard, International Standard ISO/IEC 14882.</p>

<p><i><B>Bjorn Karlsson</B> is a professional software developer at ReadSoft. Bjorn can be reached at <B>bjorn.karlsson@readsoft.com</B>.</i></p>

</blockquote></body></html>
