<HTML>   
     <HEAD>
<TITLE>December 2002 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../20.12/tocdec.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: It's an Object-ful Lifetime</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Jim Hyslop</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2002, Jim Hyslop and Herb Sutter</b></p>

<p>It was a few days before the holidays. For once, there were no deadline pressures &#151; all the projects I had been working on had wrapped up on schedule. </p>
<p>I resorted to my favorite pastime of skimming through the source repository. I frequently learned new techniques &#151; and techniques to avoid &#151; while studying other programmers' code. I came across an interesting tidbit, which I distilled into this small program:</p>

<pre>
class T
{
public:
 T &amp; ref() { return *this; }
};

void f( T &amp; );

int main()
{
 f( T().ref() );
}
</pre>

<p>At first, I didn't see the point of the <b>ref()</b> function, so I removed the call to it &#151; I figured it should work:</p>

<pre>
int main()
{
  f( T() );
}
</pre>

<p>When I compiled it, though, the compiler promptly spat out an error about binding a temporary to a non-<b>const</b> reference. I mentally smacked my palm against my forehead &#151; of course that wasn't allowed! I recalled the Guru's explanation, when I had first stumbled on the problem.</p>
<p>&quot;One reason for the prohibition is to prevent subtle bugs,&quot; she had said. &quot;Consider, my child, the following parable:&quot;</p>

<pre>
class U
{
// ... whatever ...
};

void takesAndModifiesU( U &amp; u )
{
 // performs actions that modify the state of u
}

class V
{
public:
 operator U();
};

void g()
{ 
 V v;
 // ...
 takesAndModifiesU( v );
 // ...
}
</pre>

<p>&quot;If the binding were allowed, the compiler would invoke the conversion operator, creating a temporary <b>U</b> object. This unnamed temporary object would then be passed to <b>takesAndModifiesU</b>, modified, and then discarded after the function call was completed. The original object, <b>v</b>, would be untouched &#151; to the great puzzlement of the scribe who wrote that function.&quot;</p>
<p>I was still puzzled, though. I couldn't see how the original statement <b>f( T().ref() );</b> could compile &#151; I was still binding a temporary object to a non-constant reference.</p>
<p>&quot;You must think beyond constancy, my child,&quot; the Guru's voice &#151; for real, not a memory &#151; startled me. &quot;Think instead of lvalues and rvalues. The Holy Standard tells us that an explicit type conversion of the form <b>T()</b> creates an rvalue. An rvalue can only be bound to a constant, non-volatile reference, but an lvalue has no such restriction. On the other hand, the result of a function that returns a reference is an lvalue <a href="#1">[1]</a>. Therefore the compiler can bind the result of <b>ref()</b> to the non-constant reference.&quot;</p>
<p>&quot;So, as long as I call a function that returns a reference, I'm OK,&quot; I replied. &quot;Hey &#151; the assignment operator returns a reference, so I could write <b>f( T() = T() );</b>. Sweet!&quot; I enthused. &quot;I can think of lots of uses for that technique.&quot;</p>
<p>&quot;Beware, my child. Such unusual techniques can be dangerous and should not be used lightly. Indeed, there is at least one parable I can think of, involving object lifetimes, which would lead to undefined behavior.&quot;</p>
<p>&quot;And that would be...&quot; I prompted.</p>
<p>&quot;For you to meditate upon, after lunch,&quot; the Guru replied smoothly. In the distance, I could see some of our co-workers preparing to go to the department's holiday lunch. I grabbed my coat, joined the group, and we headed out to a local restaurant.</p>
<p>Somehow, we actually managed to avoid talking shop at lunchtime. Much of the discussion centered on our favorite holiday movies, comparing the various remakes of <i>Miracle on 34<sup>th</sup> Street</i>, and whether Alistair Sim or Patrick Stewart made a better Scrooge. (My vote was for Stewart.) Bob surprised me, though &#151; I figured his favorite character would be the Grinch, but instead he waxed poetic on <i>It's A Wonderful Life</i>.</p>
<p>When we got back from lunch, I was well sated. I sat down at my desk and started contemplating what the Guru might have been getting at. Finally, as I was struggling to keep my eyes open, I figured it out:</p>

<pre>
class U
{
 T&amp; t_;
public:
 U( T &amp; t ) : t_( t ) { } 
};

{ // ... some block scope ...
 U u( (T() = T()) );
 // ... 
}</pre>

<p>As soon as the <b>u</b> object was finished construction, the temporary object's lifetime would come to an end, and the <b>u</b> object would be left with a dangling reference.</p> 
<p><i>It would be as if the <b>T</b> object never existed,</i> I mused as I drifted off.</p>
<p>&quot;All right, George,&quot; I heard the Guru's voice, &quot;you've got your wish. You've never been born.&quot;</p>
<p>&quot;Huh? Who's George?&quot; I turned to the Guru. </p>
<p>&quot;You are, of course,&quot; the Guru answered. As soon as I saw her, I knew I was dreaming &#151; one of those dreams where you know it's a dream, but you go along with it anyway. &quot;You're George Bailey. The object you created never existed. It's my job to show you what can happen when you deal with undefined behavior.&quot;</p>
<p>In the distance, I could see a sign: &quot;Welcome to Bobville.&quot;</p>
<p>&quot;Bobville?&quot; I asked, dreading the answer.</p>
<p>&quot;The town is run by your nemesis, Bob,&quot; the Guru said. &quot;He's also the owner of the bank, and the head of the software department. Let's take a walk along the main street.&quot;</p>
<p>As we walked along, I saw unspeakable horrors &#151; monolithic code blocks, variables named <b>i</b> and <b>j</b>, and businesses advertising &quot;Null Pointers Dereferenced Here.&quot; On one street corner, I saw some programmers shamelessly copying-and-pasting code.</p>
<p>I spotted Kerry driving a cab. I flagged him down.</p>
<p>&quot;Get me out of here, Kerry,&quot; I shouted as I climbed in the cab. &quot;Take me back to the office, where we write sensible code.&quot;</p>
<p>&quot;Kerry? My name's Ernie. I don't know about code; I just drive a cab.&quot; We drove past Wendy, dressed in a cop's uniform. Kerry waved to get her attention. Knowing it was a dream and I wasn't supposed to see his actions, I ignored him.</p>
<p>We pulled up in front of a run-down office building. I leaped out and ran inside. I found a whiteboard, which had the offending code written on it, and rewrote it:</p>

<pre>
{ // ... some block scope ...
 T tmp;
 U u( tmp );
}
</pre>

<p>As soon as I put the marker down, I snapped awake.</p>
<p>&quot;Whoa!&quot; I said to myself, as I went to the lunchroom to get the strongest coffee I could find.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1] ISO/IEC 14882:1998(E), &quot;International Standard, Programming Languages &#151; C++&quot;, clauses 5.2.3, 8.5.3, and 3.10 respectively.</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jhyslop@ieee.org</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
