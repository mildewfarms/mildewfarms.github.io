<HTML>
<HEAD>
<TITLE>February 2006</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">February 2006<BR>
                Volume 24 Number 2</FONT></H3>
               

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="0602seacord/0602seacord.html">Validating C and C++ for Safety and Security</A></H4>
<p><b>Robert C. Seacord</b><br>
<i>Sometimes the only way to track down security flaws such as buffer overflows is to roll up your sleeves and manually review the code. Robert outlines a process for manual review that's based on Safe-Secure C/C++.
</i></p>


<H4><A HREF="0602matthews/0602matthews.html">SSH Kerberos Authentication Using GSSAPI and SSPI</A></H4>
<p><b>Glen Matthews</b><br>
<i>Kerberos authentication can be an effective safeguard against man-in-the-middle attacks. Glen implements Kerberos by way of two popular APIs.
</i></p>


<H4><A HREF="0602kiesling/0602kiesling.html">A Frame-Based Message-Passing Parser for C</A></H4>
<p><b>Robert Kiesling</b><br>
<i>Ctalk, an object-oriented preprocessor for ANSI C, contains a novel parser design that's well suited to interpreting object-oriented languages.
</i></p>


<H4><A HREF="0602stoks/0602stoks.html">Syntactic Aspartame: Recreational Operator Overloading</A></H4>
<p><b>Sander Stoks</b><br>
<i>Some say operator overloading is nothing more than syntactic sugar. Use it with proper caution, however, and you can reap real rewards.
</i></p>


<H4><A HREF="0602bruce/0602bruce.html">Associative Chains in C++</A></H4>
<p><b>Phillip Bruce</b><br>
<i>Phillip gets around some of the limitations of the pointer-to-member with a model of class associations that he calls "Associative Chains."
</i></p>


<H4><A HREF="0602reeves/0602reeves.html">Multiple Inheritance Considered Useful</A></H4>
<p><b>Jack Reeves</b><br>
<i>Arguments against multiple inheritance range from the philosophical to the practical, but in the end only one question matters: Is it useful?
</i></p>


<H4><A HREF="0602jaeschke/0602jaeschke.html">C++/CLI Sockets</A></H4>
<p><b>Rex Jaeschke</b><br>
<i>If you want interprocess or interapplication communication, you want to know how to use sockets. Rex shows us the way.
</i></p>


<H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>

<H4><A HREF="0602alexandrescu/0602alexandrescu.html">Generic&lt;Programming&gt;</A></H4>
<p><b>Andrei Alexandrescu</b><br>
<i>STL containers are easy to extend, which is why Andrei was surprised when he happened upon a problem that cried out for an extension to std::map, but ultimately couldn't be solved that way.
</i></p>


<H4><A HREF="0602moo/0602moo.html">C++ Made Easier</A></H4>
<p><b>Andrew Koenig & Barbara E. Moo</b><br>
<i>Invariants are a great way to make sure your loops are doing what you expect.
</i></p>


<H4><A HREF="0602becker/0602becker.html">The New C++</A></H4>
<p><b>Pete Becker</b><br>
<i>With TR1, C++ gets hash tables in the form of the template classes unordered_map, unordered_multimap, unordered_set, and unordered_multiset.
</i></p>



<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="0602edit/0602edit.html">Editor's Forum</A></H4>
<H4><A HREF="0602newprod/0602newprod.html">New Products</A></H4>

</blockquote>
</body>
</html>
