<HTML>   
     <HEAD>
<TITLE>June 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Letters</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>
<hr><p>Hello,</p>
<p>I&#146;ve read this article [&#147;Documenting the Graphic Import Filter Interface,&#148; by Bret Pehrson, <I>CUJ,</I> March 2001] with great interest, since I&#146;m developing an own graphic import filter myself. However, it is not fully correct, that the filter interface is undocumented so far. In addition to the sources mentioned in the article I know about the following additional source of information:</p>
<p>1) &#147;Graphic Import Filters for Windows Applications&#148;, Dr. Dobbs Journal, July 92, pp. 82-110. 2) Chapter: &#147;Das Aldus Importfilter Format&#148; in <I>Grafikformate</I> by Thomas Lipp (Microsoft Press, ISBN 3-86063-391-0). This book includes also a CD-ROM with the needed header files and and example. Unfortunately for you, it is in German.</p>
<p>Further, I&#146;d like to point you to the import filter that I have built. This filter allows programmers to import PostScript or PDF as vector graphics. It can be found at: &lt;www.geocities.com/wglunz/importps/&gt;.</p>
<p>Finally, I&#146;d like to mention that in addition to MS-Office, also other applications like PaintShop-Pro or Photoline (&lt;http://www.pl32.com/&gt;) support this interface. PaintShop-Pro needs other registry entries, though.</p>
<p>Best Regards,</p>
<p>Wolfgang Glunz</p>
<hr><p>Dear <I>CUJ</I>,</p>
<p>I wanted to take the time to stress my overall direction with regards to computers.</p>
<OL><LI>I have subscribed to <I>C/C++ Users Journal</I> for ten years now. </LI>
<LI>I no longer use Windows as my primary operating system. It has been replace by Linux. </LI>
<LI>Windows has been placed on my legacy list miles and miles below DOS. </LI>
<LI>I will not use or even look at C#. </LI>
<LI>I do not want to see C# as part of the <I>C/C++ Users Journal</I>. </LI>
<LI>If the <I>C/C++ Users Journal</I> becomes C/C++/C#, I will cancel my subscription.</LI></OL>

<p>A year ago, 100% of my systems were based on Microsoft products. That number has been reduced to 30%.</p>
<p>As a <I>C/C++ Users Journal</I> customer, I would like to see more Linux related articles and less Windows related articles.</p>
<p>Harry Barrett</p>
<p><I>Although I will soon have little control over the content and direction of </I>CUJ<I> (see my Editor&#146;s Forum), I think I can safely say that </I>CUJ<I> is not going to turn into </I>C/C++/C# Users Journal<I> or any other such monstrosity. That said, </I>CUJ<I> will be publishing at least one C# article in coming months. That is my doing; I have always believed that it was healthy to have a look at closely related languages to see what they have to offer. C# does have a few features that may be of interest to C++ programmers. For example, the C# delegate type is somewhat like a function pointer, but much more versatile. Some readers might want to see if there&#146;s a way to simulate its semantics in C++.</I></p>
<p><I>I am no big fan of Microsoft, but that doesn&#146;t stop me from using their products. Likewise, </I>CUJ<I> will not refuse to cover something just because it&#146;s produced by Microsoft. I simply cannot believe that is an effective policy for running a magazine, or for that matter, developing software. &#151; mb</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>I read with interest Alan Griffith&#146;s &#147;Here Be Dragons&#148; article in <I>CUJ</I> March 2001 edition.</p>
<p>I must point out however, that the unwary traveller may unexpectedly be disembowelled by a familiar beast lurking in the undergrowth; this fiend being the &#147;attempt to dereference a null pointer exception,&#148; when using the copy constructor for <B>Whole</B> as shown in the article.</p>
<p>Perhaps we should make use of our fickle friend, the conditional expression, to render this beast harmless?</p>

<pre>
Whole::Whole(const Whole&amp; rhs)
: p1(rhs.p1.get() ?
     new PartOne(*rhs.p1) : NULL),
  p2(rhs.p2.get() ?
     new PartTwo(*rhs.p2) : NULL)
{
}
</pre>

<p>With the dereferencing of the pointer members of <B>Whole</B> thus guarded, we can continue our journey with confidence.</p>
<p>Regards, </p>
<p>Mike da Silva</p>

<p><I>We forwarded your message to Alan Griffiths, but have not heard back from him, so I will try to fake a reply. First, some context for readers unfamiliar with the article. The copy constructor you refer to is part of the </I><B>Whole</B><I> class shown below:</I></p>
<pre>
class PartOne { ... };
class PartTwo { ... };

class Whole
{
public:
   ... // other stuff
   Whole::Whole(const Whole&amp; rhs);
   ... // other stuff
private:
   std::auto_ptr&lt;PartOne&gt; p1;
   std::auto_ptr&lt;PartTwo&gt; p2;
};
</pre>

<p><I>The copy constructor attempts to make copies of the <B>PartOne</B> and <B>PartTwo</B> objects being referenced by <B>rhs.p1</B> and <B>rhs.p2</B>.</I></p>
<p><I>Absent any other information about class <B>Whole</B>, it appears that it may be possible to construct a <B>Whole</B> object with members <B>p1</B> and <B>p2</B> wrapping null pointers. As you point out, a naive attempt to copy construct from such a &#147;null-content&#148; object would likely be disastrous.</I></p>
<p><I>In Griffiths&#146; defense, if he had included your &#147;fickle friend&#148; the query operator in his code snippets, it would have been very distracting from the main point he was trying to make. I would also suggest that a better solution than yours would be to disallow such null-content objects to be constructed in the first place. I suspect this is what Griffiths had in mind, but to bring it up would have distracted from the discussion at hand. This is always the challenge in technical writing: to balance robustness with readability. All in all, I think Griffiths did a pretty decent job. But thanks for alerting us to the danger. &#151; mb</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>Send congratulations to Herb for taking the initiative to pull this survey [&#147;Compiler Conformance Roundup,&#148; <I>CUJ,</I> April 2001] together. Indeed, a yearly roundup will be a great tool for C++ software engineers and architects. The perennial information was, IMHO, very interesting to read and compare.</p>
<p>Dr. Nicolas Rouquette<br>
Mission Execution &amp; Automation<br>
Jet Propulsion Laboratory <br>
&lt;http://www.jpl.nasa.gov&gt;</p>

<p><I>We will certainly pass along your kudos to Herb. Thanks for writing. &#151; mb</I></p>
<hr><p>Hello Gents,</p>
<p>We have just read the article by Steve Vinoski and Douglas Schmidt about CORBA and the integration of the C++ Standard, in the <I>C/C++ Users Journal</I> Experts Forum. [See &#147;Object Interconnections: Standard C++ and the OMG C++ Mapping,&#148; &lt;www.cuj.com/experts/1901/vinoski.htm&gt;; and &#147;Object Interconnections: Using Standard C++ in the OMG C++ Mapping,&#148; &lt;www.cuj.com/experts/1904/vinoski.htm&gt;.]</p>
<p>The paper is quite interesting since it contradicts our position.</p>
<p>Our major criticism is that the arguments seem to be driven from the viewpoint of an implementor of an ORB with a running solution and not from the requirements that the user of an ORB has. The requirements of the users are very important and shall drive the design of any public interface under the restrictions that it must be implementable.</p>
<p>From the users&#146; point of view it is clearly favorable to use the standards of the language as far as possible. In particular this is true for C++ since the available standard library is very powerful, flexible, and efficient at the same time.</p>
<p>Currently we always recommend not to use CORBA in conjunction with C++ because the language binding is of hardly acceptable quality. We would appreciate if this changes in the future because we would like to see such a major standard technology move forward.</p>
<p>Regards,</p>
<p>Detlef Hoeffner<br>
Dietmar Kuehl</p>
</blockquote></body></html>
