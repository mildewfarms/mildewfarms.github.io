<HTML>   
     <HEAD>
<TITLE>June 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: All Good Things</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Some words of wisdom for the departing editor, and &#151; as usual &#151; some priceless C/C++ info for readers.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>...and then there was one.</p>
<p>Marc Briand has left the building. In exodus he follows Pete Becker, Dan Saks, and P.J. Plauger: all regular monthly writers on board when I started (November 1995 issue), but gone now. I suddenly find myself high in seniority and a tad lonely.</p>
<p>I&#146;m going to miss Marc. I always enjoyed doing time with him at trade shows and conferences; but in his new life, I somehow doubt he&#146;ll have much occasion to attend them anymore. And we never (well, almost never) had disagreements about editorial tone and direction. I hope I won&#146;t have trouble training, er, &#147;working with&#148; his replacement.</p>
<p>This column is my last edited by Marc. As I write, I&#146;m not sure who will be topping the masthead next. Someone close to the magazine (not Marc) approached me about taking on a larger role; I had to decline, if only because Microsoft is absorbing quite enough of my time.</p>
<p>I understand why Marc&#146;s left. I understand why they&#146;ve all left. Magazine writing is marathon running. The trick is to find a pace that&#146;s fast enough to win, yet slow enough to sustain. Unfortunately no runner can go forever, and eventually we all drop out of the race.</p>
<p>It lurks in the future mist, quietly waiting: that first day I don&#146;t write anymore. I&#146;m in no hurry to find it. After all these years, the thrill of seeing my words published hasn&#146;t faded. And every time readers tell me they rip open their new issues and plunge straight to my column first &#151; my column! &#151; I&#146;m reminded of why I entered the race <a href="#1">[1]</a>.</p>
<p>So Marc, I dedicate this column to you. Until we meet again, may you always get your six perfect weeks of Kansas weather, late-spring skies filled with chase-worthy storms. May you finally wake up, look in the mirror, and realize that the &#146;70s are like so over dude. May you laugh with &#151; and not at &#151; the next editor fool enough to roundup compiler conformance. And may you finally scrape up the courage to ghostwrite Sanford D&#146;s memoirs.</p>
<p>&#147;Turn out the lights, the party&#146;s over. They say that all good things must end...&#148;</p>

<H3><FONT COLOR="#000080">Virtual Reality</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> The code that follows produces (on a Solaris box) the following output when the function <B>f</B> is virtual in <B>A</B>:</p>

<pre>
ffbef9a0
B::f

ffbef9a0
B::f
</pre>

<p>Furthermore, it produces the following output when the function <B>f</B> is non-virtual in <B>A</B>:</p>

<pre>
ffbef9a3
B::f

ffbef9a3
A::f
</pre>

<p>This result is very confusing to me because in each case we merely have an object of type <B>B</B> &#151; namely <B>b</B>.</p>
<p>It would seem to me that since each of our calls involve an object &#151; not a pointer &#151; of type <B>B</B>, in all cases the <B>B::f</B> method should be invoked. I have added the revelation of the <B>this</B> pointer just to show that indeed we are looking at the same object.</p>
<p>Obviously my reasoning is in error, and I am overlooking something. Could you please explain why the <B>b</B> object invokes the <B>A::f</B> method even though it has inherited the <B>A::do_f</B> method? In other words, please explain the mechanism by which this result is taking place.</p>
<p>Thanks &#151; Phil Couchara</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> All four results you report are correct.</p>
<p>The first version of your program, with <B>f</B> virtual, appears as <a href="list1.htm">Listing 1</a>. That program shows two calls to <B>f</B>: one direct, one indirect (via <B>do_f</B>):</p>

<UL><LI>   The direct call <B>b.f</B> is non-virtual and routes directly to <B>B::f</B> without interrogating the <B>B</B> vtable. <B>b</B> is a <B>B</B> object, not a <B>B</B> pointer or reference. There&#146;s no possibility for the static and dynamic types of <B>b</B> to differ, so there&#146;s no need for the extra overhead of a vtable lookup and dispatch. (By implication, if the call did take a detour through the vtable, it would still land in <B>B::f</B> anyway.)</LI>
<LI>   The indirect call of <B>f</B> via <B>b.do_f</B> is virtual. That call is implicitly <B>(*this).f</B> within <B>do_f</B>. As the dynamic type of <B>*this</B> may differ from its static type, the vtable lookup is required. That lookup shows <B>*this</B> to have dynamic type <B>B</B>; correspondingly the call <B>(*this).f</B> routes to <B>B::f</B>.</LI></UL>

<p>Now change your program so that <B>f</B> is non-virtual. This new program shows the same two calls to <B>f</B>. But because <B>f</B> is non-virtual, there is no run-time vtable to resolve calls to <B>f</B>. Instead the compiler reckons which <B>f</B> to call based on static-type context.</p>
<p>The compiler reaches its conclusions thusly:</p>

<UL><LI>   <B>B</B> declares its own <B>f</B>, which hides the inherited <B>A::f</B>. The call <B>b.f</B> has only one possible static resolution: <B>B::f</B>.</LI>
<LI>   <B>B</B> does not declare its own <B>do_f</B>, but instead inherits <B>A::do_f</B>. That function internally calls <B>f</B>. Because that <B>f</B> is not virtual, <B>A::do_f</B> resolves the call statically. The only possible match, from the perspective of <B>A::do_f</B>, is <B>A::f</B>.</LI></UL>

<p>In both cases, <B>f</B> resolves based on the static context of the caller. The actual run-time type of the calling object is irrelevant, as no virtual dispatch is involved or even possible.</p>
<p>Bottom line:</p>

<UL><LI>   If a function is non-virtual, calls resolve via static type information only, regardless of intuition.</LI>
<LI>   If a function is virtual, some calls resolve via static type information, and some via dynamic type information. It all depends on who makes the call and how they make it.</LI></UL>

<H3><FONT COLOR="#000080">Chain Letter</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hello Bobby,</p>
<p>My name is Mohammed, and I am a const reader of the <I>CUJ</I>, and especially the Q&amp;A part. Great job! I extend my greeting to you and your friends making this publication available to us C++ users.</p>
<p>I am not an experienced C++ developer, but I am making the effort to be. I have some questions about C++ and thus am writing to you.</p>
<p>Question 1: When overloading the operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> to support I/O on our own classes, why do we return a reference to <B>istream</B> and <B>ostream</B>?</p>
<p>Question 2: Why do we return a reference to <B>this</B> when overriding the assignment operator?</p>
<p>I know you may say &#147;consult a C++ book like ...,&#148; and I did read some books, but I still did not get a clear idea about my questions.</p>
<p>Thanks very much &#151; Mohammed Abu Hajjleh</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> My first &#147;const&#148; reader &#151; Dan Saks will be proud!</p>
<p>The answer to both questions is quite simple: by returning these references, the operations can be chained together:</p>

<pre>
X a, b, c;
a = b = c;
cout &lt;&lt; a &lt;&lt; b &lt;&lt; c;
cint &gt;&gt; a &gt;&gt; b &gt;&gt; c;
</pre>

<p>I&#146;ll explain the case of assignment first and generalize from there.</p>
<p>The statement</p>

<pre>
a = b = c;
</pre>

<p>groups as if it were written</p>

<pre>
a = (b = c);
</pre>

<p>Assuming <B>X</B> is a class type above, and assuming <B>operator=</B> is the typical self-assignment declared as</p>

<pre>
X &amp;operator=(X const &amp;)
</pre>

<p>then the chained expression is really the nested function call</p>

<pre>
a.operator=( b.operator=(c) );
</pre>

<p>The inner call</p>

<pre>
b.operator=(c)
</pre>

<p>takes <B>c</B> as its argument. <B>c</B> has type <B>X</B>, which converts nicely to the <B>operator=</B> parameter type <B>X const &amp;</B>. No drama there.</p>
<p>The outer call</p>

<pre>
a.operator=( b.operator(c) );
</pre>

<p>takes the result of <B>b.operator(c)</B> as its argument. Because <B>operator=</B> has a return type of <B>X &amp;</B>, the result of <B>b.operator(c)</B> is an <B>X &amp;</B>. That <B>X &amp;</B> result converts to the <B>X const &amp;</B> parameter type <B>a.operator=</B> requires.</p>
<p>In sum: by being declared to return the same type it accepts, <B>operator=</B> can form chained calls to itself.</p>
<p>All of this implies that <B>b.operator=</B> returns a reference to some <B>X</B> object &#151; but which one?</p>
<p>Remember that</p>

<pre>
a = b = c
</pre>

<p>sets the state of <B>b</B> from <B>c</B> before setting the state of <B>a</B> from <B>b</B>. The <B>X</B> returned by <B>b.operator=</B> is therefore the state of <B>b</B> after it&#146;s been set. Implication: <B>b.operator=</B> returns <B>b</B>, which is conveniently available in <B>operator=</B> as <B>*this</B> and is yielded via return <B>*this</B>.</p>
<p>And that&#146;s the story of why <B>operator=</B> returns <B>*this</B>.</p>
<p>Counter-argument: The entire expression <B>a = b = c</B> eventually returns <B>a</B>. That value is not further chained, but is silently tossed away. If you never intend to chain assignment this way, declare <B>operator=</B> to return <B>void</B>, thereby sparing the overhead of wasted return values.</p>
<p>This same basic reasoning applies to <B>&lt;&lt;</B> and <B>&gt;&gt;</B>, except the associativity is in the other direction, and the operators are very frequently chained. For example, the sequence</p>

<pre>
cout &lt;&lt; a &lt;&lt; b;
</pre>

<p>is tantamount to</p>

<pre>
(cout &lt;&lt; a) &lt;&lt; b;
</pre>

<p>where <B>&lt;&lt;</B> is a call to <B>operator&lt;&lt;</B>. Depending on the types of <B>a</B> and <B>b</B>, the <B>operator&lt;&lt;</B> call is either a member of <B>cout</B> with one parameter:</p>

<pre>
( cout.operator&lt;&lt;(a) ).operator&lt;&lt;(b);
</pre>

<p>or a non-member function with two parameters:</p>

<pre>
operator&lt;&lt;( operator&lt;&lt;(cout, a), b);
</pre>

<p>In the former case, <B>operator&lt;&lt;</B> returns <B>*this</B>, which is the stream <B>cout</B>. In the latter case, <B>operator&lt;&lt;</B> returns its first parameter, which is also the stream <B>cout</B>. Both net out to the same effect: each <B>operator&lt;&lt;</B> result is passed down the chain to the next call, as either the value of <B>*this</B> or the first argument.</p>

<H3><FONT COLOR="#000080">Oh Say Can You C?</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Bobby,</p>
<p>Can you please tell me if there is a mechanism that allows ANSI C programs to access/call functions that have been compiled in C++ modules or libraries. I know that the reverse is possible using the <B>extern "C"</B> declaration.</p>
<p>I have an immediate need to access a &#147;C-like&#148; API that is only available as C++ generated libraries. The project that I am working on consists of a slew of ANSI C modules that will not compile/run correctly as C++ code without a significant amount of rework.</p>
<p>Regards &#151; Nabil Dajani</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Because you&#146;re asking about C calling into some other language&#146;s library, the question falls under the jurisdiction of the C Standard.</p>
<p>The only specific library the Standard governs is the Standard C library. The Standard tolerates other libraries and externally-linked entities that follow the C language rules. In all cases, the Standard specifies only the observable behavior of external code. The actual code implementation could be written in any language.</p>
<p>That&#146;s the theory. In practice, every C compiler has its own implementation peculiarities. Your prebuilt C++ library may be callable from one C compiler and not from another. As the C++ Standard puts it <a href="#2">[2]</a>:</p>

<BLOCKQUOTE>
<p>Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved.</p>
</BLOCKQUOTE>

<p>There are so many considerations that I can name but a few:</p>

<UL><LI>   type size</LI>
<LI>   parameter-passing order</LI>
<LI>   return-value mechanism</LI>
<LI>   stack alignment</LI>
<LI>   naming compatibility</LI>
<LI>   which library functions throw exceptions</LI>
<LI>   which library functions are instanced, and which are static</LI>
<LI>   how <B>this</B> pointers are implemented</LI>
<LI>   which library functions are virtual, and which are non-virtual</LI>
<LI>   how the virtual dispatch mechanism is implemented</LI></UL>

<p>If you can&#146;t answer these and similar questions, you&#146;re probably out of luck.</p>
<p>But if you can answer the questions, there is hope: you can write a thin layer of new code that maps the C++-specific behavior of the library into a C-compatible form. You declare functions in this layer <B>extern "C"</B> and call them from your C code as if they were C.</p>
<p>While I could literally write an entire book on this topic, you&#146;ll have to settle for the tiny example I show in <a href="list2.htm">Listing 2</a>. The example won&#146;t build; it&#146;s meant for demonstration purposes only. It is also quite limited. In real life, the layer will probably require a combination of C++ and assembly language.</p>
<p>(By the way, the example shows a mangled C++ name. That name is the one produced by Metrowerks CodeWarrior Pro 6, although the idea and issue apply to other compilers.)</p>

<H3><FONT COLOR="#000080">Simple Simon</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Simple question: In 2001, is there any reason to use C over C++?</p>
<p>Thanks in advance &#151; M. Thomas Kent</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Simple answer: yes.</p>
<p>More complex answer: yes, if you</p>
<UL><LI>   can&#146;t get a decent C++ compiler for your target system</LI>
<LI>   already have a C compiler and don&#146;t want to invest in a C++ compiler</LI>
<LI>   have a lot of C code that you can&#146;t or won&#146;t port to C++</LI>
<LI>   work in a C shop that can&#146;t or won&#146;t retrain programmers</LI>
<LI>   need the new features in C99 that C++ doesn&#146;t support</LI></UL>

<p>Most &#147;yes&#148; answers are based on business practicality. If you discount those considerations, and ask the question based on language design and ability only, the answer is almost always &#147;no.&#148;</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Getting free press passes to conferences and trade shows, with all the perks they entail, isn&#146;t a bad motivation either. The only real drag comes at shows with press-averse sponsors and attendees. My worst experience, ironically enough, came at a Microsoft-sponsored conference. When I wore my distinct red press badge, the good people of Redmond shunned me like Hester Prynne.</p>
<p><a name="2"></a>[2]  Subclause 7.5/9.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/jun01/schmidt.zip"></a></h4>


</blockquote></body></html>
