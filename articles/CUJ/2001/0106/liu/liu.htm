<HTML>   
     <HEAD>
<TITLE>June 2001/Implementing Reusable Mathematical Procedures Using C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Implementing Reusable Mathematical Procedures Using C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Qiang Liu</FONT></H3>

<BLOCKQUOTE>
<p>Algorithms that must call user-supplied functions are typically difficult to reuse. The key to reuse is finding a way to encapsulate the user-defined code.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>&#147;Code reuse&#148; is one of the holy grails in software engineering. A primary argument for the adoption of OO (object-oriented) programming is reusability, a fact that is evident from any books on OO design and programming (for example, see <a href="#1">[1]</a>). In practice, code reuse using OO languages like C++ is more difficult to achieve than we might hope. In fact, one author has even asserted that, &#147;C++ has done much to impede the reusability of scientific software,&#148; owing to the tendency of C++ programmers to create their own container classes <a href="#2">[2]</a>.</p>
<p>In this article, I show how to create reusable mathematical procedures in C++. My method relies more on Generic Programming concepts than on OO. (For an introduction to Generic Programming, see <a href="#3">[3]</a>.) To motivate the discussion, I present an example of a widely used estimation algorithm, Newton-Raphson, which must call a user-defined function, and I show how that user-defined function is typically (and unsatisfactorily) packaged. I then evolve a more satisfactory packaging solution based on the use of templates and operator overloading.</p>

<H3><FONT COLOR="#000080">The Newton-Raphson Algorithm</FONT></H3>

<p>In scientific computation and financial engineering, many numerical methods are generic (in theory, at least) and applicable to a wide class of problems. A well-known example is the Newton-Raphson procedure <a href="#4">[4]</a>, which finds a numerical solution for the equation f(x) = 0. Here, the standard mathematical notation f(x) indicates that f is a function of the variable x. A generalized form of this problem is f(x, a, b, ...) = 0, where the function f is defined by more than one variable. In this case, Newton-Raphson attempts to find a solution with respect to the variable x while holding the other variables fixed and treating them as parameters. Two such functions in finance describe the price of a bond and the value of a European call option.</p>
<p>The price of a bond is determined by its yield, coupon, frequency of coupon payments, and maturity; the value of a European call option is a function of its underlying stock price, strike price, interest rate, time to maturity, and volatility <a href="#5">[5]</a>. In the first case, a typical problem is to calculate the yield, given the price of the bond and holding the other parameters fixed. In the second case, the volatility is the parameter to be determined given the price of an option traded on the market. This unknown parameter is known as the implied volatility, and it is computed and used widely. In both cases, the algorithm used to calculate these parameters is Newton-Raphson.</p>
<p>Traditionally, the Newton-Raphson method is coded and embedded directly in client applications, because this procedure needs the exact definition of the function for which a solution is sought. As a result, its implementation, with slight modifications for different functions, is repeated over and over again in many places.</p>
<p>The details of the Newton-Raphson procedure, as well as those of many other mathematical routines, should not concern its users. Further, code repetition should be avoided whenever possible. It is only natural to seek a way of implementing such routines as library functions so that their client applications can call them directly. But making Newton-Raphson into a library function must involve packaging the user-defined function (which Newton-Raphson calls) into a form that can be passed as a parameter. The following section describes a common &#151; and problematic &#151; way of packaging the user-defined function.</p>

<H3><FONT COLOR="#000080">The Common Approach &#151; Pointer to Function</FONT></H3>

<p>The task is to make Newton-Raphson into a library routine that finds a solution x for all equations with the form f(x, a, b, ...) = 0. The trick is that the implementation of the routine must use (or call) a generic function of the form f(x, a, b, ...), whose exact definition will be provided later by the library&#146;s user and made available to the library only at run time. To a C or C++ programmer, one obvious possibility is to pass a pointer to function as an argument to the library routine:</p>

<pre>
typedef double (*P2F)(double);

double NewtonRaphson(P2F func_of_x, double x_init,
   &lt;some_other_inputs&gt;) {
   ...
   // call function through pointer to function
   double y = func_of_x( x_init );
   ...
}
</pre>

<p>This library routine works fine, but only for functions defined with exactly one argument. In C++, the programmer could define one overloaded library function for each new user-defined function taking an additional argument, but would end up repeating much of the library code &#151; and worse, would not be able to anticipate how many library functions would need to be written.</p>
<p>Another idea is to use optional arguments, as in the following:</p>

<pre>
typedef double (*P2F)(double, ...);
</pre>

<p>This could have been the end of the story. Fortunately and unfortunately, C++ does not allow optional arguments in the way that is intended here. A pointer to function has to know the exact numbers and types of arguments to a function, so the signature in this typedef will match only functions taking a <B>double</B> followed by C-style <B>varargs</B>, not functions taking further specific parameter types.</p>
<p>There might be other ways to pass functions of multiple arguments, such as trying a function wrapper, but it is not clear to the author how that can be done without resorting to global variables.</p>
<p>To put it simply, some construction is needed that holds a few parameters used to define a complex function and provides a way for a library routine to access this very function using just one argument. That would be an <I>object</I> &#151; pure and simple! Therefore, I will define a class for the general function, f(x, a, b, ...), and call it <B>FuncObj</B>. (For simplicity, the number of arguments will be fixed to three from now on.)</p>

<pre>
class FuncObj {
private:
   double _a;
   int _b;
public:
   FuncObj(double a_in, int b_in);

   // the body that defines the function
   // in terms of x, a, and b
   double theFunc(double x_init);
};
</pre>

<p>You might be tempted to use the library routine defined above by passing a pointer to the member function <B>theFunc</B> of the class <B>FuncObj</B>. This will not work, however, for two reasons. First, a pointer to member function, which contains the class name as part of its signature, cannot be used in place of a pointer to (a normal) function. Second, a pointer to member function has to be accessed through an object of that class. I address these two problems in the next section. (Note that defining <B>theFunc</B> as static would not really solve the problem: then <B>theFunc</B> would not be able to access <B>FuncObj</B>&#146;s non-static data members, which are needed to hold the other &#147;constant&#148; variables.)</p>

<H3><FONT COLOR="#000080">Using a Pointer to Member Function</FONT></H3>

<p>As I discussed in the previous section, it is necessary to modify the library interface to use it with the pointer to member function approach. Furthermore, the interface should obviously be defined as a function template so that it will not be locked to one particular class:</p>

<pre>
template &lt;class T&gt;
double NewtonRaphson(T &amp; func, double (T::*func_of_x)(double),
   double x_init, &lt;some_other_inputs&gt;) {
      ...
      // call member function through an object (reference) and
     //   a pointer to member function
     double y = (func.*func_of_x)( x_init );
     ...
}
</pre>

<p>This works, but the syntax is a little bit difficult to read.</p>
<p>One way to make the code simpler and more readable would be to create a typedef for the pointer to member function, just as one was created for the simple pointer to function earlier. In other words, it would be nice to create a typedef with a parameterized type, as in the following:</p>

<pre>
template&lt;class T&gt;
typedef double (T::*P2MF)(double);
</pre>

<p>If the above code were legal C++, then <B>P2MF</B> would be of type &#147;pointer to member function of class <B>T</B> taking a <B>double</B> as a parameter and returning a <B>double</B>.&#148; However, C++ does not support template typedefs.</p>
<p>As always, the ultimate solution in computer science is to introduce another level of indirection, in this case, by defining an enclosing template class just to make the typedef legal:</p>

<pre>
template&lt;class T&gt; struct P2MFHelper {
   typedef double (T::*P2MF)(double);
};
</pre>

<p>This constitutes a strange but interesting use of <B>template</B> and <B>typedef</B>. Now I can redefine the library function as:</p>

<pre>
template &lt;class T&gt;
double NewtonRaphson(T &amp; func, 
   P2MFHelper&lt;T&gt;::P2MF func_of_x,
   double x_init, &lt;some_other_inputs&gt;) {
   ...
   double y = 
      (func.*func_of_x)( x_init );
   ...
}
</pre>

<p>Note that the parentheses around <B>func.*func_of_x</B> are necessary for the code to compile and work correctly, because the function call operator that follows has a higher precedence than the <B>operator.*</B>. Also, note that the helper class and the library function could be combined into one single template class, which would achieve the same goal. However, it doesn&#146;t seem like a good design to make the Newton-Raphson procedure a class; needless to say, it would also result in a slightly more complex syntax. This library will be suitable for user-defined functions with various numbers of arguments, provided we define one <B>FuncObj</B>-style class to package each such function.</p>
<p>This approach has two minor problems, however. First, you can no longer pass a pointer to (a normal) function to the <B>NewtonRaphson</B> procedure. Furthermore, it is not elegant and economical to pass both an object and a pointer to member function (although in principle this might be solved by using member function adapters). Below I show how to eliminate these two &#147;nuisances.&#148;</p>

<H3><FONT COLOR="#000080">Using a Function Object</FONT></H3>

<p>A function object is a class that has an overloaded <B>()</B> operator, which is the function call operator <a href="#6">[6]</a>. Therefore, it is possible to use an overloaded operator <B>()</B> of a function object in place of a function call operator. Below I redefine <B>FuncObj</B>, the complex function of many variables, as a bona fide function object:</p>

<pre>
class FuncObj {
public:
   // overloaded operator
   double operator() (double x_init) {
      // the body of the operator 
      // implements the function and
      // is defined in terms of x, a,
      // and b
   }
};
</pre>

<p>Now the library routine can be defined more simply, using the function object directly:</p>

<pre>
template &lt;class T&gt;
double NewtonRaphson(T &amp; func, 
   double x_init,
   &lt;some_other_inputs&gt;) {
   ...
   // call a function or the operator()
   // of a function object
   double y = func( x_init );
   ...
}
</pre>

<p>Note that only one parameterized argument is passed to the <B>NewtonRaphson</B> library routine. This type can be substituted with an object reference or a pointer to a normal function. Furthermore, the syntax of the &#147;function call&#148; inside the library function body is much simpler. As an example, consider how this generic library function can be used to solve numerically the complex equation, X<SUP>3</SUP> + 2e<SUP>X</SUP> + 7 = 0, which does not have an analytic solution. The function object is defined as:</p>

<pre>
class FuncObj {
private:
   double _a;
   double _b;

public:
   FuncObj(double a_in, double b_in) :
      _a(a_in), _b(b_in) {};

   // overloaded operator
   double operator() (double x_in) {
      return ( x_in*x_in*x_in + 
         _a*exp(x_in) + _b );
   }

   double solve(double x_in) {
      // use the generic library function
      return NewtonRaphson(*this, x_in,
         other_arguments);
   }
};
</pre>

<p>The library function is used simply in the <B>main</B> program as follows:</p>

<pre>
void main() {
   FuncObj fo(2.0, 7.0);

   // call the (Newton-Raphson) library
   // function indirectly
   double solution_1 = fo.solve(-4.0);

   // call the library function directly
   double solution_2 = 
      NewtonRaphson(fo, -4.0,
      other_arguments);
}
</pre>

<p>Note that this version of the library function works both inside and outside the function object. <B>main</B> actually shows one direct call to the library function by passing an object reference. Furthermore, it is also fine to pass a suitable pointer to function to the library function.</p>
<p>For curious readers, two sample files, <B>NewtonRaphson.h</B> and <B>main.cpp</B>, are shown as <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> respectively. The former is a simplified version of the library implementation of the Newton-Raphson procedure, while the latter demonstrates the use of this function in three different ways.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>By taking advantage of two powerful C++ mechanisms, I have arrived at a reusable library implementation of the Newton-Raphson method. This library is generic and applicable to many similar problems, provided the client defines an overloaded operator <B>()</B> for that complex function (object) that the library function will call.</p>
<p>The approach described in this article is applicable to many well-known scientific algorithms that solve a class of mathematical problems. Numerical integration for an arbitrary complex function, for example, can be treated in the same fashion. Two key features of the C++ language, namely function templates and operator overloading, make this simple, elegant solution possible. The overhead of making a function an object is negligible. In fact, many real-world applications have already defined complex functions as classes, to which an overloaded <B>()</B> operator can be added whenever some generic numerical procedure, such as the Newton-Raphson algorithm, is called upon. Therefore, it is possible now to implement a whole suite of mathematical algorithms into local reusable libraries.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Jesse Liberty. <I>Beginning Objected-Oriented Analysis and Design with C++</I> (Wrox Press, 1998).</p>
<p><a name="2"></a>[2]  Geoffrey Furnish. &#147;Disambiguated Glommable Expression Templates Reintroduced,&#148; <I>C++ Report</I>, May 2000.</p>
<p><a name="3"></a>[3]  Matt Austern. <I>Generic Programming and the STL</I> (Addison-Wesley, 1999).</p>
<p><a name="4"></a>[4]  John H. Mathews. <I>Numerical Methods for Mathematics, Science and Engineering</I>, 2nd Ed. (Prentice Hall, 1992).</p>
<p><a name="5"></a>[5]  John C. Hull. <I>Options, Futures, and Other Derivatives</I>, 3rd Ed. (Prentice Hall, 1997).</p>
<p><a name="6"></a>[6]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, Special Ed. (Addison-Wesley, 2000). </p>

<p><i><B>Qiang Liu</B> is a senior programmer/analyst with Highbridge Capital Management in New York City. He holds a Ph.D. in Quantum chemistry from Cornell University. He enjoys programming with C++, VB, and Unix shell scripts. He can be reached at <B>qiangl@hcmny.com</B>.</i></p>

<h4><a href="../../../source/2001/jun01/liu.zip"></a></h4>

</blockquote></body></html>
