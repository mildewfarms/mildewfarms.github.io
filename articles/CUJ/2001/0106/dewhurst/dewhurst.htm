<HTML>   
     <HEAD>
<TITLE>June 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Split Idioms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>It is better to break a rule of thumb than to break your thumbs on a difficult problem.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><I>Word has somehow got around that a split infinitive is always wrong. This is of a piece with the sentimental and outworn notion that it is always wrong to strike a lady. </I>&#151;<I> </I>James Thurber, <I>The Owl in the Attic and Other Perplexities</I></p>
<p><I>Break any of these rules sooner than say anything outright barbarous.</I> &#151; George Orwell, <I>Politics and the English Language</I></p>
<p>I&#146;ve always thought that both the curious observation from Mr. Thurber and the more staid advice from Mr. Orwell had application to object-oriented design. In earlier columns, I may have inadvertently given the impression that our C++ programming idioms are in some way a straightjacket that controls every aspect of the design process. Far from it. Properly used, idiom can simplify the process of design and communication of a design, leaving the designer free to expend creativity where it&#146;s needed. However, there are times when use of even the most sensible and common programming idiom is inappropriate to the context of a design, and the designer is forced to depart from the standard approach to a problem.</p>
<p>In this installment, we&#146;ll examine two of our most cherished C++ programming idioms and show how departing from them in an intelligent and reasoned manner can result in a better design than we would have achieved by following them blindly.</p>

<H3><FONT COLOR="#000080">Overloading Virtual Functions</FONT></H3>
<p>In general, we avoid overloading virtual functions, because doing so is likely to defeat polymorphism. If we define polymorphism as the ability of an object to respond to several different interfaces, then we must ensure that an operation on the object exhibits the same behavior no matter what interface is used to access it. Consider the following base class fragment:</p>

<pre>
class Shape {
  public:
   //...
   virtual void rotate( int );
   virtual void rotate( double );
};
</pre>

<p>Consider a derived class produced by a designer who has determined that only the integer version of <B>rotate</B> requires different behavior in the derived class.</p>

<pre>
class Blob : public Shape {
  public:
   //...
   void rotate( int );
};
</pre>

<p>Here we have an unhappy confluence of overloading and overriding &#151; which have nothing to do with each other. The behavior of a <B>Blob</B> object will vary depending on the interface used to access it.</p>

<pre>
Blob *blob = new Blob;
Shape *shape = blob;
shape-&gt;rotate( 12.3 ); // OK
// oops! rotate(int)!
blob-&gt;rotate( 12.3 );
</pre>

<p>So, for well-behaved polymorphism, it is almost always a good idea to avoid overloading virtual functions.</p>

<H3><FONT COLOR="#000080">Virtual Visiting</FONT></H3>

<p>Almost always. Let&#146;s consider an instance of the Visitor <a href="#1">[1]</a> pattern for a hierarchy of financial instruments, where the hierarchy uses multiple inheritance to leverage subsystems written in terms of interface classes.</p>

<pre>
class Saveable { // persistent
                 // interface
    virtual void save() = 0;
    // ...
};
class Priceable { // pricing
                  // interface
    virtual void price() = 0;
    // ...
};
class Deal {
  public:
    virtual void
    accept( DealVisitor &amp; ) = 0;
    virtual void validate() = 0;
    //...
};
class Bond : public Deal,
  public Priceable {
    // Bonds can be priced
  public:
    void accept( DealVisitor &amp; );
    void validate();
    void price();
    //...
};
class Swap : public Deal,
  public Priceable,
  public Saveable {
    // Swaps can be priced and saved
    public:
      void accept( DealVisitor &amp; );
      void validate();
      void price();
      void save();
      //...
};
class Eq : public Deal
// can&#146;t do a thing with
// equities lately...
{ /* ... */ };
</pre>

<p>The use of a Visitor allows us to effectively add new operations to the <B>Deal</B> hierarchy without recompilation &#151; an important property if we don&#146;t have access to the source code and need to immediately perform some maintenance. If we follow our idiom above, we&#146;ll produce a <B>DealVisitor</B> interface with differently named functions for each deal type.</p>

<pre>
class DealVisitor {
  public:
    virtual void
    visitBond( Bond * ) = 0;
    virtual void
    visitSwap( Swap * ) = 0;
    virtual void
    visitEq( Eq * ) = 0;
};
</pre>

<p>The <B>accept</B> operation defined by each concrete <B>Deal</B> type must be written to specifically invoke the corresponding member of the <B>DealVisitor</B>.</p>

<pre>
void Swap::accept( DealVisitor &amp;v )
  { v.visitSwap( this ); }
void Bond::accept( DealVisitor &amp;v )
  { v.visitBond( this ); }
void Eq::accept( DealVisitor &amp;v )
  { v.visitEq( this ); }
</pre>

<p>This allows us to easily add new operations to the hierarchy without recompiling it.</p>

<pre>
class ProcessDeal :
  public DealVisitor {
    void visitBond( Bond *d ) {
      d-&gt;validate();
      d-&gt;price();
    }
    void visitSwap( Swap *d ) {
      d-&gt;validate();
      d-&gt;price();
      d-&gt;save();
    }
    void visitEq( Eq *d ) {
      d-&gt;validate();
    }
};
</pre>

<p>However, this design has a problem. We&#146;ve employed a Visitor in the <B>Deal</B> hierarchy in order to be able to easily maintain the hierarchy without having access to the source. After all, if we were able to straightforwardly modify and recompile the <B>Deal</B> hierarchy, we would simply have added the ability to directly process <B>Deal</B>s to the <B>Deal</B> classes themselves.</p>

<pre>
class Deal {
  public:
    virtual void
    accept( DealVisitor &amp; ) = 0;
    virtual void validate() = 0;
    virtual void process() = 0;
    //...
};
</pre>

<p>What happens if we add a new class to the hierarchy and would like to process it? The Visitor pattern works tremendously well if the hierarchies it visits are stable, but breaks loudly when the structure of a visited hierarchy is modified. Generally, this loud breakage is advantageous, because it detects errors that other approaches, such as run-time type queries, tend to overlook. However, in this case we would like to easily add a new <B>Deal</B> type and process it without recompiling the existing source. The problem is that adding a new <B>Deal</B> class requires modification of the <B>DealVisitor</B> class, which in turn requires recompilation of the <B>Deal</B> hierarchy. No good.</p>
<p>Let&#146;s overload the virtual <B>visit</B> functions in the <B>DealVisitor</B>. Live a little.</p>

<pre>
class DealVisitor {
  public:
    virtual void visit( Deal * );
    virtual void visit( Bond * ) = 0;
    virtual void visit( Swap * ) = 0;
    virtual void visit( Eq * ) = 0;
};
</pre>

<p>Here we&#146;ve used the differing argument types of the <B>visit</B> members to distinguish the functions. One advantage of this approach is that the source code of the various deal <B>accept</B> functions is simplified.</p>

<pre>
void Swap::accept( DealVisitor &amp;v )
  { v.visit( this ); }
void Swap::accept( DealVisitor &amp;v )
  { v.visit( this ); }
void NewDealType::accept
  ( DealVisitor &amp;v )
  { v.visit( this ); }
</pre>

<p>The <B>accept</B> operations for <B>Swap</B>, <B>Bond</B>, and <B>Eq</B> still invoke the appropriate type-specific <B>visit</B> operations. However, the use of overloading has allowed us to explicitly add a &#147;hook&#148; to the <B>DealVisitor</B> base class that can accept any type of <B>Deal</B> that is not handled by more specific <B>visit</B> operations. This means that our <B>NewDealType</B> can be visited by any <B>DealVisitor</B> and will be processed with whatever default behavior is provided in <B>DealVisitor::visit(Deal*)</B>. In the future, if we are able to modify the <B>DealVisitor</B> hierarchy to add a <B>visit(NewDealType *)</B> to the interface, <B>NewDealType::accept</B> will be automatically modified on recompilation to invoke the more specific <B>visit</B> operation. No source code changes.</p>
<p>The real advantage of this approach is that it permits some seriously macho hacking (all in a good cause, of course) <a href="#2">[2]</a>. Given the presence of the catchall hook in the base class, we can derive a special-purpose <B>DealVisitor</B> that is aware of the existence of <B>NewDealType</B>.</p>

<pre>
class ProcessDealHack :
  public ProcessDeal {
    void visit( Deal *d ) {
      if( NewDealType *n =
         dynamic_cast&lt;NewDealType *&gt;
           (d) )
         // process the NewDealType
      else
        // base processes
        // unrecognized deal types
        ProcessDeal::visit( d );
    }
};
</pre>

<p>&#147;What&#146;s this?&#148; you may be saying, &#147;Is this the guy who&#146;s been railing against overuse of run-time type information?&#148; Hey, read the title of the article. This is a (hopefully) temporary hack, and a very clever one. The appropriately-named <B>ProcessDealHack</B> hijacks <B>ProcessDeal::visit(Deal *)</B> to check for any new <B>Deal</B> types that may have come into existence since the compilation and release of the <B>Deal</B> hierarchy. This is only possible if we overload the virtual <B>visit</B> functions in the <B>DealVisitor</B> base class, in contradiction of the usual design idiom.</p>
<p>Note also that the major difficulty engendered by overloading virtual functions occurs when an object is accessed through both its base-class and derived-class interfaces. In the case of an instance of the Visitor pattern, the concrete derived visitor types are accessed only through the base class interface. In the code examples above, we&#146;ve made this general policy explicit by overriding the public base class virtual functions with private derived class functions <a href="#3">[3]</a>.</p>

<H3><FONT COLOR="#000080">Copy Operation Implementation</FONT></H3>

<p>One of the most common and useful C++ idioms is the copy operation idiom. Every abstract data type in C++ should make a decision about its copy assignment operator and copy constructor. Either the compiler should be allowed to write them, the programmer should write them, or they should be disallowed.</p>
<p>If the programmer writes these operations, we know exactly how they should be written. (However, the &#147;standard&#148; way of writing these operations has evolved over the years. This is one of the advantages of idiom over dictate; idiom evolves to suit the current context of use.)</p>

<pre>
class X {
  public:
    X( const X &amp; );
    X &amp;operator =( const X &amp; );
    //...
};
</pre>

<p>While the C++ language permits a lot of leeway in their definition, it is almost invariably a good idea to actually declare these operations as they are above: both operations take a reference to a constant, and the copy assignment is non-virtual and returns a reference to a non-const. Clearly, neither of these operations will change its operand. It wouldn&#146;t make sense.</p>

<pre>
X a;
X b( a ); // a won't change
a = b;    // b won't change
</pre>

<H3><FONT COLOR="#000080">Non-Standard Copying</FONT></H3>

<p>Except sometimes. The Standard C++ <B>auto_ptr</B> template has some very unusual requirements. It is a resource handle charged with cleaning up heap-allocated storage when it is no longer needed.</p>

<pre>
void f() {
  auto_ptr&lt;Blob&gt; blob( new Blob );
  //...
  // automatic deletion of Blob
}
</pre>

<p>Fine, but what happens when the student interns are set loose on this code?</p>

<pre>
void g( auto_ptr&lt;Blob&gt; arg ) {
  //...
  // automatic deletion of Blob
}
void f() {
  auto_ptr&lt;Blob&gt; blob( new Blob );
  g( blob );
  // another deletion of Blob!!!
}
</pre>

<p>One approach might be to unambiguously disallow copy operations for <B>auto_ptr</B>, but that would severely limit their use and make impossible a number of useful <B>auto_ptr</B> idioms. Another approach might be to invisibly add a reference count to the <B>auto_ptr</B>, but that would increase the expense of employing a resource handle. The approach taken by the standard <B>auto_ptr</B> is to intentionally depart from the copy operation idiom.</p>

<pre>
template &lt;class T&gt;
class auto_ptr {
  public:
    auto_ptr( auto_ptr &amp; );
    auto_ptr &amp;operator =(auto_ptr &amp;);
    //...
  private:
    T *object_;
};
</pre>

<p>(The standard <B>auto_ptr</B> also implements template member functions corresponding to these non-template copy operations, but the observations for those are similar.) Here the right-hand side of each operation is non-const! When one <B>auto_ptr</B> is initialized by or assigned to by another, the source of the initialization or assignment gives up ownership of the heap-allocated object to which it refers by setting its internal object pointer to null.</p>
<p>As is often the case when departing from idiom, there was some initial confusion about how <B>auto_ptr</B> should be properly used. However, this departure has allowed the development of a number of very productive new idioms centered around object ownership issues, and the use of <B>auto_ptr</B>s as &#147;sources&#148; and &#147;sinks&#148; of data looks to really be a very profitable new design area. In effect, a required departure from an existing, successful idiom has resulted in a family of new idioms.</p>

<H3><FONT COLOR="#000080">Gotta Split</FONT></H3>

<p>We could obviously examine many other idioms that have been successfully and properly circumvented. However, the lesson of our two examples above is clear. To slavishly follow idiom in the face of an obviously better design is often (as Winston Churchill was said to sardonically remark when an over-zealous editor criticized his ending a sentence with a preposition) &#147;an impertinence up with which [we should] not put.&#148; It is better in such situations to rationally follow the better design and boldly go where no programmer has gone before.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Gamma et al. <I>Design Patterns</I> (Addison Wesley, 1995), p. 331.</p>
<p><a name="2"></a>[2]  John Vlissides. <I>Pattern Hatching</I> (Addison Wesley, 1998), p. 79. I am not accusing the author of being macho, unless he would like to be so accused.</p>
<p><a name="3"></a>[3]  Don&#146;t try this in Java. It won&#146;t work. This is, I think, an example of the danger of trying to encode &#147;good&#148; programming style in the programming language itself rather than in its idiomatic usage.</p>

<p><i><B>Stephen C. Dewhurst</B> is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ and object-oriented mentoring and consulting, and training in advanced C++ programming, STL, and design patterns. He may be reached at &lt;www.semantics.org&gt;.</i></p>

</blockquote></body></html>
