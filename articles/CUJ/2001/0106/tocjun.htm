<HTML>
<HEAD>
<TITLE>June 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">June 2001<BR>
                Volume 19 Number 6</FONT></H3>
               
<H3><FONT COLOR="#FF0000">ALGORITHMS</FONT></H3>

<H4><A HREF="smeyers/smeyers.htm">Three Guidelines for Effective Iterator Usage</A></H4>
<p><b>Scott Meyers</b><br>
<i>It is easy to write code that uses STL iterators, but beware lest you write code that&#146;s brittle or won&#146;t port. Here are a few things you might need to know.</i></p>

<H4><A HREF="liu/liu.htm">Implementing Reusable Mathematical Procedures Using C++</A></H4>
<p><b>Qiang Liu</b><br>
<i>Algorithms that must call user-supplied functions are typically difficult to reuse. The key to reuse is finding a way to encapsulate the user-defined code.</i></p>

<H3><FONT COLOR="#FF0000">BOOK REVIEW</FONT></H3>

<H4><A HREF="glassbor/glassbor.htm">Accelerated C++</A></H4>
<p><b>reviewed by Francis Glassborow</b><br>
<i>Maybe you&#146;ve been hearing the buzz about some &#147;new approach&#148; to learning C++. Here&#146;s the book that&#146;s got everyone talking.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="rmeyers/rmeyers.htm">The New C: Compound Literals</A></H4>
<p><b>Randy Meyers</b><br>
<i>Structs in C are not quite &#147;first class types,&#148; but with the help of compound literals, they are at least a lot easier to use.</i></p>

<H4><A HREF="becker/becker.htm">STL and Generic Programming: More on Iterators</A></H4>
<p><b>Thomas Becker</b><br>
<i>To use STL iterators efficiently, you need to make decisions based on iterator type. The beauty of generic programming is that you can make those decisions at compile time.</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: Split Idioms</A></H4>
<p><b>Stephen Dewhurst</b><br>
<i>It is better to break a rule of thumb than to break your thumbs on a difficult problem.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: All Good Things</A></H4>
<p><b>Bobby Schmidt</b><br>
<i>Some words of wisdom for the departing editor, and &#151; as usual &#151; some priceless C/C++ info for readers.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: The Rule of Three</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>What you leave out of a class can cause you just as much trouble as what you put in. This simple rule will save you the most common mistakes.</i></p>

<H4><A HREF="bootle/bootle.htm">Post-Mortem Debunker: What Next?</A></H4>
<p><b>Stan Kelly-Bootle</b><br>
<i>Does time come in packets? No big deal. It&#146;s that arrow of time we all have to worry about...</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H4>
<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1906/alexandr/alexandr.htm">&quot;Generic&lt;Programming&gt;: A Policy-Based basic_string Implementation&quot;</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<I>Happy with your <B>basic_string</B> implementation? This article explains why one size does not fit all, and why you should sometimes worry about the details of your standard string implementation. Furthermore, the article provides and explains a policy-based <B>basic_string</B> implementation that gives you twelve Standard-compliant canned implementations featuring various optimizations and tradeoffs, and, most important, brings you within some 200 lines of code from your dream <B>basic_string</B> implementation.</I></p>

<H4><A HREF="../cexp1906/austern/austern.htm">&quot;The Standard Librarian: Defining a Facet&quot;</A></H4>
<p><b>by Matt Austern</b><br>
<I>Locales, originally invented for internationalization, are a general-purpose mechanism that is closely integrated with the C++ I/O library. Like all of the other components of the Standard C++ library, locales were designed to be user-extensible. This article explains what locales and locale facets are, how the locale mechanism works, and how users can define new facets to extend locale functionality.</I></p>

<H4><A HREF="../cexp1906/hyslop/hyslop.htm">&quot;Conversations: Abstract Factory, Template Style&quot;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<I>Abstract class factories can be time-consuming and difficult to maintain. Many implementations rely on manually-maintained lookup tables, extensive use of macros, or non-portable idioms. This month, our authors present a generic, portable, abstract class factory.</I></p>

<H4><A HREF="../cexp1906/langer/langer.htm">&quot;Effective C++ Standard Library: Curiously Recurring Manipulators&quot;</A></H4>
<p><b>by Klaus Kreft and Angelika Langer</b><br>
<I>Modern programming techniques make life easier. As an example, the authors study implementation of stream manipulators (which they discussed in earlier publications, but using traditional techniques). This time they combine template programming techniques, functors, and the Curiously Recurring Template pattern into an amazingly elegant solution. The contrast between classic and modern techniques is stark and convincing.</I></p>

<p><B>Visit the &quot;C++ Experts Forum&quot; at &lt;www.cuj.com/experts/&gt;.</B></P>

</BLOCKQUOTE>
</BODY>
</HTML>
