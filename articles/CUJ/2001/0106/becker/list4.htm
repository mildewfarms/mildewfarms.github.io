<HTML><HEAD>
<TITLE>June 2001/STL &amp; Generic Programming/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: A generic sample standard deviation algorithm, Version 0.9</A></h4>
<pre>
template&lt;typename _It&gt;
double SampleStandardDeviation(_It it1, _It it2)
{
  return SampleStandardDeviationInternal(
    it1,
    it2,
    _It::iterator_category()
    );
}

template&lt;typename _It&gt;
double SampleStandardDeviationInternal(
  _It it1,
  _It it2,
  std::input_iterator_tag
  )
{
  // Calculate the length of the sequence and the sum of
  // the values.
  //
  int nNumPoints = 0;
  double dblSum = 0.0;
  double dblSsq = 0.0;
  while( it1 != it2 )
  {
    dblSum += *it1;
    dblSsq += *it1 * *it1;
    ++nNumPoints;
    ++it1;
  }

  // Return the sample standard deviation.
  double n = static_cast&lt;double&gt;(nNumPoints);
  return nNumPoints &lt;= 1 ? 0.0 : (dblSsq  - dblSum * dblSum / n) /
  (n - 1.0) ;
}

template&lt;typename _It&gt;
double SampleStandardDeviationInternal(
  _It it1,
  _It it2,
  std::random_access_iterator_tag
  )
{
  // Calculate the length of the sequence and the sum of
  // the values.
  //
  double dblNumPoints = static_cast&lt;double&gt;(it2 - it1);
  double dblSum = 0.0;
  double dblSsq = 0.0;
  while( it1 != it2 )
  {
    dblSum += *it1;
    dblSsq += *it1 * *it1;
    ++it1;
  }

  // Return the sample standard deviation.
  return dblNumPoints &lt;= 1 ? 0.0 :
  (dblSsq  - dblSum * dblSum / dblNumPoints) / (dblNumPoints - 1.0) ;
}
&#151; End of Listing &#151;</pre></body></html>
