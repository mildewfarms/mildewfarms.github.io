<HTML>   
     <HEAD>
<TITLE>June 2001/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: More on Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>To use STL iterators efficiently, you need to make decisions based on iterator type. The beauty of generic programming is that you can make those decisions at compile time.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>In my last column, I introduced you to the STL iterator concept by discussing the iterators that the STL containers expose. In order to get the maximum benefit out of using the STL, it is very important to understand that STL iterators are much more than just an interface into STL containers. Understanding and using STL-style iterators as a programming concept will significantly improve the readability, maintainability, and efficiency of your code, and it will increase the productivity in your shop. In this column, I will show how iterators fit into the big picture of software design and generic programming. This will lead us to some of the more complex aspects of the STL iterator concept, namely, iterator categories and iterator traits. Once we have mastered these, the stage is set for all kinds of creative uses of iterators.</p>

<H3><FONT COLOR="#000080">Iterators in the Big Picture: an Example</FONT></H3>

<p>If you have ever driven past one of these huge oil refineries, or a similar chemical processing plant, then you have probably wondered how on earth these people keep track of what&#146;s flowing where in this maze of pipes and tanks and valves and what have you not. The first real C++ project I ever worked on was an extension to a popular general-purpose CAD (computer-aided design) system. The purpose of the extension was to facilitate the drawing of various kinds of blueprints for large systems of pipes, tanks, and related accessories, as found in oil refineries and other chemical plants. Once these plants are up and running, pretty much the only visible human activity in there is people crawling around checking for corrosion and attrition. This is done by taking measurements of the thickness of the metal walls and the welding seams, using sonar and X-ray technologies so that it can be done from the outside and while the plant is in operation. The people who do this must of course be given &#147;roadmaps&#148; to help them find their way around and to identify the points where they are supposed to take measurements. Most of our customers used our software to draw these &#147;roadmaps,&#148; and to update them when modifications were made to the plant, or when the maintenance people decided to change the locations of the measurements.</p>
<p>When I joined the team, our software was strictly a drawing tool. The results of the measurements were stored in a completely separate database, typically on a different machine in a different building. When it came to evaluating the maintenance state of the plant, someone made printouts of the numbers and printouts of our drawings and then mulled over this mound of papers, trying to figure out what parts of the system, if any, needed attention. Needless to say, it didn&#146;t take long for people to come up with the idea to integrate the database holding the measurements with our software, which in turn was integrated with the CAD system. That way, the maintenance people would be able to bring up our drawings in the CAD system, click on a point of measurement, or an entire pipe or tank, and then bring up a variety of charts and tables displaying important items: the history of the wall thickness at one point of measurement, the thinnest point along a pipe as of the most recent measurement, the standard deviation of the most recent measurements along a pipe, and so on. It was our task to write and integrate the software to do this.</p>
<p><a href="fig1.htm">Figure 1</a> shows the obvious overall architecture of such a system. At the top, there is a UI layer that consists of two parts. The part labeled &#147;User Request Input&#148; gathers one or more requests from the user. This part is responsible for bringing up dialog boxes when the user has selected an element in the drawing, and for packaging the user&#146;s request into some object format. The other part of the UI layer is responsible for displaying raw numbers as charts or tables in windows that are separate from the one that shows the drawing.</p>
<p>At the bottom of the architecture is a database access layer that is responsible for pulling numbers out of the database and placing them into appropriately designed objects. Since we were working with an existing relational database, we were actually designing a prehistoric object-relational mapping module here, but since it was all read-only access, that was not a big issue.</p>
<p>Right above the database access layer sits a number cruncher that performs any calculations that a particular request may require, such as computing a standard deviation. In many cases, this layer just forwards raw numbers. The center of the whole thing is a request broker that looks at a user request, obtains the necessary numbers from the number cruncher, and passes them on to the display module together with the instruction to display these numbers in a certain chart or table format.</p>
<p>Why am I discussing the overall architecture of an ancient piece of software when I should be talking about the creative use of STL-style iterators? The reason is that I want to emphasize how generic programming in general and STL-style iterators in particular are much more than just low-level implementation techniques. Software design at all levels is influenced by the paradigms that are available in the respective solution space. Much like the object paradigm, generic programming is an important programming paradigm that is available in the solution space provided by the C++ language. It will therefore have an impact on many high-level design decisions <a href="#1">[1]</a>.</p>
<p>When we designed and wrote the software that I&#146;m talking about, there was no STL. Therefore, I&#146;ll be discussing how I would use generic programming and the STL in the design and implementation of such a program today (and have in fact used them in similar situations). As far as generic programming techniques are concerned, the most important thing to notice in our example is the fact that the results that are passed from the database access layer to the number cruncher and on to the display engine are typically sequences. When I display the thickness of the metal at a certain point on a pipe versus time, then I am looking at a sequence of points in a coordinate system, given by a sequence of dates as my x-coordinates and a sequence of numbers as my y-coordinates. Similarly, the rows or columns of a table often come naturally as sequences. One of the first global design decisions that should be made here &#151; in fact, it should be a general design rule for all software that is to be implemented in C++ &#151; is to pass around all sequences of numbers, dates, and the like, as pairs of iterators. Moreover, all functions that accept such a pair of iterators should be written as function templates with the type of iterator as a template parameter.</p>
<p>There are at least two major benefits to be reaped from such a design. First of all, and this is not to be underestimated, it makes for uniformity of style, which in turn improves readability and maintainability of the code. Secondly, by giving the components of your software generic interfaces, you greatly increase their interoperability and reusability. If you follow the rule of representing sequences as pairs of iterators and templatizing iterator types wherever possible, then every module that exposes sequences can work with any module that accepts sequences as its input.</p>
<p>Now let us look at the impact of this design decision on the relevant components in our example. Of the five modules in the example, three are affected strongly by this decision, namely, the display module, the database access module, and the number cruncher. For the display module, it means that the interface methods that accept the sequences of numbers or dates to be displayed in charts or tables must be function templates that accept a pair of iterators, with the type of the iterators being the template parameter. Somewhere deep inside this module, the drawing code will perform an iteration over these sequences, using them as x- and y-coordinate sequences of points to be drawn. If the actual drawing is deferred to a third-party charting package, then it may be necessary to insert an adaptation layer in order to translate the iterator idiom into whatever interface the charting package uses.</p>
<p>Recall that in the database access layer, we read sequences of numbers and dates out of a relational database and place them into various kinds of objects. An example would be an object that holds the measurents of wall thickness taken along one particular pipe on one particular date. This object holds all manner of general information such as the identifier of the pipe, the date the measurement was taken, information about the device used and the person or team that took the measurement, and so on. The actual numbers would naturally be placed into an STL <B>vector</B> in ascending order, according to the numbering of the points of measurement along the pipe. This sequence must then be exposed to the client of the class through a pair of iterators. <a href="list1.htm">Listing 1</a> shows the typical way to do this. Exposing a typedef for the type of iterator makes client code easier to write and look prettier, and it gives the author of the class the discretion to change the way the numbers are internally stored (which is not very likely to happen in this simple example, but it can be in more complex examples). Other than that, all that needs to be done is to forward the <B>begin</B>, <B>end</B>, and <B>size</B> methods to the underlying vector. Since the numbers are to be read-only by the client, it would be very poor style to expose non-const iterators here.</p>
<p>Next, let us assume that we also have a class that holds the measurements taken at a single point at different dates. Naturally, you would store this data inside the class as a vector of pairs, where each pair holds a date and a double. Now, exposing plain iterators for this collection to the clients of this class won&#146;t do you much good. There may of course be some use for iterators pointing to such pairs. But clients will also want to do things such as calculating the median of the sequence of numbers. To be able to use generic algorithms for these purposes, clients of the class will want one pair of iterators that represents the sequence of numbers and another that represents the sequence of dates.</p>
<p>One way to do this would be to store the data in two parallel vectors rather than as a vector of pairs. This might be acceptable in this simple example, but it is certainly not a very satisfactory general solution for the issue at hand. In the spirit of the generic programming paradigm, what is called for here is a generic adaptor mechanism to turn an iterator pointing to a class or struct with public data members into an iterator pointing to a particular member of this class or struct. The STL does not provide such a mechanism. Instead, this is a perfect example of how the STL can and should be extended. That way, using the STL is much more than just using somebody else&#146;s library; it is a starting point for introducing the generic programming paradigm into your software design. The adapting mechanism that I am talking about is in fact provided under the name <B>IteratorToMember</B> in an article that I wrote for this journal in 1998 <a href="#2">[2]</a>. I will look at this in more detail in my next column, after we have discussed iterator categories and iterator traits.</p>
<p>The third and last of the three modules in our example that are strongly affected by the use of iterators is the number crunching module. This module will provide a collection of algorithms to calculate things such as the standard deviation of a sequence of numbers. In keeping with the principles of generic programming, these must be written as function templates that receive their input sequence as a pair of iterators, with the type of the iterator being the template argument. <a href="list2.htm">Listing 2</a> shows an implementation of the sample standard deviation that follows this style <a href="#3">[3]</a>.</p>
<p>One thing you should notice about this implementation is that it is somewhat inefficient when the iterators are of type <B>std::vector::iterator</B>. In this case, the number of points could have been determined more efficiently as</p>

<pre>
double dblNumPoints =
   static_cast&lt;double&gt;(it2 - it1);
</pre>

<p>But we also know that other iterators, such as STL <B>list</B>, <B>map</B>, or <B>set</B> iterators, do not define subtraction. Therefore, using the above line in our algorithm would seriously take away from its genericity. </p>
<p>This would be a very annoying situation if the STL did not have a solution to it. First of all, the STL defines a categorization of iterators. This allows us to identify those categories for which an operation such as subtraction of iterators is defined and those for which it isn&#146;t. Secondly, and more importantly, the STL provides us with a generic mechanism, called <I>traits,</I> to determine what category an iterator type belongs to and to select which operation to use accordingly. In our example, this mechanism will allow us to use the most efficient way of calculating the number of points in the sequence. The rest of this column will be devoted to a discussion of iterator categories and iterator traits.</p>

<H3><FONT COLOR="#000080">Iterator Categories</FONT></H3>

<p>The STL defines five different categories of iterators, namely, input iterators, output iterators, forward iterators, bidirectional iterators, and random access iterators. For a detailed discussion of these iterators, see for example Section 2.3 and Chapter 7 in Matt Austern&#146;s book <a href="#4">[4]</a>. Another source that does a very nice job explaining iterator categories is Nicolai Josuttis&#146; book <a href="#5">[5]</a>. Here, I will just give you a brief description and an example for each of the categories.</p>
<p>An input iterator is an iterator that can be dereferenced in order to retrieve the value at the current position, but not to set that value. An input iterator can be moved forward by one step by means of <B>operator++</B>. Finally, when a sequence is given by a pair of input iterators, only one pass through the sequence is allowed. A subsequent pass through the sequence may yield different values. An output iterator obeys restrictions very similar to those of the input iterator, except that the dereferenced value of the iterator can only be set, but not retrieved.</p>
<p>Standard examples for input and output iterators are the STL stream and stream buffer iterators. <a href="list3.htm">Listing 3</a> shows an example. The first line defines an iterator for the stream buffer that is connected to <B>cin</B>. This is an input iterator. Upon dereferencing, it will return the current character; when incremented, the iterator will point to the next character from the stream buffer. The second line defines a default-constructed stream buffer iterator, which serves as an end-of-stream indicator. The third line defines an iterator for the stream buffer that is connected to <B>cout</B>. This is an output iterator. Assigning to <B>*it_out</B> will write the assigned character to the stream buffer; incrementing is actually a no-op in this case.</p>
<p>The call to <B>std::copy</B> in the last line of <a href="list3.htm">Listing 3</a> iterates over the sequence that is delimited by <B>it_in</B> and <B>eos</B> and copies each value of this sequence to a sequence of equal length that begins with <B>it_out</B>. It should now be clear what the overall effect of this code snippet is: it echoes keyboard input back to the console until the user enters Ctrl-Z. For more information on stream buffers and their iterators, you may want to go back to Matt Austern&#146;s column in the March 2001 issue of this journal <a href="#6">[6]</a>.</p>
<p>The third iterator category that the STL defines are forward iterators. A forward iterator is, in a sense, a combination of an input and output iterator insofar as it allows both reading and writing of its dereferenced value. Writing the value is of course prohibited when the iterator in question is a const iterator, but that restriction is independent of the iterator category. Moreover, forward iterators allow arbitrarily many passes through the sequences they delimit; that is, the dereferenced values will be the same no matter how many times you iterate over the sequence. A restriction that forward iterators share with input and output iterators is that they can only be incremented, not decremented, and incrementing happens one step at a time. A natural example for a forward iterator would be the iterator that is exposed by a singly linked list. The STL does not have singly linked lists, but they are an extension to the STL that is commonly found in STL implementations (see for example <a href="#4">[4]</a>, Section 16.1.3 for more details). It should be clear that the iterators exposed by a list whose nodes have forward pointers to the respective next node, but no backward pointers to the respective previous node, will match the above description of forward iterators.</p>
<p>The fourth iterator category is bidirectional iterators. Bidirectional iterators add just one feature to forward iterators, namely, the ability to be decremented by one step. The natural example is, of course, the iterator that is exposed by a doubly linked list, such as <B>std::list</B>.</p>
<p>The last iterator category, random access iterators, adds to the properties of bidirectional iterators the ability to increment and decrement the iterator by arbitrarily many steps by means of <B>operator+(int)</B> and <B>operator-(int)</B>, and to retrieve the distance between two iterators by subtracting one from the other, all in amortized constant time. Another way of viewing random access iterators is to say that they truly behave like C-style pointers, whereas the iterators in the other categories are similar to pointers, but lack certain features that we would expect from a pointer-like object. Examples of random access iterators are, well, C-style pointers. In the STL, the natural example of a random access iterator is <B>std::vector::iterator</B>. This is another reason for making <B>std::vector</B> the default choice among the STL containers: it gives you the best iterator.</p>

<H3><FONT COLOR="#000080">Iterator Traits</FONT></H3>

<p>So far, the STL&#146;s categorization of iterators is nothing more than terminology. I said before that the STL actually enables us to write our templatized algorithms in such a way that we make the best use of the iterator type supplied as a template argument. What makes this problem a bit tricky is that the &#147;branching&#148; of the code according to the iterator category has to take place at compile time. That is because some iterator types use methods that others don&#146;t even have, so the code used for one iterator type would not even compile for another.</p>
<p>I&#146;ll take you to the STL&#146;s solution to this problem in two steps. First of all, the STL defines, for each iterator category, a corresponding struct with an empty definition:</p>

<pre>
struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag :
  public input_iterator_tag {};
struct bidirectional_iterator_tag :
  public forward_iterator_tag {};
struct random_access_iterator_tag :
  public
    bidirectional_iterator_tag {};
</pre>

<p>You can see that the inheritance hierarchy that these structs form reflects the refinement hierarchy of the iterator categories&#146; definition. The only flaw is that <B>forward_iterator_tag</B> should be derived from both <B>input_iterator_tag</B> and <B>output_iterator_tag</B>. Nobody seems to have an explanation for why it isn&#146;t <a href="#7">[7]</a>.</p>
<p>Each iterator class written for use with the STL contains a typedef that identifies the category of the iterator. For example, every time we write a random access iterator, we put</p>

<pre>
typedef random_access_iterator_tag
   iterator_category;
</pre>

<p>inside the iterator&#146;s definition. We may then use function overloading to make our algorithms select the appropriate code according to the category of the iterator type. <a href="list4.htm">Listing 4</a> shows how we would write our standard deviation algorithm using this technique. The top-level function calls an internal helper function that takes an additional dummy argument. A temporary object whose type is the respective iterator category is passed as this argument. The helper function is overloaded on this dummy argument, and voila, we have branched out according to the iterator category.</p>
<p>This all sounds very nice, but it still falls short of being a satisfactory solution to our problem of selecting code according to iterator category. The problem is that iterators may be primitive types, namely, plain old pointers. It is impossible to make the category typedef a part of these iterators&#146; definition. We must have a way to &#147;affix&#148; the iterator category externally to these types. To this end, the STL introduces a struct called <B>iterator_traits</B>:</p>

<pre>
template&lt;typename _It&gt;
struct iterator_traits
{
  typedef typename _It::iterator_category
     iterator_category;
  // some more stuff
};
</pre>

<p>The struct <B>iterator_traits</B> contains just typedefs. I will only talk about <B>iterator_category</B> here; I&#146;ll let you use your favorite book to learn about the other typedefs in <B>iterator_traits</B>. To see how <B>iterator_traits</B> are used, look at <a href="list5.htm">Listing 5</a>. Here, you see the final version of the algorithm <B>SampleStandardDeviation</B>. Only the top-level algorithm changes from <a href="list4.htm">Listing 4</a>; the internal helpers remain the same. At first glance, this seems to be just an unnecessarily complicated version of what we did in <a href="list4.htm">Listing 4</a>. Rather than getting the iterator category from the iterator directly, as in</p>

<pre>
_It::iterator_category
</pre>

<p>the version of <a href="list4.htm">Listing 4</a> goes through <B>iterator_traits&lt;_It&gt;</B>, as in</p>

<pre>
std::iterator_traits&lt;_It&gt;::
  iterator_category
</pre>

<p>But the latter is typedefed to be the former, so there is no difference at all. What have we gained by introducing the <B>iterator_traits</B>? Let&#146;s look at the case that caused trouble before, namely, the case where the iterator is in fact a plain old pointer. What the STL does is define a partial specialization of <B>iterator_traits</B> that covers all plain pointers:</p>

<pre>
template&lt;typename T&gt;
struct iterator_traits&lt;T*&gt;
{
  typedef
  std::random_access_iterator_tag
    iterator_category;
  // some more stuff
};
</pre>

<p>Therefore, whenever the algorithm <B>SampleStandardDeviation</B> gets called with two plain pointers as its arguments, the function will no longer try to get the iterator category from the iterator type&#146;s definition. Instead, it will use the above partial specialization and will thus find that the pointers are random access iterators. <I>Quod erat demonstrandum,</I> which was to be shown. Be sure to understand the supreme beauty of this solution. By default, all iterator classes define their iterator category by typedefing <B>iterator_category</B> in their definition. If that cannot be done because the iterator type is a basic type, or because the iterator class was written by a third party without consideration for use with the STL, then a specialization or partial specialization of <B>iterator_traits</B> steps in to &#147;attach&#148; the iterator category to the iterator type.</p>
<p>Two remarks are in order. The first one is good news: this technique of using a traits struct in order to branch on the type of a template argument is not limited to iterators. It is a powerful tool in generic programming. A very nice introduction by Andrei Alexandrescu to this technique can be found in one of the last issues of the now defunct C++ Report <a href="#8">[8]</a>. I will come back to this subject in this column sometime in the near future. The second remark is terrible news. This whole beautiful setup of <B>iteator_traits</B> is not going to work with the compiler that many of you are probably using, namely Microsoft&#146;s Visual C++. The reason is that this compiler does not support partial template specialization as required by the Standard. But we just saw that partial template specialization is an integral part of the <B>iterator_traits</B> mechanism. Pop, goes the weasel. In my next column, I will touch briefly on how the STL implementation that comes with Visual C++ works around this shortcoming.</p>

<H3><FONT COLOR="#000080">Addendum</FONT></H3>

<p>In my last column, I used the example of the word-counting program to explain some things about <B>std::map</B>. My discussion was centered around this piece of code:</p>

<pre>
++(mapWordCount.insert
  (std::make_pair(strCurrentWord, 0))
    .first-&gt;second);
</pre>

<p>Several readers have pointed out that I should have mentioned an alternative, and much simpler way of expressing the same thing:</p> 

<pre>
++mapWordCount[strCurrentWord];
</pre>

<p><B>std::map</B> offers <B>operator[]</B> as an alternative to the <B>insert</B> method. As a rule, using <B>operator[]</B> makes the code simpler to read. My original line of code is, in fact, a textbook example for how <B>operator[]</B> simplifies the code. However, it is important to realize that there is no gain in efficiency <a href="#9">[9]</a>. If you step into <B>std::map::operator[]</B>, you will see that it is indeed little more than a convenient shorthand notation for <B>std::map::insert</B>. In order to understand what is going on, there is no way around going through the lengthy discussion that I gave in my last column. Using array-style notation is nothing more than syntactic sugar, but, as astute reader David Callaway so aptly put it, very sweet syntactic sugar indeed.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  For an enlightening treatise on the relationship between problem domain and solution domain in software design, see James O. Coplien, <I>Multiparadigm Design for C++</I> (Addison-Wesley, 1998).</p>
<p><a name="2"></a>[2]  Thomas Becker. &#147;Smart Iterators and STL,&#148; <I>C/C+ Users Journal</I>, September 1998, pp. 39-45.</p>
<p><a name="3"></a>[3]  In this context, the word &#147;sample&#148; does not refer to sample code or anything like that. In statistics, there are two different kinds of standard deviation, the sample standard deviation and the  population standard deviation, and this is the sample one.</p>
<p><a name="4"></a>[4]  Matthew H. Austern. <I>Generic Programming and the STL</I> (Addison-Wesley, 1998).</p>
<p><a name="5"></a>[5]  Nicolai M. Josuttis. <I>The C++ Standard Library: A Tutorial and  Reference</I> (Addison-Wesley, 1999).</p>
<p><a name="6"></a>[6]  Matthew H. Austern. &#147;The Standard Librarian: Streambufs and Streambuf Iterators,&#148; <I>C/C++ Users Journal,</I> March 2001, pp. 72-76</p>
<p><a name="7"></a>[7]  In Section 19.2.3 of his book, <I>The C++ Programming Language,</I> Third  Edition (Addison-Wesley, 1997), Bjarne Stroustrup says: &#147;... we would expect <B>forward_iterator_tag</B> to be derived from <B>output_iterator_tag</B> as well as from <B>input_iterator_tag</B>. The reasons that it is not are  obscure and probably invalid. However, I have yet to see an example in which that derivation would have simplified real code.&#148;</p>
<p><a name="8"></a>[8]  Andrei Alexandrescu. &#147;Traits: The else-if-then of Types,&#148; <I>C++ Report,</I> April 2000, pp. 22-25, 31</p>
<p><a name="9"></a>[9]  It is true that there are some very subtle efficiency considerations when it comes to choosing between <B>map::insert</B> and <B>map::operator[]</B>. These considerations have to do with constructing objects of the map's value type. Therefore, this is pretty much a moot point when the value type is <B>int</B>.</p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

</blockquote></body></html>
