<HTML>   
     <HEAD>
<TITLE>June 2001/Three Guidelines for Effective Iterator Usage</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   Algorithms</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Three Guidelines for Effective Iterator Usage</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Scott Meyers</FONT></H3>

<BLOCKQUOTE>
<p>It is easy to write code that uses STL iterators, but beware lest you write code that&#146;s brittle or won&#146;t port. Here are a few things you might need to know.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>[This article is based on a forthcoming book. S. Meyers, Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library, Adapted from items 26-28. &copy; 2001 Addison-Wesley. Reproduced by permission of Pearson Education, Inc.]</p>
<p>At first glance, STL iterators appear straightforward. Look more closely, however, and you&#146;ll notice that containers actually offer four different iterator types: <B>iterator</B>, <B>const_iterator</B>, <B>reverse_iterator</B>, and <B>const_reverse_iterator</B>. From there it&#146;s only a matter of time until you note that of these four types, only one is accepted by containers in certain forms of <B>insert</B> and <B>erase</B>. That&#146;s when the questions begin. Why four different types? What is the relationship among them? Are they interconvertible? Can the different types be mixed in calls to algorithms and STL utility functions? How do these types relate to containers and their member functions?</p>
<p>This article, drawn from my new book, <I>Effective STL</I> <a href="#1">[1]</a><I>,</I> answers these questions through three specific guidelines that will help you get the most out of STL iterators.</p>

<H3><FONT COLOR="#000080">Guideline 1: Prefer iterator to const_iterator, reverse_iterator, and const_reverse_iterator</FONT></H3>

<p>For a <B>container&lt;T&gt;</B>, the type <B>iterator</B> acts like a <B>T*</B>, while <B>const_iterator</B> acts like a <B>const T*</B> (which you may also see written as a <B>T const *</B>; they mean the same thing <a href="#2">[2]</a>). Incrementing an <B>iterator</B> or a <B>const_iterator</B> moves you to the next element in the container in a traversal starting at the front of the container and proceeding to the back. <B>reverse_iterator</B> and <B>const_reverse_iterator</B> also act like <B>T*</B> and <B>const T*</B>, respectively, except that incrementing these iterator types moves you to the next element in the container in a traversal from back to front.</p>
<p>Let me show you two things. First, take a look at some signatures for <B>insert</B> and <B>erase</B> in <B>vector&lt;T&gt;</B>:</p>

<pre>
iterator insert(<font color=#FF0000>iterator</font> position,
                const T&amp; x);

iterator erase(<font color=#FF0000>iterator</font> position);

iterator erase(<font color=#FF0000>iterator</font> rangeBegin,
               <font color=#FF0000>iterator</font> rangeEnd);
</pre>

<p>Every standard container offers functions analogous to these, though the return types vary, depending on the container type. The thing to notice is that these functions demand parameters of type <B>iterator</B>. Not <B>const_iterator</B>, not <B>reverse_iterator</B>, not <B>const_reverse_iterator</B>. Always <B>iterator</B>. Though containers support four iterator types, one of those types has privileges the others do not have. That type is <B>iterator</B> &#151; <B>iterator</B> is special <a href="#3">[3]</a>.</p>
<p>The second thing I want to show you is this diagram, which displays the conversions that exist among iterator types:</p>

<IMG SRC="diagram1.gif">

<p>The diagram shows that there are implicit conversions from <B>iterator</B> to <B>const_iterator</B>, from <B>iterator</B> to <B>reverse_iterator</B>, and from <B>reverse_iterator</B> to <B>const_reverse_iterator</B>. It also shows that a <B>reverse_iterator</B> may be converted into an <B>iterator</B> by using the <B>reverse_iterator</B>&#146;s <B>base</B> member function, and a <B>const_reverse_iterator</B> may similarly be converted into a <B>const_iterator</B> via <B>base</B>. The diagram does not show that the iterators obtained from <B>base</B> may not be the ones you want. We&#146;ll explore that issue in Guideline 3.</p>
<p>Observe that there is no way to get from a <B>const_iterator</B> to an <B>iterator</B> or from a <B>const_reverse_iterator</B> to a <B>reverse_iterator</B>. This is important, because it means that if you have a <B>const_iterator</B> or a <B>const_reverse_iterator</B>, you&#146;ll find it difficult to use those iterators with some container member functions. Such functions demand <B>iterator</B>s, and since there&#146;s no conversion path from the const iterator types back to <B>iterator</B>, the const iterator types are largely useless if you want to use them to specify insertion positions or elements to be erased.</p>
<p>Don&#146;t be fooled into thinking that this means const iterators are useless in general. They&#146;re not. They&#146;re perfectly useful with algorithms, because algorithms don&#146;t usually care what kind of iterators they work with, as long as they are of the appropriate category. Const iterators are also acceptable for many container member functions. It&#146;s only some forms of <B>insert</B> and <B>erase</B> that are picky.</p>
<p>I wrote that const iterators are &#147;largely&#148; useless if you want to specify insertion positions or elements to be erased. The implication is that they are not completely useless. That&#146;s true. They can be useful if you can find a way to get an <B>iterator</B> from a <B>const_iterator</B> or from a <B>const_reverse_iterator</B>. That&#146;s often possible. It isn&#146;t <I>always</I> possible, however, and even when it is, the way to do it isn&#146;t terribly obvious. It may not be terribly efficient, either. Guideline 2 is devoted to this topic, so I&#146;ll defer it until then. For now, we have enough information to understand why it often makes sense to prefer <B>iterator</B>s to const and reverse iterators:</p>

<UL><LI>   Some versions of <B>insert</B> and <B>erase</B> require <B>iterator</B>s. If you want to call those functions, you&#146;re going to have to produce <B>iterator</B>s. Const and reverse iterators won&#146;t do.</LI>
<LI>   It&#146;s not possible to implicitly convert a const iterator to an <B>iterator</B>, and the technique described in Guideline 2 for generating an <B>iterator</B> from a <B>const_iterator</B> is neither universally applicable nor guaranteed to be efficient.</LI>
<LI>   Conversion from a <B>reverse_iterator</B> to an <B>iterator</B> may require iterator adjustment after the conversion. Guideline 3 explains when and why.</LI></UL>

<p>All these things conspire to make working with containers easiest, most efficient, and least likely to harbor subtle bugs if you prefer <B>iterator</B>s to their const and reverse colleagues.</p>
<p>Practically speaking, you are more likely to have a choice when it comes to <B>iterator</B>s and <B>const_iterator</B>s. The decision between <B>iterator</B> and <B>reverse_iterator</B> is often made for you. You either need a front-to-back traversal or a back-to-front traversal, and that&#146;s pretty much that. You choose the one you need, and if that means choosing <B>reverse_iterator</B>, you choose <B>reverse_iterator</B> and use <B>base</B> to convert it to an <B>iterator</B> (possibly preceded by an offset adjustment, as we&#146;ll see in Guideline 3) when you want to make calls to container member functions that require <B>iterator</B>s.</p>
<p>When choosing between <B>iterator</B>s and <B>const_iterator</B>s, there are reasons to choose <B>iterator</B>s even when you could use a <B>const_iterator</B> and when you have no need to use the iterator as a parameter to a container member function. One of the most irksome involves comparisons between <B>iterator</B>s and <B>const_iterator</B>s. I hope we can all agree that this is reasonable code:</p>

<pre>
// STL container and iterator types
// are easier to work with if you
// use some typedefs
typedef deque&lt;int&gt; IntDeque;                
typedef IntDeque::iterator Iter;            
typedef IntDeque::const_iterator
  ConstIter;
                                            
Iter i;
ConstIter ci;
...  // make i and ci point into
     // the same container

// compare an iterator and a
// const_iterator
<font color=#FF0000>if (i == ci) ...</font>
</pre>

<p>All we&#146;re doing here is comparing two iterators into a container, the kind of comparison that&#146;s the bread and butter of the STL. The only twist is that one object is of type <B>iterator</B> and one is of type <B>const_iterator</B>. This should be no problem. The <B>iterator</B> should be implicitly converted into a <B>const_iterator</B>, and the comparison should be performed between two <B>const_iterator</B>s.</p>
<p>With well-designed STL implementations, this is precisely what happens, but with other implementations, the code will not compile. The reason is that such implementations declare <B>operator==</B> for <B>const_iterator</B>s as a member function instead of as a non-member function <a href="#4">[4]</a>, but the cause of the problem is likely to be of less interest to you than the workaround, which is to swap the order of the iterators, like this:</p>

<pre>
// workaround for when the
// comparison above won't compile
if (<font color=#FF0000>ci</font> == <font color=#FF0000>i</font>) ... 
</pre>

<p>This kind of problem can arise whenever you mix <B>iterator</B>s and <B>const_iterator</B>s (or <B>reverse_iterator</B>s and <B>const_reverse_iterator</B>s) in the same expression, not just when you are comparing them. For example, if you try to subtract one random access iterator from another,</p>

<pre>
if (i - ci &gt;= 3) ... // if i is at
                     // least 3
                     // beyond ci ...
</pre>

<p>your (valid) code may be (incorrectly) rejected if the iterators aren&#146;t of the same type. The workaround is what you&#146;d expect (swap the order of <B>i</B> and <B>ci</B>), but in this case you have to take into account that you can&#146;t just replace <B>i - ci</B> with <B>ci - i</B>:</p>

<pre>
// workaround for when the above
// won't compile
if (<font color=#FF0000>ci + 3 &lt;= i</font>) ...
</pre>

<p>The easiest way to guard against these kinds of problems is to minimize your mixing of iterator types, and that, in turn, leads back to preferring <B>iterator</B>s to <B>const_iterator</B>s. From the perspective of const correctness (a worthy perspective, to be sure), staying away from <B>const_iterator</B>s simply to avoid potential implementation shortcomings (all of which have straightforward workarounds) seems unjustified, but in conjunction with the anointed status of <B>iterator</B>s in some container member functions, it&#146;s hard to avoid the practical conclusion that <B>const_iterator</B>s are not only less useful than <B>iterator</B>s, sometimes they&#146;re just not worth the trouble.</p>

<H3><FONT COLOR="#000080">Guideline 2: Use distance and advance to Convert const_iterators to iterators</FONT></H3>

<p>Guideline 1 points out that some container member functions that take iterators as parameters insist on <B>iterator</B>s; <B>const_iterator</B>s won&#146;t do. So what do you do if you have a <B>const_iterator</B> in hand, and you want to, say, insert a new value into a container at the position indicated by the iterator? Somehow you&#146;ve got to turn your <B>const_iterator</B> into an <B>iterator</B>, and you have to take an active role in doing it, because there is no implicit conversion from <B>const_iterator</B> to <B>iterator</B>. </p>
<p>I know what you&#146;re thinking. You&#146;re thinking, &#147;When all else fails, get a bigger hammer.&#148; In the world of C++, that can mean only one thing: casting. Shame on you for such thoughts. Honestly, where do you get these ideas?</p>
<p>Let us confront this cast obsession of yours head on. Look what happens when you try to cast a <B>const_iterator</B> to an <B>iterator</B>:</p>

<pre>
// convenience typedefs
typedef deque&lt;int&gt; IntDeque;
typedef IntDeque::iterator Iter;
typedef IntDeque::const_iterator
  ConstIter;

// ci is a const_iterator
ConstIter ci;
...

// error! no implicit conversion from
// const_iterator to iterator
Iter i(ci);  

// still an error! can't cast a
// const_iterator to an iterator
Iter i(const_cast&lt;Iter&gt;(ci));
</pre>

<p>This example happens to employ <B>deque</B>, but the outcome would be the same for <B>list</B>, <B>set</B>, <B>multiset</B>, <B>map</B>, and <B>multimap</B>, as well as the non-standard STL containers based on hash tables <a href="#5">[5]</a>. The line using the cast <I>might</I> compile in the case of <B>vector</B> or <B>string</B>, but those are special cases we&#146;ll consider in a moment.</p>
<p>The reason the cast generally won&#146;t compile is that for these container types, <B>iterator</B> and <B>const_iterator</B> are completely different classes, barely more closely related to one another than are <B>string</B> and <B>complex&lt;double&gt;</B>. Trying to cast one type to the other is nonsensical, and that&#146;s why the <B>const_cast</B> is rejected. <B>static_cast</B>, <B>reinterpret_cast</B>, and a C-style cast would lead to the same end.</p>
<p>Alas, the cast that won&#146;t compile might compile if the iterators&#146; container were a <B>vector</B> or a <B>string</B>. That&#146;s because it is common for implementations of these containers to use real pointers as iterators. For such implementations, <B>vector&lt;T&gt;::iterator</B> is a typedef for <B>T*</B>, <B>vector&lt;T&gt;::const_iterator</B> is a typedef for <B>const T*</B>, <B>string::iterator</B> is a typedef for <B>char*</B>, and <B>string::const_iterator</B> is a typedef for <B>const char*</B>. With such implementations, the <B>const_cast</B> from a <B>const_iterator</B> to an <B>iterator</B> will compile and do the right thing, because the cast is converting a <B>const T*</B> into a <B>T*</B>. Even under such implementations, however, <B>reverse_iterator</B>s and <B>const_reverse_iterator</B>s are true classes, so you can&#146;t <B>const_cast</B> a <B>const_reverse_iterator</B> to a <B>reverse_iterator</B>. Also, even implementations where <B>vector</B> and <B>string</B> iterators are pointers might use that representation only when compiling in release mode <a href="#6">[6]</a>. All these factors lead to the conclusion that casting const iterators to iterators is ill-advised even for <B>vector</B> and <B>string</B>, because its portability is doubtful.</p>
<p>If you have access to the container a <B>const_iterator</B> came from, there is a safe, portable way to get its corresponding i<B>terator</B>, and it involves no casts that circumvent the type system. Here&#146;s the essence of the solution, though it has to be modified slightly before it will compile:</p>

<pre>
// as before
typedef deque&lt;int&gt; IntDeque; 

typedef IntDeque::iterator Iter;
typedef IntDeque::const_iterator
  ConstIter;

IntDeque d;
ConstIter ci;

...  // make ci point into d 

// initialize i to d.begin()
Iter i(d.begin());
                   
// move i up to where ci is
// (but see below for why this must
// be tweaked before it will compile)
advance(i, distance(i, ci));       
</pre>

<p>This approach is so simple and straightforward, it&#146;s startling. To get an <B>iterator</B> pointing to the same container element as a <B>const_iterator</B>, create a new <B>iterator</B> at the beginning of the container, and then move it forward until it&#146;s as far from the beginning of the container as the <B>const_iterator</B> is! This task is facilitated by the utility algorithms <B>advance</B> and <B>distance</B>, both of which are declared in <B>&lt;iterator&gt;</B>. The <B>distance</B> algorithm reports how far apart two iterators into the same container are, and <B>advance</B> moves an iterator a specified distance. When <B>i</B> and <B>ci</B> point into the same container, the expression <B>advance(i, distance(i, ci))</B> makes <B>i</B> and <B>ci</B> point to the same place in the container.</p>
<p>Well, it would if it would compile, but it won&#146;t. To see why, look at the declaration for <B>distance</B>:</p>

<pre>
template &lt;typename InputIterator&gt;
typename
iterator_traits&lt;InputIterator&gt;::difference_type
distance(InputIterator first,
         InputIterator last);
</pre>

<p>Don&#146;t get hung up on the fact that the return type of the function is 56 characters long and mentions dependent types like <B>difference_type</B>. Instead, focus your attention on the uses of the type parameter <B>InputIterator</B>:</p>

<pre>
template &lt;typename InputIterator&gt;
typename
iterator_traits&lt;InputIterator&gt;::difference_type
distance(InputIterator first,
         InputIterator last);
</pre>

<p>When faced with a call to <B>distance</B>, your compilers must deduce the type represented by <B>InputIterator</B> by looking at the arguments used in the call. Look again at the call to <B>distance</B> in the code I said wasn&#146;t quite right:</p>

<pre>
// move i up to where ci is
advance(i, distance(i, ci));
</pre>

<p>Two parameters are passed to <B>distance</B>, <B>i</B> and <B>ci</B>. <B>i</B> is of type <B>Iter</B>, which is a typedef for <B>deque&lt;int&gt;::iterator</B>. To compilers, that implies that <B>InputIterator</B> in the call to <B>distance</B> is <B>deque&lt;int&gt;::iterator</B>. The <B>ci</B> parameter, however, is of type <B>ConstIter</B>, which is a typedef for <B>deque&lt;int&gt;::const_iterator</B>. <I>That</I> implies that <B>InputIterator</B> is of type <B>deque&lt;int&gt;::const_iterator</B>. It&#146;s not possible for <B>InputIterator</B> to be two different types at the same time, so the call to <B>distance</B> fails, typically yielding some long-winded error message that may or may not indicate that the compiler couldn&#146;t figure out what type <B>InputIterator</B> is supposed to be.</p>
<p>To get the call to compile, you must eliminate the ambiguity. The easiest way to do that is to explicitly specify the type parameter to be used by <B>distance</B>, thus obviating the need for your compilers to figure it out for themselves:</p>

<pre>
// figure the distance between
// i and ci (as const_iterators),
// then move i that distance
advance(i, distance&lt;<font color=#FF0000>ConstIter</font>&gt;(i, ci));
</pre>

<p>We now know how to use <B>advance</B> and <B>distance</B> to get an <B>iterator</B> corresponding to a <B>const_iterator</B>, but we have so far side-stepped a question of considerable practical interest: How efficient is this technique? The answer is simple. It&#146;s as efficient as the iterators allow it to be. For random access iterators (such as those sported by <B>vector</B>, <B>string</B>, and <B>deque</B>), it&#146;s a constant-time operation. For bidirectional iterators (i.e., those for all other standard containers and for some implementations of the hashed containers <a href="#7">[7]</a>), it&#146;s a linear-time operation.</p>
<p>Because it may take linear time to produce an <B>iterator</B> equivalent to a <B>const_iterator</B>, and because it can&#146;t be done at all unless the container for the <B>const_iterator</B> is available when the <B>const_iterator</B> is, you may wish to rethink designs that require producing <B>iterator</B>s from <B>const_iterator</B>s.</p>

<H3><FONT COLOR="#000080">Guideline 3: Understand How to Use a reverse_iterator&#146;s Base iterator</FONT></H3>

<p>Invoking the <B>base</B> member function on a <B>reverse_iterator</B> yields the &#147;corresponding&#148; <B>iterator</B>, but it&#146;s not really clear what that means. As an example, take a look at this code, which puts the numbers 1-5 in a <B>vector</B>, sets a <B>reverse_iterator</B> to point to the 3, and sets an <B>iterator</B> to the <B>reverse_iterator</B>&#146;s base:</p>

<pre>
vector&lt;int&gt; v;

// put 1-5 in the vector
for (int i = 1; i &lt;= 5; ++i) {
  v.push_back(i);
}

// make ri point to the 3
vector&lt;int&gt;::reverse_iterator ri =
  find(v.rbegin(), v.rend(), 3);

// make i the same as ri's base
vector&lt;int&gt;::iterator i(ri.base());
</pre>

<p>After executing this code, things can be thought of as looking like this:</p>

<IMG SRC="diagram2.gif">

<p>This picture is nice, displaying the characteristic offset of a <B>reverse_iterator</B> and its corresponding base <B>iterator</B> that mimics the offset of <B>rbegin()</B> and <B>rend()</B> with respect to <B>begin()</B> and <B>end()</B>, but it doesn&#146;t tell you everything you need to know. In particular, it doesn&#146;t explain how to use <B>i</B> to perform operations you&#146;d like to perform on <B>ri</B>.</p>
<p>As Guideline 1 explains, some container member functions accept only <B>iterator</B>s as iterator parameters, so if you want to, say, insert a new element at the location identified by <B>ri</B>, you can&#146;t do it directly, because <B>vector</B>&#146;s <B>insert</B> function won&#146;t take <B>reverse_iterator</B>s. You&#146;d have a similar problem if you wanted to erase the element pointed to by <B>ri</B>. The <B>erase</B> member functions haughtily reject <B>reverse_iterator</B>s, insisting instead on <B>iterator</B>s. To perform erasures and some forms of insertion, you must convert <B>reverse_iterator</B>s into <B>iterator</B>s via the <B>base</B> function, then use the <B>iterator</B>s to get the jobs done.</p>
<p>So let&#146;s suppose you <I>did</I> want to insert a new element into <B>v</B> at the position indicated by <B>ri</B>. In particular, let&#146;s assume you want to insert the value 99. Bearing in mind that <B>ri</B> is part of a traversal from right to left in the picture above and that insertion takes place in <I>front</I> of the element indicated by the iterator used to specify the insertion position, we&#146;d expect the 99 to end up in front of the 3 with respect to a reverse traversal. After the insertion, then, <B>v</B> would look like this:</p>

<IMG SRC="diagram3.gif">

<p>Of course, we can&#146;t use <B>ri</B> to indicate where to insert something, because it&#146;s not an <B>iterator</B>. We must use <B>i</B> instead. As noted above, when <B>ri</B> points at 3, <B>i</B> (which is <B>ri.base()</B>) points at 4. That&#146;s exactly where <B>i</B> needs to point for an insertion if the inserted value is to end up where it would if we had used <B>ri</B> to specify the insertion location. Conclusion?</p>

<UL><LI>   To emulate insertion at a position specified by a <B>reverse_iterator</B> <B>ri</B>, insert at the position <B>ri.base()</B> instead. For purposes of insertion, <B>ri</B> and <B>ri.base()</B> are equivalent, and <B>ri.base()</B> is truly the <B>iterator</B> <I>corresponding</I> to <B>ri</B>.</LI></UL>

<p>Let us now consider erasing an element. Look again at the relationship between <B>ri</B> and <B>i</B> in the original vector (i.e., prior to the insertion of 99):</p>

<IMG SRC="diagram4.gif">

<p>If we want to erase the element pointed to by <B>ri</B>, we can&#146;t just use <B>i</B>, because <B>i</B> doesn&#146;t point to the same element as <B>ri</B>. Instead, we must erase the element <I>preceding</I> <B>i</B>. Hence,</p>

<UL><LI>   To emulate erasure at a position specified by a <B>reverse_iterator</B> <B>ri</B>, erase at the position <I>preceding</I> <B>ri.base()</B> instead. For purposes of erasure, <B>ri</B> and <B>ri.base()</B> are <I>not</I> equivalent, and <B>ri.base()</B> is <I>not</I> the <B>iterator</B> corresponding to <B>ri</B>.</LI></UL>

<p>It&#146;s worth looking at the code to perform such an erasure, because it holds a surprise.</p>

<pre>
vector&lt;int&gt; v;
... // as above, put 1-5 in v

// as above, make ri point to the 3
vector&lt;int&gt;::reverse_iterator ri =
  find(v.rbegin(), v.rend(), 3);

// attempt to erase at the position
// preceding ri.base(); for a vector,
// this will typically not compile
v.erase(--ri.base());
</pre>

<p>There&#146;s nothing wrong with this design. The expression <B>--ri.base()</B> correctly specifies the element we&#146;d like to erase. Furthermore, this code will work with every standard container except <B>vector</B> and <B>string</B>. It might work with <B>vector</B> and <B>string</B>, too, but for many <B>vector</B> and <B>string</B> implementations, it won&#146;t compile. In such implementations, <B>iterator</B>s (and <B>const_iterator</B>s) are implemented as built-in pointers, so the result of <B>ri.base()</B> is a pointer. </p>
<p>Both C and C++ impose the constraint that pointers returned from functions may not be modified, so for STL platforms where <B>string</B> and <B>vector</B> <B>iterator</B>s are pointers, expressions like <B>--ri.base()</B> won&#146;t compile. To portably erase something at a position specified by a <B>reverse_iterator</B>, then, you must take pains to avoid modifying <B>base</B>&#146;s return value. No problem. If you can&#146;t decrement the result of calling <B>base</B>, just increment the <B>reverse_iterator</B> and <I>then</I> call <B>base</B>!</p>

<pre>
... // as above

// erase the element pointed to by
// ri; this should always compile
v.erase(<font color=#FF0000>(++ri).base()</font>);
</pre>

<p>Because this approach works with every standard container, it is the preferred technique for erasing an element pointed to by a <B>reverse_iterator</B>.</p>
<p>It should now be clear that it&#146;s not accurate to say that a <B>reverse_iterator</B>&#146;s <B>base</B> member function returns the &#147;corresponding&#148; <B>iterator</B>. For insertion purposes, it does, but for erasure purposes, it does not. When converting <B>reverse_iterator</B>s to <B>iterator</B>s, it&#146;s important that you know what you plan to do with the resulting <B>iterator</B>, because only then can you determine whether the <B>iterator</B> you have is the one you need.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>STL containers offer four iterator types, but in practice, <B>iterator</B> tends to be the most useful. If you have a <B>const_iterator</B> and access to the container for that <B>const_iterator</B>, you can use <B>distance</B> and <B>advance</B> to generate the corresponding <B>iterator</B>. If you have a <B>reverse_iterator</B>, you can use its <B>base</B> member function to generate a &#147;corresponding&#148; <B>iterator</B>, but if you want to use the <B>iterator</B> in a call to <B>erase</B>, you&#146;ll probably need to increment the <B>reverse_iterator</B> before calling <B>base</B>.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  Scott Meyers. <I>Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library</I> (Addison-Wesley, 2001), ISBN 0-201-74962-9. This article is based on Items 26-28 in <I>Effective STL.</I></p>
<p><a name="2"></a>[2]  For an entire article on this topic, look up &#147;<B>const T</B> vs. <B>T const</B>&#148; by Dan Saks in the February 1999 <I>Embedded Systems Programming.</I></p>
<p><a name="3"></a>[3]  The reason for <B>iterator</B>&#146;s special status isn&#146;t clear. HP&#146;s original STL implementation had <B>insert</B> and <B>erase</B> take <B>iterator</B> parameters, and this aspect of the design wasn&#146;t reconsidered during standardization. It may be changed in the future, however, as Library Working Group Issue #180 notes that &#147;this issue should be considered as part of a general review of <B>const</B> issues for the next revision of the Standard.&#148; (C++ Library Issues may be viewed at &lt;http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-defects.html&gt;.)</p>
<p><a name="4"></a>[4]  There&#146;s more to it than that, because implementation of the non-member function is tricky. For details consult &#147;The Standard Librarian: Defining Iterators and Const Iterators,&#148; by Matt Austern, <I>C/C++ Users Journal</I>, January 2001, p. 74. Also at &lt;http://www.cuj.com/experts/1901/austern.htm&gt;.</p>
<p><a name="5"></a>[5]  The two most common implementations of STL containers based on hash tables are from Dinkumware and SGI. You&#146;ll find an overview of the Dinkumware approach in P. J. Plauger&#146;s November 1998 <I>CUJ</I> column, &#147;Standard C/C++: Hash Tables.&#148; The only source I know of for an implementation overview of SGI&#146;s approach is Item 25 in <I>Effective STL</I> [1], but the interface is described at the SGI STL website, &lt;http://www.sgi.com/tech/stl/HashedAssociative-Container. html&gt;.</p>
<p><a name="6"></a>[6]  This is the case when using STLport&#146;s Debug Mode. You can read about STLport and its debug mode at the STLport website, &lt;http://www.stlport.org/&gt;.</p>
<p><a name="7"></a>[7]  Dinkumware&#146;s hashed containers offer bidirectional iterators. SGI&#146;s, STLport&#146;s, and Metrowerks&#146; hashed containers offer only forward iterators.</p>

<p><i><B>Scott Meyers</B> is one of the world&#146;s foremost authorities on C++; </I>Effective STL<I> is his third C++ book. He has a Ph.D. in Computer Science from Brown University, is a member of the Advisory Boards of NumeriX LLC and InfoCruiser Inc., and provides training and consulting services to clients worldwide. His web site is &lt;http://www.aristeia.com/&gt;.</i></p>

</blockquote></body></html>
