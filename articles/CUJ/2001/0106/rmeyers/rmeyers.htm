<HTML>   
     <HEAD>
<TITLE>June 2001/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjun.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editor</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Compound Literals</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>Structs in C are not quite &#147;first class types,&#148; but with the help of compound literals, they are at least a lot easier to use.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The creators and critics of programming languages sometimes classify the data types in a programming language as to whether they are first class types or not. A first class type is one that has the full set of reasonable operations and possible uses defined for it. For example, arrays in C are not first class types because you cannot perform array assignment using the assignment operator or pass an entire array by value as an argument or return an array as a result from a function. In contrast, <B>int</B> in most programming languages is the quintessential first class type: Not only are all reasonable operators defined upon <B>int</B>, but you can also have arrays of <B>int</B>, pass <B>int</B> as an argument, return <B>int</B> from a function, and so on.</p>
<p>Originally, structs in C suffered many of the same deficiencies as arrays, but it was commonplace even before the ANSI C Standard for compilers to support struct assignments, struct arguments, and struct function return values. Structs in modern C are almost first class types, but they still lack support for comparisons for equality or inequality using the <B>==</B> and <B>!=</B> operators. The C committee has entertained proposals for supporting <B>==</B> and <B>!=</B> for structs, but the debate over how to treat union members of structs caused the proposal to be shelved.</p>
<p>You might wonder, if structs need the equality operators defined in order to be first class types, do they also need the relational operators, e.g. <B>&lt;</B> or <B>&gt;</B>, to be defined in order to be first class types? This brings us to the &#147;reasonable&#148; in the definition of first class types above. Consider:</p>

<pre>
struct S {int a, b;};
struct S x = {1,2};
struct S y = {2,1};
</pre>

<p>Given that <B>x.a &lt; y.a</B> but <B>x.b &gt; y.b</B>, is it more reasonable to say that <B>x &lt; y</B>, or that <B>x &gt; y</B>, or that no automatic, general definition of <B>&lt;</B> and <B>&gt;</B> on structs is reasonable? I would argue that since programmers lay out structs in order to minimize padding, or to match an externally declared layout, or in the order that members occur to them, and not in an order that results in a natural comparison order for <B>&lt;</B> and <B>&gt;</B>, that it is unreasonable to provide a standard definition of <B>&lt;</B> and <B>&gt;</B> in the C Language.</p>
<p>Not surprisingly, students of programming language design at times disagree whether a particular operation or use of a type is reasonable or necessary in order to be a first class type. Dennis Ritchie pointed out <a href="#1">[1]</a> that some might not consider structs in C90 to be first class types because there are no constants of type struct.</p>
<p>C99 <a href="#2">[2]</a> added exactly that feature: constants of almost any type including struct, union, and array. This feature, called compound literals, is based on the brace-enclosed initializer syntax. The motivation for adding this feature to C99 was its notational conciseness, convenience, and usefulness, rather than an abstract desire to make struct a first class type.</p>

<H3><FONT COLOR="#000080">Constant Versus Literal</FONT></H3>

<p>Compound literals are not true constants in that the value of the literal might change, as is shown later. This brings us to a bit of terminology. The C99 and C90 Standards [<a href="#2">2</a>, <a href="#3">3</a>] use the word &#147;constant&#148; for tokens that represent truly unchangeable values that are impossible to modify in the language. Thus, <B>10</B> and <B>3.14</B> are an integer decimal constant and a floating constant of type <B>double</B>, respectively. The word &#147;literal&#148; is used for the representation of a value that might not be so constant. For example, early C implementations permitted the values of quoted strings to be modified. C90 and C99 banned the practice by saying that any program than modified a string literal had undefined behavior, which is the Standard&#146;s way of saying it might work, or the program might fail in a mysterious way. This allowed implementations to pool strings and place them in read-only storage. However, the Standard knew that some implementations might continue allowing quoted strings to be modified (sometimes a compiler option must be used), and called tokens like <B>"ABC"</B> string literals rather than string constants. Unfortunately, the C++ Standard <a href="#4">[4]</a> does not use the word &#147;literal&#148; with the same meaning as the C Standard. In C++, <B>10</B> is called an integer literal, for example.</p>
<p>Compound literals might or might not be constant depending upon whether their programmer-specified type is const or not. Unlike string literals, it is portable to modify a non-const compound literal.</p>

<H3><FONT COLOR="#000080">Compound Literals</FONT></H3>

<p>Syntactically, a compound literal looks like a cast followed by a brace-enclosed initializer. Given the following two types:</p>

<pre>
struct POINT {int x, y;};
union U {float f; int i;};
</pre>

<p>Here are some examples of compound literals:</p>

<pre>
(int) {1}
(const int) {2}
(float[2]) {2.7, 3.1}
(struct POINT) {0, 0}
(union U) {1.4}
</pre>

<p>The value of the compound literal is an anonymous object whose type is specified by the &#147;cast.&#148; The anonymous object has been initialized by the brace-enclosed initializer list. As the last three compound literals in the above example show, compound literals give you a constant-like notation for arrays, structs, unions, as well as any other object type (except for C99 variable length arrays).</p>
<p>A compound literal can be used anywhere an object with the same type of the compound literal could be used. For example,</p>

<pre>
int x;
x = (int) {1} + (int) {3};
</pre>

<p>is equivalent to</p>

<pre>
int x;
int unnamed1 = {1};
int unnamed2 = {3};
x = unnamed1 + unnamed2;
</pre>

<p>Compound literals are particularly useful as function arguments. For example, suppose you were using a graphics library that used <B>struct POINT</B>s to express coordinates. You might draw a pixel in a window like this:</p>

<pre>
extern drawpixel(struct POINT where);
drawpixel((struct POINT) {5, 5});
</pre>

<p>Compound literals yield lvalues. This means that you can take the address of a compound literal, which is the address of the unnamed object declared by the compound literal. As long as the compound literal does not have a const-qualified type, you can use the pointer to modify it.</p>

<pre>
struct POINT *p;
p = &amp;(struct POINT) {1, 1};
p-&gt;x = 2;
p-&gt;y = 2;
printf("*p = %d, %d\n", p-&gt;x, p-&gt;y);
</pre>

<p>causes <B>*p = 2, 2</B> to be printed.</p>
<p>Compound literals are in effect declarations and initializations of unnamed objects that can appear in expressions. The unnamed objects and their initializations follow the same rules <a href="#5">[5]</a> as normal declarations, and have the same special treatment depending upon whether the compound literal appears within a function body or not.</p>
<p>If a compound literal appears outside of a function body, then the unnamed object has static storage duration, just like all other objects declared outside of a function. It is allocated and initialized once before the program begins to run and remains allocated as long as the program is running. Since the initialization occurs before running the program, all of the initializers in the brace-enclosed list must be constant expressions <a href="#5">[5]</a>.</p>
<p>If a compound literal appears inside the body of a function, then the unnamed object has automatic storage duration and acts like a local variable of the immediately enclosing block. It is allocated and initialized when its &#147;declaration&#148; is reached in the block and deallocated upon exiting the block <a href="#5">[5]</a>. The expressions in the brace-enclosed initializer list can be any run-time expressions.</p>

<pre>
void f()
{
  int *p;
  extern int g(void);
  {
    p = &amp;(int) {g()};
    *p = 1;   //OK
  }
  // p points to deallocated
  // stack space
  *p = 2;   //BAD
}
</pre>

<p>In the same way that the declaration and initialization of an automatic variable acts like an assignment to that variable <a href="#5">[5]</a>, every time control passes through the body of a compound literal with automatic storage duration, the unnamed variable is reinitialized. Thus, the following function draws a diagonal line from <B>(0,0)</B> to <B>(9, 9)</B>.</p>

<pre>
void line()
{
  int i;
  for (i = 0; i &lt; 10; ++i)
    drawpixel((struct POINT) {i, i});
}
</pre>

<p>The brace-enclosed initializer list for a compound literal has the same semantics as a brace-enclosed initializer list in a declaration. If you only provide initializers in the list for some of the members of a struct or elements of an array, the other members or elements are implicitly initialized with zeros of the appropriate type. Thus, <B>(int [10]) {0}</B> is an array of ten integers all initialized to zero. This means that it might be safer to assign to a struct using a compound literal rather than assigning its members individually. Contrast the following lines in a function:</p>

<pre>
struct POINT p;
p.x = x;
p.y = y;
</pre>

<p>versus:</p>

<pre>
struct POINT p;
p = (struct POINT) {x, y};
</pre>

<p>Suppose in the future you add a <B>z</B> member to <B>POINT</B> to make it a three-dimensional point. When you assign the members individually, the <B>z</B> member never receives a value and contains stack trash. When a compound literal is used to assign <B>p</B>, the <B>z</B> member is assigned the default value of zero (probably a reasonable default for a 3-D graphics package).</p>
<p>Like any other brace-enclosed initializer list, the initializer list in a compound literal may use the new C99 feature of designated initializers <a href="#5">[5]</a>, where the member or array element being initialized may be named. When a function takes a struct as an argument, compound literals and designated initializers can be used to call the function with a poor man&#146;s version of keyword arguments to a function and default argument values for a function, as in:</p>

<pre>
drawpixel((struct POINT) {.y=12});
</pre>

<p>Here, the designated initializer <B>.y</B> acts like a keyword argument to the function, and the <B>.x</B> &#147;argument&#148; to the function receives a default value of zero.</p>
<p>Like normal declarations, if the type inside of the &#147;cast&#148; of a compound literal is an array of unknown size, then the number of elements of the array is determined by the brace-enclosed initializer. A compound literal with type array has the same semantics as a variable with type array. Except when used as the operand of <B>sizeof</B> or <B>&amp;</B>, an array used in an expression is converted to a pointer to the first element of the array. In the following, <B>p</B> points to the first element of an array of three <B>int</B>s.</p>

<pre>
int *p;
p = (int []) {1, 2, 3};
</pre>

<p>Normally, every compound literal that you write results in a distinct unnamed object. However, if the type of the compound literal is const-qualified, and the compound literal is initialized with constant expressions, then the compiler is free to pool the compound literals (only store one copy) and to place the unnamed object(s) in write-locked storage. Such compound literals are true constants, not just literals.</p>
<p>Thus, those programmers who worry about whether their types are first class types and consider &#147;having a constant representation&#148; to be a requirement, have one less thing to worry about.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Dennis Ritchie. &#147;The Development of the C Programming Language,&#148; in Bergin and Gibson, editors, <I>History of Programming Languages</I> (Addison Wesley, 1996).</p>
<p><a name="2"></a>[2]  <I>ANSI/ISO/IEC 9899:1999, Programming Languages - C. 1999.</I> Available in Adobe PDF format for $18 from &lt;http://www.techstreet.com/ncitsgate.html&gt;.</p>
<p><a name="3"></a>[3]  <I>ANSI/ISO/IEC 9899:1990, Programming Languages - C. 1990.</I></p>
<p><a name="4"></a>[4] <I>ANSI/ISO/IEC 14882:1998., Programming Languages - C++. 1998.</I> Available in Adobe PDF format for $18 from &lt;http://www.techstreet.com/ncitsgate.html&gt;.</p>
<p><a name="5"></a>[5]  Randy Meyers. &#147;The New C: Declarations and Initializations,&#148; <I>C/C++ Users Journal,</I> April 2001.</p>

<p><i><B>Randy Meyers</B> is consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

</blockquote></body></html>
