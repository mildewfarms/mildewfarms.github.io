<HTML>   
     <HEAD>
<TITLE>April 2001/Adding Exception Testing to Unit Tests</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Adding Exception Testing to Unit Tests</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Ben Stanley</FONT></H3>

<BLOCKQUOTE>
<p>Exceptions can add a bewildering number of potential execution paths to otherwise simple code. Here is a way to test those extra paths without writing a bazillion test cases.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>Much water has gone under the bridge since Tom Cargill expressed reservations about the reliability of code that uses exception handling <a href="#1">[1]</a>. Tom pointed out that naive programming of exception handling typically leads to resource leaks and incoherent object states. Exceptions should arise only under extreme conditions such as low memory or lack of disk space, making exception related problems difficult to reproduce.</p>
<p>Testing is no substitute for writing robust and complete code. Before attempting to write code that must be exception safe, you should read Herb Sutter&#146;s excellent book, <I>Exceptional C++</I>, for some robust exception handling techniques [<a href="#2">2</a>, Items 8-19]. Once the code is written, a solid testing regime can help flush out any remaining bugs, and increase confidence that the code operates correctly. Rigorous testing methods have been developed for normal execution paths [<a href="#3">3</a>, Chapter 25]. This article describes a simple method of adding exhaustive testing of the exception paths to the test suite.</p>
<p>Current testing methodology seeks to construct a set of tests to verify the integrity of a unit of software. Usually, this unit is a class, although it could be a group of collaborating classes. For the test to be thorough, there must be at least one test to exercise each path of execution through every function or class method in the unit. Thus, there are at least as many tests in the test suite as there are normal execution paths through the software, and usually more. If you seek to test exceptional paths in addition to normal execution paths, you will have to add more tests. How many? Consider the following code snippet:</p>

<pre>
String EvaluateSalaryAndReturnName(
  Employee e )
{
  if( e.Title()=="CEO" or
      e.Salary() &gt; 100000 )
  {
    cout &lt;&lt; e.First() &lt;&lt; " "
         &lt;&lt; e.Last()
         &lt;&lt; " is overpaid" &lt;&lt; endl;
  }
  return e.First()+" "+e.Last();
}
</pre>

<p>Herb Sutter claims that there are no fewer than 20 possible exceptional code paths through this function, compared to the three normal paths [<a href="#2">2</a>, Item 18]. That&#146;s a lot of extra paths to test! Even worse, it is less than obvious what these paths are, or how to cause them to execute. Luckily, it is possible to test these 20 extra exceptional paths using only the test suite for the three normal paths, and some extra template code, which is shared by all your tests.</p>
<p>A simplified outline of the method is as follows:</p>

<UL><LI>   Identify places where exceptions may be thrown. These will be called exception points. Each exception point causes an additional exceptional code path.</LI>
<LI>   Divide the unit test suite up into sets of tests related to one &#145;feature&#146; of the class. These tests will be called feature tests.</LI>
<LI>   Conceptually number the exception points in each feature test, in order of execution. Each exception point may be labeled with more than one number.</LI>
<LI>   Execute each feature test inside a <B>for</B> loop that causes an exception to be thrown from each numbered exception point in turn.</LI></UL>

<p>I demonstrate this method of exception testing by three different examples, which use a common framework for performing the testing.</p>

<H3><FONT COLOR="#000080">Design of the Exception Testing System</FONT></H3>

<p>The design of the exception testing system is shown in <a href="fig1.htm">Figure 1</a>. Boxes indicate code modules. Boxes with single borders are generic and do not change for testing separate systems &#151; these modules are supplied in the online source code that accompanies this article (<B>see www.cuj.com/code</B>). The boxes with double borders indicate code that must be supplied by the user. The arrows indicate function call dependencies between the code modules. The dotted arrow indicates a function call dependency that is usually not necessary.</p>
<p>The central idea in the design is the enumeration of the exception points. This is done by placing a call to the exception point counter class at each point in the code where an exception may directly arise. The exception counter class maintains two counts: the number of the current exception point, <B>sExceptionPointCount</B>, and the number of the exception point where a test exception should be thrown, <B>sThrowCount</B>. The code under test calls function <B>CouldThrow</B> at each point where an exception could be thrown. The <B>CouldThrow</B> method will throw an exception if it is at the right exception point. The test harness driver has a loop which enumerates all the exception points in turn, by first calling <B>SetThrowCount</B> and then calling the unit test in the test harness.</p>
<p>Since most exception points are due to memory management problems, we can take a giant shortcut by replacing the default implementation of <B>operator new</B> and <B>operator delete</B> with debugging versions that have been modified to call <B>CouldThrow</B> every time <B>new</B> is called. In many cases, this shortcut eliminates the need to write a debugging version of the classes used by the code under test.</p>
<p>Some exception points will be impractical to instrument with a call to <B>CouldThrow</B>. Such exception points may alternatively be exercised by designing the test suite so that it sets up the conditions that cause the exception as one of the test cases. This will still cause the exception code path to be tested.</p>
<p>Any remaining exception points that are not exercised by calling <B>CouldThrow</B> or explicitly tested by the test suite will not be tested and are deemed to be outside the domain of the test.</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<H4><FONT COLOR="#000080">The TestDriver Function</FONT></H4>

<p>The <B>TestDriver</B> template function causes all the exception points in a test to actually throw an exception, one at a time. It requires a functor class containing one method with the signature <B>static void DoTest()</B>. This function is assumed to perform a sequence of tests to exercise one aspect of a class&#146;s functionality:</p>

<pre>
template&lt;class Func&gt;
void TestDriver()
{
  int i = 0;
  do {
    // ...
    Counter::SetThrowCount( ++i );
    try {
      Func::DoTest();
    }
    catch( TestException&amp; e ){}
    catch( bad_alloc&amp; e ) {}
    catch( ... ) {
      Counter::Fail(
        "Bad Exception");
    }
    // ...
  } while( Counter::HasThrown() );
  Counter::SetThrowCount( -1 );
}
</pre>

<p>A more complete version of this function is shown in <a href="list1.htm">Listing 1</a> (<B>Counter.h</B>). The loop enumerates the exception points, using <B>i</B> as the counter. The call to <B>SetThrowCount</B> at the top of the loop instructs the <B>Counter</B> class to throw an exception at the specified exception point. Testing starts at the first exception point. Then, the function under test is called, inside a <B>try/catch</B> block. It is expected that the function will throw an exception. The <B>Counter::CouldThrow</B> method throws a <B>TestException</B>. However, <B>operator new</B> translates this into a <B>bad_alloc</B> exception for testing purposes, so we have to be prepared to deal with that here. Any other kind of exception that is triggered by bad inputs should be caught by the test harness, so any other strange exceptions caught here cause a test fail. This should be changed if it is unsuitable for your application.</p>
<p>An interesting point here is the loop termination condition. There must be a finite number of exception points in a test function. When they have all been tested, the <B>TestDriver</B> function will return normally, testing the normal path of execution for that test as a by-product. In this case, the exception has not yet been thrown. This condition is detected by the <B>Counter::HasThrown</B> method, which is used to terminate the loop.</p>
<p>At the end of the exception tests, the throw point is set to -1 to prevent exceptions from being thrown in the testing program.</p>
<p>The parts of <a href="list1.htm">Listing 1</a> marked with an ellipsis (<B>...</B>) contain checks for memory leaks that may have occurred during a test. It is assumed that each test is self contained, and that no memory should remain allocated after the test. You can also walk the heap and check that everything is okay, if your debugging memory manager supports such things.</p>
<p>The <B>...</B> areas also contain code to print out the number of exception paths that were tested.</p>

<H4><FONT COLOR="#000080">Test Harness Functions</FONT></H4>

<p>The test harness functions are supplied as functor objects. This allows automatic reporting of the name of the test set through the use of RTTI information. Each test harness functor should have the following form:</p>

<pre>
class TestDefaultConstruct {
public:
  static void DoTest() {
    String s;
    Counter::Test( s == "", "correct value" );
  }
};
</pre>

<p>The above code just tests the default constructor of a <B>String</B> class. It does so by constructing a <B>String</B> using the default constructor, and then testing its value against the expected value. The static function <B>Counter::Test</B> accepts a Boolean result from a test as its first argument &#151; a <B>true</B> counts as a pass, <B>false</B> counts as a fail. The second argument is a description of the test. This is printed in the case of a failure, to help in diagnosing what happened.</p>
<p>A proper test harness will have one of these classes to test each aspect of functionality of your class or module. You could incorporate test data from a file, or just hard-code the expected results from simple hand-worked examples. The key point is to compare the actual state of the class against what you expect it should be, given the functions you called. If the test harness detects anything amiss, it will let you know.</p>

<H3><FONT COLOR="#000080">Instrumenting the Code Under Test</FONT></H3>

<p>This section refers to the code that you wish to demonstrate operates correctly in the presence of exceptions. You can test individual functions, simple classes, or template classes.</p>
<p>If you are testing a class, it is useful to add an extra debugging method, named <B>Consistent</B>, that checks whether the data members of the class are in a consistent state. This is also known as checking the class invariants. For example, if a stack class has a null pointer to its array element, but its <B>size</B> member says it has five elements, then the class state is inconsistent.</p>

<H4><FONT COLOR="#000080">Instrumenting Classes</FONT></H4>

<p>If your code under test uses any other classes, you may need to create debugging versions of them that call <B>Counter::CouldThrow</B> at every exception point. However, if the only exception points are calls to the standard <B>operator new</B> and <B>operator delete</B>, then you don&#146;t have to change anything. By using overloaded versions of <B>operator new</B> and <B>operator delete</B>, the required calls to <B>CouldThrow</B> can be obtained without changing anything. Other exception points will have to be treated [on an individual basis?]</p>

<H4><FONT COLOR="#000080">Exception Point Counting</FONT></H4>

<p>The exception point counting code is at the bottom of the call graph diagram (<a href="fig1.htm">Figure 1</a>). It is really very simple:</p>

<pre>
class Counter {
private:
  static int sExceptionPointCount;
  static int sFailCount;
  // ...
public:
  static void CouldThrow() {
    if( ++sExceptionPointCount ==
      sFailCount )
        throw TestException();
  }
  static void SetThrowCount(int c){
    sTestCounter = 0;
    sFailCount = c;
  }
  // ...
};
</pre>

<p>The <B>SetThrowCount</B> method is used to set the number of the exception point that will throw. The <B>CouldThrow</B> method will throw the exception at the appropriate exception point. There is a lot of other functionality included in this class in the full version (see <a href="list1.htm">Listing 1</a>, <B>Counter.h</B> and <a href="list2.htm">Listing 2</a>, <B>Counter.cpp</B>); its operation should be self-evident from an inspection of the code.</p>

<H4><FONT COLOR="#000080">A Debugging Memory Manager</FONT></H4>

<p>I have included a debugging memory manager with the online listings for two reasons:</p>
<p>1)  To find simple memory errors in the program under test; and</p>
<p>2)  To allow calls to <B>operator new</B> and <B>operator delete</B> to be instrumented to call <B>Counter::CouldThrow</B>.</p>
<p>The overloading of <B>operator new</B> and <B>operator delete</B> is a convenience &#151; these versions automatically call <B>CouldThrow</B>. This functionality is useful because the majority of exception points in a typical application are due to memory allocation.</p>
<p>The debugging memory manager used in this testing facility additionally maintains a linked list of all allocated blocks, and a count of how many have been allocated. This allows the program to check if any memory leaks have occurred within a single test, and to also check that pointers passed to <B>delete</B> are actually pointers to validly allocated blocks. This was the minimum necessary functionality to detect the bugs that are in the examples. A more professional debugging memory manager may be substituted, as long as its <B>operator new</B> and <B>operator new[]</B> functions can be modified to call <B>Counter::CouldThrow</B>. Techniques for writing debugging memory managers are discussed by Steve Maguire <a href="#4">[4]</a>.</p>

<H3><FONT COLOR="#000080">Test Examples</FONT></H3>

<p>The following examples demonstrate how to use the testing method on a function and on a template class.</p>

<H4><FONT COLOR="#000080">Testing a Function</FONT></H4>

<p>The function to be tested is the <B>EvaluateSalaryAndReturnName</B> function mentioned in the introduction. In order to test it, you need a <B>String</B> class and an <B>Employee</B> class; these are provided with the online source listings.</p>
<p>There are three normal paths of execution through this code, so three test cases are needed to exercise it. A single test case is shown here, which forms one part of the test harness box in the design in <a href="fig1.htm">Figure 1</a>:</p>

<pre>
class TestPath1 {
  static void DoTest() {
    String s;
    s=EvaluateSalaryAndReturnName(
      Employee( "Homer", "Simpson",
        "Nuclear Plant Controller",
        25000 ) );
    Counter::Test(
      s == "Homer Simpson",
      "Correct return value" );
  }
};
</pre>

<p>Here I have constructed a test case which will fail to enter the <B>if</B> statement within the <B>EvaluateSalaryAndReturnName</B> function, so nothing should be printed. To fully test this function, the output would have to be redirected into an internal string buffer or file. This is possible on Unix by closing and reopening the standard output stream, but is left as an exercise for the reader. Our interest here is the exception paths that we can cause to execute through the function using the <B>TestDriver</B> function.</p>
<p>After constructing the test cases, a suitable <B>main</B> is needed to call them:</p>

<pre>
int main()
{
  TestDriver&lt;TestPath1&gt;();
  // TestDriver&lt;TestPath2&gt;();
  // ...
  Counter::PrintTestSummary();
  return 0;
}
</pre>

<p>A full test harness will call further tests. However, when this program is built and run, it prints the following output:</p>

<pre>
Doing test 9TestPath1
18 execution paths were tested.
Test results:
Total Tests: 19
Passed     : 19
Failed     : 0
</pre>

<p>(The strange test name is just how g++ prints out the class name when you use RTTI.) The important thing that the output shows here is that 18 execution paths were tested, even though there was only one normal path of execution through the code accessible to the test suite. This is due to all the exception points being tested, one by one. Each exception point gives rise to a separate execution path. The number is different from the claimed 20 possible paths for several reasons:</p>
<p>1)  The test harness contains extra exception points outside the code under test. Thus, some execution paths only differ outside the function being testing here. This is acceptable, since we still know these paths are being tested.</p>
<p>2)  The path that is being tested does not cover all the possible exception points in the function, since half of the <B>if</B> test and the body of the <B>if</B> statement are not executed. Thus, not all of the exceptional paths are revealed yet.</p>
<p>At this point, I should point out that <B>e.Salary()</B> might return a user-defined type. The comparison between this user-defined type and <B>100000</B> would be performed by a user-defined <B>operator==</B>, which could throw. This possibility is included in Herb Sutter&#146;s claimed count of 20 exception points. However, this test program has not tested these things, because this particular program does not return a user-defined type from <B>e.Salary()</B>. The program has only tested what could actually throw.</p>
<p>A complete test set is supplied as part of the code with the article. While developing this test set, I found two paths of execution that neglect to call the <B>String</B> destructor. (This was verified by inspecting a function call trace.) These appear to be caused by bugs in the code generated by g++ 2.95.2! This testing methodology has also found bugs in other compilers.</p>

<H4><FONT COLOR="#000080">Testing a Template Class</FONT></H4>

<p>The template class to be tested here is the same one used in Tom Cargill&#146;s article on exception handling &#151; David Reed&#146;s stack class <a href="#6">[6]</a>. This class is a good example for showing that the test method finds problems. The code is shown in <a href="list3.htm">Listing 3</a> (<B>Stack_Reed.h</B>). The original code assumed that <B>new</B> returned zero when it failed &#151; I have changed the code to assume that <B>new</B> throws <B>bad_alloc</B>. I have changed a few method names to be consistent with Herb Sutter&#146;s implementations, to allow a common test harness. I have also added a <B>Consistent</B> method, which checks on the internal consistency of the <B>Stack</B>&#146;s data.</p>
<p>The template class, <B>Stack</B>, is instantiated with a template argument of type <B>TestClass</B> (see <a href="list4.htm">Listing 4</a>, <B>TestClass.h</B>). <B>TestClass</B> behaves like a very temperamental integer &#151; it can be copied, assigned to, added, and so on, all with the possibility of throwing an exception. The only method of <B>TestClass</B> that does not throw is the destructor. This throw capability is achieved by inserting a call to <B>Counter::CouldThrow</B> into each of the methods, thus allowing us to test the behavior of <B>Stack</B> under hostile conditions.</p>
<p>The complete stack test suite is shown in <a href="list5.htm">Listing 5</a> (<B>TestStack.cpp</B>). The following <B>Stack</B> test from the suite exposes a fault in the copy constructor:</p>

<pre>
class TestCopyConstruct2 {
public:
  static void DoTest() {
    Stack&lt;TestClass&gt; a;
    a.Push( TestClass(1) );
    a.Push( TestClass(2) );
    { Stack&lt;TestClass&gt; b( a );
      // ...}
    // ...              }   };
</pre>

<p>When this test is run, it produces the following output:</p>

<pre>
Doing test 18TestCopyConstruct2
****    Failed test Memory leak
  (1 block) at exception point 27.
****    Failed test Memory leak
  (1 block) at exception point 28.
29 execution paths tested.
</pre>

<p>It seems that there are two memory leaks when exceptions are thrown during the tests. To identify the cause of the leaks, the execution paths must be identified. The program may be converted so that only the faulty execution path is used, for the convenience of debugging. To do this, follow this procedure:</p>
<OL><LI>Comment out all the tests except the one that causes the problem.</LI>
<LI>Hard-code the exception point into the <B>TestDriver</B> function, using <B>i = exceptionPoint-1</B> before the start of the <B>do</B> loop.</LI>
<LI>Put a <B>break</B> before the <B>while</B> statement in the <B>TestDriver</B> function to prevent other tests from running.</LI></OL>

<p>This program will follow only the faulty execution path. This makes it easier to trace the program in the debugger to find where the leak occurs. The exact point where the exception is thrown may be found by placing a breakpoint on the <B>throw</B> statement in <B>CouldThrow</B>. To facilitate further testing, it is best to perform these modifications on a copy of the original files.</p>
<p>It turns out that these memory leaks are caused by an exception from <B>TestClass::operator=</B> while the elements are being copied from one array to the other in the <B>Stack</B> copy constructor. The memory for the array is not deallocated. The exception leaves the constructor, leaving the class only partially constructed, so the destructor is not called. The second leak is caused by having two elements on the stack to copy, so the same mechanism is repeated by throwing from the second assignment in a subsequent test. This fault can be fixed by inserting a <B>try/catch</B> block into the constructor to delete the array in the case of an exception during copying. See <a href="list6.htm">Listing 6</a> (<B>Stack_Reed_Fixed.h</B>) for the fixed version.</p>
<p>The test harness (<a href="list5.htm">Listing 5</a>, <B>TestStack.cpp</B>) and exception testing system can be used to find a complete list of the problems with this <B>Stack</B> class. I have done this, and the results are shown in <a href="tab1.htm">Table 1</a>. There are comments in the fixed version of <B>Stack</B> indicating where each repair was made. With this number of faults, this class is probably better scrapped and rewritten according to the guidelines in <I>Exceptional C++</I> <a href="#2">[2]</a>. Indeed, it is impossible to pass the test suite without changing the interface to the stack class (problem 8 from <a href="tab1.htm">Table 1</a>). One of the stack classes included in <I>Exceptional C++</I> is included with this article as <a href="list7.htm">Listing 7</a> (<B>Stack_Sutter_1.h</B>). Another (<B>Stack_Sutter_3.h</B>) is included with the online sources. These classes have a <B>Top</B> method, and the <B>Pop</B> method has been modified so as not to return anything. These changes address problem 8 from <a href="tab1.htm">Table 1</a>. The same test suite can be used to test all these implementations. Both of Sutter&#146;s implementations pass the test suite without modification.</p>

<H4><FONT COLOR="#000080">Testing Exceptions Thrown by the Class Under Test</FONT></H4>

<p>Now that I have discussed how to test exceptions caused by memory faults, I will turn to exceptions that are thrown by the class under test. How do we test these? By setting up the conditions that cause the exception to be thrown. For example, the <B>Pop</B> method of the <B>Stack</B> class throws an exception if you try to pop an empty stack. We can test this exception path by writing a test such as the following:</p>

<pre>
class TestPop {
public:
  static void DoTest() {
    Stack&lt;TestClass&gt; a;
    try {
      a.Pop();
      Counter::Fail("Pop empty");
    } catch(const char* ) {
      Counter::Pass("Pop empty");
    }
    Counter::Test( a.Consistent(),
      "a internal state");
    Counter::Test( 0 == a.Size(),
      "a correct size");
  }
};
</pre>

<p>This particular test tests Sutter&#146;s version of the class, in which <B>Pop</B> has been modified not to return the popped element. The test sets up the stack class to be empty so that <B>Pop</B> will fail. The test is subsequently written so that <B>Pop</B> must throw an exception to pass the test. The stack must also subsequently have consistent internal state, and have zero size as well.</p>
<p>It would also have been possible to test this path of execution by placing a call to <B>Counter::CouldThrow</B> at the point where the <B>Pop</B> could fail. This would not have required such a carefully designed test suite. However, it would have required modification of the code undergoing testing, which is usually undesirable.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>
<p>Using this technique imposes the following requirements:</p>
<p>1)  You must have the source code of the class or function under test. (Object code may be sufficient if the class does not use any templates.)</p>
<p>2)  You must write an exhaustive test suite for the functionality of that class or function, including for any exceptions that the class or function itself may throw due to being misused in any way.</p>
<p>Meeting the above requirements allows us to:</p>
<p>1)  Test whether the class or function under test leaks memory under any circumstances, including due to exception propagation;</p>
<p>2)  Easily exercise exception handling code for exceptions that are caused by out-of-memory conditions; and</p>
<p>3)  Exercise exception handling code for exceptions that are caused by misusing the class (and the misuse is included in the test suite).</p>
<p>Thus, this testing method is applicable to class-based testing or unit testing. It does not allow us to do any of the following:</p>
<p>1)  Test pre-compiled binaries of libraries or complete programs; or</p>
<p>2)  Test exceptions due to any reason other than memory failure or conditions deliberately set up by the test suite. An example of such conditions would be I/O faults. (I/O faults could be tested using this method if the I/O library were instrumented with calls to <B>CouldThrow</B>.)</p>
<p>Therefore this method, as it stands, is not applicable to integrated system testing.</p>
<p>This is not a perfect solution, but is much better than having no means of performing this testing at all.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This method allows you to test a function, normal class, or template class for its exception handling integrity. It requires some extra effort over that required to write a standard test suite. The tests must be crafted with some care for the results of the tests to be meaningful. However, if you go to the trouble of writing good tests and fixing any problems found with your code, you can be correspondingly more confident in your code. This technology has already been used to improve the quality of student assignments for simple classes. It has also uncovered incorrect exception handling code output from some compilers. This article only scratches the surface of what can be done by automated unit testing.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>I gratefully thank Herb Sutter for encouraging me to write this article in the first place, and for assisting with reviewing it.</p>
<p>This technique was invented independently by Matt Arnold, and subsequently used by David Abrahams <a href="#7">[7]</a> to write a generic test suite for the STL <a href="#8">[8]</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Tom Cargill. &#147;Exception Handling: A False Sense of Security,&#148; <I>C++ Report,</I> Vol. 6, No. 9, November-December 1994. Also available at <B>http://meyerscd.awl.com/</B>.</p>
<p><a name="2"></a>[2]  Herb Sutter. <I>Exceptional C++ &#151; 47 Engineering Puzzles, Programming Problems, and Solutions</I> (Addison-Wesley, 2000).</p>
<p><a name="3"></a>[3]  Steve McConnel. <I>Code Complete</I> (Microsoft Press, 1993).</p>
<p><a name="4"></a>[4]  Steve Maguire. <I>Writing Solid Code</I> (Microsoft Press, 1993).</p>
<p><a name="5"></a>[5]  Scott Meyers. <I>More Effective C++</I> (Addison-Wesley, 1996). Also available as a CD; see <B>http://www.meyerscd.awl.com</B></p>
<p><a name="6"></a>[6]  David Reed. &#147;Exceptions: Pragmatic Issues with a New Language Feature,&#148; <I>C++ Report,</I> October 1993.</p>
<p><a name="7"></a>[7]  David Abrahams. &#147;Exception Safety in Generic Components,&#148; Dagstuhl Conference on Generic Programming, April 27 - May 1, 1998. Online at <B>http://www.cs.rpi.edu/~musser/gp/dagstuhl/gpdag.html</B>.</p>
<p><a name="8"></a>[8]  David Abrahams and Boris Fomitchev, &#147;Exception Handling Test Suite,&#148; available at <B>http://www.stlport.org/doc/eh_testsuite.html</B>.</p>

<p><i><B>Ben Stanley</B> graduated from the Australian National University with Honors in Theoretical Physics in 1994. He is now doing a PhD in Robotics at the University of Wollongong, Australia. He has lectured some first and second year C++ units. When he&#146;s not busy writing his thesis, he makes puzzles.</i></p>

<h4><a href="../../../source/2001/apr01/stanley.zip"></a></h4>
</blockquote></body></html>
