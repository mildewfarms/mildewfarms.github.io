<HTML><HEAD>
<TITLE>April 2001/Adding Exception Testing to Unit Tests/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: A class that can throw exceptions from any possible user-defined function</A></h4>
<pre>
#ifndef TESTCLASS_H
#define TESTCLASS_H

#include "Counter.h"

class TestClass {
public:
    TestClass( int inVal = 0 ) 
    :    mVal( inVal )
    { 
        Counter::CouldThrow();
    }

    TestClass( const TestClass&amp; other ) 
    :    mVal( other.mVal )
    { 
        Counter::CouldThrow(); 
    }

    ~TestClass() {}

    TestClass&amp; operator=( const TestClass&amp; other )
    { 
        Counter::CouldThrow();
        mVal = other.mVal;
        return *this;
    }

    bool operator==( const TestClass&amp; other ) { 
        Counter::CouldThrow();
        return other.mVal == this-&gt;mVal;
    }
    
    bool operator!=( const TestClass&amp; other ) {
        Counter::CouldThrow();
        return other.mVal != this-&gt;mVal;
    }
        
    bool operator&lt;( const TestClass&amp; other ) {
        Counter::CouldThrow();
        return other.mVal &lt; this-&gt;mVal; 
    }

    bool operator&lt;=( const TestClass&amp; other ) {
        Counter::CouldThrow();
        return other.mVal &lt;= this-&gt;mVal;
    }
// not shown: other operators
// ...

    // Don't need to overload class operator new,
    // because we already required that the global
    // operator new be overloaded to call 
    // Counter::CouldThrow().

    // See online version of this listing for discussion of
    // remaining recommended functions to be implemented
private:
    int mVal;
};

// I have considered that it is not really desireable to add any 
// more functionality to this class which might result in silent
// automatic conversions etc. If you need a particular method,
// you may wish to add it.


#endif // TESTCLASS_H
&#151; End of Listing &#151;</pre></body></html>
