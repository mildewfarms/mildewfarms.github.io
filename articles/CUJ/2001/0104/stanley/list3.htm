<HTML><HEAD>
<TITLE>April 2001/Adding Exception Testing to Unit Tests/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: David Reed&#146;s original stack class, modified to account for operator new throwing a bad_alloc exception instead of returning a zero</A></h4>
<pre>
#ifndef STACK_H
#define STACK_H

template&lt;class T&gt;
class Stack 
{
    unsigned nelems;
    int top;
    T* v;
public:
    unsigned Size();
    void Push(T);
    T Pop();

    Stack();
    ~Stack();
    Stack( const Stack&amp; );
    Stack&amp; operator=(const Stack&amp;);

    bool Consistent() const;
};

template&lt;class T&gt;
Stack&lt;T&gt;::Stack()
{
    top = -1;
    v = new T[nelems=10];
}

template&lt;class T&gt;
Stack&lt;T&gt;::Stack( const Stack&lt;T&gt;&amp; s )
{
    v = new T[nelems = s.nelems];
    if( s.top &gt; -1 ) {
        for(top = 0; top &lt;= s.top; top++) {
            v[top] = s.v[top];
        }
        top--;
    }
}

template&lt;class T&gt;
Stack&lt;T&gt;::~Stack()
{
    delete[] v;
}

template&lt;class T&gt;
void Stack&lt;T&gt;::Push( T element )
{
    top++;
    if( top == nelems-1 ) {
        T* new_buffer = new T[nelems+=10];
        for( int i = 0; i &lt; top; i++ ) {
            new_buffer[i] = v[i];
        }
        delete [] v;
        v = new_buffer;
    }
    v[top] = element;
}

template&lt;class T&gt;
T Stack&lt;T&gt;::Pop()
{
    if( top &lt; 0 ) {
        throw "pop on empty stack";
    }
    return v[top--];
}

template&lt;class T&gt;
unsigned Stack&lt;T&gt;::Size()
{
    return top+1;
}

template&lt;class T&gt;
Stack&lt;T&gt;&amp; 
Stack&lt;T&gt;::operator=( const Stack&lt;T&gt;&amp; s )
{
    delete [] v;
    v = new T[nelems = s.nelems];
    if( s.top &gt; -1 ) {
        for(top = 0; top &lt;= s.top; top++) {
            v[top] = s.v[top];
        }
        top--;
    }
    return *this;
}

template&lt;class T&gt;
bool Stack&lt;T&gt;::Consistent() const
{
    // Weak check
    return (top &lt; int(nelems)) 
           and (v != 0);
}

#endif // STACK_H

&#151; End of Listing &#151;</pre></body></html>
