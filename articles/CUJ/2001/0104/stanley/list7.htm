<HTML><HEAD>
<TITLE>April 2001/Adding Exception Testing to Unit Tests/Listing 7</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 7: Herb Sutter&#146;s stack class &#151; first of three presented in his book, Exceptional C++</A></h4>
<pre>
#ifndef STACK_H
#define STACK_H

#include &lt;cassert&gt;
#include &lt;algorithm&gt; // for swap
#include &lt;cstdlib&gt; // for size_t

#define STACK_HAS_TOP

template &lt;class T&gt; 
class Stack
{
public:
    Stack();
    ~Stack();
    Stack( const Stack&amp; );
    Stack&amp; operator=( const Stack&amp; );
    std::size_t Size() const;
    void Push( const T&amp; );
    const T&amp; Top() const;  // if empty, throws exception.
    void Pop(); // if empty, throws exception.

    // Just checks that the internal representation 
    // is consistent, ie not destroyed.
    bool Consistent() const;
private:
    std::size_t vsize_;
    T* v_; // ptr to a memory area big enough for 'vsize_' Ts
    std::size_t vused_; // # of T's actually in use

    T* NewCopy( const T* src,
        std::size_t srcsize,
        std::size_t destsize );
};

template&lt;class T&gt;
Stack&lt;T&gt;::Stack():
    vsize_( 10 ), // initial allocation size
    v_( new T[vsize_] ),
    vused_( 0 ) // Nothing used yet
{}

template&lt;class T&gt;
Stack&lt;T&gt;::~Stack()
{
    delete [] v_;
}

template&lt;class T&gt;
Stack&lt;T&gt;::Stack( const Stack&lt;T&gt;&amp; other ) :
    vsize_( other.vsize_ ),
    v_( NewCopy( other.v_,
        other.vused_,
        other.vsize_ ) ),
    vused_( other.vused_ )
{}

template&lt;class T&gt;
Stack&lt;T&gt;&amp;
Stack&lt;T&gt;::operator=( const Stack&lt;T&gt;&amp; other )
{
    if( this != &amp;other ) {
        T* v_new = NewCopy( other.v_,
                other.vused_,
                other.vsize_ );
        delete [] v_; // this can't throw
        v_ = v_new;
        vsize_ = other.vsize_;
        vused_ = other.vused_;
    }
    return *this;
}

template&lt;class T&gt;
std::size_t Stack&lt;T&gt;::Size() const
{
    return vused_;
}

template&lt;class T&gt;
void Stack&lt;T&gt;::Push( const T&amp; t )
{
    if( vused_ == vsize_ ) { // grow if necessary by some 
                             // grow factor
        size_t vsize_new = vsize_*2 + 1;
        T* v_new = NewCopy( v_, vsize_, vsize_new );
        delete [] v_; // this can't throw
        v_ = v_new; // take ownership
        vsize_ = vsize_new;
    }
    v_[vused_] = t;
    ++vused_;
}

template&lt;class T&gt;
const T&amp; Stack&lt;T&gt;::Top() const
{
    if( vused_ == 0 ) {
        throw "empty stack";
    }
    return v_[vused_-1];
}

template&lt;class T&gt;
void Stack&lt;T&gt;::Pop()
{
    if( vused_ == 0 ) {
        throw "empty stack";
    }
    --vused_;
}

template&lt;class T&gt;
bool Stack&lt;T&gt;::Consistent() const
{
    // Weak check.
    return vused_ &lt;= vsize_ and v_ != NULL;
}

template&lt;class T&gt;
T* Stack&lt;T&gt;::NewCopy( const T* src,
    std::size_t srcsize,
    std::size_t destsize )
{
    assert( destsize &gt;= srcsize );
    T* dest = new T[destsize];
    try {
        copy( src, src+srcsize, dest );
    }
    catch(...) {
        delete [] dest;
        throw;
    }
    return dest;
}

#endif // STACK_H
&#151; End of Listing &#151;</pre></body></html>
