<HTML><HEAD>
<TITLE>April 2001/Adding Exception Testing to Unit Tests/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: Fixed version of David Reed&#146;s stack class from <a href="list3.htm">Listing 3</a></A></h4>
<pre>
#ifndef STACK_H
#define STACK_H

#include &lt;algorithm&gt; // for swap

template&lt;class T&gt;
class Stack 
{
    unsigned nelems;
    int top;
    T* v;
public:
    unsigned Size();
    void Push(T);
    T Pop();

    Stack();
    ~Stack();
    Stack( const Stack&amp; );
    Stack&amp; operator=(const Stack&amp;);

    bool Consistent() const;
};

template&lt;class T&gt;
Stack&lt;T&gt;::Stack()
{
    top = -1;
    v = new T[nelems=10];
}

template&lt;class T&gt;
Stack&lt;T&gt;::Stack( const Stack&lt;T&gt;&amp; s )
{
    v = new T[nelems = s.nelems];
    if( s.top &gt; -1 ) {
        // 20000408 bstanley fix 7 cater for 
        // exceptions in T::operator=
        try {
            for( top = 0; top &lt;= s.top; top++ )
                v[top] = s.v[top];
        } catch(...) {
            delete [] v;
            throw;
        }

        top--;
    } else {
        // 20000408 bstanley fix 1
        top = -1;
    }
}

template&lt;class T&gt;
Stack&lt;T&gt;::~Stack()
{
    delete[] v;
}

template&lt;class T&gt;
void Stack&lt;T&gt;::Push( T element )
{
    top++;
    // 20000408 bstanley fix 6 - commit or rollback semantics.
    try {
        if( top == nelems-1 ) {
            T* new_buffer = new T[nelems+=10];
            // 20000408 bstanley fix 5 - 
            // added exception handling to prevent leak.
            try {
                for( int i = 0; i &lt; top; i++ ) {
                    new_buffer[i] = v[i];
                }
            } catch( ... ) {
                delete [] new_buffer;
                throw;
            }
            delete [] v;
            v = new_buffer;
        }
        v[top] = element;
    } catch( ... ) {
        --top;
        throw;
    }
}

template&lt;class T&gt;
T Stack&lt;T&gt;::Pop()
{
    if( top &lt; 0 ) throw "pop on empty stack";
    return v[top--];
}

template&lt;class T&gt;
unsigned Stack&lt;T&gt;::Size()
{
    return top+1;
}

template&lt;class T&gt;
Stack&lt;T&gt;&amp; Stack&lt;T&gt;::operator=( const Stack&lt;T&gt;&amp; s )
{
    // 20000408 bstanley fix 3
    if( this != &amp;s ) {
        // 20000408 bstanley fix 4 re-written to be exception safe.
        T* v_new = new T[nelems = s.nelems];
        if( s.top &gt; -1 ) {
            try {
                for( top = 0; top &lt;= s.top; top++ ) {
                    v_new[top] = s.v[top];
                }
                --top;
            } catch(...) {
                delete [] v_new;
                throw;
            }
        } else {
            // 20000408 bstanley fix 2
            top = -1;
        }
        // now swap
        swap( v, v_new ); // can't throw.
        delete [] v_new;
    }
    return *this;
}

template&lt;class T&gt;
bool
Stack&lt;T&gt;::Consistent() const
{
    // Weak check
    return (top &lt; int(nelems)) and (v != 0);
}

#endif // STACK_H
&#151; End of Listing &#151;</pre></body></html>
