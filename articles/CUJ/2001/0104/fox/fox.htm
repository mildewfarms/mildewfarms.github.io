<HTML>   
     <HEAD>
<TITLE>April 2001/A Handy Debugging Class</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   Testing and Debuggin</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A Handy Debugging Class</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Maurice Fox</FONT></H3>

<BLOCKQUOTE>
<p>Tracing, debugging, and timing &#151; all in one package and dynamically controllable with simple, intuitive control strings.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>From time to time, most of us need to look inside a running program to see what&#146;s going on, either by tracing function calls or inspecting the values of variables. This article shows a way to do that and more using a flexible C++ <B>Debug</B> class as is or extending it to meet your own needs. <B>Debug</B> provides for tracing, debugging, interval timing, and output control. It provides optional function timing in connection with tracing. You can control the <B>Debug</B> object at run time using control strings, as I explain later in this article. You can use conditional compilation to adjust some of the <B>Debug</B> object&#146;s characteristics or even disable it entirely.</p>
<p>I developed <B>Debug</B> using gcc on OS/2. A number of my team members have used it in AIX and Visual C++ environments. It should work on most platforms that support the Standard C++ library with little or no porting effort. The keyword and control string approach was inspired by a somewhat similar C package written by Fred Fish. This C++ implementation, however, is totally original.</p>

<H3><FONT COLOR="#000080">The Interface</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows the <B>Debug</B> class&#146;s public interface. To use the package, <B>#include</B> the <B>Debug</B> header file, and then create a <B>Debug</B> object inside each function that you are interested in. The constructor and destructor for that object take care of tracing entry and exit of the function, timing the function call if you like. You can use one of the overloaded member functions, <B>Debug::Dbg</B>, to display text and the value of a variable. These functions have been overloaded for the built-in types <B>int</B>, <B>const char *</B>, and <B>float</B>. (There is an additional member function <B>Debug::Dbx</B> to display an unsigned long in hexadecimal.) You can use a pair of static functions to time arbitrary intervals without depending on <B>Debug</B> objects.</p>
<p>By default, the <B>Debug</B> class produces no output. To get output, you need to call the static function <B>Debug::specify</B> to pass in a control string. You can call <B>Debug::specify</B> as often as you like for fine-grained control of the class.</p>

<H3><FONT COLOR="#000080">Debugging Features</FONT></H3>

<p>The debugging package provides three major functions: tracing, debugging, and interval timing. To use these features in a program, you first add code to relevant portions of your program to construct <B>Debug</B> objects and to call <B>Debug</B> member functions; you then enable or disable the features by passing keywords to the debugging package at run time, in the form of control strings. The following is a description of these major functions.</p>

<H4><FONT COLOR="#000080">Tracing</FONT></H4>

<p>In this article, tracing means printing a line of data upon entering and exiting a function. To get tracing functionality, construct a <B>Debug</B> object at or near entry to the function. Pass the name of the function as an argument string to the <B>Debug</B> object&#146;s constructor. Tracing output will be printed if tracing is enabled and either of two conditions is true: a keyword that matches the function name has been supplied by the user, or the collection of keywords is empty.</p>
<p>Having tracing on causes tracing and debugging output to be indented by two spaces for each level of function call up to a fixed limit, currently 12. Upon execution of the <B>Debug</B> object constructor, a line of data goes to the output, which looks something like this:</p>

<pre>
=&gt; fred
</pre>

<p>When the program returns from the function or otherwise exits the scope in which the <B>Debug</B> object was constructed, the object&#146;s destructor runs and inserts a line of data into the output, which looks something like this:</p>

<pre>
&lt;= fred
</pre>

<p>Thus, no special effort is needed for exit tracing.</p>
<p>Function timing is an optional capability included with tracing. You select function timing at compile time by choosing the correct constructor for creating the <B>Debug</B> object at the beginning of the function. If you use the constructor with only one parameter, you don&#146;t get timing. If you use the one with two parameters, you get timing. The second parameter is a <B>bool</B>, which you can think of as &#147;raw timing.&#148; If its value is <B>true</B>, you get the time since the Epoch (or whatever your OS uses) upon entry and the elapsed time of the function on exit. This time is purportedly in seconds and milliseconds, but its precision depends upon the clock tick rate on your system. If the second parameter to the constructor is <B>false</B>, you get user-friendly time in the style of <B>asctime</B>, which is what the <B>Debug</B> class uses.</p>
<p>For example, if you write <B>Debug D("fred");</B> you get:</p>

<pre>
=&gt; fred

&lt;= fred
</pre>

<p>If you write <B>Debug D("fred", true);</B> you get:</p>

<pre>
=&gt; fred 901238947.234

&lt;= fred         0.877
</pre>

<p>If you write <B>Debug D("fred", false);</B> you get:</p>

<pre>
=&gt; fred Sat May 13 15:39:23 2000

&lt;= fred Sat May 13 15:39:24 2000
</pre>

<H4><FONT COLOR="#000080">Debugging</FONT></H4>

<p>Debugging in this context simply means printing a line of data to the output. (As opposed to &#147;tracing,&#148; which happens on function entry and exit, debugging causes immediate output in response to a call to one of the <B>Dbg</B> or <B>Dbx</B> functions.) To get debugging output, use an overloaded <B>Dbg</B> member function or the <B>Dbx</B> member function of a previously constructed <B>Debug</B> object. See the function prototypes in <a href="list1.htm">Listing 1</a> for the available choices. In <B>Dbx</B> and each variant of <B>Dbg</B>, the first argument is treated as the keyword that controls debugging. The line that is printed contains indentation (if tracing is in effect); the keyword is followed by a colon and then the requested output. The line is printed if debugging is enabled and either of two conditions is true: a keyword that matches the keyword passed as an argument has been supplied by the user, or the collection of keywords is empty.</p>
<p>The package provides a small set of generally useful <B>Dbg</B> functions. If these don&#146;t meet your needs, you can use the given functions as a pattern to write your own. Another alternative is to use a single output stream, as described below.</p>

<H4><FONT COLOR="#000080">Interval Timing</FONT></H4>

<p>Interval timing allows you to measure the elapsed time between any two points in the program. You provide for interval timing by placing a call to <B>Debug::TimeStart</B> at the start of the interval and a call to <B>Debug::TimeEnd</B> at the end of the interval. These are static functions, which means that you need not create a <B>Debug</B> object to invoke them. (You may invoke them through a <B>Debug</B> object if you like, however.) It also means that the start and end points of the time interval(s) being measured need not be in the same function. Interval timing is controlled by keywords in the same fashion as tracing or debugging. Each keyword is timed independently, so the intervals being timed can overlap.</p>
<p>You can use one <B>TimeStart</B> call to mark a single point and then a number of <B>TimeEnd</B> calls with the same keyword to get a series of elapsed times from that single start point. If you call <B>TimeEnd</B> without a preceding call to <B>TimeStart</B> with the same keyword, you will get the same result as if you had called <B>TimeStart</B> immediately followed by <B>TimeEnd</B>. If you call <B>TimeStart</B> for the same keyword several times without intervening calls to <B>TimeEnd</B>, the package uses the last one called as the start of the timing interval. This won&#146;t break anything and might even be useful.</p>

<H3><FONT COLOR="#000080">Control Strings</FONT></H3>

<p>Control strings direct the actions of the package. A control string is a sequence of non-blank characters of the form <B>[Anything]Option[Option*]</B>. (Here, text enclosed in square braces represents an optional expression. An asterisk following an expression represents zero or more occurrences of the expression.) <B>Option</B> is a sequence of the form <B>X:[keyword_list]</B>. <B>X</B> represents a single non-blank character other than a comma or colon. <B>keyword_list</B> represents an optional sequence of &#147;words&#148; separated by commas. Each &#147;word&#148; is a sequence of non-blank characters other than a comma or colon. The first option can be preceded by <B>Anything</B>, a sequence of non-blank characters not containing a colon, which the package ignores. You will see the reason for allowing a string of <B>Anything</B> under the section, Using the <B>Debug</B> Class.</p>
<p>The following is a syntactically valid control string:</p>

<pre>
D:fred,wilma,logT:O:debug.out
</pre>

<p>So is this one:</p>

<pre>
DEBUGD:fred,wilma,logT:O:debug.out
</pre>

<p>In the first example, the options are <B>D:</B>, <B>T:</B>, and <B>O:</B>. Three keywords, <B>fred</B>, <B>wilma</B>, and <B>log</B>, follow the option <B>D:</B>; no keywords follow the option <B>T:</B>; and one keyword, <B>debug.out</B>, follows <B>O:</B>. In the second example, the arbitrary string <B>DEBUG</B> precedes the first option, which is again <B>D:</B>.</p>
<p>All options, except for <B>O:</B>, come in pairs. The capital letter turns something on and remembers any keywords supplied. The corresponding lowercase letter turns the same thing off and forgets any remembered keywords. The next few paragraphs explain the options that the package recognizes.</p>

<H4><FONT COLOR="#000080">Control String Options</FONT></H4>

<p><B>T:</B> Enables tracing. The package saves the keywords that follow this option and matches them against the function name provided to a <B>Debug</B> object constructor. If the package finds a match, it traces the named function at entry and exit. (This assumes that you have already modified the named function to create such a <B>Debug</B> object within its body.) If no keywords are in effect, the package traces all instrumented functions at entry and exit. If you give this option with keywords several times, the keywords you specified are added to the list of keywords recognized. You can specify the same keyword several times; that doesn&#146;t accomplish anything special, but it doesn&#146;t hurt anything, either.</p>
<p><B>t:</B> Disables tracing. This turns tracing off and clears the remembered keywords. Any keywords that follow this option are ignored, but cause no error. For example, you could type the control string <B>T:main,f1</B> at one point in the program. Only the functions <B>main</B> and <B>f1</B> would be traced. Later on, if you type the string <B>t:T:</B>, it will first have the effect of disabling tracing and clearing the keywords and then enabling tracing for all functions. All other options, except <B>O:</B>, work the same way.</p>
<p><B>D:</B> Enables debugging. The program saves keywords that follow the option and matches them against the keyword provided to each call to the member function <B>Dbg</B> (or <B>Dbx</B>). If it finds a match, it prints a line to the output. If no keywords are in effect, all calls to <B>Dbg</B> (or <B>Dbx</B>) result in lines being printed. As with <B>T:</B>, entering this option several times with keywords causes the keywords to accumulate.</p>
<p><B>d:</B> Disables debugging. This turns debugging off and clears the list of remembered keywords. The same logic described above for <B>t:</B> applies, only to debugging.</p>
<p><B>M:</B> Enables interval timing. The program saves keywords that follow the option and matches them against the keyword provided to each call to the static functions <B>TimeStart</B> and <B>TimeEnd</B>. If the program finds a match, it prints a line to the output. The function <B>TimeStart</B> starts timing the interval associated with the keyword and prints the raw time. The function <B>TimeEnd</B> stops timing the interval associated with the keyword and prints the elapsed time since the last call to <B>TimeStart</B> for that keyword. If no keywords are in effect, all calls to <B>TimeStart</B> and <B>TimeEnd</B> result in lines being printed. As with <B>T:</B>, giving this option several times with keywords causes the keywords to accumulate. Note that <B>TimeStart</B> and <B>TimeEnd</B> are static functions. This means that they do not depend upon a <B>Debug</B> object, so you can use them to time arbitrary operations, even between parent and child processes in a Unix-like environment.</p>
<p><B>m:</B> Disables interval timing. This turns interval timing off and clears the remembered keywords. The same logic described above for <B>t:</B> applies, only to interval timing.</p>
<p><B>O:</B> Output control. Provide a keyword after the <B>O:</B> to select the output destination, as follows: - (single dash) selects standard output (<B>cout</B>); -- (double dash) selects buffered standard error (<B>clog</B>). Anything else becomes the filename for an <B>open</B> call. The package opens the file for appending, so you can switch from one file to another and back again without losing data. This capability also allows you to do such things as limit the size of log files. If you specify several keywords (useless but harmless), only the last one seen has any effect.</p>
<p>It is not necessary to supply an <B>O:</B> option to get output. By default, the package is completely inactive, but its output is preset to <B>clog</B>. If you just choose <B>D:</B>, <B>T:</B>, or <B>M:</B>, you will get output to <B>clog</B>.</p>

<H3><FONT COLOR="#000080">Using the Debug Class</FONT></H3>

<p>Making <B>Debug</B> work for you comes down to three things: organizing your view of your program, coding useful function calls, and passing in control strings to make output appear.</p>
<p>Organizing your view of the program consists of selecting the keywords you will use when invoking constructors and other member functions of class <B>Debug</B>. For a <B>Debug</B> constructor, I routinely use the name of the function it&#146;s used in; you may find reason to do otherwise. For debugging, you could use the same keyword everywhere, but it&#146;s better to use a number of keywords, one for each major topic of the program. That way, when you get one aspect of the program under control, you can use the keywords in the control string to see only the parts you still need. The package prints the keyword on each line of output &#151; this makes it easy to use tools like grep to sift through the output for specific information. For interval timing, you can use multiple keywords, or possibly just a single keyword to establish a start time. You could then use a text string in the <B>Debug::TimeEnd</B> call to tell the different places apart.</p>
<p>The package gets its control strings through the static function <B>Debug::specify</B>, which takes as its argument a C-style string pointer. You can set up your test program to read the first control string from the command line when the program starts, by scanning the <B>argv[]</B> parameter to <B>main</B>. <a href="list2.htm">Listing 2</a> shows a couple of examples of this approach.</p>
<p>Considering the first example, while in the development phase, you could run the program by typing something like <B>-DEBUGD:T:</B> on the command line, which would trace and debug everything to <B>clog</B>. A line like <B>-DEBUGT:D:A,B,CO:debug.out</B> would trace everything; debug only those lines with keywords <B>A</B>, <B>B</B>, or <B>C</B>; and put the data into the file <B>debug.out</B>. If you don&#146;t provide a control string on the command line, the program will produce no debugging output.</p>
<p>Another possibility is to use the package for logging. The second example shows a way to do that by using a default control string that will be in effect for production, but enables you to override it from the command line for development.</p>
<p>In a situation where getting data from the command line is not feasible, such as a GUI project, you can use an environment variable to pass in a control string.</p>

<H4><FONT COLOR="#000080">Flushing Output</FONT></H4>

<p>In the interest of performance, the package does not flush its output after each line. It uses &#147;\n&#148; at the end of each output statement instead of <B>endl</B>. The static function <B>Sync</B> allows you to flush the output stream at will. This can be useful when several processes are writing to the same file, as can happen when a process forks a child in a Unix environment. In a Unix environment, you may want to do something like this:</p>

<pre>
D.Sync();
pid = fork();
</pre>

<p>or</p>

<pre>
Debug::Sync();
pid = fork();
</pre>

<H3><FONT COLOR="#000080">Compile-Time Options</FONT></H3>

<H4><FONT COLOR="#000080">Multiple Keywords</FONT></H4>

<p>This option allows you to specify several keywords, separated by commas, (no spaces!) for a <B>Dbg</B>, <B>Dbx</B>, <B>TimeStart</B>, or <B>TimeEnd</B> function call. Then, if any one of the keywords is in effect (or no keywords, as usual), you get the requested effect. This option could have some performance impact if you use a lot of keywords, so you select it at compile time, not run time. Define the symbol <B>DEBUG_MULT_KWDS</B> when compiling <B>Debug.cpp</B> to get this behavior. If you use this capability you can write something like this:</p>

<pre>
D.Dbg("fork,cache,file","Value of x is",x);
</pre>

<p>and get debugging output when any of the keywords <B>fork</B>, <B>cache</B>, or <B>file</B> has been specified, or when no keyword has been specified for debugging.</p>
<p>If you write such a line when using the version that does not recognize multiple keywords, you won&#146;t get any output if any keyword is specified; The code that parses control strings will not create a keyword with embedded commas, so that &#147;keyword&#148; will never be matched.</p>

<H4><FONT COLOR="#000080">Using Windows/DOS Drive Names</FONT></H4>

<p>If you want to use <B>Debug</B> in a DOS-like environment and need to include the drive name as part of the output file path, you have a problem because the colon used to identify options clashes with the colon in the drive name. To make a version that uses a semicolon to identify options instead of a colon, compile with the symbol <B>DEBUG_DOS_FORMAT</B> defined. All of the foregoing documentation still applies, except that where it reads colon, mentally substitute semicolon. Then you can use a control string like:</p>

<pre>
D;T;O;D:\test\debug.out
</pre>

<p>and get the output to the DOS file <B>D:\test\debug.out</B>. This would not work in a Unix environment, where semicolons separate commands.</p>

<H4><FONT COLOR="#000080">Using a Single Output Stream</FONT></H3>

<p>You can send all output through the same stream if you wish. To do this, compile with the symbol <B>DEBUG_1STREAM</B> defined. Internally, this option works by logically sending all output to the <B>clog</B> stream, changing the actual destination by using the <B>rdbuf</B> member function of the <B>basic_ios</B> class.</p>
<p>If you use this option, any <B>clog</B> calls made directly within your program will go wherever you have sent the output. Doing so allows you to put arbitrary data into the debugging output stream without writing your own <B>Dbg</B> calls. You can write output to <B>clog</B> with a line like this:</p>

<pre>
clog &lt;&lt; "Checkpoint " &lt;&lt; n &lt;&lt; " reached, X is now " &lt;&lt;
     x &lt;&lt; endl;
</pre>

<p>and it will go wherever you have selected using the <B>O:</B> option. This could be simpler than writing your own overloaded <B>Dbg</B> function.</p>
<p>Because output goes through <B>clog</B>, you can write something else to <B>cerr</B>, and it will go to unbuffered standard error, not to the debugging output. Of course, if you have chosen to have output go to <B>clog</B>, they will both go to the same destination. If you do not use the single output stream feature, whatever you write to <B>clog</B> or <B>cerr</B> will go to the same destination, intermingled with debugging output only if you have specified <B>O:--</B>.</p>

<H4><FONT COLOR="#000080">Compiling the Package Away</FONT></H4>

<p>Normally, the presence of the debug code will have negligible effect on the performance of the application. If you really need to eliminate debugging in production code, you can compile a new &#147;no-op&#148; version by defining the symbol <B>DEBUG_OFF</B> both for <B>Debug.cpp</B> and your own code. Usually you&#146;re just kidding yourself when you do that, though.</p>

<H3><FONT COLOR="#000080">Test/Demonstration Program</FONT></H3>
<p>You can get a standalone test/demo program by compiling <B>Debug.cpp</B> (to download, see <B>www.cuj.com/code/</B>) all alone with the symbol <B>TESTING</B> defined. Feed it control strings on the command line and watch what happens.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>This article has described the <B>Debug</B> class, a useful tool that you can use directly or extend as you need. It provides run-time control of its actions, to as fine-grained a level as you wish. Through conditional compilation, you can change several fundamental aspects of its behavior. As sample code, the <B>Debug</B> class demonstrates encapsulation, static class members, and several components of the Standard C++ library. I hope you find it as useful as my teammates and I have.</p>

<p><i><B>Maurice Fox</B> is a software development manager for a large system integrator. He has been programming for longer than he cares to disclose, using C since 1984, and using C++ for several years. He can be reached at <B>mauricef@ix.netcom.com</B>.</i></p>

<h4><a href="../../../source/2001/apr01/fox.zip"></a></h4>
</blockquote></body></html>
