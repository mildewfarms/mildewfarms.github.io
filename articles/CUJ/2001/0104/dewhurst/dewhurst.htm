<HTML>   
     <HEAD>
<TITLE>April 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: A Question of Respect</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>There are a few small items in C++ that should be marked &#147;not for casual use.&#148; Casting is one of them; Steve makes it clear as to why.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>As is usual with a deadline approaching, I was casting about for a topic for this month&#146;s column and decided that casting might be a good choice. We all know that overuse of casting is an egregious habit that bespeaks poor manners, but what is the basis of this social idiom? After all, manners are culturally defined and usually have (at least historically) some practical motivation. As anyone who must regularly satisfy the curiosity of young children or marketers knows, it&#146;s not always easy to unearth the original motivation for certain social mores. &#147;Why don&#146;t we talk with our mouths full?&#148; Easy. &#147;It&#146;s not practical to choke and expire at the dinner table.&#148; &#147;Why do Americans eat with their left hands in their laps, while Europeans put their left hands on the table?&#148; Pause. &#147;Americans need to have quick access to their firearms during meals.&#148; &#147;Why can&#146;t I make a castle out of my vegetables?&#148; Count to ten. &#147;Because I say so!&#148;</p>
<p>In an earlier column, we discussed the socially gauche and technically disastrous approach of asking personal questions of an object through the use of dynamic casts <a href="#1">[1]</a>. There, we trashed both type queries and capability queries, with a few glancing blows thrown at managers and Java. This month we&#146;ll look at non-dynamic casting. In effect, we&#146;ll see that improper use of static casts is the inverse of a type query. Instead of asking probing personal questions of an object, a static cast denies an object the recognition of its identity and tries to force it to act outside the range of its innate capabilities. Think about what would happen if one of your colleagues from marketing were suddenly told to write C++ code. That&#146;s a static cast.</p>

<H3><FONT COLOR="#000080">Old and New Casts</FONT></H3>

<p>Don&#146;t use old-style casts. They simply do too much for and to you, and are entirely too easy to use. Consider a header file:</p>

<pre>
// emp.h
//...
const Person *getNextEmployee();
//...
</pre>

<p>This header is used throughout the application, including in the following section of code.</p>

<pre>
#include "emp.h"
//...
Person *victim =
   (Person *)getNextEmployee();
dealWith( victim );
//...
</pre>

<p>Now, any casting away of constness is potentially dangerous and non-portable. Suppose, however, the author of this code is more clairvoyant than the rest of us and has determined that this particular use of the cast is correct and portable. The code is still wrong for two reasons. First, the conversion requested is much stronger than is necessary. Second, the author has fallen into the beginner&#146;s fallacy of depending on &#147;secondary semantics;&#148; this code assumes that the unadvertised meanings of the abstraction expressed by the <B>getNextEmployee</B> function will continue to be supported in the future.</p>
<p>Essentially, this use of <B>getNextEmployee</B> assumes that the function will never change after its initial implementation. Of course, this is not the case. Soon the implementer of the <B>emp.h</B> header file will recognize that employees are not people and correct the design accordingly:</p>

<pre>
// emp.h
//...
const Employee *getNextEmployee();
//...
</pre>

<p>Unfortunately, the cast is still legal, although it has changed its meaning from modifying the constness of its object to changing the set of operations available on the object. In using the cast, we are telling the compiler that we know more about the type system than the compiler does. Originally, this may have been the case, but when the header file is maintained, it is unlikely that all uses of the header will be revisited, and our imperious command to the compiler will stand uncorrected. The use of the appropriate new-style cast would have allowed the compiler to detect the change in usage and flag the error:</p>

<pre>
#include "emp.h"
//...
Person *victim =
   const_cast&lt;Person *&gt;
     (getNextEmployee());
dealWith( victim );
</pre>

<p>Note that the use of a <B>const_cast</B>, while an improvement over an old style cast, is still dangerous. We are still relying on the assumption that, under maintenance, the unadvertised &#151; and perhaps accidental &#151; collaboration between the functions <B>getNextEmployee</B> and <B>dealWith</B> that permit the <B>const_cast</B> will continue to hold. Very tenuous.</p>

<H3><FONT COLOR="#000080">Casting under Multiple Inheritance</FONT></H3>

<p>Under multiple inheritance, an object may have many valid addresses. Each base class subobject of a complete object may have a unique address, and each of these addresses is a valid address for the complete object.</p>

<pre>
class A { /*...*/ };
class B { /*...*/ };
class C :
   public A, public B { /*...*/ };
//...
C *cp = new C;
A *ap = cp; // OK
B *bp = cp; // OK
</pre>

<p>In the example above, it is likely that the <B>B</B> subobject of the <B>C</B> complete object is allocated at a fixed offset, or &#147;delta,&#148; from the start of the <B>C</B> object. Conversion of the derived class pointer <B>cp</B> to <B>B *</B> will therefore result in adjustment of <B>cp</B> by the delta to produce a valid <B>B</B> address. The conversion is type safe, efficient, and automatically implemented by the compiler.</p>
<p>Similarly, the existence of multiple valid addresses for an object forces C++ to be precise about the meaning of pointer comparison:</p>

<pre>
if( bp == cp ) //...
</pre>

<p>The question we are asking above is not &#147;Do these two pointers contain the same bit pattern?&#148;, but rather &#147;Do these two pointers refer to the same object?&#148; The implementation of the condition may be somewhat more complex, but is still efficient, safe, and automatic:</p>

<pre>
if( bp ?
   (char *)bp-delta==(char *)cp :
   cp==0 )
</pre>

<p>Both old and new style casts may be used to perform conversions that respect delta arithmetic on class object addresses. However, unlike the conversions above, there is no guarantee that the result of the cast will be a valid address. (A <B>dynamic_cast</B> will give such a guarantee, but introduces other problems.)</p>

<pre>
B *gimmeAB();
bp = gimmeAB();
cp = static_cast&lt;C *&gt;(bp);
cp = (C *) bp;
typedef C *CP;
cp = CP( bp );
</pre>

<p>All three casts above will perform delta arithmetic on <B>bp</B>, but the result will be valid only if the <B>B</B> object to which <B>bp</B> refers is part of a containing <B>C</B> object. If this assumption is incorrect, the result will be a bad address, equivalent to some creative C-style code:</p>

<pre>
cp = (C *)((char *)bp-delta)
</pre>

<p>A <B>reinterpret_cast</B> will do just what it says. It will simply reinterpret the bit pattern of its argument to mean something else, without modifying the bits. Effectively, it &#147;turns off&#148; the delta arithmetic.</p>

<pre>
// yes, I do want to dump core...
cp = reinterpret_cast&lt;C *&gt;(bp);
</pre>

<p>All these uses of casts are asking the object referred to by the <B>B</B> pointer to take on more responsibility than its interface can guarantee. As we saw in an earlier article, bad designs often result from using <B>dynamic_cast</B> to ask an object detailed questions about its type and capabilities. In this case, we have a bad design because we know too little about an object&#146;s capabilities, but are using a static cast to force it into a role that it may not be able to fulfill.</p>

<H3><FONT COLOR="#000080">Casting Incomplete Types</FONT></H3>

<p>Incomplete class types have no definition, but it is still possible to declare pointers and references to them and to declare functions that take arguments and return results of the incomplete types. This is a common and useful practice:</p>

<pre>
class Y;
class Z;
Y *convert( Z * );
</pre>

<p>The problem arises when a programmer tries to force the issue; ignorance is bliss only to a certain extent:</p>

<pre>
Y *convert( Z *zp )
  {
  return reinterpret_cast&lt;Y *&gt;(zp);
  }
</pre>

<p>The <B>reinterpret_cast</B> is necessary here, because the compiler does not have any information available about the relationship between the types <B>Y</B> and <B>Z</B>. Therefore the best it can offer us is to &#147;reinterpret&#148; the bit pattern in the <B>Z</B> pointer as a <B>Y</B> pointer. This may even work for a while:</p>

<pre>
class Y { /*...*/ };
class Z : public Y { /*...*/ };
</pre>

<p>It is likely that the <B>Y</B> base class subobject in a <B>Z</B> object has the same address as the complete object. However, this may not continue to be the case, and a remote change could affect the validity of the cast:</p>

<pre>
class X { /*...*/ };
class Z :
   public X, public Y { /*...*/ };
</pre>

<p>The use of a <B>reinterpret_cast</B> causes the delta arithmetic to be &#147;turned off,&#148; and we&#146;ll get a bad <B>Y</B> address.</p>
<p>Actually, the <B>reinterpret_cast</B> is not the only choice above, since we could have used an old-style cast as well. This may initially seem the better choice, because an old-style cast will perform the delta arithmetic if it has enough information at its disposal. However, this flexibility actually compounds the problem, because we may get different behavior from the ostensibly same conversion depending on what information is available when the conversion is defined:</p>

<pre>
Y *convert( Z *zp )
  { return (Y *)zp; }
//...
class Z :
  public X, public Y { //... };
//...
Z *zp = new Z;
Y *yp1 = convert( zp );
Y *yp2 = (Y *)zp;
cout &lt;&lt; zp &lt;&lt; ' ' &lt;&lt; yp1 &lt;&lt; ' '
     &lt;&lt; yp2 &lt;&lt; endl;
</pre>

<p>The value of <B>yp1</B> will match that of either <B>zp</B> or <B>yp2</B> depending on whether the definition of <B>convert</B> occurs before or after the definition of class <B>Z</B>. The situation can become immeasurably more complex if <B>convert</B> is a template function with many instantiations in many different object files. In this case, the ultimate meaning of the cast may depend on the idiosyncrasies of your linker. The use of <B>reinterpret_cast</B> is preferable to that of an old-style cast, in this case, because it will be more consistently incorrect. My preference would be to avoid either.</p>

<H3><FONT COLOR="#000080">void * Is a Cast</FONT></H3>

<p>A <B>void</B> pointer can refer to any data and frequently does. Copying an address to a <B>void</B> pointer is logically equivalent to a <B>reinterpret_cast</B> of the address. While it is legal to copy an address into a <B>void</B> pointer and cast the result back to its original type, it&#146;s not always easy to determine the original type. Consider a simple multiple inheritance hierarchy:</p>

<pre>
class Button { /*...*/ };
class Subject { /*...*/ };
class ObservedButton
   : public Subject,
   public Button { /*...*/ };
</pre>

<p>It&#146;s unlikely that even a summer intern would purposefully lose and then attempt to resupply type information:</p>

<pre>
Button *badButton =
   (Button *)(void *)
      new ObservedButton;
</pre>

<p>This sequence of conversions will (probably) result in a bad address. The conversion to <B>void *</B> disposes of all knowledge of the hierarchy, and the conversion from <B>void *</B> to <B>Button</B> cannot then perform the correct delta arithmetic. This is the sort of error that often arises when a sequence of conversions is separated in time and space. For example, a user interface toolkit may attempt to use <B>void</B> pointers for flexibility (otherwise known as abdication of design responsibility), which in turn requires that users of the toolkit resupply type information:</p>

<pre>
// toolkit header...
typedef void *Widget;
void setWidget( Widget );
Widget getWidget();

// elsewhere...
ObservedButton *b =
   new ObservedButton;
setWidget( b );

// somewhere else entirely...
Button *bb =
   static_cast&lt;Button *&gt;
      (getWidget());
</pre>

<p>Here we have the same error as previously, but it&#146;s a collaborative effort among the toolkit designer, the creator of the <B>Widget</B>, and the user of the <B>Widget</B>.</p>
<p>A public interface that contains a <B>void</B> pointer is probably wrong. A public interface that requires a user to cast arguments or results is probably wrong.</p>

<H3><FONT COLOR="#000080">Because I Say So!</FONT></H3>

<p>The basic problem with static casts is that they&#146;re static. In employing such a construct, we are asking the compiler to accept our version of an object&#146;s capabilities rather than the object&#146;s. While many uses of casts may result in code that is initially correct, that code is not able to adjust itself automatically to changes in an object&#146;s type structure. Because these changes are generally remote from the point of the cast, maintainers often do not modify the code containing the cast. At the same time, the cast has the additional effect of turning off any diagnostics the compiler would otherwise have provided.</p>
<p>Casts are not essentially evil, but they must be used in moderation, in private, and in such a way that future maintenance of code remote from the cast will not invalidate the cast. From a practical perspective, these requirements imply that one should, in general, avoid casting abstract data types, and most particularly abstract data types in a hierarchy.</p>
<p>Use of a static cast is often, as Scott Meyers has observed, &#147;a sign that negotiations between you and your compiler have broken down.&#148; In effect, a static cast not only tells your compiler &#147;because I say so&#148; (and, as with a similar discussion with a human interlocutor, guarantees the end of any useful communication), it shows a lack of respect to the public interface offered by the abstract data type that is being cast. Thoughtful, negotiated solutions that respect the advertised capabilities of objects often require more finesse than a heavy-handed cast, but generally result in more robust, portable, and useable code and interfaces.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>
<p><a name="1"></a>[1]  S. C. Dewhurst. &#147;Don&#146;t Ask, Don&#146;t Tell,&#148; <I>C++ Report</I>, May, 2000.</p>

<p><i><B>Stephen C. Dewhurst</B> is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ and object-oriented mentoring and consulting, and training in advanced C++ programming, STL, and design patterns. He may be reached at <B>www.semantics.org</B>.</i></p>

</blockquote></body></html>
