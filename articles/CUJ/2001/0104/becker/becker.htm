<HTML>   
     <HEAD>
<TITLE>April 2001/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: STL Container Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>We&#146;ve all heard we can use iterators &#147;just like pointers,&#148; but that isn&#146;t the whole story. Some iterators are important for what they won&#146;t let you do &#151; especially when protecting the integrity of a container.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">The std::map Example Explained</FONT></H3>

<p>Before I get to the main topic of this month&#146;s column, I owe you the solution to the little homework assignment I gave you. In my last column, I showed you how <B>std::map</B> could be used to easily and efficiently solve a time-honored problem: how to keep track of the number of times that each word occurs in a text. As an exercise, I encouraged you to use your STL book or documentation to fully understand the code, which is shown again in <a href="list1.htm">Listing 1</a>. As promised, I will now explain the code in detail.</p>
<p>What needs explanation here is of course the one line that makes up the body of the <B>while</B>-loop. Before we analyze the code, a word about style is in order. I consider cramming several nested function calls into a single line like this to be poor programming style, typical of the it-was-hard-for-me-to-write-why-should-it-be-easy-for-others-to-understand school of software engineering. Another great example of an attitude that is deemed cool only by those who sport it, while everybody else thinks it&#146;s pretty dumb. A better idea is to split up a line like this one into several lines, each of which defines a variable that is then used as a function argument in a subsequent line. <a href="list2.htm">Listing 2</a> shows what becomes of my one-liner when it is completely unraveled.</p>
<p>Without going into any details yet, if you compare <a href="list2.htm">Listing 2</a> to my original one-liner in <a href="list1.htm">Listing 1</a>, you will probably agree that these two versions represent two extremes, neither of which is entirely satisfactory. Due to the abundance of class templates in the STL, defining intermediate variables often obfuscates the code more than it clarifies it. As we will see in just a moment, the STL actually encourages you to lean at least a little towards the one-line style. For a very interesting, almost funny pitfall in this context, I encourage you to read Herb Sutter&#146;s &#147;Guru of the Week #75&#148; <a href="#1">[1]</a>.</p>
<p>Let us now analyze <a href="list2.htm">Listing 2</a> step by step. In the first line, an <B>std::pair</B> is declared. <B>std::pair</B> is a simple struct that contains two public data members, <B>first</B> and <B>second</B>, whose types are given by template parameters. There are some extras that come with <B>std::pair</B> that you should look up in your documentation, but the essence of it is just this:</p>

<pre>
template&lt;typename _T1, typename _T2&gt;
struct pair
{
  pair(const _T1&amp; f, const _T2&amp; s) :
    first(f), second(s) {}
  _T1 first;
  _T2 second;
};
</pre>

<p>Notice how the STL violates one of the rules of orthodox OO (object-oriented) programming here by providing public data members. I recommend that you read Jim Hyslop&#146;s and Herb Sutter&#146;s thoughts on this interesting subject <a href="#2">[2]</a>. Also notice that I&#146;m using a constructor here to generate the pair, whereas the original one-liner in <a href="list1.htm">Listing 1</a> used the function template <B>std::make_pair</B>. <B>std::make_pair</B> is a simple wrapper around the constructor:</p>

<pre>
template&lt;typename _T1, typename _T2&gt;
inline pair&lt;_T1, _T2&gt;
make_pair(const _T1&amp; f, const _T2&amp; s)
{return pair&lt;_T1, _T2&gt;(f, s); }
</pre>

<p>The point of having this function template is that it allows you to generate a temporary object of type <B>std::pair</B> without ever having to write the type of the object. If it weren&#146;t for the function <B>std::make_pair</B>, the call</p>

<pre>
std::make_pair(strWord, 0)
</pre>

<p>in the one-liner in <a href="list1.htm">Listing 1</a> would have to be replaced by the constructor call</p>

<pre>
std::pair&lt;std::string, int&gt;(strWord, 0)
</pre>

<p>Using <B>std::make_pair</B> is more elegant because you let the compiler deduce the template arguments <B>std::string</B> and <B>int</B>. When using the STL, you will encounter many more of these &#147;constructor wrappers.&#148; Examples are <B>std::bind1st</B>, <B>std::mem_fun</B>, and <B>std::ptr_fun</B>, which I will discuss in future columns. All of these are meant to be used in the same way as I used <B>std::make_pair</B>, that is, to generate a temporary object that is directly supplied as a function argument, thus avoiding the definition of an intermediate named object. In the presence of complex template arguments, this technique can really improve code readability. So, as you can see, a certain dose of cram-it-all-into-one-line can be a good thing when working with the STL. Note also how the STL violates another supposedly ironclad rule of orthodox OO programming, by using non-member functions. I recommend Scott Meyers&#146; article <a href="#3">[3]</a> for an interesting angle on this subject.</p>
<p>At this point in our analysis of <a href="list2.htm">Listing 2</a>, we have a pair consisting of the current word and the integer zero. In the second line, this pair is passed as a key-value pair to the <B>insert</B> method of our word counting map. This method works as follows: if a key-value pair with the same key (our current word in this case) already exists in the map, nothing happens. No new key-value pair is inserted, and the value of the existing pair is not modified. If no key-value pair with the same key exists in the map, the pair that was passed to <B>insert</B> is inserted into the map.</p>
<p>The return value of <B>std::map::insert</B> is a pair. The second element of that pair is a Boolean that is <B>true</B> if an actual insertion took place, and <B>false</B> otherwise. The first element of the pair is an iterator that points to the key-value pair in the map that has the given key, regardless of whether that pair has just been inserted or whether it was already there.</p>
<p>In our application, we don&#146;t care if the current word already had an entry in the map or not. In either case, all that remains to be done is to increment the value (the word count) for the word&#146;s entry. Therefore, we ignore the second component of <B>insert</B>&#146;s return value. The line marked <B>// 3</B> in <a href="list2.htm">Listing 2</a> extracts the first component of that return value and assigns it to a suitable iterator variable. The result of dereferencing an <B>std::map::iterator</B> is a reference to the key-value pair that the iterator points to. Therefore, the last line of <a href="list2.htm">Listing 2</a> increments the value of the map entry for our current word. If we wanted to be ridiculously verbose, we could have replaced this line with</p>

<pre>
std::pair&lt;const std::string, int&gt;&amp;
  pairEntryInMap = *itEntryInMap;
++pairEntryInMap.second;
</pre>

<p>Note that the exact result type of dereferencing the iterator is a reference to</p>

<pre>
std::pair&lt;const std::string, int&gt;
</pre>

<p>and not to</p>

<pre>
std::pair&lt;std::string, int&gt;
</pre>

<p>although our original declaration of the map was</p>

<pre>
std::map&lt;std::string, int&gt;
</pre>

<p>Whenever you access a key-value pair in an <B>std::map</B>, you get a pair whose first component is const, even if you did not explicitly make the key type constant in your map declaration. This is necessary because the map is internally ordered by keys. If it were possible for you to modify keys, you would be corrupting the map, rendering it inconsistent and useless.</p>
<p>I want you to realize how important it is to understand precisely how STL methods, such as <B>std::map::insert</B>, work. Somebody who has a superficial understanding of <B>std::map</B> might well write map insertion as a two-step process: in the first step, he would use <B>std::map</B>&#146;s <B>find</B> method (or, for some really bad code, the algorithm <B>std::find</B>) to check if the map already contained an entry with the key in question. If the answer was no, the insertion would be made in a second step. This is bad because it uses two independent map lookups where one would suffice. <B>std::map::insert</B> was written specifically to avoid this inefficiency.</p>
<p>In conclusion, I urge you to compare the ease and efficiency with which we just implemented the word counting mechanism to the effort that it takes to write something similar from scratch.</p>

<H3><FONT COLOR="#000080">STL Container Iterators</FONT></H3>

<p>As for the main topic of this column, STL container iterators, let me begin by saying that I will make iterators the topic of more columns in the future. The reason is that, in my experience, this is where the extensibility of the STL really starts to pay off. Writing your own iterators and using them creatively, especially in conjunction with STL algorithms, can work wonders for your code in terms of elegance, maintainability, efficiency, and productivity. But first things first. Your first exposure to iterators will undoubtedly come from using the iterators that the STL containers expose. This is where you build your understanding and your intuition of the iterator concept. As usual, reading my treatment of the subject is not a substitute for studying your STL documentation. My goal is to introduce the subject and to emphasize some points that are often overlooked in the heat of the coding battle.</p>
<p>The interfaces of the iterators that the STL containers expose emphasize the analogy to C-style pointers. All of these iterator classes define the following operators:</p>

<pre>
operator++ // prefix and postfix
operator-- // prefix and postfix
operator*
operator-&gt;
</pre>

<p>Moreover, these operators have the effect that you would expect if you viewed iterators as generalized pointers. No big surprises here. The operators</p>

<pre>
operator+
operator-
</pre>

<p>are used to advance or decrement an iterator by an arbitrary number of steps. These operators are provided by <B>vector</B> iterators and <B>deque</B> iterators, but not by <B>list</B>, <B>map</B>, or <B>set</B> iterators. Of course these operators could be implemented in terms of <B>operator++</B> and <B>operator--</B> for all container iterators. The point is that only <B>vector</B> and <B>deque</B> iterators can be advanced and decremented in amortized constant time, like actual C-style pointers. For all other STL containers, the cost of advancing or decrementing an iterator is proportional to the number of steps moved. The STL reminds you of this fact by not providing <B>operator+</B> and <B>operator-</B> in these cases.</p>
<p>There is a non-member function template <B>std::advance</B> that operates on any iterator and has the same effect as operator+. The <B>std::advance</B> template determines intelligently (typically at compile time) what kind of iterator it has been given. It then uses the most efficient way to advance the given iterator. When using <B>std::advance</B>, bear in mind that the complexity of the operation you are performing depends heavily on the type of iterator that you have supplied. All this goes to show that the analogy between C-style pointers and STL container iterators, helpful as it is, will break down eventually, especially when it comes to efficiency considerations.</p>

<H3><FONT COLOR="#000080">Const and Non-const Iterators</FONT></H3>

<p>One of the hallmarks of good C++ programming style is const correctness. Objects that are not meant to be modified should be declared const, and member functions that do not modify the state of the object should be made const member functions. The STL container iterators support and encourage this principle, and again, they do so in analogy to C-style pointers. When you work with a C-style pointer and you know that the objects pointed to are not to be modified, then you declare your pointer as a pointer to const, as in</p>

<pre>
const int* ptr;
</pre>

<p>or, equivalently,</p>

<pre>
int const * ptr;
</pre>

<p>All STL containers expose two types of iterators, called <B>iterator</B> and <B>const_iterator</B>. As a general rule, plain iterators allow you to modify the container element that they currently point to, whereas <B>const_iterator</B>s do not. The only exception to this rule is that the keys of a <B>map</B> or <B>set</B> can never be modified, because that would corrupt the ordering. Technically, iterators in general return a reference to the object they point to, whereas <B>const_iterator</B>s return a const reference to the object they point to. Here&#146;s a simple example:</p>

<pre>
std::vector&lt;int&gt; vectOfInts(42);

std::vector&lt;int&gt;::iterator it = vectOfInts.begin();
*it = 0; // OK

std::vector&lt;int&gt;::const_iterator cit = vectOfInts.begin();

// ERROR, attempt to modify *cit
// through a const_iterator
*cit = 1; 

// fine, no attempt to modify *cit
int i = *cit;
</pre>

<p>As you can see, an iterator behaves just like a pointer to non-const, whereas a <B>const_iterator</B> behaves like a pointer to const. In fact, it is quite likely that in your STL implementation, the iterators of the example above are typedefed as <B>int*</B> and <B>const int*</B>, respectively. It is important to understand the difference between a <B>const_iterator</B> and an iterator that is declared as const. The former corresponds to a pointer to const, whereas the latter corresponds to a const pointer:</p>

<pre>
std::vector&lt;int&gt; vectOfInts(42);

const std::vector&lt;int&gt;::iterator
   it = vectOfInts.begin();
*it = 0; // OK, *it is modifiable

// ERROR, calling non-const operator
// on const object.
++it; 

// ERROR, attempt to modify a const object
it = vectOfInts.end();
</pre>

<p>Const iterators like the one in this example are not a very common occurrence when working with STL containers and iterators. After all, an iterator&#146;s job is to iterate, so it&#146;s hardly any good if it can&#146;t move. By contrast, <B>const_iterator</B>s can and should be used quite frequently. A typical example is the <B>for</B>-loop at the end of <a href="list1.htm">Listing 1</a>. Here, we iterate through a container for the sake of printing its elements to the console. Common const-correctness requires that we use <B>const_iterator</B>s instead of iterators.</p>
<p>As far as conversions between const and non-const are concerned, iterators again behave like their cousins, the pointers. An iterator converts to a <B>const_iterator</B>, but not vice versa. Unfortunately, an early STL implementation that came with Microsoft Visual C++ had conversions both ways, but that has been fixed. Again, <a href="list1.htm">Listing 1</a> has an example for this conversion: <B>mapWordCount.begin</B> and <B>mapWordCount.end</B> return <B>std::map::iterator</B>s, which get converted to <B>std::map::const_iterator</B>s as they are being assigned to <B>itCurrent</B> and <B>itEnd</B>, respectively.</p>
<p>Now we know what the story is on constness and iterators. But what does it mean for a container to be const? First of all, you cannot of course call any non-const member functions on a const container:</p>

<pre>
const std::vector&lt;int&gt; constVect;

// ERROR, cannot modify a const object
constVect.resize(100);
</pre>

<p>The only way to create a const container object with anything in it is to put that something in it when the container is initialized:</p>

<pre>
std::vector&lt;int&gt; nonconstVect;
...
// put stuff in nonconstVect
...
const std::vector&lt;int&gt; constVect = nonconstVect;
</pre>

<p>The STL goes one step further and ensures that const container objects actually obey deep constness; that is, not only is it impossible to modify a const container object, it is equally impossible to modify any of the objects that it contains.</p>

<pre>
const std::vector&lt;int&gt; constVect(42);

// ERROR, constVect[0] is not modifiable
constVect[0] = 1;
</pre>

<p>In order to fully enforce this deep constness of containers, the STL allows you to obtain only <B>const_iterator</B>s, but not iterators, from a const container object:</p>

<pre>
const std::vector&lt;int&gt; constVect(42);
// ERROR, cannot obtain non-const iterator
// for const container
std::vector&lt;int&gt;::iterator it = constVect.begin();
std::vector&lt;int&gt;::const_iterator
  cit = constVect.begin(); // OK
</pre>

<p>Technically, this is achieved by overloading the <B>begin</B> and <B>end</B> methods of the containers. Each of these has a non-const version, which returns an iterator, and a const version, which returns a <B>const_iterator</B>.</p>

<H3><FONT COLOR="#000080">Iterator Validity</FONT></H3>

<p>Designers of container and iterator classes must face an important question: what should happen to an iterator when elements are added or removed from the container it points into? For STL <B>vector</B>s and <B>deque</B>s, the short answer is: when a <B>vector</B> or <B>deque</B> is modified in this manner, then all iterators into the <B>vector</B> or <B>deque</B> become invalid. The full truth is a little more subtle than that (for example, see the remarks on page 436 of Matt Austern&#146;s book <a href="#4">[4]</a>). However, to avoid hard-to-find bugs, you&#146;re best off if you just assume that after adding or removing elements from a <B>vector</B> or <B>deque</B>, previously used memory addresses are no longer good because of shifts and possible reallocations, and therefore all iterators are invalid. Any reasoning more subtle than that should be used only if there is a compelling need for it.</p>
<p>With <B>list</B>s, <B>map</B>s, and <B>set</B>s, the situation is considerably better. When elements are added to these containers, all iterators that point to existing elements remain valid. When an element is removed, only iterators that point to that element are invalidated. The technical reason why this guarantee can be made is that insertions and deletions never cause reallocations of existing elements, but only bending of pointers.</p>
<p><a href="list3.htm">Listing 3</a> shows two loops that iterate through a container and erase all elements that satisfy some condition. The first loop works on an <B>std::deque</B>, the second one on an <B>std::list</B>. In the list example, we may fetch the <B>end</B> iterator once, assign it to a variable, and then use that variable in the <B>while</B>-condition. In the <B>deque</B> example, that would be a terrible mistake, because the <B>end</B> iterator is probably going to change as elements are being erased from the <B>deque</B>. In both examples, the iterator to the erased element becomes invalid. For all STL containers, the member function <B>erase</B> returns an iterator to the position one past the erased element. Therefore, this return value is used to advance to the next position in the loop.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  <B>http://www.peerdirect.com/resources/gotw075.html</B></p>
<p><a name="2"></a>[2]  Jim Hyslop and Herb Sutter. &#147;Conversations: Access Restrictions,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, February 2001, <B>http://www.cuj.com/experts/1902/hyslop.html</B>.</p>
<p><a name="3"></a>[3]  Scott Meyers. &#147;How Non-Member Functions Improve Encapsulation,&#148; <I>C/C++ Users Journal</I>, February 2000.</p>
<p><a name="4"></a>[4]  Matthew H. Austern. <I>Generic Programming and the STL</I> (Addison Wesley, 1998).</p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2001/apr01/becker.zip"></a></h4>
</blockquote></body></html>
