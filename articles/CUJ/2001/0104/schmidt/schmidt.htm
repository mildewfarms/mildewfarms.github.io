<HTML>   
     <HEAD>
<TITLE>April 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: eWriter</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Just when we&#146;re fixin&#146; to swear at VC++ again, it turns around and does something right.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>Writing for a print magazine can be quite humbling. Once I commit something to print, I lose my last chance for immediate retraction or clarification. Every word lives forever.</p>
<p>My only real opportunity for change &#151; errata in later columns &#151; is far from ideal. Errata logically are revision marks that physically live in a distinct piece; both the original and the errata are required to make the intended writing complete. Anyone reading just the original will get a partial picture. The full picture is distributed across space and time.</p>
<p>This is one large reason I&#146;m preferring more and more to write for online publications: I can make corrections directly into the one canonical master copy, a form of iterative improvement and debugging on live published material. The moving finger writes and, having writ, can move back.</p>

<H3><FONT COLOR="#000080">Bug-- of the Month</FONT></H3>
</B><H4><FONT COLOR="#000080">Q</FONT></H4>
<p>Mr. Schmidt:</p>
<p>The attached file causes VC++ v6 to complain and threaten not to release memory.</p>
<p>If the destructor declaration in class <B>X</B> is made non-virtual, or if it is just removed, the files compile fine without complaint. I have not had an opportunity to try compiling this with any other compiler. I am not sure whether I have tripped over some C++ obscurity or a compiler bug.</p>
<p>I would appreciate your comments.</p>
<p>Regards &#151; Bill Hay</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p>Ron Burk recently started soliciting potential authors to write <I>WDJ</I>&#146;s Bug++ of the Month column <a href="#1">[1]</a>, which almost always picks apart some problem in Visual C++. Temporarily disregarding my day job, I spent about six seconds flirting with the notion of auditioning for that position. Sanity regained hold quickly, if only because I get an opportunity to write such a column here in <I>CUJ.</I></p>
<p>I&#146;ve reduced your sample to</p>

<pre>
#include &lt;stddef.h&gt;

class X
   {
public:
   virtual ~X();
   void *operator new(size_t);
   void operator delete
        (void *, size_t);
   };

X *x = new X; // warning here
</pre>

<p>When compiled, this code produces the warning</p>

<pre>
no matching operator delete found;
memory will not be freed if
initialization throws an exception
</pre>

<p>You&#146;ve run into a pair of Visual C++ compiler bugs. I&#146;ll describe what&#146;s supposed to happen and then demonstrate how Visual C++ is actually behaving.</p>
<p>For the usual case of</p>

<pre>
x = new X
</pre>

<p>the program calls the non-placement allocation function</p>

<pre>
operator new(size_t)
</pre>

<p>to allocate space for <B>*x</B>. In the more general case of</p>

<pre>
x = new(a, b, c) X
</pre>

<p>the program calls the placement allocation function</p>

<pre>
operator new(size_t, A, B, C)
</pre>

<p>to allocate the space, where the arguments <B>a</B>, <B>b</B>, and <B>c</B> are passed in as parameters to <B>operator new</B>. In all cases, the corresponding expression</p>

<pre>
delete x
</pre>

<p>calls either</p>

<pre>
operator delete(void *)
</pre>

<p>or</p>

<pre>
operator delete(void *, size_t)
</pre>

<p>to free the allocated space, depending on which overload is available <a href="#2">[2]</a>. The <B>void *</B> parameter points to <B>*x</B>&#146;s space. In the second overload, the <B>size_t</B> parameter gives the size of that space. (This matches the <B>size_t</B> parameter in the <B>operator new</B> call.)</p>
<p>Now consider what happens during</p>

<pre>
x = new(a, b, c) X
</pre>

<p>if the <B>X</B> constructor throws. The throw occurs after the call to</p>

<pre>
operator new(size_t, A, B, C)
</pre>

<p>has succeeded, meaning the space has already been allocated. Unless you wrap the <B>new</B> expression in a try block and manually free the memory in an exception handler, your program will suffer a memory leak.</p>
<p>To avoid this problem, you can arrange for the memory to be freed automatically. According to the language rules, the program will call the placement deallocation function</p>

<pre>
operator delete(void *, A, B, C)
</pre>

<p>to free the space if the <B>X</B> constructor in</p>

<pre>
new(a, b, c) X
</pre>

<p>throws <a href="#3">[3]</a>. In the usual case of</p>

<pre>
new X
</pre>

<p>there are no placement arguments; instead, the program automatically calls a non-placement deallocation function to free the memory.</p>
<p>Thus, for the general case of</p>

<pre>
operator new(size_t, A, B, C)
</pre>

<p>there are three potentially matching deallocation functions:</p>
<UL><LI>   <B>operator delete(void *)</B> called via <B>delete x</B> </LI>
<LI>   <B>operator delete(void *, size_t)</B> called via <B>delete x</B> </LI>
<LI>   <B>operator delete(void *, A, B, C)</B> called via an <B>X</B> constructor throw</LI></UL>

<p>Note that the second <B>operator delete</B> overload is a special case of the third, where <B>A, B, C</B> is replaced by <B>size_t</B>. This second overload is called automatically when the <B>X</B> constructor throws in</p>

<pre>
size_t n;
x = new(n) X;
</pre>

<p>In this instance, <B>operator delete</B> serves as a placement deallocation function matched to the placement allocation function</p>

<pre>
operator new(size_t, size_t)
//           ^       ^ argument n
//           ^ size of space
</pre>

<p>Thus, this same <B>operator delete</B> overload serves two distinct roles:</p>

<UL><LI>   A non-placement deallocation function matching every allocation function and called via <B>delete x</B>. The <B>size_t</B> parameter is the size of the allocated space.</LI>
<LI>   A placement deallocation function matching <B>operator new(size_t, size_t)</B> and called via <B>X</B> constructor throw. The <B>size_t</B> parameter is the original placement argument <B>n</B> to <B>operator new</B>.</LI></UL>

<p>(Interesting implication: <B>operator delete(void *, size_t)</B> does not inherently know how it was called, or how to interpret its extra parameter. This is the only deallocation function to suffer these twin ambiguities <a href="#4">[4]</a>.)</p>
<p>With that background, it&#146;s time to analyze Visual C++.</p>
<p>Build and run my test program (<a href="list1.htm">Listing 1</a>) with Visual C++. You&#146;ll find that three of the four test cases run correctly. The only failure comes in test 3: the program is supposed to automatically call <B>operator delete</B> but doesn&#146;t. That failed test case represents compiler bug #1.</p>
<p>At compile time, you&#146;ll also see two instances of the familiar compiler warning: one for test 1, and one for test 3. However, test 1 actually runs correctly. That first warning is a red herring and represents compiler bug #2.</p>
<p>(I&#146;ll note for the sake of completeness that my other two test systems &#151; Metrowerks CodeWarrior Pro v6 for Mac OS, and EDG v2.45 for MS-DOS &#151; get all test cases right without spurious warnings.)</p>

<H3><FONT COLOR="#000080">Advantage Microsoft</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> C# and Java: What is the difference? When will there be a lawsuit from Sun, and what happened to J++? Thanks &#151; Bill Eidson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Since I&#146;m watching the Australian Open as I type, I&#146;ll take my inspiration from John McEnroe: &#147;You cannot be serious!&#148;</p>

<H3><FONT COLOR="#000080">You Can Run, but You Can&#146;t Hide</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> I have tried compiling the attached code on five different platforms (three Unix vendor-supplied compilers, gcc, and MSVC 6.0), and only MSVC 6.0 successfully compiles it. The rest complain something to the effect of &#147;No matching function for call to <B>Override::func(int,int)</B>,&#148; etc.</p>
<p>One even complains about <B>func</B> being redeclared after the <B>Base::func;</B> access declaration. Not all the mentioned compilers support the <B>using Base::func;</B> declaration, so I went with the least common denominator syntax.</p>
<p>So, given that I can&#146;t change the existing <B>Base</B> API, what is the correct format for this combination of overloading and overriding? Is there one? &#151; Michael McCarty</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Well, this is a nice turn about: the Charlie Brown of compilers goes from being the goat in the first question to being the hero here. My stock options are pleased.</p>
<p>Your code appears as <a href="list2.htm">Listing 2</a>, with one slight modification: I&#146;ve replaced <B>&lt;iostream.h&gt;</B> with <B>&lt;iostream&gt;</B>. That first header is not part of the Standard C++ library, even though many library vendors support it. I strongly recommend that you prefer <B>&lt;iostream&gt;</B> wherever you can.</p>
<p>Now to your real question.</p>
<p>Your code should build and run, giving the output</p>

<pre>
Override::func()
Base::func(int)
Base::func(int, int)
</pre>

<p>The key is the access declaration</p>

<pre>
class Override : public Base
   {
public:
   Base::func; // access declaration
   void func();
   };
</pre>

<p>which trumps the usual base-member hiding and overriding rules. From Subclause 11.3:</p>

<BLOCKQUOTE>
<p>The access of a member of a base class can be changed by mentioning its <I>qualified-id</I> in the derived class declaration. Such mention is called an access declaration. The effect of an access declaration <I>qualified-id</I><B>;</B> is defined to be equivalent to the declaration <B>using</B> <I>qualified-id</I><B>;</B>.</p>
</BLOCKQUOTE>

<p>The Standard defines an access declaration as equivalent to a using declaration, which (from 7.3.3):</p>

<BLOCKQUOTE>
<p>...introduces a name into the declarative region in which the <I>using-declaration</I> appears. That name is a synonym for the name of some entity declared elsewhere.</p>
<p>The member name specified in a <I>using-declaration</I> is declared in the declarative region in which the <I>using-declaration</I> appears.</p>
<p>When a <I>using-declaration</I> brings names from a base class into a derived class scope, member functions in the derived class override and/or hide member functions with the same name and parameter types in a base class (rather than conflicting).</p>
<p>For the purposes of overload resolution, the functions which are introduced by a <I>using-declaration</I> into a derived class will be treated as though they were members of the derived class.</p>
</BLOCKQUOTE>

<p>The name in an access declaration acts as if it were physically declared in the scope of the access declaration. In your particular example, the access declaration</p>

<pre>
Base::func;
</pre>

<p>appears in the scope of <B>Override</B> and thus effectively declares all of the <B>Base::func</B> overloads within <B>Override</B>.</p>
<p>At first glance, this would seem to give <B>Override</B> four <B>func</B> overloads:</p>

<UL><LI>   <B>func()</B> declared directly within <B>Override</B></LI>
<LI>   <B>func()</B> introduced from <B>Base</B></LI>
<LI>   <B>func(int)</B> introduced from <B>Base</B></LI>
<LI>   <B>func(int, int)</B> introduced from <B>Base</B></LI></UL>

<p>But as the Standard provides, the two <B>func()</B> declarations don&#146;t conflict; instead, <B>Override::func()</B> overrides <B>Base::func()</B>. Class <B>Override</B> therefore effectively declares three <B>func</B> overloads: one directly, and two via the access declaration.</p>
<p>I suspect your errant compilers are either ignoring the access declaration or are misapplying the Standard&#146;s rules regarding access declarations.</p>
<p>As the Standard indicates, and as you mention, you should be able to rewrite <B>Override</B> as</p>

<pre>
class Override : public Base
   {
public:
   using Base::func; // using declaration
   void func();
   };
</pre>

<p>This rewrite employs using-declaration syntax instead of access-declaration syntax. As the Standard indicates in Footnote 100:</p>

<BLOCKQUOTE>
<p>Access declarations are deprecated; member <I>using-declaration</I>s (7.3.3) provide a better means of doing the same things. In earlier versions of the C++ language, access declarations were more limited; they were generalized and made equivalent to <I>using-declaration</I>s in the interest of simplicity. Programmers are encouraged to use <I>using-declaration</I>s, rather than the new capabilities of access declarations, in new code.</p>
</BLOCKQUOTE>

<p>Had you declared <B>Override</B> with neither an access declaration nor a using declaration:</p>

<pre>
class Override : public Base
   {
public:
   void func();
   };
</pre>

<p>the function <B>Override::func</B> would have hidden the <B>Base</B> functions <B>func(int)</B> and <B>func(int, int)</B>, and the calls</p>

<pre>
o.func(1);
o.func(1, 1);
</pre>

<p>would not have compiled. Instead, you would have needed to qualify the <B>func</B> calls as</p>

<pre>
o.Base::func(1);
o.Base::func(1, 1);
</pre>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  <I>WDJ</I> = <I>Windows Developer&#146;s Journal,</I> a sister publication of <I>CUJ.</I> Strange but true: Ron Burk and our own Marc Briand were college roommates back in the Carter administration. [Kinda scary, isn&#146;t it? &#151; mb]</p>
<p><a name="2"></a>[2]  If both are available, <B>operator delete(void *)</B> wins. See Subclause 3.7.3.2.</p>
<p><a name="3"></a>[3]  Provided the appropriate <B>operator delete</B> overload exists and is unambiguously available. Otherwise, no automatic deallocation occurs, and the memory is leaked. Subclause 5.3.4 has all the details.</p>
<p><a name="4"></a>[4]  Under normal operating conditions, that is. Nothing prevents you from manually calling <B>operator delete</B> as you would any other function and passing any arguments you want.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/apr01/schmidt.zip"></a></h4>
</blockquote></body></html>
