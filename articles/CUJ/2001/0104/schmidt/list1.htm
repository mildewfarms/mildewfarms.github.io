<HTML><HEAD>
<TITLE>April 2001/Uncaught Exceptions/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Visual C++ test</A></h4>
<pre>
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;
using namespace std;

class X
    {
public:
    X(bool const throwing = false)
        {
        if (throwing)
            throw 1;
        }
    void *operator new(size_t n)
        {
        cout &lt;&lt; endl;
        cout &lt;&lt; "operator new(" &lt;&lt; n
                &lt;&lt; ")" &lt;&lt; endl;
        return malloc(n);
        }
    void *operator new(size_t n1, size_t n2)
        {
        cout &lt;&lt; endl;
        cout &lt;&lt; "operator new(" &lt;&lt; n1
                &lt;&lt; ", " &lt;&lt; n2 &lt;&lt; ")" &lt;&lt; endl;
        return malloc(n1);
        }
    void operator delete(void *p, size_t n)
        {
        cout &lt;&lt; "operator delete(" &lt;&lt; n
                &lt;&lt; ")" &lt;&lt; endl;
        free(p);
        }
private:
    // makes sizeof(X) predictable
    char space[100];
    };

int main()
    {
    X *x;
    //
    // test 1: non-placement, no throw
    //
    x = new X;
    delete x;
    //
    // test 2: placement, no throw
    //
    x = new(2) X;
    delete x;
    try
        {
        //
        // test 3: non-placement, throw
        //
        x = new X(true);
        }
    catch (...)
        {
        cout &lt;&lt; "catch" &lt;&lt; endl;
        }
    try
        {
        //
        // test 4: placement, throw
        //
        x = new(4) X(true);
        }
    catch (...)
        {
        cout &lt;&lt; "catch" &lt;&lt; endl;
        }
    return 0;
    }

/* correct output:

operator new(100)
operator delete(100)

operator new(100, 2)
operator delete(100)

operator new(100)
operator delete(100)
catch

operator new(100, 4)
operator delete(4)
catch

*/

&#151; End of Listing &#151;</pre></body></html>
