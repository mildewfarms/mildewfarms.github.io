<HTML>   
     <HEAD>
<TITLE>April 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocapr.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear Marc,</p>
<p>It&#146;s always a great pleasure going through high quality contents of <I>CUJ.</I> This month&#146;s articles were also superb! The <I>Java Solutions</I> section is a very good addition.</p>
<p>Regarding the article on &quot;Java Named Semaphores&quot; (<I>Java Solutions</I>, December 2000), there are few points I wanted to talk about:</p>
<BLOCKQUOTE>
<p>&#147;When a thread executes <B>wait</B>, one of two things happens. If no other thread has executed <B>wait</B>, <B>wait</B> doesn&#146;t block, and the thread passes through, gaining access to the critical code. On the other hand, if another thread has already executed <B>wait</B>, processing on the current thread is suspeneded...&#148;</p>
</BLOCKQUOTE>
<p>That&#146;s actually not the case. <B>wait</B> always blocks, even if no other thread has executed <B>wait</B>. The semantics of <B>wait</B> is not similar to a mutex (as mentioned in the article) but rather similar to Event objects (Windows) or condition variables (Unix).</p>
<p>The sample program below illustrates this point:</p>

<pre>
public class Test
{
  synchronized void showWait()
  {
    try
    {
      System.out.println
        ("calling wait");
      wait();
      System.out.println
        ("out of wait");
    }
    catch(InterruptedException e){}
  }

  public static void
    main(String[] args)
    {
      Test t=new Test();
      t.showWait();
    }
}
</pre>

<p>Here the main thread will be blocked forever, until it is notified.</p>
<p>The <B>Mutex</B> class presented is semantically not a mutex. This class requires one thread to call <B>lock</B> while some other thread calls <B>unlock</B>, whereas mutex semantics require that the thread that acquired the lock should free the lock. Hence it is more like an Event object.</p>
<p>Similarly, the article mentions the following regarding <B>notifyAll</B>:</p>

<BLOCKQUOTE>
<p>&#147;notifyAll...Then if multiple threads are waiting, then one is arbitrarily chosen to discontinue waiting...&#148;</p>
</BLOCKQUOTE>

<p><B>notifyAll</B> actually wakes up all the threads (waiting on that object) and not any one. Hence, the <B>Mutex</B> code presented will not work, as it calls <B>notifyAll</B>, which would wake up all threads waiting on this mutex. The code below demonstrates <B>notifyAll</B>:</p>

<pre>
public class Test
{
  synchronized void showWait()
  {
    try
    {
      String threadName=
        Thread.currentThread().
          getName();
        System.out.println
        ("calling wait() in thread-&gt;"
          + threadName);
        wait();
        System.out.println
        ("out of wait in thread-&gt;"
          + threadName);
      }
      catch(InterruptedException e){}
  }

  synchronized void showNotifyAll()
  {
    String threadName=
      Thread.currentThread().
        getName();
    System.out.println
("Sleeping for 5 seconds in thread-&gt;"
      + threadName);
     try{Thread.sleep(5000);}
     catch(InterruptedException e){}
     System.out.println
("calling notifyAll from thread-&gt;"
      + threadName);
     notifyAll();
  }

  public static void
  main(String[] args)
  {
    final Test t=new Test();
    new Thread(){
      public void run()
      {
        t.showWait();
      }
    }.start();
    new Thread(){
      public void run()
      {
        t.showWait();
      }
    }.start();
    new Thread(){
      public void run()
      {
        t.showNotifyAll();
      }
    }.start();
    t.showWait();
  }
}
</pre>

<p>Sincerly,</p> 
<p>Vishal Kochhar</p>

<p><I>The author has confirmed that his explanation of </I><B>wait</B><I> and </I><B>notifyAll</B><I> was incorrect, but hopes it does not put a damper on the main point of the article, which was creating named semaphores in Java. Thank you for your comments. </I>&#151;<I>mb</I></p>

<hr><p>Dear Sir or Madam,</p>
<p>As a long-time subscriber to <I>C/C++ Users Journal</I> (longer in fact than C++ has been in the title!), and a long-time fan of the writings of Andrew Koenig and Barbara Moo, I read with great interest their article &#147;Using Library Algorithms&#148; (excerpted from their new book <I>Accelerated C++: Practical Programming by Example</I>).</p>
<p>This article, their book, and other articles by such notables as Bjarne Stroustrup himself reflect the views of a new school of thought regarding the teaching of programming in C++, effectively reversing the old-school approach by starting out with high-level classes and algorithms to allow the student to write effective and useful programs from the start. This top-down approach eradicates one of the biggest hurdles of the old-school bottom-up approach, which was that the student was forced to absorb quite a lot of detailed information before being able to write useful programs. This often led to considerable frustration on the student&#146;s part, and I must say that the new approach is indeed better in a number of ways.</p>
<p>However, as Jon <I>Programming Pearls</I> Bentley notes, we also cannot forget performance. And that brings me to the point of this letter, which is to take some small issue with the following statement from an otherwise excellent article. Disregarding the obvious typo, the statement is:</p>

<pre>
*out++ = *begin++;
</pre>

<p>is equivalent to the more verbose</p>

<pre>
*out = *begin;
++out;
++begin;
</pre>

<p>While correct in the sense that the final values are identical, the first form unavoidably results in the creation of two temporary objects (which are likely just pointers) due to the use of the post-increment operator. The cost may be small, but may also be significant in cases where performance is important or where the iterators involved are objects larger than pointers. See also Scott Meyers&#146; <I>More Effective C++,</I> Item 6, for more on this particular topic.</p>
<p>Admittedly, delving into the details of why pre-increment is more efficient than post-increment is definitely counter to the whole philosophy of the new teaching approach, but it seems to me that some way of incorporating efficiency concerns must be found if this new school is to result in altogether better programs.</p>
<p>So, to Andrew Koenig, Barbara Moo, Bjarne Stroustrup, and other worthy proponents of this excellent new approach to learning C++ I address the following question: &#147;How can efficiency concerns be appropriately included in this new approach?&#148; Here the key word is &#147;appropriately&#148; since an inappropriate concern for efficiency has almost certainly damaged more programs than any lack of efficiency ever will.</p>
<p>Thanks.</p>
<p>Randy Maddox<br>
Consulting Software Engineer and Author<br>
<B>r.a.maddox@ieee.org</B></p>

<p><I>Andrew Koenig replies:</I></p>
<p><I>As long as you&#146;re going to mention Jon Bentley, I would like to bring up his two rules for optimization:</I></p>
<p><I>1.  Don&#146;t do it. </I></p>
<p><I>2.  (for experts only) Don&#146;t do it yet.</I></p>
<p><I>Performance is important, but so is ease of understanding, and the two often conflict. As you point out, it is important to think about how to resolve this conflict &#151; especially in the context of an introductory book such as </I>Accelerated C++<I>.</I></p>
<p><I>The general rule that we decided to follow in our book was to think about large-scale efficiency issues, particularly when they might cause algorithms to be quadratic rather than linear, but not to worry too much about small-scale efficiency issues such as the one you raise. There are several reasons for this decision.</I></p>
<p><I>First, there is a limit to how much we can expect readers to be willing to master at one time. Therefore, as Bentley suggests, we would rather defer talking about optimization issues until we can assume that our readers have gained more experience.</I></p>
<p><I>Second, the kind of small-scale optimizations you&#146;re talking about here typically gain only a linear factor in execution time, which means that they will have much less of an effect in practice than the large-scale issues.</I></p>
<p><I>Third, our experience is that it is difficult to predict accurately the effect of small-scale optimizations without trying them on relevant implementations and measuring their effect. As an example, I tried measuring execution time on one particular implementation for the following program fragment:</I></p>

<pre>
vector&lt;int&gt; v(1000, 42);

vector&lt;int&gt;::iterator end = v.end();
for (int i = 0; i != 1000000; ++i) {
   vector&lt;int&gt;::iterator
   p = v.begin();
   while (p != end) {
      ++(*p++);
   }
}
</pre>

<p><I>If I change the statement</I></p>

<pre>
++(*p++);
</pre>

<p><I>to</I></p>

<pre>
++*p;
++p;
</pre>

<p><I>the program runs approximately 8 per cent faster. So you are indeed right that there is a difference &#151; at least sometimes.</I></p>
<p><I>However, if I turn on compiler optimization, the program runs approximately 88 per cent faster. That is, its execution time decreases by more than a factor of eight! Moreover, the two different forms of the inner loop now run at exactly the same speed. So at least in this case, the compiler appears to be capable of generating good code from either form of the inner loop without help from the programmer.</I></p>
<p><I>Efficiency is one of many important ideas that programmers must eventually understand. One of the hard decisions in writing an introductory book is the order in which to cover these important ideas. Throughout </I>Accelerated C++<I>, we have tried to introduce at each point the ideas that would add the most to what the reader would be able to accomplish at that point. We felt that it was important to discuss the</I></p>

<pre>
*out++ = *begin++;
</pre>

<p><I>usage because it is so common that our readers would surely encounter it elsewhere, and therefore that we would enable our readers to understand programs that they might otherwise find to difficult. On the other hand, we thought that it was still too early to discuss the small-scale efficiency characteristics of this notation, because many readers would not yet be in a position to understand the issue, and because understanding it would not add much to what readers could accomplish at this point in the exposition.</I></p>
<p><I>Regards,</I></p>
<p><I>Andrew Koenig</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>I was interested in the article on Debugging under GNU/Linux by Randy Zack (February 2001) since I have been using Linux since 1997. One thing that he states when he is talking about core files is that we didn&#146;t learn anything we couldn&#146;t have learned by executing the program itself from within gbd. That is true for a program that only takes milliseconds to run, but twice I have found core files indispensable.</p>
<p>The first case is when a satellite data processing program I was developing dumped after running for two hours. I would have to have spent another two hours to get to that point had I restarted using gbd. Instead, the core file had enough information to identify the line number and the variables value that caused the crash and the problem was solved in a matter of minutes.</p>
<p>The second case is when a program I wrote that processed a live data feed crashed. In this case, there was no way of replicating the data that caused the crash and I would not have been able to find the problem by restarting the program with gbd. Instead, by loading the core file into gdb, I was able to see the offending data string. A few minutes later, the problem was fixed and the program was back on line.</p>
<p>The point is, core files can be an extremely useful, if not the only way, of identifying bugs in long running (or always running) code. A core file can immediately go to the program state that caused the error condition, without taking the time to get to that point.</p>

<hr><p>Dear Chuck Allison,</p>
<p>I found your &#147;File Processing&#148; article in <I>Java Solutions</I> (February 2001) quite educational. However, I couldn&#146;t help noticing a few things regarding the &#147;C++ version.&#148;</p>
<p>1)  The return type of function <B>toString</B> is missing in the function declaration. This is illegal in both C and C++ according to the latest standards of the two languages. Looking at the function body, I assume you meant <B>void</B> as the return type.</p>
<p>2)  Having corrected (1), I can hardly accept the fact that this is a C++ program. It looks more like C. Although it is legal C++ code, the program contains a number of constructs that are considered poor style and/or error-prone in C++.</p>
<p>3)  Return value of -1 from <B>main</B> involves implementation-defined behavior. Both languages specify that to be portable <B>main</B> must return zero or <B>EXIT_SUCCESS</B> for success or <B>EXIT_FAILURE</B> for failure. You need to <B>#include &lt;cstdlib&gt;</B> or <B>&lt;stdlib.h&gt;</B> for the <B>EXIT_XXX</B> macros.</p>
<p>4)  You check the return value of <B>fwrite</B>, but ignore the return value of <B>fread</B>. Why? There is as much chance of failure reading from a file as there is writing to it.</p>
<p>Regarding item (2), I omit the details but could provide them if you&#146;re interested. Also, I thought of including my idea of what a C++ version should look like. However, depending on the circumstances, decisions like the following would have to be made:</p>
<p>a)  Use <B>std::string</B> or <B>char[]</B>? </p>
<p>b)  Use return error codes or exceptions? </p>
<p>c)  Use enums for constant class values or static members?</p>
<p>Again, if you&#146;re interested, I could provide my /*one of many*/ C++ solutions.</p>
<p>Sincerely,</p>
<p>Boris Pulatov</p>

<p><I>Chuck Allison replies:</I></p>
<p><I>Indeed, this is just a C program, and I should have labeled it as such. (The version I post on my website will have the corrections; also, note that the file type is </I><B>.c</B><I>, not </I><B>.cpp</B><I>.) My point was of course that the Java version is much more verbose. If your C++ is version is even shorter than my C version, then that would be interesting.</I></p>
<p><I>I forgot the return type for </I><B>toString</B><I>, so it defaults to </I><B>int</B><I>, which is valid in C.</I></p>
<p><I>Your point (3) is also correct, but again, I was just comparing the size of the programs. Using the </I><B>&lt;stdlib&gt;</B><I> macros (which I am very aware of, thank you) would make the one-line program longer, and as it stands, this program will run on all Windows and Unix systems. Portability was not important to the current issue, but you are indeed correct, as also is your comment about making the program more bulletproof by checking </I><B>fread</B><I>.</I></p>
<p><I>I hope that my point of Java I/O being much more verbose than C (or even C++, which I didn&#146;t illustrate) was made by the article, nothing more nor less.</I></p>
<p><I>Thanks for writing.</I></p>
<p><I>Chuck Allison</I></p>
</blockquote></body></html>
