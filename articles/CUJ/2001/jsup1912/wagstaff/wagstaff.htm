<HTML>   
     <HEAD>
<TITLE>Java Solutions December 2001/Sorting Made Easy</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjdec.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sorting Made Easy</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">David Wagstaff</FONT></H3>

<BLOCKQUOTE>
<p>A little something to make sorting by key much easier.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Sorting is taught in most beginning computer classes &#151; or at least it used to be. With the sorting algorithms included in standard libraries, it&#146;s possible to keep all your data sorted and never understand any of the various sorting algorithms. Keeping to this theme, I&#146;m going to describe how to sort objects in Java without having to write a sort algorithm. You&#146;ll still have to do some minimal work describing what and how you want the data sorted. Along the way, I&#146;ll develop a generic tool to all but eliminate even this task.</p>
<p>No one sort algorithm, not even the celebrated <B>quicksort</B>, is the best in every case. (For the curious, the JDK uses a modified <B>mergesort</B> with guaranteed <I>n*log(n)</I> performance.) I&#146;m going with the assumption that the sorting included in the JDK is adequate for most people most of the time. Even if it should prove to be inadequate for your particular needs, remember the adage: &#147;Make it work. Then make it right. Then make it fast.&#148; Accordingly, I urge you to use it during the prototyping stages, and only later swap in your own sort.</p>
<p>As a trivial example, suppose I have a <B>Vector</B> of five <B>String</B>s that I want sorted:</p>

<pre>
Vector v = new Vector();
v.add("Gamma");
v.add("Delta");
v.add("Alpha");
v.add("Beta");
v.add("Epsilon");
System.out.println(v);

Collections.sort(v);
System.out.println(v);
</pre>

<p>The before and after outputs are:</p>

<pre>
[Gamma, Delta, Alpha, Beta, Epsilon]
[Alpha, Beta, Delta, Epsilon, Gamma]
</pre>

<p>Nothing could be simpler &#151; one call to the static method <B>Collections.sort</B> from <B>java.util</B> and you&#146;re done. By the way, <B>sort</B> takes a <B>List</B> object. I chose <B>Vector</B> out of habit. <B>LinkedList</B> and <B>ArrayList</B> are also possible candidates <a href="#1">[1]</a>.</p>
<p>Arrays are remarkably similar:</p>

<pre>
String[] a =
  { "Gamma","Delta","Alpha","Beta","Epsilon" };

Arrays.sort(a);
</pre>

<p>Arrays, although fixed in size, have the added advantage of being able to store primitives like <B>int</B> and <B>double</B> in addition to objects. Accordingly, <B>Arrays.sort</B> is overloaded to handle all the primitive types. It&#146;s also overloaded to sort sub-ranges of an array. Suppose you only want to sort the first three elements.</p>

<pre>
double[] d = {5.7, -6.3, 45.0, 4.9};

Arrays.sort(d, 0, 2);
</pre>

<p>While this is fine and good, most of us use considerably more complex data. Let&#146;s try this on a real class:</p>

<pre>
public class Person {
  String name;
  Date birth;
  double income;
  String phone;

  public String toString() {
    return name;
  }
}
</pre>

<p>Before the OOP style police arrest me, rest assured that I will come back to proper encapsulation. Chill for now while I explore this class in its simplest form. Let&#146;s start small by trying to sort a <B>List</B> of two <B>Person</B>s.</p>

<pre>
Person p1 = new Person();
p1.name = "Wilson";
// Assign values to birth, income and
// phone
Person p2 = new Person();
p2.name = "Adams";
// Assign values to birth, income and 
// phone
Vector v = new Vector();
v.add(p1);
v.add(p2);
System.out.println(v);

Collections.sort(v);
System.out.println(v);
</pre>

<p>The output being:</p>

<pre>
[Wilson, Adams]
java.lang.ClassCastException: Person
</pre>

<p>Ouch! A run-time exception &#151; I skipped the minimal work of describing what and how I want the data sorted. Looking beneath the covers at the simple data-types that work, you&#146;ll discover that all of them implement the <B>Comparable</B> interface. The description straight from JavaDocs: &#147;This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class&#146;s natural ordering.&#148; Ah, so let&#146;s implement <B>Comparable</B> in <B>Person</B> to make it sortable:</p>

<pre>
public class Person implements Comparable {
  ...
  public int compareTo(Object o) {
    Person that = (Person)o;
    return this.name.compareTo(that.name);
  }
}
</pre>

<p>The <B>Person</B> class now says that its natural ordering is by its name field. Notice how I passed the buck on determining the return value. Since <B>String</B> already is <B>Comparable</B>, we used its code. (I&#146;ll use this trick again in a major way soon.) More importantly, notice the output:</p>

<pre>
[Wilson, Adams]
[Adams, Wilson]
</pre>

<p>This is great until marketing wants the same people sorted by income, age, and phone areas.</p>
<p>You might be tempted to juice up <B>compareTo</B> like this:</p>

<pre>
final int NAME_FIELD = 0;  //BAD EXAMPLE
final int BIRTH_FIELD = 1;

int order = NAME_FIELD;

public int compareTo(Object o) {
  Person that = (Person)o;
  if (order == NAME_FIELD)
    return this.name.compareTo(that.name);
  if (order == BIRTH_FIELD)
    return this.birth.compareTo(that.birth);
}
</pre>

<p>The reason you might be tempted is because it will work, <I>but it is dangerous</I>. This compound <B>compareTo</B> method depends on each and every <B>Person</B> object having the order field set the same. Ah, so let&#146;s make order static. Well, now sorting <B>Person</B> objects is no longer thread-safe. What&#146;s a body to do? The Java Collections authors anticipated this need and gave us another interface: <B>Comparator</B>.</p>
<p><B>Comparator</B> also specifies an ordering for objects; the difference being that <B>Comparable</B> describes the natural or default ordering, while <B>Comparator</B> describes alternative orderings. In my opinion, the <B>Person</B> class has no natural ordering, so I&#146;ll eliminate <B>Comparable</B> and focus instead on <B>Comparator</B> classes:</p>

<pre>
public class BirthComparator implements Comparator {
  public int compare(Object o1, Object o2) {
    Person p1 = (Person)o1;
    Person p2 = (Person)o2;
    return p1.birth.compareTo(p2.birth);
  }
}

public class IncomeComparator implements Comparator {
  public int compare(Object o1, Object o2) {
    Person p1 = (Person)o1;
    Person p2 = (Person)o2;
    Double d1 = new Double(p1.income);
    Double d2 = new Double(p2.income);
    return d1.compareTo(d2);
  }
}
</pre>

<p>Now, assuming you have a <B>Vector</B> <B>v</B> of <B>Person</B> objects each filled with values, you can sort them three different ways:</p>

<pre>
Collections.sort(v); //natural ordering by name
Collections.sort(v, new BirthComparator()); //by birth
Collections.sort(v, new IncomeComparator()); //by income
</pre>

<p>With the exception of proper encapsulation, this is the orthodox way of sorting on different keys. However, it still smells of redundant code. The <B>Comparator</B>s duplicate too much of each other&#146;s code. Instead, I&#146;ll define a <B>GenericComparator</B> to replace all of the individual <B>Comparator</B>s. Doing so requires using accessors in <B>Person</B>, a move toward encapsulation <a href="#2">[2]</a>. So instead of accessing the fields directly, let&#146;s make them all private and give them <B>get</B> methods:</p>

<pre>
public class Person implements Comparable {
  private String name;
  private Date birth;
  private double income;
  private String phone;

  public String getName() {
  return name;
  }

  public Date getBirth() {
  return birth;
  }
// ...
}
</pre>

<p>Using <B>GenericComparator</B>, you can sort on any field you wish.</p>

<pre>
Collections.sort(v, new GenericComparator("getName"));
Collections.sort(v, new GenericComparator("getBirth"));
Collections.sort(v, new GenericComparator("getIncome"));
Collections.sort(v, new GenericComparator("getPhone"));
</pre>

<p>I&#146;ve purposely left the guts of <B>GenericComparator</B> until the end. It gets its power from using Java&#146;s reflection. Reflection, however, is beyond the scope of this article. Nevertheless, you should understand the general flow because it&#146;s just using the same trick I&#146;ve been using all along. Let <B>Comparable</B>s do their own work and return the result:</p>

<pre>
import java.lang.reflect.*;
import java.util.*;

public class GenericComparator implements Comparator{
  String methodName;

  public GenericComparator(String methodName) {
    this.methodName = methodName;
  }

  public int compare(Object o1, Object o2) {
    Comparable c1 = null;
    Comparable c2 = null;
    try {
      c1 = (Comparable)o1.getClass().getMethod
        (methodName, null).invoke(o1,null);
      c2 = (Comparable)o2.getClass().getMethod
        (methodName, null).invoke(o2,null);
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    return c1.compareTo(c2);
  }
}
</pre>

<p>Life seems better when it&#146;s organized. For data, nothing says organized better than being sorted.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  For more information on <B>List</B> and other Java 2 collections, see Chuck Allison, &#147;The Java 2 Collections &#151; Finally, Some News You Can Use,&#148; <I>C/C++ Users Journal Java Solutions</I> Supplement, December 1999.</p>
<p><a name="2"></a>[2]  Some astute readers may be offended at the flippant encapsulation. Please don&#146;t infer that I&#146;m advocating <B>get</B> methods as the object-oriented solution for correctly implementing encapsulation or that proper object-oriented design starts with data and haphazardly throws in methods as an afterthought. As a rule, I first design an interface of what the object will &#147;do.&#148; I also write the Javadocs, JUnit tests, and UML diagrams. All of these are essential, and yet in a learning context, such as this article, all these facets of good design tangle together to obscure using the <B>GenericComparator</B>. Ironically, the <B>GenericComparator</B> forces some encapsulation because it simply won&#146;t work with data members; it must use methods, JavaBeanish <B>get</B>s or otherwise.</p>

<p><i><B>David Wagstaff</B> is the lead instructor at Thin Blue Edge, a training company specializing in Java and related technologies. He has a BS in computer science from Brigham Young University and is currently completing his masters at Nation Technology University. You can contact David at <B>davidw@thinblueedge.com</B>.</i></p>

</blockquote></body></html>
