<HTML>   
     <HEAD>
<TITLE>Java Solutions December 2001/Directory-Enabled Application Development Using LDAP and JNDI</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjdec.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Directory-Enabled Application Development Using LDAP and JNDI</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael Seaver</FONT></H3>

<BLOCKQUOTE>
<p>Admit it. You've always wondered what directory services were all about. Here's a succint and effective introduction to accessing DS via JNDI.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Directory services is an area of growing interest for application developers and software vendors. Interoperability with directory services is becoming a critical component for all types of enterprise software applications. After reading this article, you should have a good idea of what a directory is and how you can take advantage of directory services to enhance your Java applications.</p>

<H3><FONT COLOR="#000080">What Is a Directory?</FONT></H3>

<p>A directory is simply a database. It is not a relational database, however. Instead of organizing data into tables and columns as in the relational model, the data in a directory is organized into a tree of objects. Each of these objects consists of a set of name-value pairs, not unlike a map in the world of Java collections. Each object may contain other objects that in turn may contain other objects as well. The name-value pairs that make up an object are known as attributes, specifically attribute names and attribute values.</p>
<p>Directories generally have very fast look-up times (and very slow update times) when compared to relational databases, so they are most appropriate in systems that access the data heavily, but modify data only occasionally. Also, many directory implementations don&#146;t have the data-integrity and transactioning capabilities found in most relational databases. You can&#146;t do ad-hoc queries in a directory &#151; the architecture is just not set up to do it. Consequently, the choice between a directory and a relational database is not always obvious.</p>
<p>Directories apply to a variety of applications, and it seems that new and creative ways to leverage a directory emerge regularly. One of the most common uses of a directory is a network and application management tool, the best-known examples being Microsoft&#146;s Active Directory and Novell&#146;s NDS eDirectory. In these systems, objects in the tree represent users, workstations, servers, and applications constituting a centralized repository for network and application configuration information and a central location where these resources can be managed. Through the directory, users may have rights assigned to workstations, applications, and other resources available on the network. Because the directory is a hierarchy, many administrative functions can be performed on containers of many objects instead of individually on each object. The benefits of group-based management are well known. The directory takes this to the next level by allowing many levels of group-based administration.</p>
<p>Another very common use of directories is for user authentication and profile management. Many web applications require a very high-level of customization. Often the data used for customizing the user&#146;s experience resides in a relational database such as Oracle. While relational databases are powerful tools ideal for storing large amounts of complicated data, user profiles are generally fairly simple data sets. Increasingly, developers are turning to directories for a simpler programming model and improved performance. (Note that Oracle does have a product that lets you view the relational database as if it were a directory, should you already have an Oracle-based system) Also, the distributed nature of many directories is ideal for Internet applications that require extreme scalability.</p>
<p>Directory services are also used to provide &#147;white-pages&#148; applications, which are directories that make individuals&#146; contact information available to an organization or to the public. Email clients such as Microsoft Outlook or Netscape Messenger can use these directories to look up email addresses. Increasingly corporations are turning to directories to provide their corporate white-pages information. Some of these applications go beyond just email addresses and phone numbers, allowing users to browse organizational charts and location maps, public encryption keys, and so forth</p>
<p>While there are many uses for directory services, each of these applications uses the directory in a similar manner. Making an application &#147;directory-enabled&#148; is a straightforward process that allows you to integrate with any directory. Because many companies are rolling out directories for these and other applications, there is an excellent opportunity to leverage existing deployments, enhancing the appeal and value of your software offerings.</p>

<H3><FONT COLOR="#000080">The Structure of a Directory</FONT></H3>

<p>A directory consists of objects organized in a tree-like structure. Consequently, a directory is often referred to as a tree. These objects may or may not represent items that exist in the physical world. Examples of objects that represent physical items include users, workstations, servers, routers, etc. Sometimes directory objects represent concepts such as applications, services, or organizations. Other times they exist solely to give structure to the tree by containing other objects.</p>
<p>Each object consists of a set of name-value pairs referred to as attributes. When an object contains a value for a given attribute, that attribute is said to exist <I>on</I> that object. Some attributes may have multiple values. For example, a user may have multiple telephone numbers or given names. Other attributes are restricted to containing only one value at a time.</p>
<p>The <I>schema</I> of a directory defines the attributes and classes that can exist. Each object in the directory belongs to one or more object classes. The schema defines each of these object classes. The definition details what attributes an object of that class can have. For example the schema definition for the object class <B>User</B> may state that a user object can have <B>Surname</B>, <B>givenName</B>, and <B>Telephone</B> attributes among others. It also details what classes of objects can contain <B>User</B> objects, which attributes are required, and which attributes are optional.</p>
<p>Another very important component of the schema definition for an object class are <I>naming attributes</I>. Specific attributes can be flagged as the naming attributes for objects of a given class. These attributes can then be used to reference the object in the directory. In the case of <B>User</B> objects, one naming attribute is CN (Common Name). These abbreviated attribute names are common in LDAP (Lightweight Directory Access Protocol)-based directories (see the section &#147;Accessing the Directory&#148;). Some other common naming attributes are O (Organizations) and OU (Organizational Units). The DN (Distinguished Name) of an object is a combination of the name of the object and the name of all its parent objects. This forms the absolute address of an object in the tree, similar to the way a path name identifies a file.</p>
<p><a href="fig1.htm">Figure 1</a> contains a drawing of a particular directory organization. At the root of this piece of the tree is an object of class <B>Organization</B>. The naming attribute for Organizations is <B>o</B> and the value of that attribute is <B>SLC</B>. So the DN of this object would be <B>o=SLC</B>. This object will represent the Salt Lake City campus of an imaginary corporation. Inside of <B>o=SLC</B>, there are three objects of class <B>Organization Unit</B>. The naming attribute for Organizational Units is <B>ou</B>. The value of this attribute is <B>MRK</B> for the first, <B>ENG</B> for the second, and <B>HR</B> for the third. These objects represent the marketing, engineering, and human resources teams located on the Salt Lake City campus of our corporation. The distinguished name of our marketing unit would be <B>ou=MRK,o=SLC</B>. You can see that the DNs for the engineering and human resources units would be <B>ou=ENG,o=SLC</B> and <B>ou=HR,o=SLC</B> respectively. Inside of <B>ou=HR,o=SLC</B>, there is a <B>User</B> object that might represent me if I were an employee of this corporation working in the HR department. The naming attribute for users is <B>cn</B>. The value of that attribute is <B>mseaver</B>. So the DN of my <B>User</B> object would be <B>cn=mseaver,ou=HR,o=SLC</B>. You can also see that my <B>User</B> object has two other attributes SN (Surname) and <B>givenName</B>. SN happens to be a required attribute for <B>User</B> objects. The value of this attribute is <B>Seaver</B>. <B>givenName</B> is an optional attribute that may contain multiple values. In my case, it contains two values: <B>Michael</B> and <B>James</B>.</p>

<H3><FONT COLOR="#000080">Accessing the Directory</FONT></H3>

<p>There are many ways to access the directory when creating a directory-enabled application. Most directory vendors provide APIs for accessing the directory via their proprietary wire protocols. Developing to one of these API sets could leave you locked in to one vendor&#146;s implementation of a directory, however. The original open standard for directory services was titled X.500 and used a wire protocol known as the DAP (Directory Access Protocol). While the X.500 specification forms the basis for most of the modern directory services, the DAP protocol was never designed to work over today&#146;s TCP/IP based networks. Fortunately there is a standard wire protocol for directory access on regular TCP/IP networks: LDAP. Now in its third revision, LDAP is an IETF-proposed standard (see RFCs 2252-6 and 2829-30) and is supported by most major directory vendors including iPlanet, Microsoft, and Novell, so directory-enabling your application using LDAP gives users a number of choices of directory services providers. Because there are LDAP-compliant directories available for virtually every major operating system, and LDAP-based APIs for most programming languages, creating LDAP directory-enabled applications is a straightforward task.</p>
<p>There are several different APIs available for developing to LDAP directories. One popular API is available in the J2SE. If you&#146;ve got a recent JDK installed (1.3 or later), you already have all the libraries required to build LDAP applications in Java. The API is the JNDI (Java Naming and Directory Interface). It is somewhat of an abstract API meant for accessing all types of information organized into hierarchies. As JDBC uses drivers to provide access to the various databases it supports, so JNDI uses <I>providers</I> to access different directories and namespaces. I&#146;ll be using the JNDI provider for LDAP to connect to Novell&#146;s NDS eDirectory. All of the code in this article will work on any LDAP store with little or no modification, so if you have access to Active Directory or iPlanet Directory you can still try the samples. Novell makes NDS eDirectory available free to developers (see the &#147;Resources&#148; section.)</p>
<p>On my machine, I&#146;ve installed Novell&#146;s NDS eDirectory and JDK 1.3. Using the administration tools that come with eDirectory, I&#146;ve set up a tree to look exactly like the one in <a href="fig1.htm">Figure 1</a>, and the sample code assumes this tree structure. One of the most common mistakes made when developing directory-enabled applications is forgetting to give users the necessary rights. Like any data store, directories have complicated rights structures that allow administrators to restrict access to data. In many cases, trying to access data without the correct rights won&#146;t actually cause an error to be returned, but instead it will appear as if the data isn&#146;t there at all. If you notice strange behavior as you&#146;re developing against a directory, a good first step is to double-check your rights configurations. In each of the sample applications below, I&#146;m assuming that you&#146;ve configured the directory such that the users have rights to perform the actions you are attempting to perform. How these rights are configured is very much vendor specific, so you&#146;ll need to check the documentation for the directory you&#146;re using.</p>
<p>Configuring rights in NDS eDirectory is a very simple process. Currently the primary management tool for eDirectory is Console One, which is installed with eDirectory. Once I have opened Console One and logged in to the tree using the login button on the toolbar, I need to select the object that I want to have rights to. Rights in eDirectory are handled through a mechanism called <I>trustees</I>. A trustee of a given object has rights to work with the given object. For example, if your user object were a trustee of my user object, when logged in as your user object, you would have rights to perform actions on my user object. In the examples below, I&#146;ll need to make sure that <B>cn=mseaver,ou=HR,o=SLC</B> has rights to create objects in <B>ou=ENG,o=SLC</B>. Using Console One, I&#146;ll browse to the object <B>ou=ENG,o=SLC</B>. Once I&#146;ve found the object, I can right-click my mouse on the object and select &#147;Trustees of this Object.&#148; This will open a window listing the objects that have rights to <B>ou=ENG,o=SLC</B>. From here, I can click on the &#147;Add Trustee&#148; button and add <B>cn=mseaver,ou=HR,o=SLC</B> to the list. Once that is done, I just click on the &#147;Assigned Rights&#148; button and from there I can give myself rights to read and write attributes, as well as create other objects inside of <B>ou=ENG,o=SLC</B>.</p>

<H3><FONT COLOR="#000080">Logging in to the Directory</FONT></H3>

<p>Like any good data store, before you can access any information, you must &#147;authenticate&#148; yourself (prove who you are). With directories, you need to login as one of the user objects in the tree. In the example program in <a href="list1.htm">Listing 1</a>, I will login as <B>cn=mseaver,ou=HR,o=SLC</B>. The first step in logging in is to set up the initial <I>context</I>. A context is simply a location in the tree. With LDAP, the initial context points to the root of the tree, which is an imaginary parent to <B>o=SLC</B>. To setup an initial context in JNDI, you pass the JNDI subsystem a <B>Hashtable</B> that contains information on what type of environment you want. First and foremost, you must specify which JNDI provider you&#146;ll be using. In this case I&#146;ll be using <B>com.sun.jndi.ldap.LdapCtxFactory</B>, the provider that comes with the JDK. This is the factory class used by the JNDI subsystem to create our initial context. In addition, I need to provide the URL of the LDAP server. Because I have an LDAP directory installed on my development machine, I&#146;m using <B>127.0.0.1</B> (<B>"localhost"</B>) as the URL and the standard LDAP port of <B>389</B>. I also need to provide the DN and password of the object I&#146;m going to log in as, namely <B>cn=mseaver,ou=HR,o=SLC</B>. When I set up this tree on my machine, I gave the user object <B>cn=mseaver,ou=HR,o=SLC</B> the password <BR>
<B>password</B>. You&#146;ll need to change the code to match the password you gave the user when you set up your tree. The final item in the <B>Hashtable</B> describes the type of authentication. Most LDAP directories support at least two types of authentication: simple and SSL. Simple authentication performs no encryption of the password on the wire. Because this poses a security risk, some directories have simple authentication disabled by default. You&#146;ll need to enable simple authentication before you run this code. Once I&#146;ve initialized the <B>Hashtable</B> with the correct environment information, I pass it to the constructor for <B>InitialContext</B>. If something goes wrong, say an incorrect password or an invalid object DN, it throws a <B>NamingException</B>. If no exception occurs, then <B>root</B> will point at the root of our tree, and I have a valid LDAP connection. When I&#146;m finished with the connection, I call <B>close</B> on the <B>InitialContext</B> object to log out.</p>

<H3><FONT COLOR="#000080">Reading Directory Entries</FONT></H3>

<p>Next to logging in, the next most common task in directory programming is reading attributes from the tree. In <a href="list2.htm">Listing 2</a>, I login to the tree and read the SN attribute from the object <B>cn=mseaver,ou=HR,o=SLC</B>. Remember that for this to work, the user you login as must have rights to access the SN attribute on <B>cn=mseaver,ou=HR,o=novell</B>. I&#146;ve pulled the contents of <B>Login.java</B> into a function called <B>login</B> that will appear in all of the remaining examples. This function sets up the environment, creates the initial context, and returns that initial context to the caller. As before, I login as <B>cn=mseaver,ou=HR,o=novell</B>. Once the login succeeds, I lookup the location in the tree from which I want to read. Recall that the initial context points to the root of the tree, but I want to read from <B>cn=mseaver,ou=HR,o=novell</B>. The <B>Context.lookup</B> method takes a <B>String</B> representing the RDN (Relative Distinguished Name) of an object in the tree. An RDN is like a DN, but it is only guaranteed to be unique in a given context. For example, from the root of the tree, the RDN of <B>cn=mseaver,ou=HR,o=SLC</B> is the full DN. However, from the context <B>ou=HR,o=SLC</B>, the RDN would be <B>cn=mseaver</B>. Because root points to the root of the tree, the RDN of the object we want to read is <B>cn=mseaver,ou=HR,o=SLC</B>. The lookup method returns another <B>DirContext</B> object pointing to this spot in the tree. Once I have a <B>DirContext</B> object pointing to the correct spot in the tree, all I need to do is call the <B>DirContext.getAttributes</B> method. This method takes two parameters: the RDN of the object we want to read from, and a <B>String</B> array containing the attribute IDs for the attributes we want to read, in this case <B>sn</B>. Since the <B>DirContext</B> object already points to the correct object, I pass an empty string for the RDN. Alternatively, I could have looked up the container where our object is instead of the object itself like this:</p>

<pre>
DirContext ctx   =
    (DirContext)root.lookup("ou=HR,o=SLC");
String[] sn      = {"sn"};
Attributes attrs =
    ctx.getAttributes("cn=mseaver", sn);
</pre>

<p>In this case, I need to pass the RDN of the object to be read into the <B>DirContext.getAttributes</B> method. If you&#146;re wondering if you can just dispense with the look-up call altogether and just call <B>getAttributes</B> on the root object, you can, and the code would look like this:</p>

<pre>
String[] sn = {"sn"};
Attributes attrs =
    root.getAttributes("cn=mseaver,ou=HR,o=SLC", sn);
</pre>

<p>Most often you&#146;ll just use this last method, especially if you&#146;re only going to read attributes from a single object. It&#146;s important to understand how look-ups work and how they relate to RDNs though, especially when writing complicated directory manipulation code.</p>
<p>The <B>DirContext.getAttributes</B> method returns an <B>Attributes</B> object. I get access to the actual attribute object by calling the <B>Attributes.get</B> method and passing it a string containing the ID of the attribute I want. If the return value is null, then either there is no value for the attribute on the object (in which case the attribute is said to not exist on the object), or, the attribute exists, but I don&#146;t have rights to see it. Once I have a valid handle to the attribute object, I call <B>Attribute.get</B> for a <B>String</B> object containing the actual attribute value. <B>Attribute.get</B> returns an <B>Object</B>, not a <B>String</B>, so I need to cast it before I can use it. JNDI is a very flexible API, and it will allow a directory to return attribute values in any kind of object. When using the LDAP provider however, attribute values are returned as strings.</p>
<p>When reading multiple attributes or multiple values, things become slightly more complicated. You can find an example of reading multiple values and multiple attributes in <a href="list3.htm">Listing 3</a>.</p>

<H3><FONT COLOR="#000080">Updating the Directory</FONT></H3>

<p>Although most often you just read from the directory, sometimes you need to update attribute values. As always, you need to make sure you are logging in as a user who has rights to modify these attributes. You can find an example of a simple update in <a href="list4.htm">Listing 4</a>. The first two lines, where I log into the directory and look up the object I&#146;m interested in, should look familiar by now. The next line allocates an array of three <B>ModificationItem</B> objects, one modification object for each operation I&#146;ll need to perform. In this example, I&#146;m changing the <B>givenName</B> value from <B>James</B> to <B>Jimmy</B>. Because <B>givenName</B> is a multi-valued attribute, I need to take care not to change any of the other values in the attribute, so I first remove the value <B>James</B> and then add the value <B>Jimmy</B>. I also want to update the <B>fullName</B> attribute, but in this case I&#146;ll just wipe out any existing values and replace them with my new full name <B>Michael Jimmy Seaver</B>.</p>
<p>When performing directory modifications, there are three types of operations available. You can remove a specific attribute value; add an attribute value to an object, which does not alter any other existing attributes on the object; and you can replace an attribute value, which removes all the current values for the attribute and replaces them with the new value. The constructor for a <B>ModificationItem</B> takes two parameters. The first is an integer specifying which of the three operations you are requesting. These operation codes are <B>static final</B> members of the <B>DirContext</B> object. The second parameter is an <B>Attribute</B> object specifying the attribute ID and attribute values. You can use the <B>BasicAttribute</B> class for these operations when you&#146;re using the LDAP provider. If you were using a directory provider from another vendor, you might use one of their classes instead of <B>BasicAttribute</B>, but the general structure would be the same. Once you&#146;ve set up the <B>Attributes</B> and <B>ModificationItems</B>, all that is left to do is call the <B>DirContext.modifyAttributes</B> method. This method takes two parameters, first the RDN of the object to be modified (in this case an empty <B>String</B> because I&#146;ve have already done a look-up). The second parameter is an array of <B>ModificationItems</B> specifying the changes to make.</p>

<H3><FONT COLOR="#000080">Adding and Deleting Objects</FONT></H3>

<p>Sometimes you&#146;ll need to create new objects in the directory or delete objects you no longer need. An example of a simple <B>add</B> operation appears in <a href="list5.htm">Listing 5</a>. Using the <B>Attributes</B> object, I provide values for the required attributes, at a minimum the <B>objectClass</B>. You&#146;ll need to consult documentation on your directory&#146;s schema to figure out which attributes are required and which are optional. In the case of <B>User</B>, I need to populate the <B>SN</B> attribute in addition to the <B>objectClass</B> attribute. You can add attributes to the <B>Attributes</B> object through the <B>put</B> method that takes two parameters, an attribute ID and an attribute value. This method only sets one value per attribute, so if you want to set multiple values on an attribute, you&#146;ll need to use an <B>Attribute</B> object. Once you&#146;ve initialized the <B>Attributes</B> object with the correct attribute IDs and values, you need to call <B>DirContext.createSubcontext</B> with the RDN of the object to create, and the <B>Attributes</B> object we just set up. If this call succeeds, the object has been successfully created in the tree.</p>
<p>Deleting objects is very straightforward and is accomplished through the <B>DirContext.destroySubcontext</B> call (see <a href="list6.htm">Listing 6</a>).</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The directory can also provide a central environment for managing the security and access control portions of your applications. However, using the tools illustrated in this article, you should be able to begin using an LDAP directory for any authentication or user-profile management application. If you have an application that is currently using its own user profile or authentication database, consider LDAP-enabling your application. Organizations throughout the world are moving to LDAP directories to provide a single point of authentication and administration for all their applications. Providing an LDAP-enabled version of your application will make it easier for these organizations to integrate your applications into their enterprises. In addition, it can accelerate your development by simplifying your authentication and user-profile management code. The market for LDAP-enabled applications and LDAP-proficient developers is just now beginning to explode. Using LDAP could just be the competitive advantage you need.</p>

<H3><FONT COLOR="#000080">Resources</FONT></H3>
<p>&lt;www.ldapzone.com &gt; &#151; All kinds of goodies for LDAP developers.</p>
<p>&lt;www.javasoft.com/products/jndi/index.html&gt; &#151; Information on JNDI, including some other uses of the API.</p>
<p>&lt;http://msdn.microsoft.com&gt; &#151; Information on developing using Microsoft&#146;s Active Directory.</p>
<p>&lt;http://developer.novell.com&gt; &#151; Information on developing using Novell&#146;s NDS eDirectory.</p>
<p>&lt;www.novell.com/download/index.html&gt; &#151; Download Novell&#146;s directory, which is free to developers and available for NT/2000, Linux, Solaris, and NetWare.</p>

<p><i><B>Michael Seaver</B> is the manager of Novell Consulting Custom Development Group. His team provides premium software development services for Novell customers throughout the world. He has developed directory-enabled applications for many of these customers. In his spare time, he enjoys playing with his baby and driving in the mountain canyons of his hometown, Provo, Utah.</i></p>

<h4><a href="../../../source/2001/jdec01/seaver.zip"></a></h4>
</blockquote></body></html>
