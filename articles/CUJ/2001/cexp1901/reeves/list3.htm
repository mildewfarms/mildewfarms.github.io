<HTML><HEAD>
<TITLE>January 2001 C++ Experts Forum/The (B)Leading Edge/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3:  String_streambuf&lt;&gt; version 3 </A></h4>
<pre>
#ifndef STRING_STREAM_H
#define STRING_STREAM_H

#include &lt;iostream&gt;

template&lt;typename StringT&gt;
class String_streambuf : public std::streambuf {
    // typedefs
    typedef std::streambuf    inherited;
    typedef std::char_traits&lt;char&gt; traits;
    typedef inherited::int_type int_type;
    typedef std::streamsize streamsize;

    // data
    StringT&amp;        _str;
    char            _buf[128];

public:
    String_streambuf(StringT&amp; str);
    virtual ~String_streambuf();

protected:
    virtual int            sync();
    virtual int_type        overflow(int_type c = traits::eof());
};


//
// IOStreams
//
template&lt;typename StringT&gt;
class iString_stream : public std::istream {
    // types
    typedef std::istream inherited;

    // data
    String_streambuf&lt;StringT&gt;    _streambuf;

public:
    iString_stream(StringT&amp; str);
    ~iString_stream();
};


template&lt;typename StringT&gt;
class oString_stream : public std::ostream {
    // types
    typedef std::ostream inherited;

    // data
    String_streambuf&lt;StringT&gt;    _streambuf;

public:
    oString_stream(StringT&amp; str);
    ~oString_stream();
};


template&lt;typename StringT&gt;
class String_stream : public std::iostream {
    // types
    typedef std::IOStream inherited;

    // data
    String_streambuf&lt;StringT&gt;    _streambuf;

public:
    String_stream(StringT&amp; str);
    ~String_stream();
};



//
// implementation
//
template&lt;typename StringT&gt;
String_streambuf&lt;StringT&gt;::String_streambuf(StringT&amp; str)
  : _str(str)
{
    char* gbuf = const_cast&lt;char*&gt;(_str.data());
    setg(gbuf, gbuf, gbuf+_str.size());
    setp(_buf, _buf + sizeof(_buf));
}


template&lt;typename StringT&gt;
String_streambuf&lt;StringT&gt;::~String_streambuf()
{
    // empty
}


template&lt;typename StringT&gt;
int
String_streambuf&lt;StringT&gt;::sync()
{
    size_t l = pptr() - pbase();
    if (l &gt; 0) {
        size_t pos = gptr() - eback();  // remember the get position
        _str.append(_buf, l);
        setp(_buf, _buf+sizeof(_buf));
        char* gbuf = const_cast&lt;char*&gt;(_str.data());
        setg(gbuf, gbuf+pos, gbuf+_str.size()); // reset the get buffer
    }
    return 0;
}


template&lt;typename StringT&gt;
typename String_streambuf&lt;StringT&gt;::int_type
String_streambuf&lt;StringT&gt;::overflow(int_type c)
{
    sync();
    if (c != traits::eof()) {
        *_buf = c;
        pbump(1);
        return c;
    }
    return traits::not_eof(c);
}


template&lt;typename StringT&gt;
iString_stream&lt;StringT&gt;::iString_stream(StringT&amp; str)
  : inherited(0),
    _streambuf(str)
{
    init(&amp;_streambuf);
}


template&lt;typename StringT&gt;
iString_stream&lt;StringT&gt;::~iString_stream()
{
    // empty
}


template&lt;typename StringT&gt;
oString_stream&lt;StringT&gt;::oString_stream(StringT&amp; str)
  : inherited(0),
    _streambuf(str)
{
    init(&amp;_streambuf);
}


template&lt;typename StringT&gt;
oString_stream&lt;StringT&gt;::~oString_stream()
{
    // empty
}


template&lt;typename StringT&gt;
String_stream&lt;StringT&gt;::String_stream(StringT&amp; str)
  : inherited(0),
    _streambuf(str)
{
    init(&amp;_streambuf);
}


template&lt;typename StringT&gt;
String_stream&lt;StringT&gt;::~String_stream()
{
    // empty
}


#endif
</pre>
</BODY></HTML>
