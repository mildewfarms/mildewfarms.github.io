<HTML>   
     <HEAD>
<TITLE>January 2001 C++ Experts Forum/From Mechanism to Method</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.01/tocjan.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">From Mechanism to Method: Good Qualifications</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kevlin Henney</FONT></H3>

<HR>
<BLOCKQUOTE>

<P><I>When it is not necessary to change, it is necessary not to change.</I><br>
&#151 Lucius Cary, Viscount Falkland, 1610-1643<P>
<P>Change. In every day life, it is seen as something either to embrace and face or to resist and fear. It is either as good as a rest or something that leopard spots simply do not do. It is also, when it comes to matters of state, at the heart of procedural programming, making it a principle and principal concern for C++ developers: events cause functions to be executed; objects are created and destroyed; variables are assigned.</P>
<P>But as a path of control flows through our code, not everything is about change. In places the flow is smooth and unchanging, and importantly so. It is important that things we regard as constants remain so, giving rise to the oxymoron <I>constant variable</I>. It is important that some functions do not change the objects they are called on or with. It is important that some function results do not allow subsequent changes.</P>

<H3><FONT COLOR="#000080">Change Management</FONT></H3>

<P>In C++, the responsibility of documenting and enforcing the absence of change is given to <B>const</B>, and that of communicating asynchronous and unpredictable change is given to <B>volatile</B>, by far the lesser of the two qualifiers. In combination, the apparently oxymoronic <B>const volatile</B> leaves many developers bemused, but makes some sense when applied to references or pointers that offer read-only semantics to asynchronously changing values.</P>

<H4><FONT COLOR="#000080">Ringing the Changes</FONT></H4>

<P>A simple dictionary class, which allows you to look up a string value based on a unique string key, demonstrates common application of <B>const</B> with respect to member functions, references, and pointers:</P>

<pre>
class dictionary
{
public:
    bool empty() const;
    size_t size() const;
    const std::string *lookup(const std::string &amp;) const;
    void insert(const std::string &, const std::string &);
    void erase(const std::string &amp;);
    void clear();
    ...
private:
    ...
    typedef std::map&lt;std::string, std::string&gt; map;
    map content;
};
std::ostream &amp;operator&lt;&lt;(ostream &amp;, const dictionary &amp;);
std::istream &amp;operator&gt;&gt;(istream &amp;, dictionary &amp;);
...
</pre>

<P>With the exception of the <B>lookup</B> function, the function names and semantics correspond closely or directly to those in the standard library <a href="#1">[1]</a>. Being able to read this interface with respect to mutability helps you determine some of the expected behavior of the class.</P>

<H4><FONT COLOR="#000080">Don't Change the Spots</FONT></H4>

<P>In some cases, we can allow change behind the scenes with <B>mutable</B>, supporting discreet change on data members even under the rule of <B>const</B>. Sometimes referred to as the <I>anti-<B>const</B></I>, <B>mutable</B>'s role is to support the occasional discrepancy between a <B>const</B>-correct class public interface and its underlying physical implementation. Rather than modify the interface &#151; and therefore affect the class user &#151; to reflect optimizations such as caching, <B>mutable</B> allows the interface to remain stable and implementation details that do not affect the usage to remain encapsulated.</P>
<P>Let us assume that in using the <B>dictionary</B> class we discover that there is a good chance that we look up a given key many times in a row. We could try to optimize this by keeping a cache. Preservation of the class's perceived interface and functional behavior is assisted by <B>mutable</B>:</P>

<pre>
class dictionary
{
    ...
    mutable map::const_iterator last_lookup;
};

const std::string *dictionary::lookup(const std::string &amp;key) const
{
    if(last_lookup == content.end() || last_lookup-&gt;first != key)
        last_lookup = content.find(key);
    return last_lookup != content.end() ? &amp;last_lookup-&gt;second : 0;
}
</pre>

<P><B>mutable</B> has helped bridge any discrepancy between physical and logical <B>const</B>-ness. However, note that this solution is not appropriate in an environment where dictionary objects are shared between threads. Between each of these two implementation options the type perceived by the class user has remained stable.</P>

<H3><FONT COLOR="#000080">Substitutability and Mutability</FONT></H3>

<P>What is an object's type? Is it the class from which it is created? Is it the functions that can be applied to it, whether global or member? Is it its usage? Is it its capabilities and behavior? Is it the classification that groups similar objects together? In truth, <I>type</I> can mean any one of these, depending on the context. You can see that in some way they are all related &#151; or at least can be &#151; to one another.</P>

<H4><FONT COLOR="#000080">Of Types and Classes</FONT></H4>

<P>If we restrict the notion of type to be the declared class of an object and the functions that work on it, we may have a syntactic notion of type, but we are short of a model of usage &#151; sure I can write code against it that compiles, but what am I expecting at runtime? In the dictionary example, we can see how to write code that compiles, but what result are we expecting from a call to <B>dictionary::lookup</B>? If we say that a class defines the expected behavior from the member and global functions that can be applied to its instances, we can equate the syntax and semantics of the class directly with a notion of type that satisfies most possible definitions of the word.</P>
<P>What about template type parameters? These are constrained by syntax usage, but not by class. That is, after all, the idea of templates: They are generic and not locked into specific class hierarchies. In the STL, the compile-time requirements for syntax usage are supplemented by operational requirements. For instance, an object that is <I>CopyConstructible</I> <a href="#1">[1]</a> satisfies a set of requirements that goes beyond the simple syntax of a copy constructor so that <B>std::list&lt;int&gt;</B> is <I>CopyConstructible</I> whereas <B>std::auto_ptr&lt;int&gt;</B> is not. These syntactic and semantic requirements together form an equally valid concept of type.</P>
<P>What seems to be common across these notions of type is that a type names and describes a particular model of usage and external behavior for an object. In the case of a class, the type name exists explicitly in the source code, the usage is defined by the functions in its interface (according to the <I>Interface Principle</I> <a href="#2">[2]</a>), and the behavior is described outside of the compiled class interface (comments, unit tests, external documentation, word of mouth, class author's head, etc.). In the case of a template type parameter, the type name is not truly in the source code, the usage is defined by expression syntax, and the behavior is again implied and beyond the code.</P>
<P>So, how do <B>const</B> and <B>volatile</B> qualifiers relate to our notion of type? OK, if we're being practical: How does the <B>const</B> qualifier affect our notion of type? When <B>const</B> is applied to an object, whether directly on a value declaration or indirectly via a pointer or reference, it changes our view of that object. To be precise, it restricts what we can do with it. In other words it affects the model of usage, and hence the type. For instance, a plain <B>int</B> supports assignment operations, such as <B>=</B>, <B>+=</B>, and <B>++</B>, whereas a <B>const int</B> does not. A <B>std::string</B> supports modifier functions such as <B>clear</B> and <B>append</B>, whereas a <B>const std::string</B> supports only query functions. Therefore, the typical class public interface is really two interfaces: The interface for <B>const</B> qualified objects and the interface for non-<B>const</B> qualified objects.</P>

<H4><FONT COLOR="#000080">Of Type Hierarchies and Class Hierarchies</FONT></H4>

<P>Relating classes together with derivation forms a class hierarchy. From the perspective of an external user of the class hierarchy &#151; as opposed to someone implementing or extending it &#151; only public derivation is of interest. What is the best advice for forming inheritance relationships? Substitutability or, to be more precise, the LSP (Liskov Substitution Principle) <a href="#3">[3]</a>:</P>
<BLOCKQUOTE>
<P>A type hierarchy is composed of subtypes and supertypes. The intuitive idea of a <I>subtype</I> is one whose objects provide all the behavior of objects of another type (the <I>supertype</I>) plus something extra. What is wanted here is something like the following substitution property: If for each object o<SUB>1</SUB> of type S there is an object o<SUB>2</SUB> of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o<SUB>1</SUB> is substituted for o<SUB>2</SUB>, then S is a subtype of T.</P>
</BLOCKQUOTE>

<P>In a nutshell, class hierarchy should follow type hierarchy. This recommendation is more detailed than the more common <I>is-a</I> or <I>is-a-kind-of</I> recommendation, which creates a taxonomy ensuring that each derived class <I>is a kind of</I> its base class. LSP is more detailed because it considers explicitly the behavior of the types involved.</P>
<P>Notice that &#151; without actually having it officially stated &#151; the implicit conversion in C++ from pointers or references from derived to base underpins an assumption that LSP is followed. The compiler knows nothing of the expected semantics of your classes, but it knows in code that where a base instance is expected a derived instance can be supplied. You drop LSP at your own risk.</P>
<P>There is another assumption that LSP is a recommendation only for organizing inheritance between classes in object-oriented systems [<a href="#4">4</a>, <a href="#2">2</a>]. Notice that, if you read the recommendation carefully, there is no mention of classes. LSP is about relationships between types. Substitutability as defined applies not only to class hierarchies, but also to other notions of type based on models of usage <a href="#5">[5]</a>: conversions <a href="#6">[6]</a>, overloading <a href="#7">[7]</a>, templates (so there is no need for a generic variant of LSP <a href="#2">[2]</a>), and mutability.</P>
<P>We can relate mutability directly to <B>const</B> and non-<B>const</B>, and substitutability to the relationship between them: For a given class, a non-<B>const</B> object is a subtype of a <B>const</B> object because it may be used wherever the <B>const</B> version is expected. The non-<B>const</B> type also supports the interface of the <B>const</B> type. Pointer and reference conversions work in the way that you would expect: To go from non-<b>const</b> to <b>const</b> is implicit, whereas to go the other way, against the grain, requires an explicit conversion, a <B>const_cast</B>. Compare this to the implicit derived to base conversion with inheritance, and the explicit <B>static_cast</B> (or safer <B>dynamic_cast</B>) to go the other way.</P>
<P>Returning to the <B>dictionary</B> class, we can take some artistic and linguistic license to consider it to be two types with a subtyping relationship between them:</P>

<pre>
class <i>const</i> dictionary // not legal C++
{
public: // const member functions only
    bool empty() const;
    size_t size() const;
    const std::string *lookup(const std::string &amp;) const;
    ...
};
// globals taking const dictionary references only
std::ostream &amp;operator&lt;&lt;(ostream &amp;, const dictionary &amp;);
...

class dictionary <i>: public const dictionary</i> // not legal C++
{
public: // additional non-const member functions
    void insert(const std::string &, const std::string &);
    void erase(const std::string &amp;);
    void clear();
    ...
};
// additional globals taking non-const dictionary references
std::istream &amp;operator&gt;&gt;(istream &amp;, dictionary &amp;);
...
</pre>

<P>From this, it is clear that when we see <B>const dictionary</B> in code, we are looking at the <I>as-if</I> type represented by the first fragment, and when we see plain <B>dictionary</B> in code, it is the second fragment, which builds on the first.</P>

<H4><FONT COLOR="#000080">Specialization</FONT></H4>

<P>Where there are subtypes there is specialization. Specialization can be with respect to extension, i.e., the subtype extends the interface of the supertype with more operations. It can also be with respect to constraints, i.e., the subtype's operations are more specific with respect to behavior or result types.</P>
<P>In a class hierarchy, classes typically acquire more operations the further down the hierarchy you descend. The behavior guarantees can also become more specific. For example, if a base class function guarantees that its pointer result is null or non-null, an overridden version in a derived class can satisfy substitutability by never returning null. Conversely, if a base class function requires that its pointer argument must never be null, a derived class version can legitimately liberalize this to also accommodate null. The specialization of result also applies to return type: Assuming that the return type is a class pointer or reference, an overridden function can redeclare the return type to be a derived class pointer or reference.</P>
<P>This much is standard in object-oriented programming: Runtime polymorphism offers us the method for such specialization and <B>virtual</B> functions the mechanism. What of <B>const</B> and non-<B>const</B>? There is no concept of runtime polymorphism related to mutability. However, overloading offers us a compile-time variant of overriding: We can overload with respect to <B>const</B>-ness. In this compile-time view of polymorphism (the foundation of generic programming in C++) selection is performed with respect to <B>const</B>-ness for member functions on their target object and functions in general with respect to their arguments.</P>
<P>Given two member functions of the same name and similar signature, differentiated only by <B>const</B>-ness, the <B>const</B> version will be the only viable option for <B>const</B> access to an object. For non-<B>const</B> access, both functions are in theory available, but the compiler will select the more specific version, i.e., the non-<B>const</B> one. The most common reason for such <I>overriding</I> is to specialize the return type  (e.g., <B>operator[]</B> on strings should allow scribble access for non-<B>const</B> strings and read-only access for <B>const</B> strings). In our <B>dictionary</B> class, a more STL-based approach to lookup demonstrates this approach:</P>

<pre>
class dictionary
{
public:
    typedef map::const_iterator const_iterator;
    typedef map::iterator iterator;
    ...
    const_iterator find(const string &amp;) const;
    iterator find(const string &amp;);
    ...
};
</pre>

<P>Viewing this again in terms of <B>const</B>-based type and subtype gives us the following interfaces:</P>

<pre>
class <I>const</I> dictionary // not legal C++
{
public:
    const_iterator find(const string &amp;) const;
    ...
};

class dictionary <I>: public const dictionary</I> // not legal C++
{
public:
    iterator find(const string &amp;); // more specialized 'override'
    ...
};
</pre>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<P>In C++, <B>const</B> divides the novice from the experienced: on one side lies a source of confusion; on the other a means of clarification. Explicit annotation of modifier from query functions can benefit a system, and this is a concept that can be expressed in C++ using type qualifiers. Thus <B>volatile</B> and <B>const</B> &#151; as well as <b>mutable</b> &#151; are unified under the heading of change (even if the names are not as well chosen as they could have been).</P>
<P>Qualification relates to the notion of type in terms of usage and behavior, and with it subtyping and all its accumulated practices and understanding. One valuable property of subtyping is substitutability. Although it is often clear from the context, we sometimes need to clarify what kind of substitutability we are referring to (i.e., substitutability with respect to <I>what</I>?). In the case of <B>const,</B> it is substitutability with respect to change.</P>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] <I>International Standard: Programming Language - C++</I> ( ISO/IEC 14882:1998(E), 1998).</P>
<P><a name="2"></a>[2] Herb Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</P>
<P><a name="3"></a>[3] Barbara Liskov. "Data Abstraction and Hierarchy," <I>OOPSLA '87 Addendum to the Proceedings</I>, October 1987.</P>
<P><a name="4"></a>[4] James O. Coplien. <I>Advanced C++: Programming Styles and Idioms</I> (Addison-Wesley, 1992).</P>
<P><a name="5"></a>[5] Kevlin Henney. "From Mechanism to Method: Substitutability," <I>C++ Report</I>, May 2000, also available from http://www.curbralan.com.</P>
<P><a name="6"></a>[6] Kevlin Henney. "From Mechanism to Method: Valued Conversions," <I>C++ Report</I>, May 2000, also available from http://www.curbralan.com.</P>
<P><a name="7"></a>[7] Kevlin Henney. "From Mechanism to Method: Function Follows Form," <I>C++ Experts Forum  </I>on the <I>C/C++ Users Journal </I>website, November 2000, http://www.cuj.com/experts/1811/henney.html.</P>

<p><i><b>Kevlin Henney</b> is an independent consultant and trainer specializing in C++, Java, OO design, patterns, and software architecture.  He can be reached at <B>kevlin@curbralan.com</B>.</i></p>
</blockquote></body></html>
