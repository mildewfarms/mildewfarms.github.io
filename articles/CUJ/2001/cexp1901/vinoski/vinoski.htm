<HTML>   
     <HEAD>
<TITLE>January 2001 C++ Experts Forum/Object Interconnections</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.01/tocjan.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: Standard C++ and the OMG C++ Mapping</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Douglas C. Schmidt and Steve Vinoski</FONT></H3>
<HR>

<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<P>Long-time readers of  &quot;Object Interconnections&quot; know that our column generally covers CORBA programming in C++. In keeping with this theme, our previous column <a href="#1">[1]</a> described the history of the OMG IDL C++ Language Mapping <a href="#2">[2]</a>. Our goal was to explain the design constraints that shaped the mapping, especially the non-technical ones arising from the political forces that often accompany standardization efforts.</P>
<P>CORBA C++ programmers, especially those relatively new to CORBA or to C++, often wonder why the OMG C++ mapping has not kept up with ISO/ANSI C++ language standardization efforts. As we described in our previous column, the CORBA C++ mapping was standardized in late 1994. Since that time, the C++ mapping has stayed largely the same &#151;  the OMG has made only those changes needed to fix bugs and to track the evolution of the CORBA specification.</P>
<P>There are several reasons why there have been no major modifications to the OMG C++ mapping since its initial standardization:</P>


<UL>
<LI>One reason is the desire for stability on the part of both ORB users and ORB vendors. Since changes to the mapping require reworking, retesting, and redeploying C++ ORB implementations and the applications built to use them, major mapping renovations could be costly.</LI>
<LI>Another reason is that the OMG has never issued an RFP (Request For Proposals) for C++ mapping renovations.  Perhaps this is due in part to the difficulties surrounding the first standardization effort.</LI>
<LI>ORBs are typically used for integration, and as a result they must be highly portable, so they are available on a wide range of platforms. The OMG C++ mapping is already known to be highly portable. Adding dependencies on features of Standard C++, even on simple class templates such as <b>pair</b>, would reduce portability because some features are still unsupported in certain C++ compilers.</LI>
</UL>

<P>In this column, we explore some ideas for hypothetical alternative mappings of OMG IDL to C++ that use Standard C++ features. The primary design criteria for these alternative mappings are flexibility and ease of use, though we also pay attention to performance issues. To avoid creating false expectations, we must stress the word &quot;hypothetical,&quot; as there are currently no efforts within the OMG to define any new C++ mappings, nor do we necessarily condone the creation of any official efforts to do so.</P>

<H3><FONT COLOR="#000080">Major Areas of the OMG C++ Mapping</FONT></H3>

<P>The CORBA C++ mapping can be divided into the following four major areas:</P>

<OL>
<LI><I>IDL data type mapping</I>: defines how IDL data types, such as <B>struct</B>s and <B>sequence</B>s<B>,</B> are mapped into C++, including how they are passed between client and target object in operation invocations.</LI>
<LI><I>Client-side interface mapping</I>: defines how IDL interfaces are mapped into C++ to support client applications invoking distributed objects.</LI>
<LI><I>Server-side interface mapping</I>: defines how IDL interfaces are mapped into C++ to support server applications implementing distributed objects.</LI>
<LI><I>Pseudo-object mapping</I>: CORBA includes interfaces for aspects of the ORB implementation, including the <B>ORB</B> interface itself, <B>Request</B>, <B>Object</B>, and named value lists<B> </B>(<B>NVList</B>). The interfaces of these <I>pseudo objects</I> are special in that they sometimes are not defined entirely in IDL (e.g.<I>,</I> some are defined in a C-like language). These pseudo-object interfaces must also be mapped into C++ to make them available for both client and server applications.</LI>
</OL>

<P>In the remainder of this column, we'll examine the first two areas listed above to see how we might apply features of Standard C++ to each of them. We'll cover the other areas in our next column.</P>

<H3><FONT COLOR="#000080">IDL Data Type Mapping</FONT></H3>

<P>OMG IDL provides types such as <B>string</B>, <B>wstring</B>, <B>sequence</B>, and arrays. In the OMG C++ mapping, <B>string</B>s map to <B>char*</B>, <B>wstring</B>s map to <B>CORBA::WChar*</B> (where <B>WChar</B> is a typedef, usually for <B>wchar_t</B>), <B>sequence</B>s map to classes, and arrays map to C++ arrays. For <B>string</B>, <B>wstring</B>, and arrays, these mappings have the drawback that they map to raw unmanaged arrays, which are known to be error-prone in C and C++ (yet another reason to always analyze your code with Purify or BoundsChecker!).</P>
<P>Many Standard C++ algorithms assume sequential containers with bidirectional iterators.  Thus, both sequences and arrays from the OMG C++ mapping can already be used with these algorithms. Doing so with sequences requires access to the underlying sequence buffer, which you can obtain by calling the standard CORBA <B>get_buffer</B> method on any sequence. This method returns a contiguous array, and pointers into the array can act as iterators for the standard algorithms. However, this addresses only a small part of the issues &#151; especially memory management issues &#151; that many CORBA developers would like to see addressed by a C++ mapping that takes advantage of Standard C++.</P>
<P>For sequences, the OMG C++ mapping is problematic in that the interfaces of the mapped C++ sequence classes lack certain functionality, such as vector operations. For example, the CORBA sequence mapping supplies no functions that you can use to append, insert, or iterate. Perhaps worse, the sequence mapping forces developers to manipulate the sequence length explicitly to manipulate the data. Here's the code required to append a string element to a sequence of strings, for example:</P>

<pre>
CORBA::ULong len = sequence.length ();
// Make room for the new element.
sequence.length (len + 1);
sequence[len] = CORBA::string_dup ("a new element");
</pre>

<P>Similarly, inserting an element into the middle of a sequence requires you to increase the sequence length and move all elements above the new element up by one to make room for it. As we all know, this type of low-level data type manipulation is tedious and error-prone. You can write helper functions that do all of this for you, but the point is that you shouldn't have to, particularly when the functionality is already implemented in the Standard C++ library.</P>
<P>Obviously, mapping these data types to suitable Standard C++ types instead would make them easier to use. The <B>string</B> and <B>wstring</B> types could map to suitable instantiations of the C++ <B>basic_string</B> type, thus providing all the rich data manipulation and memory management features that it supports. Arrays could map to the C++ vector type, thereby providing largely the same benefits.</P>
<P>The choice of a Standard C++ mapping for sequences is not so straightforward, however. Specifically, should a sequence map to <B>vector</B> or to <B>list</B>? The best choice for the mapping depends entirely on how the application intends to use the sequence.  For example, if the application intends to perform many insertions in the middle of the sequence, using <B>list</B> rather than <B>vector</B> would be more efficient. In fact, the best choice might even be different for the client than for the server, or different even for different parts of the same client or server application. We'll revisit this problem later.</P>

<H3><FONT COLOR="#000080">Implications on Parameter Passing Rules</FONT></H3>

<P>When developers speak of an IDL C++ mapping based on Standard C++, the mapping of IDL data types to C++ data types is not the only issue they're trying to address. Many developers are concerned about the complexity of the parameter passing rules as well. For example, let's assume the following IDL:</P>

<pre>
interface A {
    void op (inout string s);
};
</pre>

<P>Because the argument to operation <B>A::op</B> is an <B>inout</B> argument, it passes first from the client to the target, and then back from the target to the client. A client application developer who invokes <B>A::op</B> must therefore remember to first set the argument being passed in to a valid string value and then remember to free the value that comes back, like this:</P>

<pre>
char *str = CORBA::string_dup ("in string value");
a-&gt;op (str);
// Use string value stored in str, and then free it.
CORBA::string_free (str);
</pre>

<P>Note that even the initial value must be heap allocated, because if the target object wants to change the value, it can expect to be able to invoke <B>CORBA::string_free</B> to do so. The servant method of the target object implementation might look like this:</P>

<pre>void
MyServant::op (char *&amp;str) throw (CORBA::SystemException)
{
    CORBA::string_free (str);
    str = CORBA::string_dup ("out string value");
}
</pre>

<P>Keep in mind that the CORBA C++ memory management rules were crafted carefully so that they work in both the distributed case and the collocated case <a href="#3">[3]</a>. In other words, these rules are the same regardless of whether the client and target are distributed across separate machines, or whether they're collocated within the same process and the client invokes the target object directly.</P>
<P>You might also recall from our previous column that these parameter passing rules were designed to avoid copying.  In the collocated case, for example, the string allocated by the target can be passed back to the caller without having to copy it, simply by transferring ownership of the pointer. Let's apply these same rules to a hypothetical mapping in which we map an IDL string to <B>std::string</B>:</P>

<pre>
string *str = new string ("in string value");
a-&gt;op (str);
delete str;
</pre>

<P>and on the server side:</P>

<pre>
void
MyServant::op (string *&amp;str) throw (CORBA::SystemException)
{
    delete str;
    str = new string ("out string value");
}
</pre>

<P>While we gain the benefits of encapsulated string manipulation provided by <B>std::string</B>, this mapping doesn't help much because it still suffers from the need for explicit low-level memory management via C++ operators <B>new</B> and <B>delete</B>, just like the existing OMG C++ mapping. A different approach is to change the parameter passing rules to simply pass the string parameter by reference. For such a client, the code looks like this:</P>

<pre>
string str ("in string value");
a-&gt;op (str);
</pre>

<P>and for the server:</P>

<pre>
void
MyServant::op (string &amp;str) throw (CORBA::SystemException)
{
    str = "out string value";
}
</pre>

<P>This code is about as simple as it can get, especially compared to the original client code, which involved manual string duplication and deletion. At first glance, you might conclude that there's much to be gained from mapping IDL strings to <B>std::string</B> rather than to <B>char*</B>. Unfortunately, the comparison is not really fair, because any experienced CORBA C++ developer would have written the original example like this:</P>

<pre>
CORBA::String_var str = "in string value";
a-&gt;op (str);
</pre>

<P>This code looks strikingly similar to the <B>std::string</B> version.  The <B>String_var</B> type provides for automatic memory management of the  underlying character array, much the way that a Standard C++ <B>auto_ptr</B>  does, thus eliminating the need for explicit string duplication and deletion.</P> 
<P>What it ultimately comes down to is a trade-off of performance versus ease of use. The <b>String_var</b> code benefits from the fact that all copying and allocation is under control of the ORB, not under the control of the <b>std::string</b> implementation, which could have a huge performance impact on the application.The <b>std::string</b> version, on the other hand, is much easier  to use because <b>std::string</b> supplies rich string manipulation facilities  while <b>String_var </b> supplies none, and because <b>std::string</b> fits seamlessly  with the non-CORBA portions of your applications. This last benefit cannot  be overlooked, as developers often struggle with the question  of how far they should let CORBA data types, such as <b>String_var</b>,  intrude into their code <a href="#4">[4]</a>.</P> 
<P>If your application is going to live for a long time and run day after day in a performance-sensitive environment, you might not mind putting the appropriate effort into developing it (i.e.<I>,</I> worrying about low-level details such as memory management so that it's as efficient as possible). Conversely, if you're writing a &quot;quick and dirty&quot; application to be used once or twice and then thrown away, then you don't want to waste time worrying about low-level details. Today's OMG C++ mapping is good at allowing you to build efficient applications, but is not as good at allowing you to build quick and dirty applications. It would be nicer if it allowed both.</P>

<H3><FONT COLOR="#000080">Client-Side Interface Mapping</FONT></H3>

<P>In the OMG C++ mapping, IDL interfaces map into C++ classes, and their operations and attributes map into member functions on those classes. This is a very natural and intuitive mapping. Can it be improved?</P>
<P>One possibility for improving the mapping of operations relates to our discussion above of how best to map IDL sequences to C++ classes. Consider the following IDL:</P>

<pre>
interface A {
    typedef sequence&lt;string&gt; StrSeq;
    StrSeq match (in StrSeq values, in string pattern);
};
</pre>

<P>With the standard OMG C++ mapping, this interface maps to (roughly) the following client-side proxy class:</P>

<pre>
class A {
  public:
    class StrSeq { /* sequence class */ };
    StrSeq *match (const StrSeq &amp;values, const char *pat);
    // ...
};
</pre>

<P>If we assumed that sequences mapped to the <B>std::vector</B> type (and strings to <B>std::string</B>), this client proxy class might appear as follows:</P>

<pre>
class A {
  public:
    typedef vector&lt;string&gt; StrSeq;
    StrSeq match (const StrSeq &amp;values, const string &amp;pat);
};
</pre>

<P>As we mentioned above, however, it would be beneficial to allow developers to choose the exact mapping for the <B>StrSeq</B> type based on how their applications will use it. One way to do this is to use C++ member template:</P>

<pre>
class A {
  public:
    typedef vector&lt;string&gt; StrSeq;

    template&lt;typename Return, typename SeqArg&gt;
    Return match (const SeqArg &amp;values, const string &amp;pat);
};
</pre>

<P>This approach still defaults the <B>StrSeq</B> typedef to the <B>vector</B> type, but it allows the application to choose what type to pass for the <B>StrSeq</B> type on a per-call basis:</P>

<pre>
StrSeq values;
// Initialize sequence values, then invoke operation.
list&lt;string&gt; matches =
   a-&gt;template match&lt;list&lt;string&gt;, StrSeq&gt; (values, "a.*");
</pre>

<P>Here, we've passed a <B>vector&lt;string&gt;</B> (a <B>StrSeq</B>) as the sequence argument type, but we're using <B>list&lt;string&gt;</B> as the returned sequence type. We use explicit template member function invocation syntax to indicate the type of the return sequence.</P>
<P>This approach has several interesting implications:</P>

<UL>
<LI>Member template functions cannot be virtual. Typically, ORBs generate client-side proxy classes that are abstract and contain only pure virtual member functions to represent the IDL operations and attributes. They also generate derived concrete classes that they instantiate when necessary. This approach keeps the application unaware of ORB implementation details. Because member template functions cannot be virtual, it rules out this implementation approach and instead requires a delegation-based approach.</LI>
<LI>The client stub implementation of the <B>match</B> operation must assume that its sequence arguments support only those operations that Standard C++ sequential containers support. The marshaling code, for example, would most likely have to operate by iterating over the container element by element. For some types of sequences, such as sequences of basic types like <B>long</B> and <B>short</B>, this could have negative performance implications, because it disallows the typical approach of simply blasting the whole sequential array of values over the transport in one shot.</LI>
<LI>Member templates are not portable to all C++ compilers.</LI>
<LI>Operations with many sequence arguments result in member template functions with many template parameters. Given that member template functions cannot have default template parameters, using such member template functions with explicit invocation syntax could be tedious. Fortunately, in practice few operations have more than two or three arguments in total.</LI>
</UL>

<P>Some might consider this solution to be overkill. However, sequences are used heavily in many IDL interfaces, and allowing them to be used flexibly as shown here &#151; in a manner akin to the generic programming facilities of Standard C++ &#151; is important for maximizing the utility of mapping IDL to Standard C++.</P>
<P>There are a number of ways to evaluate what we've shown here, but for now we'll reserve such evaluation for our next column, after we've explored the mapping of the server side and pseudo objects to Standard C++ constructs.</P>

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<P>This column describes several ways to define a CORBA C++ mapping for IDL data types and client-side interfaces that uses C++ Standard library containers.  We've shown how many of the IDL types, such as strings and arrays, map cleanly onto classes in the C++ Standard library.  Other types, such as sequences, however, are more problematic because they involve subtle tradeoffs between performance and ease of use.</P>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<P>Occasional conversations with both Steinar Bang and Michi Henning over the past few years helped shape the contents of this column.</P>

<H3><FONT COLOR="#000080">References</FONT></H3>

<P><a name="1"></a>[1] D.C. Schmidt and S. Vinoski. &quot;The History of the OMG C++ Mapping,&quot; <I>C/C++ Users Journal</I>, November 2000, <b>http://www.cuj.com/experts/1811/vinoski.html</b>.</P>
<P><a name="2"></a>[2] Object Management Group. IDL C++ Language Mapping, 1999, <b>http://www.omg.org/technology/documents/formal/c++.htm</b>.</P>
<P><a name="3"></a>[3] D.C. Schmidt, S. Vinoski, and N. Wang. &quot;Collocation Optimizations for CORBA,&quot; <I>C++ Report</I>, October, 1999.</P>
<P><a name="4"></a>[4] Michi Henning and Steve Vinoski. <I>Advanced CORBA Programming with C++</I>  (Addison Wesley, 1999).</P>

<p><i><B>Steve Vinoski</B> is chief architect and vice president of Platform Technologies for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of </i>Advanced CORBA Programming with C++<i>, published in January 1999 by Addison Wesley Longman.</i></p>
<p><i><B>Doug Schmidt</B> is an associate professor member at the University of California, Irvine. His research focuses on patterns, optimization principles, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded system interconnects.  He is the lead author of the book </i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects<i>, published in 2000 by Wiley and Sons.  He can be contacted at <b>schmidt@uci.edu</b>.</i></p>
</P>
</P>
</blockquote></body></html>
