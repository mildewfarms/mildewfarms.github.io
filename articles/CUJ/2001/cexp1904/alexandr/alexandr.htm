<HTML>   
     <HEAD>
<TITLE>April 2001 C++ Experts Forum/Generic&lt;Programming&gt;</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.04/tocapr.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>
<H2 ALIGN="center"><FONT COLOR="#800000">Generic&lt;Programming&gt;: Min and Max Redivivus</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrei Alexandrescu</FONT></H3>

<HR>
<BLOCKQUOTE>

<P>In January 1995, Scott Meyers, in his <I>C++ Report</I> article entitled &quot;min, max, and more&quot; <a href="#1">[1]</a>, makes a challenge to the C++ community. After a careful analysis of the macro-based implementation of <B>min</B> and <B>max</B> and a comparison with the (back then) state-of-the-art template-based implementations, he concludes:</P>

<BLOCKQUOTE><P>What, then, is the best way &#151; the <I>correct </I>way &#151; to implement <B>max</B>? In the immortal words of Tevye, &quot;I'll tell you: I don't know.&quot; Faced with the above analysis, I increasingly find myself telling people that the macro approach may well be best, and I <I>hate </I>macros. If you know of a superior way to implement <B>max</B>, please let me know.</P></BLOCKQUOTE>

<P>To the best of my knowledge, the challenge is as valid today as it was six years ago, and this article takes the challenge. But before I start, let's wrap up the previous installment of Generic&lt;Programming&gt; <a href="#2">[2]</a>.</P>

<H3><FONT COLOR="#000080">Volatile Substance Abuse?</FONT></H3>

<P>I have received much input following my February column &quot;Generic&lt;Programming&gt;: <B>volatile</B> &#151; Multithreaded Programmer's Best Friend&quot; <a href="#2">[2]</a>. As fate sometimes has it, I received most of the kudos in form of private email, while the gripes went to the Usenet newsgroups comp.lang.c++.moderated and comp.programming.threads. The ensuing debates have been fiery and lengthy, and if you have an interest in the subject, you may want to check them out. The thread is entitled &quot;volatile, was: memory visibility between threads.&quot;</P>
<P>I know I learned a lot from that thread. For one thing, the <B>Widget</B> example in the opening of the article is irrelevant. To make a long story short, there are systems (such as the POSIX-compliant ones) on which the <B>volatile</B> modifier is not needed, and there are other systems on which adding <B>volatile</B> will not help, leaving the program incorrect.</P>
<P>The most important problem with volatile correctness is that it relies on POSIX-like mutexes, and there are multiprocessor systems on which mutexes are not enough &#151; you have to use <I>memory barriers</I>. </P>
<P>Another more philosophical problem is that strictly speaking, casting <B>volatile</B> away off a variable is illegal, even if it's <I>you</I> who added the volatile qualifier yourself to apply volatile correctness! As Anthony Williams notes, a system could conceivably store volatile data in a different storage than non-volatile data so that casting addresses would behave erratically.</P>
<P>Yet another critique was that volatile correctness, while it can solve race conditions at a lower level, cannot properly detect higher-level, logical race conditions. For example, say you have an <B>mt_vector</B> class template that emulates an <B>std::vector</B>, but has properly synchronized member functions. Consider:</P>

<pre>volatile mt_vector&lt;int&gt; vec;
...
if (!vec.empty()) {
    vec.pop_back();
}</pre>

<P>The intent is to remove the last element in a vector, if any. The code above acts perfectly kosher in a single-threaded environment. If, however, you use <B>mt_vector</B> in a multithreaded program, the code might throw an exception even though <B>empty</B> and <B>pop_back</B> are properly synchronized. So the coherence of the low-level data (<B>vec</B>) is properly preserved, yet the higher-level operation is erratic. </P>
<P>At any rate, after all the discussion, I maintain my recommendation of volatile correctness as a valuable tool for detecting race conditions on systems supporting POSIX-like mutexes. But if you work on a multiprocessor system sporting memory-access reordering, you may want to peruse your compiler's documentation first. You know who you are. </P>


<P>And finally, Kenneth Chiu mentions a very interesting paper at
<b>http://theory.stanford.edu/~freunds/race.ps</b>, paper entitled, guess what,
"Type-Based Race Detection for Java." The paper describes how a small number
of additions to Java's type system make it possible for the compiler, in
conjunction with the programmer, to detect race conditions at compile time.</P>
<i>Eppur si muove</i>.


<H3><FONT COLOR="#000080">Min and Max</FONT></H3>

<P>So, let's review Scott's challenge. The macro-based <B>min</B> looks like this:</P>

<pre>#define min(a, b) ((a) &lt; (b) ? (a) : (b))
</pre>

<P>The macro works very nicely in that it's completely generic (supports any expressions for which <B>operator&lt;</B> and <B>operator?:</B> make sense). Unfortunately, <B>min</B> always evaluates one of it arguments twice, and this can lead to a lot of confusion. It just looks too much like a function in usage, and it doesn't behave like one. (For an extended discussion on the problems of <B>min</B> and of macros in general, refer to Herb's discussion <a href="#3">[3]</a>.)</P>
<P>A simple and effective template-based solution, present in the C++ Standard library, looks like this:</P>

<pre>
template &lt;class T&gt;
const T&amp; min(const T&amp; lhs, const T&amp; rhs)
{
    return lhs &lt; rhs ? lhs : rhs;
}</pre>

<P>As you see, this solution puts <B>const</B> everywhere (arguments and result), which is one of its problems. Imagine you want to do this: Increase the minimum of floating-point values <B>a</B> and <B>b</B> by two. Then you would want to write:</P>

<pre>double a, b;
...
min(a, b) += 2;</pre>

<P>This works nicely with the macro-based <B>min</B>, but not with the templated one, because you cannot modify a <B>const</B> object. As Scott notes, adding a second version:</P>

<pre>template &lt;class T&gt;
T&amp; min(T&amp; lhs, T&amp; rhs)
{
    return lhs &lt; rhs ? lhs : rhs;
}</pre>

<P>still won't work satisfactorily because the compiler won't be able to figure out mixed cases &#151; one <B>const</B> and one non-<B>const</B> argument.</P>
<P>Furthermore, templates don't play nicely with automatic conversion and promotions, which means that the following code won't compile:</P>

<pre>int a;
short int b;
...
int smallest = min(a, b); // error: can't figure out T 
                          // in template instantiation</pre>

<P>Needless to say, the macro-based <B>min</B> works nicely again with such conversions. With the template-based solution, you must write:</P>

<pre>
int smallest = min(a, int(b)); // aha, T is int</pre>

<P>The gist of providing a good <B>min</B>/<B>max</B> implementation is to obtain something that behaves much like the macros, but that doesn't share their trouble of being macros.</P>

<H3><FONT COLOR="#000080">An (Almost) Good Start</FONT></H3>

<P>The following clever solution is a nice example of out-of-the-box thinking:</P>

<pre>template &lt;class L, class R&gt;
class MinResult {
    L&amp; lhs_;
    R&amp; rhs_;
public:
    operator L&amp;() { return lhs_ &lt; rhs_ ? lhs_ : rhs_; }
    operator R&amp;() { return lhs_ &lt; rhs_ ? lhs_ : rhs_; }
    MinResult(L&amp; lhs, R&amp; rhs) : lhs_(lhs), rhs_(rhs) {}
};

template &lt;class LR&gt;
class MinResult&lt;LR, LR&gt; {
    LR&amp; lhs_;
    LR&amp; rhs_;
public:
    operator LR() { return lhs_ &lt; rhs_ ? lhs_ : rhs_; }
    MinResult(LR&amp; lhs, LR&amp; rhs) : lhs_(lhs), rhs_(rhs) {}
};

template &lt;class L, class R&gt;
MinResult min(L lhs, R rhs)
{
    return MinResult(lhs, rhs);
}</pre>

<P>The partial specialization <B>MinResult&lt;LR, LR&gt;</B> is needed to consolidate the two conversion operators in one &#151; otherwise, <B>operator L&amp;</B> and <B>operator R&amp;</B> would form a duplicate definition.</P>
<P>The <B>MinResult</B>-based solution delays the computation until it's needed and performs it &quot;lazily&quot; right before the result is fetched. For example, the code:</P>

<pre>
int a, b;
...
min(a, b);</pre>

<P>doesn't really do anything, and if you're the pensive type, such code might make you cogitate on the concept of a tree falling in the forest. On the other hand, if you type:</P>

<pre>
int c = min(a, b);</pre>

<P>the compiler invokes <B>operator int&amp;</B> for the temporary <B>MinResult&lt;int, int&gt;</B> object returned by <B>min</B>, the operator which performs the calculation and returns the correct result.</P>
<P>In spite of the fact that you can fix the <B>const</B>-related issues (ignored above) quite nicely, the <B>MinResult</B>-based solution is not satisfactory due to ambiguity problems. Consider:</P>

<pre>
int a;
short int b;
extern Fun(int);
extern Fun(short int);
...
Fun(min(a, b)); // error! Don't know which overload to invoke!</pre>

<P><B>MaxResult&lt;int, short int&gt;</B> supports <I>two</I> conversions: to <B>int&amp;</B> and to <B>short int&amp;</B>. Consequently, the compiler is equally motivated to invoke any of the two overloads of <B>Fun</B> and, like Buridan's donkey, dies in between two equally attractive options. Again, the macro-based solution passes this test, too &#151; the code invokes <B>Fun(int)</B> as you would expect.</P>

<H3><FONT COLOR="#000080">Quest for a Type</FONT></H3>

<P>What would genuinely solve the problem would be a device that, given two types <B>L</B> and <B>R</B>, computes the proper type of <B>min(L, R)</B>. For example, if <B>L</B> is <B>char</B> and <B>R</B> is <B>int</B>, the result should be <B>int</B>, and so on. Assuming we have such a device (let's call it <B>MINTYPE</B>), we can write the definitive solution to <B>min</B> as <I>four</I> functions:</P>

<pre>template &lt;class L, class R&gt;
MINTYPE(L, R) 
Min(L&amp; lhs, R&amp; rhs)
{ return lhs &lt; rhs ? lhs : rhs; }

template &lt;class L, class R&gt;
MINTYPE(const L, R) 
Min(const L&amp; lhs, R&amp; rhs)
{ return lhs &lt; rhs ? lhs : rhs; }

template &lt;class L, class R&gt;
MINTYPE(L, const R)
Min(L&amp; lhs, const R&amp; rhs)
{ return lhs &lt; rhs ? lhs : rhs; }

template &lt;class L, class R&gt;
MINTYPE(const L, const R) 
Min(const L&amp; lhs, const R&amp; rhs)
{ return lhs &lt; rhs ? lhs : rhs; }</pre>

<P>The four overloads of <B>Min</B> correspond to the four possible combinations between <B>const</B> and non-<B>const</B> arguments.</P>
<P>So far, so good, but how to define <B>MINTYPE</B>? Well, a consecrated technique for type computation is traits <a href="#4">[4]</a>. Indeed, we can use traits to figure out <B>Min</B>'s type like so:</P>

<pre>#define MINTYPE(L, R) typename MinTraits&lt;L, R&gt;::Result

template &lt;class L, class R&gt; struct MinTraits;

// Specialization for the L == R case
template &lt;class LR&gt; struct MinTraits&lt;LR, LR&gt; {
    typedef LR&amp; Result;
};

// Specialization for bool and char
template &lt;&gt; struct MinTraits&lt;bool, char&gt; {
    typedef char Result;
};

...</pre>

<P>That works, provided you write an awful lot of code. There are 14 arithmetic types, and you have to write specializations of <B>MinTraits</B> for all combinations thereof. Then you have to add the <B>const</B> variants in. There are tricks you can do to simplify this task, like using, well, um, macros, but it's still not a very elegant solution.</P>
<P>Even then, the solution is incomplete. You have to take pointers and user-defined classes into account. Plus, what about calling <B>Min</B> for base and derived classes? Consider you define a class <B>Shape</B> and define <B>operator&lt;</B> to order <B>Shape</B> objects by their area. </P>

<pre>class Shape {
    ...
    unsigned int Area() = 0;
};

bool operator&lt;(const Shape&amp; lhs, const Shape&amp; rhs) {
    return lhs.Area() &lt; rhs.Area();
}

class Rectangle : public Shape { ... };

void Hatch(Shape&amp; shape)
{
    Rectangle frame;
    ...
    Shape&amp; smallest = Min(shape, frame);
    ... use smallest ... 
}</pre>

<P>Now really, wouldn't it be nice if <B>Min</B> invoked above would magically figure out that <B>Rectangle</B> derives from <B>Shape</B> and return a reference to <B>Shape</B>? That would make a lot of sense because a reference to <B>Rectangle</B> is automatically convertible to a reference to <B>Shape</B>.</P>
<P>But... by the time you start to wish this, you dream of <I>more</I> than what the macro could give. The macro doesn't work correctly in the example above, because the expression:</P>

<pre>shape &lt; frame ? shape : frame</pre>

<P>converts both parts to the same type, so it is equivalent to:</P>

<pre>shape &lt; frame ? shape : Shape(frame)</pre>

<P>which doesn't do what we want. (Instead, it does a very bad thing called slicing.)</P>
<P>This article implements <B>Min</B> so that you get every nice thing you could have possibly gotten from the macro-based version, <I>plus more</I>. Better yet, the implementation has a reasonable size &#151; about 80 lines of code in all (<B>Max</B> included, too). Interested? Reheat that coffee in the microwave and let's talk.</P>

<H3><FONT COLOR="#000080">Loki</FONT></H3>

<P>Okay, I lied. There are 80 lines of code only if you don't count the library. More specifically, the code uses Loki, a generic library that's featured in my upcoming book <a href="#5">[5]</a>. Among other things, Loki provides advanced type manipulation means. The tools in Loki used by <B>Min</B> are:</P>
<OL><LI><I>Typelists</I>. Typelists <a href="#6">[6]</a> offer you what you'd expect from regular lists, except that they don't hold values &#151; typelists hold types. For example, the construct:
<pre>typedef TYPELIST_3(float, double, long double) FloatingPointTypes;</pre>
builds a typelist containing three types and stores it in <B>FloatingPointTypes</B>. Given a typelist such as <B>FloatingPointTypes</B> and an arbitrary type <B>T</B>, you can find out on what position, if any, <B>T</B> is in that typelist by using the compile-time algorithm <B>Loki::TL::IndexOf</B>. For example:

<pre>Loki::TL::IndexOf&lt;FloatingPointTypes, double&gt;::value</pre>

evaluates to 1. If the type is not found in the typelist, the result is -1.
<LI>The second tool we'll use is the <B>Select</B> class template, which is thoroughly described in <a href="#7">[7]</a>. In short, <B>Select</B> allows you to select one of two types, based upon a compile-time Boolean constant. For example:
<pre>typedef Loki::Select&lt;sizeof(wchar_t) &lt;
    sizeof(short int), wchar_t, short int&gt;::Result
    SmallInt;</pre>
defines <B>SmallInt</B> to be the smallest integral type among <B>wchar_t</B> and <B>short int</B>.
<LI><B>TypeTraits</B> is a class template that makes all kind of deductions about a type, such as &quot;Is this type a pointer? To what does it point to?&quot; etc. We'll use only the <B>NonConstType</B> type definition inside <B>TypeTraits</B>. <B>TypeTraits&lt;T&gt;::NonConstType</B> is a <B>typedef</B> that removes the <B>const</B> qualifier, if any, from <B>T</B>. 
<LI>Last, but not least, we'll use the <B>Conversion</B> class described in <a href="#7">[7]</a>, a class that detects whether an arbitrary type can be implicitly converted to another. <B>Conversion</B> is the cornerstone to implement the magic mentioned above regarding <B>Shape</B> and <B>Rectangle</B>.
</OL>

<H3><FONT COLOR="#000080">The <B>MinMaxTraits</B> Class Template</FONT></H3>

<P>To simplify type computation, I established a simple linear hierarchy on arithmetic types. Basically I put all arithmetic types in a specific order, and I postulated that the type of <B>Min</B>'s result is the type that's toward the bottom of the list. Here's the list by the way (ignore the <B>const</B> for now):</P>

<pre>namespace Private
{
    typedef TYPELIST_14(
            const bool,
            const char,
            const signed char,
            const unsigned char,
            const wchar_t,
            const short int,
            const unsigned short int,
            const int,
            const unsigned int,
            const long int,
            const unsigned long int,
            const float,
            const double,
            const long double)
        ArithTypes;
}</pre>

<P>In essence, unsigned types come after signed types, larger types come after smaller types, and floating-point types come after integral types. For example, if you pass <B>Min</B> a <B>long int</B> and a <B>double</B>, the result will have type <B>double</B>, because <B>double</B> is after <B>long int</B> in the <B>ArithTypes</B> list.</P>
<P>Now the general algorithm for figuring out <B>Min</B>'s result type, if you pass it two non-reference types <B>L</B> and <B>R</B>, is as follows:</P>

<UL>
<LI>Assume the <B>Result</B> is <B>R</B>.
<LI>If an <B>R</B> can be implicitly converted to an <B>L</B>, then change <B>Result</B> to <B>L</B>.
<LI>If <B>L</B> and <B>R</B> are arithmetic types and <B>R</B> comes after <B>L</B> in <B>Private::ArithTypes</B> above, change <B>Result</B> to <B>R</B>. This step takes care of all the math conversions.
<LI>If an <B>L&amp;</B> can be automatically converted to an <B>R&amp;</B> without the conversion involving a temporary, then change <B>Result</B> to <B>R&amp;</B>. This step ensures that calls such as <B>Min(frame, shape)</B> return a <B>Shape&amp;</B>.
<LI>If an <B>R&amp;</B> can be automatically converted to an <B>L&amp;</B> without the conversion involving a temporary, then change <B>Result</B> to <B>L&amp;</B>. This step ensures that calls such as <B>Min(shape, frame)</B> return a <B>Shape&amp;</B>.</UL>

<P>You can see <B>MinMaxTraits</B>' implementation in the downloadable code. The hardest part is to figure out the &quot;without the conversion involving a temporary&quot; part in the algorithm above.
In essence, <b>T</b> is convertible to <b>U</b> without a temporary if a
reference to non-<b>const</b> <b>T</b> is convertible to a reference to non-<b>const</b> <b>U</b>.</P>

<H3><FONT COLOR="#000080">The <B>Min</B> and <B>Max</B> Overloads</FONT></H3>

<P>There are four <B>Min</B> and four <B>Max</B> overloads, corresponding to the four combinations of <B>const</B> and non-<B>const</B> argument types. To avoid the slicing problem discussed in the <B>Shape</B>/<B>Rectangle</B> example above, <B>Min</B> has a body that's slightly different from the classic <B>a &lt; b ? a : b</B>. Here it is:</P>

<pre>
template &lt;class L, class R&gt;
typename MinMaxTraits&lt;L, R&gt;::Result
Min(L&amp; lhs, R&amp; rhs)
{ if (lhs &lt; rhs) return lhs; return rhs; }

template &lt;class L, class R&gt;
typename MinMaxTraits&lt;const L, R&gt;::Result
Min(const L&amp; lhs, R&amp; rhs)
{ if (lhs &lt; rhs) return lhs; return rhs; }

... two more overloads ...
.. similar Max implementation ... </pre>

<P>The two <B>return</B> statements ensure proper conversions without slicing. The four overloads cover mixed cases such as <b>Min(a +b, c + d)</b> or <b>Min(a +b, 5)</b>.</P>

<H3><FONT COLOR="#000080">Analysis</FONT></H3>

<P>Let's see how the newly developed <B>Min</B> satisfies Scott Meyers' requirements. He asks that a good <B>Min</B>/<B>Max</B> implementation do the following four things:</P>
<OL><LI>Offers function call semantics (including type checking), not macro semantics. <B>Min</B> obviously does that.
<LI>Supports both <B>const</B> and non-<B>const</B> arguments (including mixing the two in a single call). Thanks to the four overloads, <B>Min</B> supports any combinations of <B>const</B> and non-<B>const</B> arguments.
<LI>Supports arguments of different types (where that makes sense). <B>Min</B> does support arguments of different types and actually has a fair amount of intelligence that's inaccessible to both the macro and the simple templated solution: <B>Min</B> disambiguates between various arithmetic types like a champ and takes initiative in performing conversions that make sense. The conversion selection process (based upon <B>Private::ArithTypes</B>) is under the control of the library writer. 
<LI>Requires no explicit instantiation. <B>Min</B> doesn't need explicit instantiation.
</OL>

<P><B>Min</B> works properly with pointers (even pointers pointing to different, but related, types, such as <B>Shape*</B> and <B>Rectangle*</B>). This is due to the first step in the algorithm.</P>
</P>A remarkable feature of <b>Min</b> is that it deduces its result type by using an
algorithm that you can configure, as opposed to staying inside a predefined
type system. If you find the algorithm unsatisfactory, you can tweak it to
do pretty much what you want, including semantics-directed typing. For
example, the minimum between an <b>unsigned char</b> and an <b>unsigned int</b> will
always have the type <b>unsigned char</b>, because <b>unsigned char</b>'s range is
included in <b>unsigned int</b>'s range. You can achieve such "smart" typing by
changing the type deduction algorithm.</P>

<P>It would all be so nice, but there's a little detail worth mentioning. Sadly, <b>Min</b> doesn't work with any compiler I have access to. In fairness,
each compiler chokes on a different piece of code. I know the code is
correct because a loosely-defined reunion of compilers would compile it, but
then I haven't seen a working example yet. So if you have access to a modern
compiler and could give the code a try, please let me know.</P>

<H3><FONT COLOR="#000080">Look Ahead in Anger</FONT></H3>

<P>These days I'm reading <i>The Age of Spiritual Machines</i> by Ray Kurzweil <a href="#8">[8]</a>. Kurzweil argues, and rather convincingly, that in the 2020s you'll be able to buy a machine with the power of a human brain for $1,000.</P>
<P>Well I can't repress a smile when thinking of how people &#151; or maybe myself, hopefully only a bit older and a lot wiser &#151; will look at this article in 20 years. &quot;Amazing, in 2001 these guys were having trouble implementing generically the <B>min</B> and <B>max</B> no-brainers in the most popular programming language of the time. Hah, it took this guy an entire article and some esoteric techniques to get <B>min</B> and <B>max</B> right.&quot;</P>
<P>Maybe <B>min</B> and <B>max</B> aren't important? I'd argue to the contrary. Minimum and maximum are two simple concepts present both in math and in the real life. If a programming language is unable to express simple concepts of math and life, then there is something deeply wrong with that language. "Mom, I don't care about vocabulary and grammar. I just want to write poetry!" If you have to throw in a couple of temporaries and write &quot;<B>a &lt; b ? a : b</B>&quot; when you actually think &quot;<B>min(expr1, expr2)</B>&quot;, it means that you have a serious problem: you work with a machine that's able to compute the minimum of any two expressions, but is unable to express the <I>concept</I> of minimum.</P>
<P>There is something wrong here, isn't there? And C++ is not the only one to blame. Java and C#, two newer and supposedly superior languages, are utterly impotent at expressing <B>min</B> and <B>max</B> because, you know, <B>min</B> and <B>max</B> are not objects.</P>
<P>Maybe in the future this period will be called the &quot;object frenzy.&quot; Who knows... but I can't help asking with chagrin: <I>&quot;Quo Vadis, Programmatorae?&quot;</I></P>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<P>Many thanks are due to all participants in the <b>volatile</b>-related thread on the Usenet, especially Dave Butenhof, Kenneth Chiu, James
Kanze, Kaz Kylheku, Tom Payne, and David Schwartz.</P>

<H3><FONT COLOR="#000080">Bibliography</FONT></H3>

<P><a name="1"></a> [1]  <b>http://aristeia.com/Papers/C++ReportColumns/jan95.pdf</b></P>
<P><a name="2"></a> [2]  <b>http://cuj.com/experts/1902/alexandr.html</b></P>
<P><a name="3"></a> [3]  <b>http://www.gotw.ca/gotw/077.htm</b></P>
<P><a name="4"></a> [4]  A. Alexandrescu. "Traits: the else-if-then of Types," <I>C++ Report</I>, April 2000.</P>
<P><a name="5"></a> [5]  A. Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley Longman, 2001).</P>
<P><a name="6"></a> [6]  J. Vlissides and A. Alexandrescu. &quot;To Code or Not to Code,&quot; <I>C++ Report</I>, March 2000.</P>
<P><a name="7"></a> [7]  A. Alexandrescu. &quot;Generic&lt;Programming&gt;: Mappings between Types and Values,&quot; <I>C/C++ Users Journal Experts Forum</I>, September 2000, <b>http://www.cuj.com/experts/1810/alexandr.html</B>.</P>
<P><a name="8"></a> [8]  R. Kurzweil. <i>The Age of Spiritual Machines: When Computers Exceed Human Intelligence</i> (Penguin USA, 2000).

<h4><a href="../../../source/2001/apr01/alexandr.zip"></a></h4>

<p><i><b>Andrei Alexandrescu</b> is a Development Manager at RealNetworks Inc. (www.realnetworks.com), based in Seattle, WA, and author of the acclaimed book </i>Modern C++ Design<i>. He may be contacted at <b>andrei@metalanguage.com</b>. Andrei is also one of the featured instructors of The C++ Seminar (<b>www.gotw.ca/cpp_seminar</b>).</i></p>
</blockquote></body></html>


