<HTML><HEAD>
<TITLE>April 2001 C++ Experts Forum/The Standard Librarian/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:  Class rangebuf</A></h4>
<pre>
#include &lt;streambuf&gt;
#include &lt;ios&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;

template &lt;class FwIter&gt;
class rangebuf : public std::streambuf {
private:
  FwIter first;
  FwIter last;
  FwIter current;

  enum { bufsize = 128 };
  char buf[bufsize];

  void fill_buffer();

public:
  rangebuf(FwIter f, FwIter l);

protected:
  pos_type seekoff(off_type off, std::ios::seekdir way,
                   std::ios::openmode which);
  pos_type seekpos(pos_type pos, std::ios::openmode which);
  
  int underflow();
  int pbackfail(int c);
};

template &lt;class FwIter&gt;
rangebuf&lt;FwIter&gt;::rangebuf(FwIter f, FwIter l)
  : std::streambuf(),
    first(f), last(l), current(f)
{
  fill_buffer();
}

template &lt;class FwIter&gt;
void rangebuf&lt;FwIter&gt;::fill_buffer()
{
  ptrdiff_t len = std::distance(current, last);
  ptrdiff_t n = std::min(len, ptrdiff_t(bufsize));
  FwIter tmp = current;
  std::advance(tmp, n);
  std::copy(current, tmp, buf);
  setg(buf, buf, buf + n);
}

template &lt;class FwIter&gt;
int rangebuf&lt;FwIter&gt;::underflow() {
  std::advance(current, egptr() - eback());
  fill_buffer();
  return gptr() != egptr()
    ? static_cast&lt;int&gt;(static_cast&lt;unsigned char&gt;(*gptr()))
    : EOF;
}

template &lt;class FwIter&gt;
int rangebuf&lt;FwIter&gt;::pbackfail(int c) {
  if (gptr() == eback() &amp;&amp; current != first) {
    FwIter tmp = first;
    std::advance(tmp, std::distance(first, current) - 1);
    current = tmp;
    fill_buffer();
    gbump(1);
  }

  if (gptr() == eback() || (c != EOF &amp;&amp; c != *(gptr() - 1)))
    return EOF;
  else {
    gbump(-1);
    return static_cast&lt;unsigned char&gt;(*gptr());
  }
}

template &lt;class FwIter&gt;
std::streambuf::pos_type
rangebuf&lt;FwIter&gt;::seekoff(off_type off, std::ios::seekdir way,
                          std::ios::openmode which) {
  switch(way) {
  case std::ios::beg:
    return seekpos(pos_type(off), which);
  case std::ios::cur:
    return seekpos(pos_type(off + std::distance(first, current)),
                   which);
  case std::ios::end:
    return seekpos(pos_type(off + std::distance(first, last)), 
                   which);
  default:
    return pos_type(off_type(-1));
  }
}

template &lt;class FwIter&gt;
std::streambuf::pos_type
rangebuf&lt;FwIter&gt;::seekpos(pos_type pos, std::ios::openmode which) {
  if (which != std::ios::in)
    return pos_type(off_type(-1));

  off_type offset = off_type(pos);
  if (offset &lt; 0 || offset &gt; std::distance(first, last))
    return pos_type(off_type(-1));

  FwIter tmp = first;
  std::advance(tmp, offset);
  current = tmp;
  fill_buffer();

  return pos;
}
</pre>
</BODY></HTML>



