<HTML>   
     <HEAD>
<TITLE>April 2001 C++ Experts Forum/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.04/tocapr.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Stringstreams and Their Friends</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<HR>
<BLOCKQUOTE>

<P>How do you convert a number to a string, or a string to a number?  Or, to phrase the question a little more precisely: how do you obtain a number's textual representation, and how do you parse a sequence of characters to get a numeric value?</P><P>In C, the usual answer would be to use <B>sprintf</B> and <B>sscanf</B>. These functions have the same syntax as <B>printf</B> and <B>scanf,</B> except that each of them takes an additional argument, a pointer to an array of characters.  Just as <B>printf</B> formats its arguments and writes to standard output, so <B>sprintf</B> formats its arguments and writes an array of characters. Just as <B>scanf</B> obtains characters from standard input and parses them according to its format string, so <B>sscanf</B> reads from and parses the array of characters that it is passed.</P><P>C++ also has a mechanism that reuses the familiar syntax of I/O.  It differs from <B>sprintf</B>/<B>sscanf</B> in two ways.  First, where the C mechanism is a variation of <B>printf</B> and <B>scanf</B>, the C++ mechanism is a variation of iostreams.  Second, where the C mechanism uses null-terminated arrays of characters, the C++ mechanism uses <B>std::string</B>.</P>
<H3><FONT COLOR="#000080">Stringstreams</FONT></H3>

<P>C++'s mechanism uses classes called <B>std::istringstream</B> and <B>std::ostringstream</B>.  They're defined in the standard header <B>&lt;sstream&gt;</B>, and they work just the same way as ordinary <B>istream</B> and <B>ostream</B>.  For formatting you create an <B>ostringstream</B>, write to it using <B>operator&lt;&lt;</B> (you have access to the full set of overloaded operators and manipulators, of course), and then retrieve a copy of the <B>string</B> object using the <B>str</B> member function.  You don't have to worry about buffer overruns, since <B>ostringstream</B> manages buffers automatically and expands them as needed. For example:</P>
<pre>
double pi = 3.14159265;
std::ostringstream os;
os &lt;&lt; "pi = "
   &lt;&lt; std::setprecision(3)
   &lt;&lt; pi;
                     
std::string line = os.str();
assert(line == "pi = 3.14");
</pre>

<P>Similarly, to parse a string that already exists, you create an <B>istringstream</B> object that uses that string, and then you read from it using <B>operator&gt;&gt;</B> the same way that you would read from any ordinary <B>istream</B>:</P>
<pre>
std::string s("17 42");
std::istringstream in(s);

int i, j;
in &gt;&gt; i &gt;&gt; j;

assert(i == 17);
assert(j == 42);
</pre>

<P>These classes are useful precisely because they're so simple.  You don't have to learn a new syntax; everything you already know about <B>istream</B> and <B>ostream</B> is still true of <B>istringstream</B> and <B>ostringstream</B>.  There are, however, a few advanced <B>stringstream</B> features that you may sometimes find useful.</P><P>First, like the rest of the C++ I/O library, string streams are templatized: <B>std::ostringstream</B>, for example, is an alias for <B>std::basic_ostringstream&lt;char, char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;</B>.  If you want to write to a string with a different kind of character type, you can still use this same mechanism.  To represent a number as a <B>utf16</B> string, for example (if you have defined your own <b>utf16</b> character type, that is; there isn't any
class by that name in the Standard C++ library):</P>
<pre>
std::basic_ostringstream&lt;utf16&gt; os;
os &lt;&lt; 42;
std::basic_string&lt;utf16&gt; s = os.str();
</pre>

<P>Second, just as you can use a constructor to initialize the string that <B>istringstream</B> reads from, you can also use a constructor to initialize the string that <B>ostringstream</B> writes to; you don't have to start with an empty string.  For example:</P>
<pre>
std::basic_ostringstream os("x = ");
assert(os.str() == "x = ");

os.seekp(0, std::ios::end);

os &lt;&lt; 42;
assert(os.str() == "x = 42");
</pre>

<P>Yes, that ugly looking <b>seekp</b> is necessary: you have to tell <b>ostringstream</b> that you want to move the write position so that it points to the end of the string.  If you leave it out, <B>ostringstream</B> will start writing at the beginning of the string and will overwrite the characters you've already got; you'll end up with <B>"42= "</B>, which is probably not what you want.  Overwriting and appending are both legal; <B>ostringstream</B> will append if you seek to the end, overwrite in the middle if you seek to somewhere in the middle, and overwrite at the beginning if you seek to the beginning.  (The C++ Standard says that the write position points to the beginning by default, but, since some implementations get the default write position wrong, it's safer not to rely too heavily on that requirement.  If you need the write position to be set to the beginning, you can say so explicitly with <B>os.seekp(0, std::ios::beg)</B>.)</P><P>Third, in addition to <B>istringstream</B> and <B>ostringstream</B>, there's also a <B>stringstream</B> class that can be used for both reading and writing.  Again, if you're using a read/write class like <B>stringstream</B>, you have to be careful to set the read and write positions so that you're referring to the part of the string that you expect to.</P><P> Finally, if you've been using C++ for a long time, you may have also heard of something called <B>strstream</B>.  <B>Strstream</B> is similar to <B>stringstream</B>, but it works with character arrays instead of with <B>std::string</B>.  Don't use it; this isn't an advanced feature, just an obsolete one.  It's still in the C++ Standard, but it has been deprecated &#151; and for good reason.  Since <B>strstream</B> works with character arrays, it requires complicated memory allocation and deallocation protocols.  <B>Strstream</B> is hard to use, and even harder to use correctly.</P>
<H3><FONT COLOR="#000080">String Buffers</FONT></H3>

<P>We've now seen more than enough to answer the initial question of how to represent a number as a string &#151; or, indeed, how to represent almost anything as a string.  It's easy to write an <B>as_string</B> function</P>
<pre>
template &lt;class X&gt;
std::string as_string(const X&amp; x)
{
  std::ostreambuf os;
  os &lt;&lt; x;
  return os.str();
}
</pre>

<P>that operates on <B>int</B>, <B>double</B>, <B>std::complex&lt;&gt;</B>, and any other type for which the output operator is defined.  If you can write it to an output stream, you can represent it as a string.</P><P>All of this goes back to the central organizing principle of the C++ I/O library.  As I have written in earlier columns [<a href="#1">1</a>, <a href="#2">2</a>], the fundamental idea is simple: formatting decisions are made by locale facets, individual characters are fetched or stored by stream buffer classes, and the high-level stream classes you interact with directly, like <B>std::ostream</B> and <B>std::ostringstream</B>, are relatively simple wrappers that manage locales and stream buffers.  </P><P>A class like <B>std::ostringstream</B>, which inherits from <B>std::ostream</B>, is literally just a dozen or two lines of code.  It has a member variable of type <B>std::stringbuf</B>, it has a constructor that sets up the stream to use that <B>stringbuf</B> as the stream's buffer, and it has a one-line wrapper function, <B>str</B>, that does nothing but invoke <B>stringbuf::str</B>.  Everything that's interesting about string-based streams, everything that makes them different from, say, file-based streams, is contained in <B>stringbuf</B>.  If <B>ostringstream</B> didn't exist, but <B>stringbuf</B> did, it wouldn't matter very much.  It would just mean that you'd need to do a tiny bit more typing, because creating a string-based stream object would take two lines instead of one:</P>
<pre>
std::stringbuf buf;
std::ostream os(&amp;buf);
</pre>

<P>You can do the same thing with any stream buffer class that you write.</P><P>The reason I belabor this point is that the Standard C++ library was designed to be user-extensible, and, to use it effectively, you need to know the ways in which it was intended to be extended.  For the C++ I/O library, there's often a simple answer: if you want to change the behavior of the system in some way, the first thing you should think about is whether you can do it writing a new kind of stream buffer.</P><P>Stream buffers provide two different interfaces.  One interface is seen by the outside world, by classes like <B>istream</B> and <B>ostream</B>: it consists of public nonvirtual member functions like <B>sbumpc</B>, for reading a character, and <B>sputc</B>, for writing a character.  The other interface is used by classes that inherit from <B>streambuf</B>.  This interface exposes an array of characters for reading and one for writing. It consists of protected nonvirtual member functions that manipulate these arrays, and protected virtual member functions that use them. Those protected virtual functions include <b>underflow</b>, which is called when the read buffer is empty and needs to be filled with new characters, and <b>overflow</b>, which is called when the write buffer is full and the characters in it must be written to the output.  If you're using an existing stream buffer class, you need only know about the public interface, and if you're writing a new stream buffer class, you need only know about the protected interface; writing a custom stream buffer is just a matter of inheriting from <B>std::streambuf</B> and overriding a handful of virtual member functions.</P><P><B>Stringbuf</B> is a stream buffer where the read and write arrays are connected to an in-memory data structure, a <B>string</B>.  That's an important idea: the I/O mechanism doesn't just have to be used for external devices.  It's also an idea that can be generalized.</P>
<H3><FONT COLOR="#000080">Generalized String Buffers</FONT></H3>

<P>Strings get stored in all sorts of ways, not just as <B>std::string</B> objects!  You may find yourself using a segmented data structure, SGI's nonstandard <B>rope</B> class where strings are represented as trees, arrays of <B>char</B>, <B>std::vector&lt;char&gt;</B>, a string table, or a third-party string class that's a binary interface to some other library.  You can use <B>stringbuf</B> (either directly or via <B>istringstream</B> and <B>ostringstream</B>) to connect the C++ I/O mechanism to one kind of in-memory data structure, <B>std::string</B>.  If you want to connect C++ I/O to any other kind of in-memory data structure, you need a different kind of stream buffer class.  </P><P>No single class suffices for all of these different data structures, of course, but, using the STL vocabulary of iterators and containers, we can write a stream buffer class that's general enough for many uses.</P><P>Actually, I'm going to show two stream buffer classes instead of one.  The stream buffer classes in the C++ Standard (<B>stringbuf</B> and <B>filebuf</B>) use a single class for both reading and writing, but there's no reason for you to write your own stream buffers that way; you can write a stream buffer that is only used for reading, or that is only used for writing.  For the most part, in my opinion, you usually should.  It'll simplify your code (interleaving reads and writes on the same stream requires a lot of work to keep things consistent), and it'll give you more interface options.</P><P>If we're reading characters from a data structure that has anything like an STL interface, the one thing we're guaranteed is that the characters will be provided as a range of iterators; this covers <B>string</B>, <B>rope</B>, <B>vector&lt;char&gt;</B>, C arrays, and probably most other useful data structures.  Let's look at a stream buffer class that reads characters from a range of forward iterators.  (Even that may be more general than we really need: restricting ourselves to random access iterators would probably be good enough.  However, generalizing to forward iterators is so easy that there's no reason not to do it.)</P><P>Public member functions like <B>sgetc</B> and <B>sbumpc</B>, defined in the base class <B>std::streambuf</B>, operate on some internal array of characters.  This array is characterized by three pointers: <B>eback</B>, <B>gptr</B>, and <B>egptr </B>(the beginning of the array, our current position within it, and the end).  The virtual member functions that we override in the derived class only get called when we need special processing.  At a minimum, we need to override <B>underflow</B>, which is called when we have reached the end of the array (<B>gptr</B> is equal to <B>egptr</B>) and the user has requested another character.</P><P>In principle we have three choices:</P>
<UL>
<LI>Keep the internal array empty.  This implies that <B>underflow</B> will be called every time the user asks for another character: it can simply be a matter of iterator dereference and increment.</LI>
<LI>Allocate an internal array that's large enough to hold all of the characters in the range.  This implies that <B>underflow</B> won't get called until we get to the end of the range; at that point it should always return <B>EOF</B>, because there won't ever be any more characters for it to fetch.</LI>
<LI>Maintain a small fixed-size internal buffer.  When <B>underflow</B> gets called, we move to a new position in the sequence and fill the buffer again.</LI>
</UL>


<P>The third choice is the most complicated, but it's also the only one that's fully satisfactory.  The first choice would require a virtual function call for every character, with dreadful implications for speed, and the second would often require allocating and copying a large chunk of memory when all we want to do is read a few characters.</P><P>Fortunately, even the third choice isn't very complicated.  We just have to maintain a single class invariant: the characters in the range <B>[gptr(), egptr())</B> are the same as the characters in the range <B>[current, current + N)</B>, where <B>current</B> is our position within the original range of iterators and where <B>N</B> is the smaller of the buffer size and the number of characters remaining in that original range.  When it's time to replenish our buffer, we bump up <B>current</B> by <B>N</B>, copy characters from <B>[current, current  + N)</B> into the buffer, and use the protected member function <B>setg</B> to tell the base class the new values of the <B>eback</B>, <B>gptr</B>, and <B>egptr</B> pointers.  </P><P>That's enough so that we can read characters; we get two more features &#151; repositioning and putback &#151; by overriding three more virtual functions: <B>pbackfail</B>, <B>seekoff</B>, and <B>seekpos</B>.  (For our purposes, the difference between <B>seekoff</B> and <B>seekpos</B> is mainly a minor syntactic one.  They're separate functions to allow for the possibility of file I/O; on some operating systems, it's impossible to represent a file position as a numeric offset.)  Again, the details aren't very complicated: we just shift the frame by manipulating current appropriately and filling up the buffer. The complete definition of <B>rangebuf</B> is shown in <a href="list1.htm">Listing 1</a>.</P>
<P>There's one last refinement we can make.  I rejected the choice of stuffing the entire input range into the <B>rangebuf</B>'s internal buffer, but there's one special case where it makes more sense than any other alternative: when the input range we're dealing with consists of pointers to characters.  In that case, we just set <B>eback</B> to the beginning of the range and <B>egptr</B> to the end, and we'll never have to worry about copying characters or shifting frames.  The natural way to handle this special case is by template specialization, and that specialization is shown in <a href="list2.htm">Listing 2</a>.</P>
<P>(As an aside, you may have noticed an interesting fact about this specialization of <B>rangebuf</B>: you can use it to blur the distinction between file I/O and in-memory I/O.  Most operating systems &#151; including Unix and Windows &#151; allow you to "memory map" a file so that you can get pointers to it the same way that you get pointers to ordinary memory.  Combine memory mapping and <B>rangebuf</B>, and you've got a buffer for file input.  It has fewer features than the standard C++ library <B>filebuf</B> class that came with your compiler, but as a result it's far smaller and simpler and probably faster.  If you don't need <B>filebuf</B>'s advanced features, and if you care about performance, something like <B>rangebuf</B> may be a good choice.)</P><P>Compared to input, output is both simpler and more idiosyncratic.  We could write a fairly general input class, <B>rangebuf</B>, because it's almost always possible to provide access to data as a range of read-only iterators.  Data modification takes far more forms, and I'm only going to present one of them: appending to a container that conforms to the STL's Sequence interface.  This is enough to cover <B>string</B>, <B>vector&lt;char&gt;</B>, and <B>rope</B>, but there are also a great many things it doesn't cover.</P><P>There's no such thing as "putback" for output, and, since we're only appending instead of writing to arbitrary places in the middle, we don't have to worry about overriding the virtual functions for seeking.  At this point, the class <B>sequencebuf</B>, shown in <a href="list3.htm">Listing 3</a>, shouldn't seem very unfamiliar.  We maintain a small fixed-size buffer.  When it gets full, <B>overflow</B> gets called automatically, and <B>overflow</B> appends the contents of that internal buffer to the sequence we're managing.  The user can look at that sequence by calling <B>get_seq</B>.</P><P>In <B>sequencebuf</B>, we use <B>pbase</B>, <B>pptr</B>, and <B>epptr</B> instead of <B>eback</B>, <B>gptr</B>, and <B>egptr</B>; we use <B>setp</B> instead of <B>setg</B>, but those differences are fairly unimportant.  There's another difference &#151; a fundamental difference between input and output &#151; that's more important.  Output  buffers can be flushed.  In this case, flushing means appending our internal buffer to the sequence we're writing to, whether that internal buffer is full or not.  Users can flush buffers explicitly, and sometimes (as, for the <B>sequencebuf</B> class, when a user asks to see the sequence) we have to make sure that the buffers get flushed automatically.</P>

<H3><FONT COLOR="#000080">Conclusions</FONT></H3>

<P>On Usenet, people often ask questions like "How can I write a stream class that will do...?"  Usually there can be no answer, because it's the wrong question. The right question is how to write a stream buffer class that does something special.  And usually the answer is that, if you're willing to focus on your specific needs instead of trying for complete generality, writing that stream buffer isn't very complicated.  For input you need to override <B>underflow</B>, which makes a read position available when there was none, and for output you need to override <B>overflow</B>, which makes a write position available when there was none.  For more details it's better to look at code, like Listings <a href="list1.htm">1</a> and <a href="list3.htm">3</a> from this column, than to try to read the words in the C++ Standard. What the Standard has to say about <B>streambuf</B>'s virtual functions is confusing and makes them seem more complicated than they really are.</P><P>The Standard C++ library provides a stream buffer class, <B>std::stringbuf</B>, that uses an <B>std::string</B> for input and output.  That's an important idea: it's a convenient interface for changing data representation, and it allows you to format data items for display in some way that doesn't fit into conventional file I/O.  By using your own in-memory stream buffer classes, you can generalize this important idea to other kinds of data structures.</P>
<H3><FONT COLOR="#000080">Notes</FONT></H3>

<P><a name="1"></a> [1] Matt Austern. "The Standard Librarian: IOStreams and stdio," <I>C/C++ Users Journal</I>, November 2000, <b>http://www.cuj.com/experts/1811/austern.html</b>.</P>
<P><a name="2"></a> [2] Matt Austern. "The Standard Librarian: Streambufs and Streambuf Iterators," <I>C/C++ Users Journal</I>, March 2001, <b>http://www.cuj.com/experts/1903/austern.html</b>.</P>
 
<p><i><B>Matt Austern</B> is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <b>austern@research.att.com</b>.</i></p>

<h4><a href="../../../source/2001/apr01/austern.zip"></a></h4>

</blockquote></body></html>


