<HTML><HEAD>
<TITLE>April 2001 C++ Experts Forum/The Standard Librarian/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Specialization of rangebuf for ordinary pointers</A></h4>
<pre>
template&lt;&gt;
class rangebuf&lt;char*&gt; : public std::streambuf {
public:
  rangebuf(const char* f, const char* l);
protected:
  pos_type seekoff(off_type off, std::ios::seekdir way,
                   std::ios::openmode which);
  pos_type seekpos(pos_type pos, std::ios::openmode which);
};

rangebuf&lt;char*&gt;::rangebuf(const char* f, const char* l) {
  setg(const_cast&lt;char*&gt;(f),
       const_cast&lt;char*&gt;(f),
       const_cast&lt;char*&gt;(l));
}

std::streambuf::pos_type
rangebuf&lt;char*&gt;::seekoff(off_type off, std::ios::seekdir way,
                               std::ios::openmode which) {
  switch(way) {
  case std::ios::beg:
    return seekpos(pos_type(off), which);
  case std::ios::cur:
    return seekpos(pos_type(off) + (gptr() - eback()), which);
  case std::ios::end:
    return seekpos(pos_type(off) + (egptr() - eback()), which);
  default:
    return pos_type(off_type(-1));
  }
}

std::streambuf::pos_type
rangebuf&lt;char*&gt;::seekpos(pos_type pos, std::ios::openmode which) {
  if (which != std::ios::in)
    return pos_type(off_type(-1));

  off_type offset = off_type(pos);
  if (offset &lt; 0 || offset &gt; egptr() - eback())
    return pos_type(off_type(-1));

  setg(eback(), eback() + offset, egptr());
  return pos;
}
</pre>
</BODY></HTML>
