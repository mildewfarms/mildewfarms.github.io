<HTML>   
     <HEAD>
<TITLE>April 2001 C++ Experts Forum/Object Interconnections</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.04/tocapr.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>
<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: Using Standard C++ in the OMG C++ Mapping &#151; Server-Side Mappings and Pseudo-Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Douglas C. Schmidt and Steve Vinoski</FONT></H3>
<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<P>In our previous columns [<a href="#1">1</a> <a href="#2">2</a>], we explored some ideas for hypothetical alternative mappings of OMG IDL to C++ that use Standard C++ features. In particular, we covered two major areas of the OMG C++ mapping <a href="vinoski.htm#3">[3]</a>:<P>

<OL>
<LI><I>IDL data-type mapping</I>: which defines how IDL data types, such as <B>struct</B>s and <B>sequence</B>s<B>,</B> are mapped into C++, including how they are passed between client and target object in operation invocations.</LI>
<LI><I>Client-side interface mapping</I>: which defines how IDL interfaces are mapped into C++ to support client applications invoking distributed objects.</LI>
</OL>


<P>Our primary design criteria for these alternative mappings are flexibility, ease of use, and performance. We showed how some IDL data types, such as <B>string</B> and array, map cleanly into Standard C++ types. However, we also showed that mapping other IDL types, such as <B>sequence</B>, into Standard C++ is not quite as straightforward due to trade-offs that must be made between performance and flexibility. Because a <B>sequence</B> can be mapped into multiple Standard C++ container types depending on how the application uses it, mapping interfaces that use <B>sequence</B> types require advanced Standard C++ features, such as member templates to maximize flexibility.</P>
<P>We finish our exploration of this topic in this column by covering the two remaining major areas of the OMG C++ mapping:</P>


<OL>
<LI><I>Server-side interface mapping</I>: which defines how IDL interfaces are mapped into C++ to support server applications implementing distributed objects.</LI>
<LI><I>Pseudo-object mapping</I>: CORBA includes interfaces for aspects of the ORB implementation, including the <B>ORB</B> interface itself, <B>Request</B>, <B>Object</B>, and named value lists<B> </B>(<B>NVList</B>). The interfaces of these <I>pseudo-objects</I> are special in that they sometimes are not defined entirely in IDL (<I>e.g.,</I> some are defined in a C-like language). These pseudo-object interfaces must also be mapped into C++ to make them available for both client and server applications.</LI>
</OL>

<P>Below we explore hypothetical mappings using features of Standard C++ for these areas of CORBA. But first, let's also repeat our caveat from our previous column: we must stress the word &quot;hypothetical,&quot; since there are currently no efforts within the OMG to define any new C++ mappings, nor do we necessarily condone the creation of any official efforts to do so.</P>

<H3><FONT COLOR="#000080">Server-Side Interface Mapping</FONT></H3>

<P>Before exploring issues related to using Standard C++ for the server side of the C++ mapping, we'll first describe the operation of the server side along with common development approaches for CORBA C++ server applications. A server is typically implemented in an OS process that hosts one or more <I>object adapters</I>, each of which hosts one or more <I>servants</I> <a href="vinoski.htm#4">[4]</a>. The role of the servant is to incarnate, or provide an implementation for, one or more CORBA objects. The object adapter connects these servants to the ORB runtime and ensures that requests made by clients on target objects are dispatched to the appropriate servant. Both the ORB runtime and the standard CORBA object adapter, the POA (Portable Object Adapter), are provided as part of the development kit provided by your ORB supplier. Servants, on the other hand, are what you develop to implement your application's "business logic."</P>
<P>You can implement a servant in one of three ways:</P>

<OL>
<LI><I>By deriving it from a server skeleton class.</I> This is the most common method of implementing POA-based servants in C++. IDL compilers generate interface-specific server skeleton classes as abstract base classes. To implement a servant, you derive a class from a skeleton class and override the pure virtual methods representing the operations and attributes declared in the IDL interface. Skeletons also typically contain other ORB-specific operations that assist with method dispatch to these virtual functions.</LI>
<LI><I>By tying it into a servant tie instance.</I> A &quot;tie&quot; is an interface-specific servant template class whose method implementations merely delegate their invocations to another class instance. A "tie" derives from the regular interface-specific skeleton class described above. The &quot;tied to&quot; instance then carries out the request. Note that the &quot;tied to&quot; class need not have any inheritance relationship with any CORBA-related classes. This approach was popular with older versions of CORBA (before the POA was introduced in version 2.2), but because the POA supplies all the benefits of this approach through servant managers and default servants <a href="vinoski.htm#4">[4]</a>, the use of ties in C++ is less common.</LI>
<LI><I>By using the DSI (Dynamic Skeleton Interface).</I> The DSI allows you to write &quot;generic servants&quot; that can respond to requests made on any object regardless of its interface type. Rather than being derived from or tied into an interface-specific skeleton, it derives from a special skeleton designed specifically for dynamic dispatch. A DSI-based approach, while not very common, is essential for applications such as bridges or routers that must handle any request regardless of whether or not the interface type was known at application compile time.</LI>
</OL>

<P>To explore the server side, let's use the same interface that we used for our explanation of client-side mapping issues in our previous column:</P>

<pre>
interface A {
    typedef sequence&lt;string&gt; StrSeq;
    StrSeq match (in StrSeq values, in string pattern);
};</pre>

<P>Following the rules of the OMG C++ Mapping, but using <B>std::string</B> for the IDL <B>string</B> type rather than <B>char*</B>, the generated server skeleton for this interface would be something similar to this:</P>

<pre>class POA_A :
    public virtual PortableServer::ServantBase {
  public:
    virtual A::StrSeq match (const A::StrSeq &amp;values,
                             const string &amp;pat) = 0;
};</pre>

<P>As we explained in our previous column, the best mapping for the <B>StrSeq</B> type shown here depends on how the application intends to use it. If the application intends to insert or remove elements from the middle of a <B>StrSeq</B>, it would be best to map it to <B>std::list</B>, otherwise <B>std::vector</B> will suffice. The way we provided for this type of flexibility on the client side was by using a template member function in the client-side proxy class, like this:</P>

<pre>class A {
  public:
    typedef vector&lt;string&gt; StrSeq;

    template&lt;typename Return, typename SeqArg&gt;
    Return match (const SeqArg &amp;values, const string &amp;pat);
};</pre>

<P>Applying the same approach to the server skeleton yields:</P>

<pre>class POA_A :
    public virtual PortableServer::ServantBase {
  public:
    template&lt;typename Return, typename SeqArg&gt;
    virtual Return match (const SeqArg &amp;values,
                            const string &amp;pat) = 0;
};</pre>

<P>Unfortunately, this is illegal in C++ because template member functions cannot be virtual. A less flexible approach is to instead make the skeleton class a template:</P>

<pre>template&lt;typename Return = A::StrSeq, typename SeqArg = A::StrSeq&gt;
class POA_A :
    public virtual PortableServer::ServantBase {
  public:
    virtual Return match (const SeqArg &amp;values,
                            const string &amp;pat) = 0;
};</pre>

<P>An application developer can then parameterize the skeleton base class when defining the servant class, like this:</P>

<pre>class MyAServant : public virtual POA_A&lt;std::list&gt;
{
  public:
    std::list match (const A::StrSeq &amp;values,
                            const string &amp;pat) = 0;
};</pre>

<P>Note also that this approach allows us to once again use default arguments for the template parameters. Using defaulted template parameters, which isn't allowed with the member template approach, helps make this approach easy to use.</P>
<P>Unfortunately, using a parameterized skeleton base class becomes hard if the IDL interface it represents depends on a number of different sequence types as operation arguments. This difficulty arises because each separate sequence parameter and return type requires a separate template parameter, resulting in a long and unwieldy template parameter list for the skeleton class. Using defaults for the template parameters doesn't always help, especially if the one you want to supply yourself is at the end of the list. Fortunately, such IDL interfaces are rare.</P>
<P>Still, there are other ways to address even those interfaces that make heavy use of multiple sequence types. One way is to have the IDL compiler generate a separate template class for each operation and attribute in each interface and then parameterize the template skeleton base class not with sequence types but with a type for each separate operation and attribute. For example, given interface <B>A</B> as shown above, the IDL compiler could generate the following support code:</P>

<pre>namespace POA_A {
    // template class for the <B>match</B> operation
    template&lt;typename Return, typename SeqArg&gt;
    class Amatch {
      public:
        Return operator()(const SeqArg &amp; values,
                                const string &amp;pat) = 0;
    };

    // template class for the skeleton for the <B>A</B> interface
    template&lt;typename match&gt;
    class A : public virtual PortableServer::ServantBase {
      public:
        // ...

      private:
        match* m_match;
    };
}</pre>

<P>To avoid name collisions, note that we define these templates within a namespace named <B>POA_A</B>.<B> </B>In the official OMG C++ mapping, <B>POA_A</B> is the name of the skeleton base class for interface <B>A</B>. We've decided to use this name for a different purpose in this hypothetical mapping. If you're a long-time user of the OMG C++ mapping, don't let the reuse of this name confuse you.</P>
<P>For each operation and attribute defined in IDL interface <B>A</B>, the <B>POA_A::A</B> template class holds a pointer data member to a function object instance that represents that operation or attribute. One way to initialize these data members is to make the <B>POA_A::A </B>constructor responsible for creating all the appropriate function object instances, but this would allow only default construction of these function objects. Another solution is to allow the application to construct all the function objects and pass them to the <B>POA_A::A</B> constructor, which is very flexible, but introduces memory management issues regarding who owns the function objects.</P>
<P>An interesting feature of this approach is that you, the application developer, need not derive any servant class from the skeleton class to create a concrete servant class. Instead, the skeleton classes themselves are concrete (just like the tie classes that are part of the official OMG C++ mapping) assuming you supply all the necessary operation and attribute template parameters.</P>
<P>While the approach outlined above is flexible, it suffers from at least two drawbacks:</P>

<OL>
<LI>It's complicated. As shown here, the developer has to define a class for each separate operation and attribute in each interface they want to support. However, having the IDL compiler also generate default class types for each operation and attribute, and supplying those types as default template parameters on the skeleton class, could reduce some of this complexity.</LI>
<LI>It makes the skeleton-private dispatching code tricky (but not impossible). Skeleton-private dispatching code, which is specific to each ORB supplier's implementation, assists the ORB and the POA in turning the CORBA request coming into the server into a C++ function invocation. This trickiness is caused by the fact that the actual type of the sequence parameters to each function object is unknown at compile-time, meaning that the unmarshaling and dispatching code can make very few assumptions regarding the actual type of the sequence parameter. Luckily, though, this would be a problem that your ORB supplier would have to solve, not you.</LI>
<LI>Note, however, that this approach could negatively impact the performance of skeleton dispatching code, which in itself might be reason enough to avoid this approach altogether.</LI></OL>

<P>Finally, note that all of the skeleton parameterization approaches shown in this column could result in poor performance. This is especially true for sequences of simple types, such as <B>long</B> and <B>enum</B>, because each element would have to be unmarshaled individually rather than unmarshaling all elements at once, as the official OMG C++ mapping allows. However, it might be possible for your ORB supplier to overcome these performance hurdles by specializing the marshaling code for all sequences of these simple types.</P>

<H3><FONT COLOR="#000080">Pseudo-Object Mappings</FONT></H3>

<P>A CORBA <I>pseudo-object</I> is an object whose implementation is provided by your ORB supplier as part of their overall implementation. For example, the <B>ORB</B> itself is a pseudo-object, as are the <B>Request</B>, <B>NVList</B>, <B>NamedValue</B>, and <B>Context</B> types. These types are called pseudo-objects because they do not always follow the same invocation and life-cycle rules that normal CORBA objects follow.</P>
<P>Some pseudo-objects, such as the <B>ORB</B>, are fat interfaces with many operations and nested types. They often use lots of sequence types. For such pseudo-objects, applying the sequence-related parameterization approaches that we've explored in this column and the previous one is hard due to the sheer number of different sequence types involved. Thus, heavy use of Standard C++ features in such pseudo-objects is unwieldy.</P>
<P>Other pseudo-objects, such as <B>NVList</B>, <B>ExceptionList</B>, and <B>ContextList</B> are simply containers and would just map to the appropriate Standard C++ container. For example, an <B>NVList</B> is simply a container for <B>NamedValue</B> instances, and it could be mapped to a <B>std::vector</B>. A <B>NamedValue</B>, on the other hand, is just a <B>std::pair</B> holding a <B>string</B> and a <B>CORBA::Any</B>. Applying Standard C++ for these types would make them much easier to use in CORBA applications. Note that both the CORBA DII (Dynamic Invocation Interface) and DSI use pseudo-objects extensively, so simplifying these pseudo-objects would have the side effect of also simplifying the use of the DII and DSI.</P>

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<P>This column describes several ways to define a CORBA C++ mapping using features of Standard C++ for server-side interfaces and for pseudo-objects. Due to column length restraints, our analysis of many areas of the mapping with respect to Standard C++ is incomplete, but our goal was to explain some of the possibilities, not to supply an exhaustive solution. We hope that our exploration of the issues, however brief, shows that getting maximum use out of Standard C++ for a CORBA C++ mapping is not trivial. Still, we have found this exploration interesting, as it has forced us to &quot;think out of the box&quot; and ignore traditional approaches to the C++ mapping in order to try to take full advantage of Standard C++. We hope you found this interesting as well.</P>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<P>Occasional conversations with Michi Henning over the past few years helped shape the contents of this column.</P>

<H3><FONT COLOR="#000080">References</FONT></H3>

<P><a name="1"></a>[1] D.C. Schmidt and S. Vinoski. &quot;Object Interconnections: Standard C++ and the OMG C++ Mapping,&quot; <I>C/C++ Users Journal C++ Experts Forum</I>, January 2001, <b>http://www.cuj.com/experts/1901/vinoski.html</b>.</P>
<P><a name="2"></a>[2] D.C. Schmidt and S. Vinoski. &quot;The History of OMG C++ Mapping,&quot; <I>C/C++ Users Journal C++ Experts Forum</I>, November 2000, <b>http://www.cuj.com/experts/1811/vinoski.html</b>.</P>
<P><a name="3"></a>[3] Object Management Group. IDL C++ Language Mapping. <b>http://www.omg.org/technology/documents/formal/c++.htm</b>, 1999.</P>
<P><a name="4"></a>[4] Michi Henning and Steve Vinoski. <I>Advanced CORBA Programming with C++</I> (Addison Wesley, 1999).</P>

<p><i><B>Steve Vinoski</B> is chief architect and vice president of Platform Technologies for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of </i>Advanced CORBA Programming with C++<i>, published in January 1999 by Addison Wesley Longman.</i></P>
<p><i><B>Doug Schmidt</B> is an associate professor member at the University of California, Irvine. His research focuses on patterns, optimization principles, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded system interconnects.  He is the lead author of the book </i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects<i>, published in 2000 by Wiley and Sons.  He can be contacted at <b>schmidt@uci.edu</b>.</i></P>


</blockquote></body></html>


