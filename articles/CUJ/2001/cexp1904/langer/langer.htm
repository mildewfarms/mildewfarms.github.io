<HTML>   
     <HEAD>
<TITLE>April 2001 C++ Experts Forum/Effective Standard C++ Library</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.04/tocapr.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Effective Standard C++ Library: Unary Predicates in the STL</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Klaus Kreft and Angelika Langer</FONT></H3>
<HR>
<BLOCKQUOTE>

<P>Several algorithms in the standard library use a unary predicate to accomplish their tasks.  Examples are the <B>_if</B><I> </I>algorithms like <B>count_if</B>, <B>find_if</B>, <B>remove_if</B>, or <B>replace_if</B>, but also algorithms like <B>partition</B>.  In this installment of the column, we take a closer look at unary predicates and what they may and must not do.</P>
<P>Let us see how the Standard defines a unary predicate. It is simply called <I>predicate</I> in the Standard <a href="#1">[1]</a>.</P>
<UL><P><B>UNARY PREDICATE.</B></P>
<P>The <B>Predicate</B> parameter is used whenever an algorithm expects a function object that when applied to the result of dereferencing the corresponding iterator returns a value testable as true. In other words, if an algorithm takes <B>Predicate pred</B> as its argument and <B>first</B> as its iterator argument, it should work correctly in the construct <B>(pred(*first)){...}</B>.</P>
<P>The function object <B>pred</B> shall not apply any non-constant function through the dereferenced iterator. </P>
<P>This function object may be a pointer to function, or an object of a type with an appropriate function call operator.</P>
</UL>

<P>From this specification and the examination of the algorithms that use unary predicates (which we will look into later in this article), we can identify a number of properties typical of a unary predicate. We will discuss each of the properties in detail in this article.  A unary predicate's properties are:</P>

<OL>
<P><B>Basic Properties</B></P>
<LI>A unary predicate must be callable.</LI> 
<LI>A unary predicate must accept one argument and return a value that is convertible to Boolean.</LI> 
<LI>A unary predicate need not be copyable.</LI>
<P><B>Side-Effect Properties</B></P>
<LI>A unary predicate must not modify its argument.</LI>
<LI>A unary predicate must not invalidate iterators or sequences that the algorithm works with.</LI>
<LI>A unary predicate can have any side effect other than the ones described in 4 and 5.</LI>
<P><B>Other Properties</B></P>
<LI>A unary predicate must be <I>order-insensitive</I>, which means that the effect of calling the predicate must be independent of the order in which sequence elements are supplied to it.</LI>
<LI>A unary predicate need not yield the same result for different invocations with the same argument.</LI></OL>

<P>Let us see why it makes sense that a predicate has exactly these properties.</P>

<H3><FONT COLOR="#000080">Basic Properties 1, 2, and 3</FONT></H3>

<P><I>A unary predicate must be callable, but need not necessarily be copyable, and must accept one argument and return a Boolean value.</I></P>
<P>These properties are more or less evident when we consider how the standard defines use of a unary predicate by an algorithm, namely that the predicate &quot;should work correctly in the construct<B> if (pred(*first)){...}</B>&quot;. Here is a typical implementation of an algorithm that demonstrates the intended use of a unary predicate:</P>

<pre>template &lt;class InputIterator, class Predicate&gt;
typename iterator_traits&lt;InputIterator&gt;::difference_type
count_if(InputIterator first, InputIterator last, Predicate pred) {
  typename iterator_traits&lt;InputIterator&gt;::difference_type n = 0;
  for ( ; first != last; ++first)
    if ( <B>pred(*first)</B> )
      ++n;
  return n;
}</pre>

<P> In other words, a unary predicate is called like a function. The
requirement of "callable" is met by a pointer to a function, but also by
an object (or a reference to an object) of a type that has the function
call operator defined (a so-called <i>functor</i>). One argument is supplied when the predicate is called. The argument is the result of dereferencing an iterator, that is, a reference to a sequence element. The return value is used as a conditional expression and must be convertible to type <B>bool</B>.  And this fully describes the purpose of a unary predicate: it is called to produce a Boolean result for elements in a sequence.  </P>
<P>In particular, there is no requirement regarding the copy semantics of a unary predicate. It need not even be copyable at all. As a general rule, an algorithm must not rely on any properties that are not required of the objects it uses. This includes that an algorithm must not copy the predicate, because a user is not required to provide any reasonable copy semantics for his predicates. It's just fine if we declare copy constructor and copy assignment as private members of our predicate type and pass around our predicate objects by reference, if that makes sense to us.  It should not break any algorithm.  In practice, you will find libraries that assume copyability of predicates, although they shouldn't. One of the surprising effects of such standard library implementations have been discussed in an article in <I>C++ Report</I> <a href="#2">[2]</a>. Meanwhile some library implementations have eliminated this restriction and behave as expected; for instance, see Metrowerks CodeWarrior 6.0.  Taking into account the different library implementations, we would
say that unary predicates with "interesting" or no copy semantics are best avoided.
<P>In practice, most predicates have normal copy semantics. This is
because usually we invoke an algorithm in a way that the predicate is passed
by value.  To do this, the predicate must be copyable. Non-copyable predicates can be useful, but they are unusual, because they must be passed by reference, which takes extra care and requires interesting-looking template syntax. We discussed some of the related issues like pass-by-reference of function objects in a previous article, how we can do it, and why we might want to do it <a href="#3">[3]</a>. We'll spare you any further discussion of the matter right here. Instead let’s move on to the remaining predicate properties, which address the issue of side effects produced by a unary predicate.</P>

<H3><FONT COLOR="#000080">Side-Effect Properties 4, 5, and 6</FONT></H3>

<P><I>A unary predicate can have any side effects except modification of its argument and invalidation of iterators or sequences that the algorithm works with.</I></P>
<P>The Standard prohibits certain side effects, but allows others. Why? To understand this requirement, consider what happens inside an algorithm that uses a unary predicate. There are two side-effect-producing entities: the algorithm itself and the unary predicate. The algorithm iterates over the sequence of input elements, inspects the elements, supplies them as an argument to the predicate, modifies and copies them, and might produce other side effects. The unary predicate receives a reference to an element in the input sequence and might also inspect and modify the element and produce other side effects. Naturally, these activities might collide. For this reason, let us  take a look at the side effects produced by a unary predicate and classify them regarding their potential for conflict into harmful, potentially harmful, and harmless side effects.</P>

<H4><FONT COLOR="#000080">Harmful Side Effects</FONT></H4>

<P>Harmful side effects invalidate any iterator or sequence that the algorithm operates on. (No function object should ever produce a harmful side effect. This is a general rule that applies to all function objects, not just to predicates. The Standard does not even explicitly prohibit these side-effects, probably because they are considered &quot;common sense.&quot;)</P>
<P>An example of a harmful predicate would be a predicate that internally keeps a pointer or reference to the sequence that the algorithm operates on and uses the reference for erasing sequence elements. The removal of elements might invalidate iterators that were supplied to the algorithm in order to describe the input or output sequence, and under these circumstance, the algorithm is likely to produce a program crash. </P>
<P>Removal of sequence elements is a fairly obvious source of problems, but at times the invalidation of the sequence is less obvious.  If for instance the algorithms relies on the sorting order of the sequence and the predicate intentionally or inadvertently modifies the sorting order when it is invoked, then this would lead to unpredictable results.</P>
<P>In any case, predicates with harmful side effects must be avoided under all circumstances. As a rule, never use function objects that invalidate any iterator or sequence that the algorithm operates on.</P>

<H4><FONT COLOR="#000080">Potentially Harmful Side Effects</FONT></H4>

<P> This category of side effects is explicitly prohibited by the Standard. All unary predicates that apply non-constant functionality to their arguments fall into this category, because they modify sequence elements. Let us refer to such predicates as <I>mutating</I> unary predicates.  (Note the difference between &quot;modifying the sequence&quot; (harmful) and &quot;modifying the sequence elements&quot; (only potentially harmful): &quot;modifying the sequence&quot; means that elements are inserted or removed or shuffled around so that certain iterators or iterator ranges become invalid. &quot;Modifying the sequence elements&quot; means that sequence elements are accessed and their content is changed, but it does not invalidate any iterator.)</P>
<P>The potential harm of a mutating unary predicate stems from the fact that the predicate is not the only one that can access elements from the input sequence and change them. The algorithm itself  might attempt to modify the same sequence of elements.  In such a case, there are two side-effect-producing entities (the algorithm and the predicate), and their activities might collide. </P>
<P>When does such a collision happen?  Not all algorithms modify elements from the input sequence, but some of them indeed do. Algorithms fall into several categories: non-modifying and mutating algorithms, and the mutating algorithms can be distinguished as in-place and copy algorithms. The <I>non-modifying</I> algorithms (e.g., <B>count_if</B>) only inspect sequence elements; they don't change anything. The <I>mutating copy</I> algorithms (e.g., <B>replace_copy_if</B>) do not modify elements in the input sequence, but copy them to the output sequence; they modify elements in the output sequence. The <I>mutating in-place</I> algorithms (e.g., <B>replace_if</B>) modify elements &quot;in place,&quot; which means that they modify elements in the input sequence; they are the critical ones. Hence, the potential conflict between predicate and algorithm occurs for mutating in-place algorithms in conjunction with a mutating unary predicate.</P>
<P>Application of two modifications to the same sequence element raises a couple of questions such as: Which modification is performed first and potentially overwritten by the second?  Is the result predictable at all? In order to avoid any such conflict between the algorithm and the predicate, the Standard requires that a unary predicate must not modify the elements in the input sequence that  it receives as arguments. Note that the mutating side effect is disallowed for <I>all</I> unary predicates, not just for those that are supplied to mutating in-place algorithms.</P>
<P>This restriction is often reflected in the predicate's function signature: typically a unary predicate takes its argument either by value or by constant reference, in order to make sure that its argument (the referred-to input sequence element) cannot be modified. </P>

<H4><FONT COLOR="#000080">Harmless Side Effects</FONT></H4>

<P>Last, but not least, a predicate may have harmless side effects. All  non-mutating access to sequence elements falls into this category. A predicate may apply constant functionality to its arguments; that is, it may inspect the sequence elements, but it must not modify them. In addition, a unary predicate may modify objects other than its argument. It may for instance have data members and change their values. Or it may refer to unrelated element sequences and change them.  This is harmless as long as the sequences that are changed by the predicate are not simultaneously used by the algorithm. </P>

<H4><FONT COLOR="#000080">Why Do We Care?</FONT></H4>

<P>We've seen the different types of side effects that a predicate can produce and that many of the side effects are prohibited by the Standard. Why would we want to use predicates with side effects under these circumstances? Is a unary predicate with side effects a rare or a fairly common case?  </P>
<P>Well, it depends. If you look at typical examples of predicates that are given in C++ text books, then you'll find unary predicates such as <B>isEven</B> defined as <B>bool isEven(int elem) { return elem %2 == 0; } </B>or expressions such as <B>bind2nd(greater&lt;int&gt;(),4)</B>, which is a unary predicate created from a predefined binary predicate by means of a so-called binder.  Even if you study unary predicates that are implemented as function object types (i.e., they are classes with an overloaded function call operator), they rarely have data members or do anything complicated, and they never have side effects.</P>
<P>In practice, this is slightly different.  For instance, we care about efficiency. Obviously, it is faster to perform several things in one pass over the sequence instead of  stepping through a lengthy sequence repeatedly. Consider a couple of examples.</P>
<P>Say, we have a container that represents our customer base. We need to determine the number of all frequent buyers for our internal statistics, and, as we go, we want to build up a mailing list because we intend to send promotional mail to the frequent buyers. However, the mailing list should not exceed a limit of 5,000 addressees. That's the task.  How can we achieve this? One conceivable solution is a unary predicate that yields true for a frequent buyer and accumulates information for the mailing list as it goes. When supplied to the <B>count_if </B>algorithm, it would produce the desired count and would build up the mailing list as a side effect. Such a unary predicate strictly conforms to the rules. It accepts a constant reference to a client, inspects the client, and produces a harmless side effect, namely the mailing list. </P>
<P>Let us consider another, similar example. We need to remove all <I>infrequent</I> buyers from our customer base and update the records of the remaining frequent buyers regarding applicable discounts.  Again, we try to be efficient and want to do both in one pass over the customer base. In comparison to the previous approach, we could try providing a unary predicate to <B>remove_if</B> that yields true for infrequent buyers (so that the algorithm removes them) and adds information about the discounts to the remaining buyers.  In contrast to the earlier example, this is illegal, because adding information to elements in the input sequence is a prohibited side effect. Remember: The predicate must not modify its argument. But that's exactly what we intend to do: we want to update the remaining elements in the sequence. So, what do we do?</P>
<P>There is not much that we can do. A thorough study of the algorithms section of the Standard reveals that the <B>for_each</B> algorithm is the only algorithm that accepts a function object <I>and</I> allows the function object to modify its argument. (We discussed <B>for_each</B> in a previous article <a href="#4">[4]</a>.) For this reason, we are very restricted in our choice of algorithms for a given task if that task includes modification of elements in the input sequence; <B>for_each</B> is the basically the only choice.</P>
<P>The consequence is that we must split the task into the non-modifying activities (implemented as a unary predicate for <B>remove_if</B>) and the mutating activities (implemented as a functor for <B>for_each</B>). This way an additional pass over the entire sequence cannot be avoided, including the inevitable loss in efficiency. </P>
<p>The alternatives are:<br>
<ul>
<li>a function object for use with <b>for_each</b> that removes <i>and</i> modifies elements (thus repeating the functionality of <b>remove_if</b> in our predicate, which is certainly not desirable)</li>
<li>a user-defined version of the <b>remove_if</b> algorithm that allows modification of elements in the input sequence (which is doable; even a copy of the standard algorithm might do depending on how it is implemented)</li>
<li>a manually coded algorithm (ignoring the standard algorithms altogether)</li>
</ul>

<P>The bottom line is that unary predicates cannot be used if elements from the input sequence must be modified.</P>
<P>If such a modification is desired (e.g., for efficiency reasons), then we must split the task into modifying and non-modifying aspects and must accept multiple passes over the input sequence if we want to use the standard algorithms.</P>

<H3><FONT COLOR="#000080">Property 7</FONT></H3>

<P><I>A unary predicate must be order-insensitive; that is, its effects must be independent of the order of invocation.</I></P>
<P>In conjunction with side effects of unary predicates, two other aspects are relevant: order and number of invocation of the predicate. If a side effect is produced each time the predicate is applied to an element of the input sequence, then we would want to know how often and in which order the side effects are produced.  For instance, in our example, we increment a count in order to determine the maximum size for the generated mailing list.  Naturally, it makes a difference if the predicate is applied exactly once per element or maybe repeatedly. Depending on the nature of the side effect, the order and number of invocations plays a role.</P>
<P>The number of invocations is exactly specified: algorithms like <B>count_if</B> or <B>remove_if</B> apply the unary predicate exactly once per element in the input sequence. Order of invocation is different: none of the algorithms that take a unary predicate specifies the order in which it supplies sequence elements to the predicate. As a consequence, unary predicates must be independent of the order of invocation. If we use a predicate that depends on the order of invocation, the result is unpredictable.  </P>
<P>Here is an example: a (order-sensitive) predicate that yields true for every n<SUP>th</SUP> element in the sequence:</P>

<pre>class Nth {
public:
  Nth(int n) : theN(n), theCnt(0) {}
  bool operator()(int) 
  { return (++theCnt)%theN; }
private:
  const int theN;
  int theCnt;
};</pre>

<P>If we supply a predicate such as <B>Nth(3) </B>to an algorithm like <B>remove_copy_if</B>,  then one might expect that it would move <I>every third element</I> from the input sequence to the output sequence. But this is not guaranteed, because the sequence elements are not necessarily supplied in any definite order. All that we can reasonably rely on  is that <I>a third of all elements </I>will be moved from the input sequence to the output sequence.</P>
<P>Why doesn’t the Standard give a guarantee regarding the order of invocation of the unary predicates?  This is because certain algorithms can be optimized for certain types of iterators. For instance, an algorithm might step through the sequence from beginning to end if the iterator is an input iterator, but could do random jumps for a random access iterator. Since the Standard does not want to restrict the potential for such optimizations, it does not give any guarantees for the order of invocation of the unary predicates.</P>
<P>The consequence for users of the STL is that all unary predicates must not depend on the order in which sequence elements are supplied to it. If we want to use order-sensitive predicates, then we must implement our user-defined algorithms that give us the guarantee we need regarding the order of invocation of the unary predicate.</P>
<P>Related to the order and number of invocations of the unary predicate, there is the following last observation.</P>

<H3><FONT COLOR="#000080">Property 8</FONT></H3>

<P><I>A unary predicate need not yield the same result for different invocations with the same argument.</I></P>
<P>This property might sound a little far-fetched. We include this into the list of properties because we’ve observed that occasionally it is assumed that there is an implied requirement that predicates exhibit &quot;stable&quot; behavior, in the sense that they yield the same result each time they are invoked with the same or an &quot;equal&quot; argument.  This assumption is not justified; the Standard does not define any such requirement.</P>
<P>Why then is it occasionally assumed that &quot;stable&quot; behavior is required of a unary predicate?  Because it would give the implementations a considerable amount of latitude.  With &quot;stable&quot; behavior, it would not matter how often the predicate is called for the same sequence element, since the result would always be the same. It would also be irrelevant whether a reference to a sequence element is supplied to the algorithm or a temporary copy of the element (namely  an "equal" element).</P>
<P>However, for unary predicates in the STL, there is no requirement of &quot;stable&quot; behavior. It perfectly makes sense to define an &quot;instable&quot; predicate.  An example would be a predicate that yields true for all elements with a certain property until a limit is reached. It could be used to copy a maximum number of elements with a given property from an input sequence to an output sequence using <B>remove_copy_if</B>. </P>

<H3><FONT COLOR="#000080">Summary</FONT></H3>
<P>The following algorithms in the standard library use a unary predicate: <B>replace_if</B>, <B>remove_if</B>, <B>partition</B>,  <B>stable_partition</B>, <B>replace_copy_if</B>, <B>remove_copy_if</B>, <B>count_if</B>, and <B>find_if</B>.</P>
<P>If a unary predicate has the properties listed below, then it can be provided to any of the algorithms listed above, and the result will be portable and predictable.</P>

<UL>
<LI>A unary predicate must be callable and must accept one argument and return a Boolean value, but need not have any particular copy semantics. (Some library implementations have restrictions in this area because they require certain copy semantics.)</LI>
<LI>A unary predicate must not modify its argument and must not invalidate iterators or sequences that the algorithm works with, but may have any other side effects.</LI>
<LI>A unary predicate must be independent of the order of invocation and may yield different results for different invocations with the same argument.</LI></UL>

<H3><FONT COLOR="#000080">References</FONT></H3>
<P><a name="1"></a>[1] International Standard. Programming languages &#151; C++ ISO/IEC IS 14882:1998(E).</P>
<P><a name="2"></a>[2] Nicolai M. Josuttis. &quot;Predicates vs. Function Objects,&quot; <I>C++ Report</I>, June 2000.</P>
<P><a name="3"></a>[3] Klaus Kreft and Angelika Langer. &quot;Effective Standard C++ Library: Explicit Function Template Argument Specification and the STL,&quot; <I>C/C++ Users Journal</I>, December 2000, <b>http://www.cuj.com/experts/1812/langer.html</b>.</P>
<P><a name="4"></a>[4] Klaus Kreft and Angelika Langer. &quot;Effective Standard C++ Library: <B>for_each</B> vs. <B>transform</B>,&quot; <I>C/C++ Users Journal</I>, February 2001.
<b>http://www.cuj.com/experts/1902/langer.html</b></P>
	

<p><i><b>Klaus Kreft</b> is senior consultant at Siemens Business Services in Germany. He can be reached at <b>klaus.kreft@mch20.sbs.de</b>.</i></p>
<p><i><b>Angelika Langer</b> works as an independent instructor and mentor. She can be reached at <b>langer@camelot.de</b>.</i></p>
<p><i>They are authors of the book </i>Standard C++ IOStreams and Locales<i>.</p>


</blockquote></body></html>


