<HTML>   
     <HEAD>
<TITLE>December 2001/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: Traits Classes</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>Traits classes are a mainstay of the Standard C++ library. Here's an opportunity to understand them in depth.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The overall plan for my column on STL and Generic Programming is to first make one pass through the STL, giving you whatever advice I think you may need in addition to what you&#146;ll find in your favorite documentation or introductory book. After that, I will be talking about generic programming techniques in general, such as template metaprogramming and the like. Within this overall plan, we&#146;re still on the first part, taking a trip through the STL. Nevertheless, I will digress briefly this month and talk about a generic programming technique that is not specific to the STL, namely, traits classes. The reason for this digression is that traits classes are showing up more and more in articles on C++ programming, most notably in this magazine. Traits are also frequently encountered at &lt;www.boost.org&gt;, a great source for all kinds of nifty free stuff related to generic programming in general and the STL in particular. Therefore, I believe that the time has come to take a step back and paint the big picture on this subject: What are traits classes, what problem do they solve, and how do they solve it?</p>
<p>I am not going to try and give you a definition of what a traits class is before showing an example. Let me just say that the earliest reference on the subject that I know of is N.C. Myers&#146; article <a href="#1">[1]</a> in the now-defunct <I>C++ Report</I>, also available at &lt;www.cantrip.org/traits.html&gt;. The subject was taken up again by Andrei Alexandrescu in <a href="#2">[2]</a>. Both articles are highly recommended reading.</p>

<H3><FONT COLOR="#000080">Explicit and Partial Template Specialization</FONT></H3>

<p>Traits classes rely heavily on explicit and partial template specialization. Therefore, we must at least briefly review those two features of C++ before we can look at traits classes. Say you have defined a class template like this:</p>

<pre>
template&lt;typename T&gt;
class X
{
public:
  void foo(){ /* do something */ }
  // more stuff
};
</pre>

<p>Then, whenever you use an instantiation of the class template <B>X</B>, as in:</p>

<pre>
X&lt;int&gt; anX;
anX.foo();
</pre>

<p>the compiler will use your general definition of class <B>X</B> to generate the code for <B>foo()</B>, and, if necessary, the constructor and destructor for the object <B>anX</B>. Now suppose you decide that for the particular type <B>int</B>, you do not want to use this definition of the class template <B>X</B>. Instead, you want to use a completely different implementation. I will not go out of my way here to give you an example of why you may want to do this; examples will abound in the discussion of traits classes below. You can achieve this by providing a so-called explicit template specialization for the type <B>int</B>, like this:</p>

<pre>
template&lt;&gt;
class X&lt;int&gt;
{
public:
  void foo(){ /* do something else */ }
  // more stuff
};
</pre>

<p>Now if you write:</p>

<pre>
X&lt;int&gt; anX;
anX.foo();
</pre>

<p>the special implementation that you have provided for the type <B>int</B> will be used. Since this specialization is no longer a class template, you may actually place the definitions of the member functions of the specialization into a separate source file without further ado. <a href="list1.htm">Listing 1</a> shows a possible organization of the headers and sources. Note how the header <B>Xint.h</B> only needs a forward declaration of the class template <B>X</B>, not the entire definition.</p>
<p>Next, suppose that you have a class template with two template parameters, as in:</p>

<pre>
template&lt;typename S, typename T&gt;
class Y
{
public:
  void foobar(){ /* do something */ }
  // more stuff
};
</pre>

<p>Suppose you wish to use a different implementation whenever the first template parameter is specialized to <B>int</B>, regardless of what the second one is. C++ allows you to do this by using a so-called partial template specialization, like this:</p>

<pre>
template&lt;typename T&gt;
class Y&lt;int, T&gt;
{
public:
  void foobar(){ /* do something else*/ }
  // more stuff
};
</pre>

<p>Now whenever you use an instantiation of the class template <B>Y</B> with the first template parameter being <B>int</B>, as in:</p>

<pre>
Y&lt;int, SomeClass&gt; aY;
aY.foobar();
</pre>

<p>then the implementation specified in your partial specialization will be compiled and used.</p>
<p>Partial template specialization is not restricted to specifying one or more of several template parameters. Instead, you can specify patterns to be matched for the template arguments. An important example is partial template specialization for all pointer types. Consider again the class template <B>X</B> that we used before:</p>

<pre>
template&lt;typename T&gt;
class X
{
public:
  void foo(){ /* do something */ }
  // more stuff
};
</pre>

<p>We may now write a partial specialization for all pointer types like this:</p>

<pre>
template&lt;typename T&gt;
class X&lt;T*&gt;
{
public:
  void foo(){ /* do something else */ }
  // more stuff
};
</pre>

<p>Any instantiation where a pointer type is used for the template argument <B>T</B> will use this partial template specialization. An example would be:</p>

<pre>
X&lt;char*&gt; anX;
anX.foo();
</pre>

<p>In all other cases, the original general implementation is used. It should be obvious now how you can write partial template specializations that apply to all reference types, all <B>const</B> types, all pointers to <B>const</B>, and so on and so forth.</p>
<p>If you&#146;re using Microsoft&#146;s Visual C++ compiler, be warned that it does not support partial template specialization, thereby effectively locking you out of a whole world of exciting and important C++ programming techniques. Please do read on, though. I have written this column so that all examples get by with explicit rather than partial template specialization.</p>

<H3><FONT COLOR="#000080">The Prototype Factory Example</FONT></H3>

<p>To give you a better feeling for the relevance of traits classes, I will use a real-life, real-world example rather than yet another version of the manager, shape, or widget example. Suppose you have decided that you want to use the prototype pattern in your software. (For a full and detailed description of the prototype pattern, see Chapter 3 of the Gang-of-Four book <a href="#4">[4]</a>.)</p>
<p>Creating objects from prototypes is a good idea whenever the following scenario occurs: your program uses a finite number of different, but closely related kinds of objects. Creation of the first object of each kind is costly, perhaps involving file-system or database access. After that, the creation of further copies of each kind from the first object can be achieved by a much cheaper cloning operation. In this case, it is a good idea to create one prototype of each kind up front, typically during program initialization, store them all in a factory object, and then obtain clones of the prototypes from the factory object. The prototypes can be objects of completely unrelated types, of different types that have a common base class, all of the exact same type, or a combination of all of the above. A practical example of such a collection of prototypes is shown in the nuts and bolts and other parts that go into a CAD drawing. Creating the first instance of a particular nut or bolt typically involves a trip to some large database or a website. It is expected that many copies of this first instance will be needed, and each of these is easily obtained as a clone of the first one.</p>
<p>Suppose now you have decided that your prototypes will have a common base class, let&#146;s say, <B>Widget</B>. Therefore, you are going to write a prototype factory class that holds pointers to objects of type <B>Widget</B>. Let us further assume that the prototypes are indexed by integer IDs. Also, as is to be expected of a factory class, your widget factory class will be a singleton, of which only one instance exists. Once these design decisions have been made, we can achieve a good measure of genericity and hence reusability by simply using two template parameters instead of the object type <B>Widget</B> and the ID type <B>int</B>. <a href="list2.htm">Listing 2</a> shows the skeleton of the resulting semi-generic prototype factory class. This skeleton completely omits the singleton aspect of the factory class, and it suppresses a number of issues such as error checking, ownership of pointers, and the like. These are of course important issues, but they are irrelevant to the purpose of my example.</p>
<p>Notice that the prototype factory&#146;s <B>GetClone</B> member function calls a method <B>Clone</B> on the prototype whose clone is to be obtained. <B>Clone</B> is a common choice for the name of this kind of method, and it is what you used in your <B>Widget</B> class. Rather obviously, your prototype factory class template can be reused only for prototype classes that provide an appropriate method for cloning. Moreover, that method must be named <B>Clone</B>. That&#146;s fine as long as the prototype class is written by you or someone close to you, but that may not be the case. Classes that are candidates for prototyping often have issues concerning deep versus shallow copying. For example, a part in a CAD drawing may be a composite, and such a composite can be deep-copied, where each part of the composite is copied, or it can be shallow-copied, where copies of pointers to the parts of the composite are made. In these cases, it is quite likely that the designer of the class has chosen names such as <B>DeepCopy</B>, <B>ShallowCopy</B>, etc., but there is no method named <B>Clone</B>. Now your prototype factory class template cannot be used as is, because the <B>GetClone</B> method must call <B>DeepCopy</B> on the prototype object rather than <B>Clone</B>.</p>
<p>This is certainly a very annoying situation. A rather accidental choice of nomenclature shoots down our carefully designed scheme for code reuse. Let&#146;s look at the traditional options that spring to mind for resolving this situation. Suppose the offending class is called <B>Gadget</B>, and it has a method called <B>DeepCopy</B> that we want to use in lieu of <B>Clone</B>. The first thing you should think of when confronted with a class whose interface doesn&#146;t match the requirements of your code is the adapter pattern (see Chapter 4 of <a href="#4">[4]</a>). Using this pattern, you would slap a new interface on the <B>Gadget</B> class, either through inheritance or through aggregation, giving it a new method <B>Clone</B> that forwards to <B>DeepCopy</B>. If you have other, additional reasons for wanting to write an adapter for the <B>Gadget</B> class, you&#146;re fine. Doing it just for the sake of being able to reuse the prototype class template is most certainly a poor tradeoff. The extra work needed and the additional complexity introduced into your code by writing the <B>Gadget</B> adapter are simply not justified by the gain.</p>
<p>The other option for dealing with the situation is to derive a new class from the prototype factory class template, overriding <B>GetClone</B> so as to make it call <B>DeepCopy</B> rather than <B>Clone</B> on the prototype. Ten years ago, most people would have considered this to be the correct solution. In the years since, we have learned the hard way that this kind of design leads straight into the thickets of impenetrably complex class hierarchies, a place that is only marginally preferable to the chaos of non-object-oriented spaghetti code. It is not a good idea to use inheritance to create a gaggle of different versions of a class to make it reusable in different contexts.</p>

<H3><FONT COLOR="#000080">Traits Classes</FONT></H3>

<p>Fortunately, there is a solution to our problem that is simple, elegant, and efficient, namely, using what&#146;s called a traits class. Let us take a step back and state our problem in the most general terms. We are looking at a class template whose implementation, at one point, needs to take different action according to the value of one of the template parameters. Specifically, in our case, if the template parameter <B>Proto</B> is <B>Widget</B>, or any other class whose cloning operation is called <B>Clone</B>, the method <B>Clone</B> must be called on the prototype. If <B>Proto</B> is <B>Gadget</B>, then <B>DeepCopy</B> must be called. In other cases, yet other methods may have to be called. In other words, we want the implementation of the factory&#146;s <B>GetClone</B> to behave like the following pseudocode:</p>

<pre>
Proto* p = protoTypeCollection[id];
If Proto is Gadget Then
  return p-&gt;DeepCopy();
ElseIf  
  // more cases
Else
  return p-&gt;Clone();
EndIf
</pre>

<p>Notice that this pseudocode has no chance of ever becoming valid C++ code. Even though the conditional expression <B>"Proto is Gadget"</B> could be written in C++ as:</p>

<pre>
typeid(Proto) == typeid(Gadget)
</pre>

<p>the code still would not compile in general. For example, if <B>Proto</B> is <B>Gadget</B>, then the compiler would complain about the call <B>p-&gt;Clone</B>, because <B>Gadget</B> does not have a method called <B>Clone</B>. It is true that the same compiler would probably optimize away the <B>Else</B>-branch at some later stage of compilation, but that does not help. C++ code must be syntactically correct before any optimization; those are the rules, and they&#146;re not likely to change any time soon.</p>
<p>Traits classes provide a way to implement the above &#147;if-else of types&#148; <a href="#5">[5]</a> in C++. Here&#146;s how it&#146;s done. First, we write a class template called <B>prototype_traits</B> as follows:</p>

<pre>
template&lt;typename T&gt;
class prototype_traits
{
public:
  static T* Clone(T* p)
  { return p-&gt;Clone(); }
};
</pre>

<p>We then write the prototype factory&#146;s implementation of <B>GetClone</B> as follows:</p>

<pre>
Proto* ProtoTypeFactory::GetClone(Id id)
{
  return prototype_traits&lt;Proto&gt;::Clone(
    protoTypeCollection[id]
    );
}
</pre>

<p>So far, <B>GetClone</B> behaves just as it did in <a href="list2.htm">Listing 2</a>, except for an additional level of indirection: it first calls the static member function <B>Clone</B> of <B>prototype_traits</B>, passing <B>p</B> as an argument, and that static member function then calls <B>p-&gt;Clone</B>. And here comes the punch line: to make our prototype factory class call <B>DeepCopy</B> instead of <B>Clone</B> when the prototypes are <B>Gadget</B>s, all we have to do is provide an explicit specialization of <B>prototype_traits</B> for <B>Gadget</B>s, like this:</p>

<pre>
template&lt;&gt;
class prototype_traits&lt;Gadget&gt;
{
public:
  static Gadget* Clone(Gadget* p)
  { return p-&gt;DeepCopy(); }
}
</pre>

<p>Now if the template parameter <B>Proto</B> of the class template <B>ProtoTypeFactory</B> equals <B>Gadget</B>, and the member function <B>GetClone</B> gets called, the above explicit specialization of <B>prototype_traits</B> will be used. Therefore, <B>DeepCopy</B> gets called on the prototype <B>p</B>.</p>
<p>Let&#146;s summarize. The problem: you have a class template that sometimes needs to take different action depending on the value of a certain template parameter. The solution: the actions that are different for different values of the template parameter get routed through an external class template named <B>xxx_traits</B>. The default implementation of this class template does what is expected to be the right thing in most cases. If a particular value of the template parameter requires different action, then an explicit instantiation of the traits class template for that type is provided that takes the appropriate action.</p>
<p>Notice that the customization provided by traits classes is entirely external. The class template that is being customized (<B>ProtoTypeFactory</B> in our case) has to be written only once; no changes to the source code are necessary when a new case, such as the <B>Gadget</B> class with its <B>DeepCopy</B> method, shows up. Neither do we have to do anything to the <B>Gadget</B> class. All that needs to be done is to provide a new explicit specialization for the traits class, and this specialization must be included only in the new code that deals with the factory of <B>Gadget</B>s. No existing code that uses <B>ProtoTypeFactory</B> without <B>Gadget</B> or <B>Gadget</B> without <B>ProtoTypeFactory</B> needs to be recompiled.</p>

<H3><FONT COLOR="#000080">Typedefs in Traits Classes</FONT></H3>

<p>If you look at traits classes written by other people, you&#146;ll find that they contain mostly <B>typedef</B>s. Providing appropriate <B>typedef</B>s is in fact one of the main reasons for having traits classes, and our prototype factory example provides ample opportunity to illustrate this. We have decided to let our factory hold pointers to prototype objects. However, it is entirely conceivable that the cloning operation of the prototype class returns the clone by value. To accommodate this kind of prototype, we let the factory&#146;s <B>GetClone</B> method obtain its result type from the traits class, rather than hardcode it to <B>Proto*</B>. <a href="list3.htm">Listing 3</a> shows a version of the prototype factory class template that incorporates this and some other improvements. The default implementation of the traits class defines the type that is returned from <B>GetClone</B> with the <B>typedef</B>:</p>

<pre>
typedef Proto* cloning_result_type;
</pre>

<p>If a particular type of prototype, say, <B>Gadget</B>, wishes to return the clone by value, it must define in its explicit specialization of the traits class:</p>

<pre>
typedef Gadget cloning_result_type;
</pre>

<p>Our prototype factory class was originally meant to hold plain pointers to the prototype objects. While we&#146;re at it customizing types, we might as well let the factory pull the type of object that is stored in the collection from the traits class. Again, <a href="list3.htm">Listing 3</a> incorporates this improvement by letting the traits class provide a <B>typedef</B> named <B>stored_type</B>. The type that is stored inside the factory can now be a plain old pointer, an actual prototype object, or even some sort of smart pointer, perhaps reference counted to automate the handling of lifetime issues.</p>

<H3><FONT COLOR="#000080">Booleans in Traits Classes</FONT></H3>

<p>Speaking of lifetime issues, now that we have made the type of the stored object customizable, we should look at what the destructor of the factory object does. As you would expect, the destructor is customized by routing its action through the traits class. The destructor itself loops over the collection of prototype objects and calls a function that is provided by the traits class on each object:</p>

<pre>
~ProtoTypeFactory()
{
  std::for_each(
    protoTypeCollection.begin(),
    protoTypeCollection.end(),
    DestroyPrototype()
   );
}
</pre>

<p>Here, <B>DestroyPrototype</B> is a function object whose overloaded <B>operator()</B> calls a static member function of the traits class to destroy each of the prototype objects (see <a href="list3.htm">Listing 3</a> for details).</p>
<p>Explicit specializations of the traits class for other kinds of prototypes may wish to perform some other action to destroy the object, such as calling a method like <B>DestroyWindow</B>, or they may elect to do nothing at all. This works fine, but there is still a flaw in this design. If a certain type of stored prototype needs no action at all upon destruction, then the factory&#146;s destructor loops over the collection of prototypes for nothing. This may not be a big deal in practice, but then maybe it is. One way of dealing with this would be to move the entire loop into the traits class. But that&#146;s really ugly, because the traits class should only make statements about the prototype class; it should not be burdened with implementation details of the factory class. The solution is to let the traits class provide a boolean that states if the prototype class needs to have anything done at all upon destruction. The factory&#146;s destructor then enters the loop over its collection of prototypes only if it&#146;s really necessary. <a href="list3.htm">Listing 3</a> shows how this is done. Notice how the boolean value that determines whether or not to do anything at all upon destruction of the prototypes is provided as an <B>enum</B> value. This is the standard way of doing it because it&#146;s more economical than using a boolean member variable: an <B>enum</B> does not require space inside the objects. In fact, you can get the <B>enum</B> value at class level without instantiating an object at all.</p>

<H3><FONT COLOR="#000080">Classes Providing Their Own Traits</FONT></H3>

<p>The default implementation of our <B>prototype_traits</B> in <a href="list3.htm">Listing 3</a> contains what we think is most likely to be appropriate in practice. If you expect most of the prototype classes to be written with knowledge and consideration of the <B>prototype_traits</B> class, then you should write the default implementation of the traits class in such a way that it pulls everything out of the prototype class itself. An explicit specialization is then necessary only for &#147;outside&#148; classes that are unaware of the traits class. <a href="list4.htm">Listing 4</a> shows how to do that. STL <B>iterator_traits</B> employ this technique.</p>

<H3><FONT COLOR="#000080">Function Overloading with Traits</FONT></H3>

<p>So far, the prototype factory code shows two ways of branching on the value of the template argument: one way is to use a function that is provided by the prototype class, as in the method <B>GetClone</B>. This type of branching happens at compile time. The other is to pull a boolean from the traits class and then acting conditionally according to that boolean, as shown in the destructor of <B>ProtoTypeFactory</B>. Here, the branching happens at run time. A third way of doing it is to use function overloading. Many STL  algorithms use this technique. <a href="list5.htm">Listing 5</a> demonstrates the general idea. The top-level algorithm calls an internal helper that takes an additional dummy argument of type <B>iterator_category</B>. The helper is overloaded on the type of the dummy object. Therefore, the appropriate version of the helper will be chosen at compile time, depending on the type of the iterator template argument.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  N.C. Myers. &#147;Traits: A New and Useful Template Technique,&#148; <I>C++ Report</I>, June 1995, &lt;www.cantrip.org/traits.html&gt;.</p>
<p><a name="2"></a>[2]  A. Alexandrescu. &#147;Traits: The if-else-then of Types,&#148; <I>C++ Report</I>, April 2000.</p>
<p><a name="3"></a>[3]  A. Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>
<p><a name="4"></a>[4]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns</I> (Addison-Wesley, 1994).</p>
<p><a name="5"></a>[5]  I believe it was Scott Meyers who came up with this succinct description of the purpose of traits classes. </p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2001/dec01/becker.zip"></a></h4>

</blockquote></body></html>
