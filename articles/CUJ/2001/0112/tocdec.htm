<HTML>
<HEAD>
<TITLE>December 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">December 2001<BR>
                Volume 19 Number 12</FONT></H3>
               
<H3><FONT COLOR="#FF0000">INTERNET AND NETWORK PROGRAMMING</FONT></H3>

<H4><A HREF="pee/pee.htm">Guidelines for Wrapping Sockets in Classes</A></H4>
<p><b>James Pee</b><br>
<i>Programming sockets has always tested one's attention to detail. Wrap stuff in a class and voil&agrave; &#151 Cake City.</i></p>

<H4><A HREF="sobczak/sobczak.htm">An Iostream-Compatible Socket Wrapper</A></H4>
<p><b>Maciej Sobczak</b><br>
<i>With suitable scaffolding, writing to a socket is as easy as <B>cout &lt;&lt; "Hello, world";</B>.</i></p>

<H3><FONT COLOR="#FF0000">FEATURE</FONT></H3>

<H4><A HREF="smeyers/smeyers.htm">Distinguishing STL Search Algorithms</A></H4>
<p><b>Scott Meyers</b><br>
<i>More cogent Meyers' counsel on using STL effectively &#151; this time on how to best find what you're looking for.</i></p>

<H3><FONT COLOR="#FF0000">BOOK REVIEW</FONT></H3>

<H4><A HREF="cirillo/cirillo.htm">A Look at Two C# Books</A></H4>
<p><b>reviewed by William Cirillo</b><br>
<i>Books on C# are accumulating apace. You might look here before you buy.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H4>

<H4><A HREF="becker/becker.htm">STL &amp; Generic Programming: Traits Classes</A></H4>
<p><b>Thomas Becker</b><br>
<i>Traits classes are a mainstay of the Standard C++ library. Here's an opportunity to understand them in depth.</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: Conventional Generic Algorithms</A></H4>
<p><b>Steve Dewhurst</b><br>
<i>Steve explains in eye-opening depth how it is that STL algorithms and iterators are so well-behaved and extensible. It's all about convention.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: A New Look at for Statements</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>A deeper look at the art of <b>for</b>-loop design.</i></p>

<H4><A HREF="rmeyers/rmeyers.htm">The New C: Variable Length Arrays, Part 2</A></H4>
<p><b>Randy Meyers</b><br>
<i>Unlike C or C++, C99 lets you define the bounds of multidimensional arrays at run time, much to scientific programmers' delight.</i></p>

<H4><A HREF="bootle/bootle.htm">Post-Mortem Debunker: Trust Me</A></H4>
<p><b>Stan Kelly-Bootle</b><br>
<i>Whom do you trust (apologies to Johnny Carson)? Bill Gates? Groucho Marx? English language "experts"? One thing is certain: you can trust Stan to get you thinking about most anything, including matters of trust.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1912/vinoski/vinoski.htm">&#147;Object Interconnections: Real-time CORBA, Part 1: Motivation and Overview&#148;</A></H4>
<p><b>by Douglas C. Schmidt and Steve Vinoski</b><br>
<i>This month the authors turn their attention to standard middleware for DRE systems. They present an overview of the Real-time CORBA specification, which provides standard interfaces and policies that allow applications to configure and control </I>processor resources<I> via thread pools, priority mechanisms, intra-process mutexes, and a global scheduling service; </I>communication resources<I> via protocol properties and explicit bindings; and </I>memory resources<I> via buffering requests in queues and bounding the size of thread pools.</i></p>

<H4><A HREF="../cexp1912/hyslop/hyslop.htm">&#147;Conversations: I&#146;d Hold Anything for You&#148;</A></H4>
<p><b>by Herb Sutter and Jim Hyslop</b><br>
<i>There are occasions when you have a variable whose type you don&#146;t know until run time. The common solution has been to use a union or a void pointer, both of which can have devastating effects if not used correctly. Now, thanks to the Boost library, there is a safe alternative.</i></p>

<H4><A HREF="../cexp1912/alexandr/alexandr.htm">&#147;Generic&lt;Programming&gt;: Typed Buffers (III)&#148;</A></H4>
<p>by Andrei Alexandrescu</b><br>
<i>In his final installment on typed buffers, Alexandrescu looks at copying and moving objects and offers some helpful solutions for getting around portable C and C++&#146;s suboptimal memory allocation.</i>

<H4><A HREF="../cexp1912/austern/austern.htm">&#147;The Standard Librarian: A Debugging Allocator&#148;</A></H4>
<p><b>by Matt Austern</b></p>
<i>Error-checking is always important and especially so when dealing with complicated interfaces like STL allocators. This column shows a class, <b>debug_allocator</b>, that performs some run-time checks. Techniques used in writing <b>debug_allocator</b>s turn out to be useful for a wide range of allocator adaptors.</i></p>
</blockquote></body></html>
