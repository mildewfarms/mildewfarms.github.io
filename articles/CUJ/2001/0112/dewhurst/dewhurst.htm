<HTML>   
     <HEAD>
<TITLE>December 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Conventional Generic Algorithms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Steve explains in eye-opening depth how it is that STL algorithms and iterators are so well-behaved and extensible. It's all about convention.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>One thread that runs through the individual installments of this column is recognition of the pervasive and beneficial presence of idiom in mid- and low-level design with C++. This adherence to idiom is nowhere more important than in the design of STL-compliant generic algorithms. In this installment of &#147;Common Knowledge,&#148; we&#146;ll look at some of the more common idiomatic &#147;rules&#148; for implementing these algorithms.</p>

<H3><FONT COLOR="#000080">A Not So Simple Generic Algorithm</FONT></H3>

<p>Consider a generic algorithm for swapping the values of two objects of the same type.</p>

<pre>
swap:
   take two things
   put the value of the first thing in a temp
   put the value of the second thing in the first thing
   put the value of the temp in the second thing
</pre>

<p>This representation is a basic outline of the implementation of the swap algorithm, but is imprecise about its lower-level meaning. Consider two potential implementations.</p>

<pre>
template &lt;class T&gt;
void swap1( T &amp;a, T &amp;b ) {
   T tmp;
   tmp = a;
   a = b;
   b = tmp;
}

template &lt;class T&gt;
void swap2( T &amp;a, T &amp;b ) {
   T tmp( a );
   a = b;
   b = tmp;
}
</pre>

<p>These implementations look similar, but can exhibit very different behavior and ranges of applicability. If we are interested in swapping the values of two integers, either version will succeed and will most probably result in the same object code being generated. However, the implementations will start to show divergent behavior with more complex, user-defined types.</p>

<pre>
std::string a( "hello" ), b( "Goodbye" );
swap1( a, b ); // works, slow
swap2( a, b ); // works, faster
</pre>

<p>The first version of swap forces the default initialization of a <B>string</B> temporary that is then overwritten by an assignment. This is not an error, necessarily, but it is probably less efficient than simply initializing the temporary with the desired value, as the second swap implementation does. Things can get more complex.</p>

<pre>
struct R {
   //...
};
struct S {
   S();
   S &amp;operator =( const S &amp; );
   //...
};
struct T {
   T( int );
   T( const T &amp; );
   T &amp;operator =( const T &amp; );
   //...
};
R r1, r2;
S s1, s2;
T t1(1), t2(2);
swap1( r1, r2 ); // might work...
swap2( r1, r2 ); // might work...
swap1( s1, s2 ); // works
swap2( s1, s2 ); // might work...
swap1( t1, t2 ); // error!
swap2( t1, t2 ); // works
</pre>

<p>The first implementation requires the presence of a default constructor, whereas the second requires a copy constructor. The implementation of a generic algorithm imposes a set of implicit requirements on its arguments. The requirements are both syntactic (is an assignment operator defined for this type?) and semantic (does assignment copy a value or make a telephone call?).</p>
<p>A moral relativist might conclude that either implementation could be correct, because each has areas of applicability not addressed by the other. That&#146;s wrong. The second implementation is correct, the first implementation is incorrect, and the reason is idiomatic. User-defined types in C++ that allow copying implement the copy operation idiom. This generally-understood-but-unwritten idiom says that any type that allows copying implements the operations using a copy constructor and assignment operator. Additionally, these operators have a de facto standard interface and meaning <a href="#1">[1]</a>. The second implementation of swap is written in the context of the copy operation idiom, and the first is not. We shall see that the idiomatic context of the STL provides a framework for extending the STL with new generic algorithms.</p>

<H3><FONT COLOR="#000080">An Unconventional Generic Algorithm</FONT></H3>
<p>Let&#146;s look at an occasionally useful generic algorithm for sorting <a href="#2">[2]</a>.</p>

<pre>
template &lt;class T&gt;
void slowSort( T a[], size_t n ) {
   for( int i = 0; i &lt; n; ++i )
      for( int j = i; j &lt; n; ++j )
         if( a[j] &lt; a[i] )
            swap( a[j], a[i] );
}
//...
int scores[] = { 82, 78, 93, 55, 98, 81 };
int n = sizeof(scores)/sizeof(scores[0]);
extern States states[50];
bool operator &lt;( const State &amp;, 
                 const State &amp; );
//...
slowSort( scores, n );
slowSort( states, 50 );
</pre>

<p>Unfortunately, the requirements imposed by this algorithm on its arguments are both implicit and unconventional. In order to know precisely how to use the algorithm, a programmer must either read the implementation in detail (never a good idea) or depend on the presence of accurate documentation accompanying the declaration (possible, but unlikely).</p>

<H3><FONT COLOR="#000080">An STL Generic Algorithm</FONT></H3>

<p>Here&#146;s the same algorithm implemented in a more conventional style.</p>

<pre>
template &lt;class Iter&gt;
void slowsort( Iter s, Iter e ) {
   for( Iter i(s); i != e; ++i )
      for( Iter j(i); j != e; ++j )
         if( *j &lt; *i )
            std::iter_swap( i, j );
}
//...
slowsort( scores, scores+n );
slowsort( states, states+50 );
</pre>

<p>STL-compliant generic algorithms are the subset of generic algorithms that &#147;play by the STL rules.&#148; These rules are essentially a set of normative expectations about conformance issues.</p>

<H3><FONT COLOR="#000080">Algorithms, Iterators, and Documentation</FONT></H3>

<p>A generic algorithm implicitly specifies requirements on its iterators through the syntax used to manipulate them and by the results expected by these operations.</p>

<pre>
template &lt;class I, class T&gt;
int myCount( I first, I last, 
             const T &amp;value ) {
   int n = 0;
   for( I i = first; i &lt; last; ++i )
      if( *i == value )
         ++n;
   return n;
}
</pre>

<p>In this version of count, similar to the standard <B>std::count</B> algorithm, we traverse a sequence, maintaining a count of how many times a particular value occurs in a sequence. It doesn&#146;t get much simpler than that, but we&#146;ve still managed to go wrong in several important ways.</p>
<p>First, we&#146;re making unnecessary demands on the qualifications of the iterator. This becomes obvious if we try to use <B>myCount</B> with a sequence drawn from a <B>list</B> or a file.</p>

<pre>
list&lt;int&gt; ilist;
//...
cout &lt;&lt; "5 count: "
   // error!
   &lt;&lt; myCount( ilist.begin(),
               ilist.end(), 5 ) 
   &lt;&lt; endl;
cout &lt;&lt; "5 count: "
   &lt;&lt; myCount(
      istream_iterator&lt;int&gt;(cin),
      // error!
      istream_iterator&lt;int&gt;(), 5 ) 
   &lt;&lt; endl;
</pre>

<p>As written, the algorithm requires a random access iterator, even though the algorithm&#146;s logical structure requires only an input iterator. The culprit is the use of <B>operator &lt;</B> in the loop condition &#151; which is available only with random access iterators &#151; when the use of <B>operator !=</B> would have served just as well.</p>
<p>Another problem concerns the naming of the iterator type. Since the algorithm requires only an input iterator, it should be documented as such <a href="#3">[3]</a>.</p>

<pre>
template &lt;typename InputIterator, 
          typename T&gt;
int myCount(
   InputIterator first,
   InputIterator last,
   const T &amp;value );
</pre>

<p>The Standard employs the sesquipedalian spellings <B>InputIterator</B>, <B>OutputIterator</B>, <B>ForwardIterator</B>, <B>BidirectionalIterator</B>, and the truly inspired <B>RandomAccessIterator</B> for these iterator capability classes. Stroustrup proposes a more compact de facto standard as <B>In</B>, <B>Out</B>, <B>For</B>, <B>Bi</B>, and <B>Ran</B> <a href="#4">[4]</a>. I don&#146;t know about you, but I&#146;ll string along with Bjarne on this one. Whatever your decision, for readability it&#146;s best to employ one of these two conventions; don&#146;t make up your own.</p>

<pre>
template &lt;typename In, typename T&gt;
int myCount( In first, In last, 
             const T &amp;value ) {
   int n = 0;
   for( In i( first ); i != last; ++i )
      if( *i == value )
         ++n;
   return n;
}</pre>

<H3><FONT COLOR="#000080">Comparators and Predicates</FONT></H3>

<p>Let&#146;s revisit our properly documented sorting algorithm.</p>

<pre>
template &lt;typename For&gt;
void slowsort( For s, For e ) {
   for( For i(s); i != e; ++i )
      for( For j(i); j != e; ++j )
         if( *j &lt; *i )
            std::iter_swap( i, j );
}
</pre>

<p>This version of the algorithm is effective, but it&#146;s inflexible because it assumes that an <B>operator &lt;</B> is available for the element type of the sequence. Earlier, we wanted to sort an array of <B>State</B>s and were forced to declare a non-member <B>operator &lt;</B> to provide the comparison. Another problem is that it is difficult to change the sorting criterion. For example, we may want to sort <B>State</B>s by name or by population, or we may want to sort integers in descending order or by their number of prime factors. STL algorithms that employ a comparator conventionally allow the comparator to be supplied explicitly.</p>

<pre>
template &lt;typename For, typename Comp&gt;
void slowsort( For s, For e, Comp c ) {
   for( For i(s); i != e; ++i )
      for( For j(i); j != e; ++j )
         if( c( *j, *i ) )
            std::iter_swap( i, j );
}
</pre>

<p>The same is true for algorithms that employ predicates. The <B>std::for_each</B> algorithm performs an operation on each element of a sequence and then returns a copy of the operation. It would be more flexible to specify which elements of the sequence should be so manipulated <a href="#5">[5]</a>.</p>

<pre>
template &lt;typename For, typename Op,
          typename Pred&gt;
Op myForeach( For b, For e, Op op, 
              Pred p ) {
   while( b != e ) {
      if( p( *b ) )
         op( *b );
      ++b;
   }
   return op;
}
template &lt;typename T&gt;
struct True 
  : public std::unary_function&lt;T,bool&gt; {
   bool operator ()( const T &amp; ) const
      { return true; }
};
</pre>

<p>Generally, an implementation will provide two versions of an algorithm. One will use the &#147;normal&#148; default comparator or predicate (&#147;less than&#148; and &#147;always true&#148; respectively), and the other will allow the comparator or predicate to be supplied explicitly.</p>

<H3><FONT COLOR="#000080">Compile Time Queries</FONT></H3>

<p>We still have a problem with our version of the count algorithm.</p>

<pre>
template &lt;typename In, typename T&gt;
int myCount( In first, In last, 
             const T &amp;value );
//...
TerabyteContainer&lt;int&gt; c;
cout &lt;&lt; "5 count: "
   // oops!
   &lt;&lt; myCount( c.begin(), c.end(), 5 )
   &lt;&lt; endl;
</pre>

<p>What if the result is too big to be represented in an <B>int</B>? The best (or perhaps worst) that can happen is we&#146;ll silently truncate the result or return a large negative number. It&#146;s much better to ask the iterator what its <B>difference_type</B> is <a href="#6">[6]</a>. For reasons that we will explore in a future installment of this column, we actually do not ask the iterator directly, but rather ask an ancillary <B>traits</B> class <a href="#7">[7]</a>.</p>

<pre>
template &lt;typename In, typename T&gt;
typename std::iterator_traits&lt;In&gt;
  ::difference_type
myCount( In first, In last, 
         const T &amp;value ){
   typename std::iterator_traits&lt;In&gt;
      ::difference_type n = 0;
   for( In i = first; i != last; ++i )
   if( *i == value )
      ++n;
   return n;
}
</pre>

<p>Note that we had to use the <B>typename</B> keyword to let the compiler know that the nested name <B>difference_type</B> within <B>iterator_traits&lt;In&gt;</B> was a type name. Otherwise, because the content of <B>iterator_traits&lt;In&gt;</B> is unknown at the time the <B>myCount</B> template is parsed, the compiler would have assumed that <B>difference_type</B> was not a type name, and the parse would have failed. Yes, if you&#146;re relatively new to templates and the STL, the syntax is challenging. Never fear. After a while, it will start to look normal (although it&#146;s not guaranteed that you will still be regarded as normal by society in general by that point).</p>
<p>Now we can ask <B>TerabyteContainer&lt;int&gt;::iterator</B> what the return type of <B>myCount</B> should be, rather than assuming an <B>int</B> will be adequate. All STL iterators are capable of answering, through the corresponding instantiation of <B>iterator_traits</B>, the following questions about themselves:</p>

<OL><LI>What is the type of a temporary variable that can hold a value of the element type to which the iterator refers? <B>value_type</B></LI>
<LI>What is the type of a pointer to the element? <B>pointer</B></LI>
<LI>What is the type of a reference to the element? <B>reference</B></LI>
<LI>What category of iterator is it; random access, bidirectional, forward, input, or output? <B>iterator_category</B></LI>
<LI>What type is used to represent the distance between two iterators; the length of a sequence? <B>difference_type</B></LI></OL

<p>The first item, <B>value_type</B>, looks a little unusual. Why would we be interested in the type of a temporary rather than the type of the sequence element? Consider the following algorithm for finding the minimum value within a non-empty sequence.</p>

<pre>
template &lt;typename In&gt;
typename iterator_traits&lt;In&gt;::value_type
min_value( In first, In last ) {
   typename iterator_traits&lt;In&gt;::value_type min = *first;
   while( ++first != last )
      if( *first &lt; min )
         min = *first; // requires non-const!
   return min;
}
</pre>

<p>If we want to determine the minimum value contained within a sequence of constant elements, <B>value_type</B> must be assignable. That is, if the element type is non-constant, <B>value_type</B> is the same as the element type. If the element type is constant, <B>value_type</B> strips the <B>const</B> qualifier from it.</p>

<pre>
int const g[] = { 9, 8, 1 };
// works!
int const minimum = min_value( g, g+3 );
</pre>

<H3><FONT COLOR="#000080">Compile Time Conditionals</FONT></H3>

<p>It is also often convenient to determine the capabilities of an iterator at compile time. For example, even though I have a strong preference for the <B>slowsort</B> algorithm, I recognize it may not be the best choice for sorting a 100,000-element vector. What we&#146;d like to do is select the proper sorting algorithm at compile time so as not to generate any unnecessary code or incur any run-time cost.</p>
<p>An iterator&#146;s <B>iterator_category</B> tells us whether the iterator is input, output, forward, bidirectional, or random access. The <B>iterator_category</B> is one of five standard types arranged in a hierarchy.</p>

<pre>
struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag
   : public input_iterator_tag {};
struct bidirectional_iterator_tag
   : public forward_iterator_tag {};
struct random_access_iterator_tag
   : public bidirectional_iterator_tag {};
</pre>

<p>The is-a relationships within the hierarchy largely mirror the capabilities of the different iterator categories <a href="#8">[8]</a>. For example, a random access iterator is also a bidirectional iterator, a forward iterator, an input iterator, and an output iterator. A forward iterator is also an input and an output iterator. Therefore, we can ask an iterator for its category by accessing its corresponding iterator traits, and then we can determine if that category fulfills the requirements of a particular iterator category by using the is-a relationships within the iterator tag hierarchy.</p>

<pre>
void informUs( forward_iterator_tag )
   { cout &lt;&lt; "it&#146;s some kind of forward" &lt;&lt; endl; }
void informUs( ... )
   { cout &lt;&lt; "it&#146;s not forward" &lt;&lt; endl; }
template &lt;typename Iter&gt;
void informUsAbout( Iter ) {
   typedef typename
      iterator_traits&lt;Iter&gt;::iterator_category Category;
   if( typeid(Category) ==
      typeid(bidirectional_iterator_tag) )
      cout &lt;&lt; "it&#146;s exactly a bidirectional" &lt;&lt; endl;
   else
      informUs( Category() );
}
//...
vector&lt;State&gt;::iterator i;
istream_iterator&lt;int&gt; j;
list&lt;double&gt;::iterator k;
vector&lt;float&gt; v;
informUsAbout( i ); // some kind of forward
informUsAbout( j ); // not forward
informUsAbout( k ); // exactly bidirectional
informUsAbout( back_inserter(v) ); // not forward
</pre>

<p>Cute, but a more practical use of these compile-time queries is to perform compile-time algorithm selection based on the category of iterator.</p>

<pre>
template &lt;typename Ran&gt;
inline void
mySortImpl( Ran b, Ran e, std::random_access_iterator_tag )
   { sort( b, e ); }

template &lt;typename For&gt;
inline void
mySortImpl( For b, For e, std::forward_iterator_tag )
   { slowsort( b, e ); }

template &lt;typename For&gt;
inline void mySort( For b, For e ) {
   typedef typename
      std::iterator_traits&lt;For&gt;::iterator_category Cat;
   mySortImpl( b, e, Cat() );
}
</pre>

<p>The <B>mySort</B> algorithm uses a combination of the ability to ask a question of an iterator, overloading, and inlining to achieve optimal algorithm selection with no run-time cost. This is a common technique used by many generic algorithms.</p>

<pre>
list&lt;State&gt; states;
deque&lt;int&gt; cards;
//...
mySort( states.begin(), states.end() ); // uses slowsort
mySort( cards.begin(), cards.end() ); // uses std::sort
</pre>

<H3><FONT COLOR="#000080">Convention Rules!</FONT></H3>

<p>Writing effective generic algorithms in the context of the STL requires adherence to a number of conventions. This column has examined several of the more common ones. In summary, STL-compliant generic algorithms obey the following conventions:</p>
<OL><LI>They use standard naming conventions to document proper use.</LI>
<LI>They are written to the least powerful iterator for which there is an efficient implementation.</LI>
<LI>They don&#146;t hard-code predicates or comparators, unless a more flexible alternative is also provided.</LI>
<LI>They may ask compile-time questions of iterators.</LI>
<LI>Type-based control decisions are made at compile time, not run time.</LI></OL>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Of course, moral rectitude must also permit some degree of relativism. Even as fundamental an idiom as the copy operation idiom has exceptions. For one example, see S.C. Dewhurst, &#147;Common Knowledge: Split Idioms,&#148; <I>C/C++ Users Journal</I>, June 2001.</p>
<p><a name="2">[2]  Yes, it&#146;s sometimes a better option than more sophisticated sorting algorithms with better asymptotic complexity. It&#146;s left as an exercise to the reader to figure out when and why.</p>
<p><a name="3">[3]  This declaration illustrates an emerging useful convention. The language allows the keywords <B>typename</B> and <B>class</B> to be used interchangeably in this context, where either is used to indicate that the following template argument is a type name. However, some authors and programmers now use <B>class</B> to indicate that the argument must be of class type, and <B>typename</B> to indicate that the argument may be any type name, class, or otherwise.</p>
<p><a name="4">[4]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, 3rd edition (Addison Wesley, 1997), p. 511.</p>
<p><a name="5">[5]  Of course, the predicate that makes the selection could be embedded in the operation itself, but it is usually both clearer and more efficient to separate explicitly these two aspects of processing a sequence.</p>
<p><a name="6">[6]  This is instead known, for reasons that are beyond my ability to forgive, as <B>distance_type</B> in &#147;one major implementation.&#148; Does this cause problems? Yes, it does.</p>
<p><a name="7">[7]  For more on traits, see Andrei Alexandrescu, &#147;Traits: The else-if-then of Types,&#148; <I>C++ Report</I>, April 2000.</p>
<p><a name="8">[8]  Note the curious fact that the tag type for forward iterators is derived only from the tag type for input iterators, rather than both the input and output tags. In <I>The C++ Programming Language</I>, 3rd edition, p. 554, Bjarne Stroustrup has the following to say: &#147;Looking at the operations supported by input and forward iterators ... we would expect <B>forward_iterator_tag</B> to be derived from <B>output_iterator_tag</B> as well as from <B>input_iterator_tag</B>. The reasons that it is not are obscure and probably invalid. However, I have yet to see an example in which the derivation would have simplified real code.&#148; In <I>Generic Programming and the STL</I> (Addison Wesley, 1998), p. 181, Matt Austern says, &#147;[The inheritance hierarchy] has no deep significance. It is nothing more than a minor convenience ... Inheritance from <B>output_iterator_tag</B> is left out because it is unnecessary for that purpose.&#148;</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
