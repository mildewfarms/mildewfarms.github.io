<HTML>   
     <HEAD>
<TITLE>December 2001/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: A New Look at for Statements</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>A deeper look at the art of for-loop design.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>During C++ standardization, the definition of the <B>for</B> statement changed: if a <B>for</B> statement defines a variable, the scope of that variable now ends at the end of the <B>for</B> statement rather than at the end of the surrounding block. This change creates a new reason to prefer a <B>for</B> statement to a <B>while</B> statement in some contexts, namely when it is desirable to limit the scope of a temporary variable that controls a loop.</p>
<p>Most of the contexts in which we should prefer a <B>for</B> to a <B>while</B> are well known. However, Walter Brown, a C++ standards committee member from the Fermi National Accelerator Laboratory, recently pointed out to us an elegant context that we had not previously seen, and that we think deserves a wider audience.</p>
<p>The rest of this article will explain the background and illustrate the technique.</p>

<H3><FONT COLOR="#000080">An Example</FONT></H3>

<p>Suppose we want to compute the sum of the integers in the range <B>[1, 10)</B> &#151; that is, the integers greater than or equal to 1 and less than 10. We might do so this way:</p>

<pre>
int sum = 0;
int i = 1;
while (i &lt; 10) {
   sum += i;
   ++i;
}
</pre>

<p>Alternatively, we might do it this way:</p>

<pre>
int sum = 0;
for (int i = 1; i &lt; 10; ++i)
   sum += i;
</pre>

<p>Once upon a time, these two program fragments had exactly the same meaning. However, as part of standardizing C++, the meaning changed slightly. If we amend our first fragment:</p>

<pre>
int sum = 0;
int i = 1;
while (i &lt; 10) {
   sum += i;
   ++i;
}

// prints 10
std::cout &lt;&lt; i &lt;&lt; std::endl;
</pre>

<p>we can print the value that <B>i</B> has after the loop completes. In contrast, the same technique fails for the other fragment:</p>

<pre>
int sum = 0;
for (int i = 1; i &lt; 10; ++i)
   sum += i;

// should not compile
std::cout &lt;&lt; i &lt;&lt; std::endl;
</pre>

<p>The modified version of our second fragment should not compile because the variable <B>i</B> is no longer in scope: its scope ends at the end of the <B>for</B> statement.</p>
<p>More generally, if we ignore the effects of the <B>break</B> and <B>continue</B> statements, which are beyond the scope of this article, a statement of the form:</p>

<pre>
for (statement-1  expression-1; 
     expression-2)
   statement-2
</pre>

<p>used to mean the same as:</p>

<pre>
statement-1
while (expression-1) {
   statement-2
   expression-2;
}
</pre>

<p>In Standard C++, <B>our</B> for statement means the same as:</p>

<pre>
{ statement-1
while (expression-1) {
   statement-2
   expression-2;
} }
</pre>

<p>where the extra braces serve to bound the scope of any variable declared as part of <B>statement-1</B>.</p>
<p>Note, incidentally, that this example does not show a semicolon at the end of <B>statement-1</B> or <B>statement-2</B>. The reason is that statements usually end with semicolons of their own, so it is not appropriate to insert an additional semicolon.</p>

<H3><FONT COLOR="#000080">Which Kind of Statement Should We Use?</FONT></H3>

<p>C and C++ programmers have long faced the question of whether to use a <B>for</B> or a <B>while</B> statement to control a loop. Our own rule of thumb has been to prefer a <B>for</B> when we want to associate a variable with the loop that should not continue to exist after the loop is finished. So, for example, we would prefer a <B>for</B> to a <B>while</B> for summing the elements in <B>[0, 10)</B>, but we would prefer a <B>while</B> if we were not defining a variable as part of the loop.</p>
<p>Note that such variables do not have to be integers. For example, we might traverse a linked list this way:</p>

<pre>
for (Node* p = head; p; p = p-&gt;next) {
   // process a list element
}
</pre>

<p>with the idea that we would not want the variable <B>p</B> to persist after the loop completes. We can modernize this example by using a standard-library class and defining an iterator instead of a pointer:</p>

<pre>
for (std::list::const_iterator it = 
   my_list.begin();
   it != my_list.end(); ++it) {
   // process a list element
}
</pre>

<H3><FONT COLOR="#000080">The Role of the Loop Variable</FONT></H3>

<p>In all of our <B>for</B>-statement examples, there is a variable that fills the conceptual role of an iterator: it takes on a value that either is, or is associated with, each element of a sequence in turn. Indeed, in thinking about the programs we have written, we cannot recall ever having written a <B>for</B> statement that does not have such a variable associated with it. We have seen other people&#146;s programs in which the <B>statement-1</B> that begins the <B>for</B> statement does not define or initialize a variable, and in which it may even be empty, but we have never written such a <B>for</B> statement ourselves. For example, we strongly prefer:</p>

<pre>
while (*p != ' ')
   ++p;
</pre>

<p>to</p>

<pre>
for ( ; *p != ' '; ++p);
</pre>

<p>even though the latter is more succinct.</p>

<H3><FONT COLOR="#000080">An Elegant Technique</FONT></H3>

<p>Now that you know the background, we can show you the beautifully elegant technique that Walter Brown recently mentioned to us.</p>
<p>Let&#146;s look at our first program fragment again, and let&#146;s change it so that instead of summing a fixed sequence, it computes the sum of a sequence of integers that it reads from the standard input stream. Until recently, we would have solved that problem this way:</p>

<pre>
int sum = 0;
int x;

while (std::cin &gt;&gt; x)
   sum += x;
</pre>

<p>We have been writing input loops like this one as long as we&#146;ve been using C++ &#151; more than 15 years. Imagine our surprise, then, when Walter showed us the following alternative:</p>

<pre>
int sum = 0;

for (int x; std::cin &gt;&gt; x; )
   sum += x;
</pre>

<p>Here, the <B>statement-1</B> is <B>int x;</B> (including the semicolon), the <B>expression-1</B> is <B>std::cin &gt;&gt; x</B>, and the <B>expression-2</B> is empty.</p>
<p>This rewrite helps us in two ways. First, it causes the variable <B>x</B> to disappear after the loop finishes, thereby removing the risk that someone might use <B>x</B> by mistake later. Second, it makes clear that, like the variables that we defined in our earlier <B>for</B> loops, the variable <B>x</B> is associated in turn with each element of the sequence that we are manipulating.</p>
<p>Of course, this technique will work with other functions as well, such as <B>getline</B>.</p>
<p>Incidentally, we could also have written this last example as:</p>

<pre>
int sum = 0;

for (int x; std::cin &gt;&gt; x; sum += x) ;
</pre>

<p>We prefer not to use this form for an important reason: it mixes the code that controls the loop with the body of the loop itself. In other words, we prefer to use the form:</p>

<pre>
for (statements that control the loop)
   the body of the loop
</pre>

<p>to make our intention as clear as possible.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>

<p>Every once in a while a technique comes along that is such a blatant improvement, and so obvious in retrospect, that it is hard to understand why it was not already widespread. It is hard to think of a better recent example of the fact that ideas that are obvious in retrospect are not always obvious beforehand. Thank you, Walter Brown, for pointing this technique out to us, and for giving us permission to publicize it.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>

</blockquote></body></html>
