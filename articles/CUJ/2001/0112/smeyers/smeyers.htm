<HTML>   
     <HEAD>
<TITLE>December 2001/Distinguishing STL Search Algorithms</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Distinguishing STL Search Algorithms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Scott Meyers</FONT></H3>

<BLOCKQUOTE>
<p>More cogent Meyers' counsel on using STL effectively &#151; this time on how to best find what you're looking for.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><i><B>[This article is based the book, Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library. Adapted from item 45. &copy; 2001 Addison-Wesley. Reprinted with permission of Pearson Education, Inc.]</i></B></p>
<p>So you want to look for something, and you have a container or you have iterators demarcating a range where you think it&#146;s located. How do you conduct the search? Your quiver is fairly bursting with arrows: <B>count</B>, <B>count_if</B>, <B>find</B>, <B>find_if</B>, <B>binary_search</B>, <B>lower_bound</B>, <B>upper_bound</B>, and <B>equal_range</B>. Decisions, decisions! How do you choose?</p>
<p>Easy. You reach for something that&#146;s fast and simple. The faster and simpler, the better.</p>
<p>For the time being, I&#146;ll assume that you have a pair of iterators specifying a range to be searched. Later, I&#146;ll consider the case where you have a container instead of a range.</p>
<p>In selecting a search strategy, much depends on whether your iterators define a sorted range. If they do, you can get speedy (usually logarithmic-time) lookups via <B>binary_search</B>, <B>lower_bound</B>, <B>upper_bound</B>, and <B>equal_range</B>. If the iterators don&#146;t demarcate a sorted range, you&#146;re limited to the linear-time algorithms <B>count</B>, <B>count_if</B>, <B>find</B>, and <B>find_if</B>. In what follows, I&#146;ll ignore the <B>_if</B> variants of <B>count</B> and <B>find</B>, just as I&#146;ll ignore the variants of <B>binary_search</B>, <B>lower_</B> and <B>upper_bound</B>, and <B>equal_range</B> taking a predicate. Whether you rely on the default search predicate or you specify your own, the considerations for choosing a search algorithm are the same.</p>
<p>If you have an unsorted range, your choices are <B>count</B> or <B>find</B>. They answer slightly different questions, so it&#146;s worth taking a closer look at them. <B>count</B> answers the question, &#147;Is the value there, and if so, how many copies are there?&#148; while <B>find</B> answers the question, &#147;Is it there, and if so, where is it?&#148;</p>
<p>Suppose all you want to know is whether some special <B>Widget</B> value <B>w</B> is in a <B>list</B>. Using <B>count</B>, the code looks like this:</p>

<pre>
list&lt;Widget&gt; lw;    // list of Widgets
Widget w;           // special Widget 
                    // value
...
if (count(lw.begin(), lw.end(), w)) {
   ...              // w is in lw
} else {
   ...              // it&#146;s not
}
</pre>

<p>This demonstrates a common idiom: using <B>count</B> as an existence test. <B>count</B> returns either zero or a positive number, so we rely on the conversion of nonzero values to true and zero to false. It would arguably be clearer to be more explicit about what we are doing,</p>

<pre>
if (count(lw.begin(), lw.end(), w) != 0)
...
</pre>

<p>and some programmers write it that way, but it&#146;s common to rely on the implicit conversion, as in the original example.</p>
<p>Compared to that original code, using <B>find</B> is slightly more complicated, because you have to test <B>find</B>&#146;s return value against the <B>list</B>&#146;s <B>end</B> iterator:</p>

<pre>
if (find(lw.begin(), lw.end(), 
                     w) != lw.end()) {
   ...              // found it
} else {
   ...              // didn&#146;t find it
}
</pre>

<p>For existence testing, the idiomatic use of <B>count</B> is slightly simpler to code. At the same time, it&#146;s also less efficient when the search is successful, because <B>find</B> stops once it&#146;s found a match, while <B>count</B> must continue to the end of the range looking for additional matches. For most programmers, <B>find</B>&#146;s edge in efficiency is enough to justify the slight increase in usage complexity.</p>
<p>Often, knowing whether a value is in a range isn&#146;t enough. Instead, you&#146;ll want to know the first object in the range with the value. For example, you might want to print the object, you might want to insert something in front of it, or you might want to erase it. When you need to know not just whether a value exists but also which object (or objects) has that value, you need find:</p>

<pre>
list&lt;Widget&gt;::iterator i =
   find(lw.begin(), lw.end(), w);
if (i != lw.end()) {
   ...              // found it, i points
                    // to the first one
} else {
   ...              // didn&#146;t find it
}
</pre>

<p>For sorted ranges, you have other choices, and you&#146;ll definitely want to use them. <B>count</B> and <B>find</B> run in linear time, but the search algorithms for sorted ranges (<B>binary_search</B>, <B>lower_bound</B>, <B>upper_bound</B>, and <B>equal_range</B>) run in logarithmic time.</p>
<p>The shift from unsorted ranges to sorted ranges leads to another shift: from using equality to determine whether two values are the same to using equivalence <a href="#1">[1]</a>. That&#146;s because the <B>count</B> and <B>find</B> algorithms both search using equality, while <B>binary_search</B>, <B>lower_bound</B>, <B>upper_bound</B>, and <B>equal_range</B> employ equivalence.</p>
<p>To test for the existence of a value in a sorted range, use <B>binary_search</B>. Unlike <B>bsearch</B> in the Standard C library (and hence also in the Standard C++ library), <B>binary_search</B> returns only a <B>bool</B>: whether the value was found. <B>binary_search</B> answers the question, &#147;Is it there?,&#148; and its answer is either yes or no. If you need more information than that, you need a different algorithm.</p>
<p>Here&#146;s an example of <B>binary_search</B> applied to a sorted vector:</p>

<pre>
vector&lt;Widget&gt; vw;  // create vector,
                    // put data
...                 // into it, sort the
                    // data

sort(vw.begin(), vw.end());
Widget w;           // value to search
                    // for
...
if (binary_search(vw.begin(), vw.end(),
                              w)) {
   ...              // w is in vw
} else {
   ...              // it&#146;s not
}
</pre>

<p>If you have a sorted range and your question is, &#147;Is it there, and if so, where is it?&#148; you want <B>equal_range</B>, but you may think you want <B>lower_bound</B>. I&#146;ll discuss <B>equal_range</B> shortly, but first, let&#146;s examine <B>lower_bound</B> as a way of locating values in a range.</p>
<p>When you ask <B>lower_bound</B> to look for a value, it returns an iterator pointing to either the first copy of that value (if it&#146;s found) or to the proper insertion location for that value (if it&#146;s not). <B>lower_bound</B> thus answers the question, &#147;Is it there? If so, where is the first copy, and if it&#146;s not, where would it go?&#148; As with <B>find</B>, the result of <B>lower_bound</B> must be tested to see if it&#146;s pointing to the value you&#146;re looking for. Unlike <B>find</B>, you can&#146;t just test <B>lower_bound</B>&#146;s return value against the <B>end</B> iterator. Instead, you must test the object <B>lower_bound</B> identifies to see if that&#146;s the value you want.</p>
<p>Many programers use <B>lower_bound</B> like this:</p>

<pre>
vector&lt;Widget&gt;::iterator i =
   lower_bound(vw.begin(), vw.end(), w);

// make sure i points to an object;
// make sure the object has the
// correct value; this has a bug!
if (i != vw.end() &amp;&amp; *i == w) {   
   // found the value, i points to the
   // first object with that value
   ...
} else {
   ... // not found
}
</pre>

<p>This works most of the time, but it&#146;s not really correct. Look again at the test to determine whether the desired value was found:</p>

<pre>
if (i != vw.end() &amp;&amp; *i == w) ...
</pre>

<p>This is an <I>equality</I> test, but <B>lower_bound</B> searched using <I>equivalence</I>. Most of the time, tests for equivalence and equality yield the same results, but as note <a href="#1">[1]</a> demonstrates, it&#146;s not that hard to come up with situations where equality and equivalence are different. In such situations the code above is wrong.</p>
<p>To do things properly, you must check to see if the iterator returned from <B>lower_bound</B> points to an object with a value that is equivalent to the one you searched for. You could do that manually, but it can get tricky, because you have to be sure to use the same comparison function that <B>lower_bound</B> used. In general, that could be an arbitrary function (or function object). If you passed a comparison function to <B>lower_bound</B>, you&#146;d have to be sure to use the same comparison function in your hand-coded equivalence test. <I>That</I> would mean that if you changed the comparison function you passed to <B>lower_bound</B>, you&#146;d have to make the corresponding change in your check for equivalence. Keeping the comparison functions in sync isn&#146;t rocket science, but it is another thing to remember, and I suspect you already have plenty you&#146;re expected to keep in mind.</p>
<p>There is an easier way: use <B>equal_range</B>. <B>equal_range</B> returns a pair of iterators, the first equal to the iterator <B>lower_bound</B> would return, the second equal to the one <B>upper_bound</B> would return (i.e., the one-past-the-end iterator for the range of values equivalent to the one searched for). <B>equal_range</B>, then, returns a pair of iterators that demarcate the range of values equivalent to the one you searched for. A well-named algorithm, no? (<B>equivalent_range</B> would be better, of course, but <B>equal_range</B> is still pretty good.)</p>
<p>There are two important observations about <B>equal_range</B>&#146;s return value. First, if the two iterators are the same, that means the range of objects is empty; the value wasn&#146;t found. That observation is the key to using <B>equal_range</B> to answer the question, &#147;Is it there?&#148; You use it like this:</p>

<pre>
vector&lt;Widget&gt; vw;
...
sort(vw.begin(), vw.end());

// convenience typedefs
typedef vector&lt;Widget&gt;::iterator VWIter;
typedef pair&lt;VWIter, VWIter&gt; VWIterPair;

VWIterPair p =
   equal_range(vw.begin(), vw.end(), w);

// if equal_range didn&#146;t return
// an empty range...
if (p.first != p.second) {  
   // found it, p.first points to the
   // first one and p.second
   // points to one past the last
   ...
} else {
   // not found, both p.first and
   // p.second point to the
   // insertion location for
   // the value searched for
   ...
}
</pre>

<p>This code uses only equivalence, so it is always correct.</p>
<p>The second thing to note about <B>equal_range</B>&#146;s return value is that the distance between its iterators is equal to the number of objects in the range, i.e., the objects with a value equivalent to the one that was searched for. As a result, <B>equal_range</B> not only does the job of <B>find</B> for sorted ranges, it also replaces <B>count</B>. For example, to locate the <B>Widget</B>s in <B>vw</B> with a value equivalent to <B>w</B> and then print out how many such <B>Widget</B>s exist, you could do this:</p>

<pre>
VWIterPair p =
   equal_range(vw.begin(), vw.end(), w);
cout &lt;&lt; "There are "
     &lt;&lt; distance(p.first, p.second)
     &lt;&lt; " elements in vw equivalent to w.";
</pre>

<p>So far, our discussion has assumed we want to search for a value in a range, but sometimes we&#146;re more interested in finding a <I>location</I> in a range. For example, suppose we have a <B>Timestamp</B> class and a <B>vector</B> of <B>Timestamp</B>s that&#146;s sorted so that older timestamps come first:</p>

<pre>
class Timestamp { ... };

// returns whether lhs
// precedes rhs in time
bool operator&lt;(const Timestamp&amp; lhs,
               const Timestamp&amp; rhs);

// create vector, fill it with
// data, sort it so that older
// times precede newer ones
vector&lt;Timestamp&gt; vt;
...
sort(vt.begin(), vt.end());
</pre>

<p>Now suppose we have a special timestamp, <B>ageLimit</B>, and we want to remove from <B>vt</B> all the timestamps that are older than <B>ageLimit</B>. In this case, we don&#146;t want to search <B>vt</B> for a <B>Timestamp</B> equivalent to <B>ageLimit</B>, because there might not be any elements with that exact value. Instead, we need to find a <I>location</I> in <B>vt</B>: the first element that is no older than <B>ageLimit</B>. This is as easy as easy can be, because <B>lower_bound</B> will give us precisely what we need:</p>

<pre>
Timestamp ageLimit;
...
// eliminate from vt all objects that
// precede ageLimit&#146;s value
vt.erase(vt.begin(), lower_bound(vt.begin(),
                                 vt.end(),
                                 ageLimit));
</pre>

<p>If our requirements change slightly so that we want to eliminate all the timestamps that are at least as old as <B>ageLimit</B>, we need to find the location of the first timestamp that is <I>younger</I> than <B>ageLimit</B>. That&#146;s a job tailor-made for <B>upper_bound</B>:</p>

<pre>
// eliminate from vt all objects
// that precede or are equivalent
// to ageLimit&#146;s value
vt.erase(vt.begin(), upper_bound(vt.begin(),
                                 vt.end(),
                                 ageLimit));
</pre>

<p>upper_bound</B> is also useful if you want to insert things into a sorted range so that objects with equivalent values are stored in the order in which they were inserted. For example, we might have a sorted <B>list</B> of <B>Person</B> objects, where the objects are sorted by name:</p>

<pre>
class Person {
public:
   ...
   const string&amp; name() const;
   ...
};
struct PersonNameLess:
   public binary_function&lt;Person,
                  Person, 
                  bool&gt; {
   bool operator() (const Person&amp; lhs,
             const Person&amp; rhs) const
   { return lhs.name() &lt; rhs.name(); }
};
list&lt;Person&gt; lp;
...
// sort lp using PersonNameLess
lp.sort(PersonNameLess());
</pre>

<p>To keep the <B>list</B> sorted the way we desire (by name, with equivalent names stored in the order in which they are inserted), we can use <B>upper_bound</B> to specify the insertion location:</p>

<pre>
Person newPerson;
...
// insert newPerson after the last
// object in lp that precedes or
// is equivalent to newPerson
lp.insert(upper_bound(lp.begin(),
                      lp.end(),
                      newPerson,
                      PersonNameLess()),
          newPerson);
</pre>

<p>This works fine and is quite convenient, but it&#146;s important not to be misled by this use of <B>upper_bound</B> into thinking that we&#146;re magically looking up an insertion location in a <B>list</B> in logarithmic time. We&#146;re not. Because we&#146;re working with a <B>list</B>, the lookup takes linear time, but it performs only a logarithmic number of comparisons.</p>
<p>Up to this point, I have considered only the case where you have a pair of iterators defining a range to be searched. Often you have a container, not a range. In that case, you must distinguish between the sequence and associative containers. For the standard sequence containers (<B>vector</B>, <B>string</B>, <B>deque</B>, and <B>list</B>), you follow the advice I&#146;ve outlined in this article, using the containers&#146; <B>begin</B> and <B>end</B> iterators to demarcate the range.</p>
<p>The situation is different for the standard associative containers (<B>set</B>, <B>multiset</B>, <B>map</B>, and <B>multimap</B>), because they offer member functions for searching that are generally better choices than the STL algorithms <a href="#2">[2]</a>. Fortunately, the member functions usually have the same names as the corresponding algorithms, so where the foregoing discussion recommends you choose algorithms named <B>count</B>, <B>find</B>, <B>equal_range</B>, <B>lower_bound</B>, or <B>upper_bound</B>, you simply select the same-named member functions when searching associative containers. <B>binary_search</B> calls for a different strategy, because there is no member function analogue to this algorithm. To test for the existence of a value in a <B>set</B> or <B>map</B>, use <B>count</B> in its idiomatic role as a test for membership:</p>

<pre>
// create set, put data into it
set&lt;Widget&gt; s;
...
// w still holds the value to search for
Widget w;
...
if (s.count(w)) {
   // a value equivalent to w exists
   ...
} else {
   // no such value exists
   ...
}
</pre>

<p>To test for the existence of a value in a <B>multiset</B> or <B>multimap</B>, <B>find</B> is generally superior to <B>count</B>, because <B>find</B> can stop once it&#146;s found a single object with the desired value, while <B>count</B>, in the worst case, must examine every object in the container.</p>
<p>However, <B>count</B>&#146;s role for counting things in associative containers is secure. In particular, it&#146;s a better choice than calling <B>equal_range</B> and applying <B>distance</B> to the resulting iterators. For one thing, it&#146;s clearer: <B>count</B> means &#147;count.&#148; For another, it&#146;s easier; there&#146;s no need to create a pair and pass its components to <B>distance</B>. For a third, it&#146;s probably a little faster.</p>
<p>Given everything we&#146;ve considered in this article, where do we stand? <a href="tab1.htm">Table 1</a> says it all. In the column summarizing how to work with sorted ranges, the frequency with which <B>equal_range</B> occurs may be surprising. That frequency arises from the importance of testing for equivalence when searching. With <B>lower_bound</B> and <B>upper_bound</B>, it&#146;s too easy to fall back on equality tests, but with <B>equal_range</B>, testing only for equivalence is the natural thing to do. In the second row for sorted ranges, <B>equal_range</B> beats out <B>find</B> for an additional reason: <B>equal_range</B> runs in logarithmic time, while <B>find</B> takes linear time.</p>
<p>For <B>multiset</B>s and <B>multimap</B>s, <a href="tab1.htm">Table 1</a> lists both <B>find</B> and <B>lower_bound</B> as candidates when you&#146;re looking for the first object with a particular value. <B>find</B> is the usual choice for this job, and you may have noticed that it&#146;s the one listed in <a href="tab1.htm">Table 1</a> for <B>set</B>s and <B>maps</B>. For the <B>multi</B> containers, however, <B>find</B> is not guaranteed to identify the <I>first</I> element in the container with a given value if more than one is present; its charter is only to identify <I>one</I> of those elements. If you really need to find the <I>first</I> object with a given value, you&#146;ll want to employ <B>lower_bound</B>, and you&#146;ll have to manually perform the second half of the equivalence test. (You could avoid the manual equivalence test by using <B>equal_range</B>, but calling <B>equal_range</B> is more expensive than calling <B>lower_bound</B>.)</p>
<p>Selecting among <B>count</B>, <B>find</B>, <B>binary_search</B>, <B>lower_bound</B>, <B>upper_bound</B>, and <B>equal_range</B> is easy. Choose the algorithm or member function that offers you the behavior and performance you need and that requires the least amount of work when you call it. Follow that advice (or consult <a href="tab1.htm">Table 1</a>), and you should never get confused.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Two objects are equivalent if neither precedes the other in some sort order of interest. Often, equivalent values are equal, but not always. For example, the strings &#147;STL&#148; and &#147;stl&#148; are equivalent in a case-insensitive sort, but they are certainly not equal. For details on the distinction between equivalence and equality, consult any good reference on the STL. In <I>Effective STL</I>, the issue is examined in Item 19.</p>
<p><a name="2"></a>[2]  You&#146;ll find a justification for this claim in Item 44 of <I>Effective STL</I>. That Item is available online at &lt;www.awl.com/cseng/ titles/0-201-74962-9/item44-2.pdf&gt;. </p>

<p><i><B>Scott Meyers</B> is one of the world&#146;s foremost authorities on C++; </i>Effective STL<i> is his third C++ book. He has a Ph.D. in Computer Science from Brown University, sits on the technical advisory boards of several companies, and provides training and consulting services to clients worldwide. His web site is &lt;www.aristeia.com&gt;.</i></p>

</blockquote></body></html>
