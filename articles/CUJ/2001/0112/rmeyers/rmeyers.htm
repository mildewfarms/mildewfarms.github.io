<HTML>   
     <HEAD>
<TITLE>December 2001/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Variable Length Arrays, Part 2</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>Unlike C or C++, C99 lets you define the bounds of multidimensional arrays at run time, much to scientific programmers' delight.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In my last column <a href="#1">[1]</a>, I discussed the deficiencies of arrays in C before C99. The definitions of pointer arithmetic and the index operator in C intertwine the concepts of pointer and array. Before C99, C required that the size of objects be a compile-time constant. Since pointer arithmetic and thus array indexing depend on the size of objects, this restriction made arrays (particularly multidimensional arrays) less flexible in C than other languages.</p>
<p>C99 removed the restriction that the size of arrays needs to be a compile-time constant by allowing run-time expressions to be used as the bounds of an array. Arrays with run-time bounds are called VLAs (variable length arrays). VLAs have three major benefits:</p>

<OL><LI>The size of arrays (even multidimensional arrays) can be appropriate for the problem at hand, even if that size cannot be known until run time.</LI>
<LI>The C implementation automatically provides storage management for VLAs.</LI>
<LI>Functions or other code that processes multidimensional arrays can be more flexible. The bounds of any dimension of the array can be passed as an argument rather than fixed at compile time.</LI></OL>

<p>Some C programmers might be surprised that the third benefit above is lacking in pre-C99 C. The reason for this is that single-dimensional arrays are more common than multidimensional arrays in the traditional application areas of C (systems programming, application programming, embedded programming). C has always been able to handle arrays whose first (leftmost) or only dimension was not known because the size of the total array itself as opposed to the size of its elements (which might be sub-arrays in a multidimensional array) is not needed to do the pointer arithmetic underlying the index operator. However, if you have more than a single dimension and the size of the second or later dimensions was not known at compile time, then arrays in C before C99 became almost useless. Unfortunately, this situation frequently occurs in numerical programming (&#147;you have N equations with M variables...&#148;). My previous column <a href="#1">[1]</a> explains this problem in more detail. While I believe that column will make you appreciate VLAs more, this month&#146;s column is understandable without that background.</p>

<H3><FONT COLOR="#000080">VLAs</FONT></H3>

<p>As we will see in my next column, the new VLA feature affects not only arrays, but also pointers, function arguments and parameters, and even <B>typedefs</B>. However, in this column, we will look at arrays of variable length themselves.</p>
<p>If an array has a run-time expression as its bounds, then it is a VLA. If an array has a constant expression <a href="#2">[2]</a> (an expression that can be evaluated at compile time) as its bounds or empty braces (only permitted in a few contexts), then the array is not a VLA and has the same semantics such arrays have always had in C.</p>
<p>The bounds of a VLA must have integer type and must evaluate to a value greater than zero. If the bounds is less than one, then the program has a run-time error that the C implementation has no obligation to catch: the program might terminate immediately, continue to run with mysterious behavior, or even appear to work. The bounds expression of a VLA can use any operator, even assignment and function call. However, if the bounds expression is a comma expression, it must be enclosed in parentheses.</p>
<p>VLAs must be auto (as opposed to static or extern) variables in a block. When the block containing the array is entered and the declaration of the array is reached, the implementation evaluates the bounds expressions and allocates the array with that bounds. When the array goes out of scope, the C implementation automatically deallocates it.</p>

<pre>
#define BOUNDS(a) ((sizeof (a))/(sizeof ((a)[0])))

void example1(int n)
{
   double array[n][n+1];

   printf("sizeof array = %u\n",
      (unsigned) sizeof array);
   printf("1st dimension = %u\n",
      (unsigned) BOUNDS(array));
   printf("2nd dimension = %u\n",
      (unsigned) BOUNDS(array[0]));
}
</pre>

<p>In the above example, <B>array</B> is a VLA since at least one of its dimensions is a run-time expression (in fact, both bounds are). When <B>example 1</B> is called and control reaches the declaration of <B>array</B>, the implementation will evaluate the bounds expressions, calculate the sizes of the dimensions of the array, and save those results for later use. It will then allocate space for <B>array</B>. If the argument <B>n</B> to the function had the value <B>3</B>, then <B>array</B> will act as if it had been declared as:</p>

<pre>
double array[3][4];
</pre>

<p>Typical implementations will allocate the space for the array on the stack. This is a very efficient operation since it only involves adding or subtracting a value from the stack pointer. However, at least one implementation stores VLAs on a heap and generates function calls to allocate and deallocate VLAs.</p>
<p>Unlike non-variable length arrays, <B>sizeof</B> is a run-time operation on VLAs. The C implementation will use the bounds information it saves when it allocates the array to compute <B>sizeof</B> when needed. If you assume that <B>sizeof</B> (<B>double</B>) is <B>8</B> and that the parameter <B>n</B> has the value <B>3</B>, then <B>example1(3)</B> prints:</p>

<pre>
sizeof array = 96
1st dimension = 3
2nd dimension = 4
</pre>

<p>The <B>BOUNDS</B> macro is a C idiom used by many programmers to compute the bounds of an array by dividing the size of the array by the size of its element. The <B>BOUNDS</B> macro works for any array, whether variable length or not, and uses no C99-specific features. If the array is not variable length, then <B>BOUNDS</B> is a compile-time constant expression. If the array is variable length, then <B>BOUNDS</B> is a run-time expression. <B>BOUNDS</B> can calculate the bounds of any dimension of a multidimensional array. If <B>x</B> is a multidimensional array, then <B>BOUNDS(x)</B> is the first dimension, <B>BOUNDS(x[0])</B> is the second dimension, <B>BOUNDS(x[0][0])</B> is the third dimension, etc. In general, it is more efficient for you to save your own copy of the bounds of a VLA, but if you fail to do so, you can use the <B>BOUNDS</B> macro to calculate the bounds based on the C implementation&#146;s saved information.</p>
<p>The size and bounds of a VLA are fixed from the point the declaration of the array is executed until the array goes out of scope.</p>

<pre>
void example2(int n)
{
   double array[n][n+1];
   n += 10;
   printf("sizeof array = %u\n",
      (unsigned) sizeof array);
   printf("1st dimension = %u\n",
      (unsigned) BOUNDS(array));
   printf("2nd dimension = %u\n",
      (unsigned) BOUNDS(array[0]));
}
</pre>

<p>In <B>example2</B>, the size of <B>array</B> does not change even though the variable originally used to calculate its dimensions has a new value. The call <B>example2(3)</B> prints the same results as <B>example1(3)</B>. The C implementation uses the information it saves when the array is declared whenever it needs to know the size of the array or any of its dimensions. It does not reevaluate the original bounds expressions.</p>
<p>There is a sequence point at the end of a full declarator of an object in a declaration, but there are no sequence points associated with nested array declarators. This means that a compiler is free to evaluate the bounds expressions of a multidimensional VLA in any order it chooses, but all of the bounds expressions of one VLA must complete their evaluations before beginning the evaluations of bounds expressions of the next object. For example,</p>

<pre>
int a1[f()][g()][h()], a2[k()];
</pre>

<p>The compiler might call <B>f</B>, <B>g</B>, and <B>h</B> in any order, but it must have called all three before calling <B>k</B>.</p>
<p>When a VLA goes out of scope or its lifetime ends, the VLA is deallocated. Two more common ways for this to happen are by returning from a function or by exiting the block containing the VLA. However, C99 permits mixing statements and declarations <a href="#2">[2]</a>, and the lifetime of an object in C99 ends if a <B>goto</B> branches backwards to a label before the object&#146;s declaration <a href="#2">[2]</a>.</p>

<pre>
void example3()
{
   int i = 1;
   char a1[i];
   ++i;
loop:
   char a2[i];
   ++i;
   printf("sizeof a1 = %u\n",
      (unsigned) sizeof a1);
   printf("sizeof a2 = %u\n",
      (unsigned) sizeof a2);
   printf("i = %d\n", i);
   if (i &lt; 4)
     goto loop;
   printf("last sizeof a2 = %u\n",
      (unsigned) sizeof a2);
}
</pre>

<p>In <B>example3</B>, <B>goto loop</B> causes <B>a2</B>&#146;s lifetime to end immediately before branching to <B>loop</B>. In contrast, the lifetimes of <B>a1</B> and <B>i</B> do not end since their declarations appear before the label <B>loop</B>. After branching to <B>loop</B>, the declaration of <B>a2</B> is executed for the second time with the latest value for <B>i</B>. This causes this program to print the following:</p>

<pre>
sizeof a1 = 1
sizeof a2 = 2
i = 3
sizeof a1 = 1
sizeof a2 = 3
i = 4
last sizeof a2 = 3
</pre>

<p>Note that the dynamic ending of an object&#146;s lifetime does not mean that it is out of scope and cannot be referenced by later code. In <B>example3</B>, the lifetime of <B>a2</B> only ends if the <B>goto</B> is executed. If the <B>goto</B> is not executed, the lifetime does not end, and since <B>a2</B> is still in scope, it may legitimately be used by later code. <B>a2</B> has the size and contents that it had before the <B>if</B> statement skipped over the <B>goto</B>. (Interestingly, C++ constructors and destructors behave exactly this same way: a backwards <B>goto</B> causes an automatic object&#146;s destructor to execute, and the object will be constructed again when its declaration is executed.)</p>

<H3><FONT COLOR="#000080">Limitations on VLAs</FONT></H3>

<UL><LI>   Since a VLA must be an automatic variable of a block, a VLA cannot be declared at file scope.</LI>
<LI>   A VLA cannot have static or extern storage class.</LI>
<LI>   A VLA cannot be a member of a struct or union.</LI>
<LI>   You cannot initialize a VLA.</LI>
<LI>   A compound literal <a href="#3">[3]</a> cannot have a VLA type.</LI>
<LI>   A <B>goto</B> or a switch statement cannot branch into the scope of a VLA from outside the scope. (Such a branch would skip over the code that allocates the storage for the VLA.)</LI>
<LI>   <B>longjmp</B> may cause storage to be lost if you <B>longjmp</B> out of a block (directly or indirectly) that contains currently allocated VLAs. As was stated above, at least one C implementation allocates VLAs on a heap rather than on the stack. Normally, when you <B>longjmp</B> out of a function, all automatic variables of blocks exited by the <B>longjmp</B> are deallocated because <B>longjmp</B> resets the stack pointer to the earlier value saved by <B>setjmp</B>. However, resetting the stack pointer does nothing to deallocate any objects allocated on a separate heap, and thus those allocations might never be deallocated. The first implementation of VLAs (Cray), which was also the basis of the VLA features in C99, had this problem with <B>longjmp</B>. I suspect that most implementations will allocate VLAs on the stack and not have this problem. However, for maximum portability if this storage leak would be an issue for your programs, avoid mixing VLAs and <B>longjmp</B>.</LI></UL>

<H3><FONT COLOR="#000080">Next Month</FONT></H3>

<p>Next month&#146;s column will cover pointers to VLAs and VLAs as function parameters (a special case of pointers to VLAs).</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p><a name="1"></a>[1]  Randy Meyers. &#147;The New C: Why Variable Length Arrays?,&#148; <I>C/C++ Users Journal</I>, October 2001.</p>
<p><a name="2"></a>[2]  Randy Meyers. &#147;The New C: Declarations and Initializations,&#148; <I>C/C++ Users Journal</I>, April 2001, &lt;www.cuj.com/reference/articles/2001/0104/0104d/0104d.htm&gt;.</p>
<p><a name="3"></a>[3]  Randy Meyers. &#147;The New C: Compound Literals,&#148; <I>C/C++ Users Journal</I>, June 2001. </p>

<p><i><B>Randy Meyers</B> is a consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

</blockquote></body></html>
