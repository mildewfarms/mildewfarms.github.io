<HTML>   
     <HEAD>
<TITLE>December 2001/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocdec.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">What Every Programmer Should Know</FONT></H3>

<p>A few years ago I had the great pleasure of stumbling across an ACM article by David Goldberg entitled &#147;What Every Computer Scientist Should Know About Floating-point Arithmetic.&#148; If you&#146;re not familiar with this excellent monograph, you might be curious about how long the article was. After all, how much is there to say about floating-point numbers? A lot, evidently, because the article was 48 pages long. It contains many things I&#146;ve learned the hard way over the years, and a few things that I didn&#146;t know but was very happy to learn. I strongly recommend it as required reading by all professional programmers.</p>
<p>That article&#146;s catchy title leads me to an even more important question: &#147;What should every programmer know?&#148; This question is of increasing importance to me since I have returned to academia. The institution I am privileged to teach at does not dwell in the &#147;academe shade,&#148; but is intent on graduating skilled artisans ready to contribute immediately to industry (that&#146;s why I took the job). So I&#146;ve asked myself: What are the fundamental knowledge, skills, and attributes that the &#147;ideal&#148; CS graduate should possess? What do you think? (I really want your feedback on this one.)</p>
<p>I think near the bottom of the list is which development tools the candidate has used. Yes, I suppose it&#146;s nice to be familiar with whatever is popular, but learning to use a tool is about the easiest and least critical skill for productive programming. Having used one, it&#146;s easy to adapt to another of similar ilk. A likewise relatively unimportant experience is GUI design. (I can hear the complaints roll in already). Anyone can drag and drop. Let the Human Factors or Graphic Art staff design screens. A programmer can&#146;t match their visual skills anyway.</p>
<p>So much for the bottom of the list. At the top I would place, in no particular order, things like:</p>

<UL><LI>   inferring important abstractions from the problem at hand and crafting code to implement them</LI>
<LI>   the inclination to think in terms of invariants and to regularly use assertions and such to enforce the same</LI>
<LI>   a feel for the complexity of algorithms and the cost of development</LI>
<LI>   the ability to write code readable by humans as well as compilers</LI>
<LI>   the desire to improve code through refactoring when the opportunity presents itself, as well as to seek and accept feedback from peers</LI>
<LI>   the tenacity and ingenuity to find and fix bugs, along with the patience to think through a problem before coding blindly, so the bugs aren&#146;t needlessly multiplied <I>a priori</I></LI>
<LI>   the wisdom to not &#147;reinvent the wheel,&#148; but to learn and use available components</LI>
<LI>   and last, but certainly not least, the ability to communicate verbally and in writing to not only fellow programmers, but &#147;normal people&#148; as well</LI></UL>

<p>Add to that Dijkstra&#146;s advice to hone one&#146;s natural inclination towards mathematics as well as mastery of your native tongue, and I think we have a good start.</p>
<p>Oh, and one more thing. A Good Programmer needs to have some passion for solving problems through code. I&#146;m glad I still have mine. </p>
<p>Chuck Allison<br>
Senior Editor</p></blockquote></body></html>
