<HTML>   
     <HEAD>
<TITLE>Java Solutions August 2001/Java Performance Tuning</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjaug.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Java Performance Tuning</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">reviewed by Marc Briand</FONT></H3>


<HR>
<BLOCKQUOTE>

<table>
<tr><td><B>Title:</B></td><td><I>Java Performance Tuning</I></td></tr>
<tr><td><B>Author:</B></td><td>Jack Shirazi</td></tr>
<tr><td><B>Publisher:</B></td><td>September 2000, O'Reilly Books</td></tr>
<tr><td><B>Pages:</B></td><td>426, softbound</td></tr>
<tr><td><B>ISBN:</B></td><td>0-596-00015-4</td></tr>
<tr><td><B>Price:</B></td><td>$34.95</td></tr>
</table>

<p>So you bit the bullet and wrote that big application in Java, and now the boss says it runs too slow. You&#146;ll probably want to get this book. It presents a wide variety of potential optimizations for Java programs, and chances are one or two will help you speed things up. A note to the truly desperate, however: this book is not (nor does it purport to be) a miracle cure. Of the many optimizations it presents, perhaps only a few will be appropriate for any single application. Also note that many of these optimizations may bring only modest performance gains, on the order of 10-30 per cent. That is just the nature of the optimization game. If you&#146;re going to play, you can&#146;t be an idealist.</p>
<p>The book begins with a discussion of tuning strategies and profiling. This seems appropriate, because it is where Java tuners should begin as well. Tuning a Java application without profiling it first is virtually guaranteed to be a waste of time. Here the author gives us a simple piece of advice: fix one thing at a time, and profile again. That&#146;s because hot spots (the places that burn up the most time) tend to move around as you modify the code. If you do a lot of performance tuning, you probably knew that already, but it may not be obvious to newbies.</p>
<p>The bulk of the book is dedicated to the biggest performance problem areas in Java, with roughly one chapter given over to each culprit. There is a chapter each on object creation; exceptions, casts, and variables; loops and switches; I/O; sorting; threading; algorithms and data structures; distributed computing; and Strings &#151; the only Java data type that gets a chapter all to itself.</p>
<p>Since Strings seem to be such a big problem area, you might naturally wonder if there is something wrong their design. I would say not necessarily. Remember that strings are among the most frequently used objects in any of the programming languages that support them. So even minor performance problems in a string class will tend to be magnified. And the Java <B>String</B> type is apt to be used naively, since it supplies a couple seemingly innocent functions which are in fact deadly in terms of performance. If Sun can be said to have erred, it was in making <B>String</B> so easy to misuse.</p>

<H3><FONT COLOR="#000080">Using This Book</FONT></H3>
<p>In many ways, tuning a Java app appears to be a thankless task. If you&#146;re going to do it and enjoy it, you have to appreciate small victories, and you must have a flair for configuration management. That&#146;s because many of the optimizations possible can be rendered either more effective, or ineffective, by choice of JVM, choice of compiler, and the multiple options under which they may be run. Note that this configuration dependence severely undercuts one of big Java&#146;s selling points &#151; its portability. So one way to use this book (admittedly, probably not a way the author intended) is to read it first to decide how badly you want to implement that next project in Java. However, this book does present some optimizations that appear to be fairly independent of configuration; it&#146;s just too bad they are not organized as such. My first suggestion would be to go through this book with a highlighter and mark all the optimizations that are configuration independent. You could save yourself a lot of headaches down the road.</p>
<p>The author does provide checklists at the end of each chapter, of all the optimizations you might try, along with do&#146;s and don&#146;ts. A table might have been better, that organized optimizations by configuration sensitivity and projected performance gains (ballpark, of course).</p>

<H3><FONT COLOR="#000080">No Religion Here</FONT></H3>

<p>This is a fairly pragmatic book. At one point, when an optimization does not produce the results expected for a particular compiler, the author simply notes it and moves on, commenting that he doesn&#146;t wish to get wrapped up in analyzing a particular JDK&#146;s implementation. I think this is a sensible attitude; if you need better performance, you probably need it bad; there&#146;s no time to obsess over something that doesn&#146;t work.</p>
<p>In keeping with its pragmatic nature, the book contains numerous small tables that show the results of particular optimizations on specific compilers/platforms &#151; typically JDK 1.1.6, JDK 1.2 with and without JIT, JDK 1.3, and HotSpot 1.0. These tables are useful and often contain surprising results, such as JDK 1.1.6 sometimes outperforming HotSpot 1.0. (Although the book&#146;s discussions of HotSpot are few and far between, I found them very interesting; in general, the HotSpot results bring a sobering dose of reality to notions that some sort of wonder JVM, or even a hardware solution, might fix all of Java&#146;s performance problems.)</p>
<p>I appreciate the author&#146;s neutral stance with respect to Java. <I>Java Performance Tuning</I> takes no position on whether or not Java is a &#147;good&#148; language, or whether you should have used it in the first place. Instead, the book pretty much says, &#147;I don&#146;t care how you got here, but now that you are, here are some things that can help.&#148; That&#146;s a nice change of pace from all the hype.</p>

<p><i><B>Marc Briand</B> is the former editor of <I>C/C++ Users Journal</I>. His interests include computer languages, graphics, animation, and just about any area where technical and aesthetic problems meet. He can be reached at <B>marcbriand@cs.com</B>.</i></p>

</blockquote></body></html>
