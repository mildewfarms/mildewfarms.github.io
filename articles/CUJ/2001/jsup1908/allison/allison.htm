<HTML>   
     <HEAD>
<TITLE>Java Solutions August 2001/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjaug.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Reflection</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Chuck does a little &#147;reflecting&#148; as he brings this column to a close &#151; but only a little. You shouldn&#146;t do much either.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>I&#146;ve been doing a little &#147;reflecting&#148; lately. This column began in January 1999 with these words:</p>
<p>&#147;Hello again. &#147;import java.*&#148; invites you, the C/C++ programmer, to learn Java... . I will be examining all aspects of the language, library, and culture, but from a C/C++ perspective.&#148;</p>
<p>To explore the entire Java library would take more years than I care to think about, but I believe I&#146;ve covered most of the language. Since I have recently accepted the position of Senior Editor for <I>CUJ</I>, this will have to be the last installment of &#147;import java.*,&#148; so I would like to take this opportunity to cover the one language feature I haven&#146;t yet mentioned: reflection.</p>

<H3><FONT COLOR="#000080">Meta Programming</FONT></H3>

<p>The first thing to say about reflection in Java is that you should almost never use it. Reflective programming, also known as &#147;meta programming,&#148; gives you access to information you usually don&#146;t need. It allows you, for instance, to inspect an object at run time to determine its dynamic type. Whether a particular object reference actually points to an object of the indicated type or a subclass is irrelevant, however, in most situations, because you want to let polymorphism do its work.</p>
<p>So when do you need reflection? If you&#146;re in the business of writing debuggers or class browsers or some such software, then you need it, and nothing else will do. Under the assumption that you will find yourself there someday, this article shows you the basics.</p>

<H3><FONT COLOR="#000080">Class Objects</FONT></H3>

<p>For every class in Java there is a corresponding singleton object of type <B>Class</B>, instantiated when the class is loaded, and which holds information about that class. You can obtain that object in four different ways. If you have the name of the class available when you&#146;re coding, you can use a class literal, as in</p>

<pre>
Class c = MyClass.class;
</pre>

<p>For completeness, the primitive types also have a class object, and you can get your hands on them with the class literal technique, or from the <B>TYPE</B> field of the corresponding wrapper class:</p>

<pre>
Class c = int.class;
Class c2 = Integer.TYPE;    // same 
                            // object as c
</pre>

<p>The <B>forName</B> method always requires a fully-qualified class name. A second and more flexible avenue to a class object is to give the fully qualified class name as a parameter to <B>Class.forName</B>, as the following statements illustrate.</p>

<pre>
Class c = Class.forName("MyClass");
Class c = 
    Class.forName("java.lang.String");
</pre>

<p>A third method for getting class objects is to call <B>Object.getClass</B> on behalf of an object instance:</p>

<pre>
// "o" can be any object:
Class c = o.getClass();
</pre>

<p>The fourth way of getting class objects is to call the reflection methods defined in <B>Object.Class</B> itself, which I use throughout this article starting in the next section. The program in <a href="list1.htm">Listing 1</a> illustrates the first three techniques. When you use <B>ObjectgetClass</B>, you always get the class corresponding to the dynamic type of the object. In <a href="list1.htm">Listing 1</a>, for example, it doesn&#146;t matter that I store a reference to a <B>Sub</B> object in a <B>Super</B> variable &#151; since the actual object is an instance of <B>Sub</B>, the class object returned is <B>Sub.class</B>. The <B>Class.forName</B> method will throw a <B>ClassNotFoundException</B> if the class can&#146;t be loaded. As you can see, <B>Class.toString</B> prints the word &#147;class&#148; or &#147;interface&#148; as needed. You can also see that arrays are instances of classes with interesting names, formed with left brackets (as many as there are array dimensions) followed by one of the following letters, depending on the underlying component class:</p>

<pre>
B              byte
C              char
D              double
F              float
I              int
J              long
L&lt;classname&gt;;
S              short
Z              boolean
</pre>

<p>This explains why you see <B>"class [F"</B> and <B>"class [LSuper;"</B> in the output of <a href="list1.htm">Listing 1</a>.</p>
<p>Okay, now that you have a class object, what can you do with it? Lots. The only interesting information in a primitive type&#146;s class object is its name, but for real classes you can find out just about everything. In <a href="list2.htm">Listing 2</a>, I trace a class&#146;s ancestry all the way back to the <B>Object</B> root class with the <B>Class.getSuperClass</B> method. Since we typically depict superclasses above subclasses, I use a stack <a href="#1">[1]</a> to store all the class names as I walk up the inheritance tree, so I can eventually print them out in that top-down order. The class <B>java.lang.Object</B> is the only class that returns null for the <B>Class.getSuperClass</B> method; I use this fact to halt the process.</p>
<p>The program in <a href="list3.htm">Listing 3</a> goes a little further by also detecting any interfaces a class implements by calling <B>Class.getInterfaces</B>, or, if the class represents an array, the program discovers the type of its components by calling <B>Class.getComponentType</B>. If a class object returns false for calls to <B>isInterface</B>, <B>isArray</B>, and <B>isPrimitive</B>, then it must be a simple class. The output reveals that arrays are implicitly cloneable and serializable, which is a Good Thing, since there is no syntax that allows you to declare them so.</p>

<H3><FONT COLOR="#000080">On Further Reflection</FONT></H3>

<p>If you&#146;re writing a browser or debugger, you will surely want more than just the name of a class. There are methods to get all the fields, constructors, methods, and modifiers of a class, which are represented by instances of the classes <B>Field</B>, <B>Constructor</B>, <B>Method</B>, and <B>Modifier</B>, respectively. They are all defined in the package <B>java.lang.reflect</B>. The modifiers include the access specifiers public, private, and protected, as well as static, final, and abstract. If a class represents an interface, the keyword &#147;interface&#148; appears in the list of modifiers as well. These keywords are encoded in an integer returned by <B>Class.getModifiers</B>. You can query the integer code with suitable <B>Modifier</B> class constants, or you can just get the string representation for all modifiers in a single string by passing the integer to the static method <B>Modifier.toString</B>, as I do in <a href="list4.htm">Listing 4</a>.</p>
<p>This program produces a listing similar in syntax to the original class definition minus the method bodies (similar to a class declaration with prototypes in C++). The first thing <B>ClassInspector2.inspect</B> does is determine the package, if any, that the outer class it received as a parameter resides in. Then it gets the class&#146;s modifiers and prints them along with the keyword &#147;class,&#148; if applicable, and finally the class or interface name. It then displays the superclass extended and any interfaces implemented by the class, like <a href="list3.htm">Listing 3</a> did.</p>
<p>Now the fun begins. My <B>doFields</B> method calls <B>Class.getDeclaredFields</B>, which returns an array of <B>Field</B> objects representing <I>all</I> of the fields declared in the class, irrespective of access specification. There is another method, <B>Class.getFields</B>, not used in this example, which returns all of the <I>public</I> fields in a class as well as all of the public fields inherited from all superclasses. From each <B>Field</B> instance, I extract its modifiers, type, and name for display. The methods <B>doCtors</B> and <B>doMethods</B> do the analogous actions for all constructors and methods declared in the class. Constructors and methods are treated differently because constructors don&#146;t have return types, and because <B>Constructor</B> objects can be used to create objects dynamically through class objects. <B>Class.getParameterTypes</B> returns an (possibly empty) array of class objects representing the types of the parameters the method takes (see the calls to <B>doParameters</B> in <B>doCtors</B> and <B>doMethods</B>). You can also call <B>getExceptionTypes</B> for constructors and methods, although I decided not to in this example.</p>
<p>The method <B>Class.getDeclaredClasses</B> returns an array of class objects containing type information for all the nested classes declared inside the class that <B>inspect</B> is processing. All I have to do for these is call <I>inspect</I> recursively, indenting appropriately for readability. (That&#146;s what the field <B>level</B> is for.) The sample output from this program, found in <a href="list5.htm">Listing 5</a>, is for the class <B>java.util.TreeMap</B>, which I chose because it illustrates all the features supported by <B>ClassInspector2</B>. Most of the methods and constructors have been omitted from the output listing to save page real estate.</p>
<p>You may find it interesting that you can get information on private fields and methods. Since the methods illustrated in <a href="list4.htm">Listing 4</a> only give you declaration information, it&#146;s really no different than having access to an include file containing a class definition in C++. You can <I>view</I> the private declarations, but you have no access to the actual data they represent. If you&#146;re writing a debugger, though, you need to be able to access the private data. How to get that access is easy to illustrate, but difficult to thoroughly explain. The program in <a href="list6.htm">Listing 6</a> inspects arbitrary objects by determining all fields at run time, including inherited fields (ignoring those in <B>java.lang.Object</B>). The method <B>Field.get</B> yields the value of a field as an instance of <B>java.lang.Object</B>. If the field is a primitive, the value is automatically wrapped in an instance of the corresponding object wrapper class. Whenever you try to set or get a field, the run-time system verifies your access rights, just as the compiler does with normal, non-reflected code. If I hadn&#146;t called <B>AccessibleObject.setAccessible(fields,true)</B> <a href="#2">[2]</a> in <B>ObjectInspector.inspect</B>, I would have been greeted with an <B>IllegalAccessException</B> the first time I tried to access one of the fields in the <B>TreeMap</B> object, since none is public. Whether you ultimately get access permission depends on the class loader and security manager in use &#151; both topics outside the scope of this article. Suffice it to say that the default case for an application (versus an applet) allows me to get the output that appears in <a href="list6.htm">Listing 6</a> without error.</p>

<H3><FONT COLOR="#000080">Meta Execution</FONT></H3>

<p>I&#146;m a little reluctant to write this section. When I tell you that you can mimic C-like function pointers in Java, I just know you&#146;re going to be tempted to use them the same way you do in C, but you shouldn&#146;t. There are better ways to pass functions in C++ and Java (e.g., function objects), but that is, alas, yet another topic for another day. Anyway, yes, you can pass method references around, and, as you&#146;d expect, you can determine which method you want to execute at run time by its name string. To get a method reference, you need its name and a list of the types of its arguments. In <a href="list7.htm">Listing 7</a>, I&#146;ve defined a class <B>Foo</B> and a class <B>Bar</B>, each with like-named methods (am I creative with names, or what?). To get a method reference at run time, call <B>Class.getMethod</B> with two arguments: the method name as a <B>String</B>, and an array of argument types. You can use <B>null</B> or an empty <B>Class</B> array to match methods that take no arguments. You can only get references to public methods, but if the method you&#146;re after isn&#146;t in the class itself, the run-time system will look in superclasses to find it. Be prepared to handle a <B>NoSuchMethodException</B> if the method doesn&#146;t exist. To invoke the method, you pass the object to invoke it for if it&#146;s a non-static method and a list of expected parameters in array of <B>Object</B> to <B>Method.invoke</B>.</p>
<p>The program in <a href="list8.htm">Listing 8</a> shows how to invoke static methods &#151; you just use <B>null</B> as the first parameter to <B>Method.invoke</B>. It&#146;s important to remember to place the array of <B>String</B>, which is the argument to <B>main</B>, of course, in the first position of the <B>Object</B> array representing the arguments passed to <B>main</B>. This particular program is a program launcher &#151; it finds the <B>main</B> method for the class represented by <B>args[0]</B> and passes the remaining command-line arguments to that <B>main</B>.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>I haven&#146;t shown it here, but there is a <B>newInstance</B> method in the <B>Constructor</B> class for creating objects, and there is also an <B>Array</B> class in <B>java.lang.reflect</B> for creating and manipulating arrays dynamically. Isn&#146;t reflection fun? It&#146;s almost too fun. I hope you find little need for it. I&#146;m sure you can appreciate how it is useful for inspecting objects at run time, like in a class browser or a program that processes JavaBeans. If that&#146;s not what you&#146;re doing, let polymorphism and good object-oriented design solve your problems instead.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  I&#146;m using the <B>LinkedList</B> collection class to implement a stack. For more on collections see the September 2000 installment of &#147;import java.*.&#148;</p>
<p><a name="2"></a>[2]  <B>Field</B>, <B>Constructor</B>, and <B>Method</B> all derive from <B>AccessibleObject</B>.</p>

<p><i><B>Chuck Allison</B> is senior editor of </I>CUJ<I> and has been a contributing editor since 1992. He began his career as a software engineer in 1978, and for most of the 1990s was a contributing member of the C++ Standards committee. He&#146;s the author of the intermediate-level text, <I>C &amp; C++ Code Capsules</I> (Prentice-Hall, 1998), based on articles published in this journal. During the day Chuck is an Assistant Professor of Computer Science at Utah Valley State College. You can contact him through his website at &lt;www.freshsources.com&gt;.</i></p>

<h4><a href="../../../source/2001/jaug01/allison.zip"></a></h4>
</blockquote></body></html>
