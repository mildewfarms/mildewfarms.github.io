<HTML><HEAD>
<TITLE>Java Solutions August 2001/import java.*/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: ClassInspector2.java &#151; Lists all declarations of a class recursively</A></h4>
<pre>
import java.lang.reflect.*;

class ClassInspector2
{
   static int level = 0;   // indentation depth
   static final String indentString = "   ";

   static void indent()
   {
      for (int i = 0; i &lt; level; ++i)
         System.out.print(indentString);
   }

   static void indent(String s)
   {
      indent();
      System.out.print(s);
   }

   public static void inspect(Class c)
   {
      if (level == 0)
      {
         // Get Package
         Package pkg = c.getPackage();
         if (pkg != null)
            indent("package " + pkg.getName() + ";\n\n");
      }

      // Get Modifiers &amp; Name
      String mods = Modifier.toString(c.getModifiers());
      indent();
      if (mods.length() &gt; 0)
         System.out.print(mods + " ");
      if (!c.isArray() &amp;&amp; !c.isInterface() &amp;&amp; !c.isPrimitive())
         System.out.print("class ");
      System.out.println(c.getName());

      // Get Superclass
      Class sup = c.getSuperclass();
      if (sup != null)
      {
         ++level;
         indent("extends " + sup.getName() + "\n");
         --level;
      }

      // Get Interfaces
      Class[] interfaces = c.getInterfaces();
      if (interfaces.length &gt; 0)
      {
         ++level;
         for (int i = 0; i &lt; interfaces.length; ++i)
            indent("implements " + interfaces[i].getName() + "\n");
         --level;
      }

      // Start of class definition body
      indent("{\n");

      // Get Fields
      doFields(c);

      // Get Constructors
      doCtors(c);

      // Get Methods
      doMethods(c);

      // Get Nested classes (recursive)
      Class[] classes = c.getDeclaredClasses();
      if (classes.length &gt; 0)
      {
         ++level;
         indent("// Nested Classes\n");
         for (int i = 0; i &lt; classes.length; ++i)
            inspect(classes[i]);
         --level;
      }

      // End of class definition body
      indent("}\n");
   }

   static void doCtors(Class c)
   {
      Constructor[] ctors = c.getDeclaredConstructors();
      if (ctors.length == 0)
         return;

      ++level;
      indent("// Constructors\n");
      for (int i = 0; i &lt; ctors.length; ++i)
      {
         Constructor ctor = ctors[i];
         String mods = Modifier.toString(ctor.getModifiers());
         indent();
         if (mods.length() &gt; 0)
            System.out.print(mods + " ");
         System.out.print(ctor.getName() + "(");

         // Print parameters
         doParameters(ctor.getParameterTypes());
         
         System.out.println(");");
      }
      System.out.println();
      --level;
   }
   
   static void doFields(Class c)
   {
      Field[] fields = c.getDeclaredFields();
      if (fields.length == 0)
         return;

      ++level;
      indent("// Fields\n");
      for (int i = 0; i &lt; fields.length; ++i)
      {
         Field fld = fields[i];
         String type = fld.getType().getName();
         String mods = Modifier.toString(fld.getModifiers());
         indent();
         if (mods.length() &gt; 0)
            System.out.print(mods + " ");
         System.out.println(type + " " + fld.getName() +";");
      }
      System.out.println();
      --level;
   }

   static void doMethods(Class c)
   {
      Method[] methods = c.getDeclaredMethods();
      if (methods.length == 0)
         return;

      ++level;
      indent("// Methods\n");
      for (int i = 0; i &lt; methods.length; ++i)
      {
         Method m = methods[i];
         Class retType = m.getReturnType();
         String mods = Modifier.toString(m.getModifiers());
         indent();
         if (mods.length() &gt; 0)
             System.out.print(mods + " ");
         System.out.print(retType.getName() + " " +
                          m.getName() + "(");

         // Print parameters
         doParameters(m.getParameterTypes());
         
         System.out.println(");");
      }
      System.out.println();
      --level;
   }

   static void doParameters(Class[] parms)
   {
      int nParms = parms.length;
      for (int j = 0; j &lt; nParms; ++j)
      {
         Class parmType = parms[j];
         if (j &gt; 0)
            System.out.print(", ");
         System.out.print(parmType.getName());
      }
   }

   public static void main(String[] args)
      throws ClassNotFoundException
   {
      inspect(Class.forName("java.util.TreeMap"));
   }
}
&#151; End of Listing &#151;</pre></body></html>
