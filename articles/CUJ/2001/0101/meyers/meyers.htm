<HTML>   
     <HEAD>
<TITLE>January 2001/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Integers, Part 2</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>The new C Standard has a novel idea: just accept that machine-word sizes will grow. Randy explains C&#146;s proactive strategy for accommodating the inevitable.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>In December&#146;s column, I began discussing the new integer features of C99, in particular, the <B>long long</B> data type. In this month&#146;s column, I discuss how the C99 Standard generalizes the support for integers and allows your compiler to support additional integer data types. While it might not be immediately obvious, these C99 features were motivated in part by the introduction of 64-bit machines.</p>
<p>As the C99 Standard was being developed, 64-bit machines started to appear, and with them came the contentious issue of the mapping from C keywords to hardware integer data types. An informal group of vendors of 64-bit hardware and software met a few times to reach consensus on a common mapping, and failed to do so for a period of two or three years. Many of the proposed mappings called for a new integer type to be added to C. For example, one proposal mapped <B>int</B> and <B>long</B> to 32-bit integers and specified a new C type for 64-bit integers. Another proposal mapped <B>int</B> and <B>long</B> to 64-bit integers and specified a new C type for 32-bit integers.</p>
<p>Eventually, two 64-bit mappings won. Vendors most concerned about compatibility with their 32-bit offerings mapped <B>short</B> to 16 bits, <B>int</B> and <B>long</B> to 32 bits, and added a new 64-bit integer type (<B>long long</B>). Vendors most concerned about elegant access to 64-bit hardware mapped <B>short</B> to 16 bits, <B>int</B> to 32 bits, and <B>long</B> to 64 bits. (This is also the mapping used in Java.)</p>
<p>The C standards committee realized that there was a lesson to be learned from the 64-bit vendors: C probably would gain more integer types in the future. Someday, there will be interest in 128-bit integers. Occasionally, there is interest in adding unusual integer types, such as specialized counters for digital signal processors or integers with different &quot;endian-ness&quot; (byte ordering). The committee decided that it would be best if the Standard addressed the issue of adding new integer types to C in order to give direction to both implementations and programmers. (Some programmers complained about the addition of <B>long long</B> to the language since, rather than use typedefs or macros, they had hard-coded the information about the largest integer type in their programs.)</p>

<H3><FONT COLOR="#000080">Generalized Integers</FONT></H3>

<p>The model for <I>extended integer types</I> (as the Standard calls implementation-defined integers) should seem pretty natural to most C programmers. Like the <I>standard integer types</I> (as the Standard calls the integers with which you are familiar, such as <B>int</B>, <B>signed char</B>, and <B>unsigned long</B>), extended integers come in pairs of types. For every extended signed integer type, there is a corresponding extended unsigned integer type. Together the standard integer types and the extended integer types (along with <B>enum</B> types and <B>char</B>) are collectively known as the integer types. Thus, all of the statements in the Standard about the integer types also apply to any extended integer types supported by an implementation.</p>
<p>The Standard does not say what the names of any extended integer types are. An implementation might name the types using a combination of current keywords (e.g., <B>long long long int</B>) or invent new keywords spelled using the name patterns that the Standard reserves for use by implementations (e.g., <B>__int24</B> or <B>_BigEndian32</B>).</p>
<p>Since C89, integers in C have been required to be binary numbers, and signed integers are required to be represented in one&#146;s complement, two&#146;s complement, or sign and magnitude notation. Integers (except <B>unsigned char</B>) may have unused bits in their representation. (On some machines, integers have the same storage representation as floating-point numbers with the exponent bits ignored.) Integers might have representations for both positive and negative zero. Extended integers obey these same rules. Thus, extended integers cannot be binary coded decimal. Since integers in C have fixed sizes, extended integers cannot be LISP-like <B>bignum</B>s whose storage dynamically grows and shrinks to hold numbers of unlimited size. Extended integers are like standard integers. If a programmer was given a typedef defined to be an integer, it would not make much difference whether the typedef was an extended integer or an unspecified standard integer.</p>

<H3><FONT COLOR="#000080">Expression Evaluation</FONT></H3>

<p>The rules for how extended and standard integers work in expressions is determined by a new concept called the <I>integer conversion rank.</I> The Standard requires every implementation to rank all of its integer types according to the following rules:</p>

<UL><LI>   No two signed integer types have the same rank even if they have the same representation. (That is, even if both <B>int</B> and <B>long</B> are 32-bit integers, one of them has greater rank than the other.)</LI>
<LI>   If one signed integer type is bigger (excluding any padding bits) than a second signed integer type, then the bigger type has greater rank.</LI>
<LI>   <B>long long</B> has greater rank than <B>long</B>, which has greater rank than <B>int</B>, which has greater rank than <B>short</B>, which has greater rank than <B>signed char</B>, which has greater rank than <B>_Bool</B>.</LI>
<LI>   An unsigned integer type and its corresponding signed integer type have the same rank.</LI>
<LI>   <B>char</B> has the same rank as <B>signed char</B> and <B>unsigned char</B>.</LI>
<LI>   An <B>enum</B> type has the same rank as the integer type used to represent it.</LI>
<LI>   If a standard integer type is the same size (excluding any padding bits) as an extended integer type, then the standard type has greater rank. (All things being more or less equal, give the standard type greater rank.)</LI>
<LI>   If two extended signed integer types are the same size (excluding any padding bits), their rank relative to each other is implementation defined, but still subject to the other rules for determining the integer conversion rank.</LI></UL>

<p>As you probably suspect, the integer conversion rank is used to define the rules for expression evaluation. Those rules are named the integer promotions and the usual arithmetic conversions.</p>
<p>The integer promotions rule states that an integer with rank less than <B>int</B> may be used in an expression anywhere where an <B>int</B> or <B>unsigned int</B> may be used (so can a bitfield). The integer value used in the expression is converted to <B>int</B> or <B>unsigned int</B>, depending upon which can hold all of the values of the original type. For example, if <B>short</B> and <B>int</B> have the same representation, an <B>unsigned short</B> promotes to <B>unsigned int</B> when used in an expression.</p>
<p>The usual arithmetic conversions are the rules that determine the result type of most of the two-operand operators in C when they are operating on integer or floating-point operands. The usual arithmetic conversion rules state that first you perform the integer promotions on any integer operands. Then you determine a common type, convert the operands to the common type, and the result of the operator has that common type.</p>
<p>The first few rules for determining the common type for cases involving integers are pretty simple:</p>

<UL><LI>   If both operands have the same type, the common type is that type.</LI>
<LI>   If one operand has integer type and the other has floating-point type, the common type is the floating-point type.</LI>
<LI>   If both operands are signed integer types or both are unsigned integer types, the common type is the type with the greater rank.</LI>
</UL>

<p>Unfortunately, the Standard permits an implementation to make all of the integer types the same size, and that complicates the rules for when a signed integer type meets an unsigned integer type. Normally, if you multiplied a <B>long</B> by an <B>unsigned int</B>, you would expect the common type (and thus the result type) to be <B>long</B>. However, if <B>int</B> and <B>long</B> have the same representation, an <B>unsigned int</B> behaves like an <B>unsigned long</B> in terms of expression evaluation. Thus, when <B>int</B> and <B>long</B> are &quot;the same,&quot; multiplying a <B>long</B> by an <B>unsigned int</B> is like multiplying a <B>long</B> by an <B>unsigned long</B>: the common type is <B>unsigned long</B>. The rules for when one operand has signed integer type and the other operand has unsigned integer type are:</p>

<UL><LI>   If the unsigned integer type has rank greater than or equal to the rank of the signed integer type, the common type is the unsigned type.</LI>
<LI>   Otherwise, if the signed integer type can represent all of the values of the unsigned type, the common type is the signed type.</LI>
<LI>   Otherwise, the common type is the unsigned type corresponding to the signed type.</LI></UL>

<p>While the integer conversion rank and expression evaluation rules may seem abstract, they are nothing more than the rules programmers assume about integers every day, particularly when dealing with typedefs. Consider a simple statement like: <B>x = y + z;</B> where <B>x</B>, <B>y</B>, and <B>z</B> all have the same typedef type and the only thing you know about that type is that it is a signed integer. You assume that the result of the addition has the same type as the variables, or that it is <B>int</B> if the type of the variables is smaller than <B>int</B>. You assume that the result does not overflow unless the true result would not fit in <B>x</B>. These are the sort of properties that result from the rules. They guarantee consistent and natural expression evaluation.</p>

<H3><FONT COLOR="#000080">Constants</FONT></H3>

<p>C99 does not introduce any new special syntax for integer constants that have an extended integer type. However, implementations might introduce such syntax as an extension. For example, if an implementation has a 128-bit integer type named <B>long long long</B>, it might allow you to suffix a decimal constant with <B>LLL</B> to indicate its type.</p>
<p>In C, integer constants have a type based on their value. For example, a decimal integer constant without a suffix has the first type from this list that can represent its value: <B>int</B>, <B>long</B>, or <B>long long</B>. The Standard permits a constant to have an extended integer type if its value cannot be represented by <B>long long</B> (or <B>unsigned long long</B>, if appropriate) and the extended type can represent its value.</p>
<p>The extended integer type used to represent a constant must be a signed type if the constant is normally signed (e.g., a decimal constant without a <B>U</B> suffix). The extended integer type must be unsigned if the <B>U</B> suffix appears in the constant. For octal or hexadecimal constants without a <B>U</B> suffix, the extended type may be signed or unsigned. (Unsuffixed octal and hexadecimal constants normally have the first type from this list that can represent their value: <B>int</B>, <B>unsigned int</B>, <B>long</B>, <B>unsigned long</B>, <B>long long</B>, or <B>unsigned long long</B>.)</p>

<H3><FONT COLOR="#000080">Next Month</FONT></H3>

<p>Next month&#146;s column wraps up integer support in C99 by discussing the new headers <B>&lt;stdint.h&gt;</B> and <B>&lt;inttypes</B>.h&gt;. These headers allow you to use both standard integer types and extended integer types in a more portable fashion.</p>

<p><i><B>Randy Meyers</B> is consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</I></p>

</blockquote></body></html>
