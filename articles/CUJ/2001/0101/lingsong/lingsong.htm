<HTML>   
     <HEAD>
<TITLE>January 2001/Exchanging Data between Java and C/C++ Windows Programs</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Mixed-Language Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Exchanging Data between Java and C/C++ Windows Programs</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Dr. He Lingsong</FONT></H3>

<BLOCKQUOTE>
<p>The notorious &quot;endian&quot; problem shows up in all sorts of places &#151; in this case, between different programming languages.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Under the Windows operating system, Java and C/C++ programs use different formats for storing data in memory. For example, in C/C++ programs built for Windows, a short integer consists of two bytes; the low byte is stored at a lower address than the high byte. This is called &quot;little-endian&quot; format. In contrast, Java programs always store a short integer with the high byte at the low address, followed by the low byte. This is called &quot;big-endian&quot; format.</p>
<p>Java uses this big-endian format regardless of platform or OS, but C and C++ use the format dictated by the OS. Thus, it is impossible to directly exchange binary data and binary data files between Java and C/C++ programs that run in Windows. (On most Unix systems data interchange is not a problem, because most Unix systems use big-endian format.)</p>
<p>Using the technique of I/O stream redirection in Java, I have designed a Java class to translate data from the C/C++ format to the Java format. This class enables Java programs to receive and read data files written by C/C++ programs. Interested readers may want to use similar techniques to enable transfers in the other direction &#151; from Java to C/C++.</p>

<H3><FONT COLOR="#000080">The Data Translation Class</FONT></H3>

<p>The data translation class, <B>WindowsStream</B>, uses a very simple technique to translate data from little-endian format to big-endian. First, it reads a multi-byte data type, byte-by-byte, to a buffer. Then it reverses the byte order in the buffer. The source code is shown in <a href="list1.htm">Listing 1</a>.</p>

<H3><FONT COLOR="#000080">Applications</FONT></H3>

<H4><FONT COLOR="#000080">Reading Data Files Produced by C/C++ Programs</FONT></H4>

<p>Java and C/C++ use the same respective data formats when writing to data files as they do when storing data in memory. Therefore, a Java program can&#146;t directly read binary data from file created by a C/C++ program (under Windows).</p>
<p>The following example shows how to use the <B>WindowsStream</B> class introduced above to solve this problem. In this example, the Java program reads a Windows <B>.WAV</B> file that was created in the C/C++ data store format. The <B>.WAV</B> file has the following structure:</p>

<pre>
char r[4];        //4 bytes
long int fs;      //4 bytes
char w[8];        //8 bytes
long int hs;      //4 bytes
short int p, ch;  //2 bytes+2 bytes
long int hz, bhz; //4 bytes+4 bytes
short int b, bit; //2 bytes+2 bytes
char d[4];        //4 bytes
long int ds;      //4 bytes
char *wave;       //ds bytes
</pre>

<p>In this format, <B>ch</B> is the channel number used for recording; <B>hz</B> is the sampling frequency, <B>bit</B> is the number of bits used by the analog to digital converter; <B>ds</B> is the size of the file; and <B>wave</B> is a pointer to the data. The other parameters are shown just for reference. This example assumes that the <B>long int</B> type is four bytes long in C/C++ and eight bytes long in Java.</p>
<p><a href="list2.htm">Listing 2</a> shows the Java class <B>WavFile</B>, which uses the <B>WindowsStream</B> class to read the <B>.WAV</B> file correctly. Class <B>WavFile</B> supplies a <B>read</B> method to read the Windows <B>.WAV</B> file. The parameter <B>location</B> is the Internet address of the <B>.WAV</B> file; <B>buffer</B> is a temporary buffer that is used to store the raw data; <B>ch1</B> and <B>ch2</B> are the data buffers used to store the corrected data for the left and right channels respectively; and <B>par</B> is a temporary buffer used to store the corrected parameters of the <B>.WAV</B> file. The snippet below shows a sample use of class <B>WavFile</B> to read a <B>.WAV</B> file into a Java program.</p>

<pre>
int ch=0, len=0, fre=0, bit=0;
short x1[] = new short[16385];
short x2[] = new short[16385];
byte buffer[] = new byte[64540];
int par[] = new int[5];
String url = "http://127.0.0.1/ding.wav";
WavFile hl = new WavFile();
...
hl.read(url, buffer, x1, x2, 16384, par);
ch=par[0];
fre=par[1];
len=par[2];
bit=par[3];  
...
</pre>

<H4><FONT COLOR="#000080">Receiving Data Directly from C/C++ Programs</FONT></H4>

<p>In this example, a Windows-based C++ UDP (User Datagram Protocol) server produces a set of data which is received by a Java UDP client. The server program samples a 100 Hz sine wave at 11,025 Hz, stores the data in an array of short integers, and creates a UDP server socket on port 8888 to wait for the client&#146;s request for data. When the client sends any data to port 8888, the server sends back the sine wave data. The server program is not shown here, but is available on the <I>CUJ</I> website (<B>www.cuj.com/code/</B>). It uses the freeware TCP4U package <a href="#2">[2]</a> to supply TCP/IP functionality.</p>
<p>To receive data from the UDP server program, the Java program uses a class named <B>UdpData</B> (<a href="list3.htm">Listing 3</a>). This class sends a UDP command to the server and receives the returned data; then it calls the class <B>WindowsStream</B> to translate data from the C/C++ format to the Java format.</p>
<p>Class <B>UdpData</B> also supplies a <B>read</B> method. The parameter <B>host</B> is the IP address of the computer running the UDP server program; <B>buffer</B> is the temporary data buffer that is used to store raw data; <B>ch1</B> is the data buffer that is used to store the corrected data of the sine wave. The snippet below uses class <B>UdpData</B> to get data from the UDP server program.</p>

<pre>
...
String host = "127.0.0.1";
UdpData udphl = new UdpData();
...
udphl.read(host, buffer, x1);
ch=1;
fre=11025;
len=1024;
bit=16;  
...
</pre>

<H4><FONT COLOR="#000080">A Java Demo Applet</FONT></H4>

<p>The last example is a Java applet that reads a Windows <B>.WAV</B> file, receives data from the UDP server program, and draws the signal waveform, as shown in <a href="fig1.htm">Figure 1</a>. Pressing the buttons labeled &quot;Ding&quot; and &quot;Chord&quot; causes the applet to read the files <B>Ding.wav</B> and <B>Chord.wav</B> respectively. Pressing the button labeled &quot;UDP&quot; causes the applet to get the sine-wave data from the UDP server program. The applet source code is shown in <a href="list4.htm">Listing 4</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  &quot;Big and Little Endian Byte Orderings,&quot; <B>http://www.carmel.com/pmon/pmon5/html/endian.htm</B></p>
<p><a name="2"></a>[2]  Philippe Jounin and Laurent Le Bras. <I>TCP4U API &#151; User Manual,</I> <B>http://membres.tripod.fr/phjounin/P_tcp4u.htm</B>.</p>

<p><i><B>Dr. He Lingsong</B> is an Associate Professor at the Huazhong University of Science and Technology in China, and an experienced C/C++ and Java programmer. One of his shareware programs, Signal Analyze Toolkit, gets five stars at <B>www.zdnet.com</B>. You can reach Dr. Lingsong at <B>http://heliso.tripod.com</B> or <B>heliso@public.wuhan.cngb.com</B>.</i></p>

<h4><a href="../../../source/2001/jan01/lingsong.zip"></a></h4>
</blockquote></body></html>
