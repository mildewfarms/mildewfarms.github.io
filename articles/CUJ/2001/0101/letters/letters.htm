<HTML>   
     <HEAD>
<TITLE>January 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear <I>CUJ,</I></p>

<p>In the article &quot;An Improved Variant Type Based on Member Templates,&quot; by Fernando Cacciola (<I>CUJ,</I> October 2000) the author at one place stated:</p>

<BLOCKQUOTE>
<p>...I thought about adding a method of the form:</p>

<pre>
string type_name() const
{return typeid(*data).name();}
</pre>

<p>but this method would return strings such as <B>&#147;variant_t::Impl&lt;int&gt;&#148;</B>, revealing implementation details...</p>
</BLOCKQUOTE>

<p>Although, his statement is certainly true, I have found a simple solution to the problem of revealing implementation details of class <B>variant_t</B>. With a few additions it is possible to get the exact name of type <B>T</B>. In Listing 4 of the article, three lines should be added [broken here to fit column layout]:</p>

<p>1) In the public part of struct <B>ImplBase</B>:</p>

<pre>
virtual std::string
TypeName() const = 0;
</pre>

<p>2) In the public part of struct <B>Impl</B>:</p>

<pre>
virtual std::string TypeName() const
{ return typeid(T).name(); }
</pre>

<p>3) In the public part of class <B>variant_t</B>:</p>

<pre>
std::string type_name() const
{ return data-&gt;TypeName(); }
</pre>

<p>I have changed the <B>test0</B> function from the article, to demonstrate the effects of these changes, as shown in <a href="list1.htm">Listing 1</a>.</p>
<p>Using VC++ 6 with STLport4, the output of this function looks like this (first and last line omitted, lines broken to fit column layout):</p>

<pre>
2 is of type int
3.14 is of type double
This is a string is of type
class _STL::basic_string&lt;char,class
_STL::char_traits&lt;char&gt;,
class _STL::allocator&lt;char&gt; &gt;
</pre>

<p>As I have stated before, this solution returns the exact type of <B>T</B>. This can be seen on all three lines, but the third line is a glaring example of the consequences: it now shows implementation details of <B>T</B>. To solve this kind of situation, a solution similar to one proposed in &quot;Classes for Reading and Writing Parameter Blocks&quot; (by Andrew Queisser in the same October 2000 issue) could be devised.</p>
<p>A small side effect of the solution I propose here is that the <B>is_type</B> method and the family of <B>is_type_as</B> methods could all be rewritten to use the <B>type_name</B> method. Instead of <B>Impl&lt;T&gt;</B>, type <B>T</B> could now be used in comparisons. Besides obvious (but very small) gains/losses &#151; seven characters less to compare (gain) with one extra call to virtual function (loss) &#151; I suspect that the largest gains (if any) would depend on the compiler and its implementation of the <B>type_id</B> operator.</p>
<p>Sincerely,</p>

<p>Ivan Erceg<br>
<B>ierceg@harseim.com</B></p>

<I><p>Fernando Cacciola replies:</I></p>
<p><I>Dear Ivan,</I></p>
<p><I>I received the comments you sent to CUJ regarding the article. Your solution is great! I&#146;ve changed my code accordingly and tested it under C++ Builder 5.0 and gcc 2.95.2 (under the cygwin port). I also changed the implementation of </I><B>is_type</B><I> as you suggested.</I></p>
<p><I>By the way, I noticed the cross-assignment in the code you sent As you probably discovered it has the effect of changing the &#145;inner type&#146; of the </I><B>variant_t</B><I> lvalue (since the internal </I><B>Impl&lt;T&gt;</B><I> is just copied). I have added a new </I><B>test5</B><I> function to </I><B>variant_test.cpp</B><I> to show this effect.</I></p>
<p><I>Thank you for this improvement!</I></p>
<p><I>Fernando Cacciola<br>
Sierra s.r.l.<br>
<B>fcacciola@fibertel.com.ar</B></I></p>

<p><I>We have uploaded Fernando&#146;s latest update to our online source archives for the October 2000 issue. It is also available in this month&#146;s archive in the </I><B>letters.zip</B><I> file. &#151; mb</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>The November 2000 article, &quot;Creating Truly Maintainable Class Factories,&quot; by Early Ehlinger, was well written. And the author provided several useful utility macros and classes to access DLLs.</p>
<p>What he failed to mention were the &quot;normal&quot; problems encountered with using DLLs in the Windows environment. We are all aware of the version problems that DLLs can create. And it&#146;s one more thing to distribute with the application. I would strongly argue that the support trouble the DLLs would cause are far worse the minor maintenance problems associated with a more traditional approach to class factories.</p>
<p>At the very least, the DLL wrapper classes provided should include version information so that the application could exit gracefully when the class in the DLL doesn&#146;t match the version of the class the application is using.</p>
<p><a href="list2.htm">Listing 2</a> shows three useful macros that make the traditional methods and static libraries almost as easy as the DLL method. And, rather than linear searches, using integer IDs and a switch statement is much more efficient, and could be encapsulated in macros instead of the string method illustrated here.</p>
<p>Bob Lorezen</p>

<p><I>Your approach is certainly more portable, and it does keep us out of DLL Hell, where all of us have been at one time or another. However, the DLL approach might be less cumbersome than yours if the factory needs to create a large variety of objects. Although Early only alluded to it, his article was inspired by the need to create C++ objects from XML files, where the number of different element types could conceivably be very large. I do like your idea of putting version checking code in the DLL wrappers. Thanks for writing. &#151; mb</I></p>

<hr><p>Dear Sirs,</p>
<p>I have a general programming comment concerning checking times.</p>
<p>In the November 2000 issue, in Mike Scanlon&#146;s excellent article &quot;Secure Web-Based Licencing,&quot; he suggests protecting against back clocking by means of a simple comparison:</p>

<pre>
if (lTime &lt; lCurrentTime)
   ...
</pre>

<p>This is too harsh. There are legitimate reasons for changing the system time, such as correcting the clock when it is a few minutes too fast, or when traveling across time zones with a notebook, or when changing back from daylight saving time. In all these cases many users make some common mistakes, such as doing it around midnight and forgetting to change the date, so in general I recommend a 26-hour tolerance.</p>
<p>I hope such a margin will not create too big a loophole in the scheme.</p>
<p>Best regards,</p>
<p>Jony Rosenne</p>

<h4><a href="../../../source/2001/jan01/letters.zip"></a></h4>

</blockquote></body></html>
