<HTML><HEAD>
<TITLE>January 2001/JNI-C++ Integration Made Easy/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2:	Sample native code that uses the original JNI (excerpt from jni_example_org.cpp)</A></h4>
<pre>
JNIEXPORT void JNICALL 
Java_JniExample_org_1native_1call 
   (JNIEnv *env, jclass clazz, jobject obj) {

   // Lookup the integer field ('intField') in 'obj' 
   // and get its value
   jfieldID intFieldId = env-&gt;GetFieldID(clazz, "intField", "I");
   if (id == 0) throw JNIException("Field not found");
   int intFieldVal = env-&gt;GetIntField(obj, intFieldId);

   // Lookup the static String field ('stringField') in 'obj',
   // then convert the Java string representation
   // to C++ type 'const char *'.
   jfieldID strFieldId = 
      env-&gt;GetStaticFieldID(clazz, "stringField", 
         "Ljava/lang/String;");
   if (id == 0) throw JNIException("Field not found");
   jstring jstr = 
      (jstring) env-&gt;GetStaticObjectField(clazz, strFieldId);
   const char *str = 
      (jstr == 0) ? 0 : env-&gt;GetStringUTFChars(jstr, 0);

   // Lookup the integer array field ('intArray') in 'obj', 
   // then convert it to C++ type 'jint *'.
   jfieldID arrFieldId = 
      env-&gt;GetFieldID(clazz, "intArray", "[I");
   if (id == 0) throw JNIException("Field not found");
   jintArray jarr = 
      (jintArray) env-&gt;GetObjectField(obj, arrFieldId);
   jint *arr = env-&gt;GetIntArrayElements(jarr, 0);

   // Set new values
   env-&gt;SetIntField(obj, intFieldId, 0);
   arr[0] = 0; arr[1] = 0;
   env-&gt;SetStaticObjectField(clazz, strFieldId, 
      env-&gt;NewStringUTF("Good-bye, world!"));

   // Explicitly release resources
   env-&gt;ReleaseIntArrayElements(jarr, arr, 0);
   env-&gt;ReleaseStringUTFChars(jstr, str);
}
&#151; End of Listing &#151;</pre></body></html>
