<HTML>   
     <HEAD>
<TITLE>January 2001/JNI-C++ Integration Made Easy</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Mixed-Language Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">JNI-C++ Integration Made Easy</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Evgeniy Gabrilovich and Lev Finkelstein</FONT></H3>

<BLOCKQUOTE>
<p>Extremely versatile interfaces like the Java JNI also tend to be extremely cumbersome, as a rule. The authors have found a way to break that rule.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The JNI (Java Native Interface) <a href="#1">[1]</a> is a powerful framework for seamless integration between Java and other programming languages (called &#147;native languages&#148; in the JNI terminology). A common use of the JNI is when a system architect wants to benefit from both worlds, implementing communication protocols in Java and computationally expensive algorithmic parts in C++. (The latter are usually compiled into a dynamic library, which is then invoked from the Java code.) The JNI provides native applications with much of the functionality of Java, allowing them to call Java methods, access and modify Java variables, manipulate Java exceptions, ensure thread safety through Java thread synchronization mechanisms, and ultimately to directly invoke the JVM (Java Virtual Machine).</p>
<p>This functional wealth is provided through a rather complex interface between the native code and the Java programming environment. For example, accessing an integer Java member variable from the native code is a multi-step process, which involves first querying the class type whose variable is to be retrieved (using the JNI function <B>GetObjectClass</B>), obtaining the field identifier (using <B>GetFieldID</B>), and finally retrieving the field itself (using <B>GetIntField</B>). The latter function is representative of a set of functions (<B>Get&lt;type&gt;Field</B>), each corresponding to a different variable type; thus, accessing a variable requires explicit specification of the appropriate function. To streamline these steps, we provide a template (parameterized with a variable type), which encapsulates all these low-level operations, giving the programmer easy-to-use assignment/modification functionality similar to that of native C++ variables. As far as data types are concerned, we develop a complete set of templates for the C++ primitive types that correspond to Java primitive types. (In JNI programming, these C++ primitive types all begin with a lowercase &#147;j,&#148; as in <B>jint</B>, <B>jfloat</B>, etc.) We also outline a generic approach for accessing any user-defined type.</p>
<p>Note that the JNI also supplies a number of JNI API functions, which are complementary in their nature. For example, if a native function has a parameter of type <B>jstring</B>, it should first convert this parameter into a conventional C++ string of <B>char</B>s using <B>GetStringChars</B> (or <B>GetStringUTFChars</B>) and subsequently explicitly release this temporary representation using the corresponding function <B>ReleaseStringChars</B> (or <B>ReleaseStringUTFChars</B>). This mode of operation can be greatly simplified by implementing a proxy-style smart pointer, which realizes the &#147;construction as resource acquisition&#148; idiom <a href="#2">[2]</a>. When the smart pointer accesses the Java string, it transparently converts it to a C++ compatible string (a <B>char*</B>), and when it goes out of scope, the smart pointer destructor releases any temporary resources used. The proxy also provides proper handling of the transfer of ownership, similarly to the C++ Standard <B>auto_ptr</B> construct <a href="#3">[3]</a>. We also provide analogous treatment for Java arrays, featuring automatic selection of the access function based on the actual element type (e.g., <B>Get&lt;Int&gt;ArrayElements</B>), release of array elements in the destructor of this &#147;smart container,&#148; and conventional access to array elements with <B>operator[]</B>. The &#147;construction as resource acquisition&#148; idiom may also be applied to function pairs such as <B>NewGlobalRef</B>/<B>DeleteGlobalRef</B>, which are used to reserve and release global references (respectively), and <B>MonitorEnter</B>/<B>MonitorExit</B>, which are used for protecting critical sections of code, etc.</p>
<p>To make the discussion concrete, we start by developing a running example, which solves a toy problem. We first show the native code for solving this task without using the framework (&#147;before&#148;) and then show the desired code (&#147;after&#148;), streamlined using the proposed framework. In a subsequent section, we develop the JNI encapsulation framework step by step. The article ends with a larger-scale example. The C++ source files mentioned in this article are not shown, but they are part of the JNI encapsulation framework. The complete source code for the examples and the framework are available on the <I>CUJ</I> website (see <B>www.cuj.com/code</B>).</p>
<p>For background information on the JNI, see the sidebar, <a href="sidebar.htm">&#147;The JNI in a Nutshell.&#148;</a></p>

<H3><FONT COLOR="#000080">A Running Example</FONT></H3>

<p>Our toy problem defines a Java class <B>JniExample</B> that contains an integer, a static <B>String</B>, and an integer array field. Function <B>main</B> calls a native function implemented in C++, which accesses the Java fields, prints their original (default) values, and ultimately modifies them. <a href="list1.htm">Listing 1</a> shows (a fragment of) the Java class whose variables must be accessed from C++ code.</p>
<p><a href="list2.htm">Listing 2</a> shows a sample implementation of native C++ code that modifies the above variables, implemented using the original JNI. Observe that on average three to four preparatory operations are necessary to access a Java field from the native code. The revised code in <a href="list3.htm">Listing 3</a> reduces this overhead to one constructor invocation per access. Note also that assignment to Java fields becomes more intuitive too.</p>

<H3><FONT COLOR="#000080">Template-Based Encapsulation of the JNI</FONT></H3>
<p>In this section, we evolve the JNI encapsulation framework. First, we discuss access to scalar variables (of both primitive and user-defined types). We then develop a generic resource management scheme that underlies the implementation of containers (arrays and strings). Finally, we apply this scheme to advanced JNI features, such as monitors and global references.</p>

<H4><FONT COLOR="#000080">Field Access</FONT></H4>

<p>Accessing a Java variable from C++ is a cumbersome process at the very least. Our aim is to develop a technique for establishing correspondence between a C++ object and the Java variable so that all low-level access operations become transparent to the programmer. For example, a C++ object corresponding to <B>intField</B> is a proxy <a href="#4">[4]</a> of type <B>JNIField&lt;jint&gt;</B>, created using the environment handle and the Java object passed via the JNI native call:</p>

<pre>
JNIField&lt;jint&gt; intField(env, obj, "intField");
</pre>

<p>After this declaration, changing the variable value in C++ is as simple as the following:</p>

<pre>
intField = 17;
</pre>

<p>To this end, we use a template class <B>JNIField</B> (see <a href="list4.htm">Listing 4</a>), whose three constructors present three ways to attach a C++ variable to a Java field. The first constructor receives an environment handle, a reference to the Java object whose field is to be accessed, and the field name and type signature, and it connects to the designated field. The second constructor allows creation of fields whose type signature may be deduced automatically (more on this below). Both constructors compute the field identifier (using implicit calls to the JNI functions <B>GetObjectClass</B> and <B>GetFieldId</B>) and store it together with the object handle. Template class <B>JNIFieldId</B>, which encapsulates the notion of a field identifier, is also defined in <B>jni_field.h</B>. Occasionally, it might be necessary to access the same field in numerous Java objects of the same type (e.g., iterating over array elements). In such a case, the field identifier may be computed just once and cached for subsequent reuse; this mode is supported by the third constructor. The assignment and casting operators provide easy access to the variable value.</p>
<p>An interesting aspect of the field-handling templates (<B>JNIField</B>, <B>JNIFieldId</B>) is their type inference capability, which is mostly hidden from the user. Note that the JNI only supplies a set of <B>Get&lt;type&gt;Field</B> functions, each corresponding to a different variable type; thus, accessing a variable apparently requires explicit specification of the appropriate function. We circumvent this requirement by using the template specialization technique; namely, we preinstantiate the member functions of <B>JNIFieldId</B> for all the primitive types. (For example, <B>JNIFieldId&lt;jint&gt;::operator=</B> is actually implemented using the <B>SetIntField</B> function, etc.) This way, once the field is instantiated (e.g., on an integer Java variable &#151; <B>JNIField&lt;jint&gt;</B>), we no longer need to specify its type on every variable access.</p>
<p>This mechanism uses a series of basic declarations, where each primitive C++ type is associated with the corresponding Java basic type and Java array type, and is assigned the JNI type signature. The declarations are realized as C++ <B>struct</B>s, which are later used by the compiler as a lookup table. (Among other things, this relieves the user from having to remember signatures of various Java types; instead, they can be looked up whenever necessary.) For more details, see the full implementation in <B>jni_field.h</B> and <B>jni_declarations.h</B>.</p>
<p>To conclude the presentation of field access, <B>jni_field.h</B> provides similar definitions for static fields (&#147;class variables&#148; in Java terminology). It defines a template class <B>JNIStaticFieldId</B> (also specialized for the primitive types) and a template class <B>JNIStaticField</B>, which has an additional data member of type <B>jclass</B> for keeping the appropriate class object.</p>

<H4><FONT COLOR="#000080">Arrays and User-Defined Data Types</FONT></H4>

<p>The framework provides (in <B>jni_declarations.h</B>) a set of declarations to facilitate JNI arrays. We actually build a lookup table, which the compiler consults for type inference. This table may be looked up given either a primitive type or an array type. For example, the compiler can automatically deduce that an array of <B>jint</B>s is of type <B>jintArray</B> and that an array of type <B>jcharArray</B> consists of <B>jchar</B>s and has the JNI signature <B>"[C"</B>. <a href="list3.htm">Listing 3</a> contains an example of how to connect C++ code to a Java array of integers (<B>"intArray"</B>).</p>
<p>The framework can also be easily extended for custom (non-primitive) types so that they can be used by the compiler for automatic type inference. <B>jni_declarations.h</B> exemplifies this feature with the declarations for a <B>String</B> data type (<B>struct</B> <B>StringDeclarations</B>). Such declarations are immediately available for the compiler to utilize. For instance, in the C++ code in <a href="list3.htm">Listing 3</a>, we assign a new value to the string field of the running example with the following statement:</p>

<pre>
JNIStaticField&lt;jstring&gt;(env, obj, "stringField") =
   env-&gt;NewStringUTF("Good-bye, world!");
</pre>

<p>Note that we do not designate explicitly the corresponding type signature, as the compiler infers it automatically.</p>

<H4><FONT COLOR="#000080">Resource Management</FONT></H4>

<p>The JNI encapsulation framework features a generic resource management mechanism, which (when adapted properly) greatly simplifies various JNI use cases. Our resource management approach is based on the C++ &#147;construction as resource acquisition&#148; idiom <a href="#2">[2]</a>: resources are allocated in the constructor and are released in the destructor of dedicated auxiliary objects. This idiom is implemented using the Proxy pattern <a href="#5">[5]</a>, with functionality similar to that of the <B>auto_ptr</B> template of the C++ Standard library <a href="#3">[3]</a>. Our implementation thus enables the programmer to acquire a Java resource through construction of the corresponding C++ object, without having to explicitly acquire the resource; resource deallocation (release) is also performed automatically, through the C++ object destructor. Customized resource management (via the <B>isCopy</B> parameter for allocation and the <B>mode</B> parameter for deallocation) is also supported.</p>

<H4><FONT COLOR="#000080">Strings</FONT></H4>

<p>The JNI supports two kinds of strings: those that use regular (UTF-8) characters, and those that use wide (Unicode) characters. Our class <B>JNIStringUTFChars</B> provides an interface to Java UTF-8 strings of type <B>jstring</B>. Such a string can be accessed as a raw <B>const</B> <B>char*</B> or converted to C++ <B>std::string</B> for convenience <a href="#6">[6]</a>. Since Java strings cannot be modified, class <B>JNIStringUTFChars</B> provides only the <B>const</B> version of <B>operator[]</B>. Function <B>length</B> returns the length of the C++ string (using the JNI function <B>GetStringUTFLength</B>). <B>jni_resource.h</B>, which contains the complete implementation, also defines class <B>JNIStringChars</B> for accessing Java strings of wide (Unicode) characters.</p>
<p>As an example, consider the following code that attaches a C++ variable, <B>str</B>, to the static string field of the running example, using the names of the host class and the string field:</p>

<pre>
JNIStringUTFChars 
str(env, "JniExample", "stringField").
</pre>

<p>The string value can then be printed simply using <B>cout &lt;&lt; str.get()</B>.</p>
<p>To replace the value of a Java string, you must first create a new string that can later &#147;survive&#148; in the Java environment. In the code fragment below, a C++ variable is instantiated on the static string field of the running example and then assigned a brand new Java string created with the JNI function <B>NewStringUTF</B>:</p>

<pre>
JNIStaticField&lt;jstring&gt;
(env, obj, "stringField") =
   env-&gt;NewStringUTF
   ("Good-bye, world!");
</pre>

<p>Note that there is no need to worry about eventually releasing the memory occupied by this newly created string &#151; this is performed by Java&#146;s garbage collector.</p>

<H3><FONT COLOR="#000080">Arrays</FONT></H3>

<p>Our implementation of arrays features most of the functionality presented up until now. In particular, our arrays provide automatic acquisition and release of elements in the constructor and destructor respectively. (The template specialization trick is used here again to preinstantiate the array template for all primitive types so that the appropriate <B>Get&lt;Type&gt;ArrayElements</B>/<B>Release&lt;Type&gt;ArrayElements</B> functions are automatically selected based on the context.) Function <B>size</B> uses the JNI facility <B>GetArrayLength</B> to determine the number of array elements. Two versions of <B>operator[]</B> (regular and <B>const</B>) are provided to access the individual elements. <B>jni_resource.h</B> contains the implementation.</p>
<p>To access the integer array field of the running example, we instantiate a corresponding C++ variable as follows:</p>

<pre>
JNIArray&lt;jint&gt; arr(env, obj, "intArray").  
</pre>

<p>Subsequent access of the array elements is straightforward: <B>arr[0] = 0</B>.</p>
<p>The default behavior of <B>JNIArray</B> is to copy all the array elements back into the Java environment once the C++ array goes out of scope. (This is done by JNI function <B>Release&lt;Type&gt;ArrayElements</B> invoked from the array destructor.) When this behavior needs to be overridden, use member function <B>CustomRelease</B> to set the desired mode for <B>Release&lt;Type&gt;ArrayElements</B>.</p>
<p>Occasionally, it is not necessary to manipulate an entire Java array, which may be quite large. For cases when only a part of the array needs to be accessed, the JNI provides a pair of functions <B>Get&lt;Type&gt;ArrayRegion</B>/<B>Set&lt;Type&gt;ArrayRegion</B>. The file <B>jni_utils.h</B> defines corresponding template functions <B>GetArrayRegion</B>/<B>SetArrayRegion</B> (preinstantiated at compile time for primitive types) that are capable of deducing the element type based on their parameters.</p>

<H4><FONT COLOR="#000080">Monitors</FONT></H4>

<p>Monitors serve to ensure mutual exclusion of threads competing for a shared resource. To ensure resource integrity (&#147;thread safety&#148;), threads should request to enter a monitor at the beginning of the critical section and leave it at the end of the section. We have implemented a resource management technique that uses an auxiliary automatic object of type <B>JNIMonitor</B>, whose constructor enters a monitor and whose destructor leaves the monitor as soon as the object goes out of scope (see <B>jni_resource.h</B> for implementation details). <B>JNIMonitor</B>&#146;s constructor receives a handle to the object that constitutes a shared resource protected by this monitor. <a href="list5.htm">Listing 5</a> shows a sample code fragment that uses a monitor.</p>

<H4><FONT COLOR="#000080">Global References</FONT></H4>

<p>It is sometimes necessary to obtain a reference to a Java object so that it can be used across the function boundaries of C++ code. In such cases, a global reference to this object should be reserved (in contrast to most JNI functions that yield a local reference, which expires as soon as the current scope terminates). <B>jni_resource.h</B> implements an auxiliary template class <B>JNIGlobalRef</B>, whose constructor acquires a global reference to the specified object and whose destructor releases it (see sample usage in <a href="list6.htm">Listing 6</a>).</p>

<H3><FONT COLOR="#000080">Using the Code</FONT></H3>

<p>Following the STL methodology, all the framework code resides in header files and is entirely template based, so clients do not need to compile their applications with any additional libraries. In fact, client applications need only include the master file <B>jni_master.h</B>, which it self <B>#include</B>s all the other headers. The entire code for this article with complete Java-C++ integration examples can be obtained from the <I>C/C++ Users Journal</I> website at <B>www.cuj.com/code/</B>.</p>

<H3><FONT COLOR="#000080">A More Elaborate Example</FONT></H3>

<p>We now apply the JNI encapsulation framework to a more substantial example. Suppose we have a Java application in which several concurrent threads generate (a predefined number of) objects with string IDs. The task is to collect these objects in a thread-safe way and ultimately sort them by their IDs. Since earlier versions of the JDK (Java Development Kit), such as JDK 1.1, did not have the Collections framework, it is quite natural to implement the sorting container in native C++ code using the STL. <B>JniComplexExample.java</B> (not shown here for the sake of brevity) contains the Java part of this example, which uses the following native functions:</p>

<UL><LI>   <B>init_native_resources</B> &#151; initializes the native code data structures</LI>
<LI>   <B>clean_native_resources</B> &#151; releases the native resources</LI>
<LI>   <B>register_object</B> &#151; inserts a given object into the container</LI>
<LI>   <B>recall_objects</B> &#151; returns a sorted array of the collected objects</LI></UL>

<p><a href="list6.htm">Listing 6</a> shows the native code for the container, implemented using the STL <B>multimap</B>. The container holds the (Java originated) objects by global references <a href="#7">[7]</a>, associated with their string IDs. The container is realized as a Singleton object, which has two thread-safe access functions:</p>

<UL><LI>   <B>insert</B> &#151; collects a given object</LI>
<LI>   <B>exportAllObjects</B> &#151; returns all the collected objects as a <B>vector</B></LI></UL>

<p>(This <B>vector</B> is inherently sorted, since the objects are extracted from a <B>multimap</B>.) To ensure code portability, thread safety is implemented using JNI monitors. Critical sections start with monitor definition and last until the monitor is automatically destroyed as it goes out of scope.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>

<p>Let us review the properties of the solution we developed:</p>

<OL>
<LI>It is an easier to use, more straightforward approach. Whenever possible, the compiler infers variable types from the context. Java data structures are automatically exported to (and in order to save changes, are later imported from) the C++ code. Auxiliary technical operations are encapsulated in higher-level templates.</LI>
<LI>It is a less error-prone API. Fewer functions to call means fewer opportunities to err in successive function invocations. Also, it is now possible to perform various checks at compile time, instead of discovering problems much later as run-time errors.</LI>
<LI>It utilizes proper resource management. Resources are automatically deallocated when they are no longer necessary, thus preventing resource leaks, deadlocks, and starvation.</LI>
<LI>It addresses portability issues. Java portability is preserved by using only ANSI-Standard C++ and the STL <a href="#3">[3]</a>.</LI>
<LI>A possible drawback of the suggested framework is the compile-time penalty it imposes, due to heavy use of the preprocessor and embedded templates. However, this overhead is limited to the compilation time and does not propagate to the run time. The code size increase is also negligible, since most of the templates only provide type definitions (and thus do not need run-time representation at all), and unused template instantiations are discarded by the code optimizer.</LI></UL>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>The authors are thankful to Marc Briand, Herb Sutter, and Jerry Schwarz for their constructive comments and suggestions.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Java Native Interface Specification, <B>http://java.sun.com/products/jdk/1.2/docs/guide/jni/spec/jniTOC.doc.html</B>.</p>
<p><a name="2"></a>[2]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, Third Edition (Addison Wesley, 1990).</p>
<p><a name="3"></a>[3]  &#147;Information Technology &#151; Programming Languages &#151; C++,&#148; International Standard ISO/IEC 14882-1998(E).</p>
<p><a name="4"></a>[4]  The name of the C++ variable is obviously arbitrary; we use the same variable name in C++ and Java merely for convenience.</p>
<p><a name="5"></a>[5]  Erich Gamma, et al. <I>Design Patterns: Elements of Reusable Software Architecture</I> (Addison Wesley, 1995).</p>
<p><a name="6"></a>[6]  Note that the conversion function <B>asString</B> physically copies the characters.</p>
<p><a name="7"></a>[7]  Global references are required so that the Java garbage collector does not destroy the objects prematurely.</p>
<p><a name="8"></a>[8]  D.C. Schmidt and T. Harrison. &#147;Double-Checked Locking: An Optimization Pattern for Efficiently Initializing and Accessing Thread-Safe Objects,&#148; <I>Pattern Languages of Program Design</I> (Addison-Wesley, 1997).</p>

<p><i><B>Evgeniy Gabrilovich</B> is an algorithm developer at Zapper Technologies Inc. He holds an M.Sc. degree in Computer Science from the Technion-Israel Institute of Technology. His interests involve computational linguistics, information retrieval, artificial intelligence, and speech processing. He can be contacted at <B>gabr@acm.org</B>.</i></p>
<p><i><B>Lev Finkelstein</B> is an algorithm developer at Zapper Technologies Inc., and is a Ph.D. student in Computer Science at the Technion-Israel Institute of Technology. His interests include artificial intelligence, machine learning, multi-agent systems, and data mining. He can be reached at <B>lev@zapper.com</B>.</i></p>

<h4><a href="../../../source/2001/jan01/gabrilov.zip"></a></h4>


</blockquote></body></html>
