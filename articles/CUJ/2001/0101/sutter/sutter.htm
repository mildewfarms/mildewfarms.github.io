<HTML>   
     <HEAD>
<TITLE>January 2001/Sutter's Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Containers in Memory: How Big Is Big?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>If you are basing your selection of standard containers on memory requirements, then Herb has some bad news and some good news.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 by Herb Sutter</p>
<p>This column addresses two topics: an update on what&#146;s going on in the C++ standards process, and a technical question. For information about the former, see the accompanying &quot;Standards Update&quot; <a href="sidebar.htm">sidebar</a> for breaking news about the 1998 C++ Standard&#146;s first official update, whose ink should be drying as you read this, and how it affects you.</p>
<p>The technical question is this: how much memory do the various standard containers use to store the same number of objects of the same type <B>T</B>? To answer this question, we have to consider two major items:</p>
<UL><LI>   the internal data structures used by containers like <B>vector</B>, <B>deque</B>, <B>list</B>, <B>set/multiset</B>, and <B>map/multimap</B>; and</LI>
<LI>   the way dynamic memory allocation works.</LI>
</UL>

<p>Let&#146;s begin with a brief recap of dynamic memory allocation and then work our way back up to what it means for the Standard library.</p>

<H3><FONT COLOR="#000080">Memory Managers and Their Strategies: a Brief Survey</FONT></H3>
<p>To understand the total memory cost of using various containers, it&#146;s important to understand the basics of how the underlying dynamic memory allocation works &#151; after all, the container has to get its memory from some <I>memory manager</I> somewhere, and that manager in turn has to figure out how to parcel out available memory by applying some <I>memory management strategy.</I> Here, in brief, are two popular memory management strategies. Further details are beyond the scope of this article; consult your favorite operating systems text for more information:</p>

<UL><LI>   <I>General-purpose allocation</I> can provide any size of memory block that a caller might request (the <I>request size,</I> or <I>block size</I>). General-purpose allocation is very flexible, but has several drawbacks, two of which are: a) performance, because it has to do more work; and b) <I>fragmentation,</I> because as blocks are allocated and freed we can end up with lots of little noncontiguous areas of unallocated memory.</LI>
<LI>   <I>Fixed-size allocation</I> always returns a block of the same fixed size. This is obviously less flexible than general-purpose allocation, but it can be done much faster and doesn&#146;t result in the same kind of fragmentation.</LI>
</UL>

<p>In practice, you&#146;ll often see combinations of the above. For example, perhaps your memory manager uses a general-purpose allocation scheme for all requests over some size <B>S</B>, and as an optimization provides a fixed-size allocation scheme for all requests up to size <B>S</B>. It&#146;s usually unwieldy to have a separate arena for requests of size 1, another for requests of size 2, and so on; what normally happens is that the manager has a separate arena for requests of multiples of a certain size, say 16 bytes. If you request 16 bytes, great, you only use 16 bytes; if you request 17 bytes, the request is allocated from the 32-byte arena, and 15 bytes are wasted. This is a source of possible overhead, but more about that in a moment.</p>
<p>The obvious next question is, who selects the memory management strategy? There are several possible layers of memory manager involved, each of which may override the previous (lower-level) one:</p>

<UL><LI>   The <I>operating system</I> kernel provides the most basic memory allocation services. This underlying allocation strategy, and its characteristics, can vary from one operating systems platform to another, and is most likely to be affected by hardware considerations.</LI>
<LI>   The <I>compiler&#146;s default runtime library</I> builds its allocation services, such as C++&#146;s <B>operator</B> <B>new</B> and C&#146;s <B>malloc</B>, upon the native allocation services. The compiler&#146;s services might just be a thin wrapper around the native ones and inherit their characteristics, or the compiler&#146;s services might override the native strategies by buying larger chunks from the native services and then parceling those out according to their own methods.</LI>
<LI>   The <I>standard containers and allocators</I> in turn use the compiler&#146;s services, and possibly further override them to implement their own strategies and optimizations.</LI>
<LI>   Finally, <I>user-defined containers</I> and/or <I>user-defined allocators</I> can further reuse any of the lower-level services (for example, they may want to directly access native services if portability doesn&#146;t matter) and do pretty much whatever they please.</LI>
</UL>

<p>Thus memory allocators come in various flavors, and can or will vary from operating system to operating system, from compiler to compiler on the same operating system, from container to container &#151; and even from object to object, say in the case of a <B>vector&lt;int&gt;</B> object which uses the strategy implemented by <B>allocator&lt;int&gt;</B>, and a <B>vector&lt;int, MyAllocator&gt;</B> object which could express-mail memory blocks from Taiwan unless it&#146;s a weekday night and the Mets are playing, or implement whatever other strategy you like.</p>

<H3><FONT COLOR="#000080">&quot;I&#146;ll Take &#145;Operator New&#146; For 200 Bytes, Alex&quot;</FONT></H3>

<p>When you ask for <I>n</I> bytes of memory using <B>new</B> or <B>malloc</B>, you actually use up <I>at least n</I> bytes of memory because typically the memory manager must add some overhead to your request. Two common considerations that affect this overhead are:</p>

<H4><FONT COLOR="#000080">1. Housekeeping Overhead</FONT></H4>

<p>In a general-purpose (i.e., not fixed-size) allocation scheme, the memory manager will have to somehow remember how big each block is so that it later knows how much memory to release when you call <B>delete</B> or <B>free</B>. Typically the manager remembers the block size by storing that value at the beginning of the actual block it allocates, and then giving you a pointer to &quot;your&quot; memory that is offset past the housekeeping information. (See <a href="fig1.htm">Figure 1</a>.) Of course, this means it has to allocate extra space for that value, which could be a number as big as the largest possible valid allocation and so is typically the same size as a pointer. When freeing the block, the memory manager just takes the pointer you give it, subtracts the number of housekeeping bytes and reads the size, then performs the deallocation.</p>
<p>Of course, fixed-size allocation schemes (i.e., ones that return blocks of a given known size) don&#146;t need to store such overhead because they always know how big the block will be.</p>

<H4><FONT COLOR="#000080">2. Chunk Size Overhead</FONT></H4>

<p>Even when you don&#146;t need to store extra information, a memory manager will often reserve more bytes than you asked for because memory is often allocated in certain-sized chunks. For one thing, some platforms require certain types of data to appear on certain byte boundaries (e.g., some require pointers to be stored on 4-byte boundaries) and either break or perform more slowly if they&#146;re not. This is called <I>alignment,</I> and even plain old built-in C-style arrays are affected by this need for alignment; see <a href="fig2.htm">Figure 2</a>. (Incidentally, this is why it&#146;s surprisingly tricky to wordsmith the requirement that &quot;vectors must be contiguous&quot; in the same sense as arrays &#151; in <a href="fig2.htm">Figure 2</a>, the memory is considered contiguous, so what is &quot;contiguous,&quot; really? See also the &quot;Standards Update&quot; <a href="sidebar.htm">sidebar</a> accompanying this article.) The C++ Standard guarantees that all memory allocated via <B>operator new</B> or <B>malloc</B> will be suitably aligned for any possible kind of object you might want to store in it, which means that <B>operator new</B> and <B>malloc</B> have to respect the strictest possible alignment requirement of the native platform.</p>
<p>Alternatively, as described earlier, a fixed-size allocation scheme might maintain memory arenas for blocks of certain sizes that are multiples of some basic size <I>m,</I> and a request for <I>n</I> bytes will get rounded up to the next multiple of <I>m.</I></p>

<H3><FONT COLOR="#000080">Memory and the Standard Containers: the Basic Story</FONT></H3>

<p>Now we can address the original question: how much memory do the various standard containers use to store the same number of elements of the same type <B>T</B>? Each standard container uses a different underlying memory structure and therefore imposes different overhead per contained object:</p>

<UL><LI>   A <B>vector&lt;T&gt;</B> internally stores a contiguous C-style array of <B>T</B> objects, and so has no extra per-element overhead at all (besides padding for alignment, of course; note that here &quot;contiguous&quot; has the same meaning as it does for C-style arrays, as shown in <a href="fig2.htm">Figure 2</a>).</LI>
<LI>   A <B>deque&lt;T&gt;</B> can be thought of as a <B>vector&lt;T&gt;</B> whose internal storage is broken up into chunks. A <B>deque&lt;T&gt;</B> stores chunks, or &quot;pages,&quot; of objects; the actual page size isn&#146;t specified in the Standard and depends mainly on how big <B>T</B> objects are and on the size choices made by your Standard library implementer. This paging requires the <B>deque</B> to store one extra pointer of management information per page, which usually works out to a mere fraction of a bit per contained object; for example, on a system with 8-bit bytes and 4-byte <B>int</B> and pointers, a <B>deque&lt;int&gt;</B> with a 4K page size incurs an overhead per <B>int</B> of 0.03125 bits &#151; just 1/32 of a bit. There&#146;s no other per-element overhead because <B>deque&lt;T&gt;</B> doesn&#146;t store any extra pointers or other information for individual <B>T</B> objects. There is no requirement that a <B>deque</B>&#146;s pages be C-style arrays, but that&#146;s the usual implementation.</LI>
<LI>   A <B>list&lt;T&gt;</B> is a doubly-linked list of nodes that hold <B>T</B> elements. This means that for each <B>T</B> element, <B>list&lt;T&gt;</B> also stores two pointers, which point to the previous and next nodes in the list. Every time we insert a new <B>T</B> element, we also create two more pointers, so a <B>list&lt;T&gt;</B> requires at least two pointers&#146; worth of overhead per element.</LI>
<LI>   A <B>set&lt;T&gt;</B> (and, for that matter, a <B>multiset&lt;T&gt;</B>, <B>map&lt;Key,T&gt;</B>, or <B>multimap&lt;Key,T&gt;</B>) also stores nodes that hold <B>T</B> (or <B>pair&lt;const Key,T&gt;</B>) elements. The usual implementation of a <B>set</B> is a tree with three extra pointers per node. Often people see this and think, &quot;why three pointers? isn&#146;t two enough, one for the left child and one for the right child?&quot; The reason three are needed is that we also need an &#145;up&#146; pointer to the parent node, otherwise determining the &#145;next&#146; element starting from some arbitrary iterator can&#146;t be done efficiently. (Besides trees, other internal implementations of <B>set</B> are possible; for example, an alternating skip list can be used, which still requires at least three pointers per element in the set <a href="#1">[1]</a>.)</LI>
</UL>

<p><a href="tab1.htm">Table 1</a> summarizes this basic overhead for each container.</p>

<H3><FONT COLOR="#000080">Memory and the Standard Containers: the Real World</FONT></H3>

<p>Now we get to the interesting part: don&#146;t be too quick to draw conclusions from <a href="tab1.htm">Table 1</a>. For example, judging from just the housekeeping data required for <B>list</B> and <B>set</B>, you might conclude that <B>list</B> requires less overhead per contained object than <B>set</B> &#151; after all, <B>list</B> only stores two extra pointers, whereas <B>set</B> stores three. The interesting thing is that this may not be true once you take into consideration memory sizes. To dig a little deeper, consider <a href="tab2.htm">Table 2</a>, which shows the node layouts typically used internally by <B>list</B>, <B>set/multiset</B>, and <B>map/multimap</B>.</p>
<p>Next, consider what happens in the real world under the following assumptions, which happen to be drawn from a popular platform:</p>

<UL><LI>   Pointers and <B>int</B>s are four bytes long (typical for 32-bit platforms).</LI>
<LI>   <B>sizeof(string)</B> is 16. Note that this is just the size of the immediate <B>string</B> object and ignores any data buffers the <B>string</B> may itself allocate; the number and size of <B>string</B>&#146;s internal buffers will vary from implementation to implementation, but doesn&#146;t affect the comparative results below. (This is more variable; I took the value of one popular implementation.)</LI>
<LI>   The default memory allocation strategy is to use fixed-size allocation where the block sizes are multiples of 16 bytes. (Typical for Microsoft Visual C++.) <a href="tab3.htm">Table 3</a> contains a sample analysis with these numbers. You can try this at home; just plug in the appropriate numbers for your platform to see how this kind of analysis applies to your own current environment. To see how to write a program that figures out what the actual block overhead is for allocations of specific sizes on your platform, see Jon Bentley&#146;s classic <I>Programming Pearls, Second edition</I> <a href="#2">[2]</a>.</LI>
</UL>

<p>Looking at <a href="tab3.htm">Table 3</a>, we immediately spy one interesting result: For many cases &#151; that is, for about 75% of possible sizes of the contained type <B>T</B> &#151; <B>list</B> and <B>set/multiset</B> actually incur the same memory overhead in this particular environment. What&#146;s more, here&#146;s an even more interesting result: even <B>list&lt;char&gt;</B> and <B>set&lt;int&gt;</B> have the same actual overhead in this particular environment, even though the latter stores more object data and more housekeeping data in each node. If memory footprint is an important consideration for your choice of data structure in specific situations, take a few minutes to do this kind of analysis and see what the difference really is in your own environment &#151; sometimes it&#146;s less than you might think!</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Each kind of container chooses a different space/performance tradeoff. You can do things efficiently with <B>vector</B> and <B>set</B> that you can&#146;t do with <B>list</B>, such as O(log N) searching <a href="#3">[3]</a>; you can do things efficiently with <B>vector</B> that you can&#146;t do with <B>list</B> or <B>set</B>, such as random element access; you can do things efficiently with <B>list</B>, less so with <B>set</B>, and more slowly still with <B>vector</B>, such as insertion in the middle; and so on. To get more flexibility often requires more storage overhead inside the container, but after you account for data alignment and memory allocation strategies, the difference in overhead may be significantly different than you&#146;d think! For related discussion about data alignment and space optimizations, see also Item 30 in <I>Exceptional C++</I> <a href="#4">[4]</a>.</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>Thanks to Pete Becker for the discussion that got me thinking about this topic.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  L. Marrie. &quot;Alternating Skip Lists,&quot; <I>Dr. Dobbs Journal,</I> 25(8), August 2000.</p>
<p><a name="2"></a>[2]  Jon Bentley. <I>Programming Pearls, Second Edition</I> (Addison-Wesley, 2000).</p>
<p><a name="3"></a>[3]  This is possible if the <B>vector</B>&#146;s contents are sorted.</p>
<p><a name="4"></a>[4]  Herb Sutter. <I>Exceptional C++, 47 Engineering Puzzles, Programming Problems, and Solutions</I> (Addison-Wesley, 2000).</p>
<p><a name="5"></a>[5]  Herb Sutter. &#147;Standard Library News, Part 1: Vectors and Deques,&#148; <I>C++ Report</I>, 11(7), July/August 1999.</p>
<p><a name="6"></a>[6]  Herb Sutter. &#147;When is a Container not a Container?&#148; <I>C++ Report</I>, 11(5), May 1999.</p>

<p><i><B>Herb Sutter</B> (<B>hsutter@peerdirect.com</B>) is chief technology officer of PeerDirect Inc. and the architect of their heterogeneous database replication products. He is secretary of the ISO/ANSI C++ standards committees, a member of the ANSI SQL committee, and author of the book <I>Exceptional C++</I> (Addison-Wesley).</i></p>

</blockquote></body></html>
