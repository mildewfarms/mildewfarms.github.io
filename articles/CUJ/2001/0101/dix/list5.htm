<HTML><HEAD>
<TITLE>January 2001/Working with SOAP, the Simple Object Access Protocol/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: Sample use of the author&#146;s SOAP utility classes</A></h4>
<pre>
//
// AddNews SOAP Client Application
//
//  Written by Chris Dix, July 2000
//  Don't drop the SOAP.
 
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;iostream.h&gt;

#include &lt;winsock2.h&gt;   // Windows socket functions
#include "soaputil.h"   // SOAP Utility functions
using namespace SoapUtils;

// SOAP-Web Services Resource Center
const char* kSOAPWRCHost =      "www.soap-wrc.com";
const char* kSOAPWRCAddress =   "/webservices/soapv11.asp";

// Microsoft
const char* kMSHost =           "131.107.91.76";
const char* kMSAddress =        "/soapdemo/services.asp";

bool AddNews( const string&amp; strLogin, 
    const string&amp; strPassword,
    const string&amp; strCaption, const string&amp; strDescription,
    const string&amp; strURL, string&amp; strID )
{
        SimpleSoapRpcMessage msg;
        SimpleSoapRpcMessage response;
    
    strID.erase();

    msg.putMethod( "AddNews" );
    msg.putMethodNamespace( 
        "http://www.soap-wrc.com/webservices/soapv11.asp", 
        "isoapwrc" );

    msg.addParameter( "login", strLogin );
    msg.addParameter( "password", strPassword );
    msg.addParameter( "caption", strCaption );
    msg.addParameter( "description", strDescription );
    msg.addParameter( "url", strURL );
    
    SoapHttpPostTransport binding;
    binding.putHost( kSOAPWRCHost );
    binding.putAddress( kSOAPWRCAddress );
    binding.debugging( true );

    bool bSuccess = binding.sendMessage( &amp;msg, &amp;response );
    if ( bSuccess )
    {
        if ( response.containsFault() )
        {
            cout &lt;&lt; "The response contained a fault.\n";
            string s = response.getBody();
            cout &lt;&lt; s.c_str();
            return( false );
        }
        strID = response.getReturnValue();
    }

    return( bSuccess );
}

bool GetStockQuote( const string&amp; strSymbol, 
    const string&amp; strDescription, string&amp; strPrice )
{
        SimpleSoapRpcMessage msg;
        SimpleSoapRpcMessage response;
    
    strPrice.erase();

    msg.putMethod( "GetStockQuote" );
    msg.putMethodNamespace( 
        "http://www.soaptoolkit.com/soapdemo/services.xml", 
        "ss" );
    
    msg.addParameter( "symbol", strSymbol );
    msg.addParameter( "description", strDescription );
    
    SoapHttpPostTransport binding;
    binding.putHost( kMSHost );
    binding.putAddress( kMSAddress );
    binding.debugging( true );

    bool bSuccess = binding.sendMessage( &amp;msg, &amp;response );
    if ( bSuccess )
    {
        if ( response.containsFault() )
        {
            cout &lt;&lt; "The response contained a fault.\n";
            string s = response.getBody();
            cout &lt;&lt; s.c_str();
            return( false );
        }
        strPrice = response.getReturnValue();
    }

    return( bSuccess );
}

int main( void )
{    
    bool bSuccess = false;
    char pszHostName[50];
    string strCaption;
    string strDesc;
    string strHostName;
    string strID;
    string strPrice;

    cout &lt;&lt; "C++ Users Journal SOAP Client Example\n";
    
    // Make a call to the Microsoft example site.
    bSuccess = GetStockQuote( "MSFT", 
        "Microsoft Corporation", strPrice );
    if ( bSuccess )
    {
        cout &lt;&lt; "GetStockQuote succeeded, price is $";
        cout &lt;&lt; strPrice.c_str();
        cout &lt;&lt; ".\n";
        strDesc = "Stock Quote for Microsoft(MSFT): $";
        strDesc += strPrice;
        strDesc += ".";
    }
    else
    {
        cout &lt;&lt; "Call to GetStockQuote failed.\n";
        strDesc = "Could not access stock quote server.\n";
    }

    // Try to get the name of the local machine.
    memset( pszHostName, 0, 50 );
    if ( gethostname( pszHostName, 50 ) == SOCKET_ERROR )
    {
        cout &lt;&lt; "Could not get the client host name.\n";
        strHostName = "Unknown";
    }
    else
    {
        strHostName = pszHostName;
    }

    strCaption = "Message sent by ";
    strCaption += pszHostName;

    // Call the SOAP-WRC site, and we pass in the results 
    // of our call to Microsoft.  With that, we have 
    // combined two Web Services.
    bSuccess = AddNews( "cuj", "stroustrup", strCaption,
        strDesc, "http://www.cuj.com/", strID );

    // Uncomment these lines if you want to see a response
    // that contains a SOAP Fault.
    //bSuccess = AddNews( "cujo", "stroustrup", strCaption,
    //    strDesc, "http://www.cuj.com/", strID );

    if ( bSuccess )
    {
        cout &lt;&lt; "AddNews succeeded, id is ";
        cout &lt;&lt; strID.c_str();
        cout &lt;&lt; ".\n";
    }
    else
    {
        cout &lt;&lt; "Call to AddNews failed.\n";
    }

    return( 0 );
}
&#151; End of Listing &#151;</pre></body></html>
