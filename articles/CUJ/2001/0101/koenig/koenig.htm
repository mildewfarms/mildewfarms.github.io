<HTML>   
     <HEAD>
<TITLE>January 2001/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Using Library Algorithms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>If you&#146;re struggling with complicated loops and off-by-one errors, you might be doing things the hard way. Andy shows us how easy it can be, with a little help from the standard library.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p><I>Excerpted from </I>Accelerated C++: Practical Programming by Example<I> by Andrew Koenig and Barbara E. Moo, &copy; 2000 by AT&amp;T, Inc., and Barbara E. Moo. Reprinted by permission of Addison Wesley Longman, Inc. All rights reserved.</I></p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>This article is a slightly modified excerpt from our book, <I>Accelerated C++</I> <a href="#1">[1]</a>, which became available in September 2000. Our aim in this book is to teach as quickly as possible how to write useful C++ programs. Therefore, we start by explaining the most useful parts of C++. This strategy may seem obvious, but it has the radical implication that we do not begin by teaching a C-like subset of C++. Instead, we use high-level data structures from the start, explaining only later the foundations on which those data structures rest. This approach makes it possible to begin writing idiomatic C++ programs immediately.</p>
<p>Our approach is unusual in another way: We concentrate on solving problems, rather than on exploring language and library features. We explain the features, of course, but we do so in order to support the programs, rather than using the programs as an excuse to demonstrate the features.</p>
<p>Because this book teaches C++ programming, not just features, it is useful not only for beginners, but also for for readers who are already familiar with C++, and who want to use the language in a more natural, effective style. Too often, people new to C++ learn the language mechanics without learning how to apply the language to everyday problems. Our book offers the opportunity to move beyond the mechanics.</p>
<p>We used to teach a week-long intensive C++ course every summer at Stanford University. We originally adopted a traditional approach to that course: Assuming that the students already knew C, we started by showing them how to define classes, and then moved systematically through the rest of the language. We found that our students would be confused and frustrated for about two days &#151; until they had learned enough that they could start writing useful programs. Once they got to that point, they learned quickly.</p>
<p>When we got our hands on a C++ implementation that supported enough of what was then the brand-new standard library, we overhauled the course. The new course used the library right from the start, concentrating on writing useful programs and going into details only after the students had learned enough to use those details productively.</p>
<p>The results were dramatic: After one day in the classroom, our students were able to write programs that had taken them most of the week in the old course. Moreover, their frustration vanished.</p>
<p>The following excerpt comes from a point about a third of the way through the book. In it, we talk about how to use standard-library algorithms to solve everyday programming problems. At this point in the book, we have already explained, and used, standard-library containers and iterators. The part of the book that you are about to see introduces several new algorithms and programming techniques &#151; but its main goal is to make the parts of the library that it describes so comfortable to use that readers will reach for them automatically when they want to solve appropriate problems.</p>

<H3><FONT COLOR="#000080">Analyzing Strings</FONT></H3>

<p>Earlier in the book, we introduced iterators, and gave an example that used a loop to concatenate copies of the elements of a <B>vector&lt;string&gt;</B>, which we called <B>bottom</B>, onto the end of another <B>vector&lt;string&gt;</B>, which called <B>ret</B>:</p>

<pre>
for (vector&lt;string&gt;::const_iterator
   it = bottom.begin();
   it != bottom.end(); ++it)

   ret.push_back(*it);
</pre>

<p>We noted that this loop was equivalent to inserting a copy of the elements of <B>bottom</B> at the end of <B>ret</B>, an operation that vectors provided directly:</p>

<pre>
ret.insert(ret.end(), bottom.begin(), bottom.end());
</pre>

<p>This problem has even a more general solution: We can separate the notion of copying elements from that of inserting elements at the end of a container, as follows:</p>

<pre>
copy(bottom.begin(), bottom.end(), back_inserter(ret));
</pre>

<p>Here, <B>copy</B> is an example of a generic algorithm, and <B>back_inserter</B> is an example of an iterator adaptor.</p>
<p>A generic algorithm is an algorithm that is not part of any particular kind of container, but instead takes a cue from its arguments&#146; types regarding how to access the data it uses. The standard library&#146;s generic algorithms usually take iterators as their arguments, which they use to manipulate the elements of the underlying containers. So, for example, the <B>copy</B> algorithm takes three iterators, which we&#146;ll call <B>begin</B>, <B>end</B>, and <B>out</B>, and copies all the elements in the range <B>[begin, end)</B> (i.e., the elements between <B>begin</B> and <B>end</B>, including <B>begin</B> but excluding <B>end</B>) to a sequence of elements starting at <B>out</B> and extending as far as necessary. In other words,</p>

<pre>
copy(begin, end, out);
</pre>

<p>has the same effect as</p>

<pre>
while (begin != end) {
   *out++ = *begin++;
}
</pre>

<p>except that the <B>while</B> statement changes the values of the iterators, and <B>copy</B> doesn&#146;t.</p>
<p>Before we describe iterator adaptors, we should note that this loop depends on the use of the postfix version of the increment operators. These operators differ from the prefix versions in that <B>begin++</B> returns a copy of the original value of <B>begin</B>, incrementing the stored value of <B>begin</B> as a side effect. Thus,</p>

<pre>
it = begin++;
</pre>

<p>is equivalent to</p>

<pre>
it = begin;
++begin;
</pre>

<p>The increment operators and <B>*</B> have the same precedence, and they are both right-associative, which means that <B>*out++</B> has the same meaning as <B>*(out++)</B>. Thus,</p>

<pre>
*out++ = *begin++;
</pre>

<p>is equivalent to the more verbose</p>

<pre>
out = begin;
++out;
++begin;
</pre>

<p>Let&#146;s return to iterator adaptors, which are functions that yield iterators with properties that are related to their arguments in useful ways. The iterator adaptors, such as <B>back_inserter</B>, are defined in <B>&lt;iterator&gt;</B>. The most common iterator adaptor is <B>back_inserter</B>, which takes a container as its argument and yields a kind of iterator that, when used as a destination, appends values to the container. For example, <B>back_inserter(ret)</B> is an iterator that, when used as a destination, appends elements to <B>ret</B>. Therefore,</p>

<pre>
copy(bottom.begin(), bottom.end(), back_inserter(ret));
</pre>

<p>copies all of the elements of <B>bottom</B> and appends them to the end of <B>ret</B>. After this function completes, the size of <B>ret</B> will be its old size plus <B>bottom.size()</B>.</p>
<p>Notice that we could not call</p>

<pre>
// error--ret is not an iterator
copy(bottom.begin(), bottom.end(), ret);
</pre>

<p>because <B>copy</B>&#146;s third argument is an iterator, not a container. Nor could we call</p>

<pre>
// error--no element at ret.end()
copy(bottom.begin(), bottom.end(), ret.end());
</pre>

<p>This latter mistake is particularly insidious, because the program will compile. What it does when you try to run it is another story entirely. The first thing <B>copy</B> will try to do is assign a value to the element at <B>ret.end()</B>. There&#146;s no element there, so what the implementation will do is anybody&#146;s guess.</p>
<p>Why is <B>copy</B> designed this way? Because separating the notions of copying elements and expanding a container allows programmers to choose which operations to use. For example, we might want to copy elements on top of elements that already exist in a container, without changing the container&#146;s size. As another example, we might want to use <B>back_inserter</B> to append elements to a container that are not merely copies of another container&#146;s elements.</p>

<H3><FONT COLOR="#000080">Another Way to Split</FONT></H3>

<p>Another function that we can write more directly using the standard algorithms is the <B>split</B> function, which we wrote earlier. This function takes a string as its argument and returns a <B>vector&lt;string&gt;</B> with elements that represent the words that constitute the string. The hard part of writing the earlier version of that function was dealing with the indices that delimited each word in the input line. We can replace the indices by iterators and use standard-library algorithms to do much of the work for us:</p>

<pre>
bool not_space(char c)
{ return !isspace(c); }
vector&lt;string&gt;
split(const string&amp; str)
{
   typedef string::const_iterator
      iter;
   vector&lt;string&gt; ret;
   iter i = str.begin();
   while (i != str.end()) {
      // ignore leading blanks
      i = find_if(i, str.end(),
             not_space);

      // find end of next word
      iter j = find_if(i, str.end(),
                  isspace);
      // copy the characters
      // in [i, j)
      if (i != str.end())
        ret.push_back(string(i, j));
      i = j;
   }
   return ret;
}
</pre>

<p>This code uses a lot of new functions, so it will take a bit of explanation. The key thing to keep in mind is that it implements the same algorithm as the original, using <B>i</B> and <B>j</B> to delimit each word in <B>str</B>. Once we&#146;ve found a word, we copy it from <B>str</B> and push the copy onto the back of <B>ret</B>.</p>
<p>This time, <B>i</B> and <B>j</B> are iterators, not indices. We use <B>typedef</B> to abbreviate the iterator type so that we can use <B>iter</B> instead of the longer <B>string::const_iterator</B>. Although the <B>string</B> type does not support all of the container operations, it does support iterators, so we can use the standard-library algorithms on the characters of a string.</p>
<p>The algorithm that we use in this example is <B>find_if</B>. Its first two arguments are iterators that denote a sequence; the third is a predicate, which tests its argument and returns <B>true</B> or <B>false</B>. The <B>find_if</B> function calls the predicate on each element in the sequence, stopping when it finds an element for which the predicate yields true.</p>
<p>The first call to <B>find_if</B> seeks the first nonblank character, which will denote the beginning of the word. Remember that one or more spaces might begin a line or might separate adjacent words in the input. We do not want to include these spaces in the output. Because the library provides an <B>isspace</B> function, but not its logical opposite, we wrote our own simple predicate to return the negation of <B>isspace</B>. Thus <B>not_space(c)</B> will be true if and only if <B>c</B> is a nonblank character.</p>
<p>After the call to <B>find_if</B>, <B>i</B> will denote the first nonblank character, if any, in <B>str</B>. We use <B>i</B> in the next call to <B>find_if</B>, which looks for the first space in <B>[i, str.end())</B>. If <B>find_if</B> fails to find a value for which the predicate is true, it returns its second argument. Therefore, <B>j</B> will be initialized to denote the blank that separates the next word in <B>str</B> from the rest of the line or, if we are on the last word in the line, <B>j</B> will be equal to <B>str.end()</B>.</p>
<p>At this point, <B>i</B> and <B>j</B> delimit a word in <B>str</B>. All that&#146;s left is to use these iterators to copy the data from <B>str</B> into <B>ret</B>. In the earlier version of <B>split</B>, we used <B>string::substr</B> to create the copy. However, that version of <B>split</B> operated on indices, not iterators, and there isn&#146;t a version of <B>substr</B> that operates on iterators. Instead, we construct a new string directly from the iterators that we have. The expression <B>string(i, j)</B> will create a string that is a copy of the characters in the range <B>[i, j)</B>. We push this new string onto the back of <B>ret</B>.</p>
<p>It is worth pointing out that one thing that is missing from this version of the program is the various tests of the index <B>i</B> against <B>str.size()</B>. Nor are there the obvious equivalent tests of the iterator against <B>str.end()</B>. The reason is that the library algorithms are written to handle gracefully calls that pass an empty range. For example, at some point the first call to <B>find_if</B> will set <B>i</B> to the value returned by <B>str.end()</B>, but there is no need to check <B>i</B> before passing it to the second call to <B>find_if</B>. The reason is that <B>find_if</B> will look in the empty range <B>[i, str.end())</B> and will return <B>str.end()</B> to indicate that there is no match.</p>

<H3><FONT COLOR="#000080">Palindromes</FONT></H3>

<p>Another problem in character manipulation that we can use library facilities to solve succinctly is deciding whether a word is a palindrome. Palindromes are words that are spelled the same way front to back as back to front. For example, &quot;Eve&quot; and &quot;radar&quot; are both palindromes. Notice that our definition deliberately ignores case distinctions; we want to consider <B>e</B> and <B>E</B> as equivalent.</p>
<p>Here is a compact solution that uses the library:</p>

<pre>
bool is_palindrome(string s)
{
   transform(s.begin(), s.end(),
      s.begin(), tolower);
   return equal(s.begin(), s.end(),
      s.rbegin());
}
</pre>

<p>First, we convert the string to its lowercase equivalent by calling the <B>transform</B> library function. This function takes three iterators and a function. The first two iterators specify a range of elements to transform; the function defines the transformation. The third iterator is the destination into which to put the result of running the function. When we call <B>transform</B>, we are responsible for ensuring that the destination has room for the values from the input sequence. In this case, we are storing back into the same string that supplies the input, so we know that there is enough room. We made <B>s</B> a <B>string</B>, rather than a <B>const string&amp;</B>, because the call to <B>transform</B> modifies <B>s</B>, and we don&#146;t want <B>is_palindrome</B> to change its argument.</p>
<p>The effect of calling <B>transform</B> is to run <B>tolower</B> on each character in <B>s</B> and put the result back into <B>s</B> at the same position. The <B>tolower</B> function comes from <B>&lt;cctype&gt;</B> and does what its name suggests: It returns the lowercase version of its argument. If its argument is not an uppercase letter, it returns a copy of the argument.</p>
<p>The <B>return</B> statement calls the library function <B>equal</B> and uses <B>rbegin</B>, a container function that we have not yet seen. Like <B>begin</B>, the <B>rbegin</B> function returns an iterator, but this time it is an iterator that starts with the last element in the container and moves backward through the container.</p>
<p>The <B>equal</B> function compares two sequences to determine whether the values in them are equal. As usual, the first sequence is specified by the first two iterators passed to <B>equal</B>. The third argument is the starting point for the second sequence. The <B>equal</B> function assumes that the second sequence is the same size as the first, so it does not need an ending iterator. Because we pass <B>rbegin</B> as the starting point for the second sequence, the effect of this call is to compare values from the back of <B>s</B> to values in the front. The <B>equal</B> function will compare the first character in <B>s</B> with the last. Then it will compare the second to the next to last, and so on. This behavior is precisely what we want.</p>

<H3><FONT COLOR="#000080">Finding URLs</FONT></H3>

<p>As the last of our examples of character manipulation, let&#146;s write a function that finds web addresses, called URLs (uniform resource locators), that are embedded in a string. We might use such a function by creating a single string that holds the entire contents of a document. The function would then scan the document and find all the URLs in it.</p>
<p>A URL is a sequence of characters of the form <I>protocol- name</I><B>://</B><I>resource-name</I> where <I>protocol-name</I> contains only letters, and <I>resource-name</I> may consist of letters, digits, and certain punctuation characters. Our function will take a string argument and will look for instances of <B>://</B> in that string. Each time we find such an instance, we&#146;ll look for the protocol-name that precedes it and the resource-name that follows.</p>
<p>Because we want our function to find all the URLs in its input, we&#146;ll want it to return a <B>vector&lt;string&gt;</B>, with one element for each URL. The function executes by moving the iterator <B>b</B> through <B>s</B>, looking for the characters <B>://</B> that might be a part of a URL. If we find these characters, it looks backward to find the <I>protocol-name</I> and it looks forward to find the <I>resource-name</I>:</p>

<pre>
vector&lt;string&gt; find_urls(const string&amp; s)
{
   vector&lt;string&gt; ret;
   typedef string::const_iterator iter;
   iter b = s.begin(), e = s.end();
   // look through the entire input
   while (b != e) {
      // look for one or more letters followed by ://
      b = url_beg(b, e);
      // if we found it
      if (b != e) {
         // get the rest of the URL
         iter after = url_end(b, e);
         // remember the URL
         ret.push_back(string(b, after));
         // advance b and check for more URLs on this line
         b = after;
      }
   }
   return ret;
}
</pre>

<p>We start by declaring <B>ret</B>, which is the vector into which we will put the URLs as we find them, and by obtaining iterators that delimit the string. We will have to write the <B>url_beg</B> and <B>url_end</B> functions, which will find the beginning and end of any URL in the input. The <B>url_beg</B> function will be responsible for identifying whether a valid URL is present and if so, for returning an iterator that refers to the first character of the <I>protocol-name</I>. If it does not identify a URL in the input, then it will return its second argument to indicate failure.</p>
<p>If <B>url_beg</B> finds a URL, the next task is to find the end of the URL by calling <B>url_end</B>. That function will search from the given position until it reaches either the end of the input or a character that cannot be part of a URL. It will return an iterator positioned one past the last character in the URL.</p>
<p>Thus, after the calls to <B>url_beg</B> and <B>url_end</B>, the iterator <B>b</B> denotes the beginning of a URL, and the iterator after denotes the position one past the last character in the URL:</p>

<p><IMG SRC="fig1.gif"></p>

<p>We construct a new string from the characters in this range and push that string onto the back of <B>ret</B>.</p>
<p>All that remains is to increment the value of <B>b</B> and look for the next URL. Because URLs cannot overlap one another, we set <B>b</B> to (one past) the end of the URL that we just found and continue the <B>while</B> loop until we&#146;ve looked at all the input. Once that loop exits, we return the vector that contains the URLs to our caller.</p>
<p>Now we have to think about <B>url_beg</B> and <B>url_end</B>. The <B>url_end</B> function is simpler, so we&#146;ll start there:</p>

<pre>
string::const_iterator
url_end(string::const_iterator b, string::const_iterator e)
{
   return find_if(b, e, not_url_char);
}
</pre>

<p>This function just forwards its work to the library <B>find_if</B> function. The predicate that we pass to <B>find_if</B> is one that we will write, called <B>not_url_char</B>. It will return true when passed a character that cannot be in a URL:</p>

<pre>
bool not_url_char(char c)
{
   // characters, in addition to alphanumerics, that can
   // appear in a URL
   static const string url_ch = "~;/?:@=&amp;$-_.+!*'(),";

   // see whether c can appear in a URL and return the negative
   return !(isalnum(c) ||
      find(url_ch.begin(), url_ch.end(), c) != url_ch.end());
}
</pre>

<p>Despite being small, this function uses a fair bit of new material. First is the use of the <B>static</B> storage class specifier. Local variables that are declared to be static are preserved across invocations of the function. Thus, we will create and initialize the string <B>url_ch</B> only on the first call to <B>not_url_char</B>. Subsequent calls will use the object that the first call created. Because <B>url_ch</B> is a <B>const</B> <B>string</B>, its value will not change once we have initialized it.</p>
<p>The <B>not_url_char</B> function also uses the <B>isalnum</B> function, which the <B>&lt;cctype&gt;</B> header defines. This function tests whether its argument is an alphanumeric character (a letter or a digit).</p>
<p>Finally, find is another algorithm that we haven&#146;t used yet. It is similar to <B>find_if</B>, except that instead of calling a predicate, it looks for the specific value given as its third argument. As with <B>find_if</B>, if the value sought is present, the function returns an iterator denoting the first occurrence of the value in the given sequence. If the value is not found, then <B>find</B> returns its second argument.</p>
<p>With this information in hand, we can now understand the <B>not_url_char</B> function. Because we negate the value of the entire expression before we return it, <B>not_url_char</B> will yield <B>false</B> if <B>c</B> is a letter, a digit, or any of the characters in <B>url_ch</B>. If <B>c</B> is any other value, the function returns <B>true</B>.</p>
<p>Now the hard part begins: implementing <B>url_beg</B>. This function is messy, because it must deal with the possibility that the input might contain <B>://</B> in a context that cannot be a valid URL. In practice, we&#146;d probably have a list of acceptable <I>protocol-names</I> and look only for those. For simplicity, though, we&#146;ll limit ourselves to being sure that one or more letters precede the <B>://</B> separator, and at least one character follows it:</p>

<pre>
string::const_iterator
url_beg(string::const_iterator b, string::const_iterator e)
{
   static const string sep = "://";
   typedef string::const_iterator iter;

   // i marks where the separator was found
   iter i = b;
   while (
      (i = search(i, e, sep.begin(), sep.end())) != e) {
      // make sure the separator isn't at the beginning
      // or end of the line
      if (i != b &amp;&amp;
             i + sep.size() != e) {
         // beg marks the beginning of the protocol-name
         iter beg = i;
         while (beg != b &amp;&amp;
            isalpha(beg[-1]))
            --beg;

         // is there at least one appropriate character
         // before and after the separator?
         if (beg != i &amp;&amp;
             &amp;&amp; !not_url_char(i[sep.size()]))
            return beg;
      }
      // the separator we found wasn't part of a URL;
      // advance : past this separator
      i += sep.size();
   }
   return e;
}
</pre>

<p>The easy part is to write the function header. We know that we&#146;ll be passed two iterators denoting the range in which to look, and that we&#146;ll return an iterator that denotes the beginning of the first URL in that range, if one exists. We also declare and initialize a local string, which will hold the characters that make up the separator that identifies a potential URL. Like <B>url_ch</B> in the <B>not_url_char</B> function, this string is <B>static</B> and <B>const</B>. Thus, we will not be able to change the string, and its value will be created only on the first invocation of <B>url_beg</B>.</p>
<p>The function executes by placing two iterators into the string delimited by <B>b</B> and <B>e</B>:</p>

<p><IMG SRC="fig2.gif"></p>

<p>The iterator <B>i</B> will denote the beginning of the URL separator, if any, and <B>beg</B> will indicate the beginning of the <I>protocol-name,</I> if any.</p>
<p>The function first looks for the separator by calling <B>search</B>, a library function that we haven&#146;t used before. This function takes two pairs of iterators: The first pair denotes the sequence in which we are looking, and the second pair denotes the sequence that we wish to locate. As with other library functions, if <B>search</B> fails, it returns the second iterator. Therefore, after the call to <B>search</B>, either <B>i</B> denotes (one past) the end of the input string, or it denotes a <B>:</B> that is followed by <B>//</B>.</p>
<p>If we found a separator, the next task is to get the letters (if any) that make up the <I>protocol-name.</I> We first check whether the separator is at the beginning or end of the input. If the separator is in either of those places, we know that we don&#146;t have a URL, because a URL has at least one character on either side of its separator. Otherwise, we need to try to position the iterator <B>beg</B>. The inner <B>while</B> loop moves the iterator <B>beg</B> back through the input until it hits either a non-alphabetic character or the beginning of the string. It uses yet another new idea: the notion that if a container supports indexing, so do its iterators. In other words, <B>beg[-1]</B> is the character at the position immediately before the one that <B>beg</B> denotes. We can think of <B>beg[-1]</B> as an abbreviation for <B>*(beg - 1)</B>.</p>
<p>If we were able to advance the iterator over as much as a single character, we assume we&#146;ve found a <I>protocol-name.</I> Before returning <B>beg</B>, we still have to check that there&#146;s at least one valid character following the separator. This test is more complicated. We know that there is at least one more character in the input, because we&#146;re inside the body of an <B>if</B> that compares the value of <B>i + sep.size()</B> with <B>e</B>. We can access the first such character as <B>i[sep.size()]</B>, which is an abbreviation for <B>*(i + sep.size())</B>. We test whether that character can appear in a URL by passing it to <B>not_url_char</B>. This function returns <B>true</B> if the character is not valid, so we negate the return to check that it is valid.</p>
<p>If the separator is not part of a URL, then the function advances <B>i</B> past the separator and keeps looking.</p>
<p>This code uses the decrement operator. It works like the increment operator, but it decrements its operand instead. As with the increment operator, it comes in prefix and postfix versions. The prefix version, which we use here, decrements its operand and returns the new value.</p>

<H3><FONT COLOR="#000080">Reference</FONT></H3>

<p><a name="1"></a>[1]   Andrew Koenig and Barbara E. Moo. <I>Accelerated C++: Practical Programming by Example</I> (Addison-Wesley, 2000), ISBN 0-201-70353-X.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of <I>C Traps and Pitfalls</I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>
</blockquote></body></html>

</blockquote></body></html>
