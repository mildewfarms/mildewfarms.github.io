<HTML><HEAD>
<TITLE>January 2001/The Standard Librarian/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: An Slist_iterator class, complete except for the equality operator</A></h4>
<pre>
template &lt;bool flag, class IsTrue, class IsFalse&gt;
struct choose;

template &lt;class IsTrue, class IsFalse&gt;
struct choose&lt;true, IsTrue, IsFalse&gt; {
   typedef IsTrue type;
};

template &lt;class IsTrue, class IsFalse&gt;
struct choose&lt;false, IsTrue, IsFalse&gt; {
   typedef IsFalse type;
};

template &lt;class T, bool isconst = false&gt; 
struct slist_iterator {
   typedef std::forward_iterator_tag iterator_category;
   typedef T value_type;
   typedef std::ptrdiff_t difference_type;
   typedef typename choose&lt;isconst, const T&amp;, T&amp;&gt;::type
           reference;
   typedef typename choose&lt;isconst, const T*, T*&gt;::type
           pointer;

   typedef typename choose&lt;isconst, const slist_node&lt;T&gt;*,    
                           slist_node&lt;T&gt;*&gt;::type
           nodeptr;

  slist_iterator(nodeptr x = 0) : p(x) { }
  slist_iterator(const slist_iterator&lt;T, false&gt;&amp; i) 
     : p(i.p) { }
  reference operator*() const { return p-&gt;val; }
  pointer operator-&gt;() const { return &amp;(p-&gt;val); }
  slist_iterator&amp; operator++() { 
     p = p-&gt;next; 
     return *this; 
  }
  slist_iterator operator++(int) {
     slist_iterator tmp(*this);
     ++*this;
     return tmp;
  }

   nodeptr p;
};

&#151; End of Listing &#151;</pre></body></html>
