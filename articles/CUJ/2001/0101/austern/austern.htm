<HTML>   
     <HEAD>
<TITLE>January 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Defining Iterators and Const Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>Writing an iterator isn&#146;t hard, and it&#146;s a natural way to extend the C++ Standard library. But if you want to do it right, there are a few wrinkles you ought to know about.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The Standard C++ library is extensible by design: standard algorithms such as <B>reverse</B> and <B>partition</B> operate on the predefined containers like <B>vector</B> and <B>list</B>, and they can also operate on any user-defined data structure that supplies the appropriate iterators. Using the library effectively involves extending it.</p>
<p>By now, iterators are familiar to most C++ programmers. Iterators abstract the most basic properties of pointers: a forward iterator points to some object in a sequence, and it can be incremented so that it points to the next element in the sequence. (Stronger iterator categories, bidirectional iterators and random access iterators, provide additional means of traversing sequences. Weaker iterator categories are inappropriate for most data structures.)</p>
<p>Every iterator has a category type (<B>std::forward_iterator_tag</B> in the case of a forward iterator), a value type (the type of the object it points to), a difference type (an integer type that represents the distance between two elements of a sequence), and a pointer and reference type (pointer and reference to the iterator&#146;s value type). Those types are accessed through the <B>std::iterator_traits</B> class; the easiest way for you to provide them, when defining your own iterator class, is to provide them as nested typedefs: <B>iterator_category</B>, <B>value_type</B>, <B>difference_type</B>, <B>pointer</B>, and <B>reference</B>.</p>
<p>A forward iterator is any type that satisfies the requirements in &#167;24.1.3 of the C++ Standard; that section of the Standard tells you what member functions and overloaded operators have to be defined. Once you&#146;ve figured out what information an iterator must keep track of so that it can point to an element and so that it can find the next element, defining a forward iterator is just a matter of filling in those functions&#146; definitions.</p>

<H3><FONT COLOR="#000080">Matched Pairs of Iterators</FONT></H3>

<p>One complication is that it usually isn&#146;t enough to define an iterator class. You probably need to define two iterator classes, one that permits modification of the object it points to (<B>*i</B> returns a reference to the object) and one that does not (<B>*i</B> returns a const reference). The library&#146;s predefined container classes do this: the <B>std::list</B> class, for example, has a nested type <B>iterator</B> and a different nested type <B>const_iterator</B>; the latter can be used to traverse a <B>const std::list</B>. The value types of <B>list&lt;T&gt;::iterator</B> and <B>list&lt;T&gt;::const_iterator</B> are both <B>T</B>, but the reference type and pointer type differ: for <B>list&lt;T&gt;::iterator</B> they are <B>T&amp;</B> and <B>T*</B> respectively, while for <B>list&lt;T&gt;::const_iterator</B> they are <B>const T&amp;</B> and <B>const T*</B>. You can convert a <B>list&lt;T&gt;::iterator</B> to a <B>list&lt;T&gt;::const_iterator</B>, but (for obvious reasons of const correctness) not the other way around.</p>
<p>Matched pairs of iterators are just as common in user-defined types as they are in predefined standard library types. Suppose, for example, that you&#146;re defining a simple singly linked list class. You might start with something like this:</p>

<pre>
template &lt;class T&gt;
struct slist_node {
  T val;
  slist_node* next;
  slist_node
     (const T&amp; t, slist_node* p)
     : val(t), next(p) { }
};

template &lt;class T&gt; struct slist {
  slist_node&lt;T&gt;* head;

  ...
};
</pre>

<p>An iterator class for <B>slist</B> can be equally simple:</p>

<pre>
template &lt;class T&gt;
struct slist_iterator {
  typedef std::forward_iterator_tag
     iterator_category;
  typedef T value_type;
  typedef std::ptrdiff_t
     difference_type;
  typedef T&amp; reference;
  typedef T* pointer;

  slist_iterator(slist_node&lt;T&gt;* x=0)
     : p(x) { }
  slist_iterator
    (const slist_iterator&amp; i)
    : p(i.p) { }
  reference operator*() const
  { return p-&gt;val; }
  pointer operator-&gt;() const
  { return &amp;(p-&gt;val); }
  slist_iterator&amp; operator++() {
    p = p-&gt;next;
    return *this;
  }
  slist_iterator operator++(int) {
    slist_iterator tmp(*this);
    ++*this;
    return tmp;
  }

  slist_node&lt;T&gt;* p;
};
</pre>

<p>How should we define the matching const iterator? We could just define a separate <B>slist_const_iterator</B> class, but code duplication is wasteful and error-prone. The changes to turn <B>slist_iterator</B> into <B>slist_const_iterator</B> are tiny:</p>

<UL><LI>   Declare <B>p</B> to be of type <B>const</B> <B>slist_node&lt;T&gt;*</B> instead of <B>slist_node&lt;T&gt;*</B>.</LI>
<LI>   Declare <B>pointer</B> and <B>reference</B> to be <B>const T*</B> and <B>const T&amp;</B> instead of <B>T*</B> and <B>T&amp;</B>.</LI>
<LI>   Define a converting constructor that takes an argument of type <B>slist_iterator</B>.</LI></UL>

<p>None of these are obstacles to defining a single class that can take the place of both <B>slist_iterator</B> and <B>slist_const_iterator</B>. We define an iterator class with additional template parameters, and those parameters determine whether or not it&#146;s a const iterator. We give the class a constructor that takes the non-const version as an argument; in one case it will be a copy constructor, in the other case a converting constructor. The other two differences just involve changing one type to another, so it&#146;s easy to encapsulate those differences as template parameters.</p>
<p>Finally: what should those extra template parameters look like? In my book <a href="#1">[1]</a>, I proposed explicitly passing the pointer and reference types as template parameters. That method is adequate, but it results in somewhat cumbersome type names; there&#146;s a cleaner solution. We can provide just a single extra template parameter, a Boolean flag that determines whether or not we&#146;re defining a const iterator, and then use a little bit of machinery, a &quot;compile-time <B>?:</B> operator&quot; that selects one type or another based on that flag <a href="#2">[2]</a>. This is shown in <a href="list1.htm">Listing 1</a>.</p>

<H3><FONT COLOR="#000080">Equality Comparisons</FONT></H3>

<p>We haven&#146;t yet defined an equality operator. There&#146;s still one snag, and you can even see it in some of the standard library&#146;s predefined iterators. Try compiling this program:</p>

<pre>
#include &lt;deque&gt;
int main() {
   std::deque&lt;int&gt; d;
   std::deque&lt;int&gt;::const_iterator i = d.begin();
   while (d.end() != i)
      ++d;
}
</pre>

<p>The program doesn&#146;t do anything, but that&#146;s not the point. The point is that, with many existing library implementations, it won&#146;t even compile. Are those implementations buggy? Not necessarily; <B>i</B> is of type <B>deque&lt;int&gt;::const_iterator</B> and <B>d.begin</B> returns a <B>deque&lt;int&gt;::iterator</B>, and the C++ Standard isn&#146;t completely clear whether or not an equality comparison between the two is guaranteed to work <a href="#3">[3]</a>. Even if the Standard doesn&#146;t explicitly require this, however, it&#146;s certainly more friendly if you support it in your own iterator classes.</p>
<p>You might wonder how this could possibly be a problem. After all, haven&#146;t we already said that a container&#146;s iterator type can always be converted to its const iterator type? If <B>d.begin()</B> can be converted into a <B>deque&lt;&gt;::const_iterator</B>, then why can&#146;t you compare them?</p>
<p>The problem is that there are a number of different ways to define equality operators for an iterator; if they&#146;re defined in either of the two most obvious ways, comparisons between a container&#146;s iterator and const iterator types won&#146;t work.</p>
<p>First, suppose <B>operator==</B> is defined as a member function. That&#146;s not quite good enough. If <B>i</B> is a <B>deque&lt;&gt;::const_iterator</B>, and <B>j</B> is a <B>deque&lt;&gt;::iterator</B>, then <B>i == j</B> will work but <B>j == i</B> won&#146;t. It&#146;s simple enough to see the reason for the asymmetry: member functions are inherently asymmetrical. An expression like <B>a.f(b)</B> (or, in this case, <B>j.operator==(i)</B>) invokes a specific class&#146;s member function. The compiler won&#146;t try to convert <B>a</B> to some other class; conversions only get applied to the function&#146;s arguments.</p>
<p>That&#146;s obvious enough, so your next thought might be to define <B>operator==</B> as a non-member function. Unfortunately, doing that in the obvious way is even worse! A simple toy program illustrates the problem:</p>

<pre>
template &lt;class T&gt; struct A { };

template &lt;class T&gt; struct B {
   B() { }
   B(A&lt;T&gt;) { }
};
 
template &lt;class T&gt;
void f(B&lt;T&gt;, B&lt;T&gt;) { }

int main() {
   A&lt;int&gt; a;
   B&lt;int&gt; b(a); // OK, A is convertible to B
   f(a, b);     // Doesn&#146;t work
}
</pre>

<p>It&#146;s not good enough for <B>A</B> to be convertible to <B>B</B>. If <B>f</B> weren&#146;t a template, there would be no problem: the compiler would apply the user-defined conversion from <B>A&lt;int&gt;</B> to <B>B&lt;int&gt;</B>. Since <B>f</B> depends on a template parameter <B>T</B>, however, another step has to come first: the compiler has to deduce a value for <B>T</B> that makes the function call match <B>f</B>&#146;s argument list. In this case there can be no match: <B>f</B>&#146;s declaration says that its arguments are of the same type, but we&#146;re trying to call it with two different types. Template argument deduction requires an exact match <a href="#4">[4]</a>; user-defined conversions aren&#146;t considered.</p>
<p>We can&#146;t declare <B>operator==</B> as a member function, and we can&#146;t declare it as a non-member function template. It would seem that what we need is a way to declare a whole family of non-template functions, one for every possible instantiation of the iterator class. This is an odd requirement, since a family of parameterized functions is just what templates are for, but the oddest part is that it&#146;s actually possible.</p>
<p>It&#146;s possible because of an obscure loophole in the way friend declarations of class templates work <a href="#5">[5]</a>. You can explicitly declare a friend function to be a template. If you don&#146;t, however, and if it doesn&#146;t match a previously declared function template, then the compiler assumes it to be an ordinary non-template function. For example:</p>

<pre>
template &lt;class T&gt; void g(T);
  
template &lt;class T&gt; struct X {
   // f is a function template
   friend void f&lt;T&gt;(T);

   // g is a function template
   friend void ::g(T);  

   // h is a non-template function
   friend void h(T);    
};
</pre>

<p>Usually this is just a nuisance: normally you want the compiler to treat something like <B>h</B> as the declaration of a function template, so you have to remember to declare it in such a way that it does get treated as one. Occasionally, however, this quirk is genuinely useful. If you define a function as part of a friend declaration, and if you declare it as a non-template friend, you&#146;ll get a family of non-template functions &#151; just what we needed for an iterator&#146;s equality operator.</p>

<pre>
template &lt;class T&gt; struct X {
   friend void f(T) { } // f is a non-template function
};
</pre>

<p>A complete definition of <B>slist_iterator</B>, including the equality operator, is shown in <a href="list2.htm">Listing 2</a>.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>When you write a container, or something like a container, it&#146;s usually not enough to define a single iterator class. You need to define a matched pair of iterator and const iterator classes. Defining such a matched pair presents some implementation issues that don&#146;t arise if you&#146;re defining a single iterator class that stands on its own.</p>
<p>The two classes in the iterator/const iterator pair must have the same iterator category, difference type, and value type; the iterator class must be convertible to the const iterator class, but not vice versa. You can define the iterator and const iterator types as a single class, by adding an additional template parameter and using the <B>choose</B> template, or something like it, to define the iterator&#146;s nested types appropriately. If you&#146;re using one of the predefined container classes (<B>string</B>, <B>vector</B>, <B>list</B>, <B>deque</B>, <B>set</B>, <B>map</B>, <B>multiset</B>, <B>multimap</B>), you should avoid comparing one of its iterators to one of its const iterators. If <B>d</B> is a <B>deque</B> (as opposed to a <B>const deque&amp;</B>), you shouldn&#146;t write</p>

<pre>
std::deque&lt;int&gt;::const_iterator i = d.begin();
while (i != d.end())
   ...
</pre>

<p>You should write</p>

<pre>
std::deque&lt;int&gt;::iterator i = d.begin();
while (i != d.end())
   ...
</pre>

<p>instead. The C++ Standard doesn&#146;t explicitly say that the first form should work, and, indeed, it does not work on all implementations. Your programs will be more portable if you avoid it. When you&#146;re defining your own matched pair of iterator and const iterator classes, you can easily make sure that comparisons between the two will work properly; just make sure to define the comparison operators as non-template friend functions.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  Matt Austern. <I>Generic Programming and the STL</I> (Addison-Wesley, 1998).</p>
<p><a name="2"></a>[2]  Using partial specialization to define a compile-time <B>?:</B> operator (as well as other compile-time Boolean operations) is a relatively old idea; using it as a clean solution to the iterator/const iterator problem is more recent. I learned of the latter idea from Jeremy Siek.</p>
<p><a name="3"></a>[3]  This is an open issue under consideration by the C++ standardization committee. See <B>http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-active.html#179</B>.</p>
<p><a name="4"></a>[4]  The full rules for template argument deduction are described in &#167;14.8.2.1 of the C++ Standard.</p>
<p><a name="5"></a>[5]  See &#167;14.5.3 of the C++ Standard.</p>

<p><i><B>Matt Austern</B> is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>

<h4><a href="../../../source/2001/jan01/austern.zip"></a></h4>

</blockquote></body></html>
