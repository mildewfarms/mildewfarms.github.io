<HTML><HEAD>
<TITLE>January 2001/The Standard Librarian/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: A complete implementation of Slist_iterator and a partial implementation of an Slist container</A></h4>
<pre>
template &lt;class T&gt; struct slist_node {
   T val;
   slist_node* next;
   slist_node(const T&amp; t, slist_node* p) 
      : val(t), next(p) { }
};

template &lt;bool flag, class IsTrue, class IsFalse&gt;
struct choose;

template &lt;class IsTrue, class IsFalse&gt;
struct choose&lt;true, IsTrue, IsFalse&gt; {
   typedef IsTrue type;
};

template &lt;class IsTrue, class IsFalse&gt;
struct choose&lt;false, IsTrue, IsFalse&gt; {
   typedef IsFalse type;
};

template &lt;class T, bool isconst = false&gt; 
struct slist_iterator {
   typedef std::forward_iterator_tag iterator_category;
   typedef T value_type;
   typedef std::ptrdiff_t difference_type;
   typedef typename choose&lt;isconst, const T&amp;, T&amp;&gt;::type
           reference;
   typedef typename choose&lt;isconst, const T*, T*&gt;::type
           pointer;

   typedef typename choose&lt;isconst, const slist_node&lt;T&gt;*,    
                           slist_node&lt;T&gt;*&gt;::type
           nodeptr;

   slist_iterator(nodeptr x = 0) : p(x) { }
   slist_iterator(const slist_iterator&lt;T, false&gt;&amp; i) 
      : p(i.p) { }
   reference operator*() const { return p-&gt;val; }
   pointer operator-&gt;() const { return &amp;(p-&gt;val); }
   slist_iterator&amp; operator++() { 
      p = p-&gt;next; 
      return *this; 
   }
   slist_iterator operator++(int) {
      slist_iterator tmp(*this);
      ++*this;
      return tmp;
   }

   friend bool operator==(const slist_iterator&amp; x,
                          const slist_iterator&amp; y) {
      return x.p == y.p;
   }

   friend bool operator!=(const slist_iterator&amp; x,
                          const slist_iterator&amp; y) {
      return x.p != y.p;
   }

   nodeptr p;
};

// This is not a complete container class.  It is just
// enough to illustrate defining and using an iterator/ 
// const iterator pair.
template &lt;class T&gt; struct slist {
   slist_node&lt;T&gt;* head;

   typedef slist_iterator&lt;T&gt;       iterator;
   typedef slist_iterator&lt;T, true&gt; const_iterator;

   iterator begin() { return iterator(head); }
   iterator end()   { return iterator(0); }
   const_iterator begin() const { 
      return const_iterator(head); 
   }
   const_iterator end() const {
      return const_iterator(0); 
   }

   slist() : head(0) { }
   ~slist() {
       while (head) {
          slist_node&lt;T&gt;* next = head-&gt;next;
          delete head;
          head = next;
       }
   }

   void push_front(const T&amp; t) {
      head = new slist_node&lt;T&gt;(t, head);
   }

   ...
};
&#151; End of Listing &#151;</pre></body></html>
