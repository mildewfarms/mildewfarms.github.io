<HTML>   
     <HEAD>
<TITLE>January 2001/C/C++ Tip: A C/C++ Comment Macro</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Tips</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A C/C++ Comment Macro</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Mark Timperley</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>A potentially useful macro is one that would expand to become a single-line comment. Creating such a macro, however, is less than straightforward. As you may recall, the C/C++ preprocessor interprets two slash characters (<B>//</B>) as the beginning of a single-line comment. Attempting to directly define the two slash characters causes the preprocessor to interpret the text as a definition followed by a comment (as in the following example):</p>

<pre>
#define COMMENT // this obviously doesn't work!
</pre>

<p>Since the two slash characters cannot be defined directly, another approach is required. By using the token-pasting operator (<B>##</B>), the <B>"//"</B> can be constructed from two single <B>'/'</B> characters. While this may sound like I&#146;m repeating myself, it works because a single slash character that is not followed directly by a single slash character is ignored by the preprocessor. Therefore it is possible to define a <B>COMMENT</B> macro in terms of a second macro, which I&#146;ve named <B>SLASH</B>, by combining the token-pasting operator and a macro with a <B>'/'</B> parameter:</p>

<pre>
#define COMMENT SLASH(/)
#define SLASH(s) /##s
</pre>

<p>The <B>COMMENT</B> macro is useful in creating flexible debug diagnostics that can be removed by the preprocessor. As an example, I will define a macro named <B>DEBUG_ONLY</B>. Preceding any line of code with the <B>DEBUG_ONLY</B> macro will cause that line of code to be compiled only for debug builds. For release builds, the <B>DEBUG_ONLY</B> macro will be interpreted by the preprocessor as a single-line comment. The greatest advantage of this approach is that any valid single-line expression can be used to convey debug information, which makes this method more flexible than other parameterized macro approaches. Also, this method is completely portable. The macros are defined as follows. (Assume that in a debug build <B>_DEBUG</B> is defined for both the preprocessor and the compiler, or substitute the symbol used by your compiler.)</p>

<pre>
#if _DEBUG
#define DEBUG_ONLY
#else
#define DEBUG_ONLY COMMENT
#endif
</pre>

<p>The macro can be used like this (in C++):</p>

<pre>
DEBUG_ONLY if (x&gt;100) std::cout &lt;&lt; "WARNING! x=" &lt;&lt; x &lt;&lt;"\n";
DEBUG_ONLY std::cout &lt;&lt; "Hello World!\n";
</pre>

<p>As a further refinement to this example, I&#146;ve replaced <B>DEBUG_ONLY</B> <B>cout</B> with the macro <B>dout</B>, which is short for debug output. The macro is defined and used as follows:</p>

<pre>
#if _DEBUG
#include &lt;iostream&gt;
#define dout std::cout
#else
#define dout COMMENT
#endif

dout &lt;&lt; "Hello World!\n"; // Now doesn't that look sharp!
</pre>

<p>The <B>COMMENT</B> macro not only lends greater flexibility to creating debug output, but it can make code that includes it look much cleaner. These macros have been tested successfully with a variety of preprocessors. The only known caveat is that some older C preprocessors do not recognize the <B>"//"</B> character sequence as a single-line comment, so these macros will not work for these preprocessors.</p>
<p>A header file containing this and other useful macros is available on the <I>CUJ</I> website (<B>www.cuj.com/code/</B>).</p>

<h4><a href="../../../source/2001/jan01/timperle.zip"></a></h4>

<hr>

<p><i>I just read your C/C++ Tip #5, published in the January 2001 issue of </i>CUJ<i>. The content of the tip (doing a macro that expands into a comment) was quite familiar, since I'd seen a similar method deployed in one of Microsoft's header files.  However, the tip is very incorrect.</i></p>
<p><i>The writer uses token pasting to construct a comment start sequence. However, this is invalid according to the C and C++ Standards.  In section 5.1.1.2 of ISO C (1999), titled &quot;Translation phases,&quot; comment processing occurs in phase 3 where the preprocessor identifies tokens and whitespace, with comments replaced with whitespace.  Macro processing is then done in phase 4, and that phase is the one in which these new comment start sequences would be introduced.  There is no followup phase after #4 where the comment would be recognized, so eventually a conforming compiler would reject the program text due to an illegal token &#151; '//'.  The 1998 C++ Standard has similar language in section 2.1, &quot;Phases of translation [lex.phases].&quot;</i></p>
<p><i>Some compilers mix the order and processing of phases sufficiently to allow this macro to work, Microsoft's Visual C++ 6.0 being notable for its popularity.  Others, such as the Metrowerks CodeWarrior C/C++ compilers (upon which I worked for over two years as a compiler engineer before my current employment) follow the Standard and will reject the usage shown in the tip.</i></p>
 
<p><i>Thanks,</i></p>

<p><i>Ben Combee<br>
Lead Software Architect<br>
Veriprise Wireless<br>
&lt;http://www.veriprise.com&gt;</i></p>

<p><b>We therefore want to caution readers that this tip is not portable and probably should not be used in production code. &#151; mb.</b></p>

</blockquote></body></html>
