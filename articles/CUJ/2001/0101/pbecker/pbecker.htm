<HTML>   
     <HEAD>
<TITLE>January 2001/The Journeyman's Shop</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Journeyman&#146;s Shop: Sorting through Quicksort, Part 1</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pete Becker</FONT></H3>

<BLOCKQUOTE>
<p>Pete uses the popular quicksort algorithm as a mini-laboratory for exploring algorithm design and analyzing algorithm performance problems.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>I&#146;d like to begin the new year here in The Journeyman&#146;s Shop with an examination of something fairly old, by computing standards, which you&#146;re probably familiar with: the quicksort algorithm. It was first published by C.A.R. Hoare in 1962, and since then it has become one of the most widely used, most widely analyzed, and perhaps most widely misunderstood techniques for sorting data held in memory. As usual, you can find more information than you&#146;ll ever need in Donald Knuth&#146;s <I>The Art of Computer Programming,</I> vol. 3, &quot;Sorting and Searching.&quot;</p>
<p>The quicksort algorithm has undergone some significant improvements since Hoare&#146;s initial version. These improvements have been driven by the need to avoid the quadratic time complexity and linear space requirement that quicksort can fall into. As the conditions that lead to these problems have been recognized, the details of the algorithm have been changed to avoid them. Thus, time and space requirements have been improved in the worst cases, usually at the cost of somewhat slower execution in the ordinary cases. In this column and the next one, we&#146;ll look at these improvements to quicksort, with the goal of better understanding how the time and space problems arise in quicksort, how these problems are solved, and what effect solving these problems has on performance. Although you probably won&#146;t ever have to write an efficient version of quicksort, the techniques that we use in analyzing quicksort ought to be useful to you in tuning your own code.</p>

<H3><FONT COLOR="#000080">The Problem</FONT></H3>
<p>Given two iterators <B>first</B> and <B>last</B> that define a half-open range <B>[first,last)</B> and an <B>operator &lt;</B> that can be used to compare two objects of the type that <B>first</B> and <B>last</B> point to, our task is to write an algorithm that arranges the elements in that range in increasing order. More formally, after we have applied the algorithm, it must be true that for every value <a href="#1">[1]</a> of <B>j</B> in the range <B>0</B> to <B>(last - first - 1)</B>, <B>!(*(first + j + 1) &lt; *(first + j)</B>. <a href="#2">[2]</a></p>

<H3><FONT COLOR="#000080">The Preliminaries</FONT></H3>

<p>To make sure we don&#146;t accidentally use an operation that isn&#146;t necessarily available for the items that we&#146;ll be sorting, we need to write a simple class that provides only the basic operations that are essential to our algorithm. We need to be able to compare two items with the <B>operator &lt;</B>, and we need to be able to copy items. We also need to be able to create items that have distinct values, and it will be useful to be able to display the values of these items. That leads directly to the following class definition:</p>

<pre>
class item
{
public:
   // create:
   explicit item(int v) : val(v) {}
   // copy:
   item(const item&amp; other)
      : val(other.val) {}
   item&amp;
   operator = (const iterm&amp; other)
   {
      val = other.val;
      return *this;
   }
   // compare:
   bool operator &lt;
      (const item&amp; other) const
   { return val &lt; other.val; }
   // display:
   friend std::ostream&amp; operator &lt;&lt;
      (std::ostream&amp; os,
       const item&amp; it)
   { return os &lt;&lt; it.val; }
private:
   int val;
};
</pre>

<H3><FONT COLOR="#000080">The Basic Quicksort Algorithm</FONT></H3>

<p>The quicksort algorithm uses the divide and conquer approach: the range to be sorted is divided into two parts, such that each of the elements in the first part is less than each of the elements in the second part. The algorithm is then re-applied to each of the two parts. As long as we make sure that neither part is ever empty, each time that we partition a range we&#146;ll end up with two parts that each contain fewer elements than the range that we just partitioned. Sooner or later we&#146;ll get down to parts that contain only one element, and those parts don&#146;t need any further work: they&#146;re already in the correct order. So we have the two essential parts of a recursive algorithm: a recursion process that breaks large pieces into smaller ones, and a terminating condition so that we know when to stop the recursion.</p>
<p>The implementation of any algorithm begins by defining how it is invoked. In the case of quicksort, since we&#146;re sorting the elements in a range, we need to specify the beginning and the end of the range to be sorted. And since we&#146;re writing an algorithm that can handle almost arbitrary types we need to write a template:</p>

<pre>
template&lt;class RanIt&gt;
void sort(RanIt first, RanIt last);
</pre>

<p>I&#146;ve chosen the name <B>RanIt</B> for the type of the iterator to suggest that the iterator should be a random access iterator. Some of the operations that we perform on these iterators are supported only by random access iterators.</p>
<p>As with most recursive algorithms, the first thing that the code should do is check whether the terminating condition is true. The terminating condition is that the range contains only one element. However, it costs nothing to also test for zero elements, which makes the algorithm safe when called with an empty range:</p>

<pre>
if (last - first &lt;= 1)
   return;
</pre>

<p>Having survived that test, our code next needs to begin the partitioning process. In its simplest form, the quicksort algorithm uses the first element in the range as a pivot value, and separates the rest of the range into one piece that contains elements that are less than the pivot value and one piece that contains elements that are greater than or equal to the pivot value. The usual technique is to build up one piece starting from the left end of the range and to build up the other piece starting from the right end of the range. As we shuffle elements around, the left-hand piece grows to the right, and the right-hand piece grows to the left. In order to talk about these two new ranges more easily we&#146;ll introduce five new iterator variables, one pair for each of the two pieces that we&#146;re creating, plus an iterator that points to the pivot element:</p>

<pre>
// pivot element
RanIt pivot = first; 

// left-hand piece
RanIt first1, last1; 

// right-hand piece
RanIt first2, last2;
</pre>

<p>Since we haven&#146;t yet made any comparisons of elements, each of the two subranges must be empty. The left-hand subrange begins with the element immediately after the pivot element, so its iterators both get initialized to point to that element. The right-hand subrange ends at the end of the input range, so its iterators both get initialized with the value of the iterator for the end of the range:</p>

<pre>
first1 = last1 = first + 1;
first2 = last2 = last;
</pre>

<p>Now we&#146;re ready to expand both pieces, maintaining the two invariants that all of the elements in the half-open range <B>[first1,last1)</B> are less than the pivot element and that all of the elements in the half-open range <B>[first2,last2)</B> are greater than or equal to the pivot element. Since both ranges are initially empty, these two invariants are both true when the algorithm begins. We start by examining the element just past the end of the first range. If its value is less than the value of the pivot element then it belongs to that range, and we can move the top end of that range up to include it, then go back and try the next element:</p>

<pre>
while (last1 &lt; first2 &amp;&amp; *last1 &lt; *pivot)
   ++last1;
</pre>

<p>When this loop exits, it means one of two things: a) <B>last1</B> points to the beginning of the upper range, in which case we won&#146;t find any more elements that belong in the lower range; b) <B>last1</B> points to an element whose value is greater than or equal to the value of the pivot element.</p>
<p>Similarly, we expand the upper range downward by looking at the element immediately below the lower end of the range, and adding it to the range if it is greater than or equal to the value of the pivot element:</p>

<pre>
while (last1 &lt;= first2 - 1 &amp;&amp; *pivot &lt; *(first2 - 1))
   --first2;
</pre>

<p>When this loop exits, <B>first2</B> points to either the upper end of the lower range or to an element whose value is less than the value of the pivot element.</p>
<p>After executing both of these loops, if the two iterators haven&#146;t met in the middle they point to elements that don&#146;t belong in the subrange where they were found. We exchange these two elements, and resume the comparisons. If the iterators met then we&#146;ve partitioned the input range into the two desired subranges, and it&#146;s time to use quicksort on the two subranges. The initial version of quicksort, along with a driver program, is in <a href="list1.htm">Listing 1</a>.</p>

<H3><FONT COLOR="#000080">Performance</FONT></H3>

<p>I mentioned earlier that the quicksort algorithm can fall into quadratic time complexity and linear space usage. To enable investigation of these performance problems I&#146;ve added two variables to the implementation of the algorithm. The variable <B>maxdepth</B> keeps track of the deepest nesting of the recursive calls to <B>sort</B>. The variable <B>ops</B> keeps rough track of the number of operations that have been performed. With these two variables we can perform simple experiments to investigate the performance of the algorithm. We can change the value of the constant <B>ELTS</B> to change the number of elements that we&#146;re sorting, and we can vary the patterns in the data that we sort. As we&#146;ll see, there are some data patterns that lead to very bad performance with this version of the algorithm.</p>
<p>You probably know that the time to sort a range of values using quicksort should be proportional to NlogN, where N is the number of elements being sorted. To see this happen, begin by running the program in <a href="list1.htm">Listing 1</a> as is. It sorts 100,000 values, initially in random order. Then change the value of <B>ELTS</B> to <B>1000000</B> and run it again, and finally, change the value of ELTS to <B>10000000</B> and run it again. For one hundred thousand elements, NlogN is 500,000. For a million elements it&#146;s 6,000,000, and for ten million it&#146;s 70,000,000. So running this sort implementation with one million elements ought to require about twelve times as many operations as running it with one hundred thousand elements, and running it with ten million elements ought to require about 140 times as many. With the compiler I used I got the results shown in <a href="tab1.htm">Table 1</a> <a href="#3">[3]</a>. As you can see, the measured values are within about two percent of the predicted values.</p>
<p>This version of quicksort falls apart when the data that it is given is already in order. To see this happen, comment out the call to <B>std::random_shuffle</B> in <B>main</B> and run the program again. You might want to reduce the value of <B>ELTS</B> before you do this; with <B>ELTS</B> set to <B>1000</B> I got 500,499 operations. With <B>ELTS</B> set to <B>10000</B>, I got 50,004,999 operations. A little math shows that increasing the number of elements by a factor of ten increased the number of operations by a factor of one hundred. For data that is already in order, the time complexity of this version of quicksort is O(n2).</p>
<p>There&#146;s another problem with this version of quicksort. Look at the call depth when it processes a range of sorted data. With 1,000 elements it reaches a depth of 998 nested calls; with 10,000 elements it reaches a depth of 9,998. Since each nested call requires a fixed amount of space for its local variables, the space usage of this version of quicksort is linear in the number of elements being sorted when it is applied to data that is already in order. That&#146;s far too much space. In fact, when I tried to sort 100,000 elements that were already in order I got a stack overflow. A sort implementation that crashes when you give it 100,000 elements isn&#146;t very useful.</p>

<H3><FONT COLOR="#000080">Fixing the Space Problem</FONT></H3>
<p>We can fix the space problem by eliminating some of the recursive calls. Notice that the last statement in the sort function is a recursive call to <B>sort</B> itself. This is known as &quot;tail recursion.&quot; Tail recursion can usually be eliminated by writing a loop instead of the final call. <a href="list2.htm">Listing 2</a> shows a new version of the <B>sort</B> template with the tail recursion removed. Replace the sort implementation in <a href="list1.htm">Listing 1</a> with this version, then repeat the tests that we just did to see what effect this has on memory usage. It may seem a bit strange to see a maximum depth of 0, but that&#146;s just a side effect of the already-sorted input. Put the <B>std::random_shuffle</B> back in and you&#146;ll see that we still get about the same stack usage as before for random data.</p>
<p>We&#146;re not finished yet, though. Replace the call to <B>std::random_shuffle</B> with a call to <B>std::reverse</B>, so that the incoming data is sorted in reverse order. For this data the stack usage goes way up, although not as far as it did for already sorted data before we eliminated the tail recursion.</p>
<p>The reason that the stack usage was so high in the first place is that when we split the input range into two pieces, the algorithm chose the first value as the pivot value. When the data is already in order, this means that the pivot value is the lowest value in the range, so the first piece consists of just the pivot value, and the second piece consists of all the values except for the pivot. That is, each time we split the input range we create a subrange with one element and a subrange with N - 1 elements. Although we do make progress with each of these partitions, we don&#146;t make much progress. We ended up calling <B>sort</B> recursively once for each element in the input sequence. Eliminating the tail recursion fixes this space problem when the input range is already sorted, but doesn&#146;t help much when the input range is sorted in reverse order. In order to get rid of the problem here, too, we need to make the code that eliminates the tail recursion just a little smarter. If we call <B>sort</B> for the smaller of the two pieces, and loop on the larger, we&#146;ll reduce stack usage significantly. This version of the algorithm is shown in <a href="list3.htm">Listing 3</a>.</p>

<H3><FONT COLOR="#000080">Fixing the Time Problem</FONT></H3>
<p>None of these changes affected the number of operations needed to sort any particular input sequence. We&#146;ve avoided stack overflows, but we haven&#146;t increased the speed of the sort. For a sorted input sequence and for a reverse sorted input sequence the time complexity is still O(n2). That&#146;s because in each of these cases we&#146;re choosing the worst possible pivot. Ideally we&#146;d like to have a pivot value that will end up near the middle of the sorted sequence, so that the two subranges are about the same size. The usual solution is to look at several values and to pick the middle value of those examined. Most often this is done with three values, and this approach is known as &quot;median of three.&quot; The code in <a href="list4.htm">Listing 4</a> implements this approach. It uses a bubble sort to sort the elements pointed to by <B>mid</B>, <B>first</B>, and <B>last - 1</B>. The result is that the median of the three values pointed to by <B>first</B>, <B>mid</B>, and <B>last - 1</B> ends up at the beginning of the range, so that&#146;s the value that is used as the pivot. If you rerun the previous tests with this version of the algorithm you&#146;ll see that the number of operations needed to sort a range of already sorted values drops significantly <a href="#4">[4]</a>. For sorted and reverse-sorted data I get 119,535 operations to sort a range with 10,000 elements, and 1,534,481 operations to sort a range with 100,000 elements, giving a ratio of about 12.8. That&#146;s what we&#146;d expect if the time complexity is O(NlogN). So we&#146;ve eliminated the quadratic behavior for sorted data, with only a slight increase in the time complexity.</p>

<H3><FONT COLOR="#000080">Next Time</FONT></H3>
<p>More recent investigations of the quicksort algorithm have focused on another issue: how to make the algorithm run quickly for equal data values. If I generate 10,000 equal elements and sort them, my latest version of the algorithm performs 125,264 operations. It ought to be possible to recognize that all the elements are equal with only 9,999 operations. If we can modify the quicksort algorithm to deal quickly with equal data elements, without slowing it down too much for random data, we&#146;ll have yet another significant improvement in performance. Next month we&#146;ll look at Sedgwick&#146;s version of the quicksort algorithm, which is probably the most commonly used technique today, and we&#146;ll look at the approach that Dinkumware now uses in our libraries, which I have named the Inside Out sort.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  Subject, of course, to the condition that <B>(last - first - 1)</B> is not negative.</p>
<p><a name="2"></a>[2]  It would be more natural to write this last condition as <B>*(first + j) &lt;= *(first + j + 1)</B>, thus comparing elements in their natural order, but that would require an operator <B>&lt;=</B>. Since we are assuming here that we only have an <B>operator &lt;</B>, we must resort to this somewhat less obvious way of expressing the order of each adjacent pair of elements.</p>
<p><a name="3"></a>[3]  You may get slightly different results, depending on the random number generator that your compiler provides. This determines the initial order of the elements.</p>
<p><a name="4"></a>[4]  In addition to median of three, Hoare suggested picking a pivot element at random. This will almost always avoid quadratic behavior.</p>

<h4><a href="../../../source/2001/jan01/pbecker.zip"></a></h4>

<p><i><B>Pete Becker</B> is Technical Project Leader for Dinkumware, Ltd. He spent eight years in the C++ group at Borland International, both as a developer and manager. He is a member of the ANSI/ISO C++ standardization committee. He can be reached by email at <B>petebecker@acm.org</B>.</i></p>
</blockquote></body></html>
