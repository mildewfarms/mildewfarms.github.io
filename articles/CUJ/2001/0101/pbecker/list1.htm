<HTML><HEAD>
<TITLE>January 2001/The Journeyman's Shop/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: A first-cut implementation of quicksort</A></h4>
<pre>
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

class item
{
public:
    item() : val(0) {}
    explicit item(int v) : val(v) {}
    item(const item&amp; other) : val(other.val) {}
    item&amp; operator = (const item&amp; other)
        { val = other.val; return *this; }
    friend std::ostream&amp; operator &lt;&lt;
        (std::ostream&amp; os, const item&amp; it)
        { return os &lt;&lt; it.val; }
    bool operator &lt; (const item&amp; other) const
        { return val &lt; other.val; }
private:
    int val;
};

static int maxdepth = 0;
static int ops = 0;

template&lt;class RanIt&gt;
void sort(RanIt first, RanIt last, int depth = 0)
{
if (last - first &lt;= 1)
    return;
ops += last - first;
if (maxdepth &lt; depth)
    maxdepth = depth;

RanIt pivot = first;
RanIt first1, last1;
RanIt first2, last2;
first1 = last1 = first + 1;
first2 = last2 = last;

for (;;)
    {
    while (last1 &lt; first2 &amp;&amp; *last1 &lt; *pivot)
        ++last1;
    while (last1 &lt;= first2 - 1 &amp;&amp; *pivot &lt; *(first2 - 1))
        --first2;
    if (first2 &lt;= last1)
        break;
    std::iter_swap(last1++, --first2);    
    }

std::iter_swap(pivot, --last1);
sort(--first1, last1, depth + 1);
sort(first2, last2, depth + 1);
}

const int ELTS = 100000;
item data[ELTS];

int main()
    {
    for (int i = 0; i &lt; ELTS; ++i)
        data[i] = item(i);
    std::random_shuffle(data, data + ELTS);    
    sort(data, data + ELTS);
    std::cout &lt;&lt; "max depth: " &lt;&lt; maxdepth &lt;&lt; '\n';
    std::cout &lt;&lt; "operations: " &lt;&lt; ops &lt;&lt; '\n';
    return 0;
    }
&#151; End of Listing &#151;</pre></body></html>
