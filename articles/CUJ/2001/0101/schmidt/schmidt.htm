<HTML>   
     <HEAD>
<TITLE>January 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: 21st Century Man</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>It may be the new millennium, but we still have trouble understanding switch statements, templates, access modifiers, and (in some folks&#146; view) how to keep things simple.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2000 Robert H. Schmidt</p>
<p>Oh Joy, Oh Bliss: it&#146;s time for the January 2001 issue. Once the new year starts, we can finally all agree that the 21st century is at hand. No more &quot;neener neener neener, my millenium&#146;s more scientifically accurate than yours&quot; playground taunts.</p>
<p>In my sci-fi youth, I became influenced by several visions of early 21st century life. Among them:</p>

<UL><LI>   <I>2001: A Space Odyssey</I> (set in 2001). I remember being on family vacation when this movie came out. We used to eat at HoJo&#146;s a lot on the road; the restaurant had marketing ties with the movie producers. The parts of the film involving the space station gave me great hope, since I really wanted to travel to space and to the moon. But all the parts involving the monolith made no sense to me as a kid.</LI>
<LI>   <I>Rollerball</I> (2018). Grisly look and concept that really grabbed me (although I&#146;ve since seen the movie as an adult, and found the storyline inept). Even though the movie was rated R, a lot of us boys in junior high wanted to see it. The soundtrack fostered my love of thundering organ music. MGM is currently filming a remake.</LI>
<LI>   <I>Blade Runner</I> (2019). When this came out, I could almost imagine Los Angeles looking like the movie in four decades. Otherwise, I had trouble suspending disbelief &#151; Flying cars? Androids indistinguishable from humans? Colonization of other star systems? All that notwithstanding, I still adore this flick.</LI>
<LI>   <I>Sealab 2020</I> (2020). Dead stupid Saturday morning cartoon. Its only redeeming factor: stirring my interest in future undersea living. At the time, I didn&#146;t understand the scientific, economic, and social consequences of humans inhabiting domed cities on the ocean floor. I just thought it was a cool idea and wanted to be part of it.</LI>
<LI>   <I>Soylent Green</I> (2022). As a child highly influenced by Paul Ehrlich&#146;s <I>The Population Bomb,</I> I found this movie quite disturbing &#151; so much so that I calculated how old I&#146;d be in the year it was set. To my horror, I reckoned I&#146;d be little younger than Edward G. Robinson&#146;s character.</LI>
</UL>

<p>And then there was ELO. For reasons I&#146;ll save for another time, their 1981 album <I>Time</I> is an intimate part of my life&#146;s soundtrack. The theme of the album &#151; one person&#146;s perceived journey from from the 80s to the 21st century and back again &#151; played heavily upon my imagination. It&#146;s still one of my all-time favorite albums <a href="#1">[1]</a>.</p>

<H3><FONT COLOR="#000080">const Is Not Enough</FONT></H3>
<H3><FONT COLOR="#000080">Q</FONT></H3>
<p>Dear Schmidt,</p>
<p>Is it possible (by some casting magic or other form of black art) to make the following code compile:</p>

<pre>
char c_case;
cin &gt;&gt; c_case;

char c;
cin &gt;&gt; c;

switch (c)
    {
    case c_case: // error here
        // ...
    }
</pre>

<p>I have tried <B>const_cast&lt;char const&gt;(c_case)</B> and all kind of other variations. From what I have read, <B>const_cast</B> should do the job but it&#146;s not working using either Visual C++ 6.0 or C++ Builder 5.0.</p>
<p>Any hint, suggestion or (YES!) the solution if any would be greatly appreciated...</p>
<p>Your truly &#151; Tibor Hellvig</p>

<H4><FONT COLOR="#000080">A</FONT></H3>
<p>Dear Hellvig,</p>
<p>Sorry to disappoint you with bad news: your desired solution won&#146;t work. The <B>case</B> labels in a <B>switch</B> statement must be what the C++ Standard deems integral constant expressions <a href="#2">[2]</a>. The compiler can calculate such expressions as it compiles the program &#151; that is, before the program is actually run. For a <B>switch</B> statement, this allows the compiler to embed the case values directly into the generated code, as either instructions or a jump table.</p>
<p>In your example, <B>c_case</B>&#146;s value won&#146;t be known until the program executes. Casting <B>c_case</B> to <B>const_char</B> won&#146;t help, because the compiler still won&#146;t know the resulting value, const though it may be. This marks a clear difference between the <B>switch</B> statement and its equivalent <B>if</B> statement, which would allow:</p>

<pre>
if (c == c_case)
</pre>

<p>I&#146;ll also note that, independent of <B>case</B> label considerations, your proposed syntax:</p>

<pre>
const_cast&lt;char const&gt;(c_case)
</pre>

<p>won&#146;t work in any context. The closest you can come is:</p>

<pre>
const_cast&lt;char const &amp;&gt;(c_case)
</pre>

<H3><FONT COLOR="#000080">T Time</FONT></H3>

<H3><FONT COLOR="#000080">Q</FONT></H3>
<p>Bobby,</p>
<p>I would like to create a log class that writes to a flat file and optionally to some auxiliary device like a window, status bar, etc. The class will then have some method like</p>

<pre>
class log
    {
public:
    void setAuxDevice(void (*pf)
        (string const &amp;data, void *device));
    };
</pre>

<p>After looking this over and thinking about it I decided that templates might be a good way to get rid of the <B>void *</B>. Is there a way to pass a pointer to a templated function? And secondly, in doing so can you maintain non-type specificity? By this I mean:</p>

<pre>
// the type is reference to vector of ints
void setVal(vector&lt;int&gt; &amp;);

// non-type specificity
void setVal(vector&lt;T&gt; &amp;);
</pre>

<p>Thanks &#151; Chuck Emary</p>

<H3><FONT COLOR="#000080">A</FONT></H3>
<p> If I&#146;m reading your question right, the answer is no, unless you are willing to change your design somewhat.</p>
<p>Two fundamental issues undermine your approach:</p>

<UL><LI>   <B>T</B> is a template parameter. Anything referencing <B>T</B> must itself be part of the template declaring <B>T</B>.</LI>
<LI>   A function template is a potential family of functions, not a single function. You can&#146;t declare a pointer to a template.</LI>
</UL>

<p>In your first example, I think you want something like</p>

<pre>
class log
    {
    void setAuxDevice(void (*pf)
        (string const &amp;data, T device));
    };
</pre>

<p>where <B>T</B> is a template parameter of some entity declared outside <B>log</B>. The only way this would work is if you declared <B>log</B> within some other template taking <B>T</B> as a parameter:</p>

<pre>
template&lt;typename T&gt;
class X
    {
    // ...
    class log
        {
        void setAuxDevice(...);
        };
    };

X&lt;window&gt;::log     log1;
X&lt;status_bar&gt;::log log2;
</pre>

<p>In that case, <B>T</B> would be known to both <B>log</B> and <B>setAuxDevice</B>.</p>
<p>As alternatives, you could make either <B>log</B> a template:</p>

<pre>
template&lt;typename T&gt;
class log
    { void setAuxDevice(...); };

log&lt;window&gt;     log1;
log&lt;status_bar&gt; log2;
</pre>

<p>or <B>setAuxDevice</B> a template:</p>

<pre>
class log
    {
    template&lt;typename T&gt; static void setAuxDevice(...);
    };

log l;
</pre>

<p>Regardless of your approach, <B>T</B> must be declared as a template parameter within the context of <B>setAuxDevice</B>.</p>
<p>In your second example:</p>

<pre>
void setVal(vector&lt;int&gt; &amp;);

void setVal(vector&lt;T&gt; &amp;);
</pre>

<p>you apparently want to overload <B>setVal</B>, so that the specialized version takes a <B>vector</B> of <B>int</B>, the general version takes a <B>vector</B> of everything else, and no version takes a non-<B>vector</B>.</p>
<p>As before, <B>T</B> is a template parameter, and must be declared as such in the context of the second <B>setVal</B>. The most direct solution is</p>

<pre>
void setVal(vector&lt;int&gt; &amp;);

template&lt;typename T&gt; void setVal(vector&lt;T&gt; &amp;);
</pre>

<p>Now given</p>

<pre>
vector&lt;char&gt; vc;
vector&lt;int&gt; vi;
int i;
</pre>

<p>the calls</p>

<pre>
setVal(vc); // OK, general
setVal(vi); // OK, specialized
setVal(i);  // error
</pre>

<p>work as you expect.</p>

<H3><FONT COLOR="#000080">Private vs. Secret</FONT></H3>
<H3><FONT COLOR="#000080">Q</FONT></H3>
<p> My friend is worried that anyone can access private members of his class <B>OldBank</B> by using pointers. He asked me for a solution, so I changed his class to <B>NewBank</B>. My problem: we can still access the private member by any means. &#151; Anurag Uniyal</p>

<H3><FONT COLOR="#000080">A</FONT></H3>
<p> I&#146;ve simplified your classes as <a href="list1.htm">Listing 1</a> and your problem demonstration as <a href="list2.htm">Listing 2</a>.</p>
<p>You are experiencing two difficulties:</p>
<UL><LI>   By judicious casting, users are able to fetch the supposedly private bits of <B>OldBank</B>. You want to prevent this.</LI>
<LI>   Your proposed solution (<B>NewBank</B>) removes that problem while creating another. <B>OldBank</B> maintains a distinct <B>pass</B> state for every <B>OldBank</B> object, while <B>NewBank</B> shares the same<B> pass</B> state among every <B>NewBank</B> object. I somehow doubt this is your intent.</LI></UL>

<p>At the risk of redundancy, I&#146;ll repeat advice I&#146;ve seen in the C++ newsgroups many times: <B>private</B> is not equivalent to secret. Access control (such as <B>private</B>) prevents accidents, not malice. It is certainly not intended as a robust security measure.</p>
<p>C++ access control simply puts a type-safe face on a plain old C <B>struct</B>. Once you bypass that type safety &#151; as you&#146;ve done with your <B>(int *)</B> type cast &#151; you have no more protection in C++ than you have in C. If you truly want to keep prying eyes away from your data, you must hide it through a secure means that works independently of your programming language &#151; a topic far beyond my expertise.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>
<p>Several Diligent Readers have taken me to task for my template implementation of Java&#146;s <B>super</B> keyword <a href="#3">[3]</a>. Hans Salvisberg puts it this way:</p>
<p><I>&quot;I usually like your answers, but your use of templates for simulating Java&#146;s </I><B>super</B><I> keyword is too much code for a simple problem, and it obfuscates the class hierarchy.&quot;</I></p>
<p>David Doty was slightly softer:</p>
<p><I>&quot;I recently started reading</I> CUJ <I>after a lapse of &lt;mumble&gt; years in the Delphi world, and really enjoy your column. But (you knew this was coming, didn&#146;t you?), your template-based implementation of the Java</I> <B>super</B> <I>keyword (a.k.a.</I> <B>inherited</B><I> in the Delphi world) seems to be perhaps overkill.&quot;</I></p>
<p>(And just when Andrei Alexandrescu finally trained me that templates were the balm for all C++ ills...)</p>
<p>They and other readers suggest variations of a solution I had already considered: defining a private typedef <B>super</B> within the deriving class that is aliased to the base class. In the context of the original problem, such a solution would allow</p>

<pre>
class Top
    {
public:
    virtual void f();
    };

class Bottom : public Top
    {
private:
    typedef Top super;
public:
    virtual void f()
        {
        super::f();
        }
    };
</pre>

<p>This solution works fine, and is simpler than mine. The problem comes when you follow the original questioner&#146;s scenario of inserting a class <B>Middle</B> between <B>Top</B> and <B>Bottom</B>:</p>

<pre>
class Middle : public Top
</pre>

<p>With the non-template solution, you must remember to make two changes to <B>Bottom</B>:</p>

<pre>
class Bottom
    : public Middle // was Top
    {
private:
    typedef Middle super; // was Top
    // ...
    };
</pre>

<p>Requiring these changes is an accident waiting to happen. Indeed, the original questioner was motivated to write me because he forgot to make the equivalent changes in his code, and wanted a mechanism that was self-maintaining.</p>
<p>His desire lead me to the template solution. I reasoned that requiring one change, from</p>

<pre>
Bottom_&lt;Top&gt;
</pre>

<p>to</p>

<pre>
Bottom_&lt;Middle&gt;
</pre>

<p>was more robust than requiring two discrete changes.</p>
<p>Does that robustness come at a complexity cost? Absolutely. Is it the &quot;best&quot; solution in all contexts? Nope. Is it less error-prone? I&#146;d argue yes, although others clearly would argue differently.</p>
<p>Indeed, based on the response I&#146;ve received, I seem to be the only one who finds virtue in the template solution. Even Bjarne&#146;s against me: as David Tribble points out, Stroustrup recommends the non-template solution in his <I>Design and Evolution of C++</I> (section 13.6).</p>
<p>Hmmm.</p>
<p>Okay, how about this: we&#146;re both right! After all, both solutions will work (albeit with different ancillary costs and benefits).</p>
<p>One of C++&#146;s prime strengths is its adaptability. The language often offers multiple solutions to a given problem. That we can argue about which solution is best &#151; rather than whether a solution exists at all &#151; is testament to that adaptability.</p>
<p>In my columns, I offer possibilities and alternatives. I don&#146;t claim them as the Alpha and Omega of C++ design. Sometimes I&#146;ll recommend solutions consistent with mainstream ideology. And sometimes &#151; as is the case here &#151; I&#146;ll recommend solutions that strike people as odd, or overly complicated, or just plain wrong.</p>
<p>In the end, I&#146;m trying to get people thinking about their own approaches. If making an offbeat recommendation stirs people&#146;s minds enough to respond, then I think I&#146;ve done a large part of my job. (Besides, by apparently overlooking such an &quot;obvious&quot; solution, I discover who&#146;s really paying attention!)</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  Yes, I do believe this qualifies as a Guilty Pleasure.</p>
<p><a name="2"></a>[2]  C++ Standard subclause 6.4.2.</p>
<p><a name="3"></a>[3]  Item &quot;Super Trouper&quot; in my September 2000 column.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/jan01/schmidt.zip"></a></h4>

</blockquote></body></html>
