<HTML>   
     <HEAD>
<TITLE>January 2001/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjan.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">The Woods of Complexity</FONT></H3>

<p>Well, I finally won at Stump the Compiler. That is, I asked it to compile a certain piece of template code and it replied with &quot;Internal Compiler Error.&quot; I don&#146;t know whether to be proud of myself or embarrassed. Did I write something clever, or just subtly wrong? Perhaps both.</p>
<p>After much tinkering and experimenting, I finally got the code to compile, and that got me thinking. There is a new school of thought concerning how C++ ought to be taught to new programmers. It says they ought to be introduced to certain parts of the Standard C++ library, such as iostreams, <B>std::vector</B>, and <B>std::string</B>, very early in their curriculum. This enables new programmers to start writing <I>interesting</I> programs quickly, not just toy programs to add a couple of numbers, spit out a line of text, etc. For a good introduction to this approach, see Bjarne Stroustrup&#146;s article, &quot;Learning Standard C++ as a New Language,&quot; in the May 1999 issue of <I>CUJ</I> (also on his website at <B>http://www.research.att.com/~bs/new_learning.pdf</B>).</p>
<p>I think there is much to be said for making things as simple as possible for new programmers. The C++ Standard library does that, in a sense; it replaces (or hides) pointers and arrays, and the particularly unfriendly <B>scanf</B> and <B>printf</B> families of functions. Yet I have reservations about this new approach to teaching C++. It relies upon templatized constructs, such as <B>vector</B> and <B>string</B>, behaving like good abstractions &#151; which they do, if you&#146;re careful to make the right mistakes. I find these abstractions perilously thin veneers over a mass of complexity. In my experience with templates, it is all too easy to punch through the veneer; and when you do, God help you if you don&#146;t have good troubleshooting skills or someone to help you out.</p>
<p>Okay, so I am not a total believer in the new school, but I am not a total antagonist either. To prove it, I want to introduce <I>CUJ</I>&#146;s newest columnist, Andrew Koenig. Andy probably needs no introduction to C++ programmers, but I will list a few of his impressive credentials: project editor of the C++ standards committee, former columnist for <I>C++ Report</I>, author/coauthor of three programming books. This first installment of his bimonthly column, C++ Made Easier (p. 42), is an excerpt of his latest book <I>Accelerated C++,</I> which he co-wrote with Barbara Moo. <I>Accelerated C++</I> strongly promotes the new approach to teaching C++. Although I don&#146;t know how effective this approach is for newbies, I know that the code in Andy&#146;s column has had a big effect on me. It makes me want to trash everything I have done to date and rewrite it. Andy&#146;s code is that beautiful. I believe even experienced programmers could learn much &#151; about algorithm design and programming style, for example &#151; by studying Andy&#146;s code. So I am very happy to welcome Andy to the pages of <I>CUJ.</I></p>
<p>I remain an agnostic on the new approach to teaching C++; I prefer to let readers judge for themselves. For my part, if I were to stress anything that new programmers should learn, it would not be this language feature or that; it would be basic troubleshooting, which is both an art and a science, indispensable in all fields of engineering. Happy the student with faithful guides, who never steer her into the woods of complexity. Happier still the one who goes there anyway, and knows how to find her way out.</p>
<p>Marc Briand<br>
Editor-in-Chief</p></blockquote></body></html>
