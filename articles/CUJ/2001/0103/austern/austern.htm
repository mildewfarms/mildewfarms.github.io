<HTML>   
     <HEAD>
<TITLE>March 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Streambufs and Streambuf Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>If you&#146;ve ever used getc and putc, you need the C++ equivalents that reside in streambufs.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>For simple things, C++ I/O is simple. To send a value to an output stream <B>os</B>, you write</p>

<pre>
out &lt;&lt; "The value is" &lt;&lt; x
    &lt;&lt; std::endl;
</pre>

<p>To read a value, you write</p>

<pre>
in &gt;&gt; x;
</pre>

<p>I haven&#146;t said what <B>x</B>&#146;s type is, and I haven&#146;t said whether <B>in</B> and <B>out</B> are standard input and standard output or whether they connect to files. That&#146;s intentional; this code works the same way regardless of those details.</p>
<p>If your I/O needs are modest, you may never need to know much more than that. Once you know about the standard streams <B>cin</B> and <B>cout</B>, the <B>&gt;&gt;</B> operator for input, the <B>&lt;&lt;</B> operator for output, and the <B>endl</B> manipulator to terminate a line, you&#146;re most of the way there. With a few more details &#151; <B>getline</B> for line-oriented input, the <B>width</B> and <B>precision</B> and <B>setbase</B> manipulators to control how numbers get displayed, and the <B>ifstream</B> and <B>ofstream</B> classes to connect to files &#151; you have something that begins to look like a complete I/O library. At this level, it&#146;s easy to fit a description of C++ I/O into less than a page.</p>
<p>Of course, the C++ Standard takes many pages to describe the standard I/O library; sometimes you need to know more than the capsule summary in the last paragraph. For example, suppose you aren&#146;t working with high-level types like strings and integers, but with individual characters. If you were working in C, you would read a character with <B>getc</B> or <B>fgetc</B>. In C++ your first thought might be that you should read a character by writing</p>

<pre>
char c;
in &gt;&gt; c;,
</pre>

<p>but that&#146;s subtly wrong &#151; or maybe not so subtly. It&#146;s the moral equivalent of <B>scanf("%c", &amp;c)</B>, not of <B>getc</B>. The <B>&gt;&gt;</B> operator performs <I>formatted input,</I> so, if the input stream contains the characters <B>"a b c"</B>, you&#146;ll never see the spaces. (Similarly, you&#146;ll never see tabs or newlines.) Formatted input skips whitespace.</p>
<p>If formatted input is the wrong choice, maybe you should try unformatted input: <B>c = in.get();</B>. That&#146;s not exactly wrong, but if you&#146;re expecting reasonable performance you&#146;ll probably be disappointed. It certainly isn&#146;t the equivalent of <B>getc</B>! While <B>getc</B> is a tiny function that does a little bit of pointer manipulation (it might even be a macro, rather than a function), <B>istream::get</B> is quite complicated &#151; in the implementations I have looked at, it takes several dozen lines of code. If you write (say) a file-copying routine in terms of <B>istream::get</B>, you can expect it to be dreadfully slow. As a general rule, <B>get</B> does not belong in a tight loop.</p>
<p>But now there&#146;s a problem. If you shouldn&#146;t use formatted input and you shouldn&#146;t use unformatted input, then what&#146;s left? The <B>istream</B> class doesn&#146;t have any member functions that are any simpler than <B>get</B>.</p>
<p>If performance is important, you have to go beyond <B>istream</B> and <B>ostream</B> and learn a bit more about how the C++ I/O library is put together. The lower level functions that <B>get</B> and <B>getline</B> and <B>operator&gt;&gt;</B> are built on top of aren&#146;t part of <B>istream</B>, but part of <B>streambuf</B>. The closest equivalent of <B>getc</B> in the C++ library is a somewhat formidable looking construct: <B>in.rdbuf()-&gt;sbumpc()</B>.</p>

<H3><FONT COLOR="#000080">Streambufs</FONT></H3>

<p>The C++ I/O library is quite complicated, but the general ideas behind its architecture are simple. Formatting decisions are made by <I>locale facets,</I> and character buffering, and transport of characters to and from their ultimate source or destination, is performed by <I>stream buffers.</I> The stream classes themselves, <B>istream</B> and <B>ostream</B>, are surprisingly unimportant. They&#146;re wrappers that tie locales to stream buffers; they contain user formatting flags and some rudimentary state information; and they provide a convenient syntax (the <B>&lt;&lt;</B> and <B>&gt;&gt;</B> operators) for simple kinds of I/O.</p>
<p>The most innovative aspect of the C++ I/O library is that data formatting has been decoupled from character manipulation; understanding that decoupling is crucial for anything but basic use of the library.</p>
<p>A stream buffer class is a class that inherits from <B>std::streambuf</B>. It understands only one data type: the character <a href="#1">[1]</a>. Interpreting those characters is someone else&#146;s job. For example, a streambuf might tell you that the next three characters are <B>'7'</B>, <B>'F'</B>, and <B>' '</B>. If you want to interpret those characters as the number 127 terminated by whitespace, you have to call another function. The stream classes do that automatically: when you write</p>

<pre>
int n;
in &gt;&gt; n;,
</pre>

<p>the <B>istream</B> gets characters from a stream buffer and passes those characters to a locale facet so that they can be interpreted as an <B>int</B>.</p>
<p>Every stream buffer has the same interface, but manages a different kind of I/O or buffering. Thus <B>std::istream</B> contains a pointer of type <B>streambuf*</B> (you write <B>in.rdbuf()</B> to obtain the pointer), but, as usual with pointers to base classes, <B>istream</B> doesn&#146;t have to know the exact type of the object that it points to. For example, the <B>rdbuf</B> pointer might point to a <B>std::filebuf</B>, a stream buffer for file I/O; or to a <B>std::stringbuf</B>, a stream buffer that manages characters in a string; or to a user-defined networking stream buffer.</p>
<p>This may seem complicated and inefficient. If we&#146;re using an interface that&#146;s based on reading and writing single characters, and if we&#146;re accessing that interface by a pointer to a polymorphic base class, does this mean we have to call a virtual function for every character? Fortunately, no. While <B>std::streambuf</B> is a base class, it&#146;s not an abstract base class: its functionality is cleverly divided between virtual and nonvirtual functions, so that <B>streambuf</B>&#146;s interface is simple (much simpler than the words in the Standard make it appear!) and also efficient.</p>
<p>If you&#146;ve ever used the low-level functions in the C I/O library, the stream buffer interface should look familiar to you: you&#146;ll be working with member functions instead of global functions, and the names are slightly different, but the ideas are the same. If <B>p</B> is a <B>streambuf*</B>, then <B>p-&gt;sputc(c)</B> writes the single character <B>c</B>; it returns <B>EOF</B> if the write fails, and something else if it succeeds. Input is slightly more complicated, because there are more choices: <B>p-&gt;sbumpc()</B> returns the current character (again, it returns <B>EOF</B> if the read fails) and moves to the next read position, <B>p-&gt;sgetc()</B> returns the current character without moving to the next read position, and <B>p-&gt;snextc()</B> increments the read position and returns the next character. Finally, <B>p-&gt;sputbackc(c)</B> &quot;unreads&quot; a character and pushes it back onto the input.</p>
<p>The same type, <B>streambuf</B>, is used both for reading and writing. If a stream buffer is read-only, then writes will always fail; if a stream buffer is write-only, then reads will always fail.</p>
<p>The key point is that all of those functions are non-virtual &#151; in fact, they&#146;re probably just a line or two long and they&#146;re probably declared to be inline. The read functions get characters from an internal buffer declared in the <B>streambuf</B> base class; only when all the characters in the buffer have been consumed does <B>streambuf</B> need to invoke any virtual functions. Similarly, <B>sputc</B> puts character in an internal buffer and invokes the appropriate virtual function whenever that buffer needs to be flushed. We thus have both flexibility and efficiency.</p>
<p>All of <B>streambuf</B>&#146;s virtual member functions are protected. You need to know about them if you&#146;re planning to write your own stream buffer class, but not if all you&#146;re planning to do is use preexisting stream buffers &#151; I&#146;m not even going to mention those virtual functions&#146; names in this column! To use stream buffers, you just need to know about the member functions I&#146;ve already mentioned: <B>sputc</B>, <B>sbumpc</B>, <B>sgetc</B>, <B>snextc</B>, and <B>sputbackc</B>. For input, you have the choice of reading a character with <B>sbumpc</B> or else reading it with <B>sgetc</B> and then moving to the next with <B>snextc</B>. Which version you use is partly a matter of taste; I tend to find <B>sbumpc</B> more convenient, but the differences are small.</p>
<p>Are there any gotchas to watch out for when you&#146;re mixing low-level streambuf I/O with the high-level stream functions? Not really. You don&#146;t have to worry about buffers or positioning information getting out of sync, because streams have no such information on their own. The biggest issues deal with error reporting, and even those issues are smaller than they might appear. You might worry, for example, that if you work directly with a stream&#146;s underlying buffer, errors won&#146;t be reported back to the stream. Here there is a real concern &#151; streams do keep track of error state &#151; but it&#146;s a minor one. Suppose that <B>in</B> is an <B>istream</B>, and suppose that you keep calling <B>in.rdbuf()-&gt;sbumpc()</B> until you encounter <B>EOF</B>. It&#146;s certainly true that <B>in</B> won&#146;t have its end-of-file marker set, but that doesn&#146;t really matter: it&#146;ll get set anyway the next time you try reading from <B>in</B> again.</p>
<p>A slightly more serious concern is that the virtual functions in a class that&#146;s derived from <B>streambuf</B> might throw exceptions; perhaps, for example, a user-defined class for network I/O might throw an exception when the underlying connection has been lost. High-level <B>istream</B> and <B>ostream</B> functions will catch those exceptions and translate them into an error state within the stream (that&#146;s one of the reasons that seemingly innocent functions like <B>istream::get</B> are so complicated), but if you&#146;re working with stream buffers directly there&#146;s nobody to catch exceptions for you. If you work with stream buffers, you should make sure that your code is exception safe.</p>

<H3><FONT COLOR="#000080">Streambuf Iterators</FONT></H3>

<p>I haven&#146;t yet presented any code samples that use streambufs. One reason is that there&#146;s very little new to say: you can use <B>sputc</B> and <B>sbumpc</B> in just the same way as you use <B>putc</B> and <B>getc</B>. Another reason, however, is that I haven&#146;t yet described one last library component that, in many real cases, is the easiest way of working with streambufs.</p>
<p>If you&#146;re reading a character, you&#146;re probably going to read more than one character: character input is mostly important in loops. But a loop where you read one value after another, doing things with each of those values, is a pattern that&#146;s dealt with elsewhere in the C++ Standard library: it&#146;s just what iterators are for. Accordingly, the standard library defines the types <B>istreambuf_iterator</B> and <B>ostreambuf_iterator</B>, which use streambufs to read and write characters. If <B>i</B> is an <B>istreambuf_iterator</B>, then <B>*i</B> returns the current character (just like <B>sgetc</B>), and <B>++i</B> moves to the next character (just like <B>sbumpc</B>). Upon reaching end of file, an <B>istreambuf_iterator</B> becomes equal to a special <I>end-of-stream iterator</I> that you create with the default constructor. So, for example, you can process all of the characters that you read from a stream by writing a loop that looks something like this:</p>

<pre>
std::streambuf* p = in.rdbuf();
std::istreambuf_iterator&lt;char&gt; i(p);
std::istreambuf_iterator&lt;char&gt; eos;
while (i != eos) {
   char c = *i; // Do something with c
}
</pre>

<p>(Actually, this is just slightly more verbose than necessary. We could pass <B>in</B> to <B>istreambuf_iterator</B> directly; there&#146;s a constructor that will call <B>in.rdbuf()</B> for us.)</p>
<p>But, of course, the real value of iterators isn&#146;t that you can use them in loops; it&#146;s that you can combine them with generic algorithms that operate on arbitrary iterator types. You can pass an <B>istreambuf_iterator</B> to any algorithm that accepts input iterators, and you can pass an <B>ostreambuf_iterator</B> to any algorithm that accepts output iterators. If you&#146;re lucky, you may not have to write any loops on your own: someone may already have written a generic algorithm that does what you want. Even if you&#146;re not quite that lucky, you can write your own generic algorithm, using the iterator formalism to separate out the data processing from the mechanics of I/O.</p>
<p>Combining streambuf iterators with other parts of the standard library makes it possible to do some surprisingly sophisticated things in just a few lines. For example, suppose that you need to read the entire contents of a file into memory. If you don&#146;t know the length of the file ahead of time, this can be messy: you have to use dynamic allocation, but you can&#146;t know how much memory to allocate until after you&#146;ve read everything. The best strategy is to allocate a buffer of some arbitrary size, and then expand its size when necessary. But we shouldn&#146;t have to do that explicitly: <B>vector</B> can handle the tedium of memory management for us. We also don&#146;t need to write a loop to read characters: in terms of iterators, the characters we want begin with an iterator that points to the beginning of the file and continue up until the end-of-stream iterator. This is a range of iterators, and <B>vector</B> has a constructor that takes a range of iterators <a href="#2">[2]</a>. The code is shorter than the explanation:</p>

<pre>
std::ifstream in(fname);
std::istreambuf_iterator&lt;char&gt; i(in);
std::istreambuf_iterator&lt;char&gt; eos;
std::vector&lt;char&gt; v(i, eos);
</pre>

<p>Or, if the vector <B>v</B> already exists and you want to append the contents of a file to it, that&#146;s equally easy: just replace the last line with</p>

<pre>
v.insert(v.end(), i, eos);
</pre>

<p>or with</p>

<pre>
std::copy(i, eos, std::back_inserter(v));
</pre>

<p>Similarly, it&#146;s easy to copy one file to another, performing character-level transformations along the way: just combine <B>istreambuf_iterator</B>, <B>ostreambuf_iterator</B>, and the appropriate generic algorithm. This snippet, for example, creates a copy of a file in which every space character is replaced with a <B>newline</B>:</p>

<pre>
std::ifstream in_file(in_fname);
std::ofstream out_file(out_fname);
std::istreambuf_iterator&lt;char&gt; in(in_file);
std::istreambuf_iterator&lt;char&gt; eos;
std::ostreambuf_iterator&lt;char&gt; out(out_file);
std::replace_copy(in, eos, out, ' ', '\n');
</pre>

<H3><FONT COLOR="#000080">Conclusions</FONT></H3>

<p>The C++ Standard library segregates high-level and low-level I/O operations into different classes: high-level operations in the stream classes, low-level operations in <B>streambuf</B> and the classes that inherit from it. The low-level operations have sometimes had a tendency to get lost, since it&#146;s easy to think of <B>streambuf</B> as just an implementation detail. That&#146;s unfortunate: <B>sputc</B> and <B>sbumpc</B> are no more obscure or complicated than the C library functions <B>putc</B> and <B>getc</B> are. If you would ever consider writing part of your program in terms of <B>putc</B> and <B>getc</B>, you should also consider writing it in terms of stream buffers and streambuf iterators.</p>
<p>You should use stream classes, with the <B>&lt;&lt;</B> and <B>&gt;&gt;</B> operator, when you&#146;re working with high-level data types. You should use stream buffers, either directly or through streambuf iterators, when you&#146;re performing character-by-character I/O and when performance matters. Discussions of C++ I/O rightly begin with <B>istream</B> and <B>ostream</B>, but ought not to end there.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  A character isn&#146;t necessarily the same as <B>char</B>. The C++ I/O library is templatized; <B>streambuf</B> isn&#146;t a class, but just a typedef for <B>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</B>. The library also provides <B>wstreambuf</B>, which is a typedef for <B>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</B>, and in principle you can use <B>basic_streambuf</B> for your own character type. For the purposes of this column, parameterization by character type doesn&#146;t matter.</p>
<p><a name="2"></a>[2]  This constructor uses member templates. It&#146;s part of the C++ Standard, but you may find that member templates are poorly supported on some older compilers.</p>

<p><i><b>Matt Austern</b> is the author of <I>Generic Programming and the STL</I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>

</blockquote></body></html>
