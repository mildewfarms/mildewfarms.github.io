<HTML><HEAD>
<TITLE>March 2001/Using Template Functions to Customize Library Behavior/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Providing a user-definable policy via specialization of a function template</A></h4>
<pre>
//
//---- begin file library.h ----
//

#include &lt;iostream&gt;

template&lt;class Container&gt;
void policy(const Container * c) 
{
    std::cout &lt;&lt; "Performing Default Policy" 
              &lt;&lt; std::endl &lt;&lt; std::endl;
}    

//
//---- begin file container.h ----
//

#include "library.h"
#include &lt;string&gt;
#include &lt;iostream&gt;

template &lt;class ElementType&gt;
class MyContainer {
public:
    MyContainer(const std::string iName) : instanceName(iName) 
   {}
   // class implementation
   // ...
   
   // forwards the policy request
   void doPolicy();
   // a service that uses the policy
   void performService() { doPolicy(); }
   
   const std::string instanceName;
};

// elements for example's sake
template&lt;class T&gt;
struct Element1 {
// ...
};

template&lt;class T&gt;
struct Element2 {
// ...
};

template &lt;class ElementType&gt;
void MyContainer&lt;ElementType&gt;::doPolicy() 
{ 
   policy(this);
}

//
//---- begin file user.cpp ----
//

#include "container.h"

template&lt;class T&gt;
void policy(const MyContainer&lt;Element2&lt;T&gt; &gt; * c) 
{
    std::cout &lt;&lt; "Performing My Policy" 
              &lt;&lt; std::endl &lt;&lt; std::endl;
} 
           
int main() {

   MyContainer&lt;Element1&lt;int&gt; &gt;  c("object1");
   MyContainer&lt;Element2&lt;int&gt; &gt;  d("object2");
   c.doPolicy();
   d.doPolicy();

   return 0;
}
&#151; End of Listing &#151;</pre></body></html>
