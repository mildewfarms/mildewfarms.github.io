<HTML><HEAD>
<TITLE>March 2001/Using Template Functions to Customize Library Behavior/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: Combining run-time and compile-time policy customization methods of <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a></A></h4>
<pre>
//
//---- begin file library.h ----
//

#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

typedef void(*policyFunction)();
typedef std::map&lt;const void *, policyFunction&gt; policyMap_t;

// singleton class to manage policies
class Policies {
public:
   void   registerInstance(const void * const v, 
                           const policyFunction func);
   policyFunction isRegistered(const void * const v) const;
   void   policy(const void * const v) const;
   static Policies&amp; instancePolicyMap();
private:
   Policies() {}
   policyMap_t instanceMap_;
};

// member function definitions
void
Policies::registerInstance(const void * const v, 
                           const policyFunction func)
{
   if(v != 0 &amp;&amp; func != 0) {
      instanceMap_[v] = func;
   }
}

policyFunction
Policies::isRegistered(const void * const v) const 
{
   policyMap_t::const_iterator iter = instanceMap_.find(v);
   if (iter != instanceMap_.end()) {
      return (*iter).second;
   }
   else {
      return 0;
   }
}

void
Policies::policy(const void * const v) const
{
   if (policyFunction pFunc = isRegistered(v)) {
      pFunc();
   } 
}

Policies&amp;
Policies::instancePolicyMap()
{
   static Policies typeMap;
   return typeMap;
}

// namespace scope function for convenience
Policies&amp; instancePolicyMap() 
{
   return Policies::instancePolicyMap();
}    


template&lt;class Container&gt;
void policy(const Container * const c) 
{
   std::cout &lt;&lt; "Performing Compile Time Default Policy" 
             &lt;&lt; std::endl;
   std::string obj;
   if (c) 
      obj = c-&gt;instanceName;
   else
      obj = "unnamed";
   std::cout &lt;&lt; "    on Object: " &lt;&lt; obj 
             &lt;&lt; std::endl &lt;&lt; std::endl;
}    
    
//
//---- begin file container.h ----
//

#include "library.h"
#include &lt;string&gt;
#include &lt;iostream&gt;

template &lt;class ElementType&gt;
class MyContainer {
public:
    MyContainer(const std::string iName) : instanceName(iName) 
    {}
    // class implementation
    // ...
    
    // forwards the policy request
    void doPolicy();
    // a service that uses the policy
    void performService() { doPolicy(); }
    
    const std::string instanceName;
};

// elements for example's sake
template&lt;class T&gt;
struct Element1 {
// ...
};

template&lt;class T&gt;
struct Element2 {
// ...
};

template &lt;class ElementType&gt;
void MyContainer&lt;ElementType&gt;::doPolicy() 
{ 
    policy(this);
}

//
//---- begin file user.cpp ----
//

#include "container.h"


// policy functions used for runtime instance control
void runTimePolicy1()
{
    std::cout &lt;&lt; "    runTimePolicy1() executed" &lt;&lt; std::endl;
}

void runTimePolicy2()
{
    std::cout &lt;&lt; "    runTimePolicy2() executed" &lt;&lt; std::endl;
}

void runTimePolicy3()
{
    std::cout &lt;&lt; "    runTimePolicy3() executed" &lt;&lt; std::endl;
}

// A more specialized function overload for a compile time policy
template&lt;class T&gt;
void policy(const MyContainer&lt;T&gt; * c) 
{
   std::cout 
      &lt;&lt; "Performing My Compile Time Policy for "
      &lt;&lt; "types of:" &lt;&lt; std::endl &lt;&lt; "MyContainer&lt;Element1&lt;T&gt;"
      &lt;&lt; std::endl;
   std::string obj;
   if (c) 
      obj = c-&gt;instanceName;
   else
      obj = "unnamed";
   std::cout &lt;&lt; "    on Object: " &lt;&lt; obj 
             &lt;&lt; std::endl &lt;&lt; std::endl;
} 

// A more specialized function overload for instance control
template&lt;class T&gt;
void policy(const MyContainer&lt;Element2&lt;T&gt; &gt; * const c)
{
   std::cout &lt;&lt; "Performing Runtime Policy: " 
             &lt;&lt; std::endl;

   if (!instancePolicyMap().isRegistered(c)) {
       
      // a per instance strategy would go here
      static unsigned int r = 0;
      switch(++r % 3) {
          case 1:
             instancePolicyMap().
                registerInstance(c, &amp;runTimePolicy1);
             break;
          case 2:
             instancePolicyMap().
                registerInstance(c, &amp;runTimePolicy2);
             break;
          case 0:
          default:
             instancePolicyMap().
                registerInstance(c, &amp;runTimePolicy3);
      }
    }       

   std::string obj;
   if (c) 
       obj = c-&gt;instanceName;
   else
       obj = "unnamed";
   std::cout &lt;&lt; "    Object: " &lt;&lt; obj &lt;&lt; std::endl;

   instancePolicyMap().policy(c);
} 
               
           
int main() {

   MyContainer&lt;Element1&lt;int&gt; &gt; 
       c("MyContainer&lt;Element1&lt;int&gt; &gt;");
   MyContainer&lt;Element2&lt;float&gt; &gt; 
       d1("MyContainer&lt;Element2&lt;float&gt; &gt; Instance#1");
   MyContainer&lt;Element2&lt;float&gt; &gt; 
       d2("MyContainer&lt;Element2&lt;float&gt; &gt; Instance#2");
   MyContainer&lt;Element2&lt;float&gt; &gt; 
       d3("MyContainer&lt;Element2&lt;float&gt; &gt; Instance#3");

   c.doPolicy();
   d1.doPolicy();
   d2.doPolicy();
   d3.doPolicy();

   return 0;
}
&#151; End of Listing &#151;</pre></body></html>
