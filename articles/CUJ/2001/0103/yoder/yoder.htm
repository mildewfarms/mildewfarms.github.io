<HTML>   
     <HEAD>
<TITLE>March 2001/Using Template Functions to Customize Library Behavior</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Using Template Functions to Customize Library Behavior</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Michael B. Yoder</FONT></H3>

<BLOCKQUOTE>
<p>If you&#146;re writing code to be used by other programmers, you&#146;ll want to make it customizable, and you&#146;ll want to do it well. This article presents an approach that is both efficient and easy to manage.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>
<p>One of the many challenges of writing a C++ library is anticipating the many different ways clients will use your code. Despite your best prophetic efforts, however, the real world always exposes the unforeseen. Unfortunately, by the time your library is in the hands of users, implementing enhancements can become difficult. Conformance to a specification, a frozen API, or backward compatibility can be serious obstacles to how you go about adding functionality.</p>
<p>Even if your library isn&#146;t technically bound, it can become effectively so restrained by widespread usage in client code. One faction of users who need an enhancement might be perfectly willing to undergo the cost of source code changes and/or recompilation, but others might not be so enthusiastic.</p>
<p>As such, library developers are always looking for ways to design for future customization. When looking to leave algorithms or policies open, developers may turn to the Strategy Pattern <a href="#1">[1]</a> or the now canonical approach used in the C++ Standard library known as traits <a href="#2">[2]</a>. Depending on what modifications you are in a position to make, it could be more difficult to take advantage of these once your classes are in use. A cutting-edge and less invasive way of applying traits to hierarchies of classes is discussed in Andrei Alexandrescu&#146;s recent article &quot;Traits on Steroids.&quot; <a href="#3">[3]</a></p>
<p>This article looks at function templates and how they can be used to provide hooks for customizing behavior.</p>

<H3><FONT COLOR="#000080">Looking for a Solution</FONT></H3>

<p>Consider the following working example. Assume you want to customize a policy in your classes, perhaps to specify the handling of a particular resource. Resources may include such things as file handles, network connections, mutexes, or memory. Of course, you want a solution that will give users maximum flexibility yet keep the common case trivial.</p>
<p>Adding new template or function parameters after the fact is not really a solution. It provides flexibility, but could break backward compatibility or require user source code changes. If users are vested in the status quo, as described above, or if they differ in basic priorities, such as space vs. time efficiency, you need to look at other solutions. I will examine three.</p>

<H4><FONT COLOR="#000080">Using the Preprocessor</FONT></H4>
<p>A quick and dirty method to accommodate policy change is to use macros. In <a href="list1.htm">Listing 1</a>, you will notice that the macro is placed in what would be a private library header file. It is braced with an <B>#ifdef</B> so that the default value may be overridden. The container class is really more complex than needed here, but I introduce it this way so I can refer to it throughout this article in other examples. The container class uses the macro in the member function <B>doPolicy</B>, which is called whenever the policy needs to be executed.</p>
<p>In this contrived example, the user code requests a service from the class, which calls the <B>doPolicy</B> method to complete the demonstration. The output of this program is:</p>

<pre>
Policy is: default policy
</pre>

<p>The programmer can then use the compiler&#146;s facility for predefining macros to change the value of <B>CLASS_POLICY</B> to something else. For example, on my compiler, if you use the flag <B>-DCLASS_POLICY='my policy'</B> at the command line when compiling both the library and user code, the output dutifully reports:</p>

<pre>
Policy is: my policy
</pre>

<p>As you no doubt have realized by now, the quick and dirty way is not the best way. While there might be an occasional user who doesn&#146;t mind this method, overall it doesn&#146;t critique well. For one thing, the policy must be set in both the library and the client code by way of recompilation. For another, the method is not practically extensible. What if you wanted to set different policies for different classes or groups of classes, or to exercise control at run time? Creating a list of macros would be awkward at best.</p>
<p>But this route has an even darker side-aspect. Not only would users have to recompile both the library and client code to change the policy, they would need to ensure that all their defines were 100% consistent. Failure to do this would lead to different definitions of the function in various translation units &#151; a violation of the One Definition Rule <a href="#4">[4]</a>. This could easily result in unpredictable behavior. Worse yet, these errors would likely be silent, their presence going undetected by the compiler and linker.</p>
<p>And of course, run-time control with a preprocessor mechanism is impossible. In short, using macros is unpleasant for everyone involved.</p>

<H4><FONT COLOR="#000080">Using a Run-time Service</FONT></H4>
<p>Another tack is to have the library provide a service for registering new policies. All the subscribing classes would forward their policy requests to a Singleton [<a href="#5">5</a>, <a href="#6">6</a>] provided by the library, which would in turn use either a default policy or a registered policy. <a href="list2.htm">Listing 2</a> shows an implementation of this approach.</p>
<p>The singleton would know each class by an identifier which would accompany its policy request. Users could override the default behavior by providing a callback function to which policy requests would be forwarded, and registering it with the policy manager. Of course, in the real world, these global callback functions would be better off in a namespace, and the static map structure used for the registry would need to be guarded for multithreaded access. The output of the user program for this example is:</p>

<pre>
Performing Default Policy.

Performing My Policy.
</pre>

<p>This method offers at least one advantage over macros. Before registering, the default is executed; afterward, the call is forwarded to the function supplied by the user. In this setup, users gain at least some degree of control. Behavior can be specified at run time with no need to recompile the library.</p>
<p>Things are still not as nice as we would like, however. Although these customized policies are known at compile time, the program still must pay for a run-time lookup of their policy function. In addition, the hard-coded string that each class passes in is a poor subset of the unbounded set of types that it would be possible to choose from, and is in fact limited to one customization per class template.</p>

<H4><FONT COLOR="#000080">Using Function Templates</FONT></H4>

<p>Function templates provide the degree of control required. Compile-time decisions can be enforced, while leaving run-time customization as an option. With templates, it is possible to set up compile-time customization to handle both distinct types and related groups of types as well. Function templates do behave a bit differently than class templates in C++, however. If you are interested in learning more about how they work, see the sidebar <a href="sidebar.htm">&quot;Understanding Function Template Selection.&quot;</a></p>
<p><a href="list3.htm">Listing 3</a> shows the use of function templates in action. In the library, the <B>policy</B> function becomes a function template instead of a member function. The <B>MyContainer</B> member function <B>doPolicy</B> is modified from the previous example to call <B>policy</B> with its <B>this</B> pointer as an argument. The use of the this pointer ensures that the <B>policy</B> function will always be called with the container&#146;s specialized type as an argument.</p>
<p>In the <B>user.cpp</B> file, the user provides an overload for <B>policy</B> which is a more specialized function template than the primary template defined in <B>library.h</B>. The compiler will use this new template if <B>policy</B> is called with any argument that is a specialization of <B>MyContainer</B> on <B>Element2&lt;T&gt;</B> types. <a href="list3.htm">Listing 3</a> once again gives familiar results, but without the run-time lookup cost:</p>

<pre>
Performing Default Policy

Performing My Policy
</pre>

<p>Using function templates in this way allows you to transcend the other solutions. Now you can customize on a specific type or type grouping at user compile time. Run-time control can be reserved for fine-grained behaviors, down to instances of classes. In <a href="list4.htm">Listing 4</a>, I bring back the registration service, which now allows users to implement control over class instances at run time. This function implements behavior for different instances using the same scheme as in <a href="list2.htm">Listing 2</a>. In this version, however, a run-time lookup cost need be paid only if a policy is based on run-time information. <a href="list4.htm">Listing 4</a> demonstrates both compile-time and run-time policies used together.</p>
<p>The user program provides overloads of <B>policy</B> that are more specialized. The first overload is more specialized on arguments of any <B>MyContainer&lt;T&gt;</B> type, and it provides a different compile-time policy. The second overload is more specialized than the first overload; the compiler will select it when the argument is a <B>MyContainer</B> specialized on any <B>Element2&lt;T&gt;</B> type. This overload provides an example of run-time policies. The output of <a href="list4.htm">Listing 4</a> shows different policies being executed according to the different types and instances being used:</p>

<pre>
Performing Compile Time Policy for types of:
MyContainer&lt;Element1&lt;T&gt;
    on Object: MyContainer&lt;Element1&lt;int&gt; &gt;

Performing Runtime Policy:
    Object: MyContainer&lt;Element2&lt;float&gt; &gt; Instance#1
    runTimePolicy1() executed
Performing Runtime Policy:
    Object: MyContainer&lt;Element2&lt;float&gt; &gt; Instance#2
    runTimePolicy2() executed
Performing Runtime Policy:
    Object: MyContainer&lt;Element2&lt;float&gt; &gt; Instance#3
    runTimePolicy3() executed
</pre>

<H3><FONT COLOR="#000080">A Caveat</FONT></H3>

<p>There is one limiting factor to consider when using function templates as described: how this technique interacts with explicit and implicit template instantiations within your library. Explicit template instantiations are sometimes intentionally placed in a library to help reduce the size of user executables. If your library takes advantage of some of its own template classes, they will be implicitly instantiated as well. If any of these classes use a template function as described, the compiler will, of course, generate the needed function. Since all this is now compiled in the library, a user&#146;s function template will not be considered.</p>
<p>A workaround to prevent implicit instantiations from foiling this scheme is to use internal types in your library for its own classes. For example, if your library needs to use <B>MyContainer&lt;Element1&lt;int&gt; &gt;</B>, you can create a tight wrapper for <B>int</B> and use <B>MyContainer&lt;Element1&lt;lib_int&gt; &gt;</B> instead.</p>
<p>If the library needs to use explicit instantiations to help reduce the size of user executables, a workaround is more difficult. If the class method that uses the policy is made virtual, users needing to customize behavior could create subclasses and provide an override. The compiler would then consider anew its function template choices during compilation of the subclass type. Of course, users doing this would pay for customizing behavior by having the instantiations increase the size of their executables once again.</p>

<H3><FONT COLOR="#000080">Function Templates and ANSI Compliance</FONT></H3>

<p>The examples used in this article were compiled successfully, with only minor tweaking, using these compilers: g++ 2.95.2 on Red Hat Linux, Sunpro 5.1 on Solaris, aCC 3.13 on HP-UX, Visual Age 5.0 on AIX, MipsPro 7.3.1.1m on SGI Irix, and Compaq C++ 6.2-024 on Tru64. If your compiler doesn&#146;t offer complete support for partial ordering of function templates, a likely symptom would be compiler ambiguity errors. A workaround for this problem is to provide alternate function templates that are completely specialized. For example, instead of this function template from <a href="list3.htm">Listing 3</a>:</p>

<pre>
template&lt;class T&gt;
void policy(const MyContainer&lt;Element2&lt;T&gt; &gt; * c);
</pre>

<p>Use a completely specific version like this:</p>

<pre>
template&lt;&gt;
void policy(const MyContainer&lt;Element2&lt;float&gt; &gt; * c);
</pre>

<p>While this technique doesn&#146;t allow for customizing groups of types, it does preserve the ability to customize at user compile time.</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>I would like to thank my friend and colleague Martin Sebor without whom this article would not have been possible. Also, thanks to Vijay Rajagopalan, the Foundation Team, and Technical Publications at Rogue Wave for their help and support.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns, Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995), p. 315.</p>
<p><a name="2"></a>[2]  Nathan C. Myers. &quot;Traits: a New and Useful Template Technique,&quot; <I>C++ Report,</I> June 1995.</p>
<p><a name="3"></a>[3]  Andrei Alexandrexcu. &quot;Traits on Steriods,&quot; <I>C++ Report,</I> June 2000.</p>
<p><a name="4"></a>[4]  Bjarne Stroustrup. <I>The C++ Programming Langauge, Third Edition</I> (Addison-Wesley, 1997), p. 203.</p>
<p><a name="5"></a>[5]  Gamma, et al. <I>Design Patterns,</I> p. 127.</p>
<p><a name="6"></a>[6]  Scott Meyers. <I>Effective C++, Second Edition</I> (Addison-Wesley, 1998), p. 222.</p>

<p><i><B>Michael B. Yoder</B> is a software engineer at Rogue Wave Software. For the past two and a half years he has worked as a part of the Foundation Group in teams responsible for Rogue Wave&#146;s Tools.h++ Library and C++ Standard Library implementation. He has a B.S. in Computer Science from Oregon State University.</i></p>

<h4><a href="../../../source/2001/mar01/yoder.zip"></a></h4>
</blockquote></body></html>
