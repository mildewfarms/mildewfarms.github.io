<HTML><HEAD>
<TITLE>March 2001/Using Template Functions to Customize Library Behavior/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Providing a user-definable policy via a map of function pointers</A></h4>
<pre>
//
//---- begin file library.h ----
//

#include &lt;string&gt;
#include &lt;map&gt;
#include &lt;iostream&gt;

typedef void(*policyFunction)();
typedef std::map&lt;std::string, policyFunction&gt; policyMap_t;

// singleton class to manage policies
class Policies {
public:
   void registerPolicy(const std::string id,
                       const policyFunction func);
   void policy(const std::string id) const;

   static Policies&amp; policyMap();
private:
   Policies() {}
   policyMap_t typeMap_;
};

// member function definitions
void
Policies::registerPolicy(const std::string id,
                         const policyFunction func)
{
   if (id != "" &amp;&amp; func !=0) {
      typeMap_[id] = func;
   }
}

void Policies::policy(const std::string id) const
{
   policyMap_t::const_iterator iter = typeMap_.find(id);
   if (iter != typeMap_.end()) {
      (*iter).second();
   }
   else {
       std::cout &lt;&lt; "Performing Default Policy." 
                 &lt;&lt; std::endl &lt;&lt; std::endl;
   }
}
    
Policies&amp; Policies::policyMap() 
{
   static Policies typeMap;
   return typeMap;
}    

// namespace scope function for convenience
Policies&amp; policyMap()
{
   return Policies::policyMap();
}

//
//---- begin file container.h ----
//

#include "library.h"
#include &lt;string&gt;
#include &lt;iostream&gt;

template &lt;class ElementType&gt;
class MyContainer {
public:
    MyContainer(const std::string iName) : instanceName(iName) 
   {}
   // class implementation
   // ...
   
   // forwards the policy request
   void doPolicy();
   // a service that uses the policy
   void performService() { doPolicy(); }
   
   const std::string instanceName;
};

// elements for example's sake
template&lt;class T&gt;
struct Element1 {
// ...
};

template&lt;class T&gt;
struct Element2 {
// ...
};


template &lt;class ElementType&gt;
void MyContainer&lt;ElementType&gt;::doPolicy() 
{ 
    policyMap().policy("MyContainer");
}

//
//---- begin file user.cpp ----
//

#include "container.h"

void MyPolicy()
{
    std::cout &lt;&lt; "Performing My Policy." 
              &lt;&lt; std::endl &lt;&lt; std::endl;
}
           
           
int main() {

   MyContainer&lt;Element1&lt;int&gt; &gt; c("test object");
   c.doPolicy();
   policyMap().registerPolicy("MyContainer", MyPolicy);
   c.doPolicy();

   return 0;
}
&#151; End of Listing &#151;</pre></body></html>
