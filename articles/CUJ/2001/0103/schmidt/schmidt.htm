<HTML>   
     <HEAD>
<TITLE>March 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: An Alan Smithee Film</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Of mutability, volatility, portability, and other things that go bump in the night...</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>

<H3><FONT COLOR="#000080">To const or Not to const</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> C++ Standard subclause 8.3.5/3 makes clear that the following declares the same function twice:</p>
<pre>
void f(int x);

// same function,
// const is ignored
void f(const int x);
</pre>

<p>Obviously, then, it doesn&#146;t matter what order you put the declarations in:</p>

<pre>
// still the same function
// declared twice
void f(const int x);
void f(int x);
</pre>

<p>But consider what happens when the second declaration is also a definition:</p>

<pre>
// case 1: x is declared non-const
// in f1&#146;s declaration and const
// in its definition

void f1(int x);

void f1(const int x)
    {
    x = 1; // modify x
    }

// case 2: x is declared const
// in f2&#146;s declaration and non-const
// in its definition

void f2(const int x);

void f2(int x)
    {
    x = 2; // modify x
    }
</pre>

<p>Most of my compilers reject case 1 and accept case 2, but one does the reverse. Which is correct, and why?</p>
<p>Thanks &#151; Ray DiTutto</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> My reading of the same paragraph (8.3.5/3) suggests that case 2 is okay while case 1 is not. From that paragraph:</p>

<BLOCKQUOTE>
<p>All declarations for a function with a given parameter list shall agree exactly both in the type of the value returned and in the number and type of parameters...</p>
<p>The type of a function is determined using the following rules...</p>
<p>After producing the list of parameter types, several transformations take place upon these types to determine the function type.</p>
<p>Any <I>cv-qualifier</I> modifying a parameter type is deleted [<I>Example:</I> the type <B>void(*)(const int)</B> becomes <B>void(*)(int)</B> &#151;end example] Such <I>cv-qualifiers</I> affect only the definition of the parameter within the body of the function; they do not affect the function type.</p>
</BLOCKQUOTE>

<p>In case 1, the function <B>f1</B> has two declarations:</p>

<pre>
void f1(int x)

void f1(const int x)
</pre>

<p>According to 8.5.3/3, the compiler ignores the <B>const</B> when determining <B>f1</B>&#146;s type in each declaration. The compiler thus interprets the two declarations as</p>

<pre>
void f1(int x)

void f1(/*const*/ int x)
</pre>

<p>The two <B>f1</B> declarations do not represent <B>f1</B> overloads, but rather multiply declare the same <B>f1</B> function.</p>
<p>As the subclause tells us, the <B>const</B> does affect the <B>x</B> parameter&#146;s definition within the body of <B>f1</B>. Because <B>x</B> is const in that body, the statement <B>x = 1</B> is in error.</p>
<p>The same analysis applies to case 2. There, the compiler considers <B>f2</B> to be multiply declared as</p>

<pre>
void f2(/*const*/ int x)

void f2(int x)
</pre>

<p>In the context of <B>f2</B>&#146;s body, the parameter <B>x</B> is (non-const) <B>int</B>, and the assignment <B>x = 2</B> is allowed.</p>
<p>In general, a parameter serves two distinct roles, depending on context:</p>

<UL><LI>   Within a function <I>declarator</I>, the parameter contributes to the function&#146;s signature and declared type according to 8.3.5/3. In this context, the parameter&#146;s top-level <B>const</B> and <B>volatile</B> qualifiers are ignored.</LI>
<LI>   Within a function <I>body</I> &#151; which grammatically is a compound statement &#151; the parameter is a local-scope object declared before the body&#146;s opening curly brace (<B>{</B>). This parameter object happens to initialize from a function-call argument; otherwise, it behaves like any other local-scope object. In particular, it retains the significance of top-level <B>const</B> and <B>volatile</B> qualifications.</LI></UL>

<p>Although they don&#146;t work in C++, I think the old K&amp;R-style function definitions actually make the distinction more clear. In the C function definition</p>

<pre>
int f(a, b, c)
    int a;
    int b;
    int c;
    {
    /* ... */
    }
</pre>

<p>the parameter names appear twice, both as part of the function&#146;s declarator, and as a list of local-scope objects declared just before the opening curly brace. This presentation reinforces the parameters&#146; dual purpose <a href="#1">[1]</a>.</p>

<H3><FONT COLOR="#000080">Mon Dieu! An Actual C Question</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby,</p>
<p>My question is about Standard C, not C++.</p>
<p>Consider this code:</p>

<pre>
void f1(void *p);

void f2(volatile void *p)
    {
    f1(p);
    }
</pre>

<p>It compiles just fine with version 4.2 of my embedded compiler, Diab Data C. However, the newer version (4.3) issues the following error message:</p>

<pre>
'f1' : cannot convert parameter 1
from 'volatile void *' to 'void *'
</pre>

<p>I tried the code on two PC compilers (Visual C 5 and Borland C 5.5). Both produce warnings, but complete the compilation.</p>
<p>What behavior is &#147;right&#148; from the C Standard point of view?</p>
<p>Diab&#146;s technical support person suggested I use the option flag <B>-Xmismatch-warning</B> to avoid my problem. But this option essentially eliminates type checking on pointers. With that flag on, the compiler allows the following code without errors:</p>

<pre>
void f3(short *ps)
    {
    long *pl = ps;
    }

typedef struct
    {
    int m1;
    } st1;

typedef struct
    {
    int m2;
    } st2;

void f4(st1 *p1)
    {
    st2 *p2 = p1;
    }

void f5(long l)
    {
    long *pl = l;
    }
</pre>

<p>I was amazed to find out that VC5 also compiles this code. BC5.5 compiles <B>f3</B> and <B>f4</B>, but produces on error on <B>f5</B>.</p>
<p>For years I&#146;ve thought that Standard C only allows three types of implicit pointer conversions (now I put this complex const/volatile issue aside):</p>

<UL><LI>   <B>void *</B> to <B>anytype *</B> </LI>
<LI>   <B>anytype *</B> to <B>void *</B> </LI>
<LI>   <B>0</B> to <B>anytype *</B></LI></UL>

<p>Was I wrong ?</p>
<p>I know, there are two questions instead of one, but I found these questions closely related.</p>
<p>Regards &#151; Michael Shatz</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Your first code piece should not compile, as it involves an implicit conversion from <B>void volatile *</B> to <B>void *</B>. The conversion requires a reduction in qualification of the pointed-to type, which the C standard will not permit without a cast <a href="#2">[2]</a>. If you have trouble understanding this restriction, mentally replace the qualifier <B>volatile</B> with the qualifier <B>const</B>.</p>
<p>Your second code piece &#151; the one with <B>f</B>&#146;s 3 through 5 &#151; also should not compile. In particular, you ought to see diagnostics for these three lines:</p>

<UL><LI>   <B>long *pl = ps;</B> </LI>
<LI>   <B>st2 *p2 = p1;</B> </LI>
<LI>   <B>long *pl = l;</B></LI></UL>

<p>which involve three different non-standard implicit conversions:</p>

<UL><LI>   between pointers to different integer types </LI>
<LI>   between pointers to different aggregate types </LI>
<LI>   from an integer type to a pointer type</LI></UL>

<p>On your final question: the C standard allows several kinds of pointer conversions <a href="#3">[3]</a>. Of those, the allowed implicit conversions are</p>

<UL><LI>   from <B>T *</B> to qualified <B>T *</B> </LI>
<LI>   from unqualified <B>T *</B> to <B>void *</B> </LI>
<LI>   from <B>void *</B> to <B>T *</B> </LI>
<LI>   from <B>0</B> to <B>T *</B></LI></UL>

<p>where <B>T</B> is an incomplete or object type. Excepting the bits about qualification, this list matches your years-long belief.</p>

<H3><FONT COLOR="#000080">Headbanger&#146;s Ball</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I&#146;ve been trying to find a way to make data members read/write within member functions, but read-only within non-member and friend functions, without having to write get functions &#151; so far to no avail.</p>
<p>First I naively thought of a template class having a public conversion operator that returns <B>const T&amp;</B>; but this requires that I first declare a const ref to the class, then initialize it by the conversion function (which then becomes redundant). This method doesn&#146;t make private members visible anyway.</p>
<p>I next tried declaring two structs:</p>

<pre>
struct A
    {
    const int i;
    const float f;
    };

struct B
    {
    int i;
    float f;
    };

union C
    {
public:
    A a;
private:
    B b;
    };
</pre>

<p>But this forces me to write <B>a.i</B> or <B>b.i</B> when I want the public const or private non-const versions of the member. Furthermore, according to my compiler, unions can&#146;t be inherited.</p>
<p>I also tried having a class with a public, nameless union; but again, that requires extra typing to select the union member.</p>
<p>Not giving up altogether, I tried to make a macro that would produce easy-to-type access functions for me:</p>

<pre>
#define member(type, name)\
    public:\
    const type &amp;name() const\
        {\
        return name;\
        }\
    private:\
        type name
</pre>

<p>such that typing</p>

<pre>
member(int, i);
member(float, f);
</pre>

<p>would produce</p>

<pre>
public:
    const int &amp;i() const
        {
        return i;
        }
private:
    int i;
public:
    const float &amp;f() const
        {
        return f;
        }
private:
    float f;
</pre>

<p>Unfortunately one can&#146;t use the same name for a variable and a function, so I&#146;d have to make the macro name the functions <B>_i</B> and <B>_f</B>. This is much less satisfying than the original goal I&#146;d set out to achieve.</p>
<p>Finally, I tried a macro that would create nameless unions within my class, such as,</p>

<pre>
union
    {
public:
    const int _i;
private:
    int i;
    };
</pre>

<p>but according to my compiler, nameless unions cannot have private members.</p>
<p>I&#146;m not only frustrated by now, but even resentful; I can&#146;t, for the life of me, justify the invisibility of private and protected data members mandated by the language.</p>
<p>In what way would read-only access by default be a violation of encapsulation? Quite to the contrary &#151; it seems to me that invisibility causes the biggest violation of encapsulation of all: programmers making data members public to avoid having to write get functions! I often have to work with other people&#146;s code, and much of my time is spent writing the get functions they couldn&#146;t bother writing themselves.</p>
<p>Any help would be enormously appreciated.</p>
<p>Thanks in advance &#151; Dan Watkins</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> While I would normally whittle down such a long question, I want to show others how pursuit of a seemingly simple goal can lead to so many dead ends &#151; and how this language can drive anyone to the brink of despair.</p>
<p>If I&#146;m reading your intent correctly, you&#146;re looking to allow</p>

<pre>
class X
    {
public:
    void f()
        {
        i = 6; // OK
        }
    int i;
    };

int main()
    {
    X x;
    x.i = 6; // error
    }
</pre>

<p>In effect, you want <B>i</B> to behave as non-const within <B>X</B>, and const outside <B>X</B>.</p>
<p>I&#146;m sorry to say that C++ offers no direct way to get what you want. About the closest I can easily come is</p>

<pre>
class X
    {
public:
    X() : i_(0), i(i_)
        {
        }
    void f()
        {
        i;      // OK
        i = 6;  // error
        i_ = 6; // OK
        }
    int const &amp;i;
private:
    int i_;
    };

int main()
    {
    X x;
    x.i;      // OK
    x.i = 6;  // error
    x.i_ = 6; // error
    }
</pre>

<p>Compared to your ideal, this method suffers one deficiency: the member function <B>f</B> must reference the data member as <B>i_</B> instead of <B>i</B> for writeable access. Otherwise, this solution has the notational convenience and selective protection you want.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>Erratum the first: my October 2000 column item Ambiguity Rides Again contains a bug. The statement</p>

<pre>
B2 b2 = val;
</pre>

<p>won&#146;t compile with the definition of <B>B</B> provided. That statement is a remnant from an earlier code version I was testing, and shouldn&#146;t be there.</p>
<p>Erratum the second: several Diligent Readers question my solution for the December 2000 item Nested Functions. In that item, I explore several possible answers to Mike Retondo&#146;s questions about functors. One of those answers amounts to</p>

<pre>
typedef void (*callback)();

void test(callback f)
    {
    f();
    }

struct X
    {
    operator callback();
    };

int main()
    {
    X x;
    test(x);
    return 0;
    }
</pre>

<p><B>x</B> converts itself to <B>test</B>&#146;s parameter type (<B>callback</B>)) through a conversion operator (<B>X::operator callback</B>). In effect, the object <B>x</B> acts as if it were really a function taking no parameters and returning <B>void</B>.</p>
<p>I never gave the implementation for the conversion operator. In that vacuum, some readers assumed that I&#146;d mimic Mike&#146;s original solution via</p>

<pre>
struct X
    {
    operator callback()
        {
        printf("test");
        }
    };
</pre>

<p>This isn&#146;t the solution I had in mind, for two reasons:</p>

<UL><LI>   It engenders undefined behavior: because the operator isn&#146;t actually returning anything, the eventual call <B>f()</B> blasts into the Delta Quadrant. </LI>
<LI>   The <B>printf</B> call occurs during the conversion to the function pointer, not during the call through the function pointer. Contrast this to Mike&#146;s original, which calls <B>printf</B> during the function-like call through <B>operator()</B>.</LI></UL>

<p>Other readers thought I really meant</p>

<pre>
struct X
    {
    operator callback()
        {
        printf("test");
        return operator callback;
        }
    };
</pre>

<p>which won&#146;t compile, since a function can&#146;t return itself <a href="#4">[4]</a>.</p>
<p>What I actually had in mind is</p>

<pre>
struct X
    {
    operator callback()
        {
        return f;
        }
private:
    static void f()
        {
        printf("test");
        }
    };
</pre>

<p>which returns a proper function pointer, and traces the call through that pointer. (A couple of readers recommend essentially this same implementation.)</p>
<p>Such a solution allows the same behavior for all <B>X</B> objects. A more sophisticated solution allows distinct per-object behavior:</p>

<pre>
struct X
    {
    operator callback()
        {
        instance_ = this;
        return f;
        }
private:
    static void f()
        {
        printf("%p", (void *) instance_);
        }
    static X const *instance_;
    };
</pre>

<p>at the cost of a static data member and a restriction on <B>X</B> object usage: because the same <B>instance_</B> is shared by all <B>X</B> objects, only one <B>X</B>-to-<B>callback</B> conversion can be in play at a time.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Not that I&#146;m advocating this style, mind you. For pedagogical purposes, I think it has some merit; but overall, I recommend you favor prototype-style function declarators instead. </p>
<p><a name="2"></a>[2]  C99 standard subclause 6.5.4/3. </p>
<p><a name="3"></a>[3]  The whole retinue appears in subclause 6.3.2.3 of the C99 Standard. </p>
<p><a name="4"></a>[4]  I explore the problem of self-returning functions in my July 1999 column item Chicken and Egg and October 1999 followup Counting Chickens.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original &quot;associate&quot; of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
