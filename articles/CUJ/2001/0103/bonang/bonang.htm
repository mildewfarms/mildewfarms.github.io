<HTML>   
     <HEAD>
<TITLE>March 2001/Navigating Linux Source Code</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Linux</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Navigating Linux Source Code</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">James Bonang</FONT></H3>

<BLOCKQUOTE>
<p>With legacy code or large projects, navigation is a serious concern. Here are some tools that can help you find your way.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Like many programmers, I&#146;ve had to maintain and enhance very large software products not of my own creation. (In my case, each of these products had at least 1.5 million lines of code.) Frequently, the code was poorly documented and consisted of numerous interrelated programs whose source was distributed throughout a multitude of directories. As is often the case with large, complex, multi-platform software systems, using an IDE (Integrated Development Environment), with its attendant conveniences, is not a realistic option. Moreover, familiarizing yourself with such code bases is a daunting task in which even finding a function, type, or macro definition can be quite time consuming. Fortunately, there are several open source tools available, all derivatives of the Unix ctags program, to assist you in understanding and navigating large software systems. These tools include the original Unix ctags program, the ID Utilities, and the GLOBAL source code browser.</p>
<p>All of the tools are based on the concept of a tag. A tag is an index entry within a &#147;tags file&#148; of a programming language identifier. The tags indicate the locations (in terms of file/line number pairs) where the identifier is defined and referenced. Programming language identifiers include functions, structure and union names, type names, and variable names (essentially, anything that is entered into a compiler&#146;s symbol table), as well as macros. As an example of how tags are used, the ctags program (which also parses source code files and generates a file of tags) allows these identifiers to be quickly located while you are editing source code within a text editor. For instance, if you&#146;re coding in the vi text editor and you need to see the prototype for a particular C function, the tags mechanism can immediately take you to it with a Ctrl-t keystroke.</p>
<p>While the GLOBAL, ID Utilities, and ctags programs are all built upon a tags core and are all designed to help you rapidly navigate source code, the circumstances under which each tool is best applied differ significantly. Source code browsers such as GLOBAL, which map your source code to HTML, are most useful for an initial examination of existing code, whereas ctags and the ID Utilities are essential for your day-to-day programming work. I&#146;ll begin by examining the Unix ctags program.</p>

<H3><FONT COLOR="#000080">Using Tags</FONT></H3>

<p>The Unix <B>ctags</B> command creates a tags file, which contains indexes of programming language identifiers. These indexes specify the file/line number pairs that indicate where the identifiers are defined or referenced. The tags file is used by the <B>:tags</B> vi editor commands to position the editor&#146;s cursor on the object&#146;s definition within the appropriate file. The <B>ctags</B> command may be used either at the colon prompt within vi or outside the editor from the shell command line. (Note that tags may be used within EMACS and a variety of other popular editors for Linux, Unix, and Windows. I use vi as a convenient and ubiquitous example.)</p>

<H4><FONT COLOR="#000080">Creating the Tags File</FONT></H4>

<p>When executing <B>ctags</B> from a Unix shell (or MS-DOS) command line, the current working directory should be a source code directory. For example, to create a tags file for C source and header files on a Unix system, execute the following command: <B>ctags -t *.c *.h</B>. Many versions of the <B>ctags</B> command support the <B>-t</B> option, which creates tag file entries for user-defined types. You should always use this option when it is available.</p>
<p>The <B>ctags</B> command universally supports C files (and usually Pascal and Fortran as well), but, with rare exceptions, C++ support is not available. Fortunately, there are extended versions of ctags, notably Darren Hiebert&#146;s Exuberant ctags, that support C++, not to mention C, Fortran, Java, and even Eiffel. For more information, please refer to the Exuberant ctags home page: <B>http://home.hiwaay.net/~darren/ctags/</B>.</p>

<H4><FONT COLOR="#000080">Using Tags within the vi Editor</FONT></H4>

<p>From within the vi editor, the command <B>:tags</B> identifier will position the editor&#146;s cursor on the definition of the identifier, which may be either a function name or a user-defined type. A more convenient method is to use the Ctrl-t key sequence from within the vi editor&#146;s command mode. Position the cursor on the first character of the identifier while in command mode (not insert mode) and press Ctrl-t.</p>
<p>Returning to your original location within the editor is just as important as moving to the definition of the identifier. The <B>:tags</B> command (or Ctrl-t key) may transition the editor to an entirely new file, or it may reposition the cursor within the same file. To return to the original file you were editing, use the <B>:e #</B> command. To return to your original position within the same file, type <B>:''</B> (a colon followed by two single quotes).</p>
<p>As with any Unix command, the <B>ctags</B> command may be executed from within vi while in command mode by preceding the command with an exclamation mark, as in: <B>:!ctags *.c</B>. The exclamation mark tells vi to create a shell and treat the command that follows as a shell command. (Actually, the colon invokes ex, the editor upon which vi is built).</p>
<p>These simple vi commands can save you a great deal of time and trouble traversing your source code. Fortunately, if you need to maintain legacy code on even the oldest of Unix workstations, ctags will most likely be present (or you can obtain a version of ctags for that workstation). I&#146;ve found it on every Unix platform I&#146;ve used. Considering its ubiquity, utility, and longevity, I&#146;m surprised at how few programmers use ctags or are even aware of it. While ctags is an excellent tool and well worth the brief time needed to learn it, the more recent ID Utilities, which may be thought of as an augmented ctags, offer you even more functionality and convenience.</p>

<H3><FONT COLOR="#000080">Using the ID Utilities</FONT></H3>

<p>The ID utilities (ID stands for &#147;Identifier&#148;) are a set of text-search programs that query an ID database for &#147;tokens&#148; such as C identifiers (variables, functions, user-defined types), strings, and constant literals. The ID database is a binary file that contains a list of tokens along with a list of files (and line numbers within those files) in which the tokens appear. The ID database is essentially a tags file; it implements a sparse matrix that associates file/line numbers with tokens. The ID utilities are invaluable when you&#146;re searching your code base for type definitions, string literals, or references to variables and functions, particularly when the source files span many directories. The search times are remarkably fast as well. (The sizes of the source code bases I&#146;ve dealt with have precluded using the Unix <B>find</B> and <B>grep</B> commands in combination; this approach is unacceptably slow.)</p>

<H4><FONT COLOR="#000080">The ID Commands and Aliases</FONT></H4>

<p>The ID Utilities include the following commands:</p>
<p><B>lid</B> &#151; queries the ID database for tokens and then reports matching filenames with matching lines.</p>
<p><B>fid</B> &#151; lists all tokens recorded in the database for given files or tokens common to two files.</p>
<p><B>fnid</B> &#151; matches the filenames in the database, rather than the tokens.</p>
<p>The following very useful aliases are also provided:</p>
<p><B>gid</B> &#151; an alias for <B>'lid -R grep'</B>, lists all lines containing the requested pattern.</p>
<p><B>aid</B> &#151; an alias for <B>'lid -ils'</B>, treats the requested pattern as a case-insensitive literal substring.</p>
<p><B>eid</B> &#151; an alias for <B>'lid -R edit'</B>, invokes an editor on all files containing the requested pattern and, if possible, initiates a text search for that pattern.</p>
<p>The three commands I&#146;ve found to be indispensable are <B>gid</B>, <B>lid</B>, and <B>fnid</B>.</p>

<H4><FONT COLOR="#000080">The gid Alias</FONT></H4>

<p>The most useful of the ID Utility commands is <B>gid</B>. Let&#146;s say that you&#146;re interested in finding all uses of the <B>INXl_pg_typ</B> user-defined type. Executing the command <B>gid INXl_pg_typ</B> will produce a list of files (with line numbers) and the text of the source line where <B>INXl_pg_typ</B> appears.</p>
<p>A sample output line is show below:</p>

<pre>
/rcs_source/INXl_tabmaint.c:297: INXl_pg_typ *gp;
</pre>

<H4><FONT COLOR="#000080">The lid Command</FONT></H4>

<p>The most versatile of the ID Utility commands is <B>lid</B>. The <B>lid</B> command&#146;s many options (from which the <B>gid</B> alias is derived) will be displayed when the <B>--help</B> argument is used (note that two dashes are used). (The <B>--help</B> option may be used with the other ID Utility commands as well.)</p>
<p>An extremely useful option to <B>lid</B> is <B>-l</B>, which interprets a specified &#147;pattern&#148; as a literal string. Suppose you want to find all uses of the string <B>"doc"</B>. The <B>lid -l doc</B> command will produce output similar to the following:</p>

<pre>
doc/rcs_source/rdb/inc/RDB.h
/rcs_source/rdb/inc/retrieve.h
</pre>

<p>The specified string is followed by several entries indicating the files where it occurs.</p>
<p>Other options to <B>lid</B> allow the use of regular expressions, the matching of decimal or hex numbers, and finding identifiers based on the frequency of their use.</p>

<H4><FONT COLOR="#000080">The fnid Command</FONT></H4>

<p>The <B>fnid</B> command locates the subdirectory where a source file can be found. For example, the command <B>fnid docimport.c</B> returns <B>/rcs_source/os/docimport/src/docimport.c</B> indicating that the file <B>docimport.c</B> is located in the <B>os</B> subsystem in its own subdirectory of my source code tree. This command is extremely fast. Using the <B>find</B> command and piping it to <B>grep</B> to accomplish this is unacceptably slow for large code bases, but <B>fnid</B> does the job quite handily.</p>

<H4><FONT COLOR="#000080">Setting up the ID Utilities</FONT></H4>

<p>Installing the ID Utilities on Linux and Unix platforms is accomplished by running a configuration script and then executing the command <B>make install</B>, a procedure common to many shareware programs. The ID database is built by invoking the remarkably fast <B>mkid</B> command. The <B>mkid</B> command should be scheduled as a <B>cron</B> job to regularly update the ID database during off periods. (The ID Utilities have been ported to Windows NT, but they are not yet readily available at the time of writing.)</p>
<p>The ID Utilities include scanners for C and C++ and provide support for <B>lex</B> and <B>yacc</B>. A scanner for assembly language files is also provided. You may also define your own language scanners. The rules for mapping scanners to filename extensions are defined in the file <B>id-lang.map</B>, allowing the appropriate scanner to be invoked for files with non-standard extensions. (All of the legacy systems I&#146;ve worked on have used non-standard extensions for header files devoted to specific purposes. For example, <B>.defs</B> has frequently been used to denote header files containing type and macro definitions.)</p>
<p>The ID Utilities are an indispensable part of my programming toolkit. The speed and versatility of the ID Utility programs make them ideal for large legacy systems, where they supplement (and largely supplant) ctags and outperform the <B>grep</B> and <B>find</B> programs. I&#146;ve found using the ID Utilities (and ctags) much more convenient than the pull-down menus of an IDE to access function references or definitions. The ID Utilities are available from <B>www.gnu.org</B>.</p>
<p>Familiarizing yourself with the source code of a large legacy system can be overwhelming. Both ctags and the ID Utilities can assist you in doing this, but more suitable tags-based tools are available. Source code browsers that map your code to HTML using an underlying tags mechanism are ideal for this task.</p>

<H3><FONT COLOR="#000080">Source Code Browsers</FONT></H3>

<p>There are many source code browsers available that convert source code to HTML and use a tags-like system to create hyperlinks between the use and definition of identifiers. Within the generated HTML, a declaration involving a user-defined type will be linked to its definition in, for example, a header file. These tools are extremely valuable when you are first familiarizing yourself with a large code base. They usually display the source code in a manner similar to that of a context sensitive editor, with keywords highlighted in bold, comments and strings displayed in different colors, and so on.</p>

<H3><FONT COLOR="#000080">GLOBAL</FONT></H3>

<p>An excellent example of a tags-based source code browser is GLOBAL. GLOBAL has been used to generate source code in HTML form (suitable for standard web browsers) for both the Linux and FreeBSD operating systems&#146; C sources. <a href="fig1.htm">Figure 1</a> shows the main index page that GLOBAL created for Linux version 2.0.35, displayed in the Netscape browser. It indicates the files that contain <B>main</B> functions (and thus, the files that are top-level files for various executable programs). It provides a complete function index and an index of the files that comprise each subsystem.</p>
<p><a href="fig2.htm">Figure 2</a> shows the source code for the Linux kernel&#146;s <B>do_fork</B> function. Note that C keywords are shown in bold, comments in green, and function definitions are hyperlinked to a list of locations (filename/line number) from where they are called. Function calls are hyperlinked to their definitions. User-defined types are hyperlinked in a similar manner.</p>
<p>A navigation bar is embedded into a C comment at the beginning of each function. It allows you to go forward or back one function in the file, go to the top or bottom of the file, access the function or file index page, or go to the navigation help page. The navigation bar is show below.</p>

<pre>
/* 
[&lt;][&gt;][^][v][top][bottom][index][help]
*/
</pre>

<p>GLOBAL 3.52 has had difficulty with some of the macros used in my source code, in particular any that expanded to white space, and it has generated a few incorrect function references and hyperlinks. This is a minor problem and doesn&#146;t compromise GLOBAL&#146;s utility.</p>

<H4><FONT COLOR="#000080">Generating an HTML Version of a Source Directory</FONT></H4>

<p>Once the GLOBAL executables and libraries are built, you&#146;re ready to generate an HTML version of the source code. There are two GLOBAL commands used to generate the HTML: <B>gtags</B> and <B>htags</B>. <B>gtags</B> is very similar to the <B>ctags</B> command discussed above. It generates the tag database (<B>GTAGS</B>, <B>GRTAGS</B>, and <B>GSYMS</B> files), which is then used by the <B>htags</B> HTML generator command. The commands are as follows:</p>

<pre>
&gt; gtags # make the tag 
     database(GTAGS,GRTAGS,GSYMS)
&gt; htags # make the hypertext(HTML/)
</pre>

<p><B>htags</B> creates a subdirectory called <B>html</B> in the directory from which it is invoked. You can then browse the source code by starting at <B>htm/index.html</B>. Assume that the amount of disk space required for the HTML is about five times that of the original source code. This being the case, you may want to generate the HTML in another directory. The <B>-d &lt;tagdir&gt;</B> option may be used to specify the directory where the tag database resides. If a directory pathname is specified without an argument, it is taken to be the target directory in which the html directory will be placed. For example:</p>

<pre>
&gt; cd/rcs_source/is/src
&gt; gtags
&gt; htags /home/jbonang/INX
</pre>

<p>In this case, the HTML for the source code in directory <B>/rcs_source/is/src</B> will be generated in directory <B>/home/jbonang/INX</B>. Note that <B>gtags</B> is an executable (a file named <B>gtags.exe</B> on Win32 platforms) and that <B>htags</B> is a Perl script (a file named <B>htags.pl</B>).</p>
<p>Once the HTML is generated, you can begin browsing your source code. The initial page will display the main programs of your software system. I usually begin studying a new software system by first getting a quick overview of the executable programs. After ranking them in order of importance, I use GLOBAL to explore the major functions and data types of each.</p>
<p>Global is available for Linux and most Unix platforms, as well as Win32. It requires Perl and, for Win32 systems, the following Unix command line utility programs: <B>sed.exe</B>, <B>sort.exe</B>, and <B>uniq.exe</B>. For more information on GLOBAL, please refer to the following website: <B>http://www.tamacom.com/Unix/index.html#global</B>.</p>

<H3><FONT COLOR="#000080">On the Horizon</FONT></H3>

<p>GLOBAL is an excellent HTML source-code browser generator and is the precursor of yet more powerful programming environments known as Hypercode environments. A Hypercode environment will allow you to edit source code represented as HTML within a browser and much more. You will be able to create links from source code to on-line formal documentation; to other source code files; to technical reports that, for instance, describe an algorithm you used; or even to email, chat transcripts, and videos. (Microsoft&#146;s yet to be released C# programming language uses &#147;attributes&#148; that allow hyperlinks to external documentation to be specified within source code files. I anticipate the open source community will introduce similar functionality into established languages and development tools in the near future.) For more information on Hypercode environments, visit the MIT Artificial Intelligence Lab website: <B>http://www.ai.mit.edu/projects/transit/rc-demo/demo.html</B>.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>With the <B>ctags</B> command and the ID Utilities, you can find function, macro, typedef, and variable definitions, as well as the location of string literals, quickly and conveniently from within your favorite text editor. You can also find where particular source files reside within a complex directory structure. Source code browsers, such as GLOBAL, convert your source code to HTML, allowing you to conveniently peruse it in a standard browser and understand it rapidly. Taking advantage of these &#147;tag-based&#148; tools will ease your software maintenance chores and expedite your new development projects. You can also look forward to the introduction of Hypercode environments that will make developing and supporting large software products significantly easier.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Linda Lamb and Arnold Robbins. <I>Learning the vi Editor</I>, 6th Edition (O&#146;Reilly &amp; Associates, Inc., 1998).</p>
<p><a name="2"></a>[2]  Darren Hiebert&#146;s Exuberant ctags home page: <B>http://home.hiwaay.net/~darren/ctags/</B>.</p>
<p><a name="3"></a>[3]  The GLOBAL home page: <B>http://www.tamacom.com/unix/index.html#global</B>.</p>
<p><a name="4"></a>[4]  The GNU home page (where the ID Utilities may be obtained): <B>http://www.gnu.org</B>.</p>
<p><a name="5"></a>[5]  The MIT Artificial Intelligence Lab&#146;s Hypercode page: <B>http://www.ai.mit.edu/projects/transit/rc-demo/demo.html</B>.</p>

<p><i><b>James Bonang</b> is a Principal Engineer at FileNET Inc. and may be reached at <b>jbonang@filenet.com</b>.</i></p>

</blockquote></body></html>
