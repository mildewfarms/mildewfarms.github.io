<HTML>   
     <HEAD>
<TITLE>March 2001/Here Be Dragons</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Here Be Dragons</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Alan Griffiths</FONT></H3>

<BLOCKQUOTE>
<p>If learning exception safety may be likened to a journey, then Alan Griffiths is an excellent tour guide. He shows us several alternate routes, and he always keeps the trip interesting.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<BLOCKQUOTE>
<p>&#147;The use of animals in maps was commonplace from the earliest times. Man&#146;s deepest fears and superstitions concerning wide expanses of uncharted seas and vast tracts of &#146;terra incognita&#146; were reflected in the monstrous animals that have appeared on maps ever since the Mappa Mundi.&#148; &#151; Roderick Barron in <I>Decorative Maps</I></p>
</BLOCKQUOTE>
<p>For many developers, C++ exception handling is like this &#151; a Dark Continent with poor maps and rumors of ferocious beasts. It needn&#146;t be this way; if you&#146;ll come with me, I&#146;ll be your guide to the landmarks and fauna of this region.</p>
<p>In order to discuss exception safety, we need to cover a lot of territory. The next section identifies the &#147;exception safe&#148; mountains in the distance. We&#146;ll be using them as landmarks on our travels &#151; if you don&#146;t take the time to get your bearings now, you&#146;ll end up in the wastelands.</p>
<p>Once you&#146;ve learned the landmarks, I&#146;ll show you a well-trodden path that leads straight towards the highest peak and straight through a tar pit. From experience, I&#146;ve concluded that everyone has to go down this way once, so I&#146;ll go with you to make sure you come back. Not everyone comes back; some give up on the journey, and others press on deeper and deeper into the tar pit until they sink from sight.</p>
<p>During our journey, I&#146;ll tell you the history of how the experts searched for a long time before they discovered a route that bypasses that tar pit and other obstacles. Most maps don&#146;t show this route yet, but I&#146;ll show you the signs to look out for. I&#146;ll also show you that the beasts are friendly and how to enlist their aid.</p>
<p>Now look into the distance and you&#146;ll see two peaks &#151; these are heights of exception safety and are our final destination.</p>

<H3><FONT COLOR="#000080">The Mountains (Landmarks of Exception Safety)</FONT></H3>

<p>The difficulty in writing exception-safe code isn&#146;t in writing the code that throws an exception, or in writing the code that catches the exception to handle it. There are many sources that cover these basics. I&#146;m going to address the greater challenge of writing the code that lies in between the two.</p>
<p>Imagine for a moment the call stack of a running program: function <B>a</B> has called function <B>b</B>, <B>b</B> has called <B>c</B>, and so on, until we reach <B>x</B>. Function <B>x</B> encounters a problem and throws an exception. This exception causes the stack to unwind, deleting automatic variables along the way, until the exception is caught and dealt with by <B>a</B>.</p>
<p>I&#146;m not going to spend any time on how to write functions <B>a</B> or <B>x</B>. I&#146;m sure that the author of <B>x</B> has a perfectly good reason for throwing an exception (running out of memory, disc storage, or whatever) and that the author of <B>a</B> knows just what to do about it (display: &#147;Sorry, please upgrade your computer and try again!&#148;).</p>
<p>The difficult problem lies in writing all the intervening functions in a way that ensures that something sensible happens as a result of this process. If we can achieve this, we have &#147;exception-safe&#148; code. Of course, that begs the question, &#147;what is something sensible?&#148; To answer this, let us consider a typical function <B>f</B> in the middle of the call stack. How should <B>f</B> behave?</p>
<p>Well, if <B>f</B> were to deal with the exception, it might be reasonable for it to complete its task by another method (a different algorithm, or returning a &#147;failed&#148; status code). However, we are assuming the exception won&#146;t be fully handled until we reach <B>a</B>. (It may be caught and rethrown &#151; possibly after being &#147;translated&#148; to a different exception.) Since <B>f</B> doesn&#146;t run to completion, the least we might reasonably expect is the <I>basic exception safety guarantee</I>:</p>

<OL><LI><B>f</B> doesn&#146;t complete its task; but</LI>
<LI>if <B>f</B> has opened a file, acquired a lock on a mutex, or otherwise &#147;allocated a resource,&#148; then the resource should not leak. (The file must be closed, the mutex must be unlocked, etc.); and</LI>
<LI>if <B>f</B> changes a data structure, then that structure should remain useable &#151; e.g., no dangling pointers.</LI></OL>

<p>These conditions &#151; the basic exception safety guarantee &#151; identify the first and smaller of our landmark mountains. Take a good look at it so that you&#146;ll recognize it later.</p>
<p>The basic exception safety guarantee ensures that if <B>f</B> updates the system state, then the state must remain usable. Note that usable isn&#146;t quite the same as correct. For example, if <B>f</B> were the assignment operator of an address class, part of the address may have been changed, leaving a usable address object containing an incorrect address.</p>
<p>If you are new to exceptions, the basic exception safety guarantee may seem daunting. But not only will we reach this in our travels, we will be reaching an even higher peak called the <I>strong exception safety guarantee</I>. The strong exception safety guarantee places a more demanding constraint on <B>f</B> (one that implies all the others):</p>

<UL>4. If <B>f</B> terminates by propagating an exception, then it has made no change to the state of the program.</UL>

<p>Note that it is impossible to implement <B>f</B> to deliver either the basic or strong exception safety guarantees if the behavior in the presence of exceptions of the functions it calls isn&#146;t known, mainly because of possible side effects. This is particularly relevant when the client of <B>f</B> (that is <B>e</B>) supplies the functions to be called either as callbacks, as implementations of virtual member functions, or via template parameters. In such cases, the only recourse is to document the constraints on them &#151; as, for example, the standard library does for types supplied as template parameters to the containers.</p>
<p>If we assume a design with fully encapsulated data, then each function need only be held directly responsible for aspects of the object of which it is a member. For the rest, the code in each function must rely on the functions it calls to behave as documented. (We have to rely on documentation in this case, since in C++ there is no way to express these constraints in the code.)</p>
<p>As we proceed, we&#146;ll find frequent outcrops of the rock that supports our mountains, which is named after the area in which it is found and is called the <I>no-throw exception safety guarantee</I> &#151; as the name suggests, this implies that the corresponding function will never propagate an exception. Clearly operations on the fundamental types provide this guarantee, as will any sequence of no-throw operations. If it were not for the firm footing that these outcrops of the no-throw exception safety guarantee provide, we would have great difficulty ascending the heights.</p>
<p>Before we continue, we&#146;ll rest here a while, and I&#146;ll tell you a little of the history of this landscape. Remember our landmarks and the rock that comes from the area &#151; we&#146;ll soon be making use of them on our journey.</p>

<H3><FONT COLOR="#000080">A History of This Territory</FONT></H3>

<p>The C++ people first came to visit the land of exceptions around 1990 when Margaret Ellis and Bjarne Stroustrup published the <I>Annotated Reference Manual</I> <a href="#1">[1]</a>. Under the heading &#147;Experimental Features,&#148; this described the basic mechanisms of exceptions in the language. In this early bestiary, there is an early description of one of the friendly beasts we shall be meeting later on: it goes by the strange name of <I>Resource-Acquisition-Is-Initialization</I>.</p>
<p>By the time the ISO C++ Standards committee circulated <I>Committee Draft 1</I> in early 1995, C++ people were truly living in exception land. They hadn&#146;t really mapped the territory or produced an accurate bestiary, but they were committed to staying and it was expected that maps and bestiaries would soon be available.</p>
<p>By late 1996 when <I>Committee Draft 2</I> was circulated, however, the difficulties of this undertaking had become apparent. Around this time there came a number of reports from individual explorers. For example: Dave Abrahams identified the mountains we are using as landmarks in his paper &#147;Exception Safety in STLPort&#148; <a href="#2">[2]</a>, although the basic exception safety guarantee was originally dubbed the &#147;weak exception safety guarantee.&#148;</p>
<p>Some other studies of the region were produced by H. Muller <a href="#3">[3]</a> and Herb Sutter [<a href="#4">4</a>, <a href="#5">5</a>]. A little later came a sighting of another of the friendly beasts that we will meet soon, called <I>Acquisition-Before-Release</I>. This beast was first known by a subspecies named <I>Copy-Before-Release</I> and was identified by Kevlin Henney <a href="#6">[6]</a>; the subspecies is distinguished by the resources allocated being copies of dynamic objects.</p>
<p>By the time the <I>ISO C++ Language Standard</I> was published in 1998, the main tracks through the territory had been charted. In particular there are clauses in the Standard guaranteeing the behavior of the standard library functions in the presence of exceptions. Also, in a number of key places within the Standard, special mention is made of another friendly beast &#151; the <I>Swap</I> algorithm in its incarnation as the <B>std::swap</B> template function. We will be examining <I>Swap</I> after our detour through the tar pit.</p>
<p>Since the publication of the ISO Standard, more modern charts have been produced, such as by the author in an early version of this article <a href="#7">[7]</a>. Bjarne Stroustrup <a href="#8">[8]</a> and Dave Abrahams <a href="#9">[9]</a> follow a similar route in their examinations of exception safety in the standard library. Herb Sutter <a href="#10">[10]</a> takes a different route, but the same landmarks are clearly seen; this is also the first reference to the no-throw exception safety guarantee (although it is clear that earlier explorers knew and exploited it).</p>
<p>Okay, that&#146;s enough rest, we will now take the obvious path and head directly towards the strong exception safety guarantee.</p>

<H3><FONT COLOR="#000080">The Tar Pit</FONT></H3>
<p>It is time to consider an example function, and for this part of the journey, I have chosen the assignment operator for the following class:</p>

<pre>
class PartOne     { /* omitted */ };
class PartTwo     { /* omitted */ };

class Whole
{
public:
   // ...Lots omitted...

   Whole&amp; operator=(const Whole&amp; rhs);
    
private:
   PartOne*    p1;
   PartTwo*    p2;
};
</pre>

<p>Those of you that have lived in the old country will know the classical form for the assignment operator. It looks something like the following:</p>

<pre>
Whole&amp; 
Whole::operator=(const Whole&amp; rhs)
{
   if (&amp;rhs != this)
   {
      delete p1;
      delete p2;
      p1 = new PartOne(*rhs.p1);
      p2 = new PartTwo(*rhs.p2);
   }
   return *this;
}
</pre>

<p>If you&#146;ve not seen this before, don&#146;t worry because in the new land, it is not safe. Either of the <B>new</B> expressions could reasonably throw (since at the very least they attempt to allocate memory), and this would leave the <B>p1</B> and <B>p2</B> pointers dangling. In theory the <B>delete</B> expressions could also throw &#151; but in this article, we will assume that destructors and deallocation functions make the no-throw exception safety guarantee (see the sidebar, <a href="sidebar.htm">&#147;Destructors That Throw Exceptions&#148;</a>).</p>
<p>The obvious solution to the problems caused by an exception being propagated is to catch the exception and do some cleanup before throwing it again. After doing the obvious we have:</p>

<pre>
Whole&amp;
Whole::operator=(const Whole&amp; rhs)
{
   if (&amp;rhs != this)
   {
      PartOne* t1 = 
         new PartOne(*rhs.p1);

      try
      {
         PartTwo* t2 = 
            new PartTwo(*rhs.p2);

         delete p1;
         delete p2;

         p1 = t1;
         p2 = t2;
      }
      catch (...)
      {
         delete t1;
         throw;
      }
   }
   return *this;
}
</pre>

<p>Let&#146;s examine why this works:</p>

<OL><LI>An exception from the first <B>new</B> expression isn&#146;t a problem &#151; we haven&#146;t yet allocated any resources or modified anything, and the <B>new</B> expression provides the strong guarantee.</LI>
<LI>If an exception is propagated from the second <B>new</B> expression, we need to release <B>t1</B>. So we catch the exception, delete <B>t1</B>, and rethrow the exception to let it propagate.</LI>
<LI>Because we are assuming that destructors and <B>operator delete</B> don&#146;t throw, we can pass over the two <B>delete</B> expressions without incident. Similarly the two assignments are of built-in types (pointers), so they cannot throw an exception.</LI>
<LI>The state of <B>Whole</B> isn&#146;t altered until we&#146;ve done all the things that might throw an exception.</LI></OL>

<p>If you peer carefully through the undergrowth, you can see the first of the friendly beasts. This one is called <I>Acquisition-Before-Release.</I> It is recognized because the code is organized so that new resources (the new <B>PartOne</B> and <B>PartTwo</B>) are successfully acquired before the old ones are released.</p>
<p>We&#146;ve achieved the strong exception safety guarantee on our first attempt! But there is some black sticky stuff on our boots.</p>

<H3><FONT COLOR="#000080">Tar!</FONT></H3>
<p>There are problems lying just beneath the surface of this solution. I chose an example that would enable us to pass over the tar pit without sinking too deep. Despite this, we&#146;ve incurred costs: the line count has doubled, and it takes a lot more effort to understand the code well enough to decide that it works.</p>
<p>If you want to, you may take some time out to convince yourself of the existence of the tar pit &#151; I&#146;ll wait. Try the analogous example with three pointers to parts or replace the pointers with two objects contained by a value whose assignment operators may throw exceptions. With real life examples, things get very messy very quickly. (If you want a guide to the latter example &#151; the &#147;Cargill Widget Example&#148; &#151; I can recommend Herb Sutter <a href="#11">[11]</a>.)</p>
<p>Many people have reached this point and become discouraged. I agree with them: routinely writing code this way is not reasonable. Too much effort is expended on exception safety housekeeping chores like releasing resources. If you hear that &#147;writing exception safe code is hard&#148; or that &#147;all those <B>try...catch</B> blocks take up too much space,&#148; you are listening to someone who has discovered the tar pit.</p>
<p>I&#146;m now going to show you how exception handling allows you to use less code (not more), and I&#146;m not going to use a single <B>try...catch</B> block for the rest of the article! (In a real program, the exception must be caught somewhere &#151; like function <B>a</B> in the discussion above &#151; but most functions simply need to let the exceptions pass through <I>safely.</I>)</p>

<H3><FONT COLOR="#000080">The Royal Road</FONT></H3>
<p>There are three &#147;golden rules:&#148;</p>

<OL><LI>Destructors (and functions that release resources, such as memory) may not propagate exceptions.</LI>
<LI>Operations to swap the states of two instances of a class make the no-throw exception safety guarantee.</LI>
<LI>An object may own at most one resource.</LI></OL>

<p>We&#146;ve already met the first rule.</p>
<p>The second rule isn&#146;t obvious, but you&#146;ll see that it provides us a firm footing during the ascent. The idea is that exchanging the states of two objects that own resources is feasible without the need to allocate additional resources. Since nothing needs to be allocated, failure needn&#146;t be an option, and consequently there is no need to throw an exception. (It is worth mentioning that the no-throw guarantee is usually not feasible for assignment, which may have to allocate resources.)</p>
<p>If you look at the <I>ISO C++ Language Standard,</I> you&#146;ll find that <B>std::swap</B> provides the no-throw guarantee for fundamental types and for relevant types in the standard library. This is achieved by overloading <B>std::swap</B> &#151; there is a template corresponding to each of the STL containers. This looks like a good way to approach <I>Swap</I>, but introducing additional overloads of <B>std::swap</B> is not permitted by the language standard. The Standard does permit explicit specialization of an existing <B>std::swap</B> template function on user-defined classes, and this is what I would recommend doing where applicable (there is an example below). The standards committee is currently considering a defect report <a href="#12">[12]</a> that addresses the problem caused by these rules for the authors of user-defined template classes.</p>
<p>The third rule addresses the cause of all the messy exception-handling code we saw in the last section. It was because creating a new second part might fail that we wrote code to handle it and doubled the number of lines in the assignment operator.</p>
<p>We&#146;ll now revisit the last example and make use of the above rules. In order to conform to the rule regarding ownership of multiple objects, we&#146;ll delegate the responsibility of resource ownership to a couple of helper classes. I&#146;m using the <B>std::auto_ptr&lt;&gt;</B> template to generate the helper classes here because it is standard, not because it is the ideal choice.</p>

<pre>
class Whole {
public:
   // ...Lots omitted...

   Whole&amp; operator=(const Whole&amp; rhs);

private:
   std::auto_ptr&lt;PartOne&gt;    p1;
   std::auto_ptr&lt;PartTwo&gt;    p2;
};

Whole&amp; 
Whole::operator=(const Whole&amp; rhs)
{
   std::auto_ptr&lt;PartOne&gt; 
      t1(new PartOne(*rhs.p1));
   std::auto_ptr&lt;PartTwo&gt; 
      t2(new PartTwo(*rhs.p2));

   p1 = t1;
   p2 = t2;

   return *this;
}
</pre>

<p>Not only is this shorter than the original exception-unsafe example, it meets the strong exception safety guarantee.</p>

<H3><FONT COLOR="#000080">Look at why it works:</FONT></H3>

<OL><LI>There are no leaks: whether the function exits normally or via an exception, <B>t1</B> and <B>t2</B> will delete the parts they currently own.</LI>
<LI>The assignment expressions cannot throw (first rule).</LI>
<LI>The state of the <B>Whole</B> isn&#146;t altered until we&#146;ve done all the things that might throw an exception.</LI></OL>

<p>Oh, by the way, I&#146;ve not forgotten about self-assignment. Think about it &#151; you will see the code works without a test for self-assignment. Such a test may be a bad idea: assuming that self-assignment is very rare in real code and that the branch could have a significant cost, Francis Glassborow suggested a similar style of assignment operator as a speed optimization <a href="#13">[13]</a>. Following on from this, Kevlin Henney explored its exception safety aspects in <a href="#14">[14]</a> and <a href="#6">[6]</a>.</p>
<p>We are on much firmer ground than before: it isn&#146;t hard to see why the code works and generalizing it is simple. You should be able to see how to manage a <B>Whole</B> with three <B>auto_ptr</B>s to <B>Part</B>s without breaking stride.</p>
<p>You can also see another of the friendly beasts for the first time. Putting the allocation of a resource (here a <B>new</B> expression) into the initializer of a manager object (e.g., <B>auto_ptr&lt;PartOne&gt;</B>) that will <B>delete</B> it on destruction is <I>Resource-Acquisition-Is-Initialization.</I> And, of course, we can once again see <I>Acquisition-Before-Release.</I></p>

<H3><FONT COLOR="#000080">The Assignment Operator &#151; A Special Case</FONT></H3>

<p>Before I go on to deal with having members that may throw when updated, I&#146;ve a confession I need to make. It is possible, and usual, to write the assignment operator more simply than the way I&#146;ve just demonstrated. The above method is more general than what follows and can be applied when only some aspects of the state are being modified. The canonical form of an assignment operator is:</p>

<pre>
Whole&amp; Whole::operator=(const Whole&amp; rhs)
{
    Whole copy(rhs);
    swap(copy);
    return *this;
}
</pre>

<p>Remember the second rule: <B>Whole</B> is a good citizen and provides for <I>Swap</I> (by supplying the <B>swap</B> member function). I also make use of the copy constructor &#151; but it would be a perverse class design that supported copy assignment but not copy construction. I&#146;m not sure whether the zoologists have determined the relationship between <I>Swap</I> and copying here, but the traveler won&#146;t go far wrong in considering <I>Copy-And-Swap</I> as a species in it own right.</p>
<p>For completeness, I&#146;ll show the member functions used above:</p>

<pre>
Whole::Whole(const Whole&amp; rhs)
:  p1(new PartOne(*rhs.p1)),
   p2(new PartTwo(*rhs.p2))
{
}

void Whole::swap(Whole&amp; that)
{
   std::auto_ptr&lt;PartOne&gt; t1(that.p1);
   that.p1 = p1;
   p1 = t1;
   std::auto_ptr&lt;PartTwo&gt; t2(that.p2);
   that.p2 = p2;
   p2 = t2;
}
</pre>

<p>Note that one must resist the temptation to write <B>std::swap(p1, that.p1)</B> as I did in earlier articles because it isn&#146;t guaranteed to work by the language standard. (<B>auto_ptr</B> doesn&#146;t have normal copy or assignment semantics &#151; thanks are due to Herb Sutter who pointed this problem out.)</p>
<p>One further point about making <B>Whole</B> a good citizen is that we need to specialize <B>std::swap</B> to work through the <B>swap</B> member function. By default, <B>std::swap</B> will use assignment &#151; and not deliver the no-throw guarantee we need for <I>Swap.</I> The Standard allows us to specialize existing names in the <B>std</B> namespace on our own types, and it is good practice to do so in the header that defines the type.</p>

<pre>
namespace std
{
   template&lt;&gt;
   inline void swap(cuj::Whole&amp; lhs, cuj::Whole&amp; rhs)
   {
      lhs.swap(rhs);
   }
}
</pre>

<p>This avoids any unpleasant surprises for client code that attempts to <B>std::swap</B> two <B>Whole</B>s.</p>
<p>Although we&#146;ve focused on attaining the higher peak of strong exception safety guarantee, we&#146;ve actually covered all the essential techniques for achieving either strong or basic exception safety. The remainder of the article shows the same techniques being employed in a more complex example and gives some indication of the reasons you might choose to approach the lesser altitudes of basic exception safety.</p>

<H3><FONT COLOR="#000080">In Bad Weather</FONT></H3>

<p>We can&#146;t always rely on bright sunshine, or on member variables that are as easy to manipulate as pointers. Sometimes we have to deal with rain and snow, or base classes and member variables with an internal state.</p>
<p>To introduce a more complicated example, I&#146;m going to elaborate the <B>Whole</B> class we&#146;ve just developed by adding member functions that update <B>p1</B> and <B>p2</B>. Then I&#146;ll derive an <B>ExtendedWhole</B> class from it that also contains an instance of another class: <B>PartThree</B>. We&#146;ll be assuming that operations on <B>PartThree</B> are exception safe, but, for the purposes of discussion, I&#146;ll leave it open whether <B>PartThree</B> offers the basic or the strong exception safety guarantee.</p>

<pre>
Whole&amp; Whole::setP1(const PartOne&amp; value)
{
   p1.reset(new PartOne(value));
   return *this;
}

Whole&amp; Whole::setP2(const PartTwo&amp; value)
{
   p2.reset(new PartTwo(value));
   return *this;
}

class ExtendedWhole : private Whole
{
public:

   // Omitted constructors &amp; assignment

   void swap(const ExtendedWhole&amp; rhs);

   void setParts(
      const PartOne&amp; p1,
      const PartTwo&amp; p2,
      const PartThree&amp; p3);

private:
   int       count;
   PartThree body;
};
</pre>

<p>The examples we&#146;ve looked at so far are a sufficient guide to writing the constructors and assignment operators. We are going to focus on two member functions: the <B>swap</B> member function and a <B>setParts</B> member function that updates the parts.</p>
<p>Writing <B>swap</B> looks pretty easy &#151; we just swap the base class and each of the members. Since each of these operations is &#147;no-throw,&#148; the combination of them is also &#147;no-throw.&#148;</p>

<pre>
void ExtendedWhole::swap(ExtendedWhole&amp; rhs)
{
   Whole::swap(rhs);
   std::swap(count, rhs.count);
   std::swap(body,  rhs.body);
}
</pre>

<p>Writing <B>setParts</B> looks equally easy: <B>Whole</B> provides member functions for setting <B>p1</B> and <B>p2</B>, and we have access to <B>body</B> to set that. Each of these operations is exception safe; indeed the only one that need not make the strong exception safety guarantee is the assignment to <B>body</B>. Think about it for a moment: is this version of <B>setParts</B> exception safe? And does it matter if the assignment to <B>body</B> offers the basic or strong guarantee?</p>

<pre>
void ExtendedWhole::setParts(
   const PartOne&amp; p1,
   const PartTwo&amp; p2,
   const PartThree&amp; p3)
{
   setP1(p1);
   setP2(p2);
   body = p3;
}
</pre>

<p>Let&#146;s go through it together: none of the operations leaks resources, and <B>setParts</B> doesn&#146;t allocate any resources, so we don&#146;t have any leaks. If an exception propagates from any of the operations, then they leave the corresponding subobject in a useable state, and presumably that leaves <B>ExtendedWhole</B> useable. (It is possible, but in this context implausible, to construct examples where this isn&#146;t true.) However, if an exception propagates from <B>setP2</B> or from the assignment, then the system state has been changed. And this is so regardless of which guarantee <B>PartThree</B> makes.</p>
<p>The easy way to support the strong exception safety guarantee is to ensure that nothing is updated until we&#146;ve executed all the steps that might throw an exception. The simple approach is to copy the object, make changes to the copy, and swap, as shown below:</p>

<pre>
void ExtendedWhole::setParts(
   const PartOne&amp; p1,
   const PartTwo&amp; p2,
   const PartThree&amp; p3)
{
   ExtendedWhole copy(*this);

   copy.setP1(p1).setP2(p2);
   copy.body = p3;

   swap(copy);
}
</pre>

<p>Sadly this is often impractical &#151; perhaps because the object doesn&#146;t have value semantics (i.e., no copy or assignment). This means taking copies of individual sub-objects and making the changes on the copies, prior to swapping the state between the copies and the original sub-objects:</p>

<pre>
void ExtendedWhole::setParts(
   const PartOne&amp; p1,
   const PartTwo&amp; p2,
   const PartThree&amp; p3)
{
   Whole copy(*this);

   copy.setP1(p1).setP2(p2);
   body = p3;

   Whole::swap(copy);
}
</pre>

<p>Despite its similar appearance, this is harder than the previous example: for example, does it matter if the assignment to <B>body</B> offers the basic or strong guarantee? Yes it does. If it offers the strong guarantee, then all is well with the above; if not, then the assignment needs to be replaced with <I>Copy-And-Swap</I>:</p>

<pre>
   PartThree(p3).swap(body);
</pre>

<p>Once again we have attained the highest peak, but this may not be healthy. On terrestrial mountains above a certain height, there is a &#147;death zone&#148; where the supply of oxygen is insufficient to support life. Something similar happens with exception safety: there is a cost to implementing the strong exception safety guarantee. Although the code you write isn&#146;t much more complicated than the &#147;basic&#148; version, additional objects are created and these allocate resources at run time. This causes the program to make more use of resources and to spend time allocating and releasing them.</p>
<p>Trying to remain forever at high altitude will drain the vitality. Fortunately, the basic exception safety guarantee is below the death zone: when we make a composite operation whose parts offer this guarantee, we automatically attain the basic guarantee. (As the first version of <B>setParts</B> shows, this is not true of the strong guarantee.) From the basic guarantee, there is an easy climb from this level to the strong guarantee by means of <I>Copy-And-Swap.</I></p>

<H3><FONT COLOR="#000080">Looking Back</FONT></H3>

<p>Before we descend from the peak of strong exception safety guarantee and return to our starting point, look back over the route we covered. In the distance, you can see the well-trampled path that led us from our first camp to the tar pit. On this side of the tar pit, there are a few tracks made by determined explorers that lead from the tar pit up a treacherous scree slope to where we stand. Off to the left is the easier ridge path we&#146;ve just ascended that led us by way of basic exception safety guarantee, and beyond the ridge is the road that led us past the tar pit. Fix these landmarks in your mind and remember that the beasts we met are not as fierce as their reputations.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Ellis and Stroustrup. <I>The Annotated C++ Reference Manual</I> (Addison-Wesley, 1990).</p>
<p><a name="2"></a>[2]  Dave Abrahams. &#147;Exception Safety in STLPort,&#148; <B>http://www.stlport.org/doc/exception_safety.html</B>.</p>
<p><a name="3"></a>[3]  H. Muller. &#147;Ten Rules for Handling Exception Handling Successfully,&#148; <I>C++ Report,</I> January 1996.</p>
<p><a name="4"></a>[4]  Herb Sutter. &#147;Designing Exception-Safe Generic Containers,&#148; <I>C++ Report,</I> September 1997.</p>
<p><a name="5"></a>[5]  Herb Sutter. &#147;More Exception-Safe Generic Containers,&#148; <I>C++ Report,</I> November/December 1997.</p>
<p><a name="6"></a>[6]  Kevlin Henney. &#147;Creating Stable Assignments,&#148; <I>C++ Report,</I> June 1998.</p>
<p><a name="7"></a>[7]  Alan Griffiths. &#147;The Safe Path to C++ Exceptions,&#148; <I>EXE,</I> December 1999.</p>
<p><a name="8"></a>[8]  Bjarne Stroustrup. <I>The C++ Programming Language,</I> Special Edition (Addison-Wesley, 2000), Appendix E: &#147;Standard Library Exception Safety.&#148; (This appendix appears only in the &#147;Special Edition&#148;, but is available on the web at <B>www.research.att.com/~bs/3rd_safe.pdf</B>.)</p>
<p><a name="9"></a>[9]  Dave Abrahams. &#147;Exception-Safety in Generic Components.&#148; <B>http://people.ne.mediaone.net/abrahams/abrahams.html</B>.</p>
<p><a name="10"></a>[10]  Herb Sutter. <I>Exceptional C++</I> (Addison Wesley, 2000).</p>
<p><a name="11"></a>[11]  Herb Sutter. &#147;Sutter&#146;s Mill,&#148; <I>C++ Report,</I> March 2000.</p>
<p><a name="12"></a>[12]  Dave Abrahams. &#147;User Supplied Specializations or Overloads of Namespace <B>std</B> Function Templates,&#148; <B>http://anubis.dkuug.dk/JTC1/SC22/WG21/docs/lwg-active.html#226</B>.</p>
<p><a name="13"></a>[13]  Francis Glassborow. &#147;The Problem of Self-Assignment,&#148; <I>Overload 19,</I> ISSN 1354-3172.</p>
<p><a name="14"></a>[14]  Kevlin Henney. &#147;Self Assignment? No Problem!&#148; <I>Overload 20, 21,</I> ISSN 1354-3172.</p>

<p><i><B>Alan Griffiths</B> works for Experian Ltd. designing software, writing C++ and Java, and mentoring developers. His website is at <B>www.octopull.demon.co.uk/</B>. He also chairs the Association of C and C++ Users (see <B>http://accu.org/</B> or email <B>info@accu.org</B>). He can be reached at <B>alan.griffiths@uk.experian.com</B>.</i></p>

</blockquote></body></html>
