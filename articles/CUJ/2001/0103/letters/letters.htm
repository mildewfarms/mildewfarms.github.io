<HTML>   
     <HEAD>
<TITLE>March 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p><i>The following two letters are in response to the Editor&#146;s Forum in the December 2000 </I>Java Solutions<I> supplement to </I>C/C++ Users Journal<I>. I had asked readers whether they felt Java made them more productive. As you can see, your mileage may vary. &#151; mb</i></p>

<hr><p>Hello,</p>
<p>Well, I started using Java at the university because I wanted to learn it, so I asked one of my teachers if I could present my project in Java and he agreed. Being a longtime C++ devotee since 1994, I have kept up to date with the C++ Standard and lost some interest in the language when I started to see it grow and grow. So I went into the Java hype and learned Java. Nowadays I continue to be a C++ devotee for speed-critical applications like computer graphics, but use Java for other kinds of applications.</p>
<p>About the P word, yes Java does improve productivity. I started to care less about memory allocation, thanks to the GC. But it isn&#146;t only that, because Java uses exceptions for all errors, not things like <B>return -1</B>, <B>return 0</B>, <B>throw exception</B>, and so on, that live in the C++ world. So I know that an error usually means an exception. Compare that with C++ where I can make a program with exceptions and then compile without exception support. Another reason is that if I make a Java program with JDK version X, I know that it will compile and run (or just run :) ) on any Java platform that supports JDK X. But that is not the case with C++; how many concessions do we have to make in order to be able to able to compile the program on multiple platforms? I know because in my work I develop programs that must run in several versions of Unix and Windows.</p>
<p>So if using Java means spending less time finding workarounds for each compiler, using exceptions in a coherent way, being free to use language features without worrying if compiler X will support it, not having to spend days trying to find if a memory problem is related to my application or a third-party library, then yes Java makes me more productive.</p>
<p>Paulo Pinto<br>
uRD Software Engineer<br>

<hr><p>Mr. Briand,</p>
<p>In your December Editor&#146;s Forum, you made a call asking to hear from experienced C++ programmers who have taken up Java, asking whether we&#146;re more productive in Java and what our reasons are for using it.</p>
<p>I am a GUI engineer, having started with programmatic C APIs and later moving to C++ GUI development frameworks, including MFC and BeOS. I&#146;m currently project manager at TimeLine Vista, Inc. (<B>http://www.timelinevista.com</B>) developing a cross-platform C++ GUI framework for targeting MacOS, Windows, and BeOS. The subjects of GUI design and what constitutes a good framework for multithreaded application development are my forte.</p>
<p>When I started at TimeLine, my second task was to write ViewNet Audio, a multi-platform (MacOS and Windows) GUI application for controlling our line of audio dubbers via ethernet. Given that no acceptable cross-platform solution existed, we opted to use Java, taking the promise of portability and quality at face value. While Java did live up to the portability promise, I found it lacking in every other area.</p>
<p>First and foremost is the performance. For writing a &#147;real&#148; application (i.e. anything more than a web applet) Java has proven to be woefully inadequate. If you look at the screen shots on the TimeLine web site, you&#146;ll find that ViewNet may well be the largest scale Java application ever written. We&#146;ve received comments from outside the company to that effect. We&#146;re lucky to get four frames a second rendering a 24-track audio project while in play, even without displaying waveforms for the audio, and having made severe compromises in the cleanliness of the code (caching calculations, etc.) to achieve even acceptable performance. Addition of waveforms is the next requirement for this product, and it&#146;s out of the question because their display would take the performance below its current barely acceptable level. Even the hope for native code generation from Java has failed to materialize.</p>
<p>Second is the threading and synchronization model: it&#146;s terrible.  Absolutely terrible. The fact that asynchronous dialogs don&#146;t exist means that a given window event loop, if it needs to present a dialog to the user, will block waiting for that dialog, but meanwhile, another event loop is spawned to deal with events for that window &#151; in effect the window has two event loops going simultaneously, and if a dialog blocks the inital event loop in a synchronized method, a deadlock is virtually guaranteed. This is merely one manifestation of an atrocious synchronization model. The fact that the equivalent of a semaphore is the <B>synchronized</B> keyword means that all synchronous operations must be atomic: you can&#146;t lock an object, act on it, then unlock it. This imposes design requirements which tie the hands of the application developer and can harm the cleanliness of code involving synchronization.</p>
<p>Third is the unreliability. Time and time again I&#146;ve seen the JVM lock up for no apparent reason. I&#146;ve seen data corruption in socket read/write operations. This issue alone has rendered unusable a substantial amount of work done to allow network backup of projects from the audio dubber to the Java client.</p>
<p>There are many other issues as well &#151; the lack of unsigned types causes code extracting data structures from buffers received from the ethernet connection to be bloated with superfluous upcasts with <B>&amp;0xFF</B> to get the real value. The lack of separation of interface and implementation means the entire implementation of a given object must be imported to build an object which depends on it, causing compile times to increase exponentially rather than linearally as the number of files in a project increases. I could go on, but I think the point is clear. We at TimeLine have decided to abandon the Java version of ViewNet and never use Java for anything again. That&#146;s why I&#146;m managing the C++ GUI development framework project: as a foundation for replacement of the failed Java experiment.</p>
<p>Yours truly,</p>
<p>Brian Tietz</p>

<hr><p>Dear <I>CUJ,</I></p>
<p>The article by Andrew [Koenig] and Barb[ara Moo]: &quot;Using Library Algorithms,&quot; published in January 2001 edition of <I>CUJ</I> is interesting. It has motivated me to see their <I>Accelerated C++</I> book.</p>
<p>In the paragraph that explains the <B>not_url_char</B> function, I found a sentence which I believe does not conform with the C++ Standard. It was written:</p>
<BLOCKQUOTE>
<p>Thus, we will create and initialize the string <B>url_ch</B> only on the first call to <B>not_url_char</B>.</p>
</BLOCKQUOTE>
<p>I believe &quot;creation on the first call&quot; is improper. It violates the following sections of the C++ Standard:</p>
<UL><LI>   3.6.2 Initialization of non-local objects </LI>
<LI>   3.7.1 Static Storage Duration </LI>
<LI>   6.7 Declaration statement</LI></UL>
<p>Hans Dulimarta, Ph.D.<br>
<B>dulimart@computer.org</B></p>

<p><I>Andrew Koenig replies:</I></p>
<p><I>Clause 3.6.2 is not relevant to the behavior of this particular piece of code, because </I><B>url_ch</B><I> is a local object, not a non-local object. Because it is a local object of static storage duration, it is initialized as specified in clause 6.7.</I></p>
<p><I>Clause 6.7, paragraph 4, in turn, says that </I><B>url_ch</B><I> is zero-initialized before any other initialization takes place (i.e., all of its member data are set to zero at the beginning of the program), and then it is &quot;initialized the first time control passes through its declaration.&quot; In other words, the variable </I><B>url_ch</B><I> is given its final value as part of what happens during the first execution of </I><B>not_url_char</B><I>.</I></p>
<p><I>Therefore, I think that &quot;only on the first call to </I><B>not_url_char</B><I>&quot; is a pretty accurate description of what the Standard says should happen.</I></p>
<p><I>Am I missing something? &#151; Andrew Koenig</I></p>

<p>Hans Dulimarta replies:</p>
<p>OK, regarding this clause [3.6.2] it was my mistake to overlook the &#147;local static&#148; attribute of <B>url_ch</B>.</p>
<p>As for initialization, I agree with you that it will be &#147;initialized the first time control passes through its declaration.&#148; The point in the previous e-mail was regarding the creation. I believe clause 3.7.1 implies that static variables have program lifetime duration. So, they should have been created before the first call.</p>
<p>The sentence in the paragraph of the <I>CUJ</I> article &#147;create and initialize the string ... on the first call ...&#148; implies that the string is:</p>
<p>1) created on the first call </p>
<p>2) initialized on the first call.</p>
<p>Again, I agree with you that 2) is correct. &#151; Hans Dulimarta</p>

<p><I>Andrew Koenig replies:</I></p>
<p><I>Ah, I see your point. You&#146;re taking &quot;create&quot; to mean &quot;allocate memory for,&quot; and I&#146;m using &quot;create and initialize&quot; to mean &quot;construct with a specified initial value.&quot;</I></p>
<p><I>I believe that it is quite difficult to write a program that is capable of distinguishing between those two interpretations. In other words, suppose we have a function:</I></p>

<pre>
void f()
{
   static T x;
}
</pre>

<p><I>How might we go about writing a program that is capable of determining whether the implementation allocates memory for </I><B>x</B><I> at the time the entire program begins executing, or immediately before it constructs </I><B>x</B><I>? Offhand, I can&#146;t figure out a way to do it, because there is no way of even uttering the name of </I><B>x</B><I> outside the scope of </I><B>f</B><I>, or even inside that scope until after the definition of </I><B>x</B><I> and, once you&#146;re past that definition, </I><B>x</B><I> has already been constructed.</I></p>
<p><I>In order to make it clear that when we say &quot;create&quot; in this context, we mean &quot;construct,&quot; we&#146;re going to change &quot;create&quot; to &quot;construct&quot; in that paragraph in the third printing of Accelerated C++. If you like, we can include your name in the list of people on the </I><B>www.acceleratedcpp.com</B><I> site who reported corrections to the book.</I></p>
<p><I>Regards,</I></p>
<p><I>Andrew Koenig</I></p>

<hr><p>Hi:</p>
<p>Just a thought. I read quite a bit about programming in C/C++ and I do it for a living. I wonder however, about the absence of books on using the NMAKE tool and Makefiles for compilation. Are there any you could recommend? I realize that most people use the IDE (I always have) but I would like to be more familiar with the workings in the background. Thanks.</p>
<p>Mr. Medina</p>

<p><I>Well, you have to admit, it&#146;s not the sexiest topic for a book. But maybe some of the command-line gurus out there can recommend some good sources. Anybody? &#151; mb </I></p>

</blockquote></body></html>
