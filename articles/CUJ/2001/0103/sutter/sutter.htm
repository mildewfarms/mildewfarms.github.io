<HTML>   
     <HEAD>
<TITLE>March 2001/Sutter's Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmar.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: To New, Perchance To Throw <a href="#1">[1]</a> (Part 1 of 2)</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>If you&#146;re going to overload operator new, make sure you get the right one, and that the compiler picks the right ones as well.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In this column and the next, I want to state and justify just two main pieces of advice:</p>

<UL><LI>   Any class that provides its own class-specific <B>operator new</B>, or <B>operator new[]</B>, should also provide corresponding class-specific versions of plain <B>new</B>, in-place <B>new</B>, and nothrow <B>new</B>. Doing otherwise can cause needless problems for people trying to use your class.</LI>
<LI>   Avoid using <B>new(nothrow)</B>, and make sure that when you&#146;re checking for <B>new</B> failure, you&#146;re really checking what you think you&#146;re checking.</LI></UL>

<p>Some of this advice may be surprising, so let&#146;s examine the reasons and rationale that lead to it. This article focuses on the first point; next time we&#146;ll consider the second. For simplicity, I&#146;m not going to mention the array forms of <B>new</B> specifically; what&#146;s said about the single-object forms applies correspondingly to the array forms.</p>

<H3><FONT COLOR="#000080">In-place, Plain, and Nothrow new</FONT></H3>

<p>The C++ Standard provides three forms of <B>new</B>, and allows any number of additional overloads. One useful form is in-place <B>new</B>, which constructs an object at an existing memory address without allocating new space. For example:</p>

<pre>
// Example 1: Using in-place new,
// an "explicit constructor call
//
// grab a sufficient amount of
// raw memory
void* p = ::operator new(sizeof(T));
    
// construct the T at address p,
// probably calls
// ::operator new(std::size_t, void*)
//     throw()
new (p) T;  
</pre>

<p>The Standard also supplies &quot;plain old <B>new</B>,&quot; which doesn&#146;t take any special additional parameters, and nothrow <B>new</B>, which does. Here&#146;s a complete list of the <B>operator new</B> overloads supplied in Standard C++:</p>

<pre>
// The Standard-provided overloads of
// operator new (there are also
// corresponding ones for array
// new[]):

// usual plain old boring new
// usage: new T
void*
::operator new(std::size_t size)
   throw(std::bad_alloc);
    
// nothrow new
// usage: new (std::nothrow) T
void*
::operator new(std::size_t size,
   const std::nothrow_t&amp;) throw();
    
// in-place or "put-it-there" new
// usage: new (ptr) T
void*
::operator new(std::size_t size,
   void* ptr) throw();
</pre>

<p>Programs are permitted to replace all but the last form with their own versions. All of these standard functions live in global scope, not in namespace <B>std</B>. In brief, <a href="tab1.htm">Table 1</a> summarizes the major characteristics of the standard versions of <B>new</B>.</p>
<p>Here is an example showing some ways to use these versions of <B>new</B>:</p>

<pre>
// Example 2: Using various
// indigenous and user-supplied
// overloads of new
//

// calls some user-supplied
//
// operator new(std::size_t,
//    FastMemory&amp;)
//
// (or something similar, with
// argument type conversions),
// presumably to select a custom
// memory arena
new (FastMemory()) T;
    
// calls some user-supplied
//
// operator new(std::size_t,
//    int, double, const char*)
//
// (or something similar, with
// argument type conversions)
new (42, 3.14159, "xyzzy") T;
    
// probably calls the standard or
// some user-supplied
//
// ::operator new(std::size_t,
//   const std::nothrow_t&amp;) throw()
//
new (std::nothrow) T;
</pre>

<p>In each case shown in Examples 1 and 2, the parameters inside the parentheses in the new-expression turn into additional parameters tacked onto the call to <B>operator new</B>. Of course, unlike the case in Example 1, the cases in Example 2 probably do allocate memory in one way or another, rather than use some existing location.</p>

<H3><FONT COLOR="#000080">Class-Specific New</FONT></H3>

<p>Besides letting programs replace some of the global operators <B>new</B>, C++ also lets classes provide their own class-specific versions. When reading Examples 1 and 2, did you notice the word &#147;probably&#148; in two of the comments? They were:</p>

<pre>
// construct the T at address p,
// probably calls
// ::operator new(std::size_t, void*)
//    throw()
//
new (p) T;  
            
// probably calls the standard or
// some user-supplied
// ::operator new(std::size_t,
//    const std::nothrow_t&amp;) throw()
new (std::nothrow) T;
</pre>

<p>The &#147;probably&#148; is because the operators invoked may not necessarily be the ones at global scope, but may be class-specific ones. To understand this clearly, notice two interesting interactions between class-specific <B>new</B> and global <B>new</B>:</p>

<UL><LI>   Although you can&#146;t directly replace the standard global in-place <B>new</B>, you can write your own class-specific in-place <B>new</B> that gets used instead for that class.</LI>
<LI>   You can add class-specific <B>nothrow new</B> with or without replacing the global one.</LI></UL>

<p>So in the two code lines repeated above, it&#146;s possible that <B>T</B> (or one of <B>T</B>&#146;s base classes) provides its own versions of one or both operators <B>new</B> being invoked here, and if so then those are the ones that will get used.</p>
<p>Here is a simple example of providing class-specific <B>new</B>, where we just provide our own versions of all three global flavors:</p>

<pre>
// Example 3: Sample class-specific
// versions of new
//
class X
{
public:
  static void* operator new( std::size_t )
     throw();                    // 1

  static void* operator new( std::size_t,
     const std::nothrow_t&amp; )
     throw();                    // 2

  static void* operator new( std::size_t, void* )
     throw();                    // 3
};

X* p1 = new X; // calls 1

X* p2 = new (std::nothrow) X; // calls 2

void* p3 = /* some valid memory that's big enough for an X */
   new (p3) X;   // calls 3 (!)
</pre>

<p>I put an exclamation point after the third call to again draw attention to the funky fact that you can provide a class-specific version of in-place <B>new</B> even though you can&#146;t replace the global one.</p>

<H3><FONT COLOR="#000080">A Name Hiding Surprise</FONT></H3>

<p>This, finally, brings us to the reason I&#146;ve introduced all of this machinery in the first place, namely the name hiding problem:</p>

<pre>
// Example 4: Name hiding "news"
//
class Base
{
public:
  static void* operator new( std::size_t,
     const FastMemory&amp; );         //4
};

class Derived : public Base
{
  // ...
};

Derived* p1 = new Derived; // ERROR: no match

// ERROR: no match
Derived* p2 = 
   new (std::nothrow) Derived;

void* p3 = /* some valid memory
              that's big enough for  
              a Derived */

// ERROR: no match
new (p3) Derived;

// calls 4
Derived* p4 = 
   new (FastMemory()) Derived;
</pre>

<p>Most of us are familiar with the name hiding problem in other contexts, such as a name in a derived class hiding one in the base class, but it&#146;s worth remembering that name hiding can crop up for <B>operator new</B> too. Remember how name lookup works: in brief, the compiler starts in the current scope (here, in <B>Derived</B>&#146;s scope), and looks for the desired name (here, <B>operator new</B>); if no instances of the name are found, it moves outward to the next enclosing scope (in <B>Base</B>&#146;s and then global scope) and repeats. Once it find a scope containing at least one instance of the name (in this case, <B>Base</B>&#146;s scope), it stops looking and works only with the matches it has found, which means that further outer scopes (in this case, global scope) are not considered and any functions in them are hidden; instead, the compiler looks at all the instances of the name it has found, selects a function using overload resolution, and finally checks access rules to determine whether the selected function can be called. The outer scopes are ignored even if none of the overloads found has a compatible signature, meaning that none of them could possibly be the right one; the outer scopes are also ignored even if the signature-compatible function that&#146;s selected isn&#146;t accessible. That&#146;s why name hiding works the way it does in C++. (For more details about name lookup and name hiding, see Item 34 in <I>Exceptional C++</I> <a href="#2">[2]</a>.)</p>
<p>What this means is that if a class <B>C</B>, or any of its base classes, contains a class-specific <B>operator new</B> with any signature, that function will hide all of the global ones and you won&#146;t be able to write normal new-expressions for <B>C</B> that intend to use the global versions. The only reasonable way to re-enable the global ones is for <B>C</B> to provide the necessary passthrough functions itself &#151; calling code must otherwise know to write globally-qualified new-expressions to select a global <B>operator new</B>.</p>
<p>This leads to a few interesting conclusions, best expressed as a coding and design guideline. Scott Meyers covers part of the first bullet in Item 9 of <I>Effective C++</I> <a href="#3">[3]</a>, but the other points are as important.</p>
<p><I>Guideline:</I> If you provide any class-specific <B>new</B>, then also:</p>

<UL><LI>   Always provide class-specific plain (no-extra-parameters) <B>new</B>. The class-specific version should almost always preserve the global version&#146;s semantics, so declare it with an exception specification of <B>throw(std::bad_alloc)</B>, and prefer to implement it in terms of the global version unless you really need to put in some special handling such as a fixed-size allocation strategy:</LI>
<pre>
// Preferred implementation of
// class-specific plain new.
//
void* C::operator new( std::size_t s )
  throw( std::bad_alloc )
{
  return ::operator new( s );
}
</pre>
<p>Note that you might be calling a replaced global version, rather than the Standard&#146;s default one, but that&#146;s normally a good thing: In most cases, a replaced global <B>operator new</B> exists for debugging or heap instrumentation reasons, and it&#146;s desirable to reflect such behavior in class-specific versions.</p>
<p>If you don&#146;t do provide a class-specific plain <B>new</B>, you won&#146;t be able to use the class with any code that tries to dynamically allocate objects the usual way.</p>
<LI>   Always provide class-specific in-place <B>new</B>. This should always preserve the global version&#146;s semantics, so declare it to throw nothing and implement it in terms of the global version:</LI>
<pre>
// Preferred implementation of
// class-specific in-place new.
//
void* C::operator new( std::size_t s, void* p ) 
throw()
{
  return ::operator new( s, p );
}
</pre>
<p>If you don&#146;t do this, you will surprise (and break) any calling code that tries to use in-place <B>new</B> for your class. In particular, Standard library container implementations commonly use in-place construction and expect such in-place construction to work the usual way; this is, after all, the only way to make an explicit constructor call in C++. Unless you write the above, you probably won&#146;t be able to use even a <B>std::vector&lt;C&gt;</B>.</p>
<LI>   Consider providing class-specific nothrow <B>new</B> in case some users of your class do want to invoke it; otherwise it will be hidden by other class-specific overloads of <B>new</B>. Either implement it using the global nothrow <B>new</B>:</LI>
<pre>
// "Option A" implementation of class-specific nothrow new.
// Favors consistency with global nothrow new. Should have
// the same effect as Option B.
//
void* C::operator new( std::size_t s, const std::nothrow_t&amp; n )
throw()
{
  return ::operator new( s, n );
}
</pre>

<p>or, to ensure consistent semantics with the normal <B>new</B> (which the global nothrow <B>new</B> ought to do, but what if someone replaced it in a way such that it doesn&#146;t?), implement it in terms of the normal <B>new</B>:</p>

<pre>
// "Option B" implementation of
// class-specific nothrow new.
// Favors consistency with
// corresponding class-specific
// plain new. Should have the same
// effect as Option A.
//
void*
C::operator new( std::size_t s,
  const std::nothrow_t&amp; ) throw()
{
  try {
    return C::operator new( s );
  } catch( ... ) {
    return 0;
  }
}
</pre>
</UL>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Next time, we&#146;ll delve deeper into the question of what <B>operator new</B> failures mean, and how best to detect and handle them. Along the way, we&#146;ll see why it can be a good idea to avoid using <B>new(nothrow)</B> &#151; perhaps most surprisingly, we&#146;ll also see that, on certain popular real-world platforms, memory allocation failures usually don&#146;t even manifest in the way the Standard says they must! Stay tuned.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  With apologies to the Bard &#151; meaning either Shakespeare or Bacon, depending which version of history you happen to prefer.</p>
<p><a name="2"></a>[2]  Herb Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</p>
<p><a name="3"></a>[3]  Scott Meyers. <I>Effective C++,</I> Second Edition (Addison-Wesley, 1997).</p>

<p><i><B>Herb Sutter</B> is an independent consultant and secretary of the ISO/ANSI C++ standards committee. He can be reached at <B>hsutter@acm.org</B>.</i></p>

</blockquote></body></html>
