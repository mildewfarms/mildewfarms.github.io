<HTML>   
     <HEAD>
<TITLE>Java Solutions June 2001/The Visitor Pattern</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjjun.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Visitor Pattern</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Robert Martin</FONT></H3>

<BLOCKQUOTE>
<p>The Visitor pattern is useful for more things than you might think. Here is how it plays out in Java.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>This article is excerpted from a chapter of <I>Advanced Principles, Patterns, and Process of Object Oriented Software Development</I> by Robert C. Martin (Prentice Hall, 2001). Copyright &copy; 2001 Robert C. Martin, All rights reserved.</p>
<BLOCKQUOTE>
<p>&#147;&#145;Tis some visitor,&#148; I muttered, &#147;tapping at my chamber door; Only this and nothing more.&#148; &#151; Edgar Allen Poe, <I>The Raven</I></p>
</BLOCKQUOTE>

<p><I>Problem</I>: You need to add a new method to a hierarchy of classes, but the act of adding it will be painful or damaging to the design.</p>
<p>This is a common problem. For example, you have a hierarchy of <B>Modem</B> objects. The base class has the generic methods common to all modems. The derivatives represent the drivers for many different modem manufacturers and types. You have a requirement to add a new method to the hierarchy named <B>ConfigureForUnix</B>. This method will configure the modem to work with the Unix operating system. It will do something different in each modem derivative, because each different modem has its own particular idiosyncrasies for setting configuration and dealing with Unix.</p>
<p>Unfortunately, adding <B>ConfigureForUnix</B> begs a terrible set of questions. What about Windows, what about MacOs, what about Linux? Must we really add a new method to the <B>Modem</B> hierarchy for every new operating system that we use? Clearly this is ugly. We&#146;ll never be able to close the <B>Modem</B> interface. Every time a new operating system comes along, we&#146;ll have to change that interface and redeploy all the modem software.</p>

<H3><FONT COLOR="#000080">The Visitor Family of Design Patterns</FONT></H3>
<p>The Visitor family allows new methods to be added to existing hierarchies without modifying the hierarchies.</p>
<p>The patterns in this family are:</p>

<UL><LI>   Visitor</LI>
<LI>   Acyclic Visitor</LI>
<LI>   Decorator</LI>
<LI>   Extension Object</LI></UL>

<H3><FONT COLOR="#000080">Visitor <a href="#1">[1]</a></FONT></H3>
<p>Consider the <B>Modem</B> hierarchy in <a href="fig1.htm">Figure 1</a>. The <B>Modem</B> interface contains the generic methods that all modems can implement. There are three derivatives shown, one that drives a Hayes modem, another that drives a Zoom modem, and a third that drives the modem card produced by Ernie, one of our hardware engineers.</p>
<p>How can we configure these modems for Unix without putting the <B>ConfigureForUnix</B> method in the <B>Modem</B> interface? We can use a technique called dual dispatch, which is the mechanism at the heart of the Visitor pattern.</p>
<p><a href="fig2.htm">Figure 2</a> shows the Visitor structure, and <a href="list1.htm">Listings 1</a>, <a href="list2.htm">2</a>, <a href="list3.htm">3</a>, <a href="list4.htm">4</a>, <a href="list5.htm">5</a>, and <a href="list6.htm">6</a> show the corresponding Java code. <a href="list7.htm">Listing 7</a> shows the test code that both verifies that the Visitor works and demonstrates how another programmer should use it. Notice how there is a method in the Visitor hierarchy for every derivative of the visited (<B>Modem</B>) hierarchy. This is a kind of 90-degree rotation &#151; from derivatives to methods.</p>
<p>The test code shows that to configure a modem for Unix a programmer creates an instance of the <B>UnixModemConfigurator</B> class and passes it to the <B>accept</B> function of the <B>Modem</B>. The appropriate <B>Modem</B> derivative will then call <B>visit(this)</B> on <B>ModemVisitor</B>, the base class of <B>UnixModemConfigurator</B>. If that derivative is a <B>Hayes</B>, then <B>visit(this)</B> will call <B>public void visit(Hayes)</B>. This will deploy to the <B>public void visit(Hayes)</B> function in <B>UnixModemConfigurator</B>, which then configures the <B>Hayes</B> modem for Unix.</p>
<p>Having built this structure, new operating system configuration functions can be added by adding new derivatives of <B>ModemVisitor</B> without altering the <B>Modem</B> hierarchy in any way. So the Visitor pattern substitutes derivatives of <B>ModemVisitor</B> for methods in the <B>Modem</B> hierarchy.</p>
<p>This is called dual dispatch because it involves two polymorphic dispatches. The first is the <B>accept</B> function. This dispatch resolves the type of the object that <B>accept</B> is called upon. The second dispatch is the <B>visit</B> method called from the resolved <B>accept</B> method. The second dispatch resolves to the particular function to be executed.</p>
<p>Thus, Visitor creates a matrix of functions. One axis of the matrix is the different types of modems. The other axis is the different types of operating systems. Every cell in this matrix is filled in with a function that describes how to initialize the particular modem for the particular operating system.</p>
<p>Visitor is fast. It requires only two polymorphic dispatches, regardless of the breadth or depth of the visited hierarchy.</p>

<H3><FONT COLOR="#000080">A Dependency Cycle</FONT></H3>

<p>Notice that the base class of the visited (<B>Modem</B>) hierarchy depends upon the base class of the Visitor hierarchy (<B>ModemVisitor</B>). Notice also that the base class of the Visitor hierarchy has a function for each derivative of the visited hierarchy. Thus there is a cycle of dependencies that ties all the visited derivatives (all the <B>Modem</B>s) together. This makes it very difficult to compile the Visitor structure incrementally or to add new derivatives to the visited hierarchy.</p>
<p>The Visitor works very well in programs where the hierarchy to be modified does not need new derivatives very often. If <B>Hayes</B>, <B>Zoom</B>, and <B>Ernie</B> were the only <B>Modem</B> derivatives that were likely to be needed, or if the incidence of new <B>Modem</B> derivatives was expected to be infrequent, then the Visitor would be very appropriate.</p>
<p>On the other hand, if the visited hierarchy is highly volatile such that many new derivatives will need to be created, then the Visitor base class (e.g., <B>ModemVisitor</B>) will have to be modified and recompiled along with all its derivatives every time a new derivative is added to the visited hierarchy. In C++, the situation is even worse. The entire visited hierarchy must be recompiled and redeployed whenever any new derivative is added.</p>
<p>To solve these problems, a variation known as Acyclic Visitor <a href="#2">[2]</a> can be used. This variation breaks the dependency cycle by making the Visitor base class (<B>ModemVisitor</B>) degenerate <a href="#3">[3]</a>. The lack of any methods in this class means that it does not depend upon the derivatives of the visited hierarchy. The visitor derivatives also derive from Visitor interfaces. There is one Visitor interface for each derivative of the visited hierarchy. This is a 180-degree rotation from derivatives to interfaces. The <B>accept</B> functions in the visited derivatives cast the Visitor base class <a href="#4">[4]</a> to the appropriate Visitor interface. If the cast succeeds, the method invokes the appropriate <B>visit</B> function. <a href="fig3.htm">Figure 3</a> shows the structure, and <a href="list8.htm">Listings 8</a>, <a href="list9.htm">9</a>, <a href="list10.htm">10</a>, <a href="list11.htm">11</a>, <a href="list12.htm">12</a>, <a href="list13.htm">13</a>, <a href="list14.htm">14</a>, <a href="list15.htm">15</a>, and <a href="list16.htm">16</a> show the code.</p>
<p>This breaks the dependency cycle and makes it easier to add visited derivatives and do incremental compilations. Unfortunately it also makes the solution much more complex. Worse still, the timing of the cast can depend upon the width and breadth of the visited hierarchy and is therefore hard to characterize.</p>
<p>For hard real-time systems, the large and unpredictable execution time of the cast may make the Acyclic Visitor inappropriate. For other systems, the complexity of the pattern may disqualify it. But for those systems in which the visited hierarchy is volatile and incremental compilation is important, then this pattern can be a good option.</p>

<H3><FONT COLOR="#000080">Using Visitor in Report Generators</FONT></H3>

<p>A very common use of the Visitor pattern is to walk large data structures and generate reports. The value of the Visitor in this case is that the data structure objects do not have to have any report generation code. New reports can be added by adding new Visitors, rather than by changing the code in the data structures. This means that reports can be placed in separate components and individually deployed only to those customers that need them.</p>
<p>Consider a simple data structure that represents a bill of materials (see <a href="fig4.htm">Figure 4</a>). There is an unlimited number of reports that we could generate from this data structure. We could generate a report of the total cost of an assembly, or we could generate a report that listed all the piece-parts in an assembly. Each of these reports could be generated by methods in the <B>Part</B> class. For example, <B>getExplodedCost</B> and <B>getPieceCount</B> could be added to the <B>Part</B> class. These methods would be implemented in each derivative of <B>Part</B> such that the appropriate reporting was accomplished. Unfortunately that would mean that every new report that the customers wanted would force us to change the <B>Part</B> hierarchy.</p>
<p>The CCP (Common Closure Principle) <a href="#5">[5]</a> tells us to separate code that changes for different reasons. The <B>Part</B> hierarchy may change as new kinds of parts are needed. However, it should not change because new kinds of reports are needed. Thus we&#146;d like to separate the reports from the <B>Part</B> hierarchy. The Visitor structure shown in <a href="fig4.htm">Figure 4</a> shows how this can be accomplished.</p>
<p>Each new report can be written as a new Visitor. We write the <B>accept</B> function of <B>Assembly</B> to visit the Visitor and also call <B>accept</B> on all the contained <B>Part</B> instances. Thus the entire tree is traversed. For each node in the tree, the appropriate <B>visit</B> function is called on the report. The report accumulates the necessary statistics. The report can then be queried for the interesting data and presented to the user.</p>
<p>This structure allows us to create an unlimited number of reports without affecting the <B>Part</B> hierarchy at all. Moreover, each report can be compiled and distributed independently of all the others. This is nice. <a href="list17.htm">Listings 17</a>, <a href="list18.htm">18</a>, <a href="list19.htm">19</a>, <a href="list20.htm">20</a>, <a href="list21.htm">21</a>, <a href="list22.htm">22</a>, and <a href="list23.htm">23</a> show how this looks in Java.</p>

<H3><FONT COLOR="#000080">Other Uses of Visitor</FONT></H3>

<p>In general, the <B>Visitor</B> pattern can be used in any application where there is a data structure that needs to be interpreted many different ways. Compilers often create intermediate data structures that represent syntactically correct source code. These data structures are then used to generate compiled code. One could imagine Visitors for each different processor and/or optimization scheme. One could also imagine a Visitor that converted the intermediate data structure into a cross-reference listing or even a UML diagram.</p>
<p>Many applications make use of configuration data structures. One could imagine the different subsystems of the application initializing themselves from the configuration data by walking it with their own particular Visitors.</p>
<p>In every case where Visitors are used, the data structure being used is independent of the uses to which it is being put. New Visitors can be created, existing Visitors can be changed, and all can be redeployed to installed sites without the recompilation or redeployment of the existing data structures. This is the power of the Visitor.</p>

<H3><FONT COLOR="#000080">References and Notes</FONT></H3>

<p><a name="1"></a>[1]  Erich Gamma et al. <I>Design Patterns</I> (Addison-Wesley, 1995), p. 331.</p>
<p><a name="2"></a>[2]  Robert C. Martin et al. <I>Pattern Languages of Program Design 3</I> (Addison-Wesley, 1997), p. 93.</p>
<p><a name="3"></a>[3]  A degenerate class is one that has no methods at all. In C++, it would have a pure virtual destructor. In Java, such classes are called &#147;Marker Interfaces.&#148;</p>
<p><a name="4"></a>[4]  In C++, we use <B>dynamic_cast.</B></p>
<p><a name="5"></a>[5]  See the &#147;publications&#148; section at &lt;http://www.objectmentor.com&gt;.</p>

<p><i><B>Robert C. Martin</B> has been a software professional since 1970. He is president of Object Mentor Inc., a firm of highly experienced experts that offers high level object-oriented software design consulting, training, and development services to major corporations around the world. He authored the best-selling book, <I>Designing Object Oriented C++ Applications using the Booch Method</I> (Prentice Hall, 1995). He was chief editor of <I>Pattern Languages of Program Design 3 </I>(Addison-Wesley, 1997) and editor of <I>More C++ Gems</I> (Cambridge Press, 2000). From 1996 to 1998, he was the editor-in-chief of <I>C++ Report</I>. He has published dozens of articles in various trade journals and is a regular speaker at international conferences and trade shows. He is currently working in the area of lightweight productive processes and is a strong advocate and supporter of Extreme Programming.</i></p>

<h4><a href="../../../source/2001/jjun01/martin.zip"></a></h4>
</blockquote></body></html>
