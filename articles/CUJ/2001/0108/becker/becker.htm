<HTML>   
     <HEAD>
<TITLE>August 2001/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: Writing Your Own Iterators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>To our delight and edification, Thomas continues his iteration on iterators. This time we get help defining specialized iterators for our own containers.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Good News</FONT></H3>

<p>Come all ye STL programmers and gather round me, for I have delightful tidings for thee. Most of you will probably agree with me when I say that the minimal reading list for a beginning C++ programmer consists of one introductory text and Scott Meyers&#146; two books <I>Effective C++</I> and <I>More Effective C++</I>. These books were written before the STL appeared on the radar of professional C++ programming. The good news is that Scott Meyers has written a third book called <I>Effective STL</I>. This new book, which should be in bookstores by the time you read this, offers the same kind of advice as his first two books, except that its focus is entirely on the STL. Since the STL is rapidly being accepted as an integral part of the C++ language, you really don&#146;t want to be caught with Scott Meyers&#146; third book missing from your bookshelf. As with his first two books, <I>Effective STL</I> is not an introductory text. You need to first learn about the STL from an introduction, such as <a href="#1">[1]</a>, <a href="#2">[2]</a>, <a href="#3">[3]</a>, or <a href="#4">[4]</a>. That&#146;ll tell you about the tools in the STL toolbox. <I>Effective STL</I> will tell you how to use these tools effectively and without causing damage.</p>
<p>Another book that needs to be mentioned in this context is Herb Sutter&#146;s excellent <I>Exceptional C++</I> <a href="#5">[5]</a>, which, among other things, contains advice on how to use the STL. The word is out that Herb Sutter has also written a follow-up, called <I>More Exceptional C++</I>. As of this writing, I have not had a chance to look at it, but there is no doubt in my mind that it will be another classic with much valuable advice regarding the STL.</p>
<p>Needless to say, reading Scott Meyers&#146; new book made me wonder if there is even still a need for a column such as this one. Why not just wrap up my pathetic little column and tell everybody to read two books instead, an introduction to the STL and <I>Effective STL</I>? I hope you&#146;ll agree with me, especially after reading this column, that there are a few things left for me to say. If you will allow me a somewhat personal remark at this point, I&#146;ll say that I am fortunate enough to work with a team that decided very early on to bank on the STL as an integral part of C++. We now have a large code base (and a commercially very successful product, I might add) that is virtually free of pre-STL legacies. Moreover, using the STL has inspired us to use generic-programming techniques extensively. I do believe that in the process I have learned a number of things worth sharing with you.</p>

<H3><FONT COLOR="#000080">Back to the Measurements Example</FONT></H3>

<p>This is the third column in a row on the subject of iterators. In my April 2001 column, I talked about the iterators that the STL containers expose. In the June 2001 column, I explained some more advanced aspects of iterators, such as iterator categories and iterator traits. In that column, I also mentioned a real-life example that demonstrates what the creative use of iterators can do for you. The example was a piece of software for evaluating measurements taken on the pipes, tanks, valves, and the like of a chemical plant. Among other things, I mentioned a class that holds a sequence of measurements taken at one particular location at different points in time. Such a class will hold all kinds of information concerning the location of the measurements, and it will hold a collection of objects each of which represents one measurement. In its simplest form, this collection would be a vector of pairs, each of which holds a <B>double</B> and a date. For example, the class would contain the following private member declaration:</p>

<pre>
typedef std::vector&lt;std::pair&lt;double, 
Date&gt; &gt; MeasurementsCollection;
MeasurementsCollection
m_vectMeasurements;
</pre>

<p>It is of course possible that there is more information associated with each individual measurement so that, instead of a pair of a <B>double</B> and a date, you&#146;d have to use a more complex object. For now, let us assume that we can get away with a pair or a similarly simple struct, which, just like <B>std::pair</B>, exposes its content through public data members. One of the main points in my last column was that sequentially structured data should always be exposed and passed around in the form of iterators. Therefore, in the present situation, our class should expose iterators to the collection of measurements as follows:</p>

<pre>
typedef std::vector&lt;std::pair&lt;double,
Date&gt; &gt; MeasurementsCollection;
typedef
MeasurementsCollection::const_iterator
const_iterator;

MeasurementsCollection::size_type size()
{
  return m_vectMeasurements.size();
}

const_iterator begin() {
  return m_vectMeasurements.begin();
}

const_iterator end() {
  return m_vectMeasurements.end();
}
</pre>

<p>Rather obviously, this setup exposes all available information about the measurements to the client. For example, if there are two or more measurements present, the value of the second measurement can be retrieved as</p>

<pre>
(begin() + 1)-&gt;first
</pre>

<p>Still, from an STL point of view, this solution is very unsatisfactory. Suppose you wish to do something with just the sequence of measurement values, disregarding the dates. For example, you may wish to calculate some statistical information about the measurements, such as the standard deviation. The STL does not have a standard deviation algorithm, but if you are working on software that calculates and uses statistics, then your own toolbox of algorithms would most certainly contain an STL-style algorithm for the calculation of the standard deviation. That algorithm will take as its arguments a pair of iterators that represents the sequence of numbers whose standard deviation is to be calculated. Or you may want to display the values of the measurements in some tabular or graphical format that illustrates their statistical behavior. If your display module is written with the STL and generic programming principles in mind, then again, you will need a pair of iterators that represents the sequence of numbers to be displayed. In either case, you&#146;ll want an iterator that, upon dereferencing, will return a <B>const</B> reference to the value of the measurement in question. But we don&#146;t have that. What we have are iterators that, upon dereferencing, return a reference to a pair whose first component is the value we need.</p>
<p>There are several possible solutions to this problem. One would be to change the data structure of our class and store the measurement values and their respective dates in parallel vectors. Certainly not a very appealing solution, especially in view of the fact that now you may have the opposite problem, where you want an iterator that dereferences to a pair that contains both the value and the date of the measurement. Another solution would be to require that all functions that accept a pair of iterators must alternatively accept a pair of iterators and a functional, with the understanding that the functional must make it possible to customize the behavior of the respective function to deal with the kind of problem we&#146;re looking at. This solution is in keeping with the spirit of the STL: as a rule, STL algorithms allow this kind of customization. Suppose, for example, that you wanted to find the first occurrence of a certain value <B>val</B> in the collection of measurements. To do that, you could write</p>

<pre>
const_iterator it_found = std::find_if(
  begin(),
  end(),
  FirstEquals&lt;std::pair&lt;double, Date&gt; &gt;(val)
  );
</pre>

<p>where <B>FirstEquals</B> is a functional that could for example be defined as shown in <a href="list1.htm">Listing 1</a>.</p>
<p>Although this solution goes quite a long way, it is not my favorite one. First, the requirement that functions accepting pairs of iterators must be customizable via a functional in a suitable way is not really a clearly stated universal requirement in the STL. You may find yourself working with algorithms and modules written by other people where this requirement is not satisfied. Second, the proliferation of functionals that results from this solution tends to clutter the code and make it harder to read and maintain. Third, writing the appropriate functionals often opens a whole ugly can of worms having to do with storing objects, by value or by reference, inside temporary function objects, something that should be avoided if possible. Fourth, and most importantly, what we&#146;re doing here is making the client of the class deal with a problem that is nothing but an implementation detail. The class is intended, among other things, for use by clients who are interested just in the sequence of numbers, disregarding the dates. These clients can reasonably demand to be given access to this sequence of numbers through a pair of iterators that point to numbers and nothing else.</p>

<H3><FONT COLOR="#000080">A Generic Iterator to Member</FONT></H3>

<p>All this being said, we find ourselves confronted with the task of writing our own iterator class. It must be an iterator that runs over an <B>std::vector</B> of <B>std::pair</B>s, but upon dereferencing, returns a reference to a particular component of the pair that it currently points to, rather than to the pair itself. The first question we must answer is how general our iterator class should be. Such a decision is of course ultimately a matter of taste. It is, in a manner of speaking, a tradeoff between usability and reusability: a class that is too generic is often difficult for the client to understand and use, and a class that is not generic enough cannot be reused much.</p>
<p>In this particular case, it seems to me that a good level of genericity is to go for an iterator class that takes an existing iterator that dereferences to a struct or class with public data members and turns it into an iterator that dereferences to a particular public data member of the struct or class. In our example, it would turn an iterator that points to an <B>std::pair&lt;double, Date&gt;</B> into an iterator that points to the first component of the pair, a <B>double</B>.</p>
<p><a href="list2.htm">Listing 2</a> shows such an iterator class, which I have called <B>iterator_to_member</B>, with a few obvious function definitions omitted. The code in <a href="list2.htm">Listing 2</a> cannot be used with Microsoft Visual C++ and the version of the STL that comes with it, the root of the problem being the fact that the compiler does not support partial template specialization. This painful subject is discussed in more detail below. As indicated in the comments, the template arguments to the class are <B>_It</B>, the type of the original iterator; <B>_T</B>, the struct or class type that the original iterator points to; and <B>_R</B>, the type of the member of <B>_T</B> that our new iterator will point to. In the example that we started out with, these types will be specialized as</p>

<pre>
_It: std::vector&lt;std::pair&lt;double, Date&gt; &gt;::const_iterator
_T: std::pair&lt;double, Date&gt;
_R: double
</pre>

<p>The <B>iterator_to_member</B> class has two private data members: <B>m_it</B>, the original iterator that points to the entire struct or class of type <B>_T</B>, and <B>m_memptr</B>, a pointer to the member of <B>_T</B> that the new iterator will point to. Recall that in C++, a pointer to member is nothing but an offset that indicates the relative position of the respective member within the class layout. The one-liner <B>operator*</B> shows you how <B>iterator_to_member</B> uses that information:</p>

<pre>
return (*m_it).*m_memptr;
</pre>

<p>The expression in parentheses dereferences the contained iterator <B>m_it</B>. The result is a reference to the <B>_T</B> object that <B>m_it</B> currently points to. Using the pointer to member <B>m_memptr</B>, we obtain a reference to the desired member of the <B>_T</B> object. The operators <B>operator-&gt;</B> and <B>operator[]</B> are implemented analogously. Notice that the underlying iterator type <B>_It</B> may not have an <B>operator[]</B>. In that case, the line</p>

<pre>
return m_it[_N].*m_memptr;
</pre>

<p>in the implementation of <B>iterator_to_member::operator[]</B> will not compile. But that&#146;s just fine, because member functions of class templates will not be compiled unless they&#146;re called. The only downside to this is that you cannot force an explicit template instantiation on an <B>iterator_to_member</B> in the case where the underlying iterator type <B>_It</B> does not implement <B>operator[]</B>. That is because when an explicit template instantiation takes place, the compiler will attempt to compile all member functions.</p>
<p>All operators that have to do with the position of the iterator, such as <B>operator++</B>, are simply forwarded to the contained iterator. Again, there are some operators here that may not compile for certain values of the template parameter <B>_It</B>, but that is not a problem except when it comes to explicit instantiation.</p>
<p>Looking at the implementations of the various operators, you can see that our <B>iterator_to_member</B> is really just a thin wrapper around an iterator that dereferences to a struct or class with public data members. All operations having to do with the position of the iterator are simply forwarded to the wrapped iterator. All operations that have to do with dereferencing the iterator are first passed on to the wrapped iterator to obtain the object currently pointed to, and then the desired data member is extracted.</p>
<p>What remains to be discussed are the <B>typedef</B>s at the top of the class definition of <B>iterator_to_member</B>. In my last column, I mentioned the struct <B>std::iterator_traits</B> as a way to obtain the iterator category of an iterator. The full definition of the STL&#146;s <B>iterator_traits</B> is shown in <a href="list3.htm">Listing 3</a>. As you can see, <B>iterator_traits</B> is a struct that contains just <B>typedef</B>s for types that are associated with the iterator type <B>_It</B>. As I mentioned in my last column, the definition as shown in <a href="list3.htm">Listing 3</a> looks as if the whole <B>iterator_traits</B> is totally gratuitous. When I&#146;m looking at some iterator type, such as</p>

<pre>
std::list&lt;int&gt;::const_iterator
</pre>

<p>and I want to know what that iterator&#146;s <B>value_type</B> is, why would I write</p>

<pre>
std::iterator_traits&lt;std::list&lt;int&gt;::const_iterator&gt;::value_type;
</pre>

<p>and not simply</p>

<pre>
std::list&lt;int&gt;::const_iterator::value_type
</pre>

<p>when, as you can see from <a href="list3.htm">Listing 3</a>, the former is simply a <B>typedef</B> for the latter? The main reason for using the indirection through the struct <B>iterator_traits</B> is that some iterators are basic types, namely, plain old pointers, and these cannot provide their own associated types. <B>std::vector</B> iterators, for example, are often implemented as plain old pointers, and in these implementations, an expression such as</p>

<pre>
std::vector&lt;int&gt;::const_iterator::value_type
</pre>

<p>does not even make sense. For all iterators that do not or cannot provide their own types in this way, we can provide a specialization or partial specialization of <B>iterator_traits</B> to &#147;affix&#148; the associated types to the iterator. For example, the STL deals with all iterators that are plain old pointers in one fell swoop by providing the partial specialization of <B>iterator_traits</B> that is shown in <a href="list4.htm">Listing 4</a>. This is the reason that the STL implementation that comes with Microsoft VC++ 6.0 cannot provide iterator traits as stipulated by the Standard, because the compiler does not support partial template specialization.</p>
<p>The keyword <B>typename</B> in <a href="list3.htm">Listing 3</a> is required because the types that are used here are what&#146;s called &#147;dependent types,&#148; that is, types that depend on template parameters. Whenever you use a dependent type, you have to precede it with the keyword <B>typename</B>. The reason for this is that it is the only way to enable the compiler to check templatized code for syntactic correctness before instantiation. <B>typename</B> tells the compiler the identifier that follows names a type, rather than a data member or member function. Unfortunately, the current situation with different compilers is confusing: some compilers correctly require the use of the <B>typename</B> keyword, others don&#146;t allow it, and still others let you get away with both.</p>
<p>In our <B>iterator_to_member</B> class, we want the iterator category and the difference type to be the same as that of the underlying iterator type, simply because everything that has to do with positioning the iterator is forwarded to the contained iterator. The <B>value_type</B>, i.e., the type of the object pointed to by the <B>iterator_to_member</B>, is the template argument <B>_R</B>, and pointers and references to that type are <B>_R*</B> and <B>_R&amp;</B>, respectively.</p>
<p>Finally, a class with this many template arguments should always provide a wrapper around the constructor that is modeled after STL functions such as <B>make_pair</B>. As I mentioned in my last column, the point of these &#147;make functions&#148; is that, oftentimes, you find yourself constructing an object of a certain type and then immediately passing it to some function as an argument, without the need to explicitly assign it to a variable, as in</p>

<pre>
foo(std::pair&lt;int, int&gt;(42, 43));
</pre>

<p>In a case like that, you can use <B>std::make_pair</B> to save yourself the trouble of spelling out the template arguments, letting the compiler deduce them instead:</p>

<pre>
foo(std::make_pair(42, 43));
</pre>

<p>This is what the function <B>make_iterator_to_member</B> at the end of <a href="list2.htm">Listing 2</a> is all about.</p>

<H3><FONT COLOR="#000080">Applying iterator_to_member</FONT></H3>

<p>Suppose you have an <B>std::vector</B> of pairs of <B>double</B>s, and you want to calculate the standard deviation of the first components of all pairs in the vector. Assuming that you have a standard deviation algorithm, here&#146;s how you can do this now:</p>

<pre>
std::vector&lt;std::pair&lt;double, double&gt; &gt; vect;
// ...
double dblStdDev = std_dev(
  make_iterator_to_member(
    vect.begin(),
    &amp;std::pair&lt;double, double&gt;::first
    ),
  make_iterator_to_member(
    vect.end(),
    &amp;std::pair&lt;double, double&gt;::first
    )
  );
</pre>

<p>This kind of use of the iterator to member is convenient in many situations, but the real beauty of the whole concept of writing iterators like this emerges when we go back to our example of the measurement class. What we&#146;re going to do is expose an iterator to the first component of the pairs in the collection. Since this happens via a <B>typedef</B>, the client never even knows that there&#146;s something other than a plain old iterator in an STL container class involved. There is one issue that we need to address before we can write the appropriate <B>typedef</B> into the measurement class. Usually, when you write your own iterators, you have to write two versions, a <B>const</B> and a non-<B>const</B> one. In Matt Austern&#146;s article <a href="#6">[6]</a> on writing iterators, you&#146;ll find a very elegant trick that saves you from having to write a lot of duplicate code. As it happens so often in generic programming, the trick uses partial template specialization, and therefore, it won&#146;t work with compilers that do not support partial template specialization.</p>
<p>With our iterator to member, we&#146;re lucky enough to be able to come up with <B>const</B> iterators by specifying the template arguments appropriately. If we use a <B>const</B> iterator type for the first template argument (the type of the contained iterator) and a <B>const</B> type for the third template argument (the type of the member that we want to point to), then the resulting iterator to member is precisely the <B>const</B> iterator that we want. <a href="list5.htm">Listing 5</a> shows all the <B>typedef</B>s and member functions that our measurements class must have so that it exposes to the client both the sequence of pairs that it really contains and the &#147;virtual&#148; sequence consisting of the first components of these pairs.</p>

<H3><FONT COLOR="#000080">Microsoft Visual C++ and iterator_traits</FONT></H3>

<p>As we have seen, the whole idea of iterator traits, like many other nifty techniques in generic programming, cannot really work under Microsoft&#146;s Visual C++. The main problem is that the STL defines a partial specialization of struct <B>iterator_traits</B> that covers all plain old pointers, as shown in <a href="list4.htm">Listing 4</a>. If the STL implementation that comes with Visual C++ would just omit that partial specialization, but provide the general struct <B>iterator_traits</B> shown in <a href="list3.htm">Listing 3</a>, then the whole thing would be a mere inconvenience: for all iterators in your program that happen to be plain old pointers (in particular, all vector iterators), you could write a specialization of <B>iterator_traits</B>, and all would be well. Unfortunately, however, the struct <B>iterator_traits</B> in the STL that comes with Visual C++ is different from the one that the Standard requires: it is missing the pointer and reference types, and the <B>difference_type</B> is called <B>distance_type</B>. Therefore, this struct is of very limited use, to say the least.</p>
<p>As far as the iterator category is concerned, Microsoft&#146;s STL also offers a workaround that stems from one of the earliest versions of the original STL. Recall that the typical use of the iterator category is to make algorithms behave differently for different kinds of iterators. Many algorithms look like this:</p>

<pre>
template&lt;typename _It&gt;
alg(_It it1, _It it2)
{
  alg_internal(
    it1,
    it2,
    std::iterator_traits&lt;_It&gt;::iterator_category()
    );
}
</pre>

<p>Here, <B>alg_internal</B> is a function that is overloaded for different types of the third argument. As you can see, all that&#146;s needed here is a default-constructed temporary object of the iterator&#146;s category type. Microsoft&#146;s STL has a function <B>_Iter_cat</B>, which, when applied to an iterator, returns just such an object. Therefore, algorithms in their STL implementation often look like this:</p>

<pre>
template&lt;typename _It&gt;
alg(_It it1, _It it2)
{ alg_internal(it1, it2, _Iter_cat(it1)); }
</pre>

<p>This is how you should write algorithms that need to distinguish between iterators of different categories if you&#146;re working with Visual C++. The problem with the <B>_Iter_cat</B> gimmick is that it does not lend itself easily to be extended to custom iterators such as our <B>iterator_to_member</B>.</p>
<p>Microsoft&#146;s website makes no statement about if and when they intend to support partial template specialization. I have heard it through the grapevine that partial template specialization is not considered a priority by Microsoft and will not be supported in the next version of Visual C++.</p>
<p>I have also heard that in the upcoming version of Visual C++, Microsoft plans to improve the situation slightly by implementing all STL iterators as proper classes. So be sure to never make use of the fact that <B>std::vector</B> iterators are currently typedefed as plain pointers, and hope that nobody on your team has done so in the past.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>A few well-crafted generic iterator classes can greatly enhance the benefit that you reap from using the STL. For more on this subject, you may want to check out <a href="#7">[7]</a> and <a href="#8">[8]</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Matthew H. Austern. <I>Generic Programming and the STL</I> (Addison Wesley, 1998).</p>
<p><a name="2"></a>[2]  Nicolai M. Josuttis. <I>The C++ Standard Library: A Tutorial and Reference</I> (Addison Wesley, 1999).</p>
<p><a name="3"></a>[3]  David R. Musser and Atul Saini. <I>STL Tutorial and Reference Guide</I> (Addison Wesley, 1996).</p>
<p><a name="4"></a>[4]  Bjarne Stroustrup. <I>The C++ Programming Language</I>, 3rd ed. (Addison Wesley, 1997).</p>
<p><a name="5"></a>[5]  Herb Sutter. <I>Exceptional C++</I> (Addison Wesley, 2000).</p>
<p><a name="6"></a>[6]  Matthew H. Austern. &#147;The Standard Librarian: Defining Iterators and Const Iterators,&#148; <I>C/C++ Users Journal</I>, January 2001.</p>
<p><a name="7"></a>[7]  Christopher Baus and Thomas Becker. <I>Custom Iterators for the STL</I>, Proceedings of the 2000 Workshop on C++ Template Programming, &lt;http://oonumerics.org/tmpw00&gt;.</p>
<p><a name="8"></a>[8]  Martin Weiser and Gary Powell. <I>The View Template Library</I>, Proceedings of the 2000 Workshop on C++ Template Programming, &lt;http://oonumerics.org/tmpw00&gt;.</p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2001/aug01/becker.zip"></a></h4>
</blockquote></body></html>
