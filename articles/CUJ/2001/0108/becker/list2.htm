<HTML><HEAD>
<TITLE>August 2001/STL &amp; Generic Programming/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The class template iterator_to_member</A></h4>
<pre>
template&lt;
  typename _It, // type of original iterator
  typename _T,  // type pointed to by original iterator
  typename _R   // type of the member we want to point to
  &gt;
class iterator_to_member
{
  
public:

  // Some typedefs
  //
  typedef typename std::iterator_traits&lt;_It&gt;::iterator_category 
    iterator_category;
  typedef typename std::iterator_traits&lt;_It&gt;::difference_type 
    difference_type;
  typedef _R value_type;
  typedef _R* pointer;
  typedef _R&amp; reference;

  // Construction from an iterator and a pointer to member.
  iterator_to_member(_It from, _R _T::* memptr) : 
    m_it(from), m_memptr(memptr){}

  // Operators *, -&gt;, and [] are first forwarded to the contained
  // iterator, then extract the data member.
  reference operator*() const;
  pointer operator-&gt;() const;
  reference operator[](difference_type n) const;

  // All operators that have to do with position are forwarded 
  // to the contained iterator.
  iterator_to_member&amp; operator++();
  iterator_to_member operator++(int);
  iterator_to_member&amp; operator--();
  iterator_to_member operator--(int);
  iterator_to_member&amp; operator+=(difference_type n);
  iterator_to_member operator+(difference_type n) const;
  iterator_to_member&amp; operator-=(difference_type n);
  iterator_to_member operator-(difference_type n) const;

  bool operator==(const iterator_to_member&lt;_It, _T, _R&gt;&amp; rhs) const
  { return m_it == rhs.m_it; }
  bool operator!=(const iterator_to_member&lt;_It, _T, _R&gt;&amp; rhs) const
  { return m_it != rhs.m_it; }

  _It m_it;
  protected:

  value_type _T::* m_memptr;
  
};

template&lt;typename _It, typename _T, typename _R&gt;
inline iterator_to_member&lt;_It, _T, _R&gt;::reference 
iterator_to_member&lt;_It, _T, _R&gt;::operator*() const 
{ return (*m_it).*m_memptr; } 

template&lt;typename _It, typename _T, typename _R&gt;
inline iterator_to_member&lt;_It, _T, _R&gt;::pointer 
iterator_to_member&lt;_It, _T, _R&gt;::operator-&gt;() const  
{ return &amp;((*m_it).*m_memptr); } 

template&lt;typename _It, typename _T, typename _R&gt;
inline iterator_to_member&lt;_It, _T, _R&gt;::reference 
iterator_to_member&lt;_It, _T, _R&gt;::operator[](difference_type n) const
{ return m_it[n].*m_memptr; }

template&lt;typename _It, typename _T, typename _R&gt;
inline iterator_to_member&lt;_It, _T, _R&gt;&amp; 
iterator_to_member&lt;_It, _T, _R&gt;::operator++() 
{ ++m_it; return *this; }

// All other operators having to do with position are
// implemented in analogy to operator++().

// Make function for convenient construction.
template&lt;typename _It, typename _T, typename _R&gt;
iterator_to_member&lt;_It, _T, _R&gt; 
make_iterator_to_member(_It it, _R _T::* memptr)
{ return iterator_to_member&lt;_It, _T, _R&gt;(it, memptr); }

&#151; End of Listing &#151;</pre></body></html>
