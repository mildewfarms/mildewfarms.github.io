<HTML>
<HEAD>
<TITLE>August 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">August 2001<BR>
                Volume 19 Number 8</FONT></H3>
               
<H3><FONT COLOR="#FF0000">CLIENT/SERVER</FONT></H3>

<H4><A HREF="padamada/padamada.htm">A Cookie Manager Class for Web Applications</A></H4>
<p><b>Babu George Padamadan</b><br>
<i>Padamadan&#146;s classes make managing state in a client-server environment a sweet experience.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="jarvi/jarvi.htm">Tuple Types and Multiple Return Values</A></H4>
<p><b>Jaakko J&auml;rvi</b><br>
<i>There are several ways to return multiple values from a function in C++. Here is an elegant way that will give your template-grokking brain a real workout.</i></p>

<H4><A HREF="vlascean/vlascean.htm">Generalizing the Concepts Behind auto_ptr</A></H4>
<p><b>Cristian Vlasceanu</b><br>
<i>The C++ <b>auto_ptr</b> template can plug a memory leak &#151; too bad that&#146;s not the only possible &#147;leak.&#148; Here&#146;s a template that can close files, release Windows handles, and anything else you tell it how to do.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: One at a Time, Please</A></H4>
<p><b>Steve Dewhurst</b><br>
<i>Still having trouble kicking the preprocessor habit? Here is some strong motivation for crossing that bridge.</i></p>

<H4><A HREF="becker/becker.htm">STL &amp; Generic Programming: Writing Your Own Iterators</A></H4>
<p><b>Thomas Becker</b><br>
<i>To our delight and edification, Thomas continues his iteration on iterators. This time we get help defining specialized iterators for our own containers.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: Which Container Should I Use?</A></H4>
<p><b>Andrew Koenig &amp; Barbara E. Moo</b><br>
<i>It seems that deques are often mispronounced and seldom used. Here is wisdom on when to use them, as well as when to use the other two standard sequence containers.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: Nevermind</A></H4>
<p><b>Bobby Schmidt</b><br>
<i>Bobby is at his enthusiastic best after deleting a job that wasn&#146;t what it seemed. Deleting an object in C++ isn&#146;t always what it seems, either.</i></p>

<H4><A HREF="bootle/bootle.htm">Post-Mortem Debunker: Coder Block</A></H4>
<p><b>Stan Kelly-Bootle</b><br>
<i>While there exists code that should never have been written, certainly YOU didn&#146;t write it. So why are you reading this column rather than coding?</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1908/alexandr/alexandr.htm">&quot;Generic&lt;Programming&gt;: Typed Buffers (I)&quot;</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<I>You thought buffers were an uninteresting subject? Try to write a buffer that&#146;s at the same time generic and efficient. Hint: efficient buffers are easy, and generic buffers are easy, but buffers that are both generic and efficient are hard. This article is the first of a two-part treatment of typed buffers, heavy-duty components that can replace <B>std::vector</B> in performance-demanding applications.</I></p>

<H4><A HREF="../cexp1908/austern/austern.htm">&quot;The Standard Librarian: Sorting in the Standard Library&quot;</A></H4>
<p><b>by Matt Austern</b><br>
<I>The Standard C++ library provides a half dozen different tools for sorting, and knowing when to use which one is an essential part of knowing how to use the library properly. In some cases, the choice of sort function can make an enormous difference in performance.</I></p>

<H4><A HREF="../cexp1908/hyslop/hyslop.htm">&quot;Conversations: The Bind That Ties&quot;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<I>The standard library provides adaptors that extend the flexibility and power of the standard functions. While some of them may seem scary at first glance, they really are quite simple to use.</I></p>

<H4><A HREF="../cexp1908/henney/henney.htm">&quot;From Mechanism to Method: Data Abstraction and Heterarchy&quot;</A></H4>
<p><b>by Kevlin Henney</b><br>
<I>Hugged a tree today? Perhaps not, but you have probably been living and working in one if you are a C++ programmer. The most easily recognizable trees in a C++ program are class hierarchies, but there are others, including other type hierarchies. This month&#146;s column looks first at the species you can grow in C++, and then beyond: heterarchies include cycles whereas hierarchies are layered. Unlike the common-or-garden tree, a type heterarchy includes a substitutability relationship with a twist or, to be precise, a cycle.</I></p>

<H4><A HREF="../cexp1908/martin/martin.htm">&quot;Engineering Notebook: Template Method &amp; Strategy </B>&#151;<B> Inheritance vs. Delegation&quot;</A></H4>
<p><b>by Robert C. Martin</b><br>
<I>This installment of &#147;Engineering Notebook&#148; is the story of two patterns, Template Method and Strategy, that epitomize the difference between inheritance and delegation.</I></p>
</blockquote></body></html>
