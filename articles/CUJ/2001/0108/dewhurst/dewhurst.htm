<HTML>   
     <HEAD>
<TITLE>August 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: One at a Time, Please</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Still having trouble kicking the preprocessor habit? Here is some strong motivation for crossing that bridge.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The way programmers grouse about maintenance, you&#146;d think they&#146;d try to produce the minimum number of programs required to solve a problem. Yet, in case after case, it&#146;s common to find teams of otherwise intelligent programmers writing and maintaining many more programs than necessary. This column discusses how that happens and what one can do about it. Note that these problems and solutions definitely fall under the rubric of &#147;Common Knowledge,&#148; but that knowledge is so commonly ignored that it bears repeating.</p>

<H3><FONT COLOR="#000080">One Program or Two?</FONT></H3>

<p>How do we insert debugging code into our programs? Simple, everyone knows we use the preprocessor.</p>

<pre>
void buggy() {
#ifndef NDEBUG
    // some debugging code...
#endif
    // some actual code...
#ifndef NDEBUG
    // more debug code...
#endif
}
</pre>

<p>Everyone&#146;s wrong. Most veteran programmers have long and tedious stories about how the debug version of a program worked perfectly, but &#147;simply&#148; defining <B>NDEBUG</B> caused the production version to fail mysteriously. Well, there&#146;s nothing mysterious about it. We&#146;re actually discussing two unrelated programs that happen to be generated from the same source files. You&#146;d have to compile the same source code twice to see if it&#146;s even syntactically correct. The correct way to write the code is to dispense with the idea of a debugging version and write just a single program.</p>

<pre>
void buggy() {
    if( debug ) {
        // some debugging code...
    }
    // some actual code...
    if( debug ) {
        // more debugging code...
    }
}
</pre>

<p>What about the problem of all the debug code remaining in the executable of the production version? Isn&#146;t that going to waste space? Aren&#146;t the unnecessary conditional branches going to cost time? Not if the debug code isn&#146;t present in the executable. Compilers are very, very good at identifying and removing unusable code. They&#146;re a whole lot better at this than we are with our pathetic <B>#ifndef</B>s. All we have to do is make things easy for the compiler.</p>

<pre>
const bool debug = false;
</pre>

<p>The expression <B>debug</B> is what the Standard calls a &#147;constant-expression&#148; and what used to be called an &#147;integral-constant-expression.&#148; (Don&#146;t ask me where the &#147;integral&#148; went; I have no idea.) Every C++ compiler must be able to evaluate constant-expressions like this at compile time in order to translate array bound expressions, case labels, and bitfield lengths. Every minimally competent compiler can perform elimination of unreachable code of the form</p>

<pre>
if( false ) {
    // unreachable code...
}
</pre>

<p>Yes, even the compiler you&#146;ve been complaining about to management for the last five years can handle this. Even though the compiler removes the unreachable code, it must still perform a full parse and static semantic check. Given the definition of constant-expression in the Standard, your compiler can even eliminate unreachable code that is guarded by more complex expressions, provided that the expression is a constant-expression that can be evaluated at compile time.</p>

<pre>
if( debug &amp;&amp; debuglvl &gt; 
    5 &amp;&amp; debugopts&amp;debugmask ) {
    // potentially unreachable code...
}
</pre>

<p>Your compiler may even perform the code elimination in more complex cases. For example, we might attempt to involve my favorite inline function in the conditional expression.</p>

<pre>
typedef unsigned short Bits;
inline Bits
repeated( Bits b, Bits m )
    { return b &amp; m &amp; (b &amp; m)-1; }

//...

if( debug &amp;&amp; repeated
    ( debugopts, debugmask ) ) {
    // potentially unreachable code...
    error( "One at a Time,Please" );
}
</pre>

<p>However, with the use of a function call (whether inline or not), the expression is no longer a constant-expression, we have no guarantee that the compiler will be able to evaluate it at compile time, and therefore the code elimination may not take place. If you require the code elimination, this approach is not portable. Some readers who have been programming in C for too long may suggest the following fix:</p>

<pre>
#define repeated
    (b, m) ((b) &amp; (m) &amp; ((b) &amp; (m))-1)
</pre>

<p>I&#146;m not even going to comment on this, except to note that it&#146;s a good thing you&#146;ve got debugging code available. You&#146;ll need it.</p>
<p>Note that it may be advisable to have some conditionally compiled code in an application, in order to be able to set the values of constants from the compile line.</p>

<pre>
#ifndef NDEBUG
    const bool debug = true;
#else
    const bool debug = false;
#endif
</pre>

<p>Even the presence of this minimal conditionally compiled code is not necessary, however. Generally, a better approach is to select between debug and production versions in a makefile or similar facility.</p>

<H3><FONT COLOR="#000080">Using #if for Portability</FONT></H3>

<p>&#147;However,&#148; you state with a knowing look, &#147;my code is platform independent. I have to use <B>#if</B> to handle the different platform requirements.&#148; To prove your point, such as it is, you display the following code.</p>

<pre>
void operation() {
    // some portable code...
#ifdef WIN32
    // do something...
    a(); b(); c();
#endif
#ifdef UNIX
    // do same thing...
    d(); e();
#endif
}
</pre>

<p>This code is not platform independent. It&#146;s multi-platform dependent. Any change to any of the platforms requires not only a recompilation of the source, but actual change to the source for all platforms. We&#146;ve achieved maximal coupling among platforms, a remarkable achievement, if somewhat impractical. But that&#146;s a minor annoyance compared to the real problem that lurks inside this implementation of <B>operation</B>. Functions are abstractions. The <B>operation</B> function is an abstraction of an operation that has different implementations on different platforms. When we use high-level languages, we can often use the same source code to implement the same abstraction for different platforms. For example, the expression <B>a = b + c</B> where <B>a</B>, <B>b</B>, and <B>c</B> are <B>int</B>s has to be rendered in very different ways for different processors, but the meaning of the expression is sufficiently close across processors so that we can (generally) use the same source code for all platforms. This isn&#146;t always the case, particularly when our operation must be defined in terms of operating system or library-specific operations.</p>
<p>The implementation of <B>operation</B> indicates that the &#147;same&#148; thing is supposed to happen under both supported platforms, and this may even be the case initially. Under maintenance, however, bug reports tend to be reported and repaired on a platform-specific basis. Over a breathtakingly short period of time, the meaning of <B>operation</B> on different platforms will diverge, and you really will be maintaining totally different applications for each platform. Note that these different behaviors are different required behaviors, because users will come to depend on the platform-specific meanings of <B>operation</B>. A correct initial implementation of <B>operation</B> would have accessed platform-dependent code through a platform-independent interface.</p>

<pre>
void operation() {
    // some portable code...
    doSomething(); // portable 
                   // interface...
}
</pre>

<p>In making the abstraction explicit, it is far more likely that, under maintenance, different platforms will remain in conformance with the meaning of the operation. The declaration of <B>doSomething</B> belongs in the platform-independent portion of the source. The various implementations of <B>doSomething</B> are defined in the various platform-dependent portions of the source. (If <B>doSomething</B> is inline, then it will be defined in a platform-specific header file.) Selection of platform is handled in the makefile &#151; no <B>#if</B>s. Note also that adding or removing a particular platform requires no source code changes <a href="#1">[1]</a>.</p>

<H3><FONT COLOR="#000080">What about Classes?</FONT></H3>

<p>Well, what about them? Like a function, a class is an abstraction. An abstraction has an implementation that can vary either at compile time or run time depending on its implementation. As with a function, use of <B>#if</B> for varying a class&#146;s implementation is fraught with peril.</p>

<pre>
class Doer {
#        if ONSERVER
    ServerData x;
#        else
    ClientData x;
#        endif
    void doit();
    // ...
};
void Doer::doit() {
#        if ONSERVER
    // do server things...
#        else
    // do client things...
#        endif
}
</pre>

<p>Strictly speaking, this code is not illegal unless the <B>Doer</B> class is defined with the <B>ONSERVER</B> symbol both defined and undefined in different translation units. But sometimes it would be nice if it were illegal <a href="#2">[2]</a>. It&#146;s common for different versions of <B>Doer</B> to be defined in different translation units and then linked together without error. The runtime errors that appear are unusually arcane and difficult to track down.</p>
<p>Fortunately, this technique for introducing bugs is not now as common as it once was. The most obvious way to express variation of this kind is to use polymorphism.</p>

<pre>
class Doer { // platform independent
  public:
    virtual ~Doer();
    virtual void doit() = 0;
};
class ServerDoer : public Doer { // platform specific
    void doit();
    ServerData x;
};
class ClientDoer : public Doer { // platform specific
    void doit();
    ClientData x;
};
</pre>

<p>If more flexibility is required, then the implementation of <B>Doer</B> can use a Bridge.</p>

<pre>
class Doer {
  public:
    Doer();
    ~Doer();
    void doit();
  private:
    DoerImpl *impl_;
};
</pre>

<p>In those very rare cases in which even a simple virtual function call is too expensive, templates may be used to implement what might be called &#147;compile time polymorphism.&#148;</p>

<pre>
template &lt;class T&gt;
class Doer;

template &lt;&gt;
class Doer&lt;ServerData&gt; {
  public:
    void doit();
  private:
    ServerData x;
};

template &lt;&gt;
class Doer&lt;ClientData&gt; {
  public:
    void doit();
  private:
    ClientData x;
};
</pre>

<p>In any case, the structure of each <B>Doer</B> class itself is invariant from platform to platform, and variations in behavior can be relegated to platform-specific source files.</p>

<H3><FONT COLOR="#000080">Reality Check</FONT></H3>

<p>We&#146;ve looked at some fairly simple manifestations of attempts to make a single source represent different programs. From these simple examples, it looks like a straightforward task to re-engineer the source code to be more maintainable through application of the idioms and patterns illustrated above.</p>
<p>Unfortunately, the reality is often far worse and far more complex. Typically, the source is not parameterized by a single symbol (like <B>NDEBUG</B>), but is subject to several different symbols, each of which may take on a number of values, and which may be used in combination. As we illustrated above, each combination of symbols and symbol values gives rise to an essentially different application with different required, abstract behaviors. From a practical standpoint, even if it is possible to tease apart the separate applications defined by these symbols, re-engineering will unavoidably result in a change in behavior of the application on at least one platform.</p>
<p>However, such re-engineering eventually becomes necessary when the abstract meaning of the program can no longer be easily determined, and when many hundreds of compilations with different symbol settings are required simply to determine whether the source code is syntactically correct. It&#146;s far better to avoid the use of <B>#if</B> for versioning of source.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Many of the most commonly used design patterns speak to similar concerns, especially Abstract Factory, Bridge, and various augmentations of Factory Method. See Gamma et al. <I>Design Patterns</I> (Addison Wesley, 1995).</p>
<p><a name="2"></a>[2]  Yes, this is a real example (simplified) from one of my clients. And yes, we fixed it before it became dangerous.</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
