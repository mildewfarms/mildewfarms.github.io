<HTML>   
     <HEAD>
<TITLE>August 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear Sir,</p>
<p>As a subscriber to your magazine, I was astonished to read the May C/C++ Tip #6 about &#147;Making Classes Non-Derivable&#148; and could not believe what was written there. But before jumping to conclusions, I ran a minimal code example in my (Borland Builder 4) compiler &#151; guess what? <I>My</I> compiler <I>does</I> allow to derive from the class. What I had expected, of course &#151; and not because of the compiler.</p>

<pre>
class NoDeriv
{
 protected:
  NoDeriv() {}
};

class CannotBeDerived: 
 private virtual NoDeriv
{
};

/* but derivation DOES work... */
class Test: public CannotBeDerived
{};
</pre>

<p>Now either this was an April&#146;s fool joke (in May), or it was a test on the readers; I am rather surprised that a magazine like yours publishes this kind of stuff, and the author certainly does not deserve the CD-ROM.</p>
<p>Please correct me if I am wrong, otherwise my confidence in your magazine will go down quite a bit.</p>
<p>Alex D.</p>

<hr><p>Marc,</p>
<p>I&#146;ve just received the May 2001 <I>C/C++ Users Journal</I>, and while it&#146;s worth reading (good to see Carlos Moreno writing for you!), I&#146;m becoming accustomed to your C/C++ Tips being dubious.</p>
<p>This month&#146;s is just terrible, as it claims to do something that can be done (making a class nonderivable in C++), but it fails to do it.</p>

<pre>
class final
{
protected:
   final() { }
};

class nonderivable : 
   private virtual final {
   // actually we can derive from this
   // class
};

class derivative: 
   nonderivable, virtual final {
   // derivative will initialize the
   // 'final' base object.
};
</pre>

<p>(I&#146;ve checked that with Comeau&#146;s online compiler, with a gcc 3.0 pre-release, and with my own understanding of the Standard.)</p>
<p>We can derive from a class that has a private virtual base, by also having that same class as a virtual base. This is well known, I would have thought, and so a technical review should have picked it up. The standard idiom is to make the class <B>nonderivable</B> a friend of <B>final</B> (called <B>PriVirFinal</B> in the article), which naturally opens up the discussion of a templated solution which is not legal in C++:</p>

<pre>
template &lt;class derivedclass final
{
friend class derived; // not legal in
                      // C++ sadly
private:
   final() { }
};

class nonderivable : final&lt;nonderivable&gt;
{
  // ...
};
</pre>

<p>Maybe the C++ Standard will be changed to allow this in the future, but for now we&#146;re stuck with the non-template equivalent.</p>
<p>Any chance of getting a correction printed, and of making sure that the C/C++ Tips are reviewed more thoroughly in future?</p>
<p>On a more positive note, the April Conformance Roundup was excellent; it&#146;s good to see <I>CUJ</I> taking an active part in pushing vendors and users towards understanding the importance of conformance.</p>
<p>Regards,</p>
<p>James Dennett<br>
jdennett@acm.org</p>

<p><I>Hi James,</I></p>
<p><I>Thanks for reporting this bug; yes, you are right &#151; the class can be further derived from, but the solution you propose (the template solution), as you say, is not legal in C++. But, there is yet another solution to this. Under this circumstance, I have to revert back to the original solution: using </I><B>friend</B><I>s.</I></p>
<p><I>In this technique, to make both </I><B>CTreeKeyError</B><I> and </I><B>CTreeNoItemError</B><I> classes (used for exceptions) not derivable, this technique uses a &#147;lock&#148; class, to which the class that is not to be derived from is a </I><B>friend</B><I>. The lock class also has a private constructor, so it cannot be instantiated on its own. The actual class to be locked derives from the locking class with the &#147;public virtual&#148; access controller. Since the most derived class must initialize the virtual base, only the to-be-locked class can access the private constructor of the lock class (since this class is a </I><B>friend</B><I> to the lock class) to initialize it. This makes sure one cannot derive from </I><B>CTreeKeyError</B><I> and </I><B>CTreeNoItemError</B><I> classes, because the derived classes cannot initialize the virtual base. This implementation will work.</I></p>
<p><I>Here is the lock class:</I></p>

<pre>
// forward decl
template &lt;class T, 
 class Kclass CTreeKeyError; 

template &lt;class T, class K&gt;
class CTreeKeyErrorLock
{
 friend CTreeKeyError&lt;T, K&gt;;

private:
 CTreeKeyErrorLock() {}
};
</pre>

<p><I>And here&#146;s the class to be locked:</I></p>

<pre>
template &lt;class T, class K&gt;
class CTreeKeyError : 
 public virtual CTreeKeyErrorLock &lt;T, K&gt;
{
public:
 CTreeKeyError(const T&amp; t, const K&amp; k) :
  m_Data(t), m_Key(k), m_strMsg
   ("Key already exists in binary tree.") {}
 void print() const
 {
  std::cout &lt;&lt; "Data item could not be
                added to binary tree!" 
            &lt;&lt; std::endl;
  std::cout &lt;&lt; "Reason: " 
            &lt;&lt; m_strMsg 
            &lt;&lt; std::endl;
  std::cout &lt;&lt; "Key: " 
            &lt;&lt; m_Key 
            &lt;&lt; std::endl;
  std::cout &lt;&lt; "Data: " 
            &lt;&lt; m_Data 
            &lt;&lt; std::endl;
 }

private:
 const T m_Data;
 const K m_Key;
 const std::string m_strMsg;
};
</pre>

<p><I>Hope this clarifies things; thanks for your feedback.</I></p>
<p><I>Cheers,</I></p>
<p><I>Shanker Chandrabose</I></p>

<hr><p>As a former <I>C++ Report</I> subscriber (and also a current, long-time <I>CUJ</I> subscriber), I just wanted to let you know how much I enjoy reading (and re-reading) the &#147;C++ Experts&#148; columns now on &lt;www.cuj.com&gt;. Please, please, please do whatever it takes to keep them coming! And please let the columnists know that their efforts are greatly appreciated indeed!</p>
<p>Igor Firkusny</p>

<p><I>We are honored to host the C++ Experts on &lt;www.cuj.com&gt;. Glad you like them. We do too! We&#146;re confident that the C++ community will benefit from their wit and wisdom for a long time to come. &#151; cda</I></p>

<hr><p>I just browsed through the C++ Reading List and noticed that one of the best introductory books on C++ is missing: <I>Accelerated C++</I> by Andrew Koenig and Barbara E. Moo.</p>
<p>Maybe some of the older material can be thrown out. Now that the language and the library is standardized, it makes more sense to read books that cover Standard C++. A few older gems are still worth keeping, however, such as Coplien&#146;s <I>Advanced C++</I> or Lakos&#146; <I>Large Scale C++ Software Design</I>.</p>
<p>Just my $0.02.</p>
<p>Stefan Heinzmann</p>

<p><I>Yes, it&#146;s definitely time to update the Reading List. It&#146;s been outside of my job description lately, but now that the Senior Editor position has come my way, I plan on revamping it. And Andy and Barbara&#146;s book is one of a kind, to be sure (see Francis Glassborow&#146;s review of </I>Accelerated C++<I> in the June 2001 issue of </I>CUJ<I>). Thanks for writing (and for reading!). &#151; cda</I></p>

<hr><p>I like very much your editorial for the May 2001 issue and would have liked to mail a copy to a few of my fellow professors, but I could not find it on &lt;www.cuj.com&gt;. It would be nice if you could also leave the editorials on the website, it would save me doing a few photocopies.</p>
<p>That editorial was pretty good; too bad that it is mostly the ones that agree with the content that are going to read it.</p>
<p>Fran&ccedil;ois Gros d&#146;Aillon<br>
<B>fg@arabica.info.uqam.ca</b></p>

<p><I>The Editor&#146;s Forums are available online beginning with the January 1998 issue. Just go to the bottom of the page for whatever issue you&#146;re viewing for the link. &#151; cda</I></p>

<hr><p>Hello,</p>
<p>You might have received this before. The C/C++ Tip #5, p. 41 from the <I>CUJ</I> January 2001 edition (a C/C++ comment macro) doesn&#146;t work with GCC, because this compiler parses out comments before macros are considered.</p>
<p>In general this tip is not ANSI C or ANSI C++, because the resulting comment macro is not a lexical unit of C. The Standard says that such concatenations are &#147;undefined.&#148;</p>
<p>I don&#146;t have a neat ANSI C replacement for Mark Timperley&#146;s solution, sorry, someone else might?</p>
<p>Cheers</p>
<p>Hugues Talbot</p>
</blockquote></body></html>
