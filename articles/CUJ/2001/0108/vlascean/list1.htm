<HTML><HEAD>
<TITLE>August 2001/Generalizing the Concepts Behind auto_ptr/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The full auto_handle implementation</A></h4>
<pre> 
// A template class for returning 
// auto_handles by value
template&lt;class H&gt; 
struct auto_handle_ref
{
    explicit auto_handle_ref(H h) 
        : handle_(h) {}    
    H handle_;
};


// auto_handle
template&lt;class H, 
    class T = handle_traits&lt;H&gt;,
    class B = base_handle&lt;H, T&gt; &gt; 
class auto_handle : private B
{
public:
    // 20.4.5.1 construct/copy/destroy 
    explicit auto_handle(
        const H&amp; h = T::null_value()) throw()
    : handle_(h) {}    
    
    auto_handle(auto_handle&amp; that) throw()
        : B(that),
        handle_(B::copy(that.handle_)) {}
    ~auto_handle() throw()
    { 
        B::dispose(handle_);
    }    

    // 20.4.5.2 members
    H get() const throw()
    { return handle_; }

    // release ownership
    H release() throw()
    { 
        H h(handle_);

        handle_ = T::null_value();
        return h;
    }
 
    void reset(const H&amp; handle) throw()
    {
        if (handle_ != handle)
        {
            T::dispose(handle_);
            handle_ = handle;
        }
    }

    // 20.4.5.3 conversions
    // implicit ctor, clients may write
    // auto_handle&lt;some_class&gt; h = func()
    // where func returns auto_handle by
    // value
    auto_handle(
        const auto_handle_ref&lt;H&gt;&amp; r) throw()
        : handle_(r.handle_) 
    {}
    operator auto_handle_ref&lt;H&gt;() 
    { return auto_handle_ref&lt;H&gt;(release()); }

    // other operators
    auto_handle&amp; operator=(
        const auto_handle_ref&lt;H&gt;&amp; r) 
    {
        auto_handle tmp(r);
        
        std::swap(handle_, tmp.handle_);
        return *this;
    }

    auto_handle&amp; operator=(
        auto_handle&amp; rhs)
    {
        auto_handle tmp(rhs);

        std::swap(handle_, tmp.handle_);
        return *this;
    }
    
    bool operator !() const
    { return handle_ == T::null_value(); }

private:
    H handle_;
};
&#151; End of Listing &#151;</pre></body></html>
