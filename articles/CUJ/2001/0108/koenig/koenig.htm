<HTML>   
     <HEAD>
<TITLE>August 2001/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Which Container Should I Use?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>It seems that deques are often mispronounced and seldom used. Here is wisdom on when to use them, as well as when to use the other two standard sequence containers.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Among the C++ Standard library&#146;s great conveniences are container classes that handle collections of data remarkably well in ordinary contexts &#151; much better than built-in arrays handle such collections.</p>
<p>For example, a program that works with a bunch of data usually starts out with an empty collection. As the program runs, it either reads or computes pieces of data that it adds to the collection. At some point, it starts referring to the data that it already has, sometimes intermixed with adding additional data to the pile.</p>
<p>Built-in arrays are ill suited to such programs, because they require the programmer to know in advance how many elements the array will contain. Dynamic arrays, allocated by <B>new</B> and deallocated by <B>delete</B>, are little better, because it is hard to change the size of an array once it has been allocated.</p>
<p>On the other hand, the three sequential standard-library containers (<B>vector</B>, <B>list</B>, and <B>deque</B>) all offer an operation named <B>push_back</B>, which efficiently appends an element to the end of a container, making the container grow as necessary to accommodate the new element. Accordingly, programmers do not have to worry in advance about how large the container will become.</p>
<p>This article comes about because the library has three kinds of sequential containers, not just one. Each of these containers has advantages and disadvantages compared to the others. Accordingly, programmers who wish to use the library effectively need to know enough about each kind of container to have an idea about which one to choose.</p>

<H3><FONT COLOR="#000080">Vectors</FONT></H3>

<p>We can think of a <B>vector</B> as being similar to a built-in array, with two important differences:</p>

<UL><LI>   A <B>vector</B> is a self-contained object. In addition to its elements, it stores its size. Accordingly, if we pass a <B>vector</B> as an argument to a function, that function can find out how many elements the <B>vector</B> contains without needing an auxiliary argument for the purpose.</LI>
<LI>   For expansion purposes, a <B>vector</B> will often have extra memory allocated that does not presently contain any elements. Every <B>vector</B> corresponds to a (possibly empty) contiguous region of storage that contains a number of elements. The number of elements that the <B>vector</B> presently contains is called its <I>size</I>; the number of elements that can fit in the allocated storage is called its <I>capacity</I>.</LI></UL>

<p>You can set the capacity of a <B>vector</B> explicitly by calling the <B>reserve</B> member. If <B>v</B> is a <B>vector</B> and you call <B>v.reserve(n)</B>, then <B>v</B> will have a capacity at least as large as <B>n</B>.</p>
<p>You might think of a <B>vector</B> as looking like <a href="fig1.htm">Figure 1</a>. From <a href="fig1.htm">Figure 1</a>, it should be clear how <B>push_back</B> works: if the &#147;available storage&#148; has any room, <B>push_back</B> allocates enough of that room to hold the additional element and puts it there; otherwise, <B>push_back</B> reallocates the <B>vector</B>&#146;s memory. We&#146;ve already described how this reallocation works in an earlier article <a href="#1">[1]</a>, so we won&#146;t repeat the description here. It suffices to realize three things:</p>

<UL><LI>   Most of the time, <B>push_back</B> is very fast.</LI>
<LI>   Although <B>push_back</B> is sometimes slow, reallocation happens infrequently enough that on average, it contributes only a small amount of overhead to the entire program. In particular, a program that uses <B>push_back</B> repeatedly to build up a <B>vector</B> one element at a time will never run more than a constant factor more slowly than a similar program that knows in advance how much memory to allocate.</LI>
<LI>   In addition to the constant time overhead, there is a space overhead associated with <B>push_back</B>&#146;s allocating extra memory. Like the time overhead, this space overhead is never worse than a constant multiple of the amount of memory that the <B>vector</B> needs.</LI></UL>

<p>In exchange for the moderate overhead associated with <B>push_back</B>, the <B>vector</B> class offers very fast indexing. It is reasonable to expect that <B>v[i]</B> will run as quickly if <B>v</B> is a <B>vector</B> as it would if <B>v</B> were a built-in array.</p>
<p>Like all sequential containers, <B>vector</B> supports the <B>insert</B> and <B>erase</B> operations. However, the requirement that the <B>vector</B>&#146;s memory be contiguous means that whenever you use <B>insert</B> or <B>erase</B>, the <B>vector</B> must copy all of the elements that come after the insertion or deletion. Moreover, if the operation is <B>insert</B> and there isn&#146;t enough memory, it might be necessary to copy the entire <B>vector</B>. In other words, <B>insert</B> and <B>erase</B> will be slow unless they&#146;re near the end of the <B>vector</B> (and, in the case of <B>insert</B>, unless there is enough room to store another element). Accordingly, <B>vector</B> doesn&#146;t support <B>push_front</B>; it supports only <B>push_back</B>. Why support a convenient way of doing something that will almost certainly be inconveniently slow?</p>
<p>In short, a <B>vector</B> supports reasonably fast insertion and deletion at or near the end of the container and very fast random-access indexing. It doesn&#146;t support <B>push_front</B> at all. If you know how large a <B>vector</B> is going to become, you can use the <B>reserve</B> member to preallocate an appropriate amount of memory for better performance.</p>

<H3><FONT COLOR="#000080">Lists</FONT></H3>

<p>You can think of a <B>list</B> as being a classical doubly-linked list (see <a href="fig2.htm">Figure 2</a>). As you would expect from such a data structure, insertions and deletions are quick and easy at any point in the structure. Therefore, <B>list</B> supports both <B>push_back</B> and <B>push_front</B>, and executing <B>insert</B> and <B>erase</B> takes time proportional to the number of elements inserted or erased.</p>
<p>On the other hand, the only way to get at an element of a <B>list</B> is through an iterator. The elements might be scattered throughout memory, so the only way to locate the <B>n</B>th element is to start with the first (or last) element and count. Just as <B>vector</B> doesn&#146;t support <B>push_front</B>, <B>list</B> doesn&#146;t support <B>[]</B>. The rationale is the same: why provide a convenient way of doing something that is known to be slow?</p>
<p>For the same reason, <B>list</B> iterators are bidirectional iterators, in contrast to the random-access iterators that <B>vector</B> provides. Although <B>vector</B> and <B>list</B> are both called sequential containers, <B>list</B> is more rigorously sequential than <B>vector</B>.</p>
<p>A <B>list</B> never needs to allocate the excess memory that a <B>vector</B> uses. Therefore, it avoids that overhead. On the other hand, it does have some space overhead per element in keeping track of the location of the element&#146;s neighbors. This overhead is significant if the elements themselves are small, and insignificant if the elements are large.</p>

<H3><FONT COLOR="#000080">Deques</FONT></H3>

<p>A <B>deque</B>, which stands for double-ended queue, is a compromise between <B>list</B> and <B>vector</B>. You can think of it as being a collection of chunks organized into a sequence, with the first and last chunk possibly having room at their outer ends (see <a href="fig3.htm">Figure 3</a>).</p>
<p>Because the first chunk has room at the beginning and the last chunk has room at the end, <B>deque</B> can support both <B>push_front</B> and <B>push_back</B>. At worst, these operations require the <B>deque</B> to allocate a new chunk &#151; a reasonably fast operation as long as the whole chunk doesn&#146;t have to be initialized. Insertions and deletions in a <B>deque</B> will be fast if they are at either end. Moreover, the amount of space overhead for a <B>deque</B> will generally not be more than two chunks&#146; worth of memory plus a little extra for the auxiliary data structures. Why, then, would one ever want to use anything other than a <B>deque</B>?</p>
<p>One reason is that insertions or deletions in the middle can be slow; in general, inserting or erasing in a <B>deque</B> requires copying all the elements between the insertion or deletion point and one end of the <B>deque</B>. The implementation will choose the nearest end, of course, but if you&#146;re in the middle of the <B>deque</B>, there is no way around having to copy half of the elements.</p>
<p>Another reason is that as soon as a <B>deque</B> acquires a single element, it will have to allocate enough memory for its first chunk. Therefore, a program that uses a large number of small containers would be better off with a <B>list</B> or <B>vector</B> than it would be with a <B>deque</B>.</p>
<p>Finally, although <B>deque</B> offers indexing, there is more work involved in indexing a <B>deque</B> than in indexing a <B>vector</B>. Accordingly, programs that do a lot of indexing would be better off using a <B>vector</B> than a <B>deque</B>.</p>

<H3><FONT COLOR="#000080">Iterator Invalidation</FONT></H3>

<p>There is one more important difference between these three kinds of containers, and that is the circumstances under which iterators that refer to container elements become invalid. In general, standard-library iterators that refer to container elements remain valid as long as those elements stay in the same place. Various container operations can cause container elements to move from one part of memory to another; such movement may invalidate any iterators that refer to those elements.</p>
<p>Suppose, for example, that you have a program that uses iterators to keep track of particular elements in a container as the container grows. If your container is a <B>vector</B>, your iterators will become invalid each time the container is reallocated. In other words, if you call <B>push_back</B> and the <B>vector</B>&#146;s size is equal to its capacity, you will lose all of the iterators that you had so carefully saved.</p>
<p>In contrast, a <B>list</B> never invalidates iterators as long as the elements continue to exist to which those iterators refer. Of course, erasing a <B>list</B> element, or destroying the entire <B>list</B>, will invalidate iterators &#151; but aside from those cases, the iterators will remain valid.</p>
<p>As with a <B>vector</B>, inserting or erasing elements in a <B>deque</B> is permitted to invalidate all iterators that refer to elements of the <B>deque</B>.</p>

<H3><FONT COLOR="#000080">Discussion</FONT></H3>

<p><a href="tab1.htm">Table 1</a> shows the behavior of the sequential containers. This table should make clear several circumstances that might preclude &#151; or even force &#151; a choice of a particular container:</p>

<UL><LI>   If you haven&#146;t a clue about what kind of container to use, a <B>vector</B> is a good first choice.</LI>
<LI>   If you want indexing, you can&#146;t use a <B>list</B>.</LI>
<LI>   If you want <B>push_front</B>, you can&#146;t use a <B>vector</B>.</LI>
<LI>   If you&#146;re going to create a lot of little containers, you shouldn&#146;t use <B>deque</B>s.</LI>
<LI>   If you&#146;re going to be doing a lot of indexing, you probably want a <B>vector</B>.</LI>
<LI>   If your container elements are particularly expensive to copy, you may wish to avoid using a <B>vector</B>.</LI>
<LI>   If you want to insert or erase elements efficiently in the middle of a container, you must use a <B>list</B>.</LI>
<LI>   If you expect iterators that refer to container elements to remain valid across insertions and erasures, you must use a <B>list</B>.</LI></UL>

<p>What if one of these circumstances doesn&#146;t make it obvious which container to use? Then there are two possibilities.</p>
<p>The first possibility is that any of the containers will work reasonably well for your application. In that case, we recommend that you use <B>vector</B>, and that you use iterators instead of indexing unless you find that you need indexing. That way, if you decide to use a different kind of container, it will be easy for you to switch.</p>
<p>The second possibility is that there is a reason that we haven&#146;t covered that makes one kind of container better than the others. The most likely reason is the low-level performance of the containers on your particular implementation with your particular application. In that case, there is no substitute for doing your own measurements.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>There is no single data structure that is optimum for all applications. Accordingly, the C++ Standard library offers three kinds of sequential containers, each of which does one thing better than the others:</p>
<UL><LI>   The <B>vector</B> class offers particularly fast random-access indexing and reasonable performance for inserting and erasing elements at one end.</LI>
<LI>   The <B>list</B> class offers fast insertion and erasure at any point in the container, but no random access at all.</LI>
<LI>   The <B>deque</B> class offers reasonably fast random-access indexing and good performance for insertion or erasure at either end.</LI></UL>

<p>Each of these classes corresponds in a straightforward way to a classical data structure. Although implementations are not required to use these particular data structures, they are required to meet performance guarantees that those data structures would achieve. Thus these data structures are still a useful guide when you are trying to decide which kind of container to use.</p>

<H3><FONT COLOR="#000080">Reference</FONT></H3>

<p><a name="1"></a>[1]  Andrew Koenig and Barbara E. Moo. &#147;C++ Made Easier: How Vectors Grow,&#148; <I>C/C++ Users Journal</I>, April 2001.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</p></blockquote></body></html>

</blockquote></body></html>
