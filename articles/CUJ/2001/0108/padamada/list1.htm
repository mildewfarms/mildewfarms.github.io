<HTML><HEAD>
<TITLE>August 2001/A Cookie Manager Class for Web Applications/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: The Cookie class</A></h4>
<pre>
//  Cookie.h: Interface of Cookie Class
//  Encapsulates RFC 2109 and Netscape (Version 0) Specification
//  Cookies

#if !defined(AFX_COOKIE_H_)
#define AFX_COOKIE_H_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

#pragma warning (disable:4786)

#include &lt;string&gt;
#include &lt;map&gt;
#include "CookieUtil.h"

using std::string;
using std::map;
using util::toLowerStr;
using util::trimStr;

typedef map&lt;string, string&gt; COOKIE_MAP;
typedef map&lt;string, string&gt; NAME_MAP;

class Cookie  
{

public:
    // Constructor/Destructor
    Cookie(): m_nCookieVersion(0) 
    {}
    Cookie(const string&amp; strCookie): m_nCookieVersion(0)
    { constructNameValueMap(strCookie); }
    Cookie(const Cookie&amp; objCookie): m_nCookieVersion(0)
    { *this = objCookie; }
    virtual ~Cookie() 
    { clear(); }

    // Operators
    bool operator    == (const Cookie&amp; objCookie);
    bool operator    &lt; (const Cookie&amp; objCookie);
    Cookie&amp; operator = (const Cookie&amp; objCookie)
    {
        this-&gt;m_mapNameValue   = objCookie.m_mapNameValue;
        this-&gt;m_nCookieVersion = objCookie.m_nCookieVersion;
        return *this;
    }

    bool isEqual(const Cookie&amp; objCookie) const;

    // Get/Set
    string getCookieString(bool bVersionRequired = false);
    string getValue(const string&amp; strName) const
    {
        string strVal;
        getAttribValue(strName, strVal);
        return strVal;
    }
    bool getAttribValue(const string&amp; strName, string&amp; strVal) const;
    string getPath() const
    { return getValue("path"); }
    string getDomain() const
    { return getValue("domain"); }
    void getCookieNames(NAME_MAP&amp; mapNames) const;
    int getVersion() const
    { return m_nCookieVersion; }

    void setCookie(const string&amp; strCookie)
    { constructNameValueMap(strCookie); }
    void updateCookie(const Cookie&amp; objCookie);
    void clear()
    {
        m_mapNameValue.clear(); 
        m_nCookieVersion = 0;
    }

    bool isSecure() const
    { return doesNameExist("secure"); }
    bool isSessionCookie() const;
    bool isPersistentCookie() const
    { return !isSessionCookie(); }
    bool isRFC2109Based() const
    { return m_nCookieVersion&gt;=1?true:false; }
    bool isCookieValid() const;
    bool hasExpired() const;
    bool doesNameExist(const string&amp; strName) const
    {   
        string strVal;
        return getAttribValue(strName, strVal);
    }

    void updateNameValue(const string&amp; strName,
        const string&amp; strValue);
    void insertNameValue(const string&amp; strName, 
        const string&amp; strValue)
    {
        if (strName.length())
            m_mapNameValue.insert
            (COOKIE_MAP::value_type(strName, trimStr(strValue)));
    }

    // Domain/Path match
    bool doesDomainTailMatch(const string&amp; strReqDomain) const;
    bool doesPathMatch(const string&amp; strReqPath) const;

protected:
    // Attributes
    COOKIE_MAP m_mapNameValue;
    int m_nCookieVersion;

private:
    // Helpers
    void constructNameValueMap(const string&amp; strCookie);
    string getExpiryInternetTime(unsigned long nSeconds) const;
    bool isDomainValid() const;
    bool isAttributeName(const string&amp; strName) const;

};

#endif // !defined(AFX_COOKIE_H_)

&#151; End of Listing &#151;</pre></body></html>
