<HTML>   
     <HEAD>
<TITLE>August 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocaug.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Nevermind</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Bobby is at his enthusiastic best after deleting a job that wasn&#146;t what it seemed. Deleting an object in C++ isn&#146;t always what it seems, either.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>&#147;Here we are now, entertain us.&#148; <a href="#1">[1]</a></p>
<p>Remember all that stuff I wrote in this space three months ago? About how I was poised to become content strategist and editor-in-chief for MSDN&#146;s online .NET portal/publication? And how I wanted to jazz up the site with strong editorial personality?</p>
<p>Never mind.</p>
<p>As I wrote at the end of that opening spiel: &#147;All of this assumes I actually get to do what I want to do.&#148; Well, I didn&#146;t get to do what I wanted. I quickly discovered that the job was more tangled and encumbered than I had foreseen.</p>
<p>MSDN and, indeed, many of Microsoft&#146;s online faces are undergoing a dramatic transformation over the next year. These changes affect both the outward content, community, and presentation, and the inward relationships with partners and contributors. While I&#146;m hopeful that the end result will be a demonstrable improvement, the transition involves way too many meetings, PowerPoint decks, content plans, and shifting strategic priorities for my taste.</p>
<p>But the trump card was my writing.</p>
<p>I had intended to spend roughly half my time as editor/strategist, and half as writer. But the first job quickly grew to consume all of my time; my writing languished, and my enthusiasm for the new job waned. At this year&#146;s SD West, a dinner and subsequent lunch with Scott Meyers convinced me: my passion lies in my teaching and writing. I needed to ditch the new job and get back the old, even if that meant leaving MSDN or possibly Microsoft.</p>
<p>So after a six-month hiatus, and no small amount of wrangling with Microsoft, I&#146;m back to writing full time. When you read this, the first part of my next project should appear on MSDN: a C# handbook for C++ programmers <a href="#2">[2]</a>. This project is an experiment for me; rather than write a column series or a traditional book, I want to create a more organically hyperlinked writing constellation &#151; living work incrementally published and refined online over many months.</p>
<p>In essence, I&#146;ll take approaches we use in software component design and try applying them to English and technical prose. I know this idea is not new to the world, but it is new for me, and I&#146;m honestly excited by the challenge and opportunity.</p>

<H3><FONT COLOR="#000080">Deletion Revisited, Part 1</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear Bobby,</p>
<p>I am confused about the &#147;Deletion Detector&#148; question in the May 2001 issue. In</p>

<pre>
X *p = new X;
delete p;
</pre>

<p>the issue seems to be whether all the destructor code completes and not whether the memory for the <B>X</B> object is freed. I say this because you set the boolean flag at the end of <B>~X</B>.</p>
<p>My confusion is: How can the destructor code possibly not complete? The only answer I can come up with is that an exception propagates out of the destructor. Such an exception can be caught with:</p>

<pre>
try
    {
    delete p;
    }
catch (...)
    {
    // do something
    throw; // rethrow
    }
</pre>

<p>I would appreciate your comments.</p>
<p>Thank you &#151; Joe Hesse</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You are actually asking about my first proposed solution, which flags object deletion in the object&#146;s destructor. My second solution &#151; the one I enshrined as <a href="list1.htm">Listing 1</a> in that column &#151; flags object deletion in a class-specific <B>operator delete</B>.</p>
<p>The original reader wanted to know when an object had been deleted. In my first solution, I made three assumptions:</p>

<UL><LI>   &#147;Deletion&#148; means the object&#146;s destructor has been called and its memory freed. This implies that the object was previously allocated dynamically, and that its constructor succeeded.</LI>
<LI>   If the destructor completes, the memory deallocation will succeed &#151; that is, <B>operator delete</B> will never throw. Because of this assumption, in my first solution, I equate successful deletion with successful destruction.</LI>
<LI>   A user may want to test for successful deletion at a distant code point, long after the deletion may have failed.</LI></UL>

<p>You are right that the destructor should always succeed unless a thrown exception intervenes. Given that, the object&#146;s state flag seems redundant &#151; if no exception is thrown, the destruction is successful, and (by my implication) the deletion is successful.</p>
<p>But remember: just because an object&#146;s destructor has been called doesn&#146;t mean you can&#146;t try to reference that object, or that the object doesn&#146;t still exist in physical fact. This is true even if the object&#146;s destructor throws:</p>

<pre>
X *p = new X;
// ...
try
    {
    delete p;
    }
catch (...)
    {
    }
// ... 100 lines later...
p-&gt;i = 1; // oops!
</pre>

<p><B>delete p</B> is a logical deletion that may or may not induce an immediate physical deletion or even alteration. The flag lets users know a logical deletion has occurred even if no physical one has and lets them know it long after the logical deletion (and potential failure) occurs.</p>

<H3><FONT COLOR="#000080">Deletion Revisited, Part 2</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Your May 2001 Uncaught Exceptions included a &#147;Deletion Detector&#148; class to determine whether a pointer has been deleted. You said the code &#147;falls within the language rules,&#148; but I think you ran afoul of one. Clause 5.10 (Equality Operators) of the C++ Standard says:</p>

<BLOCKQUOTE>
<p>Pointers to objects or functions of the same type [...] can be compared for equality.</p>
</BLOCKQUOTE>

<p>Once memory for an object has been freed, a pointer to that memory is no longer a pointer to an object, and comparisons involving that pointer are undefined. I&#146;ve read of platforms where an attempt to compare an invalid pointer to another pointer causes a crash.</p>
<p>I still like your idea (although I might replace your <B>allocations_</B> vector with a map), and I believe it will be useful to many readers, but, sadly, it isn&#146;t Standard C++. &#151; James M. Stern</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Good catch! I&#146;m sorry to say that I hadn&#146;t even considered that angle.</p>
<p>For other readers: if you wonder about Diligent Reader Stern&#146;s observation, take a look at <a href="list1.htm">Listing 1</a> from my May column. Ponder in particular this statement:</p>

<pre>
list::iterator const location =
        std::find(allocations_.begin(),
        allocations_.end(), p);
</pre>

<p>The STL algorithm <B>std::find</B> evaluates the statement</p>

<pre>
*it == p
</pre>

<p>where <B>it</B> iterates over the range of <B>allocations_</B>. It makes this evaluation for each element in <B>allocations_</B> until one of two conditions occurs:</p>

<UL><LI>   <B>*it == p</B> evaluates to true</LI>
<LI>   no more elements are left to test</LI></UL>

<p><B>*it</B> has type <B>void *</B> and is the address of some currently-allocated object. <B>p</B> has type <B>void *</B>, but may or may not hold the address of some actual object; indeed, that uncertainty is what motivates this whole enterprise.</p>
<p>If <B>p</B> in fact points to an object, the expression <B>*it == p</B> compares two valid pointers for equality, in conformance with the subclause James cites. But if <B>p</B> points to an object that no longer exists, or holds some other invalid address, then it can&#146;t reliably be compared to another (valid) pointer.</p>
<p>James claims that the resulting behavior is undefined; yet my interpretation of the Standard suggests that the behavior is actually unspecified <a href="#3">[3]</a>. If I&#146;m right, then the rumored crashing behavior James mentions shouldn&#146;t occur. But even if I&#146;m wrong, the behavior isn&#146;t necessarily predictable or even documented.</p>
<p>There is a possible solution. James describes systems that bomb if you <I>compare</I> deleted pointers. However, if those systems let you <I>convert</I> deleted pointers, you may be in luck. From Subclause 5.2.10/4:</p>
<BLOCKQUOTE>
<p>A pointer can be explicitly converted to any integral type large enough to hold it. The mapping function is implementation-defined. (<I>Note:</I> it is intended to be unsurprising to those who know the addressing structure of the underlying machine.)</p>
</BLOCKQUOTE>
<p>On many systems, casting a pointer to an integer results in no change to the underlying bit representation, and no extra generated code. Indeed, the act of casting a pointer to an integer, then back to a pointer, must yield the original value <a href="#4">[4]</a>.</p>
<p>Given that constraint, I&#146;m assuming that each unique pointer maps to a unique integer. If two such integers compare as unequal, I further assume the original (pre-conversion) pointers were unequal <a href="#5">[5]</a>.</p>
<p>If your system allows such conversions, and if my assumptions hold, you can replace my original <B>operator new</B> and <B>operator delete</B> with</p>

<pre>
void *operator new(size_t n)
    {
    void *const p = malloc(n);
    V const v = reinterpret_cast&lt;V&gt;(p);
    allocations_.push_back(v);
    return p;
    }

void operator delete(void *p)
    {
    V const v = reinterpret_cast&lt;V&gt;(p);
    allocations_.remove(v);
    free(p);
    }
</pre>

<p>where <B>V</B> is the integral type to which pointers map (typically <B>unsigned</B> or <B>unsigned long</B>). <B>V</B> becomes the new value type for the list <B>allocations_</B>:</p>

<pre>
private:
    typedef unsigned long V;
    typedef std::list&lt;V&gt; list;
</pre>

<p>which now holds integers instead of pointers. Similarly, the STL algorithm finds integers instead of pointers:</p>

<pre>
V const v = reinterpret_cast&lt;V&gt;(p);
list::iterator const location =
        std::find(allocations_.begin(),
        allocations_.end(), v);
</pre>

<p>This solution avoids James&#146;s problem, by converting the possibly-deleted pointer <B>p</B> to an integer before making the implicit comparison in <B>std::find</B>.</p>
<p>Caveat: if you have a system so restrictive that you can&#146;t even fetch the value of a deleted pointer, then this solution won&#146;t work. In that case, you&#146;re probably stuck with some nasty system-specific hack.</p>

<H3><FONT COLOR="#000080">Ins and Outs, Part 1</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>I have a &#147;simple&#148; question that so far has avoided a solution: how do I forward declare a nested class?</p>
<p>Consider</p>

<pre>
Outer::Inner *p;
</pre>

<p>As <B>p</B> is only a pointer to an object, I shouldn&#146;t have to include the relevant header files for <B>Outer</B> and <B>Inner</B>. Instead I can merely forward declare those classes (or so one would think). But how do I write the forward declaration for <B>Outer::Inner</B>?</p>
<p>Here is how not to do it:</p>

<pre>
#include "Outer.h" // No, I just want a
                   // fwd declaration

/*
None of these work with MSVC++ 6.0

class Outer::Inner;

class Outer;
class Outer::Inner;

namespace Outer
{
    class Inner;
}
*/
</pre>

<p>The nested classes that provoked this question are generated by a third-party tool and involve some pretty hefty header files. Thanks. &#151; Billy O&#146;Mahony</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> You can&#146;t do what you want in Standard C++. Assuming <B>Outer</B>&#146;s definition is</p>

<pre>
class Outer
    {
public:
    class Inner
        {
        // ...Inner members
        };
    // ... other Outer members
    };
</pre>

<p>the best you can do is</p>

<pre>
class Outer
    {
public:
    class Inner;
    // ... other Outer members
    };
</pre>

<p>which defines and declares <B>Outer</B>, but only declares <B>Outer::Inner</B>. </p>
<p>A class declaration introduces a class&#146;s name, but not the class&#146;s member names. To introduce a class&#146;s member names, you need to define &#151; and not just declare &#151; that class. From Subclause 9.2/1:</p>

<BLOCKQUOTE>
<p>The member-specification in a class definition declares the full set of members of the class; no member can be added elsewhere.</p>
</BLOCKQUOTE>

<p>You want a class declaration (<B>Outer</B>) that somehow introduces a member name (<B>Outer::Inner</B>), and that can&#146;t happen. If the language worked the way you want, the declaration of <B>Outer::Inner</B> would effectively add that member (or at least its name) to the class <B>Outer</B> before <B>Outer</B> is actually defined.</p>

<H3><FONT COLOR="#000080">Ins and Outs, Part 2</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> My colleagues and I have a problem with nested classes and templates. We stumbled across it when trying to compile automatically generated code.</p>
<p>We have a class that contains a nested class and a template-based vector of that nested class. We provide an accessor function to the vector:</p>

<pre>
template&lt;class other&gt;
class vct
    {
    // ...
    };

class outer
    {
public:
    class inner
        {
        // ...
        };
    vct&lt;inner&gt; data;
    vct&lt;inner&gt; &amp;GetData();
    };
</pre>

<p>The function <B>GetData</B> is defined inline outside of the class declaration but within the same header file. Our code-generation tool (Rational Rose) produces this definition for <B>GetData</B>:</p>

<pre>
inline vct&lt;inner&gt; &amp;outer::GetData()
    {
    return data;
    }
</pre>

<p>This function compiles with Sun WorkShop Compiler 4.2 patch 104631-07. However, it doesn&#146;t compile with MS Visual C++ 6.0 SP4 and HP ANSI C++ B3910B A.01.15; they require the scope resolution of the template class parameter:</p>

<pre>
inline temp&lt;outer::inner&gt; &amp;outer::GetData()
    {
    return data;
    }
</pre>

<p>If we set up Rational Rose to generate the latter version, it also includes the full scope resolution within the class declaration, i.e.:</p>

<pre>
vct&lt;outer::inner&gt; data;
vct&lt;outer::inner&gt; &amp;GetData();
</pre>

<p>which doesn&#146;t compile with MS Visual C++. Of course, we can edit the generated code by hand and everything works, but we are also interested in what exactly happens here and what would be correct according to the C++ Standard.</p>
<p>Thanks in advance. &#151; Marco Hahn</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p><a href="list1.htm">Listing 1</a> shows the &#147;correct&#148; version. The parts surrounded by <B>/* */</B> are optional; if you uncomment those parts, the code is still correct.</p>
<p>When a Standard-conforming compiler sees a template argument name (such as <B>inner</B>), it tries to resolve that name in a Standard-specified lookup order. The complete rules governing that order are a tangle <a href="#6">[6]</a>, and I won&#146;t explore them here. Simplistically the order is from the &#147;inside out,&#148; meaning more locally-scoped names are considered before more globally-scoped ones.</p>
<p>In your example, when the compiler parses the name <B>inner</B> as part of the <B>GetData</B> declaration:</p>

<pre>
class outer
    {
    // ...
    vct&lt;inner&gt; &amp;GetData();
    };
</pre>

<p>the innermost scope is within class <B>outer</B>. The compiler is therefore allowed to look for <B>inner</B> as a member of <B>outer</B>. When the compiler later sees <B>inner</B> in the <B>GetData</B> definition:</p>

<pre>
inline vct&lt;inner&gt; &amp;outer::GetData()
//         ^ parse here
</pre>

<p>the innermost scope is global. Names in <B>outer</B> and other non-global scopes are not considered.</p>
<p>To make the compiler happy, you must change the name to something it can resolve at global scope:</p>

<pre>
inline vct&lt;outer::inner&gt; &amp;outer::GetData()
//         ^ parse here
</pre>

<p>Using the same lookup rules as before, the compiler searches for <B>outer</B> in global scope. Having found such an <B>outer</B>, it then looks for an accessible type member <B>inner</B> within the scope of <B>outer</B>. Mission accomplished.</p>
<p>Now for a couple of twists.</p>
<p>If you change <B>GetData</B> to include a function argument:</p>

<pre>
class outer
    {
    // ...
    vct&lt;inner&gt; &amp;GetData(inner);
    };

inline vct&lt;inner::outer&gt; &amp;outer::GetData(inner)
</pre>

<p>the program is still correct. This presents an apparent inconsistency. In the <B>GetData</B> definition</p>

<pre>
//         v    parse point #1
inline vct&lt;inner&gt; &amp;outer::GetData(inner)
//              parse point #2    ^
</pre>

<p>the function argument <B>inner</B> appears successfully without qualification (parse point #2) &#151; yet if you try the same unqualified name as a template argument (parse point #1), the compilation fails.</p>
<p>At point #1, the compiler doesn&#146;t yet know that it&#146;s parsing the declaration of an <B>outer</B> member and doesn&#146;t consider the scope of <B>outer</B> for name lookup. But once the compiler gets to point #2, it knows that it is indeed parsing an <B>outer</B> member and looks up the function argument <B>inner</B> within <B>outer</B>&#146;s scope <a href="#7">[7]</a>.</p>
<p>The second twist comes when you define <B>GetData</B> within the definition of <B>outer</B>, as I show in <a href="list2.htm">Listing 2</a>.</p>
<p>When the definition physically appeared in global scope, the template argument had to be looked up in global scope. But now that the definition physically appears within <B>outer</B>, the template argument can be looked up in the scope of <B>outer</B>. The two definition forms are logically equivalent, regardless of their physical location; yet that location affects how the definition&#146;s names are resolved.</p>
<p>Many of us grow up thinking that where we physically define functions is largely a matter of taste governed by file-organization concerns. But as this example shows, such thinking is too simplistic, especially when templates are involved <a href="#8">[8]</a>.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Nirvana. &#147;Smells Like Teen Spirit,&#148; <I>Nevermind</I>.</p>
<p><a name="2"></a>[2]  My guiding inspiration is the astronomy classic <I>Burnham&#146;s Celestial Handbook: An Observer&#146;s Guide to the Universe Beyond the Solar System</I> (Dover, 1983).</p>
<p><a name="3"></a>[3]  C++ Standard Subclause 5.9/2, indirectly via 5.10/1.</p>
<p><a name="4"></a>[4]  Subclause 5.2.10/5.</p>
<p><a name="5"></a>[5]  As far as I can tell, the Standard does not guarantee these assumptions of uniqueness. However, I have trouble imagining a system that could distill two pointers down to the same integer, yet somehow be able to rehydrate that single integer back to the original two pointers.</p>
<p><a name="6"></a>[6]  And as Scott Meyers would remind us, the tangle is particularly thick because the name lookup rules for templates and functions differ subtly but significantly. Vive la difference!</p>
<p><a name="7"></a>[7]  This is a consequence of Subclause 3.4.1/8 as amplified in Notes 29 and 30.</p>
<p><a name="8"></a>[8]  This is true even for non-template types. For example, if <B>GetData</B> returned <B>inner</B> rather than <B>vct&lt;inner&gt;</B>, the lookup problem would be the same. However, I find that the problem is greatly exacerbated when templates enter the scene.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/aug01/schmidt.zip"></a></h4>
</blockquote></body></html>
