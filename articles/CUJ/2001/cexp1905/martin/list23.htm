<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/Engineering Notebook/Listing 23</TITLE></HEAD>

<BODY>

<h4>Listing 23: TestBOMReport.java</h4>

<pre>
import junit.framework.*;
import java.util.*;

public class TestBOMReport extends TestCase
{
    public TestBOMReport(String name)
    {
        super(name);
    }
    
    private PiecePart p1;
    private PiecePart p2;
    private Assembly a;
    
    public void setUp()
    {
        p1 = new PiecePart(&quot;997624&quot;, &quot;MyPart&quot;, 3.20);
        p2 = new PiecePart(&quot;7734&quot;, &quot;Hell&quot;, 666);
        a = new Assembly(&quot;5879&quot;, &quot;MyAssembly&quot;);
    }
    
    public void testCreatePart()
    {
        assertEquals(&quot;997624&quot;, p1.getPartNumber());
        assertEquals(&quot;MyPart&quot;, p1.getDescription());
        assertEquals(3.20, p1.getCost(), .01);
    }
    
    public void testCreateAssembly()
    {
        assertEquals(&quot;5879&quot;, a.getPartNumber());
        assertEquals(&quot;MyAssembly&quot;, a.getDescription());
    }
    
    public void testAssembly()
    {
        a.add(p1);
        a.add(p2);
        Iterator i = a.getParts();
        PiecePart p = (PiecePart)i.next();
        assertEquals(p, p1);
        p = (PiecePart)i.next();
        assertEquals(p, p2);
        assert(i.hasNext() == false);
    }
    
    public void testAssemblyOfAssemblies()
    {
        Assembly subAssembly = new Assembly(&quot;1324&quot;, &quot;SubAssembly&quot;);
        subAssembly.add(p1);
        a.add(subAssembly);
    
        Iterator i = a.getParts();
        assertEquals(subAssembly, i.next());
    }
    
    private boolean p1Found = false;
    private boolean p2Found = false;
    private boolean aFound = false;
    
    public void testVisitorCoverage()
    {
        a.add(p1);
        a.add(p2);
        a.accept(new PartVisitor(){
            public void visit(PiecePart p)
            {
                if (p == p1)
                  p1Found = true;
                else if (p == p2)
                  p2Found = true;       
            }

        public void visit(Assembly
        {
            if (assy == a)
                aFound = true;
            }
        });
        assert(p1Found);
        assert(p2Found);
        assert(aFound);
    }
    
    private Assembly cellphone;
    
    void setUpReportDatabase()
    {
        cellphone = new Assembly(&quot;CP-7734&quot;, &quot;Cell Phone&quot;);
        PiecePart display = new PiecePart(&quot;DS-1428&quot;, 
                                          &quot;LCD Display&quot;, 
                                          14.37);
        PiecePart speaker = new PiecePart(&quot;SP-92&quot;, 
                                          &quot;Speaker&quot;,
                                          3.50);
        PiecePart microphone = new PiecePart(&quot;MC-28&quot;, 
                                             &quot;Microphone&quot;,
                                             5.30);
        PiecePart cellRadio = new PiecePart(&quot;CR-56&quot;, 
                                            &quot;Cell Radio&quot;, 
                                            30);
        PiecePart frontCover = new PiecePart(&quot;FC-77&quot;, 
                                             &quot;Front Cover&quot;, 
                                             1.4);
        PiecePart backCover = new PiecePart(&quot;RC-77&quot;, 
                                            &quot;RearCover&quot;,
                                            1.2);
        Assembly keypad = new Assembly(&quot;KP-62&quot;, &quot;Keypad&quot;);
        Assembly button = new Assembly(&quot;B52&quot;, &quot;Button&quot;);
        PiecePart buttonCover = new PiecePart(&quot;CV-15&quot;, 
                                              &quot;Cover&quot;,
                                              .5);
        PiecePart buttonContact = new PiecePart(&quot;CN-2&quot;, 
                                                &quot;Contact&quot;,
                                                1.2);
        button.add(buttonCover);
        button.add(buttonContact);
        for (int i=0; i&lt;15; i++)
            keypad.add(button);
        cellphone.add(display);
        cellphone.add(speaker);
        cellphone.add(microphone);
        cellphone.add(cellRadio);
        cellphone.add(frontCover);
        cellphone.add(backCover);
        cellphone.add(keypad);
    }
    
    public void testExplodedCost()
    {
        setUpReportDatabase();
        ExplodedCostVisitor v = new ExplodedCostVisitor();
        cellphone.accept(v);
        assertEquals(81.27, v.cost(), .001);
    }
    
    public void testPartCount()
    {
        setUpReportDatabase();
        PartCountVisitor v = new PartCountVisitor();
        cellphone.accept(v);
        assertEquals(36, v.getPieceCount());
        assertEquals(8, v.getPartNumberCount());
        assertEquals(&quot;DS-1428&quot;, 1, v.getCountForPart(&quot;DS-1428&quot;));
        assertEquals(&quot;SP-92&quot;, 1, v.getCountForPart(&quot;SP-92&quot;));
        assertEquals(&quot;MC-28&quot;, 1, v.getCountForPart(&quot;MC-28&quot;));
        assertEquals(&quot;CR-56&quot;, 1, v.getCountForPart(&quot;CR-56&quot;));
        assertEquals(&quot;RC-77&quot;, 1, v.getCountForPart(&quot;RC-77&quot;));
        assertEquals(&quot;CV-15&quot;, 15, v.getCountForPart(&quot;CV-15&quot;));
        assertEquals(&quot;CN-2&quot;, 15, v.getCountForPart(&quot;CN-2&quot;));
        assertEquals(&quot;Bob&quot;, 0, v.getCountForPart(&quot;Bob&quot;));
    }
}
</pre>
</body>

</html>
