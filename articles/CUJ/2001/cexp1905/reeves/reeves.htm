<HTML>   
     <HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.05/tocmay.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The (B)Leading Edge: Using IOStreams &#151; locales and facets</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jack W. Reeves</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>In this installment of &quot;The (B)Leading Edge,&quot; I intend to delve into <b>locale</b>s and <b>facet</b>s &#151; as one friend of mine says: another obscure and esoteric C++ topic that nobody is interested in. Before I attempt to address that opinion, I want to go back and clean up a few points about my previous columns.</p> 

<H3><FONT COLOR="#000080">String_stream Revisited</FONT></H3>

<p>Two columns back, I introduced a <b>String_stream</b> template class to demonstrate what's involved in deriving new IOStream classes <a href="#1">[1]</a>. What I showed in the examples of that column were correct &#151; I believe, but I was a little lazy in my testing. As often seems to happen, shortly after I wrote the column, I had an occasion to actually use the <b>String_stream</b> template on a real project. One of my original intents was that it be possible to instantiate a <b>iString_stream</b> with a <b>const</b> <b>string</b> object, or some similar read-only string type. When I tried this with the code I presented in the column, it would not compile.</p>
<p>The problem (in case you haven't run into this just yet) is that the <i>output</i> functions of the underlying <b>String_streambuf</b> (in the final version presented, this was the <b>sync</b> function) would generate compiler errors because they attempted to apply operations on the string type that were not supported. Originally, I assumed that since <b>String_stream</b> was a template that such functions would not be instantiated when I tried to create an <b>iString_stream</b> object. (Obviously, if I tried to create an <b>oString_stream</b> or a bi-directional String_stream with a read-only string, I would expect such errors.) I wasn't thinking clearly. The <b>sync </b>function is a <i>virtual </i>function. On most implementations, the compiler has to always instantiate such functions because it needs their addresses to put in the vtable. Whether this can be considered strictly compliant behavior is rather beside the point. The real point is that my <b>String_streambuf</b> class could not be instantiated with a read-only string type. Fortunately, the fix was trivial.</p>
<p>Most examples of derived IOStreams classes use a bi-directional derived <b>streambuf</b> class, but then create three different stream classes. There is no reason that an <b>iString_stream</b> class has to use a bi-directional <b>String_streambuf</b> class, however. I promptly created an <b>iString_streambuf</b> class that supports reading from a string, but no output to the string. I then changed the <b>iString_stream</b> class to use this new type of derived <b>streambuf</b>. The result is shown in <a href="list1.htm">Listing 1</a>. As I said, it is trivial &#151; the only functions that the derived <b>iString_streambuf</b> provides are a constructor and a destructor. The constructor sets up the pointers for the <b>get</b> area in the base <b>streambuf</b> class &#151; and that is all that is required. There is no <b>underflow</b> function, no <b>putbackfail</b> function, and no <b>put</b> area to be maintained. The default base class implementation is acceptable for all functionality. That's what I call &quot;easy.&quot; One note of caution has to be raised: if you specialize an <b>iString_stream</b> for a <b>const string</b>, you can get something like the following to compile:</p> 

<pre>
iString_stream&lt;const std::string&gt; istrm(&quot;pi = 3.14157&quot;);
</pre>

<p>but this is definitely not a good idea. Because the constructor now has a <b>const string&amp;</b> as its argument, the compiler will create a temporary string object from the string literal. Naturally, this object has gone out of scope and been destroyed at the end of the statement, leaving the <b>istrm</b> object to read data from a string object that no longer exists. In practice this doesn't seem to happen to me very often, but it is definitely something to be aware of. Once again, the rational for using a <b>String_stream</b> object was to <i>wrap</i> an IOStream interface around an existing string without having to copy the data. The <b>String_stream</b> does <i>no</i> memory management &#151; it depends on the supplied string object. For this reason, it has to be supplied with a object whose lifetime exceeds that of the <b>String_stream</b> object. If this is ever an issue, the Standard library <b>stringstream</b> class is a much better choice. </p>

<H3><FONT COLOR="#000080">Another Look at Temperature</FONT></H3>

<p>A couple of readers pointed out some problems with my <b>Temperature</b> class in the last column. First there was a minor error in the <b>operator&gt;</b> function. It should have read:</p>

<pre>
inline bool operator&gt; (Temperature lhs, Temperature rhs) { return rhs &lt; lhs; }
</pre>

<p>A more serious problem was pointed out by reader Philip Hibbs. He observed that <b>Temperature</b>'s equality comparison operators were directly comparing raw floating-point values. He correctly noted that such comparisons should always be done with reference to a tolerance. Under the circumstances, it seems pretty obvious that I had not had any reason to use <b>Temperature</b>'s comparison operators. This seems like as good a time as any to note that good class design is a non-trivial process, even when it seems like the class being designed <i>is</i> trivial.</p> 
<p>On an Ada project, I created a <b>Temperature</b> class that represented the data the same way it arrived from the sensor (as a 12- bit signed binary number &#151; or something like that). This seemed reasonable for that project because the external sensor interface was specified by an ICD (Interface Control Document) that was part of a subcontractor relationship that I figured was reasonably immune to capricious changes. On the other hand, I have worked on projects where interface boards were being designed in house, and the only thing in common between two versions of such a board was that they both plugged into the same backplane. In that case, I was inclined to create a more general-purpose abstraction.</p>
<p>Once you start trying to create general purpose, reusable classes, you often find that you have to confront issues that might not be relevant for a particular project. This is often used as an argument against creating and using general-purpose software, especially for such simple classes as <b>Temperature</b>. I disagree. Every issue that the class designer confronts (and correctly solves, of course) is one less issue that a user has to worry about. Maybe a floating-point number is not the best representation for an &quot;ordinary&quot; temperature value. Or maybe I will just correct the comparison operators. While such changes might trigger recompilations, no code that uses <b>Temperature</b> will have to change; that code will simply get better automatically. And that is the whole point.</p>

<H3><FONT COLOR="#000080">Exploring facets</FONT></H3>

<p>In the last column, I showed how to use some of the special features of the IOStreams library to create an output operator for <b>Temperature</b> that allowed the user to specify some class-specific formatting information <a href="#2">[2]</a> &#151; specifically the scale to use. In that column, I set things up so that the client <i>had</i> to specify a scale; otherwise the output operation would fail. I noted at the time that such behavior might not be considered acceptable. Now, I am going to tackle the problem of providing a default output format for a <b>Temperature</b> value while keeping with the spirit of the current <b>Temperature</b> class implementation. In other words, I want to be able to write</p> 

<pre>#
Temperature t;
// ... calculate t
ostrm &lt;&lt; t &lt;&lt; std::endl;
</pre>

<p>and get some reasonable output. Of course, what is reasonable depends upon the application context. In the previous column, I required the output be written as</p>

<pre>
ostrm &lt;&lt; Temperature::asC &lt;&lt; t &lt;&lt; std::endl;
</pre>

<p>but this just changes where in the code the default gets hard coded. If this is at the top level of the application, that is fine, but what if this statement is part of some other class' output operator. If <b>Temperature</b> is a widely used class, we are likely to get temperature values output in different scales depending upon what one user or another thinks is appropriate. What we want is to provide one place where we can set the default. One obvious way to do this is via a static member of the Temperature class itself. A more flexible choice is to create a <b>Temperature</b>-specific <b>facet</b> that we can add to a <b>locale</b>. The latter approach has several advantages, which we will consider at the end.</p> 
<p>My friend's observation about <b>locale</b>s<b> </b>(and <b>facet</b>s) being an obscure and esoteric feature of the Standard C++ library has a lot of truth in it. I am sure most programmers consider <b>locale</b>s to be of interest only to programmers who are immediately involved in writing human interface code in applications that are intended for international markets. In fact, most of those programmers are more likely to be concerned with the internationalization features of MFC or X-Windows than with <b>locale</b>s in C++. Like most things in C++, the vast majority of the time you do not need to know or care anything at all about <b>locale</b>s. There is however a big difference between what you <i>need</i> to know and what you <i>should</i> know. In particular, I think everyone <i>should</i> know that statements such as:</p> 

<pre>
ostrm &lt;&lt; 123.4;
</pre>

<p>or</p>

<pre>
istrm &gt;&gt; x;
</pre>

<p>where <b>x</b> is a numeric or Boolean value, use a <b>facet</b> to do the actual output or input of the value. I also think it is reasonable to know that <b>locale</b>s are an extensible framework that allows user-defined facilities to control just about any aspect of output or input that it might be reasonable to change for different locations or different cultures. If you know at least this much, then when a situation presents itself where it is reasonable to take advantage of the capabilities that <b>locale</b>s provide, you at least will know enough to go looking for more information (see <a href="#3">[3]</a>). In our business, ignorance is <i>not </i>bliss; it just results in more work and poorer quality software.</p> 
<p>Obviously, if you are really going to learn about <b>locale</b>s and <b>facet</b>s, you would probably start by first studying <b>locale</b>s, then the standard <b>facet</b>s, and finally explore the possibility of defining custom <b>facet</b>s. Since I don't have time or space to do a full tutorial on <b>locale</b>s, I am going to approach things in reverse. First, I am going to show you my <b>Temperature facet</b> class. Then I will explain the necessary details as I go along. My new header file for <b>Temperature</b> is shown in <a href="list2.htm">Listing 2</a>. I made a few tweaks, but with the exception of the nested <b>facet</b> class, it is basically the same as the version I presented last time. (I moved the implementation of <b>operater==</b> out of the header and changed the name of the manipulators for displaying the scale.)</p>
<p>I decided to make my <b>Temperature facet</b> a nested class within <b>Temperature</b>. I named it <b>temp_put</b>. The Standard library uses the naming conventions:</p> 

<UL>
 <LI><b>xxx_put</b> &#151; <b>facet</b>s that output something (usually via a <b>put</b> function)</LI>
 <LI><b>xxx_get</b> &#151; <b>facet</b>s that input something (usually via a <b>get</b> function)</LI>
 <LI><b>xxxpunct</span></font></b> &#151; <b>facet</b>s that provide formatting and punctuation information about something</LI>
</UL>

<p>My <b>Temperature facet</b> is publicly derived from the Standard base class <b>locale</b>::<b>facet</b> (as opposed to being derived from some other, existing <b>facet</b> class).</p> 
<p>My new <b>Temperature facet</b> is intended to introduce a new <b>facet</b> family &#151; in other words, it is not intended to be a member of one of the existing <b>facet</b> hierarchies. One of the requirements of a <b>facet</b> family is that the base class of the family must provide a static member object of type <b>locale::id</b>. A <b>locale</b>, which is fundamentally just a collection of <b>facet</b>s, will use this <b>id</b> to lookup a <b>Temperature::temp_put</b> <b>facet</b> in a <b>locale</b> when requested.</p>
<p>In addition to the static <b>id</b> member, my <b>Temperature facet</b> contains a data member (<b>_fmtr</b>) that is a pointer to an output helper function. This function is precisely the same output helper function that I would put in the <b>ostream</b> <b>pword</b> array, which I described in my last column <a href="#2">[2]</a>. The <b>Temperature::temp_put</b> constructor takes an argument that initializes this member. Finally, <b>temp_put</b> provides a member function <b>put</b>, which takes the same arguments as the helper function.</p> 
<p>Because the <b>temp_put</b> <b>facet</b> just forwards its operation to the helper function, I have shown its entire implementation inline in the header. A few things need extra explanation. One of these is the magic number &quot;1&quot; that is passed to the constructor of the base class <b>locale</b>::<b>facet</b>. All of the Standard <b>facet</b>s are designed to be created on the heap and be managed by a <b>locale</b> object. Constructing the <b>locale</b>::<b>facet</b> base class with an argument of &quot;0&quot; (the default) basically says that the <b>locale</b> is responsible for deleting the <b>facet</b> when it is no longer required. Constructing <b>locale</b>::<b>facet</b> with an argument of &quot;1&quot; disables this behavior and leaves memory management up to the client. Since I intend to create only static <b>temp_put</b> objects, this is necessary.</p> 
<p>Another thing to note is that the <b>put</b> function is marked as <b>const</b>. <b>facet</b>s are intended to be immutable after they are created. All references to a <b>facet</b> are <b>const</b> references, so all functions have to be <b>const</b> functions. This is also the reason that the copy constructor and assignment operator are private.</p> 
<p>After the declaration of <b>Temperature::temp_put</b>, I declare three public <b>static</b> members, <b>temp_put_asK</b>, <b>temp_put_asC</b>, and <b>temp_put_asF.</b> These are initialized in the implementation file (<a href="list3.htm">Listing 3</a>) with their corresponding helper functions.</p> 
<p>The only thing left in <b>Temperature</b> is to look at the changes to the <b>operator&lt;&lt;</b> function in <a href="list3.htm">Listing 3</a> necessary to support the custom <b>locale</b>. If a format is specified in the stream, then that is used instead of any <b>locale</b>. If no format is specified, then the function retrieves the <b>locale</b> for the stream and checks to see if there is a <b>Temperature::temp_put</b> <b>facet</b> in the <b>locale</b> (call to <b>std::has_facet</b>). If not, we have no default, so we indicate an error and quit. If the <b>facet</b> is available, we retrieve a reference to it by calling the <b>std::use_facet</b> function. Via this reference, we invoke the <b>put</b> function of the <b>facet</b>, which just invokes its helper function.</p>
<p>That's all there is to <b>Temperature</b>. In order to make use of this capability, we have to add the necessary <b>facet</b> to a <b>locale</b> that will become part of the <b>ostream</b> that <b>Temperature</b>'s <b>operator&lt;&lt;</b> uses. The simplest thing to do is add the <b>facet</b> to the global <b>locale</b>. This is the <b>locale</b> used by default when a stream is constructed. Because of the way <b>locale</b>s work, we cannot just add a <b>facet</b> to an existing <b>locale</b>. <b>locale</b>s, like <b>facet</b>s, are treated as immutable objects &#151; they can not be changed after they are created. Instead we have to construct a new <b>locale</b> that is a copy of an existing <b>locale</b> plus the additional <b>facet</b>. Naturally, there is a <b>locale</b> constructor that does this. Then we make the new <b>locale</b> the global <b>locale</b>.</p> 
<p>The code looks like this:</p>

<pre>
std::locale loc = std::locale(std::locale(),
    &amp;Util::Temperature::temp_put_asF);
std::locale::global(loc);
</pre>

<p>The first line constructs a <b>locale</b> that is a copy of the existing global <b>locale</b> (<b>std::locale</b>()). This <b>locale</b> is then used to construct a new <b>locale</b> that additionally takes a new <b>facet</b> (passed by reference). This <b>facet</b> will either replace an existing <b>facet</b> or be added, depending upon its <b>id</b>. The next line replaces the existing global <b>locale</b> with a copy of the one just created. In this example, the <b>facet</b> will cause <b>Temperature</b> values to be displayed in Fahrenheit.</p>
<p>Once the global <b>locale</b> has been updated, any new stream objects that are created will contain a <b>locale</b> with a <b>Temperature::temp_put</b> <b>facet</b> by default. This will not affect any existing streams however, so you might want to also do the following:</p> 

<pre>
std::cout.imbue(loc);
std::cerr.imbue(loc);
</pre>

<p>This will add the new <b>locale</b> to the existing <b>iostream</b> objects. If you are using wide streams, you might want to do the same thing to them. Naturally, this code belongs at the very top level of an application.</p>
<p>At this point, I am pretty sure that readers who actually know something about <b>locale</b>s and <b>facet</b>s are probably choking in disgust. I have managed to avoid almost every convention that the Standard library uses in creating my <b>Temperature facet</b>. Just to make sure they know I did it on purpose, I will now outline a number of possible improvements to <b>Temperature</b>'s I/O facility that I will leave as exercises for the reader (or for when I get around to them).</p>

<OL>
 <LI>The convention followed in the Standard library is for <b>facet</b> base classes to provide a standard interface with public functions (such as <b>put</b>), which invoke protected virtual functions to do the real work. These protected virtual functions are usually named <b>do_xxx</b> (e.g., <b>do_put</b>). I didn't follow this convention in <b>Temperature</b>'s <b>facet</b>, primarily because I was using a direct dispatching scheme instead of inheritance. It is certainly possible to create three subclasses of <b>Temperature::temp_put</b> instead of three static objects.</LI>
 <LI>The standard <b>facet</b>s that do input and output all work on iterators instead of directly on a stream. Furthermore, these <b>facet</b>s are templates that take the type of iterator as a template argument. This is obviously more flexible than what I have shown here. I decided to keep things simple for this example, but you should consider what would be required to change the <b>facet</b>'s <b>put</b> function to take an output iterator instead of an <b>ostream</b> as its target. Besides there is reason (3) below.</LI>
 <LI>There is obviously a lot of redundancy in the helper functions. It would make more sense to replace the helper functions with a class that provided functions to return the floating-point value to be output and the character representing the scale (to be used if needed). This sounds precisely like the type of functionality that a <i>punctuation</i>-style <b>facet</b> could provide. Minor changes to the <b>Temperature</b> class could allow a new <b>Temperature::punct</b> <b>facet</b> to serve both as a <b>facet</b> in a <b>locale</b> and as the target for the manipulators that determine the scale to use to display the <b>Temperature</b>. I suggest that you consider what changes this would require in <b>Temperature</b>. My version is shown in Listings <a href="list4.htm">4</a> and <a href="list5.htm">5</a>.</LI>
</OL>
<P>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>I noted above that using <b>facet</b>s and <b>locale</b>s provided a more general purpose solution than having a static default value in <b>Temperature</b>. The primary reason is flexibility. The static class <b>Temperature</b> default is pretty much all or nothing. Using a custom <b>facet</b>, however, makes it possible for the client to add it to the global <b>locale</b>, add it to a <b>locale</b> used just for one stream, add it to an application-specific <b>locale</b>, or even to have different <b>Temperature</b> defaults added to different <b>locale</b>s, which might be selected on the fly. </p>

<p>Naturally, the flip side of flexibility is added complexity &#151;  the client potentially has to know about the <b>facet</b>, has to create a new <b>locale</b> to contain the <b>facet</b>, has to make that <b>locale</b> the global <b>locale</b>, etc. Fortunately, a lot of this can be hidden. One possibility is for <b>Temperature</b> to provide a static initialization function that would do all of this for the client. Such a function could even be invoked automatically at startup. This would provide the appearance of a global default output scale for <b>Temperature</b>, while still allowing the client the flexibility to change things. This little example just begins to show what might be necessary to create a truly reusable library component that makes use of a custom <b>facet</b>.</p>

<p>As I noted in the beginning, designing reusable, general purpose classes is not trivial. A well-designed class tends to be trivial to use however. Hopefully, I have shown that adding custom <b>facet</b>s to a class design is not that difficult and esoteric. Likewise, I also hope that perhaps this little introduction has given you some hint of how <b>facet</b>s and <b>locale</b>s can be useful. In the ultimate case, a site might want to add custom <b>facet</b>s for a class like <b>Temperature</b> to existing <b>locale</b>s so that they would automatically be there just like the C++ Standard <b>facet</b>s.</p>


<H3><FONT COLOR="#000080">References</FONT></H3>


<p><a name="1"></a>[1]  Jack Reeves. &quot;The (B)Leading Edge: Using IOStreams &#151; part I,&quot; <i>The C/C++ User's Journal Experts Forum</i>, January 2001, <b>http://www.cuj.com/experts/1901/reeves.htm</b>.</p>
<p><a name="2"></a>[2]  Jack Reeves. &quot;The (B)Leading Edge: Using IOStreams &#151; part II,&quot; <i>The C/C++ User's Journal</i> <i>Experts Forum</i>, March 2001, <b>http://www.cuj.com/experts/1903/reeves.htm</b>.</p>
<p><a name="3"></a>[3]  Angelika Langer and Klaus Kreft. <i>Standard C++ Iostreams and Locales: Advanced Programmer's Guide and Reference</i> (Addison-Wesley, 2000).</p>

<p><i><B>Jack W. Reeves</b> is an engineer and consultant specializing in object-oriented software design and implementation. His background includes Space Shuttle simulators, military CCCI systems, medical imaging systems, financial data systems, and numerous middleware and low-level libraries. He currently is living and working in Europe and can be contacted via <b>jack_reeves@bleading-edge.com</b>.</i></p>

<h4><a href="../../../source/2001/may01/reeves.zip"></a></h4>


</BLOCKQUOTE></BODY></HTML>
