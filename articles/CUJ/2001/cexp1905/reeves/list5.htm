<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge/Listing 5</TITLE></HEAD>

<BODY>

<h4>Listing 5 &#151; Temperature.cpp (alt)</h4>
<pre>
// My header
#include &quot;Temperature.h&quot;

#include &lt;ostream&gt;
#include &lt;istream&gt;
#include &lt;stdexcept&gt;

namespace Util {

// iword / pword index
const int Temperature::strm_index =
std::ios::xalloc();

// Facet id
std::locale::id            Temperature::punct::id;

// static facets
Temperature::punct        Temperature::punct_asK(&amp;Temperature::inK, 'K');
Temperature::punct        Temperature::punct_asC(&amp;Temperature::inC, 'C');
Temperature::punct        Temperature::punct_asF(&amp;Temperature::inF, 'F');


// manipulators
std::ostream&amp;
Temperature::asK(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;punct_asK;
    return os;
};

std::ostream&amp;
Temperature::asC(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;punct_asC;
    return os;
};

std::ostream&amp;
Temperature::asF(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;punct_asF;
    return os;
};

std::ostream&amp; 
Temperature::showscale(std::ostream&amp; os)
{
    os.iword(strm_index) = 1;
    return os;
};

std::ostream&amp;
Temperature::noscale(std::ostream&amp; os)
{
    os.iword(strm_index) = 0;
    return os;
};


// ostream inserter
std::ostream&amp;
operator&lt;&lt;(std::ostream&amp; os, Temperature obj)
{
    int idx = Temperature::strm_index;
    const Temperature::punct* fac =
        reinterpret_cast&lt;Temperature::punct*&gt;(os.pword(idx));

    if (not fac) {
        std::locale loc = os.getloc();
        bool found = std::has_facet&lt;Temperature::punct&gt;(loc);
        if (not found) {
            os.setstate(std::ios::failbit);    // may throw exception
            return os;
        }
        fac = &amp;std::use_facet&lt;Temperature::punct&gt;(loc);
    }

    bool show_scale = os.iword(idx) bitand 1;

    int width = os.width();
    if (show_scale and width &gt; 0) 
        os.width(width-1);
        
    os &lt;&lt; fac-&gt;value(obj);
    if (show_scale) os &lt;&lt; fac-&gt;scale();
    return os;
}

// istream extractor
std::istream&amp;
operator&gt;&gt;(std::istream&amp; is, Temperature&amp; obj)
{
    // Assumed to be in format 'nn.nX' where 'X' is F/C/K
    // Read the number
    float val = -1.0;
    is &gt;&gt; val;
    
    // Get next character
    int ch = is.get();
    switch (char(ch)) {
    case 'F':
        obj = Temperature::inF(val);
        break;
    case 'C':
        obj = Temperature::inC(val);
        break;
    case 'K':
        obj = Temperature::inK(val);
        break;
    default:
        is.setstate(std::ios::failbit);    // may throw exception
        obj = Temperature::inK(-1.0);
    }
    return is;
}


} //&gt; namespace
</pre>
</body>

</html>
