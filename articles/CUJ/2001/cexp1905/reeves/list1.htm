<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY>

<h4>Listing 1 - Read Only String_streams</h4>
<pre>
#include &lt;iostream&gt;

//
// Read-only String streams
//
template&lt;typename StringT&gt;
class iString_streambuf : public std::streambuf {
    // typedefs
    typedef std::streambuf    inherited;

public:
    iString_streambuf(StringT&amp; str);
    virtual ~iString_streambuf();
};


// iString_stream
template&lt;typename StringT&gt;
class iString_stream : public std::istream {
    // types
    typedef std::istream inherited;

    // data
    iString_streambuf&lt;StringT&gt;    _streambuf;

public:
    iString_stream(StringT&amp; str);
    ~iString_stream();
};


//
// implementation
//
template&lt;typename StringT&gt;
iString_streambuf&lt;StringT&gt;::iString_streambuf(StringT&amp; str)
{
    char* gbuf = const_cast&lt;char*&gt;(str.data());
    setg(gbuf, gbuf, gbuf+str.size());
}


template&lt;typename StringT&gt;
iString_streambuf&lt;StringT&gt;::~iString_streambuf()
{
    // empty
}


template&lt;typename StringT&gt;
iString_stream&lt;StringT&gt;::iString_stream(StringT&amp; str)
    : inherited(0),
    _streambuf(str)
{
    init(&amp;_streambuf);
}


template&lt;typename StringT&gt;
iString_stream&lt;StringT&gt;::~iString_stream()
{
    // empty
}
</pre>
</body>
</html>
