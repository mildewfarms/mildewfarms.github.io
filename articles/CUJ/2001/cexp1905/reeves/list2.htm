<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge/Listing 2</TITLE></HEAD>

<BODY>

<h4>Listing 2 - Temperature.h</h4>

<pre>   
#ifndef UTIL_TEMPERATURE_H
#define UTIL_TEMPERATURE_H
    
#include &lt;platform.h&gt;
    
#include &lt;iosfwd&gt;
#include &lt;locale&gt;
    
namespace Util {
    
class Temperature {
    // data
    float        _val;
public:
    // LWC
    Temperature() {}
    
    // access
    float        inK() const        { return _val; }
    float        inC() const        { return inK() - 273.15; }
    float        inF() const        { return (inC() * 9 / 5) + 32; }
    
    // creation
    static Temperature    inK(float val);
    static Temperature    inC(float val);
    static Temperature    inF(float val);
    
    // Facet
    typedef std::ostream&amp; (*Formater)(std::ostream&amp;, Temperature, long);
    class temp_put : public std::locale::facet { 
        typedef std::locale::facet inherited;
        Formater    _fmtr;
    public:
        static std::locale::id id;
        temp_put(Formater fmtr) 
            : inherited(1), _fmtr(fmtr)
            {}
        std::ostream&amp; put(std::ostream&amp; os, Temperature t, long flags) const
            { return _fmtr(os, t, flags); }
    private:
        temp_put(const temp_put&amp;);
        temp_put&amp; operator=(const temp_put&amp;);
    };
    
    static temp_put temp_put_asK;
    static temp_put temp_put_asC;
    static temp_put temp_put_asF;
    
protected:
    Temperature(float val) : _val(val) {}
    
    
    // iostream operations
public:
    // iword/pword index
    static const int        strm_index;
    
    // manipulators
    static std::ostream&amp;    asK(std::ostream&amp;);
    static std::ostream&amp;    asC(std::ostream&amp;);
    static std::ostream&amp;    asF(std::ostream&amp;);
    static std::ostream&amp;    showscale(std::ostream&amp;);
    static std::ostream&amp;    noscale(std::ostream&amp;);
    
private:
    // formaters
    static std::ostream&amp;    _putK(std::ostream&amp;, Temperature obj, long flags);
    static std::ostream&amp;    _putC(std::ostream&amp;, Temperature obj, long flags);
    static std::ostream&amp;    _putF(std::ostream&amp;, Temperature obj, long flags);
};
    
// comparison operators
bool operator==(Temperature lhs, Temperature rhs);
    
inline bool 
operator!=(Temperature lhs, Temperature rhs)
{ return !(lhs == rhs); }
    
inline bool 
operator&lt; (Temperature lhs, Temperature rhs)
{ return lhs.inK() &lt; rhs.inK(); }
    
inline bool 
operator&lt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }
    
inline bool 
operator&gt; (Temperature lhs, Temperature rhs)
{ return lhs &lt; rhs; }
    
inline bool 
operator&gt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }

// I/O operators
std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, Temperature obj);
std::istream&amp; operator&gt;&gt;(std::istream&amp;, Temperature&amp; obj);
    
// inline functions
inline Temperature
Temperature::inK(float val)
{ return Temperature(val); }
    
inline Temperature
Temperature::inC(float val)
{ return Temperature(val + 273.15); }
    
inline Temperature
Temperature::inF(float val)
{ return Temperature( ((val - 32) * 5 / 9) + 273.15); }
    
} //&gt; namespace
    
#endif
    
<pre>
</body>
</html>
