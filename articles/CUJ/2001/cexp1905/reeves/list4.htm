<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge/Listing 4</TITLE></HEAD>

<BODY>

<h4>Listing 4 &#151; Temperature.h (alt)</h4>
<pre>
#ifndef UTIL_TEMPERATURE_H
#define UTIL_TEMPERATURE_H

#include &lt;platform.h&gt;

#include &lt;iosfwd&gt;
#include &lt;locale&gt;

namespace Util {

class Temperature {
    // data
    float    _val;
public:
    // LWC
    Temperature() {}

    // access
    float    inK() const    { return _val; }
    float    inC() const    { return inK() - 273.15F; }
    float    inF() const    { return (inC() * 9 / 5) + 32; }

    // creation
    static Temperature    inK(float val);
    static Temperature    inC(float val);
    static Temperature    inF(float val);

    // Facet
    typedef std::ostream&amp; (*Formater)(std::ostream&amp;, Temperature, long);
    class punct : public std::locale::facet {
    public:
        typedef std::locale::facet inherited;
        typedef float (Temperature::*ValueFunc)()const;
    private:
        ValueFunc        _valueFunc;
        char            _scale;
    public:
        static std::locale::id id;
        punct(ValueFunc func, char scale) 
        : inherited(1), _valueFunc(func), _scale(scale) {}

        // access
        float    value(Temperature t) const    { return (t.*_valueFunc)(); }
        char     scale() const        { return _scale; }
    };

    // static facets
    static punct    punct_asK;
    static punct    punct_asC;
    static punct    punct_asF;

protected:
    Temperature(float val) : _val(val) {}

public:
    // iostream operations
    static const int    strm_index;    // iword/pword index
    
    // manipulators
    static std::ostream&amp;    asK(std::ostream&amp;);
    static std::ostream&amp;    asC(std::ostream&amp;);
    static std::ostream&amp;    asF(std::ostream&amp;);
    static std::ostream&amp;    showscale(std::ostream&amp;);
    static std::ostream&amp;    noscale(std::ostream&amp;);
};

// comparison operators
bool operator==(Temperature lhs, Temperature rhs);

inline bool 
operator!=(Temperature lhs, Temperature rhs)
{ return !(lhs == rhs); }

inline bool 
operator&lt; (Temperature lhs, Temperature rhs)
{ return lhs.inK() &lt; rhs.inK(); }

inline bool 
operator&lt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }

inline bool 
operator&gt; (Temperature lhs, Temperature rhs)
{ return lhs &lt; rhs; }

inline bool 
operator&gt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }

// I/O operators
std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, Temperature obj);
std::istream&amp; operator&gt;&gt;(std::istream&amp;, Temperature&amp; obj);

// inline functions
inline Temperature 
Temperature::inK(float val)
{ return Temperature(val); }

inline Temperature
Temperature::inC(float val)
{ return Temperature(val + 273.15F); }

inline Temperature
Temperature::inF(float val)
{ return Temperature( ((val - 32) * 5 / 9) + 273.15F); }

} //&gt; namespace

#endif
</pre>
</body>

</html>
