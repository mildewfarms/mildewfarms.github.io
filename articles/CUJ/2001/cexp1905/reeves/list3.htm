<HTML><HEAD>
<TITLE>May 2001 C++ Experts Forum/The (B)Leading Edge/Listing 3</TITLE></HEAD>

<BODY>

<h4>Listing 3 - Temperature.cpp</h4>
<pre>
// My header
#include &quot;Temperature.h&quot;

#include &lt;ostream&gt;
#include &lt;istream&gt;
#include &lt;stdexcept&gt;

namespace Util {

// iword / pword index
const int Temperature::strm_index = std::ios::xalloc();

// Facet id
std::locale::id            Temperature::temp_put::id;

// Static facets
Temperature::temp_put    Temperature::temp_put_asK(&amp;_putK);
Temperature::temp_put    Temperature::temp_put_asC(&amp;_putC);
Temperature::temp_put    Temperature::temp_put_asF(&amp;_putF);


// manipulators
std::ostream&amp;
Temperature::asK(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;_putK;
    return os;
};

std::ostream&amp;
Temperature::asC(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;_putC;
    return os;
};

std::ostream&amp;
Temperature::asF(std::ostream&amp; os)
{
    os.pword(strm_index) = &amp;_putF;
    return os;
};

std::ostream&amp;
Temperature::showscale(std::ostream&amp; os)
{
    os.iword(strm_index) = 1;
    return os;
};

std::ostream&amp;
Temperature::noscale(std::ostream&amp; os)
{
    os.iword(strm_index) = 0;
    return os;
};

// output formaters
std::ostream&amp;
Temperature::_putK(std::ostream&amp; os, Temperature obj, long flags)
{
    bool show_scale = flags bitand 1;
    int width = os.width();
    if (show_scale and width &gt; 0) 
        os.width(width-1);
        
    os &lt;&lt; obj.inK();
    if (show_scale) os &lt;&lt; 'K';
    return os;
}

std::ostream&amp;
Temperature::_putC(std::ostream&amp; os, Temperature obj, long flags)
{
    bool show_scale = flags bitand 1;
    int width = os.width();
    if (show_scale and width &gt; 0) 
        os.width(width-1);
        
    os &lt;&lt; obj.inC();
    if (show_scale) os &lt;&lt; 'C';
    return os;
}

std::ostream&amp;
Temperature::_putF(std::ostream&amp; os, Temperature obj, long flags)
{
    bool show_scale = flags bitand 1;
    int width = os.width();
    if (show_scale and width &gt; 0) 
        os.width(width-1);
        
    os &lt;&lt; obj.inF();
    if (show_scale) os &lt;&lt; 'F';
    return os;
}

// ostream inserter
std::ostream&amp;
operator&lt;&lt;(std::ostream&amp; os, Temperature obj)
{
    int idx = Temperature::strm_index;
    Temperature::Formater fmt = Temperature::Formater(os.pword(idx));
    if (fmt)
        return fmt(os, obj, os.iword(idx));

    // no format specified, check the locale
    std::locale loc = os.getloc();
    bool found = std::has_facet&lt;Temperature::temp_put&gt;(loc));
    if (not found) {
        os.setstate(std::ios::failbit);    // may throw exception
        return os;
    }

    // get and use the facet
    const Temperature::temp_put&amp; fac =
       std::use_facet&lt;Temperature::temp_put&gt;(loc));
    return fac.put(os, obj, os.iword(idx));
}


// istream extractor
std::istream&amp;
operator&gt;&gt;(std::istream&amp; is, Temperature&amp; obj)
{
    // Assumed to be in format 'nn.nX' where 'X' is F/C/K
    // Read the number
    float val = -1.0;
    is &gt;&gt; val;
    
    // Get next character
    int ch = is.get();
    switch (char(ch)) {
    case 'F':
        obj = Temperature::inF(val);
        break;
    case 'C':
        obj = Temperature::inC(val);
        break;
    case 'K':
        obj = Temperature::inK(val);
        break;
    default:
        is.setstate(std::ios::failbit);    // may throw exception
        obj = Temperature::inK(-1.0);
    }
    return is;
}


} //&gt; namespace

</pre>

</body>

</html>
