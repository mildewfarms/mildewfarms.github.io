<HTML>   
     <HEAD>
<TITLE>May 2001 C++ Experts Forum/Column Title</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.05/tocmay.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: CORBA and XML, Part 1: Versioning</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Douglas C. Schmidt and Steve Vinoski</FONT></H3>

<HR>
<BLOCKQUOTE>


<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>A frequently asked question in CORBA circles these days is how the XML (eXtensible Markup Language)  <a href="#1">[1]</a> relates to CORBA applications. Since there's so much hype surrounding XML, it's hard to know what its real benefits are for CORBA-based systems. We've actually heard people say, &quot;Why use CORBA when you can use XML?&quot; Statements like this show there is significant confusion about what XML is, what it isn't, and specifically where it overlaps with CORBA, if at all.</p>
<p>In this column, we discuss how XML fits into the overall CORBA picture. To keep the column focused, we assume you have basic knowledge of XML. If you don't possess such knowledge, please refer to our favorite XML book, <i>Essential XML</i>  <a href="#2">[2]</a>. As books go, it's one of those rare gems that can serve as both a tutorial and a reference.</p>

<H3><FONT COLOR="#000080">XML &#151; A Strongly-Hyped Language?</FONT></H3>

<p>Some consider XML to be the next silver bullet. The sensible and experienced among us know, however, that no single tool can solve all the world's vexing technology challenges &#151; not even CORBA! Like all other hype-ridden computing fads, XML is good for solving some things, but it can't solve everything. Unfortunately, the hype surrounding XML often conceals its real utility.</p>
<p>Comparing CORBA and XML is a classic case of comparing apples and oranges. XML is neither a distributed computing system nor a transport protocol. XML doesn't provide messaging or remote procedure calls. It doesn't allow you to invoke methods on distributed objects, nor does it dispatch incoming requests to programming language servants. It certainly doesn't address the inherent complexities of distributed systems, such as latency hiding, partial failures, causal ordering, or information assurance. On the other hand, CORBA is not a markup language. Its primary purpose is not the structured representation and definition of information, though it does provide support for such tasks via IDL.</p> 
<p>XML and CORBA are mostly complementary. Fundamentally, CORBA is oriented around method invocation, while XML is all about describing data. They solve different problems. It's therefore not unreasonable to want to use them together, or even to hope that the sum is greater than the parts. In this column, we begin exploring the topic of versioning to compare and contrast CORBA and XML.</p> 

<H3><FONT COLOR="#000080">Versioning in CORBA</FONT></H3>

<p>One of the biggest drawbacks of OMG IDL is that it lacks practical versioning support. For example, assume you're writing a bug tracking system, and you define a <b>Bug</b> type in IDL as follows:</p>

<pre>
struct Bug {
    long bugnum;
    string synopsis;
    string owner;
};
</pre>

<p>You proceed to write your bug tracking server application along with clients that allow you to submit new bugs as well as modify and browse your existing bugs.</p>
<p>As more users adopt your bug tracking system, they'll naturally want to extend it. One feature they'll undoubtedly want is to know who reported a given bug. So you go back to your <b>Bug</b> <b>struct</b> and change it by adding a new <b>reported_by</b> field:</p>

<pre>
struct Bug {
    long bugnum;
    string synopsis;
    string owner;
    string reported_by;  // added field
};
</pre>

<p>You recode your server application to take this new field into account and upgrade your running bug server. Unfortunately, all of your client applications break immediately, and your users start ringing your phone off its hook wondering why their bug tracking system no longer works. Assuming it's not feasible to apply the famous demotivational dictum  <a href="#3">[3]</a> &quot;Apathy: if we don't take care of the customer, maybe they'll stop bugging us,&quot; you'll need to devise a versioning strategy.</p>
<p>Some might point out that OMG IDL supports a versioning pragma. For example, when we add the field to the <b>Bug</b> <b>struct</b>, we might modify its version like this:</p>

<pre>struct Bug { ... };  //new updated version

#pragma version Bug 1.1</pre>

<p>This changes the version of the <b>Bug</b> <b>struct</b> from the default 1.0 (major version 1, minor version 0) to version 1.1. Unfortunately, this does absolutely nothing to address the problem. First, no version information for data types is passed between applications as part of requests or replies, so an application is unable to tell what version of a type it's sending or receiving. Second, the CORBA specification does not define how this version number should be modified when the data type changes. In other words, it fails to explain what constitutes a major modification, requiring a change in the major version number, and a minor modification, requiring a change in only the minor version number. It also fails to define compatibility rules between different version numbers. In other words, it's useless for all practical purposes.</p>
<p>The CORBA standard interoperability protocol, GIOP, is also partly to blame for versioning problems in CORBA applications. One of the fundamental design considerations of GIOP is that it carries no type information. It expects the target of a request to understand the types of all data being sent to it in that request. This design approach makes sense, given that an object always implicitly knows its interface and thus knows all types used by the operations and attributes of that interface. After all, if the object didn't know its own interface, it wouldn't be able to respond to client requests. GIOP takes advantage of this fact to avoid sending unneeded type information with every request. However, that choice means that types are not identified on the network (except for the value inside an <b>Any</b>), so applications are unable to receive types they do not expect or understand.</p>
<p>In our example, assume that a bug tracking client application invokes a request to get the details of bug number 49938. The bug tracking server application creates a <b>Bug</b> <b>struct</b>, fills in the details of bug number 49938 including the <b>reported_by</b> field, and returns the <b>Bug</b> <b>struct</b> to the caller. Unfortunately, the client was built with the original definition of the <b>Bug</b> <b>struct</b>, so it doesn't expect the reply to contain a value for the new <b>reported_by</b> field. As a result of this extra data in the reply, the client's ORB is unable to properly unmarshal it, so it raises a <b>CORBA::MARSHAL</b> exception back up to the client application. The net result is that clients are unable to communicate properly with the bug tracking server until they've all been recompiled with the new definition of the <b>Bug</b> <b>struct</b> and redeployed. Thus, all your users are dead in the water until they upgrade.</p>
<p>Obviously, directly changing the <b>Bug</b> <b>struct</b> was a bad idea, as it resulted in your clients and servers having different definitions for the same data type. Fortunately, though, there are other techniques for handling these types of versioning problems in CORBA. For example, rather than directly changing the definition of <b>Bug</b>, you can create a new type with the extra field:</p> 

<pre>
struct Bug2 {  // new type
    long bugnum;
    string synopsis;
    string owner;
    string reported_by;
};
</pre>

<p>Leaving the original <b>Bug</b> type unchanged, you instead augment the bug tracking interface to accept both the original <b>Bug</b> type and the new <b>Bug2</b> type. However, if you change the interface directly, you wind up once again needing to recompile and redeploy all your client applications so that they all have the same interface definition as the server. To augment an interface without changing it, you can apply a common CORBA versioning strategy based on inheritance and the Extension Interface pattern  <a href="#4">[4]</a>. For example, assume you defined the original interface as follows:</p> 

<pre>
interface BugTracker {
    exception NoSuchBug { long bugnum; };
    Bug get_details(in long bugnum) raises(NoSuchBug);
    // ...
};
</pre>

<p>To augment it to also handle the new <b>Bug2</b> type, you derive a new interface, like this:</p>

<pre>
interface BugTracker2 : BugTracker {
    // Remember, CORBA IDL doesn't allow operation
    // overloading, so we must rename this operation.
    Bug2 get_details2(in long bugnum} raises(NoSuchBug);
    // ...
};
</pre>

<p>You recode your server application to make your servants support the <b>BugTracker2</b> interface, and due to inheritance, they also still support the original <b>BugTracker</b> interface. Any clients that know only the original <b>BugTracker</b> interface continue to work and need not be rewritten, recompiled, or redeployed. New clients built specifically to use the new <b>BugTracker2</b> interface work as well. Both types of clients continue to work because each type of client can successfully narrow to the specific interface it understands. Old clients narrow to <b>BugTracker</b> and rely only on its operations and data types, while new clients narrow to <b>BugTracker2</b> and, because of inheritance, can still make use of the base <b>BugTracker</b> interface as well.</p> 
<p>At first glance, this approach doesn't appear so bad. After all, by applying the Extension Interface pattern in the second approach, we added the necessary feature to the system without breaking any existing clients. Unfortunately, it's not so simple. What if the users now want to add another <b>Bug</b> field, this time to keep track of the date each bug was reported? Each change requires a new <b>struct</b> type and a new derived interface, with all new operations to handle the new <b>struct</b> type. In our example, we chose poor names for our new types by simply tacking a &quot;2&quot; onto the end of the original type names. Although long-time COM programmers might find the Extension Interface pattern intuitive, most CORBA/C++ programmers would get confused if they had four, five, or more versions to deal with simultaneously.</p>
<p>Brittleness is one of the biggest problems with data types defined in IDL. By &quot;brittle&quot; we mean that the types are hard to modify or version in practice without finding and changing all applications that use them. If you're lucky, you might get away with some simple changes like we did using the Extension Interface pattern in our example above, but most real-world applications aren't so lucky.</p> 

<H3><FONT COLOR="#000080">Another Versioning Approach</FONT></H3>

<p>One way to try to avoid the brittleness explained above is to explicitly make your data types flexible and extensible to begin with. For example, consider the following classic type:</p>

<pre>
struct NamedValue {
    string name;
    any value;
};
</pre>

<p>This type is capable of holding any named data. CORBA tends to use this data type (or a sequence thereof) wherever it has to be able to handle any data type, such as in the parameter list for a request invoked through the DII (Dynamic Invocation Interface).</p> 
<p>Using this flexible type, we can redefine our original <b>Bug</b> type:</p>

<pre>
typedef sequence&lt;NamedValue&gt; Bug;
</pre>

<p>Instead of a <b>struct</b>, <b>Bug</b> is now a sequence of named values. We've adopted the convention that each member of the sequence corresponds to a field in the original <b>struct</b>. In our original versioning problem, we wanted to add a new string member to our <b>Bug</b> <b>struct</b> named <b>reported_by</b>. With this new approach, adding a new field is trivial because we need only add a new item to our sequence:</p>

<pre>
CORBA::ULong len = my_bug.length();
my_bug.length(len + 1);
my_bug[len].name = CORBA::string_dup(&quot;reported_by&quot;);
my_bug[len].value &lt;&lt;= &quot;elvis&quot;;
</pre>

<p>As long as all clients and servers using the <b>Bug</b> type follow the convention of indexing through a <b>Bug</b> field by field and operating only on those fields whose names they understand, all is well. You can add any field of any type you want to a <b>Bug</b>, and as long as you give that field a unique name, no properly coded application using the <b>Bug</b> type will break.</p>
<p>Unfortunately, this approach to type extensibility also has problems:</p>

<UL>
 <LI><i>It lacks compile-time type safety</i>. Any application can set the <b>Any</b> portion of a <b>NamedValue</b> to any type they like, and all applications must therefore check the type encoded in that <b>Any</b> before attempting to use it.</LI>
 <LI><i>It lacks structure</i>. Any application can create a <b>Bug</b> using any names and values for the fields. Two applications might decide to add a field with the same name, but with different types for the value.</LI>
 <LI><i>It lacks capability</i>. The C++ mapping of the IDL sequence type  <a href="#5">[5]</a> is essentially a vector that lacks operations for appending or inserting at a given index. Creating a more capable type, such as a linked list or hash table, requires that you use IDL value types  <a href="#6">[6]</a>, which not all ORBs support.</LI>
 <LI><i>It's inefficient</i>. <b>Any</b> data types generally incur greater time and space overhead than other IDL data types. Although some ORBs optimize away some of this overhead, the <b>Any</b>-based approach will undoubtedly be bigger and slower than the original <b>struct</b>-based solution.</LI>
 <LI><i>It requires additional programming effort</i>. Perhaps worst of all, this approach requires a custom library built around the IDL sequence type to achieve type extensibility. The library must be able to manipulate fields by name and would need type information from the application to perform these manipulations correctly. The <b>DynAny</b> type  <a href="#7">[7]</a> could come in handy for such a library. If you're smart or lucky enough, you might recognize in advance that this approach is useful for more than just your bug tracking system and create a general-purpose library to manipulate lists of <b>NamedValue</b>s.</LI>
</UL>

<H3><FONT COLOR="#000080">Versioning with XML</FONT></H3>

<p>Unlike IDL, XML is designed to be extensible. Due to its flexibility, XML has become the &quot;lingua franca&quot; for data definition. This common language has two simple facts in its favor:</p>

<OL>
 <LI>XML can describe essentially any type of structured information in a regular and recognizable fashion. Data is represented using elements and attributes, with elements arranged hierarchically to impose structure.</LI>
 <LI>There exist a set of standard domain-independent tools for dealing with XML data definitions. Tools such as the DOM (Document Object Model)  <a href="#8">[8]</a>, the SAX (Simple API for XML)  <a href="#9">[9]</a>, and XSLT (XSL Transformations)  <a href="#10">[10]</a> provide standard ways for creating, examining, and manipulating XML definitions, regardless of the data they describe.</LI>
</OL>

<p>XML allows you to avoid creating custom data definitions for your applications and also allows you to avoid creating custom tools to create, read, manipulate, and write those custom data definitions. This benefit is significant. The guts of many applications are primarily for data creation and manipulation, so if we can avoid creating and maintaining our own custom data and custom code to manipulate that data, we can realize significant savings in the cost of developing our software.</p> 
<p>Since XML elements are tagged, they are often touted as being &quot;self-describing.&quot; Of course, this is only partially true. Obviously, the tags identify the element data, but anyone dealing with the element must still understand the semantics implied by the tags, as well as the semantics of the data itself. Note, by the way, that CORBA applications that exchange <b>Any</b> data types have exactly the same issues.</p> 
<p>For our bug tracking example, we might instead define our bug data in XML. The following shows an example of a bug defined in XML:</p>

<pre>
&lt;bug&gt;
    &lt;bugnum&gt;49938&lt;/bugnum&gt;
    &lt;synopsis&gt;DynStruct broken&lt;/synopsis&gt;
    &lt;owner&gt;vinoski&lt;/owner&gt;
    &lt;reported_by&gt;schmidt&lt;/reported_by&gt;
&lt;/bug&gt;
</pre>

<p>For now, we won't focus on the details of this definition, though it should be intuitive to anyone who's seen XML (or even HTML) before. Instead, we want to focus on how manipulating this <b>bug</b> definition compares with manipulating the IDL <b>Bug</b> type based on the <b>NamedValue</b> type.</p> 

<UL>
 <LI>The IDL <b>NamedValue</b> approach relies on convention. Because the <b>NamedValue</b>-based <b>Bug</b> is a non-encapsulated data structure, chances are that some application will get the conventions wrong and manipulate the data incorrectly. You could, of course, wrap the sequence into a value type to encapsulate it, but then you risk reintroducing the GIOP versioning problems described above if your value type definition contains private data members that could change as a result of system evolution.</LI>
     <P>With the XML approach, convention isn't needed. It's easy to see how the XML <b>bug</b> definition corresponds to our original <b>Bug</b> struct, as the two even have similar appearances. We can't say the same for the <b>NamedValue</b> approach. Also, unlike with the <b>NamedValue</b> approach, the element names (e.g., &quot;reported_by&quot; and &quot;bugnum&quot;) of the XML <b>bug</b> are not just strings chosen by convention, but are part of the type definition.</p>
 <LI>The IDL approach requires custom coding to manipulate the <b>Bug</b> sequence, as we described above.</LI>
     <p>With the XML approach, we can use standard tools, such as DOM or SAX, to manipulate <b>bug</b> instances in our applications. The DOM approach builds an in-memory tree representation of the <b>bug</b> structure, allowing our application to navigate the tree to examine and change values. SAX provides an event-driven API that allows us to register interest in certain XML parsing events, such as when a particular element starts and ends. For example, we could register callback handlers for each of the <b>bug</b> fields in order to process an incoming bug report. Implementations of both DOM and SAX are easy to find, such as the free tools of the Apache XML Project (available at <b>http://xml.apache.org/</b>). Once you learn to use them for one application, they work the same for your other applications, even if the XML data for those applications is completely different.</p>
 <LI>Versioning with the IDL approach, as described above, is problematic.</LI>
     <p>With the XML approach, the <b>bug</b> definition can be extended without much trouble. For example, to add another field that records the date on which the bug was filed, we need only add a new <b>&lt;reported_on&gt;</b> element. Applications that don't understand that element can ignore it, while those that do understand it can make use of it. This explanation is somewhat simplified, as it's possible to be much more strict about this by validating a <b>bug</b> instance against a schema definition or DTD. (We have not shown a schema definition or DTD for our <b>bug</b> definition, but it would be similar to a type definition in a regular programming language.) However, unlike in the IDL case where it's simply impossible to fool GIOP into allowing a <b>struct</b> to be extended, the choice of whether to use schema validation is entirely up to the XML-based application.</p>
</UL>

<p>Using XML to define your data types provides more flexibility for applications that need it, but note that you still need interfaces so that you can pass the XML data between applications. CORBA systems using XML end up using IDL to define the interfaces and methods supported by the system and using XML to define the data that's manipulated and exchanged within the system. Thus, we end up with the best of both worlds. Of course, the use of XML can still have some drawbacks because it, like the CORBA <b>Any</b> data types, generally incurs non-trivial time and space overhead for encoding/decoding, transmission, and parsing. While many business applications can afford this overhead, for other applications (particularly performance-sensitive real-time and embedded systems) it's a showstopper.</p>
<p>The final key to the puzzle is how best to pass XML between CORBA applications. One obvious approach is to simply send XML documents as strings or wstrings, and in fact many CORBA applications do this today. However, it's not always the best approach, and we'll discuss why in our next column.</p> 

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<p>In this column, we investigated the OMG IDL versioning problem. We showed that IDL data definitions are brittle in the face of extension and evolution. We presented several approaches to handling versioning in CORBA systems, including how XML fits into the picture. Overall, applications whose data types change frequently should avoid defining those types in IDL and should instead define them in XML. This results in a system that uses IDL to define the interfaces and methods &#151; the system control points &#151; and uses XML to flexibly define the data that the system manipulates. Such systems play to the strengths of both IDL and XML, while avoiding many of their weaknesses.</p> 
<p>Our next column will investigate more of the relationship between CORBA and XML, including a look at the OMG XMLDOM specification, as well as a discussion of SOAP, CORBA, and web services. We look forward to it and hope you do too.</p>


<p>Please feel free to comment on this column, or on any of our previous columns, by emailing us at <b>object_connect@cs.wustl.edu</b>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>


<p><a name="1"></a>[1]  Extensible Markup Language (XML) 1.0 (Second Edition). W3C Recommendation. World Wide Web Consortium, <b>http://www.w3.org/TR/REC-xml</b>, October 6, 2000.</p>
<p><a name="2"></a>[2]  D. Box, A. Skonnard, and J. Lam. <i>Essential XML: Beyond Markup</i> (Addison Wesley, 2000).</p>
<p><a name="3"></a>[3]  <i>Apathy</i>, <b>http://www.cs.wustl.edu/~schmidt/demotivation.html</b>.</p>
<p><a name="4"></a>[4]  D.C Schmidt, M. Stal, H. Rohnert, and F. Buschmann: <i>Pattern-Oriented Software Architecture: Patterns for Concurrency and Distributed Objects, Volume 2</i> (Wiley &amp; Sons, 2000), <b>http://www.posa.uci.edu/</b>.</p>
<p><a name="5"></a>[5]  Object Management Group. IDL C++ Language Mapping. <b>http://www.omg.org/technology/documents/formal/c++.htm</b>, 1999.</p>
<p><a name="6"></a>[6]  Object Management Group. CORBA 2.3.1 Specification. <b>http://www.omg.org/technology/documents/formal/corba_2.htm</b>, 1999.</p>
<p><a name="7"></a>[7]  Michi Henning and Steve Vinoski. <i>Advanced CORBA Programming with C++</i> (Addison Wesley, 1999).</p>
<p><a name="8"></a>[8]  Document Object Model (DOM) Level 2 Core Specification. W3C Recommendation. World Wide Web Consortium, <b>http://www.w3.org/TR/DOM-Level-2-Core/</b>, November 13, 2000.</p>
<p><a name="9"></a>[9]  SAX 2.0: The Simple API for XML. <b>http://www.megginson.com/SAX/</b>.</p>
<p><a name="10"></a>[10]  XSL Transformations (XSLT). W3C Recommendation. World Wide Web Consortium, <b>http://www.w3.org/TR/xslt</b>, November 16, 1999.</p>

<p><i><B>Steve Vinoski</B> is chief architect and vice president of Platform Technologies for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of </i>Advanced CORBA Programming with C++<i>, published in January 1999 by Addison Wesley Longman.</p>
<p><i><B>Doug Schmidt</A></B> is an associate professor member at the University of California, Irvine. His research focuses on patterns, optimization principles, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded system interconnects.  He is the lead author of the book </i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects<i>, published in 2000 by Wiley and Sons.  He can be contacted at <b>schmidt@uci.edu</b>.</i></p>

</BLOCKQUOTE>
</BODY></HTML>
