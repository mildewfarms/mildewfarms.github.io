<HTML>   
     <HEAD>
<TITLE>May 2001 C++ Experts Forum/Column Title</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.05/tocmay.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Roots</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><i>Copyright &copy;, Jim Hyslop and Herb Sutter</i></span></p>

<p>The obelisk was larger than it had seemed over video.</p>

<p>I stood at the lip of a man-made escarpment, at the edge of the excavation into a surface of slightly brownish-tinted ice. The side of the obelisk facing me appeared to be pure crystal, with a kind of sheen on the surface; it rose upward to its tapered peak about a dozen meters above my head, as though a pointer to where, still further above, the light gray inner surface of the dome covered us and enclosed the entire area.</p> 

<p>There was the distant hum of heating units, but despite my clothes I felt cold. Our breath lingered quietly in the air before us. The temperature was bearable, but still kept well below freezing; it would not be good for the ice to melt.</p> 

<p>Below me, widening slightly as it went, the obelisk plunged another two dozen meters to where it connected to the top, only partly excavated and visible, of a wider structure which I knew to be the roof of a building still nearly completely embedded in the ice. With only the roof visible below me, the building's size was impossible to judge visually, but I knew from soundings that it went deep indeed, probably to the surface under the ice.</p>

<p>&quot;The entrance is down on the far side,&quot; my escort said. &quot;Buster?&quot; My thoughts returned to the present, and I nodded, giving her a brief smile. We made our way down to the floor of the excavated area and walked around parked machinery and people at work in twos and threes.</p>

<p>The entrance at the base of the obelisk was the only thing that was man-made. Its rough edges where until recently a wall had been were clearly not part of the ancient building's original design.</p>

<p>The entrance way was somewhat dark, but temporary lighting had been installed not far beyond. I must have hesitated, because my escort's hand found and squeezed my arm reassuringly. &quot;Well,&quot; I smiled back to Jeannine, &quot;I did always want to get to the base of things.&quot;</p> 

<p>&quot;Yes. Ah, here's our controller.&quot;</p>

<hr>

<p>&quot;I'll see you at lunch, then,&quot; I said to Anna, my new girlfriend, and hung up the phone. We had been going out long enough that I was comfortable with the fact that she was the Guru's daughter &#151; something I hadn't known when we'd started dating.</p>

<p>&quot;Hey, Junior!&quot; Bob's voice interrupted my pleasant musings. &quot;I thought I told you not to break the build.&quot;</p>

<p>Turning, I said in my best patient voice: &quot;Bob, as you'll recall, the last time I ‘broke the build' it was because of some... shall we say, less than ideal code in <i style='mso-bidi-font-style:normal'>your</i> module.&quot; Yep, sipping away at his latte as usual.</p>

<p>&quot;Yeah, well it's your problem this time, <i>Junior</i>.&quot; Slurp. &quot;My code keeps crashing because of the changes you made.&quot;</p>

<p>I sighed, not wanting to argue with him. &quot;OK, Bob, just tell me where the problem is, and I'll look into it.&quot; </p>

<p>&quot;That's more like it,&quot; Bob smiled unpleasantly. &quot;Just remember who's got more experience around here, kid. Don't think that sucking up to Her Weirdness is gonna help, either &#151; her authority around me is quite limited.&quot; He wrote down the name of the file that was causing him problems and left. I resigned myself to the inevitable and checked out the module.</p>

<p>An hour later, I was still struggling with it. &quot;Oh, man, this is too weird for me,&quot; I complained to no one in particular. It did appear to be a problem with my code &#151; Bob's code worked fine for the original class, but not with the revisions I had made.</p>

<p>The class hierarchy was fairly simple at this point:</p>

<pre>class parent
{
public:
  virtual void f();
// etc...
};

class child : public virtual parent
{
public:
  void f();
};</pre>

<p>One of my modifications was to make <b>child</b> inherit virtually from <b>parent</b>, for use elsewhere in the hierarchy.</p>

<p>I had tried my best, but it was looking like I had no choice &#151; I was going to have to dig into Bob's code. &quot;Once more unto the breach, dear friends,&quot; I muttered as I set a breakpoint and prepared to step into the function. After half an hour in the crucible of debugging, I had burned away the excess and had found the root of the problem:</p>

<pre>void parentPtrPtr(parent **b)
{
  (*b)-&gt;f();
}

void childPtrPtr(child **d)
{
  parentPtrPtr(reinterpret_cast&lt;parent **&gt;(d));
}
</pre>

<p>I had my suspicions about the last function. I had learned to be wary of casting, especially <b>reinterpret_cast</b>. I removed the <b>reinterpret_cast</b>, and sure enough the compiler balked at that line, complaining that <b>parent **</b> and <b>child **</b> were unrelated types.</p>

<p>&quot;Your suspicions are correct, my apprentice.&quot; For once, the Guru's soft voice behind me did not startle me. Well, not much. &quot;A pointer-to-pointer-to-child,&quot; she continued, &quot;cannot be implicitly converted to a pointer-to-pointer-to-base.&quot;</p>

<p>I kicked back and stretched. &quot;I thought so. Looks like Bob was doing whatever it took to shut the compiler up. I don't understand why it worked for the original class, though, and crashes now. Heck, I don't even understand why the compiler can't do the implicit conversion.&quot;</p>

<p>&quot;The crash you are experiencing is the very reason for the prohibition,&quot; the Guru brushed a lock of silvering hair behind her ear. &quot;Your derived class inherits virtually from the base class.&quot; My deer-in-the-headlights stare quickly let her know that I didn't understand. &quot;Consider a case of simple inheritance,&quot; she said, picked up a marker, and began writing on my whiteboard:</p>

<pre>
class parent { /* whatever, including at least one virtual function */ };
class child : public parent { /* whatever */ };</b></p>
</pre>

<p>&quot;In a typical implementation of virtual functions,&quot; she continued, &quot;the compiler will lay out the class in memory with the pointer to the virtual function table (the <b>vptr</b>) first, followed by the <b>parent</b> class data, followed by the <b>child</b> class data:&quot;</p>

<table border=1>
<tr><td><b>parent</b>::vptr</td></tr>
<tr><td><b>parent</b> data</td></tr>
<tr><td><b>child</b> data</td></tr>
</table>

<p>&quot;Wait a second,&quot; I interrupted. &quot;Aren't you always telling me that the virtual function table is not required by the Standard, and therefore it's an implementation detail?&quot;</p>

<p>&quot;That is true, my child. The Holy Standard does not require virtual function tables &#151; indeed, it does not even mention them. However, one of the goals of the blessed members of the standards committee was to codify practices of existing compilers. Allowing an implicit conversion from <b>child **</b> to <b>parent **</b> would cause problems on many existing compilers &#151; in particular, the ones that behave as I am about to describe. If I might be allowed to continue, that is.&quot; She fixed me with a stern glare. I subsided.</p>

<p>&quot;This layout means that the address pointed to by <b>this</b> can be the same for both the base class and the derived class. With our hypothetical compiler, <b>this</b> always points to the <b>vptr</b>. Member functions of the derived class can determine the address of member data by simply taking <b>this</b> and adding an offset that consists of the size of the base class data and the size of the <b>vptr</b>.</p>

<p>&quot;The situation becomes more complicated, however, when you add virtual inheritance into the mix. Consider:&quot;</p>

<pre>
class parent { /* whatever */ };
class child1 : public virtual parent { /* whatever */ };
class child2 : public virtual parent { /* whatever */ };
class multi : public child1, public child2 { /* whatever */ };</pre>

<p>&quot;Clearly, the compiler cannot lay out the intermediate classes <b>child1</b> and <b>child2</b> in the same manner as it did class <b>child</b>, above, with the <b>parent</b> class data immediately followed by the <b>child</b> class data, because the virtual inheritance specifies that only one copy of the base class data should appear. The solution &#151; or rather, <i>a</i> solution &#151; is to put a <b>vptr</b> at the beginning of each subobject, like this:&quot;</p>

<table border=1>
<tr><td>parent::vptr</td></tr>
<tr><td>parent data</td></tr>
<tr><td>child1::vptr</td></tr>
<tr><td>child1 data</td></tr>
<tr><td>child2::vptr</td></tr>
<tr><td>child2 data</td></tr>
<tr><td>multi::vptr</td></tr>
<tr><td>multi data</td></tr>
</table>

<p>&quot;Then, as the compiler invokes various member functions, it can dynamically adjust the implicit <b>this</b> parameter so that member functions can access the member data properly.&quot;</p> 

<p>&quot;Oh, I get you,&quot; I said. &quot;When you have a <b>multi</b> object, a pointer to it will have slightly different values depending on whether it's pointing to a <b>parent</b> subobject or a <b>child1</b> subobject. Say, that also explains why the intermediate class has to use the <b>virtual</b> keyword &#151; I always thought it was a mistake, and that <b>multi</b> should be the class to use <b>virtual</b>. So, anyway, back to the problem at hand. This means that... um... No, I don't get you. How does this apply to pointers-to-pointers?&quot;</p>

<p>&quot;Let us,&quot; she intoned, &quot;assign arbitrary memory addresses to these values and assume that each class contains exactly one integer, that the size of an integer and the size of a pointer are each four bytes, and that there are no padding or alignment issues. Let us also add some code to instantiate a <b>multi</b> class:&quot;</p> 

<pre>void f()
{
  multi m;
  multi *pm = &amp;m;
  multi **ppm = &amp;pm;
//...</pre>


<table border=1>
<tr><td>Address</td>
    <td>Description</td>
    <td>Value</td></tr>
<tr><td>0x1000</td>
    <td>parent::vptr</td>
    <td>?</td></tr>
<tr><td>0x1004</td>
    <td>parent data</td>
    <td>?</td></tr>
<tr><td>0x1008</td>
    <td>child1::vptr</td>
    <td>?</td></tr>
<tr><td>0x100c</td>
    <td>child1 data</td>
    <td>?</td></tr>
<tr><td>0x1010</td>
    <td>child2::vptr</td>
    <td>?</td></tr>
<tr><td>0x1014</td>
    <td>child2 data</td>
    <td>?</td></tr>
<tr><td>0x1018</td>
    <td>multi vptr</td>
    <td>?</td></tr>
<tr><td>0x101c</td>
    <td>multi data</td>
    <td>?</td></tr>
<tr><td>0x1020</td>
    <td>pm</td>
    <td>0x1000</td></tr>
<tr><td>0x1024</td>
    <td>ppm</td>
    <td>0x1020</td></tr>
</table>

<p>&quot;The compiler uses the address of the first byte of the <b>multi</b> object as the <b>multi </b>pointer, that is, <b>0x1000</b>. Now, suppose you add another couple of variables to this function:&quot;</p> 

<pre>
//...
  child1 * pc1 = &amp;m;
  child1 ** ppc1 = &amp;pc1;
//...</pre>

<p>&quot;The compiler simply takes the address of <b>m</b>, adjusts it to the correct subobject &#151; in this case, the start of the <b>child1</b> subobject &#151; and assigns it to <b>pc1</b>. <b>ppc1</b> simply contains the address of <b>pc1</b>:&quot;</p>

<table border=1>
<tr><td>Address</td>
    <td>Description</td>
    <td>Value</td></tr>
<tr><td>0x1028</td>
    <td>pc1</td>
    <td>0x1008</td></tr>
<tr><td>0x102c</td>
    <td>ppc1</td>
    <td>0x1028</td></tr>
</table>

<p>&quot;But suppose, now, you want to assign <b>ppm</b> to <b>ppc1</b>:&quot;</p>

<pre>//...
  ppc1=ppm; // How to handle this?
//...</pre>

<p>&quot;Suppose the compiler allowed you to assign the value contained in <b>ppm</b> directly to <b>ppc1</b>. <b>ppc1</b> would then be set to the value <b>0x1020</b> &#151; which is the address of <b>pm</b>, which in turn points to the base address of <b>multi</b>, <b>0x1000</b>. When you dereference <b>ppc1</b>, you would expect to get a pointer-to-<b>child1</b>. However, you would actually get a pointer-to-<b>parent</b> (or <b>multi</b>, as they share the same base address in our hypothetical compiler).&quot;</p>

<p>&quot;I get it,&quot; I exclaimed. &quot;But wait &#151; how come it worked before?&quot;</p>

<p>&quot;With non-virtual inheritance, this particular compiler assigned the same base address to the <b>child</b> and <b>parent</b> subobjects. In essence, the bit-patterns of the two addresses happened to be identical, so the <b>reinterpret_cast</b> happened to do the right thing.&quot;</p> 

<p>&quot;Great,&quot; I replied. &quot;I understand the theory. Now how do I fix the problem?&quot;</p>

<p>&quot;Remember these words: ‘Every problem can be solved with an extra layer of indirection.' In this case, my child, we have too many layers of indirection.&quot;</p>

<p>&quot;Too many layers,&quot; I pondered. Then, the penny dropped. &quot;Remove a layer of indirection!&quot; I scribbled some code on the whiteboard:</p>

<pre>void
childPtrPtr(child **d)
{
  parent *pp = *d;
  parentPtrPtr(&amp;pp);
}</pre>

<p>&quot;Very good, my child. The adjustment to the <b>this</b> parameter occurs when you assign from the <b>child*</b> to the <b>parent*</b>. The <b>parentPtrPtr</b> function now receives a true pointer-to-pointer-to-<b>parent</b>.&quot;</p>

<p>&quot;And just in time, too,&quot; I said, as I spied Anna approaching. &quot;Here comes my lunch date.&quot; The Guru made a graceful exit. Just then, Bob wandered up, on his way to get a fresh latte. He greeted Anna.</p>

<p>&quot;Hey, sugar, what brings you in? Are we having lunch today?&quot;</p> 

<p>&quot;Maybe next time, Dad. I'm going to lunch with my boyfriend,&quot; Anna pointed at me.</p>

<p>I stared at Bob, aghast. He stared back. Both of us turned to Anna, blurting &quot;He's your <i style='mso-bidi-font-style:normal'>what?!</i>&quot;</p>

<hr>

<p>&quot;He's our <i>what?</i>&quot; I blinked.</p>

<p>&quot;Our controller,&quot; Jeannine waved at a sergeant who was coming out to join us. &quot;We'll have to report through him.&quot;</p>

<p>&quot;Hello, Doctor Carruthers,&quot; the sergeant said to Jeannine. &quot;This is&#151;?&quot; Jeannine nodded and introduced me. &quot;Your suits are here inside,&quot;the sergeant said, leading us in. &quot;The protocol is that you'll always have to wear them down there with helmets closed, even in pressurized rooms.&quot;</p>

<p>Inside the obelisk, the lighted area turned out to be a medium-sized room with suits on the walls, and in the center a large hole ringed with a mesh fence. &quot;Put your hand there to sign in,&quot; the sergeant instructed; &quot;then let's get those suits on and checked.&quot; As we did so, a platform ascended from inside the hole and stopped level with the floor; we entered through a gate in the fence, paused, and then the elevator started to descend.</p> 

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the ISO/ANSI C++ standards committee. He can be reached at <b>hsutter@acm.org</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
