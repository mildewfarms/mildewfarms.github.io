<HTML>   
     <HEAD>
<TITLE>October 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Standard Languages: Ask for Them by Name!</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Only Bobby can make a point out of circles and teach us something in the process.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>Here is more actual mail from actual readers who stretch the definitions of Standard C and Standard C++ or confuse my column with Usenet. Names have been changed, and questions surgically altered, to protect the guilty:</p>

<UL><LI>   Can you help me to enable the soft key to enter text in a J2ME (KVM/CLDC) application using spotlet?</LI>
<LI>   I am having trouble getting 16-bit or 32-bit color graphics mode to work in C and DOS.</LI>
<LI>   Where can I find example C/C++ code that&#146;s comparable to code for PLC (Programmable Logic Controllers) ladder logic?</LI></UL>

<p>and my perennial favorite</p>

<UL><LI>   I&#146;d like some kind of immediate response from you for the completion of my project.</LI></UL>

<p>Folks, I&#146;m sure these are worthy questions &#151; well, maybe not the last one &#151; but my column is not the proper forum for them. My domain is Standard C and Standard C++: the languages, the library, the standards. I will occasionally dip into some non-Standard or vendor-specific behavior, but only occasionally.</p>

<H3><FONT COLOR="#000080">Circular Breathing</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby, I have an interesting C++ question.</p>
<p>Why will the following code not compile correctly? I am using Visual C++ v6.0:</p>

<pre>
class Z;

//  This line gets
//  "use of undefined type 'Z'"
//  if uncommented
//
//class Z::Y;

template&lt;class T&gt;
class X
    {
    // This next line gets
    // "use of undefined type 'Z'"
    T::Y y;
    };

class Z : public X&lt;Z&gt;
    {
    class Y
        {
        };
    };
</pre>

<p>I have tried several different rearrangements, with little luck. Is it even possible to create a template class that has a member variable of a nested type from the template parameter? Please help!</p>
<p>Thanks &#151; Ryan Cunningham</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Following my usual habit when diagnosing template tantrums, I&#146;ve run your sample through EDG&#146;s C++ front end. The first error message it returns is</p>

<pre>
nontype "T::Y" is not a type name

    T::Y y;
    ^
</pre>

<p>You can fix this by changing</p>

<pre>
T::y y;
</pre>

<p>to</p>

<pre>
typename T::Y y;
</pre>

<p>thereby telling the compiler that <B>T::Y</B> will always instantiate to a type name.</p>
<p>But in the end this won&#146;t help much, since the second error, which is now</p>

<pre>
incomplete type is not allowed

    typename T::Y y;
             ^
</pre>

<p>detected during instantiation of</p>

<pre>
class "X&lt;T&gt; [with T=Z]"
</pre>

<p>has no fix. The trouble ultimately comes from a circular reference to an incomplete type.</p>
<p>At the declaration of</p>

<pre>
class Z : public X&lt;Z&gt;
</pre>

<p>the direct base class <B>X&lt;Z&gt;</B> must be a complete type. <B>X&lt;Z&gt;</B> is also a specialization of class template <B>X</B>. These facts combine in C++ Standard subclause 14.7.1/4:</p>

<BLOCKQUOTE>
<p>A class template specialization is implicitly instantiated if the class type is used in a context that requires a completely-defined object type...</p>
</BLOCKQUOTE>

<p>By virtue of appearing in such a context, <B>X&lt;Z&gt;</B> is instantiated at the point of</p>

<pre>
class Z : public X&lt;Z&gt;
//               ^^^^
// X&lt;Z&gt; instantiated here
</pre>

<p>During that instantiation, the <B>T</B> in</p>

<pre>
template&lt;class T&gt;
class X
    {
    typename T::Y y;
    };
</pre>

<p>is substituted with template argument <B>Z</B>, so that the class instantiates as</p>

<pre>
class X&lt;Z&gt;
    {
    typename Z::Y y;
    };
</pre>

<p>Problem is, at the point of this instantiation, the name <B>Z::Y</B> has not yet been declared. Remember, you have just started defining <B>Z</B> and have not yet declared any of <B>Z</B>&#146;s members. (You tried getting around this by forward-declaring <B>Z::Y</B>, to no avail <a href="#1">[1]</a>.)</p>
<p>Bottom line: the act of starting <B>Z</B>&#146;s definition requires that <B>Z</B>&#146;s definition already have started, a distortion of the time-space continuum beyond the C++ Standard&#146;s tolerance.</p>

<H3><FONT COLOR="#000080">The Long and Winding Road</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi Bobby,</p>
<p>Please consider the code below. I cannot figure out why I cannot successfully create the expression <B>c == p</B>. Shouldn&#146;t the friend functions in class <B>circle</B> be sufficient to support this? I&#146;m compiling with Microsoft Visual C++ v6.0.</p>
<p>A limitation is that I cannot modify <B>struct point</B>.</p>
<p>Thanks in advance for your time. &#151; Leslie Williamson</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Your sample code stirs up so many introductory class-design issues that &#151; in violation of my usual creed &#151; I&#146;m devoting most of this month&#146;s column to it.</p>
<p>My version of your example appears as <a href="list1.htm">Listing 1</a>. There you&#146;ll see two data types:</p>

<UL><LI>   a simple C-like <B>struct point</B>, with coordinates <B>x</B> and <B>y</B> of type <B>double</B>.</LI>
<LI>   a more complex class <B>circle</B>, with <B>center_</B> of type <B>point</B> and <B>radius_</B> of type <B>double</B>. A <B>circle</B> constructed with no explicit radius defaults to a unit <B>circle</B> (<B>radius_</B> = 1).</LI></UL>

<p>(<B>point</B> corresponds to what you call <B>A</B>, while <B>circle</B> is what you call <B>B</B>. I&#146;ve changed the names &#151; and added the radius &#151; to make the example more tangible.)</p>
<p>The code defines four equality operators comparing <B>circle</B>s to <B>circle</B>s and <B>point</B>s to <B>circle</B>s:</p>

<pre>
operator==(point const &amp;, circle const &amp;);
operator!=(point const &amp;, circle const &amp;);

circle::operator==(circle const &amp;) const;
circle::operator!=(circle const &amp;) const;
</pre>

<p>And <B>main</B> contains test cases to exercise these operators:</p>

<pre>
point p = {3, 2};
circle c(3, 2);
TEST(p == c);
TEST(p != c);
TEST(c == p);
TEST(c != p);
</pre>

<p>You expect the run-time result of those tests to be</p>

<pre>
p == c   true
p != c   false
c == p   true
c != p   false
</pre>

<p>But what you actually get is</p>

<pre>
p == c   false
p != c   true
c == p   false
c != p   true
</pre>

<p>The four tests compare different types. If you add tests that compare like types:</p>

<pre>
TEST(p == p);
TEST(p != p);
TEST(c == c);
TEST(c != c);
</pre>

<p>and rerun the combination, you get</p>

<pre>
p == c   false
p != c   true
c == p   false
c != p   true
p == p   false
p != p   true
c == c   true
c != c   false
</pre>

<p>The only tests that pass are the last two, comparing <B>circle</B> to <B>circle</B>; any comparison involving <B>point</B>s fails.</p>
<p>All comparisons directly or indirectly call</p>

<pre>
circle::operator==(circle const &amp;) const;
circle::operator!=(circle const &amp;) const;
</pre>

<p>In the failing comparisons, every <B>point</B> operand must convert to a <B>circle</B>; but in the successful comparisons, no such conversions occur, as both operands are already <B>circle</B>s. This pattern suggests that the <B>point</B>-to-<B>circle</B> conversion constructor may be the common failure point.</p>
<p>You&#146;ve written that constructor in terms of another constructor. On the surface this makes sense as a code reuse mechanism. Unfortunately the idea goes awry, for your implementation</p>

<pre>
circle(point const &amp;center,
        double const radius = 1)
    {
    this-&gt;circle::circle
            (center.x, center.y, radius);
    }
</pre>

<p>ends up constructing (and throwing away) a temporary <B>circle</B> object. The state of <B>*this</B> is untouched, as if you had written</p>

<pre>
circle(point const &amp;center,
        double const radius = 1)
    {
    }
</pre>

<p>Net result: <B>circle</B>s constructed from <B>point</B>s are left uninitialized, and thus don&#146;t compare as expected.</p>
<p>I have two simple fixes.</p>
<p>The first fix</p>

<pre>
circle(point const &amp;center,
        double const radius = 1)
    {
    new(this) circle(center.x, center.y, radius);
    }
</pre>

<p>features a placement <B>new</B> expression that constructs the state of <B>*this</B> in place <a href="#2">[2]</a>. I suspect this is what you wanted to do in the first place.</p>
<p>The second fix</p>

<pre>
circle(point const &amp;center,
        double const radius = 1)
    {
    center_.x = center.x;
    center_.y = center.y;
    radius_ = radius;
    }
</pre>

<p>matches the form of your other constructor</p>

<pre>
circle(double const x, double const y,
        double const radius = 1)
    {
    center_.x = x;
    center_.y = y;
    radius_ = radius;
    }
</pre>

<p>If you substitute either of these fixes for your original, then all eight test cases return desired results.</p>
<p>Now for some other design considerations beyond your bug...</p>
<p>Consideration #1: You have</p>

<pre>
operator==
    (point const &amp;, circle const &amp;)
operator!=
    (point const &amp;, circle const &amp;)
</pre>

<p>declared as friends of <B>circle</B>, even though the operators don&#146;t access <B>circle</B>&#146;s private implementation and state. You therefore can declare the classes as non-friends.</p>
<p>Consideration #2: You need those former friends for cases where a point is the left-hand side of an equality expression. You can get around this need by declaring the current members</p>

<pre>
circle::operator==
    (circle const &amp;) const;
circle::operator!=
    (circle const &amp;) const;
</pre>

<p>as friends</p>

<pre>
friend operator==
    (circle const &amp;, circle const &amp;);
friend operator!=
    (circle const &amp;, circle const &amp;);
</pre>

<p>and eliminating the former friends</p>

<pre>
operator==(point const &amp;, circle const &amp;)
operator!=(point const &amp;, circle const &amp;)
</pre>

<p>Any <B>point</B> passed to these operators, as either the left or right operand, will be converted to a <B>circle</B> via the now-familiar conversion constructor.</p>
<p>Consideration #3: The conversion operator</p>

<pre>
circle::operator point const &amp;() const
</pre>

<p>maps the other way, distilling a <B>circle</B> down to a <B>point</B>.</p>
<p>Converting a <B>circle</B> to a <B>point</B> is a dubious proposition, since a single <B>point</B> can&#146;t capture the full state of a <B>circle</B>. A <B>circle</B> contains a <B>point</B> and can be initialized from a <B>point</B>, but a <B>circle</B> is not a <B>point</B>.</p>
<p>An arguably better design is a non-operator accessor, such as</p>

<pre>
class circle
    {
    // ...
    point const &amp;get_center() const
        {
        return center_;
        }
    // ...
    };
</pre>

<p>Consideration #4: As a stylistic rule, favor member initializers over member assignment in constructors. In the case of <B>circle</B>, the only member you can initialize is <B>radius_</B>:</p>

<pre>
circle(double const x, double const y,
        double const radius = 1)
        :
        radius_(radius)
    {
    center_.x = x;
    center_.y = y;
    }
</pre>

<p>You may be tempted to write</p>

<pre>
circle(double const x, double const y,
        double const radius = 1)
        :
        center_.x(x), center_.y(y), radius_(radius)
    {
    }
</pre>

<p>which won&#146;t work. Neither will</p>

<pre>
circle(double const x, double const y,
        double const radius = 1)
        :
        center_(x, y), radius_(radius)
    {
    }
</pre>

<p>Consideration #5: This last form would work if <B>point</B> had an appropriate constructor. Indeed, <B>circle</B> could be tightened overall if <B>point</B> had member functions, for many of <B>circle</B>&#146;s design decisions properly belong in <B>point</B>. Because you say you can&#146;t modify <B>point</B>, you should strongly consider the next best thing: thinly wrap <B>point</B> in a class, push the <B>point</B>-specific design decisions into that class, allow the class to freely convert to/from <B>point</B>, and traffic in that class wherever you can.</p>
<p>I show one possible primitive definition (which I call <B>POINT</B>) in <a href="list2.htm">Listing 2</a>. I leave this as an Exercise For The Reader: implement <B>POINT</B>, rewrite <B>circle</B> to take advantage of <B>POINT</B>, and then write test cases to validate your rewrite.</p>
<p>Consideration #6: Unlike <B>circle</B>, the new class <B>POINT</B> conceptually is a <B>point</B>; indeed, <B>POINT</B> is what <B>point</B> would be if you were allowed to modify it. <B>POINT</B> is less an abstraction and more an encapsulation, a way to semantically bundle functions with a C-like <B>struct</B>. As <B>POINT</B>&#146;s abstraction layer is purposely quite thin, having it convert freely to a <B>point</B> does not hamper the design.</p>
<p>Given that reality, consider rewriting <B>POINT</B> so that it derives from <B>point</B> instead of containing <B>point</B>. I leave as another Exercise the full exploration of such a rewrite&#146;s benefits and costs.</p>

<H3><FONT COLOR="#000080">Rock and Roll, Part 2</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>

<p> Can you recommend a C++ beautifier? &#151; Rex Cramer</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Oh sure: Visual Studio .NET&#146;s <B>csc.exe</B> <a href="#3">[3]</a>.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>Speaking of .NET, Visual C++ .NET Beta 2 is available to the world. In my December 2000 column, I promised I&#146;d wait until the final version ships before switching to it. However, events in my Microsoft life have forced my hand, and I&#146;m now running Visual C++ .NET in lieu of Visual C++ v6.0. In fact, I&#146;ve completely wiped the latter from the Virtual PC environment on my PowerBook.</p>
<p>This means I can no longer test your code on earlier versions of Microsoft&#146;s compiler. From this day forward, if you have a problem that occurs on Visual C++ v6.0, and I can&#146;t reproduce it on my system, I&#146;ll assume the problem is specific to your compiler.</p>
<p>Editorially, I will call the compiler Visual C++ .NET, to reinforce which version I&#146;m using. I won&#146;t drop the explicit &#147;.NET&#148; designation until after the product ships.</p>
<p>On a completely unrelated note...</p>
<p>Diligent Reader Scott Meyers gets way too many jollies from dissing my writing. He clearly needs a new hobby. This time he takes issue with my interpretation of the Standard's intent regarding <B>extern "C"</B>. Sadly, as much as I don't want to encourage him, I'm slowly starting to agree with his logic. (Oh cruel, cruel fate!) We should have a verdict by next month.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  I touched on this same issue in my August 2001 column item &#147;Ins and Outs, Part 1.&#148;</p>
<p><a name="2"></a>[2]  You must include the Standard C++ library header <B>&lt;new&gt;</B> for this to work.</p>
<p><a name="3"></a>[3]  I&#146;m teasing. I think. </p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/oct01/schmidt.zip"></a></h4>
</blockquote></body></html>
