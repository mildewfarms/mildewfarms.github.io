<HTML>   
     <HEAD>
<TITLE>October 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">TOC Head</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear Mr. Sutter,</p>
<p>In your article &#147;Constructor Failures&#148; (November 2000, <I>CUJ</I>), you state quite unequivocally that there are only two choices for a constructor: either the constructor completes normally and the object exists, or the constructor throws an exception and the object never existed. You note the alternative of setting an internal object status flag on construction failure as &#147;now-obsolete ... outdated, dangerous, tedious, and in no way better than throwing an exception.&#148;</p>
<p>Let&#146;s just see where this logic leads us. When we throw an exception, we are saying that the current path of execution has encountered an error that is so significant that the caller cannot choose to ignore it, and that if there is no code prepared to handle this problem, as indicated by an appropriate catch block, then abrupt program termination is an acceptable consequence. Since you would allow no alternative on constructor failure other than to throw an exception, you are directly implying that if any constructor fails abrupt program termination is an acceptable consequence.</p>
<p>While it is undoubtedly true that this is often the case, I cannot agree that construction failure is always so severe. There are many classes of objects for which construction failure may be reasonably expected to occur. For example, if I pass a filename that does not correspond to an existing file to the constructor of a file stream, that constructor will fail and will set its status so that I can detect that failure. Since this is an error that may be reasonably expected to occur from time to time, especially if the filename is input either directly or indirectly by a human user, then it does not seem to me that throwing an exception is appropriate. Exceptions should be used in exceptional (i.e., not expected) conditions, and not to report errors that should be expected under normal circumstances.</p>
<p>It seems to me that a better guideline would be to throw an exception when the constructor of a critical object necessary for correct program operation fails in a way that is not normally expected, but that construction failure of non-critical objects, or of objects for which construction failure modes are normally expected, should be reported in some less stringent manner. For these non-critical, expected construction failures, the error must still be reported in some manner, but not by an exception. Perhaps setting a status flag is not always such a bad idea after all.</p>
<p>Randy Maddox<br>
<B>maddoxr@acm.org</B></p>

<p><I>Herb Sutter responds:</I></p>
<p><I>Thanks for the mail. You summarized my point precisely: &#147;there are only two choices for a constructor: either the constructor completes normally and the object exists, or the constructor throws an exception and the object never existed.&#148;</I></p>
<p><I>This is exactly true. Indeed, it is directly enforced by the C++ language. A key distinction is between:</I></p>
<p><I>a)  constructor failure (we couldn&#146;t make a valid </I><B>T</B><I> object), which must always be reported by an exception; and</I></p>
<p><I>b)  other constructor problems that aren&#146;t fatal, where we can still end up making a valid </I><B>T</B><I> object that&#146;s safe to use although it might be less than optimal in some way.</I></p>
<p><p><I>Certainly it&#146;s true that &#147;when we throw an exception we are saying that the current path of execution has encountered an error that is so significant that the caller cannot choose to ignore it.&#148; For example:</I></p>

<pre>
T t;

// If construction of t fails, the 
// following line is not reliable 
// because t is-not-a T &#151; fortunately,
// the C++ language doesn&#146;t let us get 
// here:
t.MemberFunction();
</pre>

<p><I>But I disagree with your conclusion that I&#146;m &#147;directly implying that if any constructor fails abrupt program termination is an acceptable consequence.&#148; That&#146;s not the case at all, because you can&#146;t equate throwing an exception with program termination. The correct equation would be to equate throwing an exception with reporting an error.</I></p>
<p><I>I think you&#146;re comparing apples (code that does check for errors) and oranges (code that doesn&#146;t). To illustrate:</I></p>

<pre>
// Case 1(a) &#151; APPLE
// Report failure via IsOK() query,
// DO check for error
//
T t;
if( t.IsOK() ) {
  t.MemberFunction();
  ...
}

// Case 2(a) &#151; ORANGE
// Reporting fail via exception,
// DON&#146;T check for error
//
T t;
t.MemberFunction();
...
</pre>

<p><I>Incidentally, this is a common mistake when comparing exception-using code with error-code-using code; for example, I&#146;ve seen reports claiming to prove that code written to use exceptions incurs high overhead by saying &#147;this program with error codes is 15% faster than the same code using exceptions&#148; &#151; reports that turn out to be bogus because the code that uses error codes doesn&#146;t check the errors, and it&#146;s invalid to compare code that does no error checking with code that does.</I></p>
<p><I>To compare apples with apples, try this:</I></p>

<pre>
// Case 1(b):
// Report failure via IsOK() query,
// and DO proper checking
//
T t;
if( t.IsOK() ) {
  t.MemberFunction();
  ...
} else {
  /* cleanup */
}

// Case 2(b):
// Report failure via exception,
// and DO proper checking
//
try {
  T t;
  t.MemberFunction();
  ...
} catch (...) {
  /* cleanup */
}
</pre>

<p><I>Or this:</I></p>

<pre>
// Case 1(c):
// Report failure via IsOK() query,
// and DON&#146;T do proper checking
//
T t;
t.MemberFunction(); // BOOM!
...

// Case 2(c):
// Report failure via exception,
// and DON&#146;T do proper checking
//
T t;
t.MemberFunction();
...
// BOOM!
</pre>

<p><I>I agree that Case 2(c) is inappropriate because the program might blow up if the exception is not handled. But the equivalent Case 1(c) is just as inappropriate because the program will blow up if the error is not checked. Interestingly, note that when you compare the two methods, code that doesn&#146;t check for the errors actually looks the same.</I></p>
<p><I>Incidentally, there&#146;s another reason to strongly prefer throwing an exception: using an error code requires the code that tries to create the object to manually handle the error and/or propagate error information back up to someone who can do something about it. Using an exception means the error propagates automatically and can be handled at whatever level is appropriate, which is especially good if the lower-level code doesn&#146;t know enough to recover from the error, as is common if the lower-level code is in a library or template.</I></p>
<p><I>Using an exception is simply another method of error reporting in this case, and a decidedly superior one because:</I></p>
<p><I>a)  failure to construct an object is always serious (and must be checked no matter how the error is reported), because otherwise executing further code that relies on the object being a valid object of its type will probably blow up; and</I></p>
<p><I>b)  it&#146;s enforced by the Standard (no having to rely on custom behavior).</i></p>
<p><I>Having said all that, yes, standard streams do things a little differently. To me, they&#146;re wishy-washy. You write: &#147;if I pass a filename that does not correspond to an existing file to the constructor of a file stream, that constructor will fail and will set its status so that I can detect that failure.&#148; Actually, it may throw </I><B>ios_base::failure</B><I> (see 27.8.1.6). Streams seem to be a bit wishy-washy in that instead of deciding on an error-reporting strategy (codes or exceptions), they can be configured in different ways. I think it&#146;s a sign of muddled thinking and/or design by committee.</I></p>
<p><I>You add: &#147;Since this is an error that may be reasonably expected to occur from time to time, especially if the filename is input either directly or indirectly by a human user, then it does not seem to me that throwing an exception is appropriate.&#148; Let&#146;s assume for the sake of argument that an exception is not thrown. In this example, I think that&#146;s perfectly fine, because it&#146;s possible to have a perfectly valid file stream object that does not have a valid file at the moment, and it&#146;s intended to be legal; it&#146;s a valid file stream object with a valid state. For example:</I></p>

<pre>
ifstream i;
i.open( &#147;foo.bar&#148; );
...
i.close();
</pre>

<p><I>Both after construction and after </I><B>.close()</B><I>, </I><B>i</B><I> is in a valid state. All I&#146;m saying is that this is not an example where, after a file-opening failure in the constructor, we&#146;re left with a &#147;partially constructed&#148; or &#147;failed constructed&#148; </I><B>ifstream</B><I> object. We have a valid </I><B>ifstream</B><I> object, although personally I would prefer the exception because it&#146;s not the </I><B>ifstream</B><I> object I wanted when I asked for that particular constructor (but oh well).</I></p>
<p><I>Finally, you hit the philosophical chestnut on the head: &#147;Exceptions should be used in exceptional (i.e., not expected) conditions.&#148; This statement is often repeated, and it&#146;s a rat&#146;s nest because even people who agree wholeheartedly with that statement still disagree vehemently with each other about what &#147;expected&#148; means to them.</I></p>
<p><I>In the case of constructor failures, I&#146;m coming at it from the following philosophical point of view: a constructor turns raw memory into a </I><B>T</B><I>. If it can&#146;t turn it into a valid </I><B>T</B><I>, it must fail by throwing an exception. That view is essentially what the language is designed to enforce. In my mind, a constructor failure is a problem that prevents the constructor from creating a valid </I><B>T</B><I> object. In some cases, especially when the object has more than one &#147;mode&#148; or can run with degraded performance, a constructor problem with trying to establish a &#147;higher&#148; mode or &#147;additional&#148; functionality doesn&#146;t mean we can&#146;t create a valid </I><B>T</B><I> object.</I></p>
<p><I>Let&#146;s say for the sake of argument that construction failure is flagged and checked with </I><B>IsOK</B><I>; clearly it&#146;s true that most or all of the time the calling code should check </I><B>IsOK</B><I>, else Seriously Bad Things can happen. Wouldn&#146;t you further agree that a language construct that requires the error to be checked is a good thing? Based on Cases 1(c) and 2(c), it seems to me that the &#147;Seriously Bad Things that can happen&#148; are pretty much the same in both models.</I></p>
<p><I>Herb</I></p>

<p>Herb,</p>
<p>Exceptions are a Very Good Thing. Of that there can be no doubt. Code designed and built using exceptions can be much cleaner and easier to follow than code that relies on error codes. The project that I just finished used Broadvision, a web application framework that relies completely on the error code method. Our code that interacted with Broadvision had, as a direct result, about a four-to-one ratio of error-handling code to code that actually did any real work. Exceptions could have made that code a lot cleaner by removing all that error handling from the main line of processing, and by allowing us to centralize the error handling in those contexts that had sufficient information to deal with the errors effectively.</p>
<p>After reading back over your response, I guess my whole argument really does come down to the philosophical question of what an exception should be used for.</p>
<p>My reading about the potential performance overhead introduced by using exception handling, plus too many readings of Stroustrup&#146;s <I>The C++ Programming Language</I>, which is admittedly getting older with each passing day, where he goes to great lengths to stress that exceptions are not intended for normal error reporting, have perhaps had an undue influence on my thinking.</p>
<p>I definitely do have a different opinion now than when I first read your article. I initially disagreed with your point that every constructor failure should result in an exception, but you managed to convince me of the error of my ways. The biggest point I took home from this was the concept of a difference between constructor failure and constructor error. Constructor failure is when we do not construct a valid object that can be used safely, albeit perhaps in a degraded mode of operation. A constructor can experience errors that might lead to a less than optimally constructed object, but as long as that object is safe for use, then it is not necessarily a failure.</p>
<p>Randy Maddox</p>
</blockquote></body></html>
