<HTML>   
     <HEAD>
<TITLE>October 2001/Article title</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL Algorithms vs. Hand-Written Loops</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Scott Meyers</FONT></H3>

<BLOCKQUOTE>
<p>Itching to optimize? Not so fast! Scott presents yet more motivation to trust the library more than yourself.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p><B><i>[This article is based on a book. S. Meyers, </i>Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library<i>, Adapted from item 43. &copy; 2001 Addison-Wesley. Reprinted permission of Pearson Education, Inc.]</i></b></p>

<p>Every algorithm takes at least one pair of iterators that specify a range of objects over which to do something. <B>min_element</B> finds the smallest value in the range, for example, while <B>accumulate</B> summarizes some information about the range as a whole and <B>partition</B> separates all the elements of a range into those that do and do not satisfy some criterion. For algorithms to do their work, they must examine every object in the range(s) they are passed, and they do this in the way you&#146;d expect: they loop from the beginning of the range(s) to the end. Some algorithms, such as <B>find</B> and <B>find_if</B>, may return before they complete the traversal, but even these algorithms internally contain a loop. After all, even <B>find</B> and <B>find_if</B> must look at every element of a range before they can conclude that what they are looking for is <I>not</I> present.</p>
<p>Internally, then, algorithms are loops. Furthermore, the breadth of STL algorithms means that many tasks you might naturally code as loops could also be written using algorithms. For example, if you have a <B>Widget</B> class that supports redrawing,</p>

<pre>
class Widget {
public:
  ...
  void redraw() const;
  ...
};
</pre>

<p>and you&#146;d like to redraw all the <B>Widget</B>s in a list, you could do it with a loop, like this,</p>

<pre>
list&lt;Widget&gt; lw;
...
for (list&lt;Widget&gt;::iterator i = 
    lw.begin();
    i != lw.end(); ++i) {
  i-&gt;redraw();
}
</pre>

<p>but you could also do it with the <B>for_each</B> algorithm:</p>

<pre>
for_each(lw.begin(), lw.end(),
         mem_fun_ref(&amp;Widget::redraw));
</pre>

<p>For many C++ programmers, writing the loop is more natural than calling the algorithm, and reading the loop is more comfortable than making sense of <B>mem_fun_ref</B> and the taking of <B>Widget::redraw</B>&#146;s address. Yet this article argues that the algorithm call is preferable. In fact, this article argues that calling an algorithm is usually preferable to <I>any</I> hand-written loop. Why?</p>
<p>There are three reasons:</p>

<UL><LI>   <B>Efficiency:</B> Algorithms are often more efficient than the loops programmers produce.</LI>
<LI>   <B>Correctness:</B> Writing loops is more subject to errors than calling algorithms.</LI>
<LI>   <B>Maintainability:</B> Algorithm calls often yield code that is clearer and more straightforward than the corresponding explicit loops.</LI></UL>

<p>The remainder of this article lays out the case for algorithms.</p>

<p>From an efficiency perspective, algorithms can beat explicit loops in three ways, two major, one minor. The minor way involves the elimination of redundant computations. Look again at the loop we just saw:</p>

<pre>
for (list&lt;Widget&gt;::iterator i = 
    lw.begin();
    <font color=#FF0000>i != lw.end();</font>
    ++i) {
  i-&gt;redraw();
}
</pre>

<p>I&#146;ve highlighted the loop termination test to emphasize that each time around the loop, <B>i</B> will be checked against <B>lw.end()</B>. That means that each time around the loop, the function <B>list::end</B> will be invoked. But we don&#146;t need to call <B>end</B> more than once, because we&#146;re not modifying the list. A single call to <B>end</B> would suffice, and, if we look again at the algorithm invocation, we&#146;ll see that that&#146;s exactly how many times <B>end</B> is evaluated:</p>

<pre>
// this call evaluates lw.end() exactly
// once
for_each(lw.begin(), lw.end(),
         mem_fun_ref(&amp;Widget::redraw));
</pre>

<p>To be fair, STL implementers understand that <B>begin</B> and <B>end</B> (and similar functions, such as <B>size</B>) are used frequently, so they&#146;re likely to design them for maximal efficiency. They&#146;ll almost certainly <B>inline</B> them and strive to code them so that most compilers will be able to avoid repeated computations by hoisting their results out of loops like the one above. Experience shows that implementers don&#146;t always succeed, however, and when they don&#146;t, the avoidance of repeated computations is enough to give the algorithm a performance edge over the hand-written loop.</p>
<p>But that&#146;s the minor efficiency argument. The first major argument is that library implementers can take advantage of their knowledge of container implementations to optimize traversals in a way that no library user ever could. For example, the objects in a <B>deque</B> are typically stored (internally) in one or more fixed-size arrays. Pointer-based traversals of these arrays are faster than iterator-based traversals, but only library implementers can use pointer-based traversals, because only they know the size of the internal arrays and how to move from one array to the next. Some STLs contain algorithm implementations that take their <B>deque</B>&#146;s internal data structures into account, and such implementations have been known to clock in at more than 20 percent faster than the &#147;normal&#148; implementations of the algorithms.</p>
<p>The point is not that STL implementations are optimized for <B>deque</B>s (or any other specific container type), but that implementers know more about their implementations than you do, and they can take advantage of this knowledge in algorithm implementations. If you shun algorithm calls in favor of your own loops, you forgo the opportunity to benefit from any implementation-specific optimizations they may have provided.</p>
<p>The second major efficiency argument is that all but the most trivial STL algorithms use computer science algorithms that are more sophisticated &#151; sometimes <I>much</I> more sophisticated &#151; than anything the average C++ programmer will be able to come up with. It&#146;s next to impossible to beat <B>sort</B> or its kin (e.g., <B>stable_sort</B>, <B>nth_element</B>, etc.); the search algorithms for sorted ranges (e.g., <B>binary_search</B>, <B>lower_bound</B>, etc.) are equally good; and even such mundane tasks as eliminating objects from <B>vector</B>s, <B>deque</B>s, and arrays are more efficiently accomplished using the <B>erase-remove</B> idiom than the loops most programmers come up with.</p>
<p>If the efficiency argument for algorithms doesn&#146;t persuade you, perhaps you&#146;re more amenable to a plea based on correctness. One of the trickier things about writing your own loops is making sure you use only iterators that (a) are valid and (b) point where you want them to. For example, suppose you have an array, and you&#146;d like to take each array element, add 41 to it, then insert it into the front of a <B>deque</B>. Writing your own loop, you might come up with this:</p>

<pre>
// C API: this function takes a pointer
// to an array of at most arraySize
// doubles and writes data to it. It
// returns the number of doubles written.
size_t fillArray(double *pArray, size_t arraySize);

// create local array of max possible size
double data[maxNumDoubles];

// create deque, put data into it
deque&lt;double&gt; d;
...

// get array data from API
size_t numDoubles =
  fillArray(data, maxNumDoubles);

// for each i in data, insert data[i]+41
// at the front of d; this code has a bug!
for (size_t i = 0; i &lt; numDoubles; ++i) {
  d.insert(d.begin(), data[i] + 41);
}
</pre>

<p>This works, as long as you&#146;re happy with a result where the newly inserted elements are in the reverse order of the corresponding elements in <B>data</B>. Because each insertion location is <B>d.begin()</B>, the last element inserted will go at the front of the <B>deque</B>!</p>
<p>If that&#146;s not what you wanted (and admit it, it&#146;s not), you might think to fix it like this:</p>

<pre>
// remember d&#146;s begin iterator
<font color=#FF0000>deque&lt;double&gt;::iterator insertLocation = d.begin();</font>

// insert data[i]+41 at insertLocation, then
// increment insertLocation; this code is also buggy!
for (size_t i = 0; i &lt; numDoubles; ++i) {
  d.insert(<font color=#FF0000>insertLocation++</font>, data[i] + 41);
}
</pre>

<p>This looks like a double win, because it not only increments the iterator specifying the insertion position, it also eliminates the need to call <B>begin</B> each time around the loop; that eliminates the minor efficiency hit we discussed earlier. Alas, this approach runs into a different problem: it yields undefined results. Each time <B>deque::insert</B> is called, it invalidates all iterators into the <B>deque</B>, and that includes <B>insertLocation</B>. After the first call to <B>insert</B>, <B>insertLocation</B> is invalidated, and subsequent loop iterations are allowed to head straight to looneyland.</p>
<p>Once you puzzle this out, you might come up with the following:</p>

<pre>
deque&lt;double&gt;::iterator insertLocation =
  d.begin();

// update insertLocation each time
// insert is called to keep the iterator valid,
// then increment it
for (size_t i = 0; i &lt; numDoubles; ++i) {
  <font color=#FF0000>insertLocation =</font>
    d.insert(<font color=#FF0000>insertLocation</font>, data[i] + 41);
  <font color=#FF0000>++insertLocation;</font>
}
</pre>

<p>This code finally does what you want, but think about how much work it took to get here! Compare that to the following call to <B>transform</B>:</p>

<pre>
// copy all elements from data to the
// front of d, adding 41 to each
transform(data, data + numDoubles,
          inserter(d, d.begin()),
          bind2nd(plus&lt;int&gt;(), 41));
</pre>

<p>The &#147;<B>bind2nd(plus&lt;int&gt;(), 41)</B>&#148; might take you a couple of minutes to get right (especially if you don&#146;t use STL&#146;s binders very often), but the only iterator-related worries you have are specifying the beginning and end of the source range (which was never a problem) and being sure to use <B>inserter</B> as the beginning of the destination range. In practice, figuring out the correct initial iterators for source and destination ranges is usually easy, or at least a lot easier than making sure the body of a loop doesn&#146;t inadvertently invalidate an iterator you need to keep using.</p>
<p>This example is representative of a broad class of loops that are difficult to write correctly, because you have to be on constant alert for iterators that are incorrectly manipulated or are invalidated before you&#146;re done using them. Given that using invalidated iterators leads to undefined behavior, and given that undefined behavior has a nasty habit of failing to show itself during development and testing, why run the risk if you don&#146;t have to? Turn the iterators over to the algorithms, and let <I>them</I> worry about the vagaries of iterator manipulation.</p>
<p>I&#146;ve explained why algorithms can be more efficient than hand-written loops, and I&#146;ve described why such loops must navigate a thicket of iterator-related difficulties that algorithms avoid. With luck, you are now an algorithm believer. Yet luck is fickle, and I&#146;d prefer a more secure conviction before I rest my case. Let us therefore move on to the issue of code clarity. In the long run, the best software is the clearest software, the software that is easiest to understand, the software that can most readily be enhanced, maintained, and molded to fit new circumstances. The familiarity of loops notwithstanding, algorithms have an advantage in this long-term competition.</p>
<p>The key to their edge is the power of a known vocabulary. There are some 70 algorithm names in the STL &#151; a total of over 100 different function templates, once overloading is taken into account. Each of those algorithms carries out some well-defined task, and <I>it is reasonable to expect professional C++ programmers to know (or be able to look up) what each does</I>. Thus, when a programmer sees a <B>transform</B> call, that programmer recognizes that some function is being applied to every object in a range, and the results of those calls are being written somewhere. When the programmer sees a call to <B>replace_if</B>, he or she knows that all the objects in a range that satisfy some predicate are being modified. When the programmer comes across an invocation of <B>partition</B>, she or he understands that the objects in a range are being moved around so that all the objects satisfying a predicate are grouped together. The names of STL algorithms convey a lot of semantic information, and that makes them clearer than any random loop can hope to be.</p>
<p>When you see a <B>for</B>, <B>while</B>, or <B>do</B>, all you know is that some kind of loop is coming up. To acquire even the faintest idea of what that loop does, you have to examine it. Not so with algorithms. Once you see a call to an algorithm, the name alone sketches the outline of what it does. To understand exactly what will happen, of course, you must inspect the arguments being passed to the algorithm, but that&#146;s often less work than trying to divine the intent of a general looping construct.</p>
<p>Simply put, algorithm names suggest what they do. &#147;<B>for</B>,&#148; &#147;<B>while</B>,&#148; and &#147;<B>do</B>&#148; don&#146;t. In fact, this is true of any component of the Standard C or C++ library. Without doubt, you could write your own implementations of <B>strlen</B>, <B>memset</B>, or <B>bsearch</B>, if you wanted to, but you don&#146;t. Why not? Because (1) somebody has already written them, so there&#146;s no point in your doing it again; (2) the names are standard, so everybody knows what they do; and (3) you suspect that your library implementer knows some efficiency tricks you don&#146;t know, and you&#146;re unwilling to give up the possible optimizations a skilled library implementer might provide. Just as you don&#146;t write your own versions of <B>strlen</B> <I>et al.</I>, it makes no sense to write loops that duplicate functionality already present in STL algorithms.</p>
<p>I wish that were the end of the story, because I think it&#146;s a strong finish. Alas, this is a tale that refuses to go gentle into that good night. Algorithm names are more meaningful than bare loops, it&#146;s true, but specifying what to do during an iteration can be clearer using a loop than using an algorithm. For example, suppose you&#146;d like to identify the first element in a vector whose value is greater than some <B>x</B> and less than some <B>y</B>. Here&#146;s how you could do it using a loop:</p>

<pre>
vector&lt;int&gt; v;
int x, y;
...
// iterate from v.begin() until an
// appropriate value is found or
// v.end() is reached
vector&lt;int&gt;::iterator i = v.begin();
for( ; i != v.end(); ++i) {
  if (*i &gt; x &amp;&amp; *i &lt; y) break;
}
// i now points to the value
// or is the same as v.end()
</pre>

<p>It is possible to pass this same logic to <B>find_if</B>, but it requires that you use a nonstandard function object adapter like SGI&#146;s <B>compose2</B> <a href="#1">[1]</a>:</p>

<pre>
// find the first value val where the
// "and" of val &gt; x and val &lt; y is true
vector&lt;int&gt; iterator i =
  find_if(v.begin(), v.end(),
       compose2(logical_and&lt;bool&gt;(),
           bind2nd(greater&lt;int&gt;(), x),
           bind2nd(less&lt;int&gt;(), y)));
</pre>

<p>Even if this didn&#146;t use nonstandard components, many programmers would object that it&#146;s nowhere near as clear as the loop, and I have to admit to being sympathetic to that view.</p>
<p>The <B>find_if</B> call can be made less imposing by moving the test logic into a separate functor class (i.e., a class declaring an <B>operator()</B> member function):</p>

<pre>
<font color=#FF0000>template&lt;typename T&gt;
class BetweenValues:
  public std::unary_function&lt;T, bool&gt; {
public:</font>
  // have the ctor save the
  // values to be between
  <font color=#FF0000>BetweenValues(const T&amp; lowValue,
                const T&amp; highValue)    
  : lowVal(lowValue), highVal(highValue)
  {}</font>
  // return whether val is
  // between the saved values
  <font color=#FF0000>bool operator()(const T&amp; val) const
  {
    return val &gt; lowVal &amp;&amp; val &lt; highVal;
  }
private:
  T lowVal;
  T highVal;
};</font>
...
vector&lt;int&gt; iterator i =
  find_if(v.begin(), v.end(),
          <font color=#FF0000>BetweenValues&lt;int&gt;(x, y)</font>);
</pre>

<p>But this has its own drawbacks. First, creating the <B>BetweenValues</B> template is a lot more work than writing the loop body. Just count the lines. Loop body: one; <B>BetweenValues</B> template: twenty-four. Not a very good ratio. Second, the details of what <B>find_if</B> is looking for are now physically separate from the call. To really understand the call to <B>find_if</B>, one must look up the definition of <B>BetweenValues</B>, but <B>BetweenValues</B> must be defined outside the function containing the call to <B>find_if</B>. If you try to declare <B>BetweenValues</B> <I>inside</I> the function containing the call to <B>find_if</B>, like this,</p>

<pre>
// beginning of function
{
  ...
  <font color=#FF0000>template &lt;typename T&gt;
  class BetweenValues:
    public std::unary_function&lt;T, bool&gt; { ... };</font>
  vector&lt;int&gt;::iterator i =
    find_if(v.begin(), v.end(),
            BetweenValues&lt;int&gt;(x, y));
  ...
}
// end of function
</pre>

<p>you&#146;ll discover that it won&#146;t compile, because templates can&#146;t be declared inside functions. If you try to avoid that restriction by making <B>BetweenValues</B> a class instead of a template,</p>

<pre>
// beginning of function
{
  ...
  <font color=#FF0000>class BetweenValues:
    public std::unary_function&lt;int, bool&gt; { ... };</font>
  vector&lt;int&gt; iterator i =
    find_if(v.begin(), v.end(),
            <font color=#FF0000>BetweenValues(x, y)</font>);
  ...
}
// end of function
</pre>

<p>you&#146;ll find that you&#146;re still out of luck, because classes defined inside functions are known as <I>local classes</I>, and local class types can&#146;t be bound to template type arguments (such as the type of the functor taken by <B>find_if</B>). Sad as it may seem, functor classes and functor class templates are not allowed to be defined inside functions, no matter how convenient it would be to be able to do it.</p>
<p>In the ongoing tussle between algorithm calls and hand-written loops, the bottom line on code clarity is that it all depends on what you need to do inside the loop. If you need to do something an algorithm already does, or if you need to do something very similar to what an algorithm does, the algorithm call is clearer. If you need a loop that does something fairly simple, but would require a confusing tangle of binders and adapters or would require a separate functor class if you were to use an algorithm, you&#146;re probably better off just writing the loop. Finally, if you need to do something fairly long and complex inside the loop, the scales tilt back toward algorithms, because long, complex computations should generally be moved into separate functions, anyway. Once you&#146;ve moved the loop body into a separate function, you can almost certainly find a way to pass that function to an algorithm (often <B>for_each</B>) such that the resulting code is direct and straightforward.</p>
<p>If you agree with this Item that algorithm calls are generally preferable to hand-written loops, and if you also agree that range member functions are preferable to loops that iteratively invoke single-element member functions <a href="#2">[2]</a>, an interesting conclusion emerges: well-crafted C++ programs using the STL contain far fewer loops than equivalent programs not using the STL. This is a good thing. Any time we can replace low-level words like <B>for</B>, <B>while</B>, and <B>do</B> with higher-level terms like <B>insert</B>, <B>find</B>, and <B>for_each</B>, we raise the level of abstraction in our software and thereby make it easier to write, document, enhance, and maintain.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  To learn more about <B>compose2</B>, consult the SGI STL website (&lt;http://www.sgi.com/tech/stl/&gt;) or Matt Austern&#146;s book, <I>Generic Programming and the STL</I> (Addison-Wesley, 1999).</p>
<p><a name="2"></a>[2]  <I>Range member functions</I> are container member functions such as <B>insert</B>, <B>erase</B>, and <B>assign</B> that take two iterators specifying a range to e.g., insert, erase, or assign. A single call to a range member is generally much more efficient than a hand-written loop that does the same thing. For details, consult Item 5 of <I>Effective STL</I>.</p>

<p><i><B>Scott Meyers</B> is one of the world&#146;s foremost authorities on C++; </I>Effective STL<I> is his third C++ book. He has a Ph.D. in Computer Science from Brown University, sits on the technical advisory boards of several companies, and provides training and consulting services to clients worldwide. His website is &lt;www.aristeia.com&gt;.</i></p>

</blockquote></body></html>
