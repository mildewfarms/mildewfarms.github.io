<HTML>   
     <HEAD>
<TITLE>October 2001/Sending Objects across Platforms</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   Objects and Components</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sending Objects across Platforms</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Fabio Lopiano</FONT></H3>

<BLOCKQUOTE>
<p>Herewith are some very handy classes for moving your objects around a network.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The number of applications written for communicating across multiple computing platforms and environments on a network continues to grow. A common problem in developing client/server, e-commerce, distributed, and other networked applications is the conversion of data from host to network format and vice versa. The non-standard (but commonly available) functions <B>ntoh*</B> and <B>hton*</B> help to deal with this marshalling problem. Unfortunately, these functions can be tedious to invoke for every data member of every object (and its subobjects) that need to be transmitted or received.</p>
<p>This article demonstrates a technique to bridge the host/network/host chasm, which uses <B>hton*</B> and <B>ntoh*</B> in a more elegant way. It also shows how this technique can be extended to develop a framework for the rapid implementation of complex communication protocols.</p>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>When you write a program that will exchange binary data with other programs over a network, you may need the data exchange to work even when the programs are running on different kinds of machines. If so, when sending, you must convert the data&#146;s representation from the internal format used by the host where the program is running into a common network format, and then from the common network format to the internal format used by the host where the receiving program is running.</p>
<p>Some architectures (e.g., Intel, Alpha) store internal data in &#147;little-endian&#148; format, while others (e.g., Sparc, PowerPC) store data in &#147;big-endian&#148; format. <B>hton*</B> and <B>ntoh*</B> address endianness: for example, <B>htons</B> and <B>ntohs</B> convert short integers from host to network format and back, respectively, and <B>htonl</B> and <B>ntohl</B> do the same for 32-bit integers. So, when exchanging data over a network, you must invoke the <B>hton*</B> functions to convert all your data into network format, and, when receiving the data, you must convert it back from network to host format.</p>
<p>Unfortunately, invoking these conversions manually and getting the types right is usually an error-prone task, and it is common to encounter some type mismatches in the sending and receiving routines. Further, when the protocol itself changes in a way that affects the types being used (for example a <B>short</B> is changed into an <B>int</B>), both sides&#146; routines must be changed accordingly.</p>
<p>Instead, it would be nice to send whole objects (even complex ones) over the network without having to translate every individual field manually and without worrying excessively about the exact size of each data member.</p>
<p>The idea is to use a mechanism similar to that used with the standard I/O streams: the insertion and extraction operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> insert/extract data into/from a buffer, thus providing an easy hook where <B>hton*</B> and <B>ntoh*</B> can be wrapped and their use hidden. Moreover, by taking advantage of the compiler&#146;s own knowledge of types, you can avoid worrying about type safety in terms of invoking the right conversion function (<B>short</B> or <B>long</B>) because the compiler can already choose the appropriate operator in a type-safe way.</p>

<H3><FONT COLOR="#000080">NetBuffer and NetObject</FONT></H3>

<p>First, you need to define a <B>NetBuffer</B> class, which manages a dynamically allocated binary buffer and provides shift operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> to insert and extract data of specific types. <B>NetBuffer</B> will principally convert integral data from and to network format. Having such a <B>NetBuffer</B> allows you to write something like this <a href="#1">[1]</a>:</p>

<pre>
NetBuffer nbuf;

int   x;
short y;
char  z;

nbuf &lt;&lt; x &lt;&lt; y &lt;&lt; z ;

socket.send( nbuf.buffer() );
</pre>

<p>and on the server side:</p>

<pre>
NetBuffer nbuf;

// Socket::recv(Buffer &amp;) resizes 
// the buffer
socket.recv( nbuf.buffer() );

int x;
short y;
char z;

nbuf &gt;&gt; x &gt;&gt; y &gt;&gt; z;
</pre>

<p>So far, <B>NetBuffer</B> is just a simple shortcut to <B>hton*</B> and <B>ntoh*</B>. But the objective is to send complex objects without having to cope with their inner structures.</p>
<p>What you need is something like a <B>NetObject</B> class, from which you derive your own classes and which internally uses a <B>NetBuffer</B> to convert its members from one format to the other, without the clients of the inherited classes noticing.</p>
<p>This would enable you to write code like this:</p>

<pre>
class MixedData : public NetObject
{
  int x;
  short y;
  char z;
public:
    // other members not shown
};


MixedData msg;

socket.send( msg.toBuffer() );
</pre>

<p>and, on the other side:</p>

<pre>
NetBuffer buf;

socket.recv( buf.buffer() );
MixedData msg = buf;
</pre>

<p>Once you have this, you can go even further, composing objects like this:</p>

<pre>
class Header : public NetObject {...};
class Body   : public NetObject {...};
class Message  : public NetObject
{
    Header header_;
    Body   body_;
public:
    ...
};
</pre>

<p>You can put a <B>Message</B> into a <B>Buffer</B> and get it out on the other side without having to know that all the bytes of the inner objects were converted as needed during the transfer.</p>

<H3><FONT COLOR="#000080">Implementation</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows an implementation of <B>NetBuffer</B>. It composes a <B>Buffer</B> <a href="#2">[2]</a> and keeps two counters for its current writing and reading position.</p>
<p>This code assumes that <B>CHAR_BITS==8</B> and that the sizes of <B>char</B>, <B>short</B>, and <B>int</B> are respectively one, two, and four bytes. For platforms with different sizes, it is possible to further generalize the code, keeping in mind that the network format of the data should still have the above-mentioned sizes.</p>
<p>Two methods, <B>put</B> and <B>get</B>, allow inserting/extracting of data into/from the buffer. These methods are used by the operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> defined for each type you want to manage.</p>
<p>The shift operators for unsigned values have been omitted, but they could be useful <a href="#3">[3]</a>.</p>
<p>A method <B>buffer</B> provides access to the underlying <B>Buffer</B>, and the methods <B>size</B> and <B>resize</B> allow for accessing and modifying its size.</p>
<p>When implementing <B>NetBuffer</B>, you must also consider its internal memory management.</p>
<p>Assume that you will know in advance how much data you are going to write into the buffer. This lets you avoid a resize for each insert. This assumption simplifies the class and improves performance. (You will see shortly how to automatically calculate the correct size for a given <B>NetObject</B>.)</p>
<p>You must also decide what to do when you try to write (or read) more data than will fit (or is available) in the buffer. As it turns out, a useful strategy is to simply ignore extra writing into your internal buffer when dynamic memory is exhausted and returning zero values for out-of-bounds reading, and instead, in each case update the respective internal write/read counter.</p>
<p>This brings us to our main class where the streaming work is done, <B>NetObject</B> (shown in <a href="list2.htm">Listing 2</a>). <B>NetObject</B> will use the <B>NetBuffer</B> for its own implementation details, and it will make use of both the above &#147;unintuitive&#148; features of <B>NetBuffer</B>.</p>
<p><B>NetObject</B> has only two virtual functions, <B>netWrite</B> and <B>netRead</B>, both of which take a <B>NetBuffer</B> as argument. All that the derived classes must do is implement these two methods to insert and extract their data members. With these two functions, you can give a concrete implementation to all of <B>NetObject</B>&#146;s other methods without needing to know the details of the concrete classes to be derived later.</p>
<p>The <B>netCopy</B> method allows derived classes to be filled with the contents of a <B>NetBuffer</B> or of a <B>NetObject</B> using <B>netRead</B>.</p>
<p>The <B>netClear</B> method creates an empty <B>NetBuffer</B> and invokes a <B>netRead</B> on it, which has the effect of setting to zero all the data members of the class (or, more precisely, all the data members involved in the network conversion).</p>
<p>The <B>netSize</B> method calculates the size of the object by invoking <B>netWrite</B> on an empty <B>NetBuffer</B> and returning its write counter. This returns the amount of space needed to store the object in a <B>NetBuffer</B>. Note that this size may be different from the actual size of the object as reported by <B>sizeof</B>.</p>
<p>The <B>toBuffer</B> method uses <B>netWrite</B> to fill a <B>NetBuffer</B> containing the whole object in network format. Note that before writing the buffer, its size is calculated using the <B>netSize</B>.</p>
<p>Operator <B>==</B> compares two objects by converting both to <B>Buffer</B>s and then comparing the buffers.</p>
<p>In this way, all derived classes inherit working <B>netCopy</B>, <B>netClear</B>, <B>netSize</B>, and <B>toBuffer</B> methods and comparison operators, regardless of which kind of data members they contain.</p>
<p>Finally the shift operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> are defined to insert and extract whole <B>NetObject</B>s into and from a <B>NetBuffer</B>.</p>
<p>The derived classes must simply implement the two virtual methods in the obvious way: using the operators <B>&lt;&lt;</B> and <B>&gt;&gt;</B> on all their data members.</p>
<p>For example, the class <B>MixedData</B>, shown above, will have the following implementation:</p>

<pre>
void MixedData::netWrite
    (NetBuffer&amp; nb) const
{
    nb &lt;&lt; x &lt;&lt; y &lt;&lt; z ;
}

void MixedData::netRead(NetBuffer&amp; nb)
{
    nb &gt;&gt; x &gt;&gt; y &gt;&gt; z ;
}
</pre>

<p>It is also possible to extend an existing class, giving it a network conversion capability using multiple inheritance.</p>
<p>For example, given a concrete class <B>A</B>, you can write a class like this:</p>

<pre>
class NetA :
   public A,
   public NetObject
{
   protected:
      void netWrite(NetBuffer &amp;) const;
      void netRead(NetBuffer &amp;);
   public:
      // add constructors if needed
};
</pre>

<p>You only need to implement the <B>netWrite</B> and <B>netRead</B>, and then you may use an object of this new class as though it were an object of class <B>A</B>. You can also send it into a socket without additional effort. A common use of this kind of class is to implement the network-extended class as a data member of a composite <B>NetObject</B> derived class, whose public interface allows clients to access only the base class (shown in following example):</p>

<pre>
class BigObject : public NetObject
{
   NetA theFirst;
   NetA theSecond;
   // other members omitted
 public:
   A &amp; first() { return theFirst; }
   A &amp; second(){ return theSecond; }
};
</pre>

<p>Even complex objects such as arrays or vectors of objects are easy to implement. <a href="list3.htm">Listing 3</a> shows two template classes for vectors of fixed or variable length. In particular, note how the <B>NetVector</B> template class inherits from <B>std::vector</B> and carries on its interface <a href="#4">[4]</a>.</p>
<p>The <B>NetArray&lt;&gt;</B> class has a fixed length, and the conversion operators allow you to use it as a normal array.</p>
<p>The <B>NetVector&lt;&gt;</B> class has a variable length, so <B>netWrite</B> puts in the stream the number of elements following, while <B>netRead</B> reads it before reading the elements themselves. This is a common way to send lists of data. Less common is the size of the counter: usually, for short lists, one byte is used, but in some cases it is possible to use a <B>short</B> or even an <B>int</B>. For this reason, a template parameter (defaulted to <B>char</B>) is used to represent the vector&#146;s length.</p>
<p>Now it&#146;s easy to implement a complex protocol &#151; you merely need to compose little <B>NetObject</B> classes to obtain complex classes, which seamlessly can be converted to and from network format.</p>

<H3><FONT COLOR="#000080">Sending and Receiving NetObjects</FONT></H3>

<p>So far, I have shown how to design classes whose objects can easily be converted to and from network format. Now I will show how to use them.</p>
<p>For the sending side, it is quite simple: once you have an <B>NetObject</B> ready to be sent, simply assign it to a <B>Buffer</B> class (using <B>toBuffer</B>) and send it.</p>
<p>For example, if the class <B>Message</B> inherits from <B>NetObject</B>, you can send the following message:</p>

<pre>
Socket  socket;
Message message;

// code to fill the message and to set 
// up the socket

socket.send( message.toBuffer() );

// error checking omitted
</pre>

<p>The receiving side, especially for complex protocols, is not so straightforward. The problem is that, while the sender knows what he or she is sending, the receiver (usually) does not know what is coming from the network.</p>
<p>For simplicity, assume that you are receiving from a datagram socket, like UDP, and that for each invocation of <B>recv</B>, you will read exactly one message <a href="#5">[5]</a>.</p>
<p>Once you have read the data into a Buffer, you assign it to an object of your class derived from <B>NetObject</B>. It is enough to define in your class a constructor (and/or an assignment operator) from <B>Buffer</B>, which simply invokes <B>netCopy</B> on its argument.</p>
<p>But wait. It is likely that your application-level protocol has different kinds of messages. How can you know which class to choose? Usually these kinds of protocols have a fixed header and a variable body (and often a list of other optional items appended to it); the header carries all the information to parse the remainder of the message. But what if you want to separate the handling of the socket from the semantic of the message? You want to handle a generic message at this low level (so close to the network) and examine its details far up at a more appropriate application level. This can be achieved using a &#147;lazy-evaluation&#148; technique.</p>
<p>You can use a generic class <B>Message</B> made up by the <B>Header</B> (whose structure is fixed) and a <B>Body</B>, which at this level is simply a <B>NetBuffer</B>. You can create an instance of this class from the data you read from the socket and propagate it to the higher levels of your application, which can then assign the <B>Body</B> to a more specific class depending on the information stored in the <B>Header</B>. This operation can be performed in a seamless way by providing the specific class a constructor from <B>NetObject</B> that simply invokes <B>netCopy</B> on it.</p>
<p>Consider for example the <B>Message</B> class shown in <a href="list4.htm">Listing 4</a>. (Note that before extracting the body from the buffer, you need to resize it to the size specified in the header.) You can have a piece of code that reads a message from the socket as follows:</p>

<pre>
   // object socket like in the previous example

   Buffer buf;

   socket.recv(buf);

   // error checking omitted

   Message message(buf);
</pre>

<p>At a higher level, you can have more specific classes for the various kinds of bodies. You can decide which class to use depending on the type of the header, and you can simply assign <B>msg.body</B> to it.</p>
<p>The same technique can be reused inside the specific bodies. In fact, often the body of a message may contain other objects (or lists of objects) whose structure is not fixed, but the body depends on other data stored in the container itself. Again you can assign general objects to more specific objects, later on, when their types will be known.</p>
<p>A general way to do this is a with a constructor (and an assignment operator) from <B>NetObject</B>. Their implementations will simply invoke <B>netCopy</B>.</p>
<p>Adding these constructors and operators, all objects derived from <B>NetObject</B> can be assigned to each other. For example, an object of a class containing a <B>Buffer</B> of twelve <B>char</B>s can be assigned to another object of a different class containing three integers. The comparison operator <B>==</B> will return true if applied to them: those objects are not identical on a byte-per-byte comparison, but their &#147;network format&#148; versions are equal.</p>
<p>This allows you to assign a class containing a list of generic objects to a class with a list of specific objects. This is useful when some general operation must be performed on some kind of message before exactly knowing its full structure, but acting on it as though it were something more specific than a simple buffer (examples could be integrity checks, like CRCs or MD5 digests).</p>
<p>By using these techniques, implementing a complex communication protocol becomes a simpler job.</p>
<p>In <a href="list4.htm">Listing 4</a>, the class <B>Message</B> manages a list of <B>Attribute</B>s without caring about the exact kind of information stored in them. At a higher level, each item of this list can be assigned to an instance of the appropriate class. For example, a certain kind of <B>Attribute</B> could store a time stamp, so a class, again derived from <B>NetObject</B>, storing ID and time stamp, can be assigned from the <B>Attribute</B> class like this:</p>

<pre>
TimeStamp ts = message.findAttribute(TimeStamp::Id);
</pre>

<p>provided that <B>findAttribute</B> searches the vector for an item with the given <B>Id</B>.</p>
<p>Of course, since all these classes may be assigned to each other, you must use them with care. For example, two objects of different classes could end up being used interchangeably without a warning from the compiler <a href="#6">[6]</a>.</p>
<p>The effort of writing the same constructors and operators for all derived classes is a bit tedious and can be avoided by using a simple template class (shown in <a href="list5.htm">Listing 5</a>) that provides <B>operator=</B> and constructors.</p>
<p>Note that the sender and receiver usually use complementary constructors and methods. The sender usually puts information into the object, so it uses a constructor or some methods to set the values of the members. On the other side, the receiver must extract the information from the object and often needs the constructors provided by this class. Even if sender and receiver are usually implemented in two different programs, it is a good thing to share the definition of the classes (when possible) so that they are always in synch.</p>
<p>A general way to do this is to write a class <B>A</B> derived from <B>NetObject</B>, with specific constructors and set methods to be used by the sender. Then use the class <B>NetObjectT&lt;A&gt;</B> in the receiver, which does not need the specific constructors, but does usually need the <B>Buffer</B> and <B>NetObject</B> constructors provided by this template class.</p>

<H3><FONT COLOR="#000080">Source Code</FONT></H3>
<p>On the website (&lt;www.cuj.com/code&gt;), you can find the complete source code for the classes <B>Buffer</B>, <B>NetBuffer</B>, and <B>NetObject</B> along with an example program that uses most of the features illustrated in this article.</p>
<p>The code has been tested both with the GNU compiler 3.0 and with Microsoft Visual C++ 6.0.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  In the examples, I assume to have a class <B>Socket</B>, which allows sending and receiving of an object of type <B>Buffer</B>, where <B>Buffer</B> is a class chosen for the implementation of <B>NetBuffer</B> (e.g., <B>std::vector&lt;char&gt;</B> in <a href="list1.htm">Listing 1</a>).</p>
<p><a name="2"></a>[2]  The examples in this article use a vector of <B>char</B> as underlying <B>Buffer</B>; the full code (available at &lt;www.cuj.com/code&gt; provides a smarter <B>Buffer</B> class. If the readers already have their own <B>Buffer</B> class, they can readily implement <B>NetBuffer</B> in terms of that.</p>
<p><a name="3"></a>[3]  It is possible to have a smarter implementation of this class using template methods with the help of a partially specialized template class, but this is outside of the scope of this article.</p>
<p><a name="4"></a>[4]  This inheritance could be problematic because <B>std::vector</B>&#146;s destructor is not virtual and is not designed for inheritance, so the user should not use a <B>NetVector&lt;T&gt;</B> polymorphically as a <B>std::vector&lt;T&gt;</B>. In fact, this is unlikely to happen because the purpose of this class is to be a data member for other <B>NetObject</B> derived classes.</p>
<p><a name="5"></a>[5]  This is not true for stream sockets, like TCP, where you have a continuous stream of bytes and need to manually separate the messages, but these details can be hidden in the implementation of the <B>Socket</B> class.</p>
<p><a name="6"></a>[6]  A safer way is to allow construction/assignment only from specific classes, but this is not always possible and causes stricter coupling between <B>NetObject</B> classes (for example <B>TimeStamp</B> could have a constructor/assignment only for <B>Attribute</B>).</p>

<H3><FONT COLOR="#000080">References</FONT></H3>
<p>[1]  Scott Meyers. <I>More Effective C++</I> (Addison-Wesley, 1996).</p>
<p>[2]  Andrei Alexandrescu. <I>Modern C++ Design</I> (Addison-Wesley, 2001).</p>

<p><i><B>Fabio Lopiano</B> received a degree in Computer Science from the University of Pisa (Italy) in 1995. He currently works at the Eutelsat Multimedia Labs in Paris, where he is busy with Internet services via satellite. Some of the ideas explained in this article were developed during his work at Teseo srl (Rome), where he designed a framework for online sports betting, which is currently deployed in Italy and will be used in South Korea for the 2001 Soccer World Championship.</i></p>

<h4><a href="../../../source/2001/oct01/lopiano.zip"></a></h4>
</blockquote></body></html>
