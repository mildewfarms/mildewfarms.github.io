<HTML><HEAD>
<TITLE>October 2001/Sending Objects across Platforms/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: An implementation of NetBuffer</A></h4>
<pre>
// For simplicity, this code assumes that CHAR_BITS is 8
// It is possible to further generalize this code for
// platforms having different CHAR_BITS values.
//
// In any case, the network format must have 8-bit chars,
// 16-bit shorts and 32-bit ints

typedef std::vector&lt;char&gt; Buffer;

class NetBuffer
{
  Buffer theBuffer;
  size_t theReadCounter;
  size_t theWriteCounter;

  void reset()
  {
    theReadCounter  = 0;
    theWriteCounter = 0;
  }

public:

  explicit NetBuffer(size_t aSize=0)
    : theBuffer(aSize) { reset(); }

  NetBuffer(const Buffer &amp;aBuffer) : theBuffer(aBuffer) { reset(); }

  NetBuffer(const char *aBuffer, size_t aSize)
     : theBuffer(aSize) { reset(); put(aBuffer, aSize); reset(); }


  bool get(char *aBuffer, size_t aSize);
  void put(const char *aBuffer, size_t aSize);

  const Buffer &amp; buffer() const { return theBuffer; }
  Buffer &amp; buffer() { return theBuffer; }

  size_t size() const { return theBuffer.size(); }
  void resize(size_t aSize) { theBuffer.resize(aSize); }

  size_t bytesRead() const { return theReadCounter; }
  size_t bytesWritten() const { return theWriteCounter; }

};

void NetBuffer::put(const char * aBuffer, size_t aSize)
{
  if( theWriteCounter + aSize &lt;= size() )
  {
    memcpy(&amp;(theBuffer[theWriteCounter]), aBuffer, aSize);
  }
  theWriteCounter += aSize;
}

bool NetBuffer::get(char * aBuffer, size_t aSize)
{
  bool ret = true;

  if( theReadCounter + aSize &lt;= size() )
  {
    memcpy( aBuffer, &amp;(theBuffer[theReadCounter]), aSize);
  }
  else
  {
    ret = false;
  }

  theReadCounter += aSize;

  return ret;
}

bool operator==(const NetBuffer &amp; a, const NetBuffer &amp;b)
{
  if(a.size() != b.size()) return false;

  return memcmp(&amp;(a.buffer()[0]), &amp;(b.buffer()[0]), a.size() )==0;
}

NetBuffer &amp; operator &lt;&lt; (NetBuffer &amp;n, int8_t aChar)
{
  n.put(reinterpret_cast&lt;char *&gt;(&amp;aChar), 1);
  return n;
}

NetBuffer &amp; operator &gt;&gt; (NetBuffer &amp;n, int8_t  &amp; aChar)
{
  if(!n.get(reinterpret_cast&lt;char *&gt;(&amp;aChar), 1))
    aChar = 0;
  return n;
}

NetBuffer &amp; operator &lt;&lt; (NetBuffer &amp;n, int16_t aShort)
{
  int16_t netValue = htons(aShort);
  n.put(reinterpret_cast&lt;char *&gt;(&amp;netValue), 2);
  return n;
}

NetBuffer &amp; operator &gt;&gt; (NetBuffer &amp;n, int16_t &amp; aShort)
{
  aShort = n.get( reinterpret_cast&lt;char *&gt;(&amp;aShort),2)
    ?  ntohs(aShort) : 0;
  return n;
}

NetBuffer &amp; operator &lt;&lt; (NetBuffer &amp;n, int32_t anInt)
{
  int32_t netValue = htonl(anInt);
  n.put(reinterpret_cast&lt;char *&gt;(&amp;netValue), 4);
  return n;
}

NetBuffer &amp; operator &gt;&gt; (NetBuffer &amp;n, int32_t &amp; anInt)
{
  anInt = n.get( reinterpret_cast&lt;char *&gt;(&amp;anInt),4)
    ?  ntohs(anInt) : 0;
  return n;
}

NetBuffer &amp; operator &lt;&lt; (NetBuffer &amp;n, const Buffer &amp;aBuffer)
{
  n.put( &amp;(aBuffer[0]) , aNetBuffer.size() );
  return n;
}

NetBuffer &amp; operator &gt;&gt; (NetBuffer &amp;n, NetBuffer &amp;aBuffer)
{
  n.get( &amp;(aBuffer[0]) , aNetBuffer.size() );
  return n;
}
&#151; End of Listing &#151;</pre></body></html>
