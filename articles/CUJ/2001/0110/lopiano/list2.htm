<HTML><HEAD>
<TITLE>October 2001/Sending Objects across Platforms/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The NetObject class</A></h4>
<pre>
class NetObject
{
protected:

  virtual void netWrite (NetBuffer&amp; nbuf) const = 0;
  virtual void netRead  (NetBuffer&amp; nbuf) = 0;


  void netCopy (const NetObject&amp; obj)
  {
    NetObject nobj( obj.toBuffer() );
    netRead ( nobj );
  }

  void netClear()
  {
    NetBuffer nbuf;  // empty
    netRead(nbuf);   // fill with 0
  }

public:

  NetObject () {}
  virtual ~NetObject() {}

  size_t netSize() const
  {
    NetBuffer nbuf;  // empty
    netWrite(nbuf);  // attempt to write
    return nbuf.bytesWritten();
  }

  Buffer toBuffer() const
  {
    NetBuffer nbuf( netSize() ); // allocate enough space
    netWrite (nbuf);
    return nbuf.buffer();
  }

  friend inline NetBuffer&amp;
  operator &gt;&gt; (NetBuffer&amp; nbuf, NetObject&amp; obj)
  {
    obj.netRead( nbuf );
    return nbuf;
  }

  friend inline NetBuffer&amp;
  operator &lt;&lt; (NetBuffer&amp; nbuf, const NetObject&amp; obj)
  {
    obj.netWrite( nbuf );
    return nbuf;
  }
};

bool operator==(const NetObject&amp; obj1, const NetObject&amp; obj2)
{
  if (&amp;obj1 == &amp;obj2) return true;
  return (obj1.toBuffer() == obj2.toBuffer() );
}

bool operator!=(const NetObject&amp; obj1, const NetObject&amp; obj2) 
{
  return !(obj1 == obj2);
}
&#151; End of Listing &#151;</pre></body></html>
