<HTML><HEAD>
<TITLE>October 2001/Sending Objects across Platforms/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Two template classes for vectors of fixed or variable length</A></h4>
<pre>
// N is the size of the array
// shift operators for NetBuffer and T must be defined

template &lt;class T, size_t N&gt;
class NetArray : public NetObject
{
  T data[N];
protected:
  virtual void netWrite (NetBuffer &amp;nb) const
    {  for(int i=0; i&lt;N; ++i) nb &lt;&lt; data[i];  }

  virtual void netRead  (NetBuffer &amp;nb)
    { for(int i=0; i&lt;N; ++i) nb &gt;&gt; data[i]; }

public:
  operator       T*()       { return data; }
  operator const T*() const { return data; }

  NetArray () { netClear(); }
};


// T must inherit from NetObject
// C is the type of the counter
template &lt;class T, class C=unsigned char&gt;
class NetVector :
  public NetObject,
  public std::vector&lt;T&gt;
{
protected:
  virtual void netWrite (NetBuffer &amp;nb) const
  {
    C counter = size();

    nb &lt;&lt; counter;

    const_iterator it = begin();

    for(; it != end() ; ++it )
     nb &lt;&lt; (*it);
  }

  virtual void netRead  (NetBuffer &amp;nb)
  {
    C counter;
    T item;

    clear();

    nb &gt;&gt; counter;

    for(int i=0; i&lt;counter; ++i)
    {
      nb &gt;&gt; item ;
      push_back(item);
    }
   }

public:

  explicit NetVector (size_t n=0) : std::vector&lt;T&gt;(n) {}
};
&#151; End of Listing &#151;</pre></body></html>
