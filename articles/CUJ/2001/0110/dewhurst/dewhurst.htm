<HTML>   
     <HEAD>
<TITLE>October 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Stepping Back</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>Const-correctness meets pointers as Steve clarifies one of C++'s most commonly-misunderstood dark corners.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Most aspects of pointers and containers in C++ are straightforward. Pointers to constants and pointers to derived classes behave in a reasonable and intuitive manner with respect to conversion and behavior. Most uses of arrays and user-defined containers also behave in simple, reasonable ways. However, by taking a step backward and dealing with pointers to pointers, arrays of class objects, or polymorphic container element hierarchies, we encounter some rather unintuitive and attractively dangerous language features. This month&#146;s installment of &#147;Common Knowledge&#148; describes some of the more common problems and makes recommendations as to what can be done about them.</p>

<H3><FONT COLOR="#000080">Pointers to Const, Pointers to Derived Classes</FONT></H3>

<p>First, let&#146;s get some terminology straight. A &#147;<B>const</B> pointer&#148; is a pointer that is constant. There is no implication that what the pointer refers to is constant. True, the C++ Standard library has a concept of <B>const_iterator</B>, which is a non-constant iterator into a sequence of constant elements, but that is a symptom of design-by-committee or some similar disease.</p>

<pre>
const char *pci; // pointer to const
char * const cpi = 0; // const pointer
char const *pci2; // pointer to const, 
                  // a la Dan Saks <a href="#1">[1]</a>
const char * const cpci = 0; // const 
                             // pointer
                             // to const
char *ip; // pointer
</pre>

<p>The Standard permits conversions that &#147;increase constness.&#148; For example, we can copy a pointer to non-<B>const</B> to a pointer to <B>const</B>. This allows us to, among other things, pass a pointer to non-constant character to <B>strcmp</B> or <B>strlen</B> even though those functions are declared to accept pointer to constant character. Intuitively, we understand that, in allowing a pointer to <B>const</B> to refer to non-constant data, we are not violating any constraints implied by the data&#146;s declaration; we also understand the reverse conversion is invalid because it would grant greater permission than the declaration of the data specifies.</p>

<pre>
int i = strlen( cpi ); // OK...
pci = ip; // OK...
ip = pci; // error!
</pre>

<p>Note that the language rules take the conservative point of view. It may actually be &#147;OK,&#148; in the sense of not dumping core immediately, to modify the data referred to by a pointer to <B>const</B> if that data actually is not <B>const</B>, or if it is <B>const</B> but the particular platform does not assign <B>const</B> data to a read-only area of memory. However, the use of <B>const</B> is typically a statement of design intent as well as physical property. The language can be seen to enforce the intent of the designer.</p>
<p>We have similar behavior for pointers to derived classes. These conversions can be seen to be almost entirely in support of the designer&#146;s intent, because they enforce the notion of an is-a relationship without any attendant requirement of protecting a physical property. Therefore, we are allowed to convert a pointer to a derived class to a pointer to a public, but not to a protected or private, base class <a href="#2">[2]</a>.</p>

<pre>
class B { /*...*/ }, *bp;
class D1 : public B { /*...*/ }, *pd1;
class D2 : public B { /*...*/ }, *pd2;
bp = pd1; // OK, D1 is-a B
pd1 = bp; // error!
bp = pd2; // OK, D2 is-a B
pd1 = pd2; // error!
</pre>

<H3><FONT COLOR="#000080">Pointers to Pointers</FONT></H3>

<p>This happily simple state of conversions does not hold in the case of pointers to pointers. Consider an attempt to convert a pointer to a pointer to a <B>char</B> to a pointer to a pointer to a <B>const char</B> (that is, <B>char **</B> to <B>const char **</B>).</p>

<pre>
char **ppc;
const char **ppcc = ppc; // error!
</pre>

<p>It looks harmless, but like many harmless-looking conversions, it opens the door to a subversion of the type system. (I would like the reader to note that I did not, at this point, attempt a sociological analogy.)</p>

<pre>
const T t = init;
T *pt;
const T **ppt = &amp;pt; // error, 
                     // fortunately
*ppt = &amp;t;  // put a const T address in
            // a T *!
*pt = value; // trash t!
</pre>

<p>This compelling subject is treated in section 4.4 of the C++ Standard, under &#147;Qualification Conversions&#148; (technically, <B>const</B> and <B>volatile</B> are known as type-qualifiers, and the Standard tends to refer to them as cv-qualifiers). There we find the following simple rules for determining convertibility:</p>

<BLOCKQUOTE>
<p>A conversion can add cv-qualifiers at levels other than the first in multi-level pointers, subject to the following rules:</p>
<p>Two pointer types T1 and T2 are <I>similar</I> if there exists a type <I>T</I> and integer <I>n</I>&gt;0 such that:</p>
<p><I>T</I>1 is <I>cv</I>1 , 0 pointer to <I>cv</I>1 , 1 pointer to . . . <I>cv</I>1 , n-1 pointer to <I>cv</I>1 , n <I>T</I></p>
<p>and</p>
<p><I>T</I>2 is <I>cv</I>2 , 0 pointer to <I>cv</I>2 , 1 pointer to . . . <I>cv</I>2 , n-1 pointer to <I>cv</I>2 , n <I>T</I> where each <I>cv</I>i , j is <B>const</B>, <B>volatile</B>, <B>const volatile</B>, or nothing.</p>
</BLOCKQUOTE>

<p>In other words, two pointers are similar if they have the same base type and have the same number of <B>*</B>&#146;s. So, for example, the types <B>char * const **</B> and <B>const char ***const</B> are similar, but <I>int * const *</I> and <I>int ***</I> are not.</p>

<BLOCKQUOTE>
<p>The n-tuple of cv-qualifiers after the first in a pointer type, e.g., <I>cv</I>1 , 1, <I>cv</I>1 , 2 , . . . , <I>cv</I>1 , n in the pointer type T1, is called the <I>cv-qualification signature</I> of the pointer type. An expression of type <I>T</I>1 can be converted to type <I>T</I>2 if and only if the following conditions are satisfied:</p>
<p><LI>   the pointer types are similar.</p>
<p><LI>   for every <I>j</I>&gt;0, if <B>const</B> is in <I>cv</I>1 , j then <B>const</B> is in <I>cv</I>2 , j, and similarly for <B>volatile</B>.</p>
<p><LI>   if the <I>cv</I>1 , j and <I>cv</I>2 , j are different, then <B>const</B> is in every <I>cv</I>2 , k for 0&lt;k&lt;j.</p>
</BLOCKQUOTE>

<p>Armed with these rules &#151; and a little patience &#151; we can determine the legality of pointer conversions such as the following:</p>

<pre>
int * * * const cnnn = 0;
    // n==3, signature == none, none, none
int * * const * ncnn = 0;
    // n==3, signature == const, none, none
int * const * * nncn = 0;
    // signature == none, const, none
int * const * const * nccn = 0;
    // signature == const, const, none
const int * * * nnnc = 0;
    // signature == none, none, const

// examples of application of rules
ncnn = cnnn; // OK
nncn = cnnn; // error!
nccn = cnnn; // OK
ncnn = cnnn; // OK
nnnc = cnnn; // error!
</pre>

<p>Very useful at cocktail parties when the conversation lags, but is familiarity with these rules of any practical use in production coding? Well, yes. Consider the following rather common situation:</p>

<pre>
extern char *namesOfPeople[];
for( const char **currentName = namesOfPeople; // error!
    *currentName; currentName++ ) //...
</pre>

<p>In my experience, the typical developer response to this error is to file a bug report with the compiler vendor, cast away the error, and dump core later on. As usual, the compiler is right and the developer is not. We face a similar situation with pointers to pointers to derived classes.</p>

<pre>
D1 d1;
D1 *d1p = &amp;d1; // OK
B **ppb1 = &amp;d1p; // error, fortunately
D2 *d2p;
B **ppb2 = &amp;d2p; // error, fortunately
*ppb2 = *ppb1; // now d2p points to a D1!
</pre>

<p>Look familiar? Just as the <B>const</B>-conversion property does not hold if one introduces another level of indirection, the same is the case of the is-a property. While a pointer to a derived class is-a pointer to a public base, a pointer to a pointer to a derived class is not a pointer to a pointer to a public base. As with the analogous <B>const</B> example, the situation that results in an error initially looks rather contrived. However, it&#146;s easy to construct a situation where an error is produced as a cooperative effort between a bad interface design and an incorrect use of the interface.</p>

<pre>
void doBs( B *bs[], B *pb ) {
    for( int i = 0; bees[i]; ++i )
        if( somecondition( bees[i], pb ) )
            bees[i] = pb; // oops!
}
//...
extern D1 *array[];
D2 *aD2 = getMeAD2();
doBs( (B **)array, aD2 ); // another casted death wish...
</pre>

<p>Once again, the developer assumes the compiler is in error and circumvents the type system with a cast. Naughty <a href="#3">[3]</a>. In this case, though, the designer of the function interface has a lot to answer for as well. A safer design would have employed a container that did not permit spoofing by cast, as an array does. We&#146;ll discuss this shortly.</p>

<H3><FONT COLOR="#000080">Arrays of Classes</FONT></H3>

<p>While we&#146;re on the subject of arrays, prudence suggests that we should also sound the standard warning about arrays of class types, especially of base class types.</p>

<pre>
void
apply( B array[], int length, void (*f)( B &amp; ) ) {
    for( int i = 0; i &lt; length; ++i )
        f( array[i] );
}
main() {
    D1 *dp = new D1[42];
    apply( dp, 42, somefunc ); // disaster!
}
</pre>

<p>The trouble is that the type of the formal argument to <B>apply</B> is &#147;pointer to <B>B</B>,&#148; not &#147;array of <B>B</B>.&#148; As far as the compiler is concerned, we&#146;re initializing a <B>B *</B> with a <B>D1 *</B>. This is legal, since a <B>D1</B> is-a <B>B</B>. However, an array of <B>D1</B> is not an array of <B>B</B>, and the code will fail badly when we attempt pointer arithmetic using <B>B</B> offsets on an array of <B>D1</B> objects.</p>
<p>Incremental attempts to make the array behave sensibly fail. If the base class <B>B</B> were declared to be abstract (a good idea in general), that would prevent any arrays of <B>B</B> from being created, but the <B>apply</B> function would still be legal (if incorrect), since it deals with pointers to <B>B</B> rather than <B>B</B> objects. Declaring the formal argument to be a reference to an array (as in <B>B (&amp;array)[42]</B>) is effective, but is not practical as we must then fix the size of the array to a given bound and can not pass a pointer (to an allocated array, for instance) as an actual argument. Arrays of base classes are just plain inadvisable, and arrays of classes in general have to be watched closely.</p>

<H3><FONT COLOR="#000080">Real Containers</FONT></H3>

<p>I can tell by all the smug looks out there that many of the readers of this article know the usual mechanism for avoiding these problems. An array is a thinly disguised pointer, and a pointer to a pointer is usually a thinly disguised array of pointers. Why not get rid of the thin disguises and use &#147;real&#148; containers instead of arrays?</p>
<p>The STL containers are the default mechanism of choice for C++ programmers. In the examples above, a simple substitution of a <B>vector&lt;const char *&gt;</B> or <B>vector&lt;B *&gt;</B> would have circumvented, or at least made obvious, any conversion problems without noticeable effect on efficiency. However, STL containers do not answer all needs, in part because their strengths also imply some limitations. One of the nice things about the STL containers is that, because they are implemented with templates, most of the decisions about their structure and behavior are made at compile time. This results in small and efficient implementations that are precisely tuned to the static context of their use.</p>
<p>However, all relevant information may not be present at compile time. For example, consider a simplified framework-oriented structure that supports the &#147;open-closed principle&#148; in that it may be modified and extended without recompilation of the framework.</p>

<pre>
template &lt;class T&gt;
class Container {
  public:
    virtual ~Container();
    virtual Iter&lt;T&gt; *genIter() const = 0; // factory method
    virtual void insert( const T &amp; ) = 0;
    //...
};
template &lt;class T&gt;
class Iter {
  public:
    virtual ~Iter();
    virtual void reset() = 0;
    virtual void next() = 0;
    virtual bool done() const = 0;
    virtual T &amp;get() const = 0;
};
template &lt;class T&gt;
void print( Container&lt;T&gt; &amp;c ) {
    auto_ptr&lt; Iter&lt;T&gt; &gt; i( c.genIter() );
    for( i-&gt;reset(); !i-&gt;done(); i-&gt;next() )
        cout &lt;&lt; i-&gt;get() &lt;&lt; endl;
}
</pre>

<p>This snippet illustrates the use of run-time polymorphism in support of framework extension. The customizer of the framework derives substitutable container and iterator types and connects them with a Factory Method <a href="#4">[4]</a>. For example, we could derive <B>List</B>, <B>Set</B>, or <B>Vector</B> containers and iterators and manipulate them with the framework code.</p>

<H3><FONT COLOR="#000080">Non-Substitutable Polymorphism</FONT></H3>

<p>It is fairly easy to design substitutable derived <B>Container</B> types. A <B>Set&lt;T&gt;</B> would then be substitutable for a <B>Container&lt;T&gt;</B>, and the usual conversions from <B>Set&lt;T&gt; *</B> to <B>Container&lt;T&gt; *</B> would hold.</p>
<p>However, there is an unfortunate and common tendency to assume that substitutability of container elements implies substitutability of the containers of these elements. We&#146;ve already seen that this relationship does not hold for arrays of substitutable classes, or arrays of pointers to substitutable classes. The same warnings apply to user-defined containers of substitutable elements. Consider the following simple container hierarchy in support of a financial instrument-pricing framework.</p>

<pre>
class Object
    { public: virtual ~Object(); };
class Instrument : public Object5
    { public: virtual double pv() const = 0; };
class Bond : public Instrument
    { public: double pv() const; };
class ObjectList {
  public:
    void insert( Object * );
    Object *get();
    //...
};
// bad idea!!!
class BondList : public ObjectList { 
  public:
    void insert( Bond *b )
        { ObjectList::insert( b ); }
    Bond *get()
        { return static_cast&lt;Bond *&gt;
            (ObjectList::get()); }
//...
};
double
bondPortfolioPV( BondList &amp;bonds ) {
    double sumpv = 0.0;
    for( each bond in list ) {
        Bond *b = current bond;
        sumpv += b-&gt;pv();
    }
    return sumpv;
}
</pre>

<p>Now, there is nothing wrong with implementing a list of <B>Bond</B> pointers with a list of <B>Object</B> pointers (although a better design would have employed a list of <B>void *</B> and drop-kicked the entire notion of an <B>Object</B> class into the bit bucket). The error is in using public inheritance to force an is-a relationship on types that are not substitutable. In essence, we &#147;stepped back&#148; when we wrapped access to our substitutable pointers in a container, rendering them unsubstitutable. However, unlike the case in which we have a pointer to a pointer (or an array of pointers), the compiler can no longer warn us of our folly.</p>

<pre>
class UnderpaidMinion : public Object {
  public:
    virtual double pay()
        { /* deposit $1M in minion&#146;s
             account */ }
};
void sneaky( ObjectList &amp;list )
    { list.insert
        ( new UnderpaidMinion ); }

void victimize() {
    BondList &amp;blist = getBondList();
    sneaky( blist );
    bondPortfolioPV( blist ); //done!
}
</pre>

<p>Here we have managed to substitute one sibling class object for another; we&#146;ve plugged in an <B>UnderpaidMinion</B> where the pricing framework is expecting a <B>Bond</B>. Under most environments, the result will be an invocation of <B>UnderpaidMinion::pay</B> rather than <B>Bond::pv</B>; an undetectable run-time type error. Just as an array of substitutable derived objects is not substitutable for an array of base objects or pointers, a user-defined container of substitutable derived objects or pointers is not substitutable for a user-defined container of base objects or pointers. Container substitutability, if present at all, should focus on the structure of the container, and not of the contained elements.</p>

<H3><FONT COLOR="#000080">You Shouldn&#146;t, Because They Will</FONT></H3>

<p>I am reminded at this point of that puerile SUV ad campaign that is current at the time this article is being written &#151; &#147;Not that you would, but you could&#148; &#151; in which various dangerous and inadvisable uses of the vehicle are showcased. In my experience on the highway in my undersized LEV, many SUV drivers not only can, but do. In most of the real-world examples above, the damage was accomplished by a cooperative effort of the designer and user of the feature. If one wanted to stretch a point(er), one could say the producer of a dangerous facility should share in the blame for its misuse. As designers, it is our responsibility to produce safe and intuitive interfaces and advertise their correct use. As we have seen above, that implies paying close attention to pointer-to-pointer conversions and container substitutability. Because, as any experienced designer knows, users of our designs not only can, but they will.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  This is a reference to an ongoing discussion I&#146;ve been having with (<I>CUJ</I> editorial board member) Dan Saks over declaration-specifier ordering. I claim that <B>const T *</B> is the least confusing way to write &#147;pointer to constant T,&#148; whereas Dan claims the preferred form is <B>T const *</B>. On his side of the argument, Dan has performed field studies in production environments, taken statistics, and generally proceeded in a scientific manner. On my side, I&#146;m right.</p>
<p><a name="2"></a>[2]  Note that there is a very heavy responsibility on the part of the designer in this case to ensure that the derived class is substitutable for each of its public base classes.</p>
<p><a name="3"></a>[3]  For more judgmental observations about casts and the people who employ them, see S.C. Dewhurst, &#147;Common Knowledge: A Question of Respect,&#148; <I>C/C++ Users Journal</I>, April 2001.</p>
<p><a name="4"></a>[4]  Gamma, et al. <I>Design Patterns</I> (Addison Wesley, 1995), p. 107.</p>
<p><a name="5"></a>[5]  This is a &#147;cosmic hierarchy&#148; design. For an explanation as to why this is evil, see S.C. Dewhurst, &#147;Don&#146;t Ask, Don&#146;t Tell,&#148; <I>C++ Report</I>, May 2000.</p>

<p><i><B>Stephen C. Dewhurst</B> (&lt;www.semantics.org&gt;) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
