<HTML>   
     <HEAD>
<TITLE>October 2001/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tococt.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editor</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Understanding Binary Searches</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>In their typical elucidating style, Koenig and Moo tell us things we probably don&#146;t know about the most fundamental algorithm of computer science.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>This article was inspired by a question on Usenet:</p>
<BLOCKQUOTE>
<p>The <B>binary_search</B> function takes two iterators and a value, and returns a <B>bool</B> that says whether the iterators specify a range that contains an element with the given value. However, if <B>binary_search</B> finds such an element, it doesn&#146;t tell me where the element is. How can I find out the location of the element?</p>
</BLOCKQUOTE>
<p>Thinking about this question, and how to answer it, helped us clarify our own understanding of binary search, and how the C++ Standard library implements them, so we want to take this opportunity to share that understanding with our readers.</p>
<p>As it happens, the library offers a binary-search function that solves part of the problem: if the sequence contains an element with the requested value, the function returns an iterator denoting the element. However, we shall see that there are a few subtleties: the function is not named <B>binary_search</B>, as the poster expected, and its return value is a bit more complicated than the poster might have imagined.</p>
<p>We will begin this article with a brief look at what a binary search is and how it works. Then we will don our library-designers&#146; hats and explore how best to make binary searches available to library users. In doing so, we&#146;ll see that the standard library provides several binary-search functions, all of which modify the classical binary-search algorithm slightly for a better fit to the C++ Standard library&#146;s constraints. Finally, we will look at how to apply what we have learned when using the library to do binary searches.</p>

<H3><FONT COLOR="#000080">Requirements</FONT></H3>

<p>A binary search is a neat piece of everyday magic: it finds a given value in a collection without looking at the whole collection. We might think such a task impossible had we never looked for a word in a dictionary. For example, if we are looking for the word &#147;sandbox&#148; in a dictionary, and we open the dictionary to a page marked &#147;rake&#150;rapier,&#148; we know that the word we seek is further on in the dictionary, and we can disregard the entire part of the dictionary that precedes the page in front of us.</p>
<p>The key to making a binary search possible is that the sequence in which it searches is already ordered. The fundamental idea is to start with a pair of locations that represent the (sorted) range in which the value sought must appear if it appears at all. In C++, we would use iterators to represent such a range and follow the usual convention that one iterator represents the first element of the range and the second represents one element past the end of the range. We might call these iterators <B>low</B> and <B>high</B>, and the value sought <B>x</B>, with the notion that if <B>x</B> is in the sequence at all, it must be in the range <B>[low, high)</B>.</p>
<p>Binary-search algorithms can take many forms. One classic form repeats the following steps:</p>

<UL><LI>   If the range is empty &#151; that is, if <B>low == high</B> &#151; then we didn&#146;t find <B>x</B>, because we know that if <B>x</B> is anywhere in the sequence, it is in <B>[low, high)</B>, and we have just determined that <B>[low, high)</B> is empty.</LI>
<LI>   Otherwise, we compute the location of an element, which we shall call <B>mid</B>, that is approximately halfway between <B>low</B> and <B>high</B>. If <B>low</B> and <B>high</B> are close together, <B>mid</B> might be equal to <B>low</B>, but <B>mid</B> must not be equal to <B>high</B> because <B>high</B> does not necessarily denote an element. The following picture may be helpful:</LI>

<p><IMG SRC="fig1.gif"></p>

<LI>   At this point, there are three possibilies:</LI>
<UL><LI>   The element at <B>mid</B> is equal to <B>x</B>, in which case we&#146;ve found the value that we seek.</LI>
<LI>   The element at <B>mid</B> is greater than <B>x</B>, in which case, the value we seek must be in the range <B>[low, mid)</B> (not <B>[low, mid]</B>, because the element at <B>mid</B> is greater than <B>x</B>, so we can exclude that element from the range.</LI>
<LI>   The element at <B>mid</B> is less than <B>x</B>, in which case, the value we seek must be in the range <B>[mid+1, high)</B>.</LI>
<p>In either of the two latter cases, we adjust the values of <B>low</B> and <B>high</B> appropriately and continue the iteration until we find the value or reduce the range to nothing. Of course, if we reduce the range to nothing, then we couldn&#146;t find the element, and we can conclude that the element was not in the original sequence.</p>
</UL></UL>

<p>This algorithm imposes several requirements on the sequence. We have already noted the most important requirement, which is that the sequence be ordered. Another is that it be possible to compute <B>mid</B> efficiently, which is easy if our iterators are random-access iterators <a href="#1">[1]</a>.</p>
<p>Translating these requirements into a C++ implementation, we can see that normally binary searches will be most useful with sequences that don&#146;t change very often. For example, it is fairly common to keep a collection of sorted values in a <B>vector</B>. In that case, searching for a value is quick, but adding a new value is slow because it involves copying the part of the <B>vector</B> that follows the insertion (and might involve copying the whole <B>vector</B> if reallocation is necessary).</p>
<p>What about the notions of &#147;greater,&#148; &#147;less,&#148; and &#147;equal?&#148; Standard library algorithms generally try to minimize the requirements that they impose on their users, and these three relations are closely intertwined. In fact, the standard library defines binary searches entirely in terms of a single relation, which we can think of as being &#147;less than.&#148; It infers the nature of the other two relations from this one. We can name this relation anything we like; the default is <B>&lt;</B>.</p>
<p>There are several reasons for this design that are worth understanding. First, by requiring only one rather than three relations, the library makes it easier to define types that can be the subject of binary searches. Second, by relying on only one relation, the library makes it easy to provide a named function for the relation. If algorithms needed both &#147;less&#148; and &#147;equal,&#148; a user who wanted to provide named functions for these operators would have to provide two function parameters instead of one. In addition to being a nuisance, this requirement would lead to problems when users provided the functions in the wrong order, or when the functions were mutually inconsistent. Moreover, as we&#146;ll see in the next section, it turns out that we can eliminate one of the two tests on each iteration when we rely solely on the &#147;less&#148; relation.</p>
<p>The final reason is perhaps the most subtle. By relying solely on an appropriate <B>&lt;</B> relation (which we might choose to give a different name) the library allows for a more flexible definition of equality than might be possible if we were to use the usual <B>==</B> relation. The library assumes that <B>&lt;</B> is defined on the elements of the sequence, and that for any two elements <B>x</B> and <B>y</B>, either <B>x &lt; y</B>, <B>y &lt; x</B>, or <B>x</B> and <B>y</B> are effectively equal. We say &#147;effectively&#148; here because they do not have to be truly equal. For example, <B>&lt;</B> might represent case-insensitive comparisons between strings. There is no problem with the fact that <B>reading</B> and <B>Reading</B> are two different strings, as long as you don&#146;t care which one of them you get when you search for either of them.</p>
<p>Accordingly, the standard library binary-search algorithms never use the notion of equality explicitly, and we shall have to use a slightly different algorithm than the classical one we have already described. Before we look at the algorithm, however, we should think about what information we would like to be able to obtain from a binary search.</p>

<H3><FONT COLOR="#000080">Fundamental Operations</FONT></H3>

<p>Suppose you are searching a sequence for a particular value. What will you do next if you find it? What if you don&#146;t find it? We can think of five possibilities:</p>
<OL><LI>If you find the value, that fact might be enough by itself. In other words, you might care only that you found it; its location in the sequence might be irrelevant. For example, the sequence might represent all the people who are authorized to use your system, a system in which you care only whether a particular person is authorized and don&#146;t need any other information about the people.</LI>
<LI>Similarly, if you don&#146;t find the value, that fact might also be enough by itself.</LI>
<LI>If you find the value, knowing its location might be necessary for further processing. Like the person who posted the Usenix question that opened this article, you might want to access the element once it was found. Continuing our previous example, the representations of your authorized people might include additional information about them &#151; information that doesn&#146;t participate in the <B>&lt;</B> comparison &#151; and you might want to use that information once you&#146;ve found it.</LI>
<LI>If the value sought isn&#146;t in the sequence, you might want to know where to insert it so that it will be there the next time.</LI>
<LI>There is one other possibility, which the person who asked the original Usenet question did not mention: there might be more than one element with the given value. For example, dictionaries have multiple entries for the same word. For that matter, you might want to insert the value into a sequence even though it already has an element with that value. In either of these cases, you will want to know the range of elements that contain the given value.</LI></OL>

<p>What kind of functions might a library define to cater to these various possibilities? What would be their arguments and return values? The arguments are simple enough: two iterators that define the sequence to search, a value to seek, and an optional comparison operation. But what about the return value?</p>
<p>In the first two cases, it&#146;s pretty obvious: all we need to return is whether or not the value sought was found. For this usage, the library provides a function named <B>binary_search</B>, which returns a <B>bool</B> that indicates whether an element with the given value was found.</p>
<p>The other cases are more complicated, because on the surface, it appears to be necessary to return more information to the caller than a single iterator can contain.</p>
<p>Before looking at how the library solves this problem, let&#146;s take a deeper look at the remaining cases. Suppose, for example, that we intend to insert the value into the sequence if it is not already there, and we want to use an element with the given value if we find it. This example subsumes cases (3) and (4), as well as the case posed by the Usenet post that motivated this article. Evidently, the search function, whatever it is, needs to return an iterator that refers to the given element if one exists, and one that refers to the appropriate insertion point otherwise. Moreover, for a search function to be useful in this context, it has to return an additional piece of information: a value that indicates whether the iterator is referring to an element equal to <B>x</B> or to a prospective insertion point for such an element.</p>
<p>Suppose, for example, that <B>iter</B> is the type of our iterators, and <B>c</B> is the container that contains the sequence in which we are searching. We might imagine writing something like this:</p>

<pre>
pair&lt;iter, bool&gt; search_result =
    <I>search-function-1</I>(c.begin(), c.end(), x);
if (search_result.second) {
    // search_result.first contains an appropriate iterator
} else
    c.insert(search_result.first, x);
</pre>

<p>Our hypothetical search function therefore returns two values: an iterator and a <B>bool</B> that says whether or not that iterator refers to an element with the sought value.</p>
<p>This interface is slightly messy: to use it, you must create a local variable to hold the two results and then inspect both of them. Moreover, in principle the <B>bool</B> is redundant in the sense that the program can figure out what its value must be without looking at it directly. For example, we might have a search function that returns only the iterator and doesn&#146;t even give us a clue as to whether that iterator refers to an element or only to a place where we could insert the element. In that case, we might write code that looks like this:</p>

<pre>
iter search_result = 
    <I>search-function-2</I>(c.begin(), c.end(),
    x);
if (search_result != c.end() &amp;&amp; 
    *search_result == x) {
    // search_result contains an 
    // appropriate iterator
} else
    c.insert(search_result, x);
</pre>

<p>This second usage example is only slightly more complicated than the first. Moreover, if we want to insert <B>x</B> into the sequence in all cases, our code becomes still simpler:</p>

<pre>
c.insert(<I>search-function-2</I>(c.begin(),
    c.end(), x), x);
</pre>

<p>Apparently the functions to handle cases (3) and (4) need to return only a single iterator, which the user may test to distinguish whether the iterator return denotes the element sought or the insertion point for that element.</p>
<p>There is a subtle additional reason why <I>search-function-2</I> is more fundamental than <I>search-function-1</I>: it is possible for the search function to locate the appropriate point to insert a given value without even knowing whether an element with that value exists! As we&#146;ll see, the standard library functions that perform binary searches all use this modified algorithm.</p>
<p>The algorithm begins as before, with the <B>low</B> and <B>high</B> iterators &#151; but this time, we think of the insertion point we seek as being in the range <B>[low, high]</B> rather than thinking of an element being in the range <B>[low, high)</B>. In other words, we are now thinking about iterator values that include the off-the-end iterator, not just about iterators that refer to elements, <B>low == high</B>; the range has a single iterator value, and that value is the insertion point that we seek. This insertion point might be off the end if <B>x</B> is greater than any element that is already in the sequence.</p>
<p>We are looking for the right place to insert <B>x</B> &#151; a point with the property that all elements before that point are strictly less than <B>x</B>, and all elements after that point are greater than or equal to <B>x</B>. The algorithm to do so works as follows:</p>

<UL><LI>   If <B>low == high</B>, we&#146;re done; the result is either <B>low</B> or <B>high</B>. Note that the <B>==</B> here is a comparison between iterators, not between container values, so it uses an operation that is always available to us because of the definition of iterators.</LI>
<LI>   Otherwise, compute <B>mid</B> as before to be about halfway between <B>low</B> and <B>high</B>, being permitted to be equal to <B>low</B> but not <B>high</B>. Because <B>mid</B> is not equal to <B>high</B>, we know that <B>mid</B> refers to an element.</LI>
<LI>   There are now only two cases:</LI>
<UL><LI>   The element at <B>mid</B> is less than <B>x</B>, in which case the insertion point must be in the range <B>[mid+1, high]</B>.</LI>
<LI>   Otherwise, the insertion point must be in the range <B>[low, mid]</B>.</LI></UL>
</UL>

<p>Perhaps surprisingly, doing without <B>==</B> for the value type has made our algorithm simpler. In particular, it is no longer necessary to do two comparisons each time through the loop. Because of this greater simplicity, and because it is no longer ever necessary to do equality comparisons, the standard library offers <I>search-function-2</I>, not <I>search-function-1</I>. It does so under the name <B>lower_bound</B>, which returns an iterator that indicates the first point at which it is possible to insert the given value in the sequence without disturbing the order.</p>
<p>As you might suspect from the name, there is also an <B>upper_bound</B> function, which returns the last possible insertion point. There is also a function named <B>equal_range</B>, which returns both insertion points as a pair of iterators. These last two operations cater to our fifth case above, handling properly the possibility that there might be more than one instance of the element we&#146;re looking for in the sequence.</p>
<p>Finally, as we&#146;ve already noted, if you want to know whether a given value appears at all, and you don&#146;t care where it appears, there is a function named <B>binary_search</B> that returns an appropriate <B>bool</B>. This function can use the same modified algorithm we just described to find where the element would be if it existed. It then tests the element at that point (if there is one) to determine whether the element is the one we seek or not. If so, it returns true; otherwise, it returns false.</p>

<H3><FONT COLOR="#000080">Examples</FONT></H3>

<p>In the following examples, we assume that we are looking for a value <B>x</B> in a container <B>c</B> that has iterators of type <B>iter</B>.</p>

<UL><LI>   Starting with our poster&#146;s query, we can find the location of the element <B>x</B> if it exists in <B>c</B> by testing the return value from <B>lower_bound</B>:</LI>
<pre>
iter search_result = lower_bound(c.begin(), c.end(), x);
if (search_result != c.end() &amp;&amp; *search_result == x)
    // process *search_result as necessary
</pre>

<p>This program fragment has one problem: it relies on <B>!=</B>, when it ought to be relying only on <B>&lt;</B> for consistency with the standard library itself. We can remedy that problem by noting that if <B>search_result</B> refers to an element, that element cannot possibly be less than <B>x</B>. If it were, inserting <B>x</B> at that point would disrupt the ordering of the sequence, but the definition of <B>lower_bound</B> is that it returns a point at which inserting <B>x</B> will not cause disruption. Therefore, the comparison <B>*search_result == x</B> must have the same result as the comparison <B>!(*search_result &gt; x)</B>. Because we wish to rely only on <B>&lt;</B>, we will rewrite this sub-expression as <B>!(x &lt; *search_result)</B>, leading to the following program fragment:</p>

<pre>
iter search_result =
    lower_bound(c.begin(), c.end(),
    x);
if (search_result != c.end() &amp;&amp;
    !(x &lt; *search_result))
    // process *search_result as 
    // necessary
</pre>

<LI>   Does <B>x</B> appear in <B>c</B>?</LI>
<pre>
if (binary_search(c.begin(), c.end(),
    x)) {
    // x is in c
} else {
    // x is not in c
}
</pre>

<LI>   Insert a copy of <B>x</B> in <B>c</B>. If elements with value <B>x</B> are already there, the newcomer will appear before all of them.</LI>
<pre>
c.insert(lower_bound(c.begin(),
    c.end(), x), x);
</pre>

<LI>   Insert a copy of <B>x</B> in <B>c</B>. If elements with value <B>x</B> are already there, the newcomer will appear after all of them.</LI>
<pre>
c.insert(upper_bound(c.begin(),
    c.end(), x), x);
</pre>

<LI>   Insert a copy of <B>x</B> into <B>c</B> if and only if a copy is not already there.</LI>
<pre>
iter search_result = 
    lower_bound(c.begin(), c.end(), 
    x);
if (search_result == c.end() || 
    *search_result != x)
    c.insert(search_result, x);
</pre>

<p>As before, we can make this code fragment more consistent by avoiding the use of <B>!=</B>:</p>

<pre>
iter search_result = 
    lower_bound(c.begin(), c.end(), 
    x);
if (search_result == c.end() || 
    x &lt; *search_result)
    c.insert(search_result, x);
</pre>

<LI>   Process all of the elements of <B>c</B> that are equal to <B>x</B>:</LI>
<pre>
pair&lt;iter, iter&gt; range = 
    equal_range(c.begin(), c.end(), 
    x);
for (iter i = range.first; 
    i != range.second; ++i) {
    // process the element at *i
}
</pre>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>Part of the difficulty in defining and using binary-search functions is that the search yields more information than will fit easily in a single value, because when the search fails, it is useful to know the point at which the value sought would have appeared. In other words, if we are searching for a value in an <I>n</I>-element sequence, there are <I>2n+1</I> distinct plausible results: any element in the sequence, the point just before any element, and the point just after the last element. There are only <I>n+1</I> distinct iterator values for such a sequence, so it is necessary to return additional information somehow.</p>
<p>In our hypothetical <I>search-function-1</I>, we chose to return an iterator and a <B>bool</B>. This choice would have allowed us to return <I>2n+2</I> possible values, but at the cost of being ungainly to use.</p>
<p>The standard library does something cleverer: by returning only the point at which an element might be inserted, it reduces the number of possible return values to <I>n+1</I> &#151; exactly the number of values that an iterator can describe. It appears at first that this strategy would lose information, but when we set out to define an appropriate algorithm, we found that because the library uses only <B>&lt;</B> and not <B>==</B>, that information was never there in the first place.</p>
<p>Accordingly, the library offers two kinds of binary-search function: a family of functions that locates an appropriate insertion point for a value, and a function that determines whether that value is present in the sequence without saying where. In addition, it caters in three different ways to the possibility that a value might appear more than once: the <B>upper_bound</B> function yields the last possible insertion point to go with the <B>lower_bound</B> function&#146;s first possible insertion point, and the <B>equal_range</B> function locates all of the elements with a given value at once.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]  It turns out that it is possible to do a binary search reasonably efficiently given only forward iterators, provided that the cost of incrementing an iterator is enough less than the cost of comparing elements. However, it requires different algorithms, and doesn&#146;t affect the main point of the article, so we&#146;re mentioning it only in a footnote.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>

</blockquote></body></html>
