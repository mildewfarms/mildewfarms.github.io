<HTML>   
     <HEAD>
<TITLE>October 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.10/tococt.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Al-Go-Rithms <a href="#1">[1]</a></FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>


<p><b><i>Copyright 2001, Jim Hyslop and Herb Sutter</i></b></p>

<p>Reports from above were mixed. I had no idea what was going on up near the surface, or in nearby space. For all I knew, the Asians could have taken over already; all I knew was that I hadn't seen them here.</p>
<p>Jeannine and I were now working exclusively within the underground alien city. It was a wonderful, dark, cold arcology buried deep below the ice, immense buildings full of silent hallways and chambers with purposes ranging from the obvious (oddly arranged toilet facilities) to the mystifying (a huge room empty but for three ten-foot-diameter metallic balls suspended in midair by unknown means). The latter probably indicated that some power source was active somewhere, but little else seemed to function, and the artifacts we were investigating rarely showed signs of life.</p> 
<p>Within that realm of old and dark silence, we humans moved carefully, huddled always near to the white glow of our lamps and work areas. Though there was no need to be quiet, we found ourselves speaking nearly always in subdued tones for no discernible reason beyond respect, tinged perhaps with awe, or at times even fear.</p> 
<p>The whole team knew we were close to a breakthrough. What's more, the officers knew it too, which was why they had us working around the clock.</p>
<p>Jeannine hooked up the power leads to the artifact we were investigating and ran another test. She watched the monitor; there was a spike, then nothing. She flung her hands up in frustration. &quot;What's wrong now! What a temperamental piece of&#151;&quot; She stopped herself and then sighed in exasperation.</p> 
<p>&quot;At least it's responding. That's something,&quot; I mused. &quot;Let me have a go. Where's that power source we were trying yesterday?&quot;</p> 
<p>She waved. &quot;Over there. The chances are nil that we can use it directly, even with adapters. This thing might work with a different form of energy, if not a completely different principle altogether.&quot;</p>
<p>&quot;It's responding,&quot; I repeated. &quot;We've got to be close. Sometimes you can take the old and mate it with the new and get it to work, if you can just make the right adapter. Or sometimes you can reimplement...&quot;</p>

<hr>

<p>I was in a code review with the Guru. While we were working through the code, we heard an unusual sound &#151; unusual, at least for the office. I looked at the Guru. &quot;That sounded like...&quot;</p>
<p>&quot;... a baby!&quot; we chimed. I gophered up. Scanning the area, I spotted Wendy's curly brown hair approaching my cubicle. As she came around the corner, I could see her pushing a baby stroller. We made appropriate oohing and aahing noises over little Jeannine, who was a month old now. I normally didn't care much for babies, but Wendy was my buddy, so I made an exception.</p>
<p>Even Bob joined the gathering crowd. &quot;Well, well,&quot; he said, puffed out as though he were the father. &quot;I always say babies look like either Winston Churchill or Yoda. How's she lookin'?&quot; He set his latte down on some printouts on my desk and took Jeannine from Wendy. He peered at the baby's scrunched up face. &quot;Hmmm... must be the exception that proves the rule. Give her twenty years and she'll be quite the babe.&quot; Just then, Jeannine squirmed and grunted. Bob sniffed, handed the baby back to Wendy, and left abruptly without his latte.</p> 
<p>I arched an eyebrow. &quot;I see you've already taught her how to deal with Bob.&quot;</p>
<p>Wendy laughed. &quot;I'd better go change her.&quot;</p>
<p>With the main attraction gone, the crowd dispersed, and the Guru and I returned to our code review. I carefully moved Bob's latte to a less dangerous spot. All went well, until we reached a parsing function that used <b>strtok</b>. The Guru looked at me askance.</p>
<p>&quot;Isn't there a better choice than <b>strtok</b>, my child?&quot; she asked.</p>
<p>&quot;But <b>strtok</b> does exactly what I need it to do. Aren't you the one who's always reminding me that the C library is also part of the C++ Standard?&quot;</p>
<p>&quot;That is true, my apprentice. But remember also the disclaimers that the C Standard makes about the library functions.&quot;</p>
<p>&quot;Well, if you're talking about multithreaded issues...&quot;</p>
<p>&quot;No, my child,&quot; the Guru interrupted. &quot;That is not what I am referring to. The blessed C Standard explicitly states that <b>strtok</b> &#151; indeed none of the Standard C functions &#151; is reentrant. Worse, in your case, is that <b>strtok</b> maintains global state across calls. Consider the context in which your function is used &#151; it is used within another parsing function which could also use <b>strtok</b>.&quot;</p>
<p>I used my favorite deer-in-the-headlights stare to let her know I didn't follow.</p>
<p>The Guru nodded. &quot;Then consider this parable,&quot; she said as she picked up the dry-erase marker and wrote on my whiteboard:</p>

<pre>
void f()
{
  // ...

  strtok( charPtrA, delimiters ); 

  // ...

  strtok( 0, delimiters );

  // ...
}

void g()
{
  strtok( charPtrB, otherDelimiters );

  // ...

  f();

  // ...

  strtok( 0, otherDelimiters );
}</pre>

<p>&quot;When <b>f()</b> terminates, it will have turned to evil the internal state of <b>strtok</b>, and <b>g()</b> will no longer be able to use it predictably.&quot;</p>
<p>&quot;I see,&quot; I said. &quot;So the solution is ...?&quot; I left the question hanging.</p>
<p>&quot;Write your own algorithm, and introduce the changes necessary. For example, here is the basic <b>strtok</b> function, implemented to operate on <b>std::string</b>s instead of C-style strings and modified to not change the source string.&quot;</p>

<pre>
std::string StringTok(
  const std::string* newSeq,
  const std::string&amp; delim )
{
  // like the standard strtok, 
  // maintain global state across calls
  
  // sequence being searched
  static const std::string*     seq = 0; 
  // current position
  static std::string::size_type pos = 0; 

  if( newSeq )
  {
    seq = newSeq;
    pos = 0;
  }

  std::string token;

  if( seq &amp;&amp; pos != std::string::npos )
  {
    pos = seq-&gt;find_first_not_of
      ( delim.c_str(), pos );
    if( pos != std::string::npos )
    {
      std::string::size_type next =
        seq-&gt;find_first_of( delim.c_str(), pos );
      token = seq-&gt;substr( pos, next-pos );
      pos = next;
      if( pos != std::string::npos ) ++pos;
      if( pos &gt;= seq-&gt;size() ) pos =
        std::string::npos;
    }
  }

  return token;
}
</pre>

<p>(Well, okay, I admit that's not <i>exactly</i> what she wrote &#151; I had to clean up a couple of minor typos and logic errors. But back to my story...)</p>
<p>&quot;This implementation,&quot; the Guru continued, &quot;suffers from most of the same limitations as the Standard C <b>strtok</b> function we discussed earlier and introduces additional concerns, such as the overhead of creating a copy of the token string.&quot;</p>
<p>&quot;But what about copy-on-write? Aren't there some <b>string</b> implementations that would store the fact that the return value is a substring of the existing <b>string</b>, and only make a copy on write?&quot;</p>
<p>&quot;Some implementations may, although it is written: 'It is difficult to make a thread-safe implementation of copy-on-write <a href="#2">[2]</a>.' Today, more implementers are heeding this instruction and are removing such optimizations. Besides, that is not the only issue: this function is also not strongly exception-safe, for example in the case when the substring assignment to <b>token</b> throws.&quot;</p>
<p>&quot;So,&quot; I so'd, &quot;how do I overcome these various problems?&quot;</p>
<p>A wry smile crossed the Guru's lips. &quot;My child, if you are to progress beyond the apprentice stage, you must do <i>some</i> work yourself. Overcoming these problems is, as I am sure your university textbooks used to say, an exercise left to the learner. Write a version of <b>StringTok</b> that removes the reentrancy and nesting problems, that corrects the exception-safety problem, and that remains as efficient as possible by avoiding string copying. Show me your writings this afternoon.&quot;</p>
<p>She went away, and I got to work. It didn't take me long to realize that the need to maintain state practically screamed for having an object. I wrote my test cases and coded my solution, fixed a few bugs, and went looking for the Guru. I ended up showing her the following code:</p>

<pre>
template&lt;class T&gt;
class StringTok
{
public:
  StringTok( const T&amp; seq, 
    typename T::size_type pos = 0 )
    : seq_( seq ) , pos_( pos ) { }

  T operator()( const T&amp; delim );

private:
 const T&amp;           seq_;
 typename T::size_type pos_;
};

template&lt;class T&gt;
T StringTok&lt;T&gt;::operator()
  ( const T&amp; delim )
{
 T token;

 if( pos_ != T::npos )
 {
    // start of found token
    typename T::size_type first =
      seq_.find_first_not_of
      ( delim.c_str(), pos_ );
    if( first != T::npos )
    {
      // length of found token
      typename T::size_type num =
        seq_.find_first_of
          ( delim.c_str(), first ) - first;
      // do all the work off to the side
      token = seq_.substr( first, num );    

      // done; now commit using
      // nonthrowing operations only
      pos_ = first+num;                            
      if( pos_ != T::npos ) ++pos_;                
      if( pos_ &gt;= seq_.size() ) pos_ = T::npos; 
    }
  }

  return token;
}
</pre>

<p>&quot;This way,&quot; I explained, &quot;the code is simpler because I don't have to worry about starting new sequences; if the user wants that, he just creates a new tokenizer object. The exception-safety bug is gone too, now, because I 'do all the work off to the side and then commit using non-throwing operations only.' Oh, and I thought I'd template it... it wasn't any more work, except for writing <b>typename</b> a couple of times, and this way we can use it with our wide strings too.&quot;</p>
<p>The Guru pushed a graying lock behind one ear. &quot;I see,&quot; she said with an air of slyness, &quot;that <b>StringTok</b> uses the default copy constructor and assignment operator.&quot;</p>
<p>I smiled; this time I was ready for the bait and not caught off guard. &quot;Indeed,&quot; I replied smoothly. &quot;I deliberately allowed the default copying and assignment semantics because they work like bookmarks: this way the user can take a copy of the <b>StringTok</b> object at any point during tokenization and explore alternative tokenizations from that point forward. In fact, it works well with your original problem example, even if the problem is made harder by having <b>f</b> and <b>g</b> independently parse the very same string:&quot;</p>

<pre>
void f()
{
  // ...

  StringTok&lt;std::string&gt; x( stringA ); 

  // ...

  x( delimiters );

  // ...
}

void g()
{
  // ...

  // same string this time
  StringTok&lt;std::string&gt; y( stringA ); 

  // ...

  f();

  // ...

  // remember where we are
  StringTok&lt;std::string&gt; z( y ); 
  y( otherDelimiters );
  if( DidntWork() )
    // retry from the same point
    z( yetOtherDelimiters );
}</pre>

<p>&quot;Not only can the tokenizing operations overlap, but they can work independently on the same strings. All this,&quot; I concluded, &quot;without incurring any overhead, because the sequence string is never physically copied.&quot; I crossed my arms and sat back.</p>
<p>&quot;Well said,&quot; the Guru smiled, nodding. &quot;While you are at it, you might consider adding more powerful features, such as the ability to use a <b>vector&lt;string&gt;</b> for the delimiters, so you are not restricted to single-character delimiters.&quot;</p>
<p>&quot;Or,&quot; I jumped in, warming to the idea, &quot;allow the capability of recognizing empty fields. I've tried to use <b>strtok</b> before, to parse out a comma-delimited field, but empty fields, such as <b>A,B,,,C</b> really mess it up. <b>strtok</b> will skip the two empty fields.&quot;</p>
<p>We quickly concluded the code review, and I began working on my revised parsing function.</p>

<hr>

<p>&quot;There sure still is work left for the reader on this one,&quot; Jeannine shook her head.</p>
<p>&quot;Well, we got something when we tickled it last time. What aspects of the energy input haven't we tried varying yet?&quot;</p>
<p>Jeannine nodded. &quot;I know. I know. Let's try it again.&quot;</p>


<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] To the tune of &quot;I've Got Rhythm.&quot;</p>
<p><a name="2"></a>[2] H. Sutter. <i>More Exceptional C++</i>, Items 15 and 16 (Addison-Wesley, 2001).</p>



<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <b>hsutter@acm.org</b>.</p>

</BLOCKQUOTE></BODY></HTML>
