<HTML>   
     <HEAD>
<TITLE>Java Solutions October 2001/An Enterprise JavaBeans Skeleton Code Generator</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjoct.htm"></A><FONT COLOR="#FF0000">   Java Solutions</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">An Enterprise JavaBeans Skeleton Code Generator</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Pat Paternostro</FONT></H3>

<BLOCKQUOTE>
<p>Here is a simple tool to automate a goodly portion of the supertedious EJB creation process, along with a nice tutorial of the EJB 1.1 specification.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>EJBs (Enterprise JavaBeans) are non-visual, reusable, server-side components. For all their usefulness, however, they are difficult at worst and tedious at best to code. While you can certainly purchase an IDE (integrated development environment), such as IBM&#146;s Visual Age for Java, to ease the pain of constructing EJBs, that avenue requires deep pockets and often times a steep learning curve. In this article, I present a utility that generates the minimal &#147;skeleton&#148; code required to create and package version 1.x EJBs.</p>

<H3><FONT COLOR="#000080">EJB 1.1 Overview</FONT></H3>

<p>EJBs simplify the development of middleware components by transparently providing support for middleware services, such as transaction management, concurrency, persistence, security, and database connectivity. These services are automatically provided via an EJB container, thus allowing developers to concentrate on the task of solving business problems. (EJB containers are execution environments, such as IBM&#146;s WebSphere Application Server and BEA&#146;s WebLogic Server.) EJBs provide benefits such as increased productivity, portability, and scalability.</p>
<p>EJBs execute in the context of an EJB container, which acts as a broker between a client and the actual bean. Clients communicate with the bean through &#147;home&#148; and &#147;remote&#148; interfaces that are implemented by the EJB container. Along with the actual bean class, developers are also responsible for coding the home and remote interfaces.</p>
<p>The home interface must extend the <B>javax.ejb.EJBHome</B> interface and is responsible for declaring the bean&#146;s life-cycle methods including creating, finding, and removing the bean. The remote interface must extend the <B>javax.ejb.EJBObject</B> interface and is responsible for declaring the bean&#146;s publicly accessible business methods whose implementations reside in the bean.</p>
<p>A client application uses the JNDI (Java Naming and Directory Interface) to obtain a reference to the home interface. Once acquired, the home interface&#146;s <B>create</B> or <B>find</B> method is used to return a remote interface reference. A client application makes calls through the remote interface reference, never to the bean itself, thus allowing the container to transparently provide support services (e.g., transaction management) to the bean prior to delegating the method call to the bean (see <a href="fig1.htm">Figure 1</a>). The home and remote interfaces along with the container provide a layer of abstraction that achieves portability and removes the responsibility of providing middleware services from the developer.</p>
<p>The EJB specification defines two EJB types: <B>SessionBean</B> and <B>EntityBean</B>. (The EJB 2.0 specification defines a third EJB type, <B>MessageDrivenBean</B>, which is beyond the scope of this article.) Both bean types extend from the <B>javax.ejb.EnterpriseBean</B> interface, which is merely an empty placeholder that extends the <B>java.io.Serializable</B> interface.</p>

<H3><FONT COLOR="#000080">Session Beans</FONT></H3>

<p>Session beans are short-lived, non-persistent beans usually created to perform a specific client task. The session bean&#146;s lifetime is defined by that of a client session. A session bean is required to implement the <B>SessionBean</B> interface:</p>

<pre>
public interface javax.ejb.SessionBean
    extends javax.ejb.EnterpriseBean
{
    public void ejbActivate();
    public void ejbPassivate();
    public void ejbRemove();
    public void setSessionContext
        (SessionContext ctx);
}
</pre>

<p>Session beans come in two flavors: stateless and stateful session beans. Stateless session beans are pooled and, as the name implies, do not maintain state (i.e., they typically do not contain instance variables because different bean instances can be used across method invocations). Therefore a stateless session bean can provide empty implementations for the <B>SessionBean</B> interface methods.</p>
<p>Stateful session beans are not pooled, have a one-to-one relationship with a client session, and do maintain state (i.e., they typically do contain instance variables because the same bean instance is used across method invocations). Maintaining the bean&#146;s state is the responsibility of the EJB container. The container can swap the stateful session bean in and out of memory during periods of inactivity to minimize memory utilization. This swapping is known as passivation and activation and corresponds to the <B>SessionBean</B> interface methods <B>ejbPassivate</B> and <B>ejbActivate</B> respectively. The container calls the bean&#146;s <B>ejbPassivate</B> method prior to swapping the bean out and saving its state. This allows the developer the opportunity to perform resource cleanup if needed (e.g., releasing a database connection). After swapping the bean back into memory and restoring its state, the container calls the bean&#146;s <B>ejbActivate</B> method to give the developer the opportunity to reallocate resources if needed (e.g., restoring a database connection).</p>
<p>A stateless session bean&#146;s home interface must contain a no-argument <B>create</B> method, whereas a stateful session bean can have more than one <B>create</B> method each accepting a different number of parameters. All the home interface <B>create</B> methods must return a remote interface reference to the created bean. In addition to the methods in the <B>SessionBean</B> interface, a session bean is also required to implement an <B>ejbCreate</B> method for every <B>create</B> method declared in the home interface with the same number and types of parameters. The <B>ejbCreate</B> methods are required to return void.</p>

<H3><FONT COLOR="#000080">Entity Beans</FONT></H3>

<p>Entity beans are long-lived, persistent beans usually representing business objects. An entity bean&#146;s lifetime far exceeds that of a client session with its state maintained via persistent storage (e.g., a database). An entity bean is required to implement the <B>EntityBean</B> interface:</p>

<pre>
public interface javax.ejb.EntityBean extends 
    javax.ejb.EnterpriseBean
{
    public void ejbActivate();
    public void ejbPassivate();
    public void ejbLoad();
    public void ejbStore();
    public void ejbRemove();
    public void setEntityContext(EntityContext ctx);
    public void unsetEntityContext();
}
</pre>

<p>The EJB specification defines two entity bean types: CMP (container-managed persistence) and BMP (bean-managed persistence) entity beans. CMP entity beans rely on the container to provide persistence code to update the underlying data store. Therefore a CMP entity bean can provide empty implementations for the <B>EntityBean</B> interface methods. However, you are required to identify and map the CMP fields to database fields via a deployment tool. Moreover, the various EJB application servers have historically not done a particularly good job of implementing container-managed persistence. Though the situation is certainly improving, in practice container-managed persistence is not widely used.</p>
<p>BMP entity beans are required to provide persistence code to update the underlying data store. The persistence code is provided in the <B>EntityBean</B> interface methods <B>ejbLoad</B> and <B>ejbStore</B>. These synchronization methods are called many times by the EJB container during the BMP entity bean&#146;s lifetime. Loading the bean involves reading data from the persistent data store and assigning that data to the bean&#146;s attributes. Storing the bean involves writing the bean&#146;s attribute values to the underlying data store. Don&#146;t confuse persistence (the intent of which is to update a database) with the activation and passivation mechanisms (which swap the bean in and out of memory at more or less random times as the container needs to free up space) described earlier.</p>
<p>As entity beans are persistent, they require a mechanism to uniquely identify the bean to the persistent data store. That mechanism is the primary key class. Primary key classes are either single-key (e.g., <B>Integer</B>, <B>Long</B>, <B>String</B>) or compound-key primary keys. A compound primary key class must adhere to the following rules:</p>

<OL><LI>The class must be public.</LI>
<LI>The class must contain a default no-argument constructor.</LI>
<LI>The class must implement the <B>java.io.Serializable</B> interface.</LI>
<LI>The class must override the <B>hashCode</B> and <B>equals</B> methods.</LI>
<LI>The fields must be public.</LI></OL>

<p>Unlike session beans, entity beans are not required to declare any <B>create</B> methods in the bean&#146;s home interface. If they are declared, the methods must return a remote-interface reference. For every home interface <B>create</B> method declared, a corresponding <B>ejbCreate</B> method must be implemented in the bean with the same number and types of parameters. The <B>ejbCreate</B> methods are required to return a reference to the primary key. For every <B>ejbCreate</B> method implemented, a corresponding <B>ejbPostCreate</B> method with the same number and types of parameters, returning <B>void</B>, must also be implemented in the bean.</p>
<p>Although entity beans are not required to declare any home interface <B>create</B> methods, they are required to declare at least one finder method. The home interface must minimally declare the <B>findByPrimaryKey</B> method that accepts a primary key as a parameter and returns a remote-interface reference. A corresponding <B>ejbFindByPrimaryKey</B> method must be implemented, but only in a BMP entity bean, and it must accept a primary key as a parameter and return a primary key.</p>

<H3><FONT COLOR="#000080">Transactions</FONT></H3>

<p>The EJB specification defines two styles of transaction demarcation: CMT (container-managed transactions) and BMT (bean-managed transactions.) Transaction demarcation encompasses beginning and committing (or rolling back) a transaction. With CMTs, the container is responsible for providing a transactional context when executing the bean. Entity beans are required to use CMTs, whereas session beans have the choice of using either CMTs or BMTs. BMTs place the responsibility of starting and finishing transactions on the bean developer through the use of the <B>javax.transaction.UserTransaction</B> interface.</p>
<p>Though simple transactioning works reasonably well, bear in mind that EJB systems are often quite complex, involving several session beans accessing several entity beans all at once. Moreover, a purist object-oriented approach to EJBs would never access the entity beans directly, but rather access a stateless session bean and pass the session bean&#146;s method some sort of handle to the entity bean being accessed. This way, you effectively merge the data and methods together to produce a true object. The entity bean serves the purpose of encapsulating private data in this case. When using this approach, the session bean method might have side effects (remote network connections to other servers, for example) that can make operations like rollback difficult (or impossible) to implement.</p>

<H3><FONT COLOR="#000080">The Deployment Descriptor</FONT></H3>

<p>An EJB 1.1 container requires an XML-based deployment descriptor, which aids the container in managing the bean. A deployment descriptor is typically created by an EJB deployment tool and includes information such as the names of the home and remote interfaces, the name of the bean class, the bean type and sub-type, transactional behavior, and security roles. A typical EJB XML-based deployment descriptor follows:</p>

<pre>
&lt;?xml version=1.0?&gt;
&lt;!DOCTYPE ejb-jar PUBLIC '-//Sun Microsystems, Inc.
//DTD Enterprise JavaBeans 1.1
//EN' 'http://java.sun.com/j2ee/dtds/ejb-jar_1_1.dtd'&gt;

&lt;ejb-jar&gt;
&lt;enterprise-beans&gt;
 &lt;display-name&gt;HelloBeanJar&lt;/display-name&gt;
  &lt;session&gt;
   &lt;display-name&gt;HelloBean&lt;/display-name&gt;
   &lt;ejb-name&gt;HelloBean&lt;/ejb-name&gt;
   &lt;home&gt;com.tricomgroup.beans.session.hello.HelloHome&lt;/home&gt;
   &lt;remote&gt;com.tricomgroup.beans.session.hello.Hello&lt;/remote&gt;
   &lt;ejb-class&gt;com.tricomgroup.beans.session.hello.HelloBean
    &lt;/ejb-class&gt;
   &lt;session-type&gt;Stateless&lt;/session-type&gt;
   &lt;transaction-type&gt;Container&lt;/transaction-type&gt;
  &lt;/session&gt;
 &lt;/enterprise-beans&gt;
...
&lt;/ejb-jar&gt;
</pre>

<p>The first two tags are a standard part of all XML documents. The first tag specifies the XML version in use while the second tag specifies the DTD (Document Type Definition) that defines the document. The body of an XML document is enclosed between the beginning and ending root-element tags, in this case <B>&lt;ejb-jar&gt;</B> and <B>&lt;/ejb-jar&gt;</B> respectively. All other element tags are nested within the root element tags. (A full complement of element tags is not included in the above example.)</p>

<H3><FONT COLOR="#000080">The Generator</FONT></H3>

<p>This brief overview covers the requirements needed to create version 1.1 EJBs. (For a more detailed discussion, consult the EJB 1.1 specification located at &lt;http://java.sun.com/products/ejb/docs.html&gt;.) I haven&#146;t even touched on the security implications or the requirements needed to develop version 1.0 EJBs. Suffice it to say that changes were made between the two specifications, in particular the deployment descriptor format changed from a serialized object in EJB 1.0 to the more flexible XML-based file in EJB 1.1. The rules are many and varied and can sometimes be overwhelming to keep straight without consulting the specification or alternative documentation. That&#146;s where the <B>EJBSkeleton</B> tool comes in handy.</p>
<p>A partial listing of the <B>EJBSkeleton</B> code appears in <a href="list1.htm">Listing 1</a> (the method bodies are not shown.) As you can see from <a href="fig2.htm">Figure 2</a>, the application is pretty intuitive. You select the desired functionality from the provided choices and click on the Generate button to generate the EJB skeleton code.</p>
<p>Generating EJB skeleton code requires a package name (e.g., <B>com.tricomgroup.beans</B>) and a base name, which enables the Generate button. Clicking the Generate button creates the home and remote interface files, the bean class file, and the primary key class file (entity beans only) whose names are derived from the specified base name. The files are created in the directory where the tool is launched and in the following directory hierarchy:</p>

<pre>
src
|_v1.0 or v1.1 (depending on version selected)
  |_&lt;base name&gt;
    |_&lt;base name&gt;.java (remote interface source file)
    |_&lt;base name&gt;Home.java (home interface source file)
    |_&lt;base name&gt;Bean.java (bean class source file)
    |_&lt;base name&gt;PK.java
      (primary key class source file - entity beans only)
    |_&lt;base name&gt;Manifest
      (EJB 1.0 deployment descriptor manifest - 
       explained below)
    |_jar
      |_&lt;base name&gt;BeanJar.jar
        (JAR file created when packaging beans - 
         explained below)
    |_META-INF
      |_ejb-jar.xml
        (EJB 1.1 deployment descriptor file - explained below)
</pre>

<p>To compile the generated source files, select the Compile EJB Source Files checkbox prior to clicking on the Generate button. The compiled class files are placed in the package structure specified in the Package Name field and created in the directory specified in the Root Package Directory field. If this field is left blank, the current directory is assumed.</p>
<p>Optionally you can package the bean by selecting the Package Bean checkbox, which is only enabled when the Compile EJB Source Files checkbox is selected. Packaging the bean involves creating a deployment descriptor file and placing the compiled class files and the deployment descriptor file in a JAR file (see directory structure above) via the JDK JAR tool. An EJB 1.0 deployment descriptor is a serialized object file that is created and placed in the same directory as the compiled class files. When packaging an EJB 1.0 bean, a JAR manifest file that identifies the location of the serialized deployment descriptor file is also created (an EJB 1.0 requirement.) This manifest file is created in the same directory as the source files. An EJB 1.1 deployment descriptor file is an XML-based file with the name <B>ejb-jar.xml</B>. This file is required to reside in the JAR file&#146;s <B>META-INF</B> directory; therefore the tool creates the deployment descriptor file in a <B>META-INF</B> directory (see directory structure above.)</p>
<p>You have the option of adding source code to the generated skeleton files via the Add EJB Source Code button. <a href="fig3.htm">Figure 3</a> shows the dialog box that&#146;s displayed when choosing to generate a container-managed entity bean from the main window. The dialog box is separated into four sections with appropriate sections visible based on the choices made from the main window. For instance, if a stateless session bean were selected, only the EJB Source Code section would display, as the other sections don&#146;t apply. The tool will add the source code provided in the EJB Source Code section to the bean class and will parse the source code to automatically generate the public method signatures for the remote interface. Likewise the tool also parses the Primary Key Field(s) section and the Container Managed Persistence Field(s) section as well in order to identify those variables as CMP fields in the generated deployment descriptor. CMP entity beans are required to declare the primary key fields exactly as defined in the primary key class (name included). Again the tool automatically handles this requirement, however the parsing logic is purposely simplistic and requires that each variable be declared on separate lines for both field sections. The code placed in the Add EJB Source Code dialog is saved to temporary files that are automatically deleted when the tool is exited. Therefore source code changes are preserved on each invocation of the dialog box. Finally the tool will also generate client source code when the Generate Client Source checkbox is selected. Messages detailing the completeness of the selected operations are displayed in a dialog box (see <a href="fig4.htm">Figure 4</a>) after the code generation is complete or immediately following an error.</p>

<H3><FONT COLOR="#000080">Miscellaneous</FONT></H3>

<p>Running the generator minimally requires Sun&#146;s JDK 1.2.2 and J2EE reference implementation (available at &lt;www.javasoft.com&gt;). Make sure to add the <B>J2EE.JAR</B> and <B>EJB10DEPLOYMENT.JAR</B> files, located in the J2EE reference implementation <B>LIB</B> directory, to the <B>CLASSPATH</B>.</p>
<p>Any EJB container deployment tool should be able to read and verify the tool&#146;s generated JAR file. The generated EJB 1.1 bean jar files were verified via Sun&#146;s J2EE reference implementation deployment tool and the generated EJB 1.0 bean JAR files were verified via IBM&#146;s Visual Age for Java deployment tool.</p>
<p>You are required to provide the database mappings for a CMP entity bean&#146;s CMP fields via the deployment tool. The generator always creates a compound primary key class for entity beans and demarcates all bean methods as CMT methods via the deployment descriptor. You will need to provide &#147;real&#148; implementations for the primary key class&#146;s <B>equals</B> and <B>hashCode</B> methods as the generator simply returns false and zero for those methods respectively.</p>

<H3><FONT COLOR="#000080">Example</FONT></H3>

<p>I used the tool to generate and package an EJB 1.1 stateless session bean. The generated home, remote, bean, and client source files are located in <a href="list2.htm">Listings 2</a>, <a href="list3.htm">3</a>, <a href="list4.htm">4</a>, and <a href="list5.htm">5</a> respectively. The generated XML deployment descriptor is located in <a href="list6.htm">Listing 6</a>. <a href="fig5.htm">Figure 5</a> displays the EJB Source Code dialog box along with the added source code. I successfully verified, deployed, and tested the bean via Sun&#146;s J2EE reference implementation. The <B>EJBSkeleton.java</B> file contains the full source code for the utility. The <B>EJBSkeleton.jar</B> file contains all the compiled class files that comprise the utility. Both are available for download at &lt;www.cuj.com/code&gt;.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The rules are many and varied, and oftentimes overwhelming when creating EJBs. This tool greatly simplifies the construction of EJBs by keeping the rules straight and letting you concentrate on the task at hand.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p>Richard Monson-Haefel. <I>Enterprise JavaBeans</I>, 2nd Edition (O&#146;Reilly &amp; Associates, 1999).</p>
<p>Tom Valesky. <I>Enterprise JavaBeans: Developing Component-Based Distributed Applications</I> (Addison-Wesley, 1999).</p>

<p><i><B>Pat Paternostro</B> is an Associate Partner with the Tri-Com Consulting Group located in Rocky Hill, CT. Tri-Com provides programming services for a wide variety of development tasks. You can reach Pat at <B>ppaternostro@tricomgroup.com</B>.</i></p>

<h4><a href="../../../source/2001/joct01/paternos.zip"></a></h4>
</blockquote></body></html>
