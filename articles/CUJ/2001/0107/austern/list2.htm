<HTML><HEAD>
<TITLE>July 2001/The Standard Librarian/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Unix implementation of class ro_file</A></h4>
<pre>
#include "ro_file.h"
#include &lt;algorithm&gt;
#include &lt;stdexcept&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;

namespace {
  std::pair&lt;char*, std::size_t&gt; initialize(const std::string&amp; name)
  {
    int fd = open(name.c_str(), O_RDONLY);
    if (fd == -1)
      throw std::runtime_error("Can't open " + name + ": " 
                               + strerror(errno));

    off_t n = lseek(fd, 0, SEEK_END);
    void* p = MAP_FAILED;
    if (n != off_t(-1))
      p = mmap(0, (std::size_t) n, PROT_READ, MAP_PRIVATE, fd, 0);

    close(fd);

    if (p == MAP_FAILED)
      throw std::runtime_error("Can't map " + name + ": " 
                               + strerror(errno));

    return std::make_pair(static_cast&lt;char*&gt;(p),
                          static_cast&lt;std::size_t&gt;(n));
  }
}

ro_file::ro_file(const std::string&amp; name)
  : file(name), base(0), length(0)
{
  std::pair&lt;char*, std::size_t&gt; p = initialize(file);
  base = p.first;
  length = p.second;
}

ro_file::ro_file(const ro_file&amp; C)
  : file(C.file), base(0), length(0)
{
  std::pair&lt;char*, std::size_t&gt; p = initialize(file);
  base = p.first;
  length = p.second;
}

ro_file&amp; ro_file::operator=(const ro_file&amp; C)
{
  if (C != *this) {
    std::string tmp = C.file;
    std::pair&lt;char*, std::size_t&gt; p = initialize(C.file);

    munmap(base, length);
    file.swap(tmp);
    base = p.first;
    length = p.second;
  }

  return *this;
}

ro_file::~ro_file() 
{
  munmap(base, length);
}

void ro_file::swap(ro_file&amp; C)
{
  std::swap(file, C.file);
  std::swap(base, C.base);
  std::swap(length, C.length);
}

bool operator==(const ro_file&amp; x, const ro_file&amp; y) {
  return x.size() == y.size() &amp;&amp;
    std::equal(x.begin(), x.end(), y.begin());
}

bool operator&lt;(const ro_file&amp; x, const ro_file&amp; y) {
  return std::lexicographical_compare(x.begin(), x.end(),
                                      y.begin(), y.end());
}
&#151; End of Listing &#151;</pre></body></html>
