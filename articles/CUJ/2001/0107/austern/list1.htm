<HTML><HEAD>
<TITLE>July 2001/The Standard Librarian/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Header file for class ro_file</A></h4>
<pre>
#include &lt;cstddef&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;utility&gt;

class ro_file {
public:
  ro_file(const std::string&amp; name);
  ro_file(const ro_file&amp;);
  ro_file&amp; operator=(const ro_file&amp;);
  ~ro_file();

public:
  typedef char        value_type;
  typedef const char* pointer;
  typedef const char* const_pointer;
  typedef const char&amp; reference;
  typedef const char&amp; const_reference;

  typedef std::ptrdiff_t difference_type;
  typedef std::size_t size_type;

  typedef const char* iterator;
  typedef const char* const_iterator;
  typedef std::reverse_iterator&lt;const char*&gt; 
          reverse_iterator;
  typedef std::reverse_iterator&lt;const char*&gt; 
          const_reverse_iterator;

  const_iterator begin() const { return base; }
  const_iterator end() const { return base + length; }

  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end()); }
  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin()); }

  const_reference operator[](size_type n) const {
    return base[n]; 
  }
  const_reference at(size_type n) const {
    if (n &gt;= size())
      throw std::out_of_range("ro_file");
    return base[n];
  }

  size_type size() const { return length; }
  size_type max_size() const { return length; }
  bool empty() const { return size() != 0; }

  void swap(ro_file&amp;);

private:
  std::string file;
  char* base;
  size_type length;
};

bool operator==(const ro_file&amp;, const ro_file&amp;);
bool operator&lt;(const ro_file&amp;, const ro_file&amp;);

inline bool operator!=(const ro_file&amp; x, const ro_file&amp; y) 
  { return !(x == y); }
inline bool operator&gt; (const ro_file&amp; x, const ro_file&amp; y) 
  { return y &lt; x; }
inline bool operator&lt;=(const ro_file&amp; x, const ro_file&amp; y) 
  { return !(y &lt; x); }
inline bool operator&gt;=(const ro_file&amp; x, const ro_file&amp; y) 
  { return !(x &lt; y); }

&#151; End of Listing &#151;</pre></body></html>
