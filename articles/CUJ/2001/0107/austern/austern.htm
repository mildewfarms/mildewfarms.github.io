<HTML>   
     <HEAD>
<TITLE>July 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   C/C++ CONTRIBUTING EDITORS</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: File-Based Containers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>Looking for a way to create a file-based container? You might need to look outside the Standard C++ library, and memory mapping may be the answer.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>The Standard C++ library makes it easy to combine file I/O with generic algorithms. For structured files where you&#146;re always reading (or writing) the same data type, you can treat the file as a sequence of values that you access with an <B>istream_iterator</B> (or <B>ostream_iterator</B>). When treating a file as a simple sequence of characters, you can access it with an <B>istreambuf_iterator</B> (or <B>ostreambuf_iterator</B>). So, for example, you can combine <B>streambuf</B> iterators with an STL algorithm to perform &#147;y to k&#148; conversion:</p>

<pre>
std::ifstream in("f1");
std::ofstream out("f2");
std::replace_copy
    (std::istreambuf_iterator&lt;char&gt;(in),
     std::istreambuf_iterator&lt;char&gt;(),
     std::ostreabuf_iterator&lt;char&gt;(out),
     'y', 'k');
</pre>

<p>When you turn to more complicated (and less contrived) examples, you begin to run into problems. You can use <B>std::find</B> to look for the first occurrence of a character <B>c</B>, but what if, instead of looking for a character, you need to look for a multi-character string? That&#146;s what <B>std::search</B> is for, but you can&#146;t use it: its arguments must be Forward Iterators, and <B>istreambuf_iterator</B> is only an Input Iterator.</p>
<p>This isn&#146;t an arbitrary restriction. Think about how you would implement <B>std::search</B> yourself. If you&#146;re looking for a string in an input sequence, and you find a partial match, you can&#146;t just restart your search where you first noticed the mismatch: in general you have to restart it a few characters back. (Consider looking for &#147;ababac&#148; within &#147;abababac&#148;.) There are clever algorithmic methods for avoiding unnecessary backtracking, but it can&#146;t be avoided entirely. Saving &#147;bookmarks&#148; is just what you can&#146;t do with an Input Iterator like <B>istreambuf_iterator</B>: input works one character at a time, and once you&#146;ve read a character, you&#146;ve read it.</p>
<p>This is a familiar problem in I/O: it often turns out that you can&#146;t tell you&#146;ve read enough until you&#146;ve read too much. If you&#146;re reading an integer, and the input contains &#147;123x&#148;, you can&#146;t tell you&#146;ve reached the end of the integer until you&#146;ve consumed the unwanted character &#147;x&#148;. There are also several familiar solutions.</p>
<p>First, you can sometimes recast an algorithm &#151; by using auxiliary storage, or by changing the algorithm so it asks a slightly different question, or by accepting restrictions on its arguments or its error handling &#151; so that it requires nothing more than Input Iterator semantics. For example, the <B>std::time_get</B> facet, in the Standard C++ library, reads day and month names using a version of string match that works with Input Iterators. It&#146;s not as flexible or robust as <B>std::search</B>, but it&#146;s adequate for its purposes.</p>
<p>Second, you can simply read more characters than you need and then put the unwanted characters back on the input stream. If you&#146;re reading characters through a <B>streambuf</B>, you can use <B>streambuf::sputbackc</B> to &#147;unread&#148; a character. This technique is often easy and effective, but it has some limitations (you can&#146;t count on being able to put back more than one character), and there&#146;s no way to combine it with the iterator interface of <B>istream_iterator</B> or <B>istreambuf_iterator</B>.</p>
<p>Third, you can read some portion of the input file into an internal buffer and then work with the buffer instead of working directly with the input stream. You have to be careful if you&#146;re doing something that crosses the boundary between one buffer and the next, but that isn&#146;t always necessary: it&#146;s often possible, for example, to work with a single line at a time.</p>
<p>All of these techniques are useful, but, from the perspective of combining I/O with generic algorithms, none of them are completely satisfactory. All of them involve algorithmic changes, and one of them won&#146;t even let you use an iterator interface. You might be able to express the same algorithm with <B>putback</B> as you could with Forward Iterators, but you&#146;d have to write that algorithm twice.</p>
<p>Working with an internal buffer is easy if you don&#146;t cross buffer boundaries, and you can ensure that you don&#146;t if you use a large enough buffer, one that holds the entire file. This just takes a few lines of code:</p>

<pre>
std::ifstream in("f1");
std::istreambuf_iterator&lt;char&gt; first
    (in);
std::istreambuf_iterator&lt;char&gt; last;
std::vector&lt;char&gt; buf(first, last);
</pre>

<p>The container <B>buf</B> provides Random Access Iterators. But this technique isn&#146;t very satisfactory either: it&#146;s fine if <B>f1</B> is a small file, but unworkable once files get large.</p>
<p>A file on disk is (on most operating systems) just a sequence of characters &#151; it looks a lot like a container. Why can&#146;t we find some way to treat it as a container, without having to read the whole thing into memory?</p>

<H3><FONT COLOR="#000080">Memory Mapping</FONT></H3>

<p>We can, of course. Modern operating systems provide a richer set of I/O primitives than are available through the C or C++ Standard libraries. Some of these choices can be made to fit into the C++ library&#146;s framework.</p>
<p>Most of today&#146;s operating systems allow memory-mapped I/O: associating a file with a region of memory, so that reading from (writing to) that region of memory gets translated into reading from (writing to) the file. To a program, this region of memory looks just like any other. You address it with a pointer, and you can use any of the usual pointer operations. Dereferencing a pointer into a memory-mapped region gives you the corresponding value in the file, and writing to a pointer into a memory-mapped region changes the corresponding value in the file.</p>
<p>It shouldn&#146;t be surprising that this is possible: it&#146;s not so very different from the way that an operating system manages virtual memory. When you write an address in your program, it sometimes gets translated to an address in physical memory, and it sometimes points to memory that has been paged out to disk. The operating system brings pages in and out of physical memory without programmer intervention. You can think of memory mapping as an interface that exposes some of these details.</p>
<p>Why do operating systems provide memory mapping? The basic answer is performance.</p>

<UL><LI>   Memory mapping can conserve space. Mapping a file into memory lets you access the file as if you had read it into an array &#151; it&#146;s part of your program&#146;s address space &#151; but you don&#146;t have to allocate physical memory for that array.</LI>
<LI>   Memory mapping can save time. When you do ordinary file I/O, using functions like <B>istream::read</B> or <B>ostream::write</B>, the operating system uses some internal buffer of its own to interact with the physical hardware, but then must copy the data between that buffer and yet another buffer in our own program. Memory mapping avoids that extra copy, because it exposes the operating system&#146;s internal buffer. In a test of simple file copying, Stevens <a href="#1">[1]</a> found that memory mapping sometimes gave more than a factor-of-two speedup.</LI></UL>

<p>Aside from performance, memory-mapped I/O gives us the simple container-like interface that we want. Memory mapping lets us access the contents of a file through a pointer. Pointers are iterators, so all we have to do is write a wrapper class that encapsulates memory mapping and that fulfils the syntactic requirements of the Container interface (Table 65 of the C++ Standard &#151; plus, since our container will provide random access iterators, Table 66).</p>
<p>The first requirement in Table 65 is that every container class <B>X</B> must contain a typedef, <B>X::value_type</B>, that identifies the type of the container&#146;s elements. What should we choose for this container&#146;s value type? One answer might be that, following such examples as <B>std::vector</B> and <B>std::list</B>, we should allow a fully general value type by writing a templatized container class. In this case, however, that choice would present problems.</p>

<UL><LI>   Classes with nontrivial constructors would be a problem. The whole point of having a constructor, after all, is that you can&#146;t just view an object as a sequence of bytes. In general, for example, you can&#146;t copy objects using <B>memcpy</B>.</LI>
<LI>   Even leaving constructors aside, classes that contain pointers would be a problem. When you memory map a file, the operating system chooses the base address. If you wrote an object to disk and memory mapped it in again, the pointers would no longer point to the right place.</LI>
<LI>   Even fundamental data types, like <B>long</B> and <B>float</B>, would be a problem. The binary representation of fundamental types varies from system to system; writing a float to disk as a series of raw bytes, and then reading it in again on a different system, is unlikely to give you the right answer.</LI></UL>

<p>All of these problems can be and have been solved, of course: the key would be that storing an object in a memory-mapped container would involve some kind of serialization protocol (replacing pointers with offsets, for example), not just a byte-for-byte copy. But serialization and file I/O are separate issues; it makes more sense to build a persistent storage system on top of a low-level I/O library than to mix levels together and design the whole library around serialization. A file is a sequence of bytes, so that&#146;s what our container will provide. It will be a non-template class, and its value type will just be <B>char</B>.</p>
<p>The next question is what to do about reads versus writes. When you open a file, you provide a flag that determines whether you&#146;re opening it read/write or read-only. This distinction isn&#146;t reflected in the type system: you can try to write to a file that you&#146;ve opened read-only, and the attempt will fail at run time. For a container, however, this isn&#146;t a reasonable option. A container provides iterators, and iterators are either mutable or constant. We can&#146;t provide mutable iterators into a read-only file.</p>
<p>This suggests that, if we want to support both read-only and read/write files, we need two different classes with different type declarations. For now I&#146;ll only discuss the read-only class, <B>ro_file</B>.</p>
<p>Once we&#146;ve made these decisions, it&#146;s easy to fill in everything that Table 65 calls for. First come the <B>typedef</B>s: <B>ro_file::value_type</B> is <B>char, ro_file::iterator</B> and <B>ro_file::const_iterator</B> are both <B>const char*</B>, <B>ro_file::reverse_iterator</B> is <B>std::reverse_iterator&lt;const char*&gt;</B>, and so on. Next we provide data access. We keep track of a pointer to the beginning of the file (the base address that we get when we map the file into memory), and we keep track of the file&#146;s length; <B>begin</B> returns <B>base</B>, and <B>end</B> returns <B>base + length</B>. The full class declaration is shown in <a href="list1.htm">Listing 1</a>.</p>
<p>All of the real work is performed in the constructor and the other member functions that set up the private member variables <B>base</B> and <B>length</B>. These member functions are not inline, so they are not part of the class declaration. These member functions are also highly system dependent. Unix and Windows (and other operating systems) support memory mapping, but they support it in different ways. I will show a Unix implementation, which has been tested under Linux.</p>
<p>The general idea is simple: the constructor takes a filename, opens the file using the low-level system call <B>open</B>, finds the file&#146;s length, and then maps the entire file into memory with <B>mmap</B>. All of these operations can fail, so we check return codes and throw an exception if necessary. Finally, we close the file. In Unix, a memory-mapped file doesn&#146;t have to be kept open: the mapping isn&#146;t lost until you call <B>munmap</B>.</p>
<p>The only part that&#146;s at all tricky is assignment and copying. What should the semantics be? One answer might be that assignment should replace the contents of one file with another, and that the copy constructor should create and open a new file. But those answers don&#146;t seem quite right: it would be strange to have one mutating operation in an otherwise read-only class, and it would be even stranger to have a file-copy operation that doesn&#146;t let you name the copy. We&#146;ll provide copying and assignment &#151; but copying and assignment of handles, not files. When we copy a <B>ro_file</B>, we&#146;ll memory map the file a second time. The two copies will have identical contents. (This is close to the edge of what&#146;s allowed by the standard container requirements, since we&#146;re not supposed to share the same object between two different containers, but it&#146;s just barely legal. Our container is nonmodifiable, and our value type is <B>char</B>; there&#146;s no way to tell the difference between two different nonmodifiable <B>char</B> objects and a single nonmodifiable <B>char</B> object with two different addresses.)</p>
<p>The full Unix implementation is shown in <a href="list2.htm">Listing 2</a>.</p>

<H3><FONT COLOR="#000080">Limitations</FONT></H3>

<p>Memory mapping is a useful technique, but it&#146;s not always appropriate.</p>
<p>The most obvious limitation of <B>ro_file</B> is in the name: It&#146;s read-only. What would an <B>rw_file</B> class look like? That&#146;s not completely clear. Assignment and copying would probably have to be changed: mapping the same file twice is reasonable for an immutable container, but a lot less reasonable for a mutable one. (It would be very strange if changing a value in a container <B>C1</B> caused changes in an apparently unrelated container <B>C2</B>.) It&#146;s also not clear how useful an <B>rw_file</B> container would be. We can use <B>ro_file</B> to avoid the limitations of an Input Iterator when reading from a file and to avoid the overhead of an extra copy between kernel space and user space, but neither of these arguments is as compelling for output as for input.</p>
<p>A second limitation is slightly less obvious. Unix programmers are used to thinking of a file as a simple sequence of characters and are used to thinking of a line as nothing more than the region in between two <B>'\n'</B> characters, but life isn&#146;t always so simple. Text files in some operating systems can have more structure than that. (Some mainframe operating systems, for example, support text files with a fixed line length.) The C++ Standard, like the C Standard before it, distinguishes between opening a file in <I>text</I> and in <I>binary</I> mode; opening a file in text mode means that the standard library automatically takes care of all of these formatting requirements.</p>
<p>When you memory map a file, you&#146;re presented with the exact sequence of bytes that are stored on disk. That is, memory mapping is effectively limited to binary-mode I/O. If you want to see a file as if it had been opened in text mode, then you&#146;ll have to understand how your operating system deals with text files <a href="#2">[2]</a>, and you&#146;ll have to do the conversion yourself.</p>
<p>Third, this class doesn&#146;t exploit all of the features of memory mapping. Most notably, it doesn&#146;t support the common technique of using memory mapping for interprocess communication.</p>
<p>Finally, the error reporting from memory mapping is unfriendly. Since I/O operations are written as pointer dereference, I/O errors appear as memory access violations. This is more an issue for output than for input, but even input operations can fail &#151; suppose, for example, that, while you&#146;re reading from a file, some other process opens the file and truncates it. Memory mapping is most appropriate if you know that this sort of situation won&#146;t arise, or if you can handle errors that appear as signals. (It&#146;s possible to write a proxy class that wraps pointer dereference, traps signals, and translates them into C++ exceptions. The overhead, however, would be prohibitive. If you need that kind of error reporting, you&#146;re probably better off with something other than memory-mapped I/O.)</p>

<H3><FONT COLOR="#000080">Conclusions</FONT></H3>

<p>File I/O in the Standard C++ library uses a simple model of reading and writing. For many purposes, this simple model is sufficient. Modern operating systems, however, provide a much richer set of operations than that: asynchronous I/O, signal-driven I/O, multiplexing, memory mapping. All of these techniques are used in real programs, and all of them are currently outside the scope of the Standard C++ library.</p>
<p>Memory mapping is one technique that fits naturally into the framework of the Standard C++ library, since a memory-mapped file looks very much like a container &#151; and, for many generic algorithms, it&#146;s more convenient to treat a file as a container than to look at it one character at a time. How to support other kinds of advanced I/O within the framework of the C++ library is an open question.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  W. Richard Stevens. <I>Advanced Programming in the Unix Environment</I> (Addison-Wesley, 1992).</p>
<p><a name="2"></a>[2]  Fortunately, the answer is simple in some popular operating systems. In Unix, there is no distinction between text and binary files, and in Windows the only issue to worry about is that, if you open a text file in binary mode, you&#146;ll see that the lines end with the two-character sequence <B>"\r\n"</B>.</p>

<p><i><B>Matt Austern</B> is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>

<h4><a href="../../../source/2001/jul01/austern.zip"></a></h4>

</blockquote></body></html>
