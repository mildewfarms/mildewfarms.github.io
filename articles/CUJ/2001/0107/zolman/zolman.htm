<HTML>   
     <HEAD>
<TITLE>July 2001/An STL Error Message Decryptor for Visual C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   Software Tools</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">An STL Error Message Decryptor for Visual C++</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Leor Zolman</FONT></H3>

<BLOCKQUOTE>
<p>Believe it or not, there&#146;s helpful information buried in those template error messages. It just takes a little Perl to dig it out.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>This article describes a tool I wrote for the Microsoft Visual C++ environment to radically simplify STL-related error messages. The tool is implemented as a C++ program that &#147;wraps&#148; the standard Visual C++ compiler command, <B>CL.EXE</B>, transparently filtering its diagnostic output through a Perl script and displaying the results of the filtering. The Perl script supports both the &#147;stock&#148; VC++ 5/6 library and the drop-in replacement library available from Dinkumware, Ltd. Once installed, operation of the VC++ compiler is unaffected when performing both command-line and IDE-based compilations.</p>

<H3><FONT COLOR="#000080">The Background</FONT></H3>

<p>As both an author and instructor of various programming courses for the corporate environment, I&#146;ve tried to shape each five-day course I develop by asking myself the question &#147;What are the most important things to be said about this language within the constraints of a five-day format?&#148; In the case of &#147;C++ for non-C Programmers,&#148; my answer has been to take the historical (and conventional) approach of teaching &#147;C with iostreams&#148; in the first half of the course, the &#147;better C features&#148; of C++ as an interlude, and C++&#146;s object-oriented features for the rest of the week. Moving at a rapid clip, with time for only one or two labs per day, we barely got to polymorphism by Friday afternoon; time had run out before we&#146;d had a chance to discuss exception handling and templates, let alone the STL.</p>
<p>But, change is in the air. It seems to me that the C++ community is now solidly in the throes of yet another &#147;paradigm shift,&#148; and its name is the STL. Just as the object-oriented capabilities of C++ took a while to sink into the brains of procedural-minded C programmers (they&#146;re <I>still</I> sinking into mine), the generic programming approach so fundamental to the STL portion of the Standard C++ library is finally getting some serious consideration.</p>
<p>I recall a conversation with Scott Meyers, Dan Saks, and others at a C/C++ conference over five years ago, debating the merits of Bjarne Stroustrup&#146;s &#147;new&#148; approach to teaching C++: begin with the high-level constructs, such as classes and templates, and work down to the low-level implementation details (like pointers) much later on. I didn&#146;t buy it at the time and continued teaching C++ the old, plodding C-first way.</p>
<p>Then, much later, I finally learned the STL. All of a sudden everything Bjarne had been saying began to make sense to me. There are an awful lot of fairly complex and interesting things you can do with the STL without ever having to write a single asterisk in your programs &#151; unless you need to do some multiplication, of course.</p>
<p>The final nail in the coffin of &#147;old-style&#148; C++ education, as I see it, is Andrew Koenig and Barbara Moo&#146;s recent book, <I>Accelerated C++</I>. I read half of this book in flight from Boston to Portland, Oregon, on my way to assist in Scott Meyers&#146; Effective STL seminar. Upon arrival in Portland, I had already decided that the approach taken by Koenig and Moo was the way I wanted to teach C++ for non-C Programmers, and perhaps C++ <I>for</I> C Programmers as well.</p>
<p>There was one obstacle, however, and it was a major one. The compiler that virtually all of my clients use for training C++ programmers under Windows is Microsoft&#146;s Visual C++. I&#146;ve been happily using this IDE (albeit not for STL) in the classroom for years, and have always considered it both a friendly training environment and an effective development environment for my personal programming projects.</p>
<p>The problem arises when you are programming with the STL and make an error. Since the STL is composed mostly of templates taking lots of type-name arguments (some required, some optional via default arguments), data types that are simple to declare and use at the application level yield the diagnostics from hell <a href="#1">[1]</a> when used incorrectly, even if the mistakes are trivial. It would be putting it mildly to suggest that beginning C++ programmers might be discouraged from using STL due to the daunting complexity of many of the compiler&#146;s error messages.</p>
<p>That left me with a choice of two evils: either teach C++ the &#147;old&#148; way to keep the error messages straightforward, or teach C++ the &#147;new&#148; way and force beginners to deal with messages whose sum total comprehensible content boils down to &#147;there is an error somewhere on this line.&#148;</p>
<p>I found a third option, reminiscent of how James T. Kirk dealt with the Kobayashi Maru no-win scenario: reprogram the computer!</p>

<H3><FONT COLOR="#000080">The Script</FONT></H3>

<p>Consider the program <B>error.cpp</B> (<a href="list1.htm">Listing 1</a>). When compiling under standard Visual C++ 6.0, the resulting error message is shown in <a href="fig1.htm">Figure 1</a> <a href="#2">[2]</a>. The message is actually saying that the <B>insert</B> method of this multimap requires a <B>pair&lt;string, int&gt;</B> as a parameter, but we&#146;ve provided an <B>int</B> instead, and a suitable conversion does not exist.</p>
<p><a href="fig2.htm">Figure 2</a> shows the result of filtering the text of <a href="fig1.htm">Figure 1</a> through the Perl script <B>STLFilt.pl</B> (available for download at &lt;www.cuj.com/code&gt;). Now you can see what Visual C++ was really trying to tell you all along. I call what this Perl script does &#147;STL Error Decryption&#148; because it takes &#147;cryptic&#148; STL-related error messages and distills them down to their essence, translating the template-generated type information into a form as close to that of the original source code as possible.</p>
<p>Some of my specific goals for the script were:</p>
<OL><LI>Eliminate unnecessary keywords (<B>class</B>, <B>struct</B>, <B>__CDECL</B>, etc.) and default template parameters (such as allocators and <B>less&lt;...&gt;</B> functors) completely.</LI>
<LI>Reduce the fully expanded standard container/iterator template type names to just the basic container type and the simplest possible representation of the parameter types.</LI>
<LI>If possible, make the resulting messages fit into the &#147;fine-print error message line&#148; at the bottom of the Visual Studio IDE <a href="#3">[3]</a>. Of course, the number of characters there is dependent upon your specific display settings. My display is usually 1280x1024, so that is what I used as my measuring stick. Fortunately, few final messages require the full length of the line (or more) at that resolution, so most messages should still end up fitting in the available space even at lower screen resolutions. If not, you can always scroll them in the usual manner within the output window.</LI>
<LI>By allowing some customization of the Perl script, give users a choice of how to handle iterator types: either have the script delete all details of iterator types or have it leave the (decrypted) iterator types intact. For example, consider the program <B>error2.cpp</B> (<a href="list2.htm">Listing 2</a>). The original, unfiltered error message produced by the <B>insert</B> statement is about 2,700 characters long. (You don&#146;t really want to see it, do you?) With the Perl variable <B>$iter_policy</B> set to <B>1</B> (output shown in <a href="fig3.htm">Figure 3</a>), the filter preserves iterator type-name qualifiers, so you know precisely what type of iterator is being referred to.</LI></OL>
<p>With <B>$iter_policy</B> set to <B>3</B>, only the word &#147;<B>iter</B>&#148; remains <a href="#4">[4]</a>, additionally shortening the error message. You can usually deduce the specific type of the iterator in these cases by examining the type information associated with the function in question. In <a href="fig4.htm">Figure 4</a>, for example, there&#146;s not much &#147;<B>iter</B>&#148; could logically refer to other than <B>multiset&lt;string&gt;::iterator</B>.</p>

<H3><FONT COLOR="#000080">Installation/Configuration</FONT></H3>

<p>The STL filter package consists of three files <a href="#5">[5]</a>:</p>

<OL><LI><B>CL.CPP</B>: The C++ program that runs in place of Microsoft&#146;s standard <B>CL.EXE</B>. It invokes the original <B>CL</B> command, pipes the output to Perl to accomplish the decryption, and returns the exit status of the original compilation as its final exit status so that the VC++ IDE knows whether or not to proceed on to the link phase after compilation.</LI>
<LI><B>STLFilt.pl</B>: The Perl script itself.</LI>
<LI><B>STLFilt.bat</B>: A DOS batch file that turns decryption mode on and off by toggling the existence of a special sentinel file. When off, compilation produces conventional error messages. When on, those messages are filtered through the Perl script.</LI></OL>
<p>To install the package, follow these instructions:</p>
<OL><LI>Install Perl on your machine. One source of a great Perl distribution is &lt;www.activestate.com&gt;. It is a freely distributed software package.</LI>
<LI>Determine where your <B>STLFilt.pl</B> file, your Perl interpreter, and your toggle-control file are to reside on your system. Configure the symbolic constants <B>FILTER_SCRIPT</B>, <B>PERL_EXE</B>, and <B>FILT_FILE</B> at the top of <B>CL.CPP</B> to specify these three pathnames, and compile <B>CL.CPP</B>. Note that <B>FILT_FILE</B>&#146;s filename must end with the extension &#147;<B>.ON</B>&#148;.</LI>
<LI>Modify the <B>FILT_BASE</B> variable in <B>STLFILT.BAT</B> to show the base name of the <B>FILT_FILE</B> variable defined in <B>CL.CPP</B>. For example, if <B>FILT_FILE</B> in <B>CL.CPP</B> is defined as <B>FILTERING.ON</B>, the setting in <B>STLFILT.BAT</B> should read:</LI>
<pre>
set FILT_BASE=FILTERING
</pre>
<LI>Rename the standard (Microsoft-supplied) <B>CL.EXE</B> (in your ...\VC98\BIN directory) to <B>CL2.EXE</B>. (If you&#146;d prefer to rename it to something else, change the definition of the symbol <B>STANDARD_CL</B> in <B>CL.CPP</B> accordingly.)</LI>
<LI>Place <B>CL.EXE</B> (from step 2) and <B>STLFILT.BAT</B> somewhere along your system <B>PATH</B>.</LI>
<LI>To enable filtering, open a DOS box and enter the command:</LI>
<pre>
stlfilt on
</pre>
</OL>

<p><B>CL.EXE</B> should now work both from the command line and from within the IDE, since Visual Studio invokes it to perform a compilation. (That&#146;s why it has to be named <B>CL.EXE</B>.)</p>
<p>To disable error decryption (and see full error messages), either use <B>CL2.EXE</B> directly from the command line, or disable filtering in conjunction with the new <B>CL.EXE</B> by executing:</p>

<pre>
stlfilt off
</pre>

<H3><FONT COLOR="#000080">Implementation Notes</FONT></H3>

<p>My original <B>CL.CPP</B> had about 10 lines of code that essentially boiled down to the following:</p>

<pre>
return system("&lt;original CL command&gt; | perl stlfilt.pl");
</pre>

<p>In that version, I had the Perl script return a status value of <B>0</B> or <B>1</B> depending on whether or not it ever saw the word &#147;Error&#148; on its input. This approach actually seemed to work when I ran <B>CL</B> from the command line, but the Visual Studio IDE failed to get the message and always proceeded on to the link phase, even if there were fatal errors during compilation. The present version (over 200 lines) handles the piping operation directly via Windows system calls. The status returned by <B>CL.EXE</B> is now, appropriately, the actual status value returned by the compiler. This keeps the IDE happy.</p>
<p>For anyone thinking of adapting this method to the Unix environment, I&#146;d recommend using my original approach in the Perl script: have it return <B>1</B> if the word <B>"Error"</B> is ever spotted and <B>0</B> otherwise. Then the parent process (shell script or makefile) can invoke C++ and the Perl script using a pipe and receive the proper result status directly from the Perl process.</p>
<p>As for the Perl script, I basically began by completely deleting the simplest &#147;noise&#148; components of the messages (the words <B>class</B>, <B>struct</B>, etc., as mentioned above) and reducing &#147;vanilla&#148; instances of string to just <B>"string"</B>. Those reductions alone made a major dent. For containers and iterators, I scanned the raw error messages for patterns, mapped them to their corresponding containers, and wrote Perl statements to ferret out the essentials for each type. This was mostly not very glamorous, trial-and-error grunt work. As I puzzled out each standard type, I ran regression tests to see what previous work had been broken, consolidated redundant transformations, and plodded on.</p>
<p>When I had all the standard container types working with built-in types and simple classes, I thought I was done. However, the Koenig/Moo book (on which I plan to base a new C++ course) uses constructs with nested templates, such as</p>

<pre>
map&lt;string, vector&lt;int&gt; &gt;
</pre>

<p>It seemed to me that a multiple-pass approach might suffice to deal with such nested templates; in theory, n levels of nesting could be decrypted by making n passes over the error message text. In practice, it actually seems to work that way! I surrounded the bulk of the filter with a big for-next loop and began creating test cases. Some issues cropped up with respect to allocators, functors, and the order by which their declarations were stripped from container and iterator declarations, but soon it all fell into place, and it seems to be doing the trick.</p>
<p>As I write this, if I so much as look at another regular expression, my vision starts to blur and I feel a panic attack coming on; so, I&#146;ve decided not to scramble to support the several other solid, popular C++ libraries out there with this version of the filter <a href="#6">[6]</a>. Perhaps by the time this sees print, I&#146;ll have added support of other libraries to the script, or, if problems arise trying to process different libraries with the same script, I&#146;ll have developed some alternate versions of <B>STLFilt.pl</B> for those libraries. In that case, the updated and/or alternate versions will be available for download at &lt;www.bdsoft.com/tools/stlfilt.html&gt;. If someone else beats me to it, however, so much the better!</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>Thanks to Dave Smallberg for the basic idea (wish I&#146;d have thought of it myself!) and to Scott Meyers for putting on his wonderful ESTL seminar in January 2001 &#151; the event that inspired this project. And a <I>very</I> special thank you to Thomas Becker, who wrote and kindly contributed the native Windows inter-process communication code in <B>CL.CPP</B> that replaced my original &#147;one-line pipe&#148; <B>system</B> call.</p>

<H3><FONT COLOR="#000080">Footnotes</FONT></H3>

<p><a name="1"></a>[1]  To be fair, the STL error message complexity problem is not specific to Visual C++; most compilers, in fact, put out STL diagnostics that are more or less similar.</p>
<p><a name="2"></a>[2]  Actually, <a href="fig1.htm">Figure 1</a> is the result of compiling directly from the command line. If I compile <B>error.cpp</B> from within the IDE, then in addition to the errors in <a href="fig1.htm">Figure 1</a>, I also get a slew of obnoxious warnings about identifiers being truncated to 255 characters.</p>
<p><a name="3"></a>[3]  I&#146;m sure Microsoft has an &#147;official&#148; name for this area at the bottom of the IDE, but never having seen a Visual C++ manual, I have no idea what that name might be.</p>
<p><a name="4"></a>[4]  You can even customize the text used to substitute for the word &#147;<B>iterator</B>&#148; by changing the value of <B>$newiter</B> in the configurable portion of the Perl script, <B>STLFilt.pl</B>. That value is &#147;<B>iter</B>&#148; by default, but I&#146;ve also used &#147;<B>IT</B>&#148; with pleasing results. In fact, using &#147;<B>IT</B>&#148; is my personal preference, but I didn&#146;t want to impose the all-caps format on anyone who might find it offensive.</p>
<p><a name="5"></a>[5]  There aren&#146;t any points I make in this article that particularly require the listings to be on hand, so I relegate them all solely to download-land. Furthermore, if <I>CUJ</I> were to print, say, excerpts from the Perl script, the lines would run way too long for the available column space since I haven&#146;t yet figured out how to &#147;wrap&#148; Perl program lines containing long, single-line regular expressions. Does anyone happen to know the secret?</p>
<p><a name="6"></a>[6]  While playing with STLPort&#146;s library, however, I couldn&#146;t resist putting in two small changes (the detection of an optional underscore in a few strategic places, and removal of the &#147;<B>STL::</B>&#148; qualifier) that cut the length of VC++&#146;s messages by an average of 50 percent when including the STLPort header files. But I&#146;d better stop now before I get sucked into doing everything else.</p>

<p><i><B>Leor Zolman</B> designed and implemented one of the first C language development systems for personal computers, the &#147;BDS C Compiler&#148; back in 1979. Since then he has worked as a staff member at the <I>C/C++ Users Journal</I> and published a book on C Programming (<I>Illustrated C</I>, Prentice-Hall, 1991). Leor currently authors and delivers corporate training seminars in Java, Unix (introductory, Korn Shell programming and system administration), Perl, C, C++, and the Standard Template Library. He can be reached at <B>leor@bdsoft.com</B>.</i></p>

<h4><a href="../../../source/2001/jul01/zolman.zip"></a></h4>
</blockquote></body></html>
