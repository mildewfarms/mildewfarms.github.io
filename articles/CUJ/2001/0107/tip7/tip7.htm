<HTML>   
     <HEAD>
<TITLE>July 2001/Tip #7: A remove_if for vector&lt;T *&gt;</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   C/C++ Tips</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Tip #7: A remove_if for vector&lt;T *&gt;</FONT></H2>

<HR>
<BLOCKQUOTE>

<p>It is common for C++ programmers to create STL containers of pointers to objects; typically these objects are allocated from the free store and the container &#147;owns&#148; the memory allocated to them, which means:</p>
<p>1)  When the container is deleted, the free store memory of all the objects should be freed as well; and</p>
<p>2)  If an algorithm that removes elements from the container is applied, the free store memory should be released as necessary.</p>
<p>Number 1) is easy: either derive from the container at hand or embed it into your own class, and in the destructor loop over the elements and call <B>delete</B> for each element.</p>
<p>Number 2), however, is conceptually difficult: the STL does provide an algorithm, called <B>remove_if</B>, to remove elements that match a certain criteria. Unfortunately, this algorithm cannot be used without producing memory leaks in this case. Normally (if your container would not contain pointers to objects on the free store) you would write something like:</p>

<pre>
vector&lt;Object&gt; v ;
...
vector&lt;Object&gt;::iterator last =
   remove_if( v.begin(), v.end(), predicate() ) ;
v.erase( last, v.end() ) ;
</pre>

<p>In the case of containers of pointers, however, the program must additionally get rid of the free store memory that is pointed to by the element pointers. The idea comes to mind to loop over the open range <B>[last,v.end())</B> and call <B>delete</B> for each pointer in this range &#151; this is however wrong, since that range contains only leftovers from the <B>remove_if</B> algorithm; specifically it does not contain the pointers to the elements to be deleted! (For a discussion about what <B>remove_if</B> removes and why in this case pointers can be lost, see section 9.7 of Nicolai Josuttis&#146; <I>The C++ Standard Library.</I>) But fortunately there is a solution to this problem: the <B>partition</B> algorithm does just what we want: it separates the pointers into a range of pointers to elements that satisfies a certain condition, and a range of pointers that doesn&#146;t satisfy that very same condition. It could be used like this:</p>

<pre>
vector&lt;Object *&gt; v ;

v.push_back( new Object( ... ) ) ;
...
vector&lt;Object *&gt;::iterator last =
   partition( v.begin(), v.end(), not1(predicate()) ) ;
for( vector&lt;Object *&gt;::iterator i = last ; i != v.end() ; ++i )
{
    delete *i ;
}
v.erase( last, v.end() ) ;
</pre>

<p>Or, to avoid the problem entirely, this can be automated a bit by making the contained pointers responsible for their own cleanup. This is done by using a vector of reference-counted smart pointers instead of a vector of bald pointers. For example, you can use Boost&#146;s <B>shared_ptr</B> (see &lt;www.boost.org&gt;) and use a <B>vector&lt;shared_ptr&lt;T&gt; &gt;</B> instead of a <B>vector&lt;T*&gt;</B>.</p>
<p>[See also Item 33 of Scott Meyers&#146; forthcoming book <I>Effective STL</I> &#151;mb.]</p>

<p><i>Thanks to Harald Nowak, <B>Harald.Nowak@infrasoft.at</B>, for this tip.</i></p>

</blockquote></body></html>
