<HTML>   
     <HEAD>
<TITLE>July 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Chuck,</p>
<p>I just received the latest <I>C/C++ Users Journal</I> in the mail and opened up the Java Solutions supplement (June 2001), containing your article &#147;Threads 101.&#148;</p>
<p>The summary paragraph ends with the following line: &#147;[Java] is the first language to offer portable threading support.&#148;</p>
<p>Surely this must be a mistake! The first language to offer tasking support is Ada, which was standardized in the early 80s. The language was revised and a new standard approved in Febreuary 1995, which achieved another first for Ada: it was the first object-oriented language to have an international standard.</p>
<p>Matt</p>

<p><I>Ah, yes. That was supposed to read &#147;the first language in widespread use....&#148; Big difference.</I></p>
<p><I>Thanks,</I></p>
<p><I>Chuck Allison</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I read with interest Steve Dewhurst&#146;s article about casts in the April 2001 issue, and I think it should also have addressed the source of the problem, especially with <B>const</B> casts. What we as programmers must ask ourselves when tempted to use a cast is: &#147;Do I need the cast in the first place?&#148;.</p>
<p>Like in Steve&#146;s first example, the cast here may be unnecessary, if:</p>

<OL><LI>The <B>dealWith</B> function does not modify the object pointed to by its parameter. Here the solution is to change the parameter type to a <B>const Person *</B>.</LI>
<LI>The <B>dealWith</B> function does modify the object pointed to by its parameter, but we can modify the return type from <B>getNextEmployee</B> to be a pointer to non-const.</LI></OL>

<p>In the second case if we cannot modify the return type (because it is a library for which we do not have the source code), then we are doomed and we must use the cast.</p>
<p>The great thing about <B>const</B> is that it allows us to express and enforce design decisions in code instead of comments; if we cast it away, we are violating the contract between the function/method and its user. One of the valid uses of casting away <B>const</B> before mutable was introduced was that it allowed us to cast away <B>const</B> in <B>const</B> methods, but even that is deprecated now in favor of mutable members. From that perspective, <B>const</B> casts are rarely necessary.</p>
<p>I have seen a lot of examples of this type of misunderstanding of <B>const</B>, the most common being the overuse of <B>const</B>. All parameters to function/methods are declared <B>const</B>, even pass-by value parameters, regardless of their use for input or output; this of course causes an explosion in the use of casts.</p>
<p>Another common flaw is to misunderstand a pointer to <B>const</B> with a <B>const</B> pointer, for example:</p>

<pre>
void foo(const char *pc)
{
    char *pnc = const_cast&lt;char *&gt;(pc);

    while(*pnc)
    {
        if(*pnc == &#146;a&#146;)
           break;
        pnc++;
    }
}
</pre>

<p>Here the programmer thinks he needs a <B>char *</B> to be able to modify the pointer, but the <B>const char *</B> is fine as long as he does not dereference it and use it as an l-value.</p>
<p>I think it would be interesting to have an article covering this type of topic, since <B>const</B> and <B>const_cast</B> are not usually covered in the same section of the books about C++.</p>
<p>Thank you,</p>
<p>Agustin Vega</p>

<p><I>Dear Agustin,</I></p>
<p><I>Thank you for reading my article with interest. It&#146;s a nice change, since I generally get the feeling that people read my articles with trepidation.</I></p>
<p><I>I agree with you that much more can be said about </I><B>const</B><I> casts and the psychological profiles of people who employ them, but with limited space I felt it was best to issue a short warning and move on. Clearly, the subject deserves a column to itself. My general advice about </I><B>const</B><I> can be summed up with two observations:</I></p>
<OL><LI><I>Anything that can be </I><B>const</B><I> should be </I><B>const</B><I>.</I></LI>
<LI><I>If you have to cast away </I><B>const</B><I>, it can&#146;t be </I><B>const</B><I>.</I></LI></OL>
<p><I>A full treatment of </I><B>const</B><I> and </I><B>const</B><I> safety would then have to examine the nature of </I><B>const</B><I> (logical constness vs. bitwise constness), the interaction of </I><B>const</B><I> implementations with exception safety and multithreading issues, the effect of </I><B>const</B><I> on interface design, and the arcane rules for safe conversions among pointer to pointer (to pointer, ad infinitum) types that contain </I><B>const</B><I> qualifiers.</I></p>
<p><I>You do bring up a pet peeve of mine: the colloquial use of the term &#147;const pointer&#148; when &#147;pointer to const&#148; is intended. These are, as you point out, very different concepts, and any such usage must be clarified. In the past, I&#146;ve been able to dismiss this usage as a vulgarism employed only by C++ newcomers and managers. Unfortunately, the C++ Standard library uses the term </I><B>const_iterator</B><I> in precisely that sense: a </I><B>const_iterator</B><I> is an iterator that refers to constant elements, not an invariant iterator.</I></p>
<p><I>Thanks again for your comments.</I></p>
<p><I>Steve Dewhurst</I></p>

<hr><p>I just received a complimentary copy of the May 2001 issue of <I>C/C++ User&#146;s Journal</I>. For the first time in the years that I&#146;ve looked at the magazine, for some reason I feel that just maybe this is the time to subscribe. (Never mind the fact that I already subscribe to more magazines than I can read in my waking hours!) The topics on the cover, for the most part, cover issues of specific interest to me, but I think your editorial may be the clincher.</p>
<p>For the first time in years, I hear someone speaking out against the OO approach and, to paraphrase, it does a mind good! I&#146;ve just come off a project where I &#147;inherited&#148; a bunch of code. While perusing the source files, I could see that the project started in a non-Windows environment and migrated to several different operating systems. It evolved and eventually moved into Windows drivers realm. At this point, it was made OO. Not that I am totally against OO &#151; it has its place, but this code could honestly be called an abomination. The whole project had been wrapped into one BIG class! There was no need for globals because everything was visible to the whole class. It violated the basic principles of encapsulation, data hiding, etc. The sloppy coding practice, poor organization, and non-existent comments made it unreadable and un-maintainable. It did very little to convince me that OO may be a &#147;good thing.&#148;</p>
<p>When someone looks at my code, I would hope that they view it as a well-organized implementation of an algorithm performing a specific task in an efficient manner &#151; not as just another &#147;object.&#148;</p>
<p>Thanks for your thoughts,</p>
<p>Pfaltzgraff</p>

<hr><p>Dear Rick,</p>
<p>With respect to your article &#147;Two Classes for Simple Socket Programming&#148; in the <I>C/C++ User&#146;s Journal</I>, May 2001: there is a bug in the design of the receive code that you may wish to know about.</p>
<p>The problem is that TCP is a stream protocol: message boundaries are not preserved. The sender may issue a single send of, say, 123 bytes, which get delivered to the receiver as three receives of, say, 3 bytes, 119 bytes, and 1 byte. TCP and the network can do whatever they want in this regard. In practice, the delivery sizes won&#146;t be as capricious as the example I gave, but you cannot write reliable code without taking the essential stream nature of the protocol into account.</p>
<p>It&#146;s a little odd, since you seem to be aware of the problem. You say &#147;it is possible that the data will not be sent or arrive as a single unit,&#148; but then you write code that expects each unit of data sent to be received as a single unit.</p>
<p>That is to say, you (needlessly) break down the data on the sending side into chunks of size <B>IPC_SR_BUFSIZE-1</B> bytes, issuing one send for each chunk. On the receiver side, you assume that if a sent chunk of <B>IPC_SR_BUFSIZE-1</B> bytes is not received as a single unit of <B>IPC_SR_BUFSIZE-1</B> bytes, you have reached the end of the data stream. This is precisely the error you yourself warned about. You simply cannot assume that when you send <B>IPC_SR_BUFSIZE-1</B> bytes (or any other number) as one send, the receiver will get exactly that number of bytes in a single receive call.</p>
<p>Assuming a sufficiently small definition of <B>IPC_SR_BUFSIZE</B>, you may not be lucky enough to encounter a problem on the network you tested against. The usual time at which these problems show up is when you move from the original test network (say, a LAN) to a different network (say, involving dialup links with shorter message transfer unit (MTU) size).</p>
<p>A correct implementation has, essentially, two choices:</p>
<p>1)  Use a terminator byte, perhaps zero if the data is ASCII text, and receive up to and including that byte.</p>
<p>2)  Send a length indication at the head of each message unit.</p>
<p>With either of these, there&#146;s no need to break the data into chunks at the sending side (and in fact it may be less efficient if you do chunk the data, depending on the underlying sockets implementation). All you need to do is to run the receive code until you have received the whole message.</p>
<p>I prefer the length-based approach, since it makes it rather simpler to stop receiving at the right place. (If your client might send more than one request before your server responds, then you not only have to worry about one request getting split, as we have mostly talked about here, but you have to worry about more than one request getting combined.)</p>
<p>I hope this helps clarify the matter!</p>
<p>Dave Porter</p>

<p><I>Dave,</I></p>
<p><I>As you realized, I am well aware that TCP message boundaries are not preserved. In theory, any number of bytes could be sent or received at one time. In reality, however, this is not the case. As you mentioned: In practice, the delivery sizes won&#146;t be as capricious as the example.</I></p>
<p><I>The two C++ classes that I present in </I>CUJ<I> are basically a class variation of a C API that was constructed over five years ago and has been in production in various GPL forms in a variety of platforms since. In my stress testing, I have not yet encountered a network that will send or receive less than </I><B>IPC_SR_BUFSIZE</B><I> bytes except when there is no more data.</I></p>
<p><I>I intentionally designed the classes/API to work like this as (at the time), I felt that the use of a delimiter couples the code to something unnecessary and using the chunk assumption seemed to be the only reasonable solution. I had also considered prefixing the message with a length.</I></p>
<p><I>I do not consider this a bug, as in the real world, the situation does not occur. I can modify the C++ classes to use the length approach if you wish. I have no plans, however to incorporate this into Future Lab GPL software.</I></p>
<p><I>Rick Smereka</I></p>

<hr><p>Greetings,</p>
<p>I&#146;m a fairly new subscriber to <I>C/C++ Users Journal</I>, I&#146;m not all that experienced with C++, but I&#146;ve learned a lot from reading it, even though a lot is over my head. I was looking through the suggested books list and I was wondering why <I>Exceptional C++</I> (by Herb Sutter, Addison-Wesley, 1999) isn&#146;t on the list, I think that book is incredible in its coverage of using exceptions and how to write good, solid code. Every time I pick up that book, I learn something new. The breadth of knowledge of Herb Sutter is amazing, as I&#146;m sure you know since I see his columns in <I>CUJ</I>. Thanks for your time and keep up the excellent work on the magazine.</p>
<p>Regards,</p>
<p>Daniel Longest</p>

<p><I>Thanks for reminding us that the list is in need of updating! </I>&#151;<I>mm</I></p>
</blockquote></body></html>
