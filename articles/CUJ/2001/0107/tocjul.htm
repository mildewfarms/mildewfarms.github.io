<HTML>
<HEAD>
<TITLE>July 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">July 2001<BR>
                Volume 19 Number 7</FONT></H3>
               
<H3><FONT COLOR="#FF0000">SOFTWARE TOOLS</FONT></H3>

<H4><A HREF="panzer/panzer.htm">A Toolbox of String Classes</A></h4>
<p><b>John Panzer</b><br>
<i>&#147;One size fits all&#148; has never applied to strings. Now you can have as many different kinds of strings as you need, all wrapped in the <B>std::string</B> interface.</i></p>

<H4><A HREF="zolman/zolman.htm">An STL Error Message Decryptor for Visual C++</A></h4>
<p><b>Leor Zolman</b><br>
<i>Believe it or not, there&#146;s helpful information buried in those template error messages. It just takes a little Perl to dig it out.</i></p>

<H4><A HREF="york/york.htm">A Random Access Compressed File Layer</A></h4>
<p><b>Kyle York</b><br>
<i>Providing efficient random access to compressed data is a tall order. Here is a library that does just that, and it&#146;s patterned after POSIX file I/O.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="lippman/lippman.htm">The C# Delegate</A></H4>
<p><b>Stanley B. Lippman</b><br>
<i>If you&#146;re comparing C# to other &#147;C-family&#148; languages, here&#146;s an unusual feature that has no real equivalent in C++ or Java.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ TIPS</FONT></H3>
<H4><A HREF="tip7/tip7.htm">Tip #7: A remove_if for vector&lt;T *&gt;</A></H4>
<p><b>Harald Nowak</b><br>
<i>Containers of pointers are common, but cumbersome to deal with. Here&#146;s a little-used algorithm in the Standard C++ library that makes things a little less awkward.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="austern/austern.htm">The Standard Librarian: File-Based Containers</A></H4>
<p><b>Matt Austern</b><br>
<i>Looking for a way to create a file-based container? You might need to look outside the Standard C++ library, and memory mapping may be the answer.</i></p>

<H4><A HREF="sutter/sutter.htm">Sutter&#146;s Mill: Why Not Specialize Function Templates?</A></h4>
<p><b>Herb Sutter</b><br>
<i>Specializing function templates is not intuitive. Herb tells you when and why not to specialize templates.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ Experts on the Web</FONT></H3>
<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1907/vinoski/vinoski.htm">&#147;Object Interconnections: CORBA and XML, Part 2 &#151; XML as CORBA Data&#148;</A></H4>
<p><b>by Douglas C. Schmidt and Steve Vinoski</b><br>
<I>XML's ability to provide structured, yet flexible, description and definition of data meshs well with CORBA's. This month, the authors continue their exploration of the relationship between CORBA and XML.</I></p>

<H4><A HREF="../cexp1907/hyslop/hyslop.htm">&#147;Conversations: How to Persist and Object&#148;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<I>In this article, our narrator learns that object persistence can be easily implemented, especially when it&#146;s hooked up to the factory method template.</I></p>

<H4><A HREF="../cexp1907/reeves/reeves.htm">&#147;The (B)Leading Edge: Using IOStreams &#151; Creating a Whole New Stream Class&#148;</A></H4>
<p><b>by Jack W. Reeves</b><br>
<I>This month, Jack provides a C++ mechanism to encode/decode data using the eXternal Data Representation protocol.</I></p>

</BLOCKQUOTE></BODY></HTML>
