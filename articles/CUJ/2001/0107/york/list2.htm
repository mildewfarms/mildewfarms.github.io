<HTML><HEAD>
<TITLE>July 2001/A Random Access Compressed File Layer/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: The cdc_data_flush function</A></h4>
<pre>
int cdc_data_flush(cdc_t *cdc)
{
  int rc;

  rc = 0;
  if (cdc-&gt;data.cluster.dirty)
  {
    unsigned long bat_entry;
    unsigned long bat_entry_next;
    const char   *ptr;
    unsigned long count;
    size_t        zsize;
    unsigned long compress_flag;

    cdc-&gt;data.cluster.dirty = 0;
    count      = cdc-&gt;data.blocks;
    ptr        = cdc-&gt;data.cluster.buffer;
    compress_flag = 0;

    zsize = cdc-&gt;data.size;
    rc = cdc-&gt;env-&gt;deflate.fn(
      cdc-&gt;env-&gt;deflate.arg,
      cdc-&gt;data.zbuffer,
      &amp;zsize,
      cdc-&gt;data.cluster.buffer,
      cdc-&gt;data.size
      );
    if (0 == rc)
    {
      /*
       * success! but if we don't save at least 1 block, 
       * don't bother
       */
      count = (zsize + cdc-&gt;blk.size - 1) / cdc-&gt;blk.size;
      if (count &lt; cdc-&gt;data.blocks)
      {
        compress_flag = MAP_FLAG_COMPRESSED;
        ptr = cdc-&gt;data.zbuffer;
      }
    }
    rc = cdc_map_entry_get(cdc, cdc-&gt;data.cluster.cluster, 
                           &amp;bat_entry);

    if (0 == rc)
    {
      if (BAT_ENTRY_EOL == bat_entry)
      {
        /* get a free bat entry */
        rc = cdc_bat_entry_alloc(cdc, &amp;bat_entry); 
        if (0 == rc)
        {
          rc = cdc_map_entry_set(
            cdc,
            cdc-&gt;data.cluster.cluster,
            bat_entry | compress_flag
            );
        }
      } else
      {
        unsigned long map_entry;

        map_entry = bat_entry;
        if (compress_flag)
        {
          map_entry |= MAP_FLAG_COMPRESSED;
        } else
        {
          map_entry &amp;= ~MAP_FLAG_COMPRESSED;
        }
        if (bat_entry != map_entry)
        {
          rc = cdc_map_entry_set(cdc, cdc-&gt;data.cluster.cluster, 
                                 map_entry);
        }
        bat_entry &amp;= ~MAP_FLAG_COMPRESSED;
      }
    }
    while ((0 == rc) &amp;&amp; count)
    {
      rc = data_block_write(cdc, bat_entry, ptr);
      if (0 == rc)
      {
        rc = cdc_bat_entry_get(cdc, bat_entry, &amp;bat_entry_next);
      }
      if (0 == rc)
      {
        count--;
        if (count)
        {
          ptr += cdc-&gt;blk.size;

          if (0 == rc)
          {
            if (BAT_ENTRY_EOL == bat_entry_next)
            {
              rc = cdc_bat_entry_alloc(cdc, &amp;bat_entry_next);
              if (0 == rc)
              {
                rc = cdc_bat_entry_set(cdc, bat_entry, 
                                       bat_entry_next);
              }
            }
            bat_entry = bat_entry_next;
          }
        }
      }
    }
    /*
     * free up any remaining entries
     *   --- occurs if the current cluster compresses to less than
     *       the previous one
     */
    if ((0 == rc) &amp;&amp; (BAT_ENTRY_EOL != bat_entry_next))
    {
      /* mark the end */
      cdc_bat_entry_set(cdc, bat_entry, BAT_ENTRY_EOL); 
      do
      {
        bat_entry = bat_entry_next;
        rc = cdc_bat_entry_get(cdc, bat_entry, &amp;bat_entry_next);
        if (0 == rc)
        {
          rc = cdc_bat_entry_free(cdc, bat_entry);
        }
      } while ((0 == rc) &amp;&amp; (BAT_ENTRY_EOL != bat_entry_next));
    }
  }
  return rc;
}
&#151; End of Listing &#151;</pre></body></html>
