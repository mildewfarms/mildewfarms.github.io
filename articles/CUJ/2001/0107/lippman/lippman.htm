<HTML>   
     <HEAD>
<TITLE>July 2001/The C# Delegate</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The C# Delegate</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Stanley B. Lippman</FONT></H3>

<BLOCKQUOTE>
<p>If you&#146;re comparing C# to other &#147;C-family&#148; languages, here&#146;s an unusual feature that has no real equivalent in C++ or Java.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>C# is a new and somewhat controversial language invented at Microsoft and delivered as a cornerstone of their new Visual Studio.NET, currently in a first Beta release. C# combines a great many of the features of both C++ and Java. The primary criticism of C# within the Java community is the claim that it is just an imperfect Java clone &#151; one that is more the result of litigation than of language innovation. In the C++ community, the primary criticism, which is also leveled at Java, is that C# is just yet another over-hyped proprietary language.</p>
<p>The purpose of this article is to illustrate a feature of the C# language for which there is no analogous direct support in either C++ or Java. This is the C# <I>delegate</I> type, which serves as a kind of generic pointer to member function. The C# delegate type is, I believe, a thoughtfully innovative language feature that should prove of special interest to the C++ programmer regardless of his or her feelings about either C# or Microsoft.</p>
<p>To motivate the discussion, I&#146;ve loosely organized it around the design of a <B>testHarness</B> class that permits any class to register one or more either static or non-static class methods for subsequent execution. The delegate type is at the center of this implementation.</p>

<H3><FONT COLOR="#000080">The C# Delegate Type</FONT></H3>

<p>A delegate is a kind of pointer to function, but with three primary differences:</p>
<p>1)  A delegate object can address multiple methods rather than only one method at a time. When we invoke a delegate that addresses multiple methods, the methods are invoked in the order they are assigned to the delegate object &#151; we&#146;ll see how to do that shortly.</p>
<p>2)  The methods addressed by a delegate object do not need to be members of the same class. The methods addressed by a delegate object must all share the same prototype and signature. Those methods, however, can be a combination of both static and non-static methods and may be members of one or more different classes.</p>
<p>3)  A declaration of a delegate type internally creates a new subtype instance of either the <B>Delegate</B> or <B>MulticastDelegate</B> abstract base classes of the .NET library framework, supporting a collection of public methods to query the delegate object and the method(s) to which it refers.</p>

<H3><FONT COLOR="#000080">Declaring a Delegate Type</FONT></H3>

<p>The declaration of a delegate type generally consists of four components: (a) an access level, (b) the keyword delegate, (c) the return type and signature of the method the delegate type addresses, and (d) the name of the delegate type, which is placed between the return type and signature of the method. For example, the following declares <B>Action</B> to be a public delegate type that addresses methods taking no parameters and with a return type of <B>void</B>:</p>

<pre>
public delegate void Action();
</pre>

<p>At first glance, this looks shockingly like a function definition; the only difference is the <B>delegate</B> keyword. The intended symmetry here is to distinguish an ordinary member function from each special case with a keyword rather than a token: <B>virtual</B>, <B>static</B>, and <B>delegate</B>.</p>
<p>If a delegate type is used to address only a single method at any one time, it may address a member function of any return type and signature. If, however, the delegate type addresses two or more methods simultaneously, the return type <I>must</I> be <B>void</B>. <B>Action</B>, for example, can be used to address either a single or multiple methods. This is the declaration we&#146;ll use for our test harness.</p>

<H3><FONT COLOR="#000080">Defining a Delegate Handle</FONT></H3>

<p>We cannot declare global objects in C#; every object definition must be either a local object, a member of a type, or a parameter in the argument list of a function. For the moment, I&#146;ll just show you the declaration of a delegate type. Then we&#146;ll look at how we declare it as a class member.</p>
<p>A delegate type in C#, as well as the class, interface, and array types, is a reference type. A reference type is separated into two parts:</p>

<UL><LI>   A named <I>handle</I> that we manipulate directly, and</LI>
<LI>   An unnamed object of the handle&#146;s type that that we manipulate indirectly through the handle. This object must be explicitly created using the <B>new</B> expression.</LI></UL>

<p>The definition of a reference type is a two-step process. When we write</p>

<pre>
Action theAction;
</pre>

<p><B>theAction</B> represents a handle to a delegate object of the <B>Action</B> delegate type, but is not itself the delegate object. By default, it is set to <B>null</B>. If we attempt to use it before it is assigned a value, a compile-time error is generated. For example, the statement</p>

<pre>
theAction();
</pre>

<p>causes the invocation of the method(s) addressed by <B>theAction</B>. However, unless it has been unconditionally assigned to between its definition and this use, the invocation triggers a compile-time error message.</p>

<H3><FONT COLOR="#000080">Allocating a Delegate Object</FONT></H3>

<p>In this section, we&#146;ll need to minimally access both a static and non-static method, for which I&#146;ve volunteered the following <B>Announce</B> class. The static <B>announceDate</B> method prints the current date to standard output in the <I>long</I> form:</p>

<pre>
Monday, February 26, 2001
</pre>

<p>while the non-static <B>announceTime</B> method prints the current time to standard output in the <I>short</I> form:</p>

<pre>
00:58
</pre>

<p>where the first two digits represent the hour, beginning at zero for midnight, and the second two digits represent the minute. The class definition looks as follows. It makes use of the <B>DateTime</B> class provided with in the .NET class framework.</p>

<pre>
public class Announce
{
   public static void announceDate()
   {
      DateTime dt = DateTime.Now;
      Console.WriteLine( "Today's date is {0}",
                         dt.ToLongDateString() );
   }

   public void announceTime()
   {
      DateTime dt = DateTime.Now;
      Console.WriteLine( "The current time now is {0}",
                         dt.ToShortTimeString() );
   }
}
</pre>

<p>To set <B>theAction</B> to address either method, we must create an <B>Action</B> delegate type using the <B>new</B> expression. For a <B>static</B> method, the argument to the constructor is the class name to which the method is a member and the name of the method itself joined by the dot operator (<B>.</B>):</p>

<pre>
theAction = new Action( Announce.announceDate );
</pre>

<p>For a non-static method, the argument to the constructor is the class object through which we wish to invoke the method joined to the method name &#151; again joined by the dot operator:</p>

<pre>
Announce an = new Announce();
theAction   = new Action( an.announceTime );
</pre>

<p>Notice that <B>theAction</B> is reassigned without first checking to see if it currently addresses an object on the heap and, if so, deleting that. In C#, objects on the managed heap are <I>garbage collected</I> by the runtime environment. We do not explicitly delete objects allocated through the <B>new</B> expression.</p>
<p>The <B>new</B> expression is used to allocate either a single object</p>

<pre>
HelloUser myProg = new HelloUser();
</pre>

<p>or an array of objects</p>

<pre>
string [] messages = new string[ 4 ];
</pre>

<p>on the program&#146;s <I>managed heap.</I>   The name of a type follows the keyword <B>new</B> followed by either a pair of parentheses (to indicate a single object) or a bracket pair (to indicate an array object) <a href="#1">[1]</a>. (A pervasive characteristic of the C# language design is this insistence on a single distinct form to differentiate between different functionality.)</p>

<H3><FONT COLOR="#000080">Garbage Collection: A Quick Overview</FONT></H3>

<p>When we allocate a reference type on the managed heap, such as the following array object:</p>

<pre>
int [] fib = new int[6]{ 1,1,2,3,5,8 };
</pre>

<p>the object automatically maintains a count of the handles that refer to it. In this example, the array object referred to by <B>fib</B> has an associated reference count initialized to 1. If we now initialize a second array handle with the object referred to by <B>fib</B>:</p>

<pre>
int [] notfib = fib;
</pre>

<p>the initialization results in a <I>shallow copy</I> of the object addressed by <B>fib</B>. That is, <B>notfib</B> now also refers to the same array object addressed by <B>fib</B>. The array object&#146;s associated reference count is now 2.</p>
<p>If we modify an element of the array through <B>notfib</B>, as in</p>

<pre>
notfib [ 0 ] = 0;
</pre>

<p>that change is also visible through <B>fib</B>. If that kind of multiple access is not acceptable, we would need to program a <I>deep copy.</I> For example,</p>

<pre>
// allocate a separate array object
notfib = new int [6];

// copy the elements of fib into notfib
// beginning at element 0 of notfib
// see note <a href="#2">[2]</a>
fib.CopyTo( notfib, 0 );
</pre>

<p><B>notfib</B> no longer addresses the same object referred to by <B>fib</B>. The object previously referred to by both now has its associated reference count decremented by 1. The object referred to by <B>notfib</B> has an initial reference count of 1.   If we now reassign <B>fib</B> to also address a new array object &#151; for example, one that contains the first 12 values of the Fibonacci sequence:</p>

<pre>
fib = new int[12]{ 1,1,2,3,5,8,13,21,34,55,89,144 };
</pre>

<p>the array object previously referred to by <B>fib</B> now has a reference count of zero. An object on the managed heap with a reference count of zero is marked for deletion &#151; when and <I>if</I> the garbage collector becomes active.</p>

<H3><FONT COLOR="#000080">Defining Our Class Properties</FONT></H3>

<p>Let&#146;s declare the delegate object as a <B>private static</B> member of our <B>testHarness</B> class. For example <a href="#3">[3]</a>,</p>

<pre>
public class testHarness
{
   public delegate void    Action();
   static private  Action  theAction;
   // ...
}
</pre>

<p>Our next step is to provide read and write access to the delegate member. In C#, we do not provide explicit inline methods to read and write non-public data members. Rather, we provide <I>get</I> and <I>set</I> accessors within a named <I>property.</I> Here is our simple delegate property. I&#146;ve called it <B>Tester</B>:</p>

<pre>
public class testHarness
{
   static public Action Tester
   {
      get{ return theAction; }
      set{ Action = value; }
   }

   // ...
}
</pre>

<p>A property can encapsulate either a static or non-static data member. <B>Tester</B> is a static property of type <B>Action</B>, our delegate type. If we wish the property to support read access, we provide a <B>get</B> accessor. (Note the absence of a signature. We define an accessor as a block of code. The compiler internally generates an inline method.)</p>
<p><B>get</B> must return a value of the property&#146;s type. In this example, it simply returns the object it encapsulates. In a lazy allocation design, a first invocation of <B>get</B> may construct then cache the object for later retrieval.</p>
<p>Similarly, if we wish the property to support write access, we provide a <B>set</B> accessor. Within <B>set</B>, <B>value</B> is a conditional-keyword. That is, within a <B>set</B> property only, <B>value</B> has a predefined meaning: it is always an object of the type of its property. In our example, it is an object of type <B>Action</B>. At run time, it is bound to the right-hand side of the assignment. In the following example,</p>

<pre>
Announce an = new Announce();
testHarnes.Tester = 
    new testHarness.Action
    ( an.announceTime );
</pre>

<p><B>set</B> is expanded inline in place of the occurrence of <B>Tester</B>. The <B>value</B> object is set to the object returned by the <B>new</B> expression.</p>

<H3><FONT COLOR="#000080">Invoking the Delegate Object</FONT></H3>

<p>As we saw earlier, we invoke the method addressed by the delegate by applying the call operator to the delegate:</p>

<pre>
testHarness.Tester();
</pre>

<p>This invokes the <B>get</B> accessor of the <B>Tester</B> property, which returns the <B>theAction</B> delegate handle. This may, however, throw an exception if <B>theAction</B> is not addressing a delegate object at this point of invocation. The canonical <I>delegate-test-and-execute</I> sequence from outside the class looks as follows:</p>

<pre>
if ( testHarness.Tester != null )
   testHarness.Tester();
</pre>

<p>For our <B>testHarness</B> class, our primary method simply encapsulates this test:</p>

<pre>
static public void run()
{
   if ( theAction != null )
      theAction();
}
</pre>

<H3><FONT COLOR="#000080">Assigning Multiple Delegate Objects</FONT></H3>

<p>To have a delegate address more than a single method, we primarily use the <B>+=</B> and <B>-=</B> operators. For example, imagine that we have defined a <B>testHashtable</B> class. Within its constructor, we add each associated test to the <B>testHarness</B>:</p>

<pre>
public class testHashtable
{
   public void test0();
   public void test1();
   testHashtable()
   {
      testHarness.Tester += new testHarness.Action( test0 );
      testHarness.Tester += new testHarness.Action( test1 );
   }
   // ...
}
</pre>

<p>Similarly, when we define a <B>testArrayList</B> class, we add each associated test within its default constructor. Notice that these methods are static.</p>

<pre>
public class testArrayList
{
   static public void testCapacity();
   static public void testSearch();
   static public void testSort();

   testArrayList()
   {
      testHarness.Tester += new
         testHarness.Action(testCapacity);
      testHarness.Tester += new testHarness.Action(testSearch);
      testHarness.Tester += new testHarness.Action(testSort);
   }
   // ...
}
</pre>

<p>When the <B>testHarness.run</B> method is invoked, we do not in general know whether the <B>testHashtable</B> or <B>testArrayList</B> methods are invoked first &#151; that depends on the order of their constructor invocations. But we do know that within each set of class methods, the order of invocation reflects the order of assignment.</p>

<H3><FONT COLOR="#000080">Delegate Objects and Garbage Collection</FONT></H3>

<p>Consider the following code sequence within a local block:</p>

<pre>
{
   Announce an = new Announce();
   testHarness.Tester += 
      new testHarness.Action
      ( an.announceTime );
}
</pre>

<p>When we initialize a delegate object to a non-static method, both the address of the method and a handle to the class object through which to invoke the method are stored. This causes the class object&#146;s associated reference count to be incremented.</p>
<p>When <B>an</B> is initialized with the <B>new</B> expression, the associated reference count of the object on the managed heap is initialized to 1. When <B>an</B> is passed to the constructor of the delegate object, the reference count of the <B>Announce</B> object is incremented to 2. With the termination of the local block, the lifetime of <B>an</B> terminates, and the reference goes back down to 1 &#151; that of the delegate object.</p>
<p>The good news is that the object associated with an invocation of a method referred to by a delegate is guaranteed not to be garbage collected until the delegate object no longer references the method <a href="#4">[4]</a>. We don&#146;t have to worry about the object being cleaned up out from under us. The bad news is that the object persists until the delegate object no longer references the method.   The method can be removed with the <B>-=</B> operator. For example, the following revised local block first sets, executes, and then removes <B>announceTime</B> from the delegate object.</p>

<pre>
{
   Announce an = new Announce();
   Action act  = new testHarness.Action( an.announceTime );

   testHarness.Tester += act;
   testHarness.run();
   testHarness.Tester -= act;
}
</pre>

<p>For the <B>testHashtable</B> class, our initial design strategy is likely to implement a destructor to remove the test methods added within its constructor. However, destructor invocation does not work the same as it does in C++ <a href="#5">[5]</a>. The destructor is not invoked following termination of its object&#146;s lifetime nor with the release of the last reference handle to the object. Rather, the destructor is invoked only during a sweep of the garbage collector, the timing of which is generally unpredictable and, in fact, may not take place at all.</p>
<p>By convention, resource deallocation is factored out into a method named <B>Dispose</B>, which the user can directly invoke:</p>

<pre>
public void Dispose ()
{
   testHarness.Tester -= new testHarness.Action( test0 );
   testHarness.Tester -= new testHarness.Action( test1 );
}
</pre>

<p>If a destructor is defined for a class, it typically invokes <B>Dispose</B>.</p>

<H3><FONT COLOR="#000080">Accessing the Underlying Class Interface</FONT></H3>

<p>Let&#146;s go back to our earlier code sequence for a moment:</p>

<pre>
{
   Announce an = new Announce();
   Action act  = 
       new testHarness.Action
       ( an.announceTime );

   testHarness.Tester += act;
   testHarness.run();
   testHarness.Tester -= act;
}
</pre>

<p>An alternative implementation might first check to see if <B>Tester</B> already addresses one or several other methods. If so, it saves the currently set delegation list, resets <B>Tester</B> to <B>act</B>, invokes <B>run</B>, then resets <B>Tester</B> to the original delegation list.</p>
<p>To discover the number of methods a delegate actually addresses, we can make use of the underlying <B>Delegate</B> class interface. For example,</p>

<pre>
if ( testHarness.Tester != null &amp;&amp;
     testHarnest.GetInvocationList().Length != 0 )
   {
      Action oldAct = testHarness.Tester;
      testHarness.Tester = act;
      testHarness.run();
      testHarness.Tester = oldAct;
   }   
else { ... }
</pre>

<p><B>GetInvocationList</B> returns an array of <B>Delegate</B> class objects, each element of which represents a method currently addressed by the delegate. <B>Length</B> is a property of the underlying <B>Array</B> class, which implements the built-in C# array type <a href="#6">[6]</a>.</p>
<p>If we wish, we can access full run-time information about the addressed method through the <B>Method</B> property of the <B>Delegate</B> class. In addition, if the method is non-static, we can also access full run-time information about the object through which the method is to be invoked through the <B>Target</B> property of the <B>Delegate</B> class. In the following example, <B>Delegate</B> methods and properties are highlighted in red:</p>

<pre>
If (testHarness.Tester != null )
{
   Delegate [] methods = test.Tester.<font color=#FF0000>GetInvocationList()</font>;
   foreach ( Delegate d in methods )
   {
      MethodInfo theFunction = d.<font color=#FF0000>Method</font>;
      Type       theTarget   = d.<font color=#FF0000>Target.GetType()</font>;

      // ok: now we can find out everything about the
      //     method addressed by the delegate ...
   }
}
</pre>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>This article has hopefully piqued your interest in the delegate type within C#, which I believe provides an innovative pointer to class method mechanism. Perhaps this article has piqued your interest in the C# language and the .NET class framework as well. A good starting page for technical resources is &lt;http://www.microsoft.com/net/&gt;. An informative news group with Microsoft developer input dealing with both .NET and C# is &lt;http://discuss.develop.com/dotnet.html&gt;. Of course, questions or comments on C# or this article can be addressed to me at <B>stanleyl@you-niversity.com</B>.   Finally, C# is currently in the process of standardization. On October 31, 2000, Hewlett-Packard, Intel, and Microsoft jointly submitted a proposed C# draft standard to ECMA, an international standards body (ECMA TC39/TG2). The current draft standard and other documentation can be found at &lt;http://www.ecma.ch&gt;.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>
<p>I would like to thank Josee Lajoie and Marc Briand for their thoughtful review of an earlier draft of this article. Their feedback has made this a significantly better article. I would also like to thank Caro Segal, Shimon Cohen, and Gabi Bayer of you-niversity.com for providing a safety.NET.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  Two initial C# trip-ups for the C++ programmer are (a) the need to place an empty parentheses following the type name of an object with a default constructor, and (b) the placement of the array subscript between the type specifier and the name of the array.</p>
<p><a name="2"></a>[2]  The built-in array in C# is a kind of <B>Array</B> class object provided in the .NET class library, and both the static and non-static methods of the <B>Array</B> class are available to each built-in array object in C#. <B>CopyTo</B> is a non-static <B>Array</B> method.</p>
<p><a name="3"></a>[3]  In C#, as in Java, each member declaration includes its access level. The default access level is <B>private</B>.</p>
<p><a name="4"></a>[4]  Similarly, the C++ Standard requires that a temporary addressed by a reference must not be eliminated until the end of the reference lifetime.</p>
<p><a name="5"></a>[5]  Internally, destructors do not even exist. A class destructor is transformed into a virtual <B>Finalize</B> method.</p>
<p><a name="6"></a>[6]  In C#, a conditional test must evaluate to a Boolean type. The direct test of <B>Length</B>&#146;s value, <B>if(testHarness.Length)</B>, is not a valid condition test. An integer value is not implicitly converted into a Boolean value.</p>

<p><i><B>Stanley B. Lippman</B> is IT Program Chair with <b>you-niversity.com</b>, an interactive e-learning provider of technical courses on Patterns, C++, C#, Java, XML, ASP, and the .NET platform. Previously, Stan worked for over five years in Feature Animation both at the Disney and DreamWorks Animation Studios. He was the software Technical Director on the Firebird segment of <I>Fantasia 2000.</I> Prior to that, Stan worked for over a decade at Bell Laboratories. Stan is the author of <I>C++ Primer,</I> <I>Essential C++,</I> and <I>Inside the C++ Object Model.</I> He is currently at work on <I>C# Primer</I> for the <I>DevelopMentor</I> Book Series for Addison-Wesley. He may be reached at <B>stanleyl@you-niversity.com</B>.</i></p>

</blockquote></body></html>
