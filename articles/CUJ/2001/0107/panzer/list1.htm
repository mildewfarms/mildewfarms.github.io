<HTML><HEAD>
<TITLE>July 2001/A Toolbox of String Classes/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: fixed_char_buf.h &#151; Header for the fixed-size string implementation</A></h4>
<pre>
// Copyright (c) 2001 John Panzer
// Permission is granted to use this code without restriction as
// long as this copyright notice appears in all source files.
#ifndef FIXED_CHAR_BUF_H_INCLUDED
#define FIXED_CHAR_BUF_H_INCLUDED

#include &lt;string&gt; // For char_traits
#include "xs_defs.h" // Utility macros

XS_NAMESPACE(xstr)

// Fixed size character buffer class.
template &lt;size_t SIZE, 
          class CharT = char, 
          class Traits = std::char_traits&lt;CharT&gt; &gt; 
class fixed_char_buf {
public: 
    // STL container interface typedefs:
    typedef CharT value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type&amp; reference;
    typedef const value_type&amp; const_reference;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef const value_type* const_iterator;
    typedef value_type* iterator;
    typedef std::reverse_iterator&lt;const_iterator&gt; 
            const_reverse_iterator;
    typedef std::reverse_iterator&lt;iterator&gt; reverse_iterator; 
    typedef std::allocator&lt;CharT&gt; allocator_type;

    // String interface typedefs:
    typedef Traits traits_type;
    static const size_type npos;

    // Constructors:
    fixed_char_buf(allocator_type const &amp;a=_allocator) {
        _end = _buffer;
    }

    fixed_char_buf(fixed_char_buf const &amp;s) {
        range_initialize(s.begin(), s.end());
    }

    // Copy operator:
    fixed_char_buf &amp;operator=(fixed_char_buf const &amp;s) {
        if (this!=&amp;s)
            range_initialize(s.begin(), s.end());
    }

    // Insert:
    template &lt;class InputIter&gt;
    void insert(iterator pos, InputIter first, InputIter last) {
        if (first!=last) { 
            size_type xtra = std::distance(first,last);
            if (pos != _end) {
                if (_end-_buffer + xtra &gt;= SIZE)
                    throw std::out_of_range("fixed_char_buf"); 
                Traits::move(pos+xtra,pos,_end-pos);
            }
            std::copy(first,last,pos);
            _end += xtra; // Expand end point
        }
    }

    // Erase:
    iterator erase(iterator first, iterator last) {
        if (first != last) {
          Traits::move(first, last, (_end - last) + 1);
          const iterator new_finish = _end - (last - first);
          _end = new_finish;
        }
        return first;        
    }


    // STL container member function interface:
    const allocator_type &amp;get_allocator() const {
        return _allocator;
    }
    
    iterator begin() {return _buffer;}
    const_iterator begin() const {return _buffer;}
    iterator end() {return _end;}
    const_iterator end() const {return _end;}

    void clear() {_end = _buffer;}
    size_t max_size() const { return SIZE; }
    bool empty() const { return (_end == _buffer); }    
    size_type size() const {return _end - _buffer;}

    void swap(fixed_char_buf&amp; s) {
        for(int i=0;i&lt;SIZE;++i) {
            std::swap(_buffer[i],s._buffer[i]);
        }
        int len = _end - _buffer;
        _end = s.size()+_buffer;
        s._end = len+s._buffer;
    }

    // String interface member functions:
    void reserve(size_type n = 0) {
        if (n &gt; SIZE) 
            throw std::length_error("fixed_char_buf");
    } 
    size_type capacity() const { return max_size(); }

    const CharT* c_str() const {
        *_end = CharT(); // Null terminate.
        return _buffer;
    }

    const CharT* data() const {
        return _buffer;
    }

protected: 
    // Internal interface used by xstring wrapper.

    // Initializes with n copies of given element:
    void element_initialize(size_type n, value_type c) {
        if (n &gt; SIZE) 
            throw std::length_error("fixed_char_buf");
        std::uninitialized_fill_n(begin(), n, c);
        _end = _buffer+n;
    }  

    // Initializes with given range of elements:
    template &lt;class InputIter&gt;
    void range_initialize(InputIter first, InputIter last) {
        size_t n = std::distance(first,last);
        if (n &gt;= SIZE)
            throw std::length_error("fixed_char_buf");
        std::uninitialized_copy(first,last,_buffer);
        _end = _buffer+n; 
    }

private: 
    // A fixed size buffer implementation:
    CharT _buffer[SIZE+1]; // Space for SIZE elements + null 
    mutable CharT *_end ;  // End of text in _buffer
    static const allocator_type _allocator; // Dummy constant
};

template &lt;size_t SIZE, class CharT, class Traits&gt;
const fixed_char_buf&lt;SIZE,CharT,Traits&gt;::size_type 
      fixed_char_buf&lt;SIZE,CharT,Traits&gt;::npos 
      = (fixed_char_buf&lt;SIZE,CharT,Traits&gt;::size_type) -1;

template &lt;size_t SIZE, class CharT, class Traits&gt;
const fixed_char_buf&lt;SIZE,CharT,Traits&gt;::allocator_type 
      fixed_char_buf&lt;SIZE,CharT,Traits&gt;::_allocator;

XS_END_NAMESPACE

#endif
&#151; End of Listing &#151;</pre></body></html>
