<HTML>   
     <HEAD>
<TITLE>July 2001/Sutter&#146;s Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjul.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Why Not Specialize Function Templates?</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>Specializing function templates is not intuitive. Herb tells you when and why not to specialize templates.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The title is formed as a question, but at the same time it could serve as a statement: this article is about when and why <I>not</I> to specialize templates.</p>

<H3><FONT COLOR="#000080">The Important Difference: Overloading vs. Specialization</FONT></H3>

<p>It&#146;s important to make sure we have the terms down pat, so here&#146;s a quick review.</p>
<p>In C++, there are <I>class templates</I> and <I>function templates</I>. These two kinds of templates don&#146;t work in exactly the same ways, and the most obvious difference is in overloading: plain old C++ classes don&#146;t overload, so class templates don&#146;t overload either. On the other hand, plain old C++ functions having the same name do overload, so function templates are allowed to overload too. This is pretty natural. What we have so far is summarized in Example 1:</p>

<pre>
// Example 1: Class vs. function 
// template, and overloading

// A class template
// (a)
template&lt;class T&gt; class X { /*...*/ };

// A function template with two 
// overloads
// (b)
template&lt;class T&gt; void f( T );
// (c)
template&lt;class T&gt; void f( int, T, double );
</pre>

<p>These unspecialized templates are also called the underlying <I>base templates</I>.</p>
<p>Further, base templates can be <I>specialized</I>. This is where class templates and function templates diverge further, in ways that will become important later in this article. A class template can be <I>partially specialized</I> and/or <I>fully specialized</I> <a href="#1">[1]</a>. A function template can only be fully specialized; but because function templates can overload, we can get nearly the same effect via overloading that we could have got via partial specialization. The following code illustrates these differences:</p>

<pre>
// Example 1, continued: Specializing 
// templates

// A partial specialization of (a) for
// pointer types
template&lt;class T&gt; class X&lt;T*&gt; 
{ /*...*/ };

// A full specialization of (a) for int
template&lt;&gt; class X&lt;int&gt; { /*...*/ };

// A separate base template that 
// overloads (b) and (c)
// &#151; NOT a partial specialization of
// (b), because there&#146;s no such thing 
// as a partial specialization of a
// function template!
// (d)
template&lt;class T&gt; void f( T* );

// A full specialization of (b) for int
// (e)
template&lt;&gt; void f&lt;int&gt;( int );

// A plain old function that happens to
// overload with (b), (c), and (d) &#151; 
// but not (e), which we&#146;ll discuss in 
// a moment
// (f)
void f( double );
</pre>

<p>Finally, let&#146;s focus on function templates only and consider the overloading rules to see which ones get called in different situations. The rules are pretty simple, at least at a high level, and can be expressed as a classic two-class system:</p>

<UL><LI>   Non-template functions are first-class citizens. A plain old non-template function that matches the parameter types as well as any function template will be selected over an otherwise-just-as-good function template.</LI>
<LI>   If there are no first-class citizens to choose from that are at least as good, then function base templates as the second-class citizens get consulted next. Which function base template gets selected depends on which matches best and is the &#147;most specialized&#148; (important note: this use of &#147;specialized&#148; oddly enough has nothing to do with template specializations; it&#146;s just an unfortunate colloquialism) according to a set of fairly arcane rules:</LI>
<UL><LI>   If it&#146;s clear that there&#146;s one &#147;most specialized&#148; function base template, that one gets used. If that base template happens to be specialized for the types being used, the specialization will get used; otherwise the base template instantiated with the correct types will be used.</LI>
<LI>   Else if there&#146;s a tie for the &#147;most specialized&#148; function base template, the call is ambiguous because the compiler can&#146;t decide which is a better match. The programmer will have to do something to qualify the call and say which one is wanted.</LI>
<LI>   Else if there&#146;s no function base template that can be made to match, the call is bad and the programmer will have to fix the code.</LI></UL></UL>

<p>Putting these rules together, here&#146;s a sample of what we get:</p>

<pre>
// Example 1, continued: Overload 
// resolution
bool   b;
int    i;
double d;

f( b );         // calls (b) with 
                // T = bool
f( i, 42, d );  // calls (c) with 
                // T = int
f( &amp;i );        // calls (d) with 
                // T = int
f( i );         // calls (e)
f( d );         // calls (f)
</pre>

<p>So far I&#146;ve deliberately chosen simpler cases, because here&#146;s where we step off into the deep end of the pool.</p>

<H3><FONT COLOR="#000080">Why Not Specialize: The Dimov/Abrahams Example</FONT></H3>

<p>Consider the following code:</p>

<pre>
// Example 2: Explicit specialization
//
template&lt;class T&gt;   // (a) a base 
                    // template
void f( T );

template&lt;class T&gt;   // (b) a second base
                    // template,
void f( T* );       //     overloads (a)
                    //     (function templates can't be
                    //     partially specialized; they
                    //     overload instead)

template&lt;&gt;          // (c) explicit specialization of (b),
void f&lt;int*&gt;(int*); //     because the signature can
                    //     match either base template
                    //     and (b) is more specialized
                    //     than (a)

// ...

int *p;
f( p );             // calls (c)
</pre>

<p>The result for the last line in Example 2 is just what you&#146;d expect. The question of the day, however, is <I>why</I> you expected it. If you expected it for the wrong reason, you will be very surprised by what comes next. &#147;So what,&#148; someone might say, &#147;I wrote a specialization for a pointer to <B>int</B>, so obviously that&#146;s what should be called&#148; &#151; and that&#146;s exactly the wrong reason.</p>
<p>Consider the following code, put in this form by Peter Dimov and Dave Abrahams:</p>

<pre>
// Example 3: The Dimov/Abrahams Example
//
template&lt;class T&gt;   // (a) same old base template as before
void f( T );

template&lt;&gt;          // (c) explicit specialization &#151; of (a)!
void f&lt;int*&gt;(int*); //     we can only specialize something
                    //     that&#146;s visible, after all, and
                    //     at this point there&#146;s only one
                    //     function template named f

template&lt;class T&gt;   // (b) a second base template,
void f( T* );       //     overloads (a)

// ...

int *p;
f( p );             // calls (b)! overload resolution ignores
                    // specializations and operates on the base
                    // function templates only
</pre>

<p>If this surprises you, you&#146;re not alone; it has surprised a lot of experts in its time. The key to understanding this is simple, and here it is: <I>specializations don&#146;t overload</I>.</p>
<p>Only the base templates overload (along with non-template functions, of course). Consider again the salient part from the summary I gave above of the overload resolution rules, this time with specific words italicized:</p>

<UL><LI>   If there are no first-class citizens to choose from that are at least as good, then <I>function base templates</I> as the second-class citizens get consulted next. Which <I>function base template</I> gets selected depends on which matches best and is the &#147;most specialized&#148; [...] according to a set of fairly arcane rules:</LI>
<UL><LI>   If it&#146;s clear that there&#146;s one &#147;most specialized&#148; <I>function base template</I>, that one gets used. If that <I>base template</I> happens to be specialized for the types being used, the specialization will get used; otherwise the base template instantiated with the correct types will be used.</LI>
<LI>   etc.</LI></UL></UL>

<p>Overload resolution only selects a base template (or a non-template function, if one is available). Only after it&#146;s been decided which base template is going to be selected, and that choice is locked in, will the compiler look around to see if there happens to be a suitable specialization of that template available, and if so that specialization will get used.</p>

<H3><FONT COLOR="#000080">Important Morals</FONT></H3>

<p>If you&#146;re like me, the first time you see this you&#146;ll ask the question: &#147;Hmm. But it seems to me that I went and specifically wrote a specialization for the case when the parameter is an <B>int*</B>, and it is an <B>int*</B> that is an exact match, so shouldn&#146;t my specialization always get used?&#148; That, alas, is a mistake: if you want to be sure it will always be used in the case of exact match, that&#146;s what a plain old function is for &#151; so just make it a function instead of a specialization.</p>
<p>The rationale for why specializations don't participate in overloading is simple, once explained, because the surprise factor is exactly the reverse: the standards committee felt <I>it would be surprising that, just because you happened to write a specialization for a particular  template, that it would in any way change which template gets used</I>. Under that rationale, and since we already have a way of making sure our version gets used if that's what we want (we just make it a function, not a specialization), we can understand more clearly why specializations don't affect which template gets selected.</p>

<UL><LI>   Moral #1: If you want to customize a function base template and want that customization to participate in overload resolution (or, to always be used in the case of exact match), make it a plain old function, not a specialization. And, if you do provide overloads, avoid also providing specializations.</LI></UL>

<p>But what if you&#146;re the one who&#146;s writing, not just using, a function template? Can you do better and avoid this (and other) problem(s) up front for yourself and for your users? Indeed you can:</p>

<UL><LI>   Moral #2: If you&#146;re writing a function base template, prefer to write it as a single function template that should never be specialized or overloaded, and then implement the function template entirely as a simple handoff to a class template containing a static function with the same signature. Everyone can specialize <I>that</I> &#151; both fully <I>and partially</I>, and without affecting the results of overload resolution.</LI></UL>

<pre>
// Example 4: Illustrating Moral #2
//
template&lt;class T&gt;
void f( T t ) { FImpl&lt;T&gt;::f( t ); }  // users, don&#146;t touch 
                                     // this!

template&lt;class T&gt;
struct FImpl
{
  static void f( T t );  // users, go ahead and specialize this
};
</pre>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>It&#146;s okay to overload function templates. Overload resolution considers all base templates equally, so it works as you would naturally expect from your experience with normal C++ function overloading: whatever templates are visible are considered for overload resolution, and the compiler simply picks the best match.</p>
<p>It&#146;s a lot less intuitive to specialize function templates. For one thing, you can&#146;t partially specialize them &#151; pretty much just because the language says you can&#146;t <a href="#2">[2]</a>. For another thing, function template <I>specializations don&#146;t overload</I>. This means that any specializations you write will not affect which template gets used, which runs counter to what most people would intuitively expect. After all, if you had written a non-template function with the identical signature instead of a function template specialization, the non-template function would always be selected because it&#146;s always considered to be a better match than a template.</p>
<p>If you&#146;re writing a function template, prefer to write it as a single function template that should never be specialized or overloaded, and implement the function template entirely in terms of a class template. This is the proverbial level of indirection that steers you well clear of the limitations and dark corners of function templates. This way, programmers using your template will be able to partially specialize and explicitly specialize <I>the class template</I> to their heart&#146;s content without affecting the expected operation of the function template. This avoids both the limitation that function templates can&#146;t be partially specialized, and the sometimes surprising effect that function template specializations don&#146;t overload. Problem solved.</p>
<p>If you&#146;re using someone else&#146;s plain old function template (one that&#146;s not implemented in terms of a class template as suggested above), and you want to write your own special-case version that should participate in overloading, don&#146;t make it a specialization; just make it an overloaded function with the same signature.</p>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>Thanks to Peter Dimov and Dave Abrahams for prompting me to write about this topic and offering the key example, and to John Spicer for helping me get my head around the rationale for why things are the way they are.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  In Standardese, a full specialization is called an "explicit specialization."</p>
<p><a name="2"></a>[2]  There is some discussion going on within the committee about potentially allowing function template partial specialization in the next version of the C++ Standard, whose work is just getting under way.</p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I> (available summer 2001). Herb is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
