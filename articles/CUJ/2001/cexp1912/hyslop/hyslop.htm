<HTML>   
     <HEAD>
<TITLE>December 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.12/tocdec.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: I'd Hold Anything for You <a href="#1">[1]</a></FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b>Copyright 2001, Jim Hyslop and Herb Sutter</b></p>

<p>When the solution came, it wasn't where we had expected it.</p>

<p>We had been concentrating on the alien artifacts left strewn about the alien city buried out here under the Europan ice. So much of our time had been spent in here, underground, and I missed not being able to take off-duty time out on the surface and take in the silent majesty of King Jupiter filling the sky. But the surface was not safe, not now, with occupying forces on their way.</p>
<p>Using J&auml;ger's new information about the alien language, we had just managed to activate several of the devices, although so far we couldn't tell what they did. We knew we should be careful, but we hadn't the luxury of time for that. The whole purpose, I realized, was for our leaders' faction to gain control of the alien technology, especially if it had military applications. The opposing faction was taking a rather dim view, and I wondered if we hadn't been overrun by them already. It couldn't be long now, days or hours.</p>
<p>But the solution wasn't in the artifacts. It was in the Ballroom.</p>
<p>The dark, icebound city was full of unexplored chambers and chasms, hallways and dead ends. Of the ones we'd found, the most intriguing was the Ballroom &#151; our name for  an immense room empty but for three 10-foot-diameter metallic balls fixed suspended in midair. How they were suspended, we had no idea, but it was when we found some of the city's power controls that they came alive.</p>
<p>I was there when it happened. &quot;What the&#151;&quot; started one of the techs with us, but then he stopped. That was all any of us could say just then.</p>
<p>Each of the balls showed a different scene. In one, we could see a brightly lit field of yellowish grasses with what looked like trees in the near distance. In another ball was a beach scene at dusk. The third showed a metallic room much like those here in the buildings, filled with rows of chest-high cabinets.</p>
<p>We stared, and when nothing else happened immediately, we began to move around the balls. The scenes shifted, as though we were really walking around and looking through each ball like a hole into another place, but behind the ball our original room still stood as solid as ever.</p>
<p>&quot;What's in those balls? Are those pictures, or... or where are those  places?&quot; Jeannine said, hushed, when she found her voice. A tech, brought out of his wonder by the words, remembered to hurry off to call our ranking officer, who undoubtedly would call Major Gilb.</p>
<p>&quot;I don't know,&quot; I said slowly, awed but curious. &quot;They could hold anything. And they could lead anywhere...&quot;</p>

<hr>

<p>It was rather quiet around work. Many of the staff had left early for the holidays. I, on the other hand, had not been around long enough to accrue much vacation time, so I had to work right up to the holiday shutdown. Of course, this made it much more difficult to get help when I started running into brick walls, like the one I was facing now.</p> 
<p>I needed to have a variable that could hold any type of data. My first instinct was to use a template &#151; after all, they're great for generic programming:</p>

<pre>
template &lt;typename ValueType&gt;
class multiType
{
    ValueType value_;
public:
    multiType(const ValueType &amp;t) : value_(t) {}
    operator ValueType() { return value_; }
};
</pre>

<p>Unfortunately, I quickly ran into the first wall &#151; there were places in the code where one variable might have to hold different types of information during its lifetime, like this:</p>

<pre>
{
    multiType&lt;const char *&gt; multiA(&quot;Hello, World&quot;);
    // ... some code ...
    multiType&lt;long&gt; multiB(99L);
    // ... some more code ...
    multiA = multiB; // Oops -- can't convert from long to const char *.
}
</pre>

<p>At this point, I needed <b>multiA</b> to forget that it started life as a <b>multiType&lt;const char *&gt;</b> and start acting like it was a <b>multiType&lt;long&gt;</b>. It started to look like I had two choices &#151; a <b>union</b> or a <b>void</b> pointer. I knew enough of the dangers of <b>void</b> pointers, so I decided to use a <b>union</b>:</p> 

<pre>
class multiType
{
    enum ValueType { Long, ConstCharPtr };
    union
        {
        const char * c_;
        long l_;
    } value_;
    ValueType currentType_;
public:
    multiType(const char * c);
    multiType &amp; operator =(const char * c);
    operator const char *();

    multiType(long);
    multiType &amp; operator =(long);
        operator long();
};
</pre>

<p>By wrapping the <b>union</b> in a class, I had achieved some degree of encapsulation. At least the conversion operators could check that the value type being held was appropriate. I wasn't looking forward to the copy-and-paste exercise ahead of me, to implement all the overloaded constructors and conversion operators that would eventually be needed. (<b>long</b> and <b>const char *</b> were only the tip of the iceberg.)</p>
<p>&quot;You need <b>any</b>.&quot;</p>
<p>I jumped at the Guru's voice &#151; almost as much as I used to when I was still an intern. Even with the office as quiet as it was, I had still failed to hear her approach. &quot;Uh,&quot; I stammered, &quot;do I need any what?&quot;</p>
<p>&quot;No, my child,&quot; she smiled, shutting the large tome in her hand, &quot;that was not a question; that was a statement. You need <b>any</b>.&quot;</p>
<p>&quot;Oookay,&quot; I replied. I toyed with the idea of using my deer-in-the-headlights look, but decided to go for the direct approach instead and asked: &quot;Ah, would you mind elaborating slightly?&quot;</p>
<p>&quot;A thousand pardons, my apprentice,&quot; the Guru bowed. I began wondering why she was in her full Guru act with the office as empty as it was &#151; then I saw Bob heading towards the kitchen for a fresh latte. I knew that the full Guru shtick was used mainly for two reasons: to scare fresh, young recruits, and to annoy the bejeepers out of Bob. &quot;I keep forgetting that you are barely a novitiate,&quot; she continued, &quot;and not yet fully trained in the ways of the Programmer.&quot; I bristled slightly at that &#151; but then I realized she was right. The more I learned, the less I knew, it seemed.</p>
<p>&quot;I am referring to the Boost library's <b>any</b> class,&quot; the Guru continued.</p>
<p>&quot;What's the Boost library? I haven't heard of it.&quot;</p>
<p>She smiled a smile of mild surprise. &quot;Indeed? You should. The Boost library is a collection of C++ source libraries. Boost was founded by some of the blessed disciples on the C++ Standards Committee.&quot;</p>
<p>&quot;Oh, so it's related to the Standard?&quot;</p>
<p>&quot;Not directly,&quot; the Guru replied. &quot;The founding members of Boost are not-so-coincidentally members of the C++ Standards Committee, but otherwise Boost has no official connection with ISO or any other standards body. The blessed writings available at the Boost website, &lt;www.boost.org&gt;, are intended to be candidates for proposal as new standard library items in the next revision of the Holy Standard, but of course there is no guarantee that they will be accepted by the Committee.&quot;</p>
<p>&quot;Ah,&quot; I ahhed, as I digested that. &quot;So what is this <b>any</b> class you mentioned?&quot;</p>
<p>&quot;The <b>any</b> class, simply put, allows a variable to hold any type of value. An <b>any</b> could hold anything. For example,&quot; she picked up the marker and began writing on my whiteboard:</p>

<pre>
#include &lt;iostream&gt;
#include &lt;boost/any.hpp&gt;
const char * initialMessage = &quot;Snowflakes keep falling on my head&quot;;
int main()
{
 boost::any multiA(42L);
 boost::any multiB(initialMessage);
 multiA = multiB;
 std::cout &lt;&lt; any_cast&lt;const char *&gt;(multiA) &lt;&lt; std::endl;
}</pre>

<p>&quot;In this parable, <b>multiA</b> begins life holding a <b>long. </b>The assignment from <b>multiB</b> essentially converts <b>multiA </b>into a <b>const char *</b>. The output of the program, therefore, will be ‘Snowflakes keep falling on my head',&quot; the Guru concluded as she put down the marker.</p>
<p>&quot;That's cool. What's that <b>any_cast</b> do? I didn't know <b>any_cast</b> was a C++ keyword, but it must be a keyword because it isn't qualified by <b>boost::</b>...?&quot;</p>
<p>&quot;No, it is a free function template. It makes its home in the <b>boost</b> namespace, but because the object we pass it is also from namespace <b>boost</b>, compilers that correctly implement Koenig lookup &#151; alas, not all do &#151; will find the function correctly even without a using-declaration or explicit qualification. The <b>any_cast</b> is intended to be analogous to the already-blessed <b>dynamic_cast</b>. It will attempt to convert the given operand into the type requested. If the conversion is possible, the cast returns the original object converted to the desired type. If not, then the cast returns a <b>null</b> pointer if the operand was a pointer or throws an exception if the operand was a reference or object.&quot;</p>
<p>I was impressed. &quot;Well, it looks easy enough to copy <b>any</b> objects and extract the values, but in that code you knew the value you wanted the <b>any</b> object to hold at the time you created it. What if you don't know the value until later? Do you have to construct another <b>any</b> helper and then assign from it like that?&quot;</p>
<p>&quot;No, my child.&quot; In the near distance, I noticed Bob's head appear partially around a cubicle divider, shake disgustedly at these words, and disappear again. The Guru smiled enigmatically. &quot;The <b>any</b> class provides a templated assignment operator, allowing you to easily write code such as:&quot;</p>

<pre>
{
 boost::any holdsAnything; 
 holdsAnything = 9;
 holdsAnything = std::string(&quot;Hello, world&quot;);
 holdsAnything = 3.1415926;
}</pre>

<p>&quot;You will also note,&quot; the Guru continued, &quot;that the <b>any</b> class supports null or empty semantics, which is to say, the value type currently holds no value. Further, to facilitate extracting the value, the <b>any</b> class provides a <b>type</b> function, which returns a <b>std::type_info</b> class, indicating the type of value currently held in the <b>any</b> class.&quot;</p>
<p>&quot;Say,&quot; I barged in. &quot;I just thought of something &#151; this would be a great way to implement properties. Just create a <b>struct</b> that has a <b>std::string</b> for the property name, and an <b>any</b> class for the property value.&quot;</p>
<p>&quot;Indeed, my young apprentice,&quot; the Guru nodded. &quot;The prophet Henney suggests properties as one potential use of <b>any</b> <a href="#2">[2]</a>. For an <b>any</b> could hold anything. And it could lead anywhere...&quot;</p>
<p>&quot;What? How do you mean?&quot;</p>
<p>&quot;Because,&quot; she explained, &quot;another possibility is to use an <b>any</b> class as the parameter for polymorphic-based callbacks. As I recall, the example Henney gives is:&quot;</p>

<pre>
class consumer
{
public:
 virtual void notify(const any &amp;) = 0;
};</pre>

<p>&quot;Ah. Well, <i>any</i>way,&quot; I grinned, &quot;thanks for providing me the piece of the puzzle I needed.&quot; The Guru bowed her head, reopened her tome, and glided silently away as I turned back to my keyboard.</p>

<hr>

<p>&quot;Excellent work, excellent, most excellent,&quot; Gilb kept repeating. &quot;Unusual, most unusual. What about the artifacts? Has there been more progress? Have we found anything new to defend ourselves?&quot;</p>
<p>That irked me. &quot;Major,&quot; I blurted, &quot;we have no idea what this is or what it means. I know our situation, but there's much more to this than weapons! We've already performed one test and &#151;&quot;</p>
<p>&quot;You forget yourself,&quot; the major cut me off. It was the first time he had done that, and I stopped. Then, resuming his usual cajoling voice, he continued: &quot;We're all under stress. We haven't much time, no time at all. This test, what was it, what did you do?&quot;</p>
<p>&quot;A pole,&quot; Jeannine responded. &quot;We took a long pole and put it against the ball. It entered, without resistance, and we could see it leave a mark on the beach. We pushed the pole in further than the ball is wide, and it didn't come out the other side of the ball here. It's still there,&quot; she gestured and moved to show him, and we shifted to follow her. &quot;It's as if that beach was right there, within arm's reach. I haven't tried, but I'm sure I could touch it. The ball is like a hole in the universe.&quot;</p>
<p>Gilb took in this information, then moved to the grassy scene, and then to the metallic room scene.</p>
<p>Just then, as we circled the metallic room to look out at it from different directions, something new came into view. A man dressed in an oddly cut gray costume was standing at one of the cabinets, holding some sort of flat device and manipulating it. Suddenly, as though just aware of us, he turned in our direction and stared. His mouth began moving, and after the briefest pause we heard in English: &quot;Should you be here?&quot;</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] To the tune of &quot;I'd Do Anything,&quot; <i>Oliver!</i>, 1968.</p>
<p><a name="2"></a>[2] C++ Boost <b>any</b> class, Kevlin Henney, &lt;www.boost.org/libs/any/index.html&gt;.</p>

<p><i><B>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <b>hsutter@acm.org</b>.</i></p>
</BLOCKQUOTE></BODY></HTML>
