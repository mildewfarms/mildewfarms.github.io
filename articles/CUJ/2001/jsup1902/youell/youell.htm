<HTML>   
     <HEAD>
<TITLE>February 2001 Java Solutions/Creating Web Components with Java Server Pages</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjfeb.htm"></A><FONT COLOR="#FF0000">   Java</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Creating Web Components with Java Server Pages</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Youell</FONT></H3>

<BLOCKQUOTE>
<p>Scripting and Component-Based Development go hand in hand, but the key to effective scripting is to build components that are truly reusable.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>JSP (Java Server Pages) is the Java alternative to other web development solutions such as Microsoft&#146;s ASP (Active Server Pages) or Allaire&#146;s ColdFusion. Like these other technologies, JSP allows program code to be integrated directly with HTML. This integration helps make JSP a very flexible system for controlling a web application&#146;s presentation layer. This flexibility comes from the natural division of responsibilities: the Java code is responsible for generating and delivering data to the browser, while the HTML code is responsible for the formatting and presentation of that data. The sample JSP code in <a href="list1.htm">Listing 1</a> is a simple example of this division of responsibilities. (If you&#146;re unfamiliar with JSP, this should become clear after reading the <a href="sidebar.htm">&#147;JSP Basics&#148;</a> sidebar.)</p>
<p>Unfortunately, the flexibility that JSP provides is something of a double-edged sword. One of the biggest problems the JSP programmer faces is deciding whether the code belongs in the Java server page itself (the HTML with embedded JSP code) or in separate Java <B>.class</B> files that reside on the server. It is not uncommon to see even experienced JSP programmers creating complete applications entirely within the body of a single Java server page. This unfortunate approach seriously limits what a programmer can do when building an application.</p>
<p>One of the best ways to prevent this type of runaway coding is to use components. By using components, you can keep your JSP code short and sweet, and therefore more effective and less error prone. In this article I explain what a web component is, and then I walk through the steps of creating a Java component that can be used in JSP as well as Java servlets.</p>
<p>I will assume that you have some reasonable familiarity with Java. However, even if your only language is C++, you should still be able to understand most of what is going on. As with anything, hands-on trial and error is the best way to learn. So if you are interested in JSP, I seriously suggest that you get your hands on a JSP server and try running and tweaking the sample code that I present in this article.</p>

<H3><FONT COLOR="#000080">Web Components</FONT></H3>

<p>Component technology has been hyped in the press quite a bit lately. While most of the focus has been on components used in traditional applications, web applications can also benefit from component-based development. What makes a web component different from a regular component? The most significant difference is that web components must maintain their state throughout the run of a web &quot;application.&quot; Traditional components have this ability built into their environment, but unfortunately the stateless, back-and-forth nature of the web means that web components have to make a special effort to hold onto their data.</p>
<p>The web components utilized in JSP are simply Java classes that sit on the server. Of course, not all classes are components. Most server-side classes are simply custom classes that are specific to the particular application at hand. Web components usually transcend any one application, and instead provide a more general solution to a problem. For this example I&#146;ve chosen to create a generic GUI component that could appear in a wide range of applications. Many other components such as this can be built. Once you&#146;ve had a taste of component construction using Java and JSP, you should be able to create components of your own and share them with others.</p>

<H3><FONT COLOR="#000080">DatePulldown &#151; A Simple JSP Component</FONT></H3>

<p>I&#146;ll start off by creating a simple GUI component called <B>DatePulldown</B>. It will display the month, day, and year as a set of HTML pulldowns. <a href="list2.htm">Listing 2</a> shows the Java code for the component, and <a href="list3.htm">Listing 3</a> shows the JSP code that uses the component. As you can see from <a href="list3.htm">Listing 3</a>, very little Java code actually appears in the JSP file. This is as it should be, since you generally want to keep your JSP code as uncluttered as possible.</p>
<p>The Java class <B>GregorianCalendar</B>, provided in the <B>java.util</B> package, forms the core of this component. The <B>GregorianCalendar</B> class is handy for date storage and manipulation and I use it often. The <B>setDate</B> method of <B>DatePulldown</B> allows the date to be updated. <a href="list3.htm">Listing 3</a> shows how this function is called. First the servlet creates a <B>DatePulldown</B> object named <B>Pulldown</B>. Then it passes a <B>Date</B> object (also defined in <B>java.util</B>) into <B>Pulldown</B>&#146;s <B>setDate</B> method. (A default-constructed <B>Date</B> object is initialized to the current date.)</p>
<p>The servlet then sends the HTML text to the browser. It replaces the <B>&lt;%=Pulldown%&gt;</B> JSP directive with the contents of the <B>Pulldown</B> object &#151; more precisely, with the return value of <B>Pulldown.toString</B>. The <B>DatePulldown.toString</B> method generates HTML code to produce a date pulldown in the client&#146;s browser. <B>toString</B>, in case you weren&#146;t aware, is a method available in every Java object, which returns the string representation for that object. In this case, the string representation is the actual HTML that makes up the date pulldown component. This is handy, because <B>toString</B> is often called implicitly in Java. For instance, in <a href="list3.htm">Listing 3</a>, the line <B>&lt;%=Pulldown%&gt;</B> is simpler and more user-friendly than <B>&lt;%=Pulldown.toString()%&gt;</B> would have been.</p>
<p>The code that creates the month and day pulldowns is pretty simple. However, the year pulldown is a little more complicated. After all, there are only 12 months in a year, and at most 31 days in a month, but the number of years that could be displayed is unlimited. For this reason I&#146;ve created a 100-year window that starts with the current year and goes back 99 years. A more robust component might provide configuration methods to set that window, but for the purposes of this article I&#146;ve chosen to keep things simple.</p>

<H3><FONT COLOR="#000080">Remembering Input</FONT></H3>

<p>So far so good. With the JSP implemented in <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>, it is possible to display a date on the fly. The next step is to allow the user to change the date and have that change persist between trips to the server. In order to do this, the Java servlet must be able to retrieve values from the web server that the user filled out in the pulldowns.</p>
<p>JSP provides a built-in Java object named <B>request</B>, which is available to the servlet, and contains the information needed. There are several ways the servlet could use the <B>request</B> object. In the first example I created a new <B>Date</B> object and passed that into the <B>DatePulldown</B> object. To follow that precedent, I could extract the month, day, and year values from <B>request</B>, create a new <B>Date</B> object based on those values, and call <B>Pulldown.setDate</B> with the new <B>Date</B> object. That, however, is messy and doesn&#146;t contribute to the reusability of the <B>DatePulldown</B> class. Another way would be to create a new version of <B>setDate</B> that takes those month, day, and year values and creates the <B>Date</B> object internally. That is an improvement, but it&#146;s still more work than I&#146;d want to do.</p>
<p>Probably the best solution at this point is to take advantage of the Java Bean auto population feature in JSP. A Java Bean is basically just a Java class with traditional set/get accessor functions provided for its data members. These accessor functions must be named according to the convention <B>getXXX/setXXX</B> where <B>XXX</B> is the name of the data member to be accessed.</p>
<p>JSP provides a mechanism whereby the server automatically passes named values to Java Bean accessors that correspond to the value&#146;s name. For example, suppose the user submits an HTML form that contains an item called <B>firstName</B>. If you create one or more Java Beans that provide a <B>setFirstName</B> method, the server can be made to find and call this method on all the objects that you specify.</p>
<p>To make this work with <B>DatePulldown</B>, I added the methods <B>setMonth</B>, <B>setDay</B>, and <B>setMonth</B>. <a href="list4.htm">Listing 4</a> shows the additional code for <B>DatePulldown</B>, and <a href="list5.htm">Listing 5</a> shows the new JSP that calls <B>DatePulldown</B>. <a href="list5.htm">Listing 5</a> contains a couple of new tags. The <B>jsp:useBean</B> tag tells the server to create a Java Bean of type <B>DatePulldown</B> named <B>Pulldown</B>. The <B>setProperty</B> tag tells the server to set <I>all</I> the properties (<B>property="*"</B>) in the <B>Pulldown</B> object whose names match the items submitted in the HTML form. When the web browser submits the form containing the rendered <B>DatePulldown</B>, the values named <B>month</B>, <B>day</B>, and <B>year</B> are automatically passed into their corresponding methods. This prepares the <B>DatePulldown</B> component for rendering in exactly the same way that <B>setDate</B> did earlier.</p>

<H3><FONT COLOR="#000080">Creating Multiple Date Pulldowns</FONT></H3>

<p>If I only wanted to use one of these pulldown components per page, I&#146;d stop here. But what happens if I do want to use more than one <B>DatePulldown</B> component per page? With the current implementation I&#146;m out of luck because of the collisions that would happen between the month, day, and year value names for each pulldown. The conflicting values would be accepted on a first come, first served basis. That would result in all of the pulldowns displaying the exact same values. Clearly, that is unacceptable.</p>
<p>The best solution I have found involves giving each <B>DatePulldown</B> object a separate name, and prepending that name onto the value names generated for the form. So if I create a <B>DatePulldown</B> named <B>Pulldown1</B>, the resulting month value name will be named <B>Pulldown1.month</B>. Unfortunately, this approach will break the Java Bean auto population feature that I introduced in the last section. Losing the auto population feature means writing equivalent code to replace it. However, being able to use multiple <B>DatePulldown</B> instances in a particular page (for start and end dates, for example) would be very useful. So the tradeoff is probably worthwhile.</p>
<p>To implement this new scheme I add a new constructor that takes a component name as its only parameter. This allows multiple <B>DatePulldown</B>s to differentiate themselves from one another.</p>
<p>The only hitch at this point is encapsulating the code that reads and processes the form data for each <B>DatePulldown</B>. Happily, a simple solution presents itself in the form of the <B>request</B> object mentioned earlier. The <B>request</B> object is an instance of the Java class <B>HttpServletRequest</B>, and it can be used as a method parameter. The solution then, is to add an updated version of <B>setDate</B> that accepts an <B>HttpServletRequest</B> as a parameter. <a href="list6.htm">Listing 6</a> shows the new code that implements this functionality; <a href="list7.htm">Listing 7</a> shows the new code that uses it.</p>
<p>The new <B>setDate</B> method is smart enough to know when its associated pulldown has been named and when it hasn&#146;t. It automatically reads the proper values based on its name. This allows multiple <B>DatePulldown</B>s to peacefully coexist, but it also allows single instances of <B>DatePulldown</B> to forgo the naming, for simplicity.</p>
<p>That&#146;s as far as I&#146;ll take this particular component. I started off with what was essentially a &quot;one-off&quot; class, and through a few simple changes that class was upgraded into a far more reusable component. There is certainly more work that could be done on this code, but it provides a good example of the basic functionality that you should expect from the components that you create.</p>

<H3><FONT COLOR="#000080">Platform Info</FONT></H3>

<p>JSP is still a relatively young technology, so let the programmer beware. While there is an official JSP standard, I don&#146;t know of an implementation yet that is fully compliant. For the examples presented here I used the Jakarta Project&#146;s Tomcat JSP server from the Apache Group. See <B>http://jakarta.apache.org/</B>. In addition I used the IBM Java2 JDK v1.3 on Redhat Linux v6.2.</p>

<H3><FONT COLOR="#000080">Further Reading</FONT></H3>

<p>When I first started working with JSP there were no books dedicated to the subject on the market. Since then a ton of books have hit the market. Personally, I found Wrox Press&#146;s <I>Professional JSP</I> quite enlightening. And of course I would not touch a line of Java code without <I>The Java Class Libraries, Second Edition, Volume 1,</I> by Chan, Lee, and Kramer.</p>

<p><i><B>Matt Youell</B> is a software engineer specializing in object-oriented web development. Visit him on the web at <B>http://www.youell.com/matt</B>.</i></p>

<h4><a href="../../../source/2001/jfeb01/youell.zip"></a></h4>

</blockquote></body></html>
