<HTML>   
     <HEAD>
<TITLE>June 2001 C++ Experts Forum/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.06/tocjun.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Defining a Facet</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>The I/O portion of the Standard C++ library was designed to be extensible: it exposes what, in other libraries, would be internal components. You don't need to know anything about the library's architecture to write <b>std::cout &lt;&lt; &quot;Hello world&quot;</b>, but, for more complicated tasks, you can extend or modify almost every aspect of the standard I/O library. We've already seen several ways of extending the library's behavior. Locale facets provide another way.</p>

<H3><FONT COLOR="#000080">Using Locales</FONT></H3>

<p>A locale in C++ is an object of class <b>std::locale</b>. Every stream object has its own associated locale. You can get a copy of a stream's locale by writing <b>std::cout.getloc()</b>, and, if <b>L</b> is a locale object, you can tell a stream to use <b>L</b> by writing <b>std::cout.imbue(L)</b>. Note that telling <b>std::cout</b> to use <b>L</b> has no effect on other streams' locales.</p> 
<p>A different version of locales was originally introduced into ANSI C to support internationalization and localization, and locales continue to be used for those purposes in the Standard C++ library. The simplest way to use locales is to use the ones that the system already knows about. Simplest of all is the &quot;classic&quot; locale, returned by the static member function <b>std::locale::classic</b>. The &quot;classic&quot; locale is a basic locale that's suitable for simple English text; it corresponds to the way that the pre-ANSI C library behaved, and to ANSI C's <b>&quot;C&quot;</b> locale. By default, all of the standard stream objects use the &quot;classic&quot; locale.</p>
<p>You can also construct a locale object given a name. On IRIX, for example, a German locale is named <b>&quot;de&quot;</b>. Here's a simple test program that shows how to construct a locale by name:</p>


<pre>
#include &lt;locale&gt;
#include &lt;iostream&gt;

int main() {
  std::locale L(&quot;de&quot;);
  std::cout::imbue(L);
  std::cout &lt;&lt; 3.14 &lt;&lt; std::endl;
}
</pre>

<p>If you're on a system where <b>&quot;de&quot;</b> is a German locale <a href="#1">[1]</a>, then, when you compile and run the above program, the output should be &quot;3,14&quot;. The C++ I/O library delegates most of its formatting decisions to locale facets, so, when you tell <b>cout</b> to use a German locale, <b>cout</b> will use German conventions for formatting numbers.</p>
<p>This is all very similar to the C library's <b>setlocale</b> function. To use preexisting locales at the level of <b>setlocale</b>, there are just two more things to know &#151; both of which involve constructors. First, many operating systems allow users to specify a &quot;preferred&quot; locale. If you create a locale whose name is the empty string, as in <b>std::locale L(&quot;&quot;)</b>, it's supposed to be that preferred locale. (Exactly what it means to specify a preferred locale, of course, depends on your implementation.) Second, <b>std::locale</b> has a default constructor. You get to decide what the default locale is: if you write <b>std::locale::global(L)</b>, then, from that point on, any default-constructed locale will be a copy of <b>L</b>.</p>
<p>It's often useful to put these two features together.  If you put the following code fragment at the beginning of your program, it will create a locale that represents the user's preferences, set it to be the default, and tell the predefined stream objects to use that locale. (You can't omit that last step, because setting a new default doesn't affect whatever locales already exist.)</p>

<pre>
std::locale L(&quot;&quot;);
std::locale::global(L);
std::cin.imbue(L);
std::cout.imbue(L);
std::cerr.imbue(L);
std::clog.imbue(L);
</pre>

<H3><FONT COLOR="#000080">Locales and Their Facets</FONT></H3>

<p>What exactly is a locale object? You might reasonably assume that <b>std::locale</b> encapsulates data needed for localization and internationalization. That's not completely wrong, but it's not completely right either. True, <b>std::locale</b> does have a few localization-related member functions: if <b>L</b> is a locale, you can compare two strings by writing <b>L(s1, s2)</b>, you can test characters with <b>std::isupper(c, L)</b>, and so on. But functions like that are just frills, and <b>std::locale</b> would do just as well without them.</p>
<p>The surprising answer is that <b>std::locale</b> is a type-safe heterogeneous container class &#151; nothing more. Locales have very little to do with localization; all of the real work is performed by the objects contained in locales. Those objects are called facets.</p>
<p>Let's unpack that phrase. <i>Heterogeneous</i> means that the elements contained in an <b>std::locale</b> are of different types. (Contrast that to a homogeneous container like <b>std::vector&lt;int&gt;</b>, where every element is of type <b>int</b>.)  A <i>type-safe</i> container is one where type information isn't lost: when you look at an element in the container, it has the same type as it did when you put it in. (Contrast that to a framework where all of the elements appear to be of, say, type <b>Object*</b>, and where you have to downcast an element to do anything with it.)</p> 
<p>There are a number of ways to write a type-safe heterogeneous container class.  The method used in <b>std::locale</b> involves three further restrictions. First, once a locale has been constructed, there is no way to add new elements. Second, a locale can contain at most one element of a particular type. The type serves as a sort of index: you can write <b>std::has_facet&lt;T&gt;(L)</b> to ask a locale <b>L</b> if it has an element of type <b>T</b>, and, if it does, you can use <b>std::use_facet&lt;T&gt;(L)</b> to get a reference to that element. (If a locale has no element of type <b>T</b>, then <b>std::use_facet&lt;T&gt;(L)</b> will throw an exception.) Third, any type that you put in a locale object must inherit from the base class <b>std::locale::facet</b> and must contain a static member variable, called <b>id</b>, whose type is <b>std::locale::id</b>.</p> 
<p>These restrictions make it clear that <b>std::locale</b> doesn't have to work magic. The system uses the static <b>id</b> to associate every facet class with a unique integer index, and, because every facet inherits from <b>std::locale::facet</b>, a locale can internally store its facets in something like a <b>vector&lt;std::locale::facet*&gt;</b>. All <b>std::use_facet&lt;T&gt;(L)</b> has to do is find <b>T</b>'s index and look in the slot that corresponds to that index. If there's an object in that slot, then it must be safe for the system to cast that object to a <b>const T&amp;</b> <a href="#2">[2]</a>.  So long as you obey the restrictions in the last paragraph, however, you don't have to worry about the precise implementation details.</p>
<p>This mechanism works well with inheritance and polymorphism. Internally, <b>std::locale</b> maintains pointers to facets. Externally, when you write <b>std::use_facet&lt;T&gt;(L)</b>, you get a reference. Everything works just the same if you're dealing, not with <b>T</b> itself, but with one of <b>T</b>'s subclasses. Accordingly, most facet classes use virtual member functions. You can think of such facets as interfaces, designed for extension by inheritance.</p> 
<p>So what does all this machinery have to do with localization? Very little. It's all in the facets! The standard facets, which are contained in every locale object, include <b>std::ctype&lt;char&gt;</b> (which deals with character classification for <b>char</b>), <b>std::ctype&lt;wchar_t&gt;</b> (which does the same for wide characters), and <b>std::numpunct&lt;char&gt;</b> and <b>std::numpunct&lt;wchar_t&gt;</b> (which contain information for numeric formatting). These facets are used by the I/O portion of the Standard C++ library; other facets, like <b>std::collate&lt;char&gt;</b> (which provides string comparison and hashing), are supplied so you can use them in your own programs. In both cases, however, it's the facets contained in an <b>std::locale</b> object, not <b>std::locale</b> itself, that contain the information needed for localization.</p> 
<p>The Standard also defines some classes that  inherit from those facets and that are constructed by name. That's what <b>std::locale(&quot;de&quot;)</b> really means: you're getting a locale where the facet objects are <b>std::ctype_byname&lt;char&gt;(&quot;de&quot;)</b>, <b>std::numpunct_byname&lt;char&gt;(&quot;de&quot;)</b>, and so on. The fragment</p> 

<pre>
typedef std::numpunct&lt;char&gt; NP;
const NP&amp; np = std::use_facet&lt;NP&gt;(L);
char point = np.decimal_point();
</pre>

<p>invokes one of <b>numpunct's</b> virtual member functions <a href="#3">[3]</a>, and that member function is overridden in <b>numpunct_byname</b>.</p>

<H3><FONT COLOR="#000080">Overriding a Facet</FONT></H3>

<p>C++ locales were designed to be extensible in two ways: by deriving a new class from an existing facet, or by adding new kinds of facets. The Standard C++ library has already given us examples of the first method, the <b>*_byname</b> facets.</p>
<p>Suppose, for example, that you want to change the way that the library classifies characters. That's not so unlikely as it might seem, because the I/O library uses character classification for parsing.  The I/O library normally skips whitespace when it performs formatted input, and, when you're reading such objects as strings, the library stops when it sees whitespace. By default the whitespace characters are space, tab, newline, and a few less common control characters. And, of course, that behavior isn't always appropriate: in some applications <b>'\t'</b> is the only character that you want to treat as a delimiter, and <b>' '</b> should be treated as an ordinary character; in other applications, you might want to treat a character like <b>'_'</b> the same way as <b>' '</b>.</p>
<p>Character classification is handled by the <b>std::ctype&lt;char&gt;</b> facet. You can change the way that the I/O library classifies characters, by defining a class that inherits from <b>std::ctype&lt;char&gt;</b> and then using a locale where your derived class is substituted for the <b>ctype</b> base class.</p>
<p>The first step is to write the derived class. In this particular case, all of the work is in the constructor, rather than in overridden virtual member functions, because the C++ Standard mandates that <b>std::ctype&lt;char&gt;</b> uses a lookup table for character classification.  (This is a special optimization for <b>char</b>.  It wouldn't work for wide characters, because in general the lookup table would be too large.) The constructor simply makes a copy of the &quot;classic&quot; table and modifies table entries as appropriate. Here, for example, is a <b>ctype</b> subclass where the space character is no longer whitespace. </p>

<pre>
class my_ctype : public std::ctype&lt;char&gt; 
{
public:
  my_ctype(size_t refs = 0);
private:
  mask my_table[table_size];
};

my_ctype::my_ctype(size_t refs)
  : std::ctype&lt;char&gt;(my_table, false, refs)
{
  std::copy(classic_table(), 
            classic_table() + table_size,
            my_table);
  my_table[' '] = (mask) (print | punct);
}
</pre>

<p>There are a few things to notice about <b>my_ctype</b>.</p>
<p>First, we're using names that we inherit from the base class <b>std::ctype&lt;char&gt;</b>: <b>classic_table</b> (a static member function that returns a pointer to the beginning of the &quot;classic&quot; locale's lookup table), <b>table_size</b> (the number of elements in the table), <b>mask</b> (an enum type), and two of <b>mask</b>'s enumerators, <b>print</b> and <b>punct</b>. Each character's entry in the lookup table is a value of type <b>mask</b>.</p> 
<p>We're also inheriting the static member variable <b>id</b> from the base class, instead of defining <b>id</b> ourselves. That's important. We want the system to put <b>my_ctype</b> in the same slot that it would normally use for <b>std::ctype&lt;char&gt;</b>, so the two must use the same <b>id</b>.</p> 
<p>Second, we're setting the character classification table to <b>my_table</b>, instead of the default table, by passing <b>my_table</b> as an argument to the base class's constructor. The second base class constructor argument, <b>false</b>, is related: it tells the base class that it doesn't need to delete the table that we're passing to it in the first argument. If we had been using dynamically allocated memory for the table, then we could have written <b>true</b> instead, in which case the base class's destructor would have invoked <b>delete[]</b> on the table.</p>
<p>Third, we've given our constructor an argument, <b>refs</b>, that has no apparent purpose, and we're passing it to the base class. The <b>refs</b> argument is related to a fact about C++ locales that I haven't mentioned, but that you might have already guessed on your own: facets that are installed into locales are reference counted. If you think about how locales are implemented, you'll see that locales almost have to use reference counting. After all, <b>std::locale</b> has a copy constructor; what should <b>std::locale L2(L1)</b> do with <b>L1</b>'s facets? The only reasonable answer &#151; and the answer that the C++ Standard gives &#151; is that <b>L2</b> should use the same facet objects as <b>L1</b>. </p>
<p>The implementation keeps track of how many locales are using a particular facet object.  Usually, once no locales are using a facet object anymore, the system destroys that facet. However, the library gives you a choice: you can tell it not to destroy a facet, even when that facet isn't being used anymore. The base class <b>std::locale::facet</b> has a constructor that takes an argument of type <b>size_t</b>. If that argument is zero &#151; the default &#151; then reference counting works the usual way.  If the argument is nonzero, then the system won't ever destroy the facet. All of the standard facets, including <b>std::ctype&lt;char&gt;</b>, have a constructor that takes a <b>refs</b> argument and passes that argument to the facet base class.</p>
<p>We didn't have to define a constructor that took a <b>refs</b> argument: we could have just decided on a definite memory allocation policy. But giving users the choice of memory allocation policy takes no extra effort, so there's no reason not to do it. (You might wonder why you'd ever want to have a facet object that doesn't get destroyed automatically. Again, it's because you don't have to use dynamic memory allocation: it's occasionally convenient to have a facet that's defined as a file-scope variable.)</p> 
<p>Once we've defined <b>my_ctype</b>, the next step is to install it into a locale. There's no member function that will let us add a facet to an existing locale, but there's a constructor that lets us do the next best thing: create a copy of an existing locale that uses a new facet. Here we're creating a locale <b>L</b> that's just like the &quot;classic&quot; locale except that it uses <b>my_ctype</b> instead of the default <b>std::ctype&lt;char&gt;</b>:</p>

<pre>
std::locale L(std::locale::classic(), 
              new my_ctype);
</pre>

<p>(Since facets are reference-counted, we can create a <b>my_ctype</b> with <b>new</b> and not worry about deleting that object ourselves.)</p>
<p>Finally, now that we have a locale that uses our new facet, we can install that locale into a stream object. Here's a small test program that shows what happens:</p> 

<pre>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;locale&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;

class my_ctype : public
std::ctype&lt;char&gt;
{
public:
 my_ctype(std::size_t refs = 0);
private:
 mask my_table[table_size];
};

my_ctype::my_ctype(std::size_t
refs)
 : std::ctype&lt;char&gt;(my_table, false, refs)
{
 std::copy(classic_table(),
           classic_table() + table_size,
           my_table);
 my_table[' '] = (mask) (print | punct);
}

int main()
{
 std::istringstream in(&quot;one two\tthree four&quot;);
 std::locale L(std::locale::classic(),
               new my_ctype);
 in.imbue(L);

 std::string s;
 while (in &gt;&gt; s)
    std::cout &lt;&lt; s &lt;&lt; std::endl;
}
</pre>

<p>When you compile and run this program, the output will be</p>

<pre>
one two
three four
</pre>

<p>The tab character is still treated as a delimiter, but, because of the new <b>ctype</b> facet, the space characters are not. </p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>A facet can be as simple, or as complicated, as you need it to be. There are only two requirements: a facet must inherit from the base class <b>std::locale::facet</b>, and it must have a public static member variable <b>id</b>, either directly or by inheritance, whose type is <b>std::locale::id</b>. So, for example, the following class is a complete facet. (We don't need to declare a virtual destructor, since we're inheriting one from <b>std::locale::facet</b>.)</p>


<pre>
class msg : public std::locale::facet
{
private:
  std::string str;
public:
  static std::locale::id id;
  msg(const std::string&amp; s, 
      std::size_t refs = 0)
    : std::locale::facet(refs), str(s)
  { }

  std::string get() const { 
    return str; 
  }
};

std::locale::id msg::id;
</pre>

<p>This simple <b>msg</b> facet might even sometimes be useful: since every stream object has a locale, <b>msg</b> allows you to associate a unique <b>string</b> tag with every stream. You could write a manipulator to access that tag:</p>

<pre>
std::ostream&amp; tag(std::ostream&amp; os) 
{
  std::string s = 
    std::has_facet&lt;msg&gt;(os.getloc())
    ? std::use_facet&lt;msg&gt;(os.getloc()).get()
    : std::string(&quot;*DEFAULT*&quot;);
  os &lt;&lt; s;
  return os;
}
</pre>

<p>There are no real limits on how sophisticated a facet can be. You might reasonably define a facet to represent time zones, to represent the different ways of displaying personal names, or to format the ubiquitous <b>Employee</b> class that shows up in so many C++ examples. The output operator itself, <b>operator&lt;&lt;</b>, could become a wrapper function that finds the appropriate facet and then delegate all of the real work to that facet. Here's what the I/O delegation pattern looks like:</p>


<pre>
class Employee_fmt 
  : public std::locale::facet
{
protected:
  ... // Formatting information 
public:
  static std::locale::id id;
  Employee_fmt(std::size_t refs = 0);

  virtual std::istream&amp; 
  get(std::istream&amp;, Employee&amp;) const;

  virtual std::ostream&amp; 
  put(std::ostream&amp;, const Employee&amp;) const;
};

std::istream&amp; 
operator&gt;&gt;(std::istream&amp; is, Employee&amp; e)
{
  std::locale L = is.getloc();
  const Employee_fmt&amp; fmt = 
    std::has_facet&lt;Employee_fmt&gt;(L)
    ? std::use_facet&lt;Employee_fmt&gt;(L) 
    : Employee_fmt();
  return fmt.get(is, e);
}

std::ostream&amp; 
operator&lt;&lt;(std::ostream&amp; os, const Employee&amp; e)
{
  std::locale L = os.getloc();
  const Employee_fmt&amp; fmt = 
    std::has_facet&lt;Employee_fmt&gt;(L)
    ? std::use_facet&lt;Employee_fmt&gt;(L) 
    : Employee_fmt();
  return fmt.put(os, e);
}
</pre>

<p>This is an example of what Andrew Koenig calls the &quot;fundamental theorem of software engineering&quot;: Every problem can be solved with an extra level of indirection.  The <b>Employee_fmt</b> facet can use some reasonable formatting defaults, but users who need fine control over formatting can define their own derived classes that inherit from <b>Employee_fmt</b> just as <b>my_ctype</b> inherits from <b>std::ctype&lt;char&gt;</b>. The insertion and extraction operations will transparently use the derived class.</p> 
<p>Numeric formatting in the Standard C++ library uses this same I/O delegation pattern: for numeric I/O, <b>operator&lt;&lt;</b> and <b>operator&gt;&gt;</b> are wrappers that pass their arguments to the <b>std::num_put</b> and <b>std::num_get</b> facets. (The exact details are slightly different for standard numeric I/O than for our <b>Employee</b> example, but only slightly: <b>num_get</b> and <b>num_put</b> operate on streambuf iterators instead of on streams. This mainly affects the details of error handling.)</p> 
<p>At this point, you might be wondering how to reconcile the use of facets with my advice from an earlier column <a href="#4">[4]</a>. When should you define a facet, and when should you instead use <b>iword</b>/<b>pword</b> and <b>xalloc</b> to define a format flag?</p>
<p>If you're writing an input or output operator whose behavior can be parameterized with a single boolean flag or a single integer argument, then you should use <b>iword</b>; that's what it's for. If there are multiple choices, or if there's a choice that's too complicated to describe in a straightforward manner as an integer or a boolean, or if you don't think you can foresee all of the possible choices that users might want in the future, then you should use a facet. Naive users can ignore facets, and sophisticated users can subclass and replace facets as needed.</p>
<p>My advice for when to use <b>pword</b>: never. You can use <b>pword</b> to associate a stream with a string or some other arbitrary object, but I can't think of any circumstances in which it would be a good idea. If you're dealing with such a complicated problem that you'd be tempted to use <b>pword</b>, you should define a facet instead. Our <b>msg</b> facet is far simpler than the equivalent <b>pword</b>-based solution, and far easier to extend.</p> 
<p>Locales, and their facets, are fundamental to I/O in the Standard C++ library. The library uses facets to decide which characters are whitespace, to format numbers, and to convert characters between their internal and external encodings. It provides facets that format money and time and date. The Standard documents exactly how and when the facets are used; by design, you can change the behavior of the library by replacing a facet.  Locales are an extremely general mechanism, however, and the standard facets are just examples. Whenever you have customizable data, and whenever you deal with formatting in a way that you think a user might need to change, you should consider expressing it as a facet.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Alas, locale names aren't standardized. If you're using Borland C++ on Windows, for example, you'll need to say <b>&quot;German&quot;</b> instead of <b>&quot;de&quot;</b>. You should check your system's documentation for available locale names.</p>
<p><a name="2"></a>[2]  For more information about implementing <b>std::locale</b> see Nathan Myers, &quot;The Standard C++ Locale,&quot; <i>Dr. Dobbs Journal</i>, August 1998.</p>
<p><a name="3"></a>[3]  That virtual member function isn't actually <b>decimal_point</b> itself, but a protected member function called <b>do_decimal_point</b>. All of the standard facets use that style: they have protected virtual member functions, which are called by public nonvirtual member functions.</p> 
<p><a name="4"></a>[4]  Matt Austern. &quot;The Standard Librarian: User-Defined Format Flags,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, February 2001 <b>http://www.cuj.com/experts/1902/austern.htm</b>.</p>


<p><i><B>Matt Austern</B>  is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <b>austern@research.att.com</b>.</i></p>
</BLOCKQUOTE></BODY></HTML>
