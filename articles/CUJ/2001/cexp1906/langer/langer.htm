<HTML>   
     <HEAD>
<TITLE>June 2001 C++ Experts Forum/Effective Standard C++ Library</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.06/tocjun.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Effective Standard C++ Library: Curiously Recurring Manipulators</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Klaus Kreft and Angelika Langer</FONT></H3>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Using Modern Programming Techniques for Implementation of Stream Manipulators</FONT></H3>

<p>Let us revisit stream manipulators. We explained them in two articles in <i>C++ Report</i> last summer [<a href="#1">1</a>, <a href="#2">2</a>]. The techniques that we demonstrated for implementation of stream manipulators were inspired by classic programming techniques that have traditionally been used to implement manipulators using the classic, pre-standard IOStreams library. We took those old ideas, twisted and tweaked them a little bit, and made them work with the new templatized standard IOStreams classes. The resulting solution works, but it turned out that the classic techniques did not seamlessly fit into the context of a library of templates &#151; and almost all standard stream classes are templates these days.</p>
<p>For those readers who cannot recall the two reference articles, we will give a brief recap of the classic-inspired solution and its downside in a minute. (Similar ground is covered in our IOStreams book (see <a href="#3">[3]</a> on page 176ff.) But what we really want to discuss in this installment of our column is not manipulators again, but application of more modern programming techniques for implementing stream manipulators in a significantly more elegant way. We will be using template programming techniques and in particular the Curiously Recurring Template pattern <a href="#4">[4]</a>, which is also referred to as <i>parameterized inheritance</i>. And we want to demonstrate how useful function object types can be.</p>

<H3><FONT COLOR="#000080">Recap: Implementing Manipulators with Parameters &#151; The Old-Style Approach</FONT></H3>

<p>A stream manipulator is an object that we can insert into an output stream or extract from an input stream. The effect of this insertion or extraction is a manipulation of the stream. An example is the widely known <b>endl</b> manipulator. Here is the classic example of its use:</p>

<pre>
cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;
</pre>

<p>The <b>endl</b> manipulator is an object that can be inserted into an output stream; the effect of which is insertion of an end-of-line character into the stream and subsequent flushing of the stream buffers. There are countless further pre-defined manipulators in the standard IOStreams library, such as <b>boolalpha</b> for switching from numeric to textual display of Boolean values, <b>noskipws</b> for suppressing white-space-skipping on input, or <b>setw(n)</b> for setting the field width for subsequent output.</p>

<H4><FONT COLOR="#000080">User-Defined Stream Manipulators</FONT></H4>

<p>The IOStreams library is extensible, and we can add user-defined special-purpose manipulators.  As an example, let us implement a multi-end-of-line manipulator, pretty much like the standard manipulator <b>endl</b>, but with the additional capability of inserting an arbitrary number of end-of-line characters:</p>

<pre>
cout &lt;&lt; mendl(5);
</pre>

<p>Implementing such a stream manipulator is pretty straightforward. Here is a solution:</p>

<pre>
class mendl {
public:
   explicit mendl(unsigned int i) : i_(i) {}
private:
   const unsigned int i_;


   template &lt;class charT, class Traits&gt;
   friend basic_ostream&lt;charT,Traits&gt;&amp;
   operator&lt;&lt;(basic_ostream&lt;charT,Traits&gt;&amp; os
            , const mendl&amp; w)
   { for (int i=0; i&lt;w.i_; ++i)
        os.put(os.widen('\n')); 
     os.flush();
   }
};
</pre>

<p>We must provide an inserter, that is, an overloaded version of <b>operator&lt;&lt;</b>, that allows insertion of an object of type <b>mendl</b> into an output stream and performs the desired manipulation of the stream. The inserter is implemented as a friend of class <b>mendl</b>. An expression such as <b>mendl(5)</b> is the construction of an unnamed object of type <b>mendl</b>, with the integer literal <b>5</b> as the constructor argument. The constructor argument is stored as a data member and later used to perform the manipulation. That's one of the classic ways of implementing stream manipulators with arguments.</p>

<H4><FONT COLOR="#000080">Factoring out Common Code into a Manipulator Base Class</FONT></H4>

<p>Now, manipulators have a lot in common, and in order to avoid redundancies, we aimed to factor out all IOStreams-specific tasks into a manipulator base class. These IOStreams-specific chores can for instance include proper error and exception handling, which uses the stream state judiciously, pays attention to the stream's exception mask, and does everything in perfect conformance with the IOStreams policies. For our purposes in this article, we omit the error and exception handling functionality that the manipulator base class could add. For the missing details, see page 186ff in our IOStreams book <a href="#3">[3]</a>. The manipulator base class is called <b>one_arg_manip_weh</b> and is designed as a base class for output stream manipulators that have one argument, like <b>mendl</b>. Here is a sketch of the implementation:</p>

<pre>
template &lt;class charT, class Traits, class Argument&gt; 
class one_arg_manip_weh {
public:
 typedef void (* manipFct)(basic_ostream&lt;charT,Traits&gt;&amp;, Argument);
 one_arg_manip_weh(manipFct pf, const Argument&amp; arg)
 : pf_(pf), arg_(arg), error_(ios_base::goodbit) {}
private:
 manipFct pf_;
 const Argument arg_;
 ios_base::iostate error_;
    
friend
void do_manip(basic_ostream&lt;charT,Traits&gt;&amp; str,
              const one_arg_manip_weh&lt;charT,Traits, Argument&gt;&amp; oamw);
};


template &lt;class charT, class Traits, class Argument&gt;
void do_manip(basic_ostream&lt;charT,Traits&gt;&amp; str,
              const one_arg_manip_weh&lt;charT,Traits, Argument&gt;&amp; oamw)
{
// do lots of stuff, and in particular call the manipulation function
  ...
  oamw.pf_(str,oamw.arg_);
  ...
}

template &lt;class charT, class Traits, class Argument&gt;
basic_ostream&lt;charT,Traits&gt;&amp; operator&lt;&lt; 
(basic_ostream&lt;charT,Traits&gt;&amp; os, 
 const one_arg_manip_weh&lt;charT,Traits,Argument&gt;&amp; oamw)
{
 if(os.good())
    do_manip&lt;charT,Traits,Argument&gt;(os,oamw);
 return os;
}
</pre>

<p>Again, this solution is modeled after classic IOStreams solutions. In fact, you will find a similar base class in the IOStreams library, often named <b>smanip</b> or <b>_Smanip</b> or the like, which is used for implementation of the pre-defined standard manipulators with parameters such as <b>setw(n)</b> for instance. The key idea here is that the manipulator base class stores the manipulator argument and a function that performs the actual manipulation. The manipulator base class provides the required overloaded shift operators and implements them by calling the manipulation function with the stored argument. Note, that the manipulator function is represented in the form of a function pointer. That's a classic C/C++ technique of passing around functions.</p>
<p>Using this base class, we could re-implement the <b>mendl</b> manipulator as follows:</p>

<pre>
template &lt;class charT,class Traits=char_traits&lt;charT&gt; &gt;
class mendl 
: public one_arg_manip_weh&lt;charT,Traits,unsigned int&gt;
{public:
  explicit mendl(unsigned int i) 
  : one_arg_manip_weh&lt;charT,Traits,unsigned int&gt;(mendl::fct,i)
  { }
 private:
  static void fct (basic_ostream&lt;charT,Traits&gt;&amp; os, 
                   unsigned int n) 
  { for (int i=0; i&lt;n; ++i)
        os.put(os.widen('\n')); 
    os.flush();
  }
};
</pre>

<p>For better encapsulation, we provide the required manipulation function as a static member function of class <b>mendl</b> and pass the pointer to that function to the manipulator base class along with the argument that must later be passed to the function when it is invoked.</p>

<H4><FONT COLOR="#000080">The Caveat</FONT></H4>

<p>So far so good. But now we face a minor inconvenience that stems from the fact that the standard IOStreams classes are templates taking the character type as a template argument. In order to make the manipulator base class universally applicable, that is, to all kinds of streams regardless of their character type, the manipulator base class is a template, too. Consequently, the derived manipulator class <b>mendl</b> is a class template as well.</p>
<p>With <b>mendl</b> being a template, the manipulator expression is less convenient than it used to be. Each time we manipulate a stream by inserting a <b>mendl</b> object, we need to know the character type of that stream. Instead of simply saying:</p>

<pre>
cout &lt;&lt; mendl(5); // wrong ! &#151; does not compile
wcout &lt;&lt; mendl(5); // wrong ! &#151; does not compile
</pre>

<p>we now have to specify the template arguments and say:</p>

<pre>
cout &lt;&lt; mendl&lt;char&gt;(5);
wcout &lt;&lt; mendl&lt;wchar_t&gt;(5);
</pre>

<p>That's ugly. How did that happen? Look at our manipulation function <b>mendl::fct</b>. It calls the stream function <b>flush</b>, which is a member function of output streams, that is, of streams derived from class <b>basic_ostream&lt;charT,Traits&gt;</b>. For this reason, it must take a <b>basic_ostream&lt;charT,Traits&gt;&amp;</b> as an argument, and since it is a static member function of class <b>mendl</b>, it turns the entire class into a class template. There is no way to avoid the templatization of class <b>mendl</b> with this approach.</p>
<p>In addition, our manipulator base class has other deficiencies: it can only serve as a base class for manipulators with exactly one argument, because it has only one data member for storing arguments and it is tied to a specific function signature for declaring the function pointer type.</p>
<p>Can we find an alternative and more flexible solution for the manipulator base class?  The goal is to provide a manipulator base class that does not require the manipulator type to be a template and allows manipulators with an arbitrary number and type of arguments. The intended usage for manipulators implemented in terms of this new manipulator base class should ideally be as convenient as:</p>

<pre>
cout &lt;&lt; mendl(5);
wcout &lt;&lt; mendl(5);
cout &lt;&lt; multi('*',80);
</pre>

<p>where <b>multi</b>  is a manipulator with two arguments that insert a given character n times into an output stream.</p>

<H3><FONT COLOR="#000080">Implementing Manipulators with Parameters &#151; The Modern Approach</FONT></H3>

<p>In order to find a better solution, let us look at the original solution again. Here is our original base class template:

<pre>
template &lt;class charT, class Traits, class Argument&gt; 
class one_arg_manip_weh {
public:
 typedef void (* manipFct)(basic_ostream&lt;charT,Traits&gt;&amp;, Argument);
 one_arg_manip_weh(manipFct pf, const Argument&amp; arg)
 : pf_(pf), arg_(arg), error_(ios_base::goodbit) {}
private:
 manipFct pf_;
 const Argument arg_;
 ... 
friend
void do_manip(basic_ostream&lt;charT,Traits&gt;&amp; str,
              const one_arg_manip_weh&lt;charT,Traits, Argument&gt;&amp; oamw);
};

template &lt;class charT, class Traits, class Argument&gt;
void do_manip(basic_ostream&lt;charT,Traits&gt;&amp; str,
              const one_arg_manip_weh&lt;charT,Traits, Argument&gt;&amp; oamw)
{  ... oamw.pf_(str,oamw.arg_); ...  }

template &lt;class charT, class Traits, class Argument&gt;
basic_ostream&lt;charT,Traits&gt;&amp; operator&lt;&lt; 
(basic_ostream&lt;charT,Traits&gt;&amp; os, 
 const one_arg_manip_weh&lt;charT,Traits,Argument&gt;&amp; oamw)
{
 if(os.good())
    do_manip&lt;charT,Traits,Argument&gt;(os,oamw);
 return os;
}
</pre>

<H4><FONT COLOR="#000080">Replacing Function Pointers by Function Objects</FONT></H4>

<p>The manipulator base class stores a pointer to the manipulation function and the argument and later uses both in the shift operator for performing the actual manipulation by invoking the manipulation function with its argument (indirectly via the helper function <b>do_manip</b>). Instead of using a function pointer, we could use a function object.</p>
<p>What is a function object? It is an object that can be called. What does it mean to call a function object? It means invocation of a member function of the respective function object type. Often this member function is an overloaded version of the function call operator, which is just a special case that allows for function call syntax. It is not required, and in our examples below, we will use a member function named <b>fct</b> instead.</p>
<p>Where is the advantage over a function pointer? A function object can know how to &quot;call itself.&quot; In particular, it could store the parameters that control the manipulation as data members. When we invoke a function through a pointer, then we have to provide the function argument separately. In contrast, when we invoke a function object, then this invocation is a call to a member function, which has access to the function object's data members. The information that is provided in form of the function argument (in the pointer solution) could already be contained in the function object as a data member. Let us see how this can be done.</p>
<p>Here is the old implementation of <b>mendl</b>, where the manipulation function is a static member function that takes one argument, namely the number of times it must print the end-of-line character:</p>

<pre>
template &lt;class charT,class Traits=char_traits&lt;charT&gt; &gt;
class mendl 
: public one_arg_manip_weh&lt;charT,Traits,unsigned int&gt;
{public:
  explicit mendl(unsigned int i) 
  : one_arg_manip_weh&lt;charT,Traits,unsigned int&gt;(mendl::fct,i)
  { }
 private:
  static void fct (basic_ostream&lt;charT,Traits&gt;&amp; os, 
                   unsigned int n) 
  { for (int i=0; i&lt;n; ++i)
        os.put(os.widen('\n')); 
    os.flush();
  }
};
</pre>

<p>Note, that the constructor of <b>mendl</b> receives the integral value as an argument that will later be passed as a function argument to the static member function <b>mendl::fct</b>. This integral value is handed over to the manipulator base class along with the pointer to the static member function <b>mendl::fct</b>.</p> 
<p>If we implemented <b>mendl</b> as a function object type, then it could look like this:</p>

<pre> 
class mendl : public <i>manipBase</i> {
public:
   mendl(unsigned int n) 
   : <i>manipBase(...)</i>, how_many_(n) {}
private:
   const unsigned int how_many_;
public:
   template &lt;class Ostream&gt;
   Ostream&amp; fct(Ostream&amp; os) const
   {
      for (unsigned int i=0; i&lt;how_many_; ++i)
         os.put(os.widen('\n'));
      os.flush();
      return os;
   }
};
</pre>

<p>The constructor of <b>mendl</b> still receives the integral value that will later be passed as a function argument to the member function <b>fct</b>. But this time, it stores the integral value as a data member and uses this data member in the implementation of its non-static member function <b>fct</b>.</p>

<H4><FONT COLOR="#000080">Implementing the New Manipulator Base Class</FONT></H4>

<p>We've left open so far what the manipulator base class would then look like. Obviously it does not have to store the function argument any longer, since the <b>mendl</b> object knows itself how many times it must print the end-of-line character. All that the base class needs for performing the manipulation is a <b>mendl</b> object whose member function <b>fct</b> performs the manipulation. Instead of providing a function pointer to the base class, we pass the manipulator object itself to the base class:</p>

<pre>
class mendl : public <i>manipBase</i> {
public:
   mendl(unsigned int n) 
   : <i>manipBase</i>(<b>*this</b>), how_many_(n) {}
private:
   const unsigned int how_many_;
public:
   template &lt;class Ostream&gt;
   Ostream&amp; fct(Ostream&amp; os) const;
};
</pre>

<p>The manipulator base class must have a constructor that receives the manipulator function object and stores it somewhere. We'll look into the details of storing and accessing the function object later.</p>
<p> Ideally, the manipulator base class should work with all types of manipulators, and this is easily achievable by making it a template that takes the manipulator type as a template parameter.</p>
<p> In addition, the manipulator base class must provide the required shift operator for manipulator objects. As before, we implement the shift operator in terms of a helper function that does the actual work. The helper function was formerly named <b>do_manip</b>; we renamed it to <b>manipulate</b> for better distinction. The helper function performs the manipulation by invoking the manipulator function object, (that is, its member function <b>fct</b>), which was previously done through the function pointer, and does all the other interesting IOStream-specific things exactly as before.</p>
<p> Here is tentative implementation of the manipulator base class <b>manipBase</b>:</p>

<pre>
template &lt;class Manip&gt; 
class manipBase
{public:
    manipBase(const Manip&amp; m) 
    { // receive manipulator function object and store it somehow
      // details later ... 
    }
    template &lt;class Stream&gt;
    Stream&amp; manipulate(Stream&amp; str) const
    { // use the manipulator function object and call its fct() member function
      // details later ...
    }
 private:
    // private data considered later ...
};
template &lt;class Ostream, class Manip&gt;
Ostream&amp; 
operator&lt;&lt; (Ostream&amp; os, const manipBase&lt;Manip&gt;&amp; m)
{ return m.manipulate(os); }
</pre>

<p>We introduced another minor change: we reduced the number of template parameters of the shift operator. Previously it had the character type and the character traits type as template parameters; now we use the stream type instead.</p>  

<H4><FONT COLOR="#000080">Accessing the Manipulator Function Object inside the Manipulator Base Class</FONT></H4>

<p>Where do we store the manipulator function object? We could try to store it as a data member of the manipulator base class, like this:</p>

<pre>
template &lt;class Manip&gt; 
class manipBase
{public:
    manipBase(const Manip&amp; m) : m_(m) {}

    template &lt;class Stream&gt;
    Stream&amp; manipulate(Stream&amp; str) const
    { // calls the manipulators's function fct()
      // ... m_.fct() ...
    }
 private:
    Manip m_;
};
</pre>

<p>This approach does not work because it introduces a circular type dependency. Since <b>manipBase</b> is a template, class <b>mendl</b> would be defined as:</p>

<pre>
class mendl : public <b>manipBase&lt;mendl&gt;</b> {
public:
   mendl(unsigned int n) 
   : manipBase&lt;mendl&gt;(*this), how_many_(n) {}
private:
   const unsigned int how_many_;
public:
   template &lt;class Ostream&gt;
   Ostream&amp; fct(Ostream&amp; os) const;
};
</pre>

<p>The derived manipulator class <b>mendl</b> uses class <b>manipBase</b> as its base class passing its own type as template argument to the base class. The compiler cannot resolve the circular dependency between the two types.</p>
<p>If we cannot store the manipulator function object as a data member and use delegation to the data member for performing the actual manipulation, we can alternatively take advantage of the fact that <b>manipBase</b> is a manipulator <i>base</i> class. Its sole purpose is to serve as a base class for manipulator types that have a public member function <b>fct</b>, which performs the actual manipulation.</p>  
<p>It is not intended that we ever create objects of the base class type, because it does not provide any meaningful functionality by itself. Its purpose is to decorate the actual manipulation, which is provided by the derived manipulator type, with IOStream-specific error handling. For this reason, we can safely assume that all references to <b>manipBase</b> objects are actually references to derived manipulator objects. For instance, inside the shift operator, which takes a <b>manipBase&amp; </b>argument, we would know that the reference refers to a concrete derived manipulator object. Under these circumstances, we can safely cast down from the base class reference to the concrete derived class reference. With this downcast, we get access to the actual manipulation functionality, namely member function <b>fct</b>. Here is what it looks like:</p>

<pre>
template &lt;class Manip&gt; class manipBase {
public:
 template &lt;class Stream&gt;
 Stream&amp; manipulate(Stream&amp; str) const
 { ...
   // call Manip::fct()
   <b>static_cast&lt;const Manip&amp;&gt;(*this).fct(str);</b>
   ...
 }
};
template &lt;class Ostream, class Manip&gt;
Ostream&amp; 
operator&lt;&lt; (Ostream&amp; os, const manipBase&lt;Manip&gt;&amp; m)
{ return m.manipulate(os); }
</pre>

<p>The obvious concern here is: can this crash? After all this is not even a safe <b>dynamic_cast</b>, but an unsafe static downcast. The answer is: no, it is perfectly safe. The only location where <b>manipBase</b>'s member function <b>manipulate</b> is invoked is from within the shift operator. In this context, <b>manipulate</b> is invoked on a reference to an object of type <b>manipBase</b> itself or any type derived thereof. Otherwise the invocation of the shift operator would just not compile. If the object is of a derived type, then the downcast is safe.</p>
<p>Can it happen that the referenced object passed to the shift operator is just a base class object, and not a derived class object? Well, would that make sense? The only accessible functionality of class <b>manipBase</b> is its <b>manipulate</b> function, and this member function will only compile if the generic type <b>Manip</b> (the template type argument) has a <b>fct</b> member function. Theoretically, <b>Manip</b> could be a type that is unrelated to class <b>manipBase</b> and has a <b>fct</b> member function, but in that case a reference to an object of the <b>Manip</b> type cannot be passed to the shift operator, and the <b>manipulate</b> function will never be called. Unless you introduce evil <b>reinterpret_cast</b>s someplace, you cannot break this code.</p>

<H3><FONT COLOR="#000080">Evaluation</FONT></H3>

<p>Let's step back and see what we've done. We've been using two interesting techniques here: parameterized inheritance and function objects.

<H4><FONT COLOR="#000080">Parameterized Inheritance</FONT></H4>

<p>Parameterized inheritance is also known as the Curiously Recurring Template pattern, which can be summarized as follows (quoted from the Pattern Almanac <a href="#5">[5]</a>):</p>

<BLOCKQUOTE>
<p>A class is derived from a base class instantiated from a template. The derived class is passed as a parameter to the template instantiation. This pattern captures a circular dependency using inheritance in one direction and templates in the other.</p>
</BLOCKQUOTE>

<p>Our manipulator base class <b>manipBase</b> and its concrete derived classes, such as <b>mendl</b> are an example of this pattern: the derived manipulator type <b>mendl</b> passes itself as a template argument to its base class <b>manipBase</b>. The use of the safe static downcast is typical for implementation of this pattern. </p>
<p>You can also think of the Curiously Recurring Template pattern as a way of static polymorphism: Our manipulator base class <b>manipBase</b> exhibits polymorphic behavior (in its member function <b>manipulate</b>) depending on the type that was used for instantiation. It's a <i>static</i> polymorphism because no virtual functions are involved.</p>

<H4><FONT COLOR="#000080">Function Objects</FONT></H3>

<p>Replacing function pointers with function objects greatly simplified the solution and added a lot of flexibility. For instance, all the knowledge regarding invocation of the actual manipulation is now encapsulated in the function object type only. Previously, the function signature (number and type of arguments) of the manipulation function was known to the base class, and we needed a different base class for every new signature. The same holds for the function arguments. Knowledge of the parameters that control the manipulation is now located in the function object type only. Previously, these parameters had to be passed to the base class. This better separation of concerns frees the base class from various responsibilities. In particular, the base class is no longer a template that depends in any way on the stream type.</p>
<p>Our initial goal was to find a more flexible solution for the manipulator base class that  does not require that a manipulator type is a template and allows manipulators with an arbitrary number and type of arguments. The intended usage for manipulators implemented in terms of this new manipulator base class should ideally be as convenient as:</p> 

<pre>
cout &lt;&lt; mendl(5);
wcout &lt;&lt; mendl(5);
cout &lt;&lt; multi('*',80);
</pre>

<p>where <b>multi</b>  is a manipulator with two arguments that insert a given character n times into an output stream.</p>
<p> Have we achieved this? Yes, we did. Recall the implementation of <b>mendl</b> using the new <b>manipBase</b> class:</p>

<pre>
class mendl : public manipBase&lt;mendl&gt; {
public:
   mendl(unsigned int n) 
   : manipBase&lt;mendl&gt;(*this), how_many_(n) {}
private:
   const unsigned int how_many_;
public:
   template &lt;class Ostream&gt;
   Ostream&amp; fct(Ostream&amp; os) const
   {
      for (unsigned int i=0; i&lt;how_many_; ++i)
         os.put(os.widen('\n'));
      os.flush();
      return os;
   }
};
</pre>

<p>Class <b>mendl</b> does no longer depend on the stream type or its character type. Only its member function <b>fct</b> depends on the stream type. Before, the entire manipulator class depended on the stream type because the base class depended on it. This was inevitable because the base class had knowledge of the function signature of the manipulation function. With the improved encapsulation this dependency is eliminated.</p>
<p>Regarding improved flexibility: here is the implementation of the <b>multi</b> manipulator with its entirely different signature. (It takes an additional argument.) It can be easily implemented using the same manipulator base class because the base class is not concerned with the specifics of the manipulation any more:</p>

<pre>class multi : public manipBase&lt;multi&gt; {
public:
   multi(char c, size_t n) 
   : manipBase&lt;multi&gt;(*this), how_many_(n), what_(c) {}
private:
   const size_t how_many_;
   const char what_;
public:
   template &lt;class Ostream&gt;
   Ostream&amp; fct(Ostream&amp; os) const
   {
      for (unsigned int i=0; i&lt;how_many_; ++i)
         os.put(what_);
      os.flush();
      return os;
   }
};
</pre>

<p>With the original manipulator base class, we need an additional base class <b>two_arg_manip_weh</b> that can store two arguments instead of just one and accepts a different function pointer type. Again, better encapsulation of concerns simplifies the solution and adds flexibility too boot.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>In this article, we have studied how modern programming techniques greatly simplify programming tasks such as implementation of stream manipulators. We replaced function pointers by function objects, thus gaining a great deal of flexibility, while simplifying the solution at the same time. And we did not lose a bit in efficiency, by the way. We replaced polymorphism via function pointers with static polymorphism via templates using the Curiously Recurring Template pattern. We haven't been using any exotic template features for achieving this. We don't get any more adventurous than using a member template (the base class's <b>manipulate</b> member function is a template), but this feature is supported by most compilers these days. In essence, nothing should prevent you from using this solution.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>We would like to give credit to our fellow columnist Kevlin Henney, whose email inspired us to write this article. He sent us email last summer as a reaction to our two manipulator articles and suggested an approach very similar to the one discussed in this article, where he creatively mixed <i>various</i> state-of-the-art techniques, including member function templates, function object types, overloaded function call operators, and parameterized inheritance. For those who are interested in his ideas, they are available at <b>http://www.langer.camelot.de/IOStreams/forum.htm</b>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Klaus Kreft and Angelika Langer. &quot;Implementing Manipulator With and Without Parameters Using the Standard IOStreams,&quot; <i>C++ Report</i>, April 2000.</p>
<p><a name="2"></a>[2] Klaus Kreft and Angelika Langer. &quot;A More Refined Method for Implementing Manipulator with Parameters,&quot; <i>C++ Report</i>, June 2000.</p>
<p><a name="3"></a>[3] Angelika Langer and Klaus Kreft. <i>Standard C++ IOStreams and Locales</i> (Addison Wesley, January 2000).</p>
<p><a name="4"></a>[4] James O. Coplien. &quot;Curiously Recurring Template Patterns,&quot; <i>C++ Report</i>, February 1995.</p>
<p><a name="5"></a>[5] Linda Rising. <i>The Pattern Almanac 2000</i> (Addison-Wesley, 2000).</p>

<p><i><b>Klaus Kreft</b> is Senior Consultant at Siemens Business Services in Germany. He can be reached at <b>klaus.kreft@mch20.sbs.de</b>.</i></p>
<p><i><b>Angelika Langer</b> works as an independent instructor and mentor. She can be reached at <b>langer@camelot.de</b>.</i></p>
<p><i>They are authors of the book </i>Standard C++ IOStreams and Locales<i>.</i></p>


</BLOCKQUOTE></BODY></HTML>
