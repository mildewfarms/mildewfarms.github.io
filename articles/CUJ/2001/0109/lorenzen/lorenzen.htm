<HTML>   
     <HEAD>
<TITLE>September 2001/An Algorithm for Efficient Image Warping</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">An Algorithm for Efficient Image Warping</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bob Lorenzen</FONT></H3>

<BLOCKQUOTE>
<p>Need to redo your image? Here's a nice algorithm to transform it as you like.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Many, many moons ago (back in the days when 640x480 was considered high resolution), I needed an algorithm to place paintings and patterns (wall coverings like brick or wallpaper) in perspective on walls generated by an architectural rendering program. I developed a very simple technique to accomplish this &#151; first in C under MS-DOS; then later on different platforms, including embedded graphics processors; and now this C++ implementation &#151; one more new trick for this old dog.</p>
<p>For the programmers out there who do not have an interest in graphics, take a look at this article anyway. I have used many of these same &#147;tricks&#148; in non-graphical programs and as a foundation for other algorithms.</p>

<H3><FONT COLOR="#000080">The Algorithm</FONT></H3>

<p>In <a href="fig1.htm">Figure 1</a>, my source bitmap is a rectangle with four corner points: A through D. I select four corresponding points in the destination bitmap: A' through D'. There are no restraints on where the points of the new shape are in relationship to any other point. The major loop involves plotting the points along lines A'D' and B'C'. I then use each of the points on these lines as endpoints for another line between them. Each row of pixels from the source bitmap is then copied to the destination as this new line is plotted.</p>
<p>This technique is much simpler than the ones used in morphing programs where the destination is usually a series of curves rather than straight lines, and often pixels are blended together rather than just copied. It also may hit each destination pixel multiple times. While this may seem inefficient, the computational overhead to pick a specific source pixel for each point in the destination shape is much greater than that required to overwrite pixels multiple times.</p>
<p>In addition to the original goal (see <a href="fig2.htm">Figure 2</a>), users have found several other applications for this algorithm. Since there is no restriction placed on the orientation of the output &#147;corner&#148; points, images can be stretched, warped, mirrored, and rotated at will.</p>

<H3><FONT COLOR="#000080">About the Code</FONT></H3>

<p>This example was written using Microsoft Visual C++ v6.0. The code fragments presented here are very generic and should be portable with very little modification. Image modifications are made on memory bitmap images, not on the display. The code listings presented here are part of a sample application that loads images and provides a &#147;rubber band&#148; control to determine the destination. Full source code, project files, and notes that are too big to be included here, are available on the <I>CUJ</I> website at &lt;www.cuj.com/code&gt;. The sample application is far from complete; it is merely a small implementation to show the algorithm. It is limited to handle 24-bit uncompressed BMP files on full-color display hardware. Due to the large amount of MFC glue (we have other words for it in the shop), the application is compiler and platform specific.</p>
<p>The heart of the algorithm is class <B>DeltaControl</B> shown in <a href="list1.htm">Listing 1</a>. This is a generic class that handles how often to increment a minor value while incrementing a major value. Common uses for <B>DeltaControl</B> include operations like fitting <B>n</B> pixels in a space <B>m</B> pixels wide, incrementing a progress bar one percent every <B>n</B> records, and, of course, since this is the same technique used in the inner loop of the Bressenham Line Algorithm (see <a href="sidebar.htm">sidebar</a>), plotting lines. &#147;Major&#148; and &#147;Minor&#148; refer to the larger and the smaller value that will be handled. For instance, when plotting a line from (0, 0) to (25, 10), the X direction would be &#147;major&#148; and Y &#147;minor.&#148;</p>
<p>The member functions <B>SetFrom</B> and <B>SetTo</B> in <a href="list2.htm">Listing 2</a> set the starting and ending positions. After this initialization, the <B>m_ErrorTerm</B> value is set to half the major length. <B>Next</B> is used to calculate the next set of values and returns <B>FALSE</B> when there are no more values to calculate (i.e., the endpoint of a line has been plotted). <B>Next</B> adds the minor length to <B>m_ErrorTerm</B>. When <B>m_ErrorTerm</B> is greater than the major length, the minor value is incremented, and the major length is subtracted from <B>m_ErrorTerm</B>. If there is no change in the minor value, the major value is incremented. The notification member functions are provided each time that there is a change in major or minor values.</p>
<p>This is the primary class utilized in this example directly (and through its descendants) to not only plot the drawing of lines, but also the scaling of the images. It does this with integer math, which is still more efficient than floating-point operations in a wide variety of platforms in use today.</p>
<p><B>DeltaControl</B> is one of the base classes for <B>DeltaControlLine</B> shown in <a href="list3.htm">Listing 3</a>. This is the implementation of the actual line plotting, and each call to <B>Next</B> will compute new coordinates. The constructors call the <B>Init</B> member function, which is where a determination is made as to whether the change in the X direction is larger than the change in the Y direction, and then assigns the major and minor component accordingly.</p>
<p>The <B>DeltaControlPair</B> class in <a href="list4.htm">Listing 4</a> simultaneously increments two <B>DeltaControl</B> classes. As it is utilized in the major loop of this algorithm, as described above, it may need to have both lines being plotted incremented at the same time. This requires an override of the virtual <B>Next</B> function, as the default behavior changes either the major or minor value as required.</p>
<p><a href="list5.htm">Listing 5</a> shows the definition of the <B>CImageBitmap</B> class that manages the image bitmaps. Note the <B>m_Private member</B> variable pointing to the undefined <B>CIBHelper</B> class. This is a technique that I adopted from a <I>CUJ</I> article by Dwayne Phillips <a href="#1">[1]</a> a few years back and has served my shop very well. One of the premises of object-oriented programming is hiding the implementation details from the higher levels. At our shop, the lower-level libraries are made available to junior programmers and customers, but only senior people can modify them and need access to the details involved. Only the &#147;public&#148; object interfaces are included in the header files, and the gory details are hidden in classes that are defined within the implementation source file and accessible only by the &#147;public&#148; object.</p>
<p><a href="list6.htm">Listing 6</a> contains the definition for the private <B>CIBHelper</B> class. Note the virtual functions for reading and writing pixels. These functions allow you to provide overrides in derived classes to correctly manipulate pixels for any device. Also, more MFC glue is hidden in the implementation of these classes.</p>
<p>The member function of interest in <B>CImageBitmap</B> is <B>Transform</B>. <a href="list7.htm">Listing 7</a> shows where the drawing is controlled by utilizing all of the goodies I have been describing. The arguments to this function are an incoming bitmap object, the four destination points, and an offset point. The offset point is provided to handle the case where the destination bitmap is larger than the display and has been scrolled. The destination points would then be relative to the scrolled origin, not the bitmap origin. At reference point 1 in <a href="list7.htm">Listing 7</a>, I define two <B>DeltaControlLine</B> objects named <B>left</B> and <B>right</B> that correspond to line A'D' and B'C' in <a href="fig1.htm">Figure 1</a> and then a <B>DeltaControlPair</B> object <B>(output_y</B>) to control them. Note that &#147;y&#148; in this case is arbitrary &#151; the movement need not be along the y axis in the output bitmap, but it is relative to the y direction in the source bitmap. At reference point 2 in <a href="list7.htm">Listing 7</a>, I use a <B>DeltaControl</B> object (<B>input_y</B>) to control moving down the source bitmap in the y direction. I wrap the source and destination y controllers in another <B>DeltaControlPair</B> object, <B>process_y</B>. The major <B>do</B> loop is controlled by <B>process_y.Next</B>. This call is responsible for selecting which input row I am using via the <B>input_y</B> object and where the output line should be plotted by the <B>left</B> and <B>right</B> objects. Each time through the outer loop (reference point 3 in <a href="list7.htm">Listing 7</a>), a <B>CIBLine</B> object (<B>output_x</B>) is defined to plot that line, and a <B>DeltaControl</B> object (<B>input_x</B>) is defined to track which column in the input row should be used. A <B>DeltaControlPair</B> object (<B>process_x</B>) is used to control the <B>input_x</B> and <B>output_x</B> objects and the inner loop.</p>
<p>The class <B>CIBLine</B> is derived from <B>DeltaControlLine</B> (see <a href="list8.htm">Listing 8</a>). It is &#147;private&#148; to the <B>CIBHelper</B> class. When its ultimate parent, <B>DeltaControl</B>, notifies it of changes through the <B>OnMajorChange</B> and <B>OnMinorChange</B> functions, a pixel is transferred from the source to the destination bitmap.</p>

<H3><FONT COLOR="#000080">Sample Operation</FONT></H3>

<p>As an example, refer again to <a href="fig1.htm">Figure 1</a>. To keep this example simple, I will use a 5 x 5 pixel bitmap as the source <a href="#2">[2]</a>. I assign the destination points as:</p>

<pre>
A'   (5, 5)
B'   (12, 7)
C'   (11, 10)
D'   (5, 11)
</pre>

<p>The first time through the outer loop, <B>left</B> will be (5, 5) and <B>right</B> (12, 7). The starting point in the source bitmap will be (0, 0). The first invocation of the inner loop would then take the source pixels from the first row and plot them in a line from (5, 5) to (12, 7). The coordinates that the inner loop would generate would be:</p>

<pre>
SOURCE    DESTINATION
(0, 0)    (5, 5)
(0, 0)    (6, 5)
(1, 0)    (6, 6)
(2, 0)    (7, 6)
(2, 0)    (8, 6)
(3, 0)    (9, 6)
(3, 0)    (10, 6)
(4, 0)    (10, 7)
(4, 0)    (11, 7)
(4, 0)    (12, 7)
</pre>

<p>The second time through the outer loop, <B>left</B> will be (5, 6) and <B>right</B> (12, 8). The starting point in the source bitmap will be (0, 1). The inner loop would then take the source pixels from the second row and plot them in a line from (5, 6) to (12, 8). The third time through, <B>left</B> will be (5, 7), but <B>right</B> will not change from (12, 8). The source bitmap source would not change either. So, the inner loop would take the source pixels from the second row and plot them from (5, 7) to (12, 8).</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>This algorithm is not meant to provide a &#147;morph&#148; of an image, but rather is a quick way to handle a specific variety of image geometry alterations. The sample application is by no means complete &#151; just a specific test platform for this article. It is missing several key features and is neither a complete image-processing or image-manipulation program. The graphic gurus in the audience will already be thinking of improvements. The mathematicians will already be finding &#147;off by one&#148; and other logic errors. And the assembler-at-heart guys will be screaming about inefficiency. I have also introduced a few basic techniques that can be applied in a wide array of applications and that you might consider adding to your toolbox.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Dwayne Phillips. "Information Hiding in C via Modular Programming," <I>C/C++ Users Journal</I>, January 1998.</p>
<p><a name="2"></a>[2]  The example grid coordinates assume the origin to be the &#147;upper left&#148; corner of the bitmaps with y increasing from top to bottom.</p>
<p><a name="4"></a>[3]  J. E. Bressenham. "Algorithm for Computer Control of a Digital Plotter," <I>IBM Systems Journal</I>, Vol. 4, No. 1, 1965.</p>

<p><i><B>Bob Lorenzen</B> has been involved in electronic imaging for over 30 years and has been programming for almost a quarter of a century. He is a principle in Lorenzen &amp; Associates, a software firm in Tampa, Florida that specializes in raster graphics, and a former partner in Mathematica, Inc.</i></p>

<h4><a href="../../../source/2001/sep01/lorenzen.zip"></a></h4>
</blockquote></body></html>
