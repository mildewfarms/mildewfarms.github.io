<HTML>   
     <HEAD>
<TITLE>September 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: International Experts of Mystery</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>If you overlook a shameless play for Mrs. Meyers, Bobby serves up precious pointers on, well, pointers (smart ones anyway), and on the proper use of namespaces.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>At the latest SD in San Francisco, Dan Saks and I stayed together as usual. On our final night there, a secret cabal met in our hotel room. There we hatched a diabolical plot to take over the world from the moon, unless we were paid...One Mil-li-on Dollars.</p>
<p>But then Scott Meyers decided that was below his dog&#146;s customary honorarium, so we dropped the idea.</p>
<p>Instead, we came up with a Plan B: hold a C++ seminar in stunning Lake Oswego, Oregon, the center of the known C++ universe. This seminar would be taught by top experts in that universe, who would present classes together, hobnob with attendees, and spar on panels. It would be like SD without the booth babes.</p>
<p>After much dithering, we came up with a name: <I>The</I> C++ Seminar &#151; 3 Days With 5 Experts. Those experts (in the order listed on their website <a href="#1">[1]</a>) are Scott Meyers, Herb Sutter, Dan Saks, Steve Dewhurst, and Andrei Alexandrescu. All of these guys have written, or currently write, for <I>CUJ</I>.</p>
<p>The seminar dates are September 17-19, 2001. And yes, the venue really is Lake Oswego, near Portland.</p>
<p>I expect to be there, but only to watch, kibitz, and quote the Standard <a href="#2">[2]</a>. Trust me, I get no kickback for mentioning this seminar. I&#146;m plugging it here because I think the 3 Days will be an unmitigated blast. I highly encourage you to consider going &#151; but register soon, because the start date is just a few weeks away from when you see this.</p>

<H3><FONT COLOR="#000080">2-for-1 Special</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p>Dear Sir:</p>
<p>I have a question regarding smart pointers. In my example, how does the compiler transform one <B>-&gt;</B> into two <B>-&gt;</B>?</p>
<p>Thanks for your help.</p>
<p>Sincerely &#151; Jason Ou</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I&#146;ve recast your example as</p>

<pre>
struct X
    {
    int m;
    };

class Ptr
    {
public:
    Ptr(X *);
    X *operator-&gt;();
    };

Ptr p = new X;
p-&gt;m = 7;
//  OK, same as
//  (p.operator-&gt;())-&gt;m = 7
</pre>

<p>The compiler transforms</p>

<pre>
p-&gt;m
</pre>

<p>into</p>

<pre>
(p.operator-&gt;())-&gt;m
</pre>

<p>because the C++ Standard says so. From Subclause 13.5.6:</p>

<BLOCKQUOTE>
<p><B>operator-&gt;</B> shall be a non-static member function taking no parameters. It implements class member access using <B>-&gt;</B></p>
<p><I>postfix-expression -&gt; id-expression</I></p>
<p>An expression <B>x-&gt;m</B> is interpreted as <B>(x.operator-&gt;())-&gt;m</B> for a class object <B>x</B> of type <B>T</B> if <B>T::operator-&gt;()</B> exists and if the operator is selected as the best match function by the overload resolution mechanism.</p>
</BLOCKQUOTE>

<p>Why does the Standard have this rule? Because such a transformation makes the most sense.</p>
<p><B>p</B> may not be a pointer, but it is supposed to act like one. Users probably expect that the expression <B>p-&gt;m</B> nets out to the <B>m</B> member referenced by <B>p</B>, regardless of whether <B>p</B> is a real pointer or a fake/smart pointer. For this to work, the subexpression <B>p-&gt;</B> must result in something that can be dereferenced to get member <B>m</B>.</p>
<p>While the designers of Standard C++ had several choices here, they settled on the one I find most direct and consistent: the subexpression</p>

<pre>
p-&gt;
</pre>

<p>is interpreted as</p>

<pre>
(p.operator-&gt;())-&gt;
</pre>

<p>For this interpretation to work, <B>(p.operator-&gt;())</B> must suffice as an operand to <B>-&gt;</B>. And indeed, if you look at the declaration of function <B>p.operator-&gt;</B>, you&#146;ll see that it returns <B>X *</B>, which can serve as the operand of <B>-&gt;</B>.</p>
<p>This way, regardless of whether <B>p</B> is a real pointer or not, the subexpression <B>p-&gt;</B> has the same interpretation: get a pointer (smart or otherwise) to a class object, and then dereference that pointer to get to the class member that follows.</p>
<p>Variation #1: <B>p-&gt;</B> could yield an object of some unrelated type that happens to have an <B>m</B> member:</p>

<pre>
struct X
    {
    int m;
    };

struct Z // no relation to X
    {
    long m;
    };

class Ptr
    {
public:
    Ptr(X *);
    Z *operator-&gt;();
//
//  ^ change
//
    };

Ptr p = new X;
p-&gt;m = 7;
//
//  OK but misleading &#151; the m is
//  a member of type Z, not type X
</pre>

<p>Such a change would destroy the symmetry between <B>p</B> and a real pointer.</p>
<p>Variation #2: The second <B>-&gt;</B> in <B>(p.operator-&gt;())-&gt;</B> could itself be interpreted as another <B>operator-&gt;</B> call:</p>

<pre>
struct X
    {
    int m;
    };

struct Z
    {
    X *operator-&gt;(); // inserted
    /* int m; */     // deleted
    };

class Ptr
    {
public:
    Ptr(X *);
    Z operator-&gt;();
//
//  ^
//  change &#151; note that operator-&gt; now
//  returns an object, not a pointer
//
    };

Ptr p = new X;
p-&gt;m = 7;
//  OK, same as
//  ((p.operator-&gt;()).operator-&gt;())-&gt;m = 7
</pre>

<p>I explored the possibility of cascading <B>operator-&gt;</B> calls in my December 1998 item &#147;Russian Dolls&#148; and April 1999 follow-up item &#147;Mars and Venus.&#148;</p>

<H3><FONT COLOR="#000080">Namespace Madness</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear <I>CUJ</I>,</p>
<p>How do you control the scope of <B>using namespace</B> within header files? Suppose a header file contains:</p>

<pre>
class Foo
    {
public:
    string name();
private:
    vector&lt;int&gt; _array;
    };
</pre>

<p>string</B> and <B>vector</B> are both defined within the <B>std</B> namespace. When converting to ANSI C++, I find myself typing</p>

<pre>
class Foo
    {
public:
    std::string name();
private:
    std::vector&lt;int&gt; _array;
    };
</pre>

<p>which gets tedious and difficult to modify. And the following is bad form</p>

<pre>
using namespace std;
class Foo
// ...
</pre>

<p>since this <B>using</B> directive has global scope and will be imposed on every file that includes the header file.</p>
<p>What I&#146;d really like to do is limit the scope of the directive as follows:</p>

<pre>
class Foo
    {
    using namespace std;
public:
    string name();
private:
    vector&lt;int&gt; _array;
    };
</pre>

<p>but my Sun Workshop 6 compiler doesn&#146;t allow it (although it makes sense to me).</p>
<p>Any solutions? &#151; Stewart Trickett</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Yes, but all are approximations of what you really want. I&#146;ll let you decide which &#151; if any &#151; suits your needs.</p>
<p>But before that, I must mention two lapses of Uncaught Exceptions etiquette:</p>

<UL><LI>   No More <B>Foo</B>s! For the rest of this answer, I will call your class <B>Oof</B>.</LI>
<LI>   No leading underscores in names, unless you are implementing a standard library <a href="#3">[3]</a>. I will therefore substitute <B>array_</B> for <B>_array</B>.</LI></UL>

<p>The column&#146;s karmic balance now restored, let&#146;s get to your question...</p>
<p>Solution #1: Substitute <B>using</B> declarations for a <B>using</B> directive at global scope:</p>

<pre>
using std::string;
using std::vector;

class Oof
    {
public:
    string name();
private:
    vector&lt;int&gt; array_;
    };
</pre>

<p>Because only the specifically-declared names appear to be at global scope, you&#146;ve vastly reduced the chance of name collision and accidental misuse. This reduction comes at a maintenance cost: you must add a new <B>using</B> declaration for each <B>std</B> member you want to introduce this way.</p>
<p>Solution #2: Declare <B>Oof</B> in a named namespace, and put the <B>using</B> directive there:</p>

<pre>
namespace N
    {
    using namespace std;
    class Oof
        {
    public:
        string name();
    private:
        vector&lt;int&gt; array_;
        };
    }
</pre>

<p>Since you&#146;re back to the <B>using</B> directive, all <B>std</B> names are brought in, and your maintenance cost goes down. And because the <B>using</B> directive appears in the scope of <B>N</B>, <B>std</B> entities appear global only within the context of <B>N</B>.</p>
<p>Drawbacks:</p>

<UL><LI>   <B>std</B> entities appear to the outside world as if they were declared in <B>N</B>. As an example, users can declare <B>N::list&lt;int&gt; x</B> successfully.</LI>
<LI>   <B>Oof</B>, which used to be at global scope, is now within the scope of <B>N</B>. Your users must either refer to <B>Oof</B> as <B>N:Oof</B> or introduce the name into another scope by (you guessed it) <B>using namespace</B> <B>N</B> or <B>using N::Oof</B>.</LI></UL>

<p>Solution #3: Combine the first two solutions, with <B>using</B> declarations instead of a <B>using</B> directive within <B>N</B>:</p>

<pre>
namespace N
    {
    using std::string;
    using std::vector;
    class Oof
        {
    public:
        string name();
    private:
        vector&lt;int&gt; array_;
        };
    }
</pre>

<p>This has the same net effect as Solution #2, with one difference: only the specifically-declared <B>std</B> names are introduced, not the whole lot.</p>
<p>Solution #4: Create private aliases within <B>Oof</B> for the <B>std</B> entities of interest:</p>

<pre>
class Oof
    {
private:
    typedef std::string string;
    typedef std::vector&lt;int&gt; vector_int;
public:
    string name();
private:
    vector_int array_;
    };
</pre>

<p>Now you can put <B>Oof</B> back into the global namespace. You also have no <B>std</B> names appearing at other scopes.</p>
<p>But as with the <B>using</B> declarations earlier, you must explicitly list out the <B>std</B> entities you want, with an added limitation: you can&#146;t alias a template name. That&#146;s why I have a <B>typedef</B> for the specialization <B>std::vector&lt;int&gt;</B> and not for the general template <B>std::vector</B>.</p>
<p>There are other ideas you can try &#151; nested namespaces, namespace aliases, macros &#151; but I think what I&#146;ve shown should give you a good start.</p>
<p>Which do I recommend? That depends on several factors, including how many <B>std</B> entities you&#146;re talking about, how likely you are to modify the header over time, and how often you reference the header&#146;s declarations. In a knowledge vacuum, my bias is toward Solution #4, but only for the most commonly-used or awkwardly-named <B>std</B> entities; otherwise I&#146;d just spell out the <B>std::</B> prefix.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>

<p>Regarding my June 2001 column item &#147;Oh Say Can You C,&#148; which concerns C programs calling C++ functions, Diligent Reader Phil Brooks asks:</p>

<BLOCKQUOTE>
<p><I>&#147;Doesn&#146;t </I><B>extern "C"</B><I> generally work so that one can call a [C++] function declared </I><B>extern "C"</B><I> from a straight C program? If that is the case, I think your user can get what he is looking for simply by declaring the </I><B>extern "C"</B><I> function in a C header file.&#148;</I></p>
</BLOCKQUOTE>

<p>Both Phil and Diligent Reader Jon Young sent small code examples implementing this assumption. Jon says the code works in Visual C++, although I&#146;d expect the general technique to work with most compilers that accept both languages.</p>
<p>Yes guys, this technique may work, but it&#146;s not guaranteed by the C++ Standard <a href="#4">[4]</a>. From Subclause 7.5/3:</p>

<BLOCKQUOTE>
<p>Every implementation shall provide for linkage to functions written in the C programming language, <B>"C"</B>...</p>
</BLOCKQUOTE>

<p>As this passage implies, <B>extern "C"</B> intentionally describes the source language of the <I>implementing</I> code, not the source language of the <I>calling</I> code. It&#146;s specifically meant to let a C++ program link to C functions, not the other way around. I&#146;m guessing the original motivation was to turn off a C++ compiler&#146;s expectation that C functions would have mangled names.</p>
<p>The C++ Standard can dictate only the behavior of C++. It can&#146;t make assumptions of, or impose restrictions on, other languages and their compilers. For <B>extern "C"</B> to work the way you want in a Standard-sanctioned way, the Standard would effectively be describing how C and a C compiler must work. The languages are close, but they aren&#146;t that close.</p>
<p>Now a particular C++ implementation may let you define a C++ function as <B>extern "C"</B> such that the function behaves as if written in that implementation&#146;s C. And very likely, a given implementation will let you freely intermingle C and C++ code it compiles. But the behavior is not guaranteed by the Standard and goes against my read of the intent behind <B>extern "C"</B>.</p>
<p>As I outlined in my original answer, cross-language calls require the caller and callee to jibe in their assumptions of data structure and call mechanics. I refer you back to the Standard passage I cited in that June column (Subclause 7.5/9):</p>

<BLOCKQUOTE>
<p>Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved.</p>
</BLOCKQUOTE>

<p>If you are calling between C and C++, and all source is compiled by the same compiler, then you should be okay. But if you call across code built by different compilers, then the risk of malfunction increases. About the best you can hope for is that some real or de-facto industry standard for code/data layout exists, and that all of your compilers target this standard.</p>
<p>(I don&#146;t know that the original reader&#146;s old C++ and new C were built with the same compiler. I assume they weren&#146;t; but even if they were, the Standard-based advice I&#146;ve given him stands.)</p>
<p>In that same June column, I listed some reasons you might want to use C over C++. Diligent Reader Brooks adds a reason I neglected, one that dovetails nicely with the above discussion: by choosing a C implementation, library writers allow multiple C++ environments to call into their library via <B>extern "C"</B>.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  &lt;http://www.gotw.ca/cpp_seminar/&gt;</p>
<p><a name="2"></a>[2]  And also to scurry off with Scott&#146;s bride Nancy, a woman of impeccable and discerning taste who wants to dump Scott and marry me instead. No, really.</p>
<p><a name="3"></a>[3]  For Ye Language Lawyers: yes, this rule is overly strict. It&#146;s also easy to remember and follow.</p>
<p><a name="4"></a>[4]  As I mentioned in that June column, the C Standard &#151; which really has jurisdiction here &#151; is utterly silent on the topic of cross-language function calls.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
