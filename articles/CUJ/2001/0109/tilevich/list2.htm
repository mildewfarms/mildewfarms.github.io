<HTML><HEAD>
<TITLE>September 2001/Extending the Standard Template Library with Association Classes/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Example of using OneMany class</A></h4>
<pre>
#include "Relations.h"
#include &lt;string&gt;

using namespace std;

//function prototypes
void listChildren(const OneMany&lt;string, string&gt;&amp; MotherChildren, 
                  const string&amp; Mother);
void insertChild(OneMany&lt;string, string&gt;&amp; MotherChildren, 
                 const string&amp; Mother, const string&amp; Child);

void main(){

   // declare the relationship
   // each mother might have many children but each child indeed 
   // has only one mother
   OneMany&lt;string, string&gt; MotherChildren;

   string firstMother("Jane");
   string secondMother("Ann");
   string child;

   child = "Paul";
   insertChild(MotherChildren, firstMother, child);

   child = "Paul";
   // will fail because Paul is already in the relationship
   insertChild(MotherChildren, firstMother, child);

   child = "Richard";
   insertChild(MotherChildren, firstMother, child);

   child = "Ann";
   insertChild(MotherChildren, firstMother, child);

   child = "Alex";
   insertChild(MotherChildren, firstMother, child);

   /////////////////////////////////////////////

   child = "Cathy";
   insertChild(MotherChildren, secondMother, child);

   //will fail because Richard is Jane's son
   child = "Richard";
   insertChild(MotherChildren, secondMother, child);

   child = "Peter";
   insertChild(MotherChildren, secondMother, child);

   child = "Mary";
   insertChild(MotherChildren, secondMother, child);

   cout &lt;&lt; "Listing Jane's children:" &lt;&lt; endl;
   listChildren(MotherChildren, firstMother);
   cout &lt;&lt; endl;

   cout &lt;&lt; "Listing Ann's children:" &lt;&lt; endl;
   listChildren(MotherChildren, secondMother);

   cout &lt;&lt; endl;

   string* pMother = MotherChildren.getOne("Ann");
   if(NULL != pMother)
    cout &lt;&lt; "Ann's mother is " &lt;&lt; *pMother &lt;&lt; endl;

}

void listChildren(const OneMany&lt;string, string&gt;&amp; MotherChildren, 
   const string&amp; Mother){

   //Iterate through all children
   for(OneMany&lt;string, string&gt;::const_iterator it = 
          MotherChildren.begin(Mother), 
          end = MotherChildren.end(Mother); it != end; ++it)
      cout &lt;&lt; *it &lt;&lt; endl;
}

void insertChild(OneMany&lt;string, string&gt;&amp; MotherChildren, 
                 const string&amp; Mother, const string&amp; Child){

if(!MotherChildren.insert(Mother, Child))
   cout &lt;&lt; "&gt;&gt;&gt;Can't insert " &lt;&lt; Child &lt;&lt; " into relationship " 
        &lt;&lt; Mother &lt;&lt; "-" &lt;&lt; Child &lt;&lt;  endl;
}

/*
Output:

&gt;&gt;&gt;Can't insert Paul into relationship Jane-Paul
&gt;&gt;&gt;Can't insert Richard into relationship Ann-Richard
Listing Jane's children:
Paul
Richard
Ann
Alex

Listing Ann's children:
Cathy
Peter
Mary
Ann's mother is Jane

*/
&#151; End of Listing &#151;</pre></body></html>
