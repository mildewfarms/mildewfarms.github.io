<HTML>   
     <HEAD>
<TITLE>September 2001/Extending the Standard Template Library with Association Classes</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Extending the Standard Template Library with Association Classes</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Eli Tilevich</FONT></H3>

<BLOCKQUOTE>
<p>These classes extend the STL container concepts to manage complex relationships among objects.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The STL (Standard Template Library) provides a large set of standard data structures called containers and many standard algorithms to operate on them. Using this library allows programmers to concentrate on the higher-level design without worrying about many implementation details when it comes to data structures and algorithms. Despite the abundance of different containers in the STL, representing associations between two application classes still can be quite challenging. Such an association is actually a relationship that exists between different kinds of objects. You may, for example, wish to create a data structure that represents all the employees who belong to a particular department, or that represents all the interconnections between nodes in a network. In this article I explain why such associations are difficult to represent using just the STL, and I describe a set of classes that enable them to be represented naturally. Of particular importance, these classes effectively decouple the objects that participate in such relationships.</p>

<H3><FONT COLOR="#000080">The Problem of Representing Associations</FONT></H3>

<p>Representing associations with STL containers is difficult because none of the containers, with the exception of <B>std::map</B> and <B>std::multimap</B>, are Pair Associative <a href="#1">[1]</a>. A Pair Associative container stores elements that consist of pairs of sub-elements; the other STL containers store elements of just one particular type (or of base-class pointers to polymorphic types).</p>
<p>Storing entities in containers that are not Pair Associative just groups them together, it does not represent any associations between two different classes of objects. For example, an STL vector of pointers to <B>Employee</B> objects provides little information about how objects of the <B>Employee</B> class relate to other kinds of objects in the program. In contrast, a Pair Associative container, such as a <B>std::map&lt;Employee *, Department *&gt;</B>, accomplishes two goals: it stores <B>Employee</B> and <B>Department</B> pointers, and shows that each <B>Employee</B> has an associated department.</p>
<p>The <B>map</B> and <B>multimap</B> classes, which are the only Pair Associative containers in the STL, quite often are not sufficient to represent all possible associations between application classes. There are three types of possible associations between objects of two classes: one-to-one, one-to-many, and many-to-many. One-to-one means that an object of the first type relates to one and only one object of the second type. For instance, for each <B>Employee</B> object there is one and only one unique ID object. One-to-many means that for each object of the first type there can be many objects of the second type but for each object of the second type there is one and only one object of the first type. For example, there can be many <B>Employee</B>s in one <B>Department</B> but each <B>Employee</B> belongs to one and only one <B>Department</B>. And finally, many-to-many means that for each object of the first type there can be many objects of the second type and vice versa. For example, an <B>Employee</B> can be enrolled in many <B>Course</B>s and there can be many <B>Employee</B>s enrolled in a particular <B>Course</B>.</p>

<H3><FONT COLOR="#000080">An Unsatisfactory Solution</FONT></H3>

<p>When it comes to representing such associations with the STL, there are several choices. Consider a common textbook problem in which there are a set of employees and a set of departments. I will show how this problem can be represented in a C++ program.</p>
<p>One approach is to use a non-Pair-Associative container inside an application class. Consider the following class declaration:</p>

<pre>
class Employee;
class Department{
   set &lt;Employee *&gt; _employees.
   typedef set 
    &lt;Employee *&gt;::iterator empl_iterator;

public:
   ...
   void addEmployee(const Employee* e);
   bool deleteEmployee
    (const Employee* e);
   empl_iterator beginEmployee();
   empl_iterator endEmployee();
};
</pre>

<p>This declaration implies a possible one-to-many association between classes <B>Department</B> and <B>Employee</B>. A close examination reveals several shortcomings of this approach. Suppose you need to access the set of <B>Employee</B> pointers (<B>_employees</B>) from outside the <B>Department</B> class. If this data member is made private, more methods will be required to access it. Besides, it is not clear what access methods should be provided. Providing a method that returns a reference to the container defeats the data encapsulation principle &#151; it might as well be declared public. Instead, the class designer would probably want to provide methods for adding and deleting items from the container and searching and traversing the container itself. It becomes rather problematic to enforce a uniform coding convention in providing such methods.</p>
<p>Understanding this code is problematic as well. If this declaration is the only piece of information that exists, there is no way to tell whether it represents <I>just</I> a one-to-many association. For example, if some of the employees belong to multiple departments, we are dealing with a many-to-many association. In many cases, proper maintenance of this code is impossible without understanding what type of association may exist. The only way to find out what type of association may exist is to carefully study not just the implementation of the <B>Employee</B> and <B>Department</B> classes but also all their interactions with other classes. Finally, since all the data relationships are hidden inside each individual class declaration, writing code to iterate through the application&#146;s data becomes possible only if we have previously studied each application class&#146;s declaration.</p>

<H3><FONT COLOR="#000080">Using Association Classes</FONT></H3>

<p>A different approach is to use special-purpose association classes. Application classes no longer have to keep track of which associations they participate in. All associations are externalized and put in one place:</p>

<pre>
namespace DataOrg{

//each department has a unique ID
OneOne&lt;Department*, int&gt; Dept2ID;
typedef OneOne&lt;Department*, 
  int&gt;::iterator DeptIter;

//There are can be many employees in one
//department but each employee belongs 
//to only one department
OneMany&lt;Department*, 
  Employee*&gt; Employees;
typedef OneMany&lt;Department*, 
  Employee*&gt;::iterator EmplIterator;

//Each employee can participate in 
//several projects and each project can 
//have many employees
ManyMany&lt;Employee*, Project*&gt; Projects;
typedef ManyMany&lt;Employee*, 
  Project*&gt;::iterator1 EmplByProjIter;
typedef ManyMany&lt;Employee*, 
  Project*&gt;::iterator2 ProjByEmplIter;

}; //end DataOrg namespace
</pre>

<p>Partial definitions of the template classes <B>OneOne</B>, <B>OneMany</B>, and <B>ManyMany</B> are shown in <a href="list1.htm">Listing 1</a>. This listing also shows the implementation of a few of the methods in the <B>ManyMany</B> class, including <B>insert</B>, <B>begin</B>, <B>end</B>, and <B>operator++</B> of one of the nested iterator classes. These template classes are like STL containers in a couple of ways: they can store more than one element, and they can grow or shrink dynamically. Thus, the <B>OneOne</B> container can store any number of one-to-one associations. But the association classes are not just ordinary containers; for one thing, they provide more kinds of iterators. For example, given the many-to-many <B>Projects</B> container as defined above, it is possible to obtain an iterator that iterates over all the <B>Employee</B>s involved in a particular <B>Project</B>; but it is also possible to iterate over all the <B>Project</B>s being worked on by a particular <B>Employee</B>.</p>
<p>Using these classes, suddenly all the data associations in the program become very clear, which makes the program easier to manage and understand. For example, if the requirements should change and employees can no longer share projects, the programmer can just change the type of the <B>Projects</B> association from <B>ManyMany</B> to <B>OneMany</B>. The data integrity requirement (making sure that there are no two employees sharing the same project) will be enforced by the <B>OneMany</B> class itself and there is no need to provide any additional code for that purpose. Since all class associations are now externalized, it is easy to add a new association to the program.</p>
<p>Consider how you would add logic to organize <B>Project</B>s by <B>Department</B>s using both the old and new approaches. Without the association classes, you would have to add a vector of <B>Project</B>s to the <B>Department</B> class. In addition to this, you would also have to add several methods to access projects, add them to the <B>Department</B>, and delete them. Using the new approach, you need only add another association:</p>

<pre>
OneMany&lt;Department*, Project*&gt; ProjsByDept;
</pre>

<p>The <B>OneMany</B> class already has all the methods for adding, deleting, and iterating projects for each department inserted into it. An interesting question arises: where should objects of such association classes be created? We could either make them to be members of the main application class or declare them global, depending on other design factors.</p>

<H3><FONT COLOR="#000080">Design and Implementation Considerations</FONT></H3>

<p>Later in the article I provide a few examples that show how standard general-purpose association classes can be useful. Regardless of how they are implemented, there are several design considerations that should be taken into account. One decision is whether to make those classes intrusive or not. By intrusive I mean that the pointers that are used to maintain the associations are stored inside application classes. There are several existing class libraries that take this approach. The DataObject Library from CodeFarms Inc. uses a code generator to put such pointers inside application classes. The Pattern Template Library from the same company uses template-based inheritance to do the same thing. The latter class library also provides a many-to-many data structure based on the intrusive approach.</p>
<p>The obvious advantage of using the intrusive approach is performance. For example, if each many in a <B>OneMany</B> association stores a pointer to its one, then the one associated with a particular many can be retrieved in constant time. Where no such back-pointer exists, finding the one associated with a particular many typically requires a search operation. The only drawback of the intrusive approach is that if the data organization of the program changes, the programmer must either rerun a code generator, or change the inheritance structure of the application classes.</p>
<p>Since the STL has become a de-facto industry standard (not to mention a part of the C++ Standard), I designed my relationship classes to extend the STL, and I wanted to make them as STL compatible as possible. My goal was that anyone familiar with the STL should be able to start using the three relationship classes right away. Since all the STL containers are non-intrusive, I have chosen a non-intrusive approach as well. I use the STL <B>map</B> and <B>multimap</B> classes to implement the internal structure of the relationship classes. <B>map</B> and <B>multimap</B> utilize a balanced search tree (specifically, a &#147;red-black&#148; tree), so all insertion, removal, and retrieval operations have logarithmic complexity. This is of course less efficient than the constant access complexity of intrusive data structures; however, for reasonably-sized data the difference is not significant.</p>
<p>The three association classes, <B>OneOne</B>, <B>OneMany</B>, and <B>ManyMany</B>, were designed to be extremely flexible to fit the general programming purpose. Each class provides a standard interface to insert and remove the data, as well as STL-style iterators to traverse through the stored data. The <B>ManyMany</B> class provides two types of iterators for each application class participating in the association.</p>
<p>I had to take particular care to make the <B>ManyMany</B> association flexible enough to be useful in different programming scenarios. The question of how to deal with many-to-many associations has been tackled by many OO designers. Rumbaugh et. al suggest that</p>

<BLOCKQUOTE>
<p>the best approach is usually to implement the association as a distinct class, in which each instance represents one link and its attributes</p>
</BLOCKQUOTE>

<p>This quotation introduces the notion of link attributes. A link attribute is a piece of data that applies only to the association between two entities, not to either entity in itself. For instance, in the case of a many-to-many relationship between <B>Employee</B> and <B>Project</B>, possible link attributes would be the hours put in, the start and end date, and some other information that applies only to a particular employee working on a particular project. A class to hold such data might be called <B>EmplProj</B> and the class would serve as a link attribute.</p>
<p>A problem arises because sometimes a link attribute is not needed. This implies the necessity of having two different internal data organizations for the <B>ManyMany</B> class. That&#146;s where the advanced C++ feature called partial template specialization comes into play. The <B>ManyMany</B> class can be specialized in two different ways. If the link attribute is not used, the class should be specialized with the two application classes participating in the association, and possibly with the corresponding less-than predicates for each application class. (If the predicates are not specified, the default STL <B>less</B> predicate will be used.) If the link attribute is needed, then the specialization requires five parameters: the first two are the application classes followed by their corresponding less-than predicates, with the link attribute class at the end. In the <B>ManyMany</B> class implementation, the fifth template parameter is defaulted to type <B>void</B>. This generates the correct internal representation and the partial template specialization does the magic.</p>
<p>The <B>ManyMany</B> class provides two overloaded <B>insert</B> methods. The first two parameters corresponding to the elements stored in the associations are identical in both methods. The third parameter in the second <B>insert</B> method is the link attribute. Choosing an incorrect <B>insert</B> method that is not supported by the chosen specialization will result in a compiler error. The same holds true for the <B>getAttribute</B> method that returns a link attribute given two entities participating in the relationship. If the <B>ManyMany</B> class was not instantiated with a link attribute, the compiler is not be able to generate code for the <B>getAttribute</B> method and signals an error.</p>
<p>Unfortunately, not all C++ compilers support the partial template specialization feature. I have tested the sample code using egcs-1.1.2 running on both Solaris and Linux.</p>

<H3><FONT COLOR="#000080">Examples</FONT></H3>

<p>The following examples show a couple of simple uses for association classes. To get an idea how useful they are in practice, see the <a href="sidebar.htm">sidebar</a>, &#147;Field Experience.&#148;</p>
<p>To use these association classes, you need only include the file <B>Relations.h</B>, partially shown in <a href="list1.htm">Listing 1</a>. (The full source code is available on the <I>CUJ</I> website at &lt;www.cuj.com/code&gt;.)</p>
<p><a href="list2.htm">Listing 2</a> (<B>MotherChildren.C</B>) demonstrates a typical use of the one-to-many association. This example if often referred to in database literature as an &#147;obvious&#148; case of such use: while a mother can have one or more children, each child has only one mother. The listing shows the definition of two functions besides <B>main</B>: <B>insertChild</B> and <B>listChildren</B>. The first one shows how the <B>OneMany</B> class enforces the integrity of the association and the second demonstrates a use of the class&#146;s iterators.</p>
<p>This example demonstrate that the iterators provided for the association classes behave a little differently than STL iterators. Consider the following statement from the <B>listChildren</B> function defined in <a href="list2.htm">Listing 2</a>:</p>

<pre>
OneMany&lt;string, string&gt;::const_iterator it =
   MotherChildren.begin(Mother),
   end = MotherChildren.end(Mother);
</pre>

<p>Unlike the <B>begin</B> and <B>end</B> functions in STL containers, these <B>begin</B> and <B>end</B> functions take a parameter. Here, <B>begin</B> returns an iterator to all children who have the mother represented by the string <B>Mother</B>. The <B>end</B> function returns an iterator that points one-past-the-end of this range of children.</p>
<p><a href="list3.htm">Listing 3</a> (<B>StudentClasses.C</B>) shows a textbook example of the many-to-many association. Indeed a student can take many classes and there can be many students in one class. This listing shows how the <B>ManyMany</B> classes can be instantiated with and without the link attribute template parameter. In this example, the link attribute of the association is expressed via the means of the <B>Record</B> struct. This struct contains information that applies to a unique student-class association: the number of absences and the student&#146;s grade for a given class. The listing also shows a typical use of the class&#146;s iterators.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Using the special purpose association classes makes the resulting code easier to manage and understand. These classes can easily be ported to Java, which starting from JDK 1.2, supports the Collections framework with many useful Pair Associative data structures such as <B>Map</B> and <B>HashMap</B>. In addition, I would like to propose that the C++ standards committee consider adding relationship classes to the STL. I would not insist either on this particular implementation or even on the method interface that I have provided. However, I would like to make a point that such classes are generic enough and difficult enough to implement to be considered a useful addition to the STL.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]  The term Pair Associative comes from Matt Austern&#146;s book, <I>Generic Programming and the STL</I> (Addison-Wesley, 1999).</p>

<H3><FONT COLOR="#000080">Further Reading</FONT></H3>

<p>Jiri Soukup. <I>Taming C++: Pattern Classes and Persistence for Large Projects</I> (Addison-Wesley, 1994).</p>
<p>Jiri Soukup. &#147;Writing Complex Software,&#148; <I>Dr. Dobb&#146;s Journal,</I> October 1999.</p>
<p>Alexander Stepanov and Mung Lee. &quot;The Standard Template Library,&quot; (Hewlett-Packard), 1501 Page Mill Rd., Palo Alto, CA 94304, Aug.18/94</p>
<p>James Rumbaugh. <I>Object-Oriented Modeling and Design</I> (Prentice Hall, 1991).</p>
<p>Bjarne Stroustrup. <I>The C++ Programming Language</I> (Addison-Wesley, 1997).</p>

<p><i><B>Eli Tilevich</B> is a Ph.D. student and an IT consultant. He has been using C++ since the early 90&#146;s for many commercial and research large-scale projects. His interests include programming languages, compilers, and distributed computing. His current research deals with the issues of automatic partitioning and distribution of Java programs. He can be contacted at <B>tilevich@cc.gatech.edu</B>.</i></p>

<h4><a href="../../../source/2001/sep01/tilevich.zip"></a></h4>
</blockquote></body></html>
