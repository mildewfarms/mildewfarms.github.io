<HTML><HEAD>
<TITLE>September 2001/Extending the Standard Template Library with Association Classes/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Partial listing of Relations.h &#151; association class definitions</A></h4>
<pre>
//Relations.h
#ifndef _RELATIONS_H
#define _RELATIONS_H

#include &lt;map&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

// OneOne relationship template class
template &lt; class First, class Second, 
           class CompareFirst = less&lt;First&gt;,
           class CompareSecond = less&lt;Second&gt; &gt;
class OneOne
{

   typedef map &lt;First,  Second, CompareFirst&gt; FirstSecond;
   typedef map &lt;Second, First, CompareSecond&gt;SecondFirst;

   FirstSecond _FirstSecond;
   SecondFirst _SecondFirst;

public:

   // Insert a pair of elements
   bool insert(const First&amp; f, const Second&amp; s);

   // Remove a pair with this First if it was inserted
   bool removeByFirst(const First&amp; f);

   // Remove a pair with this Second if it was inserted
   bool removeBySecond(const Second&amp; s);

   // Return the Second item for this First
   // or NULL if it doesn't exist
   Second * getSecond(const First&amp; f);

   // Return the First item for this Second
   // or NULL if it doesn't exist
   First * getFirst(const Second&amp; s);

   void clear(); // Clear this relationship

   // Define iterator for this relationship
   typedef FirstSecond::iterator iterator;

   iterator begin() { return _FirstSecond.begin(); }
   iterator end() { return _FirstSecond.end(); }
};

//--------------------------------------------------------------

// OneMany relationship template class
template &lt;class One, class Many,
          class CompareOne = less&lt;One&gt;,
          class CompareMany= less&lt;Many&gt; &gt;

class OneMany
{

   //maps One to several Many
   typedef multimap &lt;One, Many, CompareOne&gt; OneManyMap;
   OneManyMap _OneManyMap;

   //maps each Many to its One
   typedef map &lt;Many, One, CompareMany&gt; ManyOneMap;
   ManyOneMap _ManyOneMap;

public:
   // Insert this One Many pair to this relationship
   // if it is not already there
   bool insert(const One&amp; o, const Many&amp; m);

   // Remove this Many if it was inserted
   bool removeByMany(const Many&amp; m);
        
   // Remove this One if it was inserted
   bool removeByOne(const One&amp; o);

   // Return the One for this Many
   // or NULL if it doesn't exist
   One* getOne(const Many&amp; m){

   // Nested iterator class for Many 
   class ManysIterator{...omitted...};

   typedef ManysIterator &lt;One, Many&gt; iterator;

   // Nest const iterator class for Many
   class ConstManysIterator 
      : public ManysIterator{...omitted...};

   typedef ConstManysIterator &lt;One, Many&gt; const_iterator;

   // The begin and end iterators for this One
   iterator begin(const One&amp; o);
   iterator end(const One&amp; o);

   // The const begin and end iterators for this One
   const_iterator begin(const One&amp; o) const;
   const_iterator end(const One&amp; o) const;

   void clear(); // Clear this relationship
};

//--------------------------------------------------------------

// triple struct used by ManyMany relationship
template &lt;class T1, class T2, class T3&gt;
struct triple : public pair&lt;T1, T2&gt;{

   triple(const T1&amp; x, const T2&amp; y, const T3&amp; z) 
   : pair&lt;T1, T2&gt;(x, y), third(z){} 

   T3 third;
};

template &lt;class T1, class T2, class T3&gt;
inline triple&lt;T1, T2, T3&gt; 
make_triple(const T1&amp; x, const T2&amp; y, const T3&amp; z){
   return triple&lt;T1, T2, T3&gt;(x, y, z);
}

// ValToType struct to determine type; used at compile time
template &lt;class T1, class T2, class T3&gt;
struct ValToType{ typedef triple &lt;T1, T2, T3&gt; type; };

// Partial template specialization of ValToType class
template &lt;class T1, class T2&gt;
struct ValToType&lt;T1, T2, void&gt;{ typedef pair &lt;T1, T2&gt; type; };

ManyMany relationship template class
template &lt;class Many1, class Many2,
          class CompareMany1 = less&lt;Many1&gt;,
          class CompareMany2 = less&lt;Many2&gt;,
          class Rel          = void&gt;
class ManyMany{

   typedef ValToType&lt; Many1, Many2, Rel &gt;::type  Relation;
   typedef vector&lt;Relation&gt; Relations;
   Relations _Relations;

   typedef multimap &lt;Many1, Relation, CompareMany1&gt; One1Many2Map;
   One1Many2Map _One1Many2Map;

   typedef multimap &lt;Many2, Relation, CompareMany2&gt; One2Many1Map;
   One2Many1Map _One2Many1Map;

public:

   // Insert this Many1 Many2 pair to the relationship
   bool insert(const Many1&amp; m1, const Many2&amp; m2){

      Relation rel(m1, m2);
      _Relations.push_back(rel);

      _One1Many2Map.insert( make_pair (m1, rel) );
      _One2Many1Map.insert( make_pair (m2, rel) );

      return true;
   }

   // Insert this Many1 Many2 Rel triple to the relationship
   bool insert(const Many1&amp; m1, const Many2&amp; m2, const Rel&amp; r);

   // Remove this Many1
   bool removeByMany1(const Many1&amp; m1);

   // Remove this Many2
   bool removeByMany2(const Many2&amp; m2);

   Nested functor struct used to find relations
   struct eqRel{...omitted...};

   // Remove this Many1 Many2 pair
   bool remove(const Many1&amp; m1, const Many2&amp; m2);
  
   // Return the Link Attribute for this pair of Many1 Many2
   // or NULL if not found
   const Rel* getAttribute(const Many1&amp; m1, const Many2&amp; m2);

   //--------------------------------------------------
   // Nested iterator class for iterating over Many1s
   class Manys1Iterator{

   protected:
      typedef One2Many1Map::iterator OMI;
      OMI _mi;

      typedef bidirectional_iterator_tag iterator_category;
      typedef Manys1Iterator&lt;Many1, Many2&gt; self;

   public:

      Manys1Iterator(OMI mi = OMI()) : _mi(mi){}
      ...
      self&amp; operator++() {
         _mi++;
         return *this;
      }
      ...
   };
   //--------------------------------------------------

   class Manys2Iterator{...omitted...};

   // Iterator types to iterate through Many1's and Many2's
   // respectively
   typedef Manys1Iterator &lt;Many1, Many2&gt; iterator1;
   typedef Manys2Iterator &lt;Many1, Many2&gt; iterator2;

   // The begin and end iterators for this Many2
   iterator1 begin(const Many2 &amp; m2)
   { return iterator1(_One2Many1Map.lower_bound(m2)); }
   iterator1 end(const Many2 &amp; m2)  
   { return iterator1(_One2Many1Map.upper_bound(m2)); }

   // The begin and end iterators for this Many1
   iterator2 begin(const Many1 &amp; m1)
   { return iterator2(_One1Many2Map.lower_bound(m1)); }
   iterator2 end(const Many1 &amp; m1)  
   { return iterator2(_One1Many2Map.upper_bound(m1)); }

   void clear(){ // Clear this relationship

      _One1Many2Map.clear();
      _One2Many1Map.clear();
      _Relations.clear();
   }
};


#endif
&#151; End of Listing &#151;</pre></body></html>
