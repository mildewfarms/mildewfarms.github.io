<HTML>   
     <HEAD>
<TITLE>September 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: I/O and Function Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>The Standard C++ library is crafted for extensibility, but doing it right can stymie the best of us. Matt combines function objects with the right "traits" to intelligently extend IOStreams.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>The Standard C++ I/O library is extremely general, and it&#146;s also user-extensible. Sometimes there&#146;s a tension between those two aspects: when you write a new I/O component, it isn&#146;t always easy to make sure that it&#146;s able to accommodate all of the permitted variability. Getting used to a few simple tools can help.</p>
<p>After discussing alternatives, I'll show a  simple and efficient method for finding characters in a stream, a method that works for arbitrary locales and even for arbitrary character types.</p>

<H3><FONT COLOR="#000080">Character Classification</FONT></H3>

<p>Suppose that you&#146;re reading characters from an input stream buffer and that you&#146;re looking for the start of the word: the first alphabetic character or letter.</p>
<p>In older programs, you might sometimes see a test that looks something like this:</p>

<pre>
if ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= 'A' &amp;&amp; c &lt;= 'Z'))
  &lt;do something&gt;
</pre>

<p>This sort of test is a terrible idea. First, it isn&#146;t portable. It makes unjustified assumptions about the character set: it only works if the upper- and lower-case letters are contiguous blocks. Some character sets (like ASCII) work that way, but others don&#146;t. Second, this test is incompatible with internationalization. It assumes that there are only 26 letters, a through z. That&#146;s true in English, but it&#146;s a parochial assumption; other languages, even languages that use the Roman alphabet, have a different set of letters. In general, you can&#146;t tell whether something is a letter unless you know what language you&#146;re working in. (Is l a letter, or just a mathematical symbol? How about &Aring;?)</p>
<p>In C, you&#146;d be advised to write the test differently:</p>

<pre>
if (isalpha(c))
  &lt;do something&gt;
</pre>

<p>That&#146;s better. The <B>isalpha</B> function is part of the Standard C library; it takes care of all of the details of the character set. It can even accommodate a form of internationalization. The Standard C library has a notion of a &#147;current locale.&#148; The behavior of <B>isalpha</B>, and various other C library functions, depends on which locale is currently active; you can switch to a new locale by calling the <B>setlocale</B> function. That&#146;s still not very satisfactory, though, because the locale is a global variable. The C library gives you no good way to use two different locales at the same time, perhaps in different parts of your program; the two locales would interfere with each other.</p>
<p>The C++ library has a different mechanism for internationalization: a locale is an object, and each stream and each stream buffer has its own locale associated with it. A locale object is composed of <I>facet</I> objects <a href="#1">[1]</a>. The C++ equivalent of the C library&#146;s <B>isalpha</B> is a member function of the <B>ctype</B> facet.</p>
<p>If you&#146;re writing a new I/O component, you should never make assumptions about which locale is in use. You should not use C library functions like <B>isalpha</B> and <B>toupper</B>, because they might refer to the wrong locale. Instead, for full generality, you should fetch and use the locale that&#146;s associated with the stream you&#146;re using. Here is a correct way to find an alphabetic character when you&#146;re reading from a <B>streambuf</B>:</p>

<pre>
std::basic_streambuf&lt;char&gt;* buf;
...
std::locale L(buf.getloc());
std::ctype&lt;char&gt;&amp; ct =
  std::use_facet&lt;std::ctype&lt;char&gt; &gt;(L);
std::istreambuf_iterator&lt;char&gt; f(buf);
std::istreambuf_iterator&lt;char&gt; l;

while (f != l) {
  if (ct.is(std::ctype_base::alpha, *f))
    &lt;do something&gt;
  ++f;
}
</pre>

<p>There are other ways that this loop could be written, which is why I said &#147;a correct way&#148; instead of &#147;the correct way.&#148; You could, for example, dispense with the explicit call to <B>use_facet</B> and write:</p>

<pre>
while (f != l) {
  if (std::isalpha(c, L))
    &lt;do something&gt;
  ++f;
}
</pre>

<p>This looks a bit prettier, but actually it&#146;s inferior to the first version. Writing <B>std::isalpha(c, L)</B> is exactly the same as writing:</p>

<pre>
std::use_facet&lt;std::ctype&lt;char&gt; &gt;(L).is(
  std::ctype_base::alpha, c)
</pre>

<p>It&#146;s better to move <B>use_facet</B> outside the loop, instead of calling it on every iteration.</p>
<p>It&#146;s a bit frustrating, though, that there has to be an explicit loop at all. Doesn&#146;t the standard library give us anything we can reuse? Almost, but not quite. The <B>ctype</B> facet has a promising looking member function, <B>scan_is</B>, which finds the first character in a range with a specified character classification. Unfortunately, <B>scan_is</B> is completely useless for us. It&#146;s not a template: it only works on character pointers, and we&#146;re dealing with a range of iterators.</p>
<p>A more promising approach is the <B>find_if</B> algorithm. We should be able to find the first alphabetic character by writing <B>std::find_if(f, l, &lt;something&gt;)</B>; the only question is what predicate to supply. One might try some combination of <B>bind1st</B>/<B>bind2nd</B> and <B>mem_fun</B>, but it doesn&#146;t take much thought to realize that that can&#146;t work: <B>std::ctype&lt;&gt;::is</B> has two arguments, and the <B>mem_fun</B> adaptors only go up to member functions of one argument. We need something else.</p>

<H3><FONT COLOR="#000080">Characters and Character Traits</FONT></H3>

<p>There&#146;s another way in which the code sample I&#146;ve shown isn&#146;t as general as it might be. I hinted at it, by writing <B>basic_streambuf&lt;char&gt;</B> instead of <B>streambuf</B>. All of the standard streams and stream buffers are templates: they&#146;re parameterized by character type. The standard library instantiates those templates for two predefined character types, <B>char</B> and <B>wchar_t</B>, and it defines typedefs for those instantiations: <B>streambuf</B> is the same as <B>basic_streambuf&lt;char&gt;</B>, <B>wstring</B> is the same as <B>basic_string&lt;wchar_t&gt;</B>, and so on.  (The only important I/O class that&#146;s not a template is <B>std::locale</B>. All of the predefined locale facets, however, are templates.)</p>
<p>If you&#146;re writing an I/O component that you expect to be reused, you should work with <B>basic_istream&lt;charT&gt;</B>, not with <B>istream</B>; you should be prepared for <B>charT</B> to be <B>char</B>, or <B>wchar_t</B>, or some user-defined type you&#146;ve never heard of. This is mostly a straightforward matter of writing your component as a template, but there is one complication.</p>
<p>Suppose that, instead of looking for a general class of characters, you&#146;re looking for one specific character (a newline, for example). It would seem that this time you really could just reuse a standard algorithm:</p>

<pre>
std::basic_streambuf&lt;charT&gt;* buf;
charT c;
...
std::istreambuf_iterator&lt;charT&gt; f(buf);
std::istreambuf_iterator&lt;charT&gt; l;
f = std::find(f, l, c);
</pre>

<p>Unfortunately, this code is wrong. It will probably pass all of your tests, but it will fail when someone tries to do something unusual. It doesn&#146;t take into account one last way in which the I/O library is parameterized: traits.</p>
<p>Standard I/O classes like <B>basic_streambuf</B> have two template parameters, not one. The second parameter has a default, which is why it was correct for me to omit it in the last code snippet, but users are permitted to supply it explicitly. The second parameter determines <I>character traits</I>, and it defaults to <B>std::char_traits&lt;charT&gt;</B>.</p>
<p>Traits in general are a basic technique of template-based programming, and character traits are an application of that technique to I/O. A character traits class parameterizes the fundamental properties of a specific character type. Every character traits class must satisfy a set of requirements given in table 37 of the C++ Standard. Such a class contains a few nested typedefs, including <B>char_type</B>, the character type under discussion, and <B>int_type</B>, an integer type that&#146;s associated with <B>char_type</B>. A traits class also includes a few static member functions (typically inline) that perform basic character operations: <B>Traits::eq(x, y)</B> compares <B>x</B> and <B>y</B> for equality; <B>Traits::assign(x, y)</B> assigns <B>y</B> to <B>x</B>; <B>Traits::eof()</B> returns an end-of-file character; <B>Traits::to_int_type(c)</B> and <B>Traits::to_char_type(n)</B> convert between <B>char_type</B> and <B>int_type</B>.</p>
<p>(Why do we have both <B>char_type</B> and <B>int_type</B>? For the same reason as in C! Some operations, such as <B>basic_streambuf</B>&#146;s <B>sbumpc</B> and <B>snextc</B> member functions, have to be able to return every possible valid value that a <B>Traits::char_type</B> can hold and also have to be able to return a distinct end-of-file indicator. The return type of such functions is <B>Traits::int_type</B>. Once you&#146;ve checked such a return value and verified that it&#146;s not <B>Traits::eof()</B>, you can convert it to <B>char_type</B>.)</p>
<p>This, finally, is why:</p>

<pre>
f = std::find(f, l, c);
</pre>

<p>is subtly wrong, or at least insufficiently general. A character traits class tells you how to compare characters for equality, and anyone who goes to the trouble of using a non-default character traits class probably has a reason for it. The <B>std::find</B> algorithm knows nothing about traits; it just uses <B>operator==</B>. If you use <B>std::find</B>, you&#146;re throwing away the information that the traits class supplies.</p>
<p>Whenever you&#146;re working with a class that&#146;s parameterized by character traits, you should use the supplied traits class for all character comparisons and all character assignments. The predefined I/O components follow this rule, and your I/O components should do the same if you intend them for reuse.</p>
<p>We can&#146;t use <B>std::find</B>, but we can use <B>std::find_if</B> &#151; again, if we have the appropriate predicate.</p>

<H3><FONT COLOR="#000080">Function Objects</FONT></H3>

<p>In both cases, the main problem is one of packaging: the Standard C++ library provides the tests that we need; it just doesn&#146;t provide them in the form that <B>std::find_if</B> needs. The solution is simple: write some simple function object adaptors to transform one interface into another.</p>
<p><a href="list1.htm">Listing 1</a> contains a predicate that uses <B>std::ctype&lt;&gt;</B> for character classification, and <a href="list2.htm">Listing 2</a> contains a collection of predicates based on character traits. Using these function objects, we can find an alphabetic character by writing:</p>

<pre>
f = std::find_if(f, l,
        is_char_class&lt;charT&gt;(L,
            std::ctype_base::alpha));
</pre>

<p>We can find a specific character <B>c</B> by writing:</p>

<pre>
f = std::find_if(f, l,
          std::bind2nd(

traits_eq&lt;std::char_traits&lt;char&gt; &gt;(),
              'c'));
</pre>

<p>In addition to <B>traits_eq&lt;&gt;</B>, <a href="list2.htm">Listing 2</a> also contains two function objects that work with characters in their <B>int_type</B> form. This is a less common need, first, because you only need to worry about <B>int_type</B> if you&#146;re using a <B>basic_streambuf</B> directly (<B>streambuf</B> iterators return <B>char_type</B> values, not <B>int_type</B> values), and second, because the only real purpose of <B>int_type</B> is to return a value that might be end-of-file. I&#146;ve provided <B>traits_int_eq&lt;&gt;</B>, which compares two <B>int_type</B> values, mostly for completeness. I use it less often than I use <B>is_eof&lt;&gt;</B>, a predicate that takes a single <B>int_type</B> value and returns <B>true</B> if that value is the end-of-file indicator.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The predicates in <a href="list1.htm">Listings 1</a> and <a href="list2.htm">2</a> are trivial, but they&#146;re useful nonetheless. Without them, or something like them, it&#146;s a nuisance to combine locales and character traits with generic algorithms. With them you can easily write code that&#146;s correct even in the presence of unusual character types and locales, instead of code that&#146;s only almost correct. You have to observe two simple rules:</p>

<UL><LI>   Always use the <B>ctype</B> facet for character classification. Don&#146;t assume that characters work anything like they do in ASCII.</LI>
<LI>   Always use the traits class&#146;s member functions for character comparison, assignment, and conversion between <B>char_type</B> and <B>int_type</B>. Don&#146;t assume that you can use <B>operator==</B>, <B>operator&lt;</B>, or <B>operator=</B>. These rules may not seem important today, but, as internationalization and alternate character types become increasingly important, they&#146;re likely to be important in the future.</LI></UL>

<p>Implementers of the standard library often use function objects similar to the ones in Listings <a href="list1.htm">1</a> and <a href="list2.htm">2</a> when implementing such library components as <B>basic_istream</B>&#146;s member functions. If you want to write anything like those member functions, you&#146;ll need them too.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]  Matt Austern. &#147;The Standard Librarian: Defining a Facet,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, June 2001, &lt;www.cuj.com/experts/1906/austern.htm&gt;.</p>

<p><i><B>Matt Austern</B> is the author of <I>Generic Programming and the STL</I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>

<h4><a href="../../../source/2001/sep01/austern.zip"></a></h4>
</blockquote></body></html>
