<HTML>
<HEAD>
<TITLE>September 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">September 2001<BR>
                Volume 19 Number 9</FONT></H3>
               
<H3><FONT COLOR="#FF0000">GRAPHICS</FONT></H3>
</B><H4><A HREF="qureshi/qureshi.htm">Image Rotation Using OpenGL Texture Maps</A></h4>
<p><b>Shehrzad Qureshi</b><br>
<i>Here's a new twist on rotating images efficiently.</i></p>

<H4><A HREF="lorenzen/lorenzen.htm">An Algorithm for Efficient Image Warping</A></h4>
<p><b>Bob Lorenzen</b><br>
<i>Need to redo your image? Here's a nice algorithm to transform it as you like.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="nelson/nelson.htm">A C++ Debug Stream for Win32</A></H4>
<p><b>Mark Nelson</b><br>
<i>A simple class for printing trace statements while debugging in Windows </I>&#151;<I> just like in the Good Old Days.</i></p>

<H4><A HREF="tilevich/tilevich.htm">Extending the Standard Template Library with Association Classes</A></H4>
<p><b>Eli Tilevich</b><br>
<i>These classes extend the STL container concepts to manage complex relationships among objects.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="sutter/sutter.htm">Sutter&#146;s Mill: Virtuality</A></H4>
<p><b>Herb Sutter</b><br>
<i>Herb herewith expertly demystifies a little-known practice of expert designers. Read this or weep, Gentle Reader.</i></p>

<H4><A HREF="austern/austern.htm">The Standard Librarian: I/O and Function Objects</A></H4>
<p><b>Matt Austern</b><br>
<i>The Standard C++ library is crafted for extensibility, but doing it right can stymie the best of us. Matt combines function objects with the right "traits" to intelligently extend IOStreams.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: International Experts of Mystery</A></H4>
<p><b>Bobby Schmidt</b><br>
<i> If you overlook a shameless play for Mrs. Meyers, Bobby serves up precious pointers on, well, pointers (smart ones anyway), and on the proper use of namespaces.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>
<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1909/hyslop/hyslop.htm">"Conversations: Back to Base-ics"</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<i>When you are adding a new class to a project, and that class is very similar to an existing class, you will frequently have three options: publicly derive one class from the other, create a common base class from which both the new and existing classes will be derived, and implement one class in terms of the other class. What is the best way to choose among the three options?</i></p>

<H4><A HREF="../cexp1909/henney/henney.htm">"From Mechanism to Method: Further Qualifications"</A></H4>
<p><b>by Kevlin Henney</b><br>
<i>It's not enough that your pointers can be smart: they also need to be sensitive. In particular, sensitive to your qualifications. The use of <b>const</b> is key to a lot of good C++ design, and there is a body of received wisdom on <b>const</b>-correctness. However, things get a little more interesting when you want to use smart pointers and differentiate between <b>const</b> and non-<b>const</b> target objects. This month's column explores the issues and the techniques to address them. As with all sensitivity, it is a matter of understanding.</i></p>

<H4><A HREF="../cexp1909/reeves/reeves.htm">"The (B)Leading Edge: Using the XDR_Stream Class"</A></H4>
<p><b>by Jack W. Reeves</b><br>
<i>Last time Jack described the implementation of an IOStream style class that would encode/decode an XDR stream. In this column, he examines using that class to build some simple object persistence mechanisms. In the process, he discovers some things that can be improved about the design of <b>XDR_Stream</b>. He provides an in-depth look at his thinking as he attempts to evolve the <b>XDR_Stream</b> class into a truly useful, general purpose, reusable class.</i></p>
</blockquote></body></html>
