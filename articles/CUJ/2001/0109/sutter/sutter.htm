<HTML>   
     <HEAD>
<TITLE>September 2001/Sutter&#146;s Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter&#146;s Mill: Virtuality</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<BLOCKQUOTE>
<p>Herb herewith expertly demystifies a little-known practice of expert designers. Read this or weep, Gentle Reader.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>This month, I want to present up-to-date answers to two recurring questions about virtual functions. These answers then lead directly to four class design guidelines.</p>
<p>The questions are old, but people still keep asking them, and some of the answers have changed over time as we&#146;ve gained experience with modern C++. </p>

<H3><FONT COLOR="#000080">Virtual Question #1: Publicity vs. Privacy?</FONT></H3>

<p>The first of the two classic questions we&#146;ll consider is this: &#147;When should virtual functions be public, protected, or private?&#148; The short answer is: rarely if ever, sometimes, and by default, respectively &#151; the same answer we&#146;ve already learned for other kinds of class members.</p>
<p>Most of us have learned through bitter experience to make all class members private by default unless we really need to expose them. That&#146;s just good encapsulation. Certainly we&#146;ve long ago learned that data members should always be private (except only in the case of C-style data structs, which are merely convenient groupings of data and are not intended to encapsulate anything). The same also goes for member functions, and so I propose the following guidelines, which could be summarized as a statement about the benefits of privatization.</p>
<p><I>Guideline #1: Prefer to make interfaces nonvirtual, using Template Method.</I></p>
<p>Traditionally, we would write base classes using public virtual functions to directly and simultaneously specify both the interface and the customizable behavior. For example, we might write:</p>

<pre>
// Example 1: A traditional base class.
//
class Widget
{
public:
  // Each of these functions might
  // optionally be pure virtual, and if
  // so might or might not have an
  // implementation in Widget; see
  // Item 27 in <a href="#1">[1]</a>.
  //
  virtual int  Process( Gadget&amp; );
  virtual bool IsDone();
  // ...
};
</pre>

<p>The problem is the &#147;simultaneously&#148; part, because each virtual function is doing two jobs: it&#146;s <I>specifying interface</I> because it&#146;s public and therefore directly part of the interface <B>Widget</B> presents to the rest of the world, and it&#146;s <I>specifying implementation detail</I>, namely the internally customizable behavior, because it&#146;s virtual and therefore provides a hook for derived classes to replace the base implementation of that function (if any). That a public virtual function inherently has two significantly different jobs is a sign that it&#146;s not separating concerns well and that we should consider a different approach.</p>
<p>What if we want to separate the specification of interface from the specification of the implementation&#146;s customizable behavior? Then we end up with something that should remind us strongly of the Template Method pattern <a href="#2">[2]</a>, because that&#146;s exactly what it is:</p>

<pre>
// Example 2: A more modern base class,
// using Template Method to separate
// interface from internals.
//
class Widget
{
public:
  // Stable, nonvirtual interface.
  //
 // uses DoProcess...()
  int  Process( Gadget&amp; );
// uses DoIsDone()
  bool IsDone();
  // ...

private:
  // Customization is an implementation
  // detail that may or may not directly
  // correspond to the interface. Each 
  // of these functions might optionally
  // be pure virtual, and if so might or
  // might not have an implementation
  // in Widget; see Item 27 in <a href="#1">[1]</a>.
  //
  virtual int  DoProcessPhase1( Gadget&amp; );
  virtual int  DoProcessPhase2( Gadget&amp; );
  virtual bool DoIsDone();
  // ...
  };
</pre>

<p>Prefer to use Template Method to make the interface stable and nonvirtual, while delegating customizable work to nonpublic virtual functions that are responsible for implementing the customizable behavior. After all, virtual functions are designed to let derived classes customize behavior; it&#146;s better to not let publicly derived classes also customize the inherited interface, which is supposed to be consistent.</p>
<p>The Template Method approach has several benefits and no significant drawbacks.</p>
<p>First, note that the base class is now in complete control of its interface and policy and can enforce interface preconditions and postconditions, insert instrumentation, and do any similar work all in a single convenient reusable place &#151; the nonvirtual interface function. This promotes good class design because it lets the base class enforce the substitutability compliance of derived classes in accord with the Liskov Substitution Principle <a href="#3">[3]</a>, to whatever extent enforcement makes sense. If efficiency is an issue, the base class can elect to check certain kinds of preconditions and postconditions only in a debug mode, for example via a non-debug &#147;release&#148; build that completely removes the checking code from the executable image, or via a configurable debug mode that suppresses selected checking code at run time.</p>
<p>Second, when we&#146;ve better separated interface and implementation, we&#146;re free to make each take the form it naturally wants to take instead of trying to find a compromise that forces them to look the same. For example, notice that in Example 2 we&#146;ve incidentally decided that it makes more sense for our users to see a single <B>Process</B> function while allowing more flexible customization in two parts, <B>DoProcessPhase1</B> and <B>DoProcessPhase2</B>. And it was easy. We couldn&#146;t have done this with the public virtual version without making the separation also visible in the interface, thereby adding complexity for the user who would then have to know to call two functions in the right way. (For more discussion of a related example, see also Item 23 in <a href="#4">[4]</a>.)</p>
<p>Third, the base class is now less fragile in the face of change. We are free to change our minds later and add precondition and postcondition checking, separate processing into more steps, refactor, implement a fuller interface/implementation separation using the Pimpl idiom <a href="#4">[4]</a>, or make other modifications to <B>Widget</B>&#146;s customizability without affecting the code that uses <B>Widget</B>. For example, it&#146;s much more difficult to start with a public virtual function and later try to wrap it for precondition and postcondition checking after the fact, than it is to provide a dumb passthrough nonvirtual wrapper up front (even if no checking or other extra work is immediately needed) and insert the checking later. (For more discussion of how a class like <B>Widget</B> is less fragile and more amenable to future revision and refactoring, see <a href="#5">[5]</a>.)</p>
<p>&#147;But, but, but,&#148; some have objected, &#147;let&#146;s say that all the public nonvirtual function does initially is pass through to the private virtual one. It&#146;s just one stupid little line. Isn&#146;t that pretty useless, and indeed haven&#146;t we lost something? Haven&#146;t we lost some efficiency (the extra function call) and added some complexity (the extra function)?&#148; No, and no. First, a word about efficiency: no, none is lost in practice because if the public function is a one-line passthrough declared <B>inline</B>, all compilers I know of will optimize it away entirely, leaving no overhead. (Indeed, some compilers will always make such a function <B>inline</B> and eliminate it, whether you personally really wanted it to or not, but that&#146;s another story.) Second, a word about complexity: the only complexity is the extra time it takes to write the one-line wrapper function, which is trivial. Period. That&#146;s it. <I>C&#146;est tout</I>. The interfaces are unaffected: the class still has exactly the same number of public functions for a public user to learn, and it has exactly the same number of virtual functions for a derived class programmer to learn. Neither the interface presented to the outside world, nor the inheritance interface presented to derived classes, has become any more complex in itself for either audience. The two interfaces are just explicitly separated, is all, and that is a Good Thing.</p>
<p>Well, that justifies nonvirtual interfaces and tells us that virtual functions benefit from being nonpublic, but we haven&#146;t really answered whether virtual functions should be private or protected. So let&#146;s answer that.</p>
<p><I>Guideline #2: Prefer to make virtual functions private.</I></p>
<p>That&#146;s easy. This lets the derived classes override the function to customize the behavior as needed, without further exposing the virtual functions directly by making them callable by derived classes (as would be possible if the functions were just protected). The point is that virtual functions exist to allow customization; unless they also need to be invoked directly from within derived classes&#146; code, there&#146;s no need to ever make them anything but private. But sometimes we do need to invoke the base versions of virtual functions (see <a href="#5">[5]</a> for an example), and in that case only it makes sense to make those virtual functions protected, which leads to the next guideline.</p>
<p><I>Guideline #3: Only if derived classes need to invoke the base implementation of a virtual function, make the virtual function protected.</I></p>
<p>The bottom line is that Template Method as applied to virtual functions nicely helps us to separate interface from implementation. It&#146;s possible to make the separation even more complete, of course, by completely divorcing interface from implementation using patterns like Bridge <a href="#2">[2]</a>, idioms like Pimpl (principally for managing compile-time dependencies and exception safety guarantees) [<a href="#1">1</a>, <a href="#4">4</a>] or the more general handle/body or envelope/letter <a href="#6">[6]</a>, or other approaches. Unless you need a more complete interface/implementation separation, though, Template Method will often be <I>sufficient</I> for your needs. On the flip side, I am arguing that this use of Template Method is also a good idea to adopt by default and view as a <I>necessary</I> minimum separation in practice in new code. After all, it costs nothing (beyond writing an extra line of code) and buys quite a bit of pain reduction down the road.</p>
<p>Former communist countries are learning the benefits of privatization, in those cases where privatization makes sense. The lesson of healthy privatization is likewise not lost on good class designers. For more examples of using the Template Method pattern to privatize virtual behavior, see <a href="#4">[4]</a>.</p>
<p>Speaking of <a href="#4">[4]</a>, did you notice that the code there presented a public virtual destructor? This brings us to the second topic of this month&#146;s column.</p>

<H3><FONT COLOR="#000080">Virtual Question #2: What About Base Class Destructors?</FONT></H3>

<p>The second classic question we&#146;ll consider is that old destructor chestnut: &#147;Should base class destructors be virtual?&#148;</p>
<p>Sigh. I wish this were only a frequently asked question. Alas, it&#146;s more often a frequently debated question. If I had a penny for every time I&#146;ve seen this debate, I could buy a cup of coffee. Not just any old coffee, mind you &#151; I could buy a genuine Starbucks Venti double-Valencia latte (my current favorite). Maybe even two of them, if I was willing to throw in a dime of my own.</p>
<p>The usual answer to this question is: &#147;Huh? Of course base class destructors should always be virtual!&#148; This answer is wrong, and the C++ Standard library itself contains counterexamples refuting it, but it&#146;s right often enough to give the illusion of correctness.</p>
<p>The slightly less usual and somewhat more correct answer is: &#147;Huh? Of course base class destructors should be virtual if you&#146;re going to delete polymorphically (i.e., delete via a pointer to base)!&#148; This answer is technically right, but doesn&#146;t go far enough.</p>
<p>I&#146;ve recently come to conclude that the fully correct answer is Guideline #4.</p>
<p><I>Guideline #4: A base class destructor should be either public and virtual, or protected and nonvirtual.</I></p>
<p>Let&#146;s see why this is so.</p>
<p>First, an obvious statement: clearly any operation that will be performed through the base class interface, and that should behave virtually, should be virtual. That&#146;s true even with Template Method, above, because although the public interface function is nonvirtual, the work is delegated to a nonpublic virtual function, and we get the virtual behavior that we need.</p>
<p>If deletion, therefore, can be performed polymorphically through the base class interface, then it must behave virtually and must be virtual. Indeed, the language requires it &#151; if you delete polymorphically without a virtual destructor, you summon the dreaded specter of &#147;undefined behavior,&#148; a specter I personally would rather not meet in even a moderately well-lit alley, thank you very much. Hence:</p>

<pre>
// Example 3: Obvious need for virtual 
// destructor.
//
class Base { /*...*/ };

class Derived : public Base { /*...*/ };

// Base::~Base() had better be virtual!
Base* b = new Derived;
delete b; 
</pre>

<p>Note that the destructor is the one case where the Template Method pattern <I>cannot</I> be applied to virtual functions. Why not? Because once execution reaches the body of a base class destructor, any derived object parts have already been destroyed and no longer exist. If the <B>Base</B> destructor body were to call a virtual function, the virtual dispatch would reach no further down the inheritance hierarchy than <B>Base</B> itself. In a destructor (or constructor) body, further-derived classes just don&#146;t exist any more (or yet).</p>
<p>But base classes need not always allow polymorphic deletion. For example, in the standard library itself, consider classes such as <B>std::unary_function</B> and <B>std::binary_function</B>. Those two classes look like this <a href="#7">[7]</a>:</p>

<pre>
template &lt;class Arg, class Result&gt;
struct unary_function
{
  typedef Arg    argument_type;
  typedef Result result_type;
};

template &lt;class Arg1, class Arg2, class Result&gt;
struct binary_function
{
  typedef Arg1   first_argument_type;
  typedef Arg2   second_argument_type;
  typedef Result result_type;
};
</pre>

<p>Both classes are specifically intended to be used as base classes (in order to inject those standardized <B>typedef</B> names into derived classes) and yet do not provide virtual destructors because they are not intended to be used for polymorphic deletion. That is, code like the following is not merely unsanctioned but downright illegal, and it&#146;s reasonable for you to assume that such code will never exist:</p>

<pre>
// Example 4: Illegal code that you can
// assume will never exist.
//
void f( std::unary_function* f )
{
  delete f; // error, illegal
}
</pre>

<p>Note that the Standard tut-tuts and declares Example 4 to fall squarely in the Undefined Behavior Pit, but the Standard doesn&#146;t actually require a compiler to prevent you or anyone else from writing that code (more&#146;s the pity). It would be easy and nice &#151; and it wouldn&#146;t break any standards-conforming C++ programs that exist today &#151; to give <B>std::unary_function</B> (and other classes like it) an empty but <I>protected</I> destructor, in which case a compiler would actually be required to diagnose the error and toss it back in the offender&#146;s face. Maybe we&#146;ll see such a change in a future revision to the Standard or maybe we won&#146;t, but it would be nice to make compilers reject such code instead of just making tut-tut noises in standardish legalese.</p>
<p>Finally, what if a base class is concrete (can be instantiated on its own), but also wants to support polymorphic destruction? Doesn&#146;t it need a public destructor then, since otherwise you can&#146;t easily create objects of that type? That&#146;s possible, but only if you&#146;ve already violated another guideline, to wit: <I>Don&#146;t derive from concrete classes</I>. Or, as Scott Meyers puts it in Item 33 of <a href="#8">[8]</a>, &#147;Make non-leaf classes abstract.&#148; (Admittedly, it can happen in practice &#151; in code written by someone else, of course, not by you! &#151; and in this one case, you may have to have a public virtual destructor just to accommodate what&#146;s already a poor design. Better to refactor and fix the design, though, if you can.)</p>
<p>In brief, then, you&#146;re left with one of two situations. Either: a) you want to allow polymorphic deletion through a base pointer, in which case the destructor must be virtual and public; or b) you don&#146;t, in which case the destructor should be nonvirtual and protected, the latter to prevent the unwanted usage.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>In summary, prefer to make base class virtual functions private (or protected if you really must). This separates the concerns of interface and implementation, which stabilizes interfaces and makes implementation decisions easier to change and refactor later. For normal base class functions:</p>

<UL><LI>   Guideline #1: Prefer to make interfaces nonvirtual, using Template Method.</LI>
<LI>   Guideline #2: Prefer to make virtual functions private.</LI>
<LI>   Guideline #3: Only if derived classes need to invoke the base implementation of a virtual function, make the virtual function protected.</LI></UL>

<p>For the special case of the destructor only:</p>

<UL><LI>   Guideline #4: A base class destructor should be either public and virtual, or protected and nonvirtual.</LI></UL>

<p>True, the standard library itself does not always follow these design criteria. In part, that&#146;s a reflection of how we as a community have learned over the years.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  H. Sutter. <I>More Exceptional C++</I> (Addison-Wesley, 2001).</p>
<p><a name="2"></a>[2]  Gamma, Helm, Johnson, and Vlissides. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995).</p>
<p><a name="3"></a>[3]  B. Liskov. &#147;Data Abstraction and Hierarchy,&#148; <I>SIGPLAN Notices</I>, May 1988.</p>
<p><a name="4"></a>[4]  H. Sutter. <I>Exceptional C++</I> (Addison-Wesley, 2000).</p>
<p><a name="5"></a>[5]  J. Hyslop and H. Sutter. &#147;Conversations: Virtually Yours,&#148; <I>C/C++ Users Journal C++ Experts Forum</I>, December 2000, &lt;www.cuj.com/experts/1812/hyslop.htm&gt;.</p>
<p><a name="6"></a>[6]  J. Coplien. <I>Advanced C++ Programming Styles and Idioms</I> (Addison-Wesley, 1992).</p>
<p><a name="7"></a>[7]  ISO/IEC 14882:1998(E), Programming Languages &#151; C++ (ISO and ANSI C++ Standard).</p>
<p><a name="8"></a>[8]  S. Meyers. <I>More Effective C++</I> (Addison-Wesley, 1996).</p>

<p><i><B>Herb Sutter</B> (&lt;www.gotw.ca&gt;) is secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I> (available summer 2001). Herb is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

</blockquote></body></html>
