<HTML>   
     <HEAD>
<TITLE>September 2001/Image Rotation Using OpenGL Texture Maps</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Graphics</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Image Rotation Using OpenGL Texture Maps</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Shehrzad Qureshi</FONT></H3>

<BLOCKQUOTE>
<p>Here's a new twist on rotating images efficiently.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Image rotation is a computationally expensive operation. The classical method for image rotation works backwards, in a sense. Assuming an image <I>f</I> is to be rotated about its center by <font face="Symbol">q</font> degrees, the typical software implementation proceeds by starting with the output image <I>g</I>. Each pixel in the rotated image is mapped back into the input image space by a rotation of <I>-</I>q degrees. So, for each pixel <I>g(x',y')</I>, we must find a corresponding <I>f(x,y)</I> such that :</p>

<p>Equation 1:</p>

<p><I>x = x' </I>cos <font face="Symbol">q</font> <I>- y'</I> sin <font face="Symbol">q</font></p>
<p><I>y = y' </I>cos <font face="Symbol">q</font> <I>+ x'</I> sin <font face="Symbol">q</font></p>

<p>Due to the trigonometric terms in the above expression, more often than not <I>x</I> and <I>y</I> will not be integers. As a result, an interpolation such as bilinear interpolation is useful to properly reconstruct the image at the point <I>(x',y')</I>(see <a href="sidebar.htm">sidebar</a>).</p>
<p>This article will demonstrate an alternative method of rotating image bitmaps, through the use of OpenGL texture maps. Texture maps are patterns or images that can be &#147;attached&#148; onto arbitrary surfaces <a href="#1">[1]</a>. This rotation algorithm is alluded to in the ubiquitous &#147;red book&#148; <a href="#2">[2]</a>, which all aspiring &#151; and accomplished &#151; OpenGL programmers should be familiar with. If an application requires the same image to be interactively rotated, or in the case of image registration algorithms rotated by varying perturbed values of <font face="Symbol">q</font>, then this implementation will be very efficient. The main performance bottlenecks are the instantiation of the OpenGL texture map object and the extraction of the image data from the frame buffer. If you have access to a high-performance graphics accelerator (and who doesn&#146;t nowadays?), simply let the hardware do all the work! Furthermore, the code presented in this article can be extended to incorporate translational displacements and more general forms of spatial warping. Spatially warping an image in this context means applying some geometric transform to each and every pixel. Basically, the client supplies the &#147;image warper&#148; with some arbitrary coordinate transformation that shall be applied to all pixels in the input image. You can think of the image rotation problem described in this article as a subset of these aforementioned warpings, with the coordinate transformation being Equation 1.</p>
<p>One way of rendering an image using OpenGL is through the use of <B>glDrawPixels</B>. Basically, the programmer tells OpenGL the raster position and then OpenGL simply writes the pixel data directly to the frame buffer. Usage of pixel functions such as <B>glDrawPixels</B> bypasses the transformation pipeline. This article describes an alternative way of rendering an image. This is accomplished by texture mapping a polygon. The vertex coordinates of our polygon (in this case, a rectangle) can subsequently be transformed by the graphics pipeline. Since the polygon has been texture-mapped with the image data, when I transform the polygon coordinates, I subsequently transform the image pixel data. The code that implements this scheme was developed and tested with Visual C++ v6.0 (NT4), using the OpenGL DLL provided by Microsoft (<B>opengl32.dll</B>).</p>

<H3><FONT COLOR="#000080">Initializing the Texture Map</FONT></H3>

<p><a href="list1.htm">Listing 1</a> contains the OpenGL initialization code for the aforementioned texture-mapping scheme. The model-view and projection transformations are set up for two-dimensional rendering via the <B>gluOrtho2D</B> call. These parameters define the width and height of the orthographic viewing volume, sometimes referred to as a &#147;rectangular parallelepiped.&#148; This is in contrast to a perspective projection, which can be thought of as a &#147;frustum,&#148; or truncated pyramid. As its name suggests, using a perspective projection results in objects closer to the viewing location appearing larger, while objects farther away appear smaller, culminating in a vanishing point that depends on the characteristics of the frustum. For simplicity, this application utilizes an <I>orthographic projection</I>, where the relative distance from the viewing location to the object does not matter (i.e., objects far away are rendered the same as if they are very close). In order to implement the generalized warping techniques alluded to earlier, you would need to use a perspective projection.</p>
<p>In order to avoid unwanted subtle changes in the image dot pitch (spatial resolution), you need to be careful with the inputs to <B>gluOrtho2D</B>. For example, suppose you want to render an MxN image onto a rendering context that is also of size MxN pixels, which can be specified by an appropriate call to <B>glViewport</B>. In this case, <B>gluOrtho2D(0,N,0,M)</B> is actually incorrect. Remember, OpenGL is zero-based, and the effect of this call will be to scale the pixel values so that OpenGL renders an MxN image onto an (M+1)x(N+1) rendering context. In order to maintain spatial resolution, the correct call is <B>gluOrtho2D(0,N-1,0,M-1)</B>, or as I have:</p>

<pre>
gluOrtho2D((-N/2)+.5,(N/2)-.5,
           (-M/2)+.5,(M/2)-.5)
</pre>

<p>The motive for the latter form is because I want to rotate the image about its center point; defining the coordinate system in this fashion allows me to fix the OpenGL origin squarely in the center of the image. Since I am going to rotate the image about its center, the subsequent viewing transformations are trivial, as I will soon show.</p>
<p>The remainder of the initialization code is fairly straightforward. Texture mapping is enabled and configured, and a GL texture map identifier is created. Finally, a display list is compiled, which defines the vertices of the square that are to be texture mapped, and also which maps texel <a href="#3">[3]</a> coordinates to these same vertices (see <a href="fig1.htm">Figure 1</a>).</p>
<p>Display lists are an OpenGL optimization mechanism, whereby instead of constantly redefining primitives directly within the main rendering loop, a &#147;pre-compiled&#148; (to borrow OpenGL parlance) primitive list is called each time through the rendering loop.</p>

<H3><FONT COLOR="#000080">The Rendering Loop</FONT></H3>

<p><a href="list2.htm">Listing 2</a> contains the code that executes whenever the window needs to be painted (i.e., the function that the MFC framework method <B>OnPaint</B> calls). The <B>CglrotateDlg</B> class encapsulates an attribute <B>m_fTheta</B>, which is the angle of rotation. <B>glRotatef(m_fTheta, 0.0, 0.0, 1.0)</B> essentially spins the model-view coordinate frame about its z axis (think of this axis as being perpendicular to your monitor screen), with the effect on the texture-mapped polygon shown in <a href="fig2.htm">Figure 2</a>.</p>
<p>Since texture mapping has been enabled, the display list subsequently tells OpenGL to draw the input image onto this polygon, as if it were a decal. In fact, previously I had OpenGL treat the image as if it were a sticker via the call to <B>glTexEnvf</B>. An alternative, which is a key element to another computer graphics technique called &#147;bump-mapping,&#148; is for OpenGL to modulate or vary the image pixel intensities based upon the polygon&#146;s color. This option could have been specified by first defining colors for each of the polygon&#146;s vertices and then supplying <B>GL_MODULATE</B> instead of <B>GL_DECAL</B> as a parameter to <B>glTexEnvf</B>.</p>

<H3><FONT COLOR="#000080">MFC and BMP File Format</FONT></H3>

<p>The complete distribution (located on the <I>CUJ</I> website at &lt;www.cuj.com/code&gt;) includes two sample BMP files that can be used by this application (any BMP image can be used). BMP image files are stored in the MS Windows DIB (Device Independent Bitmap) format. As is the Microsoft creed, there are countless permutations of DIB storage (apparently beginning with Windows 2000, DIBs can even encapsulate JPEGs!), none of which work well with OpenGL. For a more in-depth treatment of this subject, I encourage the reader to peruse Dale Rogerson&#146;s excellent MSDN tutorial <a href="#4">[4]</a>. Suffice it to say, a not-so-well documented function <B>auxDIBImageLoadA</B> <a href="#5">[5]</a> is used that takes care of the gory details of translating any DIB into a format that can be used as an RGB image array that OpenGL understands.</p>
<p>While on the subject of these bitmap images, one major caveat is that OpenGL requires texture maps to have dimensions that are a power of two. This restriction arises from a feature called &#147;mip-mapping,&#148; a mechanism by which OpenGL can efficiently filter texture maps so that they scale nicely. This application doesn&#146;t employ mip-maps; however there is the possibility that the input image size is not a power of two. There are two courses of action here. Either the input image can be padded (i.e., add margins where necessary), or the image can be scaled appropriately. This application uses the latter. I know of two convenient functions that accomplish this goal. One way is to use the GDI function <B>StretchDIBits</B>. In the name of being less &#147;windows-centric,&#148; I decided to use the OpenGL utility function <B>gluScaleImage</B> to scale an input image so that its dimensions are a power of two, if this is indeed necessary. The method <B>CglrotateDlg::TexMapScalePow2</B> does just that.</p>
<p>Another interesting method deals with the extraction and saving of the rendered image. The callback method <B>CglrotateDlg::OnSaveBmp</B> deals with reading the image data from the frame buffer. Note the call to <B>SetForegroundWindow</B> &#151; this call raises a window and <I>must be called prior to reading the frame buffer</I> <a href="#6">[6]</a>. Next, I tell Windows to suspend drawing within the window via a call to <B>LockWindowUpdate</B>. The frame buffer data can now safely be read into an RGB array. Once this is done, the suspension of drawing activity is lifted.</p>
<p>The final problem is saving the image back to disk in the BMP file format. Alas, there is no analogue to <B>auxDIBImageLoadA</B> for saving BMP files. By perusing MSDN, I was able to discern just enough about the file format to be able to save the image data in a raw (uncompressed) RGB format. In fact, it&#146;s quite simple, after one takes into account that the rows of image data must be aligned on <B>DWORD</B> boundaries, and the color channels need to be in BGR order. (As an aside &#151; why on earth did Microsoft choose this particular order? Is it merely to make programmer&#146;s lives difficult, or is there any significance to the fact that blue-green-red is backwards from the order that most everyone is familiar with?)</p>
<p>When the application starts, click on the right mouse button to bring up a pop-up menu. After loading in an image, it can be interactively rotated by using the &#147;&lt;&#148; and &#147;&gt;&#148; keys. The &#147;0&#148; key resets the angle of rotation to zero. <a href="fig3.htm">Figure 3</a> shows some screen-shots using an example image provided, and <a href="tab1.htm">Table 1</a> is a summary of the methods I overrode with the <B>ClassWizard</B> so that code archeologists have an easier time understanding the class.</p>
<p>In recent years, the use of texture maps has become commonplace in the world of 3-D computer graphics, partly because of their inherent flexibility and efficiency, but also because they are so visually rewarding. I hope I have given you a glimpse as to the power of texture maps, while also illustrating a somewhat unconventional usage of this powerful feature.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  The term &#147;texture mapping&#148; refers to the process of actually mapping these patterns or images onto arbitrary parameterized surfaces. The mathematics behind how the graphics pipeline actually accomplishes this can be quite involved. A very clear explanation can be found in <I>3D Computer Graphics</I> by Alan Watt (Addison-Wesley, 1999).</p>
<p><a name="2"></a>[2]  OpenGL Architecture Review Board. <I>OpenGL Programming Guide</I>, 2nd Edition, January 1997.</p>
<p><a name="3"></a>[3]  The term texel is analogous to pixel. Pixel stands for &#147;picture element,&#148; while texel stands for &#147;texture element.&#148;</p>
<p><a name="4"></a>[4]  Dale Rogers. &#147;OpenGL V: Translating Windows DIBs,&#148; &lt;http://msdn.microsoft.com/library/techart/msdn_gl5.htm&gt;.</p>
<p><a name="5"></a>[5]  Ron Fosner. <I>OpenGL Programming for Windows 95 and Windows NT</I> (Addison-Wesley, 1996).</p>
<p><a name="6"></a>[6]  OpenGL Developers FAQ. &#147;Why don&#146;t I get valid pixel data for an overlapped area when I call <B>glReadPixels()</B> where part of the window is overlapped by another window?&#148;, &lt;www.opengl.org/developers/faqs/technical/rasterization.htm#rast0070&gt;.</p>

<p><i><B>Shehrzad Qureshi</B> has a BS in Computer Science from UC Davis, and an MS in Computer Engineering from Santa Clara University. He is a software engineer at Accuray Inc., where he works primarily on medical image processing applications. In his spare time, he enjoys racquetball and reruns of &#147;Law &amp; Order.&#148; He can be reached at <B>shehrzad_q@hotmail.com</B>.</i></p>

<h4><a href="../../../source/2001/sep01/qureshi.zip"></a></h4>
</blockquote></body></html>
