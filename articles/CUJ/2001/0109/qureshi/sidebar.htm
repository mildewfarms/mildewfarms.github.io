<html><HEAD>
<TITLE>September 2001/Image Rotation Using OpenGL Texture Maps/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Bilinear Interpolation</FONT></H3>

<HR>

<BLOCKQUOTE>

<p>Like most pixel-wise operations, bilinear interpolation can be quite expensive. Referring to Equation 1, suppose that x = 3.14 and y = 5.9. Bitmap images are typically represented as two-dimensional arrays. However, here the image rotation algorithm needs an indexing operation equivalent to <I>f[3.14][5.9]</I>. Clearly, such an operation is not valid with standard &#147;plain-jane&#148; C code. (It could, however, provide one with an interesting use of operator overloading, given access to a C++ image class.) Hence, the rotation algorithm needs to compute a pixel value approximating what it would be if it had the necessary precision to directly access the image intensity at <I>f[3.14][5.9]</I>.</p>
<p>Essentially, bilinear interpolation is nothing more than a weighted mean. A local neighborhood is constructed, and weight factors <font face="Symbol">a</font> and <font face="Symbol">b</font> are computed (see <a href="fig4.htm">Figure 4</a>).</p>
<p>For this example, <font face="Symbol">a</font> = .14, <font face="Symbol">b</font> = .9, (UL<sub>x</sub>,UL<sub>y</sub>)=(3,5), (UR<sub>x</sub>,UR<sub>y</sub>)=(4,5), (LL<sub>x</sub>,LL<sub>y</sub>)=(3,6), and (LR<sub>x</sub>,LR<sub>y</sub>)=(4,6). Using these definitions, to compute the pixel intensity <I>f(x,y)</I>, where <I>x</I> and <I>y</I> are not integers, the following set of equations hold:</p>
<p><I>g</I>1 = (1-<font face="Symbol">a</font>) <I>f</I>(<I>UL</I><sub>x</sub><I>,UL</I><sub>y</sub>)<I>+</I>(<font face="Symbol">a</font>) <I>f</I>(<I>UR</I><sub>x</sub><I>,UR</I><sub>y</sub>)</p>
<p><I>g</I>2 = (1-<font face="Symbol">a</font>) <I>f</I>(<I>LL</I><sub>x</sub><I>,LL</I><sub>y</sub>)<I>+</I>(<font face="Symbol">a</font>) <I>f</I>(<I>LR</I><sub>x</sub><I>,LR</I><sub>y</sub>)</p>
<p><I>f</I>(<I>x,y</I>)<I> = </I>(1<I>-</I><font face="Symbol">b</font>)<I>g</I><sub>1</sub><I> + </I>(<font face="Symbol">b</font>)<I>g</I><sub>2</sub></p>
<p>Higher-order interpolative methods, such as &#147;bi-cubic interpolation,&#148; or cruder, but computationally faster interpolation methods, such as &#147;nearest-neighbor interpolation,&#148; are alternatives. Higher-order interpolation methods use polynomial functions in order to compute pixel intensities. Nearest-neighbor interpolation, as its name suggests, simply returns the closest (in proximity) pixel value. For example, here nearest-neighbor would return <I>f(3,5)</I>. The OpenGL function <B>glTexParameteri</B> allows the programmer to specify the interpolation method OpenGL should use when scaling texture maps.</p></blockquote></body></html>
