<HTML>   
     <HEAD>
<TITLE>September 2001/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">This Sentence Is False</FONT></H3>

<p>A child can appreciate the predicament the statement above presents. With four simple words, the mind is swept into the wondrous realms of the unprovable. I am reluctant to admit that I didn&#146;t encounter those wonders until I took my first course in the Theory of Computation at the University of Arizona, under the expert tutelage of Dr. Peter Downey. (Please don&#146;t ask how long ago that was.) Having previously spent years as a student of mathematics proving theorems, I found the idea of undecidable propositions both intriguing and unsettling. How could this be? Can we not design logical systems that are totally consistent? In a word, no. According to G&ouml;del&#146;s Incompleteness Theorem, any &#147;sufficiently rich&#148; system (beyond the complexity of the integers under addition and subtraction, say) will give rise to statements that cannot be proven. Think about it. The mathematical systems that guide our satellites, engineer our society&#146;s infrastructure, and govern the development of the innards of the computer you spend so many hours in front of also have potentially frightening inconsistencies &#151; black holes, if you will. I see two perspectives on this situation: 1) proceed with caution, lest you create a monster, or 2) throw caution to the wind and partake, while side-stepping those surprising singularities as you encounter them (if you&#146;re lucky). I find myself in between the two extremes most of the time. Ah, the joy of life&#146;s complexities!</p>
<p>C++ is a rich logical system. It has many known dark boundaries (labeled &#147;undefined&#148; or &#147;indeterminate&#148; by the C++ Standard), and many unknown ones I&#146;m sure. Yet it is also sufficiently rich that we are still discovering many new and interesting ways to use it. This fact stands as proof of the soundness of its fundamental design. While you and I may find ourselves longing for but not quite grasping that sense of total mastery over C++ that is so much easier to attain with some other languages, in it we have tools that enrich our experience as problem solvers. Dr. Iverson, inventor of APL, often stressed that language is a tool of thought. The richer the language, the richer the thinking.</p>
<p>Now, please don&#146;t get me wrong. I&#146;m a lover of the power of simplicity. But I also appreciate Einstein&#146;s great statement that solutions should be &#147;as simple as possible but no simpler.&#148; This maxim guides me as I patiently strive to grow in my mastery of C++. If you think about it, the basic constructs of C++ are simple: the syntax and semantics inherited from C coupled with member functions, operator overloading, templates, exceptions, RTTI, and namespaces &#151; and you don&#146;t have to use anything you don&#146;t need.</p>
<p>Among the many practical solutions in this month&#146;s issue, I especially appreciate and recommend Herb Sutter&#146;s counsel on virtual functions and class interface design. The idiom of a non-virtual interface with supporting, non-public virtual functions is not new and is found in the iostream library, but Herb&#146;s explanation is the clearest I&#146;ve ever read. I also found Matt Austern&#146;s extending of the iostream library with function objects quite enlightening.</p>
<p>No one knows everything about C++. (That sentence is true!) What I know makes me useful, and the fact that there is more to discover makes the journey rewarding. </p>
<p>Chuck Allison<br>
Senior Editor</p>
<B>Publisher&#146;s note:</B> <I>CUJ</I> is celebrating its 20th anniversary and we want you to be part of it! In our November 2001 issue, we&#146;ll publish a photograph of our most faithful subscriber with his/her earliest issue of <I>CUJ</I> (or <I>C Users Group Newsletter</I>). If that could be you, see page 48 for details. We&#146;ll also publish anniversary thoughts from readers &#151; if you want to contribute, email <B>cujeditor@cmp.com</B>, with &#147;CUJ 20&#148; as subject. Each reader whose photo or message is published will receive a <I>CUJ</I> 20th anniversary t-shirt.</p>
</blockquote></body></html>
