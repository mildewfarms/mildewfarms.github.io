<HTML>   
     <HEAD>
<TITLE>September 2001/A C++ Debug Stream for Win32</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">A C++ Debug Stream for Win32</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Mark Nelson</FONT></H3>

<BLOCKQUOTE>
<p>A simple class for printing trace statements while debugging in Windows &#151; just like in the Good Old Days.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>This article presents a class that attaches a C++ iostream object to a Win32 console window. The window can be enabled or disabled at will and provides an excellent vehicle for dumping debug output. Now that the C++ iostreams specification is standardized, this class should work properly with all future versions of Win32 compilers.</p>

<H3><FONT COLOR="#000080">Debugging the Old-Fashioned Way</FONT></H3>

<p>I might be giving away some hints about my age, but my favorite debugging tool has always been some variation on a print statement. This is probably because I formed most of my debugging habits in the days before the creation of the windowed symbolic source debuggers everyone takes for granted these days. High-powered debuggers are great tools, but unfortunately, you can&#146;t always count on them being available on your target system. Even if you are able to install a debugger on all your test systems, you still have to contend with potentially different behavior in your debug builds. That bug you&#146;ve been chasing for so long might not show up when optimization has been turned off!</p>
<p>To get around these types of problems, I have usually resorted to an unsophisticated trace function that I could turn on and off at run time. During the development process, I could quickly add trace statements in key spots and enable them later when trouble showed up. When writing console-mode batch programs with a command-line user interface, it was easy to spew a few lines of text in between prompts. You&#146;ve all seen interactive sessions with debug output like the following:</p>

<pre>
PayMaster&gt; Open Employee.dat
TRACE: fopen() returns 0x50691100
TRACE: get_index() returns OK
1534 records
Paymaster&gt;
</pre>

<p>This sort of debug output is a little bit obtrusive, but all the necessary user-interface elements are still visible, so it makes for an acceptable solution.</p>

<H3><FONT COLOR="#000080">Tracing with Windows</FONT></H3>

<p>The last 10 years have proven to be the death of the traditional line-oriented text UI. Once users got the hang of menu-driven programs that ran in text windows, they were hooked. The subsequent takeover of the desktop by the Windows GUI simply put the final nail in the coffin. For most of these new programming environments, printing directly to the main window just wasn&#146;t an option any more.</p>
<p>My personal debugging techniques ran into two big problems with the Windows API: lack of a suitable output window class, and lack of a flexible print function.</p>
<p>I&#146;ve never understood why Microsoft doesn&#146;t have a console text window class. It would be really convenient to be able to create a small window where you could simply print text messages. Like a standard MS-DOS console, such a window would support fixed-width fonts, scroll text when it received a line feed, and maybe obey the standard ANSI escape sequences. It would be a dream come true for debug output.</p>
<p>I&#146;ve cobbled together versions of this sort of window from time to time for various projects, but have never been entirely satisfied with the results. Doing the job right is not a trivial project and usually ends up being a fairly significant consumer of code space and CPU time. I&#146;ve tried using variations on edit or list controls. Subclassing these controls is more efficient, but the resulting windows are usually hamstrung by a few missing capabilities.</p>
<p>The second problem is the lack of a suitable output routine. When tracing console-mode programs, I could use the Standard C library&#146;s <B>printf</B> routine. The nice thing about using <B>printf</B> was that I didn&#146;t have to worry about allocating an intermediate buffer to hold my output text. But writing debug output to a window means using a function like <B>vsprintf</B> to format the text to a buffer, and then using a Windows function like <B>DrawText</B> or <B>OutputDebugString</B> to actually render the string to a window. Using <B>vsprintf</B> implies that you know in advance what your maximum buffer size is going to be. Worse yet, you don&#146;t have any way to check in advance for catastrophic buffer overruns.</p>
<p>Despite all this inconvenience, until recently most of my big Windows projects included a function that created and destroyed some sort of debug window, and a function or two for writing to that window. I would package these up in a single source file and provide a simple interface to them, defined in a file with a name like <B>debug.h</B> (see <a href="list1.htm">Listing 1</a>).</p>

<H3><FONT COLOR="#000080">Win32 and C++ Bring Big Improvements</FONT></H3>

<p>Over the past few years, most of my Windows work has migrated to the Win32 platform, with my most frequent choice of development tools being Visual C++. Using C++ in the Win32 environment has enabled me to make a major improvement in managing debug output: the <B>ConStream</B> class. The <B>ConStream</B> class neatly solves the two problems I talked about in the previous section. First, it uses the Win32 API to create a text-mode console window for output. This text window is not a full-fledged graphics window; it instead behaves just like the window you get when you open an MS-DOS window. Second, users don&#146;t have to resort to special-purpose output functions; to format output to this window, you use the <B>ConStream</B> class, which is derived from standard iostream classes.</p>
<p>Using the <B>ConStream</B> class is engagingly simple. You simply create one object of the class and make it visible everywhere it is going to be used. Since the <B>ConStream</B> object doesn&#146;t deal with a message loop or have an associated window, you don&#146;t have to worry about whether it is owned by another window; you can simply make it a global object. At any point in your program, you can open or close the debug window by calling the <B>Open</B> or <B>Close</B> member functions. When the window is created, it will pop up and look something like that shown in <a href="fig1.htm">Figure 1</a>.</p>
<p>Writing data to the debug window is done exactly as you would expect with a C++ iostream object. For example, if you have a global <B>ConStream</B> object called <B>Log</B>, you would send debug information to it like this:</p>

<pre>
Log &lt;&lt; "Success = " &lt;&lt; success &lt;&lt; "\n";
Log &lt;&lt; "Value = " &lt;&lt; value &lt;&lt; "\n";
</pre>

<p>If the <B>ConStream</B> window is closed, sending these log messages has no effect; they are simply dumped to the bit bucket. If the window is open, they are formatted and sent to the window just like you would expect. <a href="fig1.htm">Figure 1</a> shows the output from the sample code above.</p>
<p>That means you can safely leave your debug message code turned on at all times, confident that the messages will be displayed only if you open your window. And those worries about buffer overruns evaporate, since formatting and management of output text is handled by the compiler&#146;s standard library.</p>

<H3><FONT COLOR="#000080">How ConStream Does It</FONT></H3>

<p>The <B>ConStream</B> class is actually quite simple. The entire implementation consists of a single header file <B>ConStream.hpp</B> and a corresponding C++ source file <B>ConStream.cpp</B>. These are shown in <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>, respectively. As you can see in the listing, the code is compiled slightly differently depending on whether the <B>_UNICODE</B> macro is turned on. When this macro is turned on for a Windows 2000 or NT target, the debug window will display wide characters of type <B>wchar_t</B> instead of the standard <B>char</B> type. The ease with which this is accomplished is a testament to the design of the C++ Standard library.</p>
<p>The most important task for <B>ConStream</B> is to format data that is sent to it via the <B>&lt;&lt;</B> insertion operator. Naturally, it is desirable to take advantage of the formatting already provided by iostreams, by inheriting the behavior from existing library classes. That is accomplished in the first lines of the class definition:</p>

<pre>
class ConStream
#ifdef _UNICODE
  : public basic_ostream&lt;wchar_t&gt;
#else
  : public basic_ostream&lt;char&gt;
#endif
{
</pre>

<p>In case you&#146;re unfamiliar with <B>basic_ostream</B>, it is the templatized version of what you normally think of as class <B>ostream</B>. Fairly late in the standardization process, the ISO C++ committee made the brave decision to make the I/O classes in the library template classes based on the character type. While this made a lot of library code (although not application code) obsolete, it meant that the I/O classes weren&#146;t tied to any particular character type, which is a very good thing.</p>
<p>Inheriting from the <B>basic_ostream&lt;T&gt;</B> class is well and good, but when you insert characters into a <B>ConStream</B> object, who decides where they go? There are a number of ways to direct stream data, but <B>ConStream</B> does it by attaching itself to old-fashioned <B>FILE</B> objects from the <B>stdlib.h</B> <a href="#1">[1]</a> portion of the C++ Standard library.</p>
<p>To see this attachment process in action, examine the source for the <B>Open</B> function shown in <a href="list3.htm">Listing 3</a>. First, <B>Open</B> creates a console window, by calling the Windows API function <B>AllocConsole</B>. Next, <B>Open</B> obtains an OS handle for the console window, which is then converted to a low-level (<B>stdlib.h</B>) handle with the non-standard <B>_open_osfhandle</B> function call. That handle is then converted to a <B>FILE</B> pointer with another non-standard library call <a href="#2">[2]</a>: <B>_fdopen</B>.</p>
<p>The good news is that after that long string of conversions, <B>Open</B> finally has something that can be used to initialize an iostream object. The next line of code creates a <B>basic_filebuf</B> object, which is initialized with a <B>FILE</B> pointer. This particular <B>filebuf</B> constructor is one that provides some glue between the old C Standard library and the new C++ iostreams library.</p>
<p>The last step is to call the <B>init</B> function (a member of the <B>basic_ostream&lt;T&gt;</B> base class) with the <B>basic_filebuf</B> object as an argument. After all that work, any data inserted into the <B>ConStream</B> object will now be printed in the console window! The final call to <B>setf</B> (also a member of <B>basic_ostream&lt;T&gt;</B>) sets the stream to automatically flush after every line is inserted.</p>
<p>When the <B>ConStream</B> object is first constructed, or after the <B>Close</B> member function is called, there is no console window. In those cases, <B>ConStream</B> uses a similar process to direct the stream to the bit bucket, by calling <B>fopen</B> on &#147;NUL,&#148; which is the null output device on all Win32 operating systems. The code that does this is a little bit simpler, because it can skip the work needed to convert the console handle into a <B>FILE</B> pointer. Instead, the file pointer can be obtained directly from the call to <B>fopen</B>. You can see how this is done by examining the <B>ConStream</B> constructor at the top of <a href="list3.htm">Listing 3</a>.</p>

<H3><FONT COLOR="#000080">A Sample Program</FONT></H3>

<p><a href="list4.htm">Listing 4</a>, <B>ConStreamDemoDlg.cpp</B>, shows a very small sample program that demonstrates use of the <B>ConStream</B> class with Visual C++ 6.0. Note that the code also works properly with Visual C++ 5.0, which implemented much of the C++ Standard library. Debug statements are scattered around the program in a few key places, including in the handlers for gaining and losing focus in the edit control and in the handler for the Display button. The behavior of this simple dialog box based program is shown in <a href="fig2.htm">Figure 2</a>. The dialog has a single check box that can be used to create and destroy the debug window. The code in this simple demo program shows how simple it is to write new data to the <B>ConStream</B> window. It&#146;s definitely a step up from using <B>OutputDebugString</B> <a href="#3">[3]</a>!</p>
<p>If you use Windows 2000 or NT, you can change the demo program to a Unicode program by simply defining the <B>_UNICODE</B> macro and changing the program entry point (as described in VC++ online help.)</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>There is obviously a lot you could do to spiff up this debug facility. But to me, the best thing about it is its simplicity. I really like being able to add this to a program by simply adding two files to the project and then adding a simple data object to my main window. Better yet, the simplicity ensures that I don&#146;t spend any time trying to debug my debugging code! So until Microsoft unveils some improved versions of the console window, I&#146;ll probably keep using the <B>ConStream</B> class as is.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  To be more accurate, these headers inherited from the Standard C library are now supposed to be offered by C++ compilers without <B>.h</B> extensions. The header <B>stdlib.h</B> becomes <B>cstdlib</B>, <B>stdio.h</B> becomes <B>cstdio</B>, etc. There are some other important issues to be aware of in the repackaging of Standard C library functions; for instance, all the names in the old Standard C library headers have now become a part of namespace <B>std</B>. To read more about these <B>&lt;cxxx&gt;</B> headers, see &#147;Standard C/C++: Frequently Answered Questions,&#148; by P.J. Plauger, <I>CUJ</I>, November 1999.</p>
<p><a name="2"></a>[2]  These non-standard library calls are faithfully implemented in the libraries of the other major Win32 compiler vendors.</p>
<p><a name="3"></a>[3]  For those unfamiliar with Windows programming, <B>OutputDebugString</B> is one of Win32&#146;s main tracing APIs. </p>

<p><i><B>Mark Nelson</B> is a programmer for Cisco Systems in Richardson, Texas. He is presently working on IP Telephony projects for Cisco. You can reach Mark at <B>markn@ieee.org</B> or via his website at &lt;/www.dogma.net/markn&gt;.</i></p>

<h4><a href="../../../source/2001/sep01/nelson.zip"></a></h4>

</blockquote></body></html>
