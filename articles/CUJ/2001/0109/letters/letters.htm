<HTML>   
     <HEAD>
<TITLE>September 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocsep.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>I&#146;ve belatedly got my hands on your August 2000 issue. In it Craig Hicks offers his C/C++ Tip on creating an index table in STL. Not being qualified to judge on efficiency, I can&#146;t say whether his solution will outperform the STL, but I can say that there is a way to do it in STL without writing as much code. It&#146;s not a function; it&#146;s a container. The associative containers (<B>set</B>, <B>multiset</B>, <B>map</B>, <B>multimap</B>) all sort their contents according to a defined value; for sets, it&#146;s whatever is used to compare two contained objects by less-than (skating over some details, see below), while for <B>map</B>s, it&#146;s the index. For ease of use, let&#146;s do it with a <B>multimap</B>.</p>

<pre>
class Thing;
vector&lt;Thing&gt; lotsofthings;
multimap&lt;float,
  unsigned int&gt; indexedthings;

for(unsigned int n=0;
  n&lt;lotsofthings.size(); ++n)
{
  float value = lotsofthings[n].value();
  indexedthings.insert
    (make_pair(value,n));
}
</pre>

<p><B>indexedthings</B> is now sorted by <B>Thing::value</B> and iterating through it will give indices to <B>lotsfothings</B> in value-sorted order.</p>
<p>That&#146;s a lot less code. Whether it&#146;s a lot less work depends on your STL implementation. The above will, at my last look, fail with Solaris C++ because <B>multimap insert</B> seems to be broken. It will work with GNU (g++) for this case, because <B>float</B> and <B>unsigned int</B> are nice and simple. I was trying to do it with <B>map&lt;float, map&lt;float,void*&gt;::iterator&gt;</B> and compilation failed after successful parsing because the generated lines were too long. I had to derive a class with a nice simple name from the iterator to get it to work. SGI C++ is fine; I haven&#146;t looked further yet. The underlying problem for the GNU failure is that <B>map</B> and its iterators are themselves derived from (or simply are) red-black tree templated containers, so the full names can be lengthy template names. Even for SGI, trying to work out the errors is a pain, because the messages contain several layers of nested templates on a single wrapped line. If you&#146;re writing a compiler this week, please think about writing a few extra <B>&lt;&lt; endl</B>s to break the lines up. Doing it in the editor by hand is very tedious.</p>
<p>The complex return types for <B>map</B> and <B>multimap</B> for member functions like <B>find</B> (often pairs of pairs) have brought repeated trips to the STL reference books and raised a related question. Heap didn&#146;t make it into STL. But there is an STL <B>priority_queue</B> doing a similar thing: insert things into it and they come out the end in order. Having hacked away at associative containers a bit over this project now, it seemed logical to me that this would be done as a <B>multiset</B>. Insert the items (say, <B>Thing</B>s) with priority order defined by class <B>less&lt;Thing&gt;</B> whose <B>operator&lt;</B> compares <B>Thing::value</B>, and the top priority item is always available at set location <B>rbegin</B>. But when I read the books, priority queues are implemented with vector and deque. Why? Extraction at the back will be fine, but insertion will be slow. Sets should do both in reasonable (i.e., logarithmic) time. Does anyone know a good reason for this? And would heap (out at the top of the tree instead of the end) be any more efficient than <B>set</B>?</p>
<p>Many thanks.</p>
<p>Chris Marooney</p>

<p><I>Hi Chris,</I></p>
<p><I>Two things I like about your solution are:</I></p>
<p><I>(1)  The code is short and all in one place, i.e., no scrolling required.</I></p>
<p><I>(2)  You use </I><B>unsigned int</B><I> as the index table type instead of an iterator.</I></p>
<p><I>Concerning (1): To have all the information in one place is great. When that strategy is an option, I think it is best. Unfortunately, there are some times when such a strategy is not an option.</I></p>
<p><I>Consider</I></p>

<pre>
class Thing { int a, b, c;  };
</pre>

<p><I>where you want to sort on </I><B>a</B><I> first, </I><B>b</B><I> second, and </I><B>c</B><I> third. (Or suppose thing is a string.) Then we can&#146;t use </I><B>lotsofthings[n].value</B><I> as in your example.</I></p>
<p><I>That&#146;s where a functor comes in really handy. You can do almost anything with a functor except play the violin. How I would modify your code in such a case is as follows:</I></p>

<pre>
namspace SomeFunc_ns
{
struct disposable_ftr
{
  Thing* p;
  bool operator()(int x, int y)

    return p[x].a&lt;p[y].a
    || (p[x].a==p[y].a &amp;&amp;
      p[x].b&lt;p[y].b)
    || (p[x].a==p[y].a &amp;&amp;
      p[x].b==p[y].b) &amp;&amp;
      p[x].c&lt;p[y].c));
  }
}
}
void SomeFunc(...)
{
  using SomeFunc_ns;

  vector&lt;Thing&gt; lotsofthings;
  ............

  disposable_ftr f;
  f.p = &amp;*lotsofthings.begin();
  set&lt;unsigned int,
    &gt; indexedthings(f);
  for(unsigned int n=0;
    n&lt;lotsofthings.size(); ++n)
    indexedthings.insert(n));

  .................
}
</pre>

<p><I>You see I have taken the one level of indirection (an integer reference to an array) and the particular sorting requirement and bunged them both into </I><B>disposable_ftr</B><I> (which has no chance of ever being reused again), achieving a measure of economy.</I></p>
<p><I>This is disposable coding, the alter ego of reusable coding.</I></p>
<p><I>A reusable function:</I></p>

<pre>
template &lt;class T, class Comp=less&lt;T&gt;&gt;
struct reusable_ftr {
  T* p; bool operator()(int x, int y) {
    return Comp(p[x],p[y]);
  }
};
</pre>

<p><I>is of course also an option, but then the comparator must be supplied, and if the comparator is only going to be used once then nothing is gained.</I></p>
<p><I>Concerning (2): In the original suggestion, which appeared in August 2000, I gave the following reasons for using an index table:</I></p>
<p><I>Oftentimes when sorting an array, you do not want to actually rearrange the elements of the array, but rather to obtain an index table describing which number element is the first, which the second, etc. Two good reasons are: 1) The elements may be large and you don&#146;t want to copy that much memory. 2) You have others distinct arrays in one-to-one correspondence with the array whose order you want to query.</I></p>
<p><I>As you can see, reason (2) makes the use of an integer indexing preferable. Somehow this reason got lost in the ensuing discussion, and there was much criticism for using an integer instead of an iterator table.</I></p>
<p><I>While there is no heap container in STL, the necessary functions, </I><B>make_heap</B><I>, </I><B>pop_heap</B><I>, and </I><B>push_heap</B><I>, are there. Perhaps this is a good thing, giving us the utility without the policy about how it must be used (although you have to remember to adjust the container size yourself).</I></p>
<p><I>The best reason I can think of for using a random access container is that it allows </I><B>O(1)</B><I> access into the list of elements during the sorting process. This makes sense when a priority queue is constantly being added and deleted from (as opposed to being the object of a one-time sort), and one wishes to peek into the list during operation. Of course it is better not to use a priority queue for a one time sort because it will take time </I><B>O(n</B>2<B>)</B><I>.</I></p>
<p><I>As for heap, there is no way to access the elements in order during operation. Incidentally, my STL documentation gives insertion time (</I><B>push_heap</B><I>) as </I><B>O(ln n)</B><I>, but I think that it is only </I><B>O(1)</B><I> for the average case. Remember, most of the heap is at the bottom rung or two, so getting up to mid-level should only take one or two compares.</I></p>
<p><I>Respectfully Yours,</I></p>
<p><I>Craig Hicks</I></p>

<p><I>[As mentioned above, a priority queue is really just a heap data structure. The traditional way to implement heap operations efficiently is to use arrays (see any of the fine classic books by Aho, Hopcroft, and/or Ullman). Since we want to allow dynamic sizing in most cases, however, a vector or deque in place of a fixed-size array is a logical choice. The worst-case complexity remains logarithmic. &#151; cda]</I></p>

<hr><p>Re: C++0x</p>
<p>What is it and how can I find more about it?</p>
<p>Karl Beem</p>

<p><I>C++0x represents a future version of the C++ Standard that at the moment is taking shape in the minds of a very small number of people. Whenever a standard is accepted, as the C++ Standard was officially in 1998, the associated standards committee is at will to reopen work on the language after five years. A few eager visionaries are starting to look forward to that, but for the moment I wouldn&#146;t be too concerned. We&#146;re still waiting for compilers to completely implement C++98. If there is any news worth sharing about C++0x, you&#146;ll hear about it promptly in the pages of </I>CUJ<I>. &#151;cda</I></p>

<p><hr>Dear <I>CUJ</I>,</p>
<p>I had a question on the article &#147;Tip #7: A <B>remove_if</B> for <B>vector&lt;T *&gt;</B>&#148; by Harald Nowak (July 2001) that might be of general interest.</p>
<p>My group has had trouble using ATL smart pointers in a vector (e.g., <B>CComPtr</B> and <B>CComBstr</B>). We think it is because they override the <B>&amp;</B> operator. It seems <B>vector</B> uses <B>&amp;</B> in its internal implementation, and when it does, it gets what the smart pointer is trying to wrap (e.g., a COM interface pointer or a <B>BSTR</B>).</p>
<p>We found an ATL <B>CAdapt</B> class that doesn&#146;t do much more than overload <B>&amp;</B>. The purpose, we guess, is to a wrap a smart pointer when putting it in a vector. Now, when <B>vector</B> invokes the <B>&amp;</B>, it will get the smart pointer itself instead of what the smart pointer wraps.</p>
<p>Regards,</p>
<p>Gary Choncholas</p>

<p><I>Hence the dangers of using such a class in this context. Thanks for the heads up. &#151;cda</I></p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>A letter to the editor in the July 2001 edition of the <I>C/C++ User&#146;s Journal</I> hits a very raw nerve. Pfalzgraff applauds criticism of OO (object-oriented) development, describing a nightmare project that was &#147;made OO&#148; and &#147;The whole project had been wrapped in one BIG class&#148;. The project sounds deserving of criticism, but the ire toward OO is very misplaced in this case.</p>
<p>OO development is a process that begins with careful analysis of a problem and proceeds through the many stages of design, implementation, and testing. Projects are not &#147;made OO.&#148; Using C++ or Java does not make a project OO. Creating objects does not make a project OO. Understanding the syntax of C++ or Java does not make a programmer an OO programmer.</p>
<p>If the cited project had been subjected to a careful analysis, redesign, and re-implementation by people who truly understood OO development, only then would the project have been &#147;made OO,&#148; and I can guarantee that the outcome would have been successful. Unfortunately, the misconception that writing classes equates to OO development is widespread. And, like many other processes or tools, bad implementation is more likely the fault of those doing the implementation. Bad software developers will develop bad software, no matter what the language or development paradigm.</p>
<p>Jill Courte</p>

<hr><p>Dear <I>CUJ</I>,</p>
<p>Commendations to Matt Austern&#146;s article &#147;The Standard Librarian: Bitsets and Bit Vectors&#148; (May 2001) showing how STL&#146;s <B>vector&lt;bool&gt;</B> is a useful tool.</p>
<p>However, I have misgivings about having <B>vector&lt;bool&gt;</B> be a specialization of vector. In doing so, STL denies the possibility of using the general version of vector for the real &#147;bool&#148; type. The recent decision of the C++ committee to make vectors &#147;officially&#148; compatible with arrays recognizes the utility of being able to code with STL and then quickly switch to non-STL for interfacing.</p>
<p><B>vector&lt;bool&gt;</B> could have been left unspecialized, and a separate class &#147;bitvector&#148; created instead. No utility would have been lost, no extra coding required on the part of STL library writers, and the &#147;real&#148; <B>vector&lt;bool&gt;</B> would be available to behave as expected.</p>
<p>Craig Hicks</p>

<p><I>Craig,</I></p>
<p><I>Thank you for your kind words!</p>
<p><I>For what it&#146;s worth, many members of the C++ standardization committee agree with you that </I><B>vector&lt;bool&gt;</B><I> should have been a distinct class and that making it a specialization of </I><B>vector&lt;T&gt;</B><I> was a mistake. You can see some of the committee&#146;s thoughts about this matter on &lt;http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-active.html#96&gt;.</I></p>
<p><I>In practice, regardless of whether the </I><B>vector&lt;bool&gt;</B><I> specialization was a mistake, it&#146;s probably here to stay. Backward compatibility is a strong constraint, both for compilers and for standards. &#151;Matt</I></p>
<p><I>[Ed. note: In the &#147;beginning&#148; (aka before STL), there were two stand-alone classes: </I><B>bitset</B><I> and </I><B>bitstring</B><I>. With all the STL excitement the latter was (reluctantly) shoe-horned into that paradigm as </I><B>vector&lt;bool&gt;</B><I>. A mistake, as Matt said. &#151;cda]</I></p>

<hr><p>Hello,</p>
<p>I&#146;ve been trying to compile the fast class compiler and <B>CommandLine</B> class discussed in your May 2001 issue (&#147;Building a Professional Software Toolkit&#148; by John Hubbard), available in the downloads within <B>hubbard.zip</B>. The makefile supplied is for Solaris, and try as I have done, I&#146;ve been completely unable to get it to compile for gcc in Linux (Mandrake 7.1) &#151; it complains about too many things to note here.</p>
<p>So I was wondering if the author or yourselves have such a makefile &#151; I note from his article that the code compiled okay on Linux. (I&#146;d like to know how!)</p>
<p>I enjoy reading your magazine every month &#151; the recent self-contained utility type classes (e.g., <B>Debug</B>) that you&#146;ve printed have proven very nice, please print more!</p>
<p>Thanks for any assistance you can provide,</p>
<p>Steve Parry</p>

<p><I>Dear Steve,</I></p>
<p><I>You reported problems building Class Creator (fcc) on Linux. Here are some observations and solutions on that topic.</I></p>
<p><I>Observation # 1: Class Creator exercises the Standard C++ library heavily, and as a result, stock gcc will not work, because the C++ library that ships with gcc is not fully compliant.</I></p>
<p><I>Observation # 2: fcc is very easy to build if you have a fully standards-compliant C++ environment.</I></p>
<p><I>Observation # 3: The makefile that I provided does not make this obvious nor particularly easy.</I></p>
<p><I>Now for the answers. The first step is to create a standards-compliant C++ environment on Linux. (This is a useful thing to do even if you don&#146;t need to build fcc.) The best way to do this is to go to &lt;www.stlport.org&gt; (free) or &lt;www.dinkumware.com&gt; (a small fee is required), download and build the C++ library, and set up your compiler to use this library.</I></p>
<p><I>The next step is simply to compile and link the following files: </I><B>ClassCreator.cpp</B><I>, </I><B>WriteSentry.cpp</B><I>, </I><B>HeaderFileGen.cpp</B><I>, </I><B>CodeGenerator.cpp</B><I>, </I><B>ImplFileGen.cpp</B><I>, </I><B>InlineFileGen.cpp</B><I>, </I><B>UnitTestFileGen.cpp</B><I>, </I><B>MakefileGen.cpp</B><I>, </I><B>DigestedCommands.cpp</B><I>, </I><B>CommandLine.cpp</B><I>, </I><B>PackedString.cpp</B><I>, and </I><B>main.cpp</B><I>. The result will be the fcc program.</I></p>
<p><I>To ease that last step, I am attaching a reworked makefile that should be a little more flexible (available for download from the </I>CUJ<I> website in </I><B>letters.zip</B><I>). Just change the </I><B>TARGET</B><I>, </I><B>CPP_LINK_LIBRARY</B><I>, and </I><B>CPP_INCLUDE_DIRECTORY</B><I> variables to match your environment, and it will work just fine.</I></p>
<p><I>I have had success with gcc 2.95.2 and Dinkumware, on RedHat 6.x. I also had success on RedHat 7.1, using gcc 2.95.3 (rather than their built-in, unauthorized &#147;2.96&#148; version, see &lt;www.gnu.org/software/gcc/gcc.html&gt; for more information) and STL-Port 4.0.</I></p>
<p><I>Furthermore, sometime in late June, my company will be posting both source code and binaries (Linux, Solaris, Windows, and more) for Class Creator and other tools. These are free of charge, as a service to the software community, and they will be located somewhere on the &lt;www.azadtech.com&gt; website.</I></p>
<p><I>And one last thing: I&#146;m attaching a Linux binary for fcc, as </I><B>fcc2.35b.linux.zip</B><I> (available for download from the </I>CUJ<I> website in </I><B>letters.zip</B><I>). So you can actually skip the whole process, if all you want is the compiled program!</I></p>
<p><I>Thanks,</I></p>
<p><I>John Hubbard</I></p>

<h4><a href="../../../source/2001/sep01/letters.zip"></a></h4>

</blockquote></body></html>
