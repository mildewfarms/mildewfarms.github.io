<HTML>   
     <HEAD>
<TITLE>August 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: The Bind That Ties</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b><i>Copyright 2001, Jim Hyslop and Herb Sutter</i></b></p>

<p>Despite the imminent arrival of the Asian fleet, which our senior officers had not yet commented on publicly, life went back to nearly a steady usualness. Rumors started and grew, and excavation and research of the alien artifacts continued.</p> 
<p>Jeannine and I were wrestling with a burst pipe junction. One branch of a &quot;Y&quot; pipe had burst, and water was gushing out furiously, drenching her. &quot;Do something!&quot; she yelled, frustrated, trying to hold a manual seal over it to stem the flow.</p>
<p>I ran for a clamp to bind the seal with and quickly came back to tie the seal down. As the clamp tightened into place around the seal, the water stream turned into a trickle and then stopped. It held. Now that one of the two branches of the &quot;Y&quot; pipe had been restricted, the water was flowing only through the other.</p>
<p>&quot;I suppose this reminds you of your first job, too,&quot; said Jeannine, toweling her matted hair.</p>
<p>I grinned. &quot;As a matter of fact, it does. Tying down one too many options, leaving only one...&quot;</p>

<hr>

<p>The Guru was leading a code review of some code I had recently checked in. All was fine, until she reached this function:</p>

<pre>
void f(std::vector&lt;int&gt; &amp;vect)
{
  std::vector&lt;int&gt;::iterator firstOne;
  for (firstOne = vect.begin();
     firstOne != vect.end();
     ++firstOne)
  {
    doSomething(*firstOne, &quot;Some string literal&quot;);
  }
}
</pre>

<p>The Guru looked across the meeting room table at me. &quot;My child, this function is not necessary. You can achieve the same effect using the blessed <b>for_each</b> function.&quot; A co-op student was participating in the session, so the Guru was in her full act. I recognized &#151; and sympathized with &#151; the look of terror on the poor student's face.</p> 
<p>&quot;Um,&quot; I ummed, &quot;yeah, I tried that, but <b>for_each</b> needs a function that takes only one parameter. I had to pass <b>doSomething</b> two parameters, so I couldn't use it with <b>for_each</b>.&quot;</p>
<p>That earned me a cocked eyebrow. &quot;Did you try using an adaptor such as <b>bind1st</b>?&quot;</p>
<p>&quot;Uh,&quot; I uhhed, &quot;well, <b>bind1st</b> has always looked a little complex, and I never could figure out what it meant to 'bind' the argument, so I've kind of ... well, ignored it.&quot;</p>
<p>I expected the Guru to fix me with one of her disapproving schoolmaster stares. Instead, she nodded calmly, a hint of a smile on her lips. &quot;My child, you must not be afraid to confront those things you do not understand. Only by acknowledging your ignorance, and confronting it, will you learn.&quot; She paused a moment in thought.</p> 
<p>&quot;Let us work this from the beginning,&quot; she said. &quot;The <b>bind1st</b> and <b>bind2nd</b> functions &#151; for simplicity I will call them the <b>bind</b> functions &#151; allow you to adapt a binary function object for use as a unary function object.&quot;</p>
<p>&quot;So,&quot; I said slowly, &quot;what you're saying is, because <b>doSomething</b> takes two parameters, it's a binary function, which means I can use <b>bind1st</b> on it to convert it into a unary function, right?&quot;</p>
<p>&quot;Very good, my apprentice. You are on the correct path, but you are not quite there yet. I said that the <b>bind</b> functions allow you to adapt a binary <i>function object</i>. Specifically, the function objects that the <b>bind</b> functions use must be derived from <b>binary_function</b>, or must provide the same typedefs as <b>binary_function</b>. Now, with that information, how would you revise your writings to use a functor?&quot;</p> 
<p>In some ways, I found the Guru's Socratic method more intense and stressful than any of my university exams. Feeling the pressure of her gaze, I began carefully writing on the whiteboard:</p>

<pre>
class doSomething : public std::binary_function
{
</pre>

<p>I heard the Guru clear her throat. I turned to her, and she handed me a copy of Stroustrup. I quickly looked up <b>binary_function</b>:</p>

<pre>
template &lt;class Arg, class Arg2, class Res&gt;
struct binary_function {
  typedef Arg first_argument_type;
  typedef Arg2 second_argument_type;
  typedef Res result_type;
}; <a href="#1">[1]</a>
</pre>

<p>&quot;Okay, only one false start,&quot; I thought and revised my declaration:</p>

<pre>
class doSomething :
  public std::binary_function&lt;int, const char *, void&gt;
{
public:
  void operator()(int intVal, const char *c)
  {
    // ... whatever ...
  }
};
</pre>

<p>I turned to the Guru.</p>
<p>&quot;Well done,&quot; she nodded her approval. &quot;Now all that remains is to use the <b>bind</b> function. It is quite simple. An expression such as <b>bind1st(operation, value)</b> tells the compiler to bind <b>value</b> to the first parameter of <b>operation</b>. In other words, whenever the compiler calls <b>operation</b> in the <b>for_each</b> function, it passes <b>value</b> as the first parameter and the dereferenced iterator for the second parameter, like this.&quot; She took the marker and wrote on the board:</p> 

<pre>
operation(value, *iterator)
</pre>

<p>&quot;Think of it this way,&quot; the Guru continued. &quot;With <b>bind1st</b> the first parameter is tied down to a specific value and cannot change. Only the second parameter changes, being passed each item in the range being traversed. Thus, the binary functor can now be used as a unary functor.&quot;</p> 
<p>&quot;That's it?&quot; I blinked. &quot;That's all there is to it?&quot;</p>
<p>The Guru nodded. &quot;Yes, my child, it truly is that simple. <b>bind2nd</b> behaves analogously, telling the compiler to bind the value given to the second parameter. Now, show me how you would replace or rewrite your function <b>f</b>.&quot;</p>
<p>I wrote on the whiteboard:</p>

<pre>
std::for_each(vect.begin(), vect.end(), 
  bind2nd(doSomething(), &quot;Hi&quot;));
</pre>

<p>She nodded. &quot;Very good, my apprentice. You realized that the first parameter to <b>bind2nd</b> must refer to an instance of your functor, so you created an unnamed temporary object.&quot; I just smiled &#151; I wasn't about to let on that the parentheses were unintentional, actually sloppy writing on my part. &quot;When we have finished our code review,&quot; she continued, &quot;I want you to write a small test program to cement your understanding.&quot;</p> 
<p>After the code review was complete, I returned to my cubicle and typed in a small program. After some minor refinements, I ended up with something like this:</p>

<pre>
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;functional&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;

void doSomething(int i, const char *c);

// My First Binary Functor
// First, I'm going to pretend doSomething
// is in a library and I don't have its source.

// Portability note: MSVC6 does not like 'void'
// return types in templates, so change
// operator() to return a value (true, for
// example) under MSVC6
struct doSomethingWrapper : public 
  std::binary_function&lt;int, const char *, void&gt;
{
  void operator()(
    int iValue, const char *cValue) const
  {
    doSomething(iValue, cValue);
  }
};

// Now, a functor built &quot;in-house&quot;
// Same portability note.
struct doSomethingDirect : public 
  std::binary_function&lt;int, const char *, void&gt;
{
  void operator()(
    int iValue, const char *cValue) const
  {
    std::cout &lt;&lt; cValue 
          &lt;&lt; &quot; &quot; 
          &lt;&lt; iValue 
          &lt;&lt; &quot;. &quot; ;
  }
};

// A helper template, 'cause I'm lazy and it
// reduces typing
template &lt;class Collection, class Function&gt;
Function for_all(
  Collection &amp;c, const Function &amp;f) 
{
  return std::for_each(c.begin(), c.end(), f);
}

int main()
{
  // First, set up the vector.
  std::vector&lt;int&gt; vect;
  for (int i=0; i&lt;10; ++i) {
    vect.push_back(i);
  }

  for_all(
    vect, std::bind2nd(doSomethingWrapper(), &quot;Wrapper:&quot;));
  std::cout &lt;&lt; &quot;\n&quot;;
  for_all(
    vect, std::bind2nd(doSomethingDirect(), &quot;Direct:&quot;));
  return 0;
}

// My ingenious third-party-library function
void doSomething(int i, const char *c)
{
  std::cout &lt;&lt; c &lt;&lt; &quot; &quot; &lt;&lt; i &lt;&lt; &quot;. &quot; ;
}
</pre>

<p>&quot;And I threw in a container-based algorithm into the bargain. Ingenious,&quot; I congratulated myself badly, thinking I was the first to come up with such a novel idea. Of course, I wasn't.</p>

<hr>

<p>&quot;Ingenious here too,&quot; I sighed, tapping the clamped-down branch of the pipe, &quot;except that in this case we wanted both branches, and we'll have to replace the whole thing...&quot;</p>
<p>We looked at each other.</p>
<p>&quot;Tomorrow,&quot; said Jeannine, and shook more water out of her uniform.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1]  Bjarne Stroustrup. <i>The C++ Programming Language</i>, 3rd Edition (Addison-Wesley, 1997).</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <b>hsutter@acm.org</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
