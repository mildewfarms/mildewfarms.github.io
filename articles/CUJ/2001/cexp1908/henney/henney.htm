<HTML>   
     <HEAD>
<TITLE>August 2001 C++ Experts Forum/From Mechanism to Method</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">From Mechanism to Method: Data Abstraction and Heterarchy</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kevlin Henney</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>Trees. Everywhere. Ones with green leaves, ones with family members, ones with files and directories, ones with classes, and many more. Trees &#151; most often upside-down with the root at the top and leaves at the bottom &#151; offer a common and useful mechanism for organizing program elements <a href="#1">[1]</a>. Strict hierarchies imply nesting and exclusive containment, e.g., single-inheritance hierarchies and organizational structures blighted by antediluvian management thinking. In common use, the term <i>hierarchy</i> also includes DAGs (directed acyclic graphs) that, although hierarchical, are not strictly hierarchies. This is the sense in which I will use it in this article because the world we live and work in more accurately reflects the elasticity of this usage, e.g., multiple-inheritance hierarchies and family trees.</p>
<p>But a hierarchy, strict or otherwise, is not the only way of organizing elements in a program <a href="#2">[2]</a>:</p>

<BLOCKQUOTE>
<p>A program which has such a structure in which there is no single &quot;highest level&quot; ... is called a <i>heterarchy</i> (as distinguished from a hierarchy).</p>
</BLOCKQUOTE>

<p>The property that distinguishes hierarchies from heterarchies is that the former is acyclic whereas the latter contains cycles.</p>

<H3><FONT COLOR="#000080">Of Types and Hierarchies</FONT></H3>

<p>When we look at a well-factored program, we see that the data concepts have been abstracted according to their use more often than their representation. Primitive data elements have been grouped and reclassified as information with behavior <a href="#3">[3]</a>:</p>

<BLOCKQUOTE>
<p>As soon as we start working in an untyped universe, we begin to organize it in different ways for different purposes. Types arise informally in any domain to categorize objects according to their usage and behavior. The classification of objects in terms of the purposes for which they are used eventually results in a more or less well-defined type system. Types arise naturally, even starting from untyped universes.</p>
</BLOCKQUOTE>

<p>In C++ we have many mechanisms for organizing our types. The two most obvious are classes &#151; which represent an explicitly named concept made available to the compiler &#151; and template type parameters &#151; where the concept of type is implicit according to usage <a href="#4">[4]</a>.</p>

<H4><FONT COLOR="#000080">Types of Subtyping</FONT></H4>

<p>Some hierarchies represent internal structural concerns: an object hierarchy whose implementation is layered through composition and forwarding, a function hierarchy where a task is decomposed into smaller tasks that are decomposed in turn, and so on. Type hierarchies, by contrast, reflect external usage concerns.</p>
<p>The articulation of type and subtype concepts relates to the four forms of polymorphism <a href="#3">[3]</a> &#151; inclusion, parametric, overloading, and coercion &#151; and the five forms of substitutability in C++ <a href="#5">[5]</a> &#151; conversion, overloading, derivation, mutability, and genericity.</p>
<p>There are examples of hierarchies where the structural and type concerns are co-aligned. A class hierarchy, which has a tangible structural dimension, can also be a type hierarchy, so that a pointer to a derived class instance may be used where a pointer to a base is declared. This example is the most commonly quoted form of substitutability, but it is far from being the only one.</p>
<p>Because the number of implicit type conversions the compiler is prepared to string together on your behalf is rather low &#151; only one for user-defined conversions &#151; subtype behavior across type hierarchies based on this form of substitutability tends to be in short hops. For instance, the following definitions describe a relationship where a <b>text</b> object is expected a <b>string</b> object may be provided, and where a <b>string</b> object is expected a <b>char *</b> may be provided:</p>

<pre>
class string
{
public:
    string(const char *);
    ...
};

class text
{
public:
    text(const string &amp;);
    ...
};
</pre>

<p>The following will compile happily:</p>

<pre>
text message = &quot;This will compile&quot;;
</pre>

<p>But the following will be thrown rudely back in your face:</p>

<pre>
void print(const text &amp;);
print(&quot;This won't compile&quot;); // too many conversions required
</pre>

<p>When considering subtyping and genericity, an actual type must support at least the features required for the template type parameter, so the features of the named type used will inevitably be a subtype of the required features. However, subtyping with generics goes further than just this <i>formal-actual</i> relationship, and iterator categories provide a good example. Each category defines a type <a href="#6">[6]</a>, and the relationships between the categories are in terms of subtyping: anything that can be considered a <i>random access iterator</i> will also satisfy <i>bidirectional iterator</i> requirements, which in turn also satisfy <i>forward iterator</i> requirements, which in turn satisfy both <i>input iterator</i> and <i>output iterator</i> requirements.</p>

<H4><FONT COLOR="#000080">Analysis of Variance</FONT></H4>

<p>When looking at type hierarchies it is worth taking some time out to understand how some of the properties of substitutability come about.</p>
<p>Consider a base class and a derived class that is also a proper subtype of the base (i.e., uses <b>public</b> inheritance from the base, overrides <b>virtual</b> functions at least at their level of access in the base, and ensures that any member functions that would otherwise be blocked by members declared in the derived class are made accessible through <b>using</b> declarations). What would you expect to find available in the derived class's interface as compared to that of the base class? You'd expect to find either the same set of members or more, but not fewer. If you found fewer, this would break substitutability because you could not use a derived where a base was expected. So although you would have a class hierarchy, it would not be a type hierarchy.</p>
<p>This means that the type interface, considered as a set of operations, is <i>contravariant</i> with subtyping: as you descend the hierarchy, narrowing the possible object types you can operate on, the set of operations varies in the opposite direction (i.e., becomes wider). You can also see this with generic types: a pointer, which is the model for random access iterators, supports the same operations as an input iterator, plus many more.</p>
<p>Zooming in on the interface, what about the substitutability with respect to individual operations? As you descend the hierarchy narrowing the possible object types, you also narrow the possible behavior resulting from an operation call. This means that possible results also narrow. In C++, if a <b>virtual</b> function's return type is a pointer or reference, then it can be overridden with a more derived return type. Thus the return type can be <i>covariant</i> with subtyping: as you descend the hierarchy, the result type also descends. As an example, consider a simple factory scenario, where an interface class has <i>Factory Method</i> <a href="#7">[7]</a> that offers the creation of instances of a product hierarchy:</p>

<pre>
class product
{
    ...
};

class factory
{
public:
    virtual product *create() const = 0;
    ...
};
</pre>

<p>Covariance allows us to capture more accurately the constraint that a specific factory implementation returns a specific product, as opposed to any arbitrary product:</p>

<pre>
class concrete_product : public product
{
    ...
};

class concrete_factory : public factory
{
public:
    virtual concrete_product *create() const
    {
        return new concrete_product;
    }
    ...
};
</pre>
 
<p>Covariant return types make sense when it is likely that a user will be accessing the feature through the derived type as opposed to the base. This is not often the case, especially for a factory that is intended to abstract concrete details, but it serves to highlight the public advertisement of the constraint. Either way, it is perfectly type-safe because any code written against the <b>factory</b> interface:</p>

<pre>
product *example(const factory *creator)
{
    return creator-&gt;create();
}
</pre>

<p>is still valid if we reconsider it in terms of <b>concrete_factory</b>:</p>

<pre>
product *example(const concrete_factory *creator)
{
    return creator-&gt;create();
}
</pre>

<p>And, if this is all there is to writing factories for such products, we can generalize the concrete factory code by mixing two forms of polymorphism, inheritance and templates:</p>

<pre>
template&lt;typename concrete_product&gt;
class concrete_factory : public factory
{
public:
    virtual concrete_product *create() const
    {
        return new concrete_product;
    }
    ...
};
</pre>

<p>Any transgression of type safety &#151; if <b>concrete_product</b> is not descended from <b>product</b> &#151; will be picked up at compile time.</p>
<p>Covariance also applies to other results, such as <b>throw</b> specs: an overridden <b>virtual</b> function must declare the same <b>throw</b> spec or a more restrictive one than the function it is overriding. So, a <b>virtual</b> function that does not have a <b>throw</b> spec can be overridden by one that does, a <b>virtual</b> function that declares an empty <b>throw</b> spec can only be overridden by one that also has an empty <b>throw</b> spec, and a <b>virtual</b> function that promises only to <b>throw</b> a base exception type can be overridden by one that promises to throw the same, a descendant, or nothing.</p>
<p>What about arguments? Does it make sense to have covariant arguments? There is only one circumstance in which it is safe, and C++ does not qualify for it: if a language supports <b>out</b> arguments that can be used only for results. C++ <b>const</b> reference arguments can be considered <b>in</b> arguments and non-<b>const</b> reference arguments can be considered <b>inout</b> arguments. Any argument that is effectively <b>inout</b> must be <i>invariant</i> to be type safe. It is feasible for <b>in</b> arguments to be contravariant, but this would greatly complicate C++'s already subtle overloading rules, so the rule is that all arguments remain invariant with subtyping. Some languages attempt to support some covariance with <b>in</b> arguments &#151; this is the general case in Eiffel and is present only for array passing in Java and C#, where argument signatures themselves are not permitted to be covariant &#151; but these are basically type system hacks that require significant extra support, typically involving runtime checks.</p> 
<p>Covariance and contravariance are not just about declared types; they are more generally about behavior. The promise of behavior for an operation at supertype level must remain the same or be strengthened and become narrower with subtyping. For example, is the following a valid implementation of <b>factory</b>?</p>

<pre>
class null_factory : public factory
{
public:
    virtual concrete_product *create() const
    {
        return 0;
    }
    ...
};
</pre>

<p>It depends on what the expected result of <b>factory::create</b> was promised as. if the promised result at the base class level were simply &quot;returns a <b>delete</b>-able pointer,&quot; then this permits null pointers. Code written (correctly) against such an interface would cater to this assumption:</p>

<pre>
void consume(product &amp;);
void example(const factory *creator)
{
    std::auto_ptr&lt;product&gt; ptr(creator-&gt;create());
    if(ptr.get())
        consume(*ptr);
}
</pre>

<p>And so <b>null_factory::create</b> could be seen to be a valid specialization of <b>factory::create</b> in this case because the behavior is covariant, i.e., narrower and more specific than that of the base.</p>
<p>However, if the promised result at the base class level were specified as &quot;returns a non-null <b>delete</b>-able pointer,&quot; <b>null_factory</b> would break code that worked to this spec:</p> 

<pre>
void consume(product &amp;);
void example(const factory *creator)
{
    std::auto_ptr&lt;product&gt; ptr(creator-&gt;create());
    consume(*ptr);
}
</pre>

<p>And so <b>null_factory</b> would not be substitutable for <b>factory</b>, and therefore not a subtype.</p> 
<p>You can also see the covariant promise in action with iterator types: For an input or output iterator, there is no guarantee that <b>a == b</b> implies <b>++a = ++b</b>, but for a forward iterator &#151; and subtypes &#151; the behavioral promise is strengthened and this guarantee exists. Conversely, requirements placed on callers of functions follow contravariance.</p>
<p>If you are familiar with <i>design by contract</i> <a href="#8">[8]</a>, you may recognize this as the strengthening of postconditions and weakening of preconditions with inheritance. This variance in design by contract is simply a different expression of the substitutability principle and can be derived from it directly.</p>

<H3><FONT COLOR="#000080">Of Types and Heterarchies</FONT></H3>

<p>Although you want to avoid cycles in your compile-time dependency graph or between threads synchronizing on common resources, there are occasions when heterarchies provide a more appropriate structuring scheme than hierarchies. A function heterarchy is expressed through recursion &#151; either simple recursion when a function calls itself or mutual recursion where another called function calls the original caller. A bidirectional relationship between objects can be considered an object heterarchy. At any point in the execution, which object is considered to be the top-level one depends on the action and context. This is often the case with inversions of control flow such as event notification callbacks.</p> 
<p>In a hierarchy there is a unique concept of <i>up</i> and <i>down</i> &#151; imagine yourself anywhere in a hierarchical structure; there is a strong sense of what is above you and what is below, and a strong separation. In a heterarchy there is no such gravity &#151; imagine yourself in a heterarchy, looking &quot;up&quot; or &quot;down&quot; you can see yourself.</p> 
<p>Function recursion and cyclic object relationships are examples of structural heterarchies, but what of type heterarchies? The simplest example of type substitutability with a cycle is between <b>int</b> and <b>double</b>: one can be substituted where the other is expected. Granted, <b>double</b> to <b>int</b> is lossy, undesirable, and accompanied by a warning on most compilers, but it does indeed form a type heterarchy. Similarly, if a string class supports both a conversion to and from <b>const char *</b> (the former being ill advised, but nonetheless common), it too forms a cyclic substitutability relationship.</p>
<p>However, these two examples are cautionary rather than exemplary, and neither of them involves everyone's favorite class relationship, inheritance.</p>

<H4><FONT COLOR="#000080">Touch Base</FONT></H4>

<p>Imagine that you have customized the <b>new</b> and <b>delete</b> operators for a class:</p>

<pre>
class workpiece
{
public:
    static void *operator new(std::size_t);
    static void operator delete(void *, std::size_t);
    ...
private:
    ...
    static allocation heap;
};
</pre>

<p>Assume that <b>allocation</b> is a class that actually provides the appropriate allocation intelligence &#151; optimization for speed, instrumentation for debugging, etc. &#151; and can allocate objects of a size fixed on its initialization and deallocate objects that it allocated:</p>

<pre>
class allocation
{
public:
    allocation(std::size_t, const std::type_info &amp;);
    void *allocate();
    void deallocate(void *);
    ...
};
</pre>

<p>Its correct use would be:</p>

<pre>
allocation workpiece::heap(
    sizeof(workpiece), typeid(workpiece));

void *workpiece::operator new(std::size_t size)
{
    return size == sizeof(workpiece) ?
                heap.allocate() :
                ::operator new(size);
}

void workpiece::operator delete(
    void *ptr, std::size_t size)
{
    if(size == sizeof(workpiece))
        heap.deallocate(ptr);
    else
        ::operator delete(ptr);
}
</pre>

<p>The size checks are important because <b>new</b> and <b>delete</b> are, by default, inherited and consequently may be used on a class whose size does not equal that of the base. The code above ensures that <b>heap</b> is used only for the intended size and all other allocations and deallocations are rerouted to the global operators.</p>
<p>If you intend to use <b>allocation</b> for the same purpose in any other classes, it would be nice to somehow factor out the code above as a mix-in class so that each class that wanted these services would simply inherit from the mix-in. Something like the following:</p>

<pre>
class allocated
{
public:
    static void *operator new(std::size_t);
    static void operator delete(void *, std::size_t);
    ...
private:
    ...
    static allocation heap;
};

class workpiece : public allocated
{
    ...
};
</pre>

<p>Except not. All classes derived from <b>allocated</b> will share the same <b>static</b> <b>heap</b>:</p>

<pre>
class command : public allocated
{
    ...
};
</pre>

<p>A <b>command</b> may not have the same size as a <b>workpiece</b> and will certainly not have the same type, so not only is <b>heap</b> shared but it also becomes impossible to initialize or use correctly, as the places marked <b>???</b> in the following code indicate:</p>

<pre>
allocation allocated::heap(
   sizeof(<i>???</i>), typeid(<i>???</i>));

void *allocated::operator new(std::size_t size)
{
    return size == sizeof(<i>???</i>) ?
                heap.allocate() :
                ::operator new(size);
}

void allocated::operator delete(
    void *ptr,std::size_t size)
{
    if(size == sizeof(<i>???</i>))
        heap.deallocate(ptr);
    else
        ::operator delete(ptr);
}
</pre>

<p>Even attempting to factor out the constant <b>sizeof</b> expression will not solve the problem. It serves only to highlight it more sharply.</p>
<p>Essentially the problem is that the mix-in cannot be made fully independent of any derived class: there is a lingering dependency on the name and size of the derived class. This creates a cycle that can be broken by treating the downward dependency as a parameter of variation, and therefore something to template <a href="#9">[9]</a>:</p>

<pre>
template&lt;typename derived&gt; 
class allocated
{
public:
    static void *operator new(std::size_t);
    static void operator delete(void *, std::size_t);
    ...
private:
    ...
    static allocation heap;
};
</pre>

<p>Given this, the implementation code can now get at the name and size of the type:</p>

<pre>
template&lt;typename derived&gt;
allocation allocated&lt;derived&gt;::heap(
    sizeof(derived), typeid(derived));

template&lt;typename derived&gt;
void *allocated&lt;derived&gt;::operator new(
    std::size_t size)
{
    return size == sizeof(derived) ?
                heap.allocate() :
                ::operator new(size);
}

template&lt;typename derived&gt;
void allocated&lt;derived&gt;::operator delete(
    void *ptr, std::size_t size)
{
    if(size == sizeof(derived))
        heap.deallocate(ptr);
    else
        ::operator delete(ptr);
}
</pre>

<p>The last piece falls into place with the mixing-in itself:</p>

<pre>
class workpiece : public allocated&lt;workpiece&gt;
{
    ...
};

class command : public allocated&lt;command&gt;
{
    ...
};
</pre>

<p>Now the derived class inherits from a class that knows about it, but without any hardwired coupling that prevents its use as a general solution. Each parameterization of <b>allocated</b> results in a distinct type with its own code and data, which is exactly what was required.</p>
<p>This is the increasingly well-known <i>Self-Parameterized Base Class</i> or <i>Curiously Recurring Template</i> pattern &#151; the latter being an evocative description of its recognition <a href="#10">[10]</a> and the former being a more appropriate contemporary name based on its structure.</p>

<H4><FONT COLOR="#000080">In Good Shape</FONT></H4>

<p>The <b>allocated</b> class template demonstrates an example of heterarchical structure involving class relationships. However, it is not a type heterarchy because no useful properties of type, except for <b>typeid</b> and <b>sizeof</b>, are used: it steadfastly avoids dealing with objects.</p> 
<p>Consider a simple shape hierarchy, with the usual suspects <b>ellipse</b> and <b>rectangle</b>. It makes sense to be able to copy such objects polymorphically by cloning them:</p>

<pre>
class shape
{
public:
    virtual shape *clone() const = 0;
    ...
};

class ellipse : public shape
{
public:
    explicit ellipse(const ellipse &amp;);
    virtual shape *clone() const
    {
        return new ellipse(*this);
    }
    ...
};

class rectangle : public shape
{
public:
    explicit rectangle(const rectangle &amp;);
    virtual shape *clone() const
    {
        return new rectangle(*this);
    }
    ...
};
</pre>

<p>There are a couple of observations to make on this:</p>

<UL>
<LI>Cloning is effectively a reflexive <i>Factory Method</i>, where the product and factory are of the same class.</LI>
<LI>The <b>explicit</b> copy constructor means that although <b>ellipse</b> and <b>rectangle</b> support explicit copying &#151; as seen in <b>clone</b> &#151; the general case of passing and returning them by copy is not supported, i.e. the identity conversion is disabled. <b>shape</b> objects are heap-bound and live in a class hierarchy, rather than being value-based objects for which casual copying makes sense.</LI>
<LI>The implementations of <b>ellipse::clone</b> and <b>rectangle::clone</b> are suspiciously similar, differing only in the class to which they refer.</LI>
</UL>

<p>It would be nice to factor out the common source structure, except that it is the structure as opposed to the verbatim code that needs factoring out. Again, there is a cyclic type dependency, and this time more entrenched because of object creation and copy construction. And again, a <i>Self-Parameterized Base Class</i> offers a way to break the cycle <a href="#11">[11]</a>:</p>

<pre>
class shape
{
public:
    virtual shape *clone() const = 0;
    ...
};

template&lt;typename derived, typename base&gt;
class cloner : public virtual base
{
public:
    virtual base *clone() const
    {
        return new derived(
            static_cast&lt;
                const derived &amp;&gt;(*this));
    }
    ...
};

class ellipse : public cloner&lt;ellipse, shape&gt;
{
    ...
};

class rectangle : public cloner&lt;rectangle, shape&gt;
{
    ...
};
</pre>

<p>There are a few observations to make on this solution:</p>

<UL>
<LI>To reiterate a property of heterarchies: you really can see yourself if you look down.</LI>
<LI>An attempt to parameterize <b>cloner</b> with a non-derived class will cause a compile-time error because the derived class will not be substitutable for the base in the code.</LI>
<LI>If you consider cloning to be a reflexive version of <i>Factory Method</i>, this solution mirrors the templated <b>concrete_factory</b> in a reflexive way: in each case, the product is the first template parameter.</LI>
<LI>Another adaptive template technique, <i>Parameterized Inheritance</i>, is used to define the appropriate base class.</LI>
<LI>Inheritance uses a <b>virtual</b> base class to accommodate other applications of this reflexive mix-in style, but without introducing repeated inheritance issues.</LI>
</UL>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>A template technique that is becoming increasingly common has been taken and explored within the conceptual framework of substitutability. From its early sightings <a href="#12">[12]</a> and subsequent exploration <a href="#10">[10]</a> to the present day [<a href="#13">13</a>, <a href="#14">14</a>], the <i>Self-Parameterized Base Class</i> pattern has found increased applicability in expressing cyclic type relationship problems once they have been recognized as such.</p> 
<p>There are many techniques that combine two main forms of generalization &#151; templates and inheritance &#151; and a number of them have been used in this article. However, a <i>Self-Parameterized Base Class</i> has the distinction that it unifies the forms under the heading of substitutability but not of hierarchy.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Michael Jackson. <i>Software Requirements &amp; Specifications: A Lexicon of Practice, Principles and Prejudices</i> (Addison-Wesley, 1995).</p>
<p><a name="2"></a>[2]  Douglas R. Hofstadter. <i>G&ouml;del, Escher, Bach: An Eternal Golden Braid</i> (Penguin, 1979).</p>
<p><a name="3"></a>[3]  Luca Cardelli and Peter Wegner. "On Understanding Types, Data Abstraction, and Polymorphism," <i>Computing Surveys</i>, December 1985.</p>
<p><a name="4"></a>[4]  Kevlin Henney. &quot;From Mechanism to Method: Good Qualifications,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, January 2001, &lt;http://www.cuj.com/experts/1901/henney.htm&gt;.</p>
<p><a name="5"></a>[5]  Kevlin Henney. &quot;From Mechanism to Method: Substitutabilityv&quot; <i>C++ Report</i>, May 2000, also available from &lt;http://www.curbralan.com&gt;.</p>
<p><a name="6"></a>[6]  Note that these generic requirements-based types are sometimes referred to as <i>concepts</i>. However, use of this term is inadvisable because of its impressive accuracy without any precision whatsoever: everything in software development can be considered a concept, but only a few things can be considered types. Generic requirements define &#151; quite precisely &#151; types.</p>
<p><a name="7"></a>[7]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <i>Design Patterns: Elements of Reusable Object-Oriented Software</i> (Addison-Wesley, 1995).</p>
<p><a name="8"></a>[8]  Bertrand Meyer. <i>Object-Oriented Software Construction</i>, 2nd edition (Prentice Hall, 1997).</p>
<p><a name="9"></a>[9]  James O. Coplien. <i>Multi-Paradigm Design for C++</i> (Addison-Wesley, 1999).</p>
<p><a name="10"></a>[10]  James O. Coplien, &quot;Curiously Recurring Template Patterns,&quot; <i>C++ Report</i>, February 1995.</p>
<p><a name="11"></a>[11]  Kevlin Henney. &quot;Clone Alone,&quot; <i>Overload</i> 33, August 1999.</p>
<p><a name="12"></a>[12]  John J. Barton and Lee R. Nackman. <i>Scientific and Engineering C++: An Introduction with Advanced Techniques and Examples</i> (Addison-Wesley, 1994).</p>
<p><a name="13"></a>[13]  Kevlin Henney. Email correspondence with Angelika Langer, July 2000, &lt;http://www.langer.camelot.de/IOStreams/forum.htm&gt;.</p>
<p><a name="14"></a>[14]  Klaus Kreft and Angelika Langer. &quot;Effective C++ Standard Library: Curiously Recurring Manipulators,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, June 2001, &lt;http://www.cuj.com/experts/1906/langer.htm&gt;.</p>


<p><i><b>Kevlin Henney</b> is an independent consultant and trainer specializing in C++, Java, OO design, patterns, and software architecture.  He can be reached at <b>kevlin@curbralan.com</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
