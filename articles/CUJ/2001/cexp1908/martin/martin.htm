<HTML>   
     <HEAD>
<TITLE>August 2001 C++ Experts Forum/Engineering Notebook</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Engineering Notebook: Template Method &amp; Strategy &#151; Inheritance vs. Delegation</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Robert C. Martin</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><i>This article is a segment from a chapter of </i>Advanced Principles, Patterns, and Process of Object Oriented Software Development<i>, by Robert C. Martin, Prentice Hall, 2001.  Copyright &copy; 2001 Robert C. Martin, All rights reserved.</i></p>
<p>Way, way back in the early 90s &#151; back in the early days of OO &#151; we were all quite taken with the notion of inheritance. The implications of the relationship were profound. With inheritance we could <i>program by difference</i>! That is, given some class that did something almost useful for us, we could create a subclass and change only the bits we didn't like. We could reuse code simply by inheriting it! We could establish whole taxonomies of software structures; each level of which reused code from the levels above. It was a brave new world.</p>
<p>Like most brave new worlds, this one turned out to be a bit too starry-eyed. By 1995 it was clear that inheritance was very easy to over use, and that over-use of inheritance was very costly. So we cut back on our use of inheritance, often replacing it with delegation.</p>
<p>This column is the story of two patterns that epitomize the difference between inheritance and delegation. The Template Method and Strategy patterns solve similar problems and can often be used interchangeably. However, Template Method uses inheritance to solve the problem, whereas Strategy uses delegation.</p>

<H3><FONT COLOR="#000080">Intent of Template Method and Strategy</FONT></H3>

<p>Template Method and Strategy both solve the problem of separating a generic algorithm from a detailed context. We see the need for this very frequently in software design. We have an algorithm that is generically applicable. In order to conform to the DIP (Dependency Inversion Principle) <a href="#1">[1]</a>, we want to make sure that the generic algorithm does not depend upon the detailed implementation. Rather we want the generic algorithm and the detailed implementation to depend upon abstractions. Consider the following two examples.</p>

<H3><FONT COLOR="#000080">Application</FONT></H3>

<p>Consider all the programs you have written. Many probably have this fundamental main-loop structure.</p>

<pre>
Initialize();
while (!done()) // main loop
{

    Idle();     // do something useful.
}
Cleanup();
</pre>

<p>First we initialize the application. Then we enter the main loop. In the main loop, we do whatever the program needs to do. We might process GUI events or perhaps process database records. Finally, once we are done, we exit the main loop and clean up before we exit.</p>
<p>This structure is so common that we can capture it in a class named <b>Application</b>. Then we can reuse that class for every new program we want to write. Think of it! We never have to write that loop again!</p>
<p>For example, consider <a href="list1.htm">Listing 1</a>. Here we see all the elements of the standard program. The <b>InputStreamReader</b> and <b>BufferedReader</b> are initialized. There is a main loop that reads Fahrenheit readings from the <b>BufferedReader</b> and prints out Celsius conversions. At the end, an exit message is printed.</p>
<p>This program has all the elements of the main-loop structure above. It does a little initialization, does its work in a main-loop, and then cleans up and exits.</p>

<p>We can separate this fundamental structure from the <b>ftoc</b> program by employing the Template Method pattern. This pattern places all the generic code into an implemented method of an abstract base class. The implemented method captures the generic algorithm, but defers all details to the abstract methods of the base class.</p>
<p>So, for example, we can capture the main-loop structure in an abstract base class called <b>Application</b> (see <a href="list2.htm">Listing 2</a>).</p>
<p>This class describes a generic main-loop application. We can see the main loop in the implemented <b>run</b> function. We can also see that all the work is being deferred to the abstract methods <b>init</b>, <b>idle</b>, and <b>cleanup</b>. The <b>init</b> method takes care of any initialization we need done. The <b>idle</b> method does the main work of the program and will be called repeatedly until <b>setDone</b> is called. The <b>cleanup</b> method does whatever needs to be done before we exit.</p>
<p>We can rewrite the <b>ftoc</b> class by inheriting from <b>Application</b> and just filling in the abstract methods. <a href="list3.htm">Listing 3</a> show what this looks like.</p>
<p>Dealing with the exception made the code get a little longer, but it's easy to see how the old <b>ftoc</b> application has been fit into the Template Method pattern.</p>
<p>Template Method is used when you have a generic algorithm that applies across a variety of detailed contexts. In the example above, the generic algorithm is the main-loop of nearly every application. It was applied to the detailed context of <b>ftoc</b>. The generic algorithm is written into an abstract base class and is made to call abstract methods. A derivative class provides the detailed context by implementing the abstract methods of the base.</p>

<H3><FONT COLOR="#000080">Bubble Sort</FONT></H3>

<p>As another example, lets look at what it takes to write a bubble sort (see <a href="list4.htm">Listing 4</a>).</p>
<p>The <b>BubbleSorter</b> class knows how to sort an array of integers using the bubble sort algorithm. The <b>sort</b> method of <b>BubbleSorter</b> contains the algorithm that knows how to do a bubble sort. The two ancillary methods, <b>swap</b> and <b>compareAndSwap</b>, deal with the details of integers and arrays and handle the mechanics that the <b>sort</b> algorithm requires.</p> 
<p>Using the Template Method pattern, we can separate the bubble sort algorithm into an abstract base class named <b>BubbleSorter</b>. <b>BubbleSorter</b> contains an implementation of the <b>sort</b> function that calls an abstract method named <b>outOfOrder</b> and another called <b>swap</b>. The <b>outOfOrder</b> method compares two adjacent elements in the array and returns <b>true</b> if the elements are out of order. The <b>swap</b> method swaps two adjacent cells in the array.</p> 
<p>The <b>sort</b> method does not know about the array, nor does it care what kinds of objects are stored in the array. It just calls <b>outOfOrder</b> for various indices into the array and determines whether those indices should be swapped or not (see <a href="list5.htm">Listing 5</a>).</p>
<p>Given <b>BubbleSorter</b>, we can now create simple derivatives that can sort any different kind of object. For example, we could create <b>IntBubbleSorter</b>, which sorts arrays of integers, and <b>DoubleBubbleSorter</b>, which sorts arrays of doubles (see <a href="fig1.htm">Figure 1</a>, <a href="list6.htm">Listing 6</a>, and <a href="list7.htm">Listing 7</a>).</p>
<p>The Template Method pattern shows one of the classic forms of reuse in object-oriented programming. Generic algorithms are placed in the base class and inherited into different detailed contexts. But this technique is not without its costs. Inheritance is a very strong relationship. Derivatives are inextricably bound to their base classes. </p>
<p>For example, the <b>outOfOrder</b> and <b>swap</b> functions of <b>IntBubbleSorter</b> are exactly what are needed for other kinds of sort algorithms. And yet, there is no way to reuse <b>outOfOrder</b> and <b>swap</b> in those other sort algorithms. By inheriting <b>BubbleSorter</b> we have doomed <b>IntBubbleSorter</b> to forever be bound to <b>BubbleSorter</b>. The Strategy method provides another option.</p>

<H3><FONT COLOR="#000080">Strategy</FONT></H3>

<p>The Strategy pattern solves the problem of inverting the dependencies of the generic algorithm and the detailed implementation in a very different way. Consider, once again, the <b>Application</b> problem.</p>
<p>Rather than placing the generic application algorithm into an abstract base class, we place it into a <i>concrete</i> class named <b>ApplicationRunner</b>. We define the abstract methods that the generic algorithm must call within an interface named <b>Application</b>. We derive <b>ftocStrategy</b> from this interface and pass it into the <b>ApplicationRunner</b>. <b>ApplicationRunner</b> then delegates to this interface (see <a href="fig2.htm">Figure 2</a>, <a href="list8.htm">Listing 8</a>, <a href="list9.htm">Listing 9</a>, and <a href="list10.htm">Listing 10</a>).</p>
<p>It should be clear that this structure has both benefits and costs over the Template Method structure. Strategy involves more total classes and more indirection than the Template Method. The delegation pointer within <b>ApplicationRunner</b> incurs a slightly higher cost in terms of run time and data space than inheritance would. On the other hand, if we had many different applications to run, we could reuse the <b>ApplicationRunner</b> <i>instance</i> and pass in many different implementations of <b>Application</b>, thereby reducing the code space overhead.</p>
<p>None of these costs and benefits is overriding. In most cases, none of them matters in the slightest. In the typical case, the most worrisome is the extra class needed by the Strategy pattern. However, there is more to consider.</p>

<H3><FONT COLOR="#000080">Sorting Again</FONT></H3>

<p>Consider an implementation of the bubble sort that uses the Strategy pattern (see <a href="list11.htm">Listing 11</a>, <a href="list12.htm">Listing 12</a>, and <a href="list13.htm">Listing 13</a>).</p>
<p>Notice, the <b>IntSortHandle</b> class knows nothing whatsoever of the <b>BubbleSorter</b>. It has no dependency upon the bubble sort implementation. This is not the case with the Template Method pattern. Look back at <a href="list6.htm">Listing 6</a> and you can see that the <b>IntBubbleSorter</b> depended directly on <b>BubbleSorter</b>, the class that contains the bubble sort algorithm.</p> 
<p>The Template Method approach partially violates DIP. The implementation of the <b>swap</b> and <b>outOfOrder</b> methods depends directly upon the bubble sort algorithm. The Strategy approach contains no such dependency. Thus, we can use the <b>IntSortHandle</b> with a <b>Sorter</b> implementation other than <b>BubbleSorter</b>.</p>
<p>For example, we can create a variation of the bubble sort that terminates early if a pass through the array finds it in order (see <a href="list14.htm">Listing 14</a>). <b>QuickBubbleSorter</b> can also use <b>IntSortHandle</b> or any other class derived from <b>SortHandle</b>.</p>
<p>Thus, the Strategy pattern provides one extra benefit over the Template Method pattern. Whereas the Template Method pattern allows a generic algorithm to manipulate many possible detailed implementations, by fully conforming to the DIP, the Strategy pattern additionally allows each detailed implementation to be manipulated by many different generic algorithms.</p>

<H3><FONT COLOR="#000080">A Case for Template Method</FONT></H3>

<p>From 1993 to 1998, we (Object Mentor) developed a system for the ETS (Educational Testing Service). The system automated the architectural registration exam used by the NCARB (National Council of Architects Registry Board). Folks who want to become architects in the United States and Canada have to pass this test. The system we developed delivered and scored the test.</p>
<p>Delivery was via GUI. Candidates were given architectural problems to solve. They drew their solutions using the CAD-like interface offered by our system. Their solutions were typical architectural drawings like floor plans, elevation plans, roof plans, landscaping plans, etc. Their solutions were then transmitted to a central location where the scoring programs could be run. The scoring programs assessed the solutions for sound architectural principles and assigned a grade.</p>
<p>The test was broken up into 18 different <i>vignettes</i>. Each vignette presented a problem to be solved and tested for particular architectural skills. One vignette tested for the candidate's ability to put a roof on a building. Another tested the ability to subdivide a large tract of land. Still another tested the candidate's ability to design sound structures.</p>
<p>One of the vignettes tested the candidate's abilities to layout the floor plan of a building such as a library or a police station. In this vignette, the candidate had to draw rooms, corridors, doors, windows, wall-openings, stairs, elevators, etc. The program converted the drawing into a data structure that the scoring program could interpret. The object model looked something like <a href="fig3.htm">Figure 3</a>.</p>
<p>Make no mistake about this: the objects in this data structure had very minimal functionality. They were not polymorphic objects in any sense of the word. Rather they were simple data carriers, a purely representational model.</p>
<p>A building was composed of two floors. Each floor had many spaces. Each space contained many portals, each of which separated two spaces. Portals could be windows or could allow a human to pass through. Human portals were either wall openings or doors.</p>
<p>Scoring was done by testing the solution for a set of <i>features</i>. The features were things like:</p>

<UL>
<LI>Did the candidate draw all the required spaces?</LI>
<LI>Does each space fall within the range of acceptable square footage?</LI>
<LI>Does each space have an acceptable aspect ratio?</LI>
<LI>Does each space have a way in?</LI>
<LI>Do external spaces have windows?</LI>
<LI>Are the men's and ladies' washrooms connected by a door (a bad thing)?</LI>
<LI>Does the president's office have a view of the mountains?</LI>
<LI>Does the kitchen have easy access to back alley?</LI>
<LI>Does the lunchroom have easy access to the kitchen?</LI>
<LI>Can a person navigate the corridor system and get to each room?</LI>
<LI>Is there any point in the building where you are more than 20 feet from two completely separate ways out of the building?</LI>
</UL>

<p>These features were grouped into a hierarchy. Similar features were grouped together and made children of the same node. Groups with similar characteristics were placed under higher nodes, etc. Each node was given a weight depending upon its significance to the overall score.</p> 
<p>A data structure was created that represented this hierarchy. As the scores for the features were calculated, they rippled up the hierarchy, being multiplied by their weights. All the calculations culminated at the top of the hierarchy with a single score.</p>
<p>The psychometricians at ETS wanted to be able to change the shape of the scoring matrix on a whim. They wanted to be able to change the weightings, regroup the features into different sub-hierarchies, etc. They wanted to be able to take out features that they considered worthless or add new features.</p>
<p>For performance reasons, we only wanted to calculate the features that were included in the matrix, so we created classes for each feature. Each of these <b>Feature</b> classes had an <b>Evaluate</b> method that would walk the data structure in <a href="fig3.htm">Figure 3</a> and calculate a score. This meant that we had dozens and dozens of <b>Feature</b> classes that all walked the same data structure. The code duplication was horrendous.</p>

<H3><FONT COLOR="#000080">Write a Loop Once</FONT></H3>

<p>To deal with the code duplication, we started using the Template Method pattern. This was 1993, long before we knew anything about patterns. We called what we were doing &quot;Write a Loop Once.&quot; See <a href="list15.htm">Listing 15</a> and <a href="list16.htm">Listing 16</a>; these are the actual C++ modules from that program.</p>
<p>As you can see from the comment header, this code was written in 1994. So it will look a bit strange to those of you who are used to STL. Still, if you ignore the cruft and the bizarre iterators, you'll see the classic Template Method pattern in there. The <b>DoEval</b> function loops through all the <b>SolutionSpace</b> objects. It then calls the pure virtual <b>NewSolutionSpace</b> function. Derivatives of <b>SolutionSpaceFeature</b> implement <b>NewSolutionSpace</b> and measure each space against a particular scoring criterion.</p>
<p>The derivatives of <b>SolutionSpaceFeature</b> that we implemented included features that measured whether the appropriate spaces were placed into the solution, whether the spaces had the appropriate area and aspect ratio, whether elevators stacked properly, etc.</p> 
<p>The neat thing about this is that the loop that traverses the data structure is located in one place. All the scoring features inherit it rather than reimplement it.</p> 
<p>Some of the features had to measure characteristics of the portals attached to a space, so we reproduced the pattern and created the class <b>PortalFeature</b> derived from <b>SolutionSpaceFeature</b>. The implementation of <b>NewSolutionSpace</b> within <b>PortalFeature</b> looped through all the portals in the <b>SolutionSpace</b> argument and called the pure virtual function <b>NewPortal(const Portal&amp;)</b> (see <a href="fig4.htm">Figure 4</a>).</p>
<p>This structure allowed us to create dozens of different scoring features, each one of which walked the floor-plan data structure, without knowing what the floor-plan data structure looked like. If the details of the floor-plan data structure changed (e.g., we decided to use STL instead of our own iterators), we'd have to change two classes rather than several dozen.</p>
<p>Why did we choose Template Method over Strategy <a href="#2">[2]</a>? Consider how much looser the coupling would have been had we used Strategy (see <a href="fig5.htm">Figure 5</a>)!</p>

<p>Using the Template Method structure, if we had to make a change to the algorithms that walked the data structure, we would have had to change <b>SpaceFeature</b> and <b>PortalFeature</b>. In all likelihood, this would have forced us to recompile <i>all</i> the features. However, using the Strategy pattern, the change would have been to the two <b>Driver</b> classes. There is virtually no chance that the features would need to be recompiled.</p>
<p>So, why did we choose the Template Method? Because it was simpler, because the data structure was not something that was going to change frequently, and because recompiling all the features cost just a few minutes. </p> 
<p>So, even though the use of inheritance in the Template Method pattern resulted in a more tightly coupled design, and even though the Strategy pattern conforms to the DIP better than the Template Method pattern does, in the end <i>it wasn't worth the two extra classes</i> to implement the Strategy.</p>

<H3><FONT COLOR="#000080">The Template Method That Wasn't</FONT></H3>

<p>Recently my son Micah was working on an application that used SOAP <a href="#3">[3]</a>. His application was full of stretches of code that looked roughly like <a href="list17.htm">Listing 17</a>. These stretches were all virtually identical except for the number and types of parameters that were loaded into the <b>d_params</b> vector. Since we don't like lots of duplicate code, he asked me what he ought to do about it.</p>
<p>Being an object designer of immense experience, and deriving great joy from showing off my deep knowledge of design patterns to my son, I leapt to a whiteboard and sketched the diagram in <a href="fig6.htm">Figure 6</a>. Clearly I had Template Method in mind.</p>
<p>The idea was simple. Since the only difference between all the stretches of code was in the loading of the <b>d_params</b> vector, why not just make that vector a variable of the <b>SoapInvoker</b> and then let derived classes of <b>SoapInvoker</b> implement the <b>setParams</b> method to load the vector with the appropriate parameters.</p>
<p>So we wrote the <b>SoapInvoker</b> class as shown in <a href="list18.htm">Listing 18</a>. Notice that the <b>invoke</b> method calls <b>setParams</b>. This is the classic Template Method.</p>
<p>With this in place, we could now replace the duplicate code stretches with much smaller stretches that looked like <a href="list19.htm">Listing 19</a>. This vastly reduces the amount of duplicated code.</p>
<p>Things went swimmingly at first. We hunted through the code finding the target stretches and refactoring them using <b>SoapInvoker</b>. But after the first few, we ran across a function that looked like <a href="list20.htm">Listing 20</a>. This function took an argument that it then passed to the SOAP invocation. </p>
<p>This just doesn't fit very nicely into the <b>SoapInvoker</b>. <a href="list21.htm">Listing 21</a> shows why. We have to add private variables and special setters to the anonymous inner class.</p>
<p>After writing this, my son looked over at me and said: &quot;Dad, that's awful.&quot; I had to agree; it was pretty awful. Then he said, why don't we get rid of the Template Method and just put an <b>addParam</b> method in <b>SoapInvoker</b>. So that's what we did (see <a href="list22.htm">Listing 22</a>).</p>
<p>This worked much better. Now all the code stretches simply created a <b>SoapInvoker</b>, loaded it with parameters, and then called <b>invoke</b>.</p>
<p>This is typical. When faced with a problem, we find a possible way to deal with it. As we apply the solution, we find it is not ideal because of factors we haven't anticipated, so we adjust the solution in response.</p>
<p>Design patterns are good to know. If you know them well, then they can give you good ideas about how to solve problems. But you have to remember that the pattern you choose may not actually be the best solution. You have to be prepared to change direction when you see that your ideas aren't working well.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  See the Dependency Inversion Principle in the &quot;publications&quot; section of &lt;www.objectmentor.com&gt;.</p>
<p><a name="2"></a>[2]  Clearly we didn't think of it in those terms. The names of the patterns hadn't been invented at the time we made this decision. </p>
<p><a name="3"></a>[3]  Yet another middleware product for Java.</p>

<H3><FONT COLOR="#000080">Bibliography</FONT></H3>

<p>Gamma, et. al. <i>Design Patterns</i> (Addison Wesley, 1995).</p>
<p>Robert C. Martin, et. al. <i>Pattern Languages of Program Design 3</i> (Addison Wesley, 1998).</p>

<p><i><b>Robert C. Martin</b> has been a software professional since 1970. He is president of Object Mentor Inc., a firm of highly experienced experts that offers high level object-oriented software design consulting, training, and development services to major corporations around the world. In 1995, he authored the best-selling book: </i>Designing Object Oriented C++ Applications using the Booch Method<i>, published by Prentice Hall. In 1997, he was chief editor of the book: </i>Pattern Languages of Program Design 3<i>, published by Addison Wesley. In 2000, he was editor of the book </i>More C++ Gems<i>, published by Cambridge Press. From 1996 to 1998, he was the editor-in-chief of the </i>C++ Report<i>. He has published dozens of articles in various trade journals and is a regular speaker at international conferences and trade shows. He is currently working in the area of lightweight productive processes and is a strong advocate and supporter of Extreme Programming.</i></p>

<h4><a href="../../../source/2001/aug01/martin.zip"></a></h4>

</BLOCKQUOTE></BODY></HTML>
