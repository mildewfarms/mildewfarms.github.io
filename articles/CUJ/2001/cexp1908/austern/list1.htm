<HTML><HEAD>
<TITLE>August 2001 C++ Experts Forum/The Standard Librarian/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Measurements &#151; sorting a vector&lt;double&gt;</A></h4>
<pre>
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;fstream&gt;
#include &lt;utility&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;list&gt; 
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;assert.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;

using std::pair;
using std::vector;
using std::string;

struct timer {
  clock_t start;

  timer() { start = clock(); }
  double time() const {
    return double(clock() - start) / CLOCKS_PER_SEC;
  }
};

template &lt;class Container&gt;
pair&lt;string, double&gt; 
do_sort(Container c)
{
  timer t;
  std::sort(c.begin(), c.end());
  return std::make_pair(string(&quot;sort&quot;), t.time());
}

extern &quot;C&quot; int
dcompare(const void* px, const void* py)
{
  double x = *static_cast&lt;const double*&gt;(px);
  double y = *static_cast&lt;const double*&gt;(py);
  return x &lt; y ? -1 : x &gt; y ? 1 : 0;
}

pair&lt;string, double&gt;
do_qsort(vector&lt;double&gt; v)
{
  double* a = new double[v.size()];
  std::copy(v.begin(), v.end(), a);
  timer t;

  qsort(a, v.size(), sizeof(double), &amp;dcompare);
  double elapsed = t.time();
  delete[] a;
  return std::make_pair(string(&quot;qsort&quot;), elapsed);
}


template &lt;class Container&gt;
pair&lt;string, double&gt; 
do_stable_sort(Container c)
{
  timer t;
  std::stable_sort(c.begin(), c.end());
  return std::make_pair(string(&quot;stable_sort&quot;), t.time());
}

template &lt;class Container&gt;
pair&lt;string, double&gt; 
do_heap_sort(Container c)
{
  timer t;
  std::make_heap(c.begin(), c.end());
  std::sort_heap(c.begin(), c.end());
  return std::make_pair(string(&quot;heap sort&quot;), t.time());
}

template &lt;class Container&gt;
pair&lt;string, double&gt;
do_list_sort(Container c)
{
  typedef typename Container::value_type T;
  std::list&lt;T&gt; L(c.begin(), c.end());
  timer t;
  L.sort();
  return std::make_pair(string(&quot;list sort&quot;), t.time());
}

template &lt;class Container&gt;
pair&lt;string, double&gt;
do_set_sort(Container c)
{
  typedef typename Container::value_type T;
  timer t;
  std::multiset&lt;T&gt; S(c.begin(), c.end());
  return std::make_pair(string(&quot;set sort&quot;), t.time());
}

void report(vector&lt;pair&lt;string, double&gt; &gt; v,
            std::ostream&amp; os)
{
  typedef vector&lt;pair&lt;string, double&gt; &gt; Vect;
  
  os &lt;&lt; std::setw(20) &lt;&lt; &quot;sorting method&quot; &lt;&lt; &quot;    &quot; 
     &lt;&lt; &quot;t (sec)&quot; &lt;&lt; std::endl; 
  for (Vect::iterator i = v.begin(); i != v.end(); ++i)
    os &lt;&lt; std::setw(20) &lt;&lt; i-&gt;first &lt;&lt; &quot;    &quot;
       &lt;&lt; i-&gt;second &lt;&lt; std::endl;
}

int main(int argc, const char**
argv)
{
  int N = 0;
  if (argc == 2)
    N = atoi(argv[1]);
  if (N &lt;= 0) {
    std::cerr &lt;&lt; &quot;Usage: &quot;
              &lt;&lt; argv[0] &lt;&lt; &quot; &lt;positive number&gt;&quot;
              &lt;&lt; std::endl;
    return 1;
  }

  vector&lt;double&gt; v(N);
  for (int i = 0; i &lt; N; ++i)
    v[i] = i;
  std::random_shuffle(v.begin(), v.end());

  std::cout &lt;&lt; &quot;Sorting a vector of &quot;
            &lt;&lt; v.size() &lt;&lt; &quot; doubles.&quot; &lt;&lt; std::endl;
  vector&lt;pair&lt;string, double&gt; &gt; results;
  results.push_back(do_sort(v));
  results.push_back(do_qsort(v));
  results.push_back(do_stable_sort(v));
  results.push_back(do_heap_sort(v));
  results.push_back(do_list_sort(v));
  results.push_back(do_set_sort(v));

  report(results, std::cout);

  return 0;
}
</pre>
</body>
</html>
