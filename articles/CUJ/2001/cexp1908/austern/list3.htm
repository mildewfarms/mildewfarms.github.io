<HTML><HEAD>
<TITLE>August 2001 C++ Experts Forum/The Standard Librarian/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Measurements &#151 Comparing direct and indirect sort</A></h4>
<pre>
#include &lt;utility&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;fstream&gt;
#include &lt;time.h&gt;

using std::vector;
using std::string;
using std::pair;

template &lt;class Iterator&gt;
struct indirect_lt {
  bool operator()(Iterator x, Iterator y) const 
    { return *x &lt; *y; }
};

struct timer {
  clock_t start;
  timer() { start = clock(); }
  double time() const {
    return double(clock() - start) / CLOCKS_PER_SEC;
  }
};

void
report(vector&lt;pair&lt;string, double&gt; &gt; v,
       std::ostream&amp; os)
{
  typedef vector&lt;pair&lt;string, double&gt; &gt; Vect;
  
  os &lt;&lt; std::setw(20) &lt;&lt; &quot;sorting method&quot; &lt;&lt; &quot;    &quot; 
     &lt;&lt; &quot;t (sec)&quot; &lt;&lt; std::endl;
  for (Vect::iterator i = v.begin(); i != v.end(); ++i)
    os &lt;&lt; std::setw(20) &lt;&lt; i-&gt;first &lt;&lt; &quot;    &quot;
       &lt;&lt; i-&gt;second &lt;&lt; std::endl;
}

pair&lt;string, double&gt; 
do_sort(vector&lt;string&gt; c)
{
  timer t;
  std::sort(c.begin(), c.end());
  return std::make_pair(string(&quot;sort&quot;),
                        t.time());
}

pair&lt;string, double&gt; 
do_indirect_sort(vector&lt;std::vector&lt;std::string&gt;
                   ::const_iterator&gt; c)
{
  timer t;
  std::sort(c.begin(), c.end(),
            indirect_lt&lt;std::vector&lt;std::string&gt;
              ::const_iterator&gt;());
  return std::make_pair(string(&quot;indirect sort&quot;), 
                        t.time());
}

int main(int argc, const char** argv)
{
  if (argc != 2) {
    std::cerr &lt;&lt; &quot;Usage: &quot;
              &lt;&lt; argv[0] &lt;&lt; &quot; &lt;file&gt;&quot;
              &lt;&lt; std::endl;
    return 1;
  }
  
  std::ifstream in(argv[1]);
  if (!in) {
    std::cerr &lt;&lt; &quot;Can't open &quot; &lt;&lt; argv[1] &lt;&lt; std::endl;
    return 1;
  }

  vector&lt;string&gt; v;
  string str;
  while (std::getline(in, str))
    v.push_back(str);

  std::cout &lt;&lt; &quot;Sorting a file of &quot;
            &lt;&lt; v.size() &lt;&lt; &quot; lines.&quot;
            &lt;&lt; std::endl;

  typedef std::vector&lt;std::string&gt;::const_iterator iter;
  std::vector&lt;iter&gt; iv;
  for (iter i = v.begin(); i != v.end(); ++i)
    iv.push_back(i);

  vector&lt;pair&lt;string, double&gt; &gt; results;
  results.push_back(do_indirect_sort(iv));
  results.push_back(do_sort(v));
  report(results, std::cout);

  return 0;
}
</pre>
</body>
</html>
