<HTML>   
     <HEAD>
<TITLE>August 2001 C++ Experts Forum/Generic&lt;Programming&gt;</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.08/tocaug.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Generic&lt;Programming&gt;: Typed Buffers (I)</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrei Alexandrescu</FONT></H3>

<HR>
<BLOCKQUOTE>


<p>Imagine the installment of &quot;Generic&lt;Programming&gt;&quot; you're about to read starting like so: &quot;This article treats memory buffers in C++.&quot; </p>
<p>As you hastily close the browser, if you kept your ear attentive, you would hear the subtle noise of tens of thousands of other mouse clicks doing the same. Because who'd be interested at all in an article that treats such a trivial subject as memory buffers?!</p>
<p>This article indeed treats memory buffers in C++, but with two twists: first, the buffers are generic, which means they can contain typed data (as opposed to raw bytes). Second, the buffers we'll talk about are as efficient as their hosted type and the host operating system allows, in every aspect &#151; allocation strategy, as well as data manipulation.</p>
<p>As you'll soon see, writing a generic buffer is a cute exercise on templates. Writing an <i>efficient</i> buffer is not too complicated of a task either. Writing a buffer that is exception-safe is more challenging, but still not too hard, especially if you've read <i>the</i> book on exception safety <a href="#1">[1]</a>. But writing a buffer that's both generic and efficient is like a long climb up a steep hill. As it often happens with C++, the scenery you enjoy at the top of the hill is well worth the effort &#151; if only you could ignore that <i>thing</i> you just stepped in.</p>

<H3><FONT COLOR="#000080">The Twilight Zone</FONT></H3>

<p>Every now and then, someone posts to the Usenet newsgroup <b>comp.lang.c++.moderated</b> a question like: Why doesn't <b>auto_ptr</b> offer you the chance to use <b>delete[]</b> in the destructor instead of <b>delete</b>? The discussion follows a specific pattern: </p>
<p>&quot;You should stay away from C-style arrays and use <b>std::vector</b>, which is efficient and all.&quot; </p>
<p>&quot;Well, <b>std::vector</b> is not efficient enough for what I'm trying to do.&quot; </p>
<p>&quot;Why isn't it?&quot; etc.</p>
<p>The thing is, <b>std::vector</b> is indeed a very well designed class for handling contiguous sequences of objects. When I first saw <b>std::vector</b>'s elegant design, I wasn't compelled at all to throw it away and define my own (a compulsion felt when I saw, for example, certain MFC artifacts). However, <b>std::vector</b> does have some inefficiencies that can seriously bother certain users:</p>

<UL>
<LI><i>Unnecessary data initialization.</i> Often, you need to create an appropriately sized vector of a primitive type (such as <b>char</b>) and pass it to a low-level C function that fills it with data read from a socket or file. The problem is that, although you don't need it, the whole vector will be initialized upon construction or resizing. If you have to interface with C functions, there is no way in which you can avoid this overhead.</LI>
<LI><i>Exponential growth.</i> Standard vectors sport fast (constant time on average) growth. This implies that <b>std::vector</b> grows in multiplicative hops &#151; most implementations double the allocated size whenever they need to grow automatically. If you want to append an object to a vector containing one million objects, a vector will allocate for a short time enough space to accommodate three million objects; that might not be what you would prefer.</LI> 
<LI><i>&quot;Imperialistic&quot; memory allocation strategy.</i> Standard vectors never shrink; they only grow. If you collected three million data samples and you decide to keep one million samples after some interpolation, you'll have slack space worth two million objects. The recommended idiom for such cases is to copy your vector into a fresh new vector and then swap the two vectors:</LI> 

<pre>
std::vector&lt;double&gt; data;
... work with data ...
// Shrink data
std::vector&lt;double&gt;(data.begin(), data.end()).swap(data);
</pre>

<p>The idiom is less than optimal because you must copy the data. Worse, even this idiom is not 100% guaranteed to make economic use of memory because  <b>std::vector</b> can always allocate more memory than needed.  It would be better if you could shrink the vector &quot;in-place,&quot; that is, just tell the allocator that it can use the memory at the end of your vector. Many memory allocators allow you to do that.</p>
<LI><i>Inefficient object moving.</i> <b>std::vector</b> does not differentiate between copying and moving. To an <b>std::vector</b>, a move is a copy followed by the destruction of the source. So if you have a vector of strings and reallocate it, there's no way in which you can write a primitive that moves a couple of pointers efficiently to new memory and have <b>std::vector</b> use it. Every single string will be unnecessarily copied to a new string. This policy is a big source of inefficiencies for all those who are not members of CFC <a href="#2">[2]</a>, and an often-quoted reason for which <b>std::vector&lt; std::vector&lt;T&gt; &gt;</b> is a no-no.</LI> 
<LI><i>Further inefficiencies in data copying and moving.</i> Some STL implementers don't differentiate between vectors of plain-old-data types and vectors of elaborate types. (Metrowerks is a notable exception.) This means that they use the most generic constructs to copy data, such as <b>for</b> loops. You'd imagine that a good compiler would replace a loop that copies a range of integers with an efficient <b>memcpy</b> call. Well, not quite. I tested two compilers known for generating efficient code: Microsoft Visual C++ and Metrowerks CodeWarrior. In full speed optimization mode, they both generated significantly slower code for copying arrays of integers using straight loops as compared to the equivalent <b>memcpy</b> call. So if you want performance, you may need to be sure the call to <b>memcpy</b> is right in your source code.</LI> 
<LI><i>Unneeded exception safety.</i> Many <b>std::vector</b> implementations (but not all) assume that the constructor, copy constructor, and assignment operator of the stored type might throw. This is not the case for primitive types and many other types. The generated code for these types might be unnecessarily bigger and slower.</LI> 
</UL>

<p>In many applications, some or all of these problems are not annoying at all. But when you start asking for heavy-duty performance, the attractiveness of <b>std::vector</b> might decrease and you might be looking for a structure that is more optimized and gives you more control. The problem is that you won't find any container in the C++ Standard below <b>std::vector</b> &#151; except for the C-style string. It's either Cadillac or Geo.</p> 
<p>Proof? Well, the proof's right there in the pudding: STL uses contiguous buffers in at least three places (aside from <b>std::vector</b> itself): <b>std::basic_string</b>, <b>std::deque</b>'s chunk management, and <b>std::deque</b>'s chunks themselves. However, no STL implementation I've seen uses <b>vector</b> as a back-end for these structures. If <b>std::vector</b> is the one-stop-shop for your contiguous data needs, then it must be said that STL implementers shop at a specialty grocer.</p>
<p>There is an interstice, a twilight zone between <b>std::vector</b> and the C-style string. We target this niche. We will develop together a contiguous buffer that:</p>

<UL>
<LI>is generic &#151; can store sequences of any type</LI>
<LI>is familiar &#151; supports a subset of <b>std::vector</b>'s syntax and semantics</LI>
<LI>offers total control &#151; offers fine-grained primitives in addition to higher-level functions</LI>
<LI>generates pedal-to-the-metal code for primitive types and select user-defined types</LI>
<LI>allows user-controlled optimizations</LI>
<LI>supports advanced allocation facilities, such as in-place expansion and fast reallocation</LI>
<LI>most importantly, can be used as a back-end for higher-level contiguous containers &#151; in particular, you can use it to implement vectors, strings, or deques</LI>
</UL>

<H3><FONT COLOR="#000080">buffer: First Blush</FONT></H3>

<p>Let's define an interface for a <b>buffer</b> class template. The <b>buffer</b> holds only two pointers &#151; the beginning and the end of the controlled memory chunk. To a <b>buffer</b>, there's no difference between size and capacity. We thus start from <b>std::vector</b>'s interface and eliminate functions that refer to capacity. We are left with the following set of member functions:</p>

<pre>
template &lt;class T, class Allocator = std::allocator&lt;T&gt; &gt;
class buffer 
{
public:
    ... all of std::vector's types and functions, except:
    // size_type capacity() const;
    // void reserve(size_type n);
private:
    T* beg_;
    T* end_;
};
</pre>

<p>Interestingly, although <b>buffer</b> has no notion of capacity, it can implement all of <b>std::vector</b>'s primitives except <b>capacity</b> and <b>reserve</b>, with the amendment that <b>buffer</b> cannot satisfy the performance requirements of all those functions. For example, <b>buffer&lt;T&gt;::push_back</b> has <b>O(N)</b> complexity, while <b>std::vector&lt;T&gt;::push_back</b> has <b>O(1)</b> complexity if mediated over a large number of calls. (That is what the Standard calls &quot;amortized constant&quot; complexity.) As you'll see down the road, we'll improve <b>buffer&lt;T&gt;::push_back</b>'s performance in certain cases, while still not supporting the notion of capacity.</p> 
<p>Implementing <b>buffer</b>'s interface is not very complicated; the two things that require attention are exception safety <a href="#3">[3]</a> and properly destroying the objects. The standard functions <b>std::uninitialized_copy</b> and <b>std::uninitialized_fill</b> are two very helpful primitives.</p>
<p>To allow the user to allocate a buffer without initializing it, we need a special constructor and a couple of helper functions. Then, we need a primitive <b>grow_noinit</b> that grows the buffer without calling the constructors. Consequently, we need the complementary function <b>shrink_nodestroy</b> that shrinks the vector without calling the destructors, and finally, the slightly redundant <b>clear_nodestroy</b>, which clears the buffer and deallocates the memory without invoking the destructors. Here they are:</p>

<pre>
template &lt;class T, class Allocator = std::allocator&lt;T&gt; &gt;
class buffer 
{
    ... as above ... 
public:
    enum noinit_t { noinit };
    buffer(size_type n, noinit_t, 
        const Allocator&amp; a = Allocator());
    void grow_noinit(size_type growBy);
    void shrink_nodestroy(size_type shrinkBy);
    void clear_nodestroy();
};
</pre>


<p>This extended interface gives you total control over the buffer and the data that's contained in it. Beware, however, of naively using the extension functions. Consider, for example, you use <b>grow_noinit</b> as follows:</p>

<pre>
void Fun()
{
    buffer&lt;Widget&gt; someWidgets;
    ...
    // add space for 10 Widgets
    someWidgets.grow_noinit(10);
    // Initialize the Widgets
    ConstructWidgets(
        someWidgets.end() - 10, someWidgets.end());
    ...
}
</pre>

<p>The problem is that if the construction of the 10 <b>Widget</b>s fails in any way, all things are not good. When <b>Fun</b> returns, <b>someWidgets</b>' destructor will diligently try to destroy <i>all</i> of its contents &#151; it doesn't track constructed and non-constructed <b>Widget</b>s because, again, unlike <b>std::vector</b>, <b>buffer</b> doesn't have the notion of capacity. If there is still any uninitialized memory in the buffer, the effect of applying <b>Widget</b>'s destructor to that memory is, obviously, undefined.</p>
<p>With these caveats in mind, it seems like we have a good start. Let's see now how we can optimize <b>buffer</b>.</p>

<H3><FONT COLOR="#000080">Type Traits</FONT></H3>

<p>One key technique for optimizing generic code is to infer information about the types on which the generic code operates. Then, the generic code can dispatch work at compile time to specialized routines that make specific assumptions about the types on which they operate.</p> 
<p>For example, in our case, an important piece of information is whether the copy constructor of <b>buffer</b>'s hosted type throws an exception or not. For a type that doesn't throw an exception upon copying, the code is simpler as it doesn't have to take care of exception safety. In addition, some compilers generate better code if <b>try</b> blocks are not used.</p> 
<p>Type traits are a known technique for deducing information about types. Boost <a href="#4">[4]</a> has a library that implements type traits, as well as Loki <a href="#5">[5]</a>. (With <b>buffer</b>, we will use a type traits mechanism that's slightly different from those implemented in both Boost and Loki, suggested to me by Vesa Karvonen via email.)</p>
<p>Let's figure out code for deducing whether the copy constructor of a type might throw an exception or not. Quite frankly, figuring this out for any type is not possible in current C++. However, we can make a few steps and let the user help us when they want optimization. </p>
<p>You don't have to be Sherlock Holmes to deduce that the copy constructor of any primitive type cannot throw. Therefore, a conservative assumption is any type's copy constructor might throw an exception, except for primitive types. Here's the corresponding code:</p>

<pre>
namespace TypeTraits
{
    // Enumerate all primitive types
    typedef TYPELIST_14(
        const bool,
        const char,
        const signed char, 
        const unsigned char,
        const wchar_t,
        const short int, 
        const unsigned short int,
        const int,
        const unsigned int,
        const long int, 
        const unsigned long int,
        const float,
        const double,
        const long double)
    PrimitiveTypes;

    template &lt;typename T&gt; struct IsPrimitive
    {
        enum { value =
             Loki::TL::IndexOf&lt;PrimitiveTypes,
             const T&gt;::value &gt;= 0 };
    };

    template &lt;typename T&gt; struct IsPrimitive&lt;T*&gt;
    {
        enum { value = true };
    };

    template &lt;typename T&gt; struct CopyThrows
    {
        enum { value = !IsPrimitive&lt;T&gt;::value };
    };
}</pre>

<p>To be more concise, the code above makes use of two amenities provided by Loki: typelists and <b>IndexOf</b>. Typelists allow you to create and manipulate lists of types, and <b>Loki::TL::IndexOf</b> finds an individual type in a typelist and returns its index. The index is negative if the type is not found in the typelist. Finally, <b>TypeTraits::CopyThrows&lt;T&gt;::value</b> contains the needed information.</p>
<p>The mechanism through which type information is inferred is considerably flexible. Imagine you define the following type in an application:</p>

<pre>
struct Point
{
    int x;
    int y;
    ... utility functions ...
};
</pre>

<p>The type <b>Point</b> above is not primitive, but it also doesn't throw an exception upon copying. You can communicate that to our type traits mechanism. All you have to do is to reopen the <b>TypeTraits</b> namespace and put an explicit instantiation of <b>CopyThrows</b> in there:</p>

<pre>
// In file &quot;Point.h&quot;, after Point's definition
namespace TypeTraits
{
    template &lt;&gt; struct CopyThrows&lt;Point&gt;
    {
        enum { value = false };
    };
}
</pre>

<p>Better yet, you can specify <b>CopyThrows</b> for an entire category of types via partial template specialization. For example, recall the standard complex type, <b>std::complex&lt;T&gt;</b>. You can instantiate <b>std::complex</b> with primitive arithmetic types, but also with a user-defined numeric type, such as <b>Rational</b> or <b>BigInt</b>. Now, because copying an <b>std::complex&lt;T&gt;</b> object consists of copying two <b>T</b> objects (the real and imaginary part), it follows that <b>std::complex&lt;T&gt;</b> has the same <b>CopyThrows</b> trait as <b>T</b>. Here's how you can express that:</p> 

<pre>
namespace TypeTraits
{
    template &lt;class T&gt; struct CopyThrows&lt; std::complex&lt;T&gt; &gt;
    {
        enum { value = CopyThrows&lt;T&gt;::value };
    };
}
</pre>

<p>Let's get back to <b>buffer</b>. How does <b>buffer</b> use the <b>CopyThrows</b> information? Dispatching upon a Boolean value at compile time is easy using the <b>Int2Type</b> class template, described in <a href="#5">[5]</a> and <a href="#6">[6]</a>. To recap, <b>Int2Type</b> has the deceptively simple definition:</p> 

<pre>
template &lt;int v&gt;
struct Int2Type
{
    enum { value = v };
};
</pre>

<p>Here, for example, is how <b>buffer</b>'s constructor uses <b>Int2Type</b> to dispatch to an exception-safe or an exception-numb initialization function:</p> 

<pre>
template &lt;class T, class Allocator =
     std::allocator&lt;T&gt; &gt;
class buffer : private Allocator
{
private:
    enum { copyThrows =
        TypeTraits::CopyThrows&lt;T&gt;::value != 0 };

    // Exceptionless initialization
    void Init(size_type n, const T&amp; value,
        Loki::Int2Type&lt;false&gt;)
    {
        ... 
    }

    // Initialization in the presence of exceptions
    void Init(size_type n, const T&amp; value,
        Loki::Int2Type&lt;true&gt;)
    {
        ...
    }

public:
    explicit buffer(size_type n,
        const T&amp; value = T(),
        const Allocator&amp; a = Allocator())
    {
        Init(n, value, 
            Loki::Int2Type&lt;copyThrows&gt;());
    }
};
</pre>

<p>Other sensible pieces of information about a type that would be interesting to <b>buffer</b> would be:</p>
<UL>
<LI>Whether the type is <b>MemCopyable</b>, that is, if copying an object is the same as <b>memcpy</b>'ing that object's bits. Obviously, this is the case for primitive types and for POD (Plain Old Data, C-style) structures.</LI>
<LI>Whether the type is <b>MemMoveable</b>, that is, if copying an object from a spot to another in memory and then destroying the source object is the same as <b>memcpy</b>'ing the object's bits and not destroying the source. Again, this is the case for primitive types and PODs. But, as you will see soon, a surprisingly rich subset of user-defined types is <b>MemMoveable</b>.</LI>
</UL>

<p>The next installment of &quot;Generic&lt;Programming&gt;&quot; will define <b>MemCopyable</b> and <b>MemMoveable</b> and exploit them in a manner similar to <b>CopyThrows</b>. Does that put the subject to rest? Not at all. As the <b>reallocate</b> and <b>inplace_reallocate</b> artifacts in the downloadable code suggest, we'll travel through the Caudine Forks of memory allocation. Until then &#151; comments galore! </p>


<H3><FONT COLOR="#000080">Acknowledgement</FONT></H3>

<p>Many thanks to Tim Sharrock for a thorough review.</p>

<H3><FONT COLOR="#000080">Bibliography and Notes</FONT></H3>

<p><a name="1"></a>[1]  Herb Sutter. <i>Exceptional C++</i> (Addison-Wesley, 2000).</p>
<p><a name="2"></a>[2]  Acronym for COW Fan Club. In turn, COW stands for Copy-On-Write. COW is the one strategy that is friendly to the move-implemented-as-copy policy used by <b>std::vector</b>. However, many library writers are moving away from COW-based implementations due to the problems they raise in multithreaded programs.</p>
<p><a name="3"></a>[3]  In general, <b>buffer</b> must have the same level of exception safety as vector. See Bjarne Stroustrup, Appendix E: Standard-Library Exception Safety at &lt;www.research.att.com/~bs/3rd_safe0.html&gt;.</p>
<p><a name="4"></a>[4]  Boost is a collection of cutting-edge C++ libraries. See &lt;www.boost.org&gt;.</p>
<p><a name="5"></a>[5]  Loki is the library featured in <i>Modern C++ Design</i> (Addison-Wesley, 2001) written by yours truly. You can download Loki from &lt;www.moderncppdesign.com&gt;. </p>
<p><a name="6"></a>[6]  Andrei Alexandrescu. &quot;Generic&lt;Programming&gt;: Mappings between Types and Values,&quot; C/C++ Users Journal C++ Experts Forum, October 2000, &lt;www.cuj.com/experts/1810/alexandr.htm&gt;.</p>

<p><i><b>Andrei Alexandrescu</b> is a Development Manager at RealNetworks Inc. (&lt;www.realnetworks.com&gt;), based in Seattle, WA, and author of the acclaimed book <i>Modern C++ Design</i>. He may be contacted at <b>andrei@metalanguage.com</b>. Andrei is also one of the featured instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;).</i></p>

<h4><a href="../../../source/2001/aug01/alexandr.zip"></a></h4>

</BLOCKQUOTE></BODY></HTML>
