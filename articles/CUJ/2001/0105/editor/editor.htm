<HTML>   
     <HEAD>
<TITLE>May 2001/Editor's Forum</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">  Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Editor's Forum</FONT></H2>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">The Emperor&#146;s New Shoes</FONT></H3>

<p>When I first learned about object-oriented programming many years ago, I was introduced to the concept of inheritance through one of those all-too-common zoological illustrations: a sparrow is-a bird, a bird is-an animal, and so on. Then, of course, the author gave each of these classes some clever member functions, like <B>Eat</B>, <B>Fly</B>, and <B>Sleep</B>. Even back then I knew such examples were hokey. You would never see anything like a <B>Sparrow</B> object in a real program, unless it was some sort of special-purpose simulation. Even in a simulation, a sparrow&#146;s position in the animal hierarchy would not likely be programmatically significant.</p>
<p>These taxonomies of animals, plants, vehicles, what have you, became almost canonical illustrations of inheritance, and yet they were lame. They were lame because they gave an unrealistic view of how the real world maps to software; thus, they gave no visceral impression of how inheritance could be used to good effect. You might say I am being too picky. After all, thinking up examples is hard. But my point is, sometimes when it is hard to find a realistic example to illustrate a feature, it&#146;s a good clue that the feature isn&#146;t as essential as it&#146;s cracked up to be. And, as we have discovered many years down the road, inheritance is not as essential as it was cracked up to be. Inheritance is important, even indispensable for some things, but today we know that containment is often the preferred solution. I think if we had been more curious about what was wrong with these examples we would have found that out sooner.</p>
<p>Now I have just finished reviewing the millionth article that uses some sort of <B>Employee</B> object as an example. Again the object has some clever member functions like <B>IncreaseSalary</B> or <B>Promote</B> (which leads to an interesting OO problem &#151; how to keep objects from calling themselves). I would say that <B>Employee</B> has now become the canonical example object. And guess what: it&#146;s hokey too.</p>
<p>To see why it&#146;s hokey, imagine you&#146;re writing payroll applications for a big accounting department. First, realize that all this employee data will be stored in a database. If you&#146;re really lucky, it will be an object database; but more likely it will be a plain old relational database, and you&#146;ll have to use some sort of persistence scheme to get <B>Employee</B>s in and out of it. You&#146;re going to write dozens of payroll applications, and they&#146;re all going to demand different capabilities of your <B>Employee</B> objects. Are you going to give your <B>Employee</B> class dozens of corresponding member functions? I hope not. Even encapsulating the apparently simple <B>IncreaseSalary</B> operation isn&#146;t very realistic: if you increase an employee&#146;s salary, it will have effects all over the organization. The fact is, in a typical payroll application, all kinds of different entities will need access to employee data. That&#146;s why data needs to be dumb and unencapsulated; it&#146;s why we have relational databases in the first place.</p>
<p>So maybe there&#146;s still something wrong with our understanding of OO. Maybe our mistake is in trying to model a data-oriented problem as an object-oriented one, or maybe encapsulation isn&#146;t all it&#146;s cracked up to be either. I am not suggesting that authors are wrong to use such examples. Good examples <I>are</I> hard to come up with, and writers far better and smarter than I have relied on <B>Employee</B>s, <B>Manager</B>s, even <B>Wombat</B>s to do their bidding. I am suggesting that readers go even further with such examples than their authors intended: if an example seems a bit artificial, ask yourself what makes it so, and how you would illustrate it better. Who knows, you may discover a great new truth and become rich and famous &#151; or you may just annoy the heck out of the author. But whatever else comes of your curiousity, it will make you a better programmer.</p>
<p>Marc Briand<br>
Editor-in-Chief</p></blockquote></body></html>
