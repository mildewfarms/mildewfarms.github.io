<HTML><HEAD>
<TITLE>May 2001/Uncaught Exceptions/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2: Detecting delete</A></h4>
<pre>
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;stdlib.h&gt;

class X
    {
public:
    void *operator new(size_t n)
        {
        void *const p = malloc(n);
        allocations_.push_back(p);
        return p;
        }
    void operator delete(void *p)
        {
        allocations_.remove(p);
        free(p);
        }
    static void test(std::string const &amp;label,
            X const *const p)
        {
        std::cout &lt;&lt; label &lt;&lt; std::endl;
        std::cout &lt;&lt; "    ";
        list::iterator const location =
                std::find(allocations_.begin(),
                allocations_.end(), p);
        bool const allocated =
                (location != allocations_.end());
        if (!allocated)
            std::cout &lt;&lt; "not ";
        std::cout &lt;&lt; "allocated" &lt;&lt; std::endl;
        std::cout &lt;&lt; std::endl;
        }
private:
    typedef std::list&lt;void *&gt; list;
    static list allocations_;
    };

X::list X::allocations_;

#define TEST(statement) \
    statement; \
    X::test(#statement, p);

int main()
    {
    X *p;
    TEST(p = NULL)
    TEST(p = new X)
    TEST(delete p)
    TEST((p = new X, p-&gt;~X()))
    TEST(p-&gt;operator delete(p))
    }

/* expected run-time result:

p = NULL

  not allocated

p = new X

  allocated

delete p

  not allocated

(p = new X, p-&gt;~X())

  allocated

p-&gt;operator delete(p)

  not allocated

*/
&#151; End of Listing &#151;</pre></body></html>
