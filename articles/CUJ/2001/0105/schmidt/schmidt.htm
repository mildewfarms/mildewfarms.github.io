<HTML>   
     <HEAD>
<TITLE>May 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: The Great Panjandrum</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Templates are hard enough to understand without all the inconsistent terminology being used in C++ literature. Bobby clears up an especially troublesome case.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>In this space last month, I discussed my increasing preference for writing online. Indeed, between my work for <I>CUJ</I> and that for MSDN, I&#146;ve been writing online for years. But what&#146;s new is that I&#146;m about to start editing and managing other people&#146;s writing online as well.</p>
<p>Since late last year, MSDN&#146;s had a small developer portal covering the nascent .NET Framework <a href="#1">[1]</a>. My mission this year is to turn that portal into a serious online publication and resource. For that, I will be the content strategist and Editor-in-Chief, two roles I&#146;ve never before held anywhere.</p>
<p>Today the intersection between my portal and <I>CUJ</I>&#146;s traditional domain is pretty small. I foresee that intersection growing significantly over the next couple of years. In particular, I expect that .NET will influence the role and evolution of C++ relative to other languages. I also won&#146;t be surprised if the eventual ECMA standards for C# and the Common Language Infrastructure inform the next version of the ISO C++ Standard.</p>
<p>For now, I&#146;m just trying to inject the site with some editorial presence, rationale, and personality. Once I get things really swinging, I invite you to come take a look and tell me what you think. If I can do half as good a job as Marc has done with <I>CUJ</I> in my nearly six years here, I&#146;ll be beyond thrilled.</p>
<p>(All of this assumes I actually get to do what I want to. Microsoft is a big company, .NET is complicated business, and a lot can change. By the time you actually read this, we may have a completely different mission.)</p>

<H3><FONT COLOR="#000080">Impartial Specialization</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi,</p>
<p>Thank you for your answer (in <I>CUJ</I> October 2000) to my question on partial specialization of templates.</p>
<p>You said that partial specializations of function templates are not allowed by the C++ Standard. Now I found the following passages in Stroustrup&#146;s <I>The C++ Programming Language</I> (3rd edition). In section 18.6.8, Stroustrup discusses</p>

<pre>
template&lt;class T&gt;
void swap(T &amp;a, T &amp;b)
    {
    T tmp = a;
    a = b;
    b = tmp;
    }
</pre>

<p>as a template within <B>&lt;algorithm&gt;</B>. He also writes (in section 16.3.10) that when <B>T</B> has the form <B>vector&lt;X, A&gt;</B> one can improve it using the specialization (!)</p>

<pre>
template&lt;class X, class A&gt;
void swap(vector&lt;X, A&gt; &amp;x,
        vector&lt;X, A&gt; &amp;y)
   {
   x.swap(y);
   }
</pre>

<p>from <B>&lt;vector&gt;</B>.</p>
<p>Stroustrup says that this specialization is provided by the Standard. Does this contradict your statement that partial specializations of function templates are not allowed?</p>
<p>On the other hand, if partial specializations of function templates really aren&#146;t allowed, could you give a short answer why, especially since Stroustrup&#146;s <B>swap</B> example above proves their usefulness?</p>
<p>Thanks again! &#151; Achim Kupferoth</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> While Bjarne does not contradict me, I do believe he is mistaken.</p>
<p>I wrote that you can&#146;t have a partial specialization of function templates, and that&#146;s true: while the C++ Standard is rife with mention of partial <I>class</I>-template specialization, it is utterly silent about partial <I>function</I>-template specialization.</p>
<p>In the passage you cite, Bjarne asserts that</p>

<pre>
template&lt;class X, class A&gt;
void swap(vector&lt;X, A&gt; &amp;,
        vector&lt;X, A&gt; &amp;)
</pre>

<p>is a &#147;specialization,&#148; not a &#147;partial specialization.&#148; There&#146;s a big difference between those two terms. In that sense, Bjarne and I are not in conflict.</p>
<p>But that doesn&#146;t mean he&#146;s right. What Bjarne calls a specialization isn&#146;t a specialization, partial or otherwise. It&#146;s really an overload of</p>

<pre>
template&lt;class T&gt;
void swap(T &amp;, T &amp;)
</pre>

<p>Just as you can overload regular (non-template) functions, you can also overload function templates. In the simple example taken from the Standard <a href="#2">[2]</a>:</p>

<pre>
template&lt;class T&gt;
void f();

template&lt;int I&gt;
void f();
</pre>

<p>two distinct <B>f</B> overloads are declared. The overloads are distinguishable via explicit template arguments:</p>

<pre>
f&lt;int&gt;(); // OK, calls 1st overload
f&lt;2&gt;();   // OK, calls 2nd overload
f();      // error, ambiguous
</pre>

<p>In the more complex example from Bjarne&#146;s book, there are two <B>swap</B> overloads:</p>

<pre>
template&lt;class T&gt;
swap(T &amp;, T &amp;)

template&lt;class T, class A&gt;
swap(vector&lt;T, A&gt; &amp;, vector&lt;T, A&gt; &amp;)
</pre>

<p>From these overloads, you can create genuine explicit specializations <a href="#3">[3]</a>. As an example,</p>

<pre>
template&lt;&gt;
void swap&lt;int&gt;(int &amp;, int &amp;)
</pre>

<p>explicitly specializes the first <B>swap</B> overload for class <B>T = int</B>.</p>
<p><a href="list1.htm">Listing 1</a> shows a code snippet demonstrating the two overloads and this example specialization.</p>
<p>I&#146;ll add that your confusion is quite understandable. Class templates have partial specializations; function templates have the related concepts of overloads and partial ordering rules. And both have specializations and instantiations <a href="#4">[4]</a>.</p>
<p>For reasons I don&#146;t know, the C++ committee kept the class-template and function-template concepts and terminology maddeningly similar yet distinct. Everyone I know gets lost in this tangle eventually. Indeed, I discussed your question with Dan Saks; we both had to tease through the Standard to persuade ourselves that my interpretation is right.</p>

<H3><FONT COLOR="#000080">Deletion Detector</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby,</p>
<p>Consider this code:</p>

<pre>
X *p = new X;
delete p;
</pre>

<p>How do I test to find out that the object pointed to by <B>p</B> has been deleted?</p>
<p>Best Regards &#151; Yu Tang</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> You can&#146;t, at least not directly and 100 percent reliably.</p>
<p>One simple apparent solution: maintaining a deletion flag within each <B>X</B> object. The flag is cleared upon object construction and set upon object destruction:</p>

<pre>
class X
    {
public:
    X() : deleted_(false)
        {
        }
    ~X()
        {
        deleted_ = true;
        }
    bool deleted_;
    };

X *p = new X;
// ...
delete p;
if (p-&gt;deleted_)
    // ...
</pre>

<p>Lamentably, this simple approach suffers three large problems:</p>

<UL><LI>   It relies on behavior outside the Standard&#146;s province. Once an object&#146;s lifetime ends, the Standard-required properties and behavior no longer apply <a href="#5">[5]</a>.</LI>
<LI>   <B>delete p</B> has the side effect of calling <B>operator delete</B> to free <B>*p</B>&#146;s memory. By the time you check <B>p-&gt;deleted_</B>, you don&#146;t necessarily know that <B>*p</B>&#146;s memory has not already been invalidated by your operating system, returned to the free store, reused by another object, or otherwise made unavailable.</LI>
<LI>   Because you don&#146;t know that <B>~X</B> was called via <B>delete</B>, the <B>deleted_</B> flag may show a false positive.</LI></UL>

<p><a href="list2.htm">Listing 2</a> shows another approach: maintaining a list of currently allocated <B>X</B> objects. When an object is allocated via <B>operator new</B>, its address goes on the list; when the object is later deallocated via <B>operator delete</B>, its address leaves the list. If an object does not appear on the list, it has presumably been deleted.</p>
<p>This program mitigates the previous three problems:</p>

<UL><LI>   It falls within the language rules.</LI>
<LI>   It does not access an object&#146;s state after the object is deleted.</LI>
<LI>   It senses deletion in <B>operator delete</B> instead of <B>~X</B>, reducing the chance of false positives.</LI></UL>

<p>As written, the program contains a few simple test cases. Those tests show that the program can&#146;t discriminate between</p>

<pre>
delete p;
</pre>

<p>and</p>

<pre>
p-&gt;~X();
p-&gt;operator delete(p);
</pre>

<p>I&#146;ll let you decide if this is a bug or a feature.</p>
<p>If you have sufficiently intimate knowledge of your compiler, you could possibly hack into its free-store manager to directly trap allocations and deallocations. You might even be able to probe the allocated blocks for system-specific flags indicating their state. In either event, I definitely leave such capers to you.</p>

<H3><FONT COLOR="#000080">Local Heckle Decls</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Is it ever appropriate to place function prototypes locally within the functions that call them, rather than globally at the top of the file? If so, under what circumstances?</p>
<p>Thanks &#151; Sharon Harvey</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Since you didn&#146;t specify a language, my answer applies to both C and C++.</p>
<p>If I&#146;m reading you correctly, you&#146;re wondering when &#151; or even if &#151; it&#146;s better to write something like</p>

<pre>
/* Version 1 */

void f(void)
    {
    extern void zed(void);
    zed();
    }
</pre>

<p>instead of</p>

<pre>
/* Version 2 */

extern void zed(void);

void f(void)
    {
    zed();
    }
</pre>

<p>In the Real World, I&#146;d argue that both of these versions are almost always inferior to</p>

<pre>
/* Version 3 */

/* zed.h */

extern void zed(void);

/* C or C++ source */

#include &#147;zed.h&#148;

void f(void)
    {
    zed();
    }
</pre>

<p>Your question brings into conflict three sacred design principles:</p>

<UL><LI>   Maximize maintainability. Versions 2 and 3 favor maintainability, by declaring <B>zed</B> in one easily discoverable place. Version 1 is less maintainable, especially if <B>zed</B> is called in multiple functions and thus must be redundantly declared.</LI>
<LI>   Maximize encapsulation. Version 3 favors encapsulation, by textually hiding the <B>zed</B> declaration in a separate header file. Version 1 favors encapsulation in a different way, by confining <B>zed</B>&#146;s declaration to the smallest possible scope.</LI>
<LI>   Minimize name collisions. By declaring <B>zed</B> global, Versions 1 and 2 allow other parts of the file to inadvertently call <B>zed</B>. They also prevent a global object or (in C) another global function named <B>zed</B> from being declared.</LI></UL>

<p>Overall, I favor Version 3 over Version 2 pretty universally, so the real competition is between Versions 1 and 3.</p>
<p>The only time I&#146;d recommend Version 1 is when you have high certainty the external function will be used in exactly one place and won&#146;t be changed &#151; and even that recommendation is mild. Most programmers expect external declarations to appear at the top of a source file, either explicitly (Version 2) or implicitly (Version 3). Declaring them elsewhere would probably be a surprise.</p>
<p>The argument for Version 1 strengthens if the functions are static and reference one another:</p>

<pre>
static void f()
    {
    static void zed();
    zed();
    }

static void zed()
    {
    void f();
    }
</pre>

<p>In this case, I think it&#146;s reasonable to forward-declare one of the functions locally. Putting the <B>zed</B> declaration into a header (as in Version 3) doesn&#146;t make much sense, as it can&#146;t be referenced in other translation units. And declaring it at the top of the file (as in Version 2) seems redundant, for the function would then be declared twice at global scope.</p>
<p>Finally, in the (admittedly suspect) case of</p>

<pre>
static void zed(void)
    {
    }

void f(void)
    {
    extern void zed();
    zed();
    }
</pre>

<p>you must declare the <B>extern</B> function locally in C++; otherwise the compiler would think you are multiply declaring the same <B>zed</B> at global scope with conflicting linkage specifiers.</p>

<H3><FONT COLOR="#000080">Construction Malfunction</FONT></H3>
<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Dear Bobby,</p>
<p>I work with Borland C++Builder v5.0 for Windows NT.</p>
<p>I decided that I needed to add an extra parameter to the copy constructor of a certain class (for reasons I won&#146;t go into). I already had in the code a few places that I instantiated this class using its copy constructor, but I figured that since I did not set a default value for that parameter yet, the compiler would detect where I forgot to add that extra parameter.</p>
<p>After running the code, I was surprised to find out that there was such a place, and not only did the compiler not detect it, but when running it called the copy constructor of the base class without visiting any of the derived class&#146;s constructors.</p>
<p>Is this normal behavior? I&#146;ve included a small example that demonstrates it. (And yes, I&#146;m aware that in this particular example using a virtual function to get the value is more correct.)</p>
<p>Thank you for your time. &#151; Ido Grabinsky</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I show a reduced version of your example as <a href="list3.htm">Listing 3</a>.</p>
<p>In that example, you expect the line</p>

<pre>
B b2(b1);
</pre>

<p>to not compile; yet the line does compile (correctly), and the program does run (correctly). Chalk it up to C++ doing you an apparently unexpected and unwanted favor.</p>
<p>I&#146;m sorry to break the news that</p>

<pre>
B(B const &amp;, bool)
</pre>

<p>is most definitely not a copy constructor. According to the Standard <a href="#6">[6]</a>:</p>
<BLOCKQUOTE>
<p>A non-template constructor for a class <B>X</B> is a <I>copy</I> constructor if its first parameter is of type <B>X&amp;</B>, <B>const X&amp;</B>, <B>volatile X&amp;</B> or <B>const volatile X&amp;</B>, and either there are no other parameters or else all other parameters have default arguments.</p>
</BLOCKQUOTE>
<p>In short, a class&#146;s copy constructor is callable with a single argument convertible to the class&#146;s (possibly qualified) type. The constructor may have multiple parameters, so long as the extra parameters have default arguments.</p>
<p>Your constructor qualifies on the first point (the first parameter is of the correct type), but fails on the second (subsequent parameters don&#146;t have default arguments).</p>
<p>Were you to write your constructor as</p>

<pre>
B(B const &amp;, bool = false)
</pre>

<p>then the statement</p>

<pre>
B b2(b1);
</pre>

<p>would call through that constructor, and the run-time results would be</p>

<pre>
B
B
</pre>

<p>As written, <B>B</B> does actually have a copy constructor: the one provided implicitly by the language rules. What you interpret as a call to the base-class copy constructor is really a call to this derived-class copy constructor.</p>
<p>Because you did not define that copy constructor, the compiler generates a definition for you. (This is the &#147;favor&#148; I mentioned earlier.) That definition simply calls the <B>A</B> copy constructor, which in turn sets <B>value</B> to &#145;A&#146; and leads to the behavior you see.</p>
<p>If you don&#146;t want your <B>B</B> constructor to have a default argument, you&#146;ll have to call it with two arguments:</p>

<pre>
B b2(b1, false);
</pre>

<p>In that case, you&#146;ll want to ferret out places you&#146;re inadvertently using the generated <B>B</B> copy constructor. To do that, simply declare your own copy constructor as private in <B>B</B>, but don&#146;t implement it. All the calls through that copy constructor (outside <B>B</B> members) will be flagged by the compiler; you can then change them to reference your two-argument constructor instead.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  <B>http://msdn.microsoft.com/net</B>.</p>
<p><a name="2"></a>[2]  Subclause 14.5.5.1/4.</p>
<p><a name="3"></a>[3]  Explicit specialization of function templates is covered in Subclause 14.7.3.</p>
<p><a name="4"></a>[4]  Adding to the trauma: the semantics of specializations and instantiations are intertwined, and the Standard is somewhat opaque about their distinction.</p>
<p><a name="5"></a>[5]  Subclause 3.8/3.</p>
<p><a name="6"></a>[6]  Subclause 12.8/2.</p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/may01/schmidt.zip"></a></h4>


</blockquote></body></html>
