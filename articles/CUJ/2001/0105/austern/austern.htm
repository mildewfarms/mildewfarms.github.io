<HTML>   
     <HEAD>
<TITLE>May 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Bitsets and Bit Vectors</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>In C++ you can twiddle bits to your heart&#146;s content, and not even go near a macro.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Anyone who has been programming for any length of time is familiar with Boolean option flags: treating a group of options as a single unit by packing them into one word, using a single bit for each choice. So, for example, to set the permissions on a Unix file, you might write something like the following:</p>

<pre>
chmod("my_file",
       S_IWUSR | S_IRUSR |
       S_IRGRP | S_IROTH);
</pre>

<p>Each of those constants corresponds to a single bit; by combining them with the bitwise-or operator, you can specify many options at once.</p>
<p>Packing multiple option bits into a single word is extremely common. This technique is used in many places in the Unix and Win32 APIs, in the <B>ios_base</B> format flags in the C++ Standard library, and some form of it tends to show up in most large programs. Collections of bits are important.</p>
<p>It&#146;s not hard to see why this technique is common: the alternative, an array or a struct with a different field for each option, would be clumsier and would be wasteful of memory. However, there are also times when this technique can be a nuisance. First, some operations can be awkward: setting a named bit is straightforward enough (<B>flags |= S_IRGRP</B>), but clearing a bit (<B>flags &amp;= ~S_IWGRP</B>) is somewhat uglier. You can test whether a bit is set by using it as a mask, as in <B>if (flags &amp; S_IWUSR)</B>, but woe to you if you make the mistake of &#147;clarifying&#148; the test by writing it as <B>if ((flags &amp; S_IWUSR) == true)</B>, or, still worse, <B>if (flags &amp; S_IWUSR == true)</B>. Referring to a numbered bit, as opposed to a named one, is also awkward: you wind up with expressions like <B>flags &amp;= ~(1 &lt;&lt; n)</B>, usually sprinkled with casts. Finally, this technique is hard to scale to cases where you have many options: once the number of flags exceeds the number of bits in a <B>long</B>, you need to do something else.</p>
<p>Because collections of bits are important, the C++ Standard library provides explicit support for them &#151; in fact, several kinds of support. Sometimes you&#146;ll still want to use low-level bit manipulation operations (and sometimes you&#146;ll have to, if you&#146;re interfacing with a C API), but in most cases the C++ library&#146;s versions are better. They have a few minor quirks, but most of them are easily worked around.</p>

<H3><FONT COLOR="#000080">bitset</FONT></H3>

<p>The class <B>std::bitset</B> appears with &#147;associative containers&#148; in chapter 23 of the C++ Standard. That&#146;s not really the right place for it, since <B>bitset</B> has nothing to do with the associative containers like <B>set</B> and <B>map</B>; it doesn&#146;t satisfy even the most basic requirements for an STL container. It&#146;s better to think of <B>bitset</B> as an integer, each of whose bits you can access individually &#151; except it&#146;s an integer that isn&#146;t restricted to the size of a <B>long</B>. The size of a <B>bitset</B> is determined at compile time (the number of bits is a template parameter), but there is no upper limit: a <B>bitset&lt;32&gt;</B> is 32 bits long, and a <B>bitset&lt;1000&gt;</B> is 1000 bits.</p>
<p>All of the integer bitwise operations that you&#146;re already used to are still available with <B>bitset</B>, and, for the sake of convenience, a few more as well. So, for example, you can perform bitwise-xor by writing <B>b1 ^ b2</B> (at least if <B>b1</B> and <B>b2</B> are the same length). There are two different interfaces for manipulating individual bits: you can set the <B>n</B>th bit with <B>b.set(n)</B>, clear it with <B>b.reset(n)</B>, and test it with <B>if (b.test(n))</B>; or, almost equivalently, you can think of a <B>bitset</B> as an array and write these same operations as <B>b[n] = true</B>, <B>b[n] = false</B>, and <B>if (b[n])</B>. (&#147;Almost,&#148; because there is one small difference: the array version isn&#146;t range checked, but the <B>set/reset/test</B> version is. If the argument you pass to <B>set</B>, <B>reset</B>, or <B>test</B> is too large, you&#146;ll get an <B>out_of_range</B> exception.)</p>
<p>If your <B>bitset</B> is modestly sized, there&#146;s a very direct sense in which you can think of it as an integer: there&#146;s a constructor that creates a <B>bitset</B> from an <B>unsigned long</B>, and a member function, <B>to_ulong</B>, that extracts an <B>unsigned long</B> from a <B>bitset</B>. Of course, you can&#146;t directly use this constructor to initialize more bits than <B>unsigned long</B> supplies; similarly, you can&#146;t use <B>to_ulong</B> to extract more bits than will fit in an <B>unsigned long</B>. (If you try, and if any of the high-order bits beyond the range of <B>unsigned long</B> are set, then <B>to_ulong</B> will throw an exception.) If necessary, however, you can use shifting and masking to get around those restrictions:</p>

<pre>
const int N =
   sizeof(unsigned long) * CHAR_BIT;
unsigned long high = 0x7B62;
unsigned long low = 0x1430;
std::bitset&lt;2*N&gt; b
   = (std::bitset&lt;2*N&gt;(high) &lt;&lt; N) |
      std::bitset&lt;2*N&gt;(low);
...
const std::bitset&lt;2*N&gt;
   mask((unsigned long)(-1));
low = (b &amp; mask).to_ulong();
high = (b &gt;&gt; N).to_ulong();
</pre>

<p>The zeroth bit is defined to be the least significant bit, so, for example, if you write:</p>

<pre>
std::bitset&lt;4&gt; b(0xA);
</pre>

<p>the bits that are set are <B>b[1]</B> and <B>b[3]</B>.</p>
<p>It&#146;s easy enough to use <B>bitset</B> as a replacement for the traditional version of option flags: just declare <B>bitset</B> objects in the header file, instead of integer constants. We&#146;ve already mentioned two advantages of using <B>bitset</B>: you can have more flags than will fit into a <B>long</B>, and you get easier and safer methods of manipulating individual bits. Another is that <B>bitset</B> gives you a conversion mechanism to and from a textual representation.</p>
<p>First, <B>bitset</B> provides the usual I/O operators. This program,</p>

<pre>
#include &lt;bitset&gt;
#include &lt;iostream&gt;

int main() {
   std::bitset&lt;12&gt; b(3432);
   std::cout &lt;&lt; "3432 in binary is "
             &lt;&lt;  b &lt;&lt; std::endl;
}
</pre>

<p>gives the obvious result:</p>

<pre>
3432 in binary is 110101101000.
</pre>

<p>The input operator works the same way: it reads a string of ones and zeros, converting them to a <B>bitset</B>.</p>
<p>Second, you can convert <B>bitset</B>s to and from strings: there&#146;s a constructor that takes a string argument, and a <B>bitset&lt;&gt;::to_string</B> member function. Alas, while these conversions are useful, the details turn out to be extremely inconvenient. Both the string constructor and the <B>to_string</B> member function are member templates, because the library class <B>std::basic_string</B> is itself a template; the ordinary string class, <B>std::string</B>, is an alias for <B>basic_string&lt;char&gt;</B>.</p>
<p>The generality of these member templates interacts in unfortunate ways with some of C++&#146;s more obscure language rules. You have to write</p>

<pre>
std::bitset&lt;6&gt;(std::string("110101"));
</pre>

<p>as opposed to just</p>

<pre>
std::bitset&lt;6&gt;("110101");
</pre>

<p>The obvious version, where you just pass the string literal <B>"110101"</B>, will give you a compile-time error because the compiler won&#146;t know which version of the member template to instantiate. Similarly, if <B>b</B> is a <B>bitset</B>, you can&#146;t just write</p>

<pre>
std::string s = b.to_string();.
</pre>

<p>You have to use this truly horrible form instead:</p>

<pre>
std::string s
   = b.template to_string&lt;char,
         std::char_traits&lt;char&gt;,
         std::allocator&lt;char&gt; &gt;();
</pre>

<p>(Yes, that funny looking <B>template</B> keyword in there really is necessary.)</p>
<p>In practice, of course, you shouldn&#146;t pollute your code with things like that. Unless you really need to work with alternate character types, you can encapsulate these ghastly syntactic details in helper functions:</p>

<pre>
template &lt;std::size_t N&gt;
std::bitset&lt;N&gt;
from_string(const std::string&amp; s) {
   return std::bitset&lt;N&gt;(s);
}

template &lt;std::size_t N&gt;
std::string
to_string (const std::bitset&lt;N&gt;&amp; b) {
   return b.template to_string&lt;char,
           std::char_traits&lt;char&gt;,
           std::allocator&lt;char&gt; &gt;();
}

vector&lt;bool&gt;
</pre>

<p>A <B>bitset</B> does have one major limitation: it has a fixed length. You may have a <B>bitset</B> that&#146;s much larger than a <B>long</B>, but you still have to specify its size in advance. That&#146;s fine for something like a set of option flags, but it&#146;s less appropriate for other purposes. Suppose, for example, that you&#146;re processing a large collection of items in a complicated order, and you need to keep track of which ones you&#146;ve already seen. This still calls for an array of Boolean values, and it still makes sense to use a &#147;packed&#148; array that uses a single bit for each element, but <B>bitset</B> is no longer an appropriate choice. The number of items you&#146;re processing may not be known until run time, and items may even be added or removed.</p>
<p>The C++ Standard library&#146;s other mechanism for managing collections of bits is <B>vector&lt;bool&gt;</B>, a specialization of the <B>vector&lt;&gt;</B> template. In some ways <B>vector&lt;bool&gt;</B> is very much like <B>bitset</B>: it uses one bit for each element, and it lets you use array syntax (e.g., <B>v[3] = true</B>) to access individual bits. The difference is that while <B>bitset</B> has special mechanisms of its own, <B>vector&lt;bool&gt;</B> uses the ordinary STL interface. You can change the number of elements in a <B>vector&lt;bool&gt;</B> by using the <B>resize</B> member function, or add new elements by using <B>push_back</B>, just as you can with any other <B>vector&lt;T&gt;</B>.</p>
<p>Although <B>vector&lt;bool&gt;</B> has no special support for bitwise operations, you can still perform those operations using ordinary STL algorithms and function objects. Instead of writing <B>v3 = v1 &amp; v2</B>, for example, you could write:</p>

<pre>
std::vector&lt;bool&gt; v3(v1.size());
std::transform(v1.begin(), v1.end(),
   v2.begin(), v3.begin(),
   std::logical_and&lt;bool&gt;());
</pre>

<p>Similarly, to write a <B>vector&lt;bool&gt;</B> in the same format that <B>operator&lt;&lt;</B> uses when writing a <B>bitset</B>, you can again use an STL algorithm:</p>

<pre>
std::copy(v.rbegin(), v.rend(),
    std::ostream_iterator&lt;char&gt; (std::cout));
</pre>

<p>(This code relies on the fact that, by default, <B>bool</B> output uses <B>'1'</B> and <B>'0'</B> rather than &#147;true&#148; and &#147;false&#148;. Note also that we&#146;re using <B>rbegin</B> and <B>rend</B> so that we copy the <B>vector&lt;bool&gt;</B> in reverse order. That&#146;s how <B>bitset</B> output works: the leftmost digit in the printed representation of a <B>bitset</B> is <B>b[N-1], not b[0]</B>.) </p>
<p>You should always use <B>bitset</B> in preference to <B>vector&lt;bool&gt;</B> when possible: a fixed-size data structure is going to have better performance, both in space and in time, than a data structure that supports the general-purpose <B>vector</B> interface. (In one timing test that I performed, <B>bitset</B> was faster than <B>vector&lt;bool&gt;</B> by a factor of almost five.) You need to use <B>vector&lt;bool&gt;</B> if you&#146;re managing a collection of bits whose size can&#146;t be known in advance.</p>
<p>It may also seem that there&#146;s another time when you need to use <B>vector&lt;bool&gt;</B> instead of <B>bitset</B>: when it&#146;s important to interoperate with STL algorithms. STL algorithms use iterators, and, while <B>vector&lt;bool&gt;</B> provides iterators (we&#146;ve seen <B>v.begin()</B> and <B>v.end()</B>) in the examples above), <B>bitset</B> does not. You can access individual bits of a <B>bitset</B> with array syntax, but <B>bitset</B> does not have <B>begin</B> and <B>end</B> member functions.</p>
<p>However, you shouldn&#146;t let that lack stop you! While <B>bitset</B> doesn&#146;t have the STL container interface, it&#146;s still a perfectly good (fixed-size) container. If it makes sense for you to use a <B>bitset</B>, and if you also need iterators, then you can define a simple &#147;index iterator&#148; adaptor that translates iterator notation like <B>*i</B> into array notation like <B>b[n]</B>.</p>
<p>The implementation is straightforward: maintain an index and a pointer to a container. The details, most of which are boilerplate that we would need for any random access iterator, are shown in <a href="list1.htm">Listing 1</a>. We also define some nonmember helper functions, <B>begin</B> and <B>end</B>, which take <B>bitset</B> arguments. (The iterator we&#146;ve shown in <a href="list1.htm">Listing 1</a> isn&#146;t quite as general as it might be: if we were willing to accept a slightly more cumbersome interface, we could define a class that worked with arbitrary array-like types. A general purpose index iterator adaptor is often useful when dealing with pre-STL container classes, and sometimes even when dealing with STL containers like <B>vector</B>.)</p>
<p>Using <B>bitset_iterator</B>, <B>bitset</B> can now be made to interoperate with STL components: you can, for example, copy a <B>bitset</B> to a <B>vector&lt;bool&gt;</B> by writing:</p>

<pre>
std::bitset&lt;10&gt; b;
...
std::vector&lt;bool&gt;
   b(begin(b), end(b));
</pre>

<p>If you&#146;ve looked closely at <a href="list1.htm">Listing 1</a>, however, you may have noticed one problem with <B>bitset_iterator</B>: the name is a lie, because <B>bitset_iterator</B> isn&#146;t really an iterator! If <B>i</B> is an iterator, then <B>*i</B> is supposed to return a reference to the thing that <B>i</B> points to. That&#146;s not what <B>bitset_iterator</B> does: a const <B>bitset_iterator</B> returns <B>bool</B>, not <B>const bool&amp;</B>, and a modifiable <B>bitset_iterator</B> returns a proxy reference of type <B>bitset&lt;&gt;::reference</B>, not <B>bool&amp;</B>.</p>
<p>Since bits aren&#146;t individually addressable, this is the best we can do; in fact, <B>vector&lt;bool&gt;::iterator</B> behaves in exactly the same way &#151; which, again, means that <B>vector&lt;bool&gt;</B> isn&#146;t really an STL container. It&#146;s not quite right to say that <B>bitset_iterator</B> or <B>vector&lt;bool&gt;::iterator</B> is an iterator, but, in both cases, they&#146;re close enough to being iterators so that they can be used in many (not all!) places where iterators are expected.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>Arrays of Boolean values are common in large programs, and the C++ Standard library provides several ways to represent such arrays. I haven&#146;t exhausted all of the possibilities: you can use a <B>valarray&lt;bool&gt;</B>, for example; in some cases it might even be appropriate to represent a sparse bit vector as a <B>set&lt;size_t&gt;</B>.</p>
<p>Much of the time, however, the easiest solution is to use <B>std::bitset</B>. If you know at compile time how large your Boolean array is going to be, or if you can at least establish a reasonable upper bound, then <B>bitset</B> will be simpler and more efficient than a complicated dynamic data structure. There are a few annoying quirks in <B>bitset</B>&#146;s interface, but, with a few helper functions, they&#146;re easy to work around.</p>

<p><i><B>Matt Austern</B> is the author of <I>Generic Programming and the STL</I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>

<h4><a href="../../../source/2001/may01/austern.zip"></a></h4>
</blockquote></body></html>
