<HTML><HEAD>
<TITLE>May 2001/The Standard Librarian/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: bitset_iterator, an iterator adaptor class for std::bitset</A></h4>
<pre>
template &lt;bool flag, class IfTrue, class IfFalse&gt;
struct IF;

template &lt;class IfTrue, class IfFalse&gt; 
struct IF&lt;true, IfTrue, IfFalse&gt; { 
  typedef IfTrue val; 
};

template &lt;class IfTrue, class IfFalse&gt; 
struct IF&lt;false, IfTrue, IfFalse&gt; { 
  typedef IfFalse val; 
};

template &lt;std::size_t N, bool is_const&gt;
class bitset_iterator {
private: 
  typedef std::bitset&lt;N&gt; Bitset;
  typedef typename IF&lt;is_const, const Bitset, Bitset&gt;::val 
          qBitset;

  typedef std::random_access_iterator_tag 
          iterator_category;
  typedef bool value_type;
  typedef std::ptrdiff_t difference_type;
  typedef typename IF&lt;is_const, const bool, bool&gt;::val* 
          pointer;
  typedef typename IF&lt;is_const, 
                      bool,
                      typename bitset::reference&gt;::val
          reference;

  qBitset* B;
  std::size_t n;

public:
  bitset_iterator() : B(), n() { }
  bitset_iterator(qBitset&amp; b, std::size_t sz) 
    : B(&amp;b), n(sz) { }
  bitset_iterator(const bitset_iterator&lt;N, false&gt;&amp; x) 
    : B(x.B), n(x.n) { }

  bitset_iterator&amp; operator=(const bitset_iterator&amp; x) {
    B = x.B;
    n = x.n;
  }

public:
  reference operator*() const { return (*B)[n]; }
  reference operator[](std::ptrdiff_t x) const { 
    return (*B)[n + x];
  }

  bitset_iterator&amp; operator++() { ++n; return *this; }
  bitset_iterator operator++(int) {
    ++n;
    return bitset_iterator(*B, n-1);
  }
  bitset_iterator&amp; operator--() { --n; return *this; }
  bitset_iterator operator--(int) {
    --n;
    return bitset_iterator(*B, n+1);
  }

  bitset_iterator operator+(std::ptrdiff_t x) const {
    return bitset_iterator(*B, n + x);
  }
  bitset_iterator&amp; operator+=(std::ptrdiff_t x) {
    n += x;
    return *this;
  }
  bitset_iterator operator-(std::ptrdiff_t x) const {
    return bitset_iterator(*B, n - x);
  }
  bitset_iterator&amp; operator-=(std::ptrdiff_t x) {
    n -= x;
    return *this;
  }

public:
  friend bool operator==(bitset_iterator x, 
                         bitset_iterator y) {
    return x.B == y.B &amp;&amp; x.n == y.n;
  }
  friend bool operator!=(bitset_iterator x, 
                         bitset_iterator y) {
    return !(x == y);
  }

  friend bool operator&lt;(bitset_iterator x, 
                        bitset_iterator y) {
    return x.n &lt; y.n;
  }
  friend bool operator&gt;(bitset_iterator x, 
                        bitset_iterator y) {
    return y &lt; x;
  }
  friend bool operator&lt;=(bitset_iterator x, 
                         bitset_iterator y) {
    return !(y &lt; x);
  }
  friend bool operator&gt;=(bitset_iterator x, 
                         bitset_iterator y) {
    return !(x &lt; y);
  }

  friend std::ptrdiff_t operator-(bitset_iterator x, 
                                  bitset_iterator y) {
    return x.n - y.n;
  }
  friend bitset_iterator operator+(std::ptrdiff_t n1, 
                                   bitset_iterator x) {
    return bitset_iterator(*x.B, x.n + n1);
  }
};


template &lt;std::size_t N&gt;
bitset_iterator&lt;N, true&gt;
begin(const std::bitset&lt;N&gt;&amp; b) {
  return bitset_iterator&lt;N, true&gt;(b, 0);
}

template &lt;std::size_t N&gt;
bitset_iterator&lt;N, true&gt;
end(const std::bitset&lt;N&gt;&amp; b) {
  return bitset_iterator&lt;N, true&gt;(b, N);
}

template &lt;std::size_t N&gt;
bitset_iterator&lt;N, false&gt;
begin(std::bitset&lt;N&gt;&amp; b) {
  return bitset_iterator&lt;N, false&gt;(b, 0);
}

template &lt;std::size_t N&gt;
bitset_iterator&lt;N, false&gt;
end(std::bitset&lt;N&gt;&amp; b) {
  return bitset_iterator&lt;N, false&gt;(b, N);
}
&#151; End of Listing &#151;</pre></body></html>
