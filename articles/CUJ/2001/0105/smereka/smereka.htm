<HTML>   
     <HEAD>
<TITLE>May 2001/Two Classes for Simple Socket Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Two Classes for Simple Socket Programming</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Richard Smereka</FONT></H3>

<BLOCKQUOTE>
<p>Using these classes, getting your program hooked to the &#146;Net really can be as simple as plugging in a socket.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE> 

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Building client/server multi-platform applications requires a common method of communication between client and server across multiple platforms. Almost all non-embedded operating systems contain an implementation of the TCP/IP network protocol; and given the dominance of TCP/IP as the backbone of the Internet, most client/server environments use TCP/IP as the protocol of choice.</p>
<p>The TCP/IP socket is an IPC (Interprocess Communication) mechanism which resides on top of the network protocol. It provides programmers with a somewhat common API so that they do not have to deal with the actual TCP/IP protocol.</p>
<p>There are two basic types of sockets: a connection oriented socket (TCP) and a connectionless socket (UDP). Using a connection oriented socket is like talking to a friend. You have the attention of your friend and you also know that your message is being received. A connectionless oriented socket works like mailing a letter. The message has been sent but you have no idea if the message was received, and you also do not know when the message may be received.</p>
<p>This article discusses two C++ classes that encapsulate connection oriented TCP multi-platform communications. One class is used by a client application and the other is used by a server. Both of these C++ classes require an ANSI C++ compiler.</p>
<p>The client socket class is used to connect to a socket server, send a request consisting of a character string, receive a reply, and disconnect from the socket server. The socket server listens on a specific TCP port, reads the client request, performs some sort of processing to derive a reply, sends the reply to the client, disconnects from the TCP port, and resumes listening.</p>
<p>There are two major benefits of using these classes as opposed to calling the raw socket API functions: 1) the classes shield the complexity of socket communications from the programmer; and 2) these socket classes function in many different OS environments. I implemented this socket interface using classes instead of straight functions to allow an application to easily use multiple sockets at once and to reduce the number of function parameters.</p>
<p>I present the source code here for the Unix operating system. The full source available via on the <I>CUJ</I> website (<B>www.cuj.com/code</B>) includes conditional compilation directives for both Unix and Windows.</p>

<H3><FONT COLOR="#000080">The Client Class</FONT></H3>

<p>The client class is called <B>csocket</B>. The class header file is shown in <a href="list1.htm">Listing 1</a>. The class contains the socket data members <B>clientsock</B>, <B>sockClientAddr</B>, and <B>lpHostEnt</B>. The class also contains the data members <B>client_hostname</B> and <B>client_port</B> to keep track of the details of the current socket server. The additional data member <B>client_init</B> indicates whether the client socket has been properly initialized.</p>
<p>Before using the client class, you must know the host name of the socket server you wish to connect to as well as the TCP port number that the socket server is listening on. See the article, &quot;A Socket Location Server,&quot; in the September 2000 issue of <I>CUJ</I> for an example method of isolating the TCP/IP addressing details from the socket client.</p>
<p>The client socket class contains three constructors. The no-arg constructor can be used to create the socket. This constructor will not properly initialize the socket server details. The other two constructors take two parameters consisting of the host name and TCP port number of the socket server. The client class will not actually test the connection between the client and server during initialization even if the socket server details are given.</p>
<p>If the socket server details were not provided during the creation of the client socket class, the host name and TCP port number can be manually supplied using the class&#146;s <B>set_active</B> member function shown in <a href="list2.htm">Listing 2</a>. This function can also be used at any time to change which socket server the client class is talking to.</p>
<p>Once the class contains the socket server host name and port number information, you can use the class to connect to the socket server, send a request, and receive a reply, by using its <B>send_receive</B> function, also shown in <a href="list2.htm">Listing 2</a>. This function will automatically initiate a connection with the socket server, send your request, wait for a reply, and then close the socket.</p>
<p>The <B>get_active</B> member function shown in <a href="list2.htm">Listing 2</a> can be used to obtain the details of the currently defined socket server.</p>

<H3><FONT COLOR="#000080">The Server Class</FONT></H3>

<p>The server socket class is called <B>ssocket</B>. Its header file is shown in <a href="list3.htm">Listing 3</a>. The class implements a connection-oriented iterative server. The server waits while being read-blocked for a client connection and processes one request at a time.</p>
<p>The server class contains similar data members to the client socket class except that there are two socket definitions, one for the server and another for the connecting client.</p>
<p>Before using the socket server class, you must decide which TCP port number the server will listen to. The port number must be unique across all socket servers within the environment.</p>
<p>The server socket class operates in a manner very similar to the client socket class. There are two constructors in the server socket class: the no-arg constructor and a constructor that requires the TCP port number. The second constructor properly initializes the class by calling the <B>init</B> function shown in <a href="list4.htm">Listing 4</a>. If you create the server socket by using the no-arg constructor, you must properly initialize the class by calling its <B>init</B> member function. The status of the server socket initialization should be checked by using the <B>is_init</B> member function shown in <a href="list3.htm">Listing 3</a>.</p>
<p>Constructing a server using the server socket class consists of the following steps. Once the server socket has been properly initialized, your socket server application should enter a loop that consists of calling the member function <B>server_wait</B> shown in <a href="list4.htm">Listing 4</a>. This function listens to the TCP port for a client connection. The server application will block until a connection is detected. Once a client connection has been established, your server application should read the incoming request using the <B>recv_data</B> member function shown in <a href="list4.htm">Listing 4</a> followed by whatever processing is necessary to derive the reply. You then send the reply to the client by calling the <B>send_data</B> member function. When your server is through communicating with the client, it should close the socket to the client by calling the <B>close_client</B> member function.</p>
<p>Your socket server application should also have a provision for graceful termination upon receiving a specific request to do so from the client. When your server application receives such a request, it should call the <B>close_all</B> member function shown in <a href="list4.htm">Listing 4</a>. This function will close the client and server sockets.</p>

<H3><FONT COLOR="#000080">Construction Details</FONT></H3>

<p>When sending or receiving socket data, the TCP/IP protocol stack decides how much data will be sent or received at any one time. It is possible that the data will not be sent or arrive as a single unit.</p>
<p>Many application designers deal with this issue by using a terminal value as part of the data. For example, many Internet protocols use two carriage return/line feed sequences in a row to denote the end of the data stream.</p>
<p>These two C++ classes do not depend on a terminal value. Instead, the classes use a specific data size to determine whether more data is available. The data size is based on the <B>#define</B>d constant <B>IPC_SR_BUFSIZE</B>, which is part of the sockets header file <B>flsocket.h</B> (supplied with the online source code at <B>www.cuj.com</B>). Data is sent or received in chunks. Each chunk consists of one or more bytes but is no larger than the defined size. A chunk consisting of less than the defined size is used to indicate that there is no more data to send or receive.</p>
<p>When you use these classes instead of straight API function calls, you get reduced complexity but reduced flexibility as well. The raw socket API functions have many more features than I have included in these classes. The classes concentrate on delimiter-less string communication using a connection oriented environment. Any developer using these classes would gain simplicity but lose flexibility and especially low-level control over the socket.</p>
<p>Both classes make heavy use of the standard <B>std::string</B> class. Your C++ compiler must provide a proper implementation of the <B>string</B> class, including the member functions <B>c_str</B>, <B>substr</B>, and <B>length</B>.</p>

<H3><FONT COLOR="#000080">Example Applications</FONT></H3>

<p>A simple client socket application is shown in <a href="list5.htm">Listing 5</a>. It uses the client socket class. This application will connect to a specific socket server (host <B>node6</B> on TCP/IP port <B>10010</B> in the example), send a data string, receive the reply, and then terminate.</p>
<p>The example socket server application shown in <a href="list6.htm">Listing 6</a> uses the server socket class to start listening on TCP/IP port <B>10010</B>. The server will accept one connection at a time, display the data received, and reply with the same string each time. The server will self terminate when it receives a string containing the word <B>"end"</B>.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>These two classes create an easy way to perform socket communications. The programmer need not know anything about socket communications in order to use these classes.</p>
<p>The classes are written in ANSI C++ and are multi-platform (Unix and Windows).</p>
<p>All C++ code is licensed using the GPL (GNU General Program License), which allows anyone to acquire a copy of executable programs and source code free of charge. A full copy of the GPL license is included along with the C++ code available on the <I>CUJ</I> website.</p>

<H3><FONT COLOR="#000080">Further Reading</FONT></H3>
<p>For more information on Unix socket programming, refer to W. Richard Stevens, <I>Unix Network Programming Volume 1,</I> Second Edition (Prentice Hall, 1998).</p>
<p>For more information on WinSock programming, see Bob Quinn and Dave Shute, <I>Windows Sockets Network Programming</I> (Addison Wesley, 1996).</p>
<p>For further information on these two C++ classes, see the complete HTML documentation available via ftp or view the documentation online at the Future Lab website, <B>www.future-lab.com</B>. </p>

<p><i><B>Richard Smereka</B> helps run Future Lab Inc., providing system development and programming services specializing in human resource and payroll software and the Open Source movement. You can reach him at <B>rsmereka@future-lab.com</B>.</i></p>

<h4><a href="../../../source/2001/may01/smereka.zip"></a></h4>
</blockquote></body></html>
