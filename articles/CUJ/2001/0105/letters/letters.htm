<HTML>   
     <HEAD>
<TITLE>May 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<BLOCKQUOTE>

<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr><p>Dear Sir,</p>
<p>At first I quite enjoyed the article &#147;A C/C++ Comment Macro&#148; in the January 2001 issue; this macro appeared to solve a problem that I&#146;d been thinking about for some time. Upon further review however, it&#146;s clear that the proposed solution is highly nonstandard, and fails to work as advertised on any recent variant of GNU/g++, as well as the Sun WSPro C++ compiler on Solaris.</p>
<p>To recap the solution presented, the C preprocessor expands a set of two macros, which result in the generation of the C++ comment token (<B>//</B>) when using release mode, and results in an empty string when using debug mode. A quick check of the C++ Standard (ISO/IEC 14882:1998) shows clearly that this solution cannot work unless the compiler is a nonstandard implementation. Paragraph 2.1 (Phases of execution) mandates that comment removal occurs in phase 3 of the preprocessor, while macro expansion occurs in phase 4. For the solution presented to work as advertised, these phases must be done in reverse order.</p>
<p>To Mr. Timperley&#146;s credit, I was able to recreate his results using Microsoft Visual C++, version 6.0. This shows that the folks at Microsoft aren&#146;t too keen on following standards and helping insure portable code.</p>
<p>Are you perhaps considering changing the title of the magazine to &#147;Microsoft C/C++ User&#146;s Journal?&#148;</p>
<p>George F. Riley<br>
<B>riley@cc.gatech.edu</B></p>

<p><I>Well, there already was another magazine devoted to Nonstandard C++, but it folded about a month ago. We would rather not go there. Thanks for writing. &#151; mb</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>That was a wonderful article on the gdb debugger by Randy Zack in the February 2001 issue. Encore!</p>
<p>Steven Ellis</p>

<hr><p>Hi!</p>
<p>In your February 2001 edition, the article on emulating exceptions in C proposes a macro that writes the current filename and line number to a log, in order to track where the problem arose.</p>
<p>Great, but wouldn&#146;t it be far more efficient (in space) to simply write the program counter, and then use &#145;addr2line&#146; on the host system to work back? It&#146;s not quite so portable (there&#146;s no easy machine-independant way that I know of to get the program counter) and relies on having a matching image on your host system, but you would save <I>lots</I> of space.</p>
<p>For extra points you could crawl the stack frame to work out the backtrace and not bother writing the program counter at all.</p>
<p>Regards!</p>
<p>Luke Diamand</p>

<hr><p>Dear CUJ,</p>
<p>I quite enjoyed reading the article &#147;Debugging under GNU/Linux&#148; by Randy Zack in the February 2001 issue. However, it contains a few remarks that caught my attention as being entirely wrong. All these relate to debugging facilities available on Windows. (For some reason Linux developers make quite a habit of &#147;denouncing&#148; Windows whenever they write about anything.)</p>
<p>To correct the author:</p>
<p>1)  Windows NT has Dr. Watson logs which provide capability of postmortem examination similar to Unix core dumps.</p>
<p>2)  When debugging under VC you can call any &#147;reasonable&#148; function you like just like the author described for gdb. Simply write a function call in the watch window, hit &#147;Enter&#148; and it will execute. For details consult the excellent book <I>Debugging Applications</I> by John Robbins.</p>
<p>Thanks,</p>
<p>Eugene Gershnik<br>
Development Leader Computer Associates<br>
<B>eugene.gershnik@ca.com</B></p>

<hr><p>Dear Sir,</p>
<p>In response to Mr Weaver&#146;s letter of the February 2001 edition of <I>CUJ,</I> I feel an urge to point out the hypocrisy of his statements. Whilst I agree almost entirely with the content of the letter, and feel that computers may have played an exacerbatory part in the bastardisation of the English language, I feel the greater part has been played by those who purport to be speaking (or writing) proper English, whilst failing to use it correctly.</p>
<p>Perhaps the likes of Microsoft with its &#147;U.S. English&#148;, have played a larger part than I give credit for, but I feel they were simply following the American mindset, that had already changed the spellings of colour, and vapour, with or without the &#145;ize&#146;.</p>
<p>And now you have the gall to complain that the &#145;English&#146; language is being abused?</p>
<p>Sincerely, </p>
<p>Charlie Stott <br>
Gold Coast, Australia</p>

<p><I>I had briefly considered apologiz(s)ing on behalf of my American forebears for dropping those precious u&#146;s from vapor and color, but I am fresh out of five-syllable words. So I guess I will just wish you a nice day. &#151; mb</I></p>

<hr><p>Marc,</p>
<p>Two comments on your Drowning Big Brother editorial.</p>
<p>One, in Sydney, Australia there are two types of taxi cabs. Those with digital cameras and those with plexiglass shells in the interior of the automobile surrounding the driver. Both are designed for driver protection. The taxi drivers my wife and I spoke with stated they prefer the cameras if they can afford it.</p>
<p>Two, your suggestion that we &#147;drown the old boy in data&#148; has been around for some time now. I can&#146;t recall what version of GNU emacs first introduced the &#147;spook&#148; command.</p>
<p>The interactive help states:</p>

<BLOCKQUOTE>
<p>spook: an interactive autoloaded Lisp function. Adds that special touch of class to your outgoing mail.</p>
<p>Example output:</p>
<p>munitions Honduras SEAL Team 6 smuggle NSA BATF Clinton Peking AK-47 Noriega Cocaine $400 million in gold bullion DES Saddam Hussein [Hello to all my fans in domestic surveillance]</p>
</BLOCKQUOTE>

<p>We can safely assume this email is now safely stored in a taxpayer funded carnivore database on a stage 3 power grid.</p>
<p>Regards, </p>
<p>Michael R. MacFaden <br>
San Jose, CA</p>

<hr><p>Mr. Briand,</p>
<p>In your editorial noting the massive, intrusive and various collection of our personal data, near the end you say &#147;... fill out every survey that comes your way, and if you happen to screw up the facts, well hey, you know, life is short.&#148;</p>
<p>I&#146;ve had the same thought in a slightly different context.</p>
<p>In exactly the same vein as your editorial, let me suggest that it should be very hard to say which way you voted when confronted with an exit poll. I would hope that if enough voters adopted this idea (and shared it with all their friends and neighbors), it might be possible to get through an election without having to listen to various networks telling us who won.</p>
<p>Frank Griswold <br>
Corvallis, OR</p>

<p><I>Well, I can understand your being weary of election coverage in the media, but I kind of like exit polls. Seeing how close this last presidential election was, I think it is good to have some way to determine how people voted &#151; especially when Florida can&#146;t.</I></p>
<p><I>On another note, my editorial was admittedly tongue-in-cheek; in my heart of hearts all this surveillance and data gathering scares the hell out of me, and maybe it should scare the hell out of all of us. I don&#146;t really know if a grassroots misinformation campaign would be effective against Big Brother. At any rate, I advocate such a campaign only against organizations that don&#146;t deserve to know anything. Unfortunately, there are quite a few of those around.</I></p>
<p><I>Thanks for writing &#151; mb.</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>In response to the query about books on NMAKE and Makefiles in the letters column of the March 2001 issue: GNU Make, from the Free Software Foundation, and <I>Managing Projects with Make</I> from O&#146;Reilly Books are very useful. The latter has a couple of pages on NMAKE.</p>
<p>Tom Steger <br>
<B>tsteger@granite.com</B></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>In the March 2001 issue, Mr. Medina requested recommendations of books about Makefiles and NMAKE. An excellent reference is <I>Managing Projects with Make</I> by Andrew Oram and Steve Talbott, published by O&#146;Reilly &amp; Associates (ISBN 0-937175-90-0). This book really cleared things up for me!</p>
<p>Scott Killen</p>

<hr><p>Greetings,</p>
<p>I just read Mr. Medina&#146;s question in the March 2000 issue, and it reminded me very much of the situation when I started developing my own make files. The only good reference I was ever able to find, sadly, was Microsoft&#146;s <I>Environment and Tools</I> reference book that came with an out of date version of Microsoft Visual C++, perhaps as old as the 16-bit v1.52 release. I say &#147;sadly&#148; because the E &amp; T book devoted much space to reference and little to explanation.</p>
<p>At any rate, I became somewhat of an expert on makefiles at the company where I was working at the time (c. 1994) largely through trial and error and study of that one book. If Mr. Medina has any specific questions, he can always send me email. I keep meaning to write an article for a journal one of these days on the amazing things one can do with makefiles, but none of the journals I&#146;ve approached seem interested. Hope this helps!</p>
<p>John Williston<br>
Consulting<br>
<B>http://home.zyan.com/~wc</B><br>
<B>wc@zyan.com</B></p>

<p><I>Unless our database is in error, you have never approached us about writing such an article. We might actually be interested if you can keep it fairly non-platform-specific but concrete at the same time (which is tough, of course). Thanks for writing. &#151; mb</I></p>
<p><I>The following letter is in response to a &#147;Special Request&#148; that appeared in CUJ asking for essays on Hungarian Notation and related schemes.</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>I don&#146;t promote Hungarian Notation here, since the notation was primarily intended to annotate the type of a variable (e.g., <B>wCount</B>, <B>szName</B>, etc.).</p>
<p>My main objection stems from tying the type of a variable to its name. This implies that any modification to the type requires a corresponding modification to the name (e.g., <B>wCount</B> to <B>dwCount</B> when the type is changed from <B>WORD</B> to <B>DWORD</B>).</p>
<p>Whilst I don&#146;t promote Hungarian Notation, I am in favour of adorning the names used in programs with the role played by that name (e.g., a typedef, a class, a <B>#define</B>, an enum, etc.) and giving information about the location and scope of the name. I see this as subtly different from the intent of Hungarian Notation.</p>
<p>Consider the following:</p>

<pre>
speed = distance / time;
</pre>

<p>I cannot deduce much from these names. Whereas:</p>

<pre>
mSpeed = gDistance / XYZ_TIME;
</pre>

<p>will tell me that:</p>

<UL><LI>   <B>mSpeed</B> is a member variable of this class </LI>
<LI>   <B>gDistance</B> is a file-scoped variable in this implementation unit </LI>
<LI>   <B>XYZ_TIME</B> is a <B>#define</B> specified in the <B>xyz</B> component</LI></UL>
<p>Earl Chew</p>

<p><I>You know, of course, there are some folks who think any kind of decoration at all is evil. I wouldn&#146;t go that far. In fact, I just thought up another possible reason to decorate names: to distinguish between &#147;owning&#148; pointers (pointers held by functions or objects that are responsible for freeing the memory when they are done with it) and &#147;non-owning&#148; pointers. I&#146;ve been doing a lot of work with third-party graphics libraries lately, and these ownership issues are driving me nuts. Some of the libraries free the memory they allocate; some don&#146;t &#151; hmmm, this may be the beginnings of another special request ... anyway, thanks for writing. &#151; mb </I></p></blockquote></body></html>
