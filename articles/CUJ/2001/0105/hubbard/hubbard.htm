<HTML>   
     <HEAD>
<TITLE>May 2001/Building a Professional Software Toolkit</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Building a Professional Software Toolkit</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">John Hubbard</FONT></H3>

<BLOCKQUOTE>
<p>Professionals have a right to be picky about the tools they use. The author suggests a few criteria for what makes a good tool and contributes a couple of his own tools designed to fit the bill.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Every professional needs a toolkit, and software engineers are no different. An extensive, thoroughly tested toolkit can make the difference between delivering a working product on time, and failure to deliver anything at all. It makes sense, then, to evaluate the process of selecting candidate tools, while at the same time making an ongoing effort to collect tools. In this article I discuss my criteria for identifying good tools, and then provide two examples of items I believe meet those criteria: a C++ class generator program, and a command-line parser class.</p>

<H3><FONT COLOR="#000080">What Makes a Good Software Tool?</FONT></H3>

<p>In my experience, software tools, and especially C++ tools, should have the following properties:</p>

<UL><LI>   policy-free </LI>
<LI>   reliable </LI>
<LI>   freely available </LI>
<LI>   supplied in source code form</LI></UL>

<p>I will expand on these terms in a moment. Note that I am not saying that everything developers use has to fit those criteria; merely that in order for a piece of software to be considered a tool, or of tool quality, it must meet these criteria. The above list is partly for classification, and partly for guidance in searching for tools. If I am searching for a piece of software, my first choice is a tool-quality item. If a tool-quality item is not available, then I work my way down the list of what is available.</p>
<p>Policy-free tools are tools that do not force or even encourage developers to adopt certain programming policies, such as, for example, the policy of wrapping all C++ code in a namespace. Policy-free tools can be used in any project, regardless of the team&#146;s development methodology. Dogma tends to give indigestion to people who like to reason things through from first principles &#151; a characteristic shared by many of the top programmers I&#146;ve worked with.</p>
<p>Reliable tools allow the programmer to think about the task at hand, rather than troubleshooting his tools. A tool should only be considered reliable after a considerable amount of use in the field, by real programmers.</p>
<p>Freely available tools are more likely to become de facto software standards, which in turn adds to the attention and support and testing that they receive. Freely available tools can travel with the programmer, giving him assurance that his time spent learning the tool will be well-spent, even if he changes jobs. There is also the side benefit of not having to negotiate a budget for the tool &#151; this can be especially helpful, given the remarkable abundance these days of &#147;technical&#148; managers who are not technically qualified to change stations on the radio, much less decide whether a given tool is worth the money.</p>
<p>Tools supplied in source code form avoid a huge amount of problems. They guarantee that their behavior is open for inspection: no hidden trapdoors or hacks can exist for long, without the world finding out. Such tools may be ported to new platforms, by anyone. And of course, their internal classes and architectures may be studied and reused.</p>

<H3><FONT COLOR="#000080">The Dearth of Good Software Tools</FONT></H3>

<p>The best toolkit available for C++ is the Standard C++ library. In some shops, I&#146;ve seen remarkable gains simply from training the programmers about the goodies that are tucked away in the Standard library, but beyond that, things begin to get a bit fuzzy. Even in this age of Linux, GNU, copylefts and public domain software <a href="#1">[1]</a>, there is a serious shortage of no-strings-attached, high quality, reusable code. There are just not that many places to obtain high-quality items for your toolkit.</p>
<p>As a result, programmers everywhere find themselves creating the sorts of modules that really ought to be part of the professional software engineering mind share. This has been bothering me for some time, and so I&#146;ve been refining two items from my own toolkit over the past year, to the point where I think they now qualify as tools. These items are a code generator program, and a command-line parser class.</p>
<p>All of the source code provided here is portable and has been tested on Windows, Linux, and Solaris. The code relies only on the existence of a standards-compliant C++ compiler and library, or even a somewhat less-compliant compiler, such as MSVC++ 6.0 <a href="#2">[2]</a>.</p>

<H3><FONT COLOR="#000080">The Class Creator Program</FONT></H3>

<p>I refer to the C++ class generator compiled program as fcc, a.k.a. Fast Class Creator <a href="#3">[3]</a>. If used without modifications, fcc will generate C++ class files to your specifications. As for why such a thing is necessary: there is a world of difference between code that &#147;works,&#148; and code that is appropriate for use within a commercial project. For example, in an article such as this, I could write:</p>

<pre>
class SocketWrench
{
public:
    SocketWrench();
    virtual ~SocketWrench();
    // ...
};
</pre>

<p>but to produce something similar in a commercial project, a professional programmer might have to write 30-50 lines (counting comments and white space) in the header file alone. Production code requires comment headers; built-in testability hooks; class invariant test hooks; possible explicit declaration of support (or lack of it) for copying and assignment; support for automatic documentation generators, unit tests, and namespaces; and more. When run with default settings, fcc generates over 150 lines for a single class, distributed across five files. From the point of view of an experienced C++ coder, all of this is boilerplate; for a novice, it represents a certain amount of C++ lore, distilled, ready for immediate use, and shipped without any of the quirky personality disorders that are occasionally found in the cubicle of the local reigning guru.</p>
<p>In order to meet the policy-free criterion, I have parameterized almost every aspect of this simple code generator. The tool itself comprises only about a thousand lines of source code, but it supports (so far) 26 different configuration settings to control the generated code. Thus, the program can probably be used without modification at most sites. Furthermore, all of the settings have reasonable defaults, so the program should be easy to use right from the start.</p>
<p>One last feature: fcc includes the ability to create multiple classes per file. Some people really need this kind of flexibility, and others, I suspect, simply enjoy the ability to gratuitously differentiate themselves from the Java coders.</p>

<H3><FONT COLOR="#000080">Using fcc</FONT></H3>
<p>fcc is invoked from the command line; <a href="fig1.htm">Figure 1</a> shows a complete listing of the available options. <a href="list1.htm">Listings 1</a> through <a href="list3.htm">3</a> show some sample classes generated by fcc. There are a few key concepts to note in using fcc from the command line:</p>

<UL><LI>   Each command-line argument has a name. An argument is allowed to have a value, or to exist without an associated value.</LI>
<LI>   Two argument names are required: <B>-class</B> and <B>-author</B>. The <B>-namespace</B> argument was actually required in earlier versions of fcc. The <B>-namespace</B> feature causes the generated code to reside within a C++ namespace. To provide for a more general tool, I decided to make this feature optional. (Originally, the fcc program was designed to provide both a tool plus a policy; now, it provides a tool plus a mechanism &#151; the settings files &#151; for assisting with enforcing policy.)</LI>
<LI>   Arguments may be supplied in any order, but name-value pairs must be kept together.</LI>
<LI>   If the <B>-settings_file &lt;filename&gt;</B> argument pair is supplied, the program will attempt to open the supplied filename, and read additional arguments from that file. The format within the file is identical to that used on the command line, except that newlines are permitted within the file. (This helps legibility when using long lists of arguments.)</LI>
<LI>   To generate multiple classes per file, supply a space-delimited list of class names, like this: <B>-class "Apple Orange Pear"</B>. The program will use the name of the first class as the base for generating file names, unless you also specify a base filename, like this: <B>-base_filename Fruits</B>. I vacillated between two approaches for this interface. The other choice would have been to allow multiple command-line arguments, so that you could specify an unlimited number of <B>-class &lt;class_name&gt;</B> argument pairs. However, that would have required considerably more typing for the user, as well as making it more difficult to check for errors with other arguments that should not have multiple values (such as <B>-author</B>).</LI>
<LI>   Duplicate argument names will generate an error, as alluded to above.</LI>
<LI>   Generated code includes doc++ <a href="#4">[4]</a> comments, which are of the form <B>///</B> (for single-line comments), or <B>/** ... */</B> (for multi-line comments). This gives you a code generator and a documentation generator, all in one. It&#146;s rather impressive to be able to generate class files, and then execute a trivial unit test, and then browse the HTML documentation, all created from a few commands (one command to fcc, to build the files; another command to the make utility, to compile the program and the documentation).</LI></UL>

<H3><FONT COLOR="#000080">Subtleties of fcc</FONT></H3>

<p>The settings files allow a slightly higher level of abstraction when working with fcc, as I&#146;ve tried to demonstrate in <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>: note that the names of the settings files represent overall types of classes, such as interface and data classes. This approach allows you to have both precise control of the generated code, and access to a simpler interface to the code generator. In fact, although I&#146;m officially &#147;policy-free&#148; for this article, I&#146;d recommend that a Unix site (and Windows sites as well, if you can come up with a viable stand-in for Unix aliases) try out the following approach, which has worked well for me:</p>
<p>1)  Place programmer-specific settings in an alias, like this:</p>

<pre>
alias create_class = 'fcc -author "Sam Smith" -copyright "(C) 2000, etc."'
</pre>

<p>2)  Place concept-specific data in a number of appropriately-named settings files, such as the <B>interface_class.ini</B> and <B>data_class.ini</B> files that were used to generate <a href="list2.htm">Listings 2</a> and <a href="list3.htm">3</a>, respectively.</p>
<p>3)  Supply only the class name(s), namespace name, and other immediate needs on the command line.</p>
<p>Using this approach, you can write something like this:</p>

<pre>
create_class -class Hammer -namespace tools
   -settings_file interface.ini
</pre>

<p>and you get everything you want, without a lot of typing.</p>
<p>To explore this concept just a bit further, let me briefly discuss the contents of the <B>interface_class.ini</B> file, specified at the top of <a href="list3.htm">Listing 3</a>. A C++ interface class, by most definitions, is one whose methods are all pure virtual. The class is intended not for direct use, but only for use as a base class in an inheritance hierarchy. Now, the fcc program is set up to have reasonable defaults for general use, which means that it normally creates general-purpose sorts of classes. In order to generate an interface class, you must direct fcc as follows:</p>
<p>1)  Do not create a copy constructor or assignment operator. The class has no data members, so these would just be misleading code. Switches: <B>-no_copy_ctor</B>, <B>-no_op=</B>.</p>
<p>2)  Do not create class invariant test methods, nor built-in testing methods. Switches: <B>-no_dump_diagnostics</B>, <B>-no_check_valid</B>.</p>
<p>3)  Do not create a unit test or makefile. Again, these will not be used in a class that is never directly instantiated. Switches: <B>-no_unit_test</B>, <B>-no_makefile</B>.</p>
<p>4)  Do not use an &#147;<B>icc</B>&#148; file. This file, included from the class header file, is used to avoid cluttering the header file with implementation details when using template or inline methods. Neither template nor inline methods are used in an interface class, however, so this is just one more unnecessary file to avoid. Switch: <B>-no_icc</B>.</p>
<p>Rather than poking through the 26 command-line switches provided by fcc, it makes a lot of sense to figure this out once, and then capture that knowledge in an appropriately named file: <B>interface_class.ini</B>, for example.</p>

<H3><FONT COLOR="#000080">Internal Components: the CommandLine Class</FONT></H3>

<p>The command line parser is valuable not because it employs any special innovations in parsing a command line &#151; there isn&#146;t a whole lot of room for new ideas there; it is valuable because of its unusually concise interface, along with the fact that it allows you to instantly transition your program from C-style, to C++ style, right at the beginning.</p>
<p>By concise, I mean that the <B>CommandLine</B> class allows you to write code like this:</p>

<pre>
int main (int argc, char* argv[])
{
    try
    {
        tools::CommandLine commands(argc, argv);
        if (commands.Exists("author"))
        {
            std::string strAuthor =
                  commands.GetByName("author");
            // ...etc...
</pre>

<p>This is far more accessible and maintainable than the usual C-style parsing code found in most command-line programs.</p>
<p><a href="list4.htm">Listing 4</a> shows the implementation of each of <B>CommandLine</B>&#146;s constructors. This excerpt should show how settings files are used in combination with actual command-line arguments. You can specify a settings file, and/or you can simply list the arguments directly, on the command line. The <B>CommandLine</B> class collects all of the arguments in an internal map (actually, an <B>std::map&lt;std::string, std::string&gt;</B>), and makes them available via the <B>Exists</B> and <B>GetByName</B> methods.</p>
<p>One particularly effective approach to creating console programs with <B>CommandLine</B> is to derive from it. This enables you to interpret the commands and encapsulate your program&#146;s unique view of what the commands mean. In the Class Creator system, there is a class called <B>DigestedCommands</B> that does just that. The policy for deciding what sort of code to generate resides entirely within <B>DigestedCommands</B>; the mechanics to support parsing the user&#146;s input are completely invisible to everything except for the <B>CommandLine</B> class.</p>

<H3><FONT COLOR="#000080">Acknowledgement</FONT></H3>
<p>I would like to thank my company, ATD, for giving their consent to publish this work. The tools described here were created on their time, and were originally designed for use within their project teams.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>
<p><a name="1"></a>[1]  For more information on public domain software, copylefts, and the Free Software Foundation, see the GNU site at <B>www.gnu.org</B>.</p>
<p><a name="2"></a>[2]  For a list of known areas where MSVC++ does not conform to the current C++ Standard, check out the Microsoft Developers Network article Q243451, &#147;INFO: C++ Standard Noncompliance Issues with Visual C++ 6.0.&#148;</p>
<p><a name="3"></a>[3]  This follows directly from the fact that the original version of this program was written in Java, was called Class Creator, and no one ever considered using the word &#147;fast&#148; when referring to it.</p>
<p><a name="4"></a>[4]  doc++ is a freely available, high-quality documentation generator created by Malte Zockler and Roland Wunderling. doc++ relies upon the presence of special <B>///</B> and <B>/** ... */</B> comments to guide it. See <B>www.zib.de/Visual/software/doc++/index.html</B>.</p>

<p><i><B>John F. Hubbard</B> spent eight years as a nuclear submarine line officer, logging thousands of hours of submerged operation before finally succumbing to the lure of civilian computer technology. He currently works as a Senior Software Engineer for ATD Azad Technology Development Corporation, a software outsourcing company that specializes in real-time programming, embedded systems, and factory automation. Mr. Hubbard holds a BS in Electrical Engineering from Utah State University. He may be reached at <B>jhubbard@azadtech.com</B>.</i></p>

<h4><a href="../../../source/2001/may01/hubbard.zip"></a></h4>
</blockquote></body></html>
