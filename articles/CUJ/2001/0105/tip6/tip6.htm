<HTML>   
     <HEAD>
<TITLE>May 2001/C/C++ Tip #6</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   C/C++ Tip</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C/C++ Tip #6: Making Classes Non-Derivable</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Shanker Chandrabose</FONT></H3>

<HR>
<BLOCKQUOTE>
<p>Sometimes it is useful to create classes that are non-derivable. By explicitly doing so, you reduce the chance of class misuse as well as provide a more clear design intention. A traditional way to make a class non-derivable is to make the constructors of the class private, and provide static member functions such as <B>create</B>, to create the object on the heap and return its address. Unfortunately, making the constructors private also prevents you from instantiating the class in a normal way, as a local or static variable. There is a more elegant technique to make classes non-derivable. As illustration, consider an exception type thrown by a binary tree container with unique keys &#151; if a program attempts to insert an item with the same key, the container throws an exception of type <B>CTreeKeyError</B>. So here&#146;s the exception class:</p>

<pre>
//***KEYERROR.H***
#ifndef _KEYERROR_H_
#define _KEYERROR_H_ 

#include &lt;iostream&gt;
#include &lt;string&gt;

template &lt;class K, class T&gt;
class CTreeKeyError
{
public:
   CTreeKeyError(const K&amp; k, const T&amp; t)
   : m_Key(k), m_Data(t),
     m_strMsg("Key already exists in binary tree.") {}
   void print() const
   {
      std::cout
         &lt;&lt; "Data item could not be added to binary tree!"
         &lt;&lt; std::endl;
      std::cout &lt;&lt; "Reason: " &lt;&lt; m_strMsg &lt;&lt; std::endl;
      std::cout &lt;&lt; "Key: " &lt;&lt; m_Key &lt;&lt; std::endl;
      std::cout &lt;&lt; "Data: " &lt;&lt; m_Data &lt;&lt; std::endl;
   }

private:
   const K m_Key;
   const T m_Data;
   const std::string m_strMsg;
};

#endif
</pre>

<p>Every time an attempt is made to add a duplicate item to the tree, the container throws a <B>CTreeKeyError</B> object &#151; this object contains the nature of the error, the data, and the key for error reporting. As it is currently defined, <B>CTreeKeyError</B> can be derived from. But let&#146;s say that we would like CKeyTreeError to be a stand-alone class; we do not want to allow other classes to be derived from it. This restriction can be achieved by creating a helper class:</p>

<pre>
//***KEYERRORLOCK.H***
#ifndef _KEYERRORLOCK_H_
#define _KEYERRORLOCK_H_


// Usage: Make this a private virtual base class, and the 
// derived class can&#146;t be further derived from.
//
class PriVirFinal
{
protected:
   PriVirFinal() { }
};

#endif
</pre>

<p>To make <B>CTreeKeyError</B> non-derivable, simply declare <B>PriVirFinal</B> as a private virtual base class:</p>

<pre>
// ...
#include "keyerrorlock.h"

template &lt;class K, class T&gt;
class CTreeKeyError : private virtual PriVirFinal
{
  // same as before
  // ...
};
</pre>

<p><B>PriVirFinal</B> has a protected constructor, so it cannot be instantiated on its own. Since each most-derived class must initialize the virtual base, but only the immediately derived class can access the protected <B>PriVirFinal</B> constructor, no classes can be derived from <B>CtreeKeyError</B> &#151; a further-derived class cannot initialze the virtual base. This technique is therefore very handy for making classes non-derivable.</p>

</blockquote></body></html>
