<HTML>   
     <HEAD>
<TITLE>May 2001/wxWindows, an Intuitive Cross-Platform GUI Framework</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocmay.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">wxWindows, an Intuitive Cross-Platform GUI Framework</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Carlos Moreno</FONT></H3>

<BLOCKQUOTE>
<p>If it absolutely has to have a GUI, and it has to run on different platforms, you have to have a look at this freely available framework.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>A GUI (Graphical User Interface) is perhaps the most important feature in applications that require interaction with end users. Virtually all modern operating systems, including recent versions of Linux, provide users with a graphical environment that allows them to launch applications and manage resources. Users are accustomed to these standardized facilities, and expect no less from applications.</p>
<p>In this article I present an introductory tutorial on wxWindows, a free C++ based toolkit for the development of multi-platform GUI applications. The targeted platforms include Linux, MS Windows, MAC, and Sun. wxWindows also offers a class library for the development of non-GUI applications (console or embedded). In this article, however, I will concentrate on the use of wxWindows to develop GUI applications for Linux. You can find more about other benefits and facilities for other platforms at wxWindows&#146; web site (<B>www.wxwindows.org</B>).</p>

<H3><FONT COLOR="#000080">The Basics of Using wxWindows</FONT></H3>

<p>One of the main benefits of wxWindows is its ease of use. It provides an extremely intuitive approach to developing GUI applications, yet you can use it to develop very complex applications, with a full-featured user interface. In this section I provide an overview of how an application is constructed using wxWindows.</p>
<p>Among the most important classes in the wxWindows library are <B>wxApp</B>, <B>wxWindow</B>, and <B>wxFrame</B>. The <B>wxApp</B> class represents the application itself. In general, you derive from this class to create your custom application class. The customization is done by overriding certain methods &#151; notably the <B>OnInit</B> method. <B>OnInit</B> is executed when the application starts; you place any required initialization code in this function, including code to instantiate and display the application&#146;s main window.</p>
<p>Class <B>wxWindow</B> represents graphical components, such as regular windows, dialog boxes, controls, etc. Class <B>wxFrame</B> is derived from <B>wxWindow</B>, and it is normally used to represent the application&#146;s main frame (the main window that contains all the other windows). As with <B>wxApp</B>, programmers don&#146;t instantiate class <B>wxFrame</B> directly, but use it as the base class to create a customized frame class.</p>
<p>The following code fragment shows an example of defining an application class and main frame class. In the application class, the overriden <B>OnInit</B> method creates and shows an instance of the main frame:</p>

<pre>
class SampleApp : public wxApp
{
private:
   virtual bool OnInit();
};

class MainFrame : public wxFrame
{
public:
   MainFrame (const wxString &amp; title,
              const wxPoint &amp; position,
              const wxSize &amp; size)
      : wxFrame (NULL, -1, title, pos,
                 size)
   {}
};

MainFrame * frmMain;    
// could also be a private data
// member of class SampleApp

bool SampleApp::OnInit()
{
   frmMain = new 
     MainFrame ("Sample Application",

     wxPoint(20,20), wxSize(200,150));
   frmMain-&gt;Show (true);
   SetTopWindow (frmMain);

   return true;
}
</pre>

<p>In this example, the <B>MainFrame</B> class created is not particularly useful, since it didn&#146;t require or receive any customization. I chose to do it this way to illustrate the typical approach used with wxWindows. In practice, the main frame class always requires some customization.</p>
<p>The parameters to <B>wxFrame</B>&#146;s constructor are described as follows. The first parameter is a pointer to the parent, or the &#147;container&#148; window. Given that this is a top-level window, its parent is set to <B>NULL</B>. The second parameter is the ID, which is not required in this case. A value of <B>-1</B> indicates a &#147;default,&#148; or &#147;not used&#148; setting for this ID.</p>
<p>In the case of <B>wxFrame</B>, the parameter <B>title</B> corresponds to the frame&#146;s titlebar text. Notice the use of class <B>wxString</B>. This class is relatively similar to the Standard C++ library&#146;s <B>string</B> class, at least when used in simple situations. You can find out more about class <B>wxString</B> in the wxWindows documentation.</p>
<p>The other two parameters are <B>position</B> and <B>size</B>. These are conveniently specified using classes <B>wxPoint</B> and <B>wxSize</B>; <B>wxPoint</B>&#146;s constructor takes parameters <B>x</B> and <B>y</B> (in screen coordinates), and <B>wxSize</B>&#146;s constructor takes parameters <B>width</B> and <B>height</B>, in pixels.</p>
<p>Notice that the frame object is dynamically allocated. wxWindows requires you to use dynamic memory allocation for all of the windows (and as you will see, for most GUI objects of the wxWindows library).</p>
<p>By adding the appropriate include files and an entry point, I could turn this fragment into a minimally working application. The include directives should be as shown below:</p>

<pre>
#include &lt;wx/wxprec.h&gt;

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include &lt;wx/wx.h&gt;
#endif
</pre>

<p>Including only <B>&lt;wx/wx.h&gt;</B> would suffice under Linux, but it is strongly advised that you always use the above, since this provides increased portability, and takes advantage of specific features of compilers on other platforms.</p>
<p>The application&#146;s entry point is provided by the <B>IMPLEMENT_APP</B> macro. This macro requires only the application class&#146;s name, and it hides the definition of <B>main</B>, the instantiation of the application object, and all possible initializations required. In this example you would place, at file scope, the following line:</p>

<pre>
IMPLEMENT_APP (SampleApp)
</pre>

<p>This sample code shows an absolutely minimal application, in that the application does nothing useful &#151; it merely displays a window with &#147;Sample Application&#148; on its title bar. To make something more useful, you need to first understand the notion of events, which enable the application to respond to actions from the user.</p>

<H3><FONT COLOR="#000080">Event-driven Programming</FONT></H3>
<p>GUI applications have a funny way of working: they are usually doing nothing. (They call it idle to make us believe that they are actually working.) The functionality of GUI applications is based on the notion of events. Events are conditions usually external to the application (often associated with actions from the user, such as mouse clicks, keystrokes, etc.) that are reported to the application so that it does something in response.</p>
<p>Thus, instead of imposing a predefined sequence of actions on the user, GUI applications typically present a set of graphical input and output devices, and let the user choose the sequence of data entry and commands; the application simply waits for the appropriate commands, and responds to them.</p>
<p>As an example, try to picture how a login authorization process would work. The event-driven, GUI approach would be as follows: display a dialog box containing two text boxes with labels next to them, an OK button, and a Cancel button. The user can type the name first, or the password first, and they can come back one or several times to re-enter or edit whatever information they previously entered.</p>
<p>If you accept the idea that the keystrokes, text editing, etc. are handled internally by the text input devices (not too hard to accept), then you can see that the application just has to display the dialog box and enter an &#147;idle&#148; loop, waiting for the user to click on OK or Cancel. Only in these cases, the application should &#147;wake up&#148; and respond. In general, after responding to the user&#146;s action, the application returns to idle.</p>
<p>This example is not a formal or complete description of the event-driven programming paradigm, but I hope it gives you an idea of how the approach works, in case you were not familiar with it.</p>
<p>One of the key aspects of designing a GUI application is identifying what events the application should respond to, and writing the fragments of code that respond appropriately. These fragments of code are called event handlers.</p>
<p>In wxWindows, event handlers are implemented as methods of the window class related to the event. Events are associated with particular GUI elements in the application; for instance, in the previous example, it is not enough for the application to know that the user clicked the mouse; it has to know if the click was on the OK button, or if it was on the Cancel button. These are two different events, requiring two different responses. As the examples in the next sections will show, the application uses event tables to establish the links between the events and the corresponding event handlers. Event tables provide a practical and intuitive way to bind the various events to their corresponding event handlers.</p>

<H3><FONT COLOR="#000080">Building Up the GUI</FONT></H3>

<p>Although GUI applications can appear in a wide variety of formats, there are many common elements that appear in most applications. Among these common elements are menus and controls &#151; perhaps the most common elements to allow the application to interact with the end users, and dialog boxes, which provide a mechanism to organize the application&#146;s user interface. In this section I show how to add these common elements to wxWindows applications.</p>

<H4><FONT COLOR="#000080">Menus</FONT></H4>

<p>Providing menus in wxWindows applications is very straightforward. You typically create the menus in the constructor of the frame class, and write the event handlers for each menu selection.</p>
<p>In <a href="list1.htm">Listing 1</a>, <B>sample_wx.cpp</B>, the code within the frame constructor, <B>MainFrame::MainFrame</B>, creates a menu tree with a structure as shown in <a href="fig1.htm">Figure 1</a>.</p>
<p>The first four statements in the constructor instantiate the menu objects. You need one <B>wxMenuBar</B> object for the top-level menu, and one <B>wxMenu</B> object for each pop-up menu required. You populate <B>wxMenu</B> objects using <B>Append</B>. Each menu item is identified by a unique numeric constant, which allows you to attach the event handlers to each menu selection. You can also use the function <B>AppendSeparator</B> to place a separator line at the corresponding position.</p>
<p>The second parameter to <B>Append</B> is a string that specifies the caption for the corresponding menu item. An <B>&amp;</B> indicates that the character following is the accelerator key for that menu item, and a tab character indicates that what follows is a code for the shortcut key. You can use a third parameter to indicate that the added menu item has a sub-menu associated.</p>
<p>The code in the constructor shows only how to create the menus; you still need to write the event handlers and bind them to the various menu selections using an event table.</p>
<p>Creating an event table is a two-step procedure: declaring it (done in the frame class&#146;s definition), and defining it (done at file scope). To carry out the first step, you simply place the <B>DECLARE_EVENT_TABLE</B> macro in the frame&#146;s class definition, typically in the private section:</p>

<pre>
class MainFrame : public wxFrame
{
   // ...
private:
   DECLARE_EVENT_TABLE()
};
</pre>

<p>Then, at some point in the file, define the event table using the <B>BEGIN_EVENT_TABLE</B> and <B>END_EVENT_TABLE</B> macros. <B>BEGIN_EVENT_TABLE</B> receives two parameters: the name of the class for which it is being defined (in this case, <B>MainFrame</B>), and the name of the base class (in this case, <B>wxFrame</B>). The base class parameter is necessary, since some events associated with the frame may have an event handler in the base class. The event table could look like the following:</p>

<pre>
BEGIN_EVENT_TABLE (MainFrame, wxFrame)
   EVT_MENU (ID_message1, MainFrame::OnFileMessage1)
   EVT_MENU (ID_message2, MainFrame::OnFileMessage2)
   EVT_MENU (ID_exit,     MainFrame::OnFileExit)
   EVT_MENU (ID_about,    MainFrame::OnHelpAbout)
END_EVENT_TABLE ()
</pre>

<p>Each <B>EVT_MENU</B> entry binds a menu event to an event handler. The first argument to the macro specifies a menu object having a particular ID; the second argument specifies the event handler, which is a member function of the application&#146;s frame class (in this case, <B>MainFrame</B>).</p>
<p>Event handlers in wxWindows are methods that receive a reference to a <B>wxEvent</B> object as a parameter. Handlers for different types of events receive specialized parameters (i.e., objects of classes derived from <B>wxEvent</B>). In this example, the event handlers should have a signature similar to the following:</p>

<pre>
void OnFileMessage1 (wxCommandEvent &amp; event);
</pre>

<p>The parameter provides information relevant to the event. In this particular case, such information is not useful, so the handler ignores the parameter. (Therefore, you may omit the parameter name from the parameter list.) An example of when this parameter may be particularly useful is in the handling of certain mouse events. In that case the parameter provides information such as the coordinates of the mouse pointer, the state of the mouse buttons, and the state of the Alt, Ctl, and Shift keys at the time the event was produced.</p>
<p><a href="list1.htm">Listing 1</a> (<B>sample_wx.cpp</B>) shows the complete version of this minimal Example. (The full version in the online listings includes a note on how to install wxWindows and compile the application. See <B>www.cuj.com/code</B>.) I use <B>wxMessageBox</B> to display dialog boxes with simple messages as the response to the mouse events. Also notice the call to the <B>Close</B> method (inherited from <B>wxFrame</B>) in the <B>OnFileExit</B> event handler. This closes the main frame, terminating the application.</p>

<H3><FONT COLOR="#000080">Controls</FONT></H3>

<p>Controls are GUI elements that provide interaction between the user and the application. They may be used to get input from the user (as in the case of text boxes, push buttons, check boxes, etc.), or to display information (as in the case of static text boxes, static bitmaps, etc.).</p>
<p>Class <B>wxControl</B> represents the common functionality of controls, and is at the top of their class hierarchy. You can use <B>wxControl</B>-derived classes to represent specific types of controls, as required by your application.</p>
<p>In the following example I use classes <B>wxButton</B>, <B>wxStaticText</B>, and <B>wxTextCtrl</B> to implement a temperature conversion utility. The application shows a text box with a caption, and two buttons, one to convert from Celsius to Fahrenheit, and one from Fahrenheit to Celsius. The text box is represented by the <B>wxTextCtrl</B> class, the caption by the <B>wxStaticText</B> class, and the buttons by <B>wxButton</B>.</p>
<p>The constructors for the various types of controls are very similar for most regular controls. In particular, the first five parameters are the same for many of the frequently used controls. The first parameter is a pointer to the control&#146;s parent window (the window that &#147;owns&#148; or &#147;contains&#148; the control). The second parameter is the ID that uniquely identifies the control. This ID is useful if you need to handle events associated with that control. Even if you don&#146;t need to uniquely associate events with controls, it is in general a good idea to always provide a unique numeric ID for every control. The third parameter is the caption. For a <B>wxButton</B>, it specifies the caption displayed inside the button; for a <B>wxStaticText</B>, it is the text that the control displays; for a <B>wxTextCtrl</B> it indicates the initial contents of the text box, etc. The remaining two parameters are position and size.</p>
<p>You usually declare the controls as private data members of the window class that contains them, and instantiate them in the constructor. As with the frame and the menus, you must always allocate them dynamically.</p>
<p>The following fragment of code shows the modifications to the sample_wx program to create and display the controls:</p>

<pre>
class MainFrame : public wxFrame
{
public:
    MainFrame (const wxString &amp; title,
               const wxPoint &amp; position,
               const wxSize &amp; size);

private:
    wxStaticText *  label;
    wxTextCtrl *    input; // input
                           // from user
    wxStaticText *  output;// result
    wxButton *      FtoC;
    wxButton *      CtoF;

    DECLARE_EVENT_TABLE()
};

    MainFrame::MainFrame
       (const wxString &amp; title,
        const wxPoint &amp; position,
        const wxSize &amp; size)
       : wxFrame (NULL, -1, title,
                  position, size)
    {
       label =
          new wxStaticText (this, -1,
                 "Temperature:",
                 wxPoint(20,20),
                 wxDefaultSize);
        input = new wxTextCtrl (this, -1, "",
                                wxPoint(150,20),
                                wxSize(80,20));
        output = new wxStaticText (this, -1, "Result: ",
                                   wxPoint(20,50),  
                                   wxSize(150,20));
        FtoC = new wxButton (this, ID_FtoC, "F to C",
                             wxPoint(250,20), wxDefaultSize);
        CtoF = new wxButton (this, ID_FtoC, "C to F",
                             wxPoint(250,50), wxDefaultSize);
    }
</pre>

<p>The sizes and positions of the controls assume that the main frame is 350 by 90. I used <B>wxDefaultSize</B> to indicate that those controls should assume their default size, according to the contents (caption) specified.</p>
<p>You typically use the <B>this</B> pointer as the first parameter in the constructors, indicating that the <B>MainFrame</B> object is the parent window. The two buttons are the only controls attached to events, so they do have ID values that uniquely identify them.</p>
<p><a href="list2.htm">Listing 2</a> (<B>controls.cpp</B>) shows the complete code for this second sample application. It contains one important difference with respect to the sample shown above. In the sample above, I created the controls directly on the frame for the sake of simplicity. However, it is not a good idea to place controls in a <B>wxFrame</B>-derived object. Class <B>wxFrame</B> was not designed to act as a container for controls; for instance, it does not provide tab navigation through the controls. <a href="list2.htm">Listing 2</a> shows the recommended approach, which consists placing a container window (e.g., a <B>wxPanel</B>) inside your frame, and using it as the container for the controls.</p>
<p>In both event handlers, the information from the text box is read with <B>wxTextCtrl</B>&#146;s <B>GetValue</B> method, which returns a <B>wxString</B>. This <B>wxString</B> is converted to its numerical equivalent, and used to generate the output string, which is sent to the output <B>wxStaticText</B> using its <B>SetLabel</B> method.</p>
<p><B>wxString::c_str</B> converts the string to a C-style string that the Standard C <B>atof</B> function can take as a parameter. I could have also used <B>wxString::ToDouble</B>, which has the advantage that it notifies client code if the conversion was successful. (Check the online documentation for more details.)</p>
<p>If you want to clear the input text box after doing the conversion, you could use <B>wxTextCtrl</B>&#146;s <B>SetValue</B> method, which receives a <B>wxString</B> that specifies the new value for the contents of the text box:</p>

<pre>
input-&gt;SetValue ("");   // clear input
                        // box
</pre>

<H4><FONT COLOR="#000080">Custom Dialog Boxes</FONT></H4>

<p>Class <B>wxDialog</B> provides a convenient framework for creating and using custom dialog boxes. As with <B>wxFrame</B>, you should use <B>wxDialog</B> as the base class to create your own custom dialog classes. <B>wxDialog</B> provides the basic functionality of dialog boxes, including the <B>Show</B> and <B>ShowModal</B> methods, and automatic closing and returning of the appropriate button code when the user clicks on OK or Cancel, etc.</p>
<p>In the following example, I create a dialog box that asks the user for name and password. The first step is to create the class to represent this custom dialog box. This procedure is relatively similar to the procedure for creating custom frames. The class definition is shown in <a href="list3.htm">Listing 3</a>.</p>
<p>The public member functions allow client code to get the information entered by the user (name and password). I could have made the controls public, but this would break the encapsulation. I always prefer keeping the data members corresponding to the controls in the private section, and provide public methods to access the controls&#146; contents if required.</p>
<p>Instead of using event handlers attached to the OK and Cancel buttons, you can just use pre-defined ID values when creating them. These values (<B>wxID_OK</B> and <B>wxID_CANCEL</B>) identify them and give them the appropriate behavior, which includes closing the dialog when the user clicks on either button, and returning a code identifying the button to the client code.</p>
<p>The dialog can be used as follows:</p>

<pre>
MainFrame::OnLogin (wxCommandEvent &amp;)
{
   PasswordDlg pwdBox (this);

   if (pwdBox.ShowModal() == wxID_OK)
   {
      // use pwdBox.get_name() and pwdBox.get_password()
      // for whatever purposes as required
   }
}
</pre>

<p>Notice that here it is okay to declare a local dialog object, as opposed to dynamically allocating it. You may still choose dynamic allocation to be consistent with the use of other objects. The tricky detail is that if you allocate the dialog dynamically, then you must call its <B>Destroy</B> method when you&#146;re done, instead of using the C++ <B>delete</B> operator.</p>
<p><a href="list4.htm">Listing 4</a> (<B>pwd_box.cpp</B>) shows the implementation details of this custom dialog sample. The rest of the sample application can be downloaded from <I>CUJ</I>&#146;s web site (<B>www.cuj.com/code/</B>). This sample shows the approach recommended by wxWindows for organizing your code: split your projects into modules, with one pair of <B>.h/.cpp</B> files for the application class, and one pair for every dialog or frame class that you create.</p>
<p>I handle the keystroke events for both text boxes, to keep the OK button disabled as long as one of the two text boxes is empty. Both events require the same response (check the contents of both text boxes and enable the OK button accordingly); thus, I provide only one event handler, and attach both events to the same handler.</p>
<p>The password text box is given the appropriate behavior using the extra parameters in <B>wxTextCtrl</B>&#146;s constructor (in particular, the <B>style</B> parameter). Setting the style to <B>wxTE_PASSWORD</B> sets the control to show asterisks as the user types, while internally storing the actual text entered by the user.</p>
<p>There are other, more convenient techniques available for the positioning and sizing of the controls in custom dialog boxes (notably the use of sizers). I omit a detailed discussion here on the use of sizers. You can find more information in the documentation and samples available when you download and install wxWindows, or from the wxWindows website.</p>

<H4><FONT COLOR="#000080">Common Dialogs</FONT></H4>

<p>wxWindows provides a handful of ready-to-use custom dialogs for common data entry tasks, such as browsing for a filename or multiple filenames, fonts, printer, etc. The fragment of code below shows an example using the file selection dialog. You can check the samples shipped with wxWindows (also available from their web site) to find out more about this and the other common dialogs.</p>

<pre>
MainFrame::OnFileOpen (wxCommandEvent &amp;)
{
   wxFileDialog dialog (this, "Open file", "", "", "*.*");

   if (dialog.ShowModal() == wxID_OK)
   {
      // Use dialog.GetPath() as required

      // dialog.GetFilename() and dialog.GetDirectory()
      // may also be used.
   }
}
</pre>

<H3><FONT COLOR="#000080">Memory Management Issues</FONT></H3>

<p>As I already mentioned, you must always use dynamic memory allocation for objects that represent GUI elements (controls and windows). One detail that I didn&#146;t mention is that you don&#146;t have to explicitly use <B>delete</B> to deallocate them.</p>
<p>Dialogs and frames keep track of the controls they own. When you call <B>wxDialog::Destroy</B>, or <B>wxFrame::Close</B>, etc., these methods handle self-destruction. Upon destruction, these objects handle destruction of the controls they contain, and any other window objects that are owned by them. (They use <B>delete</B> internally, which is why you must always use <B>new</B> to allocate such controls and window objects.)</p>
<p>In some cases, such as with dialogs, it is okay to use allocation on the stack. My advice is that you check the samples to see how allocation is handled for specific classes that you&#146;re not familiar with.</p>

<H3><FONT COLOR="#000080">The Future of wxWindows</FONT></H3>
<p>I hope that this introduction triggers your interest in this convenient and powerful toolkit. A lot of effort is being done to improve and increase wxWindows&#146; capabilities. Among the features that are relevant to Linux developers are: support for CORBA; better support for graphics, including OpenGL; and HTML and XML support. The support for databases is also improving; more drivers are being embedded to provide support for a wider range of database engines and servers. Unicode support, and thus better internationalization support, is also on its way.</p>
<p>The creation of the newsgroup comp.soft-sys.wxwindows <a href="#1">[1]</a> provides new users with the possibility of discussing and getting support from the wxWindows community. This could compensate for the relative lack of documentation, which is arguably one of wxWindows&#146; main weak points. Of course, this relative lack of documentation is also compensated by the ease of learning and using wxWindows.</p>
<p>Commercial supplements also promise to put wxWindows on a solid standing for the future. These supplements will include technical support in the form of timely solutions or alternatives to development problems. (Commercial support is currently available for wxPython, a close cousin of wxWindows.)</p>
<p>Another currently available commercial supplement is wxDesigner <a href="#2">[2]</a>. It provides a graphical IDE that simplifies the design of portable, sizer-based custom dialogs.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>
<p>wxWindows&#146; robustness is definitely an important benefit, but its being so easy to learn and use is also one of the most important features of this toolkit. I would hope that after reading this article you are convinced. As additional support to my claim that wxWindows is easy to learn and use, I provide a case study. If you are interested, please see the <a href="sidebar.htm">sidebar</a>.</p>
<p>Cross-platform support is another extremely important feature of wxWindows. Even though the emphasis of this article was on using wxWindows to develop GUI applications on Linux, it is worth mentioning that all of the samples included in this article compile and run without any modification whatsoever under MS Windows, and surely on other platforms as well (I actually tested them only on a RedHat Linux 6.2, using g++ 2.95.2, and on Windows 2000, using Borland C++ 5.5.1).</p>
<p>I have presented an introductory discussion on the main features, but you can find out about the many additional features and tools from the online documentation <a href="#3">[3]</a> and samples. These are shipped with wxWindows and are made available when you install it. They are also available from wxWindows web site, following the links to the documentation and samples.</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>I would like to thank the authors of the wxWindows toolkit for kindly reviewing the article draft and making valuable suggestions.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  wxWindows newsgroup: comp.soft-sys.wxwindows.</p>
<p><a name="2"></a>[2]  wxDesigner. <B>http://www.roebling.de</B>.</p>
<p><a name="3"></a>[3]  wxWindows online documentation. <B>http://www.wxwindows.org</B>.</p>

<p><i><B>Carlos Moreno</B> has a Bachelor&#146;s Degree in Electronics Engineering and a Master Engineering diploma in Computer and Electrical Engineering. He has 12 years of experience in the development of low-level applications and currently works as an instructor/trainer in C, C++, Object-Oriented Programming, and Visual Basic, and as an independent consultant and software developer. His main interests are digital signal processing, audio and image processing applications, communications, data encryption and compression, and (of course) computer games development. He can be reached at <B>moreno@mochima.com</B> or on the Web at <B>http://www.mochima.com</B>.</i></p>

<h4><a href="../../../source/2001/may01/moreno.zip"></a></h4>
</blockquote></body></html>
