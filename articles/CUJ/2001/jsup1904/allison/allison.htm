<HTML>   
     <HEAD>
<TITLE>Java Solutions April 2001/import java.*</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocjapr.htm"></A><FONT COLOR="#FF0000">TOC Head</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">import java.*: Understanding Java Exceptions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Chuck Allison</FONT></H3>

<BLOCKQUOTE>
<p>Compared to C++, Java is fairly strict when it comes to exceptions. You may even have to &#147;prove&#148; to the compiler that you know how to handle them.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Although I&#146;ve mentioned exceptions in this column before, it&#146;s time to take a deeper look. You just can&#146;t be effective as a Java developer without understanding why exceptions are part of the language, and how to use them effectively.</p>

<H3><FONT COLOR="#000080">Out of Obscurity</FONT></H3>
<p>In traditional programming languages like C, you usually use return values from a function to indicate an error condition. This practice unfortunately requires you to generate and check return values through every function in a nested chain of function calls, filling your source code with clutter that obscures the logic of your algorithms. Using exceptions, on the other hand, lets you handle errors and still have clear, readable code. Suppose, for example, that in <B>main</B> I call a function <B>f</B>, which calls a function <B>g</B>, which finally calls a function <B>h</B>. Without exceptions (or some similar mechanism <a href="#1">[1]</a>), if something goes wrong in <B>h</B>, you have to pass a return code back to <B>g</B>, then back to <B>f</B>, and finally back to <B>main</B>. With exceptions, all you have to do is put the call to <B>f</B> in a <B>try</B> block and make provisions for handling the error immediately thereafter, in a <B>catch</B> block such as in the following code snippet.</p>

<pre>
// In main...
try
{
    f();
}
catch (MyException e)
{
    System.out.println(e);
}
</pre>

<p>All you have to do to raise an exception in <B>h</B> is to <I>throw</I> it, like this:</p>

<pre>
// In h...
throw new
  MyException("optional text here");
</pre>

<p>The functions <B>f</B> and <B>g</B> don&#146;t need to act as middlemen to propagate error-handling information up the call stack, as they would in C. That&#146;s what I mean by minimizing code clutter.</p>
<p>Source code clutter of course doesn&#146;t affect an end user, who couldn&#146;t care less whether you write pretty code or not. He who ultimately pays your salary wants software that works and that doesn&#146;t go ballistic should something unusual occur at run time. Here again, exceptions save the day because <I>exceptions don&#146;t like to be ignored</I>. Java is so fastidious about how you use exceptions, in fact, that you can&#146;t even <I>compile</I> a program successfully without proving that you know how to handle most of the exceptions that may raise their ugly heads when your program runs. But before we look at how to handle exceptions, let&#146;s talk about where they come from.</p>

<H3><FONT COLOR="#000080">Whence Exceptions?</FONT></H3>
<p>One source of exceptions, of course, is when a <B>throw</B> statement executes; either in your own code or in code you call from other classes. A method should throw an exception whenever it is unable to fulfill its specification, not as an alternate way of returning normally from a function. The method <B>Arrays.binarySearch</B>, for example, returns the zero-based index of the location where it finds the value you&#146;ve requested. If your search value is not in the array, it returns a very useful negative number (the opposite of where it should be plus one). It would be foolish to throw an exception in this case, because not finding a value in an array is normal behavior, and the return value is well defined. Exceptions are for the truly exceptional &#151; things that aren&#146;t normally supposed to happen.</p>
<p>As an example of when you should throw an exception, consider a stack data structure. The class in <a href="list1.htm">Listing 1</a> implements a fixed-size stack; you pass the stack&#146;s capacity in a constructor argument. The contract of the <B>pop</B> method requires that the stack not be empty when it is called, so if you try to pop something from an empty stack, that&#146;s exceptional. There is no meaningful value to return in this case, and you just plain shouldn&#146;t have made the call in the first place. Similar logic applies to the <B>top</B> and <B>push</B> methods.</p>
<p>The only objects that can be thrown or caught by Java&#146;s exception handling mechanism are instances of classes in the <B>Throwable</B> class hierarchy (see <a href="fig1.htm">Figure 1</a>). Most exceptions that application programmers create extend a class in the <B>Exception</B> sub-hierarchy (most often <B>Exception</B> itself), as <B>StackException</B> does in <a href="list2.htm">Listing 2</a>. By convention, all exception classes should have two constructors: a no-arg constructor and one that takes a single <B>String</B> argument, which allows you to include useful additional information at the throw point.</p>
<p>Classes that extend <B>Exception</B> are known as <I>checked exceptions</I> because the compiler checks to see whether two things occur in a program using these classes:</p>

<OL><LI>Every method that throws a checked exception must advertise it in the <B>throws</B> clause in its method definition, and</LI>
<LI>Every method that calls a method that advertises a checked exception must either handle that exception (with <B>try</B> and <B>catch</B>) or must in turn advertise that exception in its own <B>throws</B> clause.</LI></OL>

<p>Because <B>StackException</B> is a checked exception I must include it in the <B>throws</B> clause of <B>pop</B>, <B>top</B>, and <B>push</B>. Furthermore, I need to convince the compiler that I know about these exceptions when I call these methods, as I did in <a href="list3.htm">Listing 3</a>. In <B>StackTest.doTest</B>, each call to one of those three <B>FixedStack</B> methods is in a <B>try</B> block that can catch a <B>StackException</B> object. In the first <B>try</B> block, I force an exception by trying to add one too many objects to the stack. In the second <B>try</B> block, even though I&#146;ve rigged things so that no <B>StackException</B> can occur, I still need the <B>try</B> and <B>catch</B> to make the compiler happy &#151; because every checked exception must either be handled or passed up the line. I&#146;m so confident that nothing can go wrong here that I&#146;ll throw an <B>InternalError</B>, which aborts the program with an error message (more on this later).</p>

<H3><FONT COLOR="#000080">Unchecked Exceptions</FONT></H3>

<p>Just as checked exceptions are useful for signaling when your methods cannot fulfill their contract, there are other potential errors outside of your control, such as memory exhaustion, that can prevent the Java virtual machine from fulfilling <I>its</I> specification. Since you can&#146;t plan for such errors ahead of time, you would have to catch them everywhere, which defeats the principle of maintaining uncluttered code. Therefore, these errors are <I>unchecked exceptions</I>, meaning exceptions that you don&#146;t have to include in a <B>throws</B> clause. You are welcome to catch them (well, some of them), but the compiler won&#146;t make you do it.</p>
<p>Unchecked exceptions fall into two categories: those that extend <B>RuntimeException</B> <a href="#2">[2]</a>, and those that extend <B>Error</B>. I realize that I said earlier that classes inheriting from class <B>Exception</B> are checked exceptions, but that&#146;s only half true: the whole truth is that classes in the <B>Exception</B> hierarchy other than those in the <B>RuntimeException</B> sub-hierarchy are checked exceptions.</p>
<p>Exceptions that extend <B>RuntimeException</B> represent errors that you may want to handle, although you&#146;re not required to. The most common ones include:</p>

<UL><LI>   <B>ArithmeticException</B> &#151; when a divide by zero is attempted</LI>
<LI>   <B>ArrayStoreException</B> &#151; when you try to store an object in an array of incompatible type (usually occurs when using arrays of <B>Object</B>, since the compiler will catch any explicit type error)</LI>
<LI>   <B>IndexOutOfBoundsException </B>&#151; when an array index is out of range, for example</LI>
<LI>   <B>NegativeArraySizeException</B> &#151; obvious</LI>
<LI>   <B>NullPointerException</B> &#151; when you try to dereference a null object reference</LI></UL>

<p>As I stated above, <B>RuntimeException</B>s are not checked because making you advertise them would have no effect on establishing the correctness of your methods and would unnecessarily clutter your otherwise very readable code. Exceptions derived from the <B>Error</B> class, on the other hand, are unchecked because you never want to catch them! <B>Error</B> exceptions are severe errors that require shutting down the virtual machine. <B>InternalError</B>, which I used above, extends <B>VirtualMachineError</B>, which is an <B>Error</B> subclass. <B>OutOfMemoryError</B> is another obvious severe error, but there are others, like <B>StackOverflowError</B>, and various <B>LinkageError</B>s. A linkage error means something has gone amiss when the class loader tried to load a class for execution, and commonly occurs either because some external source has introduced malicious code in an attempt to circumvent Java&#146;s security mechanism, or the code came from an out-of-spec byte code generator.</p>

<H3><FONT COLOR="#000080">Exceptions and Inheritance</FONT></H3>

<p>When an exception occurs, the runtime mechanism searches back up the call stack for a <B>catch</B> block that matches the type of the exception. A &#147;match&#148; means any type for which the <B>instanceOf</B> operator applied to the exception returns <B>true</B>. In other words, <B>catch (C c)</B> will catch any exception that is of type <B>C</B> or a subclass of <B>C</B>. For this reason, if you want to catch all checked exceptions (not always an outlandish idea, really), you can simply catch an instance of <B>Exception</B>:</p>

<pre>
try
{
   ... whatever
}
catch (Exception e)
{
   // Catch all unchecked exceptions
   System.out.println(e);
}
</pre>

<p>When looking for a match, your <B>catch</B> blocks are inspected in the order in which they appear in the code, so be careful. If you try to place a handler for a superclass before a subclass handler; the compiler will &#147;catch&#148; your error, since the second block is unreachable.</p>
<p>Everyone knows that when you define application subclasses you need to be careful not break the contract of superclass methods by overriding them incorrectly in subclasses. Exceptions are part of a method&#146;s contract, so always remember this simple rule:</p>

<UL><LI>   Never add exception types to the <B>throws</B> clause of a method overridden in a subclass</LI></UL>

<p>This would break the contract of the superclass method and destroy any hope of substituting a subclass instance for a superclass instance (which, as the whole world knows by now, is the whole point of object-oriented programming). You can throw an instance of a <I>subclass</I> of the exception type however. For example, in the following, since <B>AnotherException</B> extends <B>MyException</B>, the contract is not violated.</p>

<pre>
class MyException extends Exception {}
class AnotherException extends MyException {}


class Parent {
   public void f() throws MyException {}
}

class Child extends Parent {
   public void
   f() throws AnotherException
   {}
}

class OverrideTest {
   public static void
   main(String[] args)
      throws AnotherException
   {
      Child c = new Child();
      c.f();
   }
}
</pre>

<p>You can also relax the specification by omitting an exception specification in the subclass method, as the following code illustrates.</p>

<pre>
class Parent
{
   public void
   f() throws Exception
   {}
}

class Child extends Parent
{
   public void f() // OK!
   {}
}

class Override
{
   public static void
   main(String[] args)
   {
      Child c = new Child();
      c.f();
   }
}
</pre>

<p>Since I didn&#146;t add anything to the specification of <B>Child.f</B>, an instance of <B>Child</B> can still stand in for a <B>Parent</B> instance, and substitutability is preserved. From client code&#146;s perspective, there is no harm putting a call to <B>Child.f</B> in a <B>try</B> block, even though an exception can&#146;t occur.</p>
<p>All of the foregoing applies to interfaces as well.</p>

<H3><FONT COLOR="#000080">Cleaning up after Yourself</FONT></H3>

<p>Managing resources, such as files and network connections, requires a bit of care when exceptions can occur. Consider the following program that opens a file and passes the resulting <B>FileReader</B> to another method for processing.</p>

<pre>
import java.io.*;
class ProcessFile
{
   public static void
   main(String[] args)
   {
      if (args.length &gt; 0)
      {
        FileReader f = null;
        try
        {
          // Open a file:
          f = new
            FileReader(args[0]);
          SomeOtherClass.process(f);
          f.close();
        }
        catch (IOException x)
        {
          System.out.println(x);
          if (f != null)
            f.close();
        }
      }
   }
}
</pre>

<p>If the <B>FileReader</B> constructor fails to open the file, then the <B>IOException</B> is caught, but <B>f</B> remains null, so no close attempt occurs. If the static method <B>SomeOtherClass.process</B> throws an <B>IOException</B>, then the exception is caught and <B>f</B> is closed in the exception handler. If no errors occur, then <B>f</B> is closed in the <B>try</B> block. There seems to be no way to avoid repeating the call to <B>FileReader.close</B> in the code, since we have to cover all possible paths. Since reallocating resources is something that must be done whether errors occur or not, there is a better way to do the job: the <B>finally</B> block. Code in a <B>finally</B> block executes no matter what. Using <B>finally</B>, only one call to <B>close</B> is needed:</p>

<pre>
import java.io.*;
class ProcessFile
{
   public static void
   main(String[] args)
   {
      if (args.length &gt; 0)
      {
        FileReader f = null;
        try
        {
          // Open a file:
          f = new FileReader(args[0]);
          SomeOtherClass.process(f);
        }
        catch (IOException x)
        {
          System.out.println(x);
        }
        finally
        {
          if (f != null)
            f.close();
        }
      }
   }
}
</pre>

<p>The only thing that can prevent a <B>finally</B> block from executing is a call to <B>System.exit</B>, which shuts down the virtual machine. The general syntax for using exceptions, then, is to have a <B>try</B> block followed by zero or more <B>catch</B> blocks followed an optional <B>finally</B> block, but a <B>try</B> block cannot stand alone &#151; it must have either at least one <B>catch</B> block, or a <B>finally</B> block, or both. The program in <a href="list4.htm">Listing 4</a> shows how tenacious <B>finally</B> is. When executed as-is, the output is</p>

<pre>
finally!
last statement
</pre>

<p>If you uncomment the line labeled with the numeral 1 in its comment, then a return from <B>f</B> occurs, but the <B>finally</B> block is still executed first, as evidenced by the output:</p>

<pre>
finally!
</pre>

<p>Now comment out line 1 again and uncomment line 2. There is no output this time since <B>System.exit</B> shuts downs the program entirely. With only line 3a uncommented, the exception thrown in the <B>try</B> block is caught in the adjacent <B>catch</B>, but it does nothing, so execution resumes after the <B>catch</B>, giving the same output as in the first instance:</p>

<pre>
finally!
last statement
</pre>

<p>Now for the hard question. What happens when both 3a and 3b are uncommented? You might think that the <B>finally</B> block executes, and then the exception thrown in the <B>catch</B> in <B>f</B> is caught by the <B>catch</B> in main. The compiler is smarter than that, though. It detects that the statement in <B>f</B> that prints <B>"last statement"</B> is unreachable and gives you a compile error. Gotcha!</p>
<p>The program in <a href="list5.htm">Listing 5</a> attempts to open a file for reading. Notice that the function <B>f</B> doesn&#146;t handle any exceptions (hence its <B>throws</B> clause). It wouldn&#146;t know what to do with an exception if it caught one. All <B>f</B> wants to do is make sure that the file is closed. By having a <B>finally</B> without a <B>try</B>, <B>f</B> can close the file and then let the exception pass up the stack to <B>main</B>. If you try to execute this program without a filename on the command line, the following is printed from main:</p>

<pre>
java.lang.ArrayIndexOutOfBoundsException: 0
</pre>

<p>since <B>args</B> is empty. If you give the name of a file that doesn&#146;t exist, then you get this message instead:</p>

<pre>
java.io.FileNotFoundException: &lt;file name&gt;
</pre>

<p>If the file does exist, then you get the expected output:</p>

<pre>
file opened
file closed
</pre>

<p>It is conceivable that a <B>catch</B> block can partially handle an exception and yet still want to pass it up the line to an enclosing <B>try</B> block. In this case, all you need to do is re-throw the exception at the end of the <B>catch</B> block (e.g., <B>throw x;</B>).</p>
<p>Note the comment near the end of <B>f</B> that&#146;s says &#147;<B>// beware lost exception!!!</B>&#148;. Since <B>FileReader.close</B> can also throw an exception, what do you think happens if it does? If it occurs in the midst of another exception, it becomes the current exception, so the previous exception is lost. Not much you can do about that.</p>

<H3><FONT COLOR="#000080">Exceptions and Threads</FONT></H3>

<p>If you&#146;ve been in an unusually astute mood while reading this article, you may have noticed that thus far I&#146;ve avoided a very important issue: what happens if an exception is not caught? The key to understanding the answer to that question is to pay particular attention to the execution path that the exception runtime mechanism takes. We say that it &#147;goes back up the call stack.&#148; The key is the word &#147;stack.&#148; Where does a stack reside (I don&#146;t mean physically; I mean conceptually, as far as the JVM is concerned)? When the JVM is launched, it starts a thread for <B>main</B> and things progress from there. If any other threads start, they get their own stack. In other words, a stack belongs to a thread, and therefore an exception belongs to a thread. If the exception mechanism finds no matching handler, it falls off the end of its stack, and therefore the thread for that stack must terminate. So the short answer to the original question is: &#147;Its thread dies.&#148;</p>
<p>That sounds pretty serious, and it is, but what can we do if it happens? The thread is lost forever, but all threads belong to a <I>thread group</I>. Thread groups are collections of threads and can contain other thread groups. When a thread dies because of an uncaught exception, the runtime system calls the <B>uncaughtException</B> method in the dying thread&#146;s thread group. The default behavior of <B>ThreadGroup.uncaughtException</B> is to call its parent thread group&#146;s <B>uncaughtExeption</B> method. If a thread group has no parent, then it calls <B>Throwable.printStackTrace</B> for the dying exception, so at least some information is printed to <B>System.err</B>. This is all illustrated in <a href="list6.htm">Listing 6</a>. <B>ThreadTest.main</B> launches an instance of <B>MyThread</B>, which prints a message and immediately throws an exception. There is no way that this exception can be caught in <B>main</B>, since it comes from a different thread, so the thread dies. Both the main thread and the instance of <B>MyThread</B> belong to the default thread group (since we didn&#146;t cause it be otherwise), which has no parent, so the stack trace prints, but all the while the main thread is still running. I had <B>main</B> sleep so it could print its final message after the <B>MyThread</B> instance dies. If you want, you can override <B>ThreadGroup.uncaughtException</B> to do whatever you want, but I&#146;ll leave that explanation for an article on threads.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<UL><LI>   Exceptions help separate error handling code from normal method logic, resulting in cleaner code.</LI>
<LI>   Exceptions will not be ignored.</LI>
<LI>   You should only throw an exception when a method can&#146;t fulfill its specification.</LI>
<LI>   All exception classes descend from <B>java.lang.Throwable</B>.</LI>
<LI>   You should only throw checked exceptions (i.e., descended from <B>java.lang.Exception</B>).</LI>
<LI>   Checked exceptions must either be handled or passed up the line by advertising them in a method&#146;s <B>throws</B> clause.</LI>
<LI>   The JVM will throw unchecked exceptions (i.e., descended from <B>java.lang.RuntimeException</B> or <B>java.lang.Error</B>) when it can&#146;t fulfill its specification.</LI>
<LI>   Don&#146;t catch objects descended from <B>java.lang.Error</B>.</LI>
<LI>   Don&#146;t break a superclass method&#146;s contract by adding to the <B>throws</B> clause in a subclass override.</LI>
<LI>   Use <B>finally</B> to manage resources.</LI>
<LI>   Beware of uncaught exceptions and be aware of <B>ThreadGroup.uncaughtException</B>.</p></UL>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  C offers the <B>setjmp</B>/<B>longjmp</B> mechanism, which allows you to jump from a deeply nested function to a point higher up in the execution stack without passing return codes up the stack manually. While this is fine for C, it is a big problem in object-oriented languages like C++ and Java because cleanup code that would execute under normal execution is skipped when you jump. Exceptions in both C++ and Java solve this problem. If, however, you just can&#146;t ignore your curiosity to learn about <B>setjmp</B> and <B>longjmp</B>, see my article &#147;Error Handling with C++ Exceptions, Part 1&#148; in the November 1997 issue of <I>CUJ</I>.</p>
<p><a name="2"></a>[2]  It is universally acknowledged that <B>RuntimeException</B> is a stupid name, since all exceptions are processed at run time. I haven&#146;t heard a better alternative, though. In any case, it&#146;s way too late now.</p>

<p><i><B>Chuck Allison</B> is a long-time columnist with </I>CUJ<I>. During the day he does Internet-related development in Java and C++ as a Software Engineering Senior in the Custom Development Department at Novell, Inc. in Provo, Utah. He was a contributing member of the C++ standards committee for most of the 1990&#146;s and authored the book </I>C &amp; C++ Codes Capsules: A Guide for Practitioners<I> (Prentice-Hall, 1998). He has taught mathematics and computer science at six western colleges and universities and at many corporations throughout the U.S. You can email Chuck at <B>cda@freshsources.com</B>.</i></p>

<h4><a href="../../../source/2001/japr01/allison.zip"></a></h4>

</blockquote></body></html>
