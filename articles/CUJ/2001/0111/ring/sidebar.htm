<html><HEAD>
<TITLE>November 2001/MAPM, A Portable Arbitrary Precision Math Library in C/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">Practical Use of Series Expansions</FONT></H3>

<HR>

<BLOCKQUOTE>

<p>The series expansion for the exponential, sine, and cosine functions are as follows:</p>

<pre>
exp(x) = 1 + x + x<SUP>2</SUP>/2! + x<SUP>3</SUP>/3! + x<SUP>4</SUP>/4! + ...

sin(x) = x - x<SUP>3</SUP>/3! + x<SUP>5</SUP>/5! - x<SUP>7</SUP>/7! + x<SUP>9</SUP>/9!

cos(x) = 1 - x<SUP>2</SUP>/2! + x<SUP>4</SUP>/4! - x<SUP>6</SUP>/6! + x<SUP>8</SUP>/8!
</pre>

<p>Now assume you want to calculate <B>exp(543.7)</B>. (If you are curious, the answer is <B>1.336317976830752149708709910114E+236</B>.) You could put 543.7 into the above formula and evaluate the series until the final term reached the precision you desire. However, this method will take numerous iterations to converge. Since <B>|x| &gt; 1</B>, the numerator will continue to grow larger, and the series won&#146;t converge until the factorial in the denominator can overtake the numerator. Even though this formula is numerically correct, it is not a practical method to calculate the exponential. What is needed is a translation of <B>x</B> so the magnitude of <B>x</B> is less than one. (Hopefully, <B>x</B> will be significantly smaller than one.) The smaller the magnitude of <B>x</B>, the faster the above series will converge to the desired precision. The translation of <B>x</B> is provided by David H. Bailey&#146;s MPFUN software package. This is a multiple precision math library written in Fortran. Dr. Bailey&#146;s algorithm uses a modification of the series expansion:</p>

<pre>
exp(t) = (1 + r + r<SUP>2</SUP>/2! + r<SUP>3</SUP>/3! + ...)<SUP>q</SUP>*2<SUP>n</SUP>
</pre>

<p>where <B>q = 256</B>, <B>r = t'/q</B>, <B>t' = t - n*Log(2)</B>, and where <B>n</B> is chosen so that <B>-0.5*Log(2) &lt; t' &lt;= 0.5*Log(2)</B>. Reducing <B>t mod Log(2)</B> and dividing by 256 insures that <B>-0.001 &lt; r &lt;= 0.001</B>, which accelerates convergence in the above series.</p>
<p>After the series expansion, you must raise the result to the 256th power. This may seem at first a daunting task, but remember that you can simply square the result the required number of times.</p>

<pre>
x<SUP>4</SUP> = (x<SUP>2</SUP>)<SUP>2</SUP>
x<SUP>8</SUP> = ((x<SUP>2</SUP>)<SUP>2</SUP>)<SUP>2</SUP>
x<SUP>16</SUP> = (((x<SUP>2</SUP>)<SUP>2</SUP>)<SUP>2</SUP>)<SUP>2</SUP>)
x<SUP>256</SUP> = ((((x<SUP>2</SUP>)<SUP>2</SUP> ... 8 times
</pre>

<p>Also note that this method requires the value of <B>log(2)</B>. The value of <B>log(2)</B> in the MAPM library is accurate to 128 decimal places. If you want an exponential calculation that is accurate to greater than 128 decimal places, the library will re-compute <B>log(2)</B> on the fly as necessary to be as precise as the exponential precision specified.</p>
<p>Now assume you want to calculate the <B>sin(10000.0)</B>, where <B>10000.0</B> is in radians. This is certainly a valid argument to the <B>sin</B> function, though passing 10,000 to the series expansion will be quite inefficient due to the magnitude of the numerator being greater than one, as was previously discussed for the exponential function. You need a translation of <B>x</B> such that <B>|x| &lt; 1</B>. In the MAPM library, two translations are performed first, and the series expansion is done in the third step. The first obvious translation is to limit the input angle to +/- pi radians. This is simply an <B>x MOD 2*pi</B> operation. Although this operation limits the input argument to +/- pi, pi is greater than one, so the series will still take too long to converge.</p>
<p>The second translation uses the multiple angle identity for <B>sin(5x)</B>. This identity is:</p>

<pre>
sin(5x) = 16*sin<SUP>5</SUP>(x) - 20*sin<SUP>3</SUP>(x) + 5*sin(x)
</pre>

<p>If you can calculate <B>sin(0.5)</B>, you could just use the above identity to compute <B>sin(2.5)</B>. If you desire <B>sin(3)</B>, calculate <B>sin(0.6)</B> and use the identity. By using this identity, the worst-case <B>x</B> input to the series expansion will be <B>pi/5</B> or 0.6283. This is less than one, so the series will converge significantly faster than before. However, you can do better. To calculate <B>sin(0.6283)</B>, you can use the multiple angle identity a <I>second</I> time to decrease the worst-case number to <B>0.6283/5</B> or 0.1257. You could (in theory) perform this operation numerous times, but you do reach the point of diminishing returns. The MAPM library uses this identity three times, so the worst-case input to the series expansion is <B>pi/(5*5*5)</B>, or 0.0251. This is small enough so that the sine series does converge quite rapidly to the desired precision.</p>
<p>I have not seen the multiple angle identity translation used in this context before, so I believe the MAPM library is the first arbitrary precision library to use this technique.</p>
<p>The cosine function also uses a multiple angle identity to minimize the value of the number passed to the series expansion. The following algorithm summarizes the process. It is essentially the same in concept to the algorithm used for computing <B>sin(x)</B>.</p>
<p>Step 1. Limit input argument to +/- pi.</p>
<p>Step 2. Use the multiple angle identity for <B>cos(4x)</B>:</p>

<pre>
cos(4x) = 8*[cos<SUP>4</SUP>(x) - cos<SUP>2</SUP>(x)] + 1
</pre>

<p>Use this identity recursively three or four times as needed; that is, multiply the input angle by <B>1/(4<SUP>3</SUP>)</B> or <B>1/(4<SUP>4</SUP>)</B> respectively. If <B>|x|</B> is less than one radian, recurse three times. If <B>|x| &gt;= 1</B> radian, recurse four times.</p>
<p>This step yields a worst-case <B>|x| = ~0.0156 (1/64 &gt; pi/256)</B>.</p>
<p>Step 3. Apply traditional series expansion.</p></blockquote></body></html>
