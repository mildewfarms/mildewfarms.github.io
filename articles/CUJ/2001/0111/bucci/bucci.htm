<HTML>   
     <HEAD>
<TITLE>November 2001/Optimization with Simulated Annealing</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   Engineering and Numerical Programming</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Optimization with Simulated Annealing</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Mark Bucci</FONT></H3>

<BLOCKQUOTE>
<p>When you care enough to find the very best, here's an effective way to find it.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>The need to find the best solution to a problem, when many solutions are possible, is a universal challenge that arises in a wide variety of applications. Integrated circuit design, resource planning, financial analysis, and scheduling are just a few of the applications where optimization algorithms are facing new challenges and creating new opportunities. Dramatic increases in processing power and memory now make it possible to solve complex optimization problems that were once considered overwhelmingly difficult. Linear programming and other mathematical programming techniques have given way to more heuristic approaches including genetic algorithms, tabu search <a href="#1">[1]</a>, and simulated annealing. In this article, I will point out the practical advantages of using simulated annealing. I will describe how simulated annealing works, and I will demonstrate how to implement a simulated annealing algorithm to solve the problem of assigning time-share units at a vacation resort. The code for solving this problem is presented with special emphasis on classes that can be reused in other simulated annealing applications.</p>
<p>While the name sounds complex, the theory behind simulated annealing is actually easier to understand than most optimization algorithms. The name comes from the process of annealing metals by slow cooling in stages. The analogy behind this is that the algorithm begins the search for the optimal solution by exploring many possible solutions. Slowly and in stages, it restricts the search paths to only the most promising solutions as the algorithm is said to be cooling down. This simple approach allows it to explore solutions that other algorithms might reject. Another advantage of the simulated annealing approach is that it does not require you to formulate the problem in a very specific way in order to fit the solution. It can therefore, handle a wide variety of problems with complex constraints.</p>
<p>In order to appreciate the way simulated annealing and other heuristic search methods work, it helps to understand a little about the earlier and more formal approaches to optimization. The typical mathematical expression for the general optimization problem looks something this:</p>

<pre>
Minimize cost(x1, x2,..xk)
</pre>

<p>subject to the following constraints:</p>

<pre>
g1(x1,x2,..xk) &lt;= 0
g2(x1,x2,..xk) &lt;= 0
 .
 .gm(x1,x2,..xk) = 0
gm+1(x1,x2,...xk) = 0
 .
 .
gn(x1,x2,..xk) &lt;= 0
</pre>

<p>The cost function can be just about anything you can calculate that depends on <B>x</B>, like the number of wires in a circuit or the expected rate of return on an investment. If it&#146;s a function that you&#146;d like to maximize, then you can simply put a minus sign in front of it. In the real world, the constraints can be equalities or inequalities involving continuous or discrete variables, and the constraint logic can be arbitrarily complex. But traditional mathematical programming methods require the problem to be expressed a certain way, and they are limited to only solving problems of a certain type and size. Traditional mathematical programming methods can be categorized as linear and nonlinear. Linear programming methods can be applied and are very effective when the cost function and all of the constraints are linear. Integer and discrete variables require a special variation of this approach known as integer programming. Nonlinear methods are based on the fact that the optimum point is found where the partial derivatives of the cost function are zero. The constraints can be made part of the cost function through special multipliers whose derivatives must also be evaluated and combined with the other variables resulting in a system of nonlinear equations that must be solved. These methods are most applicable when the cost function and the constraints are smooth and continuous, but even then, it is still very computationally intensive for large-scale problems.</p>
<p>Heuristic search techniques are less formal but often more effective than the traditional mathematical programming approaches for most practical problems. The basic idea is to generate a solution, evaluate it, and use that information to generate a possibly better solution. If you repeat this process in a loop, you can usually find an optimal or near-optimal solution in a reasonable amount of time. With simulated annealing and tabu search, you will need to write your own application-specific heuristic for generating the new solutions from the previous solution. I view this as strength rather than a weakness of these algorithms. By writing your own heuristic, you can take advantage of problem-specific knowledge to improve overall performance.</p>
<p>A potential problem with heuristic search is that it can become trapped in a local optimum. <a href="fig1.htm">Figure 1</a> illustrates this point. Without any information about solutions that are outside the first dip in the cost function, the algorithm is trapped. Simulated annealing was specifically designed to address this problem. The simulated annealing algorithm accomplishes this by incorporating a small amount of randomness into the logic. Introducing the right amount of randomness is the key to successfully implementing a simulated annealing algorithm.</p>

<H3><FONT COLOR="#000080">The SA Algorithm</FONT></H3>

<p>The simulated annealing algorithm keeps track of three solutions to the problem at all times. In the steps shown in <a href="list1.htm">Listing 1</a>, <B>best(x)</B> is the best solution found so far, <B>trial(x)</B> is the most recently generated trial solution, and <B>curr(x)</B> is the current solution. The SA algorithm generates trial solutions and evaluates them at each iteration. In the early stages of the search, the evaluation procedure is less discerning, and this allows the algorithm to actively explore many possible solutions. As the search progresses, the evaluation becomes more strict; only the best solutions are explored. This behavior is controlled by a parameter called the annealing temperature <B>t(i)</B>. The annealing temperature is initially set to a high value. As this temperature is decreased, the search becomes more focused.</p>
<p>The evaluation procedure outlined in <a href="list1.htm">Listing 1</a> compares cost of the trial solution to the best solution. If the trial solution is not as good as the best solution, it is not always completely discarded. Instead it is compared to <B>curr(x)</B> (the current solution). If it is better than the current solution, then it becomes the current solution, and a new trial solution is generated from it. However, even if it&#146;s worse, it is still sometimes retained; this is how the algorithm escapes a local optimum. The decision to keep or discard an unpromising solution is determined by the annealing function and a randomly generated number in steps 11 through 14 in <a href="list1.htm">Listing 1</a>.</p>
<p>There are actually several variations of the criteria to keep or discard, but the most common involves the annealing function:</p>

<pre>
anneal = exp((currCost-trialCost)/t(i))
</pre>

<p>where <B>t(i)</B> is the annealing temperature, which decreases with the iteration counter <B>i</B> as the search cools down. Note that whenever <B>trialCost</B> is less than the <B>currCost</B>, it doesn&#146;t matter what the annealing temperature is. The annealing function will be greater than one, so you don&#146;t really need steps 8 through 10; they are just shown to clarify what&#146;s going on.</p>
<p>The procedure for setting an initial value for the annealing temperature and adjusting it as the algorithm progresses is a matter of debate, and it often depends on the application. The rule of the thumb that I use is to set the initial temperature to 5 percent of the first generated trial solution cost in step 5. I then decrease temperature by 10 percent of its current value in a step-wise fashion 20 times during the algorithm. For example if <B>MaxIterations</B> is 1,000, then I reduce the temperature by 10 percent of its current value every 50 iterations. This is a good starting point, but you will probably want to fine-tune this for your own application. Also, you don&#146;t have to use a fixed number of iterations as the search-stopping criteria. You can use the annealing function or the <B>bestCost</B> value to decide when to stop. However, I think that using either a fixed number or a user-defined number of iterations is a good choice for many commercial applications, because it makes performance of the application more predictable.</p>

<H3><FONT COLOR="#000080">Example Problem</FONT></H3>

<p>Sales of time-share condo units are an increasingly important source of revenue for today&#146;s ski resorts. Most of these time-share contracts only allow the time-share owner to occupy a specific condo unit during a specific one-week period each year. However, some contracts are more flexible and allow the time-share owner to select a different week every year.</p>
<p>In this example, each condo building contains four identical condo units. Each condo owner owns 1 week during a 16-week ski season for a total of 64 owners per building. During any given week, 4 different owners and their family members occupy the building. Due to local fire and safety regulations, the maximum number of occupants (owners plus family members) in each building is 22.</p>
<p>The owners do not buy a fixed week. Rather they must request a specific week each year, and they may not get their first choice, because 5 of the 16 weeks are twice as popular as the others. They are each obliged to make first, second, and third choices several months in advance of their ski trip. When an owner doesn&#146;t get their first choice, the entire family is compensated with a number of free lift tickets. Two free lift tickets for each family member when you get a second choice. Four free lift tickets for a third choice. In order to best satisfy the owners and also to sell more tickets, the resort seeks to minimize the total number of free lift ticket giveaways.</p>
<p>It is possible for an owner to get none of his three choices, so a cost must be associated with this possibility. When this happens, the owner is given the choice to stay in a renter&#146;s building for that week or to accept the algorithm&#146;s assignment along with a cash incentive and seven days of free skiing. The cost associated with each possible outcome is embodied in the <B>CalcCost</B> function shown in <a href="list2.htm">Listing 2</a>. <B>CalcCost</B> arbitrarily assigns a very high cost of 1,000 lift tickets for making no assignment at all. This is a commonly used technique in optimization for enforcing constraints that can be difficult to satisfy. In the example data, some owners have up to eight family members making it difficult to combine large families into one building and still satisfy the 22-person-per-building capacity constraint. Using a penalty cost such as this allows the algorithm to move more freely through the solution space by not strictly enforcing the constraint at all times.</p>

<H3><FONT COLOR="#000080">Developing the Heuristic</FONT></H3>

<p>In order to come up with a heuristic for generating good solutions to this problem, I thought about how I would assign the owners if I were doing it with pencil and paper. Large families will obviously be harder to assign than small families because of the building capacity constraint and because of the larger number of free tickets. So I would assign the largest families first. After everyone is assigned, I would scan the list looking for the most dissatisfied families whose assignments could be swapped with other families to reduce the total cost of the lift tickets.</p>
<p>The main body of <B>TimeShareSolver.cpp</B> is show in <a href="list3.htm">Listing 3</a>. <B>Initialize</B> generates a very simple initial solution where all 64 owners are initially unassigned at a cost of 64,000 lift tickets. In the main loop, <B>AssignOwners</B> assigns the owners one at a time, selecting the largest families first. <B>SwapOwners</B> looks for high-cost assignments and tries to swap them. At that point, the new trial solution has been established. <B>EvaluateCost</B> determines if the new solution is better than the best solution so far or at least whether it should be saved as the current solution, using the annealing function. Logically, this completes one iteration, and you may or may not have a new current solution at this point. In any event, the algorithm will generate a new trial solution from our current solution on the next iteration. Generating this new solution begins with the <B>UnassignOwners</B> function, which unassigns 20 percent of the owners so that the process can start all over again. Tearing apart the current solution in order to generate a new trial solution is typical in simulated annealing and is often referred to as &#147;perturbing&#148; the solution.</p>

<H3><FONT COLOR="#000080">The Importance of Randomness</FONT></H3>

<p>Randomness in not only used in the evaluation of the annealing function. Almost every import logical decision in this algorithm has an element of randomness in it. Without randomness, the algorithm wouldn&#146;t make any progress beyond the first iteration. For example, if <B>AssignOwners</B> always chose the very largest unassigned family, and <B>SwapOwners</B> always chose the highest cost assignment, then the algorithm would continually generate the same solution over and over again at each iteration. This solution would almost certainly be sub-optimal. This is a characteristic of greedy algorithms. <B>SwapOwners</B> avoids being too greedy by not always choosing the highest cost assignment. Instead it always calculates the top three high-cost assignments, and then it selects one at random.</p>
<p>With simulated annealing algorithms, adding the right amount of randomness to the search nearly always increases their power. This seems counterintuitive to deterministic types of people like software developers. I&#146;ve been working with SA algorithms for a couple of years, and I am still (pleasantly) surprised whenever I observe this. It seems like I&#146;m getting something for nothing.</p>
<p>Incorporating this kind of randomness into the logic would be very cumbersome without the help of a couple of classes that are specifically designed for this purpose. <B>RandomMin</B> and <B>RandomMax</B> are two classes that I use to control the randomness of the search. The purpose of these two classes is to select one of the lowest or highest values in a series of index, value pairs. A code fragment from <B>SwapOwners</B> demonstrates how this class is used.</p>

<pre>
RandomMax hiCost;
hiCost.Initialize( 3);
for (i=0;i&lt;m_ownerCnt;i++)
{
   if (tryToSwap[i])
      hiCost.Compare(i, m_trialCost[i]);
}
i = hiCost.RandomSelectIndex();
</pre>

<p>The sample size is set to <B>3</B> using the <B>Initialize</B> function. This tells the <B>hiCost</B> object to keep track of the three highest costs. Index, value pairs are fed to the <B>hiCost</B> object using the <B>Compare</B> function. Finally an owner index is selected from among the three highest cost owner assignments.</p>
<p>Several important considerations are built in to <B>RandomMin</B> and <B>RandomMax</B>. Consider the following series of index, value pairs and suppose you want to select from among the three highest values.</p>

<pre>
0,  1.3000000000001
1,  1.5000000000000
2,  1.2999999999998
3,  1.7500000000000
4,  0.5000000000000
5,  1.0000000000000
6,  1.2999999999999
</pre>

<p>At first glance, the three highest values appear to be:</p>

<pre>
3,  1.7500000000000
1,  1.5000000000000
0,  1.3000000000001
</pre>

<p>Actually there is no significant difference between items <B>0</B>, <B>2</B>, and <B>6</B>. The difference amounts to round-off error. Items <B>2</B> and <B>6</B> must somehow be included with the other three values before you select one at random. <B>RandomMax</B> stores index, value pairs of same value items as a group. It expands the sample size only when the size of the lowest value group is greater than one, but weights each member of this group lower when making the final random selection. A partial listing of <B>RandomMin.cpp</B> showing the <B>Compare</B> function is given in <a href="list4.htm">Listing 4</a>.</p>
<p>Round-off error is an important consideration when each decision is based on a million or more previous calculations. In order to get repeatable results, it must be handled correctly. <B>RandomMin</B> and <B>RandomMax</B> do this automatically. Round-off error is not an issue in this example problem because all of the costs are integral. However, there is one repeatability issue that the time-share solver must deal with. The random number generator must be properly seeded before each run. This is done in the <B>CTimeShareSolver::Initialize</B> function.</p>
<p>Applying too much randomness can have a negative effect on the search. In general, the algorithm applies more randomness during the initial construction of the solution and less as it fine-tunes the solution. The time-share solver illustrates this concept. The construction of a new solution starts with the <B>Unassign</B> function. <B>Unassign</B> removes 15 percent of the owner assignments based on highest cost. But it also removes another 5 percent purely at random without regard to cost. The swapping code applies some randomness when selecting an owner to swap, but it does not apply any randomness when selecting the other owner to swap with. It always picks the other owner yielding the lowest cost swap. This implementation was arrived at by trial and error, turning randomness on and off in different areas and observing how well the algorithm converged for a few test cases. This is easy to do with <B>RandomMin</B> and <B>RandomMax</B>. You turn randomness off by setting the sample size to one with the <B>RandomMax::Initialize</B> routine. When the sample size is one, it will always choose the lowest or highest cost value respectively, except in the case of a tie, where it will select an item at random. But a random tiebreaker is often better than an arbitrary tiebreaker or no tiebreaker at all.</p>

<H3><FONT COLOR="#000080">Results</FONT></H3>

<p>A test database was created and populated with data for 64 owners, their vacation week choices, and family sizes. The family size varied from three to eight members. Fifty percent of the owners selected one of the five most popular weeks as their first choice. Twenty percent had these same weeks as their first and second choice. Six percent selected these popular weeks for all three choices.</p>
<p>The maximum number of iterations for the algorithm was set to 1,000. The algorithm determined its best solution, with a cost of 224 lift tickets at the 261st iteration. The run time for the full 1,000 iterations was 4 seconds on a 750MHz Pentium with 500MB of memory. I am fairly certain that this was the optimal solution for this set of data. When I set the maximum number of iterations to 1,000,000, it ran for over an hour, and it did not find a better solution. The convergence was not as fast for other data sets; in some cases it took the algorithm over 10,000 iterations (approximately 40 seconds) to find a solution that could not be improved. But in these cases, the algorithm always had a near optimal solution (within two or three percent of the optimal) within the first 1,000 iterations. The 22-person-per-building capacity constraint was satisfied in all cases.</p>
<p>Some characteristics of the solution are listed below:</p>

<UL><LI>   49 of the 64 owners got their first choice.</LI>
<LI>   12 of the 64 owners got their second choice.</LI>
<LI>   3 of the 64 owners got their third choice.</LI>
<LI>   All 64 owners got one of their three choices.</LI></UL>

<p>The progress of the algorithm during these 1,000 iterations can be seen from the following list of new best solutions that it found.</p>

<pre>
Iteration  Cost
  1        2308
  2        1321
  3        1283
  4         302
  7         292
 11         286
 24         236
 98         230
261         224
</pre>

<p>During the run, a total of nine improved solutions were found. A lot of progress is typically made in the first few iterations when it&#146;s trying to reduce the high penalty cost of unassigned owners. In the first iteration, two families were completely unassigned, but the algorithm was able to assign everyone by the fourth iteration. Gradual progress is made thereafter with the exception of one dramatic improvement at iteration 24.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>In this article, I have shared some of my experience in developing simulated annealing algorithms. I have presented the basic framework for the algorithm and given an example of how to develop a heuristic for generating new solutions. Carefully introducing randomness into the algorithm is very important. The <B>RandomMin</B> and <B>RandomMax</B> classes should make it easier to do this. I have also pointed out that it is sometimes useful to model difficult constraints as penalty costs rather than force the algorithm to always satisfy them. Remember that you will have to fine-tune the algorithm to get good results. You can use the annealing temperature schedule that I have suggested as a guideline, but you may need to modify it for your own application. A good reference for this is <a href="#2">[2]</a>.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  Tabu search, developed by Dr. Fred Glover at the University of Colorado,  is similar to simulated annealing, but it doesn't use any randomness to generate new solutions. It generates new solutions through a process of tightening and relaxing constraints. The word tabu refers to the tightening of constraints that forces the algorithm to temporarily stay out of "forbidden" or "taboo" areas of the search.</p>
<p><a name="2"></a>[2]  P. J. M. Laarhoven and E. H. L. Aarts. <I>Simulated Annealing: Theory and Applications</I> (D. Reidel Publishing, 1987).</p>

<p><i><B>Mark Bucci</B> is the president of Business Analytics Corp., a software consulting firm. His main interests are mathematical algorithms and performance issues, database design, and software project management. Mark has used applied mathematics in the development of a number of different commercial software applications involving linear programming, graphs and charting software for medical instruments, energy management, business forecasting, and most recently a workforce scheduling application that uses the simulated annealing algorithm. He can be reached at <B>markbucci@biz-analytics.com</B>.</i></p>

<h4><a href="../../../source/2001/nov01/bucci.zip"></a></h4>
</blockquote></body></html>
