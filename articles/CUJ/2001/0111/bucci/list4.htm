<HTML><HEAD>
<TITLE>November 2001/Optimization with Simulated Annealing/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: Partial listing of RandomMin.cpp</A></h4>
<pre>
void RandomMin::Compare( int index, double val)
{
   list &lt;ValueGroup&gt;::iterator vg = m_vgList.begin();
   if (vg == m_vgList.end())
   {
      //
      // Empty list. Add the new value.
      m_vgList.push_back( ValueGroup( index, val));
      m_sampleCnt++;
   }
   else if ((val - m_vgList.rbegin()-&gt;m_val) &gt; m_tol)
   {
      //
      // New value is worse than current worst value.
      if (m_sampleCnt &lt; m_sampleSize)
      {
         // But we need more samples.
         m_vgList.push_back( ValueGroup( index, val));
         m_sampleCnt++;
      }
   }
   else
   {
      if ((val - vg-&gt;m_val) &lt; -m_tol)
      {
         //
         // The new value is better than the best value.
         m_vgList.push_front( ValueGroup(index, val));
         m_sampleCnt++;
      }
      else
      {
         //
         //  Value is somewhere in between best and worst.
         int oldSampleCnt = m_sampleCnt;
         while (vg != m_vgList.end())
         {
            if (fabs(val - vg-&gt;m_val) &lt;= m_tol)
            {
               // essentially equal.
               vg-&gt;m_index.push_back(index); 
               m_sampleCnt++;
               break;
            }
            else if (val &lt; vg-&gt;m_val)
            {
               m_vgList.insert( vg, ValueGroup(index, val));
               m_sampleCnt++;
               break;
            }
            ++vg;
         } 
         assert(m_sampleCnt-oldSampleCnt == 1);
      }
      list &lt;ValueGroup&gt;::reverse_iterator rvg = m_vgList.rbegin();
      int worstValGroupCnt = rvg-&gt;m_index.size();
      if ((m_sampleCnt - worstValGroupCnt) == m_sampleSize)
      {
         m_vgList.pop_back();
         m_sampleCnt -= worstValGroupCnt;
      }
      rvg = m_vgList.rbegin();
      worstValGroupCnt = rvg-&gt;m_index.size();
      assert((m_sampleCnt - worstValGroupCnt) &lt; m_sampleSize);
   }
}
&#151; End of Listing &#151;</pre></body></html>
