<HTML>   
     <HEAD>
<TITLE>November 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Your Witness</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>You'll be glad you looked at these insights on name lookup. Just don't let Bobby catch you whining.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>One of the risks attached to this Q &amp; A column is reader audacity. The column&#146;s interactive nature seduces y&#146;all into believing I actually want you second-guessing my ivory-tower proclamations. Some of you even attempt to publicly invalidate my arguments and rebut my conclusions. Such heresy! Such cheek! Such opportunity for a column theme!</p>

<H3><FONT COLOR="#000080">Outs and Ins</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Ahem. I was reading the August issue, and I disagree. In the &#147;Ins and Outs, Part 2&#148; section, you appear to imply that the problem is related to templates. It&#146;s not. It&#146;s a general problem with scoping of non-templates. Consider this:</p>

<pre>
class Outer
    {
    class Inner;
    static Inner data;
    Inner &amp;GetInner(Inner);
    };

Outer::Inner Outer::data;

Outer::Inner &amp;Outer::GetInner(Inner)
    {
    return data;
    }
</pre>

<p>Just like in the example you wrote about, the return type must be qualified in the definition, whereas the function argument doesn&#146;t need to be &#151; same thing with the type of the static data member. Templates play no part in it whatsoever.</p>
<p>Salutaciones &#151; Juan Carlos Aruvalo Baeza</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> The specific problem reader Hahn encountered was related to templates. But I didn&#146;t mean to imply the general problem of name lookup and qualification is related to templates. Indeed, as I wrote in Footnote 7 of that same column:</p>

<BLOCKQUOTE>
<p>[The problem&#146;s existence] is true even for non-template types. For example, if <B>GetData</B> returned <B>inner</B> rather than <B>vct&lt;inner&gt;</B>, the lookup problem would be the same.</p>
</BLOCKQUOTE>

<p>So I really don&#146;t think we are in disagreement. However, as I also wrote in that footnote, I do believe the problem is exacerbated by templates.</p>
<p>Templates and non-templates have sometimes-subtle differences in name-lookup rules. As I suspect most of us are more familiar with the non-template rules, I see greater opportunity for naming error and misunderstanding lurking in templates.</p>
<p>Further, the problem touched on file organization and declaration ordering. That condition is often aggravated by header files and their inclusion order. Given that we tend to put entire template definitions in headers &#151; something we don&#146;t as often do for non-templates &#151; I again suspect more opportunity for naming mischief exists when templates are involved.</p>

<H3><FONT COLOR="#000080">Outs and Ins Again</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> In your August <I>CUJ</I> column, you cite me as remarking on how name lookup rules vary for templates and functions.</p>
<p>Though I&#146;ve been known to complain about name lookup rules with respect to templates (especially the rule that names in derived classes aren&#146;t looked up in base classes that are instantiated from templates), I think what you are referring to is my whining about the difference between the rules for template argument deduction and function overloading resolution.</p>
<p>That is, what annoys me is that this will compile:</p>

<pre>
set&lt;int&gt;::iterator si;
set&lt;int&gt;::const_iterator sci;

void f(set&lt;int&gt;::const_iterator,
        set&lt;int&gt;::const_iterator);

// fine, iterator is converted
// to const_iterator
f(si, sci);
</pre>

<p>but this won&#146;t:</p>

<pre>
// Error! iterator is NOT converted
// to const_iterator
std::distance(si, sci);
</pre>

<p>They&#146;re both function calls. But the rules governing what is happening are completely different. &#151; Scott Meyers</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> Oh, probably. You&#146;ve whined about so much for so long, I&#146;ve lost track!</p>
<p>Speaking of which...</p>

<H3><FONT COLOR="#000080">extern "C+-"</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> I don&#146;t think your discussion of the semantics of <B>extern "C"</B> holds water <a href="#1">[1]</a>. Let me explain why I care. This is from Item 34 of <I>More Effective C++</I> (Addison-Wesley, 1995):</p>
<BLOCKQUOTE>
<p>The best way to view <B>extern "C"</B> is not as an assertion that the associated function is written in C, but as a statement that the function should be called as if it were written in C. (Technically, <B>extern "C"</B> means the function has C linkage, but what that means is far from clear. One thing it always means, however, is that name mangling is suppressed.)</p>
<p>...</p>
<p>You can even declare C++ functions <B>extern "C"</B>. This can be useful if you&#146;re writing a library in C++ that you&#146;d like to provide to clients using other programming languages.</p>
</BLOCKQUOTE>

<p>As you can see, I have a vested interest in this issue.</p>
<p>Linkage is defined in C++ Standard Subclause 3.5, where it&#146;s clear that linkage is a property of a name. In particular, there is nothing said about it being a relationship between two entities (except for Subclause 3.5/11, which I&#146;ll get to in a minute).</p>
<p>Hence it makes no sense to say that <B>X</B> links to <B>Y</B> or <B>Y</B> links to <B>X</B>.</p>
<p>Rather, <B>X</B> may have linkage and <B>Y</B> may have linkage. Linkage matters only for name lookup; whether a name is found during linking depends in part on the linkage of that name.</p>
<p>Subclause 3.5/11 brings up the notion of linking &#147;to&#148; declarations for entities written in other languages. But what does this mean? Given the rest of Subclause 3.5, it can mean only one thing: when name lookups occur during linking, the names found may correspond to entities implemented by other languages. That is, Subclause 3.5/11 does nothing more than suggest that a C++ program may include entities implemented in languages other than C++.</p>
<p>Let us thus trot off to Subclause 7.5.</p>
<p>Subclause 7.5/2 introduces the notion of linkage &#147;between&#148; code fragments. Note that according to the usual rules of English, &#147;between&#148; is commutative: if <B>X</B> is between <B>a</B> and <B>b</B>, <B>X</B> is also between <B>b</B> and <B>a</B>. Hence, Subclause 7.5/2 could just as easily have been started this way: &#147;Linkage between non-C++ and C++ code fragments....&#148;</p>
<p>(As an aside, my favorite part of Subclause 7.5/2 is &#147;The semantics of a language linkage other than C++ or C are implementation-defined.&#148; Where does the Standard define the semantics of C++ and C linkage, especially given Subclause 7.5/9? On this matter, I stand by my statement in <I>More Effective C++</I> above.)</p>
<p>Of course, Subclause 7.5/3 is key. It requires support for &#147;linkage to functions written in the C programming language.&#148; But Subclause 3.5 makes clear that linkage affects only the ability to perform name lookup during linking. I thus read Subclause 7.5/3 this way:</p>

<BLOCKQUOTE>
<p>If you assign &#147;C&#148; linkage to an entity written in C++, that entity can be found (via name lookup) during linking to functions written in the C programming language.</p>
</BLOCKQUOTE>

<p>Thus, declaring a C++ function <B>extern "C"</B> is a way of making it callable from C, as far as the Standard is concerned. As you point out in your column (and I point out at the beginning of <I>More Effective C++</I> Item 34), there&#146;s a lot of stuff the Standard is <I>not</I> concerned with, but I think it&#146;s clear that <B>extern "C"</B> is intended to allow exactly the kind of thing that Phil Brooks and Jon Young said it was (provided the underlying C and C++ object models are compatible).</p>
<p>If I&#146;m correct about the above, feel free to admit it in your column and supplicate yourself. If I&#146;m not, well, run it anyway and dump on me the way you know I&#146;d dump on you if it were my column :-) &#151; Scott Meyers</p>

<H4><FONT COLOR="#000080">A</FONT></H4>

<p> When I originally wrote about this topic, I failed to clearly distinguish between what the C++ Standard guarantees and requires, and what I think the Standard intends. This time around, I hope to make that distinction clear. If you must, consider this mild supplication.</p>
<p>The C++ Standard requires that a C++ implementation allow entities to be declared <B>extern "C"</B>. But I can find no requirements or guarantees about what such declarations mean absolutely for a given C++ implementation, or how the entities behave relative to entities declared with &#147;C++&#148; linkage. The only specific references I can find are:</p>

<UL><LI>   A C++ implementation must support <B>extern "C"</B>, which &#147;provide[s] for linkage to functions written in the C programming language&#148; (Subclause 7.5/3). This tells me that, at a minimum, <B>extern "C"</B> is intended to import C code into a C++ context. However, it doesn&#146;t explain the intent of <B>extern "C"</B> on code written in C++.</LI>
<LI>   &#147;C&#148; linkage is ignored for names of class members and for the types of class member functions (Subclause 7.5/4).</LI>
<LI>   At most one function with a particular name can be declared <B>extern "C"</B> (Subclause 7.5/6). This restriction presumably stems from C&#146;s lack of function overloading.</LI>
<LI>   Two <B>extern "C"</B> declarations with the same unqualified name refer to the same entity, even if the declarations are in different namespaces (Subclause 7.5/6). This restriction presumably stems from C&#146;s lack of namespaces and name qualification.</LI>
<LI>   Implementations must support <B>extern "C"</B> and <B>extern "C++"</B>. They may support other linkage to other languages, but any such support is implementation-defined (Subclauses 7.5/2 and 7.5/3).</LI>
<LI>   Any name having two consecutive underscores (<B>__</B>) is reserved for the Standard C++ library&#146;s use as a name with both <B>extern "C"</B> and <B>extern "C++"</B> linkage (Subclause 17.4.3.1.3).</LI>
<LI>   The Standard leaves unspecified whether externally linked Standard C library elements are declared <B>extern "C"</B> or <B>extern "C++"</B> (Subclause 17.4.2.2), and therefore reserves both forms for the library implementation (Subclause 17.4.3.1.3).</LI>
<LI>   At the same time, certain of those elements must be declared both <B>extern "C"</B> and <B>extern "C++"</B> (Subclauses 18.3/3 and 25.4).</LI></UL>

<p>On <B>extern "C"</B> the Standard gives no other guidance, rationale, or example, for either compiler vendors or users. In particular, the Standard explicitly neither endorses nor prohibits <B>extern "C"</B> as a mechanism allowing:</p>

<UL><LI>   exported code written in C++ to act as if it were written in C <a href="#2">[2]</a></LI>
<LI>   imported code written in neither C nor C++ to act as if it were written in C <a href="#3">[3]</a></LI>
<LI>   C code to call into C++, even on the same implementation</LI>
<LI>   name mangling to be disabled <a href="#4">[4]</a></LI></UL>

<p>We must therefore infer whatever intent the C++ standardization committee has for <B>extern "C"</B>. Such inference is fuzzy at best, something reasonable and informed people can disagree about, as we have.</p>
<p>Specifically, as you point out, Subclauses 7.5/2 and 7.5/3 together suggest the intent that C and C++ have bidirectional &#147;linkage&#148; to one another. However, I&#146;m not convinced that &#147;linkage&#148; in Subclause 7.5 means the same thing as &#147;linkage&#148; in Subclause 3.5. The latter is all about declarations and scopes and translation units &#151; concepts that I don&#146;t see applying to entities untouched by a C++ translator. Accordingly, I find &#147;linkage&#148; an undefined or ill-defined term in the context of <B>extern "C"</B> <a href="#5">[5]</a>.</p>
<p>Even so, I&#146;ll concede that &#147;linkage&#148; probably includes the intent (but not the guarantee) that C can call C++ functions and C++ can call C functions, at least for the same implementation. However, specifying the mechanism or means for such calls strikes me as beyond the Standard&#146;s intent <a href="#6">[6]</a>.</p>
<p>From a less lawyerly perspective, I think the significant questions are these:</p>

<UL><LI>   Do most (maybe all?) joint C/C++ implementations today allow C code and C++ code on that implementation to freely mix via <B>extern "C"</B>, assuming the C++ code constrains itself to C-compatible behavior <a href="#7">[7]</a>?</LI>
<LI>   Are there some C++ implementations that can call into <B>extern "C"</B> code not actually written in C or C++, as long as the same vendor provides all translators and libraries?</LI>
<LI>   Are there some C++ implementations that can call into <B>extern "C"</B> code created by another vendor?</LI></UL>

<p>If the answer to all of these is &#147;yes,&#148; then I think we have a pretty good working definition of <B>extern "C"</B> intent.</>
<p>In sum, the Standard requires and guarantees little of <B>extern "C"</B> beyond its mere existence and explicitly intends nothing beyond &#147;linkage to functions written in the C programming language.&#148; C++ vendors are thus free to implement and purpose <B>extern "C"</B> as they see fit. In practice, vendors of joint C/C++ implementations should almost certainly allow inter-language calls on the same implementation, might allow calls to languages other than C and C++ on the same implementation, and might allow calls to other implementations.</p>

<H3><FONT COLOR="#000080">D Flat</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Bobby,</p>
<p>Regarding &#147;Headbangers Ball&#148; in the March 2001 issue of &#147;Uncaught Exceptions,&#148; you missed answering the question &#147;In what way would read-only access by default be a violation of encapsulation?&#148;. By not answering, you risk making this question appear rhetorical with implied endorsement of this idea.</p>
<p>Such a situation does violate encapsulation because users of private-but-read-only items could become dependent on data type. For example, a <B>private: int i</B> changing over to a <B>double i</B> can cause surprises for the read-only users of <B>i</B>.</p>
<p>That said, your scheme of having a <B>public: const int&amp; i</B> that is initialized to point to the private read-write version can avoid surprises. A change in type could be handled by keeping a separate <B>private: int i2</B> mirrored from the real <B>i</B> during all updates to <B>i</B>.</p>
<p>This does however seem error-prone compared to a <B>get</B> method that handles the conversion from <B>double</B> to <B>int</B> in a single place.</p>
<p>Cheers &#151; Claude Brown</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> The original reader (Dan Watkins) wanted to make a data member read/write inside member functions, but read-only elsewhere. Along the way, he wondered why private data members weren&#146;t available as read-only to the outside world. He reckoned this would bring two benefits:</p>

<UL><LI>   Class authors wouldn&#146;t need to declare thin-wrapper accessor functions that just returned the private data.</LI>
<LI>   Class authors wouldn&#146;t be tempted to make data public as a way to avoid accessor functions.</LI></UL>

<p>You suggest that such read-only data increases coupling, because users would be dependent on that data&#146;s type. Strictly speaking, this is true &#151; there is no insulating abstraction layer in:</p>

<pre>
class X
    {
public:
    int i;
    };

X x;
int i = x.i;
</pre>

<p>However, if an accessor function takes the path of least resistance and simply returns that type it&#146;s encapsulating:</p>

<pre>
class X
    {
public:
    int get_i() const
        {
        return i;
        }
private:
    int i;
    };

X x;
int i = x.get_i();
</pre>

<p>the same coupling is there.</p>
<p>The second version is more insulated against change, provided the maintainer takes advantage of that insulation:</p>

<pre>
class X
    {
public:
    int get_i() const // no change
        {
        return (int) i; // change
        }
private:
    double i; // change
    };

X x;
int i = x.get_i(); // OK, no change
</pre>

<p>But if the maintainer changes the return type of <B>get_i</B> to <B>double</B>, the abstraction is defeated, and the original coupling persists.</p>
<p>I&#146;ll end slightly off-topic, by noting that C# has a hybrid form:</p>

<pre>
class X
    {
    public int i
        {
        get
            {
            return (int) i_;
            }
        }
    private double i_;
    }

// ...

X x = new X();
int i = x.i; // OK
</pre>

<p>In the parlance of C#, <B>i</B> is a property. In C++ terms, a property has the syntactic appearance of a data member, but the implementation of a function member. (The semantics are a hybrid.) C#&#146;s designers introduced properties specifically to address the problems both you and Reader Watkins cite.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  This is in reference to my June and September columns.</p>
<p><a name="2"></a>[2]  Although this appears to be the most credible use for <B>extern "C"</B> on code implemented in C++, the Standard never makes the intent explicit.</p>
<p><a name="3"></a>[3]  I suppose you could infer the intent here via the C library support for <B>extern "C"</B>, since parts of the library may well be written in an assembly language, yet act like they&#146;re written in C. But again, the Standard never makes the intent explicit.</p>
<p><a name="4"></a>[4]  The Standard makes no mention of name mangling or name decoration in any context.</p>
<p><a name="5"></a>[5]  As both you and the Standard equate the Subclause 7.5 use of &#147;linkage&#148; and the Subclause 3.5 use of &#147;linkage,&#148; I&#146;m probably setting myself up for another supplication here!</p>
<p><a name="6"></a>[6]  Name mangling is a means to linkage, not an end. I&#146;m certain the Standard&#146;s authors expected name mangling to be the vehicle of choice in many implementations, but that&#146;s different from them intending or assuming name mangling as the vehicle.</p>
<p><a name="7"></a>[7]  By that I mean: no C++ startup/shutdown requirements, no reliance on the Standard C++ library, &#147;C&#148; locale only, no exceptions, maybe no templates, same object layout, same naming convention, same calling convention, and common or compatible parameter/return types. (There are probably more, but you get the idea.) </p>

<p><i>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes at home. In previous career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

</blockquote></body></html>
