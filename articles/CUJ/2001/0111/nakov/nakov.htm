<HTML>   
     <HEAD>
<TITLE>November 2001/An Asynchronous Execution Macro</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">An Asynchronous Execution Macro</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kalin Nakov</FONT></H3>

<BLOCKQUOTE>
<p>If you were wondering what local classes were good for, here's a good example that makes easy work of spawning single-statement threads.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>Most of today&#146;s multithread-capable application frameworks provide an abstract <B>Thread</B> base class with a virtual member function, usually called <B>run</B>, that becomes the mainline of the calling thread. This is accomplished by creating the thread and then calling the <B>run</B> function from within the newly created thread.</p>
<p>The thread class wrappers are implemented in terms of the platform&#146;s native APIs for thread creation. Most native thread APIs provide a thread creation function that accepts a pointer to a function that will be called as the mainline of the new thread, and a user-defined parameter that will be passed to that mainline, usually as a <B>void *</B> pointer. The following example demonstrates how the most common wrapper classes use the APIs for thread creation:</p>

<pre>
class Thread
{
public:
   Thread()
   { m_threadID =
   createThread
   (runWrapper, this); }
   virtual ~Thread()
   { destroyThread(m_threadID); }
protected:
   virtual void run() = 0;

private:
   static void runWrapper
   (Thread* thread){ thread-&gt;run(); }
...
};
</pre>

<p>In this case the class that extends the thread wrapper class and implements the <B>run</B> routine must be able to handle the arguments that will be passed to the thread. Those arguments are usually member variables of the class that form the context in which the thread will run. The following piece of code demonstrates how arguments are passed to the new thread:</p>

<pre>
class PrintAsynch: public Thread
{
public:
   PrintAsynch
   (const std::string&amp; message)
   : m_message(message) {}
protected:
   virtual void run() { std::cout &lt;&lt; 
   m_message; }
 private:
   std::string m_message;
};
</pre>

<p>This article will show another technique for creating threads using thread wrapper classes that eliminates the need to derive from a common <B>Thread</B> base class. The <B>asynch</B> macro described below accepts any statement that can be passed to a macro and runs it in a new thread. For example, instead of defining a <B>PrintAsynch</B> class as shown above, the same message can be printed in a new thread using the following statement inside a function:</p>

<pre>
asynch0
   (std::cout &lt;&lt; 
   "This is a sample message.";);
</pre>

<p>Although you do have to play a little trick (described later) to use statements containing commas, this technique is handy, say, when you have a simple asynchronous task to perform and you don&#146;t want to deal with the underlying thread API.</p>
<p>The task above is performed using local classes defined in a lexical block. The class that is defined is accessible only in the function block where it resides. The following piece of code demonstrates how this is done:</p>

<pre>
while (true)
{
   class Local
   {
      // define your class here
   };
};
</pre>

<p>The idea behind the <B>asynch0</B> macro is to automate the idea described in the beginning of the article (deriving from a <B>Thread</B> class) by defining a class that derives from <B>Thread</B> in its own block. The following snippet shows how this is done. (The full definition of the macros is shown in <a href="list1.htm">Listing 1</a>.)</p>

<pre>
#define asynch0(statement)\
{\
  class DummyThread: public Thread\
  {\
    virtual void run()\
    {\
       statement\
     delete this;\
    }\
  };\
  new DummyThread;\
}
</pre>

<p>The class <B>DummyThread</B> is defined in a separate block to separate it from the parent namespace. This is done to avoid any name collision if multiple <B>asynch0</B> statements appear in the same block:</p>

<pre>
asynch0( cout &lt;&lt; "World."; );
asynch0( cout &lt;&lt; "Hello "; );
</pre>

<p>Because the <B>DummyThread</B> class is defined in a separate block, no name collision will occur. You can also use the macro recursively; for example:</p>

<pre>
asynch0(asynch0(...(statement)...);
</pre>

<p>This will produce multiple classes named <B>DummyThread</B>, each in its own nested scope. This won&#146;t create a conflict since each nested <B>DummyThread</B> class will be defined in a member function of the enclosing <B>DummyThread</B> class. The following code demonstrates this situation:</p>

<pre>
class DummyThread
{
   ...
   virtual void run()
   {
      ...
      class DummyThread {...};
      ...
   }
   ...
};
</pre>

<p>When using the <B>asynch</B> macro, the statement that is to be executed asynchronously cannot use local variables whose addresses change each time the routine is entered, such as auto variables declared before the <B>DummyThread</B> declaration. The following code demonstrates this situation:</p>

<pre>
int main()
{
   int localVar;
   class DummyThread: public Thread
   {
      virtual void run()
      { localVar = 10; } // impossible, localVar cannot
                         // be accessed here
   };
}
</pre>

<p>If you want to use local variables as parameters to the <B>asynch</B> macro, you could declare them as <B>static</B> instead of auto variables, with the drawback that the enclosing function is now not reentrant or suitable for multithreaded use. Unfortunately, one of the most commonly used C++ compilers &#151; Microsoft C++ 6.0 SP3 &#151; does not support accessing local static variables from local classes. For example, if you declare <B>localVar</B> from the example above as <B>static</B>, you will still get an error that <B>localVar</B> cannot be accessed.</p>
<p>If you want to pass non-static local variables to the statement that will be executed asynchronously, you should first store them in a variable that is accessible from the locally defined class, such as a static local variable, or a globally defined one, or the best choice &#151; a member variable of the class <B>DummyThread</B>. The following code shows how this is done:</p>

<pre>
int main(int argc, char* argv[])
{
   {
      class DummyThread: public Thread
      {
      public:
         DummyThread(int argc, char** argv)
         : argc(argc), argv(argv) {}
      protected:
         virtual void run() {...}
      private:
         int argc;
         char** argv;
      }
      new DummyThread(argc, argv);
   }
}
</pre>

<p>This is a kind of marshaling of parameters to the new thread. If the routine that uses the <B>asynch</B> macros can be called sequentially and concurrently you should be careful what variables you are marshaling. You should be aware about the lifetime of the variables and of the thread. For instance, a common mistake is to use a local variable that can be destroyed before the new thread is created. Here is a common situation:</p>

<pre>
void func(int param)
{
   asynch1(param = 10;, int&amp;, param);
}
</pre>

<p>In this case the reference expires immediately as the <B>func</B> routine exits. There is no simple way to put variable arguments in a macro, so the expansion of the <B>asynch</B> macro that can marshal arguments will be defined as:</p>

<pre>
asynchX(statement, type1, param1, ..., typeX, paramX)
</pre>

<p>where <B>X</B> is the number of parameters that will be marshaled.</p>
<p>If the macro is implemented as described above you cannot be sure when the threads created with <B>asynch</B> will end, so it is hard to synchronize the threads in your application. You should only use statements that won&#146;t produce any unspecified behavior if terminated abruptly when the application exits and that do not need any synchronization. A solution for this problem can be to expand the macro with one additional parameter that will receive a pointer to the wrapper class instance of the new thread. Then you can use that pointer for operations on the thread such as waiting, suspending, resuming, or terminating. The following piece of code shows how this is done:</p>

<pre>
#define asyncht0(statement, thread)\
    // the body is defined in <a href="list1.htm">listing 1</a>
    ...
    static void runWrapper(Thread *param)
    {
       param-&gt;run();  // do not destroy the object,
                      // let the user do it
    }
    ...
    thread = new DummyThread();\
}
</pre>

<p>The statement that can be passed as a parameter to the <B>asynchX</B> macros has the following restrictions due to specific features of the preprocessor. Statements containing commas enclosed in parentheses <B>()</B> or single or double quotation marks (<B>''</B> or <B>""</B>) are valid macro arguments. The following constructions are correctly preprocessed:</p>

<pre>
asynch0(std::cout &lt;&lt; "Hello, world" &lt;&lt; ',' &lt;&lt; log(2, 2));
asynch0(for(int a = 0, b = 0; a &lt; 10, b &lt; 10; a++, b++););
</pre>

<p>Statements with commas that are <I>not</I> enclosed in the specific symbols as mentioned above cannot be passed to the <B>asyncX</B> macro directly. The following usages of the <B>asynchX</B> macro do not work:</p>

<pre>
asynch0(int a, b;);
asynch0(std::map&lt;int, int&gt; m;);
</pre>

<p>A solution to this problem is to define a symbol that can replace the comma in macro parameters. The following construction shows how this is done:</p>

<pre>
#define comma ,
</pre>

<p>Now the unusable statments shown above can be corrected using the <B>comma</B> define instead of directly writing &#145;<B>,</B>&#146;:</p>

<pre>
asynch0(int a comma b;);
asynch0(std::map&lt;int comma int&gt; m;);
</pre>

<p>A shortcomming of the <B>asynchX</B> macros is that you will have to use the <B>comma</B> define in more complicated constructions. This can make your code less readable and hardly supportable if not enough documentation is supplied.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>The advantages of the <B>asynch</B> macro are as follows: first, you should not have to manually implement a thread routine as you should do when using low-level APIs or high-level APIs such as the <B>_beginthreadex</B> routine in the MSVC runtime library or MFC&#146;s <B>CreateThread</B>. Second, you are not bound to the fixed arguments in those thread routines, usually a single <B>void *</B> parameter. Third, you are free to choose the arguments that will be used without any preliminary routine or class declarations. Using the <B>asynch</B> macro for execution of functions in a new thread is simple and elegant.</p>

<p><i><B>Kalin Nakov</B> is a project manager at WizCom (http://www.wizcom.net), a software solutions company. He is interested in object-oriented technologies and innovations in this field together with system programming for Windows and Unix. He can be contacted at <B>me@kalinnakov.com</B>.</i></p>

<h4><a href="../../../source/2001/nov01/nakov.zip"></a></h4>
</blockquote></body></html>
