<HTML>   
     <HEAD>
<TITLE>November 2001/The Standard Librarian</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocnov.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The Standard Librarian: Searching in the Standard Library</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Matt Austern</FONT></H3>

<BLOCKQUOTE>
<p>The genius as well as the oversights in the design of the Standard C++ library surface in a simple discussion of its linear and binary search algorithms.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>If you&#146;re storing a collection of values, probably one of the reasons is so you can look things up in it. Searching for a specific item in a collection is an important problem; whole books have been written about it. Not surprisingly, the Standard C++ library provides many different techniques for searching.</p>
<p>In the C++ library, the usual way of referring to a collection is through a range of iterators. The range can be written as <B>[first, last)</B>, where <B>*first</B> is the first value in the range and where <B>last</B> points just beyond the last value. In this notation, here&#146;s how we can think of the general problem: given a range and a criterion, find the first iterator that points to a value satisfying the criterion. Because we write ranges in an asymmetrical form, we can avoid special cases: a search that fails can return <B>last</B>, and a range with zero elements can be written as <B>[i, i)</B>.</p>

<H3><FONT COLOR="#000080">Linear Search and Its Variants</FONT></H3>
<p>The simplest form of searching is <I>linear search</I>, or, as Knuth calls it, <I>sequential search</I>: looking at each value in turn, and checking to see if it&#146;s the one we&#146;re looking for. If we have <I>N</I> elements in the range, then in the worst case we have to make <I>N</I> comparisons.</p>
<p>The standard library provides several versions of linear search; the two most important versions are <B>find</B> (which takes a range and a value <B>x</B> and looks for a value that&#146;s equal to <B>x</B>) and <B>find_if</B> (which takes a range and a predicate <B>p</B> and looks for a value that satisfies <B>p</B>). Other versions of linear search are <B>find_first_of</B> (which takes two ranges, <B>[first1, last1)</B> and <B>[first2, last2)</B> and finds the first element in <B>[first1, last1)</B> that&#146;s equal to any one of the values in the second range) and <B>adjacent_find</B> (which takes a single range and finds the first element that&#146;s equal to its successor).</p>
<p>Suppose, for example, that <B>v</B> is a vector of <B>int</B>. You can find the first zero by writing:</p>

<pre>
vector&lt;int&gt;::iterator i =
  find(v.begin(), v.end(), 0);
</pre>

<p>You can find the first nonzero element by writing:</p>

<pre>
vector&lt;int&gt;::iterator i =
  find_if(v.begin(), v.end(),
          not1(bind2nd(equal_to&lt;int&gt;(),
          0)));
</pre>

<p>You can look for the first small prime by writing:</p>

<pre>
A[4] = { 2, 3, 5, 7 };
vector&lt;int&gt;::iterator i =
  find_first_of(v.begin(), v.end(),
                A+0, A+4);
</pre>

<p>You can find the first pair of duplicates by writing:</p>

<pre>
vector&lt;int&gt;::iterator i =
  adjacent_find(v.begin(), v.end());
</pre>

<p>There aren&#146;t any separate versions that search backward through a range, but that&#146;s because you don&#146;t need them: you can get the same effect with a simple iterator adaptor. To find the last zero in <B>v</B> instead of the first, for example, all you have to write is:</p>

<pre>
vector&lt;int&gt;::reverse_iterator i =
  find(v.rbegin(), v.rend(), 0);
</pre>

<p>Linear search is a simple algorithm, and its implementation may not seem to present any important issues. Many books (including mine) show a simple implementation of <B>std::find</B>:</p>

<pre>
template &lt;class InIter, class T&gt;
InIter find(InIter first, InIter last,
            const T&amp; val)
{
  while (first != last &amp;&amp; !
    (*first == val))
    ++first;
  return first;
}
</pre>

<p>This is indeed a faithful implementation of the linear search algorithm, and of the C++ Standard&#146;s requirements; the first template parameter&#146;s name, <B>InIter</B>, means that this template argument need only satisfy the very weak <I>Input Iterator</I> requirements <a href="#1">[1]</a>. It might seem so simple that you might as well just write it out in your code by hand. Still, there&#146;s one annoying problem: this implementation isn&#146;t as efficient as it ought to be. The loop condition is complicated, requiring two tests for every element that gets examined. Conditional branches are expensive, and loops with complicated tests don&#146;t get optimized as well as loops with simple ones.</p>
<p>One answer to this problem, used in some standard library implementations <a href="#2">[2]</a>, is to &#147;unroll&#148; the loop, examining four elements per iteration. This is a fairly complicated solution, because <B>find</B> then has to deal with the leftover elements (ranges don&#146;t always come in multiples of four!), and also because it requires that <B>find</B> dispatch on iterator category &#151; unrolling is sensible only for a range of Random Access Iterators, so it&#146;s still necessary to use the old implementation for the general case. Still, unrolling is effective: it reduces the number of tests per element from 2 to 1.25. It&#146;s a technique that a standard library implementer can use without changing any interfaces.</p>
<p>You&#146;ll see a different answer in the usual books about algorithms. The reason we need two tests for each element is that, if we get to the end of the range without finding what we&#146;re looking for, we have to recognize that we&#146;ve failed. But what if we happen to know that the element we&#146;re looking for is always there and that the search will never fail? In that case, testing for the end of the range would be redundant; there wouldn&#146;t be any reason for the search algorithm to keep track of the end of the range in the first place. Instead of <B>std::find</B>, we could write the linear search algorithm as follows:</p>

<pre>
template &lt;class InIter, class T&gt;
InIter
unguarded_find(InIter first, 
  const T&amp; val)
{
  while (!(*first==val))
    ++first;
}
</pre>

<p>The version of linear search in Knuth <a href="#3">[3]</a> is more like <B>unguarded_find</B> than like <B>std::find</B>. Note that <B>unguarded_find</B> is not part of the C++ Standard. It&#146;s more dangerous than <B>find</B>, and less general. You can only use it when you are certain there is an element that&#146;s equal to <B>val</B> &#151; which usually means you&#146;ve put that element there yourself, as a sentinel at the end of the range. Using a sentinel isn&#146;t always practical. (What if you&#146;re searching through a read-only range?) But when it is practical, <B>unguarded_find</B> is simpler and faster than anything in the standard library.</p>

<H3><FONT COLOR="#000080">Binary Search</FONT></H3>

<p>Linear search is simple, and, for short ranges, it&#146;s the best way to search for values. As ranges get longer and longer, however, it stops being a reasonable solution. I was recently reminded of this while working with XSLT. My XSLT script included a line that looked something like this:</p>

<pre>
&lt;x:value-of select="/defs/data[@key=$r]"/&gt;
</pre>

<p>The XSLT engine I ran this under must have used linear search. I was searching through a list, and performing this search for every item in a list. My script was <I>O(N</I>2<I>)</I>, and it took minutes to run.</p>
<p>If you&#146;re looking through a fully general range, you can&#146;t do better than linear search. You have to examine every element, because otherwise the element you&#146;re looking for might be the one you didn&#146;t look at. But if you require that the range be structured in some way, you can do better.</p>
<p>You can, for example, require that the range be sorted. If you have a sorted range, you can use an improved version of linear search (once you get to an element that&#146;s larger than the one you&#146;re looking for, you don&#146;t have to walk all the way to the end to know that the search has failed), but, even better, you can use binary search. By looking at an element in the middle of the range, you can tell whether the element you&#146;re looking for is in the first or the second half; applying this division recursively, you can find the value you&#146;re looking for without having to look at all the rest of the elements. Linear search requires <I>O(N)</I> comparisons, and binary search requires only <I>O(</I>log <I>N)</I>.</p>
<p>The standard library includes four different versions of binary search: <B>lower_bound</B>, <B>upper_bound</B>, <B>equal_range</B>, and <B>binary_search</B>. All of them have the same signature: they take a range, an element to search for, and, optionally, a comparison function. The range must be sorted according to that function; if you don&#146;t provide it, it must be sorted according to the ordinary <B>&lt;</B> operator. So, for example, if you are searching through a range of <B>int</B>s arranged in ascending order, you could use the default. If you are searching through a range of <B>int</B>s arranged in descending order, you could pass an <B>std::greater&lt;int&gt;</B> as the comparison function.</p>
<p>Of the four binary search functions, the least useful one is the one with the most straightforward name: <B>binary_search</B>. All it returns is a simple yes or no: <B>true</B> if the value is somewhere in the range, <B>false</B> if it isn&#146;t. But that information isn&#146;t very useful by itself; I&#146;ve never had occasion to use <B>binary_search</B>. If the value you&#146;re searching for is there, you&#146;ll probably want to know where it is; if it isn&#146;t, you&#146;ll often want to know where it would have been.</p>
<p>There are several different questions you might want to ask about a value&#146;s location, which is why there are several different useful versions of binary search. The distinction becomes important when you have a range with several copies of the same element. Suppose, for example, that you have an array of <B>int</B>s, and you use both <B>lower_bound</B> and <B>upper_bound</B> to look for a value:</p>

<pre>
int A[10] = 
  { 1, 2, 3, 5, 5, 5, 5, 7, 8, 9 };

int* first = 
  std::lower_bound(A+0, A+10, 5);
int* last  = 
  std::upper_bound(A+0, A+10, 5);
</pre>

<p>The names <B>first</B> and <B>last</B> suggest the difference: <B>lower_bound</B> returns the <I>first</I> occurrence of the value you&#146;re searching for (in this case, <B>&amp;A[3]</B>), and <B>upper_bound</B> returns an iterator that&#146;s just past the <I>last</I> occurrence of the value you&#146;re searching for (in this case, <B>&amp;A[7]</B>). If you search for a value that isn&#146;t present, you&#146;ll get the position where it would have been if it had been there. Using the same <B>A</B> as before, we can write:</p>

<pre>
int* first = 
  std::lower_bound(A+0, A+10, 6);
int* last  = 
  std::upper_bound(A+0, A+10, 6);
</pre>

<p>Both <B>first</B> and <B>last</B> will be equal to <B>&amp;A[7]</B>, because that&#146;s the only place where a <B>6</B> could be inserted without violating the ordering.</p>
<p>In practice, of course you would never see a call to <B>lower_bound</B> followed immediately by a call to <B>upper_bound</B>. If you need both of those pieces of information, that&#146;s where the last binary search algorithm comes in: <B>equal_range</B> returns a pair, the first element of which is the value that <B>lower_bound</B> would return and the second element of which is <B>upper_bound</B>&#146;s return value.</p>
<p>Up until now I&#146;ve been slightly sloppy in my discussion: I&#146;ve been saying that <B>lower_bound</B> and <B>upper_bound</B> find a value, without saying exactly what that means. If you write</p>

<pre>
iterator i = 
  std::lower_bound(first, last, x);
</pre>

<p>and the search succeeds, are you guaranteed that <B>*i</B> is equal to <B>x</B>? Not necessarily! Neither <B>lower_bound</B> nor <B>upper_bound</B> ever tests for equality. They use the comparison function that you provide: either <B>operator&lt;</B> or some other comparison function that acts like &#147;less than.&#148; What it means for the search to succeed is that <B>*i</B> is not less than <B>x</B> and <B>x</B> is not less than <B>*i</B>.</p>
<p>This may seem like a picky distinction, but it&#146;s not. Suppose that you have some complicated record with many fields, and you&#146;re using one of those fields as the sort key (a person&#146;s last name, say). Two records may have the same key, in which case neither will be less than the other, even if all the other fields are different.</p>
<p>Once you start thinking about records and keys, another question about binary search becomes very natural: can you use binary search functions to look up a record by key? Just to be concrete, suppose we define a struct <B>X</B> as:</p>

<pre>
struct X {
  int id;
  ... // other fields
};
</pre>

<p>Suppose we have a <B>vector&lt;X&gt;</B>, sorted by the elements&#146; <B>id</B>s. How can you use binary search to find an <B>X</B> with a specified <B>id</B>, such as <B>148</B>?</p>
<p>One answer is to create a dummy <B>X</B> object with the desired <B>id</B> and use the dummy in the binary search:</p>

<pre>
X dummy;
dummy.id = 148;
vector&lt;X&gt;::iterator
   = lower_bound(v.begin(), v.end(),
                 dummy,
                 X_compare);
</pre>

<p>For the moment, this is the most reliable method. It&#146;s what you should use if you&#146;re concerned about maximum portability. On the other hand, it&#146;s not very elegant. You have to create a full <B>X</B> object, even though you aren&#146;t using anything but a single field; the other fields have to be initialized to default or arbitrary values. That initialization might be inconvenient, expensive, or sometimes even impossible.</p>
<p>Is it possible to pass the <B>id</B> to <B>lower_bound</B> directly, perhaps by passing <B>lower_bound</B> a heterogeneous comparison function that takes an <B>X</B> and an <B>id</B>? That question doesn&#146;t have a simple answer. The C++ Standard isn&#146;t completely clear about whether such heterogeneous comparisons are allowed; in my opinion, the most natural reading of the Standard is that they aren&#146;t. In practice today, heterogeneous comparisons work on some implementations but not on others. On the other hand, the C++ standardization committee considers this a defect, and in the future the Standard will probably be changed to make it unambiguous that heterogeneous comparisons are allowed <a href="#4">[4]</a>.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>The C++ library provides other forms of searching than the ones I&#146;ve discussed here. With both <B>find</B> and <B>lower_bound</B>, the search is restricted to a single element, but the standard library also provides <B>search</B>, which looks for an entire subrange. You can, for example, use <B>search</B> to look for a word in a string:</p>

<pre>
std::string the = "the";
std::string::iterator i
  = std::search(s.begin(), s.end(),
                the.begin(), the.end());
</pre>

<p>The return value, <B>i</B>, will point to the beginning of the first place that <B>"the"</B> appears in <B>s</B> &#151; or, as usual, the return value will be <B>s.end()</B> if <B>"the"</B> doesn&#146;t appear anywhere. There&#146;s also a variant that searches from the end instead of the beginning:</p>

<pre>
std::find_end(s.begin(), s.end(),
              the.begin(), the.end());
</pre>

<p>returns an iterator pointing to the beginning of the <I>last</I> occurrence of <B>"the"</B>, rather than the first. (If you think it&#146;s odd that a reverse variant of <B>search</B> is called <B>find_end</B>, rather than <B>search_end</B>, you&#146;re not alone.)</p>
<p>Searching can be encapsulated in data structures. Most obviously, the standard library&#146;s associative containers, <B>set</B>, <B>multiset</B>, <B>map</B>, and <B>multimap</B>, were designed specifically for efficient lookup by key <a href="#5">[5]</a>. The library&#146;s string class also provides a host of member functions for searching: <B>find</B>, <B>rfind</B>, <B>find_first_of</B>, <B>find_last_of</B>, <B>find_first_not_of</B>, and <B>find_last_not_of</B>. My advice is to avoid them. I find these special member functions hard to remember because they have so many forms, and because their interface differs from the rest of the library; in any case, they don&#146;t give you any functionality that you don&#146;t already have from <B>find</B>, <B>find_if</B>, and <B>search</B>.</p>
<p>But if you still think you see some major omissions, you&#146;re right! I haven&#146;t mentioned hash tables, because the standard library has no hash tables. I mentioned subrange matching with <B>search</B>, but surely that&#146;s just a special case of pattern matching &#151; and the standard library has no regular expression search or anything like it.</p>
<p>The C++ standardization committee has just started thinking about extensions to the standard library, and both hash tables and regular expressions are obvious candidates for a future version of the Standard. If you see something that the standard library is missing, and if you would like to submit a proposal, now is when you should start getting it ready.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  See Table 72 in the C++ Standard. Some of the other search algorithms, which I discuss later, rely on the stronger <I>Forward Iterator</I> requirements.</p>
<p><a name="2"></a>[2]  See, for example, &lt;www.sgi.com/tech/stl&gt;.</p>
<p><a name="3"></a>[3]  See &#147;Algorithm Q,&#148; in &#167;6.1 of D. E. Knuth, <I>The Art of Computer Programming, vol. 2, Sorting and Searching</I>, Second Edition (Addison-Wesley, 1998).</p>
<p><a name="4"></a>[4]  See &lt;http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/lwg-active.html#270&gt;. Dave Abrahams had the insight that enabled the proposed resolution to this issue. He pointed out that it&#146;s possible to think of binary searches not in terms of sorting and comparisons, but in terms of partitioning: we&#146;re given a range with the property that all elements before a certain point satisfy a condition and all elements after it fail to satisfy the condition, and we&#146;re looking for the transition point.</p>
<p><a name="5"></a>[5]  But these containers aren&#146;t the most efficient choice as often as one might think. See my earlier column &#147;Why You Shouldn&#146;t Use set &#151; and What You Should Use Instead,&#148; <I>C++ Report</I>, April 2000.</p>

<p><i><B>Matt Austern</B> is the author of </I>Generic Programming and the STL<I> and the chair of the C++ standardization committee&#146;s library working group. He works at AT&amp;T Labs &#151; Research and can be contacted at <B>austern@research.att.com</B>.</i></p>
</blockquote></body></html>
