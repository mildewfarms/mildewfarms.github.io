<HTML><HEAD>
<TITLE>July 2001 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1</A></h4>

<pre>
/*****************************************************************
  File: XdrStream.h
  Copyright (c) 1999 Bleading Edge Software Technologies, Inc.

  This Software is distributed under the open source, free 
  software model. Permission to use, modify, and distribute this 
  Software, including incorporating it into proprietary software, 
  is granted without fee, provided this copyright notice appear
  in all copies of the code. You are under no obligation to 
  distribute source code which is derived from or uses this 
  Software. You may not do anything however, to prevent the 
  continued distribution of this Software under an open source 
  distribution model. This includes, but is not limited to, such 
  things as copyrighting or claiming authorship of the Software. 
  This Software is distributed in the hope that it will be useful, 
  but it is provide &quot;as is&quot;, WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE.

//$---------------------------------------------------------------

$Header: /osahome/Amber/RWE/libprjs/util/String_stream.h,
v 1.2 2001/01/31 15:12:19 jreeves Exp $
  Author: Jack W. Reeves

//!---------------------------------------------------------------|

Description:
  XDR_Stream is an iostream that reads and writes XDR.

//#---------------------------------------------------------------|

Notes:

//****************************************************************/
#ifndef UTIL_XDR_STREAM_H
#define UTIL_XDR_STREAM_H

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

namespace Util {

   struct XDR_Char {
      // data
      unsigned char _data[4];

      // operations
      void swap_bytes();
      void pad(int);
   }; 

} //&gt; namespace Util


namespace std {
struct char_traits&lt;Util::XDR_Char&gt; {
   typedef Util::XDR_Char   char_type;
   typedef long             int_type;
   typedef streamoff        off_type;
   typedef streampos        pos_type;
   typedef mbstate_t        state_type;

   static void assign(char_type&amp; c1, const char_type&amp; c2);
   static bool eq(const char_type&amp; c1, const char_type&amp; c2);
   static bool lt(const char_type&amp; c1, const char_type&amp; c2);

   static int compare(const char_type* s1, const char_type* s2);
   static size_t length(const char_type* s1);
   static const char_type* find(const char_type* s, size_t n,
      const char_type&amp; a);
   
   static char_type* move(char_type* s1, const char_type* s2, 
      size_t n);
   static char_type* copy(char_type* s1, const char_type* s2, 
      size_t n);
   static char_type* assign(char_type* s, size_t n, char_type a);

   static int_type not_eof(const int_type&amp; c);
   static char_type to_char_type(const int_type&amp; c);
   static int_type to_int_type(const char_type&amp; c);
   static bool eq_int_type(const int_type&amp; c1, 
      const int_type&amp; c2);
   static int_type eof();
};

} //&gt; namespace

namespace Util {

   typedef std::basic_streambuf&lt;XDR_Char&gt;   XDR_Streambuf;

   // input streams
   class iXDR_Stream : virtual public std::basic_ios&lt;XDR_Char&gt; {
   public:
      // Types inherited from basic_ios
      typedef XDR_Char                   char_type;
      typedef std::char_traits&lt;XDR_Char&gt;   traits_type;
      typedef traits_type::int_type      int_type;
      typedef traits_type::pos_type      pos_type;
      typedef traits_type::off_type      off_type;

      // constructor / destructor
      explicit iXDR_Stream(XDR_Streambuf* sb);
      virtual ~iXDR_Stream();

      // prefix / suffix
      class sentry;

      // standard manipulators
      iXDR_Stream&amp; operator&gt;&gt;
         (iXDR_Stream&amp; (*pf)(iXDR_Stream&amp;));
      iXDR_Stream&amp; operator&gt;&gt;
         (std::basic_ios&lt;XDR_Char&gt;&amp; (*pf)
         (std::basic_ios&lt;XDR_Char&gt;&amp;));
      iXDR_Stream&amp; operator&gt;&gt;
         (std::ios_base&amp; (*pf)(std::ios_base&amp;));

      // encoded input
      iXDR_Stream&amp; operator&gt;&gt;(bool&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(char&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(signed char&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(unsigned char&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(short&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(unsigned short&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(int&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(unsigned int&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(long&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(unsigned long&amp; n);
      iXDR_Stream&amp; operator&gt;&gt;(float&amp; f);
      iXDR_Stream&amp; operator&gt;&gt;(double&amp; f);
      iXDR_Stream&amp; operator&gt;&gt;(long double&amp; f);

      // copy
      iXDR_Stream&amp; operator&gt;&gt;(XDR_Streambuf* sb);

      // opaque data extractors
      size_t      get(void* d, size_t l);
      size_t       vget(void* d, size_t l);
      size_t       vget(std::vector&lt;unsigned char&gt;&amp; d);

      // array extractors
      template&lt;typename T&gt;
      size_t       get_arr(T* a, size_t l);
      template&lt;typename T&gt;
      size_t       vget_arr(T* a, size_t l);
      template&lt;typename T&gt;
      size_t       vget_arr(std::vector&lt;T&gt;&amp; v);

      // unformated input
      std::streamsize   gcount() const;

      int_type    get();
      iXDR_Stream&amp; get(char_type&amp; c); 
      iXDR_Stream&amp; get(XDR_Streambuf&amp;
         sb, std::streamsize n);

      iXDR_Stream&amp; ignore(std::streamsize n = 1, 
         int_type delim = traits_type::eof());
      int_type    peek();

      iXDR_Stream&amp; read(char_type* s, std::streamsize n);
      std::streamsize   readsome(char_type* s, 
         std::streamsize n);

      iXDR_Stream&amp; putback(char_type c);
      iXDR_Stream&amp; unget();
      int    sync();

      pos_type   tellg();
      iXDR_Stream&amp; seekg(pos_type); 
      iXDR_Stream&amp; seekg(off_type, std::ios_base::seekdir);
   };

   // string extractors
   iXDR_Stream&amp; operator&gt;&gt;
      (iXDR_Stream&amp;, char* s);
   iXDR_Stream&amp; operator&gt;&gt;
      (iXDR_Stream&amp;, signed char* s);
   iXDR_Stream&amp; operator&gt;&gt;
      (iXDR_Stream&amp;, unsigned char* s);

   iXDR_Stream&amp; operator&gt;&gt;
      (iXDR_Stream&amp;, std::string&amp; str);

   // input stream sentry class
   class iXDR_Stream::sentry {
      bool   _ok;
   public:
      explicit sentry(iXDR_Stream&amp; is);
      ~sentry();
      operator bool() const   { return _ok; }
   };


   // output streams
   class oXDR_Stream : virtual public std::basic_ios&lt;XDR_Char&gt; {
   public: 
      // Types inherited from basic_ios
      typedef XDR_Char                char_type;
      typedef std::char_traits&lt;XDR_Char&gt;   traits_type;
      typedef traits_type::int_type   int_type;
      typedef traits_type::pos_type   pos_type;
      typedef traits_type::off_type   off_type;

      // constructor / destructor
      explicit oXDR_Stream(XDR_Streambuf* sb);
      virtual ~oXDR_Stream();

      // prefix / suffix
      class sentry;

      // standard manipulators
      oXDR_Stream&amp; operator&lt;&lt;
         (oXDR_Stream&amp; (*pf)(oXDR_Stream&amp;));
      oXDR_Stream&amp; operator&lt;&lt;
         (std::basic_ios&lt;XDR_Char&gt;&amp; (*pf)
         (std::basic_ios&lt;XDR_Char&gt;&amp;));
      oXDR_Stream&amp; operator&lt;&lt;
         (std::ios_base&amp; (*pf)(std::ios_base&amp;));

      // encoded output
      oXDR_Stream&amp; operator&lt;&lt;(bool n);
      oXDR_Stream&amp; operator&lt;&lt;(char n);
      oXDR_Stream&amp; operator&lt;&lt;(signed char n);
      oXDR_Stream&amp; operator&lt;&lt;(unsigned char n);
      oXDR_Stream&amp; operator&lt;&lt;(short n);
      oXDR_Stream&amp; operator&lt;&lt;(unsigned short n);
      oXDR_Stream&amp; operator&lt;&lt;(int n);
      oXDR_Stream&amp; operator&lt;&lt;(unsigned int n);
      oXDR_Stream&amp; operator&lt;&lt;(long n);
      oXDR_Stream&amp; operator&lt;&lt;(unsigned long n);
      oXDR_Stream&amp; operator&lt;&lt;(float f);
      oXDR_Stream&amp; operator&lt;&lt;(double f);
      oXDR_Stream&amp; operator&lt;&lt;(long double f);

      // copy
      oXDR_Stream&amp; operator&lt;&lt;(XDR_Streambuf* sb);

      // opaque data inserters
      oXDR_Stream&amp; put(const void* d, size_t l);
      oXDR_Stream&amp; vput(const void* d, size_t l);
      oXDR_Stream&amp; vput
         (const std::vector&lt;unsigned char&gt;&amp; d);

      // array inserters
      template&lt;typename T&gt;
      oXDR_Stream&amp; put_arr(const T* a, size_t l);
      template&lt;typename T&gt;
      oXDR_Stream&amp; vput_arr(const T* a, size_t l);
      template&lt;typename T&gt;
      oXDR_Stream&amp; vput_arr
         (const std::vector&lt;T&gt;&amp; v);


      // unformated output
      oXDR_Stream&amp; put(char_type c);
      oXDR_Stream&amp; write(const char_type* s, 
         std::streamsize n);

      oXDR_Stream&amp; flush(); 

      // seeks
      pos_type tellp();
      oXDR_Stream&amp; seekp(pos_type);
      oXDR_Stream&amp; seekp(off_type, ios_base::seekdir);
   };

   // string inserters
   oXDR_Stream&amp; operator&lt;&lt;
      (oXDR_Stream&amp;, const char* s);
   oXDR_Stream&amp; operator&lt;&lt;
      (oXDR_Stream&amp;, const signed char* s);
   oXDR_Stream&amp; operator&lt;&lt;
      (oXDR_Stream&amp;, const unsigned char* s);

   oXDR_Stream&amp; operator&lt;&lt;
      (oXDR_Stream&amp;, const std::string&amp; str);

   // output stream sentry
   class oXDR_Stream::sentry {
      bool   _ok;
   public: 
      explicit sentry(oXDR_Stream&amp; os);
      ~sentry();
      operator bool() const { return _ok; }
   }; 


   // input / output streams
   class XDR_Stream : public iXDR_Stream, public oXDR_Stream {
   public: 
      XDR_Stream(XDR_Streambuf* sb);
      virtual ~XDR_Stream();
   }; 

} //&gt; namespace


#endif
</pre>
</BODY></HTML>
