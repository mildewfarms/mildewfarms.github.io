<HTML>   
     <HEAD>
<TITLE>July 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.07/tocjul.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: How to Persist an Object <a href="#1">[1]</a></FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>


<p><i>Copyright 2001, Jim Hyslop and Herb Sutter</i></p>

<p>It was 00:10 local Europa Base time when I slumped down the corridor. I was exhausted; three days of afternoon watch were getting to me.</p>
<p>A small beam of soft light spilled out across the cool metal corridor. It was coincidence, I think, that Major Gilb's door was slightly ajar, although the fact that the ventilation system had been suffering lately probably also had something to do with that. It was more coincidental that the Colonel was visiting the Major in the latter's office, instead of the reverse.</p>
<p>It was, on the other hand, certainly no coincidence that, when I heard low voices, I slowed down and listened. The sigh and hum of the ventilation made the listening more difficult, but it also concealed my presence.</p>
<p>&quot;&#151;me but that they're persistent mother's sons,&quot; the other voice, which I later found out to be the Colonel's, was saying.</p>
<p>There was a silence, and then Gilb's voice: &quot;They're en route, then? How many? What's the ETA?&quot;</p>
<p>&quot;At least six ships.&quot; Pause. &quot;Give 'em a month. It's imperative that the UN retain control of this installation until we can determine what technologies we're sitting on here. However long it takes.&quot;</p>
<p>There was what had to be Gilb's laughter. &quot;The UN? You mean the Union.&quot;</p>
<p>&quot;It's all the same. The Asians are persistent. We have to discourage them.&quot;</p>

<hr>

<p>&quot;Y'know, pardner, you've seemed a little distracted lately,&quot; Wendy said as she mixed her wasabi into the soy sauce, getting ready to dig into her sushi. &quot;Everything all right?&quot;</p>
<p>I concentrated on my California rolls for a minute. &quot;It's Anna,&quot; I confessed. &quot;Ever since I found out that she's Bob's daughter, I've been avoiding her. She calls me every once in a while, but I haven't been returning her calls. I deleted her phone number from my PDA. I like her, but I don't know if I can handle...&quot; </p>
<p>&quot;Anna was at my baby shower last weekend,&quot; Wendy nodded understandingly. &quot;She really likes you.&quot; When I didn't answer, Wendy continued: &quot;I'm going to tell you what I told her. When I first met my husband, I was working a lot of overtime. It was one of those companies that always seems to be in deadline mode, you know? Anyway, Tom kept asking me out, and I wanted to, but I always had to work. Finally, I decided to make time. And the rest, as they say, is history. Tom kept trying, and so I told Anna to keep trying. Persistence pays off.&quot;</p>
<p>&quot;Agh! Don't talk to me about persistence!&quot; I grumbled.</p>
<p>Wendy blinked. &quot;Huh?&quot;</p>
<p>&quot;Oh,&quot; I shook my head, &quot;I'm trying to implement some simple object persistence in my class hierarchy. I haven't been able to figure out how to do it. I asked the Guru for some help, but she said that she had taught me everything I need to know. I just can't figure it out.&quot;</p> 
<p>Wendy pursed her lips in thought. &quot;This one time I'll waive our agreement about no shop talk over lunch. Fill me in a little more.&quot;</p>
<p>&quot;I know it's not that difficult,&quot; I said around a mouthful of rice. &quot;Once I get going, I know I'll be fine. The main application can instantiate a derived class. I need to be able to write that class to an <b>ostream</b>. No problem. But I'm stuck on how to reconstitute the correct class when I read it back in.&quot;</p>
<p>&quot;The Guru's right &#151; you do know everything you need to know. How do you create an object, when you don't know the exact type of the object until run time?&quot;</p>
<p>&quot;Use a class factory,&quot; I said.</p>
<p>&quot;Right, just like the one you implemented last month <a href="#2">[2]</a>. Now, what do you pass to the factory to get the appropriate type?&quot;</p>
<p>&quot;Some sort of token. I used a <b>std::string</b>.&quot;</p>
<p>&quot;OK, now where do you get that token?&quot;</p>
<p>&quot;Ummm... well, it isn't going to appear out of thin air, so I guess I read it from the file.&quot; At that moment, the penny dropped. &quot;Oh, of course. When I write out the object, first I write out the token indicating what type of object it is, and then I write the object's information. Reconstituting it is a simple matter of reading the token, passing it to the factory, and then streaming it in from the file.&quot;</p>
<p>&quot;Right,&quot; Wendy replied. &quot;And if you want to get really fancy, you can....&quot;</p>
<p>&quot;Hold it!&quot; I signaled a time-out. &quot;Thanks for helping me clear my mental log jam. Now that it's clear, I'm re-invoking the 'no-shop-talk' rule.&quot; I dug into the main course.</p>
<p>Later, when Wendy and I got back to the office, I sat at my computer and hammered out the base class fairly quickly:</p>

<pre>
class Base
{

private:
    // ... whatever data ...

    virtual std::string classID() const { return &quot;Base&quot;; }

protected:
    // Derived classes should call their parent's
    // implementation of this function after they 
    // load themselves.
    virtual void do_read( std::istream&amp; );

    // Derived classes should call their parent's
    // implementation of this function after they 
    // save themselves.
    virtual void do_write( std::ostream&amp; ) const;

public:
    // ... whatever virtual functions are required ... 

    // Streaming functions.
    void read( std::istream&amp; );
    void write( std::ostream&amp; ) const;

    virtual ~Base();
};

// Streaming helpers. Note that they are not friends!
std::ostream&amp; operator &lt;&lt;
    ( std::ostream&amp; o, const Base&amp; b) { b.write(o); }
std::istream&amp; operator &gt;&gt;
    ( std::istream&amp; o, Base&amp; b) { b.read(o); }
// <a href="#3">[3]</a>
</pre>



<p>&quot;Very good, my child,&quot; I heard the Guru's voice behind me. As I jumped, I cursed at myself for not predicting her arrival. She continued: &quot;Give me a quick walk-through of your writings.&quot;</p>
<p>&quot;Simple enough,&quot; I said, as the Guru sat in the guest chair. &quot;<b>Base::write </b>is called via the overloaded insertion operator. Here's its implementation:&quot;</p>

<pre>
void Base::write( std::ostream&amp; o ) const
{
    o &lt;&lt; classID() &lt;&lt; std::endl;
    do_write(o);
}
</pre>

<p>&quot;Ah, the Template Method pattern,&quot; the Guru nodded. &quot;Very wise, my child <a href="#4">[4]</a>.&quot;</p>

<p>&quot;The implementation is fairly simple,&quot; I continued. &quot;It simply writes out the class identifier and then invokes the <b>do_write</b> virtual function. <b>do_write</b> handles the gory details of writing the object's information to the stream. Each derived class must call its parent's <b style='mso-bidi-font-weight:normal'>do_write</b> function. Reading is slightly more complicated, though.&quot; I called up the function I had written to encapsulate the reading:</p>

<pre>
std::auto_ptr&lt;Base&gt; loadBase( std::istream&amp; inFile )
{
    std::string className;
    std::getline( inFile, className );

    std::auto_ptr&lt;Base&gt; newBase =
        genericFactory&lt;Base&gt;::instance().create(className);

    if( newBase.get() != 0 ) {
        inFile &gt;&gt; *newBase;
    }

    return newBase;
}
</pre>

<p>&quot;It's a three-step process. First, I retrieve the class ID from the file. Then I use that identifier to get a new object from the class factory, and finally I reconstitute the class's data, via the <b>read</b> function:&quot;</p> 

<pre>
void Base::read( std::istream&amp; i )
{
    do_read(i);
}
</pre>

<p>&quot;I'm using the Template Method pattern here, too, but that's probably overkill for a simple function like this. <b>do_read</b>, of course, handles the gory details of reading in the information, validating it, and so on. Like the <b>do_write</b> function, a derived class's <b>do_read</b> should call its parent's <b>do_read</b> function.&quot;</p>
<p>&quot;Well done, my child,&quot; the Guru said as she stood up.</p>
<p>&quot;Before you go,&quot; I blurted out. The Guru paused. &quot;Tell Anna I've lost her phone number, but I'll be home tonight if she wants to call me.&quot; The Guru nodded and glided away.</p>

<hr>

<p>&quot;'Discourage.' Ah.&quot; It was Gilb's voice again. I blinked and shook my head to clear away the tired haze. &quot;What do they know?&quot;</p>
<p>&quot;Not much, we think. The Asians suspect something.&quot;</p>
<p>&quot;They don't believe our cover story of communications problems that happen to cut off all of their nationals from talking with them?&quot; Gilb's voice was openly sarcastic.</p>
<p>&quot;They suspect,&quot; the other voice repeated. &quot;And they're coming. We need to deal with it. What have your tech teams discovered so far?&quot;</p>
<p>I was feeling increasingly uncomfortable standing in the corridor and didn't wait to hear more. There would be time enough after a good night's sleep.</p>

<H3><FONT COLOR="#000080">Note from the Authors</FONT></H3>

<p>Our thanks to Andrei Alexandrescu for pointing out a small, but significant, naming problem with our previous article. We incorrectly referred to the GoF (&quot;Gang of Four&quot;) design pattern &quot;Factory Method&quot; as the &quot;Abstract Factory&quot; pattern. Each of these patterns has a chapter devoted to it, in Andrei's book <i>Modern C++ Design</i> (Addison-Wesley, 2001). We apologize for any confusion.</p>


<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1] Can be sung to the tune of &quot;How to Handle a Woman&quot; (<i>Camelot</i>, Lerner and Loewe).</p>
<p><a name="2"></a>[2]  Jim Hyslop and Herb Sutter. &quot;Conversations: A Factory, Template Style,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, June 2001,  <b>www.cuj.com/experts/1906/hyslop.htm</b>.</p>
<p><a name="3"></a>[3]  A full, working example program is available to download from <a href="../../../source/2001/jul01/reeves.zip">hyslop.zip</a>.</p>
<p><a name="4"></a>[4]  E. Gamma, R. Helm, R. Johnson, and J. Vlissides. <i>Design Patterns: Elements of Reusable Object-Oriented Software</i> (Addison-Wesley, 1995).</p>

<p><i><b>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</p>
<p><i><b>Herb Sutter</b> (<b>www.gotw.ca</b>) is secretary of the ISO/ANSI C++ standards committee and author of the acclaimed books </i>Exceptional C++<i> and </i>More Exceptional C++<i> (available summer 2001). Herb is also one of the featured instructors of The C++ Seminar (<b>www.gotw.ca/cpp_seminar</b>).</i></p>

<h4><a href="../../../source/2001/jul01/hyslop.zip"></a></h4>

</BLOCKQUOTE></BODY></HTML>


