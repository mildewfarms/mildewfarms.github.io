<HTML>   
     <HEAD>
<TITLE>September 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.09/tocsep.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Back to Base-ics</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b><i>Copyright 2001, Jim Hyslop and Herb Sutter</i></b></p>

<p>&quot;...their fleet will reach our orbiting facilities in three days,&quot; the commander was saying. His breath drifted hazily in the air; we were standing in the ice cavern, the only room large enough to hold us all. &quot;We do not know their intentions; we continue to have problems with our own communications equipment. It could be that they misunderstand our situation. We are doing everything we can to contact them.&quot;</p>
<p>I had already been having my doubts as to how real our own communications problems really were, and how much they were an invention to keep the Asians in particular away from our amazing discoveries here on the Europan surface. We were continuing to excavate and explore the alien city we had found frozen, preserved beneath the ice, but the work was going more slowly now as we struggled to make sense of the few dozen different artifacts we'd discovered. None of us who had been selected for work here were Asians, and I'm sure I wasn't the only one to notice that convenient little fact.</p> 
<p>&quot;We're confident in a successful outcome,&quot; the commander was finishing. &quot;New watch schedules have been posted that will take effect at 0900  tomorrow for the duration until this situation has been resolved. In the meantime, concentrate on your work, especially those of you assigned to investigate the artifacts, and don't worry. Dismissed.&quot;</p> 
<p>At the mess hall, I was still mulling it over when an aide approached us. &quot;Jeannine, Nancy wants to see you after the next watch.&quot; Jeannine nodded.</p>
<p>I looked up and chuckled as the aide left. &quot;What?&quot; Jeannine asked.</p>
<p>&quot;Oh,&quot; I waved, &quot;just the same old same old.&quot;</p>
<p>Jeannine sighed in exasperation. &quot;Why does every conversation we have remind you of your first job?&quot;</p>
<p>&quot;That,&quot; I smiled, &quot;actually has a lot to do with you...&quot;</p>

<hr>

<p>As usual, I was struggling with what should have been a simple design problem. It didn't help that I was still a little foggy from the Labor Day weekend. Wendy had just started her maternity leave, so I couldn't bounce any ideas off her.</p>
<p>I had to introduce a new class into the project. I had found an existing class, which was fairly close to what I wanted. Problem was, I couldn't decide on the exact relationship between the existing class and the new one. I knew I didn't want to derive publicly from the existing class, because there was no IS-A relationship between the two. Layering was not an option, as I had to override some virtual functions. I knew I needed either private inheritance, to model <i>Is-Implemented-In-Terms-Of</i>, or I needed to extract the common functionality into a new base class.</p>
<p>As I was mulling my options, I thought that this would be an appropriate moment for the Guru to show up. I whirled around in my chair &#151; but nobody was there. Feeling rather foolish, I turned back to my keyboard. &quot;Well,&quot; said I to myself, &quot;I'm going to have to decide one way or another.&quot;</p>
<p>&quot;Wise decisions are sometimes difficult to make.&quot; I jumped at the Guru's quiet voice beside me. I glanced at her askance, and she continued: &quot;How will you decide your options?&quot;</p>
<p>&quot;That's what I'm having trouble with,&quot; I admitted, as my heart rate came back down. &quot;Scott Meyers's Item 40 suggests an Is Implemented In Terms Of relationship, to take advantage of code in another class that already exists but is not conceptually related <a href="#1">[1]</a>. His example is a <b>Set</b> that is implemented in terms of a <b>List</b>.&quot; I showed the Guru the example:</p>

<pre>
template&lt;class T&gt;
class Set {
private:
    List&lt;T&gt; rep;  // representation for a set
public:
    // ...
};</pre>

<p>&quot;But then Item 43,&quot; I continued, &quot;suggests that if two classes share common code, then they should inherit from a common base class. His example there is two <b>CartoonCharacter</b> classes, <b>Cricket</b> and <b>Grasshopper</b>, which derive from a newly-introduced, common base called <b>Insect</b>.&quot; I showed the Guru the second example:</p> 

<pre>
class CartoonCharacter { /* ... */ };
class Insect : public CartoonCharacter { /* ... / };
class Grasshopper : public Insect { /* ... / };
class Cricket : public Insect { /* ... */ };</pre>

<p>The Guru half smiled. &quot;Yes, but Item 43 really only applies if the classes are related.&quot;</p>

<p>&quot;<i>My child,</i>&quot; I reminded, <i>sotto voce</i>.</p>

<p>&quot;...if the classes are related, <i>my child,</i>&quot; she nodded, amending. There were other people within earshot, after all, and appearances had to be maintained.</p>
<p>&quot;Yes, but,&quot; I echoed in my turn, &quot;here's my quandary. I could apply the technique in Item 43 &#151; factoring functionality into a common base class &#151; to the example in Item 40. Instead of implementing a <b>Set</b> in terms of a <b>List</b>, why not create a new class, say <b>Container</b>, which serves as a base class for both <b>Set</b> and <b>List</b>? In my case, with this new class I have to write, I can envision a common base class for my new class and for the existing class.&quot;</p> 
<p>&quot;Ah, I see,&quot; the Guru nodded. &quot;Your question essentially works out to this: How do you distinguish between Item 40's 'taking advantage of code written for an existing class', and Item 43's 'sharing code'? On the surface the two do seem to be quite similar.&quot; The Guru paused in thought for a moment. &quot;I would suggest that you might follow this sequence of thought:</p> 
<p>&quot;In general, when you are adding a new class to a project, and that class is very similar to an existing class, you will frequently have three options: derive one class from the other, create a common base class from which both the new and existing classes will be derived, and implement one class in terms of the other class.</p> 
<p>&quot;The simple case, of course, is the first one &#151; does the relationship model an IS-A relationship? If so, then publicly derive the new class from the existing class, or vice versa.&quot;</p>
<p>&quot;Ah, yes,&quot; I interjected, as I began jotting in my notebook. &quot;The one thing Meyers wants us to remember about C++, and it ain't 1066 <a href="#2">[2]</a>!&quot; </p> 
<p>The Guru rolled her eyes. &quot;Examine the nature of the shared or common code,&quot; she continued and added, &quot;which assumes, by the way, that you have the source code of the existing class available to you; if you do not, then obviously you cannot refactor the existing class, and the design is now decided &#151; you must Implement In Terms Of. But for this project, you have the source code available, and you examine the potentially shared code: Is the code truly common? That is, does each of the classes call the same actual function &#151; not just a function with the same name, but the same actual function? In Meyers's <b>Cricket </b>and <b>Grasshopper</b> example, both call the same <b>singCustomization</b> function. The customization functions are truly common code. On the other hand, if you were to introduce the <b>Container</b> base class, its <b>insert</b> function would not likely work for both <b>Set</b> and <b>List</b>. One or both of the classes would have to provide their own, unique overrides of the <b>insert</b> function. The code is not truly common, so a common base class is not suggested.</p>
<p>&quot;Examine the two classes. Are the existing and new classes conceptually related to some <i>useful</i> base class? How useful is the <b>Container</b> class you propose? As an example, consider the Standard container classes &#151; there is no class called <b>std::container</b> or its equivalent. Nor can there be &#151; why not?&quot;</p> 
<p>&quot;Uh,&quot; I uhhed, &quot;because the interfaces aren't identical?&quot;</p>
<p>&quot;Close enough,&quot; she allowed. &quot;Their interfaces vary, and the commonalities are specified by use cases, not by specific function signatures. Wanting to invent a base class whose sole purpose is to unite two otherwise unrelated classes suggests that we are wanting what is perverse; it suggests that, instead, we should perhaps be Implementing In Terms Of.&quot;</p> 
<p>&quot;Wait a second,&quot; I interrupted. &quot;The <b>Insect</b> class was invented just to unite the two other classes.&quot;</p>
<p>&quot;True, but the <b>Cricket</b> and <b>Grasshopper</b> classes were already related &#151; they are both ultimately descended from the <b>CartoonCharacter</b> class. In addition, the <b>Insect</b> class provides additional functionality that both <b>Cricket</b> and <b>Grasshopper</b> build on. Therefore, the <b>Insect</b> class is a meaningful class in its own right and provides a cohesive and internally consistent abstraction.</p>
<p>&quot;Next,&quot; she continued, &quot;if the existing class has protected members you wish to access, you may want to consider using non-public inheritance.</p>
<p>&quot;Finally, ask yourself: Would Implementing In Terms Of introduce multiple inheritance, where using a common base class would not? Multiple inheritance is inherently more complex than single inheritance. Prefer the simpler solution, if possible.&quot;</p>
<p>I was awash, though still floating gamely in the sea of information. I needed time to digest. &quot;Great, thanks for the help, I think. I mean, I think I know how to figure it out now!&quot;</p> 
<p>The Guru bowed her head. &quot;Oh, I heard from Wendy's husband, Tom, this morning.&quot;</p>
<p>&quot;And the news is...?&quot; I grinned excitedly.</p>
<p>&quot;A baby girl, seven pounds 13 ounces, born at 2:18 a.m. on Monday morning. Her name is Jeannine Nancy.&quot;</p>

<hr>

<p>&quot;Jeannine?&quot; She lifted her eyebrows.</p>
<p>I couldn't help it: &quot;Yes, Jeannine: Jeannine,&quot; I smiled. &quot;C'mon, we'd better get back to the lab.&quot;</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Scott Meyers. <i>Effective C++</i>, 2nd Edition, Items 40, 42, and 43 (Addison-Wesley, 1997).</p>
<p><a name="2"></a>[2]  Scott Meyers. <i>Effective C++</i>, 2nd Edition, Item 35 (Addison-Wesley, 1997).</p>


<p><i><B>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <b>hsutter@acm.org</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
