<HTML>   
     <HEAD>
<TITLE>September 2001 C++ Experts Forum/The (B)Leading Edge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.09/tocsep.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The (B)Leading Edge: Using the XDR_Stream Class</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jack W. Reeves</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>In this installment I am going to investigate the use of my <b>XDR_Stream</b> class. In the time since I wrote the previous column, I have been experimenting with <b>XDR_Stream</b> on a fairly regular basis. Most of this has been related to data communications, but in the back of my mind, I have been thinking about using XDR as an object persistence mechanism.</p>
<p>In my experimentation, I have been reminded of the adage that &quot;code isn't reusable until it has been reused at least once.&quot; I might go even further and declare that it isn't even usable until it has been reused at least once. (We have all encountered libraries that seemed to have been designed in such a way that only the original developer could have possibly found them easy to use.) One of the things I like to do when I design something is let it sit for a while and then go back and try to use it myself. I may not approach it with the total ignorance of a new user, but even a few days away from daily working with the internals of a library can shed light on how well the externals are thought out. In this column, I am going to take advantage of the fact that &quot;The (B)Leading Edge&quot; is now web based and go into some detail about the considerations that I have dealt with in trying to make my <b>XDR_Stream</b> into something useful. This column could easily be subtitled &quot;How a Design Evolves.&quot; Here I will look at some improvements that I made to <b>XDR_Stream</b> to make it easier to use in its primary role as a means for encoding/decoding XDR streams for use as a communication protocol. Next column, I will go into some extensions that make <b>XDR_Stream</b> more usable as a data persistence mechanism.</p> 
<p>One thing I did was take a complete look at the set of member functions that I provided and described in the previous column <a href="#1">[1]</a>. As I used the <b>XDR_Stream</b>, I asked myself &quot;Does this make sense?&quot;, &quot;Would something else be easier to use or more intuitive?&quot;, and finally, &quot;Should this be a member function, a non-member function, or is it something I do not really need at all?&quot; </p> 
<p>I will mention a couple of the simple changes that I made (the code is available for download from the <i>CUJ</i> website). For example, I originally had the following member functions: </p>

<pre>
oXDR_Stream&amp; vput
  (const std::vector&lt;unsigned char&gt;&amp;);
size_t vget
  (std::vector&lt;unsigned char&gt;&amp;);
template&lt;typename T&gt; oXDR_Stream&amp; vput_arr
  (const std::vector&lt;T&gt;&amp;);
template&lt;typename T&gt; size_t vget_arr
  (std::vector&lt;T&gt;&amp;);
</pre>

<p>The first two were for XDR's variable length opaque data type, and the second two were for variable length array encoding/decoding. I quickly realized that I did not need any of them. What I needed were insertion and extraction operators for the appropriate objects. I removed the above and added the following non-member functions:</p> 

<pre>
oXDR_Stream&amp; operator&lt;&lt;(oXDR_Stream&amp;, 
  const std::basic_string&lt;unsigned char&gt;&amp;);
iXDR_Stream&amp; operator&gt;&gt;(iXDR_Stream&amp;, 
  std::basic_string&lt;unsigned char&gt;&amp;);
template&lt;typename T&gt;
  oXDR_Stream&amp; operator&lt;&lt;(oXDR_Stream&amp;, 
    const std::vector&lt;T&gt;&amp;);
template&lt;typename T&gt;
  iXDR_Stream&amp; operator&gt;&gt;(iXDR_Stream&amp;, 
    std::vector&lt;T&gt;&amp;);
</pre>

<p>You will note that I switched from a <b>vector&lt;unsigned char&gt;</b> to a <b>basic_string&lt;unsigned char&gt;</b> as the object to read/write opaque data to/from. I discovered that the <b>string</b> interface was much more useful for manipulating a chunk of opaque data than the <b>vector</b> interface.</p> 
<p>I also changed some of the member function names. Now, instead of:</p> 

<pre>
put
vput
get
vget
</pre>

<p>to encode/decode opaque data, I have:</p>

<pre>
put_opaque
vput_opaque
get_opaque
vget_opaque
</pre>

<p>I did this primarily for safety and clarity. In ordinary IOStreams, the <b>put</b>/<b>get</b> functions operate on arrays of the underlying character type. For an <b>XDR_Stream</b>, this would correspond to an array of <b>XDR_Char</b>s. The opaque data functions read and write from raw character buffers. I decided that it might be confusing at some point to have the opaque data functions have the same names as what might be expected for <b>XDR_Char</b> strings.</p>

<p>Finally, I also made a first pass at adding error handling. It turned out that the original version of <b>XDR_Stream</b> actually worked fairly well without error handling. The binary nature of the XDR protocol eliminates most possible failure modes that ordinary IOStreams have to check. Nevertheless, some error handling is obviously necessary. One of the primary reasons that I derived <b>XDR_Stream</b> from <b>std::basic_ios</b> was to have access to the <b>iostate</b> information that <b>basic_ios</b> maintains. The <b>XDR_Stream</b> code now incorporates basic error checking and sets the <b>iostate</b> accordingly.</p>


<H3><FONT COLOR="#000080">Using XDR_Stream</FONT></H3>

<p>One reader wrote to me and asked how using an <b>XDR_Stream</b> was simpler than using the <b>xdr_xxx</b> function libraries. On the one hand, I guess this is just a matter of opinion &#151; it usually feels easier to use what you already know than to learn something new. On the other hand, I know that I started looking seriously at XDR as a protocol for some high performance data transmission stuff that I needed to do primarily because I now had the library available. The underlying <b>xdr_xxx</b> libraries were always available, but the <b>XDR_Stream</b> class just seemed to make the protocol much more approachable &#151; if that makes any sense. </p> 
<p>Let me make a (hopefully brief) side note. In my experience, I have found that when it comes to being accessible, functionality falls into several categories. Obviously, the most accessible functions are built into the programming language itself. These functions fall into the first category. This can range from something a simple as having <b>string</b> be a built-in type, to the facilities for multitasking. The second category contains functions that are part of the standard library of the language in use. Personally, I tend to lump these two categories together. Is &quot;new&quot; (or <b>malloc</b>) a library function or a built-in operator? As a result, I am firmly in the &quot;put it in the library, if you have a choice&quot; camp. Not everyone feels the same way. Clearly, most programmers are less familiar with the details of their standard library than they are with their programming language, so you can make the case that if you really want something used, you have to put it into the language.  These first two categories are overwhelmingly the most important. I think it is safe to say that there are an awful lot of professional programmers out there that do not know much beyond these two categories. </p>
<p>The third category is those libraries that are distributed with the development environment itself. Examples of these are Microsoft's Foundation Classes and the Rogue Wave Library. A lot of people apparently think these are actually part of the standard library. </p> 
<p>The fourth category is standard APIs that are widely supported on different platforms. Certain POSIX APIs, such as Pthreads, and the X-Window APIs are good examples of this. I would say that the XDR API falls into this category. </p> 
<p>While there are probably a lot of people who know the <b>xdr_xxx</b> functions, it is also safe to say that most programmers do not eagerly set out to learn APIs in the fourth category or greater. No matter what the subject area, such APIs always have some quirks. First you have to learn the naming convention (e.g., <b>xdr_xxx</b>). Does the library have to be &quot;initialized&quot; before it can be used? What do the return values mean (is zero success or failure)? Even if the API is well designed and consistent, there is always some learning curve. Ordinarily, something like my <b>XDR_Stream</b> library would fall even lower down the hierarchy as a local utility library. But because the library is modeled on the IOStream library that is part of the standard library, I feel that moves the accessibility way up the scale. There is also the fact that the library is now a C++ class library instead of a C API. I feel that these two factors work together to make learning and using the <b>XDR_Stream</b> library much easier than the <b>xdr_xxx</b> functions.</p> 
<p>In any case, I will hopefully show what I mean in some of the examples that follow.</p>

<H3><FONT COLOR="#000080">A Concrete XDR_Stream</FONT></H3>

<p>First, just to make things realistic, let me present a set of concrete <b>XDR_Stream</b> classes (<a href="list1.htm">Listing 1</a>). These classes each take a pointer to an existing <b>streambuf</b> as an argument. In this way, I can effectively &quot;wrap&quot; an <b>XDR_Stream</b> around another stream. The existing <b>streambuf</b> can come from a standard stream such as a file stream, a string stream, or some user-defined <b>streambuf</b> such as a socket stream. Obviously, the latter is very useful when using an <b>XDR_Stream</b> as a communication protocol. </p> 
<p>For most of the discussion that follows, I will be using a simple example: a little address database. The primary record in this collection is a <b>Contact</b>. (Please note that for expediency I do not show the qualifications for <b>namespace</b>.)</p> 

<pre>
struct Contact {
  string  name;
  Address   addr;
  string  phone;
};
</pre>

<p>where the <b>Address</b> portion is:</p>

<pre>
struct Address {
  string  street1;
  string  street2;
  string  city;
  char    state[2];
  char    zip[5];
};
</pre>

<H3><FONT COLOR="#000080">String issues</FONT></H3>

<p>Now suppose that I want to write the XDR inserter and extractor for a <b>Contact</b>. First cut might look like this:</p>

<pre>
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const Contact&amp; obj) {
  oxs &lt;&lt; obj.name;
  oxs &lt;&lt; obj.addr;
  oxs &lt;&lt; obj.phone;
  return oxs;
}
</pre>

<p>and</p>

<pre>
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp; ixs, Contact&amp; obj) {
  ixs &gt;&gt; obj.name;
  ixs &gt;&gt; obj.addr;
  ixs &gt;&gt; obj.phone;
  return ixs;
}
</pre>

<p>For unrepentant APL programmers, these can be reduced to:</p>

<pre>
return oxs &lt;&lt; obj.name 
           &lt;&lt; obj.addr 
           &lt;&lt; obj.phone;
</pre>

<p>and</p>

<pre>
return ixs &gt;&gt; obj.name 
           &gt;&gt; obj.addr 
           &gt;&gt; obj.phone;
</pre>

<p>You cannot get much simpler than that. If we describe <b>Contact</b> in XDR's notational language, it looks almost exactly like it is coded:</p>

<pre>
struct Contact {
  string   name&lt;&gt;;
  Address  addr;
  string   phone&lt;&gt;;
);
</pre>

<p>The corresponding functions for <b>Address</b> are only a little more complicated. Before we can write the functions for <b>Address</b> however, we have to decide how we want to encode the two fixed-length character arrays. As I mentioned in my previous column, XDR has no concept of a <b>char</b> as a fundamental type &#151; a character is considered to be a very short integer. XDR also has no concept of a fixed-length string. So if we want to encode the arrays as arrays in XDR, they have to be encoded as an array of integers:</p> 

<pre>
int  state[2];
int  zip[5];
</pre>

<p>Obviously, since each character is going to be encoded as four bytes, this is pretty wasteful. Alternatively, the data can be represented as a fixed-size chunk of opaque data:</p> 

<pre>
opaque  state[2];
opaque  zip[5];
</pre>

<p>This will encode the data in the most optimal way for storage. Unfortunately, it now places the burden of doing any necessary data conversion on the application program. If you only work in an ASCII world, this might be acceptable to you, but I work almost daily with platforms that still use EBCDIC. One of the advantages of using a protocol like XDR is that it is responsible for handling such conversions when they are necessary. As a result, I choose to encode the fixed-sized character arrays as XDR strings. The XDR description of <b>Address</b> is:</p> 

<pre>
struct Address {
  string  street1&lt;&gt;;
  string  street2&lt;&gt;;
  string  city&lt;&gt;;
  string  state&lt;2&gt;;
  string  zip&lt;5&gt;;
};
</pre>

<p>This shows that <b>state</b> can be only two characters in length, and <b>zip</b> a maximum of five. With this decided, writing the corresponding <b>XDR_Stream</b> functions becomes straightforward:</p>

<pre>
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const Address&amp; obj) {
  oxs &lt;&lt; obj.street1 &lt;&lt; obj.street2 &lt;&lt; obj.city;
  oxs &lt;&lt; string(obj.state, sizeof(obj.state));
  oxs &lt;&lt; string(obj.zip, sizeof(obj.zip));
  return oxs;
}
</pre>

<p>The extractor is only slightly more complicated:</p>

<pre>
iXDR_Stream&amp; operator&gt;&gt;(iXDR_Stream&amp; ixs, Address&amp; obj) {
  ixs &gt;&gt; obj.street1 &gt;&gt; obj.street2 &gt;&gt; obj.city;
  string str;
  ixs &gt;&gt; str;   
  str.copy(obj.state, sizeof(obj.state));
  ixs &gt;&gt; str;   
  str.copy(obj.zip, sizeof(obj.zip));
  return ixs;
}
</pre>

<p>Please note I am not considering errors here. The <b>XDR_Stream</b> itself, like any IOStream, will (or should) reject attempts to insert or extract items when the stream is not in a good state. I will admit that a production version of the above should, at the very least, construct and test a sentry object before attempting any operations. Furthermore, the <b>Address</b> extractor might want to verify that exactly two characters were read for the state, and five for the zip code. </p> 
<p>Now, at about this point, I realized that just because XDR does not have the concept of a fixed-size string, there is no reason that my <b>XDR_Stream</b> should not support an interface for such. With this in mind, I added the following two member functions:</p>

<pre>
// output function
oXDR_Stream&amp; vput_string
  (const char* s, size_t n);
// input function
size_t vget_string
  (char* s, size_t n);
</pre>

<p>I named the functions <b>vput</b>/<b>vget</b> to be consistent with the naming convention I had already used for variable-length arrays and opaque data.</p> 
<p>I briefly considered giving my functions the semantics of the C library <b>strncpy</b> function. In other words, on output, the <b>vput_string</b> function would copy characters into the stream until either <b>n</b> characters had been copied, or until the next character in <b>s</b> was a null. On input, my thought was that if the actual length of the string in the XDR stream was less than the size of the buffer (as specified by <b>n</b>), then <b>vget_string</b> could terminate the resulting buffer with a null character. After some thought, I decided that this was not a good idea. (I warned you that I was going to give you an in-depth look at my thinking as I evolved the library interface.)</p> 
<p>In the example above, I used the <b>string</b> member function <b>copy</b>. This function takes a pointer to a character buffer, the size of the buffer, and an optional starting position within the string (defaults to zero). It copies characters from the string into the buffer until it either runs out of characters or it runs out of buffer. Simple and safe and the appropriate way to set the values of <b>state</b> and <b>zip</b> in the extraction function. (I have to note that <b>copy</b> is probably the most underutilized <b>string</b> member function. Even people that seem to use <b>string</b> a lot often do not even know that it exists.) </p> 
<p>The problem with <b>copy</b> is that it does not null terminate the buffer after copying the characters. Since <b>copy</b> returns the actual number of characters it copies, writing the code to null terminate the buffer is trivial if it is necessary, but it is just one more thing that has to be remembered and done. Many times I have used <b>copy</b> and been a little annoyed that it did not null terminate the buffer for me. In fact, on more than one occasion I have chosen to write something like:</p>

<pre>
strncpy(s, str.c_str(), sizeof(s));
</pre>

<p>instead of </p>

<pre>
s[ str.copy(s, sizeof(s)-1) ] = '\0';
</pre>

<p>because the former seems like a simpler way of getting a null-terminated string into a character array. The problem with the former is that it is not guaranteed to null terminate the string. It only works if the array is larger than the number of characters in <b>str</b>. Otherwise, <b>strncpy</b> will simply fill up the array with <b>n</b> characters. So, while I might find the behavior of string's <b>copy</b> function annoying because I have to do the null termination myself, it is guaranteed that I would find the alternative even more annoying. </p>
<p>In order for <b>copy</b> to guarantee that the array will always be null terminated, it would have to only copy up to <b>n-1</b> characters. This is the way the <b>basic_istream</b> functions that extract into character arrays work. This is well-documented (and logical) behavior, but it always drives me nuts. If I want to extract four characters from a stream (for example a time in military format) into an array of type <b>char[4],</b> then I have to remember to do:</p> 

<pre>
is.read(tmstr, 4);
</pre>

<p>I cannot do:</p>

<pre>
is &gt;&gt; setw(4) &gt;&gt; tmstr;
</pre>

<p>nor</p>

<pre>
is.get(tmstr, 4);
</pre>

<p>Either of the latter only read three characters into <b>tmstr</b>. But they do guarantee that those three characters are null terminated.</p>
<p>The string <b>copy</b> member function does not worry about null terminating the resulting buffer. And I decided that my <b>vget_string</b> function would not either.</p>
<p>With the addition of these two functions to the <b>XDR_Stream</b> interface, the inserter and extractor for <b>Address</b> becomes:</p>

<pre>
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const Address&amp; obj) {
  oxs &lt;&lt; obj.street1 &lt;&lt; obj.street2 &lt;&lt; obj.city;
  oxs.vput_string(obj.state, sizeof(obj.state));
  oxs.vput_string(obj.zip, sizeof(obj.zip));
  return oxs;
}
</pre>

<p>and</p>

<pre>
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp; ixs, Address&amp; obj) {
  ixs &gt;&gt; obj.street1 &gt;&gt; obj.street2 &gt;&gt; obj.city;
  long len = ixs.vget_string(obj.state, sizeof(obj.state));
  assert(len == sizeof(obj.state));
  len = ixs.vget_string(obj.zip, sizeof(obj.zip));
  assert(len == sizeof(obj.zip));
  return ixs;
}
</pre>

<p>You will note that the XDR description of <b>Address</b> did not change. I just use a different interface for encoding the two strings: <b>state</b> and <b>zip</b>. Again, the error handling is probably not acceptable for true production code.</p>

<H3><FONT COLOR="#000080">Pointers</FONT></H3>

<p>With a slightly improved string interface, I turned my attention to what I could/should do to make <b>XDR_Stream</b> more useful as an object persistence mechanism. I have to explain that my attitude towards simple object persistence in one of <i>mutual assistance</i>. The persistence mechanism provides some facilities, and the client then uses these facilities to actually do the persistence. Stated another way, I expect that the client will have to write some code, and maybe change some classes, in order to save and restore the objects. On the one hand, this gives the client more control, but it does mean that persistence has to be designed into the class and cannot just be added later.</p> 
<p>When it comes to extra facilities needed in <b>XDR_Stream</b> to assist in saving and restoring objects, I am basically talking about dealing with pointers. Up to this point, <b>XDR_Stream</b> has the same philosophy toward pointers as other IOStreams classes: in other words it treats them as synonyms for arrays, but otherwise nothing special. This is fine if pointers are nothing but synonyms for arrays, but that is not all they are used for. More often than not, a pointer represents something in dynamically allocated memory. So far, <b>XDR_Stream</b> has taken the same approach to dynamic memory as IOStreams: allocating client objects is the client's responsibility. I decided that this was not sufficient if I wanted to build an object persistence mechanism around an <b>XDR_Stream</b>.</p>
<p>Trying to look at things systematically, I identified four different reasons for pointers to be used in a design:</p>

<OL>
<LI>As a reference to a array whose size is known only at run time</LI>
<LI>For something that was optional</LI>
<LI>When reference semantics are actually required</LI>
<LI>For a polymorphic object</LI>
</OL>

<p>Each of these uses has some impact on the evolution of <b>XDR_Stream</b>s.</p>

<H3><FONT COLOR="#000080">Dynamically Sized Arrays</FONT></H3>

<p>XDR has the concept of both fixed- and variable-sized arrays of arbitrary data types. It also has the concept of fixed- and variable-sized opaque data, and of variable-sized character strings. In C/C++, variable-sized data is often represented by a pointer to an array allocated from the free store. It certainly seems unacceptable to have to allocate an array of the maximum possible size in order to read in variable-length data from an <b>XDR_Stream</b>.</p> 
<p>The simplest solution to this problem is to use the standard library containers instead of pointers. In fact, in the previous column, I noted that since an <b>iXDR_Stream</b> did not have any provision to pass in a null pointer and have the function allocate an array of the correct size, using the standard library containers was the only way to avoid having to allocate an array of the maximum size. </p> 

<p>The following extraction functions work with standard library containers.</p>

<pre>
operator&gt;&gt;
  (iXDR_Stream&amp;, std::vector&lt;T&gt;&amp;);
operator&gt;&gt;
  (iXDR_Stream&amp;, std::basic_string&lt;unsigned char&gt;&amp;);
operator&gt;&gt;
  (iXDR_Stream&amp; ixs, std::string&amp;);
</pre>

<p>The first deals with variable-length arrays, the second with variable-length opaque data, and the third with variable-length strings. </p>
<p>Unfortunately, I decided that I couldn't tolerate my own arrogance in this case. I could not justify supporting only the standard library containers for this functionality. In effect, I was dictating one design solution.</p>
<p>To provide a concrete example, suppose that our <b>Address struct</b> is changed to:</p>

<pre>
struct Address {
  char*  street1;
  char*  street2;
  char*  city;
  char   state[2];
  char   zip[5];
};
</pre>

<p>For variable-length arrays and opaque data, there is a simple workaround to the absence of functionality for having an <b>XDR_Stream</b> allocate the array or buffer for the client. As I mentioned last column, the client can read the length field as an integer, allocate the appropriate-sized array, and then read the data using the API for fixed-sized data. This means it is possible to easily create non-member functions that provided the capability. Since XDR does not have the concept of fixed-sized strings, creating a function to handle this case requires reading the string as opaque data and then doing any necessary character conversion (note that the <b>vget_string</b> function I added above still expects to extract the length field of the string as part of its operation). After using <b>XDR_Stream</b> for a little while, I decided that this functionality was useful enough to be made a part of <b>XDR_Stream</b>'s regular interface. </p> 
<p>First, I thought seriously about just enhancing the existing <b>vget</b> functions so that instead of taking a pointer and a length, they would take reference to a pointer and an optional length. If the reference was to a null pointer, then the function would allocate the appropriate buffer on behalf of the client. This has the advantage that a minimum of new signatures are added to <b>iXDR_Stream</b> interface, but in the end I rejected this approach. It seemed to be mixing functionality a little too much. </p> 
<p>What I mean is that, on the one hand, a lot of variable-length data types do not specify a maximum length. Therefore I wanted my API to reflect this. On the other hand, if a client buffer is used, I always want the size of the buffer to be specified. So,</p>

<pre>
vget_array(buf);
</pre>

<p>should be an acceptable call when <b>buf</b> is a null pointer and no maximum size is specified, but </p>

<pre>
vget_array(buf, 1024);
</pre>

<p>should be required when <b>buf</b> is not a null pointer.</p>
<p>Since I cannot have both of the above, I decided to add three signatures to <b>iXDR_Stream</b>. Note that these are non-member functions:</p>

<pre>
pair&lt;unsigned char*, size_t&gt; vget_opaque
  (iXDR_Stream&amp;, size_t n = -1);
template&lt;class T&gt; pair&lt;T*, ptrdiff_t&gt; vget_array
  (iXDR_Stream&amp;, ptrdiff_t n = -1);
pair&lt;char*, size_t&gt; vget_string
  (iXDR_Stream&amp;, size_t n = -1);
</pre>

<p>For the return value, I borrowed an example in the standard library (<b>get_temporary_buffer</b> in header &lt;<b>memory</b>&gt;). The returned value is a pair with the first value the pointer to the allocated array, and the second value the number of elements in the array. The optional argument to each function specifies the maximum size of the array to allocate. If this argument is -1  (default), there is no maximum limit and the function attempts to allocate an array of whatever size is specified by the data in the stream. Upon return, the client becomes responsible for ownership of the array. The array must be freed by calling <b>delete[]</b> on the returned pointer.</p> 
<p>Note that the problem of C-style strings being null terminated rears its ugly head yet again. Whereas I decided that the <b>vget_string</b> member function would never null terminate the string copied into the array, the <b>vget_string</b> non-member function works just the opposite, it always null terminates the resulting string. I do not like this kind of inconsistency, but the alternative is worse &#151; at least for me. </p> 
<p>Note that even though the resulting string returned by this version of <b>vget_string</b> is null terminated, I decided to keep the return value the same as for the other signatures. This allows for the possibility that a string might have embedded null characters, and it provides a little added jog to the memory that freeing the resulting array is now the responsibility of the client.</p> 
<p>With these changes, the encode and decode operators for <b>Address</b> now look like:</p>

<pre>
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const Address&amp; obj) {
  oxs &lt;&lt; obj.street1 &lt;&lt; obj.street2 &lt;&lt; obj.city;
  oxs.vput_string(obj.state, sizeof(obj.state));
  oxs.vput_string(obj.zip, sizeof(obj.zip));
  return oxs;
}
</pre>

<p>and</p>

<pre>
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp; ixs, Address&amp; obj) {
  delete[] obj.street1;  obj.street1 = vget_string(ixs).first;
  delete[] obj.street2;  obj.street2 = vget_string(ixs).first;
  delete[] obj.city;     obj.city  = vget_string(ixs).first;
  long len = ixs.vget_string(obj.state, sizeof(obj.state));
  assert(len == sizeof(obj.state));
  len = ixs.vget_string(obj.zip, sizeof(obj.zip));
  assert(len == sizeof(obj.zip));
  return ixs;
}
</pre>

<p>You will note that the encode function did not change, only the decoder.</p>

<H3><FONT COLOR="#000080">Optional Data</FONT></H3>

<p>Another common use for pointers is when something is optional. In this case, the pointer acts as both a flag to indicate the absence or presence of the data, as well as providing the reference to the data when it is present.</p>
<p>It turns out that the XDR notation contains the concept of optional data, and it even uses the C pointer syntax to describe it. In our example, let us suppose that the address portion of a <b>Contact</b> is optional:</p>

<pre>
struct Contact {
  std::string  name;
  Address*     addr;
  std::string  phone;
};
</pre>

<p>The XDR description for this looks almost exactly like the code.</p>

<pre>
struct Contact {
  string   name&lt;&gt;;
  Address  *addr;
  string   phone&lt;&gt;;
);
</pre>

<p>When optional data is encoded by XDR, it is treated like a variable-length array with a maximum possible length of one. This is equivalent to:</p>


<pre>
  Address  addr&lt;1&gt;;
</pre>

<p>In the stream, the length field is either a zero, and no data follows the length, or it is one and one data element is encoded in the stream.</p>
<p>I thought about just leaving this up to the user to test the pointer and do the appropriate encoding. In the above case, we could have the statement:</p>

<pre>
oxs.vput_array(addr, (addr ? 1 : 0));
</pre>

<p>Unfortunately, I found two potential problems with this. First, I thought that it was too easy to forget that the null case must be encoded also and write something like:</p>

<pre>
if (addr) oxs.vput_array(addr, 1);
</pre>

<p>The more subtle problem is how to decode the data. It might be assumed that:</p>

<pre>
addr = vget_array(ixs, 1).first;
</pre>

<p>would handle the situation, and indeed it will &#151; almost. Since C++ does not support zero-length arrays, the <b>vget_array</b> function will have to return a null pointer if the array length in the stream is zero. Fine, so far, but if the data is present in the stream, then <b>vget_array</b> will allocate an array to hold the data by doing:</p> 

<pre>
T* t = new T[1];
</pre>
 
<p>Since the pointer was allocated by <b>new[],</b> it has to be deallocated by calling <b>delete[].</b> This is probably not what the destructor for <b>Contact</b> is designed to do. A lot of programmers might figure that this is not really an issue. After all, the array form of <b>delete</b> is primarily to tell the compiler that it has to invoke the destructor more than once, and in this case, once is enough. Unfortunately, the Standard is clear that if you do not use the same form for <b>new</b> and <b>delete</b>, you have undefined behavior. This type of undefined behavior can be a source of very subtle bugs in the future, so it is always better to avoid it. For that reason, I decided to add two more non-member functions to the interface.</p> 

<pre>
template&lt;class T&gt; oXDR_Stream& put_optional
  (oXDR_Stream&amp;, const T* x);
template&lt;class T&gt; T* get_optional
  (iXDR_Stream&amp;)
</pre>

<p>Using these on my example yields:</p>

<pre>
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const Contact&amp; obj) {
  oxs &lt;&lt; obj.name;
  put_optional(oxs, obj.addr);
  oxs &lt;&lt; obj.phone;
  return oxs;
};
</pre>

<p>and</p>

<pre>
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp; ixs, Contact&amp; obj) {
  ixs &gt;&gt; obj.name;
  obj.addr = get_optional&lt;Address&gt;(ixs);
  ixs &gt;&gt; obj.phone;
  return ixs;
}
</pre>

<p>With these changes, I felt that <b>XDR_Stream</b>s were really starting to be truly useful. Up to this point, all the changes were helpful whether the <b>XDR_Stream</b> was being used for communications or anything else. In the next column, I will talk about some enhancements that I added to support reference semantics and finally support for polymorphic object encoding/decoding.  As you will see, these enhancements fall outside the XDR protocol specification.</p>


<H3><FONT COLOR="#000080">Reference</FONT></H3>

<p><a name="1"></a>[1]  Jack W. Reeves. " The (B)Leading Edge: Creating a Whole New Stream Class, " <i>C/C++ User's Journal C++ Experts Forum</i>, July 2001, &lt;http://www.cuj.com/experts/1907/reeves.htm&gt;.</p>


<p><i><B>Jack W. Reeves</b> is an engineer and consultant specializing in object-oriented software design and implementation. His background includes Space Shuttle simulators, military CCCI systems, medical imaging systems, financial data systems, and numerous middleware and low-level libraries. He currently is living and working in Europe and can be contacted via <b>jack_reeves@bleading-edge.com</b>.</i></p>

<h4><a href="../../../source/2001/sep01/reeves.zip"></a></h4>

</BLOCKQUOTE></BODY></HTML>
