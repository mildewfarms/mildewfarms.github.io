<HTML>   
     <HEAD>

<TITLE>February 2001 C++ Experts Forum/Generic&lt;Programming&gt;</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.02/tocfeb.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Generic&lt;Programming&gt;: volatile &#151; Multithreaded Programmer’s Best Friend
Volatile-Correctness or How to Have Your Compiler Detect Race Conditions for You</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrei Alexandrescu</FONT></H3>

<HR>
<BLOCKQUOTE>

<P>I don't want to spoil your mood, but this column addresses the dreaded topic of multithreaded programming. If &#151; as the previous installment of Generic&lt;Programming&gt; says &#151; exception-safe programming is hard, it's child's play compared to multithreaded programming.<P>
<P>Programs using multiple threads are notoriously hard to write, prove correct, debug, maintain, and tame in general. Incorrect multithreaded programs might run for years without a glitch, only to unexpectedly run amok because some critical timing condition has been met.<P>
<P>Needless to say, a programmer writing multithreaded code needs all the help she can get. This column focuses on race conditions &#151; a common source of trouble in multithreaded programs &#151; and provides you with insights and tools on how to avoid them and, amazingly enough, have the compiler work hard at helping you with that.<P>

<H3><FONT COLOR="#000080">Just a Little Keyword</FONT></H3>

<P>Although both C and C++ Standards are conspicuously silent when it comes to threads, they do make a little concession to multithreading, in the form of the <B>volatile</B> keyword. <P>
<P>Just like its better-known counterpart <B>const</B>, <B>volatile</B> is a type modifier. It's intended to be used in conjunction with variables that are accessed and modified in different threads. Basically, without <B>volatile</B>, either writing multithreaded programs becomes impossible, or the compiler wastes vast optimization opportunities.  An explanation is in order.<P>
<P>Consider the following code:<P>

<pre>
class Gadget
{
public:
    void Wait()
    {
        while (!flag_)
        {
            Sleep(1000); // sleeps for 1000 milliseconds
        }
    }
    void Wakeup()
    {
        flag_ = true;
    }
    ...
private:
    bool flag_;
};
</pre>

<P>The purpose of <B>Gadget::Wait</B> above is to check the <B>flag_</B> member variable every second and return when that variable has been set to <B>true</B> by another thread. At least that's what its programmer intended, but, alas, <B>Wait</B> is incorrect.<P>
<P>Suppose the compiler figures out that <B>Sleep(1000)</B> is a call into an external library that cannot possibly modify the member variable <B>flag_</B>. Then the compiler concludes that it can cache <B>flag_</B> in a register and use that register instead of accessing the slower on-board memory. This is an excellent optimization for single-threaded code, but in this case, it harms correctness: after you call <B>Wait</B> for some <B>Gadget</B> object, although another thread calls <B>Wakeup</B>, <B>Wait</B> will loop forever. This is because the change of <B>flag_</B> will not be reflected in the register that caches <B>flag_</B>. The optimization is too ... optimistic.<P>
<P>Caching variables in registers is a very valuable optimization that applies most of the time, so it would be a pity to waste it. C and C++ give you the chance to explicitly disable such caching. If you use the <B>volatile</B> modifier on a variable, the compiler won't cache that variable in registers &#151; each access will hit the actual memory location of that variable. So all you have to do to make <B>Gadget</B>'s <B>Wait</B>/<B>Wakeup</B> combo work is to qualify <B>flag_</B> appropriately:<P>

<pre>
class Gadget
{
public:
    ... as above ...
private:
    volatile bool flag_;
};<P>
</pre>

<P>Most explanations of the rationale and usage of <B>volatile</B> stop here and advise you to <B>volatile</B>-qualify the primitive types that you use in multiple threads. However, there is much more you can do with <B>volatile</B>, because it is part of C++'s wonderful type system.<P>

<H3><FONT COLOR="#000080">Using volatile with User-Defined Types</FONT></H3>

<P>You can <B>volatile</B>-qualify not only primitive types, but also user-defined types. In that case, <B>volatile</B> modifies the type in a way similar to <B>const</B>. (You can also apply <B>const</B> and <B>volatile</B> to the same type simultaneously.)<P>
<P>Unlike <B>const</B>, <B>volatile</B> discriminates between primitive types and user-defined types. Namely, unlike classes, primitive types still support all of their operations (addition, multiplication, assignment, etc.) when <B>volatile</B>-qualified. For example, you can assign a non-<B>volatile</B> <B>int</B> to a <B>volatile</B> <B>int</B>, but you cannot assign a non-<B>volatile</B> object to a <B>volatile</B> object.<P>
<P>Let's illustrate how <B>volatile</B> works on user-defined types on an example.<P>

<pre>
class Gadget
{
public:
    void Foo() volatile;
    void Bar();
    ...
private:
    String name_;
    int state_;
};
...
Gadget regularGadget;
volatile Gadget volatileGadget;
</pre>

<P>If you think <B>volatile</B> is not that useful with objects, prepare for some surprise.<P>

<pre>
volatileGadget.Foo(); // ok, volatile fun called for
                      // volatile object<P>
regularGadget.Foo();  // ok, volatile fun called for
                      // non-volatile object
volatileGadget.Bar(); // error! Non-volatile function called for
                      // volatile object!
</pre>

<P>The conversion from a non-qualified type to its <B>volatile</B> counterpart is trivial. However, just as with <B>const</B>, you cannot make the trip back from <B>volatile</B> to non-qualified. You must use a cast:<P>

<pre>
Gadget&amp; ref = const_cast&lt;Gadget&amp;&gt;(volatileGadget);
ref.Bar(); // ok
</pre>

<P>A <B>volatile</B>-qualified class gives access only to a subset of its interface, a subset that is under the control of the class implementer. Users can gain full access to that type's interface only by using a <B>const_cast</B>. In addition, just like <B>const</B>ness, <B>volatile</B>ness propagates from the class to its members (for example, <B>volatileGadget.name_</B> and <B>volatileGadget.state_</B> are <B>volatile</B> variables).<P>

<H3><FONT COLOR="#000080">volatile, Critical Sections, and Race Conditions</FONT></H3>

<P>The simplest and the most often-used synchronization device in multithreaded programs is the mutex. A mutex exposes the <B>Acquire</B> and <B>Release</B> primitives. Once you call <B>Acquire</B> in some thread, any other thread calling <B>Acquire</B> will block. Later, when that thread calls <B>Release</B>, precisely one thread blocked in an <B>Acquire</B> call will be released. In other words, for a given mutex, only one thread can get processor time in between a call to <B>Acquire</B> and a call to <B>Release</B>. The executing code between a call to <B>Acquire</B> and a call to <B>Release</B> is called a <I>critical section</I>. (Windows terminology is a bit confusing because it calls the mutex itself a critical section, while &quot;mutex&quot; is actually an inter-process mutex. It would have been nice if they were called thread mutex and process mutex.)<P>
<P>Mutexes are used to protect data against race conditions. By definition, a race condition occurs when the effect of more threads on data depends on how threads are scheduled. Race conditions appear when two or more threads compete for using the same data. Because threads can interrupt each other at arbitrary moments in time, data can be corrupted or misinterpreted. Consequently, changes and sometimes accesses to data must be carefully protected with critical sections. In object-oriented programming, this usually means that you store a mutex in a class as a member variable and use it whenever you access that class' state.<P>
<P>Experienced multithreaded programmers might have yawned reading the two paragraphs above, but their purpose is to provide an intellectual workout, because now we will link with the <B>volatile</B> connection. We do this by drawing a parallel between the C++ types' world and the threading semantics world.<P>

<UL>
<LI><B>Outside</B> a critical section, any thread might interrupt any other at any time; there is no control, so consequently variables accessible from multiple threads are <B>volatile</B>. This is in keeping with the original intent of <B>volatile</B> &#151; that of preventing the compiler from unwittingly caching values used by multiple threads at once.</LI>
<LI><B>Inside</B> a critical section defined by a mutex, only <I>one</I> thread has access. Consequently, <I>inside a critical section, the executing code has single-threaded semantics</I>. The controlled variable is not <B>volatile</B> anymore &#151; you can remove the <B>volatile</B> qualifier.</LI></UL>

<P>In short, data shared between threads is conceptually <B>volatile</B> outside a critical section, and non-<B>volatile</B> inside a critical section.<P>
<P>You enter a critical section by locking a mutex. You remove the <B>volatile</B> qualifier from a type by applying a <B>const_cast</B>. If we manage to put these two operations together, <I>we create a connection between C++'s type system and an application's threading semantics</I>. We can make the compiler check race conditions for us.<P>

<H3><FONT COLOR="#000080">LockingPtr</FONT></H3>

<P>We need a tool that collects a mutex acquisition and a <b>const_cast</b>. Let's develop a
<b>LockingPtr</b> class template that you initialize with a <B>volatile</B> object <B>obj</B> and a mutex <B>mtx</B>. During its lifetime, a <B>LockingPtr</B> keeps <B>mtx</B> acquired. Also, <B>LockingPtr</B> offers access to the <B>volatile</B>-stripped <B>obj</B>. The access is offered in a smart pointer fashion, through <B>operator-&gt;</B> and <B>operator*</B>. The <B>const_cast</B> is performed inside <B>LockingPtr</B>. The cast is semantically valid because <B>LockingPtr</B> keeps the mutex acquired for its lifetime.<P>
<P>First, let's define the skeleton of a class <B>Mutex</B> with which <B>LockingPtr</B> will work:<P>

<pre>
class Mutex
{
public:
    void Acquire();
    void Release();
    ...    
};
</pre>

<P>To use <B>LockingPtr</B>, you implement <B>Mutex</B> using your operating system's native data structures and primitive functions.<P>
<P><B>LockingPtr</B> is templated with the type of the controlled variable. For example, if you want to control a <B>Widget</B>, you use a <B>LockingPtr</B> <B>&lt;Widget&gt;</B> that you initialize with a variable of type <B>volatile</B> <B>Widget</B>.<P>
<P><B>LockingPtr</B>'s definition is very simple. <B>LockingPtr</B> implements an unsophisticated smart pointer. It focuses solely on collecting a <B>const_cast</B> and a critical section. <P>

<pre>
template &lt;typename T&gt;
class LockingPtr {
public:
   // Constructors/destructors
   LockingPtr(volatile T&amp; obj, Mutex&amp; mtx)
       : pObj_(const_cast&lt;T*&gt;(&amp;obj)),
        pMtx_(&amp;mtx)
   {    mtx.Lock();    }
   ~LockingPtr()
   {    pMtx_-&gt;Unlock();    }
   // Pointer behavior
   T&amp; operator*()
   {    return *pObj_;    }
   T* operator-&gt;()
   {   return pObj_;   }
private:
   T* pObj_;
   Mutex* pMtx_;
   LockingPtr(const LockingPtr&amp;);
   LockingPtr&amp; operator=(const LockingPtr&amp;);
};
</pre>

<P>In spite of its simplicity, <b>LockingPtr</b> is a very useful aid in writing correct multithreaded code. You should define objects that are shared between threads as <B>volatile</B> and never use <B>const_cast</B> with them &#151; always use <B>LockingPtr</B> automatic objects. Let's illustrate this with an example.<P>
<P>Say you have two threads that share a <B>vector&lt;char&gt;</B> object:<P>

<pre>
class SyncBuf {
public:
    void Thread1();
    void Thread2();
private:
    typedef vector&lt;char&gt; BufT;
    volatile BufT buffer_;
    Mutex mtx_; // controls access to buffer_
};
</pre>

<P>Inside a thread function, you simply use a <B>LockingPtr&lt;BufT&gt;</B> to get controlled access to the <B>buffer_</B> member variable:<P>

<pre>
void SyncBuf::Thread1() {
    LockingPtr&lt;BufT&gt; lpBuf(buffer_, mtx_);
    BufT::iterator i = lpBuf-&gt;begin();
    for (; i != lpBuf-&gt;end(); ++i) {
        ... use *i ...
    }
}
</pre>

<P>The code is very easy to write and understand &#151; whenever you need to use <B>buffer_</B>, you must create a <B>LockingPtr&lt;BufT&gt;</B> pointing to it. Once you do that, you have access to <B>vector</B>'s entire interface.<P>
<P>The nice part is that if you make a mistake, the compiler will point it out:<P>

<pre>
void SyncBuf::Thread2() {
    // Error! Cannot access ‘begin' for a volatile object
    BufT::iterator i = buffer_.begin();
    // Error! Cannot access ‘end' for a volatile object
    for (; i != lpBuf-&gt;end(); ++i) {
        ... use *i ...
    }
}
</pre>

<P>You cannot access any function of <B>buffer_</B> until you either apply a <B>const_cast</B> or use <B>LockingPtr</B>. The difference is that <b>LockingPtr</b> offers an <i>ordered</i> way of applying <b>const_cast</b> to volatile variables.<P>
<P><B>LockingPtr</B> is remarkably expressive. If you only need to call one function, you can create an unnamed temporary <B>LockingPtr</B> object and use it directly:<P>

<pre>
unsigned int SyncBuf::Size() {
    return LockingPtr&lt;BufT&gt;(buffer_, mtx_)-&gt;size();
}</pre>

<H3><FONT COLOR="#000080">Back to Primitive Types</FONT></H3>

<P>We saw how nicely <B>volatile</B> protects objects against uncontrolled access and how <B>LockingPtr</B> provides a simple and effective way of writing thread-safe code. Let's now return to primitive types, which are treated differently by <B>volatile</B>.<P>
<P>Let's consider an example where multiple threads share a variable of type <B>int</B>.<P>

<pre>
class Counter
{
public:
    ...
    void Increment() { ++ctr_; }
    void Decrement() { &#151;ctr_; }
private:
    int ctr_;
};
</pre>

<P>If <B>Increment</B> and <B>Decrement</B> are to be called from different threads, the fragment above is buggy. First, <B>ctr_</B> must be <B>volatile</B>. Second, even a seemingly atomic operation such as <B>++ctr_</B> is actually a three-stage operation. Memory itself has no arithmetic capabilities. When incrementing a variable, the processor:<P>

<UL>
<LI>Reads that variable in a register</LI>
<LI>Increments the value in the register</LI>
<LI>Writes the result back to memory</LI></UL>

<P>This three-step operation is called RMW (Read-Modify-Write). During the Modify part of an RMW operation, most processors free the memory bus in order to give other processors access to the memory.<P>
<P>If at that time another processor performs a RMW operation on the same variable, we have a race condition: the second write overwrites the effect of the first.<P>
<P>To avoid that, you can rely, again, on <B>LockingPtr</B>:<P>

<pre>
class Counter
{
public:
    ...
    void Increment() { ++*LockingPtr&lt;int&gt;(ctr_, mtx_); }
    void Decrement() { &#151;*LockingPtr&lt;int&gt;(ctr_, mtx_); }
private:
    volatile int ctr_;
    Mutex mtx_;
};
</pre>

<P>Now the code is correct, but its quality is inferior when compared to <B>SyncBuf</B>'s code. Why? Because with <B>Counter</B>, the compiler will <I>not</I> warn you if you mistakenly access <B>ctr_</B> directly (without locking it). The compiler compiles <B>++ctr_</B> if <B>ctr_</B> is <B>volatile</B>, although the generated code is simply incorrect. The compiler is not your ally anymore, and only your attention can help you avoid race conditions. <P>
<P>What should you do then? Simply encapsulate the primitive data that you use in higher-level structures and use <B>volatile</B> with those structures. Paradoxically, it's worse to use <B>volatile</B> directly with built-ins, in spite of the fact that initially this was the usage intent of <B>volatile</B>!<P>

<H3><FONT COLOR="#000080">volatile Member Functions</FONT></H3>

<P>So far, we've had classes that aggregate <B>volatile</B> data members; now let's think of designing classes that in turn will be part of larger objects and shared between threads. Here is where <B>volatile</B> member functions can be of great help.<P>
<P>When designing your class, you <B>volatile</B>-qualify only those member functions that are thread safe. You must assume that code from the outside will call the <B>volatile</B> functions from any code at any time. Don't forget: <B>volatile</B> equals free multithreaded code and no critical section; non-<B>volatile</B> equals single-threaded scenario or inside a critical section.<P>
<P>For example, you define a class <B>Widget</B> that implements an operation in two variants &#151; a thread-safe one and a fast, unprotected one.<P>

<pre>
class Widget
{
public:
    void Operation() volatile;
    void Operation();
    ...
private:
    Mutex mtx_;
};
</pre>

<P>Notice the use of overloading. Now <B>Widget</B>'s user can invoke <B>Operation</B> using a uniform syntax either for <B>volatile</B> objects and get thread safety, or for regular objects and get speed. The user must be careful about defining the shared <B>Widget</B> objects as <B>volatile</B>.<P>
<P>When implementing a <B>volatile</B> member function, the first operation is usually to lock <B>this</B> with a <B>LockingPtr</B>. Then the work is done by using the non-<B> volatile</B> sibling:<P>

<pre>
void Widget::Operation() volatile
{
    LockingPtr&lt;Widget&gt; lpThis(*this, mtx_);
    lpThis-&gt;Operation(); // invokes the non-volatile function
}
</pre>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<P>When writing multithreaded programs, you can use <B>volatile</B> to your advantage. You must stick to the following rules:<P>

<UL><LI>Define all shared objects as <B>volatile</B>.</LI>
<LI>Don't use <B>volatile</B> directly with primitive types.</LI>
<LI>When defining shared classes, use <B>volatile</B> member functions to express thread safety.</LI></UL>

<P>If you do this, and if you use the simple generic component <B>LockingPtr</B>, you can write thread-safe code and worry much less about race conditions, because the compiler will worry for you and will diligently point out the spots where you are wrong.<P>
<P>A couple of projects I've been involved with use <B>volatile</B> and <B>LockingPtr</B> to great effect. The code is clean and understandable. I recall a couple of deadlocks, but I prefer deadlocks to race conditions because they are so much easier to debug.  There were virtually no problems related to race conditions. But then you never know.<P>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>Many thanks to James Kanze and Sorin Jianu who helped with insightful ideas.<p>

<p><i><b>Andrei Alexandrescu</b> is a Development Manager at RealNetworks Inc. (www.realnetworks.com), based in Seattle, WA, and author of the acclaimed book </i>Modern C++ Design<i>. He may be contacted at <b>andrei@metalanguage.com</b>. Andrei is also one of the featured instructors of The C++ Seminar (www.gotw.ca/cpp_seminar).</i></p>

</blockquote></body></html>


