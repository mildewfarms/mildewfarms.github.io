<HTML>   
     <HEAD>
<TITLE>February 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.02/tocfeb.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Access Restrictions</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>
	&copy; Jim Hyslop and Herb Sutter
<P><I>Boom.</I><P>
<P>The distant thundering quickly passed. It was faint, felt more than heard. The excavation teams were at work again.<P>
<P>&quot;I wish...&quot; Jeannine started, then trailed off.<P>
<P>&quot;I know.&quot; I buried my face in my work. After a long time, I added: &quot;I wish I could send mail home too. But the comms should be working again soon.&quot;<P>
<P>&quot;They do work,&quot; Jeannine said.<P>
<P><I>Boom.</I> Another distant explosion.<P>
<P>&quot;Yeah, but while the dome's systems are damaged, it makes sense to reserve them for only emergency traffic. We just aren't being given access, for now. That's reasonable.&quot; My heart wasn't in the words.<P>
<P>There was silence again, for a time. Finally, Jeannine whispered: &quot;Yeah. Well, that's what they say, now isn't it?&quot;<P>
<P>&quot;That's right. It's just temporary access restrictions. I don't like it, either, but surely you don't think they're....&quot; It was my turn to trail off.<P>
<P><I>Boom.</I><P>
<hr>

<P>&quot;<I>Boom.</I>&quot;<P>
<P>That was all the sticky note on my monitor said. Well, that and a filename. I recognized the file &#151; it was a utility class I had added to the project a while back. The note was written in the Guru's distinctive handwriting, but I had no clue what it meant. The Guru wasn't in yet, so I couldn't ask her.<P>
<P>Just then, Wendy, the programmer in the cubicle next to mine, came in and flopped down in her chair. I gophered up, hoping she'd be able to make sense of it. She looked haggard, resting her head on her hands. &quot;You look like you had a rough weekend,&quot; I ventured.<P>
<P>She nodded without looking up. &quot;When I got home Friday, the carbon monoxide detectors were beeping away &#151; turns out the furnace was clogged up. We had to spend the weekend at a friend's house, until it was fixed. I couldn't sleep a wink &#151; I kept wondering what would've happened if we hadn't installed the detectors <a href="#1">[1]</a>.&quot;<P>
<P>&quot;Wow, that was a close call,&quot; I commiserated, making a mental note to double-check my detectors. &quot;Is everyone OK?&quot; Wendy nodded. I decided she needed a distraction, so I mentioned the note to her and asked her what it might mean.<P>
<P>&quot;Wait a minute,&quot; she said. &quot;The Guru left that note on <I>your</I> monitor?&quot; I nodded. &quot;My friend,&quot; she said, &quot;it sounds like you may have just pulled a Bob.&quot;<P>
<P>I was aghast, speechless, at such strong language. &quot;You're joking!&quot; I blanched. Bob was the worst programmer ever, and I had made it my personal mission to thwart him and his poor programming style every opportunity I got.<P>
<P>Wendy shook her head, dead serious. &quot;Nope. He's usually the only one who gets those cryptic notes, and if you got one, then you must've been a very bad boy. Let's have a look at that source file.&quot; She turned to her computer, logged in, and called up the file in question.<P>
<P>I dragged over a chair. &quot;Everything in here looks good to me,&quot; I said, peering over her shoulder.<P>
<P>Wendy jumped slightly &#151; she must have been more stressed than I realized. &quot;It seems OK on a quick glance,&quot; Wendy agreed. &quot;Maybe a diff against the previous revision will give us some clues.&quot; I watched as she used our revision control system to show the difference between the two versions of the file. I was impressed &#151; I was still trying to master the basic checkin/checkout syntax, and here she called up a diff between two revisions in no time at all. I was still trying to sort out the commands Wendy had used when she spoke up.<P>
<P>&quot;Well, here's something, but it's really minor,&quot; she said, pointing to the screen. &quot;You've changed some of the class data members.&quot;<P>
<P>I peered closer at the screen. &quot;Yes, I reworked the implementation slightly. I changed the three separate <B>double</B>s, representing the object's location, into an array of three <B>double</B>s. It made some member functions much more efficient. But the members are all private, see?&quot;<P>

<pre>
class Point
{
private:
    double location[3]; // x, y, z coordinates.

public:
    void setLocation(double x, double y, double z) { 
        location[0]=x; 
        location[1]=y;
        location[2]=z;
   }

    void getLocation(double &amp;x, double&amp; y, double &amp;z) {
        x=location[0]; 
        y=location[1];
        z=location[2];
    }
};</pre>

<P>Then I noticed a blank line at the top of the file that the diff viewer indicated had changed. &quot;Now, why would the viewer highlight that line?&quot; I wondered out loud.<P>
<P>&quot;Probably just white-space changes,&quot; Wendy surmised. &quot;Here, let me set the viewer to ignore white space.&quot; A few keystrokes later, and... the line was still highlighted. I placed the cursor on the line, hit the &quot;End&quot; key &#151; and froze in horror at the sight in front of me. Indented way off to the right, out of normal view, was this statement:<P>

<pre>                                            #define private public</pre>

<P>Wendy and I looked at each other. &quot;<I>Bob!</I>&quot; we chorused.<P>
<P>Bob, as it turned out, was already walking toward us. The Guru wasn't the only one who could show up at the most appropriate moment. &quot;Hey, Junior,&quot; he said, &quot;I just came by to see if you've fixed the problem yet.&quot;<P>
<P>I closed my eyes and counted to ten. Slowly. Then I counted back down to zero. I held up the sticky note: &quot;Do you mean this problem?&quot; I asked sweetly.<P>
<P>&quot;Heh. Yeah, that's the one. Her Weirdness left it on my monitor. When you changed the <B>x, y</B>,<B> </B>and<B> z </B>members to that array, it broke a raft and a half of my code, so I passed it on to you. Fix it, and quit messing things up from now on, will ya.&quot;<P>
<P>&quot;Bob, what's the idea of this <B>#define</B> statement?&quot; I pointed to the offending line.<P>
<P>&quot;Oh, that,&quot; Bob chuckled. &quot;Pretty cool, eh? My code needed direct access to the coordinates. Efficiency, y'know. At first, I just had the <B>#define</B> statement in my own code, but I was using it a lot, so it was easier to add it to your header. I'm doing a lot of number crunching, and I can't afford the overhead of the accessor functions you provided. But then you got rid of the individual <B>double</B>s, for that array. And my code went ‘Boom!'&quot;<P>
<P>&quot;<I>Boom</I>, indeed.&quot; As if on cue, we heard the Guru's voice. We all jumped a little. She used a finger to pointedly move her glasses back up the bridge of her nose. &quot;And that, you purveyor of programming perversions,&quot; she rebuked, &quot;is why I left the sticky note on <I>your</I> monitor. You violated the class's encapsulation by attempting to subvert the access privileges. You violated the One Definition Rule by changing <B>private</B> to <B>public</B> in your code. You must fix your code to use the accessor functions.&quot;<P>
<P>&quot;I already said, I can't afford the overhead of the accessors, dearie,&quot; bristled Bob. &quot;I have to—&quot;<P>
<P>&quot;Silence!&quot; the Guru interrupted. &quot;The accessors are inline and should cause no overhead.&quot; Bob started to protest again, but the Guru headed him off. &quot;However, in order to avoid the root of all evil <a href="#2">[2]</a>, we will create a test harness to demonstrate the actual costs of the accessor functions. Meanwhile, clean up that unseemly code. Then read and meditate on 1 Meyers 20 <a href="#3">[3]</a>.&quot;<P>
<P>Bob grumbled as he left for his cubicle. The Guru simply stood silently until he was gone and then led me back to my own cubicle.<P>
<P>&quot;My apprentice,&quot; she said, her voice soft again, &quot;please write a test harness that will time the cost of direct access, against inline accessors and non-inline accessors. Be sure that the non-inline accessors are in a separate translation unit. While you are at it, an inline <B>operator []</B> would be useful.&quot;<P>
<P>I thought about that for a moment. &quot;You mean like this?&quot; I began writing on my whiteboard:<P>

<pre>
class Point
{
public:
    inline double operator[] (int index)  const {
        return location[index];
     }
};</pre>

<P>&quot;Very good, my apprentice. You have remembered the blessings of const-correctness. But now, write it so that it can serve not only as an accessor, but as a mutator as well. What other benefits can you derive from this function?&quot;<P>
<P>I thought about it for a moment. &quot;You can do bounds checking on the index." I revised the scribbling on the whiteboard:<P>

<pre>
class Point
{
public:
    inline double &amp;operator[] (int index) {
        assert(index &gt;=0 &amp;&amp; index &lt;= 2);
        return location[index];
     }
};</pre>

<P>&quot;Hey, cool!&quot; This, I liked. &quot;The bounds checking has no performance penalty in release mode.&quot;<P>
<P>The Guru nodded. &quot;And,&quot; she added, &quot;with a good optimizing compiler, the compiler should be able to generate code that is as efficient as accessing the members directly, with the added blessings and safety of encapsulation.&quot;<P>
<P>&quot;So,&quot; I mused, &quot;there really is never any reason to have a public data member, is there?&quot;<P>
<P>The Guru paused a moment before answering. &quot;In most cases, no. However, if the class is merely a convenient aggregation of data, with no object being modeled &#151; that is to say, a C-style <B>struct</B> of data with no additional behavior &#151; then it would be reasonable to have all data members public <a href="#4">[4]</a>.<P>
<P>&quot;You can expose private members through accessor and mutator functions &#151; but only if it is really necessary. An excessive amount of <B>Get</B> and <B>Set</B> member functions &#151; including ones that are disguised as <B>operator []</B> &#151; indicates that you are not thinking of the blessings of encapsulation. If your tests indicate that the accessors are providing a substantial run-time penalty, then you can improve the speed by making the accessors inline. Of course, the savings and penalties will vary from compiler to compiler &#151; hence the need for the test harness.&quot;<P>
<P>&quot;I'll get right on it, boss,&quot; I replied cheerfully. She smiled, folded her hands and silently walked away. I sat down to write the test harness. The results, at least on the compiler I was then using, were quite interesting <a href="#5">[5]</a>:<P>

<table border=1>
<tr>
<td>&nbsp;</td>
<td colspan=3>Approximate run-time in milliseconds</td>
</tr>
<tr>
<td>Implementation</td>
<td>Optimizations off</td>
<td>Optimizations on</td>
</tr>
<tr>
<td>1: direct access</td>
<td>1061</td>
<td>251</td>
</tr>
<tr>
<td>2: inline accessor function</td>
<td>1673</td>
<td>240</td>
</tr>
<tr>
<td>3: out-of-line accessor function</td>
<td>1662</td>
<td>1432</td>
</tr>
</table>
<p>
<hr>

<P><I>Boom.</I><P>
<P>&quot;I don't like it,&quot; Jeannine repeated. &quot;They say the dome is damaged because of an accidental internal explosion, so we don't have access to go there, but work goes on in there, and people with higher clearances have been allowed in and they never come out again. They say the long-range comms systems are damaged and are restricted for emergencies only, but the only real effect I can see is that we can't communicate with anybody outside near-Jupiter space.&quot;<P>
<P>&quot;So?&quot;<P>
<P>&quot;I don't like it.&quot;<P>
<P><I>Boom.</I><P>
<P>We said no more for some time, and eventually the distant thundering stopped, but the resulting silence was worse than the faint noise had been. A few minutes later, Jeannine frowned, got up, and left.<P>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<P><a name="1"></a>[1] Note from the authors: this situation actually happened to me (Jim) recently. I urge all readers to install carbon monoxide and smoke detectors and ensure they are well-maintained. I know it's the best investment I've ever made! Contact your local fire prevention office for information and assistance.<P>
<P><a name="2"></a>[2] &quot;Premature optimization is the root of all evil&quot; &#151; Donald Knuth. Depending whom you believe, he said it in one or more of: &quot;Structured Programming with go to Statements&quot; (<I>Computing Surveys</I>, Vol. 6, No. 4, December, 1974, page 268), <I>Literate Programming</I>, or <I>Computer Programming As an Art</I> (1974).<P>
<P><a name="3"></a>[3] Scott Meyers, <I>Effective C++, 2<SUP>nd</SUP> edition</I>, Item 20: &quot;Avoid data members in the public interface&quot; (Addison-Wesley, 1997).<P>
<P><a name="4"></a>[4] C++ FAQ Lite, Marshall Cline, <b>http://www.parashift.com/c++-faq-lite/classes-and-objects.htm#[7.8]</b>.<P>
<P><a name="5"></a>[5] The source code and full details of this test are available on the CUJ website.<P>

<p><i><B>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><B>Herb Sutter</b> is chief technology officer of PeerDirect Inc. and secretary of the ISO/ANSI C++ standards committee. He can be reached at <b>hsutter@peerdirect.com</b>.</i></p>

<h4><a href="../../../source/2001/feb01/hyslop.zip"></a></h4>
</blockquote></body></html>
