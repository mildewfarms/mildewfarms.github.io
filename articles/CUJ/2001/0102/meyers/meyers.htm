<HTML>   
     <HEAD>
<TITLE>February 2001/The New C</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">The New C: Integers, Part 3</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Randy Meyers</FONT></H3>

<BLOCKQUOTE>
<p>At first glance, C99&#146;s new integral types seem to threaten its portability. But a few added headers and typedefs improve the outlook dramatically.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>In my January 2001 column, I discussed how the introduction of 64-bit machines motivated C99 to generalize the rules for integer types and to allow new integer types as extensions. But, C99 did not describe any syntax for naming these new integer types. This seems to put programmers in an awkward position. Your implementation might support additional integer types. You might find such types useful. However, lacking a standardized syntax, it appears that you must learn about implementation-specific extensions to use new integer types, and that such uses automatically eliminate your chances for portability. This month, we see that C99 actually provides a solution to this problem that might even help with related portability problems. Interestingly, the 64-bit machines again thrust the issue before the standards committee.</p>

<H3><FONT COLOR="#000080">Integers and Portability</FONT></H3>
<p>Initially, the vendors of 64-bit hardware and software disagreed wildly about the mapping from C keywords to integer types. While much of the focus was on the sizes of the <B>int</B> and <B>long</B> types, some vendors even wanted to change the size of <B>short</B>. By contemplating changing the mapping to integer types, the 64-bit vendors magnified an old problem in writing portable C. Which keyword should you use when you want an integer of a particular size?</p>
<p>The C89 and C99 Standards do make certain guarantees. For example, <B>short</B> and <B>int</B> are at least a 16-bit integer type, and <B>long</B> is at least a 32-bit integer type. Thus, if you specifically want a 32-bit type, you might be tempted to just use <B>long</B>. However, on most 64-bit machines, <B>long</B> is 64 bits. If this causes problems for you, there is a simple solution. Use a typedef for your type, and change the definition of the typedef when you port your program.</p>
<p>The C committee realized that this simple technique can produce high payoff for little work, and that there was an advantage in standardizing the names of the typedefs. Thus, two new standard headers were added to C99, <B>&lt;stdint.h&gt;</B> and <B>&lt;inttypes.h&gt;</B>. Some C and C++ implementations have been providing these headers for years. If your implementation does not provide them, and they would be useful to you, they are simple enough that you could write your own version of the headers. They are not in ANSI C++98, but they are likely to be part of a future revision.</p>

<H3><FONT COLOR="#000080">Header &lt;stdint.h&gt;</FONT></H3>

<p>The header <B>&lt;stdint.h&gt;</B> defines typedefs for integers of various sizes, macros that expand into the maximum value (and for the signed types, the minimum value) for those types, and a few other utility macros.</p>
<p>Most of the typedefs in the header are named according to the following patterns:</p>

<pre>
int_least</B><I>N</I><B>_t 
uint_least</B><I>N</I><B>_t 
int_fast</B><I>N</I><B>_t 
uint_fast</B><I>N</I><B>_t 
int</B><I>N</I><B>_t 
uint</B><I>N</I><B>_t
</pre>

<p>where <I>N</I> is replaced with a decimal integer giving the size in bits (excluding pad bits) of that integer type. Typically, you will find typedefs defined in the header where <I>N</I> in the above patterns has been replaced by <B>8</B>, <B>16</B>, <B>32</B>, and <B>64</B>, yielding 24 different typedef names. The Standard permits an implementation to define other typedefs in the header fitting the patterns. The typedefs may be defined to be the traditional integer types or any extended integer types supported by the implementation. For example, an implementation supporting 128-bit integers would provide <B>int128_t</B>, <B>uint128_t</B>, and so on.</p>
<p>The above typedef names that start with &quot;<B>u</B>&quot; are typedefs for unsigned types. The typedef names that do not start with &quot;<B>u</B>&quot; are the corresponding signed types. The typedef names break down into three families.</p>
<p>The first family is the types formed from the patterns that contain &quot;<B>least</B>&quot; in their names. These types are at least the specified size in bits given by <I>N</I>, but they might be larger if the hardware makes it necessary. For example, on a 36-bit machine where <B>int</B> was 36 bits and <B>short</B> was 18 bits, the header would declare:</p>

<pre>
typedef short int_least16_t;
typedef int int_least32_t;
typedef short int_least18_t;
typedef int int_least36_t;
</pre>

<p>As we will see below, the first two of these typedefs are required. The last two of these typedefs are the implementation taking advantage of the ability to add extra typedefs to the header for &quot;extra&quot; integer types it supports. The least types are required to be the smallest integer type holding the required number of bits. Thus, the least types are the most space efficient types that can represent integers with the requested number of bits.</p>
<p>The second family is the types formed from the patterns that contain &quot;<B>fast</B>&quot; in their names. Like the least types, these types can represent an integer with the requested number of bits, but the fast types may be as large as necessary to provide efficient computation. Consider a 64-bit machine that can operate on 16-bit integers, but whose operations on 16-bit integers are more expensive than operations on a 32- or 64-bit integer. Assume that <B>short</B> is 16 bits and <B>int</B> is 32-bits on that machine. The header would declare:</p>

<pre>
typedef short int_least16_t;
typedef int int_fast16_t;
</pre>

<p>Both the least and fast types can store all of the bits of a 16-bit integer, but the least types are optimized for space (like a big array of integers) while the fast types are optimized for speed (like a loop index).</p>
<p>The third family is the types that contain neither &quot;<B>least</B>&quot; or &quot;<B>fast</B>&quot; in their names. These are the exact-sized, two&#146;s complement integers with no padding bits. For the least and fast types, the Standard requires implementations to provide typedefs where <I>N</I> has been replaced with <B>8</B>, <B>16</B>, <B>32</B>, and <B>64</B>. However, for the exact-sized types, the requirements on the types are so demanding that the Standard makes these types optional. (This is discussed further below.) These types should be used sparingly. Typical uses are laying out a struct to match an externally defined data layout, such as a binary file from another system or a network packet. A 36-bit machine would not be able to provide typedefs where <I>N</I> was <B>8</B>, <B>16</B>, <B>36</B>, and <B>64</B>, but would be able to provide names where <I>N</I> was <B>9</B>, <B>18</B>, <B>36</B>, and <B>72</B>.</p>
<p>An implementation is required to define macros in <B>&lt;stdint.h&gt;</B> giving the maximum (and for signed types, the minimum) values that can be stored in the types defined in the header. The name patterns for these limit macros match the patterns for the typedef names:</p>

<pre>
INT_LEAST</B><I>N</I><B>_MAX
INT_LEAST</B><I>N</I><B>_MIN
UINT_LEAST</B><I>N</I><B>_MAX
INT_FAST</B><I>N</I><B>_MAX
INT_FAST</B><I>N</I><B>_MIN
UINT_FAST</B><I>N</I><B>_MAX
INT</B><I>N</I><B>_MAX
INT</B><I>N</I><B>_MIN
UINT</B><I>N</I><B>_MAX
</pre>

<p>Note that an implementation defines limit macros if and only if the corresponding typedef is defined. Thus, you can use the limit macros to test whether a typedef name is defined. For example:</p>

<pre>
#include &lt;stdint.h&gt;
#ifdef INT_LEAST24_MAX
int_least24_t x;
#else
int_least32_t x;
#endif
</pre>

<p>The above defines <B>x</B> to have type <B>int_least24_t</B> if that type is supported. Otherwise, <B>x</B> is defined to have the type <B>int_least32_t</B>, a type the Standard requires to exist.</p>
<p>The <B>&lt;stdint.h&gt;</B> header also defines two function-like macros for forming integer constants whose return type is one of the <B>int_least</B><I>N</I>_t or <B>uint_least</B><I>N</I>_t types, respectively: 

<p><B>INT</B><I>N</I>_C(constant) <B>UINT</B><I>N</I>_C(constant)</p>

<p>where <I>N</I> is replaced with a decimal integer corresponding to one of the &quot;<B>least</B>&quot; types. The argument to these macros should be an unsuffixed constant. The macro uses the preprocessor paste operator <B>##</B> to add a constant suffix to produce a constant with the proper type. For example, <B>UINT64_C(0xA)</B> might expand to <B>0xAULL</B>, if the <B>uint_least64_t</B> type was <B>unsigned long long</B>.</p>

<H3><FONT COLOR="#000080">Special Integer Types</FONT></H3>

<p>The <B>&lt;stdint.h&gt;</B> header also defines a few integer types useful for special purposes.</p>
<p>The typedefs <B>intptr_t</B> and <B>uintptr_t</B> are respectively a signed integer type and the corresponding unsigned integer type large enough to hold a pointer to an object without losing any information. (These integer types might not be large enough to hold a pointer to a function.) Specifically, the Standard demands that if you cast a pointer to <B>void</B> to one of these integer types, then cast the integer back to pointer to <B>void</B>, that the result of the two casts should equal the original pointer. There are a few systems where no such integer types exist, so C99 makes these typedefs optional in the header. You can test whether these types are declared by testing if their limit macros are defined: <B>INTPTR_MIN</B>, <B>INTPTR_MAX</B>, and <B>UINTPTR_MAX</B>.</p>
<p>Perhaps the two most important typedefs defined in <B>&lt;stdint.h&gt;</B> are <B>intmax_t</B> and <B>uintmax_t</B>. These are respectively the largest signed integer type and the corresponding unsigned integer type supported by the implementation. Obviously such types are useful whenever you want your program to be able to process the largest numbers supported on the machine. As a less obvious use, such types are handy when working with typedefs for integer types from different sources. Consider:</p>

<pre>
apple_t num_apples();
orange_t num_oranges();
intmax_t num_fruit;
num_fruit = num_apples() + num_oranges();
</pre>

<p>where <B>apple_t</B> is a signed integer typedef used for storing the number of apples, and <B>orange_t</B> is a signed integer typedef used for storing the number of oranges. If you want to store the total number of fruit, neither <B>apple_t</B> nor <B>orange_t</B> might be appropriate. Perhaps you do not have many apples so that <B>apple_t</B> is <B>short</B> while you do have lots of oranges so that <B>orange_t</B> is <B>long</B>. Perhaps the situation is reversed. In the absence of a typedef specifically for storing numbers of any type of fruit, using the largest integer type, <B>intmax_t</B>, is a good idea. Luckily, comparing apples to oranges causes no similar problems.</p>
<p>There are limit macros for <B>intmax_t</B> and <B>uintmax_t</B>: <B>INTMAX_MIN</B>, <B>INTMAX_MAX</B>, and <B>UINTMAX_MAX</B>. There are also function-like macros, similar to the ones described above, for writing constants of type <B>intmax_t</B> and <B>uintmax_t</B>: <B>INTMAX_C(constant)</B> and <B>UINTMAX_C(constant)</B>. The Standard requires that <B>intmax_t</B>, <B>uintmax_t</B>, and their limit and constant macros to be defined. On many implementations, <B>intmax_t</B> will be <B>long long</B> and <B>uintmax_t</B> will be <B>unsigned long long </B>.</p>
<p>Finishing out <B>&lt;stdint.h&gt;</B> are limit macros for integer typedefs defined in other headers. The other headers failed to define macros giving the minimum and maximum values. Rather than add new names to popular headers from C89, C99 defined the limit macros in <B>&lt;stdint.h&gt;</B>.</p>
<p>For <B>ptrdiff_t</B>, the limits are <B>PTRDIFF_MIN</B> and <B>PTRDIFF_MAX</B>. For <B>sig_atomic_t,</B> the limits are <B>SIG_ATOMIC_MIN</B> and <B>SIG_ATOMIC_MAX</B>. For <B>size_t</B>, the limit is <B>SIZE_MAX</B>. For <B>wchar_t</B>, the limits are <B>WCHAR_MIN</B> and <B>WCHAR_MAX</B>. For <B>wint_t</B>, the limits are <B>WINT_MIN</B> and <B>WINT_MAX</B>.</p>

<H3><FONT COLOR="#000080">Header &lt;inttypes.h&gt;</FONT></H3>

<p>The header <B>&lt;inttypes.h&gt;</B> includes the header <B>&lt;stdint.h&gt;</B>, and then defines a few functions (which I will cover in a future column) and many additional macros. Even though <B>&lt;inttypes.h&gt;</B> includes <B>&lt;stdint.h&gt;</B>, you may explicitly include both headers if you wish. All standard C99 headers except <B>&lt;assert.h&gt;</B> may be included multiple times without problem.</p>
<p>The main purpose of <B>&lt;inttypes.h&gt;</B> is to allow <B>printf</B> and <B>scanf</B> to be used with the integer types defined in <B>&lt;stdint.h&gt;</B>. This is accomplished by defining macros that expand into quoted strings that are a particular <B>printf</B> or <B>scanf</B> format conversion specifier prefixed with any needed length modifiers. I will discuss the patterns of these macro names for format conversion specifiers later. For now, be aware that there is a separate macro for every integer type in <B>&lt;stdint.h&gt;</B> and for every <B>printf</B> and <B>scanf</B> format conversion specifier that operates on integers, and that there is a separate such macro for <B>printf</B> versus <B>scanf</B>.</p>
<p>Using string literal concatenation, these macros can be used to form a <B>printf</B> or <B>scanf</B> format string. String literal concatenation is the C feature where two string literals separated only by whitespace will be combined into one large string literal by the compiler. Consider the small program in <a href="list1.htm">Listing 1</a>. <B>&lt;inttypes.h&gt;</B> defines <B>PRIdFAST64</B>, which expands to the <B>printf</B> <B>d</B> conversion specifier for printing an intfast64_t</B>, and <B>SCNdFAST64</B>, which expands to the <B>scanf</B> <B>d</B> conversion specifier for reading an <B>intfast64_t</B>. String literal concatenation combines the string literals from the two macros with the other adjacent string literals to produce a single string literal for the <B>scanf</B> format and a string literal for the <B>printf</B> format. Assuming the <B>int_fast64_t</B> type is really <B>long long</B>, both of the two macros expand into the quoted string <B>"lld"</B>, which is the <B>d</B> format conversion specifier prefixed by the <B>ll</B> modifier to say the type is <B>long long</B>. Thus, the resulting format string for <B>scanf</B> is <B>"%lld"</B> and the resulting format string for <B>printf</B> is <B>"x=%08lld\n"</B>.</p>
<p>Note that a leading percent sign is not part of the strings from the conversion specifier macros. Thus, you can specify special flags, width, or precision arguments to the conversion specifier in the string concatenated to the front of the string from the macro. In the <B>printf</B> format for <a href="list1.htm">Listing 1</a>, the leading zero flag was given to cause leading zeros to be written in front of the number, and a field width of 8 was specified.</p>
<p>The macros for <B>printf</B> format conversion specifiers follow the naming patterns:</p>

<pre>
PRIs</B><I>N</I><B> 
PRIsLEAST</B><I>N</I><B> 
PRIsFAST</B><I>N</I><B> 
PRIsMAX 
PRIsPTR
</pre>

<p>where <I>s</I> is replaced by a <B>printf</B> integer format conversion specifier, one of <B>d</B>, <B>i</B>, <B>o</B>, <B>u</B>, <B>x</B>, or <B>X</B>, and <I>N</I> is replaced by a decimal number that is the same <I>N</I> used to form typedef names in <B>&lt;stdint.h&gt;</B>. The first macro name pattern above is used with the exact width types. The pattern containing &quot;<B>LEAST</B>&quot; is used with the least integer types. The pattern containing &quot;<B>FAST</B>&quot; is used with the fast integer types. The pattern containing &quot;<B>MAX</B>&quot; is used with the <B>intmax_t</B> and <B>uintmax_t</B> types. The pattern containing &quot;<B>PTR</B>&quot; is used with the <B>intptr_t</B> and <B>uintptr_t</B> types.</p>
<p>The macros for the <B>scanf</B> format conversion specifiers follow the same naming patterns as <B>printf</B>, except that the macros begin with <B>SCN</B> instead of <B>PRI</B>, and <I>s</I> cannot be replaced with <B>X</B>. There are separate macros for <B>printf</B> and <B>scanf</B> because <B>printf</B> versus <B>scanf</B> format conversion specifiers sometimes need different length modifiers for the same type. For example, you print a <B>short</B> with <B>%d</B> and read it with <B>%hd</B>.</p>
<p>Just as <B>intmax_t</B> and <B>uintmax_t</B> are useful when storing integers of unknown size, they can be useful when printing an integer of unknown size. Assume that the variable <B>x</B> has some signed integer type, but you do not know which type. You can print <B>x</B> by casting it to <B>intmax_t</B> before printing it:</p>

<pre>
printf("%" PRIdMAX, (intmax_t) x);
</pre>

<p>The <B>&lt;inttypes.h&gt;</B> header was invented by some of the 64-bit vendors and predates C99. Originally, <B>&lt;inttypes.h&gt;</B> directly included the contents of <B>&lt;stdint.h&gt;</B>. The C99 committee decided to divide the header into two in order to separate the <B>printf</B> and <B>scanf</B> format macros (which do not interest C++ programmers) from the integer types and limit macros (which do interest C++ programmers). Some systems that are not fully compatible with C99 lack a <B>&lt;stdint.h&gt;</B> but have the older version of <B>&lt;inttypes.h&gt;</B>.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>As many programmers have independently discovered, a simple solution to portability and different integer types is to use typedefs. C99 has standardized the names and uses of such typedefs in the new headers <B>&lt;stdint.h&gt;</B> and <B>&lt;inttypes.h&gt;</B>. These headers not only solve the problem of the mapping from C keywords to different sized integers, but also might give you access to an implementation&#146;s extended integer types in a way that does not automatically disallow portability. These headers are also simple enough that if your implementation does not yet provide them, it is a simple matter to write your own.</p>

<p><i><B>Randy Meyers</B> is consultant providing training and mentoring in C, C++, and Java. He is the current chair of J11, the ANSI C committee, and previously was a member of J16 (ANSI C++) and the ISO Java Study Group. He worked on compilers for Digital Equipment Corporation for 16 years and was Project Architect for DEC C and C++. He can be reached at <B>rmeyers@ix.netcom.com</B>.</i></p>

<h4><a href="../../../source/2001/feb01/meyers.zip"></a></h4>


</blockquote></body></html>
