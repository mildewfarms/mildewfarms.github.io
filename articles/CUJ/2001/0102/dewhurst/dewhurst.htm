<HTML>   
     <HEAD>
<TITLE>February 2001/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Polymorphic Function Objects</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Steve Dewhurst</FONT></H3>

<BLOCKQUOTE>
<p>It takes lots of skill, and maybe a design pattern or two, to turn a function pointer into a thing of beauty.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<p>C++ programmers are a loyal bunch. Whenever we&#146;re faced with a situation that requires a feature the language doesn&#146;t support, we don&#146;t abandon C++ to flirt with some other language; we just extend C++ to support the feature in which we&#146;re interested.</p>
<p>C++ is designed for this type of extension. Not only does it support the usual basic requirements of any language that allows the creation of abstract data types (encapsulation and access protection), it also provides the ability to overload operators and to define initialization, destruction, copy, and conversion semantics.</p>
<p>It is also important that C++ (and, presumably, its creator Bjarne Stroustrup) elects <I>not</I> to push a fixed philosophy of what constitutes a well-written program or a good design. These issues have wisely been left to the community of C++ programmers as a whole. C++ is a relatively complex language, and this complexity is mitigated by the availability of C++ programming idioms and somewhat higher-level design patterns that describe commonly accepted styles of implementing certain low and mid-level designs. Since they are socially determined, these idioms evolve over time so as to be in sync with the current needs of the C++ programming community. Less complex and less flexible languages, or languages that come with a significant amount of &#147;proper design&#148; baggage, are invariably replaced in short order by new languages that are more suitable to actual needs.</p>
<p>In this installment, we&#146;ll look at the C++ &#147;function object&#148; idiom. As with other areas of the base language &#151; like pointers, arrays, and numeric types &#151; we often find a need to extend the base language to support a function or function pointer with augmented functionality.</p>

<H3><FONT COLOR="#000080">Calling Back</FONT></H3>

<p>Suppose you&#146;re taking a long trip and I lend you my car for the purpose. Given the state of my car, I&#146;ll probably also hand you a sealed envelope with a telephone number in it, along with the instructions to call the number in the envelope if you experience any engine problems. This is a callback. You do not have to know the number in advance (it might be the number of a good repair shop, a bus line, or the city dump), and in fact you may never have to call the number. In effect, the task of handling the &#147;engine trouble&#148; event has been partitioned between you (also known as the framework) and me (also known as the client of the framework). You know when it&#146;s time to do something, but not what to do. I know what to do if a particular event occurs, but not when to do it. Together we make an application.</p>
<p>A more prosaic example of the use of a callback than an exploding internal combustion engine might be a GUI button.</p>

<pre>
typedef void (*Action)();

class Button {
  public:
    Button( const char *label );
    ~Button();
    void press() const;
    void setAction( Action );
  private:
    string _label;
    Action _action;
};

Button::Button( const char *label )
  : _label( label ), _action( 0 ) {}

void
Button::setAction( Action action )
  { _action = action; }

void Button::press() const
  { if( _action ) _action(); }
</pre>

<p>Here we&#146;ve employed the traditional approach of using a pointer to function as our callback type. This decouples the framework (button) code from the client of the framework and allows the same button to be reconfigured with different callbacks at different times. (For example, the owner of the first repair shop you call may, after fixing the engine, give you a sealed envelope containing the number of another repair shop further down the road &#151; owned by his brother.)</p>

<pre>
Button doit( "Go ahead, press me" );
extern void abort();
doit.setAction( abort );
//...
if( theMoodStrikes() )
  doit.press();
//...
extern void sendFlowers();
doit.setAction( sendFlowers );
</pre>

<p>The <B>sendFlowers</B> function shows one weakness with this approach. Presumably, we&#146;d like to send flowers to a particular delivery location.  Functions often need data. Unfortunately, our button expects to call back on a function of a particular type &#151; one that takes no argument and returns <B>void</B> &#151; so we have to find another way to make the delivery location available to our function. How about a global variable?</p>

<pre>
extern Location deliveryLocation;
//...
deliveryLocation = myHouse;
doit.setAction( sendFlowers );
</pre>

<p>This will work for a while, until a summer intern gets hold of the code and modifies it to perform additional actions or uses the same function simultaneously as a callback of two different buttons. Unfortunately, there is no sure way to bind a global variable to a specific function, and the intern may (for reasons that I have never been able to fathom) decide to reuse a global variable for a new purpose. Like flower deliveries, missiles often have delivery locations as well.</p>

<pre>
// -&gt;deliveryLocation
extern void launchMissile();
// oops!
doit.setAction( launchMissle );
</pre>

<p>Another approach is to rewrite our button class to permit a more flexible callback function.</p>

<pre>
class Button2 {
  //...
    void setAction ( void (*action)(void *) );
    void setArg( void *arg );
    void press() const
      { if( _action )
          _action( _arg ); }
  private:
    //...
    void (*_action)( void * );
    void *_arg;
};
</pre>

<p>Too flexible. Here we give up any semblance of type checking by passing a pointer to untyped data, which then must be provided with a type by the callback function, typically through use of a cast. If the callback function guesses the data&#146;s type incorrectly, we have a run-time type error.</p>

<H3><FONT COLOR="#000080">Function Object Callbacks</FONT></H3>

<p>Let&#146;s see, the problem is that we have to bind a function to the data with which it works in such a way that we can deal with them as a unit in a type-safe manner. A class. Let&#146;s rewrite the button type to use a function object as a callback.</p>

<pre>
class Action {
  public:
    virtual ~Action();
    virtual void operator ()() = 0;
};

class Button {
  public:
      Button( const char *label );
    ~Button();
    void press() const;
    void setAction( Action &amp; );
  private:
    string _label;
    Action *_action; // doesn&#146;t own
};

Button::Button( const char *label )
  : _label( label ), _action( 0 ) {}

void
Button::setAction( Action &amp;action )
  { _action = &amp;action; }

void Button::press() const
  { if( _action ) (*_action)(); }
</pre>

<p>The <B>Action</B> class is the base of a polymorphic function object hierarchy, and the customization of <B>Button</B> with such an object is an instance of the Command pattern <a href="#1">[1]</a>. In this article, we&#146;ll concentrate on function object hierarchies as the bases of flexible run-time customization. Other uses of non-polymorphic function objects, notably in the STL, form the bases for efficient and flexible compile-time customization.</p>
<p>Note that we have chosen to overload the function call operator in the <B>Action</B> class to document, implicitly, that <B>Action</B> is a class that is to be used in place of a function or function pointer. In essence, an <B>Action</B> is a &#147;smart function&#148; in a way similar to the perhaps more common use of classes that overload the arrow operator as &#147;smart pointers.&#148;</p>
<p>Now we can safely bind a callback with any required data in a type-safe way.</p>

<pre>
class SendFlowers : public Action {
  public:
    SendFlowers( const Location &amp; );
    void operator ()();
  private:
    const Location &amp;_deliveryLocation;
};
class LaunchMissle : public Action {
  public:
    LaunchMissle( Location &amp; );
    void operator ()();
  private:
    Location &amp;_deliveryLocation;
};
struct Abort : public Action {
  void operator ()()
    { abort(); }
};
//...
SendFlowers sendMeFlowers( myHouse );
doit.setAction( sendMeFlowers );

LaunchMissle launchTest( testLoc );
doit.setAction( launchTest );
</pre>

<H3><FONT COLOR="#000080">Function Objects Are Objects</FONT></H3>

<p>One of the major benefits of function objects is that they are, well, objects. As instances of classes, they allow us to leverage our other techniques for manipulating and composing class objects.</p>
<p>We may want to have a button execute a sequence of commands when pressed. I, personally, always send flowers to a delivery location before launching a missile. It&#146;s the least one can do. I could hand code a &#147;send-flowers-then-launch&#148; function object, but I&#146;d rather avoid the effort. Instead, I&#146;ll allow an <B>Action</B> to be a Composite <a href="#2">[2]</a>.</p>

<pre>
class Macro : public Action {
  public:
      ~Macro();
      void add( Action *a )
      { _actions.push_back( a ); }
      void operator ()() {
        for(list&lt;Action *&gt;::iterator i(_a.begin());
              i != _a.end(); ++i )
              (**i)();
      }
  private:
      list&lt;Action *&gt; _a;
};
</pre>

<p>I don&#146;t know about you, but I sometimes like to beep after executing a callback. I also get the occasional urge to record callback results in a log file. Unfortunately, producing custom <B>Action</B>s like <B>LaunchMissile</B>, <B>LaunchMissileBeep</B>, <B>LaunchMissileLog</B>, and <B>LaunchMissileLogBeep</B> can be tedious. Instead, I&#146;ll allow an <B>Action</B> to be decorated <a href="#3">[3]</a>.</p>

<pre>
class ActionDec : public Action {
  public:
    ActionDec( Action *toDecorate ) : a_( toDecorate ) {}
    void operator ()() = 0;
  private:
    Action *a_;
};

void ActionDec::operator ()() { (*a_)(); }

class Beeper : public ActionDec {
  public:
    Beeper( Action *toDecorate ) : ActionDec( toDecorate ) {}
    void operator()() {
    // forward call
    ActionDec::operator()();
    // augment action
    cout &lt;&lt; '\a' &lt;&lt; flush;
    }
};
</pre>

<p>I also run up against situations where I recognize that I want to attach the same callback to different contexts, but allow them to remain independent. Unfortunately, I don&#146;t always know the specifics of the callback; after all, it could be a beeping launching logging efflorescent abort. Let&#146;s apply the Prototype <a href="#4">[4]</a> pattern to allow cloning of <B>Action</B>s.</p>

<pre>
class Action {
  public:
    Action();
    virtual ~Action();
    virtual void operator ()() = 0;
    virtual Action *clone() const = 0;
};

struct Abort : public Action {
    void operator ()() { abort(); }
    Abort *clone() const
      { return new Abort; }
};

struct NullAction : public Action {
    void operator ()() {}
    NullAction *clone() const
      { return new NullAction; }
};
class Macro : public Action {
  public:
    Macro();
    ~Macro();
    void add( Action *a );
    void operator ()();
    Macro *clone() const;
  private:
    list&lt;Action *&gt; _a;
};

Macro *Macro::clone() const {
  Macro *m = new Macro;
  for( list&lt;Action *&gt;::const_iterator i( _a.begin());
         i != _a.end(); ++i )
    m-&gt;add( (*i)-&gt;clone() );
  return m;
}
</pre>

<p>Our previous version of the <B>Button</B> class was unsafe in that it made the tenuous assumption that the <B>Action</B> passed to the <B>setAction</B> member function would remain in existence at least as long as the <B>Button</B>, and that no other contexts were using that <B>Action</B> in a way that would adversely affect the behavior of the <B>Button</B>. A much safer alternative would be to set a <B>Button</B>&#146;s callback to a copy of the argument to <B>setAction</B>. The <B>clone</B> function allows us to do this while remaining happily ignorant of the details of the <B>Action</B> we copy.</p>

<pre>
class Button {
  public:
    Button( const char *label );
    ~Button();
    void press() const;
    void setAction( const Action * );
    const Action *getAction() const;
  private:
    string _label;
    Action *_action;
};

Button::Button( const char *label )
  : _label( label ),
    _action( new NullAction ) {}

Button::~Button()
  { delete _action; }

void Button::setAction
  ( const Action *action ) {
    if( action ) {    
      delete _action;
        _action = action-&gt;clone();
    }
}
</pre>

<H3><FONT COLOR="#000080">Members Functions Want to be Objects Too</FONT></H3>

<p>Enough callbacks. Let&#146;s do some numerical integration. Our first attempt allows us to integrate a nonmember function.</p>

<pre>
class Quad {
  public:
    Quad(double (*func)( double ));
    ~Quad();
    double integrate ( double low, double high );
  private:
    double (*_theFunc)( double );
};
</pre>

<p>We initialize a <B>Quad</B> with a function (or function pointer) and integrate between two endpoints. The implementation of the <B>integrate</B> function probably invokes the function repeatedly to calculate and sum the areas of a sequence of rectangles or trapezoids between the endpoints. We assume that the function is both integrable and &#147;reasonable&#148; (connected, not too spiky, etc.).</p>

<pre>
extern double aFunction( double );
Quad quad( aFunction );
double area = quad.integrate( 0.0, 2.71828 );
</pre>

<p>Unfortunately, we cannot use <B>Quad</B> to integrate a member function. This is a shame, since although pointers to member functions are functionally very different from pointers to nonmember functions, they are logically quite similar. To allow integration of both member and nonmember functions, we&#146;ll resort, once again, to a polymorphic function object.</p>

<pre>
class Func {
  public:
   virtual ~Func();
   virtual double
   operator ()( double ) = 0;
};
class Quad {
  public:
    Quad( Func &amp; );
    ~Quad();
    double integrate
     ( double low, double high );
    //...
};
</pre>

<p>The nonmember function type is straightforward.</p>

<pre>
class NMFunc : public Func {
  public:
    NMFunc(double (*func)(double));
    ~NMFunc();
    double operator ()( double );
  private:
    double (*_func)( double );
};

double
NMFunc::operator ()( double d )
  { return _func( d ); }
</pre>

<p>Integration of a nonmember function is similar to the original version of <B>Quad</B> (albeit somewhat slower).</p>

<pre>
NMFunc f1( aFunction );
Quad quad( f1 );
double area =
  quad.integrate( 0.0, 2.71828 );
</pre>

<p>Member functions are handled by binding a pointer to member function with a class object used to dereference it. We use a template to allow integration over member functions of different classes.</p>

<pre>
template &lt;class C&gt;
class MFunc : public Func {
  public:
    MFunc
     ( C &amp;obj,
       double (C::*func)(double) );
    ~MFunc();
    double operator ()( double );
  private:
    C &amp;_obj;
    double (C::*_func)( double );
};

template &lt;class C&gt;
double MFunc&lt;C&gt;::operator ()( double d )
  { return (_obj.*_func)( d ); }
</pre>

<p>Integration of a member function is similar to that of a nonmember function.</p>

<pre>
X xobj;
MFunc&lt;X&gt; f2(xobj, &amp;X::aMemberFunc);
Quad quad( f2 );
double area = quad.integrate( 0.0, 2.71828 );
</pre>

<H3><FONT COLOR="#000080">Functional Observations</FONT></H3>

<p>I like to use callbacks to motivate function objects for a number of reasons. First, &#147;everyone&#148; knows how to implement a callback &#151; with a function pointer &#151; and &#147;everyone&#148; is wrong. In applying a simple reification of a function into an object, we are able to overcome the obvious deficits of function pointers in a simple and straightforward way.</p>
<p>The real benefit of the reification, however, lies in our ability to plug our function objects into the generative power afforded by many of the design patterns and C++ idioms defined for objects. Like most successful complex designs, our <B>Action</B> hierarchy is the result of the interaction of a small number of simple designs. This allows the hierarchy to be described simply, understood readily, and maintained and modified easily.</p>
<p>Another benefit of the approach of composing pattern and idiom is that often these techniques can be applied independently and in ignorance of each other. As the purveyor of a framework, we may provide only the <B>Button</B> and <B>Action</B> classes. Users of the framework complete the application by providing concrete <B>Action</B>s. Some of these actions may compose other actions with a Composite, or augment them with a Decorator. If both composite and decorated actions happen to be present in a particular customization of our framework, we can compose beeping launching logging efflorescent aborts.</p>
<p>The reification afforded by the use of function objects also allows us to unify what are really very different parts of C++ under a common abstraction. In the case of the numerical integration we examined above, we wanted to treat both pointers to nonmember functions and pointers to member functions as essentially the same. Use of a polymorphic function object hierarchy allowed us to achieve this unification easily and effectively.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1]  Gamma, et al. <I>Design Patterns</I> (Addison Wesley, 1995), p. 233.</p>
<p><a name="2"></a>[2]  Ibid., p. 163.</p>
<p><a name="3"></a>[3]  Ibid., p. 175.</p>
<p><a name="4"></a>[4]  Ibid., p. 117.</p>

<p><i><B>Stephen C. Dewhurst</B> is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ and object-oriented mentoring and consulting, and training in advanced C++ programming, STL, and design patterns. He may be reached at <B>www.semantics.org</B>.</i></p>

</blockquote></body></html>
