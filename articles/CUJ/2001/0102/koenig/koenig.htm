<HTML>   
     <HEAD>
<TITLE>February 2001/C++ Made Easier</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">C++ Made Easier: Programs That Work by Accident</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Andrew Koenig and Barbara E. Moo</FONT></H3>

<BLOCKQUOTE>
<p>Avoiding undefined behavior is critically important in C++ programming. The authors show us some ways that don&#146;t require memorizing the entire C++ Standard.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>We often see questions about C++ on Usenet of the form &quot;Does the following statement have a well defined effect?&quot; or, more naively (and more bluntly): &quot;I wrote the following statement and it didn&#146;t do what I expected. What&#146;s wrong with my compiler?&quot;</p>
<p>Sometimes the answer is that the given statement is well defined. More often &#151; particularly in the cases that impel people to ask questions &#151; the answer is that the implementation is permitted to do as it pleases, that different implementations behave in different ways, and that if the program happened to do what the author wanted, it did so only by coincidence.</p>
<p>You might think it strange that a programming language could fail to define a single meaning for every statement that one could ever write. However, there are some usages that would be difficult or inefficient to define, at least on some hardware, and C++ programmers are not always willing to pay the price for such definitions.</p>
<p>For example, what should happen if a program computes <B>n+1</B> and the value of <B>n</B> happens to be the largest possible integer? It is easy to say the effect should be an integer overflow &#151; but what should be the resulting value?</p>
<p>Suppose that we are trying to implement C++ on a machine that has no mechanism for raising a hardware exception when integer overflow occurs. If the language definition prescribed a particular behavior in case of integer overflow, our implementation would have to generate extra code to check for overflow after every addition. Experience has shown that there are some programmers who would find such overhead unacceptable.</p>
<p>Accordingly, there are some statements with behavior that the C++ language does not define, leaving it to each implementation to decide how the statement should behave. It is particularly important for programmers to be aware of such usages if they wish to write robust, portable code. Otherwise, they may write programs that behave in a particular way only because that&#146;s what their implementation happens to do. No amount of testing will reveal such a mistake, unless that testing uses a different implementation. Accordingly, programmers should avoid making such mistakes in the first place.</p>
<p>The rest of this article shows some particularly common examples of usages that might appear to work on some implementations, but are actually undefined. It also gives general rules that you can use to avoid such undefined behavior in your programs.</p>

<H3><FONT COLOR="#000080">Multiple Side Effects</FONT></H3>

<p>Consider the following loop, which copies one n-element array to another:</p>

<pre>
int i = 0;
while (i &lt; n) {
   y[i] = x[i];
   ++i;
}
</pre>

<p>Looking at this loop, one might be tempted to shorten it as follows:</p>

<pre>
// Incorrect abbreviation
int i = 0;
while (i &lt; n)
   y[i] = x[i++];
</pre>

<p>If this abbreviation works, it is only by coincidence. The problem is in the statement</p>

<pre>
y[i] = x[i++];
</pre>

<p>This statement both fetches and modifies the value of <B>i</B> within a single expression (more precisely, between two sequence points), and the language definition says that the results of such a statement are undefined.</p>
<p>We have seen people try to explain that the problem is that the compiler is permitted to evaluate the left- and right-hand sides of the assignment in either order, and therefore that <B>i</B> might be incremented before or after fetching <B>y[i]</B>. Although this explanation is logical and emotionally satisfying, and indeed it is a good explanation of the motivation for the language rule, it does not actually desctibe the rule. In fact, because of this statement&#146;s multiple accesses to <B>i</B>, the C++ standard permits the implementation to do absolutely anything it pleases, including crash the program, produce no results at all, or anything else.</p>
<p>The implementation is under no obligation to diagnose such errors. Indeed, it may not even be possible for it to do so. Consider the following statement:</p>

<pre>
x[i] = x[j]++;
</pre>

<p>This statement is perfectly well defined &#151; as long as <B>i</B> is not equal to <B>j</B>. If <B>i</B> and <B>j</B> are equal, then the statement is equivalent to</p>

<pre>
x[i] = x[i]++;
</pre>

<p>which accesses and changes the value of <B>x[i]</B> in a single expression. If <B>i</B> and <B>j</B> are unequal, on the other hand, then one element of <B>x</B> is accessed and the other modified, so there is no problem.</p>
<p>This example is typical of a problem that programmers often face: a piece of program that may look plausible on the surface is actually erroneous in a way that the compiler cannot, or does not, detect. Such problems are particularly important for programmers to detect, because they cannot count on the compiler doing so for them.</p>
<p>One way to avoid such problems is to know the rules. Another way, which is often easier, is to avoid writing programs about which you have any doubt. Yet another way, at least in this particular example, is to let the standard library do the work:</p>

<pre>
std::copy(x, x + n, y);
</pre>

<p>This rewrite shows an important way to simplify programs, and to make it less likely that they will run afoul of undefined behavior, namely to write them in terms of tools that others have already defined and tested.</p>
<p>Of course, you may object that using <B>std::copy</B> will be slower than writing the loop explicitly. However, there is no technical reason why there should be any difference in performance. Indeed, <B>std::copy</B> might even be faster on a good implementation. Because <B>std::copy</B> is part of the standard library, the implementation needs to do less work to figure out the intent of a call to <B>std::copy</B> than to figure out the intent of the corresponding loop, and therefore has an easier time generating optimal code.</p>

<H3><FONT COLOR="#000080">Deleting Arrays</FONT></H3>

<p>Another common example of undefined behavior often appears in programs that are intended to deal with variable-length character strings:</p>

<pre>
char* p = new char[n];
delete p; // should be delete[] p;
</pre>

<p>The language rule is simple: If you are allocating an array, you must use <B>delete []</B>; otherwise, you must not include the <B>[]</B>. As with the previous example, it is not always possible for compilers to detect the error during compilation. In principle, it would be possible for them to detect it during execution, but most implementations would rather avoid the overhead of doing so.</p>
<p>What makes this example particularly insidious is that a number of implementations treat this example the same way: if you use <B>new</B> to allocate an array and <B>delete</B> without <B>[]</B> to free it, the implementation runs the destructor only on the first element of the array. This behavior is particularly convenient if the array elements are of a type, such as <B>char</B>, that does not have a destructor that does anything. Indeed, on such an implementation, this example will work just fine &#151; which makes it hard for a programmer to determine that there is anything wrong with the program. For that matter, many programmers seem to believe &#151; at least if we can judge by their Usenet postings &#151; that this particular behavior is somehow required.</p>
<p>The C++ Standard offers no basis for such beliefs. If a program uses <B>new</B> to allocate an array, and uses <B>delete</B> without <B>[]</B> to deallocate it, the implementation is permitted to do whatever it pleases, including crash.</p>
<p>How can programmers avoid this disaster? The most obvious way is to check every use of <B>delete</B> against the corresponding use of <B>new</B>. However, as in the previous example, the most obvious solution is not always the best. The standard library provides classes, such as <B>string</B> and <B>vector</B>, that let many programs work with dynamic memory more easily than do the lower-level <B>new</B> and <B>delete</B> facilities. As before, the best way to avoid problems is to check first whether someone else has solved those problems for you.</p>

<H3><FONT COLOR="#000080">Virtual Destructors</FONT></H3>

<p>If you are allocating individual objects, rather than arrays, with <B>new</B> and <B>delete</B>, there is the possibility for another kind of undefined behavior. As an example, consider these classes:</p>

<pre>
class Base { };
class Derived: public Base { };
</pre>

<p>Suppose that we allocate an object of type <B>Derived</B> and put its address in a pointer to <B>Base</B>:</p>

<pre>
Base* bp = new Derived;
</pre>

<p>Then we can sometimes use that pointer to free the object:</p>

<pre>
delete bp;
</pre>

<p>Note first that it is correct not to use <B>[]</B> in this example, because we did not allocate an array. However, there is another question here. The pointer <B>bp</B> does not point to an object of the same type as was allocated. Is it safe to <B>delete</B> the object through that pointer?</p>
<p>The language definition is clear on this point: Such a <B>delete</B> is defined when <B>Base</B> has a virtual destructor, and undefined otherwise. Nevertheless, we have heard people claim that the <B>delete</B> is acceptable whenever class <B>Derived</B> has no members that require destruction. The rationale, which seems convincing even though it is incorrect, is that the implementation will use the type of the pointer, here <B>Base</B>, to determine what members to destroy; this determination is harmless when <B>Derived</B> has no extra members.</p>
<p>The most straightforward argument as to why this rationale is incorrect is that the language standard says otherwise &#151; but such arguments are unsatisfying, because they do not explain why the standard says what it does.</p>
<p>We can see a more satisfying argument by noting what happens if we were to add a member to <B>Derived</B> that requires destruction:</p>

<pre>
// revised version
class Derived: public Base { string s; };
</pre>

<p>Now what should the implementation do when deleting <B>bp</B>? To require every implementation to check whether <B>bp</B> points to a <B>Derived</B> object would effectively impose the overhead of a virtual destructor on every class, even if the author knows that every <B>delete</B> always uses exactly the same type as the corresponding <B>new</B>. The whole point of having virtual destructors in the first place is to make it possible to reserve that overhead for contexts where it necessary. Therefore, implementations ought not to be required to deallocate the member <B>s</B> when deleting <B>bp</B>.</p>
<p>If implementations need not deallocate the member <B>s</B>, then deleting <B>bp</B> is potentially a memory leak when <B>bp</B> points to a <B>Derived</B> object. Accordingly, it is something that programmers should not do. Should implementations be required to check for that error? Again, it&#146;s a matter of making overhead optional: if implementations were required to check that <B>bp</B> actually pointed to a <B>Base</B> object, they could just as well do the right thing when <B>bp</B> pointed to a <B>Derived</B> object. Therefore, requiring every implementation to check for the error would be just as slow, and less useful, than requiring every implementation to deallocate <B>s</B>.</p>
<p>One alternative would be to require every implementation <I>not</I> to check the type of object to which <B>bp</B> points. In that case, however, deleting <B>bp</B> when <B>bp</B> points to a <B>Derived</B> object would be an error that implementations would be prohibited from detecting, even if they wanted to do so.</p>
<p>Accordingly, the language definition leaves it up to the implementation what to do when a program uses a base-class pointer to delete a derived-class object when the base class has no virtual destructor. By leaving the behavior of such programs up to the implementation, the language definition allows implementations to check for the error if they wish to do so, and also allows implementations to minimize overhead by not checking if they prefer that approach. The way to avoid this problem in your programs is straightforward: unless there is an overwhelming reason to do otherwise, every class that is used as a base class should have a virtual destructor.</p>

<H3><FONT COLOR="#000080">When Is It Safe to Use memcpy?</FONT></H3>

<p>Our final example is a question that a colleague asked recently: When is it safe to use <B>memcpy</B> to copy elements from one array to another? For example, earlier we advocated rewriting</p>

<pre>
int i = 0;
while (i &lt; n) {
   y[i] = x[i];
   ++i;
}
</pre>

<p>as</p>

<pre>
std::copy(x, x + n, y);
</pre>

<p>Couldn&#146;t we have rewritten it as</p>

<pre>
memcpy(y, x, n * sizeof(x[0]));
</pre>

<p>instead? Surely, doing so would make our program run faster.</p>
<p>Like the previous three questions, this one has an answer: The language definition guarantees that <B>memcpy</B> will work in this example only if the elements of the arrays <B>x</B> and <B>y</B> are what is called a POD. The term POD stands for &quot;plain old data;&quot; loosely speaking, a POD is a type that has no user-defined copy constructor, assignment operator, or destructor, so that the bits that constitute its representation completely define its value. It is conceivable that <B>memcpy</B> will work for other types as well. For example, on many implementations, <B>memcpy</B> will copy classes such as <B>string</B> and <B>vector</B> perfectly well, provided that the programmer takes pains to avoid double destruction and memory leaks. For example:</p>

<pre>
string s, t;
// Swap the contents of s and t
// This code works only by accident
char x[sizeof(s)];
memcpy(x, (char*) &amp;s, sizeof(s));
memcpy((char*) &amp;s, (char*) &amp;t, sizeof(s));
memcpy((char*) &amp;t, x, sizeof(s));
</pre>

<p>This program fragment swaps the bits that constitute the representations of <B>s</B> and <B>t</B>. It will work on many implementations, because most implementations of the <B>string</B> class that we can imagine don&#146;t care about the locations of the <B>string</B> objects themselves. Nevertheless, there is no requirement that any implementation permit this example to work, because <B>string</B> is not a POD type. We would be much better off exchanging the values of <B>s</B> and <B>t</B> this way:</p>

<pre>
std::swap(s, t);
</pre>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>Like C, C++ is a language that does not define the run-time effect of every program that the compiler will accept. Instead, programmers can do many things that the compiler will accept, and that will cause undefined behavior during execution.</p>
<p>Undefined behavior is truly that: the implementation is permitted to do anything at all. Because implementations have such wide latitude, they can even behave in ways that appear completely reasonable. Accordingly, it is not enough to assume that because your program appears to work, it actually works. It might be that the implementation, in behaving as it happens to behave, happens to behave the way you want. If you use a different implementation, or even a later release of the same implementation, or even if you run the program again under the same implementation, you might not be as lucky.</p>
<p>The surest way of avoiding undefined behavior is to be certain of what you know and what you don&#146;t know. If you have the slightest question about the meaning of a program that you are about to write, write it differently. In each of these examples, there was an easy way to rewrite it so as to avoid all question. Opportunities for such rewriting are not hard to find, and they are well worth the effort.</p>

<p><i><B>Andrew Koenig</B> is a member of the Large-Scale Programming Research Department at AT&amp;T&#146;s Shannon Laboratory, and the Project Editor of the C++ standards committee. A programmer for more than 30 years, 15 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and co-author of </I>Ruminations on C++<I>.</i></p>
<p><i><B>Barbara E. Moo</B> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is co-author of </I>Ruminations on C++<I> and lectures worldwide.</i></p>

</blockquote></body></html>
