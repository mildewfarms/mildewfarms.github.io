<HTML>   
     <HEAD>
<TITLE>February 2001/Callbacks Made Easy with the Observer/Mediator Design Patterns</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Callbacks Made Easy with the Observer/Mediator Design Patterns</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Vladimir Batov</FONT></H3>

<BLOCKQUOTE>
<p>Good software works; great software evolves. Here&#146;s a variation on the Observer pattern that lets you update your code base with ease.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>In almost every non-trivial computing system, you can find uses of many different event notification techniques, such as are commonly employed in client/server and distributed architectures. One of the most useful is the callback. It implements a convenient event-based communication bridge between data instances, applications, or systems. This article shows how to blend two basic patterns &#151; Observer and Mediator <a href="#1">[1]</a> &#151; to implement a non-intrusive callback library. Compared with callback implementations based on the standard Observer pattern, this composite OM (Observer-Mediator) design offers far greater programming freedom and flexibility during initial development and, importantly, during later evolutionary phases. The OM design allows developers to introduce and further extend callback functionality at very late stages of software development. This encourages developers to focus on developing applications, not infrastructure.</p>

<H3><FONT COLOR="#000080">The Callback Library Design</FONT></H3>

<p>A callback involves an association between at least two participants. Following the terminology used in <I>Design Patterns</I> <a href="#1">[1]</a>, I refer to the callback initiator as the Subject; the callback receiver is the Observer. Despite the many variations in possible Observer pattern implementations (see <a href="#2">[2]</a> and <a href="#3">[3]</a> for a couple of examples), the Observer design by itself cannot solve a central problem with callback frameworks: the callback infrastructure is embedded in the Subject; there is no true decoupling between Subject and Observer instances.</p>
<p><a href="fig1.htm">Figure 1</a> illustrates this situation. To enable callback functionality, the <B>ConcreteSubject</B> class must accommodate additional callback-related infrastructure. In its simplest form that infrastructure is encapsulated in a base class (<B>Subject</B>). All application classes capable of generating callbacks must derive from this class.</p>
<p>A similar requirement is imposed on callback recipients &#151; <B>ConcreteObserver</B>s. Suppose that in the middle of the development of a payroll management system the programmers are told that an employee should report to the payroll office every time she enters and leaves the office. Then the programmers will have to modify the <B>Employee</B> and <B>PayrollOffice</B> classes they have already developed, to accommodate the additional functionality. Consequently, the implementation will have to change to something similar to:</p>

<pre>
class Employee : public HumanBeing, 
   public Subject { ... };
class PayrollOffice : public Observer 
{ ... }:
</pre>

<p>Such modifications substantially distort an application-focused class hierarchy; they change the sizes of corresponding objects; and they introduce implicit coupling. (Subject and Observer have to know about each other.)</p>
<p>As an orthogonal approach to managing associations, I introduce a separate Callback Manager entity (see <a href="fig2.htm">Figure 2</a>). The Manager takes over all the responsibilities for managing Subject-Observer associations. The Manager accommodates the necessary infrastructure, and it channels and plays a mediator role in callback-related communications between the Subject and the Observer.</p>
<p>The major advantage of this design is that the Subject is free of callback infrastructure and responsibilities unrelated to its original purpose. The Subject does not manage and is not even aware of the existence of Observers. Therefore, if callback functionality is later added as in the case of the <B>Employee-PayrollOffice</B> example, it will not affect the application class hierarchy or object sizes.</p>
<p>The application developer provides Subject (<B>Employee</B>) and Observer (<B>PayrollOffice</B>) components of a callback association. The library discussed in this article adds the only missing link &#151; the Mediator (called the <B>Signal</B> class here).</p>

<H3><FONT COLOR="#000080">Usage and Implementation Highlights</FONT></H3>

<p><a href="list1.htm">Listing 1</a> shows an example use of the OM design. In lines 66 and 67, callback associations between instances of <B>Employee</B> and <B>PayrollOffice</B> are created. When the Subject (<B>john</B>) changes its state, as in line 72, it reports the change to the Callback Manager (<B>Signal</B>) by generating an appropriate event, as shown in lines 14, 20, and 26. The Callback Manager executes the registered callback functions (<B>employee_enters</B> and <B>employee_leaves</B>). Finally, the code in lines 74 and 75 destroys the callback associations created in lines 66 and 67.</p>
<p>Callback initiation is event-driven. However, callback registration (lines 66, 67) does not require an explicit event specification &#151; the callback signature uniquely identifies the event that the callback will be associated with and initiated by:</p>

<pre>
class PayrollOffice
{  ...
  // Associated with Employee::EnterEvent.
  void employee_enters(
    const Employee::EnterEvent&amp;, Employee&amp;);
  // Associated with Employee::LeaveEvent.
  void employee_leaves(
    const Employee::LeaveEvent&amp;, Employee&amp;);
};
</pre>

<p>As shown in lines 2, 8, and 9 of <a href="list1.htm">Listing 1</a>, every callback event is a distinct class derived from <B>Signal::Event</B>. The <B>Signal::Event</B> class forms the basis for an extendible collection of callback event types.</p>
<p>To avoid pollution of the global namespace, Subjects introduce their own sets of events (<B>EnterEvent</B>, <B>LeaveEvent</B>) or alternatively, use already existing events (<B>DestroyEvent</B>, <B>Signal::Event</B>).</p>
<p>If callback functionality is added later, it does not upset already-written code. Equally important, it does not change existing data layout. This ensures that the software is capable of evolving:</p>

<pre>
class Employee
{  ...
  // Event added. No existing code broken.
  class NameChangedEvent : public Signal::Event {...};

  void change_name()
  { ...
    Signal::emit(*this, NameChangedEvent());
  }
};

class PayrollOffice
{ ...
  // Callback added.
  void name_changed(
    const Employee::NameChangedEvent&amp;,
    Employee&amp;);
};

// Register callback.
Signal::connect(
  john, po, &amp;PayrollOffice::name_changed);
</pre>

<p>Non-class-based callbacks are supported in a similar fashion:</p>

<pre>
void sweepstakes(
   const Employee::EnterEvent&amp; ev,
   Employee* employee, PayrollOffice* po)
{ ...
  if (++counter == 1000)
  {
    po-&gt;prize_goes_to(employee);
  }
}

// Register callback.
Signal::connect(john, po, sweepstakes);
</pre>

<H3><FONT COLOR="#000080">The Callback Manager</FONT></H3>

<p><a href="list2.htm">Listing 2</a> shows the <B>Signal</B> class. It may look heavy at first glance. However, its public interface effectively consists of only three functions &#151; <B>connect</B> and <B>disconnect</B> to create and remove a callback association; and <B>emit</B> to report a Subject&#146;s state change and to generate an event.</p>
<p><B>connect</B> and <B>disconnect</B> are families of overloaded functions to support Observer-based member callbacks and non-member callbacks with the following basic signatures:</p>

<pre>
void (Observer::*)(const Event&amp;,
   Subject&amp;),
void (*)(const Event&amp;, Subject&amp;,
   Observer&amp;).
</pre>

<p>For simplicity, <a href="list2.htm">Listing 2</a> shows only two basic functions in each family. The actual source code includes four more functions to properly handle const properties of the Subject and the Observer arguments.</p>
<p>The exact callback signature requirement ensures static type safety without sacrifice in functionality. If additional data needs to be passed along, that data needs to be part of a Subject, an Event, or an Observer. Which of the three is determined as follows:</p>

<UL><LI>  If the date describes an event initiator (a Subject), it must be part of the Subject. </LI>
<LI>  If the data describes a condition or event that initiated a particular callback (an Event) it must be part of the Event. </LI>
<LI>  If the data describes any additional information that the application writer wants to associate with the callback, it must be part of the Observer.</LI></UL>

<p>In the following example, additional data (<B>_old_name</B>) is passed as part of a Subject-initiated event (<B>NameChangedEvent</B>):</p>

<pre>
class NameChangedEvent : public Signal::Event
{ ...
  NameChangedEvent(char* old_name)
  : _old_name(old_name) {}

  const char* old_name() const { return _old_name; }

  // Additional callback-related data.
  char* _old_name;
}

void Employee::change_name(char* new_name)
{  ...
  // Report name change.
  Signal::emit(*this, NameChangedEvent(old_name));
}

void PayrollOffice::name_changed(
  const Employee::NameChangedEvent&amp; ev, Employee* emp)
{ ...
  Records* rec = find_records(ev.old_name());
  rec-&gt;update_name(emp-&gt;name());
}
</pre>

<p>The set of public interface functions (<B>connect</B>, <B>disconnect</B>, and <B>emit</B>) is backed up by a set of private functions (<B>_connect</B>, <B>_disconnect</B>, <B>_emit</B>). In fact, the public functions do nothing but strip down user-supplied Subject and Observer types, pack homogenized data into an internal storage parcel, and immediately invoke their private counterparts. The template-based public interface accomplishes the only but important task &#151; it provides type safety without additional run-time overhead. The following snippet shows the implementation of function <B>connect</B>.</p>

<pre>
template&lt;class Subject, class Observer, class UserEvent&gt;
inline void
Signal::connect(Subject&amp; subject, Observer&amp; observer,
   void (Observer::* cb)(const UserEvent&amp;, Subject*))
{
   Parcel parcel(new UserEvent, (Callee*) &amp;observer,
                 (MemberCallback) cb);
   _signals()._connect(&amp;subject, parcel);
}
</pre>

<p>Homogenized data (expressed in terms of internal <B>Callee</B>, <B>MemberCallback</B>, or <B>LonelyCallback</B> types) are packed in <B>Parcel</B>s:</p>

<pre>
struct Parcel
{  ...
   Event*                   _event;
   Callee*               _receiver;
   MemberCallback _member_callback;            
   LonelyCallback _lonely_callback;            
};
</pre>

<p>and stored in the internal <B>Signal::_collection</B>. (See <B>_connect</B>, in the <I>CUJ</I> online source archives, <B>www.cuj.com/code</B>, for implementation details.) Later, when a Subject reports a state change by calling <B>Signal::emit(*this, Event)</B>, the collection is searched with the Subject as a primary key. All the callbacks registered for the Subject-Event pair will be initiated. (See <B>_emit</B>, also in the online archives, for implementation details.)</p>
<p>To simplify <B>Signal</B>&#146;s public interface the class is implemented as a singleton. Specific projects might need separate callback managers for different groups of events. Minor changes in <B>Signal</B> will accommodate such a requirement.</p>

<H3><FONT COLOR="#000080">Using Base Class Callbacks with a Derived Class</FONT></H3>

<p>This requirement is satisfied using a type-safe reference-based upcast. In the following example the <B>Player</B> implements the bulk of callback-related functionality. The derived <B>FancyPlayer</B> capitalizes on the functionality while adding additional features:</p>

<pre>
class Player
{  ...
   // Callbacks.
   void play(const Button::ClickEvent&amp;, Button*);
   void stop(const Button::ClickEvent&amp;, Button*);
};

class FancyPlayer : public Player
{  ...
   // Additional stuff.
   void screen_saver(...);
};

Button b;
Player p0;
FancyPlayer fp;
Player&amp; p1 = fp; // Reference upcast.

Signal::connect(b, p0, &amp;Player::play); // 1
Signal::connect(b, fp, &amp;Player::play); // 2
Signal::connect(b, p1, &amp;Player::play); // 3
</pre>

<p>The first call to <B>connect</B> goes through as expected. However, an attempt to use a base-class callback with an instance of a derived class fails -- the second <B>connect</B> does not compile! The template-based mechanism does not recognize base-class/derived-class relationships. However, the third <B>connect</B> compiles and achieves what was needed on the second line.</p>

<H3><FONT COLOR="#000080">Possible Extensions</FONT></H3>

<p>Some sophisticated object communications require more than a simple callback notification mechanism. An immediate example would be a negotiation algorithm that requests an Observer&#146;s approval <I>before</I> the Subject undertakes a certain action.</p>
<p>The library discussed here can be extended effortlessly to cover such functionality without affecting participating data structures. Technically, the <B>Signal</B> class will include two separate managers to handle callbacks and requests. The Request Manager will be similar to the discussed Callback Manager, with its own request collection and public interface (<B>connect_request</B>, <B>disconnect_request</B>, <B>emit_request</B>, etc.). The difference will be in the signatures of user-provided request-processing functions (compared to callback functions) and in the emit function initiating a request:</p>

<pre>
// Signatures of request functions.
bool (Observer::*)(const Event&amp;, Subject*),
bool (*)(const Event&amp;, Subject*, Observer*). 

template&lt;class Subject&gt;
static bool emit_request(Subject&amp;, const Event&amp;);
</pre>

<p>The <B>bool</B> return type reflects that fact that request-processing functions report back whether they accept or reject (return <B>true</B> or <B>false</B>) a request. The following usage example better demonstrates the basics of the discussed algorithm:</p>

<pre>
void Button::press()
{
   // Request to process the event. The
   // request will be evaluated by 
   // user-provided functions and
   // accepted (returns true) or 
   // rejected (false).

   bool accept = 
   Signal::emit_request(*this, Press());

   if (accept)
   {
      // Accepted. Do event-related 
      // processing.
      ...
      // Changes have occurred. Notify.

      Signal::emit_callback(*this,
         Press());
   }
}
</pre>

<H3><FONT COLOR="#000080">Development Environment</FONT></H3>

<p>The callback library was developed and tested using gcc-2.95 on SPARC Solaris 2.6 and with minor adjustments on UnixWare 7 using the SCO native compiler. To overcome a weird linking problem in the gcc-2.95 library, I had to comment out the following line in the supplied <B>iostream.h</B>:

<pre>
ostream&amp; operator&lt;&lt;(__omanip func) { 
   return (*func)(*this); }
</pre>

<H3><FONT COLOR="#000080">Summary of Advantages</FONT></H3>

<p>By employing the composite OM pattern, I have produced what I consider to be a package of hard-to-beat advantages, rarely (if ever) available together:</p>

<UL><LI>  <I>Ease of use and integration.</I> A few lines of code enable callback associations between Subjects and Observers (not necessarily class-based). </LI>
<LI>  <I>True non-coupling.</I> The Subject is totally free from the Observer-related data and functionality. </LI>
<LI>  <I>Non-intrusiveness.</I> The Subject is free from callback-related infrastructure. There are no special requirements or restrictions imposed on data structures that participate in callback associations. </LI>
<LI>  <I>Multicast (one-to-many) associations.</I> An unlimited number of Observers may register with a Subject and many Subjects may sensibly use the same Observer, callback function, or Observer-Callback pair. </LI>
<LI>  <I>Flexibility and expandability.</I> The Subject uses a flexible event-driven mechanism to report its state change and to initiate a callback. For example, it is reasonable for instances of a <B>Button</B> class to generate <B>Press</B>, <B>Release</B>, <B>Double Click</B>, <B>Focus</B>, and potentially many other events. The application writer is free to associate zero, one, or many callbacks with any Subject-supported event. The event set is easily expandable without upsetting already written application code. </LI>
<LI>  <I>Complete type safety</I> based on the template mechanism. </LI>
<LI>  <I>Support for legacy data structures and callbacks.</I> The library provides a way to use non-member callback functions that is consistent with the way class-member callbacks are used. This allows non-class-based data structures (lumps of raw data or third-party structures) to use the callback mechanism, providing an easy upgrade path for legacy code. </LI>
<LI>  <I>Low overhead.</I> There is no built-in callback-associated overhead in Subject and Observer classes or their instances, regardless if they participate in callback associations or not. </LI>
<LI>  <I>Responsiveness</I>. Conceptually, the Subject initiates but does not carry out the execution of potentially time-consuming callback functions. This allows callback-related functionality (event processing and callback initiation done by a separate Callback Manager entity) to be implemented in a separate thread.</LI></UL>

<H3><FONT COLOR="#000080">Acknowledgments</FONT></H3>

<p>The design and ultimately the implementation were inspired by the innovative &quot;signal-slot&quot; callback design used in the Qt library (the basis of the popular KDE environment) from Troll Tech AS <a href="#5">[5]</a>.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1]  Erich Gamma et al. <I>Design Patterns</I> (Addison-Wesley, 1995). ISBN 0-201-63361-2. </p>
<p><a name="2"></a>[2]  Paul Jakubik. &quot;Callback Implementations in C++,&quot; &#147;<B>http://www.primenet.com/~jakubik/callback.html#Callback Implementations in C++</B>&#148;. </p>
<p><a name="3"></a>[3]  Rich Hickey. &quot;Callbacks in C++ Using Template Functors,&quot; <I>C++ Report,</I> 7(2) 1995. </p>
<p><a name="4"></a>[4]  Bjarne Stroustrup. <I>The Design and Evolution of C++</I> (Addison-Wesley, 1994). ISBN 0-201-543303. </p>
<p><a name="5"></a>[5]  &quot;Introduction to Signals and Slots,&quot; <I>Qt Reference Documentation,</I> <B>http://www.troll.no/qt/metaobjects.html</B>.</p>

<p><i><B>Vladimir Batov</B> is a software engineer currently working for EMC Corporation, Massachusetts. He can be reached at <B>vb-mail@mail.com</B>.</i></p>

<h4><a href="../../../source/2001/feb01/batov.zip"></a></h4>


</blockquote></body></html>
