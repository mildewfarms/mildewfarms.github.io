<HTML><HEAD>
<TITLE>February 2001/Callbacks Made Easy with the Observer/Mediator Design Patterns/Listing 2</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 2:	Definition of class Signal, the Callback Manager</A></h4>
<pre>
class Signal
{
   public: ~Signal () {}
   private: Signal () {}

   public:

   class Event {...};

   template&lt;class Subject, class Observer, class UserEvent&gt;
   static
   void
   connect(
      Subject&amp;, Observer&amp;,
      void (Observer::*)(const UserEvent&amp;, Subject*));

   template&lt;class Subject, class Observer, class UserEvent&gt;
   static
   void
   connect(
      Subject&amp;, Observer&amp;,
      void (*)(const UserEvent&amp;, Subject*, Observer*));

   template&lt;class Subject, class Observer, class UserEvent&gt;
   static
   bool
   disconnect(
      Subject&amp;, Observer&amp;,
      void (Observer::*)(const UserEvent&amp;, Subject*));

   template&lt;class Subject, class Observer, class UserEvent&gt;
   static
   bool
   disconnect(
      Subject&amp;, Observer&amp;,
      void (*)(const UserEvent&amp;, Subject*, Observer*));

   template&lt;class Subject, class UserEvent&gt;
   static
   void
   emit(Subject&amp;, const UserEvent&amp;);

   private:

   struct Callee {};

   typedef void (Callee::*MemberCallback) 
      (const Event&amp;, void*);
   typedef void (*LonelyCallback) 
      (const Event&amp;, void*, void*);

   class Parcel {...};

   typedef list&lt;Parcel&gt;          List;
   typedef map&lt;const void*, List&gt; Map;

   Map _map;

   void       _emit (void*, const Event&amp;);
   void    _connect (const void*, const Parcel&amp;);
   bool _disconnect (const void*, const Parcel&amp;);

   static Signal&amp; _signals ();
};

&#151; End of Listing &#151;</pre></body></html>
