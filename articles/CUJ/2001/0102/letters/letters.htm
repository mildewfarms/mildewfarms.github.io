<HTML>   
     <HEAD>
<TITLE>February 2001/We Have Mail</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   Departments</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">We Have Mail</FONT></H2>

<HR>
<BLOCKQUOTE>
<p><I>Letters to the editor may be sent via email to </I>cujed@cmp.com<I>, or via the postal service to Letters to the Editor, </I>C/C++ Users Journal<I>, 1601 W. 23rd St., Ste 200, Lawrence, KS 66046-2700.</I></p>

<hr>
<p>Dear <I>CUJ,</I></p>
<p>I just read your C/C++ Tip #5, published in the January 2001 issue of <I>CUJ.</I> The content of the tip (doing a macro which expands into a comment) was quite familiar, since I&#146;d seen a similar method deployed in one of Microsoft&#146;s header files. However, the tip is <I>very</I> incorrect.</p>
<p>The writer uses token pasting to construct a comment start sequence. However, this is invalid according to the C and C++ Standards. In section 5.1.1.2 of ISO C (1999), titled &quot;Translation phases,&quot; comment processing occurs in phase 3 where the preprocessor identifies tokens and whitespace, with comments replaced with whitespace. Macro processing is then done in phase 4, and that phase is the one in which these new comment start sequences would be introduced. There is no followup phase after #4 where the comment would be recognized, so eventually a conforming compiler would reject the program text due to an illegal token &#151; <B>&#146;//&#146;</B>. The 1998 C++ standard has similar language in section 2.1, &quot;Phases of translation [lex.phases].&quot;</p>
<p>Some compilers mix the order and processing of phases sufficiently to allow this macro to work, Microsoft&#146;s Visual C++ 6.0 being notable for its popularity. Others, such as the Metrowerks CodeWarrior C/C++ compilers (upon which I worked for over two years as a compiler engineer before my current employment) follow the Standard and will reject the usage shown in the tip.</p>
<p>Thanks,</p>
<p>Ben Combee<br>
Lead Software Architect<br>
Veriprise Wireless<br>
<b>http://www.veriprise.com</b></p>

<p><I>You are right, and I must take all the heat for this one. Through no fault of my excellent tech reviewers, this one slipped through without getting reviewed. I made the classic mistake of putting too much trust in my compilers. (The ones I used compiled this code without complaint.) Never again! Readers: please note that Tip #5 is not a portable solution, and is probably not advisable even if you plan to stick with one brand of compiler. I apologize for any problems this may have caused. (And I ain&#146;t coming outta my cave until spring.) &#151; mb</I></p>

<hr><p>Dear Chuck Allison,</p>
<p>I enjoyed your article (&quot;The Simplest Automated Unit Test Framework that Could Possibly Work,&quot; September 2000) in the <I>C/C++ Users Journal.</I> In particular I liked your concise criticism of the &quot;If it ain&#146;t broke don&#146;t fix it&quot; mantra. I have emailed that paragraph off to a number of people.</p>
<p>I started my career in the telecommunications industry, where outages are considered gravely bad (rather than a nuisance), consequently real money is spent on tools to aid and automate conformance and regression testing. I am now working on more commercially oriented systems, and cannot get used to &quot;Let&#146;s get it out the door, and let version 2 worry about itself&quot; type thinking.</p>
<p>In the telecommunications industry, it is commonly accepted that 80% to 90% of development costs go into maintenance and upgrades; this seems astonishing and difficult to believe for the managers that I am currently dealing with.</p>
<p>Thanks.</p>
<p>Regards,</p>
<p>Evan Keats</p>
<p>P.S. We are about to go into daylight savings here. This presents an interesting boundary condition. New Zealand is 12 hours ahead of GMT, daylight savings puts us 13 hours ahead, thus causing grief for systems that assume that everybody is within the plus/minus 12 hour window.</p>
<p><I>Chuck Allison replies:</I></p>
<p><I>Thanks for your letter. I assume that the telecom industry has higher standards because they operate at a lower, infrastructure-like level, and mistakes can&#146;t be hidden behind whiz-bang GUIs. Very interesting. The marketing pressures of the shrink-wrap software industry definitely affect quality, but then again, I suppose that if you miss a market opportunity, that might be worse than having buggy software. It&#146;s puzzling. Anyway, I also am more comfortable in concentrating on quality rather than playing the marketing game, just like you.</I></p>
<p><I>Good luck.</I></p>
<p><I>Chuck Allison<br>
Contributing Editor<br>
</i>C/C++ Users Journal<br>
<I><B>www.freshsources.com</B></I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>In December issue of <I>CUJ</I> Pete Becker suggests a way to test the &quot;closeness&quot; of two floating-point numbers. As correctly noted, this relationship is not transitive. What is bad with the code in the article is that it is not symmetric, and there is no particular reason for this.</p>
<p>For example, in my tests (VC++, no optimization) given</p>

<pre>
float x1 = 10;
float x2 = x1 +
  16*x1*std::numeric_limits&lt;float&gt;::
     epsilon ();
float x3 =
  10*std::numeric_limits&lt;float&gt;::
     epsilon ();
</pre>

<p>I get <B>close_enough (x1, x2, 16)</B> is true, but <B>close_enough (x2, x1, 16)</B> is false; <B>close_enough (x3, 0.0f, 16)</B> is true, but <B>close_enough (0.0f, x3, 16)</B> is false.</p>
<p>A better code would be, for example, the following (add templates as necessary):</p>

<pre>
bool
close_enough2 (float f1, float f2,
  int NROUNDS)
{
  return f1 == f2 ||
    (fabs(f1-f2)/(fabs(f1)+fabs(f2)))
      &lt; float(NROUNDS)*
        std::numeric_limits&lt;float&gt;::
          epsilon () / 2;
}
</pre>

<p>The first test for <B>f1==f2</B> prevents division by zero when both <B>f1</B> and <B>f2</B> are null, and also short-cuts the function when <B>f1</B> exactly matches <B>f2</B>. Division by 2 was added only to give <B>NROUNDS</B> the same meaning as in the article.</p>
<p>This version is symmetrical and fixes the strange behavior of the original one when <B>f2</B> is exactly zero. I think this is worth adding two extra calls of <B>abs</B>!</p>
<p>Thanks,</p>
<p>Michael Entin</p>

<p><I>Pete Becker replies:</I></p>
<p><I>I was troubled by the assymetry in my version. This looks like a better solution. Thanks. &#151; Pete</I></p>

<hr><p>Dear Andrei Alexandrescu,</p>
<p>I really liked your article (&quot;Generic&lt;Programming&gt;: Simplify Your Exception-Safe Code,&quot; <I>CUJ Experts Forum,</I> <B>http://www.cuj.com/experts/1812/alexandr.html</B>) and plan on making your classes a regular part of my personal toolkit. I had one question, though. I wondered why you didn&#146;t use the Standard C++ runtime library function, <B>uncaught_exception</B> (15.5.3) in the destructor instead of using the <B>Dismiss </B>method/<B>bool</B> data member (unless your environment&#146;s compiler doesn&#146;t have it). This function returns true/false to indicate stack unwinding due to exception/normal processing, respectively.</p>
<p>Mike Cox</p>

<p><I>Andrei Alexandrescu replies:</I></p>
<p><I>I will guess the approximate sequence of events here:</I></p>
<p><I>1.  My co-author Petru Marginean knew <B>uncaught_exception</B> doesn&#146;t work on MSVC;</I></p>
<p><I>2.  He built a solution that doesn&#146;t rely on <B>uncaught_exception</B>;</I></p>
<p><I>3.  He (and I) discovered that the solution with <B>Dismiss</B> is flexible beyond exceptions (premature returns, complex ownership transfers, etc.) so we were just happy with it.</I></p>
<p><I>Indeed, it&#146;s quite an interesting point that the Boolean flag and <B>Dismiss</B> can be replaced by <B>uncaught_exception</B>. I think it&#146;s worthwhile building a class using it, perhaps... <B>ExceptionGuard</B> :o). &#151; Andrei</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>I was quite stoned reading Mike Scanlon&#146;s article (&quot;Secure Web-Based Licensing&quot;) in the November 2000 issue. Sure, I can&#146;t blame someone for failing to solve a problem that has no real solutions, but I have to flame the false claims. The so called security schemes never worked on the personal computers, and all they did was punish the legal users. While anyone willing to bypass security did so, by just downloading the crack from the net. (Yes, a crack is always there, if not, the progam is likely so bad not worth even a try.)</p>
<p>Back to the point, in the first part, some failed attempts are listed. An important point is missing there, all solutions use the PC&#146;s system clock, under the assumption it is set correctly. The backclocking of the evil pirates is just one thing that could happen. It&#146;s also quite possible a legal user&#146;s clock gets set forward intentionally or by mistake. Someone might just look what happens if the date is set forward (I did that dozen times a day during the last year) or someone uses the date/time applet as a calendar then hits OK by accident, and so on. Then finding all his licenses expired is something rude. If one wants to alienate the users who are willing to pay, just go that way. Pirates will not pay whatever you do; maybe they will chose some other product, but that will not make you rich either.</p>
<p>The other part is more interesting. The solution is supposed to come from secret key cryptography. Yeah, good buzzword. Unfortunately in the schema introduced cryptography is just used as a method of obfuscation. The proposed system fails on the premise &quot;user should not be able to manufacture licenses even vith knowledge of the protocols and algorithms involved&quot; stated at the front. With that knowledge adding obfuscation leads nowhere, the attacker knows what the obfuscation is, and can simply ignore it. In secret key cryptography security lies in the secret key. So the main point is where that key lies, how it can be accessed. That aspect is completely missing from the article. The listing suggests it is just stored in the program. Wow, full half minute work to the attacker, to set a breakpoint on the crypto api entries, and catch it. The article&#146;s first reference lists Schneier&#146;s excellent book, which explains just why such schemes the article discusses will not work out. (Also there is plenty of other material on Bruce&#146;s web site at <B>www.counterpane.com</B>). Another can of snake oil goes on the shelf.</p>
<p>Dr. Paul Balog</p>

<p><I>Security schemes such as presented in the article rely upon the time, or rather the lack of it, that most users are willing to expend being dishonest. Such schemes are by no means foolproof, as you so colorfully point out, so if you opt for such a solution you are playing a numbers game. That may or may not be a reasonable strategy, depending on what you&#146;re trying to sell &#151; we run articles like this because we think they might be useful. I agree that we should have made the limitations of the scheme more explicit. &#151; mb</I></p>

<hr><p>Dear <I>CUJ,</I></p>
<p>This is really a letter to the editor! A line on the <I>cover</I> of the December 2000 <I>Journal</I> (&quot;They Cleanup after Themselves&quot;) has pushed a button I have resisted reacting to since the first time the editor of a computer mag put a &#146;d&#146; in &quot;kluge.&quot; Now it seems a new form of English abuse is occurring; once again it&#146;s originating in computer and programming print media. This is the misuse of compound words such as &quot;backup,&quot; &quot;logon,&quot; and &quot;shutdown&quot; (as well as &quot;Cleanup&quot; in the headline; someone else can gripe about the uncapitalized &#146;A&#146; in &quot;after&quot;). These words work just fine as adjectives or nouns, as in &quot;Do a backup today,&quot; or &quot;Is my logon procedure correct?&quot;</p>
<p>The trouble comes when they are used as verbs, such as &quot;I will backup my system now,&quot; or &quot;They cleanup after themselves.&quot; Such usage is like fingernails on a blackboard to anyone used to correct English, which becomes obvious when you change the tense or mode: &quot;She logonned to her system&quot; or &quot;I&#146;m cleanupping my files.&quot;</p>
<p>These horrors need to be broken up into two words when used as verb phrases. You &quot;back up your files,&quot; &quot;log on in the morning,&quot; and &quot;clean up your act.&quot; Editors &#151; <I>please</I> be mindful of this.</p>
<p>The media don&#146;t just reflect our behavior &#151; they shape it. What is done in print publications <I>will</I> be reflected in the common usage; look what happened to &quot;kluge&quot; (because it&#146;s now spelled &quot;kludge,&quot; I&#146;ve heard people pronounce it to rhyme with &quot;fudge&quot; instead of with &quot;huge&quot;). <I>You</I> have the power, editors; use it wisely.</p>
<p>Thanks in advance!</p>
<p>Robert Weaver<br>
Colorado Springs, Colorado</p>
<p>P.S. For a history of the word &quot;kluge,&quot; check out Steven Levy&#146;s <I>Hackers.</p>
<p><I>Boy, we are sure getting the new millennium off to a great start. Well sir, you have caught us fair and square. In the future we&#146;ll try to be more socially responsible. &#151; mb </I></p>

</blockquote></body></html>
