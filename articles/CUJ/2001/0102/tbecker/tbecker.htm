<HTML>   
     <HEAD>
<TITLE>February 2001/STL &amp; Generic Programming</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">STL &amp; Generic Programming: STL Containers</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Thomas Becker</FONT></H3>

<BLOCKQUOTE>
<p>Why does the Standard C++ library provide so many kinds of containers? To enable tradeoffs in efficiency in their infinite variety of uses.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">The STL Is More Than Containers</FONT></H3>

<p>In my last column, I introduced you to using the STL by discussing a small code example that used a container, some iterators, and an algorithm. I said that I view containers, iterators, and algorithms as &quot;the three pillars of the STL.&quot; Containers store objects in memory. An example is <B>std::vector</B>, which is essentially a dynamically growing C-style array. Algorithms are functions that operate on sequentially organized data. An example is <B>std::find</B>, which locates the first occurrence of an element in a sequence. Iterators are pointer-like objects that the STL uses to present sequentially organized data. Examples are the iterators exposed by the STL containers. These behave like pointers to objects that are stored in the container, or to a hypothetical position one past the last element in the container. <a href="list1.htm">Listing 1</a> shows a silly little code example to illustrate this again. This code fills a vector with 50 random integers between 0 and 41 and then checks if the number 13 is in the vector.</p>
<p>The most important point I made in my last column was that you should not view the STL as just another library of container classes, with algorithms and some other stuff thrown in for good measure. Instead, you should understand that the unique power of the STL lies in its extensibility. For example, if you write a new function that operates on a sequence of elements, such as a function to calculate the standard deviation of a sequence of numbers, you should write this function as an STL-style algorithm, passing the sequence of numbers as a pair of iterators. That way, you can reuse your function not only with numbers stored in any STL container, but with any sequential data that is presented through a pair of iterators. Showing you examples of how to extend the STL in various ways is in fact one of the main purposes of future columns in this series.</p>
<p>This being said, let me be honest and tell you how I (and the team that I was working with at the time) first started out using the STL. The term &quot;generic programming&quot; meant very little to us. We did not have the time to do a lot of studying. We were under pressure to deliver a major piece of software. We had been using container classes from a proprietary library in our code, but nobody was very happy with them. We felt that STL containers were designed much more thoughtfully, and we liked the consistency and the intellectual rigor of the STL. In other words, we did exactly what I told you not to do: we viewed the STL as just another library of container classes. And there is of course absolutely nothing wrong with starting out that way. Of the vast possibilities that the STL offers to the C++ programmer, containers are the most immediate need in real-life software development. Moreover, using containers simply to store and retrieve objects is an excellent way to get started using the STL when your time to study is limited. Therefore, I will devote this column to an overview of STL containers. Reading the following will enable you to select the right container for the right purpose, and it will get you started on using each type of container in your code.</p>

<H3><FONT COLOR="#000080">STL Container Specification</FONT></H3>

<p>In order to use STL containers efficiently and elegantly in your code, it is extremely important to understand how the various types of containers differ from each other and what they were designed for.</p>
<p>But before we go there, I must remind you that the STL is based on the idea of programming with concepts. This means that ideally, containers are not specified by describing the data structure that is used to implement them. Instead, the STL prefers to specify its containers as having certain interface methods and meeting certain complexity requirements. Meanwhile, back in the real world, it is not always practical to maintain such mathematical rigor. For example, the C++ standards committee has recently decided that it will require <B>std::vector</B> to be implemented as a contiguous, C-style array <a href="#1">[1]</a>. That way, it will be safe to use the contents of a <B>vector</B> as a drop-in for C-style arrays in legacy code. For now, <B>vector</B> is the only STL container whose implementation will be specified by the Standard, but others may follow suit.</p>
<p>This being said, I would like to encourage you to focus on the conceptual properties of STL containers rather than their implementation. This will help you to make wise decisions when it comes to choosing the right container for the right purpose. Moreover, it is of course very dangerous to rely on any implementation details that are not specified by the Standard. For example, I know of one STL implementation in which <B>std::vector::iterator</B> is a typedef for an actual C-style pointer. In another implementation, <B>std::vector::iterator</B> is a simple wrapper class around a C-style pointer. Both implementations comply with the current (soon-to-be-changed) version of the Standard. In keeping with Murphy&#146;s Law, I was recently asked to port a major piece of software from the first STL implementation to the second, and the code contained ample occurrences of stuff like this:</p>

<pre>
std::vector&lt;SomeClass&gt;::iterator it;
// ...
BYTE* pMurphy = (BYTE*) it;
</pre>

<p>You get the picture.</p>

<H3><FONT COLOR="#000080">STL Container Overview</FONT></H3>

<p>The STL provides seven types of containers: <B>std::vector</B>, <B>std::list</B>, <B>std::deque</B>, <B>std::set</B>, <B>std::multiset</B>, <B>std::map</B>, and <B>std::multimap</B>. These can be divided into two categories: <B>std::vector</B>, <B>std::list</B>, and <B>std::deque</B> model a concept that the STL specification calls Sequence, whereas the four set and map classes are models of a concept called Sorted Associative Container. The concepts of Sequence and Sorted Associative Container are explained in detail in Matt Austern&#146;s book <a href="#2">[2]</a>. If it were really necessary for you to fully understand these and other concepts in their full mathematical rigor before you could even use STL containers, I would be very hesitant to recommend the STL for use in real-life software engineering. While I strongly recommend that you study STL concepts carefully, I know from experience that you can achieve a lot based on a rather intuitive understanding.</p>
<p>So here&#146;s the short take on the Sequence and Sorted Associative Container concepts: a Sequence is a variable sized container that stores its elements in the order in which they are inserted. Examples for this kind of storage are storage in a contiguous memory block and storage in a linked list of nodes. The difference between the various ways of implementing the Sequence concept lies in the efficiency of certain operations such as element access or inserting an element. I will discuss this below when I talk about the different STL containers in detail.</p>
<p>A Sorted Associative Container, on the other hand, is a container that holds its elements in a data structure where they are sorted according to a predefined ordering scheme. As you will remember from Algorithms and Data Structures 101, the classical way of implementing sorted storage efficiently is as a binary tree, where the left child of a node is considered less than the node and its right-hand child is considered greater than the node. The point of having Sorted Associative Containers in addition to Sequences is that Sorted Associative Containers are optimized for fast lookup of elements. Moreover, that is the primary reason for having them. In other words, in most cases you should not use any of the four STL Sorted Associative Containers unless you want to be able to find elements in them efficiently. The STL offers two kinds of Sorted Associative Containers. The <B>std::set</B> and <B>std::multiset</B> containers hold plain objects; by contrast, the <B>std::map</B> and <B>std::multimap</B> are associative arrays. They store key-value pairs, which can be looked up efficiently by key.</p>

<H3><FONT COLOR="#000080">STL Containers in Detail</FONT></H3>

<p>Below I discuss each of the seven container types in more detail. In order to use them, you will of course have to consult your documentation for details on constructors and member functions. The following discussion will provide you with the necessary understanding to use containers wisely, especially when it comes to selecting the right container type for the right purpose. I discuss <B>std::vector</B> in more detail than the rest of the containers because it is the default choice for an STL container and will likely be the best choice more often than anything else.</p>

<H4><FONT COLOR="#000080">std::vector</FONT></H4>

<p>An STL vector can be visualized as a C-style array of objects with some auto-sizing intelligence wrapped around it. Whenever you must decide which type of container to use, <B>std::vector</B> should be your default choice. The array-like behavior of STL&#146;s <B>vector</B>s makes them simple to use, and they are very often suitable and efficient for the purpose at hand. All other containers are designed to provide better efficiency for certain operations, such as element insertion and removal, or element lookup. These special features should be used only when they are really needed. This helps to keep the code simple and uniform. Also, these optimizations incur an overhead, typically in the form of one or more node pointers per stored element. Whether or not this overhead is a problem to be taken into account depends on the context. (See also Herb Sutter&#146;s column <a href="#1">[1]</a> on the subject of container overhead.)</p>
<p>The behavior of <B>std::vector</B> in terms of complexity is summarized in the <a href="sidebar.htm">sidebar</a>. The most pleasant property is that element access can be performed in constant time. To see exactly what this means, suppose <B>vect</B> is a <B>vector</B> of objects of type <B>SomeClass</B>, and <B>vect</B> currently contains <B>pos+1</B> or more elements. Then the time it takes to evaluate the right-hand side of</p>

<pre>
SomeClass x = vect[pos];
</pre>

<p>is independent of <B>pos</B>, or the number of elements currently stored in the vector, or any other variable quantity. In fact, given the inlining capabilities of today&#146;s compilers, it is quite likely that evaluating <B>vect[pos]</B> is a matter of one pointer addition and one pointer dereference operation. Here, I have used the fact that <B>vector</B> provides an <B>operator[]</B> for element access, emphasizing its similarity to C-style arrays. The above line of code could have been written equivalently as</p>

<pre>
SomeClass x = *(vect.begin() + pos);
</pre>

<p>emphasizing the similarity between iterators and pointers. The same complexity guarantee for the evaluation of the right-hand side applies.</p>
<p>The fact that <B>vector</B> element access is so efficient is another great reason to make <B>std::vector</B> your default container choice. On the downside, the one operation that is very inefficient for vectors is element insertion and removal at arbitrary positions. The reason is of course that when an element is inserted or removed at some arbitrary position, then all elements to the right of that position must be shifted, which requires that many calls to the elements&#146; copy constructors.</p>
<p>As you can see from the <a href="sidebar.htm">sidebar</a>, <B>std::vector</B> specifically boasts that insertion or removal of an element at the end can be done in amortized constant time. This is emphasized by the fact that <B>vector</B> provides special member functions for this purpose, namely, <B>push_back</B> and <B>pop_back</B>. It is clear that these functions do not require any shifting of elements; therefore they might seem to incur a constant cost. But there is a little more to it than that. An insertion at the end requires the vector to grow, and it may therefore cause a memory allocation, followed by copying the entire contents of the vector to the new location. In a naive implementation, this would happen on every call to <B>push_back</B>, thus making the cost of <B>push_back</B> proportional to the size of the <B>vector</B>. A standard-compliant implementation of <B>std::vector</B> is guaranteed to do better than that. When it needs to reallocate the memory, it does so in big chunks, typically by doubling the size of the memory previously allocated. Therefore, if one call to <B>push_back</B> causes a reallocation, you are guaranteed that many subsequent calls do not, thereby amortizing the cost of the one expensive call.</p>
<p>This behavior is quite satisfying from a theoretical point of view, and it tells you that it is not too bad to just keep calling <B>push_back</B> and <B>pop_back</B>, leaving size and memory management to the vector. On the other hand, if you know up front how many elements your vector will eventually hold, then it is of course much more efficient to perform a single memory allocation. <B>std::vector</B> allows you to do that in several different ways:</p>

<pre>
std::vector&lt;int&gt; vect;
vect.reserve(42);
for(int i=0; i&lt;42; ++i)
   vect.push_back(i);
</pre>

<p>The call to <B>reserve</B> instructs the vector to allocate memory for at least 42 elements up front. The vector itself is still empty at this point, but it has enough memory for the next 42 calls to <B>push_back</B> up its sleeve.</p>

<pre>
std::vector&lt;int&gt; vect;
vect.resize(42);
for(int i=41; i&gt;=0; &#151;i)
   vect[i] = i;
</pre>

<p>The call to <B>resize</B> not only allocates memory for 42 elements, it actually places 42 default-constructed elements into the vector. These may now be accessed with <B>operator[]</B>. An advantage of this default construction of elements is that after a <B>resize</B>, you can store new elements in the container at arbitrary positions up to its new size. An equivalent way of sizing the container like this up front is to use a different constructor:</p>

<pre>
std::vector&lt;int&gt; vect(42);
</pre>

<p>The disadvantage of resizing as opposed to reserving is that constructor calls are made to fill the newly created positions in the vector with default element values. This may or may not be a problem, depending on the context.</p>
<p>You should definitely make it a rule to use reserving or resizing whenever you know at compile time how many elements your vector must hold. Not only may it save you many reallocation operations, it may also prevent you from allocating more memory than you acually need. To understand how, recall that when a <B>vector</B> reallocates memory, it typically allocates double the amount it had allocated before. So if you don&#146;t <B>reserve</B> or <B>resize</B> first, and just keep calling <B>push_back</B> or <B>insert</B>, it is possible that at any given time, you will have allocated twice as much memory as you really need &#151; an effect that can have serious consequences if your program stores a lot of data in memory. Although the STL specification does not require that <B>reserve</B> and <B>resize</B> allocate just the amount of memory requested, it is quite likely that your implementation will work this way.</p>
<p>One of the most frequent mistakes when using <B>std::vector</B> is to confuse reserving and resizing. Let us look at the two code examples above with resizing and reserving switched:</p>

<pre>
std::vector&lt;int&gt; vect;
vect.resize(42);
for(int i=0; i&lt;42; ++i)
   vect.push_back(i);
</pre>

<p>This is valid code, but the effect is probably not what was intended. This will result in <B>vect</B> having 84 elements. The first 42 are default-constructed integers stored in the vector by the call to <B>resize</B>. The rest are the integers 0 through 42, put there by calling <B>push_back</B> repeatedly on a vector that already had 42 elements.</p>

<pre>
std::vector&lt;int&gt; vect;
vect.reserve(42);
for(int i=41; i&gt;=0; &#151;i)
   vect[i] = i; // BAD, BAD, BAD
</pre>

<p>In this snippet, after the call to <B>reserve</B>, the vector is still empty. Therefore, every single one of the expressions <B>vect[i]</B> refers to an invalid element location. The hideous part is that in all likelihood, the runtime will not signal an access violation, because you will be writing to heap memory that was allocated by the call to <B>reserve(42)</B>. But your vector is still empty. For a more thorough discussion of these issues, see for example Herb Sutter&#146;s Guru of the Week Question #74 <a href="#3">[3]</a>.</p>

<H4><FONT COLOR="#000080">std::list</FONT></H4>
<p>STL lists can be pictured as classical doubly linked lists, and it is hard to imagine an STL implementation that would not implement them exactly that way. The characteristic property of lists is that insertion and removal of elements at any position happens in constant time; that is, it is independent of the current size of the list and of the position of the insertion or removal. This is of course because inserting and removing from a list requires no more than bending a few pointers. The tradeoff for this advantage over <B>std::vector</B> is an overhead of two pointers per element, and a cost per element access that is now proportional to its distance from the head node. This latter point is emphasized by the fact that <B>std::list</B> does not define <B>operator[]</B>. In order to access the n-th element of a list, you have to actually make n hops from the beginning of the list. If, for example, <B>li</B> is a list of integers that contains eight or more elements, then this is how you retrieve the eighth element:</p>

<pre>
std::list&lt;int&gt;::iterator it = li.begin();
for( int j=0; j&lt;7; ++j )
   ++it;
int nElementAtSeven = *it;
</pre>

<p>You cannot even replace the for-loop by writing <B>it+7</B>. The STL does have a function <B>advance</B> to advance iterators by any number of steps, but for list iterators, <B>advance</B> won&#146;t be able to do better than the for-loop above.</p>

<H4><FONT COLOR="#000080">std::deque</FONT></H4>

<p>std::deque</B> (pronounced &quot;deck&quot; by most people, short for &quot;double ended queue&quot;) is a variant of <B>std::vector</B> that is typically implemented as a segmented array, that is, as a list of chunks of contiguous memory. <B>std::deque</B>&#146;s added benefit over vectors is that it allows amortized constant-time insertion and removal of an element not only at the end, but at the beginning as well. The tradeoff is a moderate space overhead and a performance penalty on certain operations such as incrementing an iterator. <B>std::deque</B> can be viewed as a compromise between <B>vector</B> and <B>list</B>: it retains more of <B>vector</B>&#146;s efficiency than <B>list</B> does, but it offers more efficient insertion and removal &#151; only at the begin position and not everywhere, as <B>list</B> does.</p>

<H4><FONT COLOR="#000080">std::set</FONT></H4>

<p>STL sets are containers that are optimized for fast lookup of elements. They are typically implemented as rather sophisticated binary trees such as red-and-black trees. This means that there is a space overhead, typically of three pointers per element <a href="#4">[4]</a>. More conspicuously, there is a requirement on the type of elements that a set can store: elements must be comparable via <B>operator&lt;</B>, or alternatively, via a user-defined binary predicate. Matt Austern&#146;s book <a href="#2">[2]</a> explains precisely what the requirements on the ordering relation are. For most practical purposes, it suffices to use your intuitive understanding of what &quot;ordered&quot; means. For example, if <B>a &lt; b</B> and <B>b &lt; a</B> are both true, then &quot;<B>&lt;</B>&quot; is not an ordering.</p>
<p>Since the elements of a set are internally stored in ascending order, they can be looked up efficiently. The time required to find an element in a set, or to determine that it is not in there, is proportional to the logarithm of the number of elements in the set. In order to understand the enormous efficiency of this relationship, recall that the (base 2) logarithm of 232 equals 32.</p>
<p>A good example for the judicious use of a set would be our example of <a href="list1.htm">Listing 1</a>. <a href="list2.htm">Listing 2</a> shows the same example, using <B>std::set</B> instead of <B>std::vector</B>. The most important thing to note here is that you must use the member function <B>std::set::find</B>, not the free-standing algorithm <B>std::find</B>. Since the latter algorithm gets its input in the form of two iterators, it does not know whether the input comes from a <B>vector</B> or a <B>set</B> or wherever else. It can only give you the default (rotten) linear time complexity, as opposed to the logarithmic complexity of <B>std::set::find</B>.</p>

<H4><FONT COLOR="#000080">std::multiset</FONT></H4>

<p>An <B>std::multiset</B> is very similar to an <B>std::set</B>. The only difference is that multisets can store elements having the same value multiple times. Plain sets, by contrast, behave like sets in the mathematical sense of the word, where each element in the set must be unique.</p>

<H4><FONT COLOR="#000080">std::map</FONT></H4>

<p>STL maps are similar to sets insofar as they are optimized for fast lookup. The difference is that maps store key-value pairs rather than plain elements. Elements in a map can then be looked up by key. In other words, STL maps are what are also known as associative arrays. This is emphasized by the fact that <B>std::map</B> implements <B>operator[]</B>.</p>
<p>A good example application of <B>std::map</B> is a program that keeps track of the number of times each word occurs in a text. This is shown in a nutshell in <a href="list3.htm">Listing 3</a>. As a little homework assignment until my next column, I encourage you to use your STL documentation to fully understand the code of <a href="list3.htm">Listing 3</a>. I will explain it in detail at the beginnning of the next column.</p>

<H4><FONT COLOR="#000080">std::multimap</FONT></H4>

<p>std::multimap</B> relates to <B>std::map</B> in the same way that <B>std::multiset</B> relates to <B>std::set</B>. Multimaps can store more than one key-value pair that have the same key. To lookup the entire range of elements with a given key, <B>std::multiset</B> provides the member functions <B>lower_bound</B> and <B>upper_bound</B>.</p>

<H4><FONT COLOR="#000080">Hash Tables</FONT></H4>

<p>There is one type of container that is conspicuously absent from the STL specification, namely, hash tables. As far as functionality is concerned, <B>std::map</B> can always be used when you wish you had a hash table. But there can be good reasons for wanting a hash table and not an <B>std::map</B> (such as better performance when the elements to be stored lend themselves easily to the definition of a hash function). Therefore, many STL implementations provide hash tables as an addition. Moreover, there is a lot of pressure on the standards committee to add hash tables to the STL specification, so stay tuned.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  See the sidebar &quot;Standards Update&quot; in Herb Sutter&#146;s column, &quot;Sutter&#146;s Mill,&quot; in the January 2001 issue of <I>CUJ.</I></p>
<p><a name="2"></a>[2]  Matthew H. Austern. <I>Generic Programming and the STL</I> (Addison Wesley, 1998).</p>
<p><a name="3"></a>[3]  <B>&lt;www.peerdirect.com/resources/gotw074a.html&gt;</B></p>
<p><a name="4"></a>[4]  The third pointer is a node back-pointer that is needed for efficient iteration through the container.</p>

<p><i><B>Thomas Becker</B> works as a senior software engineer for Zephyr Associates, Inc. in Zephyr Cove, NV. He can be reached at <B>thomas@styleadvisor.com</B>.</i></p>

<h4><a href="../../../source/2001/feb01/tbecker.zip"></a></h4>
</blockquote></body></html>
