<HTML><HEAD>
<TITLE>February 2001/Encapsulating CORBA Components with the Adapter and Bridge Patterns/Listing 9</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 9: C++ Logger implementation</A></h4>
<pre>
void 
LoggerImpl::logMessage(MessageLevel level,const string&amp; message)
{
   messages_[level].push_back(string(message));
   cout &lt;&lt; levelDesc(level) &lt;&lt; " " &lt;&lt; message &lt;&lt; endl;
}  // end LoggerImpl::logMessage(...

void LoggerImpl::logMessage(MessageLevel level,
                            const string&amp; fileName,
                            long lineNumber,
                            const string&amp; message)
{
   strstream s;
   s &lt;&lt; fileName &lt;&lt; ", line " &lt;&lt; lineNumber 
     &lt;&lt; ":  " &lt;&lt; message &lt;&lt; ends;

   messages_[level].push_back(string(s.str()));  // freezes s

   s.rdbuf()-&gt;freeze(0);  // unfreezes s

   cout &lt;&lt; levelDesc(level) &lt;&lt; " "
        &lt;&lt; fileName &lt;&lt; ", line " &lt;&lt; lineNumber &lt;&lt; ":  "
        &lt;&lt; message &lt;&lt; endl;
}  // end LoggerImpl::logMessage(...


void LoggerImpl::logMessage(MessageLevel level,
                            const string&amp; className,
                            const string&amp; methodName,
                            const string&amp; message)
{
   messages_[level].push_back(string(className)
                              + string("::")
                              + string(methodName)
                              + string("():  ")
                              + string(message));
   cout &lt;&lt; levelDesc(level) &lt;&lt; " "
        &lt;&lt; className &lt;&lt; "::" &lt;&lt; methodName &lt;&lt; ":  "
        &lt;&lt; message &lt;&lt; endl;
}  // end LoggerImpl::logMessageAndMethod(...


vector&lt;string,allocator&gt; LoggerImpl::messages(MessageLevel level)
{
   vector&lt;string,allocator&gt; messages;

   if (messages_[level].size())
      for (vector&lt;string,allocator&gt;::iterator it 
         = messages_[level].begin();
           it != messages_[level].end();
           it++)
         messages.push_back(*it);

   return messages;
}  // end LoggerImpl::messages(...

&#151; End of Listing &#151;</pre></body></html>
