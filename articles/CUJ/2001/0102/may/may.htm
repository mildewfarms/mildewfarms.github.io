<HTML>   
     <HEAD>
<TITLE>February 2001/Encapsulating CORBA Components with the Adapter and Bridge Patterns</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   Features</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Encapsulating CORBA Components with the Adapter and Bridge Patterns</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Patrick May</FONT></H3>

<BLOCKQUOTE>
<p>CORBA hides the details of invoking objects on remote machines. With a little more refactoring, we can hide the details of CORBA as well.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>CORBA provides an industry standard mechanism for developing and deploying distributed objects. These objects can be implemented in a variety of programming languages and distributed over heterogeneous hardware. Well-designed CORBA systems are flexible and highly scalable. The benefits of CORBA, however, come with a high cost related to the complexity of the implementation and the difficulty of integrating with non-CORBA code.</p>
<p>When integrating CORBA services with C++ applications, the complexity arises from three main sources:</p>

<UL><LI>   mapping between CORBA data types and C++ data types</LI>
<LI>   exception handling </LI>
<LI>   switching between distributed and colocated architectures</LI></UL>

<p>In this article I demonstrate these problems, and a solution, using the example of a very simple message logging service.</p>

<H3><FONT COLOR="#000080">The Complexity of CORBA with C++</FONT></H3>

<p>A simple distributed message logging service will demonstrate the complexity of using CORBA with C++. The logging service is a program that runs on a server and is made accessible to any number of client programs via CORBA&#146;s distributed computing mechanism. CORBA makes it possible for a client to call the service whether that client is colocated <a href="#1">[1]</a> with the service, in a different process space, or even on a different machine. Clients can call the service to log events that have occurred and to provide other information, such as the name of the function where the event occurred and the severity level of the event. To log an event, a client calls one of the functions in the logging service interface. The logging service interface is a CORBA interface; this makes it possible for clients to call the service without knowing where the service is located.</p>

<H4><FONT COLOR="#000080">Logging Service Interface</FONT></H4>

<p>CORBA interfaces are described using IDL (Interface Definition Language). The logging service is defined by a single IDL module containing a single interface named <B>Logger</B> (<a href="list1.htm">Listing 1</a>).</p>
<p>As can be seen from the IDL definition, the <B>Logger</B> interface consists of five methods:</p>

<UL><LI>   <B>logMessage</B>. The <B>logMessage</B> method logs a single string and associated severity level.</LI>
<LI>   <B>logMessageAndMethod</B>. The <B>logMessageAndMethod</B> method logs a class name, method name, message string, and associated severity level.</LI>
<LI>   <B>logMessageAndFile</B>. The <B>logMessageAndFile</B> method logs a file name, line number, message string, and associated severity level.</LI>
<LI>   <B>messagesByLevel</B>. The <B>messagesByLevel</B> method returns a CORBA sequence containing all messages with the specified level that have been logged.</LI>
<LI>   <B>shutdown</B>. The <B>shutdown</B> method terminates the <B>Logger</B> service and un-registers it from the CORBA Naming service.</LI></UL>

<H4><FONT COLOR="#000080">The Logging Service Implementation</FONT></H4>

<p>CORBA services are implemented by binding an implementation class written in a language such as C++ to an IDL-specified interface. This is done by compiling the IDL with an IDL-to-C++ compiler. The compiler creates what are known as <I>skeleton</I> files for the server side of the application. Skeleton files are C++ source files that represent the IDL-specified interface in terms of C++. These skeleton files are then compiled with C++ implementation files (using a C++ compiler) to build the service.</p>
<p>On the client side, the IDL-to-C++ compiler creates <I>stub</I> files. Stub files are C++ source files that present the service interface to client programs. They provide everything necessary for the client to call the service. These stub files are compiled along with the client source code to create the client programs.</p>
<p>IDL-to-C++ compilers are typically provided with (and are specific to) a particular CORBA ORB, or Object Request Broker. The ORB is a special module that handles all the communication between CORBA clients and services. An implementation of the ORB resides on both the client and server machines. To create the example implementation for this article, I used TIBCO&#146;s TIB/ObjectBus <a href="#2">[2]</a> ORB, but the code should work with any OMG-compliant ORB.</p>
<p>The <B>Logger</B> interface is implemented by a C++ class with the same name (<a href="list2.htm">Listing 2</a>). The <B>CORBAImplementation</B> <a href="#3">[3]</a> parameterized base class encapsulates much of the boilerplate code required by CORBA services. The <B>Logger</B> class includes a <B>run</B> method in addition to the methods specified in the IDL declaration. This method is called to start the service.</p>

<H4><FONT COLOR="#000080">The Logging Service Client</FONT></H4>

<p>CORBA implementations provide a program called the <I>Naming</I> <I>Service</I>, which enables client programs to locate CORBA services by name. Once the Naming Service has been started, running a wrapper program (<a href="list3.htm">Listing 3</a>) that performs the necessary ORB initialization and calls <B>Logger</B>&#146;s <B>run</B> method will enable the <B>Logger</B> service to be used by CORBA clients.</p>
<p>As the client code (Listings <a href="list4.htm">4</a> and <a href="list5.htm">5</a>) demonstrates, the use of CORBA increases the complexity of applications and decreases understandability and maintainability:</p>

<UL><LI>   The client must use the CORBA Naming Service to acquire a reference to the <B>Logger</B> service. </LI>
<LI>   The client must use a number of CORBA data types that make the code difficult to read. Sequences (the equivalent of C++ arrays) suffer from a particularly inelegant interface.</LI>
<LI>   CORBA&#146;s exception handling mechanism results in code bloat that obfuscates the client&#146;s logic. </LI>
<LI>   CORBA&#146;s exception handling mechanism requires that developers explicitly check for an exception after each method invocation. These semantics are significantly different from C++ exception semantics and contribute to the difficulty in understanding the code.</LI>
<LI>   An annoyance to experienced C++ developers is CORBA&#146;s lack of method overloading.</LI></UL>

<H3><FONT COLOR="#000080">Adding an Adapter</FONT></H3>

<p>The Adapter pattern (as described in <I>Design Patterns</I> <a href="#4">[4]</a>) can eliminate much of CORBA&#146;s intrusiveness by encapsulating the CORBA-related complexity and presenting a &quot;standard&quot; C++ interface to the client application. This use of the Adapter pattern could also be considered to be an instance of the Proxy <a href="#5">[5]</a> pattern.</p>
<p>Adding an adapter is straightforward. The <B>Logger</B> class is renamed to <B>LoggerImpl</B> to better reflect its nature and a new <B>Logger</B> class (<a href="list6.htm">Listing 6</a>) is created to implement the Adapter pattern. <a href="fig1.htm">Figure 1</a> shows the relationship between the <B>Logger</B> and <B>LoggerImpl</B> classes.</p>
<p>Instances of the <B>Logger</B> class acquire a reference to the <B>LoggerImpl</B> during construction <a href="#6">[6]</a>. When a client calls a method of the <B>Logger</B> class, the <B>Logger</B> class forwards the call to the appropriate method of the <B>LoggerImpl</B> by reference. The <B>Logger</B> also translates CORBA exceptions to C++ exceptions; any exceptions that must be propagated to the client are raised using standard C++ exception semantics. The interface of the <B>Logger</B> class is indistinguishable from classes that are not dependent on CORBA; no CORBA-specific data types, exception handling details, or restrictions are exposed to clients of the <B>Logger</B> class.</p>
<p><a href="list7.htm">Listing 7</a> shows that using the adapter is much easier than using the CORBA implementation directly. The data type issues, incompatible exception handling mechanisms, and lack of support for overloaded method names in CORBA have all been resolved by adding a level of indirection, thereby decoupling the client from the intricacies of CORBA and making the resulting system more easily maintainable.</p>

<H3><FONT COLOR="#000080">Location Independence</FONT></H3>

<p>The addition of a simple adapter increased the usability of the <B>Logger</B> service significantly. A few more small changes can provide even more flexibility to clients of the service.</p>
<p>During development of a CORBA system it is often more productive to implement and test the functionality of a service independently of the distribution mechanism. In addition, decisions regarding which services should be distributed and which should be colocated typically cannot be finalized until late in the development process. The distribution choices can even be revisited after a CORBA system goes into production, as usage patterns change or hardware and network enhancements suggest more optimal solutions.</p>
<p>Location independence is therefore a valuable feature of a distributable class. Ideally, clients of the class should not be aware that a class is distributed; instances of local and distributed classes should be treated identically. It should be possible to change the distribution mechanism of a class without impacting the client code.</p>
<p>This decoupling of interface and implementation can be accomplished using a variant of the Bridge <a href="#7">[7]</a> pattern (illustrated in <a href="fig2.htm">Figure 2</a>).</p>
<p>As described in <I>Design Patterns,</I> the Bridge allows different implementations to be provided for a single abstraction. The appropriate concrete implementation is selected at link time or run time and is called by the <B>Abstraction</B> class to provide the behavior of each method in <B>Abstraction</B>&#146;s interface.</p>

<H4><FONT COLOR="#000080">Implementation of the Location Bridge</FONT></H4>

<p>The canonical implementation of the Bridge pattern involves two separate inheritance hierarchies with the interface class maintaining a reference to a concrete implementation class. This dual hierarchy approach is unnecessary to achieve the goal of location independence; instead of the full inheritance hierarchy assumed in <I>Design Patterns,</I> I use just two concrete implementation classes (see <a href="fig3.htm">Figure 3</a>). This simplification allows for the <B>Abstraction</B> and <B>Implementor</B> abstract base classes to be merged into a common abstract base class that defines the interface used by clients of the service. This common base class is named <B>Logger</B> <a href="#8">[8]</a>.</p>
<p>To implement the location bridge, the <B>Logger</B> class from the adapter-only example is renamed to <B>LoggerCORBAAdapter</B> (<a href="list8.htm">Listing 8</a>) and modified to inherit from the <B>Logger</B> interface.</p>
<p><B>LoggerImpl</B> (<a href="list9.htm">Listing 9</a>) is a C++ implementation of the logging functionality.</p>
<p>The <B>LoggerImpl</B> class from the adapter-only example is renamed to <B>LoggerCORBAImpl</B> and is modified to use <B>LoggerImpl</B> for its implementation (<a href="list10.htm">Listing 10</a>). In addition to eliminating duplicate code, this design cleanly decouples the distribution mechanism provided by CORBA from the service behavior provided by <B>LoggerImpl</B>.</p>
<p>The correct subtype of <B>Logger</B> can be selected in any of several ways at either link time or run time. Some possibilities include initialization in <B>main</B>, the use of the Factory <a href="#9">[9]</a> pattern, and tricks with static initialization. The important issue is that clients of the service are insulated from the particular subtype choice and are dependent only on the <B>Logger</B> class.</p>
<p>In this example, the <B>Logger</B> base class requires its subtypes to implement a <B>clone</B> method and to register with the base class when the first instance is constructed. The <B>Logger</B> class can then be used without the need for a factory.</p>

<H3><FONT COLOR="#000080">Benefits of the Location Bridge</FONT></H3>
<p>This combination of the Bridge and Adapter patterns provides location independence and decouples the implementation of the service from the details of the distribution mechanism. Distribution alternatives can be selected at link time by specifying different libraries or even at run time based on command-line parameters or environment variables.</p>
<p>From the perspective of the production users of a system, the primary benefit of using this combination of patterns is flexibility. Repartitioning behavior between multiple processes is quite simple. From the perspective of the original developers and those responsible for maintaining the system, the primary benefit is that the implementation can be easily tested independently of the distribution mechanism.</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>It is worth noting that several existing ORBs do support colocation of CORBA services within the client process. The solution presented here has several advantages over such mechanisms:</p>

<UL><LI>   There is no CORBA overhead when the service is colocated; only the C++ implementation class is used.</LI>
<LI>   Client application code is insulated from CORBA data types.</LI>
<LI>   Client application code is insulated from CORBA exception handling mechanisms.</LI></UL>

<p>The use of the location bridge mechanism eliminates many of the common problems encountered when using CORBA in a C++ environment and provides some important benefits. The number of classes that must be implemented and maintained is higher than simply using &quot;raw&quot; CORBA, but the overall complexity of the service and the client applications is much lower.</p>

<H3><FONT COLOR="#000080">Notes and References</FONT></H3>

<p><a name="1"></a>[1]  A <I>colocated</I> service is one that runs in the same process space as its clients. Naturally, a service may be colocated with some clients and distributed with respect to others.</p>
<p><a name="2"></a>[2]  <B>http://www.tibco.com/products/messaging/objectbus</B>.</p>
<p><a name="3"></a>[3]  A detailed discussion of this class is outside the scope of this article.</p>
<p><a name="4"></a>[4]  Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns, Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995), pp. 139-150.</p>
<p><a name="5"></a>[5]  Ibid., pp 207-217.</p>
<p><a name="6"></a>[6]  The reference to the <B>LoggerImpl</B> does not, of course, have to be acquired in the constructor of <B>Logger</B>. It could, for example, be re-acquired for each method invocation.</p>
<p><a name="7"></a>[7]  <I>Design Patterns,</I> pp. 151-161.</p>
<p><a name="8"></a>[8]  Ibid., page 153.</p>
<p><a name="9"></a>[9]  Ibid., pp 107-116.</p>

<p><i><B>Patrick May</B> is a consultant specializing in the design and development of large scale distributed object-oriented systems using C++, CORBA, relational and object databases, and whatever other tools are appropriate. He holds a degree from the Massachusetts Institute of Technology and is a U.S. citizen currently working in Luxembourg. His primary email address is <B>pjm@spe.com</B>.</i></p>

<h4><a href="../../../source/2001/feb01/may.zip"></a></h4>

</blockquote></body></html>
