<HTML>
<HEAD>
<TITLE>February 2001</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">February 2001<BR>
                Volume 19 Number 2</FONT></H3>
               
<H3><FONT COLOR="#FF0000">EMBEDDED SYSTEMS</FONT></H3>

<H4><A HREF="lehman/lehman.htm">Exception Handling in Embedded C Programs</A></H4>
<p><b>Yonatan Lehman</b><br>
<i>The most common way to emulate exceptions in C is through its <B>setjmp/longjmp</B> facility. The approach presented here is less complicated, but with some surprisingly useful features, including a simple form of stack unwinding.</i></p>

<H4><A HREF="zack/zack.htm">Debugging under GNU/Linux</A></h4>
<p><b>Randy Zack</b><br>
<i>Programmers from fields as diverse as enterprise computing to embedded systems are venturing into Linux. If you are one of them, here&#146;s a tool that should be at the top of your download list.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="may/may.htm">Encapsulating CORBA Components with the Adapter and Bridge Patterns</A></H4>
<p><b>Patrick May</b><br>
<i>CORBA hides the details of invoking objects on remote machines. With a little more refactoring, we can hide the details of CORBA as well.</i></p>

<H4><A HREF="batov/batov.htm">Callbacks Made Easy with the Observer/Mediator Design Patterns</A></H4>
<p><b>Vladimir Batov</b><br>
<i>Good software works; great software evolves. Here&#146;s a variation on the Observer pattern that lets you update your code base with ease.</i></p>

<H3><FONT COLOR="#FF0000">C/C++ CONTRIBUTING EDITORS</FONT></H3>
<H4><A HREF="meyers/meyers.htm">The New C: Integers, Part 3</A></H4>
<p><B>Randy Meyers</B><br>
<i>At first glance, C99&#146;s new integral types seem to threaten its portability. But a few added headers and typedefs improve the outlook dramatically.</i></p>

<H4><A HREF="dewhurst/dewhurst.htm">Common Knowledge: Polymorphic Function Objects</A></H4>
<p><B>Steve Dewhurst</B><br>
<i>It takes lots of skill, and maybe a design pattern or two, to turn a function pointer into a thing of beauty.</i></p>

<H4><A HREF="tbecker/tbecker.htm">STL &amp; Generic Programming: STL Containers</A></H4>
<p><B>Thomas Becker</B><br>
<i>Why does the Standard C++ library provide so many kinds of containers? To enable tradeoffs in efficiency in their infinite variety of uses.</i></p>

<H4><A HREF="koenig/koenig.htm">C++ Made Easier: Programs That Work by Accident</A></H4>
<p><B>Andrew Koenig &amp; Barbara E. Moo</B><br>
<i>Avoiding undefined behavior is critically important in C++ programming. The authors show us some ways that don&#146;t require memorizing the entire C++ Standard.</i></p>

<H4><A HREF="schmidt/schmidt.htm">Uncaught Exceptions: Fuzzy Math</A></H4>
<p><B>Bobby Schmidt</B><br>
<i>Compared to certain flawed political processes, computing processes yield the same answers with remarkable consistency. Now we just need to figure out why they&#146;re wrong.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>
<H4><A HREF="editor/editor.htm">Editor&#146;s Forum</A></H4>
<H4><A HREF="newprod/newprod.htm">New Products</A></H4>
<H4><A HREF="letters/letters.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>
<p>In this new, web-only component of <I>CUJ</I>, we continue publication of the columns that were popular in the former <I>C++ Report</I> magazine. The following articles are featured on the <I>CUJ</I> website this month:</p>

<H4><A HREF="../cexp1902/alexandr/alexandr.htm">&quot;Generic&lt;Programming&gt;: volatile &#151; The Multithreaded Programmer&#146;s Best Friend&quot;</A></H4>
<p><b>by Andrei Alexandrescu</b><br>
<I>Andrei shows how to make the compiler work for you to help detect race conditions. A seldom-discussed keyword plays a key role.</I></P>

<H4><A HREF="../cexp1902/austern/austern.htm">&quot;The Standard Librarian: User-Defined Format Flags&quot;</A></H4>
<p><b>by Matt Austern</b><br>
<I>Both C and C++ enable users to control output formatting for primitive types. With C++ you can format user-defined types as well, by defining your own format flags.</I></P>

<H4><A HREF="../cexp1902/hyslop/hyslop.htm">&quot;Conversations: Access Restrictions&quot;</A></H4>
<p><b>by Jim Hyslop and Herb Sutter</b><br>
<I>If there are any good reasons to make data members public, efficiency probably isn&#146;t one of them. Here&#146;s a convincing explanation as to why, and some data to back it up.</I></P>

<H4><A HREF="../cexp1902/langer/langer.htm">&quot;Effective Standard C++ Library: for_each vs. transform </A></H4>
<p><b>by Angelika Langer and Klaus Kreft</b><br>
<I>Superficial similarities aside, these two algorithms have very different purposes. Understanding those purposes can save you lots of trouble down the road.</I></P>

<H4><A HREF="../cexp1902/martin/martin.htm">&quot;Engineering Notebook: An Extreme Programming Episode&quot; </A></H4>
<p><b>by Robert C. Martin and Robert S. Koss</b><br>
<I>Who better to demonstrate pair programming than a pair of Bobs? Read this installment to find out what it&#146;s really like.</I></P>

</BLOCKQUOTE>
</BODY>
</HTML>
