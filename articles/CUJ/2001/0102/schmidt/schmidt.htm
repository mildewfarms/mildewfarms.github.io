<HTML>   
     <HEAD>
<TITLE>February 2001/Uncaught Exceptions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../tocfeb.htm"></A><FONT COLOR="#FF0000">   C/C++ Contributing Editors</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Uncaught Exceptions: Fuzzy Math</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Bobby Schmidt</FONT></H3>

<BLOCKQUOTE>
<p>Compared to certain flawed political processes, computing processes yield the same answers with remarkable consistency. Now we just need to figure out why they&#146;re wrong.</p>
</BLOCKQUOTE>

<HR>
<BLOCKQUOTE>
<p>Copyright &copy; 2001 Robert H. Schmidt</p>
<p>Around the time this column is published, we in America are supposed to swear in a new President. As I type, the presidential election is still not final. Separating myself from the immediate political implications, I&#146;m fascinated to watch this historical drama unfold.</p>
<p>I&#146;m especially amused by so many people ignoring the phenomenon of statistical error. The Florida voting process cannot perfectly capture the combined intent of Florida&#146;s voters. I suspect the vote difference &#151; a few hundred, out of almost six million cast &#151; is well within the process&#146;s margin of error. Trying to extract a &#147;correct&#148; number within that error margin is like cranking up the power of a microscope that&#146;s already at its limit: all you do is magnify the fuzz and uncertainty without measuring anything reproducible or significant.</p>
<p>Put another way: if the same set of Florida voters went out and voted the same way ten times, the vote count tabulated would still differ each time. We simply can&#146;t have a 100% reproducible result with current law and techniques.</p>
<p>In this regard, we in the software development industry live a bit of fantasy. With the right program constraints, we actually can have results that are 100% reproducible. Indeed, for me to answer your questions in this column, I must rely on compilers doing the same thing with the same code on all systems every time.</p>
<p>And as lazy as it sounds, I must confess: I&#146;m quite happy limiting myself to such easily reproducible software behavior. I don&#146;t miss my days as a Windows programmer, with all the uncertainty that multi-threading asynchronous-event model brought. If I were forced to be a real Windows developer again, I think I&#146;d retire from programming altogether, move to West Palm Beach, and design voting ballots.</p>

<H3><FONT COLOR="#000080">Existence vs. Accessibility</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Which of the following statements are accurate?</p>
<p>A derived class inherits</p>
<UL><LI>   every data member defined in the parent class (although such members may not always be accessible in the derived class). </LI>
<LI>   every ordinary member function of the parent class (although such members may not always be accessible in the derived class).</LI>
<LI>   the same initial data layout as the base class.</LI></UL>

<p>A derived class does not inherit</p>

<UL><LI>   the base class constructors and destructor. </LI>
<LI>   the base class assignment operator. </LI>
<LI>   the base class friends.</LI></UL>

<p>(I have seen other books that state that private members are not inherited.)</p>
<p>What is the precise answer? &#151; David N. S. Reeves</p>


<H4><FONT COLOR="#000080">A</FONT></H4>
<p> You&#146;ve really made six different assertions, which I&#146;ll comment on in order.</p>
<p>1)  A derived class inherits every data member of its base classes, even when those base members are private. </p>
<p>2)  A derived class inherits every ordinary function &#151; and most member functions &#151; of its base classes, even when those base functions are private. </p>
<p>3)  A derived class may or may not have the same initial layout as its bases. </p>
<p>4)  A derived class does not inherit the base-class constructors and destructor. </p>
<p>5)  A derived class does not inherit the base-class assignment operators. </p>
<p>6)  A derived class does not inherit friendship relationships from its bases.</p>
<p>As your principle interest seems to lie in points 1 and 2, consider the illustrative example in <a href="list1.htm">Listing 1</a>. If you try to build that listing, you should see these results:</p>
<UL><LI>   <B>derived</B> accesses <B>base::i1</B> and exposes it as <B>derived::i1</B>. </LI>
<LI>   <B>derived</B> cannot access <B>base::i2</B>, and thus cannot expose it as <B>derived::i2</B>. <B>base::i2</B> does exist within <B>derived</B> &#151; it&#146;s simply not accessible within <B>derived</B>. </LI>
<LI>   Both <B>base</B> and <B>derived</B> declare a public data member <B>i3</B>. The derived <B>i3</B> masks or hides the base <B>i3</B>. In the expression <B>d.i3</B>, the compiler doesn&#146;t consider <B>base::i3</B> as a potential match. </LI>
<LI>   The public base member <B>i4</B> is hidden by the private derived member <B>i4</B>. Because the compiler won&#146;t consider the masked <B>base::i4</B>, and it can&#146;t consider the inaccessible <B>derived::i4</B>, the expression <B>d.i4</B> cannot compile. </LI>
<LI>   <B>derived</B> accesses <B>base::f1</B> and exposes it as <B>derived::f1</B>. </LI>
<LI>   <B>derived</B> cannot access <B>base::f2</B>. </LI>
<LI>   <B>base::f3()</B> is masked by <B>derived::f3(int)</B>, even though <B>base::f3</B> is accessible and has a different signature. When resolving the call <B>d.f3()</B>, the compiler won&#146;t consider matching <B>base::f3()</B>, but will consider only <B>derived::f3(int)</B>. </LI>
<LI>   <B>base::f4()</B> is similarly masked by <B>derived::f4(int)</B>. In this case, the derived function is private. Because the compiler won&#146;t consider <B>base::f4</B>, and can&#146;t access <B>derived::f4</B>, both <B>d.f4()</B> and <B>d.f4(4)</B> fail to compile.</LI></UL>

<p><a href="list2.htm">Listing 2</a> contains a much simpler example. When run on my system, the listing produces</p>

<pre>
sizeof(base)    == 40
sizeof(derived) == 40
</pre>

<p>Your specific results may vary, depending on compiler-specific vagaries; but on all systems, you&#146;ll find that <B>sizeof(derived)</B> is always at least <B>sizeof(base)</B>, because <B>derived</B> contains the private array from base.</p>

<H3><FONT COLOR="#000080">Dial 911</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> Hi,</p>
<p>I have a question regarding the removal of C++ style exception handling from my code. I tried SEH (Structured Exception Handling); but there, if an exception occurs in the constructor, the destructor does not get executed.</p>
<p>Since I cannot return error codes from a constructor, can you suggest a way that I can handle exceptions in a constructor, so that the program restores or exits cleanly (i.e., after calling destructors)? &#151; &quot;kshitij&quot;</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> Some background for the Microsoft-challenged:</p>
<p>Structured Exception Handling, or SEH, is Microsoft&#146;s proprietary exception-handling mechanism for Win32. SEH is a platform feature, not a language feature, and is therefore available (in theory) to all Win32 languages. Microsoft developed SEH before the ascendancy of C++ in the Win32 world. As a result, SEH and C++ exception handling have some fundamental design differences.</p>
<p>Now back to our regularly scheduled programming...</p>
<p>I think you are trying to solve three distinct problems:</p>
<UL><LI>   handling exceptions within constructors </LI>
<LI>   propagating status from an object that says &quot;I didn&#146;t fully construct&quot; </LI>
<LI>   calling a partially-constructed object&#146;s destructor</LI></UL>
<p>On the first problem: you can handle only some constructor exceptions. In particular, you can handle those generated within the constructor body:</p>

<pre>
class X
    {
    X()
        {
        try
            {
            // ...
            }
        catch (...)
            {
            }
        }
     };
</pre>

<p>Any exceptions thrown within the <B>try</B> clause are handled by the <B>catch</B> clause, the constructor exits normally, and the resulting object is considered fully constructed.</p>
<p>However, if an exception occurs before the constructor body is entered, you are out of luck:</p>

<pre>
X() : m() // exception here...
    {
    // ...can&#146;t be handled here
    }
</pre>

<p>Here <B>m</B> is a data member or base class of <B>X</B>. If <B>m</B>&#146;s constructor throws, you have no chance to handle the exception in <B>X::X</B>&#146;s body.</p>
<p>As a compromise, you can filter the exception with a function try block:</p>

<pre>
X()
try : m() // exception
    {
    // body of X::X
    }
catch (...)
    {
    // An exception will still be
    // emitted from this catch
    // clause.
    }
</pre>

<p>According to the language rules, a function try block must throw. It can throw an exception other than the one caught, but it still must throw. Thus, the try block cannot prevent the construction from failing. At best, the block offers a chance to clean up program resources or otherwise recover from the exception.</p>
<p>For your second problem: I think an exception is overall the most effective way for a constructor to dial 911 <a href="#1">[1]</a>.</p>
<p>Think of an exception as an alternative return-value path. In the example</p>

<pre>
class X
    {
public:
    X(int &amp;) throw(long);
    // ...
    };
</pre>

<p>the <B>X</B> constructor has two ways to return values:</p>
<UL><LI>   via the outbound parameter value of type <B>int</B> </LI>
<LI>   via the exception value of type <B>long</B></LI></UL>

<p>I generally recommend using the parameter to &quot;return&quot; success, and the exception to &quot;return&quot; failure. With such a scheme, normal code flow is not interrupted by successful construction. At the same time, the existence of an exception &#151; independent of the value of that exception &#151; implies a construction failure:</p>

<pre>
try
    {
    int n;
    X x(n);
    // x constructed, and n is set.
    }
catch (long)
    {
    // x failed to construct.
    // You may exit program, or
    // otherwise clean up.
    }
</pre>

<p>On your third problem, the C++ Standard is pretty clear: destructors are called only for objects that fully construct &#151; that is, for objects whose constructors don&#146;t emit exceptions. If an object&#146;s constructor does emit an exception for any reason, the object does not exist and its destructor is never called.</p>
<p>You may debate the wisdom of this construction/destruction pattern. Lord knows I have <a href="#2">[2]</a>. But whether you agree with the design or not, it&#146;s part of the C++ object model, and is enforced by Standard-conformant compilers.</p>
<p>Even if you want to subvert the pattern, you can&#146;t, or at least not easily. In the example above, you can&#146;t even explicitly call the <B>x</B> destructor:</p>

<pre>
try
    {
    int n;
    X x(n);
    }
catch (long)
    {
    x.~X(); // wrong
    }
</pre>

<p>since <B>x</B> does not exist in the scope of the <B>catch</B> clause.</p>
<p>You could try an end run such as</p>

<pre>
X *x = NULL;
try
    {
    int n;
    x = new X(n);
    }
catch (long)
    {
    delete x;
    }
</pre>

<p>This will compile. It will also induce undefined behavior when run. If the <B>X</B> constructor throws during <B>new X(n)</B>, the allocated memory will be automatically deallocated via <B>operator delete</B>. Evaluating <B>delete x</B> on memory that&#146;s already been deallocated would be a bad plan.</p>
<p>I recommend you not attempt to thwart the language design here. If your constructor gets in trouble, throw an exception, and don&#146;t try to subvert the language rules by forcing a destruction.</p>

<H3><FONT COLOR="#000080">VC++ Blues</FONT></H3>

<H4><FONT COLOR="#000080">Q</FONT></H4>
<p> The included code snippet produces a run-time error when compiled with the Visual Studio 6.0 C++ compiler.</p>
<p>The program dies when <B>operator delete</B> is called (that is, after Microsoft&#146;s debug version of <B>free</B> is called). Any of several seemingly unrelated changes fixes the problem.</p>
<p>I am confident that this is legal Standard C++. Originally <B>base</B> was an abstract base class for certain kinds of predicates, and was itself derived from a typedef to <B>std::unary_function</B>.</p>
<p>I would appreciate your comment. Thank you in advance.</p>
<p>P.S. Yes, I know it is illegal to delete a child trough a base pointer with base not having a virtual destructor. This does not seem to be the case here. &#151; Bosko Zivaljevic</p>

<H4><FONT COLOR="#000080">A</FONT></H4>
<p> I&#146;ve distilled your code down to <a href="list3.htm">Listing 3</a>.</p>
<p>I am able to replicate your problem with Visual C++ v6. On my machine, the program bombs at the point of <B>delete p</B> with the scary dialog</p>

<pre>
Debug Error!

Program O:\VS_6\UHOH.EXE

DAMAGE: after Normal block (#27) at 0x007803E0.

(Press Retry to debug the application)
</pre>

<p>On all the other systems I use, I get no run-time errors of any kind.</p>
<p>Like you, I found that tweaking the program even slightly made the error go away. Among other things, I was able to banish the problem by:</p>
<UL><LI>   giving <B>base</B> a data member </LI>
<LI>   giving <B>derived</B> a user-defined copy constructor </LI>
<LI>   changing <B>new derived(d)</B> to <B>new derived</B> </LI>
<LI>   making <B>base::~base</B> non-virtual</LI></UL>

<p>This is certainly a bug, either in the C++ compiler or the run-time library. On a lark, I added my own global <B>operator new</B> and <B>operator delete</B>:</p>

<pre>
#include &lt;new&gt;
#include &lt;stdlib.h&gt;

void *operator new(size_t n)
    {
    return malloc(n);
    }

void operator delete(void *p)
    {
    free(p);
    }
</pre>

<p>The problem persisted. However, if I changed the functions so that they did not call <B>malloc</B> and <B>free</B>, the problem went away. Following that lead, I also tried calling <B>malloc</B> and <B>free</B> directly:</p>

<pre>
derived *p = (derived *)
   malloc(sizeof(*p));
new(p) derived(d);
free(p);
</pre>

<p>using placement new to construct within <B>*p</B>.</p>
<p>With these changes, the problem remained. This fact strongly suggests a library bug, probably in the heap manager.</p>

<H3><FONT COLOR="#000080">Erratica</FONT></H3>
<p>An anonymous Diligent Reader found a minor bug in my December 2000 column. In Listing 1 I have the line</p>

<pre>
i = 123;
</pre>

<p>That line should be removed.</p>
<p>Listing 1 was part of my answer to item &quot;Round and Round Again.&quot; In regard to that answer, the reader continued</p>
<p><I>&#147;I noticed that you ended by suggesting the self-assignment check. My own view has simply been to ridicule the form as being not valid C++ and ignore it; the alternative would be to recommend writing a self-assignment check in every copy constructor (if we recommend it for one class, we have to recommend it for all &#151; it can happen for any class). Do you agree/disagree? Just curious.&#148;</I></p>
<p>When I wrote my original answer, I wasn&#146;t thinking about it in the way suggested. I was really only picking a simple solution to a specific problem. But the reader got me thinking about the problem more globally, by implying that we should use the technique either everywhere or nowhere.</p>
<p>Guards against self-initialization are closely related to guards against self-assignment, which are C++ 101 orthodoxy <a href="#3">[3]</a>. Should we consider self-intialization guards canonical as well? I don&#146;t think so, if only because the opportunities for self-initialization are so limited <a href="#4">[4]</a>.</p>
<p>Until I got the original question, it had never occurred to me that self-initialization was a problem. I don&#146;t think I&#146;ve ever been bitten by it, or know anyone who has been. I imagine the problem does show up, as do other low-probability events that we don&#146;t routinely worry about or guard against.</p>
<p>In the end, we are really talking about insurance &#151; weighing the risk of no coverage against the cost of coverage. In this case, I think I&#146;m willing to recommend that we go without coverage and risk occasional out-of-pocket payments.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>
<p><a name="1"></a>[1]  Lest I be accused of U.S. bias: 911 is the fairly universal U.S. phone number for emergency rescue help. The equivalent number is different in other countries. When the U.S. syndicated show <I>Rescue 911</I> appeared on Australian television, each episode ended with a disclaimer, telling viewers to dial 000 instead of 911. Apparently some Aussies had dialed 911 by mistake after seeing the show and were unable to get help. Oops.</p>
<p><a name="2"></a>[2]  <B>http://msdn.microsoft.com/library/welcome/dsmsdn/deep02172000.htm</B> </p>
<p><a name="3"></a>[3]  Or were, before Herb Sutter taught us the virtues of exception safety.</p>
<p><a name="4"></a>[4]  Herb Sutter discusses this very point in Item 38 of his book <I>Exceptional C++</I>.</p>

<p><i><B>Bobby Schmidt</B> is a freelance writer, teacher, consultant, and programmer. He is also an alumnus of Microsoft, a speaker at the Software Development and Embedded Systems Conferences, and an original &quot;associate&quot; of (Dan) Saks &amp; Associates. In other career incarnations, Bobby has been a pool hall operator, radio DJ, private investigator, and astronomer. You may summon him on the Internet via <B>BobbySchmidt@mac.com</B>.</i></p>

<h4><a href="../../../source/2001/feb01/schmidt.zip"></a></h4>
</blockquote></body></html>
