<HTML><HEAD>
<TITLE>March 2001 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Temperature.h</A></h4>
<pre>
#ifndef UTIL_TEMPERATURE_H
#define UTIL_TEMPERATURE_H

#include &lt;iosfwd&gt;

namespace Util {

class Temperature {
    // data
    float        _val;
public:
    // LWC
    Temperature() {}

    // access
    float        inK() const        { return _val; }
    float        inC() const        { return inK() - 273.15; }
    float        inF() const        { return (inC() * 9 / 5) + 32; }

    // creation
    static Temperature    inK(float val);
    static Temperature    inC(float val);
    static Temperature    inF(float val);

protected:
    Temperature(float val) : _val(val) {}

    
    // iostream operations
public:
    // iword/pword index
    static const int        strm_index;
    
    // manipulators
    static std::ostream&amp;    asK(std::ostream&amp;);
    static std::ostream&amp;    asC(std::ostream&amp;);
    static std::ostream&amp;    asF(std::ostream&amp;);
    static std::ostream&amp;    show_scale(std::ostream&amp;);
    static std::ostream&amp;    no_scale(std::ostream&amp;);

private:
    // formaters
    static std::ostream&amp;    _putK(std::ostream&amp;, Temperature obj, long flags);
    static std::ostream&amp;    _putC(std::ostream&amp;, Temperature obj, long flags);
    static std::ostream&amp;    _putF(std::ostream&amp;, Temperature obj, long flags);
};

// comparison operators
inline bool 
operator==(Temperature lhs, Temperature rhs)
{ return lhs.inK() == rhs.inK(); }

inline bool 
operator!=(Temperature lhs, Temperature rhs)
{ return !(lhs == rhs); }

inline bool 
operator&lt; (Temperature lhs, Temperature rhs)
{ return lhs.inK() &lt; rhs.inK(); }

inline bool 
operator&lt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }

inline bool 
operator&gt; (Temperature lhs, Temperature rhs)
{ return lhs &lt; rhs; }

inline bool 
operator&gt;=(Temperature lhs, Temperature rhs)
{ return !(rhs &lt; lhs); }

// I/O operators
std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, Temperature obj);
std::istream&amp; operator&gt;&gt;(std::istream&amp;, Temperature&amp; obj);

// inline functions
inline Temperature
Temperature::inK(float val)
{ return Temperature(val); }

inline Temperature
Temperature::inC(float val)
{ return Temperature(val + 273.15); }

inline Temperature
Temperature::inF(float val)
{ return Temperature( ((val - 32) * 5 / 9) + 273.15); }

} //&gt; namespace

#endif
</pre></body></html>
