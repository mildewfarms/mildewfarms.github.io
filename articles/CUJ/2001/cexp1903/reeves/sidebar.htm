<html><HEAD>
<TITLE>March 2001 C++ Experts Forum/The (B)Leading Edge/Sidebar</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<H3 align=center><FONT COLOR="#000080">The Value of Simple Classes</FONT></H3>

<HR>

<BLOCKQUOTE>
<P>I was once asked &quot;Why make a class if you are not using inheritance or polymorphism?&quot; At the time I answered: &quot;Modularity.&quot; These days I would probably answer &quot;Abstraction and Encapsulation.&quot; The latter are often cited as characteristics of object-oriented programming along with inheritance and polymorphism. I will admit that I am not asked questions like this very often, but as a consultant I see a lot of code that looks like it was written by people who apparently think like this questioner. Obviously, another answer is provided by this column: by making something into a class, you can provide operations that otherwise are difficult or even impossible. Beyond all the typical reasons, there is an additional reason to turn common everyday value types into classes: to make them harder to use. Before I explain that, permit me a brief digression.</P>
<P>Once upon a time, right out of college, I was working for NASA on one of the earliest Space Shuttle trainers. (In NASA's case, a trainer was a stripped down simulator &#151; it didn't move or provide full systems functionality.) I noticed that all the instrumentation on the flight deck was in traditional American English format (altitude in feet, etc.). Since I thought the Shuttle was suppose to have an international clientele (and because I was young and na&iuml;ve), I asked one of the instructors why the instrumentation was not calibrated in International Standard units. He replied that when things got stressful, pilots responded better if things were in familiar formats. In particular, most of these people had long experience with the traditional displays. That seemed reasonable for American astronauts/pilots, but what about the rest of the crew? In a lot of cases, the computers would have to be able to display values in several possible formats. I realized that the computer didn't care, so I made the arbitrary decision that in my code physical values would be represented in International Standard units.  At the time, this was sort of a smug &quot;I'm Standard, even if the rest of the cockpit isn't&quot; kind of decision. In the intervening years I have stuck to that early choice, and in the process, I have come to realize that I intuitively made a wise decision. </P>
<P>There are lots of ordinary values that have lots of different representations. Date is a common example. What does &quot;01/02/03&quot; mean? If you are from America, you read it one way (2-Jan-2003), in Europe you read it another (1-Feb-2003), and on a computer perhaps still a third way (3-Feb-2001). Is a temperature of 25 warm or cold? The computer doesn't know or care how a number is interpreted, so it is up to the programmers. Unfortunately programmers, being the type of people they are, usually pick the representation easiest to use and most familiar to themselves. Even if they know that the user expects something else, they may figure that is the problem of those UI (User Interface) yahoos. Of course, the UI yahoos figure that the Internal bozos know what the user wanted, so that is what they expect. These kinds of misunderstandings can happen within a project, so how much more likely are they for multi-team, or even multi-national, development efforts? Frankly, I think it would be a shame if a spacecraft were lost (for example) because one group of programmers thought feet-per-second was the &quot;right&quot; way to represent velocity, where another group expected &quot;kilometers-per-hour&quot; (figure out the conversion factor between those scales and decide if you think you would spot the discrepancy). </P>
<P>Back in my FORTRAN days, the best I could do was choose to represent values in scales that were not what might be expected. That way it was a lot harder to forget a conversion. These days in C++, I can do better. If you look at the interface for <B>Temperature</B> in <a href="list1.htm">Listing 1</a>, you will note several things. First, let me point out the absence of a user-defined copy constructor, copy assignment operator, and destructor. This makes the class what I call a Light Weight Class <a href="reeves.htm#5">[5]</a>. On a decent compiler, this means that copy operations use bitwise copy, and exception stack unwind ignores objects of this type. Beyond that, notice that there is a public default constructor, but that the converting constructor is protected (more on this in a moment). </P>
<P>The reason for this is found in the adage &quot;good classes should be easy to use correctly, and hard to use incorrectly.&quot; Unfortunately, in the real world, there is often a tension between ease of use and ease of misuse. I decided to give up some ease of use in return for making my class harder to use &#151; incorrectly. The absence of a converting constructor means you can not initialize a <B>Temperature</B> object from an ordinary number. Instead, you have to use one of the provided static functions. For example:</P>

<pre>Temperature t1 = Temperature::inC(25);  // warm
Temperature t2 = Temperature::inF(25);  // cold
</pre>

<P>Likewise, to extract the value from a <B>Temperature</B> object, you have to write something like:</P>

<pre>float x = t.inK();
</pre>

<P>This makes the code harder to write initially, but much more explicit when it is read later. It also means that the code is more likely to be correct since the programmer doesn't have to worry about the conversion formula. Note: I am not overly crazy about the function names myself, but they are easier to write than Celsius and Fahrenheit and seem to work all right in practice. A quick glance at the functions will show that <B>Temperature</B> is stored internally as Kelvin, but it really doesn't matter. </P>
<P>The converting constructor is <B>protected </B>instead of <B>private</B> to allow for derived classes. Since there are no virtual functions &#151; in particular no virtual destructor &#151; this may seem a little peculiar. (Note that you should not allocate a class derived from <B>Temperature</B> from the free store and then delete it through a <B>Temperature*</B> &#151; that yields undefined behavior). Deriving from <B>Temperature</B> is useful in two cases (that I know of anyway). First, if the application deals with only one format (or the programmer is lazy and just hates to write code like the above), it is possible to trivially create a derived class that represents a temperature in a single scale:</P>

<pre>class Celsius : public Temperature {
public:
    Celsius() {}
    Celsius(float val) : Temperature(inC(val)) {}
    explicit Celsius(const Temperature&amp; other) : Temperature(other) {}
    Celsius&amp; operator=(float val) {
        Temperature::operator=(inC(val)); return *this; }
    float get() const { return inC(); }
};</pre>

<P>Since <B>Celsius</B> is publicly derived from <B>Temperature</B>, all the I/O operations described for <B>Temperature</B> will also work for an object of type <B>Celsius</B>, including being able to display its value in another scale. If this is considered undesirable, then an <B>operator&lt;&lt;</B> function can be provided explicitly for <B>Celsius</B> that only outputs the value in that scale. </P>
<P>Alternativly, if a user wishes to deal with another temperature scale than those provided (e.g., Rankin), then a derived class can provide the necessary conversions:</P>

<pre>class Rankin : public Temperature {
public:
    Rankin() {}
    explicit Rankin(float val) : Temperature(inK(val * 5 / 9)) {}
    explicit Rankin(const Temperature&amp; other) : Temperature(other) {}
    float get() const { return inK() * 9 / 5; }
};</pre>

<P>In this case, the converting constructor is public but marked <B>explicit</B>. Typically, you would use Rankin like so:</P>

<pre>
Temperature t = Rankin(300.0);
float val = Rankin(t).get();
</pre>

<P>If you want to output Rankin temperature values to an <B>ostream</B>, the functionality described in the article can be extended by simply adding the necessary manipulators and format functions to class <B>Rankin</B>.</P>
</blockquote></body></html>


