<HTML>   
     <HEAD>
<TITLE>March 2001 C++ Experts Forum/From Mechanism to Method</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.03/tocmar.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">From Mechanism to Method: Total Ellipse</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kevlin Henney</FONT></H3>

<HR>
<BLOCKQUOTE>
	
<P>The interface to an object indicates what you can do with it, and what you can do with an object is a matter of design. C++ supports different kinds of interfaces, from the explicit compileable interface of a class to the more implicit requirements-based interfaces associated with the STL. Interfaces can be named and organized in terms of one another, again a matter of design.<P>
<P>The most common form of interface relationship is that of substitutability, which, in its popular form, is associated with the good use of inheritance &#151; if class <B>B</B> is not a kind of a class <B>A</B>, <B>B</B> should probably not publicly inherit from <B>A</B>. More generally, one type is said to be substitutable for another if the second satisfies the interface of the first and can be used in the same context. Satisfaction is a matter of direct realization, where all the features expected of an interface are provided, or specialization, where new features may be added, existing features constrained, or both.</P>
<P>Not all specialization is inheritance and not all substitutability is inheritance based [<a href="#1">1</a>, <a href="#2">2</a>, <a href="#3">3</a>, <a href="#4">4</a>]. Substitutability acts as a more general guideline for the use of inheritance, conversions, operator overloading, templates, and <B>const-volatile</B> qualification.</P>
<P>Substitutability is relative to a given context or use. Normally the context and use are implied, so that statements about substitutability come out as absolutes. For example, when a developer says that instances of class <B>B</B> may be used where <B>A</B> is expected, this is normally a shorthand for saying that pointers or references to <B>B</B> may be used where pointers or references to <B>A</B> are expected. It is unlikely that copy and slice were intended, especially if <B>A</B> is an abstract class.</P>
<P>The idea that a <B>const</B>-qualified type is effectively a supertype of a non-<B>const</B>-qualified type was introduced in my last column <a href="#4">[4]</a>. Each ordinary class can be considered &#151; with respect to <B>const</B> qualification &#151; to have two interfaces, one of which is a specialization of the other. This interesting and different perspective can influence how you go about the design of an individual class, but does it have any other practical and tangible consequences? A single class can support multiple interfaces, but by the same token you can split a class into multiple classes according to interfaces. Consideration of mutability does not simply allow us a rationale for adorning our member functions with <B>const-volatile</B> qualifiers; it can also allow us to separate a single class concept into base and derived parts.</P>

<H3><FONT COLOR="#000080">Ellipsing the Circle</FONT></H3>

<P>Modeling the relationship and similarity between circles and ellipses (or squares and rectangles, or real numbers and complex numbers) is a recurring question in books, articles, and newsgroups [<a href="#5">5</a>, <a href="#6">6</a>, <a href="#7">7</a>]. It pops up with a regularity you could almost set your system clock by. Some believe it to be a problem with inheritance &#151; or indeed object orientation as a whole &#151; whereas others believe it is one of semantics <a href="#5">[5]</a>. But I'm getting ahead of myself: "A circle is a kind of ellipse, therefore <B>circle</B> inherits from <B>ellipse</B>." Let's start at the (apparent) beginning.</P>

<H3><FONT COLOR="#000080">Redundant State</FONT></H3>

<P>A direct transliteration of that English statement gives us the following C++:</P>

<pre>
class ellipse
{
    ...
};

class circle : public ellipse
{
    ...
};</pre>


<P>No problems so far. Depending on your sensibilities, you will next focus on either the public interface or the private implementation. Let's do this back-to-front and focus on the representation first, just to get one of the common problems out of the way. To keep things simple, let's focus only on the ellipse axes:</P>

<pre>class ellipse
{
    ...
private:
    double a, b;
};

class circle : public ellipse
{
    ...
};</pre>

<P>An ellipse's shape can be characterized by its semi-major (<B>a</B>) and semi-minor axes (<B>b</B>), whereas a circle needs only its radius to describe it. This means that there is no need to add any additional state representation in <B>circle</B> as everything that it needs has already been defined in <B>ellipse</B>. So what's the problem? Before you think it, the <B>private</B> specifier does not need to be <B>protected</B> &#151; <I>that</I> would be a problem. The problem is that not only does <B>circle</B> not need any additional state, it actually has too much state: <B>a == b</B> is an assertable invariant of the circle, which means that there is redundant data. It is neither possible to uninherit features (a rock) nor desirable to maintain redundant state (a hard place).</P>
<P>Focusing on inheritance of representation alone could lead you to the topsy-turvy view that <B>ellipse</B> should inherit from <B>circle</B> because it would add to its state. Although bizarre, this view is entertained surprisingly often, (but is entertaining only if the code is not yours to work with). From bad to worse, there would not only be the absence of any concept of substitutability whatsoever, but the <B>circle</B> would also have the wrong state to inherit in the first place: <B>ellipse</B> would not just inherit a <B>double</B>, it would specifically inherit a radius. Now, is the radius the semi-major or the semi-minor axis? The proper conclusion of a representation-focused approach should be that <B>circle</B> and <B>ellipse</B> should not share an inheritance relationship at all. At least this conservative view is safe and free from strange consequences. For some systems, it may also prove to be the right choice in practice: Premature generalization often leads to unnecessary coding effort in creating options that are never exercised.</P>

<H3><FONT COLOR="#000080">Interface Classes</FONT></H3>

<P>Let's focus on the interfaces instead. How can you represent the interface for using instances of a class without actually representing the implementation? In particular, how can you do this if you have related but separate types of objects, e.g., circle versus ellipse? Abstract base classes are often thought of as a mechanism for factoring out common features &#151; interface or implementation, but typically a bit of both &#151; in a class hierarchy. Their most common use is as partially implemented classes, but it turns out that their most powerful use is as pure interfaces.</P>
<P>Interface classes are an idiom rather than a language feature, a method for using a mechanism:</P>

<UL>
<LI>All ordinary member functions in an interface class are pure <B>virtual</B> and <B>public</B>.</LI>
<LI>There are no data members in an interface class, except perhaps <B>static const</B> members.</LI>
<LI>The destructor in an interface class is either <B>virtual</B> and <B>public</B> or non-<B>virtual</B> and <B>protected</B>. In the former case, destruction through the interface class is permitted and therefore must be made safe. In the latter case, destruction is not one of the features offered by the interface and restricting it also excludes the kinds of <B>public</B> problem that require <B>virtual</B>.</LI>
<LI>An interface class may have type members, e.g., nested classes, which need not be abstract.</LI>
<LI>These requirements apply recursively to any base classes.</LI>
<LI>That's it.</LI></UL>

<P>Writing a class that actually does nothing seems counter-intuitive, if not a little uncomfortable, for many developers. However, having a pure representation of interface gives the developer two clear benefits:</P>

<UL>
<LI>The ability to publish the interface to objects without the potential cloud and clutter of implementation, the flip side of which is the ability to focus on implementation detail given a clear interface.</LI>
<LI>Decoupling client code from implementation detail, which reduces build times (assuming that the concrete implementing class is not in the same header) and the rebuild effect of any change to the implementation (remembering that in software development the only constant is change).</LI></UL>

<P>It turns out that these two benefits can be summarized more generally as one: separation of concerns.</P>
<P>Returning to our shapes, we can start establishing the usage for ellipses and circles without getting lost in representation:</P>

<pre>class ellipse
{
public:
    virtual double semi_major_axis() const = 0;
    virtual double semi_minor_axis() const = 0;
    virtual double area() const = 0;
    virtual double eccentricity() const = 0;
    ...
};

class circle : public ellipse
{
public:
    virtual double radius() const = 0;
    ...
};</pre>

<H3><FONT COLOR="#000080">Concrete Leaves</FONT></H3>

<P>The separation of interface from implementation class makes things much clearer. Now, when we come to provide sample implementations, we can see that there is little to be gained from trying to share implementation detail:</P>

<pre>class concrete_ellipse : public ellipse
{
public:
    ellipse(double semi_major, double semi_minor)
      : a(semi_major), b(semi_minor)
    {
    }
    virtual double semi_major_axis() const
    {
        return a;
    }
    virtual double semi_minor_axis() const
    {
        return b;
    }
    virtual double area() const
    {
        return pi * a * b;
    }
    virtual double eccentricity() const
    {
        return sqrt(1 - (b * b) / (a * a));
    }
    ...
private:
    double a, b;
};

class concrete_circle : public circle
{
public:
    explicit circle(double radius)
      : r(radius)
    {
    }
    virtual double radius() const
    {
        return r;
    }
    virtual double semi_major_axis() const
    {
        return r;
    }
    virtual double semi_minor_axis() const
    {
        return r;
    }
    virtual double area() const
    {
        return pi * r * r;
    }
    virtual double eccentricity() const
    {
        return 0;
    }
    ...
private:
    double r;
};</pre>

<P>Should you wish to share implementation, you can turn to other techniques to do so, e.g., the Bridge pattern <a href="#8">[8]</a>, but the choice of representation is kept clear from the presentation of interface.</P>
<P>The hierarchy shown here has two very distinct parts to it: the classes that represent usage and the classes that represent implementation. Put another way, the classes exist either for interface, e.g.:</P>

<pre>void draw(point, const ellipse &amp;);</pre>

<P>or for creation, e.g.:</P>

<pre>concrete_circle unit(1);
draw(origin, unit);</pre>

<P>In the class hierarchy, only the leaves are concrete, and the rest of the hierarchy is abstract &#151; in this case, fully abstract. This design recommendation to "make non-leaf classes abstract" <a href="#9">[9]</a> can also be stated as "never inherit from concrete classes." It often helps to simplify subtle class hierarchies by teasing apart the classes according to the distinct roles that they play.</P>

<H3><FONT COLOR="#000080">Implementation-Only Classes</FONT></H3>

<P>If you wish to take decoupling a step further, the separation of concerns can be further reinforced by introducing the polar opposite of an interface class: an implementation-only class. This idiom allows developers to define classes that can only be used for object creation; subsequent object manipulation must be through interface classes <a href="#10">[10]</a>:</P>

<UL>
<LI>An implementation-only class inherits, using <B>public</B> derivation, from one or more interface classes.</LI>
<LI>All ordinary functions in an implementation-only class are <B>private</B>.</LI>
<LI>Constructors are <B>public</B> to allow creation of instances.</LI>
<LI>All manipulation of instances is done via pointers or references to one of the base interface classes.</LI>
<LI>The destructor is normally <B>private</B> if it is <B>public</B> in the base interface classes. This means that instances of implementation-only classes are normally on the heap, i.e., the result of the <B>new</B> expression is passed immediately to an interface class pointer.</LI>
<LI>If the destructor must be <B>public</B> in the implementation-only class, this means that instances are normally value based and their lifetime is bound by the enclosing scope, e.g., local variables or data members. This is sometimes a little awkward because the object as held cannot have its members called without an explicit upcast! Hence, implementation-only classes make practical sense only for heap-based objects, which is not appropriate for all designs.</LI></UL>

<P>This idiom takes advantage of a feature of C++ that is often seen as a quirk: access specification and <B>virtual</B> function mechanisms are orthogonal. Here are alternative definitions for concrete circles and ellipses:</P>

<pre>class creation_only_ellipse : public ellipse
{
public:
    creation_only_ellipse(double semi_major, double semi_minor);
    ...
private:
    virtual double semi_major_axis() const;
    virtual double semi_minor_axis() const;
    virtual double area() const;
    virtual double eccentricity() const;
    ...
    double a, b;
};

class creation_only_circle : public circle
{
public:
    explicit creation_only_circle(double radius);
    ...
private:
    virtual double radius() const;
    virtual double semi_major_axis() const;
    virtual double semi_minor_axis() const;
    virtual double area() const;
    virtual double eccentricity() const;
    ...
    double r;
};</pre>

<P>In use, we could see a circle being created and used as follows:</P>

<pre>
circle *unit = new creation_only_circle(1);
</pre>

<H3><FONT COLOR="#000080">Change Happens</FONT></H3>

<P>Management summary of the story so far: circles substitutable for ellipses, some useful techniques, and no real problems. However, good as these techniques are in many designs, they have not resolved the challenge that really makes the circle-ellipse problem as infamous as it is. If you look back, or if you are already familiar with the problem, you will notice that there has been a little sleight of hand in the interfaces presented: The only ordinary member functions are <B>const</B> qualified. In other words, there are no modifiers. You cannot resize circles or stretch ellipses.</P>
<P>Let's introduce <I>setters</I> corresponding to the axis <I>getters</I>:</P>

<pre>class ellipse
{
public:
    virtual void semi_major_axis(double) = 0;
    virtual void semi_minor_axis(double) = 0;
    ... // as before
};

class circle : public ellipse
{
public:
    virtual void radius(double) = 0;
    ... //as before
};</pre>

<P>It is fairly obvious what an actual circle does for <B>radius</B> and an actual ellipse does for <B>semi_minor_axis</B> and <B>semi_major_axis</B>, but what does a circle do for the <B>semi_minor_axis</B> and <B>semi_major_axis</B> setters that it has inherited?</P>

<pre>class concrete_ellipse : public ellipse
{
public:
    virtual void semi_major_axis(double new_a)
    {
        a = new_a;
    }
    virtual double semi_minor_axis(double new_b)
    {
        b = new_b;
    }
    ...
private:
    double a, b;
};

class concrete_circle : public circle
{
public:
    virtual void radius(double new_r)
    {
        r = new_r;
    }
    virtual void semi_major_axis(double new_a)
    {
        ... // what goes here?
    }
    virtual double semi_minor_axis(double new_b)
    {
        ... // what goes here?
    }
    ...
private:
    double r;
};</pre>

<P>This is the issue that gets people excited, producing all kinds of fabulous suggestions, all of which violate substitutability in some way:</P>

<UL>
<LI>Set the radius to the new semi-major or semi-minor axis, regardless. This means that <B>semi_major_axis</B> and <B>semi_minor_axis</B> break the contract expected of them, i.e., that they resize either one of the semi-major or semi-minor axis, but not both.</LI>
<LI>Throw an exception, or crash the program with a diagnostic message, when one of the awkward functions is called.</LI>
<LI>Pretend that there isn't really a problem, and that users of the code should not expect anything specific to happen anyway. Besides, all it takes is a little semantic elastic to reinterpret the implied meaning of the <b>semi_major_axis</b> <i>setter</i> not as "reset the semi-major axis" but as "reset the semi-major axis, and do something magical and unspecified, or do nothing."</LI></UL>

<P>None of these are reasonable. Distinct unrelated classes are preferable to any of them.</P>

<H3><FONT COLOR="#000080">No Change</FONT></H3>

<P>When you find yourself at the bottom of a hole, stop digging. The design we developed moved forward in stable, well-defined steps, and only became unstuck with a particular requirement.... Wait a minute, resizing circles and ellipses was never a requirement. In fact, we have no requirements or real statement of the original problem domain. So, we're in the middle of a design that does not work, and we have no requirements; do we blame the design, the paradigm, or what? "A circle is a kind of ellipse" was about as much analysis as we &#151; or indeed most people looking at the problem &#151; set out with. We have not stated the purpose or context of our system: Design is context dependent, so if you remove the context you cannot have meaningful design.</P>
<P>Circles and ellipses also seem such a simple, familiar, and intuitive domain that we all feel like domain experts. However, intuition has misled us: When you were taught conic sections at school, were you ever taught that you could that you could resize them? If you transform an ellipse by stretching it, you have a different ellipse; if you resize a circle, you have a different circle. In other words, if we chose to model our classes after the strict mathematical model, we would not evolve the design beyond the <B>const</B>-member-function-only version, although we might wish to add factory functions to accommodate the transformations. That's it. What violated substitutability was the introduction of change: eliminate it and you have a model that is both accurate and works <a href="#11">[11]</a>.</P>
<P>Now that we understand the real root of the problem &#151; substitutability with respect to change &#151; we can consider alternative approaches that accommodate both change and inheritance-based substitutability. If we do not need both of those features, we can choose to disallow modifiers or not to relate the classes by inheritance, as necessary.</P>

<H3><FONT COLOR="#000080">Change Is the Concern</FONT></H3>

<P>Therefore, separate according to change. Here is a more useful interpretation of the original statement: "a circle is a kind of ellipse, so long as you don't change it as an ellipse." This is perhaps more constrained than is strictly required, i.e., geometrically resizing an ellipse on both of its axes is also safe for circles, but the constraint makes the issues and their solution clearer.</P>
<P>Given that statement, what we want is something like the following:</P>

<pre>
class ellipse
{
    ...
};

class circle : public <I>const</I> ellipse // not legal C++
{
    ...
};</pre>

<P>Other than that one minor nit &#151; that the code isn't legal C++ &#151; we have a solution that allows circles to be substituted for ellipses where they cannot be changed. Where a function expects to change an <B>ellipse</B> object via reference or pointer, a <B>circle</B> would not work, but references and pointers to <B>const</B> <B>ellipse</B> would allow <B>circle</B> objects to be passed.</P>
<P>However, the good news is that the wished-for version does give us a hint as to how we might organize our classes and functions. Factoring the <B>const</B> member functions into a separate interface class gives the following:</P>

<pre>class const_ellipse
{
public:
    virtual double semi_major_axis() const = 0;
    virtual double semi_minor_axis() const = 0;
    virtual double area() const = 0;
    virtual double eccentricity() const = 0;
    ...
};

class ellipse : public const_ellipse
{
public:
    using const_ellipse::semi_major_axis;
    using const_ellipse::semi_minor_axis;
    virtual void semi_major_axis(double) = 0;
    virtual void semi_minor_axis(double) = 0;
    ...
};

class const_circle : public const_ellipse
{
public:
    virtual double radius() const = 0;
    ...
};

class circle : public const_circle
{
public:
    using const_circle::radius;
    virtual void radius(double) = 0;
    ...
};</pre>

<P>For consistency with the standard library's naming conventions for iterators, <B>const_ellipse</B> and <B>ellipse</B> are named rather than <B>ellipse</B> and <B>mutable_ellipse</B>, but your mileage may vary. For consistency within the same design, <B>circle</B> is also split into a <B>const_circle</B> and a <B>circle</B> class.</P>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<P>Substitutability is not always about "is a kind of," and not all forms of specialization fit an inheritance hierarchy out-of-the-box. Natural language is often not a very good guide at this level, so we often need more phrasing options to reveal the useful relationships in our system, such as "implements" and "can be used where a ... is expected."</P>
<P>There are many criteria for partitioning classes into base and derived parts. Taxonomic classification is the most familiar to OO developers, but we have also seen that interface-implementation separation is compelling and that separation with respect to mutability also has a place.</P>

<H3><FONT COLOR="#000080">References</FONT></H3>

<P><a name="1"></a>[1] Kevlin Henney. "From Mechanism to Method: Substitutability," <I>C++ Report</I>, May 2000, also available from http://www.curbralan.com.</P>
<P><a name="2"></a>[2] Kevlin Henney. "From Mechanism to Method: Valued Conversions," <I>C++ Report</I>, May 2000, also available from http://www.curbralan.com.</P>
<P><a name="3"></a>[3] Kevlin Henney. "From Mechanism to Method: Function Follows Form," <I>C/C++ Users Journal C++ Experts Forum</I>, November 2000, http://www.cuj.com/experts/1811/henney.html.</P>
<P><a name="4"></a>[4] Kevlin Henney. "From Mechanism to Method: Good Qualifications," <I>C/C++ Users Journal C++ Experts Forum</I>, January 2001, http://www.cuj.com/experts/1901/henney.html</B>.</P>
<P><a name="5"></a>[5] Marshall Cline, Greg Lomow, and Mike Girou. <I>C++ FAQs</I>, 2nd edition (Addison-Wesley, 1999).</P>
<P><a name="6"></a>[6] James O. Coplien. <I>Advanced C++: Programming Styles and Idioms</I> (Addison-Wesley, 1992).</P>
<P><a name="7"></a>[7] James O. Coplien. <I>Multi-Paradigm Design for C++</I> (Addison-Wesley, 1999).</P>
<P><a name="8"></a>[8] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 1995).</P>
<P><a name="9"></a>[9] Scott Meyers. <I>More Effective C++: 35 New Ways to Improve Your Programs and Designs</I> (Addison-Wesley, 1996).</P>
<P><a name="10"></a>[10] John J. Barton and Lee R. Nackman. <I>Scientific and Engineering C++: An Introduction with Advanced Techniques and Examples</I> (Addison-Wesley, 1994).</P>
<P><a name="11"></a>[11] Kevlin Henney. "Vicious Circles," <I>Overload </I>8, June 1995.</P>


<p><i><b>Kevlin Henney</b> is an independent consultant and trainer specializing in C++, Java, OO design, patterns, and software architecture.  He can be reached at <b>kevlin@curbralan.com</b></i></P>

</blockquote></body></html>


