<HTML>   
     <HEAD>
<TITLE>November 2001 C++ Experts Forum/Conversations</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.11/tocnov.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Conversations: Hungarian wartHogs</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Jim Hyslop and Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p><b><i>Copyright 2001, Jim Hyslop and Herb Sutter</i></b></p>

<p>&quot;Breakthrough!&quot; one of the officers called, poking her head into the mess hall.</p>
<p>Several people, Jeannine and I among them, looked up. &quot;What?&quot; &quot;Whose breakthrough?&quot; &quot;What happened?&quot;</p>
<p>The sudden excitement was palpable, and no wonder &#151; things were worse than ever since the senior officers had made known we'd lost contact with the orbiting station and the main surface base. Likely, they were overrun by the incoming forces, although our officers had not yet officially admitted that we were in a hostile situation. When the news came, we had been sealed into the local base near the excavation site for two days already. And progress on the alien artifacts had continued to be maddeningly slow, knowing how near we must be to a breakthrough. Jeannine seemed closer than ever to figuring out the power requirements.</p> 
<p>&quot;J&auml;ger says he's figured out part of the language, that's what,&quot; she informed us. The obscure writing on the ancient, and mostly defunct, equipment had been a major obstacle to progress. Until now, attempts to decipher it had been largely unsuccessful. &quot;Something about a built-in redundancy &#151; he's doping it out. Don't all rush in to bug him; he needs to concentrate. Thought you'd like to know.&quot; And then the officer's head disappeared as she continued elsewhere to spread the news.</p>
<p>&quot;Redundant information,&quot; I sat back and mused aloud. &quot;Does that ever sound familiar. Why, back on my first job...&quot;</p>

<hr>
<p>&quot;Warts!&quot;</p>
<p>&quot;Beg pardon?&quot; I turned at the sound of the Guru's voice.</p>
<p>&quot;You have warts, my child.&quot;</p>
<p>Suddenly feeling rather self-conscious, I asked: &quot;Uh, where? My medicated creams usually contr&#151;&quot;</p>
<p>&quot;Your latest code is covered in warts!&quot; she interrupted. &quot;Otherwise known as Hungarian notation. Your variables are beginning to look like this.&quot; She picked up the whiteboard marker and wrote: <b>wartHog</b>. &quot;In this case, the variable <b>hog</b>'s wart has nothing to do with the pottery school <a href="#1">[1]</a>.&quot;</pre>
<p>&quot;Oh, that,&quot; I breathed a sigh of relief. &quot;Hungarian notation? Is that all? Sure, yeah, I read a cool article about Hungarian notation, and it sounded like a good idea. Apparently it was quite the trendy thing for a while. Almost kind of a type calculus-ish direction, sort of in a way, you know. So I&#151;&quot;</p>
<p>&quot;Gibberish!&quot; the Guru exclaimed.</p>
<p>&quot;Ah, well,&quot; I faltered. &quot;I thought I said that rather clearly.&quot;</p>
<p>&quot;Not you, my child,&quot; the Guru corrected. &quot;The naming convention you chose to experiment with results in code that looks like gibberish. Even the prophet Petzold had his off days.&quot;</p>
<p>&quot;Hmmmph,&quot; I hmmmphed, only slightly mollified. &quot;Well, it's <i>supposed</i> to make code easier to write and read. For example, I can catch some type errors just by reading the code. If I write something like <b>strcpy( szDestination, pachSource );</b>, I can see a problem immediately &#151; the second parameter is a pointer to an array of characters, but not necessarily null-terminated as <b>strcpy</b> requires. Or if I write <b>printf( &quot;%s&quot;, ulValue );</b>, I can see that I'm passing an <b>unsigned long</b> where a null-terminated string ought to go. The code tells me that I'm doing the wrong thing.&quot;</p>
<p>&quot;Of dubious practical advantage even for type-unsafe calls in C, or in environments when nearly everything is a type-challenged <b>int</b> or <b>void*</b> handle,&quot; she shook her head sadly, &quot;and of no relevance at all in a type-safe object-oriented language like C++. This, you must unlearn. Warts are not information; they are disinformation.</p>
<p>&quot;Consider your own parables. In your first example, in C++ you would use <b>string</b>s, which are objects, and problems like the first cannot arise because a <b>string</b>'s semantics are well defined and encapsulated. One who writes <b>string destination = source;</b> just cannot get the buffer-copying semantics wrong, for they are never exposed and the calling programmer never required to assist them; the implementation details are well and truly encapsulated and always managed for you. As for your second example, in C++ you would normally use streams or other type-safe methods to write output, and type checking along with overload resolution guarantee a type-correct result even if a conversion is needed. One who writes <b>cout &lt;&lt; value;</b> just cannot get the type wrong: if <b>value</b> is an <b>unsigned long</b>, the <b>operator&lt;&lt;</b> for <b>unsigned long</b>s will be invoked; or, if <b>value</b> has a type for which no <b>operator&lt;&lt;</b> is defined but <b>value</b>'s type can be converted unambiguously to a type for which <b>operator&lt;&lt;</b> <i>is</i> defined, that <b>operator&lt;&lt;</b> will be invoked; otherwise, a compile-time error occurs. Not only does the C++ language and standard library detect what would be run-time type errors with other type-unsafe calls, it turns them into compile-time errors.</p>
<p>&quot;In sum, the compiler already knows much more than you do about an object's type. Changing the variable's name to embed type information adds little value and is in fact brittle. And if there ever was reason to use some Hungarian notation in C-style languages, which is debatable, there certainly remains no value when using type-safe languages.&quot;</p> 
<p>&quot;Maybe so,&quot; I acquiesced. If nothing else, she had out-soliloquized me. &quot;But you have to admit that, once you know the rules, using Hungarian makes it easier to create variable names.&quot;</p>
<p>&quot;So certain are you?&quot; the Guru arched her eyebrows. She placed herself in the guest chair. I knew what that meant: she was warming up for a debate. &quot;I had that in mind when I said ‘brittle.' How is it easier, say you?&quot;</p>
<p>&quot;Because the types tell you what to call the variables. It's almost mechanical,&quot; I said. &quot;The variable name is pretty much generated from its type. Once you know the type, you can generate the name,&quot; I rambled, then realized I was rambling, and stopped. When I had begun, I had somehow had the sense there would be something much more profound to say; now that I heard the words coming out of my mouth, it all sounded a bit superficial. I remember wondering why, when it had seemed so much deeper the first time.</p>
<p>&quot;And if the type changes...?&quot; she prompted me just then.</p>
<p>&quot;Well, you'd have to change the variable name, I guess. But!&quot; I exclaimed, &quot;That then forces you to examine each usage of the variable in your program, to ensure that it is still being used properly.&quot;</p>
<p>&quot;Not a bit of it,&quot; she riposted. &quot;It ‘forces' you to do no such thing. In many cases, the programmers will simply forget &#151; or worse, not bother &#151; to consistently and globally change the variable name, never mind check the usage. And once they do not change the name, the code is lying to you, thus violating the commandment that says: ‘Speak truth each one of you with his cubicle neighbor.' This,&quot; she shook her head quietly, &quot;is reprehensible. Such is the disinformational evil that must of necessity follow, sooner or later but probably sooner, from the deceptive <b>wartHog</b> style.&quot;</p> 
<p>&quot;Ah,&quot; I smiled, &quot;that's what global search-and-replace is for!&quot;</p>
<p>&quot;Most assuredly not,&quot; she shook her head again. &quot;Never mind that you could inadvertently change other similar names of objects whose types have not changed! But even if the global replacement were done correctly, what value has it added? For it leaves the programmer no better off for his troubles than he would have been otherwise. If an error has been introduced by the change in type, such as because of implicit conversions, the error remains the same regardless of the object's superficial name, and you have merely added the menial and meaningless documentation work of changing the name. This too is vanity and a striving after wind.&quot;</p> 
<p>It was time for me to fall back and regroup. &quot;But you'd have the error no matter what naming system you used. If I have <b>int count;</b> and I change it to <b>short count;</b>, then many programmers might not bother to check the usage at all and just hope the compiler catches any range problems.&quot;</p>
<p>&quot;That,&quot; the Guru acknowledged, &quot;is what I just said. The problem is the same whether you uglify the variable's name or not, and by uglifying it you have merely added useless maintenance work because then you must additionally maintain the warty name. If you are not yet convinced, my child, I have one small question for you now: How would you apply Hungarian notation to templates?&quot;</p>
<p>That stumped me. &quot;Touché, I guess,&quot; I acknowledged. &quot;A template doesn't really have a type of its own, because the template generates an unknown number of types, one for each set of parameters it's instantiated with. There's no type until it's instantiated, so you can't really create a variable name that encodes the type of the template itself.&quot;</p>
<p>&quot;Well spoken, well said. Even more,&quot; the Guru added, &quot;inside the template definition itself, how would you wartify the names of objects of a template parameter type? You do not know what they are.&quot;</p>
<p>&quot;Oh, I see,&quot; I said. &quot;You mean like this.&quot; On the whiteboard, I scribbled an offhand example:</p>

<pre>
template&lt;typename T&gt;
T AddOne( T wartT ) // what wart should wart be?
                    // papuch? lpsz? huh? 
                    // (handle to unbounded harm)
{
 return wartT + T(1);
}
</pre>

<p>&quot;I believe source code is a form of communication,&quot; the Guru pressed on. &quot;The question is, who is that communication aimed at? The compiler? No. Source code is a medium of communication from one programmer to another. It is an expression of intent, of what is desired to happen. We must strive to keep that communication as simple and clear as possible. In order to do that, variable names should reflect the roles that those variables play. The exact type is secondary to the role. A variable name such as <b>sz</b> tells you only that you are looking at a C-style string. It conveys no information as to the role that string is to play.&quot;</p>

<p>&quot;Well,&quot; I put in, &quot;I don't think anyone would use just <b>sz</b> for a variable name.&quot;</p>
<p>&quot;No? If we are to discuss Hungarian notation, we should discuss the canonical version presented by Dr. Simonyi <a href="#2">[2]</a>. His examples use variables named <b>sz, pch</b>, and so on. Such names, alas, present no useful information. If the variables were instead called <b>xyzzy</b> and <b>yeti</b>, respectively, or even merely <b>x</b> and <b>y</b>, I would still know simply by looking at their declarations that the first indicates an array of characters, and the second is a pointer to a character. Calling them <b>sz</b> and <b>pch</b> adds no useful information not already present in the code, and in particular, it adds no information not already well known to the compiler. Worse, it could be a lie if the type has changed since the wart was chosen. In any event, even if the wart lies not, the questions are still: What <i>are</i> the variables? What are they for? What do they do? How are they used? The wart helps not at all. I have to study the code to understand the roles they play. The code fails to communicate the intent of the programmer; therefore the names <b>sz</b> and <b>pch</b> are poor choices.&quot;</p> 
<p>&quot;In your opinion,&quot; I ventured.</p>
<p>&quot;In my opinion,&quot; the Guru nodded. &quot;Yes, this is still somewhat an area of opinion, rather than hard fact alone, although fact it is that names such as <b>sz</b> are next to useless and that Hungarian warts are brittle in the face of change. When we drafted the coding style guidelines several years ago, Hungarian notation was but one of many areas of lively debate. Unlike some discussions, this one was actually reasonably civilized. We examined the naming convention, listened to the experiences of those who had used it, and eventually came to the consensus that we did not like the convention. Although we did not dislike it enough to prohibit its use outright, we did consider it brittle enough to actively discourage it. Hence, to quote this team's standards:</p> 
<p><div align="center"> "Avoid Hungarian notation. It will make a liar out of you. <br>
Warts are not information, but disinformation."</div></p>
<p>&quot;Hungarian is not only mendacious, but it is high-cholesterol; it is suspected of being fattening, and it is in all probability a flagstone on the road leading to a wasted and dissolute life. Indeed, I recall only one time when Hungarian notation was useful on a project.&quot;</p>
<p>This hook intrigued me. &quot;What was that?&quot;</p>
<p>&quot;One of the programmers on the project was named Paul,&quot; the Guru explained. &quot;Several months into the project, while still struggling to grow a ponytail and build his report-writing module, he pointed out that Hungarian notation had helped him find a sense of identity, for he now knew what he was...&quot; She paused.</p> 
<p>I blinked. It took me about ten seconds, and then I shut my eyes and grimaced painfully. &quot;Pointer to array of <b>unsigned long</b>,&quot; I groaned.</p>
<p>She smiled, enjoying my pain. &quot;True story,&quot; she said <a href="#3">[3]</a>.</p>
<p>It was then that I thought I had found a way to corner her in an inconsistency. &quot;Well,&quot; I asked innocently, having quickly recovered from the awful pun, &quot;what about our convention of using a trailing underscore suffix for member variables? Isn't that kind of a watered-down version of Hungarian?&quot;</p> 
<p>The Guru smiled pleasantly. &quot;So it may appear to the uninitiated, but appearances are in this case deceiving. The underscore has nothing to do with <i>type</i> &#151; it has to do with flagging scope and privacy. It also has a small practical benefit: we realized that passing a parameter to a member function &#151; particularly an initialization function or a constructor &#151; we would often want to use the same name for both the member variable, and for the passed parameter. For example:</p>

<pre>
class T
{
 int count_;
public:
 T() : count_(0) {}
 void init(int count) { count_=count; }
};</pre>

<p>&quot;We are giving the <b>init</b> function a count. Why come up with a different name for the parameter, when both the parameter and the member play the same role? We actually discussed several options for such cases: prefixing member variable names with <b>my</b> (or with <b>our</b> for static data), prefixing the parameter name with <b>given</b>, and so on. In the end, we decided to adopt a trailing underscore for the member, and no underscore for the provided parameter.&quot;</p>
<p>I frowned. &quot;Isn't this convention a little debatable?&quot;</p>
<p>The Guru grinned wryly. &quot;Wendy's personal preference is the other way around. But then no one is perfect, and she did just produce a most exceptionally beautiful child in Jeannine <a href="#4">[4]</a>, so one must make allowances.&quot;</p>

<hr>
<p>&quot;Maybe you should keep your mind more on the here and now,&quot; one of the others at the table muttered. Tensions were high, and everyone was hoping for results from my and Jeannine's work, too.</p>
<p>I was not surprised that it was Jeannine who quickly jumped to my defense, but I was surprised at the vocabulary she applied to set the mutterer straight. A broad vocabulary, deftly applied, is far more effective than mere repetitive epithets and expletives, and Jeannine's tongue-lashing was nothing if not effective. <i>Hmm</i>, I said to myself, said I, <i>now there's a gal who knows about communication...</i></p>

<H3><FONT COLOR="#000080">Further Reading</FONT></H3>

<p>Ottinger's rules for naming variables: &lt;www.objectmentor.com/publications/naming.htm&gt;.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1">[1]</a> The first reader to correctly identify the source of this oblique reference, as well as why it's appropriate for this November 2001 column, will receive an autographed copy of Sutter's <i>More Exceptional C++</i> when it is available in November 2001. All submissions must be sent by email to <b>hsutter@acm.org</b> with the subject line &quot;I know! I know!&quot; and must include a valid (non-munged) return email address and snail-mail postal address. Contest closes at midnight on October 15, 2001.</p>
<p><a name="2">[2]</a> Charles Simonyi. &quot;Hungarian notation.&quot; Reprinted at &lt;http://msdn.microsoft.com/library/en-us/dnvsgen/html/hunganotat.asp&gt;. Readers are encouraged to study the naming convention and decide for themselves, rather than rely on the opinions of the authors.</p>
<p><a name="3">[3]</a> Indeed a true story that happened to one of the authors.</p>
<p><a name="4">[4]</a> Not the same Jeannine as in the framing story. See &quot;Conversations: Back To Base-ics,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, September 2001, &lt;www.cuj.com/experts/1909/hyslop.htm&gt;.</p>

<p><i><B>Jim Hyslop</b> is a senior software designer at Leitch Technology International Inc.  He can be reached at <b>jim.hyslop@leitch.com</b>.</i></p>
<p><i><b>Herb Sutter</b> is an independent consultant and secretary of the  ISO/ANSI C++ standards committee. He is also one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). Herb can be reached at <b>hsutter@acm.org</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
