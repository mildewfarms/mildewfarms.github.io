<HTML><HEAD>
<TITLE>November 2001 C++ Experts Forum/The (B)Leading Edge/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1:  XDRStream.h</A></h4>

<pre>
/****************************************************************
File: XDRStream.h
Copyright (c) 1999-2001 Bleading Edge Software Technologies, Inc.

This Software is distributed under the open source, free 
software model. Permission to use, modify, and distribute this 
Software, including incorporating it into proprietary software, 
is granted without fee, provided this copyright notice appear in 
all copies of the code. You are under no obligation to distribute 
source code which is derived from or uses this Software. You may
not do anything however, to prevent the continued distribution of
this Software under an open source distribution model. This 
includes, but is not limited to, such things as copyrighting or 
claiming authorship of the Software. This Software is distributed 
in the hope that it will be useful, but it is provide &quot;as 
is&quot;, WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

//$--------------------------------------------------------------
$Header: $
Author: Jack W. Reeves

//!-------------------------------------------------------------|
Description:
XDR_Stream is an iostream that reads and writes XDR.

//#-------------------------------------------------------------|
Notes:

//%*************************************************************/
#ifndef UTIL_XDR_STREAM_H
#define UTIL_XDR_STREAM_H

// configuration info
#include &lt;platform.h&gt;

// Standard C++ headers
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;cwchar&gt;

namespace Util {

// uint32_t on all my current platforms
typedef unsigned long XDR_Char;    

// We need a traits class for XDR_Char. I could explicitly
// specialize std::char_traits&lt;&gt; but, after doing that
// originally decided against it. In particular, I  think 
// you want to be careful about adding explicit specializations
// to namespace std. You run a large risk of name conflicts.

struct XDR_Char_Traits {
  typedef XDR_Char         char_type;
  typedef long             int_type;
  typedef std::streamoff   off_type;
  typedef std::streampos   pos_type;
  // not used so removed for now
  typedef std::mbstate_t   state_type; 

  static void assign
    (char_type&amp; c1, const char_type&amp; c2);
  static bool eq
    (const char_type&amp; c1, const char_type&amp; c2);
  static bool lt
    (const char_type&amp; c1, const char_type&amp; c2);

  static int compare
    (const char_type* s1, const char_type* s2);
  static size_t length
    (const char_type* s1);
  static const char_type* find
    (const char_type* s, size_t n, const char_type&amp; a);

  static char_type* move
    (char_type* s1, const char_type* s2, size_t n);
  static char_type* copy
    (char_type* s1, const char_type* s2, size_t n);
  static char_type* assign
    (char_type* s, size_t n, char_type a);

  static int_type not_eof(const int_type&amp; c);
  static char_type to_char_type(const int_type&amp; c);
  static int_type to_int_type(const char_type&amp; c);
  static bool eq_int_type
    (const int_type&amp; c1, const int_type&amp; c2);
  static int_type eof();

  // extra utility functions
  static void swap_bytes(char_type&amp; c);
  static void pad(char_type&amp; c, int);
};


// The stream buffer class is just a specialization
typedef 
std::basic_streambuf&lt;XDR_Char, XDR_Char_Traits&gt; XDR_Streambuf;

// input streams 
class iXDR_Stream : 
  virtual public std::basic_ios&lt;XDR_Char, XDR_Char_Traits&gt; 
{
public:
  // Types inherited from basic_ios
  typedef std::basic_ios&lt;XDR_Char, XDR_Char_Traits&gt; inherited;
  typedef XDR_Char                 char_type;
  typedef XDR_Char_Traits          traits_type;
  typedef traits_type::int_type    int_type;
  typedef traits_type::pos_type    pos_type;
  typedef traits_type::off_type    off_type;

  // Input stream sentry class
  class sentry {
    bool    _ok;
  public:
    explicit sentry(iXDR_Stream&amp; ixs) : _ok(ixs.good()) {}
    ~sentry() {}
    operator bool() const    { return _ok; }
  };

  // Support for reference semantics
  class IdToObjMap {
    typedef std::map&lt;long, void*&gt; ObjMap;
    ObjMap    _objMap;
  public:
    IdToObjMap();
    ~IdToObjMap();
    void*                   find(long id);
    std::pair&lt;void*, bool&gt;  insert(long id, 
      void* obj);
    void*&amp;                  operator[](long id);
  private:
    IdToObjMap(const IdToObjMap&amp;);
    IdToObjMap&amp; operator=(const IdToObjMap&amp;);
  };

  class IdToTypeMap {
    typedef std::map&lt;long, std::string&gt; TypeMap;
    TypeMap    _typeMap;
  public:
    IdToTypeMap();
    ~IdToTypeMap();
    std::string                 find(long id);
    std::pair&lt;std::string,bool&gt; insert
      (long id, const std::string&amp; type);
    std::string&amp;                operator[](long id);
  private:
    IdToTypeMap(const IdToTypeMap&amp;);
    IdToTypeMap&amp; operator=(const IdToTypeMap&amp;);
  };

private:
  // data
  std::streamsize    _gcount;
  IdToObjMap         _id2objMap;
  IdToTypeMap        _id2typeMap;

public:
  // constructor / destructor
  explicit iXDR_Stream(XDR_Streambuf* sb);
  virtual ~iXDR_Stream();

  // standard manipulators
  iXDR_Stream&amp;   operator&gt;&gt;
    (iXDR_Stream&amp; (*pf)(iXDR_Stream&amp;));
  iXDR_Stream&amp;   operator&gt;&gt;
    (inherited&amp; (*pf)(inherited&amp;));
  iXDR_Stream&amp;   operator&gt;&gt;
    (std::ios_base&amp; (*pf)(std::ios_base&amp;));

  // encoded input
  iXDR_Stream&amp;   operator&gt;&gt;(bool&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(char&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(signed char&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(unsigned char&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(short&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(unsigned short&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(int&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(unsigned int&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(long&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(unsigned long&amp; n);
  iXDR_Stream&amp;   operator&gt;&gt;(float&amp; f);
  iXDR_Stream&amp;   operator&gt;&gt;(double&amp; f);
  iXDR_Stream&amp;   operator&gt;&gt;(long double&amp; f);

  // copy
  iXDR_Stream&amp;   operator&gt;&gt;(XDR_Streambuf* sb);

  // opaque data extractors
  size_t            get_opaque(void* d, size_t l);
  size_t            vget_opaque(void* d, size_t l);

  // array extractors
  template&lt;typename T&gt;
  ptrdiff_t         get_array(T* a, ptrdiff_t l);
  template&lt;typename T&gt;
  ptrdiff_t         vget_array(T* a, ptrdiff_t l);

  // string extractors
  size_t            vget_string(char* s, size_t l);

  // unformated input
  std::streamsize   gcount() const    { return _gcount; }

  int_type          get();
  iXDR_Stream&amp;  get(char_type&amp; c);
  iXDR_Stream&amp;  read(char_type* s, std::streamsize n);

  int               sync();

  pos_type          tellg();
  iXDR_Stream&amp;  seekg(pos_type);
  iXDR_Stream&amp;  seekg(off_type, std::ios_base::seekdir);

  // Support for reference semantics
  IdToObjMap&amp;   id2obj()    { return _id2objMap; }
  IdToTypeMap&amp;  id2type()   { return _id2typeMap; }

protected:
  iXDR_Stream();
};

// opaque data extractors
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, std::vector&lt;unsigned char&gt;&amp; data);

// array extractors
template&lt;typename T&gt;
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, std::vector&lt;T&gt;&amp; arr);

// string extractors
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, char* s);
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, signed char* s);
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, unsigned char* s);
iXDR_Stream&amp; operator&gt;&gt;
  (iXDR_Stream&amp;, std::string&amp; str);

// functions which allocate the data area from the free
// store and return it 
// NOTE: clients are responsible for calling delete[] on the 
//       returned  pointer
// NOTE: the 'string' version always null terminates the 
//       returned string
std::pair&lt;unsigned char*, size_t&gt; vget_opaque
  (iXDR_Stream&amp; ixs, size_t max = size_t(-1));
template&lt;typename T&gt; std::pair&lt;T*, ptrdiff_t&gt; vget_array
  (iXDR_Stream&amp; ixs, ptrdiff_t max = -1);
std::pair&lt;char*, size_t&gt; vget_string
  (iXDR_Stream&amp; ixs, size_t max =  size_t(-1));

// optional data
template&lt;typename T&gt; T* get_optional(iXDR_Stream&amp; ixs);

// support for reference semantics
void* get_objId(iXDR_Stream&amp; ixs, long&amp; id);
void  map_objId(iXDR_Stream&amp; ixs, long id, void* obj);

// support for polymorphism
std::string get_typeId(iXDR_Stream&amp; ixs, long&amp; id);
void        map_typeId(iXDR_Stream&amp; ixs, long id, 
  const std::string&amp; type);


//
// Output streams
//
class oXDR_Stream :
  virtual public std::basic_ios&lt;XDR_Char, XDR_Char_Traits&gt; 
{
public:
  // Types inherited from basic_ios
  typedef std::basic_ios&lt;XDR_Char, XDR_Char_Traits&gt; inherited;
  typedef XDR_Char               char_type;
  typedef XDR_Char_Traits        traits_type;
  typedef traits_type::int_type  int_type;
  typedef traits_type::pos_type  pos_type;
  typedef traits_type::off_type  off_type;

  // Output stream sentry
  class sentry {
    bool    _ok;
  public:
    explicit sentry(oXDR_Stream&amp; oxs) : _ok(oxs.good()) {}
    ~sentry() {}
    operator bool() const { return _ok; }
  };

  // Support for reference semantics
  class ObjToIdMap {
    typedef std::map&lt;const void*, long&gt; IdMap;
    long    _id;
    IdMap   _idMap;
  public:
    ObjToIdMap();
    ~ObjToIdMap();
    long    find(const void* obj);
    std::pair&lt;long,bool&gt; insert(const void* obj);
    long    operator[](const void* obj);
  private:
    ObjToIdMap(const ObjToIdMap&amp;);
    ObjToIdMap&amp; operator=(const ObjToIdMap&amp;);
  };

  // Support for polymorphism
  class TypeToIdMap {
    typedef std::map&lt;std::string, long&gt; IdMap;
    long    _id;
    IdMap   _idMap;
  public:
    TypeToIdMap();
    ~TypeToIdMap();
    long    find(const std::string&amp; type);
    std::pair&lt;long,bool&gt; insert(const std::string&amp; type);
    long    operator[](const std::string&amp; type);
  private:
    TypeToIdMap(const TypeToIdMap&amp;);
    TypeToIdMap&amp; operator=(const TypeToIdMap&amp;);
  };


private:
  // data
  ObjToIdMap    _obj2idMap;
  TypeToIdMap   _type2idMap;

public:
  // constructor / destructor
  explicit oXDR_Stream(XDR_Streambuf* sb);
  virtual ~oXDR_Stream();

  // prefix / suffix
  class sentry;

  // standard manipulators
  oXDR_Stream&amp; operator&lt;&lt;(oXDR_Stream&amp; (*pf)(oXDR_Stream&amp;));
  oXDR_Stream&amp; operator&lt;&lt;(inherited&amp; (*pf)(inherited&amp;));
  oXDR_Stream&amp; operator&lt;&lt;(std::ios_base&amp; (*pf)(std::ios_base&amp;));

  // encoded output
  oXDR_Stream&amp;   operator&lt;&lt;(bool n);
  oXDR_Stream&amp;   operator&lt;&lt;(char n);
  oXDR_Stream&amp;   operator&lt;&lt;(signed char n);
  oXDR_Stream&amp;   operator&lt;&lt;(unsigned char n);
  oXDR_Stream&amp;   operator&lt;&lt;(short n);
  oXDR_Stream&amp;   operator&lt;&lt;(unsigned short n);
  oXDR_Stream&amp;   operator&lt;&lt;(int n);
  oXDR_Stream&amp;   operator&lt;&lt;(unsigned int n);
  oXDR_Stream&amp;   operator&lt;&lt;(long n);
  oXDR_Stream&amp;   operator&lt;&lt;(unsigned long n);
  oXDR_Stream&amp;   operator&lt;&lt;(float f);
  oXDR_Stream&amp;   operator&lt;&lt;(double f);
  oXDR_Stream&amp;   operator&lt;&lt;(long double f);

  //copy
  oXDR_Stream&amp;   operator&lt;&lt;(XDR_Streambuf* sb);

  // opaque data inserters
  oXDR_Stream&amp;   put_opaque(const void* d, size_t l);
  oXDR_Stream&amp;   vput_opaque(const void* d, size_t l);

  // array inserters
  export template&lt;typename T&gt;
  oXDR_Stream&amp;   put_array(const T* a, ptrdiff_t l);
  export template&lt;typename T&gt;
  oXDR_Stream&amp;   vput_array(const T* a, ptrdiff_t l);

  // string inserters
  oXDR_Stream&amp;   vput_string(const char* s, size_t l);

  // unformated output
  oXDR_Stream&amp;   put(char_type c);
  oXDR_Stream&amp;   write(const char_type* s, std::streamsize n);

  oXDR_Stream&amp;   flush();

  pos_type           tellp();
  oXDR_Stream&amp;   seekp(pos_type);
  oXDR_Stream&amp;   seekp(off_type, ios_base::seekdir);

  // Support for reference semantics and polymorphism
  ObjToIdMap&amp;    obj2id()    { return _obj2idMap; }
  TypeToIdMap&amp;   type2id()   { return _type2idMap; }

protected:
  oXDR_Stream();
};

// opaque data inserters
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const std::vector&lt;unsigned char&gt;&amp; data);

// array inserters
template&lt;typename T&gt;
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const std::vector&lt;T&gt;&amp; data);

// string inserters
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const char* s);
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const signed char* s);
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const unsigned char* s);
oXDR_Stream&amp; operator&lt;&lt;
  (oXDR_Stream&amp;, const std::string&amp; str);

// optional data
template&lt;typename T&gt;
oXDR_Stream&amp; put_optional
  (oXDR_Stream&amp; oxs, const T* data);

// manipulators
oXDR_Stream&amp; flush(oXDR_Stream&amp;);

// reference objects
bool put_objId
  (oXDR_Stream&amp; oxs, const void* obj);

// polymorphic objects
bool put_typeId
  (oXDR_Stream&amp; oxs, const std::string&amp; type);

//
// Input / output streams
//
class XDR_Stream : 
  public iXDR_Stream, public oXDR_Stream {
public:
  XDR_Stream(XDR_Streambuf* sb);
  virtual ~XDR_Stream();

protected:
  XDR_Stream();
};


//
// Inline implemetations
//


//
// XDR_Char_Traits
//
inline void
XDR_Char_Traits::assign
  (char_type&amp; c1, const char_type&amp; c2)
{  c1 = c2; }

inline bool
XDR_Char_Traits::eq
  (const char_type&amp; c1, const char_type&amp; c2)
{  return c1 == c2; }

inline bool
XDR_Char_Traits::lt
  (const char_type&amp; c1, const char_type&amp; c2)
{  return c1 &lt; c2; }

inline XDR_Char_Traits::int_type
XDR_Char_Traits::not_eof(const int_type&amp; c)
{  return (eq_int_type(eof(), c) ? 0 : c); }

inline XDR_Char_Traits::char_type
XDR_Char_Traits::to_char_type(const int_type&amp; c)
{  return c; }

inline XDR_Char_Traits::int_type
XDR_Char_Traits::to_int_type(const char_type&amp; c)
{  return c; }

inline bool
XDR_Char_Traits::eq_int_type
  (const int_type&amp; c1, const int_type&amp; c2)
{  return c1 == c2; }

inline XDR_Char_Traits::int_type
XDR_Char_Traits::eof() 
{  return -1; }


//
// iXDR_Stream -
//  member functions
inline iXDR_Stream&amp;
iXDR_Stream::operator&gt;&gt;
  (iXDR_Stream&amp; (*pf)(iXDR_Stream&amp;))
{
  pf(*this); return *this;
}

inline iXDR_Stream&amp;
iXDR_Stream::operator&gt;&gt;
  (inherited&amp; (*pf)(inherited&amp;))
{
  pf(*this); return *this;
}

inline iXDR_Stream&amp;
iXDR_Stream::operator&gt;&gt;
  (std::ios_base&amp; (*pf)(std::ios_base&amp;))
{
  pf(*this); return *this;
}


// iXDR_Stream -
//  non-member functions
inline iXDR_Stream&amp;
operator&gt;&gt;
  (iXDR_Stream&amp; xis, signed char* s)
{
  return operator&gt;&gt;
  (xis, reinterpret_cast&lt;char*&gt;(s));
}


inline iXDR_Stream&amp;
operator&gt;&gt;
  (iXDR_Stream&amp; xis, unsigned char* s)
{
  return operator&gt;&gt;
  (xis, reinterpret_cast&lt;char*&gt;(s));
}


//
// oXDR_Stream -
//  member functions
inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;
  (oXDR_Stream&amp; (*pf)(oXDR_Stream&amp;))
{
  pf(*this); return *this;
}
  

inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;
  (inherited&amp; (*pf)(inherited&amp;))
{
  pf(*this); return *this;
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;
  (std::ios_base&amp; (*pf)(std::ios_base&amp;))
{
  pf(*this); return *this;
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(bool n)
{
  return operator&lt;&lt;
  (static_cast&lt;long&gt;(n ? 1 : 0));
}
  

inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(char n)
{
  return operator&lt;&lt;
    (static_cast&lt;long&gt;( static_cast&lt;signed char&gt;(n) ));
}


inline oXDR_Stream&amp; 
oXDR_Stream::operator&lt;&lt;(signed char n)
{
  return operator&lt;&lt;
    (static_cast&lt;long&gt;(n));
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(unsigned char n)
{
  return operator&lt;&lt;
    (static_cast&lt;unsigned long&gt;(n));
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(short n)
{
  return operator&lt;&lt;
    (static_cast&lt;long&gt;(n));
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(unsigned short n)
{
  return operator&lt;&lt;
    (static_cast&lt;unsigned long&gt;(n));
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(int n)
{
  return operator&lt;&lt;
    (static_cast&lt;long&gt;(n));
}


inline oXDR_Stream&amp;
oXDR_Stream::operator&lt;&lt;(unsigned int n)
{
  return operator&lt;&lt;
    (static_cast&lt;unsigned long&gt;(n));
}


//
// oXDR_Stream -
//  non-member functions
inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const std::vector&lt;unsigned char&gt;&amp; d)
{
  return oxs.vput_opaque(&amp;d[0], d.size());
}


template&lt;typename T&gt;
inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, 
  const std::vector&lt;T&gt;&amp; v)
{
  return oxs.vput_array(&amp;v[0], v.size());
}


inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const char* s)
{
  return oxs.vput_string(s, ::strlen(s));
}


inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const signed char* s)
{
  return oxs &lt;&lt; reinterpret_cast&lt;const char*&gt;(s);
}


inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const unsigned char* s)
{
  return oxs &lt;&lt; reinterpret_cast&lt;const char*&gt;(s);
}


inline oXDR_Stream&amp;
operator&lt;&lt;
  (oXDR_Stream&amp; oxs, const std::string&amp; str)
{
  return oxs.vput_string(str.data(), str.size());
}


//
// oXDR_Stream -
//  manipulators
inline oXDR_Stream&amp;
flush(oXDR_Stream&amp; oxs)
{
  return oxs.flush();
}

} //&gt; namespace Util


#ifdef EXPORT_NOT_SUPPORTED
#include &quot;XDRStream_reader.hxx&quot;
#include &quot;XDRStream_writer.hxx&quot;
#endif

#endif
</pre>


</BODY></HTML>
