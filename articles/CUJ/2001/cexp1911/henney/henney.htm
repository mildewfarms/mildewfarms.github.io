<HTML>   
     <HEAD>
<TITLE>November 2001 C++ Experts Forum/From Mechanism to Method</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2><A HREF="../../19.11/tocnov.htm"></A><FONT COLOR="#FF0000">   C++ Experts Forum</FONT></H2>

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">From Mechanism to Method: Generic Decoupling</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Kevlin Henney</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>Simplification of code is often equated with the elimination of options. At best, this turns out to be a false correlation; at worst, it hampers the long-term code quality and development. The side effects of premature generalization and over-abstraction <a href="#1">[1]</a> are as much a problem in software as the consequences of premature optimization: complexity, unmaintainability, brittleness, bloatware, strengthened coupling, weakened cohesion, loss of flexibility &#151; in short, a lot of criticisms that we would prefer not to have leveled at our own code.</p> 
<p>It is true that in many cases of simplification options will be eliminated, but more often than not the eliminated options are the ones that tended to complicate the code or were of little practical use in the first place &#151; dead code waiting for a garbage collector.</p>
<p>For example, in the C++ Standard library, the only noticeable role that traits and allocator parameters of the <b>std::basic_string</b> serve is to complicate the usage and error reporting on, typically, <b>std::string</b>. Their role is so constrained as to make them almost completely useless. The few people that take advantage of them are often attempting to solve the wrong problem or are employing the wrong solution. There is in fact a great deal of scope for increased simplicity and useful parameterization in string types [<a href="#2">2</a>, <a href="#3">3</a>]; it's just a shame that <b>std::basic_string</b> and its moribund parameters are already parked in that space.</p>
<p>It is possible to simplify the structure of software without losing effective options. It is even possible to do so and increase your options. Now, that sounds worthwhile: simpler <i>and</i> more flexible.</p>

<H3><FONT COLOR="#000080">Decoupling in General</FONT></H3>

<p>Although we cannot predict the future with any certainty, it is still possible to write code that is graceful and accommodating &#151; rather than troublesome and resistant &#151; in the face of change. Software development is concerned with the development of structure &#151; partitioning and connection, separation and composition &#151; so any conscious and conscientious approach to software development should have, as one of its prominent manifesto promises, a clear focus on structure management.</p>
<p>The aggressive pursuit of LCHC (low coupling and high cohesion) can ensure that the effect of change is simplified and isolated, rather than traumatic and global. LCHC also simplifies testing, building, versioning, experimentation, optimization, team organization, and pretty much any other development activity you can think of that absorbs more time, effort, or grief than you had originally anticipated. Sadly, few approaches can genuinely boast LCHC as one of their main pledges, preferring instead the active pursuit of more obviously crowd-pleasing headlines such as <i>reuse</i>.</p>
<p>The trick to achieving generality is, somewhat counter-intuitively, to make the code specific enough to be fit for purpose. A fit to the task in hand must be targeted with one eye; the other should be seeking opportunities to keep options open, but without attempting to pursue all of the choices. It is tempting to try to enumerate all the possible ways in which something could change and be adapted and then incorporate all the necessary hooks and extra parameterization into your design. Unfortunately this style tends to make your code more complex to understand. In fact, your code can become so full of conveniences that it's almost impossible to use either simply or correctly. Over-guessing may narrow rather than widen your options. You &#151; and your users &#151; may end up with a lot of unused code and many workarounds.</p>
<p>By contrast, a concerted focus on dependency management will deliver you some tangible benefits in the short term &#151; development times, build times, lunch times &#151; and reduce the cost of change in the long term. The loose coupling keeps the code supple and more stable as, over time, the genuine sources of variation, and therefore parameterization, become apparent and needed.</p> 
<p>So what are the sources of coupling in C++ code? We can classify two basic forms of coupling:</p>

<UL>
<LI><i>Physical coupling</i> requires that for the compilation of one piece of code the compiler must see another piece of code. In practical terms this means that the code depended upon appears in the same source file or is pulled in by <b>#include</b>.</LI>
<LI><i>Conceptual coupling</i> <a href="#4">[4]</a> implies that for a piece of code to work there is a dependency on another concept, which may exist either tacitly outside the code or explicitly within it. For instance, a template parameter can be described by a set of requirements outside the code, whereas a class definition is known to the compiler.</LI>
</UL>

<p>One does not necessarily imply the other:</p>

<UL>
<LI> An inheritance relationship represents both a conceptual and a physical relationship. A derived class is conceptually dependent on its base class(es) because it may use or override features. The compiler must also be able to see the definition of any base classes to compile a derived class.</LI>
<LI> A class or function template conceptually depends on its template parameters, but the use of the parameter does not require any <b>#include</b> support. A dependency on an actual parameter type occurs at the point of use of instantiation, but not at the point of definition.</LI>
<LI> The use of <b>inline</b> functions or template code written in headers may introduce a physical dependency, but not necessarily a conceptual dependency. Use of an <b>inline</b> function or a class template also pulls in any of the dependencies that are used in implementation, but are not relevant to the usage interface.</LI>
</UL>

<p>There are four complementary approaches for decoupling a C++ system.</p>

<H4><FONT COLOR="#000080">Dynamic Typing</FONT></H4>

<p>Why does that compile-link cycle take so long? Static type checking is the root cause of the delay; the design of the preprocessor merely exacerbates the issue. Want to know that your code makes at least basic sense? Let the compiler check your types and how you're using them and then let the linker tie all the loose ends in your program together. Efficiency and confidence in execution is your reward; extended surfing breaks and water cooler conversations are your punishment. Hmm, OK, perhaps we need a different spin on this: long build times put the <i>irritation</i> and <i>detrimental</i> into iterative and incremental development, frustration and time wasting that are only temporarily relieved by a machine upgrade.</p>
<p>If you weaken the type system you reduce the physical dependencies. This may conjure up images of <b>void *</b> in your mind, but banish those thoughts immediately: I want to loosen coupling, but the kind of unsafe promiscuity that <b>void *</b> often encourages is not quite what I had in mind. A more dynamically checked type system lies at the heart of many interpreted languages, from LISP to Smalltalk, Awk to Ruby. Good support for reflection allows you to get at the soft underbelly of other statically typed systems, such as Java or the meta-information available in many component middleware architectures. It is a matter of balance: you loosen the checking at compile time to increase flexibility, but you increase scope for failure at run time. You pays your money; you makes your choices; you takes your chances. That's the essence of design.</p> 
<p>C++ does not currently have good standard support for reflection: the existing RTTI mechanism is a foot in the door, but no more. In spite of the half-open door, C++ programs often make effective use of dynamic typing:</p>

<UL>
<LI>Variant types, such as <b>boost::any</b> [<a href="#5">5</a>, <a href="#6">6</a>] or CORBA's <b>any</b> type, can hold values of arbitrary type. Depending on your application you can choose to leave the type fully uninterpreted, as in the case of <b>any</b>, or you can impose constraints on the contained types that are reflected in the interface of the variant (e.g., comparison or arithmetic operations).</LI>
<LI>Work in terms of strings, interpreting them as necessary and with respect to the context. In the Age of the Internet, strings are the new integers: everyone's using them for everything. Whether we are talking about internal command languages or data exchange, strings are remarkably versatile &#151; given the right functions and classes, they support the Three Rs. You can take some of the guesswork out of how to structure your data and work with it by adopting a data definition language or meta-language, of which XML is certainly the most fashionable.</LI>
</UL>

<p>However, remember that these techniques reduce only the physical dependencies not the conceptual ones. Those are as strong as ever and will be lining up to bite you at run time should you disrespect them. You still need to know how to use them. Their correct usage is now implicit rather than explicit, and semantic drift between versions or developers is all too easy.</p>
<p>Flexibility has a price... and a number. This was recently brought home to me when I was entering a particularly long order number into a spreadsheet cell: the spreadsheet abbreviated the many significant digits of the reference number using scientific notation. Aha, yes, it <i>is</i> a number, just not <i>that</i> kind of number.</p>

<H4><FONT COLOR="#000080">Interface Classes</FONT></H4>

<p>Inheritance in its most common employment seems to be used more for subclassing (with a focus on inheritance of code) than for subtyping (with a focus on classification and substitutability). Hierarchies that accumulate implementation, often with concrete classes inheriting from concrete classes, lead to classes that are hard to understand.</p> 
<p>But <i>common </i>is not the same as <i>recommended</i>: such usage is in direct contrast to much of the advice on practice that is available and held in some regard. For instance, only the leaves of a hierarchy should be concrete; its roots should be fully abstract. <b>virtual</b> functions should be introduced into a hierarchy as pure <b>virtual</b>s rather than with default implementations that must be guessed, and delegation and non-<b>public</b> derivation should be used to acquire implementation when there is no intent to hold a reference or pointer to a base class.</p>
<p>Is this just so much theory? No, it's better than either just theory or just practice: it's both. In practice it can be demonstrated that the failure to use inheritance in a controlled manner can be much worse than not using it at all <a href="#7">[7]</a>. The use of deep hierarchies, with implementation scattered, defaulted, accumulated, and overridden over a derived trail of concrete classes, actively ambushes our ability as humans to grasp all the features of a concept within a single embrace. This kind of inheritance often sabotages the localization benefits of encapsulation.</p> 
<p>All this may sound harsh and idealistic, but it is typically less harsh and far less idealistic than believing in the timely development, and appropriate quality, of a project that takes the common but unrecommended path. Of course there is wriggle room for pragmatism, for compromise. But remember that <i>to compromise</i> has two different meanings &#151; make sure you choose the one that means <i>to settle or resolve by making concessions</i> rather than the one that means <i>to expose to suspicion, disrepute, or mischief</i>.</p>
<p>Inheritance is the strongest form of logical coupling you can have. The need for physical coupling follows in its wake: base classes must be directly visible or included in the source above their derived classes. But derivation is a blade with two edges: you can also use it to reduce coupling in a system.</p>
<p>An <i>interface class</i> [<a href="#8">8</a>, <a href="#9">9</a>] (also known as a <i>protocol class</i> <a href="#10">[10]</a>) refocuses a class hierarchy's clients on the conceptual interface, away from the physical baggage and variability of its descendents. The absence of code in an interface class contributes to its stability <a href="#11">[11]</a> and comprehensibility &#151; although a code-free class sometimes clashes with a programmer's instincts for producing executable code. The Observer pattern <a href="#12">[12]</a> is an example of a larger pattern that includes this smaller interface-decoupling pattern:</p>


<pre>
class subject;

class observer
{
public:
   virtual ~observer();
   virtual void update(subject *) = 0;
protected:
   observer() {}
private:
   observer(const observer &amp;);
   observer &amp;operator=(const observer &amp;);
};
</pre>

<p>The use of <b>virtual</b> functions in interface classes is distinctly public. Such a recommendation is clearly in tension with the alternative recommendation that class hierarchies should always have non-<b>virtual</b> public interfaces <a href="#13">[13]</a>. A number of practices, such as the Template Method pattern <a href="#12">[12]</a> and the corresponding Form Template Method refactoring <a href="#14">[14]</a>, tend to give rise to non-<b>virtual</b> public interfaces in C++. Such interfaces have some useful properties, but they typically arise as a consequence of specific practices rather than being a necessary and general virtue in their own right. They are by no means the only tool in the box. Design should be considered a dialogue with a situation rather than a monologue; there is often more than one reasonable route that such a conversation may take.</p> 

<H4><FONT COLOR="#000080">Hidden Delegation</FONT></H4>

<p>Wherever there is a recommendation concerning inheritance, you can be sure that not far behind it is a contrasting recommendation framed in terms of delegation. The root of delegation-based decoupling is the forward declaration. It can be used both to resolve the problem of tail-chasing cyclic dependencies and to reduce the exposed physical dependency of using an <b>#include</b>, reducing the essential surface area between class definitions:</p> 

<pre>
class observer;

class subject
{
public:
   virtual ~subject();
   virtual void attach(observer *) = 0;
   virtual void detach(observer *) = 0;
   ...
protected:
   subject() {}
private:
   subject(const subject &amp;);
   subject &amp;operator=(const subject &amp;);
};
</pre>

<p>For classes that are, by nature, concrete and not part of a class hierarchy, interface decoupling through interface classes has relatively little to offer. Value objects <a href="#5">[5]</a>, for instance, are best manipulated directly in terms of their concrete type. Interface classes are primarily a means for decoupling class hierarchies. Another practice is required for specifically concrete classes.</p>
<p>The common idiom goes by various names, of which the most evocative is also the name originally coined for it in the late 1980s: the Cheshire Cat idiom <a href="#15">[15]</a>. The name, taken from Lewis Carroll's surreal cat whose ability to disappear except for its grin quite bemused Alice, is apt:</p>

<pre>
class cat
{
public:
   ...
private:
   class body;
   body *self;
};
</pre>

<p>Here the representation disappears entirely from the class definition in the header, leaving behind only the discreet smile of a pointer. The details of the body are elaborated in the corresponding source file:</p>

<pre>
class cat::body
{
public:
   body();
   ~body();
   ... // representation details
};
</pre>

<p>This technique also goes by the name of the Pimpl idiom <a href="#16">[16]</a> or, very descriptively, as the Fully Insulating Concrete Class <a href="#10">[10]</a>. Naturally, all idioms have consequences that must be considered: the additional level of indirection, extra memory management, and restriction on inlined functions are the price of the afforded creature comforts in this case. The introduction of this separation also allows representation sharing, although this is not a path one should tread either necessarily or lightly <a href="#3">[3]</a>.</p> 
<p>Cheshire Cats can be introduced to complement the use of interface classes, ensuring that class hierarchy users are as insulated from representation details as possible. However, they are less effective with class templates. Compiler portability constraints mean that it is common to require the definition of class template members in header files. In such situations, having to include the full definition of the nested body in the header rather takes the smile off the technique.</p>

<H4><FONT COLOR="#000080">Template Parameters</FONT></H4>

<p>Templates are not normally associated with loosening physical coupling. Quite the opposite. The inclusion of source code in headers imposes a significant burden on the size of headers and the patience of the programmer. However, the conceptual loosening that arises from defining function and class templates independently of their actual template parameter types has a knock-on physical decoupling effect. The point at which the physical dependency on the actual parameter type is needed is deferred to the point of use in the code.</p>
<p>Generic decoupling forms the basis of generic programming and the STL: templated iterator ranges for algorithm-based functions and container constructors, and templated value types to allow any appropriate convertible value to be used in a function, member or non-member. The following function (inlined for brevity) shows how the implementation of an Observer's <b>subject</b> class might use existing STL features to automate observer updates:</p>

<pre>
class subjected : public subject
{
   ...
   void notify()
   {
      std::for_each(
         observers.begin(), observers.end(),
         std::bind2nd(
            std::mem_fun(&amp;observer::update), this));
   }
   ...
   std::list&lt;observer *&gt; observers;
};
</pre>

<p>An alternative approach perhaps demonstrates a number of generic-decoupling techniques a little more explicitly:</p>

<pre>
template&lt;typename argument_type&gt;
class update
{
public:
   explicit update(argument_type argument)
     : argument(argument)
   {
   }
   template&lt;typename updateable&gt;
   void operator()(updateable *target) const
   {
      target-&gt;update(argument);
   }
private:
   argument_type argument;
};

template&lt;typename argument_type&gt;
update&lt;argument_type&gt; updater(argument_type argument)
{
   return update&lt;argument_type&gt;(argument);
}
</pre>

<p>This generalized code leads to the following crisp usage:</p>

<pre>
class subjected : public subject
{
   ...
   void notify()
   {
      std::for_each(
         observers.begin(), observers.end(), updater(this));
   }
   ...
   std::list&lt;observer *&gt; observers;
};
</pre>

<p>The obvious trade off with using templates to decouple is that implementation detail typically migrates to header files. This is particularly noticeable when introducing member function templates in place of ordinary member functions. Another consequence of the decision to template member functions is that they cannot be declared <b>virtual</b>. A more dynamically typed, variant-based approach can counterbalance this [<a href="#5">5</a>, <a href="#17">17</a>].</p>
<p>What is also apparent with generic decoupling is that the code tends to become more flexible and more precise as an immediate consequence. For instance, a different take on the needs of an observer dispenses with the need for any forward declarations:</p>

<pre>
template&lt;typename subject&gt;
class observer
{
public:
   virtual ~observer();
   virtual void update(subject *) = 0;
protected:
   observer() {}
private:
   observer(const observer &amp;);
   observer &amp;operator=(const observer &amp;);
};
</pre>

<p>And consequently allows more flexible and varied observing:</p>

<pre>
class data;
class events;

class watcher : public observer&lt;data&gt;, public observer&lt;events&gt;
{
public:
   virtual void update(data *);
   virtual void update(events *);
   ...
};
</pre>


<H3><FONT COLOR="#000080">Noosely Coupled Exceptions</FONT></H3>

<p>As another worked example of generic decoupling, it is possible to loosen the noose of cyclic dependencies. Consider the standard exception classes defined in <b>&lt;stdexcept&gt;</b>. Each exception takes a <b>std::string</b> for construction. Note that <b>std::string</b> is mentioned only in the single argument constructor: There is no requirement that it is used for implementation, and the only query function offered by the standard exceptions, <b>&lt;stdexcept&gt;</b>, returns a <b>const char *</b>. Given this asymmetry in construction versus query types, and the role of exceptions in a program, it is certainly open to question whether <b>std::string</b> should be used at all in the interface.</p>
<p>However, the issue is not so much with the choice of type dependencies in the library in general, but with the nature of the dependencies: The <b>&lt;string&gt;</b> header defines <b>std::basic_string</b>, some of whose functions throw <b>std::out_of_range</b>. There is therefore a cyclic dependency between the types defined in <b>&lt;stdexcept&gt;</b> and those in <b>&lt;string&gt;</b>; this logical dependency is made more physical when inlined implementations are used &#151; the norm for template implementations. The absence of a standard <b>&lt;stringfwd&gt;</b> header or a more general concept of strings means that each vendor is invited to break the cycle in their own way, some of which meet users expectations and some of which do not (e.g., <b>char *</b> may or may not convert implicitly for the exception constructor argument).</p>
<p>As an aside, it can be considered surprising that exceptions are granted the privilege to use <b>string</b> given that I/O and file handling, which are more obviously and intimately connected with string handling, have no such honor. Although file streams depend on <b>char_traits</b>, as found in <b>&lt;string&gt;</b>, <b>const char *</b> is used as the type for naming files and the type for predefined string insertion and extraction. The <b>&lt;string&gt;</b> header itself depends on I/O streams, representing another dependency noose.</p>

<H4><FONT COLOR="#000080">Loosening the Noose</FONT></H4>

<p>Returning to the <b>&lt;stdexcept&gt;</b> and <b>&lt;string&gt;</b> cycle, a decoupling can be arrived at by considering sufficiency and substitutability: the exception classes in <b>&lt;stdexcept&gt;</b> are conceptually more primitive than <b>std::string</b> and should not have the imposition and dependency on such a specific string type. The dependency should be narrower and more accommodating. The diversity of string-user needs means that such users cannot be characterized collectively as a community. Likewise, their needs cannot be met by a single type such as <b>std::basic_string</b> &#151; a class template that attempts to be all things to all people, but manages only a few in each case.</p>
<p>So what if we don't depend on a specific string type at all? The following is an alternative version of <b>std::logic_error</b>, which uses a dynamically allocated <b>char *</b> internal representation and has no dependency on <b>&lt;string&gt;</b>:</p>

<pre>
class logic_error : public exception
{
public:
   explicit logic_error(const char *detail)
     : detail(duplicate(detail, strchr(detail, '\0')))
   {
   }
   template&lt;typename string&gt;
   explicit logic_error(const string &amp;detail)
     : detail(duplicate(detail.begin(), detail.end()))
   {
   }
   logic_error(const logic_error &amp;other)
     : detail(duplicate(
            other.detail, strchr(other.detail, '\0')))
   {
   }
   logic_error &amp;operator=(const logic_error &amp;rhs)
   {
      char *new_detail =
         duplicate(rhs.detail, strchr(rhs.detail, '\0'));
      delete[] detail;
      detail = new_detail;
      return *this;
   }
   virtual ~logic_error()
   {
      delete[] detail;
   }
   virtual const char *what() const throw()
   {
      return detail;
   }
private:
   template&lt;typename iterator&gt;
   static char *duplicate(iterator begin, iterator end)
   {
      char *result = new char[end - begin + 1];
      copy(begin, end, result);
      result[end - begin] = '\0';
      return result;
   }
   char *detail;
};</pre>

<H4><FONT COLOR="#000080">Lightly Strung</FONT></H4>

<p>The most commonly used string initializer for exceptions is a vanilla null-terminated character sequence. In the revised <b>logic_error</b> shown, this maps directly to a constructor without requiring conversions and the creation of temporary string objects:</p>

<pre>
throw std::logic_error(&quot;illogical&quot;);
</pre>

<p>The templated constructor caters to the standard string type, and indeed any other character container that satisfies the minimal requirements for <b>begin</b> and <b>end</b> members that return random-access iterators &#151; SGI's <b>rope</b> <a href="#18">[18]</a>, <b>std::vector&lt;char&gt;</b>, or a suitable string type of your own devising. So with a few obvious drawbacks, not only has the cyclic dependency been removed, the generality of the code has been increased:</p>

<pre>
std::vector&lt;char&gt; message;
...
throw std::logic_error(message);
</pre>

<p>I said <i>few</i> drawbacks. That is not to say that there are none. However, the most obvious and significant limitation may not be considered that great a disadvantage: a string type that has a user-defined conversion to <b>char *</b>, but does not sport <b>begin</b> and <b>end</b> functions, can no longer be used to directly initialize a <b>logic_error</b>. The success of such a conversion is not guaranteed in the existing Standard, but the arrangement of types in the headers often supports it. The suggested redesign is forward rather than backward looking: string classes that support such user-defined conversions are unsafe and the absence of support for container operations is nonstandard. So if you were to rework your own existing classes to support this style of string decoupling, existing code that worked in terms of legacy string classes would need to be modified &#151; either with explicit casts or, taking the hint, with more standard-conforming types.</p>

<H3><FONT COLOR="#000080">Conclusion</FONT></H3>

<p>Code should be supple, not subtle. For code there is such a thing as being too well connected and too eager to please. Generality and reuse are often better served by paying attention to necessity and to the core activities of software development &#151; comprehension, change, and confirmation &#151; than to whimsy and speculation.</p>
<p>Refactoring code to reduce its coupling often has the effect of increasing its cohesion. In the exception example, physical and conceptual decoupling improved the precision of the requirement on the string type: only specific features were required, not the whole interface. This LCHC strategy suggests a design path that is as applicable to domain-specific libraries as it is to the liberalization of string types.</p>

<H3><FONT COLOR="#000080">References and Notes</FONT></H3>

<p><a name="1"></a>[1] Richard P. Gabriel. <i>Patterns of Software: Tales from the Software Community</i> (Oxford, 1996).</p>
<p><a name="2"></a>[2] Andrei Alexandrescu. &quot;Generic&lt;Programming&gt;: A Policy-Based <b>basic_string</b> Implementation,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, June 2001, &lt;www.cuj.com/experts/1906/alexandr.htm&gt;.</p>
<p><a name="3"></a>[3] Kevlin Henney. &quot;From Mechanism to Method: Distinctly Qualified,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, May 2001, &lt;www.cuj.com/experts/1905/henney.htm&gt;.</p>
<p><a name="4"></a>[4] Conceptual dependencies are sometimes referred to as <i>logical</i> dependencies. The distinction between &#151; and separation of &#151; <i>logical</i> from <i>physical</i> has been handed down to us from structured analysis and design. However, the bias inherent in the use of the word <i>logical</i> tends to cast all physical concerns into the shade as impure and irrational. Such Puritanism is of little practical use. The natural complement of <i>physical</i> is <i>conceptual</i> rather than <i>logical</i>, whose antonym is <i>illogical</i>. C++'s reliance on the preprocessor may not be elegant, but, given its rules, it is entirely logical that a piece of code requiring a declaration in a header file should also have a physical dependency on it.</p>
<p><a name="5"></a>[5] Kevlin Henney. &quot;From Mechanism to Method: Valued Conversions,&quot; <i>C++ Report</i>, July-August 2000, &lt;www.curbralan.com&gt;.</p>
<p><a name="6"></a>[6] <i>Boost C++ Libraries</i>, &lt;www.boost.org&gt;.</p>
<p><a name="7"></a>[7] Les Hatton. &quot;Does OO Sync with the Way We Think?&quot;, <i>IEEE Software</i>, 1998, &lt;www.oakcomp.co.uk&gt;.</p>
<p><a name="8"></a>[8] Martin D. Carroll and Margaret A. Ellis. <i>Designing and Coding Reusable C++</i> (Addison-Wesley, 1995).</p>
<p><a name="9"></a>[9] Kevlin Henney. &quot;From Mechanism to Method: Total Ellipse,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, March 2001, &lt;www.cuj.com/experts/1903/henney.htm&gt;.</p>
<p><a name="10"></a>[10] John Lakos. <i>Large-Scale C++ Software Design</i> (Addison-Wesley, 1996).</p>
<p><a name="11"></a>[11] Robert C. Martin. &quot;Object-Oriented Design Quality Metrics: An Analysis of Dependencies,&quot; <i>ROAD</i>, September-October 1995, &lt;www.objectmentor.com&gt;.</p>
<p><a name="12"></a>[12] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. <i>Design Patterns: Elements of Reusable Object-Oriented Software</i> (Addison-Wesley, 1995).</p>
<p><a name="13"></a>[13] Herb Sutter. &quot;Sutter's Mill: Virtuality,&quot; <i>C/C++ Users Journal</i>, September 2001.</p>
<p><a name="14"></a>[14] Martin Fowler. <i>Refactoring: Improving the Design of Existing Code</i> (Addison-Wesley, 1999).</p>
<p><a name="15"></a>[15] Robert B. Murray. <i>C++ Strategies and Tactics</i> (Addison-Wesley, 1993).</p>
<p><a name="16"></a>[16] Herb Sutter. <i>Exceptional C++</i> (Addison-Wesley, 2000).</p>
<p><a name="17"></a>[17] Kevlin Henney. &quot;From Mechanism to Method: Function Follows Form,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, November 2000, &lt;www.cuj.com/experts/1811/henney.htm&gt;.</p>
<p><a name="18"></a>[18] SGI Standard Template Library Programmer's Guide, &lt;www.sgi.com/tech/stl/&gt;.</p>


<p><i><b>Kevlin Henney</b> is an independent consultant and trainer specializing in C++, Java, OO design, patterns, and software architecture.  He can be reached at <b>kevlin@curbralan.com</b>.</i></p>

</BLOCKQUOTE></BODY></HTML>
