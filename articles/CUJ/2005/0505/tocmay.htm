<HTML>
<HEAD>
<TITLE>May 2005</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">May 2005<BR>
                Volume 23 Number 5</FONT></H3>
               

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="0505stroustrup/0505stroustrup.html">The Design of C++0x</A></H4>
<p><b>Bjarne Stroustrup</b><br>
<i>If you were the ISO C++ Standards committee and could decree what the next C++ Standard looks like, what would you add? What would you remove? What would you change?
</i></p>

<H4><A HREF="0505becker/0505becker.html">C++ Function Objects in TR1</A></H4>
<p><b>Pete Becker</b><br>
<i>The Technical Report on C++ Library Extensions (TR1) introduces four new function object templates that use more sophisticated implementation techniques than the function object templates in the C++ Standard Library.
</i></p>

<H4><A HREF="0505jones/0505jones.html">GNU's C Language Extensions</A></H4>
<p><b>M. Tim Jones</b><br>
<i>GNU's GCC compiler has a number of interesting and useful ISO C99 and nonISO extensions (among others) to 	C that are commonly overlooked. These features can help simplify the development of C applications and make them easier to debug.
</i></p>

<H4><A HREF="0505bakal/0505bakal.html">UML for C Programmers</A></H4>
<p><b>Martin Bakal</b><br>
<i>The introduction of natural C concepts such as files, functions, and variables into UML let C programmers take 	advantage of Model-Driven Development's benefits.
</i></p>

<H4><A HREF="0505dickman/0505dickman.html">A Generative Programming Debugging Tool</A></H4>
<p><b>Jeremy Dickman</b><br>
<i>Here's a straightforward technique that can be used to provide "debug messages" in the form of compiler warnings that help show which instantiations the compiler is making.
</i></p>

<H4><A HREF="0505goodliffe/0505goodliffe.html">Register Access in C++</A></H4>
<p><b>Pete Goodliffe</b><br>
<i>Pete presents a robust technique that exploits a number of C++'s features to provide safe and efficient hardware register access.
</i></p>

<H4><A HREF="0505jaeschke/0505jaeschke.html">C++/CLI: Value Class Types</A></H4>
<p><b>Rex Jaeschke</b><br>
<i>The value class is a lightweight C++/CLI class mechanism that is particularly useful for reasonably small data structures that have value semantics.
</i></p>

<H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>

<H4><A HREF="0505diggins/0505diggins.html">Agile C++</A></H4>
<p><b>Christopher Diggins</b><br>
<i>Christopher exlores UNIX filters.
</i></p>

<H4><A HREF="0505wilson/0505wilson.html">Positive Integration</A></H4>
<p><b>Matthew Wilson</b><br>
<i>Matthew discusses Open-RJ and the D programming language. 
</i></p>

<H4><A HREF="0505torjo/0505torjo.html">Win32 GUI Generics</A></H4>
<p><b>John Torjo</b><br>
<i>Standard controls for GUI development are generally inflexible, making software difficult to implement and maintain. John presents a way around this problem.
</i></p>

<H4><A HREF="0505sutter/0505sutter.html">Conversations</A></H4>
<p><b>Herb Sutter and Jim Hyslop</b><br>
<i>The Guru takes on const.
</i></p>

<H4><A HREF="0505book/0505book.html">Programmer's Book Review</A></H4>
<p><b>Peter N. Roth</b><br>
<i>This month, Peter examines a pair of C# books&#151;</i>.NET Compact Framework Programming with C#<i>, by Paul Yao and David Durant; and </i>.NET Framework Standard Library Annotated Reference, Volume 1<i>, by Brad Abrams.
</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="0505edit/0505edit.html">Editor's Forum</A></H4>
<H4><A HREF="0505newprod/0505newprod.html">New Products</A></H4>

</blockquote>
</body>
</html>
