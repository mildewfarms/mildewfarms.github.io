<HTML>
<HEAD>
<TITLE>December 2005</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">December 2005<BR>
                Volume 23 Number 12</FONT></H3>
               

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="0512gufford/0512gufford.html">Unit Testing & CxxTest</A></H4>
<p><b>Eric Gufford</b><br>
<i>Unit testing can save you time and catch bugs early in the development cycle, but it can be tedious to set up. CxxTest is a framework that uses Perl to automate the creation of test classes for your application.
</i></p>

<H4><A HREF="0512wittlich/0512wittlich.html">Compile-Time Assertions & Debugging</A></H4>
<p><b>Klaus Wittlich</b><br>
<i>It's common practice to use assertions to check invariants at run time, but assertions can be equally useful at compile time for doing things like checking arrays for proper size and order.
</i></p>

<H4><A HREF="0512parker/0512parker.html">A Flexible Framework for Error Reporting</A></H4>
<p><b>Terence Parker</b><br>
<i>Errors often occur deep in a class or subroutine, but the way you present that error should ideally be dependent on context. The solution is to separate error generation from error reporting.
</i></p>

<H4><A HREF="0512mandalika/0512mandalika.html">Mixed-Language Programming & External Linkage</A></H4>
<p><b>Giri Mandalika</b><br>
<i>Calling C code from C++ should be relatively straightforward, but understanding the concept of linkage is key to ensuring a smooth compile.
</i></p>

<H4><A HREF="0512wilson/0512wilson.html">Adapting Interface-Incomplete Types at Compile Time</A></H4>
<p><b>Matthew Wilson</b><br>
<i>When an adapter template makes demands that a potential underlying type cannot fulfill, Inferred Interface Adaptation can expand the number of adaptable types.
</i></p>

<H4><A HREF="0512babitsky/0512babitsky.html">Hierarchical State Machine Design in C++</A></H4>
<p><b>Dmitry Babitsky</b><br>
<i>In a Hierarchical Finite State Machine, any state can be a substate of some larger state. Dmitry presents a class that implements this pattern.
</i></p>

<H4><A HREF="0512platis/0512platis.html">GraphViz and C++</A></H4>
<p><b>Nikos Platis and MihalisTsoukalos</b><br>
<i>The Boost Graph Library (BGL) is a great way to use GraphViz to draw directed and undirected graphs of your data structures.
</i></p>

<H4><A HREF="0512jaeschke/0512jaeschke.html">C++/CLI Input/Output</A></H4>
<p><b>Rex Jaeschke</b><br>
<i>Rex covers the ABCs of reading and writing in the .NET/CLI realm, including screen and keyboard I/O, file and string I/O, random-access I/O, and operations on files and directories.
</i></p>



<H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>

<H4><A HREF="0512alexandrescu/0512alexandrescu.html">Generic&lt;Programming&gt;</A></H4>
<p><b>Andrei Alexandrescu</b><br>
<i>The way your application allocates memory can have a dramatic effect on its performance. Modern general-purpose memory allocators are pretty efficient, but there's always room for improvement.
</i></p>

<H4><A HREF="0512moo/0512moo.html">C++ Made Easier</A></H4>
<p><b>Andrew Koenig and Barbara E. Moo</b><br>
<i>Some programming abstractions seem like they can safely be violated. There are reasons, however, why you should think twice before doing so&#151;a little self-discipline can have big payoffs.
</i></p>

<H4><A HREF="0512becker/0512becker.html">The New C++</A></H4>
<p><b>Pete Becker</b><br>
<i>The TR1 implementation of the Standard Template Library contains new data collections and callable types. To understand these, it's important to grasp some fundamentals of the design of the STL.
</i></p>


<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="0512edit/0512edit.html">Editor's Forum</A></H4>
<H4><A HREF="0512newprod/0512newprod.html">New Products</A></H4>

</blockquote>
</body>
</html>
