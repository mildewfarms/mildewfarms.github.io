<HTML><HEAD><TITLE>Conversations: Value Lessons</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h2>Conversations: Value Lessons</h2><H3>Jim Hyslop and Herb Sutter</H3><i>When will you learn to value the counsel of the prophets? Decide what type of object you're defining and stay the course.</i><P><I>Copyright 2002, Jim Hyslop and Herb Sutter</I><P>It was one of those days. Bob was being his usual... um... self, Kerry the intern was practically having a nervous breakdown every time the Guru walked by (in her full act), the network was down, and Wendy -- my only link to sanity at times like this -- was on vacation. Some days it just doesn't pay to get out of bed.<P>Kerry and I were at his desk, reviewing some code he had been working on. I was impressed with the quality of his code -- I didn't have much to point out. (Mind you, I was pretty sure the Guru would have more to say once it was checked in and we were formally reviewing it.)<P>"I'm having the problem in this section of code," he said:<P><pre>Ff original;// ...{  Ff tempFF(original);  // ...}</pre>"I'm having problems with the original, when the copy gets destroyed." I looked at the code for a moment; then following a hunch, I looked up the definition of <B>Ff</B>:<P><pre>class Ff{  T t;public:  Ff() : pointer( 0 ) {}  ~Ff() { delete pointer; }  U *pointer;  void f();  void g();};</pre>"Ah, here's your problem -- you've violated the Law of the Big Three," I sat back.<P>"The Law of... is that something the Guru made up?"<P>"No," I laughed. "The Law of the Big Three is from Marshall Cline's C++ FAQ. It says that if you have any one of a copy constructor, assignment operator, or destructor, you usually need all three [1]. Just add a copy constructor and assignment operator that perform deep copy semantics, and you'll be fine."<P>"OK, got ya," Kerry answered.<P>A loud <I>snap</I> startled both of us. Kerry's chair squeaked almost as loud as Kerry.<P>"Good morning, my master," I quickly recovered. Kerry eased his chair away from me a little.<P>"What is this abomination?" she pointed at the class definition on the screen.<P>"Uh, it's OK," I stammered, unnerved by the ferocity in her voice. "He's going to add the copy constru..."<P>"The Law of the Big Three is a trifle, a mere gadfly. I am referring to the unholy public data member." My heart sank -- how could I have overlooked something that obvious?<P>"Ah, well," Kerry squeaked out, "I read in ... um... somewhere that public data members are alright for value types." I was impressed -- our little mouse was learning how to roar. The Guru regarded him coolly for a moment.<P>"I think, my child," she finally said, much more calmly (to my relief), "that you are confusing value types and POD -- Plain Ol' Data -- types. By definition, a POD cannot have any non-public, non-static data members. Your class contains a private member; therefore it cannot be a POD. But heed this -- a class should be either a value type, or an object type. You have created a monstrosity that is neither fish nor fowl."<P>"Um,... what do you mean by 'value type' and 'object type'?" I queried, a little miffed that Kerry knew something I didn't.<P>"A value type," the Guru spoke softly as she pushed a lock of gray hair behind her ear, "is an object that depends on its state, more than its behavior. An object type relies more on its behavior and identity, than on its state."<P>"Ah, I see," I replied, hoping the Guru wouldn't see through my bluffed understanding.<P>The Guru eyed me stonily for a moment. Some days, it really doesn't pay to get out of bed. "My child, have you so soon forgotten the blessed writings of the prophet Booch? All this is covered in exquisite detail in his tome."<P>"Right, of course," I said, as the penny dropped. "An object's state is... um... the current value of all its data members, right?"<P>"In essence, yes. Booch further enlightens us by teaching that the state of an object is the result of the cumulative operations on that object [2]."<P>"So how does a value type emphasize its state?"<P>"Its member functions focus on manipulating and presenting the object's state. Common examples of value types are classes that represent strings, dates, and so on. The prophet Henney teaches us that a value type can be substituted for another value type, with the same state [3]. He has also refined the taxonomy for object types to include Entities, Services, and Tasks."<P>"So, you were saying that this class needs to hide its public data. What if he encapsulates the pointer behind <B>Get</B> and <B>Set</B> functions?"<P>That earned me another glare. I wondered if it was possible to stay in bed retroactively. "My apprentice, you seem to be addled still from the holiday fowl you have consumed. Did I not also say that you must decide whether your class is fish or fowl? <B>Get</B> and <B>Set</B> member functions are used primarily with value types. Consider the standard string class. It is a value type, whose <B>Get</B> function is named <B>c_str()</B>.<P>"These other member functions <B>f()</B> and <B>g()</B>," she pointed at the monitor, "are organized around the object's overall behavior and give no hint as to the internal state of the object. This characterizes the class as an object type. On the other hand, <B>Get</B> and <B>Set</B> member functions are organized around the state of the pointer. This characterizes the class as a value type."<P>"But surely," Kerry broke in, "it's not that cut and dried, is it?"<P>"Don't call me Shirley," the Guru deadpanned. Without skipping a beat, she continued. "No, my child, the design decisions are not always that clear. Indeed, the masters at Ubilab acknowledge that values are frequently implemented as objects [4]. I rather suspect that is because the, er, value of value types has been largely overlooked in the OO community. In your case, you have an object with behavior that is also trying to act as a value type.<P>"There is one aspect of value types that I have neglected to mention. It usually does not make sense to copy object types, because of their strong identities. Consider an <B>Employee</B> class -- imagine the havoc that would ensue if there were two <B>Employee</B>s named Bob."<P>I shuddered at the thought. As the Guru turned and glided away, Kerry rolled his eyes at me.<P>"'Don't call me Shirley?'" his face contorted in disgust.<P>"Now you know why she's a programmer and not a stand-up comic," I said as we turned back to the keyboard.<P><h3>Notes</h3>[1]  Marshall Cline. "C++ FAQ Lite," &lt;www.parashift.com/c++-faq-lite/coding-standards.html#faq-26.9&gt;.<P>[2]  Grady Booch. <I>Object-Oriented Analysis and Design with Applications</I> (Addison-Wesley, 1994).<P>[3]  Kevlin Henney. "Valued Idioms: Patterns for Value-Based Programming," presentation to the Denmark Design Patterns Study Group, May 2001.<P>[4]  B&auml;umer, et al. "Values in Object Systems," Ubilab Technical Report 98.10.1.<p><h3>About the Authors</h3>Herb Sutter (&lt;www.gotw.ca&gt;) is convener of the ISO C++ standards committee, author of the acclaimed books <I>Exceptional C++</I> and <I>More Exceptional C++</I>, and one of the instructors of The C++ Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft. <P>Jim Hyslop is a senior software designer with over 10 years programming experience in C and C++. Jim works at Leitch Technology International Inc., where he deals with a variety of applications, ranging from embedded applications to Windows programs. He can be reached at <B>jhyslop@ieee.org</B>.<p></BODY></HTML>