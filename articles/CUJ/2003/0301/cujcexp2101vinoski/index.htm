<HTML>   
     <HEAD>
<TITLE>January 2003/Object Interconnections</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Object Interconnections: Dynamic CORBA, Part 4: The Interface Repository</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Douglas C. Schmidt and Steve Vinoski</FONT></H3>

<HR>
<BLOCKQUOTE></h3>

<H3><FONT COLOR="#000080">Introduction</FONT></H3>

<p>Welcome to the next installment of our series covering Dynamic CORBA. In Part 1 <a href="#1">[1]</a>, we discussed the DII (CORBA Dynamic Invocation Interface), which allows applications to invoke operations on target objects without having compile-time knowledge of target interfaces. In Part 2 <a href="#2">[2]</a>, we explained the basics of the Dynamic Any, which enables applications to handle any value of any IDL type (whether simple or complex) without having compile-time information about that type. In Part 3 <a href="#3">[3]</a>, we covered the DSI (Dynamic Skeleton Interface), which is the server-side counterpart of the DII that enables CORBA developers to portably construct applications that cannot know <i>a priori</i> the types or identities of the objects they must serve.</p> 
<p>In this column, we explain the IFR (Interface Repository), which is the next piece of the Dynamic CORBA puzzle. Our previous columns in this series have intentionally ignored the fact that Dynamic CORBA applications require a means of obtaining type information dynamically. To avoid cluttering our examples and explanations, we instead relied on hard-coded type information. Now that we've completed our coverage of the DII, DSI, and Dynamic Any, we'll show how CORBA developers can use the IFR to construct truly dynamic applications that discover all necessary type information at run time.</p> 

<H3><FONT COLOR="#000080">IFR Basics</FONT></H3>

<p>CORBA developers are typically familiar with IDL compilers, which parse IDL definitions and generate stubs and skeletons to represent them. Such compilers are typically composed of:</p>

<UL><LI>A <i>front end</i>, which performs lexical, syntactic, and semantic analysis of the IDL input while building a parse tree representing that input.</LI>
<LI>One or more<i> back ends</i>, which walk the resulting parse tree and generate code based on its contents. For example, one back-end implementation might generate C++ stubs and skeletons, while another might generate Java stubs and skeletons.</LI></UL>

<p>The IFR is a distributed service that shares similarities with the inner workings of an IDL compiler. It allows applications to store and retrieve IDL definitions to and from an instance of the service, much like allowing them to modify and access an IDL parse tree at run time. For this column, we focus on the IFR operations that provide read access to IDL definitions, since the write operations are typically used only by tools used to populate and administer an IFR. ORBs that provide IFR implementations normally support tools that make use of these write interfaces to allow you to add definitions to the IFR (though most require you to remember to do so explicitly). Often, the tool that writes the IFR is a special back end to the IDL compiler that walks the internal parse tree and writes the definitions to the IFR.</p> 
<p>There are several different ways to access the IFR's contents. We describe the two most useful approaches below:</p>

<OL>
<LI><i>Initial reference</i>. If you pass the string <b>&quot;InterfaceRepository&quot;</b> to the <b>ORB::resolve_initial_references</b> method, it will return an object reference that you can narrow to the <b>CORBA::Repository</b> interface type. You can then use that interface to look up and navigate through all type definitions stored in the repository.</LI>
<LI><b><i>CORBA::Object</i></b><i> method</i>. The <b>get_interface</b> method<b> </b>of the <b>CORBA::Object</b> interface returns a <b>CORBA::InterfaceDef</b> object that provides access to the IDL definitions specific to the target object.</LI></OL>

<p>Dynamic CORBA applications typically use the <b>CORBA::Object::get_interface</b> method because it provides more direct access to the type information needed for such applications. Since applications must be able to invoke <b>get_interface</b> without knowing the specific type of the target object, this method appears on the <b>CORBA::Object</b> interface, meaning that it's available on all CORBA objects. The <b>InterfaceDef</b> returned from <b>get_interface</b> describes the most derived interface supported by the target object. For example, if interface <b>B</b> derives from interface <b>A</b>, and a servant implements interface <b>B</b>, then <b>B</b> is the most derived interface supported by an object incarnated by the servant. By virtue of inheritance, the object also supports interface <b>A</b>, but <b>A</b> is not its most derived interface. If someone later adds an interface <b>C</b> derived from <b>B</b>, the most derived interface of the existing object is still <b>B</b>, because it does not implement <b>C</b>.</p> 
<p>Since it inherits from several base interfaces, <b>InterfaceDef</b> is somewhat complicated. First we look at its <b>describe_interface</b> method, which returns a <b>struct</b> that contains all the information about the target interface. To make our example concrete, this column will continue to use the Stock Quoter IDL shown below as our target interface:</p> 

<pre>
// IDL
module Stock {
  exception Invalid_Stock {};

  struct Info {
    long high;
    long low;
    long last;
  };

  interface Quoter {
    Info get_quote (in string stock_name) raises (Invalid_Stock);
  };
};
</pre>

<p>Assuming we had an object reference to an instance of <b>Stock::Quoter</b>, <b>FullInterfaceDescription</b> <b>struct</b> returned from <b>describe_interface</b> would contain the following information: </p>

<UL><LI>Its simple name, e.g., <b>&quot;Quoter&quot;</b>.</LI>
<LI>Its repository ID, e.g., <b>&quot;IDL:Stock/Quoter:1.0&quot;</b>. (We discuss repository IDs in more detail near the end of this column.)</LI>
<LI>Its <b>TypeCode</b>, which for static programs is also available as the constant <b>Stock::_tc_Quoter</b>.</LI>
<LI>Its version string.</LI>
<LI>Its enclosing scope's repository ID.</LI>
<LI>The repository IDs of its base interfaces.</LI>
<LI>Sequences of full descriptions of its operations and attributes.</LI>
</UL>

<p>For example, let's assume we've retrieved a stringified object reference for a <b>Stock::Quoter</b> object from a file, so we can invoke its <b>get_interface</b> method, as shown below:</p>

<pre>
CORBA::String_var str = // read string from file
CORBA::Object_var target = 
  orb-&gt;string_to_object (str);
CORBA::InterfaceDef_var intf_def = 
  target-&gt;_get_interface ();
</pre>

<p>Note that like other <b>CORBA::Object</b> operations, the <b>get_interface</b> operations acquires a leading underscore when mapped to a C++ method to keep it from clashing with user-defined operations in derived classes. After we invoke <b>get_interface</b>, we can access the full description of the <b>Stock::Quoter</b> interface by invoking <b>describe_interface</b> on the returned <b>InterfaceDef</b> to obtain <b>FullInterfaceDescription</b>, as follows:</p>

<pre>
CORBA::InterfaceDef::FullInterfaceDescription_var fid =
 intf_def-&gt;describe_interface ();
</pre>

<p>Continuing with the example above, we could print the names of all operations and attributes in the <b>Stock::Quoter</b> interface (or any interface for that matter) like this:</p>

<pre>
cout &lt;&lt; &quot;interface name: &quot; &lt;&lt; fid.name.in () &lt;&lt; endl;
CORBA::ULong i;
for (i = 0; i &lt; fid-&gt;operations.length (); ++i)
  cout &lt;&lt; &quot; operation &quot; &lt;&lt; i+1 &lt;&lt; &quot;: &quot; 
       &lt;&lt; fid-&gt;operations[i].name.in () &lt;&lt; endl;
for (i = 0; i &lt; fid-&gt;attributes.length (); ++i)
  cout &lt;&lt; &quot; attribute &quot; &lt;&lt; i+1 &lt;&lt; &quot;: &quot; 
       &lt;&lt; fid-&gt;attributes[i].name.in () &lt;&lt; endl;
</pre>

<p>The <b>operations</b> member is a <b>sequence</b> of <b>OperationDescription</b>, and the <b>attributes</b> member is a <b>sequence</b> of <b>AttributeDescription</b>. The output of this program for <b>Stock::Quoter</b> is:</p>

<pre>
interface name: Quoter
  operation 1: get_quote
</pre>

<H3><FONT COLOR="#000080">Invoking a DII Request</FONT></H3>

<p>The full descriptions of the operations and attributes that <b>InterfaceDef</b> contains are the key to obtaining the type information necessary to write true dynamic clients. In Parts 1 and 2 of this series, we used static type information in our examples since we hadn't discussed the IFR yet. We'll now revisit those examples to show how to get the necessary type information from the IFR. Our DII/<b>DynAny</b> example is based on the <b>Stock::Quoter</b> IDL definitions shown above. Our original DII/<b>DynAny</b> client looked like this:</p>

<pre>
CORBA::Object_var obj = // ...obtain object reference...
CORBA::Request_var req = obj-&gt;_request (&quot;get_quote&quot;);
req-&gt;add_in_arg () &lt;&lt;= &quot;IONA&quot;; // Note static string type.
// Note static TypeCode.
req-&gt;set_return_type (Stock::_tc_Info); 
// Another static TypeCode.
req-&gt;exceptions ()-&gt;add (Stock::_tc_Invalid_Stock); 
req-&gt;invoke ();
CORBA::Environment_ptr env = req-&gt;env ();
if (CORBA::is_nil (env) || env-&gt;exception () == 0) {
  DynamicAny::DynAny_var dynany = 
    dynfactory-&gt;create_dyn_any (req-&gt;return_value ());
   ...
}</pre>

<p>For a truly dynamic client, we must replace the static type information we use to set up the request arguments, return type, and exception types with type information dynamically retrieved from the IFR. One way to do this is to navigate explicitly through the full <b>OperationDescription</b> for the <b>get_quote</b> operation. The following example builds on the <b>FullInterfaceDescription</b> retrieval code from the previous example.</p> 

<pre>
 1  CORBA::Object_var obj = 
 2   // ...obtain object reference...
 3  CORBA::Request_var req = 
 4   obj-&gt;_request (&quot;get_quote&quot;);
 5  for (CORBA::ULong i =
 6    0; i &lt; fid-&gt;operations.length (); ++i) {
 7    if (strcmp (fid-&gt;operations[i].name,
 8      &quot;get_quote&quot;) == 0) {
 9      for (CORBA::ULong j = 0;
10        j &lt;fid-&gt;operations[i].parameters.length ();
11        ++j) {
12        CORBA::Flags direction;
13        switch 
14          (fid-&gt;operations[i].parameters[j].mode) {
15        case CORBA::PARAM_IN:
16          direction = CORBA::ARG_IN;
17          break;
18        case CORBA::PARAM_OUT:
19          direction = CORBA::ARG_OUT;
20          break;
21        case CORBA::PARAM_INOUT:
22          direction = CORBA::ARG_INOUT;
23          break;
24        }
25        CORBA::NamedValue_ptr nv =
26          req-&gt;arguments ()-&gt;add (direction);
27        nv-&gt;value ()-&gt;replace 
28          (fid-&gt;operations[i].parameters[j].type. in (),
29          0);
30     }
31     req-&gt;set_return_type 
32       (fid-&gt;operations[i].result.in ());
33     for (CORBA::ULong j = 0;
34       j &lt; fid-&gt;operations[i].exceptions.length ();
35       ++j)
36         req-&gt;exceptions ()-&gt;add 
37           (fid-&gt;operations[i].exceptions[j].type.in ());
38   }
39 }
</pre>

<p>Lines 5-8 look through the sequence of operation descriptors to find the element that describes the <b>get_quote</b> operation. Using that element, lines 9-30 set the type and direction for each <b>Request</b> argument. Line 231 then sets the <b>Request</b> return type, and lines 33-38 set all the user-defined exceptions that the <b>Request</b> can return. After this code completes, all that's left to do is set the string value for the single argument to <b>get_quote</b> using <b>DynAny</b>, which we'll show a little later. </p>
<p>Although the code above eliminates the dependency on static type information, it's complicated due to the deep nesting of the description <b>struct</b>s. Another approach is to use the<b> create_operation_list</b> method that the ORB provides to fill in the target operation's argument details:</p>

<pre>
 1  CORBA::Object_var target = 
 2    // ...obtain object reference...
 3  CORBA::InterfaceDef_var intf_def =
 4    target-&gt;_get_interface ();
 5  CORBA::Contained_var ctd =
 6    intf_def-&gt; lookup (&quot;get_quote&quot;);
 7  CORBA::OperationDef_var op_def =
 8    CORBA::OperationDef::_narrow (ctd.in ());
 9  CORBA::NVList_var arglist;
10  orb-&gt;create_operation_list 
11    (op_def.in (), arglist.out ());
</pre>

<p>The <b>create_operation_list</b> method shown on lines 10-11 uses its <b>OperationDef</b> argument to fill in its <b>NVList</b> argument, which is an <b>out </b>parameter. (An actual implementation of <b>create_operation_list</b> inside the ORB might look a lot like the <b>FullInterfaceDescription</b> example, in fact). Lines 5-6 obtain <b>OperationDef </b>by looking up the entity named <b>&quot;get_quote&quot;</b> in <b>InterfaceDef</b>. Note, however, that <b>create_operation_list</b> fills in only the types and directions of the arguments in the target operation's argument list and does not take care of the <b>Request</b> return type, context list, or exception list. A complete example using <b>create_operation_list</b> follows:</p> 

<pre>
 1  CORBA::Object_var target = 
 2   // ...obtain object reference...
 3  CORBA::InterfaceDef_var intf_def = 
 4   target-&gt;_get_interface ();
 5  CORBA::Contained_var ctd = 
 6   intf_def-&gt; lookup (&quot;get_quote&quot;);
 7  CORBA::OperationDef_var op_def = 
 8   CORBA::OperationDef::_narrow (ctd.in ());
 9  CORBA::NVList_var arglist;
10  orb-&gt;create_operation_list (op_def.in (),
11    arglist.out ());
12  CORBA::NamedValue_var ret_nv;
13  orb-&gt;create_named_value (ret_nv.out ());
14  CORBA::TypeCode_var ret_type = op_def-&gt;result ();
15  ret_nv-&gt;value ()-&gt;replace (ret_type.in (), 0);
16  CORBA::ExceptionList_var exc_list;
17  CORBA::ExceptionDefSeq_var exc_seq =
18    op_def-&gt;exceptions ();
19  if (exc_seq-&gt;length () &gt; 0) {
20    orb-&gt;create_exception_list (exc_list.out ());
21    for (CORBA::ULong i = 0; i &lt; exc_seq-&gt;length ();
22      ++i) {
23      CORBA::TypeCode_var exc_tc = exc_seq[i]-&gt;type ();
24      exc_list-&gt;add (exc_tc.in ());
25    }
26  }
27  CORBA::Request_var request;
28  obj-&gt;_create_request (CORBA::Context::_nil (),
29    &quot;get_quote&quot;, arglist.in (), ret_nv.in (), 
30    CORBA:ContextList::_nil (),exc_list.in (),
31    request.out (), 0);
</pre>

<p>This code is really no simpler than the previous example, but it reveals an important fact about the IFR: it supports multiple views of the information it contains. Specifically, the IFR allows navigation based on description data (as the previous example shows) or based on object references (as this example shows). Specifically, in this example, we first retrieve an <b>InterfaceDef</b> object reference on lines 3-4. From that we retrieve an <b>OperationDef</b> object reference via named-based lookup on lines 5-8. Lines 10-26 then invoke separate methods on <b>OperationDef</b> to retrieve each data item we need, which differs from the previous example that invokes one <b>OperationDef</b> method to return all the necessary data in one big data structure. Finally, lines 28-31 invoke the long form of the <b>create_request</b> operation. We use the long form because we already have all the information necessary to create the request.</p> 
<p>Note how lines 5-6 in this example use the <b>lookup</b> method to obtain <b>Contained</b>, which we then narrow to <b>OperationDef</b> in lines 7-8. The <b>Contained</b> interface and its counterpart <b>Container</b> interface serve as fundamental base interfaces in the IFR, allowing for navigation through the hierarchies of IDL definitions. In IDL, every entity is either a container or is something that can be put into a container. Some IDL entities are both. For example, <b>InterfaceDef</b> is a <b>Container</b> that holds definitions for operations, attributes, and types. It's also a <b>Contained</b> that can be stored within a <b>module</b> definition. Similarly, <b>ModuleDef</b> is also both a <b>Container</b> and a <b>Contained</b>, whereas <b>EnumDef</b> (used to describe an IDL <b>enum</b> type) is only a <b>Contained</b>. At the top level of the IFR hierarchy, the <b>Repository</b> interface (which is the type of interface returned by <b>ORB::resolve_initial_references(&quot;InterfaceRepository&quot;)</b>) does not correspond to an IDL construct but still derives from <b>Container</b> because it contains everything within the IFR.</p> 
<p>Regardless of whether we use <b>create_operation_list</b> or explicitly construct the argument list ourselves using a full description <b>struct</b>, we must set the argument values. The C++ code below will work with either approach:</p>

<pre>
 1  CORBA::Object_var obj =
 2    orb-&gt;resolve_initial_references (&quot;DynAnyFactory&quot;);
 3  DynamicAny::DynAnyFactory_var dynfactory =
 4    DynamicAny::DynAnyFactory::_narrow (obj.in ());
 5  CORBA::ULong len = req-&gt;arguments ()-&gt;count ();
 6  for (CORBA::ULong i = 0; i &lt; len; ++i) {
 7    CORBA::NamedValue_ptr nv = 
 8      req-&gt;arguments ()-&gt;item (i);
 9    if (nv-&gt;flags () == CORBA::ARG_OUT)
10      continue;
11    CORBA::Any *arg = nv-&gt;value ();
12    CORBA::TypeCode_var tc = arg-&gt;type ();
13    DynamicAny::DynAny_var dynany = 
14      dynfactory-&gt;create_dyn_any_from_type_code 
15      (tc.in ());
16    switch (tc-&gt;kind ()) {
17    case CORBA::tk_string:
18      dynany-&gt;insert_string (&quot;IONA&quot;);
19      break;
20 
21    // handle other types
22    }
23    CORBA::Any_var newany = dynany-&gt;to_any ();
24    *arg = newany.in ();
25  }
26  req-&gt;invoke ();
</pre>

<p>To set our arguments, lines 6-22 walk over the list of arguments created in the previous example, ignoring all <b>out</b> arguments. For each argument, lines 12-15 use <b>TypeCode</b> to create <b>DynAny</b>. Lines 16-24 then set the value of <b>DynAny</b> according to its type. Our example sets a hard-coded string value in <b>DynAny </b>for simplicity, though a real dynamic application would obtain its values from another application, a database or file, or a GUI. After setting all the arguments, line 26 finally invokes the request. For clarity, we separated the creation of the argument list from the setting of the argument values. In real application code, it would be more efficient and easier to set the argument values as you construct the argument list. Note also that our example shows only the handling of the string type because showing a complete solution would require much more code.</p>

<H3><FONT COLOR="#000080">The IFR and the DSI</FONT></H3>

<p>Now that we've illustrated how a dynamic client application can use the IFR to obtain and use type information, let's move the discussion to the server. As we explained in Part 3 of this column series <a href="#3">[3]</a>, the DSI allows certain types of server applications, such as gateways or debugging intermediaries, to serve objects for which they have no compile-time type information. Such DSI applications thus require access to the IFR to handle requests properly.</p>
<p>When it is up-called by the POA, a DSI servant must determine the type and identity of the target object for which it's being invoked. Based on the target object's type, it can query the IFR to obtain type information about the arguments of the operation being invoked. It then passes this argument type information back to the ORB runtime through the <b>ServerRequest </b>interface to allow the runtime to demarshal the input arguments properly. The following example illustrates these steps within the DSI servant's <b>invoke</b> method: </p>

<pre>
 1  CORBA::Object_var obj = 
 2    orb-&gt;resolve_initial_references (&quot;POACurrent&quot;);
 3  PortableServer::Current_var current = 
 4    PortableServer::Current::_narrow (obj.in ());
 5  CORBA::Object_var target = current-&gt;get_reference ();
 6  CORBA::InterfaceDef_var intf_def = 
 7    target-&gt;_get_interface ();
 8  CORBA::Contained_var ctd = 
 9    intf_def-&gt; lookup (server_request-&gt;operation ());
10  CORBA::OperationDef_var op_def = 
11    CORBA::OperationDef::_narrow (ctd.in ());
12  CORBA::NVList_var arglist;
13  orb-&gt;create_operation_list (op_def.in (), 
14    arglist.out ());
15  server_request-&gt;arguments (arglist.inout ());
</pre>

<p>Lines 1-5 obtain an object reference for the target object via the POA <b>Current</b>. Lines 6-7 then use the object reference and the name of the invoked operation (obtained from <b>ServerRequest</b>) to obtain an <b>OperationDef</b> for the target operation. Lines 13-24 pass <b>OperationDef</b> to <b>create_operation_list</b> to create an argument list for the target operation, which we pass into the <b>ServerRequest::arguments </b>method to obtain the arguments passed from the caller on line 15. After our arguments are available, we process them using <b>DynAny</b> as shown in <a href="#3">[3]</a>. As you can see, <b>create_operation_list </b>and <b>OperationDef </b>make it fairly straightforward to implement truly dynamic DSI servants.</p> 

<H3><FONT COLOR="#000080">Repository IDs</FONT></H3>

<p>Ever wonder about those strange repository ID strings that appear in various parts of CORBA? The IFR is the main reason those repository IDs exist. As its name suggests, a repository ID identifies an entity in the IFR. There are multiple formats allowed for repository IDs, such as Java RMI hashed identifiers, DCE UUID identifiers, and support for custom application-specific formats, but the default is the familiar <b>&quot;IDL:identifier:version&quot;</b> format. For example, the default repository ID for our <b>Stock::Quoter </b>interface is:</p>

<pre>
IDL:Stock/Quoter:1.0
</pre>


<p>The entity identifier is formed by replacing all instances of <b>::</b> in the fully-scoped IDL name with the <b>/</b> separator, and setting the version defaults to <b>1.0</b>. You can change the entity identifier and the version portions of a repository ID in your IDL definition using <b>#pragma prefix</b> or <b>typeprefix</b> directives. For example, all definitions in OMG specifications have the <b>&quot;omg.org&quot;</b> prefix:</p> 

<pre>
#pragma prefix &quot;omg.org&quot;
module CORBA {
  interface InterfaceDef { ... };
};
</pre>

<p>Without the prefix, the repository ID for the <b>InterfaceDef</b> interface would be:</p>

<pre>
IDL:CORBA/InterfaceDef:1.0
</pre>

<p>With the <b>#pragma prefix</b> directive in effect, the repository ID becomes:</p>

<pre>
IDL:omg.org/CORBA/InterfaceDef:1.0
</pre>

<p>Using such prefixes helps reduce the chances of name clashes among repository IDs for types defined by separate organizations. To modify the version number in a repository ID, we use the <b>#pragma version</b> directive:</p>

<pre>
module CORBA {
  typeprefix CORBA &quot;omg.org&quot;
  interface InterfaceDef { ... };
#pragma version InterfaceDef 3.0
};</pre>

<p>The parameters to the <b>#pragma version </b>directive are the scoped name of the entity to be versioned, and the version number in <b>&lt;major&gt;.&lt;minor&gt;</b> format. (Caveats regarding the versioning of IDL definitions are explained elsewhere <a href="#4">[4]</a>). Note also that in this example we use the new <b>typeprefix </b>IDL keyword to attach the <b>&quot;omg.org&quot;</b> prefix to the <b>CORBA</b> module definition, rather than using <b>#pragma prefix</b>. This new keyword promotes the importance of prefixes and helps eliminate ambiguities regarding the scope and application of <b>#pragma prefix</b>, especially when one IDL file includes another.  With the <b>#pragma version</b> directive and <b>typeprefix </b>keyword<b> </b>in effect, the repository ID for our example becomes:</p> 

<pre>
IDL:omg.org/CORBA/InterfaceDef:3.0
</pre>

<p>Finally, you can use the <b>#pragma ID</b> directive or the new <b>typeid </b>keyword to set the whole repository ID, as follows:</p>

<pre>
module A {
 interface B { ... };
#pragma ID B &quot;LOCAL:module(A)/interface(B)&quot;
};
</pre>

<p>Both the <b>#pragma ID</b> directive and the <b>typeid </b>keyword must be followed by a scoped name and an identifier string. This example shows the use of a <b>LOCAL</b> repository ID format for the identifier. The CORBA specification includes the <b>LOCAL</b> format to allow applications to support their own custom repository ID strings. For this format, the identifier can be any string you want it to be as long as it follows the <b>&quot;LOCAL:&quot;</b> format identifier. Despite official CORBA support for it, the <b>LOCAL</b> format is rarely used in practice.</p>
<p>If we know the repository ID of an entity, we can easily look it up in an IFR. The <b>Repository </b>interface we mentioned above (i.e., the one that represents the outermost container in the IFR) provides the <b>lookup_id </b>operation for searching the IFR based on repository ID. The following example illustrates how to use the repository ID for this purpose:</p>

<pre>
 1  CORBA::Object_var obj = 
 2    orb-&gt;resolve_initial_references 
 3    (&quot;InterfaceRepository&quot;);
 4  CORBA::Repository_var repos = 
 5    CORBA::Repository::_narrow (obj.in ());
 6  CORBA::Contained_var contained = 
 7    repos-&gt;lookup_id (&quot;IDL:Stock/Quoter:1.0&quot;);
 8  CORBA::InterfaceDef_var intf_def = 
 9    CORBA::InterfaceDef::_narrow (contained.in ());
10  // intf_def now refers to the interface definition
11  // for Stock::Quoter
</pre>

<p>Lines 1-5 obtain a <b>Repository </b>reference by passing <b>&quot;InterfaceRepository&quot;</b> to <b>resolve_initial_references</b> and narrowing the return value appropriately. Lines 5-6 then invoke <b>lookup_id</b>, passing in the default repository ID for the <b>Stock::Quoter</b> interface. The <b>lookup_id </b>operation returns <b>Contained</b>, which we narrow to <b>InterfaceDef</b> in lines 8-9. Note that this narrowing is based on static knowledge that <b>Stock::Quoter</b> is an interface, but we could avoid that by asking <b>Contained </b>what it is, as follows:</p> 


<pre>
 // Lines 1-7 same as above.
 8  if (contained-&gt;def_kind () == CORBA::dk_Interface) {
 9    CORBA::InterfaceDef_var intf_def =
10      CORBA::InterfaceDef::_narrow (contained.in ());
11    // intf_def now refers to the interface 
12    // definition for Stock::Quoter
13  }
</pre>

<p>The <b>def_kind </b>operation call on line 8 returns <b>DefinitionKind</b>, which is an <b>enum</b> that indicates what type of definition <b>Contained</b> refers to. Having verified that <b>Contained </b>actually does refer to an <b>interface </b>type, on lines 9-10 we safely narrow <b>Contained</b> to <b>InterfaceDef</b>.</p>

<H3><FONT COLOR="#000080">Evaluating the IFR</FONT></H3>

<p>When used in conjunction with other Dynamic CORBA features, such as the DII and DSI, the CORBA IFR supports powerful and type-safe metaprogramming capabilities <a href="#5">[5]</a>. CORBA applications can query an IFR to obtain metadata that describes IDL interface types, operation signatures, operation arguments and return types, and the definition of user-defined data types.  DII clients and DSI servers can use the metadata provided in an IFR to construct &quot;generic&quot; applications whose behavior can be determined at run time (e.g., via an interpretive language like CorbaScript <a href="#6">[6]</a>). These generic applications can also be used to reduce the effort required to develop bridges that translate requests from an ORB in one domain to other ORBs in a different domain or other systems running different middleware technologies, such as COM  or Java RMI. </p>
<p>For example, a generic CORBA bridge can use the DII, DSI, and IFR to process a two-way operation as follows: </p>

<UL><LI>Upon receiving a request, use the DSI API and IFR to decompose the request into a name/value list (<b>NVList</b>), which stores each argument in a separate Any data structure.</LI>
<LI>Use the resulting <b>NVList</b> to construct a DII request and use the DII API to send this request to the target object.</LI>
<LI>After receiving the DII reply, <b>NVList</b> holds the <b>out</b> arguments, so transfer it and the return value, or any raised exception, back into the DSI <b>ServerRequest</b> and reply to the original DSI request.</LI>
</UL>

<p>Such a bridge could serve, for example, as a generic dynamic load balancer, forwarding requests to the least loaded server among a set of replicas <a href="#7">[7]</a>. Achieving this sort of flexibility using statically compiled CORBA stubs and skeletons would be impractical.</p>
<p>Although the IFR specification is a powerful service that occupies a large portion of the CORBA standard, surprisingly few CORBA developers actually use the IFR in practice. The following are some of the key reasons: </p>

<UL><LI><b>Complexity</b>. It should be clear from the  discussion above that a generic ORB bridge can incur significant overhead, both in terms of time/space utilization and programming effort. For example, Dynamic CORBA operations and the IFR may require multiple data copies (e.g., copying the data from the request buffer into each one of the <b>Any</b>s of the DSI argument list and then later copying the reply from the DSI argument list into the DII request buffer). Copies are also required from the DII reply buffer into the <b>Any</b>s used to extract each argument and finally into the DSI reply buffer. There's also the overhead of having to make one or more expensive remote calls to the IFR to obtain the type information needed just to invoke the original desired request. Likewise, the programming APIs for the IFR are large and complicated, which makes them hard to use correctly. Our examples in this column provide only a sample of the complexity involved in navigating the IFR data structures and interfaces.</LI> 
<LI><b>Consistency management</b>. The IFR holds metadata about objects separately from the objects themselves. Although this design saves human and computer resources for applications that don't use an IFR, it also allows the IFR to easily get out of sync with the objects it is supposed to describe. It also requires you to remember to populate the IFR with your IDL definitions if you intend to use your objects in Dynamic CORBA applications. An alternative way of providing an IFR-like service would be to have the objects themselves provide their own metadata in a reflective manner. For example, rather than having <b>Object::get_interface</b> retrieve information from a separate IFR, the object's skeletons could return the information directly based on their own compile-time type information. This would ensure that the metadata would never be inaccurate or missing &#151; if you can get to the object, then you are assured that you can also get to its metadata. Naturally, this approach would have increased the space utilization for applications that don't use the IFR, which helps explain why the OMG didn't mandate the tighter coupling between objects and their metadata.</LI></UL> 

<H3><FONT COLOR="#000080">Concluding Remarks</FONT></H3>

<p>CORBA applications based on static stubs and skeletons have been used successfully in domains such as telecommunications, aerospace, process automation, and e-commerce. Static stubs and skeletons are not well suited, however, to shielding developers from the effects of changes to requirements or environmental conditions that occur late in an application's lifecycle (i.e., during deployment and/or at run time). For example, application developers may need to interact with objects whose interfaces did not exist when a distributed application was deployed initially. With Static CORBA, applying these types of changes requires tedious and error-prone redesign and reimplementation of existing application software. For applications such as interactive test programs or intermediary bridges that must be independent of the objects they interact with, Static CORBA simply does not suffice.</p> 
<p>To address the limitations of Static CORBA outlined above, this column described the Dynamic CORBA IFR, which is a service that provides type information about CORBA interfaces and other entities defined in IDL. As described in our previous columns on Dynamic CORBA, one purpose of the DII and DSI mechanisms is to defer an application's binding onto specific interface types until run time. The IFR helps ensure the type-safety and correctness of these run-time bindings. </p> 
<p>Our next column will discuss Portable Interceptors, which are yet another kind of Dynamic CORBA feature that an ORB invokes in the path of an operation invocation to monitor or modify the behavior of the invocation without changing the client or server application. If you have comments, questions, or suggestions regarding Dynamic CORBA or our column in general, please let us know at <a href="mailto:object_connect@cs.wustl.edu">object_connect@cs.wustl.edu</a>. </p>
<p>We'd like to thank Jeff Parsons for his helpful comments that improved the form and content of this column.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] Steve Vinoski and Douglas C. Schmidt. &quot;Object Interconnections: Dynamic CORBA, Part 1: The Dynamic Invocation Interface,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, July 2002, <a href="c:\www.cuj.com/experts/2007/vinoski.htm">&lt;www.cuj.com/experts/2007/vinoski.htm&gt;</a>.</p>
<p><a name="2"></a>[2] Steve Vinoski and Douglas C. Schmidt. &quot;Object Interconnections: Dynamic CORBA, Part 2: Dynamic Any,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, September 2002, <a href="c:\www.cuj.com/experts/2009/vinoski.htm">&lt;www.cuj.com/experts/2009/vinoski.htm&gt;</a>.</p>
<p><a name="3"></a>[3] Steve Vinoski and Douglas C. Schmidt. &quot;Object Interconnections: Dynamic CORBA, Part 3: The Dynamic Skeleton Interface,&quot; <i>C/C++ Users Journal C++ Experts Forum</i>, November 2002, <a href="c:\www.cuj.com/experts/2011/vinoski.htm">&lt;www.cuj.com/experts/2011/vinoski.htm&gt;</a>.</p>
<p><a name="4"></a>[4] Michi Henning and Steve Vinoski. <i>Advanced CORBA Programming with C++</i> (Addison-Wesley, 1999).</a></p>
<p><a name="5"></a>[5] Nanbor Wang, Douglas C. Schmidt, Ossama Othman, and Kirthika Parameswaran. &quot;Evaluating Meta-Programming Mechanisms for ORB Middleware,&quot; <i>IEEE Communication Magazine</i>, October 2001.</a></p>
<p><a name="6"></a>[6] Object Management Group. &quot;CORBA Scripting Language, v1.0,&quot; OMG Document formal/01-06-05, June 2001.</b></a></p>
<p><a name="7"></a>[7] Ossama Othman, Carlos O'Ryan, and Douglas C. Schmidt. &quot;An Efficient Adaptive Load Balancing Service for CORBA,&quot; <i>IEEE Distributed Systems Online</i>, March 2001.</a></p>

<H3><FONT COLOR="#000080">About the Author</FONT></H3>
<p><B><A HREF="http://www.iona.com/hyplan/vinoski/">Steve Vinoski</A></B> is vice president of Platform Technologies and chief architect for IONA Technologies and is also an IONA Fellow. A frequent speaker at technical conferences, he has been giving CORBA tutorials around the globe since 1993. Steve helped put together several important OMG specifications, including CORBA 1.2, 2.0, 2.2, and 2.3; the OMG IDL C++ Language Mapping; the ORB Portability Specification; and the Objects By Value Specification. In 1996, he was a charter member of the OMG Architecture Board. He is currently the chair of the OMG IDL C++ Mapping Revision Task Force. He and Michi Henning are the authors of <a href="http://cseng.aw.com/book/0,,0201379279,00.html"><i>Advanced CORBA Programming with C++</i></a>, published in January 1999 by Addison Wesley Longman. Steve also represents IONA in the W3C (World Wide Web Consortium) Web Services Architecture Working Group.</p> 
<p><B><A HREF="http://www.cs.wustl.edu/~schmidt/">Doug Schmidt</A></b> is a full professor at Vanderbilt University.  His research focuses on patterns, optimization principles, model-based software development, and empirical analyses of object-oriented techniques that facilitate the development of high-performance, real-time distributed object computing middleware on parallel processing platforms running over high-speed networks and embedded-system interconnects. He is the lead author of the books <A HREF="http://www.cs.wustl.edu/~schmidt/POSA/"><i>Pattern-Oriented Software Architecture: Patterns for Concurrent and Networked Objects</i></A>, published by Wiley and Sons, and <A HREF="http://www.cs.wustl.edu/~schmidt/ACE/book1/"><i>C++ Network Programming: Mastering Complexity with ACE and Patterns</i></A> and <A HREF="http://www.cs.wustl.edu/~schmidt/ACE/book2/"><i>C++ Network Programming: Systematic Reuse with ACE and Frameworks</i></A> both published by Addison-Wesley. He can be contacted at <A HREF="mailto:schmidt@isis-server.isis.vanderbilt.edu ">schmidt@isis-server.isis.vanderbilt.edu</A>.</p>


</BLOCKQUOTE></BODY></HTML>
