<HTML>
<HEAD>
<TITLE>January 2003/A Different Interpretation of the Interpreter Design Pattern</TITLE>
</HEAD>
<BODY>
<h4>Listing 1: A straightforward interpreter implementation for the grammar rule 
  from the regular-expression language </h4>
<Pre>
class RegularExpression
{
public:
    virtual ~RegularExpression() {}
    virtual bool Interpret( const char *&amp; ) const = 0;
};

class RepetitionExpression : public RegularExpression
{
    RegularExpression * repeat_;
public:
    RepititionExpression( RegularExpression * repeat )
        : repeat_( repeat ) {}
    virtual bool Interpret( const char *&amp; sz ) const
    {
        while( repeat_-&gt;Interpret( sz ) )
            ;
        return true;
    }
};

class LiteralExpression : public RegularExpression
{
    char ch_;
public:
    LiteralExpression( char ch )
        : ch_( ch ) {}
    virtual bool Interpret( const char *&amp; sz ) const
    {
        return ( *sz!==\o&#146;&amp;&amp;*sz==ch_ ) ? ( ++sz,true ) : false;
    }
};
&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
