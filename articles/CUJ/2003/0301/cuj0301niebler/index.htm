<HTML>
<HEAD>
<TITLE>January 2003/A Different Interpretation of the Interpreter Design Pattern</TITLE>
</HEAD>
<BODY>
<h2 align="center">A Different Interpretation of the Interpreter Design Pattern</h2>
<h3 align="center"><b>Eric Niebler</b></h3>
<div align="center">A refreshing perspective on implementing an allegedly less-than-efficient 
  design pattern. </div>
<hr>
<p> <a name="1_return"></a><a name="2_return"></a>When I read about the Interpreter 
  pattern in <i>Design Patterns</i> [<a href="#1">1</a>], it was like being hit 
  in the face with a two-by-four. &#147;This is my code!&#148; I thought. In complete 
  ignorance, I had used something akin to Interpreter to solve the same problem 
  that the GoF [<a href="#2">2</a>] used as their &#147;motivational example&#148;: 
  regular expressions. Interpreter (in the design pattern sense) is a wonderfully 
  clean and powerful way to express grammar rules in code such that they can be 
  &#147;interpreted,&#148; or executed, at run time. But this pattern often passed 
  over because of performance considerations. Even the GoF discourages its use 
  for high-performance applications: 
<p> The Interpreter pattern works best when ... efficiency is not a critical concern. 
  The most efficient interpreters are not implemented by interpreting a parse 
  tree directly but by first translating them into another form. For example, 
  regular expressions are often transformed into state machines. ([<a href="#1">1</a>], 
  p.245) 
<p> <a name="3_return"></a><a name="4_return"></a><a name="5_return"></a>It doesn&#146;t 
  have to be this way. True, a straightforward, naive implementation of Interpreter 
  has some serious performance issues. But some very simple tricks yield an implementation 
  of Interpreter that rivals state machines for speed without giving up any of 
  the pattern&#146;s benefits: clean, modular, and extensible design. I have used 
  these techniques while implementing the GRETA Regular Expression Template Archive 
  [<a href="#3">3</a>], a regular expression engine that, at the time of writing, 
  outperforms Boost&#146;s <b>regex</b> [<a href="#4">4</a>] in many common usage 
  scenarios [<a href="#5">5</a>]. Below I describe one of the tricks I use. The 
  trick involves using templates to inline virtual function calls. 

<h3>A Problem of Interpretation </h3>
<p> If you can express your problem as a mini-language, then the Interpreter pattern 
  can give you some traction. Typically, your language translates directly into 
  code by assigning each grammar rule in your language to a class. Sentences in 
  your language parse into trees. To execute these sentences, you traverse these 
  trees recursively. This is the modus operandi of the Interpreter design pattern. 
  Virtual function calls get you from one node in the tree to the next. That&#146;s 
  where the performance problems creep in, so that&#146;s where I&#146;ll start. 
  Below is a specific example, taken from <i>Design Patterns</i>. 
<p> Here is a grammar rule from the regular expression language:
<p> 
<pre>
repetition ::= expression '*'</pre>
<p> <b>repetition</b> is some expression followed by the character literal <b>'*'</b>. 
  This rule lets you write Perl regular expressions like <b>/a*/</b>, which matches 
  zero or more <b>'a'</b>s. A straightforward implementation of an interpreter 
  for this rule might look like the code in <a href="0301dl1.htm" target="_blank">Listing 
  1</a>. 
<p> With these classes, I can parse the regular expression <b>/a*/</b> into a 
  tree as follows:
<p> 
<pre>
// parse and interpret /a*/
RegularExpression * pRE =
  new RepetitionExpression(
    new LiteralExpression('a'));
const char *sz = "aaaaaabbbbbb";
pRE-&gt;Interpret(sz);</pre>
<p> This is all very nice. It&#146;s clean and it works. If you follow the first 
  rule of optimization, &#147;Don&#146;t do it,&#148; then you are done. But where&#146;s 
  the fun in that? You can do better. The big problem with this implementation 
  is the following line in <b>RepetitionExpression::Interpret</b>: 
<p> 
<pre>
while(repeat_-&gt;Interpret(sz));</pre>
<p> <b>repeat_</b> is a pointer to the polymorphic base <b>RegularExpression</b>, 
  and <b>Interpret</b> is virtual, so this call uses the virtual function call 
  mechanism. A virtual function call is slow: from <b>repeat_</b>, you fetch the 
  pointer to the virtual function table, then you index into that table to get 
  a pointer to the <b>Interpret</b> method, and only then can you call it. Whew! 
  Worse, this is happening in a tight loop, so you do it over and over again. 
  (Technically, C++ implementations are not required to use virtual function tables, 
  but in reality v-tables are the only game in town.) 
<p> Here&#146;s the real kicker: all this work is totally unnecessary. For this 
  particular tree (which is representing the regular expression <b>/a*/</b>), 
  the object pointed to by <b>repeat_</b> is never going to change. It will always 
  point to a <b>LiteralExpression</b> and <b>repeat_-&gt;Interpret</b> will always 
  call <b>LiteralExpression::Interpret</b>, but you blindly make virtual function 
  calls every time. Now you see why Interpreter has a reputation for being slow: 
  unnecessary virtual function calls. At first blush, it seems like this is a 
  fatal flaw of the pattern. After all, the pattern <i>is</i> the tree, and it 
  is the polymorphic base pointers that hold the tree together.
<p> The problem is that when the time comes to actually <b>Interpret</b> the expression, 
  the compiler doesn&#146;t know the exact types of the nodes in the tree, so 
  it has no choice but to make the function calls virtual. Is there a better way? 
  Well, you do know the exact types when you are building the tree (i.e., parsing 
  the pattern). If there were some way to preserve that information and use it 
  in <b>Interpret</b>, you&#146;d be golden. In fact, there is. 

<h3>Partial Evaluation </h3>
<p> The elegance and simplicity of the Interpreter pattern is evident in <b>RepetitionExpression</b>. 
  It is totally general. It can repeat any <b>RegularExpression</b>. But that 
  generality comes at a price: unnecessary virtual function calls leading to slow 
  execution times. Let&#146;s mess things up. Suppose I want to repeat literals 
  really fast, but I don&#146;t care so much about repeating other expressions 
  quickly. I could do it by writing an extra class that specialized for repeating 
  literals. See the <b>RepeatLiteral</b> class in <a href="0301dl2.htm" target="_blank">Listing 
  2</a>. 
<p> Now, when I am parsing a pattern and encounter a <b>'*'</b>, I check to see 
  if the <b>'*'</b> is operating on a literal. If so, I use <b>RepeatLiteral</b>; 
  otherwise, I use the more general <b>RepetitionExpression</b>.
<p> Wait a minute, what&#146;s going on here? What is this?
<p> 
<pre>
while(literal_-&gt;
LiteralExpression::Interpret(sz));</pre>
<p> This is an explicitly qualified call to a member function. By telling the 
  compiler that I want to call the <b>Interpret</b> method in the <b>LiteralExpression</b> 
  class, I am bypassing the virtual function mechanism. I&#146;m effectively telling 
  the compiler, &#147;Look, I know I told you that <b>Interpret</b> is virtual. 
  But for this call, forget all that and call <b>LiteralExpression::Interpret</b> 
  directly.&#148; And since <b>LiteralExpression::Interpret</b> is defined in 
  situ, this call can and probably will be inlined, even though it is marked virtual. 
  (This is one of those rare times when a compiler is allowed to inline a virtual 
  function.) I have just turned a slow virtual call into a super-fast inline function 
  call. 
<p> This is nice but far from ideal. First, I had to define an extra class. More 
  code is bad; less code is good. Second, the parsing code needs to know about 
  this special case in order to create a <b>RepeatLiteral</b> when required. This 
  increases code complexity and creates maintenance problems. Third, only <b>LiteralExpression</b>s 
  are benefiting from this special treatment. All the other <b>Expression</b> 
  types are going to get jealous. And, they&#146;re still going to be slow, too. 

<h3>What Now? </h3>
<p> What I have now is an ugly hack, a wart on my otherwise beautiful interpreter. 
  But it is a hack that works, and it&#146;s fast. It works because it uses type 
  information. Since the compiler knows the exact type of the object being repeated, 
  it can do at compile time what could only be done at run time before: function 
  call resolution. But my hack is not generic. By now, you&#146;ve heard the terms 
  &#147;type information,&#148; &#147;compile time,&#148; and &#147;generic&#148; 
  in the same paragraph, and a solution should be screaming out at you. Templates! 
  Let&#146;s use templates to make a generic <b>Repeater</b> that knows the exact 
  type of the object it is repeating. <a href="0301dl3.htm" target="_blank">Listing 
  3</a> shows my new implementation. 
<p> I have replaced the generic <b>RepetitionExpression</b> class with a template 
  class called <b>Repeater</b>. <b>Repeater</b> takes a concrete expression type 
  as a template parameter. Internally, it stores a pointer to an object of exactly 
  that type. In the <b>Interpret</b> method, it uses that type information to 
  turn what would have been a virtual call into an inline call. <b>Repeater</b> 
  is just as generic as my original <b>RepetitionExpression</b>, except that the 
  polymorphism is happening at compile time instead of at run time, which is exactly 
  when I want it to happen.
<p> You&#146;ll notice that I added an extra virtual method in the <b>RegularExpression</b> 
  base class. It is called <b>RepeatMe()</b>. The code that parses regular expressions 
  into trees will call <b>RepeatMe()</b> on a <b>RegularExpression</b> to create 
  and initialize a <b>Repeater</b> object for it. This is some nice syntactic 
  sugar that will make it easier to write the parser code. (Since only the parser 
  code will call it, <b>RepeatMe()</b> would probably be private in a real implementation.)
<p> With these classes, I can build a tree representing the pattern <b>/a*/</b> 
  as follows:
<p> 
<pre>
RegularExpression * pRE =
  (new LiteralExpression('a'))
    -&gt;RepeatMe();
const char *sz = "aaaaaabbbbbb";
pRE-&gt;Interpret( sz );</pre>
<p> First, I create a new <b>LiteralExpression</b>. Then, I invoke <b>RepeatMe()</b> 
  on it. This calls <b>LiteralExpression::RepeatMe()</b>, which creates a new 
  object of type <b>Repeater&lt;LiteralExpression&gt;</b> and initializes it with 
  the <b>this</b> pointer of the <b>LiteralExpression</b> object. This new <b>Repeater</b> 
  is what gets <b>Interpret</b>ed on the last line. The first call to <b>Interpret</b> 
  is still virtual, and it gets you to <b>Repeater&lt;LiteralExpression&gt;::Interpret</b> 
  via the usual virtual function call mechanism. After that, though, it&#146;s 
  smooth sailing. The <b>Repeater</b> will now execute code equivalent to: 
<p> 
<pre>
while(repeat_-&gt;
LiteralExpression::Interpret(sz));</pre>
<p> These calls are all inline. In the above example, I am matching against the 
  string <b>"aaaaaabbbbbb"</b>, so I will call <b>LiteralExpression::Interpret</b> 
  once for each of the six <b>'a'</b>s and once for the first <b>'b'</b>, which 
  will return false. I went from seven virtual function calls to no function calls 
  at all! (This is assuming, of course, that the compiler did its job and actually 
  inlined the calls for me.) This is a very nice result. 

<h3>Taking Stock </h3>
<p> Looking over the new implementation, you should notice how much it looks like 
  my original implementation. The inheritance hierarchy is unchanged, I didn&#146;t 
  have to add very much code, and the Interpreter design pattern survived intact. 
  In fact, the new code is just as modular, generic, and extensible as it was 
  before, with the exception that I need to implement <b>RepeatMe()</b> for each 
  expression type that can be repeated. That&#146;s a small price to pay, especially 
  considering that <b>RepeatMe()</b> is always going to be a one-liner. I can 
  even implement it with a macro. In exchange, you get a nice little performance 
  boost, having eliminated a bunch of virtual function calls. 
<p> As I mentioned earlier, I use this trick in my own regular-expression code. 
  It was very easy to integrate this change into my existing code base. After 
  just a few hours of work, much of it mindless cut-and-paste, I was rewarded 
  with a 30% performance improvement in pattern matching time. I fight and claw 
  for every percent of performance, so 30% in one fell swoop is huge!
<p> Is it all roses? Did I pay anything for this performance? Sure. I instantiated 
  a bunch of templates, and that takes up space. It&#146;s our old friend, the 
  space/time tradeoff. In this case, though, it is not much of a tradeoff. I am 
  instantiating a bunch of <b>Repeater</b> classes, which are small, so my performance 
  gains are worth it. In your application, though, things might be different. 
  If your grammar is very large, or if you turn a large class into a template, 
  then your code bloat could bite you. As always, your mileage may vary. 

<h3>Summary </h3>
<p> I started with a slow, naive implementation of the Interpreter design pattern 
  and finished up with a lean, mean language-interpreting engine. And I did it 
  all with very little work and the help of templates. I believe that the Interpreter 
  pattern is worthy of consideration for even the most demanding applications. 
  If you need proof, you can check out my regular expression code. It is online 
  at &lt;<a href="http://research.microsoft.com/projects/greta">http://research.microsoft.com/projects/greta</a>&gt;. 
  Enjoy! 

<h3>Notes </h3>
<p> <a name="1"></a>[1] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 
  <i>Design Patterns &#151; Elements of Reusable Object-Oriented Software</i> 
  (Addison Wesley, 1994).<br>
  [<a href="#1_return">return to text</a>] 
<p> <a name="2"></a>[2] GoF stands for the Gang of Four, authors of <i>Design 
  Patterns</i> [1].<br>
  [<a href="#2_return">return to text</a>] 
<p> <a name="3"></a>[3] Get the source code for the GRETA Regular Expression Template 
  Archive at &lt;<a href="http://research.microsoft.com/projects/greta">http://research.microsoft.com/projects/greta</a>&gt;. 
  It is free for non-commercial use.<br>
  [<a href="#3_return">return to text</a>] 
<p> <a name="4"></a>[4] &lt;<a href="http://www.boost.org">www.boost.org</a>&gt;.<br>
  [<a href="#4_return">return to text</a>] 
<p> <a name="5"></a>[5] Find the results of a performance comparision between 
  Boost <b>regex</b>++ and GRETA at &lt;<a href="http://research.microsoft.com/projects/greta/regex_perf.html">http://research.microsoft.com/projects/greta/regex_perf.html</a>&gt;.<br>
  [<a href="#5_return">return to text</a>] 
<h3>About the Author</h3>
<p><b>Eric Niebler</b> studied Computer Science at the University of Virginia. 
  He spent several years in the Windows 2000 group at Microsoft before moving 
  to a development position at Microsoft Research in the Natural Language Processing 
  group. He is now a library developer in the Visual C++ group. His interestes 
  include data structures and algorithms; compiler, language, and library design; 
  data serialization and persistence; and pattern matching. He can be contacted 
  at <b><a href="mailto:ericne@microsoft.com">ericne@microsoft.com</a></b>. 
</BODY>
</HTML>
