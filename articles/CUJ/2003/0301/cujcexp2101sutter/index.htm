<HTML>   
     <HEAD>
<TITLE>January 2003/Sutter's Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter's Mill: Befriending Templates</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">by Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>Let's say we have a function template that does <b>SomethingPrivate()</b> to the objects it operates on. In particular, consider the <b>boost::checked_delete()</b> function template, which deletes the object it's given &#151; among other things, it invokes the object's destructor:</p>

<pre>
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x ) {
    // ... other stuff ...
    delete x;
  }
}
</pre>

<p>Now, say you want to use this function template with a class where the operation in question (here the destructor) happens to be private:</p>

<pre>
class Test {
  ~Test() { }               // private!
};

Test* t = new Test;
boost::checked_delete( t ); // ERROR:
  // Test's destructor is private,
  // so checked_delete can't call it.
</pre>

<p>The solution is simple: just make <b>checked_delete()</b> a friend of <b>Test</b>. (The only other option is to give up and make <b>Test</b>'s destructor public.) What could be easier? And indeed, in the Standard C++ language there are two legal and easy ways to do it.</p> 
<p>This article exists as a reality check: befriending a template in another namespace is easier said (in the Standard) than done (using real-world compilers that don't quite get the Standard right).</p>
<p>In sum, I have some good news, some bad news, and then some good news again:</p>

<UL>
<LI>The Good News: there are two perfectly good standards-conforming ways to do it, and the syntax is natural and unsurprising.</LI>
<LI>The Bad News: neither standard syntax works on all current compilers. Even some of the strongest and most-conformant compilers don't let you write one or both of the legal, sanctioned, standards-conforming, and low-cholesterol methods that you should be able to use.</LI>
<LI>The Good News (reprise): one of the perfectly good standards-conforming ways does work on every current compiler I tried except for gcc.</LI>
</UL>

<p>Let's investigate.</p>

<H3><FONT COLOR="#000080">The Original Attempt</FONT></H3>

<p>This article was prompted by a question on Usenet by Stephan Born, who wanted to do the above. His problem was that, when he tried to write the <b>friend</b> declaration to make a specialization of <b>boost::checked_delete()</b> a friend of his class <b>Test</b>, the code wouldn't work on his compiler (Microsoft Visual C++ 6.0).</p>
<p>Here's his original code:</p>

<pre>
// Example 1: One way to grant friendship
//
class Test {
  ~Test() { }
  <b>friend void boost::checked_delete( Test* x );</b>
};
</pre>

<p>Alas, not only does this code not work on the poster's compiler, it in fact fails on quite a few compilers. In brief, Example 1's <b>friend</b> declaration:</p>

<UL>
<LI>Is legal according to the Standard, but relies on a dark corner of the language.</LI>
<LI>Is rejected by many current compilers, including very good ones.</LI>
<LI>Is easily fixed to not rely on dark corners and work on all but one current compiler (gcc).</LI>
</UL>

<p>I am about to delve into explaining the four ways that the C++ language lets you declare friends. It's easy. I'm also going to have some fun showing you what real compilers do and finish with a guideline for how to write the most portable code.</p>

<H3><FONT COLOR="#000080">Why It's Legal but Dark</FONT></H3>

<p>When declaring friends, there are four options (enumerated in the C++ Standard, clause 14.5.3). They boil down to the following. </p>
<p>When you declare a friend without saying the keyword <b>template</b> anywhere:</p>

<OL><LI>IF the name of the friend looks like the name of a template specialization with explicit template arguments (e.g., <b>Name&lt;SomeType&gt;</b>)</LI>
<UL><p>THEN the friend is the indicated specialization of that template.</p></UL>
<LI>ELSE IF the name of the friend is qualified with a class or namespace name (e.g., <b>Some::Name</b>)<br>
AND that class or namespace contains a matching non-template function</LI>
<UL><p>THEN the friend is that function.</p></UL>
<LI>ELSE IF the name of the friend is qualified with a class or namespace name (e.g., <b>Some::Name</b>)<br>
AND that class or namespace contains a matching function template (deducing appropriate template parameters)</LI>
<UL><p>THEN the friend is that function template specialization.</p></UL>
<LI>ELSE the name must be unqualified and declare (or redeclare) an ordinary (non-template) function.</LI></OL>

<p>Clearly #2 and #4 only match non-templates, so to declare the template specialization as a friend we have two choices: write something that puts us into bucket #1, or write something that puts us into bucket #3. In our example, the options are:</p>

<pre>
// The original code, legal because it
// falls into bucket #3
//
friend void boost::checked_delete( Test* x );
</pre>

<p>or</p>

<pre>
// Adding &quot;&lt;Test&gt;&quot;, legal because it
// falls into bucket #1
//
friend void boost::checked_delete<b>&lt;Test&gt;</b>( Test* x );
</pre>

<p>The first is shorthand for the second ... but <i>only if</i> the name is qualified (here by <b>boost::</b>), <i>and</i> there's no matching non-template function in the same indicated scope. Even though both are legal, the first makes use of a dark corner of the <b>friend</b> declaration rules that is sufficiently surprising to people &#151; and to most current compilers! &#151; that I will propose no fewer than three reasons to avoid using it.</p>

<H3><FONT COLOR="#000080">Why To Avoid Bucket #3</FONT></H3>

<p>There are several reasons to avoid bucket #3, even though it's technically legal:</p>

<H4><FONT COLOR="#000080">1. Bucket #3 doesn't always work.</FONT></H4>
<p>As noted above, it's a shorthand for explicitly naming the template arguments in angle brackets, but the shorthand works only if the name is qualified and the indicated class or namespace does not also contain a matching non-template function.</p> 
<p>In particular, if the namespace has (or later gets) a matching non-template function, that would get chosen instead because the presence of a non-template function means bucket #2 preempts #3. Kind of subtle and surprising, isn't it? Kind of easy to mistake, isn't it? Let's avoid such subtleties.</p>

<H4><FONT COLOR="#000080">2. Bucket #3 is a really edgy case, fragile and surprising to most <i>people</i> reading your code.</FONT></H4>

<p>For example, consider this very slight variant &#151; all that I've changed is to remove the qualification <b>boost::</b>.</p>

<pre>
// Variant: Make the name unqualified,
// and it means something very different
//
class Test {
  ~Test() { }
  friend void checked_delete( Test* x );
};</pre>

<p>If you omit <b>boost::</b> (i.e., if the call is unqualified), you fall into a completely different bucket, namely #4, which cannot match a function template at all, ever, not even with pretty please. I'll bet you dollars to donuts that just about everyone on our beautiful planet will agree with me that it's Pretty Surprising that just omitting a namespace name changes the meaning of the <b>friend</b> declaration so drastically. Let's avoid such edgy constructs.</p> 

<H4><FONT COLOR="#000080">3. Bucket #3 is a really edgy case, fragile and surprising to most <i>compilers</i> reading your code.</FONT></H4>

<p>Let's try the two options, bucket #1 and bucket #3, on a wide range of current compilers and see what they think. Will the compilers understand the Standard as well as we do (having read the above)? Will at least all the strongest compilers do what we expect? No, and no, respectively.</p>
<p>Let's try bucket #3 first:</p>

<pre>
// Example 1 again
//
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x ) {
    // ... other stuff ...
    delete x;
  }
}
class Test {
  ~Test() { }
  friend void boost::checked_delete( Test* x ); // the original code
};

int main() {
  boost::checked_delete( new Test );
}
</pre>

<p>Try the above on your own compiler and then compare with our results. If you've ever watched the game show &quot;Family Feud&quot; on television, you can now imagine Richard Dawson's voice saying: &quot;Survey saaaaays&quot; (see <a href="sutter_tab1.htm">Table 1</a>).</p>
<p>In this case, the survey says that this syntax is not well recognized on actual compilers. By the way, it shouldn't surprise us that Comeau, EDG, and Intel all agree, because they're all based on the EDG C++ language implementation; of the five distinct C++ language implementations tested here, three don't accept this version (gcc, Metrowerks, Microsoft) and two do (Borland, EDG).</p> 
<p>Let's try writing it the other standards-conforming way, for bucket #1:</p>

<pre>
// Example 2: The other way to declare friendship
//
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x ) {
    // ... other stuff ...
    delete x;
  }
}
class Test {
  ~Test() { }
  friend void boost::checked_delete&lt;&gt;( Test* x );
};

int main() {
  boost::checked_delete( new Test );
}
</pre>

<p>Or, equivalently, we could have spelled out:</p>

<pre>
  friend void boost::checked_delete&lt;Test&gt;( Test* x );
</pre>

<p>Either way, when we twist our compilers' tails, our survey says that this is noticeably better supported (see <a href="sutter_tab2.htm">Table 2</a>).</p>
<p>Bucket #1 sure feels safer &#151; Example 2 works on every current compiler except gcc, and every older compiler except Microsoft Visual C++ 6.0.</p>

<H3><FONT COLOR="#000080">Aside: It's the Namespace That's Confusing Them</FONT></H3>

<p>Note that if the function template we're trying to befriend wasn't in a different namespace, then we could use bucket #1 correctly today on nearly all these compilers:</p>

<pre>
// Example 3: If only checked_delete
// weren't in a namespace...
//
// No longer in boost::
template&lt;typename T&gt; void checked_delete( T* x ) {
  // ... other stuff ...
  delete x;
}

class Test {
  // No longer need &quot;boost:&quot;
  friend void checked_delete&lt;Test&gt;( Test* x );
};

int main() {
  checked_delete( new Test );
}
</pre>

<p>Survey says ... (see <a href="sutter_tab3.htm">Table 3</a>). So the problem on most compilers that can't handle Example 1 is specifically declaring friendship for a function template specialization <i>in another namespace</i>. (Whew. Say that three times fast.) Alas, the poster's compiler, Microsoft Visual C++ 6.0, can't handle even this simpler case.</p>

<H3><FONT COLOR="#000080">Two Non-Workarounds</FONT></H3>

<p>When this question arose on Usenet, some responses suggested writing a using-declaration (or equivalently a using-directive) and making the <b>friend</b> declaration unqualified:</p>

<pre>
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x ) {
    // ... other stuff ...
    delete x;
 }
}

using boost::checked_delete;

class Test {
  ~Test() { }

  // NOT the template specialization!
  friend void checked_delete( Test* x );
};
</pre>

<p>The above <b>friend</b> declaration falls into bucket #4 above: &quot;4. ELSE the name must be unqualified and declare (or redeclare) an ordinary (non-template) function.&quot; This is actually declaring a brand-new ordinary non-template function at the enclosing namespace scope called <b>::checked_delete( Test * )</b>.</p>
<p>If you try the above code, many of these compilers will reject it saying that <b>checked_delete()</b> hasn't been defined, and all of them will reject it if you actually try to make use of the friendship and put a private member access call into the <b>boost::checked_delete()</b> template.</p> 
<p>Finally, one expert suggested changing it slightly &#151; using the &quot;<b>using</b>&quot; but also using the template syntax &quot;<b>&lt;&gt;</b>&quot;:</p> 

<pre>
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x ) {
    // ... other stuff ...
    delete x;
 }
}

using boost::checked_delete;

class Test {
  ~Test() { }
  friend void checked_delete&lt;&gt;( Test* x ); // legal?
};
</pre>

<p>The above is probably not legal C++ &#151; the Standard is not clear that this is legal, there's an open issue in the standards committee to decide whether or not this ought to be legal, there is sentiment that it should not be legal, and in the real world virtually all current compilers that I tried reject it. Why do people feel that it should not be legal? For consistency, because <b>using</b> exists to make it easier to use names &#151; to call functions and to use type names in variable or parameter declarations. Declarations are different: just as you must declare a template specialization in the template's original namespace (you can't do it in another namespace &quot;through a <b>using</b>&quot;), so you should only be able to declare a template specialization as a friend naming the template's original namespace (not &quot;through a <b>using</b>&quot;).</p>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>To befriend a function template specialization, you can choose one of two syntaxes:</p>

<pre>
  // From Example 1
  friend void boost::checked_delete ( Test* x );

  // From Example 2: add &lt;&gt; or &lt;Test&gt;
  friend void boost::checked_delete&lt;&gt;( Test* x );
</pre>

<p>This article has demonstrated a pretty high portability price to pay in practice for not just writing &quot;<b>&lt;&gt;</b>&quot; or &quot;<b>&lt;Test&gt;</b>&quot; as in Example 2.</p>
<p><b>Guideline: Say what you mean, be explicit.</b> When you befriend a function template specialization, always explicitly add at least the &quot;<b>&lt;&gt;</b>&quot; template syntax. For example:</p>

<pre>
namespace boost {
  template&lt;typename T&gt; void checked_delete( T* x );
}
class Test {
  friend void boost::checked_delete ( Test* x ); // BAD
  friend void boost::checked_delete&lt;&gt;( Test* x ); // GOOD
};
</pre>

<p>If your compiler doesn't allow either of these legal alternatives for the <b>friend</b> declaration yet, however, you'll have to make the necessary function(s) public &#151; but add a comment saying why and make a note to change it back to private as soon as you upgrade your compiler <a href="#1">[1]</a>.</p>

<H3><FONT COLOR="#000080">Acknowledgment</FONT></H3>

<p>Thanks to John Potter for comments on drafts of this material.</p>

<H3><FONT COLOR="#000080">Note</FONT></H3>

<p><a name="1"></a>[1] There are other workarounds, but they're all much more cumbersome. For example, you could create a proxy class inside namespace <b>boost</b> and befriend that.

<H3><FONT COLOR="#000080">About the Author</FONT></H3>

<p><b>Herb Sutter</b> (<a href="http://www.gotw.ca">&lt;www.gotw.ca&gt;</a>) is convener of the ISO C++ standards committee, author of the acclaimed books <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and one of the instructors of The C++ Seminar (<a href="http://www.gotw.ca/cpp_seminar">&lt;www.gotw.ca/cpp_seminar&gt;</a>). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>


</BLOCKQUOTE></BODY></HTML>
