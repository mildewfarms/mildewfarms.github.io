<HTML>
<HEAD>
<TITLE>January 2003/Uncaught Exceptions</TITLE>
</HEAD>
<BODY>
<h2 align="center">Uncaught Exceptions: Hell Freezes Over</h2>
<div align="center"> 
  <h3>Bobby Schmidt</h3>
  <p>Your mutual dependency and memory puzzles resolved. </p>
</div>
<hr>
<P><B>
</b><I>Copyright &copy; 2002 Robert H. Schmidt</I><P><I>
</i>We finally care about the C++ Standard.<P>
In this instance, &#147;we&#148; equals &#147;Microsoft.&#148; And while I usually don&#146;t take a Microsoft POV in my <I>CUJ</I> columns, this time I almost can&#146;t help myself.<P>
I literally never, ever, thought we&#146;d care about C++ Standard conformance, beyond whatever it took to promote Windows development. I certainly never thought I&#146;d live to see the day that we purposely pushed our compiler technology to the top of the conformance stack. But by God, come early next year, the world will see compiler conformance not only beyond anything a sane predictor would expect of Redmond, but rivaling that of anyone else in the market.<P>
I mean, we can even compile Loki. On purpose. Who saw that coming? 
<P> <a name="1_return"></a>By the time you read this, the Visual C++ team will 
  have published background documentation and white papers explaining the new 
  features of this new Visual C++ release [<a href="#1">1</a>]. Among those papers 
  should be a dissection of the newly supported conformance features. If you also 
  care about conformance, and if you have the same reactions that my colleagues 
  have had to this new compiler, I think you&#146;ll be pleased and a little shocked.
<P>
The compiler will not ship by the time this column hits the streets, although it should be close, within a few months. There&#146;s a chance &#151; how good or bad, I don&#146;t know &#151; that you can get a beta version. I personally prefer that we make the compiler easily and cheaply available, almost a giveaway. I&#146;m probably being overly idealistic. I&#146;m sure the financial and business practicalities are more complex than I&#146;ll ever know, especially as Visual C++ is just one organ of the Visual Studio .NET and .NET Framework behemoth.<P>
If you already use Visual C++ .NET, this will be a worthy upgrade. If you use Visual C++ 6, or otherwise don&#146;t think you care about managed programming in the .NET world, this is still a worthy upgrade, if only for the conformance features. If you program Standard C++ on a non-Microsoft platform, this compiler can help you port your code to Microsoft platforms.<P>
If nothing else motivates you, then allow some pity: if you all upgrade, I won&#146;t have to answer questions about Visual C++ 6 non-conformance anymore!
<h3> Gordian Knot</h3>
<P><b>Q. </b><i>Hi,</i>
<P><i> I really enjoy reading your column every month. Helps me quite a lot in 
  my understanding of C++. And I have a question. Here, I simplify the situation 
  as much as possible:</i>
<P>
<Pre>
class B;

class A
    {
public:
    operator B()
        {      // &lt;=== error here
        return B();
        }
    };

class B
    {
public:
    operator A()
        {
        return A();
        }
    };</pre>
<P><i>The simple fix is to move the body of</i> <B>A::operator B()</B> <i>somewhere 
  else, say into a</i> <B>.cpp</B> <i>file. Now, if I do that, it won&#146;t be 
  inlinable for users of</i> <B>A</B><i>. For performance issues, I&#146;d like 
  to keep it as much as possible in the</i> <B>.h</B><i>, so the compiler will 
  still be able to inline the function.</i>
<P> <i>Is there a workaround for this, or have I no choice but to also use a</i> 
  <B>.cpp</B><i>?</i>
<P> <i>Best,</i>
<P> <i>&#151; Steven Pigeon</i>
<P><b>A. </b>Actually, there&#146;s an even simpler fix that gets you exactly 
  what you want.
<P> The problem, as your compiler has noted, is that <B>B</B> is an incomplete 
  type at the point you try defining <B>operator B</B>. The problem is not the 
  operator per se, for you&#146;d have the same trouble if you tried defining:
<Pre>
B f()</pre>
or
<Pre>
void f(B)</pre>
<P><B>
</b>at the same point: in all cases, <B>B</B> would be an incomplete type where the grammar required a complete type.
<P> As you hint, you can declare &#151; not define, but declare &#151; <B>operator 
  B</B> with impunity:
<Pre>
class A
   {
public:
    operator B(); // OK
    };</pre>
<P><B>
</b>You fear this tactic will force <B>operator B</B>&#146;s definition into a separate source file:
<Pre>
//
// test.h
//
class B;

class A
    {
public:
    operator B();
    };

class B
   {
public:
    operator A()
        {
        return A();
        }
    };

//
// test.cpp
//
#include &#147;test.h&#148;

A::operator B()
    {
    return B();
    }</pre>
<P><B>
</b>But think about this: once the preprocessor includes <B>test.h</B> in <B>test.cpp</B>, the resulting translation unit textually nets out to:
<Pre>
class B;

class A
    {
public:
    operator B();
    };

class B
    {
public:
    operator A()
        {
        return A();
        }
    };

A::operator B()
    {
    return B();
    }</pre>
<P>as if you&#146;d written <B>test.cpp</B> that way all along, in one source file.<P>
So what prevents you from writing <B>test.h</B> that way?<P>
Nothing.
<P> Your solution then: define <B>A::operator B</B> outside class <B>A</B>&#146;s 
  definition but inside the header file. You should also declare the operator 
  as an inline function:
<Pre>
inline operator B();</pre>
<P>to get the full effect you want.<P>
The C and C++ ability to separate declarations from definitions can be confusing, especially to novice programmers, but it can also solve problems that are difficult or impossible to solve otherwise, as is the case here.<P>
<B>Past Life Regression</B>
<P><b>Q. </b><i>Dear Bobby,</i>
<P><i> In C programming, I have been running into memory limitations. For example, 
  the following simple program compiles fine:</i>
<Pre>
char myArray[62632];

int main(void)
    {
    return 0;
    }</pre>
<P><i>But if I change</i> <B>62632</B> <i>to</i> <B>62633</B><i>, on my computer 
  I get a compile-time error. Interestingly, if I move the declaration inside</i> 
  <B>main</B><i>, the error disappears.</i>
<P> <i>Any ideas on what is taking place?</i>
<P><i> Thank you.</i>
<P> <i>&#151; Yisrael Harris</i>
<P>
<P>
<b>A. </b>It&#146;s just these sorts of questions that put the C back into <I>CUJ</I>!<P>
I don&#146;t know what&#146;s going on but can make a likely guess, as your symptoms sound disturbingly like those I used to see in my bad old days of programming for Windows 2 with Microsoft&#146;s C compiler. While I haven&#146;t touched that combination in nigh on a decade, and may get a few specifics wrong below, I remember enough to illuminate your problem.<P>
In old Windows programs using what Microsoft called the small and medium memory models, the compiler and linker stuffed certain kinds of data into a single shared &#147;near&#148; data segment. The segment was limited to what a 16-bit segment register could address, or 64 KB. If the combined size of all near data exceeded the 64-KB limit, the offending program would not build.<P>
One could offset this problem by purposely declaring some data as &#147;far,&#148; or by using the compact or large memory models. These solutions had the side effect of putting data into additional segments that were more expensive to access. One could also dispense with statically declared objects and instead pull from the Windows-managed heap, through the once-infamous <B>GlobalAlloc</B> and related API calls.<P>
While I don&#146;t know what compiler you&#146;re using, or what platform you&#146;re targeting, I&#146;m guessing that you are running into a similar limit. 64 KB equals 65,536 bytes, which is about 3,000 bytes larger than the size of your array. Your compiler may well bundle your array (62,633 bytes) plus other data and private compiler overhead (~3,000 bytes) into a combined area limited to 64 KB. By making your array too big, you are pushing the combined data size over this limit.
<P> One way to test my theory is to add an extra byte to the static data size:
<Pre>
char myArray[62632];
char test_padding[1];

int main(void)
    {
    return 0;
    }</pre>
<P><B>
</b>then see if the program still compiles. Depending on how your compiler actually carves up memory, you may have to play with the size of <B>test_padding</B> to trigger the error. In general I&#146;d expect that as you increase the size of <B>test_padding</B>, you must decrease the size of <B>myArray</B> to avoid the error.
<P> You say that moving the declaration inside <B>main</B> makes the error go 
  away. I assume you mean this:
<Pre>
int main(void)
    {
    char myArray[62633];
    return 0;
    }</pre>
<P>Now <B>myArray</B> has automatic storage duration instead of static storage duration. Compilers usually store such objects on the same stack used for function call arguments and return addresses. This stack is typically separate from the shared data area holding static objects. If that&#146;s the case for your compiler, then the array is no longer competing with other static data within a 64-KB arena.<P>
The stack has a size limit too. That the compiler doesn&#146;t complain about <B>myArray</B> being too big doesn&#146;t mean that the stack has enough space for <B>myArray</B>. Unlike the static-data space &#151; which has a size fixed at compile time &#151; the stack&#146;s size fluctuates while a program runs. In my experience, out-of-stack-space conditions show up only at run time, not at compile time.
<P> You can test this on your system by having your program effectively call <B>main</B> 
  recursively:
<Pre>
void f(void)
    {
    char myArray[62633];
    f();
    }

int main(void)
    {
    f();
    return 0;
    }</pre>
<P>At some point the stack will fill with nested copies of <B>myArray</B>. If the program terminates gracefully &#151; and especially if you built the program with stack probes or other debugging aids activated &#151; you&#146;ll get a run-time message explaining that the stack overflowed. If the program terminates gracelessly, you may get random behavior or freezes.
<P> Finally, if you declare this local <B>myArray</B> as static:
<Pre>
int main(void)
    {
    static char myArray[62633];
    return 0;
    }</pre>
<P>you might get your original error message back. Since the array again has static storage duration, it is likely competing for part of the same (presumed 64 KB) space as before and should therefore cause the same problem as before.<P>
By setting the right <B>#pragma</B>s, build options, or non-standard keywords, you might be able to increase the collective data limit or designate which static objects are pooled together. (I&#146;m completely speculating here, as I know nothing about your system.) I suggest you check out your compiler&#146;s documentation or consult someone else who knows the technology.<P>
The language standards do not directly address how compilers may pool data into common areas, or how big those common areas may be. At best the standards address the issue obliquely: 
<ul>
  <li> The C90 Standard requires that a compiler translate and run at least one 
    program that contains at least one instance of an object that&#146;s 32,767 
    bytes long. As your working program shows, your compiler is clearly conformant 
    here.</li>
  <li>The C99 Standard increases this requirement to a single object of size 65,535 
    bytes. Given what you&#146;ve told me, your compiler doesn&#146;t conform 
    to the C99 Standard on this point, or at least not with the build configuration 
    you&#146;ve chosen.</li>
  <li>And in case you wonder, the C++98 Standard suggests that a compiler allow 
    a single object of (get this) 262,144 bytes! But this is just a suggestion, 
    not a requirement for compliance. (262,144 is four times the C99 requirement 
    and eight times the C90 requirement.) </li>
</ul>
<h3> Crush! Kill! Destroy!</h3>
<P><b>Q. </b><i>Hi Bobby,</i>
<P><i> I wonder if you could shed some light as to why</i> <B>vector::erase</B> 
  <i>is not required to call the destructor of the item being erased? I have recently 
  run into a resource leak caused by this problem. I should mention that I am 
  speaking to a</i> <B>vector&lt;CWidget&gt;</B> <i>and </i>not<i> to a</i> <B>vector&lt;CWidget 
  *&gt;</B>.
<P> <i>The problem I had was a widget with a member variable that was a string 
  class. The string class dynamically allocates memory as needed, and the memory 
  is cleaned up in the destructor. If my</i> <B>Widget</B> <i>destructor had been 
  called on</i> <B>vector::erase</B><i>, the resource would not have leaked!</i>
<P> <i>This bug was &#147;discovered&#148; after untold hours of trying to fix 
  a production system! Our current strategy is to avoid vectors whenever an</i> 
  <B>erase</B> <i>may be called or to use vectors of pointers and take control 
  of the destruction ourselves.</i>
<P> <i>I have enclosed some sample code that demonstrates the problem. By the 
  way, I am using Visual C++ 6 with the latest service packs.</i>
<P><i> Thanks for your time.</i>
<P> <i>&#151; Ron Jacobs (avid </i>CUJ<i> reader)</i>
<P>
<P> <b>A. </b>My version of your test code appears as <a href="0301jl1.htm" target="_blank">Listing 
  1</a>.
<P>
You&#146;ve run into a distressingly common misconception of how vectors work. If it&#146;s any consolation, the problem has nothing to do with Visual C++.<P>
What you are seeing is correct vector behavior, or at least allowable vector behavior. When you erase a single element at index <B>I</B> from a vector of length <B>N</B>, the C++ Standard guarantees that: 
<ul>
  <li> The element type&#146;s destructor will be called once.</li>
  <li>The element type&#146;s assignment operator will be called <B>N-(I+1)</B> 
    times &#151; that is, once for every element following the one being erased.</li>
</ul>
<P>
The Standard does not say which elements will have the destructor and assignment operator called upon them. You are assuming that when you erase the element at a given index <B>I</B> (where <B>I</B> is <B>0</B> in your example), that precise element will have its destructor called. The Standard makes no such guarantee; indeed, based on how vectors are implemented, the Standard couldn&#146;t make this guarantee.<P>
Remember, a vector is contiguous from its first element. When you erase an element, any trailing elements are shifted toward the front to fill the hole. The final element slot in the vector is thus rendered logically empty and can be destroyed.
<P> The program in <a href="0301jl1.htm" target="_blank">Listing 1</a> erases 
  the first element of a three-element vector. When I run that program on several 
  compilers, I see this event sequence: 
<ul>
  <li> The second element is copied over the first.</li>
  <li>The third element is copied over the second.</li>
  <li>The third element is destroyed.</li>
</ul>
<P>
Compare that sequence to what you want: 
<ul>
  <li> The first element is destroyed.</li>
  <li>The second element is copied over the first.</li>
  <li>The third element is copied over the second.</li>
</ul>
<P>
When it comes time for the vector itself to be destroyed, you are left with three elements: the two &#147;good&#148; ones and the third unused one. That makes for four total element-destructor calls: one during the erasure, plus three during the vector destruction. If you followed this pattern to its conclusion by continually erasing the front element, you&#146;d end up with six destructor calls to purge a three-element vector.<P>
To get the behavior you want, you should try a list. As an experiment, substitute <B>list</B> for <B>vector</B> in my test program and then compare the results.
<h3> Note </h3>
<P><B> </b><a name="1"></a>[1] &lt;<a href="http://msdn.microsoft.com/visualc/techinfo/articles/">http://msdn.microsoft.com/visualc/techinfo/articles/</a>&gt; 
  <br>
  [<a href="#1_return">return to text</a>]
<h3>About the Author</h3>
<P>Although <B>Bobby Schmidt</B> makes most of his living as a writer and content 
  strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes 
  at home. In previous career incarnations, Bobby has been a pool hall operator, 
  radio DJ, private investigator, and astronomer. You may summon him on the Internet 
  via <B><a href="mailto:BobbySchmidt@mac.com">BobbySchmidt@mac.com</a></B>. 
</BODY>
</HTML>
