<HTML><HEAD>
<TITLE>When enum Just Isn't Enough: Enumeration Classes for C++/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: A Class Template that Implements the Desired Features </A></h4>
<pre>
#include &lt;functional&gt;
#include &lt;set&gt;
template &lt;class T&gt;
class Enum {
private:
  // Constructors
  explicit Enum(int Value);
  // Predicate for finding the corresponding instance
  struct Enum_Predicate_Corresponds:
   public std::unary_function&lt;const Enum&lt;T&gt;*, bool&gt; {
      Enum_Predicate_Corresponds(int Value): m_value(Value) { }
      bool operator()(const Enum&lt;T&gt;* E)
      { return E-&gt;Get_Value() == m_value; }
   private:
      const int m_value;
  };
  // Comparison functor for the set of instances
  struct Enum_Ptr_Less:
   public std::binary_function&lt;const Enum&lt;T&gt;*, const Enum&lt;T&gt;*, bool&gt; {
      bool operator()(const Enum&lt;T&gt;* E_1, const Enum&lt;T&gt;* E_2)
      { return E_1-&gt;Get_Value() &lt; E_2-&gt;Get_Value(); }
  };
public:
  // Compiler-generated copy constructor and operator= are OK.
  typedef std::set&lt;const Enum&lt;T&gt;*, Enum_Ptr_Less&gt; instances_list;
  typedef instances_list::const_iterator const_iterator;
  // Access to int value
  int Get_Value(void) const { return m_value; }
  static int Min(void) { return (*s_instances.begin())-&gt;m_value; }
  static int Max(void) { return (*s_instances.rbegin())-&gt;m_value; }
  static const Enum&lt;T&gt;* Corresponding_Enum(int Value)
  { const_iterator it = find_if(s_instances.begin(), s_instances.end(), 
   Enum_Predicate_Corresponds(Value));
   return (it != s_instances.end()) ? *it : NULL; }
  static bool Is_Valid_Value(int Value) { return Corresponding_Enum(Value) != NULL; }
  // Number of elements
  static instances_list::size_type size(void) { return s_instances.size();
}
  // Iteration
  static const_iterator begin(void) { return s_instances.begin(); }
  static const_iterator end(void) { return s_instances.end(); }
private:
  int m_value;
  static instances_list s_instances;
};
template &lt;class T&gt;
inline Enum&lt;T&gt;::Enum(int Value):
  m_value(Value)
{
  s_instances.insert(this);
}
</pre>
</body>
</html>
