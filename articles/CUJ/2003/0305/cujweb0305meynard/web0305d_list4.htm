<HTML><HEAD>
<TITLE>When enum Just Isn't Enough: Enumeration Classes for C++/Listing 4</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 4: Using the enumeration classes in a simple test driver</A></h4>
<pre>
Test_Enum.h

class Test_Enum: public Enum&lt;Test_Enum&gt; {

private:
 explicit Test_Enum(int Value): Enum&lt;Test_Enum&gt;(Value) { }

public:
  static const Test_Enum enum_11;
  static const Test_Enum enum_12;
  static const Test_Enum enum_18;
  static const Test_Enum enum_20;
  static const Test_Enum enum_21;
};

Test_Enum.cpp

#include &quot;Test_Enum.h&quot;

Enum&lt;Test_Enum&gt;::instances_list Enum&lt;Test_Enum&gt;::s_instances;

const Test_Enum Test_Enum::enum_11(11);
const Test_Enum Test_Enum::enum_12(12);
const Test_Enum Test_Enum::enum_18(18);
const Test_Enum Test_Enum::enum_20(20);
const Test_Enum Test_Enum::enum_21(21);

Main.cpp

#include &quot;Test_Enum.h&quot;
int main()
{
  using std::cout;
  using std::endl;<span style='mso-tab-count:1'>  </b>
  int Cur_Elem = 0;
  for ( Test_Enum::const_iterator i = Test_Enum::begin();
        i != Test_Enum::end(); ++i )
  {
   Cur_Elem++;
   cout &lt;&lt; &quot;Test_Enum element #&quot; &lt;&lt; Cur_Elem &lt;&lt; &quot; value = &quot;
   &lt;&lt; (*i)-&gt;Get_Value() &lt;&lt; endl;
  }

  cout &lt;&lt; &quot;Total #elements = &quot; &lt;&lt; Test_Enum::size() &lt;&lt; endl;
  cout &lt;&lt; &quot;Min enum value = &quot; &lt;&lt; Test_Enum::Min() &lt;&lt; endl;
  cout &lt;&lt; &quot;Max enum value = &quot; &lt;&lt; Test_Enum::Max() &lt;&lt; endl;

  for ( int i = Test_Enum::Min(); i &lt;= Test_Enum::Max(); ++i )
  {
   cout &lt;&lt; i;
   if ( Test_Enum::Is_Valid_Value(i) ) cout &lt;&lt; &quot; is &quot;;
   else cout &lt;&lt; &quot; isn't &quot;;
   cout &lt;&lt; &quot;a valid value for Test_Enum.&quot; &lt;&lt; endl;
  }

  Test_Enum E(Test_Enum::enum_11);
  cout &lt;&lt; &quot;Value of E = &quot; &lt;&lt; E.Get_Value() &lt;&lt; endl;

  E = Test_Enum::enum_20;
  cout &lt;&lt; &quot;Value of E = &quot; &lt;&lt; E.Get_Value() &lt;&lt; endl;

  // Illegal code
  // bool B = E; // won't compile, illegal implicit conversion
  // E++; // won't compile, cannot treat Test_Enum as an int
  // Test_Enum X(17); // won't compile, ctor is private

  return 0;
}

Output:

Test_Enum element #1 value = 11
Test_Enum element #2 value = 12
Test_Enum element #3 value = 18
Test_Enum element #4 value = 20
Test_Enum element #5 value = 21
Total #elements = 5
Min enum value = 11
Max enum value = 21
11 is a valid value for Test_Enum.
12 is a valid value for Test_Enum.
13 isn't a valid value for Test_Enum.
14 isn't a valid value for Test_Enum.
15 isn't a valid value for Test_Enum.
16 isn't a valid value for Test_Enum.
17 isn't a valid value for Test_Enum.
18 is a valid value for Test_Enum.
19 isn't a valid value for Test_Enum.
20 is a valid value for Test_Enum.
21 is a valid value for Test_Enum.
Value of E = 11
Value of E = 20
</pre>
</body>
</html>
