<HTML><HEAD>
<TITLE>May 2003/When enum Just Isn't Enough: Enumeration Classes for C++/Listing 6</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 6: A sample testing program and its output</A></h4>
<pre>
Test_Enum_String.h

#include &lt;string&gt;
#include &quot;Tmpl_Enum.h&quot;

class Test_Enum_String:
  public Tmpl_Enum&lt;std::string, Test_Enum_String&gt; {

private:

  explicit Test_Enum_String(const std::string&amp; Value):
    Tmpl_Enum&lt;std::string, Test_Enum_String&gt;(Value) { }

public:

  static const Test_Enum_String enum_Alpha;
  static const Test_Enum_String enum_Beta;
  static const Test_Enum_String enum_Delta;
  static const Test_Enum_String enum_Epsilon;
  static const Test_Enum_String enum_Omega;
};

Test_Enum_String.cpp

#include &quot;Test_Enum_String.h&quot;
Tmpl_Enum&lt;std::string, Test_Enum_String&gt;::instances_list 
Tmpl_Enum&lt;std::string, Test_Enum_String&gt;::s_instances;

const Test_Enum_String Test_Enum_String::enum_Alpha(&quot;Alpha&quot;);
const Test_Enum_String Test_Enum_String::enum_Beta(&quot;Beta&quot;);
const Test_Enum_String Test_Enum_String::enum_Delta(&quot;Delta&quot;);
const Test_Enum_String Test_Enum_String::enum_Epsilon(&quot;Epsilon&quot;);
const Test_Enum_String Test_Enum_String::enum_Omega(&quot;Omega&quot;);

Main.cpp

#include &quot;Test_Enum_String.h&quot;
void Validate_Str_Elem(const std::string&amp; theString)
{
  using std::cout;
  using std::endl;
  cout &lt;&lt; theString;
  if ( Test_Enum_String::Is_Valid_Value(theString) )
    cout &lt;&lt; &quot; is &quot;;
  else
    cout &lt;&lt; &quot; isn't &quot;;
  cout &lt;&lt; &quot;a valid value for Test_Enum_String.&quot; &lt;&lt; endl;
}

int main()
{
  using std::cout;
  using std::endl;
  int Cur_Elem = 0;
  for ( Test_Enum_String::const_iterator
        i = Test_Enum_String::begin();
        i != Test_Enum_String::end(); ++i )
  {
    Cur_Elem++;
    cout &lt;&lt; &quot;Test_Enum_String element #&quot; &lt;&lt; Cur_Elem &lt;&lt; &quot; value = &quot; &lt;&lt; (*i)-&gt;Get_Value() &lt;&lt; endl;
  }

  cout &lt;&lt; &quot;Total #elements = &quot; &lt;&lt; Test_Enum_String::size() &lt;&lt; endl;

  cout &lt;&lt; &quot;Min enum value = &quot; &lt;&lt; Test_Enum_String::Min() &lt;&lt; endl;
  cout &lt;&lt; &quot;Max enum value = &quot; &lt;&lt; Test_Enum_String::Max() &lt;&lt; endl;

  Validate_Str_Elem(&quot;Alpha&quot;);
  Validate_Str_Elem(&quot;Gamma&quot;);
  Validate_Str_Elem(&quot;Beta&quot;);
  Validate_Str_Elem(&quot;BetA&quot;);

  Test_Enum_String E(Test_Enum_String::enum_Alpha);
  cout &lt;&lt; &quot;Value of E = &quot; &lt;&lt; E.Get_Value() &lt;&lt; endl;

  E = Test_Enum_String::enum_Omega;
  cout &lt;&lt; &quot;Value of E = &quot; &lt;&lt; E.Get_Value() &lt;&lt; endl;
  }
  return 0;
}

Output:

Test_Enum_String element #1 value = Alpha
Test_Enum_String element #2 value = Beta
Test_Enum_String element #3 value = Delta
Test_Enum_String element #4 value = Epsilon
Test_Enum_String element #5 value = Omega
Total #elements = 5
Min enum value = Alpha
Max enum value = Omega
Alpha is a valid value for Test_Enum_String.
Gamma isn't a valid value for Test_Enum_String.
Beta is a valid value for Test_Enum_String.
BetA isn't a valid value for Test_Enum_String.
Value of E = Alpha
Value of E = Omega
</pre>
</body>
</html>
