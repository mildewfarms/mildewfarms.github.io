<HTML>   
     <HEAD>
<TITLE>May 2003/When enum Just Isn't Enough: Enumeration Classes for C++</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<HR>

<H2 ALIGN="center">When enum Just Isn't Enough: Enumeration Classes for C++</H2>
<H3 ALIGN="center">Yves Meynard</H3>

<HR>
<H3>Accessing Resources through Symbolic Constants</H3>

<p>If you're writing even a moderately ambitious application, you will find that it needs to access many resources of various types, for example sounds and text messages. In a large application, individual resources can easily number in the hundreds. Typically, they will be referenced by a numeric value. For the time being, I'll suppose you're using <b>int</b>s to refer to resources, but I'll generalize later.</p>
<p>Assume that you're working on a game, which uses pre-rendered graphics, player messages, and sound effects. High-level functions allow you to write <b>PlaySound(1001);</b> and <b>DisplaySprite(435);</b>, but of course you wouldn't use magic numbers. You might declare symbolic constants instead, as in <b>const int explosionSnd = 1001;</b>. This is definitely better, but not type-safe: nothing prevents you from writing <b>DisplaySprite(explosionSnd);</b> when you meant to write <b>DisplaySprite(explosionSprite);</b>.</p> 
<p>The traditional solution to this lack of type-safety is to group your constants inside <b>enum</b>s. Given an <b>enum</b> for sounds, <b>e_Sounds</b>, and one for sprites, <b>e_Sprites</b>, you can declare a function to take an argument of the proper type, as in <b>void DisplaySprite(e_Sprite);</b>. Once this has been done, the compiler will ensure that you cannot accidentally pass a sound constant to a sprite display function.</p> 

<H3>Enumerations Don't Always Fit the Bill</H3>

<p>You might feel this is the best you can do, and all that needs to be done. But the <b>enum</b>-based approach is still insufficient for serious applications. The problem is that <b>enum</b> is an unintelligent structure: C++ does not allow you to programmatically extract anything significant from it. This makes it impossible to automate operations on <b>enum</b>, when this is precisely what needs to be done for many applications. Consider that huge game with its hundreds of sounds: you'd certainly like to be able to verify that every sound constant referenced in the code corresponds to a sound that is actually available in the current version of the application. The inverse task is also important: if those 25 new sounds that were just added in the new version are never even played, you'd want your automated tests to notice that.</p> 
<p>Now it is possible to iterate over <b>enum</b>, so you might think that the first test, at least, is trivial: just write a <b>for</b> loop. <a href="web0305d_list1.htm">Listing 1</a> illustrates this ideal situation. Real-world programs do not look anything like this, however. Both initial design considerations and maintenance issues conspire to produce a situation like that in <a href="web0305d_list2.htm">Listing 2</a>. When you've got even one &quot;hole&quot; in your <b>enum</b>, you're in trouble.</p> 
<p>Using straightforward iteration with <b>int</b>s over an enumeration that is not continuous is legal C++; it just gives erroneous results: intermediate, &quot;nameless&quot; values are legal even though they are meaningless. Now, since <b>enum</b> is a user-defined type, it is possible to define an increment/decrement operator for it <a href="#1">[1]</a>. This makes it possible to iterate through <b>enum</b> using a <b>for</b> loop with a specific <b>operator++</b>. However, this is a false solution: it can indeed be very useful for small, continuous <b>enum</b>s &#151; for instance, if you have an <b>enum</b> for the days of the week, it's very convenient to define an <b>operator++</b> that always returns the next day of the week &#151; but with a large, discontinuous enumeration things go rapidly sour.</p>

<p>Suppose you've managed to write an <b>operator++</b> for a discontinuous <b>enum</b> &#151; a tedious and error-prone task in the first place. Even then, maintenance issues are still a nightmare: if someone adds a sound constant to the <b>e_Sounds</b> <b>enum</b> in an &quot;empty slot,&quot; your <b>operator++</b> will skip right over it without warning. If this constant is somehow passed to your <b>operator++</b>, it will fail to recognize it and at best give a wrong result, if it doesn't cause a run-time error instead.</p>
<p>Even if you ignore these difficulties, the second test you wanted to run remains infeasible: you still cannot tell whether a given value is a valid part of an enumeration or not. You could of course write a custom function to do this, and then you'd suffer from the very same maintenance nightmares I was just talking about. Unless you enjoy wasting hours debugging, something better is clearly indicated.</p> 

<H3>An Industrial-Strength Solution</H3>

<p>What you need is an intelligent enumeration: one that knows its minimum and maximum and its valid ranges. Such an enumeration will allow you to iterate over it automatically, because it will furnish its own standard mechanism for doing so, which will obviate the need to write and maintain one yourself. In other words, you need a class that allows you to unify symbolic constants into a single type.</p> 
<p>The basic idea is to make each constant of your <b>enum</b> be a class-static constant instance of a class. This class will keep a sorted list of its own instances in a class-static container; STL's <b>std::set</b> is ideal since it keeps its contents sorted. Iterating over the enumeration becomes a matter of iterating over the set. Since the set is sorted, it becomes trivial to obtain the enumeration's maximum and minimum. This design is proof against maintenance problems, since the set is built from the constants defined in the code: whether constants are added or removed, the set will always be correctly built.</p> 
<p>There is a potential thorn in your side: it's crucially important that it be impossible to add to the enumeration during the course of the program. However, you may want to have local variables of the type of the enumeration, just like with regular <b>enum</b>s. The first requirement seems to imply you can only construct class instances before <b>main</b> is executed, and the other requires construction during the course of the program. In fact this simply forces you to distinguish between class-static instances (constructed before <b>main</b> is executed from their <b>int</b> value, immutable) and local instances (constructed dynamically by copying from a class-static instance, mutable).</p> 
<p>I've made use of templates for implementing this design, since you'll typically use more than one such enumeration class. This template is meant to be used with the well-known idiom (which as far as I know lacks a standard name) whereby class <b>A</b> is derived from a class <b>B</b> templated on <b>A</b> itself.</p>
<p><a href="web0305d_list3.htm">Listing 3</a> presents a class template that implements the desired features. The class has a <b>private:</b> constructor from <b>int</b>. Only the class-static instances may be defined this way. The copy constructor (synthesized by the compiler) makes it possible to instantiate local variables that are copies of class-static instances. The class keeps a set of its static instances, which is always sorted. STL thus does all the hard work for you, and your implementation can remain simple and intuitive, or nearly so.</p> 
<p>What may not be so intuitive are the two <b>struct</b>s in the private section, <b>Enum_Predicate_Corresponds</b> and <b>Enum_Ptr_Less</b>. The first is a predicate for use with <b>find_if</b> in the <b>Corresponding_Enum</b> method. It's not strictly necessary, since I could have used an explicit loop comparing the members of the set with the sought value, but <b>find_if</b> is better style. The second <b>struct</b>, <b>Enum_Ptr_Less</b>, is absolutely necessary to keep your set sorted in the order you want. As Scott Meyer points out in <a href="#2">[2]</a>, you have to be careful when dealing with associative containers of pointers. The containers will by default be sorted by comparing the <i>pointer</i> values, which is almost never what you want. So you have to give the set a comparison object whose <b>operator()</b>, when given two members of the set, will return whether the first one is less than the other according to the appropriate criterion. In our example, you need to compare the results of the <b>Get_Value</b> function.</p> 
<p><a href="web0305d_list4.htm">Listing 4</a> gives an example of how the &quot;enumeration class&quot; may be used in a simple test driver. This code was compiled and run on Metrowerks CodeWarrior 7.</p>

<H3>Advantages and Drawbacks</H3>

<p>Enumeration classes have the following advantages over <b>enum</b>s: you can programmatically access their minimum and maximum values, test whether a given <b>int</b> is a valid enumeration constant, and iterate over a given enumeration class. An enumeration class instance is never implicitly converted to an <b>int</b> value, although this value may be obtained explicitly. Given an <b>int</b> value, you can obtain the corresponding enumeration class constant, if it exists.</p> 
<p>Enumeration classes do have some drawbacks: for one, they are more verbose to define (but not to use) than <b>enum</b>s. For another, they cannot be used directly in a switch statement, although you can of course switch using the <b>Get_Value</b> function. Even though these are not major handicaps, the fact remains that using enumeration classes is less straightforward than using ordinary <b>enum</b>s.</p> 
<p>Keep in mind, however, that enumeration classes are not meant to blindly replace all <b>enum</b>s in existing code, but rather to replace those that correspond to collections of related constants rather than symbolic representations of unified abstract concepts. In other words, if you're using an <b>enum</b> to group together the numbers of all the error messages your application uses, you should consider an enumeration class instead; but a days-of-the-week enum should remain a plain <b>enum</b>. </p> 

<H3>Generalization: Why Limit Yourself to ints?</H3>

<p>What if you refer to resources using something more sophisticated than a dumb <b>int</b>? What use is an enumeration class when your sound-playing code reads <b>PlaySound(&quot;Phaser1&quot;);</b>? Well, in fact, an enumeration class is just what you need. The basic ideas I've presented here apply just as well when the underlying enumerated type is something other than <b>int</b> &#151; as long as it can be ordered (i.e., it has or can have an <b>operator&lt;</b>). The benefits can be even greater, since an enumeration class always allows iteration over the underlying type even when this is impossible in the general case. In practice, this means an enumeration class enables you to iterate over every sound-resource string in your application, from &quot;Arrakis&quot; to &quot;Zabulon Computation.&quot;</p> 
<p>A generalized enumeration class is templated on its underlying type. <a href="web0305d_list5.htm">Listing 5</a> provides such a class and <a href="web0305d_list6.htm">Listing 6</a> gives a sample testing program together with its output. The generalization is fairly straightforward: you must add another template parameter for the underlying type, which I've called <b>TValue</b>. To avoid copy inefficiencies, <b>TValue</b> is always passed by reference to <b>const</b> and likewise the predicate stores a <b>const TValue&amp;</b>.</p> 
<p>If the underlying type does not have an <b>operator&lt;</b> (or if this operator doesn't do what you want), you can still use an enumeration class, but you will have to generalize still further, with a third template parameter, this one a comparison object to pass to the <b>Enum_Ptr_Less</b> object. The details are left as an exercise for the reader. </p>

<H3>Conclusion</H3>

<p>Enumeration classes enable the encapsulation of collections of related constants. They allow programmatic access to the minimum and maximum values of the collection as well as straightforward iteration and membership tests. In their simpler form, they can be viewed as an improved form of <b>enum</b>. By templating them on their underlying enumerated type, they can be applied to collections of constants of any ordered type.</p> 

<H3>Bibliography</H3>

<p><a name="1"></a>[1] Bjarne Stroustrup. <i>The C++ Programming Language</i>, 3d Edition, (Addison-Wesley, 2000), p. 265.</p>
<p><a name="2"></a>[2] Scott Meyers. <i>Effective STL</i> (Addison-Wesley, 2001), Item 20, p. 88.</p>

<H3>Download the Code</H3>

<p><a href="ftp://ftp.cuj.com/pub/2003/2105/meynard.zip">&lt;meynard.zip&gt;</a></p>


<H3>About the Author</H3>

<p><b>Yves Meynard</b> has a Ph.D. in Computer Science (Operational Research) from the Universit&eacute; de Montr&eacute;al. He holds the post of Software Analyst at SNC Lavalin Energy Control Systems. His
areas of interest include optimization heuristics and code refactoring. He may be reached at <a href="mailto:ymeynard@globetrotter.net">ymeynard@globetrotter.net</a>.
</body>
</html>
