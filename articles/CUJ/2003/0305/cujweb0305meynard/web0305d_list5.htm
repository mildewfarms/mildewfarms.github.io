<HTML><HEAD>
<TITLE>May 2003/When enum Just Isn't Enough: Enumeration Classes for C++/Listing 5</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 5: A generalized enumeration class</A></h4>

<pre>
#include &lt;functional&gt;
#include &lt;set&gt;

template &lt;class TValue, class T&gt;
class Tmpl_Enum {

private:

 // Constructors
 explicit Tmpl_Enum(const TValue&amp; Value);

 // Predicate for finding the corresponding instance
 struct Enum_Predicate_Corresponds:
    public std::unary_function&lt;const Tmpl_Enum&lt;TValue, T&gt;*, bool&gt; {

      Enum_Predicate_Corresponds(const TValue&amp; Value): m_value(Value) { 
}
      bool operator()(const Tmpl_Enum&lt;TValue, T&gt;* E)
      { return E-&gt;Get_Value() == m_value; }

    private:
      const TValue&amp; m_value;
 };

 // Comparison functor for the set of instances
 struct Enum_Ptr_Less:
    public std::binary_function&lt;const Tmpl_Enum&lt;TValue, T&gt;*, const Tmpl_Enum&lt;TValue, T&gt;*, bool&gt; {
      bool operator()(const Tmpl_Enum&lt;TValue, T&gt;* E_1, const Tmpl_Enum&lt;TValue, T&gt;* E_2)
      { return E_1-&gt;Get_Value() &lt; E_2-&gt;Get_Value(); }
 };

public:
 // Compiler-generated copy constructor and operator= are OK.

 typedef std::set&lt;const Tmpl_Enum&lt;TValue, T&gt;*, Enum_Ptr_Less&gt; instances_list;
 typedef instances_list::const_iterator const_iterator;

 // Access to TValue value
 const TValue&amp; Get_Value(void) const { return m_value; }
 static const TValue&amp; Min(void) { return (*s_instances.begin())-&gt;m_value; }
 static const TValue&amp; Max(void) { return (*s_instances.rbegin())-&gt;m_value; }
 static const Tmpl_Enum&lt;TValue, T&gt;* Corresponding_Enum(const TValue&amp; Value)
 { const_iterator it = find_if(s_instances.begin(), s_instances.end(), Enum_Predicate_Corresponds(Value));
    return (it != s_instances.end()) ? *it : NULL; }
 static bool Is_Valid_Value(const TValue&amp; Value) { return Corresponding_Enum(Value) != NULL; }

 // Number of elements
 static instances_list::size_type size(void) { return s_instances.size(); }

 // Iteration
 static const_iterator begin(void) { return s_instances.begin(); }
 static const_iterator end(void) { return s_instances.end(); }

private:
 TValue m_value;

 static instances_list s_instances;
};


template &lt;class TValue, class T&gt;
inline Tmpl_Enum&lt;TValue, T&gt;::Tmpl_Enum(const TValue&amp; Value):
 m_value(Value)
{
 s_instances.insert(this);
}
</pre>
</body>
</html>
