<HTML>   
     <HEAD>
<TITLE>May 2003/Book Review: C++ Gotchas</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2 ALIGN="center">Book Review: <i>C++ Gotchas</i></H2>
<H3 ALIGN="center">reviewed by Marc Briand</H3>

<HR>

<table>
<tr>
<td><b>Title:</b></td>
<td><a href="http://www.aw.com/catalog/academic/product/1,4096,0321125185,00.html"><i>C++ Gotchas: Avoiding Common Problems in Coding and Design</i></a></td>
</tr>
<tr>
<td><b>Author:</b></td>
<td>Stephen C. Dewhurst</td>
</tr>
<td><b>Published:</b></td>
<td>Addison Wesley Professional, 2003</td>
</tr>
<tr>
<td><b>Pages:</b></td>
<td>324, softbound</td>
</tr>
<tr>
<td><b>Price:</b></td>
<td>$44.99</td>
</tr>
</table>

<p>The publication of a &quot;gotchas&quot; book this late in C++'s evolution may seem a little strange. C++ has been a viable language for at least fifteen years; the C++ Standard has hardly changed in the past five. So you would think that language pitfalls would be common knowledge <a href="#1">[1]</a> by now. Yet even experienced C++ programmers get into trouble now and then, and nobody knows this as well as Steve Dewhurst, who has been a C++ teacher, author, and consultant for many years. Dewhurst seems to blame programmer complacency more than C++ complexity. In this book, the two great programming sins are ignorance of C++ basics and bad style. Experience alone does not prevent these human failings; sometimes we need to be prodded. To that end, <i>C++ Gotchas</i> is not just a catalog of C++ trouble spots, but a sort of running admonition to care about things we might have overlooked.</p>
<p>One of those things is the use of idiom. In spoken languages, an idiom is a commonly used phrase (e.g., &quot;gotcha&quot;) that instantly conveys a clear meaning. Its meaning is clear just because the phrase is so widely used, not because of the words that make it up. In a programming language, an idiom is a common expression or technique that clearly conveys the intent of the programmer. Again, the idiom's clarity derives from its widespread use. A person who fails to learn <i>spoken</i> idioms puts himself at a great disadvantage; a programmer who doesn't use <i>programming</i> idioms makes everyone else work harder, especially maintainers of his code. In Dewhurst's book, appropriate use of idiom is part of good programming style, and good programming style keeps gotchas to a minimum.</p>
<p>Of course, if a pep talk on style were all we needed, this could have been a much thinner book. But we need specific information about the gotchas, regardless of their ultimate causes. Dewhurst lays out the details in nine chapters: Basics, Syntax, The Preprocessor, Conversions, Initialization, Memory and Resource Management, Polymorphism, Class Design, and Hierarchy Design. The origins of these gotchas range from simple absent-mindedness (like using <b>delete</b> instead of <b>delete []</b> to deallocate an array), to sheer ignorance (referring to a conversion operator as a &quot;cast&quot;), to sloppiness (like mixing overloading and overriding of virtual functions without good reason). And by the way, arrested emotional development is now considered a gotcha as well; just look at gotcha #12. Storming out of the office is no longer excusable as &quot;passionate&quot; behavior, even if you are a coding wizard.</p>
<p>For most of the gotchas described in this book, there is not much to argue about. The choices that give rise to gotchas are clearly wrong &#151; at least, in hindsight. Dewhurst provides convincing, if occasionally contrived examples to bring hidden errors to light. Yet a handful of items in this book are not so cut and dried. One of them is the preferred placement of the <b>const</b> keyword in a declaration:</p> 

<pre>
const int *thisway;  // pointer to constant integer
int const *thatway;  // same thing
</pre>

<p>Dewhurst favors the first form because it's what C++ programmers are used to seeing. It is a convention established long ago in the days of C. However, there is also a compelling rationale for the second form of declaration, and this form has gained something of a cult following in the C++ community. The second form enables us to state a simple rule: &quot;<b>const</b> always qualifies the thing immediately to its left.&quot; This issue may seem ridiculously trivial, but it illustrates Dewhurst's overriding concern for convention. Programmers who are more familiar with convention than syntax quirks (perhaps most programmers) are apt to read the second form as a declaration of a constant pointer, which it is not. Dewhurst is not a language crusader; he just wants future maintainers of his code to get it right.</p>

<H3>Taking the Long View</H3>

<p>The word &quot;maintenance&quot; pops up often in this book, and it is not hard to see why. One of the ironies of modern computing is that while hardware is typically replaced in a matter of years, a lot of software hangs around for decades. Software often lives longer than its makers intended, as evidenced by the Y2K scare of a few years ago. Dewhurst frequently reminds readers to think of how their code will fare under maintenance. His advice here could be distilled into two design guidelines:</p>

<OL>
<LI>Assume that at least one other person will maintain your code over its lifetime.</LI>
<LI>Do not assume said person will be the brightest programmer on the block.</LI>
</OL>

<p>The hacks that we write today become the bugs of tomorrow. If you have not fallen victim to many C++ gotchas in recent years, you may not feel a pressing need to read this book. You might be wrong. <i>C++ Gotchas</i> is like a feedback mechanism from the future. It shows you all the stuff you are doing that will make trouble down the road.</p> 

<H3>Something New or D&eacute;j&agrave; Vu?</H3>

<p>This is not the first C++ book to deal with gotchas, of course. Many readers will think instantly of Scott Meyers' classic, <i>Effective C++</i>, and it is reasonable to ask how much is new in <i>C++ Gotchas</i>. I found about 15 items out of the 85 in Scott Meyers' <i>Effective C++</i> and <i>More Effective C++</i> that significantly overlapped with <i>C++ Gotchas</i> &#151; not an excessive amount, and besides, these books differ quite a bit in focus. Dewhurst deals more in what I would call &quot;subtle basics.&quot; This almost seems a contradiction in terms, but unfortunately it is not in C++. There is a lot of stuff to know, and even more that this book does not cover. For instance, this book has very little to say about use of the Standard C++ library or templates. It makes you wonder how many more potential gotchas books are out there. If Dewhurst wrote one or two of them, we could count ourselves very fortunate indeed.</p>

<H3>Note</H3>

<p><a name="1"></a>[1] With apologies to Steve Dewhurst for stealing one of his trademark phrases. In past years, his &quot;Common Knowledge&quot; column has graced the pages of both <i>C++ Report</i> (now defunct) and <i>CUJ</i>.</p>

<H3>About the Author</H3>

<p>Marc Briand is former Editor-in-Chief of <i>C/C++ Users Journal</i>. He currently develops ATE (Automated Test Equipment Software) for the Aerospace industry. He can be reached at <a href="mailto:marcbriand@cs.com">marcbriand@cs.com</a>.</p>
</body>
</html>
