<HTML><HEAD><TITLE>Listing 2:	Examples of the Guard Idiom in use</TITLE></HEAD><body bgcolor="#FFFFFF" text="000000"><B> Listing 2:</B>	Examples of the Guard Idiom in use<p><pre>// Simple Locking Scope{  // Create a Guard that acts as a classical ScopedLock  Guard&lt;Mutex&gt; g1(m);  // Mutex is acquried, access to this region is serialized}// Nested Locking Scope{  // Create a Guard that acts as a classical ScopedLock  Guard&lt;Mutex&gt; g1(m);   // Mutex is acquired, access to this region is serialized  {    // Create a Guard that has a nested locking scope, creating an     // opening in the lock scope from g1    Guard&lt;Mutex, NestedScope&gt; g2(g1);     // Mutex is released, access to this region is NOT serialized  }  // Mutex is acquried, access to this region is serialized}// Overlapped Locking Scope{  // Create a Guard that acts as a classical ScopedLock  Guard&lt;Mutex&gt; g1(m1);   // Mutex m1 is acquired, access to this region is protected  // by m1  // Create a Guard that has an Overalapped locking scope  Guard&lt;Mutex, OverlappedScope&gt; g2(g1, m2);  // The serialization focus has shifted, Mutex m1 is released,  // Mutex m2 is acquired, access to this region is protected   // by m2}// Transferred Locking Scope, used to create a GuardedObject// template. A GuardedObject will automatically lock and unlock an// internal Lockable object as each method invocation begins and endstemplate &lt;class T, class LockType = VerboseLockable&gt;class GuardedObject {  LockType _lock;  T _p;  class TransferedScope {  public:    template &lt;class LockType1, class LockType2&gt;    static void shareScope(LockHolder&lt;LockType1&gt;&amp; l1,      LockHolder&lt;LockType2&gt;&amp; l2) {      l1.disable();      l2.getLockable().acquire();    }    template &lt;class LockType1&gt;    static void createScope(LockHolder&lt;LockType1&gt;&amp; l) {      // Don't acquire the lock when scope the Guard is created    }    template &lt;class LockType1&gt;    static void destroyScope(LockHolder&lt;LockType1&gt;&amp; l) {      l.getLockable().release();    }  };  class Proxy : Guard&lt;LockType, TransferedScope&gt; {    T&amp; _object;  public:    Proxy(LockType&amp; lock, T&amp; object) :      Guard&lt;LockType, TransferedScope&gt;(lock), _object(object) { }    T* operator-&gt;() {      return &amp;_object;    }  };  GuardedObject();  GuardedObject&amp; operator=(const GuardedObject&amp;);public:  Proxy operator-&gt;() {    Proxy p(_lock, _p);    return p;  }};</pre></BODY></HTML>