<HTML><HEAD><TITLE>HexWeb HTML</TITLE></HEAD><body bgcolor="#FFFFFF" text="000000"><B> Listing 2:</B>	<B>Test program<P>// Test program for math-complex.h.  This file can be<P>// compiled by either C99 or C++.<P>// An extended version of this test is available on<P>// the CUJ website at www.cuj.com/code.<P><P>#include &lt;stdio.h&gt;<P>#include "math-complex.h"<P><P>static const long double pi =<P>  3.141592653589793238462643383279502884197L;<P><P>int main()<P>{<P>    // Establish the size of floating point type on<P>    // this platform.  Note on some platforms, two or<P>    // more of these datatypes may have the same size.<P>    printf("sizeof(float) = %d\n",  (int) sizeof(float));<P>    printf("sizeof(double) = %d\n", (int) sizeof(double));<P>    printf("sizeof(long double) = %d\n", (int) sizeof(long double));<P><P>    // The overloaded library function sin() should return<P>    // the same type as its argument.  So, take the sizeof<P>    // function calls passing a float, double, and long<P>    // double to see if the function result has sizeof<P>    // a float, double, and long double, respectively.<P>    printf("sizeof sin(0.0F) = %d\n", (int) sizeof sin(0.0F));<P>    printf("sizeof sin(0.0)  = %d\n", (int) sizeof sin(0.0));<P>    printf("sizeof sin(0.0L) = %d\n", (int) sizeof sin(0.0L));<P><P>    // arc sine of 1 is pi/2.  Try this for the three real<P>    // floating point types and see if the result is more<P>    // precise as the float point type gets more precise.<P>    printf("pi/2       = %.20Lf\n", pi/2);<P>    printf("asin(1.0F) = %.20f error=%Lg\n",<P>      asin(1.0F), asin(1.0F) - pi/2);<P>    printf("asin(1.0)  = %.20f error=%Lg\n",<P>      asin(1.0), asin(1.0) - pi/2);<P>    printf("asin(1.0L) = %.20Lf error=%Lg\n",<P>      asin(1.0L), asin(1.0L) - pi/2);<P><P>    return 0;<P>}<P></B>-- End of Listing --</BODY></HTML>