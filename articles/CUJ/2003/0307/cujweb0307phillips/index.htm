<html><head><title>Book Review: Facts and Fallacies of Software Engineering</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body><h2>Book Review: <i>Facts and Fallacies of Software Engineering</i></h2><h3>Reviewed by Dwayne Phillips</h3><b>Title:</b> <i>Facts and Fallacies of Software Engineering</i><br> <b>Author:</b> Robert L. Glass<br> <b>Publisher:</b> Addison-Wesley, 2003, ISBN 0-321-11742-5<br> <b>Pages:</b> 195 pages<br> <b>Price:</b> $29.99 <p>In <i>Facts and Fallacies of Software Engineering</i>, veteran practitioner   and author Robert L. Glass discusses "Fifty-five frequently forgotten fundamental   facts (and a few fallacies) about software engineering." That was Glass' first   choice for the book's title. (His second choice was <i>The F-Book</i>.) Glass   combines humor, academic research, lessons from the school of hard knocks, and   forty-five years of experience to lay out items that people who build and maintain   software should know and remember. <p>Some of the facts in the book have almost universal agreement. For example,   Fact #1 states, "The most important factor in software work is the quality of   the programmers." Some facts seemed strange at first glance. After reading the   discussion, however, I had to agree with them. For example, Fact #45 states,   "Better methods lead to more maintenance, not less." Some of the facts that   are so important that I should burn them into my memory. The two that I feel   fit in this category are Fact #8 and Fact #23. They state that the two most   common causes of runaway projects are (#8) poor estimation and (#23) unstable   requirements. <p>Some of the facts caused me to stop reading and start arguing. Glass admits   that his book contains controversial items &#8212; things that bring virulent   debate. For example, Fallacy #8 states, "Given enough eyeballs, all bugs are   shallow." This is a mantra of the open-source software movement, and Glass says   it is not so! Well, what he says is that no one has performed a study that proves   the statement is true. <p>I paid attention to the material in this book because of its author. Glass   has been in the software field for 45 years and has moved between industry and   academia several times. He has written 25 books and has had regular columns   in some of the most prestigious software journals. (He currently has a column   in IEEE Software.) <p>Glass thoroughly covers each fact and fallacy. He has a template and he uses   it without exception. I have read other books that attempt to use such a template   style and fail. The template didn't fit, and those books contained many sections   with the equivalent of <i>N/A</i> (not applicable). That doesn't happen in Glass's   book. The template is appropriate, and the author uses it well. <p>The facts and fallacies cover the spectrum of software engineering subject   areas. They include people, tools and techniques, life-cycle activities, and   even academic research and software engineering education. I like the way Glass   distributes the facts and fallacies among the subject areas. He devotes five   facts to maintenance (my favorite topic). He only has two facts about coding,   but several of the other facts relate closely to coding. There is something   in the book for almost everyone. I believe that is one of the strong points   of the book. If you work in area X, you will find something in the book that   relates closely to your job. <p>I found two topics missing in the book. The first is outsourcing. It seems   that everyone is outsourcing work to another country or at least to another   company. It would be helpful to have one or two facts about this. For example,   "Given the amount of money spent on travel and communication infrastructure,   outsourcing will only save a project X%." The second topic concerns people trying   to work together. For example, "People have strong emotions about their work   in software, so learning to think clearly in the presence of strong emotions   is a topic that educators should address." <p>This book is organized well. The author divides the book into two main sections:   Facts and Fallacies. The Facts section lists 55 items the author believes to   be true. The Fallacies section lists 10 items that the software community has   accepted, but the author believes to be false. Each fact or fallacy includes   1) a Discussion section, 2) a Controversy section, 3) a Sources section, and   4) a References section. <p>The organization of the book helped me read and refer to the material. Before reading the book cover to cover, I flipped through the table of contents, jumped to a fact or fallacy that caught my eye, and spent ten minutes studying   it. Since reading the book, I have kept it close at hand as a reference. When   a topic comes up at work, I can easily grab the book, find the topic, and state   a fact with data to justify it. <p>The material in this book is opinion backed by research. Glass shows the academic   side of his career by providing sources of his information and references to   other information. For example, Glass bolsters Fact #8 ("One of the two most   common causes of runaway projects is poor estimation") with four sources of   information and three additional references. The sources and references remove   the folklore from this book. Without them, Glass's facts and fallacies would   only be a collection of pithy sayings. With them, Glass's material becomes something   to use to make business decisions. <p>The book, however, is not a dry academic recitation of "fact, fact, fact, reference,   reference, reference, my argument is air tight, so let's move on." Glass mixes   in examples from his and others' experience. One case is with Fact #13, "There   is a disconnect between management and their programmers." Glass relates the   story of a project where a team developed software to control a medical instrument.   Management deemed the project a failure as it was 400% over budget and 200%   over schedule. The development team felt it was a great success because the   software met all requirements (it worked and had no major defects on release),   it was a technical challenge, and the team was small and high performing. <p>The audience for this book includes anyone who is interested in building software.   I think it leans more towards managers and senior programmers than towards students   and lesser experienced programmers. I say this because this is a "what-is" not   a "how-to" book. It does not teach how to create a schedule for a project. Instead,   it states Fact #3, "Adding people to a late project makes it later." <p>The book does not teach debugging techniques. Instead, it states Fact #31,   "Error removal is the most time-consuming phase of the life cycle." The book,   however, does contain material suitable for those readers who are newer to the   field. Staying with Fact #31, "newbies" shouldn't bet "grizzled old-timers"   that their software is defect-free. Glass's discussion will save newbies the   expense of a lot of lunches. <p>The style Glass uses in this book is good for the intended audience. I found   myself having a conversation with Glass. I would read a few sentences and think,   "Oh yeah? Let me tell you something." Then I would read a few more sentences   and Glass would answer my objections as if we were in a room together. Glass   does not come across as someone reading facts that are written in stone. He   is skeptical about much of the folklore of the software community and clearly   expresses that skepticism. He encourages people to be skeptical about what they   hear; that includes being skeptical about what they read in his book. He states   this loudly in Fact #55, "Many researchers advocate rather than investigate."   This fact is aimed at university researchers, but I interpret it as a warning   to practitioners as well. We all need to remove some hype ("We think our idea   is great.") from our statements and add a few facts ("We did five projects with   method A, six projects with method B, and reduced post-release defects by 10%.") <p>I enjoyed reading this book. It taught me some new lessons, reminded me of   some old ones, and caused me to think. The biggest value of the book has come   since reading it. The facts and fallacies, along with the background material   that Glass provides, helps me in my job. For example, when I recently recommended   a large budget for the maintenance of a software system, someone challenged,   "I thought we paid someone to write the software. Why do we have to keep paying   them for the next three years?" <p>I opened Glass' book, turned to Fact #41, and read, "Maintenance typically   consumes 40 to 80 percent of software costs." I could cite several references   to support the fact. And I don't give this example to show that I won an arugment   or that I'm smarter than anyone else. It shows that this book helps my organization   and me develop and maintain software better. I feel that's a pretty good endorsement   for a book. <p> <h3>About the Author</h3><p>Dwayne Phillips (http://home.att.net/~dwayne.phillips) has worked as a software   and systems engineer with the US government since 1980. He has written "The   Software Project Manager's Handbook, Principles that Work at Work," IEEE Computer   Society, 1998. He has also written a few dozen articles for The C/C++ Users   Journal including a series on image processing. He has a Ph.D. in electrical   and computer engineering from Louisiana State University. He can be reached   at <strong>d.phillips@computer.org</strong>. <p> </body></html>