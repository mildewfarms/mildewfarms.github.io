<html>
<head>
<title>Java-like Messaging System for C++-classes</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#FFFFFF" text="#000000">
<h2>Java-like Messaging System for C++-Classes</h2>
<h3>Introduction</h3>
<p>Some time ago I tried to learn Java. I have read a couple of good books on 
  the subject--I think everyone has his or her own favorite Java book. Java provides 
  programmers with some fine idioms. Some idioms result from the language itself, 
  and some are part of the standard Java library. One of these idioms is the event 
  publishing scheme taken by the Swing library to enable event-driven GUI programming. 
<p>In Swing, when you need a button on your window, you create it, add the button 
  object to the "content pane" (the logical part of the window that manages its 
  elements), and you are done. Almost. You are not usually interested in buttons 
  that do nothing, so you add the "event handling" to it. Swing associates an 
  action with every element of the window (for example, the action for the button 
  is "press") and you can bind your own code with that action. This is done in 
  two steps: 
<p>1. Write a class that implements an <b>ActionListener</b> interface. To do 
  that, you need to implement its method, <b>actionPerformed</b>. Put all the 
  code that needs to be executed in this method. 
<p>2. Create an object of that class and pass it to the button object. In other 
  words, register it. 
<p><a href="cujweb0307sobczak_l1.html">Listing 1</a> presents a very simple Java 
  program that creates a window on the screen with one button. The event-handler 
  for the "press" action of the button prints a message on the console window. 
  The "press" event handler is not the only event handler, though. The second 
  event handler is the handler for an event associated with the window being closed 
  that causes the whole application to terminate. The whole program can be written 
  in much more compact form (thanks to anonymous inner classes [1]), but I wanted 
  to expose the idea of registering event consumers to event producers. This idiom 
  is not restricted to Java (nor to Swing for that matter). Java uses this idiom 
  quite heavily, and the code presented in <a href="cujweb0307sobczak_l1.html">Listing 
  1</a> uses only a fraction of the possibilities. 
<p>If this idiom is not restricted to any particular language, it would be nice 
  to implement it in C++. 
<p>
<h3>Brute-Force Approach</h3>
<p>The first try to implement the concept of event listeners may look like the 
  one presented in <a href="cujweb0307sobczak_l2.html">Listing 2</a>. This approach 
  has a couple of inherent problems that come with its design (these are only 
  the problems I can find &#8212; there may be others): 
<p>1. It is not generic with respect to the interface. There is only one interface, 
  <b>ActionListener</b>. In a non-trivial project, there can be a need for more 
  than just one listener interface. 
<p>2. It is not generic with respect to the information being passed with each 
  event. Here, the <b>actionPerformed</b> method does not accept any parameters, 
  so it can be used only to notify of an event <i>taking place</i>. In practice, 
  different events need to carry different amounts of information. For example, 
  the information associated with an event may be the 
  coordinates of a point on the screen where the mouse clicked, or it may be temperature 
  data, such as the data produced by sensors in the core of a nuclear power station. 
  There is no way of fixing the type of this event information. 
<p>3. It is not generic with respect to the interface vocabulary. In <a href="cujweb0307sobczak_l1.html">Listing 
  1</a> the <b>ActionListener</b> interface has only one function signature. It 
  is quite constraining for clients that are interested in different events, for 
  example, not only in left-clicks but also in cursor movement. In the GUI, the 
  window can produce many different events, like <i>close clicked</i>, <i>minimalize</i>, 
  <i>maximalize</i>, and so on. 
<p>4. It does not scale up. This problem can be seen when one producer can be 
  a source of an event defined by different listener interfaces. The brute-force 
  approach imposes the need to implement as many collections in the event producer 
  class as there are listener interfaces. Clearly, this approach does not promote 
  code reuse. 
<p>5. It is not thread-safe. The STL collections are not thread-safe by their 
  definition and <b>SomeClass</b> does nothing to change it. When two listener 
  objects try to register themselves with the instance of the <b>SomeClass</b>   class, the undefined behavior is waiting for them because the <b>push_back</b>   method cannot be executed concurrently. 
<p>Is it THAT bad? Not quite. There is one big advantage of this brute-force strategy: 
  it works. This should be the clue that it does not deserve to be thrown away 
  at this stage. This strategy includes a couple good ideas. One good idea is 
  the structure of event generator (event source). In <a href="cujweb0307sobczak_l2.html">Listing 
  2</a> it manages the collection of listeners (by pointers) that will be notified 
  when the event takes place. Each listener can register himself with the event 
  source by one of its public members (<b>addListener</b>). For the interface 
  to be complete, the event source also needs a reverse function like <b>removeListener</b>   so that listeners can notify it that they are no longer interested in its events. 
  This is the core of what is needed for implementing this Java-like communication 
  idiom. 
<p>
<h3>Language to the Rescue</h3>
<p>Andrei Alexandrescu, in his excellent "Modern C++ Design," shows that C++ provides 
  two important tools for code reuse that will be useful here. They are Templates 
  and Multiple Inheritance. (I write these words capitalized to show my respect). 
  Andrei says they are orthogonal, in that they are complementary and together 
  they overcome the dificiencies of each other. I will try to mimic the way Andrei 
  designs his classes (it is called policy-based class design) to develop Java-like 
  messaging system without any of the limitations of the brute-force approach 
  that I have presented earlier. 
<p>The policy-based class design should begin with finding all the questions that 
  can influence the design of the class (like: "should the class be thread-safe 
  or not?"). Those questions define the levels of freedom of the class and should 
  be orthogonal. In other words, the answers to those question should not influence 
  one another. These are questions that you can ask about the Java-like messaging 
  system: 
<p>1. What should be the actual interface of the listener? If you want to use 
  this system, the listener interface should be completely up to you. Also, the 
  system should be able to integrate with new interfaces (that are designed later). 
<p>2. What information can be passed with each event? In other words, what defines 
  the context of the event? It can be a single <b>int</b> value, but it could 
  also be the complete, user-defined data type. 
<p>3. Should it be thread-safe? If you do not plan to use it in a multithreaded 
  environment, the overhead of unnecessary synchronization would be overkill for 
  your application. Remember: in C++ you do not pay for what you are not using. 
  On the other hand, when multithreading enters the scene, the messaging system 
  should not give up just because the author forgot to take it into account. 
<p>4. What collection mechanism should be used to keep all the pointers to listeners? 
  Should it be <b>std::vector</b>? 
<p>These questions [2] are orthogonal. (In other words, they are independent.) 
  The answers to these questions define the messaging system on different axes and are dimensions of the whole specification. 
  Moreover, for some of these questions there are quite reasonable default answers. 
  For example, I can assume that for most of the time you will not mix this system 
  with multiple threads, (but the system should be open for this possibility). 
  I can assume also that for most of the time <b>std::vector</b> pleases you as 
  the back-end for the collection of pointers. 
<p><a href="cujweb0307sobczak_l3.html">Listing 3</a> presents the interface of 
  the helper class that will be used as a wrapper for a back-end collection of 
  pointers to the listener objects. (The implementation is omitted here. Please 
  refer to the complete source code for details.) This helper class combines three 
  policies that provide answers to the first, third, and fourth questions concerning 
  the design of the messaging system. The question: "What should be the actual 
  interface of the listener?" is answered by the first template parameter. The 
  back-end physical collection class is defined by the <b>BagType</b> template 
  parameter. It can be any class that supports the following: 
<p>1. an iterator type should be defined in this class that allows the program 
  to traverse the collection. (It should comply with at least the <b>InputIterator</b>   concept.) 
<p>2. <strong>push_back(element)</strong>; &#8212; this is supposed to add the 
  element to the collection. 
<p>3. <strong>end()</strong>; &#8212; this should return the special past-the-end 
  iterator value. 
<p>4. <strong>erase(iterator)</strong>; &#8212; this method is supposed to remove 
  the given element from the collection. 
<p>Normally, the standard sequence collections conform to these requirements, 
  but if you have your own class that supports this functionality, you can use 
  it here as well. 
<p>The threading policy is encapsulated in the <strong>Mutex</strong> class. The 
  minimal interface of this class is: 
<pre>
class NoSynchronization
{
public:
  void lock() {}
  void unlock() {}
};
</pre>
<p>The <b>NoSynchronization</b> class looks somewhat trivial, but it is important 
  to understand how it works in the <b>ListenersCollection</b> class. The collection 
  helper uses the <b>MutexHolder</b> class to synchronize the access to the actual, 
  physical collection. For example, the <b>add</b> method looks like this: 
<p> <pre>
void add(Listener *p)
{
    MutexHolder m(mutex_);
    bag_.push_back(p);
}
</pre>
<p>Written like this, the <b>add</b> method of the helper <b>ListenersCollection</b>   seems to always use synchronization, whether it is needed or not. In fact, <b>MutexHolder</b>   in its constructor calls the <b>lock()</b> method on the mutex object. This 
  method, however, is an empty inline function in the <b>NoSynchronization</b>   class, so the smart compiler can optimize it out of existence. In other words, 
  in optimized builds, the <i>synchronization</i> in the <b>ListenersCollection</b>   imposes no overhead at all if the helper class is instantiated with the <b>NoSynchronization</b>   class as the <strong>Mutex</strong> template parameter. If you really need synchronization, 
  just substitute your own class (that implements the <b>lock()</b> and <b>unlock()</b>   methods) for the <strong>Mutex</strong> template parameter and the synchronization 
  code will be executed whenever <b>MutexHolder</b> objects are constructed and 
  destroyed. 
<p>To mimic the non-synchronized collection of pointers to objects that implement 
  the <b>ActionListener</b> interface (in other words, the collection that is 
  used in <a href="cujweb0307sobczak_l2.html">Listing 2</a>), you can simply write: 
<p> <pre>
ListenersCollection
&lt;
    ActionListener,
    NoSynchronization,
    std::vector&lt;ActionListener*&gt;
&gt;
listeners_;
</pre>
<p>There is a need for clarification here. In the code above, the <b>ActionListener</b>   is written twice. Not only it is redundant &#8212; it is obvious that a vector 
  of <b>ActionListeners</b> should be used here &#8212; it is also error prone. 
  The problem is that nothing in the code prevents the user from typing this: 
<p> <pre>
ListenersCollection
&lt;
    ActionListener1,
    NoSynchronization,
    std::vector&lt;ActionListener2*&gt;
&gt;
listeners_;
</pre>
<p>which would not compile at best and would crash your system at worst. Using 
  the <b>template</b> template parameter would solve the problem, but then you 
  could not use physical collections that have a different <i>template signature</i>   (the set of template parameters) than the standard STL classes. I am ready to 
  compromise the code beauty for the sake of its practicality, sigh. 
<p>A few words about the interface of the helper <b>ListenersCollection</b> class: 
<ul>
  <li> the <b>add</b> method is used for registering the listener object,</li>
  <li> the <b>remove</b> method unregisters them,</li>
  <li> the <b>getFrozen</b> method returns the copy of the physical collection.</li>
</ul>
This copy will be needed to solve the problems that otherwise could emerge when 
the listener wants to register or unregister itself (generally: to change the 
collection) while it is in the middle of event notification, because this would 
render the iterator to the collection invalid. The easiest method is to make an 
immutable copy of the collection and use it to call all the interested recipients. 
The recipients will be able to change only the original collection, not the copy. 
<p>Having the helper collection class, I can show you the final messaging system. 
  <a href="cujweb0307sobczak_l4.html">Listing 4</a> presents the core interface 
  (again, refer to the complete source code for details) of the <b>Messaging</b>   class. This class has to incorporate the last remaining policy: the answer to 
  the "What context should each event carry?" question. This is hidden in the 
  <b>Context</b> template parameter. It can be any class you need. By default, 
  it is <b>int</b>, not because <b>int</b> is a special meaningful type, but because 
  <b>void</b> could not be used here. Templates have their limitations, too. 
<p>The <b>Messaging</b> class is supposed to be a base class for every class that 
  needs to be a source of events. You can also multiply derive from <b>Messaging</b>   instantiated with different parameters, thus making the derived class an event 
  source for different types of events. 
<p>The <b>addListener</b> and <b>removeListener</b> methods are self-explanatory. 
  The core of the messaging is hidden in two protected member methods: 
<ul>
  <li><b>raiseEvent </b>&#8212; this method should be called by the derived class 
    to trigger the event dispatching. It takes the current contents of the pointer 
    collection and iterates through it, calling the second method, then passing 
    to it the pointer and the event context.</li>
  <li> <b>dispatchEvent</b> &#8212; this method is purely virtual and is supposed 
    to be overriden in the derived class. The implementation of this method should 
    perform the actual call to the listener object, taking the context as a hint. 
    How the context is used is up to the derived class. You may use it to choose 
    different methods in the listener's interface or to choose different parameters 
    that will be passed with each event, or both.</li>
</ul>
<p>This two-phase mechanism allows you to write a messaging system that will be 
  generic with respect to the information carried by each event, however, it imposes 
  some work on the programmer that designs the listener classes. 
<p>
<h3>Example Application</h3>
<p><a href="cujweb0307sobczak_l5.html">Listing 5</a> shows an example program 
  that uses the messaging system [3]. Two listener interfaces are defined: <b>MartianAlertListener</b>   (for notification concering the Martians landing) and <b>NuclearPSListener</b>   (for events related to the nuclear power station). The class <b>NormalPerson</b>   implements the <b>MartianAlertListener</b> interface. In the <b>main()</b> function, 
  three objects of this class register themselves with the source of events. The 
  class <b>Technician</b> implements the <b>NuclearPSListener</b> and two objects 
  of this class are registered as well. The even source is an object of a class 
  that derives from the <b>Messaging</b> class instantiated for both listener 
  interfaces. You can see how multiple inheritance helps reuse the messaging infrastructure 
  more than once in a single class. This introduces some naming problems, so calls 
  to <b>addListener</b> have to be disambiguated explicitly. The <b>EventSource</b>   class overrides the <b>dispatchEvent</b> in its two base classes, so it looks 
  like a function overloading. The <b>dispatchEvent</b> override for a base class 
  that manages martian alerts just calls the only one method in the <b>MartianAlertListener</b>   interface for every registered listener. (This iteration is performed in the 
  <b>raiseEvent</b> method in the <b>Messaging</b> class.) The <b>dispatchEvent</b>   override for a base class that manages nuclear events, however, uses the context 
  to decide which function in the listener's interface should be called and with 
  what parameters. 
<p>This way the <b>Messaging</b> class can be reused to fit different communication 
  needs of different listener interfaces. 
<h3>Notes</h3>
<p>[1] Yes, anonymous inner classes make this idiom even nicer but are not appropriate 
  with non-trivial event handling code. 
<p>[2] There is yet another question I was able to ask: "What should happen when 
  one listener object registers itself more than once?" The possibilities are 
  1) it will be notified many times 2) it will be notified only once 3) it is 
  an error. I have difficulties with compiling the code with partial template 
  specialization on my compiler, so I have given up (but the code should compile 
  on a broader set of platforms). The code presented here assumes the first option. 
<p>[3] In <a href="cujweb0307sobczak_l5.html">Listing 5</a>, the <b>Messaging</b>   class is instantiated with the default values for synchronization and storage 
  policies. This means that the collections of pointers to listeners are not synchronized 
  and that the <b>std::vector</b> is used as a back-end of the collection. 
<p>
<h3>Literature</h3>
<p><i>Modern C++ Design</i> by Andrei Alexandrescu (published by Addison-Wesley) 
 -- a very good book that opens a world of new design possibilities thanks 
  to smart use of Templates and Multiple Inheritance.
  <p><i>Generative Programming</i> by Krzysztof Czarnecki and Ulrich W. Eisenecker (Addison-Wesley) -- a ground-breaking book describing parameterisation of software, at the level of analysis, specification and implementation. 
<h3>About the Author</h3>
<p>Maciej Sobczak is a Ph.D. student at the Institute of Computer Science, Warsaw 
  University of Technology. He is passionate about C++ (and experiments with other 
  technologies, too) and is interested in distributed, object-oriented computing. 
  You can visit him at <a href="http://www.msobczak.com" target="_blank">http://www.msobczak.com</a>.</p>
<p> </body>
</html>
