<html><head><title>CUJ Editor's Forum</title></head><body>
<h2 align="center">Editor's Forum</h2>
<hr>
<h3>The Proactive Programmer </h3>
<p><b> </b>I&#146;m writing this on January 4, 2003, 11 days before departing 
  for Portland to attend a much-anticipated summit on writing better code. The 
  people convening the summit have been working on it since last August. (I&#146;ve 
  been helping out a little myself.) Two months and 200 emails later, we invited 
  a small number of willing and noteworthy participants. Hopefully our discussions 
  will benefit many who seek to improve the quality of their code and encourage 
  more to want to. 
<p> I am writing about this summit before it has convened because: 1) many of 
  the other participants will certainly write about the results, and I&#146;m 
  happy to &#147;grease the skids&#148; for them, 2) it&#146;s a topic I believe 
  <i>CUJ</i> readers are always interested in, and 3) there is enough wisdom in 
  the 800+ emails the attendees have already exchanged to offer something worthwhile 
  right now. (The quotes that follow, with two exceptions, are from these emails.) 
<p> <a name="1_return"></a>It is no mystery, of course, that any lack of quality 
  in software is due to external as well as internal forces. Budget constraints 
  or technical decisions made by management that shouldn&#146;t have been are 
  beyond a programmer&#146;s control. As a ZdNet News article once stated [<a href="#1">1</a>], 
  &#147;Fear of competition causes one to race to market with poorly tested features 
  because you believe feature differentiation will win you sales.&#148; The sales 
  gain may indeed occur, but this view ignores the consequences of having dissatisfied 
  customers. Alistair Cockburn talked about this &#147;second kind of cost &#151; 
  lost customer or bad-taste-in-mouth reputation... you won&#146;t make money 
  fixing the bug, but you [may] save 4 or 6 or 10 future bad tastes. Possibly 
  1/2 hour of work for that saved negative value could be worth it.&#148; 
<p> These external forces can also give programmers themselves a &#147;bad taste.&#148; 
  Angelika Langer has &#147;been talking to programmers who cared about code quality 
  and were discouraged and eventually suffocated by the work environment they 
  were working in.... The reason [for lack of quality] often is not programmers&#146; 
  ignorance, but simply the fact that quality is not asked for. To my mind, one 
  step towards better code is explaining the relevance of better code not to programmers, 
  but to product and project managers.&#148;
<p> This may be music to your ears (it was to mine), but Jack Ganssle responded, 
  &#147;Highly ethical programmers do things as correctly as they can all the 
  time. They fight management&#146;s stupid decisions.... Unethical programmers 
  don&#146;t &#151; resulting in lousy code and worse products. To an ethical 
  programmer, [some] things... (filename space problems, buffer overrun vulnerabilities, 
  etc.) just cannot happen.&#148; You can&#146;t blame a buffer overrun on management. 
  A responsible programmer&#146;s internal forces just won&#146;t let it happen. 
  While a quick code review would catch such an error, some programmers don&#146;t 
  want anyone to look at their code, even though their code is part of a product 
  shared by team members and consumers alike. Besides, as Angelika added, &#147;constructive 
  feedback is extremely important, not only for code quality, but also for the 
  programmer&#146;s well being.&#148;
<p> There are and have always been good resources to help us do a better job at 
  creating good software. I&#146;m looking at 12 such books in a stack on my floor 
  right now, half of which were authored by summit attendees. Scott Meyers remarked, 
  however, that &#147;it&#146;s important to have a list of best practices, but 
  it&#146;s also important to talk about why such practices aren&#146;t routinely 
  employed and what can be done to change that.&#148; It&#146;s crucial for any 
  craftsman, and programmers in particular, to &#147;keep up,&#148; or as Bruce 
  Eckel put it, to be a &#147;life-long learner.&#148; It takes effort, but the 
  learner is well rewarded. Eric Hoffer (not an attendee) has observed that, &#147;In 
  times of change learners inherit the earth while the learned find themselves 
  beautifully equipped to work in a world that no longer exists.&#148;
<p> I look forward to the upcoming summit and the Good that will surely follow 
  in its wake. 
<h3> Note</h3>
<p><b> </b><a name="1"></a>[1] Found at &lt;<a href="http://zdnet.com.com/2100-1106-955432.html">http://zdnet.com.com/2100-1106-955432.html</a>&gt;. 
  <br>
  [<a href="#1_return">return to text</a>] 
<p>Chuck Allison<br>
  Senior Editor<br>
  <b><a href="mailto:cda@freshsources.com">cda@freshsources.com</a></b></p>
</body></html>