<HTML><HEAD><TITLE>Listing 2:	Template parameter substitution implementation</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B>Listing 2:</b>	Template parameter substitution implementation<p><pre>#include &lt;string&gt;#include &lt;vector&gt;#include &lt;map&gt;class gstring : public std::string {public:  gstring(const char* c) : std::string(c) {}};class gstringvector : public std::vector&lt;std::string&gt; {};#if defined(NAIVE)typedef std::map&lt;std::string, std::vector&lt;std::string&gt; &gt;  GeneralRegistry;#elif defined(SMART)typedef std::map&lt;gstring, std::vector&lt;std::string&gt; &gt;  GeneralRegistry;#elif defined(SMARTER)typedef std::map&lt;gstring, gstringvector&gt;  GeneralRegistry;#endifint main(int argc, char* argv[]){  GeneralRegistry gr;  while (argc--) {    gr[argv[argc]].push_back("value");  }}}</pre></BODY></HTML>