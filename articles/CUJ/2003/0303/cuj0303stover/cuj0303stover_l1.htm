<HTML><HEAD><TITLE>Listing 1:	Creates a large linked list and destroys it</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 1:</B>	Creates a large linked list and destroys it<p><pre>/* * $Id: listing1.c,v 1.4 2002/06/04 12:53:04 gene Exp gene $ * Performance comparison */#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;gc.h&gt;struct node{  struct node *next;  int dummy_payload;};static const double loop_seconds = 17.0;static const int list_length = (2 * 1024 * 1024) / sizeof (struct node);/* Make a new list of 'length' nodes.  'alloc' should be * &amp;malloc or &amp;GC_malloc. */static struct node *MakeList (int length, void *(*alloc) (size_t)){  struct node *lst = NULL, *tmp;  while (length-- &gt; 0) {    tmp = (struct node *) (*alloc) (sizeof *tmp);    tmp-&gt;next = lst;    lst = tmp;  }  return lst;}/* Explicitly free the nodes in the list. */static voidFreeList (struct node *lst){  while (lst != NULL) {    struct node *tmp = lst-&gt;next;    free (lst);    lst = tmp;  }}/* Pretend to free the list, but do nothing.  Rely on garbage * collection to free the list. */static voidIgnoreList (struct node *lst){}static unsigned longLoop (void *(*alloc) (size_t), void (*free_list) (struct node *)){  unsigned long count = 0;  time_t start, now;  time (&amp;start);  do {    ++count;    (*free_list) (MakeList (list_length, alloc));    time (&amp;now);  } while (difftime (now, start) &lt; loop_seconds);  return count;}static doublePrint (char name[], void *(*alloc) (size_t),       void (*free_list) (struct node *), double base){  time_t start, end;  unsigned long count;  double duration, rate, relative;  time (&amp;start);  count = Loop (alloc, free_list);  time (&amp;end);  duration = difftime (end, start);  rate = count / duration;  relative = base == 0.0 ? 1.0 : rate / base;  printf ("%10s  %9lu  %9.2e  %9.2e  %9.2f\n", name, count, duration, rate, relative);  return rate;}intmain (){  double malloc_rate;  printf ("%10s  %9s  %9s  %9s  %9s\n", "name", "count", "duration",           "rate", "relative");  malloc_rate = Print ("malloc", &amp;malloc, &amp;FreeList, 0.0);  Print ("Boehm", &amp;GC_malloc, &amp;IgnoreList, malloc_rate);  return 0;}</pre></BODY></HTML>