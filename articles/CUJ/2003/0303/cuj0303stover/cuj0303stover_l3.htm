<HTML><HEAD><TITLE>Listing 3:	Three techniques for dealing with destructors</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 3:</b>	Three techniques for dealing with destructors<p><pre>// $Id$#include &lt;gc_cpp.h&gt;#include &lt;iostream&gt;using std::cout;using std::endl;class ManualDelete : public virtual gc {public:  static long constructors;  static long destructors;  virtual ~ManualDelete () { ++destructors; };  ManualDelete () { ++constructors; };};long ManualDelete::constructors = 0;long ManualDelete::destructors = 0;class AutoDelete : public virtual gc_cleanup {public:  static long constructors;  static long destructors;  virtual ~AutoDelete () { ++destructors; };  AutoDelete () { ++constructors; };};long AutoDelete::constructors = 0;long AutoDelete::destructors = 0;intmain (){  for (long i = 0; i &lt; 500000; ++i) {    ManualDelete md_on_stack;    AutoDelete ad_on_stack;    int *i = new (UseGC) int;    char *array = new (UseGC) char[4 * 1024];    ManualDelete *md = new ManualDelete;    AutoDelete *ad = new AutoDelete;    // int and char[] don't have destructors, so mustn't delete.    // Must delete the ManualDelete.    // Boehm will delete the AutoDelete.    delete md;  }  AutoDelete *ad2 = new AutoDelete;  delete ad2;  cout &lt;&lt; "ManualDelete constructors "       &lt;&lt; ManualDelete::constructors &lt;&lt; ", destructors "       &lt;&lt; ManualDelete::destructors &lt;&lt; endl       &lt;&lt; "AutoDelete constructors " &lt;&lt; AutoDelete::constructors       &lt;&lt; ", destructors " &lt;&lt; AutoDelete::destructors &lt;&lt; endl;  return 0;}</pre></HTML>