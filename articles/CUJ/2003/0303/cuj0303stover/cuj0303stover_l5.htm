<HTML><HEAD><TITLE>Listing 5:	Class template Boehmable</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 5:</b>	Class template Boehmable<p><pre>// $Id$#include &lt;gc_cpp.h&gt;#include &lt;list&gt;#include &lt;iostream&gt;#include &lt;string&gt;using std::cout;using std::endl;using std::list;using std::string;long constructors = 0;long destructors = 0;template&lt;class Super&gt;class Boehmable : public Super, public virtual gc_cleanup {public:  // Don't need any member functions.  We inherit the  // interfaces from Super and gc_cleanup.  Boehmable () : Super (), gc_cleanup () { ++constructors; }  virtual ~Boehmable () { ++destructors; }};intmain (){  for (long i = 0; i &lt; 10000; ++i) {    list&lt;int&gt; *lst = new Boehmable&lt; list&lt;int&gt; &gt;;    for (int j = 0; j &lt; 1000; ++j) {      lst-&gt;push_front (j);    }    list&lt;string *&gt; *strlst = new Boehmable&lt; list&lt;string *&gt; &gt;;    for (int k = 0; k &lt; 1000; ++k) {      strlst-&gt;push_front (new Boehmable&lt;string&gt;);    }  }  cout &lt;&lt; "constructors " &lt;&lt; constructors &lt;&lt; ", destructors "       &lt;&lt; destructors &lt;&lt; endl;  return 0;}</pre></HTML>