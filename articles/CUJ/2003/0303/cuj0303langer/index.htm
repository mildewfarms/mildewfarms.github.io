<title>March 2003/C++ Expression Templates</title>
<h2> </h2>
<h2 align="center">C++ Expression Templates</h2>
<h3 align="center"><b>Angelika Langer and Klaus Kreft </b></h3>
<H1 align="center"> 
  <P align="center"> 
</H1>
<div align="center">Do you want high-performance, readable expressions? Expression 
  templates do it all. </div>
<hr>
<P><a name="1_return"></a><a name="2_return"></a>In recent issues of <I>CUJ</I>, 
  Thomas Becker explained some principles of template metaprogramming [<a href="#1">1</a>, 
  <a href="#2">2</a>]. In this article, we&#146;ll take up the metaprogramming 
  thread and give you some insights into a powerful metaprogramming tool known 
  as the expression template. 
<P>
As Becker stated, you can use templates to calculate values at compile time, such as the factorial of <B>n</B>. Becker also described the principle of type traits and showed how to strip the reference property off of a type. We&#146;ll get a little more ambitious in this article: we&#146;ll show you how to evaluate complex expressions at compile time, thereby reducing the run-time effort for expression evaluation to its bare minimum. Our goal is to demonstrate how to prepare an expression at compile time for repeated, highly efficient evaluation at run time.
<P> Consider the integral:
<P><img src="0303cf5.gif" width="100" height="107">
<P>
<P>
You can approximate this integral by evaluating the expression <B>x/(1+x)</B> for <B>n</B> equidistant points in the interval <B>[1.0,5.0]</B>. A function that calculates integrals for arbitrary arithmetic expressions could look like the following, provided you manage to implement expression templates that can be evaluated repeatedly for different values:<P>
<Pre>
template &lt;class ExprT&gt;
double integrate (ExprT e,
   double from,double to,size_t n)
{  double sum=0, step=(to-from)/n;
   for (double i=from+step/2;
      i&lt;to; i+=step)
      sum+=e.eval(i);
   return step*sum;
}</pre>
<P><B>
ExprT</b> in this example would somehow represent an expression such as <B>x/(1+x)</B>.
<h3>Expression Templates for Arithmetic Expressions</h3>
<P><a name="3_return"></a>An expression template for the solution described in 
  the preceding section requires the compile-time evaluation of arithmetic expressions 
  consisting of unary and binary arithmetic operators and variable and constant 
  operands. You&#146;ll find a solution for this type of problem in the classic 
  GOF patterns book [<a href="#3">3</a>]. The GOF book has a pattern for exactly 
  this case &#151; the Interpreter pattern.
<P>
The Interpreter pattern provides a way to represent a language in the form of an abstract syntax tree and an interpreter that uses the syntax tree to interpret language constructs. Actually, the Interpreter pattern is a special case of the Composite pattern. The part-whole relationship of the Composite pattern corresponds to the relationship of an expression and its sub-expressions in the Interpreter pattern:
<ul>
  <li> The leaf is a <I>terminal</I> expression.</li>
  <li>The composite is a <I>non-terminal</I> expression.</li>
  <li>Evaluation of the components is <I>interpretation</I> of the syntax tree 
    and its expressions.</li>
</ul>
<P>
In this case, the goal is to use the Interpreter pattern&#146;s syntax tree to represent arithmetic expressions such as <B>(a+1)* c</B> or <B>log(abs(x-N))</B>. The syntax tree has two types of terminal nodes: numeric literals and numeric variables. The non-terminal nodes are unary or binary expressions consisting of one or two sub-expressions. The expressions have different semantics such as <B>+</B>, <B>-</B>, <B>*</B>, <B>/</B>, <B>++</B>, <B>--</B>, <B>exp</B>, <B>log</B>, and <B>sqrt</B>.
<P> Consider the concrete example of an expression, say <B>(x+2)*3</B>. The composite 
  structure, that is, the syntax tree for this expression, is shown in <a href="0303cf1.htm" target="_blank">Figure 
  1</a>.
<P> The classic object-oriented technique for implementing the Interpreter pattern, 
  as it is suggested in the GOF book, involves the classes shown in <a href="0303cf2.htm" target="_blank">Figure 
  2</a>.
<P> <a href="0303cl1.htm" target="_blank">Listing 1</a> shows samples of the corresponding 
  source code for an implementation of this technique. The base class for <B>UnaryExpr</B> 
  is implemented in analogy to class <B>BinaryExpr</B>, and all the concrete unary 
  and binary expressions follow the example of class <B>Sum</B>.
<P> <a href="0303cl2.htm" target="_blank">Listing 2</a> shows how to use the Interpreter 
  pattern for evaluating the expression <B>(x+2)*3</B>. First an expression object 
  <B>expr</B> is created that represents the expression <B>(x+2)*3</B>, and then 
  the expression object is told to evaluate itself. Naturally, this is an utterly 
  inefficient way to calculate the result of a primitive expression such as <B>(x+2)*3</B>. 
  But hold on; we will now turn the object-oriented approach into a template-based 
  solution. 
<h3>A Compile-Time Version of Arithmetic Expression Evaluation</h3>
<P>In the object-oriented implementation, the classes representing the terminal and non-terminal expressions have a common base class that defines the operation they have in common. This technique is well known: commonalities are expressed by means of a common base class. In template programming, commonalities are expressed in terms of naming conventions and name commonalities. A virtual function in the object-oriented approach becomes a plain, non-virtual function with a certain name. Classes no longer derive from a common base class. Instead, the classes are stand-alone classes that happen to have a member function with the same name and a compatible signature (in the preceding example, an evaluation function named <B>eval()</B>). The expression template solution eliminates all base classes.<P>
Next, we express all the non-terminal expressions, such as <B>Sum</B> or <B>Product</B>, as classes generated from class templates <B>UnaryExpr</B> and <B>BinaryExpr</B>, both of which are parameterized on structural information. These class templates take the types of their sub-expression(s) as type template arguments. In addition, we parameterize the expression class templates on the type of the operation that they represent. That is, the actual operation (<B>+</B>, <B>-</B>, <B>*</B>, <B>/</B>, <B>++</B>, <B>--</B>, <B>abs</B>, <B>exp</B>, <B>log</B>) will be provided as a function object, and its type is one of the template arguments of the expression class template.<P>
We implement the terminal expressions as regular (non-template) classes, pretty much like they are implemented in the object-oriented approach.<P>
Instead of using run-time recursion, we use compile-time recursion for the expression template: we replace the recursive invocation of the virtual evaluation function with recursive-template instantiation of the expression class templates. Remember the calculation of the factorial of <B>n</B> as demonstrated in [1]. This calculation is based on the fact that instantiation of templates is a recursive process. The compiler may find that for the instantiation of one template it may need an instantiation of another template. The compiler then instantiates that other template, which may require the instantiation of yet another template, and so forth. Many of the template metaprogramming techniques take advantage of the recursive nature of the template instantiation process and use it to perform recursive calculations. We will use this effect to replace the recursive calls of the evaluation function <B>eval()</B> with recursive instantiation of expression class templates.
<P> <a href="0303cf3.htm" target="_blank">Figure 3</a> shows the classes in the 
  template-based solution. <a href="0303cl3.htm" target="_blank">Listing 3</a> 
  shows the source code for this implementation.
<P> The class template for <B>UnaryExpr</B> is analogous to class <B>BinaryExpr</B>. 
  For operations, we can use the pre-defined STL function object types (<B>plus</B>, 
  <B>minus</B>, <B>multiplies</B>, <B>divides</B>, etc.), or we can define our 
  own function object types as needed. A binary expression representing a sum, 
  for instance, would be of type <B>BinaryExpr&lt; ExprT1, ExprT2, plus&lt;double&gt; 
  &gt;</B>. Since this type name is rather unwieldy, we add a creator function 
  for a more convenient solution. <a href="0303cl4.htm" target="_blank">Listing 
  4</a> shows two examples of the creator functions. (For more information, see 
  sidebar, &#147;<a href="0303cs1.htm" target="_blank">Creator Functions</a>&#148;).
<P> <a href="0303cl5.htm" target="_blank">Listing 5</a> shows how to use the template-based 
  implementation of an interpreter for evaluating the expression <B>(x+2)*3</B>. 
  An expression object <B>expr</B> represents the expression <B>(x+2)*3</B>, and 
  then the expression object is told to evaluate itself. The type of the expression 
  object is not visible in <a href="0303cl5.htm" target="_blank">Listing 5</a>, 
  thanks to the creator function, but the type would be:
<P>
<Pre>
BinaryExpr&lt; BinaryExpr &lt; Variable,Literal,
   plus&lt;double&gt; &gt;, Literal, multiplies&lt;double&gt; &gt;</pre>
<h3>Evaluation </h3>
<P>What have we gained by re-implementing the Interpreter pattern using templates instead of inheritance? Well, under the assumption that the compiler inlines all the creator functions and constructors and <B>eval()</B> functions (which is likely since all of them are trivial) the expression:<P>
<Pre>
makeProd(makeSum(Variable(x),Literal(2)),Literal(3)).eval()</pre>
<P>evaluates to nothing more than <B>(x+2)*3</B>.<P>
Compare this to the effect of:<P>
<Pre>
Product expr(new Sum(new Variable(x),
   new Literal(2)), new Literal(3)).eval()  </pre>
<P>(See <a href="0303cl2.htm" target="_blank">Listing 2</a>). The object-oriented 
  approach in <a href="0303cl2.htm" target="_blank">Listing 2</a> results in a 
  number of allocations from the heap and subsequent constructions plus a number 
  of invocations of the virtual <B>eval()</B> function. Most likely, none of the 
  calls to <B>eval()</B> will be inlined because compilers typically do not inline 
  functions that are invoked through a pointer.
<P>
In essence, the template-based solution is much faster at run time than the object-oriented implementation.
<h3>Further Elaboration of the Expression Template Solution</h3>
<P>We will now tweak the expression templates a bit to turn them into something really useful. Our first improvement addresses readability. We want to make an expression such as:<P>
<Pre>
makeProd(makeSum(Variable(x),Literal(2)),Literal(3)).eval()</pre>
<P>more readable by making it look more like the expression that it represents, namely <B>(x+2)*3</B>. We can achieve this goal by means of operator overloading. We will make the expression look like <B>eval((v+2)*3.0)</B> with just a few minor modifications.<P>
The first change is to rename the creator functions so that they are overloaded operators; that is, we rename <B>makeSum</B> into <B>operator+</B>, <B>makeProd</B> into <B>operator*</B>, and so forth. The effect is that the term:<P>
<Pre>
makeProd(makeSum(Variable(x),Literal(2)),Literal(3))</pre>
<P>turns into:<P>
<Pre>
((Variable(x) + Literal(2)) * Literal(3))</Pre>
<P>That&#146;s good, but not good enough. We would like to write the expression as <B>((x+2)*3)</B>. Hence, our goal is to eliminate the creation of a <B>Variable</B> and a <B>Literal</B>, which still clutter the expression.
<P> We will start by asking what an expression such as <B>x+2</B> means, now that 
  we have renamed the creator function <B>makeSum</B> into <B>operator+</B>. (<a href="0303cl6.htm" target="_blank">Listing 
  6</a> shows the implementation of <B>operator+</B>.)
<P>
<B>x+2</B> is the same as <B>operator+(x,2)</B>, which formerly was <B>makeSum(x,2)</B>. For this reason <B>x+2</B> is the result of creating a binary expression object that represents a sum and that was created with the <B>double</B> variable <B>x</B> and the <B>int</B> literal <B>2</B> as constructor arguments. More precisely, <B>x+2</B> is an unnamed object created as <B>BinaryExpr&lt;double,int,plus&lt;double&gt;&gt;(x,2)</B>. Note that the type of the object is not quite what we want. We need an object of type <B>BinaryExpr&lt;Variable,Literal,plus&lt;double&gt;&gt;</B>, but the automatic template argument deduction does not know that <B>x</B> is a <B>Variable</B> and <B>2</B> is a <B>Literal</B> in our context. The compiler deduces type <B>double</B> from argument <B>x</B> and type <B>int</B> from argument <B>2</B> because the compiler examines the types of the arguments passed to the function.
<P> It turns out that we must nudge the compiler a little bit. If we pass an object 
  of type <B>Variable</B> instead of the original variable <B>x</B>, then the 
  automatic argument deduction would at least yield type <B>BinaryExpr&lt;Variable,int,plus&lt;double&gt;&gt;</B>, 
  which is a little closer to the goal. (We will address the remaining <B>int</B>-to-<B>Literal</B> 
  conversion in a minute.) For this reason, a minimal degree of cooperation from 
  the users&#146; side is inevitable: users must wrap their variables into objects 
  of type <B>Variable</B> to make the expression work, as shown in <a href="0303cl7.htm" target="_blank">Listing 
  7</a>.
<P>
By using a <B>Variable</B> object <B>v</B> instead of a plain numeric variable, we ensure that an expression such as <B>v+2</B> evaluates to an unnamed object equivalent to <B>BinaryExpr<BR>
&lt;Variable,int,plus&lt;double&gt;&gt;(v,2)</B>. Such a <B>BinaryExpr</B> object has two data members, which are of type <B>Variable</B> and <B>int</B> respectively. The evaluation function <B>BinaryExpr&lt;Variable,int,plus<BR>
  &lt;double&gt;&gt;::eval()</B> would return the sum of the result of the evaluation 
  of its two data members. The crux is that the <B>int</B> data member does not 
  know how to evaluate itself; we need to turn the literal <B>2</B> into an object 
  of type <B>Literal</B>, which does know how to evaluate itself. How can we automatically 
  convert constants of any numerical type to objects of type <B>Literal</B>? In 
  order to solve the problem, we&#146;ll define expression traits. For more information 
  on traits, see the sidebar, &#147;<a href="0303cs2.htm" target="_blank">Traits</a>.&#148;
<P> The traits technique solves the problem of converting numeric literals to 
  objects of type <B>Literal</B>. For each expression type, we define expression 
  traits that provide information about how sub-expressions should be stored inside 
  the expression objects of which they are operands. All entities of numeric types 
  shall be stored as objects of type <B>Literal</B>; all objects of type <B>Variable</B> 
  shall be stored as they are, namely as <B>Variable</B>s; and all non-terminal 
  expression objects shall also be stored as they are. <a href="0303cl8.htm" target="_blank">Listing 
  8</a> shows the definition of the expression traits.
<P>
The expression traits class defines a nested type <B>expr_type</B>, which represents the expression object&#146;s expression type. A general expression traits template defines the expression type for all expressions that are class types, such as <B>BinaryExpr</B>, <B>UnaryExpr</B>, or <B>Variable</B>. In addition, there are specializations of the general class template for all those types that are built-in numeric types such as <B>short</B>, <B>int</B>, <B>long</B>, <B>float</B>, <B>double</B>, etc. For all non-class expressions, the expression type is defined as type <B>Literal</B>.<P>
Inside the definition of the <B>BinaryExpr</B> and <B>UnaryExpr</B> classes, we will use the expression traits to determine the data member type that will hold the sub-expression.<P>
Thanks to the expression traits, an expression object of type <B>BinaryExpr&lt;Variable,int,plus&lt;double&gt;&gt;</B> will contain its two operands as objects of type <B>Variable</B> and <B>Literal</B>, as desired.
<P> Now we have ensured that an expression such as <B>((v + 2) * 3).eval()</B>, 
  where <B>v</B> is a <B>Variable</B> that wraps a <B>double</B> variable <B>x</B>, 
  will evaluate to <B>(x+2)*3</B>. Let us do some minor tweaking to make the expression 
  even more readable. Most people find it weird to invoke a member function of 
  something that looks like an expression. If we define a helper function, we 
  can turn the expression <B>((v + 2) * 3).eval()</B> into something like <B>eval((v 
  + 2) * 3)</B>, which looks more natural to most people but is otherwise equivalent. 
  <a href="0303cl9.htm" target="_blank">Listing 9</a> shows the helper function.
<P> <a href="0303cf4.htm" target="_blank">Figure 4</a> illustrates how the expression 
  <B>((v + 2) * 3).eval()</B>, where <B>v</B> is a <B>Variable</B> that wraps 
  a <B>double</B> variable <B>x</B>, gradually unfolds at compile time to the 
  expression <B>(x+2)*3</B>. 
<h3>Repeated Evaluation of an Expression Object</h3>
<P>What is the benefit of expression objects? Each expression object represents the syntactical decomposition of an arithmetic expression; it&#146;s a syntax tree that knows how to interpret itself to produce a numeric value. Basically, we&#146;ve set up machinery for evaluation of expressions &#151; something that is built into the language anyway. So, what is the point? A final small adjustment to the solution will reveal the point.
<P> So far, the syntax tree interpretation is rather static. Each syntax tree 
  is created and interpreted only once. A more dynamic usage model is possible, 
  where a given syntax tree is evaluated repeatedly for different input values. 
  Remember, we ultimately want to calculate integrals such as:
<P><img src="0303cf5.gif" width="100" height="107">
<P>
<P>
using an integration function such as the one below, which approximates the integral by evaluating an expression for a specified number of equidistant points in an interval:<P>
<Pre>
template &lt;class ExprT&gt;
double integrate (ExprT e,double from,double to,size_t n)
{  double sum=0, step=(to-from)/n;
   for (double i=from+step/2; i&lt;to; i+=step)
       sum+=e.eval(i);
   return step*sum;
}</pre>
<P>We would like to use this function as shown below to approximate the integral of <B>x/(1+x)</B> from the example above:<P>
<Pre>
Identity x;
cout &lt;&lt; integrate (x/(1.0+x),1.0,5.0,10) &lt;&lt; endl;</pre>
<P>We need an expression object that can be interpreted repeatedly, something 
  that our expression templates do not allow yet. It just takes a minor modification 
  to turn our static syntax tree interpretation into a repeatable interpretation. 
  We just have to change all evaluation functions of all the expression class 
  templates so that they accept an input argument, namely the value for which 
  they evaluate themselves. The non-terminal expressions will pass on the argument 
  to their sub-expressions. The <B>Literal</B> will accept the argument and ignore 
  it; it will continue returning the constant value that it represents. The <B>Variable</B> 
  will no longer return the value of a variable that it refers to but will return 
  the value of its argument. For this reason we rename it to <B>Identity</B>. 
  <a href="0303cl10.htm" target="_blank">Listing 10</a> shows the modified classes.
<P>
If we add non-terminal expressions for incorporation of numeric functions (such as <B>sqrt</B>, <B>sqr</B>, <B>exp</B>, <B>log</B>, etc.), we can even calculate the Gauss distribution:<P>
<Pre>
double sigma=2.0, mean=5.0;
const double Pi = 3.141593;
cout &lt;&lt; integrate(
 1.0/(sqrt(2*Pi)*sigma) * exp(sqr(x-mean)/(-2*sigma*sigma)),
 2.0,10.0,100) &lt;&lt; endl;</pre>
<P>For implementation of non-terminal expressions for the numeric functions, such 
  as <B>sqrt</B>, <B>exp</B>, and <B>sqr</B> in the example, we can use functions 
  from the Standard C library. We would implement these non-terminal expressions 
  as creator functions that create a unary expression, whose operation is one 
  of the predefined C functions (see <a href="0303cl11.htm" target="_blank">Listing 
  11</a>).
<P>
With these additions in place, we now have a powerful, high-performance solution for evaluating arithmetic expressions. The techniques demonstrated in this article allow you to set up expression templates for logical expressions. By renaming the evaluation function from <B>eval()</B> to <B>operator()</B>, which is the function call operator, you can easily turn the expression objects into function objects, which you can then use in conjunction with STL algorithms. Below is an example of a logical expression that is used as a predicate for counting elements in a list:<P>
<Pre>
list&lt;int&gt; l;
Identity x;
count_if(l.begin(),l.end(), x &gt;=
    0 &amp;&amp; x &lt;= 100 );</pre>
<P>The example nicely illustrates the gain in readability that expression templates enable, at zero cost in terms of run-time performance. Provided that the expression templates are already in place, they are easy and convenient to use. All expression template libraries are built on principles similar to the ones discussed in this article.
<h3>References</h3>
<P><a name="5_return"></a><a name="6_return"></a>Quite a number of expression 
  template libraries are available for free download. Some of these libraries 
  are mentioned in the list of references below. However, this list is by no means 
  comprehensive or representative. If you are interested in further information 
  on expression templates, we recommend one of the directories ([<a href="#5">5</a>, 
  <a href="#6">6</a>]).
<P> <a name="1"></a>[1] Thomas Becker. &#147;STL &amp; Generic Programming: C++ 
  Template Metprogramming,&#148; <I>C/C++ Users Journal</I>, August 2002.<br>
  [<a href="#1_return">return to text</a>]
<P> <a name="2"></a>[2] Thomas Becker. &#147;STL &amp; Generic Programming: More 
  on C++ Template Metprogramming,&#148; <I>C/C++ Users Journal</I>, October 2002.<br>
  [<a href="#2_return">return to text</a>]
<P> <a name="3"></a>[3] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 
  <I>Design Patterns: Elements of Reusable Object-Oriented Software</I> (Addison-Wesley, 
  1995).<br>
  [<a href="#3_return">return to text</a>]
<P> <a name="4"></a>[4] T. Veldhuizen. &#147;Expression Templates,&#148; <I>C++ 
  Report</I>, June 1995, pp. 26-31. The article has been reprinted in the book 
  <I>C++ Gems</I> edited by Stanley Lippman (SIGS Books &amp; Multimedia, 1996). 
  <br>
  [<a href="#4_return">return to text</a>]
<P> <a name="5"></a>[5] Research Centre J&uuml;lich, &lt;<a href="http://www.fz-juelich.de/zam/cxx/">www.fz-juelich.de/zam/cxx/</a>&gt;. 
  An impressive directory of C++ resources such as books, articles, FAQs, other 
  C++ pages, compilers, libraries, etc. See in particular the links to other C++ 
  libraries at &lt;<a href="http://www.fz-juelich.de/zam/cxx/extmain.html#lib">www.fz-juelich.de/zam/cxx/extmain.html#lib</a>&gt;. 
  <br>
  [<a href="#5_return">return to text</a>]
<P> <a name="6"></a>[6] The Object-Oriented Numerics Page, &lt;<a href="http://www.oonumerics.org/oon/#libraries">www.oonumerics.org/oon/#libraries</a>&gt;. 
  A directory of links to freely available numeric libraries. <br>
  [<a href="#7_return">return to text</a>]
<P> <a name="7"></a>[7] The Blitz Project, &lt;<a href="http://oonumerics.org/%20blitz/">http://oonumerics.org/ 
  blitz/</a>&gt;. A C++ class library for scientific computing that uses template 
  techniques to achieve high performance. 
<P> <a name="8"></a>[8] PETE (Portable Expression Template Engine), &lt;<a href="http://www.acl.lanl.gov/pete/">www.acl.lanl.gov/pete/</a>&gt;. 
  A portable C++ framework to easily add powerful expression templates. 
<P> <a name="9"></a>[9] POOMA (Parallel Object-Oriented Methods and Applications), 
  &lt;<a href="http://www.acl.lanl.gov/pooma/">www.acl.lanl.gov/pooma/</a>&gt;. 
  An object-oriented framework for applications in computational science requiring 
  high-performance parallel computers. 
<P> <a name="10"></a>[10] MET (Matrix Expression Templates), &lt;<a href="http://met.sourceforge.net/">http://met.sourceforge.net/</a>&gt;. 
  A C++ matrix class library. C++ overloaded operators enable one to write the 
  simplest code like <B>u = m*v + w</B>. 
<P> <a name="11"></a>[11] MTL (Matrix Template Library), &lt;<a href="http://www.osl.iu.edu/research/mtl/">www.osl.iu.edu/research/mtl/</a>&gt;. 
  A high-performance generic component library that provides linear algebra functionality 
  for a wide variety of matrix formats. Uses an STL-style approach. Provides generic 
  algorithms corresponding to the mathematical operations that define linear algebra. 
  Containers, adaptors, and iterators are used to represent and to manipulate 
  matrices and vectors. 
<P> <a name="12"></a>[12] Jeremy G. Siek and Andrew Lumsdaine. &#147;The Matrix 
  Template Library: A Generic Programming Approach to High-Performance,&#148; 
  &lt;<a href="http://www.lsc.nd.edu/downloads/research/%20mtl/papers/iscope_final.pdf">www.lsc.nd.edu/downloads/research/ 
  mtl/papers/iscope_final.pdf</a>&gt;. 
<P>[13] FACT! (Functional Additions to C++ through Templates and Classes), &lt;www.kfa-juelich.de/zam/FACT/start/index.html&gt;. 
  FACT! is a library that offers lambda expressions built on top of PETE. By using 
  FACT!'s lambda syntax, the programmer can define generic functions for use with 
  STL on the fly.
<p>[14] FC++ (Functional Programming in C++), &lt;www.cc.gatech.edu/~yannis/fc++/&gt;. 
  FC++ is a library for functional programming in C++, which you can use to define 
  your own higher-order polymorphic functions.</p>
<p>[15] BLL (The Boost Lambda Library), &lt;www.boost.org/libs/lambda/doc/index.html&gt;. 
  BLL is a C++ template library that implements lambda abstractions for C++. The 
  primary motivation for BLL is to provide flexible and convenient means to define 
  unnamed function objects for STL algorithms.</p>
<p>[16] Phoenix (A parser used by Spirit), &lt;http://spirit.sourceforge.net/index.php?doc=docs/phoenix_v1_0/index.html&gt;. 
  Phoenix is a framework that opens up functional programming techniques such 
  as Lambda (unnamed functions) and Currying (partial function evaluation), similar 
  to FC++ and BLL.</p>
<h3>Acknowledgements</h3>
<p>Our thanks to Gary Powell, who brought FACT!, FC++, BLL, and Phoenix to our 
  attention.</p>
<P>&nbsp; 
<h3>About the Authors</h3>
<P><b>Angelika Langer</b> works as an independent freelance trainer/consultant. 
  Her main area of interest and expertise is object-oriented software development 
  in C++ and Java. She can be reached at <b><a href="mailto:langer@camelot.de">langer@camelot.de</a></b>. 
<p> 
<p><b> Klaus Kreft</b> is a senior consultant at Siemens Business Services in 
  Germany. He can be reached at <b><a href="mailto:klaus.kreft@siemens.com">klaus.kreft@siemens.com</a>.</b>
