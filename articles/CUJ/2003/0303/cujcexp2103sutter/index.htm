<HTML>   
     <HEAD>
<TITLE>March 2003/Sutter's Mill</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Sutter's Mill: Keywords That Aren't (or, Comments By Another Name)</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Herb Sutter</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>The last few &quot;Sutter's Mill&quot; columns have covered pretty heavy topics &#151; exception specifications, <b>export</b>, and befriending templates. This time, let's kick back and look at something more basic: keywords.</p>

<H3><FONT COLOR="#000080">Why Have Keywords?</FONT></H3>

<p>It's important for the C++ language to have keywords that are reserved to the language itself and that can't be used as the names of things like types or functions or variables. If there weren't such reserved words, it would be easy to write programs that are impossible to compile because they're undecidably ambiguous. Consider the unbelievably simple conditional code in Example 1(a):</p>

<pre>
// Example 1(a): A legal C++ program.
//
int main()
{
  if( true ); // 1: OK
  if( 42 );   // 2: OK
}
</pre>

<p>Lines 1 and 2 each test a condition; if the condition evaluates to <b>true</b> (and both do), an empty statement is executed.</p>
<p>Granted, that may not be the most thrilling code that the planet has ever seen. I fervently hope that it is not even the most thrilling code you have personally written in the past week. But it is legal C++, and it's the simplest code I can think of that illustrates the problems we would have if C++ allowed keywords to be used as identifiers.</p> 
<p>Now consider the following speculative code that just recently arrived in my office (with a quiet pop and a faint smell reminiscent of camphor mixed with sulfur) from an alternate universe in which C++ did not reserve keywords, and people happily tried to use the keywords as identifiers too. For a moment, leave aside how a compiler might make sense of this, and consider instead the far simpler question: What do you as a <i>human</i> think the code in Example 1(b) ought to mean?</p>

<pre>
// Example 1(b): Not legal C++, but what if it were?
//
class <b>if</b>        // Let's call the class &quot;if&quot;
{               // (not legal, but what if it were?)
public:
  <b>if</b>( bool ) {} // 3: Hmm... constructor?
};
</pre>

<p>What does line 5 mean? &quot;Oh, that's easy,&quot; someone might say. &quot;We know that a conditional statement couldn't possibly make sense there, plus a type name wouldn't appear by itself as the condition being tested, so clearly this has got to be a constructor. Hey, maybe letting users reuse names like <b>if</b> isn't so bad after all &#151; after all, it's not hard to guess what they must mean!&quot; Some language designers have been quick to go down this dirty little road ... and it's a very short dirty little road, because you don't get very far along it before falling face first across situations like lines 4 and 5:</p>

<pre>
// Example 1(b), continued
//
// Now let's go back to that code again...
int main()
{
  <b>if</b>( true );     // 4: Hmm... what does this mean?
  <b>if</b>( 42 );       // 5: Hmm... and this?
}
</pre>

<p>In this alternate universe's code, what would lines 4 and 5 mean? Are they the same old plain-jane conditional statements we knew and loved in Example 1(a)? Or are they uses of the type <b>if</b>, which happens to helpfully have a suitable constructor, in which case the statements mean to create two unnamed temporary objects? After thinking about this question for a few seconds, I hope you'll quickly come to the conclusion that not even a human could know the answer for sure in this case, never mind the general case. And if a human can't know, what more could we reasonably expect from a compiler?</p>
<p>&quot;But wait,&quot; the person still trying to force his way down the dirty little road might say, &quot;we can still invent a rule for this and make it work! In lines 4 and 5, creating a temporary just to destroy it again isn't very useful, so we can just arbitrarily decide it's not what the programmer must have meant, and that therefore it must be a plain old conditional statement.&quot; I hope that you've recoiled in some combination of horror, disgust, shock, and dismay at the very suggestion of such a filthy hack, but let's pursue it long enough to note two killer objections that blast such a hack to smithereens: </p>

<OL><LI>One could just as easily say that writing &quot;<b>if( true );</b>&quot; is a no-op and couldn't possibly be what the programmer meant, so we should treat both statements as declaring a temporary object. </LI>
<LI>Whichever way you choose, you're in the situation where lines 4 and 5 have an utterly different meaning depending solely on whether there happens to be such a class <b>if</b> in scope or not, and that would be disgraceful.</LI></OL>

<p>Having ad-hoc, hacked-up, special-case, foul-smelling rules like that ought to be a big flashing red light warning of a serious design problem. Indeed, it is.</p>
<p>There are, of course, other ways to create such ambiguities if keywords are not specially reserved. Example 1(c) illustrates another simple way:</p>

<pre>
// Example 1(c): Not legal C++, but what if it were?
//
class SomeFunctor
{
public:
  int operator()( bool ) { return 42; }
};

SomeFunctor <b>if</b>; // Let's call the variable &quot;if&quot;
                // (not legal, but what if it were?)

// Now let's go back to that code again...
int main()
{
  <b>if</b>( true );     // 6: Hmm... what does this mean?
  <b>if</b>( 42 );       // 7: Hmm... and this?
}
</pre>

<p>Here again, what would lines 6 and 7 mean? Are they the same old plain-jane conditional statements we knew and loved in Example 1(a)? Or are they uses of the variable <b>if</b>, which happens to helpfully understand <b>operator()</b> &#151; hey, it even takes compatible parameters! &#151; in which case the statements mean <b>if.operator()( true );</b> and <b>if.operator()( 42 );</b>? I think it's clear that it's next to impossible for even a human like you or me to come up with a sane rule to decide what this ought to mean, and if a human can't know, he can't write a compiler that knows.</p>
<p>It's clear that C++, and other languages, do indeed need to firmly nail down the meanings of some names. It needs to reserve the names for the language's own use, so such things are called <i>reserved words</i>.</p>

<H3><FONT COLOR="#000080">Our Rather Reserved Cast: The Keywords</FONT></H3>

<p>The C++ Standard reserves 63 names as keywords. I've listed them in <a href="sutter_tab1.htm">Table 1</a>. Most or all of these names should be familiar to us. We use most of them daily.</p>
<p>On top of that, 11 of the operators and punctuators can be spelled out as words instead of in their usual form; for example, you can write <b>and</b> instead of <b>&amp;&amp;</b> in a conditional expression. The Standard reserves those names too so that you can't use them for your own names; see <a href="sutter_tab2.htm">Table 2</a>. That's 74 &#151; count 'em &#151; 74 specific names your program is not allowed to use for its own purposes, such as for the names of types, functions, or variables <a href="#2">[2]</a>. </p> 

<H3><FONT COLOR="#000080">Keywords: The Lesser Ones</FONT></H3>

<p>Most of these keywords do something. That's good &#151; otherwise why have them?</p>
<p>Some keywords, however, don't do nearly as much as one might hope. In fact, several have no semantic impact on your program at all &#151; really. I mean it. That's right, some keywords are semantically equivalent to whitespace, a glorified comment. In particular, I have three in mind: <b>auto</b>, <b>register</b>, and in many respects <b>inline</b>. (It's arguable how much effect the keyword <b>export</b> has in theory and/or practice, but that's another topic; see <a href="#3">[3]</a> and <a href="#4">[4]</a>.)</p>
<p>Consider first poor <b>auto</b>:</p>

<BLOCKQUOTE>
<p>Q: How does adding the keyword <b>auto</b> alter the semantics of a C++ program?</p>
<p>A: Not at all.</p>
</BLOCKQUOTE>

<p><b>auto</b> is an entirely redundant storage class specifier. It can only appear on the names of objects declared in a code block and designates that those objects are automatically destroyed when their function or block ends; but in all the cases where <b>auto</b> can appear, it's implied anyway if it's <i>not</i> written, and that's what makes it redundant. In short, <b>auto</b> is exactly as meaningful as whitespace.</p>
<p>Now, at this point, some astute readers of the C++ Standard might pipe up and say in a high, shrill voice: &quot;But that's not quite what the Standard says! Why, it even says, in a note, <b>auto</b> is only <i>almost</i> always redundant:</p>

<BLOCKQUOTE>
<p>&quot;...the <b>auto</b> specifier is almost always redundant and not often used; one use of <b>auto</b> is to distinguish a declaration-statement from an expression-statement explicitly.&quot; <a href="#5">[5]</a></p>
</BLOCKQUOTE>

<p>Yes, that's what the Standard says, but no, it's not correct. (I've submitted a defect report to correct the non-normative note.) Why not? The rule in C++ that specifically deals with such ambiguity is that anything that can possibly be a declaration must be a declaration; adding <b>auto</b> never changes that. For example:</p>

<pre>
// Example 2: auto does not disambiguate.
//
int i;
int j;

int main()
{
  int(i);       // declares i; not a reference to ::i
  auto int(j);  // still declares j; not a reference to ::j

  int f();      // a function declaration, not a default-
                //  constructed int variable
  auto int f(); // still a function declaration, though this
                //  time one that will get an error on strict
                //  compilers
}
</pre>

<p>For further discussion of the declaration ambiguity in C++, see also <a href="#6">[6]</a> and <a href="#7">[7]</a>. In sum, <b>auto</b> cannot be used to disambiguate any such ambiguity.</p>

<BLOCKQUOTE>
<p><b>Guideline:</b> Never write <b>auto</b>. It's exactly as meaningful as whitespace.</p>
</BLOCKQUOTE>

<p>Enough about <b>auto</b>. What about <b>register</b>? Let's ask:</p>

<BLOCKQUOTE>
<p>Q: How does adding the keyword <b>register</b> alter the semantics of a C++ program?</p>
<p>A: Not at all.</p>
</BLOCKQUOTE>

<p>To see why, consider what the C++ Standard has to say immediately following the above-quoted note about <b>auto</b> ... it begins:</p>

<BLOCKQUOTE>
<p>A <b>register</b> specifier has the same semantics as an <b>auto</b> specifier...&quot;</p>
</BLOCKQUOTE>

<p>Uh, oh. According to what we've just discovered, that would mean &quot;no semantics.&quot; Not an auspicious start. Forging ahead, the text continues:</p>

<BLOCKQUOTE>
<p>...together with a hint to the implementation that the object so declared will be heavily used. [Note: the hint can be ignored and in most implementations it will be ignored if the address of the object is taken. &#151; end note] <a href="#5">[5]</a></p>
</BLOCKQUOTE>

<p>The idea behind <b>register</b> is that if some variables are going to be heavily used, then it makes sense to put them in physical CPU registers whenever possible, which lets them be operated on much faster than if they need to be fetched from (relatively) slow cache memory &#151; or, worse still, from main memory.</p> 
<p>That's fine as far as it goes; but it doesn't go as far as the programmer.</p>
<p>You should never want to write <b>register</b>. These days, the idea of having the programmer pepper the code with register allocation hints is a wild goose chase more than it ever has been, because it's virtually impossible for even the best programmer (that's you) to come up with the best allocation of registers to make his code run fastest. Even if the programmer knows the exact chip his code will run on (which is rare) and knows it as well as his compiler's code generation development team (which is unlikely in the extreme), the programmer can never assign objects to registers as well as a good compiler can do it because the programmer has no idea what other transformations (e.g., inlining, loop unrolling, dead branch elimination, variable folding) have already been performed by the time the code generator sees the code and can start to decide what parts of what's left will benefit most from register use. Not only can't you do as good a job as your compiler, but you shouldn't want to &#151; this sort of thing is just what automated tools are for, not to mention much better at.</p> 

<BLOCKQUOTE>
<p><b>Guideline:</b> Never write <b>register</b>. It's exactly as meaningful as whitespace.</p>
</BLOCKQUOTE>

<H3><FONT COLOR="#000080">Summary</FONT></H3>

<p>We've seen why the C++ language treats keywords as reserved words, and we've seen two keywords &#151;<b>auto</b> and <b>register</b> &#151; that make no semantic difference whatsoever to a C++ program. Don't use them; they're just whitespace anyway, and there are faster ways to type whitespace.</p>

<BLOCKQUOTE>
<p><b>Guideline:</b> Never write <b>auto</b>. It's exactly as meaningful as whitespace.</p>
<p><b>Guideline:</b> Never write <b>register</b>. It's exactly as meaningful as whitespace.</p>
</BLOCKQUOTE>

<p>But wait &#151; didn't I also mention <b>inline</b>? Indeed I did. More on that next time, when we return...</p>

<H3><FONT COLOR="#000080">Acknowledgements</FONT></H3>

<p>Thanks to John Spicer for providing part of Example 2.</p>

<H3><FONT COLOR="#000080">References</FONT></H3>

<p><a name="1"></a>[1] H. Sutter. <i>More Exceptional C++</i>, Item 12 (Addison-Wesley, 2002).</p>
<p><a name="2"></a>[2] ISO/IEC 14882:1998(E), International Standard, Programming Languages &#151; C++, section 2.11.</p>
<p><a name="3"></a>[3] H. Sutter. &quot;Sutter's Mill: Export Restrictions, Part 1,&quot; <i>C/C++ Users Journal</i>, September 2002.</p>
<p><a name="4"></a>[4] H. Sutter. &quot;Sutter's Mill: Export Restrictions, Part 2,&quot; <i>C/C++ Users Journal</i>, November 2002.</p>
<p><a name="5"></a>[5] ISO/IEC 14882:1998(E), International Standard, Programming Languages &#151; C++, section 7.1.1.</p>
<p><a name="6"></a>[6] H. Sutter. &quot;Istream Initialization?&quot; <i>Guru of the Week</i> #75, available online at <a href="http://www.gotw.ca/gotw/075.htm">&lt;www.gotw.ca/gotw/075.htm&gt;</a>.</p>
<p><a name="7"></a>[7] Scott Meyers. <i>Effective STL</i>, Item 6 (Addison-Wesley, 2001).</p>

<H3><FONT COLOR="#000080">About the Author</FONT></H3>

<p><b>Herb Sutter</b> (<a href="http://www.gotw.ca">&lt;www.gotw.ca&gt;</a>) is convener of the ISO C++ standards committee, author of the acclaimed books <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and one of the instructors of The C++ Seminar (<a href="http://www.gotw.ca/cpp_seminar">&lt;www.gotw.ca/cpp_seminar&gt;</a>). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.</p>


</BLOCKQUOTE></BODY></HTML>
