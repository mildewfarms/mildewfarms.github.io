<HTML>
<HEAD>
<TITLE>March 2003/Uncaught Exceptions</TITLE>
</HEAD>
<BODY>
<h2 align="center"><b>Uncaught Exceptions</b>: Off the Road Again </h2>
<h3 align="center">Bobby Schmidt</h3>
<p align="center"> 
<div align="center">Tracking pointers from Who Knows Where and other revelations. 
</div>
<hr>
<p><i>Copyright &copy; 2003 Robert H. Schmidt</i>
<p><i> </i>Each of my questions this week mixes C and C++. And that&#146;s fitting, 
  as I&#146;ve just returned from a three-week road trip that included back-to-back 
  C and C++ Standard committee meetings in Santa Cruz.
<p> When the C++ meeting was in Seattle in 1990, and in Redmond in 2001, I sat 
  in for a couple of hours each time. But this time &#151; and for the first time 
  &#151; I attended both meetings all days as an official observer from Microsoft.
<p> The committees meet twice each year: autumn within North America, and spring 
  elsewhere. Accordingly, each committee condenses six months of work into one 
  week. This cramming resulted in long days, some starting at 8:30 A.M. and not 
  wrapping up until 12 hours later. By the end of the second week, many of us 
  were obviously worn out.
<p> Those who attend these meetings consistently are serious about the C and C++ 
  Standards, their implementations, and their customers. You can&#146;t be casual 
  and make this level and length of investment. Now it&#146;s easy to take potshots 
  at the Standards and those who create and maintain them. Lord knows I&#146;ve 
  been guilty of that sin more than once in this column. But after having spent 
  two weeks immersed in this process, I have a much deeper appreciation for the 
  work and players involved.
<p> After the meetings, I drove north for The (3rd) C++ Seminar (a.k.a. TCS 3). 
  The highlight for me was emceeing our first ever C++ trivia contest on the final 
  day. Among the contestants we grilled on stage were Chuck Allison and David 
  Burggraaf, top dudes of <i>CUJ</i> and Microsoft&#146;s Visual C++ team. Sadly 
  for the honors of both <i>CUJ</i> and Microsoft, neither man won. But happily 
  for everyone else, both organizations graciously supplied t-shirts as prizes.
<p> If you attended &#151; and especially if you played &#151; I trust you had 
  as much fun as I did.
<p> Will there be a TCS 4 in 2003? I truly hope so. Will there be more committee 
  meetings? For sure, and I had planned to be at both, in Oxford, England this 
  April, and Kona, Hawaii this October; but now it looks as if I&#146;ll spend 
  April in America. I think Chuck will attend at least one of the C++ meetings. 
  Maybe the committee&#146;s questions will be easier than the seminar&#146;s. 
  [Griller is always easier than Grillee, no? &#151; cda] 
<h3>Point of Origin</h3>
<p><b>Q. </b> <i>Hi Bobby,</i> 
<p><i> Despite many searches through </i><b>comp.lang.c++.*</b><i>, I have not 
  received a relevant answer.</i> 
<p><i> Say I have a pointer to some C library </i><b>struct</b><i> that I&#146;m 
  accessing from C++. I&#146;d like to know if this (legal) address is from an 
  object allocated on the heap or an object allocated on the stack. I will use 
  this only for debugging and assertions. I&#146;m using Microsoft Visual C++ 
  6.0, so I don&#146;t insist on portability.</i> 
<p><i> Thanks in advance.</i> 
<p> <i>&#151; Adi Shavit</i> 
<p> 
<p> <b>A. </b> Pointers are pretty naive little beings. They contain only a single 
  (presumed) address to some other thing and have a type that (presumably) tells 
  what kind of thing the address references. But they have no memory of where 
  their contained address comes from, or anything else about the context of that 
  address. Further, there is no Standard C++ library call to tell you this information.
<p> Here are a few simple ways you can overcome this problem: 
<ul>
  <li> Find a system-specific call that can tell you whether an address is in 
    the stack or the heap.</li>
  <li>Wrap the C <b>struct</b> in a C++ class. Add a tag member to the class and 
    fill a different value into the tag dependent on where the class was allocated. 
    Create and destroy the wrapper objects; do not create and destroy the C structure 
    directly.</li>
  <li>Same as above, except you selectively enable ways to create wrapper objects.</li>
</ul>
<p> Method #1 requires knowledge of Windows programming that I don&#146;t have. 
  There well may be a call you can make that tells you where an address lives, 
  or some algorithm you can apply to an address&#146;s value. I just don&#146;t 
  know.
<p> Keep in mind that there are multiple ways an object may be allocated: statically, 
  automatically (on the stack), from the heap (via <b>malloc</b>), from the free 
  store (via <b>new</b>), from a system-managed store, from an application-managed 
  store, and so on. That an address doesn&#146;t live on the heap doesn&#146;t 
  imply that it&#146;s from the stack. 
<p> Method #2 requires that you wrap the C structure in such a way that the wrapper 
  object knows where it came from. I show a simple possibility as <a href="0303jl1.htm" target="_blank">Listing 
  1</a>. Highlights: 
<ul>
  <li> The constructor senses the value of the per-class member <b>new_called_</b>. 
    That member is true if and only if <b>operator new</b> is called for a <b>C_wrapper</b> 
    object.</li>
  <li>The constructor saves that value in the per-object <b>tag_</b>.</li>
  <li>The wrapper object yields the tag&#146;s state through <b>is_dynamic</b>.</li>
  <li>The wrapper also turns itself into to the original C structure.</li>
</ul>
<p> <a name="1_return"></a>Method #3 requires that you hide certain <b>C_wrapper</b> 
  members: 
<ul>
  <li> To disable <b>new</b> on <b>C_wrapper</b>, declare <b>operator new</b> 
    as private.</li>
  <li>To disable <b>delete</b> on <b>C_wrapper</b>, declare <b>operator delete</b> 
    as private. This also has the side effect of preventing <b>new</b> on <b>C_wrapper</b> 
    [<a href="#1">1</a>].</li>
  <li>To disable creation of automatic or static <b>C_wrapper</b> objects, declare 
    the <b>C_wrapper</b> constructor as private. Doing so will also disable <b>new</b> 
    on <b>C_wrapper</b> pointers. You may therefore want to abandon <b>new</b> 
    and write a custom function to create <b>C_wrapper</b> objects.</li>
  <li>Ditto, except you declare the <b>C_wrapper</b> destructor as private, can&#146;t 
    call <b>delete</b> on <b>C_wrapper</b> pointers, and need a custom way to 
    destroy <b>C_wrapper</b> objects.</li>
</ul>
<p> These are certainly not the only approaches; for example, by trafficking in 
  smart pointers or proxies instead of raw pointers, you could make the solution 
  much more robust. Still, these approaches are simple and should give you some 
  ideas for further development.
<p> One last comment: my general experience is that if you find yourself fighting 
  how the language semantics work, or are trying to divine meta-information beyond 
  what the type system provides, you may well have some underlying weakness in 
  your design. I&#146;m not saying that&#146;s necessarily true; for all I know, 
  what you want makes sense in your program. Still, you might want to step back 
  from your design and design assumptions and make sure that what you want truly 
  makes sense. 
<h3>Back to the Future</h3>
<p><b>Q. </b> <i>Hello Bobby,</i> 
<p><i> I am looking for a small example that ports a simple C++ non-virtual class 
  type to C. This is not a task I&#146;m wholly in favor of, but nevertheless 
  I must paint the barn blue, and I wish to paint it properly. I have a few thoughts 
  on the general approach, but I like to hear ideas from others who have transformed 
  C++ to C on large projects.</i> 
<p><i> Regards</i> 
<p> <i>&#151; Wanda Simoneaux</i> 
<p> 
<p> <b>A. </b> (In all of my comments below, &#147;C&#148; means &#147;C90.&#148;) 
<p> <a href="0303jl2.htm" target="_blank">Listing 2</a> shows a simple C++ program. 
  The class in that listing has these features: 
<ul>
  <li> A single private <b>int</b> data member.</li>
  <li>A combination conversion/default constructor that sets the data member and 
    increments a class-wide instance counter.</li>
  <li>A destructor that decrements the counter.</li>
  <li>A copy-assignment operator.</li>
  <li>A conversion operator yielding the private <b>int</b> value.</li>
  <li>A static member function returning the current instance count.</li>
</ul>
<p> <a href="0303jl3.htm" target="_blank">Listing 3</a> shows my elementary and 
  simplistic translation of <a href="0303jl2.htm" target="_blank">Listing 2</a> 
  into C. Some observations about that translation: 
<ul>
  <li> All C++ member functions map to global-scope C functions sharing the common 
    name prefix <b>X_</b>.</li>
  <li>Each instanced (or non-static) C++ member function maps to a C function 
    declaring an explicit <b>this</b> pointer as the first parameter. <b>const</b> 
    member functions map to C functions declaring <b>this</b> as <b>X const *const</b>, 
    while non-<b>const</b> members map to C functions declaring <b>this</b> as 
    <b>X *const</b>. This preserves the C++ behavior in C, by always preventing 
    changes to the <b>this</b> pointer itself, while selectively allowing or disallowing 
    changes through the pointer.</li>
  <li>The static C++ member function <b>count</b> has no <b>this</b> parameter.</li>
  <li>The instanced C++ private class member <b>value_</b> maps to a C <b>struct</b> 
    member of the same name. This name is not private in C and can be accessed 
    throughout the program. There are ways to better emulate a private instanced 
    member in C, but all the ones I know add source complexity, portability constraints, 
    or run-time overhead.</li>
  <li>The static C++ private member <b>count_</b> maps to a global-scope static 
    C variable of the same name. Because the C variable is static, it is effectively 
    &#147;private&#148; with respect to other translation units.</li>
  <li>You must manually remember to construct and destruct <b>X</b> objects. This 
    becomes especially cumbersome if you distribute the definitions of automatic 
    <b>X</b> objects throughout a function or have multiple return paths from 
    that function. It also precludes your C code from mimicking the behavior of 
    C++ global-scope <b>X</b> objects, since such objects are constructed and 
    initialized before <b>main</b> is entered and destructed after <b>main</b> 
    is exited.</li>
  <li>As C lacks default arguments, what was one constructor in C++ maps to two 
    construction functions in C.</li>
  <li>You could assign the C variables directly, as in <b>x1 = x2</b>, without 
    using the assignment function <b>X_assign</b>. But in more complex examples 
    &#151; especially those with pointer members &#151; you will need an assignment 
    function. In general, the simple built-in <b>=</b> operator will work in C 
    if and only if the compiler-synthesized assignment operator works in C++.</li>
  <li>The assignment function returns <b>void</b>, where the C++ assignment operator 
    returns the expected <b>X &amp;</b>. As C lacks references, the closest you 
    could come to the C++ behavior is to declare a return type of <b>C *</b> and 
    return <b>this</b>. That would allow awkward chaining such as <b>X_assign(&amp;x1, 
    X_assign(&amp;x2, &amp;x3))</b> if you really insist on an analogue of C++&#146;s 
    <b>x1 = x2 = x3</b>.</li>
</ul>
<p> <a name="2_return"></a>You specifically asked for a C++ example involving 
  no virtual functions. I&#146;m glad you did, for virtual functions &#151; let 
  alone inheritance in general &#151; complicates this simple model dramatically 
  [<a href="#2">2</a>]. 
<h3>What, Were, They, Thinking?</h3>
<p><b>Q. </b> <i>Bobby,</i> 
<p><i> I would always have thought that statements like:</i> 
<p> 
<pre>
if (a, b)</pre>
<p><i>or more simply:</i> 
<p> 
<pre>
if (7, 11)</pre>
<p><i>were blatant errors. The comma operator is not a logical operator. Is it? 
  That cannot be considered a logical statement. Can it?</i> 
<p><i> Well, I just lost a bet on it.</i> 
<p><i> The following is from the ISO C99 specification (6.5.17):</i> 
<blockquote> 
  <p> The left operand of a comma operator is evaluated as a <b>void</b> expression; 
    there is a sequence point after its evaluation. Then the right operand is 
    evaluated; the result has its type and value.</p>
  <p> ...</p>
  <p> [T]he comma operator... can be used within a parenthesized expression or 
    within the second expression of a conditional operator... In the function 
    call f(a, (t=3, t+2), c) the function has three arguments, the second of which 
    has the value 5. </p>
</blockquote>
<p> <i>So, in fact,</i> <b>if (7, 0)</b> <i>compiles as</i> <b>if (0)</b><i>, 
  and</i> <b>if (0, 11)</b> <i>compiles as</i> <b>if (11<i>)</i></b><i>. I tried 
  this, and my compiler seems to agree. But how has something so weird and unintuitive 
  made it into the Standard. Why?</i> 
<p> <i>&#151; Dan Watkins</i> 
<p><a name="3_return"></a> <b>A. </b> Note that while I specifically mention C 
  below, the same general analysis applies to C++ as well. 
<p> The comma operator, along with its two operands, forms an expression. And 
  like most C expressions, the comma expression has a type and value [<a href="#3">3</a>]. 
  But what type and value? What makes sense, independent of the language rules? 
<p> In the simple comma expression within:
<p> 
<pre>
(1, 2)</pre>
<p>I see two reasonable candidates for the expression&#146;s type: <b>int</b> 
  and <b>void</b>. Given your question, you apparently think the type should be 
  <b>void</b> so that the expression has no usable value in contexts such as:
<p> 
<pre>
if (1, 2)</pre>
<p>But that would also preclude:
<p> 
<pre>
int n = (1, 2);</pre>
<p>and:
<p> 
<pre>
double y = (f(x++), g(x));</pre>
<p>and:
<p> 
<pre>
return x &gt; 0 ? sin(x) :
    (x = -x, cos(x));</pre>
<p>Is this a reasonable limitation? 
<p> <a name="4_return"></a>I think not. I&#146;d argue that comma expressions 
  would have insufficient merit if they could only have type <b>void</b> and wouldn&#146;t 
  be worth their cost to the language [<a href="#4">4</a>]. If we allow comma 
  expressions to exist, I think we must allow them to have non-<b>void</b> type. 
<p> The question then becomes: which type should they have? In the earlier simple 
  example:
<p> 
<pre>
(1, 2)</pre>
<p>the answer seems to be <b>int</b>, as that is the type of the two operands. 
  But what about:
<p> 
<pre>
(1.0, 2)</pre>
<p>Should the type of the expression be <b>double</b>? <b>int</b>? If this were 
  an arithmetic expression instead of a comma expression:
<p> 
<pre>
(1.0 + 2)</pre>
<p>the <b>int</b> operand would convert to <b>double</b>. Should that rule apply 
  to comma expressions, so that:
<p> 
<pre>
(1.0, 2)</pre>
<p>has type <b>double</b>? Should the answer change for:
<p> 
<pre>
(1, 2.0)</pre>
<p>where the types are switched?
<p> Then consider:
<p> 
<pre>
char *cp;
int *ip;
(cp, ip)</pre>
<p>What&#146;s the type of the comma expression? In this case, the two operand 
  types have no standard conversion to one another. Does that mean the comma expression 
  should be disallowed?
<p> For a different take on this question, contemplate the extended sequence:
<p> 
<pre>
int f(int n)
    {
    return n;
    }

double g(double n)
    {
    return n;
    }

double h()
    {
    return
        (f(1), f(2), f(3), f(4), g(5));
    }</pre>
<p>What should the returned value be? I&#146;d say either <b>1</b> or <b>5.0</b>, 
  the first and last operand values of the comma expression. From a code generation 
  perspective, the net result would be:
<p> 
<pre>
f(1);
f(2);
f(3);
f(4);
return g(5);</pre>
<p>if the expression takes on the last operand value, and:
<p> 
<pre>
int temp = f(1);
f(2);
f(3);
f(4);
g(5);
return temp;</pre>
<p>if it takes on the first. The former interpretation is less expensive and thus 
  is more likely from an efficiency perspective.
<p> For an alternate perspective, consider the chained arithmetic expression:
<p> 
<pre>
return
    (f(1) + f(2) + f(3) + f(4) + g(5));</pre>
<p>where the only reasonable interpretation is that the return value cannot be 
  known until the last operand is evaluated. It seems consistent to me that in:
<p> 
<pre>
return (f(1), f(2), f(3), f(4), g(5));</pre>
<p>the return value also cannot be known until the last operand is evaluated. 
  This suggests that the expression&#146;s value is that of the final operand, 
  which further implies that the expression&#146;s type is that of the final operand 
  too.
<p> In summary, then, my sense of how comma operators and expressions ought to 
  work matches the language rules.
<p> Now I&#146;ll grant that the very existence of the comma operator is perhaps 
  &#147;weird and unintuitive,&#148; especially given the long-established use 
  of the comma as an argument/parameter separator in many languages. (Indeed, 
  I think I would have preferred the colon for this operator.) But once you accept 
  that the comma operator exists, I hope you&#146;ll agree that the rules make 
  some sense. 
<h3>Notes</h3>
<p><a name="1"></a>[1] What&#146;s that? How can hiding <b>operator delete</b> 
  prevent <b>new</b>? I leave that as an Exercise For The Reader.<br>
  [<a href="#1_return">return to text</a>] 
<p> <a name="2"></a>[2] Those who have used Microsoft&#146;s COM in C should nod 
  vigorously at this point.<br>
  [<a href="#2_return">return to text</a>] 
<p> <a name="3"></a>[3] The one exception comes if the expression type is <b>void</b>, 
  since <b>void</b> expressions have no value.<br>
  [<a href="#3_return">return to text</a>] 
<p> <a name="4"></a>[4] And yes there is cost, if only the confusion beginners 
  suffer distinguishing the comma operator from the comma in a function declaration 
  or function call.<br>
  [<a href="#4_return">return to text</a>] 
<h3>About the Author</h3>
<p>Although <b>Bobby Schmidt</b> makes most of his living as a writer and content 
  strategist for the Microsoft Developer Network (MSDN), he runs only Apple Macintoshes 
  at home. In previous career incarnations, Bobby has been a pool hall operator, 
  radio DJ, private investigator, and astronomer. You may summon him on the Internet 
  via <b><a href="mailto:BobbySchmidt@mac.com">BobbySchmidt@mac.com</a></b>. 
</BODY>
</HTML>
