<HTML>
<HEAD>
<TITLE>Instantiator: A (Mostly) Portable Framework for Separate Compilation of Templates</TITLE>
</HEAD><BODY>
<h2>Instantiator: A (Mostly) Portable Framework for Separate Compilation of Templates</h2>
<h3>By Eric Niebler</h3>
<P>Like many other diehard C++ fans, I was excited when I first heard about the 
  <B>export</B> keyword. Finally, I would be able to compile my templates separately! 
  I could move all my implementation details out of my headers and bury them out 
  of sight. My compiles would be faster, my header dependencies would be simplified, 
  and I could ship my templates as a library without the source code. I simply 
  had to wait for my favorite compiler vendor to implement this magic keyword, 
  and then all my template troubles would be gone. Then reality intruded. It was 
  Herb Sutter who dispelled my misconceptions in his series of <I>CUJ</I> articles 
  entitled, &#147;<B>Export</B> Restrictions.&#148;[1] <B>Export</B>, he explained, 
  is not the cure-all for which I had hoped. It doesn&#146;t greatly reduce dependencies, 
  make compiles significantly faster or let me ship templates without the sources. 
  It seemed like my template problems were here to stay.
<P>
It turns out that there is a way to achieve separate compilation of templates in a way that speeds up compiles and reduces dependencies. There are two ways, in fact. One way, <B>explicit instantiation</B>, comes with its own set of headaches. The other way is to use the Instantiator framework. Instantiator lets you put your template implementation into a separate compilation unit, giving you the benefits of <B>explicit instantiation</B> without its limitations.<P>
But first, a disclaimer: Instantiator is a great big hack. I freely acknowledge it. It relies on some rather implementation-defined behavior. However, I have verified that it works unmodified on three of the most compliant compilers I could find [2], and as hacks go, I&#146;ve found this one to be particularly useful. You may, too.
<h3> The Problem</h3>
<P>I had a mountain of string manipulation code. It searched strings, and sliced and diced them, and it was all template-based, handling <B>std::string</B> as easily as it handled <B>wchar_t*</B>. I was having a problem, though. Since it was all written using templates, I had to include the full implementation in order to use the code - all 6000 lines of it! It was killing my compile times. I reluctantly made the decision to move the implementation into a separate compilation unit and explicitly instantiate it, more or less as follows:<P>
<Pre>
template class foo&lt;string::iterator&gt;;
template class foo&lt;wstring::iterator&gt;;
template class foo&lt;char*&gt;;
template class foo&lt;wchar_t*&gt;;</pre>
<P>It didn&#146;t compile, and I learned my first hard lesson about <B>explicit instantiation</B>. It forces all member functions to be instantiated. Consider what happens if the <B>foo</B> template has a member like:<P>
<Pre>
template&lt;class Iter&gt;
class foo
{
public:
    int length( Iter iter )
    {
        return std::strlen( iter );
    }
};</pre>
<P>You&#146;ll notice that the <B>length()</B> member will only compile if <B>iter</B> happens to be implicitly convertible to <B>const char*</B>. That&#146;s not a problem, because members of class templates are only instantiated when they are used, right? Not so if you use <B>explicit instantiation</B>. When the compiler sees <B>template class foo&lt;wchar_t*&gt;</B>; it immediately tries to instantiate all of <B>foo</B>&#146;s members, including <B>length()</B>. It will make some noise about not being able to convert a <B>wchar_t*</B> to a <B>const char*</B> and then give up.<P>
If you want to use <B>explicit instantiation</B>, you have to be very careful that all your members compile successfully with all of your template parameters. This is not always possible, or even desirable. Some library developers intentionally write member functions that won&#146;t compile with certain template parameters to prevent people from using them incorrectly. This technique doesn&#146;t mix well with <B>explicit instantiation</B> [3].<P>
I grudgingly hacked up my code to make it instantiate correctly, and things worked, more or less. My template&#146;s implementation was compiled in a separate file and my compile times dropped dramatically. I was happy, until I tried to port my code. The new compiler was giving me a strange warning to the effect that it was illegal to explicitly instantiate a template twice with the same template parameters. After much head-scratching, I figured out it was complaining about this:<P>
<Pre>
template class foo&lt;string::iterator&gt;;
template class foo&lt;char*&gt;;</pre>
<P>On the new platform, <B>string::iterator</B> was a simple typedef for <B>char*</B>. On my old platform, it wasn&#146;t. The new compiler was warning me that I had stumbled into a restricted area. According to section 14.7/5 of the ISO/ANSI C++ standard, you can only explicitly instantiate a template once with a given set of parameters. You can see my dilemma as a template library developer &#151; how am I supposed to know if <B>string::iterator</B> is a simple typedef for <B>char*</B> on my users&#146; platforms?<P>
The more advanced template hackers out there may be thinking, &#147;I can tell if two types are the same with a simple compile-time type trait.&#148; But all of the template meta-programming in the world won&#146;t help you here. <B>Explicit instantiations</B> must appear at namespace scope, and you can&#146;t wrap a whole namespace in a template. This limitation is a double-whammy. Not only can you not use meta-programming to work around the double-instantiation problem, but you also can&#146;t use meta-programming to make <I>any</I> compile-time decisions about which types to instantiate. Ouch!
<h3> <B>The Solution &#151; Instantiator</B></h3>
<P>At this point, I&#146;m pretty much fed up with <B>explicit instantiation</B>. It&#146;s an unwieldy tool with artificial limitations. What I need is a way to move some members into a separate compilation unit and instantiate only those. And I don&#146;t want it to fall over if I accidentally instantiate on the same type twice. And I want to be able to use meta-programming to pick my instantiations at compile time. What I came up with is Instantiator. Here&#146;s how it works. First, in the header file, I declare my template as so:<P>
<Pre>
// foo.h
#include "instantiator.h"

template&lt;class T&gt;
class foo
{
public:
    foo() {}
    ~foo() {}
    int bar();
    int baz();
protected:
    DECLARE_INSTANTIATOR((
        &amp;foo::bar,
        &amp;foo::baz))
};</pre>
<P>The constructor and the destructor must be defined in the header, but everything else can be moved to an implementation file. I use the <B>DECLARE_INSTANTIATOR</B> macro to list the methods that I would like to be instantiated. When expanded, <B>DECLARE_INSTANTIATOR</B> becomes this:<P>
<Pre>
static instantiator instantiate()
{
    return instantiator_helper(
        &amp;foo::bar,
        &amp;foo::baz);
}</pre>
<P>And <B>instantiator</B> and <B>instantiator_helper()</B> are defined as follows:<P>
<Pre>
typedef int instantiator;

int instantiator_helper( ... )
{
    return 0;
}</pre>
<P>The basic idea is to create a method, <B>foo::instantiate()</B>, such that when it is instantiated, it causes the <I>implicit</I> instantiation of <B>foo::bar()</B> and <B>foo::baz()</B>. That is accomplished by taking the address of the members and passing them to the <B>instantiator_helper()</B> function. Here&#146;s the trick - <B>instantiator_helper()</B> is a <B>vararg</B> function. This serves two purposes. The obvious reason is so that it can accept an arbitrary number of parameters, allowing it to instantiate a bunch of members all at once. The trickier reason is to foil the compiler&#146;s optimizer, and here is where we get into the murky realm of implementation-defined behavior. Simply taking the address of a member isn&#146;t enough to instantiate it. The compiler may see that the resulting pointer is unused and decide to do nothing. But to most compilers, <B>vararg</B> functions are like the Great Wall of China. Its optimizer can&#146;t see past the &#147;...&#148; to tell whether the resulting pointer is used or not.[4] To be safe, it performs the implicit instantiation and tosses the address over the wall to <B>instantiator_helper()</B>, which simply ignores it.<P>
The implementation and instantiation look like this:<P>
<Pre>
// foo.cpp

template&lt;class T&gt;
int foo&lt;T&gt;::bar()
{  // do bar stuff
}

template&lt;class T&gt;
int foo&lt;T&gt;::baz()
{  // do baz stuff
}

namespace
{
typedef typelist&lt;int,long&gt; types;

instantiator foo_inst =
    instantiate&lt; foo, types &gt;();
}</pre>
<P>The <B>typelist</B> [5] called &#147;types&#148; contains the types on which I would like to instantiate <B>foo</B>. The <B>instantiate()</B> function takes <B>foo</B> and types as template parameters and does the instantiation for me. I don&#146;t really care what this function returns, but I have to assign it to something to keep my program well formed, so I assign to the dummy variable <B>foo_inst</B>.<P>
Conceptually, the <B>instantiate()</B> function is quite simple. For each type in the <B>typelist</B>, it invokes <B>foo&lt;type&gt;::instantiate()</B>, causing <B>bar()</B> and <B>baz()</B> to be instantiated with that template parameter. Since <B>typelists</B> are recursive data structures, <B>instantiate()</B> is implemented recursively. It calls <B>foo&lt;head&gt;::instantiate()</B> followed by a call to <B>instantiate&lt;foo,tail&gt;()</B>. Actually, <B>instantiate()</B> can&#146;t call <B>foo&lt;head&gt;::instantiate()</B> directly because it is protected. Instead, it uses a helper class, which inherits from <B>foo</B> to get access to the protected member.<P>
Already, Instantiator meets many of the goals I set out for it. I can use it to instantiate only the methods I specify, unlike <B>explicit instantiation</B>, which gives me all or nothing. And it doesn&#146;t matter if I instantiate multiple times with the same template parameters since the instantiation is implicit. Finally, the <B>instantiate()</B> function accepts a <B>typelist</B> containing the types on which to instantiate. Typelists can be manipulated at compile time, which means I can use my bag of meta-programming tricks to decide at compile-time on which types to instantiate.<P>
That&#146;s swell, but I feel compelled to tell you a dirty secret. Instantiator is non-standard, and not just because of the <B>vararg</B> trick. As Daveed Vandevoorde tells me, &#147;According to the letter of the standard, every non-exported template must be defined in every translation unit that contains a point of instantiation for that template.&#148; In English, that means that if you&#146;re not using <B>export</B>, you need to include the full implementation of your template in every file that uses it. With Instantiator, only one translation unit sees the actual implementation. All the others merely get the template&#146;s empty shell, and a vague promise that it will be filled in later. So does this concern me? Yes, but not too much. All the compilers and linkers I&#146;ve tested accept this code without a complaint. In fact, it&#146;s an artifact of the way modern compilers and linkers work. For the compiler, unresolved references are business as usual; it usually lets the linker worry about that. And linking object files is like a big game of Go Fish. If the linker sees an unresolved reference in one object file, it asks the other object files, &#147;I&#146;m looking for a <B>foo&lt;int&gt;::bar()</B>. Does anybody have one?&#148; If <B>foo.obj</B> has one, it&#146;s not likely to tell the linker to &#147;go fish&#148; just because its <B>foo&lt;int&gt;::bar()</B> was instantiated implicitly. It&#146;ll say, &#147;Sure, I got one. Here it is,&#148; and the linker will gladly accept it. The above description should be taken with a big grain of salt. The standard is silent about how compilers and linkers work together to build executables, and existing practice varies widely. I am not aware of any compiler/linker implementation that will catch this slight of hand.
<h3> Generalize, Generalize, Generalize!</h3>
<P>The Instantiator framework, as described so far, is pretty weak. It only works with templates that take one parameter. The publicly available version handles templates with up to 3 parameters. The trick is to provide overloads for the <B>instantiate()</B> function that handle class templates of different order. The unary version of <B>instantiate()</B> used in the example above has the following prototype:<P>
<Pre>
template&lt;
  template&lt;class&gt; class T,
  class TypeList&gt;
instantiator instantiate();</pre>
<P>Notice the use of the template template parameter T. It matches anything that is a class with one template parameter (e.g., <B>foo</B> in the example above). To handle templates with two template parameters, I provide the following overload:<P>
<Pre>
template&lt;
  template&lt;class,class&gt; class T,
  class TypeList1,
  class TypeList2&gt;
instantiator instantiate();</pre>
<P>It takes a class with two template parameters and it instantiates <B>T&lt; TypeList1::Head</B>, <B>TypeList2::Head &gt;</B>, and then recursively calls <B>instantiate&lt; T</B>, <B>TypeList1::Tail</B>, <B>TypeList2::Tail &gt;()</B>. You might prefer a version that instantiates every combination of types from the two typelists. There is a separate function called <B>combinatorial_instantiate()</B> that combines them. As an aside, you may be surprised to discover that you can have a set of overloaded functions, each of which take no arguments. Usually the compiler uses the arguments to do the overload resolution. In this case, since there are no arguments, the compiler must match the template parameters to choose the correct overload.<P>
Finally, there is the sticky problem of how to handle templates like <B>std::basic_string</B>. Consider <B>std::basic_string</B>&#146;s prototype:<P>
<Pre>
template&lt;
  class CH,
  class TR=char_traits&lt;CH&gt;,
  class AL=allocator&lt;CH&gt; &gt;
class basic_string;</pre>
<P>The second and third template parameters depend on the first template parameter. In general, the Nth template parameter can depend on any or all of the first N-1 template parameters. It would be nice to be able say &#147;<B>instantiate&lt; std::basic_string, typelist&lt;char,wchar_t&gt; &gt;</B>&#148; and have the compiler fill in the other template parameters for me based on their defaults, but this won&#146;t work. Instead, the Instantiator framework lets me instantiate templates like <B>basic_string</B> as follows:<P>
<Pre>
template&lt;class CH&gt;
struct default_char_traits
{
  typedef std::char_traits&lt;CH&gt;
    type;
};

template&lt;class CH,class TR&gt;
struct default_allocator
{
  typedef std::allocator&lt;CH&gt;
    type;
};

instantiator string_inst =
  instantiate&lt;
    std::basic_string,
    typelist&lt;char,wchar_t&gt;
    default_char_traits,
    default_allocator &gt; ();</pre>
<P>Before calling <B>instantiate()</B>, I define helper classes <B>default_char_traits</B> and <B>default_allocator</B>. These classes are used to generate the 2nd and 3rd template parameters from the first. Then I use the helper classes in my call to the <B>instantiate()</B> function. The Instantiator framework provides an overload of <B>instantiate()</B> to handle this situation. Its prototype looks like this:<P>
<Pre>
template&lt;
  template&lt;
    class,class,class&gt; class T,
  class TypeList1,
  template&lt;class&gt; class Tr1,
  template&lt;class,class&gt; class Tr2&gt;
instantiator instantiate();</pre>
<P>This ugly template mess takes a bit of explanation. The first template parameter accepts templates with 3 arguments, like <B>std::basic_string</B>. The second template parameter is an ordinary typelist. The third template parameter is another template template parameter. It accepts my <B>default_char_traits</B> helper class. Likewise, the fourth accepts my <B>default_allocator</B> helper class. In pseudo-code, <B>instantiate()</B> uses this information to create instantiations as follows:<P>
<Pre>
// Instantiate! (in pseudo-code)
typedef TypeList1::head  H1;
typedef Tr1&lt;H1&gt;::type    H2;
typedef Tr2&lt;H1,H2&gt;::type H3;
T&lt;H1,H2,H3&gt;::instantiate();
// Recurse!
typedef TypeList1::tail  Tail;
instantiate&lt;T,Tail,Tr1,Tr2&gt;();</pre>
<P>In this way, you can use the Instantiator framework to instantiate rather complicated template classes.
<h3> Summary</h3>
<P>It would be nice if <B>export</B> did all that I had hoped it would. And it would be nice if <B>explicit instantiation</B> were more flexible and accommodating. Perhaps in C++0x things will be different. But unfortunately, the language we have to work with today comes up a bit short in the area of separate template compilation. It is in this context that the Instantiator framework looks like an appealing stopgap. It provides a great deal of power and flexibility in creating template instantiations. Though not 100% portable, it falls into that category of hacks which are &#147;portable enough&#148; to be useful in the real world. I have successfully used Instantiator to improve compile times and reduce header dependencies in my projects. I hope you will, too.
<h3> Acknowledgements</h3>
<P>I would like to thank Rani Sharoni for his valuable feedback on early Instantiator designs, and Andrei Alexandrescu for his suggestions and encouragement. Finally, I would like to extend a hearty thanks to Daveed Vandevoorde for pointing out where Instantiator is non-standard, and for proofing an early draft of this article.
<h3> References and Notes</h3>
<P>[1]  Sutter, Herb. &#147;Export Restrictions,&#148; parts 1 and 2, <I>C/C++ Users Journal</I>, September / November 2002.<P>
[2]  The Instantiator framework has been tested on GCC 3.2, Microsoft Visual C++ .NET 2003, and Comeau 4.3.<P>
[3]  Rather than explicitly instantiate the whole class, you could explicitly instantiate each individual member function except those which don't compile. Although this could be made to work, it leads to an explosion of complex and repetitive code which is difficult to maintain. The Instantiator framework eliminates this complexity.<P>
[4]  Daveed Vandevoorde tells me that the HP aC++ compiler actually does see through the &#147;...&#148; in <B>vararg</B> functions at its highest optimization level. For such a clever compiler, a more sophisticated mechanism would be needed to flummox the optimizer.
<P> [5] For a discussion of typelists, see Andrei Alexandrescu&#146;s February 
  2002 <I>CUJ</I> C++ Experts&#146; Forum article, available online at www.cuj.com/documents/cujcexp2002alexandr/. 
  The code for Instantiator comes with a rudimentary typelist implementation.
<P>
<B>Eric Niebler</B> studied Computer Science at the University of Virginia. He spent several years in the Windows 2000 group at Microsoft before moving to a development position at Microsoft Research in the Natural Language Processing group. He is now a library developer in the Visual C++ group. His interestes include data structures and algorithms; compiler, language, and library design; data serialization and persistence; and pattern matching. He can be contacted at <B>ericne@microsoft.com</B>.
</BODY>
</HTML>
