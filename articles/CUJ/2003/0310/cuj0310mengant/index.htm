<HTML>
<HEAD>
<TITLE>A .NET Bridge to a Java Virtual Machine</TITLE>
</HEAD>
<BODY>
<h2>A .NET Bridge to a Java Virtual Machine</h2>
<h3>Jean-Yves Mengant</h3>

<P><a href="cuj0310mengant_s1.htm">.NET Tools Sidebar</a>
<P>Since its introduction in 1996, Java has proven a useful tool, filling a gap in the computer language market in terms of productivity and object orientation. After several years of working with it, the only defect I&#146;ve found is that if you start developing in Java, you&#146;re forced to keep developing in Java. Unless you work in low-level C or C++ through the Java Native Interface (JNI), interacting with the outside world in a different language becomes complicated. .NET&#146;s Common Language Runtime (CLR) simplifies the issue to a degree, but .NET provides no help when you need to develop or reuse complex Java code. To bridge the gap, I&#146;ve developed JavaBridge, a tool that allows you to use an existing Java component from a .NET environment<P>

<P>For C# purposes JavaBridge is a .NET package that will come into scope as soon as you provide a <B>using BridgeToJava</B> statement for your C# class. The JavaBridge package is compiled into VMLoader.DLL, which you must reference either by adding it to the Visual Studio references list (if you&#146;re compiling from Visual Studio IDE) or by specifying <B>/r:VMLoader.dll</B> on the <B>csc</B> C# compiler command line.<P>

<P>To illustrate the benefits and ease-of-use of JavaBridge, I&#146;ve provided a small C# example application, <B>cstester</B>. I&#146;ll look first at the example, then I&#146;ll examine the implementation details for JavaBridge.<P>

<h3>cstester: A C# Example</h3>
<P><b>cstester</b> accepts the name of a Java class as a command-line argument, then performs the following tasks:<P>

<ul>
  <li>Initializes a Java Virtual Machine (JVM)
  <li>Tries to load the provided Java class inside the JVM
  <li>Processes with an introspection of the Java class from the .NET environment
    <P> 
</ul>

<P>Note that introspection in Java has roughly the same meaning as reflection in .NET. It will list the available Java methods for the loaded class and make them available to the .NET side.<P>

<pre>
 using BridgeToJava ;
</pre>

<P>This instruction makes the JavaBridge classes and methods visible and usable from the C# scope.<P>

<pre>
JavaBridge bridge = new JavaBridge() ;
JavaTimer  timer  = new JavaTimer() ;
</pre>

<P>The call to the JavaBridge constructor initializes the JavaBridge environment. <B>JavaTimer</B>, a tiny, straightforward class used to measure time spent inside JavaBridge methods, is also initialized.<P>

<pre>
bridge.init
  ( "C:\\jdk1.2.2\\jre\\bin\\classic
    \\jvm.dll" , null ) ;
</pre>

<P><b>cstester</b> next calls the <B>init</B> method to load and initialize the JVM. The <B>init</B> method accepts two arguments: the location of the JVM DLL and an optional <B>ClassPath</B> which may be null. When not null this parameter contains a list of class locations following the same syntax as the standard Java <B>ClassPath</B> or <B>cp</B> string.<P>

<pre>
JavaClass javaClass = 
  bridge.loadClass(className) ;
</pre>

<P><B>cstester</B> then loads the class specified in argument 1 of the main <B>args</B> entry into the Java environment.<P>

<pre>
ArrayList methods = 
  javaClass.introspectMethods() ;
</pre>

<P>The loaded class methods are introspected and made available inside a .NET array list for later usage.<P>

<pre>
foreach ( JavaMethod method in methods )
{
  Console.WriteLine 
    ("method : {0} " , method.ToString() ) ;
}
</pre>

<P>Finally, <B>cstester</B> populates the introspected Java methods on the screen, using the Java-side <B>toString()</B> method call. <a href="cuj0310mengant_f1.htm">Figure 1</a> shows the resulting display on a standard Windows console.<P>

<P>This small example demonstrates how easy it is to instantiate a Java method from a .NET environment language (C#, VB, etc.). I&#146;ve kept the example simple, but JavaBridge places no limits on the Java methods you can call or the Java classes you can instantiate from the .NET side.<P>

<h3>Choosing a Language for the JavaBridge Implementation</h3>
<P>When using a .NET environment, you may use C#, J#, or even VB. All of these languages are potential candidates, since they all generate CLR intermediate representation.<P>

<P>However, for the current purpose, you&#146;ll need to link with the Java JVM through the JNI and generate a library that will contain both managed MSIL entries for net callers and standard flat-C-compliant entry points for non-managed legacy or JNI interfaces. This DLL object will be used by both legacy code and .NET managed C# loaders.<P>

<P>The need to build this type of complex library reduces the potential language candidates to one: C++ .NET. This is the only .NET language that is able to precisely target both managed and unmanaged code in the same library.<P>

<P>Once a project language is defined, there are additional tools that help when it comes to the building and debugging stages. See sidebar, &#147;.NET Tools.&#148;<P>

<h3>JavaBridge&#146;s VMLOADER.DLL</h3>
<P>The VMLOADER design is straightforward and consists of a JNI wrapping an unmanaged class (<B>VirtualJavaMachine</B>) and complementary .NET managed classes located inside the <B>BridgeToJava</B> package providing .NET access facilities to Java objects like <B>JavaClass</B>, <B>JavaMethod</B>, and <B>JavaString</B>.<P>

<P><B>VirtualJavaMachine</B> represents the <I>bridging pattern</I> classes used to interact between the .NET environment and the JVM environment. This class is unmanaged and deals with specific JVM actions like loading the JVM DLL or wrapping all used JNI functions. In order to provide a clean design, the unmanaged <B>VirtualJavaMachine</B> class is only manipulated behind the scenes by the managed <B>JavaBridge</B> class. <B>JavaBridge</B> is the initial class to instantiate in order to make a <B>JavaBridge</B> facility ready to use. The next <B>JavaBridge</B> instance is there to make pure Java objects visible to the .NET side.<P>

<P>The next step is to load the JVM you have chosen to use, which may be any JDK 1.2 compliant JVM for Windows (Sun, IBM, or BEA JVMs are freely available on the Internet). The <B>JavaBridge.init</B> method is provided to make the JVM environment ready to use. Finally the <B>JavaBridge</B> class will also be useful to initialize a given Java class using the <B>JavaBridge.loadClass</B> method, which takes the <B>ClassName</B> as a parameter and returns a .NET wrapping <B>JavaClass</B> instance ready to use.<P>

<P><B>JavaClass</B> provides the primary facilities for <B>JavaClass</B> access from the .NET environment. The class-loading step provides the previously described <B>JavaBridge</B> instance. Each used JVM <B>JavaClass</B> is mapped on the .NET side through a C++ Managed <B>JavaClass</B> instance.<P>

<P><B>JavaObject</B> provides class instantiation semantics using the JNI API. This class has two constructors:
<ul>
  <li> One constructor is built from a JNI <B>jclass</B> that will instantiate 
    an instance of the JVM peer class and call the Java constructor as well. Note: 
    The peer Java class <I>must have</I> a JavaBean style constructor provided 
    here (a constructor not expecting any parameters).</li>
  <li>The second constructor is built from a JNI <B>jobject</B> instance (i.e., 
    an existing Java object on JVM side).</li>
</ul>
<P>

<P><B>JavaMethod</B> is provided as a Java method object peer, which is used to call Java methods from the .NET side.<P>

<P><B>JavaString</B> inherits <B>JavaClass</B> and simply implements an interesting utility class that may be useful when conversion between the .NET string object instances and Java string object are necessary. The conversion method facilities are provided as a static method in order to avoid a <B>JavaString</B> object allocation when Java String/.NET String conversion is requested. The <B>JavaString</B> class also illustrates the privileged way of populating a given Java class to the .NET side: you need to implement your own C++ class inside your C++ namespace that inherits <B>JavaClass</B> from the <B>BridgeToJava</B> namespace. Other minor classes are also provided and used internally by the major classes described.<P>

<h3>Troubleshooting the #include &lt;jni.h&gt;</h3>
<P>The <B>#include &lt;jni.h&gt;</B> is used inside the <B>VirtualJvm.h</B> prototype. The <B>JVM</B> class is an unmanaged front-end wrapping class that is used for bridging between the Java Virtual Machine context and the .NET world. This class follows the very classical bridging pattern between two isolated environments:<P>

<ul>
  <li>The JVM is usually implemented under Windows, either by Sun, IBM or BEA 
    providers, through a collection of DLLs.
  <li>The .NET MS context looks very similar to the JVM design (equivalent IL 
    representation, garbage collecting facilities, bunches of provided and documented 
    classes....)
    <P> 
</ul>

<P>From a developer&#146;s standpoint, the JVM is obviously designed for operating system portability and suffers from a lack of cross language interoperability, whereas .NET is just the opposite: a very good cross-language environment design. I have some doubts on the operating system portability of the .NET system outside Windows and the market acceptance of .NET by the UNIX community. It will take some time before the .NET environment will have the same UNIX coverage as the Java environment today, although even GNU is trying to develop a free .NET implementation ... but that&#146;s another story.<P>

<P>The content of the <B>jni.h</B> prototype is perfectly acceptable at first sight, since it just provides a number of <B>Unmanaged</B> pointer types in order to help C++ compiler encapsulation. The fact that the prototype does not mention the .NET decorated Managed C++ keyword <B>__nogc</B>, used to declare an unmanaged type, does not hurt: this is the default assumed by the .NET C++ compiler for class declarations.<P>

<P>So the declares of class and pointers to class inside the <B>jni.h</B> prototype are all considered unmanaged when processed by the .NET C++ compiler, and that&#146;s what we expect. The problem comes with the following declares found inside the <B>jni.h</B> prototype:<P>

<pre>
struct _jfieldID;
typedef struct _jfieldID  *jfieldID;
struct _jmethodID;
typedef struct _jmethodID  *jmethodID;
</pre>

<P>At first sight the declare looks okay: <B>struct</B> should be considered as <B>Unmanaged</B> by default and the associated <B>typedef</B> as an unmanaged pointer to an unmanaged object. But when the <B>_jmethodID</B> comes into scope at runtime, the <B>TypeLoadException</B> shown in <a href="cuj0310mengant_f2.htm">Figure 2</a> is received inside the C# test program.<P>

<P>This indicates that the <B>_jmethodID struct</B> just confuses the system when it comes into scope. Even if we replace the <B>struct</B> declare by a <B>__nogc struct</B> (which should be the default when not specified) the exception still remains. The only workaround that I found to this problem was to replace the original SUN JNI declares with the following ones for C++ context:<P>

<pre>
class _metadata {};
class  _jfieldID : public _metadata {} ;
typedef _jfieldID  *jfieldID;
class _jmethodID : public _metadata {} ;
typedef _jmethodID  *jmethodID;
</pre>

<P>After I did that, my first question was why the JNI implementers did not provide it that way? Both ways of defining <B>jfield</B> and <B>jmethodID</B> as a Java <B>_metadata </B>context object are cleaner C++ wrapping implementations: since <B>jfield</B> and <B>jmethodID</B> pointers can&#146;t be manipulated outside the Java Virtual Machine, they should rather be considered as <B>_metadata </B>handles to be passed back and forth between JVM and JNI context instead.<P>

<P>I then tried using ILDASM on the generated <B>introspectMethods</B> code to compare when the generated IL works and when it doesn&#146;t: generated IL code production was the same in both cases. If you want to get through the problem, you must use the <B>jni.h</B>. I have modified or provide the same tiny modifications inside yours. To avoid confusion, I renamed my modified prototype into <B>jninet.h</B> and combined it with the other JavaBridge project prototypes files.<P>

<h3>Marshalling Strategy</h3>
<P>The main marshalling activity inside the VM loader will first consist of converting from managed callers&#146; .NET data types (C#, VB,....) into JVM JNI unmanaged front-end expected parameters. Again there are multiple ways of implementing the marshalling strategy using either marshalling .NET attributes or low-level Interop marshalling. I wrote a dedicated <B>Unmanaged</B> C++ class to deal with the marshalling activity from managed code to unmanaged Java VM entries.<P>

<P>This way of dealing with marshalling provides the following advantages over using standard marshalling attributes:<P>
<ul>
  <li>Wrapping marshalling inside a tiny custom class provides a better control 
    over the code when performance is a consideration.
  <li>Allocating an unmanaged C++ class on the C++ heap is cheap and fast.
  <li>Interop marshalling using intermediate object liberations is practical and 
    easy to implement inside the <B>marshaller</B> destructor method. 
</ul>

<P>The marshalling class is named <B>QuickMarshaller</B> and has been implemented inside the <B>marshaller.h</B> prototype of the project.<P>

<P>Here is a simple code snapshot showing usage of the <B>QuickMarshaller</B> class for calling an unmanaged Java <B>VmLoader</B> instance class.<P>

<pre>
  QuickMarshaller marshall(2) ;
    // Marshall for 2 parameters requested
    // Load Java VM of course inside 
    // Unmanaged space
    _pJvm-&gt;loadVM
      ( marshall.string2pChar(dllLocation) ,
        marshall.string2pChar(classPath) ) ;
        </pre>
        
<h3>Legacy C++ Not Dead</h3>

<P>My conclusion when I finished this tiny technical project was that I could not figure out how it would have been possible to encapsulate both worlds without C++ help. Both C# and Java were inadequate and will remain inadequate for this kind of task. Each time you&#146;re faced with tiny technical low-level projects, either C or C++ is the right answer, specifically for heterogeneous bridging. Next to this, Visual C++ encapsulation to the .NET framework is very impressive. The obvious cost is an increasing C++ syntax complexity, which reduces code readability when compared to either a C# or Java syntax. Finally, one of the biggest advantages of the .NET framework is really the language independence provided by the environment, which allows you to use the language you want for a given project.<P>

<h3>Java Legacy Code Access</h3>
<P>The main interest in using JavaBridge consists in the capacity of reducing the gap existing between two technologically similar environments that have not been naturally provided with interoperability tools.<P>

<P>Nevertheless, at some time you&#146;ll be faced with an existing Java JAR library, providing some functionality that you&#146;ll need, which is not available from .NET natively, and at that time you&#146;ll need bridging. Bridging facilities are nice to have since bridging also enhances a developer&#146;s freedom in choosing the best-suited language for a given project<P>

<h3>Code Limitations</h3>
<P>In order to keep the article simple to understand, not all of the functionalities that you may expect inside a full-featured bridge have been implemented in the provided code. All the basic fundamental tools are there, but you may need to add some extra features of your own.<P>

<h3>Performance Limitations</h3>
<P>Although the <B>JavaTimer</B> classes show that performances on the <B>cstester</B> sample are acceptable, they are not significant, since <B>cstester</B> is a tiny C# program. Due to JVM and .NET existing infrastructures, .NET to Java bridging will suffer the two following drawbacks:<P>

<ul>
  <li>Managed / Unmanaged call performances: Today all of the existing JVM&#146;s 
    are implemented using unmanaged DLLs. One interest in bridging consists in 
    providing Java class access from either C# or VB code, which implies providing 
    a Managed C++ class front-end. So, as much as possible, you must avoid using 
    JavaBridge access inside frequently used functions or loops.
  <li>Heap memory consumption: Both JVM and .NET context will use their own heap, 
    which is defaulted to 64Mb for the Java VM. This memory heap will be used 
    on both sides for garbage collecting. JVM and .NET have very similar designs 
    that imply that some system functionality will be redundantly maintained on 
    both sides, resulting in memory consumption overheads.
    <P> 
</ul>

<h3>Additional Reading</h3>
<b>.NET</b>
<ul>
  <li>Siva Challa and Artur Laksberg. <I>Essential Guide to Managed Extensions 
    for C++</I>, Apress 2002.
  <li>Jeffrey Richter. <I>Applied MS .NET Framework Programming</I>, MS Press 
    2002.
  <li>Tomas Restrepo. &#147;Visual C++ .NET: Tips and Tricks to Bolster Your Managed 
    C++ Code in Visual Studio .NET,&#148; <I>MSDN Magazine</I>, Feb 2002.
  <li>Stanley Lippman. &#147;Still in Love with C++: Modern Language Features 
    Enhance the Visual C++ .NET Compiler,<I>&#148; MSDN Magazine</I>, Feb 2002.
  <li>Chris Sells. &#147;Visual Studio .NET: Managed Extensions Bring .NET CLR 
    Support to C++,&#148; <I>MSDN Magazine</I>, July 2001.
  <li>John Gough, <I>Compiling for the .NET CLR</I>, Prentice Hall 2002.
    <P> 
</ul>
<P><B>Java</B>
<P>Listed below are the three references that I consider to be the fundamentals for a good understanding of both the Java language and the Java Virtual Machine architecture:<P>
<ul>
  <li>Bruce Eckel. <I>Thinking in Java</I>, Prentice Hall 2002.
  <li>Joshua Engel. <I>Programming for the Java Virtual Machine</I>, Addison Wesley 
    1999.
  <li>Sheng Liang. <I>The Java Native Interface Programmer&#146;s Guide and Specification</I>, 
    Addison Wesley 1999.
    <P> 
</ul>

<h3>Notes</h3>
<P>[1] &lt;<a href="http://www.sysinternal.com">www.sysinternal.com</a>&gt; 
<P>

<hr>
<i><B>Jean-Yves</B> Mengant has worked in the software industry since 1978. His 
interests include runtime libraries and middleware, and he spends much of his 
time crafting compiler tools in assembly, C, C++, Java, and Python. He is currently 
CTO of SEFAS, a french software company.</i></HTML>
