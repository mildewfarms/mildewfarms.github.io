<HTML>
<HEAD>
<TITLE>A .NET Bridge to a Java Virtual Machine</TITLE>
</HEAD>
<BODY>
<h3>.NET Tools</h3>

<P>The following tools will be helpful when building your JavaBridge project:<P>
<h3>The Good Old Timer: Dependency Walker</h3>

<P>Even when working with managed code, the dependency walker tool still has its place. The dependency walker provides useful information about public entry point conventions. For example, each time the Windows <B>GetProcAddress</B> fails somewhere in your code, I recommend you use dependency walker to check that the entry point convention you&#146;re expecting is the one that has been implemented inside the Callee&#146;s<B> DLL</B>. Dependency walker shows the provided entry point to <B>VMloader DLL</B> to pure old legacy unmanaged C code.<P>

<h3>New Famous Kid on the Block: ILDASM</h3>
<P>Usually <B>ILDASM</B> is introduced as a tool that has been provided to unassemble managed code. <B>ILDASM</B> will fail to load a pure old unmanaged DLL, indicating that the CLR header is missing. But a mixed mode DLL like the resulting <B>vmloader.dll</B> I built does contain a CLR header and is loadable by the <B>ILDASM</B> utility.<P>

<h3>Mark Russinovich&#146;s Free Process Explorer Tool</h3>
<P>When you need real-time information about which <B>dll</B> has been either loaded or unloaded and from which location, the process explorer tool is an invaluable resource [1]. This tool is useful for both the managed and unmanaged dll environment and provides a very interesting way of knowing what has been loaded into memory and where it comes from on the disk. 
</BODY>
</HTML>
