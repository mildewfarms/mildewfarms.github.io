<HTML>
<HEAD>
<TITLE>Non-Intrusive Container Initialization</TITLE>
</HEAD><BODY>
<h2>Non-Intrusive Container Initialization</h2>
<h3>Thorsten Ottosen</h3>



<h3>Introduction</h3>
<P>It is often necessary to initialize data structures with constant data, and C++ is not by default as elegant as other languages in this respect. For example, in Perl one can say<P>

<pre>
@date = (8, 24, 70);
%fruit = ('apples', 3, 'oranges', 6);
</pre>

<P>to assign to an array or map, respectively. The array syntax is almost identical in C++, but since built-in arrays are not particularly handy, one will usually stuff data into an STL container [1].<P>

<P>Without library support, the best way to fill a container with constant data is to use an array and then use a constructor that takes an iterator range:<P>

<pre>
int ai[] = {1,2,3};
vector&lt;int&gt; v( ai, end( ai ) );
typedef pair&lt;string, int&gt; P;
P ap[] = { P("horse",1),
           P("cow",2) };
map&lt;string,int&gt; m( ap, end( ap ) );
</pre>

<P>where <B>end</B> is a user-supplied macro that returns a pointer one past the end of the array. The technique is a little more clumsy when we deal with initialization of a map. The goal of this article is to show how you can get this syntax instead:<P>

<pre>
vector&lt;int&gt; v;
v += 1,2,3;
map&lt;string,int&gt; m;
assign( m ) ("horse",1) ("cow",2);
</pre>

<P>by overloading <B>operator+=</B>, <B>operator,</B>, and <B>operator()</B>. It would have been nice to be able to use <B>operator+=</B> for maps, but that would remove the ability to use <B>operator()</B>. It might not seem like a big win, but initialization parts of our programs will be smaller and easier to maintain. The method is not just for STL containers, and I will show how easy it is to fit your favorite container into the framework. (Notice that technically this new syntax is not initialization in its strict meaning of construction; it simply means the initial setup of a container that must take place before the container is used.)<P>

<h3>What is Wrong with Array-Initialization?</h3>
<P>The goal of this framework is to provide the easiest and safest way to initialization in C++. Run-time overhead is not a great concern, but for most node-based containers, the two methods will give similar results anyway. To make array initialization a little handier I used <B>end</B> which could be a simple macro<P>

<pre>
#define end( a ) \
a + sizeof(a)/sizeof(a[0])
</pre>

<P>A better approach would be to use the <B>end</B> function that comes with <B>array_traits</B> in Boost [2]. The <B>array_traits</B> is safer because it is type-safe and avoids pitfalls with pointers to arrays (which can give false results). The clever <B>array_traits</B> template can deduce the size of the array and hence its end; unfortunately, the compiler must support class template partial specialization. (Have you ever thought that this must be the single most irritating missing compiler feature ever?) As a result, <B>array_traits</B> cannot be coded 100% portably, yet.<P>

<P>Another problem with array initialization is that it requires the container to have an iterator range constructor, which we cannot expect from all containers. If you do not have access to the source code, you cannot even provide such a constructor yourself, and therefore a non-intrusive solution is more attractive.<P>

<h3>Implementation Overview</h3>
<P>When the code<P>

<pre>
v += 1,2,3;
</pre>

<P>executes, the following takes place:<P>
<ol>
  <li><B>operator+=</B> returns an assigner object;
  <li>the <B>assigner</B> object overloads <B>operator,</B> which is called;
  <li><B>operator,</B> calls a free-standing function which stuffs the value into 
    the container.
    <P> 
</ol>

<P><B>operator+=</B> has been overloaded as shown in <a href="cuj0310ottosen_l1.htm">Listing 1</a>. The first argument is the container and the second argument is the first value to insert into the container. Note that the second argument is specified as <B>const typename C::value_type&amp;</B>, which means you can only use containers with this <B>typedef</B>. I could have relied on a small trait class that defined the <B>value_type</B> of the container, but that would inevitably lead to class template partial specialization, which is hard to make portable. Moreover, from a client&#146;s perspective, there is little difference between specializing a trait class and overloading a function.<P>

<P><B>operator+=</B> then returns an <B>assigner&lt;C&gt;</B> object that is responsible for appending all remaining values in the comma-separated list. The <B>assigner</B> class is shown in <a href="cuj0310ottosen_l2.htm">Listing 2</a>; it stores a reference to the container and uses <B>operator,</B> to delegate insertion to the free-standing <B>insert</B>. Moreover, <B>operator,</B> returns a reference to <B>this</B> to allow chaining. Notice again that I use a second template argument instead of a trait class.<P>

<P>The actual forwarding to a container member function is done by a free-standing function (as opposed to a functor) because I can then use function template overloading instead of class template partial specialization to forward to the correct member function. <a href="cuj0310ottosen_l3.htm">Listing 3</a> shows the default <B>insert</B> function, which will work with all STL containers except container adapters [3]. Here I have used a second template parameter <B>V</B> to avoid hard-coding <B>typedef</B> information.<P>

<P>So far I have passed all non-mutable arguments as <B>const</B> references. You might think for built-in types that copying would be cheaper. I could have used Boost&#146;s <B>call_traits</B> to define &#147;optimal&#148; parameter passing [4]. However, almost all code will be inlined and optimized away, and I could not measure any difference, so it is best not to include the extra header. (<B>call_traits</B> can still be important when dealing with loops and the reference-to-reference problem; this is not the case here.)<P>

<h3>Stuffing Pairs into Containers</h3>
<P>When I stuff pairs of something into a container (for example, a map or a vector of pairs), I could just do it like this:<P>

<pre>
typedef pair&lt;int,int&gt; P;
c += P(1,2), P(2,3);
</pre>

<P>Originally I had even imagined this syntax:

<pre>
c += 1,2,  2,3;
</pre>

<P>but this syntax is not safe in the sense that it is hard to see what is mapped to (or paired with) what; the outcome could be that I forgot a value. Even though such a missing value can be detected the first time the code runs, it could be a problem if some piece of code has not been tested and therefore a compile-time error would be preferable (notice that the former syntax correctly prohibits this error). After discussing the problem on the Boost developer mailing list, a new syntax was suggested that delivers compile-time safety and improves the calling syntax so you do not have to use a pair <B>typedef</B>:<P>

<pre>
assign( c ) (1,2) (2,3);
</pre>

<P>The statement is simply an assignment of a list of pairs to the container <B>c</B>. At first the syntax might seem a little unnatural, but it is quite easy to get acquainted with it. <B>assign</B> returns an <B>assigner&lt;C&gt;</B> object like <B>operator+=;</B> In Listing 2 you can see how <B>operator()</B> is implemented; it is worth noticing that I forward to the same <B>insert</B> function as before. The operator has again been implemented as a template to minimize requirements on the container type; if I instead had relied on <B>typedefs</B> in the container, it would not have been possible to use <B>assign</B> with a <B>vector</B> of pairs (for example, there is no <B>key_type typedef</B> in <B>vector</B>).<P>

<P>Although the original intention was to stuff pairs into maps, the code also makes it easier to put any class with a two-argument constructor into, e.g., a <B>vector</B> since we do not need to mention the class or use a shorter <B>typedef</B>. (And providing support for constructors with more arguments is trivial.)<P>

<h3>Extending the Framework</h3>
<P>Enabling the syntax for a new container takes one or two steps. If the container does not define <B>value_type</B>, one must first overload <B>operator+=</B> and/or <B>assign</B> to provide the right types for the assigner class. Second, overload <B>insert</B> for the container. By using function template overloading, one relies on partial ordering of function templates to choose the right version. As an example, <a href="cuj0310ottosen_l4.htm">Listing 4</a> shows overloading for stacks. When implementing the overloaded function, it is important to specify as many template arguments as the container can take; if I had only specified <B>V</B>, then the function would only match stacks that use the default second template argument.<P>

<P>There is a little caveat to this extension mechanism: some compilers do not even handle partial ordering of function templates properly, and the biggest problem I had was the Microsoft compilers. However, by removing the default template function and implementing overloads for all supported containers, I was able to get the code to work (in general not a very comfortable solution).<P>

<P>Another problem with the extension is that I have to include headers in generic code; for example, the overload for stacks requires inclusion of the <B>&lt;stack&gt;</B> header. This is a problem because a substantial amount of compile-time is simply parsing of headers, and pre-compiled headers can easily be so large that the hard disk becomes a bottleneck to compilation [5].<P>

<h3>Throw Headers Away!</h3>

<P>It is actually possible to remove all inclusion of headers by using a scheme that can be described as intrusive tagging, but unfortunately, I could only compile it with the Comeau compiler. The &#147;substitution failure is not an error&#148; (SFINAE) concept is a language feature whose intended use is to facilitate function template argument deduction [6]. In short, SFINAE means that a C++ compiler can attempt instantiations of overloaded function templates that fails on one or more of them provided that a correct match is found. Consider the overloaded version of <B>insert</B> in <a href="cuj0310ottosen_l5.htm">Listing 5</a>. Here I have exploited the fact that container adapters have a special <B>typedef container_type</B>. If <B>A</B> is a normal container, this version of <B>insert</B> cannot be instantiated, but due to SFINAE, the compiler just chooses the default version of <B>insert</B>. However, when <B>A</B> is a container adapter, both versions are instantiated; the compiler sees the new version as more specialized than the default and hence the new version is chosen [7]. Although this example is a bit pathological (since it relies on <B>container_type</B> to be special to adapters), a library designed from the ground up could make unique <B>typedefs</B> in all classes; this would enable algorithms to overload for different types without seeing the definition of the classes. Pretty cool, eh? (I reckon that forward declarations and partially specialized traits classes would give similar results, but with a lot more work.)<P>

<h3>Discussion</h3>
<P>The idea of an initialization library is not new and one could imagine other ways to achieve similar results. Leor Zolman&#146;s STL Container Initialization Library initializes containers by extracting values from strings. The caveat with this technique is mainly type-safety.<P>

<P>During the discussion on the Boost developer mailing list, a scheme that provided true initialization via special initialization iterators was shown. However, if you need direct initialization to construct, for example, a static member, you can simply implement a function that returns the desired container.<P>

<P>Overloading <B>operator,</B> is sometimes viewed as a bad practice [8], but the approach I take is safe; the approach has been used with success in the Generative Matrix Computation Library and Blitz to initialize matrices [9], [10]. With little effort, I have extended the framework to stuff values into fixed-sized containers like matrices.<P>

<h3>Acknowledgments</h3>
<P>Thanks to Leor Zolman, Pavol Droba and the people at the Boost developer mailing list for feedback.<P>

<h3>References</h3>
<P>[1]  The boost array class does make arrays a lot more convenient. See &lt;<a href="http://www.boost.org/libs/array/index.htm">http://www.boost.org/libs/array/index.htm</a>&gt;.<P>
<P>[2]  Download the boost sandbox CVS repository to get the header.<P>
<P>[3]  Thanks to Peter Dimov for pointing out this more generic forwarding; to begin with I naively specialized <B>insert</B> for several containers which required unnecessary inclusion of several headers.<P>
<P>[4]  See &lt;<a href="http://www.boost.org/libs/utility/call_traits.htm">http://www.boost.org/libs/utility/call_traits.htm</a>&gt;<P>
<P>[5]  &lt;<a href="http://osl.iu.edu/~tveldhui/papers/techniques/">http://osl.iu.edu/~tveldhui/papers/techniques/</a>&gt;. I know the standard committee is considering a new header called <B>&lt;std&gt; </B>which would simply include all headers. This would make the standard library much easier to use and it would allow for an efficient use of precompiled headers. The downside to such a header would be its use with compilers that do not support precompiled headers.<P>
<P>[6]  Steve Dewhurst&#146;s Once, Weakly. November 24, 2002 article: &#147;SFINAE Sono Buoni,&#148; downloadable from &lt;<a href="http://www.semantics.org/">http://www.semantics.org/</a>&gt;.<P>
<P>[7]  To be perfectly honest, I tried looking in the standard to get an explanation of why the new version is more specialized, but as Stroustrup once said &#147;the standard is unreadable&#148; &#151; at least a little bit. For the interested, Graeme Prentice gave an explanation on comp.std.c++ (search google groups for &#147;function template specialization deduction&#148;).<P>
<P>[8]  Scott Meyers, <I>More Effective C++</I>, Item 7, Addison Wesley, 1996.<P>
<P>[9]  K. Czarnecki and U.W. Eisenecker, <I>Generative Programming</I>, Addison-Wesley, 2000.<P>
<P>[10]  &lt;<a href="http://www.oonumerics.org/blitz/">http://www.oonumerics.org/blitz/</a>&gt; <P>

<hr>
<i><B>Thorsten Ottosen</B> holds a Bsc in Computing Science from Aalborg University, 
Denmark. He is currently writing a major in Computer Graphics and is a co-owner 
and part-time employee of Dezide (&lt;<a href="http://www.dezide.com">www.dezide.com</a>&gt;), 
a company which specializes in trouble-shooting programs based on Bayesian-network 
technology. He can be reached at <a href="mailto:thorsten.ottosen@dezide.com">thorsten.ottosen@dezide.com</a> 
or <a href="mailto:nesotto@cs.auc.dk">nesotto@cs.auc.dk</a>.</i></HTML>
