<HTML>
<HEAD>
<TITLE>Non-Intrusive Container Initialization</TITLE>
</HEAD><BODY>
<h4>Listing 2: The assigner class </h4>
<Pre>
template&lt; typename C, typename V = typename C::value_type &gt; 
class assigner
{
public:
    typedef V  value_type;
    explicit assigner( C&amp; c ) : c_( c ) {}
    
    explicit assigner( C&amp; c, const value_type&amp; v ) : c_( c )
    {
        insert( c_, v );
    }

    assigner&amp; operator,( const value_type&amp; v )
    {
        insert( c_, v );
        return *this;
    }

    template&lt; typename T, typename T2 &gt;
    assigner&amp; operator()( const T&amp; t, const T2&amp; t2 )
    {
       insert( c_, value_type( t, t2 ) );
       return *this;
    }

private:

    assigner&amp; operator=( const assigner&amp; );
    C&amp; c_;
};<B>
</b>&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
