<HTML>
<HEAD>
<TITLE>Starting Threads in a C++ Compatible Fashion</TITLE>
</HEAD><BODY>
<h4>Listing 1: The technique </h4>
<Pre>
#include &lt;pthread.h&gt;

struct Thread {
    Thread (const pthread_t &amp;pt) :  pt (pt) {};
    void join () { pthread_join (pt, 0); };    
  private:
    pthread_t pt;
};


struct FunData {
    typedef void * (*ThreadEntryPoint) (void *);
    FunData (const ThreadEntryPoint tep) 
                           : thread_entry_point (tep) {};
    ThreadEntryPoint thread_entry_point;
};


template &lt;typename Arg1&gt;
class FunWrapper1 {
    struct Data : public FunData {
      typedef void (*FunPtr) (Arg1);
      Data (FunPtr fun_ptr, Arg1   arg1)
              : FunData (&amp;Data::thread_entry_point),
                fun_ptr (fun_ptr),
                arg1 (arg1)  {};
        private:
      FunPtr fun_ptr;
      Arg1   arg1;
      static void * thread_entry_point (void *arg);
    };
    
  public:
    typedef void (*FunPtr) (Arg1);

    FunWrapper1 (FunPtr fun_ptr) : fun_ptr(fun_ptr) {};

    Thread operator() (Arg1 arg1) {
      Data data(fun_ptr, arg1);
      return do_spawn (data);
    };
    
  private:
    FunPtr fun_ptr;
};


template &lt;typename Arg1&gt;
void * FunWrapper1&lt;Arg1&gt;::Data::thread_entry_point (void *arg) {
  const Data *data = reinterpret_cast&lt;const Data*&gt; (arg);
  (*data-&gt;fun_ptr)(data-&gt;arg1);
  return 0;
}

    
Thread do_spawn (const FunData &amp;data) {
  pthread_t pt;
  pthread_create (&amp;pt, 0, *data.thread_entry_point, 
                  (void *)&amp;data);
  return pt;
}


template &lt;typename Arg1&gt;
FunWrapper1&lt;Arg1&gt; spawn (void (*fun_ptr)(Arg1)) {
  return FunWrapper1&lt;Arg1&gt;(fun_ptr);
}
&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
