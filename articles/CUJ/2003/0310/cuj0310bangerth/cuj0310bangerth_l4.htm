<HTML>
<HEAD>
<TITLE>Starting Threads in a C++ Compatible Fashion</TITLE>
</HEAD><BODY>
<h4>Listing 4: Wrapping more arguments </h4>
<Pre>
template &lt;typename Arg1, typename Arg2&gt;
class FunWrapper2 {
    struct Data : public FunData {
      typedef void (*FunPtr) (Arg1, Arg2);
      Data (FunPtr fun_ptr, Arg1 arg1, Arg2 arg2)  
              : FunData (&amp;Data::thread_entry_point),
                fun_ptr (fun_ptr),
                arg1 (arg1), arg2(arg2)  {};
        private:
      FunPtr fun_ptr;
      Arg1   arg1;
      Arg2   arg2;
      static void * thread_entry_point (void *arg);
    };
    
  public:
    typedef void (*FunPtr) (Arg1, Arg2);

    FunWrapper2 (FunPtr fun_ptr) : fun_ptr(fun_ptr) {};

    Thread operator() (Arg1 arg1, Arg2 arg2) {
      Data data(fun_ptr, arg1, arg2);
      Thread t = do_spawn (data);
      data.lock.acquire ();
      return t;
    };
    
  private:
    FunPtr fun_ptr;
};


template &lt;typename Arg1, typename Arg2&gt;
void * 
FunWrapper2&lt;Arg1,Arg2&gt;::Data::thread_entry_point (void *arg)  {
  const Data *fun_data = reinterpret_cast&lt;const Data*&gt; (arg);
  FunPtr fun_ptr = fun_data-&gt;fun_ptr;
  Arg1   arg1    = fun_data-&gt;arg1;
  Arg2   arg2    = fun_data-&gt;arg2;

  fun_data-&gt;lock.release ();

  (*fun_ptr)(arg1, arg2);
  
  return 0;
}


template &lt;typename Arg1, typename Arg2&gt;
FunWrapper2&lt;Arg1,Arg2&gt; spawn (void (*fun_ptr)(Arg1, Arg2)) {
  return FunWrapper2&lt;Arg1,Arg2&gt;(fun_ptr);
}
<B>
</b>&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
