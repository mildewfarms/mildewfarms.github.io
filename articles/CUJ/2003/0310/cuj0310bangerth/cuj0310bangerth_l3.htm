<HTML>
<HEAD>
<TITLE>Starting Threads in a C++ Compatible Fashion</TITLE>
</HEAD><BODY>
<h4>Listing 3: Adding a mutex to FunData to synchronize thread creation </h4>
<Pre>
class Mutex {
  public:
    Mutex ()        { pthread_mutex_init (&amp;mutex, 0); };
    ~Mutex ()       { pthread_mutex_destroy (&amp;mutex); };
    void acquire () { pthread_mutex_lock(&amp;mutex); };
    void release () { pthread_mutex_unlock(&amp;mutex); };
  private:
    pthread_mutex_t mutex;
};

struct FunData {
    typedef void * (*ThreadEntryPoint) (void *);

    FunData (const ThreadEntryPoint tep)
            : thread_entry_point (tep)
      { lock.acquire (); };
    
    mutable Mutex lock;    
    ThreadEntryPoint thread_entry_point;
};


template &lt;typename Arg1&gt; class FunWrapper1 {
                                     // ...
    Thread operator() (Arg1 arg1) {
      Data data(fun_ptr, arg1);
      Thread t = do_spawn (data);
      data.lock.acquire ();
      return t;
    };
};


template &lt;typename Arg1&gt;
void * FunWrapper1&lt;Arg1&gt;::Data::thread_entry_point (void *arg) {
  const Data *fun_data = reinterpret_cast&lt;const Data*&gt; (arg);
  FunPtr fun_ptr = fun_data-&gt;fun_ptr;
  Arg1   arg1    = fun_data-&gt;arg1;

  fun_data-&gt;lock.release ();

  (*fun_ptr)(arg1);
  
  return 0;
}
<B>
</b>&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
