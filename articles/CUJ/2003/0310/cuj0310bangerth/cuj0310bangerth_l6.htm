<HTML>
<HEAD>
<TITLE>Starting Threads in a C++ Compatible Fashion</TITLE>
</HEAD><BODY>
<h4>Listing 6: Unary member functions </h4>
<Pre>
template &lt;class C, class Arg1&gt; struct MemFunPtr1 {
    typedef void (C::*type) (Arg1);
};

template &lt;class C, class Arg1&gt; struct MemFunPtr1&lt;const C, Arg1&gt; {
    typedef void (C::*type) (Arg1) const;
};


template &lt;typename C, typename Arg1&gt;
class MemFunWrapper1 {
    struct Data : public FunData {
      typedef typename MemFunPtr1&lt;C,Arg1&gt;::type FunPtr;
      Data (FunPtr fun_ptr, C &amp;c, Arg1 arg1)
              : FunData (&amp;Data::thread_entry_point),
                c (c),
                fun_ptr (fun_ptr),
                arg1 (arg1)  {};
        private:
      C     &amp;c;
      FunPtr fun_ptr;
      Arg1   arg1;
      static void * thread_entry_point (void *arg);
    };
    
  public:
    typedef typename MemFunPtr1&lt;C,Arg1&gt;::type FunPtr;

    MemFunWrapper1 (C &amp;c, FunPtr fun_ptr) 
                           : c(c), fun_ptr(fun_ptr) {};

    Thread operator() (Arg1 arg1) {
      Data data(fun_ptr, c, arg1);
      Thread t = do_spawn (data);
      data.lock.acquire ();
      return t;
    };
    
  private:
    C     &amp;c;
    FunPtr fun_ptr;
};


template &lt;typename C, typename Arg1&gt;
void * 
MemFunWrapper1&lt;C,Arg1&gt;::Data::thread_entry_point (void *arg) {
  const Data *fun_data = reinterpret_cast&lt;const Data*&gt; (arg);
  FunPtr fun_ptr = fun_data-&gt;fun_ptr;
  C     &amp;c       = fun_data-&gt;c;
  Arg1   arg1    = fun_data-&gt;arg1;

  fun_data-&gt;lock.release ();

  (c.*fun_ptr)(arg1);
  
  return 0;
}


template &lt;typename C, typename Arg1&gt;
MemFunWrapper1&lt;C,Arg1&gt;
spawn (C &amp;c, void (C::*fun_ptr)(Arg1)) {
  return MemFunWrapper1&lt;C,Arg1&gt;(c,fun_ptr);
}

template &lt;typename C, typename Arg1&gt;
MemFunWrapper1&lt;const C,Arg1&gt;
spawn (const C &amp;c, void (C::*fun_ptr)(Arg1) const) {
  return MemFunWrapper1&lt;const C,Arg1&gt;(c,fun_ptr);
}


<B>
</b>&#151; End of Listing &#151;</pre>
</BODY>
</HTML>
