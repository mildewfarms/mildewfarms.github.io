<HTML>
<HEAD>
<TITLE>BuildConfig: Making Build Configuration Information Available at Runtime</TITLE>
</HEAD>
<BODY>

<h2>BuildConfig: Making Build Configuration Information Available at Runtime</h2>
<h3>Drew Hall</h3>


<P>Modern software projects often consist of tens or hundreds of source files and are created and maintained simultaneously by numerous programmers. With the recent blossoming of the open-source movement, an unbounded, geographically diverse set of developers is rapidly becoming the norm. In such environments, tight coordination is needed to guarantee that the source tree seen by each developer or customer is consistent. Thankfully, configuration management tools such as Concurrent Versions System (CVS), Revision Control System (RCS), SourceSafe, and PVCS, do a good job of automating the tedious task of software versioning.<P>

<P>Unfortunately, when a program is compiled and linked from its source files, all records of the source code configuration that went into the build are generally lost. For strongly-versioned software (think shrink-wrap), this is usually not a problem&#151;a bug report from release 3.0 of a product points to a very specific snapshot of the source tree. However, a significant amount of software is developed under less structured release cycles; those who create custom software for a few clients or use rapid-prototyping or Extreme Programming development practices may have some difficulty determining the exact build configuration that resulted in a particular bug.<P>

<P>I created the <B>BuildConfig</B> versioning library after being repeatedly faced with this problem. The premise of the library is fairly simple&#151;make a description of the build configuration available to the program at runtime, so that the exact configuration can be easily recreated when the need presents itself. A common use of the library is to have the program dump a text file containing this information at startup time (perhaps toggled by a command-line switch). When the maintenance programmer needs to reproduce a reported bug, he can simply use this output file to get the relevant versions of each file from his source control tool.<P>

<h3>Using BuildConfig</h3>
<P>BuildConfig was designed to be as unobtrusive as possible. Although it is necessary to add something to each source (and header) file to enable the <B>BuildConfig</B> capability, I was able to keep it down to a manageable two lines. In the file <B>foo.cpp</B>, we would add the following at file scope:<P>

<pre>
#include &lt;BuildConfig.h&gt;
FILE_VERSION(&#147;$Revision:   $&#148;, foo_cpp);
</pre>

<P>Although these lines look somewhat cryptic, they are easy to explain. In the first line, we include the library header file to make its capabilities available. Then, we use the <B>FILE_VERSION</B> macro to enable the configuration tracking capability.<P>

<P>In an ideal world, the arguments to the <B>FILE_VERSION</B> macro would be unnecessary, so it is worth understanding what purpose they serve. Although it may not look like much, the <B>$Revision: $</B> string serves as a gateway to the programmer&#146;s configuration management software. Through a capability known as keyword substitution (or keyword replacement), most source control systems will dutifully replace this string with something like <B>$Revision: 1.0 $</B> when the file is first checked in and automatically update the string on each subsequent check-in. Fortuitously, almost all modern source control systems (notably, RCS, CVS, SourceSafe, and PVCS) support this capability using the same syntax that RCS introduced several years ago. Similar capabilities are likely to be available in other source control systems, so check your user manual if your system is not mentioned above.<P>

<P>The second argument serves a less glamorous purpose and is essentially an artifact of the underlying machinery. The <B>FILE_VERSION</B> macro expands into a static construction of a <B>VersionStamp</B> object (see <a href="cuj0310hall_l1.htm">Listing 1</a>) that stores the file name, build time, date, and version number of the file. The <B>foo_cpp</B> argument is simply used to guarantee that this object has a unique name. I would love to find a way to do this automatically, but a better solution has eluded me thus far [2]. The standard trick of appending the line number to a fixed string will fail if you include several header files that all call the macro on the same local line.<P>

<P>By adding the above two lines (and modifying the <B>foo_cpp</B> parameter as necessary) to all source files in the project, we have successfully embedded configuration information in our executable code. But how can we harvest that information at runtime? This task falls to the <B>BuildConfiguration</B> class (<a href="cuj0310hall_l2.htm">Listing 2</a>), a singleton [3] class that collects all the version information in a single place and makes it available through two useful interfaces. To dump all version information to the standard output stream, we would do the following:<P>

<pre>
#include &lt;BuildConfig.h&gt;
#include &lt;iostream&gt;
// Your header files omitted ...

int main()
{
  BuildConfiguration::Instance().Output(std::cout);
    
  // Rest of program follows
}
</pre>

<P><a href="cuj0310hall_f1.htm">Figure 1</a> shows some example output from the <B>Output()</B> function. The <B>BuildConfiguration</B> class also provides an iterator interface that you might employ if you wish to add customized output capabilities (such as writing to a nicely formatted HTML file), but in practice the <B>Output</B> function has seen much more use. The <B>BuildConfig</B> library is intended to be minimal, rather than pretty, and the programmers who can make use of the data tend to appreciate the simplicity of the output.<P>

<h3>How BuildConfig Works</h3>
<P>Although the <B>FILE_VERSION</B> macro hides most of the details from the user, at its heart, <B>BuildConfig</B> is made up of just two classes. A static <B>VersionStamp</B> object is created in each compilation unit for each header file that it includes (directly or indirectly), along with another one representing the source file itself. The <B>FILE_VERSION</B> macro declares each object, passing the filename, build time and date, and version information as C-style parameter strings.<P>

<P>In its constructor, each <B>VersionStamp</B> object registers itself (<a href="cuj0310hall_l3.htm">Listing 3</a>) with the <B>BuildConfiguration</B> singleton instance, which stores a pointer to that object in a standard set. By customizing the comparator function used by the set, we compare the objects themselves, rather than the pointers. As a result, the <B>BuildConfiguration</B> ends up with a single <B>VersionStamp</B> pointer for each file in the entire project, sorted alphabetically by file name.<P>

<P>Employing the Singleton pattern in the <B>BuildConfiguration</B> class is absolutely crucial. We need to ensure that all <B>VersionStamp</B> objects register themselves with the same <B>BuildConfiguration</B> object, which indicates that we should consider the Singleton and Monostate patterns [4]. However, since all the dirty work happens during static initialization, only Singleton allows us to guarantee that the <B>BuildConfiguration</B> object will be available when it is first needed. Although the Monostate pattern presents a cleaner interface, its dependence on class-static (rather than function-static) data makes it impossible for Monostate to make this same guarantee.<P>

<h3>Conclusion</h3>
<P>I have found the <B>BuildConfig</B> library to be an indispensible tool for navigating some of the uncharted backwaters of configuration management. <B>BuildConfig</B> was designed to be as simple as possible to use, and works well with a wide variety of source control tools. I hope that it will find a home in your software toolbox. The complete source code is available online at www.cuj.com/code.<P>

<h3>References and Notes</h3>
<P>[1]  This example assumes the programmer uses CVS, RCS, SourceSafe, or PVCS. Modification of the &#147;$Revision: $&#148; string may be necessary for other source control systems.<P>
<P>[2]  Suggestions would be greatly appreciated.<P>
<P>[3]  Gamma, et. al., &#147;Design Patterns: Elements of Reusable Object-Oriented Software&#148;, (Addison-Wesley, 1995).<P>
<P>[4]  &lt;<a href="http://www.objectmentor.com/resources/articles/SingletonAndMonostate.pdf">http://www.objectmentor.com/resources/articles/SingletonAndMonostate.pdf</a>&gt;. <P>

<hr>
<i><B>Drew Hall</B> is a graduate student in computer science at the University 
of California, Santa Barbara. Prior to returning to school, he developed simulation 
software for the defense industry. He can be reached at <a href="mailto:ahall@cs.ucsb.edu">ahall@cs.ucsb.edu</a>.</i></HTML>
