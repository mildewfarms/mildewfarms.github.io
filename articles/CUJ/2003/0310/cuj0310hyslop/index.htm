<HTML>
<HEAD>
<TITLE>Self-Sufficient Headers</TITLE>
</HEAD><BODY>
<h2> Self-Sufficient Headers</h2>
<H3>Jim Hyslop and Herb Sutter</H3>

<P>It was a summer workday much like any other. The air conditioning was laboring to keep up, but it was still pretty hot in the office. I fought the soporific effects of a heavier-than-usual lunch while working on a piece of new code. My keyboard clicked and clacked softly. A fly buzzed against a nearby windowpane. Otherwise, everything was quiet.<P>

<P>Everything was quiet, that is, until suddenly Bob walked into my cubicle, slapped a piece of paper on my desk, growled the words &#147;Fix it&#148; at me, and left before I could even form a response. Puzzled, I picked up the paper. I had barely had a chance to realize that it was a photocopy of a page from our coding standards before I was interrupted by Wendy&#146;s voice: &#147;What was that smack?&#148;<P>

<P>I gophered up and saw her. &#147;Bob,&#148; I said, and held up the page. &#147;He came by and&#151;&#148;<P>

<P>&#147;Ssssh!&#148; Wendy held a finger to her lips and ungophered, and then came around to join me in my cubicle. &#147;Is that a page from the coding standards?&#148; she asked, her voice low.<P>

<P>&#147;Yes. I&#151;&#148;<P>

<P>She rubbed her hands together gleefully, more gleefully than I could recall ever having seen her before. &#147;Oh, he must be just burning! This is great. I&#146;ll bet this is because I did the same thing to him yesterday.&#148;<P>

<P>&#147;Did what?&#148;<P>

<P>&#147;Smacked <I>him</I> with a page from our coding standards... well, four pages actually, and in front of the interns... and I could tell he was just <I>so</I> mad that I embarrassed him like that. He must have been dying for an excuse to turn around and do it again to someone else. So show me, show me! What did he have to criticize?&#148;<P>

<P>I held up the sheet. The bold heading announced: <B>Ensure that header files are self-sufficient</B>. Along the side, untidily scrawled in Bobscript 22 point (varying to 8 point for some letters) was the name of a file I&#146;d checked in last week. I deciphered the Bobscript and pulled up the file that got me in trouble. Simplifying the names and eliding nonessentials, it looked something like this:<P>

<pre>
// --- file x.h ------------------------
//
#ifndef MYPROJ_X_H
#define MYPROJ_X_H

#include "a.h"
#include "b.h"

class X : public B {
  // ...
private:
  std::vector&lt;A&gt; v_;
};

#endif
</pre>

<P>&#147;Aha!&#148; Wendy said after a moment.<P>

<P>&#147;Aha?&#148; I aha&#146;d.<P>

<P>She pointed an accusing finger at the screen. &#147;&#146;Fraid he&#146;s got you dead to rights this time, pardner,&#148; she said, and started fanning herself with a sheaf of papers she picked up from my desk. The air conditioning seemed to be losing ground.<P>

<P>&#147;He does? But I included the base class definitions, and the... oh. It&#146;s <B>vector</B>.&#148;<P>

<P>She nodded. &#147;Right.&#148;<P>

<P>&#147;I guess I didn&#146;t notice the problem at first because it worked fine in my test harness,&#148; I admitted. &#147;It just happened that all the files I tried it with also included <B>vector</B> for other reasons. And <B>a.h</B> and <B>b.h</B> don&#146;t include <B>vector</B>, so I ought to include it myself.&#148;<P>

<P>&#147;<B>vector</B> is a very common <B>#include</B>,&#148; Wendy agreed. &#147;Most of your callers probably wouldn&#146;t notice.&#148;<P>

<P>A book snapped shut behind us, but we were too lethargic with the heat to give much of a jump. &#147;And the solution?&#148; said a quiet voice behind us.<P>

<P>&#147;Hi,&#148; we greeted the Guru. I said, &#147;I guess the simplest thing would be to just make <B>x.h</B> also include the standard header <B>vector</B>.&#148;<P>

<P>The Guru inclined her head. &#147;The simplest thing,&#148; she agreed, &#147;and the most correct, yes. Even if <B>a.h</B> or <B>b.h</B> included <B>vector</B> already, it would not hurt you to consider including it for completeness, as the prophet Lakos recommended [1]. In the event of a future revision or refactoring of <B>A</B> or <B>B</B> that might cause <B>a.h</B> or <B>b.h</B> to no longer include <B>vector</B>, your header would still be self-sufficient.&#148; She pushed a graying lock behind one ear. &#147;Of course,&#148; she added, &#147;including <B>vector</B> is not the only possible solution in this case.&#148;<P>

<P>I thought about that. &#147;I guess I could Pimpl out the private <B>vector</B> member,&#148; I decided [2]. &#147;That would let me avoid including <B>vector</B>, and it would let me stop including <B>a.h</B> too.&#148;<P>

<P>&#147;Indeed,&#148; said the Guru, while Wendy continued to fan herself. &#147;The Pimpl idiom... it is worth using here? What say you?&#148;<P>

<P>&#147;I don&#146;t think so,&#148; I shrugged. &#147;I know that header <B>vector</B> never changes... or at least, if it does, we&#146;re upgrading the compiler and that means we have to rebuild the world anyway. And I know that <B>a.h</B> is a small and stable header that hasn&#146;t changed for years. So, no, I don&#146;t think it&#146;s worth it.&#148;<P>

<P>The Guru nodded. &#147;Well said.&#148;<P>

<P>I shook my head as I made the change to add the missing line. &#147;It burns me that Bob was able to catch me like that.&#148;<P>

<P>&#147;Aw, cheer up, pardner,&#148; Wendy offered. &#147;Bob was just looking for a reason to burn someone. Just make sure you don&#146;t let him burn you again for the same thing.&#148;<P>

<P>&#147;Such as in your current code...&#148; the Guru added innocently, opened her tome, and stood there pretending to read it. Wendy continued fanning herself and studied the ceiling.<P>

<P>The silence hung heavily in the air.<P>

<P>The seconds ticked by quietly. A distant drip, drip, drip from the air conditioning unit could now be heard. The fly had stopped buzzing against the nearby window and was now walking on my screen. I shooed it away, but it immediately alighted again a few feet away on my desk. The fly was tired too.<P>

<P>I cleared my throat dramatically. &#147;Okay, so here&#146;s the header I was just working on,&#148; I announced and went back to that file. Again simplifying the names and eliding nonessentials, it looked like this:<P>

<pre>
// --- file y.h ---------------------------------
//
#ifndef MYPROJ_Y_H
#define MYPROJ_Y_H

class Y {
  // ...
public:
  template&lt;typename T&gt;
  void f( T&amp; t ) {
    Expensive ex;
    // ... do work with ex ...
  }
};

#endif
</pre>

<P>&#147;Ah.&#148;<P>

<P>The Guru looked up from her tome. Wendy&#146;s fanning motion sped up slightly.<P>

<P>&#147;Well,&#148; I welled a little defensively, &#147;I guess I don&#146;t include the header that has the definition of <B>Expensive</B>, but I did it that way on purpose, you know. Most users of <B>Y</B> will never care. That type only appears in the implementation of one of my member template functions. And that won&#146;t get instantiated unless someone uses it, right?&#148;<P>

<P>&#147;Apprentice?&#148; the Guru said, indicating Wendy.<P>

<P>&#147;Uh...&#148; Wendy said, surprised at being drawn into the conversation. &#147;Uh, he&#146;s right, if a caller never uses <B>Y::f</B>, there shouldn&#146;t be a problem, it should never be instantiated.&#148;<P>

<P>&#147;Correct,&#148; the Guru said, and turned back to me. &#147;If it were private, you could Pimpl it, but it is not. Have you considered delivering <B>f</B> as a nonmember, and perhaps non-friend, function?&#148; She took the keyboard and rearranged the code slightly, then split it into two files:<P>

<pre>
// --- file y.h ---------------------------------
//
#ifndef MYPROJ_Y_H
#define MYPROJ_Y_H

class Y {
  // ...
};

#endif

// --- file yutil.h -----------------------------
//
#ifndef MYPROJ_YUTIL_H
#define MYPROJ_YUTIL_H

#include "y.h"
#include "expensive.h"

template&lt;typename T&gt;
void f( Y&amp; y, T&amp; t ) {
  Expensive ex;
  // ... do work with ex ...
}

#endif
</pre>

<P>&#147;There,&#148; she said, and stepped back. &#147;What do you think of that?&#148;<P>

<P>&#147;I like it,&#148; Wendy threw in before I could answer. &#147;Now both headers are standalone.&#148;<P>

<P>I saw it too. &#147;And still only the users who need <B>f</B> will incur the cost of including <B>Expensive</B>&#146;s definition. Sweet. Say,&#148; I added, &#147;didn&#146;t someone write an article about other benefits of implementing functions as nonmembers?&#148;<P>

<P>&#147;Indeed,&#148; the Guru acknowledged. &#147;The prophet Meyers is one who has had the courage to do so. [3] In particular, he demonstrates persuasively... one might even say, effectively... why nonmembers that are also non-friends increase encapsulation. This is another demonstration of the flexibility of nonmember functions, particularly given that C++ does not support extensible classes that can be reopened like namespaces and defined across multiple header files.&#148;<P>

<P>&#147;That&#146;s all well and good,&#148; Wendy challenged, &#147;but what if the situation&#146;s just a little different?&#148; She wrote:<P>

<pre>
// --- file Z.h ---------------------------------
//
#ifndef MYPROJ_Z_H
#define MYPROJ_Z_H

template&lt;typename T&gt;
class Z {
  // ...
public:
  void f( T&amp; t ) {
    Expensive ex;
    // ... do work with ex ...
  }
};

#endif
</pre>

<P>Wendy stepped back: &#147;Now, instead of a member template function, we have a plain member function in a template. What about that?&#148;<P>

<P>The Guru nodded. &#147;Prithee tell: When is <B>f</B> instantiated?&#148;<P>

<P>Wendy opened her mouth, then thought better of it and closed it again. The Guru looked at me and lifted one eyebrow, but I could only give my best deer-in-the-headlights look.<P>

<P>&#147;My apprentices,&#148; the Guru said, &#147;member functions of templates are instantiated only if used. At least, that is the case on conforming compilers, and in this respect fortunately the compilers we use are all obedient to the Holy Standard. In this case, only when a user of <B>Z&lt;SomeType&gt;</B> uses <B>f</B>, will <B>Z&lt;SomeType&gt;::f</B> be instantiated for that user. Thus this case is the same... yes, only trivially different it is.&#148; And she wrote:<P>

<pre>
// --- file Z.h ------------------------
//
#ifndef MYPROJ_Z_H
#define MYPROJ_Z_H

template&lt;typename T&gt;
class Z {
  // ...
};

#endif

// --- file zutil.h --------------------
//
#ifndef MYPROJ_ZUTIL_H
#define MYPROJ_ZUTIL_H

#include "expensive.h"

template&lt;typename T&gt;
void f( Z&lt;T&gt;&amp; z, T&amp; t ) {
  Expensive ex;
  // ... do work with ex ...
}

#endif
</pre>

<P>She made as if to leave, but then turned back to us. &#147;Oh, and we will be adding a new step to our build system. Every header file <B>header.h</B> will be tested to ensure it is a compilable standalone by attempting to build a file like this.&#148; She wrote on the whiteboard:<P>

<pre>
#include "header.h"
int main() { }
</pre>

<P>&#147;Only your original <B>x.h</B> file would have failed this test,&#148; she added considerately. &#147;Your <B>y.h</B>, even had you not amended your writings, would have passed it.&#148; She bowed quietly, and turned, and began walking away down the hallway.<P>

<P>Just before she passed around the corner, we heard her voice drift back: &#147;I hear there is a game this week in the coffee room to guess what percentage of Bob&#146;s headers will pass it...&#148;<P>

<h3>References</h3>
<P>[1]  J. Lakos. <I>Large-Scale C++ Software Design</I>. Addison-Wesley, 1996.<P>
<P>[2]  H. Sutter. <I>Exceptional C++</I>. Addison-Wesley, 2000.<P>
<P>[3] S. Meyers. &#147;How Non-Member Functions 
  Improve Encapsulation.&#148; <I>C/C++ Users Journal</I> 18, no.2 (February 
  2000): 44-52. 
<P>

<hr><i><B>Herb Sutter</B> (<a href="http://www.gotw.ca">www.gotw.ca</a>) is convener of the ISO C++ standards committee, author of the acclaimed books </I>Exceptional C++<I> and </I>More Exceptional C++<I>, and one of the instructors of The C++ Seminar (<a href="http://www.gotw.ca/cpp_seminar">www.gotw.ca/cpp_semina</a>). In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft. <P>
<B>Jim Hyslop</B> is a senior software designer with over 10 years programming experience in C and C++. Jim works at Leitch Technology International Inc., where he deals with a variety of applications, ranging from embedded applications to Windows programs. He can be reached at <a href="mailto:jhyslop@ieee.org">jhyslop@ieee.org</a>. 
</i></HTML>
