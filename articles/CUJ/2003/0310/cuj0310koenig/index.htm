<HTML>
<HEAD>
<TITLE>Two Kinds of Performance</TITLE>
</HEAD><BODY>
<h2>Two Kinds of Performance</h2>
<H3>Andrew Koenig and Barbara E. Moo</H3>

<P>Everyone who reads the Usenet C++ newsgroups sees questions about how to make programs run faster. These questions are often about the relative merits of low-level constructs such as <B>n*2</B> versus <B>n&lt;&lt;1</B>, or <B>i++</B> versus <B>++i</B>. The answers that appear to such questions often remark that computers are so fast these days that there is no reason to worry about performance.<P>

<P>These questions and answers conceal two important misconceptions:<P>
<ul>
<li>Although low-level details such as choosing among equivalent expressions can affect a program&#146;s execution time, programmers often ignore algorithmic choices that have a much greater impact on performance.<P>
<li>The fact that computers keep getting faster increases, rather than decreases, these algorithmic choices&#146; effect on performance.<P>
</ul>
<P>The rest of this article will explain the facts behind these misconceptions.<P>

<h3>Faster Computers are No Panacea</h3>
<P>In 1970, Columbia University had an IBM System/360 Model 91 computer, which was the fastest general-purpose computer commercially available. This machine, which served the entire university&#146;s academic computing needs, had a 60-nanosecond cycle time, two megabytes of main memory, and about a gigabyte of disk.<P>

<P>Today, a typical desktop PC has about a 0.5-nanosecond cycle time, a quarter of a gigabyte of memory, and 100 gigabytes of disk. So an individual today has access to a machine that is roughly 100 times the capacity of a 1970-era supercomputer, regardless of whether you measure processor speed, memory, or disk. Why should anyone give a hoot about performance anymore?<P>

<P>One reason to care about performance is that even though today&#146;s computers are much faster than their predecessors, we use them to solve larger problems in less time than we did with their predecessors. As an example, consider how much computation is involved in decompressing and displaying a video image from a DVD in real time.<P>

<P>Even programs without such stringent performance requirements as real-time video can run into scale problems. For example, some operating systems use a data structure for their directories that causes the amount of time it takes to create the <B>n+1st</B> file in a directory to be proportional to <B>n</B>. As a result, creating a directory with <B>n</B> files takes time proportional to <B>n</B>2.<P>

<P>Suppose that you are using a computer to store a thousand images from a digital camera, and that you take the straightforward approach of storing all of these images in a single directory. In that case, the data structure that your operating system uses to store directories could potentially make a thousand-fold difference in how quickly you can retrieve an individual image &#151; and a <I>million</I>-fold difference in how long it takes to copy your thousand images from one directory to another.<P>

<P>Suppose that your images are a megabyte each. Then a thousand images will occupy a gigabyte. That&#146;s the total capacity of our 1970 supercomputer, but only one percent of the capacity of a modern PC. In other words, we would not have dreamed of storing a thousand files in a single directory in 1970, but such large directories are routine today. As computers become bigger and faster, the negative effect of poorly chosen algorithms grows proportionally.<P>

<P>Another way to put it is that as computers become faster, low-level performance details become less important, and high-level strategy has a greater effect on performance. Accordingly, we should be thinking less about low-level, tactical performance issues, and more about high-level strategic and algorithmic performance issues.<P>

<h3>A Tale of Three Algorithms</h3>
<P>To make this discussion concrete, here is a small problem: Write a function that takes a string and returns a new string that contains the same characters as the original, but with all the spaces removed. So, for example, given <B>this is a test</B> as input, the function should return <B>thisisatest</B>.<P>

<P>We imagine that many C++ programmers would write something along the following lines:<P>

<pre>
     // Version 1
     std::string deblank(std::string s)
     {
          std::string::iterator it;
               while ((it = std::find(s.begin(), s.end(), ' '))
                   != s.end())
                    s.erase(it);
          return s;
     }
</pre>

<P>On the surface, this function looks like a reasonable solution to the problem. It repeatedly searches the subject string to find the first blank. If there is no blank to be found, the call to <B>find</B> will return <B>s.end()</B>, and the loop will terminate. Otherwise, the function continues by erasing the blank, and then repeating the entire process.<P>

<P>The trouble with this approach is easy to see once it has been pointed out: Finding a space involves searching all of the characters before the space, and erasing a space involves copying all of the characters after it. Accordingly, the function touches every nonspace character in the string each time it encounters a space. Therefore, the execution time of this function has the potential to grow proportionally to the square of the length of the input.<P>

<P>When we tested this function on a (somewhat slow) computer that happened to be available, we found that giving it a string with 100,000 nonspace characters ran too quickly to measure, but giving the function a string of 100,000 spaces caused it to take took 18 seconds!<P>

<P>We can find a much better solution to this problem by ensuring that we touch each character only once:<P>

<pre>
     // Version 2
     std::string deblank(std::string s)
     {
          std::string r;
          for (int i = 0; i != s.size(); ++i)
               if (s[i] != ' ')
                    r += s[i];
          return r;
     }
</pre>

<P>On the surface, this function may seem less efficient than Version 1, for several reasons:<P>
<ul>
  <li>It creates a new string to hold the result, thus potentially requiring two 
    copies of the string in memory at the same time.
  <li>It uses <B>+=</B> to append characters one at a time to the result.
  <li>It compares characters directly in a loop rather than using <B>find</B>.
  <li>It evaluates <B>s.size()</B> each time through the loop.
  <li>It uses indices rather than iterators to fetch characters from <B>s</B>.
    <P> 
</ul>

<P>Nevertheless, we consider this function to be a great improvement over Version 1 for a very important reason: We can count on each individual operation on each character to take no more than a constant amount of time. Even appending <B>s[i]</B> to <B>r</B> is guaranteed to take no more than time proportional to <B>n</B> for <B>n</B> consecutive appends. Accordingly, the execution time of Version 2 is no worse than proportional to the length of its input.<P>

<P>When we run Version 2, we find that it handles a 100,000-character string too quickly for us to measure, regardless of how many spaces the string contains.<P>

<P>We mentioned several objections that one might raise to Version 2 of our program. Let&#146;s rewrite it to remove some of those objections:<P>

<pre>
     // Version 3
     std::string deblank(std::string s)
     {
          std::string::iterator in = s.begin(),
            out = in, end = s.end();
          while (in != end) {
               char c = *in;
               if (c != ' ') {
                    *out = c;
                    ++out;
               }
               ++in;
          }
          s.erase(out, end);
          return s;
     }
</pre>

<P>This revised version overwrites the characters of <B>s</B> one at a time, using two iterators, <B>in</B> and <B>out</B>, to keep track of where it is in the string. When it is finished, it erases the characters from the end of the string, thereby truncating the string to the length of the output.<P>

<P>Version 3 is definitely larger and harder to understand than Version 2. Does Version 3 run faster than Version 2? Certainly. Most of the difference appears to come from the multiple <B>+=</B> operations in Version 2 that Version 3 avoids &#151; especially if the input is so large as to exhaust memory trying to keep both the input and output strings around at the same time. As a result, Version 3 is only about twice as fast as Version 2 when the input is mostly spaces; the difference is much greater when there are relatively few spaces in the input. In general, however, the difference between Versions 2 and 3 is much less than the difference between Versions 1 and 2.<P>

<h3>Summary</h3>

<P>Computers keep getting bigger and faster. A gigabyte of disk space served an entire university in 1970; today, it&#146;s barely enough to store a vacation&#146;s worth of snapshots. As a result, we expect computers today to do things that would have been out of their predecessors&#146; range.<P>

<P>When we write programs, we make many decisions that affect those programs&#146; performance. Some of those decisions are local, low-level optimizations that can change the program&#146;s speed by no more than a constant factor. For example, if you do a computation twice instead of doing it once, that part of the program will run twice as slowly as a change that will probably have an even smaller effect on the program as a whole.<P>

<P>Other decisions will affect programs&#146; performance by a factor that might be proportional to the size of the input, or might even grow more quickly than the input. Whenever the execution speed changes proportionally to the size of the input, the overall execution time changes proportionally to the square of the input size. In other words, if making the input 10 times as large slows the program down by an additional factor of 10, the total execution time will increase by a factor of 100. Accordingly, a single bad algorithm can have such a profound effect on a program&#146;s execution time as to render irrelevant any other decisions about that program&#146;s performance. As computers become faster, and people use them to solve larger problems, these algorithmic decisions become relatively more important. <P>

<hr><i><B>Andrew Koenig</B> retired from AT&amp;T&#146;s research division in June, 2003. A programmer for more than 35 years, 17 of them in C++, he has published more than 150 articles about C++ and speaks on the topic worldwide. He is the author of </I>C Traps and Pitfalls<I> and coauthor of </I>Ruminations on C++<I> and </I>Accelerated C++<I>.</I><P><I><B>
Barbara E. Moo</b> is an independent consultant with 20 years&#146; experience in the software field. During her nearly 15 years at AT&amp;T, she worked on one of the first commercial projects ever written in C++, managed the company&#146;s first C++ compiler project, and directed the development of AT&amp;T&#146;s award-winning WorldNet Internet service business. She is coauthor of </i>Ruminations on C++<I> and </I>Accelerated C++ <I>and lectures worldwide.</i>
</HTML>
