<HTML><HEAD><TITLE>Introducing CDT</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><H2>Introducing CDT</h2><h3>Pawel Leszek</h3><i>Getting started with CDT -- a C/C++ IDE built with Eclipse technology.</i><p> <I><font size="-1">From "</font></I><font size="-1">C/C++ Development   with the Eclipse Platform<I>," first published by IBM developerWorks at   <a href="http://www.ibm.com/developerWorks" target="_blank">http://www.ibm.com/developerWorks</a>.   Reprinted with permission.</i></font> <p><a href="cuj0309leszek_f1.htm">Figure 1: A C/C++ project in Eclipse</a> <P> </I>CDT is an open source project (licensed under the Common Public License)   that is working towards a fully functional C/C++ Integrated Development Environment   (IDE) for the Eclipse Platform. CDT is implemented purely in Java as a set of   plug-ins for the Eclipse SDK Platform. Although the project focus is on Linux,   CDT works in all environments where GNU developer tools are available, including   Win32 (Win 95/98/Me/NT/2000/XP), QNX Neutrino, and Solaris.<P> Before you download and install the CDT, you first need to ensure that you   have the GNU C compiler (GCC) and all the accompanying tools (make, binutils,   GDB). If you're running Linux, simply install the development packages using   the package manager appropriate for your distribution. On the Windows platform,   you'll need to install the Cygwin toolkit (&lt;<a href="http://www.redhat.com/software/cygwin/" target="_blank">http://www.redhat.com/software/cygwin/</a>&gt;).   Cygwin is a UNIX-like environment for Windows that includes a GCC port along   with all necessary development tools, including automake and the GNU Debugger   (GDB). The alternate solution for Cygwin is Minimalist GNU for Windows (MinGW)   (&lt;<a href="http://www.mingw.org/" target="_blank">http://www.mingw.org/</a>&gt;).   MinGW is a better choice if you want to create Windows applications that are   POSIX compatible. <P> To install CDT, you must have the appropriate Java SDK/JRE and Eclipse Platform   SDK. CDT is available as either stable releases or nightly builds. Nightly builds   have not been fully tested, but they offer more features and correct current   bugs. Before installation, check if the previous version of the CDT exists on   your disk and, if so, make sure to completely remove it. Because there are no   uninstallers available for the CDT, you will need to do this manually. To check   to see if a previous version exists, go to the directory where the CDT plug-ins   reside: eclipse/plugins. Next, remove all directories starting with the <B>org.eclipse.cdt   name</B>. The last thing you will need to do is remove the CDT metadata directories   <B>or.eclipse.cdt.*</B> from <B>workspace/.metadata/.plugins</B> and <B>features</B>.   The next step is to download the CDT binaries (see the official CDT website:   &lt;www.eclipse.org/cdt&gt;).   Take care to download the correct CDT for your operating system. Next, uncompress   the archives into a temporary directory and move all plug-in directory content   from there to the Eclipse plugins subdirectory. You will also need to move the   features directory content to the Eclipse features subdirectory. Now restart   Eclipse. After Eclipse starts again, the update manager will tell you that it   has found changes and will ask you to confirm them. You'll now be able   to see that two new projects are available: C and C++. <P> <h3>Creating new projects</h3></B>After installing CDT in Eclipse, navigate to <I>File =&gt; New =&gt; Project</I>, where you will find three new types of projects available: <I>C (Standard C Make Project)</I>, <I>C++ (Standard C++ Make Project)</I>, and <I>Convert to C or C++ Projects</I>. Start with <I>Standard Make C++ Project</I>, to create source code files for your project. In the <I>C/C++ Projects</I> view, right-click and select <I>New =&gt; Simple =&gt; File</I>. Name your file and save it. You'll probably create many files for header and C/C++ implementation code files in this way. The last one is, of course, <B>makefile</B>, which will be used by GNU Make for building binaries. Use the usual GNU make syntax for this <B>makefile</B>. Remember that <B>makefile,</B>s require you to make indented lines using the Tab character and not spaces.<P> CDT offers an easy way to import existing source code. Go to the main menu   bar and select <I>File =&gt; Import =&gt; File System</I>. Click <I>Next</I>   and open the source directory and select the directories from which you would   like to add files. Click <I>Select All</I> to select all resources in the directory,   and then go through and deselect the ones that you do not want to add. Specify   the Workbench project or folder that will be the import destination. You can   also import folders and files by copying and pasting them, or by dragging them   from the file system and dropping them in the Navigator view.<P> <h3>Key CDT IDE features</h3>The CDT IDE is built around a universal, extensible editor provided by the CDT UI plug-in. The main features of the CDT IDE are: <ul><li> Syntax highlighting: CDT IDE recognizes C/C++ syntax and provides syntax   highlighting with fully configurable code colorizing and code formatting.   <li> Outline: The Outline window module provides a quick view on procedures, variables,   declarations, and functions that appear in source code. With outline you can   easily jump into the appropriate reference in the source code or even search   all project source code.   <li> Code assist: This code completion feature is similar to ones found in Borland   C++ Builder or MS Visual Studio. It uses code templates and simply helps to   avoid silly syntax errors   <li> Code templates: The code templates, which are used by the code assist feature,   are definitions of standard C/C++ language syntactical constructions. You can   also define your own code templates for expanding your own shortcuts, such as   ones for author or date keywords. In <I>Window =&gt; Preferences =&gt; C/C++   =&gt;</I> Code Templates, you can add new templates and view the full list of   templates. Templates can also be exported and imported as XML files.   <li> Code history: Even if you do not use CVS or another source code version management   software, you can trace local changes in a project's source code. Right-click   on the selected file and choose <I>Compare With =&gt; Local History...</I> from   the context menu:</ul>  <P> CDT also extends the standard Eclipse Debug View with functions for debugging     C/C++ code. The Debug View allows you to manage the debugging or running of     a program in the Workbench. To start debugging the current project, simply     switch to the Debug View and you will be able to set (and change at anytime     during execution) breakpoints/watchpoints in the code, trace variables, and     registers. <h3>About the Author</h3>Pawel Leszek is an independent software consultant and an author specializing in Linux/Win/Mac OS system architecture and administration. Pawel is the author of a series of articles for <I>LinuxWorld</I> and is a Linux columnist for the Polish edition of <I>PC World</I>. He lives in Warsaw.</BODY> </BODY></HTML>