<HTML><HEAD><TITLE>Listing 1: A calculator that evaluates the expression given to it</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B>Listing 1:</b> A calculator that evaluates the expression given to it <pre>//  Copyright (c) 2001, Joel de Guzman and Dan Nuffer//  Permission is granted to use this code without restriction as//  long as this copyright notice appears in all source files.#include &lt;boost/spirit/spirit.hpp&gt;#include &lt;iostream&gt;#include &lt;stack&gt;#include &lt;functional&gt;using namespace std;using namespace spirit;stack&lt;long&gt; evaluation_stack;struct push_int{    void operator()(char const* str, char const*) const    {        long n = std::strtol(str, 0, 10);        evaluation_stack.push(n);    }};template &lt;class op&gt;struct do_op{    do_op(op const&amp; the_op) : m_op(the_op) {}    op m_op;    void operator()(char const*, char const*) const    {        long rhs = evaluation_stack.top();        evaluation_stack.pop();        long lhs = evaluation_stack.top();        evaluation_stack.pop();        evaluation_stack.push(m_op(lhs, rhs));    }};template &lt;class op&gt;do_op&lt;op&gt; make_op(op const&amp; the_op){    return do_op&lt;op&gt;(the_op);}struct do_negate{    void operator()(char const*, char const*) const    {        long lhs = evaluation_stack.top();        evaluation_stack.pop();        evaluation_stack.push(-lhs);    }};int main(){    rule&lt;&gt; expression, term, factor, integer;    integer =        lexeme[ (!ch_p('-') &gt;&gt; +digit)[push_int()] ];    factor =            integer        |   '(' &gt;&gt; expression &gt;&gt; ')'        |   ('-' &gt;&gt; factor)[do_negate()];    term =        factor &gt;&gt;            *( ('*' &gt;&gt; factor)[make_op(std::multiplies&lt;long&gt;())]             | ('c:\www.cuj.com/' &gt;&gt; factor)[make_op(std::divides&lt;long&gt;())]);    expression  =        term &gt;&gt;            *( ('+' &gt;&gt; term)[make_op(std::plus&lt;long&gt;())]             | ('-' &gt;&gt; term)[make_op(std::minus&lt;long&gt;())]);    char str[256];    cin.getline(str, 256);    if (parse(str, expression, space).full)    {        cout &lt;&lt; "parsing succeeded\n";        cout &lt;&lt; "result = " &lt;&lt; evaluation_stack.top() &lt;&lt; "\n\n";        evaluation_stack.pop();    }    else    {        cout &lt;&lt; "parsing failed\n";    }}</pre></BODY></HTML>