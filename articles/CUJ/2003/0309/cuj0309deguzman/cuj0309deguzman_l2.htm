<HTML><HEAD><TITLE>Listing 2: The parser class and some trivial subclass examples</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 2:</B>	The parser class and some trivial subclass examples<pre>//  Copyright (c) 2001, Joel de Guzman and Dan Nuffer//  Permission is granted to use this code without restriction as//  long as this copyright notice appears in all source files.template &lt;typename DerivedT&gt;struct parser{    DerivedT&amp;    derived()    { return *static_cast&lt;DerivedT*&gt;(this); }    DerivedT const&amp;    derived() const    { return *static_cast&lt;DerivedT const*&gt;(this); }};template &lt;typename DerivedT&gt;struct char_parser : public parser&lt;DerivedT&gt;{    template &lt;typename IteratorT&gt;    match    parse(IteratorT&amp; first, IteratorT const&amp; last) const    {        if (first != last)            if (bool r = this-&gt;derived().test(*first))            {                ++first;                return match(1);            }        return match();    }    ...};template &lt;typename CharT = char&gt;class chlit : public char_parser&lt;chlit&lt;CharT&gt; &gt;{public:    ...    template &lt;typename T&gt;    bool test(T ch_) const    { return T(ch) == ch_; }private:    CharT  ch;};</pre></BODY></HTML>