<HTML><HEAD><TITLE>HexWeb HTML</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 2</B>	<B>RSA Sign and RSA Verify<P>#include &lt;assert.h&gt;<P><P>#include &lt;openssl/err.h&gt;<P>#include &lt;openssl/evp.h&gt; <P><P>#include "common.h"<P>#include "rsa.h"<P><P>int rsa_openssl_sign(unsigned char *signature,<P>                     size_t *sig_size,<P>                     const unsigned char *msg,<P>                     size_t msg_len,<P>                     RSA *key)<P>{<P>    int rsa_err;<P>    unsigned char sha1_result[SHA1_OUTPUT_LEN];<P><P>    assert(key &amp;&amp; signature &amp;&amp; msg);<P>    assert(msg_len &gt; 0);<P><P>    /* hash and sign the hash result */<P>    SHA1(msg, msg_len, sha1_result);<P><P>    rsa_err = RSA_sign(NID_sha1, <P>                       sha1_result, sizeof(sha1_result),<P>                       signature, sig_size,<P>                       key);<P>    return (rsa_err == 1)? 0 : -1;<P>}<P><P><P>int rsa_openssl_verify(const unsigned char *signature,<P>                       size_t sig_size,<P>                       const unsigned char *msg,<P>                       size_t msg_len,<P>                       RSA *key,<P>                       unsigned int *isValid)<P>{<P>    unsigned char sha1_result[SHA1_OUTPUT_LEN];<P>    unsigned char sig_copy[sig_size];<P>    assert(key &amp;&amp; signature &amp;&amp; msg &amp;&amp; isValid);<P>    assert(sig_size &gt; 0 &amp;&amp; msg_len &gt; 0);<P><P>#ifdef DEBUG<P>    ERR_load_crypto_strings();<P>#endif <P><P>    /* hash and verify the signature matches */<P>    SHA1(msg, msg_len, sha1_result);<P><P>    memcpy(sig_copy, signature, sig_size);<P>    *isValid = RSA_verify(NID_sha1,<P>                          sha1_result, sizeof(sha1_result),<P>                          sig_copy, sig_size,<P>                          key);<P>#ifdef DEBUG<P>    {<P>        int e;<P>        do {<P>            e = ERR_get_error();<P>            fprintf(stderr, "RSA_VERIFY error = %s\n", <P>                    ERR_error_string(e, NULL));<P>        } while (e != 0);<P>    }<P>#endif<P>    return 0;<P>}<P></pre>
</BODY></HTML>