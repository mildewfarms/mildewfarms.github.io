<HTML><HEAD><TITLE>HexWeb HTML</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 3:</B>	<B>Symmetric key license generation and verification<P>int genl_symm_generate(char *license,<P>                       size_t license_size,<P>                       u64 target_id,<P>                       u16 exp_date,<P>                       u16 features,<P>                       const void *symm_key)<P>{<P>    unsigned char licdata[12];<P>    unsigned char mac[SHA1_OUTPUT_LEN];<P>    unsigned char userlic[10];<P>    assert(license_size &gt; sizeof(licdata)*2);<P><P>    /* copy data into place */<P>    memcpy(licdata,<P>           (char *)&amp;target_id, sizeof(target_id));<P>    memcpy(licdata + sizeof(target_id),<P>           (char *)&amp;exp_date, sizeof(exp_date));<P>    memcpy(licdata + sizeof(target_id) + sizeof(exp_date),<P>           (char *)&amp;features, sizeof(features));<P><P>    hmac_sha1(mac, sizeof(mac),<P>              licdata, sizeof(licdata),<P>              symm_key, sizeof(symm_key));<P><P>    /* create the license string */<P>    memcpy(userlic,<P>           (char *)&amp;exp_date, sizeof(exp_date));<P>    memcpy(userlic + sizeof(exp_date),<P>           (char *)&amp;features, sizeof(features));<P>    memcpy(userlic + sizeof(exp_date) + sizeof(features),<P>           mac, sizeof(userlic) - <P>                (sizeof(exp_date) + sizeof(features)));<P><P>    /* format it nicely */<P>    utils_bin2str(license, license_size, <P>                  userlic, sizeof(userlic));<P><P>    return 0;<P>}<P><P><P>int verl_symm_verify(const char *license,<P>                     u64 target_id,<P>                     const void *symm_key,<P>                     u16 *exp_date,<P>                     u16 *features,<P>                     u8 *isValid)<P>{<P>    unsigned char lic_bin[10];<P>    size_t licdata_len;<P>    unsigned char licdata[12];<P>    unsigned char mac[SHA1_OUTPUT_LEN];<P>    unsigned char userlic[10];<P><P>    /* parse the license */<P>    utils_str2bin(lic_bin, sizeof(lic_bin), <P>                  &amp;licdata_len, license);<P>    memcpy(exp_date, lic_bin, sizeof(*exp_date));<P>    memcpy(features, lic_bin+sizeof(*exp_date), <P>           sizeof(*features));<P><P>    /* reconstruct the HMACed data */<P>    memcpy(licdata,<P>           (char *)&amp;target_id, sizeof(target_id));<P>    memcpy(licdata + sizeof(target_id),<P>           (char *)exp_date, sizeof(*exp_date));<P>    memcpy(licdata + sizeof(target_id) + sizeof(*exp_date),<P>           (char *)features, sizeof(*features));<P><P>    hmac_sha1(mac, sizeof(mac),<P>              licdata, sizeof(licdata),<P>              symm_key, sizeof(symm_key));<P><P>    {<P>        /* compare the leftmost bits */<P>        int offset = sizeof(*exp_date)+sizeof(*features);<P>        *isValid = 0;<P>        if (memcmp(lic_bin+offset, mac, <P>                   sizeof(lic_bin) - offset) == 0) <P>        {<P>            *isValid = 1;<P>        }<P>    }<P><P>    return 0;<P>}<P></pre>
</BODY></HTML>