<HTML><HEAD><TITLE>HexWeb HTML</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 5</B>	<B>Asymmetric key license verification<P>int verl_asymm_verify(const char* license,<P>                      const char* partial_sig,<P>                      u64 target_id,<P>                      RSA *rsa_key,<P>                      u8 *lic_features,<P>                      u8 *isValid)<P>{<P>    unsigned char lic_bin[10];<P>    size_t licdata_len;<P>    unsigned char licdata[9];<P>    unsigned char signature[512];<P>    unsigned char bin_signature[128];<P>    size_t sig_len;<P><P>    /* parse the license */<P>    utils_str2bin(lic_bin, sizeof(lic_bin), <P>                  &amp;licdata_len, license);<P>    memcpy(lic_features, lic_bin, sizeof(*lic_features));<P><P>    /* reconstruct the signed data */<P>    memcpy(licdata,<P>           (char *)&amp;target_id, sizeof(target_id));<P>    memcpy(licdata + sizeof(target_id),<P>           (char *)lic_features, sizeof(*lic_features));<P><P>    /* reconstruct the signature */<P>    strlcpy(signature, license + sizeof(*lic_features)*2, <P>            sizeof(signature));<P>    strlcat(signature, partial_sig, sizeof(signature));<P>    utils_str2bin(bin_signature, sizeof(bin_signature), <P>                  &amp;sig_len, signature);<P><P>    /* try to verify the license */<P>    rsa_openssl_verify(bin_signature, sig_len,<P>                       licdata, sizeof(licdata),<P>                       rsa_key,<P>                       isValid);<P><P>    /* free the key */<P>    keys_free_rsa_key(rsa_key);<P><P>    return 0;<P>}</pre>
</BODY></HTML>