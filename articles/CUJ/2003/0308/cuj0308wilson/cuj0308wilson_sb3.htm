<HTML><HEAD><TITLE>ANSI vs. Unicode Encoding</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h3>ANSI vs. Unicode Encoding</h3>Although you will notice in the code that, for many of the shims, ANSI [14] and Unicode forms (<B>c_str_ptr_a()</B>, <B>c_str_ptr_w()</B>) are also provided, there is no provision for conversion between a type of one encoding scheme and a type of the other. Specifically, there are no facilities for passing a Unicode string (<B>wchar_t const *</B>, <B>std::wstring</B>, etc.) to a <B>c_str_ptr()</B> shim whose conversion type is <B>char const *</B>, and vice versa. There are three reasons for this.<P>First, the STLSoft libraries are as lightweight as possible -- strictly header-only -- and have the minimum reliance on any other libraries (including, where pragmatic, the C-runtime library).<P>Second, the STLSoft libraries do not discriminate on compiler symbols to determine an ambient character-encoding scheme. Although such symbols exist for certain compilers and libraries (e.g., the Win32 API discriminates the UNICODE and _MBSC symbols), no universally applicable convention is available, so the issue is left unaddressed and in the programmer's purview.<P> The last, and strongest, reason is that providing such functionality would   result in a "semi-implicit" conversion scenario, taking us to one of the positions   we're trying to avoid. If I were able to call an algorithm with <B>wstring</B>   that was expecting to be able to convert to <B>char const *</B> without the   compiler warning me, then I could be incurring multiple costly conversions that   should have easily been avoided by writing my code more efficiently.</BODY></HTML>