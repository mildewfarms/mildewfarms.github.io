<HTML><HEAD><TITLE>Listing 11:	Shims returning NULL strings</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 11:</B>	Shims returning NULL strings<p><pre>/* ///////////////////////////////////////////////////////////// * Extract from stlsoft_string_access.h, atlstl_string_access.h, *              mfcstl_string_access.h * * www:    http://stlsoft.org/, http://atlstl.org/ *         http://mfcstl.org/ * * Copyright (C) 2002, Synesis Software Pty Ltd. * (Licensed under the Synesis Software Standard Source License: *  http://www.synesis.com.au/licenses/ssssl.html) * ////////////////////////////////////////////////////////// */namespace stlsoft{  /* C-style ANSI string */  inline char const *c_str_ptr_null(char const *s)  {    return s;  }  /* std::basic_string */  template &lt;class C&gt;  inline C const *c_str_ptr_null(std::basic_string&lt;C&gt; const &amp;s)  {    return (s.length() == 0) ? 0 : s.c_str();  }} // namespace stlsoftnamespace atlstl{  /* CComBSTR */  inline LPCOLESTR c_str_ptr_null(CComBSTR const &amp;s)  {    /* NULL is a valid BSTR value, so may return that */    return s.m_str;  }} // namespace atlstlnamespace mfcstl{  /* CString */  inline LPCTSTR c_str_ptr_null(CString const &amp;s)  {    /* CString always points to valid memory, whether its own      * CStringData or afxEmptyString.m_pchData     */    return s.IsEmpty() ? NULL : (LPCTSTR)s;  }} // namespace mfcstl</pre></BODY></HTML>