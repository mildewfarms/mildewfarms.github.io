<HTML><HEAD><TITLE>Shims</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h3>Shims</h3>The Shorter Oxford [13] defines a shim as "a thin slip, wedge or washer inserted in a space in machinery etc. to make parts fit or align." Shims are small, lightweight (in most all cases having zero runtime cost) components that help types "fit or align" into algorithms and client code. There are currently four fundamental shim types (with Access Shims a composite of Attribute and Conversion Shims):<P><h3>Attribute Shims</h3>These shims access some attribute, or aspect of state, of a typed instance. An example is STLSoft's <B>get_ptr()</B> shim, which accesses the raw pointer representation of a pointer, a smart-pointer class or any other type for which it is defined.<P>Attribute Shims are the most common type. Most are named in the form <B>get_xyz()</B> except where, like <B>c_str_ptr()</B>, they are part of a composite type.<P><h3>Conversion Shims</h3>Conversion Shims convert from one type to another, e.g., <B>to_int()</B>. They can involve the creation, and return, of temporaries, in which cases the return value must be used within their defining expression.<P>Apart from scenarios described in this article with <B>c_str_ptr</B>, where they need to have the same token names as other shim types, Conversion Shim names take the form of <B>to_xyz()</B>.<P><h3>Control Shims</h3>Control shims are basically commands that are invoked or effected on the instance to which the shim is applied. A good example is the <B>make_empty()</B> shim, which can be defined for any kind of container, and which causes instances to be emptied of their "contents."<P>Their names take the form of an imperative, such as <B>make_xyz()</B>, <B>set_abc()</B>.<P><h3>Logical Shims</h3>Logical Shims are similar to Attribute Shims, except that they deal only with logical concepts. For example, <B>is_empty()</B> asks/answers the question as to whether the instance is, or may be considered, empty. This can be applied to built-in types, pointers, and instances of user-defined types of any type for which the shim is defined.<P>Logical Shim names take the form of an interrogative, i.e., <B>is_xyz()</B>. </BODY></HTML>