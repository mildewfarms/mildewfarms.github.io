<HTML><HEAD><TITLE>Koenig Lookup, Includes and Namespaces</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h3>Koenig Lookup, Includes and Namespaces</h3>If all the types for which the shim you're using is defined are user-defined types, and are defined within the namespaces of their "shimmed" type, and the compiler(s) you are using support(s) Koenig lookup, then you do not need to specify any <B>using declarations</B>, and the whole thing works like a treat. Unfortunately, this being the real world, many compilers do not fully implement Koenig lookup, and we often want to define shims to include basic types and those defined within the global namespace. In such cases, we therefore need to use <B>using declarations</B> between the declaration of the types and the algorithms, classes or client code that is implemented in terms of the shims. The majority of the time this is simple both to do and to understand, but there are occasional confusions when dealing with heavily derivative code. In the long run, it'd be nice for popular shims (such as <B>get_ptr</B> and <B>c_str_ptr/c_str_len</B>) to be declared and defined in the namespace along their requisite types, including those in the global namespace (e.g., <B>char const *</B>) and the standard library (e.g., <B>std::basic_string&lt;&gt;</B>). Unless and until the C++ community buys in to the shims idea, however, you'll need to bear in mind that you may have to "use" them to use them.</BODY></HTML>