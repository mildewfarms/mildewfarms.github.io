<html>
<head>
<title>Common Knowledge: What are you, Anyway?</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body>
<h2>Common Knowledge: What are you, Anyway?</h2>
<p>After spending perhaps too much time reeling through the corridors of template 
  metaprogramming, "Common Knowledge" returns to its tutorialesque roots. In this 
  installment we look at one of the more obscure syntactic problems of template 
  programming: how to guide the compiler's parse when there is not enough information 
  available for the compiler to do the job on its own. Along the way we discuss 
  and disambiguate the "rebind" mechanism employed by the standard containers. 
  And we can't resist motivating some of the discussion with a nifty and potentially 
  useless template programming technique. 
<p>Even experienced C++ programmers are often put off by the rather complex syntax 
  required to program with templates. Of all the syntactic gyrations one has to 
  undertake, none is more initially confusing than the occasional need to help 
  the compiler disambiguate a parse. 
<h3>Types of Names, Names of Types</h3>
<p>As an example, let's look at a portion of an implementation of a simple, non-standard 
container template.</p>
<pre>template &lt;typename T>
class PtrList {
  public:
    //...
    typedef T *ElemT;
    void insert( ElemT );
  private:
    //...
};</pre>
<p>It's common practice for class templates to embed information about themselves 
  as nested type names. This allows us to access information about the instantiated 
  template through the appropriate nested name. 
<pre>
typedef PtrList&lt;State> StateList;
//...
StateList::ElemT currentState = 0;
</pre>
<p>The nested name <strong>ElemT</strong> allows us easy access to what the <strong>PtrList</strong>   template considers to be its element type. Even though we instantiated <strong>PtrList</strong>   with the type name <strong>State</strong>, the element type is <strong>State 
  *</strong>. In other circumstances, <strong>PtrList</strong> could be implemented 
  with a smart pointer element type, or a very sophisticated implementation of 
  <strong>PtrList</strong> might vary its implementation based on the properties 
  of the type used to instantiate it. Use of the nested type name helps to insulate 
  users of <strong>PtrList</strong> from these internal implementation decisions. 
<p>Here's another non-standard container: 
<pre>
template &lt;typename Etype>
class SCollection {
  public:
    //...
    typedef Etype ElemT;
    void insert( const Etype & );
  private:
    //... 
};
</pre>
<p>It appears that <strong>SCollection</strong> is designed according to the same 
  set of naming standards as <strong>PtrList</strong>, in that it also defines 
  a nested <strong>ElemT</strong> type name. Adherence to an established convention 
  is useful, because (among other advantages) it allows us to write generic algorithms 
  that work with a range of different container types. For example, we could write 
  a simple utility algorithm that fills a conforming container with the content 
  of an array of the appropriate element type: 
<pre>
template &lt;class Cont>
void fill( Cont &c, Cont::ElemT a[], int len ) { // error!
    for( int i = 0; i < len; ++i )
        c.insert( a[i] );
}
</pre>
<h3>Clueless Compilers</h3>
<p>Unfortunately, we have a syntax error. The nested name <strong>Cont::ElemT</strong>   is not recognized as a type name! The trouble is that, in the context of the 
  <strong>fill</strong> function template, the compiler does not have enough information 
  to determine whether the nested name <strong>ElemT</strong> is a type name or 
  a non-type name. The standard says that in such situations, the nested name 
  is assumed to be a non-type name. 
<p>If at first this makes no sense to you, you're not alone. However, let's see 
  what information is available to the compiler in different contexts. First, 
  let's consider the situation in which we have a non-template class: 
<pre>
class MyContainer {
  public:
    typedef State ElemT;
    //...
};
//...
MyContainer::ElemT *anElemPtr = 0;
</pre>
<p>There's clearly no problem here, since the compiler can examine the content 
  of the <strong>MyContainer</strong> class, verify that it has a member named 
  <strong>ElemT</strong>, and note that <strong>MyContainer::ElemT</strong> is 
  indeed a type name. Things are just as simple for a class that is instantiated 
  from a class template. 
<pre>
typedef PtrList&lt;State> StateList;
//...
StateList::ElemT aState = 0;
PtrList&lt;State>::ElemT anotherState = 0;
</pre>
<p>To the compiler, an instantiated class template is just a class, and there 
  is no difference in the access of a nested name from the class type <strong>PtrList&lt;State&gt;</strong>   than there is from <strong>MyContainer</strong>. In either case, the compiler 
  just examines the content of the class to determine whether <strong>ElemT</strong>   is a type name or not. 
<p>However, once we enter the context of a template, things are different because 
  there is less precise information available. Consider the following fragment: 
<pre>
template &lt;typename T>
void aFuncTemplate( T &arg ) {
    ...T::ElemT...
</pre>
<p>When the compiler encounters the qualified name <strong>T::ElemT</strong>, 
  what does it know? From the template header it knows that <strong>T</strong>   is a type name of some sort. It can also guess that <strong>T</strong> is a 
  class name because we've employed the scope operator (<strong>::</strong>) to 
  access a nested name of <strong>T</strong>. But that's all the compiler knows, 
  because there is no information available about the content of <strong>T</strong>. 
  For instance, we could call <strong>aFuncTemplate</strong> with a <strong>PtrList</strong>, 
  in which case <strong>T::ElemT</strong> would be a type name: 
<pre>
PtrList&lt;State> states;
//...
aFuncTemplate( states ); // T::ElemT is PtrList&lt;State>::ElemT
</pre>
<p>But suppose we were to instantiate <strong>aFuncTemplate</strong> with a different 
  type? 
<pre>
struct X {
    double ElemT;
    //...
};
X anX;
//...
aFuncTemplate( anX ); // T::ElemT is X::ElemT
</pre>
In this case, <strong>T::ElemT</strong> is the name of a data member; a non-type 
name. What's a compiler to do? The standard tossed a coin, and in cases where 
it can't determine the type of a nested name, the compiler will assume the nested 
name is a non-type name. That is the cause of the syntax error in the <strong>fill</strong> function template above. 
<h3>Clue In the Compiler</h3>
To deal with this situation, we must sometimes explicitly inform the compiler 
when a nested name is a type name. 
<pre>
template &lt;typename T>
void aFuncTemplate( T &arg ) {
    ...typename T::ElemT...
</pre>
<p>Here we've used the <strong>typename</strong> keyword to tell the compiler 
  explicitly that the following qualified name is a type name. This allows the 
  compiler to parse the template correctly. Note that we are telling the compiler 
  that <strong>ElemT</strong> is a type name, not <strong>T</strong>. The compiler 
  can already determine that <strong>T</strong> is a type name. Similarly, if 
  we were to write 
<pre>
typename A::B::C::D::E
</pre>
<p>we'd be telling the compiler that <strong>E</strong> is a type name. 
<p>Of course, if <strong>aFuncTemplate</strong> is instantiated with a type that 
  does not satisfy the requirements of the parsed template, it will result in 
  a compile time error. 
<pre>
struct Z {
    // no member named ElemT...
};
Z aZ;
//...
aFuncTemplate( aZ ); // error! no member Z::ElemT
aFuncTemplate( anX ); // error! X::ElemT is not a type name
aFuncTemplate( states ); // OK. PtrList&lt;State>::ElemT is a type name
</pre>
<p>Now we can rewrite the <strong>fill</strong> function template to parse correctly: 
<pre>template &lt;class Cont>
void fill( Cont &c, typename Cont::ElemT a[], int len ) { // OK

    for( int i = 0; i < len; ++i )
        c.insert( a[i] );
}
</pre>
<h3>Gotcha: Failure to Employ typename with Permissive Compilers</h3>
Note that, while the use of typename is required to recognize a nested type name 
if the compiler doesn't have enough information, use of <strong>typename</strong> outside of a template is illegal. 
<pre>
PtrList&lt;State>::ElemT elem; // OK
typename PtrList&lt;State>::ElemT elem; // error!
</pre>
<p>This is a frequent source of errors when moving code from a "template" context 
  to a non-template context and vice versa. For example, consider the use of a 
  template that selects one of two types at compile time based on a Boolean value: 
<pre>
void f() {
    Select&lt;cond,int,int *>::R r1; // OK
    typename Select&lt;cond,int,int *>::R r2; // error!
    //...
}
</pre>
<p>Since the compiler has all the information about the template arguments available, 
  there is no need for -- and it would be illegal to -- employ <strong>typename</strong>   before the <strong>Select</strong>. If the function <strong>f</strong> is rewritten 
  as a template, however, we may use <strong>typename</strong> even if it is not 
  required. 
<pre>
template &lt;typename T&gt;
void f() {
    Select&lt;cond,int,int *&gt;::R r1; // #1: OK, typename not required
    typename Select&lt;cond,int,int *&gt;::R r2; // #2: superfluous
    Select&lt;cond,T,T *&gt;::R r3; // #3: error! need typename
    typename Select&lt;cond,T,T *&gt;::R r4; // #4: OK
    //...
}
</pre>
<p>Note in case #2 above that <strong>typename</strong> is not required, but is 
  permitted. 
<p>The most problematic case is case #3, because many compilers will not diagnose 
  the error, and will interpret the nested name <strong>R</strong> as a type name. 
  (Yes, it <em>is</em> a type name, but it's not <em>supposed</em> to be parsed 
  as a type name.) Later, when the code is ported to a conforming compiler the 
  error will be diagnosed. For this reason, when programming with C++ templates, 
  even if you must use a non-conforming compiler, it's often a good idea to check 
  your code with at least one highly conforming compiler. 
<h3>Intermezzo: Expanding Monostate Protopattern</h3>
Let's take a short break from template parsing problems and have a look at a technique 
in search of an application. Let's consider the Monostate pattern. A Monostate 
is often a viable alternative to Singleton when trying to avoid the embarrassment 
of global variables. 
<pre>
class Monostate {
  public:
    int getNum() const { return num_; }
    void setNum( int num ) { num_ = num; }
    const std::string &getName() const { return name_; }
  private:
    static int num_;
    static std::string name_;
};
</pre>
<p>Like Singleton, a Monostate provides access to a single, shared copy of an 
  object. Unlike a typical Singleton, the sharing is accomplished not by lazy 
  construction of the object, but by access to static member data. Note that a 
  Monostate differs from a traditional (and now outmoded and denigrated) use of 
  a collection of static member data accessed through static member functions. 
  A Monostate provides <em>non-static</em> member functions to access its static 
  data. 
<pre>
Monostate m1;
Monostate m2;
//...
m1.setNum( 12 );
cout &lt;&lt; m2.getNum() &lt;&lt; endl; // shift 12
</pre>
<p>Every object of a particular Monostate type shares the same state. However, 
  users of the Monostate do not have to employ any special syntax to get this 
  result, unlike the corresponding use of a Singleton. 
<pre>
Singleton::instance().setNum( 12 );
cout &lt;&lt; Singleton::instance().getNum() &lt;&lt; endl;
</pre>
<h3>Expanding Monostate</h3>
What if we'd like to be able to add new static members to a Monostate? Ideally, 
this augmentation should take place without source code change, and if possible 
without recompilation of existing code that is not directly concerned with the 
augmentation. Let's look at a simple use of a template member function to accomplish 
this. 
<pre>
class Monostate {
  public:
    template &lt;typename T>
    T &amp;get() {
        static T member;
        return member;
    }
};
</pre>
<p>Note that a template member function will be instantiated as needed during 
  compilation, and that it cannot be virtual. Fortunately, we do not require that 
  our Monostate accessor functions be virtual. This version of Monostate implements 
  a "lazy creation" strategy for its shared static members. 
<pre>
Monostate m;
m.get&lt;int&gt;() = 12; // create an int member
Monostate m2;
cout &lt;&lt; m2.get&lt;int&gt;(); // access previously-created member
m2.get&lt;std::string&gt;() = "Hej!" // create a string member
</pre>
<p>Note that, unlike the lazy creation of a traditional Singleton, this lazy creation 
  takes place at compile time instead of runtime. 
<h3>Indexed Expanding Monostate</h3>
This approach is clearly far from ideal, at least if one wants to have more than 
one shared member of a particular type. One way to ameliorate the situation would 
be to add a second, "index," parameter to the template member function. 
<pre>
class IndexedMonostate {
  public:
    template &lt;typename T, int i>
    T &get();
};

template &lt;typename T, int i>
T &IndexedMonostate::get() {
    static T member;
    return member;
}
</pre>
<p>Now we have the ability to have more than one member of a particular type, 
  but the interface clearly leaves something to be desired. 
<pre>
IndexedMonostate im1, im2;
im2.get&lt;int,1066&gt;() = 12;
im2.get&lt;double,42&gt;() = im2.get&lt;int,1066&gt;()+1;
</pre>
<h3>Named Expanding Monostate</h3>
What we really need is a way to generate a mnemonic name for the user of a Monostate 
member that also encapsulates both a unique instantiation type for the template 
member function, and the actual type of the static member. 
<pre>
template &lt;typename T, int n>
struct Name {
    typedef T Type;
};
</pre>
<p>The <strong>Name</strong> template doesn't look like much, and it isn't. But 
  it's just enough. 
<pre>
typedef Name&lt;int,86&gt; grossAmount;
typedef Name&lt;double,007&gt; percentage;
</pre>
<p>Now we can generate readable (type) names that bind together an index and a 
  member type. Note that the actual values of the indexes are immaterial, as long 
  as the [type,index] pair is unique. A Named Monostate makes the assumption that 
  the type of the member can be extracted from its instantiation type. 
<pre>
class NamedMonostate {
  public:
    template &lt;class N>
    typename N::Type &amp;get() {
        static typename N::Type member;
        return member;
    }
};
</pre>
<p>This results in an improved user interface, without sacrificing any of the 
  simplicity or flexibility of the original technique. (Note the required use 
  of the <strong>typename</strong> keyword to tell the compiler that the nested 
  <strong>N::Type</strong> is a type name.) 
<pre>
NamedMonostate nm1, nm2;
nm1.get&lt;grossAmount&gt;() = 12;
nm2.get&lt;percentage&gt;() = nm1.get&lt;grossAmount>() + 12.2;
cout &lt;&lt; nm1.get&lt;grossAmount&gt;() * nm2.get&lt;percentage&gt;() &lt;&lt; endl;
</pre>
<p>Finally, we can fiddle with the interface a bit to get a more typical get/set 
  interface to the Named Monostate.[1] 
<pre>
class GSNamedMonostate {
  public:
    template &lt;typename N>
    void set( const typename N::Type &val ) {
        // This const_cast is actually safe,
        // since we are always actually getting
        // a non-const object. (Unless N::Type is
        // const, then you get a compile error here.)
        const_cast&lt;typename N::Type &>(get<N>()) = val;
    }
    template &lt;typename N>
    const typename N::Type &amp;get() const {
        static typename N::Type member;
        return member;
    }
};
</pre>
<h3>Protopattern? What's That?</h3>
As we mentioned earlier, this is a technique looking for an application. As such, 
we really don't have the right to call it a pattern. A design pattern is an encapsulation 
of existing successful practice. The term "protopattern" is usually applied to 
a technique that has been observed in one or two contexts, but has not (yet) been 
shown to be widely enough employed to deserve the "pattern" appellation. I'm stretching 
things a bit here by calling an Expanding Monostate a protopattern, since I can't 
point to even a single successful application of it! 
<h3>Template Names in Templates</h3>
Let's get back to the compiler's problems with parsing templates. The compiler's 
parsing problems are not limited to nested type names, and we encounter similar 
problems with nested template names. Recall that a class or class template may 
have a member that is a class or function template. 
<p>For example, an Expanding Monostate uses a template member function that is 
  instantiated as needed: 
<pre>
typedef Name&lt;int,86&gt; grossAmount;
typedef Name&lt;double,007&gt; percentage;
GSNamedMonostate nm1, nm2;
nm1.set&lt;grossAmount&gt;( 12 );
nm2.set&lt;percentage&gt;( nm1.get&lt;grossAmount&gt;() + 12.2 );
cout &lt;&lt; nm1.get&lt;grossAmount&gt;() * nm2.get&lt;percentage&gt;() &lt;&lt; endl;
</pre>
<p>In the code above, the compiler encounters no difficulty in determining that 
  <strong>get</strong> is the name of a template. The objects <strong>nm1</strong>   and <strong>nm2</strong> are of type <strong>GSNamedMonostate</strong>, and 
  the compiler has only to look up the names <strong>get</strong> and <strong>set</strong>   in the class. However, consider writing a generic function that could be used 
  to populate an Expanding Monostate object.[2] 
<pre>
template &lt;typename M>
void populate() {
    M m;
    m.get&lt;grossAmount>(); // syntax error!
    M *mp = &m;
    mp->get&lt;percentage>(); // syntax error!
}
</pre>
Once again, the problem is that the compiler knows nothing about the name <strong>M</strong> except that it is a type name. In particular, because it has no information about 
the member name <strong>get</strong> of <strong>M</strong>, it must assume that 
it is a non-type, non-template name. Therefore, the angle brackets in the expression 
<strong>m.get&lt;grossAmount&gt; () </strong>are parsed as less-than and greater-than 
operators, rather than as a template argument list. 
<p>The solution is to tell the compiler that the name <strong>get</strong> is 
  a template name rather than some other kind of name. 
<pre>
template &lt;typename M>
void populate() {
    M m;
    m.template get&lt;grossAmount>(); // OK
    M *mp = &m;
    mp->template get&lt;percentage>(); // OK
}
</pre>
<p>Hideous, isn't it? Similar to the analogous use of <strong>typename</strong>, 
  this particular use of the <strong>template</strong> keyword is only necessary 
  and legal within a template. 
<h3>Hints For Rebinding Allocators</h3>
We can also encounter the same parsing problem with a nested class template. The 
canonical example is in the implementation of an STL allocator.[3] 
<pre>
template &lt;class T&gt;
class AnAlloc {
  public:
    //...
    template &lt;class Other&gt;
    class rebind { 
      public:
        typedef AnAlloc&lt;Other&gt; other;
    };

    //...
};
</pre>
The class template <strong>AnAlloc</strong> contains the nested name <strong>rebind</strong>, 
which is itself a class template. It is used within the STL framework to create 
allocators "just like" the allocator that was used to instantiate a container, 
but for a different element type. For example: 
<pre>
typedef AnAlloc&lt;int> AI; // original allocator allocates ints
typedef AI::rebind&lt;double>::other AD; // new one allocates doubles
typedef AnAlloc&lt;double> AD; // legal! this is the same type
</pre>
<p>It may look a little odd, but using the <strong>rebind</strong> mechanism allows 
  one to create a version of an existing allocator for a different element type 
  without knowing the type of the existing allocator or the type of the element 
  it allocates. 
<pre>
typedef SomeAlloc::rebind&lt;ListNode>::other NewAlloc;
</pre>
<p>If the type name <strong>SomeAlloc</strong> follows the STL convention for 
  allocators, then it will have a nested <strong>rebind</strong> class template. 
  Essentially, we've said, "I don't know what kind of allocator this type is, 
  and I don't know what it allocates, but I want an allocator just like it that 
  allocates <strong>ListNodes</strong>! 
<p>This level of ignorance usually occurs only within a template, where precise 
  types and values are not known until much later, when the template is instantiated. 
  Consider the implementation of an STL-compliant list container of some sort. 
  Our list template takes two template arguments; an element type (<strong>T</strong>), 
  and an allocator type (<strong>A</strong>) that can allocate elements. (Like 
  the standard containers, our list provides a default allocator argument.) 
<pre>
template &lt; typename T, typename A = std::allocator&lt;T> >
class OurList {
    struct Node {
        //...
    };
    typedef A::rebind&lt;Node>::other NodeAlloc; // error!
};
</pre>
As is typical for lists and other node-based containers, our list does not actually 
allocate and manipulate <strong>T</strong>s. Rather, it allocates and manipulates 
nodes that contain a member of type <strong>T</strong>. This is the situation 
we described earlier. We have some sort of allocator that knows how to allocate 
objects of type <strong>T</strong>, but we want to allocate objects of type <strong>OurList&lt;T,A&gt;::Node</strong>. 
However, when we attempt to <strong>rebind</strong>, we get a syntax error. 
<p>Once again, the problem is that the compiler has no information about the type 
  name <strong>A</strong> at this point other than that it is a type name. The 
  compiler has to make the assumption that the nested name <strong>rebind</strong>   is a non-template name, and the angle bracket that follows is parsed as a less-than. 
  But our troubles are just beginning. Even if the compiler were able to determine 
  that <strong>rebind</strong> is a template name, when it reached the (doubly) 
  nested name <strong>other</strong>, it would have to assume that it's a non-type 
  name! Time for some clarification. The typedef must be written as follows: 
<pre>
typedef typename A::template rebind&lt;Node>::other NodeAlloc;
</pre>
<p>The use of <strong>template</strong> tells the compiler that <strong>rebind</strong>   is a template name, and the use of <strong>typename</strong> tells the compiler 
  that the whole mess refers to a type name. Simple, right? 
<p>
<h3>Notes and References</h3>
<p>[1] However, note that such an interface is not always a good idea. See Gotcha 
  #80: Get/Set Interfaces in C++ Gotchas (Addison-Wesley, 2003). 
<p>[2] In point of fact, you probably wouldn't want to do this, although populate 
  is actually quite an interesting function template from a philosophical point 
  of view. It is created to force a number of template instantiations, which is 
  a compile time operation. So there really is no need to actually call the function 
  at runtime. However, if the function is not called, it will not be instantiated 
  and the instantiations it provokes will not be accomplished. Other alternatives 
  might be to take the function's address, rather than call it, or perform an 
  explicit instantiation of it, these will still cause the function to exist at 
  runtime, when it is not needed. 
<p>[3] If you're not familiar with STL allocators, don't worry, be happy. Previous 
  familiarity with them is not necessary for following this discussion. An allocator 
  is a class type that is used to customize memory management operations for STL 
  containers. Allocators are typically implemented as class templates. 
<h3>About the Author</h3>
Stephen C. Dewhurst (&lt;www.semantics.org&gt;) is the president of Semantics 
Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. 
He specializes in C++ consulting, and training in advanced C++ programming, STL, 
and design patterns. Steve is also one of the featured instructors of The C++ 
Seminar (&lt;www.gotw.ca/cpp_seminar&gt;). 
</body>
</html>
