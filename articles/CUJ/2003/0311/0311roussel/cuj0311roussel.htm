<html>
<head>
<title>Generic Object-Oriented Differential Equation Integrators</title>

</head>

<body>
<h2>Generic Object-Oriented Differential Equation Integrators</h2>

<h3>By Catharine J. Roussel and Marc R. Roussel</h3>


<p>Over the last few years, we have been migrating a small library of numerical code originally written in Fortran, first to C, and then to C++. Like most people who undertake this journey, at first we didn't take full advantage of C++'s features. Although we wrote the occasional class, the overall style would have been familiar to a Fortran 77 programmer.</p>
<p>Recently, we have written differential equation integrators that truly demonstrate C++'s benefits in numerical computing. In this article, we present C++ classes to organize and protect data. The code uses inheritance to group similar data structures and procedures into families that share some elements and that are, in appropriate contexts, interchangeable. It also uses templates to express type-independent algorithms, minimizing the number of special cases to be independently coded. The result is tight, readable code that is easy to maintain and extend.</p>



<h3>Mathematical Background</h3>


<p>A differential equation is a relationship between a variable and its derivatives. The very simplest differential equations (first-order ordinary differential equations) tell you how fast one thing changes when another is changed:</p>


<pre>
<i>dx/dt=f(x,t</i>)
</pre>

<p>Here, the dependent variable <i>x</i> might be the mass of algae in a lake, a vector of concentrations of chemicals in a beaker, or a matrix of particle positions and velocities arising from Newton's laws of motion. The independent variable <i>t</i> might be time in the aforementioned applications, but in other contexts it might be a position, a voltage, or indeed any other scalar quantity with respect to which it makes sense to measure a change in <i>x.</i> The integrators we describe in this article solve what is known as the "initial-value problem," which is to find a function <i>x(t)</i> that both satisfies the differential equation and passes through a given initial value of <i>x.</i> We only deal with first-order ordinary differential equations (equations involving only the ordinary first derivative) since other kinds of differential equations are commonly reduced to this case for numerical solution.</p>

<p>The solutions of most differential equations cannot be expressed as simple, algebraic formulas. The ability to obtain approximate numerical solutions is therefore quite important. Routines that carry out the appropriate numerical algorithms are called "integrators." A scientists' toolbox must contain a number of different integrators since no single numerical method is appropriate to all differential equations. Inheritance from a well-designed base class makes it possible to write a suite of integrators with a common interface. Furthermore, because <i>x</i> can be a simple variable or a container with arithmetic operators (a <b>valarray</b> or matrix, for example), the integration algorithms are best expressed using templates.</p>

<p>A differential equation defines an evolution of continuously varying quantities. Unfortunately, digital computers operate on data in discrete steps. Therefore, algorithms for integrating differential equations must increment the time (or equivalent independent variable) in a series of small steps. In other words, the continuous variable <i>t</i> is replaced by a sequence of discrete values <i>t</i><sub>0</sub>, <i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, and so on. The difference between any two subsequent values of <i>t</i> is the step size <i>h.</i> In general, the smaller the step size, the more accurate the numerical solution. For each <i>t</i><i><sub>i</sub></i>, there is a corresponding value of the dependent variable <i>x</i><i><sub>i</sub></i>. In the initial value problem, you are given an initial point (<i>x</i><sub> 0</sub>,<i>t</i><sub>0</sub>).</p>



<h3>The Integrator Base Class</h3>


<p><A HREF="0311roussell1.htm" target="_BLANK">Listing 1</A> defines an <b>Integrator</b> base class. This base class describes the common features of differential equation integrators. Following common practice in physics, the current value of the dependent variable (<i>x</i> in the aforementioned differential equation) is called <b>statevector</b>. Since the <b>statevector</b> could be either a single value or a set of values stored in a container, we use a template parameter <b>C</b> to avoid forcing a particular representation for <b>statevector</b> and related quantities. Although the independent variable <b>t</b> (and the step size <b>h</b>) generally are stored as a <b>double</b>, in some applications <b>long double </b>or <b>float</b> types might be appropriate, so we used a template parameter <b>T</b> for the type of the independent variable as well.</p>


<p>Users must supply a function that returns the value of<i> f(x,t).</i> The base class stores a pointer (<b>return_derivs</b>) to this function. <b>return_derivs</b>'s arguments are values of the dependent and independent variables and a reference to an object in which the value of<i> f(x,t)</i> is stored. It might be more natural if <b>return_derivs</b> actually returned the value of <i>f</i>, but sometimes in numerical code aesthetics must be sacrificed for efficiency. In this case, the assignment of a returned object would require at least one copy operation per integration step. If <b>statevector</b> is a container, copying the contents can be expensive. The alternative method we use here lets <b>return_derivs</b> write elements directly into a preallocated container. This means that the container that holds the derivatives' values must be allocated (sized and, in the case of a matrix, shaped) before the first call to <b>return_derivs</b>.</p>

<p>Each class derived from <b>Integrator</b> supplies a function (<b>step</b>), which performs a single integration step. Making <b>step</b> a pure virtual function of the base class creates a common mechanism by which programs call the derived integrators. Similarly, the class provides the virtual function <b>set_step_size</b> to reset the value of <b>h.</b> A trivial definition of <b>set_step_size</b> is appropriate for some integrators, but not for others. </p>

<p>The base class also provides a pair of public utility functions, <b>current_time</b> and <b>get_state</b>, for reading out the state of the system. These functions and the constructor have straightforward implementations.</p>



<h3>Euler's Method: A Simple Integrator</h3>


<p>Euler's method, the simplest integrator in our suite, assumes that the rate of change of <i>x</i> is constant over the interval from <i>t</i><i><sub>i</sub></i> to <i>t</i><i><sub>i</sub></i><sub>+1</sub>. As a result of this simple assumption, Euler's method tends to require small step sizes to give reasonable accuracy. Nevertheless, there are applications in which more sophisticated methods are less efficient. In Euler's method, the predicted value of <i>x</i><i><sub>i</sub></i><sub>+1</sub> is calculated directly from the following formula:</p>


<pre>
<i>x</i><i><sub>i</sub></i><sub>+1</sub>=<i>x</i><i><sub>i</sub></i>+<i>hf(x</i><i><sub>i</sub></i><i>,t</i><i><sub>i</sub></i><i>)</i>
</pre>

<p>The <b>Euler</b> derived class is easy to implement. <A HREF="0311roussell2.htm" target="_BLANK">Listing 2</A> shows both the class definition and the implementation of the Euler integrator. The class uses a private object (<b>dxdt</b>) to store the value of <i>f(x,t).</i> This object must be the same size and shape as <b>statevector</b>. Purely as an optimization, we keep <b>dxdt</b> around as a member object even though its value isn't "state" to be stored from step to step. This avoids the overhead of creating and destroying a temporary <b>dxdt</b> in every <b>Euler::step</b>, which can significantly degrade the performance of a program since <b>statevector</b> will often be an expensive-to-create container such  as a <b>valarray</b> or matrix.</p>

<p>The inclusion of <b>dxdt</b> in class <b>Euler</b> creates a small problem: How do you construct this object? You can't default construct it because it must be the right size and shape to receive derivative information in <b>Euler::step</b>. However, <b>C</b> can represent different types. For instance, <b>C</b> could be <b>double, valarray&lt;complex&lt;double&gt;&gt;, matrix&lt;float&gt;</b> [1], or just about any other class with arithmetic operators. A <b>double</b> has no dimensions; a <b>valarray</b> has a single dimension, while a matrix has at least two. Short of requiring users to provide a shape transfer function between two objects of class <b>C,</b> we see just one solution to this problem &#151; copy construction of <b>dxdt</b> from <b>x0</b> necessarily gives <b>dxdt</b> the size and shape of <b>statevector</b>. The particular values contained in <b>x0</b> are not relevant, but since construction of <b>Euler</b> objects occurs much less frequently than invocation of <b>Euler::step</b>, the unnecessary copy operations have essentially no effect on performance.</p>

<p>Class <b>Euler</b> introduces an extra template parameter (<b>B</b>) not present in the <b>Integrator</b> base class template. If <b>C</b> is a container class, <b>B</b> represents the type stored in the container. If <b>C</b> is not a container, <b>B</b> and <b>C</b> are identical. <b>B</b> is used in <b>Euler::step</b> to cast<b> h</b>, which is of type <b>T</b>, to type <b>B.</b> <A HREF="0311roussell3.htm" target="_BLANK">Listing 3</A> shows an application in which this cast is necessary. The complex-valued equations given in this example arise in quantum mechanics [2]. The problem is that the <b>valarray&lt;B&gt; </b>template class only defines arithmetic operations with scalars of type <b>B</b> and sometimes you want mixed calculations, specifically in: </p>

<pre>
<b>statevector+=B(h)*dxdt;</b>
</pre><p>Since template classes require exact matching of argument types, operations between types <b>T</b> and <b>valarray&lt;B&gt;</b> are not defined if <b>T</b> and <b>B</b> are different. In this example, <b>B</b> is <b>complex&lt;double&gt; </b>and <b>T</b> is <b>double</b>. The compiler will not automatically convert <b>h</b> to <b>complex&lt;double&gt;,</b> making the explicit cast necessary. </p>




<h3>Protecting the Integrator's Data</h3>


<p>While in principle it is always possible to use Euler's method; in practice, there are some problems for which it fails unless the step size is extremely small, making the run time exceedingly long. A different integration method is then needed. This section describes the implementation of a group of integration methods known collectively as "Gear methods" [3]. All the Gear methods are essentially the same, except for a single equation, which appears in an inner loop. For example, the rule for the second-order Gear method is:</p>


<pre>
<i>x</i><i><sub>i</sub></i><sub>+1</sub>=(4<i>x</i><i><sub>i</sub></i>-<i>x</i><i><sub>i</sub></i><sub>-1</sub>+2<i>hf</i>(<i>x</i><i><sub>i</sub></i><sub>+1</sub>,<i>t</i><i><sub>i</sub></i><sub>+1</sub>))/3
</pre>

<p>The implementation of an integrator based on this formula raises at least two new issues: First note that the next value of the state vector, <i>x</i><i><sub>i</sub></i><sub>+1</sub>, appears on both sides of the equation. To obtain <i>x</i><i><sub>i</sub></i><sub>+1</sub>, this equation has to be solved either by the Newton-Raphson method [4] or by simple iteration. For simplicity, our code uses the latter method, although both approaches have their advantages [5].</p>

<p>Additionally, we need <i>x</i><i><sub>i</sub></i><sub>-1 </sub>(the previous value of the state vector) as well as <i>x</i><i><sub>i</sub></i> (the current value) to calculate <i>x</i><i><sub>i</sub></i><sub>+1</sub>. This creates a bootstrapping problem since, in the first integration step, we only have <i>x</i><sub>0</sub>. Calculating <i>x</i><sub>1</sub> by the second-order Gear method would require <i>x</i><sub>-1</sub>, but there is no such point. Fortunately, the first-order Gear method doesn't require any previous points. If users request a second-order Gear method, the first-order method is used to generate the first point, and the second-order method can be used thereafter. Higher-order Gear methods require more past state vectors. These methods are similarly bootstrapped by working up from the lower-order methods. Ideally, all of this would be invisible to users.</p>

<p><A HREF="0311roussell4.htm" target="_BLANK">Listing 4</A> shows the definition of class <b>Gear</b>. The past states are stored in a deque called <b>past_state</b>. <b>Gear::step</b> (<A HREF="0311roussell5.htm" target="_BLANK">Listing 5</A>), in addition to updating <b>statevector</b>, manages the deque as well as a housekeeping variable (<b>curr_order</b>), which helps keep track of the Gear method to be used in the next integration step.</p>

<p>The Gear methods all expect that the previously stored state vectors are equally spaced in time. This potentially creates a data-coherency problem if the user wants to change the step size. This problem, which is common to many integration methods, is why we included the virtual function <b>set_step_size</b> in the base class (<A HREF="0311roussell1.htm" target="_BLANK">Listing 1</A>). <b>Gear::set_step_size</b> (<A HREF="0311roussell5.htm" target="_BLANK">Listing 5</A>) overrides <b>Integrator::set_step_size</b> to guarantee that bootstrapping issues are automatically addressed. Users don't have to worry about the details of the bootstrapping procedure because the constructor, <b>Gear::step</b> and <b>Gear::set_step_size</b> all work together to ensure that the integrator's internal data will remain in a consistent state.</p>



<h3>Optimization Issues</h3>


<p>The functions <b>Gear1xnext, Gear2xnext, Gear3xnext, </b>and <b>Gear4xnext</b> implement the Gear formulas of orders one through four. These functions are accessed in <b>Gear::step</b> through an array of pointers (<b>calc_xnext</b>) defined in the class template (<A HREF="0311roussell4.htm" target="_BLANK">Listing 4</A>) with the help of a <b>typedef</b>. Although the syntax is not particularly intuitive, this technique has several advantages over some of the alternatives. In our original design of this class, there were separate <b>step</b> functions for each order of Gear's method. Most of the code in each of these functions was identical except for the equation iterated. Using a single <b>step</b> function that selects among the Gear formulas greatly reduced the amount of code, reducing maintenance headaches. Because the functions accessed through the <b>calc_xnext</b> array are member functions, they can access class data members directly, saving some copy operations. Finally, the use of an array of pointers to class member functions eliminates the need for an awkward <b>switch</b> or <b>if...else</b> statement in our integrator.</p>


<p><A HREF="0311roussell5.htm" target="_BLANK">Listing 5</A> shows the code for two of the Gear formulas (functions <b>Gear1xnext</b> and <b>Gear2xnext</b>). These functions were hand-optimized to avoid the creation of temporary objects. The resulting code is not as readable as it might be, a necessary concession to efficiency. For instance, the obvious implementation of the first-order Gear formula:</p>

<pre>
xnext = statevector + B(h)*dxdt;
</pre>
<p>has the meaning:

<pre>
xnext = operator+(statevector,<p></p>
operator*(B(h),dxdt));
</pre>

<p>which creates two temporary objects of class <b>C</b> &#151; one to hold the result of the multiplication, and one to hold the result of the addition. Our hand-optimized code for the first-order Gear formula (function <b>Gear1xnext</b>) requires no temporaries and runs about twice as fast as the obvious implementation in some of our tests [6]. It is not possible to completely avoid temporary objects while evaluating the higher-order Gear formulas (such as the second-order formula contained in <b>Gear2xnext</b>), but speedups by factors of two to three are still obtained by minimizing the number of temporary objects created.</p>


<p>Class <b>Gear</b> requires users to provide a function (pointed to by the class member <b>approx_equal</b>), which performs a comparison between elements of type <b>C</b>. This function determines the convergence of the iterative process used to solve the Gear equation. Convergence criteria are problem specific, so it is not desirable to build a universal comparison method into the integrator. <A HREF="0311roussell6.htm" target="_BLANK">Listing 6</A> gives an example of a convergence test corresponding to the differential equations in <A HREF="0311roussell3.htm" target="_BLANK">Listing 3</A>. If the iterations do not converge, <b>Gear::step</b> (<A HREF="0311roussell5.htm" target="_BLANK">Listing 5</A>) throws an exception. The calling program may then call <b>Gear::set_step_size</b> with a smaller value of <b>h</b>.</p>

<p>The user-supplied functions <b>return_derivs</b> and <b>approx_equal</b> are crucial to the performance of the program since they can be called millions of times during the solution of a problem. Their execution can therefore dominate the program's run time. Accordingly, they must be written with considerable care. For instance, it is sometimes preferable to operate on <b>valarray</b>s element-by-element (as we do in the convergence testing function in <A HREF="0311roussell6.htm" target="_BLANK">Listing 6</A>) if the alternative requires the creation and copying of temporary <b>valarray</b> objects.</p>



<h3>Conclusions</h3>


<p>From the user's point of view, the integrators mostly differ in their constructors. Since they are all derived from a common base class, a program can select an integrator at run time, as in <A HREF="0311roussell7.htm" target="_BLANK">Listing 7</A>. The rest of the program's code does not depend on the method selected. Dynamic binding of the virtual functions lets <b>dSchrodinger-&gt;step() </b>be called polymorphically. </p>


<p>Generic programming with templates lets users choose the most appropriate representation for their data. In addition to leading to more transparent code, this enables optimizations that might not otherwise be possible. For instance, traditional differential equation integrators are written as functions that force the dependent variable to be stored in an array. If the problem to be solved consists of a single differential equation in a single scalar variable (a one-element array, for instance), array-oriented code would waste some processor time managing unnecessary loop counters. In contrast, our code lets class <b>C</b> be anything from a simple <b>double</b> to a container class. Since the compiler sees the types, it can produce efficient code for any given case.</p>

<p>The integrators presented here demonstrate that C++'s features make it highly suitable for writing numerical code. We can imagine many extensions to our integrator suite. For one thing, none of our current integrator classes perform any error control. Our design makes it easy to add this functionality by deriving classes from <b>Euler</b> or <b>Gear</b>. Because these new classes would be derived from our <b>Integrator</b> base class, albeit indirectly, using them would require only trivial changes to programs that use our current integrators.</p>

<p>During the development of this code, we experimented with a number of variations on the themes presented here. At every step of the process, we considered three factors: efficiency, source code readability, and ease-of-use of the resulting libraries. We might tolerate compromises in the latter two areas if significant performance gains result, but we would be reluctant to make execution time our only criterion for judging a design. CPU time is a precious resource, programmer time more so. Writing code with acceptable performance while meeting our other design goals takes a good deal of experimentation. The effort is repaid when applications can be rapidly built from reliable, efficient software components.</p>



<h3>References</h3>


<p>[1]	The C++ Standard Library does not include matrix templates. However, the Matrix Template Library (<a href="http://www.lsc.nd.edu/research/mtl/">http://www.lsc.nd.edu/research/mtl/</a>) provides a variety of matrix types.</p>

<p>[2]	The differential equations in <A HREF="0311roussell3.htm" target="_BLANK">Listing 3</A> are a crude spatial discretization of the time-dependent Schr&ouml;dinger equation for a particle in a square well. Each component of the <b>valarray psi </b>represents the value of the wave function at a particular point in space.</p>

<p>[3]	Gear methods are particularly appropriate to differential equations that describe systems in which processes occur on vastly different time scales. Problems of this sort are common in chemistry. The sample code (available at <a href="http://www.cuj.com/code/">http://www.cuj.com/code/</a>) includes a classical model of an oscillating chemical reaction called the "Oregonator," which has this property.</p>

<p>[4]	Michael L. Perry. "A Reusable Nonlinear System Solver, Part 1," <i>C/C++ Users Journal,</i> June 2000; "Part 2," August 2000.</p>

<p>[5]	<i>Practical Numerical Algorithms for Chaotic Systems, </i>T.S. Parker and L.O. Chua. Springer-Verlag, 1989.</p>

<p>[6]	A similar hand optimization of the Euler method (not shown) eliminates the creation of one temporary object, significantly improving the performance of this integrator. </p>

<hr><I>
<b>Catharine Roussel</b> studied biology at Queen's University and computer science at the University of Toronto. She is currently a Research Assistant at the University of Lethbridge. She can be contacted at <a href="mailto:rousselc@cs.uleth.ca">rousselc@cs.uleth.ca</a>.
<b>
Marc Roussel</b> holds a Ph.D. in chemistry from the University of Toronto. He is an Associate Professor and the Coordinator of Biochemistry at the University of Lethbridge. The Roussels' research in nonlinear dynamics focuses on applications of differential equations in biology and chemistry. Marc can be contacted at <a href="mailto:roussel@uleth.ca">roussel@uleth.ca</a>.</I>

<hr>

</body>
</html>
