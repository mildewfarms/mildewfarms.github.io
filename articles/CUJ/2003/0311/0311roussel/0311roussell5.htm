<html>
<head>
<title>Generic Object-Oriented Differential Equation Integrators</title>

</head>

<body><h4>Listing 5:	<i>Core functions of the Gear integrator.</i></h4>

<pre>
template &lt;class C, class T, class B&gt; void
Gear&lt;C,T,B&gt;::step(void)
{
    // Iterate until xnext is self-consistent.
    xnext = statevector;
    unsigned int iter = 0;
    do {
        xtemp = xnext;
        return_derivs(xnext,t+h,dxdt);
        (this-&gt;*(calc_xnext[curr_order-1]))();
        iter++;
        if (iter &gt; maxiter)
          throw std::runtime_error
            ("Too many iterations in Gear method.");
    } while (!approx_equal(xtemp,xnext));

    // Past state queue management
    past_state.push_back(statevector);
    if (order &gt; curr_order) curr_order++;
    else past_state.pop_front();

    // Update current state
    statevector = xnext;
    t += h;
}

// First order Gear formula: xnext = statevector + h*dxdt
template &lt;class C, class T, class B&gt;
void Gear&lt;C,T,B&gt;::Gear1xnext(void)
{
    xnext = dxdt;    xnext *= B(h);    xnext += statevector;
}

// Second order Gear formula:
// xnext = (4*statevector - past_state[0] + 2*h*dxdt)/3
template &lt;class C, class T, class B&gt;
void Gear&lt;C,T,B&gt;::Gear2xnext(void)
{
    xnext = dxdt;    xnext *= B(2.0*h);
    xnext += B(4.0)*statevector;    xnext -= past_state[0];    
    xnext /= B(3.0);
}

// Gear3xnext and Gear4xnext not shown

template &lt;class C, class T, class B&gt;
void Gear&lt;C,T,B&gt;::set_step_size(T new_h)
{
    past_state.clear();
    curr_order = 1;
    h = new_h;
}
</pre>
</body>
</html>
