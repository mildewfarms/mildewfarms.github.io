<html>
<head>
<title>Generic Object-Oriented Differential Equation Integrators</title>

</head>

<body><h4>Listing 3:	<i>An application where a cast is necessary.</i></h4>


<pre>
#include &lt;complex&gt;
#include &lt;valarray&gt;
#include &lt;integrators.h&gt;
using namespace std;

namespace discretization_data
{
    const complex&lt;double&gt; i(0,1);
    unsigned int nmesh = 10;
}

void discretized_odes(const valarray&lt;complex&lt;double&gt; &gt; &amp;psi,
            const double t, valarray&lt;complex&lt;double&gt; &gt; &amp;dpsidt)
{
    using namespace discretization_data;
    dpsidt[0] = i*(psi[1]-2.0*psi[0]);
    dpsidt[nmesh-1] = i*(psi[nmesh-2]-2.0*psi[nmesh-1]);
    for (int loop=1; loop&lt;nmesh-1; loop++)
        dpsidt[loop] = i*(psi[loop+1] - 2.0*psi[loop]
                      + psi[loop-1]);
}

int main()
{
  using namespace discretization_data;
  // Initial conditions
  valarray&lt;complex&lt;double&gt; &gt;
    psi(complex&lt;double&gt;(1.0/nmesh), nmesh);

  Euler&lt;valarray&lt;complex&lt;double&gt; &gt;, double, complex&lt;double&gt; &gt;
    dSchrodinger(psi, 0.0, 0.01, discretized_odes );

  while (dSchrodinger.current_time() &lt; 50)
      dSchrodinger.step();
  //Some output statements would be added to a real program...
}
</pre>
</body>
</html>
