<html>
<head>
<title>Generic Object-Oriented Differential Equation Integrators</title>

</head>

<body><h4>Listing 4:	<i>Definition of class </i>Gear.</h4>

<pre>
template &lt;class C, class T, class B&gt;
class Gear : public Integrator&lt;C,T&gt;
{
    private:
        bool (*approx_equal)(const C&amp;, const C&amp;);
        const unsigned int order, maxiter;
        unsigned int curr_order;
        std::deque&lt;C&gt; past_state;
        C xnext, xtemp, dxdt;

        // Gear formulas
        typedef void (Gear&lt;C,T,B&gt;::*xnext_functions)(void);
        xnext_functions calc_xnext[4];
        void Gear1xnext(void);
        void Gear2xnext(void);
        void Gear3xnext(void);
        void Gear4xnext(void);

    public:
        Gear(const unsigned int, const C &amp;, const T, const T,
             const unsigned int,
             void (*)(const C&amp;, const T, C&amp;),
             bool (*)(const C&amp;, const C&amp;));
        void step(void);
        void set_step_size(T);
};

template &lt;class C, class T, class B&gt;
Gear&lt;C,T,B&gt;::Gear(const unsigned int Gear_order, const C &amp;x0,
                  const T t0, const T h_init, 
                  const unsigned int maxiterations,
                  void (*dxdt_calc)(const C&amp;, const T, C&amp;),
                  bool (*almost)(const C&amp;, const C&amp;))
    :Integrator&lt;C,T&gt;(x0, t0, h_init, dxdt_calc),
     order(Gear_order), maxiter(maxiterations), xnext(x0),
     xtemp(x0), dxdt(x0)
{
    approx_equal = almost;
    curr_order = 1;
    calc_xnext[0] = &amp;Gear&lt;C,T,B&gt;::Gear1xnext;
    calc_xnext[1] = &amp;Gear&lt;C,T,B&gt;::Gear2xnext;
    calc_xnext[2] = &amp;Gear&lt;C,T,B&gt;::Gear3xnext;
    calc_xnext[3] = &amp;Gear&lt;C,T,B&gt;::Gear4xnext;
}
</pre>
</body>
</html>
