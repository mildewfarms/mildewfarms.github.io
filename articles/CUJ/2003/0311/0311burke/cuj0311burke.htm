<html>
<head>
<title>An Extensible C++ Framework for Stochastic Differential Equations</title>

</head>

<body>
<h2>An Extensible C++ Framework for Stochastic Differential Equations</h2>

<h3>By Dave Burke</h3>


<a name="rs1"></a><a href="0311burkes1.htm">Sidebar: The Black-Scholes Model</a>
<hr>

<p>Engineers and scientists frequently use differential equations to model the effects of change, motion, and growth. For example, differential equations predict the motion of particles, changes in animal populations, and the movement of resources in a financial market. As models become more accurate and sophisticated, random or stochastic effects become more significant. In fact, the randomness in the system is sometimes the most interesting part of the model. To address such problems, a new area of mathematics called "stochastic calculus" has emerged. Stochastic calculus is actually a stochastic generalization of classical differential calculus. Just as you may use ordinary deterministic differential equations (ODEs) to model an ideal system with no noise, you use stochastic differential equations (SDEs) to model a more realistic system that includes the effects of noise. An SDE is a generalization of an ODE &#151; when the noise is negligible, the equation reduces to an ODE. You can see this effect clearly in the conventional form of the SDE, which consists of two components:</p>
<ul>

  <li>The drift term, the deterministic part.

  <li>The diffusion term, the stochastic part. 


</ul>

<p>Scientists who model real-world processes often begin with the assumption that noise is a passive, low-intensity background disturbance that may be averaged out to yield deterministic equations for the system. However, this practice of averaging noise effects often obscures distinctive and relevant behavior (for example, when the noise actually interacts with the system). Therefore, a stochastic model is the only realistic model for certain systems. A classic example of a case where noise interacts with the system is found in the problem of modeling the price of a stock option. Indeed, this application of SDEs initiated the entire options- and risk-management industry in finance, pioneered in the Nobel-prize-winning work of R. Merton and F. Black and M. Scholes [1][2]. By applying their work, you can calculate a fair price for a stock option at a given time &#151; something that would not be possible using a set of deterministic equations that ignore stochastic effects. While it is likely that similar techniques will become pervasive in other commercial areas (insurance and marketing, for instance), there are other applications for SDEs in science and engineering, including radio astronomy, satellite-orbit stability, and genetics.</p>

<p>Numerical solvers are effective tools in an engineer's or scientist's armory for solving deterministic differential equations. The algorithms for implementing these solvers are well-known (Runge-Kutta, for instance) and widely available in software. Unfortunately, conventional solvers do not work for SDEs. In this article, I provide an introduction to stochastic equations, then present an extensible framework &#151; written in C++ &#151; for numerically solving SDEs. Given the accelerating interest in SDEs, the ability to extend this toolbox to accommodate new algorithms as they are developed is particularly attractive. The toolbox I describe here is also useful for existing applications that employ deterministic numerical methods and require the addition of the effects of noise. </p>

<p>The source code for the SDE toolbox (available at <a href="http://www.cuj.com/code/">http://www.cuj.com/code/</a>) includes three solvers of increasing accuracy and sophistication: Euler-Maruyama, Milstein, and Runge-Kutta. For brevity, I discuss only the Euler-Maruyama method in detail. To demonstrate the toolbox, I solve an SDE used in the Black-Scholes model for pricing stock options. The core classes for the toolbox are written in ANSI C++ for portability and have been tested with Microsoft Visual Studio C++ 6.0, Linux GCC 2.91, and 3.04. The toolbox is further packaged for Linux in "GNU style," facilitating a suite of command-line arguments and the ability to load dynamic systems at run time from shared libraries. This design reduces the need to recompile the main binary when changes are required. </p>



<h3>The Basics</h3>


<p>When I refer to stochastic differential equations, I mean equations of the form of <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(a), where <i>a</i>, which represents deterministic effects, is the drift component, and <i>b</i>, which represents stochastic effects, is the diffusion component. The term "noise" refers to Gaussian white noise and is replaced formally by the derivative of the so-called "Wiener" stochastic process, <i>dW/dt</i>, to give the usual SDE notation of <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(b).</p>


<p>The Wiener process <i>W(t)</i> is a random variable that changes over time and is also known as "Brownian Motion." For the one-dimensional case, the Wiener process describes the path taken by "a drunken ant with a clock and a coin": With each tick of the clock the ant tosses a coin and decides to take one step either left or right depending on the outcome. The result is a random walk, which on average goes nowhere (the expectation written as <i>E(W)</i> is 0) but has the potential to go further as time progresses (the variance written as <i>E(W</i><sup>2</sup><i>)</i> is equal to the elapsed time <i>t</i>, assuming the ant starts from 0). This concept of a path that "on average goes nowhere" but nevertheless has the potential to assume a direction due to the interaction of probabilistic effects is analogous to the "noise" within a stochastic system. <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(b) is  is really just a symbolic way of representing the integral equation in <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(c).</p>

<p>The first integral in <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(c) is a normal (Riemann) integral that may be approximated by <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(d). In a similar fashion, the second integral may be interpreted as <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(e). This form is known as an "Ito" integral. What defines it as an Ito is the fact that we selected <i>b</i> at <i>t</i><i><sub>j</sub></i> (this is subtle because, for the normal integral, <i>b</i> can actually be selected anywhere between <i>t</i><i><sub>j</sub></i><sub>+1</sub> and <i>t</i><i><sub>j</sub></i>). The Ito integral is part of what is known as the "Ito calculus" and includes an alternative to the usual chain rule known as "Ito's formula." The trick to numerically solving Ito SDEs is representing the Wiener increment <i>W(t</i><i><sub>j</sub></i><sub>+1</sub><i>)-W(t</i><i><sub>j</sub></i><i>)</i> algorithmically. As with deterministic differential equations, it is typically straightforward to find explicit solutions to linear equations, where (in the stochastic case) terms in <i>W(t)</i> are present. However, and again as in the deterministic case, many equations do not possess explicit solutions (for example, most nonlinear equations); hence, you often must resort to numerical techniques to seek solutions. For the purposes of the toolbox, vector SDEs are employed so that <i>X, W, </i>and<i> a</i> are <i>d</i>-dimensional vectors, and <i>b</i> is a <i>d</i>&times;<i>d</i> dimensional matrix. This approach lets you solve multidimensional systems.</p>



<h3>Architecture</h3>


<p><A HREF="0311burkef1.htm" target="_BLANK">Figure 1</A> illustrates the object-oriented architecture of the toolbox. Solver implementations are derived from the base class <b>CSolver</b> and instantiated via the Parameterized Factory <b>CSolverFactory</b> [4]. The <b>CSolverSettings</b> class aggregates solver-independent settings. To allow solvers to be developed independently of the dynamic system, you are solving (and vice versa), a generic interface called <b>CDynSystem</b> represents dynamic systems. This class has the method <b>GetDriftAndDiffusion(),</b> which returns the <i>a</i> and <i>b</i> components. This design is noteworthy as it differs from traditional (deterministic) solvers, which often employ a function to return the entire right hand side of the equation you're solving. Other algorithms for solving SDEs manipulate the drift and diffusion components differently; hence, they need to be obtained from the dynamic system separately. </p>


<p>To ease the development of new solvers, the Template Method pattern [4] is employed so that <b>CSolver</b> defines a skeleton of the solution procedure, deferring the specific details of advancing the solution to subclasses. <A HREF="0311burkef2.htm" target="_BLANK">Figure 2</A> is a sequence diagram of the solution procedure.</p>

<p>A solver is invoked by calling the <b>Run()</b> method. This calls <b>Initialise()</b>, which seeds the random-number generator (either by user-supplied values or values derived from the system time), creates the Wiener process realization, and initializes memory for the solution. If specified, the <b>Initialise()</b> method writes the Wiener process realization to disk as well. For each time step, the drift and diffusion components of the system to be solved are retrieved via the <b>GetDriftAndDiffusion()</b> and the <b>Advance()</b> methods of the particular solver. The solution process terminates with a call to the <b>Finish()</b> method, which writes the solution to disk; see <A HREF="0311burkel1.htm" target="_BLANK">Listing 1</A>.</p>



<h3>Euler-Maruyama Solver</h3>


<p>The Euler-Maruyama method is probably the simplest solver for SDEs and is an extension of the Euler method used for deterministic differential equations. The scheme follows from <A HREF="0311burkee1.htm" target="_BLANK">Example 1</A>(c) if you consider a uniform discretization of <i>N</i> equal time steps from time 0 to time <i>T.</i> This yields a time step of <img src="delta12.gif"><i><IMG SRC="tshape.jpg">=</i><IMG SRC="tshape.jpg"><i><sub>n</sub></i><sub>+1</sub>-<IMG SRC="tshape.jpg"><i><sub>n</sub></i><i>=T/N</i>. The scheme may be written as <A HREF="0311burkee2.htm" target="_BLANK">Example 2</A>(a), where <img src="delta12.gif"><i>W</i><i><sub>n</sub></i>=<i>W(</i><IMG SRC="tshape.jpg"><i><sub>n</sub></i><sub>+1</sub><i>)-W(</i><IMG SRC="tshape.jpg"><i><sub>n</sub></i><i>)</i>. For <i>b=</i>0, you obtain the usual deterministic Euler scheme. The random variables in <img src="delta12.gif"><i>W</i><i><sub>n</sub></i><i>=W(</i><IMG SRC="tshape.jpg"><i><sub>n</sub></i><sub>+1</sub><i>)-W(</i><IMG SRC="tshape.jpg"><i><sub>n</sub></i><i>)</i> may be obtained from a Gaussian distribution of mean 0 and variance <IMG SRC="sqrt.gif"><img src="delta12.gif"><i>t</i>. The <b>CSolver</b> base class creates these random variables during the <b>Initialise()</b> method by invoking an efficient Box-Muller transformation of a uniformly generated sequence of random numbers [6]. The latter are generated via the "Mersenne Twister" [5], a high-quality random-number generator. The random-number generator in the Standard C Library generally performs poorly when employed in stochastic modeling settings. To simplify the implementation and prevent the introduction of errors, the Wiener process is calculated at <b>m_nStepSize</b> increments, and the solver computes the solution at increments of <b>m_nStepSize*m_nMultiplier,</b> thus avoiding the need for interpolation.</p>


<p>To compare the quality of different solvers, it is instructive to introduce a measure of accuracy. The strong order of convergence <img src="gamma14.gif"> is calculated from <A HREF="0311burkee2.htm" target="_BLANK">Example 2</A>(b) for all step sizes <img src="delta12.gif"><IMG SRC="memof14.gif">(0,1) for some constant <i>K</i>, and is a useful consideration in applications that require sample path information (such as for the generation of a stock market price scenario). In some applications, only statistical information about the solution, such as the mean and standard deviation, may be required, and for those cases, a weaker form of convergence measure is more relevant [3]. The Euler-Maruyama method has a strong order of convergence of 0.5. The method is obtained from a truncation of a stochastic version of the Taylor series, and by including higher order terms you obtain higher orders of convergence &#151; the Milstein solver has strong order 1.0 and the Runge-Kutta solver has strong order 1.5.</p>



<h3>An Application</h3>


<p>To demonstrate an application of the toolbox, I numerically solve an SDE from the Black-Scholes model for pricing derivatives (see the accompanying text box entitled "The Black-Scholes Model"). A core assumption of the model is that a stock price may be described by the SDE in <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(a), where m represents the average rate of growth of the stock, and s is the uncertainty or volatility of the stock. This equation is also known as "Geometric Brownian Motion." <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(a) is a straightforward SDE that possesses the explicit solution given by <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(b). This explicit solution lets you compare the actual solution of <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(a) with a numerical solution using different solvers from the toolbox. The toolbox has a setting that enables the <i>W</i><i><sub>t</sub></i> series to be written to disk; hence you can easily plot <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(b). <A HREF="0311burkef3.htm" target="_BLANK">Figure 3</A> illustrates <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(b) with the corresponding Euler-Maruyama solution of <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(a). <A HREF="0311burkef4.htm" target="_BLANK">Figure 4</A> is the same as <A HREF="0311burkef3.htm" target="_BLANK">Figure 3</A>, except I used the Runge-Kutta solver, which clearly produces a more accurate solution for the same step size (in fact, the solutions coincide perfectly). Finally, <A HREF="0311burkef5.htm" target="_BLANK">Figure 5</A> illustrates three simulations of <A HREF="0311burkee3.htm" target="_BLANK">Example 3</A>(a) using a different realization of the Wiener process each time and an average of 100 simulations exposing the underlying growth.</p>




<h3>Conclusions</h3>


<p>The toolbox presented here provides implementations for the Euler-Maruyama (strong order 0.5), Milstein (strong order 1.0), and Runge-Kutta (strong order 1.5) solvers, along with the ability to quickly extend the framework for new solvers (subject to the constraint that they operate explicitly and do not require derivatives). I used the example of a simple (linear) SDE, but the real power of these numerical techniques comes with their application to complex nonlinear equations. I've used this toolbox to study prescribed stochastic limit cycle oscillators (see <b>CEllipseDynSystem</b> in the included source for example). Hopefully, this article has given you a small taste of stochastic differential equations. </p>




<h3>References</h3>


<p>[1]	Black, F., and M. Scholes, "The Pricing of Options and Corporate Liabilities,"<i> J. Political Economy</i>, 1973, p. 637-659.</p>

<p>[2]	Merton, R.,"The Theory of Rational Option Pricing,"<i> Bell Journal of Economics and Management Science</i>, 1973, p. 141-183.</p>

<p>[3]	Kloeden, P.E., and E. Platen. <i>Numerical Solution of Stochastic Differential Equations,</i> Third Edition, Springer-Verlag, 1999.</p>

<p>[4]	Gamma, E., R. Helm, R. Johnson, and J. Vlissides. <i>Design Patterns: Elements of Reusable Object-Oriented Software,</i> Addison-Wesley, 1995.<i></i></p>

<p>[5]	Matsumoto, M., and T. Nishimura, "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform Pseudorandom Number Generator,"<i> ACM Transactions on Modeling and Computer Simulation</i>,<i> </i>1998, p. 3.</p>

<p>[6]	Box, G.E.P, and M.E. Muller, "A Note on the Generation of Random Normal Deviates," <i>Annals Math. Stat</i>, 1958, p. 610-611. </p>

<hr><I>
<b>Dave Burke </b>holds a Ph.D. in Electrical and Electronic Engineering from University College Dublin, Ireland. He is CTO of Voxpilot Ltd., a company that develops platform software. He can be contacted at <a href="mailto:david.burke@voxpilot.com">david.burke@voxpilot.com</a>.</I>

<hr>

</body>
</html>
