<html>
<head>
<title>Simplex Optimization</title>
</head>

<body>

<h4>Listing 2:	Access routines and example main program.
</h4>
<pre>

#include "FuncObject.h"
CFuncObject::CFuncObject ( ) 
{
}
CFuncObject::CFuncObject ( const double& a, const double& b )
{
   m_vdDataArray.resize ( 2 );
   m_iNVar = 2;
   m_vdDataArray[0] = a;
   m_vdDataArray[1] = b;
}
double CFuncObject::operator ( ) ( const valarray&lt;double> v ) const
{
   return (v[1]-1.0)*(v[1]-1.0) + (v[0]-2.0)*(v[0]-2.0) ;
}
valarray&lt; double > CFuncObject::operator ( ) ( ) const
{
   return ( m_vdDataArray );
}
#if !defined( FUNCOBJECT_H_INCLUDED )
#define FUNCOBJECT_H_INCLUDED
#include &lt;valarray>
using namespace std;
class CFuncObject
{
public:
   CFuncObject ( );
   CFuncObject ( const double& , const double&  );
   double operator ( ) ( const valarray&lt;double> v ) const;
   valarray&lt; double > operator( ) ( ) const;
   //  NOTE THAT COPYING THE FUNCTION OBJECT INTO THE SIMPLEX OBJECT 
   //  IMPLIES THAT BOTH A COPY CONSTRUCTOR AND AN ASSIGNMENT 
   //  OPERATOR
   //  WILL BE REQUIRED FOR FULL SAFETY
   //  THE VALARRAY SEEMS TO BE COPIED CORRECTLY SINCE DELETING THE 
   //  ORIGINAL
   //  FUNCOBJECT DOES NOT PERTURB OPERATION, BUT POINTERS IN THE 
   //  FUNCOBJECT
   //  CLEARLY COULD GENERATE TROUBLE FROM A SHALLOW COPY
private:
   valarray&lt;double> m_vdDataArray;
   int m_iNVar;
};
#endif // (FUNCOBJECT_H_INCLUDED)
#include &lt;stdlib.h>
#include &lt;cstdio>
#include &lt;iostream>
#include &lt;cmath>
#include &lt;valarray>
// #include "publishedsimplexsource.h"
#include "simplex.h"
#include "FuncObject.h"

using namespace std;
typedef valarray&lt;double> vd;
void OutputVector ( const valarray&lt;double>& dV );
void OutputVector ( const valarray&lt;double>& dV )
{
      int i;
      cout &lt;&lt; "{ ";
      int nVar = dV.size( );
      for ( i=0; i&lt;nVar; ++i )
      {
         cout &lt;&lt; dV[i];
         if ( i &lt; nVar - 1 ) cout  &lt;&lt; ", ";
      }
      cout &lt;&lt; " }" &lt;&lt; endl;
}
int main (void)
{
   valarray&lt;double> VOutput;
   CFuncObject f ( 11.0, -5.0 );
   simplex&lt;CFuncObject> s( f );
   f.~CFuncObject( );
   // s.SetMaximumIterations( 5000 );
   // s.SetLimitingFractionalChange( 0.0 );
   pair&lt;double,vd> pReturn = s.fnMinimize( );
   cout &lt;&lt; endl &lt;&lt; " final FOM " &lt;&lt; pReturn.first &lt;&lt; endl;
   // cout &lt;&lt; endl &lt;&lt; " final FOM " &lt;&lt; s.GetFinalFOM( ) &lt;&lt; endl;
   // cout &lt;&lt; " total interations performed " &lt;&lt;  
   // s.GetTotalIterations( ) &lt;&lt; endl;
   cout &lt;&lt; "best point found = ";
   cout &lt;&lt; pReturn.second[0] &lt;&lt; "  " &lt;&lt; pReturn.second[1] &lt;&lt; endl;
   // OutputVector( s.GetFinalVector( ) );
   // cout &lt;&lt; "best point found (again) = ";
   // OutputVector( pReturn.second );
   // s.OutputSimplex( );
    return ( EXIT_SUCCESS );
}
</pre>

</body>
</html>
