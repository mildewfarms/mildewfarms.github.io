<html>
<head>
<title>Data-Structure-Independent Algorithms for Image Processing</title>
</head>

<body>


<h2>Data-Structure-Independent Algorithms for Image Processing</h2>

<h3>By Vitaly Ablavsky, Mark R. Stevens, and Joshua B. Pollak</h3>


<p>With C++ compilers finally catching up to the ANSI/ISO Standard, generic programing has become a popular paradigm for obtaining good run-time performance while simultaneously facilitating code reuse. Generic programming emphasizes the separation of algorithms from the data structures they manipulate. Through the consistent application of generic programming principles, the Boost Graph Library (BGL) [1] achieves complete separation between graph data structures and graph algorithms. In addition, the run-time behavior of BGL algorithms is parameterized using compile-time idioms that do not adversely affect run-time performance.</p>
<p>Can the same success be repeated in the domain of image processing? In this article, we address this question by focusing on one axis of the diagram in <A HREF="0311ablavskyf1.htm" target="_BLANK">Figure 1</A> &#151; conformance with the STL. By conformance, we mean both striving for the STL-style look and feel, and using STL algorithms as building blocks for advanced image processing. Why is this a good idea? Because any developer versed in the Standard C++ Library and armed with a good book on image processing (such as <i>Digital Image Processing</i>, by Rafael C. Gonzalez and Richard E. Woods, Addison-Wesley, 2002) can understand and extend such code without significant trouble. However, you need to overcome two hurdles to do this:</p>

<ul>

  <li>All STL algorithms assume the data is linear (one dimensional) and can therefore be abstracted into a sequence of numbers. By contrast, images are two-dimensional entities. 

  <li>The STL assumes that iterators are lightweight (glorified pointers) so they can be passed by value inside tight inner loops without incurring a significant run-time copy penalty.


</ul>

<p>Locating a useful image-processing library is easy &#151; there are dozens of them, with many offering real-time performance. The gotcha is that clients are required to use library-defined data structures because the optimized routines of the library are written against that interface. For example:</p>

<pre>
namespace proprietary { 

  class Image { //... }; 

  void adjustContrast(const Image&amp; in, Image&amp; out) { //... }

}
</pre>

<p>Often, the <b>Image</b> class is just a wrapper to a data pointer. If you have to switch from one library to another, all custom algorithms written against <b>proprietary::Image</b> must be reimplemented.</p>

<p>The VIGRA image-processing library [2] demonstrates the use of generic programming techniques to remove the dependence between the image representation and the processing. VIGRA extends the STL design philosophy by introducing new collections of operators and iterators for spatial data. For instance, VIGRA's <b>transform2D</b> applies a user-defined functor to every element of an image. While the resulting separation of data structures and algorithms is a plus, the reliance on a custom STL-like infrastructure is unsatisfactory. Consequently, you need to remove the need for such a framework whenever possible (see the right portion of <A HREF="0311ablavskyf1.htm" target="_BLANK">Figure 1</A>). The test for success is the ability to rely instead on <b>std::transform</b>.</p>

<p>To help motivate the type of code you wish to write, we examine a traditional image-processing algorithm known as "median filtering" (see sidebar entitled "<a href="0311ablavskys1.htm">Image Processing</a>"). If asked to generate a median-filtering operation, your first attempt may produce something along the lines of <A HREF="0311ablavskyl1.htm" target="_BLANK">Listing 1</A>. Here, there are four nested loops, with the outer two visiting each pixel in the image, and the two inner loops visiting each pixel in the sliding window neighborhood. Not only are the <b>for</b> loops unnecessary, the approach is not scalable. In medical imaging (CTs and MRIs), three-dimensional images lead to six nested <b>for</b> loops!</p>

<p>A closer look at how sliding windows access image data may lead to a better implementation. First, the two outer loops are stepping over each pixel in the image, and could be replaced with a conceptual <b>for</b> <b>all pixels </b>loop (for example, <b>std::transform</b>). At each pixel, the sliding window is formed based on the underlying spatial data, but then the data is treated as linear (in fact, it is copied into a linear array). Here lies the key observation: Most image processing requires spatial access to the image data, but that spatial access can be unrolled into a series of linear neighborhoods. <A HREF="0311ablavskyl2.htm" target="_BLANK">Listing 2</A>, which is based on this understanding, has better STL conformance than the previous implementation, making it more readable.</p>

<p>The question remains: How do you design both the window and subwindow iterators along with any other iterator that may be needed by an image-processing algorithm? </p>



<h3>Iterator Design</h3>


<p>The first step in the iterator design is to determine the concepts that image-processing iterators must support. We propose three new iterator categories that coexist with the existing STL iterator tag hierarchy (<A HREF="0311ablavskyf4.htm" target="_BLANK">Figure 4</A>): </p>



<ul>
  <li>Sequential: Process all pixels independently regardless of position in the image.
  <li>Subwindow: For all image subwindows, process all pixels in the subwindow sequentially.

  <li>Spatial: <i>x-</i> and <i>y</i>-coordinate aware.


</ul>

<p>In many cases, sequential access requires the same iterator concepts provided by a forward iterator (<b>*,++,!=</b>) with the underlying assumption that the spatial image grid is laid out as a series of contiguous scan lines in memory. If the image fits perfectly in memory, forward iterators suffice. However, if each scan line has additional constraints, then the iterator must skip invalid image data during processing.</p>

<p>For instance, cameras may pad the boundary of images if the requested frame size is not supported in hardware. Finding the <b>min</b> element in the image (a seemingly linear operation) would return garbage regardless of the image contents if padding is not respected. Another example would be a camera returning an RGB image in a 16-bit format. The iterator might need to perform bit shifting to access the appropriate R, G, and B channels. In both cases, the sequential iterator could hide these gory details from you.</p>

<p>To implement sequential image iterators, you need knowledge of the image size and padding. We won't explicitly show code for such iterators because the same technique used to implement the subwindow could be adapted for sequential iteration. Likewise for spatial-image iterators, VIGRA has demonstrated an excellent approach to spatial (random access) image iterators via <b>++it.x </b>and <b>++it.y</b>.</p>

<p>For sliding window processing, you need two iterators. The first, the window iterator, is passed to the <b>std::transform</b> and allows iteration over all subwindows in the image. This iterator must step over each pixel consecutively but remain aware of the current <i>x</i> and <i>y</i> position in the image grid. For efficiency and ease of construction, both the subwindow and window iterators are embedded within a container class. This container stores both the beginning/ending iterators along with helper methods to access and set the internal state; see <A HREF="0311ablavskyl3.htm" target="_BLANK">Listing 3</A>. Another approach is that of the Boost library, which aggregates the begin/end iterators in an <b>std::pair</b>.</p>

<p>The window is constructed with a pointer to the image data and the image dimensions. This allows ease-of-use with existing image class and data representations. In fact, all that is required to use iterators is a pointer to the data and the spatial dimensions. We have explored methods where the window iterator actually wraps a <b>ForwardIterator</b>. For demonstration purposes, we show the simpler design (passing a pointer to data), but this design works equally well.</p>

<p>To reduce the number of times a subwindow is constructed, window iterators contain a subwindow class and return this class by reference. Without this internal storage, subwindows would be constructed twice for each pixel (for the beginning and ending of each subwindow). The preincrement operator updates both the <i>x</i> and <i>y</i> positions in the image and requires an extra bit of logic to wrap the values at the end of the scan line.</p>

<p><A HREF="0311ablavskyl4.htm" target="_BLANK">Listing 4</A> presents a sample subwindow iterator implementation. Since the subwindow iterator could possibly iterate beyond the boundaries of the image, you must check boundary conditions during dereferencing. In this example, the iterator zero pads the image, which makes the dereferencing iterator slightly more complicated. Also, the preincrement operator must make sure the spatial location properly wraps when the subwindow boundary is reached.</p>

<p>While the code presented here deals with gray-scale imagery, we've extended the technique to multiband images (RGB, RGBA, and so forth). The extension to support multiband images is fairly straightforward, but it requires a few additional checks during both the <b>*</b> and <b>++</b> operators.</p>



<h3>Making Our New Iterators Practical</h3>


<p>The design of a new iterator types leads to the analysis of subtle issues with state persistence. The traditional STL iterator hierarchy is geared toward simple, linear data structures and lightweight iterator objects. Our subwindow iterator is clearly not lightweight (in fact, it is 64 bytes, which must be copies twice per pixel for median filtering). A quick profile of the median filter example showed <b>std::copy</b> dominating as the most expensive operation.</p>


<p>To compensate, we extend the hierarchy to deal with light- and heavyweight iterators. The heavyweight category is handled by introducing a <b>proxy_iterator</b> that simply wraps the heavyweight iterator and passes all iterator operations (<b>*, ++, !=</b>) along to the iterator they wrap. This allows only a single pointer copy when interfacing with STL operations (like <b>copy</b>). Adding the proxy iteration greatly reduces computational costs.</p>



<h3>Start Making Sense</h3>


<p>Now you have them all: Standard Library iterators, VIGRA iterators, sequential iterators, heavyweight iterators. Do all these entities have nothing more in common than an <b>operator++</b>? How can algorithm developers write the most efficient code given the iterator concept? To answer these questions, revisit the iterator tag hierarchy. Remember, the iterator tag hierarchy is not an inheritance diagram, but a relationship between concepts.</p>


<p>In the new world view, both the sequential and sliding window iterators belong to the <b>sequential_iterator</b> category. If you were to implement an iterator that traverses an image along diagonal scan lines, it would still implement a <b>sequential_iterator</b> category. That is what sequential means! In contrast, if you absolutely need to visit arbitrarily ordered <i>x-y</i> locations in an image, your iterator is truly of the <b>spatial_iterator</b> category. If you have a <b>spatial_iterator</b>, you can go anywhere in the image, but you have to do it yourself because the Standard Library does not support multidimensional index increment. That is the price of spatial awareness!</p>

<p>The tag dispatching idiom lets you write functions tailored to the concept provided by the iterators. For example, if you do need to hop around the image like a knight on a chessboard, you have to remember that linear iterators do not carry enough state information for row/column offset calculations. If you are stuck with a linear iterator, you must pass enough information about the image inside your functor to do the work of a spatial iterator yourself. By the way, if your algorithm requires that you visit pixels in a chess knight pattern, you are again relying on the <b>linear_iterator</b> concept! A <b>spatial_iterator</b> can easily produce a <b>linear_iterator</b> that provides a single <b>operator++</b> by internally manipulating <b>move.x </b>and <b>move.y</b>.</p>

<p>Another use for tags is to perform compile-time branching to use iterator proxies when running a windowing function with a heavyweight iterator. Writing iterator-category specific code yields substantial performance benefits.</p>

<p>From the big-picture standpoint, you're dealing with a single fundamental concept &#151; iterators that produce subiterators for examining local neighborhoods. This concept is not unique to image processing. Graph-traversal Boost style relies on two critical functions &#151; <b>vertices(graph) </b>and<b> edges(vertex, graph)</b>. The first function is analogous to the <b>Window</b> iterator, while the second is analogous to the <b>SubWindow</b> iterator. A previous article [3] mentioned using BGL's implementation of Dijkstra's single-source shortest-path algorithm for mobility analysis in digital elevation maps. But a digital elevation map is a two-dimensional array of data. Whether you want to median filter it or run Dijkstra, your neighborhood structure and iterators are exactly the same!</p>



<h3>Performance Analysis</h3>


<p>Our focus is on writing modern/maintainable C++ code for image processing. This approach is not intended to execute as fast as hand-optimized or CPU-specific code. Yet this method stacks up favorably against standard alternatives like nested <b>for</b> loops, while also reducing the amount of coding required and improving code maintainability.</p>


<p>For a simple analysis, we implemented three separate image-processing algorithms: median filtering, generalized convolution, and gamma correction. For each of these three different algorithms, we constructed three implementations: nominal four nested <b>for</b> loops, subwindow iterators (if appropriate), and subwindow iterators using dispatch to a proxy iterator implementation (to reduce STL overhead). <A HREF="0311ablavskyt1.htm" target="_BLANK">Table 1</A> shows some simple performance metrics over computation time and code written. Far less code is written using the window iterator methods (due to the iteration being hidden within the iterators). The proxy method requires extra code to handle the compile time dispatching, but greatly decreases total run time.</p>



<h3>New Directions</h3>


<p>You can construct "irregular" kernels with just a few standard building blocks: <b>std::pairs</b> and templates:</p>


<pre>
struct Offset

{ 

  Offset(short dx, short dy);

  short dx_;

  short dy_;

};

struct NullOffset { }; // end-of neighborhood marker

// create a four-element neighborhood

typedef std::pair&lt;Offset,std::pair&lt;Offset,

  std::pair&lt;Offset, std::pair&lt;Offset, NullOffset&gt; &gt; &gt; &gt; Ngb4;
</pre>

<p>With just a few lines you can define a neighborhood corresponding to a cross pattern. Iterating over such a neighborhood is unfolded into a sequence of statements at compile time &#151; a desirable byproduct.</p>



<h3>Conclusion</h3>


<p>The key to implementing suites of iterators that allow sliding window iteration over generic image data structures is to use as much of the STL as possible for rapidly prototyping image-processing algorithms. <A HREF="0311ablavskyl5.htm" target="_BLANK">Listing 5</A>, which illustrates the power of these iterators, shows two additional operations &#151; generalized convolution and morphological erosion. These two examples total 20 lines of C++ code. Using these iterators to implement a sliding window image-processing operation amounts to implementing a functor to process a single returned subwindow.</p>




<h3>References</h3>


<p>[1]	Jeremy G. Siek, Lie-Quan Lee, and Andrew Lumsdaine.<i> The Boost Graph Library,</i> Addison-Wesley, 2001, <a href="http://www.boost.org/">http://www.boost.org/</a>.</p>

<p>[2]	Ullrich K&#246;the, "STL-Style Generic Programming with Images," <i>C++ Report,</i> January 2000, <a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/">http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/</a>.</p>

<p>[3]	Vitaly Ablavsky, "Applying BGL to Computational Geometry,"<i> C/C++ Users Journal</i>, August 2002.</p>



<h3>Acknowledgments</h3>


<p>Portions of this work were inspired by the Vision Toolkit project at Charles River Analytics. We would like the thank our codevelopers Dan Stouch, Jonah McBride, Magn&#249;s Snorrason, and Thom Goodsell. </p>

<hr><I>
<b>Vitaly Ablavsky</b> is a senior software engineer at Charles River Analytics in Cambridge, MA. His interests are computer vision, pattern recognition, and algorithm development in C++. He can be contacted at <a href="mailto:vablavsky@cra.com">vablavsky@cra.com</a>. <b>Mark R. Stevens</b> is a senior scientist for Charles River Analytics, specializing in the development of computer vision algorithms in C++. He has been writiting image processing algorithms in C++ for over 10 years. He can be reached at <a href="mailto:mstevens@cra.com">mstevens@cra.com</a>. <b>
Joshua B. Pollak</b> is a software engineer for Charles River Analytics, where he develops computer vision applications in C++. He has been working with computer vision software for 4 years and C++ for 8. He can be reached at <a href="mailto:jpollak@cra.com">jpollak@cra.com</a>.</I>

<hr>

</body>
</html>
