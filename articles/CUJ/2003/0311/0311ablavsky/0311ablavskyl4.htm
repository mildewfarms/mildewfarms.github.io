<html>
<head>
<title>Data-Structure-Independent Algorithms for Image Processing</title>
</head>

<body>


<h4>Listing 4:	<i>Subwindow iterator design.</i></h4>

<pre>
template&lt;size_t _SubWidth, size_t _SubHeight, typename _Tp&gt;
class SubWindow: public std::iterator&lt;heavy_forward_iterator_tag, _Tp&gt;
{
  public:
  // the nested iterator definition
  class iterator: public std::iterator&lt;std::forward_iterator_tag, _Tp&gt;  {
    // dereference, add padding if necessary
    inline _Tp operator*(void) const {        
      if ((x_ &lt; 0) || (y_ &lt; 0) || (x_ &gt;= width_) || (y_ &gt;= yOffImage_)) {
        return 0;
      }
      return begin_[y_ + x_];
    }
    // advance preserving spatial location in image
    inline iterator &amp; operator ++(void) {
      x_ += 1;
      if (x_ &gt; stopX_) {
        x_  = startX_;
        y_ += width_;
      }
      return *this;
    }
    // get the lightweight proxy
    proxy_iterator operator&amp;(void)
    {
      return proxy_iterator(this);
    }
    // remaining methods and  data members omitted for brevity
    // ...
  };
  // define a proxy for reducing copy overhead
  class proxy_iterator: public std::iterator&lt;std::forward_iterator_tag, _Tp&gt; {
    // pass operation along to addressee
    inline proxy_iterator&amp; operator++(void)  {
      addressee_-&gt;operator++();
      return *this;
    }
    // remaining methods and  data members omitted for brevity
    // ...
  };
  // Access the iterator pair. Note returning a reference for efficiency
  inline iterator &amp;begin()  {
    return begin_;
  }
  inline iterator &amp;end()  {
    return end_;
  }
  // set the position in the larger image (see downloadable code)
  inline void reset(size_t x, size_t y);
  // constructor caches the data pointer and dimensions
  SubWindow(_Tp *in, int width, int height);
private:
  // current location
  iterator begin_;
  iterator end_;
};
</pre>
</body>
</html>
