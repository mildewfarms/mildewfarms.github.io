<html>
<head>
<title>ELF: Exception Handling and Logging Framework</title>

</head>

<body>
<h2>ELF: Exception Handling and Logging Framework</h2>

<h3>By Sony Antony</h3>

<p>Production-support engineers have always complained about the lack of logging in software systems. Logging becomes particularly important when something unexpected happens inside the running processes. As a result, logging is closely related to exception handling in C++. </p>
<p>In this article, I present an easy-to-use technique for managing exception handling and logging in a C++ application. Two of the added benefits of this technique are Java-like exceptions with stacktrace and the ability to monitor method entry and exit in real time (method invocation traceability).</p>

<p>I also describe a modular framework called "ELF" that uses this logging technique to let applications log their events to any number of local or remote computers. Though ELF is written for UNIX-like systems, it is easy to port it to other operating-system environments, since its networking- and OS-specific features are abstracted inside a small number of classes.</p>



<h3>The Technique</h3>


<p>The technique I present requires that all exceptions thrown inside the application be derived from the common abstract base class <b>Exception</b> (<A HREF="0311antonyl1.htm" target="_BLANK">Listing 1</A>), which, in turn, is derived from <b>std::exception</b> (the base class of all exceptions defined in the C++ Standard). Though it is possible to invoke the methods of class <b>Exception</b> directly, most of the time, it is easier to use one of the five macros provided to operate on the <b>Exception</b> object. <b>Exception</b> is a stackable class. This means that an <b>Exception</b> object can contain another <b>Exception</b> object that, in turn, can contain yet another <b>Exception</b> object, and so on. This makes it possible for a method from a higher-level abstraction to catch lower-level exceptions, substituting them with higher-level exceptions without losing the original low-level exception; see <A HREF="0311antonyl2.htm" target="_BLANK">Listing 2</A>.</p>


<p>You can use the macro <b>DEFINE_EXCEPTION()</b> to define a new derived class <b>Exception</b>. Similarly, you can use one of the four <b>THROWxxx</b> macros in <A HREF="0311antonyl1.htm" target="_BLANK">Listing 1</A> to fill in the attributes and to throw an exception.</p>

<p>I find the following exception-handling policies useful: </p>

<ul>

  <li>The exception specification for all methods will declare the method to be throwing an exception of the base class <b>Exception</b>, as in <b>void</b> <b>foo() throw( Exception )</b>. This way, if you are not interested in catching an exception, you can let it escape up the stack, irrespective of the actual type of the <b>Exception</b>.

  <li>Every exception thrown should be of a type derived from the base class <b>Exception</b>. Unless customization is required, the macro <b>DEFINE_EXCEPTION(XXXException)</b> can be used to define an exception that could be thrown from methods of the class <b>XXX</b>.

  <li>If a method is meant to be included in the stacktrace, or if its entry/exit should be made traceable, it should be defined using the macro pairs <b>ELF_FUNCT_DEF()/ELF_FUNCT_DEF_END</b> (<A HREF="0311antonyl2.htm" target="_BLANK">Listing 2</A>). It is advised that at least most of the important methods are defined this way.


  <li>The macros <b>ELF_FUNCT_DEF()</b> and <b>ELF_FUNCT_DEF_END</b> are defined as in <A HREF="0311antonyf1.htm" target="_BLANK">Figure 1</A>.

  <li>As can be seen, the trick is to enclose the actual method body within a <b>try/catch</b> block. The <b>catch</b> is used to catch all <b>Exception</b>s that happen to pass through the method. The exception handler adds the current method's signature to the <b>Exception</b>'s <b>StackFrame</b>. The caught <b>Exception</b> is then rethrown to the higher-level callers. The original user code of the method appears as the body of this added <b>try/catch</b> block. 
  <li>

  <b>logManager</b> is a Singleton object of type <b>LogManager</b>, the class acting as the entry point for all logging-related activities. <b>FunctCallMonitor</b> is a lightweight class within the scope of <b>LogManager</b> whose constructor logs the method entry if the method's call tracing has been turned on. Similarly, <b>FunctCallMonitor'</b>s destructor logs the method's exit. It uses the Singleton <b>logManager</b> object to do the actual logging. (For more information, see the accompanying sidebar entitled "<a href="0311antonys1.htm">For a More Java-like Stacktrace</a>.") 

</ul>

<h3>The ELF Framework</h3>


<p>ELF adds a distributed logging mechanism to the technique I just described. All the implementation details are hidden behind the Singleton object <b>logManager</b>, of type <b>LogManager</b>, which acts as the entry point for user code. <b>LogManager</b> is capable of logging in three different ways: local logging using files, remote logging using UDP for lightly loaded systems, and remote logging using TCP for heavily loaded systems. <b>logManager</b> is initialized by passing a <b>Properties</b> object, which is like the Java <b>Properties</b> class used to encapsulate the notion of a set of configuration parameters. There is also a Singleton instance of the <b>Properties</b> class called "<b>appConfig</b>," similar to the one returned by Java's <b>System.getProperties()</b> call. <b>appConfig</b> is expected to be initialized at application startup from the configuration file, so that application-wide configuration is available. A new type of logging can be added to the <b>logManager</b> by using the method <b>addLogWriter()</b>. You can optionally pass a <b>Properties</b> object if the default <b>appConfig Properties</b> is not used. This way, if TCP-based logging is desired to two different remote hosts, <b>addLogWriter()</b> can be invoked twice by passing a different <b>Properties</b> object containing the different log server IP addresses and ports.</p>


<p>The class <b>LogManager</b> is centered around the abstract class <b>LogWriter</b>, which acts as the interface for all the six levels of logging (the five data levels <b>CRITICAL, ERROR, AUDIT, WARNING, DEBUG,</b> and one function call trace with six similarly named methods). <b>LogWriter</b> is also a stackable class. It can be made to contain other <b>LogWriter</b> objects in a recursive fashion. To support multiple log destinations, <b>LogWriter</b> uses recursive chaining. Whenever a logging method is called on a <b>LogWriter</b>, it first checks to see if it contains a nested <b>LogWriter</b> object. If it has one, the same method is invoked on the nested <b>LogWriter</b> before it does its own logging. <b>LogWriter</b>s are instantiated using the factory method <b>createLogWriter()</b>, which uses three implementation classes &#151; <b>FileWriterImpl, UdpLogWriterImpl, </b>and <b>TcpLogWriterImpl</b> &#151; to handle local file-based logging, remote UDP-based logging, and remote TCP-based logging.</p>

<p>By using the methods <b>setDataLogLevel()</b> and <b>turnOn/OffFuncCallTracing()</b> of <b>LogManager</b>, it is possible to change the current logging level dynamically. But for a server process that is always running, you must implement a command-receiving mechanism that listens for requests for changing the log level. Such a mechanism could be as simple as a separate thread listening at a well-published port, or as sophisticated as a full-fledged CORBA interface. </p>

<p>Be warned that all of the UDP-based servers will simply drop the incoming packets under heavy load (including the UNIX <b>syslogd</b> log daemon that uses UDP, if configured to accept remote log clients). So UDP should be chosen only if the log server is expecting a light load, as is the case when function call tracing is turned off. Although UDP is not as reliable as TCP, UDP offers two advantages. First, it does not keep a connection open to the log server, thereby saving the client resources. Second, the client's <b>write()</b> system call will never block, irrespective of the server load. On the other hand, TCP ensures that every bit of data logged by the client application is actually logged by the server. At the same time, if the log server's TCP receive buffer is full and if it exercises flow control, the <b>write()</b> attempt may block until the server has consumed the pending data in its receive buffer. Since a high-efficiency log server, like the one used by ELF, reduces the possibility of a full buffer, it is better to use the <b>LogServer</b> class in the TCP mode for remote logging.</p>

<p>A log server that can operate in either UDP or TCP mode receives the logging data on the remote end. The log server is based on the abstract base class <b>LogServer</b>. A factory method, <b>createLogServer()</b>, instantiates a concrete object of type <b>TcpLogServerImpl</b> or <b>UdpLogServerImpl</b>, depending on the mode in which the log server is launched. </p>

<p>In order to gracefully shutdown the log server, <b>SIGHUP</b> is being used. Signal handling in C++ is a complex area that can yield unexpected results if not dealt with carefully. Most of the C++ objects, like standard IO streams and STL containers, are not reentrant (async-signal safe). Even most of the C library functions, like <b>printf()</b> and <b>exit()</b>, are not async-signal safe [2]. This means that such functions and objects cannot be used inside a signal handler unless you take special care to define execution points within the process where signals are allowed. Such points should not be inside any of the nonreentrant objects and functions. In case they happen to be inside a method or object, you should take care not to use the same method or object inside the signal handler. The easiest way to handle this situation is to block the signals for most parts of the program, and then to unblock them at async-signal-safe blocking system calls.This way, one can use any functions and objects within the program without any consideration to their async-signal safety.</p><p>

<b>LogServer</b> defines two such points around the async-signal safe blocking system calls <b>read()</b> and <b>poll()</b> for UDP and TCP, respectively. To generalize the concept of pre- and post-blocking processing, I define an abstract callback base class called "<b>BlockingOperationSentry</b>." A derived class must override its <b>preBlock()</b> and <b>postBlock()</b> methods. A blocking operation is performed like the following:</p>

<pre>
BlockingOperationSentry*
 sentry  = ... ;
{
  BlockingOperationSentryGuard 
      guard( sentry ) ;
  blockingOperation() ;
}
</pre>
<p><b>BlockingOperationSentryGuard</b> is a simple helper class that is responsible for invoking the <b>preBlock()</b> and <b>postBlock()</b> methods on the sentry object using its constructor and destructor, respectively. In the case of <b>LogServer</b>, <b>preBlock()</b> unblocks the signal <b>SIGHUP</b>, and <b>postBlock()</b> blocks it again. This technique ensures that <b>SIGHUP</b> is delivered to the process only during the blocking system call that gets invoked between the <b>preBlock()</b> and the <b>postBlock()</b> calls.</p>


<p><b>UdpLogServerImpl</b> is a simple iterative server, reading and processing one datagram at a time, while <b>TcpLogServerImpl</b> is based on the high-performance IO multiplexing pattern [4]. <b>TcpLogServerImpl</b> waits for events to happen in any of the connected sockets, or at the original TCP socket listening in the well-published port, using the <b>poll()</b> system call. <b>UdpLogServer</b> uses only one socket to listen for the client requests and to process them. On the other hand, <b>TcpLogServerImpl</b> will have six TCP connections per each client using the server for logging. This is so because each level of logging (like <b>debug</b>, <b>warning</b>, and so on) uses one independent TCP connection all for itself. </p>

<p>You can eliminate most of the extra code generated by the macros with the help of some compile-time macros, as explained in the README file. Once the initial development stage is over, and after you have enough confidence in the software's stability, you can selectively remove features like the function call traceability to make the code smaller and faster. (See the accompanying sidebar entitled "<a href="0311antonys2.htm">Launching the Log Server</a>.")</p>



<h3>Conclusion</h3>


<p>ELF is a user-friendly framework that lets applications perform  distributed logging, detailed exceptions with stacktrace, and function call traceability. ELF uses a modular design, which makes it possible to include different parts of the ELF framework in a selective fashion. This design lets you maximize the logging capability in the initial stages of software development, then eliminate the extra code when the software is more stable, with the help of some compile-time switches.0</p>




<h3>Resources</h3>


<p>[1]	Chaudhry, Puneesh. "A Per-Thread Singleton Class,"<i> C/C++ User's Journal,</i> May 2002.</p>

<p>[2]	Stevens, W. Richard. <i>Advanced Programming in the UNIX Environment,</i> Section 10.6. ISBN 0201563177.</p>

<p>[3]	Stroustrup, Bjarne.<i> C++ Programming Language, </i>Third Edition. Section 14.4. ISBN 0201889544.</p>

<p>[4]	Stevens, W. Richard. <i>UNIX Network Programming, Volume 1, </i>Section 6.11. ISBN 0201563177. </p>

<hr><I>
<b>Sony</b> is Chief Technical Officer at Pinnacle Software Solutions in Atlanta. He can be reached at <a href="mailto:sonyantony@bellsouth.net">sonyantony@bellsouth.net</a>.</I>

<hr>

</body>
</html>
