<html>
<head>
<title>ELF: Exception Handling and Logging Framework</title>

</head>

<body><h4>Listing 1:	<i>The</i> Exception<i> class and related macros.</i></h4>

<pre>
class Exception : public std::exception {
//.. Implementation details
  protected :
    Exception* nestedExceptn_ ;
  public:
    Exception() ;
    Exception( const Exception &amp;e ) ;
    Exception( unsigned int line, const string &amp;file,
        const string &amp;method, const string &amp;reason,
         Exception* e = NULL ) ;
    virtual ~Exception() throw() ;
    virtual Exception* clone() const = 0 ;

    string file() const { return file_ ; }
    unsigned int line() const { return line_ ; }
    string method() const { return method_ ; }
    void method( const string &amp;s ) { method_ = s ; }
    string reason() const { return reason_ ; }
    void reason( const string &amp;s ) { reason_ = s ; }
    const char* what() const throw()
      { return typeid( *this ).name() ; }

    void addStackFrame( string s ) ;
    string getStackTrace( ) const { return stacktrace_ ; }

    virtual string toString( const string &amp;tab = "" ) const ;
  private:
    void operator = ( const Exception &amp; ) {}
};
ostream&amp; operator &lt;&lt; ( ostream&amp; os, const Exception &amp;e ) ;
#define DEFINE_EXCEPTION( excptn ) \
        class excptn : public Exception { \
      public: \
        excptn(){}\
        excptn(unsigned int line, const string &amp;file, \
            const string &amp;method, const string &amp;reason,\
            Exception* e = NULL )\
            : Exception( line, file, method, reason, e ) {} \
        Exception* clone() const { Exception* e =\
            new excptn( *this ) ; return e ; }\
    }
#define THROW_EXCEPTION( excptn, msg ) { throw excptn(\
    __LINE__, __FILE__, ELF_FUNC_NAME, msg ) ; }
#define THROW_NESTD_EXCPTN( excptn, msg, nestedE ) {\
    throw excptn( __LINE__, __FILE__, ELF_FUNC_NAME, msg,\
    nestedE.clone() ) ; }
#define THROW_EXCEPTN_WWHERE( excptn, where,  msg ) {\
    throw excptn(  __LINE__, __FILE__, where, msg ) ; }
#define THROW_NESTD_EXCEPTN_WWHERE( excptn, where,  msg,\
    nestedE ) { throw excptn(  __LINE__, __FILE__, where, msg,\
    nestedE.clone() ) ; }
extern string ELF_FUNC_NAME ;
</pre>
</body>
</html>
