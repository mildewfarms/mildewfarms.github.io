<html>
<head>
<title>ELF: Exception Handling and Logging Framework</title>

</head>

<body><h2>Launching the Log Server</h2>
<P>Since almost all UDP-based servers are iterative by nature, the best way to launch and monitor them is by making use of the super server inetd. Add a line like the one below to the /etc/inetd.conf file:

<pre>
elfLogServer  dgram  udp  wait  elfuser 
      /apps/elf/logserver/elfLogserver elfLogserver -u -f 
     /etc/elfLogserver.conf
</pre>

<P>You should accompany these additions to inetd.conf with another line in the /etc/services file:

<pre>
elfLogServer  udp/50000 # port for elflogserver = 50000
</pre>

<P>Once you have added these entries and inetd is notified of the configuration changes (usually with a <b>kill -SIGHUP &lt;pid></b>), even if the log server crashes, inetd will relaunch it automatically when the next logging request comes in.

<P>If you are operating the log server in TCP mode, or if the company policy does not allow you to modify any of the /etc files, use the daemonLauncher script included with the source files at the CUJ web site (<a href="http://www.cuj.com/code/">http://www.cuj.com/code/</a>). daemonLauncher is a general-purpose script for launching and monitoring high-availability daemon processes. The script works by launching the actual binary in a loop, as follows:

<pre>
while : ; do
   /binary/executable/path
done
</pre>

<P>This approach ensures that the daemon process is relaunched immediately if it dies. Since the monitoring shell (K shell or Bourne shell, for instance) is a highly stable piece of software, it generally will not crash unless somebody explicitly kills it.
<p align="right"> &#151; S.A.</p>

<a href="cuj0311antony.htm#rs2">Back to Article</a>


</body>
</html>
