<html>
<head>
<title>Pointing in the  Right Direction</title>
</head>

<body>
<h2>Pointing in the  Right Direction</h2>

<h3>By Jim Hyslop and Herb Sutter</h3>

<p>It was one of those marathon debugging sessions. Nothing particularly difficult, just repetitive and time consuming. You know the kind I mean: tracking down memory leaks and program crashes. I tracked down the majority of the leaks to a particular class. Simplified somewhat, it looked something like this:</p>

<pre>
class U;
class T
{
public:
  void f( U * );
  void g( U * );
};
</pre>

<p>Problem was, the <b>f()</b> function was crashing:</p>

<pre>
#include "u.h"
void T::f( U * u )
{
  ... some processing with u
  delete u; // crashed here
}
</pre>

<p>I followed the stack trace back, and discovered that the program was trying to delete an automatic variable:</p>

<pre>
{//... some block scope
  T t;
  U u1;
  t.f(&amp;u1);
  U u2;
  t.g( &amp;u2 );
}
</pre>

<p>"Well, that'll do it," I mumbled. I modified the function to use dynamically allocated objects, and modified the call to <b>g()</b> at the same time:</p>

<pre>
{//... some block scope
  T t;
  U *u = new U;
  t.f( u );
  u = new U;
  t.g( u );
</pre>

<p>I compiled and ran the program, and that fixed the crash. Satisfied, I exited the program &#151; and was promptly smacked in the face with fresh memory leaks. "What the...," I muttered. </p>

<p>"Keep it down over there, pardner," my friend and cubicle neighbor Wendy said. Well, not in so many words &#151; the wadded-up paper ball that landed on my keyboard was her way of telling me that I was being a little louder than she liked.</p>

<p>After acknowledging her request (by returning the paper in the same manner it was delivered), I turned my attention to the code once again. I had a closer look at <b>g()</b>. Sure enough, it did not delete the object it was provided:</p>

<pre>
void T::g( U * u )
{
  ... some processing with u
  ... but not a delete in sight.
}
</pre>

<p>Grumbling &#151; quietly &#151; I fixed up the calling code. Again.</p>

<pre>
{//... some block scope
  T t;
  U *u = new U;
  t.f( u );
  U u1;
  t.g( &amp;u1 );
</pre>

<p>This time, when I ran it, I was back to the leaks I had when I started the debugging session.</p>

<p>Ever have the sudden feeling that somebody's watching you? I did. On a hunch, without turning, I said in my best mystic voice, "Yes, apprentice?" The squeak behind me told me I had not been wrong. I turned, and faced our intern, Kerry.</p>

<p>"I, um," Kerry stammered, "That is, the, uh, boss..."</p>

<p>"The Guru?" I interrupted. Kerry nodded. He had difficulty allowing himself to call her "the Guru," even though that's what everyone called her. Except Bob, whose nicknames for the Guru were not flattering, and do not bear repeating here. I don't know if anyone in the department knew the Guru's real name.</p>

<p>"Yeah, uh, her," he said. "She came by and told me you wanted to see me."</p>

<p>I had no idea what he was talking about &#151; I hadn't asked to see him. I stared at him while I tried to figure out why the Guru would have said that. Kerry started shifting from foot to foot. Suddenly, the penny dropped &#151; Kerry had written the class I was working on.</p>

<p>"Very good, apprentice, pull up a chair," I said, as I turned to the keyboard.</p>

<p>"The problem is in this class you wrote," I pointed at the class <b>T</b> on my monitor. "Specifically, it lies in these two functions," I pointed at <b>f()</b> and <b>g().</b> "Raw pointers are a problem, because they don't tell you anything about who owns the memory. In this first function," I pointed to <b>f(),</b> "You want a pointer to dynamically allocated memory, and you take ownership of that memory. In the second function, though," I pointed to <b>g(),</b> "You don't take ownership of the memory pointed to."</p>

<p>"But this is all documented in the design document," Kerry protested. I waved him off.</p>

<p>"You are presuming the design document will get read. In many cases, it does not &#151; I don't have time to read the fine print in every single document. The code itself should be self documenting. Can you think of any way to tell other programmers your intent?" I paused. It was a curious sensation, watching someone else squirm mentally, the way the Guru...</p>

<p>Snap! A large tome snapped closed behind us. Both of us jumped.</p>

<p>"My apprentice, do not presume that others will not read the blessed design documents," the Guru remonstrated. "You are, however, correct in saying that your writings should be self documenting. Young apprentice," she said to Kerry, "The question stands &#151; how can you evangelize your meanings to other blessed scribes?"</p>

<p>Kerry opened his mouth a couple of times, but no sound came out. The Guru turned to me. "Apprentice?" Suddenly caught in the spotlight, I realized I hadn't thought it through either. I mumbled a few things &#151; I wasn't feeling very smart and wasn't getting to the point. Smart...point..."Smart pointers!" I blurted out.</p>

<p>"Exactly right, my apprentice," the Guru smiled. "Smart pointers. A raw pointer, as you correctly pointed out, tells your brethren programmers nothing. Can they pass an automatic variable? Will the function attempt to take ownership of the object? A raw pointer says nothing. It is mute...dumb! A smart pointer, however, tells the faithful exactly what is expected of the pointer.</p>

<p>"Let us first look at this function <b>f().</b> Which smart pointer tells other scribes 'I will tend to this member of your flock from now on?'" Neither Kerry nor I moved. Wendy whispered, in a loud stage whisper over the cubicle, "Transfer of ownership!"</p>

<p>"Ah, right," I said, "The<b> auto_ptr</b>...I mean, the blessed <b>auto_ptr</b> tells the, uh, faithful and initiated that the function will tend the pointer as if it were a member of its own flock. The calling function need concern itself with the pointer no longer."</p>

<p>"Well said, my apprentice. Indeed, it would be a mistake for the calling function to attempt to use the <b>auto_ptr</b> after having passed it into a function. Now, let us turn to the function <b>g().</b> This function accepts a pointer to an object, and the function cares not about the object's storage or lifetime. Which smart pointer can tell the faithful 'I care not whence this pointer came, nor will I attempt to gather this pointer into mine flock?'"</p>

<p>That one stumped me. I waited for Wendy to pop up with her suggestions, but she remained silent. I stole a glance at Kerry. He wasn't in much better shape than me.</p>

<p>"Fear not, my apprentices, for it was a trick question. Alas, neither the the blessed <b>auto_ptr</b> nor the Boost smart pointers have such semantics, for they all are designed to assume ownership of dynamically allocated pointers. This leaves us with a few options. First, and least desirable, we may leave the function alone. The drawback here is that you are not communicating with your fellow faithful scribes, and they will be left in the same crisis of faith as before.</p>

<p>"Next, we may modify the function <b>g()</b> so that it accepts a Boost smart pointer [1], such as a <b>shared_ptr.</b> The drawback here is that you are no longer able to pass the address of a local variable as the argument &#151; you must dynamically allocate the objects.</p>

<p>"Third, we could use Loki's SmartPointer [2], and write an ownership policy that does nothing:</p>

<pre>
template &lt; class P &gt;
class NonOwned
{
public:
    static P Clone ( const P&amp; val )
    {
        return val;
    }
    static bool Release(const P&amp; val)
    { 
        return false; 
    }
    enum { destructiveCopy = false };
    static void Swap(NonOwned&amp;)
    {}
};
</pre>

<p>"The member function <b>g()</b> now becomes:</p>

<pre>
void g( Loki::SmartPtr&lt;U, NonOwned&gt; u );
</pre>

<p>"Finally, we could create a very simple template wrapper whose sole purpose is to tell other scribes that you do not care about the source of the object, nor will you attempt to take ownership of it. The template would be similar to the <b>auto_ptr,</b> without the ownership semantics or the <b>auto_ptr_ref</b>. Something along these lines," she wrote on the whiteboard:</p>

<pre>
template&lt;class Type&gt;
class NonOwnedPtr
{
public:
  NonOwnedPtr(Type *ptr = 0)
    : myptr_(ptr)
  {
  }
  Type&amp; operator*() const
  {
    return (*myptr_);
  }
  Type *operator-&gt;() const
  {
    return (myptr_);
  }
  Type *get() const
  {
    return (myptr_);
  }
  void reset(Type* ptr = 0)
  {
    myptr_ = ptr;
  }
private:
  Type *myptr_;
};
</pre>

<p>"This template is not limited to dynamic objects. You may use automatic or static objects with it, as you wish. You will notice, my apprentices, that this class relies on the compiler-generated constructors, assignment operator and destructor. That is because this template imposes absolutely no ownership semantics on the object it points to. </p>

<p>"In virtually all respects, this template is a simple pointer &#151; but not a mute one. It lets you preach to your fellow programmers the intent of the function &#151; that is to say, that your function desires a pointer to an object, but does not covet that object to take ownership of it. As I have often preached and will say to any who will hear, the main purpose of source code is to communicate your intent to your fellow scribes."</p>

<p>The Guru turned and glided away. I looked at Kerry. "Well, there you have it," I said. "Which approach will you take?"</p>

<p>Kerry took over the keyboard, and quickly updated the class:</p>

<pre>
class T
{
public:
  void f( std::auto_ptr&lt;U&gt; );
  void g( Loki::SmartPtr &lt;U, NonOwned&gt; );
};
</pre>

<p>I nodded. "Wise choices, apprentice. Now if you will excuse me, I must return to my meditations," I said as I slid back the keyboard and resumed work.</p>




<h3>References</h3>


<p>[1] The Boost library, <a href="http://www.boost.org/">http://www.boost.org/</a>.</p>


<p>[2]<i> Modern C++ Design,</i> Andrei Alexandrescu, Addison-Wesley, 2001. </p>

<hr><I>
<b>Herb Sutter</b> (<a href="http://www.gotw.ca/">http://www.gotw.ca/</a>) is convener of the ISO C++ Standards committee, author of <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and one of the instructors of the C++ Seminar. In addition to his independent writing and consulting, he is also C++ community liaison for Microsoft.
<b>
Jim Hyslop </b>is a senior software designer with over 10 years of programming experience in C and C++. Jim works at Leitch Technology International Inc. where he deals with a variety of applications ranging from embedded apps to Windows programs. He can be reached at <a href="mailto:jhyslop@ieee.org">jhyslop@ieee.org</a>.</I>

<hr>

</body>
</html>
