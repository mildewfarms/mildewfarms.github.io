<html>
<head>
<title>Static Packet Construction with C++ Templates</title>
</head>

<body>
<h2>Static Packet Construction with C++ Templates</h2>

<h3>By Martin Casado</h3>


<p>Anyone with even a cursory interest in networks needs to dig below the high-level socket libraries to learn how networks operate by constructing packets &#151; headers and all &#151; and letting them loose on the network. Unfortunately, almost all of today's low-level network code makes use of antiquated data structures, frivolously casts character buffers to user-defined types, is littered with pointer arithmetic, and relies heavily on the C preprocessor. Although I'm not a C++ purest who believes that C is the root of all evil, C does seem to have an iron grip on areas of system programming when languages such as C++ may provide advantages. While there are a number of libraries that provide higher level networking functionality &#151; ACE (<a href="http://www.cs.wustl.edu/~schmidt/ACE.html">http://www.cs.wustl.edu/~schmidt/ACE.html</a>), netxx (<a href="http://pmade.org/software/netxx/">http://pmade.org/software/netxx/</a>), and Socket++ (<a href="http://users.utu.fi/lanurm/socket++/">http://users.utu.fi/lanurm/socket++/</a>) come to mind &#151; there is little C++ development support under the networking covers. Thus, almost all popular open-source tools developed at this level, including network scanners, exploits, sniffers, and the like, are written in C using many of the same unsafe, unreadable coding practices. </p>
<p>Instead of continuing this legacy of requiring C in low-level network code, you can leverage C++'s powers to take the "hack" out of hacking and move towards writing more readable, safer tools. In this article, I use C++ templates to facilitate packet construction and show how this can be used to write generic routines to support low-level networking primitives.  </p>



<h3>Handling Addresses</h3>


<p>My main focus is on developing a set of building blocks from which you can construct packets of arbitrary complexity. One of the more frustrating aspects of dealing with packet headers is handling addresses. With addresses come the headaches of byte ordering, converting from user-readable character strings to their respective byte representation, and manipulating those utterly confusing C address <b>struct</b>s. While any good C++ networking library contains an address class and you don't want to reinvent the wheel, my needs are particular. I want to use addresses as part of a protocol header. For example, consider this <b>struct</b> that defines an Ethernet packet header:</p>


<pre>
struct ethernet_header
{
  ethernetaddr dhost;
  ethernetaddr shost;
  uint16_t     type;
};
</pre>

<p>If <b>ethernetaddr</b> is the class representing an Ethernet address, it is imperative that <b>ethernetaddr</b>'s memory footprint be only the 6 bytes representing the address. Any additional member variables interfere with the layout of the protocol header. Also, the byte representation of the address should be stored internally in network byte order, as the packet should look on the wire. While this isn't important for Ethernet addresses, it often comes into play with IPv4 addresses. It is important to ensure that the byte ordering is consistent across all accessors and mutators.</p>

<p>Here, I use two address classes &#151; <b>ethernetaddr </b>(10/100 mb Ethernet) and <b>ipaddr</b> (IPv4) &#151; that handle conversion to/from user-readable strings, bitwise operations, comparison operations, and mathematical operations. <A HREF="0312casadol1.htm" target="_BLANK">Listing 1</A> is the class declaration for <b>ipaddr</b>. (<A HREF="0312casadol2.htm" target="_BLANK">Listing 2</A> demonstrates <b>ipaddr</b> in action.) The <b>ethernetaddr</b> class has similar functionality.</p>



<h3>Templates and Packet Construction</h3>

<p>Given a library of predefined protocol headers, you want to be able to piece them together anyway you like to construct valid, layered network packets. For example, say you want to construct an Ethernet ARP packet in memory, the protocol headers should be nested as follows: </p>


<pre>
| ethernet header | ARP Header |
</pre>

<p>Again, the C-style approach is to declare a buffer of the correct size, then dynamically pack it by casting header <b>struct</b>s to appropriate offsets within the buffer. Why not let the C++ template mechanism construct the memory layout? For example, consider these two <b>struct</b>s:</p>

<pre>
template &lt;typename T = uint8_t[1484]&gt;
struct ethernet
{
  ethernetaddr dhost; 
      //  &#151;  destination hardware address
  ethernetaddr shost; 
      //  &#151;  source hardware address
  uint16_t     type;  
      //  &#151;  ethernet type
    T data;  
      //  &#151;  nested protocol
};    //  &#151;  struct ethernet
struct arp 
{
  uint16_t hrd;  
      //  &#151;  format of hardware address 
  uint16_t pro;  
      //  &#151;  format of protocol address
  uint8_t hln;   
      //  &#151;  length of hardware address
  ... more ARP header fields
  ipaddr  tip;  
      //  &#151;  target IP address
};    //  &#151;  struct arp
</pre>

<p>You can now construct a valid ARP packet with an Ethernet header as follows:</p>

<pre>
ethernet&lt;arp&gt; eth_arp;
</pre>
<P><b>eth_arp</b> should be the correct size and should have the appropriate memory layout required by the packet. You can access fields in the Ethernet header directly through <b>eth_arp</b> and, in the ARP header, by accessing <b>eth_arp.data</b>. For example, you could set the Ethernet destination hardware address and ARP target IP address as follows:


<pre>
eth_arp.dhost = "CA:FE:DE:AD:BE:EF";
eth_arp.data.tip = "127.0.0.1";
</pre>

<p>You can apply this approach to any nested protocol header for which you know the size at compile time. If you build the appropriate template classes for IP, TCP, UDP, and ICMP, you can construct the correct memory layout for an arbitrarily nested packet. For example, if you want an IP packet with an Ethernet header and 1024 bytes of payload, the declaration looks like:</p>

<pre>
ethernet&lt;ip &lt;uint8_t[1024]&gt; &gt; eth_ip;
</pre>
<p>or perhaps a TCP packet with 1024 bytes of data:</p>


<pre>
ethernet&lt; ip &lt; tcp &lt; uint8_t[1024] &gt; &gt; &gt; eth_ip_tcp;
</pre>
<p>or IP tunneled over IP tunneling ARP:</p>

<pre>
ethernet&lt; ip &lt; ip &lt; arp &gt; &gt; &gt; eth_ip_ip_arp;
</pre>

<h3>Empty Headers</h3>


<p>On the surface, using templates for packet construction is straightforward. Under this veneer, however, lie nasty design demons that must be conquered to create a truly versatile library.  </p>


<p>The first problem arises with the question, "How do I construct an Ethernet header with no packet body?" Say, for example, you wanted to construct an Ethernet header that has no payload. This is simple, right? The temptation is to define an empty <b>struct</b> (call it <b>empty</b>) and use that as the template argument when constructing an  Ethernet header.</p>

<pre>
struct empty{};  //  &#151;  0 length struct?
ethernet&lt; empty &gt;;
</pre>

<p>The problem is that most compilers allocate at least 1 byte to <b>empty</b>; that is, <b>sizeof(ethernet&lt;empty&gt;)</b> is equivalent to <b>sizeof(ethernet&lt; uint8_t&gt;)</b>. If you are relying on the type <b>size</b> to send the packet, you have a packet that is an extra byte long hitting the wire. A better solution is to specialize <b>struct ethernet </b>on <b>empty</b> to not include the template parameter:</p>

<pre>
//  &#151;  specialization of template struct ethernet to
//    not include data type for payload.
template &lt;&gt;
struct ethernet&lt;empty&gt;
{
   ethernetaddr dhost;
   ethernetaddr shost;
   uint16_t     type;
};
</pre>

<p>Now, when you create an <b>ethernet&lt;empty&gt;</b>, you have a structure of the correct size. However, if you've declared any member methods or static member variables in <b>ethernet</b>, you no longer have access to them. Making redundant copies of all the methods in <b>ethernet&lt;&gt;</b> within the specialization is cumbersome. To minimize the amount of code you have to write, a cleaner solution (though perhaps counterintuitive) is to have the specialization include all member variables, static variables, and member methods, then inherit the specialization from the general <b>struct</b> template like this:</p>

<pre>
// derive from specialization to get access
// to member methods and static variables
template &lt;typename T = uint8_t[1484]&gt;
struct ethernet : ethernet&lt;empty&gt; 
{
  T data; 
}; //  &#151;  struct ethernet
    template &lt;&gt;
    struct ethernet&lt;empty&gt;
    {
      ethernetaddr dhost;
      ethernetaddr shost;
      uint16_t     type;
      //  &#151;   static variables here
      //  &#151; - member methods here
    };

</pre>

<p>Any methods that operate on data should be included only in the general template definition.</p>



<h3>Initialization</h3>


<p>Unlike the C-style method of constructing packets, C++ should be smart enough to fill in a number of the header fields based on the class type and the template parameter. Again, consider the declaration:</p>


<pre>
ethernet &lt; arp &gt; eth_arp;
</pre>

<p>The <b>ethernet</b> header has a field called <b>type</b> that should be set to the correct value for the protocol being carried, <b>ARP</b> in this case. If each template parameter defines a static variable <b>ETHTYPE</b>, setting the <b>ethernet</b> type is trivial:</p>

<pre>
type = T::ETHTYPE;
</pre>

<p>Unfortunately, since <b>T</b> will not necessarily be a known protocol type, how do you set this field for all valid protocol types known to <b>ethernet</b> (such as <b>ARP</b>, <b>RARP</b>, or <b>IP</b>) and not for arbitrary data types such as the default template parameter value of <b>uint8_t[1484]</b>? One way is to give template class <b>ethernet</b> a hint. You can do this by having all valid protocol types for <b>ethernet</b> inherit from an otherwise useless struct <b>ether_type</b>. This inheritance indicates to class <b>ethernet</b> that the template parameter does, in fact, define its <b>ethernet</b> type. If Ethernet protocol developers follow this general rule, <b>ethernet</b> can then use the Boost (<a href="http://www.boost.org/">http://www.boost.org/</a>) <b>type-traits</b>'s <b>is_base_and_derived</b> to determine whether to look for the <b>ethernet</b> type within the template argument. </p>

<p>You can construct a template class called <b>get_ether_type</b>, which  sets a static variable <b>val</b> to the <b>ethernet</b> type if the initial template parameter derives from <b>ether_type</b>; otherwise, it sets it to some default value. Such a class might look like this:</p>

<pre>
template &lt;typename T, uint16_t default_&gt;
struct get_ether_type 
{
   static const uint16_t val = ether_type_if_true &lt;
       boost::is_base_and_derived&lt;ether_type,T&gt;::value,
       T, default_ &gt;::val;
};
</pre>
<p><b>ether_type_if_true</b> is a class template that sets a static variable <b>val</b> to the<i> <b>ethernet</b></i> type if the first template parameter is True; otherwise, it sets <b>val</b> to the provided default value:</p>


<pre>
template &lt;bool B, typename T,  uint16_t default_&gt;
  struct ether_type_if_true
  { //  &#151;  false
      static const uint16_t val = default_;
  };  
  template &lt;typename T, uint16_t default_&gt;
  struct ether_type_if_true &lt;true, T, default_&gt;
  { //  &#151;  true
      static const uint16_t val = T::ETHTYPE;
  };

</pre>
<p><b>struct ethernet </b>may then, in its constructor, simply set the <b>ethernet</b> type like this:</p>


<pre>
type = get_ether_type&lt;T, ethernet_base::DEFTYPE&gt;::val;
</pre>

<p>Thus, any protocol that inherits from <b>ether_type</b> and defines <b>ETHTYPE</b> automatically sets the <b>ether</b> type; otherwise, the <b>ether</b> type gets initialized to the default type.</p>

<p>Using this scheme, you can add new protocols (say, a new protocol supported by IP, of which there are more than 100) to have your new protocol type derive from the indicator class (perhaps <b>ip_type</b> in the case of IP) and define the protocol value as a static variable.</p>

<p>Setting the protocol type field is just one example of how you can automatically fill the fields in the protocol header based on information you know at compile time. Other fields may be set automatically during construction that are not directly related to the template parameter. The simplest are fields with set values, such as the IPv4 version fields. You can also fill in fields based on header length, such as the IP header length field, since you know (at compile time) the full size of the header. You can also come up with template schemes to handle complex header fields such as IP options. However, the terrible demands of content triage require that I save that discussion for another article. </p>



<h3>Static-Endian Conversion</h3>


<p>All network programmers have dealt with endian conversions using <b>htonl()</b>, <b>ntohl()</b>, <b>htons()</b>, and<b> ntohs()</b>. Unfortunately, these "methods" are often preprocessor macros, which makes them cumbersome to deal with in C++ programs (<b>::htonl(0xdeadbeef)</b> doesn't cut it). For static-endian conversion (that is, when you know what you want to convert at compile time), you can use simple template classes. This code performs an endian conversion for Little-endian machines:</p>


<pre>
template &lt;uint16_t in&gt;
struct shtons // static host to network endian 
              // conversion on 16-bit word
{
   static const uint16_t val = (in&lt;&lt;8&amp;0xff00)|(in&gt;&gt;8&amp;0x00ff);
};
</pre>

<p>I often use static-endian conversion classes such as <b>shtons&lt;&gt;</b> in static-variable declarations such as setting the values for <b>ethernet</b> types: 

<pre>
static const uint16_t ARPTYPE = shtons&lt;0x0001&gt;::val;
static const uint16_t PUP    =  shtons&lt;0x0200&gt;::val;
static const uint16_t IP     =  shtons&lt;0x0800&gt;::val;
static const uint16_t ARP    =  shtons&lt;0x0806&gt;::val;
static const uint16_t REVARP =  shtons&lt;0x8035&gt;::val;
</pre>

<h3>Calculating Checksums </h3>


<p>With packet construction comes the inevitable requirement of calculating Internet checksums. Ideally, you'd come up with a generic template method that accepts an arbitrary packet, iterates over each of the headers in the packet, and calculates checksums, if applicable. This is nontrivial. </p>


<p>For starters, the IP transport checksum breaks the layered model of networks and requires a checksum over a pseudoheader requiring fields from the IP header. Therefore, a generic approach that considers each layer independently is not possible. Even without this hang-up, how easy is it to iterate over all the headers? That is, given an arbitrary packet type <b>T</b>, how can you be sure to visit all of the headers contained within <b>T</b> and call an appropriate checksum routine? If you could determine that <b>T</b> does contain a nested header, then a recursive template function will dive down the header stack until you reach a header without a nested header or with a nonheader data type. One solution would be to have the general (nonspecialized) header<b> struct</b>s derive from a <b>struct</b> (say, <b>struct im_a_header</b>) that basically says, "I have a nested data type of some sort." You can then use the same trick you used before in setting the protocol types (using Boost's <b>is_base_and_derived</b>) to determine if you have a header and if that header has a nested header. Not pretty, but it works.</p>



<h3>PacMan</h3>


<p>PacMan (short for "Packet Manipulation") is a packet-construction library written by Norman Franke and myself that supports all of the techniques discussed within this article along with many additional features. PacMan is freely available for download and use at <a href="http://www.cuj.com/code/">http://www.cuj.com/code/</a>. At this writing, PacMan supports Ethernet (10/100 mb), ARP, IP, TCP, ICMP, and UDP, as well as rudimentary checksum functionality that can perform network level (IP) and transport level (TCP, UDP) checksums. The PacMan protocol <b>struct</b>s are more complicated than the demonstrative <b>struct</b>s presented here (in part to support more complicated features such as IP and TCP options), but generally, the techniques are the same.</p>




<h3>Reading/Writing Packets</h3>


<p>Using this packet-construction technique, you can create some gnarly packets, but what do you do with them? The next step is to provide a convenient method for sending packets (and capturing responses). The actual transmission of the packets may be done a number of ways &#151; standard UNIX raw sockets, libnet (<a href="http://www.packetfactory.net/Projects/Libnet/">http://www.packetfactory.net/Projects/Libnet/</a>), libdnet (<a href="http://libdnet.sourceforge.net/">http://libdnet.sourceforge.net/</a>), and so on. What you are interested in is creating wrapper methods to provide general interfaces to these lower level mechanisms for packet injection.</p>


<p>For this discussion, assume you have two generic, low-level mechanisms for sending/receiving packets at the IP level &#151; you provide the IP header, but the operating system's protocol stack handles datalink functionality such as setting the Ethernet headers and ARP. </p>

<p>The prototypes for the low-level <b>send</b> functions are:</p>

<pre>
int llsend(uint8_t* packet, uint32_t len)
int llrecv(uint8_t* packet, uint32_t len)
</pre>

<p>Begin by creating a simple <b>send</b> method that sends any arbitrary IP packet out on the wire. Since you want the method to be simple, a first stab at the <b>send</b> function looks like this:</p>

<pre>
template &lt;typename T&gt;
int send(const ip&lt;T&gt;&amp; in)
{
   return llsend(reinterpret_cast&lt;uint8_t*&gt;(in), sizeof(in));
}
</pre>
<p>Using this technique to send a TCP SYN packet looks like:</p>


<pre>
ip &lt; syn &lt; &gt; &gt; ip_syn;
 ... packet initialization here ...
send(ip_syn);
</pre>
<p>Using <b>sizeof(..) </b>to determine the packet size may by problematic in some cases. For example, if the packet was initially declared as:</p>


<pre>
ip &lt; tcp &lt;uint8_t[1500]&gt; &gt; ip_large;
</pre>

<p>and then packed with 64 bytes of data, the correct size would be the size of the IP header plus the size of the TCP header plus 64 bytes &#151; far less than 1500. Another option for determining the size would be to use the total length field in the IP header. Again, this may not be correct in all cases because an arbitrary packet could have an incorrect total length field, in which case, you would have to rely on users entering the correct length. A reasonable approach would be to add a second parameter to the <b>send</b> method that defaults to <b>0</b>. If the parameter is <b>0</b>, the <b>sizeof(..) </b>of the packet is used; otherwise, the user-provided length is used.</p>


<p>Along with an IP level <b>send()</b> method, you would likely want to provide a <b>send(..)</b> implementation that injects raw Ethernet packets:</p>

<pre>
template &lt;typename T&gt;
int send(const ethernet&lt;T&gt;&amp; in);
</pre>

<p>Providing multiple implementations of <b>send(..)</b> lets you write generic network functions that operate over distinct packet types (such as a <b>ping</b> method that can operate at the Ethernet and IP level).</p>

<p>Receiving packets on the wire using a packet-capture library such as libpcap (http://www.tcpdump.org/) is trivial. However, you want to make sure that the packet you receive was sent in response to a packet you sent previously. </p>

<p>Say you sent a TCP SYN packet to 10.0.0.2. What sort of responses can you expect back? If the port you sent to is open, you should get a SYN, ACK response from the host; otherwise, the host may send back an RST, ACK packet. You may also receive any number of ICMP responses such as "host unreachable," "time exceeded," "administrative filter," and the like. </p>

<p>At a high level, you want the method to:</p>

<pre>
//  &#151;  grab a packet from the wire and determine 
//  if it was sent in response to "reference"
template &lt;typename T, typename T2&gt;
int recv(const ip&lt;T&gt;&amp; reference, ip&lt;T2&gt;&amp; buffer)
{
  //  &#151; 
  llrecv(reinterpret_cast&lt;uint8_t*&gt;(&amp;buffer), sizeof(buffer));<p></p>
  ... correlate response with original packet
  ... handle ICMP response
}
</pre>

<p>The correlation step is highly dependent on the packet type originally sent. Instead of using a large spaghetti-esque set of nested <b>if</b> statements, you'll rely on C++'s argument-deduction mechanism to help out. Create a correlation method for TCP:</p>

<pre>
template &lt;typename T, typename T2&gt;
bool correlate(const ip&lt;tcp&lt;T&gt; &gt;&amp; reference, const ip&lt;T&gt;&amp; received)
{
     // check to see if we have a TCP packet
     if ( received.protocol != reference.protocol )
     { return false; }
     // ouch don't look :-/
     ip&lt; tcp&lt;empty&gt; &gt;* tcphdr = 
          reinterpret_cast&lt;tcphdr*&gt;(&amp;received.data);
     //  &#151;  basic sanity check on addresses and ports
     if ( reference.daddr != received.saddr ||
          reference.data.dport != tcphdr-&gt;sport)
          { return false; }
     //  &#151;  Ack?
     if ( tcphdr-&gt;flags &amp; tcp&lt;empty&gt;::ACK )
     {
       //  &#151;  does acknowledgment number match original sequence
       //    + 1?
       if ( tcphdr-&gt;ack == reference.data.seq + 1)
       { return true;} //  &#151;  valid response 
     }
     if ( tcphdr-&gt;seq == reference.data.seq + 1 )
     {
        return true; //  &#151;  valid response 
     }
     return false; //  &#151;  not a response to reference
}
</pre>

<p>Also, you may want to write a <b>correlate()</b> method for UDP, ICMP, or any other transport protocols you might send. </p>

<p>Any IP packet you send may get an ICMP packet back as a response. To further complicate matters, the ICMP packet may originate from any interface along the route to the destination of the original IP packet. Correlating a received ICMP packet to a sent packet often requires comparing the 64 bytes of data from the ICMP packet with the original packet sent. In the interest of saving space, assume you have a correctly functioning <b>icmp</b> correlation method that returns a <b>-1 </b>if the packet does not correlate with the sent packet; otherwise, it returns a 16-bit return code with the first 8 bits holding the ICMP type and the last 8 bits holding the code. The prototype is as follows:</p>

<pre>
template &lt;typename T, typename T2&gt;
uint16_t icmp_correlate 
            (const ip&lt;T&gt;&amp; reference, const ip&lt;T &gt;&amp; received);
</pre>

<p>The simplified <b>recv(..)</b> function now looks like:</p>


<pre>
template &lt;typename T, typename T2&gt;
int recv(const ip&lt;T&gt;&amp; reference, ip&lt;T2&gt;&amp; buffer)
{
  int ret = 
     llrecv(reinterpret_cast&lt;uint8_t*&gt;(&amp;buffer), sizeof(buffer));
  int icmp_val = 0 ;
  if ( correlate(reference, buffer ) 
  { return ret; }
  else if ( (icmp_val = icmp_correlate(reference, buffer)) &gt;= 0 )
  {
     //  &#151;  print out message?
     //  &#151;  return negative error code
     return -icmp_val;
  }
  return 0;
}
</pre>

<p>I've only discussed an IP level <b>recv(..)</b> method; you could just as easily write a <b>recv(..)</b> method that works over <b>ethernet&lt;arp&gt;</b> or any other protocol in which you can logically correlate responses.</p>

<p>The <b>send</b> and <b>receive</b> methods are simplistic and real-world applications require timeouts, better result reporting, and improved error handling. However, they provide the basic functionality you need to develop more complex network functionality.</p>

<p>Your bag of tricks now consists of fancy address classes, a complicated packet-construction mechanism, and primitives for sending/receiving/correlating packets. </p>



<h3>General Ping</h3>


<p>To demonstrate the power of the techniques discussed thus far, I'll present a quasi-generic <b>ping</b> method that operates over any IP packet for which you have overridden the <b>correlate(..)</b> methods. The example code is skeletal since a full implementation would be a bit tedious:</p>


<pre>
template &lt;typename T&gt;
void ping(const ip&lt;T&gt;&amp; in)
{
  ip &lt; uint8_t[1500] &gt; result; //  &#151;  ethernet MTU is 1500 we should be OK
  send(in); //  &#151;  send out arbitrary IP packet
  int result = 0;
  //  &#151;  fish for a response that correlates to original packet
  while ( ! (result = recv( in , buffer )) )
  {
   //  &#151;  do some timeout mechanism thingy here
  }
  //  &#151;  report results
  if ( result &lt; 0 )
  { //  &#151;  ICMP 
  } else if ( result &gt; 0 )
  { //  &#151;  correctly correlated response 
  }else
  { //  &#151;  assume timeout
  }
}
</pre>

<p>You could use this method to quickly craft a tool that pings a target with an arbitrary IP packet. For example, a simple SYN probe could be constructed like this:</p>

<pre>
ip &lt; syn &lt; empty &gt; &gt; synp;
synp.saddr = "10.0.0.1"; //  &#151;  our IP
synp.daddr = "10.0.0.2"; //  &#151;  victims addr
synp.data.sport = 123523; //  &#151;  arbitrary
synp.data.dport = 80; //  &#151;  http
checksum(synp);  //  &#151;  calculate checksum
ping(synp); //  &#151;  and send it out!
</pre>

<h3>ARP Request Generator</h3>


<p>This example accepts an IP address and a subnet mask and pings each IP on the address with an ARP request. This could be useful for host enumeration, such as when you've landed on a computer in a foreign network and want to find out which other IPs are listening on the Ethernet. </p>


<pre>
void arp_enum(const ipaddr&amp; tip, const ipaddr&amp; mask)
{
  ethernet &lt; arpreq&lt; &gt; &gt; arprequest;
  arprequest.dhost = "ff:ff:ff:ff:ff:ff";
  arprequest.shost = "ca:fe:de:ad:be:ef";
  arprequest.data.sha = arprequest.shost;
  arprequest.data.tha = arprequest.dhost;
  arprequest.data.sip = (const std::string)("10.0.0.1");
  for(ipaddr the_ip = tip &amp; mask; the_ip &lt;= (tip | (~mask)); ++the_ip)
  {
    arprequest.data.tip = the_ip;
    cout &lt;&lt; "Sending ARP request to " &lt;&lt; the_ip.toString() &lt;&lt; endl;
    ping(arprequest);
  }
}
</pre>
<p>This function assumes a working <b>ping(..)</b> method that operates over <b>ethernet&lt;arpreq&gt;</b>, which is trivial to write using the techniques discussed for writing the IP ping.</p>




<h3>Conclusion</h3>


<p>The techniques and examples I present here only touch on the possibilities for leveraging C++ for low-level network programming. You may want to continue by extending the ping example to develop a generic <b>traceroute</b> method or even contribute to the PacMan library by extending it to support more protocols. </p>


<p>Certainly, there are limits to the applicability of these techniques. As you start to climb the network protocol stack, things start to get a bit more complicated. Protocols such as DNS, which traditionally sit on top of TCP or UDP, are often all but impossible to construct statically. Using static-packet construction to facilitate the inspection of received packets doesn't buy you much because, at compile time, you don't know what sorts of packets you'll be receiving or even the size of expected headers. However, for tools that generate a variety of packets, static-packet construction can greatly reduce code complexity, provide a safer type infrastructure for handling protocol headers, and improve readability. o</p>

<hr><I>
<b>Martin</b> is pursing a Ph.D. in computer science at Stanford University. He can be contacted at <a href="mailto:casado@stanford.edu">casado@stanford.edu</a>.</I>

<hr>

</body>
</html>
