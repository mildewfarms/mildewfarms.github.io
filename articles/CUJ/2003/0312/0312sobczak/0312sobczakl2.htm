<html>
<head>
<title>YAMI: A Simple ORB Library</title>
</head>

<body><h4>Listing 2:	<i>Code for a simple YAMI server.</i></h4>

<pre>
// a simple YAMI server
#include "yami++.h"
using namespace YAMI;
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
// the port of the server's agent
const int serverport = 12340;
// the name of the servant, as seen by clients
const string objectname = "calculator";
// a class implementing the servant
class Calculator : public PassiveObject
{
public:
    void call(IncomingMsg &amp;incoming)
    {
        // get the parameters
        auto_ptr&lt;ParamSet&gt; incparamset(
            incoming.getParameters());
        int a = incparamset-&gt;getInt(0);
        int b = incparamset-&gt;getInt(1);
        int result = 0;
        // get the message's name
        string messagename(incoming.getMsgName());
        if (messagename == "add")
            result = a + b;
        else if (messagename == "subtract")
            result = a - b;
        else if (messagename == "multiply")
            result = a * b;
        else if (messagename == "divide" &amp;&amp; b != 0)
            result = a / b;
        else
        {
            // "throw an exception"
            incoming.reject();
            return;
        }
        ParamSet retparamset(1);
        retparamset.setInt(0, result);
        // send new set of parameters as a reply
        incoming.reply(retparamset);
    }
};
int main()
{
    cout &lt;&lt; "starting the server" &lt;&lt; endl;
    try
    {
        netInitialize();
        {
        Agent agent(serverport);
        Calculator calc_server;
        // register the servant so that the agent accepts and stores messages
        // addressed to this object
        agent.objectRegister(objectname,
            Agent::ePassiveMultiThreaded, &amp;calc_server);
        cout &lt;&lt; "waiting for invocations..."
            &lt;&lt; endl;
        sleep(0);
        }
        netCleanup();
    }
    catch (const exception &amp;e)
    {
        cout &lt;&lt; e.what() &lt;&lt; endl;
    }
}
</pre>
</body>
</html>
