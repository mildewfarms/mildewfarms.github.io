<html>
<head>
<title>Reusing Streams</title>
</head>

<body>


<h2>Reusing Streams</h2>
<h3>By Herb Sutter and Jim Hyslop</h3>

<p>"We seem to be made to suffer," I sighed. "It's our lot in life." Wendy gophered up. "Wassup, pardner?"</p>
<p>"I <i><i>hate</i></i> streams. Hate 'em hate 'em hate 'em."</p>

<p>"Uh-oh. This sounds like a bad one."</p>

<p>I raised my hands helplessly. "Y'know, I thought I knew this language, and then...<i><i>this</i></i>."</p>

<p>Wendy tsked empathetically and walked around to my cubicle to investigate. I showed her my code. By that time, I'd already distilled the problem down to this simple program:</p>

<pre>
// Trying to reuse a C++ ifstream
//
#include &lt;fstream&gt;
#include &lt;iostream&gt;
using namespace std;
int main() {
  char c;
  ifstream file;
  file.open( "file" );
  // ... read from the file all the way to 
  // the end ...
  while( file &amp;&amp; (c = file.get()) != 
        ifstream::traits_type::eof() )
    cout &lt;&lt; c;
  file.close();
  // ... okay so far, but then later on ...
  file.open( "file" );
  // ... read from the file ...
  while( file &amp;&amp; (c = file.get()) != 
         ifstream::traits_type::eof() )
    cout &lt;&lt; c;
  file.close();
}
</pre>

<p>"I thought this was a reasonable thing to do. Isn't it supposed to be legal?" I wondered out loud. "I tried this on quite a few of the compilers we use here. On a couple of the older ones, the second <b>open</b> succeeds. On most of them, the second <b>open</b> fails and only the first pass through the file works. And look, I even went to a lot of trouble to get all the loop control tests right, and I think that they are."</p>

<p>"Hmm," Wendy hmmed.</p>

<p>We both sat and looked at the code for a time.</p>

<p>"Hmm," I agreed.</p>

<p>We sat and looked at the code some more.</p>

<p>"Well, it looks reasonable," Wendy broke the silence. "Okay, pardner, time to hit the Book...What does the Standard say?"</p>

<p>I pulled up my electronic copy of the C++ Standard and we perused it together. "There's something," I pointed. "It seems to say here that a <b>close</b> operation works 'as if' it did an <b>fclose</b>, and that an <b>open</b> works 'as if' it did an <b>fopen</b>. Let's try converting the test code to <b>fopen/fclose</b> calls. Aw, I'll convert the whole thing to C style while I'm at it." I rewrote the program:</p>

<pre>
// Trying to reuse a C FILE stream
//
#include &lt;cstdio&gt;
using namespace std;
int main() {
  char c;
  FILE* file;
  file = fopen( "file", "r" );
  // ... read from the file all the way 
  // to the end ...
  while( file &amp;&amp; (c = getc( file )) != EOF )
    printf( "%c", c );
  fclose( file );
  // ... okay so far, and now we 
  // happily continue ...
  file = fopen( "file", "r" );
  // ... read from the file ...
  while( file &amp;&amp; (c = getc( file )) != EOF )
    printf( "%c", c );
  fclose( file );
}
</pre>

<p>"That looks okay," Wendy affirmed. "Twist their tails and let 'em rip!"</p>

<p>I ran the code against our set of compilers. All of them successfully read through the file twice.</p>

<p>"Ha! So much for the stupid Standard's promise that <b>fstream</b>'s <b>open/close</b> behaves 'as if' using the corresponding C library functions <b>fopen/fclose</b>," I grumbled.</p>

<p>"All is not as it seems," said a quiet voice behind us.</p>

<p>We didn't jump. Much.</p>

<p>The Guru closed a tome; I think it was one of Box's essential volumes. "Be not so quick to ascribe evil to the Holy Standard," she added, "although in this case, it is true that the effect may be somewhat surprising. Not all programmers enjoy streams as much as we...as much as I," she corrected herself.</p>

<p>"Okay, then," I challenged gamely. "Is the original stream example supposed to work? On some compilers, it does; on some, it doesn't."</p>

<p>"The latter compilers, or more aptly, the latter Standard Library implementations, are correct," she replied, pushing a graying lock behind an ear. "The Holy Standard says that your original program shall go through the file only once. It is not so much a matter of whether the second <b>open</b> succeeds; that <b>open</b> ought always to succeed. Rather, it is a matter of, well," &#151; and here I could scarcely believe my eyes, but I do believe the Guru blushed slightly &#151; "that closing and reopening a file does not clear the end-of-file flag."</p>

<p>Wendy and I looked at her unbelievingly, speechless.</p>

<p>The Guru had apparently found something interesting to look at high on the opposite wall and wouldn't meet our eyes.</p>

<p>"<i><i>What</i></i>?!" Wendy and I blasted nearly simultaneously.</p>

<p>The Guru sniffed. "Well, consider one obvious design difference between the <b>fclose/fopen</b> and the stream <b>close/open</b>. On the one hand, besides closing the disk file, <b>fclose</b> also deallocates the <b>FILE</b> structure that contained the housekeeping information used to track access to the file while it was open, and <b>fopen</b> allocates a new <b>FILE</b> object and sets its values afresh. It is, therefore, natural that no state survives from the first <b>FILE</b> object into the second one. On the other hand, with the calls to <b>close</b> and <b>open</b>, we do not destroy and reconstruct the <b>ifstream</b> object, and so the opportunity exists to...er...to retain some of the previous state. And indeed, as the Holy Standard specifies it today, some state is, indeed, specified to survive."</p>

<p>We greeted this news with stony silence.</p>

<p>"Well," she shrugged, "it is as even as I said. What more can I add? Only that what you want to do is eminently reasonable, only you did not perform one extra step." She wrote the line:</p>

<pre>
file.clear(); // the solution!
</pre>

<p>She continued: "You need to call <b>clear</b> to clear the flags that were set by encountering the end of file during the first pass before you try to read from it again, or the read must fail."</p>

<p>"<i><i>Whaaat</i></i>?!?!" Wendy and I blasted again, this time in perfect unison.</p>

<p>The Guru glanced around to make sure nobody else was in earshot, and lowered her voice. "Hey," she said, dropping the Guru shtick, "Don't look at me. I didn't specify it, I'm just telling you what it does, okay? If you think that's odd, here's the icing on the cake: It doesn't even matter whether you call <b>clear</b> before or after the call to <b>open</b>, just as long as you call it before the first attempt to read again after the second <b>open</b>."</p>

<p>"But why doesn't <b>close</b> just call <b>clear</b> automatically?" I pleaded.</p>

<p>"There was a valid reason for that," the Guru responded tartly. "Leaving the state bits intact after the call to <b>close</b> allows the programmer to defer error handling until the end. For example, consider this." She wrote:</p>

<pre>
  ifstream file;
  file.open( "file");
  // ...
  file.close();
  if ( !file ) 
    /* oops, something went wrong, better log it or something */
</pre>

<p>"Besides," she continued, "If <b>close</b> always cleared the state bits, how would you know if <b>close</b> encountered an error? Because <b>close</b>, unfortunately, returns <b>void</b> and throws no exceptions, it cannot report errors directly."</p>

<p>"Ugh!" Wendy and I groaned raggedly.</p>

<p>"Of course," the Guru added, "it only takes a slight adjustment to your question to make it perfectly valid: It's probably completely reasonable that <b>open</b>, rather than <b>close</b>, ought to clear the state bits automatically. After all, you're starting fresh again...or should be."</p>

<p>"And that," I said emphatically, "is another reason I hate streams. They're just too complicated."</p>

<p>"Do not throw out the baby with the bathwater, young ones," the Guru said, resuming her Guru shtick as she saw Kerry approaching. "Streams give a very useful and type-safe abstraction for data sources and sinks, and valuable in practice they are. If they are imperfect, so are we all." She bowed, turned, and left, reopening her tome and pretending (I thought) to read as she walked.</p>

<p>I sighed. "What a wonderful smell you've discovered," I muttered loudly at her retreating back, pretending to hold my nose with one hand while typing the necessary call to <b>clear</b> into my original code with the other. Wendy cackled uproariously and went back around to her cube.</p>

<p>As Kerry walked by, he looked in turn at each of the three of us, a somewhat bewildered expression on his face. I knew I should go through what I'd just learned again for his benefit, but I was just too tired just then and let it go. It would keep until the morrow, and I would share my newfound knowledge then.</p>

<p>I sighed, saved my file, and began to recompile.</p>



<h3>Acknowledgments</h3>


<p>Thanks to Fedor Pikus for asking the question that prompted this article, and to Pete Becker, Nathan Myers, Jerry Schwarz (the father of <b>iostreams</b>), and Martin Sebor for their comments in e-mail discussion on this issue. o</p>

<hr><I>
<b>Herb Sutter</b> (<a href="http://www.gotw.ca/">http://www.gotw.ca/</a>) is convener of the ISO C++ Standards committee, author of <i>Exceptional C++</i> and <i>More Exceptional C++</i>, and C++ program manager for Microsoft.<b>
Jim Hyslop </b>is a senior software designer with over 10 years of programming experience in C and C++. Jim works at Leitch Technology International Inc. where he deals with a variety of applications ranging from embedded apps to Windows programs. He can be reached at <a href="mailto:jhyslop@ieee.org">jhyslop@ieee.org</a>.</I>

<hr>

</body>
</html>
