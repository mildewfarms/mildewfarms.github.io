<html>
<head>
<title>Unfinished Business</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h2>Unfinished Business</h2>
<h3>by Steve Dewhurst</h3>
<p>All good things must come to an end and so, coincidentally, must this column. 
  In this last installment of Common Knowledge we'll look at combining some template 
  metaprogramming odds and ends that have been kicking around in my &quot;to think 
  about sometime&quot; folder to see if we can come up with a reasonable framework 
  for ad hoc type manipulation. We'll fail, but it'll be fun to make the attempt. 
  Along the way we'll consider the creative use of rocks in automotive maintenance, 
  type translation to facilitate compile-time manipulation, un-instantiation of 
  class templates, giving the STL allocator &quot;rebind&quot; mechanism the boot, 
  typelist meta-generic algorithms, meta-predicate adaptation, and the importance 
  of having fun.</p>
<h3>Part 1: Type Dismantling and Regeneration</h3>
<p>In past installments of Common Knowledge, we've developed techniques that perform 
  compile time translation of a type into a large integer [1], and a way of representing 
  integers as types so as to perform compile time arithmetic on very large integers 
  [2]. Now we'll look at a more general compile time type-to-type translation.</p>
<h3>Hammers and Rocks</h3>
<p>In template metaprogramming, we often have to make &quot;adjustments&quot; 
  to a type before we can use it. For example, we may have to adjust the type 
  of container element to produce the correct type for use as a temporary:</p>
<pre>
template &lt;class Cont>
void doItToCont( Cont &c ) {
    typename DeConst&lt;typename Cont::element_type>::R temp;
    //…
}
</pre>
<p>Here, we've recognized that <b>Cont</b> (which we're assuming to be some sort 
  of container) may have constant elements. In that event, a temporary would have 
  to be the non-constant analog of <b>element_type</b>. To ensure this, we perform 
  a small bit of type manipulation (with the <b>DeConst</b> template) to remove 
  a top-level const qualifier if it's present [3]. I find this sort of operation 
  analogous to working on an automobile engine [4]. Use of the <b>DeConst</b> 
  type manipulation operation is similar to smacking an engine part with a hammer 
  or, in a pinch, a rock (I speak from experience here) in order to make it fit 
  the purpose for which you intend it, no matter what its manufacturer intended.</p>
<p>Effective though that approach can be, it's a bit heavy-handed. Additionally, 
  every different &quot;mechanic&quot; will find different ways to accomplish 
  similar ends. Some prefer hammers, some prefer rocks. (I knew one mechanic who 
  could make parts fit by sheer force of language.) Sometimes it's best to go 
  back to the shop manual, dismantle the engine, change a few parts, and put it 
  back together correctly with a minimum of physical violence or verbal persuasion.</p>
<h3>Type Dismantling</h3>
<p>The first step in this process is the dismantling of a complex structure (whether 
  it is a type or an engine) into its constituent parts. However, the dismantling 
  must be orderly so we don't lose parts or switch them accidentally. Since we're 
  working with types, we'll employ the typelist compile time list structure popularized 
  by Andrei Alexandrescu [5]: </p>
<pre>
template &lt;typename T, class U>
struct typelist {
	typedef T Head;
	typedef U Tail;
};

typedef struct null_typelist{};
</pre>
<p>A typelist is just a sequence of types terminated with a <b>null_typelist</b>. 
  The structure is recursively defined, so that a typelist is either a <b>null_typelist</b>, 
  or a pair consisting of a type and a typelist.</p>
<p>To dismantle a type, we examine how it's constructed and string its constituent 
  parts on a typelist. The catchall simply creates a one-element typelist:</p>
<pre>
template <typename T>
struct Dis {
	typedef typelist&lt;T,null_typelist> R;
};
</pre>
<p>This primary <b>Dis</b> template is used to record the base type of a (potentially) 
  complex type. We'll see later how we can customize this template to dismantle 
  complex base types, or special case for base types with particular properties.</p>
<p>In order to record information about type modifiers in a typelist, we create 
  types that represent modifiers.</p>
<pre>
struct Const {};
struct Volatile {};
struct Ref {};
struct Ptr {};
</pre>
<p>Once we have these representations available, we can partially-specialize <b>Dis</b> 
  to recognize and dismantle modified types.</p>
<pre>
template &lt;typename T>
struct Dis&lt;const T> {
	typedef typelist&lt;Const, typename Dis&lt;T>::R> R;
};
template &lt;typename T>
struct Dis&lt;T *> {
	typedef typelist&lt;Ptr, typename Dis&lt;T>::R> R;
};
template &lt;typename T>
struct Dis&lt;T &> {
	typedef typelist&lt;Ref, typename Dis&lt;T>::R> R;
};
</pre>
<p>For example, <b>Dis&lt;int * const&gt;::R</b> will produce the three-element 
  typelist <b>[Const, Ptr, int]</b>. Other modifiers are handled similarly, but 
  are marginally more complex. Array and pointer-to-data-member modifiers must 
  encode their bound and class type information, respectively:</p>
<pre>
template &lt;int>
struct Ary
	{};

template &lt;class>
struct Pcm
	{};
</pre>
<p>Dismantling these types is similar to dismantling a pointer type, above.</p>
<pre>
template &lt;typename T, int b>
struct Dis&lt;T[b]> {
	typedef typelist&lt; Ary&lt;b>,typename Dis&lt;T>::R > R;
};

template &lt;class C, typename T>
struct Dis&lt;T C::*> {
	typedef typelist&lt;Pcm&lt;C>,typename Dis&lt;T>::R> R;
};
</pre>
<p>Therefore, the code <b>Dis&lt;const int X::* const&gt;::R</b> results in the 
  type list <b>[Const, Pcm&lt;X&gt;, Const, int]</b>. Although we do not use this 
  information currently, it may also be a good idea to provide the user of our 
  type-dismantling framework more information about the <b>Pcm</b> modifier:</p>
<pre>
template &lt;class C>
struct Pcm
	{ typedef typename Dis&lt;C>::R Class; };
</pre>
<p>Note that, with this additional information recorded in the <b>Pcm</b> template, 
  we now no longer have a simple linear type list, but a list of lists. The function 
  and pointer-to-member-function modifiers are more complex, because they can 
  take arguments [6]: </p>
<pre>
struct Fun0 {};

template &lt;typename A>
struct Fun1
	{ typedef typename Dis&lt;A>::R Arg; };

template &lt;typename Ret>
struct Dis&lt;Ret(void)> {
	typedef typelist&lt;Fun0,typename Dis&lt;Ret>::R> R;
};

template &lt;typename Ret, typename Arg>
struct Dis&lt;Ret(Arg)> {
	typedef typelist&lt;Fun1&lt;Arg>,typename Dis&lt;Ret>::R> R;
};
</pre>
<p>With this implementation of <b>Dis</b> in place, we can now dismantle an arbitrary 
  type into its constituent parts:</p>
<pre>
template &lt;typename T>
void aTemplateContext() {
	typedef typename Dis&lt;T>::R ExplodedT;
	//…
</pre>
<h3>Type Regeneration</h3>
<p>Of course, a collection of piece parts, no matter how well organized, is not 
  as useful as a functioning engine. Therefore, we also have a facility to regenerate 
  a &quot;normal&quot; type from a type list that contains a dismantled type.</p>
<pre>
template &lt;class T>
struct Regen;
</pre>
<p>We have no need of the implementation of the primary template, so we omit it. 
  The partial specializations of <b>Regen</b> handle the translation back to a 
  normal type. The inversion of the catchall case described above simply pulls 
  the type out of the single-element type list:</p>
<pre>
template &lt;typename T>
struct Regen&lt; typelist&lt;T,null_typelist> > {
	typedef T R;
};
</pre>
<p>The other cases are pretty much what one would expect. The regeneration process 
  recursively regenerates the modified type, then attaches the appropriate modifier:</p>
<pre>
template &lt;class T>
struct Regen&lt; typelist&lt;Const,T> > {
	typedef const typename Regen&lt;T>::R R;
};
template &lt;class T>
struct Regen&lt; typelist&lt;Ptr,T> > {
	typedef typename Regen&lt;T>::R *R;
};
template &lt;class T, class C>
struct Regen&lt; typelist&lt;Pcm&lt;C>,T> > {
	typedef typename Regen&lt;T>::R C::*R;
};
Now we have the ability to go back and forth between the normal and dismantled versions of a type.
template &lt;typename T>
void aTemplateContext() {
	typedef typename Dis&lt;T>::R ExplodedT;
	//…
	typedef typename Regen&lt;ExplodedT>::R TheSameT;
	//…
</pre>
<h3>So What's The Point?</h3>
<p>In effect, we now have two equivalent, but structurally distinct, versions 
  of the same type. The normal version is optimized for use in a traditional fashion: 
  accessing its operations, causing code to be generated that will execute at 
  runtime, etc. The dismantled version is optimized for compile time analysis 
  and manipulation. Therefore, we now have the ability to move an arbitrary type 
  between representations according to how we want to use it. The invertibility 
  of the representations assures us that either representation will contain all 
  the information present in the other.</p>
<h3>Part 2: Extending Capability with Template Un-Instantiation</h3>
<p>As we mentioned above, the primary <b>Dis</b> template is a catchall for any 
  type not more specifically described by <b>Dis</b>'s partial specializations. 
  The existing partial specializations cover all possible type modifiers [7], 
  so the catchall dismantles only base types. However, we can be more selective. 
  For instance, we could decide to handle a particular base type or set of base 
  types differently:</p>
<pre>
struct Int
{};
template &lt;>
struct Dis&lt;int> {
	typedef typelist&lt;Int,null_typelist> R;
};
template &lt;>
struct Regen&lt; typelist&lt;Int,null_typelist> >  {
	typedef int R;
};
</pre>
<p>These three new elements extend the framework to special case on <b>int</b>. 
  Useless.</p>
<p>However, there are more useful extensions. For example, it's possible to dismantle 
  a type generated from a class template into the original template and the arguments 
  used in its instantiation. We then have the ability to re-instantiate the template 
  with different arguments, or (as we'll see later in this article) produce an 
  adapted template that can be instantiated with different numbers or types of 
  arguments [8]. </p>
<pre>
template &lt;template &lt;typename> class Templ, typename T>
struct TemplT {
	template &lt;typename S>
	struct Subst // rebind with a different type name
		{ typedef Templ&lt;S> R; };
	typedef T Arg;
	typedef typename Dis&lt;T>::R R;
};

template &lt;template &lt;typename> class Templ, typename T>
struct Dis &lt; Templ&lt;T> > {
	typedef typelist&lt;TemplT&lt;Templ,T>, null_typelist> R;
};

template &lt;template &lt;typename> class Templ, typename T>
struct Regen&lt; typelist&lt;TemplT&lt;Templ,T>,null_typelist> > {
	typedef Templ&lt;T> R;
};
</pre>
<p>This extension to the dismantling framework allows us to examine the fine structure 
  of a base type generated from a class template with a single type parameter. 
  In a similar fashion, we can extend the framework to handle types generated 
  from templates with other parameter types. The following extension handles class 
  templates with two type parameters:</p>
<pre>
template &lt;template &lt;typename,typename> class Templ,
          typename T1, typename T2>
struct TemplTT {
	template &lt;typename S1, typename S2>
	struct Subst
		{ typedef Templ&lt;S1,S2> R; };
	typedef T1 Arg1;
	typedef T2 Arg2;
	typedef typename Dis&lt;T1>::R R1;
	typedef typename Dis&lt;T2>::R R2;
};

template &lt;template &lt;typename,typename> class Templ,
          typename T1, typename T2>
struct Dis &lt; Templ&lt;T1,T2> > {
	typedef typelist&lt;TemplTT&lt;Templ,T1,T2>, null_typelist> R;
};

template &lt;template &lt;typename,typename> class Templ,
          typename T1, typename T2>
struct Regen&lt; typelist&lt;TemplTT&lt;Templ,T1,T2>,null_typelist> > {
	typedef Templ&lt;T1,T2> R;
};
</pre>
<p>Similar extensions may be used for templates that take integral or pointer 
  arguments, as well as type arguments.</p>
<h3>Part 3: Typelist Meta-Algorithms</h3>
<p>Typelists are a common, general mechanism for representing an ordered sequence 
  of types at compile time. The analogy with an STL sequence defined by a pair 
  of iterators is nearly irresistible, so I didn't resist. In this section, we 
  develop a suite of typelist meta-algorithms in (somewhat broad) imitation of 
  STL generic algorithms on sequences.</p>
<h3>Type Predicates and Comparators</h3>
<p>Many interesting generic algorithms on sequences require the ability to compare 
  two elements of the sequence, or ask a yes/no question of a sequence element.</p>
<p>The STL generally uses function objects (though it may also use function pointers) 
  to provide these capabilities. Typically, a predicate or comparator is implemented 
  as a class template that is instantiated and used to generate a function object, 
  which is then passed as an argument to a generic function.</p>
<p>We have to use a somewhat different approach to provide a compile-time &quot;function 
  object.&quot; Instead of instantiating our generic meta-algorithms with the 
  type of a function object, we'll instantiate them with the template of a meta-function 
  object. Where a runtime generic algorithm uses an object generated from a class 
  type as a function object, our compile time meta-algorithms will use a class 
  type generated from a class template as a &quot;meta-function object.&quot;</p>
<p>For example, a simple meta-predicate that determines whether or not a particular 
  type is <b>double</b> could be implemented as follows:</p>
<pre>
template &lt;class T>
struct IsDouble { enum { r = false }; };
template &lt;>
struct IsDouble&lt;double> { enum { r = true }; };
</pre>
<p>By convention (OK, <i>my</i> convention), the result of applying a predicate 
  or comparator is a nested compile time value named <b>r</b> that is convertible 
  to <b>bool</b>. While an STL predicate provides an answer to a question about 
  an object, a meta-predicate provides an answer to a question about a type.</p>
<p>As in the STL, we may also consider comparators; a subset of binary predicates 
  that implement a strict weak ordering. As with meta-predicates, our meta-comparators 
  implement an ordering on types, rather than objects:</p>
<pre>
template &lt;typename A, typename B>
struct IsSmaller {
	enum { r = sizeof(A) &lt; sizeof(B) };
};

template &lt;class A, class B>
struct IsDerivedFrom {
	enum { r = SUPERSUBCLASS_STRICT(A,B) }; // from Modern C++ Design
};
</pre>
<p>Using these meta-comparators, we can compare pairs of types based on the relative 
  sizes of their objects, or on their inheritance relationship. Note that the 
  <b>IsDerivedFrom</b> comparator does not implement a total ordering on the set 
  of types, since it's possible (or likely) that two types have no inheritance 
  relationship.</p>
<h3>Generic Typelist Algorithms</h3>
<p>Meta-predicates and comparators are most useful when used to parameterize meta-generic 
  algorithms. For instance, we can use a meta-predicate to implement a partition 
  algorithm on typelists:</p>
<pre>
template &lt;class TList, template &lt;typename> class Pred>
struct Partition;

template &lt;template &lt;typename> class Pred>
struct Partition&lt;null_typelist,Pred> {
	typedef null_typelist R;
	enum { r = 0 };
};

template &lt;class Head, class Tail, template &lt;typename> class Pred>
struct Partition&lt;typelist&lt;Head,Tail>,Pred> {
	typedef typename Select&lt;
		Pred&lt;Head>::r,
		typelist&lt;Head,typename Partition&lt;Tail,Pred>::R>,
		typename Append&lt;typename Partition&lt;Tail,Pred>::R,Head>::R
	>::R R;
	enum { r = Partition&lt;Tail,Pred>::r + Pred&lt;Head>::r };
};
</pre>
<p>The <b>Partition</b> meta-algorithm on typelists performs in a similar fashion 
  to the STL <b>partition</b> algorithm on sequences. The nested type <b>R</b> 
  is a copy of the original typelist, but reordered in such a way that all the 
  types that satisfy the predicate occur before types that do not. The index of 
  the first type that does not satisfy the predicate is available in the nested 
  value <b>r</b>.</p>
<pre>
typedef Partition&lt;ATypeList,IsDouble>::R Partitioned;
const int index = Partition&lt;ATypeList,IsDouble>::r;
</pre>
<p>In the code snippet above, <b>Partitioned</b> is a reorganized version of <b>ATypeList</b> 
  such that all the types that satisfy the predicate <b>IsDouble</b> (that is, 
  all <b>double</b>s) appear first, and <b>index</b> is the index of the first 
  type in <b>Partitioned</b> that does not satisfy <b>IsDouble</b> (that is, is 
  not <b>double</b>).</p>
<p>In a similar fashion, we can perform a compile time sort of a typelist with 
  the help of a meta-comparator:</p>
<pre>
typedef Sort&lt;ATypeList,IsSmaller>::R SortedSmaller;
typedef Sort&lt;ATypeList,IsDerivedFrom>::R SortedHier;
</pre>
<p>The nested typename <b>R</b> is the reordered <b>ATypeList</b>, sorted according 
  to the argument comparator. <b>SortedSmaller</b> is sorted by the <b>sizeof</b> 
  the type, and <b>SortedHier</b> gives a result based on the partial ordering 
  of the typelist based on the is-a relationship.</p>
<h3>Meta-Function Adapters</h3>
<p>The STL includes the concept of function object adapters that can be used to 
  modify and combine function objects to produce new function objects. We can 
  do the same with our meta-predicates and comparators through the use of meta-function 
  adapters. For example, we can negate the sense of a unary or binary meta-predicate:</p>
<pre>
template &lt;template &lt;typename> class X>
struct Not1 { // negate a unary predicate
	template &lt;typename A>
	struct Adapted {
		enum { r = !X&lt;A>::r };
	};
};
template &lt;template &lt;typename,typename> class X>
struct Not2 { // negate a binary predicate/comparator
	template &lt;typename A, typename B>
	struct Adapted {
		enum { r = !X&lt;A,B>::r };
	};
};
</pre>
<p>Our meta-predicates are implemented as class templates, so the adapter must 
  accept a template template parameter. The result must be a template that can 
  be instantiated with the same set of arguments as the original predicate. This 
  template is available (again, by my convention only) as the nested template 
  name <b>Adapted</b>.</p>
<pre>
typedef Sort&lt;ATypeList,Not2&lt;IsSmaller>::Adapted>::R NotSmallerFirst;
</pre>
<p>The typelist <b>NotSmallerFirst</b> contains the content of <b>ATypeList</b> 
  sorted according to the <b>&gt;=</b> operation on the type's sizes [9]. </p>
<p>As another example, it's sometimes useful to be able to change a binary predicate 
  into a unary predicate by binding one of its arguments to a fixed value, or 
  in the case of our meta-predicates, to a fixed type:</p>
<pre>
template &lt;template &lt;typename,typename> class X, typename A>
struct Bind1st { // bind the first type argument to A
	template &lt;typename B>
	struct Adapted {
		enum { r = X&lt;A,B>::r };
	};
};

template &lt;template &lt;typename,typename> class X, typename B>
struct Bind2nd { // bind the second type argument to B
	template &lt;typename A>
	struct Adapted {
		enum { r = X&lt;A,B>::r };
	};
};
</pre>
<p>For example, we can use one of our binders to reimplement <b>IsDouble</b></p>
<pre>
template &lt;class T>
struct IsDouble {
    enum { r = Bind2nd&lt;IsSame,double>::template Adapted&lt;T>::r };
};
</pre>
<p>assuming that we have available an implementation of <b>IsSame</b> [10]: </p>
<pre>
template &lt;class A, class B>
struct IsSame { enum { r = false }; };
template &lt;class A>
struct IsSame&lt;A,A> { enum { r = true }; }; 
</pre>
<p>The availability of meta-adapters provides even more flexibility in composing 
  complex predicates and comparators:</p>
<pre>
typedef Partition&lt;
	ATypeList,
	Not1&lt;Bind2nd&lt;IsSmaller,int>::Adapted>::Adapted
>::R Partitioned2;
</pre>
<p>The typelist <b>Partitioned2</b> will be a reordering of <b>ATypeList</b> such 
  that those types that are not smaller than an <b>int</b> will occur first. Similar 
  adapters allow the composition of predicates, etc.</p>
<pre>
template &lt;template &lt;class> class X, template &lt;class> class Y>
struct Or1 { // Or together two unary predicates
	template &lt;class A>
	struct Adapted {
		enum { r = X&lt;A>::r || Y&lt;A>::r };
	};
};
</pre>
<p>The availability of STL-like algorithms on typelists appears to be occasionally 
  useful. For example, if a typelist is going to be used to generate type-based 
  conditional code, then it may be important that the typelist be ordered in a 
  particular way. In an ad hoc Visitor [11] implementation over a hierarchy of 
  shapes, it is important that derived shape classes appear before their base 
  classes in the typelist if the generated conditional code is to be correct. 
  This can be accomplished by a variety of means, one of which is to sort the 
  typelist with the appropriate comparator:</p>
<pre>
typedef // typelist containing the types of Shape we know about
	typelist< Ellipse, // oops, out of order!
	typelist< Circle,
typelist< Square,
typelist< Triangle,
null_typelist> > > > Shapes;

struct ShapeVisitor
    : AdHocVisitor&lt;Sort&lt;Shapes,IsDerivedFrom>::R> { // OK, in order
    //…
    };
</pre>
<p>This capability is particularly important if several disjoint pieces of code 
  participate in construction of the typelist. The consumer of the typelist has 
  the ability to enforce local constraints on its structure.</p>
<p>Other applications are easy to imagine. Consider a multi-conversion operation 
  that performs a conversion of its argument to the first valid element of a sequence 
  of types organized according to some set of criteria [12]: </p>
<pre>
template &lt;class TList, typename T>
struct ConversionRetType { // a helper for multiconvert
    // remove any types for which there is no conversion
    typedef typename
        EraseIf&lt;TList,
           Not1&lt;
               Bind1st&lt;CanConvert,T>::template Adapted
           >::template Adapted
        >::R Candidates;
    // stick on a void so we know there's *something* there
    typedef typename Append&lt;Candidates,void>::R CandidatesV;
    // take the first of what remains
    typedef typename CandidatesV::head R;
};

template &lt;class TList, typename T>
typename ConversionRetType&lt;TList,T>::R multiconvert( const T &t ) {
	typedef typename ConversionRetType&lt;TList,T>::R Ret;
	return static_cast&lt;Ret>(t); // cast to avoid warnings
}
</pre>
<p>The availability of this operation will allow us to express a sequence of target 
  types for a conversion:</p>
<pre>
Sort&lt;ATypeList,IsSmaller>::R Sequence; // ordered targets
//…
T var; // a variable of some type
cout &lt;&lt; multiconvert&lt;Sequence>( var ) &lt;&lt; endl;
</pre>
<p>Of course, similar operations can be written for sets of conversions that can 
  be obtained by <b>static_cast</b>, <b>const_cast</b>, and so on.</p>
<h3>Part 4: Putting It All Together for Ad Hoc Type Manipulation</h3>
<p>It would seem to be a generally useful capability to disassemble a type into 
  its constituent parts, perform some analysis and transformation on its parts, 
  then reassemble the modified sequence of parts into a new type.</p>
<pre>
template &lt;typename T>
void aTemplateContext() {
    typedef typename Regen&lt;
        typename TransformIf&lt;typename Dis&lt;T>::R,IsRef,MakePtr>::R
    >::R ModifiedT;
    //…
}
</pre>
<p>In the example above, we've decided to modify the template parameter <b>T</b> 
  by replacing every reference modifier in the type with a pointer modifier through 
  use of the <b>TransformIf</b> typelist meta-algorithm on the dismantled <b>T</b>. 
  This is silly, but compelling. Unfortunately, it's not easy to find generally 
  useful manipulations involving meta-algorithms on dismantled types, though there 
  may be a few.</p>
<p>Oh well, not every technique is immediately&#151;or even eventually&#151;useful. 
  At such times it helps me to reflect on two pieces of advice from Dr Seuss:</p>
<blockquote>
  <p>&quot;If you never did you should. These things are fun, and fun is good.&quot; 
    [13]<br>
    &quot;It's fun to have fun, but you have to know how.&quot; [14]</p>
</blockquote>
<p>Come to think of it, that's not a bad summary of the philosophy behind this 
  series of columns. So long, keep learning and experimenting, and have fun.</p>
<p><font size="-1">Copyright &copy; 2003 by Stephen C. Dewhurst</font></p>
<h3>References</h3>
<p> [1] &quot;A Bit-Wise Typeof Operator,&quot; Parts 1-3. C/C++ Users Journal 
  20, 8, 10,12 (August, October, and December 2002).<br>
  [2] &quot;Typeints,&quot; C/C++ Users Journal Experts Forum, 21, 2 (February 
  2003).<br>
  [3] In fact, it would probably be better in this case to employ some sort of 
  traits class to get the element_type of the container.<br>
  [4] Particularly the big-block Ford models of the late '70s.<br>
  [5] I've taken a few liberties here, but this is still the basic Alexandrescu 
  type list. See his Modern C++ Design.<br>
  [6] Obviously, a lot of the implementation has been omitted here for reasons 
  of space and tedium. The full implementation (which will continue to evolve 
  as I find time to work on it) is available on http://www.semantics.org/code.html.<br>
  [7] To be perfectly precise, the current implementation handles only a bounded 
  number of arguments for pointers-to-member-functions and functions, so any function 
  or member function type that has more arguments than the implementation can 
  handle will be recorded by the catchall.<br>
  [8] This would also be an effective way to produce a compile time predicate 
  to determine whether a particular type was generated from a template, or to 
  circumvent the necessity of the &quot;rebind&quot; mechanism employed by the 
  standard STL allocators, by moving the rebind capability into a facility separate 
  from the allocator itself.<br>
  [9] No, this is not a strict weak ordering, and may cause some implementations 
  of Sort to fail. It just so happens that the Sort implemented here doesn't mind.<br>
  [10] See Modern C++ Design, for instance. Note also the required use of the 
  template keyword before the nested Adapted template name in the implementation 
  of the IsDouble template.<br>
  [11] See Andrei Alexandrescu, &quot;Typelists 
  and Applications,&quot; February 2002 installment of Generic&lt;Programming&gt;.<br>
  [12] The CanConvert binary predicate is (again) from Modern C++ Design.<br>
  [13] Dr. Seuss, One Fish, Two Fish, Red Fish, Blue Fish.<br>
  [14] Dr. Seuss, The Cat in the Hat.<br>
</p>
</body>
</html>
