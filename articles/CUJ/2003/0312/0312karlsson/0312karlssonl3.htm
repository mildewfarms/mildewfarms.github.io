<html>
<head>
<title>Lambda Expressions &amp; C++</title>
</head>

<body>

<h4>Listing 3: 	<i>A simple device</i>.</h4>

<pre>
namespace sample {
  struct placeholder_1 {};
  placeholder_1 _1;
  template &lt;typename T&gt; struct simple_binder_lshift {
    T&amp; t_;
  public:
    simple_binder_lshift(T&amp; t):t_(t) {}
    template &lt;typename U&gt; T&amp; operator()(U u) {
      t_ &lt;&lt; u;
      return t_;
    }
  };
}
template &lt;typename T&gt; sample::simple_binder_lshift&lt;T&gt; 
  operator&lt;&lt;(T&amp; t,sample::placeholder_1 ignore) {
    return sample::simple_binder_lshift&lt;T&gt;(t);
}
int main() {
  using sample::_1;
  std::vector&lt;std::string&gt; vec;
  vec.push_back("Simple");
  vec.push_back(" example");
  std::for_each(vec.begin(),vec.end(),std::cout &lt;&lt; _1);
}
</pre>
</body>
</html>
