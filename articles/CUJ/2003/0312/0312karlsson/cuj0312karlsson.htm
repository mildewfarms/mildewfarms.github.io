<html>
<head>
<title>Lambda Expressions &amp; C++</title>
</head>

<body>
<h2>Lambda Expressions &amp; C++</h2>

<h3>By Bjorn Karlsson</h3>



<p>Lambda expressions are a common feature in functional programming languages. A lambda expression is a highly compact expression that does not require a separate class/function definition. The variables, values, and functions are defined together in one statement. A lambda expression is sometimes called an "unnamed" expression because it does not require a name that must then be associated with a description elsewhere in the program. Instead, the function is defined and used in one callout. That definition can include references to other functions, but the lambda expression still has the effect of eliminating one or more layers of code that separate the data from the operation. </p>
<p>There is no facility such as this in C++, although there is a definite need for it &#151; especially with STL and other class libraries employing the concept of function objects. A lot of small classes are written to accommodate the requirements for C++ Standard Library algorithms; simple dispatchers needed to tweak argument ordering, arity, or combinations and delays of function calls. You can address the problem of this proliferation of small classes with lambda expressions, now available to C++ users through the Boost Lambda library (<a href="http://www.boost.org/libs/lamba/doc/">http://www.boost.org/libs/lamba/doc/</a>).</p>

<p>The format of a lambda expression is <b>lambda p</b><sub>1</sub><b>...p</b><sub>n</sub><b>.e</b>, where <b>p</b><sub>1</sub><b>...p</b><sub>n</sub><b> </b>is a list of parameters used in the expression and <b>e</b> is the expression.</p>

<p>When you invoke a lambda expression, you also call out the arguments that are substituted into the expression. For instance, <b>(lambda A B.A*B) 3 4 </b>evaluates to<b> 3*4=12.</b> The expression <b>(lambda A B C.do_something(A+B,B*2,C) 1 2 "str"</b> calls the function <b>do_something()</b> with integer arguments <b>3</b>, <b>4</b>, and the string literal <b>str</b>.</p>

<p>Lambda expressions are important because they allow for functional composition and local functions. A good example is applying operations to elements of containers. Assume that for all elements, you must call a member function <b>func()</b> and pass the result of that function call to another function <b>func2()</b>; this is typically implemented using a free function or a function object with the sole purpose of calling these two functions. However, this type of simple task is better expressed directly at the call site by composing the functional elements into a lambda expression. It makes the code easier to write, easier to read, and easier to maintain.</p>

<p>You can use lambda expressions to dramatically reduce the size of your code. In this article, I provide an overview of the Boost Lambda library (BLL) and give examples of real-world uses for lambda expressions with the Standard Library. I also describe how BLL addresses topics such as control constructs, binders, and even exception handling. </p>



<h3>Hello, Lambda</h3>


<p>A good "Hello World" example for using lambda expressions in C++ is the problem of printing the elements of a <b>std::vector</b> containing strings to <b>std::cout</b>. <A HREF="0312karlssonl1.htm" target="_BLANK">Listing 1</A> is the current way of achieving this (without copying to an <b>ostream_iterator</b>), and the utility is used thus:</p>

<pre>
std::for_each( vec.begin(), vec.end(), print_to_stream&lt;std::string&gt;(std::cout));
</pre>

<p>There is nothing inherently wrong with this approach, but it would be convenient if you could define the function object directly, rather than having to create it in a separate block of code. With the BLL, all of this becomes:</p>

<pre>
std::for_each(vec.begin(),vec.end(),std::cout &lt;&lt; _1);
</pre>

<p>This is just about as short and concise as it gets. The function object is created for us by the Lambda library, with<b> _1 </b>serving as a placeholder for an argument to be passed to the function call operator. <A HREF="0312karlssonl2.htm" target="_BLANK">Listing 2</A> is the Hello Lambda program in full. </p>

<p>The crux of this example is the result of the expression <b>std::cout &lt;&lt; _1.</b> Through overloading, the placeholder<b> _1</b> provides the context required for the Lambda library to do its job, which, in this case, is to create a function object that calls <b>operator&lt;&lt; </b>for any object passed to it.</p>

<p>The Hello Lambda example may still seem like some sort of black magic, so it is a worthwhile digression to take a quick look at how this works. What does that placeholder really do? The key to lambda expressions is the fact that almost all C++ operators can be overloaded, and overloading provides you with any context you would like. In our example, this involves creating a function object that can be invoked at any given time.</p>

<p>For consistency with the example, <A HREF="0312karlssonl3.htm" target="_BLANK">Listing 3</A> is a simple device capable of the same cool brevity as the previous example. The ingredients you need are simple: a tag class to use for overloading purposes, an instance of this class for passing to the operator, and an overloaded operator.</p>

<p>Now, with the help of the overloaded <b>operator&lt;&lt;</b>, an expression containing<b> _1 </b>(which is a variable of the placeholder type) returns a function object of type<b> simple_binder_lshift&lt;T&gt;</b>, which accepts a single argument to the function call operator. So, the black magic is really just operator overloading, creativity, and hard work. Since the example is limited in functionality and has some severe restrictions that make it unsuitable for a full-scale solution, you can imagine what it takes to go all the way with every operator and full functionality. For the expression <b>std::for_each(vec.begin(),vec.end(),std::cout &lt;&lt; _1)</b>, the third argument is of a type, <b>T</b>, that is applied to the result of dereferencing the iterators (in the range denoted by the first two parameters). The type <b>T</b> must thus be either a free function or a function object, accepting an argument of type <b>std::string</b> (or compatible <b>cv</b>-qualifiers). The expression<b> std::cout &lt;&lt; _1</b> is exactly that, because the overload resolution kicks in and selects the correct function:</p>

<ul>

  <li>The function template <b>&lt;typename T&gt; sample::simple_binder_lshift&lt;T&gt;  operator&lt;&lt;(T&amp; t,sample::placeholder_1 ignore)</b> is invoked.

  <li>The result of calling the function is an instance of template <b>&lt;typename T&gt; struct simple_binder_lshift</b>, with <b>T</b> being<b> std::ostream</b>. The function object stores the stream.

  <li>For each element in the range, the algorithm invokes the function call operator on the function object (template <b>&lt;typename U&gt; T&amp; operator()(U u)</b>), which simply forwards the call to the stream <b>operator&lt;&lt;</b>, passing the element <b>u</b> (here, an object of type<b> std::string</b>).

</ul>

<h3>Control Structures</h3>


<p>While the placeholders like <b>_1</b>, <b>_2</b>, and <b>_3</b> (to be used for additional arguments) enable wonderful things, they are not enough. Control structures are fundamental parts of any nontrivial programming task, and BLL supports constructs for <b>if</b>, <b>if-then-else</b>, <b>while</b>, <b>do-while</b>, <b>for</b>, and <b>switch</b>. <A HREF="0312karlssonl4.htm" target="_BLANK">Listing 4</A> demonstrates the use of the ubiquitous <b>if_then</b> and its cousin <b>if_</b> (yes, the underscore must be there), and avoids a subtle pitfall while doing so. </p>


<p>The first use of a control structure in the example is:</p>

<pre>
std::for_each( 
  vec.begin(),
  vec.end(),
  if_then(_1%2,std::cout 
          &lt;&lt; constant(" ") &lt;&lt; _1));
</pre>
<P><b>if_then</b> creates a lambda function object returning void (all BLL control structures do). If the Boolean condition (<b>_1%2</b>) returns True, the<b> then</b> part (<b>std::cout &lt;&lt; constant(" ") &lt;&lt; _1</b>) of the expression is executed. But what about <b>constant</b>? Consider what would happen if you created this lambda expression<b> if_then(_1%2,std::cout &lt;&lt; " " &lt;&lt; _1)</b>. The operands of <b>std::cout &lt;&lt; " "</b> are not lambda expressions, and they will thus be evaluated at once (and only once, for that matter). You need a lambda expression to delay the evaluation, and <b>constant</b> does exactly this. There are two more such utilities, namely <b>constant_ref</b> and <b>var</b>, used together with variables. The names convey their meanings &#151; <b>constant_ref</b> creates a lambda function object for a reference to <b>const</b>, and <b>var</b> creates one for mutable references.</p>


<p>Next, an alternative syntax is used to create an <b>if-then-else</b> construct:</p>

<pre>
std::for_each(
  vec.begin(),
  vec.end(),
  if_(_1%2==0)[_1*=2].else_[std::cout 
              &lt;&lt; constant(" ") &lt;&lt;  _1]);
</pre>

<p>The reason for having two sets of semantically equivalent control structures is that only experience will tell if syntactic resemblance with existing C++ constructs is preferable over the function-call style. The latter approach is influenced by another C++ lambda effort, Phoenix (part of Spirit Parser Library, http://spirit.sourceforge.net/). </p>

<p>There's just one more thing going on in the example that deserves mention &#151; the naming of a delayed <b>constant</b>. It can quickly become tedious to write <b>constant</b> in the lambda expressions, and more importantly, it is easy to forget. A delayed <b>constant</b> alleviates this problem by naming a <b>constant</b> that does the same thing &#151; creates a lambda expression:</p>

<pre>
constant_type&lt;char&gt;::type space(constant(' '));
</pre>

<p>For completeness, here are the remaining control structures available in the BLL:</p>

<pre>
if_then(condition, then_part)
if_then_else(condition, then_part, else_part)
if_then_else_return(condition, then_part,  else_part)
while_loop(condition, body)
while_loop(condition) 
do_while_loop(condition, body)
do_while_loop(condition) 
for_loop(init, condition, increment, body)
for_loop(init, condition, increment) 
switch_statement(...)
</pre>

<h3>Did You Really Say Exception Handling?</h3>


<p>Consider an <b>std::vector</b> containing missile objects for a war game. When someone pushes that red button, all of the missiles should be fired. Right, but what if a missile is broken and throws an exception? Should the remaining missiles be left as is until the problem is fixed? I think not; see <A HREF="0312karlssonl5.htm" target="_BLANK">Listing 5</A>. </p>


<p>Bind expressions are also part of this example (see the Boost Bind library at <a href="http://www.boost.org/libs/bind/bind.html">http://www.boost.org/libs/bind/bind.html</a>). In this context, <b>bind</b> is used for two purposes &#151; to tie the member function <b>missile::fire</b> to the invocations, and to delay the function call. </p>

<p>The exception-handling mechanism is straightforward and takes the form:</p>

<pre>
try_catch(
  lambda-expression,
  catch_exception&lt;exception-type&gt;(catch-handler),
  catch_all(catch-handler)
  )
</pre>

<p>To rethrow the exception, call <b>rethrow</b>. Throw a new exception with <b>throw_exception</b>:</p>

<pre>
for_each(vec.begin(),vec.end(),
  try_catch(
    bind(&amp;missile::fire,_1),
        catch_exception&lt;missile_error&gt;(
    throw_exception
      (std::logic_error("All is lost")))));
</pre>

<p>If, however, you need to throw an exception and use information from one of the placeholders (or perhaps the existing exception), you need to work a little harder. The problem you're facing is that it's not possible to take the address of a constructor (which in turn makes it impossible to create a constructor lambda expression). BLL solves this problem by adding a layer of indirection &#151; a special function object (<b>constructor</b>) is used to wrap the constructor call, and you are thus able to use <b>bind</b>:

<pre>
for_each(vec.begin(),vec.end(),
  try_catch(
    bind(&amp;missile::fire,_1),
        catch_exception&lt;missile_error&gt;(
      throw_exception(bind(constructor
                  &lt;std::logic_error&gt;(),
        bind(&amp;missile_error::
                        what, _e))))));
</pre>

<p>There is a special placeholder, <b>_e</b> (used in the preceding code), which designates the exception that was caught by the handler. By applying another <b>bind</b> to<b> e_</b>, you call the <b>what</b> member function: <b>bind(&amp;std::exception::what, _e)</b>. Of course, <b>_e</b> is not available in the <b>catch_all</b> handler. </p>



<h3>Yet Another Example</h3>


<p>Typically, lambda expressions are used when small and not overly complex functions are needed at the call site. If the function were nontrivial, you wouldn't want a lambda expression but a normal function or a function object. Consider a container with variant types, where you need to perform an action on certain types of (contained) elements. For the variant class, use <b>boost::any</b> (<a href="http://www.boost.org/libs/any/index.html">http://www.boost.org/libs/any/index.html</a>), which serves as an opaque placeholder for any (nope, no pun) type of object. You retrieve the values from an instance of <b>any</b> by calling <b>any_cast&lt;T&gt;(a)</b>, with <b>T</b> being the type of the value and <b>a</b> is the <b>any</b>. Now, if <b>any</b> is empty or contains a type other than <b>T</b>, an exception (<b>bad_any_cast</b>) is thrown. Thus, you again have a case where an otherwise simple function, suitable for a lambda expression, needs to perform exception handling. While it is possible (and even idiomatic) to use <b>any_cast</b> with a pointer argument for a pointer return without exceptions being thrown, this approach does not make for a readable lambda expression. The lambda expression (when avoiding exception handling) would look something along the lines of this (with <b>ps</b> being a pointer to <b>std::string</b>):</p>


<pre>
std::for_each(stuff.begin(),stuff.end(),
  if_then(((var(ps)=bind&lt;std::string*&gt;(
    &amp;boost::any_cast&lt;std::string&gt;,&amp;_1),
    var(ps)!=static_cast&lt;std::string*&gt;(0))),
    std::cout &lt;&lt;  *var(ps) &lt;&lt; ' '));

</pre>
<p>A lambda expression like this kind of defeats the purpose, huh? See <A HREF="0312karlssonl6.htm" target="_BLANK">Listing 6</A> for a more readable version of the code.</p>


<p>I think you'll agree that lambda expressions can make the code readable. The ability to add functions at the call site is one step closer to literate programming. The meat of the example is in the call to <b>for_each</b>, where the action to be performed looks like this:</p>

<pre>
std::cout &lt;&lt; 
  bind&lt;std::string&gt;(
    &amp;boost::any_cast&lt;std::string&gt;,_1) 
          &lt;&lt; ' ', noop
</pre>

<p>First, you bind the function <b>any_cast</b>. Because the return type of <b>any_cast</b> cannot be deduced, it is explicitly stated (<b>bind&lt;std::string&gt;</b>). Setting the return type explicitly relieves <b>bind</b> from trying to infer the return type. Then you (surprisingly) tack on another statement &#151; <b>noop</b>, which is a void return lambda expression. Why? Because in exception-handling code, the return types of the functions must be identical. As you intend to eat the exception, you must make sure that the return types are the same, and that's why <b>noop</b> occurs once again, in the body for the <b>catch_exception</b> handler. </p>

<p>This type of code would become a lot simpler if these (template) functions were also available as function objects, with appropriate<b> typedef</b>s available for automatic deduction of return types. </p>



<h3>Conclusion</h3>


<p>Lambda expressions are powerful tools for creating functions at the call site. This makes for clear and concise code, and can substantially reduce the complexity of the code when employed correctly. In C++, we have yet to learn the idiomatic ways of using lambda expressions, simply because they haven't been available prior to the Boost Lambda Library. Thanks to Jaako J&#228;rvi and Gary Powell, the authors of BLL, for this great library. </p>

<hr><I>
<b>Bjorn</b> can be reached at <a href="mailto:bjorn_karlsson@acm.org">bjorn_karlsson@acm.org</a>.</I>

<hr>

</body>
</html>
