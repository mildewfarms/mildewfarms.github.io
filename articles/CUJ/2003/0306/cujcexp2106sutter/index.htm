<html>
<title>June 2003/Tuples</title>
<body>
<hr>
<h2 ALIGN="center"><font COLOR="#800000">Tuples</font></h2>
<h3 ALIGN="center"><font COLOR="#800000">Herb Sutter</font></h3>

<hr>
<blockquote>
<p>As I reported in the last column <a href="#1">[1]</a>, the big library news at the October 2002 standards meeting was that the first two library extensions were approved for the Standard Library extensions technical report:

<ul>
<li>Doug Gregor's proposal for polymorphic function object wrappers. <a href="#2">[2]</a>
<li>Jaakko J&#228;rvi's proposal for tuple types. <a href="#3">[3]</a>
</ul>

<p>Both come directly from the Boost project, which is a collection of C++ libraries. <a href="#4">[4]</a> Last time, I promised that this column and the next would each cover one of these two accepted library extensions. This month, I'll give an overview of tuple types.

<h3><font COLOR="#000080">Tuple Types: A Simple Motivating Case</font></h3>

<p>Have you ever wanted to return more than one result from a function? For example, consider this function:

<pre>
// Example 1(a): Integer division,
// yields a quotient only
//
int IntegerDivide( int n, int d ) {
  return n / d;
}

// Sample use:
cout &lt;&lt; "quotient = " &lt;&lt; IntegerDivide( 5, 4 );
</pre>

<p>What's wrong with this? Nothing much, maybe. After all, we're doing exactly what the built-in integer division does, including rounding down the resulting quotient.

<p>But what if we want to do more&#8212;specifically, what if we also want to provide a way to get the other important result of the division, namely the remainder? We're already using the (single, one and only) return value to encode the quotient, and there's no easy way to also provide the remainder without changing the function's signature in some way.
One way we could do it is to add another "output" parameter:

<pre>
// Example 1(b): Integer division,
// yielding a quotient and remainder,
// one as the return value and one via
// an output parameter
//
int IntegerDivide( int n, int d, <font color="red">int& r</font> ) {
  r = n % d;
  return n / d;
}

// Sample use:
int remainder;
int quotient = IntegerDivide( 5, 4, remainder );
cout &lt;&lt; "quotient = " &lt;&lt; quotient
    &lt;&lt; "remainder = " &lt;&lt; remainder;
</pre>

<p>That's kind of clunky, but it's the kind of thing we've all done many times. It seems a little weird that one part of the output is returned via the return value, while another is returned via an output parameter. One might argue that the following is more consistent:

<pre>
// Example 1(c): Integer division,
// yielding a quotient and remainder,
// this time via two output parameters
//
void IntegerDivide( int n, int d, <font color="red">int& q, int& r</font> ) {
  r = n % d;
  q = n / d;
}

// Sample use:
int quotient, remainder;
IntegerDivide( 5, 4, quotient, remainder );
cout &lt;&lt; "quotient = " &lt;&lt; quotient
    &lt;&lt; "remainder = " &lt;&lt; remainder;
</pre>

<p>That may be more consistent, but perhaps vaguely unsatisfying. With a little thought, we remember why: Ralph Waldo Emerson insists on reminding us that "a foolish consistency is the hobgoblin of little minds." Rats. This version works, but I wouldn't blame you if you had an uneasy, queasy, cheesy feeling about it.

<p>What to do? Well, it's usually at just about this point that we might remember that we have a tool in the Standard Library that may be appropriate: <b>std::pair</b>. After all, there are functions in the Standard Library that return multiple things, notably iterator ranges, as a single value&#8212;and they do it by yielding a <b>pair&lt;iterator, iterator></b>. The same approach could work here! Let's try it:

<pre>
// Example 1(d): Integer division,
// yielding a quotient and remainder,
// this time both in the return value
//
<font color="red">std::pair&lt;int,int></font> IntegerDivide( int n, int d ) {
  return pair&lt;int,int>( n/d, n%d );
}

// Sample use:
pair&lt;int, int> quot_rem = IntegerDivide( 5, 4 );
cout &lt;&lt; "quotient = " &lt;&lt; quot_rem.first
    &lt;&lt; "remainder = " &lt;&lt; quot_rem.second;
</pre>

<p>As it turns out, this is a promising direction, and one that can be improved, generalized, and refined.

<h3><font COLOR="#000080">Tuples In Action</font></h3>

  <p>Some languages, including Haskell, ML, and Python, support tuple types directly. 
    C++ doesn't, but hey, this is C++, the do-anything systems- and library-building 
    power language&#151;we can <i>make</i> our own tuple types, as a library! 
    (And our own lambda functions, and our own&#151; but I digress.) What J&#228;rvi 
    and others have done is to package up a tuple type representing a "bundle-o-types" 
    as a sort of generalization of <b>pair</b>, but much more so. A tuple object 
    (object of tuple type) is similarly a "bundle-o-values." 
  <p>The code for a tuple-ized <b>IntegerDivide</b> is very similar to the <b>pair</b>-ized 
    one in Example 2(d), but don't be fooled: 
  <pre>
// Example 2(a): Integer division,
// yielding a quotient and remainder,
// via a type return type
//
<font color="red">tuple&lt;int,int></font> IntegerDivide( int n, int d ) {
  return tuple&lt;int,int>( n/d, n%d );
}

// Sample use:
tuple&lt;int, int> quot_rem = IntegerDivide( 5, 4 );
cout &lt;&lt; "quotient = " &lt;&lt; quot_rem.get&lt;0>()
    &lt;&lt; "remainder = " &lt;&lt; quot_rem.get&lt;1>();
</pre>

  <p>The syntax isn't quite as elegant as for <b>pair</b>, but that's a pretty 
    small nit compared to the great flexibility that tuples offer compared to 
    simple <b>pair</b>s. 
  <p>For one thing, tuples aren't restricted to just two members; they can have any number of members, and, therefore, can bundle (and unbundle) any number of values. Just to illustrate why that might be useful, even for something as simple as the example we just looked at, consider this variant:

<pre>
// Example 2(b): Floating-point division,
// yielding a quotient and remainder,
// but also an underflow
//
<font color="red">tuple&lt;float, float, bool></font> // quotient, remainder, underflow
FloatDivide( float n, float d ) {
  // &#151;
}
</pre>

  <p>Try that with <b>std::pair</b>! (And because I know full well that some readers 
    may be unable to resist doing exactly that, let me avoid some e-mail by adding: 
    Yes, you could chain <b>pair</b>s manually, in this case for example <b>std::pair&lt;float, 
    std::pair&lt;float, bool> ></b>, but I think we can all agree that would be 
    the basest hackery.) 
  <p>Now, you won't always want to work with the tuple as a bundle-o-values, so there are ways to "tie" ordinary standalone variables to a tuple. This is useful for bundling and unbundling values. For example, returning to the plain old quotient-and remainder version:

<pre>
// Example 3: Bundling and unbundling
// using "tie"
//
tuple&lt;int,int> IntegerDivide( int n, int d ) {
  return tuple&lt;int,int>( n/d, n%d );
}

// Sample use:
int quotient, remainder;
<font color="red">tie( quotient, remainder )</font> = IntegerDivide( 5, 4 );
cout &lt;&lt; "quotient = " &lt;&lt; quotient
    &lt;&lt; "remainder = " &lt;&lt; remainder;
</pre>

<p>By the way, we don't have to write our own manual outputting like this if we don't want to. Tuples have their own stream insertion and extraction operators that work perfectly well:

<pre>
// Example 4(a): Streaming tuples
//
tuple&lt;int, int> quot_rem = IntegerDivide( 5, 4 );
cout &lt;&lt; quot_rem;	// "(1 1)"
</pre>

<p>Or, if you want to get a little fancier, you can control the open and close brackets and the delimiter:

<pre>
// Example 4(b): Customizing streamed tuples
//
tuple&lt;int, int> quot_rem = IntegerDivide( 5, 4 );
cout &lt;&lt; tuples::set_open('[') &lt;&lt; tuples::set_close(']')
    &lt;&lt; tuples::set_delimiter(',')
    &lt;&lt; quot_rem;	// "[1,1]"
</pre>

<h3><font COLOR="#000080">Next Time</font></h3>

<p>For more details about <b>tuple</b>, see also the freely available Boost implementation at <a href="http://www.boost.org">www.boost.org</a> for your reading and programming pleasures.

<p>In the next column, I'll report on <b>function</b> facility, and after than on the April 2003 C++ Standards meeting, held in Oxford, UK. Stay tuned.

<h3><font COLOR="#000080">References</font></h3>

<p><a name="1"></a>[1] H. Sutter. "<a href="c:\www.cuj.com/experts/2102/sutter.htm">Trip Report: 
  October 2002</a>" (<i>C/C++ Users Journal</i>, 21(2), February 2003). 
<p><a name="2"></a>[2] D. Gregor. "A Proposal to add a Polymorphic Function Object Wrapper to the Standard Library," ISO/ANSI C++ Standards committee paper (ISO/IEC JTC1/SC22/WG21 paper N1402, ANSI/NCITS J16 paper 02-0060).
<p><a name="3"></a>[3] J. J&#228;rvi. "Proposal for adding tuple types into the standard library," ISO/ANSI C++ standards committee paper (ISO/IEC JTC1/SC22/WG21 paper N1403, ANSI/NCITS J16 paper 02-0061).
<p><a name="4"></a>[4] <a href="http://www.boost.org">www.boost.org</a>
</blockquote>
</body>
</html>