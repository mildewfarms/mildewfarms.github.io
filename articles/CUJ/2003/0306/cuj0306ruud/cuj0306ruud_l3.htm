<HTML><HEAD><TITLE>Listing 3:	A partial implementation of MutableSegmentSet</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 3:</B> A partial implementation of MutableSegmentSet<P> <pre> #include &lt;set&gt; #include "segment.h"  class MutableSegmentSet;  class fCompare { public: fCompare(const MutableSegmentSet&amp; set) : m_set(set) {}  bool operator() (const Segment&amp; lhs, const Segment&amp; rhs) const; private: const MutableSegmentSet&amp; m_set; };  class MutableSegmentSet { public: typedef std::set&lt;Segment, fCompare&gt; SegSet; typedef SegSet::iterator iterator; typedef SegSet::const_iterator const_iterator;  MutableSegmentSet() : m_set(fCompare(*this)), m_scan_pos(0) {}  void set_coord(int x) { m_scan_pos = x; reorder(); } int get_coord() const { return m_scan_pos; }  // methods begin, end  // methods insert, erase, find  private: std::set&lt;Segment, fCompare&gt; m_set; int m_scan_pos;  class MutableIter : public SegSet::iterator { public: typedef SegSet::iterator BaseIter;  // constructors  Segment&amp; operator*() { return const_cast&lt;Segment&amp;&gt;(this-&gt;BaseIter::operator*()); } MutableIter&amp; operator++(); const MutableIter operator++(int); MutableIter&amp; operator--(); const MutableIter operator--(int); bool operator==( const MutableIter&amp; rhs); bool operator!=( const MutableIter&amp; rhs); Segment* operator-&gt;(); };  void reorder(); void reverse(iterator first, iterator last); iterator get_intersecting_segs(iterator first, iterator last); };</pre> </BODY></HTML>