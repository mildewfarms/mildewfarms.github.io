<HTML><HEAD><TITLE>Listing 2:	A set of integers that can be sorted in increasing or decreasing order</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 2:</B> A set of integers that can be sorted in increasing or decreasing order<p><pre> #include &lt;set&gt; #include &lt;algorithm&gt; #include &lt;iostream&gt;  template&lt;class T&gt;  struct print : public std::unary_function&lt;T, void&gt; { print(std::ostream&amp; out) : os(out) {} void operator() (T x) { os &lt;&lt; x;} std::ostream&amp; os; };  enum SortOrder { Increasing, Decreasing };  class fCompare { public: fCompare(const SortOrder&amp; o) : m_order(o) {} bool operator() (const int a, const int b) const { if (m_order == Increasing) return a &lt; b; else return b &lt; a; } private: const SortOrder&amp; m_order; };  int main() { SortOrder sort_state = Increasing;  fCompare comp_obj(sort_state); std::set&lt;int, fCompare&gt; IntSet(comp_obj);  for (int i = 0; i &lt; 5; ++i) { IntSet.insert(i); } for_each(IntSet.begin(), IntSet.end(), print&lt;int&gt;(std::cout)); std::cout &lt;&lt; std::endl;  sort_state = Decreasing;  for (int i = 0; i &lt; 5; ++i) { IntSet.insert(i); } for_each(IntSet.begin(), IntSet.end(), print&lt;int&gt;(std::cout)); std::cout &lt;&lt; std::endl; } </pre></BODY></HTML>