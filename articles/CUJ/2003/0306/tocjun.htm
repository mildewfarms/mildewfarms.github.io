<HTML>
<HEAD>
<TITLE>June 2003</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">June 2003<BR>
                Volume 21 Number 6</FONT></H3>
               
<H3><FONT COLOR="#FF0000">Algorithms</FONT></H3>

<H4><A HREF="cuj0306mcdaniel/index.htm">An Algorithm for Error Correcting Cyclic Redundance Checks</A></H4>
<p><b>Bill McDaniel</b><br>
<i>A straightforward technique to leverage the error-correcting capability inherent in CRCs.</i></p>

<H4><A HREF="cuj0306ruud/index.htm">Building a Mutable Set</A></H4>
<p><b>Brian Ruud</b><br>
<i>Getting around the immutability of std::set in the name of performance.</i></p>

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="cuj0306jarvi/index.htm">Function Overloading Based on Arbitrary Properties of Types</A></H4>
<p><b>Howard Hinnant, Jaakko J&auml;rvi, Andrew Lumsdaine and Jeremiah Willcock</b><br>
<i>With these groundbreaking Function Enablers, you have much more control over function overload resolution than you thought.</i></p>

<H3><FONT COLOR="#FF0000">CONTRIBUTING EDITORS</FONT></H3>

<H4><A HREF="cuj0306samek/index.htm">The Embedded Angle &#151; D&eacute;j&agrave; Vu</A></H4>
<p><b>Miro Samek</b><br>
<i>It's D&eacute;j&agrave; Vu all over again as Miro reveals the object-oriented nature of the behavorial abstractions that pervade embedded programs.</i></p>

<H4><A HREF="cuj0306becker/index.htm">STL & Generic Programming &#151; Expression Templates</A></H4>
<p><b>Thomas Becker</b><br> 
<i>This is the second in a short series of articles on the subject of using C++ template and template metaprogramming techniques to create highly efficient code that makes C++ acceptable for scientific and numerical programming. In my last column, I talked about loop unrolling via inline function templates. I also mentioned a much more difficult problem, namely, the elimination of gratuitous temporary objects and gratuitous loop iterations when overloading operators such as operator+ for algebraic objects such as matrices. Expression templates solve that problem. Todd Veldhuizen and David Vandevoorde independently invented expression templates. Todd Veldhuizen's original article from the now defunct C++ Report is reprinted in C++ Gems [1]. David Vandevoorde's take on expression templates can be found in the book on C++ templates he wrote with Nicolai Josuttis [2]. This book is highly recommended reading even if you're not all that interested in advanced topics such as expression templates. It is clearly the definitive source and reference for all your template-related questions.
</i></p>

<H4><A HREF="cuj0306hyslop/index.htm">Conversations &#151; Imagine</A></H4>
<p><b>Jim Hyslop and Herb Sutter</b><br>
<i>Portability without #idefs? It's (sort of) easy if you really try.</i></p>

<H4><A HREF="cuj0306koenig/index.htm">C++ Made Easier &#151; Simple Loops, Generalized</A></H4>
<p><b>Andrew Koenig and Barbara E. Moo</b><br>
<i>Compelling motivation for a universal loop-coding style.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="cuj0306editor/index.htm">Editor's Forum</A></H4>
<H4><A HREF="cuj0306newprod/index.htm">New Products</A></H4>
<H4><A HREF="cuj0306letters/index.htm">We Have Mail</A></H4>

<H3><FONT COLOR="#FF0000">C++ EXPERTS ON THE WEB</FONT></H3>

<H4><A HREF="cujcexp2106alexandr/index.htm">Generic &lt;Programming&gt; &#151; Enforcements</A></H4>
<p><b>by Andrei Alexandrescu and Petru Marginean</b><br>
<i>You gotta love writing error-handling code&#151;you know, all the joy of testing conventions and formatting strings and throwing exceptions and... This is no joke. After you read "Enforcements," maybe you'll agree: error handling can be fun. The inimitable duo of ScopeGuard fame hits again, this time to take the boredom away from error-handling code.</i></p>

<H4><A HREF="cujcexp2106sutter/index.htm">The New C++ &#151; Tuple Types</A></H4>
<p><b>by Herb Sutter</b><br>
<i>Generalized tuple types are available in other languages, though not in Standard C++. One of the first two library extensions to be adopted by the standards committee since the first standard was closed was tuple types—and it is a testament to the power of C++, particularly the power of C++ templates, that this could be done well entirely as a library, without any changes to the core language.</i></p>

<H4><A HREF="cujcexp2106dewhurst/index.htm">Common Knowledge &#151; N-Ary Nibbling</A></H4>
<p><b>by Steve Dewhurst</b><br>
<i>Can't get by with 500-bit compile time arithmetic? Nibble away at template instantiation recursion depth problems and work with 5000-bit precison instead.</i></p>

<H4><A HREF="cujweb0306wall/index.htm">Book Review: "Real-Time Design Patterns"</A></H4>
<p><b>by Graham Wall</b><br>
<i>Bruce Powel Douglass's "Real-Time Design Patterns" is a well organized wealth of information that features an accurate catalog of highly recognizable real-time patterns.</i></p>

<H4><A HREF="cujweb0306douglass/index.htm">Resource Patterns</A></H4>
<p><b>by Bruce Powel Douglass</b><br>
<i>This excerpt from Bruce Powel Douglass's "Real-Time Design Patterns" investigates resource patterns, such as the Critical Section Pattern, the Priority Inheritance Pattern, and the Highest Locker Pattern.</i></p>

<H4><A HREF="cujboost0306besser/index.htm">Boost Corner &#151; Generic Printable ENUM++</A></H4>
<p><b>by Mitch Besser</b><br>
<i>Luckily, templates are not the only tool for generating code or writing generic C++. The Boost library contains a framework of macros that help when C++ templates fall short.</i></p>

</blockquote>
</body>
</html>
