<html>
<head>
<title>June 2003/Enforcements</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<hr>
<h2 align="center"><font color="800000">Enforcements </font></h2>
<h3 align="center"><font color="800000">Andrei Alexandrescu and Petru Marginean</font></h3>
<hr>
<blockquote>
  <p><font size="-1"><a href="ftp://ftp.cuj.com/pub/2003/2106/alexandr.zip">Download 
    code for this article.</a></font></p>
  <p>You know a concept really sticks when it undergoes the transformation from 
    a proper noun to a common noun. Kleenex, Xerox, Q-Tips...right? It should 
    come at no surprise, then, that I was pleased to hear during a Microsoft workshop 
    that you can now use &quot;modern C++ design&quot; with the new Visual C++ 
    .NET. By that, the speaker referred&#151;at least in my imagination&#151;to 
    a compendium of template-based techniques that Modern C++ Design <a href="#1">[1]</a> 
    helped popularize. </p>
<p>Of all the Generic&lt;Programming&gt; articles, there is one that, due to its 
  success, is undergoing the proper-to-common-noun &quot;grammatical promotion.&quot; 
  That's <b>ScopeGuard</b> <a href="#2">[2]</a>, which is increasingly becoming 
  &quot;scope guard&quot; in conjunction with the general technique of planting 
  &quot;undo&quot; actions on the normal execution path and dismissing them when 
  a complex operation succeeds. In a quirk of fate, my most popular article was 
  not entirely my work, but the result a fruitful cooperation with Petru Marginean. 
  I'm all the more happy, then, to work with him again on the article you're now 
  reading. </p>
<p>Last time, we talked about assertions, a powerful design proofing and debugging 
  mechanism. Today, we'll discuss the release-time counterpart of assertions: 
  enforcements, which are comfortable on-the-fly condition verifiers. Much as 
  <b>ScopeGuard</b> did, the macro <b>ENFORCE</b> further reduces dramatically 
  the amount of coding you need to dedicate to error handling. <b>ScopeGuard</b> 
  and <b>ENFORCE </b>work very well independently, but they are best when used 
  together: ENFORCE is the exception initiator, and <b>ScopeGuard</b> is the exception 
  propagator. </p>
  <h3><font color="000080">ASSERT(false);</font></h3>
<p>Although the &quot;Assertions&quot; article <a href="#4">[4]</a> asserted that 
  assertions are cool (and in an assertive manner I'd say), the code attached 
  to the &quot;Assertions&quot; article contained a couple of bugs. These bugs 
  were first revealed by Paul A. Renard, who wrote:</p>
<ol>
  <li><i>Add <b>ASSERT(true)</b> as the first item in main's try block. You'll 
    find that the user is unfortunately queried about a true assertion. I moved 
    that test (regarding holds_) from <b>DoHandle</b> to <b>Handle</b>, which 
    is what the text in your article implies should be done anyway.</i></li>
  <li><i>Add yet another test for <b>ASSERT(false)</b>, maybe just before the 
    current one. Then answer <b>G</b> when queried. You'll still be queried on 
    the next <b>ASSERT</b>, which is probably not what you want. As the article 
    text implies, you can check for global ignores with the help of a static item 
    in the <b>Asserter</b> class. The one inside <b>DoHandle</b> is too late to 
    prevent the query from happening. Intertwined with this problem is that since 
    the query is made, an input is extracted from cin. That brings me to the next 
    observation.</i></li>
  <li><i>I assume that <b>cin.get()</b> is just a suggestion. Since that method 
    doesn't extract terminators from the input stream, when you answer the first-ever 
    query with I, say, the query from the second <b>ASSERT</b> will actually read 
    <b>\n</b> as a response. The input stream really contains <b>I\n. cin.getline()</b>, 
    which isn't much better, but for different reasons. The main problem is the 
    assumption that <b>cin</b> is only being used for responses to <b>ASSERT</b>s.</i></li>
</ol>
<p>Users who read other things from <b>cin</b> (which may be redirected from a 
  file!) will be baffled by <b>ASSERT</b>'s asynchronous use of the same stream. 
  However, it is likely that users who use <b>cin</b> have also worked out a smarter 
  <b>cin</b> mechanism that can be used in place of the <b>cin.get()</b> in <b>AskUser</b>.</p>
  <h3><font color="000080">Enforcements</font></h3>
  <p>Imagine you have acres of code in front of you, and you gaze over it. You know 
    you'll have to plow your way through that code, and you also know you'll have 
    to write some more acres of new code. </p>
<p>A very useful activity is to look through the code and try to find some common 
  pattern. You try to understand what the concept behind that pattern is. Very 
  likely, all the occurrences are not incidental but rather different incarnation 
  of the same underlying concept. Then, you try to formulate the abstraction once 
  so you can concisely express all pattern occurrences as realizations of that 
  concept.</p>
<p>Now stop and look at the sizes of the different patterns you might analyze. 
  If the patterns are huge, referring to entire applications as basic blocks, 
  for example, then you're working with <i>architectural</i> patterns.</p>
<p>If the patterns are medium-sized, spanning multiple objects and/or functions, 
  then you're a <i>design patterns</i> hunter.</p>
<p>If the patterns are rather small, involving as little as 3-10 lines of code, 
  then you're in <i>idiom</i> land.</p>
<p>Finally, if the patterns deal with just 1-2 lines of code, you're getting nitpicky 
  about <i>coding style and formatting</i>.</p>
<p>These four classes of magnitude span a range that is equivalent (on the small 
  end) to the view of a building at the atomic level... In real architecture, 
  minute imperfections in the atomic structure don't matter. In software architecture, 
  any and all of those defects can bring down the whole &quot;building&quot; (or, 
  to use a more familiar term, &quot;build&quot;). Conversely, you need to use 
  proper techniques at <i>all</i> scales to succeed. If you're enamored with the 
  minute details and neglect the big picture, you'll waste talent in building 
  intricate arabesques that aren't visible from a distance. If you focus on the 
  big and disregard the details, you'll construct a giant with clay feet. </p>
<p>Such is the extraordinary challenge of writing software, a challenge that people 
  working in other trades never fully understand.</p>
<p>But let's not digress. </p>
<p>Enforcements fall in the category of idioms. More specifically, enforcements 
  greatly simplify error-checking code without impacting readability and the fluency 
  of the normal flow.</p>
<p>The idea stems from the following observation. Whenever you throw an exception, 
  you do it as the result of a Boolean test, something like this:</p>
<pre>if (some test)
    throw SomeException(arguments);
</pre>
<p>If that the exception appears all over the place, why not putting it in a little 
  function:</p>
<pre>template &lt;class E, class A>
inline void Enforce(bool condition, A arg)
{
    if (!condition) throw E(arg);
}
</pre>
<p>and use it like this:</p>
<pre>Widget* p = MakeWidget();
Enforce&lt;std::runtime_error>(p != 0, "null pointer");
Enforce&lt;std::runtime_error>(cout != 0, "cout is in error");
cout &lt;&lt; p->ToString();
</pre>
<p>So far, so good. Now, let's make a couple of important observations. </p>
<p>First, the condition tested is not always Boolean. It might also be a pointer 
  or an integral type. Second, it is very likely that you are going to use the 
  tested value right after testing it. For instance, you may wish to make sure 
  a pointer is not Null before using it, or you may want to use a file handle 
  after creating it. So let's modify Enforce so it has filtering semantics by 
  passing back the value received: </p>
<pre>template &lt;class E, class A, class T>
inline T& Enforce(T& obj, A arg)
{
    if (!obj) throw E(arg);
    return obj;
}
template &lt;class E, class A, class T>
inline const T& Enforce(const T& obj, A arg)
{
    if (!obj) throw E(arg);
    return obj;
}
</pre>
<p>(Two versions are needed, for const and non-const objects.) You can add two 
  overloads to express the fact that you often know what exception you'll throw 
  and what type of argument it takes:</p>
<pre>template &lt;class T>
inline T& Enforce(T& obj, const char* arg)
{
    return this->Enforce&lt;std::runtime_error, const char*, T>(obj, 
        arg);
}
template &lt;class T>
inline const T& Enforce(const T& obj, const char* arg)
{
    return this->Enforce&lt;std::runtime_error, const char*, T>(obj, 
        arg);
}
</pre>
<p>If you also agree with passing a generic argument (message) to <b>std::runtime_error</b>, 
  the call can be further simplified. All you need to do is add an extra couple 
  of overloads:</p>
<pre>template &lt;class T>
inline T& Enforce(T& obj)
{
    return this->Enforce&lt;std::runtime_error, const char*, T>(obj, 
        "Enforcement error");
}
template &lt;class T>
inline const T& Enforce(const T& obj)
{
    return this->Enforce&lt;std::runtime_error, const char*, T>(obj, 
        "Enforcement error");
}
</pre>
<p>Now, with only these simple additions, the code became considerably more expressive:</p>
<pre>Enforce(cout) &lt;&lt; Enforce(MakeWidget())->ToString();</pre>
<p>In one line you not only make a widget and print it to the console, but you 
  also signal any errors that might occur in the process! Should you also want 
  to free the created <b>Widget</b> automatically, you add <b>auto_ptr</b> to 
  the mix:</p>
<pre>Enforce(cout) &lt;&lt; 
    Enforce(auto_ptr<Widget>(MakeWidget()))->ToString();
</pre>
<p>Wow! Not bad at all&#151;especially when you compare it with the competition.</p>
<p>Without disrupting the normal execution flow, <b>Enforce</b> nicely filters 
  errors out of the way. Thus, <b>Enforce</b> provides a convenient means for 
  checking and weeding out error conditions. </p>
<p>It's very important to make error handling as comfortable to the programmer 
  as possible. This is because error handling is, unfortunately, often considered 
  unpaid work. Managers don't value error handling as a feature. Consequently, 
  hurried, overworked, underspecked <a href="#3">[3]</a> programmers are left 
  to cross their fingers and hope that <b>cout</b> will always be in a good state 
  and <b>MakeShape</b> never returns the Null pointer. And crossing fingers is 
  not really a good programming technique.</p>
  <h3><font color="000080">Embellishing Enforce</font></h3>
<p>The message &quot;Enforcement failed,&quot; as it appears in the code above, 
  is not particularly helpful, so we've got to do something about it. Fortunately, 
  Petru's inspiration is unstoppable. As Seinfeld told Kramer with admiration: 
  &quot;That brain never stops working!&quot;</p>
<p>First off, some good information to pack in the error message would be the 
  offending <b>__FILE__</b> and <b>__LINE__</b>. Also, seeing the expression that 
  failed would be informative as well. As we did with <b>Asserter</b> <a href="#4">[4]</a>, 
  we'll build a little class that holds this information for us:</p>
<pre>template &lt;class Ref>
class Enforcer
{
    Ref obj_;
    const char* const locus_;
public:
    Enforcer(Ref obj, const char* locus) : obj_(obj), locus_(locus) {}
    Ref Enforce()
    {
        if (!obj_) throw std::runtime_error(locus_);
        return obj_;
    }
};
</pre>
<p>The <b>obj_</b> member holds the object that's being tested. The <b>locus_</b> 
  member is the aforementioned information about the file, the line, and the expression.</p>
<p>Why did we call <b>Enforcer</b>'s template argument <b>Ref</b> and not the 
  traditional <b>T</b>? The explanation is that we'll always instantiate <b>Enforce</b> 
  with a reference type (not a value type) which will save us a lot of duplication 
  down the road. (If you've ever had to write very similar functions for <b>const</b> 
  and non-<b>const</b> references, you know what we're talking about.)</p>
<p>Ok, now to create <b>Enforcer</b> objects, we'll rely on a little function 
  so that we benefit of that type deduction thing:</p>
<pre>template &lt;typename T>
inline Enforcer&lt;const T&>
MakeEnforcer(const T& obj, const char* locus)
{
    return Enforcer&lt;const T&>(obj, locus);
}
template &lt;typename T>
inline Enforcer&lt;T&>
MakeEnforcer(const T& obj, const char* locus)
{
    return Enforcer&lt;T&>(obj, locus);
}
</pre>
<p>We now need to just add icing to the cake - the promised macro. We know you 
  hate macros, and you're not alone, but we hate repeatedly typing <b>__FILE__</b> 
  and <b>__LINE__</b> even more.</p>
<pre>#define STRINGIZE(something) STRINGIZE_HELPER(something) 
#define STRINGIZE_HELPER(something) #something
#define ENFORCE(exp) \
    MakeEnforcer((exp), "Expression '" #exp "' failed in '" \
    __FILE__ "', line: " STRINGIZE(__LINE__)).Enforce()
</pre>
<p>The <b>STRINGIZE</b> and <b>STRINGIZE_HELPER</b> macros are the complicated 
  litany needed by the preprocessor to turn the number <b>__LINE__</b> into a 
  string. (No, <b>#__LINE__</b> doesn't work.) I never knew exactly why and how 
  these macros work (they have something to do with preprocessing phases... aw, 
  traumatic memories start coming back to my mind! Stop, doctor!) - and, frankly, 
  I'd be more interested in knowing how the sewer system in NYC works than in 
  the details of this business. Suffice it to say that <b>STRINGIZE(__LINE__)</b> 
  yields a string containing the current line number. For those keeping the score 
  at home, <a href="#6">[6]</a> provides a thorough explanation.</p>
<p>This column's long-standing tradition is to not care about compiler idiosyncrasies, 
  so let's just mention <i>en passant</i> that the <b>STRINGIZE</b> trick won't 
  outsmart MSVC's preprocessor, which yields mysterious strings such as <b>(__LINE__Var+7)</b> 
  as the result of <b>STRINGIZE(__LINE__)</b>. </p>
<p>On the bright side, <b>Enforcer</b>'s initialization is as cheap as two pointer 
  assignments, and it saves very useful information. You can easily add information 
  about the date of the file and the date of the build, as well as nonstandard 
  information such as <b>__FUNCTION__</b>.</p>
  <h3><font color="000080">Supporting Arguments and Custom Predicates with ENFORCE</font></h3>
<p><b>ENFORCE</b> is a nice concept, but don't you hate it when you take something 
  out in the field and you notice it's not quite as applicable to the real world 
  as that article writer made it look?</p>
<p>We did, and we noticed two important shortcomings.</p>
<p>First, passing a custom string in addition&#151;or instead of&#151;the default 
  file, line, and expression information is often desirable. </p>
<p>Second, <b>ENFORCE</b> only tests things against zero with the ! operator. 
  However, in real life, sometimes the &quot;wrong&quot; value that needs to be 
  checked is not zero. Many APIs that use integral IDs, including the Standard 
  C file functions in <b>&lt;io.h&gt;</b>, return <b>-1</b>, and not zero, to 
  signal an error. Some other APIs use a symbolic constant. And COM uses a more 
  complex condition: If the returned value is zero (the symbol <b>S_OK</b>), everything's 
  fine. If the returned value is less than zero, that means a failure occurred, 
  and the actual number returned gives information about the nature of the error. 
  If the returned value is greater than zero, the state is &quot;success with 
  info,&quot; so there's something valuable in the returned value <a href="#5">[5]</a>.</p>
<p>Clearly we need a more flexible checking and reporting framework. We need to 
  be able to configure Enforcer on two dimensions (predicate and argument passing 
  mechanism), preferably at compile time so that the enforcement mechanism doesn't 
  introduce more overhead than the equivalent hand-written code. (A sanity check 
  is always worth doing: does some abstraction, when brought back to concrete, 
  compare well with the equivalent not abstracted solution?)</p>
<p>Policy-based design fits this problem like a glove. So <b>Enforce</b> gets 
  advanced in rank from a simple class to a two-arguments template class. The 
  first policy is the predicate policy (which deals with the testing), and the 
  second policy is the raising policy (which deals with constructing and throwing 
  the exception object).</p>
<pre>template&lt;typename Ref, typename P, typename R>
class Enforcer
{
    ... use the two policies (see next section) ...
};
</pre>
<p>The two policies have very simple interfaces. Here's how the default policies 
  would look:</p>
<pre>struct DefaultPredicate
{
    template &lt;class T> 
    static bool Wrong(const T& obj)
    {
        return !obj;
    }
};
struct DefaultRaiser
{
    template &lt;class T>
    static void Throw(const T&, const std::string& message, const char* locus)
    {
        throw std::runtime_error(message + '\n' + locus);
    }
};
</pre>
  <h3><font color="000080">Implementation Details (and Neat Tricks&#153;)</font></h3>
<p>Ok, now it shouldn't be too hard to have <b>Enforcer</b> use its two policies 
  to test values and throw exceptions. </p>
<p>A nice to have thing would be to allow the user to format an arbitrarily baroque 
  message in case of an error; furthermore, that baroque formatting (which could 
  be quite costly at runtime) should be avoided unless an exception will really 
  be thrown. With some inspiration and the proverbial 99% of transpiration, we 
  devised a mechanism that fulfills these requirements.</p>
<p>Let's show the code and then proceed with explanations. The final class <b>Enforcer</b> 
  is shown below.</p>
<pre>template&lt;typename Ref, typename P, typename R>
class Enforcer
{
public:
    Enforcer(Ref t, const char* locus) : t_(t), locus_(P::Wrong(t) ? locus : 0)
    {
    }
    Ref operator*() const
    {
        if (locus_) R::Throw(t_, msg_, locus_);
        return t_;
    }
    template &lt;class MsgType>
    Enforcer& operator()(const MsgType& msg)
    {
        if (locus_) 
        {
            // Here we have time; no need to be super-efficient
            std::ostringstream ss;
            ss &lt;&lt; msg;
            msg_ += ss.str();
        }
        return *this;
    }
private:
    Ref t_;
    std::string msg_;
    const char* const locus_;
};
template &lt;class P, class R, typename T>
inline Enforcer&lt;const T&, P, R> 
MakeEnforcer(const T& t, const char* locus)
{
    return Enforcer&lt;const T&, P, R>(t, locus);
}
template &lt;class P, class R, typename T>
inline Enforcer&lt;T&, P, R> 
MakeEnforcer(T& t, const char* locus)
{
    return Enforcer&lt;T&, P, R>(t, locus);
}
 #define ENFORCE(exp) \
    *MakeEnforcer&lt;DefaultPredicate, DefaultRaiser>(\
        (exp), "Expression '" #exp "' failed in '" \
        __FILE__ "', line: " STRINGIZE(__LINE__))
</pre>
<p>Alright, so <b>Enforce</b> defines two new operators: <b>operator*</b> and 
  the templated <b>operator()</b>. Also, note that the <b>ENFORCE</b> macro prepends 
  the &quot;*&quot; to the <b>MakeEnforcer</b> call. How does this all work, and 
  why the scaffolding?</p>
<p>Say you write the following:</p>
<pre>Widget* pWidget = MakeWidget();
ENFORCE(pWidget);
</pre>
<p>The <b>ENFORCE</b> macro expands to something like:</p>
<pre>*MakeEnforcer&lt;DefaultPredicate, DefaultRaiser>((pWidget), 
    "Expression 'pWidget' failed in 'blah.cpp', line: 7")
</pre>
<p><b>MakeEnforcer</b> gets called creating an object of type:</p>
<pre>Enforcer&lt;const Widget*&amp;, DefaultPredicate, DefaultRaiser&gt;</pre>
<p>That object is created with its two-argument constructor. Notice that <b>locus_</b> 
  is initialized to a non-null pointer only if <b>P::Wrong(t)</b> is true. In 
  other words, <b>locus_</b> points to useful information only if an exception 
  ought to be thrown, otherwise it's null. </p>
<p>To the object thusly created, <b>operator</b>* is applied. Unsurprisingly, 
  if <b>locus_</b> is non-null, <b>R::Throw</b> is called. Otherwise, the object 
  being analyzed is just passed back.</p>
<p>On to a more interesting example. Consider the code below:</p>
<pre>Widget* pWidget = MakeWidget();
ENFORCE(pWidget)("This widget is null and it shouldn't!");
</pre>
<p>Here, after the <b>Enforcer</b> object is created as above, <b>operator()</b> 
  enters in action. That operator either appends the incoming information to the 
  <b>msg_</b> member, or ignores it altogether if <b>pWidget</b> is non-null and 
  there's no error. In other words, the normal execution path is as fast as a 
  test. Here's the beauty of it all - the real work is done only in case of an 
  error.</p>
<p>Because <b>operator()</b> is templated and uses a <b>std::ostringstream</b>, 
  it supports anything that you could send to <b>cout</b>. Furthermore, <b>operator()</b> 
  returns *<b>this</b>, so you can chain successive calls to it. Consider this 
  illustrative example:</p>
<pre>int n = ...;
Widget* pWidget = MakeWidget(n);
ENFORCE(pWidget)("Widget number ")(n)(" is null and it shouldn't!");
</pre>
<p>We don't know about you, but we were thoroughly pleased with this design. Or, 
  which one of conciseness, expressiveness, and efficiency don't you like?</p>
  <h3><font color="000080">Customizing the <b>Predicate</b> and <b>Raiser</b> Policies</font></h3>
<p>The policy-based <b>Enforcer</b> provides important hooks that allow unbounded 
  variation. For example, checking handle values against -1 (instead of zero) 
  is now a six-liner:</p>
<pre>struct HandlePredicate
{
    static bool Wrong(long handle)
    {
        return handle == -1;
    }
};
#define ENFORCE(exp) \
    *MakeEnforcer&lt;HandlePredicate, DefaultRaiser>((exp), "Expression '" #exp "' failed in '" \
    __FILE__ "', line: " STRINGIZE(__LINE__))
</pre>
<p>Don't forget that Enforce returns its incoming value, which confers a lot of 
  expressiveness to the client code:</p>
<pre>const int available = HANDLE_ENFORCE(_read(file, buffer, buflen));</pre>
<p>The line above reads data from a file, records the number of bytes read, and 
  signals a possible error without missing a beat. Cool!</p>
<p>Similarly, you can define handy new policies and <b>XYZ_ENFORCE</b> macros 
  for your application with ease. There would be one <b>XYZ_ENFORCE</b> macro 
  per error encoding convention. Most applications would use 1-4 different conventions. 
  In practice we've encountered the following common conventions:</p>
<ul>
  <li>Good ole <b>ENFORCE</b> that we discussed above. Compares using <b>operator!</b> 
    and throws <b>std::runtime_exception</b>.</li>
  <li><b>HANDLE_ENFORCE</b>. Compares against -1 and throws some exception.</li>
  <li><b>COM_ENFORCE</b>. The result is deemed wrong if it is negative. The raising 
    policy retrieves the error message from the COM-return code and packs it in 
    the exception object being thrown. We believe that this truly is an invaluable 
    tool in building serious COM applications.</li>
  <li><b>CLIB_ENFORCE</b>. Many functions in the C Standard Library return zero 
    on error and have you inspect <b>errno</b> for details about the error. <b>CLIB_ENFORCE</b> 
    works best in conjunction with a nice <b>Raiser</b> policy that converts errno 
    to text and puts the text into the exception being thrown.</li>
  <li><b>WAPI_ENFORCE</b>. Some functions in the Windows API return zero on success 
    and a positive error code in case of error. </li>
</ul>
<p>It's very easy to accommodate new error-encoding conventions.</p>
  <h3><font color="000080">Conclusion</font></h3>
<p>We find the notion of automated value enforcement extremely useful, to the 
  extent that coding is fun with it and hard without it. Enforcement is way more 
  than condensing a couple of lines of code into one. Enforcements allow you to 
  concentrate on the normal flow of the application and filter out, naturally 
  and expressively, unneeded values. This filtering is achieved through filter 
  functions that return their incoming argument. </p>
<p>A couple of macro tricks add useful information at a very low run-time cost.</p>
<p>Parameterization through template arguments implements a policy-based design 
  that looks good not only on paper but also in practice. The policy-based approach 
  produces a design a low run-time overhead (which is as little as a handwritten 
  <b>if</b>) and a highly configurable framework that can accommodate the most 
  peculiar error-encoding conventions. </p>
<p>We tested the attached code with Microsoft Visual C++ .NET Everett Beta and 
  gcc 3.2. Enjoy!</p>
  <h3><font color="000080">Bibliography and Notes</font></h3>
  <p><a name="1"></a>[1] A. Alexandrescu. Modern C++ Design (Addison-Wesley Longman, 
    2001).<br>
    <a name="2"></a>[2] Andrei Alexandrescu and Petru Marginean. &quot;<a href="http://www.moderncppdesign.com/publications/cuj-12-2000.html">Simplify 
    your Exception-Safe Code</a>&quot;<br>
    <a name="3"></a>[3] To underspec means to hand insufficient specifications 
    to a programmer.<br>
    <a name="4"></a>[4] Andrei Alexandrescu. &quot;<a href="http://www.moderncppdesign.com/publications/cuj-04-2003.html">Assertions</a>&quot;<br>
    <a name="5"></a>[5] This convention looks nice at face value, but somehow 
    led to some backwards convention. In COM-land, <b>S_TRUE</b> is zero, and 
    <b>S_FALSE</b> is 1. Don't kill the messenger! <br>
    <a name="6"></a>[6] <a href="http://www.jaggersoft.com/pubs/CVu10_1.html">http://www.jaggersoft.com/pubs/CVu10_1.html</a></p>
  <h3><font color="000080">About the Authors</font></h3>
<p><b>Andrei Alexandrescu</b> is a Ph.D. student at University of Washington in 
  Seattle, and author of the acclaimed book <i>Modern C++ Design</i>. He may be 
  contacted at <a href="http://www.moderncppdesign.com">www.moderncppdesign.com</a>. 
  Andrei is also one of the featured instructors of The C++ Seminar (&lt;<a href="http://thecppseminar.com">http://thecppseminar.com</a>&gt;). 
</p>
<p><b>Petru Marginean</b> is Vice President at Bear Stearns, New York. He has 
  more than 9 years experience as C++ developer. He can be reached at <a href="mailto:petrum@hotmail.com">petrum@hotmail.com</a>. 
  </blockquote>
</body>
</html>
