<HTML><HEAD><TITLE>Listing 2:	An oversimplified expression template</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 2:</B>	An oversimplified expression template<p><pre>template&lt;typename T, size_t n, size_t m&gt;class Matrix;template&lt;typename T, size_t n, size_t m&gt;class EtMatrixAdd{public:  EtMatrixAdd(  const Matrix&lt;T, n, m&gt;&amp; lhs,   const Matrix&lt;T, n, m&gt;&amp; rhs) : m_lhs(lhs), m_rhs(rhs) {}  T ElementAt(size_t n, size_t m) const  { return m_lhs.ElementAt(n, m) + m_rhs.ElementAt(n, m); }private:  const Matrix&lt;T, n, m&gt;&amp; m_lhs;  const Matrix&lt;T, n, m&gt;&amp; m_rhs;};// In addition to operator= of Listing 1template&lt;typename T, size_t n, size_t m&gt;Matrix&lt;T, n, m&gt;&amp; operator=(  Matrix&lt;T, n, m&gt;&amp; lhs,   const EtMatrixAdd&lt;T, n, m&gt;&amp; rhs) {  for(int i=0; i&lt;n; ++i)    for(int j=0; j&lt;m; ++j)      lhs.ElementAt(i,j) = rhs.ElementAt(i,j);  return lhs;}  // Replaces the operator+ of Listing 1template&lt;typename T, size_t n, size_t m&gt;inline EtMatrixAdd&lt;T, n, m&gt; operator+(  const Matrix&lt;T, n, m&gt;&amp; lhs,   const Matrix&lt;T, n, m&gt;&amp; rhs) { return EtMatrixAdd&lt;T, n, m&gt;(lhs, rhs); }</pre></BODY></HTML>