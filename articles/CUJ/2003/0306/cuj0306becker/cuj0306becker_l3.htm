<HTML><HEAD><TITLE>Listing 3: A better expression template</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 3:</B>	A better expression template<P><pre>// Replaces EtMatrixAdd of Listing 2template&lt;  typename T, size_t n, size_t m,   typename LeftOp, typename RightOp&gt;class EtMatrixAdd{public:  EtMatrixAdd(const LeftOp&amp; lhs, const RightOp&amp; rhs) :     m_lhs(lhs), m_rhs(rhs) {}  T ElementAt(size_t n, size_t m) const  { return m_lhs.ElementAt(n, m) + m_rhs.ElementAt(n, m); }private:  const LeftOp&amp; m_lhs;  const RightOp&amp; m_rhs;};// Replaces operator= of Listing 2template&lt;  typename T, size_t n, size_t m,   typename LeftOp, typename RightOp&gt;Matrix&lt;T, n, m&gt;&amp; operator=(  Matrix&lt;T, n, m&gt;&amp; lhs,   const EtMatrixAdd&lt;T, n, m, LeftOp, RightOp&gt;&amp; rhs  ) {  for(int i=0; i&lt;n; ++i)    for(int j=0; j&lt;m; ++j)      lhs.ElementAt(i,j) = rhs.ElementAt(i,j);  return lhs;}  // Replaces operator+ of Listing 2template&lt;typename T, size_t n, size_t m&gt;inline EtMatrixAdd&lt;T, n, m, Matrix&lt;T, n, m&gt;, Matrix&lt;T, n, m&gt; &gt;operator+(  const Matrix&lt;T, n, m&gt;&amp; lhs,   const Matrix&lt;T, n, m&gt;&amp; rhs  ) {  return     EtMatrixAdd&lt;T, n, m, Matrix&lt;T, n, m&gt;, Matrix&lt;T, n, m&gt; &gt;(      lhs, rhs      );}// Second operator+template&lt;  typename T, size_t n, size_t m,   typename LeftOp, typename RightOp  &gt;inline EtMatrixAdd&lt;  T, n, m,   EtMatrixAdd&lt;T, n, m, LeftOp, RightOp&gt;,   Matrix&lt;T, n, m&gt; &gt; operator+(  const EtMatrixAdd&lt;T, n, m, LeftOp, RightOp&gt;&amp; lhs,   const Matrix&lt;T, n, m&gt;&amp; rhs  ) {  return     EtMatrixAdd&lt;T, n, m,       EtMatrixAdd&lt;T, n, m, LeftOp, RightOp&gt;,       Matrix&lt;T, n, m&gt; &gt;(lhs, rhs);}</PRE></BODY></HTML>