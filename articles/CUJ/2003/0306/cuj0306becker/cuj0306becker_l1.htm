<HTML><HEAD><TITLE>Listing 1: A very simple Matrix class</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B> Listing 1:</B>	A very simple Matrix class<P><pre> template&lt;typename T, size_t n, size_t m&gt;class Matrix{public:  Matrix(){}    Matrix(const Matrix&amp; rhs) {     for(int i=0; i&lt;n; ++i)      for(int j=0; j&lt;m; ++j)        ElementAt(i,j) = rhs.ElementAt(i,j);  }    Matrix&amp; operator=(const Matrix&amp; rhs) {    if( this != &amp;rhs )      for(int i=0; i&lt;n; ++i)        for(int j=0; j&lt;m; ++j)          ElementAt(i,j) = rhs.ElementAt(i,j);    return *this;  }    virtual ~Matrix() {}  const T&amp; ElementAt(size_t n, size_t m) const   { return arrData[n][m]; }  T&amp; ElementAt(size_t n, size_t m)  { return arrData[n][m]; }private:  // C-style array for efficiency and locality of reference  T arrData[n][m];};template&lt;typename T, size_t n, size_t m&gt;Matrix&lt;T, n, m&gt; operator+(  const Matrix&lt;T, n, m&gt;&amp; lhs,   const Matrix&lt;T, n, m&gt;&amp; rhs  ) {  Matrix&lt;T, n, m&gt; matSum;  for(int i=0; i&lt;n; ++i)    for(int j=0; j&lt;m; ++j)      matSum.ElementAt(i,j) =         lhs.ElementAt(i,j) + rhs.ElementAt(i,j);  return matSum;}</pre></BODY></HTML>