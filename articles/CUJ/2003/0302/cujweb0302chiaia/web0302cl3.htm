<HTML><HEAD>
<TITLE>February 2003/XML-based Factories and Reusable Components/Listing 3</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 3: Class WU_Persistent</A></H4>
<pre>
/*************************************************************
*****      Quantin' Leap Ltd.                       **********
*            Copyright (c) 2001, All Rights Reserved         *
**************************************************************/

#include &lt;string&gt;
using std::string;

class WU_Persistent
{
public:

  WU_Persistent();
  WU_Persistent(const WU_Persistent &amp;src);
  virtual ~WU_Persistent();

  //operators
  WU_Persistent&amp; operator=(const WU_Persistent &amp;src);

  //accessor method
      string getID() {return m_ID;}
  void setID(string ID) {m_ID = ID;}

  //public interface

  /*! This function should be implemented by the classes 
      inheriting the WU_Persistent interface. It returns a 
      pointer to a WU_Persistent object (an independent clone 
      of the original object)
  */
  //does a deep copy (create a clone)
  virtual WU_Persistent* clone()=0; 

protected:
  /*! the identifying string associated to a WU_Persistent object*/
  string m_ID;
};


//implementation

WU_Persistent::WU_Persistent()
{
  m_ID = "";
}

WU_Persistent::WU_Persistent(const WU_Persistent &amp;src)
{
  m_ID = src.m_ID;
}


WU_Persistent::~WU_Persistent()
{}

WU_Persistent&amp; WU_Persistent::operator=(const WU_Persistent &amp;src)
{
  if( &amp;src != this )
    m_ID = src.m_ID;
  return *this;
}
</pre>
</BODY>
</HTML>
