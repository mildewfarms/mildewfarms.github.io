<HTML>   
     <HEAD>
<TITLE>February 2003/XML-based Factories and Reusable Components</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
<H2 ALIGN="center">XML-based Factories and Reusable Components</H2>
<H3 ALIGN="center">Gualtiero Chiaia</H3>

<HR>
<p>In the real world, a factory is a physical entity specializing in the automated production of goods, all having well specified features. Most often, the production process consists of the assembling of third-party sub-components, also having well specified features. Typically, a production process is repeated many times, resulting in a collection of (almost) identical items. These items are stored in warehouses and labelled with a unique tag before reaching the retail chains. To run this factory successfully, the CEO needs to be fully aware of the production process, the complete sequence of steps required, and the commodities used during production.</p>
<p>In the OO (object-oriented) world, a factory is an object of a class specializing in the automated construction of objects of a different class. Most often, the construction of complex objects consists of assembling library components (objects of other classes, either belonging to the library or to third-party libraries). A class factory can construct many objects. These objects can be stored in persistent containers, in order to be used by different clients, or reused several times. The objects are associated with unique identifiers, in order to be identified and easily retrieved. The information required by the factory&#146;s construction procedure (the <B>build</B> member function) can be passed to the factory object in many ways. An efficient way to do so is by structured XML files or strings.</p>
<p>To extend this analogy even further, traditional factories could not exist without an associated warehouse and a distribution system, both because the customers&#146; demand is not known with precision beforehand, and because of economy of scale considerations. Besides, the economical separation between production and distribution increases the system efficiency due to the beneficial concurrency among different providers.</p>
<p>Similarly in the OO world, when a class factory is required to automate objects&#146; construction, a persistent container for the factory end products is invariably needed. First because, as in the real world case, the demand for the binary components by different clients, or by the same client at different times, is likely to be unknown. Second because complex software systems typically deal with an object with a life span extending beyond the destruction of the factory object itself. In fact, the class factory is typically set into action by a client interface, but the objects constructed by the factory should outlive the client interface itself. So object persistence and automated construction by factories often go hand in hand.</p>
  <p>This article describes a typical way of using factory objects to extract 
    information from an XML source and to construct persistent objects for a specific 
    task (to price financial contracts in this case). <a href="web0302cf1.htm" target="_blank">Figure 
    1</a> shows a sketch of the project.</p>
<p>All the information describing the financial contract is contained in an XML document. This is the input for a specialized factory object (i.e., a class object that inherits the interface of an abstract class factory). The role of this factory object is to build different sub-components required to price the contract (e.g., a time-line containing all the important dates of the contract, a pricing engine object, a discount factor curve, and others). Most of these components can and should be reused by other contracts, for efficiency considerations. Therefore the factory should also be responsible for storing these components in a container object, having a life span independent from the life span of the factory itself.</p>
<p>Not all software architectures require class factories, but the advantages of this approach are often appealing. In my opinion, this is true for those architectures where specialization (OO inheritance) and aggregation (containment through member pointers to other library components) are used in conjunction and are well balanced. In these situations, the object library is typically organized in several shallow class hierarchies, with constructors of one class receiving pointers to abstract base classes at the root of a different hierarchy. This can result in complicated chain dependencies in the construction process, where the constructor of a complex component requires data and pointers to simpler components, which also require data and pointers to more primitive components, and so on. Here the automation of the construction process by means of class factories offers the following advantages:</p>

<UL><LI>It simplifies the code, by hiding the object construction in a factory <B>build</B> function.</LI>
<LI>It reduces the risk of erroneous construction with uninitialized data.</LI>
<LI>It increases the construction efficiency by keeping track of components already available in the persistent container associated with the factory, thus avoiding data duplication.</LI>
<LI>It takes responsibility for storing sub-components, created in the <B>build</B> function; in this way they can be reused, if suitable, in the following constructions.</LI>
</UL>

<p>In addition, the combination of XML input data and class factories offers the advantage of structuring the raw data consumed by the factory in a rational and standard way. In fact the natural structure of the input data, used to initialize complex objects, can be easily mapped to XML tree structures, and the extensibility of the XML protocol allows reuse of XML protocols already established in the market. In finance, for example, two XML protocols for describing financial contracts are emerging: FpML <a href="#1">[1]</a> and FIXML <a href="#2">[2]</a>.</p>

<H3>Program Flow</H3>

<p>In the project described here, a persistent container object is first created when the library is loaded by the main application. When all the information describing the financial contract is gathered by the GUI application (Java front end), the XML document is formed and used to construct the specific factory object. The factory interrogates the container for reusable components and stores new components in it. The financial instrument is then priced and the factory object is eventually discarded. The reusable components however outlive the client and are finally deleted when the main application (the server) ends.</p>

<H3>XML and DOM Parsers</H3>
<p>XML is a powerful protocol for transferring data. In the financial library that I have designed and developed, different Java client applications are used to form valid XML files or strings, containing the typically large set of data that describe a financial contract. This XML information is sent through a JNI (Java Native Interface) to the C++ layer, where it is parsed back into C++ objects by means of a specialized factory object.</p>
<p>Although this flow of data can occur on a single PC, the separation between the user interface (a Java GUI in this case) and the C++ library favors a client/server architecture where the complex numerical evaluation of the financial contract is performed on the server. XML helps greatly in achieving this logical and physical separation. For this purpose, an efficient XML parser is required to retrieve the information. In the code presented here, I use the API provided by the Xerces parser, developed by the Apache XML project and freely available from the Internet <a href="#3">[3]</a>. Many other open source parsers are freely available, but a comparison among them is beyond the scope of this article.</p>
<p>Most XML parsers implement two interfaces: the SAX (Simple API for XML) interface, and the DOM (Document Object Model) interface, which builds on top of the SAX interface. SAX parsers are event driven and access the XML data serially. The implementation of a SAX parser should register an event handler and define callback functions, called whenever an XML tag is opened or closed during the sequential reading of the input. This parsing mechanism has speed on its side, but is memory-less and does not allow editing of the in-memory representation of the XML data. On the other hand, DOM parsers create a tree-like representation of the source file in memory, transforming the XML document into a hierarchy of objects. This provides random access, editing, and insertion and removal of data from the tree, but it is obviously less efficient than in the SAX case, because it involves a two-step process: population of the tree by a SAX-like parsing, and tree-walking to edit and extract the data. However for small- to medium-size XML documents, the OO advantages of DOM over SAX are winning over this inefficiency consideration. A Java tutorial web page <a href="#4">[4]</a> provides a thorough analysis and comparison between SAX and DOM parsers. The DOM API is a W3C specification <a href="#5">[5]</a> and is language-independent (defined using the OMG IDL).</p>
  <p>The class factory <B>WU_XMLFactory</B>, which I developed, is described in 
    Listings <a href="web0302cl1.htm" target="_blank">1</a> (header file) and 
    <a href="web0302cl2.htm" target="_blank">2</a> (source file). Some member 
    functions of this class provide simplified tree navigation of the DOM document, 
    extracting data from the document in four typical situations:</p>

<UL><LI>To extract the value (a string) from a node with a given tag name: <B>string getNodeValue(string tagname)</B>.</LI>
<LI>To extract the value from a node with an ambiguous tag name (i.e., a tag used twice in the XML document, but in different contexts): <B>string getSubNodeValue(string parenttag, string nodetag)</B>.</LI>
<LI>To extract an array of elements (array of strings) contained under a node with a given tag name: <B>STRINGVECTOR getNodeArray(string tagname)</B>. Here <B>STRINGVECTOR</B> is a <B>typedef</B> for a legacy container of strings, but can be easily redefined as <B>std::vector&lt;string&gt;</B>.</LI>
<LI>To extract an array of elements from an ambiguous tag name: <B>STRINGVECTOR getSubNodeArray(string parenttag, string nodetag)</B>.</LI>
</UL>

<p>Some of these functions use a recursive node-searching member function, <B>DOM_Node getNodeRecursive(DOM_Node parent, string subNodeName)</B>, which I will describe later.</p>
<p><B>WU_XMLFactory</B>&#146;s constructor takes a string as the first parameter, containing either the XML input or the name and path of the XML document. Which of these two alternatives is determined by the value of the third parameter, the <B>XMLSource</B> enumeration, which can be either <B>XML_MEMORY</B> or <B>XML_FILE</B> for the two cases, respectively. The second parameter of the constructor is a pointer to a persistent container, used by the <B>build</B> member function to store the components and sub-components created by the factory (described in the next section).</p>
<p>Within the constructor scope, an object of class <B>DOMParser</B> is created and used to parse the input, either from file (<B>dp.parse(fs)</B>) or memory (<B>dp.parse(ms)</B>). Finally, if no parsing exceptions are raised, the parser object is used to initialize the class member <B>m_doc</B>. This is an object of class <B>DOM_Document</B>, which is the root node of the memory representation of the DOM tree.</p>
<p>The first of the four navigation functions described above, <B>getNodeValue</B>, uses the DOM API function <B>DOM_Document::getElementByTagName</B> to search for the proper node in the DOM object after converting the user input from <B>std::string</B> to the <B>DOMString</B> object required by Xerces. This API function produces a list of <B>DOM_Node</B> objects, with names equivalent to the one desired. If the list is not empty, the first hit is the one of interest. Now the code extracts the value contained underneath that node (the first child element). As mentioned above, this function should be used only when there is no ambiguity in the tag name, and a single value is expected within the tag (e.g., <B>&lt;tag&gt;value string&lt;/tag&gt;</B>). The value string is finally converted into an <B>std::string</B> and returned.</p>
<p>If a tag name is used more than once in the XML document, but in a different context (i.e., with a different parent node in the XML tree), then the navigation function <B>getSubNodeValue</B> resolves this ambiguity. One example of an XML document describing a financial contract is the following:</p>

<pre>
...
&lt;equity&gt;
     &lt;volatility&gt;0.3&lt;/volatility&gt;
    ...
&lt;/equity&gt;
&lt;short_rate&gt;
    &lt;volatility&gt;0.05&lt;/volatility&gt;
               ....
&lt;/short_rate&gt;
...
</pre>

<p>Here the <B>&lt;volatility&gt;</B> tag is used twice, but in different contexts: once it describes the volatility of an equity asset; the second time the volatility of the interest rate. <B>getSubNodeValue</B> takes two parameters. The first is for the name of a parent node, or also an ancestor node, if enough to resolve the sub-node. In this case, it would be either <B>equity</B> or <B>short_rate</B>. The second parameter is for the desired sub-node, in this case the ambiguous volatility. Note that the first search for the parent node is performed in the same way as for the simpler function <B>getNodeValue</B>. Once the parent node is found, the search for the sub-node starts from there. This time however the search function <B>getElementByTagName</B> cannot be used because it is a member function of the <B>DOM_Document</B> class, which is a derived class from the more generic <B>DOM_Node</B>.</p>
<p>The <B>DOM_Node</B> is the base class for all possible nodes in a DOM document, such as <B>DOM_Attr</B>, <B>DOM_Element</B>, <B>DOM_Document</B>, etc. A <B>DOM_Document</B> node is a particular kind of node: it is the root node of the DOM tree. So I have added a new search function to the <B>WU_XMLFactory</B> class, to allow for searches starting from a generic node of the tree downwards.</p>
<p>The member function <B>getNodeRecursive</B> requires two parameters. The first one is an object of class <B>DOM_Node</B>, to indicate the node of the tree from which the search should start. The second parameter is a <B>std::string</B>, to indicate the name of the node to look for. If successful, this function returns the <B>DOM_Node</B> required. Otherwise it returns an empty node. The search is performed recursively, starting from the parent node. For every child of the parent node, a search path is started. If a node with the desired name is found, the search finishes successfully, and a <B>DOM_Node</B> object is returned. Otherwise a recursive search from one level down is started. When a search path hits an end leaf (a node with no children), the search continues from the closest sibling of the parent node for this search path. If all searches starting from the higher-level siblings are unsuccessful, an exception is thrown indicating that the desired node was not found.</p>
<p>The last two navigation functions, <B>getNodeArray</B> and <B>getNodeSubArray</B>, are the equivalent to <B>getNodeValue</B> and <B>getNodeSubValue</B> respectively, but allow extraction of an entire array of values at a time, in situations like:</p>

<pre>
....
&lt;short_rate&gt;
    &lt;dates&gt;
        &lt;item&gt;20010701&lt;/item&gt;
        &lt;item&gt;20010901&lt;/item&gt;
        &lt;item&gt;20011201&lt;/item&gt;
&lt;/dates&gt;
    &lt;values&gt;
        &lt;item&gt;0.05&lt;/item&gt;
        &lt;item&gt;0.06&lt;/item&gt;
        &lt;item&gt;0.07&lt;/item&gt;
&lt;/values&gt;
&lt;numDates&gt;3&lt;/numDates&gt;
&lt;/short_rate&gt;
...
</pre>

<p>This example represents a case where a simple term structure of interest rates is given: the short rate today (01/07/2001) is five percent, the forward rate on the first of September is six percent, and the forward rate on the first of December is seven percent. By a single call to <B>getNodeArray</B>, or to <B>getNodeSubArray</B> in case of ambiguity, all dates or values can be extracted at the same time, filling an array of strings.</p>
<p>Finally, the class contains the pure virtual function <B>WU_XMLFactory::build</B>. This function should be implemented by the specialized factories, as shown in the last section. This is the interface for the mechanism with which a specialized factory extracts the information from an XML document, producing an object of a given class.</p>
  <p>As mentioned in the first section, the factory is used to produce objects 
    that outlive the factory itself. In other words, objects that are persistent 
    in memory. At the same time, a single factory object can produce objects not 
    necessarily of the same class, because it may need to create sub-components 
    first and then assemble them into the final component. All these objects should 
    then share a common property: persistency. It is a natural choice therefore 
    to devise an interface (in Java jargon), which should act as the abstract 
    base class for all the objects that need persistency. This is what the class 
    <B>WU_Persistent</B> is for, as shown in <a href="web0302cl3.htm" target="_blank">Listing 
    3</a> (header and source code). This class acts fundamentally in three roles:</p>

<OL><LI>It acts as the base class for different objects, allowing them to be stored in a simple container.</LI>
<LI>It associates persistent objects with a unique ID: <B>m_ID</B>.</LI>
<LI>It contains a pure virtual function, <B>clone</B>, forcing all persistent objects to implement their version of this function.</LI>
</OL>

<p>The <B>clone</B> member function is required because a would-be persistent object, created within the scope of the <B>build</B> function of the factory, is destroyed when going out of scope. For this reason, a clone of the object is created with <B>clone</B>, using the copy constructor of the object, and is placed on the heap memory by the new operator. In this way, <B>clone</B> returns a pointer to a <B>WU_Persistent</B> object, which is the address of the cloned object.</p>
  <p>In order to prevent memory leaks when the main application (e.g., the server 
    application) shuts down, as soon as the objects are cloned they are stored 
    in a container, which has a destructor function that takes responsibility 
    for deleting them. This is illustrated in <a href="web0302cl4.htm" target="_blank">Listing 
    4</a>, with the header and source code for the class <B>WU_Container</B>.</p>
<p>This class basically wraps a <B>std::map</B> associative container, where each persistent object (a pointer to a <B>WU_Persistent</B> object) is associated to its unique ID (a string).</p>
<p>In this basic implementation of a container, two member functions are used to store and retrieve objects from the container: <B>registerComponent</B> and <B>retrieveComponent</B>, respectively. The first function takes the pointer to a <B>WU_Persistent</B> object to be stored and its unique ID. These objects are paired (<B>make_pair(ID,obj)</B>) and inserted into the map. If the insertion fails because the identifier already exists in the map, an exception is thrown. The second function retrieves a pointer to a persistent object from the map, using its ID for the search. If the ID is not found, a null pointer is returned instead.</p>

<H3>An Example</H3>
  <p>In this section, I give a short example on how the factory is used to extract 
    data from an XML file and to populate the input for a financial contract describing 
    an equity option. <a href="web0302cl5.htm" target="_blank">Listing 5</a> is 
    divided into three sections. Section 1 shows a part of the XML input needed 
    to describe the option. Section 2 describes part of the application code where 
    a factory is created and an equity option is priced. Finally, Section 3 describes 
    part of the specialized <B>WU_FactoryEquityOption1F::build</B> code.</p>
<p>The class <B>WU_FactoryEquityOption1F</B> is derived from <B>WU_XMLFactory</B> and specializes the <B>build</B> function to the case of an equity option. In Section 2, this factory is created with a string <B>buff</B> containing the XML input as the first parameter, the address of a persistent container as the second parameter, and the enumeration <B>XML_MEMORY</B> as the third, indicating that the input string <B>buff</B> contains the XML document directly. Then, factory calls its <B>build</B> function (<B>factory.build</B>), to populate its member data <B>m_object</B> with a pointer to a <B>WI_EquityOption1F</B> object. This pointer is returned and stored in <B>option</B>, which is used to call the <B>price</B> member function and to obtain the option price. All is wrapped in a try-catch statement, for possible exceptions thrown from the library modules.</p>
<p>Section 3 shows the factory in action. For example, the option valuation date is retrieved from the XML input by the function <B>WU_XMLFactory::getNodeValue</B> described above. After being transformed into a <B>long</B>, this value is stored in the data structure <B>WD_InstrumentData idata</B>. During the build process, many sub-components are created and stored in the container. One is <B>WM_AssetTree1D* pat</B>, whose constructor requires previously created sub-components, such as <B>pwt1d</B> and <B>pdd</B>, which should be cast from <B>WU_Persistent*</B>. The component addressed by <B>pat</B> is cloned, and its address is stored in the container.</p>
<p>Finally the equity option object is created and its address is assigned to 
  the <B>m_object</B> member datum of the factory. For brevity in the code shown 
  here, the result of dynamic casting is not checked for casting errors.</p>

<H3>References</H3>
<p><a name="1"></a>[1]  FpML is the Financial product Markup Language (&lt;www.fpml.org&gt;) from the FpML Products Working Groups.</p>
<p><a name="2"></a>[2]  FIXML is the Financial Information eXchange (FIX) protocol (&lt;www.fixprotocol.org&gt;), owned and maintained by the Fix Protocol, Ltd.</p>
<p><a name="3"></a>[3]  <a href="http://xml.apache.org">&lt;http://xml.apache.org&gt;</a></p>
<p><a name="4"></a>[4]  Eric Armstrong. <a href="http://java.sun.com/xml/docs/tutorial">&lt;http://java.sun.com/xml/docs/tutorial&gt;</a>.</p>
<p><a name="5"></a>[5]  The World Wide Consortium at <a href="http://www.w3.org">&lt;www.w3.org&gt;</a>.

<H3>About the Author</H3>

<p>After working for several years in experimental physics in Italy and Sweden, <B>Gualtiero Chiaia</B> moved to London where he now works as a financial engineer at Quantin&#146; Leap Ltd., a company that produces software for the financial industry. He can be reached at <a href="mailto:gchiaia@quantinleap.com">gchiaia@quantinleap.com</a>.</p>

</BODY></HTML>
