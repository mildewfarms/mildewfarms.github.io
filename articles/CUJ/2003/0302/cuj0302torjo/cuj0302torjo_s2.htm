<HTML><HEAD><TITLE>std::endl Usage</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h3>std::endl Usage</h3>Writing <B>std::endl</B> to a stream has the following effect: it writes <B>Enter</B> to the stream and flushes it. This is very important: flushing makes sure the data is written from the buffer to its real destination. By handling the flushing, you can do very nifty things. For instance, you can create a log file class that <I>automatically</I> precedes every written message with the time it's been written. Or, in this particular case, you can make sure the message is written to our two internal logs.<P>Note that handling <B>flush</B> is not as easy as it looks. You don't handle <B>flush</B> directly. (It's not a virtual function.) You have to create your stream buffer class, derived directly or indirectly from <B>std::basic_streambuf&lt; ...&gt;</B>. Then, you must override the virtual function <B>int sync</B>.<P>Download the source code from the <I>CUJ</I> website (available at &lt;www.cuj.com/code&gt;) and analyze the <B>CMessageHandlerStream</B> and <B>CMessageHandler_streambuf</B> classes for more details.</BODY></HTML>