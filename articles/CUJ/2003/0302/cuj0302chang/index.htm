<HTML><HEAD><TITLE>More on the C/C++ Comment Macro for Debug Statements</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h2>More on the C/C++ Comment Macro for Debug Statements</h2><h3>Randall C. Chang</h3>A C/C++ Comment Macro" by Mark Timperley in the January 2001 issue   of <I>C/C++ Users Journal</I> suggested a macro definition to comment out a   single-line debug statement. The tip created a macro to represent two slash   characters (<B>//</B>) as the beginning of a single-line statement. For debug   builds, the single line compiled. For release builds, the line was interpreted   as a comment. Mr. Timperley elaborated a token-pasting operator in a second   macro, <B>SLASH()</B>, in order to compose the two slash characters as shown:<P> <pre> #define COMMENT SLASH(/) #define SLASH(s) /##s  #if _DEBUG #include &lt;iostream&gt; #define dout std::cout #else #define dout COMMENT #endif  dout &lt;&lt; "Hello World!\n"; </pre>However, this approach is limited to only single-line debug comments,   and its utility relies on the compiler implementation (i.e., the implementation   of the C/C++ preprocessor). For instance, some preprocessor implementations   do not immediately interpret the macro token-pasting operation used in another   macro definition. These preprocessors will define the macro <B>COMMENT</B> as   a <B>"SLASH(/)" char</B> string instead of <B>"c:\www.cuj.com//"</B> as desired. Hence, this   approach may not be portable across different compilation environments. This   technique also does not satisfy the scenario where the debug statements are   formatted into multiple lines to improve legibility. For example, in the following   code segment:<P> <pre> dout &lt;&lt; "variable a: " &lt;&lt; a // a is an integer &lt;&lt; "variable b: " &lt;&lt; b /* b is a double */ &lt;&lt; "variable c: " &lt;&lt; c // c is a char &lt;&lt; endl; </pre>Only the first line will be commented out, and the rest of the lines   will cause compilation errors. (Note that I included the comment control characters   <B>/*</B>, <B>*/</B>, and <B>//</B> in the preceding code segment to increase   the complexity.)<P> A recent assignment at FedEx Services ITD achieved a couple of portable C/C++   comment macro definitions that are able to handle multiple-line debug statements   in both function (<B>dbgInC</B>) and class (<B>dbgInCpp</B>) formats. An example   of these useful and portable macro tricks is illustrated below:<P> <pre> #if _DEBUG // dbgInC defined as "printf" or other custom debug function #define dbgInC printf // dbgInCpp defined as "cout" or other custom debug class #define dbgInCpp cout #else // dbgInC defined as null [1] #define dbgInC // dbgInCpp defined as "if(0) cerr" or "if(1); else cerr" #define dbgInCpp if(0) cerr #endif  dbgInC("Debug in C: %d%s%2.0f\n", a, // a is an integer b, /* b is char array */ c); // c is a float  dbgInCpp &lt;&lt; "Debug in C++: " &lt;&lt; a // a is an integer &lt;&lt; b /* b is char array */ &lt;&lt; c // c is a float &lt;&lt; endl; </pre>When compiled, <B>dbgInC</B> is interpreted as <B>null</B> by the preprocessor,   and <B>dbgInCpp</B> is interpreted as a <B>"if(0) cerr"</B> string.<P> The function <B>dbgInC</B> is converted to an expression that does not cause   a compilation error but returns a true/false value at run time.<P> <pre> ("Debug in C: %d%s%2.0f\n", a, b, c); </pre>And <B>dbgInCpp</B> is converted to an if-condition whose statement,   <B>cerr &lt;&lt; ..etc.</B>, will never be reached at run time.<P> <pre> if(0) cerr &lt;&lt; "Debug in C++: " &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;  or [2]:  if(1); else cerr &lt;&lt; "Debug in C++: " &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl; </pre>The proposed comment macro definitions convert the debug statements   into unrelated C/C++ code and are not limited by the implementation of the C/C++   preprocessor. Thus, they are highly portable across different compilers. But,   will code conversion by macro definition affect the run-time performance significantly?   I conducted a performance test of the above conversion macro approach against   blank-test sample code where the debug statements were actually removed. Interestingly,   the performance measurement showed the proposed conversion macro suffered merely   a nonessential loss (less than 1~2%) versus the ideal blank test with Forte   6.2, the Sun Workstation Pro C++ compiler.<P><h3>Notes</h3>[1] Or, similar to <B>dbgInCpp</B>:<P> <pre> #define dbgInC if(0) printf </pre>[2] With appropriate compiler optimization level (e.g. <B>-xO4</B>   in Forte 6.2, Sun Workstation Pro C++ compiler), the <B>if(0)</B> condition   and its statements can be stripped from the assembly code of compilation by   the C++ preprocessor. Thus, the debug segment is actually removed from the code   at release builds.<p>  <h3>About the Author</h3>  Randall C. Chang graduated with a Ph.D. in electrical and computer   engineering from University of Florida. Since 1994, he has provided computer   software consulting services in the central Florida area to corporations such   as Florida Power Corporation, Lucent Technologies, Inc., etc. He currently works   as a technical advisor for FedEx Services Information Technology Division and   teaches C++/Java programming language courses in the Management Information   Systems Department at University of Central Florida.<p> </BODY></HTML>