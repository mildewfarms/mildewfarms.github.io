<HTML>   
     <HEAD>
<TITLE>April 2003/Common Knowledge</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<HR>

<H2 ALIGN="center"><FONT COLOR="#800000">Common Knowledge: Scouting Out Optimizations</FONT></H2>
<H3 ALIGN="center"><FONT COLOR="#800000">Stephen C. Dewhurst</FONT></H3>

<HR>
<BLOCKQUOTE>

<p>Last time we examined <b>typeint</b>s, a mechanism to implement extended-precision, compile-time arithmetic using type manipulation in place of more traditional arithmetic operations. As a result, we were able to handle compile-time arithmetic on integers many hundreds of bits in length.</p>
<p>As a parting shot, we had a quick look at a multiplication algorithm for <b>typeint</b>s, but observed that the algorithm had quadratic compile-time complexity. In this installment of &quot;Common Knowledge,&quot; we'll investigate a number of metaprogramming techniques that can improve the observed performance of the algorithm by several orders of magnitude without affecting its asymptotic (big-O) complexity.</p>

<H3><FONT COLOR="#000080">Iterative and Recursive Multiplication</FONT></H3>

<p>We'll use the simple shift-and-add algorithm for multiplication throughout this installment.  This is why the asymptotic complexity results will not change as we apply various optimizations; the essential algorithm remains the same.</p>
<p>Recall that the shift-and-add approach to implementing multiplication entails examining the multiplier bit-by-bit. The product is computed by shifting the multiplicand left by the current bit position of the multiplier. If the multiplier bit is one, then the shifted multiplicand is added to the product.  This procedure is perhaps more clearly described by example:</p>

<pre>
        1 1 0 1 // A == 13
      x 1 0 0 1 // B == 9
     ------------
        1 1 0 1
      0 0 0 0
    0 0 0 0
 1 1 0 1
---------------
 1 1 1 0 1 0 1 // A * B == 117
</pre>

<p>A standard iterative solution (substituting unsigned integers for <b>typeint</b>s) might look something like the following:</p>

<pre>
unsigned multiply1( unsigned a, unsigned b ) {
   unsigned prod = 0;
   while( b ) {
      if( b &amp; 1 )
         prod += a;
      a &lt;&lt;= 1;
      b &gt;&gt;= 1;
   }
   return prod;
}
</pre>

<p>However, since we'll be performing the computation at compile time with template metaprogramming, we don't have iteration available to us, so we have to use a recursive approach <a href="#1">[1]</a>:</p>

<pre>
unsigned multiply2( unsigned a, unsigned b ) {
   if( b )
      if( b &amp; 1 )
         return (multiply2( a, b&gt;&gt;1 )&lt;&lt;1) + a;
      else
         return multiply2( a, b&gt;&gt;1 )&lt;&lt;1;
   else
      return 0;
}
</pre>

<p>The recursive form of the algorithm essentially says, &quot;First, recurse to multiply <b>a</b> by the higher-order bits of <b>b</b>, and shift the result. Then, if the lowest-order bit of <b>b</b> is one, add <b>a</b> to the previous result.&quot; The recursion terminates when <b>b</b> is zero.</p>

<H3><FONT COLOR="#000080">Metaprogrammed Multiplication</FONT></H3>

<p>We can use the implementation of this recursive algorithm to guide the coding of the metaprogrammed version. First, we must declare the primary template. However, we will not be using it, so we don't have to define it.</p>

<pre>
template &lt;typename A, typename B&gt;
struct Mul;   // no definition of primary
</pre>

<p>The first partial specialization handles the case where the lower-order bit of the <b>typeint</b> <b>B</b> is zero <a href="#2">[2]</a>. The implementation recursively instantiates the <b>Mul</b> template to compute the value of multiplying <b>A</b> by the higher-order bits of <b>B</b> and then shifts the result by appending an unqualified pointer modifier.</p>

<pre>
template &lt;typename A, typename B&gt;
struct Mul&lt;A,B *&gt;   // 0 digit, just shift
                    // A*B0 == (A*B)&lt;&lt;1
    { typedef typename Mul&lt;A,B&gt;::R *R; };
</pre>

<p>The second partial specialization handles the case where the lower-order bit of <b>B</b> is one. The implementation is essentially the same as in the previous case, but the original value of <b>A</b> is added to the shifted result <a href="#3">[3]</a>.</p>

<pre>
template &lt;typename A, typename B&gt;
struct Mul&lt;A,B *const&gt; {   // 1 digit, shift and add
                           // A*B1 == ((A*B)&lt;&lt;1)+A
    typedef typename Mul&lt;A,B&gt;::R *Tmp;
    typedef typename Add&lt;Tmp,A&gt;::R R;
};
</pre>

<p>Penultimately, we terminate the recursion when <b>B</b> is zero.</p>

<pre>
template &lt;typename A&gt;
struct Mul&lt;A,char&gt;   // A * 0 == 0
    { typedef char R; };
</pre>

<p>Finally, we must take care of a glitch. We special-case in the event that <b>B</b> is one by simply &quot;returning&quot; <b>A</b> as the result. The multiplication would succeed without this additional partial specialization, but would result in the <b>typeint</b> product's having a leading zero. For convenience and efficiency, the <b>typeint</b> representation (described in the previous installment) does not permit leading zeros.</p> 

<pre>
template &lt;typename A&gt;
struct Mul&lt;A,char *const&gt;   // to avoid a char * typeint
    { typedef A R; };   // no leading zeros!
</pre>

<p>This metaprogrammed <b>typeint</b> multiplication is effective, in that it works:</p>

<pre>
typedef TypeInt&lt;12345&gt;::R N1;
typedef TypeInt&lt;54321&gt;::R N2;
typedef Mul&lt;N1,N2&gt;::R Product;
cout &lt;&lt; Value&lt;Product&gt;::r &lt;&lt; endl; // 670592745
</pre>

<p>However, as we noted at the close of the previous &quot;Common Knowledge,&quot; we may have to wait a while for the result. On a typical workstation/compiler combination, multiplication of two 128-bit <b>typeint</b>s can require more than two hours!</p>

<H3><FONT COLOR="#000080">Clumping Runs of Bits</FONT></H3>

<p>Let's see what optimization can be accomplished without actually changing the multiplication algorithm. The major source of (non-algorithmic) inefficiency would seem to be the repeated shifting and adding of the first (<b>A</b>) argument by the number of bits in the second (<b>B</b>) argument. One way to reduce the number of additions performed would be to perform a single shift and addition for a &quot;run&quot; of like bits, rather than a shift and addition for each bit of the multiplier (see <a href="dewhurst_fig1.htm">Figure 1</a>).</p>
<p>Probabilistically, we'd expect some clumping of bits, so this approach should result in generally better performance. However, in the worst case &#151; alternating zero and one bits &#151; this approach is no better than the previous one, so the asymptotic complexity of the multiplication algorithm is unchanged.</p> 

<H3><FONT COLOR="#000080">Trading Places</FONT></H3>

<p>An additional optimization would be to take advantage of the commutativity of multiplication and make sure that the multiplier (<b>B</b>) is always the longer of the two operands, so as to have a better chance of encountering longer runs of like bits in <b>B</b> and (more importantly) to minimize the number of bits in the multiplicand (<b>A</b>) to improve the efficiency of the remaining additions. Our optimized multiplication will therefore begin by making sure that the multiplier is the shorter of the two operands.</p>

<pre>
template &lt;typename A, typename B&gt;
struct Mulopt {
   // the second arg should be the larger of the two
   enum { alen = Len&lt;A&gt;::r, blen = Len&lt;B&gt;::r };
   typedef typename M2&lt;(alen&lt;=blen),A,B&gt;::R R;
};
</pre>

<p>One of the implementations of the <b>M2</b> template performs the actual switch. (We may call <b>M2</b> an &quot;implementation template&quot; because it is not accessed directly by the user of our multiplication facility.)</p>

<pre>
// M2 switches the args, if necessary,
// so the longer arg is second arg.
template &lt;bool, typename A, typename B&gt;
struct M2 {
   typedef typename M3&lt;A,B&gt;::R R;
};

template &lt;typename A, typename B&gt;
struct M2&lt;false,A,B&gt; {
   typedef typename M3&lt;B,A&gt;::R R;
};
</pre>

<p>Note the desirability of the indirection from <b>Mulopt</b> to <b>M2</b> to perform the operand swap. We could have implemented the swap directly within <b>Mulopt</b>, but in that case both branches of the conditional would have been instantiated:</p>

<pre>
template &lt;typename A, typename B&gt;
struct Mulopt { // Note: improper implementation!
   enum { alen = Len&lt;A&gt;::r, blen = Len&lt;B&gt;::r };
   typedef typename Select&lt;
      (alen&lt;=blen),
      typename M3&lt;A,B&gt;::R, // this is always instantiated...
      typename M3&lt;B,A&gt;::R // and so is this!
   &gt;::R R;
};
</pre>

<p>The result would be correct, but we would have more than doubled the compile time, since we'd have performed the multiplication twice! Since the entire purpose of this exercise is to reduce compile time, this approach is clearly not appropriate, and the indirect instantiation of the <b>M2</b> template is required in order to prune the unused instantiation path.</p>
<p>Specializations of <b>Mulopt</b> also handle the trivial cases where one or both operands are zero. This has the effect of simplifying the rest of the implementation.</p>

<pre>
// three specializations for zero args
template &lt;typename A&gt;
struct Mulopt&lt;A,char&gt; {
   typedef char R; // A * 0 == 0
};

template &lt;typename B&gt;
struct Mulopt&lt;char,B&gt; {
   typedef char R; // 0 * B == 0
};

template &lt;&gt;
struct Mulopt&lt;char,char&gt; {
   typedef char R; // 0 * 0 == 0
};
</pre>

<H3><FONT COLOR="#000080">Scouts</FONT></H3>

<p>A metaprogramming technique that seems to have general applicability is the use of scouts. A &quot;scout&quot; is simply a small section of code that performs a compile-time look ahead in order to determine how to proceed.  The term is meant to evoke the practice of sending a single individual ahead of a larger body of explorers in order to determine the lay of the land. A run-time analogy might be a parser's use of one or more symbols of look ahead in order to determine the direction of the parse.</p>
<p>In our case, the scouting report will be fairly straightforward: do we have a run of zeros or ones ahead, and how many do we have?  The implementation template <b>M3</b> uses the scouting report to decide how to proceed.</p>

<pre>
template &lt;typename A, typename B&gt;
struct M3 {
   enum {
      ones = Count1s&lt;B&gt;::r,
      zeros = Count0s&lt;B&gt;::r
   };
   typedef typename M4&lt;zeros,ones,A,B&gt;::R R;
};
</pre>

<p>Note that the value of at least one of the enumerators <b>ones</b> and <b>zeros</b> will be zero. The scouts themselves are trivial (recall that a <b>*</b> modifier represents a zero bit, and a <b>* const</b> modifier a one bit):</p> 

<pre>
template &lt;typename T&gt;
struct Count0s {
   enum { r = 0 };
};

template &lt;typename T&gt;
struct Count0s&lt;T *&gt; {
   enum { r = Count0s&lt;T&gt;::r + 1 };
};

template &lt;typename T&gt;
struct Count1s {
   enum { r = 0 };
};

template &lt;typename T&gt;
struct Count1s&lt;T *const&gt; {
   enum { r = Count1s&lt;T&gt;::r + 1 };
};
</pre>

<p>Once <b>M3</b> has received the scouting report, it knows how to proceed by instantiating the appropriate version of the implementation template <b>M4</b>. All the possible cases are handled by partial specializations of <b>M4</b>, but we still have to declare the primary:</p> 

<pre>
template &lt;int zeros, int ones, typename A, typename B&gt;
struct M4;
</pre>

<p>The end condition of the recursion occurs when the multiplier (<b>B</b>) has been stripped of all its bits:</p>

<pre>
template &lt;typename A, typename B&gt;
struct M4&lt;0,0,A,B&gt; { // nothing left of B
   // specializations of Mulopt assure us no
   // zero args so we can return 1 here
   typedef char * const R;
};
</pre>

<p>If the scouts have reported a run of zero bits, all we have to do is shift the run off of <b>B</b>, multiply <b>A</b> by the result, and shift <b>A</b> by the length of the run.</p>

<pre>
template &lt;int n, typename A, typename B&gt;
struct M4&lt;n,0,A,B&gt; { // B has run of n 0s
   typedef typename RShift&lt;B,n&gt;::R T1; // B/2**n
   typedef typename Mulopt&lt;A,T1&gt;::R T2; // A*(B/2**n)
   typedef typename LShift&lt;T2,n&gt;::R R; // (A*(B/2**n))*2**n
};
</pre>

<p>The expression <b>(A*(B/2<sup>n</sup>))*2<sup>n</sup></b> is equivalent to <b>A*B</b> if <b>B</b>'s lower <b>n</b> bits are zero. Note that the multiplication and division are accomplished with the left and right shift operators for <b>typeint</b>s described in the previous installment. This is a marginal improvement over processing each zero bit individually, but we haven't yet avoided any additions.</p> 
<p>Note also that the recursive instantiation to produce the result <b>A*(B/2<sup>n</sup>) </b>is made to <b>Mulopt</b> rather than the implementation template <b>M3</b>. The reason is that, after removing the run of <b>n</b> bits from <b>B</b>, the length of <b>B</b> may now be less than that of <b>A</b>, and we'd like to reapply the swap optimization described earlier.</p>
<p>We get most of the improvement in handling runs of ones. If we have a run of one bits, we do the same as with a run of zero bits, but we have to add in the result of <b>A</b> times that run of one bits from <b>B</b>.</p>

<pre>
template &lt;int n, typename A, typename B&gt;
struct M4&lt;0,n,A,B&gt; { // B has run of n 1s
   typedef typename RShift&lt;B,n&gt;::R T1;
   typedef typename Mulopt&lt;A,T1&gt;::R T2;
   typedef typename LShift&lt;T2,n&gt;::R T3;
   typedef typename LShift&lt;A,n&gt;::R Ax2n;
   typedef typename Sub&lt;Ax2n,A&gt;::R Ax2n_1;
   typedef typename Add&lt;T3,Ax2n_1&gt;::R R;
};
</pre>

<p>The expression <b>((A*B/2<sup>n</sup>)*2<sup>n</sup>)+(A*(2<sup>n</sup>-1))</b> is equivalent to <b>A*B</b> if <b>B</b>'s lower <b>n</b> bits are one. And <b>A*(2<sup>n</sup>-1)</b> is equivalent to <b>A*2<sup>n</sup>-A</b>, which is equivalent to <b>(A&lt;&lt;n)-A</b>.  Translated into a more conventional calculation, the <b>typedef</b>s in this specialization of <b>M4</b> are equivalent to the following:</p>

<pre>
T1 = B &gt;&gt; n;
T2 = A * T1;
T3 = T2 &lt;&lt; n;
Ax2n = A &lt;&lt; n;
Ax2n1_1 = Ax2n - A;
R = T3 + Ax2n_1;
</pre>

<H3><FONT COLOR="#000080">Limited Subtraction</FONT></H3>

<p>One final piece is required for the implementation of these optimizations: the subtraction algorithm employed by the specialization of <b>M4</b>, above. For our purposes, we'll implement an unsigned subtraction that assumes that the first argument is greater than the second. Most of the implementation is straightforward:</p>

<pre>
template &lt;typename A, typename B&gt;
struct Sub;

template &lt;typename A, typename B&gt;
struct Sub&lt;A *const,B *const&gt; { // A1-B1 == (A-B)0
   typedef typename Sub&lt;A,B&gt;::R *R;
};

template &lt;typename A, typename B&gt;
struct Sub&lt;A *const,B *&gt; { // A1-B0 == (A-B)1
   typedef typename Sub&lt;A,B&gt;::R *const R;
};

template &lt;typename A, typename B&gt;
struct Sub&lt;A *,B *&gt; { // A0-B0 == (A-B)0
   typedef typename Sub&lt;A,B&gt;::R *R;
};

template &lt;typename A&gt;
struct Sub&lt;A,char&gt; { // A-0 == A
   typedef A R;
};

template &lt;&gt;
struct Sub&lt;char,char&gt; { // 0-0 == 0
   typedef char R;
};
</pre>

<p>The interesting case occurs when a one bit in <b>B</b> is subtracted from a zero bit in <b>A</b>, and it is necessary to &quot;borrow&quot; from the higher-order bits of <b>A</b>:</p>

<pre>
template &lt;typename A, typename B&gt;
struct Sub&lt;A *,B *const&gt; { // A0-B1 == ((A-1)-B)1
   // Need to borrow.
   typedef typename Borrow&lt;A&gt;::R T1;
   typedef typename Sub&lt;T1,B&gt;::R *const R;
};
</pre>

<p><b>Borrow</b> scans back to find a one bit, zeros it, and sets all the preceding zero bits to one.</p>

<pre>
template &lt;typename T&gt;
struct Borrow;

template &lt;typename T&gt;
struct Borrow&lt;T *const&gt; {
   // make sure there's no leading 0
   typedef typename Select&lt;IsPtr&lt;T&gt;::r,T *,T&gt;::R R;
};

template &lt;typename T&gt;
struct Borrow&lt;T *&gt; {
   typedef typename Borrow&lt;T&gt;::R *const R;
};
</pre>

<H3><FONT COLOR="#000080">Results</FONT></H3>

<p>With these optimizations in place, anecdotal evidence indicates the performance of the <b>Mulopt</b> implementation of the multiplication algorithm is typically two to three times faster than the original <b>Mul</b> implementation.  In special cases in which there are large runs of like bits, <b>Mulopt</b> can outperform <b>Mul</b> by several orders of magnitude. However, it's not often that extended-precision, compile-time multiplication will be of practical use <a href="#4">[4]</a>.</p> 
<p>However, the techniques used in implementing the optimizations are of general, practical use and can be commonly employed in template metaprogramming.</p>

<H3><FONT COLOR="#000080">Notes</FONT></H3>

<p><a name="1"></a>[1] See Andrei Alexandrescu's <i>Modern C++ Design</i> (Addison-Wesley 2001), p. 54 for an explanation as to why recursion is necessary.</p>
<p><a name="2"></a>[2] Throughout this article, we'll employ the usual terminology of unsigned binary arithmetic to refer to the analogous <b>typeint</b> concepts. For instance, we describe a pointer modifier that is part of a <b>typeint</b> as a &quot;bit,&quot; a <b>const</b>-qualified pointer modifier as a &quot;one bit,&quot; an unqualified pointer modifier as a &quot;zero bit,&quot; and the type <b>char</b> as the numeric value zero.</p>
<p><a name="3"></a>[3] We described the implementation of the <b>Add</b> template in the previous installment.  The source code for the complete <b>typeint</b> implementation is available at <a href="http://www.semantics.org/code.html">&lt;www.semantics.org/code.html&gt;</a>.</p> 
<p><a name="4"></a>[4] However, shifting and bitwise operations on extended precision integers do seem to be more commonly useful. Fortunately, these operations are easy to implement with linear compile-time complexity.</p>

<H3><FONT COLOR="#000080">About the Author</FONT></H3>

<p><p><b>Stephen C. Dewhurst</b> (<a href="http://www.semantics.org">&lt;www.semantics.org&gt;</a>) is the president of Semantics Consulting, Inc., located among the cranberry bogs of southeastern Massachusetts. He specializes in C++ consulting, and training in advanced C++ programming, STL, and design patterns. Steve is also the author of  <i>C++ Gotchas</i> (Addison-Wesley, 2003).</p>

</BLOCKQUOTE></BODY></HTML>
