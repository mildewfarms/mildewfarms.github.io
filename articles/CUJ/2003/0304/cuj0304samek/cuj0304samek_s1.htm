<HTML><HEAD><TITLE>OOP in C</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><h3>OOP in C</h3>Many programmers mistakenly think that Object Oriented Programming (OOP) is possible only with OO languages, such as C++ or Java. However, OOP isn't the use of a particular language or a tool; it is a way of design that can be implemented in almost any language, such as C. Knowing how to code classes, inheritance, and polymorphism in C can be very useful for embedded programmers, who often maintain C code or deal with embedded microprocessors released to the field with nothing but a bare-bones C compiler.<P>As a C programmer, you already may have used ADTs (abstract data types). For example, in the Standard C runtime library, the family of functions that includes <B>fopen()</B>, <B>fclose()</B>, <B>fread()</B>, and <B>fwrite()</B> operates on objects of type <B>FILE</B>. The <B>FILE</B> ADT is encapsulated so that the clients have no need to access the internal attributes of <B>FILE</B>. (When was the last time you looked up what's inside the <B>FILE</B> structure?) You can think of the <B>FILE</B> structure and the associated methods that operate on it as the <B>FILE</B> class. The following bullet items summarize how the C runtime library implements the <B>FILE</B> "class":<P><ul><li>  Attributes of the class are defined with a C <B>struct</B> (the <B>FILE</B> <B>struct</B>).<li>  Methods of the class are defined as C functions. Each function takes a pointer to the attribute structure (<B>FILE *</B>) as an argument. Class methods typically follow a common naming convention (e.g., all <B>FILE</B> class methods start with f).<li>  Special methods initialize and clean up the attribute structure (<B>fopen()</B> and <B>fclose()</B>, respectively). These methods play the roles of class constructor and destructor.</ul>For example, Listing 2 declares class <B>Keyboard</B>. Each method of the class takes the pointer to the attribute structure (<B>Keyboard *</B>) as the first argument (the <B>me</B> pointer) and starts with the common class prefix (<B>Keyboard</B>). The <B>me</B> pointer in C corresponds directly to the <B>this</B> pointer in C++. (If you are unfamiliar with the construct <B>typedef</B> <B>struct</B> <B>Fsm</B> <B>Fsm</B>, please refer to Dan Saks' article "Tag vs. Type Names," <I>Embedded Systems Programming</I>, October 2002.)<P>A simple way of implementing single inheritance in C is by literally embedding the superclass attribute structure as the first member of the subclass structure. (Please convince yourself that the resulting memory alignment lets you always treat any pointer to the subclass as a pointer to the superclass.) In particular, you can always pass this pointer to any C function that expects a pointer to the superclass. (To be strictly correct in C, you should explicitly upcast this pointer.) Therefore, all methods designed for the superclass are automatically available to subclasses; that is, they are inherited.<P>For example, Listing 2 shows how to derive class <B>Keyboard</B> from the base class <B>Fsm</B> (lines 3-7). The superclass instance <B>super_</B> (Listing 2, line 5) is embedded as the first attribute of the subclass <B>Keyboard</B>.<P>For more information on implementing OOP in C (including polymorphism, which I don't use in the FSM example), see the first chapter of <I>C+ C++: Programming With Objects in C and C++</I> by Allen Holub (McGraw-Hill, 1992); <I>Reusable Software Components, Object-Oriented Embedded Systems Programming in C</I> by Ted Van Sickle (Prentice Hall, 1997); <I>CUJ</I> articles from July 1990 and July 1993; or my article "Portable Inheritance and Polymorphism in C," <I>ESP</I>, December 1997. Needless to say, Googling around for "OOP in C" or "Inheritance in C" will reveal countless other resources. <p></BODY></HTML>