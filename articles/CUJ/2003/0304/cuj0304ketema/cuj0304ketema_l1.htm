<HTML><HEAD><TITLE>Listing 1:	An implementation of the C++ Standard STL allocator</TITLE></HEAD><body bgcolor="#FFFFFF" text="#000000"><B>Listing 1:</b>	An implementation of the C++ Standard STL allocator<p><pre>template&lt;class T&gt;class SharedAllocator {    private:        Pool pool_;    // pool of elements of sizeof(T)    public:        typedef T value_type;        typedef unsigned int  size_type;        typedef ptrdiff_t difference_type;        typedef T* pointer;        typedef const T* const_pointer;        typedef T&amp; reference;        typedef const T&amp; const_reference;        pointer address(reference r) const { return &amp;r; }        const_pointer address(const_reference r) const {return &amp;r;}        SharedAllocator() throw():pool_(sizeof(T)) {}        template&lt;class U&gt; SharedAllocator            (const SharedAllocator&lt;U&gt;&amp; t) throw():                        pool_(sizeof(T)) {}        ~SharedAllocator() throw() {};        // space for n Ts        pointer allocate(size_t n, const void* hint=0)        {            return(static_cast&lt;pointer&gt; (pool_.alloc(n)));        }        // deallocate n Ts, don't destroy        void deallocate(pointer p,size_type n)        {            pool_.free((void*)p,n);            return;        }        // initialize *p by val        void construct(pointer p, const T&amp; val) { new(p) T(val); }        // destroy *p but don't deallocate        void destroy(pointer p) { p-&gt;~T(); }        size_type max_size() const throw()        {            pool_.maxSize();        }        template&lt;class U&gt;            // in effect: typedef SharedAllocator&lt;U&gt; other        struct rebind { typedef SharedAllocator&lt;U&gt; other; };};template&lt;class T&gt;bool operator==(const SharedAllocator&lt;T&gt;&amp; a,    const SharedAllocator&lt;T&gt;&amp; b) throw(){        return(a.pool_ == b.pool_);}template&lt;class T&gt;bool operator!=(const SharedAllocator&lt;T&gt;&amp; a,    const SharedAllocator&lt;T&gt;&amp; b) throw(){        return(!(a.pool_ == b.pool_));}</pre></BODY></HTML>