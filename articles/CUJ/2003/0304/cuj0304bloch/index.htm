<title>March 2003/C++ Expression Templates</title>
<h2 align="center">Dropping Windows with WineLib</h2>
<h3 align="center"><b>Matthew Bloch</b> </h3>
<div align="center">Expert help for porting your Windows apps to Linux. </div>
<hr>
<p><b> </b><a name="1_return"></a>A C++ project that is coded for a single platform 
  contains any number of subtle functions, data types, and language quirks that 
  bind the project to its original platform. The porter&#146;s job is to identify, 
  isolate, replace, and rewrite such dependent features of a code base. That&#146;s 
  what I&#146;m doing with the tactical warfare game <i>Laser Squad Nemesis</i> 
  [<a href="#1">1</a>]. The application contains 130,000 lines of C++ code written 
  for Windows and DirectX, and our customers want to play it on a modern Linux 
  system. Our long-term plan is to remove all of its hardwired Windows dependencies, 
  but removing all the dependencies in one swoop would be a difficult job that 
  would require changes to large parts of the code base all at once. Furthermore, 
  these changes would have to occur in parallel with ongoing work on the Windows 
  version. Trying to maintain separate branches for different platforms would 
  run the risk of leaving two disparate and unmergeable sets of source code, which 
  is something a small development house cannot afford. 
<p> <a name="2_return"></a>WineLib library [<a href="#2">2</a>] offers a solution 
  to this problem. WineLib is an almost-complete implementation of the Win32 C/C++ 
  programming interface for Linux. In other words, WineLib provides all the functions, 
  types, and interfaces you need to compile a Windows program successfully, only 
  not under Windows. WineLib is actually the library side of Wine, a project that 
  grew from the primary goal of creating a binary compatibility layer for Linux. 
  WineLib is free to integrate with most projects, even commercial projects, and 
  it is well supported by its authors, some of whom are paid to work on it. 
<h3>Wine and WineLib</h3>
<p><b> </b>The Wine project offers two approaches to Windows compatibility: 
<ul>
  <li> Binary compatibility through a tool called <b>wine</b> (often referred 
    to as the <b>wine</b> binary loader). You can simply execute a Windows program 
    in Linux using the command <b>wine myprogram.exe</b>.</li>
  <li>Source-code compatibility through the Win32-equivalent components of the 
    WineLib library.</li>
</ul>
<p> The <b>wine</b> binary loader does not exact any direct performance penalty 
  over creating the equivalent Win32 rebuild with WineLib. However, the binary 
  loader does not really adapt the program to the benefits of the Linux environment. 
  (The whole point is that your program still thinks it is running in Windows.) 
  If performance matters, you may wish to rewrite part of the code to take advantage 
  of Linux-specific features. For instance, I want the game I&#146;m porting to 
  Linux to use the SDL libraries instead of the <b>DirectDraw</b> and <b>DirectSound</b> 
  implementations called by <b>wine</b>. If you wish to write Linux-specific functionality 
  into the program, you&#146;ll need to port your source code to Linux and recompile. 
  WineLib provides the Win32-equivalent API you&#146;ll need to recompile your 
  program in Linux. WineLib by itself does not optimize your program for Linux; 
  however, WineLib gets your whole application up and running in Linux quickly. 
  You can then follow up by tailoring small, critical bits of the code to the 
  peculiarities of the Linux platform. For instance, I can integrate parts of 
  my application to SDL gradually rather than having to eliminate all the DirectX 
  at once. WineLib allows you to perform much smaller, and therefore more reliable, 
  refactoring steps. 
<h3>How Does It Work?</h3>
<p><b> </b>WineLib enables you to compile your Windows program in the Linux environment. 
  However, the notion of &#147;compiling against WineLib&#148; to give you a &#147;native&#148; 
  application is na&iuml;ve at best. Although WineLib allows a relatively straight 
  port from the compiler&#146;s point-of-view (in that most of your Windows code 
  can remain unchanged, and the code runs directly on the Linux host), the <b>wine</b> 
  binary loader still implements a Windows runtime environment to keep track of 
  Windows concepts such as DLL relationships, drive letters, and so on. The binary 
  loader is needed for any application relying on Wine functions. This is to ensure 
  that applications running under the binary loader need no modification to run 
  under Linux. WineLib is not just a simple C library, but an understanding and 
  a rationalization of the facilities that Windows has to offer the application 
  programmer. I&#146;ve found that understanding WineLib is a great step towards 
  learning about Windows as a platform. 
<h3>Getting Wine</h3>
<p><b> </b>The first step I&#146;d recommend is to fetch and build the Wine distribution 
  right now. For most Linux systems, the following commands will work:
<p> 
<pre>
# check we have version 2.95.2 or better
gcc -v
export CVSROOT=\<br>
:pserver:cvs@cvs.winehq.com:/home/wine
cvs login # type "cvs" as the password
cvs co wine
cd wine
./configure &amp;&amp; make</pre>
<p><b> </b>These command downloads about 50 MB, and the build structure will be 
  around 400 MB when you are finished. The Wine distribution has little in the 
  way of external dependencies: only the X11, OpenGL, and curses libraries, which 
  are standard parts of any Linux distribution. Although you can find many pre-built 
  versions of Wine for your system, a distribution built from source that&#146;s 
  easily available and tweakable will aid your debugging, since back traces into 
  Wine source code will be available. When I make reference to the &#147;wine&#148; 
  directory, I am referring to the root of your Wine source-code build. 
<h3>WineLib</h3>
<p><b> </b>Look inside <b>wine/include</b>, and you&#146;ll find <b>windows.h</b> 
  and friends. You can immediately try compiling code written for Windows like 
  this:
<p> 
<pre>
g++ -Wall -c -Iwine/include -o HelloWindows.o HelloWindows.cpp</pre>
<p><b> </b>You may find that your source files compile against the WineLib headers 
  without complaint, as they would under Windows. What you&#146;re left with will 
  be a set of object files for your Linux system. However, Win32 executables have 
  an entry point called <b>WinMain</b>, and simply linking them all together with 
  <b>ld</b> to form a Linux executable will not work. Although the object files 
  reference Win32 symbols, Wine is not implemented as a simple external library 
  that you can link to in the usual manner. It needs the Wine runtime environment 
  and loader. If you want your program to have a <b>WinMain</b>, it must be run 
  through the &#147;wine&#148; executable, which is built with the rest of the 
  code. Your &#147;executable&#148; must in fact be a Linux shared library (<b>.so</b>) 
  supplemented with some fix-up code generated by the <b>winebuild</b> tool, which 
  I&#146;ll describe later. 
<p> <a name="3_return"></a>An article by Eric Pouech from a couple of years ago 
  [<a href="#3">3</a>] explains these reasons well. In brief, Wine&#146;s loader 
  must have DLL linkage information from any binary that it loads on the same 
  terms as it would read the information from any native DLL. So Linux-based DLLs 
  or EXEs must have extra information contained within them for Wine to understand 
  whether they require further DLL code to be loaded. They must also contain symbols 
  that point to the same binary data that would be found in a DLL in order to 
  define relationships to other DLLs. Because Wine treats real Windows DLLs and 
  EXEs with the same semantics as &#147;native&#148; DLLs and EXEs, it allows 
  Linux programs to call functions in plain Windows DLLs and vice versa, so your 
  program can use a mixture of natively compiled code and third-party Windows 
  DLLs. Of course the shared object files are completely normal and can have Linux-specific 
  dependencies specified in the normal way that will be respected by the Linux 
  dynamic linker. Because of the perceived equivalence from Wine&#146;s point 
  of view of a Linux &#147;augmented&#148; <b>.so</b> file and a Windows DLL, 
  such native Wine binaries are conventionally given the extension either <b>.exe.so</b> 
  or <b>.dll.so</b>. 
<h3>winebuild</h3>
<p><b> </b>The Wine distribution includes a tool called <b>winebuild</b>, which 
  generates the fix-up code and binary data necessary to mark a Linux <b>.so</b> 
  file as a DLL or EXE with which the Wine runtime can work. <b>winebuild</b> 
  references a file called a &#147;spec file&#148; that is roughly equivalent 
  to the import and export declarations necessary when building a Windows DLL. 
  <b>winebuild</b> uses the spec file data to generate a <b>.c</b> file, which 
  will be compiled and linked in with your final shared library. There are plenty 
  of examples of spec files in the <b>wine/dlls </b>directory for the built-in 
  Windows DLL implementations (<b>kernel32.dll</b> and friends), but the <b>winebuild</b> 
  tool does not necessarily need a spec file. I&#146;d suggest that maintaining 
  a spec file is unnecessary for a simple <b>.exe</b> that does not need to export 
  symbols to other EXEs or DLLs. You can get your fix-up code for most stand-alone 
  executables with a simple script such as the following:
<p> 
<pre>
#!/bin/bash
WINE=../wine
export LD_LIBRARY_PATH=$WINE/library:$WINE/unicode

$WINE/tools/winebuild/winebuild \
  -fPIC -DSTRICT -D_REENTRANT -exe MyApp.exe -mgui *.o \
  -L$WINE/dlls -luser32 -lgdi32 -ladvapi32 -lkernel32  \
  -lddraw -ldsound -lwinmm &gt; MyApp.exe.c</pre>
<p><b> winebuild</b> will go through your application&#146;s object files and 
  match up any symbols imported by your object files with symbols exported by 
  any DLLs you specify. The generated <b>.c</b> file contains some horrendous-looking 
  static data and an inline assembler, which can then be compiled with the rest 
  of your program. You can use <b>ld -shared</b> to generate your final <b>.exe.so</b> 
  file.
<p> Once you have your <b>.exe.so</b>, you can run it through the <b>wine</b> 
  binary loader with a script like this:
<p> 
<pre>
WINE=/home/mattbee/Work/wine
LD_LIBRARY_PATH=<br>
  "$WINE/dlls:$WINE/library:$WINE/unicode:$LD_LIBRARY_PATH"
WINEDLLPATH="$WINE/dlls:$WINE/programs"
WINESERVER="$WINE/server/wineserver"
WINELOADER="$WINE/miscemu/wine"
WINEDBG="$WINE/programs/winedbg/winedbg"

$WINELOADER MyApp.exe.so</pre>
<p><b> </b>Or you can use <b>gdb</b> to start the binary loader and debug your 
  program as you&#146;d expect, with the added advantage of being able to back 
  trace into Win32 functions. 
<h3>Cleaning Up</h3>
<p><b> </b>While using the binary loader on your Visual C++ compiled <b>.exe</b> 
  will probably work flawlessly, the gcc-compiled <b>.exe.so</b> file will probably 
  fall over. About 70% of my time with <i>Laser Squad Nemesis</i> has involved 
  the obvious and mundane chore of ensuring everything in the program that referenced 
  a filename used upper and lower case consistently and used forward slashes for 
  paths instead of backslashes. The obvious cases will be in <b>#include</b> directives: 
  try to <b>#include "headers\foobar.h"</b> and Linux gcc won&#146;t find it &#151; 
  likewise <b>#include "headers/FooBar.h"</b> when the filename is <b>foobar.h</b>. 
  For filenames that are used within the code, you may get failures a little way 
  into the running of the program when a <b>fopen</b> call returns a <b>NULL</b> 
  or something similar. <i>Laser Squad Nemesis</i> had a couple of points where 
  such error conditions were just ignored and injected erroneous data into the 
  program that only revealed itself sometime later. My solution in that case was 
  to write a wrapper for <b>fopen</b> called <b>xfopen</b>, which replaced any 
  backslashes in filenames with the platform-specific path separator that I defined 
  in a macro. Another solution (mentioned below) is to use the Windows C library 
  MSVCRT supplied with Wine whose <b>fopen</b> call will cope with backslashes 
  automatically. I would advise against this since your program will have problems 
  integrating into a Unix file system when its <b>fopen</b> calls are case-insensitive, 
  and different sets of characters are not permitted in filenames between the 
  two systems. You might as well port your program in every sense rather than 
  just make it run.
<p> A useful first port of call for these kinds of problems is the <b>winemaker</b> 
  tool, which comes with Wine. It&#146;s a script designed to process a source 
  tree straight from Microsoft Visual Studio and produce a &#147;first draft&#148; 
  WineLib source tree, including Makefile. With a backup of your source tree, 
  try something like:
<p> 
<pre>
cp -r MySourceDirectory             \
  MySourceDirectory.new<p>
wine/tools/winemaker --windows      \
  MySourceDirectory.new 2&gt;warnings
diff -urN MySourceDirectory         \
  MySourceDirectory.new | less</pre>
<p><b> </b>which will spit out a new source tree for you to work on with a few 
  of the &#147;obvious&#148; problems described above fixed and allow you to examine 
  the changes it has made. It also (by default) converts DOS to Unix line endings, 
  warns you about Visual C-specific directives, renames your source files to be 
  consistently lower or upper case, and gives you a Makefile that can be processed 
  by GNU <b>autoconf</b>. All of this behavior can be controlled from the command 
  line. You should certainly look at what it produces before forging ahead with 
  manual changes, because it&#146;s a &#147;one-shot&#148; tool intended for saving 
  you a lot of work before you start. 
<p> <a name="4_return"></a>Your next most basic portability problem will be which 
  C library to use: WineLib includes an implementation of the Microsoft Visual 
  C Runtime DLL, which you can use in preference to Linux&#146;s more usual GNU 
  C Library by making sure you use <b>-Iwine/include/msvcrt</b> on the command 
  line. This will give you I/O calls that respect Windows drive-letter references 
  and backslashes and are case-insensitive. On the other hand, you may decide 
  that exorcising all but ANSI functions from your code will be an aid to future 
  portability, as I did. This involved writing trivial inline reimplementations 
  of occasionally used Microsoft-specific C library functions such as <b>_strupr</b> 
  and, in my case, changing functionality to read directory entries. In general, 
  I noticed a lot of liberally licensed code available for Win32 that emulated 
  POSIX standards, whereas Wine is the only public code base that attempts the 
  opposite feat. So it made sense when trying to increase a piece of code&#146;s 
  potential portability to use a POSIX interface where it&#146;s available on 
  Win32 or to write your own abstraction where there isn&#146;t a POSIX standard. 
  In <i>Laser Squad Nemesis</i>, for instance, I rewrote code that scanned files 
  in directories using the POSIX <b>struct dirent</b> and friends and then added 
  some freely available code to the Win32 build [<a href="#4">4</a>] that emulated 
  the semantics for Win32. 
<p> <a name="5_return"></a>The hardest portability problem I faced with WineLib 
  was in using COM objects. I noticed it when a piece of code that called a COM 
  method generated an abort that was inside a completely different COM method. 
  For example, if you <b>#include &lt;ddraw.h&gt;</b> (i.e., any other Windows 
  header file that defines COM objects), you will have defined an <b>IDirectDraw7</b> 
  type that should provide a set of virtual functions for your C++ program to 
  use. This is a point where binary compatibility between WineLib programs and 
  native DLLs is stretched and sometimes broken because WineLib code absolutely 
  must assume that Visual C++&#146;s virtual function tables are used, both when 
  implementing COM objects and when calling them, because programs running under 
  the Wine runtime can make calls between genuine Windows DLLs and Wine DLLs. 
  Visual C++&#146;s virtual function tables put the first function pointer at 
  offset <b>0</b> and are thus the binary compatibility standard imposed on compilers 
  wanting to implement COM interfaces. g++ has for a while started its virtual 
  function tables at offset <b>8</b>, and this has even changed between major 
  gcc versions. So in order to avoid the situation where gcc simply generates 
  calls to the wrong virtual functions, the WineLib authors use a complex (though 
  documented [<a href="#5">5</a>]) set of macros to persuade gcc to generate compatible 
  function tables. The upshot for gcc users is that you need to make a difficult 
  choice when compiling your programs. Either you can use the latest and greatest 
  version of gcc (3.2), which recognizes <b>__attribute__((com_interface))</b> 
  as a prefix to a <b>struct</b> declaration in order to selectively generate 
  Visual C++-compatible function tables, or you can ditch Windows binary compatibility 
  and compile all the Wine COM implementations with gcc&#146;s eight-byte offset. 
  The reason I chose the latter is that the Linux version of <i>Laser Squad Nemesis</i> 
  did not need to call on any Windows DLLs, and my chosen Linux distribution&#146;s 
  C++ compiler version of choice, gcc 2.95.4, does not support the attribute. 
  Finally the binary calling interface for compiled C++ differs incompatibly between 
  gcc 2.95 and the latest gcc 3.2, so I would have had to maintain versions of 
  all the external C++ libraries that the game relies on separate from those that 
  ship with mine and most other people&#146;s Linux distributions: notably STLport. 
  This situation will change in time as Linux distributors standardize on g++ 
  3.2 as their standard C++ compiler, but for now the choice as to which way to 
  go with regards to COM will depend on the needs of your project. 
<p> This has been too brief an overview for my liking; I&#146;ve left out how 
  to use the resource compiler <b>wrc</b> and how to write spec files for DLLs, 
  mainly because my project didn&#146;t need either. But I hope this gives you 
  some confidence that WineLib isn&#146;t difficult, just patchily documented 
  from the conceptual point-of-view. You may also question why you need to &#147;port&#148; 
  to WineLib when <b>wine</b> will run your unmodified binaries much more easily. 
  For me, WineLib is a stopgap allowing me to get a partially ported version tested 
  before getting rid of all the Windows-code from the Linux version for good. 
  So raise a glass to your project&#146;s best escape from Windows. 
<h3>Notes</h3>
<p><b> </b><a name="1"></a>[1] &lt;<a href="http://www.lasersquadnemesis.com/">www.lasersquadnemesis.com/</a>&gt;<br>
  [<a href="#1_return">return to text</a>] 
<p> <a name="2"></a>[2] &lt;<a href="http://www.winehq.com/">www.winehq.com/</a>&gt;<br>
  [<a href="#2_return">return to text</a>] 
<p> <a name="3"></a>[3] &lt;<a href="http://kt.zork.net/wine/%20wn20001218_74.html#4">http://kt.zork.net/wine/ 
  wn20001218_74.html#4</a>&gt;<br>
  [<a href="#3_return">return to text</a>] 
<p> <a name="4"></a>[4] &lt;<a href="http://www.two-sdg.demon.co.uk/curbralan/%20code/dirent/dirent.html">www.two-sdg.demon.co.uk/curbralan/ 
  code/dirent/dirent.html</a>&gt; <br>
  [<a href="#4_return">return to text</a>] 
<p> <a name="5"></a>[5] In <b>wine/include/obj_base.h</b> in the Wine distribution. 
  <br>
  [<a href="#5_return">return to text</a>] 
<h3>About the Author </h3>
<p><b>Matthew Bloch</b> is a graduate of King&#146;s College, Cambridge and one 
  half of Bytemark Computer Consulting Limited, a consulting and Linux hosting 
  firm based in York, UK. You can email him at <b><a href="mailto:matthew@bytemark.co.uk">matthew@bytemark.co.uk</a></b>. 
