<HTML><HEAD>
<TITLE>April 2003/Implementing RMI for C++ Objects/Listing 1</TITLE></HEAD>

<BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">

<h4><A NAME="heading1">Listing 1: Fragment of RMI::Widget and RMI::Circle proxy implementations</A></h4>
<pre>
namespace RMI {
Widget::~Widget()
{
  if (is_bound()) Call(*this, &quot;Widget::~Widget()&quot;);
}
Widget::Widget(const std::string&amp; arg1)
: RMIB(Call(null(), &quot;Widget::Widget(const std::string&amp;)&quot;, arg1))
{
  bind();
}
Widget::Widget(const Widget&amp; arg1) 
: RMIB(Call(null(), &quot;Widget::Widget(const Widget&amp;)&quot;, arg1))
{
  bind();
}
Widget&amp;
Widget::operator=(const Widget&amp; arg1) 
{
  Call(*this, &quot;Widget&amp; Widget::operator=(const Widget&amp;)&quot;, arg1);
  return *this;
}
std::string
Widget::name() const
{
  return Call(*this, &quot;const std::string&amp; Widget::name() const&quot;);
}
Circle::Circle(
  const std::string&amp; arg1, const Point&amp; arg2, int arg3)
: Widget(
   Call(null(), 
        &quot;Circle::Circle(const std::string&amp;, const Point&amp;, int)&quot;,
        arg1, arg2, arg3))
{
  bind();
}
void
Circle::center(const Point&amp; arg1) 
{
  Call(*this, &quot;void Circle::center(const Point&amp;)&quot;, arg1);
}
Point
Circle::center() const
{
  return Call(*this, &quot;const Point&amp; Circle::center() const&quot;);
}
} // End of RMI namespace.</pre>
</body>

</html>
