<html><head><title>March 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 5:	<i>Controlling conflict resolution.</i></h4><pre>SQLite version 2.8.2Enter ".help" for instructionssqlite&gt; -- Create table;sqlite&gt; create table emp(name text UNIQUE ON CONFLICT ROLLBACK);sqlite&gt; -- Populate;sqlite&gt; insert into emp values('Larry');sqlite&gt; insert into emp values('Moe');sqlite&gt; insert into emp values('Curly');sqlite&gt; -- generate a UNIQUE constraint violation;sqlite&gt; insert into emp values('Curly');SQL error: uniqueness constraint failedsqlite&gt; -- try to commit, won't work as previous resolution rolled back transaction.sqlite&gt; commit;SQL error: cannot commit - no transaction is activesqlite&gt; -- Set REPLACE at transaction scope.sqlite&gt; begin on conflict replace;sqlite&gt; -- try again: this time it will worksqlite&gt; insert into emp values('Curly');sqlite&gt; commit;sqlite&gt; -- Play around with statement level resolution;sqlite&gt; begin on conflict replace;sqlite&gt; -- ABORT will stop us, but leave transaction running.sqlite&gt; insert or ABORT into emp values('Curly');SQL error: uniqueness constraint failedsqlite&gt; -- FAIL will stop us, but leave transaction running.sqlite&gt; insert or FAIL into emp values('Curly');SQL error: uniqueness constraint failedsqlite&gt; -- IGNORE will silently fail, but leave transaction running.sqlite&gt; insert or IGNORE into emp values('Curly');sqlite&gt; -- default transaction scope is REPLACE, will push it through.sqlite&gt; insert into emp values('Curly');sqlite&gt; commit;sqlite&gt;</body></html>