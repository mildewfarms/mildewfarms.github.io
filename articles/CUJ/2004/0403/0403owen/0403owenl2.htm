<html><head><title>March 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 2:	<i>C API example.</i></h4><pre>#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;sqlite.h&gt;typedef struct sqlite_vm sqlite_vm;int main(){   const char* db_name = "db";   sqlite *db; /* The database handle */   char *sql = "select projectname_full as name, rating, license "               "from project order by rating desc limit 10";   const char *tail; /* Points to next SQL statement to process, if any. */   char *err_msg; /* Last error message, if any. */   sqlite_vm *pvm; /* Virtual machine for executing query. */   db = sqlite_open(db_name, 0, &amp;err_msg);   if(db==0)   {      fprintf(stderr, "Can't open database: %s\n", err_msg);      exit(1);   }   /* Compile SQL, allocate a virtual machine for processing. */   int ret = sqlite_compile(db,sql,&amp;tail,&amp;pvm,&amp;err_msg);   if(ret != SQLITE_OK)   {      fprintf(stderr, "Compile failed: %s\n", err_msg);      sqlite_freemem(err_msg);      exit(1);   }   int i, ncols;   const char** fields;   const char** col_defs;   ret = sqlite_step(pvm, &amp;ncols, &amp;fields, &amp;col_defs);   /* Print Column Names */   printf("%35s %5s %40s\n\n", col_defs[0], col_defs[1], col_defs[2]);   /* Print Column Datatypes */   printf("%35s %5s %40s\n\n", col_defs[3], col_defs[4], col_defs[5]);   /* Print Result Set */   while(ret == SQLITE_ROW)   {      printf("%35s %5s %40s\n", fields[0], fields[1], fields[2]);      ret = sqlite_step(pvm, &amp;ncols, &amp;fields, &amp;col_defs);   }   ret = sqlite_finalize(pvm, &amp;err_msg);   if(ret != SQLITE_OK)   {      fprintf(stderr, "Finalize failed: %s\n", err_msg);      sqlite_freemem(err_msg);      exit(1);   }   sqlite_close(db);}</body></html>