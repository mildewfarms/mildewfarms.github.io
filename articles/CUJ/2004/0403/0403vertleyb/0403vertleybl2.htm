<html><head><title>March 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 2:	run_for_each.</h4><pre>template &lt;class List, class Func&gt; class for_each_type;template &lt;class List_, class Func_&gt; class for_each_type_{  static void run_helper_(    Func_ f, void(Func_::*)(typename List_::head*))  {    f((typename List_::head*)0);    for_each_type&lt;typename List_::tail, Func_&gt;::run(f);  }  static void run_helper_(    Func_ f, bool(Func_::*)(typename List_::head*))  {    if (f((typename List_::head*)0))      for_each_type&lt;typename List_::tail, Func_&gt;::run(f);  }  static void run(Func_ f)  {    run_helper_(f, &amp;Func_::operator());  }  friend class for_each_type&lt;List_, Func_&gt;;};template &lt;class List, class Func&gt; class for_each_type{  struct stop  {    static void run(Func) {}  };  typedef select&lt;    boost::is_same&lt;List, null_type&gt;::value, stop,    for_each_type_&lt;List, Func&gt; &gt;::result result_;public:  static void run(Func f)  {    result_::run(f);  }};template &lt;class List, class Func&gt;void run_for_each(Func f, List* = 0){  for_each_type&lt;List, Func&gt;::run(f);}</body></html>