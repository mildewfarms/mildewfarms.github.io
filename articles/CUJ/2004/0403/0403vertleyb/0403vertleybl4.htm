<html><head><title>March 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 4:	<i>Storing the predicate inside the selection object</i>.</h4><pre>template &lt;class Table, class Pred&gt;class selection_t;template &lt;class Table, class Pred&gt;class selection_iterator{public:  typedef std::bidirectional_iterator_tag iterator_category;  typedef typename selection_t&lt;Table,Pred&gt;::value_type    value_type;  typedef typename selection_t&lt;Table,Pred&gt;::arg::const_iterator    arg_iterator;  typedef selection_t&lt;Table,Pred&gt; relation_type;  ...  selection_iterator(arg_iterator itr, const relation_type* rel)    : itr_(itr), relation_(rel) {}  selection_iterator operator++()  {    ++itr_;    move_to_next();    return *this;  }  selection_iterator::value_type operator*() const  {    return *itr_;  }private:  void move_to_next()  {    while (itr_ != relation_-&gt;arg_.end()      &amp;&amp; !(relation_-&gt;pred_)(*itr_))    ++itr_;  }private:  arg_iterator itr_;  const relation_type* relation_;};template &lt;class Table, class Pred&gt;class selection_t{  friend class selection_iterator&lt;Table,Pred&gt;;public:  typedef typename Table::field_list field_list;  typedef typename Table::sort_list sort_list;  typedef typename Table::value_type value_type;  typedef selection_iterator&lt;Table,Pred&gt; const_iterator;  typedef Table arg;  enum {is_distinct = arg::is_distinct};  selection_t(const arg&amp; t, const Pred P) : arg_(t), pred_(p) {}  const_iterator begin() const  {    const_iterator i(arg_.begin(), this);    i.move_to_next();    return i;  }  const_iterator end() const  {    return const_iterator(arg_.end(), this);  }  ...private:  const arg* arg_;  Pred pred_;};template &lt;class Arg, class Pred&gt;selection_t&lt;Arg, Pred&gt; selection(const Arg&amp; t, Pred p){  return selection_t&lt;Arg, Pred&gt;(t, p);}</body></html>