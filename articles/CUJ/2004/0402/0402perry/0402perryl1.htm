<html><head><title>February 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 1:	XMLInterpreter <i>implements the</i> DocumentHandler <i>interface.</i></h4><pre>class XMLInterpreter : private DocumentHandler{private:   // The document handler.   IXMLDocumentHandler *m_documentHandler;   // A stack of element handlers.   std::stack&lt; IXMLElementHandler * &gt; m_elementHandlers;   /* ... */public:   XMLInterpreter( IXMLDocumentHandler *documentHandler );   void parse( const char *const systemID );private:   // DocumentHandler implementation.   void  startElement (const XMLCh *const name, AttributeList &amp;attrs);   void  endElement (const XMLCh *const name);   void  characters (const XMLCh *const chars, const unsigned int length);   /* ... */};XMLInterpreter::XMLInterpreter( IXMLDocumentHandler *documentHandler ) :   m_documentHandler( documentHandler ) /* ... */{}void XMLInterpreter::parse( const char *const systemID ){   // Create a SAX parser, and parse the document.   SAXParser parser;   parser.setDocumentHandler( this );   parser.parse( systemID );}void XMLInterpreter::startElement (const XMLCh *const name, AttributeList &amp;attrs){   // If we are parsing an element, use its handler.   // Otherwise, use the documents handler itself.   IXMLElementContainerHandler *top;   if ( !m_elementHandlers.empty() )      top = m_elementHandlers.top();   else      top = m_documentHandler;   // Obtain the element handler of the new element from the current scope.   IXMLElementHandler *newElement = top-&gt;child( name );   m_elementHandlers.push( newElement );   // Notify the element handler of the start of the element.   newElement-&gt;start( attrs );}void XMLInterpreter::endElement (const XMLCh *const name){   // Notify the top element handler of the end of the element, then   // pop it, revealing the handler of it's container.   m_elementHandlers.top()-&gt;end();   m_elementHandlers.pop();}void XMLInterpreter::characters (const XMLCh *const chars,                                                const unsigned int length){   // Notify the top element handler of the characters.   m_elementHandlers.top()-&gt;characters( chars, length );}</body></html>