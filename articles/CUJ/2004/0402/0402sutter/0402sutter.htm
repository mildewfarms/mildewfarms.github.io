<html><head><title>February 04:  Virtually Misbehavin'  C++ implicit overriding at work</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><p><i>C/C++ Users Journal </i> February 2004</p><h1> Virtually Misbehavin'</h1><h2>C++ implicit overriding at work</h2><h3>By Jim Hyslop and Herb Sutter</h3><p>There are days when the reality is nearly as bad as the nightmare. I was debugging some new code. Everything seemed pretty normal until a messenger alert signaled in the corner of my screen. At first I ignored it, but it seemed to become more insistent, and then I saw it was coming from Bob. The last thing I needed was an interruption from that particular direction, so I continued to ignore the alert. As I stepped through my code, the messenger alert turned different colors, and then it changed into a little hand that grew, grew, and began to reach out of my monitor and started typing on my keyboard, interfering with the code I was trying to write. </p><p>I awoke from the dream still trembling. Fumbling for the light, I resolved to cut back on the late-night debugging sessions, or the late-night pizza, or both...</p><p>Much later, when I got to work, I was only slightly fuzzy, and I felt better still after the second 20-ounce latte. I was almost human when, halfway through the morning, Wendy brought Kerry over.</p><p>"Hey, pardner," Wendy announced.</p><p>I stopped what I was doing and turned. "Oh, hi, Wendy. Hi, Kerry. What's up?"</p><p>Kerry seemed reluctant to speak up, so Wendy prodded him. "Tell him."</p><p>"I &#151; I think my compiler has a gremlin."</p><p>My eyebrows twitched. "Do tell." Wendy smiled and watched.</p><p>"Here, let me show you my code," Kerry said. He pulled up a source file, which when simplified looked like this:</p><pre><b>#include "a.h"// ...class B : public A {public:  void f() { cout &lt;&lt; "B::f() "; }  // ...};class C : public B {public:  void f() { cout &lt;&lt; "C::f() "; }  // ...};</b></pre><p>"Okay," I said after glancing at it. "Where's the gremlin?"</p><p>"Here in the unit tests," said Kerry, and pulled up a small test harness. Simplified, it looked like this:</p><pre></b><b>void Test( B&amp; b ) {  b.f();}int main() {  B b;  Test( b );  C c;  Test( c );}</b></pre><p>Kerry explained: "Until yesterday, the output of this test was </b><b>B::f() B::f()</b>, which is what I expected. It's worked that way for the past year. Then, when I came into work this morning, the unit test was failing and I had an angry note on my desk..."</p><p>"From <i>Bahb</i>?" I asked, languidly drawling out Bob's only vowel.</p><p>Wendy interjected: "Yeah, <i>Bahb</i> scolded our little intern pretty soundly."</p><p>"Any ideas?" I asked.</p><p>Wendy shook her head. "I haven't noticed anything. Classes <b>B</b> and <b>C</b> haven't changed, the unit tests haven't changed, but...oh, Kerry, what's the output now?"</p><p>But I had already been rerunning the unit test, and just as Wendy asked the question the answer appeared on the screen: <b>B::f() C::f()</b></p><p>"Funny," Wendy said.</p><p>"Hmm," I added.</p><p>"Gremlins in the compiler," Kerry said nervously.</p><p>"Well, it looks almost like <b>f</b> is suddenly behaving as though it were virtual," I pointed out.</p><p>"But it's not," Kerry said.</p><p>"Never was..." Wendy nearly said something more, but hesitated.</p><p>"Guru, what do you think?" I asked.</p><p>The Guru, who I had correctly guessed was even then silently sliding up behind us, closed her tome gently without a <i>snap</i>. "Greetings, my children. You have noticed the problem, I see."</p><p>"Almost. We saw the regression failure and we were just trying to figure out what the problem is."</p><p>"No," she disagreed kindly. "You have noticed the problem already. The function <b>f</b> is clearly not virtual...except when it is." And with a smile, she drifted away.</p><p>"Gremlins," Kerry repeated firmly.</p><p>"Hold on now, let's take a look at something here..." I looked in the source-control system and found the file a.h &#151; and we immediately discovered that it had been updated and checked-in late last night.</p><p>By Bob.</p><p>We groaned as I pulled up the file a.h:</p><pre><b>class A {public:  // ...private:  virtual void f();};</b></pre><p>"Bob added that virtual function last night," I said, after checking the diffs. "Okay, Kerry, do you see what's going on?"</p><p>"<i>Bahb</i> broke the build!" Kerry said enthusiastically, getting into the spirit of things.</p><p>Wendy shook her head. "Can't pin this one entirely on the <i>Bahb</i>inator, pardner."</p><p>"No," I sighed. "We can't. Bob's not actually the problem here. Nuts. Do you see the issue, Kerry?"</p><p>Kerry looked at it some more, then realized: "Is it because now there is a virtual function with the same name in the base class <b>A</b>, the function in class <b>B</b> implicitly overrides it and also implicitly becomes virtual?"</p><p>"Very good," Wendy agreed. "Specifically, <b>A</b> now has a function with the same name and signature. That's C++ implicit overriding at work."</p><p>"What's worse," I commiserated, "is that the virtual function in the base class is also private, but in C++ that doesn't matter. In many other object-oriented languages, a derived class can only override a virtual function in a base class if it has access to call the base version. In C++, the issues of virtualness and accessibility are completely separate."</p><p>We looked at the screen uncomfortably.</p><p>"Um," Kerry started.</p><p>"Yes?"</p><p>"Um, how do I fix it?"</p><p>We looked at the screen some more.</p><p>Finally I said: "Ask Bob really politely if he could change the name of his private virtual function. He just added it, so there probably isn't a big user community yet and it's probably less work than changing yours. But if he doesn't...you'll have to change your function's names or signatures. In <b>B</b> and in <b>C</b>."</p><p>"There's no other way?"</p><p>I shook my head. Wendy shrugged and started to leave. Kerry hesitated, then followed her, muttering, "I knew it was a gremlin" under his breath.</p><p>As they wandered away, I remembered my dream of the night before. For Kerry, Bob's fingers really had reached out of the screen and rewritten Kerry's code, with a little help from C++. There are days when the reality is nearly as bad as the dream. </p><hr><I><b>Herb Sutter</b> (<a href="http://www.gotw.ca/">http://www.gotw.ca/</a>) is convener of the ISO C++ Standards committee, author of </i>Exceptional C++<i> and </i>More Exceptional C++<i>, and Visual C++ architect for Microsoft. <b>Jim Hyslop</b> is a senior software designer for Leitch Technology International. He can be reached at <a href="mailto:jhyslop@ieee.org">jhyslop@ieee.org</a>.</I><hr></body></html>