<html><head><title>February 04: Win32 Fibers</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h2>Win32 Fibers</h2><p>Fibers were introduced into the Win32 API to facilitate the porting of UNIX programs containing user-controlled threading models to Windows, thereby providing an intermediate porting stage prior to moving such programs over to the Win32 threading architecture. Once one is used to the Fiber API, it is remarkably simple to use, and can also be useful for Win32-native applications.</p><p>When incorporated into an application, fibers provide a simple, explicitly controlled lightweight threading model. Each fiber has its own stack and execution context, but unlike threads a fiber must call <b>SwitchToFiber()</b> to pass control to another fiber.</p><p>Fiber execution is commenced by turning a thread into a fiber using the <b>ConvertThreadToFiber()</b> function. What this actually means is that the system allocates and returns a fiber-management block (whose nature is opaque to the caller), including associating a caller-supplied 32-bit value given in the function call to the fiber. </p><p>Subsequent fibers are created by calling the <b>CreateFiber()</b> function (which also takes a 32-bit parameter and returns a pointer to an opaque fiber-management block). These fibers may then be destroyed by calling the <b>DeleteFiber()</b> function from another fiber or, if all the fibers are to be terminated, from within the fiber to be closed, since this ends the thread by calling <b>ExitThread()</b>.</p><a href="0402wilson.htm#rs3">Back to Article</a></body></html>