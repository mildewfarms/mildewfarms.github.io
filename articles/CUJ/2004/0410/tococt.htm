<HTML>
<HEAD>
<TITLE>October 2004</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">October 2004<BR>
                Volume 22 Number 10</FONT></H3>
               

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="0410theese/0410theese.html">State Space Searching</A></H4>
<p><b>David Theese</b><br>
<i>State space searches are used in everything from network routing to games. David implements a C++ library for performing state space searches.
</i></p>

<H4><A HREF="0410pirkin/0410pirkin.html">Calculations in Galois Fields</A></H4>
<p><b>Ilya Pirkin</b><br>
<i>Galois fields are the basis for many forward error correction schemes used in computer communications. Ilya uses C++ templates and overloaded operations to implement them.</i></p>

<H4><A HREF="0410fomitchev/0410fomitchev.html">Digital Signal Filtering in C</A></H4>
<p><b>Max I. Fomitchev</b><br>
<i>When developing numerical or signal-processing software, at some point, you have to choose between using off-the-shelf libraries or writing your own routines. Here's a generic set of routines that are both flexible and fast.</i></p>

<H4><A HREF="0410muresan/0410muresan.html">The FifoEmbed Library</A></H4>
<p><b>Dan Muresan</b><br>
<i>When programming device drivers, network stacks, and similar systems, you often need a queue and storage management. FifoEmbed is a library that provides facilities for thread-safe basic queues, packet queues, and FIFO allocators.</i></p>

<H4><A HREF="0410reher/0410reher.html">Policy-Based Design in the Real World</A></H4>
<p><b>Jan Reher</b><br>
<i>The policy-based design pattern is useful when you need to implement a set of related classes whose functionality varies along a number of independent dimensions.</i></p>

<H4><A HREF="0410wilson/0410wilson.html">Ranges: Concepts and Implementations</A></H4>
<p><b>Andrew Wilson and John Torjo</b><br>
<i>Ranges represent a bounded collection of elements that may be accessed in an incremental fashion. In the first installment of this two-part article, our authors examine this new concept, comparing it to iterators.</i></p>

<H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>

<H4><A HREF="0410mill/0410mill.html">Sutter's Mill</A></H4>
<p><b>Herb Sutter and Andrei Alexandrescu</b><br>
<i>Herb and Andrei present tried-and-true C++ Coding Standards from their new book of the same name.</i></p>

<H4><A HREF="0410koenig/0410koenig.html">C++ Made Easier</A></H4>
<p><b>Andrew Koenig and Barbara E. Moo</b><br> 
<i>Andrew and Barbara time some common program optimization techniques and find that the amount of computer time these optimizations save varies from one context and one implementation to another.</i></p>

<H4><A HREF="0410alexandrescu/0410alexandrescu.html">Generic &lt;Programming&gt;</A></H4>
<p><b>Andrei Alexandrescu</b><br> 
<i>Lock-free data structures guarantee the progress of at least one thread when executing mutlithreaded procedures, thereby helping you avoid deadlock.</i></p>

<H4><A HREF="0410sutter/0410sutter.html">Conversations</A></H4>
<p><b>Herb Sutter and Jim Hyslop</b><br> 
<i>In well-formed programs, classes can't declare a nested class to be a friend-but this might change in the Standard.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="0410edit/0410edit.html">Editor's Forum</A></H4>
<H4><A HREF="0410newprod/0410newprod.html">New Products</A></H4>

</blockquote>
</body>
</html>
