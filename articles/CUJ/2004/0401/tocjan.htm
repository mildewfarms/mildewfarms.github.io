<HTML>
<HEAD>
<TITLE>January 2004</TITLE></HEAD>     <BODY BACKGROUND="" BGCOLOR="#FFFFFF" TEXT="#000000">
          <BLOCKQUOTE> <IMG SRC="../logo.gif" ALT="{logo}" WIDTH="310" HEIGHT="100">
               
               <H3><FONT COLOR="#000080">January 2004<BR>
                Volume 22 Number 1</FONT></H3>
               

<H3><FONT COLOR="#FF0000">FEATURES</FONT></H3>

<H4><A HREF="0401tomson/0401tomson.htm">Mixed-Language Development & SWIG</A></H4>
<p><b>Phil Tomson</b><br>
<i>Phil uses SWIG to wrap C++ classes so that they are available from Ruby. In the process, he uncovers several benefits of doing mixed-language development with C++ and Ruby.</i></p>

<H4><A HREF="0401levy/0401levy.htm">Wrapping C with C++ in .NET</A></H4>
<p><b>George Levy</b><br>
<i>A common software requirement is for code written in one computer language to be used by software developed in a different computer language. George shows how existing C software can be wrapped in C++, thus making it more accessible from .NET languages such as C# and VB.NET.</i></p>

<H4><A HREF="0401weiguo/0401weiguo.htm">C++, Fortran, & Shared Libraries</A></H4>
<p><b>Dong Weiguo</b><br>
<i>Here's an approach to mixing C++ and Fortran for Linux and Windows by compiling Fortran functions separately into shared libraries, then explicitly calling them in C++.</i></p>

<H4><A HREF="0401yuan/0401yuan.htm">A C++ Producer-Consumer Concurrency Template Library</A></H4>
<p><b>Ted Yuan</b><br>
<i>Producer-consumer is a well-known C++ concurrency pattern that's been applied to applications ranging from scientific simulations to distributed parallel computing environments.</i></p>

<H4><A HREF="0401zhang/0401zhang.htm">Concurrent Access Control & C++</A></H4>
<p><b>Haifeng Li and Keshu Zhang</b><br>
<i>Our authors implement a monitor facility efficiently in only 50 simple lines&#151;and without any extensions to Standard C++.</i></p>

<H4><A HREF="0401qureshi/0401qureshi.htm">Policy-Driven Design & the Intel IPP Library</A></H4>
<p><b>Shehrzad Qureshi</b><br>
<i>Shehrzad turns to generic programming techniques when using Intel's Integrated Performance Primitives Library to build a C++-based signal-processing application.</i></p>

<H4><A HREF="0401taglienti/0401taglienti.htm">STL Member Function Adaptors</A></H4>
<p><b>Claudio Taglienti</b><br>
<i>Have you ever wished that STL member function adaptors like mem_fun or mem_fun_ref would like you invoke a method of a class of your choice?</i></p>

<H3><FONT COLOR="#FF0000">COLUMNS</FONT></H3>

<H4><A HREF="0401wilson/0401wilson.htm">Positive Integration</A></H4>
<p><b>Matthew Wilson</b><br>
<i>Matthew ushers in the first three mappings&#151;C++ wrapper classes, C++ STL, and C#&#151;to recls, his platform-independent library that provides recursive filesystem searching.</i></p>

<H4><A HREF="0401sutter/0401sutter.htm">Conversations</A></H4>
<p><b>Herb Sutter and Jim Hyslop</b><br> 
<i>The Guru tackles std::string, magic numbers, and constness in references.</i></p>

<H4><A HREF="0401woehr/0401woehr.htm">Programmer's Book Reviews</A></H4>
<p><b>Jack J. Woehr and Gregory V. Wilson</b><br> 
<i>This month we examine a bevy of books, including </I>Linux and the UNIX Philosophy, Automating UNIX and Linux Administration, Code Generation in Action,<I> and assorted bloopers and hacks.</i></p>

<H3><FONT COLOR="#FF0000">DEPARTMENTS</FONT></H3>

<H4><A HREF="0401edit/0401edit.htm">Editor's Forum</A></H4>
<H4><A HREF="0401newprod/0401newprod.htm">New Products</A></H4>

</blockquote>
</body>
</html>
