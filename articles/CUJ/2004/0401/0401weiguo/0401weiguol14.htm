<html><head><title>January 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 14:	 <i>ex5lnx.cpp, C++ file on Linux.</i></h4><pre>// ex5lnx.cpp  &#151;  Test file for calling Muller's method from an F77 dll#include &lt;iostream&gt;#include &lt;complex&gt;#include &lt;cmath&gt;#include &lt;dlfcn.h&gt;using namespace std;complex&lt;double&gt; myFunc(complex&lt;double&gt; &amp;x){    complex&lt;double&gt; temp;    temp = pow(x - complex&lt;double&gt;(1.0f, 0.0f),         complex&lt;double&gt; (10.0f, 0.0f));    return temp;}int main(){    void *hDll = dlopen("./muller.so", RTLD_NOW);    typedef complex&lt;double&gt; (*pFunc) (complex&lt;double&gt;&amp;);    typedef void (* LPFNDLLFUNC)(pFunc, double&amp;,         int&amp;, int&amp;, int&amp;, int&amp;, complex&lt;double&gt;*,int&amp;, int*,int&amp;);    LPFNDLLFUNC lpFunc = NULL;    lpFunc = (LPFNDLLFUNC)dlsym(hDll, "muller_");    pFunc pf = (pFunc) myFunc;    double eps = 1.0e-10;    int nsig, kn, nguess, n, itmax, ier;    nsig = 20;    kn=0;    nguess = 0;    n = 10;    itmax = 2000;    ier = 0;    int infer[10] = {0};    complex&lt;double&gt; *x;    x = new complex&lt;double&gt; [n];    int i;    for (i=0; i&lt;n; i++)    {        x[i] = complex&lt;double&gt; (0.0f, 0.0f);    }    lpFunc(pf, eps, nsig, kn, nguess, n, x, itmax, infer, ier);    for (i=0; i&lt;n; i++)    {        std::cout &lt;&lt; "x[" &lt;&lt; i &lt;&lt; "] = " &lt;&lt;  x[i]                  &lt;&lt; ", iteration no. is "                   &lt;&lt; infer[i] &lt;&lt; std::endl;    }    delete [] x;    dlclose(hDll);    return 0;}</body></html>