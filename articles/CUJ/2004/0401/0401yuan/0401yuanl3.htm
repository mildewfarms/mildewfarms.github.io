<html><head><title>January 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 3:	NetworkService, <i>a generic network server.</i></h4><pre>struct NetworkService{  ...  // sub-classes overwrite this method and close socket   virtual void ServiceHandler(int socket) = 0;  virtual bool stop() { return false; }   void operator()()  {    int server = createServerSocket(      sourcePort, lengthWaitList+1);    if(server &lt; 0)    {      std::cout &lt;&lt; "Can't bind to port "         &lt;&lt; sourcePort &lt;&lt; std::endl;      return;    }    RunPool&lt;SocketHandler&gt; pool(numThreads);    ThreadPool&lt;SocketHandler&gt; thpool(pool,       numThreads &gt; 256 ? 256 : numThreads);    // start the pool...    boost::thread thrd(thpool);    std::cout &lt;&lt; "Ready... service at port "       &lt;&lt; sourcePort &lt;&lt; std::endl;    while (!stop())    {      struct   sockaddr_in pin;      int source = acceptClientSocket(server, pin);      if(source &lt; 0) continue;      // put handler on the heap so we can delete this later...      SocketHandler * linkage = new SocketHandler(*this, source);      thpool.execute(linkage);    }    thrd.join();    CloseConnection(server);      std::cout &lt;&lt; "Shutting down network service "       &lt;&lt; serviceId &lt;&lt; " at port " &lt;&lt; sourcePort       &lt;&lt; std::endl;   }  ...};void SocketHandler::operator()() {  try   {    ns_.ServiceHandler(client_);  } catch (...) {}  delete this;}</body></html>