<html><head><title>May 04: Enumerations</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><p><i>C/C++ Users Journal </i> May 2004</p><h1>Enumerations</h1><h2>As Stroustrup himself once wrote:  "C enumerations constitute a curiously  half-baked concept." And C++ enumerations  are only slightly better...</h2><h3>By Herb Sutter and Jim Hyslop</h3><p>"Blech!" At least, I think that's the sound Wendy made. There was also a small gurgle. I decided I could spare a few moments, pushed back from my keyboard, and walked over to her cubicle. "Wassup, pardner?" I asked.</p><p>She muttered something I didn't quite catch, though I thought "stinkin' <i>Bahb</i>" was part of it. Then, more clearly, she added: "But there just can't be anything wrong with this!"</p><p>"Let me see." She pointed at her editor window, where the cursor was on a line that read:</p><pre>// check state of traffic lightif( lampColor == Green ) {   </pre><p>"I'm working on one of the new features in the traffic simulations," Wendy explained. "I was actually working on something else, but the program started misbehaving, and I narrowed it down to this line here. I don't get it &#151; this line was working fine, and now suddenly it still compiles but the condition is never true any more. I never go into the body of the </b><b>if</b> statement even when <b>lampColor</b> is definitely <b>Green</b>."</p><p>"You stepped through it in the debugger?"</p><p>"Yep."</p><p>"What's the declaration of <b>lampColor</b>?" I asked.</p><p>"It's getting passed in from another module." She scrolled up, and I saw that it was a parameter to the function:</p><pre>void f( int lampColor, /*...*/ ) {</pre><p>"Okay, then. What's </b><b>Green</b>?"</p><p>She did a quick search, but that was the only occurrence of <b>Green</b> in the file. "It's just an enumerator, getting pulled in from a header. It's legal to compare to an <b>int</b>."</p><p>"Sure," I agreed. "It compiles after all, it just does the wrong thing when you run it. Say, did you check the history of the file?"</p><p>"No, why?"</p><p>"Who edited it last?"</p><p>Wendy smacked herself in the forehead. She did it pretty hard; I wondered if it hurt. "Arrgh!" she arrghed, scrolling to that part of the file. "That's it! It must have been <i>Bahb</i>! Of all the stinkin' toady misbegotten boorish insensitive churlish ignorant..." She continued at impressive length, and she was still going strong on the long trail of adjectives when the answer appeared and we saw:</p><pre>// $Version 1.45$: $Author: KerryK$</pre><p>We both fell silent.</p><p>"It wasn't Bob," I offered helpfully.</p><p>"Well, I can see it wasn't </b><i>Bahb</i>," Wendy retorted, waving at the monitor.</p><p>"Well, what's the <b>diff</b>?"</p><p>Wendy typed a few commands, and then discovered that Kerry's change included the following replacement:</p><pre>--- #include &lt;lightstate.h&gt;+++ #include &lt;colors.h&gt;</pre><p>A low growl began deep in Wendy's throat. I watched with interest as she pulled up the two headers and finally compared two declarations side by side:</p><pre>// file lightstate.h   // file colors.h  //		               //                     enum LightState {      enum Colors {           Red,                  Red,                   Amber,                Green,                 Green                 Blue,                };                      Purple,                                      Violet,                                      // ...                                     };                     </pre><p>Wendy's growl grew in intensity and deepened. Then it stopped, and she was quiet for a while.</p><p>Finally, Wendy got up and started walking over to Kerry's cubicle. I followed, trying to hide my smile. During the short walk, the Guru silently appeared and joined us, this time startling no one; I suspected that she was also suppressing a smile, judging from the glint in her eye.</p><p>Kerry was working at his desk, but looked up at the three silent faces staring down at him.</p><p>"Hello, Kerry," Wendy said sweetly. The Guru and I only watched the exchange with interest.</p><p>"Hi, uh, Wendy," our little intern replied.</p><p>"You did some work on the traffic system, huh?"</p><p>"Yes...?"</p><p>"Some nice additions there. Nice job."</p><p>"Uh, thanks." Kerry was still glancing from one of us to the other, but we gave him no sign.</p><p>"Your additions worked fine, then?" Wendy continued, still sweetly.</p><p>"Yeah, I, uh, tried my new unit tests and everything. They worked fine."</p><p>"And all the other unit tests, they all passed too?"</p><p>"I, uh, did a sanity check with some of them, yes. Everything seemed to be okay."</p><p>"And that was enough for you to do a check-in, you dog?!" She started to step forward, but the Guru and I were each holding one of her arms, and easily held her back, smiling calmly. Wendy took the hint, and we let her go again. She straightened her outfit. "Er, sorry, Kerry. Let me try that again. What possessed you to substitute one of the header files?"</p><p>"Oh, that," Kerry responded, a light beginning to dawn. "Well, for the new functionality I added, I needed the </b><b>Colors</b> enumeration, so I included that file. But then I was getting compile errors because it conflicted with some other <b>enum</b>..."</p><p>"<b>LightState</b>?" Wendy supplied helpfully.</p><p>"Uh, yeah, <b>LightState</b>, that was it. The two couldn't coexist, so I commented out the <b>LightState</b> header to see if it was being used. Everything compiled fine, and I ran all my new tests and a few of the old ones, and those ran fine, too. So, since obviously <b>LightState</b> wasn't needed, I left it that way and checked it all back in."</p><p>Wendy looked at me. "Dish duty?"</p><p>I nodded. "Seems fair. One week?" I looked at the Guru.</p><p>"One week," the Guru agreed, and looked at Kerry. "My child, you have been tempted by the dark path. We must correct you. Dish duty for one week shall be your punishment."</p><p>"Okay, but what did I do wrong?"</p><p>Wendy pulled up the two headers and pointed at the difference. "Both <b>enum</b>s have an enumerator named <b>Green</b>, but they have different values; <b>LightState</b>'s <b>Green</b> has the value <b>2</b>, but <b>Colors</b>' <b>Green</b> has the value <b>1</b>. With me so far?"</p><p>"Uh, yes," Kerry said. "Because their values aren't specified, they default to <b>0</b>, <b>1</b>, <b>2</b>, and on. Right?"</p><p>"Right. Now, do you see why the two <b>Green</b>s conflicted when you had both headers included?"</p><p>"No, I don't understand that. Aren't the <b>enum</b>s different scopes?"</p><p>"Nope," I piped up, taking my turn. "More's the pity. An <b>enum </b>doesn't introduce a new scope; the enumerators are all in the same scope as the <b>enum</b> itself. So the two <b>enum</b>s couldn't coexist in the same scope."</p><p>"But when I commented out the <b>LightState</b> definition, everything seemed to work...?" Kerry trailed off, thinking.</p><p>"'Seemed to,' right," Wendy said, mellowing a little and taking some pity on the poor intern. "As it turns out, the <b>Amber</b> enumerator that was unique to <b>LightState</b> wasn't being used in this file, so when you commented it out, the compile still succeeded. Only it used the wrong <b>Green</b>, of course. Maybe it used the wrong <b>Red</b> somewhere, too; I didn't check to see if <b>Red</b> was already being used. There may be another breaking bug we didn't discover yet. Fortunately, <b>Red</b>'s value is the same in both places &#151; "</p><p>"Or maybe unfortunately," I put in an oar, "because it'll just mask a logical error and it'll break later if the two <b>Red</b>s diverge."</p><p>"Oh." Kerry appeared chastened and quite glum.</p><p>"All right, okay, I guess this isn't so much your fault &#151; though you should still have run all the tests," Wendy added pointedly. "But accidents will happen, because it's true that <b>enum</b>s aren't strongly type-safe."</p><p>"In this and other ways," the Guru agreed, finally engaging. "As the Father of All Gurus, the Great Prophet Stroustrup, once penned: 'C enumerations constitute a curiously half-baked concept.'"[1]</p><p>"C <b>enum</b>s are just <b>int</b>s in drag," I quipped. "C++ <b>enum</b>s are still <b>int</b>s in drag, but with better makeup."</p><p>Kerry looked confused.</p><p>"C <b>enum</b>s are essentially <b>int</b>s," the Guru amplified, "and you can freely assign between <b>enum</b>s and <b>int</b>s, and between unrelated <b>enum</b>s. Consider this parable, which is perfectly legal C:" [2]</p><pre>// Example 1: Compiled as C//enum LightState { Red, Amber, Green };enum Other { Foo = 42, Bar, Baz };int main() {  enum Other o = Foo;  enum LightState l = Red;  o = Red;         // ok in C: but very questionable  l = Foo;         // ok in C: but very questionable  o = l;           // ok in C: but very questionable  l = 99;          // ok in C: but very questionable  if ( o == l ) ;  // ok in C: but very questionable}</pre><p>"The last five lines are deplorably type-unsafe," she said sadly.</p><p>"Why?" Kerry asked gamely.</p><p>"Oh, where to begin? They assign values that the enumerations have no enumerators to represent and probably were never intended to hold, they assign between unrelated enumerations, they compare unrelated enumerations, and the worst part of it is..." she trailed off.</p><p>Kerry held out for a few seconds, then broke down and offered the straight line she was waiting for: "What's the worst part?"</p><p>The Guru smiled, and finished: "The worst part of it is that only some of the questionable writings are errors in C++." [3] She amended the example:</p><pre>// Example 1: Compiled as C++//enum LightState { Red, Amber, Green };enum Other { Foo = 42, Bar, Baz };int main() {  enum Other o = Foo;  enum LightState l = Red;  o = Red;        // error in C++  l = Foo;        // error in C++  o = l;          // error in C++  l = 99;         // error in C++  if ( o == l ) ; // still ok in C++: but still very questionable}</pre><p>"And," the Guru added, "you still cannot declare </b><b>Colors</b> and <b>LightState</b> in the same scope because the names of their enumerators still are in the enclosing scope."</p><p>"If I might have permission to restate what you just said...?" Kerry asked sheepishly. The Guru nodded, smiling. "Then I would say: C++'s <b>enum</b>s do have improvements over C's, but even C++ <b>enum</b>s still have type-safety holes you could drive a Mack truck through."</p><p>We all smiled. Even Wendy had calmed right back down.</p><p>"Indeed," said the Guru. "Even in C++, <b>enum</b> values have an implicit conversion to <b>int</b>, so you can compare unrelated enumerations. Even in C++, <b>enum</b>s do not introduce a real scope, so their enumerators conflict. Even in C++, the programmer cannot specify the exact underlying type of the <b>enum</b>, and so there can be unpredictable behavior, such as in this writing:" [4]</p><pre>// Example 2//enum E { E1 = 1, E2 = 2, Ebig = 0xFFFFFFF0U };    // note: U suffixint main() {  cout	&lt;&lt; sizeof( E ) &lt;&lt; endl;  cout	&lt;&lt; "Ebig = " &lt;&lt; Ebig &lt;&lt; endl;  cout	&lt;&lt; "E1 ? -1 =\t"	    &lt;&lt; ( E1 &lt; -1 ? "less" : E1 &gt; -1 ? "greater" : "equal" )	    &lt;&lt; endl;  cout  &lt;&lt; "Ebig ? -1 =\t"	    &lt;&lt; ( Ebig &lt; -1 ? "less" : Ebig &gt; -1 ? "greater" : "equal" )	    &lt;&lt; endl;}</pre><p>"What output should this program produce? Do not answer &#151; merely try this on some of the compilers that we use," she said, seeming amused and quite satisfied with herself, "and see what results you get." (We later did, on a platform where </b><b>sizeof(E)</b> was always 4, and observed the results in <A HREF="0405hyslopt1.htm" target="_BLANK">Table 1</A>.)</p><p>"But how should we fix the file that had the problem?" Wendy asked. "We can't have both <b>enum</b>s in there because <b>Red</b> and <b>Green</b> conflict."</p><p>"You must refactor it in two files," the Guru said, "or else change one of the <b>enum</b>s to make it more type-safe, but that would force you to update all users of the <b>enum</b>. If you choose to do that, you can write at minimum something like this..." She wrote:</p><pre>class Color {  enum Color_ { Red_, Green_, Blue_, Purple_, Violet_ };  Color_ value;public:  static const Color Red, Green, Blue, Purple, Violet;  explicit Color( Color&amp; other )         : value( other.value ) { }  bool operator&lt;( Color const&amp; other )        { return value &lt; other.value; }  bool operator==( Color const&amp; other )         { return value == other.value; }    // etc.  int ToInt() const     { return value; }};const Color Color::Red( Color::Red_ );const Color Color::Green( Color::Green_ );const Color Color::Blue( Color::Blue_ );const Color Color::Purple( Color::Purple_ );const Color Color::Violet( Color::Violet_ );</pre><p>"This is a true type-safe class: The conversion to </b><b>int</b> is now explicit with <b>ToInt()</b>, the enumerators are now scoped and must be referred to as <b>Color::Green</b>, <b>Color::Green</b> cannot be accidentally compared with a <b>LightState</b>, and so on."</p><p>"What was that term, the one Stroustrup used to describe enumerations?" Kerry asked.</p><p>We all smiled. "Half-baked," we said in unison, and the Guru added, "but C++'s are only partly better. But it may perhaps be, one day in our future, that C++ will have more strongly type-safe <b>enum</b>s, and the world will be a better place...and a safer one, even for programmers like Bob." [4,5]</p><h3>References</h3><p>[1]	B. Stroustrup. <i>The Design and Evolution of C++</i> (Addison-Wesley, 1994), p. 253.</p><p>[2]	ISO/IEC 9899:1999(E), Programming Languages &#151; C.</p><p>[3]	ISO/IEC 14882:2003(E), Programming Languages &#151; C++.</p><p>[4]	D. Miller and H. Sutter. "Strongly Typed Enums," ISO C++ committee paper ISO/IEC JTC1/SC22/WG21/N1579, February 2004.</p><p>[5]	D. Miller. "Improving Enumeration Types," ISO C++ committee paper ISO/IEC JTC1/SC22/WG21/N1513, September 2003. </p><hr><I><b>Herb Sutter</b> (<a href="http://www.gotw.ca/">http://www.gotw.ca/</a>) is convener of the ISO C++ Standards committee, author of <i>Exceptional C++ and More Exceptional C++</i>, and Visual C++ architect for Microsoft. <b>Jim Hyslop</b> is a senior software designer for Leitch Technology International. He can be reached at <a href="mailto:jhyslop@ieee.org">jhyslop@ieee.org</a>.</I><hr></body></html>