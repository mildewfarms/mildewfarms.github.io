<html><head><title>May 04: </title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h4>Listing 10:	<i>SOAPServer.cpp.</i></h4><pre>#include "SOAPServer.h"#include &lt;iostream.h&gt;#include &lt;waspc/common.h&gt;#include &lt;waspc/runtime/Runtime.h&gt;#include &lt;waspc/runtime/SuperFactory.h&gt;#include "DateTimeService.h"WASP_FACTORY_DEFINE (DateTimeService);using std::cout;using std::endl;int  startSOAPServer() {    WASP_FactoryDefinition serviceFactory[] = {        WASP_FACTORY_ENTRY (DateTimeService), WASP_FACTORY_END ()    };    WASP_Runtime::initialize();    WASP_SuperFactory::registerFactory (serviceFactory);    cout &lt;&lt; "Starting WASP Server on port 6070" &lt;&lt; endl;    try {        WASP_Runtime::load("config.xml", NULL);        WASP_Runtime::start(NULL);        return 0;    } catch (WASP_Exception *exc) {        char *trace=GET_TRACE (exc);        cout &lt;&lt; "Exception during startup: " &lt;&lt; exc-&gt;getCharMessage()                 &lt;&lt; endl;        cout &lt;&lt; "Stack trace follows: " &lt;&lt; endl &lt;&lt; trace &lt;&lt; endl;        delete[] trace;        delete exc;        return -1;    }}void stopSOAPServer() {    // Stop listening and kill services    WASP_Runtime::shutdown();    // Wait for all running services to complete    WASP_Runtime::waitForShutdown();    // release threads    WASP_Runtime::stop();    // release server resources    WASP_Runtime::destroy();    WASP_Runtime::terminate();    cout &lt;&lt; "\nSOAP Server shutdown\n";}</body></html>