<html><head><title>May 04: Parsing the XML Stream</title></head><body BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#330066" ALINK="#ff0000" TEXT="#000000"><!--Copyright &#169; C/C++ Users Journal--><h2>Parsing the XML Stream</h2><p>The XML parser can parse simple XML files and is not meant to deal with all the advanced features of XML (attributes, namespaces, and so on). It is built to parse files similar to <A HREF="0405shavite1.htm" target="_BLANK">Example 1</A>, but its main advantage is that the code is platform independent, based entirely on STL, and quite fast. The entire handling of the XML stream is done with two classes &#151; <b>Parser</b> and <b>Observer</b>. The parsing algorithm used by the <b>Parser</b> is:</p><ol><li>Find "&lt;" in the stream text.</p><li>Find the following "&gt;" in the stream text.</p><li>Extract name and attributes between the found "&lt;" and "&gt;".</p><li>Discard tags in the form of &lt;!-- comment&gt; or &lt;?xml some-text&gt;; go to Step 1.</p><li>Find the closing tag "&lt;/name&gt;"</p><li>Check if there is a tag between "&lt;name attribute&gt;" and "&lt;/name&gt;". If there is a tag, then we found a node, so the parser sends a <b>FoundNode</b> event to the <b>Observer</b>, parses the text in between the node tags, and eventually sends an <b>EndNode</b> event to the <b>Observer</b>. If not, we found an element, and the parser sends a <b>FoundNode</b> event to the observer.</p><li>Go on parsing to Step 1 until the end of the stream.</p></ol><p>This heuristic can fail for badly generated XML files, but works well with files generated by <b>ParamIO</b> (the goal is not to parse all the possible XML files). The <b>Observer </b>builds a representation of the XML stream in memory using the events sent by the <b>Parser</b>. The natural representation used is a tree. The tree is made of two kinds of objects: Elements that have a name, value, and attributes (stored as strings); and nodes that may have subnodes, elements, and an iterator pointing to their parent.</p><p>The tree is built using the events sent by the <b>Parser</b>. The <b>Observer</b> keeps a pointer to the current tree node and adds a node or an element according to the current event (<b>FoundNod</b>e or <b>FoundElement</b>). In case of an <b>EndNode</b> event, it moves the pointer to the parent of the current node. Once the tree is built, the methods <b>read</b> and <b>write</b> directly access and/or modify the tree. </p><p> &#151; A.B. and A.S.</p><a href="0405shavit.htm#rs2">Back to Article</a></body></html>