
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i08: OCSP with Apache mod_nss</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2007/aug2007.tar"><b class=codeListing>aug2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a3.gif" width="200" height="167" align="right">OCSP with Apache mod_nss</h1>

<p>Brian Allshouse
<p>In recent years, there has been a substantial push within the Department of Defense (DoD) and commercial industry to move to a single sign-on solution for their network infrastructures and Web-based assets. There has also been a large influx of products that support certificate-based logins. Unfortunately, most mainstream products are for Windows environments, and we haven't seen much attention given to requirements for Unix-based systems. This has created some interesting problems for Unix systems administrators in the ability to efficiently use certificates (e.g., smartcards, soft certs) to authenticate to Web sites. Because our focus is Unix, the Apache Web server is at the forefront of our discussion.
<p>Although Apache itself can be configured to handle both Certificate Revocation Lists (CRL) and certificate-based authentication, it does not have an automated mechanism for handling the CRLs. CRLs are an important part of the authentication process because they will inform us whether the certificate being presented as an authentication token is still valid (i.e., it hasn't expired or been revoked). Because of the revolving door of personnel that most large organizations face, CRLs for Web servers are becoming increasingly important as well as increasingly cumbersome to manage. A contributing factor to the job of managing these requirements is the fact that CRLs constantly must be updated, in many cases daily, and this normally requires some sort of manual intervention.
<p>In these cases, an Apache Web server that can support the Online Certificate Status Protocol (OCSP) can become an important asset to any organization using single sign-on. Thankfully, our friends at Red Hat created an Apache module called "mod_nss". Red Hat Linux and Solaris 9 systems running Apache 2.0.54 or greater can use "mod_nss" for enabling OCSP support for their Web sites. Extensive testing using Solaris 9 and Fedora Core 5 has proven that "mod_nss" is a direct mapping of Apache "mod_ssl" with the exception that it uses NSS calls instead of OpenSSL calls. When you bring it all together, you get added features such as OCSP, client-certificate authentication, CRLs, hardware accelerators, TLSv1, and SSLv3. Also, "mod_nss" is scheduled to be FIPS certified this year.
<p><b>Where to Start</b>
<p>You'll need to start by having Apache version 2.0.54 or greater installed on a Solaris 9 server (used for our install). The other prerequisites for building "mod_nss" are NSPR 4.6.4 or above and NSS 3.11.4 or above. OCSP will not work properly with earlier versions of NSS. The packages can be downloaded from:
<pre>
ftp://ftp.mozilla.org/pub/mozilla.org/nspr/releases/
</pre>

<p>or
<pre>
ftp://ftp.mozilla.org/pub/mozilla.org/security/nss/releases/
</pre>

<p>Be sure to download the pre-built binaries for Solaris 9, 32-bit, OPT release (unless you plan on compiling them from source). Once you've downloaded NSPR and NSS, unzip and untar them both in /usr/local/src.
<pre>
[root@web_server]# &gt; cd /usr/local/src
[root@web_server]# &gt; gunzip nspr-4.6.4.tar.gz
[root@web_server]# &gt; tar xvf nspr-4.6.4.tar
[root@web_server]# &gt; gunzip nss-3.11.4.tar.gz
[root@web_server]# &gt; tar xvf ns-3.11.4.tar
</pre>

<p>You will also need the NSS and NSPR directories in your library search path (LD_LIBRARY_PATH) to link and run the module. You can just append these paths to your existing LD_LIBRARY_PATH in your environment initialization file.
<pre>
[root@web_server]# &gt; echo "LD_LIBRARY_PATH=/usr/local/nss-
3.11.4/lib:/usr/local/nspr-4.6.4/lib" &gt;&gt; .kshrc
</pre>

<p>Next, download the "mod_nss" module from the Fedora Directory Server Project Web site, which is located here:
<pre>
http://directory.fedoraproject.org/sources/mod_nss-1.0.4.tar.gz
</pre>

<p>You can also get the latest CVS version by following the instructions found here:
<pre>
http://directory.fedoraproject.org/wiki/Mod_nss
</pre>

<p><b>Building Your Module</b>
<p>You will need to use the <b>--with-nspr</b> and <b>--with-nss</b> options with configure; these options require that the packages be installed in the same parent directory (e.g., /usr/local/nspr, /usr/local/nss). It will look in this parent directory for include/ and lib/, etc. if <b>--with-nss</b> or <b>--with-nspr</b> are not given; configure will look for the NSS and NSPR development packages and use these libraries if they are found.
<pre>
[root@web_server]# &gt;   gunzip mod_nss-1.0.4.tar.gz
[root@web_server]# &gt;   tar xvf mod_nss-1.0.4.tar
[root@web_server]# &gt;   cd mod_nss-1.0.4
[root@web_server]# &gt;  ./configure --with-apxs=/path/to/apxs/ \
  --with-nspr=/path/to/nspr/ --with-nss=/path/to/nss/
[root@web_server]# &gt;  gmake
[root@web_server]# &gt;  gmake install
</pre>

<p>Running gmake will create an example configuration file called "nss.conf". This is installed during the "make install" process. Also as part of that process, apxs is used to install the "mod_nss" module into Apache. The "mod_nss" shared library is also copied into the appropriate location and Apache's httpd.conf file is updated in order to load the module. The install also attempts to rename the existing ssl.conf file to ssl.conf.old. However, if needed, you can use both "nss.conf" and "ssl.conf" provided they are listening on different ports. The "nss.conf" file is copied into Apache's configuration directory; the install uses apxs to determine where the configuration directory is. You may also need to add the following to your httpd.conf file in order to load "nss.conf".

<pre>
Include conf/nss.conf
</pre>

<p>This will tell Apache to load your "mod_nss" configuration file. This file will also be where you add your VirtualServer(s) configuration for your SSL servers.
<p><b>Create Your Certificate Database and Import Your Certs</b>
<p>There are several tools provided with NSS, which can be very useful while working with your certificates and CRLs. Here is a brief description of them:
<blockquote>
<p><b>certutil</b> -- Used for generating certificate signing requests, installing certificates and managing certificate trust flags.
</p>
<p><b>crlutil</b> -- Used for managing certificate revocation lists (CRLs).
</p>
<p><b>modutil</b> -- Used for managing the PKCS11 modules database (secmod.db). Also used for adding modules and modifying the properties of existing modules.
</p>
<p><b>pk12util</b> -- Used for importing and exporting keys and certificates.
</p>
</blockquote>
<p>Here are examples of some commands that will be helpful in the configuration process. You'll need to have both the NSPR and the NSS libraries in your "LD_LIBRARY_PATH". Also keep in mind that if you don't use the <b>-d</b> option to specify your database, these commands will default to ~/.netscape.
<pre>
creating a database:              certutil -N -d /path/to/database
listing all your certs:           certutil -L -d /path/to/database
extract a server cert in ASCII:   certutil -L -n &lt;server-cert&gt; -d
    path/to/database -a
extract a cert & key in PKCS#12:  pk12util -o server.p12 -n 
    &lt;server-cert&gt; -d /path/to/database
import cert and key from PKCS#12: pk12util -i server.p12 -n 
    &lt;key-to-import&gt; -d /path/to/database
</pre>

<p>Start by creating a directory for your databases:
<pre>
[root@web_server]# &gt; mkdir /usr/local/apache/nss
</pre>

<p>Next, download the certificates for your root certificate authorities as well as the current certificate revocation lists. These are usually made available via a secure Web site, but you may need to contact your certificate authority if you don't have Web access to these files, particularly if you're using an outside entity as your CA.
<p>If you must download each individual CA cert and CRL separately, be aware that this can take a significant amount of time depending on how many users your organization has. You'll also need to download the cert from your OCSP responder system. Again, you may need to contact your CA to obtain this information.
<p>To import a CA certificate (this will also create your databases):
<pre>
[root@web_server]# &gt; certutil -A -n "myca" -t "CT,," \
  -d /usr/local/apache/nss -a -i /path/to/cacertificate
</pre>

<p>The above will need to be executed for each one of your CA certificates. The "myca" above is just a nickname for the CA that your certificate came from. You should give it a nickname that pertains to your CA (e.g., CA1).
<p>To import a CRL:
<pre>
[root@web_server]# &gt; crlutil -I -n "myca" -t 1 \
  -d /usr/local/apache/nss -i /path/to/crlfile
</pre>

<p>You will need to run this for each individual CRL, and you should provide meaningful nicknames as you did before.
<p>Import the CA cert for the OCSP responder:
<pre>
[root@web_server]# &gt; certutil -A -n "my_ocsp" -t "CT,," \
  -d /usr/local/apache/nss -a -i /path/to/cacertificate
</pre>

<p>Remember the nickname given to your OCSP responder certificate, because you'll need to add it to your "nss.conf" file later.
<p>Import your server's existing SSL Certificate:
<pre>
[root@web_server]# &gt; openssl pkcs12 -export -in \
  /path/to/certificate -inkey /path/to/keyfile -out \
  server.p12 -name "Server-Cert"

[root@web_server]# &gt; pk12util -i server.p12 -d /usr/local/apache/nss
</pre>

<p>Validate your server certificate:
<pre>
[root@web_server]# &gt; cd /usr/local/apache/nss
[root@web_server]# &gt; certutil -V -n Server-Cert -u V -d .
certutil: certificate is valid
</pre>

<p><b>Edit Your Config File</b>
<p>The following entries should be in your "nss.conf" file. For testing, I kept these outside my VirtualServer declaration.
<pre>
NSSCertificateDatabase /usr/local/apache/nss
NSSVerifyClient require
NSSOCSP on
NSSOCSPDefaultResponder on
NSSOCSPDefaultURL http://ocsp.example.org
NSSOCSPDefaultName my_ocsp
</pre>

<p>At the time of writing, NSSOCSPDefaultResponder, NSSOCSPDefaultURL, and NSSOCSPDefaultName are all undocumented features so they will not be in your example "nss.conf" file; you will need to add them manually.
<p><b>Test Your Installation</b>
<p>Begin by starting or restarting your Apache daemon.
<pre>
[root@web_server]# &gt; /etc/init.d/apache restart
</pre>

<p>To complete the process, you need to test your configuration by attempting to connect to your Web site using a client certificate issued by one of the CAs you have loaded into the certificate database on your Web server. If you experience connectivity problems, use your Apache logs for troubleshooting. Another good tool for troubleshooting is "tcpdump".
<p>The Fedora directory server site and the Mozilla site also provide documentation on "mod_nss" and NSS. Additionally, you may want to refer to the RFC for more information on OCSP.
<p><i>Brian Allshouse is a *NIX Systems Administrator, for Sabre Systems Inc. (<b>http://www.sabresystems.com</b>) a Department of Defense technology contractor. Brian has been supporting the Navy for the past 7 years and does freelance consulting in his spare time. Brian currently works and resides in the Southern Maryland area with his wife, Analisa, and sons, John and Dylan. He can be reached at: <b>bmallshouse@sabresystems.com</b> or <b>brian@brianallshouse.com</b>.</i>
</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
