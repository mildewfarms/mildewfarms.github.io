<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i03: Managing Log Files with Splunk</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><a href="../../../../source/SA/2007/mar2007.tar"><b class=codeListing>mar2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a6.gif" width="200" height="167" align="right">Managing Log Files with Splunk</h1>

Matthew Sacks
<p>

As a systems or network administrator, you probably have to manage and process log files for the various systems that are present on your networks. In a mid-sized data center, you may have 100-200 nodes all dumping large amounts of sometimes repetitive, useless data into abyss-like log files. The log file is the primary source of information and the main starting point when complying with various security standards, during incident handling, and when troubleshooting errors with systems, network devices, and applications.<p>

What if you could simply drop syslog, SNMP, and application log data over the network to a central server and process all the logs there? It certainly would simplify the process of scouring tedious log files in the context of location, but there needs to be something more to get a hold of these unwieldy logs that pervade every crevice of our networks. Database systems make things much more manageable when taking extremely large volumes of data and filtering a single term or event amongst all the log file chaos. One might relate it to finding a needle in a haystack. You may be used to going into each individual node and grepping or tailing log files until you find what you need, then performing the same procedure again to get the information that you need to troubleshoot a problem you are looking for. The process of searching through log files on hundreds of systems can be demanding and time consuming when equipped with only a vi editor and grep command.<p>

Logging data over SNMP can be cumbersome, especially when you are dealing with hundreds of machines in a datacenter. Also, it is difficult to secure the log data if you store the logs on a local machine; therefore, it is better to send the data to a centralized log server over syslog-udp or SNMP. It can take hours upon hours to format a MySQL database and build a GUI front end that can store SNMP and syslog data.<p>

<b>Splunk Server</b><p>

The free implementation of Splunk server allows you to dump all logs to a central server, pump the data into a database, and then search through it using common Boolean and regular expressions all wrapped up in a pretty Ajax user interface. I came across this product while setting out to design my own MySQL database where syslog-ng would capture network syslog dumps and insert them into my database. The task was cumbersome, to say the least, and let's just say that time doesn't come in abundance in our line of work.<p>

<b>System Requirements</b><p>

To get the free implementation of Splunk server, go to <b>splunk.com/download</b> and download Splunk for your distribution. Splunk is supported on FreeBSD, Linux 2.4+ kernel, OS X Intel, OS X PPC, Solaris x86, and Solaris Sparc. In this article, I will cover installation on Red Hat Enterprise Linux 3, but you can use any of the above versions that you like. Please do not get Splunk free confused with the professional edition. It is free, but you should check <b>splunk.com</b> for more information about licensing and the differences between the free and professional versions.
<p>

Splunk recommends that you use a dual-processor server with 2.8 GHz clock speed and 5 GB of memory, and to allow for as much disk space as the raw data you are processing. Personally, I recommend that you use the highest-end server that you can afford, but depending on how much data you are processing, your hardware requirements will vary. The general rule here is that more is better, and when cost is not a factor, get the beefiest machine you can. Depending on how much data you are processing and how your Splunk server is configured, you should be able to get by on a single dual-core Intel processor with 2 GB of memory for a small implementation.<p>

<b>Installation</b><p>

The installation of Splunk is very straightforward. In this example, we will do an rpm installation on a Red Hat ES3 Linux server.<p>

Download Splunk installation for your distribution. The gzip archive will install on all versions of Linux. Read the instructions at <b>http://www.splunk.com/doc/installation</b> for installing using a tarball or Debian package:
<p>

<pre>
rpm -i --force --prefix=/opt/splunk2.1 splunk-2.1-0.i386.rpm
</pre>

Set the $SPLUNK_HOME environment variable in your .bash_profile, shell profile, or /etc/profile directory. I use bash shell, so I will add the $SPLUNK_HOME environment variable in my .bash_profile file.<p>

 <ul>
<li> Type <b>SPLUNK_HOME=/opt/splunk2.1</b> at the command prompt to set the environment variable.
<li> Type <b>export SPLUNK_HOME</b> to export the environment variable.
<li> Type <b>$SPLUNK_HOME/bin/splunk start</b> to fire up the Splunk daemon and Web server.
 </ul>

Now you should have a basic implementation of the free version of Splunk server running. You can test the installation by pointing your Web browser to <b>http://your-machine-ip:8000</b> (see Figure 1).
<p>

<b>Splunk Data Input</b><p>

Splunk has a number of ways in which it can index data. To index and mine logs into the database over the network, we must configure the servers to export the logs over NFS, but there are endless options for transmitting the data over the network into Splunk. You can configure NFS over SSL for enhanced security, but it is beyond the scope of this article and will impede performance. I will assume that NFS exports will be in a secure subnet.<p>

The amount of data transported over NFS is minimal, even when logging 15 different log files over NFS, but if you were to log Apache access logs on a busy Web server over NFS, you may experience some network latency and create unnecessary congestion on your network, so be careful when logging large volumes of data over the network.<p>

Network traffic should be considered, but how much data should be transferred and the appropriate network configurations for the amount of data you want to transfer will vary depending on the amount of data being indexed and the capabilities of your network. You should be fine transporting your logs over NFS on your production network, assuming it is not already congested.<p>

<b>Configuring Splunk to Accept Remote Syslog Data</b><p>

To set up a data input:<p>

<ul><li> Point your Web browser to <b>http://localhost:8000</b>.
<li> Click on the Admin Tab in the top left-hand corner of the Web interface.
<li> Click on the Data Inputs Tab.</ul>

Most network devices such as router, switches, and firewalls are configurable to log to Splunk over syslog, but you will need to consult the vendor's documentation to find out how to configure logging for these respective devices and which remote logging methods your device supports. In general, you will only be required to define a host to receive the syslog messages. To start processing log data, we will need to generate data to be processed by Splunk<p>

You can configure the default syslog daemon to log to a remote host. The Linux /var/log/messages file contains most of the syslog data produced by the host, including remote logins, which is critical when doing an audit trail analysis after an intrusion or troubleshooting other various systems-related problems.<p>

Edit your syslog to a remote host by editing the following line. Your /etc/syslog.conf file, which is used to configure syslog processing should look like the following:<p>

<pre>
*.info;mail.none;news.none;authpriv.none;cron.none  /var/log/messages
</pre>

Modify it so that it looks like this:<p>

<pre>
*.info;mail.none;news.none;authpriv.none;cron.none   @Splunk-server
</pre>

Splunk-server should be the hostname or IP address of your Splunk server. This will allow you to forward syslog messages to a remote host and, in this case, your Splunk server. Now any attacks on a given host are logged in a remote location, unbeknownst to a potential attacker, or while troubleshooting systems problems on a machine that is soon to fail.<p>

Next, define a data input processor in your Splunk server for receiving this syslog data by pointing your browser to and logging in to <b>http://splunk-server:8000</b>.
<p>

<ul><li> Navigate to Admin-&gt;Data Inputs.
<li> Click on the Network Ports Tab below Data Inputs.
<li> Click on the Add Input Button.</ul>

For remote-syslog, choose the following configuration:<p>

<pre>
Protocol: UDP
Port #: 514
Accept connections from all hosts? Yes
Set source type: from list
Source type: linux_messages_syslog
</pre>

Do some activities that will cause syslog data to be generated so you can verify whether Splunk is receiving the data over the network. If you do not see any data, you may want to do a packet capture using wireshark or ngrep on the destination host to verify that packets are being received. Try logging in to the machine over SSH. Now if you log in to Splunk, you should see some events that have been processed and logged by Splunk (see Figure 2).<p>

Now you are ready to feed the remote syslog into Splunk. The safest way to add new data inputs to Splunk is to use the Splunk command line or Web user interface. For simplicity's sake, I will use the Web user interface in my example to configure data imports. Now you can add as many hosts as desired in this fashion.<p>

<b>SNMP and NFS Configuration</b><p>

SNMP is a network management protocol that has been around since 1990 and is embedded in almost all modern network devices and operating systems for the purpose of managing and monitoring network-enabled devices using a standardized protocol. You can retrieve volumes of information using SNMP that you otherwise would not have and graph it over time using a tool such as MRTG.<p>

For Splunk to index the SNMP data, you will have to configure the SNMP daemon to receive SNMP traps on your Splunk server. Configuring an SNMP infrastructure can be cumbersome, especially for someone who has not configured it before, but almost all network devices and operating systems have native support for SNMP. Configuration of the SNMP daemon will be covered briefly here, but for more information about SNMP I recommend the book <i>Essential SNMP</i> by Kevin J. Schmidt and Douglas R. Mauro.<p>

I will cover a quick and dirty configuration of SNMP so that your Splunk server can start writing the SNMP traps it receives to a file, which in turn will be processed and searchable (without complex grepping or formatting of an SNMP trap history log). The beauty of SNMP is that once a host sends a trap to a remote server over the network, regardless of what a potential intruder attempts to do to clear the logs, the S.O.S. message has been bottled, corked, and tossed in the ocean.<p>

When following the audit trail of an intrusion, this setup provides a very secure means by which to be alerted to the situation, as well as keeping the logs in a secured location. (Splunk also comes with nifty alerting options via e-mail as well so you can configure alerts based on your search terms instead of writing your own alerting script for each different trap.)<p>

For a quick configuration of the snmp daemon, we will do the following. To configure a Linux host for sending SNMP traps, download net-snmp tools from:<p>

<pre>
http://net-snmp.sourceforge.net
</pre>

This is open source software and free.<p>

To compile the SNMP source, download net-snmp-5.3.1.tar.gz, then:<p>

<pre>
tar -xvzf net-snmp
cd net-snmp
./configure
make
make install
</pre>

You will then be prompted with a series of questions provided the configuration script did not encounter any errors. Below are the answers to the configuration prompts that you will want to use for a default configuration for the purpose of getting the most basic SNMP configuration to send data to our Splunk server for this article. A full explanation and configuration of SNMP is beyond the scope of this article, but there is plenty of documentation on advanced configurations at: <b>http://net-snmp.sourceforge.net</b>.
<p>

<pre>
Default Version of SNMP to Use (3): 2
System Contact Information (root@): matthew.sacks@gmail.com

System Location (Unkown): data center
Location to write logfile (/var/log/snmpd.log): /var/log/snmpd.log
Location to write persistent information (/var/net-snmp): /var/net-snmp
</pre>

Now let's build the configuration:<p>

<pre>
shell# make
shell# make install
</pre>

The minimal configuration necessary for configuring SNMP on the Linux host resides in /etc/snmp.conf. The values we need to define here are as follows:<p>

<pre>
defversion 1
defcommunity public
logtimestamp yes
printnumericoids yes
</pre>

<i>Note:</i> You never want to use the community public in real life because it is the default SNMP community; it is shown here only for testing purposes. Please change your SNMP communities to a more obscure name when you have successfully configured your server.<p>


Now start your snmp daemon. I use the following command-line parameters:<p>

<pre>
snmpd -a -A -c /etc/snmp/snmpd.conf -C -Lf /var/log/snmpd.log
</pre>

The <b>-c</b> option defines where to read the configuration. The <b>-Lf</b> option defines where to write the log file. The <b>-a</b> option logs the source addresses of incoming requests. The <b>-C</b> option does the following: Do not read any configuration files except the ones optionally specified by the <b>-c</b> option. Note that this behavior also covers the persistent configuration files. This may result in dynamically assigned values being reset following an agent restart, unless the relevant persistent config files are explicitly loaded using the <b>-c</b> option. 
<p>

Now you may simply add the /var/log/snmpd.log file as a data input for Splunk and all traps received by the snmp daemon on that host will now be processed by Splunk as well.<p>

<b>Configuration of NFS</b><p>

The location of the NFS exports varies for each OS. Consult your documentation to locate the specific NFS configuration for your OS. Generally most operating systems have a similar configuration to the one I will describe and will work for almost all Linux variants.<p>

<b>Configuring a Linux Server for Exporting</b> <p>

<b>Its Logs over NFS</b><p>

In my case I just exported the entire /var/log directory over NFS and mounted it on my Splunk server. I exported the whole directory because if in the future I add an application that I would like to have logged, I can create a symbolic link in /var/log to the application's log directory, and it will be included in the NFS export.<p>

Add the following entry to your /etc/exports directory configuration file on the host that will be exporting its logs. The /etc/exports file defines which directories and hosts can mount the NFS export.<p>

<pre>
#/etc/exports
/var/log ip-of-Splunk-server/255.255.255.0(ro,sync)
</pre>

Now make sure the NFS server is running on the export host by typing the command <b>/etc/init.d/nfs</b> restart. Verify that the desired directory is being exported by typing the command <b>showmount -e</b>.
<p>

Next, mount the NFS export from the host to your Splunk server by editing the fstab file. The fstab file defines which directories are automatically mounted at boot time. The location and name of this tab varies on each operating system. On Solaris, the fstab is the vfstab, but its configuration is basically the same across the board. To do this, we will need to create a mount point for our NFS mounts:<p>

<pre>
mkdir /var/log/imports
mkdir /var/log/imports/host1
</pre>

To keep the structure of imports organized, we will create a directory under imports for each different host:<p>

<pre>
#/etc/fstab
Splunk-server-ip:/var/log    /var/log/imports/host1    nfs ro  0 0
</pre>

Type the command <b>mount -a</b>. You are now ready to mount the NFS export on your Splunk server. Log in to your Splunk server and configure your /etc/fstab (or /etc/vfstab on Sun Solaris) and then add the following entry to mount the NFS export. Type <b>mount -a</b>, which should mount all entries in the fstab. If you do not see any errors, then you most likely have done everything correctly and the NFS export is mounted. You can confirm this by typing the mount command, and then you should see your import mounted on the server. Verify the mount by changing your current directory to the mount directory and seeing if the files are present. You should see the /var/log directory of the remote machine.
<p>

Now we can define the data source to be processed by Splunk:<p>

<ul><li> Navigate to your Splunk Web site <b>http://splunk-server:8000</b>.
<li> Navigate to Admin-&gt;Data Inputs-&gt;Files and Directories.
<li> Click on Add Input.</ul>

The tail data access will process data on the file as if you were running a <b>tail -f</b> command on the host itself. This method of inputting a file is the closest to real-time log processing and indexing into a database as you can get, but it does take more resources than some of the other methods. You may enter the path to a file or directory for the tailfile data input method. If you enter the path of a directory, all files within that directory will be processed.
<p>

For an explanation of all the different data access methods you can go to <b>http://www.splunk.com/support/</b> and read the data access manual. I prefer to stick strictly to tailfile, but you can tinker and find your personal preferences. Set up your tailfile as follows (see Figure 3):
<p>

<ul><li> Data Access should be set to tailfile.
<li> Full path on server: /var/log/imports/host1</ul>

The set host option defines how you want to process and display the hostname in Splunk. I will set it manually, but when you are dealing with thousands of servers, the regex option can come in handy.<p>

<pre>
Set host: constant value
DNS Name or IP Address: host1

Set sourcetype: manual
Source type: snmp
</pre>

You can use tailfile to process any log file on the face of the planet. It is very useful in logging application server logs or database log files, and I suggest using the NFS/tailfile configuration for these types of logs.<p>

Next we verify that data is being processed by Splunk by logging in to our Splunk server and seeing whether the files we configured for indexing are being indexed.<p>

<b>Using the Splunk Web Interface</b><p>

Syslog and SNMP data is now being transmitted over the network to a central location where it is being mined into a database and is made human-readable and easily searchable by the Web user interface. We have the data, it is being processed, so now what do we do with it?<p>

Searching through Splunk is fairly straightforward, and a full search command-line query reference is available on the Splunk support site. Searching through the data that Splunk has indexed is very similar to searching through a typical search engine. Splunk supports Boolean expressions for filtering and refining the data, so you can find a single event in an entire server farm. An example is given below for searching for searching for all RPC events that are not from the nfsd on a single host:<p>

<pre>
host::192.168.10.130 AND rpc NOT nfs
</pre>

The Boolean expressions are case sensitive, so be careful. Splunk will also auto-complete the query as you are typing so that you may see all available information that has been processed by Splunk that is similar to your query. We can also specify a date range in addition to the query to narrow down a particular event to a given date and time, down to the second.<p>

<b>Conclusion</b><p>

With this setup, you can import log data from multiple sources, network, database, and files, and funnel them into a database over the network. You can search through hundreds or thousands of log files in a matter of seconds. Splunk provides a way to get a handle on your log files and then some. The time saved searching through log files can now be dedicated to solving problems rather than finding them.<p>

<i>Matthew Sacks currently works as a systems engineer/network engineer at Reunion.com where he supports the datacenter and corporate office networks supporting production and corporate networks. You can reach Matthew at <b>matthew.sacks@gmail.com</b> or on his forum at <b>systemsnetworkadmin.com</b>.</i><p>
</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
