<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i03: The Replacements</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2007/mar2007.tar"><b class=codeListing>mar2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">The Replacements</h1>
Randal L. Schwartz
<p>

If you've used Perl longer than 15 minutes, you've no doubt seen (and probably typed) the extremely useful substitute operation, typically appearing as <b>s/old/new/</b>. Let's look at some of the things you may already know, and perhaps a few things that you don't know yet about this very common operation.
<p>

The most important thing to notice about the substitute operation is that it acts by default on our friend, the <b>$_</b> variable:
<p>

<pre>
$_ = "hello";
s/ell/ipp/; # $_ is now "hippo"
</pre>

The "left side" of a substitute is a regular expression, so all of the rules about regular expressions apply:<p>

<pre>
$_ = "hello";
s/e.*l/ipp/; # $_ is now "hippo"
</pre>

Here, the <b>.*</b> portion looks for any number of (nearly) any character, and the longest selection that matches and still permits the rest of the expression to match. In this case, it was the single <b>l</b> character between the <b>e</b> and the second <b>l</b>. Had we instead opted for the lazy version of <b>.*?</b>, we'd get the closest <b>l</b> instead:
<p>

<pre>
$_ = "hello";
s/e.*?l/ipp/; # $_ is now "hipplo"
</pre>

Like a regular expression match, we can steer the substitution away from <b>$_</b> and toward some other location, using the <b>=~</b> construct. Unlike the match operation though, we have to specify an lvalue (such as a variable name), not an rvalue (result of an expression):
<p>

<pre>
my $text = "hello";
$text =~ s/ell/ipp/; # $text is now "hippo"
</pre>

I occasionally find that some people are confused about the <i>return value</i> of a substitution. After all, if <b>$text</b> now has a new value, isn't that also what I'll see if I put this replacement in a larger context?
<p>

<pre>
my $text = "hello";
my $result = ($text =~ s/ell/ipp/);
</pre>

And the answer is <strong>no</strong>. Although the substitution is indeed altering <b>$text</b> here, what it <strong>returns</strong> is a true/false value of whether or not the substitution has happened. In this case, <b>$result</b> is true. This property of returning the success is handy when we're performing conditional operations:
<p>

<pre>
if (s/foo/bar/) { # if foo was found, it's now bar, and...
  ... we do the code here ...
} else {
  ... we didn't find foo, and $_ is unchanged ...
}
</pre>

The replacement is performed in the first possible place:<p>

<pre>
$_ = "hello";
s/l/p/; # $_ is now "heplo";
s/l/p/; # $_ is now "heppo";
</pre>

To repeat the substitution on all non-overlapping matches, we add a <b>g</b> suffix:
<p>

<pre>
$_ = "hillo";
s/l/p/g; # $_ is now "hippo";
</pre>

The important word there is <i>non-overlapping</i>. Perl looks for each new match after the end of the previous match. So, the result of a substitution like this may at first be surprising:
<p>

<pre>
$_ = "aaa,bbb,ccc,ddd,eee,fff,ggg";
s/,.*?,/,XXX,/g; # replace all fields with XXX (no!)
</pre>
When we check the result, we see:<p>

<pre>
aaa,XXX,ccc,XXX,eee,XXX,ggg
</pre>

Oops! Why did it do every other entry? On the first match, we matched <b>,bbb,</b> and replaced that with <b>,XXX,</b>. Good so far. But we can't now look at the comma there as the beginning of <b>,ccc,</b>, because these have to be non-overlapping!
<p>

We can fix that by making the trailing comma merely a <i>lookahead</i>:
<p>

<pre>
$_ = "aaa,bbb,ccc,ddd,eee,fff,ggg";
s/,.*?(?=,)/,XXX/g; # replace all fields with XXX (almost...)
</pre>

Now, the trailing comma is not considered part of the match, so it's not ripped out, and it's not skipped past to find the next match. Note that I also had to change the replacement string so it doesn't add a comma back in. Now we're getting closer:<p>

<pre>
aaa,XXX,XXX,XXX,XXX,XXX,ggg
</pre>

Hmm. We're still missing the beginning. That's understandable, because we're requiring a comma before the letters. And we're also missing the end, because we demand a trailing comma, even though we're not considering it part of the match. We can fix both of those problems with a bit more work:<p>

<pre>
$_ = "aaa,bbb,ccc,ddd,eee,fff,ggg";
s/(^|(?&lt;=,)).*?((?=,)|$)/XXX/g; # replace all fields with XXX
</pre>

OK, this is starting to look ugly. Like a regex match, we can pull that apart with a trailing <b>x</b>:
<p>

<pre>
s/
  (
    ^        # either beginning of line
    |        # or
    (?&lt;=,)   # a single comma to the left
  )
  .*?        # as few characters as possible
  (
    (?=,)    # a single comma to the right
    |        # or
    $        # end of string
  )
/XXX/gx;
</pre>

That's much easier to read (relatively speaking).<p>

Like a regular expression match, we can use an alternate delimiter for the left and right sides of the substitution:<p>

<pre>
$_ = "hello";
s%ell%ipp%; # $_ is now "hippo"
</pre>

The rules are a bit complicated, but it works precisely the way Larry Wall wanted it to work. If the delimiter chosen is <strong>not</strong> one of the special characters that begins a pair, then we use the character twice more to both separate the pattern from the replacement and to terminate the replacement, as the example above showed.
<p>

However, if we use the beginning character of a paired character set (parentheses, curly braces, square brackets, or even less-than and greater-than), we close off the pattern with the corresponding closing character. <strong>Then</strong>, we get to pick another delimiter all over again, using the same rules. For example, these all do the same thing:
<p>

<pre>
s/ell/ipp/;
s%ell%ipp%;
s;ell;ipp;; # don't do this!
s#ell#ipp#; # one of my favorites
s[ell]#ipp#; [] for pattern, # for replacement
s[ell][ipp]; [] for both pattern and replacement
s&lt;ell&gt;&lt;ipp&gt;; &lt;&gt; for both pattern and replacement
s{ell}(ipp); {} for pattern, () for replacement
</pre>

No matter what the closing delimiter might be for either the pattern or the replacement, we can include the character literally by preceding it with a backslash:<p>

<pre>
$_ = "hello";
s/ell/i\/n/; # $_ is now "hi/no";
s/\/no/res/; # $_ is now "hires";
</pre>

To avoid backslashing, pick a distinct delimiter:<p>

<pre>
$_ = "hello";
s%ell%i/n%; # $_ is now "hi/no";
s%/no%res%; # $_ is now "hires";
</pre>

Conveniently, if a paired character is used, the pairs may be nested without invoking any backslashes:<p>

<pre>
$_ = "aaa,bbb,ccc,ddd,eee,fff,ggg";
s((^|(?&lt;=,)).*?((?=,)|$))(XXX)g; # replace all fields with XXX
</pre>

Note that even though the pattern contains closing parentheses, they are all paired with opening parentheses, so the pattern ends at the right place.<p>

The right side of the substitution operation is generally treated as if it were a double-quoted string: variable interpolation and backslash interpretation is performed directly:<p>

<pre>
$replacement = "ipp";
$_ = "hello";
s/ell/$replacement/; # $_ is now "hippo"
</pre>

The left side of a substitution is <strong>also</strong> treated as if it were a double-quoted string (with a few exceptions), and this interpolation happens <strong>before</strong> the result is evaluated as a regular expression:
<p>

<pre>
$pattern = "ell";
$replacement = "ipp";
$_ = "hello";
s/$pattern/$replacement/; # $_ is now "hippo"
</pre>

Using this form of pattern, Perl is forced to compile the regular expression at runtime. If this happens in a loop, Perl may need to recompile the regular expression repeatedly, causing a slowdown. We can give Perl a hint that the pattern is really a regular expression by using a <i>regular expression literal</i>:
<p>

<pre>
$pattern = qr/ell/;
$replacement = "ipp";
$_ = "hello";
s/$pattern/$replacement/; # $_ is now "hippo"
</pre>

The <b>qr</b> operation creates a <b>Regexp</b> object, which interpolates into the pattern with minimal fuss and maximal speed.
<p>

I hope you've enjoyed this brief overview of the replacement operation, although it's no replacement (ugh) for the manpages, such as <b>perlre</b>, <b>perlretut</b>, <b>perlrequick</b>, and <b>perlreref</b>. Check those out for more details, and until next time, enjoy!
<p>

<i>Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the "must-have" standards: Programming Perl, Learning Perl, Learning Perl for Win32 Systems, and Effective Perl Programming. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.</i><p>

</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
