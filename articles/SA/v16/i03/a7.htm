<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i03: Miscellaneous Unix Tips: Answering Novice Shell Questions</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2007/mar2007.tar"><b class=codeListing>mar2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a7.gif" width="200" height="167" align="right">Miscellaneous Unix Tips: Answering Novice Shell Questions</h1>

Ed Schaefer and John Spurgeon
<p>

As <I>Sys Admin</I> contributing editors, we've had the opportunity to answer a number of novice shell questions. In this column, we'll cover a few of the questions we've been asked:<p>


<ul><li> Using the <strong>exec</strong> and <strong>eval</strong> commands
<li> Combining files using the <strong>paste</strong> command
<li> Processing a string a character at a time
<li> Deleting a file named dash</ul>

<b>Using the exec & eval Commands</b><p>

One novice asked when it was suitable to <b>exec</b> and <b>eval</b> Unix commands:<p>

<pre>
exec mycommand
eval mycommand
</pre>

The <b>exec</b> command works differently depending on the shell; in the Bourne and Korn shells, the <b>exec</b> command replaces the current shell with the command being exec'ed. Consider this stub script:<p>

<pre>
exec echo "Hello John"
echo "Hello Ed"
# end stub
</pre>

When the above stub executes, the current shell will be replaced when exec'ing the echo "Hello John" command. The echo "Hello Ed" command never gets the chance to execute. Obviously, this capability has limited uses.<p>
You might design a shell menu where the requirement is to execute an option that never returns to the menu. Another use would be restricting the user from obtaining the command line. The following last line in the user's .profile file logs the user out as soon as <b>my_executable</b> terminates:<p>

<pre>
exec my_executable
</pre>

However, most systems administrators probably use the <b>exit</b> command instead:<p>

<pre>
my_executable
exit
</pre>

Don't confuse exec'ing a Unix command with using <b>exec</b> to assign a file to a file descriptor. Remember that the default descriptors are standard input, output, and error or 0, 1, and 2, respectively.<p>

Let's consider an example where you need to read a file with a while loop and ask the user for input in the same loop. Assign the file to an unused descriptor -- 3 in this case -- and obtain the user input from standard input:<p>

<pre>
exec 3&lt; file.txt
while read line &lt;&3
do
    echo "$line"
    echo "what is your input? "
    read answer
    .
    .
done
exec 3&lt;&-   # close the file descriptor when done
</pre>

The <b>eval</b> command is more interesting. A common <b>eval</b> use is to build a dynamic string containing valid Unix commands and then use <b>eval</b> to execute the string. Why do we need <b>eval</b>? Often, you can build a command that doesn't require <b>eval</b>:<p>

<pre>
evalstr="myexecutable"
$evalstr   # execute the command string
</pre>

However, chances are the above command won't work if "myexecutable" requires command-line arguments. That's where <b>eval</b> comes in.<p>

Our man page says that the arguments to the <b>eval</b> command are "read as input to the shell and the resulting commands executed". What does that mean? Think of it as the <b>eval</b> command forcing a second pass so the string's arguments become the arguments of the spawned child shell.<p>

In a previous column, we built a dynamic <b>sed</b> command that skipped 3 header lines, printed 5 lines, and skipped 3 more lines until the end of the file:<p>

<pre>
evalstr="sed -n '4,\${p;n;p;n;p;n;p;n;p;n;n;n;}' data.file"
eval $evalstr  # execute the command string
</pre>

This command fails without <b>eval</b>. When the <b>sed</b> command executes in the child shell, <b>eval</b> forces the remainder of the string to become arguments to the child.<p>

Possibly the coolest <b>eval</b> use is building dynamic Unix shell variables. The following stub script dynamically creates shell variables user1 and user2 setting them equal to the strings John and Ed, respectively:<p>

<pre>
COUNT=1
eval user${COUNT}=John
echo $user1

COUNT=2
eval user${COUNT}=Ed
echo $user2
Pasting Files with paste
</pre>

Another novice asked how to line up three files line by line sending the output to another file. Given the following:<p>

<pre>
file1:

1
2
3

file2:

a
b
c

file3:

7
8
9
</pre>

the output file should look like this:<p>

<pre>
1a7
2b8
3c9
</pre>

The paste command is a ready-made solution:<p>

<pre>
paste file1 file2 file3
</pre>

By default, the delimiter character between the columns is a tab key. The paste command provides a <b>-d</b> delimiter option. Everything after <b>-d</b> is treated as a list. For example, this paste rendition uses the pipe symbol and ampersand characters as a list:<p>

<pre>
paste -d"|&" file1 file2 file3
</pre>

The command produces this output:<p>

<pre>
1|a&7
2|b&8
3|c&9
</pre>

The pipe symbol character, |, is used between columns 1 and 2, while the ampersand, &, separates column 2 and 3. If the list is completely used, and if the paste command contains more files arguments, then paste starts at the beginning of the list.<p>

To satisfy our original requirement, paste provides a null character, \0, signifying no character. To prevent the shell from interpreting the character, it must also be quoted:<p>

<pre>
paste -d"\0" file1 file2 file3
</pre>

<b>Process a String One Character at a Time</b><p>
Still another user asked how to process a string in a shell script one character at a time. Certainly, advanced scripting languages such as Perl and Ruby can solve this problem, but the <b>cut</b> command's <b>-b</b> option, which specifies the byte position, is a simple alternative:<p>

<pre>
#!/bin/ksh

mystring="teststring"
length=${#mystring}
count=0

until [ $count -eq $length ]
do
   ((count+=1))
   char=$(echo $mystring|cut -b"$count")
   echo $char
done
</pre>

In the stub above, string mystring's length is determined using the advanced pattern-matching capabilities of the bash and ksh shells. Any number of external Unix commands can provide a string length, but probably the command with the smallest foot print is <b>expr</b>:<p>

<pre>
   length=$(expr "$mystring" : '.*')
</pre>

Also, the bash shell contains a substring expansion parameter:<p>

<pre>
     ${parameter:offset:length}
</pre>

According to the bash man page, the substring expansion expands "up to length characters of parameter starting at the character specified offset". Note that the offset starts counting from zero:<p>

<pre>
#!/bin/bash

mystring="teststring"
length=${#mystring}

ol=1
offset=0

until [ $offset -eq $length ]
do
   echo "${mystring:${offset}:${ol}}"
   ((offset+=1))
done
# end script
</pre>

<b>Deleting a File Named dash</b><p>

Finally, a novice inadvertently created a file named with the single character dash, and asked us how to delete the file. No matter how he escaped the dash in the <b>rm</b> command, it still was considered an <b>rm</b> option.<p>

It's easy enough to create the file using the <strong>touch</strong> command:
<p>

<pre>
 touch -
</pre>

To remove it, use a path to the file -- either full or relative. Assuming the dash file exists in the mydir directory, provide a full path to the file:<p>

<pre>
 rm /pathto/mydir/-
</pre>

Or if the file exists in the current directory, provide a relative path:<p>

<pre>
 rm ./-
</pre>

Of course, our old friend <strong>find</strong> can clobber that file everywhere:
<p>

<pre>
 find . -name "-" |xargs rm
</pre>

<b>Conclusion</b><p>

None of these tips are earth-shaking -- unless you don't know them. Let us know if you have alternative solutions.<p>

<i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. He is a software developer and DBA for Intel's Factory Integrated Information Systems, FIIS, in Aloha, Oregon. Ed also hosts the monthly Shell Corner column on UnixReview.com. He can be reached at: <b>shellcorner@comcast.net</b>.</i><p>

<i>John Spurgeon is a software developer and systems administrator for Intel's Factory Information Control Systems, IFICS, in Aloha, Oregon. Outside of work, he enjoys turfgrass management, triathlons, ultra-marathon cycling, and spending time with his family.</i><p>
</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
