<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i02: Listing 1 Sample source code to be debugged</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a4.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a4_s1.htm">Sidebar
              </a></span></td>
		<td><a href="../../../../source/SA/2007/feb2007.tar"><b class=codeListing>feb2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2>Listing 1  Sample source code to be debugged</h2>
<pre>
#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int             iCounter = 0;

void
incrementCounter()
{
    /*
     * Increment iCounter by 1 using an inconsistent state protected by
     * the mutex
     */
    pthread_mutex_lock(&mutex);
    iCounter += 9999;
    iCounter -= 9998;
    pthread_mutex_unlock(&mutex);
    usleep(200);
}

void           *
myThread(void *arg)
{
    /* Unused argument */
    arg;

    while (1)
        incrementCounter();

}

int
main()
{
    pthread_t       tid = 0;
    int             i = 0;
    char           *pLeak = NULL;

    /* Hereunder is a small memory leak */
    pLeak = malloc(100);

    /* Create a thread */
    pthread_create(&tid, NULL, myThread, NULL);

    /*
     * Display the counter value when the mutex is acquired every 500 ms
     * until it reaches 100
     */
    while (i &lt; 100) {
        pthread_mutex_lock(&mutex);
        printf("iCounter=%d\n", i = iCounter);
        pthread_mutex_unlock(&mutex);
        usleep(500);
    }

    /* Cancel the computing worker thread */
    pthread_cancel(tid);

    return 0;
}
</pre>
            </table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
