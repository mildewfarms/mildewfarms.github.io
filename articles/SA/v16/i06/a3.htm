<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i06: Using a MySQL Database to Store Network Data</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2007/jun2007.tar"><b class=codeListing>jun2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a3.gif" width="200" height="166" align="right">Using a MySQL Database to Store Network Data</h1>

<p>Mihalis Tsoukalos

<p>In this article, I will describe how to store network data in a MySQL database as well as how to take advantage of the SQL language to query stored data. I will also present some handy SQL queries for use with the stored network data. To begin, let's look at the usefulness of a database for storing network data. I've listed some advantages and disadvantages below. And, although I selected the MySQL DBMS, you can use PostgreSQL, Oracle, DB2, FileMaker, or your favorite DBMS.

<p>Advantages:

<ul><li> You can query your data offline.
<li> Databases are storing their data optimized, so they are quicker than pure disk I/O.
<li> You can embed intelligence in your data by using a database.
<li> You can distribute your data in many databases.
<li> You can automatically use the reporting tools that support your database.
<li> If you already know SQL, querying your network data is easy.
<li> A remote user can easily access your data using the network.
<li> You can use OLAP tools, which are very efficient for massive data.</ul>

<p>Disadvantages:

<ul><li> May take too much space, especially if you have a busy network.
<li> You need to know how to use a database.
<li> You need to learn SQL if you do not already know it.
<li> You need to know how to administer your database.</ul>

<p><b>Why Use MySQL?</b>

<p>I chose MySQL for several reasons. First of all, MySQL is free. Second, it is easy to learn and use. Third, it is light, which means it does not demand huge computer resources. Other reasons include the plethora and quality of the available documentation and the fact that MySQL can run on almost every available platform. This means that the little MySQL knowledge that you will get your hands on in this article can be used in every platform for which MySQL is ported.

<p><b>Collecting the Network Data</b>

<p>Before being able to use any network data, we must first collect network data. Network data is usually captured using the handy tcpdump utility. Tcpdump output is difficult to read, so I used the tcpshow utility to preprocess the original tcpdump file (./tcpshow &lt; outside.tcpdump &gt; tcpshow.data). Please note that the tcpshow output is plain text, whereas the tcpdump output is usually in binary format. After transforming the tcpdump data with tcpshow, I used the Perl script shown in Listing 1 to extract the information I wanted.

<p>This section will also present another Perl script that is going to be used for both reading the network data from an external file and inserting the data into the MySQL DB.

<p>Note: For the Perl script to run, you also need to install the DBI and DBD::mysql Perl modules. I prefer to install Perl modules using the CPAN Perl module. I will not describe the procedure here, but you will find more information about using the CPAN Perl module in the references section at the end of the article.

<p>The description of the NetData MySQL table that holds the network data is the following:

<pre>
mysql&gt; desc NetData;

+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| Date       | datetime    | NO   |     |         |       |
| dt         | float       | YES  |     | NULL    |       |
| sourcePort | varchar(12) | YES  |     | NULL    |       |
| destPort   | varchar(12) | YES  |     | NULL    |       |
+------------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql&gt;
</pre>

The NetData table was created inside the SA database using the following SQL command:<p>

<pre>
CREATE TABLE NetData
     (Date DATETIME NOT NULL,
      dt FLOAT,
      sourcePort VARCHAR(12),
      destPort VARCHAR(12)
     );
</pre>

<p>You may add additional columns such as source IP, destination IP, exchange data size, etc, according to your specific needs.

<p><b>Input Data File Format</b>

<p>The first 10 lines of the file that hold the TCP network data are the following:

<pre>
900.11856939 0.308413 1024 80
900.11857575 0.000636 80   1024
900.1485114 0.300888  80   1024
900.14852096 0.000956 1024 80
900.14853166 0.001070 1024 80
900.14871127 0.017961 80   1024
900.14989811 0.118684 80   1024
900.15316301 0.326490 1024 80
900.15317819 0.001518 80   1024
900.15319053 0.001234 80   1024
</pre>

<p>The first column represents the time (in minutes, starting from midnight -- 900 is 15:00) that the packet was captured. The second column is the time difference between the current packet and the previous one. The third column is the source port, and the fourth column is the destination port. So, you can have whatever data you want. What I am presenting here is a relatively simple -- yet realistic -- example with TCP data.

<p><b>The populateNetData.pl Perl Script</b>

<p>The Perl script reads the TCP network data from a file and inserts it into the database. The MySQL database connection is established using the following Perl code:

<pre>
my $datasource = "DBI:mysql:database=sa;host=localhost";
my $user = "mtsouk";
my $password = "xxx";
</pre>

<p>Listing 2 displays the populateNetData.pl Perl script.

<p><b>Useful SQL Queries</b>

<p>This section will present and explain several SQL queries related to the presented network data records.

<p><b>Displaying the 20 Busiest Moments (Seconds)</b>

<p>The following SQL command will display the 20 busiest moments as well as the total number of connections:

<pre>
select Date, count(*) TotalConnections
             from NetData
             group by Date
             order by TotalConnections desc
                         limit 20;
</pre>

<p>The count(*) output is named TotalConnections so that it can be used later in the "order by" part of the SQL command.

<p>The output is:

<pre>
+---------------------+------------------+
| Date                | TotalConnections |
+---------------------+------------------+
| 2007-01-27 15:06:07 |              346 |
| 2007-01-27 15:12:10 |              283 |
| 2007-01-27 15:14:22 |              265 |
| 2007-01-27 15:12:11 |              262 |
| 2007-01-27 15:14:21 |              255 |
| 2007-01-27 15:13:08 |              218 |
| 2007-01-27 15:00:09 |              201 |
| 2007-01-27 15:09:31 |              201 |
| 2007-01-27 15:15:01 |              172 |
| 2007-01-27 15:06:08 |              143 |
| 2007-01-27 15:11:24 |              139 |
| 2007-01-27 15:09:04 |              115 |
| 2007-01-27 15:15:02 |              107 |
| 2007-01-27 15:02:09 |              103 |
| 2007-01-27 15:01:07 |              100 |
| 2007-01-27 15:01:15 |               99 |
| 2007-01-27 15:07:03 |               98 |
| 2007-01-27 15:03:28 |               79 |
| 2007-01-27 15:13:34 |               79 |
| 2007-01-27 15:08:35 |               77 |
+---------------------+------------------+
</pre>

<p><b>Returning Random Rows</b>

<p>The MySQL RAND function can be used to return rows randomly. The following command returns 10 random rows:

<pre>
select *
             from NetData
             order by rand()
                         limit 10;
</pre>

<P>A possible output is:

<pre>
+---------------------+----------+------------+----------+
| Date                | dt       | sourcePort | destPort |
+---------------------+----------+------------+----------+
| 2007-01-27 15:14:22 | 0.000143 | 80         | 4196     |
| 2007-01-27 15:11:24 | 0.019023 | 80         | 2723     |
| 2007-01-27 15:11:24 | 0.008738 | 80         | 2686     |
| 2007-01-27 15:15:01 | 0.000183 | 80         | 4208     |
| 2007-01-27 15:00:13 | 0.000273 | 25         | 1052     |
| 2007-01-27 15:04:04 | 0.006982 | 25         | 1107     |
| 2007-01-27 15:03:28 | 0.001365 | 80         | 2005     |
| 2007-01-27 15:10:34 | 0.001232 | 80         | 2676     |
| 2007-01-27 15:02:09 | 0.014544 | 80         | 1814     |
| 2007-01-27 15:07:16 | 0.001109 | 2596       | 80       |
+---------------------+----------+------------+----------+
</pre>

<p><b>Returning the Number of Total Connections per Destination Port</b>

<p>The following command returns the total number of connections per destination port for the 15 most popular ports:

<pre>
select destPort, count(*) TotalNumber
             from NetData
             group by destPort
             order by TotalNumber desc
                         limit 15;

+----------+-------------+
| destPort | TotalNumber |
+----------+-------------+
| 80       |        1923 |
| 25       |         223 |
| 23       |          42 |
| 1024     |          38 |
| 1306     |          36 |
| 4233     |          27 |
| 1174     |          25 |
| 2005     |          25 |
| 2599     |          25 |
| 3718     |          25 |
| 4205     |          25 |
| 2676     |          24 |
| kpop     |          22 |
| 2063     |          22 |
| 2307     |          22 |
+----------+-------------+
</pre>


<p><b>Finding Busy Minutes</b>

<p>This part will show you how to find the 5 most popular minutes (i.e., 15:12, 15:16, but not 15:12:13, which is in seconds). I will use the <b>substr()</b> command:
<pre>
select substr(Date, length(Date)-7, 5), count(*) Total
             from NetData
             group by substr(Date, length(Date)-7, 5)
             order by Total desc
                         limit 5;
</pre>

<p>The key point here is to select and group by the substring that you want, for example, by using the <b>substr(Date, length(Date)-7, 5)</b> expression.
<p>This example produced the following output:

<pre>
+---------------------------------+-------+
| substr(Date, length(Date)-7, 5) | Total |
+---------------------------------+-------+
| 15:14                           |   720 |
| 15:06                           |   551 |
| 15:12                           |   545 |
| 15:09                           |   511 |
| 15:15                           |   435 |
+---------------------------------+-------+
</pre>

<p><b>Creating an Empty Table Similar to the NetData Table</b>

<p>The following command will create a new table, called NetData_identical, that looks like the original NetData table without the actual data:

<pre>
create table NetData_identical
as
select * from NetData
     where 0 = 1;
</pre>

<p>NetData_identical looks as follows:

<pre>
mysql&gt; desc NetData_identical;
+------------+-------------+------+-----+---------------------+-------+
| Field      | Type        | Null | Key | Default             | Extra |
+------------+-------------+------+-----+---------------------+-------+
| Date       | datetime    | NO   |     | 0000-00-00 00:00:00 |       |
| dt         | float       | YES  |     | NULL                |       |
| sourcePort | varchar(12) | YES  |     | NULL                |       |
| destPort   | varchar(12) | YES  |     | NULL                |       |
+------------+-------------+------+-----+---------------------+-------+
4 rows in set (0.01 sec)

mysql&gt;
</pre>

<p><b>Creating a Backup Copy of the NetData Table</b>

<p>The following output illustrates how to create a backup copy of the NetData table:

<pre>
mysql&gt; create table NetData_backup as select * from NetData;
Query OK, 4912 rows affected (0.02 sec)
Records: 4912  Duplicates: 0  Warnings: 0

mysql&gt;
</pre>


<p>Backup copies, apart from being useful for security reasons, are also very handy because you can work with them without affecting the original data.

<p><b>Finding the Maximum Value of the dt Column</b>

<p>The following SQL query finds the maximum value of the dt column:

<pre>
select max(dt)
             from NetData;
</pre>

<p><b>Finding the Average Value of the dt Column</b>

<p>The following SQL query reports the average value of the values found in the dt column:

<pre>
select avg(dt)
             from NetData;
Finding the Average Value of the dt Column in Respect to the sourcePort Value
</pre>

<p>The following query returns the averages for the dt values in respect to the sourcePort. The output is limited to 10 values and is sorted in descending order:

<pre>
select sourcePort, avg(dt) as dt_average
             from NetData
             group by sourcePort
             order by dt_average desc
                         limit 10;
</pre>

<p>The output is as follows:

<pre>
+------------+-------------------+
| sourcePort | dt_average        |
+------------+-------------------+
| 2680       |  0.17783659529523 |
| 1174       | 0.098484598236973 |
| 2615       | 0.095210820149408 |
| 1307       | 0.089900799299357 |
| 1620       | 0.077908113450071 |
| 1306       |  0.07518981667553 |
| 2727       | 0.073359332897881 |
| 2616       | 0.066323998617008 |
| 4205       | 0.061019102641148 |
| 1112       | 0.060378213710335 |
+------------+-------------------+
</pre>

<p><b>Finding the Number of Different Ports Used in the destPort Column</b>

<p>The following query uses the <b>distinct()</b> function to return each entry only once. It then counts the number of entries:
<pre>
select count(distinct(destPort))
             from NetData;
</pre>

<p><b>Finding the Percentage that Specific Data Represents</b>

<p>Let us say that you want to find out what percentage of the values in the dt column are from http traffic (destPort = "80"). The following query answers just that:

<pre>
select
     (
              sum(case when destPort = "80" then dt end) / sum(dt)
     ) * 100 as percentage
     from NetData;
</pre>

<p>The answer is the following:

<pre>
+-----------------+
| percentage      |
+-----------------+
| 30.156820654134 |
+-----------------+
</pre>


<p><b>Finding the Percentage of Traffic for Each Destination Port</b>

<p>This example will find the percentage of traffic -- the number of collections for a port divided by the total number of all connections -- for each destination port. The simplest way is by using a MySQL stored procedure. To begin, type the following code:

<pre>
DELIMITER //
CREATE PROCEDURE PERTRAFFIC ()

BEGIN
             DECLARE total INT DEFAULT 0;

             SELECT COUNT(*) INTO total FROM netdata_backup;

             select (count(*)/total) * 100 as Percentage, sourcePort
            from NetData
            group by sourcePort
            order by Percentage desc;

END
//
DELIMITER ;
</pre>

<p>Then, execute the procedure by using the following command:

<pre>
mysql&gt; call PERTRAFFIC ();
</pre>

<p>The output, limited to 10 lines, is as follows:

<pre>
+------------+--------------+
| Percentage | sourcePort   |
+------------+--------------+
|    50.3360 | 80           |
|     4.1132 | 25           |
|     0.7941 | 23           |
|     0.6312 | 1024         |
|     0.4480 | 2615         |
|     0.4276 | 1026         |
|     0.4072 | 1027         |
|     0.4072 | 1049         |
|     0.4072 | 1052         |
|     0.4072 | 1106         |
</pre>

<p><b>Conclusion</b>

<p>I hope you enjoyed reading this article as much as I enjoyed writing it. What I have shown here is a small part of probable queries of network data stored in a database. SQL offers you a tremendous number of possible queries that you can execute. You must determine your own needs and create the queries you want. Please feel free to ask questions or send me your ideas for future articles.

<p><b>References and Web Links</b>

<p>Bowman, Judith, Sandra Emerson, and Marcy Darnovsky. 2001. <i>The Practical  SQL Handbook: Using SQL Variants</i>, 4th Ed. Addison Wesley.
<p>Dyer, Russell. 2005. <i>MySQL in a Nutshell</i>. O'Reilly.
<p>Kofler, Michael. 2005. <i>The Definitive Guide to MySQL 5</i>, 3rd Ed. Apress.
<p>Molinaro, Anthony. 2006. <i>SQL Cookbook</i>. O'Reilly.
<p>Russell, Chad and Jon Stephens. 2004. <i>Beginning MySQL Database Design and Optimization: From Novice to Professional</i>. Apress.
<p>Tsoukalos, Mihalis. 2007. "Network Traffic Visualization". <i>Sys Admin</i>: In publication.
<p>Zawodny, Jeremy and Derek J. Balling. 2004. <i>High Performance MySQL</i>. O'Reilly.
<p>1998 DARPA Intrusion Detection Evaluation Data Set Overview -- <b>http://www.ll.mit.edu/IST/ideval/data/1998/1998_data_index.html

</b>
<p>Installing Perl Modules -- <b>http://www.livejournal.com/doc/server/lj.install.perl_setup.modules.html</b>
<p>Life with CPAN -- <b>http://sial.org/howto/perl/life-with-cpan/

</b>
<p>MySQL Reference Manual -- <b>http://dev.mysql.com/doc/</b>
<p>MySQL User Groups -- <b>http://dev.mysql.com/user-groups/</b>
<p>MySQL Web Site -- <b>http://www.mysql.com/</b>
<p>Perl CPAN -- <b>http://www.perl.com/CPAN/</b>
<p>Sample tcpdump File -- <b>http://www.ll.mit.edu/IST/ideval/data/1998/training/four_hours/tcpdump.gz</b>
<p><i>Mihalis Tsoukalos lives in Greece with his wife, Eugenia, and works as a high school teacher. He holds a B.Sc. in Mathematics and a M.Sc. in IT from University College London. Before teaching, he worked as a Unix systems administrator and an Oracle DBA. Mihalis can be reached at: <b>tsoukalos@sch.gr</b>.</i><p>
</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
