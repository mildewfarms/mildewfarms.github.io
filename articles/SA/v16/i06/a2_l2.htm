<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i06: Listing 2  Python module: automgmt.py</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink">Listing 2</span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2007/jun2007.tar"><b class=codeListing>jun2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2>Listing 2  <i>Python module: automgmt.py</i></h2>
<pre>
#!/usr/bin/env python

import re
import pexpect
from telnetlib import Telnet

import exceptions
from string import *

env = {}
pwerr = re.compile('Incorrect password')

class TelnetError(exceptions.Exception):
    def __init__(self, args=None):
        self.args=args

class jump:

    # initiate ssh tunnel
    def __init__(self, stinger, config="myisp.conf"):
        self._set_env(config)

        sshcmd = "ssh " + env['JMPSERVER'] + \
             " -L" + env['PORT'] + ":" + stinger +":23"
        self.tunnel = pexpect.spawn(sshcmd)

        if env.has_key('SSHPASSWD'):
            self._login()
        else:
            self.tunnel.expect(env['JMPPROMPT'])

    # read environment variables from config file
    def _set_env(self,config="myisp.conf"):

        global env
        try:
            lines = open(config,'r').readlines()
        except:
            print "could no open file " + env['CONFIG'] + '\n'

        for line in lines:
            try:
                name, value = line.split('=')
            except ValueError, e:
                pass
            env[name]=value.strip('\n')

    # if public-key is not set up, login using a password
    # add line: SSHPASSWORD=&lt;password&gt; in config file
    def _login(self):
        self.tunnel.expect('sword:')
        self.tunnel.send(env['SSHPASSWD'] + '\n')
        self.tunnel.expect('bash-2.05')


class stcon(jump):


    # initiate Telnet client (through ssh tunnel)
    def __init__(self,stinger):
        jump.__init__(self,stinger)
        self.stinger = stinger
        self.prompt = env['USER']+'&gt;'

        self.session = Telnet("localhost", env['PORT'])

        # if correct response not received, then
        # probably Telnet password problem. In
        # which case raise TelnetError exception
        try:
            ret = self.session.read_until('password:',3)
        except EOFError, e:
            self.close()
            raise TelnetError, "no password prompt"

        self.session.write(env['TELPASSWD'] + '\n')

        # Check for response "Incorrect password",
        # if received then raise TelnetError
        ret = self.session.read_until('User:', 1)
        if pwerr.search(ret):
            self.close()
            raise TelnetError, "incorrect password"

        self.session = Telnet("localhost", env['PORT'])

        # if correct response not received, then
        # probably Telnet password problem. In
        # which case raise TelnetError exception
        try:
            ret = self.session.read_until('password:',3)
        except EOFError, e:
            self.close()
            raise TelnetError, "no password prompt"

        self.session.write(env['TELPASSWD'] + '\n')

        # Check for response "Incorrect password",
        # if received then raise TelnetError
        ret = self.session.read_until('User:', 1)
        if pwerr.search(ret):
            self.close()
            raise TelnetError, "incorrect password"

        self.session = Telnet("localhost", env['PORT'])

        # if correct response not received, then
        # probably Telnet password problem. In
        # which case raise TelnetError exception
        try:
            ret = self.session.read_until('password:',3)
        except EOFError, e:
            self.close()
            raise TelnetError, "no password prompt"

        self.session.write(env['TELPASSWD'] + '\n')

        # Check for response "Incorrect password",
        # if received then raise TelnetError
        ret = self.session.read_until('User:', 1)
        if pwerr.search(ret):
            self.close()
            raise TelnetError, "incorrect password"
        self.session.write(env['USER'] + '\n')
        ret = self.session.read_until('Password:')
        self.session.write(env['USRPASSWD'] + '\n')
        ret = self.session.read_until(self.prompt)

    # issue a commad to the network device and
    # grab ouput
    def do_cmd(self,cmd):
        self.session.write(cmd+'\n')
        output = self.session.read_until(self.prompt).split('\n')
        # clean up
        output = map(lambda i: strip(i,'\r'), output)
        output = map(lambda i: strip(i), output)

        try:
            # remove the line with the command name in it
            output.remove(cmd)
        except:
            pass
        try:
            # remove the line with the prompt in it
            output.remove(self.prompt)
        except:
            pass
        try:
            # remove blank lines
            output.remove('')
        except:
            pass

        return output

    def close(self):
        # close Telnet session then ssh tunnel
        self.session.close()
        self.tunnel.close()
</pre>
            </table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
