<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i05: Export Behavior, Not Data</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2007/may2007.tar"><b class=codeListing>may2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Export Behavior, Not Data</h1>

Randal L. Schwartz

<p>I spend a fair amount of time (some would say "too much time") hanging out in mailing lists and chat areas for Perl beginners. One problem that comes up frequently is what to do when a program gets too large, or how to share code between programs. The question will usually be phrased as "how do I include a file?", because the presumption is that part of the code can simply be transported into a new file and glued back in at the proper time. However, beneath this question lurk several problems that may be unknown to a beginning Perl programmer. Let's look at why the naive approach can sometimes cause trouble down the road.

<p>The <b>require</b> function (on which the <b>use</b> statement is built) is rather simple. Given a filename (or a package name that can be turned into a filename), locate the file along the <b>@INC</b> path, and bring it in. If the file is successfully loaded, program execution continues, and a notation is made in <b>%INC</b> to prevent the file from being loaded twice.

<p>Let's say that we have a number of programs that all want to calculate a running total, looking for the sum at the end. We could create <b>calculate_running_total.pl</b>, and put it in our <b>@INC</b>:

<p>
<pre>
my $total = 0;

sub add_item {
  $total += shift;
}

sub grand_total {
  return $total;
}

1;
</pre>

The <b>1;</b> at the end is mandated by the <b>require</b> interface: the last expression evaluated in the file has to be a true value, or the require fails.

<p>We can pull it into our code like so:

<p>
<pre>
require 'calculate_running_total.pl';

for my $file (glob '*') {
  add_item(-s $file);
}

print "total bytes is ", grand_total(), "\n";
</pre>

Here, I'm walking through a list of filenames to get their sizes, and then adding each of the sizes into the hidden total. When I'm done, I'll grab the grand total and display it.

<p>The <b>$total</b> variable here is hidden within the file. There's nothing I can say in the main script to access that variable directly. We'll come back to that in a moment.

<p>One of the problems with including a file like this is that the namespace is shared between the main program and the included file. If <b>calculate_running_total.pl</b> needed a few more subroutines to perform the task, the subroutines in my main program might collide, especially if they were undocumented. I could just get creative with my names:

<p>
<pre>
my $total = 0;

sub calculate_running_total_add_item {
  $total += shift;
}

sub calculate_running_total_grand_total {
  return calculate_running_total_normalize($total);
}

## private routines:
sub calculate_running_total_normalize {
  ...
}

1;
</pre>

but this would also require a corresponding lengthening in usage:

<p>
<pre>
require 'calculate_running_total.pl';

for my $file (glob '*') {
  calculate_running_total_add_item(-s $file);
}

print "total bytes is ",
  calculate_running_total_grand_total(), "\n";
</pre>

as well as be annoying to the author of the included file, having to always prefix every name explicitly like that.

<p>For this reason, modern Perl programs frequently take advantage of <i>packages</i>:

<p>
<pre>
package CalculateRunningTotal;

my $total = 0;

sub add_item {
  $total += shift;
}

sub grand_total {
  return normalize($total);
}

## private routines:
sub normalize {
  ...
}

1;
</pre>

I can now bring this in and use names that will make it clearer that I'm pulling from a separate file:

<p>
<pre>
require 'calculate_running_total.pl';

for my $file (glob '*') {
  CalculateRunningTotal::add_item(-s $file);
}

print "total bytes is ",
  CalculateRunningTotal::grand_total(), "\n";
</pre>

A little nicer, and a little clearer. Of course, nothing stops us from still calling <b>CalculateRunningTotal::normalize</b> except perhaps a gentleman's agreement. OK, call it "good programming practice". The names are still a bit long, and by migrating this thing into a full-blown module, we can shorten that up even more. First, we'll bring in the <b>Exporter</b> module to handle the namespace aliasing, and we'll also have to change the name to end in <b>.pm</b> so that <b>use</b> knows how to find it. So in <b>CalculateRunningTotal.pm</b>, we now have:

<p>
<pre>
package CalculateRunningTotal;
require Exporter;
@EXPORT = qw(add_item grand_total);

my $total = 0;

sub add_item {
  $total += shift;
}

sub grand_total {
  return normalize($total);
}

## private routines:
sub normalize {
  ...
}

1;

And we'll use it with:

use CalculateRunningTotal;

for my $file (glob '*') {
  add_item(-s $file);
}

print "total bytes is ", grand_total(), "\n";
</pre>

Hey, look at that, short names again. Of course, we could avoid colliding with our own <b>add_item</b>, if we had one, by restricting the import:

<p>
<pre>
use CalculateRunningTotal qw(grand_total);

for my $file (glob '*') {
  CalculateRunningTotal::add_item(-s $file);
}

print "total bytes is ", grand_total(), "\n";
</pre>

Now we have to spell out <b>add_item</b> using its full package name.

<p>At this point, we have the basic workings of a trivial but clean module. Time to get back to the original point. What is the mistake people often make when designing the interface? It's choosing to export the <em>data</em> of the module in addition to (or instead of) the <em>behavior</em>.
<p>For example, I might have looked at the early version of this module, staring at the code:

<p>
<pre>
sub grand_total {
  return $total;
}
</pre>

I might have asked myself why I was writing such a boring trivial subroutine, when I could just give access to <b>$total</b> directly. Since the <b>Exporter</b> works only with package variables, I'd have to change this from a lexical to a package variable (declared with <b>our</b>):

<p>
<pre>
package CalculateRunningTotal;
require Exporter;
@EXPORT = qw(add_item $total);

our $total = 0;

sub add_item {
  $total += shift;
}
</pre>

And at first glance, this looks a bit simpler:

<p>
<pre>
use CalculateRunningTotal;

for my $file (glob '*') {
  add_item(-s $file);
}

print "total bytes is $total\n";
</pre>

Here, the <b>$total</b> variable has been exported and aliased from the <b>CalculateRunningTotal</b> package into the <b>main</b> package. (Let's ignore for a moment that even <b>add_item</b> would then be nearly useless.)

<p>The problem with this configuration is that I'm now committing to providing a specific variable with the name <b>$total</b> that can be consulted at any time to provide the running total. Before, with <b>grand_total</b> in place, I had some place to add extra hooks if I desired later, such as the <b>normalize</b> routine in some of the previous versions. But where would I put <b>normalize</b> now?

<p>The data interface is very flexible and very hard to upgrade or update. Sure, I could probably replace $total with a tied variable, but only at some speed expense and increased difficulty of debugging.

<p>Also, consider that I've now increased the <i>scope</i> of <b>$total</b> to include many more lines of code. If in my debugging, I see that the value of <b>$total</b> is now incorrect, I'll have to look over a much broader range of code to see what might be altering it. Some would call this having increased the <em>coupling</em> between the main code and the external package, and increased coupling almost always comes with a debugging cost.
<p>So, when you're designing a module, you should definitely think twice (or three times) when you start to add variables to your <b>@EXPORT</b> list. It may seem to relieve a problem initially, but it will almost always lead to bad things later. Until next time, enjoy! 

<p><i>Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the "must-have" standards: </i>Programming Perl<i>, </i>Learning Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective Perl Programming<i>. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.</i><p>
</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
