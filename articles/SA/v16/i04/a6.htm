<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i04: Solaris 10 Resource Management</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_t1.htm">Table 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_t2.htm">Table 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_t3.htm">Table 3</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_t4.htm">Table 4</a></span></td>
		<td><a href="../../../../source/SA/2007/apr2007.tar"><b class=codeListing>apr2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a6.gif" width="200" height="167" align="right">Solaris<sup>TM</sup> 10 Resource Management</h1>

Scott Cromar
<p>

Solaris 10 Resource Management represents a significant enhancement of the facilities in previous versions. Resources can be managed at a zone, project, task, or process level. This article focuses mainly on project, task, and process-level resource management. Zones are easily a topic all to themselves and will be left to another article.<p>

The new resource management framework is a significant improvement over the traditional SVR4 model in a number of ways, including:<p>


<ul><li> System parameters that were previously set in <strong>/etc/system</strong> and enabled on a reboot can now be enabled on the fly, without any interruption of services.
<li> Workloads can be aggregated and separated on a very granular level, on the fly, and with only minimal setup required.</ul>

<b>Projects and Tasks</b><p>

Projects and tasks were introduced as a separate administrative framework to allow for resource management of collections of processes. (POSIX defines a similar entity in its concept of a session, but projects and tasks allow much more flexibility.)<p>

Projects are collections of related processes. Each project has a unique project ID number. Users and groups may be associated with one or more projects. When processes are started, they inherit their parent's project membership, unless another project is specified.<p>

Some commands (specifically, <strong>login</strong>, <strong>cron</strong>, <strong>setproject</strong> and <strong>su</strong>) may result in another project being assigned. Where the project is not explicitly set with a <strong>setproject</strong> command, the default project is assigned as specified in the <strong>getdefaultproj()</strong> man page (see Figure 1).
<p>

Tasks are collections of processes contained within a project. A new task is started in a project when a new session is opened via any of the following: <strong>login</strong>, <strong>cron</strong>, <strong>newtask</strong>, <strong>setproject</strong>, and <strong>su</strong>. Each process belongs to only one task, which in turn belongs to only one project. As new tasks are created, they are dynamically assigned a numerical taskid. It is possible to have more than one policy in place for a particular object at a time. For example, a process may be assigned both a task and a process constraint. In this case, the smallest container's control is enforced first.
<p>

<b>The Project Database</b><p>

Projects are maintained via the <strong>/etc/project</strong> file (or by the associated NIS or LDAP mapping, if that is specified in the <strong>nsswitch.conf</strong>). The default version of the Solaris 10 <strong>/etc/project</strong> file contains the following projects:
<p>


<ul><li> <strong>system:0::::</strong>(all system processes and daemons)
<li> <strong>user.root:1::::</strong>(all root processes)
<li> <strong>noproject:2::::</strong>(IPQoS)
<li> <strong>default:3::::</strong>(default project assigned to every non-administrative user)
<li> <strong>group.staff:10::::</strong>(project used for all users in the "staff" group)
</ul>

The fields in an <strong>/etc/project</strong> entry are:
<p>


<ul><li> <strong>projname</strong> -- Name of the project.
<li> <strong>projid</strong> -- Unique numerical project identifier less than UID_MAX (2147483647).
<li> <strong>comment</strong> -- Project description.
<li> <strong>user-list</strong> -- Comma-separated list of usernames. (Wildcards are allowed.)
<li> <strong>group-list</strong> -- Comma-separated list of groups. (Wildcards are allowed.)
<li> <strong>attributes</strong> -- Semicolon-separated list of name-value pairs, such as resource controls, in a <strong>name[=value]</strong> format.
</ul>

Resource constraints are set by adding them to the last field of the project entry:<p>

<pre>
example:101::::task.max-lwps=(privileged,100,deny)
</pre>

Changes to <strong>/etc/project</strong> only become available as new tasks are started in a project.
<p>

<b>Managing a Project</b><p>

Table 4 at the end of the article contains a listing of the primary commands used to manage projects and their resource constraints. The following command creates a project named "example" with appropriate user and group memberships and several resource controls set:<p>

<pre>
projadd -p 111 -U <i>username1,username2 -G groupname1,groupname2</i> \
  -c "Example Project" -K "rcap.max-rss=10GB" \
  -K "process.max-file-size=(priv,50MB,deny)" \
  -K "task.max-lwps=(priv,100,deny)" example
</pre>

This command would produce the following entry in <strong>/etc/project</strong>:
<p>

<pre>
example:111:Example Project:username1,username2:groupname1, \
  groupname2:process.max-file-size=(priv,52428800,deny); \
  rcap.max-rss=10737418240;task.max-lwps=(priv,100,deny)
</pre>

We can start up a task under this project, by running the following:<p>

<pre>
newtask -p example <i>command</i>
</pre>

To verify the project governing the current shell, we would run:<p>

<pre>
id -p
</pre>

All existing projects can be listed with:<p>

<pre>
projects -l
</pre>

A process's project id can be displayed with:<p>

<pre>
ps -o projid -p PID
</pre>

To match project or task ids for <strong>pgrep</strong>, <strong>pkill</strong>, or <strong>prstat</strong> commands, use the <strong>-T</strong> or <strong>-J</strong> options:
<p>

<pre>
pgrep -J <I>project-IDs</I>
pkill -T <I>task-IDs</I>
prstat -J
</pre>

A running process can be associated with a new task:<p>

<pre>
newtask -v -p <i>project-name</i> -c <i>PID</i>
</pre>

<b>Resource Controls</b><p>

The Solaris 10 IPC resource management framework was designed to overcome several shortcomings of the older SVR4-based system. Several parameters are now dynamically resized, the defaults have been increased, the names are now more human-readable, resource controls are more granular (rather than being system-wide), and reboots are no longer required for many types of changes.<p>

The Solaris 10 system allows changes to be associated with a project and monitored via <strong>prctl</strong>. Changes can be made on the fly and associated with separate projects and tasks on an individual basis.
<p>

For the purposes of IPC resource management, see Table 1 for the important parameters. (The other parameters are either obsolete or size themselves dynamically.)<p>

Besides being renamed, several of these parameters have had their defaults increased. In many cases, the defaults may be large enough that old <strong>/etc/system</strong> settings may no longer be needed. For example, Oracle 9i requires several settings that are no longer necessary. See Table 2 for a listing of parameters along with Oracle requirements and the new defaults.
<p>

It is likely that <strong>max-shm-memory</strong> parameter will be the only one requiring adjustment. If there are multiple Oracle instances on a single system, it makes sense to set up a specific project for each. The <strong>projmod</strong> command can be used to set the <strong>shmmax</strong> for each project to the desired level (default is 1/4 physical memory):
<p>

<pre>
projmod -sK \
  "project.max-shm-memory=(privileged,<i>gigabytes-shared</i>GB,deny)" \
  <i>project-name</i>
</pre>

To ensure that each instance actually starts up in the proper project, the startup scripts will need to specify a new task with a command like the following:<p>

<pre>
newtask -p <i>project-name</i>
</pre>

We can see how a project's IPC objects are allocated against existing limits, by running: <strong>ipcs -J</strong> .
<p>

The new Solaris 10 resource controls include compatibility interfaces to the old <strong>rlimit</strong>-style resource controls. Existing applications using the old interfaces can continue to run unchanged.
<p>

Additional resource controls are listed in Table 3. A full description of the new resource controls is available on the <strong>resource_controls</strong> man page. To view resource constraints for a process, we would run something like the following:
<p>

<pre>
prctl -n <i>resource-name</i> -i process PID
</pre>

To check resource constraints for the current shell, we could run:<p>

<pre>
prctl $$
</pre>

Or, to temporarily set resource constraints on a particular project, we could run something like:<p>

<pre>
prctl -n <i>project-name</i> -t <i>privilege-level</i> \
  -v <i>value</i> -e <i>action</i> -i project <i>project-name</i>
</pre>

<b>rcapd</b><p>

<strong>rcapd</strong> is a user-level daemon that caps memory usage within a project. Where zones are used, it is only able to manage projects within its own local zone.
<p>

In each zone, <strong>rcapd</strong> can be enabled via <strong>rcapadm</strong> <strong>-E</strong>, which will start rcapd and enable it under SMF so that it will be restarted automatically. <strong>projmod</strong> can be used to set the memory cap for a project:
<p>

<pre>
projmod -s -K rcap.max-rss=sizeMB \
  <i>project-name</i>
</pre>

or the <strong>rcap.max-rss</strong> control can be set directly in <strong>/etc/project</strong>.
<p>

Note that <strong>rcapd</strong> does not account for shared memory in an intuitive way, and Sun is reported to be changing their calculation algorithm. To be safe, allow enough room for shared memory to be included under your cap, and do not depend solely on <strong>rcapd</strong> to keep process memory usage under control.
<p>

<b>Fair Share Scheduler</b><p>

The default user-level scheduling class in Solaris (TS, or "timesharing") attempts to give relatively equal CPU access to all regular processes running on the system. There is some limited ability to regulate process priority using the <strong>nice</strong> command. The Fair Share Scheduler (FSS) implemented in Solaris 9 provides a more structured way to manage process priorities.
<p>

Each project is allocated a certain number of CPU shares via the <strong>project.cpu-shares</strong> resource control. Each project is allocated CPU time based on a weighted average of the active running projects with a non-zero <strong>cpu-shares</strong> setting. The allocation formula for each project is its <strong>cpu-shares</strong> value divided by the sum of the <strong>cpu-shares</strong> values for all active projects. Note that this means that anything with a zero <strong>cpu-shares</strong> value will not be granted CPU time until all projects with non-zero <strong>cpu-shares</strong> are done with the CPU.
<p>

The maximum number of shares that can be assigned to any one project is 65535. The Fair Share Scheduler can be assigned to processor sets. This allows more sensitive control of priorities on a server than processor sets allow on their own. The <strong>dispadmin</strong> command controls the assignment of schedulers to processor sets, using a form like:
<p>

<pre>
dispadmin -d FSS
</pre>

To enable this change now, rather than after the next reboot, run a command like the following:<p>

<pre>
prioctl -s -C FSS
</pre>

The shares assigned to an active project can be dynamically altered with the <strong>prioctl</strong> command. The command would have a form something like:
<p>

<pre>
prioctl -r-n project.cpu-shares -v <i>number-shares</i> -i project \
  <i>project-name</i>
</pre>

The Fair Share Scheduler should not be combined with the TS, FX (fixed-priority) or IA (interactive) scheduling classes on the same CPU or processor set. All of these scheduling classes use priorities in the same range, so unexpected behavior can result from combining FSS with any of these. (There is no problem, however, with running TS and IA on the same processor set.)<p>

<b>Resource Control Parameter Attributes</b><p>

The following types of parameters are defined for resource controls:<p>

<b>Logging</b><p>

Global logging can be enabled by setting <strong>syslog=<i>level</i></strong> with <strong>rctladm</strong>, where <strong><i>level</i></strong> is one of the usual syslog levels: <strong>debug</strong>, <strong>info</strong>, <strong>notice</strong>, <strong>warning</strong>, <strong>err</strong>, <strong>crit</strong>, <strong>alert</strong>, or <strong>emerg</strong>.
<p>

To activate logging on a global resource control facility, run something like:<p>

<pre>
rctladm -e syslog=level resource-name
</pre>

<b>Privilege Levels</b><p>

Each resource control threshold needs to be associated with one of the following privilege levels:<p>

<ul><li> <strong>basic</strong> -- Can be modified by owner of calling process.
<li> <strong>privileged</strong> -- Only modifiable by superuser
<li> <strong>system</strong> -- Fixed for the duration of the operating system instance
</ul>

A given resource control can have an associated threshold for up to three privilege levels.<p>

<b>Actions</b><p>

It is possible to use <strong>rctladm</strong> to specify one of the following actions on a process that violates the control:
<p>

<ul><li> <strong>none</strong> -- No action taken (useful for monitoring).
<li> <strong>deny</strong> -- Denies request.
<li> <strong>signal=</strong> -- Enable a signal. See the <strong>rctladm</strong> man page for a list of allowed signals.
</ul>

<b>Additional Reading</b><p>

Cromar, Scott. 2007. Solaris Troubleshooting and Performance Tuning at Princeton University -- <b>http://www.princeton.edu/~unix/Solaris/troubleshoot/index.html</b><p>

Galvin, Peter Baer. 2003. "Solaris Resource Management", <i>Sys Admin</i> 11(4):49-51.<p>

<em>System Administration Guide: Solaris Containers-Resource Management and Solaris Zones</em> (May 2006). Sun Microsystems Inc.
<p>

Foxwell, Harry J., et al. 2006. <em>The Sun Blueprints Guide to Solaris Containers</em>. Sun Microsystems Inc.
<p>

McDougall, Richard and Mauro, Jim. 2006. <em>Solaris Internals</em>. Prentice Hall.
<p>

<I>Scott Cromar has been working with Unix and Linux for longer than he cares to admit in public. Along the way, he created Princeton University's "Solaris Troubleshooting" Web site: <B>http://www.princeton.edu/~unix/Solaris/troubleshoot/index.html</B>. He can be contacted through that site's blog.</I><P>

</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
