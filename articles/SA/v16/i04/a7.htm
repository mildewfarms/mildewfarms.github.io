<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v16, i04: Process Accounting in SolarisTM 10</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1"></HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_s1.htm">Sidebar
              </a></span></td>
		<td><a href="../../../../source/SA/2007/apr2007.tar"><b class=codeListing>apr2007.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a7.gif" width="200" height="167" align="right">Process Accounting in Solaris<sup>TM</sup> 10</h1>

Marco Marongiu
<p>

In the Unix world, process accounting refers to the capability of the operating system to track system activities by recording statistics of many kinds (e.g., what commands have been run, by whom, for how long, and how many resources they used). Process accounting was conceived (obviously enough) for accounting purposes, so that users could be billed for the resources they used. These days those tracking capabilities are more frequently used for security reasons, so that a systems administrator can easily check who did what.<p>

In this article, I'll show how to set up accounting on Solaris 10. My sources of information are mainly manuals and books, but I've also drawn upon my own experience where those resources left some gaps. I'll also describe some improvements that may be useful in helping you perfect your own setup. I will not cover the format of the reports (because that is already covered in the documents in the references), nor will I talk about how accounting works on other Unix systems.<p>

Some considerations apply, namely:<p>

<ul><li> Despite the fact that process accounting has been available for a long time, chances are that it won't work out-of-the-box even if you followed some kind of "official documentation".
<li> Accounting doesn't come for free in terms of resources; a rough estimate says that the system load could increase up to 20%.
<li> Log files, commands, utilities may differ from system to system; I will focus on Solaris 10. Please check the articles in the references if you wish to adapt this information to other operating systems.</ul>

<b>How Accounting Happens</b><p>

For process accounting to work, accounting capabilities must be present into the kernel, and Solaris 10's kernel has them built-in. This is not enough: accounting must be explicitly activated. Solaris 10 has the /etc/init.d/acct file ready but no correspondent link in the /etc/rc?.d directories, so you will have it activated at boot only if you really want to.<p>

Once accounting has started, you'll need to create reports on a regular basis, running the commands <b>runacct</b> and <b>monacct</b>. The <b>runacct</b> command is actually a script that, run once a day from the crontab, forks a lot of other small scripts, each one playing a particular part in the process of creating the reports. The <b>monacct</b> command works pretty much like <b>runacct</b> and aggregates daily reports data in monthly reports; just like <b>runacct</b>, it runs from a crontab entry once a month. Please note that both scripts should be run by the user adm and not by root; if you accidentally run them as root, you will mess up ownerships and permissions of the files affected by any commands run.<p>

The reports produced by those scripts are left on the file system. It is up to you to get and read them. You should also take care not to leave them alone for so long that they fill the file system or use up all the available inodes.<p>

It's not easy to draw the complex relationships between <b>runacct</b>, <b>monacct</b>, and the other scripts. You'll find a simplified diagram in ®leen Frisch's <i>Essential System Administration</i> [1] (and yes, I do mean "simplified"...).<p>

<b>How to Set Up Accounting: What the Manuals Say</b><p>

The following is a mix of the information you can find in Frisch and in Sun Microsystems' System Administration Guide [2]; both of these lack something here and there. Even by merging them you don't get all the information you need; nevertheless, they are a very good sources of information.<p>

You should first make sure that process accounting starts at the system boot. To do this, you just create a couple of links to /etc/init.d/acct. The manuals say to create a hard link, but I prefer using symbolic links:<p>

<pre>
ln -s /etc/init.d/acct /etc/rc0.d/K22acct
ln -s /etc/init.d/acct /etc/rc2.d/S22acct
</pre>

Once you've done that, you should add some entries to a couple of crontabs. Here I followed the indications found in Frisch and added these lines to the tab for the user adm:<p>

<pre>
#####################################################################
# Information on the following entries comes from
# "Essential System Administration", 3rd Edition, by ®leen Frisch
# edited by O'Reilly and Associates
#####################################################################
# control accounting file size
30 3 * * *      /usr/lib/acct/ckpacct
# process accounting raw data
30 4 * * *      /usr/lib/acct/runacct 2> /var/adm/acct/nite/fd2log
# generate monthly reports
30 5 1 * *      /usr/lib/acct/monacct
</pre>

Next, add a line for the <b>dodisk</b> command to root's crontab as well. The <b>dodisk</b> command collects samples of disk usage. Frisch's book and Sun's document suggest different settings. The settings I suggest are different because I needed them to be as frequent as possible (once a day):<p>

<pre>
# One sample per day
30 22 * * * /usr/lib/acct/dodisk
</pre>

Note that running <b>dodisk</b> more than once a day is a bad idea and doesn't produce the expected results.<p>

The next step is to update the /etc/acct/holidays file. The format of the file is slightly unusual:<p>

<ul><li> Lines prefixed with an asterisk are comments (this is nothing new in Solaris...).
<li> The first non-comment line is a three-field record that contains the current year, and the time of the day when prime time starts and ends.
<li> Subsequent non-comment lines are the holidays for the current year; each one is a two-field record that contains a date in the current year and a readable label for the holiday. Please note that the accounting system only considers the first field; the second one is only for your convenience.</ul>

This is my <b>holidays</b> file today:<p>

<pre>
* @(#)holidays  January 1, 2005
*
* Prime/Nonprime Table for UNIX Accounting System
*
* Curr  Prime   Non-Prime
* Year  Start   Start
*
  2006  0900    1730
*
* only the first column (month/day) is significiant.
*
* month/day     Company
*               Holiday
*
1/1             New Years Day
12/25           Christmas
</pre>

As you can see, I didn't put a lot of effort into changing this file. See the sidebar "Why Overlooking /etc/acct/holidays Is a Bad Idea" to understand why this file is so important.<p>

Finally, you need to create a small group of directories; if you are using a bash shell you can make them quickly this way:<p>

<pre>
mkdir -m 750 -p /var/adm/acct/{fiscal,nite,sum}
chown adm:adm /var/adm/acct/{fiscal,nite,sum}
</pre>

Otherwise, you will have to create /var/adm/acct, if it's not already there, and then create the three subdirectories <b>fiscal</b>, <b>nite</b>, and <b>sum</b> inside it. Don't forget to give them the correct ownerships and permissions.<p>

From the documentation, it seems that you are all set, so you just need to start process accounting by running:<p>

<pre>
/etc/init.d/acct start
</pre>

Unfortunately, that's not the case -- there's more to do.<p>

<b>How to Set Up Accounting: What the Manuals Don't Say</b><p>

What's missing in the above setup is one very important point. We said that <b>runacct</b> and <b>monacct</b> run as user adm. The home directory for adm is /var/adm and... this user has no rights on it! It may not even create files or directories!<p>

There are many ways to fix this, and I chose the following one:<p>

<pre>
chmod g+w /var/adm
chgrp adm /var/adm
</pre>

The second thing that may annoy you is that you have to go and find the reports if you want to read them, and you should also check the /var/adm/acct/nite/fd2log file to know whether something went wrong. Wouldn't it be better if the reports were mailed to you once they were produced? Wouldn't it be good if the fd2log was mailed only when it contained something requiring our attention?<p>

The third thing is that some reports might be missing. In my case, I wanted a log of all the commands run by users along with the indication of who ran them. I tried to achieve this (and more) functionality by applying information about <b>make</b> that I'd learned earlier. I had just finished reading Tom Limoncelli's excellent book <i>Time Management for System Administrators</i> [3], which had a small section dedicated to an introduction to GNU <i>make</i>, so I decided to apply some things the book had taught me.<p>

<b>Towards the Perfect Setup: Refining your Configuration</b><p>

Please note that the Solaris <b>make</b> command won't work, so you'll need to install the GNU version of <b>make</b>.<p>

Place the file shown in Listing 1 into /var/adm and name it "Makefile". You should also change adm's crontab accordingly:<p>

<pre>
#ident  "@(#)adm        1.5     92/07/14 SMI"   /* SVr4.0 1.2   */
#
# The adm crontab file should contain startup of performance collection
# if the profiling and performance feature has been installed.
#
#####################################################################
# Information to build this file comes from
# "Essential System Administration", 3rd Edition, by ®leen Frisch
# edited by O'Reilly and Associates
#####################################################################
# control accounting file size
30 3 * * *      /usr/lib/acct/ckpacct
# process accounting raw data
30 4 * * *      /usr/local/bin/make runacct > /dev/null
# generate monthly reports
30 5 1 * *      /usr/local/bin/make monacct > /dev/null
</pre>

It hasn't changed much, but the makefile needs some deeper explanation.<p>

<b>Understanding the makefile</b><p>

In the first three lines, set three static variables that will come handy later. The subsequent three lines dynamically set three other variables:<p>

<pre>
DAILY = $(shell ls -1tr $(SUMDIR)/rprt* | tail -1)
MONTHLY = $(shell ls -1tr $(FISCDIR)/fiscrpt* | tail -1)
TODAY = $(shell date '+%d')
</pre>

The $(shell ...) construct is used to initialize a variable with the output of a shell command. Therefore DAILY contains the name of the more recent rprt file in the SUMDIR directory, that is: the latest daily report calculated. Similarly, MONTHLY contains the name of the latest monthly report. TODAY is the monthday of the day you run <b>make</b> against this <b>make</b>file.<p>

The last assignment to the variable MAKE is just a shortcut. I use it so that I don't have to rely on the correct setting of the environment variable PATH to use the correct version of <b>make</b>.<p>

Figure 1 shows the relationships between the targets in the makefile -- the arrows show how one target invokes another. We'll go through them not in the order they appear in the makefile, but from the bottom of the figure to the top (from the more specific ones to the general ones).<p>

<ul><li> The target report.daily does some sanity checks and, after that, sends the latest daily report to root. Of course, you can send your report to anyone you like -- just customize the makefile.
<li> Similarly, report.monthly sends the latest monthly report to root.
<li> <b>runacct.log</b> sends to root the contents of the fd2log file if it's not zero in size.
<li> <b>reports</b> calls unconditionally the target report.daily and also calls the report.monthly target if it's the first day of the month.
<li> <b>monacct</b> calls the <b>monacct</b> command and, once it's over, calls the report.monthly target to send the report that <b>monacct</b> just produced.</ul>

The <b>runacct</b> target is slightly more complex than others and deserves a mode detailed explanation.<p>

<b>The runacct Target</b><p>

In the <b>runacct</b> target, we are not just running the homonymous command. The target starts by running the <b>acctcom</b> command and sending the results to root. The <b>acctcom</b> command, when run without any options, sends a report of the commands run in the past 24 hours, saying which commands were run, by whom, whether they were run with superuser privileges, when they were run, for how long, and also provides a summary of the resources used by the process. In my opinion, this is an important report, but the standard system doesn't create it by default. For more information about <b>acctcom</b> see the online manual.<p>

After that, you will find the classical execution of <b>runacct</b>, followed by the call to the two targets runacct.log and report.daily. By invoking these targets, you will get the daily report and the log of <b>runacct</b> errors.<p>

<b>Further Enhancements</b><p>

You could optimize this even more, for example, by collapsing the three calls in adm's crontab in a single call to <b>make</b> and letting <b>make</b> look at the date and decide whether it needs to run <b>runacct</b> or both <b>runacct</b> and <b>monacct</b>. These enhancements are left as an exercise to the reader (hint: just look at the reports target and extend it, that's pretty easy).<p>

You may also want to add a cleanup job that could be run every day or on the first day of every month to remove the older reports from the file system (or to create a compressed archive of them). This can also be achieved by customizing the <b>make</b>file, for example, by adding a new target to it and calling it automatically when appropriate.<p>

The number of things you can do depends just on your imagination and needs; feel free to use this makefile as a framework to build upon.<p>

<b>Conclusion</b><p>

As you can see, process accounting can help you monitor the activities on your system and produce many different reports. These reports are useful for statistics purposes or to investigate incidents. Accounting is built in the system and is also a robust and complete solution, because it gathers information from many sources down to the kernel level. On the other hand, it does add load on your system, and you need to be aware of that if you are going to enable accounting on a busy machine. Accounting is also not fully documented, but I hope to have addressed that problem with this article.<p>

<b>Acknowledgements</b><p>

The author thanks Tony Mobily from <i>Free Software Magazine</i> (<b>http://www.freesoftwaremagazine.com/</b>) for proofreading this article and catching a number of mistakes.<p>

<b>References</b><p>

1. Frisch, A. 2002. <i>Essential System Administration</i>, Third Edition. O'Reilly & Associates.<p>

2. SUN Microsystems: System Administration Guide Advanced Administration. In the Solaris 10 System Administrator Collection -- <b>http://docs.sun.com/app/docs/doc/817-0403</b><p>

3. Limoncelli, T.A. 2005. <i>Time Management for System Administrators</i>. O'Reilly & Associates.<p>

4. Siever, E., S. Spainhour, J.P. Hekman, and S. Figgins. 2000. <i>Linux in a Nutshell</i>, Third Edition. O'Reilly & Associates. (Note that some information about <b>make</b> and makefiles came from this book, too.)<p>

<i>Marco Marongiu graduated in applied mathematics in 1997; he's now a full-time system administrator for a European ISP. He's also a Perl programmer, technical writer, and lecturer by passion and is interested in Web- and XML-related technologies. Marongiu has been a Debian User since version 1.1.10 and helped found the GULCh Linux Users Group (Gruppo Utenti Linux Cagliari), the first one in Sardinia. He recently became a father to his first son, Andrea; and he's been trying to reorganize his life ever since, so that he can start writing technical articles and holding seminars again.</i><p>

</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
