<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i03: SNMP Trap Handling with Nagios</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2005/mar2005.tar"><b class=codeListing>mar2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a7.gif" width="200" height="170" align="right">SNMP 
              Trap Handling with Nagios</B></h1>
            <P> <I>Francois Meehan</i>
            <p> My company has been very successful in providing network-monitoring 
              solutions based on Nagios/Netsaint. For environments that required 
              SNMP trap handling, however, the technique suggested in Nagios's 
              documentation was too cumbersome. That technique requires coding 
              for each individual trap message that needs to be monitored and, 
              for those clients, we could only suggest making use of commercial 
              solutions, all of which come with high price tags and complicated 
              implementations.
            <P> Recently, however, we discovered Alex Burger's "SNMP Trap Translator" 
              project that extends Net-SNMP. Coupled with Risto Vaarandi's event 
              correlation tool called "SEC", a small Python script, and, of course, 
              Nagios, we have put together a very scalable, efficient alternative. 
              The whole process is pictured in Figure 1.
            <P> Please note that we used Red Hat advanced server for this particular 
              installation, but this solution should be adaptable to other modern 
              Linux distributions.
            <P> 
            <P> Pre-requisites:
            <P> 
            <P> 1. Net-SNMP with snmptrapd configured.<br>
              2. SNMPTT, SNMP trap translator.<br>
              3. SEC -- Simple event correlator.<br>
              4. Nagios.<br>
              5. Mib definition files for the equipment or software you need to 
              monitor.
            <P> 
            <P> One of the beauties of this solution is that we can use the event 
              severity set by the mib designer. Nagios will always report the 
              event status based on this information.
            <P> <B>Net-SNMP</B>
            <P> Net-SNMP, formally known as UCD-SNMP, is installed by default 
              on most Linux distributions. Here we are specifically interested 
              in configuring the trap receiver portion of the installation. The 
              trap receiver is a daemon that receives its startup configuration 
              in /etc/rc.d/init.d/snmptrapd. We modified the following line:
            <P> 
            <pre>
OPTIONS="-s -u /var/run/snmptrapd.pid"
</pre>
            To this:
            <P> 
            <pre>
OPTIONS="-On -u /var/run/snmptrapd.pid"
</pre>
            As quoted from SNMP Trap Translator documentation: "The -On is recommended. 
            This will make snmptrapd pass OIDs in numeric form and prevent SNMPTT 
            from having to translate the symbolic name to numerical form."
            <P> We then modified the file /usr/share/snmp/snmptrapd.conf by adding 
              the following line:
            <P> 
            <pre>
traphandle default /usr/sbin/snmptt
</pre>
            When the modification is done, the deamon must be restarted for the 
            changes to take effect.
            <P> <B>SNMP Trap Translator</B>
            <P> Install the trap translator by following the supplied instructions 
              and then configure the file /etc/snmp/snmptt.ini by altering the 
              some of the parameters as follows:
            <P> 
            <pre>
mode = standalone
dns_enable = 1
strip_domain = 1
net_snmp_perl_enable = 1
translate_value_oids = 1
translate_enterprise_oid_format = 1
translate_trap_oid_format = 1
translate_varname_oid_format = 1
log_enable = 1
syslog_enable = 1
syslog_level = info
snmptt_conf_files =  /etc/snmp/snmptt.conf
</pre>
            Once the trap translator is successfully installed, you need to feed 
            some mib trap definitions to it. For example, assume that you have 
            the mib for the APC UPS "powernet361.mib":
            <P> 
            <pre>
./snmpttconvertmib --in=/usr/share/snmp/mibs/powernet361.mib --out=/etc/snmp/snmptt.conf
</pre>
            The next time you add mib definitions using this command, the translated 
            mib will be appended to the snmptt.conf file. You can use a different 
            output file but, if you do so, then do not forget to change the snmptt.ini. 
            For example, you can do:
            <P> 
            <pre>
snmptt_conf_files = &lt;&lt;END
/etc/snmp/snmptt.conf.generic
/etc/snmp/snmptt.conf.compaq
/etc/snmp/snmptt.conf.cisco
/etc/snmp/snmptt.conf.hp
/etc/snmp/snmptt.conf.3com
END
</pre>
            When a trap occurs, the trap translator will output the information 
            received from the trap to syslog and, at this point, SEC will take 
            over.
            <P> <B>SEC</B>
            <P> SEC was installed before we discovered SNMP Trap Translator. We 
              had used it as an event filter-correlator in a centralized syslog 
              configuration to interface some events with Nagios. It may be possible 
              to have the translator interface directly with Nagios, but we thought 
              we would lose a lot in terms of flexibility if we did this.
            <P> By using SEC, we can alter the flow of messages and do things 
              such as:
            <P> 
            <ul>
              <li> For a non-stable machine or non-production equipment, you can 
                delay alarms that occur at night until morning. 
              <li> If you are suddenly bombarded by traps from a device, SEC can 
                be used to regulate the flow.
            </ul>
            <P> Note that we chose to install SEC in the "/opt" directory.
            <P> We start SEC with the following statement in the rc.local file:
            <P> 
            <pre>
/opt/sec/sec.pl -input=/var/log/messages -conf=/opt/sec/sec.conf \
  -detach -log=/var/log/sec.log
</pre>
            In our sec.conf file is the rule that handles SNMP traps:
            <P> 
            <pre>
# Snmptrap event translated by snmptraptt
type=Single
ptype=RegExp
pattern=snmptt.*(Normal|INFORMATIONAL|MINOR|WARNING|SEVERE|MAJOR|CRITICAL) \
  \"Status Events\" (\w+) \- (.*)
desc=snmptrap received from $2
action=shellcmd /opt/nagios/libexec/eventhandlers/snmptraphandling.py \
  $2 $1 "$3"
  </pre> <b>snmptraphandling.py</B>
            <P> The snmptraphandling.py Python script performs the following actions 
              for us:
            <P> 
            <ul>
              <li> Formats the output of SEC 
              <li> Obtains the current time in epoch format 
              <li> Translates the severity code 
              <li> Posts the data into the Nagios command file
            </ul>
            <P> See Listing 1 for complete code.
            <P> <B>Nagios</B>
            <P> This is the delicate part. Great care must be taken when monitoring 
              traps to get it right. Given the high security standards of the 
              customer for which we did this initial setup, one requirement was 
              that all major events had to be audited. Thus, for each Nagios host 
              capable of sending traps, we configured three services: one for 
              critical, one for warnings, and one for "OK" events. This way, when 
              a critical or warning event occurs, the systems administrators must 
              submit a passive check result "OK" and enter a brief description 
              of what action was taken to correct the situation in order to reset 
              the event. This information is then kept in the Nagios event log.
            <P> Because of the number of SNMP-capable devices, we have made use 
              of service templates as shown below:
            <P> 
            <pre>
define service {
    use    passive-check-template
    name   generic-snmptrap
    service_description    snmp_trap_handling
    is_volatile 1
    check_period    none
    notification_interval    120
    notification_options    w,u,c,r
    notification_period    24x7
    check_command    passive_check_missing
    max_check_attempts    1
    check_freshness    0
    stalking_options    o,w,u,c
    register 0
}
</pre>
            Note the "stalking_options" parameter. Without it, if two or more 
            traps are received quickly one after the other, the Nagios administrator 
            will receive only alerts from the first trap and thus will not get 
            duplicate messages.
            <P> For each host to be monitored, we created the following services 
              that refer to the previous service template as shown above:
            <P> 
            <pre>
define service {
    use    generic-snmptrap
    host_name     my_example_host
    contact_groups    my_example_group
    service_description    snmp_trap_handling_ok
}

define service {
    use    generic-snmptrap
    host_name    my_example_host
    contact_groups    my_example_group
    service_description    snmp_trap_handling_warning
}

define service {
    use    generic-snmptrap
    host_name     my_example_host
    contact_groups    my_example_group
    service_description    snmp_trap_handling_critical
}
</pre>
            To test the whole solution, we used an APC UPS with an on-board management 
            card. After we configured the trap destination and community parameters, 
            we began our tests. We simply disconnected the UPS from the mains, 
            and Nagios immediately started to receive events and generate alarms. 
            We then fed mib definitions for most of our major equipment vendors 
            and, since then, have witnessed many different alarms for disks, cooling 
            fans, and a host of other events.
            <P> Because we are using Nagios to monitor processes, it only makes 
              sense to use it to monitor the presence of SEC and snmptrapd processes. 
              This gives Nagios a brand new range of opportunities and makes our 
              customer really happy.
            <P> This solution is only possible because smart individuals take 
              the time to write high-quality software, such as Nagios, SNMP Trap 
              Translator, Net-SNMP, and SEC.
            <P> <B>References</B>
            <P> Nagios -- <B>http://nagios.org/</B>
            <P> Net-SNMP -- <B>http://www.net-snmp.org/</B>
            <P> SEC -- <B>http://kodu.neti.ee/~risto/sec/</B>
            <P> SN MP Trap Translator -- <B>http://www.snmptt.org/</B>
            <P> <I>Francois Meehan has more than 20 years of experience in computer 
              operations, covering midrange computers to PCs, from AIX to OpenBSD, 
              Linux, and Windows operating systems. He founded his own consulting 
              company, CEDVAL Info Inc., specializing in network monitoring and 
              open source solutions integration. CEDVAL Info customers are mostly 
              in the pharmaceutical and manufacturing industries in the Montreal 
              region and the United States. Francois, his wife, Lise, and their 
              two children live in Notre-Dame-de-l'Ile-Perrot, an island on the 
              St. Lawrence River west of Montreal. Francois can be contacted at: 
              <B>francois@cedval.org</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
