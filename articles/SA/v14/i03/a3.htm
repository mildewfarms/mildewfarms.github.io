<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i03: Understanding the Command Line</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2005/mar2005.tar"><b class=codeListing>mar2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Understanding 
              the Command Line</B></h1>
            <P> <I>Randal L. Schwartz</i>
            <p> In past columns, I've talked a lot about the Perl language, but 
              have never said much about <B>perl</B> at the Unix shell command 
              line. So, let's fix that by looking at some commonly used command-line 
              constructs for Perl.
            <P> Let's take the simplest invocation:
            <P> 
            <pre>
perl my-script
</pre>
            This invokes <B>my-script</B>, using the relative or absolute path 
            to the script as given, thus not using the <B>PATH</B> in any way. 
            We can include arguments to the script:
            <P> 
            <pre>
perl my-script arg1 arg2 arg3
</pre>
            This sets up <B>@ARGV</B> to be the three individual values of <B>arg1</B>, 
            <B>arg2</B>, and <B>arg3</B>, as if we had said:
            <P> 
            <pre>
@ARGV = qw(arg1 arg2 arg3);
</pre>
            If we want a space within one of the values, we need to use shell 
            quoting rules:
            <P> 
            <pre>
perl my-script 'arg1a arg1b' arg2
</pre>
            This passes two arguments now, not three. We get the same result with:
            <P> 
            <pre>
perl my-script arg1a\ arg1b arg2
</pre>
            using a backslash to quote the space between the arguments. If there 
            are any shell wildcard ("glob") characters, the shell expands them 
            before calling our program:
            <P> 
            <pre>
perl my-script *.html
</pre>
            which might turn into (given three matching files):
            <P> 
            <pre>
@ARGV = qw(index.html problem.html results.html);
</pre>
            Note that Perl has no clue that a shell wildcard was involved here; 
            it's as if we had typed the three names individually.
            <P> Perl doesn't interpret the <B>@ARGV</B> values in any particular 
              way. They could be keywords, filenames, or some combination of the 
              two. Traditionally, leading <B>@ARGV</B> elements that begin with 
              a minus are considered "options", which we can process with modules 
              such as <B>Getopt::Std</B> or <B>Getopt::Long</B>.
            <P> We can also have options to Perl itself by placing leading-minus 
              values to the left of the script name. For example, we can invoke 
              the debugger by adding <B>-d</B>:
            <P> 
            <pre>
perl -d my-script arg1 arg2 arg3
</pre>
            Now, the program is run under the normal Perl debugger. We can pick 
            an alternate debugger (or module using the debugging interface for 
            other analysis) with a colon argument following the <B>-d</B>:
            <P> 
            <pre>
perl -d:DProf my-script
</pre>
            This command selects the <B>Devel::DProf</B> module as the alternate 
            "debugger", invoking a profiling of the Perl code.
            <P> Another common option ("switch") is <B>-c</B>, which <I>compiles</I> 
              a Perl script without executing it:
            <P> 
            <pre>
perl -c my-script
</pre>
            You would do this to verify that the syntax of your script is good 
            before actually moving it into place for production, including ensuring 
            that all <B>use</B>'ed modules were also available. Any modules loaded 
            at runtime (via <B>require</B>) or code constructed at runtime (like 
            <B>eval</B>) wouldn't be checked, however. Also, all <B>BEGIN</B> 
            and <B>CHECK</B> blocks are executed, so "compile only" is merely 
            a casual definition.
            <P> You can enable warnings on the command line with <B>-w</B>:
            <P> 
            <pre>
perl -w my-script
</pre>
            although this is more frequently handled within the program as:
            <P> 
            <pre>
use warnings;
</pre>
            Sometimes, your program is small enough that it makes sense to include 
            it entirely on the command line. Simply throw an <B>-e</B> switch 
            there instead of the filename, and you're set:
            <P> 
            <pre>
perl -e 'print "Hello world!\n"'
</pre>
            Note that the quoting can get a bit weird. I typically use single 
            quotes to keep the single argument to <B>-e</B> together and Perl's 
            double quotes within the argument for Perl quoting. Sometimes, alternate 
            quoting (via <B>q//</B> can come in handy):
            <P> 
            <pre>
perl -e 'print qq/Hello world!\n/'
</pre>
            Multiple <B>-e</B> arguments are concatenated, with only a space character 
            between:
            <P> 
            <pre>
perl -e print -e 'qq/Hello!\n/'
</pre>
            By now, the number of options is a bit hard to remember. Luckily, 
            Perl has a built-in help message, available with <B>-h</B>:
            <P> 
            <pre>
perl -h
</pre>
            And for a few more switches that aren't about running programs, let's 
            look at the version information with <B>-v</B> in short form:
            <P> 
            <pre>
perl -v
</pre>
            and in long form with <B>-V</B>:
            <P> 
            <pre>
perl -V
</pre>
            The <B>-V</B> switch also gives us access to the various configuration 
            options that Perl was built with and that it uses to compile binary 
            extensions and install local programs. For example, to get the C compiler 
            used to compile Perl:
            <P> 
            <pre>
perl -V:cc
</pre>
            and to get all the options related to where binaries are found or 
            installed:
            <P> 
            <pre>
perl -V:'.*bin'
</pre>
            The regular expression pattern here is in quotes so that the shell 
            doesn't try to expand it as a filename pattern. The output is in a 
            form that can be evaluated by a Bourne-style shell easily:
            <P> 
            <pre>
eval 'perl -V:'.*bin''
echo $sitebin
</pre>
            No attempt is made to accommodate C-shell-style shells, of course.
            <P> Modules can be included from the command line with <B>-M</B>:
            <P> 
            <pre>
perl -MFile::Find -e 'find sub { print $File::Find::name, $/ }, "."'
</pre>
            The <B>-MFile::Find</B> is equivalent to including:
            <P> 
            <pre>
use File::Find;
</pre>
            in the resulting script. If you don't want the imports (such as <B>find</B> 
            in this case), use lowercase <B>-m</B> or be specific with a trailing 
            <B>=</B> syntax:
            <P> 
            <pre>
perl -MFile::Find=find,finddepth -e '...'
</pre>
            which turns into:
            <P> 
            <pre>
use File::Find qw(find finddepth);
</pre>
            Note the automatic comma splitting. Nice.
            <P> For text processing from a series of one or more files, we can 
              add <B>-n</B>, which puts a wrapper around our program that looks 
              like:
            <P> 
            <pre>
LINE:
  while (&lt;&gt;) {
    ... # rest of your program here
  }
</pre>
            In other words, the <B>@ARGV</B> list is interpreted as a series of 
            files to be opened, and each line is placed in <B>$_</B> until all 
            the lines are processed. To print each line with a sequential line 
            number in front, we can use the <B>$.</B> variable for the numbers:
            <P> 
            <pre>
perl -n -e 'print "$.: $_"' file1 file2 file3
</pre>
            We can bundle the switches that don't take arguments together with 
            the following switch, as in:
            <P> 
            <pre>
perl -ne 'print ...'
</pre>
            Another way to approach this problem is the <B>-p</B>, which adds 
            a <B>print</B> at the end of the loop:
            <P> 
            <pre>
LINE:
  while (&lt;&gt;) {
    ... # your program here
    print;
  }
</pre>
            So, we could just substitute the line number into the beginning of 
            each line:
            <P> 
            <pre>
perl -pe 's/^/$.: /' file1 file2 file3
</pre>
            Going one step further, we could rewrite these modified lines back 
            into the original files with the "inplace edit" switch: <B>-i</B>:
            <P> 
            <pre>
perl -i.bak -pe 's/^/$.: /' file1 file2 file3
</pre>
            Now, <B>file1</B> will be renamed <B>file1.bak</B>, and the new updated 
            contents written to a new <B>file1</B>. Similarly, <B>file2</B> becomes 
            <B>file2.bak</B>, and <B>file3</B> becomes <B>file3.bak</B>.
            <P> If you leave off the option to <B>-i</B>, the "inplace edit without 
              backup file" mode is enabled, which can save space but gives you 
              no way to go back if you've toasted your files. Be very careful.
            <P> The line-looping modes (<B>-n</B> and <B>-p</B>) respect the current 
              value of <B>$/</B> to read a "line", which defaults to <B>\n</B>. 
              However, you can specify alternate values with the <B>-0</B> (that's 
              a zero) switch. By default, <B>-0</B> sets the delimiter to the 
              NUL byte, which can be handy with GNU find's <B>-print0</B> switch 
              (which delimits the filenames with NUL bytes):
            <P> 
            <pre>
find . -name '*.html' -print0 | perl -n -0 -e unlink
</pre>
            Any octal value can also follow <B>-0</B>, indicating the corresponding 
            ASCII character. For example, to delimit <B>only</B> on spaces, use 
            <B>-040</B>.
            <P> If the value is <B>-0777</B>, then <B>$/</B> is set to <B>undef</B>, 
              slurping the entire file as one "line". Thus, we can wrap the entire 
              file with a BEGIN/END marker as:
            <P> 
            <pre>
perl -0777 -pi.bak -e '$_ = "BEGIN\n$_\nEND\n"' file1 file2 file3
</pre>
            Here, the statement is executed three times, with <B>$_</B> being 
            the entire contents of first <B>file1</B>, then <B>file2</B>, and 
            <B>file3</B>.
            <P> Note that the following command mangles the lines, because the 
              concatenate is happening <B>after</B> the terminating newline:
            <P> 
            <pre>
perl -pe '$_ .= "END"' file1 file2 file3
</pre>
            But we can fix that with <B>-l</B>, which chomps each line as read, 
            and then restores the delimiter on a <B>print</B>:
            <P> 
            <pre>
perl -l -pe '$_ .= "END"' file1 file2 file3
</pre>
            Now the <B>$_</B> contains only the line without a newline, and the 
            concatenate happens in the right place, before the newline that gets 
            automatically added by the implicit <B>print</B> at the end of the 
            implicit loop.
            <P> Well, I hope you enjoyed this brief tour through the most common 
              Perl command-line options. You can read more at the <B>perlrun</B> 
              manpage, available either as <B>man perlrun</B> or <B>perldoc perlrun</B> 
              at your prompt. Until next time, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
