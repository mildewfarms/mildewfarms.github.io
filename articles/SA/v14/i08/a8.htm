<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i08: Queuing Jobs with qjob</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_s1.htm">Sidebar</a></span></td>
		<td><a href="../../../../source/SA/2005/aug2005.tar"><b class=codeListing>aug2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Queuing 
              Jobs with qjob</h1>
            <P> Ed Schaefer and John Spurgeon
            <P> Most systems administrators are familiar with using the cron facility 
              or the <B>at</B> command to schedule jobs. Sometimes an attempt 
              is made to schedule jobs so they don't conflict with one another. 
              For example, it may be necessary to limit the number of resource-intensive 
              jobs running at the same time to avoid overloading the system. Or 
              you may need to prevent jobs from simultaneously accessing a shared 
              resource. This can be challenging, especially if commands must be 
              run frequently and the time they take to complete is significant 
              and variable.
            <P> One solution is to create a wrapper script that executes commands 
              in series. This can solve the problem if there is a way to guarantee 
              that only one instance of the wrapper script executes at a time. 
              However, the situation becomes more complicated if some jobs need 
              to be run more often than others.
            <P> We've developed a shell script called qjob (Listing 1), which 
              places jobs in a FIFO queue and executes them when they are removed 
              from the queue. This simplifies the scheduling problem and gives 
              you more flexibility than a wrapper script. With qjob, you can configure 
              how many jobs are allowed to run at once for a given queue. If only 
              one job can run at a time, then the queue is analogous to a checkout 
              lane at a supermarket where all the customers wait while a cashier 
              services the person at the head of the line. If more than one job 
              can run at once, then the queue behaves like a single line at a 
              bank with multiple tellers servicing customers simultaneously.
            <P> <b>Options</b>
            <P> The following options are supported by qjob:
            <P> 
            <P> <B>-j job_name</B> -- <B>job_name</B> is an alias that identifies 
              the command to be executed. If <B>job_name</B> is not specified, 
              it defaults to the name of the command.
            <P> <B>-c num_clones</B> -- <B>num_clones</B> is the number of times 
              the same job can be waiting in the queue or running. The default 
              value is 1. In other words, if a job is currently running or waiting 
              in the queue, then by default another instance of the same job will 
              not be allowed in the queue. This can prevent the size of the queue 
              from growing out of control in case jobs are entering the queue 
              more rapidly than they are leaving it.
            <P> <B>-q queue_name</B> -- Qjob can manage multiple queues. <B>queue_name</B> 
              identifies a particular queue. If <B>queue_name</B> is not specified, 
              then "default_queue" is the name of the queue.
            <P> <B>-n num_tellers</B> -- The <B>-n num_tellers</B> specifies the 
              number of jobs that can run simultaneously for a given queue. The 
              default value is 1.
            <P> <B>-d</B> -- The <B>-d</B> option turns on debugging causing qjob 
              to print informational messages to standard output.
            <P> <b>Implementation</b>
            <P> The main function in the qjob script is called queue_job. After 
              qjob processes the command-line arguments, the queue_job function 
              is called as follows:
            <P> 
            <pre>
queue_job $job_name $queue_name $num_tellers $num_clones "$command"
</pre>
            Within the queue_job function, semaphores are utilized to implement 
            queues. (See "Implementing Semaphores in the Shell", <I>Sys Admin</I>, 
            August, 2004.)
            <P> The heart of the queue_job function is two nested semaphores:
            <P> 
            <pre>
 if semaphore -t 0 -I $num_clones -P ${job_name}_already_queued
  then
      # ... then $job_name takes a number and waits to be serviced.
      # When a teller is free ...
      if semaphore -q -s 10 -I $num_tellers -P $queue_name
      then
      .
      .
</pre>
            The outer call uses a semaphore to control the number of clones allowed. 
            The semaphore name is set by appending the string "_already_queued" 
            to the job_name variable.
            <P> If the outer call is successful, the inner call uses a counting 
              semaphore with $num_tellers resources to implement a queue. If the 
              inner call is successful, $command executes when a resource is obtained. 
              After $command completes, the resources for the two semaphores are 
              released.
            <P> <b>Examples</b>
            <P> In the following examples, we use two shell scripts, withdraw.ss 
              and deposit.ss, to demonstrate how qjobs works. Here is the source 
              code for the two scripts:
            <P> 
            <pre>
#!/bin/ksh

# withdraw.ss
filename=/tmp/w"$1"
touch $filename
while [[ -f $filename ]]
do
    sleep 5
done
exit

#!/bin/ksh

# deposit.ss
filename=/tmp/d"$1"
touch $filename
while [[ -f $filename ]]
do
    sleep 5
done
exit
</pre> <b>Example 1</b>
            <P> Execute qjob with the debug flag set and assign withdraw.ss with 
              argument 11 to the demo_que queue:
            <P> 
            <pre>
/usr/local/bin/qjob -q demo_que -d withdraw.ss 11 &amp;

Now serving job withdraw.ss from queue demo_que.
</pre>
            Now, assign deposit.ss with argument 22 to the demo_que:
            <P> 
            <pre>
/usr/local/bin/qjob -q demo_que -d deposit.ss 22 &amp;
</pre>
            Executing the <B>semaphore -l</B> command lists the objects assigned 
            to the queue:
            <P> 
            <pre>
semaphore -l demo_que
</pre>
            returns:
            <P> 
            <pre>
Semaphore demo_que has 1 resource.
  Resource 0 is taken by PID 28879.
  /bin/ksh /usr/local/bin/qjob -q demo_que -d withdraw.ss 11
Queue for semaphore demo_que:
  1. PID 29102 has been waiting since 2005-05-12 08:06:01.
     /bin/ksh /usr/local/bin/qjob -q demo_que -d deposit.ss 22
</pre>
            Because the queue has only the default 1 resource, deposit.ss is queued 
            waiting for withdraw.ss to finish.
            <P> Because the number of clones for this resource is the default 
              1, assigning another instance deposit.ss to demo_que fails:
            <P> 
            <pre>
/usr/local/bin/qjob -q demo_que -d deposit.ss 33 &amp;

Can't put job deposit.ss in queue demo_que.
1 instance of job deposit.ss is waiting in queue demo_que.
</pre>
            Removing /tmp/w11 file terminates the withdraw.ss script, and because 
            the debug flag is set, the following displays:
            <P> 
            <pre>
Now serving job deposit.ss from queue demo_que.
</pre>
            Again, executing <B>semaphore -l demo_que</B> assures us that deposit.ss 
            now is running:
            <P> 
            <pre>
Semaphore demo_que has 1 resource.
  Resource 0 is taken by PID 13583.
  /bin/ksh /usr/local/bin/qjob -q demo_que -d deposit.ss 22
  </pre> <b>Example 2</b>
            <P> Let's demo a bank with two tellers by executing the following 
              jobs with the <B>-n</B> option set to 2:
            <P> 
            <pre>
  /usr/local/bin/qjob -q demo_que -n 2 -d withdraw.ss 11 &amp;

  /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 22 &amp;
</pre>
            Executing <B>semaphore -l</B> produces:
            <P> 
            <pre>
Semaphore demo_que has 2 resources.
  Resource 0 is taken by PID 29272.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d withdraw.ss 11
  Resource 1 is taken by PID 29437.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 22
</pre>
            Place another deposit in the queue:
            <P> 
            <pre>
/usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 33
</pre>
            and verify with a <B>semaphore -l demo_que</B> that it still waits:
            <P> 
            <pre>
Semaphore demo_que has 2 resources.
  Resource 0 is taken by PID 29272.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d withdraw.ss 11
  Resource 1 is taken by PID 29437.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 22
Queue for semaphore demo_que:
  1. PID 281 has been waiting since 2005-05-15 11:30:31.
     /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 33
</pre>
            Attempting to execute another deposit.ss fails because only one instance 
            of a job may queue.
            <P> Terminating the withdraw.ss job by deleting /tmp/w11 executes 
              the queued deposit job:
            <P> 
            <pre>
Semaphore demo_que has 2 resources.
  Resource 0 is taken by PID 281.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 33
  Resource 1 is taken by PID 29437.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -d deposit.ss 22
  </pre> <b>Example 3</b>
            <p></p>
            The final example involves allowing the same two tellers, but setting 
            the number of clones to 2. Execute the following five withdraw.ss 
            jobs:
            <P> 
            <pre>
/usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 11 &amp;
/usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 22 &amp;
/usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 33 &amp;
/usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 44 &amp;
/usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 55 &amp;
</pre>
            Executing <B>semaphore -l demo_que</B> displays the following output:
            <P> 
            <pre>
Semaphore demo_que has 2 resources.
  Resource 0 is taken by PID 8087.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 11
  Resource 1 is taken by PID 8206.
  /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 22
Queue for semaphore demo_que:
  1. PID 8358 has been waiting since 2005-05-15 11:51:12.
     /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 33
  2. PID 8505 has been waiting since 2005-05-15 11:51:43.
     /bin/ksh /usr/local/bin/qjob -q demo_que -n 2 -c 2 -d withdraw.ss 44
</pre>
            Because demo_que now allows two resources, and two clones of the same 
            job instance, only the last withdraw.ss job is discarded.
            <P> <b>What's in the Tarball</b>
            <P> In addition to qjob source (Listing 1), we are including an updated 
              copy of semaphore. The original semaphore contains a bug when using 
              the queue option. Semaphore wasn't properly limiting the number 
              of jobs that could be placed in the queue.
            <P> <b>References</b>
            <P> Schaefer, Ed, and John Spurgeon. 2004. "Implementing Semaphores 
              in the Shell", <I>Sys Admin</I> 13(8):41-47. -- <B>http://www.samag.com/documents/s=9238/sam0408f/0408f.htm</B>
            <P> <I>John Spurgeon is a software developer and systems administrator 
              for Intel's Factory Integrated Information Systems, FIIS, in Aloha, 
              Oregon. He is currently training for the Furnace Creek 508 and still 
              enjoys turfgrass management, triathlons, and spending time with 
              his family.</i>
            <P> <i>Ed Schaefer is a frequent contributor to </I>Sys Admin<I>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also edits the monthly 
              Shell Corner column on UnixReview.com. He can be reached at: <B>shellcorner@comcast.net</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
