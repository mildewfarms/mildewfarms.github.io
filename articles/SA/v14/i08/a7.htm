<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i08: Running any x86 Operating System in a SolarisTM 10 Zone</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2005/aug2005.tar"><b class=codeListing>aug2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a7.gif" width="200" height="167" align="right">Running 
              any x86 Operating System in a Solaris<sup>TM</sup> 10 Zone</h1>
            <P> Tim McMurphy
            <P> In the spring of 2004, when the Solaris 10 beta with zones first 
              shipped, my local Sun representative said you couldn't run any operating 
              system except Solaris 10. That was like waving a red flag in front 
              of a bull to me, and I just had to prove him wrong. After quite 
              a few failures, I abandoned the idea of running other operating 
              systems by installing an OS and trying to talk to the global zone 
              like a hardware emulator, and I looked for other approaches.
            <P> The method that finally worked for me is very simple, but it does 
              have a few gotchas. I've included the whole process here, because 
              it is very straightforward and doesn't rely on any bugs that will 
              be fixed in future releases. In fact, during one of the online expert 
              exchange sessions, one of the Sun experts said that this approach 
              was valid. So, it won't go away with later releases.
            <P> I set up this system on a Sun Ultra 60 with two 300-MHz processors 
              and 2 GB of RAM. The performance with this setup isn't great, but 
              as processors get faster, this could be a viable solution. These 
              are the steps I went through.
            <P> 
            <P> 1. Because I was using some packages from Sunfreeware, which install 
              in /usr/local, I added a link in the global zone to enable all the 
              zones to install Sunfreeware's packages. In the global zone:
            <P> 
            <pre>
# mkdir /opt/local/
# ln -s  /opt/local  /usr/local
# ls -l /usr/local
lrwxrwxrwx  1 root  root  10 Dec 17 14:13 /usr/local -&gt; /opt/local
</pre>
            2. Set up Solaris 10 zones with the basics. I did nothing fancy here, 
            just the minimum install. A great explanation of this process can 
            be found at:
            <P> 
            <pre>
http://www.blastwave.org/docs/Solaris-10-b51/DMC-0002/dmc-0002.html
</pre>
            3. Get the following packages from the Sunfreeware Web site (<B>http://www.sunfreeware.com/</B>). 
            Put them in a temporary location and unzip them:
            <P> 
            <pre>
libiconv-1.8-sol10-sparc-local.gz
gcc-3.3.2-sol10-sparc-local.gz
</pre>
            4. Get the following packages from Sourceforge (<B>http://bochs.sourceforge.net/</B>). 
            Put them in a temporary location and unzip them:
            <P> 
            <pre>
bochs-2.1.1.tar.gz
freedos-img.tar.gz
</pre>
            5. Install these in the virtual zone, not the global, in the order 
            given. A few workarounds must be addressed here.
            <P> 5a. The first two packages need to be converted from datastream 
              to directory format for build 72. This is a known bug that will 
              be fixed in a later release:
            <P> 
            <pre>
# cd /var/tmp/packages          (or wherever you put the packages)
# pkgtrans  lib*  .
# pkgtrans  gcc*  .
</pre>
            Now you can do the <B>pkgadd</B> command, and it will work.
            <P> 5b. Follow the instructions from Sunfreeware on the post-install 
              setup of GCC 3.3.2. This version of gcc was created on build 60 
              of Solaris 10. If you are using a higher version, you will need 
              to redo some of the header files. This is done with the following 
              steps:
            <P> 
            <pre>
# cd /usr/local/lib/gcc-lib/sparc-sun-solaris2.10/3.3.2/install-tools/
</pre>
            Put the line <B>SHELL=/bin/sh</B> on the first line of the mkheaders.conf 
            file. Then run:
            <P> 
            <pre>
# ./mkheaders
</pre>
            This will correct some files and make the build 60 gcc usable on higher 
            builds. I have tested this on build 72, and it works fine.
            <P> 5c. Add the following links to the global zone so the bochs app 
              in zone1 will find them:
            <P> 
            <pre>
# cd /usr/lib
# ln -s /usr/local/lib/libstdc++.so.5.0.5 ./libstdc++.so.5
# ln -s /usr/local/lib/libgcc_s.so.1 ./libgcc_s.so.1
</pre>
            The libs get installed in /usr/local/lib, but then the program wants 
            to find them in /usr/lib. This may be fixed in another release of 
            these tools and apps.
            <P> 6. Install bochs 2.1.1. This went very well once the links mentioned 
              previously were in place. If you follow their installation instructions, 
              it is really straightforward:
            <P> 
            <Pre>
# PATH=$PATH:/usr/ccs/bin; export PATH
# cd /var/tmp/bochs-2.1.1
# ./configure
# ./make
# ./make install
</pre>
            At first, I recommend just accepting all the defaults and getting 
            this running in one zone. Later, you can play with it other zones 
            and compare the results. I used the <B>make</B> that came with Solaris 
            10 (/usr/ccs/bin/make); you can put that in your path or use whichever 
            <B>make</B> you prefer.
            <P> 7. Run it. Make sure bochs is in your path:
            <P> 
            <pre>
# echo $PATH
/usr/sbin:/usr/bin:/opt/local/bochs/bin
</pre>
            Make sure you are running X on your workstation and that you have 
            a valid DISPLAY variable in the zone:
            <P> 
            <pre>
# echo $DISPLAY
localhost:10.0

# cd /var/tmp/freedos-img
# ls
4meg.img      a.img         b.img         bochsout.txt  c.img
# bochs -q &amp;
</pre>
            See Figure 1 for the output on the workstation.
            <P> <b>Conclusion</b>
            <P> Again, this runs really slowly on my setup. But, keep in mind 
              that it is translating from x86 to Sparc code for an entire system 
              emulation, video and all. That is why I ran FreeDOS and not the 
              MS-Windows image.
            <P> It would be interesting to try this setup on a Solaris 10 x86 
              system and see how much the speed is affected. One would think that 
              doing native instructions rather than translating would be much 
              faster.
            <P> <I>Tim McMurphy is an Electronics Engineering graduate from SAIT 
              (Southern Alberta Institute of Technology), 1985. He has been a 
              systems administrator for most of the past 19 years, focusing on 
              Unix and Solaris for the past 6 years.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
