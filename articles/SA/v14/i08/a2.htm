<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i08:Implementing Rsync-Only Access over Chroot SSH</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2005/aug2005.tar"><b class=codeListing>aug2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a2.gif" width="200" height="167" align="right">Implementing 
              Rsync-Only Access over Chroot SSH</h1>
            <P> Julie Wang and Michael Wang
            <P> Rsync provides a flexible and efficient way to transfer files. 
              Unlike ftp and scp, it can transfer the subset of files that has 
              changed and only the differences within each file. Rsync can transfer 
              files over SSH protocol, which provides the protection on the contents 
              of the files via encryption. However, rsync over SSH requires a 
              shell account on the remote site. This shell account, if unrestricted, 
              can potentially read and write beyond the intended area. It may 
              fill the /tmp space as a trivial example.
            <P> This article presents how to set up rsync over chroot SSH, which 
              limits the access to a designated area, and how to set up rsync-only 
              account with other access methods disabled. With these two security 
              measures, it is expected that rsync-only access over chroot SSH 
              can be used in public networks for data sharing and backup, replacing 
              the application served by traditional FTP with enhanced flexibility 
              and efficiency provided by rsync and security provided by SSH.
            <P> <b>Chroot SSH</b>
            <P> Chroot() is a system call to make the supplied directory appear 
              as root directory, thus limiting the access beyond the directory. 
              This functionality can be added to the portable OpenSSH release 
              via a 30-line patch. The patch and the patched source are maintained 
              by James Dennis (<B>http://chrootssh.sourceforge.net/</B>). This 
              article is based on OpenSSH_3.9p1 and OpenSSH_4.0p1.
            <P> This patch allows sshd to look for "/./" in the user's home directory 
              and perform chroot on the directory before this token. This restricts 
              the user to the area under this directory. The concept is the same 
              as in the Washington University's ftp server.
            <P> The installation of chroot SSH is done via the standard command 
              sequence: <B>configure</B>, <B>make</B>, and <B>make install</B>.
            <P> In our case, we prefer to have the new SSH server installed on 
              a separate area, /usr/local/ssh, for the ease of maintenance. The 
              new sshd is configured as:
            <P> 
            <pre>
./configure --prefix=/usr/local/ssh
</pre>
            After the software install, the startup script for sshd must be changed 
            to start the new sshd. The change is simple, just replacing the path 
            to various binaries and configuration files. In our case, the new 
            startup script is named new_sshd, and the differences between the 
            old and new script are shown below:
            <P> 
            <pre>
  &lt; # Init file for OpenSSH server daemon
  &gt; # Init file for OpenSSH server daemon (with chroot)
  
  &lt; [ -f /etc/sysconfig/sshd ] &amp;&amp; . /etc/sysconfig/sshd
  &gt; [ -f /usr/local/ssh/etc/sysconfig/sshd ] &amp;&amp; . \
    /usr/local/ssh/etc/sysconfig/sshd
  
  &lt; KEYGEN=/usr/bin/ssh-keygen
  &gt; KEYGEN=/usr/local/ssh/bin/ssh-keygen

  &lt; SSHD=/usr/sbin/sshd
  &gt; SSHD=/usr/local/ssh/sbin/sshd

  &lt; RSA1_KEY=/etc/ssh/ssh_host_key
  &gt; RSA1_KEY=/usr/local/ssh/etc/ssh_host_key

  &lt; RSA_KEY=/etc/ssh/ssh_host_rsa_key
  &gt; RSA_KEY=/usr/local/ssh/etc/ssh_host_rsa_key

  &lt; DSA_KEY=/etc/ssh/ssh_host_dsa_key
  &gt; DSA_KEY=/usr/local/ssh/etc/ssh_host_dsa_key
</pre>
            In a Red Hat-based systems, <B>chkconfig</B> can be used to disable 
            the old startup script and enable the new one as:
            <P> 
            <pre>
# chkconfig --del sshd
# chkconfig --add new_sshd
</pre>
            Once you have established a connection, stopping the old sshd daemon 
            does not disconnect the existing session. The switching of the sshd 
            daemon can be simply done as:
            <P> 
            <pre>
./sshd stop
./new_sshd start
</pre>
            To prevent possible lockup -- the old sshd is disabled but the new 
            sshd is not started after reboot, and if you don't have access to 
            the console, it is recommended that the telnet daemon be temporarily 
            enabled.
            <P> <B>Rsync over Chroot SSH</B>
            <P> To utilize the chroot feature, the remote user's home directory 
              should contain the magic token "/./", for example:
            <P> 
            <pre>
backup:x:0:0:Backup Account:/apps02/backup/./home:/bin/bash
</pre>
            Upon establishing the SSH session, the user's new root directory is 
            "/apps02/backup" in this example.
            <P> As rsync connects to the remote host via SSH, rsync is started 
              on the fly in server mode (<B>rsync --server</B>). To make rsync 
              work over chroot SSH, rsync must be available under the new root. 
              This can be done simply by copying the rsync binary as well as the 
              dynamic libraries it uses under the new, restricted root with the 
              same directory structure.
            <P> Besides the <B>rsync</B> command, the shell (and associated libraries) 
              must be available because rsync is run using the user's shell, as 
              documented in session.c:
            <P> 
            <pre>
  /*
   * Execute the command using the user's shell.  This uses the -c
   * option to execute the command.
   */
  argv[0] = (char *) shell0;
  argv[1] = "-c";
  argv[2] = (char *) command;
  argv[3] = NULL;
  execve(shell, argv, env);
</pre>
            The <B>ldd</B> command will print out the shared libraries that rsync 
            and the shell (in this example, it is bash) use. On Red Hat-based 
            Linux systems (we tested on Red Hat 9 and Fedora Core release 2), 
            the binaries and associated libraries are:
            <P> 
            <pre>
bin/bash
usr/bin/rsync

lib/ld-linux.so.2
lib/libdl.so.2
lib/libresolv.so.2
lib/libtermcap.so.2
lib/tls/libc.so.6
usr/lib/libpopt.so.0
</pre>
            To test that the dependencies of the rsync and shell binaries are 
            complete, we can run them under the chroot environment, like this:
            <P> 
            <pre>
chroot /apps02/backup
bash -c "rsync -h"
</pre>
            Note that once we are in this chroot environment, the common commands 
            such as <B>ls</B> are not available. We have to use shell built-in's. 
            For example, instead of <B>ls</B>, you can use <B>echo *</B>, and 
            so on. With these files in place, we can run rsync over chroot SSH.
            <P> <b>Rsync-Only Access over Chroot SSH</b>
            <P> While we make rsync work under the chroot SSH environment, the 
              SSH and slogin are also available (sftp and scp are not, as the 
              sftp and scp subsystems are not available in the chroot environment). 
              For security reasons, it is recommended to disable the shell access.
            <P> We note in a previous section that for the rsync access, the only 
              purpose of the full functional login shell is to run the <B>rsync</B> 
              command. This is also revealed by the <B>strace</B> command in Linux:
            <P> 
            <pre>
execve("/bin/bash", ["bash", "-c", "rsync --server ..."])
</pre>
            Armed with this knowledge, we will be able to build a dummy shell, 
            named dummysh, which provides this functionality only.
            <P> A shell version of dummysh is shown as below:
            <P> 
            <pre>
  #!/bin/bash

  if (( $# == 0 ))
  then
    printf "%s\n" "shell access is disabled. sorry."
    exit 1
  elif (( $# == 2 )) &amp;&amp; [[ $1 == "-c" &amp;&amp; $2 == "rsync --server"* ]]
  then
    exec $2
  fi
</pre>
            The dummy shell can be tuned to enable or disable certain accesses. 
            For example, we can write the conditions as:
            <P> 
            <pre>
$2 == /usr/local/ssh/libexec/sftp-server ||
$2 == "rsync --server"*
</pre>
            to allow sftp and rsync accesses.
            <P> To enable dummysh, change the user login shell to /bin/dummysh 
              and copy it to both unrestricted and restricted environments.
            <P> A C version of dummy shell would be more secure, and it helps 
              to get rid of the real shell -- bash, in this example -- altogether.
            <P> <b>Summary</b>
            <P> This setup combines the best features from rsync, SSH, and chroot. 
              Rsync provides the flexibility and efficiency in files transfer, 
              SSH protects the data being transferred, and chroot protects data 
              on the server from unauthorized access. The dummysh limits the access 
              to rsync only.
            <P> While rsync server implements chroot, it lacks the SSH protection 
              that is often required. Besides, opening an additional rsync server 
              port presents a security risk and sometimes is not possible either 
              technically or politically. Sftp and scp lack the flexibility and 
              efficiency provided by rsync, especially when a directory tree is 
              involved, such as a Web site.
            <P> We hope this setup can find use in public networks, in areas traditionally 
              served by anonymous and private FTP.
            <P> Julie Wang works for Independence Air (<B><i>http://www.flyi.com/</i></B><I><i>). 
            She manages Oracle databases, Unix operating systems, Lawson enterprise 
            systems, among others. She can be reached at: <B>Julie.Wang@flyi.com</B>.</i></i>
            <P> <i>Michael Wang earned his Master Degrees in Physics (Peking) 
              and Statistics (Columbia). Currently, he is applying his knowledge 
              to Unix systems administration, database management, and programming. 
              He can be reached at: <B>xw73@columbia.edu</B>.</i></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
