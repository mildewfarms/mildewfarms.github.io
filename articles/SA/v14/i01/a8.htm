<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i01: Using the R System for Systems Administration</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a8_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a8_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a8_t1.htm">Table 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_t2.htm">Table 2</a></span></td>
		<td><span class="navbarLink"><a href="a8_t3.htm">Table 3</a></span></td>
		<td><span class="navbarLink"><a href="a8_t4.htm">Table 4</a></span></td>
		<td><a href="../../../../source/SA/2005/jan2005.tar"><b class=codeListing>jan2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1> <B><img src="a8.gif" width="200" height="167" align="right">Using 
              the R System for Systems Administration</b> </h1>
            <p><I>Mihalis Tsoukalos</i> 
            <p> This article is about R, which is an advanced statistical package 
              with many complex capabilities. However, don't be afraid of R if 
              you aren't very comfortable with mathematics and statistics. This 
              article will cover some simple, useful capabilities of the package 
              tailored for systems administrators. 
            <P> R is a GNU project based on S, which is a statistics-specific 
              language and environment developed at the AT&amp;T Bell Labs. R 
              is an interpreted computer language. The R system distribution supports 
              many statistical procedures including linear and generalized linear 
              models, nonlinear regression models, time series analysis, classical 
              parametric and nonparametric tests, clustering, and smoothing. The 
              current version of R is 2.0.0, which was released on October 4, 
              2004. For more information, visit the R Project home page (<B>http://www.r-project.org</B>). 
              There is also a commercial implementation of S, called S-PLUS (<B>http://www.insightful.com/</B>), 
              which has more facilities and capabilities than R. The examples 
              presented in this article can also run in S-PLUS with little or 
              no modifications. 
            <P> <B>Running the R System</b> 
            <p>R runs on Unix/Linux variants as well as on Windows. R can also 
              run on Mac OS X Panther. There are GUIs for R, but all you need 
              for the purposes of this article is the command-line version. The 
              examples of this article have been written using R on Mac OS X Panther 
              and Debian Linux. 
            <P> To run R, type <B>R</B> (assuming that the R binary is in your 
              PATH), which will show something like the following: 
            <P> 
            <pre>
racoon:~/code/R $ R

R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0  (2004-04-12), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

 &gt;
</pre>
            To quit R, just type <B>q()</B> at the prompt. 
            <P> <B>Basic Commands of the R System</b> 
            <p>First, the commands for inserting, naming, and selecting data are 
              presented. The following example creates a data set (actually a 
              vector) called SYSADMIN. This data set contains the 0th to 6th powers 
              of number 3. To view the data in an existing data set, just type 
              its name at the R prompt: 
            <P> 
            <pre>
 &gt; SYSADMIN &lt;- 3^(0:6)
 &gt; SYSADMIN
[1]   1   3   9  27  81 243 729
 &gt;
</pre>
            The notation 0:6 returns a sequence for 0 to 6, including 0 and 6, 
            which is a total of seven numbers. The <B>names()</B> command allows 
            you to access the elements of a vector by a given name. In this example, 
            the numbers 0 to 6 are used: 
            <P> 
            <pre>
 &gt; names(SYSADMIN) &lt;- 0:6
 &gt; SYSADMIN
   0   1   2   3   4   5   6
   1   3   9  27  81 243 729
 &gt; class(SYSADMIN)
[1] "numeric"
 &gt;
</pre>
            If you want to remove the names you gave to the elements of the vector 
            with the <B>names(SYSADMIN)</B> command, you can use the following 
            command: 
            <P> 
            <pre>
names(SYSADMIN) &lt;- NULL
</pre>
            The following lines show the advantages of calling a vector by name: 
            <P> 
            <pre>
 &gt; SYSADMIN[0]
named numeric(0)
 &gt; SYSADMIN["0"]
0
1
 &gt; SYSADMIN[1]
0
1
 &gt;
</pre>
            You can now call the 0th power of 3 using <B>SYSADMIN["0"]</B>, but 
            not by using <B>SYSADMIN[1]</B> instead (as the 0th power is the first 
            element of the vector), which is less descriptive. Note that the first 
            command is not valid because there is no 0th element. 
            <P> If you want to remove the names you gave to the elements of the 
              vector with the <B>names(SYSADMIN)</B> command, you can use the 
              following command: 
            <P> 
            <pre>
names(SYSADMIN) &lt;- NULL
</pre>
            For inserting data in an existing data set, you can use the method 
            in the following example: 
            <P> 
            <pre>
&gt; SYSADMIN["7"] &lt;- 3^7
&gt; SYSADMIN
   0    1    2    3    4    5    6    7
   1    3    9   27   81  243  729 2187
&gt;
</pre>
            The following command illustrates how to select specific ranges of 
            data from the SYSADMIN vector using indices: 
            <P> 
            <pre>
&gt; SYSADMIN[3:4]
2 3
9 27
&gt;
</pre>
            To delete a data set, use the <B>rm()</B> command. To delete the SYSADMIN 
            data set, type <B>rm(SYSADMIN)</B> at the <B>R</B> prompt. Also, the 
            <B>objects()</B> command must be used for listing the available objects. 
            <P> The <B>summary()</B> command (the output will be explained in 
              more detail later) gives useful information about the data set. 
              For this example, the data set is called CALAMARIS. Data is taken 
              from a Calamaris report file. Calamaris is a program for analyzing 
              proxy server log files (a Squid log file was used here). Table 1 
              shows the data and explains the meaning of each column. The table 
              was saved in a file called CALAMARIS.data and loaded into R with 
              the following command: 
            <P> 
            <pre>
CALAMARIS &lt;-  
read.table("/Users/mtsouk/docs/article/R.SysAdmin/examples/
CALAMARIS.data", header=TRUE )
&gt; summary(CALAMARIS)
  domain   number.of.requests  percent.of.total.requests  Total.Bytes
*.ca :1    Min. : 3.0          Min. : 0.09                Min. : 7919
*.com :1   1st Qu.: 32.0       1st Qu.: 0.94              1st Qu.: 114303
*.de :1    Median : 127.0      Median : 3.75              Median : 450469
*.edu :1   Mean : 376.8        Mean :11.11                Mean :1656217
*.gr :1    3rd Qu.: 187.0      3rd Qu.: 5.51              3rd Qu.:1249501
*.net :1   Max. :1403.0        Max. :41.37                Max. :7649799
(Other):3
&gt; 
</pre>
            There is also a very handy way for representing a data set graphically. 
            Figure 1 shows the output of the <B>pairs()</B> command. Again, the 
            CALAMARIS data set is used. What you see in Figure 1 is the graphical 
            representation of all the subsets of the CALAMARIS data set in pairs. 
            <P> R supports the following types of objects: 
            <P> 
            <ul>
              <li> Vectors (the most important objects in R) 
              <li> Matrices (arrays) 
              <li> Factors 
              <li> Lists 
              <li> Data frames 
              <li> Functions
            </ul>
            <P> For more information about those objects, refer to the documentation 
              that comes with your R installation. 
            <P> <B>Advanced Commands of the R System</b> 
            <p>The <B>save()</B> command is used for dumping an object to disk 
              in order to use it later: 
            <P> 
            <pre>
 &gt; save(SYSADMIN, file = "/Users/mtsouk/SYSAMIN.r")
</pre>
            To read data from a file, use the <B>load()</B> command: 
            <P> 
            <pre>
 &gt; rm(SYSADMIN)
 &gt; SYSADMIN
Error: Object "SYSADMIN" not found
 &gt; load( file = "/Users/mtsouk/SYSAMIN.r" )
 &gt; SYSADMIN
    0    1    2    3    4    5    6    7
    1    3    9   27   81  243  729 2187
 &gt;
</pre>
            With the <B>edit()</B> command, the editor presents the data set ready 
            for editing. I think this is very practical. The R package can also 
            import data from various formats and database systems including PostgreSQL 
            and database sources supporting the ODBC interface. R can also communicate 
            via BSD sockets. For more information, refer to: 
            <P> 
            <pre>
http://developer.r-project.org/db
</pre>
            The <B>merge()</B> command can be very useful because it works similarly 
            to database joins, which means that related tables of data can be 
            combined into one table. The following is a complete example of <B>merge()</B>: 
            <P> 
            <pre>
   &gt; SERVER
           Name             OS        Version
   1      Pluto        Solaris              8
   2      Plato   Linux_Debian         Stable
   3     Racoon            AIX             5L
   4        Pik   Linux_Debian       Unstable
   5    Eugenia    Solaris_x86              9
   &gt; ADMIN
        Machine     Admin_Name  Admin_Surname
   1      Pluto            Tom        Philips
   2    Eugenia           Anna          Tomas
   3      Plato            Jim   Papadopoulos
   4     Racoon          Peter          McRay
   5        Pik           John          Papas
   &gt; merge(SERVER, ADMIN, by.x="Name", by.y="Machine")
           Name             OS        Version  Admin_Name  Admin_Surname
   1    Eugenia    Solaris_x86              9        Anna          Tomas
   2        Pik   Linux_Debian       Unstable        John          Papas
   3      Plato   Linux_Debian         Stable         Jim   Papadopoulos
   4      Pluto        Solaris              8         Tom        Philips
   5     Racoon            AIX             5L       Peter          McRay
   &gt;
   </pre> <P><b>A Mail Server Application</b> 
            <p>Log files from a Postfix mail server are going to be used in this 
              simple application. The data of interest in the log files includes 
              the main DNS domain (.gr, .com, etc.) of the outgoing mail address, 
              the delay duration (in seconds), and the time (in HH:MM:SS format) 
              of the day. For getting the data, <B>grep</B>, <B>sed</B>, and <B>awk</B> 
              were used. (Perl or another script language could have been used 
              instead.) The first 10 lines of the data, including the column titles, 
              are shown in Table 2. 
            <P> <B>Extracting Information</b> 
            <p>What information can we get from the data using R? Summary info 
              (using the <B>summary()</B> command) can be extracted, which in 
              this particular case gives: 
            <P> 
            <pre>
 &gt; summary(MAILDATA)
        Time     Domain        Delay
  11:07:12:  5   au :  3   Min.   :  1.00
  08:51:05:  3   com: 10   1st Qu.:  2.00
  13:23:47:  3   edu:  2   Median :  3.00
  06:12:53:  2   gr :117   Mean   : 11.38
  16:42:34:  2   org: 11   3rd Qu.:  6.00
  00:52:50:  1   uk :  2   Max.   :217.00
  (Other) :129
 &gt;
</pre>
            This tells us that most of our emails go to the .GR domain and that 
            the busiest moment (relatively busy because those log files were from 
            my home dial-up server) is 11:07:12. Instead of Time, you can use 
            Day, Week, Month, or even Year variables for getting mail information. 
            The fact that the 3rd Qu. value is very close to the Median means 
            that there are not major delays in the sending of the outgoing messages 
            process, at least for the 75% of the items in the data set. If you 
            want more precise information, you can divide the data set into smaller 
            data sets. 
            <P> <B>Output Explanation</b> 
            <p>The Time and Domain data are not numbers, so R sums the occurrences 
              (considering each value as a string) of each "string" and prints 
              the top numbers. As far as Delay (which is numeric) is concerned, 
              R calculates and displays the following six values: 
            <P> 
              <li> Min. -- This is the minimum value of the data set.<p> 
              <li> Median -- This is an element that divides the data set into 
                two subsets (left and right subsets) with the same number of elements. 
                If the data set has an odd number of elements, then the Median 
                is part of the data set. On the other side, if the data set has 
                an even number of elements, then the Median is the mean value 
                of the two center elements of the data set. <p>
              <li> 1st Qu. -- The 1st Quartile q1 is a value, not necessarily 
                belonging to the data set, with the property that (at most) 25% 
                of the data set values are smaller than q1 and (at most 75%) of 
                the data set values are bigger than q1. You can consider it as 
                the Median of the left half subset of the sorted data set. In 
                the case that the number of elements of the data set is such that 
                q1 does not belong to the data set, it is produced by interpolation 
                of the two values at the left (v) and the right (w) of its position 
                to the sorted data set as: 
                <P> 
                <pre>
q1 = 0.75 * v + 0.25 * w
</pre>
              <li> Mean -- This is the mean value of the data set (the total sum 
                divided by the number of the items in the data set). <p>
              <li> 3rd Qu. -- The 3rd Quartile q3 is a value, not necessarily 
                belonging to the data set, with the property that (at most) 75% 
                of the data set values are smaller than q3 and (at most) 25% of 
                the data set values are bigger than q3. You can consider it as 
                the Median of the right half subset of the sorted data set. In 
                the case that the number of elements of the data set is such that 
                q3 does not belong to the data set, it is produced by interpolation 
                of the two values at the left (v) and the right (w) of its position 
                to the sorted data set as: 
                <P> 
                <pre>
q3 = 0.25 * v + 0.75 * w
</pre>
                Referring back to the example, the fact that the 3rd Qu. value 
                is very close to the Median means that there are not major delays 
                in the sending of the outgoing messages process, at least for 
                the 75% of the items in the data set. If you want more precise 
                information, you can divide the data set into smaller data sets. <p>
              <li> Max. -- This is the maximum value in the data set. Please note 
                that many definitions for finding Quartiles exist. If you try 
                another statistical package, you may get different results. <p>
                <P> Using the <B>pairs()</B> command (output shown in Figure 2), 
                  shows a graphical overview of the data. From this image, and 
                  especially from the Time-Delay pair, you can conclude that there 
                  are not major delays. Also, imagine that you can automate this 
                  procedure and have the information sent to your email. 
                <P> By using the <B>attach()</B> command with a data set as an 
                  argument, you can use the columns of the data set as individual 
                  data sets. Thus, you can try the <B>hist(Delay)</B> command 
                  to draw a histogram of the frequencies of the delays (after 
                  giving <B>attach(MAILDATA)</B>) and get a more accurate view 
                  of the delay times. By executing <B>hist(Delay, xlab="Delay 
                  in seconds", ylab="Number of emails", labels=TRUE</B>) you get 
                  the plot shown in Figure 3. 
                <P> <B>A Web Server Application</b> 
                <p>For this example application, data is taken from a log file 
                  of a Web server. The duration of the log file is one day. Again, 
                  the data is taken using a combination of the <B>sed</B>, <B>awk</B>, 
                  and <B>grep</B> utilities. 
                <P> The first 10 lines of the data, including the column titles, 
                  are shown in Table 3. 
                <P> Note that the underscore in front of the status code was added 
                  so that the StatusCode value will not be considered a numeric 
                  value by R. 
                <P> The <B>summary(WWWDATA)</B> command gives the following output: 
                <P> 
                <pre>
 &gt; summary(WWWDATA)
       Time          ServerBytes        ClientBytes       StatusCode
  10:46  :   3145   Min.   :       0   Min.   :   0.0   _304   :709255
  10:58  :   3081   1st Qu.:     140   1st Qu.: 401.0   _200   :435146
  10:55  :   3066   Median :     142   Median : 435.0   _302   :  7371
  10:37  :   3054   Mean   :    2460   Mean   : 438.1   _404   :  4641
  10:32  :   2959   3rd Qu.:     407   3rd Qu.: 470.0   _500   :  3983
  09:30  :   2814   Max.   :49083902   Max.   :2158.0   _206   :  2254
  (Other):1144676                                       (Other):   145
 &gt;
</pre>
                Notice that the busiest minute was 10:46 when 3145 requests were 
                served. Again, note that the underscore in front of the status 
                code was added so that the StatusCode value will not be considered 
                a numeric value by R. 
                <P> For more analysis, get all the data for the 12:00 to 12:59 
                  timeframe (<B>grep '^12' WWWDATA.data</B>). This data set is 
                  named WWW12. Execute the <B>pairs(WWW12)</B> command. The output 
                  is shown in Figure 4. 
                <P> Also, the <B>summary(WWW12)</B> command gives the following 
                  output: 
                <P> 
                <pre>
 &gt; summary(WWW12)
       Time        ServerBytes       ClientBytes       StatusCode
  12:20  : 2003   Min.   :      0   Min.   :   0.0   _304   :45986
  12:24  : 1848   1st Qu.:    141   1st Qu.: 403.0   _200   :28914
  12:55  : 1800   Median :    142   Median : 436.0   _302   :  570
  12:16  : 1789   Mean   :   2273   Mean   : 444.6   _404   :  292
  12:01  : 1744   3rd Qu.:    407   3rd Qu.: 480.0   _500   :  214
  12:19  : 1713   Max.   :2631733   Max.   :1230.0   _206   :  124
  (Other):65217                                      (Other):   14
 &gt;
</pre>
                See Table 4. 
                <P> The main benefit of using R for systems administration is 
                  that you get a different perspective of your data, which can 
                  be useful as well as informative. 
                <P> <B>Acknowledgments</b> 
                <p>I would like to thank Nikos Platis and Manolis Skopelitis for 
                  helping me write this article. 
                <P> <B>References</b> 
                <p>Venables, W.N. and B.D. Ripley. <I>Modern Applied Statistics 
                  with S</I>, 4th Ed. Springer-Verlag, 2002. -- <B>http://www.stats.ox.ac.uk/pub/MASS4</B> 
                <P> R Project home page -- <B>http://www.r-project.org</B> 
                <P> StatLib -- <B>http://lib.stat.cmu.edu/</B> 
                <P> S-PLUS -- <B>http://www.insightful.com/</B> 
                <P> R and DBMSs page -- <B>http://developer.r-project.org/db/</B> 
                <P> <I>Mihalis Tsoukalos lives in Greece with his wife, Eugenia, 
                  and works as a High School Teacher. He holds a B.Sc. in Mathematics 
                  and a M.Sc. in IT from University College London. Before teaching, 
                  he worked as a Unix systems administrator and an Oracle DBA. 
                  Mihalis can be reached at: <B>tsoukalos@sch.gr</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
