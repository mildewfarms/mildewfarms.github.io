<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i01: Listing 1 Perl-based bookmark validator</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a5.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><a href="../../../../source/SA/2005/jan2005.tar"><b class=codeListing>jan2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>Perl-based bookmark validator</i></h2>
            <p> 
            <pre>
=1=    #!/usr/bin/perl
=2=    use strict;
=3=    use warnings;
=4=    
=5=    use HTML::Parser;
=6=    use LWP::Parallel::UserAgent;
=7=    use HTTP::Request::Common;
=8=    
=9=    $^I = "~";
=10=    @ARGV = "-" unless @ARGV;       # act as filter if no names specified
=11=    while (@ARGV) {
=12=      $_ = do { local $/; &lt;&gt; };
=13=    
=14=      my $urls = extract_links($_);
=15=    
=16=      validate_links($urls);
=17=    
=18=      rewrite_html($_, $urls);
=19=    }
=20=    
=21=    sub extract_links {
=22=      my $html = shift;
=23=    
=24=      my %urls;
=25=    
=26=      my $p = HTML::Parser-&gt;new
=27=        (
=28=         start_h =&gt;
=29=         [sub {
=30=            my ($tagname, $attr) = @_;
=31=            return unless $tagname eq "a" and my $href = $attr-&gt;{href};
=32=            $urls{$href} = "";
=33=          }, "tagname, attr"],
=34=        ) or die;
=35=    
=36=      $p-&gt;parse($html);
=37=      $p-&gt;eof;
=38=    
=39=      return \%urls;
=40=    }
=41=    
=42=    sub validate_links {
=43=      my $urls = shift;             # hashref
=44=    
=45=      my $pua = LWP::Parallel::UserAgent-&gt;new(max_size =&gt; 1);
=46=    
=47=      while (my ($url) = each %$urls) {
=48=        $pua-&gt;register(GET $url);
=49=      }
=50=    
=51=      for my $entry (values %{$pua-&gt;wait(30)}) {
=52=        my $url = $entry-&gt;request-&gt;url;
=53=        my $success = $entry-&gt;response-&gt;is_success;
=54=        warn +($urls-&gt;{$url} = $success ? "LIVE" : "DEAD"), ": $url\n";
=55=      }
=56=    
=57=      # return void
=58=    }
=59=    
=60=    sub rewrite_html {
=61=      my $html = shift;
=62=      my $urls = shift;             # hashref
=63=    
=64=      my $dead = 0;                 # mark the next text as "DEAD -"
=65=    
=66=      my $p = HTML::Parser-&gt;new
=67=        (
=68=         start_h =&gt;
=69=         [sub {
=70=            my ($text, $tagname, $attr) = @_;
=71=            if ($tagname eq "a" and my $href = $attr-&gt;{href}) {
=72=              $dead = 1 if $urls-&gt;{$href} eq "DEAD";
=73=            }
=74=            print $text;
=75=          }, "text, tagname, attr"],
=76=         text_h =&gt;
=77=         [sub {
=78=            my ($text) = @_;
=79=            if ($dead) {
=80=              $text = "DEAD - $text" unless $text =~ /DEAD -/;
=81=              $dead = 0;
=82=            }
=83=            print $text;
=84=          }, "text"],
=85=         default_h =&gt;
=86=         [sub { print shift }, 'text'],
=87=        ) or die;
=88=    
=89=      $p-&gt;parse($html);
=90=      $p-&gt;eof;
=91=      # return void
=92=    }
</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
