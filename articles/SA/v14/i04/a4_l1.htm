<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i04: Listing 1 Makeinstall</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a4.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><a href="../../../../source/SA/2005/apr2005.tar"><b class=codeListing>apr2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>Makeinstall</i></h2>
            <p> 
            <pre>
#!/usr/dt/bin/dtksh
 
# Type "makeinstall help=y" for online man page.

function my_getopts {
#- version 3.141592, 2002-02-02, Michael Wang &lt;xw73@columbia.edu&gt;.
  typeset PATH= SEP= i
  typeset -u _I
  for i; do
    _I=$i
    eval ${_I%%?(:)=*}= unset ${_I%%?(:)=*}
    case $_I in
      *[!:]=*) eval $(IFS=$SEP; print ${_I%%=*}=\"${_I#*=}\")   ;;
      *:=*)    eval $(IFS=$SEP; print ${_I%%:=*}=\"${i#*:=}\")  ;;
    esac
  done
}

function kshdoc {
# version 2.0, 2003-05-08, Michael Wang &lt;xw73@columbia.edu&gt;.
  typeset path file base tdir;
  typeset -u help

  eval help=y "$@"

  typeset -x PATH=${path:-$PATH}

  whence perldoc &gt;/dev/null || {
    [[ -x /usr/perl5/bin/perldoc ]] &amp;&amp; PATH=$PATH:/usr/perl5/bin
    whence perldoc &gt;/dev/null || {
      print "You need to have perldoc in your PATH."
      return 1
    }
  }

  [[ $help = @(Y|PS|PDF) ]] &amp;&amp; {
    base=${file##*/}; base=${base%.@(ksh|sh|ss)}
    tdir=/tmp/$base.$$.$RANDOM
    mkdir $tdir &amp;&amp; trap "rm -rf $tdir" EXIT
    sed -n '/^## =/,${/^##/s/^## \{0,1\}//p;}' $file &gt; $tdir/$base.pod
    case $help in
      Y)   if (( $(id -u) == 0 )); then
             su bin -c "perldoc $tdir/$base.pod"
           else
             perldoc $tdir/$base.pod
           fi;;
      PS)  pod2man $tdir/$base.pod | groff -man &gt; $base.ps;;
      PDF) pod2man $tdir/$base.pod | groff -man | ps2pdf - $base.pdf;;
    esac
  }

  return 0
}

[[ $1 == help=y ]] &amp;&amp; { kshdoc file=$0 help=y; exit 0; }

function do_snapshot {
  typeset fs=${1} sr=${2} bs=${3} mp dv ix
  for ix in ${fs//:/ }; do
    mp=${sr}${ix/%"/"/"/root"}
    mkdir -p $mp
    mount -F ufs -o ro $(fssnap -F ufs -o bs=${bs},unlink $ix) $mp
    fssnap -i -o blockdevname $ix | awk "{print \$NF}" | read dv &amp;&amp;
    df -Pk $mp | grep "^$dv" || return 1
  done
}

# Reason for awk "{print \$NF}":
# fssnap -i -o blockdevname /fs
# Solaris 8: /dev/fssnap/0
# Solaris 9: Block Device : /dev/fssnap/0

function undo_snapshot {
  typeset fs=${1} sr=${2} mp ix
  for ix in ${fs//:/ }; do
    mp=${sr}${ix/%"/"/"/root"}
    umount $mp
    fssnap -F ufs -d $ix
    ! fssnap -i -o blockdevname $ix | awk "{print \$NF}" | read &amp;&amp;
    ! df -Pk $mp | grep "^/dev/fssnap/[0-9]\{1,\}" || return 1
  done
}

function find_diff {
  typeset fs=${1} sr=${2} md=${3} mp ix iy
  typeset -u an
  for ix in ${fs//:/ }; do
    mp=${sr}${ix/%"/"/"/root"}
    print ${ix}:
    if [[ $md == new2old ]]; then
      rsync -vanx --delete ${ix}/ ${mp}/
    else
      rsync -vanx --delete ${mp}/ ${ix}/
      print -n "commit? "
      read an
      [[ $an == Y* ]] &amp;&amp; rsync -vax --delete ${mp}/ ${ix}/
    fi
  done
}

function find_fs {
  typeset fs=$1
  [[ -n "$fs" &amp;&amp; $fs != [+-]* ]] &amp;&amp; print $fs &amp;&amp; return 0

  typeset i j k
  df -Pk -F ufs | while read i; do
    set -- $i
    j=${@:$#:1}
    [[ $j == @(/|/usr|/var|/opt) ]] &amp;&amp; {
      [[ $fs == -?(*:)${j}?(:*) ]] || k="$k:$j"
    }
  done

  if [[ $fs == +* ]]
  then print ${k}:${fs#+}
  else print ${k}
  fi
}

set -e

PATH=$(/bin/getconf PATH)
PATH=$PATH:/usr/sbin
PATH=$PATH:/opt/csw/bin

my_getopts HELP=N "$@"
: ${SNAPROOT:=/snapshot}
: ${STEP:=0}
: ${BS:=$(&lt; $SNAPROOT/.backing-store)}
# fs:=

FS=$(find_fs $FS)

[[ $STEP == *1* || $STEP == 9 ]] &amp;&amp;   do_snapshot $FS $SNAPROOT $BS
[[ $STEP == *2* || $STEP == 9 ]] &amp;&amp; {
  print    "type make install or whatever in another window."
  print -n "ready? "
  read
}
[[ $STEP == *3* || $STEP == 9 ]] &amp;&amp; find_diff     $FS $SNAPROOT "new2old"
[[ $STEP == *4* || $STEP == 9 ]] &amp;&amp; find_diff     $FS $SNAPROOT "old2new"
[[ $STEP == *5* || $STEP == 9 ]] &amp;&amp; {
  if [[ $STEP == 5 ]]
  then an=Y
  else print -n "delete snapshots? "
       read an
  fi
  [[ $an == [Yy]* ]] &amp;&amp; undo_snapshot $FS $SNAPROOT
}

exit 0

## =head1 NAME
##
## B&lt;makeinstall&gt; - capture file system changes with snapshot and rsync
##
## =head1 SYNOPSIS
##
## ...</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
