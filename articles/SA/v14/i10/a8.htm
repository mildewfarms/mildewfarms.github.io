<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i10: Asserting File Attributes Using Solaris Packages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2005/oct2005.tar"><b class=codeListing>oct2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Asserting 
              File Attributes Using Solaris<sup>TM</sup> Packages</h1>
            <P> Ed Schaefer and John Spurgeon
            <P> Over time, file attributes in a multi-user environment tend to 
              drift from their original values. Some of these changes are acceptable, 
              but detecting and correcting undesirable modifications can be a 
              challenge for systems administrators.
            <P> When installing software packages on Solaris, the file /var/sadm/install/contents 
              is updated with information about the components of each package. 
              Using this information, a program can compare the current attributes 
              of a file with the attributes documented in the contents file. If 
              differences are detected, the program could generate an alert. For 
              attributes, such as the owner, group, or permissions mode, the program 
              could even change them back to their original values.
            <P> If you are not familiar with Solaris packages, your first reaction 
              upon learning about the contents file might be to develop a program 
              that parses the file to retrieve the attribute data. However, depending 
              on your objective, there may be a better solution. Below, we'll 
              analyze two shell scripts: one that accesses the contents file directly 
              (assert_attributes_1), and another that uses the <B>pkgchk</B> command 
              (assert_attributes_2). To begin, let's look at the anatomy of the 
              contents file:
            <P> 
            <pre>
/var/sadm/install/contents
</pre>
            The <B>contents(4)</B> manpage provided with Solaris 10 describes 
            the file /var/sadm/install/contents. In previous versions of Solaris, 
            this manpage was not included in the reference manual. (Online copies 
            of the Solaris manuals are available at <B>http://docs.sun.com</B>.)
            <P> Each entry in the contents file is a single line with fields separated 
              by spaces. Two major styles of entries exist -- old style and new 
              style.
            <P> The following is the format of an old-style entry:
            <P> 
            <pre>
ftype class path package(s)
</pre>
            The following is the general format of a new-style entry:
            <P> 
            <pre>
path[=rpath] ftype class [ftype-optional-fields] package(s)
</pre>
            The "ftype" designates the entry type, as specified in pkgmap(4):
            <P> s -- Symbolic link
            <P> l -- Linked file
            <P> d -- Directory
            <P> b -- Block special device
            <P> c -- Character special device
            <P> f -- A standard executable file, data file, or other type of file, 
              the contents of which must never be modified
            <P> x -- An exclusive directory accessible only by this package
            <P> v -- A volatile file, intended to be overwritten or appended to 
              after installation
            <P> e -- An editable file, intended to be edited (selectively modified) 
              after installation
            <P> New-style entries differ for each ftype. The format for new-style 
              entries, for each ftype, is as follows:
            <P> 
            <pre>
path=rpath s class package
path l class package
path d class mode owner group package(s)
path b class major minor mode owner group package
path c class major minor mode owner group package
path f class mode owner group size cksum modtime package
path x class mode owner group package
path v class mode owner group size cksum modtime package
path e class mode owner group size cksum modtime package
</pre>
            Here are some examples of entries from one of our contents files:
            <P> 
            <pre>
/opt/fics d none 0775 informix informix FICSskel
/opt/fics/bin/autocccftp f none 0444 informix informix 40 3383 1054 FICSskel
</pre> <b>Reviewing the assert_attributes_1 Script</b>
            <P> The following is the programming logic for the assert_attributes_1 
              script (Listing 1). For each package passed to the script:
            <P> 
            <P> 1. Obtain the file and directory ownership and permissions from 
              the /var/sadm/install/contents file.
            <P> 2. Save the current object's ownership and permissions.
            <P> 3. Set the object's ownership and permissions to those obtained 
              in Step 1.
            <P> 4. Compare the new with the original ownership and permissions 
              and raise an alert if they are different.
            <P> <B>Finding Package Objects</B>
            <P> If no packages are listed on the command line, the <B>list_files</B> 
              function queries standard input for package information until the 
              user presses Control-d.
            <P> Next, the <B>list_files</B> function determines each line in the 
              contents file belonging to each package, and returns the first, 
              second, fourth, fifth, and sixth fields.
            <P> <B>Processing Package Objects</B>
            <P> The output of the <B>list_files</B> function is piped to a while 
              loop that processes the five arguments. If an object is a symbolic 
              link, the object name structure looks like this:
            <P> 
            <pre>
path1=path2
</pre>
            Using parameter expansion <B>file=${file_equals%=*}</B> removes the 
            equal sign and everything else from the end of the string. For example, 
            object name:
            <P> 
            <pre>
/opt/fics/admin=/opt/admin/bin
</pre>
            becomes after parameter expansion:
            <P> 
            <pre>
/opt/fics/admin
</pre>
            As each line is parsed, only files -- both regular and volatile -- 
            and directories have their ownership and permissions set.
            <P> <B>Setting Object Ownership and Permissions</B>
            <P> In the <B>assert_attributes</B> function, the owner/group and 
              permissions are set by the <B>chown</B> and <B>chmod</B> commands, 
              respectively. Before the commands execute, the object's ownership 
              and permissions are saved by a call to the <B>list_attributes</B> 
              function. If the attributes change after executing <B>chown</B> 
              and <B>chmod</B>, the script generates an alert.
            <P> We described our alerts in "Managing Enterprise Alerts" (<I>Sys 
              Admin</I>, April 2004). If you haven't implemented our alerts, replace 
              this code with your own.
            <P> <B>Reviewing the assert_attributes_2 Script</B>
            <P> By manipulating the <B>pkgchk</B> command, the assert_attributes_2 
              script (Listing 2) also sets ownership and permissions to the original.
            <P> Executing <B>pkgchk -a</B> against a package reports any attribute 
              discrepancies to standard error. If there are any discrepancies, 
              execute <B>pkgchk -a -f package_name</B> setting the attributes 
              back to the original and create an alert.
            <P> <B>References</B>
            <P> "Application Packaging Developer's Guide" -- <B>http://docs.sun.com/app/docs/doc/805-3908</B>
            <P> contents(4) man page -- <B>http://docs.sun.com/app/docs/doc/816-5174/6mbb98udu?a=view</B>
            <P> pkgmap(4) man page -- <B>http://docs.sun.com/app/docs/doc/816-5174/6mbb98uid?a=view</B>
            <P> <I>John Spurgeon is a software developer and systems administrator 
              for Intel's Factory Integrated Information Systems, FIIS, in Aloha, 
              Oregon. He is currently training for the Furnace Creek 508 and still 
              enjoys turfgrass management, triathlons, and spending time with 
              his family.</i>
            <P> <i>Ed Schaefer is a frequent contributor to </I>Sys Admin<I>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also edits the monthly 
              Shell Corner column on UnixReview.com. He can be reached at: <B>shellcorner@comcast.net</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
