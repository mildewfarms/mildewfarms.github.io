<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i12: John &amp; Ed's Scripting Screwups</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a8_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a8_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2005/dec2005.tar"><b class=codeListing>dec2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">John 
              &amp; Ed's Scripting Screwups</h1>
            <P> Ed Schaefer and John Spurgeon
            <P> We believe that you don't learn anything or do something without 
              making mistakes. Because this is our last column of the year, we'd 
              like to discuss this year's blunders and enhancements:
            <P> 
            <ul>
              <li> We enhanced the ls_floppy script that was part of our "Manipulating 
                Floppy Disk Images on Solaris" column. 
              <li> We plugged a security hole in the share screen section of our 
                "Using Screen in Scripts" column. 
              <li> We fixed an exit code/return value bug in our semaphore script 
                as described in "Queuing Jobs with qjob". 
              <li> We changed the pushd/popd functions as presented in Bill Rosenblatt's 
                <I>Learning the Korn Shell</I>. This isn't really our bug, but 
                it keeps with the theme of the column.
            </ul>
            <P> <b>Floppy Enhancement</b>
            <P> Our "Manipulating Floppy Disk Images on Solaris" column presented 
              three shell scripts for managing the floppy drive. Originally, the 
              scripts were developed with Solaris 7. When upgrading to Solaris 
              9, the ls_floppy script failed because one of the floppy commands, 
              <B>volrmmount</B>, wasn't making a temporary directory quickly enough. 
              The script's next command was executing before the directory existed.
            <P> To fix the problem, we inserted a five-second sleep after executing 
              the <B>volrmmount</B> command and before executing the change directory 
              command:
            <P> 
            <pre>
.
.
sleep 5
if cd $dir
then
         # list contents of the floppy
         ls $options
         .
         .
</Pre> <B>Using Screen Security Problem</b>
            <P> Our major blunder of the year was in the April, "Using Screen 
              in Scripts" column. Sharp-eyed readers Kevin Turner and Rod Knowlton 
              pointed out a security hole in the "Using sudo in Share Screens" 
              sections. Our share-screen script allows users to share screens. 
              Unfortunately, when sharing a root-generated screen, simply by pressing 
              "Ctrl-A c", another screen is generated with root access -- very 
              undesirable.
            <P> To solve our share screen problem, we have abandoned screen. Presently, 
              we are planning to use the Expect script kibitz. The kibitz script, 
              bundled with the new versions of expect, allows two users to interact 
              with one shell. The kibitz script is easy to use. From the kibitz 
              MAN page:
            <P> 
            <ul>
              To start kibitz, user1 runs kibitz with the argument of the user 
              to kibitz. For example:
              <P> kibitz user2
              <P> kibitz starts a new shell (or another program, if given on the 
                command line), while prompting user2 to run kibitz. If user2 runs 
                kibitz as directed, the keystrokes of both users become the input 
                of the shell. Similarly, both users receive the output from the 
                shell.
            </ul>
            <P> Finally, the online screen documentation link in our original 
              column is dead; see the reference section for a replacement.
            <P> <b>Return Code Bug</b>
            <P> In the "Queuing Jobs with qjob" column, we reported fixing a bug 
              in our semaphore script but didn't mention what that bug was. The 
              bug is obscure enough that we feel compelled to review it.
            <P> The gist of the problem is that we misidentified the exit code/return 
              value of a function when used in conjunction with the negation operator:
            <P> 
            <pre>
if ! keep_trying
then
   exit $?
fi
</pre>
            We assumed that if the keep_trying function returns a value greater 
            than zero, the <B>not</B> comparison evaluates to <B>true</B>, and 
            the exit code equals the keep_trying function's return value. Unfortunately, 
            this is a bad assumption. The negation operator resets the exit code 
            masking whatever the keep_trying function's return value was.
            <P> Consider this example:
            <P> 
            <pre>
keep_trying()
{
   return 5
}
if ! keep_trying
then
   echo $? # echo's 0
fi
</pre>
            Because keep_trying's return value is <B>false</B>, the negation operator 
            sets the exit code to 0, <B>true</B>, or <B>not false</B>.
            <P> Remember that negation returns <B>true</B> when evaluating <B>not 
              false</B> and <B>false</B> when evaluating <B>not tru</B>e. If this 
              statement is confusing, execute the following comparisons:
            <P> 
            <pre>
if ! false
then
   echo $? # echo's 0
fi

if ! true
then
   :
else
   echo $? # echo's 1
fi
</pre>
            If you really want the function's return value, do not use negation, 
            as in this example:
            <P> 
            <pre>
keep_trying()
{
   return 5
}
if keep_trying
then
   echo "true: $?"
else
   echo "false: $?" # echo's 5
fi
</pre> <b>The pushd &amp; popd Problem</b>
            <P> We like Bill Rosenblatt's <I>Learning the Korn Shell</I>, but 
              we disagree with his implementation of <B>pushd</B> and <B>popd</B>. 
              The <B>pushd</B> and <B>popd</B> functions "enable you to move to 
              another directory temporarily and have the shell remember where 
              you were". (Rosenblatt's functions are a subset of the C shell functions 
              of the same name.)
            <P> Basically, executing a push with an argument saves the argument 
              and changes to that destination; executing a pop enough times -- 
              no matter how many times push was executed -- changes to the original 
              directory.
            <P> Rosenblatt emulates pushing and popping directory names by storing 
              them in shell variable DIRSTACK. When implementing Rosenblatt's 
              functions, we discovered the following three issues:
            <P> 
            <P> 1. In the <B>pushd</B> function, every argument pushed onto the 
              stack must be delimited by a space in order to pop it off:
            <P> 
            <pre>
DIRSTACK=${DIRSTACK#* }
</pre>
            Unfortunately, the first argument pushed onto the stack is not space 
            delimited; thus, the first argument never gets popped.
            <P> 2. In the <B>pushd</B> function, Rosenblatt executes a change 
              directory before popping, which incorrectly initializes the stack. 
              This causes the stack not to return to the original directory.
            <P> 3. In the <B>popd</B> function, Rosenblatt checks for a null stack 
              before changing to the destination directory. Ultimately, this executes 
              a change directory command with a null argument placing users back 
              in their home directory, which is probably not the original directory.
            <P> <b>Setting the Environment</b>
            <P> In the rest of the column, we'll explain our fixes to Rosenblatt's 
              functions. Rosenblatt presents his solutions as functions. For demonstration 
              purposes, we are presenting his code (Listing 1, br_pushd, Listing 
              2, br_popd) and our solution (Listing 3, our_pushd, Listing 4, our_popd) 
              as scripts.
            <P> We've also created four aliases that easily source the scripts:
            <P> 
            <pre>
br_pushd='. /home/jspurgeo/sandbox/br_pushd'
br_popd='. /home/jspurgeo/sandbox/br_popd'
our_pushd='. /home/jspurgeo/sandbox/our_pushd'
our_popd='. /home/jspurgeo/sandbox/our_popd'
</pre>
            To ease debugging, the following alias prints the DIRSTACK shell variable 
            surrounded by double-quotes:
            <P> 
            <pre>
print_stack='echo DIRSTACK=\"$DIRSTACK\"'
</pre> <B>The Terminating Space Problem</b>
            <P> Assuming our original directory is /home/jspurgeo/sandbox, using 
              Rosenblatt's example, push a directory onto the stack:
            <P> 
            <pre>
$ br_pushd /etc
/etc /etc
</pre>
            Executing multiply <B>br_popd</B> calls verifies that the stack never 
            empties and never returns to the original directory. Execute the <B>print_stack</B> 
            alias to view the stack:
            <P> 
            <pre>
DIRSTACK="/etc"
</pre>
            The Korn shell expression requires a space at the end of the first 
            argument. In the <B>pushd</B> function, to obtain the terminating 
            space, change this code:
            <P> 
            <pre>
DIRSTACK="$dirname ${DIRSTACK:-$PWD}"
</pre>
            to:
            <P> 
            <pre>
DIRSTACK="$dirname ${DIRSTACK:-$PWD }"
</pre>
            With this change, execute the test again:
            <P> 
            <pre>
$ br_pushd /etc
/etc /etc
</pre>
            Execute <B>br_popd</B>, view the stack with <B>print_stack</B>, and 
            verify a space exists:
            <P> 
            <pre>
DIRSTACK="/etc "
</pre>
            Now, execute <B>br_popd</B> twice, and note receiving a "stack empty" 
            message, and that a call to <B>print_stack</B> displays an empty stack:
            <P> 
            <pre>
DIRSTACK=""
</Pre> <b>The Stack Initialization Problem</b>
            <P> You probably noticed that although the stack empties, it doesn't 
              ultimately return to the original directory. This happens because 
              the stack is initialized with the wrong directory. Simply flip the 
              following two lines:
            <P> 
            <pre>
   cd $dirname
   DIRSTACK="$dirname ${DIRSTACK:-$PWD }"
</pre>
            to read:
            <P> 
            <pre>
   DIRSTACK="$dirname ${DIRSTACK:-$PWD }"
   cd $dirname
</pre>
            Now, execute the push test again:
            <P> 
            <pre>
$ br_pushd /etc
/etc /home/jspurgeo/sandbox
</pre>
            Note that the stack reads "/etc /home/jspurgeo/sandbox" where before 
            the output read "/etc /etc".
            <P> <b>The Null Stack Check Problem</b>
            <P> Running the push/pop test again shows the user ultimately back 
              in his home directory:
            <P> 
            <pre>
$ pwd
/home/jspurgeo/sandbox 

$ br_pushd /etc
/etc /home/jspurgeo/sandbox 

$ br_popd
/home/jspurgeo/sandbox

$ print_stack
DIRSTACK="/home/jspurgeo/sandbox "

$ br_popd
/home/jspurgeo

$ br_popd
stack empty, still in /home/jspurgeo.
</pre>
            Ending in the user's home directory happens because the Unix <B>cd</B> 
            command is executed with a null argument when the stack empties. This 
            happens because Rosenblatt performs the stack null check before popping 
            an argument from the stack:
            <P> 
            <pre>
if [[ -n $DIRSTACK ]]; then
    DIRSTACK=${DIRSTACK#* }
    .
    .
</pre>
            Fix the problem by popping the argument before performing the null 
            check:
            <P> 
            <pre>
DIRSTACK=${DIRSTACK#* }
if [[ -n $DIRSTACK ]]; then
    .
    .
</pre>
            Perform the push/pop test again and verify returning to the original 
            directory:
            <P> 
            <pre>
$ pwd
/home/jspurgeo/sandbox 

$ br_pushd /etc
/etc /home/jspurgeo/sandbox 

$ br_popd
/home/jspurgeo/sandbox

$ br_popd
stack empty, still in /home/jspurgeo/sandbox.
</pre> <b>References</b>
            <P> Online Man page for screen -- <B>http://www.delorie.com/gnu/docs/screen/screen.html</B>
            <P> Manipulating Floppy Disk Images on Solaris -- <B>http://www.samag.com/documents/s=9598/sam0504j/</B>
            <P> Queuing Jobs with qjob -- <B>http://www.samag.com/documents/s=9820/sam0508h/0508h.htm</B>
            <P> Rosenblatt, Bill. 1993. <I>Learning the Korn Shell</I>. Sebastopol, 
              CA: O'Reilly &amp; Associates.
            <P> Using Screen in Scripts -- <B>http://www.samag.com/documents/s=9598/sam0504k/0504k.htm</B>
            <P> <I>John Spurgeon is a software developer and systems administrator 
              for Intel's Factory Information Control Systems, IFICS, in Aloha, 
              Oregon. Outside of work, he enjoys turfgrass management, triathlons, 
              ultra-marathon cycling, and spending time with his family.</i>
            <P> <i>Ed Schaefer is a frequent contributor to </I>Sys Admin<I>. 
              He is a software developer and DBA for Intel's Factory Information 
              Control Systems, IFICS, in Aloha, Oregon. Ed also hosts the monthly 
              Shell Corner column on UnixReview.com. He can be reached at: <B>shellcorner@comcast.net</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
