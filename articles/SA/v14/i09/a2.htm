<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i09: The Need for Secure Data</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2005/sep2005.tar"><b class=codeListing>sep2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a2.gif" alt="" width="200" height="167" align="right">The 
              Need for Secure Data</h1>
            <P> Robert Bernier
            <P> All is not well for companies specializing in data management; 
              they are under increasing pressure to ensure the security of personal 
              information. As a result of recent events, there's a movement 
              among many governments to enact new, tough privacy legislation. 
              When these laws take effect (and they are already active in many 
              jurisdictions), they will force companies who collect personal information 
              to be liable if the security of their data-warehouse is breached. 
              Recall the ChoicePoint incident that exposed hundreds of thousands 
              of social security numbers in late 2004.
            <P> The legislation that is currently being proposed in California, 
              for example, describes not only who and under what conditions confidential 
              information can be released but also how that information should 
              be stored on the servers. Suppose a hard drive is stolen, or more 
              likely sold off, that contains driver license numbers, credit card 
              numbers, etc. The law requires that those people to whom the information 
              belongs must be informed by the company that compiled that information. 
              The enterprise is held liable for all subsequent issues that may 
              arise from the loss of control of that data. However, if the data 
              has been encrypted, then it is not necessary to inform those individuals 
              because the information cannot be harvested by criminal elements.
            <P> The purpose of this article is to introduce a technique that addresses 
              this new climate of security threats and the expectations from both 
              government and public alike. This method is easy and effective. 
              It will work even if you lose control of the hardware. The technology 
              is called "file system encryption", and the tool set is 
              common to all Unix-like operating systems.
            <P> <b>The Technical Nitty Gritty</b>
            <P> No special hardware requirements are necessary and any relatively 
              recent distribution of your operating system will work (e.g., Linux, 
              FreeBSD, Solaris, even OSX).
            <P> For the purposes of this article, all utilities and methods will 
              be made in the context of a Debian-based distribution of Linux using 
              a 2.6 series kernel. Note that Microsoft-oriented people, who have 
              very little experience with Linux, can still take advantage of this 
              article by downloading the latest version of "pg_live", 
              a Linux live CD that includes a replication-enhanced version of 
              PostgreSQL 8.0. All you need to do is put it in the PC and turn 
              it on. Pg_live will boot up and self-configure itself to run on 
              your machine. It doesn't install on the hard drive and runs 
              exclusively in RAM. Pg_live is available through Bit Torrent and 
              is also available for download at the SRA America site at:
            <P> 
            <pre>
http://sraapowergres.com
</pre>
            You can learn more about pg_live and how to use it at:
            <P> 
            <pre>
http://sraapowergres.com/en/newsletter/issue_02/
</pre> <b>Creating and Using a Simple File System</b>
            <P> Creating a file system will require the following utilities: <B>dd</B>, 
              <B>losetup</B>, <B>mount</B>, and <B>mkfs</B>.
            <P> The first step is to create an empty file that will hold the file 
              system. You will want to consider how large you want it to be; otherwise, 
              if it's too small, you will need to resize it later.
            <P> Creating a file is accomplished using the utility <B>dd</B>, you 
              don't need to be root to do this. The following command will 
              create a 100-KB empty file made up of the null character:
            <P> 
            <pre>
dd if=/dev/zero of=~/tmp/mysystemfile bs=1k count=100
</pre>
            The "if" switch identifies the input source (/dev/zero) 
            and the "of" switch identifies the name of the output file 
            (mysystemfile).
            <P> The "bs" switch defines how many BYTES should be read 
              and inputted into the file at a time. Note that in this example 
              the letter "k" was added to the number "1"; 
              this means that a block of 1,024 bytes is inputted and outputted 
              to the file "mysystemfile". The letter defines the unit 
              of measure (i.e., "b" for bytes, "k" for kilobytes, 
              "M" for megabytes, and "G" for gigabytes).
            <P> The count switch defines the number of reads and writes that should 
              take place (i.e., bs=1k and count=100 means 1,000 X 100 or 100 KB).
            <P> Avoid making the bs value too large, such as the following, when 
              attempting to create large systems files (e.g., 10 gigabytes):
            <P> 
            <pre>
dd if=/dev/zero of=~/tmp/mysystemfile bs=1G count=10
</pre>
            This command fails if you don't have at least 1 GB of RAM (1.024 
            GB to be exact). Use a higher count number instead. The following 
            is more reasonable because it inputs/outputs smaller, 1 MB (1.024 
            MB), chunks:
            <P> 
            <Pre>
dd if=/dev/zero of=~/tmp/mysystemfile bs=1M count=10000
</pre>
            Once created, the next step is to associate this file to a loop device 
            using the <B>losetup</B> utility. There are eight loop devices on 
            my own system, the first one being loop0. You'll have to have 
            root privileges to do this:
            <P> 
            <pre>
losetup /dev/loop0 /home/bernier/tmp/mysystemfile
</pre>
            It's time to format the file system, which is accomplished using 
            the standard <B>mkfs</B> utilities. For maximum security DO NOT create 
            a journaled file system such as ext3. Use something like ext2, otherwise 
            you'll have sensitive information in the cache memory:
            <P> 
            <pre>
mkfs /dev/loop0
</pre>
            Loop0 is, of course, where "mysystemfile" has been associated 
            as the device.
            <P> Mounting the device is accomplished by using <B>mount</B> as root:
            <P> 
            <pre>
mkdir /home/bernier/mnt
mount -t ext2 /dev/loop0 /home/bernier/mnt
</pre>
            Note that, in most situations, the <B>mount</B> command will recognize 
            the file system automatically, therefore the <B>-t</B> switch is not 
            really necessary under Linux.
            <P> Typing <B>mount</B> without using switches returns a listing of 
              all the devices currently mounted.
            <P> You can unmount the device with the <B>umount</B> command. Remember 
              not to have any process running inside the file system or you won't 
              be able to unmount it:
            <P> 
            <pre>
umount /home/bernier/mnt
</pre>
            Detaching the file "myfilesystem" from the device loop is 
            the last step and is accomplished using the detach switch <B>-d</B> 
            in the <B>losetup</B> command:
            <P> 
            <pre>
losetup -d /dev/loop0
</pre>
            Now that a file system has been created in "mysystemfile", 
            future mounts and unmounts can be accomplished with a single command:
            <P> 
            <pre>
mount -o loop /home/bernier/tmp/mysystemfile /home/bernier/mnt
</pre> <b>Using Encryption in a File System</b>
            <P> The encrypted file system is first created, using <B>losetup</B>. 
              The Debian distribution on which I based this article provides a 
              number of different ways to accomplish this. The "loop-aes" 
              package, used in this case, replaces the distribution's default 
              <B>mount</B>, <B>umount</B>, and <B>losetup</B> utilities with encryption-enabled 
              versions. But you must first have the crypto libraries compiled 
              into the machine's kernel.
            <P> The type of encryption utilities and libraries available to you 
              largely depends on what part of the world you're located in. 
              Assuming you are downloading from a local Debian server in North 
              America, the install command for the correct packages are:
            <P> 
            <pre>
apt-get install loop-aes
</pre>
            The <B>losetup</B> utility, as demonstrated below, requires that you 
            manually input a password. Some ciphers such as "aes" require 
            a minimum of 20 characters in length; otherwise the command fails 
            and you get an error message.
            <P> 
            <pre>
losetup -e aes /dev /loop0 /home/bernier/mysystemfile
password: XXXX..
mkfs  /dev/loop0
mount /dev/loop /home/bernier/mnt
</pre>
            Verify that the file system is active by typing <B>mount</B> without 
            any options. You can also identify the particular encryption composing 
            <B>losetup -a</B>, which lists all currently configured loop devices.
            <P> Once you have created your encrypted file system, you can remount 
              it with a single <B>mount</B> command using the <B>-o</B> option 
              switch:
            <P> 
            <pre>
mount -o loop,encryption=aes /home/bernier/tmp/mysystemfile \
  /home/bernier/mnt
</pre> <b>Choosing Your Password</b>
            <P> Using the <B>-p0</B> switch allows for standard input of the password. 
              This lends itself well to a script, thus making the exercise of 
              typing out a long password less painful:
            <P> 
            <pre>
cat mypasswordFile.txt | losetup -e aes -P 0 /dev/loop0
   /home/bernier/mysystemfile
</pre>
            The truly security-minded individual can generate a password of any 
            length and save it to a file on a removable device, such as a floppy 
            disk (or even an iPod). This two-line example uses "openssl" 
            to generate 6,000 ASCII characters and saves it as a password file. 
            It is then piped as standard input to "losetup":
            <P> 
            <pre>
openssl rand -out mypasswordFile.txt -base64 6000
cat mypasswordFile.txt | losetup -e aes -p0 /dev/loop0
   /home/bernier/tmp/mysystemfile
</pre> <b>About Permissions</b>
            <P> The last step is to create directories in the encrypted file system 
              for the use of users and applications. In this example, I'm 
              creating a "bernier" account for myself so that I can 
              write data into the encrypted file system once it's mounted:
            <P> 
            <pre>
mkdir /home/bernier/mnt/bernier
chown bernier.bernier /home/bernier/mnt/bernier
</pre> <b>Mounting the Encrypted File System</b>
            <P> Mounting an encrypted file system requires root privileges; however, 
              there are a number of techniques that can be used that will permit 
              an ordinary user this same ability. The method shown here modifies 
              the fstab file, which provides static information about the file 
              systems, located in the etc directory. Add the following line:
            <P> 
            <pre>
/home/bernier/tmp/mysystemfile /home/bernier/mnt ext2
           defaults,user,noauto,loop,encryption=aes 0 0
</pre>
            Here's what the above line says -- the first field is the 
            file containing the encrypted file system. The second field is the 
            mount point. The third field is the file system type. The fourth field 
            consists of a comma-separated list of options that apply to the <B>mount</B> 
            and <B>losetup</B> commands, respectively. The fifth and sixth options 
            relate to the <B>dump</B> and <B>fsck</B> commands, respectively; 
            you can leave them both at "0".
            <P> Note that the options in the fourth field are read left to right. 
              Options declared on the left are altered by subsequent commands 
              to the right. The "noauto" option prevents the file system 
              from automatically being loaded at boot time. Refer to the <B>mount</B> 
              man page for further information about these and other options you 
              can use here.
            <P> User name "bernier" can now mount the encrypted file 
              system with the following command:
            <P> 
            <pre>
cat mypasswordFile.bin | mount -p0 /home/bernier/mnt
</pre>
            The password option "p0" was intentionally left out of the 
            fstab file because it deprives a potential cracker of important information 
            as to how and where the password is coming from.
            <P> There still might be problems with the way the fstab entry has 
              been made if one considers that the "user" option permits 
              anybody to attempt to mount the file system. Even though the attempt 
              would require a password, this setup could lend itself to a brute 
              force attack. At the very least, it could lead to unmounting problems 
              if another user succeeded in mounting it. The issue can be resolved 
              by doing two things:
            <P> 
            <P> 1. Change the "fstab" option from "user" to 
              "nouser" such that only root can invoke this mount instruction.
            <P> 2. Create a "sudo" entry permitting user account "bernier" 
              the ability to mount the file system.
            <P> 
            <P> Therefore, the "fstab" entry can be rewritten as:
            <P> 
            <pre>
/home/bernier/tmp/mysystemfile /home/bernier/mnt ext2
           defaults,nouser,noauto,loop,encryption=aes 0 0
</pre>
            These entries to the sudoers file permit user name "bernier" 
            the ability to mount the file system via the <B>sudo</B> command:
            <P> 
            <pre>
Cmnd_Alias    MOUNT_ENCRYPT = /bin/mount -p0 /home/bernier/mnt
Cmnd_Alias    UMOUNT_ENCRYPT = /bin/umount /home/bernier/mnt
bernier       ALL = MOUNT_ENCRYPT, UMOUNT_ENCRYPT
</pre>
            The <B>mount</B> and <B>umount</B> commands can now be used by user 
            name "bernier":
            <P> 
            <pre>
cat mypasswordFile.bin | sudo mount -p0 /home/robert/mnt
sudo umount /home/robert/mnt
</pre> <b>A Word about Encryption Ciphers</b>
            <P> Choosing what to use from the available ciphers depends upon two 
              factors: security and speed. The more secure the data, the slower 
              the processing. The fastest cipher is XOR encryption, but this isn't 
              really much of a cipher because it is an obfuscation technique. 
              On the other hand, AES256 is extremely secure with a 256-bit encryption 
              algorithm, and the password is hashed with SHA-512. The security 
              of a number of the ciphers offered depends on the length of the 
              password. Hence, the longer the password the longer the encryption 
              key length and, of course, the harder it becomes to crack the password 
              using a brute force method.
            <P> Note that Debian's <B>mount</B> utility, in the aes package, 
              can use gpg public key encryption (asymmetric ciphers). However, 
              for the purposes of keeping this article from turning into a book, 
              I will refrain from discussing this form of encryption and concentrate 
              rather on the symmetric ciphers.
            <P> <b>Being Practical</b>
            <P> There are two areas of usage where you can put encrypted file 
              systems to good use -- the first is a laptop that carries sensitive 
              data. The second is a database server that holds sensitive information, 
              such as credit card numbers.
            <P> <b>The Laptop</b>
            <P> The only thing that I'd like to add here is that a good login 
              script streamlines the mount process for the user account. As a 
              further security measure, you might want to execute the mount command 
              from a shell that doesn't record the keystrokes (i.e., beware 
              of bash's history functionality).
            <P> Securing Sensitive Data on a PostgreSQL Database Server
            <P> While you can perform row-wise encryption in a PostgreSQL database 
              with the existing modules in the PostgreSQL distribution, column-wise 
              and even table-wise encryption is possible when using the 8.0 table 
              partitioning feature and storing data in an encrypted file system.
            <P> The method outlined here involves creating an updatable view that 
              performs INSERTions and SELECTs. The columns are located not only 
              in two separate tables but in two different partitions where one 
              is in the clear/unencrypted (the name of the credit card holder) 
              and the other is encrypted (the credit card number itself). Keep 
              in mind that you want to keep as little information as possible 
              in an encrypted format otherwise your installation is going to suffer 
              a performance hit.
            <P> The following instructions assume that you have Postgres 8.0 already 
              running and that the data cluster is located in the directory "/var/lib/pgsql8". 
              Carry out the following instructions in a console as "root":
            <P> 
            <pre>
cd /var/lib/pgsql8
mkdir mnt
dd if=/dev/zero of=encryptedPartition bs=1M count=30
openssl rand -out mypasswordFile.txt -base64 60
cat mypasswordFile.txt | losetup -p0 -e aes256 /dev/loop1 \
  encryptedPartition
mkfs /dev/loop1
mount /dev/loop1 mnt
mkdir mnt/data
chown postgres.postgres mnt/data
</pre>
            You will have noticed that I created a 60-character randomly generated 
            password using "openssl". It's quite easy creating 
            passwords of any length using the openssl command-line utility from 
            the OpenSSL cryptography toolkit.
            <P> These SQL commands are executed from the "psql" client 
              as the superuser "postgres":
            <P> 
            <pre>
psql -Upostgres template1
CREATE DATABASE client;
\c client
CREATE TABLE client(id serial,name text);
CREATE TABLESPACE encrypted LOCATION '/var/lib/pgsql8/mnt/data';
CREATE TABLE confidential(id serial,credit_card text) \
  TABLESPACE encrypted;
</pre>
            Here's a little bit of PostgreSQL magic. The two tables "client" 
            and "confidential" can be queried as one table by combining 
            them into a view called "v_client": 
            <P> 
            <pre>
CREATE OR REPLACE VIEW v_client (name,credit_card)
    AS SELECT name,credit_card 
        FROM client,confidential 
        WHERE client.id=confidential.id;
</pre>
            The following "rewrite rule" creates an updatedable view 
            that permits data to be inserted transparently to both tables as though 
            they were one:
            <P> 
            <pre>
CREATE OR REPLACE RULE ruleInsert_v_client AS ON INSERT
TO v_client DO INSTEAD
(
    INSERT INTO client (name) VALUES (NEW.name);
    INSERT INTO confidential (credit_card) VALUES (NEW.credit_card)
);
</pre>
            The special table name NEW (i.e., NEW.name, NEW.credit_card) refers 
            to values that are being inserted or updated into a table. The table 
            name OLD can also be used in a rewrite rule when the commands &lt;code&gt;UPDATE&lt;text&gt; 
            or &lt;code&gt;DELETE&lt;text&gt; are used. Please refer to the PostgreSQL 
            reference section under SQL COMMANDS for more information on rewrite 
            rules.
            <P> The last series of steps involves testing what you've created 
              by INSERTING and performing SELECT queries. Now we test... and it 
              works:
            <P> 
            <pre>
INSERT INTO v_client(name,credit_card) \
  VALUES('Robert Bernier','23412441');
INSERT INTO v_client(name,credit_card) \
  VALUES('Brian Killer Pat','22345599');
INSERT INTO v_client(name,credit_card) \
  VALUES('Rocky Romantic','97274375');
SELECT * FROM v_client;
</pre> <b>Tips</b>
            <P> At file system creation time, you can prevent typing mistakes 
              by using the <B>-P</B> switch in the <B>losetup</B> command so that 
              it asks for your password twice:
            <P> 
            <pre>
losetup -P -e aes /dev /loop0 /home/bernier/mysystemfile
</pre>
            Practice everything covered here using xor encryption because it's 
            very fast and doesn't require very long passwords, enabling you 
            to type it out by hand.
            <P> Experiment with different encryption algorithms as you create 
              your file system. Their performance will vary according to your 
              security needs as well as your hardware configuration. Remember, 
              you can only use those ciphers that have already been encrypted 
              into your kernel.
            <P> Studying the man pages, listed at the end of this article, will 
              offer you many options to increasing file system security.
            <P> Consider keeping your password file physically separate from your 
              server/laptop in order to make it much more difficult to gain unauthorized 
              access to the file system.
            <P> Make sure that you either manually unmount or install a script 
              that will do it whenever you shut down your machine. Otherwise you 
              run the risk of damaging the file system.
            <P> <b>Conclusion</b>
            <P> Identity theft has quickly risen to crisis-level proportions. 
              Keeping your information under encryption will save you much grief. 
              The techniques I've described here are straightforward and 
              don't require much more than the standard tool set that is 
              available on today's open source platform. Be proactive and 
              protect your systems.
            <P> <b>References</b>
            <P> <b>Links</b>
            <P> SRA America -- <B>http://sraapowergres.com</B>
            <P> Bit Torrent -- <B>http://www.bittorrent.com</B>
            <P> PostgreSQL -- <B>http://postgresql.org</B>
            <P> Choicepoint identity theft -- <B>http://www.msnbc.msn.com/id/6969799/</B>
            <P> Identity theft conviction -- <B>http://www.news10.net/storyfull10.asp?id=9611</B>
            <P> New California privacy laws -- <B>http://www.cio.com/archive/011505/california.html</B>
            <P> <b>Man Pages</b>
            <P> dd
            <P> losetup
            <P> mke2fs
            <P> mkdir
            <P> mount
            <P> fstab
            <P> openssl
            <P> sudo
            <P> sudoers
            <P> visudo
            <p> <I>Robert works as a consultant and has written for numerous magazines. 
              He is also a regular writer for O'Reilly's onlamp.com. Currently, 
              Robert is the PostgreSQL Business Intelligence Analyst at the Manhattan 
              offices of SRA, Software Research Associates, which specializes 
              in service and support for BSD and PostgreSQL. SRA (<B>http://sraapowergres.com</B>) 
              was founded in the 1960s and is among the world's oldest software 
              houses. Robert can be contacted at: <B>robertb@sraapowergres.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
