<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i05: Avoiding SQL Injection Attacks</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2005/may2005.tar"><b class=codeListing>may2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Avoiding 
              SQL Injection Attacks</B></h1>
            <P> <I>Randal L. Schwartz</i>
            <p> In recent months, the entertainment news was abuzz with how socialite 
              Paris Hilton had had her Sidekick phone "hacked", revealing phone 
              numbers for many famous people, interesting notes about possible 
              profit participation in the "stolen" sex tape, and lurid pictures, 
              all of which were broadcast widely on the Internet. But the quiet 
              word amongst computer security professionals was that this wasn't 
              a matter of hacking into her phone at all, not that the entertainment 
              news people would know or care. Instead, certain individuals have 
              claimed responsibility through a well-known security flaw on T-Mobile's 
              Web site, with which the phone is synchronized. Thus, it wasn't 
              the phone that was the source of information -- it was the Web site.
            <P> While the precise steps by which the intruder obtained access 
              may never be known, one of the most common intrusion paths is the 
              <I>SQL Injection Attack</I>. An intruder guesses either by trial 
              and error or determines by examining the source code of the application 
              some field in a form is being used to construct an SQL query. Unless 
              the application carefully verifies the content of this field, or 
              quotes the unusual characters properly, it might be possible for 
              the field's value to escape beyond its intended use and create additional 
              SQL constructs.
            <P> Let's look at a specific example. Suppose a bank Web application 
              is trying to show all the bank account balances that belong to me. 
              The SQL might look like:<I></i>
            <p> 
            <pre>
SELECT account_id, balance
FROM account_data
WHERE account_owner = '[ME]';
</pre>
            Here, the [ME] comes from some other part of the calculation, which 
            isn't relevant. The effect is that I see only my data. Now, let's 
            say that the Web programmers at the bank upgrade the application so 
            that I can distinguish my personal and business accounts via a pop-up 
            form element, which returns back a "1" for personal and "2" for business. 
            So, they change this SQL to be:
            <P> 
            <pre>
SELECT account_id, balance
FROM account_data
WHERE account_owner = '[ME]'
AND account_type = $account_type;
</pre>
            Of course, they presume that the values "1" and "2" will drop in quite 
            nicely there, and the application tests out just fine, so the programmers 
            move on to the next item in their long to-do list.
            <P> What many Web programmers fail to realize is that just because 
              a pop-up form specifies a list of values or a text field provides 
              a maximum length (even enforced by JavaScript), this doesn't mean 
              that a user can't construct an arbitrary value for any returned 
              form parameter. Of course, changing this value to "3" won't do me 
              much good. I won't get anything at all because there aren't any 
              accounts with a type of 3.
            <P> But suppose I jimmy up a return value so that <B>$account_type</B> 
              comes back as: <B>1 OR 99 = 99</B>. Let's fill that in:
            <P> 
            <pre>
SELECT account_id, balance
FROM account_data
WHERE account_owner = '[ME]'
AND account_type = 1 OR 99 = 99;
</pre>
            Oops! What just happened? Since the <B>OR</B> has a lower precedence 
            than the <B>AND</B>, we're saying essentially "true" for every row 
            of the table. Presuming we have the patience to page through the result, 
            we now have everyone's account numbers and balances. Oops.
            <P> There are many other variants on SQL injection attacks. You might 
              be rather shocked when you begin a Web search for further information. 
              But let's cut to the right way to do this -- with DBI placeholders. 
              The DBI interface permits a chunk of SQL to contain question marks 
              wherever data is being used. For example, the SQL above could be 
              written as:
            <P> 
            <pre>
my $sth = $dbh-&gt;prepare(q{
  SELECT account_id, balance
  FROM account_data
  WHERE account_owner = ?
  AND account_type = ?
});
</pre>
            This takes an existing database handle (here, <B>$dbh</B>), and creates 
            a statement handle (<B>$sth</B>) that is safely protected from SQL 
            injection attacks. We use this handle by calling <B>execute</B>, providing 
            the values to be inserted:
            <P> 
            <pre>
$sth-&gt;execute('ABC 123', 2);
</pre>
            The DBI system goes through the data, figuring out how to quote the 
            values properly for the corresponding database. For example, the statement 
            being executed will likely end up being something like:
            <P> 
            <pre>
SELECT account_id, balance
FROM account_data
WHERE account_owner = 'ABC 123'
AND account_type = 2
</pre>
            Note that the string was enclosed in single quotes, but the number 
            remained unquoted. (This is important for databases that respect data 
            types.) Now, let's see what happens if we try to pass that complex 
            string as the account type number:
            <P> 
            <pre>
$sth-&gt;execute('ABC 123', '1 OR 99 = 99');
</pre>
            This results in the effective SQL of:
            <P> 
            <pre>
SELECT account_id, balance
FROM account_data
WHERE account_owner = 'ABC 123'
AND account_type = '1 OR 99 = 99'
</pre>
            Ahh, look! The quotes enclose the now-apparent string value. While 
            the query is likely to fail (no account type will match that), we 
            didn't get to see everyone's account balances either. Success.
            <P> The <B>execute</B> method should get one value for every placeholder 
              in the query string. The <B>undef</B> value is properly mapped as 
              <B>NULL</B>, while numbers and strings pass through properly quoted 
              for the active database. Certain types may require hinting as to 
              the actual data type; see the <B>DBI</B> documentation for further 
              information.
            <P> One common problem when using placeholders is that we must maintain 
              a correlation between chunks of SQL and the actual values we want 
              to plug in. Good discipline helps here, but there's a nice module 
              in the CPAN called <B>SQL::Abstract</B> that helps us say what we 
              intend with a bit more clarity.
            <P> One feature of <B>SQL::Abstract</B> is that a particular <B>WHERE</B> 
              clause can be represented by relatively straightforward complex 
              data structure. For example, <B>AND</B>-ing two conditions is represented 
              by a hashref:
            <P> 
            <pre>
{ account_owner =&gt; $owner, account_type =&gt; $account_type }
</pre>
            Here, <B>$owner</B> contains our <B>ABC 123</B> and <B>$account_type</B> 
            is 1 or 2.
            <P> Using <B>SQL::Abstract</B>, we can convert this to the SQL to 
              feed to <B>prepare</B>, and the bind parameters to feed to <B>execute</B> 
              with one simple step:
            <P> 
            <pre>
use SQL::Abstract;
my $sqa = SQL::Abstract-&gt;new;

my ($owner, $account_type) = ('ABC 123', 2); # from inputs

my ($sql, @bind) = $sqa-&gt;select(
  'account_data', # table
  [qw(account_id balance)], # fields
  {
   account_owner =&gt; $owner,
   account_type =&gt; $account_type
  }, # "where"
);

my $sth = $dbh-&gt;prepare_cached($sql); # reuse SQL if we can
$sth-&gt;execute(@bind);                 # execute it for this query
</pre>
            The result is a good query, with good bind values in the right order. 
            And we're still safe from SQL injection attacks. If we also wanted 
            to add <B>account_status</B> as not in suspended or deleted, we could 
            change the query to:
            <P> 
            <pre>
{
  account_owner =&gt; $owner,
  account_type =&gt; $account_type,
  account_status =&gt; { -not_in =&gt; ['suspended', 'deleted'] },
}
</pre>
            In this case, the corresponding SQL looks like:
            <P> 
            <pre>
SELECT account_id, balance
FROM account_data WHERE
( account_owner = ?
  AND account_status NOT IN ( ?, ? )
  AND account_type = ? )
</pre>
            with bind values of:
            <p> 
            <pre>
'ABC 123', 'suspended', 'deleted', 2
</pre>
            Note that the ordering of the hash elements affects the output, but 
            the bind values did indeed line up with the corresponding placeholders.
            <P> I won't repeat the entire manpage for <B>SQL::Abstract</B> here, 
              but it looks sufficient for most of the queries I've ever wanted 
              to create in SQL.
            <P> I can even use <B>SQL::Abstract</B> with my <B>Class::DBI</B>-wrapped 
              databases using <B>Class::DBI::AbstractSearch</B>. Mixing in this 
              class to my <B>Class::DBI</B>-derived base class gives me the <B>search_where</B> 
              clause, accepting that same data structure. For example:
            <P> 
            <pre>
my @results = My::DB::AccountData-&gt;search_where({
  account_owner =&gt; $owner,
  account_type =&gt; $account_type,
  account_status =&gt; { -not_in =&gt; ['suspended', 'deleted'] },
});
</pre>
            And there, no SQL to write at all, again, and I'm safe from SQL Injection 
            Attacks.
            <P> I hope you find <B>SQL::Abstract</B> useful, and never have your 
              name appear in a headline regarding a bad security break-in. Until 
              next time, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
