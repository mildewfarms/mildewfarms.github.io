<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i07: Using GraphViz for Database Schema Visualization</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a6_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a6_t1.htm">Table 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/2005/jul2005.tar"><b class=codeListing>jul2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a6.gif" width="200" height="167" align="right">Using 
              GraphViz for Database Schema Visualization</h1>
            <P> Mihalis Tsoukalos
            <P> This article will try to combine the power of Perl and GraphViz 
              in order to partly visualize a DBMS. I will provide a quick introduction 
              to GraphViz, and then present the use of GraphViz for illustrating 
              Entity Relation (ER) diagrams. Finally, I will demonstrate a Perl 
              script for visualizing all the tables of a user in an Oracle DBMS 
              using GraphViz.
            <P> As you may already know, the very rich collection of Perl modules 
              available from CPAN includes modules that utilize and produce GraphViz 
              output. The basic Perl module is called GraphViz (the Interface 
              to the GraphViz graphing tools), which is also the base of GraphViz::DBI 
              module, and it is used for visualizing database tables and relations. 
              This article utilizes plain PL/SQL and the Perl programming language 
              to graphically represent all the tables of a user including their 
              fields as well as their relationships with the tablespaces of the 
              DBMS.
            <P> <b>An Introduction to GraphViz</b>
            <P> GraphViz consists of a set of command-line tools, as well as a 
              language called "dot" that can draw either directed or 
              undirected graphs. There are also some GUI tools for GraphViz, but 
              I will not discuss those in this article. GraphViz is available 
              both compiled for most UNIX distributions and in source code format.
            <P> The tools included in GraphViz are "dot", which is for 
              directed graphs; "neato", which is for undirected graph 
              layouts; and "twopi", which is for undirected graph layouts 
              in a radial form. The general way of executing each of the tools 
              is as follows:
            <P> 
            <pre>
toolname -Tps filename -o output.ps
</pre>
            where "toolname" is the name of the command-line tool, and 
            "-Tps" is a parameter that denotes that the output should 
            be in postscript. GraphViz also supports, among others, GIF, PNG, 
            and JPEG formats as its output. "filename" is the name of 
            the file to process, and "-o output.ps" denotes that the 
            output is going to be stored in a file called output.ps.
            <P> <b>Using GraphViz for Entity Relation Diagrams</b>
            <P> In this section, an Entity Relation (ER) diagram will be constructed 
              as a simple example of GraphViz capabilities. An ER diagram is a 
              graph that represents entity sets, attributes, and relations. It 
              is a common practice to represent entity sets as rectangles, attributes 
              as ovals, and relations as diamonds. GraphViz can painlessly cope 
              with ER diagrams. Figure 1 shows the ER diagram made using the "neato" 
              code in Listing 1 as follows:
            <P> 
            <pre>
graph G
{
         rotate = 90;

         B_ISBN[label="ISBN"];
         B_Title[label="Title"];
         B_Price[label="Price"];
         O_id[label="id"];
         O_TC[label="Total Cost"];
         O_DC[label="Delivery Cost"];

         node[shape=rectangle];
         Book[label="Book"];
         Order[label="Order"];

         BO[label="Book Order relation", shape=diamond];

         B_ISBN -- Book[len=1.2];
         B_Title -- Book[len=1.2];
         B_Price -- Book[len=1.2];

         O_id -- Order[len=1.2];
         O_TC -- Order[len=1.2];
         O_DC -- Order[len=1.2];

         Book -- BO[label = "1", len=2];
         Order -- BO[label = "m", len=2];
}
</pre>
            GraphViz tools are also able of decorating their nodes. There are 
            many parameters that can change the look of the nodes. Table 1 shows 
            some of the node attributes, whereas Table 2 shows some of the edge 
            attributes.
            <P> <b>A Perl Script for RDBMS Visualization</b>
            <P> This script will not use the famous DBD and DBI Perl modules, 
              because they add complexity to our process, although these modules 
              are very handy and reliable. Plain PL/SQL will be used to extract 
              information from the Oracle 10g DBMS as text. It is possible to 
              use Perl DBD and DBI modules to produce the same text output.
            <P> Listing 3 shows the PL/SQL code that extracts the required information 
              from Oracle 10g. It makes use of Oracle USER_TAB_COLUMNS and USER_TABLES 
              tables. A graphical description of these two tables is shown in 
              Figure 2.
            <P> The Perl script used is shown in Listing 2. It accepts the results 
              of Listing 3 as input and produces a GraphViz file as its output, 
              which must then be manually processed by the dot utility. After 
              extracting the information about the tables and their respective 
              fields, the aforementioned Perl script writes the word TABLESPACE 
              in the output and continues with the information about the tablespace/table 
              relations. The TABLESPACE word helps us separate the table-field 
              relations part from the tablespace-table relations part.
            <P> A simple graph produced by the Perl script is shown in Figure 
              3. Depending on the total number of tables, the output may be huge, 
              but this gives a good picture of the user tables and their respective 
              tablespaces. It is important to understand that the presented PL/SQL 
              and Perl scripts can be easily modified to display different information 
              according to your needs. USER_TAB_COLUMNS and USER_TABLES tables 
              contain much useful information that we can easily take advantage 
              of.
            <P> <b>Conclusion</b>
            <P> GraphViz is a very useful set of tools for producing both simple 
              and complex graphs. In this article, I've shown how to use 
              GraphViz command-line tools for DBMS visualization. However, GraphViz 
              can be also used in other areas such as the production of UML diagrams 
              as well as network, directory, and source code structure visualization.
            <P> <b>Acknowledgments</b>
            <P> I thank Antonis Kouroupis for sharing a part of his Oracle DBMS 
              schema with me.
            <P> This article has been written using Oracle 10g Enterprise Edition 
              Release 10.1.0.3.0 for Mac OS X Panther (Server edition) and Perl 
              v5.8.1-RC3 for Mac OS X Panther.
            <P> <b>Resources</b>
            <P> 1. GraphViz Web Site -- <B>http://www.graphviz.org/</B>
            <P> 2. GraphViz DBI -- <B>http://search.cpan.org/~teejay/GraphViz-DBI-0.02/</B>
            <P> 3. GraphViz README -- <B>http://search.cpan.org/src/LBROCARD/GraphViz-2.02/README</B>
            <P> 4. J&uuml;nger, M. and P. Mutzel, eds. 2004. <I>Graph Drawing 
              Software, Series: Mathematics and Visualization</I>. Springer. ISBN 
              3-540-00881-0.
            <P> 5. Kamada, T., and S. Kawai. 1989. An algorithm for drawing general 
              undirected graphs. <I>Information Processing Letters</I>, 31(1):7-15.
            <P> 6. Gansner, E.R., Koutsofios, E., North, S.C. and Vo, K.P. 1993. 
              A Technique for Drawing Directed Graphs. <I>IEEE Trans. on Software 
              Engineering</I>, 19(3):214-230.
            <P> 7. GraphViz for Mac OS X -- <B>http://www.pixelglow.com/graphviz/</B>
            <P> 8. Oracle Technology Network -- <B>http://otn.oracle.com/</B>
            <P> <I>Mihalis Tsoukalos lives in Greece with his wife, Eugenia, and 
              works as a High School Teacher. He holds a B.Sc. in Mathematics 
              and a M.Sc. in IT from University College London. Before teaching, 
              he worked as a Unix systems administrator and an Oracle DBA. Mihalis 
              can be reached at: <B>tsoukalos@sch.gr</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
