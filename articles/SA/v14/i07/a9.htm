<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i07: Nicer Configuration Files</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2005/jul2005.tar"><b class=codeListing>jul2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Nicer 
              Configuration Files</h1>
            <P> Randal L. Schwartz
            <P> I see a lot of configuration file modules in the CPAN. Perhaps 
              too many. Perhaps this is a task that (like so many others) attracts 
              every new junior Perl programmer into the "I can do better 
              than those" mindset.
            <P> I can't claim to have used every one, and perhaps I haven't 
              even looked at every one. However, let me spend a bit of time talking 
              about one that I used rather heavily on a recent project and that 
              I am definitely liking for future projects.
            <P> One of my favorite clients is <B>http://geekcruises.com</B>, mostly 
              because the typical work location for GeekCruises is aboard a cruise 
              ship traveling between the Caribbean islands. I recently completed 
              a major overhaul of the company's administrative interface 
              to the "booking engine": the portion of the Web site that 
              makes money for them by allowing random geeks to sign up for future 
              cruises.
            <P> The core of my overhaul used the emerging standard <B>CGI::Prototype</B> 
              framework, along with Template Toolkit and <B>Class::DBI</B> for 
              the data model. One of the problems I face when programming is how 
              to write each important fact in only one location, because cut-and-paste 
              is a maintenance nightmare. I found myself wanting to record meta-information 
              about each of the database fields (there are some 500 columns in 
              50 tables for this application) in a common location.
            <P> I wanted to access the information from both Perl code and Template 
              Toolkit code, because a lot of the meta-information bridges the 
              "model" (the precise column of that table) to the "view" 
              (how the user sees the data and how the inputs are interpreted). 
              I decided rather early on that I wanted to call a method named <B>Config</B> 
              against a given <B>Class::DBI</B> table class, or a specific row 
              instance, and that this should return a hashref of all the meta-information 
              about this row. In particular, the hashref would contain keys for 
              all the columns of interest, resulting in another hashref of attributes 
              about that column.
            <P> Thus, for a given row in $row, I could obtain (in Perl) the meta-information 
              about that row with:
            <P> 
            <pre>
$info = $row-&gt;Config-&gt;{$column};
</pre>
            Or, in Template toolkit code:
            <P> 
            <pre>
info = row.Config.$column;
</pre>
            After deciding how I wanted to see the data, I considered how to store 
            the information. I already had a class definition for nearly all of 
            the tables of interest. I thought about just adding:
            <P> 
            <pre>
my $config = {
  column1 =&gt; { width =&gt; 10, field =&gt; 'textfield' },
  column2 =&gt; { width =&gt; 50, height =&gt; 5, field =&gt; 'textarea' },
};
sub Config {
  my $self = shift;
  return $config-&gt;{+shift};
}
</pre>
            But then I realized that there'd be a lot of common values among 
            these various things -- common values, with some overrides. And 
            then I stumbled across a reason for the inheritance feature of <B>Config::Scoped</B>, 
            which I had seen in the CPAN a few months before.
            <P> The <B>Config::Scoped</B> module initially looks like almost every 
              other configuration file parser. You give basic stuff and get basic 
              values back:
            <P> 
            <pre>
param1 = foo;
param2 = [ 1, 2, 3];
param3 = { a =&gt; hash };
</pre>
            which, when parsed, returns:
            <P> 
            <pre>
'_GLOBAL' =&gt; {
  'param1' =&gt; 'foo',
  'param2' =&gt; [ '1', '2', '3' ],
  'param3' =&gt; { 'a' =&gt; 'hash' },
}
</pre>
            Note that Perl's arrays and hashes are supported directly and 
            that barewords don't need to be quoted. I was already liking 
            this module at this point, mostly because I hate quoting obvious things. 
            And more complex data structures are trivial with:
            <P> 
            <pre>
scalar = bar;
list = [ bar, baz ];
hash = { bar = baz, goofed = spoofed };

lol = [ [ foo, bar, baz ], [ 1, 2 ], [ red, green, blue ] ];
hol = { color = [ red, green, blue ], goof = [ foo, bar, baz ] };
loh = [ { bar = baz }, { goof = spoof } ];
</pre>
            But the module goes beyond this, in permitting <I>declarations</I>:
            <P> 
            <pre>
column1 {
  width = 10;
  field = textfield;
}
column2 {
  width = 50;
  height = 5;
  field = textarea;
}
</pre>
            And there are my column hashes. Each declaration creates a nested 
            hash, so <B>column1</B> has a hashref with <B>width</B> as a key and 
            10 as a value. Nice.
            <P> But then come the <I>blocks</I>, and here's where it gets 
              fun. Suppose I had five textfields and wanted them all to have a 
              width of 10:
            <P> 
            <pre>
{
  field = textfield;
  width = 10;
  column1 {}
  column2 {}
  column3 {}
  column4 {}
  column5 { readonly = 1 }
}
</pre>
            Here, columns 1 through 4 all end up inheriting everything visible 
            at this scope level, which are the two keys with field and width. 
            But column5 gets all that and a readonly key. Blocks can also be nested.
            <P> With a <I>pragma</I> of <B>%warnings parameter off</B>, I can 
              also define defaults with overrides:
            <P> 
            <pre>
{
  field = textfield;
  width = 10;
  readonly = 0;
  column1 { }
  column2 { }
  column3 { width = 20 }
  column4 { readonly = 1 }
  column5 { width = 15; readonly = 1 }
}
</pre>
            At this point, I could see how this was going to save me some time. 
            In addition to barewords, any Perl-style quoted string is also permitted, 
            allowing me to record things like column headers and footnotes:
            <P> 
            <pre>
{
  field = textfield;
  width = 10;
  f_name { head = "First name" }
  m_name {
    head = "Middle initial";
    foot = "Single letter please";
    width = 1;
  }
  l_name { head = "Last name" }
}
</pre>
            So in my Template Toolkit code, I can generate the appropriate headers 
            and footnotes:
            <P> 
            <pre>
[% columns = ["f_name" "m_name" "l_name"] %]
[% FOR row IN rows %]
[%# if this is the first row, label the columns %]
[% IF loop.first %]
&lt;table&gt;
&lt;tr&gt;
[% FOR col IN columns %]
&lt;th&gt;[% row.Config.$col.head %]&lt;/th&gt;
[% END %]
&lt;/tr&gt;
[% END %]
&lt;tr&gt;
[%# dump the data values %]
[% FOR col IN columns %]
&lt;td&gt;[% row.$col %]&lt;/td&gt;
[% END %]
[%# if this is the last row, close the table %]
[% IF loop.last %]
&lt;/table&gt;
[% END %]
[% END # FOR row %]
</pre>
            Now this was really starting to make sense. I could parameterize a 
            lot of the generic templates, driving them from the data in the nice 
            config tables.
            <P> But wait... there's more. With the <B>%include</B> pragma, 
              I can also include common values:
            <P> 
            <pre>
%include common.cfg;
f_name { head = "First name" }
l_name { head = "Last name" }
</pre>
            where <B>common.cfg</B> contains:
            <P> 
            <pre>
field = textfield; # by default
width = 10; # by default
</pre>
            And then I can add additional things there, like special getters and 
            setters for model-to-view-to-model mapping:
            <P> 
            <pre>
get = get; # default
set = set; # default
</pre>
            And meanwhile, in a nearby configuration file for credit card numbers:
            <P> 
            <pre>
%include common.cfg;
expiration_date {
  head = "Expiration date";
  get = get_mmyy;
  set = set_mmyy;
}
</pre>
            Then I merely had to ask in the Perl code "how do I get this" 
            and call the right method:
            <P> 
            <pre>
my $getter = $row-&gt;Config-&gt;{$column}-&gt;{get};
my $value = $row-&gt;$getter($column);
</pre>
            For most columns, this defaults to <B>Class::DBI</B>'s <B>get</B> 
            method, but I could just override the ones that required special care. 
            This even works in Template Toolkit code:
            <P> 
            <pre>
getter = row.Config.$column.get;
value = row.$getter($column);
</pre>
            Wow. Thank you, Template Toolkit, for unifying hashes and method calls.
            <P> I haven't even gotten to the part where you can define macros 
              and embedded Perl code in your configuration files, because I haven't 
              used those features enough to say something sensible about that. 
              However, let me leave you with this piece of code that I created 
              to automatically parse the correct configuration file for a given 
              database table class:
            <P> 
            <pre>
sub Config {
  my $self = shift;
  my $class = ref $self || $self;

  ## compute filename relative to me, based on my packagename
  my $p = __PACKAGE__;
  (my $s = $class) =~ s/^\Q$p\E:://
    or die "$p is not prefix of $class!";

  $p = __FILE__;
  $p =~ s/\.pm$// or die "$p doesn't end with .pm!";

  require File::Spec;
  my $file = File::Spec-&gt;catfile($p, split '::', $s) . ".cfg";

  my $config = do {
    if (-e $file) {
    require Config::Scoped;
    Config::Scoped-&gt;new
       (file =&gt; $file,
        warnings =&gt; {qw(permissions off parameter off)},
       )-&gt;parse;
    } else {
    {}
    }
  };

  {
    no strict 'refs';
    *{$class . '::Config'} = sub { $config };
  }
  return $config;
}
</pre>
            I place this in my base class for all of my <B>Class::DBI</B> table 
            classes. If I then call the <B>Config</B> method of any derived class, 
            it initially winds its way back up into this class, which figures 
            out a <B>cfg</B> filename for the derived class, located alongside 
            the <B>.pm</B> file (in the same directory). The file is then parsed 
            with <B>Config::Scoped</B> to create the correct hash. However, to 
            keep from repeating this work more than once in a program invocation, 
            a new method is installed in the derived class to return the constant 
            hash.
            <p> I'm probably releasing this simple piece of code to the CPAN 
              soon, perhaps under the name <B>Class::DBI::Plugin::ConfigScoped</B>, 
              or something like that. It'll probably be there by the time 
              you read this.
            <P> I hope I've demonstrated <B>Config::Scoped</B> enough so 
              that you'll finish reading the documentation for it. Until 
              next time, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </I>Programming Perl<I>, </I>Learning 
              Perl<I>, </I>Learning Perl for Win32 Systems<I>, and </I>Effective 
              Perl Programming<I>. He's also a frequent contributor to the 
              Perl newsgroups, and has moderated comp.lang.perl.announce since 
              its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
