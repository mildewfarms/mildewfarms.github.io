<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v14, i06: Eight Ways to Reverse a File</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_s1.htm">Sidebar</a></span></td>
		<td><span class="navbarLink"><a href="a7_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/2005/jun2005.tar"><b class=codeListing>jun2005.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Eight 
              Ways to Reverse a File</B></h1>
            <P> <I>Ed Schaefer and John Spurgeon</i>
            <p> In this article, we present eight ways to reverse a file. Suppose 
              the data file contains the following:
            <P> 1. There<br>
              2. is<br>
              3. more<br>
              4. than<br>
              5. one<br>
              6. way<br>
              7. to<br>
              8. skin<br>
              9. a<br>
              10. cat
            <P> 
            <P> We just want to reverse it to:
            <P> 
            <P> 10. cat<br>
              9. a<br>
              8. skin<br>
              7. to<br>
              6.way<br>
              5. one<br>
              4. than<br>
              3. more<br>
              2. is<br>
              1. There
            <P> 
            <P> This is a simple problem, so why do we present eight methods for 
              solving it? Since this is essentially a file-access problem, we're 
              hoping to make you think about which tool to use the next time you 
              process a large file. We're also testing the methods to determine 
              which are the most efficient. See the sidebar for a comparison.
            <P> Here are the methods we tested:
            <P> 
            <ul>
              <li> Using vi 
              <li> Using an array (using both awk and the shell) 
              <li> Using Perl's <B>print reverse</B> command 
              <li> Using the <B>tail</B> command's reverse (<B>-r</B>) option 
              <li> Using GNU's <B>tac</B> 
              <li> Using sed 
              <li> Using a dynamic numeric field 
              <li> Using shell variables
            </ul>
            <P> <B>Using vi</B>
            <P> One obscure method is using vi's <B>move</B> attribute. From within 
              vi, using the command mode, execute:
            <P> 
            <pre>
:g/^/move0
</pre>
            Identify each line, <B>/^/</B>, and move it below line 0. Since line 
            0 does not exist, each line in the file is placed at the top of the 
            file pushing each succeeding line down.
            <P> The vi editor recognizes the move pattern using the first letter 
              abbreviation, so the command can be shortened to:
            <P> 
            <pre>
:g/^/m0
</pre>
            Consider another example, where the file isn't to be reversed until 
            after line 2:
            <P> 
            <P> 1. There<br>
              2. is<br>
              10. cat<br>
              9. a<br>
              8. skin<br>
              7. to<br>
              6. way<br>
              5. one<br>
              4. than<br>
              3. more
            <P> The vi command to do this is:
            <P> 
            <pre>
:g/^/m2
</pre>
            You may think that using vi within a shell script is out, but you 
            can call vi using a Unix here document:
            <P> 
            <pre>
vi datafile &gt; /dev/null &lt;&lt; EJ
:g/^/m0
:x
EJ
</pre> <b>Using an Array</B>
            <P> We can use a utility that supports arrays, including the shell. 
              Read the file into an array and index it in reverse order. This 
              is an awk solution:
            <P> 
            <pre>
awk '{ a[NR]=$0 } END { for(i=NR; i; --i) print a[i] } ' datafile
</pre>
            The awk internal number of records variable (NR) increments as each 
            line of the data file is read. Store each line in an array indexed 
            by NR, and at the end, loop through the array in reverse order.
            <P> We can also let the shell do it using an array:
            <P> 
            <pre>
# reverse a file
#!/bin/ksh

   cnt=0
   while read line
   do
      ((cnt=$cnt+1))
      rr[cnt]=$line
   done &lt; datafile

   while (( $cnt &gt; 0 ))
   do
      print ${rr[$cnt]}
      ((cnt=$cnt-1))
   done
</pre>
            Let's consider other external Unix commands.
            <P> <B>Using Perl</B>
            <P> Perl's <B>print reverse</B> option simply performs the operation 
              with one line:
            <P> 
            <pre>
perl -e 'print reverse &lt;&gt;' file
</pre> <b>Using tail</b>
            <P><b></b> Let's say no Perl interpreter is available. The <B>tail</B> 
              command has a reverse option:
            <P> 
            <pre>
tail -r datafile
</pre> <b>Using tac</B>
            <P> Unfortunately, GNU's <B>tail</B> command doesn't support the reverse 
              option. However, GNU provides the <B>tac</B> (concatenate and print 
              files in reverse) utility:
            <P> 
            <pre>
tac datafile
</pre> <b>Using sed</b>
            <P> From his sed one-liners Web page, Eric Pement provides two methods 
              using sed:
            <P> 
            <pre>
sed -n '1!G;h;$p' datafile
sed '1!G;h;$!d' datafile
</pre>
            We'll describe the first solution. As with the shell, multiple sed 
            commands can exist on the same line if they're separated by a semicolon. 
            The command can be rewritten as:
            <P> 
            <pre>
sed -n '1!G
h
$p
' datafile
</pre>
            As sed processes a file, lines are read into a work space commonly 
            known as the pattern space. The sed command also owns a temporary 
            buffer known as the hold space. Sed's <B>G</B> command appends a newline 
            and the contents of the hold space to the pattern space while the 
            <B>h</B> command copies the pattern space to the hold space, overwriting 
            the previous contents.
            <P> The <B>1!G</B> instructs sed to ignore the first address or line. 
              Even though, at this point, the hold buffer is empty, a newline 
              still is sent to the pattern space. Without this address instruction, 
              we would be left with a blank line at the bottom once the file is 
              reversed.
            <P> The <B>h</B> command sends the line written to the pattern space 
              to the hold space. With each succeeding line, the <B>G</B> command 
              sends a newline and the current line to the burgeoning pattern space 
              containing the file in reverse order.
            <P> By default, sed prints what is in the pattern space as each line 
              is processed. The <B>-n</B> option overrides the default, and the 
              <B>$p</B> command prints the pattern space when sed is done processing 
              the file.
            <P> The only difference between the sed one-liners is how the pattern 
              space prints. The second sed one-liner, <B>sed '1!G;h;$!d'</B>, 
              drops the <B>-n</B> option and deletes printing the pattern space 
              until the end, <B>$!d</B>.
            <P> <B>Using a Dynamic Numeric Field</B>
            <P> Another solution is from Heiner Steven's Shelldorado Web site:
            <P> 
            <pre>
nl -ba datafile | sort -nr | cut -f2-
</pre>
            This one-liner adds a dynamically generated numeric field to each 
            line in the data file using the <B>nl</B> (line number filter) utility 
            and then pipes it to <B>sort</B> where the added column is sorted 
            in numeric, reverse order. Finally, the output is piped to <B>cut</B> 
            where the added column is removed, which delivers the file in reverse 
            order.
            <P> Heiner warns us of a drawback to using <B>nl</B> "since it interprets 
              certain strings in the text as being page headers, page footers, 
              etc., e.g.":
            <P> 
            <pre>
\:\:\:
</pre>
            Any Unix command that creates line numbers can replace the <B>nl</B> 
            command. This example uses the <B>cat</B> command:
            <P> 
            <pre>
cat -n datafile | sort -nr | cut -f2-
</pre> <b>Using Shell Variables</b>
            <P> Absolutely the coolest way to solve this problem is to let the 
              shell do it by dynamically creating and assigning each line to an 
              individual shell variable and then displaying the variables in reverse 
              order:
            <P> 
            <pre>
#!/bin/ksh

i=0
while read line
do # create a variable for each line
   eval a$i=\$line
   ((i=i+1))
done &lt; datafile

while (($i &gt; 0))
do # display each variable in reverse order
   ((i=i-1))
   eval echo \"\$a$i\"
done
</pre>
            Create a string by appending an integer counter to a character, assign 
            each line to the string, and create the variable by <B>eval</B>'ing 
            the string contents. Repeat this process for each line in the file 
            as the counter increments.
            <P> To reverse the file, create variable strings with the counter 
              decreasing; <B>eval</B>'ing an echo of the variable displays the 
              contents of each string as the counter decrements.
            <P> This process is analogous to manipulating arrays, but without 
              the limitations of arrays. In theory, with a 32-bit integer, a file 
              2,147,483,647-lines long can be processed before integer overflow. 
              Of course, this really depends on available memory.
            <P> <B>References</B>
            <P> Dougherty, Dale and Arnold Robbins. 1997. <I>sed &amp; awk</I>. 
              Sebastopol, CA: O'Reilly &amp; Associates.
            <P> <B>Resources</B>
            <P> Eric Piement's sed one-liners: <B>http://www.student.northpark.edu/pemente/sed/sed1line52.txt</B>
            <P> Steven, Heiner. Shelldorado -- Unix shell scripting resource: 
              <B>http://www.shelldorado.com</B>
            <P> Steven, Heiner. "Re: reverse a file", Email to Ed Schaefer. November 
              22, 2004.
            <P> <I>John Spurgeon is a software developer and systems administrator 
              for Intel's Factory Integrated Information Systems, FIIS, in Aloha, 
              Oregon. He is currently training for the Furnace Creek 508 and still 
              enjoys turfgrass management, triathlons, and spending time with 
              his family.</i>
            <P> <i>Ed Schaefer is a frequent contributor to </I>Sys Admin<I>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also hosts the monthly 
              Shell Corner column on </I>UnixReview.com<I>. He can be reached 
              at: <B>shellcorner@comcast.net</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
