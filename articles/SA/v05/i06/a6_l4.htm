<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i06: Listing 4: The client ccopy program</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 4</span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1996/jun96.tar"><b class=codeListing>jun96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 4: The client ccopy program</H1><p>
<PRE>
/*
* ccopy - copy only if the target file does not exist.  Used
*      to avoid race conditions.  This is a classical unix
*      lock-file creation mechanism: it's an atomic action.
*/
#include
#include        /* For open(2). */
#include        /* For umask and fstat(2). */
#include
#include        /* For error reporting. */
extern int sys_nerr;
extern char *sys_errlist[];

#define USERERR 1       /* Parameters messed up or missing. */
#define EXISTS  2       /* File exists, try again later. */
#define REALERR 3       /* Something bad happened. */
#define ERR (-1)        /* System's normal error value. */

char *ProgName = NULL;  /* Name (ie, ccopy) for error reports. */

main(argc, argv) int argc; char *argv[]; {

ProgName = argv[0];
if (argc != 3) {
(void) fprintf(stderr,
&quot;%s: Error - you must supply exactly two filenames.\n&quot;,
ProgName);
(void) fprintf(stderr,
&quot;%s - copy one file to another IFF the second doesn't exist\n&quot;,
ProgName);
(void) fprintf(stderr,
&quot;Usage: %s infile outfile\n&quot;,
ProgName);
exit(USERERR);
}
exit(ccopy(argv[1],argv[2]));
/*NOTREACHED*/
}

ccopy(inFile,outFile) char *inFile, *outFile; {
struct stat  status;
int     inFd,
outFd;
int     rc = 0;
int     nread;
char    buf[BUFSIZ*10]; /* A biggish copy buffer. */
mode_t  oldUmask,
umask();

if ((inFd= open(inFile,O_RDONLY)) == ERR) {
sayOpenError(inFile,O_RDONLY,errno);
return REALERR;
}

if (fstat(inFd,&amp;status) == ERR) {
sayOpenError(inFile,ERR,errno);
return REALERR;
}

oldUmask = umask((mode_t)0);
if ((outFd= open(outFile,O_CREAT|O_EXCL | O_WRONLY | O_TRUNC,
status.st_mode)) == ERR) {
switch (errno) {
case EEXIST:
rc = EXISTS;
sayExists(outFile);
break;
default:
rc = REALERR;
sayOpenError(outFile,O_WRONLY,errno);
break;
}
(void) umask(oldUmask);
return rc;
}
while ((nread= read(inFd,buf,sizeof(buf))) != 0) {
if (write(outFd,buf,nread) != nread) {
rc = REALERR;
sayWriteError(outFile,errno);
break;
}
}
(void) umask(oldUmask);

(void) close(inFd);
if (close(outFd) == ERR) {
sayWriteError(outFile,errno);
rc = REALERR;
}
return 0;
}

/*
* error reporters -- for open, existence and write errors.
*/
sayExists(outFile) char *outFile; {
(void) fprintf(stderr,
&quot;%s: Error - file %s already exists, try again later.\n&quot;,
ProgName,outFile);
return;
}

sayOpenError(name,readWriteOrStat,errno)
char *name; int readWriteOrStat, errno; {
char    *operation;

switch (readWriteOrStat) {
case ERR:
operation = &quot;stat input&quot;;
break;
case O_RDONLY:
operation = &quot;read input&quot;;
break;
case O_WRONLY:
operation = &quot;create output&quot;;
break;
}

(void) fprintf(stderr,
&quot;%s: can't %s file \&quot;%s\&quot;, %s (errno %d), halting.\n&quot;,
ProgName, operation, name,
(errno &lt; sys_nerr)? sys_errlist[errno]: &quot;Unknown error&quot;,
errno);
return;
}

sayWriteError(name,errno) char *name; int errno; {

(void) fprintf(stderr,
&quot;%s: Error writing and closing output file \&quot;%s\&quot;, %s (errno %d), halting.\n&quot;,
ProgName, name,
(errno &lt; sys_nerr)? sys_errlist[errno]: &quot;Unknown error&quot;,
errno);
(void)fprintf(stderr,
&quot;%s: please inspect and remove remnant of \&quot;%s\&quot;.\n&quot;,
ProgName,name);
return;
}

# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
