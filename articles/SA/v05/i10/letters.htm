<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i10:  New Messages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1996/oct96.tar"><b class=codeListing>oct96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>New Messages</H1><p>
<P>
Please send letters via email to saletter@mfi.com.<P>



From: William Roy (wroy@camden.lmco.com)<br>
Topic: Auto-locking problem<P>

In the April 1996 article on auto-locking by Doug Morris,
the SunOS_kbr
[and] SunOS_msr scripts (from Listing 3) do not seem
to work. The pstat
at the end of each generates multiple values, none of
which vary with
keyboard or mouse input. I am running SunOS 4.1.4 with
Open Windows.<P>

<I>Response from Doug Morris:<br>

Sorry you are having problems. I know the scripts work
with MIT X, but I
do not know about the latest version of Open Windows
- OW could use
different device routing (see below).<P>

The pstat technique will work on any streams device.
I have used it on
tty/pty devices to calculate the number of password
attempts - more than
three attempts resulted in .profile writing a message
to a log and
dissabling access to the id.<P>

SunOS supports a console switch through the ioctl function
KIOCSDIRECT.
If the switch value is 1, then the system keyboard is
serviced by
/dev/kbd; if it is 0, it serviced by the workstation
console device
(usually /dev/console).<P>

The Sun man pages (kbd, kb, console) on this are vague,
but supposedly
when a window system is activated the switch should
be set to 1
(/dev/kbd). The only time I have seen the switch set
to 0 is when the
workstation is in console mode with no windowing system
active. As soon
as MIT X is started, the switch is set to 1.<P>

If the keyboard were not routed to /dev/kbd, the script
and pstat would
exhibit the symptoms you describe - most significantly,
the file table
offset value would not change for /dev/kbd.<P>

A program similar to the attached is the only way I
know of identifying
the routing of the keyboard. If the routing is not to
/dev/kbd, then
modify the scripts to use the workstation console device
instead
(usually /dev/console). Unfortunately, I cannot test
this out because
the workstations I have access are configured with maxuser
values that
break pstat (if the file table size exceeds 10000 pstat
fails).<P>

The second technique described in the article will work
on any X server,
including workstations. I would recommend you use it
instead. It does
not have the OS/configuration dependencies that the
pstat technique has.
Good luck.</I><P>
<PRE>
/* program to determine keyboard routing */ #include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stream.h&gt;
#include &lt;sys/stropts.h&gt;
#include &lt;sundev/kbio.h&gt;
#include &lt;sundev/kbd.h&gt;
main(argc,argv)
int argc;
char *argv[];
{
int kbr=0, kb;
kb=open(&quot;/dev/kbd&quot;,O_RDWR);
if(kb &lt; 0) perror(&quot;open fail&quot;);
ioctl(kb,KIOCGDIRECT,&amp;kbr);
if (kbr == 0) {
printf(&quot;keyboard is assigned to workstation console\n&quot;);
}
else printf(&quot;keyboard is assigned to /dev/kbd\n&quot;);
}</pre><p>
<p>
<I>Doug Morris</I><P>



From: Bill Dyer<br>
Subject: A log program that I like! Thanks!<P>

I would like to point out an address change for Tcl/Tk.
It's not longer
at ftp.cs.berkeley.edu. It has been moved to:<P>
<PRE>
ftp.smli.com and resides in /pub/tcl</pre><p>
<p>
<I>Thanks for the information. -AA</I><P>



From: Rich Holoch (holoch@ccnet.com)<br>
Subject: pageme<P>

The following script is in response to the &quot;Automated
System
Administrator's Pager&quot; article in the May 1996
issue - it avoids the
TAP/modem approach and simply sends Internet email to
activate your
pager. It works great, and was easy to write.<P>

pageme - An automatic UNIX paging utility<P>
<PRE>
#!/usr/bin/perl
# pageme - sends E-Mail to recipients for a number of different
#    system error conditions.
# Created 7/25/96 by R. Holoch - 90% disk utilization check.
#

sub runoscmd {
open(OS, &quot;$oscmd|&quot;) || die &quot;can't run $oscmd: $!&quot;;
@osret = &lt;OS&gt;; }
sub chkfs {
foreach $line (@osret) {
@fields = split(/\s+/,$line);
$fs = @fields[5];
if ($fs ne &quot;/proc&quot;) {
$used = @fields[4];
# print &quot;$fs $used\n&quot;;
chop $used;
if ($used &gt; 90) {
$errcode = 911;
}
}
}
}

$oscmd = &quot;df&quot;;
&amp;runoscmd;
&amp;chkfs;
if ($errcode) {

open (MAIL, &quot;|mail rich_holoch\@iplink&quot;);
print MAIL $errcode;
close(MAIL);
}</pre><p>
<p>



<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
