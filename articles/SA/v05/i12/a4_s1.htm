<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i12:  Sidebar: Arrays in Perl</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><a href="../../../../source/SA/1996/dec96.tar"><b class=codeListing>dec96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: Arrays in Perl</H1><p>
<P>
Perl has two kinds of arrays: regular and associative.
Regular arrays
have integer subscripts, and individual elements are
referenced as
$array[1]. The whole regular array can be referenced
in an array context
as @array.<P>

Associative arrays have strings for subscripts, and
individual elements
are referenced as $assoc{&quot;key&quot;} (notice the
different brackets). The
whole associative array can be referenced in an array
context as %array.
Both kinds of arrays are used in syslogconf.<P>

To illustrate usage of both array types, start perl
interactively and
type the following:<P>
<PRE>
@twee = ('tweedle-dee', 'tweedle-dum');
print (&quot;twee[0] = $twee[0], twee[1] = $twee[1]\n&quot;);
print (&quot;$twee[0] $twee[1]\n&quot;);
print (&quot;@twee\n&quot;);</pre><p>
<p>
Terminate input with Control-D and you will see the
following:<P>
<PRE>
twee[0] = tweedle-dee, twee[1] = tweedle-dum
tweedle-dee tweedle-dum
tweedle-dee tweedle-dum</pre><p>
<p>
Notice in particular that the second and third lines
produce identical
output; that is, printing @array is shorthand for printing
each entry of
the array separated by spaces.<P>

Next, start perl interactively again and type:<P>
<PRE>
%twee = ('t1', 'tweedle-dee', 't2', 'tweedle-dum');
print (&quot;twee{'t1'} = $twee{'t1'}, &quot; .
&quot;twee{'t2'} = $twee{'t2'}\n&quot;);
print (&quot;$twee{'t1'} $twee{'t2'}\n&quot;);
print (&quot;%twee\n&quot;);</pre><p>
<p>
You will see the following:<P>
<PRE>
twee{'t1'} = tweedle-dee, twee{'t2'} = tweedle-dum
tweedle-dee tweedle-dum
%twee</pre><p>
<p>
Note that %twee in the third print statement doesn't
produce the same
result as @twee did above. In other words, %twee is
not an alias for the
whole associative array in a print statement.<P>

Regular arrays are used in Perl for much the same tasks
as in other
programming languages - to contain related sets of values
in an easily
accessible fashion. Associative arrays are useful when
the relationship
between key and value, not just the value itself, is
important. They can
help with procedures such as keeping track of input
with arbitrary
values. In particular, if you know that the key for
certain input will
always be in the same field, you can simply use that
field as a key for
an associative array without having to code for all
possible input
values in that field.<P>

In syslogconf, a natural use of associative arrays is
to use all of the
possible priorities by name as keys. This is much easier
to read,
program, and maintain than a multidimensional regular
array using the
subscripts of the facility and level arrays as indices.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
