<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i12: Listing 1: syslogconf</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a4_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1996/dec96.tar"><b class=codeListing>dec96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: syslogconf</H1><p>
<PRE>
#! /usr/local/bin/perl
#
#    syslogconf:
#    @(#) create a comprehensive listing of
#    @(#) syslog.conf event logging (v.1.2)
#
#    Written 10NOV95-13NOV95 by Michael Hill
#    Lockheed Martin Astronautics
#    Denver, CO
#

#
#    Initialize a few things
#
select (STDERR); $| = 1;    # Turn off buffered I/O
select (STDOUT); $| = 1;
$ENV{'PATH'} = '/bin:/usr/bin:/usr/etc:/usr/sbin';
($progname = $0) =~ s/.*\///;
chop ($uname = `uname -nsr`);
@uname = split (' ', $uname);
$osname = $uname[0]; $hostname = $uname[1]; $osrev = $uname[2];
$ostype = $osname . $osrev; $ostype =~ s/\..*//;
if ($ostype eq 'SunOS4') {
$ENV{'PATH'} = '/usr/ucb:' . $ENV{'PATH'};
} elsif ($ostype eq 'SunOS5') {
$ENV{'PATH'} .= ':/usr/ucb';
}
$ENV{'PATH'} .= ':/usr/local/bin:/usr/local/share/bin';

#
#    Define some subroutines
#
sub usage {
local ($usage) = (@_);

printf (STDERR &quot;usage:\t%s\n&quot;, $usage);
exit (1);
}

sub fatal {
local ($errMesg, $errCode) = (@_);

printf (STDERR &quot;$progname:  %s\n&quot;, $errMesg);
exit ($errCode);
}

sub myGetopts {
local ($argument) = @_;
local (@args, $_, $first, $rest);
local ($errs) = 0;
local ($[) = 0;

@args = split (/ */, $argument);
while (@ARGV &amp;&amp; ($_ = $ARGV[0]) =~ /^-(.)(.*)/) {
($first, $rest) = ($1, $2);
$pos = index ($argument, $first);
if ($pos &gt;= $[) {
if ($args[$pos+1] eq ':') {
shift (@ARGV);
if ($rest eq '') {
++$errs unless @ARGV;
$rest = shift (@ARGV);
}
$opts{$first} = $rest;
}
else {
$opts{$first} = 1;
if ($rest eq '') {
shift (@ARGV);
}
else {
$ARGV[0] = &quot;-$rest&quot;;
}
}
}
else {
print (STDERR &quot;Unknown option:  -$first\n&quot;);
++$errs;
if ($rest ne '') {
$ARGV[0] = &quot;-$rest&quot;;
}
else {
shift (@ARGV);
}
}
}
$errs == 0;
}

#
#    Define program variables
#
$optstr = 'dv?';
$syslogconf = '/etc/syslog.conf';
$loghost = '';
$ENV{'PATH'} .= ':/usr/ccs/bin';    # to find m4(1)
@facilities = ('kern', 'user', 'mail', 'daemon',
'auth', 'lpr', 'news', 'uucp', 'cron', 'local0',
'local1', 'local2', 'local3', 'local4', 'local5',
'local6', 'local7', 'mark');
@levels = ('emerg', 'alert', 'crit', 'err', 'warning',
'notice', 'info', 'debug');

#
#    Check for command-line arguments
#
&amp;myGetopts ($optstr);
&amp;usage (&quot;$progname [-dv]&quot;) if ($opts{'?'});

#
#    Initialize the table of event types vs. actions
#    and list of severities
#
for $facil (@facilities) {
for $lev (@levels) {
$event_type{&quot;$facil.$lev&quot;} = 'no action';
}
}
for $i ($[ .. $#levels) {
$severity{$levels[$i]} = $i;
}

#
#    Find out if we're running on 'loghost' (for m4
#    macros)
#
print (&quot;\t\tReport for $hostname:$syslogconf\n\n&quot;)
if (! $opts{'d'});
($name) = gethostbyname ('loghost');
if ($name eq $hostname) {
# we're running on 'loghost'
$loghost = '-DLOGHOST';
print (&quot;$progname:  running on 'loghost', verbose mode on.\n&quot;)
if ($opts{'v'});
}

#
#    Open pipe from m4 to read in syslog.conf
#
if ($opts{'d'}) {
open (SYSLOGCONF, &quot;&lt;&amp;STDIN&quot;) &amp;&amp;
print (&quot;Enter lines for debugging.\n&quot;);
} else {
open (SYSLOGCONF, &quot;m4 $loghost $syslogconf |&quot;) ||
&amp;fatal (&quot;can't open 'm4 $syslogconf'&quot;, 2);
print (&quot;$syslogconf opened for read...\n&quot;)
if ($opts{'v'});
}

while (&lt;SYSLOGCONF&gt;) {
local (%eventlist);

next if (/^\s*$/ || /^\s*#/);
if ($opts{'v'}) {
print (&quot;\nNew input line:\n&quot;);
print;
}
chop;

%eventlist = ( );
($events, $action) = split (/    +/);
print (&quot;events:  '$events'; action = '$action'\n&quot;)
if ($opts{'v'});
next if ($action eq '');

# parse for multiple events
@events = split (';', $events);
for $event (@events) {
local ($thislev, $evt);

print (&quot;\tevent:  $event;&quot;) if ($opts{'v'});
($facils, $level) = split ('\.', $event);
print (&quot; level = $level;&quot;) if ($opts{'v'});
$thislev = $severity{$level};

# parse for multiple facility specifications
if ($facils eq '*') {
@facils = grep (! /mark/, @facilities);
} else {
@facils = split (',', $facils);
}
if ($level eq 'none') {
@levs = @levels;
} else {
@levs = grep ($severity{$_} &lt;= $thislev, @levels);
}
for $facil (@facils) {
print (&quot; facil='$facil'&quot;) if ($opts{'v'});
for $lev (@levs) {
if ($level eq 'none') {        # delete entry
delete ($eventlist{&quot;$facil.$lev&quot;})
if ($eventlist{&quot;$facil.$lev&quot;});
} else {            # add entry
$eventlist{&quot;$facil.$lev&quot;} = 1;
}
}
}
print (&quot;\n&quot;) if ($opts{'v'});
}
for $evt (keys (%eventlist)) {
print (&quot;Setting event '$evt' to &quot;) if ($opts{'v'});
if ($event_type{$evt} eq 'no action') {
print (&quot;$action\n&quot;) if ($opts{'v'});
$event_type{$evt} = $action;
} else {
print (&quot;$event_type{$evt}, $action\n&quot;)
if ($opts{'v'});
$event_type{$evt} .= &quot;, $action&quot;;
}
}
}

close (SYSLOGCONF);
print (&quot;\n$syslogconf closed.\n&quot;)
if ($opts{'v'} &amp;&amp; ! $opts{'d'});

print (&quot;\n&quot;) if ($opts{'v'});

for $key (sort (keys (%event_type))) {
printf (&quot;Event:  %-16s\tAction:  %s\n&quot;, $key,
$event_type{$key});
}

exit (0);

# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
