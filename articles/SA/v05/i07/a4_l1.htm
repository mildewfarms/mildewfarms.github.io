<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i07: Listing 1: Sybaccess</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a4_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a4_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a4_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1996/jul96.tar"><b class=codeListing>jul96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Sybaccess</H1><p>
<PRE>
1 #-----------------------------------------------------------------------

2 # Sybaccess
3 # Author  of  this  Program:   Ed Schaefer

4 # Program Name and  Release:   Sybaccess

5 # Last Date of Modification:   01/27/95

6 # Description:

7 # This program serves as a menu system to Sybases's Interactive SQL.
8 # Among the options are choosing and displaying a current database,

9 # executing SQL queries, displaying current table statistics, and
10 # performing certain administration functions
11 #
12 trap &quot;&quot; 2 15  # No user interrupt allowed
13 SYBASE=/usr/sybase; export SYBASE
14 CONFIG=./config;    export CONFIG # configuration file
15 GO=\;;              export GO
16 CLEAR=`tput clear`; export CLEAR
17 PAGER=pg;           export PAGER
18 EDITOR=vi;          export EDITOR
19 TMP=/tmp;           export TMP
20 TEE=tee;            export TEE
21 PR=&quot;pr -t -8h&quot;;     export PR
22 TABLE=TEM;          export TABLE
23 edit_file=$TMP/edit_file.$$  # Temporary files
24 run_file=$TMP/run_file.$$
25 out_file=output.$$
26
27 while [ &quot;$#&quot; -gt 0 ]
28 do # set the command line arguments
29    case $1 in
30      -D) shift;DATABASE=$1  # Database Name
31          shift
32          ;;
33      -D*) DATABASE=`echo $1|cut -c3-`
34          shift
35          ;;
36      -U) shift;USER=$1  # User Name
37          shift
38          ;;
39      -U*) USER=`echo $1|cut -c3-`
40          shift
41          ;;
42      -P) shift;PASSWORD=$1  # User Password
43          shift
44          ;;
45      -P*) PASSWORD=`echo $1|cut -c3-`
46          shift
47          ;;
48      -S) shift;SERVER=$1  # Optional Server
49          shift
50          ;;
51      -S*) SERVER=`echo $1|cut -c3-`
52          shift
53          ;;
54      -I) shift;SYBASE=$1
55          shift
56          ;;
57      -I*) SYBASE=`echo $1|cut -c3-`  # Sybase directory location
58          shift
59          ;;
60       *) echo &quot;Illegal Command-line Option&quot;
61          exit
62          ;;
63   esac
64 done
65 if [ x&quot;$USER&quot; = x ]  # Check for valid defaults
66 then # if undefined, get USER from config file
67   if [ -r &quot;$CONFIG&quot; ]
68   then # does configuration file exist
69      USER=`grep USER $CONFIG|cut -d : -f2`; export USER;
70   fi
71   if [ x&quot;$USER&quot; = x ]
72   then # USER still undefined?
73      echo &quot;User is undefined; Exiting!&quot;
74      exit
75    fi
76 fi
77 if [ y&quot;$PASSWORD&quot; = y ]
78 then # if undefined, get PASSWORD from config file
79    if [ -r &quot;$CONFIG&quot; ]
80    then # does configuration file exist
81      PASSWORD=`grep PASSWORD $CONFIG|cut -d : -f2`; export PASSWORD;
82    fi
83    if [ y&quot;$PASSWORD&quot; = y ]
84    then # PASSWORD still undefined?
85       echo &quot;Password is undefined; Exiting!&quot;
86       exit
87    fi
88 fi
89 if [ z&quot;$DATABASE&quot; = z ]
90 then # if undefined, get DATABASE from config file
91   if [ -r &quot;$CONFIG&quot; ]
92   then # does configuration file exist
93      DATABASE=`grep DATABASE $CONFIG|cut -d : -f2`; export DATABASE;
94   fi
95 fi
96 # if return value is non-null, some error messsage occurred
97 # so terminate
98 arg_check=`$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER &lt;&lt; !@!
99 !@!` # terminate isql
100 if [ &quot;$arg_check&quot; != &quot;&quot; ]
101 then # returned an error message
102   echo &quot;Sybase Login failed! Illegal User or Password. Exiting!&quot;
103   sleep 2
104   exit
105 fi
106
107 # Function Declaration Section
108 # This function displays the Sybaccess Main Menu
109 display_main ()
110 {
111   echo &quot;
112
113
114                 SYBACCESS MAIN MENU
115
116     D. Database select - Select the current database
117     Q. Query language  - Enter the query language menu
118     T. Table information - Enter the table information menu
119     A. Administration - Perform administration functions
120     E. Exit program - Leave this program
121
122     Enter a choice  \c&quot;
123 }
124
125 # This function displays the current database
126 display_db () {
127 echo &quot;-------------------------&quot; $DATABASE &quot;-------------------------&quot;
128 }
129 # This function attempts to open a database by echoing the command
130 # 'use database' to ISQL.  If the return value is not null,
131 # an error message occured and the database was not
132 # opened.
133 open_db () {
134   if [ x&quot;$DATABASE&quot; = x ]
135   then
136      DATABASE=&quot;NO DATABASE&quot;
137   else # check whether the database can be opened
138      db_name=`echo &quot;use $DATABASE\n$GO&quot; \
139        | $SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER`
140     if [ &quot;$db_name&quot; != &quot;&quot; ]
141     then # returned an error message, Could NOT open database
142        echo &quot;Can NOT open database&quot;
143        sleep 2
144        DATABASE=&quot;NO DATABASE&quot;
145     fi
146   fi
147 }
148
149 # This function echos the string 'use database', the contents of the edit
150 # file and the GO command to a file.  The resulting file is piped to ISQL
151 # with the results being sent to an output file and to the pager utility.
152 run_edit () {
153   if [ -f &quot;$edit_file&quot; -a -s &quot;$edit_file&quot; ]
154   then
155       echo &quot;use $DATABASE\n$GO&quot; &gt; $run_file
156       cat $edit_file &gt;&gt; $run_file
157       echo &quot;\n$GO&quot; &gt;&gt; $run_file
158       cat $run_file|$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER|
159        $TEE $out_file |$PAGER
160   else
161      echo &quot;Nothing in buffer to run&quot;
162      sleep 1
163   fi
164 }
165
166 # This function displays the Administration Menu.
167 display_admin () {
168 echo   &quot;
169
170
171                ADMINISTRATION MENU
172
173     C. Choose - choose a current table
174     U. Unload - Unload table: $TABLE
175     L. Load - Load table: $TABLE
176     S. Update Statistics
177     E. Return - return to main menu
178
179     Enter a choice  \c&quot;
180 }
181
182 # This function displays the Table Menu.
183 display_table () {
184    echo &quot;
185
186
187                    TABLE MENU
188
189        C. Choose - choose a current table
190        N. No of records in: $TABLE
191        I. Indexes on $TABLE
192        S. Columns on $TABLE
193        E. Return - return to main menu
194
195        Enter a choice  \c&quot;
196 }
197 # This function displays the Query Menu.
198 display_sql () {
199    echo &quot;
200
202                       QUERY MENU
202
203     N. New - create new SQL statements in run file
204     M. Modify - modify SQL statements in run file
205     V. View - view the SQL statements in run file
206     L. Load - load the SQL statements into an external file
207     R. Run  - run SQL statments
208     S. Save - save the SQL statements to an external file
209     E. Return - return to main menu
210
211     Enter a choice  \c&quot;
212 }
213 # This function removes the old edit file and calls EDITOR
214 # (normally vi) to create a new edit file.
215 new_edit () {
216    if [ -f $edit_file ]
217    then
218       rm $edit_file
219    fi
220    $EDITOR $edit_file
221 }
222
223 # This function modifies an existing edit file.
224 modify_edit () {
225    $EDITOR $edit_file
226 }
227
228 # This function views an existing edit file.
229 view_edit () {
230    if [ -f &quot;$edit_file&quot; -a -s &quot;$edit_file&quot; ]
231    then
232       $PAGER $edit_file
233    else
234       echo &quot;Nothing in buffer to view&quot;
235       sleep 1
236    fi
237 }
238
239 # This function prompts for an existing file.  The contents of this
240 # file then becomes the new edit file.
241 load_edit () {
242    echo &quot;Enter file name to load:  \c&quot;
243    read load_name
244    if [ -r  &quot;$load_name&quot; ]
245    then
246       cp $load_name $edit_file
247       echo &quot;Loading &quot;$load_name&quot; into edit file&quot;
248       sleep 2
249   else
250       echo &quot;File name: &quot;$load_name&quot; does NOT exist!&quot;
251       sleep 3
252    fi
253 }
254
255 # This function prompts for a save file name.  The contents of
256 # edit file then becomes this save file.
257 save_edit () {
258    if [ -f &quot;$edit_file&quot; -a -s &quot;$edit_file&quot; ]
259    then
260       echo &quot;Enter file name:  \c&quot;
261       read file_name
262       if [ -r &quot;$file_name&quot; ]
263       then
264          echo &quot;File name exists!&quot;
265       else
266          cp $edit_file $file_name
267          echo &quot;File copied!&quot;
268       fi
269       sleep 1
270    else
271       echo &quot;Nothing in edit file to save&quot;
272       sleep 1
273    fi
274 }
275 # This function:
276 #  1) Prompts for a valid database if there isn't and continues
277 #     only if a valid database is entered
278 #  2) Displays the Administration Menu and prompts for a choice.
279 #  The choices are select another TABLE, update statistics for the
280 #  database, load a TABLE from ascii file, $TABLE.unl, and unload TABLE
281 #  to ascii file, $TABLE.unl.
282 do_admin () {
283    while true
284    do
285       if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
286       then # you need a valid database to query
287          echo &quot;Database select:  \c&quot;
288          read DATABASE
289          open_db
290       fi
291       if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
292       then
293          return
294       fi
295       echo $CLEAR
296       display_db
297       display_admin
298       read q_choice
299       case $q_choice
300       in
301       C|c) select_table;;
302       U|u) echo &quot;Unloading &quot;$TABLE
303            tab_name=$TMP/$TABLE.unl
304         $SYBASE/bin/bcp $DATABASE..$TABLE out $tab_name \
305          -U$USER -P$PASSWORD -S$SERVER -c -t\|
306         sleep 3;;
307       L|l) echo &quot;Loading &quot;$TABLE
308            tab_name=$TMP/$TABLE.unl
309            $SYBASE/bin/bcp $DATABASE..$TABLE in $tab_name \
310             -U$USER -P$PASSWORD -S$SERVER -c -t\|
311         sleep 3;;
312       S|s) echo &quot;Updating Statistics - Please wait&quot;
313            do_statistics;;
314       E|e) return;;
315       *) echo &quot;Bad Choice!&quot;
316          sleep 2;;
317       esac
318    done
319 }
320 # This function:
321 #  1) Prompts for a valid database if there isn't and
322 #     continues only if a valid database is entered
323 #  2) Displays the Table Menu and prompts for a choice.  The
324 #  choices are select another TABLE, find out how many records are in
325 #  the table, and call the create.table and create.index shell scripts
326 #  to display the table structure and columns respectively.
327 do_table () {
328    while true
329    do
330      if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
331      then # you need a valid database to query
332         echo &quot;Database select:  \c&quot;
333         read DATABASE
334         open_db
335      fi
336      if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
337      then
338         return
339      fi
340      echo $CLEAR
341      display_db
342      display_table
343      read q_choice
344      case $q_choice
345      in
346      C|c) select_table;;
347      N|n) cnt_table;;
348      I|i) echo &quot;Processing &quot;$TABLE &quot; index &quot;
349         ./create.index -I$SYBASE -D$DATABASE -U$USER \
350         -P$PASSWORD -T$TABLE;;
351      S|s) echo &quot;Processing &quot;$TABLE &quot; columns &quot;
352         ./create.table -I$SYBASE -D$DATABASE -U$USER \
353         -P$PASSWORD -T$TABLE;;
354      E|e) return;;
355      *) echo &quot;Bad Choice!&quot;
356         sleep 2;;
357      esac
358   done
359 }
360 # This function creates update statistics logic for each user type
361 # table in $DATABASE and echos it to the run_file.  The contents of
362 # run_file are then executed.
363 do_statistics () {
364    echo &quot;use $DATABASE\n$GO&quot; &gt; $run_file
365    echo &quot;set nocount on \
366     select \&quot;update statistics \&quot; + name
367         from $DATABASE..sysobjects
368         where type = 'U'\n$GO&quot; \
369   |$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER | \
370   grep -v &quot;^ name                           $&quot; | \
371   grep -v &quot;^ ------------------------------ $&quot; | \
372   grep -v &quot;^$&quot; &gt;&gt; $run_file
373   echo &quot;\n$GO&quot; &gt;&gt; $run_file
374   cat $run_file|$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER
375   echo &quot;statistics updated for DATABASE: &quot;$DATABASE
376   sleep 2
377 }
378 # This function displays the Query Menu and prompts the user
379 # to enter an edit command for the edit file or run the edit file.
380 do_query () {
381    while true
382    do
383       if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
384       then # you need a valid database to query
385          echo &quot;Database select:  \c&quot;
386          read DATABASE
387          open_db
388       fi
389       if [ &quot;$DATABASE&quot; = &quot;NO DATABASE&quot; ]
390       then
391          return
392       fi
393       echo $CLEAR
394       display_db
395       display_sql
396       read q_choice
397       case $q_choice
398       in
399       N|n) new_edit;;
400       M|m) modify_edit;;
401       V|v) view_edit;;
402       L|l) load_edit;;
403       R|r) run_edit;;
404       S|s) save_edit;;
405       E|e) return;;
406       *) echo &quot;Bad Choice!&quot;
407          sleep 2;;
408       esac
409    done
410 }
411 # This function displays all the active user tables in $DATABASE
412 # to the screen and prompts the user to enter a valid table.
413 select_table () {
414    echo $CLEAR
415    echo &quot;                               TABLES&quot;
416    echo &quot;set nocount on \
417        select name from $DATABASE..sysobjects\n$GO&quot; \
418    |$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER | \
419    grep -v &quot;^ name                           $&quot; | \
420   grep -v &quot;^ ------------------------------ $&quot; | \
421   grep -v &quot;^$&quot; | \
422   grep -v &quot;^ sys*&quot;|  # elliminate the system tables
423   $PR|$PAGER
424   echo &quot;
425        Select table:  \c&quot;
426        read TABLE
427 }
428
429 # This function determines how many records are in $TABLE.
430 cnt_table () {
431    echo $CLEAR
432    echo &quot;set nocount on \
433        select 'Number of records in $TABLE:  ', count(*)
434           from $DATABASE..$TABLE\n$GO&quot; \
435    |$SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER | \
436    grep -v &quot;^ name                           $&quot; | \
437    grep -v &quot;^ ------------------------------ $&quot; | \
438    grep -v &quot;^$&quot; |
439    $PAGER
440 }
441
442 # This function displays the active databases in the Sybase
443 # instance by looking at the master's sysdatabases table.  The user
444 # is then prompted to enter a valid database.  The open_db function
445 # determines if the entered string is correct.
446 select_database () {
447    echo $CLEAR
448    for db_name in `echo &quot;set nocount on
449    \n$GO
450    select name
451    from master..sysdatabases where name != 'master' and name != 'model'
452    and name != 'sybsystemprocs' and name != 'tempdb'\n$GO&quot; \
453   | $SYBASE/bin/isql -c$GO -U$USER -P$PASSWORD -S$SERVER | \
454   grep -v &quot;^ name                           $&quot; | \
455   grep -v &quot;^ ------------------------------ $&quot; | \
456   grep -v &quot;^$&quot;
457   `
458   do
459     echo $db_name
460   done
461   echo &quot;
462        Database select:  \c&quot;
463        read DATABASE
464   open_db
465 }
466 # End Function Declaration Section
467
468 # Main Processing Section
469 open_db # open the database
470 while true
471 do
472    echo $CLEAR
473    display_db
474    display_main
475
476    read main_choice
477    case $main_choice
478    in
479      D|d) select_database;;
480      Q|q) do_query;;
481      T|t) do_table;;
482      A|a) do_admin;;
483      E|e) echo &quot;Leaving SYBACCESS&quot;
484        sleep 1
485        exit;;
486      *) echo &quot;Bad Choice!&quot;
487         sleep 1;;
488   esac
489 done
490
491 # clean up temp files
492 if [ -f &quot;$edit_file&quot; ]
493 then
494    rm $edit_file
495 fi
496 if [ -f &quot;$run_file&quot; ]
497 then
498    rm $run_file
499 fi
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
