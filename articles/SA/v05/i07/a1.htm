<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i07:  Oracle Database Backup</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a1_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1996/jul96.tar"><b class=codeListing>jul96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Oracle Database Backup</H1><p>
<P>
Curtis Preston<P>

Trying to back up today's databases is like trying to
catch a charging
rhino with a butterfly net. Real world databases have
become screaming
behemoths that are very difficult to capture (back up),
and standard
UNIX utilities are like butterfly nets. If you try to
use these
utilities for the job, not only will you not capture
the data -- you'll
break your arm! This article is my attempt to build
a better rhino trap.
It uses many advanced shell scripting features, so you
may find it
useful even if you do not have Oracle.<P>

<B>Hot or Cold Backups?</B><P>

One of the first decisions a database administrator
must make is whether
to perform &quot;cold&quot; or &quot;hot&quot; backups.
A cold backup involves:<P>

1. Shutting down the instance
2. Backing up its filesystems or raw devices
3. Starting up the instance<P>

Here are the steps to perform a hot backup. (Note that
a hot backup
requires much more knowledge of Oracle's internal structure,
so a basic
definition of helpful terms is given in the sidebar
&quot;Definitions.&quot;)
First, you must determine the name of each tablespace
in the instance
and the files that are within it. Then, for each tablespace,
you:<P>

1. Put that tablespace in backup mode;
2. Backup that tablespace's files or raw partitions (using cp, tar, dd, etc.);
3. Take that tablespace out of backup mode.<P>

Once all tablespaces are done:<P>

1. Switch redolog files; and
2. Backup the control file.<P>

It is much easier to perform cold backups, so why do
hot backups at all?
Simply stated, they increase your backup window, or
the time in which
you are allowed to perform backups. Because cold backups
require a
shutdown of the database, your users will probably allow
only a very
small backup window. Hot backups allow you to back up
without shutting
down, remaining virtually invisible to the user, and
thereby
significantly enlarging your window. I have even performed
hot backups
of production data during primetime hours. Try that
with a cold backup!<P>

<B>Be Careful</B><P>

If you are going to use hot backups, though, you must
follow certain
precautions. Failure to do so could mean you would only
be able to
restore up to your last cold backup -- if you made one.<P>

During a cold backup, all data files have been synchronized.
A restore
simply requires copying all files into place and restarting
the
database. However, during a hot backup, each file is
backed up at a
different time; thus each has a different time stamp.
You must have some
method of syncing all of those files to the same point
during a restore.
That is what Oracle's Redo Logs, (also known as archiving,
or Archive
Logs) are for. Archiving continually records all database
changes in
what is called the On-line Redo log. Once that log is
full, it is copied
to an Archived Redo log. (For more information, see
the sidebar &quot;Should
I Use Archiving?&quot;)<P>

When restoring from a hot backup, you first replace
the damaged database
files with their respective backup copies. (You only
need to replace the
damaged files.) You then &quot;play&quot; the redo logs,
effectively &quot;redoing&quot; all
the transactions that affected those files. All files
are then
synchronized, and the database can be brought on line.<P>

With all the logs in place, this restore can be done
with one command.
However, if just one redolog is lost, your restore could
range from
extremely difficult to impossible. If you do not have
the set of redo
logs that span the time of your backup, you will not
recover at all.<P>

This is why you must treat your redo logs as if they
were gold. Some of
the methods of protecting them are:<P>

<li>Mirroring the filesystem on which they are stored<P>

<li>Storing them on an NFS filesystem mounted from another
server (can
result in a performance loss)<P>

<li>Performing hourly incremental backups (to tape or
disk) of that
filesystem<P>

It is not uncommon, or unwise, to use all of the methods
listed above to
protect your redo logs.<P>

<B>A Bird's Eye View</B><P>

To automate Oracle backups, you must know the location
of tablespaces,
raw partitions, data files, control files, redolog files,
and whether
archiving is running. To make things more difficult,
each installation
will have different answers to these questions. Oraback.sh
(Listing 1)
addresses all of the problems above by obtaining most
of its information
from Oracle. The script will do the following for each
instance:<P>

<li>Use sqldba to obtain configuration information<P>

<li>Perform a cold or hot backup (as described above),
based on the day of
the week<P>

<li>Make a backup copy of essential redologs<P>

Oraback.sh supports these features:<P>

<li>Backups to disk or tape<P>

<li>Backups of raw partitions<P>

<li>Multitasking, which can reduce backup time by up to
75%<P>

<li>Mail-based error notification<P>

The script assumes that all instances want hot backups,
which require
redologs. Oraback.sh will warn you of any instances
that do not have
logs. It will continue to warn you until you correct
the problem or
customize your setup for that instance. Customization
is done with
oraback.conf (Listing 2).<P>

<B>Looking in the Backup Window</B><P>

Now that I've explained the overall purpose of oraback.sh,
here is a
description of each step within the script. Oraback.sh
begins by
checking oraback.conf to see whether: the user running
the backup is
Oracle, or a user listed in field 7. It then looks to
see whether the
word &quot;skip&quot; is in field 2. If so, it skips
the backup once, and removes
the word from oraback.conf. The script then does one
of the following,
depending on which arguments, if any, it received:<P>

$ oraback.sh at -- If called with at as an argument
(you would usually do
this with cron), the script checks oraback.conf to see
whether the day
in field 3 (the cold backup day) is today. If so, it
will set the
variable $TIME to the time in field 4. If not, it will
set it to the
time in field 5. The script then schedules an at job
that will run
oraback.sh at the time specified by $TIME.<P>

$ oraback.sh [$SID1 $SID2...] -- If given one or more
instance names
(ORACLE_SID's, or SID's for short) as arguments, the
script will perform
a backup of each of them. If given no arguments, it
performs a backup of
all SID's listed in Oracle's oratab file. (The latter
is what the at job
will do.) <P>

Oraback.sh first checks the $HOST.master line in oraback.conf
to find
out if: (a) there is a tape device in field 6. If so,
it labels the
tape, making sure the no-rewind device is being used;
and (b) there is a
number in field 8. If so, it will perform that many
simultaneous copies
of database files.<P>

Next, oraback.sh asks Oracle questions that will determine
how (or if)
the SID will be backed up. It asks:<P>

<li>if the instance is on-line; if so, oraback.sh makes
a set of
configuration files needed later<P>

<li>if archiving is running<P>

<li>if the instance is excluded from hot backups<P>

<li>if this is a cold backup; if so, it shuts down the
instance<P>

<B>Hot Backup</B><P>

If the instance is online, logs are on, and the instance
is not excluded
from hot backups, the script will put each tablespace
into backup mode
by using the sqldba command begin backup. The script
then copies that
tablespace's files to the backup device. When the copying
is done, it
takes the tablespace out of backup mode with the sqldba
command end
backup.<P>

These three steps are the core of the hot backup. While
the tablespace
is in backup mode, the files will not change. Any changes
made to the
tablespace while it is in backup mode are sent to the
redo logs, and are
applied once it is taken out of backup mode. This is
all done
automatically by Oracle.<P>

The script supports simultaneous copying of individual
data files to
dramatically increase the speed of the backup. Depending
on how many
files there are per tablespace, there may be one or
more tablespaces in
backup mode at once. This will be done in order to perform
the number of
concurrent file copies (using dd) that are specified
in field 8 of
oraback.conf, if you are using this feature.<P>

Next, the script forces a checkpoint and archive log
switch, which
causes the online redo log to be sent to an archived
redo log. It then
backs up the control files to disk using both sqldba
and a manual copy.
Finally, the script makes copies of the essential redo
logs and
compresses them. (Essential logs are those that span
the time of your
backup.) If the backup device is a tape, it then backs
up all files that
were sent to disk to the tape device.<P>

<B>Cold Backup</B><P>

If the instance is off-line, oraback.sh only needs to
copy the datafiles
to the backup device. The script then backs up the control
files and
redo logs the same way the hot backup does.<P>

<B>Special Cases</B><P>

If the instance is online, but archiving is off, it
checks oraback.conf
for a line that reads:<P>
<PRE>
$HOST:$SID:NOARCHIVELOG</pre><p>
<p>
If that line is not found, oraback.sh complains and
sends you mail. If
the line is found, it looks for the word &quot;offline&quot;
on that same line. If
&quot;offline&quot; is there, oraback.sh will shut down
the instance, perform a
cold backup, and then restart the instance. (This is
one of the ways you
can customize oraback.sh for different instances.)<P>

If the instance is online, oraback.sh also looks for
a line in
oraback.conf that reads<P>
<PRE>
$HOST:$SID:::nohotbackup</pre><p>
<p>
If that word is found, the script will skip this instance
when
performing a hot backup.<P>

In summary, oraback.sh can back up from one to all of
the instances in
oratab. To back up all instances, run it with no arguments.
To back up
one or more, run it with those SID's as arguments. To
schedule a backup
for the time in oraback.conf, run it with the at argument.<P>

<B>Installing Oraback.sh</B><P>

Check the following values in the site-specific section
at the top of
the script. They must be changed to fit your site.<P>

a. BINDIR must be set to where you install oraback.sh.<P>

b. ORATAB must be set to the name and location of Oracle's
oratab file.
(It must be located in a directory that Oracle can write
to.)<P>

c. ORACONF must be set to the name and location of your
oraback.conf
file.<P>

You should also review and confirm all other preference
variables in the
site-specific section, including ORADIR, TMP, LOG, and
PATH.<P>

You must also verify that:<P>

a. You know which instances are using archiving<P>

b. There is a valid archive_dest in each instances's
config.ora (not the
default /?/dbs/arch)<P>

c. Oracle can create directories in the filesystem that
you are using
for backups<P>

<B>Customizing Your Backups</B><P>

Oraback.conf is the main configuration file for oraback.sh.
If you want
to use the at argument, you must have the following
line in that file:<P>
<PRE>
$HOST.master::Sun:1200:1730:::5 :/dmp::Mail -s Error_oracle:</pre><p>
<p>
These and other fields are described below:<P>

<li>$HOST=Hostname generated by uname -n<P>

<li>Field 2: If you want all backups skipped on this host
tonight, put
&quot;skip&quot; here<P>

<li>Field 3: The day you want to do cold backups. This
can be a day of the
week (Fri) or month (03), or blank if you do not want
cold backups.<P>

<li>Field 4: The time to do cold backups<P>

<li>Field 5: The time to do hot backups<P>

<li>Field 6: No-rewind tape device, if you want to backup
to tape. (Blank
for disk-only backup)<P>

<li>Field 7: A &quot;|&quot; separated list of userid's
permitted to run sqldba,
such as &quot;oracle|dba&quot; (Blank allows only Oracle)<P>

<li>Field 8: The number of simultaneous copies you want
to run. (Blank=1)<P>

<li>Field 9: Must be set to a filesystem that has enough
room for a
compressed copy of all database files. (If you are backing
up to tape,
you still need some space on disk.)<P>

<li>Field 10: A &quot;Y&quot; means to compress the files
before they are written to
tape or disk<P>

<li>Field 11: Set this to a complete mail command. (e.g.,
/usr/ucb/Mail -s
Backup_Error oracle, dba@herworkstation.com)<P>

There are four predefined functions, unused by default,
which are listed
in the site-specific section of oraback.sh. They are
listed below, with
their respective usage times:<P>

Preback: Runs before entire backup starts<P>

Preshut: Runs before shutdown of each instance<P>

Poststart:Runs after startup of each instance<P>

Postback: Runs after entire backup finishes<P>

If you wanted to restart orasrv, for instance, after
an instance is
restarted (with a script called rc.orasrv.sh,) you would
change the
Poststart function to read:<P>
<PRE>
Poststart(){
rc.orasrv.sh
}</pre><p>
<p>
<B>Customizing Backups of an Instance</B><P>

If you have an instance that will not run archiving
or hot backups, you
need a line in oraback.conf that starts with:<P>
<PRE>
$HOST:$SID::::</pre><p>
<p>
<li>Put &quot;NOARCHIVELOG&quot; in field 3 if the instance
does not use archiving<P>

<li>Put &quot;offline&quot; in field 4 if the instance
does not use archiving, and
you want a cold backup done every time<P>

<li>Put &quot;nohotbackups&quot; in field 5 to skip hot
backups for this instance<P>

<B>Testing the Backup</B><P>

For testing, select a small instance and run the following
command as
Oracle:<P>
<PRE>
$ /usr/local/bin/oraback.sh &lt;instance&gt;</pre><p>
<p>
Be aware that if the word &quot;offline,&quot; is in
oraback.conf, or if the day
that you specified for cold backups is today, the instance
will be shut
down!<P>

If this test functions properly, you can put an entry
in Oracle's cron.
Call this command:<P>
<PRE>
/usr/local/bin/oraback.sh at</pre><p>
<p>
at around 1200. It will check the oraback.conf and schedule
an at job
that will perform the backup.<P>

<B>Testing the Restore</B><P>

Never accept that a new backup strategy works until
you have fully
tested it under all circumstances! Make sure you test
all of the
following until you are comfortable:<P>

<li>Complete restore from a cold backup<P>

<li>Complete restore from a hot backup<P>

<li>Partial restore from a hot backup, restoring only
a few of your data
files.<P>

<li>Simulate the loss of a redo log, following the instructions
in the
Oracle manual for this scenario. This one is extremely
painstaking!<P>

<li>Restore from an older backup, using the redo logs
to roll forward to
today<P>

Once your restore test is successful, you will have
caught and tamed the
rhino! This script represents more than three years
of work, and its
development is a continual process. I hope you find
it useful.<P>




<P>


<H1>About the Author</H1><p>
<P>
Curtis Preston is a consultant for Pencom Systems Administration,
and
has been doing Unix Systems Administration for 3 years.
He specializes
in automating backups of heterogeneous networks. He
may be reached at
(312) 781-1111 or curtis@pencom.com.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
