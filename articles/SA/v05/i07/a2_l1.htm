<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i07: Listing 1: server_backup</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a2_s1.htm">Sidebar 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a2_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1996/jul96.tar"><b class=codeListing>jul96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: server_backup</H1><p>
<PRE>
#!/bin/sh
#
# @(#) server_backup v3.2 Benjamin J. Anello 950328
#
# Copyright (C) 1995 Benjamin J. Anello
# You may use this code freely but you must
# keep the copyright notice in this code.
#
# @(#) script to do the backups of the
# @(#) Network Workstations.
#
#######################################################
#
# Defined information
#
SCRATCHDIR=&quot;/server/admin/backups&quot;
BUDEV=&quot;/dev/nrbackup&quot;
DATESTAMP=`date &quot;+%a - %h %d, 19%y&quot;`
DEBUG=&quot;OFF&quot;
DISKINFO=&quot;/tmp/diskinfo$$&quot;
DUMP=&quot;/usr/etc/dump&quot;
DUMPLEVEL=`cat $SCRATCHDIR/.cur_dump_level`
DUMPLEVELDEF=8
ECHO=&quot;/usr/bin/echo&quot;
FIRSTONE=&quot;YES&quot;
HOSTDEV=`hostname`
JUKEDIR=&quot;/usr/local/vjuke&quot;
LOGFILE=&quot;/tmp/dumpmsg$$&quot;
MAILLIST=&quot;sysgroup@${HOSTDEV}&quot;
MAXTAPES=10
MAXTAPESIZE=4200	# High density mode
MT=&quot;/usr/bin/mt&quot;
NETNAME=`cat $SCRATCHDIR/.netname`
PAGECOUNT=1
PING=&quot;/usr/etc/ping&quot;
PRINTR=&quot;lp&quot;
RDUMP=&quot;/usr/etc/rdump&quot;
REMOVE=&quot;/usr/bin/rm&quot;
RSH=&quot;/usr/ucb/rsh&quot;
SCHEDFILE=&quot;/tmp/schedfile$$&quot;
SCHEDTEMP1=&quot;/tmp/busched1$$&quot;
SCHEDTEMP2=&quot;/tmp/busched2$$&quot;
STIMESTAMP=`date &quot;+%T&quot;`
TAPELOG=&quot;/tmp/tapelog$$&quot;
TAPENUM=`cat $SCRATCHDIR/.cur_bu_tape`
TAPESET=`cat $SCRATCHDIR/.cur_tape_set`
TIMEOUT=5
#
##### Functions #######################################
#
##### cleanup() #####
#
# Function to clean up this process
#
cleanup()
{
/usr/ucb/Mail -s &quot;Server Backup Log File&quot; \
operator@${HOSTDEV} &lt; $LOGFILE
$REMOVE -f $LOGFILE
$ECHO \
&quot;---------------------------------------------------&quot; \
&gt;&gt; $TAPELOG
$ECHO &quot;&quot; &gt;&gt; $TAPELOG
$ECHO &quot;   Backup Completed: `date &quot;+%T&quot;`&quot; \
&gt;&gt; $TAPELOG
lpr -P${PRINTR} $TAPELOG
/usr/ucb/Mail -s &quot;$NETNAME Network Backup Log&quot; \
$MAILLIST &lt; $TAPELOG
$REMOVE -f $TAPELOG
#
# Remove our flag that says we are dumping
#
if [ `cat $SCRATCHDIR/.dumping` -eq $$ ]; then
$REMOVE -f $SCRATCHDIR/.dumping
fi
}
#
##### init_juke() #####
#
# Function to initialize the jukebox drivers
#
init_juke()
{
$ECHO &quot;&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;Verifying JukeBox tape drivers&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
$JUKEDIR/vjuke -j1 online &gt;&gt; $LOGFILE 2&gt;&amp;1
$JUKEDIR/vjuke -d1 online &gt;&gt; $LOGFILE 2&gt;&amp;1
}
#
##### get_diskinfo() #####
#
# Function to pull the disk information together
#
get_diskinfo()
{
$REMOVE -f $DISKINFO
cat $SCRATCHDIR/.bu_clients |
while read client
do
if [ &quot;$client&quot; = $HOSTDEV ]; then
df -t 4.2 | tail +2 | awk -f diskinfo.nawk \
HOST=$client &gt;&gt; $DISKINFO
else
$PING $client $TIMEOUT &gt; /dev/null
if [ $? -eq 0 ]; then
$RSH -n $client /usr/ucb/rdate $HOSTDEV \
&gt; /dev/null
$RSH -n $client df -t 4.2 | tail +2 | \
awk -f diskinfo.nawk \
HOST=$client &gt;&gt; $DISKINFO
else
$ECHO \
&quot;WARNING: Unable to find remote host ${client}.&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
fi
fi
done
}
#
##### set_bu_sched() #####
#
# Function to set the tape schedule
#
set_bu_sched()
{
schedHost=&quot;&quot;
tapeCount=`expr $TAPENUM + 1`
if [ $tapeCount -gt $MAXTAPES ]; then
tapeCount=1
fi
sectionCount=0
cumTapeSize=0
#
# Check for level 0 dump
#
if [ $0 = &quot;/admin/backups/server_backup_0&quot; ]; then
#
# Level 0 so just use the df disk usage values
#
$REMOVE -f $SCHEDTEMP2
cp $DISKINFO $SCHEDTEMP2
else
#
# Incremental so calculate the size of
# incremental backups
#
$REMOVE -f $SCHEDTEMP1
$ECHO &quot;### $SCHEDTEMP1 ###&quot; &gt; $SCHEDTEMP1 2&gt;&amp;1
nawk '{print $1, $2, $3}' $DISKINFO |
while read buhost bupart bufs
do
$ECHO &quot;HOST	$buhost&quot; &gt;&gt; $SCHEDTEMP1 2&gt;&amp;1
if [ &quot;$buhost&quot; = $HOSTDEV ]; then
$DUMP ${DUMPLEVEL}dsbf 54000 13000 126 \
/dev/null $bupart &gt;&gt; $SCHEDTEMP1 2&gt;&amp;1
else
$RSH -n $buhost \
&quot;$RDUMP ${DUMPLEVEL}dsbf 54000 13000 126 \
/dev/null $bupart&quot; &gt;&gt; $SCHEDTEMP1 2&gt;&amp;1
fi
done
$REMOVE -f $SCHEDTEMP2
nawk -f dumpsize.nawk $SCHEDTEMP1 &gt; $SCHEDTEMP2
fi
cat $SCHEDTEMP2 |
while read buhost bupart bufs busize
do
cumTapeSize=`expr $cumTapeSize + $busize`
if [ $cumTapeSize -ge $MAXTAPESIZE ]; then
tapeCount=`expr $tapeCount + 1`
if [ $tapeCount -gt $MAXTAPES ]; then
tapeCount=1
fi
sectionCount=1
cumTapeSize=0
else
sectionCount=`expr $sectionCount + 1`
fi
$ECHO &quot;$buhost	$tapeCount	$sectionCount \
$bupart	$bufs	$busize&quot; \
&gt;&gt; $SCHEDFILE
done
}
#
#### incr_dump() ####
#
# Increments the weekly dump level
#
incr_dump()
{
dumplevel=$2
dumpout=`expr $dumplevel + 1`
$ECHO &quot;Changing dump level from $dumplevel to \
$dumpout&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$REMOVE -f $SCRATCHDIR/.cur_dump_level
$ECHO &quot;$dumpout&quot; &gt; $SCRATCHDIR/.cur_dump_level
eval $1=$dumpout
}
#
##### incr_tape() #####
#
# Function to increment the tape counter
#
incr_tape()
{
tapelabel=$2
tapeout=`expr $tapelabel + 1`
if [ $tapeout -gt $MAXTAPES ]; then
incr_tapeset
tapeout=1
fi
$ECHO &quot;Changing tape from $tapelabel to $tapeout&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
$REMOVE -f $SCRATCHDIR/.cur_bu_tape
$ECHO &quot;$tapeout&quot; &gt; $SCRATCHDIR/.cur_bu_tape
eval $1=$tapeout
}
#
##### incr_tapeset() #####
#
# Function to increment the tape set
#
incr_tapeset()
{
oldset=$TAPESET
if [ $TAPESET = &quot;A&quot; ]; then
TAPESET=&quot;B&quot;
elif [ $TAPESET = &quot;B&quot; ]; then
TAPESET=&quot;C&quot;
elif [ $TAPESET = &quot;C&quot; ]; then
TAPESET=&quot;A&quot;
fi
$ECHO &quot;Changing tape set from $oldset to $TAPESET&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
$REMOVE -f $SCRATCHDIR/.cur_tape_set
$ECHO &quot;$TAPESET&quot; &gt; $SCRATCHDIR/.cur_tape_set
}
#
##### tape_com() #####
#
# Function to send tape commands to the tape device
#
tape_com()
{
tapecommand=$1
tapeno=$2
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;&quot;
$ECHO &quot;----- Tape Change -----&quot;
$ECHO &quot;$MT -f ${BUDEV}${tapeno} $tapecommand&quot;
$ECHO &quot;&quot;
else
$MT -f ${BUDEV}${tapeno} $tapecommand
fi
stat=$?
$ECHO &quot;Command sent to tape number $tapeno was \
$tapecommand&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
if [ $stat -ne 0 ]; then
$ECHO &quot;ERROR in tape command. Status: $stat&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
retry=1
fi
#
# check for tape problems
#
while [ $stat -ne 0 ];
do
sleep 300
$MT -f ${BUDEV}${tapeno} $tapecommand
stat=$?
$ECHO \
&quot;Retry $retry - Command sent to tape number \
$tapeno was $tapecommand&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
if [ $stat -ne 0 ]; then
$ECHO &quot;ERROR in tape command. Status: $stat&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
retry=`expr $retry + 1`
fi
done
}
#
##### send_request() #####
#
# Function to send the backup request out
#
send_request()
{
$ECHO &quot;Sending backup request to machine $name&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
if [ &quot;$name&quot; = $HOSTDEV ]; then
$ECHO \
&quot;REQUEST: CLIENT: $name (TAPEHOST), PART: \
$partition, TAPE: $TAPENUM&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;$DUMP ${DUMPLEVEL}dsbfu 54000 13000 \
126 ${BUDEV}${TAPENUM} $partition&quot;
else
$DUMP ${DUMPLEVEL}dsbfu 54000 13000 126 \
${BUDEV}${TAPENUM} \
$partition &gt;&gt; $LOGFILE 2&gt;&amp;1
fi
$ECHO &quot;Backup of $name - $partition completed.&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
else
$ECHO \
&quot;REQUEST: CLIENT: $name, PART: $partition, \
TAPE: $TAPENUM&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO -n &quot;$RSH -n $name $RDUMP \
${DUMPLEVEL}dsbfu 54000 13000 126 &quot;
$ECHO &quot;${HOSTDEV}:${BUDEV}${TAPENUM} \
$partition&quot;
else
$RSH -n $name &quot;$RDUMP ${DUMPLEVEL}dsbfu \
54000 13000 126 \
${HOSTDEV}:${BUDEV}${TAPENUM} $partition&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
fi
$ECHO &quot;Backup of $name - $partition \
completed.&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
fi
$ECHO &quot;&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
}
#
##### print_header() #####
#
# Function to print the header
#
print_header()
{
pc=$2
$ECHO &quot;$NETNAME Network Backup of $DATESTAMP&quot; \
&gt;&gt; $TAPELOG
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;*** NOTE: TEST RUN ***&quot; &gt;&gt; $TAPELOG
fi
$ECHO &quot;   Backup Dump Level: $DUMPLEVEL&quot; \
&gt;&gt; $TAPELOG
$ECHO &quot;   Backup Start:      $STIMESTAMP&quot; \
&gt;&gt; $TAPELOG
$ECHO \
&quot;
Page $pc&quot; \
&gt;&gt; $TAPELOG
$ECHO \
&quot;---------------------------------------------------&quot; \
&gt;&gt; $TAPELOG
$ECHO &quot;Tape  Section  Time Completed   Size       \
Host		Partition	FS Name&quot; \
&gt;&gt; $TAPELOG
$ECHO \
&quot;---------------------------------------------------&quot; \
&gt;&gt; $TAPELOG
pcout=`expr $pc + 1`
eval $1=$pcout
}
#
##### Main Program ####################################
#
##### main() #####
#
# setup the clean up function for when we exit
#
trap cleanup 0
#
# Create the log file
#
$ECHO &quot;Server Backup Script Log File&quot; &gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;Start time is `date`&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
#
# Check that root is running this script
#
name=`whoami`
case &quot;$name&quot; in
&quot;root&quot; )
break;;
* )
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;$0:DEBUG-&gt; You are not running as root.&quot;
else
$ECHO &quot;$0:ERROR-&gt; May only run as root, \
Please log in as root&quot;
exit 1
fi
break;;
esac
#
# Be sure that we are not already running
#
if [ -f $SCRATCHDIR/.dumping ]; then
$ECHO &quot;&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;Tried to start another backup job&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;while job `cat $SCRATCHDIR/.dumping` \
was running...&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$ECHO &quot;&quot; &gt; $TAPELOG 2&gt;&amp;1
$ECHO &quot;Tried to start another backup job&quot; \
&gt;&gt; $TAPELOG 2&gt;&amp;1
$ECHO &quot;while job `cat $SCRATCHDIR/.dumping` \
was running...&quot; &gt;&gt; $TAPELOG 2&gt;&amp;1
$ECHO &quot;&quot; &gt;&gt; $TAPELOG 2&gt;&amp;1
exit 1
fi
#
# Okay, we are going to run. Lock us in.
#
$ECHO &quot;$$&quot; &gt; $SCRATCHDIR/.dumping
#
# Let the console know we are GO
#
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;$NETNAME Network Backups testing starting \
at `date`&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
/usr/5bin/echo &quot;\\n\\r$NETNAME Network Backups \
testing starting at `date`\\n\\r&quot; \
&gt; /dev/console
else
$ECHO &quot;$NETNAME Network Backups starting at `date`&quot; \
&gt;&gt; $LOGFILE 2&gt;&amp;1
/usr/5bin/echo &quot;\\n\\r$NETNAME Network Backups \
starting at `date`\\n\\r&quot; &gt; /dev/console
fi
#
# Be sure that the jukebox is running
#
init_juke
#
# Get the disk information for the hosts to
# be backed up
#
cd $SCRATCHDIR
get_diskinfo
#
# If this is 0 file, then all bets are off.
# We will do a level 0 backup.
#
if [ $0 = &quot;/server/admin/backups/server_backup_0&quot; ]; \
then
DUMPLEVEL=0
#  reset the weekly (Friday) backup level file
$REMOVE -f $SCRATCHDIR/.cur_dump_level
$ECHO &quot;1&quot; &gt; $SCRATCHDIR/.cur_dump_level
#  reset the tape counters for level 0s
$REMOVE -f $SCRATCHDIR/.cur_tape_set
$ECHO &quot;A&quot; &gt; $SCRATCHDIR/.cur_tape_set
TAPESET=&quot;Full-&quot;
$REMOVE -f $SCRATCHDIR/.cur_bu_tape
$ECHO &quot;0&quot; &gt; $SCRATCHDIR/.cur_bu_tape
TAPENUM=0
else
#
# Check for forced dump level
#
if [ -f $SCRATCHDIR/forcedump ]; then
DUMPLEVEL=`cat $SCRATCHDIR/forcedump`
$REMOVE -f $SCRATCHDIR/forcedump
$ECHO &quot;NOTE: User forcing dump level at level \
$DUMPLEVEL&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
$REMOVE -f $SCRATCHDIR/.cur_dump_level
$ECHO &quot;$DUMPLEVEL&quot; &gt; $SCRATCHDIR/.cur_dump_level
else
#
# If weekly, increment the dump level
#
dow=`date &quot;+%w&quot;`
if [ $dow -eq 6 ]; then
incr_dump newdump $DUMPLEVEL
DUMPLEVEL=$newdump
else
#
# daily, so do the daily dump
#
DUMPLEVEL=$DUMPLEVELDEF
fi
fi
fi
#
# Set the backup schedule
#
set_bu_sched
#
# Increment tape to start on a new tape
#
incr_tape newtape $TAPENUM
TAPENUM=$newtape
#
# Get ready to loop through list to do backups
#
cumdsize=0
sectioncount=1
$REMOVE -f $TAPELOG
#
# print header
#
$ECHO &quot;&quot; &gt; $TAPELOG
print_header newpc $PAGECOUNT
PAGECOUNT=$newpc
if [ $DEBUG = &quot;ON&quot; ]; then
lc=8
else
lc=7
fi
#
# Loop through list to do backups
#
cat $SCHEDFILE |
while read name tapeCount sectionCount partition \
fileSys size
do
#
#  Fake out first time through
#
if [ $FIRSTONE = &quot;YES&quot; ]; then
FIRSTONE=&quot;NO&quot;
TCOUNT=$tapeCount
fi
#
#  If the tape counter is different, then
#
if [ $tapeCount -ne $TCOUNT ]; then
#
#     increment the tape
#
tape_com offline $TAPENUM
incr_tape newtape $TAPENUM
TAPENUM=$newtape
tape_com rewind $TAPENUM
TCOUNT=$tapeCount
$ECHO &quot;&quot; &gt;&gt; $TAPELOG
lc=`expr $lc + 1`
if [ $lc -gt 63 ]; then
/usr/5bin/echo &quot;\\f&quot; &gt;&gt; $TAPELOG
print_header newpc $PAGECOUNT
PAGECOUNT=$newpc
if [ $DEBUG = &quot;ON&quot; ]; then
lc=8
else
lc=7
fi
fi
sectioncount=1
fi
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;Host:           $name&quot;
$ECHO &quot;Tape:           ${TAPESET}${TAPENUM}&quot;
$ECHO &quot;Section:        $sectionCount&quot;
$ECHO &quot;Partition:      $partition&quot;
$ECHO &quot;File System:    $fileSys&quot;
$ECHO &quot;Size:           $size&quot;
$ECHO &quot;&quot;
fi
#
#  Backup the partition to tape
#
if [ $name = $HOSTDEV ]; then
send_request
else
$PING &quot;$name&quot; &gt; /dev/null &amp;&amp; send_request || \
$ECHO &quot;NOTE: Client machine $name was not \
found on the network&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
fi
timestamp=`date &quot;+%T&quot;`
$ECHO &quot;${TAPESET}${TAPENUM}	$sectionCount	\
$timestamp	$size	$name	$partition	\
$fileSys&quot; &gt;&gt; $TAPELOG
lc=`expr $lc + 1`
if [ $lc -gt 63 ]; then
/usr/5bin/echo &quot;\\f&quot; &gt;&gt; $TAPELOG
print_header newpc $PAGECOUNT
PAGECOUNT=$newpc
if [ $DEBUG = &quot;ON&quot; ]; then
lc=8
else
lc=7
fi
fi
done
#
# All backups are done, remove the last tape and update
# the tape counter file
#
TAPENUM=`cat $SCRATCHDIR/.cur_bu_tape`
tape_com offline $TAPENUM
if [ $DEBUG = &quot;ON&quot; ]; then
$REMOVE -f $DISKINFO
$REMOVE -f $SCHEDFILE
$REMOVE -f $SCHEDTEMP1
$REMOVE -f $SCHEDTEMP2
fi
if [ $0 = &quot;/server/admin/backups/server_backup_0&quot; ]; \
then
$REMOVE -f $SCRATCHDIR/.cur_bu_tape
$ECHO &quot;0&quot; &gt; $SCRATCHDIR/.cur_bu_tape
fi
if [ $DEBUG = &quot;ON&quot; ]; then
$ECHO &quot;$NETNAME Network Backups testing completed \
at `date`&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
/usr/5bin/echo &quot;$NETNAME Network Backups testing \
completed at `date`\\n\\r&quot; \
&gt; /dev/console
else
$ECHO &quot;$NETNAME Network Backups completed \
at `date`&quot; &gt;&gt; $LOGFILE 2&gt;&amp;1
/usr/5bin/echo &quot;$NETNAME Network Backups \
completed at `date`\\n\\r&quot; &gt; /dev/console
fi
exit 0
#
##### End of Script server_backup #####################

# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
