<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i07: Listing 1: oraback.sh</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a1_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1996/jul96.tar"><b class=codeListing>jul96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: oraback.sh</H1><p>
<PRE>
#!/bin/sh
#
# @(#)oraback.sh  -  (Hot backups for Oracle databases)
# Copyright (C) 1996 Curtis Preston - curtis@pencom.com
#
# This program is free software; you can redistribute
# it and/or modify it under the terms of the GNU
# General Public License as published by the Free
# Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# For a copy of the license, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139
#
# Acknowledgements to: Samuel_Binder@coretech-group.com
# (For assistance with sql commands and early coding.)
#
#######################################################
##Site-specific section (change as appopriate)
BINDIR=/usr/local/bin              #Where $0 is located
ORATAB=/var/opt/oracle/oratab      #Oracle's configfile
ORADIR=`grep -v '^#' $ORATAB|cut -d: -f2|tail -1`
ORACONF=/usr/local/bin/oraback.conf   ;    TMP=/var/tmp
PATH=$PATH:/usr/bin:/usr/ccs/bin      ; ORIG_PATH=$PATH
Preshut() {        #Run prior to shutting down instance
echo
}
Poststart() {           #Run after starting up instance
echo
}
Preback() {            #Run before entire backup begins
echo
}
Postback() {          #Run after entire backup finishes
echo
}
export BINDIR ORATAB ORADIR ORACONF TMP PATH ORIG_PATH
##End site-specific configuration section
#######################################################

Usage() {
echo &quot;Usage:   $0 [at|\$ORACLE_SID(s)]&quot;
echo &quot;(Must be run as one of the following users:&quot;
echo &quot;${USERS}.&quot;
exit 1
}
Log_error() {            #Send errors to various places
if [ &quot;$1&quot; -gt 0 ] ; then
TIME=&quot;`date '+%b %e %T'` `uname -n`&quot;
MSG=&quot; `basename $0` $SID: WARNING:&quot;
ERR=`echo $2|sed &quot;s/^/$TIME $MSG /&quot;`
echo &quot;$ERR&quot; |$TLOG  ; echo &quot;$ERR&quot; &gt;&gt;$TMP/$X.Mail
[ &quot;$1&quot; = 99 ] &amp;&amp; touch $TMP/$X.Fatal
fi
}
Error_chk() {     #Check sqldba output files for errors
ERROR=`egrep -i 'dba\-|ora\-|error' $1`
[ -n &quot;$ERROR&quot; ] &amp;&amp; Log_error 1 &quot;$ERROR&quot;
[ ! -s $1 ] &amp;&amp; Log_error 99 &quot;Bus error on sqdldba&quot;
}
Backup_offline() {             #backup database offline
echo &quot;  Backing up $ORACLE_SID OFFLINE.&quot; |$TLOG
Backup_instance cold
}
Backup_instance() {     #All tablespaces in an instance
cut -d: -f1 $CWD/$TSLST | sort -u |\
while read TBS ; do
if [ -n &quot;$SIMULT&quot; ] ; then     #If doing simultaneous
Ps_check                          #backups, then do
export TBS                             #them in the
Backup_one_tablespace $1 &amp;              #background
else
export TBS
Backup_one_tablespace $1
fi
done                        #done with all tablespaces
while [ -n &quot;`ls $TMP/$X.$SID.*.* 2&gt;/dev/null`&quot; ] ; do
sleep 10               #Wait for all TBS's to finish
done
}
Backup_one_tablespace() {         #All files in one tbs
touch $TMP/$X.$SID.${TBS}all.allfiles
if [ $1 = &quot;hot&quot; ] ; then     #If hot b/up, then put in
sqldba&lt;&lt;EOF &gt;$TMP/$X.$TBS.tablebu 2&gt;&amp;1     #b/up mode
connect internal;
alter tablespace $TBS begin backup;
exit;
EOF
Error_chk $TMP/$X.$TBS.tablebu
fi

grep &quot;^$TBS:&quot; $CWD/$TSLST | cut -d: -f2 | \
while read FILE ; do
if [ -n &quot;$SIMULT&quot; ] ; then      #More simult. copying
export FILE
Ps_check
Copy_one_database_file &amp;
else
CT=`cat $TMP/$X.CT`
echo `expr $CT + 1` &gt; $TMP/$X.CT
export FILE CT
Copy_one_database_file
fi
done                       #Done with all files in TBS

while [ -n &quot;`ls $TMP/$X.*.$TBS.* 2&gt;/dev/null`&quot; ] ; do
sleep 10                  #Wait for all files to copy
done

if [ $1 = &quot;hot&quot; ] ; then #If hot, take out of b/u mode
sqldba &lt;&lt; EOF &gt; $TMP/$X.$TBS.tablebu 2&gt;&amp;1
connect internal;
alter tablespace $TBS end backup;
exit;
EOF
Error_chk $TMP/$X.$TBS.tablebu
fi
rm $TMP/$X.$SID.${TBS}all.allfiles
}
Copy_one_database_file() {
BN=`basename $FILE`
touch $TMP/$X.$SID.$TBS.$BN
[ -n &quot;$TAPE&quot; ]  &amp;&amp;  DEVICE=$TAPE  ||  DEVICE=$CWD/$BN

NEW=`find $FILE -newer $CWD/$BN.Z -print 2&gt;/dev/null`
#If datafile newer than b/u,or if no b/u file,copy it
if [ $? -gt 0 -o &quot;$NEW&quot; = &quot;$FILE&quot; ]  ; then

echo &quot;   ${CT}- Backing up $FILE.&quot; |$TLOG

if [ &quot;$COMP&quot; = Y ]  ; then
dd if=$FILE 2&gt;/dev/null|compress &gt;$DEVICE.Z
else
dd if=$FILE 2&gt;/dev/null &gt;$DEVICE
fi

Log_error $? &quot;Error Copying $FILE to $DEVICE&quot;

else
echo &quot;   NOT Backing up $FILE. (NO CHANGE)&quot; |$TLOG
fi
rm $TMP/$X.$SID.$TBS.$BN
}
Copy_control_and_redolog_files() {
if [ -f $CWD/$CFLST ] ; then

echo &quot;  Manually copying controlfile.&quot; |$TLOG
CNT=`grep -v '^$' $CWD/$CFLST` ;BNAME=`basename $CNT`
compress -c $CNT &gt; $CWD/$BNAME.Z
Log_error $? &quot;Error copying $FILE to $CWD&quot;

else
Log_error 1 &quot;$CWD/$CFLST: File not found&quot;
fi

if [ -f $CWD/$CFLST $CWD/$LFLST ] ; then
if [ -z &quot;$NOLOG&quot; ] ; then
[ &quot;$DB_UP&quot; = 2 ] &amp;&amp; (ls $CWD/$LGF* 2&gt;/dev/null \
| grep -v $BOLD | xargs rm -f  2&gt;/dev/null)

if [ -d &quot;$ARCH_DIR&quot; -a -f &quot;$OLD&quot; ] ; then
echo &quot;  Copying essential redo logs.&quot; |$TLOG
find $ARCH_DIR -type f -name &quot;*$LGF*&quot; \
-newer $OLD -exec cp -p {} $CWD \;
compress -f $CWD/$LGF*
else
Log_error 1 &quot;Invalid Archive Log Dir or Filename.&quot;
fi

else
echo &quot;  No logs:  $SID set to NOARCHIVELOG.&quot; |$TLOG
fi
else
Log_error 1 &quot;$CWD/$LFLST: File not found&quot;
fi

if [ -n &quot;$TAPE&quot; ] ; then      #Send disk b/u's to tape
CT=`cat $TMP/$X.CT`
echo `expr $CT + 1` &gt; $TMP/$X.CT
echo &quot;  ${CT}- Tar file of $CWD.&quot; |$TLOG
cd $CWD
tar cvf $TAPE ./*
mt -t $TAPE offl
fi
}
Shutdown_instance() {
echo &quot;  (Shutting down $ORACLE_SID `date` )&quot; |$TLOG
Preshut                         #Pre-Shutdown function
sqldba&lt;&lt;EOF &gt;$TMP/$SID.shut.out 2&gt;&amp;1
connect internal;
shutdown immediate;
host sleep 10
startup exclusive;
host sleep 10
shutdown;
exit;
EOF
Error_chk $TMP/$SID.shut.out
}
Startup_instance() {
echo &quot;  (Starting up $ORACLE_SID `date` )&quot; |$TLOG
sqldba&lt;&lt;EOF &gt;$TMP/$SID.start.out 2&gt;&amp;1
connect internal;
startup;
exit;
EOF
Error_chk $TMP/$SID.start.out
Poststart                       #Post-startup function
}
Ps_check() {
while [ `$PS|grep &quot;$WHO.*dd&quot; | grep -v grep | wc -l \
|sed 's/  *//'` -ge $SIMULT ] ; do
sleep 10     #Sleep while more than $SIMULT processes
done
}

#Setup log and global variables
LOG=$TMP/oraback.log
touch $LOG  ;  chown oracle $LOG  ;  TLOG=&quot;tee -a $LOG&quot;
LFLST=logfile.list  ;  CFLST=controlfile.list  ;   X=$$
TSLST=tablespace.list    ;     export LFLST CFLST TSLST
ps -ef &gt;/dev/null &amp;&amp; PS='ps -ef' || PS='ps -aux'
HOST=`uname -n|cut -d. -f1`
SKIP=`grep &quot;^$HOST.master:&quot; $ORACONF | cut -d: -f2`
COLD=`grep &quot;^$HOST.master:&quot; $ORACONF | cut -d: -f3`
[ &quot;$COLD&quot; -gt 0 ] 2&gt;/dev/null \
&amp;&amp;  DAY=`date +%d`  ||  DAY=`date +%a`
[ &quot;$COLD&quot; = '*' ]  &amp;&amp;  COLD=$DAY
if [ &quot;$DAY&quot; = &quot;$COLD&quot; ] ; then
TYPE=COLD  ;  NUM=4
else
TYPE=HOT   ;  NUM=5
fi
TIME=`grep &quot;^$HOST.master:&quot; $ORACONF  | cut -d: -f$NUM`
TAPE=`grep &quot;^$HOST.master:&quot; $ORACONF  | cut -d: -f6`
USERS=`grep &quot;^$HOST.master:&quot; $ORACONF | cut -d: -f7`
[ -z &quot;$USERS&quot; ]  &amp;&amp;  USERS=oracle
SIMULT=`grep &quot;^$HOST.master:&quot; $ORACONF | cut -d: -f8`
BACKUPDIR=`grep &quot;^$HOST.master:&quot; $ORACONF |cut -d: -f9`
if [ -n &quot;$TAPE&quot; -a -n &quot;$SIMULT&quot; ] ; then
echo &quot;Simultaneous backups not supported for&quot; |$TLOG
echo &quot;tape devices.  (Will do serially.) &quot; |$TLOG
SIMULT=''  ;  export SIMULT
fi
COMP=`grep &quot;^$HOST.master:&quot; $ORACONF | cut -d: -f10`
MAIL_DBA=`grep &quot;^$HOST.master:&quot; $ORACONF |cut -d: -f11`
WHO=`id | cut -d'(' -f2 | cut -d')' -f1`

if [ -z &quot;$BACKUPDIR&quot; -o -z &quot;$MAIL_DBA&quot; ] ; then
echo &quot;Field 9 or 12 in $ORACONF is empty!&quot;   |$TLOG
echo &quot;(9=BACKUPDIR, 12=complete Mail command)&quot; |$TLOG
exit 1
fi
#Build list of SID's
if [ $# -ne 0 -a &quot;$1&quot; != &quot;at&quot; ] ; then
GREP=`echo $* | sed 's/ /:|^/g' | sed 's/$/:/'`
SID_LIST=`egrep &quot;^$GREP&quot; $ORATAB`
ARG=backup
else
SID_LIST=`grep -v '^\#' $ORATAB`
[ $# -eq 0 ] &amp;&amp; ARG=backup || ARG=at
fi

if [ -z &quot;`echo $WHO | egrep \&quot;$USERS\&quot;`&quot; ] ; then
echo &quot;WRONG LOGIN!\n&quot;
Usage
fi

if [ ! -s $ORATAB ] ; then
Log_error 1 &quot;NO $ORATAB - ABORTING BACKUP&quot;
exit 1
fi
#Skip b/u if find &quot;skip&quot; in ORACONF
if [ &quot;$SKIP&quot; = &quot;skip&quot; ] ; then
cat $ORACONF \
|sed &quot;s/$HOST.*:skip:/$HOST.master::/&quot;&gt;${ORACONF}.2
mv -f ${ORACONF}.2 $ORACONF
echo &quot;SKIPPING $0 ON $HOST TONIGHT ONLY DUE&quot;   |$TLOG
echo &quot;TO THE WORD \&quot;skip\&quot; IN $ORACONF!!&quot;      |$TLOG
exit 0
fi

case $ARG in

at)          #Check $ORACONF for backup and schedule it

if [ -z &quot;$TIME&quot; ] ; then
Log_error 1 &quot;No backup time found in $ORACONF&quot;
exit 1
fi

at -s $TIME&lt;&lt;EOF          #Start an at job w/Bourne sh
$BINDIR/oraback.sh &gt; $TMP/oraback.out 2&gt;&amp;1
EOF
;;

backup)                            #Actually run backup

echo &quot;\n====================================&quot; |$TLOG
echo &quot;Began Oracle backup: `date '+%X %D'`&quot;   |$TLOG
echo &quot;1&quot; &gt; $TMP/$X.CT
Preback                           #Pre-backup function

if [ -n &quot;$TAPE&quot; ] ; then         #If using tape, label
LABEL=&quot;$* $X.`date +%D`&quot;
mt -t $TAPE rew
if [ $? -eq 0 ] ; then
sleep 2
echo $LABEL &gt; $TAPE
else
Log_error 1 &quot;$TAPE failed to rewind!&quot;
exit 1
fi
if [ &quot;`dd if=$TAPE count=5 2&gt;/dev/null`&quot; = &quot;$LABEL&quot; ]
then
Log_error 1 &quot;$TAPE NOT the non-rewind device&quot;
exit 1
else
mt -t $TAPE rew
mt -t $TAPE fsf 1
echo &quot;Label the tape in $TAPE: \&quot;$LABEL\&quot;.&quot; |$TLOG
fi
fi

#For each SID we are backing up
for LINE in $SID_LIST ; do
ORACLE_SID=`echo $LINE  | cut -d: -f1`
SID=$ORACLE_SID  ;  CWD=$BACKUPDIR/$SID
ORACLE_HOME=`echo $LINE | cut -d: -f2`
export CWD ORACLE_SID SID ORACLE_HOME
mkdir $CWD 2&gt;/dev/null
chmod 775 $CWD  ;  chgrp dba $CWD
PATH=$ORIG_PATH:$ORACLE_HOME/bin  ;  export PATH

DBNUM=`$PS|grep &quot;ora_...._$SID&quot;|wc -l|sed 's/  *//'`
if [ $DBNUM -ge 4 ] ; then            #Database is UP
DB_UP=2

sqldba &lt;&lt;EOF &gt;$TMP/$X.tbs    #Make list of tbls
connect internal;
select tablespace_name, file_name \
from sys.dba_data_files;
exit;
EOF
grep '       ' $TMP/$X.tbs | grep -v 'ACE_N.*_NAM' \
|grep -v '^  *$'|awk '{print $1&quot;:&quot;$2}'&gt; $CWD/$TSLST
Error_chk $TMP/$X.tbs

sqldba &lt;&lt;EOF &gt;$TMP/$X.lf   #List archiving info
connect internal;
archive log list;
exit;
EOF
grep '^Ar' $TMP/$X.lf | awk '{print $3}'&gt;$CWD/$LFLST
Error_chk $TMP/$X.lf

LOGMODE=`grep 'og mode.* ARCHIVELO' $TMP/$X.lf`
[ -n &quot;$LOGMODE&quot; ]  &amp;&amp;  LOGS_UP=20  ||  LOGS_UP=10

sqldba&lt;&lt;EOF &gt;$TMP/$X.cf  #Get name of controlfile
connect internal;
show parameter control_files;
exit;
EOF
grep '^control' $TMP/$X.cf | awk '{print $3}' \
|sed 's/,//' &gt;$CWD/$CFLST
Error_chk $TMP/$X.cf
else                           #else Database is DOWN
DB_UP=1  ;  LOGS_UP=10
fi

if [ &quot;$TYPE&quot; = COLD ] ; then
Shutdown_instance
DB_UP=1  ;  LOGS_UP=10
fi

DEST=`grep -v '^$' $CWD/$LFLST | sed 's/%.*//'`
LGF=`basename $DEST`
ARCH_DIR=`echo $DEST | sed 's-/[^/]*$--'`
OLD=`ls -t $ARCH_DIR/$LGF* | head -3 | tail -1`
BOLD=`basename $OLD`

NOLOG=`grep &quot;^$HOST:$SID:NOARCHIVELOG&quot; $ORACONF`
NOHBACK=`grep -i &quot;$HOST:$SID:.*nohotbackup&quot; $ORACONF`
[ -n &quot;$NOHBACK&quot; ]  &amp;&amp;  HBACK=100  ||  HBACK=200

DB_STAT=`expr $HBACK + $LOGS_UP + $DB_UP`
[ -f $TMP/$X.Fatal ]  &amp;&amp;  DB_STAT=221

echo &quot; -----------------------------&quot;     |$TLOG
echo &quot; Backup of $SID Started `date +%T`&quot; |$TLOG

case $DB_STAT in
222)         #DB=up, LOGS=on, Backup gets green light

Backup_instance hot                 #Function

echo &quot;  Switch logfile and backup controlfile&quot;|$TLOG

sqldba &lt;&lt; EOF &gt;$TMP/$X.control 2&gt;&amp;1
connect internal;
alter system checkpoint;
alter system switch logfile;
host sleep 10
alter database backup controlfile to '$CWD/cntrlfile';
exit;
EOF
Error_chk $TMP/$X.control

compress -f $CWD/cntrlfile &gt;/dev/null 2&gt;&amp;1
Log_error $? &quot;Error compressing $CWD/cntrlfile&quot;

Copy_control_and_redolog_files ;;

211|111)                 #Database is completely down

if [ $DB_STAT = 211 -a &quot;$TYPE&quot; = &quot;HOT&quot; ] ; then
Log_error 1 &quot;!!$SID IS DOWN During a Hot Backup!!&quot;
fi

Backup_offline
Copy_control_and_redolog_files ;;

212)      #Database is up, but is set to NOARCHIVELOG

if [ -n &quot;$NOLOG&quot; ]  ; then       #Logs should be off
if [ -n &quot;`echo &quot;$NOLOG&quot;|grep ':offline'`&quot; ] ; then
Shutdown_instance          #Configured for offline
Backup_offline                   #backup, so do it
Copy_control_and_redolog_files
Startup_instance
else                       #else just skip instance
echo &quot; $SID skipped! (NOARCHIVELOG)&quot;   |$TLOG
fi
else     #This SID has no logs and is not customized
Log_error 1 &quot;BACKUP FAILED (NOARCHIVELOG)!&quot;
fi ;;

112|122)           #Word 'nohotbackup' is in ORACONF
echo &quot; Skipping $SID.  Found NOHOTBACKUP&quot;  |$TLOG
echo &quot; variable in $ORATAB.&quot;               |$TLOG ;;
221)            #Fatal error in early sqldba command
Log_error 1 &quot;No backup performed&quot;
rm $TMP/$X.Fatal ;;
esac

[ &quot;$TYPE&quot; = COLD ]  &amp;&amp;  Startup_instance

done                              #done with all $SIDS

Postback       #Run Post-backup script if there is one

echo &quot;Ended Oracle backup: `date '+%X %D'`&quot;  |$TLOG
echo &quot;====================================&quot;  |$TLOG

#If there were errors, mail them to the dba
[ -s $TMP/$X.Mail ] &amp;&amp; $MAIL_DBA &lt; $TMP/$X.Mail

rm -f $TMP/$X.* ;;              #Remove temporary logs
esac
#End of oraback.sh
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
