<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i04:  Shell Scripting and the WWW: Creating a Searchable Web Database</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a4_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a4_t2.htm">Table 2</a></span></td>
		<td><span class=navbarLink><a href="a4_t3.htm">Table 3</a></span></td>
		<td><a href="../../../../source/SA/1996/apr96.tar"><b class=codeListing>apr96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Shell Scripting and the WWW: Creating a Searchable Web Database</H1><p>
<P>
Tom Tessier<P>

Common Gateway Interface (CGI) scripts are one of the
main techniques
used to increase interactivity on web pages. Normal
HTML documents
retrieved from WWW servers are static, in contrast to
CGI scripts that
allow web output to be generated in real-time. Whether
you're emailing
forms, creating interactive trivia games, implementing
searchable
databases, or setting up web animations, CGI is the
way to go.<P>

The CGI defines how custom scripts must interact with
web server
software. This interface is implementable in any language
that can read
environment variables and direct strings to console
output. Because of
its powerful environment and string parsing commands,
shell scripting is
in fact a good choice for the creation of CGI code.<P>

The scripts must be stored in a special directory so
that the server
knows the files are executable. With NCSA's freeware
web server
distribution for example, the subdirectory is called
cgi-bin (within the
httpd directory).<P>

<B>Creating Forms</B><P>

Listing 1 illustrates how the HTML code is set up for
a typical
CGI-served web page. By placing method=&quot;get&quot;
ACTION=&quot;URL/cgi-bin/callme.sh&quot; within the
&lt;FORM&gt; tag, one is stating the
instructions the server must follow when the Submit
button is pressed.
In this case, when the form is submitted, the contents
of the two inputs
(FIRST and LASTNAME) will be transferred to the script
callme.sh via the
environment variable QUERY_STRING. See Table 1 for a
description of the
different methods available for form submission.<P>

The rest of the code in Listing 1 is standard HTML:
&lt;BR&gt; is used to
cause line breaks, &lt;HTML&gt;&lt;BODY&gt; initiate
the web session, &lt;/BODY&gt;&lt;/HTML&gt;
close it. The default size for the form inputs is 20
characters, so by
allocating 50 characters for the LASTNAME entry, you
are ensuring that
the user will have enough space to read their full last
name as it is
entered. If a MAXLENGTH=integer tag is included after
the SIZE, then
only MAXLENGTH characters are allowed. If not specified,
an unlimited
amount of text may be entered, with the input field
scrolling as the
display is filled. Modifiers available for the &lt;INPUT&gt;
tag are detailed
in Table 2.<P>

The contents of the variable QUERY_STRING (passed to
theCGI script when
the form is submitted) may appear quite cryptic at first.
For example,
if the FIRST entry was blank and the LASTNAME field
contained &quot;Joe
Smith,&quot; callme.sh would have the following arguments
passed to it:
FIRST=&amp;LASTNAME=Joe+Smith%13, where %13 is a carriage
return added by
the web browser. Notice also that space characters are
not allowed
(hence, the web browser converts the space between &quot;Joe&quot;
and &quot;Smith&quot; to
a &quot;+&quot;). The formatting of the QUERY_STRING
environment variable is
summarized in Table 3.<P>

CGI scripts may also be called directly by use of an
HREF tag. For
example, &lt;A HREF=&quot;URL/cgi-bin/callme.sh?INPUT1=0&quot;&gt;
Click me&lt;/A&gt; would
call the script callme.sh when &quot;Click me&quot;
is pressed. All of the
arguments after the question mark are transferred to
the script via
QUERY_STRING.<P>

<B>Environment parsing</B><P>

Once the CGI script itself has been executed, it must
properly read and
parse the QUERY_STRING environment variable. The awk
shell command
proves to be very useful in this regard. awk, which
is really just a
pattern-directed scanning and processing tool, is used
to break
QUERY_STRING into a collection of smaller, easier to
handle variables.
Listing 2 shows how this is done.<P>

First of all, security breaches are weeded out by the
use of sed.
Specifically, the &quot;;&quot; and &quot;'&quot;characters
are converted to ESC. This
prevents someone from entering a command in the form
input, such as &quot;;
touch newfile,&quot; which would be converted to a harmless
escaped input as
in &quot;\ESC touch newfile.&quot; The BEGIN { RS=&quot;&amp;&quot;;
FS=&quot;=&quot; } statement within
the awk indicates to use &quot;&amp;&quot; as the input
record separator, while &quot;=&quot; is
used as the input field separator (instead of the default
space
character). Hence the QUERY_STRING is broken up into
records based upon
the location of &quot;&amp;&quot; identifiers. For example,
a QUERY_STRING of
INITIAL=j&amp;LASTNAME=wilson will give two records:
INITIAL j and LASTNAME
wilson.<P>

The printf statement prints the arguments, which are
themselves
evaluated as commands because of the eval indicator
surrounding the
whole expression. Using the QUERY_STRING given above,
the printf would
create two environment variables as follows: QS_INITIAL='J'
and
QS_LASTNAME='WILSON'. Notice in Listing 2 that the toupper($2)
statement
converts the second argument to uppercase. This allows
later comparisons
to contain just uppercase characters in the match fields,
saving space.<P>

The $1 ~ /^[a-zA-Z][a-zA-Z0-9_]*$/ line in Listing 2
ensures that the
names of the form inputs have been set properly for
the creation of
environment variables. Specifically, an environment
variable name is
only allowed to start with alphabetic characters (hence,
the ^[a-zA-Z])
but may end with any alphabetic and numeric characters
(the
[a-zA-Z0-9_]*$ statement).<P>

Because of the carriage return added to QUERY_STRING
by the browser, it
is necessary to use sed to delete the %13 at the end
of the last
argument. This is illustrated by the line QS_LASTNAME=`echo
$QS+LASTNAME
| sed /%13/d` in Listing 2 (it assumes that the script
was called by
Listing 1).<P>

<B>Implementing a Database Search Engine</B><P>

Once the environment variables have been set to the
form inputs,
standard shell scripting commands may be applied. Keep
in mind that all
output appearing after each executed echo statement
will be displayed on
the web page. Listing 3 and Listing 4
demonstrate a simple
CGI database search
utility that scans a datafile for employee email addresses.<P>

A few things to note about the implementation: wildcard
matching via a
&quot;*&quot; in the LASTNAME input field is available.
For example, if the user
enters joe* into the LASTNAME input, everything before
the star must be
at the beginning of the database last name entries in
order for a match
to occur. Thus, database matches such as JOEMOE and
JOEBLOW will work
for joe*, but MOEJOEM will not. Similarly, if the user
enters *joe,
everything after the star must match the last characters
in the
database. MOEJOE and BLOWJOE will match, JOEBLOW will
not. If the user
only enters joe, any entry containing the characters
JOE is displayed.<P>

The determination of this wildcard matching is somewhat
complex and
deserves mentioning. The line tempvar=`echo $QS_LASTNAME
| awk '{ printf
&quot;%c%s%c&quot;, 39, substr($0, 0, 1), 39 }' ` in
Listing 4 strips the first
character out of the QS_LASTNAME environment variable
via the substr($0,
0, 1) command (cut out a substring of length 1 from
the start of the
string argument $0). If the first character is really
a &quot;*&quot;, the match
is checked with a grep &quot;$qstemp&quot;'$', the dollar
sign at the end meaning
that a match will occur only if the string is at the
end of the database
field text.<P>

The tempvar=`echo $QS_LASTNAME | awk '{ printf &quot;%c%s%c&quot;,
39, substr($0,
length, 1), 39 }' ` in Listing 4 strips out the last
character in
QS_LASTNAME via substr($0, length, 1), which indicates
to cut a
substring of length 1 from the end (hence, length) of
the $0 string
argument. So, if the last character of QS_LASTNAME is
a &quot;*&quot;, the match
will be analyzed with grep '^'&quot;$qstemp&quot;, with
the caret sign at the
beginning indicating a match is only to occur if the
string is at the
start of the database entry.<P>

The format for the database text file is as follows:
each field is
separated by a &quot;!&quot; character. There are four
fields: initial, last name,
email address, and full name. Only the first two fields
are used in the
search process; the last two are used when a match is
found. In the full
name field, a &quot;+&quot; is used in place of the
space character. Each entry is
terminated by a carriage return (no Ctrl-Ms) or a space.
A sample
datafile is illustrated in Listing 5.<P>

With the techniques presented here, you'll be creating
CGI scripts for
your systems in no time. Whether you use them to process
form input,
create searchable databases, or send email, CGI shell
scripts are the
way to go for easily implemented interactive pages.<P>




<P>


<H1>About the Author</H1><p>
<P>
Tom Tessier is an Engineering Physics student at the
University of Alberta, Canada. He can be reached at
tessier@ee.ualberta.ca.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
