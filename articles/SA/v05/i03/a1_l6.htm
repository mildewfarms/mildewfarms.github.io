<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i03: Listing 6: Authorization information</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a1_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a1_l5.htm">Listing 5</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 6</span></td>
		<td><span class=navbarLink><a href="a1_l7.htm">Listing 7</a></span></td>
		<td><span class=navbarLink><a href="a1_l8.htm">Listing 8</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1996/mar96.tar"><b class=codeListing>mar96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 6: Authorization information</H1><p>
<PRE>
#include &lt;stdio.h&gt;

#define MAXVAL	255

static char six2pr[64] = {
'A','B','C','D','E','F','G','H','I','J','K','L','M',
'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
'a','b','c','d','e','f','g','h','i','j','k','l','m',
'n','o','p','q','r','s','t','u','v','w','x','y','z',
'0','1','2','3','4','5','6','7','8','9','+','/'
};

static unsigned char pr2six[256];

static int encode (
unsigned char	*bufin,
unsigned int	nbytes,
char 		*bufcoded)
{
#define ENC(c) six2pr[c]

register char *outptr = bufcoded;
unsigned int i;

for (i=0; i&lt;nbytes; i += 3) {
*(outptr++) = ENC(*bufin &gt;&gt; 2);            /* c1 */
*(outptr++) = ENC(((*bufin &lt;&lt; 4) &amp; 060) | ((bufin[1] &gt;&gt; 4) &amp; 017)); /*c2*/
*(outptr++) = ENC(((bufin[1] &lt;&lt; 2) &amp; 074) | ((bufin[2] &gt;&gt; 6) &amp; 03));/*c3*/
*(outptr++) = ENC(bufin[2] &amp; 077);         /* c4 */

bufin += 3;
}

/* If nbytes was not a multiple of 3, then we have encoded too
* many characters.  Adjust appropriately.
*/
if(i == nbytes+1) {
/* There were only 2 bytes in that last group */
outptr[-1] = '=';
} else if(i == nbytes+2) {
/* There was only 1 byte in that last group */
outptr[-1] = '=';
outptr[-2] = '=';
}
*outptr = '\0';
return(outptr - bufcoded);
#undef ENC
}

static int decode (
char 		*bufcoded,
unsigned char 	*bufplain,
int		outbufsize)
{
/* single character decode */
#define DEC(c) pr2six[(int)c]
#define MAXVAL 63

static int first = 1;

int nbytesdecoded, j;
register char *bufin = bufcoded;
register unsigned char *bufout = bufplain;
register int nprbytes;

/* If this is the first call, initialize the mapping table.
* This code should work even on non-ASCII machines.
*/
if(first) {
first = 0;
for(j=0; j&lt;256; j++) pr2six[j] = MAXVAL+1;

for(j=0; j&lt;64; j++) pr2six[(int)six2pr[j]] = (unsigned char) j;
}

/* Strip leading whitespace. */

while(*bufcoded==' ' || *bufcoded == '\t') bufcoded++;


/* Figure out how many characters are in the input buffer.
* If this would decode into more bytes than would fit into
* the output buffer, adjust the number of input bytes downwards.
*/
bufin = bufcoded;
while(pr2six[(int)*(bufin++)] &lt;= MAXVAL);
nprbytes = bufin - bufcoded - 1;
nbytesdecoded = ((nprbytes+3)/4) * 3;
if(nbytesdecoded &gt; outbufsize) {
nprbytes = (outbufsize*4)/3;
}

bufin = bufcoded;

while (nprbytes &gt; 0) {
*(bufout++) = (unsigned char) (DEC(*bufin) &lt;&lt; 2 | DEC(bufin[1]) &gt;&gt; 4);
*(bufout++) = (unsigned char) (DEC(bufin[1]) &lt;&lt; 4 | DEC(bufin[2]) &gt;&gt; 2);
*(bufout++) = (unsigned char) (DEC(bufin[2]) &lt;&lt; 6 | DEC(bufin[3]));
bufin += 4;
nprbytes -= 4;
}

if(nprbytes &amp; 03) {
if(pr2six[(int)bufin[-2]] &gt; MAXVAL) {
nbytesdecoded -= 2;
} else {
nbytesdecoded -= 1;
}
}

return(nbytesdecoded);
#undef DEC
#undef MAXVAL
}

main( int argc, char **argv )
{
char	bufin[256], bufout[256];
int	cnt;

if( argc &lt;= 1 ) {
exit( 1 );
}

if( strcmp( *argv, &quot;decode&quot; ) == 0 ) {
while( --argc ) {
argv++;
cnt = decode( *argv, bufout, sizeof(bufout) );
bufout[cnt] = '\0';
printf( &quot;%s\n&quot;, bufout );
}
}
else {
if( strcmp( *argv, &quot;encode&quot; ) == 0 ) {
while( --argc ) {
argv++;
cnt = decode( *argv, bufout, sizeof(bufout) );
bufout[cnt] = '\0';
printf( &quot;%s\n&quot;, bufout );
}
}
}
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
