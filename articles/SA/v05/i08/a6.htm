<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i08:  A Dispatcher for Database Engine Alarms</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1996/aug96.tar"><b class=codeListing>aug96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>A Dispatcher for Database Engine Alarms</H1><p>
<P>
Jon Alder and Ed Schaefer<P>

What do you do if the database engine crashes at 3 a.m.?
You could wait
for a call from an irate user or you could have the
database engine
trigger an event to page you. Or what if your tape librarian
has trouble
remembering to secure last night's tape archive? You
could rely on the
librarian's memory or the database engine could trigger
an event to send
email informing the librarian when the archive is completed.<P>

Informix has added just such an event-alarm facility
to their Online
Data Management System, version 6.0 and greater. The
event-alarm
facility calls a program or shell script pointed to
by the ALARMPROGRAM
configuration parameter and passes the event severity
as parameters.
Since the facility always calls the same program, that
program must be a
dispatcher controlling subsequent calls based on event
severity. This
article provides a dispatcher program.<P>

<B>Command-Line Arguments</B><P>

When an event is triggered, Online calls the alarm program
and passes
five command-line arguments. From the Informix Online
Dynamic Server
Administrator's Guide, these arguments are defined as:<P>
<TABLE>
<TR>
<TH WIDTH=100 ALIGN=LEFT><B>Arg</B></TH>
<TH WIDTH=300 ALIGN=LEFT><B>Parameter</B></TH>
<TH WIDTH=200 ALIGN=LEFT><B>Data Type</B></TH>
</TR>
<TR>
<TD>1</TD>
<TD>Event Severity</TD>
<TD>Integer</TD>
</TR>
<TR>
<TD>2</TD>
<TD>Event Class Id</TD>
<TD>Integer</TD>
</TR>
<TR>
<TD>3</TD>
<TD>Event Class Message</TD>
<TD>String</TD>
</TR>
<TR>
<TD>4</TD>
<TD>Event Specific Message</TD>
<TD>String</TD>
</TR>
<TR>
<TD>5</TD>
<TD>Event &quot;see also&quot; File</TD>
<TD>String</TD>
</TR>
<TR>
</TABLE>
<P>
The Event Severity cases are:<P>
<TABLE>
<TR>
<TH WIDTH=100 ALIGN=LEFT><B>Severity</B></TH>
<TH WIDTH=400 ALIGN=LEFT><B>Description</B></TH>
</TR>
<TR>
<TD>1</TD>
<TD>Not noteworthy. Will not be reported to the Alarm Program.</TD>
</TR>
<TR>
<TD>2</TD>
<TD>Information. No error has occurred but some routine event completed successfully.</TD>
</TR>
<TR>
<TD>3</TD>
<TD>Attention. This does not compromise data or prevent the use of the system; however, it warrants
attention.</TD>
</TR>
<TR>
<TD>4</TD>
<TD>Emergency. Something unexpected occurred that might compromise data or access to data.</TD>
</TR>
<TR>
<TD>5</TD>
<TD>Fatal. Something unexpected occurred causing the database server to crash.</TD>
</TR>
</TABLE>
<P>
The second and third arguments are the class id and
class message text,
respectively, shown in Figure 1. The fourth parameter
is additional
information. Generally, this text is written to the
Informix message
log. Some events write additional information to another
file. The fifth
parameter is the full pathname of this file.<P>

<B>The ALARMPROGRAM</B><P>

<B>Configuration Parameter</B><P>

Before an event can be triggered, you must set the ALARMPROGRAM
parameter located in the Informix configuration file
to the full path of
the dispatcher program:<P>
<PRE>
ALARMPROGRAM    /usr/ed/alarm/dispatcher.sh</pre><p>
<p>
Turn the engine off and back on to activate the new
ALARMPROGRAM. Upon
turning the engine back on, the following entry should
be in the
Informix log file:<P>
<PRE>
init_alarm():  alarmprog = '/usr/ed/alarm/dispatcher.sh'
shell = '/bin/ksh'</pre><p>
<p>
<B>The DISPATCHER Program</B><P>

The DISPATCHER program is just an awk script. For each
of the 24 classes
of events, the dispatcher controls whether another program
should be
executed and whether a specific subprogram or the default
program should
be executed.<P>

DISPATCHER performs the following steps:<P>

1. Define each of the 24 Informix event classes in an
awk array.<P>

2. Set each event to active/inactive.<P>

3. For each event, define an optional active program
to call.<P>

4. Set the default program parameter.<P>

5. Set the debug parameter to false for production.<P>

6. If the debug parameter is true, the awk array prints
to standard
output only and the program terminates.<P>

7. The Informix class id is the index into the array.
For each array
element, if the subprogram is defined, this subprogram
executes else the
default program executes. All five command-line arguments
are passed to
the whatever program executes.<P>

<B>An Example</B><P>

Event 23 is a logical log being archived. Upon archive
completion, the
program, /usr/lbin/testsh.sh, executes. The testsh.sh
program simply
displays a description and each of the command-line
arguments passed:<P>
<PRE>
severity:  2
class id:   23
class msg:  Logical Log 19 Complete.
event msg: Logical Log 19 Complete.
see also:</pre><p>
<p>
<B>Conclusion</B><P>

The dispatcher program is based primarily on the value
of the Informix
class id (argument 2). One enhancement might be to trap
the severity
code for other processing instead of passing it straight
to the
subprogram or default.<P>

Dispatcher is a simple, yet elegant and functional,
little design. Too
bad all database environments do not provide an alarm
mechanism.<P>

<B>References</B><P>

Informix-OnLine Dynamic Server, Administrator's Guide,
Volume 2. 1994.
Informix Press: Menlo Park, CA.<P>




<P>


<H1>About the Authors</H1><p>
<P>
Ed Schaefer is a frequent contributor to Sys Admin.
He is an Informix
Database Administrator and UNIX administrator for jeTech
Data Systems of
Moorpark, CA, where he develops Time and Attendance
Software. He can be
reached at olded@ix.netcom.com.<P>

Jon Alder has been working on open systems for more
than 10 years, most
of the time in systems design and management. He is
currently Director
of Informix Technology for Meridian Technology Group,
a firm of
technical and business consultants located in the Pacific
Northwest. He
can be reached at jon@MeridianGroup.com.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
