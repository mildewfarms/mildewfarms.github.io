<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i08: Listing 2: AdminLogDB</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1996/aug96.tar"><b class=codeListing>aug96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: AdminLogDB</H1><p>
<PRE>
#!/usr/local/bin/wish -f

# -----------------------------------------------------
# AdminLogDB                         September 28, 1995
# Scott A. Tarvainen
# -----------------------------------------------------
# This TCL/TK wish program is a modification of the
# tkdb program written by Norman Walsh.  The AdminLogDB
# program is a graphical System Administrator Log
# program to allow system administration staff members
# to share information of technical/historical
# importance on a daily basis.
# Note:  The tkdb code is reprinted with Mr. Walsh's
#        consent.
# -----------------------------------------------------

#
# tkdb is a simple &quot;database&quot; editor.  A database is a collection of
# records with text fields.
#
# Copyright (C) 1994 by Norman Walsh
#
# In order to use tkdb, you must first create the database file headers
# with another editor.  Database files have the following format: line 1
# holds the database title, line 2 holds the field specification, and lines
# 3 through eof each hold a single record.
#
# The database field specification consists of an arbitrary number of fields.
# Each field consists of a fieldname and a length.  For example, &quot;Name 30&quot;
# identifies a field called &quot;Name&quot; that is 30 characters long.  Field names
# must not have imbeded commas (,) or semicolons (;).
#
# Fields that are seperated by commas are presented horizontally on the same
# line.  Fields that are seperated by semicolons are presented on seperate
# lines.
#
# Here's an example of a simple database of names and addresses
#
# Names and Addresses
# Name 30;Addr1 30;Addr2 30;City 25,State 2,Zip 10
#
# When displayed, it looks something like this:
#
# +----------------------------------------+
# |         Names and Addresses            |
# |                                        |
# | Name __________________________        |
# | Addr1 __________________________       |
# | Addr2 __________________________       |
# | City ____________ State __ Zip _______ |
# |                                        |
# +----------------------------------------+
#
#########################################################################

# Get the dbName from the arguments, use ~/.tkdbfile if
# none is provided
set arglist [ split $argv &quot; &quot; ]
if { [ llength $arglist ] &gt; 0 } {
set dbName [ lindex $arglist 0 ]
} else {
set dbName &quot;~/.tkdbfile&quot;
}

# Make sure the database exists
if [ file exists &quot;$dbName&quot; ] {
set f [ open &quot;$dbName&quot; ]
} else {
puts stderr &quot;The database file $dbName does not exist.&quot;
exit 1
}

# Read the database title and pack it into the frame
gets $f DatabaseTitle
label .title  -text &quot;$DatabaseTitle&quot; \
-font &quot;-*-times-bold-r-*-*-*-180-*&quot; \
-relief ridge

pack  .title -side top -padx 3m -pady 3m

# Load the field specification
if { [ gets $f FieldSpec ] &lt; 0 } {
puts stderr &quot;Cannot read field specification from $dbName.&quot;
exit 1
}

# In this context, linecount is lines in the window...
set linecount 0

set FieldCount 0

# Find the widest first field on the line
set ffWidth 0
# Parse the field specification
foreach line [ split $FieldSpec &quot;;&quot; ] {
set field [ lindex [ split $line &quot;,&quot; ] 0 ]
if { [ regexp {(.*) ([0-9]+)} &quot;$field&quot; \
fmatch fname flength ] } {
if { [ string length $fname ] &gt; $ffWidth } {
set ffWidth [ string length $fname ]
}
}
}

# Parse the field specification
foreach line [ split $FieldSpec &quot;;&quot; ] {
set linecount [incr linecount]
eval frame .line_$linecount

foreach field [ split $line &quot;,&quot; ] {
set FieldCount [incr FieldCount]

if { [ regexp {(.*) ([0-9]+)} &quot;$field&quot; \
fmatch fname flength ] } {
eval label .lf$FieldCount \
-text {$fname} \
-width $ffWidth \
-anchor w
eval entry .ef$FieldCount -relief sunken \
-textvariable Fields($FieldCount) \
-width $flength

eval pack  .lf$FieldCount \
-side left -padx 1m \
-in .line_$linecount
eval pack  .ef$FieldCount \
-side left \
-padx 1m \
-in .line_$linecount
} else {
puts stderr &quot;Error: bad field: $field&quot;;
exit 1;
}
}

eval pack .line_$linecount -side top -pady .5m -fill x
}

# Add the buttons and the &quot;Record n of m&quot; line to the
# bottom of the window

#------------------------------------------------------------#
# Print and Delete buttons added by Scott Tarvainen, CTI     #
# to be used in the System Administrator Log Program         #
#------------------------------------------------------------#

frame .crframe
frame .buttons
button .save -text &quot;Save&quot; -command &quot;save&quot;
button .quit -text &quot;Quit&quot; -command &quot;quit&quot;
button .print -text &quot;Print&quot; -command &quot;print&quot;
button .delete -text &quot;Delete&quot; -command &quot;delete&quot;
button .next -text &quot;Next&quot; -command &quot;next 1&quot;
button .prev -text &quot;Prev&quot; -command &quot;next -1&quot;
button .new  -text &quot;New&quot;  -command &quot;new_rec&quot;
pack .save .quit .print .delete .next .prev .new \
-in .buttons \
-side left -padx 1m
pack .buttons \
-side left \
-pady 1m \
-padx 5m \
-in .crframe

set RecNum 1
label .cr_record  -text &quot;Record &quot;
label .cr_current -textvariable RecNum
label .cr_of      -text &quot; of &quot;
label .cr_count   -textvariable RecordCount
pack  .cr_record .cr_current .cr_of .cr_count \
-side left \
-in .crframe

pack .crframe -side top

# We begin at record 1, so disable the &quot;prev&quot; button
.prev configure -state disabled

# Load all the records
set RecordCount 0
while { [ gets $f line ] &gt;= 0 } {
set RecordCount [incr RecordCount]
set Records($RecordCount) &quot;$line&quot;
}

# If there's only one record, disable the &quot;next&quot; button
if { $RecordCount &lt; 2 } {
.next configure -state disabled
}

# we don't need the database file anymore...
close $f

#------------------------------------------------------------#
# set input focus and keystroke bindings to allow carriage   #
# returns                                                    #
#------------------------------------------------------------#

focus .ef1

bind .ef1 &lt;Return&gt; {focus .ef2}
bind .ef2 &lt;Return&gt; {focus .ef3}
bind .ef3 &lt;Return&gt; {focus .ef4}
bind .ef4 &lt;Return&gt; {focus .ef5}
bind .ef5 &lt;Return&gt; {focus .ef6}
bind .ef6 &lt;Return&gt; {focus .ef7}
bind .ef7 &lt;Return&gt; {focus .ef8}
bind .ef8 &lt;Return&gt; {focus .ef9}
bind .ef9 &lt;Return&gt; {focus .ef10}
bind .ef10 &lt;Return&gt; {focus .ef11}
bind .ef11 &lt;Return&gt; {focus .ef12}
bind .ef12 &lt;Return&gt; {focus .ef1}

proc get_rec { } {
# Copy the contents of the current record into
# the Fields()
global Records RecordCount RecNum
global Fields FieldCount

for { set fieldcount 1 } \
{ $fieldcount &lt;= $FieldCount } \
{ incr fieldcount } {
set Fields($fieldcount) &quot;&quot;
}

set fieldcount 0
set line $Records($RecNum)

foreach field [ split $line &quot;|&quot; ] {
set fieldcount [incr fieldcount]
eval set Fields($fieldcount) { $field }

if { $fieldcount == $FieldCount } break
}
}

proc set_rec { } {
# Copy the contents of the Fields() into
# the current record
global Records RecordCount RecNum
global Fields FieldCount
global Changed

set fieldcount 0
set line &quot;&quot;

for { set fieldcount 1 } \
{ $fieldcount &lt;= $FieldCount } \
{ incr fieldcount } {
if { &quot;$line&quot; != &quot;&quot; } {
set line &quot;$line|&quot;
}
set line &quot;$line$Fields($fieldcount)&quot;
}

# Check to see if the record has been modified
if { &quot;$Records($RecNum)&quot; != &quot;$line&quot; } {
set Changed 1
}

set Records($RecNum) &quot;$line&quot;
}

proc save { } {
# Save the database
global DatabaseTitle FieldSpec
global Records RecordCount
global Changed
global dbName

set_rec

set f [ open &quot;$dbName&quot; &quot;w&quot; ]

puts $f &quot;$DatabaseTitle&quot;
puts $f &quot;$FieldSpec&quot;

for { set i 1 } { $i &lt;= $RecordCount } { incr i } {
puts $f &quot;$Records($i)&quot;
}

close $f
set Changed 0
}

proc quit { } {
# Quit, making sure we don't accidentally lose
# any changes
global Changed

set_rec

set really_quit 1
if { $Changed } {
set really_quit [ confirm_quit ]
}

if { $really_quit } {
destroy .
exit 0
}
}

proc confirm_quit {} {
# Do you *really* want to lose those changes?
set reply [ tk_dialog .d &quot;Are you sure?&quot; \
&quot;There are unsaved changes that will be lost, \
are you sure you want to quit?&quot; \
warning 0 &quot;Save&quot; &quot;Cancel&quot; &quot;Discard changes&quot; ]

if { $reply == 0 } {
save
return 1
}

if { $reply == 2 } {
return 1
}

return 0
}

#------------------------------------------------------------#
# Procedure print_records added by Scott Tarvainen, CTI to   #
# create an ASCII output file that can be queued to the      #
# printer.  This ASCII file will be created and named        #
# &quot;/tmp/printfile&quot;.  The last line of this procedure is an   #
# exec call to lpr to print to your printer.  This assumes   #
# the default printer 'lp' is set in your /etc/printcap file.#
#------------------------------------------------------------#

proc print_records {} {

global dbName
global Records RecordCount RecNum

set PrintFile &quot;/tmp/printfile&quot;
set f [ open &quot;$PrintFile&quot; &quot;w&quot; ]

if [ file exists &quot;$dbName&quot; ] {
set e [ open &quot;$dbName&quot; &quot;r&quot; ]
} else {
puts stderr &quot;The database file $dbName does not exist.&quot;
exit 1
}

set count 0
while { [ gets $e line ] &gt;= 0 } {
set count [ incr count ]
if { $count == 1 } {
puts $f &quot;               ============================================&quot;
puts $f &quot;              $line&quot;
puts $f &quot;               ============================================&quot;
puts $f &quot;&quot;
}

if { $count &gt; 2 } {
set fieldcount 0
foreach field [ split $line &quot;|&quot; ] {
set fieldcount [ incr fieldcount ]
set MYFields($fieldcount) &quot;$field&quot;
}
puts $f &quot;               Time           Administrator&quot;
puts $f &quot;               ----           -------------&quot;
puts $f &quot;               $MYFields(2)          $MYFields(1)&quot;
puts $f &quot;&quot;

for { set j 3 } { $j &lt;= $fieldcount } { incr j } {
if { $MYFields($j) != &quot;&quot; } {
puts $f &quot;               $MYFields($j)&quot;
}
}
puts $f &quot;&quot;
puts $f &quot;               ############################################&quot;
puts $f &quot;&quot;
}
}
close $e
close $f
exec lpr /tmp/printfile
}

#------------------------------------------------------------#
# Procedure print added by Scott Tarvainen, CTI to allow the #
# user the option to Save and Print the Sysadmin Log, Ignore #
# Changes and Print, or to Cancel.                           #
#------------------------------------------------------------#

proc print {} {

global DatabaseTitle FieldSpec dbName
global Records RecordCount RecNum
global Fields FieldCount Changed

set_rec

if { $Changed } {
set reply [ tk_dialog .d &quot;Print Option&quot; \
&quot;There are unsaved changes \
to the database&quot; \
warning 0 &quot;Save Changes &amp; Print&quot; \
&quot;Ignore Changes &amp; Print&quot; &quot;Cancel&quot; ]

if { $reply == 0 } {
save
print_records

} elseif { $reply == 1 } {
print_records

} else {
}
} else {
print_records
}
}

#------------------------------------------------------------#
# Procedure delete added by Scott Tarvainen, CTI to give the #
# user the option to delete a record from the Sysadmin Log.  #
#------------------------------------------------------------#

proc delete {} {

global DatabaseTitle FieldSpec dbName
global Records RecordCount RecNum
global Fields FieldCount Changed

if { $RecordCount &lt; 2 } {
for { set fieldcount 1 } \
{ $fieldcount &lt;= $FieldCount } \
{ incr fieldcount } {
set Fields($fieldcount) &quot;&quot;
}
.next configure -state disabledd
set Changed 1

} else {
if { $RecNum == $RecordCount } {
set RecNum [ incr RecNum -1 ]
set RecordCount [ incr RecordCount -1 ]
get_rec
.next configure -state disabled
set Changed 1

} else {
set MinusCount [ incr RecordCount -1 ]
for { set i $RecNum } { $i &lt;= $MinusCount } \
{incr i 1 } {
set j $i
set NextRecord [ incr j 1 ]
set Records($i) &quot;$Records($NextRecord)&quot;
}

if { $RecNum &gt; 1 } {
set RecNum [ incr RecNum -1 ]
get_rec
} else {
set RecNum 1
get_rec
.prev configure -state disabled
}
set Changed 1
}
}

if { $RecNum == $RecordCount } {
.next configure -state disabled
}
if { $RecNum &lt; 2 } {
.prev configure -state disabled
}
}

proc next direction {
# Move forward or backward, updating the buttons
global RecNum RecordCount

set_rec

set nextrec [ incr RecNum $direction ]

if { $nextrec == 1 } {
.prev configure -state disabled
} else {
.prev configure -state active
}

if { $nextrec == $RecordCount } {
.next configure -state disabled
} else {
.next configure -state active
}

set RecNum $nextrec

get_rec
}

proc new_rec {} {
# Create a new record
global RecNum RecordCount Records
global Changed

if { $RecordCount &gt; 0 } {
set_rec
}

set RecordCount [ incr RecordCount ]
set RecNum $RecordCount

set Records($RecNum) &quot;&quot;

get_rec

.prev configure -state disabled
.next configure -state disabled

if { $RecNum &gt; 1 } {
.prev configure -state active
}

set Changed 1
}

# If there are no records, create one
if { $RecordCount == 0 } {
new_rec
}

set Changed 0

get_rec

# &quot;wish&quot; will take over here and begin processing
# button and entry events..

# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
