<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i08: Listing 1: Bourne shell functions for creating yesterday's date</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a8.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1996/aug96.tar"><b class=codeListing>aug96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Bourne shell functions for creating yesterday's date</H1><p>
<PRE>
##
# alz (n) - add leading zero;  if n &lt; 10,  returns &quot;0n&quot;, otherwise n.
#       Result is returned in Znn because of the way return works --
#       it strips the leading zero back off.
alz () {
if  [ $1 -lt 10 ]; then
if  [ `echo &quot;$1&quot; | wc -c` -gt 2 ]; then
Znn=&quot;$1&quot;
else
Znn=&quot;0$1&quot;
fi
else
Znn=&quot;$1&quot;
fi
return $1
}
##
# slz (n) - strip leading zero;  inverse of alz.
slz () {
return $1;
}
##
# ly (yyyy)  -  leap year; returns 1 if yyyy is a leap year, 0 otherwise.
ly () {
C4=`expr $1 % 4`
C100=`expr $1 % 100`
C400=`expr $1 % 400`
R=0
if  [ \( $C4 -eq 0 -a $C100 -ne 0 \) -o $C400 -eq 0 ]; then
R=1
fi
return $R;
}
##
# dim (mm yyyy) - days in month; returns days in month mm in year yyyy.
DIM=&quot;31 28 31 30 31 30 31 31 30 31 30 31&quot;
dim ()  {
TMP=`echo $DIM | cut -f$1 -d' '`
ADdim=0
if  [ $1 -eq 2 ]; then
ly $2
ADdim=$?
fi
return `expr $TMP + $ADdim`;
}
##
# moy (mm) - month of year; returns value in Mmm: string representation of
#       month mm.
MOY=&quot;Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec&quot;
moy () {
Mmm=`echo $MOY | cut -f$1 -d' '`
return 0;
}
##
# nom (mmm) - number of month;  returns numeric value of month &quot;mmm&quot;.
nom () {
case $1
in
&quot;Jan&quot;)  return 1;;
&quot;Feb&quot;)  return 2;;
&quot;Mar&quot;)  return 3;;
&quot;Apr&quot;)  return 4;;
&quot;May&quot;)  return 5;;
&quot;Jun&quot;)  return 6;;
&quot;Jul&quot;)  return 7;;
&quot;Aug&quot;)  return 8;;
&quot;Sep&quot;)  return 9;;
&quot;Oct&quot;)  return 10;;
&quot;Nov&quot;)  return 11;;
&quot;Dec&quot;)  return 12;;
* )  return 0;;
esac
}
##
# today - return values in Ydd Ymm Yyy corresponding to today's date.
today () {
T1=`date '+%y %m %d'`
Yyy=`echo &quot;$T1&quot; | cut -f1 -d' '`
Ymm=`echo &quot;$T1&quot; | cut -f2 -d' '`
Ydd=`echo &quot;$T1&quot; | cut -f3 -d' '`
return 0;
}
##
# tomorrow ( dd mm yyyy ) - return values in Ydd Ymm Yyy representing
#       a date that stands in relation &quot;tomorrow&quot; to dd mm yyyy.
tomorrow () {
Ymm=$2
Yyy=$3
dim $2 $3
T1=$?
if  [ $1 -eq $T1 ]; then
Ydd=1
if  [ &quot;$2&quot; -eq 12 ]; then
Ymm = 1
Yyy=`expr $3 + 1`
else
Ymm=`expr $2 + 1`
fi
else
Ydd=`expr $1 + 1`
fi
return 0;
}
##
# yesterday ( dd mm yyyy ) - returns values in Ydd Ymm Yyy representing
#       a date that stands in relation &quot;yesterday&quot; to dd mm yyyy.
yesterday () {
Ymm=$2
Yyy=$3
if  [ &quot;$1&quot; -eq 1 ]; then
if  [ &quot;$2&quot; -eq 1 ]; then
Ydd=31
Ymm=12
Yyy=`expr $3 - 1`
return 0
else
Ymm=`expr $2 - 1`
if  [ $Ymm -eq 2 ]; then
ly $3
ADyes=$?
Ydd=`expr 28 + $ADyes`
return 0
else
Ydd=`echo $DIM | cut -f$Ymm -d' '`
return 0
fi
fi
else
Ydd=`expr $1 - 1`
fi
return 0;
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
