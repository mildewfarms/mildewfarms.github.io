<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i01: Listing 5: rst.c--reports cumulative time and downtime</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a9.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a9_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a9_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a9_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 5</span></td>
		<td><span class=navbarLink><a href="a9_l6.htm">Listing 6</a></span></td>
		<td><a href="../../../../source/SA/1996/jan96.tar"><b class=codeListing>jan96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 5: rst.c--reports cumulative time and downtime</H1><p>
<PRE>
/*
* rst - report system time.
*
* SYNOPSIS
*   /usr/local/bin/rst &lt; log_file &gt; report_file
*
* DESCRIPTION
*   Reports cumulative time and down time.
*
*   Reads a log file from standard input,  and writes a report
*   on standard output.
*
*   The input file may be clf(8L)compressed,  but need not be;
*   rst will operate on any log file, or you can enter data
*   by hand.
*/

#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

/* DEC ULTRIX	*/
#if defined(ULTRIX)
time_t mktime();
#endif

/* SunOS	*/
#if defined(SUNOS4)
time_t timelocal();
#endif

/*  epoch - number of seconds since Jan 1, 1970 00:00:00 GMT. */
time_t epoch(y, m, d, h, n, s)
int y, m, d, h, n, s;
{
struct tm t, *p;

t.tm_sec  =  s;
t.tm_min  =  n;
t.tm_hour =  h;
t.tm_mday =  d;
t.tm_mon  =  m;
t.tm_year =  y;
p = &amp;t;

/*  DEC	ULTRIX		*/
#if defined(ULTRIX)
return( mktime(p) );
#endif
/*  SunOS		*/
#if defined(SUNOS4)
return( timelocal(p) );
#endif
}

main()
{
char	*p, b[80];		/* record buffer		*/

char	tc,			/* current,			*/
tx,			/*   intermediate,		*/
tp;			/*   &amp; previous records' type	*/

float	f_uptime,		/* fraction uptime,		*/
p_uptime;		/* percent uptime		*/

int		yc,mc,dc,hc,nc,sc,	/* current, 			*/
yx,mx,dx,hx,nx,sx,	/*   intermediate,		*/
yp,mp,dp,hp,np,sp;	/*   &amp; previous records' date	*/

int		in_stat;		/* last line scan status	*/

time_t	cut,			/* cumulative uptime,		*/
cdt,			/*   cum. downtime,		*/
cst,			/*   cum. sched. downtime,	*/
ctt,			/*   cum. total time		*/
cit;			/*   current interval time	*/

time_t	ts, te,			/* epoch time start, --end	*/

ec, ep;			/*   for current, previous rec,	*/

/*  Begin.	*/

/*
*  Initialization. Read first line(s);  establish epoch start time.
*/

/*  Skip initial comments;  vet 1st records.	*/
do	{
p = (char *) 0;
if  ( (p = gets(b)) == (char *) 0 )
exit(1);	/* File devoid of anything meaningful. */
}   while ( b[0] == '#' );

if  ( b[0] != '+' )
exit(2);	/* Can't grok downtime when 1st record is [-*] */

if  ( ( in_stat = sscanf(b, &quot;%c%u%u%u%u%u%u&quot;,
&amp;tc,&amp;yc,&amp;mc,&amp;dc,&amp;hc,&amp;nc,&amp;sc
)	  ) &lt; 7  ) {
exit(3);	/* 1st non-comment record didn't parse;	*/
/* likely bad file.			*/
}/* if */

/*  Finally get start chop in epoch notation.	*/
ts = epoch( yc-1900, mc-1, dc, hc, nc, sc );
te = ts;	/* In case there's only one meaningful record.	*/
ec = ts;	/* Prime value of ec. */
printf(&quot;Start time - %2d/%2d/%2d %2d:%2d:%2d (%d)\n&quot;,
mc, dc, yc-1900, hc, nc, sc, ts );

/*
*  Read the rest of the file,  calculating the various times as we go.
*/
cut = 0; cdt = 0; cst = 0; ctt = 0; cit = 0;
while   ( (p = gets(b)) != (char *) 0 ) {
if  ( b[0] != '#' ) {

/*	    Scan buffer into intermediate record.	*/
if  ( ( in_stat = sscanf(b, &quot;%c%u%u%u%u%u%u&quot;,
&amp;tx,&amp;yx,&amp;mx,&amp;dx,&amp;hx,&amp;nx,&amp;sx
)	  	) &gt;= 7  ) {

/*		Scan succeeded.  Do righteous stuff.	*/

/*		Make current record previous record.	*/
tp = tc; yp = yc; mp = mc; dp = dc; hp = hc; np = nc; sp = sc;
ep = ec;

/*		Make intermediate record current record.	*/
tc = tx; yc = yx; mc = mx; dc = dx; hc = hx; nc = nx; sc = sx;
ec = epoch( yc-1900, mc-1, dc, hc, nc, sc );

/*		Downtime: +-[...],  +*[...];  i.e.,  if the current	*/
/*		record is a downtime record,  and the previous record	*/
/*		is anything,  the interval between them is downtime.	*/

/*		NOTE that this includes any junk that got skipped due	*/
/*		to a bogus scan.					*/
cit = ec - ep;
ctt += cit;
if  ( tc == '-' )
cdt += cit;		/* cum. unsched. down time	*/
else if  ( tc == '*' )
cst += cit;		/* cum. sched.   down time	*/
else
cut += cit;		/* cumulative up time		*/

}/* if scan succeeded */

}/* if not comment */

}/* while */

te = ec;	/* The last current record's epoch time	*/

printf(&quot;End   time - %2d/%2d/%2d %2d:%2d:%2d (%d)\n&quot;,
mc, dc, yc-1900, hc, nc, sc, te );

printf(&quot;---\n&quot;);
printf(&quot;Total time in interval (sec)  =  %8d\n&quot;, te - ts);
printf(&quot;  Check cumulative time       =  %8d\n&quot;, ctt);
printf(&quot;---\n&quot;);
printf(&quot;Up time                       =  %8d\n&quot;, cut);
printf(&quot;Unscheduled down time         =  %8d\n&quot;, cdt);
printf(&quot;Scheduled   down time         =  %8d\n&quot;, cst);

f_uptime = 1.0 - (  (float) cdt / ( (float) ( cut - cst ) )  );
p_uptime = f_uptime * 100.0;

printf(&quot;---\n&quot;);
printf(&quot;Percent uptime                =  %8.2f\n&quot;, p_uptime);

}/* main */

/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
