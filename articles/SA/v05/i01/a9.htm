<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i01:  SM2UR: Simple-Minded System Monitoring &amp; Uptime Reporting</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a9_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a9_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a9_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a9_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a9_l6.htm">Listing 6</a></span></td>
		<td><a href="../../../../source/SA/1996/jan96.tar"><b class=codeListing>jan96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>SM2UR: Simple-Minded System Monitoring &amp; Uptime Reporting</H1><p>
<P>
Bill Gray<P>

<I>[Note: The software described here was developed as
a (very, very) small
part of activities pursuant to the conduct of US DOE
contract
DEAC07-94ID13223 at the Idaho National Engineering Laboratory
(INEL).
The author is presently employed by Lockheed-Martin
Idaho Technologies,
the INEL's Managing and Operating Contractor. Opinions
expressed herein,
if indeed there are any, are solely those of the author.]</I><P>

Some time ago -- more than two years now -- we system
administrators for a
ragtag collection of UNIX workstations and servers were
told that uptime
reporting would be required, and had to be in place
in two weeks. Then a
mainframe (Cray) shop, we hadn't regarded these dwarfish
boxes as
full-fledged production systems. After all, they just
plugged in to the
wall, and were right there in the same rooms with us.
How could one take
seriously something that didn't require at least a ton
of air
conditioning? Be that as it may, we had marching orders
and a simple
requirement: a monthly report on the availability of
each production
server. Not too unreasonable, really, except maybe that
bit about two
weeks.<P>

Of course, this also required that we accept the idea
of something other
than a mainframe as a production server. Back then,
this also took some
getting used to.<P>

<B>Why make rather than buy?</B><P>

Simple. No money -- something about the shoemaker's
children. Besides,
what we ultimately did is really cheap.<P>

<B>Some Additional Requirements</B><P>

Simplicity. The various system administrators would
not tolerate further
complications in their lives. A rococo, hard to understand
and install
package would not fly; Louis XV may make for elegant
furniture, but
generally Bauhaus is better for software.<P>

Fire and forget. For the same reasons, something requiring
constant care
and feeding also would not fly; we wanted something
we could install and
essentially ignore.<P>

Apart from these two considerations, we would also like
the package to
be self-contained; i.e., without fingers into other
parts of the system,
or heavily dependent on local configuration details.<P>

<B>How It Works: An Overview</B><P>

<I>... the representation of the data or tables. This is
where the heart of
a program lies.<P>

-- Fred P. Brooks, Jr.
The Mythical Man-Month</I><P>

The idea behind our design is very straightforward:
somewhere, maintain
a &quot;heartbeat&quot; for the system; during times
when there is no heartbeat,
the system is down. Read the system up/downtime from
the EKG strip
chart, which in our case is a file. This file is also
designed to be
collapsible without loss of information, and still be
human-readable.
There is actually a collection of these files, but that's
not a concern
for now. Implementation is nearly trivial; the telling
takes more than
the doing.<P>

As I write this, the current EKG file is /var/log/D.1995.09.28.
The
first few records in it look like:<P>
<PRE>
+ 1995 09 28 00 12 02
+ 1995 09 28 00 27 01
+ 1995 09 28 00 42 01
+ 1995 09 28 00 57 00</pre><p>
<p>
These are heartbeat records, which are produced every
15 minutes, a
granularity that I arbitrarily picked as being &quot;good
enough&quot; for the
purpose. They are being emitted by the following crontab(5)
entry:<P>
<PRE>
12,27,42,57 * * * * /usr/local/etc/sysmon &gt; /dev/null 2&gt;&amp;1</pre><p>
<p>
If the system goes down, no cron, no heartbeat.<P>

In order to make these records collapsible, we (paradoxically)
use
another record that is inserted in the EKG file at boot-up:
an
&quot;incident&quot; record. It so happens that the
system crashed around 0945 on
September 18; here are the records surrounding that
event:<P>
<PRE>
+ 1995 09 18 09 12 01
- 1995 09 18 09 46 48
+ 1995 09 18 23 57 02</pre><p>
<p>
The line preceded by &quot;-&quot; records an incident;
it was put there as the
last thing done by the last multi-user start-up script
(in this case,
/etc/rc.local) by the following sh(1) commands:<P>
<PRE>
if [ -f /usr/local/etc/sysmon ]; then
/usr/local/etc/sysmon init
fi</pre><p>
<p>
These records tell us that the system was down after
9:12:01 and was
back up at 9:46:48; i.e., it was down at most 34 min.,
47 sec. 
Scheduled downtime can be recorded by editing the appropriate
boot-up
record the next day, replacing the &quot;-&quot; with
a &quot;*&quot;.<P>

From the above, you have also probably gathered that
the thing that
produces these records is called sysmon (Listing 1).
This is a fairly
simple shell script whose role in life is to format
heartbeat and
incident records and append them to the appropriate
file.<P>

<B>How It Works: Log File Naming, Collapsing, ... Details</B><P>

<I>The devil is in the details.<P>

-- Anon.</I><P>

Files are named using a scheme that makes them easy
to process and
identify. The lowest-level log is a daily one, named
according to the
pattern &quot;D.yyyy.mm.dd&quot;; today's log as I write
this is<P>
<PRE>
-rw-r--r-- 1 root 1232 Sep 29 13:57 /var/log/D.1995.09.29</pre><p><P>

Today's log is the only one touched by cron, or in other
words, is
&quot;active&quot;. We don't otherwise mess with the
active log. Since successive
heartbeats up to an incident record are redundant --
we know the thing
was alive up to the last heartbeat before an incident
-- we can collapse
a log file be removing them. Files collapsed this way
have .Y appended;
yesterday's collapsed log is<P>
<PRE>
-rw-r--r-- 1 root 44 Sep 29 01:00 /var/log/D.1995.09.28.Y</pre><p>
<p>
It was collapsed by the following crontab entry:<P>
<PRE>
0 1 * * * /usr/local/etc/cdl -r &gt; /dev/null 2&gt;&amp;1</pre><p>
<p>
cdl (&quot;collapse daily log&quot;  Listing 2) is a
shell script concocted for
the purpose. The -r flag tells cdl to remove unnecessary
logs after it
has collapsed yesterday's daily log  for example, raw
daily logs that
have already been subsumed into collapsed logs.<P>

Naturally, daily logs can be consolidated monthly, and
once all the
daily information is subsumed into the monthly, the
daily logs can be
discarded. Monthly logs are named according to the pattern
&quot;M.yyyy.mm&quot;,
or, when collapsed, &quot;M.yyyy.mm.Y&quot;. Last month's
log is<P>
<PRE>
-rw-r--r-- 1 root 1496 Sep 1 08:11 /var/log/M.1995.08</pre><p>
<p>
It was collapsed by the following crontab entry:<P>
<PRE>
11 8 1 * * /usr/local/etc/cml &gt; /dev/null 2&gt;&amp;1</pre><p>
<p>
(You can doubtless guess why it is named cml, in Listing
3.)<P>

Notice by the sizes that none of these logs, especially
when collapsed
and consolidated, ever gets very big, unless the system
crashes a lot.<P>

In a similar vein, a yearly log is named according to
the pattern
&quot;Y.yyyy&quot;, or, when collapsed, &quot;Y.yyyy.Y&quot;.
Presently, we don't keep
yearly logs.<P>

<B>Reporting</B><P>

<I>None love the bearer of bad news.<P>

-- Sophocles</I><P>

Perhaps, in light of Sophocles' dictum, it is a bad
idea to automate the
process of reporting news, which, unless it reads &quot;100%
uptime,&quot; is in
itself bad. Be that as it may, we are required to report
uptime monthly.
For this purpose, there is a sh(1) script, rmu (you
guessed it, &quot;report
monthly uptime&quot;  in Listing 4). It is called by
the following crontab
entry:<P>
<PRE>
27 8 1 * * /usr/local/etc/rmu -r &gt; /dev/null 2&gt;&amp;1</pre><p>
<p>
In the only concession to medium-tech -- there is no
high-tech -- in the
entire package, rmu calls a C program, rst.c (&quot;report
system time&quot;  in
Listing 5), to actually analyze the log and report uptime.
rst can
report using any uptime log over any time period; it
is rmu's job to
feed it data for a particular month, by default last
month. So it is
called, here at 0827 on the first of every month, to
report last month's
uptime. The -r option has the same sense as for the
cdl script.<P>

The following is an actual rmu/rst report. The scheduled
downtime was
from a full-day scheduled building power outage; it
was entered by
editing the log file and replacing the boot-up &quot;-&quot;
init heartbeat record
flag with a &quot;*&quot;.<P>
<PRE>
From root@myhostname Sat Jul  1 08:32:07 1995
Return-Path: &lt;...&gt;
...
Date: Sat, 1 Jul 95 08:27:05 MDT
From: root@myhostname (Operator)
Message-Id: &lt;...&gt;
To:  [...]
Subject: &quot;Uptime Report from myhostname&quot;
Status: R
Start time -  6/ 1/95   0:12: 4 (801987124)
Endtime -     6/30/95  23:57: 1 (804578221)
---
Total time in interval (sec)  =   2591097
Check cumulative time       =   2591097
---
Up time                       =   2553695
Unscheduled down time         =      4046
Scheduled down time           =     33356
---
Percent uptime                =     99.84</pre><p>
<p>
The big numbers in parenthesis by the start and end
times are the
corresponding UNIX epoch times, that is, the number
of seconds
00:00:00Z, January 1, 1970. The total time is calculated
from these two.
The &quot;[c]heck cumulative time&quot; is a running
total kept by the rst
program; it must equal the total interval time, or something
has gone
wrong.<P>

<B>Some Remarks about the Package</B><P>

SM2UR is mainly a collection of scripts, each of which
is documented
with man(1)-style comments at the very start; for example,
the make(1)
file starts with<P>
<PRE>
# SM2UR - Simple Minded System Monitor and Uptime Reporter.
#
# SYNOPSIS
#    make [ all | install | clean | wipe | &lt;trgts&gt; ]
...</pre><p>
<p>
I believe that this makes the documentation much more
likely to be
modified appropriately along with the code than is the
case with man
pages in separate files. The intention was to provide
an extraction
utility that would build real man pages as part of the
installation
process, but that remains to be implemented. Nevertheless,
the
information is still there, and it is current with the
code. An
inventory of the package follows:<P>

<B>C programs</B><P>

rst(8): report system time. Passes over a log file in
the format
maintained by sysmon(8) and reports uptime.<P>

<B>Sh(1) scripts</B><P>

cdl(8): collapse daily log(s). Uses clf to collapse
all inactive daily
logs in a log directory.<P>

clf(8) (Listing 6): collapse log file. Removes redundant
consecutive
heartbeats from a log file.<P>

cml(8): collapse monthly log(s). Collapses daily logs
for a month into a
single log associated with that month.<P>

rmu(8): report monthly uptime. Calls rst to report uptime
for a given
month.<P>

sysmon(8): Maintains downtime/heartbeat/incident logs
for calculating
availability. Normally called from cron(8) and initially
from a system
startup file such as /etc/rc.local.<P>

For information on access to the source code, please
contact Bill Gray
at whg@INEL.GOV.<P>




<P>


<H1>About the Author</H1><p>
<P>
Bill Gray is a programmer and system administrator
at the Idaho National
Engineering Laboratory, operated for the Department
of Energy by
Lockheed Martin Corp.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
