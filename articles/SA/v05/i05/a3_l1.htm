<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i05: Listing 1: Complete perl program of UUCP hosts</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a3_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a3_l7.htm">Listing 7</a></span></td>
		<td><span class=navbarLink><a href="a3_l8.htm">Listing 8</a></span></td>
		<td><a href="../../../../source/SA/1996/may96.tar"><b class=codeListing>may96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Complete perl program of UUCP hosts</H1><p>
<PRE>
#!/usr/local/bin/perl

#
# Maintain network configuration
#
# Program can be called as maintsite.uucp for UUCP maintenance
# Program can be called as maintsite.lan for LAN maintenance
#
# This program is copyright 1995,1996 Arthur Donkers
#
#    Le Reseau netwerksystemen BV
#    Burg. F. v. Ankenweg 5
#    NL-9991 AM Middelstum
#    The Netherlands
#    arthur@reseau.nl
#
# DISCLAIMER : user this program at your own risk, any loss of data is your
# problem, not mine !!
#

#$trigger  = &quot;/etc/maintsite.&quot;;
#$newsconf = &quot;/usr/local/lib/news/sys&quot;;
#$passwd   = &quot;/etc/passwd&quot;;
#$group    = &quot;/etc/group&quot;;
$trigger = &quot;testsite.&quot;;
$newsconf = &quot;newssys&quot;;
$passwd   = &quot;passwd&quot;;
$group    = &quot;group&quot;;

# UUCP related config files
#$pending = &quot;/etc/pending.uucp&quot;;
#$uuconf  = &quot;/usr/local/lib/uucp/conf/sys&quot;;
#$nwsbat  = &quot;/usr/local/lib/news/batchparms&quot;;
#$mailnam = &quot;/etc/mail/sendmail.uunames&quot;;
$pending = &quot;pending.uucp&quot;;
$uuconf  = &quot;uucpsys&quot;;
$nwsbat  = &quot;batchparms&quot;;
$mailnam = &quot;sendmail.uunames&quot;;
$uustat  = &quot;/usr/bin/uustat&quot;;

# LAN related config files
$newsnntp = &quot;/usr/local/lib/news/nntp_access&quot;;
$namedfwd = &quot;/etc/inet/named.reseau.data&quot;;
$namedrev = &quot;/etc/inet/named.rev.data&quot;;

# Globals
$config = &quot;&quot;;

# List of systems to add and delete
%add    = ();
%delete = ();

# Program starts executing here
die &quot;Must be called as LAN or UUCP&quot; if( &amp;callconfig() eq &quot;&quot;);

# See how we are called and behave appropriately
if( $config eq 'uucp' ) {
&amp;dopending( $pending ) if( -e pending);
&amp;douucp( &quot;$trigger&quot; . &quot;$config&quot; ) if( -e &quot;$trigger&quot; . &quot;$config&quot;
);
}
else {
&amp;dolan( &quot;$trigger&quot; . &quot;$config&quot; ) if( -e &quot;$trigger&quot; . &quot;$config&quot;
);
}
exit 0;

# End of execution
#
# Subroutines are listed below

# What are we called ?
sub	callconfig
{
$config = &quot;&quot;;
if ($0 =~ /.*\maintsite.uucp$/) {$config = 'uucp';}
elsif ($0 =~ /.*\maintsite.lan$/) {$config = 'lan';}
return $config;
} # callconfig

# The UUCP main entry point
sub	douucp
{
local( $trigger ) = @_;
local( $busy, $sysnam );

$busy = $trigger . &quot;.busy&quot;;
link $trigger, $busy || warn &quot;Cannot rename $trigger, $!\n&quot; &amp;&amp; return;
unlink $trigger;
open TRIGGER, &quot;$busy&quot; || warn &quot;Cannot open $trigger, $!\n&quot; &amp;&amp; unlink $busy
&amp;&amp; return;

while( &lt;TRIGGER&gt; ) {
chomp;
if( /^\+.*/ ) {
$sysnam = substr $_, 1;
$add{$sysnam} = 1;
}
if( /^\-.*/ ) {
$sysnam = substr $_, 1;
$delete{$sysnam} = 1;
}
}
close TRIGGER;
unlink $busy;

# We got a list of hosts to be added and hosts to be deleted
# First delete all hosts
&amp;deluucpmailnews( );
foreach $sysnam (keys %delete) {
if( !&amp;uucpbatch( $sysnam ) ) {
&amp;deluucp( $sysnam );
}
else {
if( -e $pendfile ) { open PENDING, &quot;&gt;&gt;$pendfile&quot;; }
else { open PENDING, &quot;&gt;$pendfile&quot;; }
print PENDING &quot;$sysnam\t24\n&quot;;
close PENDING;
}
}
@_ = keys %delete;
if( $#_ &gt; 0 ) {
&amp;notifyuucp( &quot;deleted&quot;, keys %delete );
}

# Now add new hosts
&amp;adduucp( );
&amp;adduucpmailnews( );
@_ = keys %add;
if( $#_ &gt; 0 ) {
&amp;notifyuucp( &quot;added&quot;, keys %add );
}
} # douucp

# The LAN main entry point
sub	dolan
{
local( $trigger ) = @_;
local( $busy, $sysnam, $address );

$busy = $trigger . &quot;.busy&quot;;
link $trigger, $busy || warn &quot;Cannot rename $trigger, $!\n&quot; &amp;&amp; return;
unlink $trigger;
open TRIGGER, &quot;$busy&quot; || warn &quot;Cannot open $trigger, $!\n&quot; &amp;&amp; unlink $busy
&amp;&amp; return;

while( &lt;TRIGGER&gt; ) {
chomp;
if( /^\+.*/ ) {
($sysnam, $address) = split /\s/;
$sysnam = substr $sysnam, 1;
$add{$sysnam} = $address;
}
if( /^\-.*/ ) {
$sysnam = substr $_, 1;
$delete{$sysnam} = 1;
}
}
close TRIGGER;
unlink $busy;

# We got a list of hosts to be added and hosts to be deleted
# First delete all hosts
&amp;delnewslan( );
&amp;delnamed( );
@_ = keys %delete;
if( $#_ &gt; 0 ) {
&amp;notifylan( &quot;deleted&quot;, keys %delete );
}

# Now add new hosts
&amp;addnamed( );
&amp;addnewslan( );
@_ = keys %add;
if( $#_ &gt; 0 ) {
&amp;notifylan( &quot;added&quot;, keys %add );
}

# Kick the named
&amp;kicknamed( );
} # dolan

# Check the pending file for pending UUCP systems applicable for deletion
sub	dopending
{
local( $pendfile ) = @_;
local( $oldpendfile, $sysnam, $retry, $total, @deleted );

$oldpendfile = $pendfile . &quot;.old&quot;;
link $pendfile, $oldpendfile;
unlink $pendfile;
$total = 0;

# There is a pending file, read it
open PENDING, &quot;$oldpendfile&quot; || warn &quot;Cannot open file $oldpendfile, $!\n&quot;
&amp;&amp; return;
open NEWPENDING, &quot;&gt;$pendfile&quot; || warn &quot;Cannot create file $pendfile, $!\n&quot;
&amp;&amp; link $oldpendfile, $pendfile &amp;&amp; unlink $oldpendfile;

# Read host names from pending file
while( &lt;PENDING&gt; ) {
($sysnam, $retry) = split /\s/;
$retry--;
if( $retry == 0 ) {
&amp;deluucp( $sysnam );
push @deleted, $sysnam;
}
else {
if( &amp;uucpbatch( $sysnam ) ) {
print NEWPENDING &quot;$sysnam\t$retry\n&quot;;
$total++;
}
else {
&amp;deluucp( $sysnam );
push @deleted, $sysnam;
}
}
}
close PENDING;
close NEWPENDING;
unlink $oldpendfile;

unlink $pendfile if( $total == 0 );
&amp;notifyuucp( &quot;deleted&quot;, @deleted );
} # dopending

# Check system for pending batches
sub	uucpbatch
{
local( $sysnam ) = @_;

open UUSTAT, &quot;$uustat -s $sysnam|&quot; || warn &quot;Cannot start $uustat, $!\n&quot; &amp;&amp;
return 1;

while( &lt;UUSTAT&gt; ) {
close UUSTAT;
return 1;
}
close UUSTAT;
return 0;
} # uucpbatch

# Delete one UUCP host from uucp configuration
sub	deluucp
{
local( $deleteme ) = @_;
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $uuconf );
$backup = $uuconf . &quot;.o&quot;;

open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $uuconf, $!\n&quot; &amp;&amp; link
$backup, $uuconf
&amp;&amp; return;     open NEW, &quot;&gt;$uuconf&quot; || warn &quot;Cannot
creat $uuconf, $!\n&quot; &amp;&amp; link $backup,
$uuconf &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^\#START .*$/ ) {
chomp;
$sysnam = $_;
$sysnam =~ s/^\#START //;
if( $sysnam eq $deleteme ) {
while( &lt;ORIGINAL&gt; ) {
last if (/^\#END .*$/);
}
}
else {
print NEW;
while( &lt;ORIGINAL&gt; ) {
print NEW;
last if ( /^\#END .*$/);
}
}
}
else {print NEW;}
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $uuconf );
&amp;deluser( $deleteme );
} # deluucp

# Add UUCP host to uucp configuration
sub	adduucp
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $uuconf );
$backup = $uuconf . &quot;.o&quot;;

open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $uuconf, $!\n&quot; &amp;&amp; link
$backup, $uuconf &amp;&amp; return;
open NEW, &quot;&gt;$uuconf&quot; || warn &quot;Cannot creat $uuconf, $!\n&quot; &amp;&amp; link
$backup, $uuconf &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &lt;&lt;EOF

#START $sysnam
system $sysnam
time Never
baud 38400
port Direct
phone &quot;&quot;
called-login uu$sysnam
send-request yes
receive-request yes
called-transfer yes
remote-send /usr/spool/uucppublic /usr/spool/news
local-receive /
remote-receive /usr/spool/uucppublic /usr/spool/news
commands /bin/rmail /usr/local/lib/news/bin/rnews
myname lrngate
#END $sysnam
EOF
;
&amp;adduser( $sysnam );
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $uuconf );
} # adduucp

# Notify root of succesful action for UUCP
sub	notifyuucp
{
local( $action, @hostlist ) = @_;

open MAILTO, &quot;|mail root&quot; || warn &quot;Cannot start mail program, $!\n&quot; &amp;&amp;
return;
print MAILTO &lt;&lt;EOF
Subject: UUCP hosts $action.

The following UUCP hosts have been $action :

@hostlist

EOF
;
} # notifyuucp

# Notify root of succesful action for LAN
sub	notifylan
{
local( $action, @hostlist ) = @_;

open MAILTO, &quot;|mail root&quot; || warn &quot;Cannot start mail program, $!\n&quot; &amp;&amp;
return;
print MAILTO &lt;&lt;EOF
Subject: LAN hosts $action.

The following LAN hosts have been $action :

@hostlist
EOF
;
} # notifylan

# Delete host from news config for LAN
sub	delnewslan
{
# First the nntp access
&amp;delnntp( );
# secondly the sys file
&amp;delnews( );
} # delnewslan

# Add host to news config for LAN
sub	addnewslan
{
# First the nntp access
&amp;addnntp( );
# secondly the sys file
&amp;addnews( );
} # addnewslan

# Delete host from news and news config for UUCP
sub	deluucpmailnews
{
# First the batch params
&amp;delbatch( );
# Secondly the mail setup
&amp;delmail( );
# Lastly the sys file
&amp;delnews( );
} # deluucpmailnews

# Add host to news config for UUCP
sub	adduucpmailnews
{
# First the batch params
&amp;addbatch( );
# Secondly the mail setup
&amp;addmail( );
# Lastly the sys file
&amp;addnews( );
} # adduucpmailnews

# Backup a file
sub	backupfile
{
local( $file ) = @_;
local( $backup );

# Back up older versions
$backup = &quot;$file&quot; . &quot;.ooo&quot;;
unlink $backup if( -e $backup );
$backup = &quot;$file&quot; . &quot;.oo&quot;;
rename $backup, &quot;$backup&quot; . &quot;o&quot; if( -e $backup );
$backup = &quot;$file&quot; . &quot;.o&quot;;
rename $backup, &quot;$backup&quot; . &quot;o&quot; if( -e $backup );
rename $file, $backup;
} # backupfile

# Set permissions on new file as they were on the old one
sub	setperm
{
local( $new, $old );

($dummy, $dummy, $mode, $dummy, $uid, $gid, $dummy) = stat $old;
chown $uid, $gid, $new;
chmod $mode, $new;
} # setperm

# Delete all hosts from newsconfig
sub	delnews
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $newsconf );
$backup = $newsconf . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $newsconf, $!\n&quot; &amp;&amp; link
$backup, $newsconf &amp;&amp; return;
open NEW, &quot;&gt;$newsconf&quot; || warn &quot;Cannot creat $newsconf, $!\n&quot; &amp;&amp; link
$backup, $newsconf &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
($sysnam, $dummy) = split /:/, $_, 2;
if (!exists $delete{$sysnam}) {
print NEW;
}
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $newsconf );
} # delnews

# Delete all hosts from nntpconfig
sub	delnntp
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $newsnntp );
$backup = $newsconf . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $newsnntp, $!\n&quot; &amp;&amp; link
$backup, $newsnntp &amp;&amp; return;
open NEW, &quot;&gt;$newsnntp&quot; || warn &quot;Cannot creat $newsnntp, $!\n&quot; &amp;&amp; link
$backup, $newsnntp &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^#/ || /^\s*$/ ) {
print NEW;
next;
}
$sysnam = $_;
$sysnam =~ s/^([^\.]+)\..*/\1/;
chomp $sysnam;
print NEW if (!exists $delete{$sysnam});
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $newsnntp );
} # delnntp

# Delete all hosts from named
sub	delnamed
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# First the forward mapping
# Back up older versions
&amp;backupfile( $namedfwd );
$backup = $namedfwd . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $namedfwd, $!\n&quot; &amp;&amp; link
$backup, $namedfwd &amp;&amp; return;
open NEW, &quot;&gt;$namedfwd&quot; || warn &quot;Cannot creat $namedfwd, $!\n&quot; &amp;&amp; link
$backup, $namedfwd &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^;/ ) {
print NEW;
next;
}
($sysnam, $dummy) = split /\s/;
print NEW if( !exists $delete{$sysnam} );
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $namedfwd );

# Secondly the reverse mapping
# Back up older versions
&amp;backupfile( $namedrev );
$backup = $namedrev . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $namedrev, $!\n&quot; &amp;&amp; link
$backup, $namedrev &amp;&amp; return;
open NEW, &quot;&gt;$namedrev&quot; || warn &quot;Cannot creat $namedrev, $!\n&quot; &amp;&amp; link
$backup, $namedrev &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^;/ ) {
print NEW;
next;
}
($dummy, $dummy, $sysnam) = split /\s+/;
$sysnam =~ s/^([^\.]*).*/\1/;
print NEW if( !exists $delete{$sysnam} );
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $namedrev );
} # delnamed

# Add all hosts to newsconfig
sub	addnews
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $newsconf );
$backup = $newsconf . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $newsconf, $!\n&quot; &amp;&amp; link
$backup, $newsconf &amp;&amp; return;
open NEW, &quot;&gt;$newsconf&quot; || warn &quot;Cannot creat $newsconf, $!\n&quot; &amp;&amp; link
$backup, $newsconf &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &lt;&lt;EOF
$sysnam:news,misc,comp,eunet,hacktic,nl,nlnet,reseau,to.$sysnam/all,!general:f:$sysnam/togo
EOF
;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $newsconf );
} # addnews

# Add all hosts to nntpconfig
sub	addnntp
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $newsnntp );
$backup = $newsnntp . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $newsnntp, $!\n&quot; &amp;&amp; link
$backup, $newsnntp &amp;&amp; return;
open NEW, &quot;&gt;$newsnntp&quot; || warn &quot;Cannot creat $newsnntp, $!\n&quot; &amp;&amp; link
$backup, $newsnntp &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &lt;&lt;EOF
$sysnam.reseau.nl        both            post
EOF
;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $newsnntp );
} # addnntp

# Add all hosts to named
sub	addnamed
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# First the forward mapping
# Back up older versions
&amp;backupfile( $namedfwd );
$backup = $namedfwd . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $namedfwd, $!\n&quot; &amp;&amp; link
$backup, $namedfwd &amp;&amp; return;
open NEW, &quot;&gt;$namedfwd&quot; || warn &quot;Cannot creat $namedfwd, $!\n&quot; &amp;&amp; link
$backup, $namedfwd &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &lt;&lt;EOF
$sysnam	IN	A	$add{$sysnam}
EOF
;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $namedfwd );

# Secondly the reverse mapping
# Back up older versions
&amp;backupfile( $namedrev );
$backup = $namedrev . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $namedrev, $!\n&quot; &amp;&amp; link
$backup, $namedrev &amp;&amp; return;
open NEW, &quot;&gt;$namedrev&quot; || warn &quot;Cannot creat $namedrev, $!\n&quot; &amp;&amp; link
$backup, $namedrev &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
local( $hostnum, $fullname);

$fullname = $sysnam . &quot;.reseau.nl.&quot;;
$hostnum = $add{$sysnam};
$hostnum =~ s/^.*\.([0-9]+)$/\1/;
print NEW &lt;&lt;EOF
$hostnum	PTR	$fullname
EOF
;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $namedrev );
} # addnamed

sub	kicknamed
{
open PID, &quot;/etc/named.pid&quot;;
$pid = &lt;PID&gt;;
kill SIGHUP, $pid;
} # kicknamed

# Delete all hosts from batchparms
sub	delbatch
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $nwsbat );
$backup = $nwsbat . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $nwsbat, $!\n&quot; &amp;&amp; link
$backup, $nwsbat &amp;&amp; return;
open NEW, &quot;&gt;$nwsbat&quot; || warn &quot;Cannot creat $nwsbat, $!\n&quot; &amp;&amp; link
$backup, $nwsbat &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^#/ || /^\s*$/ ) {
print NEW;
next;
}
($sysnam, $dummy) = split /\s/;
print NEW if (!exists $delete{$sysnam});
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $nwsbat );
} # delbatch

# Add all hosts to batchparms
sub	addbatch
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $nwsbat );
$backup = $nwsbat . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $nwsbat, $!\n&quot; &amp;&amp; link
$backup, $nwsbat &amp;&amp; return;
open NEW, &quot;&gt;$nwsbat&quot; || warn &quot;Cannot creat $nwsbat, $!\n&quot; &amp;&amp; link
$backup, $nwsbat &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &lt;&lt;EOF
$sysnam	u	100000	20	batcher
| compcun | viauux
EOF
;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $nwsbat );
} # addbatch

# Delete all hosts from sendmail.uunames
sub	delmail
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $mailnam );
$backup = $mailnam . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $mailnam, $!\n&quot; &amp;&amp; link
$backup, $mailnam &amp;&amp; return;
open NEW, &quot;&gt;$mailnam&quot; || warn &quot;Cannot creat $mailnam, $!\n&quot; &amp;&amp; link
$backup, $mailnam &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {
if( /^#/ || /^\s*$/ ) {
print NEW;
next;
}
chomp;
print NEW if (!exists $delete{$_});
}
close ORIGINAL;
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $mailnam );
} # delmail

# Add all hosts to sendmail.uunames
sub	addmail
{
local( $sysnam, $backup, $dummy );
local( $uid, $gid, $mode );

# Back up older versions
&amp;backupfile( $mailnam );
$backup = $mailnam . &quot;.o&quot;;
open ORIGINAL, &quot;$backup&quot; || warn &quot;Cannot open $mailnam, $!\n&quot; &amp;&amp; link
$backup, $mailnam &amp;&amp; return;
open NEW, &quot;&gt;$mailnam&quot; || warn &quot;Cannot creat $mailnam, $!\n&quot; &amp;&amp; link
$backup, $mailnam &amp;&amp; return;

while( &lt;ORIGINAL&gt; ) {print NEW &quot;$_\n&quot;;}
close ORIGINAL;

foreach $sysnam (keys %add) {
print NEW &quot;$sysnam\n&quot;;
}
close NEW;
# Set ownership and permissions
&amp;setperm( $backup, $mailnam );
} # addmail

# Delete a user from the passwd and group file
sub	deluser
{
local( $usrnam ) = @_;
local( $nwfile );

$usrnam = &quot;uu&quot; . $usrnam;

# from the group file
$nwfile  = $group . &quot;.new&quot;;
open OLD, &quot;$group&quot; || warn &quot;Cannot open $group, $!\n&quot; &amp;&amp; return;
open NEW, &quot;&gt;$nwfile&quot; || warn &quot;Cannot creat $nwfile, $!\n&quot; &amp;&amp; close OLD
&amp;&amp; return;
while( &lt;OLD&gt; ) {
if( /^uucp/ ) {
s/,$usrnam//;
}
print NEW;
}
close OLD;
close NEW;
rename $group, $group . &quot;.old&quot;;
rename $nwfile, $group;
&amp;setperm( $group . &quot;.old&quot;, $nwfile );

# from the passwd file
$nwfile  = $passwd . &quot;.new&quot;;
open OLD, &quot;$passwd&quot; || warn &quot;Cannot open $passwd, $!\n&quot; &amp;&amp; return;
open NEW, &quot;&gt;$nwfile&quot; || warn &quot;Cannot creat $nwfile, $!\n&quot; &amp;&amp; close OLD
&amp;&amp; return;
while( &lt;OLD&gt; ) {
if( /^$usrnam/ ) {
next;
}
print NEW;
}
close OLD;
close NEW;
rename $passwd, $passwd . &quot;.old&quot;;
rename $nwfile, $passwd;
&amp;setperm( $passwd . &quot;.old&quot;, $nwfile );
} # deluser

# Add a user to the passwd and group file
sub	adduser
{
local( $usrnam ) = @_;
local( $gid, $uid, $nuid, $dummy, @uids );

$usrnam = &quot;uu&quot; . $usrnam;

# to the group file
$nwfile  = $group . &quot;.new&quot;;
open OLD, &quot;$group&quot; || warn &quot;Cannot open $group, $!\n&quot; &amp;&amp; return;
open NEW, &quot;&gt;$nwfile&quot; || warn &quot;Cannot creat $nwfile, $!\n&quot; &amp;&amp; close OLD
&amp;&amp; return;
while( &lt;OLD&gt; ) {
if( /^uucp/ ) {
chomp;
$_ .= &quot;,$usrnam\n&quot;;
}
print NEW;
}
close OLD;
close NEW;
rename $group, $group . &quot;.old&quot;;
rename $nwfile, $group;
&amp;setperm( $group . &quot;.old&quot;, $nwfile );

# to the passwd file
# find the gid of uucp
($dummy, $dummy, $gid, $dummy) = getgrnam( &quot;uucp&quot; );

# find a free uid
setpwent;
while( ($dummy, $dummy, $uid, $dummy) = getpwent ) {
push @uids, $uid;
}
endpwent;
@uids = sort numeric @uids;
$uid = shift @uids;
while( $#uids ) {
$nuid = shift @uids;
if( $nuid != $uid + 1 ) {
$uid++;
last;
}
$uid = $nuid;
}

$nwfile  = $passwd . &quot;.new&quot;;
open OLD, &quot;$passwd&quot; || warn &quot;Cannot open $passwd, $!\n&quot; &amp;&amp; return;
open NEW, &quot;&gt;$nwfile&quot; || warn &quot;Cannot creat $nwfile, $!\n&quot; &amp;&amp; close OLD
&amp;&amp; return;
while( &lt;OLD&gt; ) {
print NEW;
}
close OLD;
print NEW &quot;$usrnam:*:$uid:$gid:Dial in UUCP account for
$sysnam:/usr/spool/uucppublic:/usr/local/lib/uucp/uucico\n&quot;;
close NEW;
rename $passwd, $passwd . &quot;.old&quot;;
rename $nwfile, $passwd;
&amp;setperm( $passwd . &quot;.old&quot;, $nwfile );

} # adduser

sub	numeric
{
$a &lt;=&gt; $b;
}
# End of program
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
