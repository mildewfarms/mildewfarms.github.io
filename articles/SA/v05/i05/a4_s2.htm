<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i05:  Sidebar: The TAP Protocol</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_s1.htm">Sidebar 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Sidebar 2</span></td>
		<td><a href="../../../../source/SA/1996/may96.tar"><b class=codeListing>may96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: The TAP Protocol</H1><p>
<P>
The protocol used by alphanumeric pagers is called
TAP (Telocator
Alpha-Paging Protocol). It's the industry-standard version
of IXO's and
Motorola's PET protocols. The protocol includes a few
variations (e.g.,
a version for manual use); this sidebar presents only
the details of TAP
that are necessary to understand the implementation
of ASAP.<P>

The modem parameters for using TAP are 7 data bits,
even parity, and one
stop bit (7E1). The protocol guarantees 300 baud, but
many providers
seem to accept speeds as high as 1200 baud.<P>

Upon connecting to the provider's modem, the TAP sending
application
should send up to three &lt;CR&gt;'s separated by two
seconds until the paging
provider (hereafter referred to as the terminal) responds
with ID=.
After the paging terminal comes back with ID=, you send
&lt;ESC&gt;PG1&lt;CR&gt;,
and dialogue proceeds as diagrammed below. Note that
while all terminal
responses from this point may contain an optional message,
the responses
ideally are only acknowledgments (that is, &lt;CR&gt;&lt;ACK&gt;&lt;CR&gt;).<P>
<PRE>
Sending Application         Terminal
&lt;ESC&gt;PG1&lt;CR&gt;  ====&gt;    Initiate dialogue
&lt;====   &lt;CR&gt;&lt;ACK&gt;&lt;CR&gt; Logon accepted, or
&lt;CR&gt;&lt;NAK&gt;&lt;CR&gt; Requested again, or
&lt;CR&gt;&lt;ESC&gt;&lt;EOT&gt;&lt;CR&gt;  Forced disconnect
&lt;====   &lt;ESC&gt; [p &lt;CR&gt;
&lt;STX&gt;Field1&lt;CR&gt;Field2&lt;CR&gt;&lt;ETX&gt;CheckSum&lt;CR&gt;
====&gt;
&lt;====  &lt;CR&gt;&lt;ACK&gt;&lt;CR&gt;  OK, send next block, or
&lt;CR&gt;&lt;NAK&gt;&lt;CR&gt; Checksum, or
transmission error,
send last block
again, or
&lt;CR&gt;&lt;RS&gt;&lt;CR&gt;  Abandon current
transaction and go to
next, or
&lt;CR&gt;&lt;ESC&gt;&lt;EOT&gt;&lt;CR&gt; begin disconnect.


&lt;EOT&gt;&lt;CR&gt;   ====&gt;    No more transactions, sent after
the &lt;ACK&gt; or &lt;RS&gt; response.</pre><p>
<p>
Where Field1 is the PIN and Field2 is the first message
block (up to 230
characters, depending on the service).<P>

The checksum is computed by performing the simple arithmetic
sum of the
7-bit values of all characters preceding it in that
block (including the
&lt;STX&gt; and &lt;ETX&gt;). The checksum is then the
12 least significant bits
(LSBs) of this resulting sum. (The checksum is transmitted
as three
printable ASCII characters having values between 30h
and 3Fh (the hex
numbers are represented as 0123456789:;&lt;=&gt;?).
The four LSBs of the sum
are encoded as the four LSBs of the third character.
The following shows
an example that uses a three-digit PIN:<P>
<PRE>
&lt;STX&gt;123&lt;CR&gt;ABC&lt;CR&gt;&lt;ETX&gt;17;&lt;CR&gt;

Field1  Field2    Checksum</pre><p>
<p>
Viewed another way:<P>
<PRE>
STX          0000       0010
1            0011       0001
2            0011       0010
3            0011       0011
CR           0000       1101
A            0100       0001
B            0100       0010
C            0100       0011
CR           0000       1101
ETX          0000       0011

10111       1011
1            0111       1011

HEX $1         $7         $B
ASCII 31(1)  37(7)      3B(;)</pre><p>
<p>
Resulting in a checksum transmitted as the ASCII characters:<P>
<PRE>
17;</pre><p>
<p>
Again, to compute the 3 checksum characters to transmit,
take the 12
LSBs of the checksum and transmit 4 bits at a time in
a byte, where the
upper 4 bits are always 3, thereby, making the character
transmitted
ASCII format.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
