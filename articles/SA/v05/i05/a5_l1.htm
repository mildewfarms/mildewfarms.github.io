<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i05: Listing 1: Source code for SelectNews.pl </title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a5_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a5_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1996/may96.tar"><b class=codeListing>may96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Source code for SelectNews.pl </H1><p>
<PRE>
#!/usr/local/bin/perl

# /u1/perl/SelectNews.pl		2 feb 1996

# @(#) SelectNews.pl shows the user news based on who the user is.
#      It's not meant to replace the Unix news command, but rather
#      to be run in addition to it.

# Associated files:
#    1. /etc/SelectNews has lines of the form
#	    directory user user user ...
#       where directory is where the news for this group of users is kept
#       and user is a Perl regular expression for a class of
#       user login names. For example,
#	  /u1/SelectNews/Operators       ^O[0-9][0-9]$    ^ajd$
#           /u1/SelectNews/Programmers  ^P[0-9][0-9]$     ^ajd$
#       says show user ajd and users like O12 and O34 the news in
#	/u1/SelectNews/Operators, and show user ajd and users like P34
#	and P95 the news in /u1/SelectNews/Programmers.
#       (note: the same user can appear on multiple lines.)
#    2. Each user gets a file named .SelectNews.pl in their home directory.
#       (If it doesn't already exist, SelectNews.pl creates it.) The file
#       is used to record the time the news was last displayed by SelectNews.pl

# Note: /etc/SelectNews uses Perl regular expressions, not Shell regular
#       expressions!

# Author: Art D'Adamo, dadamo@voicenet.com,
#         BISYS Plan Services (215)-542-2522
#         Look for corrections/updated versions at
#         http://www.voicenet.com/~dadamo

# Set the display commands. This version uses 'pg'. Systems that don't
# have 'pg' may need to use 'more'
$DisplayCmd = &quot;/usr/bin/pg -p \&quot;pg: q to exit &gt; \&quot; &quot;;

&amp;Initialize;

$LoginName = &amp;GetLoginName;  # gets user's login name

$BaseTime = &amp;GetBaseTime;   # get base time from this user's
# .SelectNews.pl

&amp;SetNewsDirs;  # make list of news directory(s) for this user

# make list of news files to be displayed
foreach $Dir ( @NewsDir ) { &amp;MakeDisplayFile( $Dir ); }

&amp;ShowDisplayFile;  # display the news

&amp;UpdateDotFileTime;   # update $DotFile time

exit;

#------------------------------- functions --------------------------------
sub Initialize {
$RealUID = $&lt;;	# get user's real UID
$HomeDir = $ENV{&quot;HOME&quot;};
$DotFile = $HomeDir . &quot;/&quot; . &quot;.SelectNews.pl&quot;; # has time of last news showing
$TimeOfDay = $^T;
# print &quot; - UID: $RealUID, dir: $HomeDir, dot: $DotFile, time: $TimeOfDay\n&quot;;
$ClearCmd = &quot;/usr/bin/clear&quot;;
$Date = `/bin/date \&quot;+%A, %d %b %Y\&quot;`;  chop($Date);
$Host1 = `/bin/uname -a`;  ($p0,$Host) = split(/ +/,$Host1);
$DirUserList = &quot;/etc/SelectNews&quot;;  # system-wide list of users &amp; news dirs.
$Pid = getppid;  $DisplayFile = &quot;/tmp/SelectNews.pl.$Pid&quot;;
system(&quot;/bin/rm -f $DisplayFile&quot;);
$ShowDisplayFile = 0;
1;  # set return value
}

sub GetLoginName {
# get and return login name of this real UID
local($LogName);   $LogName = &quot;&quot;;  local($NotFound);  $NotFound = 1;
open(PASSWD, &quot;/etc/passwd&quot;) || die &quot; - Can't open /etc/passwd&quot;;
while( ($Line = &lt;PASSWD&gt;) &amp;&amp; $NotFound ) {
chop;   ($login,$passwd,$uid) = split(/:/,$Line);
# printf &quot;RealUID: $RealUID, login: $login, passwd: $passwd, uid: $uid\n&quot;;
if( $RealUID eq $uid ) { $LogName = $login; $NotFound = 0; }
}
close(PASSWD);
if( &quot;&quot; eq $LogName ) { die &quot; - Can't determine login name&quot;; }
# printf &quot; - LoginName: [$LogName]\n&quot;;
$LogName;  # set return value
}

sub GetBaseTime {
# get base time
local($RetVal);
# create .SelectNews.pl if necessary.
unless ( -e $DotFile ) {
$Cmd = &quot;/bin/touch -t 197001010101 $DotFile&quot;;
system($Cmd) &amp;&amp; die &quot;(1) Command [$Cmd] failed.&quot;;
# print &quot; - created $DotFile\n&quot;;
}
# get base time from this user's .SelectNews.pl
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
$atime,$mtime,$ctime,$blksize,$blocks) = stat($DotFile);
$RetVal = $atime;   # print &quot; - BaseTime: $RetVal []\n&quot;;
$RetVal;  # set return value
}

sub SetNewsDirs {
# make list of all news directory(s) for this user
open(DUL,$DirUserList) ||
die &quot; - SelectNews.pl fatal error: Couldn't open [$DirUserList]&quot;;
@NewsDir = &quot;&quot;;   $NewsDirCount = 0;
while( &lt;DUL&gt; ) {
@Line = split(/\s+/,$_);  # printf &quot;[@Line]\n&quot;;
$Dir = shift(@Line);      # printf &quot;{$Dir}\n&quot;;
while( ($NameRegExp = shift(@Line) ) ) {
# printf &quot; NameRegExp: {$NameRegExp} - &quot;;
if( $LoginName =~ /$NameRegExp/ ) {
# printf &quot;&lt;$LoginName&gt; &quot;;
$NewsDir[$NewsDirCount++] = $Dir;
}
# printf &quot;\n&quot;;
}
}
close(DUL);
# printf &quot;$NewsDirCount, [@NewsDir]\n&quot;;
if( $NewsDirCount &lt; 1 ) { exit; }  # no news directories, so exit
# remove any duplicates from @NewsDir
@TempDir = sort @NewsDir;  @NewsDir = &quot;&quot;;
$LastDir = &quot;&quot;;  $DirCount = 0;
foreach $Dir ( @TempDir ) {
if( $Dir ne $LastDir ) { $NewsDir[$DirCount++] = $Dir; }
$LastDir = $Dir;
}
# printf &quot; - {@NewsDir}\n&quot;;
1;  # set return value
}

sub MakeDisplayFile {
# concatenate news files to be displayed into one display file
local($ThisDir);  $ThisDir=$_[0];
opendir(DIR,$ThisDir) || die &quot;Could open [$ThisDir]&quot;;
while( $aFile = readdir(DIR) ) {
$NewsFile = $ThisDir . &quot;/&quot; . $aFile;
unless( -T $NewsFile ) { next; }
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
$atime,$mtime,$ctime,$blksize,$blocks) = stat($NewsFile);
# print &quot;NewsFile: $NewsFile, atime: $atime\n&quot;;
if( $mtime &gt; $BaseTime ) {
# add this file to display list
$Cmd = &quot;/bin/cat $NewsFile &gt;&gt; $DisplayFile&quot;; system($Cmd);
$ShowDisplayFile = 1;
}
}
1;  # set return value
}

sub ShowDisplayFile {
# display file; get prompt before exiting
$DisplayCmd = $DisplayCmd . &quot; $DisplayFile&quot;;
# print &quot;$DisplayCmd&quot;; exit;
if( $ShowDisplayFile ) {
# print &quot; - DisplayCmd: $DisplayCmd\n&quot;;
print &quot; - Select News for $Host on $Date \n&quot;;
system($DisplayCmd); # &amp;&amp; die &quot; - problem displaying Select News&quot;;
print &quot;\n - End of Select News for $Host on $Date \n&quot;;
print &quot; - press ENTER key to continue\n&quot;;
$Continue = &lt;STDIN&gt;;
}
1;  # set return value
}

sub UpdateDotFileTime {
# update time of user's .SelectNews.pl before exiting
$Cmd = &quot;/bin/touch $DotFile&quot;;
system($Cmd) &amp;&amp; die &quot;(2) Command [$Cmd] failed.&quot;;
system(&quot;/bin/rm -f $DisplayFile&quot;);  # remove the display file
1;   # set return value
}

#end of file
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
