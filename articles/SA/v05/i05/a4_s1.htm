<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i05:  Sidebar: Off to the Races</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1996/may96.tar"><b class=codeListing>may96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: Off to the Races</H1><p>
<P>
As is often the case with queue files, you must be
careful to avoid a
race condition between the process reading the files
and the one that is
writing them. My ASAP server neatly sidesteps this problem
because it is
a UUCP-fed host. As such, all it has to do to rule out
a race condition
is run the UUCP transfer software, flush the sendmail
queue, and take
care of all of the ASAP spool files before performing
the whole process
again. Because this machine performs these operations
sequentially and
with only one modem, the Perl script (called by sendmail)
will never
write to queue files while the Kermit script is connected
to a carrier
and reading these files.<P>

In a more complex environment, ASAP could be modified
to use lock files.
Although I have not done this, the Kermit lock file
mechanism provides
an apparently straightforward way to codify spool file
access exclusion.
That is, the process that writes the queue files, the
Perl script,
should ensure that Kermit does not have a lock file
written in
/var/spool/locks before writing to a queue file. Note
that there still
exists a chance that the Kermit script could begin reading
the files
while asap.pl writes to them. A simple way to play it
safe might be to
have the Perl script lock out Kermit by writing its
own lock file for
the serial device that the Kermit script is poised to
use. The
documentation on your platform's version of Kermit should
provide
details as to the name and location of these lock files.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
