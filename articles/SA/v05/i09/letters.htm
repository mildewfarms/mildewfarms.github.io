<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i09:  New Messages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1996/sep96.tar"><b class=codeListing>sep96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>New Messages</H1><p>
<P>
<I>Please send letters via email to saletter@mfi.com.</I><P>



I received several messages regarding Ed Schaefer's
article &quot;Sybaccess:
A Menu-Driven Interface to Sybase&quot; in the July
issue - all pointing out
a mistaken reference to the sticky bit. Here are two
letters that set
the matter straight. Thanks to everyone else who wrote
in. - AA<P>



Topic: Correction<br>

I would like to make a correction to a short article
in your July 1996
issue, p. 52. In the box titled: &quot;The Sticky Bit
and Sybaccess,&quot; the
bits in question are NOT called &quot;sticky bits&quot;...
they are called the
&quot;set-user-ID-bit&quot; and the &quot;set-group-ID-bit,&quot;
respectively. The &quot;sticky
bit&quot; is the last bit in that set and when it is
set, it appears as a &quot;t&quot;
in the last column of the permissions.<P>

Originally used to force the storage of frequently used
programs in
local memory or swap (make them &quot;stick&quot;),
it has lately been used on
directories with 777 permissions (like /tmp) to keep
other people from
deleting files they do not own. In fact, having the
&quot;sticky bit&quot; set on
/tmp is a security requirement of mine.<P>

It can be set by this command:<P>
<PRE>
chmod 1777 /tmp</pre><p>
<p>
Please tell your writers to keep their nomenclature
straight.<P>

Thanks!<br>

Shel Randall<br>

<I>Thank you for bringing it to our attention. Here's the
long version...<P>

-AA</I><P>



To: Ed Schaefer<br>

I flipped through the latest Sys Admin and saw your
Sybase article. I
don't  use this database at all, but I did see the sidebar
on the
&quot;sticky bit,&quot; and I have to say that it needs
a bit of revision. <P>

First, it's not the sticky bit you're talking about
here, it's  the
setuid/setgid bits. The sticky bit was found in older,
non-demand-paged
environments (Sys V Rel 2, for instance) that told
the OS to keep a
program loaded in RAM even after the last user  was
finished with it.
This way when the next user ran the program, it was
already loaded. <P>

However, suggesting that people write setuid programs
like  this is so
unbelievably dangerous that you simply cannot even
suggest this in a
published article. The security implications here are
such that there
are a hundred ways to beat this. <P>
<PRE>
1) $ cd /tmp
$ cp /bin/sh sybaccess
$ /usr/local/bin/runsybaccess
#</pre><p>
<p>
You fix this by putting the full path in the system()
call:<P>
<PRE>
2) $ cd /tmp
$ cp /bin/sh tput
$ PATH=/tmp:$PATH /usr/local/bin/runsybaccess</pre><p>
<p>
Now, when tput clear kicks in, it runs my program instead
of  yours. I
might have to use a script instead of /bin/sh, but
that's a minor
issue. <P>

So, you fix the script and put an explicit $PATH at
the very front of it
to forestall this kind of thing. <P>
<PRE>
3) $ cd /tmp
$ SHELL=/tmp/myprogram /usr/local/bin/runsybaccess</pre><p>
<p>
Now, when it forks a shell to run your program, it uses
my shell instead
(not many UNIXs are susceptible to this, but  some are).
<P>

You fix this so that it does a putenv(&quot;SHELL=/bin/sh&quot;)
before doing the
system() call.<P>
<PRE>
4) $ cd /tmp
$ cp /bin/sh usr &lt;- yup, &quot;usr&quot;
$ PATH=/tmp IFS=/ /usr/local/bin/runsybaccess
#</pre><p>
<p>
The shell uses $IFS to break apart its inputs into &quot;words,&quot;
and 
normally it's space+newline+tab. By setting IFS to /,
the command it
runs is &quot;usr&quot; with &quot;local&quot; &quot;bin&quot;
&quot;sybaccess&quot; as arguments.  Since it's
looking on my path - even if $TMP is at the end - it
will run my
program. <P>

The difficulties go on and on. <P>

Creating a setuid root front-end is so fraught with
troubles that you
have to be exceedingly skilled at getting it right (say,
like me) to
even do this, and then you must have a very healthy
disbelief in your
own skills. <P>

I have done a number of setuid front-ends, and none
of them runs as root
for very long. These programs (which are very small
and  therefore easy
to verify) do their limited business as root and  then
revoke their root
permissions before running the user's program directly.
Then, with the
no-root-permissions the security issues become much
less. <P>

A much better solution to most of these issues is running
set  *group*
id, but that's another topic. <P>

So, be very careful when you suggest to others that
they do this  kind
of thing. If you're in an environment with all trusted
users (say, your
office) you can do this knowing that it does not need
to be secure - why
break root when you already have it? But, I am certain
that people will
be burned by this if they don't know the risks. <P>

Steve Friedl<P>

<I>I should have been more adamant about discouraging the
use of this
possible security hole. You definitely plugged it. I
think I've been
properly chastised on this one, but also by readers
Matthew  Cheek, Shel
Randall, and Alex Ostapenko.<P>

Ed Schaefer</I><P>




<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
