<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v05, i09: Listing 1: sys.conf</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1996/sep96.tar"><b class=codeListing>sep96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: sys.conf</H1><p>
<PRE>
#!/bin/sh


# $Header: sys.conf,v 1.10 96/05/20 13:34:29 ress Exp $
# $Author: ress $
# $Revision: 1.10 $

#
# Usage
#
Usage(){
echo &quot;Usage: sys.conf [-print] [-screen]&quot;
exit 0
}

#
# Parse the command line args
#
while [ $# -ne 0 ];
do
case $1 in
-print)		PRINT=1;;
-screen)	SCREEN=1;;
-h*)		Usage;;
*)		:;;
esac
shift
done

# ==========================================================
#                     BEGIN FUNCTION DEFINITIONS
# ==========================================================
#
# Are we root?
#
Check_User(){
UID=`id | cut -d'(' -f1 | cut -d'=' -f2`
if [ $UID -ne 0 ]; then
echo &quot;You must be root to run $0.&quot;
exit 1
fi
return
}

#
# Determine system type
#
Get_Arch(){
ARCH=`uname -r`
case $ARCH in
A.09.*) 	SYSTYPE=HPUX09;;
B.10.*) 	SYSTYPE=HPUX10;;
5.[1-5])    	SYSTYPE=Solaris;;
4.1.[1-3]*)	SYSTYPE=SunOS;;
*)		echo &quot;System type unsupported&quot;
exit 1;;
esac
return
}

#
# Setup variables for system specific syntax of common commands
#
Define_Vars(){
case $SYSTYPE in

HPUX*)	PATH=/bin:/usr/bin:/sbin:/usr/sbin:/etc
SWAPFILE=`swapinfo | egrep &quot;dsk|lvol&quot; | awk '{print $9}'`
DEVSWAP=`swapinfo | grep dev | awk '{print $2}'`
FILESWAP=`swapinfo | grep fs | awk '{print $2}'`
MACADDR=`lanscan | grep x | awk '{print $2}'`
MODEL=`model`
MEMORY=`dmesg | grep Phys | awk '{print $2}'`K
DISKCMD='bdf -t hfs'
CCOMP=`what /bin/cc | grep HP | cut -d' ' -f2`
ETHERIF=lan0
MAILCMD=mailx
PRTCMD=lp
PSCMD='ps -ef';;

Solar*)	PATH=/bin:/sbin:/usr/sbin:/usr/ucb
PATH=$PATH:/usr/ccs/bin:/usr/bin
SWAPFILE=`swap -l | grep dsk | awk '{print $1}'`
DEVSWAP=`swap -l | grep dsk | awk '{print $4}'`
MACADDR=`dmesg | grep Ether | tail -1 | awk '{print $4}'`
MODEL=`prtconf | egrep &quot;SPARC|4_&quot;`
MEMORY=`dmesg | grep '^mem' | tail -1 | awk '{print $3}'`
DISKCMD='df -tkFufs'
CCOMP=`what /usr/ucb/cc | grep SMI | awk '{print $2}'`
ETHERIF=le0
MAILCMD=mailx
PRTCMD=lp
PSCMD='ps -ef';;

SunOS)	PATH=/bin:/usr/ucb:/etc:/usr/etc
SWAPFILE='/dev/'`dmesg | grep swap | tail -1 | awk '{print $3}'`
DEVSWAP=`pstat -T | grep swap | awk '{print $1}' \
| cut -d'/' -f2`
MACADDR=`ifconfig -a | grep ether | tail -1 | awk '{print $2}'`
MODEL=`dmesg | egrep &quot;LX|SPARC|4/75|4/50&quot;| tail -1 \
| awk '{print $3, $4}'`
MEMORY=`dmesg | grep '^mem' | tail -1 | awk '{print $3}'`
DISKCMD='df -t 4.2'
CCOMP=&quot;Unknown&quot;
ETHERIF=le0
MAILCMD=/usr/openwin/bin/mail
PRTCMD=lpr
PSCMD='ps aux';;

esac

ADMIN=&quot;youremailaddr&quot;
MAILFILE=/usr/tmp/`hostname`.mf
TIMESTAMP=`date +%m%d%y`
if [ ! -f /usr/tmp/`hostname`.bl ];then
OUTFILE=/usr/tmp/`hostname`.bl
NEW=1
else
OUTFILE=/usr/tmp/`hostname`
if [ -f $OUTFILE ]; then
/bin/rm $OUTFILE
fi
fi

SNFILE=/usr/tmp/`hostname`.sn
if [ -f $SNFILE ]; then
SERIALNO=`cat $SNFILE`
else
SERIALNO=&quot;Unknown&quot;
fi

return
}

#
# To keep from identifying server machines as
# belonging to an individual, the 'case' statement
# makes a check and changes LASTLOGIN to &quot;Server&quot;
# Otherwise, check the first non-root|daemon|lp|UID
# user of the box. Not failsafe, but as close as
# I can get.
#
Machine_Data(){
MACHINE=`uname -m`
OSREV=`uname -r`

case `hostname` in
serv01|serv02|serv03) 		LASTLOGIN=&quot;Server&quot;;;
*) LASTLOGIN=`$PSCMD | egrep -v &quot;lp|daemon|root|UID|bin|USER&quot; | \
awk '{print $1}' | head -1`;;
esac

#
# If no one is logged in, check wtmp
#
if [ -z &quot;$LASTLOGIN&quot; ]; then
LASTLOGIN=`last | grep console | \
grep -v &quot;root&quot; | head -1 | awk '{print $1}'`
fi

#
# If that fails, see if we have recorded it before
#
if [ -z &quot;$LASTLOGIN&quot; ]; then
LASTLOGIN=`grep Login /usr/tmp/*.bl | awk '{print $4}'`
fi

#
# Alas, we are clueless...
#
if [ -z &quot;$LASTLOGIN&quot; ]; then
LASTLOGIN=&quot;Unknown..&quot;
fi

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__
=======================================
System Configuration report for `hostname`
=======================================

Machine data
============
Machine              :  $MACHINE
Serial number        :  $SERIALNO
Model                :  $MODEL
O.S. revision        :  $OSREV
C Compiler revision  :  $CCOMP
Memory               :  $MEMORY
Last Login           :  $LASTLOGIN

__EOF__
return
}

#
# NetworkData
#
Network_Data(){
NOETHERIF=`netstat -in | egrep -v &quot;lo0|ni|Address&quot; | wc -l`
IPADDR=`ifconfig $ETHERIF | grep inet | awk '{print $2}'`
NETMASK=`ifconfig $ETHERIF | grep inet | awk '{print $4}'`
BROADCAST=`ifconfig $ETHERIF | grep broad | awk '{print $6}'`
NETMASKCK=&quot;255.255.255.0&quot;
BROADCASTCK=&quot;255&quot;
DEFROUTER=`netstat -rn | grep default | awk '{print $2}'`

$PSCMD | grep ypbind | grep -v grep &gt; /dev/null
if [ $? = 0 ]; then
YPCLIENT=&quot;True&quot;
else
YPCLIENT=&quot;False&quot;
fi

$PSCMD | grep ypserv | grep -v grep &gt; /dev/null
if [ $? = 0 ]; then
YPSERVER=&quot;True&quot;
else
YPSERVER=&quot;False&quot;
fi

echo &quot;Network data&quot; &gt;&gt; $OUTFILE
echo &quot;============&quot; &gt;&gt; $OUTFILE
echo &quot;NIS domain           : &quot; `domainname` &gt;&gt; $OUTFILE
echo &quot;NIS client           : &quot; $YPCLIENT &gt;&gt; $OUTFILE
echo &quot;NIS server           : &quot; $YPSERVER &gt;&gt; $OUTFILE
echo &quot;&quot; &gt;&gt; $OUTFILE
echo &quot;ethernet interfaces  : &quot; $NOETHERIF
&gt;&gt; $OUTFILE

if [ $NOETHERIF -gt 1 ]; then

echo &quot;Name    Address       Broadcast       Netmask&quot;  &gt;&gt; $OUTFILE
echo &quot;=============================================&quot; &gt;&gt; $OUTFILE

netstat -i | egrep -v &quot;lo0|ni|Queue&quot; &gt; /tmp/$$
exec &lt; /tmp/$$
while [ 1 ];
do
read line
RC=$?
if [ $RC != 0 ]; then
break
fi
IFNAME=`echo $line | awk '{print $1}'`
IFHOST=`echo $line | awk '{print $4}'`
IFIPAD=`grep &quot; $IFHOST &quot; /etc/hosts | awk '{print $1}'`
IFMSK=`ifconfig $IFNAME | grep inet | awk '{print $4}'`
IFBRD=`ifconfig $IFNAME | grep inet | awk '{print $6}'`
echo $IFNAME $IFIPAD $IFBRD $IFMSK | \
awk '{printf&quot;%-5s %-15s %-15s %-15s\n&quot;,$1,$2,$3,$4}' &gt;&gt; $OUTFILE
done
rm /tmp/$$
else
echo &quot;IP Address           : &quot; $IPADDR &gt;&gt; $OUTFILE
echo &quot;MAC Address          : &quot; $MACADDR &gt;&gt; $OUTFILE
echo &quot;Netmask              : &quot; $NETMASK &gt;&gt; $OUTFILE
echo &quot;Broadcast            : &quot; $BROADCAST &gt;&gt; $OUTFILE
echo &quot;Default router       : &quot; $DEFROUTER &gt;&gt; $OUTFILE
fi
echo &quot;&quot; &gt;&gt; $OUTFILE
return
}

#
# DiskData
#
Disk_Data(){
echo &quot;Disk data:&quot; &gt;&gt; $OUTFILE
echo &quot;===========================================================&quot; &gt;&gt;
$OUTFILE

echo &quot;Device_file&quot; &quot;Partition_Size&quot; &quot;Mount_Point&quot; | \
awk '{printf&quot;%-20s %-20s %-20s\n&quot;, $1,$2,$3}' &gt;&gt; $OUTFILE

echo &quot;===========================================================&quot; &gt;&gt;
$OUTFILE

#
# Setup a special case for Journal File Systems at HP-UX 10.10
#
case $SYSTYPE in
HPUX10)	bdf -t hfs | grep -v Mounted | \
awk '{printf&quot;%-20s %-20d %-20s\n&quot;, $1,$2,$6}' &gt;&gt; $OUTFILE
bdf -t vxfs | grep -v Mounted | \
awk '{printf&quot;%-20s %-20d %-20s\n&quot;, $1,$2,$6}' &gt;&gt; $OUTFILE;;
*)	$DISKCMD | grep -v Mounted | \
awk '{printf&quot;%-20s %-20d %-20s\n&quot;, $1,$2,$6}' &gt;&gt; $OUTFILE
esac

case $SYSTYPE in
HPUX*) swapinfo | grep dev |
while [ 1 ];
do
read line
RC=$?
if [ $RC != 0 ]; then
break
fi
SWAPFILE=`echo $line | egrep &quot;dsk|lvol&quot; | awk '{print $9}'`
DEVSWAP=`echo $line | grep dev | awk '{print $2}'`
echo $SWAPFILE $DEVSWAP &quot;swap&quot; | \
awk '{printf&quot;%-20s %-20s %-20s\n&quot;, $1,$2,$3}' &gt;&gt; $OUTFILE
done;;

Solar*) swap -l | grep -v swapfile |
while [ 1 ];
do
read line
RC=$?
if [ $RC != 0 ]; then
break
fi
SWAPFILE=`echo $line| grep dsk| awk '{print $1}'`
DEVSWAP=`echo $line | grep dev| awk '{print $4}'`
echo $SWAPFILE $DEVSWAP &quot;swap&quot; | \
awk '{printf&quot;%-20s %-20s %-20s\n&quot;, $1,$2,$3}' &gt;&gt; $OUTFILE
done;;

SunOS) 	echo $SWAPFILE $DEVSWAP &quot;swap&quot; | \
awk '{printf&quot;%-20s %-20s %-20s\n&quot;, $1,$2,$3}' &gt;&gt; $OUTFILE;;

*);;
esac
return
}

#
# HPUX09_Func
#
HPUX09_Func(){
cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

IOSCAN output data
==================
__EOF__

/etc/ioscan -f -b &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

Patch Data
==============================
Name     :  Index Description
==============================
__EOF__

cd /system
for PATCH in `ls -1d PH*`
do
DESC=`grep &quot;fd:&quot; $PATCH/index | cut -d':' -f2`
echo $PATCH &quot;:&quot; $DESC &gt;&gt; $OUTFILE
done

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed printers (from lpstat)
==================================================

__EOF__

lpstat -a | grep &quot;accepting&quot; | sort | uniq | awk '{print $1}' &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed filesets (from /etc/filesets)
==================================================
__EOF__
ls -C /etc/filesets &gt;&gt; $OUTFILE

echo &gt;&gt; $OUTFILE
return
}

#
# HPUX10_Func
#
HPUX10_Func(){
cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

IOSCAN output data
==================
__EOF__

/etc/ioscan -f &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

=================================================
Installed printers (from lpstat)
=================================================

__EOF__

lpstat -a | grep &quot;accepting&quot; | sort | uniq | awk '{print $1}' &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed filesets (from swlist -l product )
==================================================
__EOF__
swlist -x one_liner=&quot;name revision title&quot; -l product | \
grep -v &quot;#&quot; | cut -c1-60 &gt;&gt; $OUTFILE

return
}


#
# SOLARIS_Func
#
SOLARIS_Func(){
cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed patches (from 'showrev -p')
==================================================
__EOF__

showrev -p | awk '{print $2}' &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed printers (from lpstat)
==================================================
__EOF__

lpstat -a | grep &quot;accepting&quot; | sort | uniq | awk '{print $1}' &gt;&gt; $OUTFILE

cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed packages (from pkginfo)
==================================================
__EOF__

pkginfo &gt;&gt; $OUTFILE
return
}

#
# SUNOS_Func
#
SUNOS_Func() {
cat &gt;&gt; $OUTFILE &lt;&lt; __EOF__

==================================================
Installed printers (from lpc stat)
==================================================
__EOF__

lpc stat | grep : | cut -d':' -f1 &gt;&gt; $OUTFILE
return
}

NotifyAdmin() {
if [ -f /usr/tmp/`hostname` -a -f /usr/tmp/`hostname`.bl ]; then
diff /usr/tmp/`hostname`.bl /usr/tmp/`hostname` &gt; /dev/null
if [ $? = 1 ]; then
echo &gt;&gt; $MAILFILE
echo &quot;Configuration differences since last run:&quot; &gt;&gt; $MAILFILE
diff /usr/tmp/`hostname`.bl /usr/tmp/`hostname` &gt;&gt; $MAILFILE

# If there is a difference, we now move old
# baseline and timestamp it. Move config to baseline
/bin/mv /usr/tmp/`hostname`.bl /usr/tmp/`hostname`.bl.$TIMESTAMP
/bin/mv /usr/tmp/`hostname` /usr/tmp/`hostname`.bl

fi
fi

#
# If the configuration has changed, notify the admin
#
if [ -f $MAILFILE ]; then
$MAILCMD -s &quot;`hostname`_status&quot; $ADMIN &lt; $MAILFILE
/bin/rm $MAILFILE
fi

#
# If this is the first instance of the .bl file being
# created, notify the admin that it is online
#
if [ $NEW ]; then
$MAILCMD -s &quot;`hostname`_online&quot; $ADMIN &lt; $OUTFILE
fi

#
# Display to screen?
#
if [ $SCREEN ]; then
more $OUTFILE
fi

#
# Print it out?
#
if [ $PRINT ]; then
$PRTCMD $OUTFILE
fi

return
}

# ============================================================
#                     END OF FUNCTION DEFINITIONS
# ============================================================
#
# system-independent functions
#
Check_User
Get_Arch
Define_Vars
Machine_Data
Network_Data
Disk_Data

#
# system-dependent functions
#
case $SYSTYPE in
HPUX09)		HPUX09_Func;;
HPUX10)		HPUX10_Func;;
Solaris)	SOLARIS_Func;;
SunOS)		SUNOS_Func;;
*)		;;
esac

NotifyAdmin

# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
