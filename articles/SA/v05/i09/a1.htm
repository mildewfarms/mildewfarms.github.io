<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i09:  Taking Shell Scripts Beyond Simple Batch Functionality</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1996/sep96.tar"><b class=codeListing>sep96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Taking Shell Scripts Beyond Simple Batch Functionality</H1><p>
<P>
Emmett Dulaney<P>

Shell scripts can be as simple or as complex as you
care to make them.
In their simplest form, they are nothing more than batch
files -
combining one or more single-line commands into one
short, executable
file. In their more complex form, they perform logic
operations and
manipulations in the interest of time saving and automation.<P>

The key to increasing the functionality of your shell
scripts while
maintaining manageability is to know what external utilities
and
built-in shell commands are at your disposal. This article
examines
several that you must know if you want to move beyond
beginning
scripting. They are, in order of discussion:<P>
<PRE>
read            built-in
case            built-in
break           built-in
exit            built-in
tr              external
expr            external
typeset         built-in, ksh only</pre><p>
<p>
Using these commands within scripts removes the static
limitations of
always performing the same, mundane tasks that must
exist in their
absence.<P>

<B>Accepting User Input</B><P>

There are essentially three ways to introduce variables
to scripts. The
first is to place them on the command line and look
for them using
variations of $1-$9. The second is to read them from
a static file into
which you place the variables that remain consistent,
and the third is
to enter them into the script, as it is running, from
the keyboard.<P>

Whenever a read command is encountered in a script,
processing stops and
input is read into a named variable(s) until the newline
character is
entered. White space (be it a space or a tab) is used
as the delimiter
between variables, and excess words are stored in the
last variable. The
syntax is simply:<P>
<PRE>
read variable</pre><p>
<p>
For example, if the script contains this set of lines:<P>
<PRE>
clear
read name
echo $name</pre><p>
<p>
the screen will clear, processing will stop and wait
until a value is
read in and the newline character entered, then it will
echo the value
of what was read in, and go on. An echo command is used
to prompt the
user, as in:<P>
<PRE>
clear
echo &quot;Enter your name:c&quot; read name

echo $name</pre><p>
<p>
More than one read command can be used to bring in additional
variables,
or they can be simultaneously obtained by the same read
command. For
example:<P>
<PRE>
clear
echo &quot;Enter your name:c&quot; read fname lname

echo &quot;Pleased to meet you $fname. Are you related to
$lname?&quot;</pre><p>
<p>
In this scenario, if the keyboard operator enters &quot;Kristin
Evan,&quot; then
the value of the variable fname becomes &quot;Kristin,&quot;
and the value of the
lname variable becomes &quot;Evan.&quot; The white space
placed between the two at
time of entry serves as the delimiter signifying the
end of fname and
the beginning of lname. It is extremely important to
note what was
mentioned before; the last variable read takes on all
remaining
characters.<P>

Therefore, if the keyboard operator enters at the prompt
&quot;Kristin Karen
Evan,&quot; then fname remains &quot;Kristin,&quot;
but lname becomes &quot;Karen Evan.&quot; In
all cases, using only one variable on the line for read
has the effect
of assigning the entire line to the variable. Compare
input and act,
accordingly, with case.<P>

<B>Multiple Choices</B><P>

The case command is intended for use when there are
a number of possible
operations that can take place based upon the value
of a variable. A
perfect example would be a menu - choices are displayed,
the user picks
one, and the operations carried out are those limited
to that choice.<P>

The syntax for the case command is shown below:<P>
<PRE>
case {value} in
pat1)
command
command
;;
pat2)
command
command
;;
esac</pre><p>
<p>
Notice the esac at the end of the options list. This
signifies the end
of the case list in the same manner fi signifies the
end of if
statements. The purpose of the double semicolons (;;)
is to end the case
command at that point. Thus, if pat1 is entered, the
lines specified for
it are executed, and the case command exited. Without
the double
semicolons, the processing would continue until a pair
were met, or the
end of the case list. This provides a means by which
multiple-line
commands can be entered for each choice. If no patterns
match the value,
then no commands are executed.<P>

The following is a simple example:<P>
<PRE>
echo &quot;\n\nEnter a letter from A - E:&quot;
read lett
case $lett in
A)  echo &quot;ASCII value is 65&quot;;;
B)  echo &quot;ASCII value is 66&quot;;;
C)  echo &quot;ASCII value is 67&quot;;;
D)  echo &quot;ASCII value is 68&quot;;;
E)  echo &quot;ASCII value is 69&quot;;;
esac</pre><p>
<p>
If the keyboard operator types in &quot;A,&quot; the
response they get is that the
equivalent ascii value is 65. If they type in &quot;C,&quot;

they learn that it is
67. If they type in &quot;F,&quot; then it does not
match any of the choices, and
nothing is echoed back to them.<P>

It is important to understand that case will execute
the first line
matching the selection, and no others. Thus, if you
had something like:<P>
<PRE>
echo &quot;\n\nEnter a letter from A - E:&quot;
read lett
case $lett in
A)  echo &quot;ASCII value is 65&quot;;;
B)  echo &quot;ASCII value is 66&quot;;;
C)  echo &quot;ASCII value is 67&quot;;;
D)  echo &quot;ASCII value is 68&quot;;;
E)  echo &quot;ASCII value is 69&quot;;;
A)  echo &quot;You picked this
again?;;
esac</pre><p>
<p>
the last &quot;A&quot; choice would never execute. Once
a match is found for the
variable, and the double semicolons are encountered,
the routine drops
to esac and leaves. Therefore, you must place a bottom
choice in the
list that matches anything that made it this far without
triggering
execution of a command. This provides a means of dealing
with
exceptions, as in:<P>
<PRE>
echo &quot;\n\nEnter a letter from A - E:&quot;
read lett
case $lett in
A)  echo &quot;ASCII value is 65&quot;;;
B)  echo &quot;ASCII value is 66&quot;;;
C)  echo &quot;ASCII value is 67&quot;;;
D)  echo &quot;ASCII value is 68&quot;;;
E)  echo &quot;ASCII value is 69&quot;;;
*)  echo &quot;You are beyond the
realm of
choices\07\07&quot;;;
esac</pre><p>
<p>
In this routine, anything not matching &quot;A&quot;
through &quot;E&quot; causes an error
message and two beeps of the terminal.<P>

Patterns can utilize metacharacters, *, ?, {...}, and
the pipe (|)
symbol to signify one or another pattern. For example:<P>
<PRE>
echo &quot;\n\nEnter a letter from A - E:&quot;
read lett
case $lett in
A)  echo &quot;ASCII value is 65&quot;;;
B)  echo &quot;ASCII value is 66&quot;;;
C)  echo &quot;ASCII value is 67&quot;;;
D)  echo &quot;ASCII value is 68&quot;;;
E)  echo &quot;ASCII value is 69&quot;;;
Q|q) exit ;;
[1-9])echo &quot;Only letters may be entered&quot;;;
*)  echo &quot;You are beyond the realm of
choices\07\07&quot;;;
esac</pre><p>
<p>
Now, if any number is entered (as opposed to a letter),
a standard
message is returned. The routine can be exited using
either &quot;Q&quot; or &quot;q.&quot;<P>

The exit command, within a case routine, exits the entire
shell script.
Therefore, if there are lines meant to run after the
case routine, do
not use exit, because they never will. An alternative
to exit is break.
When you use break as a choice, the execution leaves
the entire case
routine (drops beneath esac), and the rest of the script
is carried out.<P>

<B>Using tr</B><P>

The tr utility translates one character set to another
as it copies
standard input to standard output. The syntax is:<P>
<PRE>
tr {first set} {second set}</pre><p>
<p>
For example:<P>
<PRE>
tr &quot;[a-z]&quot; &quot;[A-Z]&quot;</pre><p>
<p>
will convert all lowercase characters from a to z into
their
corresponding uppercase character. In all cases, the
to-string must be
the same number of characters as the from-string, otherwise
unexpected
(or unwanted) results will occur. The tr command can
also be used to
change the value of an existing variable, using the
following syntax:<P>
<PRE>
x=`echo $1 | tr &quot;[a-z]&quot; &quot;[A-Z]&quot;`</pre><p>
<p>
There are a handful of parameters that can be used with
the utility:<P>
<TABLE>
<TR>
<TD WIDTH=100 ALIGN=LEFT>-c</TD>
<TD WIDTH=300 ALIGN=LEFT>Restricts output to the characters specified in from-string and appends characters
contained in to-string.</TD>
</TR>
<TR>
<TD>-d</TD>
<TD>Deletes characters specified in from-string.</TD>
</TR>
<TR>
<TD>-s</TD>
<TD>Strips repeated characters generated in the output by those specified in to-string.</TD>
</TR>
<TR>
<TD>[c1-cn]</TD>
<TD>Specifies a range of ASCII characters, from c1 to cn.</TD>
</TR>
<TR>
<TD>[c*n]</TD>
<TD>Specifies that character c repeats n times. The n may be zero or left blank, which assumes a huge number of
the character c.</TD>
</TR>
</TABLE>
<P>
<B>expr</B><P>

Under normal operation, variables are always treated
as string text and
cannot be added together, increased, decreased, or otherwise
arithmetically manipulated within the shell. Following
is an example of
the result of treating string variables numerically:<P>
<PRE>
$ i=7
$ i=i+5
$ echo i
i
$ echo $i
i+5
$</pre><p>
<p>
One of the primary purposes of the expr utility is to
interpret
variables from strings. Numbers are separated by blanks,
and strings
should be quoted. Minus signs can be used to denote
negative numbers,
and all integers are treated as 32-bit, 2's complement
numbers.<P>

There are a great many possibilities present with expr,
but the most
useful are those pertaining to arithmetic. Operators
that can be used in
operations are shown in Figure 1. If expr has a problem
during
operation, it will return an exit value to the shell
of:<P>

0 if the expression is neither null nor 0.
1 if the expression is null or 0.
2 for invalid expressions.<P>

Figure 2 shows five examples of operation.<P>

A simple, incrementing script can be written in a file
in the following
fashion:<P>
<PRE>
while true
do
i=`expr $i + 1`
echo $i
done</pre><p>
<p>
Using while true in this manner creates an endless loop
because the test
can never be untrue. expr will continue to increment
the value of i and
display it on the screen until you break out of it.
To limit the number
of times this routine runs, without breaking out of
it, change the test
condition to something that exists for only a short
period, such as:<P>
<PRE>
while [`date  '+%M'` + 02]</pre><p>
<p>
which will only run for one minute (naturally replace
&quot;02&quot; with the
current minute).<P>

<B>Using typeset Instead of expr</B><P>

The typeset utility exists in the Korn shell only. If
you are using
Bourne, you must stick with expr to mathematically manipulate
variables.
The Korn shell, via the typeset utility, allows you
to define, or set, a
variable as possessing definition or a type, which makes
it stand out.
You can define a variable as always being one of the
following:<P>

uppercase -u
lowercase -l
left justified -L
right justified -R
read only -r
exported -x
an integer -i<P>

It is the integer type (-i) of most interest for using
typeset in place
of expr. A subcommand, if you will, of typeset is let.
let is used to
change values, as in the following example:<P>
<PRE>
typeset -i x y
x=$1
y=1
until [ &quot;$y&quot; &lt; &quot;$x&quot; ]
do
print $y
let y=&quot;$y+1&quot;
done</pre><p>
<p>
This routine establishes two variables as being integers,
x and y. Next,
the value of x is defined as a variable passed on the
command line, and
y is set to 1. Until y is one greater than x, the routine
will print
numbers from 1 to x. Therefore, if 7 is entered at the
command line, the
numbers 1 through 7 are printed. If 600 is entered on
the command, the
numbers 1 through 600 are printed.<P>

<B>An Example</B><P>

Listing 1 shows an example of several of the utilities
discussed here
(the line numbers were added to aid explanation only).
This is a
standard menu utility, simply called MENU. Lines 2 through
14 clear the
screen and print the menu choices. Line 14 also mentions
that the user
can press &quot;Q&quot; to quit the utility.<P>

Line 15 accepts the input while line 16 translates any
lowercase
characters into uppercase - this will come in useful
later when offering
the choice to quit or obtain help. Line 17 echoes a
portion of the date
and the number of the menu choice made to a logfile
that can be used to
keep track of transactions.<P>

Line 18 begins the case routine, which runs through
line 73. Lines 19
through 21 comprise the first choice, and lines 22 through
37 are the
second choice. Within the second choice, notice the
additional prompt
for input and lines 24 and 26.<P>

Lines 38 through 47 are the third choice - with another
read statement
embedded within. The fourth selection begins on line
48 and runs through
line 58. Notice the additional case routine embedded
within it that
begins on line 52.<P>

Line 60 begins the &quot;Q&quot; choice allowing the
user to quit. Notice the two
exit commands within the choice. The first exits from
the routine
itself. The second kills the shell and knocks the user
back to a login.
Thus, this routine is limited to only being run by a
special login
defined in a user profile. When not running this routine,
the user must
log in by another identity.<P>

Line 65 is where a help facility could be installed,
and line 69 catches
all invalid choices. Line 73 ends the case statement,
and line 74 calls
the routine all over again, restarting the menu on the
screen.<P>

If this script (shown in Listing 1) were running in
a Korn shell
environment, the Help and Quit functions could be assigned
to menu
choices 5 and 6, respectively. The variable read in
could then be
typeset as an integer and a test done to see whether
the value was more
than six or less than one. If so, an error message indicating
the
invalid choice would be delivered prior to getting to
the case routine,
and the user would be returned to the menu.<P>

<B>Conclusion</B><P>

The utilities discussed can add power and performance
to your shell
scripts in a manner that cannot be equaled without them.
Familiarizing
yourself with them and the options they offer will allow
you to write
very good script routines.<P>




<P>


<H1>About the Author</H1><p>
<P>
Emmett Dulaney is a Publishing Manager for New Riders
Publishing and the
author of several books on Unix and TCP/IP. He can be
reached on
Compuserve at 74507,3713.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
