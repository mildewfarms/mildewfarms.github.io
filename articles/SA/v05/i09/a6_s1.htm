<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v05, i09:  Sidebar: UNIX Filesystem and Permissions Revisited</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a6_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><a href="../../../../source/SA/1996/sep96.tar"><b class=codeListing>sep96.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: UNIX Filesystem and Permissions Revisited</H1><p>
<P>
The security of the Unix filesystem is based on a number
of key factors.
First, the identity of the user is important. This identity
consists of
two elements, a unique user id (uid) and a group id
(gid). The uid is a
number that uniquely identifies the user on the particular
system. A
user always belongs to at least one group, but can be
a member of more
than one group. Group ids are normally established along
lines similar
to the departments within the organization.<P>

All files in a UNIX filesystem have two elements of
ownership. Each file
is owned by a specific user and also belongs to a group.
Permissions
relative to files are designated as read (shown as r
in listings), write
(shown as w in listings), and execute (shown as x in
listings).  Read
permission allows you to look at the contents of a file,
but not edit,
change, or delete the file. Write permission allows
you to take those
actions.<P>

Thus, when you do a long listing of a file using ls
-l, these three
permissions are reflected for the user, the group, and
everyone else
(referred to as &quot;other&quot;), preceded by a single
character designator for
the type of file. If a permission is denied, a dash
appears in that
space, as shown below. Execute permission on directories
has a special
meaning. It means that the directory file can be searched.
If the
directory is also readable, then files in the directory
can be listed
using ls or other utilities.<P>

All programs that are started by a user normally run
under his or her
uid and gid. Exceptions to this rule are the setuid
and setgid programs
that execute under the uid or gid of the user or group
that owns the
file. If either of these permission bits are set, the
x in the
permissions listing is replaced by an s.<P>

An example of a setuid program is the passwd program
that you can use to
change your password. The password is stored in the
file /etc/passwd,
and this file is normally writeable only by the superuser
or root. So,
if a normal user wants to write a new password to this
file, it will
normally fail. By making this program setuid to root,
it will change its
identity to root and thus, can write the new password
in the passwd
file. The following listing shows you the protection
on the /etc/passwd
file and the security mask for the passwd program. In
this particular
example, taken from Solaris 2.4, the /etc/passwd is
not writeable at
all, but luckily the superuser can change this on the
fly.<P>
<PRE>
bash$ ls -l /etc/passwd
-r--r--r--  1  root  sys  939 May  3 11:44 /etc/passwd
bash$

bash$ ls -l /usr/bin/passwd
-r-sr-sr-x  1  root  sys  11680 Jul 16 1994 /usr/bin/passwd
bash$</pre><p>
<p>
The s listing for the setuid bit does not truly replace
the x bit, but
rather is a combination of both the x bit and an invisible
bit. If you
cleared the x bit on a setuid program, the s would change
into an S,
meaning that the invisible bit is set and the x bit
is cleared - an
invalid combination.<P>

The setgid (set group id) bit for executable files has
the same meaning
as the setuid bit, but only for the gid under which
the program is
running. So, setgid bit will change the file's group
id to the group id
that owns that file. The effect of setting the group
id without
corresponding execute permission is UNIX implementation
dependent. Under
Solaris, for example, this bit will change its meaning
when the x bit is
cleared. In that case, mandatory locking applies to
that particular
file, and the representation in the ls output will change
from s to l.<P>

The setgid bit also has a meaning when the related object
is a
directory. This, too, is implementation dependent. If
you set this bit
on a directory, all files created in this directory
will inherit their
group ownership from the group ownership of the directory
itself. This
behavior is derived from BSD UNIX and might not apply
to your particular
flavor.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
