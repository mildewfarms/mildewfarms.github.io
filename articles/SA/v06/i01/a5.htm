<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i01:  Creating Graphical Wrappers with Tcl/Tk</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1997/jan97.tar"><b class=codeListing>jan97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >

<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Creating Graphical Wrappers with Tcl/Tk</H1><p>
<P>
Michael Hall<P>

</H1><p>Putting a graphical wrapper around standard utility commands provides ease-of-use, convenience, and a logical grouping of functions. This article will show the benefits of putting some standard system commands inside a graphical wrapper using Tcl/Tk.<p>
<B>Strategy</b><p>There are three classes of commands that work well with a graphical wrapper. I will explain each class and discuss how a wrapper enhances them.<p>
The simplest commands are the "status" commands. They show what's going on with the system or display information about a certain type of entity, such as process, memory, or filesystem. Some examples of these commands are <B>ps</B>, <B>netstat</B>, <B>ipcs</B>, and <B>tbstat</B> (an Informix database status command).<p>
A graphical wrapper for these commands would consist of a set of buttons to invoke the command (with different options) and a scrolling text box to collect and display the output of the command. For example, on an interface for the <B>ps </B>command, you could push a "Scan" button, get a process listing, and scroll the listing back and forth. <p>
Another group of commands that work well with a graphical wrapper could be called "complementary pairs." These are pairs of closely related commands that can show the status of an entity (process, filesystem, network connection, etc.) and can operate on that entity. Instead of status-output only, these commands have status + action. Examples of these complementary pairs are <B>ps</B> + <B>kill</B>, <B>ipcs</B> + <B>ipcrm</B>, <B>lpstat</B> + <B>lpadmin</B>.<p>
A graphical wrapper for these paired commands would have three parts: a set of buttons to invoke the status command with various options, a scrolling text box to show the output of the status command, and additional buttons to invoke the "action" command on selected entries from the text box. For example, using <B>ps</B> and <B>kill</B>, you could click on a "Scan" button, scroll the list to find the process, select the line, and click the "Kill" button.<p>
The third, and final, class of commands that can benefit from a graphical wrapper consists of complementary pairs plus a configuration file. These commands rely on a master file to define the entities that they act upon. Examples of this group would be <B>/etc/fstab</B> + <B>mount</B> + <B>umount</B> + <B>df</B> + <B>fsck</B> + <B>mkfs</B> + ... or <B>/etc/inittab</B> + <B>init</B> + <B>who</B>.<p>
The graphical wrapper for these commands would display the master file in a text box, and buttons would act on or display information about selected entries defined by the master file. For example, the wrapper would show a formatted version of <B>/etc/vfstab</B>. You could select a filesystem, press a button to see which processes are using it (via <B>fuser</B>), press a button to unmount it (<B>umount</B>), press a button to check it (<B>fsck</B>), and finally remount it (<B>mount</B>). Status output of these commands would appear in the scrolling text box.<p>
<B>Example</b><p>Listing 1 shows the source listing for <B>KP</B>, a Tcl/Tk script to list and kill processes.  (See also Figure 1.)<p>
If Tcl/Tk is new to you, a few key concepts may help clarify the code. First, every Tcl statement starts with a command word. Second, a fundamental Tcl data type is a list, and lists are used everywhere in Tcl. A list of statements becomes the body of a procedure. A simple <B>if</B> command has two list arguments - one for the <B>if</B> expression, and one for the <B>if-true</B> clause. Third, as in most shell scripts, a variable must be evaluated to use its value. However, there are a few commands that require the variable name rather than its contents.<p>
Listing 1 starts with a <B>#!</B> heading, which identifies the executable program that should interpret this script. In this case, it is the <B>wish</B> command (although your path may be different if Tcl/Tk was installed in a different place). Comments in Tcl are formatted as comments in shell scripts - they start with a number sign (hash mark, pound sign, etc.).<p>
The first Tcl command appends our custom library path to the list of standard Tcl/Tk library search paths. Tcl has the ability to load source code modules when a routine is referenced at run time. The variable <B>auto_path</B> contains a Tcl list of places where external modules are located. The simplicity of <B>KP</B> relies on many external routines, so Tcl needs to know where to find them. Extending <B>auto_path</B> with the library directory is the way to do that.<p>
Continuing, some global variables need to be set. The first two, <B>ps_user</B> and <B>ps_all</B> are used as arguments to the <B>ps</B> command. <B>ps_user</B> will be used to get a list of processes for a given user. <B>ps_all</B> is used for a listing of all processes on the system. The values shown in the script are fine for System V-based systems. For systems with a BSD heritage, use the other settings shown in the comments.<p>
The next two assignments set initial values for the variables that hold the selected user name and the selected signal name. Later on in the script, menu items will be connected to the variables, so that the contents of the variables will track the selected menu items.<p>
Next, there's a section of two routines that handle the real work in this application. The first routine is called <B>kill_proc</B>, which uses <B>kill</B> to signal a set of processes. The second routine is called <B>scan_proc</B>, which uses <B>ps</B> to get and display a list of process lines. These two routines interface to the complementary commands <B>kill</B> and <B>ps</B> to control and gather information about processes.<p>
As briefly mentioned above, the job of <B>kill_proc</B> is to get a list of selected process lines and send a signal to those processes. This routine first asks the process list panel for a list of index numbers of the currently selected lines. It saves this list in the <B>sellist</B> variable. If this list is empty, no lines were selected, so there is no work to do, and <B>kill_proc</B> returns.<p>
Next, a <B>foreach</B> loop converts the selected process lines to a list of process ID numbers. The first step is to get the text line that is displayed in the process list panel and extract the first two numbers on the line (System V specific). If the process ID value looks bad, the script just skips to the next entry. Other tests can be added here, as shown in the comments, to detect and skip over critical processes that mustn't be disturbed. Once the process listing line has passed the sanity tests, the extracted process ID is appended to a list of process IDs called <B>pid_list</B>.<p>
With this list of selected process IDs, the script constructs a <B>kill</B> command with the following format:<p>
<pre>
exec kill {signal-name} {pids}</pre><p>
</b><p>in which the signal name comes from the <B>signal</B> global variable (in turn set from a menu-item). The command is passed to <B>catch</B> for evaluation, and the exit code of the executed command comes back as the return value of <B>catch</B>. If there was an error, it pops up a message and returns. Otherwise, it calls <B>scan_proc</B> to refresh the list of displayed processes.<p>
The job of <B>scan_proc</B>, the second workhorse routine, is to run a <B>ps</B> command, collect the output, and put the output into a scrolling list for the user to view. The <B>global</B> statement tells Tcl that it will be referencing the global variables shown on the line. Without this statement, Tcl would assume that <B>user</B> was a local variable (<B>kill_proc</B> uses a global statement also). First, the program detects whether the variable <B>user</B> has the special value of "Any." If so, then a command line is constructed to list all processes on the system. The command line starts with a vertical bar - the pipe symbol. When this string is opened as a file, the vertical bar tells Tcl to really open a pipe to the command instead. This way, standard file I/O operations can be used with processes as well as files.<p>
If the <B>user</B> variable isn't set to "Any," then a different command line is used to get a list of processes for only the selected user. Given the constructed command line, (whether for all users or one user), a custom library routine <B>read_list</B> is used to open the command (or file), read lines from it, and return the lines as a Tcl list. That list is passed to the <B>fill_list</B> routine, which inserts the contents of a Tcl list into a Tk scrolling list component. The final argument of "0" tells <B>fill_list</B> that the entire contents of each list element (each line from <B>ps</B>) should be placed in the scrolling list component. Other positive values would select individual items from the lists.<p>
These two routines, <B>kill_proc</B> and <B>scan_proc</B> comprise the interface to the complementary pair <B>kill</B> and <B>ps</B>. One sends a signal to selected processes, and one generates a list of processes based on some qualifiers. Both rely on custom routines to make their job easier.<p>
The next section of the script contains routines to create the user interface. The major routine is called <B>make_control_panel</B>. It also references some global variables - specifically, <B>user</B> and <B>signal</B> will be connected to the appropriate menu items.<p>
First, some attributes are set that the window manager will use to identify this process on the screen: the window title, the icon name, and the command line. The next step is to create a complete menu with the custom <B>menu_bar</B> routine. The first argument is the created component name; the next argument is the starting index number (for making menus one by one). The remaining arguments make up a long series of lists, each on a separate line. Each list argument describes a menu item or formatting option for the <B>menu_bar</B> command. The entire list creates three menus: <B>File</B>, <B>Signals</B>, and <B>User</B>.<p>
The first list argument, <B>{menu File}</B>, tells <B>menu_bar</B> to create a new menu called <B>File</B>. The next one, <B>{cmd Quit exit}</B>, creates a command button menu item labeled <B>Quit</B> (under the current <B>File</B> menu), which executes the <B>exit</B> command when selected. The next argument, <B>{end left}</B>, terminates this <B>File</B> menu, and positions it on the left side of the menu bar, after any other previously placed menus.<p>
The remaining lists presented to <B>menu_bar</B> are in two groups: one defines the menu for selecting a signal and the other defines the menu for selecting a user. Each list is built like the <B>File</B> menu, but instead creating of a command button, each generates a series of radio buttons connected to the proper global variable. For example, the list to define the first radio button in the Signal menu is:<p>
<pre>
{radio " 1 Hangup" signal  -HUP}</pre><p>
<p>
This tells <B>menu_bar</B> to make a radio button, to label it <B>" 1 Hangup"</B> (the label is quoted to protect the embedded spaces), to connect it to the variable named <B>signal</B>, and to set the contents of the variable to <B>-HUP</B> when this item is selected. It is fairly easy to add additional signals or to make subsets of signals under different menus (termination, IPC, stop/wakeup, etc.). One final detail: the <B>{sep}</B> list in the <B>User</B> menu generates a menu separator bar.<p>
After the menus are made, another custom routine is called to create the scrolling list component. The routine is called <B>mk_list</B>; its first argument is the component name, and the second argument is the name of a routine called when an entry is double-clicked (or when the Return key is pressed when an entry is selected). This routine creates the list box, creates a scroll bar, creates connections between the two, creates a container frame to hold them, and creates key bindings to let the user manipulate the entries from the keyboard.<p>
Next, the row of buttons at the base of the window is created with the <B>buttons</B> routine. Like <B>menu_bar</B>, this routine accepts a series of lists to define the buttons it creates for us. The first argument is the name of the container component that holds all the buttons. The next argument is an optional heading for the entire button group - an empty string means you don't want a heading. The next argument specifies how the buttons are to be placed in the container: here I chose to pack them left to right, to make a row of buttons. The last argument before the button description lists flags whether or not there will be multiple groups of buttons, for example several vertical columns or several horizontal rows. Only one group is needed for this application, so the argument is set to zero.<p>
The remaining argument lists to the <B>buttons</B> command describe the buttons to be created. The first argument list sets the default button width large enough for a label of 4 characters. This makes the buttons change size together as the panel gets resized wider or narrower. Without it, the buttons would have widths proportional to the lengths of their labels, which can look messy sometimes. The next three lists specify individual buttons. Each is a command button, with a label on the button face, and a routine to call when the button is pressed. The <B>Scan</B> button is connected to the <B>scan_proc</B> procedure, and the <B>Kill</B> button is connected to the <B>kill_proc</B> procedure. The <B>Exit</B> button simply calls Tcl's <B>exit</B> command.<p>
Finally, the Tk <B>pack</B> command is used to position the containers that hold all of the visual components. The menu bar goes across the top of the window, the process list is packed underneath that, and the command buttons are positioned against the bottom of the window. Note that both the menu bar and command buttons are allowed to fill out the width of the window, with the <B>-fill x</B> option to <B>pack</B>. The process list is told to use all remaining space in the window, with the <B>-fill both</B> and <B>-expand yes</B> options.<p>
That's all there is to the support routines. The main body of the script comes next. <B>make_control_panel</B> is called to create the interface, and <B>scan_proc</B> is called to fill in the process list so the user has something to look at when <B>KP</B> opens up. Next, the main line code enters a loop. It waits for the <B>user</B> variable to change (via the live user selecting an item under the <B>User</B> menu) and calls <B>scan_proc</B> to update the process list. All the other controls are still active while the loop runs: the process list can be scrolled; menu items can be selected; and the command buttons can request an updated process list or signal a process.<p>
Another example, called <B>NS</B>, is shown in  Listing 2 with a screen shot in  Figure 2. Its purpose is to capture and display the output of the <B>netstat</B> command. It is very similar to KP, in that it has a few menus, a scrolling information panel, and a row of control buttons. In some ways, it is actually simpler than KP, in that there's less to do - there is less processing of the text, and there's nothing to select in the scrolling list. On the other hand, <B>NS</B> is also a little more complicated than KP because there are more buttons that call <B>netstat</B> with different arguments. (For BSD and Linux systems, the arguments will need some tweaking.)<p>
Tcl's built-in lists, Tk's well-constructed components, and a few routines to hide most of the details, make it fairly easy to write applications like this.<p>
<B>Conclusion</b><p>There's no reason that day-to-day administrative duties can't look better than a VT100 emulation, and that they can't be made more efficient, more convenient, and more robust. The techniques covered in this article may help you add some buttons to the commands you need the most and enjoy the benefits that a graphical wrapper can bring to the standard system commands.<p>
<B>Availability</b><p>The sources and library routines for <B>KP</B> (kill processes) and <B>NS</B> (<B>netstat</B> in a window) are available at <B>http://www.balr.com</B>.<p>


<P>


<H1>About the Author</H1><p>
Mike Hall is a senior consultant with BALR Corporation, and can be reached at mghall@balr.com





<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
