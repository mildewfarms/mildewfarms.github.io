<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i03:  Validating Email Forwarding</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/1997/mar97.tar"><b class=codeListing>mar97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Validating Email Forwarding</H1><p>
<P>
William Schaffer<P>

</H1><p>
Many people in the computer community have multiple accounts. They may have accounts at different computing sites that they support, or accounts for different development projects they are involved with, or private and professional accounts. Also, a person may use one Internet provider one month, and then get a better offer with another the next month. Thus, checking multiple computer accounts for email can be an annoying task. Users could check their email by logging onto each different computer, but this can be time consuming and not very rewarding if no new mail has arrived. Users could setup a popmail configuration for each account, but that isn't very graceful either. Enter the .forward file.<p>
The .forward file is a mechanism by which a person can have his or her email sent from one account to another. When an email message is received by the mail services of a computer, it checks for the presence of a .forward file in the user's directory. The assumption here is that the host is configured to handle this. If a .forward file is present, it is parsed and a copy of the message is sent to each destination listed. This destination can be on the same computer or across the world. With email forwarding, email will be delivered to the user, as mail should.<p>
Listing 1 shows the contents of a sample .forward file. The first line instructs the host to forward the email to <B>myaccnt</B> at a remote computer system. The second line forces a local delivery in addition to the remote forwarding. This is accomplished by the leading "\" in front of the username. Mail processing commands could also be implemented within this file. The .forward file must be owned by the user, and it must be readable by root. If it fails to meet these criteria, it will be ignored.<p>
With email forwarding, you can direct where email is going, but what happens when an account disappears? Suppose a person has a computer account at work, but works from home and uses a personal account. The work account is configured to forward email to the personal account. What happens if this person relocates, discontinues the personal account, and forgets to redirect the other account? The machine at work will still try to send email to the account named in the .forward file. The message will never get delivered, obviously, and will probably wind up in the admin's mailbox marked as undeliverable. Or, it may just dissappear.<p>
For another scenario, consider a developer, who is involved in several projects each with an account on a different host. This person will want to receive email on the account associated with the current active project. So, they'll setup a .forward file to forward from machine A to machine B. As the project enters a test phase, they move to active development on machine C. Now, machine A forwards email to machine B, and machine B forwards to machine C. If the developer returns to machine A, they may inadvertantly set machine C to forward email back to machine A. Now the email is being sent from A to B to C and back to A again, and so on. The mail systems will be more than happy to do this. This is a correctable situation, but it has negative effects on network and computer load.<p>
I wanted a utility to check the email forwarding of users on a given host. So I set about writing <B>checkfor</B>. This is a simple utility that takes a username@hostname pair as its input. It recursively traces the email forwarding tree from that host, down to its terminations. The program then generates a report of all username@hostname pairs that it finds along the way. The next few paragraphs describe how <B>checkfor</B> accomplishes this task. If you're the go-ahead-and-try-it type, then skip ahead to the "How is it used" section.<p>
<B>Checkfor</B> uses TCP sockets to connect to and talk with the hosts that it encounters. Given a username@hostname pair, <B>checkfor</B> first opens a socket to the remote machine on port 25. This is accomplished in the <B>sock_open()</B> subroutine. This routine first creates the local socket with the <B>socket()</B> function call. The parameters to this call define the socket as using the ARPA Internet protocol and as a two-way connection-oriented data stream.<p>
Next comes the hostname lookup. <B>Checkfor</B> uses the <B>gethostbyname()</B> system call. This returns the numeric IP address of the host in question. The remote machine may actually be the local machine name. One feature of socket programming is that local and remote connections appear the same, and don't require different code. Once the socket has been created, and the IP address determined, the <B>connect()</B> function call is used to form the data link between the two machines, using port 25. Now the remote machine can be interrogated for information about the user. Data is sent and received through the socket to the remote machine using the <B>write()</B> and <B>read()</B> system calls.<p>
Port 25 is used because it is the port on which the Unix mail programs listen for incoming mail. This is one of Unix's well-known ports, and thus should only be used for this purpose. If you were to <B>telnet</B> to a Unix machine on port 25, you would be greeted by the local SMTP utility. (SMTP stands for Simple Mail Transfer Protocol and was defined in RFC-0821 by Jonathan B. Postel.) SMTP provides textual responses as well as three-digit numeric responses. Each line begins with a three-digit code. If a response spans multiple lines, the three-digit code is followed by a hyphen, otherwise it is followed by a space. <B>Checkfor</B> uses the numeric responses. Refer to  Listing 2 for a sample SMTP query session.<p>
<B>Checkfor</B> connects to the remote machine's SMTP service and waits for a response. The SMTP service will open up discussion with a 220 message identifying itself and the host. <B>Checkfor</B> uses the <B>responses()</B> subroutine to wait for the three-digit code. Upon receipt of a 220, <B>checkfor</B> then identifies itself to the SMTP service. It sends the HELO command through the socket to the remote machine. Again, <B>checkfor</B> waits for a response from the remote SMTP service, this time the code is a 250. If a timeout occurs, <B>checkfor</B> issues a QUIT and disconnects the socket.<p>
If the HELO command was successful, then <B>checkfor</B> starts to ask about the user in question. It first tries to use the EXPN command. This command has the username as the parameter. If the username is found on the machine, it should return a result code of 250. The text following the result code indicates where the email will be sent.<p>
The program now has the information it came for and can parse out any username@hostname pairs. However, I found an Ultrix machine that will return a result code of 252, without the information I wanted. Instead of informing me about email forwarding, it just tells me whether the username is valid on that machine. If a 252 is returned, then <B>checkfor</B> issues the VRFY command with the username as the parameter. Again, if the username is found, a result code of 250 should be returned, followed by text containing the forwarding information. In both cases, if the username is not found, a 550 result code is returned. <B>Checkfor</B> prints a user not found message on the standard output and stops following this lead.<p>
I mentioned that SMTP returns a numeric result code and textual information. If the username was found, it will return a 250 result code, followed by the user's email address. <B>Checkfor</B>'s <B>responses() </B>subroutine spools this information into a buffer. The <B>parse_names()</B> subroutine breaks the buffer up into username@hostname pairs. It then checks to see whether the username@hostname pair is the same as the pair it just checked. If so, it stops pursuing this branch, and backs up the tree one level. If this is not the same as the immediate username, <B>checkfor</B> compares the history buffer to see if this pair has previously been found. If it has, <B>checkfor </B>displays a message stating that this is a duplicate username@hostname pair. If this is a completely new pair, then a recursive call is made to the <B>check()</B> subroutine, thus starting the whole thing over again.<p>
<B>How is </B>i<B>t </B>u<B>sed?<p>
Checkfor</B> was written on a 486 platform running Linux. It should work on most Unix machines. The only requirement is BSD Socket compatibility. The source code is available via anonymous <B>ftp</B> from: <B>ftp://ftp.mfi.com/pub/sysadmin</B>.<p>
Place the source in any working directory and unpack it with <B>tar -xvf checkfor.tar</B>. You will need to edit <B>checkfor.c</B> and enter your machine name in between the quotes beside OURHOSTNAME. Then compile with <B>cc -o checkfor checkfor.c</B>.<p>
There are two ways to use <B>checkfor</B>. The first is to enter the username@hostname pair on the command line (e.g., <B>checkfor snowman waterw.com</B>). This would check the mail forwarding of just that particular user. The invocation and results are in  Listing 3. The second form of usage is to pipe the data through the standard input. This is accomplished using the <B>-s</B> option to <B>checkfor</B> (e.g., <B>cat userdata | checkfor -s &gt; results.txt</B>). The format of userdata is each username hostname pair on a line by itself, separated by a space, see  Listing 3.<p>
So, now you're ready to check the email forwarding of the users at your site. What do you do if you find an email routing problem? The first thing you should do is contact the user in question. Depending on the problem, such as forwarding to a nonexistent address, it may be impossible to contact the user electronically, and you might have to resort to more primitive means of communication. If this doesn't work, ask the remote sys admin, perhaps they know where the user can be contacted. If this turns up no leads, consult your local policies on account modifications and fix the problem.<p>
In retrospect, I would like to redo the hostname lookup. The use of <B>gethostbyname()</B> does not work for all mail exchangers. DNS can have MX entries for a host, but no A record of it. This will cause <B>checkfor</B> to fail. To correct this problem, the hostname lookup should be performed using the <B>res_*</B> revolver library functions. Aside from that shortcoming, the code works well and has saved me from various email headaches. I hope you find it to be a useful tool. 
<p>


<P>


<H1>About the Author</H1><p>
William Schaffer recently started as a Software Engineer at Securicor Telesciences, Inc.,where he develops software for embedded Lynx OS platforms. He also spends time working with Linux and FreeBSD.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
