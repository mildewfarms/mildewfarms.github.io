<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i03:  Babysitting Your Intranet and Internet</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1997/mar97.tar"><b class=codeListing>mar97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Babysitting Your Intranet and Internet</H1><p>
<P>
Jonathan Feldman<P>

</H1><p>At work 12 months ago, we didn't have a good tool, homegrown or otherwise, to monitor our external Internet services and public library Intranet. We needed to make sure that the various servers and services were up at all times because people were going on vacation, and we weren't sure someone who knew how to <B>ping</B>, <B>telnet</B>, and <B>netstat</B> and such would be around at all times. Clearly, the automation department needed some automation. So, we wrote a script, <B>sitter</B>, which does basic network management (i.e., watches the network) and screams if something goes wrong.<p>
We decided to write rather than buy a tool because we know people who've spent a lot of money on "network management" packages, and although some of the packages live up to that lofty name, others do not because of overcomplexity and attempting to be smarter and more effective than a computer can be. The fact is, if something is wrong with the network, you need a person to fix it, not a tool that uses the network to fix it.<p>
So, the germane function of "network management" should probably be monitoring, with a bonus function of interpreting events in plain terms so that users or administrators can take appropriate action (i.e., "Please reset the mail server," or "Please get someone to check the physical network, more than one gateway is not responding").<p>
And if you know exactly what you want to monitor, it is nice to track precisely the desired services, no more, no less. For example, who cares if your Web server is responding to SNMP or ICMP packets? Your management package might tell you that the server is "up," but this does you no good if, for example, it is not serving up HTML because the <B>httpd</B> process has died. That hunk of silicon might as well be a boat anchor; it's not doing what it's supposed to be doing!<p>
With these points in mind, we chose to code a simple and direct <B>sitter</B> script that would do simple network monitoring. Because the script monitors services rather than servers, it can monitor through a proxy (<B>socks</B>-like) firewall, which not all network manager software can do. The <B>sitter</B> script does the equivalent of sitting at a terminal and continually trying the Web site or sending email back and forth to ensure that the gateway's up. Because this is drudgery of the highest order, thank goodness for automation! You can even avoid the drudgery of typing in the <B>sitter</B> script by getting it from:<p>
<pre>
ftp://ftp.co.chatham.ga.us/pub/sitter.bash</pre><p>
</b><p>The script is not fancy, but it works, and you can't beat the price. This tool has saved us a lot of irate phone calls (which is one of the points of network management packages), because we know first thing when something goes down. You do, however, have to remember to check the console periodically. You could code a network "write" message to replace the console messages, but again, it is of questionable value to use the network as a transport for a service or a message when the whole network may be down.<p>
If you were serious about timely intervention, you could hardwire a printer to your help desk from the "sitter" machine, or hook an outgoing modem to the sitter machine and make the <B>sitter</B> script dial several pagers when something is amiss. But, if you assiduously check the console, these measures are unnecessary.<p>
<B>Implementation</b><p>The toughest part about coding a monitoring program was figuring out what to do with the monitoring information, and how to write intelligent alert messages based on that information. But, as with any automation, once we figured out how we would do it manually, the process naturally turned into a program.<p>
When figuring out any problem, network or otherwise, it helps to start on the inside and work your way out, that is, to start simple and progressively add complexity. In the network world, this means you should first figure out whether your local network is okay before starting to freak out about other networks. And, always check IP numbers before complicating things with name services. Check those separately, as well as the other services. So, the process, which we had always done manually, turned out to be:<p>
1.  Check the local network, because the local network or network card may be the problem.<p>
2.  Check other internal networks. Routing may be the problem.<p>
3.  Check outside (Internet) networks. ISP may be the problem.<p>
4.  Check naming services; a lot of services won't work unless these are working.<p>
5.  Check vital services via WKS socket numbers.<p>
Initially, I wrote a <B>pingok()</B> function of the script, which would <B>ping</B> the IP numbers given in items #1 through #3. It would return a failure value if passed an IP number that did not respond. In the body of the script, it would go through all the IP numbers and complain appropriately to the console. It would use the <B>nslookup</B> program to specifically go to the DNS server in question and ask it what its name was, because even if it doesn't know anything else, it had better know its own name. This was a function I used to use manually, that is, while logged into "degobah," to check a couple of other machines' DNS, I would type:<p>
<pre>
$ for i in hoth alderan endor ; do nslookup $i $i ; done</pre><p>
</b><p>Any error meant that the name server was down. I simply applied this to the monitoring script.<p>
The next process was to figure out exactly how to monitor a service rather than a server. Each service usually lives on a WKS port, which is typically listed in <B>/etc/services</B>, or <B>%WINBOOTDIR%\services</B> for NT and Win 95. Some services, notably the (relatively) new ones like http, aren't listed by default in some distributions, but you can always add the line:<p>
<pre>
http    80/tcp</pre><p>
<p>
to your services file, which makes for lovely symbolic resolution of service names.<p>
We used to check services by hand using the versatile Unix <B>telnet</B> tool. For example, a simple way to see if any process is listening at the http socket of your Web server might be:<p>
<pre>
echo -e "J close\r" | telnet -e J www.degobah.com http ||
echo "Can't reach the web server!"</pre><p>
<p>
If the server is up, but nothing is listening at the socket (or the process doing the listening has died), you'll get a "Connection Refused." If the server is down, you'll hang as long as the timeout value for <B>connect()</B> is defined in the operating system. For Linux 1.2.x, this could mean several minutes, but when doing this interactively, you can just hit the interrupt key. This is a usually good enough test of whether a service is up, because unless somebody malevolent or prankish has reconfigured your box, the service is either listening or it's down.<p>
So, although you could type:<p>
<pre>
echo -e "J close\r" | telnet -e J smtp.my.com smtp ||</pre><p> echo "Can't reach our mail server!"</pre><p>
<p>

you could also type:
<pre>
( sleep 5 ; echo -e "J close\r"; ) | telnet -e J  \
smtp.my.com 25 |
grep -i SMTP || echo "Can't reach our mail server!"</pre><p>
<p>
which looks for the server to say something about SMTP. Again, you can extend this idea to any TCP service. If, for example, you are working for the Ultra-Paranoid HTML Corporation, you might want to make darn sure that your web server is up, and serving up the absolutely correct HTML index:<p>
<pre>
( echo -e "GET /index.html\r" ; sleep 5; echo -e \
"J close\r" ; ) |
telnet -e J www.my.com 80 | grep "Some Unique Text \
in Your Index Page" ||
echo "I can take it, but I can't dish it out!  \
(WWW Down!)"</pre><p>
<p>
This is probably overkill for basic monitoring functions, but it is possible.<p>
So, since services can be checked manually using <B>telnet</B>, it is also possible, through the magic of shell scripting, to do it in an automated, unattended fashion. This is what I did in the <B>sitter</B> script. Bear in mind that the only services discussed here are TCP services, because the <B>telnet</B> tool reads from and writes to a TCP socket, but fortunately, many critical services use TCP sockets. When deciding which services to monitor, if you're unsure whether it is a TCP or UDP service, you can always check the services file.<p>
The neat thing about using <B>telnet</B> in this way is that you are pretending that you are a real client of whatever service you're checking, and so you can monitor a service even through a firewall or proxy gateway. So, instead of pinging your way around networks, you could simply connect to a WKS that is allowed through the firewall. To this end, so that the <B>sitter</B> script could be "inside" and monitoring, I implemented a variable, "FAKEPING," which, instead of real-pinging via ICMP, uses <B>telnet</B> to connect to the FAKEPING socket. (See Figure 1.)<p>
Of course, to use <B>telnet</B> to "FAKEPING," you must specify a socket that you know the receiving end will accept when all is working correctly. The"echo" socket used to be a good one to use, but since some denial-of-service attacks use this socket as a target, most serious machines like the DNS root servers no longer accept echo requests. The workaround for these servers is to use the "domain" socket, because they do allow this type of request. (See Figure 1.)<p>
The implementation of FAKEPING, in our Linux environment, at any rate, proved to be interesting. Since Linux's <B>telnet</B> tool doesn't time out on a dead IP address for more than a couple of minutes, checking IP addresses with FAKEPING would be time consuming at best. In the interests of quick reportage, the script spawns the <B>telnet</B> process (along with its associated "OK or not OK" subshell, and if it doesn't report back within the TIMEOUT period, assumes that the FAKEPING failed.  (See Figure 1, lines 64-70.)<p>
I hate using temporary files to hold information of a flag-oriented nature, because you can never be absolutely sure that you are using a uniquely named file. But, to communicate backward from a spawned process, I either had to: (a) create a named pipe, thus creating a uniquely named temporary file anyway, and then worry about permissions of the calling process; or (b) have the spawned process create a uniquely named and previously agreed upon regular file that would either be of zero size on failure, or greater than zero on success. I chose option b, because it was simpler. This was one of the few limitations of using a shell script versus C or Perl encountered during this particular adventure, so it was no big deal - just annoying from a purist's point of view.<p>
However, the <B>bash</B> (Bourne Again Shell) does have a nice feature, the <B>$!</B> variable name, which means "my last spawned process," so it provided a good handle to kill the process when necessary. Note that job control does not work in an batch script, it only works from the command line. Thus, to refer to the spawned process as %, and try to kill it with <B>kill %</B> does not work from a script, although it does work from the command line.<p>
Linux <B>telnet</B> once again proved somewhat stubborn, in that it does not die when its parent dies, but decides to stick around with a parent ID of 1 (<B>init</B>). To keep things tidy, we did not kill the subshell, instead we killed the <B>telnet</B> explicitly,<p>
with:<p>
<pre>
ps -l | awk '/'$!'/ &amp;&amp; /telnet/ {print $3}' | \
xargs kill &gt;/dev/null 2&gt;&amp;1</pre><p>
<p>
instead of:
<pre>
kill $!</pre><p>
<p>
The shell dies on its own once the <B>telnet</B> dies. I think that the <B>kill $!</B> of the shell would kill the <B>telnet</B> child with some default distribution <B>telnet</B> clients, but probably not most. It does not work under Dynix/ptx 2.01 or AIX 3.2.5, but these clients also have a much shorter timeout, making it less of an issue. However, their default <B>telnet</B> timeouts are still greater than a minute, which is silly when checking a service. If a service doesn't respond in a couple of seconds, something is wrong. So, spawning the process and killing it off in this way actually provides more control and lets you define your own acceptable response time.<p>
<B>Usage and Porting Concerns</b><p>Some caveats: the <B>sitter</B> script was written in, and tested with <B>bash</B>, and may or may not work with the Korn (<B>ksh</B>) shell. It definitely will not work with the standard Bourne (<B>sh</B>) shell or the C (<B>csh</B>) shell. Fortunately, <B>bash</B> is freely available from the Free Software Foundation, or as source from your nearest Linux distribution.<p>
Also, the <B>ps</B> command works differently on different machines. You will almost definitely have to change the PID field number that the <B>awk</B> command extracts from the <B>ps</B> command (<B>$3</B> under Linux) in  Listing 1, line 70. You might also have to change the flag that <B>ps</B> issues (same line), but <B>-l</B> will probably work for most.<p>
The script assumes that standard tools like <B>grep</B>, <B>awk</B>, <B>ps</B>, <B>ping</B>, <B>telne</B>t, and <B>nslookup</B> are in the search path, so you don't have to reinvent those particular wheels. However, the script won't work unless those tools are in the calling environment's search path. (They usually are on most systems.) Also, if you want to use the script from the inside of a proxy firewall, say, <B>socks</B>, you must have "socksified" your system. (This is probably going to be true if you are actually using <B>socks</B> for anything.)<p>
Using the script is easy. Substitute your own IP numbers in place of the LOCALNET, REMOTENET, and INET numbers (starting on line 24, Listing 1). Remember that to get a good sense of whether a network or just one host is down, the script needs to be given more than one "known good host" IP number per variable, separated by spaces.<p>
To test your own DNS, change line 32 to reflect your own DNS hosts. And to change the script so that your own services are tested, change line 34 to reflect "host:service," separated by spaces.<p>
Of course, testing the script with "known bad" services is important too, just to make certain it works properly in your environment, so just give the script IP numbers that don't exist, or services that aren't in use, then run it and watch it react. Hopefully, once you run the script with the "known good" hosts and services, everything will look terrific, and the <B>sitter</B> will exit silently. I like to tell <B>cron</B> to run the script every hour on the half hour. If you are more Type A, you may want to do it more often.<p>
The great thing is, this <B>sitter</B> will never tell you that it's unavailable because it's going to the prom, it will never bring over unwanted guests, it won't complain to its friends about your kid, and it won't use your phone unless you ask it to. 
<p>


<P>


<H1>About the Author</H1><p>
Jonathan Feldman works at the Chatham County Government in Savannah, Georgia, with UNIX and NetWare. He likes to keep things simple so that even he can understand them. In his spare time, he likes to write spooky poetry and grow babies, roses, and grapes with his pal, Stacy.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
