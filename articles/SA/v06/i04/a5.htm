<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i04:  Spatchula - A Script to Patch Solaris LANs</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a5_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1997/apr97.tar"><b class=codeListing>apr97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Spatchula - A Script to Patch Solaris LANs</H1><p>
<P>
Wayne Wonchoba<P>

The Sun Solaris (2.x) bundled patch scheme makes patch installation potentially very easy on a Solaris LAN. Solaris patches are uniquely identified by 8-digit strings like "102832-02"; which are unique across all versions of Solaris. Suppose I wish to install patch "102832-02," after obtaining it and unzipping it into directory <B>./102832-02</B>, I can:<p>
<pre>
root 82&gt; cd 102832-02
root 83&gt; ls -F
Install.info*           SUNWolslb/     old_style_patch/
README.102832-02        backoutpatch*
SUNWolrte/              installpatch*
root 84&gt;</pre><p>
<p>
and just <B>./installpatch</B> to install the patch on this system. The machine does not need to be brought into single-user mode while this is occurring (although some patches recommend the machine be in a "quiet" state). The <B>README.*</B> file contains, among other things, special installation instructions. Some patches (e.g., kernel patches) require a reboot of the host, and some patches require no further action at all. <B>/bin/showrev -p</B> will list all patches currently installed on a Solaris host.<p>
You can also obtain patches from a CD-ROM, or for free from the SunSolve Web site: <B>http://www.Sunsolve.com/</B>. The advantage of the latter is that the Sunsolve site has the most up-to-date patch information for various Solaris versions. I will focus on getting patches from the Sunsolve site, rather than from a CD-ROM.<p>
The goal is to use the Solaris bundled patch functionality along with the current patch information at the Sunsolve site to painlessly keep the Solaris LAN patched with the most updated ones available. The solution should be as simple and as scalable as possible.<p>
<B>Overview</b><p>Given the description above, here is what I need to do:<p>
1.  Find out which patches "ought" to be on each host. Check the Sunsolve site to see if anything has been added.<p>
2. Get any patches I don't already have.<p>
3. Go to each host and install the patches.<p>
4. Log all these things while I do them.<p>
To do this, I wrote a script called Spatchula - the Solaris patch Unattended Lan Applier. I chose to have a common NFS-mounted directory, <B>$PATCH_DIR</B>, to store system-wide patches. Thus, each host has access to whatever patch it needs, and I don't waste disk space by saving patches locally on every host (each host has local patch information and data).<p>
In my opinion, there was no point in writing Spatchula in any language other than perl, which is not only freely available and well supported but also has many useful extensions, one of which (the LWP extension - "Library for WWW access in Perl") I will use here.<p>
Note that there is no need to know Perl to use this script. All administration is done by changing a simple data structure at the beginning of Spatchula. Examples below will illustrate. If you do know Perl, note that although Spatchula is a few hundred lines long, its essence is very simple  (see Listing 1). Please see the source code for the implementation of the various functions above. (The source code is available at: <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.)<p>
<B>Setup</b><p>You will need to have a working perl 5 (at least patch level 2) on your system. Use <B>perl -v</B> to check your version. Some sites call perl 5 "perl5." As of this writing, the most recent version of perl 5 can be found at:<p>
<pre>
http://www.perl.com/CPAN/src/latest.tar.gz</pre><p>
<p>
You will also need to change the first line of the script to the location of your version of perl 5. This script uses the excellent and freely available LWP extension for <B>http</B> and <B>ftp</B> negotiation. To see whether you have installed this extension, try (among other things):<p>
<pre>
perl -e "use LWP"</pre><p>
<p>
If there's an error (i.e., Perl complains about not being able to find the LWP module), you need to install the LWP module. You can get it from your nearest CPAN site. For more information on CPAN sites, see the perl home page: <B>http://www.perl.com/perl</B>, or more specifically:<p>
<pre>
http://perl.com/perl/info/cool_modules.html</pre><p>
<p>
Refer to the <I>Programming Perl</I> book (revised for Perl 5) by Larry Wall, Tom Christiansen, and Randal Schwartz for more Perl information.<p>
To use Spatchula, you must first define the hosts you wish to patch. This information is defined in a data structure at the beginning via:<p>
<pre>
my @patch_parameters = ( ['ALL_HOSTS',   ': : '           ],
['snapper',     '2.5.1 : -d   :' ],
['trout',       '2.5.1 :      :' ],
['sturgeon',    '2.5   :      :' ],
);</pre><p>
<p>
This defines a patch suite for three hosts: snapper, trout, and sturgeon, Associated with each host is an action string:
<pre>
os-version : arguments_to_installpatch : patches_to_skip</pre><p>
</b><p>The <B>os-version</B> is the version this host is running; I could get this information from <B>uname</B>, but since it is fairly static, I require it explicitly.<p>
<B>Arguments_to_installpatch</B> lists arguments, if any, to be passed to <B>./installpatch</B> for the indicated host. Above, I have passed the <B>-d</B> switch to snapper, which prevents <B>installpatch</B> from saving old versions of patched files. This prevents the "backing out" of patches so installed and might be done if you were running out of local disk space in <B>/var</B> (which is where patch data is stored, by default).<p>
Finally, <B>patches_to_skip</B> lists patches to be omitted from installation, even if they are recommended. This is useful if the patch is to be applied to a nonexistent package on your system.<p>
<B>ALL_HOSTS</B> applies to every host. To skip patch 103683-01 on each host, for example, you could add this patch id to <B>ALL_HOST</B>'s id string. I will provide examples of these various options in the Examples below.<p>
Next, I define the location of the NFS-mounted patch directory, the log file, and the Sunsolve login and password (in plaintext):<p>
<pre>
my $PATCH_LOG = "/spare/patches/scripts/patch_log";
my $PATCH_DIR = "/spare/patches";
my $SUNSOLVE_LOGIN =  '';  # supply your own Sunsolve login
my $SUNSOLVE_PASSWD = ''; # supply your own SunSolve passwd</pre><p>
<p>
Be sure that the "serving" host (the host you are running the script from) appears in each "client" host's <B>/.rhost</B>; more generally, be sure that the "serving" host appears in each "client" host's <B>/etc/hosts.equiv</B>. In this way Spatchula can <B>rsh</B> to each host to execute <B>installpatch</B>.<p>
<B>Usage</b><p>Once the brief setup is completed, just execute:<p>
<pre>
./Spatchula</pre><p>
<p>
as root (in the background or out of cron) and go take a nap. Then check the log file (below).<p>
<B>Centralized </B>l<B>ogging</b><p>I do not use <B>syslog</B> in the logging procedure. Spatchula logs all attempts to download patches over the network, the success or failure of each attempt to patch, and the "special install instructions" for each patch successfully applied. "Errors" are logged on lines beginning with "!", so you can easily <B>grep</B> for them.<p>
On a large network, patch maintenance is therefore reduced to running the script, then checking the log file. Many patches require a reboot of the system, so you might have to schedule this later with users.<p>
<B>Cleanup</b><p>After Spatchula finishes installing patches, it removes any patch (directory) in <B>$PATCH_DIR</B> that no host needed. This will keep <B>$PATCH_DIR</B> from getting too cluttered.<p>
<B>Example</b><p>I will illustrate the use of Spatchula and its features on the simple three-node Solaris LAN above. The hosts are sturgeon (Solaris 2.5), trout (2.5.1), and snapper (2.5.1). All hosts have the patch directory NFS-mounted in <B>/spare/patches</B>. The script is run from sturgeon, and the two remaining hosts have sturgeon in <B>/.rhost</B>.<p>
After running the script, I see the following in <B>$PATCH_LOG</B>  (see Listing 2). This is the "usual" state of affairs. All hosts are properly patched as of the dates indicated. To add another Solaris 2.5 host, catfish, to this suite, I insert the following line in the <B>@patch_parameters</B> array:<p>
<pre>
['catfish',     '2.5  ::'           ],</pre><p>
<p>
then run <B>perl -c ./Spatchula</B> to do a quick syntax check, and finally  run <B>./Spatchula</B>. In checking the logs, I see there were some problems (see lines beginning with '!' in  (Listing 3).<p>
First, Spatchula had to grab patches 103017-05, 103187-09, and 103746-01 over the network (presumably for catfish). These patches are stored in the <B>$PATCH_DIR</B>.<p>
All three patch installations, however, failed on catfish. The first and third failed because they patch a nonexistent package on catfish. The second fails due to lack of local disk space on catfish to save old patch files. The error diagnostics in the log file come directly from the <B>./installpatch</B> command.<p>
As a quick fix, I can change catfish's action string to:<p>
<pre>
['catfish', '2.5 : -d : 103017-05 103746-01' ],</pre><p>
</b><p>and try <B>./Spatchula</B> again. Things work better now  (see Listing 4).<p>
Now patch 103187-09 has been successfully installed on catfish; there are no special instructions for this patch (the special instructions are taken directly from the <B>README.*</B> file for the patch). Note that the script removed the patch directories 103746-01 and 103017-05 that were just downloaded on the previous pass above. Because these two patches are now omitted for catfish, no host needed them on this pass.<p>
Although there are many reasons a patch installation might fail, it has been my experience that the two causes above (lack of local disk space and patches for nonexistent packages) are the two most common. Fortunately, as shown above, these are simple problems to fix. Note that using the <B>-d</B> switch may not be the best thing to do, because patches so applied can not be backed out later, if needed. I use it here merely for illustrative purposes.<p>
<B>Security Issues</b><p>Security was not my main concern when I wrote Spatchula, but it's clearly an important issue. After all, this script monkeys around with your operating system as root. Spatchula does pass perl's "taint-checking" procedures (see how it is invoked with the <B>-T</B> switch).  This means that there are no "obvious" security problems. It doesn't mean much more than that, so caveat emptor.<p>
However, I am confident that if Spatchula itself isn't compromised, then its use introduces no additional security problems than doing patch installations "by hand" as root. If used, it certainly should be added to a site's tripwire (or equivalent) checks. Tripwire is a freely available security tool that monitors and reports changes to specified (important) files. It can be obtained from <B>ftp://coast.cs.purdue.edu/</B> and various other anonymous <B>ftp</B> sites.<p>
<B>Improvements</b><p>This script is a first version and can be improved in many ways. There should be more patch functionality, that is, you should be able to manipulate patches other than the recommended ones. My biggest concern was to keep all our machines properly patched; it's clear Spatchula can be easily extended for any patches whatsoever. The script should also check and rectify obsoleted patches on its various hosts.<p>
Right now patches are installed one at a time, "alphabetically," on hosts in the order they are listed in the <B>@patch_parameters </B>array. On larger networks, you might want to fork a bunch of <B>installpatches</B> to various hosts. I haven't needed to do this because of our moderate network size (about 12 Solaris boxes).<p>
You could even make each host (or a group of hosts) responsible for their own patch installation by having each (group) run private copies. This would defeat the centralized logging, however. It might make sense to do this to groups of machines dedicated to different purposes with each group presumably requiring different patches.<p>

Spatchula does not handle patch clusters; therefore you must have a SunSolve registration to use it. But, because the script currently only tries to install recommended patches, and patch clusters (containing these patches) are freely available, this qualifies as a bug.<p>
Of course, Spatchula makes many assumptions about the layout and locations of the various SunSolve patch pages from which it gleans patch information. Should this information change, the script would have to change as well. I've been using the script for some time, and found it to be robust.<p>
Spatchula doesn't work on the old unbundled "Solaris 1.x" patches (that's SunOS to you and me). I have not actually run Spatchula on any Solaris version earlier than 2.5, although it should presumably work on them; Let me know if it doesn't. I welcome any other suggestions for improving Spatchula. Please address Spatchula questions/comments to <B>spatchula@cc.ucsf.edu</B>. 
<p>


<P>


<H1>About the Author</H1><p>
Wayne Wonchoba is the UNIX geek at the Cancer Genetics Program, at UCSF's Cancer Center in San Francisco, CA, and a part-time UNIX consultant. He has a PhD from UC Berkeley in EECS, and has been root at various levels of competence on various UNIX platforms for about 8 years. He can be reached at: choba@mudpuppie.com or http://www.mudpuppie.com/.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
