<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i04:  Returning a Single Character in a UNIX Shell Script</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1997/apr97.tar"><b class=codeListing>apr97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Returning a Single Character in a UNIX Shell Script</H1><p>
<P>
Ed Schaefer<P>

</H1><p>
How many times when programming a UNIX shell script have you wanted to echo "Press any character to continue" without having the user press a carriage return? Or in a shell menu, have you ever wanted to have the user choose an option without the character being echoed? The UNIX shell doesn't provide an individual command for returning a non-echoed single character, but manipulating the terminal driver produces the same effect.<p>
The terminal driver controls input between the shell script and the UNIX kernel. The driver default is canonical or line-based mode; that is, entered characters are buffered and not passed to the kernel until the carriage return is pressed.<p>
To process just one character, turn off buffering by putting the terminal in raw or single-character mode. This article presents two methods for controlling the terminal mode; one method is a C program, and the other is a function written in shell.<p>
<B>The Algorithm</b><p>Whichever method is used, the steps necessary to set raw mode, get the character, and set back to canonical are:<p>
1.  Save original terminal settings.<p>
2.  Turn off canonical mode and echoing.<p>
3.  Get the character.<p>
4.  Reset the original terminal settings.<p>
5.  Return the character.<p>
<B>The ret_char C Program</b><p>The crux of the C program, shown in  Listing 1, is controlling the terminal driver with the I/O control command function, <B>ioctl()</B>. The three arguments for this function are:<p>
1.  File designator - 0 for input.<p>
2.   Request - TCGETA for getting current terminal settings  or TCSETA for getting the settings.<p>
3.   <B>termio</B> structure - This structure contains all the information for the terminal device. The full structure definition is  in header file <B>termio.h</B>.<p>
After a call to the <B>ioctl</B> function to save the terminal settings in a <B>termio</B> structure, the following line sets the terminal to "raw" mode and turns off echoing:<p>
<pre>
chgit.c_lflag &amp;= ~(ICANON|ECHO);</pre><p>
<p>
The following two lines instruct the driver to accept one character and to wait zero time units between characters:<p>
<pre>
chgit.c_cc[VMIN] = 1;
chgit.c_cc[VTIME] = 0;</pre><p>
<p>
After a call to the <B>ioctl</B> function to set the new <B>termio</B> structure, the <B>while</B> loop terminates after a valid character is entered; a valid character is a carriage return, an alphanumeric, an interrupt, or a control-c. (See sidebar "Recovering the Terminal" for more information.)<p>
Finally, another call to the <B>ioctl</B> function sets the terminal driver back to the original settings; after returning the character to the main function, printing the character returns it to the shell.<p>
Implement <B>ret_char</B> in a shell script as such:<p>
<pre>
achar=`ret_char`
echo "achar is: "$achar</pre><p>
<p>
<B>The Shell Function</b><p>The shell solution for returning one non-echoed character is bundling together the UNIX <B>stty</B> and <B>dd</B> commands:<p>
<pre>
readkey() {
oldstty=`stty -g`
stty -icanon -echo min 1 time 0
dd bs=1 count=1 &lt;&amp;0 2&gt;/dev/null
stty $oldstty
}</pre><p>
<p>
The <B>stty</B> command, set the options for a terminal, is analogous to the C <B>ioctl</B> function. The <B>-g</B> option displays the terminal settings in a form that can be used by another <B>stty</B> command, typically a colon-delimited string of hexadecimal values. Here, you can save the contents of that string as the value for the <B>oldstty</B> variable and re-establish that state after the single character is returned. <p>
Use the <B>stty</B> command to set the terminal mode (<B>-icanon</B>) and to turn off echoing (<B>-echo</B>). The "min 1" and "time 0" options instruct the terminal driver to accept one character and to wait zero time units between characters, respectively.<p>
The <B>dd</B> command, convert and copy a file, typically is used to input a file or device, execute some conversion process, and send the converted data to another file or device.<p>
In the <B>readkey</B> function, the <B>dd</B> command obtains one character because the block size, <B>bs</B>, is set to 1, and only one character (count=1) is copied from standard input. The number of characters processed by <B>dd</B> is written to standard error. Because this information is extraneous, standard error is redirected to <B>/dev/null</B>.<p>
The following is an example of calling <B>readkey</B>:<p>
<pre>
echo "Enter a keystrokec" key=`readkey`

echo "\nkey is "$key</pre><p>
<p>
In shell, a function must be in back quotes if it returns parameter(s).<p>
<B>Conclusion</b><p>I have presented a C program and a shell function for controlling the terminal driver in order to return a single, non-echoing character. Unfortunately, both examples are System V dependent. If you are running Berkeley or some other UNIX variant, look for the ioctl function call and the <B>stty</B> and <B>dd</B> commands to behave differently.<p>
<B>References:</b><p>Sage, Russell G. <I>Tricks of the Unix Masters</I>. Carmel, IN: Howard W. Sams &amp; Company, 1987. 
<p>


<P>


<H1>About the Author</H1><p>
Ed Schaefer is a frequent contributor to <I>Sys Admin</I>. He is a Senior Software Consultant employed by Meridian Technology Group of Portland, Oregon. Meridian provides Informix, Oracle, Sybase, and SQL Server consultants in the Pacific Northwest and in Arizona. Ed currently consults for a Fortune 500 company in Portland.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
