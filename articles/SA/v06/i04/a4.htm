<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i04:  Serious Shell Programming</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_l5.htm">Listing 5</a></span></td>
		<td><a href="../../../../source/SA/1997/apr97.tar"><b class=codeListing>apr97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Serious Shell Programming</H1><p>
<P>
Venkat Iyer<P>

</H1><p>
The aim of this article is to promote Bourne shell programming as an all-purpose alternative scripting language. I will describe some tricks and provide examples and explanations to demonstrate shell's little known and used features. New shell programmers can use the functions described here to ease shell programming restrictions, and experienced shell programmers may pick up a few tips. These examples are also available in source form as described later in the Availability section.<p>
<B>Why Shell</b><p>The C shell is without doubt a useful interactive shell, but for programming it is not much use. One major deficiency in the C shell is the absence of functions. The only way to reuse code in C shell is to write each function in a separate file and call each file as required. Doing something serious requires either large scripts with repeated pieces of code or many script files.<p>
Shell is an inseparable part of UNIX. Every UNIX system shipped, from Minix 2.0.0 to Solaris 2.5.1, has shell in it, and most shells seem to be pretty compatible with each other. It is fairly easy to write scripts that will work on a variety of UNIX systems.<p>
Shell is portable. All the examples in this article have been tested on a variety of systems - a 286 running Minix 1.7.4, Solaris 2.5, SunOS 4.1.4, DEC OSF1 V2.0, and HP-UX 9.05. On Minix though, these examples were run under <B>/usr/bin/ash</B>, and on HP, I used <B>/bin/posix/sh</B>. Note that <B>/bin/sh</B> will not work on either of these systems. I think these examples will work with any POSIX-compliant shell.<p>
Shell scripts are typically written by systems administrators or software vendors providing installation scripts for their UNIX-based products. I have written lots of scripts in shell for everything from an issue tracking system to HTML generators.<p>
<B>System Administration</b><p>Assume your <B>/usr</B> won't mount because of a typo in your <B>/etc/fstab</B>. Nothing will work - most of the commonly used executables are in <B>/usr/bin</B>. You have a few executables in <B>/sbin</B>, and sh is one of them. If you can edit your <B>fstab</B> using just sh, you will be up and running soon.<p>
<B>Install Scripts</b><p>Your install scripts cannot assume that Perl or Tcl is already installed on the target system. Using shell scripts instead of long readmes will make your software more system friendly.<p>
<B>Shell and Only Shell</b><p>Any regular shell programming book will tell you how to program in shell with all the standard UNIX text processing tools (like <B>grep</B>, <B>sed</B>, and <B>awk</B>) in place. However, I will discuss programming only in shell. All of my examples use just shell with the built-in functions. This is useful when none of the other utilities are available, but can be useful otherwise too. If you are writing a shell script that executes a loop many times over, then not having a new process for each iteration of that loop will save time. Some of the utilities I present will reduce the need for using external processes. I have seen considerable speed increases when a tight loop of about a thousand times didn't create an extra process.<p>
<B>Input and Output</b><p>There is only one command for input in sh - <B>read</B>. There is only one command for output - <B>echo</B>.<p>
Assume you just want to copy one file to another; in this case, you want to copy <B>/etc/passwd</B> to <B>passwd.old</B> in the current directory. You could use <B>cp</B> to do the work for you, but for this article, I don't want to use other executables.<p>
<pre>
Cat()
{
while read line
do
echo $line
done
}

Cat &lt; /etc/passwd &gt; /etc/passwd.old</pre><p>
<p>
<B>read</B> is very versatile. Let's say my <B>ls -al</B> listing looks like this:<p>
<pre>
drwxr-xr-x  2 venkat  staff     512 Sep 10 16:54 Mail
-rw-r--r--  1 venkat  staff 2177993 Aug 13 09:10 anzd.pdf
-rw-rw-r--  1 venkat  staff     712 Sep 17 15:04 art -&gt; /usr/art
-rw-rw-r--  1 venkat  swadmin   398 Sep 18 10:15 b.html
-rw-rw-r--  1 venkat  swadmin   274 Sep 18 10:08 b.html~
drwxr-xr-x  2 venkat  staff     512 Jun 14 18:32 backup
-rw-r--r--  1 venkat  staff     257 May 23 09:51 backup.notes
drwxr-xr-x  3 venkat  staff     512 Sep 22 11:34 bin
-rw-r--r--  1 venkat  staff  180378 Aug 19 12:48 bip.ps
-rw-r--r--  1 venkat  staff  180393 Aug  7 14:12 bip.ps~</pre><p>
<p>
I want to print only the names of the files that have the group id of <B>swadmin</B>. The following example shows how to do this in shell. The example uses the built-in command <B>[</B>, which is the same as <B>test</B>. Please see the man page on <B>test</B> for a detailed explanation of the operators it supports. Here I am just checking for equality. Note that I have quoted both the arguments to <B>test</B> (<B>[</B>) . It is always a good practice to use quotes.<p>
In its default behavior, <B>read</B> splits an input line into fields and assigns one field to each variable in order. The last variable gets the remainder of the line; the "junk" in this example will get symbolic link information (such as <B>-&gt; /usr/art</B>, which I am not interested in). If "junk" were not specified, then the symbolic link information would become part of filename itself.<p>
Here is an example for splitting input into fields:<p>
<pre>
GetSwAdminFiles()
{
while read perms blks user group size month day dateyear name junk

do
if [ "$group" = "swadmin" ]
then
echo "$name"
fi
done
}

ls -al &gt; /tmp/xx.$$
GetSwAdminFiles &lt; /tmp/xx.$$</pre><p>
<p>
You can change the way the input fields are separated by setting the shell variable, IFS. This variable determines how shell splits up fields on input. If you set IFS to something other than a space, then sh splits the fields with IFS separating the fields, instead of whitespace, as shown in the following examples.<p>
If you tried the Cat in the first example, you might have noticed that it strips out leading and trailing whitespace characters. I don't mind losing trailing spaces, but I like the indents on my text to remain. You can set IFS to something that you don't expect to encounter, (e.g., ^\), as shown below. (^\ is the Control-Backslash character).<p>
<pre>
Cat()
{
OIFS="$IFS"
IFS="^\"
while read Line
do
echo $Line
done
IFS="$OIFS"
}</pre><p>
<p>
Output doesn't use the IFS, but has its own quirks. If you do not want to put a newline after a message, there are two incompatible ways to do it. Most shells honor just one. Solaris sh wants a <B>\c</B> in the string; whereas SunOS sh wants a <B>-n</B> after the echo. This function in the library finds out the suitable option for your shell. It assumes that if your shell doesn't understand <B>-n</B>, it will understand <B>\c</B>. You just use EchoN wherever you want to output something without a newline.<p>
<pre>
unset _NeedEchoBackslashC_

[ "`echo -n ff`" = "ff" ] || _NeedEchoBackslashC_=1


EchoN()
{
if [ "$_NeedEchoBackslashC_" ]
then
echo "$*\\c"
else
echo -n "$*"
fi
}</pre><p>
<p>
The most common reason to use output without newline is when you prompt for a value. The following example shows one use. This function, <B>ReadValue</B>, takes the variable name as the first parameter, the default value as the second parameter, and then the prompt. It prints the prompt, waits for the user to type in a value and returns it in the first parameter. If the user types in nothing, the default value is returned. If the user types in "none," then an empty string is returned. Note that you can use "none" as the default to keep the default as the empty string.<p>
<pre>
ReadValue()       # target default prompt
{
var="$1"
shift
default="$1"
shift
result=""
EchoN "$* [$default]:"
read result
[ "$result" ] || result="$default"
[ "$result" != "none" ] || result=""
eval $var=\"$result\"
}</pre><p>
<p>Regular Expression Matching</b><p>Regular string equality, and inequality operators can be done using the [ (test) command. Though sh doesn't explicitly have any regular expression matching operators, it is easy to write functions that can do the equivalent of matches and not-matches, with a regular expression as the second argument.<p>
These functions, <B>Matches</B> and <B>NotMatches</B>, use the <B>case</B> statement, which allows for glob regular expressions as case value. A glob regular expression uses the shell metacharacters, like when shell expands filenames. I use these functions frequently in my shell scripts. These functions return zero on success and one on failure, to conform to sh's notion of success and failure. By writing them this way, I can directly use them in an if statement, as demonstrated in the following example:<p>
<pre>
Matches()       # source regexp
{
case "$1" in
$2
return 0
;;
*)
return 1
;;
esac
}

NotMatches()    # source regexp
{
case "$1" in
$2)
return 1
;;
*)
return 0
;;
esac
}</pre><p>
<p>Example of RegularExpression Matching</b><p>Say that from the <B>/etc/passwd</B> file, you want the list of users whose home directories are not under <B>/home</B>.<p>
Note that in this function, <B>CollectNonUsrNames</B>, I collect all the names into a passed in variable name. Most of the functions in the library set up some variable for return. As a convention, I use the first parameter to the function as the name of the output variable.<p>
Remember to switch IFS back to what it was as soon as you are finished with the job. IFS also determines how shell parses command lines and can get you into trouble, if it is not the default.<p>
<pre>
CollectNonUsrNames()     # target-var
{
OIFS="$IFS"
IFS=":"
while read user passwd uid gid comment home shell junk

do
if Matches "$home" "/usr*"
then
echo "$user has home $home"
fi
done &lt; /etc/passwd
IFS="$OIFS"
}

CollectNonUsrNames NonUsrs
echo $NonUsrs</pre><p>
<p>
Processing Words and Lists</b><p>I handle lists as just strings concatenated with spaces between them.<p>
Listing 1 shows various operations on lists. <B>GetFirstWord</B> gets the first from a list. If <B>pathparts</B> contains a list of words, then <B>head</B> will contain the first of those words. Make sure that you do not put <B>$pathparts</B> in quotes. This is one of the rare places where quotes can do harm. If you quote <B>$pathparts</B>, then you will get all of <B>pathparts</B> into <B>head</B>.<p>
<B>GetLastWord</B> gets the last word from a list. The main cause for the work is that you can access only <B>$1</B> through <B>$9 </B>- to access the rest you have to shift them into that window. If you expect more than a few thousand parameters, then you could add another case to handle a four-digit <B>$#</B>.<p>
<B>ListDel</B> and <B>GetAllButLastword</B> both traverse the whole list and can get slow on large lists.<p>
Although shell doesn't have any commands for string processing, the <B>SplitSep</B> function provides some string manipulation ability. <B>SplitSep</B> is the splitter function; whereas the first function is just a helper. A call is needed so that the new IFS is used to parse the call to the <B>SplitWords</B> function. Note that you can't quote the <B>$3</B> parameter to <B>SplitWords</B>  (see Listing 2).<p>
The example in  Listing 3 shows how you can split and join words in a shell script. The first function, <B>GetBaseName</B>, takes a path as the second parameter. It assigns the basename of this path into the first parameter. <B>GetDirName</B> gets the directory name.<p>
<B>Associative Arrays</b><p>Lists can get slow pretty quickly. If you really want to handle lots of data and need random access or need to find information based on other information, then lists are not of much use. You have to scan through them serially. Most scripting languages provide associative arrays of some kind. The following routines let you manipulate an associative array:<p>
<B>arrset</B>	 Lets you set an element of the associative array<p>
<B>arrget</B>	 Gets you an element of the array given the subscript (index)<p>
<B>arrnames</B>	 Gets the list of subscripts of an associative array<p>
<B>arrclear</B>	 Clears out an associative array<p>
<B>arrexist</B>	 Checks for whether an associative array exists<p>
<B>arrelemexist</B>	 Checks for whether a particular subscript is preset<p>
<B>arrelemclear</B>	 Clears one element of the array.<p>
<p>
<B>arrelemclear</B> can get slow if the array is big. So don't use it often  (See Listing 4).<p>
<B>Example Using Associative Arrays</b><p>If you've ever wondered whether there was an easy way to kill processes with a particular name, instead of using <B>ps</B>, <B>grep</B>, and <B>kill</B>,  Listing 5 shows a script for you. Let's call it <B>kp</B> for kill processes. This is a script for Solaris 2.5. You might have to change it depending on what parameters your ps puts out. I just copied the read line from the header that <B>ps</B> put out. Examples of usage are:<p>
<pre>
% kp "*nfsd*" "*mountd" #kill processes with nfsd in them or ending in

mountd
% kp "/usr/local/etc/*" #kill all processes beginning with /usr/local/etc/</pre><p>
<p>
Usage Messages
</B>I often put comments at the beginning of my scripts. But I often had to repeat this for the usage message. The following function from the library generates a usage message from the comments at the beginning of the file. It prints out all lines from the beginning of the file that begin with a <B>#</B> character. It ignores lines that begin with <B>#!</B> (so that your <B>#!/bin/sh</B> doesn't get printed) and stops at the first line that doesn't begin with a <B>#</B>. This function definitely eases documentation problems. You just write comments in the beginning of your file.<p>
<pre>
_ProgramName="$0"

DefUsage()
{
BFS="$IFS"
IFS="^\"
while read Line
do
Matches "$Line" "#*" || break
NotMatches "$Line" "#!*" || continue
IFS="#"
read Line &lt;&lt;EOF
$Line
EOF
echo "$Line"
IFS="^\"
done &lt; $_ProgramName
IFS="$BFS"
exit 1
}</pre><p>
<p>Example of Automatic Usage Message Generation</b><p>The following example demonstrates the usage of the <B>DefUsage</B> function. Note the use of the <B>||</B> operator. I use this operator often instead of the <B>if</B> statement because it is compact. It means run the command on the right if the command on the left fails.<p>
Avoid the <B>&amp;&amp;</B> operator as much as possible - in <B>&amp;&amp;</B>, the right-hand side command is executed only if the left one failed. If either fails then the command fails. If this happens in a script, then the script will exit at that point.<p>
<pre>
#!/bin/sh
# Usage:
#    deluser &lt;Username|UserId&gt; [-h home-dir] [-notify user]
#
# deluser will delete the user from the password file. If the -h
# option is specified, it will delete the user's home directory as
# well.  If -notify is specified, then user is emailed when this
# script succeeds
#

. shlib

[ "$1" ] || DefUsage</pre><p>
<p>Availability</b><p>The functions discussed in this article and others described below are available from <B>http://www.comit.com/</B>.<p>
automatic switching to a better shell on HP<p>
A sophisticated command runner that can display and run commands, run commands for a limited time - look for <B>Command</B>.<p>
Separate a string into fields with any separator - look for <B>SetVarsFromSepList</B>.<p>
<B>Further Reading</b><p>The manual page of sh is a complete, although cryptic reference. The manual pages of <B>test</B> and <B>getopt</B> will also be useful.<p>
<B>Tips</b><p>1.  Avoid pipes; pipes add processes. Also commands in a pipe are run as child processes and cannot modify variables in your script.<p>
2.  Use double quotes liberally; only leave them out when you are sure that you want a string to be split into many arguments.<p>
3.  Shell variables are all global. Use names in libraries that you wouldn't normally use. I use the convention that t1,t2 are all temporaries. You could use leading underscores. This article contains examples that use commonly used variables.<p>
4.  Make a shell library; put frequently used functions into files that you can source as shown in the last example. 
<p>


<P>


<H1>About the Author</H1><p>
Venkat Iyer has a Masters in Computer Science, has six years of experience, and is Manager, Software Engineering at Comit Systems, Inc. His interests are languages and EDA tools. You can reach him at: http://www.comit.com/~venkat or at venkat@comit.com.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
