<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v06, i12: Listing 1:	The filter library system</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1997/dec97.tar"><b class=codeListing>dec97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1:	The filter library system</H1><p>

<pre>
#!/bin/ksh
# $Id: filter.ksh 1.8 97/06/11 20:53:02 dejan Exp Locker: dejan $
# boring part (somebody had to do it)
# these are defaults: customize at will
TMPDIR=${TMPDIR:-/tmp}
FLT_SAFE_DFLT=1         # should files be saved before processing
FLT_SAFEDIR_DFLT=$TMPDIR/$LOGNAME          # directory for saving archives
FLT_SAFETMPL_DFLT="save%03d.tgz"           # archive name generation template
FLT_MAXSTOR_DFLT=10000           # maximum storage (in kb) allowed for archives
FLT_PATH_DFLT=".:$HOME:/usr/local/lib"     # library search path
FLT_LIB_DFLT=filter.lib                    # name of the library file(s)
FLT_LOG_DFLT=$TMPDIR/$LOGNAME/filter.log   # file where actions are logged
FLT_ERR_DFLT=$TMPDIR/$LOGNAME/filter.err   # file where errors are logged
COMPRESS=compress
DECOMPRESS=zcat
ARCHTEST="($DECOMPRESS | tar tf -)"    # archive test
EXTRACT="($DECOMPRESS | tar xf -)"     # dearchiver
SHELL=${SHELL:-/bin/sh}                # default shell
PAGER=${PAGER:-more}                   # more or less
ARGMARK="@@"                           # where argument gets placed
ARCH=`uname`
if [ $ARCH = OSF1 ]; then
ARCHIVE="tar -cf - -R"             # archiver
elif [ $ARCH = Linux ]; then
ARCHIVE="tar -cf - -T"             # archiver
fi
[ -z "$ARCHIVE" ] &amp;&amp; {
echo "cannot set archiver" &gt;&amp;2
exit 1
}
TMPF=filter.$$
FILELIST=filelist.$$
# this is the program: don't change
# catch signals
trap '
rm -f $TMPF $FILELIST
exit
' EXIT
trap '
echo "killed by a signal" &gt;&amp;2
exit
' INT HUP TERM
#
function Help {
if [ "$1" = "env" ]; then
cat &lt;&lt;-EOF &gt;&amp;2
filter program can be further controlled with various environment
variables by either exporting them from the parent shell or passing
their values:
FLT_SAFE=1                  # should files be saved before processing
FLT_SAFEDIR=/tmp/$LOGNAME   # directory for saving archives
FLT_SAFETMPL="save%03d.tgz" # filename generation template
FLT_MAXSTOR=10000           # maximum storage (in kb) allowed for archives
FLT_PATH=".:$HOME"          # library search path
FLT_LIB=filter.lib          # name of the library file(s)
FLT_LOG=filter.log          # file were actions are logged
FLT_ERR=filter.err          # file were errors are logged

Environment variables can be changed with env command followed by
assignments. Word expansion and all substitutions are performed
priorily.
EOF
else
cat &lt;&lt;-EOF &gt;&amp;2
usage:
filter [&lt;opts&gt;] &lt;filter&gt; [&lt;filteropts&gt; --] &lt;filespec&gt;
filter [&lt;opts&gt;] with &lt;cmd&gt; [--] &lt;filespec&gt;
filter [&lt;opts&gt;] &lt;command&gt;
where
&lt;opts&gt; are options to the filter program
&lt;filter&gt; is a name of a filter to process files with
&lt;filteropts&gt; are options that filter can recognize
&lt;filespec&gt; is a specification of files to be processed
&lt;cmd&gt; is an external program or pipe or whatever
&lt;command&gt; may be one of the following:
help   give usage
quit   exit
find &lt;flt&gt;  search for &lt;flt&gt; in all libraries
env    print environment
log    show log
err    show err
undo   one-level undo
![&lt;cmd&gt;]  execute command in a shell

If run without arguments, filter prompts for commands and behaves
like a shell.

Type "help env" to get help on controlling the environment.
EOF
fi
}
#
# environment
#
function BuildEnv {
FLT_SAFE=${FLT_SAFE:=$FLT_SAFE_DFLT}
FLT_SAFEDIR=${FLT_SAFEDIR:=$FLT_SAFEDIR_DFLT}
FLT_SAFETMPL=${FLT_SAFETMPL:=$FLT_SAFETMPL_DFLT}
FLT_MAXSTOR=${FLT_MAXSTOR:=$FLT_MAXSTOR_DFLT}
FLT_PATH=${FLT_PATH:=$FLT_PATH_DFLT}
FLT_LIB=${FLT_LIB:=$FLT_LIB_DFLT}
FLT_LOG=${FLT_LOG:=$FLT_LOG_DFLT}
FLT_ERR=${FLT_ERR:=$FLT_ERR_DFLT}
FLT_SAFEMASK="`printf $FLT_SAFETMPL 0|sed 's/0/?/g'`"
FLT_MAXARCH=`echo $FLT_SAFETMPL | awk '
{sub("^[^%]+%",""); sub("d\..*$",""); n=0+$0;
for(m=1;n&gt;0;n--) m=m*10; print m}'`
}
function ManageEnv {
if [ $# -eq 0 ]; then
cat &lt;&lt;-EOF &gt;&amp;2
FLT_SAFE: $FLT_SAFE
FLT_SAFEDIR: $FLT_SAFEDIR
FLT_SAFETMPL: $FLT_SAFETMPL
FLT_MAXSTOR: $FLT_MAXSTOR
FLT_PATH: $FLT_PATH
FLT_LIB: $FLT_LIB
FLT_LOG: $FLT_LOG
FLT_ERR: $FLT_ERR
EOF
else
for i in $@; do
# try to catch typos at least
case "`echo $i|sed -e 's/^FLT_//' -e 's/=[^ ].*$//'`" in
SAFE|SAFEDIR|SAFETMPL|MAXSTOR|PATH|LIB|LOG|ERR)
eval $i     # set up variable
;;
*) echo "bad usage: $i" &gt;&amp;2
;;
esac
BuildEnv    # rebuild environment
done
fi
}
function EmptyFile {
&gt; $1 || {
echo "can not create $1 file" &gt;&amp;2
return 1
}
}
function ShowLog {
[ -s $FLT_LOG ] &amp;&amp; $PAGER $FLT_LOG
}
function ShowErr {
[ -s $FLT_ERR ] &amp;&amp; $PAGER $FLT_ERR
}
function LogFile {
printf "%s  %-40s " "`date`" "$1"
[ $2 -eq 0 ] &amp;&amp; echo OK || echo "FAILED($2)"
}
#
# library stuff
#
function BuildLibList {
if [ `expr $1 : "\/"` = 1 ]; then
[ -f $1 -a -r $1 ] &amp;&amp;
echo $1
else
typeset i
for i in `echo $FLT_PATH|sed 's/:/ /g'`; do
[ -f $i/$1 -a -r $i/$1 ] &amp;&amp;
echo $i/$1
done
fi
}
# find an instance of a filter
function FindFilter {
typeset name code
while read name code; do
[ "$name" = "include" -a -n "$code" ] &amp;&amp; {
FLT_LIB=$code FetchFilter $1 &amp;&amp;
return 0
}
[ "$name" = "$1" -a -n "$code" ] &amp;&amp; {
echo $code
return 0
}
done
return 1
}
function FetchFilter {
BuildLibList $FLT_LIB |
while read FETCHED_LIB; do
sed 's/^#.*//' $FETCHED_LIB |
FindFilter $1 &amp;&amp;
return 0
done
}
function ListFilter {
FETCHED_CODE=`FetchFilter $1` &amp;&amp;
echo "Code: $FETCHED_CODE"
}
#
# archive handling
#
function Undo {
FLT_ARCHF="`ls $FLT_SAFEDIR/$FLT_SAFEMASK|tail -1`"
[ -z "$FLT_ARCHF" -o ! -r "$FLT_ARCHF" ] &amp;&amp; {
echo "no archive available to undo" &gt;&amp;2
return 1
}
{ eval $EXTRACT &lt; $FLT_ARCHF &amp;&amp;
echo "`date`  undo from $FLT_ARCHF" &gt;&gt; $FLT_LOG
} || echo "undo failed" &gt;&amp;2
}
function MkArchName {
FIRST="`printf $FLT_SAFETMPL 0`"
if [ ! -f $FLT_SAFEDIR/$FIRST ]; then
echo $FLT_SAFEDIR/$FIRST
return 0
fi
typeset -i n size
size="`du -sk $FLT_SAFEDIR|awk '{print $1}'`"
n="`ls $FLT_SAFEDIR/$FLT_SAFEMASK|tail -1|sed 's/[^0-9]//g'`"
if [ $size -gt $FLT_MAXSTOR -o $n -ge $FLT_MAXARCH ]; then
echo "there are ${size}kb in $n archives"
echo "you have to remove some of them"
return 1
fi &gt;&amp;2
let n=n+1;
printf "$FLT_SAFEDIR/$FLT_SAFETMPL\n" $n
return 0
}
function PlaySafe {
FLT_ARCHF=""
if [ -n "$FLT_SAFE" ]; then
if [ ! -d "$FLT_SAFEDIR" ]; then
mkdir $FLT_SAFEDIR || {
echo "can not create $FLT_SAFEDIR directory" &gt;&amp;2
return 1
}
fi
FLT_ARCHF="`MkArchName`" || return 1
EmptyFile $FLT_ARCHF || return 1
if ! eval "$ARCHIVE $FILELIST" | $COMPRESS &gt; $FLT_ARCHF ||
! eval $ARCHTEST &lt; $FLT_ARCHF &gt;/dev/null 2&gt;&amp;1 ; then
rm -f $FLT_ARCHF
echo "unable to save files" &gt;&amp;2
return 1
fi
fi
return 0
}
#
# real business
#
function CheckArg {
[ ! -r "$1" ] &amp;&amp; {
echo "$1 does not exist or read permission denied" &gt;&amp;2
return
}
[ ! -f "$1" ] &amp;&amp; {
echo "$1 is not an ordinary file" &gt;&amp;2
return
}
[ ! -w "$1" ] &amp;&amp; {
echo "$1 write permission denied" &gt;&amp;2
return
}
echo $1
}
function BuildList {
typeset i f
[ $# -eq 0 ] &amp;&amp; return 1
EmptyFile $FILELIST || return 1
for f in $@; do
case $f in
-) while read i; do
CheckArg $i
done;;
*) CheckArg $f;;
esac
done &gt; $FILELIST
[ ! -s $FILELIST ] &amp;&amp; {
echo "no files to be processed" &gt;&amp;2
return 1
}
return 0
}
function ParseLine {
# divide line at first "--" or first white space
# append parameter marker if necessary
CURRENT=""; CODE=""; ARGS=""; MARK=""
for i in "$@"; do
[ -z "$MARK" -a "$i" = "--" ] &amp;&amp; {
CODE="$CURRENT"
CURRENT=""
MARK=y
continue
}
CURRENT="$CURRENT $i"
done
ARGS="$CURRENT"
[ -z "$MARK" ] &amp;&amp; {
CODE="$1"; shift 1; ARGS="$@"
}
}
function ProcFilter {
# process with registered filter
FETCHED_CODE=`FetchFilter $1` &amp;&amp; {
ParseLine $@
FILTER="$FETCHED_CODE `echo $CODE|eval sed \"s?$1??\"`"
if [ -z "$ARGS" ]; then   # we'll accept stdin here
eval "`echo $FILTER | eval sed \"s?$ARGMARK??\"`"
else
BuildList $ARGS &amp;&amp; PlaySafe &amp;&amp; ProcessFiles
fi
}
}
function ProcExternal {
# process with external command
ParseLine $@
FILTER="$CODE"
BuildList $ARGS &amp;&amp; PlaySafe &amp;&amp; ProcessFiles
}
function Exchange {
if [ $# -ne 2 -o ! -f "$1" -o ! -f "$2" ] ; then
echo "bad args: $1,$2" &gt;&amp;2
return 1
fi
mv $1 flt_exch.$$ &amp;&amp; mv $2 $1 &amp;&amp; mv flt_exch.$$ $2
}
function ProcOne {
EFILTER="`echo $FILTER | eval sed \"s?$ARGMARK?$1?\"`"
if eval $EFILTER &gt; $TMPF 2&gt;&gt;$FLT_ERR; then
if Exchange $TMPF $1 ; then
LogFile "$EFILTER" 0
else
LogFile "$EFILTER" $?
ERRFLAG=2
echo "panic: could not exchange files" &gt;&amp;2
break
fi
else
LogFile "$EFILTER" $?
ERRFLAG=1
echo "___from: $EFILTER" &gt;&gt; $FLT_ERR
fi
}
function ProcessFiles {
echo $FILTER | grep -qs $ARGMARK ||

FILTER="$FILTER $ARGMARK"
FILTER="`echo $FILTER | sed -e 's/^ *//' -e 's/ *$//' -e 's/  */ /'`"
EmptyFile $TMPF || return 1
typeset -i ERRFLAG=0
{
echo "`date`  begin session"
[ -n "$FLT_ARCHF" ] &amp;&amp; echo "savefile: $FLT_ARCHF"
echo "filter: $FILTER"
while read i; do
ProcOne $i
done &lt; $FILELIST
echo "`date`  end session"
} &gt;&gt; $FLT_LOG
[ $ERRFLAG -ne 0 ] &amp;&amp; {
echo "there were errors while processing files"
echo "type 'filter err' to see errors"
return 1
} &gt;&amp;2
return 0
}
#
# shell
#
function Execute {
case $1 in
"") : ;;
help|\?) shift 1; Help $@;;
x|q|quit|exit) return 32;;
env) shift 1; ManageEnv $@;;
undo) Undo;;
log) ShowLog;;
err) ShowErr;;
find) ListFilter $2;;
with) shift 1; ProcExternal "$@";;
!*) shell_args="`echo $*|sed 's/^! *//'`"
shell_cmd="$SHELL"
[ "$shell_args" ] &amp;&amp;
shell_cmd="$shell_cmd -c \"$shell_args\""
eval $shell_cmd
;;
*) ProcFilter "$@"
;;
esac
}
function Shell {
while :; do
read line?"filter&gt; "
[ $? -ne 0 ] &amp;&amp; return 0
Execute $line
[ $? -eq 32 ] &amp;&amp; return 0
done
}
#
# main
#
BuildEnv
if [ $# -eq 0 ]; then
Shell
else
Execute "$@"
fi
exit

# End of File</pre><p>
<p>

<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
