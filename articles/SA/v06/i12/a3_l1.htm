<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v06, i12: Listing 1:  	vgen.java - Man program for the vGen byte code</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1997/dec97.tar"><b class=codeListing>dec97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1:  	<tt>vgen.java</tt> - Man program for the vGen byte code</H1><p>

Note: Backslashes have been inserted in the following to reflect editorial breaks on lines that are too long to fit our format. Such lines should actually appear as a single line of code in the source.<p>
<pre>
// vgen-  The web version generator
// Copyright (c) 1997 by James L. Pinson
// look to http://www.polaris.net/~jpinson/home/vgen.html for info on the
// latest version.

import java.io.*;
import java.util.*;
public class vgen


{
static String section = "";
static String tempstring = "";
static String homepage = "";
static String uppage = "";
static String currentpage = "";
static String lastpage = "";
static String nextpage = "";

static String homeimage = "btn-home.gif";
static String lastimage = "btn-last.gif";
static String upimage = "btn-up.gif";
static String nextimage = "btn-next.gif";

static String sourcedirectory = "";
static String outputdirectory = "";
static Vector modes = new Vector(10,10);
static boolean config_finished = false;

public static void main (String[] args)
{


int i=0;
String str="";
StringBuffer temp;
String level[] = new String [20];
int ch;
int index=0;
int currentdepth=0;
int done=0;
String left = "";
String right = "";
String tempstring = "";
String currentfile = "";
String infile = "";
String outfile = "";

printwelcome();

if (args.length &lt; 1){
System.out.println("Usage: vgen [config_file] &lt;mode=modename&gt;
&lt;sourcedirectory=path&gt; &lt;outputdirectory=path&gt; ......");
System.exit(1);
}

addmode("common");  // the common mode is always active
// now add modes from command line
for (i=1;i &lt; args.length; i++){
if (args[i].indexOf("=") != -1){ // all our valid args have an '='
left=stringlib.GetLeftValue(args[i],'=');
right=stringlib.GetRightValue(args[i],'=');
left=left.trim(); //trim spaces
right=right.trim();//trim spaces
if  (left.equals("mode") &amp;&amp; right.length()!=0 ){
addmode(right);
System.out.println("Using mode "+ right);
System.out.println(""); // let user know mode was recognized
}// end if(left
}// end if args[]
}// end for()

// now check for source/destination directories from command line
for (i=1;i &lt; args.length; i++){
left=stringlib.GetLeftValue(args[i],'=');
right=stringlib.GetRightValue(args[i],'=');
if  (left.equals("sourcedirectory")){
sourcedirectory=right;
}
if  (left.equals("outputdirectory")){
outputdirectory=right;
}

}

//let's see if we can read the config file, args[0]
if (! isfile(args[0])){
errorexit("The configuration file (" + args[0] + ") is not found");
}
try
{
// debug i=3;
DataInputStream is = new DataInputStream (new FileInputStream (args[0]));

while (done == 0 ) {  //While not done
if( (str = is.readLine()) == null) break; // if end of file quit
if (str.length()==0) errorexit("No blank lines allowed in the config file");
tempstring= str.trim();
// is this a section heading (in []) ?
if ((tempstring.charAt(0)== '[') &amp;&amp;
(tempstring.charAt(tempstring.length()-1)==']')){
section=tempstring.substring(1,tempstring.length()-1);

// read another line to skip over heading
if( (str = is.readLine()) != null) done=0; // if end of file quit
}



if (section.compareTo("config")==0){
left=stringlib.GetLeftValue(str,'=');
right=stringlib.GetRightValue(str,'=');

if (left.equals("sourcedirectory")&amp;&amp; sourcedirectory.equals("") ){
sourcedirectory = right; // don't update sourcedirectory if it was set on
// command line
}

if (left.equals("outputdirectory")&amp;&amp; outputdirectory.equals("")) {
outputdirectory = right; // don't update sourcedirectory if it was set
// on command line
}




if (left.equals("mode")){
addmode(right);
System.out.println("adding mode "+ right);
}

}


if (section.compareTo("webtree")==0){

// if we are in webtree, then see if everything is OK from config section
if (config_finished==false){
verifyconfig();
// now flag this section so we don't re-run it
config_finished=true;
} // end  config_finished section

// this loop is only done for the first file, the homepage
//we know it is the first file, because hompage=""
if (homepage.compareTo("")==0){
if (countleadingspaces(str)&gt;0){  // first file must be at top level, not
// indented
System.out.println("The first file in [webtree], ie: the homepage, must
not be indented");
}
// check for illegal stuff

homepage=str.trim();
} // end hompage.compareTo


if (str.indexOf(  '\t' ) &gt;= 0) errorexit("The line (" + str + ") contains a
tab, please use spaces");

nextpage=str;

if (currentpage.compareTo("")!=0){
if (currentdepth &gt;0) uppage=level[currentdepth-1]; // set uppage

CopyTextFile(infile,outfile );
}

currentfile=str;
infile= stringlib.forcelastchar(sourcedirectory, File.separatorChar);
infile=infile.concat(str.trim());

i=countleadingspaces (str);

if ( (i-currentdepth) &gt; 1){  //increasing levels too rapidly
tempstring="Webtree entry -" + str.trim() + "- is indented by more than
the maximum one level.";
errorexit ( tempstring );
}
currentdepth=countleadingspaces(str);

level[currentdepth]=str;  //How deep is this page?

lastpage=currentpage; //save current page as last page
currentpage=str;

if(currentpage.compareTo( "")!=0){
outfile= stringlib.forcelastchar(outputdirectory, File.separatorChar);
outfile=outfile.concat(currentfile.trim());


}

} //end of webtree section



} // eof

// we finished, but still need to process the last page
nextpage= "";  // there is no next page
if (currentdepth &gt;0) uppage=level[currentdepth-1];


CopyTextFile(infile,outfile );

}
catch (IOException e)
{
errorexit("error: " + e );
}
} //end main



public static void addmode(String string){
modes.addElement ( string);
}

public static String getmode( int i){
String string = (String) modes.elementAt(i);
return (string);
}

public static int countleadingspaces (String str)

{
int index=0,count=0;
if (str.length()==0) return (0);
while (str.charAt(index++) == ' '){
count++;
}
return (count);
}

public static void CopyTextFile(String infile, String outfile){
boolean output=true;  // we start outputting everything
boolean skip=false;   // a flag to skip a line
String modeflag ="";

System.out.println("Processing file: " + currentpage);
if(! isfile(infile)){     // make sure directory exists
errorexit ("The file (" + infile + ") does not exist");
}

try {

DataInputStream istream = new DataInputStream(new
FileInputStream(infile));
PrintStream ostream = new PrintStream(new
FileOutputStream(outfile));
String line;
while ((line = istream.readLine()) != null) {
if (line.indexOf("$$$graphic-link") == 0) {
line=BuildGraphicNavLine();
}
if (line.indexOf("$$$text-link") == 0) {
line=BuildTextNavLine();

}
if (line.indexOf("$$$mode=")==0){
modeflag=stringlib.GetRightValue(line,'=');
if (modes.contains(modeflag)== true) output=true; else \
output=false;
skip=true;
}
if ((output==true)&amp;&amp; (skip==false)) ostream.println(line);
skip=false;
}

istream.close();
ostream.close();
} catch (IOException e) {
System.err.println( "error" + e);
return;
}
}

public static String BuildGraphicNavLine()
{

// define base strings
String graphhomestring="&lt;a href=\"$home.html\"&gt;&lt;IMG SRC=\"$home.gif\" \
BORDER=0 ALT=\"Home\"&gt;&lt;/a&gt;";
String graphlaststring="&lt;a href=\"$last.html\"&gt;&lt;IMG SRC=\"$last.gif \" \
BORDER=0 ALT=\"Previous\"&gt;&lt;/a&gt;";
String graphupstring="&lt;a href=\"$up.html\"&gt;&lt;IMG SRC=\"$up.gif \" BORDER=0 \
ALT=\"UP\"&gt;&lt;/a&gt;";
String graphnextstring="&lt;a href=\"$next.html\"&gt;&lt;IMG SRC=\"$next.gif \" \
BORDER=0 ALT=\"Next\"&gt;&lt;/a&gt;";

graphhomestring=stringlib.ReplaceFirst(graphhomestring,"$home.html", homepage);
graphhomestring=stringlib.ReplaceFirst(graphhomestring,"$home.gif", homeimage);

graphlaststring=stringlib.ReplaceFirst(graphlaststring,"$last.html", lastpage);
graphlaststring=stringlib.ReplaceFirst(graphlaststring,"$last.gif", lastimage);

graphupstring=stringlib.ReplaceFirst(graphupstring,"$up.html", uppage);
graphupstring=stringlib.ReplaceFirst(graphupstring,"$up.gif", upimage);

graphnextstring=stringlib.ReplaceFirst(graphnextstring,"$next.html", nextpage);
graphnextstring=stringlib.ReplaceFirst(graphnextstring,"$next.gif", nextimage);
String string = "";
if (homepage.compareTo( currentpage) != 0) string=string.concat(graphhomestring);
if (lastpage.compareTo( "") != 0) string=string.concat(graphlaststring);
if (uppage.compareTo( "") != 0) string=string.concat(graphupstring);
if (nextpage.compareTo( "") != 0) string=string.concat (graphnextstring);
return (string);

}

public static String BuildTextNavLine()
{

// define base strings
String texthomestring="&lt;a href=\"$home.html\"&gt;[Home]&lt;/a&gt;";
String textlaststring="&lt;a href=\"$last.html\"&gt;[Previous]&lt;/a&gt;";
String textupstring="&lt;a href=\"$up.html\"&gt;[Up]&lt;/a&gt;";
String textnextstring="&lt;a href=\"$next.html\"&gt;[Next]&lt;/a&gt;";

// update base string with new value
//do home
texthomestring=stringlib.ReplaceFirst(texthomestring,"$home.html", homepage);
textlaststring=stringlib.ReplaceFirst(textlaststring,"$last.html", lastpage);
textupstring=stringlib.ReplaceFirst(textupstring,"$up.html", uppage);
textnextstring=stringlib.ReplaceFirst(textnextstring,"$next.html", nextpage);

String string = "";

if (homepage.compareTo( currentpage) != 0) string=string.concat(texthomestring);
if (lastpage.compareTo( "") != 0) string=string.concat(textlaststring);
if (uppage.compareTo( "") != 0) string=string.concat(textupstring);
if (nextpage.compareTo( "") != 0) string=string.concat (textnextstring);
return (string);

}




public static void printwelcome(){
System.out.println("vgen 1.0" );
}


public  static boolean isdirectory(String directoryname ){
File directory = new File(directoryname ) ;
if(directory.isDirectory()){     // make sure directory exists
return (true);
}
else
return (false);
}


public  static boolean isfile(String filename ){
File file = new File(filename ) ;
if(file.isFile()){     // make sure directory exists
return (true);
}
else
return (false);
}


private static void errorexit(String message){
System.out.println("vgen Error: " + message);
System.exit(1);
}

public static void verifyconfig(){
if(sourcedirectory.equals(outputdirectory)){     // make sure source and
// destination are different
errorexit ("Source and destination must be different");
}



if(! isdirectory(sourcedirectory)){     // make sure directory exists
errorexit("The source directory (" + sourcedirectory + ") does not exist");
}

if(! isdirectory(outputdirectory)){     // make sure directory exists
errorexit("The destination directory (" + outputdirectory + ") does not
exist");
}

// by now we know what the source/output directories are, so we print them
System.out.println("");
System.out.println("The source directory is " + sourcedirectory);
System.out.println("The output directory is " + outputdirectory);
System.out.println("");
}
} //end class vgen</pre><p>
<p>

<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
