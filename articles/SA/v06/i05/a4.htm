<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i05:  Adding R* to Windows NT</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/1997/may97.tar"><b class=codeListing>may97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Adding R* to Windows NT</H1><p>
<P>
Robert Flannigan<P>

</H1><p>Adding Windows NT servers to an existing UNIX or heterogeneous environment does not necessarily mean giving up familiar distributed computing tools used by UNIX administrators. With a minimal investment in an NFS package for Windows NT and adding the free RSHSVC included in the Windows NT Resource Kit from Microsoft, system managers can leverage their existing knowledge of the Berkeley "R" command family (<B>rsh</B> or <B>remsh</B> in particular) to make Windows NT a bit more UNIX-friendly. Access to UNIX and other legacy data and the ability to coordinate processing between UNIX and NT allows automation of tasks by stringing together UNIX processes with NT batch files, executables, or any other non-interactive scripts that can be executed by Windows NT. By using this method my employer, Jacobson Stores, has achieved a reliable decision support database batch update of daily sales information from mainframe and UNIX transactions that are processed into "cleansed" files by UNIX systems, then ultimately loaded in parallel to their final destination of an ESSBASE database engine running under Windows NT server. This tight coupling of the two operating systems can be a cost-effective way of integrating two very different computing platforms.<p>
<B>Security Issues</b><p>As with installing other services such as <B>ftp</B>, activating RSHSVC on a particular machine will inherently weaken built-in security and is not recommended for any system that is connected to an untrusted network, acting as a firewall, bastion host, or aspiring to achieve C2 level security. Inside a properly configured firewall (one not accepting connections to SHELL / EXEC TCP ports) or any other relatively secure corporate intranet, the benefits of having the service available usually outweigh the perceived risks.<p>
As a side note, on the same Technet CD that contains the distribution files for RSHSVC, Microsoft also indicates that it is only available via third parties, citing a "security loophole" [1]. From what I've gathered, this service, which is similar to a UNIX daemon, was written by Microsoft but remains unsupported. All of my emails sent over the past year to the <B>microsoft.com</B> address listed in the installation documentation have gone unanswered.<p>
The main security risk in running RSHSVC under Windows NT involves setting up trusted hosts using <B>.rhosts</B> files. Please note that this trust relationship deals only with remote command configurations. Domain trust relationships between Windows NT Server Domain Controllers are a completely separate subject. Using "equivalent" or "trusted" hosts involves granting the right for remote systems to execute commands on a given server without going through a login process. Utilizing this "blind" trust, it may be possible for an intruder to forge a <B>.rhosts</B> entry and gain access to a system using a few different methods. For example, if the C: drive on the NT server is a FAT filesystem (without NTFS file level security) and the default <B>\\&lt;server&gt;\C$</B> administrative share is able to be accessed remotely, then a cracker could edit the <B>.rhosts</B> file directly on the host system. A second method involves physical access to the server, whereby a malicious user could directly edit or copy in a version of <B>.rhosts</B> that would grant access to his or her chosen servers and user IDs.<p>
A second security risk associated with <B>rsh</B> (or <B>rcp</B>, <B>rexec</B>, <B>rlogin</B>, <B>telnet</B>, <B>ftp</B>, et al.) is password authentication being passed between machines without being encrypted between endpoints. A packet analyzer running on a particular network segment can capture and forward plaintext password information, presumably to a malicious user. Passing unencrypted passwords across a LAN/WAN will not qualify your installation for "bulletproof" security certification, but there are ways of configuring trusted hosts and user accounts that can minimize risk should this information become compromised.<p>
As a good rule of thumb, if your security policy allows for <B>R*</B> command activity on your existing network of UNIX machines, then installing the service under Windows NT should not violate this policy. A properly configured NTFS filesystem that contains the %SystemRoot% subtree, with read-only access granted to the owner of RSHSVC via the <B>.rhosts</B> file, should go a long way toward patching the known security holes common to the <B>R*</B> commands under UNIX.<p>
NFS security is fairly well documented. If your NT systems will only be acting as NFS clients, then most security risks with NFS are minimal. If you plan to deploy NFS server configurations under NT, please refer to the many available materials on the subject [2] and read to the appropriate vendor's documentation supplied with the NFS software.<p>
<B>Making UNIX Data Available to NT</b><p>Before UNIX servers can execute Windows NT commands remotely, a standard method of sharing data among the machines is essential. Methods abound to achieve this goal, including <B>ftp</B>, <B>rcp</B>, <B>stdin</B>, and many others. At Jacobson's, we chose to implement an NFS package for Windows NT because of its wide availability, ease of use, and adherence to standards. We installed Chameleon32 NFS from NetManage, although there are other comparable packages on the market [3]. The documentation was good, and installation was a snap. After the software was installed and the NFS client properly configured, a separate ChameleonNFS Network Share came up under the "Connect Network Drive" dialog box in File Manager under NT 3.51. Similar facilities exist in Explorer under NT 4.0, which allow the user to browse NFS-shared volumes in much the same manner that standard Windows-shared resources are browsed. Another feature of this package is that the <B>net use</B> command line can be used to address UNIX systems in UNC (<B>\\nfs_server\nfs_share</B>) format from Perl scripts, <B>.bat</B> and <B>.exe</B> files, along with the command prompt. I mounted the company standard <B>/pub</B> NFS volume as a logical drive P: under Windows NT. Thus, any UNIX process that puts data under <B>/pub</B> makes the data immediately available to Windows NT client systems. Additionally, NFS provides automatic, user-transparent CR/LF mappings between UNIX and Microsoft filesystems. So, with seamless data access available, the systems can now interact.<p>
<B>Windows NT Remote Shell Service</b><p>Remote command execution has been a mainstay of UNIX systems since the earliest BSD releases containing the <B>R</B> command utilities. Almost every modern UNIX dialect has adopted this comand set, which features the <B>rlogin</B>, <B>rcp</B>, <B>rexec</B>, <B>rsh</B> (<B>remsh</B>), <B>rcmd</B>, <B>rwho</B>, and other remote commands. SVR4 variants that had already implemented the <B>rsh</B> command for restricted shell use the <B>remsh</B> nomenclature, but <B>rsh</B> and <B>remsh</B> functionally are equivalent. The inner workings of the client and server processes are well documented in the man pages for each OS [4] and in many UNIX system administration books. Specifically considering remote shell services under Windows NT, there are many similarities between the NT version and the UNIX implementation:<p>
RSHSVC installs as an NT "service," akin to the UNIX <B>remshd</B> daemon (see Figure 1).<p>
The familiar <B>.rhosts</B> file is used for authentication, but there is no support for <B>hosts.equiv</B> (see Listing 1).<p>
RSHSVC uses the same "well known" TCP port of 514 to accept client connections for the shell service, as specified by the <B>%SystemRoot%\System32\drivers\etc\services</B> file. Once the service is started, it listens for inbound connect requests on the "shell" port and dispatches processes to handle each client request (see Listing 2).<p>
<B>Installing Remote Shell Service</b><p>Getting RSHSVC to run on Windows NT is quite simple, once the distribution files have been located. The three files needed for the install are named <B>rshsetup.exe</B>, <B>rshsvc.dll</B>, and <B>rshsvc.exe</B>. If you have installed the Windows NT Server Resource Kit [5], then these files should be located in the root directory of your Resource Kit installation, usually <B>C:\reskit</B>. If you are a Technet CD subscriber [6], the files can be located on the Supplemental Drivers and Patches CD under the Path <B>\samples\boes\winnt\ntrk351\&lt;arch&gt;\inet</B>, where <B>&lt;arch&gt;</B> is i386, MIPS, Alpha, or PowerPC.<p>
The piece of documentation that will help you through the install is named <B>rshsvc.txt</B> and is located in <B>\samples\boes\winnt\ntrk351\common\inet\</B> on the Technet Supplemental CD. The instructions are fairly straightforward and consist of:<p>
1.  Copying <B>rshsetup.exe</B>, <B>rshsvc.exe</B>, and <B>rshsvc.dll</B> to <B>%SystemRoot%\System32\</B><p>
2.  Executing <B>rshsetup %SystemRoot%\System32\rshsvc.exe %SystemRoot%\System32\rshsvc.dll</B><p>
This command should return a message of:<p>
<pre>
The Remote Shell Service was successfully installed.</pre><p>
<p>
3.  Executing <B>net start rshsvc</B><p>
This command should return a message of:<p>
<pre>
The remote shell service is starting.
The remote shell service started successfully.</pre><p>
<p>
You do not need to reboot in order to begin using this service.<p>
4.  Create your <B>.rhosts</B> file to give access to your UNIX systems (see Listing 1).<p>
This file must be stored under <B>%SystemRoot%\system32\drivers\etc</B>.<p>
The entries for <B>.rhosts</B> are the same as the standard UNIX entries: <B>Client1 User1 [User2 &agrave; UserN]</B><p>
This whitespace delimited list begins with a remote client hostname that can be resolved by <B>gethostbyname()</B> on the server machine, and then lists one or more trusted users on that host.<p>
5.  Set the service to automatically start upon reboot, if desired (see Figure 1).<p>
To have the service start automatically, open the Services applet in the Control Panel. Scroll down until you see the "Remote Shell Service" line. Highlight this line, and click Startup to bring up the Services startup dialog box. If you wish this "daemon" to start each time the machine boots, select Automatic and click OK.<p>
<B>Using Remote Shell Service</b><p>The possible applications of Remote Shell Service with Windows NT are limited only by the creativity and imagination of system administrators, and of course by necessity. The role your NT server(s) plays relative to other systems determines what use your UNIX systems will have for the service.<p>
The primary NT server used at our data processing center acts as a Decision Support server for approximately 100 end users. The platform hardware is an NCR S40 4-way P133 with a 24 GB RAID unit, holding multiple instances of ESSBASE multidimensional database engines. This machine is currently running Windows NT Server 3.51 SP5. To load the databases with timely information on a daily basis, we needed a way for mainframe batch jobs to remotely call a UNIX shell script after completion (a custom daemon was written for this purpose). The shell script pulls the transaction file from the mainframe, and then splits the transaction file into three separate load files for the NT databases. After the shell script copies the three files to an NFS volume accessible from the NT server, it then launches three simultaneous <B>remsh</B> commands to the NT server. These commands run batch files containing ESSBASE script commands to load, calculate, and commit the data (see Listing 3).<p>
With this "chaining together" of Mainframe to UNIX to NT processing, we can provide timely decision support information to users at corporate headquarters and remote users in each retail store or through dialup access. The logic of this process could be adopted to fit other vendor's database engines running under NT Server with little modification. Other utility examples and ideas for using RSHSVC with UNIX might be:<p>
To read server statistics from Windows NT and log them on an HP-UX client, you could execute:<p>
<pre>
remsh ntserver "net statistics server" &gt;&gt; /var/adm/foo.log</pre><p>
<p>
From a Solaris Korn shell-based script that monitors UNIX system health around the network, the ability to watch over NT disk space utilization for a particular logical drive volume could be added with:<p>
<pre>
box=ntserver
drive="c:"
threshold=10000000
available=`rsh $box dir $drive | grep -w "bytes free" |  tr -s ' ' | cut -d' ' -f2 | \
tr -d ','` if [ $available -lt $threshold ]

then
mailx -s "WARNING: $box - low disk space on $drive"     sysadmin &lt; /dev/null fi</pre><p>
<p>

The "cron" facility that comes with Windows NT is called <B>at.exe</B>. The graphical version that we installed sometimes mysteriously does not execute scheduled tasks properly. If you do not wish to purchase more robust schedulers for NT, or if you like to consolidate cron functions under one "master" UNIX system, then RSHSVC might be used to periodically reboot systems with the <B>shutdown.exe</B>, or perhaps perform nightly backups with <B>ntbackup.exe</B>. NCR MP-RAS SVR4 examples follow:<p>
<pre>
# reboot ntserver at 1am every Sunday
0 1 * * 0 remsh ntserver "shutdown /L/R/Y/C/T:60"
# verified backup ntserver to tape every day at 3am, with# Registry backup and hardware compress
0 3 * * * remsh ntserver \
"c:\\winnt35\\system32\\ntbackup.exe backup \
c: e: f: g: h: /l   \
c:\\users\\default\\etc\\backup.log /b /v /hc:on"</pre><p>
<p>Odds and Ends</b><p>Because this service, for all intents, appears to be unsupported by Microsoft, it comes under the realm of "as is" software.  We have been running this successfully at Jacobson's for well over 18 months without incident, and use it many times daily. However, there are a few implementation details that users should be aware of, namely:<p>
<B>rshsvc.txt</B> indicates that the connection will timeout after 10 minutes for commands that have not completed executing and that commands taking more than 10 minutes will not execute properly.  We have not found that to be the case. As long as you are not launching interactive sessions requiring input on <B>stdin</B>, then most commands should work regardless of the time span.  One by-product I noticed is that <B>stdout</B> from commands taking more than 10 minutes to execute gets redirected into a file at the root of the C: drive named <B>rsh$xxx.000</B>, where <B>xxx</B> is a sequence number.  These files periodically need to be cleaned, or they will accumulate over time.<p>
When editing the <B>.rhosts</B> file, it is a good idea to use the Notepad or other comparable editor. NT's vestiges of DOS do not allow you to use EDIT with a filename that begins with a dot. Also, it is a very good idea to stop/start the Remote Shell Service after changing the <B>.rhosts</B> file for the changes to take effect.<p>
Absolute pathnames are good to use in referencing all commands that are executable files. Protect backslash characters by using proper quoting or \\ to keep UNIX shells from interpreting DOS pathnames as escape sequences.<p>
In an environment with multiple NT servers connected, the <B>rsh.exe</B> command can be used for NT to NT remote execution.  Client and Server configuration for this is the same as using UNIX clients to execute remote commands. <B>Rsh.exe</B> can also be used from a Windows NT client to access UNIX servers, if permissions are set correctly in <B>.rhosts</B> on the target UNIX server.  There are also third party products available for Windows 95 allowing a PC to use remote shell client services on either UNIX or NT servers.<p>
Some third party software vendors also offer "production grade" versions of remote shell services, along with <B>telnet</B>, <B>Rexec</B>, X, and other products [1,3,6].  Please use the references at the end of the article or contact your Microsoft representative for more details.<p>
With POSIX-conforming utilities becoming available for NT, integrating NT with UNIX should become easier in the near future.  There are many published references in print and available as hypertext. I encourage system administrators adding NT servers to their existing UNIX environments to check out the books listed at the end of this article and to check Microsoft's knowledge base available at their Web site (and on CD).  Using RSHSVC and NFS with NT is only one of many methods to achieve tight integration using today's technology.  By adhering to the "there's more than one way to do it" credo, many more practical UNIX/NT solutions will continue to be built .<p>
<B>Bibliography</b><p>[1]  <B>http://www.microsoft.com/syspro/technet/boes/bo/winntas/technote/nt204.htm</B><B>http://www.somarsoft.com/security.htm</B><p>
[2] <B>http://dune.mcs.kent.edu/~farrell/sa96/notes/nfs/sunnfs/nfs_15.html</b><p>[3] <B> http://www.xlink.com/xl06004.htmlhttp://www.interwork.com/products/Interop-opensystems/interdr2.html</b><p>[4] <B>http://wsspinfo.cern.ch/man-hp/remshd(1M)</B><p>
[5] Microsoft Corp, Microsoft Windows NT Server Resource Kit, Microsoft Press, 1996<p>
[6] Microsoft Corp, February 1997 Technet CD, Microsoft, 1997<p>
[7] <B>http://www.ntinternals.com/</B><p>
<p>
Cox, J., and Goodheart, B. <I>The Magic Garden Explained: The Internals of UNIX System V Release 4: An Open Systems Design</I>, Prentice Hall, 1994.<p>
Leffler, S. J., McKusick, M. K., and Karels, M. J., <I>The Design and Implementation of the 4.3BSD UNIX Operating System</I>, Addison-Wesley, 1989.<p>
Stevens, D.L., and Comer, D.E. <I>Internetworking With T</I>cp/Ip<I>: Client-Server Programming and Applications: B</I>sd<I> Socket Version</I>, Prentice Hall, 1996.<B> </B>
<p>


<P>


<H1>About the Author</H1><p>
Robert Flannigan holds a BSCS from the College of Engineering, Michigan  State University (1994). He has been working creatively with computers since the early 1980s and has spent the greater part of the past 9 years working with Unix. His current work for Jacobson Stores Inc. involves system administration of Unix and Windows NT systems and database administration. Robert can be reached at: flannigan.robert@infoband.com.



<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
