<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i02:  Patrol</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_t1.htm">Table 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1997/feb97.tar"><b class=codeListing>feb97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Patrol</H1><p>
<P>
Chuck Boeheim<P>


</H1><p>UNIX arrived at the Stanford Linear Accelerator Center (SLAC) somewhat later than at many other research labs, but it proliferated rapidly. SLAC is a high-energy physics research laboratory, funded by the Department of Energy and operated by Stanford University in Palo Alto, California. Demand for computing is limitless in this environment; an experiment under construction today that is scheduled to begin in 1999 will collect 50 terabytes of data per year and requires the equivalent of 20,000 mainframe MIPS. The perceived low cost of RISC computing drove us to UNIX workstations and servers to provide that capacity. The distributed computing environment turned out to be more complex and labor intensive to administer than the familiar VM/CMS mainframe. So, the sys admin staff decided to duplicate some of the tools we had used on the mainframe and to invent others demanded by the new environment.<p>
The tool discussed in this article is <B>patrol</B>, a Perl script that periodically checks the health of all of our machines. The need for <B>patrol</B> first came from the need to control some of the runaway processes found on our machines from time to time. The image was that of a constable making the rounds, rattling doors and checking windows, and occasionally raising the alarm. Like most such tools, <B>patrol</B> grew in stages, with features added as the need arose and one major rewrite when lots of special purpose code was replaced by generalized code and a flexible rules language to drive it.<p>
<B>patrol</B> is too long to reproduce in its entirety here, but it's available from <B>ftp.slac.stanford.edu</B> in the <B>/software/sysadmin</B> directory. It currently runs on SunOS, AIX, and NextStep, since that's what is supported at SLAC. There are some dependencies on the formats of the <B>ps</B> and <B>df</B> command outputs that would need tweaking to run on other systems. There are also some SLAC dependencies for messaging, paging, etc. that would need to be customized to your location, although the core functions will still work.<p>
The <B>patrol</B> script runs every 15 minutes, courtesy of cron. If it's licensed to <B>kill</B> (or <B>renice</B> or <B>restart</B>) processes, it needs to run as root, but not if it is simply to observe and report.<p>
Each time the script runs, it does a <B>ps</B> command and a <B>df</B> command, saves information about processes and filesystems in an observations file, and computes the changes since the previous observation. It also checks various quantities and deltas against the rules in the file <B>patrol.cf</B>, and if a rule matches, performs the listed action. A sample rule is:<p>
<pre>
PC <usage=interactive> browser.* \
25 mail($user,CPUHOG)
50 mail($user,LOOP),kill,mcons(alert)</pre><p>
<p>
This rule checks interactive machines for processes whose name matches the regular expression <B>^(browser.*)$</B>. If the process uses more than 25% of the CPU during the preceding interval, <B>patrol</B> mails the user a message about the amount of resource he is using. If the process uses more than 50% of the CPU, it mails the user a message about a looping process, kills the process, and posts an alert.<p>
The configuration file  (Listing 1) contains any number of rule statements. Each statement has a number of fields delimited by white space. The number of fields and meanings vary somewhat by statement type. First, I'll describe the three common fields, and then go through the statement types.<p>
The first field of every statement is a code that determines the resource to be checked.  Table 1 lists the current set of statement identifiers.<p>
The second field on each line contains a host selector field that determines whether that particular resource is checked on a given machine. The remainder of the statement is only executed if this field evaluates to true. This gives a method of having one common configuration file for many machines and only having the relevant checks performed on any given machine. The selector can take one of the following five forms:<p>
1.  a hostname as returned by the <B>hostname</B> command. Any Perl pattern is valid (e.g., <B>pinto.*</B>).<p>
2.  an architecture in square brackets such as <B>[aix6000]</B> or <B>[sun4]</B>.<p>
3.  a feature name in angle brackets, such as <B>&lt;afs&gt;</B>, as explained below.<p>
4.  a command in backticks, indicating hosts on which the command returns true.<p>
5.  * to designate all hosts.<p>
The features installed on each machine are listed in a small file named <B>/etc/tailor.opts</B>  (Figure 1). This file drives SLAC's local software installation procedures. <B>patrol</B> consults this file to determine which resources to check. For instance, if AFS is installed on a machine, then the AFS daemons should be running.<p>
There is one feature named <B>usage</B> employed to describe the general class of service provided by servers. This feature can take values such as <B>interactive</B>, <B>batch</B>, or <B>fileserver</B>. A selector such as <B>&lt;usage=fileserver&gt;</B> can be used to impose stricter limits on processes on a fileserver than on an interactive machine.<p>
Most statements end with an action field to describe what to do. The available actions are listed in  Table 2. The actions are fairly intuitive from their names, so I'll discuss them a bit later. All of the actions that send some sort of message to a log or to a person try to avoid flooding by establishing an interval in which they will not send a duplicate message. This interval generally defaults to six hours, but is specifiable with the <B>intvl</B> parameter.<p>
Now, on to the description of what each statement does. The PC statement checks process CPU use against a set of thresholds. A process is selected by matching the process name against the regular expression in the third field. The first rule on which both the hostname selector and the process name selector match is the rule that is used. CPU usage for the interval is computed by subtracting the CPU time used at the beginning of the interval from the amount used at the end, and dividing by the number of seconds in the interval.<p>
The fourth field on the PC statement is the threshold for the interval CPU use in percent. If the CPU use for the selected process is greater than or equal to the threshold, the actions are triggered. The threshold and actions may be repeated on subsequent lines with leading white space on each line to signal the continuation. Each threshold is tested in turn until one is exceeded or the list is exhausted. Hence, thresholds should be listed from larger to smaller, presumably with corresponding severities of action.<p>
<pre>
PC &lt;usage=interactive&gt;* 50 mail($user,LOOP),kill, \

page(admin,LOOP)
30 mail($user,CPUHOG),nice(min)
20 log</pre><p>
<p>
The PM statement checks process memory usage. It compares the SIZ field reported by <B>ps</B> against the listed thresholds, and executes actions similar to the PC statement.<p>
<pre>
PM &lt;usage=interactive&gt; m?xrn 30000 mail($user,XRNHOG)

PM &lt;usage=interactive&gt; * 60000 mail($user,MEMHOG), kill

30000 mail($user,LARGEPROC)</pre><p>
<p>
This set of statements will mail users if the <B>mxrn</B> or <B>xrn</B> process memory size exceeds 30M (which tended to happen if users left processes running for long periods of time). For any other process, it will <B>kill</B> the process and send the user mail if the process exceeds 60M, or just send mail if it exceeds 30M. In both cases, the wording used suggests that if this is normal behavior for that program, the user should run the process on some specialized machines where it won't interfere with other interactive users.<p>
The F statement checks mounted filesystems (generally locally mounted ones) for full conditions. <B>patrol</B> compares the percent full number reported by <B>df</B> against the listed thresholds and executes the corresponding actions if any of the thresholds match. The threshold conditions are more complex than on the previous statements: they can cause triggers on either threshold percentages or on threshold percentages plus a threshold rate of growth. Several such thresholds can be listed in one group, as follows:<p>
<pre>
F nfs0[12] /home0[1-9] 99 page(admin,FSFULL)

95+1,90+2,80+5   mail(admin,FSFULL)</pre><p>
<p>
This example checks servers "nfs01" and "nfs02" for filesystems <B>/home01</B> through <B>/home09</B> (there's no error for filesystems that don't actually exist, since the filesystems reported by df are matched against the rules, not vice versa). If the filesystems are 99 percent full or more, the administrators are paged. If the filesystems are 95 percent full or more and have grown by at least one percent in the last interval, or are 90 percent full and have grown by at least two percent, or 80 percent full and have grown by at least five percent, the administrators are sent mail about the condition. This allows notification of both full filesystems and ones that are growing at a rate that has a possibility of filling up quickly.<p>
The F statement also causes <B>patrol</B> to perform a few other filesystem checks, for instance for a shortage of inodes. <B>patrol</B> is limited by the quality of the information returned by <B>df</B>. For instance, most systems do not report blocks in use by files that have not yet been closed. However, in practice this gives early warning of many troublesome conditions.<p>
The D statement is a bit different from the previous ones. It provides a pattern that should match a daemon running on a selected machine. If no process in the <B>ps</B> list matches that pattern, the daemon is assumed not to be running, and the actions are triggered.<p>
<pre>
D &lt;afs&gt;   afsd  page(admin,NODAEMON)
D [sun4]  lpd   restart ('restartd lpd'), \

mail(admin,DRESTART)</pre><p>
<p>This feature gives an opportunity to notify the administrators of the failed daemon and to attempt to restart it if such an operation is safe.<p>
The SP statement can check some Internet services on the local machine. It examines the output of <B>netstat</B> to determine whether any process is at least listening on that port. This simple test doesn't detect daemons that are hung up but that still have a connection to the TCP port. The SP statement can't test UDP- or RPC-based services, but in practice does detect and report a number of problems.<p>
<pre>
SP * tcp/telnet restart('kickinetd')</pre><p>
<p>
This example checks for the presence of the <B>telnet</B> service, and if not found, restarts it by sending a HUP signal to <B>inetd</B>.<p>
The M statement provides message texts for substitution in the mail and page actions. The message text takes the form of a <B>here document</B>, which is evaluated as a Perl string before sending. There are some predefined variables that may be substituted in the message at that time: <B>$cmd</B> gives the command from the <B>ps</B> command; <B>$cmdline</B> give the entire command line with arguments; <B>$pct</B> gives the percentage of CPU used by the process or the percentage full of the filesystem; <B>$host</B> gives the current hostname; <B>$sz</B> gives the memory size in use for a process, and <B>$mount</B> gives the mount point of a filesystem. A few sample message texts are shown in  Figure 2.<p>
Finally, I will describe the possible actions in more detail. The log action, which is the default, writes a line to a systemwide logging daemon named <B>slaclog</B>. (<B>slaclog</B> is also available via <B>ftp</B> from the SLAC site.) This should be fairly easily customizable to another logging system if you prefer. The log lines are mostly for statistics and for a log of the more heavy-handed actions Patrol might take. (Think of it as the local police blotter.)<p>
The <B>mail</B> action sends mail to the specified user. The word <B>$user </B>may be used to send mail to the owner of the process. The second parameter is the message ID to send. There must be an M record in the <B>patrol.cf</B> file with that ID. Optionally, the third parameter specifies the interval in which duplicate messages are suppressed: the interval may be specified as a number with a letter "s" for seconds, "m" for minutes, "h" for hours, or "d" for days. We set up the from address of the mail to be "The System Patrol," but have the reply-to address set to go to real person, so that messages can say "If you need further assistance, simply reply to this message."<p>
The <B>mcons</B> action routes messages to the SLAC multiple console routing system. <B>mcons</B> is a central dispatcher that collects named streams of information from a variety of sources and sends it back out to subscribers to those streams. It allows any of us to subscribe to messages from <B>patrol</B>, from the server consoles, from <B>syslog</B>, and more. This is not currently available outside of SLAC.<p>
The <B>kill</B> action sends a signal to the triggering process. The default signal is <B>-9</B>, but any other signal can be specified.<p>
The <B>restart</B> action attempts to restart a daemon or a subsystem by executing a command. The command is executed by the <B>system()</B> call, and the log message will indicate whether the command succeeded or failed (returned a non-zero status code). There is one internally defined restart action that may be requested: <B>kickinetd</B> locates the <B>inetd</B> process and sends it a HUP signal.<p>
The <B>nice</B> action will <B>renice</B> a process to a specified level or to the lowest possible value if <B>min</B> is specified.<p>
The <B>page</B> action sends an alphanumeric page to a specified person. The <B>patrol</B> script is set up to use the Telalert paging system (<B>www.telamon.com</B>), but another may be substituted for it. The text of the page is specified by an M record in the <B>patrol.cf</B> file.<p>
The <B>name</B> action specifies an alternate name for a process to be substituted in messages. It is useful when the command is matched by a pattern but you want a single more descriptive name in the messages.<p>
The <B>patrol</B> script works well for us. Generally, users have been happy when a looping process was pointed out to them. We've been careful to warn people about most situations rather than outright killing the offending processes, so we haven't had users upset about lost work. The messages try to be helpful, pointing out alternatives to the users or directing them to documentation. The users have generally been grateful to find out the local rules and to be directed to appropriate machines for their work. We've tried to capture the spirit of the best sort of constable, one who offers assistance and service beyond simple enforcement. 
<p>


<P>


<H1>About the Author</H1><p>
Chuck Boeheim is the head of the Systems Group at the Stanford Linear Accelerator Center, a high-energy physics research lab at Stanford University. He has been working in university computing for more than 20 years on a wide range of computing systems. He has a special interest in building tools that solve real-world computing problems in an elegant manner. See http://www.slac.stanford.edu/~boeheim for contact information.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
