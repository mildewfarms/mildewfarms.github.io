<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i02:  A Web-based Graphical Front End for sar</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/1997/feb97.tar"><b class=codeListing>feb97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>A Web-based Graphical Front End for sar</H1><p>
<P>
Brian Rice<P>

</H1><p>If you want to monitor your UNIX system's performance, you have a choice: you may have either graphical display or vendor neutrality, but not both. Many System V UNIXes offer the system activity reporter, <B>sar</B>, which reports, in a tabular format, data about resource demand over time. Tabular data are often adequate for personal use, but to convince management to buy faster equipment or convince users to make their programs more efficient, you may need to draw them a picture. Also when you are searching for patterns in load and performance, you may find a graphical display useful as well.<p>
For graphical presentation, different vendors offer different tools: Silicon Graphics offers <B>gr_osview</B>, Sun offers <B>sag</B>, Hewlett-Packard offers <B>glance</B>, and so forth. Thus, monitoring performance in today's multi-vendor environments can mean significant ad hoc learning. Also, not all of these tools are network-aware, so using them for remote monitoring may require preparing another layer of software infrastructure.<p>
Only <B>sar</B> is almost universally available and generally similar on all platforms. So, if you wish to build a platform-independent, network-aware solution, <B>sar</B> is the obvious foundation. In this article, I will show <B>websar</B>, a graphical remote monitoring system suitable for the intranet.<p>
<B>Introducing sar</b><p>The System V system activity reporter, <B>sar</B>, uses any of several proprietary techniques to read performance data from the kernel.  See Listing 1 for an example of what <B>sar</B> looks like used from the command line.<p>
The command asked for three samples, at one-second intervals, of system CPU utilization (<B>-u</B>). This example, from a Silicon Graphics server running IRIX, shows a not particularly busy system; the first six fields divide the CPU time of the last interval into time spent executing user code, time spent in the kernel, time spent servicing interrupts, time spent waiting on I/O, idle time, and time delivering dynamically allocated memory to some process. The last five fields further subdivide I/O wait time: this system I/O is almost exclusively with the filesystem.  Listing 2 shows the same command on a Sun.<p>
These listings demonstrate the first obstacle in designing a vendor-neutral front end: not all platforms offer the same data. In fact, different vendors' <B>sar</B> commands take different sets of option letters - the <B>-u</B> option is universal, as far as I know - and report mostly similar, though not identical, data items for each. So, the strategy will be to get <B>sar</B> to tell me everything it knows on each platform using the <B>-A</B> ("all") flag.  Listing 3 shows a sample of <B>sar -A</B> on a SCO system.<p>
The value for the <I>m</I>th data item on the <I>n</I>th row of the header is the <I>m</I>th number on the <I>n</I>th row of data. Other details to worry about include: some data lines can be blank, to indicate that their data would be meaningless or are unavailable; some data items can be wrapped in parentheses; and some data items have two values, such as in the ninth line of data shown in  Listing 3. The value of <B>proc-sz</B>, 99/107, means that of the 107 entries in the kernel's process table, 99 are used.<p>
<B>Why a Web-based front end? Why Perl?</b><p>A good way to make any data available over a network at the smallest cost in management overhead is to feed that dataset to a Web server. Web servers are simple to install, and many are freely available. Like most UNIX Internet daemons, they consume CPU time only when responding to requests. A Web server can fit comfortably into 75 Kb of disk space and 400 Kb of memory. And, the capabilities of any Web server can be easily extended using the Common Gateway Interface (CGI). A CGI program receives data from Web browsers either through an environment variable or on its standard input. Everything the CGI program outputs is sent by the Web server back to the browser. Thus, your program need not worry about network details.<p>
Graphical Web browsers are also readily available. The most popular, Netscape Navigator, does require the payment of license fees, however, your organization may have already licensed it. The NCSA Mosaic browser is available without license fees for "internal business purposes." (Microsoft's browser, Internet Explorer, although lavishly promoted, is not available for UNIX systems at this writing.) Regardless of which graphical browser you choose, its understanding of the Hypertext Markup Language (HTML) makes it easy to drop a graphical user interface onto any text-based tool. Your middleware program need only read text and output HTML, which is not a difficult task because HTML is a very simple page markup language. Little additional complexity is required to make that HTML output graphically rich.<p>
Whenever the task at hand is to convert text from one format into another, Perl comes to mind. This freely available scripting language is everything good about UNIX in one box. Perl is eminently suited for writing CGI programs because of its text-manipulation abilities.<p>
<B>How websar Works</b><p>The <B>websar</B> tool is a CGI program. It expects to be started on demand by a Web server whenever a user points a Web browser at it, as if it were an HTML document itself. <B>websar</B> detects whether or not it is receiving the results of a form: if so, it treats that input as the user's preference for the type of graph to create. If not, <B>websar</B> sends a form to the user's browser, to solicit just such preferences. CGI programs that exhibit this "be-your-own-form" behavior are common.<p>
In its form-presentation mode, <B>websar</B> must ask the system on which it's running which data items are available. <B>websar</B> does this by sending a list of <B>sar -A</B>'s headers, with a checkbox next to each item. Because the device line is duplicated once for each device, it must also discover which devices are available. <B>websar</B> also examines the days for which <B>sar</B> data are available, and allows the user to choose one. Finally, because the <B>sar</B> command line gives the opportunity to restrict the report to a time range, and to ask for records at a particular time interval, <B>websar</B> offers text-boxes in which the user may type in values to <B>sar</B>.  See Figure 1 for a sample of what this form will look like. After <B>websar</B> has sent this form to the browser, it exits.<p>
When the user fills out the form and presses the "Graph!" button, the Web server starts <B>websar</B> again. Because the server hands <B>websar</B> the user's choices, <B>websar</B> runs in graphing mode. It runs the <B>sar -A</B> command using the data file for the day of the user's choice, passing in the start, end, and interval if given. <B>websar</B> extracts the desired data items from the resulting stream of data and stores them in an array, noting the maximum value for each. After <B>sar -A</B> finishes, <B>websar</B> computes an appropriate bar size to represent each value. Finally, it sends a bar graph to the browser, showing each data item returned by <B>sar</B> with its associated time. See  Figure 2 for a sample. The Web browser itself does all the horizontal and vertical formatting; <B>websar</B> need only ask for it in HTML.<p>
Note that <B>websar</B> does not send the binary image data for each bar itself; rather, it sends HTML that says, "Call back to this Web server and fetch this image and show it here." A selection of small bar images, in GIF format, is installed together with <B>websar</B>. To display a bar of a certain length, websar sends HTML requiring the display of several smaller bars of fixed sizes back-to-back. Because a Web browser need only download an image once, even if it is to be shown multiple times, this technique reduces network traffic.<p>
The <B>websar</B> tool is written in version 4 of the Perl language.  Because Perl 4 lacks multi-dimensional arrays, the program is more complex than a Perl 5 version might be. Nevertheless, Perl 5 has yet to achieve the widespread use that Perl 4 has, so <B>websar</B> remains a Perl 4 tool for now. Perl 5 is, by and large, a clean superset of Perl 4.<p>
<B>Starting a Tiny Web Server</b><p>For an excellent treatment of server setup, see Cornelius Cook's article "Configuring a Minimal Web Server" in the October 1996 <I>Sys Admin</I>. Cook explains how to set up the NCSA and Apache servers; either will work for our purposes here. Be sure to create a <B>cgi-bin</B> directory. <B>websar</B> will be installed there; its presence in <B>cgi-bin</B> will tell the Web server to run it when it is accessed, rather than simply to send it off to the browser as if it were a document. This will require a ScriptAlias line in the <B>srm.conf</B> file, such as the following:<p>
<pre>
ScriptAlias /cgi-bin/ /usr/local/etc/httpd/cgi-bin/</pre><p>
<p>
Of course, you may choose the location of the <B>cgi-bin</B> directory, as long as you tell the Web server where it is.<p>
<B>Starting the sar Data Collector</b><p>Many UNIX systems that ship <B>sar</B> also ship <B>sadc</B>, the <B>sar</B> data collector. This tool collects all <B>sar</B>'s data into binary-format data files, one file for each day's data. These files typically are stored in <B>/var/adm/sa</B> and are called <B>sadd</B>, where <B>dd</B> represents the day of the month on which the data were gathered. The script <B>sa1</B> is provided as a convenient front end to <B>sadc</B>.<p>
Whether you use <B>sadc</B> or <B>sa1</B>, you must create a cron job to gather data at intervals of your own selection. Make sure that the data files created are readable by the user ID that your Web server daemon is running as, because that is also the user identity that <B>websar</B> will run. You can do this by running your Web server as the same user as the owner of the <B>sar</B> data files, or by making sure that <B>sadc</B> creates world-readable files.<p>
<B>Installing websar</b><p>Place the <B>websar</B> script into the <B>cgi-bin</B> directory you created above. Again, make sure that the script is readable and executable by the user ID your Web server daemon is running as. Also, be sure to examine the first line of <B>websar</B>:<p>
<pre>
#!/usr/bin/perl</pre><p>
<p>
The <B>#!</B> must be the very first characters in the file, with no leading space, and following <B>#!</B> must be the correct absolute pathname of your Perl executable.<p>
<B>Check the Configurable Items at the Beginning of websar</b><p>Notice that websar will use a file containing canned output of <B>sar -A</B> if one is present. Creating a file like this is easy; you need only redirect the output of <B>sar -A 1 1</B> into a file. On some UNIX versions, devices are included in this list only if they saw activity during the covered period. So, you might want to start some background jobs to rattle your disks before creating this file.<p>
Make sure your system has <B>cgi-lib.pl</B> installed in its Perl library directory. If you don't have a copy of this excellent resource, just visit <B>http://www.bio.cam.ac.uk/web/form.html</B>.<p>
You must also install the canned bars. The <B>websar</B> script expects those bars to be installed in a subdirectory, <B>websar-bars</B>, of the document area - conventionally <B>/usr/local/etc/httpd/htdocs</B>. Make sure these GIF files are readable by the user ID your Web server runs as.<p>
<B>Viewing Graphs with a Web browser</b><p>Any recent graphical Web browser, such as the Netscape Navigator or NCSA Mosaic, will do. If the target system (the one you wish to graph) is named <B>walrus.foo.com</B>, simply point your browser to the following Uniform Resource Locator (URL):<p>
<pre>
http://walrus.foo.com/cgi-bin/websar.pl</pre><p>
<p>
<B>websar</B> will notice the lack of form-response data, and your browser window will show a form. Complete this form and click the "Graph!" button. <p>
<B>Limitations and Possible Enhancements</b><p>Although I have sampled a wide variety of <B>sar</B> commands, <B>websar</B> is not guaranteed to be compatible with all. In particular, ICL UNIX <B>sar</B>'s output is unusual and is not supported in this version.<p>
This version of <B>websar</B> deals with binomial data items such as 99/107 by ignoring the second value - not unreasonable because the second value usually represents the (often fixed) size of some table. Nevertheless, it would be possible to graph that value as well.<p>
As shown here, <B>websar</B> offers a maximum of three bar colors; if you graph more than three items, the same colors are reused. If you wish to use more colors, just create new sets of bar pieces <B>c3s1.gif</B>, <B>c3s5.gif</B>, etc., with a new color but of identical sizes to <B>c0s1.gif</B>, <B>c0s5.gif</B>, etc. Then modify the configurable parameter NCOLORS.<p>
<B>Conclusions</b><p>The ubiquity of Web servers and browsers means that any tool can have a graphical, network-aware interface. Languages like Perl will be adequate for placing a CGI front end on most tools; even highly interactive tools can be managed using something like Tcl. To bring the output of the program back to the browser screen in the most flexible way, you must know HTML.<p>
Recently, I have seen more and more WYSIWYG text editors that save their text in HTML. System administrators should not let their use of these tools prevent them from becoming fluent in HTML. The program this article has described is a demonstration of the power of scripts that emit HTML.<p>
<B>Acknowledgements</b><p>Thanks go to the following persons, who responded to my plea for sar samples: Gerald N. Ginsburg, Joe Berry, Andrew Gierth, Doug O'Neal, Mark Sitkowski. 
<p>


<P>


<H1>About the Author</H1><p>
Brian Rice is Member of Technical Staff with K Computing, a nationwide UNIX and Internet training firm. His duties include teaching and course development for system administration, networking, and programming classes. He also still does system administration. Brian received his B.A. in philosophy from Oberlin College in 1989.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
