<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i08:  Server-Side Java</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a4_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1997/aug97.tar"><b class=codeListing>aug97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Server-Side Java</H1><p>
<P>
Pete Welter and John Meier<P>

</H1><p><B>Introduction</b><p>Much of the attention paid to Java has been focused on its ability to create fancy effects and graphic applications viewable in Web browsers. This article focuses on using Java in another context - on the server side of the Web. Java's file and socket APIs are the most robust and mature parts of a majority of Java implementations. Server-side Java can also count on running in a given Java implementation, unlike applets, which must run in whatever Java implementation is used by a given browser.<p>
Java is fast becoming the primary language for object-oriented programming. There is a good chance someone will have written the code that you need, however, and because there is a single Java specification, compiling and integrating the code is usually quite simple. Commercial tools have matured quickly and are quite stable and usable, with enough competition to spur rapid improvements. In terms of speed, just-in-time compilers (JITs) bring the speed of Java up to a small multiple of C++ (2x to 10x), while the Java language provides a simpler and more forgiving environment than C++ (exceptions instead of core dumps, garbage-collection instead of memory leaks).<p>
If you're doing a lot of system calls, or you need to access a lot of OS-specific information or utilities, then a language like Perl might be a better fit. If raw execution speed is a top priority, then C++ or C might be better. The majority of server-side programs, however, fall into neither of these categories.<p>
In the following examples, we'll be applying Java to the familiar Common Gateway Interface (CGI) method of server-side Web programming, with examples using a simple CGI class as a basis for dynamically generating pages, and for processing forms.<p>
<B>Hello World</b><p>The CGI class will provide a framework for developing the first CGI Java example of a server-side Java program, the proverbial "Hello World." (A discussion of the details of the CGI class appears later in this article.)<p>
<pre>
1:  public class HelloWorldCGI extends CGI {
2:   public static void main(String[] argv) {
3:    CGI cgi = new HelloWorldCGI();
4:    cgi.handle(argv);
5:   }
6:
7:   protected void printBody() throws Exception {
8:    outputStream.println("&lt;HEAD&gt;&lt;TITLE&gt;Hello \
World&lt;/TITLE&gt;&lt;/HEAD&gt;");
9:    outputStream.println("&lt;BODY&gt;&lt;H1&gt;Hello \
World!&lt;/H1&gt;&lt;/BODY&gt;");
10:  }
11: }</pre><p>
</b><p>Line 1 defines the name of the class <B>HelloWorldCGI</B>, and says to "extend" (subclass) the CGI class, allowing it to use all of CGI's functionality, overriding only the parts needed for the specific CGI. The <B>main()</B> method is called by the Java interpreter when starting up this class. In this case, the program creates an instance of <B>HelloWorldCGI</B>, calling its <B>handle()</B> method, which will take care of all of the handling of the CGI. Don't worry about the details of <B>main()</B>; all you really need to understand is that you're creating an instance of the CGI class (in this case, <B>HelloWorldCGI</B>).<p>
The <B>printBody()</B> method (lines 7-10) is responsible for outputting the HTML for the generated page. Note that the HTML generated starts with the <B>&lt;HEAD&gt;</B> tag, not the usual <B>&lt;HTML&gt;</B>. The CGI class outputs the Content-type header, and the opening and closing <B>&lt;HTML&gt;</B> tags for you. If something were to go wrong inside of <B>printBody()</B>, and an exception were thrown, then the CGI class catches that exception and outputs its error message. Because the opening of the page has already been sent to the browser, the error message is displayed in the browser, which is much more useful than the typical "Server Error" message.<p>
After compiling the <B>HelloWorldCGI</B> class, running the program from the command line (assuming that Java is installed in <B>/usr/java</B>, and that the current directory contains <B>CGI.class</B> and <B>HelloWorldCGI.class</B>):<p>
<pre>
/usr/java/bin/java HelloWorldCGI

</B>produces:</pre><p>
<p>
Content-type: text/html

&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Hello World&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Hello World!&lt;/H1&gt;&lt;/BODY&gt;&lt;/HTML&gt;
</pre><p>
</b><p>To complete this example of a server-side Java program, the Web server must invoke this class. However, there's a catch: CGI parameters are passed to programs via environment variables, and Java doesn't know about environment variables.<p>
<B>Shell Scripts as Java "Glue"</b><p>In Java, System properties perform an analogous role to environment variables. Calling the function:<p>
<pre>
System.getProperty("os.name")</pre><p>
</b><p>will return the name of the operating system that Java is running on. Fortunately, there is a way to set System properties from the outside. The <B>-D</B> option for the Java interpreter allows System properties to be set, so invoking Java like this:<p>
<pre>
java -DmyProperty=myValue MyClass</pre><p>
</b><p>will set the <B>myProperty</B> System property to the value <B>myValue</B>. Using this feature, we've written a simple shell script (saving it in a file named <B>HelloWorldCGI</B>) to invoke Java, setting System properties with the names and values of corresponding environment variables:<p>
<pre>
1: #!/bin/sh
2: cd /usr/ssjava
3:
4: /usr/bin/java/bin/java 5:   -DCONTENT_LENGTH="$CONTENT_LENGTH" \

6:   -DREQUEST_METHOD="$REQUEST_METHOD" 7:   -DQUERY_STRING="$QUERY_STRING" \

8:   -DPATH_TRANSLATED="$PATH_TRANSLATED" 9:   -DHTTP_USER_AGENT="$HTTP_USER_AGENT" \

10:   -DSERVER_SOFTWARE="$SERVER_SOFTWARE" 11:   HelloWorldCGI </pre><p>
</b><p>Line 2 sets the current directory to the directory where the classes reside. (For these examples, assume this is <B>/usr/ssjava</B>.) Line 4 invokes the Java interpreter, while lines 5-10 pass in a basic set of environment variables. Java automatically invokes the <B>main()</B> method of the class <B>HelloWorldCGI</B>.<p>
The simplest way to make the server run the shell script is to keep the shell script in the same directory with all of the classes, and add a CGI directory that maps the virtual directory <B>/ssjava</B> to the actual directory <B>/usr/ssjava</B>. For Apache, this is done by adding a <B>ScriptAlias</B> line to the <B>srm.conf</B> file:<p>
<pre>
ScriptAlias /ssjava /usr/ssjava</pre><p>
</b><p>For Netscape servers, it's done under the Programs section in the Administration server. Other Web servers have similar methods for defining CGI directories.<p>
After making sure that the script has execute permissions, invoke it from a browser with:<p>
<pre>
http://www.yourserver.com/ssjava/HelloWorldCGI
</pre><p>
</b><p>and Hello World appears in lovely bold text.<p>
<B>The CGI Class<p>
CGI.java</B>  (see Listing 1) is a simplified version of code we've used for handling CGIs in our Java-based products.<p>
Besides handling errors the CGI class hides the messiness of CGI parameter passing. The CGI class allows variables to be passed in from GET or POST requests, or from the command line (for testing), without subclasses having to know any of these details. The most commonly used methods of the CGI class are:<p>
<pre>
printBody()
</B>should be overridden by subclasses to output HTML

getValues(String name)</pre><p>
</b><p>returns all of the values for a given name as an Enumeration<p>
<pre>(see <B>java.util</B>)</pre><p>
<p><pre>
getValue(String name)</pre><p>
</b><p>returns the value of a variable with a given name, or the<p>
first value for variables with multiple values<p>
<pre>
getHeader(String name)</pre><p>
</b><p>returns the value of a header field, for example<p>
<pre>"HTTP_USER_AGENT"</pre><p>
<p><p>
<pre>getRequestType()</pre><p>
</b><p>returns "GET" or "POST," depending on the method used for<p>
the request<p>
<pre>
getVariables()</pre><p>
</b><p>returns all of the variable names as an Enumeration<p>
<pre>(see <B>java.util</B>)</pre><p>
</b><p>One example of using these methods is in the <B>CGI.printBody()</B> method, which prints out all of the variables specified in the CGI.<p>
For testing, CGI lets you set variables by providing arguments of the form <B>name=value</B>. You can also specify environment variables by prefacing the argument with a <B>-H</B>, for example:<p>
<B><p>
<pre>-HPATH_TRANSLATED=/usr/ssjava/size.html</pre><p>
</b><p>Being able to run CGIs from the command line makes debugging them much simpler. You can add debug <B>print</B> statements to trace variables or to profile code. Even better, most Java development environments allow their source-level debuggers to start with command-line arguments. Using these tools can save a tremendous amount of debugging time, and can also be a highly effective method of learning Java.<p>
<B>Form Handling</b><p>The <B>GuestBookCGI</B>  (see Listing 2) class handles both parts of a mini-guestbook application; it outputs the form, and then processes the form, depending on whether or not you're doing a POST action. The <B>GuestBookCGI</B> class illustrates the use of the CGI class' <B>getValue()</B> method, both for HTML generation, and for retrieving the result of a POST form. In addition, the POST case uses the <B>java.io.RandomAccessFile</B> class to append text to a file. Append is an operation which is less intuitive in Java than in many other languages (in which you can open a file in "append" mode).<p>
First, the program runs <B>Guestbook</B> as a GET (the default request method):<p>
</pre><p>
<p>/usr/java/bin/java GuestBookCGI name=George</pre><p>
</b><p>which results in:<p>
<pre>
Content-type: text/html

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Guestbook&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H2&gt;Please register in the guest book:&lt;/H2&gt;
&lt;FORM METHOD=POST ACTION=GuestBookCGI&gt;
Name: &lt;input name=name value="George" size=20&gt;&lt;P&gt;
E-mail: &lt;input name=email&gt; value="" size=20&gt;&lt;P&gt;
&lt;input type=submit value="Register in Guestbook"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre><p>
</b><p>Note that George is the default value for the "name" input field.<p>
The next example illustrates the form processing part of <B>Guestbook</B>:<p>
<pre>
/usr/java/bin/java Guestbook -HREQUEST_METHOD=POST name=Betty
email=betty@bettyinc.com

</B>which results in:</pre><p>
<p>
<pre>Content-type: text/html

&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Guestbook&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;Adding you to the guestbook...&lt;P&gt;
&lt;H2&gt;Thanks Betty!&lt;/H2&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre><p>
<p>
and an entry in the <B>guestbook.txt</B> file like:<p>
<pre>
---------------
name=Betty
email=betty@bettyinc.com</pre><p>
<p>
Creating the glue shell script is a matter of changing the class to be invoked to <B>GuestBookCGI</B>, and saving the shell script as "GuestBookCGI." To access it from a browser, use:<p>
<pre>
http://www.yourserver.com/ssjava/GuestBookCGI?name=George</pre><p>
</b><p>which illustrates passing variables to a CGI program via the GET method.<p>
<B>Servlets</b><p>The CGI applications we've discussed so far require the shell to start up a Java interpreter every time the CGI is run - an expensive way to implement server-side functionality in terms of CPU resources. There is an more efficient alternative, called a servlet.<p>
Like CGI programs, servlets are Java programs that are run on the server in response to a request for a URL. They can handle form requests, generate HTML pages, connect to other server applications, and access files just as CGIs can. But unlike a CGI, a servlet does not require a new process to be created for every request. Instead, the servlet runs directly in the Java virtual machine built into the Web server.<p>
There are two major APIs for writing servlets - one that works with Netscape servers and another that works on the Java server from Sun. Eventually these are expected to converge to a single servlet API supported on all of the major web servers.<p>
<B>Enabling Servlets on Netscape FastTrack or Enterprise Servers</b><p>Using servlets on a Netscape server is as simple as enabling the Java interpreter and accessing the URL for the servlet from your browser:<p>
1) Open your Web browser to the Netscape Administration server.<p>
2) Pick your server from the list of servers installed.<p>
3) Choose Programs from the button bar.<p>
4) Choose Java item from the list on the left.<p>
5) Click the Yes button to enable the Java interpreter. Don't change the Java Applet Directory. Accept the default (something like <B>/usr/ns- home/plugins/java/applets</B>) because it already has some useful examples in it.<p>
6) Press the OK button.<p>
7) Choose Save and Apply button to save your changes and restart the server.<p>
Next, verify that servlets are working using one of the Netscape examples. Open your browser to the following URL, replacing <B>www.yourserver.com</B> with the domain name for your Web server:<p>
<pre>
http://www.yourserver.com/server-java/BrowserDataApplet</pre><p>
</b><p>This runs the BrowserDataApplet example and you should see something that looks like this:<p>
<pre>
Hello 206.168.191.19
You're using Mozilla/4.0b3 [en] (WinNT; I)
You accessed /server-java/BrowserDataApplet
using the GET method
Developing Servlets</pre><p>
</b><p>The Servlet class  (see Listing 3) that we've provided has the same interface as the CGI class. With it, you can easily convert a Java CGI app into a servlet.<p>
We'll do a <B>HelloWorld</B> example of a servlet  (see Listing 4). First, copy the Java source files from  Listing 3 and  Listing 4into the Netscape servlet directory (<B>/usr/ns-home/plugins/java/applets/</B> for example).<p>
To compile a servlet, use the script provided by Netscape, which modifies the <B>CLASSPATH</B> to include the servlet classes.<p>
<pre>
cd /usr/ns-home/plugsin/java/applets
../javac HelloWorldServlet.java
</pre><p>
<p>Then, access the servlet from a browser using:<p>
<pre>
http://www.yourserver.com/server-java/HelloWorldServlet</pre><p>
<p>
One item to note when developing and testing servlets: the servlet class is loaded when it is first accessed and only unloaded when the server shuts down. After you make changes and recompile the servlet code, you'll have to restart the Web server to force it to load the new servlet class.<p>
<B>Conclusion</b><p>
Java is an excellent language for server-side development because it creates programs that are portable, robust, efficient, and easily debugged. Java CGIs are a good way to get started because they follow the familiar CGI model and can be used with any Web server. When your Web server supports servlets, you can easily convert from Java CGIs and gain a boost in performance.<p>
References<p>
Source code for these examples<p>
http://www.freshtech.com/ssjava<p>
ftp.mfi.com in /pub/sysadmin<p>
<p>
Java Development Kit<p>
http://www.javasoft.com<p>
<p>
The Java Tutorial<p>
http://www.javasoft.com/nav/read/Tutorial/index.html<p>
<p>
Netscape Java Servlet API<p>
http://developer.netscape.com/library/documentation \<p>
/enterprise/unix/javapi.htm<p>
<p>
Javasoft Servet API<p>
http://jserv.javasoft.com/products/javaserver \<p>
/webserver/fcs/doc/index_developer.html</b> 
<p>


<P>


<H1>About the Author</H1><p>
Pete Welter (pete@freshtech.com) and John Meier (john@freshtech.com) are software engineers at Freshwater Software, Inc. (http://www.freshtech.com) in Boulder, CO. They are responsible for developing SiteScope, Freshwater's Java-based Web server monitoring product.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
