<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i09:  Automating Software Installation</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1997/sep97.tar"><b class=codeListing>sep97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Automating Software Installation</H1><p>
<P>
Rick Moore<P>

</H1><p>When a company spends significant amounts of resources engineering server infrastructure, it seems worthwhile to enforce the results as the standards. Our first attempt at doing so produced a large bundle of meticulous documentation coupled with a customized version of the manufacturer's standard installation procedure.  The sum package was known as a "Gold."<p>
Although the package clearly defined the standards, it was another matter entirely getting the installers to follow the procedures correctly. People with the best of intentions had difficulty following the two-inch-thick documentation. People with less than the best of intentions found it too easy to stray from the procedure based on their own preferences. Additional problems were the lengthy time it took to perform the procedure and the cost of putting together the distribution media. Furthermore, the Gold package did not comprehend anything beyond the operating system; applications and system specifics all had to be applied on top of the standard operating system load.<p>
It became clear that we needed a way to capture and restore a server. The process needed to be as follows: Our department would build and test server designs using traditional installation procedures. Certified designs would get captured and cataloged.  Customers, in turn, would use the catalogue to make requests for server images. Our department would then deliver media and documentation for an automated load which would restore our certified configuration on the target server. These business requirements then drove the following technical requirements:<p>
<li>standard installation process for all servers<p>
<li>high-speed installation<p>
<li>high degree of automation<p>
<li>support flexibility<p>
Hence, ShrinkWrap was born.<p>
<B>Shrink Wrap</b><p>The above requirements drove me to write the ShrinkWrap utility. ShrinkWrap is nothing more than an automated backup and restore utility. The contents of the backup are defined by a template file which describes the disks and slices to be captured. The restore procedure involves booting a miniroot and restoring the captured items. There is no real input required from the installer during the ShrinkWrap load. When the load is complete, the target machine will essentially become a duplicate of the source machine. As a result, the installer will need to change the target machine's name and IP address so there are no duplicates on the network.<p>
ShrinkWrap is written as a cooperative set of C programs. The version provided with this article is for NCR MP-RAS UNIX, but seems to be relatively flexible and can be ported easily. It could have been written in shell script or perl, but I am more comfortable as a programmer with C. As a compiled language, C has the additional benefit of security; we maintain control of the source code.<p>
ShrinkWrap was written to enforce software standards, but in doing so it must rely upon hardware standards. The most important requirement is that the SCSI addresses of captured disks must match on the source and target machines. This is non-negotiable; ShrinkWrap performs none of the complex translations that would be required to support loading an image on disks with different SCSI addresses.<p>
Often I am asked what else must be the same between the source and target machines. Technically, it depends upon the version of UNIX you are using and how cleanly you would like the machine to boot after the restore. The NCR UNIX kernel, for example, is aware of things such as card types, locations, and counts.  Changes are detected during the boot cycle and the user must make decisions to fix the discrepancies. (Some versions of UNIX such as Sequent's Dynix will invariably require licensing information after a restore.) Typically, some experimentation will be required to iron out some of these details and document the installation procedure for your particular platform. Be sure to test image captures and loads to two completely different machines to get an accurate representation of the load process.<p>
<B>Template File</b><p>The template file used by ShrinkWrap is the key to most ShrinkWrap operations. It must have the extension <B>.snd</B> which stands for <I>slices 'n disks</I>. The format is fairly straightforward; each line is a comment, a disk description, or a slice description. The following is an example of a template file:<p>
<pre>
#
# Slicing information for savesys/loadsys programs.

#
# This configuration is for a gold-installed 4100 with 2 2-gig
# drives using Gold 3.0 slicing.  This file is "4100Gold30.snd"
#
c0t6d0s1                ufs     /
c0t6d0s4                ufs     /var
c0t6d0sa                bfs     /stand
c1t5d0s1                ufs     /home
c1t5d0s3                ufs     /usr
c1t5d0s4                ufs     /tmp
c0t6d0s7                rawc
c0t6d0s0
c1t5d0s0</pre><p>
</b><p>Comment lines begin with a <B>#</B> character and are ignored. In this example, the first line after the comments is a disk slice description. It begins with a disk slice name, in this example <B>c0t6d0s1</B>, followed by the file system type and the mount point. Typically each slice description has these three components, with one exception. Note the last slice description for device <B>c0t6d0s7</B>. In this example that slice has no file system but should be captured anyway. The type is then designated as <B>rawc</B>, short for <I>raw compressed</I>, and the mount point is irrelevant.  ShrinkWrap will use the <B>cpio</B> command to capture slices with file systems and the <B>dd</B> command to capture the rest.<p>
The last two lines of the sample template are device names of disks. (In NCR UNIX disks are referenced as slice 0.) ShrinkWrap will capture the <B>vtoc</B>s from these disks and restore them on the target machine. Naturally, you would want to capture the <B>vtoc</B>s from any disks with captured file systems. Otherwise, the image may not restore correctly.<p>
There is only one rule for ordering the contents of the template file. File systems mounted in other file systems must have their parent file systems listed first. In this example, every file system is mounted in root, so root is listed first. If <B>/usr/local</B> were a separate file system it would need to be listed after <B>/usr</B>, etc.<p>
<B>ShrinkWrap Programs</b><p>ShrinkWrap consists of several programs to create and manipulate system images. A list of the programs and their uses are:<p>
<li><B>savesys</B> - Creates a new ShrinkWrap image on tape media<p>
<li><B>loadsys</B> - Loads a ShrinkWrap image from tape or a file system<p>
<li><B>storesys</B> - Copies a ShrinkWrap image from tape media to a disk file system<p>
<li><B>cut_tape</B> - Creates a new ShrinkWrap tape media from a disk file system image<p>
<li><B>removeb</B> - Utility used internally within ShrinkWrap to help capture and restore file systems<p>
The code is available at <B>www.samag.com</B>. As you can see, <B>savesys</B> can only capture ShrinkWrap images to tape media. <B>savesys</B> can load images from a file system or tape.  <B>storesys</B> and <B>cut_tape</B> are used to convert images between file systems and tapes. Because ShrinkWrap can read images from file systems, CD-ROM burning and network load operations are possible. To cut a CD-ROM image, use <B>savesys</B> to capture the image to tape, and then use <B>storesys</B> to copy the tape image to a machine capable of burning CD-ROMs. The CD-ROM content should include all the files created from <B>storesys</B>.<p>
The instructions for using <B>savesys</B> are:<p>
1.  Insert the ShrinkWrap Savesys diskette into the floppy drive.<p>
2.  Log in as root and enter the command <B>mount -F s5 /dev/dsk/f0 /mnt</B>.<p>
3. Enter the command <B>cd /tmp</B>.<B></b><p>4.  Enter the command <B>PATH=/mnt:$PATH</B>.<p>
5.  Enter the command <B>export PATH</B>.<p>
6.  To save a Phase I ShrinkWrap image, insert the target media into the tape drive and wait for the tape drive to stop flashing. Enter the command <B>savesys $SND /dev/rmt/$TAPE</B>, where <B>$SND</B> is your <B>.snd</B> file and <B>$TAPE</B> is the tape drive you wish to save the image to. Remove the target media upon completion.<p>
7.   Enter the command <B>umount /mnt</B> and remove the Savesys diskette from the floppy drive.<p>
As implied by the previous list, we maintain a set of Savesys disks which contain a selection of template files and the <B>savesys </B>and <B>removeb</B> programs. You could alternatively use NFS to network mount these files instead of distributing a floppy disk.<p>
<B>savesys</B> can be run on a system without shutting it down, but it should be idle. Be particularly careful to shut down databases using raw slices prior to capture.<p>
The <B>loadsys</B> program needs to be launched from a miniroot loaded in a location which will not interfere with the load procedure.  Many PC-based UNIX systems supply bootable floppy disks with a miniroot kernel which gets loaded into RAM. We modify these disks to automatically run the <B>loadsys</B> program so there is no input required from the installer; all they need to do is boot the disks and the process begins. On other systems we load the miniroot into the swap area of the hard disk so it will not be overwritten during the load process. You will also need to make sure that all the commands that ShrinkWrap uses are available on your miniroot.<p>
Additionally, if the ShrinkWrap image is being loaded from tape, the header section of the image must be loaded into the current working directory before <B>loadsys</B> is started. This is easily accomplished with the command <B>cpio -icvdumB -I $TAPE</B> where <B>$TAPE</B> is the non-rewinding tape device containing the ShrinkWrap media. The header section is very small so you won't need much file system space. File system images already have the header section unarchived so this step isn't necessary.<p>
The command-line syntax is as follows: <B>loadsys template-file [-n]</B>. The <B>-n</B> option is useful to avoid destructive partitioning on systems with diagnostic partitions, but usually it is not needed.  It expects to run out of an <B>/install</B> directory and will in turn place its log there. A file can exist in the <B>/install</B> directory called <B>tape</B> which contains a single line of text defining a tape device from which to install. The absence of that file indicates that ShrinkWrap should load a file system image from the current working directory.<p>
Once an image has been captured to tape, it may be necessary to convert it to a file system image for purposes of network loads, burning CD-ROMS, or archival purposes. This is the function of <B>storesys</B>, whose command-line syntax is <B>storesys [tape-device]</B>. It will read a ShrinkWrap image tape and copy it into the current working directory. File system images consist of multiple files and a unique directory is required. The <B>tape-device</B> parameter is optional but you will need to modify the default device based on your hardware standards.<p>
If <B>storesys</B> has been used for archival purposes, it may be necessary to create another tape media. <B>cut_tape</B> fills this role. Its command line syntax is identical to <B>storesys</B>, but its operation is reversed. <B>cut_tape</B> copies the file system image from the current working directory to the specified tape device.<p>
<B>How the Code Works</b><p>All of the ShrinkWrap programs start off by reading the image template file into a set of global variables with the function <B>readinfo()</B>. Disk information is stored in the array <B>disk</B> and slicing information is stored in an array of structures named <B>fs</B>. The variables <B>disk_count</B> and <B>fs_count</B> indicate how many array entries are used of each.<p>
The operation of the <B>storesys</B> and <B>cut_tape</B> programs are fairly straight forward after this. They simply copy image sections using the <B>dd</B> command. The header information is used to determine how many image sections to copy, but the actual contents of each section are disregarded. It may not be necessary to modify either of these programs when porting ShrinkWrap to other UNIX platforms. However, you may want to change the default tape devices.<p>
The operations of the <B>loadsys</B> program are defined in the operating system's documentation. There should be a section describing how to recover a root disk from a backup; this is the procedure which <B>loadsys</B> automates. This article and the accompanying code reflect NCR's procedure, but other operating systems will have analogous operations.<p>
The first step during the restore is to run a batch file called <B>makenodes</B>. Stored in the ShrinkWrap header and generated by the <B>savesys</B> program, <B>makenodes</B> creates the device nodes in <B>/dev/dsk</B> needed to access the system drives. Other flavors of UNIX such as Dynix have built-in commands to automate this process (i.e., <B>devbuild</B>).<p>
Now that the disks are accessible they are checked and formatted as needed. NCR uses the <B>dklayout</B> command to perform these operations. It may not be necessary to perform this operation if your vendor supplies only formatted disks. On NCR this operation also writes the boot loader to the hard disk. Notice that operations on disks are performed in loops based on the <B>disk</B> and <B>disk_count </B>variables. Similarly, file system operations will be carried out in loops based on the <B>fs</B> and <B>fs_count</B> variables.<p>
Once the disks are formatted, they need to be partitioned. Some more traditional flavors of UNIX don't require disk partitioning. Partitioning is usually required on UNIX systems which run on PC-based platforms. Each disk entered in the template file is partitioned using the <B>fdisk</B> command. Notice that the <B>-n</B> option leaves a small amount of room on the hard disk for a diagnostic partition; otherwise it is destructively partitioned to 100 percent UNIX.<p>
Next the <B>vtoc</B> tables need to be applied to each disk. I have seen several commands for this operation typically <B>edvtoc</B> or <B>mkvtoc</B>. These commands apply a <B>vtoc</B> file created by the <B>savesys</B> program. <B>savesys</B> uses a program such as <B>prtvtoc</B> to create the file which is stored in the header section of the ShrinkWrap image.<p>
At this point the disk restructuring is complete. Now ShrinkWrap needs to rebuild and populate the file systems and raw slices.  For each file system it runs a batch file called <B>$SLICE.fs</B> where <B>$SLICE</B> is the name of the slice where the file system lives.  This batch file was created by the <B>savesys</B> program using the <B>mkfs -m</B> command. Unfortunately, NCR UNIX is not very consistent with the output of this command and <B>savesys</B> needs to massage it before it builds the final <B>$SLICE.fs</B> files (using <B>removeb</B>). On most versions of UNIX, file systems can be created just by knowing the slice and the type. ShrinkWrap uses these <B>$SLICE.fs</B> files to ensure an exact reproduction, however. When porting ShrinkWrap to other environments this feature may not be important and it might be easier to just build file systems on the fly without capturing anything about the originals.<p>
Now that the final systems are created, their contents are restored. For each file system specified in the template file, a <B>cpio</B> is performed to restore the contents. For raw file systems, <B>dd</B> is used to restore the contents. This section shouldn't need any changes when porting to other platforms.<p>
Finally, NCR UNIX requires that the boot kernel be restored using another <B>dklayout</B> command. You will need to consult your system documentation when porting ShrinkWrap to see if there is an analogous command required for your version of UNIX.<p>
The remainder of the restore process is primarily cleanup operations.  The file systems are checked and certain key files are restored.  (These files are extracted for future versions of ShrinkWrap.)  The machine should be rebooted upon completion.<p>
One of the files restored is <B>/etc/rc2.d/S01Shrink2</B>. This can be supplied with the miniroot to perform additional cleanup operations during the boot cycle. For example, our version reinitializes the swap and dump areas. It then disables itself so it is never run again.<p>
<B>Limitations and Enhancements</b><p>ShrinkWrap has several limitations. First, the images are limited in size to the tape media being used. In other words, it does not have facilities to prompt for tape switching. (This is really a limitation on the part of the <B>dd</B> command used for raw file systems.)<p>
ShrinkWrap does not handle software-defined virtual volumes well.  It can save and restore them as <B>RAW</B> file systems, but the template needs to include all of the pieces that comprise the virtual volume.<p>
Aside from repairing the limitations described above, there are numerous enhancements which could be made. System audits could be used to interactively present capturable items to the user and automatically generate the template files. It is possible to support image <I>deltas</I>. In other words, images could be created which capture changes since the last capture or load. The code could be more intelligent about problems; for example, it might try alternative approaches to a task and diagnose errors with probable causes. Furthermore, a fancier display with progress bars would give the user better feedback. Indeed, all of these features are planned for our next release of ShrinkWrap.<p>
Another interesting idea would be to improve performance through multithreading. To prevent disk thrashing (and an overall decrease in performance), threads would need to be synchronized to work on different disks.<p>
<B>Conclusions</b><p>ShrinkWrap has proven to be invaluable in our department. It can cut down a server installation from a day to under an hour.  Our certified standards are propagated internationally without flaw. Indeed, it has been targeted for use in disaster recovery situations and has been used repeatedly in failure recovery situations. 
<p>


<P>


<H1>About the Author</H1><p>
Rick is System Engineer for Intel Corporation. He manages a central support group in a department which is responsible for NT and UNIX infrastructure design and integration with enterprise applications.



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
