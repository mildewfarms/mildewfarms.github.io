<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i11:  The Other Backup: dump</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1997/nov97.tar"><b class=codeListing>nov97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>The Other Backup: <tt>dump</tt></H1><p>
<P>
Mark L. Nassal<P>

</H1><p>I am continually amazed at how many UNIX users and admins are unaware of the <B>dump</B> command. Ask them what they use for backups, and they will often say <B>tar</B>. Using <B>tar</B> for system backups is like using <B>emacs</B> to publish a magazine; great tool, wrong job. <B>tar</B> works great for packaging software distributions or archiving a single directory tree. But using it to backup and restore entire systems, pushes it beyond reasonable limits.<p>
Versions of <B>dump</B> have been around since Berkeley v4 and AT&amp;T UNIX v6. The tool is stable, relatively easy to use, and available for virtually all flavors of UNIX and UNIX-like operating systems. Sun Solaris calls their version <B>ufsdump</B>, while BSD, SunOs, and Linux call it <B>dump</B>. All of the various versions are essentially the same with a few minor nuances. We will discuss the Solaris and Linux versions in this article.<p>
<B><tt>dump</tt> Basics<p>
dump</B> is a backup and restore utility comprised of two components, <B>dump</B> and <B>restore</B> (or <B>ufsdump</B> and <B>ufsrestore</B> on Sun Solaris). The commands can be issued from the prompt or from scripts. Through the use of command switches, <B>dump</B> can determine which files need to be backed up and mark them as backed up when completed. It can also backup multiple file systems to a single tape. The ability to span volumes is very important for large file systems or meta devices. If the data cannot be stored on a single tape the user is prompted to insert another. This process is repeated until all the data has been transferred.<p>
The capacity of a tape can be specified by the user supplying as command options, the maximum capacity of the tape in bytes, the size of the tape (in feet) along with the recording density, or the total block count. If none of the parameters are entered, <B>dump</B> records onto the tape until it reaches the physical end-of-tape (EOT).<p>
If the tape capacity is not supplied with the <B>dump</B> command, results can be unpredictable. The end-of-tape signal is not always the end of the tape, but the maximum that <B>dump</B> thinks will fit on the tape. <B>dump</B> will base the tape capacity on default settings, which may or may not be correct. It is always a good idea to specify the capacity with one of the methods above. This will prevent premature volume change requests.<p>
Backup schedules are regulated by <B>dump</B> levels. The levels are numeric values from zero through nine. By itself, each value is meaningless. But when several are combined they help to determine which files and directories are copied to tape. <B>dump</B> will back up all files or directories that have been created or changed since the last <B>dump</B> of a lower level.<p>
Specifying a <B>dump</B> level allows operators to perform incremental backups, transferring small amounts of data each day or week to tape, and copying the entire specified path once a month. (More on specifying <B>dump</B> levels later.)<p>
One of the nicest features of <B>dump</B> is the restore process. When a restore is initiated in interactive mode using the command:<p>
<pre>
restore if /dev/rmt/0</pre><p>
</b><p>the contents of the tape can be reviewed much like a disk. The operator can <B>cd</B> through directories and <B>ls</B> directory contents as if the tape were a hard drive. Files can be selectively tagged for restore, or entire directories can be so marked. The ability to see the tape contents and choose which files are to be restored is convenient.<p>
<B>dump</B> also provides the ability to perform remote backups. Data from several remote sources can be stored on a central tape system. By using the <B>f</B> switch, local devices can be replaced with remote devices or files, as in the commands:<p>
<pre>
dump 0vf host_name:/dev/rmt/0 /usr/local</pre><p>
</b><p>or<p>
<pre>
dump 0vf host_name:/var/tmp/my_backup</pre><p>
<p>Command Switches</b><p>The numerous command switches available with <B>dump</B> (Linux) and <B>ufsdump</B> (Solaris) provide more flexibility than standard UNIX backup utilities. Before doing backups, you need to understand the command switches. What follows are descriptions of the more commonly used command switches for <B>dump/restore</B> and for <B>ufsdump/ufsrestore</B>.<p>
<B><tt>dump</tt> Command Switches</b><p>Fortunately, the switches available to <B>dump</B> are straightforward. The <B>dump</B> command is issued as follows:<p>
<pre>
/sbin/dump [0123456789BbhfusTdWn[arguments xxx xxx]] filesystem/directory</pre><p>
<p>

<B>0 through 9</B> - Determines the <B>dump</B> level. Zero represents a full backup. The entire file system or directory is archived regardless of the last <B>dump</B> date. <B>dump</B> levels 1 through 9 are used for incremental backups. Only new, or files changed since the last backup are copied during an incremental. Normally, your first and monthly backups are full (level 0), while weekly and daily are incremental (levels 1-9). <B>dump</B> defaults to level 9 unless otherwise instructed.<p>
<B>B</B> - This option is followed by a numeric value specifying the number of <B>dump</B> records per volume, that is, the maximum number of Kbytes that can be stored on each tape. This flag provides an easy way to set the maximum storage capacity of a tape. When the indicated value has been met the operator is prompted to insert the next tape. The byte value is entered in the argument section of the command, as in the following for a 2-Gb tape (a standard DDS1 90 4-mm tape).<p>
<pre>
/sbin/dump 0ufB /dev/nst0 2048000 /usr/local</pre><p>
</b><p>This option overrides length and density calculations supplied by the <B>d</B> and <B>s</B> switches.<p>
<B>b</B> - Block size is represented in Kbytes and refers to the bytes per <B>dump</B> record. You normally won't need to change this from the default. The default block size is 512 Kb.<p>
<pre>
/sbin/dump 0ufb /dev/nst0 256 /usr/local</pre><p>
<p>
f</B> - This option points to the backup destination. The destination can be a tape device (<B>/dev/nst0</B>), a hard drive (<B>/dev/hda1</B>), standard output (-), a normal file (<B>/var/tmp/my_backup</B>), or a remote device (<B>hostname:device</B> or <B>username@hostsname:device</B>).<p>
<pre>
/sbin/dump 0uf /dev/nst0 /usr/local</pre><p>
<p>
d</B> - Tape density is set by assigning a numeric value to the <B>d </B>option. The density option is used to determine the maximum storage of a particular tape. It can be used in combination with length or by itself.<p>
<pre>
/sbin/dump 0ufd /dev/nst0 1600 /usr/local</pre><p>
<p>
n</B> - The <B>n</B> option is used to send a message using <B>wall</B> to all the operators in the group <B>operator</B>. When tapes need to be changed or the backup has failed, <B>dump</B> will send a message to the operators.<p>
<B>s</B> - The size of a tape is specified by this option. Used in combination with a particular density (<B>d</B>), <B>dump</B> will determine the total amount of tape needed, and prompt operators for a tape change. The default density for Linux <B>dump</B> is 2300 feet.<p>
<pre>
/sbin/dump 0ufs /dev/nst0 2300 /usr/local</pre><p>
<p>
u</B> - <B>dump</B> can write to a table that tracks when and which files have been successfully copied. The information is stored in <B>/etc/dumpdates</B>. The table is text based and can be read with <B>more</B> or <B>view</B>. The table format is as follows: fs name, <B>dump</B> level, date and time.<p>
<pre>
/dev/sda1 0 Sat Jul 5 12:02:59 1997
/dev/sda3 0 Sat Jul 5 12:04:51 1997
/dev/sda2 0 Sat Jul 5 12:08:20 1997
/dev/sdb1 0 Sat Jul 5 12:30:42 1997</pre><p>
<p>
W</B> - To receive an on-screen report listing current <B>dump</B> dates for archived file systems use the <B>W</B> option with <B>dump</B>. <B>dump</B> will print the list and exit immediately.<p>
<pre>
Last dump(s) done (Dump '&gt;' file systems):
&gt; /dev/sda1 ( /usr) Last dump: Level 0, Date Sat Jul 5 12:02
&gt; /dev/sda2 (/export) Last dump: Level 0, Date Sat Jul 5 12:08
&gt; /dev/sda3 ( /home) Last dump: Level 0, Date Sat Jul 5 12:04
&gt; /dev/sdb1 ( /opt) Last dump: Level 0, Date Sat Jul 5
12:30</pre><p>
</b><p>The information used to create this report is extracted from <B>/etc/dumpdates</B>.<p>
<B>w</B> - To view a report of file systems that need to be dumped, run <B>dump</B> with the <B>w</B> option.<p>
<pre>
Dump these file systems:
/dev/sda1 ( /usr) Last dump: Level 0, Date Sat Jul 5 12:02
/dev/sda2 (/export) Last dump: Level 0, Date Sat Jul 5 12:08
/dev/sda3 ( /home) Last dump: Level 0, Date Sat Jul 5 12:04
/dev/sdb1 ( /opt) Last dump: Level 0, Date Sat Jul 5
12:30</pre><p>
<p>Restore Command Switches</b><p>The restore command is issued as follows:<p>
<pre>
/sbin/restore [rCRxtibDfhmNsTvy] device/file</pre><p>
</b><p>Here are descriptions of the interactive commands.<p>
<B>f</B> - This option points to a file or device to restore. This switch has the same characteristics as in <B>dump</B>.<p>
<B>i</B> - Starts restore in the interactive mode. Interactive mode allows the operator to <B>select</B>, <B>delete</B>, <B>ls</B>, and <B>cd</B> through archived file systems. The command line:<p>
<pre>
[root@walleye /]# /sbin/restore if /dev/nst0</pre><p>
</b><p>returns the prompt<p>
<pre>
restore &gt;</pre><p>
</b><p>From the restore prompt you can display a list of interactive commands by typing <B>help</B> or <B>?</B>.<p>
<pre>
restore &gt; ?

Available commands are:
ls [arg] - list directory
cd arg - change directory
pwd - print current directory
add [arg] - add `arg' to list of files to be extracted
delete [arg] - delete `arg' from list of files to be extracted
extract - extract requested files
setmodes - set modes of requested directories
quit - immediately exit program
what - list dump header information
verbose - toggle verbose flag (useful with ``ls'')
help or `?' - print this list
If no `arg' is supplied, the current directory is used
restore &gt;</pre><p>
<p>
<B>cd</B> - Change to directory<p>
<B>ls</B> - List files<p>
<B>pwd</B> - List present working directory.<p>
<B>quit</B> - Exit restore<p>
<B>verbose</B> - Provides extended information to listings<p>
<B>help or ?</B> - Lists the available commands<p>
<B>add</B> - Select files or directories to restore. Use <B>ls</B> to list files first.<p>
<pre>
restore &gt; ls
./local:
Acrobat3/ bin/ etc/ include/ lib/ sbin/ src/
andrew/ doc/ games/ info/ man/ share/
restore &gt; add bin
restore &gt;&lt;/code_font&gt;</pre><p>
<p>
delete</B> - Remove selected files or directories from the restore list
<pre>
restore &gt; delete bin
restore &gt;</pre><p>
<p>
extract - Once the restore list is build, the operator uses the command <B>extract</B> to perform the restore. The operator will be asked which volume is to be mounted. For a restore of minimal files, start with the last tape; for full restore, start with the first tape.<p>
<B><tt>ufsdump</tt> Command Switches</b><p>Sun's <B>ufsdump</B> is a bit more substantial than the general <B>dump</B> command. Since Sun has geared its OS more and more toward enterprise server applications, you would expect the backup apps to follow.<p>
<pre>ump [0123456789abcdDflnosStuvwW[arguments xxx xxx]]
filesystem/directory</pre><p>
</b><p>Here are the more common switches.<p>
<B>0 through 9</B> - Determines the <B>dump</B> level. Zero represents a full backup. The entire file system or directory is copied regardless of the last <B>dump</B> date. <B>dump</B> levels one through nine are used for incremental backups. Only new, or files changed since the last backup are copied during an incremental. Typically, first and monthly backups are full, while weekly and daily are incremental. <B>ufsdump</B> defaults to level 9 unless otherwise instructed.<p>
<pre>
/usr/sbin/ufsdump 0f /dev/rmt/0 /usr/local</pre><p>
<p>
b - Blocking factor default is 20 blocks per write for low density tapes of 6250 BPI or less. For tapes with a density of 6250 BPI or greater, the blocking factor defaults to 64. Cartridge tapes will default to 126 with 512-Kb blocks.<p>
<pre>
/usr/sbin/ufsdump 0fb /dev/rmt/0 126 /usr/local</pre><p>
<p>
c - To automatically set blocking factor to 126 and density to 1000BPI, use the <B>c</B> (cartridge) option.<p>
<pre>
/usr/sbin/ufsdump 0cufb /dev/rmt/0 126
/usr/local
usr/sbin/ufsd</pre><p>
<p>
d - Tape density is set by assigning a numeric value to the <B>d</B> option. The density option is used to determine the maximum storage of a particular tape. It can be used in combination with length or by itself.<p>
<pre>
/usr/sbin/ufsdump 0cufd /dev/rmt/0 1000
/usr/local</pre><p>
<p>
D - Create backup on floppy disk.
f - This option points to the backup destination. The destination can be a tape device (<B>/dev/rmt/0</B>), a hard drive (<B>/dev/dsk/c0t2d0s0</B>), standard output (-), a normal file (<B>/var/tmp/my_backup</B>), or a remote device (<B>hostname:device</B> or <B>username@hostsname:device</B>).

<pre>
/usr/sbin/ufsdump 0cuf /dev/rmt/0
/dev/dsk/c0t3d0s0</pre><p>
<p>
l - If you are using an autoloader, the <B>l</B> option can be added to the command line. It causes <B>ufsdump</B> to wait two minutes after a tape is filled to notify the operator. If another tape autoloads within the two minutes, no message is sent.<p>
n - The <B>n</B> option is used to send a message using <B>wall</B> to all the operators in the group <B>operator</B>. When tapes need to be changed or the backup has failed, <B>ufsdump</B> will send a message to the operators.<p>
o - After the backup completes or the end-of-media is reached, the drive can be taken offline. This usually includes rewinding the tape and sending the eject signal.<p>
s - The length of a tape is determined by this option. Used in combination with a particular density, <B>ufsdump</B> will determine the total amount of tape needed and prompt operators for tape change.<p>
<pre>
/usr/sbin/ufsdump 0cufs /dev/rmt/0 2300
/dev/dsk/c0t3d0s0</pre><p>
<p>
u - <B>ufsdump</B> can write to a table that tracks when and which files have been successfully copied. The information is stored in <B>/etc/dumpdates</B>. The table is text based and can be read with <B>more</B> or <B>view</B>. The format is as follows: fs name, <B>dump</B> level, date, and time.<p>
<pre>
/dev/rdsk/c0t0d0s6 0 Sat Jul 5 12:02:59 1997
/dev/rdsk/c0t0d0s6 0 Sat Jul 5 12:04:51 1997
/dev/rdsk/c0t0d0s6 0 Sat Jul 5 12:08:20 1997
/dev/rdsk/c0t0d0s6 0 Sat Jul 5 12:30:42 1997</pre><p>
<p>
v - Verify backup. If the verification fails the operator will be prompted for a new tape.<p>
W - To receive an on-screen report listing current <B>dump</B> dates for archived filesystems, use the <B>W</B> option with <B>ufsdump</B>. <B>ufsdump</B> will print the list and exit immediately.<p>
<pre>
Last dump(s) done (Dump '&gt;' file systems):
&gt; /dev/rdsk/c0t0d0s6 ( /usr) Last dump: Level 0, Date Sat Jul 5
12:02
&gt; /dev/rdsk/c0t11d0s1 (/export) Last dump: Level 0, Date Sat Jul 5
12:08
&gt; /dev/rdsk/c0t0d0s7 ( /home) Last dump: Level 0, Date Sat Jul 5
12:04
&gt; /dev/rdsk/c0t2d0s7 ( /opt) Last dump: Level 0, Date Sat Jul 5
12:30</pre><p>
<p>
The information used to create this report is extracted from <B>/etc/dumpdates</B>.<p>

w< - To view a report of file systems that need to be dumped run <B>ufsdump</B> with the <B>w</B> option.<p>
<pre>
Dump these file systems:
/dev/rdsk/c0t0d0s6 ( /usr) Last dump: Level 0, Date Sat Jul 5
12:02
/dev/rdsk/c0t11d0s1 (/export) Last dump: Level 0, Date Sat Jul 5
12:08
/dev/rdsk/c0t0d0s7 ( /home) Last dump: Level 0, Date Sat Jul 5
12:04
/dev/rdsk/c0t2d0s7 ( /opt) Last dump: Level 0, Date Sat Jul 5
12:30</pre><p>
<p>ufsrestore Command Switches
The <B><tt>ufsrestore</tt></B> command is issued as follows:
<pre>
/sbin/ufsrestore [irRtxabcdfhmsvy] device/file</pre><p>
<p>
Here are the descriptions of the interactive switches in <B>ufsrestore</B>.<p>
f - Points to the file or device to restore. This switch has the same characteristics as in <B>ufsdump</B>.<p>
i - Starts <B>ufsrestore</B> in the interactive mode. Interactive mode allows the operator to <B>select</B>, <B>delete</B>, <B>ls</B>, and <B>cd</B> through archive file systems. The command line:<p>
<pre>
[root@walleye /]# /usr/sbin/ufsrestore if /dev/rmt/0</pre><p>
<p>
returns the prompt<p>
<pre>
ufsrestore &gt;/</pre><p>
<p>
From this prompt you can display a list of interactive commands by typing <B>help</B> or <B>?</B>.<p>
<pre>
ufsrestore &gt; ?
Available commands are:
ls [arg] - list directory
cd arg - change directory
pwd - print current directory
add [arg] - add `arg' to list of files to be extracted
delete [arg] - delete `arg' from list of files to be extracted
extract - extract requested files
setmodes - set modes of requested directories
quit - immediately exit program
what - list dump header information
verbose - toggle verbose flag (useful with ``ls'')
help or `?' - print this list
If no `arg' is supplied, the current directory is used
ufsrestore &gt;</pre><p>
<p>
These commands work the same in <B>ufsrestore</B> as they do in <B>restore</B>.
<B>Backup Strategies</B>
Numerous backup strategies have been promoted over the years, but the good ones are based on the same concepts.

<li>Rotation - Tapes must be rotated to provide media integrity and data history. The longevity of a tape depends on how many times it is run through the backup sequence.<p>
<li>Centralization - Data should be copied to a central server and tape system whenever possible. Backups are easier to administer and verify if they are collected in one location.<p>
<li>Paperwork - Accurate records are a must. If you can't find the correct tape or sequence of tapes then your backup is essentially useless. Tapes must be labeled with date, <B>dump</B> level, file systems, and compression. The tapes should also equate to a database that is used to track the <B>dump</B> sequence. Nothing is more frustrating than trying to restore a down system and finding that backup records are incorrect. The amount of time that can be wasted is incredible, not to mention the loss of data.<p>
<li>Backup Often - Make sure your backup intervals meet the enterprise needs. If the file systems are written to throughout the day, they must be backed up every day. A gap of time any greater may overlook irreplaceable data. But on the other hand if some file systems are used rarely, increase the interval between backups.<p>

Maintain a balance between possible data loss and the time required to backup the systems. Applications such as <B>dump</B> consume system resources as well as human resources. Use good judgment and communicate with your users.<p>
<p>
<li>Sizing the Backup - If you are running the backup from <B>cron</B>, it is very important that you make sure the file systems will fit on the selected tapes. Messages and operator prompts are sent to the console. If the backup is run from <B>cron</B>, there may will not be a console to write to.<p>
<p>
It is always better to err on the side of conservatism. The best way to determine how much tape is needed, is to base it on the file system. Use the maximum capacity of the file system not the current data stored on it. Eventually the directory will fill with data and exceed the tape. These situations often go unnoticed until a restore is incomplete. By that time it is too late.<p>
<p>
<li>Off site for Safety - Monthly, level 0 dumps should be stored off site. If you are using 4-mm tapes, a bank safety deposit box may work. If your tape requirements are larger, there are storage companies that specialize in this field.<p>
<p>
The main reason for offsite storage is disaster recovery. In case of fire or theft, it is important to have a set of backups that can get your company up and running again.<p>
<p>
<li>Off Hours - Because of demands on system resources and file interruption, it makes sense to do backups during off hours whenever possible. If a user makes changes to a file while the <B>dump</B> is active, the results may be undependable.<p>
<p>
Even when backups are performed during off hours check that other scheduled programs are not modifying files during the backup.<p>
<p>
<li>Verification - An incomplete or inaccurate backup is of no value. Tapes should be verified to maintain integrity.<p>
<p>
Sun's <B>ufsdump</B> contains the <B>-v</B> option, which forces a verification of the backup after completion. Since it is part of the execution command, human interaction isn't required unless there is a problem. So <B>ufsdump</B> can be run from <B>cron</B>. Unfortunately Linux <B>dump</B> does not have this switch.<p>
To verify a backup with Linux, restore must be run with the <B>-C</B> option. This flag will cause restore to compare the contents of the original file system to the data on the tape.<p>
Another option is to run <B>restore</B> or <B>ufsrestore</B> in interactive mode. You can then <B>cd</B> and <B>ls</B> through the directories comparing them to the original file system. This can be very time consuming for large dumps, but it is better than ending up with a bad tape.<p>
By adhering to these concepts you can create a well-balanced <B>dump</B> sequence that meets the needs of your network. It is important to make sure that data integrity is maintained, yet not so complicated that operators have trouble performing the routine. Most environments do well with a moderate <B>dump</B> schedule.<p>
This schema consists of a monthly <B>dump</B> 0, a weekly <B>dump</B> 5, and a daily <B>dump</B> 9. This means that once a month everything on the system is copied. Everything that has been changed or created since the weekly is stored each day, and everything after the monthly is archived each week. Using this pattern assures that there is overlap between backups. The monthly should be stored at an offsite facility.<p>
Remember that <B>dump</B> levels are existential symbols. The data stored by a <B>dump</B> level 0 is the same as a <B>dump</B> level 9. The difference occurs when a relationship is created between levels. Each consecutive <B>dump</B> level stores all information created or changed since the previous <B>dump</B> level of a lower number. For example, if you perform a level 1 on Monday, a 3 on Tuesday, a 4 on Wednesday, and a 2 on Thursday, the Thursday backup will contain data from Tuesday through Thursday.<p>
Every location has specific needs and limitations. It will take some fine tuning and creativity to design the perfect system for your network but, it is worth it.<p>
<B>Local Backup Tips</b><p>
Now that you have a better understanding of the <B>dump/ufsdump</B> commands and backup concepts, I will provide some examples of their use, along with explanations of some of the interesting options.<p>
For purposes of instruction, the tape in these examples will be a 4 mm DDS1 (90 M). The maximum uncompressed storage capacity is 2 Gb. The file system to be copied is <B>/usr</B>, which has a maximum capacity of 500 Mb. The backup device is the first tape drive on the system (<B>st0</B> for Linux, <B>rmt/0</B> for Solaris). The <B>/etc/dumpdates</B> file will be updated, and the operator notified of any problems.<p>
<B>Solaris</b><p>
<pre>
/usr/sbin/ufsdump 0cnuvfsd /dev/rmt/0 \
295 61000
/usr</pre><p>
</b><p>The <B>v</B> option has been added so that <B>ufsdump</B> will verify the tape after creation. To calculate the capacity of the tape the <B>s</B> and <B>d</B> (feet and BPI) options are added.<p>
To copy an entire file system, I would have used the drive id instead of directory name, as in:<p>
<pre>
/usr/sbin/ufsdump 0cnuvfsd /dev/rmt/0 295 61000
/dev/dsk/c0t0d0s6</pre><p>
<p><B>Linux</b><p>
<pre>
/sbin/dump/ 0nufB /dev/st0 2048000 /usr</pre><p>
</b><p>Without the <B>i</B>, <B>d</B>, or <B>s</B> option, Linux <B>dump</B> will request tape changes too early. By setting the <B>dump</B> records (<B>B</B>), <B>dump</B> will not ask for a tape change until 2 Gb of data has been copied or end-of-media is signaled. I have found the <B>B</B> option to be more dependable than using <B>d</B> and <B>s</B>. (<B>dump</B> never seems to calculate the size properly.) It should also be noted that the Linux version of dump is a in-work project. This means there are still a few problems. Single dump files spanning multiple tapes may not work properly. It has been reported that files are sometimes left out. To avoid problems, make sure to do a test run before committing to a schema.<p>
Again, if the source was an entire file system, you could replace <B>/usr</B> with the drive id, as in:<p>
<pre>
/sbin/dump/ 0nufB /dev/st0 2048000 /dev/sda2</pre><p>
</b><p>Multiple dumps can be stored on a single tape by changing the destination device to no-rewind (<B>/dev/rmt/On</B>). If the standard device is used (<B>st0</B>, <B>rst0</B>, <B>rmt/0</B>), the tape will rewind after each <B>dump</B> and overwrite the previous. Here are some examples.<p>
<B>Solaris</b><p>
<pre>
/usr/sbin/ufsdump 0cnuvfsd /dev/rmt/0n 295 61000 /usr
/usr/sbin/ufsdump 0cnuvfsd /dev/rmt/0n 295 61000 /home</pre><p>
<p>
<B>Linux</b><p>
<pre>
/sbin/dump/ 0nufB /dev/nst0 2048000 /usr
/sbin/dump/ 0nufB /dev/nst0 2048000 /home</pre><p>
</b><p>If the backup is too large to fit on one tape, <B>dump</B> will prompt the operator for a new tape. Remember, if the <B>dump</B> is being done from <B>cron</B>, there will not be anyone to change tapes. In this case you must make sure the backup will fit on one tape or use a stacking system.<p>
If you added the <B>n</B> option, <B>dump</B> will notify all the users in the operator group. <B>wall</B> will be used so you may want to leave a <B>telnet</B> session running on the backup server. This way if there were any problems with the backup you will see it in the morning.<p>
Another way to check the status of auto backups is to check the <B>/etc/dumpdates</B> file each morning. All of the file systems that were completed will be listed.<p>
<B>Remote Backups<p>
dump</B> and <B>ufsdump</B> can be used to centralized backups. Data from multiple servers can be sent to a single backup server using remote connections.<p>
You must first make sure that root can <B>rlogin</B> to the remote servers. For security reasons most systems are set for root login at console only. To enable root on Solaris edit the file <B>/etc/deafult/login</B>. You will see a line similar to <B>CONSOLE=/dev/console</B>. Comment this line out to allow root to login remotely.<p>
For Linux, edit the file <B>/etc/securetty</B>, and add several <B>ttyp</B>'s to the tty list. For example,<p>
<pre>
tty1
tty2
tty3
ttyp1
ttyp2
ttyp3</pre><p>
</b><p>Root will be able to login on each <B>ttyp</B> that you add.<p>
Next you will need a <B>.rhosts</B> file in the root home of the backup server. <B>dump</B> will use <B>rsh</B> for remote backups and requires a <B>.rhosts</B> for this purpose. Enter each of the servers from which backup scripts will be logging in.<p>
<pre>
walleye
speedy
jasmine</pre><p>
</b><p>After you have created the file, change the <B>mod</B> to read only by owner.<p>
<pre>
chmod 400 .rhosts</pre><p>
</b><p>This will prevent others from changing the information, plus many UNIX OS's require the <B>mod</B> for <B>rsh</B> and <B>rlogin</B> to work.<p>
The command for remote backup is essentially the same as local. The difference is that the target device is prefaced by the server name.<p>
<B>Solaris</b><p>
<pre>
/usr/sbin/ufsdump 0cnuvfsd thore:/dev/rmt/0n 295 61000
/usr</pre><p>
<p>
<B>Linux</b><p>
<pre>
/sbin/dump/ 0nufB thore:/dev/nst0 2048000 /usr</pre><p>
<p>
The commands above will <B>dump</B> the files from <B>/usr</B> to the tape device on <B>thore</B> (backup server). We could easily replace the tape device with a drive or file, as on local backups.<p>
<B>Scripts</b><p>Even if you do not plan to perform backups from <B>cron</B>, it is a good idea to create scripts for your backups. They save time and help to maintain consistency. Since <B>dump</B> and <B>ufsdump</B> interact with the console and logs successful backups, the scripts do not have to be very deep.<p>
If the operation is done through <B>cron</B>, you will just need to create a sequential list of dumps. But if you plan to work from a console (which I suggest), the script in  Listing 1 can be modified for your site. Simply modify the devices, tape length, and paths for each <B>dump</B> level. I have repeated the <B>dump</B> list for each level to allow more flexibility. This way you can use different devices and tapes for full backups and daily backups. After you are done editing the script change the mode to 755, so it can be executed.<p>
I have also set the script to log the <B>/etc/dumpdates</B> info to a continuous log file (<B>/var/log/backup.log</B>). <B>dump</B> and <B>ufsdump</B> only keep the most recent dumps in <B>/etc/dumpdates</B>. To provide a backup history I have the file appended to <B>/var/log/backup.log</B> at the end of each backup.<p>
The script was written for Linux <B>dump</B>, but it can easily be converted to work on Solaris. Change <B>dump</B> to <B>ufsdump</B>, edit the devices, and paths. You may also want to switch <B>B</B> for <B>d</B> and <B>s</B>, and add the <B>v</B> (verify) option.<p>
<B>Restoring Files</b><p>Restoring files with <B>dump</B> and <B>ufsdump</B> is pretty easy. Start by switching to the directory or file system you plan to restore, then run <B>restore/ufsrestore</B> in interactive mode.<p>
<pre>
/sbin/restore if /dev/nst0
/usr/sbin/ufsrestore if /dev/rmt/0n</pre><p>
<p>
Select the files or directories using the <B>add</B> command, and extract to copy the files. If there are multiple dumps on the tape, you will need to move to the desired <B>dump</B>. To move to a new position on the tape, use the <B>mt</B> command:<p>
<pre>
mt -f /dev/nst0 fsf 2</pre><p>
<p>
Replace the numeral 2 with the <B>dump</B> position you want to restore. The first <B>dump</B> is 0, second is 1 and so on. Make sure you use the no-rewind device for <B>mt</B> and restore, or the tape will reposition at the beginning. Here is a sample restore of my home directory using the script in  Listing 1.<p>
Start by switching to the restore directory(<B>/home/markn</B>). Next, use the <B>mt</B> command to position the tape at the second <B>dump</B>.<p>
<pre>
[root@jasmine temp]# mt -f /dev/nst0 fsf 1</pre><p>
<p>
Now, restore needs to be run in interactive mode.<p>
<pre>
[root@jasmine temp]# /sbin/restore if /dev/nst0
restore &gt;</pre><p>
<p>
The <B>ls</B> command is used to view the directories.<p>
<pre>
restore &gt; ls
.:
beth/ gopher/ lost+found/ samba/
ftp/ httpd/ markn/
restore &gt;</pre><p>
<p>
Now tag the directory <B>markn</B> with the command <B>add</B>.
<pre>
restore &gt; add markn</pre><p>
<p>
The <B>extract</B> command is used to restore the files.<p>
<pre>
restore &gt; extract/</pre><p>
<p>
Restore then prompts for the last tape in the backup set. If there is only one, enter 1.<p>
<pre>
You have not read any tapes yet.
Unless you know which volume your file(s) are on you should start with the last
volume and work towards the first.
Specify next volume #: 1</pre><p>
<p>
The files will then be restored to the current directory. When the restore is complete, <B>dump</B> will ask if you want to set <B>owner/mode </B>for '.'; answer no. That's it. The restore is now completed.<p>
The process is the same for <B>dump</B> and <B>ufsdump</B>.<p>
<B>Where to Get It</b><p>
If your OS did not ship with <B>dump</B> (which is very unusual), checkout <B>ftp://ftp/redhat.com</B> and <B>ftp://sunsite.unc.edu</B>. Most major distributions of UNIX and UNIX-like operating systems come with one form or another of <B>dump</B>. For more specific information on the flavor installed on your system, refer to the <B>man</B> pages. 
<p>


<P>


<H1>About the Author</H1><p>
Mark Nassal is a senior UNIX administrator at Harte Hanks Data Technologies in Billerica, MA. They operate a predominantly UNIX network with NT 3.5 and 4.0 as the standard desktop OS. He has been in the Computer/Telecommunications industry for nine years, and much of his work has centered around UNIX/Microsoft integration.


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
