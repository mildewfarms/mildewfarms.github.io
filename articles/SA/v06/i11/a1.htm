<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v06, i11:  Backups for Large UNIX Installations</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a1_f6.htm">Figure 6</a></span></td>
		<td><span class=navbarLink><a href="a1_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1997/nov97.tar"><b class=codeListing>nov97.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Backups for Large UNIX Installations</H1><p>
<P>
Victor Hazlewood and Chris Daharsh<P>

</H1><p><B>Introduction</b><p>In today's rapidly changing environments of large enterprise intranets, World Wide Web, news, email, DNS, file and NFS servers, computer system backups could possibly be the single most important, yet most often neglected, job of system administrators. For the system administrator working at a large UNIX installation, the task of providing a comprehensive backup plan can be quite daunting. With services provided by hundreds of desktop systems, tens of mid-range servers, and a handful of large data and computational servers, the development of a comprehensive, robust, and reliable backup plan in a large heterogenous UNIX environment is quite a challenge.<p>
The challenges involved in developing a large computing center's backup plan involves (but is not limited to):<p>
<p>
<li>a large heterogeneous UNIX environment<p>
<li>large amounts of data (10-100 GBs per day and more)<p>
<li>large number of backup files per month<p>
<li>file system sizes up to 200 GBs<p>
<li> network and system backup scheduling issues<p>
<li>backup monitoring<p>
<li>offsite backup repository<p>
<li>cost<p>
<p>
In this article, the design and implementation of backups for the UNIX Systems at the San Diego Supercomputer Center (SDSC) will be presented.  Figure 1 shows an overview of the resources at SDSC. The backup system implemented at SDSC is called <B>rbackup</B>. <B>rbackup</B> employs the use of standard UNIX utilities to schedule, monitor, and create file system backups for subsequent transfer to SDSC's archival system, which is based on IBM's High Performance Storage System (HPSS). For more information on HPSS see <B>http://www.sdsc.edu/hpss</B>.<p>
<B>Overview of the UNIX Environment</b><p>SDSC's computing environment includes more than 200 production UNIX systems. Approximately 190 of these systems are desktop systems running SunOS, Sun Solaris, Digital UNIX, or SGI Irix. These systems are managed centrally using a reference system and <B>cfengine</B>. A reference system allows a single copy of each UNIX operating system to be maintained and installed on new systems. <B>cfengine</B> is a language-based tool specifically designed for configuring and maintaining BSD and System V-like operating systems attached to a TCP/IP network. The combination of these two administration tools allows a small group of administrators to maintain a large installation of desktop systems.<p>
Additionally, a large Auspex file server delivers NFS service of home directories, third-party and application software, and scratch space to these desktops. An added benefit of this model (reference system, <B>cfengine</B> and centralized file server) is the elimination of the need to backup local disks on the desktop systems. The reference system and <B>cfengine</B> can restore a damaged desktop system by reinstalling it as new. This significantly reduces the number of systems requiring backup to a more manageable number.<p>
Ten of the 200 UNIX systems provide key services or are independent systems requiring backup of specific local disks. The Cray systems are examples of independent systems requiring local disk backups. These systems provide the following services: CRAY parallel compute server, CRAY vector compute server, Digital compute server, Sun Enterprise compute server, Auspex File server, reference system server, administration (DB) server, news server, mail server, and DNS server.<p>
<B>Backup Design</b><p>Due to the dynamic nature of the computing environment at SDSC, the backup strategy was designed to be flexible enough to handle a diverse set of hetereogeneous systems as they arrive. As systems arrive, their backup requirements would be determined by number of file systems delivered and the size of those file systems. The mission of the new system, its networking capabilities, and organization of file systems and their sizes would strongly influence the new system's placement in the networking topology. SDSC already provides users with an archival system for long-term storage of dataset and it made sense to leverage those resources for use as the backup repository. Other sites would have to develop a similar capability from existing or new systems.<p>
<B>Network Infrastructure</b><p>System backups at a large UNIX installation like SDSC is often one of the single largest consumers for network bandwidth. With large file and space requirements, the design of the network between the servers (file, data, and compute) and the backup repository plays a critical part in the performance and reliability of the implementation.<p>
During the evolution of SDSC, the local networking infrastructure has evolved to include 10 and 100 Mbit/s Ethernet segments, FDDI rings, FDDI-based Gigaring (switch-based FDDI), private data network segments, and High-Performance Parallel Interface (HIPPI) networks. As it relates to the High Performance Storage System (HPSS), each of the 10 data and compute servers employs networking technologies that best suit the data transfer requirements expected from the individual servers and the capabilities of the system. See  Figure 2 for a graphical overview of the server networking topology. The Cray compute servers use HIPPI (with FDDI as fail-over) networks for the expected large-size datasets. The other compute servers and the large Auspex file server use FDDI networks for the large number of files with their small to mid-size requirements. The remaining servers have low volume and low space requirements and use 10- or 100-based Ethernet networks, which are routed to the FDDI data network for delivery to HPSS. See  Table 1 for amounts of data transferred from the server systems to HPSS via the <B>rbackup</B> system. (The Auspex could benefit from HIPPI capability to HPSS, but it is not available).<p>
<B>Local requirement (HPSS)</b><p>SDSC has made a large investment in an archival system for the storage of user data for more than five years. In June 1997, SDSC installed the HPSS as its production archival system. HPSS has delivered high degrees of scalability, flexibility, and data transfer capability. In testing, HPSS was able to accept and manage over 4 TB of data in 72 hours from several systems employing Ethernet (routed), FDDI, and HIPPI networking technologies. In production today, HPSS averages over 350 Gb of data transferred with peaks of greater than 1 TB per day.<p>
SDSC's implementation of HPSS makes extensive use of class of service, a feature designed to categorize devices and files based on differing characteristics. These characteristics include device speed and file size. For example, the automatic class of service feature directs large files to high-speed devices and small files to slower devices. At SDSC, the class of service is chosen automatically, but can be overridden by the user. <B>rbackup</B> sets the class of service (<B>setcos 20</B>) for file transfers to HPSS.<p>
HPSS uses client/server technologies to transfer datasets from client systems to the HPSS server. The interface most commonly used by users and the method employed by the <B>rbackup</B> system is the <B>pftp</B>, or parallel <B>ftp</B>, program. Users and the <B>rbackup</B> scripts use <B>pftp</B> in the very same way that <B>ftp</B> is used to transfer files between UNIX systems.<p>
Any backup plan developed for SDSC must be implemented around HPSS. Other options exist, but would require significant investment in additional hardware and software to implement. No commercially available backup software currently exists that would automate the backup process to HPSS from the heterogeneous systems at SDSC. Therefore, SDSC developed the tools to implement a backup system around HPSS. The tools include:<p>
<p>
<li>a Perl script run by <B>cron</B> installed on each system called <B>rbackup.all</B><p>
<li>a mail filter to process log messages delivered by mail<p>
<li>HTML and cgi-bin files used to monitor the backups<p>
<B>Portability</b><p>It was highly desirable to develop the backup implementation using standard UNIX utilities for portability. With the dynamic nature of SDSC, new systems arrive and are expected to be placed in production as soon as possible. Using the standard UNIX utilities, <B>dump</B> and <B>restore</B> (and their vendor-specific relatives), within a Perl script run from <B>cron</B>, the <B>rbackup</B> system can be easily ported to any UNIX system. Restores from backups implemented with the <B>rbackup</B> system can be implemented in a single line command, such as, <B>pftp get backupfile | restore -rf</B>, or in automated scripts run by the operators.<p>
<B>Scalability/Scheduling</b><p>Efficient use of the individual computer systems, network resources available to those systems, and HPSS resources can be obtained with <B>rbackup</B> through careful scheduling. Scheduling with <B>rbackup</B> is made up of two parts. These include the time of backup initiation for each system and the number of concurrent processes on each system, each of which can be tuned to deliver the shortest overall backup time for each system.<p>
An overall backup schedule was developed and is monitored regularly to reduce, as much as possible, the contention for network and HPSS resources between systems.  Table 1 shows the <B>rbackup</B> start times for each system and the average length of backup time for the period July 20-26. These times were summarized from the detailed information provided by the <B>rbackup</B> Web pages (described later).<p>
To demonstrate the volume of data transferred from each server, statistics were compiled for backups transferred to HPSS for the period July 20-26. The statistics are presented in  Table 1 and give a good indication of the volume of data delivered by <B>rbackup</B> to HPSS. This information can provide clues to network infrastructure weaknesses. One example of using the statistics provided by the <B>rbackup</B> system points to the large amount of data orginating from the Auspex NFS file server. The volume of data from this server is greater than the backup volume from the Cray vector compute server and could benefit from employing a HIPPI network from the Auspex to the HPSS system. Unfortunately, at this time Auspex does not have a HIPPI adapter available for their large file server line. Another example shown by  Table 1 was that the Cray Parallel Compute Server conflicted often with four of the 10 backups that start and end between 0:00 and 5:00. We found that the Cray Parallel Compute Server was backing up nearly all of its file systems twice. The installation of the <B>rbackup</B> system was not completed properly and led to the unnecessary backup of all file systems (scratch areas are normally not backed up). Additionally, the Cray Parallel Compute Server was used as an HPSS testbed, and all critical file systems were sent daily to HPSS from another script (not <B>rbackup.all</B>) to place a load on HPSS before becoming a production system. Once these two problems were addressed, the conflicts were significantly reduced.<p>
For the individual systems, <B>rbackup</B> has a unique feature that allows the administrator to select the number of concurrent <B>dump</B> processes to run (see the variable <B>max_children</B> in the <B>rbackup.all</B> script). By adjusting this value, the administrator can select the number of simultaneous <B>dump</B> processes that can be efficiently handled by the individual system. By adjusting this value and using network performance tools, like <B>ax_perfmon</B> and <B>ax_perfhist</B>, which are available on Auspex file servers, one can adjust <B>max_children</B> to maximize the data throughput from the target system to HPSS. See  Figure 3 for example charts from <B>ax_perfmon</B> from July 20-26.<p>
<B>Web-based monitoring</b><p>The <B>rbackup.all</B> script sends status information to a mail alias that includes a list of recipients and a pipe to a mail filter. The Web-based pages shown in  Figures 4, 5, and 6 are generated by the combination of the mail filter and <B>cgi-bin</B> scripts, and show start times, end times, bytes transferred, and number of failed processes for backups initiated on individual systems. This information can be used to monitor backup failures, backup cycle time, and insight into adjusting start times for overlapping or conflicting backups.<p>
Information available from the <B>rbackup</B> Web pages includes; the top level form  (Figure 4), an overall summary (not shown), the most recent level 0, 3, and 6 backups for individual systems  Figure 5, and individual system reports for all backups initiated by <B>rbackup</B> since inception  Figure 6.<p>
<B>Backups Implementation</b><p>The <B>rbackup</B> implementation comprises the <B>rbackup.all </B>perl5 script and a local configuration file (<B>localinfo.pl</B>) run by <B>cron</B>, a mail filter, an HTML script, and a <B>cgi-bin</B> script (see Listings 1-3 on the <I>Sys Admin</I> Web site: <B>http://www.samag.com</B>). If the <B>rbackup.all</B> script fails on any file system, an operator can restart the backups by using the <B>rbackup.rerun</B> script (not shown). Future enhancements of the <B>rbackup</B> scripts include: the combination of the <B>rbackup.all</B> and <B>rbackup.rerun</B> scripts, reporting via the Web to the file system level (currently reporting at the system level), and the conversion to a centralized scheduling and execution implementation.<p>
The mail filter is implemented by having <B>rbackup.all</B> send email to the <B>backupcheckr</B> mail alias. The alias should point to the mail filter from the aliases file as follows:<p>
<pre>
backupcheckr: "|/backups/bin/rbackup.filter", backupmgrs</pre><p>
</b><p>The <B>rbackup</B> package is reproduced below.
<pre>
localinfo.pl
rbackup.all <tt>(rbackup.all Perl script)</tt>
Mail filter for backupcheckr alias <tt>(rbackup mail filter Perl script)</tt>
rbackup.html <tt>(rbackup.html source code)</tt>
filter.cgi <tt>(cgi-bin source)</tt></pre><p>
<p><B>Conclusion<p>
rbackup</B> provides SDSC with solutions to six of the seven backup challenges that system administrators face at large UNIX installations. All challenges except the offsite backup repository are being addressed by the <B>rbackup</B> system. The offsite backup repository will be addressed by the upcoming development and implementation of tape families in the HPSS system. Offsite backups notwithstanding, <B>rbackup</B> provides a portable backup solution with scheduling and monitoring features that make performing backups on a diverse set of UNIX systems an easy task.<p>
<B>Acknowledgements</b><p>This work was funded in part by the National Science Foundation Cooperative Agreement ASC-8902825. All brand and product names are trademarks or registered trademarks of their respective holders. 
<p>


<P>


<H1>About the Author</H1><p>
Victor Hazlewood is the lead of the HPC Systems group at the San Diego Supercomputer Center (SDSC) and has over 10 years of experience administering UNIX systems.

Chris Daharsh is the lead of the Server Systems group at SDSC and has been working with UNIX for over 5 years.


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
