<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v01, i03:  Figure 1: Command List</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Figure 1</span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1992/sep92.tar"><b class=codeListing>sep92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Figure 1: Command List</H1><p>
<P>
<TABLE BORDER=1>
<TR>
<TD WIDTH=100 ALIGN=LEFT></TD>
<TD WIDTH=300 ALIGN=LEFT></TD>
</TR>
<TR>
<TD><PRE>%d</pre><p></TD>
<p><TD>Pops an integer off of the stack and converts it to ACSCII without leading zeros.</TD>
</TR>
<TR>
<TD><PRE>%(1-9)d</pre><p></TD>
<p><TD>EX %3d pops the integer off and uses 3 ASCII characters, if it is too small it is padded to the left with zeros.
If
it is too big, then it only uses the low order bits.</TD>
</TR>
<TR>
<TD><PRE>%c</pre><p></TD>
<p><TD>Pops off an integer value and only uses the low order byte.</TD>
</TR>
<TR>
<TD><PRE>%h</pre><p></TD>
<p><TD>Pops off an integer value and only keeps the 2 low order bytes.</TD>
</TR>
<TR>
<TD><PRE>%a</pre><p></TD>
<p><TD>Pops an integer value like %h, but the order is reversed.</TD>
</TR>
<TR>
<TD><PRE>%Ixx</pre><p></TD>
<p><TD>Includes the string whose attribute is xx.</TD>
</TR>
<TR>
<TD><PRE>%Gxx</pre><p></TD>
<p><TD>Gets an integer from the variable xx and then pushes it on the stack.</TD>
</TR>
<TR>
<TD><PRE>%'c'</pre><p></TD>
<p><TD>Pushes the character on the stack as low order byte of an integer and the high order set to zero.</TD>
</TR>
<TR>
<TD><PRE>%{nn}</pre><p></TD>
<p><TD>Pushes positive or negative integer on the stack.</TD>
</TR>
<TR>
<TD><PRE>%Lxx</pre><p></TD>
<p><TD>Pushes the length of the constant or string xx onto the stack.</TD>
</TR>
<TR>
<TD><PRE>%P(a-z)</pre><p></TD>
<p><TD>Pops the stack and stores the value in an internal variable.</TD>
</TR>
<TR>
<TD><PRE>%g(a-z)</pre><p></TD>
<p><TD>Pushes the specified internal variable on to the stack.</TD>
</TR>
<TR>
<TD><PRE>%+</pre><p></TD>
<p><TD>Adds the first two values that are popped off the stack and then pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%-</pre><p></TD>
<p><TD>Subtracts the first two values that are popped off the stack and then pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%*</pre><p></TD>
<p><TD>Multiplies the two popped values and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%/</pre><p></TD>
<p><TD>Divides the two popped values and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%m</pre><p></TD>
<p><TD>Modulus the next two values and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%=</pre><p></TD>
<p><TD>Compares the two popped values and pushes a 1 if they are equal.</TD>
</TR>
<TR>
<TD><PRE>%</pre><p></TD>
<p><TD>If the second value popped off is greater than the first, pushes a 1 onto the stack.</TD>
</TR>
<TR>
<TD><PRE>%</pre><p></TD>
<p><TD>If the second value popped off is less than the first, pushes a 1 onto the stack.</TD>
</TR>
<TR>
<TD><PRE>%!</pre><p></TD>
<p><TD>Negates the variable popped and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%&amp;</pre><p></TD>
<p><TD>ANDs the first two variables popped and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%|</pre><p></TD>
<p><TD>ORs the first two variables popped and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%^</pre><p></TD>
<p><TD>EXCLUSIVE ORs the first two variables popped and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%~</pre><p></TD>
<p><TD>ONE's COMPLEMENT the value and pushes the result.</TD>
</TR>
<TR>
<TD><PRE>%x</pre><p></TD>
<p><TD>Passes through to the piocmdout subroutine the number of bytes specified by the passthru argument from
input to
output without modification.</TD>
</TR>
<TR>
<TD><PRE>%wx</pre><p></TD>
<p><TD>While loop. Whenever the matching %; is reached, the internal variable specified is decremented by one.
Execution
is transferred back to the character following %wx as long as the value of the variable is greater than zero.</TD>
</TR>
</TABLE>
<P>
If Then Else<P>
<PRE>
%? expr %t thenpart %e elsepart %;</pre><p>
<p>
Nested IF Then Else<P>
<PRE>
%? expr %t thenpart %e expr %t thenpart %e elsepart %;</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
