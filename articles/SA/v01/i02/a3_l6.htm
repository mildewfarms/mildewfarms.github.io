<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i02: Listing 6</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 6</span></td>
		<td><span class=navbarLink><a href="a3_l7.htm">Listing 7</a></span></td>
		<td><span class=navbarLink><a href="a3_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a3_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1992/jul92.tar"><b class=codeListing>jul92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 6</H1><p>
<PRE>
/*
@(#) sb.c - dump the contents of the superblock in a meaningful
format
Copyright 1990, Chris Hare

To compile for Motorola VME UNIX Systems, (R3V4 or later)
cc -o sb -DMCS sb.c

To Compile for SCO XENIX Systems (286)
cc -o sb -DXENIX sb.c

To Compile for SCO XENIX Systems (386)
cc -o sb -DXENIX sb.c

To Compile for SCO UNIX Systems (386)
cc -o sb -DXENIX sb.c

*/
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#ifdef MCS                       /* Motorola VME UNIX Systems */
#   include &lt;sys/fs/s5param.h&gt;
#   include &lt;sys/fs/s5filsys.h&gt;
#endif
#ifdef XENIX
#   include &lt;sys/param.h&gt;
#   include &lt;sys/filsys.h&gt;
#endif
#include &lt;sys/stat.h&gt;
#include &lt;string.h&gt;
#include &lt;memory.h&gt;
#include &lt;errno.h&gt;
#include &lt;time.h&gt;

#define LONG_ZERO (long)0

extern int errno;                  /* system call error value */
extern int sys_err;                /* system call error value */
extern char *sys_errlist[];        /* error list for perror() */

main( argc, argv )
int argc;
char *argv[];
{
int ReturnCode = 0,        /* function call return code */
FileDescriptor,            /* device file descriptor */
LoopCounter ,              /* LoopCounter  counter */
LoopCounter2;              /* LoopCounter  counter */

char *ctime(),             /* declare ctime(S) */
*timestr;                  /* storage area for time string */
long int SeekReturnCode,   /* long function call return code */
time();                    /* declare time(S) */
struct stat StatBuf;       /* stat(S) structore for getting file type */
struct filsys FsBuf;       /* filesys (superblock) structure */

/* check to see that we have enough arguements */
if ( argc &lt; 2 )
usage( argv[0] );

/* get the mode of the file */
ReturnCode = stat( argv[1], &amp;StatBuf );

/* check for block special type */
if ( ( StatBuf.st_mode &amp; S_IFMT ) != ( S_IFBLK ) )
{
fprintf( stderr, &quot;%s: not a block device\n&quot;, argv[1] );
usage( argv[0] );
}

/* open the device file */
FileDescriptor = open( argv[1], O_RDONLY );
if ( FileDescriptor &lt; 0 )
{
/* failures here will most likely be :
no permission to open device
*/
perror( argv[0] );
exit(2);
}

/* make sure that we are at byte 0 in the device */
SeekReturnCode = lseek( FileDescriptor, (long)0, 0 );
if ( SeekReturnCode &lt; LONG_ZERO )
{
fprintf( stderr, &quot;%s : Can't seek to byte 0\n&quot;, argv[0] );
perror( argv[0] );
exit(3);
}
/* Seek past the boot block to the superblock */
SeekReturnCode = lseek( FileDescriptor, (long)BSIZE, 1 );
if ( SeekReturnCode &lt; LONG_ZERO )
{
fprintf( stderr, &quot;%s : Can't seek to byte %d\n&quot;, argv[0], BSIZE);
perror( argv[0] );
exit(3);
}

/* Read the superblock */
ReturnCode = read( FileDescriptor, &amp;FsBuf, BSIZE );
if ( ReturnCode &lt; 0 )
{
perror( argv[0] );
exit(5);
}

/* Lets change the last modified time to something meaningful */
timestr = ctime(&amp;FsBuf.s_time);

/* Lets have a look at what is in the superblock */
/* and print the most useful stuff */
printf( &quot;Superblock dump for file system Name : %s\n&quot;, FsBuf.s_fname);
printf( &quot;Superblock dump for file system pack : %s\n&quot;, FsBuf.s_fpack);
printf( &quot;File System Block Size               : %d\n&quot;, FsBuf.s_type
* 512 );
if ( FsBuf.s_type == 1 ) /* 512 byte blocks */
{
printf( &quot;Size of i-list in blocks ( 512 byte) : %d\n&quot;,
FsBuf.s_isize );
printf( &quot;Size of Entire Volume    ( 512 byte) : %ld\n&quot;,
FsBuf.s_fsize );
printf( &quot;Total Free Blocks        ( 512 byte) : %d\n&quot;,
FsBuf.s_tfree );
}
if ( FsBuf.s_type == 2 ) /* 1024 byte blocks */

{
printf( &quot;Size of i-list in blocks (1024 byte) : %d\n&quot;,
FsBuf.s_isize );
printf( &quot;Size of Entire Volume    (1024 byte) : %ld\n&quot;,
FsBuf.s_fsize );
printf( &quot;Total Free Blocks        (1024 byte) : %d\n&quot;,
FsBuf.s_tfree );
}
printf( &quot;Total Free Inodes                    : %d\n&quot;,
FsBuf.s_tinode);

/* Modify the report based upon the s_fmod status */
if ( FsBuf.s_fmod == NULL )
printf( &quot;Has the super block been modified?   : No\n&quot; );
else
printf( &quot;Has the super block been modified?   : Yes\n&quot; );

/* Modify the report based upon the s_ronly status */
if ( FsBuf.s_ronly == NULL )
printf( &quot;Is the file system mounted read-only : No\n&quot; );
else
printf( &quot;Is the file system mounted read-only : Yes\n&quot; );

printf( &quot;Last super block update at           : %s\n&quot;, timestr );

/* Print the free block list */
printf( &quot;\nNo of Addresses in free block list   : %d  Maximum : %d\n&quot;,
FsBuf.s_nfree, NICFREE );
printf( &quot;Current Free block list reads        :\n&quot; );
for ( LoopCounter  = 0; LoopCounter  &lt; FsBuf.s_nfree; LoopCounter +=5)
{
for ( LoopCounter2 = LoopCounter; LoopCounter2 &lt; LoopCounter +5;
LoopCounter2++ )
{
if ( LoopCounter2 &gt;= FsBuf.s_nfree )
break;
printf( &quot;a%02d:%10ld &quot;,LoopCounter2,
FsBuf.s_free[LoopCounter2]);
}
printf( &quot;\n&quot;);
}

/* print the free inode list */
printf( &quot;\nNo of inodes in free inode list      : %d  Maximum : %d\n&quot;,
FsBuf.s_ninode, NICINOD );
printf( &quot;Current Free Inode list reads        :\n&quot; );
for ( LoopCounter  = 0; LoopCounter  &lt; FsBuf.s_ninode; LoopCounter +=4 )
{
for ( LoopCounter2 = LoopCounter ; LoopCounter2 &lt; LoopCounter +4;
LoopCounter2++ )
{
if ( LoopCounter2 &gt;= FsBuf.s_ninode )
break;
printf( &quot;i%03d:%10u &quot;,LoopCounter2,
FsBuf.s_inode[LoopCounter2]
);
}
printf( &quot;\n&quot;);
}

/* Close the filesystem device file */
ReturnCode = close( FileDescriptor );
if ( ReturnCode &lt; 0 )
{
perror( argv[0] );
exit(7);
}

printf( &quot;\n&quot;);
exit (0);
}

int usage( cmd )
char *cmd;
{
printf( &quot;%s usage : %s block_filesystem_device \n&quot;, cmd, cmd );
exit (1);
}</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
