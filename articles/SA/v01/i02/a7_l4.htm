<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i02: Listing 4</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink>Listing 4</span></td>
		<td><a href="../../../../source/SA/1992/jul92.tar"><b class=codeListing>jul92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 4</H1><p>
<PRE>
1: #
2: # Actual generalized background/overnight script driver, for
3: # generating a set of Informix reports with different parameters:
4: #
5: # The user is prompted for a printer name (printer), and a series of
6: # magazine (mag) and source code (sc) pairs.  For each such pair, the
7: # report generation command:
8: #   sacego -q swkpay $mag $sc | lp -d$printer
9: # is generated, and all such commands are collected in a script file
10: # named $list.
11: #
12: # Finally, this script file is submitted to either spoolonite.sh or
13: # bgrun.sh, as specified by the user.
14: #
15:
16: echo
17: echo Reports of Subscription Payment History by Source Code
18: echo
19:
20: debug=Y                     # to support testing
21:
22: AppId=orig                  # AppId is short description of application
23: Ltmp=/u3/Srcrep/Ltmp        # Work/Log area for the app, publicly writeable
24: UseLock=Y                   # Y to use lockfiles, N not to
25:
26: if [ $UseLock = Y ]; then
27:     LOCKFILE=$Ltmp/$AppId.LOCK  # Name of lockfile
28:     LOCKOPT=&quot;-l $LOCKFILE&quot;      # bgrun.sh lockfile option
29: fi
30:
31: onite=`ask.sh &quot;Do you want to run these reports overnight&quot;`     # get Y/N
32:
33: if [ $onite = N ]; then                 # If requesting background execution,
34:     if [ $UseLock = Y ]; then           # and using a lock file,
35:         if [ -r $LOCKFILE ]; then       # then check for lock file
36:             echo &quot;\nSorry, a related report is running. Please try later.&quot;
37:             exit 1
38:         else                            # no active lockfile found.
39:             trap &quot;rm $LOCKFILE; exit 1&quot; 1 2 3 9 14 15
40:             touch $LOCKFILE             # create the lockfile
41:         fi
42:     fi
43: fi
44:
45: if [ $debug = Y ]
46: then                                    # If debugging, create output file
47:     outlog=$AppId.out                   # in the current directory
48: else
49:     outlog=$Ltmp/$AppId.log             # else put in the Temp/Log area
50: fi
51:
52: #
53: # Get parameters specific to this report program:
54: #
55:
56: printer=`getptr p`      # prompt user for printer selection (internal utility)
57: list=`tmpname src`      # script file to recieve report generation commands
58:
59: echo
60: echo You will now be given the opportunity to enter a list of
61: echo source/magazine pairs. Enter an empty source code when all desired
62: echo reports have been entered.
63: echo
64:
65: while true
66: do
67:     echo
68:     echo &quot;Please enter the source code to profile (Return alone when done) -&gt; \c&quot;
69:     read sc
70:     [ &quot;$sc&quot; = &quot;&quot; ] &amp;&amp; break     # null code terminates report list
71:     mag=`getmag`                # prompt for publication code (internal utility)
72:     cat &gt;&gt;$list &lt;&lt;-END          # append the report generation command to script
73:         sacego -q swkpay $mag $sc | lp -d$printer
74: END
75: done
76:
77: if [ $onite = N ]; then
78:     [ $UseLock = Y ] &amp;&amp; echo &quot;rm $LOCKFILE&quot; &gt;&gt;$list
79:     bgrun.sh $outlog $LOCKOPT &lt; $list
80:     echo &quot;This process is now running in the background.&quot;
81:     echo &quot;The reports will be printed as they are generated&quot;
82: else
83:     spoolonite.sh `oname.sh $AppId` &lt;$list
84:     echo
85:     echo This process has been scheduled for overnight processing.
86:     echo Check for your output tomorrow morning at the selected printer.
87:     echo
88: fi
89:
90: [ $debug = N ] &amp;&amp; rm $list</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
