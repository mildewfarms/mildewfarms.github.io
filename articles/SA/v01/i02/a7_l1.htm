<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i02: Listing 1</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a7_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1992/jul92.tar"><b class=codeListing>jul92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1</H1><p>
<PRE>
1: #
2: # bgrun.sh/bgrun2.sh (linked):
3: #   Run a process in the background.
4: #
5: # Written by Leor Zolman, 7/90
6: #
7: # Formal usage:
8: #   bgrun.sh outfile [ -l lockfile ]
9: #   bgrun2.sh outfile [ -l lockfile ] 2&gt;errorfile
10: #
11: # Takes script to be executed from standard input.
12: #   bgrun.sh: stdout and stderr written to outfile.
13: #   bgrun2.sh: stdout written to outfile, stderr passed (to errorfile)
14: #
15: # If BGTEST environment variable is &quot;Y&quot;, creates the script file in
16: # the current directory for debugging and does not remove it after execution.
17: #
18: # example:
19: #
20: #   bgrun.sh /tmp/output &lt;&lt;END
21: #       echo this is a test of background processing
22: #       l
23: #       echo this is the end.
24: #   END
25: #
26: # WARNING!!!!! Remember to escape special characters ( $, `) that


27: #              must be interpreted in the background scripts!
28: #
29:
30: if [ &quot;$BGTEST&quot; = Y ]; then
31:     debug=Y
32: else
33:     debug=N
34: fi
35:
36: if [ $# -ne 1 -a $# -ne 3 ]; then       # check for proper usage
37:     echo usage: $0 outfile  [-l lockfile]
38:     exit
39: fi
40:
41: trap &quot;rm $script; exit 1&quot; 1 2 3 9 14 15
42:
43: if [ $debug = Y ]; then
44:     script=script                       # debug script in current directory
45: else
46:     script=`tmpname bg`                 # place script in /tmp diretory
47: fi
48:
49: if [ $# -eq 3 ]; then
50:     case $2 in
51:       -l|-L)
52:         echo &quot;trap \&quot;rm $script; rm $3; exit 1\&quot; 1 2 3 9 14 15&quot; &gt;$script;;
53:       *)
54:         echo &quot;usage: $0 outfile  [-l lockfile]&quot;
55:         exit 1;;
56:     esac
57: else
58:     echo &quot;trap \&quot;rm $script; exit 1\&quot; 1 2 3 9 14 15&quot; &gt;$script
59: fi
60:
61: cat &gt;&gt;$script                           # copy std input into the script file
62:
63: [ $debug = N ] &amp;&amp; cat &gt;&gt;$script &lt;&lt;-END  # and append a &quot;selfdestruct&quot; to
64:     rm $script                          # remove the script after execution
65: END
66: chmod +x $script                        # make the script executable
67:
68: [ -f $1 ] &amp;&amp; rm $1                      # erase old output file, if any
69:
70: cat &lt;/dev/null &gt;$1                      # ensure output file is writeable
71: chmod 666 $1                            # (i.e., erasable) by everyone, to
72:                                         # allow public output files
73:
74: unset redirerr
75: [ $0 = bgrun.sh ] &amp;&amp; redirerr=&quot;2&gt;&amp;1&quot;    # If bgrun.sh, direct stderr to stdout
76: nohup $script &gt;&gt;$1 $redirerr &amp;          # execute script (immune to hangup)</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
