<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i02: Listing 5</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink>Listing 5</span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a3_l7.htm">Listing 7</a></span></td>
		<td><span class=navbarLink><a href="a3_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a3_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1992/jul92.tar"><b class=codeListing>jul92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 5</H1><p>
<PRE>
#! perl
eval '(exit $?0)' &amp;&amp; eval 'exec perl -S $0 ${1+&quot;$@&quot;}'
&amp; eval 'exec perl -S $0 $argv:q'
if 0;
#
# Copyright 1992, Chris Hare
#
#
# This PERL script is designed to read the superblock of the given
# filesystem name, and to print a report on it.  While this version is
# coupled to the standard AT&amp;T S51K filesystem, it may work with some other
# filesystem formats, so long as the superblock is the same.
#
# Load the configuration file with the filesystem superblock information
#
require &quot;config.fs&quot;;
#
# set the filesystem block size type information
#

$Types{'1'} = 512;                      # 512 byte blocks
$Types{'2'} = 1024;                     # 1024 byte blocks
$Types{'3'} = 2048;                     # 2048 byte blocks
$Types{'4'} = 4096;                     # 4096 byte blocks
$Types{'5'} = 8192;                     # 8192 byte blocks

#
# Required arguments are
#       block device name
#
&amp;Usage if ( ! defined($ARGV[0]) );
$Device = $ARGV[0];
#
# check to see if it is a valid device, and it exists
#
&amp;Error(&quot;ENFILE&quot;) if ( ! -e $Device );
&amp;Error(&quot;ENBLK&quot;) if ( ! -b $Device );
&amp;Error(&quot;ENOPERM&quot;) if ( ! -r $Device );
#
# open the named device
#
open( FS, &quot;$Device&quot; );
#
# seek in 512 bytes.  This is the empty space which used to contain boot
# code (a long time ago).
#
seek( FS, 512, 0 );
#
# read the superblock, which is typically 512 bytes in size
#
read( FS, $buf, 512 );
#
# unpack it into the structure
# This piece of code may be system dependant - based upon the potentially
# different structures available
#
( $s_isize, $s_fsize, $s_nfree, $s_free, $s_ninode, $s_inode,
$s_flock, $s_ilock, $s_fmod, $s_ronly, $s_time, $s_dev, $s_tfree,
$s_tinode, $s_fname, $s_pack, $s_fill, $s_state, $s_magic,
$s_type ) = unpack( $S51K, $buf );
#
# unpack the free block list into an array
#
(@s_free)  = unpack($S51K_s_free,  $s_free);
#
# and now the free inode list
#
(@s_inode) = unpack($S51K_s_inode, $s_inode);
#
# calculate the Blocksize, which is typically mulitples of 512 bytes
#
$bsize = $Types{$s_type};
#
# now put a real word in for the superblock modified flag
#
if ( $s_fmod == 0 )
{
$s_fmod = &quot;No&quot;;
}
else
{
$s_fmod = &quot;Yes&quot;;
}
#
# OK, and now for the filesystem mounted read-only flag
#
if ( $s_ronly == 0 )
{
$s_ronly = &quot;No&quot;;
}
else
{
$s_ronly = &quot;Yes&quot;;
}
#
# print a report
#
printf &quot;Filesystem Information for %s\n\n&quot;, $Device;
printf &quot;Volumne Name : %6s          Pack Name : %6s\n&quot;, $s_fname, $s_pack;
printf &quot;File System Block Size                  : %4d bytes\n&quot;, $bsize;
printf &quot;Total size of Volume (%4d byte blocks) : %ld\n&quot;, $bsize, $s_fsize;
printf &quot;Total size of i-list (%4d byte blocks) : %u\n&quot;, $bsize, $s_isize;
printf &quot;Total Free Blocks    (%4d byte blocks) : %ld\n&quot;, $bsize, $s_tfree;
printf &quot;Total Free Inodes                       : %ld\n&quot;, $s_tinode;
printf &quot;Has the superblock been modified?       : %s\n&quot;, $s_fmod;
printf &quot;Is the filesystem mounted read only?    : %s\n&quot;, $s_ronly;
printf &quot;Last superblock update at               : %s\n\n\n&quot;,
&amp;ctime($s_time);;
printf &quot;Number of blocks in the free list : %ld   Maximum : %ld\n&quot;,
$s_nfree, $NICFREE;
printf &quot;Current Free Block List reads : \n&quot;;
&amp;PrintFreeBlockList;

printf &quot;\nNumber of inodes in the free list : %ld   Maximum : %ld\n&quot;,
$s_ninode, $NICINOD;
printf &quot;Current Free Inode List reads : \n&quot;;
&amp;PrintFreeInodeList;
exit(0);

#
# The PrintFreeBlockList subroutine will read through the global variable
# $s_free printing five block addresses per line, with a prefix of
# a###: where ### is the entry number in the list
#
sub PrintFreeBlockList
{
#
# loop through the list starting a zero, and going to the actial number
# stored in the superblock
#
for ( $z = 0; $z &lt; $s_nfree; $z+=5 )
{
#
# print five per line, and then do a line feed.
#
for ( $y = $z; $y &lt; $z + 5; $y++ )
{
if ( $y &lt; $s_nfree )
{
printf &quot;a%02d:%10ld &quot;,$y, $s_free[$y];
}
}
printf &quot;\n&quot;;
}
}

#
# The PrintFreeInodeList subroutine will read through the global variable
# $s_inode printing five inode addresses per line, with a prefix of
# i###: where ### is the entry number in the list
#
sub PrintFreeInodeList
{
#
# loop through the list starting a zero, and going to the actial number
# stored in the superblock
#
for ( $z = 0; $z &lt; $s_ninode; $z+=5 )
{
#
# print five per line, and then do a line feed.
#
for ( $y = $z; $y &lt; $z + 5; $y++ )
{
if ( $y &lt; $s_ninode )
{
printf &quot;i%02d:%10ld &quot;,$y, $s_inode[$y];
}
}
printf &quot;\n&quot;;
}
}

#
# the Error subroutine will explain to the user what he/she/it did wrong.
# Possible errors are
#               not a block device (ENBLK)
#               file doesn't exist (ENFILE)
#               no permissions (ENOPERM)
#
sub Error
{
local( $msg ) = @_;
if ( $msg eq &quot;ENFILE&quot; )
{
printf &quot;The specified device file does not exist.\n&quot;;
&amp;Usage;
}
if ( $msg eq &quot;ENBLK&quot; )
{
printf &quot;The specified device file is not a block special
file.\n&quot;;
&amp;Usage;
}
if ( $msg eq &quot;ENOPERM&quot; )
{
printf &quot;Sorry, insufficient priveledges.\n&quot;;
exit(1);
}
}

#
# the usage subroutine will give the command usage
#
sub Usage
{
printf &quot;Usage : fs.pl block_device\n&quot;;
exit(1);
}

#
# the ctime subroutine here is a modified version of that provided with the
# PERL distribution
#
# Original Author Waldemar Kebsch, Federal Republic of Germany, November 1988
# Modified by Marion Hakanson (hakanson@cse.ogi.edu)
# Modified by Chris Hare (chare@choreo.ca)

sub ctime {

@DoW = ('Sun','Mon','Tue','Wed','Thu','Fri','Sat');
@MoY = ('Jan','Feb','Mar','Apr','May','Jun',
'Jul','Aug','Sep','Oct','Nov','Dec');

local($time) = @_;
local($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst);

# Determine what time zone is in effect.
# Use GMT if TZ is defined as null, local time if TZ undefined.
# There's no portable way to find the system default timezone.

$TZ = defined($ENV{'TZ'}) ? ( $ENV{'TZ'} ? $ENV{'TZ'} : 'GMT' ) : '';
($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
($TZ eq 'GMT') ? gmtime($time) : localtime($time);

# Hack to deal with 'PST8PDT' format of TZ
# Note that this can't deal with all the esoteric forms, but it
# does recognize the most common: [:]STDoff[DST[off][,rule]]

if($TZ=~/^([^:\d+\-,]{3,})([+-]?\d{1,2}(:\d{1,2}){0,2})([^\d+\-,]{3,})?/){
$TZ = $isdst ? $4 : $1;
}
$TZ .= ' ' unless $TZ eq '';

$year += ($year &lt; 70) ? 2000 : 1900;
sprintf(&quot;%s %s %2d %2d:%02d:%02d %s%4d&quot;,
$DoW[$wday], $MoY[$mon], $mday, $hour, $min, $sec, $TZ, $year);
}

#
# we won't execute this
#
printf &quot;BUSTER!\n&quot;</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
