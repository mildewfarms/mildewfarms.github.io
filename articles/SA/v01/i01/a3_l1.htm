<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i01: Listing 1: echotest.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1992/may92.tar"><b class=codeListing>may92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: echotest.c</H1><p>
<PRE>
/****************************************************
*
* For testing escape sequences and control
*      characters on ASCII terminals,
*      emulators, and workstation term windows.
*
* Usage:
*      echotest                8-bit without xon-xoff
*      echotest -7             7-bit without xon-xoff
*      echotest -x             8-bit with xon-xoff
*      echotest -x -7          7-bit with xon-xoff
*
****************************************************/

#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;termio.h&gt;

struct termio Crt_normal;
struct termio Crt_raw;

/* = = = = = = = = = = main = = = = = = = = = = = = =*/

main(argc, argv)
int     argc;
char    **argv;

{
int eight_bit = 1;
int xon_xoff = 0;
int quit();

while(argc &gt; 1)
{
if (strcmp(argv[1], &quot;-7&quot;) == 0)
{
eight_bit = 0;
argc--;
argv++;
}
else if (strcmp(argv[1], &quot;-x&quot;) == 0)
{
xon_xoff = 1;
argc--;
argv++;
}
else
{
printf(&quot;Usage: %s [-7] [-x]\n&quot;, argv[0]);
exit(1);
}
}

fprintf(stderr, &quot;Press qqqq to quit\n&quot;);
termio_init(0, xon_xoff, eight_bit, &amp;Crt_normal,
&amp;Crt_raw);
signal(SIGTERM, quit);
signal(SIGHUP, quit);
termio_set(0, &amp;Crt_raw);
go();
}

/* = = = = = = = = = = quit = = = = = = = = = = = =*/
/*
* Reset the terminal back to normal and exit.
*
*/

quit()
{
termio_set(0, &amp;Crt_normal);
exit(0);
}

/* = = = = = = = = = = go = = = = = = = = = = = =*/
/*
* Main processing loop.
*
*/

go()
{
char        c;
static      cues=0;
int status;

while(1)
{
status = read(0, &amp;c, 1);
if (status != 1)
{
perror(&quot;Read terminal&quot;);
quit();
}
if (c == 'q')
{
if(++cues&gt;=4)
quit();
}
else
cues=0;
write(1, &amp;c, 1);
}
}

/* = = = = = = = = termio_init = = = = = = = = = =*/
/*
* Set a termio structure to raw and save the
* normal setting.
*
*/

termio_init(fd, use_xon_xoff, use_input_8_bit, normal,
raw)
int         use_xon_xoff;
int         use_input_8_bit;
struct      termio  *normal;
struct      termio  *raw;
{
int status;
int baud;

status = ioctl(fd, TCGETA, normal);
if (status &lt; 0)
{
perror(&quot;ioctl TCGETA failed&quot;);
return(-1);
}
status = ioctl(fd, TCGETA, raw);
if (status &lt; 0)
{
perror(&quot;ioctl TCGETA 2 failed&quot;);
return(-1);
}
raw-&gt;c_iflag |=  (0);
raw-&gt;c_iflag &amp;= ~(IGNBRK | BRKINT | PARMRK |
INLCR | IGNCR | ICRNL | IUCLC |
IXANY | IXOFF);
if (use_input_8_bit)
raw-&gt;c_iflag &amp;= ~(ISTRIP);
if (use_xon_xoff)
raw-&gt;c_iflag |= (IXON);
else
raw-&gt;c_iflag &amp;= ~(IXON);

raw-&gt;c_oflag |=  (0);
raw-&gt;c_oflag &amp;= ~(OPOST | OLCUC | ONLCR | OCRNL |
ONOCR | ONLRET | OFILL |
OFDEL | TAB3);

if (use_input_8_bit)
{
raw-&gt;c_cflag &amp;= ~(PARENB | CSIZE);
raw-&gt;c_cflag |=  (CS8);
}

raw-&gt;c_lflag |=  (NOFLSH);
raw-&gt;c_lflag &amp;= ~(ISIG | ICANON | XCASE | ECHO |
ECHOE | ECHOK);
raw-&gt;c_cc[VMIN] = 1;
raw-&gt;c_cc[VTIME] = 0;
return(0);
}

/* = = = = = = = = termio_set = = = = = = = = = = = =*/
/*
* Use the given termio structure to set the line.
*
*/

termio_set(fd, saved)
int         fd;
struct      termio  *saved;
{
int status;

status = ioctl(fd, TCSETAW, saved);
if (status &lt; 0)
{
perror(&quot;ioctl TCSETAW set failed&quot;);
return(-1);
}
return(0);
}</pre><p><P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
