<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v01, i01:  Where did that Core File Come From?</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1992/may92.tar"><b class=codeListing>may92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Where did that Core File Come From?</H1><p>
<P>
Chris Hare<P>

Whenever UNIX encounters a fatal error, it dumps an
image of the halted 
process into a file named core. Many different types
of errors 
can cause a core dump. The most common are memory violations,
illegal 
instructions, bus errors, and user-generated quit signals.
Core files 
can be nasty disk consumers, especially since many core
files are 
essentially worthless -- the product of quit signals
from over-zealous 
users (who think the system is hung if their 100-megabyte
file doesn't 
sort instantly).<P>

However, some core files are extremely important. To
a working developer, 
the core file holds a vast wealth of debugging information:
by examining 
the core file, he can find out exactly what his program
was doing 
when it was halted.<P>

For the most part, however, when we system administrators
find these 
annoying core files, we have no idea what caused them
and thus, no 
reliable basis for deciding whether to delete them.<P>

In 1988, a program called psc appeared on USENET. This
tool 
looks inside the core file and extracts information
about the core 
dump, including important clues to the origin of the
core file. This 
article explains psc and the related file structures.<P>

As part of each process, UNIX maintains a per process
user area 
which contains the user environment. This user environment
defines 
the process, and is part of the information which is
saved as part 
of a core dump. The per-process user area also includes
the registers 
as they were at the time of the fault. The actual size
of the user 
area is implementation-dependent, but is defined in
the system include 
file /usr/include/sys/param.h. The remainder of the
core file 
represents the actual contents of the user's memory
when the image 
was written to disk.<P>

The system header file /usr/include/sys/user.h describes
the 
per-process user area, and /usr/include/sys/reg.h gives
the 
location of the register values.<P>

The program is fairly straight forward, amounting to
only 81 lines 
(Listing 1).<P>

By default, psc opens a file named &quot;core&quot;
if it exists 
in the current directory. Alternatively, the user may
use a command 
line path argument to specify which file is to be examined.
psc 
opens the file, and loads the per user process structure
with the 
data from the file's user area.<P>

Figure 1 shows a typical psc report. The effective and
real 
user ID numbers tell which user was running the process
when the process 
died. Note that if the effective user ID is different
from the real 
user ID, a core image will not be generated when the
fault occurs.<P>

The &quot;process times&quot; section reports the parent
and child process 
times which had accumulated prior to the dump. The user
time indicates 
the amount of time which was spent operating in user
mode (as opposed 
to kernel or system mode).<P>

The &quot;process misc&quot; section gives the tty major
and 
minor numbers and the address of the process structure
for the process 
which created this core dump. On its own, the process
structure address 
may not be useful, but armed with this information and
a debugger, 
you can peruse the entire process slot entry. The controlling
tty 
major and minor numbers tell who was executing the program,
and from 
what terminal.<P>

The IPC section reports on the active interprocess communication
locks. 
A value of &quot;proc&quot; in this section indicates
that the process 
was locked into RAM, &quot;text&quot; indicates that
the text portion 
was locked, and &quot;data&quot; indicates that the
data portion was 
locked. Unless the offending program specifically asked
the kernel 
to lock its text or data area, this section will report
&quot;unlocked.&quot;<P>

The FILE I/O section defines the output parameters which
were active 
when the program crashed. The base I/O address points
to the I/O control 
structure. &quot;Offset&quot; is the file offset at
the time. &quot;Bytes 
remaining&quot; reports how much data was left when
the process aborted.<P>

This section also reports what umask was being applied
to files which 
were created by this program. The ulimit value indicates
the maximum 
file size (in blocks) which could be created by this
application.<P>

The &quot;accounting&quot; section reports which process
created this 
core file, how much memory was used by the process,
whether the process 
was created via fork or exec system call, and when the
process started.<P>

<B>Conclusion</B><P>

Though psc is a simple program, it is an important system
administrator's 
tool. The information psc reports can prove invaluable
in identifying 
the cause of a core dump and in determining whether
a particular core 
file needs to be preserved. <P>




<P>


<H1>About the Author</H1><p>
<P>
Chris Hare is Ottawa Technical Services Manager for
Choreo 
Systems, Inc. He has worked in the UNIX environment
since 1986 and 
in 1988 became one the first SCO authorized instructors
in Canada. 
He teaches UNIX introductory, system administration,
and programming 
classes. His current focus is on networking, Perl, and
X. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
