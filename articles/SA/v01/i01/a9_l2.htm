<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i01: Listing 2: pwd.pl</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a9.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a9_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a9_s1.htm">Sidebar 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a9_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1992/may92.tar"><b class=codeListing>may92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: pwd.pl</H1><p>
<PRE>
/bin/passwd model program

#! suidperl
eval '(exit $?0)' &amp;&amp; eval 'exec suidperl $0
${1+&quot;$@&quot;}'
&amp; eval 'exec suidperl $0 $argv:q'
if 0;

#
# Demonstrate how to use PERL to test for the conditions mentioned in the
# article
#
#
# set some default conditionals
#
$LocalWords = &quot;/etc/badwords&quot;;          # location of badword list
$pwd_length = &quot;6&quot;;                      # minimum password length
$PasswordFile = &quot;/etc/passwd&quot;;          # where is the passwd file?
$TempFile = &quot;/tmp/ptmp&quot;;                # temporary copy of passwd
$Dictionary = &quot;/usr/dict/words&quot;;        # Dictionary of words
$ENV{'PATH'} = &quot;/bin:/usr/bin:/etc&quot;;

#
# setup the signal handler, so that things are done right when we abort
#
$SIG{'INT'} = 'DoExit';
$SIG{'TERM'} = 'DoExit';

#
# ensure security things are OK
#
if ( $&gt; != 0 )
{
printf &quot;error: problem running SUID\n&quot;;
&amp;DoExit(1);
}
#
# Check to see if things are set up right
#
die &quot;passwd file locked! Try again.\n&quot; if ( -f &quot;$TempFile&quot; );
#
# OK, create the tempfile
#
open( TEMP, &quot;&gt;$TempFile&quot; ) || die &quot;can't open temp file&quot;;
#
# Insure that we are dealing with the user at the keyboard by closing
# STDIN and STDOUT.  Then re-open the /dev/tty
#
close( STDIN );
close( STDOUT );
open( TERM, &quot;+&gt;/dev/tty&quot; );
#
# set the TERM descriptor to be the one which is put in place
#
select( TERM );

#
# get the passwd file entry for this account.  $&lt; is the numerical
# representation of our REAL UID
#
( $me, $mypasswd, $uid, $gid, $pwage,
$comment, $gcos, $dir, $shell ) = getpwuid($&lt;);
#
# $pw_salt is the first two characters of the SALT for the existing
# password
#
$pw_salt = substr( $mypasswd, 0, 2 );
#
# NOTE : presently, we are ignoring any reference to password aging
#
printf &quot;Changing password for : $me\n&quot;;
#
# collect the old passwd
#
printf &quot;Old password: &quot;;
#
# the /bin/stty -echo turns of terminal echo
#
system &quot;/bin/stty -echo&quot;;
$old_passwd = &lt;TERM&gt;;
#
# the /bin/stty echo turns on terminal echo
#
system( &quot;/bin/stty echo&quot; );
chop( $old_passwd );
printf &quot;\n&quot;;

#
# check to see if the passwords are the same
#
if ( crypt( $old_passwd, $pw_salt ) eq $mypasswd )
{
#
# Yup, so go and work on getting a new password
#
&amp;DoNewPasswd;
}
else
{
#
# Nope, the password is wrong, so tell the user and exit.
#
printf &quot;Sorry.\n&quot;;
&amp;DoExit(1);
}

#
# the DoNewPasswd function will process the local configuration file and
# work on getting a new password
#
sub DoNewPasswd
{
#
# load our site specific password configuration file
#
require &quot;passwd.cfg&quot; if ( -f passwd.cfg);
#
# now get the password and process it
#
&amp;GetNewPassword;
#
# create the new passwd file
#
&amp;BuildNewPasswd;
#
# reset terminal and exit
#
system( &quot;/bin/stty echo&quot; );
&amp;DoExit(0);
}

sub GetNewPassword
{
printf &quot;You will now be prompted to enter a new password.  The following
rules must be adhered to when entering this :

it must be at least $pwd_length characters long
it must contain at least one numeric or special character
it cannot contain your username, or words like UNIX, XENIX, guru
\n&quot;;

#
# We will loop around only three times
#
$IsaidIt = 0;
while ( $IsaidIt &lt; 3 )
{
#
# we will give the user THREE chances to change it.
#
$new_passwd = &amp;CollectPasswd;

if ( &amp;GoodPW( $new_passwd ) )
{
return(0);
}
else
{
#
# Ooops! it didn't meet at least one of the criteria
#
$IsaidIt++;
}
}
printf &quot;Too many unsuccessful attempts - change aborted.\n&quot;;
return(0);
}

#
# Actually get the password from the user
#
sub CollectPasswd
{
#
# set the collectible spaces to some junk variables for the loop
#
$pass0 = &quot;x&quot;;
$pass1 = &quot;y&quot;;
$try = 0;

#
# again - we will loop around three times - this provides a second
# chance for the user
#
while ( $try &lt; 3 )
{
#
# print the prompt, and then turn off the terminal echo
# then collect the first attempt
#
printf &quot;New password: &quot;;
system( &quot;/bin/stty -echo&quot; );
$pass0 = &lt;TERM&gt;;
system( &quot;/bin/stty echo&quot; );
printf &quot;\n&quot;;
chop( $pass0 );
#
# check to see if the user is trying to use the same password
#
if ( $pass0 eq $old_passwd )
{
$try++;
printf &quot;You cannot re-use the same password.\n&quot;;
next;
}
#
# check the length here
#
if ( length( $pass0 ) &lt; $pwd_length )
{
$try++;
printf &quot;Your new password must be at least %s characters\n&quot;,
$pwd_length;
next;
}
#
# check for a number
#
if ( ! &amp;CheckDigits($pass0) )
{
$try++;
printf &quot;Your new password must contain at least one numeric or special character.\n&quot;;
next;
}
#
# print the prompt, and then turn off the terminal echo
# then collect the first attempt
#
printf &quot;Re-enter New password: &quot;;
system( &quot;/bin/stty -echo&quot; );
$pass1 = &lt;TERM&gt;;
system( &quot;/bin/stty echo&quot; );
printf &quot;\n&quot;;
chop( $pass1 );
#
# If they are the some, then return the collected password to the
# calling program
#
if ( $pass0 eq $pass1 )
{
return( $pass0 );
}
else
{
#
# then tell the user that they don't match and loop again
#
$try++;
printf &quot;They don't match.  Try again.\n&quot;;
}
}
#
# we will reach this if we have had too many failures
#
printf &quot;Too many failures - aborted!\n&quot;;
&amp;DoExit(1);
}

#
# this routine will verify that there is a digit and/or a non-printable
# character in the argument provided
#
sub CheckDigits
{
local ( $pass ) = @_;

if ( $pass0 =~ /[0-9]/ )
{
#
# there is at least one digit
#
return(1);
}
else
{
#
# check to see if there are any non-printable characters in here
#
for ( $x = 0; $x &lt; length($pass); $x++ )
{
#
# split off a character
#
$y = substr( $pass, $x, 1 );
#
# get the ASCII value - if it is less than 32 (space), then it
# is a control character
#
if ( ord($y) &lt; 32 )
{
return(1);
}
}
return(0);
}
}

#
# this routine will evaluate the qaulity of the good password
#
sub GoodPW
{
local( $pass ) = @_;

printf &quot;Checking your password for obviousness.\n&quot;;
#
# now we are going to do some checking
#
#
# process the password file
#
open( pwd, &quot;/etc/passwd&quot; ) || die &quot;can't open /etc/passwd\n&quot;;
while (&lt;pwd&gt;)
{
( $username, $passwd, $uid, $gid,
$comment, $dir, $shell ) = split(/:/);
#
# Check 1 - is the new password one of the existing user names?
#
if ( $pass =~ /$username/i )
{
# if the value of $$pass exists in any part of the vlogin name,
# the junk tha password
printf &quot;Can't use a valid login name as part of the password.\n&quot;;
return(0);
}
}

close( pwd );
#
# Now do some further analysis - read through the list of poor words
# and see if we have a match
#
open( pwd, &quot;$LocalWords&quot; ) if ( defined( $LocalWords ) );
while (&lt;pwd&gt;)
{
( $word, @message ) = split(/:/);
#
# if we have a match, print the message which was stored with this
# word
#
if ( $word =~ /^$pass*/i )
{
printf &quot;bad password : %s\n&quot;, @message;
return(0);
}
if ( $word =~ /.*$pass$/i )
{
printf &quot;bad password : %s\n&quot;, @message;
return(0);
}
}

close( pwd );
#
# Now do some further analysis - look through the dictionary
#
open( pwd, &quot;$Dictionary&quot; ) if ( defined($Dictionary) );
while (&lt;pwd&gt;)
{
chop;
if ( $_ =~ /$pass/i )
{
printf &quot;bad password : Its in the dictionary\n&quot;;
return(0);
}
}

return(1);
}

sub BuildNewPasswd
{
seek ( TEMP, 0, 0 );
open( PWD, &quot;$PasswordFile&quot; );

while (&lt;PWD&gt;)
{
( $username, $passwd, $uid, $gid, $comment, $dir, $shell ) = split(/:/);
if ( $username ne $me )
{
printf TEMP &quot;$_&quot;;
}
else
{
printf &quot;UPDATING $pwage \n&quot;;
$new_passwd = crypt( $new_passwd, $pw_salt );
if ( $pwage eq &quot;&quot; )
{
printf &quot;%s:%s:%s:%s:%s:%s:%s:%s&quot;,
$username,$new_passwd, $uid,
$gid, $comment, $dir, $shell;
printf TEMP &quot;%s:%s:%s:%s:%s:%s:%s:%s&quot;,
$username,$new_passwd, $uid,
$gid, $comment, $dir, $shell;
}
else
{
printf TEMP &quot;%s:%s,%s:%s:%s:%s:%s:%s:%s&quot;,
$username,$new_passwd, $pwage, $uid,
$gid, $comment, $dir, $shell;
}
}
}
printf &quot;Password for $me updated.\n&quot;;
return(0);
}
#
# this routine is called by the interrupt handlers and at various places in
# order to remove the temporary file and exit
#
sub DoExit
{
local( $value ) = @_;
#
# make sure that terminal echo is enabled
#
system('/bin/stty echo');
#
# remove the ptmp file
#
close( TEMP );
#
# rename the existing passwd file
#
rename( &quot;/etc/passwd&quot;, &quot;/etc/opasswd&quot; );
link( &quot;$TempFile&quot;, &quot;/etc/passwd&quot; );
#unlink( &quot;$Tempfile&quot; );
#
# exit
#
exit($value);
}</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
