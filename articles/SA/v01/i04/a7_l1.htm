<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i04: Listing 1: runsql/runsql2</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1992/nov92.tar"><b class=codeListing>nov92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: runsql/runsql2</H1><p>
<PRE>
#
# runsql:   Execute RDSQL script, discard stdout and stderr streams
# runsql2:  Same, do not discard stdout and stderr.
#
# Written by Leor Zolman, 7/92
#
# usages:
#       runsql.sh &lt;database&gt; [scriptfile]
#               (stdout and stderr stream output discarded)
#
#       runsql2.sh &lt;database&gt; [scriptfile] &gt;outstream 2&gt;errstream
#               (stderr and stdout steams passed through unchanged)
#
# Both read sql script from scriptfile, or from standard input
# if no file given.
#
# Example (from within a shell script):
#
#     runsql2 accounts &gt;sql.out 2&gt;sql.err &lt;&lt;END
#         unload to &quot;table.txt&quot;
#            select * from table;
#     END
#
# NOTES:
#   1. If script is fed from the standard input, no &quot;database&quot;
#       statement is necessary. If the filename method is used,
#       then the &quot;database&quot; statement IS required in the input file.
#

[ $# -lt 1 ] &amp;&amp; echo &quot;usage: $0 &lt;database&gt; [scriptfile]&quot; &amp;&amp; exit

if [ $# -eq 2 ]
then
if [ ! -r $2 ]
then
echo &quot;$0: script file $1 not found.&quot; &gt;&amp;2
exit 1
fi

if [ `basename $2 .sql`.sql != $2 ]  # make sure file name ends in .sql
then
scriptfile=`tmpname`.sql    # if not, create a temporary file
cp $2 $scriptfile           # copy script file to it
chmod 777 $scriptfile
usingtmp=Y                  # set flag so we erase temp file later
else
scriptfile=$2
fi
else
scriptfile=`tmpname`.sql
cat &gt;$scriptfile &lt;&lt;-END
database $1;
END
cat &gt;&gt;$scriptfile
usingtmp=Y
fi

if [ $0 = runsql2 ]
then
isql -s $1 -qr $scriptfile                  # save output streams
else
isql -s $1 -qr $scriptfile &gt;/dev/null 2&gt;&amp;1  # discard output streams
fi

[ &quot;$usingtmp&quot; = Y ] &amp;&amp; rm $scriptfile</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
