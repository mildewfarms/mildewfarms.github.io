<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v01, i04:  Sidebar: terminfo Parameter Operators</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink>Sidebar 2</span></td>
		<td><a href="../../../../source/SA/1992/nov92.tar"><b class=codeListing>nov92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: terminfo Parameter Operators</H1><p>
<P>
When printer command strings come along, they are usually
encoded 
following the ANSI/ISO standards for character control
functions (I 
refer to the ISO 6429 Standard). However, that encoding
technique 
is not usually followed by printers, just as not all
terminals use 
the same control codes for any single function. There
must be a way 
within the terminfo definition to translate from the
input 
format (ANSI/ISO) delivered to the device through terminfo

into the output format used by the printer or terminal.<P>

terminfo provides a simple language for handling these
parameters. 
There are two issues that tend to make this language
a bit difficult 
to read until you get used to them: the operators are
somewhat cryptic, 
and they use Reverse Polish Notation (RPN).<P>

The operators are a little cryptic because they are
formed from a 
percent (%) followed by a single character to identify
which operator 
is being used. Stringing these brief operators together
tends to make 
the resulting string difficult to read. As with complex
regular expressions, 
though, the best approach to understanding them is to
take them one 
at a time, reading from left to right. This can be complicated
for 
some people by the use of RPN.<P>

Also known as postfix notation, RPN puts the operator
after the operands, 
so the familiar infix notation, &quot;2 + 3&quot;, would
be rewritten 
in RPN as &quot;2, 3 +&quot;. The advantage of RPN for
implementing 
a simple language is that parentheses and order of operation
are irrelevant, 
so a straightforward left-to-right parsing can be done.
For instance, 
think about the infix expression &quot;2 + 3 * 4&quot;,
which, to come 
up with the correct answer, must be solved as &quot;2
+ (3 * 4)&quot;. 
The precedence of multiplication over addition supersedes
the left 
to right evaluation, so parentheses are not strictly
needed. (This 
is a simple but revealing test of a calculator to see
if it does arithmetic 
correctly. The cheap ones don't.) But, an expression
parser would 
have to know this precedence to solve the problem correctly.
With 
postfix, either you rearrange the problem so that simple
left-to-right 
evaluation delivers the correct answer, &quot;3, 4 *
2 +&quot;, or the 
operators are arranged in the order that they are to
be executed, 
&quot;2, 3, 4, * +&quot;. RPN extensively uses a stack
to store its 
operands and answers. Of the previous two examples,
the first one 
pushes 3, then 4, onto the stack, then pops those two
to perform the 
multiplication, after which it pushes the result. Then,
2 is pushed, 
after which the previous result is popped with the 2
to perform the 
addition. The second example pushes all three constants,
then pops 
the last two to perform the multiplication, pushing
the result, and 
then pops the result and the first number to perform
the addition. 
Results are always pushed.<P>

The stack-oriented operation of RPN must be kept in
mind when putting 
together parameter expressions used by terminfo. To
use a parameter 
or other value, it must first be pushed onto the stack,
and then something 
else pops it off later, usually to print it. Almost
every operator 
either pushes or pops something. Following is a list
of the terminfo 
parameter operators. The word &quot;parameter&quot;
refers to a particular 
value accompanying the ANSI/ISO input command, such
as a row or column 
number, or a quantity to move up, down, left, or right.]<P>

<B>%p[1-9]</B> -- Push parameter number 1-9 as 
specified. %p1 pushes parameter 1.<P>

<B>%'char'</B> -- Push the single character constant 
contained within the apostrophes. %'X' pushes a capital
X.<P>

<B>%{num}</B> -- Push the single decimal constant 
contained within the braces. %{17} pushes the value
17.<P>

<B>%P[a-z]</B> -- Pop a value into the dynamic 
variable named a-z as specified. %Pv creates a variable
that 
can be used within this expression named v and pops
a value 
into that variable.<P>

<B>%P[A-Z]</B> -- Pop a value into the static variable 
named A-Z as specified. %PA creates a variable that
can be 
used by other expressions named A and pops a value into
that 
variable.<P>

<B>%g[a-z]</B> -- Push the value in the dynamic 
variable named a-z as specified. %gb gets the value
currently 
stored in b and pushes it.<P>

<B>%g[A-Z]</B> -- Push the value in the static 
variable named A-Z as specified. %gA gets the value
currently 
in A and pushes it.<P>

<B>%i</B> -- Increment the first or both the first 
and second parameters. This is used by any ANSI terminals
with parameters 
that begin with 1 instead of 0.<P>

<B>%+</B> -- Pop two integer operands, add them, 
and push the result.<P>

<B>%-</B> -- Pop two, subtract, and push result.<P>

<B>%*</B> -- Pop two, multiply, and push result.<P>

<B>%/</B> -- Pop two, divide, and push quotient.<P>

<B>%m</B> -- Pop two, divide, and push remainder.<P>

<B>%~</B> -- Pop one, binary NOT, push result.<P>

<B>%&amp;</B> -- Pop two, binary AND, push result.<P>

<B>%|</B> -- Pop two, binary OR, push result.<P>

<B>%^</B> -- Pop two, binary XOR, push result.<P>

<B>%=</B> -- Pop two, compare equal, push truth: 
1 if TRUE, and 0 if FALSE.<P>

<B>%&lt;&lt;</B> -- Pop two, compare less-than, push truth.<P>

<B>%&gt;&gt;</B> -- Pop two, compare greater-than, push 
truth.<P>

<B>%!</B> -- Pop one, logical NOT, push 
truth.<P>

<B>%A</B> -- Pop two, logical AND, push 
truth.<P>

<B>%O</B> -- Pop two, logical OR, push truth.<P>

<B>%c</B> -- Pop one, output it in character form.<P>

<B>%l (percent-ell)</B> -- Pop a string, calculate 
and push the length.<P>

<B>&$149;%[[:]flags][width[.precision]][doxXs]</B> -- Works 
as a limited printf(3S). Pop and print formatted. The
flags 
are `-' for left justification within the width; `+'

for forcing all numeric values to have a sign character;
a space character 
for forcing a space in front of a positive number; and
`#' 
for forcing octal values to output with a leading &quot;0&quot;
and 
hexadecimal values to output with a leading &quot;0x&quot;
or &quot;0X&quot;. 
The flags are optional, but if `-' or `+' are used,

a colon (:) must precede them, making %:- and %:+ 
to prevent confusion with the %- and %+ operators. 
(Of course, the colon makes them look like funny faces
with strange 
hats.) The width and precision are optional. Width specifies
a minimum 
field width within which the value, if shorter, will
be right justified. 
Precision must always be preceded with a period. It
specifies the 
minimum number of digits to be output for numbers and
the maximum 
quantity of characters to output for strings. Finally,
one of the 
letters d (decimal), o (octal), x (hexadecimal 
with lowercase a-f), X (hexadecimal with uppercase A-F),
or 
s (string) must be specified. %5.3d pops a value and

prints it in decimal, right-justified within a 5-character
field, 
showing a minimum of three digits. %:-5.3d does the
same, 
but left justifies instead. %:-20.15s pops a string
and 
prints it left-justified in a 20-character field, but
first truncates 
it to 15 characters in length. %:-20s prints it left-justified

in a field of 20 with no truncation, and %s prints without

regard to field width.<P>

<B>%? expr %t truepart %e falsepart %;</B> -- IF...THEN...ELSE

conditional expression. The %? is the IF, followed by
an expression 
(formed of other operators) to be tested. If the condition
is true, 
whatever follows the %t (up to the %e) is executed.

If false, the %t part is skipped and whatever follows
the %e 
(up to the %;) part is executed. The %; terminates the

entire conditional expression. Another condition may
follow the %e, 
which allows yet another %t and %e combination to follow.

As many of these else conditions may follow as needed.
The last %e 
must be executable body, not another condition.<P>

<B>%%</B> -- Output a percent symbol.<P>

<B>\E</B> -- Escape character. May also use \e.<P>

<B>\n</B> -- Newline character.<P>

<B>\l</B> -- (backslash-ell) Linefeed character.<P>

<B>\r</B> -- Carriage return character.<P>

<B>\t</B> -- Backspace character.<P>

<B>\f</B> -- Formfeed character.<P>

<B>\s</B> -- Space character. This is used instead 
of simply typing a space because the space is a terminfo
command 
separator. No spaces can be embedded within a single
command.<P>

<B>^x</B> -- Control character, where x 
is any appropriate character. ^G is the ASCII bell.<P>

Remember that the difference between a binary operator

and a logical one is that the binary operator operates
on the individual 
operands' bits, while the logical one treats the operands
as truth 
values, where zero is FALSE, and anything non-zero is
TRUE. 
Also recall the Boolean logic operators NOT (reverse
the bits 
or the truth), AND (TRUE only when both operands are

true), OR (FALSE only when both operands are false),

and XOR (TRUE when the bits or truths are different).

The binary AND is used to turn off selected bits, the
binary 
OR is used to turn on bits, and the XOR is used to change

bits. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
