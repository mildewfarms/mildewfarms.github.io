<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i04: Listing 1: sukill.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1992/nov92.tar"><b class=codeListing>nov92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: sukill.c</H1><p>
<PRE>
/* ================================================= */
/*
sukill.c
Steve Isaacson

make it set-uid root
chown root filename
chmod 4755 filename
*/
/* ================================================= */

#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;
#include &lt;ctype.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;time.h&gt;
#include &lt;fcntl.h&gt;

extern int errno;
extern char *sys_errlist[];
void log_user_info(), log_date(), plog();

#define MAX_BUF  200
#define MAX_LINE 100
#define MAX_PID  100
/* no pid less than MAX_PID may be killed */

char *fn_log   = &quot;/usr/lib/sukill/sukill.log&quot;;
char *fn_deny  = &quot;/usr/lib/sukill/sukill.deny&quot;;
char *fn_allow = &quot;/usr/lib/sukill/sukill.allow&quot;;

main (argc, argv)
int argc;
char *argv[];
{
FILE *fp_log;
int i, pid, uid, signal=SIGTERM, arg_start=1;
char buf[MAX_BUF], tempbuf[MAX_BUF];
char *username, *getlogin();

if ( argc == 1 ) {
fprintf ( stderr,
&quot;usage: %s [ -signo ] pid ...\n&quot;, argv[0] );
exit(1);
}

if ((username = getlogin()) == NULL) {
fprintf(stderr, &quot;Who are you?\n&quot;);
exit(1);
}

/* is the user denied? */
if ( fexist(fn_deny) ) {
if ( in_file (username, fn_deny) ) {
fprintf(stderr, &quot;permission denied\n&quot;);
exit(1);
}
}

/* is the user allowed? */
if ( fexist(fn_allow) ) {

if ( ! in_file(username, fn_allow) ) {
fprintf(stderr, &quot;no permission\n&quot;);

exit(1);
}
}

/* open the log file */
if ( (fp_log=fopen( fn_log, &quot;a&quot;)) == NULL ) {
fprintf ( stderr,
&quot;Error reading file (%s)\n&quot;, fn_log );
exit(1);
}

/* record user name and command-line arguments */
fprintf(fp_log, &quot;\n%s: &quot;, username);
for ( i = 0; i &lt; argc; i++ )
fprintf(fp_log, &quot;%s &quot;, argv[i]);
fprintf(fp_log, &quot;\n&quot;);

log_date(fp_log);
log_user_info(fp_log);

/* was a kill signal specified? */

if ( argv[1][0] == '-' ) {
arg_start=2;
signal=atoi(&amp;argv[1][1]);
}

/* loop through the pids on the command-line */
for ( i=arg_start; i &lt; argc; i++ ) {

if ( (pid=atoi(argv[i])) &lt; MAX_PID ) {
fprintf(stderr,
&quot;bad PID number: %d\n&quot;, pid);
fprintf(fp_log, &quot;bad PID number: %d\n&quot;, pid);
continue;
}

/* log the info before the fatal blow */
plog(fp_log, pid);

if ( kill(pid, signal) != 0 ) {
perror (&quot;kill&quot;);
fprintf(fp_log, &quot;errno %d: %s\n&quot;,
errno, sys_errlist[errno]);
}
}
fclose(fp_log);
exit(0);
}

/* ================================================= */

void log_date(fp)
FILE *fp;
{
time_t now;

if (time(&amp;now)==01)
fprintf(fp,&quot;time not available\n&quot;);
else
fprintf(fp,&quot;%s&quot;, ctime(&amp;now));
}

/* ================================================= */

void log_user_info(fp)
FILE *fp;
{
char *ph=&quot;HOME&quot;, *pn=&quot;NAME&quot;, *cwd;

fprintf(fp, &quot;getlogin=%s uid=%d gid= gid=%d &quot;,
getlogin(), getuid(), getgid());

fprintf(fp, &quot;euid=%d egid=%d cuserid=%s\n&quot;,
geteuid(), getegid(), cuserid(NULL));

fprintf(fp,&quot;cwd=%s\n&quot;, getcwd((char *)NULL, 64));
fprintf(fp,&quot;$%s=%s &quot;, ph, getenv(ph));
fprintf(fp,&quot;$%s=%s\n&quot;, pn, getenv(pn));
}

/* ================================================= */
/* write pid info to log file using a pipe. the ps   */
/* flags may need to be changed to suit the local    */
/* version of ps.  If working with many different    */
/* versions, this could also be moved to a           */
/* configuration file so that you're not forced to   */
/* use the compiler to change an argument.           */

void plog(fp, pid)
FILE *fp;
int pid;
{
char cmd[50], buf[MAX_BUF];
FILE *ptr;

/* get verbose information about this pid */
sprintf(cmd, &quot;/bin/ps -lfp %d&quot;, pid);

if ((ptr=popen(cmd, &quot;r&quot;)) != NULL)
while(fgets(buf, sizeof(buf), ptr) != NULL)
fprintf(fp, &quot;%s &quot;,buf);
pclose(ptr);
}

/* ================================================= */
/* return true if string is in file.  one logname    */
/* per line.                                         */

int in_file(pstr, pfname)
char *pstr, *pfname;
{
int ret_status=0;
FILE *fp;
char line[MAX_LINE];

if ( (fp=fopen(pfname, &quot;r&quot;)) == NULL )
return(ret_status);

while ( fgets(line, MAX_LINE, fp) != NULL ) {
if ( memcmp (line, pstr, strlen(pstr))==0 ) {
ret_status=1;
break;
}
}

fclose(fp);
return(ret_status);
}

/* ================================================= */
/* return true if file exists                        */

int fexist(pfname)
char *pfname;
{
struct stat sbuf;
return ( stat(pfname, &amp;sbuf) == 0 );
}

/* ================================================= */
/* End of File */ </pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
