<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v01, i04: Listing 1</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a9.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1992/nov92.tar"><b class=codeListing>nov92.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1</H1><p>
<PRE>
############################################################################
###                   The System Performance Monitor                     ###
###                                    by,                               ###
###                                      Bill Genosa                     ###
############################################################################

### The number of concurrent users.
###-------------------------------------------------------------------------

USERS=`who | wc -l`                         ### Total number of users both
### direct and network sessions

NUSERS=`who | grep tty[a-z] | wc -l`        ### Count pseudo tty's in use

### The runqueue or number of processes in memory waiting execution.
###-------------------------------------------------------------------------

RUNQ=`sar -q | grep -v Aver | tail -2 | awk '{print $2}'`

### The percentage of time that the runqueue is occupied.
###-------------------------------------------------------------------------

RUNOCC=`sar -q | grep -v Aver | tail -2 | awk '{print $3}'`

### Process table utilization.
###-------------------------------------------------------------------------

PROC=`sar -v | grep -v Aver | tail -2 | awk '{print $2}'`  ### Gives ratio.

PROCALA=`echo $PROC | awk '-F/' '{print $1}'`              ### Entries used.

### File table utilization.
###-------------------------------------------------------------------------

FILE=`sar -v | grep -v Aver | tail -2 | awk '{print $6}'`  ### Gives ratio.

FILEALA=`echo $FILE | awk '-F/' '{print $1|}'`             ### Entries used.

### Memory utilization.
###-------------------------------------------------------------------------

MEM=`sar -r | grep -v Aver | tail -2 | awk '{print $2}'`   ### Free pages.

SWAP=`sar -w | grep -v Aver | tail -2 | awk '{print $4}'`  ### Swaps/sec.

SWCH=`sar -w | grep -v Aver | tail -2 | awk'{print $6}'`   ### Processes
### switched.

FLT=`sar -p | grep -v Aver | tail -2 | awk '{print $2}'`   ### Address page
### faults.

### Disk cache buffer utilization.
###-------------------------------------------------------------------------

RCACHE=`sar -b | grep -v Aver | tail -2 | awk '{print $4}'` ### Read hits.

WCACHE=`sar -b | grep -v Aver | tail -2 | awk '{print $7}'` ### Write hits.

### Terminal and printer activity.
###-------------------------------------------------------------------------

REC=`sar -y | grep -v Aver | tail -2 | awk '{print $2}'`   ### Raw char's
### received.
XMT=`sar -y | grep -v Aver | tail -2 | awk '{print $4}'`   ### Raw char's
### transmitted.

### Network interface statistics.
###-------------------------------------------------------------------------

NETXMT=`nistat -b 0 | grep &quot;Packets transmitted&quot; | awk '{print $5}'`

NETCOL=`nistat -b 0 | grep &quot;Transmit collisions&quot; | awk '{print $3}'`

NETROC=`echo &quot;$NETCOL*100/$NETXMT&quot; | bc`  ### Collisions multiplied by 100
### and divided by the number
### of packets that were xmitted
### equals the rate of collision.
nistat -c &gt; /dev/null                     ### Clear all ni statistics.

### Clear the screen and output the information to a terminal.
###-------------------------------------------------------------------------

tput clear &gt; /dev/tty22                   ### Clear the screen

echo &quot;\n&quot;
echo &quot;  T H E   S Y S T E M   P E R F O R M A N C E   M O N I T O R&quot;
echo &quot;\n&quot;
echo This report was generated at `date`.
echo There is a total of $USERS logged into the system.
echo There are $NUSERS logged in across the network.
echo There are $RUNQ runnable jobs in memory waiting for the CPU.
echo The runqueue is occupied $RUNOCC percent of the time.
echo The process table utilization is $PROC.
echo The file table utilization is $FILE.
echo The number of free memory pages is $MEM.
echo There are $SWAP pages\/sec of memory being swapped to disk.
echo There are $SWCH processes being switched.
echo There are $FLT address translation faults.
echo The disks are hitting cache $RCACHE percent on read operations.
echo The disks are hitting cache $WCACHE percent on write operations.
echo There are $REC raw characters\/sec being received from terminals.
echo There are $XMT characters\/sec being xmitted to terminals and printers.
echo The network has a $NETROC percent rate of collision.

### Alert the System Administrator if thresholds are exceeded.
###-------------------------------------------------------------------------

if [ $PROCALA -ge 800 ]                ### Process table configured for 850.
then
echo Message from the System Performance Monitor at `date`. &gt; /dev/console
echo The process table utilization is $PROC.                &gt; /dev/console
echo ^G^G^G^G^G                              &gt; /dev/console ### ^G = bell.
fi

if [ $FILEALA -ge 1600 ]               ### File table configured for 1600.

then
echo Message from the System Performance Monitor at `date`. &gt; /dev/console
echo The file table utilization is $FILE.           &gt; /dev/console
echo ^G^G^G^G^G                             &gt; /dev/console  ### ^G = bell.
fi

if [ $MEM -le 50 ]                     ### GPGSLO is configured for 25.
then
echo Message from the System Performance Monitor at `date`. &gt; /dev/console
echo The number of free memory pages is $MEM.               &gt; /dev/console
echo ^G^G^G^G^G                             &gt; /dev/console  ### ^G = bell.
fi

if [ $NUSERS -ge 54 ]                  ### Maximum TCP sessions is 64.
then
echo Message from the System Performance Monitor at `date`. &gt; /dev/console
echo There are $NUSERS logged in across the network.        &gt; /dev/console
echo ^G^G^G^G^G                             &gt; /dev/console  ### ^G = bell
fi

### Sar is set to run every 10 minutes on this machine.  Set the
### Performance Monitor to sleep 10 minutes between executions.
###-------------------------------------------------------------------------

sleep 600

exec /usr/admin/progs/sysperfmon &gt; /dev/tty22

###------------------------------- E N D -----------------------------------</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
