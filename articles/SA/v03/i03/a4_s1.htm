<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i03:  Sidebar: About whattime.c</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><span class=navbarLink><a href="a4_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a4_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1994/may94.tar"><b class=codeListing>may94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: About whattime.c</H1><p>
<P>
The program whattime.c (Listing 1) takes sets of numbers
from 
the command line and interprets them as seconds elapsed
from the epoch 
date. The ctime() function does the interpreting. The
third 
parameter to the strtol() function, a zero, represents
the 
radix used to interpret the command line numbers. This
radix lets 
you type a regular decimal number, but if you type a
leading zero 
the program will take your number as octal. If you type
a leading 
0x instead, the number is hexadecimal. You may type
a leading 
minus sign to represent negative numbers, even in front
of octal or 
hexadecimal numbers.<P>

Try whattime 0 to see the epoch start date. Unless you're

on Greenwich Mean Time, you'll see a different date
and time than 
the standard midnight, Jan 1, 1970 epoch. For instance,
if you're 
on Pacific Standard Time, you'll see Wed Dec 31 16:00:00
1969, eight 
hours earlier. If you're on Eastern Standard Time, you'll
see the 
time five hours earlier. In other words, the time is
always corrected 
to your local time zone. This correction has a side
effect: the meaningful 
minimum and maximum values allowed are different from
what the 32 
bits allow for the time range. If you're west of the
Prime Meridian 
(GMT) the minimum is smaller by the amount of hours
west you are, 
but the maximum doesn't change. If you're east, the
maximum is smaller 
by the amount of hours east you are. For example, Pacific
Standard 
Time is eight hours west (TZ=PST8), so the minimum is
28,800 
seconds shorter (-2,147,454,848), while Middle (or Central)
European 
Time is one hour east (TZ=MET-1), so the maximum is
3,600 
seconds shorter (2,147,480,047).<P>

To see the GMT dates used in this article you must set
your TZ 
environment variable to GMT. If you're using Bourne
Shell (sh) 
or Korn Shell (ksh), you can type the set command 
to see your environment variable settings. If you're
using C-Shell 
(csh), type env instead. If you have lots of environment

variables, you can type echo $TZ in any of the shells
to see 
only the TZ variable. Then, sh or ksh users 
should type TZ=GMT; export TZ, while csh users should

type setenv TZ GMT. When you're finished experimenting
with 
the whattime program, you can reset TZ to your usual

setting. (The /etc/TIMEZONE file has the standard setting

for your system.) Don't forget to export if you use
sh 
or ksh. If you simply logout, the TZ variable will 
be restored to its normal setting from the /etc/TIMEZONE
file 
the next time you login. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
