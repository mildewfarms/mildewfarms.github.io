<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i03: Listing 2: Remote DCL (rdcl)program</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1994/may94.tar"><b class=codeListing>may94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: Remote DCL (rdcl)program</H1><p>
<PRE>
/*====================================================
AUTHOR: Dave Brillhart
FILE:   rdcl.c
-----------------------------------------------------
This C program will allow a DECnet capable UNIX
host to execute a remote DECnet object much like
the &quot;rsh&quot; command available via TCP/IP. This code
can execute a single DCL command (batch) or a series
of interactive commands. In interactive mode, a
blank line will terminate the program.
-----------------------------------------------------
Compile this program on an Ultrix host using:
# cc rdcl.c -ldnet -o rdcl
-----------------------------------------------------
Use this program as follows (authenication depends
on proxey setup):
# rdcl &lt;nodename&gt;[/&lt;username&gt;/[&lt;password&gt;]] [cmd]
====================================================*/

/*--------------------------------------------------*/
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;        /* dnet_conn &amp; select */
#include &lt;sys/socket.h&gt;                /* dnet_conn */
#include &lt;netdnet/dn.h&gt;                /* dnet_conn */
#include &lt;sys/time.h&gt;                     /* select */
/*--------------------------------------------------*/
#define BUFSIZE   2048    /* read/write buffer size */
#define READWAIT  3.0    /* read timeout in seconds */
#define OBJECT    &quot;dnet_cmd&quot;  /* DECnet object name */
#define NODESIZE  16   /* max DECnet node name size */
#define E_F       '\004'               /* EOF == ^D */
/*--------------------------------------------------*/
int main(argc,argv)
int argc; char *argv[];
{
int sock;                /* socket for connection */
char node[NODESIZE];          /* DECnet node name */
int i;                      /* local loop counter */
char buff[BUFSIZE];            /* buffer for data */

if (argc &lt; 2) {
printf(&quot;Usage: %s nodename [cmd]\n&quot;,argv[0]);
exit(1);
}
/*------------------------------------------------*/
/* Connect with the remote DECnet object. These   */
/* 'dnet_conn' and 'nerror' calls are the only    */
/* ones that depend on the &quot;dnet&quot; library         */
/*------------------------------------------------*/
strcpy(node,argv[1]);
if ((sock=dnet_conn(node,OBJECT,0,0,0,0,0)) &lt; 0) {
nerror(argv[0]);         /* DECnet error mapper */
exit(1);
}
/*------------------------------------------------*/
/* If ARGC &gt;=3 then a batch command was issued.   */
/* If ARGC &lt; 3 then interactive mode is desired.  */
/*------------------------------------------------*/
buff[0] = '\0';   /* initialize buffer for strcat */
if (argc &gt;= 3) {   /* construct the batch command */
for (i=3; i&lt;=argc; i++) {
strcat(buff,argv[i-1]);      /* append tokens */
if (i != argc) strcat(buff,&quot; &quot;); /* insert WS */
}
execute_batch_cmd(sock,node,buff,'b');
}
else        /* prompt loop - interactive commands */
while(1) {
printf(&quot;\nEnter Command: &quot;); gets(buff);
if (execute_batch_cmd(sock,node,buff,'i') &lt; 0)
break;
}
/*------------------------------------------------*/
/* Finished - Close network connection and exit   */
/*------------------------------------------------*/
puts(&quot;Exiting...\n&quot;);
close(sock);
exit(0);
}

/*--------------------------------------------------*/
/* Execute this single VMS command, close the       */
/* connection, and terminate.                       */
/*--------------------------------------------------*/
int execute_batch_cmd(sock,node,buff,mode)
int sock; char *node,*buff,mode;
{
int len;                        /* length of data */
int selRtn;            /* return value for select */
char EOFstr[2];             /* EOF str for socket */

sprintf(EOFstr,&quot;%c%c&quot;,E_F,'\0');

if ((len=strlen(buff)) &lt;= 0) { /* empty - snd EOF */
strcpy(buff,EOFstr); len=1;
}
else
printf(&quot;\nSENDING CMD: %s to %s\n&quot;,buff,node);
if(write(sock,buff,len) &lt; 0) {
perror(&quot;Error: can't send cmd across network&quot;);
return(-1);
}
if (mode == 'b') write(sock,EOFstr,1); /* snd EOF */

/*------------------------------------------------*/
/* Read data coming back from the VMS host        */
/*------------------------------------------------*/
do {
selRtn = config_select(sock);
switch(selRtn) {
case -1:                     /* select failed */
printf(&quot;Error: select failed.\n&quot;);
return(-2);
case 0:                   /* socket timed out */
printf(&quot;Warning: select timed out.\n&quot;);
return(-3);
default:          /* socket ready for read... */
if ((len=read(sock,buff,BUFSIZE)) &lt; 0) {
perror(&quot;Error: can't read from network&quot;);
return(-4);
}
buff[len]='\0'; /* return string needs null */
if (strcmp(buff,&quot;EOC&quot;) == 0 &amp;&amp; mode == 'i')
return(0);     /* return for next command */
if (strcmp(buff,&quot;EOC&quot;) != 0 &amp;&amp; len &gt; 0)
puts(buff);    /* print appropriate lines */
}
} while (len &gt; 0);
return(-5);
}

/*--------------------------------------------------*/
/* configure &quot;select&quot; for a short timeout and have  */
/* it watch the socket file descriptor for activity */
/*--------------------------------------------------*/
int config_select(int socket)
{
struct timeval timer;  /* timeout struct - select */
fd_set rset;    /* file descriptor set for select */

timer.tv_sec = READWAIT; timer.tv_usec = 0.0;
FD_ZERO(&amp;rset); FD_SET(socket,&amp;rset);

return(select(getdtablesize(),&amp;rset,0,0,&amp;timer));
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
