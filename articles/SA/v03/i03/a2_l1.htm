<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i03: Listing 1: stat.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a2_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a2_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a2_l7.htm">Listing 7</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l8.htm">Listing 8</a></span></td>
		<td><span class=navbarLink><a href="a2_l9.htm">Listing 9</a></span></td>
		<td><span class=navbarLink><a href="a2_l10.htm">Listing 10</a></span></td>
		<td><span class=navbarLink><a href="a2_l11.htm">Listing 11</a></span></td>
		<td><span class=navbarLink><a href="a2_l12.htm">Listing 12</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l13.htm">Listing 13</a></span></td>
		<td><span class=navbarLink><a href="a2_l14.htm">Listing 14</a></span></td>
		<td><a href="../../../../source/SA/1994/may94.tar"><b class=codeListing>may94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: stat.c</H1><p>
<PRE>
/* stat.c */

/* Copyright 1994 by Steven G. Isaacson */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/sysmacros.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include &lt;pwd.h&gt;
#include &lt;grp.h&gt;

#ifndef TRUE
#define TRUE 1
#define FALSE 0
#endif

static char Sccsid[]=&quot;@(#) stat.c  01/31/94 stevei&quot;;

char *h[] = {
&quot;    -     Read filenames from stdin&quot;,
&quot;    -F [filename]   file containing list of filenames&quot;,
&quot;    -x    Default output: mode nlink uid gid size mtime name&quot;,
&quot;    -n    Print name&quot;,
&quot;    -p    Look up user and group names (default prints uid and gid)&quot;,
&quot;    -i    Inode number&quot;,
&quot;    -d    ID of device containing a directory entry for this file&quot;,
&quot;    -D    ID of device: defined for character/block special files&quot;,
&quot;    -l    Number of links&quot;,
&quot;    -u    User ID of the file's owner&quot;,
&quot;    -g    Group ID of the file's group&quot;,
&quot;    -s    File size in bytes&quot;,
&quot;    -o    File mode [see mknod(2)]          -O decimal value&quot;,
&quot;    -a    Time of last access               -A decimal value&quot;,
&quot;    -m    Time of last data modification    -M decimal value&quot;,
&quot;    -c    Time of last file status 'change' -C decimal value&quot;,
&quot;    -t    Show all three times&quot;,
&quot;    -w    Print no extra white space&quot;,
#ifdef S_IFLNK
&quot;    -L    Print symbolic link name&quot;,
#endif
&quot;    -h    This help page&quot;,
'\0' };

char *usage_str=&quot;usage: stat [-args] [filename(s)|-]&quot;;

int mode=FALSE;       /* o */
int mode_dec=FALSE;   /* O */
int ino=FALSE;        /* i */
int dev=FALSE;        /* d */
int rdev=FALSE;       /* D */
int nlink=FALSE;      /* l */
int uid=FALSE;        /* u */
int gid=FALSE;        /* q */
int size=FALSE;       /* s */
int atime=FALSE;      /* a */
int Atime=FALSE;      /* a */

int mtime=FALSE;      /* m */
int Mtime=FALSE;      /* m */
int xctime=FALSE;     /* c */
int xCtime=FALSE;     /* c */
int name=FALSE;       /* n */
int lkupname=FALSE;   /* p */
int symlnkname=FALSE; /* L */
int showt=FALSE;      /* t */
int nwht=FALSE;       /* w */

#define DEFAULT_OUTPUT mode=nlink=uid=gid=size=\
mtime=name=lkupname=TRUE;

main(argc, argv)
int argc;
char *argv[];
{
int i;
extern int optind;
extern char *optarg;
char *options=&quot;oOidDlugsaAmMcCxhn?F:Lptw&quot;;
int c, errflg=0;
char stdinfn[256];
FILE *stdinfp;

stdinfn[0] = '\0';

if (argc == 1) {
fprintf(stderr, &quot;%s\n&quot;, usage_str);
exit(1);
}

/* default same as -x */
if ( argv[1][0] != '-' || (argv[1][0] == '-' &amp;&amp; ! argv[1][1]) )
DEFAULT_OUTPUT ;

while ((c=getopt(argc, argv, options)) != EOF) {

switch (c) {
case 'x':
DEFAULT_OUTPUT ;
break;

case 'L':
symlnkname=TRUE;
break;

case 'o':
mode=TRUE;
break;

case 'O':
mode_dec=TRUE;
break;

case 't':
showt=TRUE;
break;

case 'i':
ino=TRUE;
break;

case 'd':
dev=TRUE;
break;

case 'D':
rdev=TRUE;
break;

case 'l':
nlink=TRUE;
break;

case 'u':
uid=TRUE;
break;

case 'g':
gid=TRUE;
break;

case 's':
size=TRUE;
break;

case 'a':
atime=TRUE;
break;

case 'A':
Atime=TRUE;
break;

case 'm':
mtime=TRUE;
break;

case 'M':
Mtime=TRUE;
break;

case 'c':
xctime=TRUE;
break;

case 'C':
xCtime=TRUE;
break;

case 'n':
name=TRUE;
break;

case 'p':
lkupname=TRUE;
break;

case 'F':
strcpy(stdinfn, optarg);
break;

case 'w':
nwht=TRUE;
break;

case '?':
case 'h':
default:
errflg++;
break;
}

if (errflg) {
help();
exit(0);
}
}

if (stdinfn[0]) {
/* input is coming from a file */

if ((stdinfp = fopen(stdinfn, &quot;r&quot;)) == NULL) {
fprintf ( stderr,
&quot;*** could not open: %s\n&quot;, stdinfn );
exit ( 2 );
}

stat_input(stdinfp);
}
else {
/* input is coming from the command-line or
stdin */

for (i=optind; i &lt; argc; i++) {
if ( argv[i][0] == '-' )
stat_input(stdin);
else
stat_fn(argv[i]);
}
}
exit(0);
}

/* ================================================= */
/* display help page                                 */

help()
{
int i;

fprintf(stderr, &quot;%s\n&quot;, usage_str);
for (i=0; h[i]; i++)
fprintf(stderr, &quot;%s\n&quot;, h[i]);

fprintf(stderr, &quot;\n&quot;);
}

/* ================================================= */
/* get the list of files to stat from a file.        */

#define MAX_FN 1024

stat_input(fp)
FILE *fp;
{
char buf[MAX_FN], *retval;

while ((retval=fgets(buf, MAX_FN, fp)) != (char *)EOF
&amp;&amp; retval != NULL ) {
buf[strlen(buf) - 1] = '\0';
stat_fn(buf);
}
}

/* ================================================= */
/* make the stat (or lstat) system call.             */

#define SYM_LN_BUF 256

stat_fn(fn)
char *fn;
{
struct stat sbuf;
struct passwd *ppass;
struct group  *pgroup;
char *pc;
int cc;
char buf[SYM_LN_BUF];

#ifdef S_IFLNK
if ( lstat(fn, &amp;sbuf )) {
#else
if (  stat(fn, &amp;sbuf )) {
#endif
perror(fn);
return;
}

if (mode) {

#ifdef S_IFLNK
if ((sbuf.st_mode &amp; S_IFMT) == S_IFLNK)
/* symbolic link */
printf(&quot;l&quot;);
#else
if ( FALSE )
;
#endif
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFDIR)
/* directory */
printf(&quot;d&quot;);
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFCHR)
/* character special device */
printf(&quot;c&quot;);
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFBLK)
/* block special device */
printf(&quot;b&quot;);
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFREG)
/* regular file */
printf(&quot;-&quot;);
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFIFO)
/* fifo */
printf(&quot;p&quot;);

#ifdef S_INSHD
else if ((sbuf.st_mode &amp; S_IFMT) == S_INSHD)
/* shared memory */
printf(&quot;m&quot;);
#endif

#ifdef S_IFNAM
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFNAM)
/* name special entry */
printf(&quot;n&quot;);
#endif

#ifdef S_INSEM
else if ((sbuf.st_mode &amp; S_IFMT) == S_INSEM)
/* semaphore */
printf(&quot;s&quot;);
#endif

#ifdef S_IFSOCK
else if ((sbuf.st_mode &amp; S_IFMT) == S_IFSOCK)
/* socket */
printf(&quot;s&quot;);
#endif
else
/* don't know! */
printf(&quot;?&quot;);

if ((sbuf.st_mode &amp; S_IREAD) ==  S_IREAD)
/* 00400 */ printf(&quot;r&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; S_IWRITE) ==  S_IWRITE )
/* 00200 */ printf(&quot;w&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; S_IEXEC) ==  S_IEXEC &amp;&amp;
(sbuf.st_mode &amp; S_ISUID) ==  S_ISUID)
/* 00100 */ printf(&quot;s&quot;);
else if ((sbuf.st_mode &amp; S_IEXEC) ==  S_IEXEC)
printf(&quot;x&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00040) ==  00040)
/* 00400 */ printf(&quot;r&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00020) ==  00020)
/* 00200 */ printf(&quot;w&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00010) ==  00010 &amp;&amp;
(sbuf.st_mode &amp; S_ISGID) ==  S_ISGID)
printf(&quot;s&quot;);
else if ((sbuf.st_mode &amp; 00010) ==  00010)
/* 00100 */ printf(&quot;x&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00004) ==  00004)
/* 00400 */ printf(&quot;r&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00002) ==  00002)
/* 00200 */ printf(&quot;w&quot;);
else
printf(&quot;-&quot;);

if ((sbuf.st_mode &amp; 00001) ==  00001)
/* 00100 */ printf(&quot;x&quot;);
else
printf(&quot;-&quot;);

printf(&quot; &quot;);
}

if (mode_dec) printf(&quot;%hu &quot;, sbuf.st_mode);

if (ino) printf(&quot;%d &quot;, sbuf.st_ino);
if (dev)
printf(&quot;%d,%d &quot;,
major(sbuf.st_dev), minor(sbuf.st_dev));
if (rdev)
printf(&quot;%d,%d &quot;,
major(sbuf.st_rdev), minor(sbuf.st_rdev));
if (nlink) {
nwht ? printf(&quot;%d &quot;, sbuf.st_nlink) :
printf(&quot;%2d &quot;, sbuf.st_nlink);
}

if (uid) {
if (lkupname) {
ppass=(struct passwd *)getpwuid(sbuf.st_uid);
if ( ppass ) {
nwht ? printf(&quot;%s &quot;, ppass-&gt;pw_name) :
printf(&quot;%-8s &quot;, ppass-&gt;pw_name);
}
else
printf(&quot;%d &quot;, sbuf.st_uid);
}
else
printf(&quot;%d &quot;, sbuf.st_uid);
}
if (gid) {
if (lkupname) {
pgroup=(struct group *)getgrgid(sbuf.st_gid);
if (pgroup) {
nwht ? printf(&quot;%s &quot;, pgroup-&gt;gr_name) :
printf(&quot;%-8s &quot;, pgroup-&gt;gr_name);
}
else
printf(&quot;%d &quot;, sbuf.st_gid);
}
else
printf(&quot;%d &quot;, sbuf.st_gid);
}
if (size) {
nwht ? printf(&quot;%d &quot;, sbuf.st_size) :
printf(&quot;%8d &quot;, sbuf.st_size);
}

if (atime) { /* time of last access */
pc=ctime(&amp;sbuf.st_atime);
pc[strlen(pc) - 1]='\0';
printf(&quot;%s &quot;, pc);
}
if (Atime) printf(&quot;%d &quot;, sbuf.st_atime);
if (mtime) { /* time of last data modification */
pc=ctime(&amp;sbuf.st_mtime);
pc[strlen(pc) - 1]='\0';
printf(&quot;%s &quot;, pc);
}
if (Mtime) printf(&quot;%d &quot;, sbuf.st_mtime);
if (xctime) { /* time of last file status 'change' */
pc=ctime(&amp;sbuf.st_ctime);
pc[strlen(pc) - 1]='\0';
printf(&quot;%s &quot;, pc);
}
if (xCtime) printf(&quot;%d &quot;, sbuf.st_ctime);

if (name)
printf(&quot;%s&quot;, fn);

#ifdef S_IFLNK
if (symlnkname) {

cc=readlink(fn, buf, SYM_LN_BUF);
buf[cc]='\0';
printf(&quot; -&gt; %s&quot;, buf);
}
#endif

if (showt) {

printf(&quot;\n&quot;);
pc=ctime(&amp;sbuf.st_atime);
pc[strlen(pc) - 1]='\0';
printf(&quot;access time: %s\n&quot;, pc);

pc=ctime(&amp;sbuf.st_mtime);
pc[strlen(pc) - 1]='\0';
printf(&quot;   mod time: %s\n&quot;, pc);

pc=ctime(&amp;sbuf.st_ctime);
pc[strlen(pc) - 1]='\0';
printf(&quot;change time: %s&quot;, pc);
}

printf(&quot;\n&quot;);
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
