<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i03: Listing 2: menu</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1994/may94.tar"><b class=codeListing>may94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: menu</H1><p>
<PRE>
:
# Main Login Menu Template - Listing 2
# Fred Lenk 11/5/93
#
# The overall goal of this login menu, and the way it is run from the .profile
# is to never give the rsh customer access to the Unix command line.  This
# provides a good deal of security as well as &quot;protecting&quot; users untrained
# in Unix computers.  We essentially give the customers pushbutton access to
# the utilities they are authorized to use.
#
#
# This menu is run after executing the user's $HOME/.profile.  In the case of
# restricted shell (rsh) users, the menu is located in the $HOME/bin directory
# as $HOME/bin/.menu and is linked to a master copy of the login menu named
# /usr/public/menu.  The menu is started as the last action in the .profile
# with the login PID as the only parameter:
#   exec $HOME/bin/.menu $$.
# On Oracle DB hosts, this login menu is started as:
#   exec /usr/lbin/Xoraenv $HOME/bin/.menu $$
# where Xoraenv is Oracle's oraenv customized for the particular host.
# The PID is used to insure that when the user leaves or otherwise is detached
# from the host, the user's login process is killed.  This prevents
# unauthorized access to the command line, and deminishes the possibility
# that the next person to attach to the tty port will not accidentally
# attach to the earlier user's session.
#
# The echoto utility may be used to maintain login and program usage logs.
# Example of recording usage:
#   echoto $record_use &quot;ProgramID start $LOGNAME `ftim` `date '+%D %T'`&quot;
#   begtim=`ftim`
#   Run_Unix_Command_Here
#   endtim=`ftim`
#   diftim=`expr $endtim - $begtim`
#   echoto $record_use &quot;ProgramID stop $LOGNAME $endtim `date '+%D %T'` SECONDS: $diftim&quot;
# Suggestion: Always make sure each record added to the $record_use log file
# has the same number of parameters always in the exact same positions.  This
# will allow the SysAdmin to easily &amp; efficiently retrieve all kinds of data.
#
# ANNOUNCEMENTS: This script expects that announcements will be kept in
# /usr/public/msgs as numbered files (1.msg, 2.msg, ... n.msg).  The file
# /usr/public/msgs/describe is a short file listing the available messages.
#     1) Announcement about this
#     2) Announcement about that
#     3) Announcement about the other
# The selection number corresponds to the file name.  As provided in this
# script, the number of announcements is limited to about 20.
#
###############################################################################
# Custom C utilities used by this program:                                    #
#                                                                             #
# ftim     : Displays time in seconds since 1/1/70 00:00:00 GMT + TZ.         #
#          : Used when recording time to log files.  Such time stamps are     #
#          : easier to manipulate and compare than those produced by `date`.  #
#          : See fcvtim and fgotim for conversion utilities.                  #
# menucat  : a safe restricted version of Unix's cat which hard-codes         #
#          : directories from which files may be read.  Only needed for       #
#          : rsh users.
# termlock : password protected terminal locker which inactivates system      #
#          : idle-out timer, but provides 1 hour timeout.                     #
# echoto   : utility which substitutes for &gt;&gt; which is illegal in rsh. Only   #
#          : needed for rsh users.
# pager    : A simple to use, custom, read-only file browser, with download   #
#          : capabilities.  Use any secure file viewer available on host.     #
###############################################################################
#                                                                             #
###############################################################################
#ESTABLISH GLOBAL VARIABLES AND DO OTHER MENU INITIALIZATION ROUTINES HERE
#
PID=$1 # passed from SCO rsh user's .profile used for sure kill on exit
version=&quot;11/04/93&quot;
sttystring=`stty -g` #get stty mode while still good
public=&quot;/usr/public&quot;
msgs=&quot;$public/msgs&quot;
#record_use is db flat file to record logins, program usage.  Must be in
#  a directory writeable by all
#record_use=&quot;/usr/spool/uucppublic/record_use&quot;  #production log file
record_use=&quot;/tmp/menulog.log&quot;  #test &amp; debug
#Record user's login (Main Login Menu access) time
logintim=`ftim`
echoto $record_use &quot;LOG IN $LOGNAME $logintim `date '+%D %T'`&quot;
#Save info about user's last Main Login Menu access.
rm .termtype
echoto .termtype &quot;$logintim $TERM&quot;

echo  &quot; LOGIN MENU COMING UP `fcvtim $logintim`.  Just a moment...&quot;

bold=`tput smso`
norm=`tput sgr0`
blink=`tput blink`
uline=`tput smul`
reverse=`tput rev`
back=`tput rmso`
#User has terminal which recognizes ANSI color commands
#  The TERM &quot;ansicolor&quot; is a ficticious term type.  SysAdmin substitutes
#  appropriate TERM(s) here
[ &quot;$TERM&quot; = &quot;ansicolor&quot; ] &amp;&amp; {
bold=`echo -n &quot;\033[1;33;44m&quot;`  # yellow on blue
norm=`echo -n &quot;\033[1;37;45m&quot;`  # white on pink
back=`echo -n &quot;\033[45m&quot;`       # pink background
reverse=`echo -n &quot;\033[1;37;41m&quot;`  # white on red
#uline=`echo -n &quot;\033[1;33;42m&quot;`  # yellow on green
#uline=`echo -n &quot;\033[0;31;47m&quot;`  # red on white
uline=`echo -n &quot;\033[0;34;47m&quot;`  # blue on white
}

###############################################################################
#     TO MINIMIZE MAINTENANCE, AVOID CREATING NEW GLOBAL VARIABLES OR MENU   #
#     INITIALIZATION ROUTINES PAST THIS POINT.                                #
###############################################################################
# AS YOUR PROJECT REQUIRES MORE AND MORE UTILITIES, ADD SHORT DESCRIPTIONS
# TO THIS MAIN MENU DISPLAY.
#
MainMenu () {
echo
echo &quot;${bold}                                MAIN LOGIN MENU                                &quot;
echo &quot;                                                                               &quot;
echo &quot;${bold}  `date`                                     v.${version}  ${norm}&quot;
echo &quot;
a)                  n)                  A)                  N) NEWS
b)                  o)                  B)                  O)
c)                  p)                  C)                  P)
d)                  q)                  D)                  Q)
e)                  r)                  E)                  R)
f)                  s)                  F)                  S) USER STATUS
g)                  t)                  G)                  T) TERMLOCK
h)                  u)                  H) ANNOUNCEMENTS    U)
i)                  v)                  I)                  V)
j)                  w)                  J)                  W)
k)                  x) EXIT             K)                  X) EXIT
l)                  y) HELP             L)                  Y)
m)  z) REDISPLAY        M)                  Z) CHG PASSWORD
n)  &quot;

echo &quot;Number of Announcements =`ls ${msgs}/*.msg | wc -l|awk '{print \&quot; \&quot;$1}'`&quot;

gotnews=`news -s`
if [ &quot;$gotnews&quot; = &quot;No news.&quot; ]
then
echo -n
#dont do anything
else
echo &quot;${blink}${gotnews}${norm}  Use selection \&quot;N\&quot; to read News.&quot;
fi
echo &quot;Please enter selection, then press &lt;ENTER&gt;:&quot;
echo &quot; &gt; ${reverse}     \b\b\b\b\b\c&quot;

}
#end Main Login Menu display

##############################################################################
# AS YOU ADD MORE UTILITIES TO THE MAIN MENU ABOVE, YOU SHOULD ADD HELP
# INFORMATION FOR EACH UTILITY.  BRIEFLY DESCRIBE WHATEVER IT IS THE USER
# NEEDS TO KNOW IN ORDER TO USE THE COMMAND.
#
RunHelp() {
echo &quot;On which command would you like assistance? &gt;${bold} ${norm}\b\c&quot;
read cmd
echo $cmd
clear
echo;echo
case &quot;${cmd}&quot;
in

&quot;x&quot; | &quot;X&quot; | &quot;exit&quot;)
echo &quot;EXIT the Login Menu and terminate your login session.&quot;
;;

&quot;y&quot;)
echo &quot;HELP\n&quot;
echo &quot;Use this selection if you need more information about any of the selections
echo &quot;available from the Login Menu.\n&quot;
echo &quot;If you are having problems running your programs, use the Announcements&quot;
echo &quot;selection and select the announcement regarding Program Problems.\n&quot;
echo &quot;The Trouble Desk telephone is 800/555-1212.&quot;
&quot;
;;

&quot;z&quot;)
echo &quot;REDISPLAY\n&quot;
echo &quot;Refresh Login Menu screen when disturbed by other programs.&quot;
echo &quot;or bad datacommunications.&quot;
;;

##### UPPER CASE SELECTIONS GO HERE... #####

&quot;H&quot;)
echo &quot;ANNOUNCEMENTS\n&quot;
echo &quot;Read system messages.  You should always check to see if there&quot;
echo &quot;are any new messages to make sure you know about special&quot;
echo &quot;service problems, new features, etc.  Announcements are&quot;
echo &quot;removed and updated periodically.&quot;
;;

&quot;N&quot;)
echo &quot;NEWS FACILITY\n&quot;
echo &quot;This selection allows the user to read messages from the&quot;
echo &quot;Database and System Administrators.  These messages are of a&quot;
echo &quot;nature that they only need to be read once.&quot;
;;

&quot;S&quot;)
echo &quot;USER STATISTICS\n&quot;
echo &quot;Tell the current login terminal type, current login name and&quot;
echo &quot;time user logged in, current time, who else is currently logged&quot;
echo &quot;in.&quot;
echo
;;

&quot;T&quot;)
echo &quot;TERMLOCK\n&quot;
echo &quot;Lock your terminal so you can leave it securely for a few minutes.&quot;
echo &quot;Standard computer security requires that you never leave your&quot;
echo &quot;terminal while it is logged in, unless you can lock it with a&quot;
echo &quot;password.  You must remember your password or you too will&quot;
echo &quot;not be able to access your terminal.&quot;
;;

&quot;Z&quot;)
echo &quot;CHANGE PASSWORD\n&quot;
echo &quot;Change your Unix system password.  This does not alter your&quot;
echo &quot;application database password or login.  The user is responsible&quot;
echo &quot;for remembering his own password.  The system administrator&quot;
echo &quot;does not even know your password.&quot;
;;

*)
echo &quot;\n  &lt;${cmd}&gt;   Invalid Help Selection.&quot;
;;
esac

echo
#end of HELP
}
##############################################################################
##############################################################################

##############################################################################
# THE FOLLOWING SECTION IS THE TRICKIEST.  HERE IS WHERE YOU ADD ANY UNIX
# STATEMENTS REQUIRED TO ACCOMPLISH YOUR WORK.  BE WARNED THAT IF A USER
# TERMINATES A ROUTINE, UTILITY, OR PROGRAM WITH THE UNIX DEL (char 127d),
# THIS MENU MAY ALSO TERMINATE DUE TO THE TRAP.  THIS IS A SECURITY
# PRECAUTION.
#
#
DoSomething() {

cdate=`date '+%m %d %H:%M'`
# With some routines, it may be necessary to break out of the routine
# and DoSomething() and redisplay the Main Login Menu.  In these
# cases, use &quot;break 2&quot;.
case &quot;${selection}&quot;
in

&quot;x&quot; | &quot;X&quot; | &quot;exit&quot;)
ExitMenu
exit
;;

&quot;y&quot;)
RunHelp
;;

&quot;z&quot;)
Clear
;;

&quot;N&quot;) #example showing how to record start/stop of applications
Clear
echoto $record_use &quot;DoNews start $LOGNAME `ftim` `date '+%D %T'`&quot;
begtim=`ftim`
DoNews
endtim=`ftim`
diftim=`math $endtim - $begtim`
echoto $record_use &quot;DoNews stop $LOGNAME $endtim `date '+%D %T'` SECONDS: $diftim&quot;
;;

&quot;H&quot;)
#system messages and announcements
while .
do
echo $norm
Clear
echo &quot;Current system messages are:&quot;
menucat ${msgs}/describe  #a short file listing announcements
echo -n &quot;Please type number of a message to read, or x to quit: &quot;
read ans
if [ &quot;$ans&quot; = &quot;x&quot; -o &quot;$ans&quot; = &quot;X&quot; -o &quot;$ans&quot; =
&quot;q&quot; -o &quot;$ans&quot; = &quot;&quot; ]
then
break
else
pager ${msgs}/${ans}.msg
fi
done
;;

&quot;S&quot;)
#Usefull to developers to show what's in user's environment.
Clear
echo &quot;TERM=$TERM&quot;
who -u|grep $LOGNAME|awk '{print &quot;User:&quot; $1 &quot;  TTY:&quot; $2 &quot; Since:&quot;
$3 &quot; &quot; $4 &quot; &quot; $5  &quot;  PST8PDT&quot;}'
echo &quot;Current Time: `date`&quot;
echo &quot;Ulimit: `ulimit`&quot;
echo -n &quot;Press &lt;ENTER&gt; to list environment...&quot;
read junk
env
echo -n &quot;Press &lt;ENTER&gt; to list current users...&quot;
read junk
echo &quot;CURRENT USERS:&quot;
IFS=&quot;&quot;
for i in `who|awk '{print $1&quot;\t&quot;$3&quot; &quot;$4&quot; &quot;$5}'`
do
echo &quot;\t$i&quot;
done
echo
;;

&quot;T&quot;)
Clear
echo &quot;\nThis selection will prevent others from using this terminal&quot;
echo &quot;while you are away from your terminal.  You will be asked&quot;
echo &quot;to enter a password, which you must remember.  Do you&quot;
echo -n &quot;wish to lock your terminal at this time? (y/n) &gt;&quot;
read ans
if [ &quot;$ans&quot; = &quot;y&quot; ]
then
#FLenk added following warning 7/15/92
echo &quot;\n${uline}${blink}ATTENTION:${norm}&quot;
echo &quot;A 60 minute time limitation has been incorporated into the&quot;
echo &quot;terminal lock program.  That means after 60 minutes, if&quot;
echo &quot;the terminal has not been unlocked, that terminal (and&quot;
echo &quot;the user) will be detached from the host.&quot;
echo &quot;\nPlease press &lt;ENTER&gt; to continue. \c&quot;
read junk
termlock
fi
;;

&quot;Z&quot;)
Clear
echo &quot;Change Password utility.  You must remember your new&quot;
echo &quot;password because not even the administrator will know&quot;
echo &quot;the changed password!&quot;
echo
echo &quot;You should keep the following in mind when selecting a new&quot;
echo &quot;password:  Should the system become the object of a determined&quot;
echo &quot;illegal user, in the process of cracking login/passwords,&quot;
echo &quot;he/she will try first and last names, and slight variations,&quot;
echo &quot;english language words found in the dictionary, logins &quot;
echo &quot;without passwords.  You should consider including punctuation&quot;
echo &quot;characters, upper/lower case letters.  Passwords should have&quot;
echo &quot;between 6-11 characters.  I like to use words I've found in&quot;
echo &quot;books on American Indian history.&quot;
echo &quot;\nBeginning password routine now.\n&quot;
passwd
;;

*)
echo &quot;Selection not presently implemented.&quot;
;;
esac

#end of dosomething function
}

############################################################################
############################################################################
############################################################################
#  ADDITIONAL SHELL FUNCTIONS MAY BE ADDED STARTING HERE
############################################################################
ExitMenu() {
#we get here if there is a termination of menu
echo &quot;\n\n\n&quot;
logofftim=`ftim`
usedtim=`expr $logofftim - $logintim`
echoto $record_use &quot;LOG OFF $LOGNAME $logofftim `date '+%D %T'` SECONDS: $usedtim&quot;
echo &quot;Online for $usedtim seconds, about `expr $usedtim \/ 60` minutes.&quot;
echo &quot;Login Menu Terminating.  You may disconnect from network connections&quot;
echo &quot;at this time, then terminate your PC terminal emulation if&quot;
echo &quot;necessary.&quot;
sleep 2 #8/21/92 FLenk added for datacomm delays

(sleep 2;kill -9 $PID) &amp;  # make sure login process is killed in 2 seconds
exit                      # but first exit this menu
}
##############################################################################
Clear() {
tset
echo -n &quot;$norm$back&quot;
clear
}

##############################################################################
#If there's any news, display each message indivdually.
DoNews() {

OIFS=$IFS
IFS='
'
for i in `ls -t /usr/news/* $HOME/.news_time 2&gt;&amp;1`
do
case $i
in *' not found') ;;
*/.news_time)
echo &quot;No More News.&quot;
break
;;
&quot;total*&quot;)
#do nothing for total line
;;
*)
echoto junk &quot;`news $i`&quot;
pager junk
rm junk
;;
esac
done
touch $HOME/.news_time
IFS=$OIFS
}

##############################################################################
#Insurance against rogue applications.  SCO Unix may display warning.
FixStty() {
stty $sttystring
#stty sane echoe  #prevents SCO warnings about KBM_XT
}
##############################################################################
#You can get fancy with terminals with musically programmable speakers.
MenuBeep() {
echo -n &quot;\007&quot;
} #end func
##############################################################################

##############################################################################
##############################################################################
##############################################################################
# MAIN PROGRAM LOOP - THE DRIVER FOR ALL PREVIOUS FUNCTIONS

#following trap executes the exit function for exits or bailouts.
trap  &quot;ExitMenu&quot;  1 2 3 15

while .
do
Clear
MainMenu
read selection
echo -n $norm
#echo $selection
DoSomething
FixStty   #just in case application has bombed out
echo &quot;${bold}              ***** PRESS ${blink}&lt;ENTER&gt;${norm}${bold} TO RETURN TO LOGIN
MENU *****                ${norm}\r\c&quot;
MenuBeep
read junk
done
######################################################################
#end of Menu
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
