<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i06: Listing 1: fcd--an extension to cd</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1994/nov94.tar"><b class=codeListing>nov94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: fcd--an extension to cd</H1><p>
<PRE>
#################################################################
# This logic exits .kshrc if $FCD is already defined.  It keeps
# fcd from being called by subsequent subshells (.kshrc is run
# by ksh for each subshell). Make sure that these lines come
# before the definition of fcd but after anything else you want
# called in each ksh subshell.
#################################################################
if [ $FCD ]
then
return
else
FCD=&quot;fcd&quot;
export FCD
fi

echo &quot;Loading fcd- type \&quot;fcd\&quot; for information&quot;

##################################################################
# function: addline(directory)
#----------------------------------------------------------------#
# Add line to file list for future lookup.                       #
##################################################################
addline()
{
error=0
echo &quot;Enter full path of $Newline: \c&quot;
read Fullpath
if [ -d $Fullpath ]
then
echo $Fullpath &gt;&gt; $HOME/fcd.list
Flist=$Fullpath
else
echo &quot;Sorry, can't find that directory!&quot;
error=1
fi
}

###############################################################
# function:usage
#-------------------------------------------------------------#
# Print a usage screen.                                       #
###############################################################
function usage
{
echo &quot;Usage- fcd directory&quot;
echo &quot;       fcd -e directory for extended search&quot;
echo &quot;       fcd -p to add current directory to list&quot;
echo &quot;       fcd -r to recursively scan directories under current&quot;
echo &quot;\n\n&quot;
}

#######################################################################
# function: fcd
#---------------------------------------------------------------------#
# Accept a string from the user and search for that string in Filedir.#
# &quot;cd&quot; to the found directory.                                        #
#######################################################################
function fcd
{
error=0
FileDir=$HOME/fcd.list
Duplist=$HOME/fcd.dup

###################################################################
# Print usage screen if no parameters given.
#
if [ $# = 0 ]
then
usage
return 0
fi

# Set expanded search flag.
Extend=&quot;NO&quot;

###################################################################
# Handle special cases.
#
case $1 in
&quot;-e&quot;)
###############################################################
# Toggle extended search mode.
#
if [ $# != 2 ]
then
echo &quot;Error: insufficient parameters ($#)&quot;
echo &quot;Usage: fcd -e directory&quot;
return 2
fi
Extend=&quot;YES&quot;          # Init extended search flag on
shift                 # Make 2nd parameter 1st to skip &quot;-e&quot;
;;

&quot;/&quot;)
###############################################################
# Go to root instead of searching for slash.  Slash is in every
# line of the database.
#
cd /
return 0
;;

&quot;-p&quot;)
###############################################################
# Add current directory to fcd database.  Fcd returns right
# after this switch is passed (no other parameters are
# processed).
#
CurDir=$(pwd)

#
# Don't add a duplicate if directory is already in database.
grep &quot;$CurDir\$&quot; $FileDir &gt; /dev/null
if [ $? != 0 ]
then
echo $CurDir &gt;&gt; $FileDir
return 0
else

echo &quot;Current directory $CurDir\n is already in $FileDir&quot;
return 1
fi
;;

&quot;-r&quot;)
###############################################################
# Add all directories under current directory to the database.
#
echo &quot;Scanning directories under $PWD&quot;
find $PWD -type d -print &gt;&gt; $FileDir
cat &quot;$FileDir&quot; | sort | uniq &gt; $Duplist
if [ $? = 0 ]
then
echo &quot;Sorted and cleaned up $FileDir&quot;
mv $Duplist $FileDir
fi
return 0
;;
esac

###################################################################
# Create a new database if none exists.
#
if [ ! -f $FileDir ]
then
echo &quot;Creating new $FileDir in $HOME.  It may take a while...&quot;
find $HOME -type d -print &gt; $FileDir
fi

###################################################################
# Search in extended or regular mode for directory.
#
if [ $Extend = &quot;YES&quot; ]               # search full line for match
then
grep $1 $FileDir &gt; $Duplist
else
grep $1'$' $FileDir &gt; $Duplist   # search end of line for match
fi

###################################################################
# Count the matches found.
#
lines=`wc -l $Duplist | awk '{print $1}'`

###################################################################
# Process the matches
###################################################################
case $lines in
0)
###############################################################
# No matches. Let the user update the database, if desired..
#
echo &quot;Not found- add(y/n)?\c &quot;
read ans
if [ $ans = 'y' ]
then
Newline=$1
addline $Newline
if [ $error = 1 ]
then
return 1
fi
else
return 1
fi
;;

1)
###############################################################
# One match. Assign it to the cd list.
#
Flist=`cat $Duplist`
;;
*)
###############################################################
# More than one match.  Print a list for the user.
#
awk ' { printf &quot;%2d : %s\n&quot;, NR, $0 }' $Duplist
echo &quot;Which of the above do you mean (enter number or 'q' for none)? \c&quot;
read lineno

###############################################################
# Get the line number from the user. 'q' is a special
# case to choose none.
#
if [ $lineno = 'q' ]
then
echo &quot;Removing possible duplicates from file list...&quot;
cat &quot;$FileDir&quot; | sort | uniq &gt; $Duplist
if [ $? = 0 ]
then
echo &quot;Sorted and cleaned up $FileDir&quot;
mv $Duplist $FileDir
fi
return 1
fi

###############################################################
# Make the user enter 1-lines or q.
#
while [ $lineno -gt $lines -o $lineno -lt 1 -o $lineno = 'q' ]
do

echo &quot;Valid input: 1-$lines or q.  Reenter number: \c&quot;
read lineno
done

# Do nothing if user wants to quit.
if [ $lineno = 'q' ]
then
return 1
fi

###############################################################
# Pick the directory at the line the user chooses.
#
Flist=`sed -n &quot;${lineno}p&quot; $Duplist`
;;
esac


###################################################################
# Show the user the directory chosen in case they don't
# have &quot;pwd&quot; as part of the ksh PS1.
#
echo $Flist

###################################################################
# Go to the directory chosen.  This is actually the only
# line that MUST be run in the current process for fcd to
# work.
cd $Flist 2&gt; /dev/null

###################################################################
# If cd failed, remove the defunct entry from the database.
#
if [ $? != 0 ]
then
echo &quot;Removing defunct $Flist from $FileDir&quot;
cat $FileDir | grep -v $Flist &gt; $Duplist
if [ $? = 0 ]
then
mv $Duplist $FileDir
else
echo &quot;An error occurred while editing $FileDir.  It may be damaged.&quot;
fi
fi
}

####################################################################
# Run the function the first time .kshrc is started.
fcd $1
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
