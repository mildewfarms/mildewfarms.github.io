<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i06: Listing 1: sched script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a9.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a9_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1994/nov94.tar"><b class=codeListing>nov94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: sched script</H1><p>
<PRE>
#! /bin/csh -f
#Resource scheduling system- see README.
#pvelleca Rev C 1/19/94

#SET UP THE PROPER ENVIRONMENT
source ./.schedrc

#THE NEXT (2) VARIABLES REPRESENT THE NUMBER OF RESERVABLE TIME SLOTS PER
#DAY, WHICH IS THE NUMBER OF LINES IN THE FILE '$template'.
set slots_per_day = `wc -l &lt; $template`
#CREATE A VARIABLE ARRAY WHOSE NUMBER OF ELEMENTS IS THE NUMBER OF SLOTS
#PER DAY.
set time_slots = ( `awk '{print NR}' $template` )

#CURSOR AND DISPLAY CONTROL CODES ARE USED IN THIS SCRIPT FOR
#CONTROLLING THE LOOK OF THE MENUS.  IF THESE ARE NOT WANTED,
#THEN SET TERM TO SOMETHING OTHER THAN &quot;VT100&quot;, OR COMMENT/DELETE  THEM:
# Esc[nA -&gt; &quot;^[[nA&quot; MOVE CURSOR UP n LINES.
# Esc[2K -&gt; &quot;^[[2K&quot; ERASE CURRENT LINE.
# Esc[1m -&gt; &quot;^[[1m&quot; BOLD ON.
# Esc[22m -&gt;&quot;^[[22m&quot; BOLD OFF.
if ( $TERM == &quot;vt100&quot; ) then
set up1 = &quot;[1A&quot;
set up2 = &quot;[2A&quot;
set up3 = &quot;[3A&quot;
set erase =    &quot;[2K&quot;
set boldON =   &quot;[1m&quot;
set boldOFF =  &quot;[22m&quot;
else
set up1 = &quot;&quot;
set up2 = &quot;&quot;
set up3 = &quot;&quot;
set erase =    &quot;&quot;
set boldON =   &quot;&quot;
set boldOFF =  &quot;&quot;
endif

goto INITIALIZE
AFTER_INITIALIZE:

MAIN_MENU:
clear
echo &quot;Status:  PS[${psstate}]  PR[${printer}]  RPT[${reporttype}]&quot;
echo &quot; &quot;
echo &quot;MAIN MENU&quot;
echo &quot;==== ====&quot;
echo &quot; &quot;
echo &quot;1   Add ${restype}&quot;
echo &quot;2   Delete ${restype}&quot;
echo &quot;3   List ${restype}&quot;
echo &quot; &quot;
echo &quot;4   Reserve ${restype}&quot;
echo &quot;5   Delete Reservation&quot;
echo &quot; &quot;
echo &quot;6   Printing&quot;
echo &quot; &quot;
echo &quot;0   Exit&quot;
echo &quot;&quot;
echo -n &quot;CHOICE?  &quot;
set option = $&lt;
set option = `expr &quot;$option&quot; : '\(.\)'`

switch ( $option )
case &quot;&quot;:

case 0:
case m:
case q:
case x:
case e:
exit 0
breaksw

#ADD resouce TO THE LIST OF RESOURCES, CONTAINED IN THE FILE '$resoucelist'.
case 1:
echo -n &quot;Name of ${restype}(S) to add: &quot;
set resources = $&lt;
if (`expr &quot;${resources}&quot; : '.*'` == 0 ) then
goto MAIN_MENU
endif
foreach resource ( ${resources} )
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
expr &quot;${resource}&quot; : '\(...............\)' \| &quot;${resource}&quot; &gt;&gt; ${resourcelist}
else
echo &quot;${restype} ${resource} already exists.&quot;
endif
end
sort ${resourcelist} &gt; ${resourcelist}.tmp
mv ${resourcelist}.tmp ${resourcelist}
echo &quot;Add complete...&quot;
$&lt;
breaksw

#DELETE Resource FROM resourcelist.
case 2:
echo -n &quot;Name of ${restype}(S) to delete: &quot;
set resources = $&lt;
if (`expr &quot;${resources}&quot; : '.*'` == 0 ) then
goto MAIN_MENU
endif
if ( $resources == 'ALL' ) then
echo -n &quot;You want to delete ALL ${restype}S and their reservations? &quot;
set response = $&lt;
if ( `expr &quot;$response&quot; : '\(.\)'` =~ [yY] ) then
rm -rf ${resv}/* &gt;&amp; /dev/null
cp /dev/null ${resourcelist} &gt;&amp; /dev/null
endif
else
foreach resource ( ${resources} )
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
echo &quot;${restype} ${resource} does not exist.&quot;
else
#REMOVE resource FROM resourcelist FILE.
fgrep -xv ${resource} ${resourcelist} &gt; ${resourcelist}.tmp
mv ${resourcelist}.tmp ${resourcelist}
#REMOVE ANY RESERVATIONS FOR THAT RESOURCE.
find $resv -name ${resource} -print|xargs rm &gt;&amp; /dev/null
echo &quot;${restype} ${resource} and reservations deleted.&quot;
endif
end
endif
echo -n &quot;Delete complete...&quot;
$&lt;
breaksw

#SHOW  RESOURCE LIST TO SCREEN.
case 3:
clear
echo CURRENT ${restype} LIST
echo &quot; &quot;
cat ${resourcelist}|sort -b|pr -3n4t|more
echo &quot; &quot;
echo -n &quot;${restype}S listed...&quot;
$&lt;
breaksw

#RESERVE A RESOURCE FOR A PERIOD OF TIME.
case 4:
echo -n &quot;$erase&quot;
GET_RESV_DATE:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
set rd
set trd
echo -n &quot;DATE of reservation?  &quot;
set mrd = $&lt;
if ( `expr &quot;$mrd&quot; : '.*'` == 0 || $mrd == 'm' ) then
goto MAIN_MENU
endif
#CHECK FOR RANGE OF DATES.
if ( `expr &quot;$mrd&quot; : '.*-'` &gt; 0 ) then
set rd = ($rd `expr &quot;$mrd&quot; : '\([0-9/]*\)-'`)
set rd = ($rd `expr &quot;$mrd&quot; : '.*-\([0-9/]*\)'`)
if ( $rd[1] == $rd[2] ) then
set rd = $mrd
endif
else
set rd = $mrd
endif
set trd = ($rd)

#VERIFY EACH ENDPOINT IN RANGE OF DATES IS VALID
set i = 1
while ( $i &lt;= $#trd )
set trd[$i] = `echo $rd[$i]|sed s,\^0,,g|sed s,/0,/,g|cut -f1-2 -d'/'`
if ( `fgrep -xc $trd[$i] $calendar` == 0 ) then
goto GET_RESV_DATE
endif
@ i++
end
set rd = ($trd)

#GET EACH DAY IN THE RANGE OF DAYS AND PLACE IN AN ARRAY.
if ( $#rd &gt; 1 ) then
set sday = `fgrep -xn $rd[1] $calendar|cut -f1 -d':'`
set eday = `fgrep -xn $rd[2] $calendar|cut -f1 -d':'`
@ numdays = 1 + $eday - $sday
set listofdays = (`tail +$sday $calendar|head -$numdays`)
else
set sday = $rd
set eday = $rd
set numdays = 1
set listofdays = $rd
endif

echo -n &quot;$erase&quot;
GET_RESV_NAME:
echo -n  &quot;$up1&quot;
echo -n  &quot;$erase&quot;
echo -n &quot;NAME of reserver for ${boldON}$mrd${boldOFF}?  &quot;
set name = $&lt;
if ( $name == 'm' ) then
goto MAIN_MENU
endif
#MAKE NAME 15 CHARACTERS OR LESS.
set name = `expr &quot;$name&quot; : '\(...............\)' \| &quot;$name&quot;`
if ( $name == 0 ) then
goto GET_RESV_DATE
endif

echo -n &quot;$erase&quot;
GET_RESV_HOST:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;${restype} for ${boldON}$name${boldOFF} on ${boldON}$mrd${boldOFF}? &quot;

set resource = $&lt;
if ( ${resource} == 'm' ) then
goto MAIN_MENU
endif
if ( `expr &quot;${resource}&quot; : '.*'` == 0 ) then
echo -n &quot;$erase&quot;
goto GET_RESV_NAME
endif
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
echo &quot;No such ${restype}:  ${boldON}${resource}${boldOFF}.&quot;
echo -n &quot;$up1&quot;
goto GET_RESV_HOST
endif

echo -n &quot;$erase&quot;
GET_RESV_TIME:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;TIME on ${boldON}${resource}${boldOFF} for ${boldON}$name${boldOFF} \
on ${boldON}$mrd${boldOFF}?  &quot;
set rtime = $&lt;
if ( $rtime == 'm' ) then
goto MAIN_MENU
endif
set rtimelen = `expr &quot;$rtime&quot; : '.*'`
if ( $rtimelen == 0 ) then
goto GET_RESV_HOST
endif
set rtimelen = `expr &quot;$rtime&quot; : '^[0-2][0-9][0-9][0-9]-[0-2][0-9][0-9][0-9]$'`
if ( $rtimelen == 0 ) then
goto GET_RESV_TIME
endif

#GET START TIME
set stime = `expr &quot;$rtime&quot; : '\(....\)-....'`
if ( `grep -c &quot;${stime}&quot;&quot;-&quot; $template` != 1 ) then
goto GET_RESV_TIME
endif

#GET END TIME
set etime = `expr &quot;$rtime&quot; : '....-\(....\)'`
if ( `grep -c &quot;\-$etime&quot; $template` != 1 ) then
goto GET_RESV_TIME
endif

#ENSURE END TIME IS AFTER START TIME.
if ( $etime &lt;= $stime ) then
goto GET_RESV_TIME
endif

#FOR EACH DAY IN LIST OF DAYS, ATTEMPT RESERVATION
set lod = ($listofdays)
set resv_good = 'TRUE'
echo -n &quot;Dates:  &quot;
while ( $#lod != 0 &amp;&amp; $resv_good == 'TRUE' )
#CREATE DAY DIRECTORY IF NOT ALREADY.
set day = `echo $lod[1]|sed si/i.ig`
if (! -e ${resv}/${day} ) then
mkdir  ${resv}/${day}
endif
#ALIAS RESOURCE FILE TO SOMETHING SHORT AND EASY
set hfile = ${resv}/${day}/${resource}
#SET UP A TIME-SLOT TEMPLATE FOR THAT RESOURCE ON THAT DAY IF NOT ALREADY.
if (! -e ${hfile} ) then
cp ${template} ${hfile}
endif

#READ DISK FILE INTO MEMORY FOR FASTER RESPONSE
set l = ($time_slots)
foreach ln ( $time_slots )
#NOTE DOUBLE QUOTES NEEDED TO INSURE ELEMENT IS ONE WORD.
#I.E. SIZE OF l[n] IS 1 ($#l[1] = 1).
#GET LINE NUMBER 'ln' FROM FILE.
set l[$ln] = &quot;`tail +$ln $hfile|line`&quot;
end

#GET STARTING TIME SLOT POSITION IN FILE.
set startslot = `grep &quot;${stime}-&quot; $numtemp|cut -f1`

#GET END TIME SLOT POSITION IN FILE.
set endslot = `grep &quot;\-$etime&quot; $numtemp|cut -f1`

#CHECK EACH TIME FOR EXISTING RESERVATION, IF NOT, RESERVE IT
echo -n $day
set ln = $startslot
while ( $ln &lt;= $endslot &amp;&amp; $resv_good == 'TRUE' )
#NOTE PARENTHESIS REQUIRED TO CREATE AN ARRAY IN SLOT.
set slot = ($l[$ln])
#IF SECOND COLUMN OF FILE IS NOT RESERVED (IS EMPTY)
if ( $#slot == 1 ) then
#SLOT IS NOT TAKEN, MAKE RESERVATION
set l[$ln] = &quot;${l[$ln]} ${name}&quot;
else
#SLOT IS TAKEN, CANT RESERVE BLOCK OF TIMES.
#DONT WRITE MEMORY BACK TO DISK FILE-KEEP FILE AS IS.
set resv_good = 'FALSE'
echo &quot; &quot;
echo -n &quot;RESERVE CANCELLED: ${boldON}${resource}${boldOFF} taken at &quot;
echo &quot;${boldON}$slot[1]${boldOFF} by ${boldON}$slot[2]${boldOFF}.&quot;
endif
@ ln++
end
shift lod

#FINISHED WITH PART OF RESERVATION, HOLD RESV TEMP UNTIL SURE ALL ARE VALID.
if ( $resv_good == 'TRUE' ) then
if ( $#lod == 0 ) then
echo -n &quot;.&quot;
else
echo -n &quot;, &quot;
endif
#WRITE SCHEDULE FROM MEMORY FILE BACK TO TEMPORARY DISK FILE.
set ln = 1
foreach ln ( $time_slots )
echo $l[$ln] &gt;&gt; ${hfile}.tmp
end
endif

end

#FINISHED WITH RESERVATION
if ( $resv_good == 'TRUE' ) then
foreach day ( $listofdays )
set day = `echo $day|sed si/i.ig`
#ALIAS RESOURCE FILE TO SOMETHING SHORT AND EASY
set hfile = ${resv}/${day}/${resource}
#WRITE ALL SCHEDULES FROM MEMORY FILE BACK TO DISK FILE.
mv ${hfile}.tmp $hfile
end
echo &quot; &quot;
echo &quot;Reservation complete.&quot;
endif

echo &quot; &quot;;echo &quot; &quot;
goto GET_RESV_TIME
breaksw

#DELETE RESERVATION
case 5:
GET_DEL_DATE:
echo -n &quot;$up1&quot;

echo -n &quot;$erase&quot;
echo -n &quot;DATE to delete reservation?  &quot;
set rd = $&lt;
if ( $rd == 'm' ) then
goto MAIN_MENU
endif
if ( $rd == 'ALL' ) then
echo -n &quot;Are you sure you want to delete ALL current reservations? &quot;
set response = $&lt;
if ( `expr &quot;$response&quot; : '\(.\)'` =~ [yY] ) then
rm -rf ${resv}/* &gt;&amp; /dev/null
goto MAIN_MENU
endif
endif
set rd = `echo $rd|sed s/\^0//g|sed s,/0,/,g|cut -f1-2 -d'/'`
if ( `expr &quot;$rd&quot; : '.*'` == 0 ) then
goto MAIN_MENU
endif
if ( `fgrep -xc $rd $calendar` == 0 ) then
goto GET_DEL_DATE
endif
set day = `echo $rd|sed s,/,.,g`
if (! -e ${resv}/${day} ) then
echo &quot;No reservations made for that day.&quot;
echo -n &quot;$up1&quot;
goto GET_DEL_DATE
endif

echo -n &quot;$erase&quot;
GET_DEL_HOST:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;${restype} reservation was for on ${boldON}$rd${boldOFF}?  &quot;
set resource = $&lt;
if ( ${resource} == 'm' ) then
goto MAIN_MENU
endif
if ( `expr &quot;${resource}&quot; : '.*'` == 0 ) then
echo -n &quot;$erase&quot;
goto GET_DEL_DATE
endif
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
echo &quot;No such ${restype}: ${boldON}${resource}${boldOFF}.&quot;
echo -n &quot;$up1&quot;
goto GET_DEL_HOST
endif
if (! -e ${resv}/${day}/${resource} ) then
echo -n &quot;No reservations for ${boldON}${resource}${boldOFF} &quot;
echo &quot;on ${boldON}$day${boldOFF}.&quot;
echo -n &quot;$up1&quot;
goto GET_DEL_HOST
endif

echo -n &quot;$erase&quot;
GET_DEL_TIME:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;TIME to delete for ${boldON}${resource}${boldOFF} &quot;
echo -n &quot;on ${boldON}$rd${boldOFF}?  &quot;
set rtime = $&lt;
if ( $rtime == 'm' ) then
goto MAIN_MENU
endif
set rtimelen = `expr &quot;$rtime&quot; : '.*'`
if ( $rtimelen == 0 ) then
echo -n &quot;$erase&quot;
goto GET_DEL_HOST
endif
set rtimelen = `expr &quot;$rtime&quot; : '^[0-2][0-9][0-9][0-9]-[0-2][0-9][0-9][0-9]$'`
if ( $rtimelen == 0 ) then
echo -n &quot;$erase&quot;
goto GET_DEL_TIME
endif

#SET START TIME
set stime = `expr &quot;$rtime&quot; : '\(....\)-....'`
if ( `grep -c &quot;${stime}-&quot; $template` != 1 ) then
goto GET_DEL_TIME
endif

#SET END TIME
set etime = `expr &quot;$rtime&quot; : '....-\(....\)'`
if ( `grep -c &quot;\-$etime&quot; $template` != 1 ) then
goto GET_DEL_TIME
endif

#ENSURE END TIME IS AFTER START TIME.
if ( $etime &lt;= $stime ) then
goto GET_RESV_TIME
endif

#RENAME RESOURCE FILE TO SOMETHING SHORT AND EASY TO TYPE
set hfile = ${resv}/${day}/${resource}

#READ DISK FILE INTO MEMORY FOR FASTER RESPONSE
set l = ($time_slots)
set ln = 1
while ( $ln &lt;= $slots_per_day)
#NOTE DOUBLE QUOTES NEEDED TO INSURE ELEMENT IS ONE WORD.
set l[$ln] = &quot;`tail +$ln $hfile|line`&quot;
@ ln++
end

#GET START TIME SLOT POSTIION.
set startslot = `nl $hfile|grep &quot;${stime}-&quot;|awk '{print $1}'`

#GET END TIME SLOT POSTIION.
set endslot = `nl $hfile|grep &quot;\-$etime&quot;|awk '{print $1}'`

#DELETE RESERVEE FROM EACH TIME SLOT
set ln = $startslot
while ( $ln &lt;= $endslot )
#NOTE PARENTHESIS TO CREATE AN ARRAY IN SLOT.
set slot = ($l[$ln])
#SET TIME SLOT TO ONLY CONTAIN TIME, NO RESERVEE.
set l[$ln] = &quot;$slot[1]&quot;
@ ln++
end

#FINISHED WITH RESERVATION DELETION
#WRITE SCHEDULE FROM MEMORY FILE BACK TO DISK FILE.
rm -f $hfile
set ln = 1
while ( $ln &lt;= $slots_per_day )
echo $l[$ln] &gt;&gt; $hfile
@ ln++
end
echo &quot;Reservation deletion complete.&quot;

echo &quot; &quot;;echo &quot; &quot;
goto GET_DEL_TIME
breaksw


#PRINT REPORTS
case 6:
PRINT_MENU:
clear
echo &quot;Status:  PS[${psstate}]  PR[${printer}]  RPT[${reporttype}]&quot;
echo &quot; &quot;
echo &quot;PRINTING MENU&quot;
echo &quot;======== ====&quot;
echo &quot; &quot;
echo &quot;  ONE DAY REPORT&quot;
echo &quot;  1    All ${restype}S&quot;
echo &quot;  2    One ${restype}&quot;
echo &quot; &quot;
echo &quot;  ONE WEEK REPORT&quot;
echo &quot;  3    All ${restype}S&quot;
echo &quot;  4    One ${restype}&quot;
echo &quot; &quot;
echo &quot;  ALL RESERVATIONS&quot;
echo &quot;  5     All ${restype}S&quot;
echo &quot;  6    One ${restype}&quot;
echo &quot; &quot;
echo &quot;  7     Set Printing Defaults&quot;
echo &quot; &quot;
echo &quot;  0    Exit Printing Menu&quot;
echo &quot;  q     Quit Program&quot;
echo &quot;&quot;
echo -n &quot;CHOICE?  &quot;
set option = $&lt;
set option = `expr &quot;$option&quot; : '\(.\)'`
echo &quot; &quot;
echo -n &quot;$up1&quot;

switch ( $option )
case &quot;&quot;:
case 0:
case m:
goto MAIN_MENU
breaksw
case q:
case e:
case x:
exit 0
breaksw

#PRINT SCHEDULE FOR ALL RESOURCE
case 1:
case 3:
echo -n &quot;$erase&quot;
GET_PSDATE:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;DATE to print? &quot;
set rd = $&lt;
set rd = `echo $rd|sed s,\^0,,g|sed s,/0,/,g|cut -f1-2 -d'/'`
if ( `expr &quot;$rd&quot; : '.*'` == 0 ) then
echo -n &quot;$erase&quot;
goto PRINT_MENU
endif
if ( $rd =~ [tT] || $rd == 'today' ) then
set rd = $today
endif
if ( `fgrep -xc $rd $calendar` == 0 ) then
echo -n &quot;$up1&quot;
goto GET_PSDATE
endif

#GET LIST OF DAYS TO PRINT
if ($option == '3' ) then
set RETURN = 'RETURN_GET_LIST_PS'
goto GET_LIST
RETURN_GET_LIST_PS:
set header = &quot;SCHEDULE FOR WEEK OF ${listofdays[1]}-${listofdays[7]} &quot;
set header = &quot;$header  ALL ${restype}S.&quot;
set fn = &quot;week_of_${listofdays[1]}_all_${restype}s&quot;
else
set listofdays = `echo $rd|sed &quot;s,/,\.,g&quot;`
set header = &quot;SCHEDULE FOR DAY OF $listofdays FOR ALL ${restype}S.&quot;
set fn = &quot;day_of_${listofdays}_all_${restype}s&quot;
endif

#GET LIST OF RESOURCES.
alias listhosts 'ls $resv/$day'

#CREATE REPORT
set RETURN = &quot;RETURN_CR_REP_PSDATE&quot;
goto CREATE_REPORT
RETURN_CR_REP_PSDATE:

#PRINT REPORT
set RETURN = &quot;RETURN_PRINT_PSDATE&quot;
goto PRINT_FILE
RETURN_PRINT_PSDATE:
breaksw


#PRINT FOR ONE RESOURCE
case 2:
case 4:
echo -n &quot;$erase&quot;
GET_PSOHHOST:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;${restype} to print? &quot;
set resource = $&lt;
if ( `expr &quot;${resource}&quot; : '.*'` == 0 ) then
goto PRINT_MENU
endif
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
echo &quot;No such ${restype}.&quot;
echo -n &quot;$up1&quot;
goto GET_PSOHHOST
endif

echo -n &quot;$erase&quot;
GET_PSOHDATE:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;DATE to print ${boldON}${resource}${boldOFF}? &quot;
set rd = $&lt;
if ( $rd == 'm' ) then
goto PRINT_MENU
endif
set rd = `echo $rd|sed s,\^0,,g|sed s,/0,/,g|cut -f1-2 -d'/'`
if ( `expr &quot;$rd&quot; : '.*'` == 0 ) then
goto GET_PSOHHOST
endif
if ( $rd =~ [tT] || $rd == 'today' ) then
set rd = $today
endif
if ( `fgrep -xc $rd $calendar` == 0 ) then
goto GET_PSOHDATE
endif

if ($option == '4' ) then
#GET DAYS OF THE WEEK THAT CONTAIN THE REQUESTED DATE.
set RETURN = 'RETURN_GET_LIST_PSOH'
goto GET_LIST
RETURN_GET_LIST_PSOH:
set header = &quot;SCHEDULE WEEK OF ${listofdays[1]}-${listofdays[7]} &quot;
set header = &quot;$header FOR ${resource}.&quot;
set fn = &quot;week_of_${listofdays[1]}_${resource}&quot;
else
set listofdays = `echo $rd|sed &quot;s,/,\.,g&quot;`
set header = &quot;DATE OF $listofdays SCHEDULE FOR ${restype} ${resource}.&quot;
set fn = &quot;day_of_${listofdays}_${resource}&quot;
endif

#GET LIST OF RESOURCES
alias listhosts 'echo ${resource}'

#CREATE REPORT
set RETURN = &quot;RETURN_CR_REP_PSOHDATE&quot;
goto CREATE_REPORT
RETURN_CR_REP_PSOHDATE:

#PRINT REPORT
set RETURN = &quot;RETURN_PRINT_PSOHDATE&quot;
goto PRINT_FILE
RETURN_PRINT_PSOHDATE:
goto GET_PSOHDATE
breaksw

#PRINT ALL CURRENTLY SCHEDULED
case 5:
#SORT DAYS IN CALENDAR (NOT NUMERIC) ORDER.
#E.G. 3/11 COMES AFTER 3/2, NOT BEFORE.
set listofdays
cd $resv &gt;&amp; /dev/null
foreach day ( 1 2 3 4 5 6 7 8 9 10 11 12 )
set ld = ( `find . -name ${day}.\* -print|cut -f2 -d'/'` )
set listofdays = ( $listofdays `echo $ld|sort -n -t. +1` )
end
cd .. &gt;&amp; /dev/null

#SET DEFAULT FILENAME
set fn = &quot;all_${restype}_`date +%m.%d.%y`&quot;
set header = &quot;SCHEDULE AS OF `date +%m/%d/%y` FOR ALL ${restype}S.&quot;

#SET LIST OF RESOURCE
alias listhosts 'ls ${resv}/$day'

#CREATE REPORT
set RETURN = &quot;RETURN_CR_REP_ALL_SCHEDULED&quot;
goto CREATE_REPORT
RETURN_CR_REP_ALL_SCHEDULED:

#PRINT REPORT
set RETURN = &quot;RETURN_PRINT_ALL_SCHEDULED&quot;
goto PRINT_FILE
RETURN_PRINT_ALL_SCHEDULED:
goto PRINT_MENU
breaksw

#PRINT ALL CURRENTLY SCHEDULED FOR ONE RESOURCE
case 6:
echo -n &quot;$erase&quot;
GET_AOHOST:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;${restype} to print? &quot;
set resource = $&lt;
if ( `expr &quot;${resource}&quot; : '.*'` == 0 ) then
echo -n &quot;$erase&quot;
goto PRINT_MENU
endif
if ( `fgrep -xc ${resource} ${resourcelist}` == 0 ) then
echo &quot;No such ${restype}.&quot;
echo -n &quot;$up1&quot;
goto GET_AOHOST
endif
#SORT DAYS IN CALENDAR (NOT NUMERIC) ORDER.
set listofdays
cd $resv &gt;&amp; /dev/null
foreach day ( 1 2 3 4 5 6 7 8 9 10 11 12 )
set ld = ( `find . -name ${day}.\* -print|cut -f2 -d'/'` )
set listofdays = ( $listofdays `echo $ld|sort -n -t. +1` )
end
cd .. &gt;&amp; /dev/null
set fn = &quot;${resource}_as_of_`date +%m.%d.%y`&quot;
set header = &quot;SCHEDULE AS OF `date +%m/%d/%y` FOR ${resource}.&quot;

#GET LIST OF RESOURCE
alias listhosts 'echo ${resource}'

#CREATE REPORT
set RETURN = &quot;RETURN_CR_REP_ALL_SCHEDULED_OH&quot;
goto CREATE_REPORT
RETURN_CR_REP_ALL_SCHEDULED_OH:

#PRINT REPORT
set RETURN = &quot;RETURN_PRINT_ALL_SCHEDULED_OH&quot;
goto PRINT_FILE
RETURN_PRINT_ALL_SCHEDULED_OH:
goto PRINT_MENU
breaksw

#SET PRINTING DEFAULTS MENU
case 7:
DEFAULT_MENU:
clear
echo &quot;PRINTING DEFAULTS MENU&quot;
echo &quot;======== ======== ====&quot;
echo &quot; &quot;
echo &quot;  1  Postscript printing is:    $psstate&quot;
echo &quot;  2  Default printer is:        $printer&quot;
echo &quot;  3  Default report format is:  $reporttype&quot;
echo &quot; &quot;
echo &quot; &quot;
echo &quot;  0  Exit Printing Defaults Menu&quot;
echo &quot;  q  Quit Program&quot;
echo &quot;&quot;
echo -n &quot;CHOICE?  &quot;
set option = $&lt;
set option = `expr &quot;$option&quot; : '\(.\)'`
echo &quot; &quot;
echo -n &quot;$up1&quot;

switch ( $option )
case &quot;&quot;:
case 0:
case m:
goto PRINT_MENU
breaksw
case x:
case q:
case e:
exit
breaksw

#TOGGLE POSTSCRIPT SETTING FOR PRINTING.
case 1:
if ( $psstate == 'ON' ) then
set psstate = 'OFF'
alias printcmd 'lpr -Jschedule -P$printer filetoprint'
else
set psstate = 'ON'
alias printcmd 'a2ps filetoprint|lpr -Jschedule -P$printer'
endif
echo $psstate &gt; $ps
goto DEFAULT_MENU
breaksw

#CHANGE DEFAULT PRINTER
case 2:
SET_DEFAULT_PRINTER:
set printer = `cat $printerfile`
echo -n &quot;Change default printer [${printer}]:  &quot;
set newprinter = $&lt;
if ( `expr &quot;$newprinter&quot; : '.*'` == 0 ) then
set newprinter = $printer
endif
if ( `echo $newprinter|tr 'a-z' 'A-Z'` == 'NONE' ) then
echo &quot;NONE&quot; &gt; $printerfile
set printer = &quot;NONE&quot;
goto DEFAULT_MENU
endif
if ( `lpstat -p|grep -c $newprinter` == 0 ) then
echo &quot;No such printer: ${newprinter}.&quot;
goto SET_DEFAULT_PRINTER
endif
echo $newprinter &gt; $printerfile
set printer = $newprinter
goto DEFAULT_MENU
breaksw

#TOGGLE REPORT FORMAT
case 3:
if ( $reporttype == 'MATRIX' ) then
set reporttype = 'FLAT'
else
set reporttype = 'MATRIX'
endif
echo $reporttype &gt; $reportfile
goto DEFAULT_MENU
breaksw

default:
goto DEFAULT_MENU
breaksw
endsw
goto DEFAULT_MENU

default:
goto PRINT_MENU
breaksw
endsw
goto PRINT_MENU

default:
goto MAIN_MENU
breaksw
endsw
goto MAIN_MENU
exit 0

CREATE_REPORT:
#THIS SUBROUTINE REQUIRES THREE VARIABLES:
#header, listofdays, listhosts, WHICH ARE DEFINED BY THE CALLING
#ROUTINE.
echo $header &gt; filetoprint
if ( $reporttype == 'FLAT' ) then
#CREATE FLAT REPORT
foreach day ( $listofdays )
echo &quot;DATE ${day}  ==========================&quot; &gt;&gt; filetoprint
if ( ! -e ${resv}/$day ) then
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
else
foreach resource ( `listhosts` )
if ( ! -e ${resv}/${day}/${resource} ) then
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
else if ( `wc -c&lt;${resv}/${day}/${resource}` &gt; `wc -c&lt;$template` )
then
echo &quot;${restype} ${resource}  ==========&quot; &gt;&gt; filetoprint
awk 'NF&gt;1 {printf(&quot;%9s\t%-15.15s\t%-15.15s\n&quot;,$1,host,$2)}' \
host=${resource} ${resv}/${day}/${resource} &gt;&gt; filetoprint
echo &quot;  &quot; &gt;&gt; filetoprint
else
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
endif
end
endif
echo &quot; &quot; &gt;&gt; filetoprint
end
else
#CREATE MATRIX REPORT
foreach day ( $listofdays )
echo &quot;DATE ${day}  ==========================&quot; &gt;&gt; filetoprint
if ( ! -e ${resv}/$day ) then
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
else
#CREATE HEADER OF TIME SLOTS FOR EACH DAY ON SEPERATE PAGE.
awk 'BEGIN {printf &quot;RESOURCE  ||&quot;} \
{printf &quot;%-6.4s|&quot;,$1 } \
END {print &quot;&quot;}' $template &gt;&gt; filetoprint

#MATRIX FORMAT:  resourcename field=  10 wide.
#                time slot field=  6 wide, left justified in 5.
awk 'BEGIN {printf &quot;==========||&quot;} \
{printf &quot;%s|&quot;,equal } \
END {print &quot;&quot;}' equal=&quot;======&quot; $template &gt;&gt; filetoprint

foreach resource ( `listhosts` )
#CREATE ROW FOR HOST UNDER HEADER.
if ( ! -e ${resv}/${day}/${resource} ) then
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
else if ( `wc -c&lt;${resv}/${day}/${resource}` &gt; `wc -c&lt;$template` ) then
awk 'NR == 1 {printf &quot;%-10.9s||&quot;,h} \
{printf(&quot;%-6.5s|&quot;,$2)} \
END {print &quot;&quot;}' h=${resource} $resv/$day/${resource} &gt;&gt; filetoprint

awk 'NR==1 {printf &quot;__________||&quot;} \
{printf(&quot;%s|&quot;,underline)} \
END {print &quot;&quot;}' underline=&quot;______&quot; $template &gt;&gt; filetoprint
else
echo &quot;Nothing scheduled.&quot; &gt;&gt; filetoprint
endif
end
endif
shift listofdays
if ( $#listofdays &gt; 0 &amp;&amp; $reporttype == &quot;MATRIX&quot; ) then
#FORM FEED, THIS NEXT CHAR IS ACTUALLY octal 014
echo &quot;&quot; &gt;&gt; filetoprint
else
echo &quot; &quot;;echo &quot; &quot; &gt;&gt; filetoprint
endif
end
echo &quot; &quot; &gt;&gt; filetoprint
endif
echo &quot;END OF SCHEDULE.&quot; &gt;&gt; filetoprint
goto $RETURN

PRINT_FILE:
#PRINT THE REPORT TO SCREEN, FILE, PRINTER OR FILE &amp; PRINTER.
echo -n &quot;Output to ${boldON}s${boldOFF}creen, ${boldON}p${boldOFF}rinter, &quot;
echo -n &quot;${boldON}f${boldOFF}ile or ${boldON}b${boldOFF}oth?  &quot;
set output = $&lt;
if ( `expr &quot;$output&quot; : '.*'` == 0 ) then
goto $RETURN
endif
set output = `expr &quot;$output&quot; : '\(.\)'|tr 'A-Z' 'a-z'`

if ( $output == 'f' || $output == 'b' ) then
echo &quot; &quot;
echo -n &quot;Filename [&quot;${fn}&quot;]:  &quot;
set outfile = $&lt;
if ( $outfile == 'm' ) then
goto PRINT_MENU
endif
if ( `expr &quot;$outfile&quot; : '.*'` == 0 ) then
set outfile = $fn
endif
set outfile = ${printdir}&quot;/&quot;${outfile}
rm -f $outfile
endif

if ( $output == 'p' || $output == 'b' ) then
if ( $printer == 'NONE' ) then
echo -n &quot;$erase&quot;
GET_TEMP_PRINTER:
echo -n &quot;$up1&quot;
echo -n &quot;$erase&quot;
echo -n &quot;Printer:  &quot;
set printer = $&lt;
if ( `expr &quot;$printer&quot; : '.*'` == 0 ) then
echo -n &quot;$erase&quot;
echo -n &quot;$up1&quot;
goto PRINT_FILE
endif
if ( $printer == 'm' ) then
goto PRINT_MENU
endif
if ( `lpstat -p|grep -c $printer` == 0 ) then
echo &quot;No such printer: ${printer}.&quot;
echo -n &quot;$up1&quot;
goto GET_TEMP_PRINTER
endif
endif
endif

switch ( $output )
case p:
printcmd
rm -f filetoprint
breaksw
case s:
clear
more filetoprint
rm -f filetoprint
echo &quot; &quot;
echo &quot;Print complete...&quot;
$&lt;
echo &quot; &quot;
echo &quot; &quot;
breaksw
case f:
mv filetoprint $outfile
breaksw
case b:
printcmd
mv filetoprint $outfile
breaksw
default:
goto PRINT_FILE
breaksw
endsw

goto $RETURN


INITIALIZE:
#CLEAN UP CALENDAR, AND SET UP OPERATION VARIABLES.
echo &quot;Please wait, cleaning up calendar...&quot;
if ( `cat $cleandate` != $today ) then
#REMOVE PREVIOUS DAY SCHEDULES FOR CURRENT MONTH.
#WILL REMOVE OLD SCHEDULES FROM THE FIRST OF THE MONTH UP TO
#TODAY, FOR THE CURRENT MONTH.
set day = `echo $today|cut -f2 -d'/'`
set todaypos = `nl $calendar|grep $today|line`
@ spos = ( $todaypos[1] - $day ) + 1
@ numdel = $day - 1
set daystodelete = ( `tail +$spos $calendar|head -$numdel|sed &quot;s,/,\.,g&quot;` )
cd $resv &gt;&amp; /dev/null
rm -rf $daystodelete &gt;&amp; /dev/null
cd $dir &gt;&amp; /dev/null
echo $today &gt; $cleandate
endif

#CREATE NUMBERED TEMPLATE FILE FOR FASTER RESPONSE.
nl $template &gt; $numtemp

#REMOVE 'DAYS' WITH NO RESERVATIONS FOR FASTER REPORT RESPONSE.
#FIRST REMOVE ALL RESOURCE FILES WITH NO RESVERATIONS
IN THEM.
set tempsize = `wc -c &lt; $template`
foreach resource ( `cd $resv;find . -type f -print` )
if ( `wc -c &lt; $resv/${resource}` &lt;= $tempsize ) then
rm -f $resv/${resource} &gt;&amp; /dev/null
endif
end
#THEN REMOVE ALL 'DAY' DIRECTORIES THAT ARE EMPTY.
foreach day ( `cd ${resv};ls` )
if ( `du -s $resv/$day|cut -f1` &lt;= 1 ) then
rm -rf $resv/$day &gt;&amp; /dev/null
endif
end

#SET DEFAULT POSTSCRIPT STATE
if ( ! -e $ps || -z $ps ) then
if ( -e a2ps ) then
echo &quot;ON&quot; &gt; $ps
else
echo &quot;OFF&quot; &gt; $ps
endif
endif
set psstate = `cat $ps`
if ( $psstate == 'OFF' ) then
alias printcmd 'lpr -JSCHEDULE -P$printer filetoprint'
else
alias printcmd 'a2ps filetoprint|lpr -JSCHEDULE -P$printer'
endif

#SET RESOURCE TYPE
if ( -e $resourcefile &amp;&amp; `wc -c &lt; $resourcefile` &gt; 1 ) then
set restype = `cat $resourcefile|tr 'a-z' 'A-Z'`
else
set restype = &quot;HOST&quot;
echo $restype &gt; $resourcefile
endif

#SET DEFAULT PRINTER
if ( -e $printerfile &amp;&amp; `wc -c &lt; $printerfile` &gt; 1 ) then
set printer = `cat $printerfile`
else
set printer = &quot;NONE&quot;
echo $printer &gt; $printerfile
endif

#SET DEFAULT REPORT FORMAT
if ( -e $reportfile &amp;&amp; ! -z $reportfile ) then
set reporttype = `cat $reportfile`
else
set reporttype = &quot;MATRIX&quot;
echo $reporttype &gt; $reportfile
endif

#ENSURE CALENDAR IS OK.
set calsize = `wc -l &lt; ${calendar}`
set calcreateyear = `cat $calcreatefile`
if ( ${calsize} &lt; 365 || ${calsize} &gt; 366 || $calcreateyear != $year ) then
echo &quot;Creating calendar ...&quot;
cp /dev/null ${calendar}
foreach month ( 1 2 3 4 5 6 7 8 9 10 11 12 )
foreach day ( `cal $month $year|egrep '^ *[0-9]'` )
echo &quot;$month/$day&quot; &gt;&gt; ${calendar}
end
end
echo &quot;${year}&quot; &gt; $calcreatefile
endif
goto AFTER_INITIALIZE

GET_LIST:
#FOR A GIVEN DAY, RETURN THE LIST OF DAYS THAT STARTS WITH SUNDAY,
#ENDS WITH THE FOLLOWING SATURDAY, AND CONTAINS THAT GIVEN DAY.
#THE LIST OF DAYS IS THEREFORE ALWAYS LENGTH = 7.
set nextyear = $year
set m = `echo $rd|cut -f1 -d'/'`
set d = `echo $rd|cut -f2 -d'/'`
set listofdays = `cal $m $year|egrep '^ *[0-9]'|grep $d|line`
if ( $#listofdays &lt; 7 ) then
if ( $listofdays[1] == 1 ) then
set nmtype = 'PREV'
@ nextm = $m - 1
if ( $nextm == 0 ) then
set nextm = 12
@ nextyear = $year - 1
endif
else
set nmtype = 'NEXT'
@ nextm = $m + 1
if ( $nextm == 13 ) then
set nextm = 1
@ nextyear = $year + 1
endif
endif
set cp = 0
foreach dy ( $listofdays )
@ cp++
set listofdays[$cp] = ${m}&quot;.&quot;$listofdays[$cp]
end
if ( $nmtype == 'PREV' ) then
set moredays = `cal $nextm $nextyear|egrep '^ *[0-9]'|tail -1`
set cp = 0
foreach dy ( $moredays )
@ cp++
set moredays[$cp] = ${nextm}&quot;.&quot;$moredays[$cp]
end
set listofdays = `echo ${moredays[*]} ${listofdays[*]}`
else
set moredays = `cal $nextm $nextyear|egrep '^ *[0-9]'|line`
set cp = 0
foreach dy ( $moredays )
@ cp++
set moredays[$cp] = ${nextm}&quot;.&quot;$moredays[$cp]
end
set listofdays = `echo ${listofdays[*]} ${moredays[*]}`
endif
else
set cp = 0
foreach dy ( $listofdays )
@ cp++
set listofdays[$cp] = ${m}&quot;.&quot;$listofdays[$cp]
end
endif
goto $RETURN
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
