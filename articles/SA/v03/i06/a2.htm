<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i06:  Logging rm and kill Requests</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1994/nov94.tar"><b class=codeListing>nov94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Logging rm and kill Requests</H1><p>
<P>
Steven G. Isaacson<P>

Sometimes users take it upon themselves to play system
administrator. 
Usually the assistance is welcome. When it's not, you
have to play 
detective. <P>

This article describes two logging programs that make
playing detective 
easy. One program logs rm requests (see Figure 1 for
sample 
entry), the other logs kill requests (see Figure 2).<P>

<B>Logging kill Requests</B><P>

Why log kill requests?<P>

We needed to log kill requests because of a problem
with Informix's 
Standard Engine database. When a user runs a program
that accesses 
the database, two processes are created: (1) the original
program, 
and (2) a daemon that handles the database access. (This
is not true 
of Informix's OnLine engine.)<P>

We had difficulty with a particular program &quot;locking
up&quot; and 
so users took it upon themselves to kill their process
when the program 
appeared to be stuck. Killing your own process generally
isn't a problem, 
but in the case of the Informix daemon it is. If you
kill the Informix 
daemon when it's in the middle of a transaction, it's
possible to 
corrupt the database.<P>

The proper procedure is to kill only the process created
from the 
original program. The accompanying daemon process eventually
receives 
the signal, at which time it shuts down, does whatever
cleanup work 
it needs to do, and then stops.<P>

So our problem was one of education.<P>

It's okay to kill your program, we said, but don't kill
the daemon 
along with it -- even though you can. The daemon will
die on its 
own when it's ready. Most of our users got the message
but a few didn't. 
We had to find out who kept killing the engine.<P>

We wanted to know: user id, date and time, and information
about the 
process being killed.<P>

User and group id are obtained from /usr/bin/id, date
and 
time from /bin/date, and information about the process
about 
to be killed is provided by /bin/ps (you have to get
information 
about the process before it's killed, of course). The
results are 
written to a log file and finally the real kill program
is 
called to do the work (i.e., kill the process). Simple.
The 
kill script is in Listing 1.<P>

To install the kill logging script you first rename
the real 
/bin/kill program to /bin/rkill. Then move the kill

script to /bin/kill, making sure that everyone has execute

permission for kill and write permission for the log
file. 
The &quot;real&quot; kill program (/bin/rkill) is called

from the new kill shell script.<P>

Periodic checks of the log file told us who needed to
be reminded 
about what not to kill.<P>

The same logging technique was developed for rm.<P>

<B>Logging rm Requests</B><P>

In addition to the information captured in the kill
script 
(user id, date and time, etc.), the rm script records
the 
current working directory. It does this so that files
referenced relative 
to the current working directory can be uniquely identified.<P>

For example, if someone types &quot;rm myfile,&quot;
you must know the 
current working directory before you can determine if
/bin/myfile 
was removed or /usr/sneed/myfile was removed. Of course,
the 
current working directory is irrelevant if the file
is referred to 
by an absolute pathname. <P>

The rm logging script (see Listing 2) is installed in
the 
same way the kill logging script is installed. First
the real 
rm program is moved to a new name (/bin/rrm) and the

rm shell script is copied to /bin/rm. Now whenever 
a user types &quot;rm filename,&quot; the request is
recorded in the 
rm log file.<P>

But there are several problems to be aware of.<P>

<B>Problems</B><P>

The first problem with any logging program is the log
file. It keeps 
growing. Each request writes multiple lines to the log
file, and with 
a frequently used command like rm, this can be a serious
problem; 
if left unattended, the log file will eventually fill
up your file 
system.<P>

A serious problem, but easy to solve.<P>

What you need is a maxtab entry (See &quot;maxtab: Automatic

File Pruning,&quot; Sys Admin March/April 1993, vol.
2, no. 
2). Supply the file name and maximum number of lines
and a cronjob 
does the rest. We have the kill log file set to 2,000
lines 
and the rm log file set to 4,000 lines. This gives us
a rolling 
history of approximately the last 285 kill requests
and last 
1,000 rm requests.<P>

The second problem is that there is no secret about
what's going on. 
The rm and kill logging scripts are world readable 
and anyone can look at them to see how they work.<P>

Soon after one user was &quot;caught&quot; and subsequently
publicly 
flogged (in a nice way) in email, another user began
using her own 
rm script out of her $HOME/bin directory. Her rm 
script was the same as the newly installed rm logging
script 
(that is, it calls the real /bin/rrm program), but hers
was 
different in that it didn't bother doing any of the
logging.<P>

This problem was quietly addressed by writing a C version
of the scripts. 
The C versions work the same, but the logging feature
is hidden because 
the contents of the resulting binary file are not as
obvious as those 
of a shell script.<P>

The rewrite of the rm-logging program was straightforward
(see Listing 4
for rm.c). The user id, current working directory,
etc., 
are easily obtainable in a C program, and once that
information is 
obtained, it's simply a  matter of passing the command-line
arguments 
on to the real rm program.<P>

The C version of the kill program (see Listing 3 for
kill.c). 
was also straightforward, since the difficult part --
logging information 
about the process about to be killed -- was already
available (see 
&quot;sukill: Stopping Unruly Processes,&quot; Sys Admin
November/December 
1992, vol. 1, no. 4).<P>

There are other problems, too -- for example, the Network
File 
System (NFS). If you have access to a file system from
any one of 
several machines, then you also have access to several
rm 
and kill programs. This means that in order to log all
requests, 
you must install the logging programs on all machines.<P>

Also there may be other kill or rm programs on your

system. We have a program called top that dynamically
displays 
the current processes. You can kill processes from within
the top 
program -- and bypass /bin/kill logging.<P>

Also, a C program that calls unlink() or kill() directly

is trivial to produce.<P>

In spite of the security shortcomings, the logging programs
are valuable. 
They are valuable because they provide information not
previously 
available, information that can make your job easier,
information 
that makes playing detective as easy as checking a log
file. <P>




<P>


<H1>About the Author</H1><p>
<P>
Steven G. Isaacson has been programming professionally
since 1985. He works for FourGen Software, 
the leading developers of accounting software and 
CASE Tools for the UNIX market. He may be reached at
uunet!4gen!stevei or stevei@fourgen.com.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
