<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i01:  Communicating without E-Mail</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a2_s2.htm">Sidebar 2</a></span></td>
		<td><span class=navbarLink><a href="a2_s3.htm">Sidebar 3</a></span></td>
		<td><a href="../../../../source/SA/1994/jan94.tar"><b class=codeListing>jan94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Communicating without E-Mail</H1><p>
<P>
Emmett Dulaney<P>

Electronic mail is the primary means by which users
can communicate 
with each other -- whether within the same system, across
a network, 
or, if they're connected to a service such as the Internet,
anywhere 
in the world. While this is an important tool, there
are other ways 
in which one user -- specifically, for our purposes,
a system administrator 
-- can communicate with another user or users.<P>

This article covers the alternatives to e-mail. While
some of the 
methods are useful only under specific conditions, most
can be implemented 
on any UNIX operating system.<P>

<B>Write and Talk</B><P>

The simplest means of sending a message to another user
currently 
on the system is with the write command. Use who to

find out if the intended recipient is on the system
(unlike mail, 
write restricts communication to users currently logged
on) 
and then summon write. Following is an example:<P>
<PRE>
$ who
emmett     ttya         Nov 27 06:35
root       ttyb         Oct 31 19:24
$

$ write karen
karen is not logged on.
$

$ write root</pre><p>
<p>
At this point, the other user's terminal beeps twice

and displays the message<P>
<PRE>
Message from {you} on {node name} {terminal} [ {date} ] ...</pre><p>
<p>
such that they now see<P>
<PRE>
Message from emmett on ALDEN (ttya) [ Tue Dec 12 06:41:53 ] ...</pre><p>
<p>
At this point the prompt has disappeared from both terminals.

As you type your message, the write utility copies the
line 
from your terminal to the terminal of the other user
every time you 
press the Return key.<P>

If the other user presses Return the prompt reappears.
To respond 
to your message, the user must invoke:<P>
<PRE>
write {your name}</pre><p>
<p>
Communication then continues, from one terminal to another,

until you press Control-D. At that point, your prompt
returns, and 
the other user's screen displays EOT, indicating the
end of 
the transmission.<P>

If a user is logged into the system more than once,
or if more than 
one user is using the same login (a horrible idea to
the security-conscious), 
then you must further identify the user by adding terminal
information 
to the user name. In the following example session,
two users are 
logged in as root:<P>
<PRE>
$ who
emmett     ttya         Nov 27 06:35
root       ttyb         Oct 31 19:24
root       ttyv008      Nov 27 05:19
$

$ write root
root is logged on more than one place.
You are connected to &quot;ttyb&quot;.
Other locations are:
ttyv008
$</pre><p>
<p>
If you do not specify the terminal, the write 
utility uses the first occurrence of the designated
user in the /etc/utmp 
file.<P>

To clearly specify which user you want to speak with
when more than 
one is present, give the terminal location as well:<P>
<PRE>
$ write root ttyb</pre><p>
<p>
The finger command can help you figure out which 
of the multiple users is the one you intend to write
to, but for the 
most part, it is up to you to know which terminal a
user predominantly 
uses.<P>

talk an interactive form of write, exists in many 
versions of UNIX -- particularly Berkeley. When invoked,
it tells 
the other user that you're trying to get in touch. It
continuously 
retries, sending a message approximately every two minutes,
unless 
interrupted by you. The user you're calling can respond
by invoking 
talk and specifying your username.<P>

In a talk session, the screen on both terminals is divided,

with a dashed line in the middle. What each user types
appears on 
the top half of his/her screen, while what the other
is typing appears 
on the bottom half. After the session has been established,
if either 
user exits, the session is terminated on both ends.<P>

talk examines the status of the mesg flag (discussed

below) to determine whether or not to allow operation,
and responds 
with &quot;Permission denied&quot; if the flag is set
to n.<P>

If a network is present, you can write or talk to a
user on a system 
other than the one you are on by specifying the user
and machine name, 
separated by &quot;@&quot;. For example, to write to
&quot;karen&quot; 
on the &quot;SCOTT&quot; system, the syntax is:<P>
<PRE>
$ write karen@SCOTT</pre><p>
<p>
<B>Denying write and talk With mesg</B><P>

mesg is used to permit or deny messages. To prevent
other 
users from writing messages to you, use mesg n. If you
use 
mesg without a parameter, the response is the status
of the 
mesg flag:<P>
<PRE>
$ mesg
is y
$</pre><p>
<p>
The n argument revokes non-user write permission 
on the user's terminal. The y argument reinstates the
permission.<P>

If you've set mesg to n, the person trying to write

to you receives a message informing them that permission
has been 
denied.<P>

Setting mesg to n also prevents a user to whom you've

written from responding. In this case you'll receive
an error message: 
&quot;Warning: cannot respond, set mesg y.&quot; To
correct this, set 
mesg to y. If you are already in the write 
mode, precede the message with an exclamation mark to
invoke the shell, 
!mesg y.<P>

The other error message you mght see -- &quot;Can no
longer write 
to user&quot; -- indicates that the other user had been
accepting 
messages, but since your initial message, has denied
permission (mesg 
n).<P>

Only root, the superuser, can send messages to a user
whether or not 
the message flag is on. For all other users, the message
flag is examined 
before messages are accepted.<P>

<B>news and /etc/motd</B><P>

To send a message to everyone, you can use wall 
(see the sidebar, &quot;Using Wall&quot;), but the message
will only 
go to users who are currently logged on. You could use
mail, but this 
would cause each person's mail file to grow with each
message.<P>

A better alternative is to use news, which creates one
file 
that all users on the system read. If the news command
is 
in a user's login routine, when the user logs in the
contents of any 
files in /usr/news, or /var/news (depending upon the

vendor) will be displayed. Once the file has displayed,
the user's 
name is removed from the list of users who need to see
it, and the 
file is not shown to them again, regardless of how many
times they 
subsequently log in.<P>

If the user presses Delete while a news item is being
shown, the display 
stops and the next item is started. Another Delete within
one second 
of the first terminates news.<P>

Invoked without any options, news prints the current
items. 
Other options that can be used are:<P>

<B>-a</B> -- Display all items regardless of whether 
or not they've already been viewed.<P>

<B>-n</B> -- Show only the names of the current 
files.<P>

<B>-s</B> -- Show only a count of how many current 
files exist.<P>

To keep the file from growing too large, the system
administrator 
should occasionally go through it and parse old entries
of a month 
or so in age.<P>

The news utility essentially displays a message only
once 
to each user. Some messages, however, should be displayed
at every 
login. UNIX accomplishes this by means of /etc/motd
file. 
The contents of this ASCII file are displayed at the
conclusion of 
each successful login, before the appearance of the
prompt.<P>

<B>Other Means</B><P>

motd displays messages immediately after the successful
login: 
to display information before login, you can use issue.
Many 
systems incorporate an /etc/issue file that contains
the issue 
-- or project -- identification printed as a login prompt.
It 
is a standard ASCII file read by getty and then written
to 
all terminals spawned or respawned by the /etc/inittab
file. 
If there is no /etc/issue file, the login prompt is
the node 
name and the word login. The file can hold any information,
and its 
contents will appear between the node name and prompt,
as, for example, 
in Figure 1.<P>

Practical uses for this file include storing messages
such as &quot;System 
going down at 10:00, do not login past 09:30,&quot;
or &quot;Scan all 
disks for viruses.&quot;<P>

One last means of writing to a user (or more specifically,
a terminal), 
regardless of the message flag status, is with the echo
command 
and a bit of redirection. This method requires that,
you know which 
terminal the user is using and how to address it. who
can 
show you where the user is, and tty will give the full
address.<P>

Given the complete address, you can send a message in
the following 
format:<P>
<PRE>
$ echo Your message &gt; /dev/devID</pre><p>
<p>
In addition to straightforward echoing, you can embed

escape conventions in the message, including:<P>

<I>\07</I> -- beep<P>

<I>\b</I> -- backspace<P>

<I>\f</I> -- form-feed<P>

<I>\n</I> -- new-line<P>

<I>\r</I> -- carriage return<P>

<I>\t</I> -- tab<P>

You can use single quotation marks to send the output

of executed commands to the another screen. For example:<P>
<PRE>
$ echo `clear` &gt; /dev/ttya</pre><p>
<p>
clears the receiving screen (device ttya), while:<P>
<PRE>
$ echo `date` &gt; /dev/ttya</pre><p>
<p>
sends today's date and time to the screen. You can also

send contents of a memo file, but keep in mind that
echo views 
the entire file as a command, and does not see the carriage
returns.<P>

To alleviate this problem, when you create the memo
file, add the 
new line characters directly in the text. echo will
then interpret 
them when it sends the file to the terminal.<P>

<B>Conclusion</B><P>

There are seven ways to communicate with users currently
logged on, 
or with users when they log on to the system: write,
talk, 
news, the issue and motd files, echo, 
and wall. Using these files and utilities, you can relay
messages 
relevant to system status, or pass along other pertinent
information. <P>




<P>


<H1>About the Author</H1><p>
<P>
Emmett Dulaney has been working with UNIX for more
years than he cares to remember.  The author of several
books, including UNIX Unleashed!, he also teaches a
UNIX continuing education class at Indiana-Purdue University
of Fort Wayne.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
