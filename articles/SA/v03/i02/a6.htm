<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i02:  UUCP + Pager = Automated Warning System</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a6_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1994/mar94.tar"><b class=codeListing>mar94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>UUCP + Pager = Automated Warning System</H1><p>
<P>
Carlos Francisco Gomez<P>

One year ago, while trying to implement UUCP for the
first time in 
my new position as system administrator for a secure
network, I toyed 
with the idea of using the modem to call my pager. I
had already begun 
writing scripts to monitor my system's overall state,
and liked the 
idea of the computer telling me when it had a problem.
Internal UNIX 
Newsgroups at my job did not provide me a solution for
this. Lately, 
I have found that the implementation is quite simple.
This article 
presents a list of benefits, a few caveats, my implementation,
observed 
performance data, and conclusions.<P>

<B>Benefits</B><P>

1. An automated paging system could be linked to any
custom monitoring 
script to inform the administrator when there may be
a problem, allowing 
him or her the potential to resolve an issue before
users notice it.<P>

2. Existing automated paging system products, expensive
and possibly 
requiring additional hardware, would no longer be necessary.<P>

3. The pager could be used in reverse, to inform the
administrator 
that everything is okay. In this approach, not receiving
a 
page around a certain time would signal that there might
be a problem. 
This would be especially useful for troublesome modems,
which can 
be periodically &quot;tested&quot; using this method.<P>

4. The pager could be used to inform the administrator
of the progress 
of automated test suites, placing a call when different
stages of 
the test have been completed. I have already done this
in the case 
of a five-hour automated test suite -- I was able to
go home and 
have the pager update me as to the progress, telling
me when the suite 
had finished.<P>

5. The pager could be part of a built-in request service,
in which 
users requested an action, service, or problem resolution
from the 
administrator without ever knowing the administrator's
pager number 
or needing a phone.<P>

<B>Caveats</B><P>

1. UUCP, as implemented, wants to connect to another
UUCP machine. 
A pager service &quot;looks&quot; like a dead machine,
since it does 
not begin a UUCP session. Therefore, there is no real
way to guarantee 
that the page has been successfully placed. <P>

2. A fully integrated implementation would involve a
&quot;uupager&quot; 
binary executable that interacts with the modem to place
a message. 
This, however, becomes an issue to be solved by OS vendors
in release 
XX. Currently, this tool is available only from third-party
sources.<P>

3. If not carefully implemented, the pager could break
otherwise stable 
UUCP configurations.<P>

4. In this implementation, information can be transmitted
only 
in the form of a unique numeric code that stands for
a specific problem. 
Requirements for alphanumeric paging services also become
subject 
to solutions from third-party sources.<P>

<B>Implementation</B><P>

For my implementation, a Sparc 2 (Sun OS 4.1.2) is attached
to an 
AT&amp;T 7400B Data Module via /dev/ttyb, which supports
the Hayes 
Modem Protocol. According to the Sun Microsystems manual,
this UUCP 
implementation &quot;is based on the version distributed
with AT&amp;T's 
System V Release 3, which in turn is based on Honey-DanBer
UUCP. It 
also has some elements based from BSD 4.3, as well as
some Sun modifications.&quot; 
The target pager is a standard Motorola Bravo Express
numeric pager. 
The paging service has a standard interaction in which
a person telephones 
the pager number, waits to hear three beeps, and dials
then his/her 
own number, followed by a &quot;#&quot; sign.<P>

Three UUCP configuration files have to be modified.
Figure 1, Figure 2, 
and Figure 3 are excerpts from these files, showing standard
Hayes device 
configurations and their &quot;pager equivalents.&quot;
Listing 1, uupager, 
is the paging script that actually executes a call.
A copy of this 
script was placed in the /usr/bin directory.<P>

<B>Observed Performance Data</B><P>

In order to test the reliability of the system I made
five test entries 
in the /etc/uucp/Systems file, as shown in Figure 4.
Then 
I wrote a simple loop script that would call these &quot;machines&quot;

in succession, once every two minutes, for a total of
30 calls in 
one hour. This script is shown in Listing 2. Table 1 shows the observed 
results.<P>

<B>Conclusions</B><P>

While the performance was far from perfect, I was very
happy with 
the results. Overall, I was successfull in placing a
page over 50 
percent of the time, as shown in the Totals in Table 1.
Since there 
are many variables beyond my control, the uupager script
takes 
this into account and tries multiple times to place
the call. I leave 
it to more experienced system administrators to create
an improved 
and possibly binary solution. <P>




<P>


<H1>About the Author</H1><p>
<P>
Carlos Francisco Gomez is a Sun-based UNIX Systems
Administrator 
in pursuit of a Master's degree in Architecture (Technology,
CAD) 
at UCLA. He can be reached at cfg@netcom.com. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
