<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i02: Listing 3: Changing a user's password</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a4_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 3</span></td>
		<td><span class=navbarLink><a href="a4_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1994/mar94.tar"><b class=codeListing>mar94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 3: Changing a user's password</H1><p>
<PRE>
/*****************************************************************************
*                             Listing 3                                     *
*****************************************************************************/

/*
* Program to change a user's password
*/

#include        &lt;stdio.h&gt;
#include        &lt;pwd.h&gt;

extern char *getlogin ();
extern char *getpass ();
extern char *crypt ();
extern char *malloc ();

static int  put_encrypted    ();

main (argc, argv)
int argc;
char *argv [];
{
char encrypted [15];
char password [BUFSIZ];
char *cp;
char *oldpwd;
char *newpwd1;
char *newpwd2;
char *user;
int  isroot;
struct passwd *pe;

user = (char *) NULL;
isroot = (getuid () == 0);

/*
* Find out the name of the user currently logged in
*/
if ((user = getlogin ()) == NULL)
{
/*
* You may or may not want to include this secondary
* method of determining the current user
*/
if ((pe = getpwuid (getuid ())) != NULL)
cp = pe-&gt;pw_name;
else
fprintf (stderr, &quot;%s: Who are you ???\n&quot;, argv [0]);
}

/*
* We must do this to get root privileges on some systems, although
* we may be already running with setuid root privileges.
*/
setuid (geteuid ());

/*
* Determine the user whose password is to be changed
*/

if (argc &gt; 1)
{
user = (char *) NULL;

/*
* Take user from command line argument
*/
if (argc &gt; 2)
fprintf (stderr, &quot;Usage: %s [username]\n&quot;, argv [0]);
else
{
/*
* Only allow the super user to change other user's passwords
*/
if (!isroot &amp;&amp; (user == NULL || strcmp (user, argv [1]) != 0))
fprintf (stderr, &quot;%s: Permission denied\n&quot;, argv [0]);
else
user = argv [1];
}
}

/*
* Check for validity of user
*/
if (user == (char *) NULL)
exit (1);

if (getpwnam (user) == NULL)
{
fprintf (stderr, &quot;%s: Unknow user %s\n&quot;, argv [0], user);
exit (1);
}

/*
* Get old (encrypted) password
*/
if (get_encrypted (user, password) != 0)
{
perror (argv [0]);
exit (1);
}

printf (&quot;Changing password for user %s\n&quot;, user);

/*
* If you are super user or if the user had no password,
* then we do not need to verify the old password.
*/
if (!isroot &amp;&amp; strlen (password) != 0)
{
if ((oldpwd = getpass (&quot;Old password: &quot;)) == NULL)
{
perror (argv [0]);
exit (1);
}

/*
* The first two letters of the current password are the
* salt used to encrypt the password. Consequently we
* must use it again to encrypt the password that the
* user claims is the current one.
*/
cp = crypt (oldpwd, password);

if (strcmp (cp, password) != 0)
{
/*
* The user was mistaken. The inputed password is not
* the same as the current password.
*/
fprintf (stderr, &quot;Sorry.\n&quot;);
exit (1);
}
}

/*
* So far so good. Now lets get the user to input the new password.
* We make the user do it twice to ensure that they did not make
* a typing error while entering it.
*/
if ((newpwd1 = getpass (&quot;New password: &quot;)) == NULL)
{
perror (argv [0]);
exit (1);
}

/*
* getpass() returns pointer to static data. Copy it before we
* call it again.
*/
strcpy (password, newpwd1);

if ((newpwd2 = getpass (&quot;Retype new password: &quot;)) == NULL)
{
perror (argv [0]);
exit (1);
}

/*
* Are they the same ???
*/
if (strcmp (password, newpwd2) != 0)
{
fprintf (stderr, &quot;Mismatch - password unchanged\n&quot;);
exit (1);
}

/*
* At this time you may want to implement some rules for
* the password. Some examples:
*
*   - Minimum password length
*   - Password different from username
*   - Password not in dictionary file
*/

/*
* Create a new encrypted password
*/
make_passwd (password, encrypted);

/*
* Save the new password
*/
put_encrypted (user, encrypted);
}

static int
put_encrypted (user, encrypted)
char *user;
char *encrypted;
{
fprintf (stderr, &quot;Encrypted password for user %s is %s\n&quot;, user, encrypted);
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
