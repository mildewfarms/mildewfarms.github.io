<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i02: Listing 1: checker_proc.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a3_l6.htm">Listing 6</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l7.htm">Listing 7</a></span></td>
		<td><a href="../../../../source/SA/1994/mar94.tar"><b class=codeListing>mar94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: checker_proc.c</H1><p>
<PRE>
/*
* Processing routings for  Distributed File Checker
*
* Filename checker_proc.c
* Author:     Clive King
* Comment:    Server routines
* Version 1.1
* Date    05 Nov 1993
*
*/

#include &lt;sys/time.h&gt;
#include &lt;malloc.h&gt;
#include &lt;rpc/rpc.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;pwd.h&gt;
#include &lt;grp.h&gt;
#include &lt;syslog.h&gt;
#ifdef SVR4
#include &lt;sys/dirent.h&gt;
#include &lt;string.h&gt;
#else
#include &lt;sys/dir.h&gt;
#include &lt;strings.h&gt;
#endif

#include &quot;checker.h&quot;
#include &quot;checker_proc.h&quot;

char *dirname;

namelist nl= NULL;
namelist *nlp;

/*
* routine called from server stub to check the attributes of the file
* and to return the state of the file in question
*/

access_struct *access_1(details)
nametype *details;
{
struct stat buf;
static access_struct file_report;   /* head of the linked list */
char *perms;  /* pointer to string to store permissions */
char *owner;  /* pointer to string to store owener */
char *grp;    /* pointer to string to store group */
char *date;   /* pointer to string to store date */

dirname = (char *)malloc( FILEMAX );
perms = (char *)malloc( PERMAX );
owner = (char *)malloc( NAMEMAX );
grp = (char *)malloc( NAMEMAX );
date = (char *)malloc( DATEMAX );

/* split the fields up into the consituent parts */
split_fields(details, dirname, perms, owner, grp, date);

xdr_free(xdr_access_struct, (char *)&amp;file_report);

nlp = &amp;file_report.access_struct_u.list;
nl = *nlp = (namenode *)malloc(sizeof(namenode));
file_report.access_struct_u.list-&gt;result = 0;

if (access(dirname, F_OK) != 0)    {
add_error(&quot;&quot;, &quot;Can not access file&quot;);
return (&amp;file_report);
}

if (stat(dirname, &amp;buf) == -1)    {
add_error(&quot;&quot;, &quot;Can not stat file&quot;);
return (&amp;file_report);
}

/* check permissions of the file */
check_perms(&amp;buf, perms[0], S_ISUID, S_ISGID, S_ISVTX, &quot;permissions&quot;);
check_perms(&amp;buf, perms[1], S_IRUSR, S_IWUSR, S_IXUSR, &quot;owner permissions&quot;);
check_perms(&amp;buf, perms[2], S_IRGRP, S_IWGRP, S_IXGRP, &quot;group permissions&quot;);
check_perms(&amp;buf, perms[3], S_IROTH, S_IWOTH, S_IXOTH, &quot;other permissions&quot;);

check_owner(&amp;buf, owner);  /* check ownership */
check_grp(&amp;buf, grp);      /* check group */

/* do not check date field if NO_DATE_CHECK, */
if (strchr(date, NO_DATE_CHECK) == NULL)
check_date(&amp;buf, date);

/* If the checks went well, put O.K. in the error field */
/* The client checks result to determine the test outcome */

if (file_report.access_struct_u.list-&gt;result == 0)    {
/* allocate first element in list to avoid xdr problems */
add_error(&quot;&quot;, &quot;O.K.&quot;);
file_report.access_struct_u.list-&gt;result = 0;
}

return (&amp;file_report);
}

/*  *********************************************************  */
/* check_perms -- determine if file permissions  are correct
*
* Argument - pointer to files stat structure
* Argument - string value of the correct file permissions
* Argument - Mask to check read (or setuid) field
* Argument - Mask to check write (or setgid) field
* Argument - Mask to check execute (or sticky bit) field
* Argument - error message base string
* Result
*   0 for correct permissions
*   1 for incorrect permissions
*   If an error occurs, then the global err_string is set.
*
* Global array err_string set with type of permissions error
*
*/

void check_perms(buf, value, rmask, wmask, xmask, errstr)
struct stat *buf;
char value;
int rmask;
int wmask;
int xmask;
char *errstr;
{
int tmp;
/* convert char to int */
tmp = value - '0';

if (buf-&gt;st_mode &amp; rmask)    {       /* check read permssions */
if (tmp &gt;= 4)
tmp -= 4;   /* the order of the = and - is important here */
else
if (rmask == S_ISUID)
add_error(&quot;set uid&quot;, errstr);
else
add_error(&quot;read&quot;, errstr);
}
else
if (tmp  &gt;= 4)	   {
if (rmask == S_ISUID)
add_error(&quot;set uid&quot;, errstr);
else
add_error(&quot;read&quot;, errstr);
tmp -= 4;
}

if (buf-&gt;st_mode &amp; wmask)    {       /* check write permissions */
if (tmp  &gt;= 2)
tmp -= 2;
else
if (wmask == S_ISGID)
add_error(&quot;set gid&quot;, errstr);
else

add_error(&quot;write&quot;, errstr);
}
else
if (tmp  &gt;= 2)	   {
if (wmask == S_ISGID)
add_error(&quot;set gid&quot;, errstr);
else
add_error(&quot;write&quot;, errstr);
tmp -= 2;
}

if (buf-&gt;st_mode &amp; xmask) {     /* check execute permissions */
if (tmp  &gt;= 1)
tmp -= 1;
else
if (xmask == S_ISVTX)
add_error(&quot;sticky&quot;, errstr);
else
add_error(&quot;execute&quot;, errstr);
}
else
if (tmp  &gt;= 1)	   {
if (xmask == S_ISVTX)
add_error(&quot;sticky&quot;, errstr);
else
add_error(&quot;execute&quot;, errstr);
tmp -= 1;
}
}

/*  ***********************************************************  */
/* check_owner -- determine if the owner of the file is correct
*
* Argument -  pointer to files stat structure
* Argument -  string value the group should be
* Result
*   0 for correct ownership
*   1 for incorrect ownership
*   If an error occurs, then the global err_string is set.
*
*   Global array err_string is set with error string and correct owner name
*
*/
void check_owner(buffer, own)
struct stat *buffer;
char *own;
{
struct passwd *pass;

if ((pass = getpwnam(own)) == NULL)    {
add_error(own, &quot; : no such user on this system&quot;);
return;
}

if (buffer-&gt;st_uid != pass-&gt;pw_uid)
add_error(&quot;incorrect owner : should be &quot;, own);
}

/*  ***********************************************************  */
/* check_owner -- determine if the group of the file is correct
*
* Argument -  pointer to files stat structure
* Argument -  string value the group should be
* Result
*   0 for correct group
*   1 for incorrect group
*   If an error occurs, then the global err_string is set.
*
*   Global array err_string is set with error string and correct group name
*
*/
void check_grp(buffer, grp)
struct stat *buffer;
char *grp;
{
struct passwd *pass;
struct group *gr;

/* search through the groups file for the appropriate gid */
if ((gr = getgrnam(grp)) == NULL)    {
/* if the gid is not in groups but the file is owned by a user
we need to check the gid field in the passwd file */

if ((pass = getpwuid(atoi(grp))) == NULL)	{
add_error(grp, &quot; : no such group on this system&quot;);
return;
}
else
if (buffer-&gt;st_gid != pass-&gt;pw_gid) {
add_error(&quot;incorrect group : should be &quot;, grp);
return;
}
}
else
if (buffer-&gt;st_gid != gr-&gt;gr_gid) {
add_error(&quot;incorrect group : should be &quot;, grp);
return;
}
}

/*  ***********************************************************  */
/* check_date -- Checks the date of the last modification time of the file
*               is after the latest acceptable revision date for that file
*
* Argument -  pointer to files stat structure
* Argument -  string value the date should be
*
* Result
*   0 for correct date
*   1 for incorrect date
*   If an error occurs, then the global err_string is set.
*
*   Global array err_string is set with error string and correct date
*
* Notes
*   Both UK and US date styles available, UK by default
*   Compile with -DUSDATE for US style dates
*/

void check_date(buffer, dat)
struct stat *buffer;
char *dat;
{
char *tmp;
int sep_count=0;
char day[3];
char month[3];
char year[5];
char nowdate[18];
char thedate[18];
struct tm tmtime;

int x = 0;
tmp = dat;

while(*tmp != NULL) {
if ( *tmp == DATE_SEPARATOR ) {
x = 0;
sep_count++;
}
else {
switch (sep_count) {
case DATE_FIELD_ONE : {
day[x] = *tmp;
day[x+1] = NULL;
break;
}
case DATE_FIELD_TWO : {
month[x] = *tmp;
month[x+1] = NULL;
break;
}
case 2 : {
year[x] = *tmp;
year[x+1] = NULL;
break;
}
}
x++;
}
tmp++;
}

/* get the date of the file */
tmtime = *gmtime(&amp;buffer-&gt;st_mtime);

/* get it into a useable format of 01 0 and 1991 */
if (strftime(thedate, 18, &quot;%Y%m%d&quot;, &amp;tmtime) == 0)    {
add_error(&quot;strftime failed&quot;, &quot;possible problem with date field&quot;);
return;
}

(void) sprintf(nowdate,&quot;%s%s%s&quot;, year, month, day);

if (atoi(thedate) &lt; atoi(nowdate)) {
add_error(dat, &quot; is too old&quot;);
return;
}
}

/*  ***********************************************************  */
/* add_error -- adds an error to the current node
* Arguments
*   char * - the type of error
*   char * - nature of problem
* Result
*   adds an error message to the err_string field of the current node
*/

void add_error(type, str)
char *type;
char *str;
{
char error_string[100];
unsigned int strlength;

(void) sprintf(error_string, &quot;%s  %s&quot;, type, str);

if ((nl = *nlp = (namenode *)malloc(sizeof(namenode))) == NULL) {
(void) syslog(LOG_ERR, &quot;malloc failed for checker client&quot;);
exit(1);
}

strlength = strlen(error_string)+ strlen(dirname) + 5;
if ((nl-&gt;err_string = (char *) malloc(strlength)) == NULL)  {
(void) fprintf(stderr, &quot;malloc failed&quot;);
exit(1);
}

(void) sprintf(nl-&gt;err_string, &quot;%s : %s&quot;, dirname, error_string);
nl-&gt;result = 1;
nlp = &amp;nl-&gt;next;
*nlp = NULL;
}

/*  ***********************************************************  */
/* split_fields -- Split a line passed to client into constituent parts
*
* Arguments
*    details - Line passed from the client
*    filename - name of the file : derived from details
*    perm - permissions on the file : derived from details
*    own - owner of the file : derived from details
*    grp -group of the file : derived from details
*    dates - : derived from details
*
* Result - returned via filename, perm, own, grp and dates
*/

void split_fields(details, filename, perm, own, grp, dates)
nametype *details;
char *filename;
char *perm;
char *own;
char *grp;
char *dates;
{
int x=0;
int seperator_count=0;
char *det;

/* to add more field, add to the case statement */
for(det=*details;(*det != '\n') &amp;&amp; (*det != NULL);det++) {
if (*det == DETAILS_SEPARATOR)	{
seperator_count++;
x=0;
}
else {
switch (seperator_count) {
case 0:  {
filename[x] = *det;
filename[x+1] = NULL;
break;
}
case 1 : {
perm[x] = *det;
perm[x+1] = NULL;
break;
}
case 2 : {
own[x] = *det;
own[x+1] = NULL;
break;
}
case 3 : {
grp[x] = *det;
grp[x+1] = NULL;
break;
}
case 4 : {
dates[x] = *det;
dates[x+1] = NULL;
break;
}
}
x++;
}
}
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
