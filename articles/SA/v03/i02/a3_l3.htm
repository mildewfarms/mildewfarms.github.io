<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i02: Listing 3: checktool.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink>Listing 3</span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a3_l6.htm">Listing 6</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l7.htm">Listing 7</a></span></td>
		<td><a href="../../../../source/SA/1994/mar94.tar"><b class=codeListing>mar94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 3: checktool.c</H1><p>
<PRE>
/*
*   Filename checktool.c
*   Author C M King
*   Version 1.1
*   Date    05 Nov 1993
*
*/

#include &lt;stdio.h&gt;
#include &lt;rpc/rpc.h&gt;
#include&lt;sys/param.h&gt;
#include&lt;errno.h&gt;
#ifdef SVR4
#include&lt;string.h&gt;
#else
#include&lt;strings.h&gt;
#endif
#include&lt;malloc.h&gt;
#include&lt;ctype.h&gt;

#include &quot;checker.h&quot;
#include &quot;checker_proc.h&quot;

int main(argc,argv)
int argc;
char **argv;
{
CLIENT *cl;
FILE *filedes;
char *server;
char *dir;

access_struct *res;
namelist tmp;
int nodate = FALSE;
int verbose = FALSE;
char c; /* for command line options */
int x; /* a counter */
char *testfile;
char path[MAXPATHLEN];
char *filepath;

if (argc &lt; 3) {
(void) fprintf(stderr, &quot;usage: %s host pathname\n&quot;,argv[0]);
exit(1);
}

/* assumes that arguments go before flags */

server = argv[argc - 2];
dir = argv[argc - 1];

/* parse arguments*/
while ((c = getopt(argc, argv, &quot;dv:&quot;)) != -1)
switch (c) {
case 'd' : {
nodate = TRUE;
(void) printf(&quot;Not taking date into account\n&quot;);
break;
}
case 'v' : {
verbose = TRUE;
(void) printf(&quot;Verbose output\n&quot;);
break;
}
}

if ((filedes = fopen(dir, &quot;r&quot;)) == NULL)    {
perror(&quot;error on fopen&quot;);
exit(1);
}

if ((testfile = (char *) malloc(sizeof(char) * NAMELEN)) == NULL) {
perror(&quot;malloc failed for testfile&quot;);
exit(1);
}

if ((filepath = (char *) malloc(sizeof(char) * NAMELEN)) == NULL) {
perror(&quot;malloc failed for filepath&quot;);
exit(1);
}

if ((cl = clnt_create(server, DIRPROG, DIRVERS, &quot;tcp&quot;)) == NULL) {
clnt_pcreateerror(server);
exit(1);
}
/* set default value of path */
(void) strcpy(path, &quot;/&quot;);

while (fgets(testfile, NAMELEN, filedes) != NULL)    {
/* Check that lines do not start with spaces */
if (isspace(testfile[0])) {
(void) fprintf(stderr, &quot;********** line %s \t\tstarts with a space\n&quot;, testfile);
continue;
}

/* The first character that is  a # is a comment */
/* % is used to denote that a path is being defined */

switch (testfile[0]) {
case '#' : {
continue;
}
case '%' : {
for(x=1;!isspace(testfile[x]); x++)  {
path[x - 1] = testfile[x];
}
path[x - 1] = NULL;
continue;
}
default :
break;
}

/* append the pathname to the description of the file */
(void) sprintf(filepath, &quot;%s/%s&quot;, path, testfile);

if (nodate == TRUE)  /* put a + into the date field */
testfile[strlen(filepath) - 2] = NO_DATE_CHECK;

/* Call remote procedure access_1 on the server */
if ((res = access_1(&amp;filepath, cl)) == NULL)  {
clnt_perror(cl, server);
exit(1);
}

/* on error : print out the path */
if (res-&gt;errno != 0)         {
(void) fprintf(stderr, &quot;error in comms&quot;);
exit(1);
}

for(tmp = res-&gt;access_struct_u.list; tmp != NULL; tmp = tmp-&gt;next) {
if (tmp-&gt;result != 0)	     {
(void) printf(&quot;%s\n&quot;, tmp-&gt;err_string);
}
else { /* things went well */
if (verbose)
(void) printf(&quot;no problem with %s\n&quot;, tmp-&gt;err_string );
break;
}
}
}
return(0);
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
