<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i05: Listing 1: The verify script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a8.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1994/sep94.tar"><b class=codeListing>sep94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: The verify script</H1><p>

<PRE>
#!/bin/ksh
########################################################################
#
# FILE NAME: verify
#
# DESCRIPTION :
#     This file contains both the data and ksh-script code needed
#     to discover significant deltas between the current
#     system configuration and the predetermined baseline:
#                 DEVELOPMENT CONFIGURATION LOAD A
#
# ASSUMPTIONS:
#     Script designed to run on any DEC 5000 ULTRIX class machine.
########################################################################
#
#
# USAGE:
#   verify [-v]
#   v: verbose
#   Normal output is only of items not in baseline.
#   Verbose output is status of all items.
#
# NOTES:
#     1) This script requires root privilege to execute properly.
#        This can be done effectively for any user by setting the UID
#        and GID bits on this file:
#           chown root.system verify
#           chmod 6755 verify
#     2) Key to special symbols within this script:
#           WS:         whitespace (space tab)
#           FILE_SPEC:  absolute path of a file
#           [...]:      repeat previous expression, with WS if needed.
#     3) ULTRIX 4.2a-specific commands.  If the following are modified in
#        later ULTRIX releases, then configuration items using these
#        commands may need to be modified as well.
#           kvar(8)-  ULTRIX RISC read kernel variables in memory.
#           uerf(8)-  ULTRIX error report formatter (system messages).
#           setld(8)- ULTRIX system software management utility.
#           lmf(8)-   ULTRIX product license management utility.
#     4) All data required for this script to run are included in this file.
#     5) This script creates one (1) other temporary file:
#        '/tmp/current_setld'.
#
##########################################################################

BASELINE_LOAD=&quot;DEVELOPMENT LOAD CONFIGURATION A&quot;
HOST=`/bin/hostname`
KERNEL_FILE=&quot;/vmunix&quot;

#SET UP ALIASES TO AVOID PATH HASSLES
#UNIX-SPECIFIC UTILITIES
alias awk=/bin/awk
alias cat=/bin/cat
alias cut=/usr/bin/cut
alias dc=/usr/bin/dc
alias df=/bin/df
alias diff=/bin/diff
alias echo=/bin/echo
alias egrep=/usr/bin/egrep
alias expr=/bin/expr
alias find=/usr/bin/find
alias head=/usr/ucb/head
alias ifconfig=/bin/ifconfig
alias ls=/bin/ls
alias netstat=/usr/ucb/netstat
alias pr=/usr/bin/pr
alias ps=/bin/ps
alias pstat=/etc/pstat
alias sed=/bin/sed
alias sum=/usr/bin/sum
alias tail=/usr/ucb/tail
alias touch=/usr/bin/touch
alias tr=/usr/bin/tr
alias wc=/usr/ucb/wc
alias xargs=/usr/bin/xargs

#ULTRIX-SPECIFIC UTILITIES
alias kvar=/usr/etc/kvar
alias lmf=/etc/lmf
alias setld=/etc/setld

#BSD-SPECIFIC UTILITIES
alias chpt=/bin/chpt

#X11-SPECIFIC UTILITIES
alias xlsfonts=/usr/bin/X11/xlsfonts

#SET UP VERBOSITY:  VERBOSE TO STANDARD OUT, DEFAULT TO '/dev/null'.
if [ $# -eq 0 ]; then
OUT='/dev/null'
else
OUT=''
fi

#########################################################################
#########################################################################
#################    START CONFIGURATION ITEMS     ######################
#########################################################################
#########################################################################

#HARDWARE CONFIGURATION===========================
#=================================================
#DESCRIPTION:   TOTAL MBYTES (1024*1024 BYTES) OF RAM.
#DERIVED FROM:  uerf(8) and '/usr/adm/syserr/$HOSTNAME' SYSTEM STARTUP FILE.
#FORMAT:        MBYTES_RAM
#DATA TYPE:     INT
#EXAMPLE:       32
BASELINE_REAL_MEM=32

#DESCRIPTION:   PERIPHERALS AND THEIR SCSI IDS (ADDRESS).
#DERIVED FROM:  uerf(8) and '/usr/adm/syserr/syserr.$HOST' SYSTEM STARTUP FILE.
#FORMAT:        SCSI_ID# WS DEVICE_NAME [...]
#DATA TYPE:     INT ALPHANUM
#EXAMPLE:       0 RZ56 3 RX23 5 TZK10
set -A BASELINE_SCSI_DEVICES \
0 RZ56 \
3 RX23 \
5 TZK10

#DESCRIPTION:   LIST OF MOUNTED/SWAP DISK PARTITIONS.
#DERIVED FROM:  chpt(8) AND '/etc/fstab'
#FORMAT:        PARTITION_LETTER WS PARTITION_SIZE WS TYPE [...]
#PARTITION_SIZE IS IN 512-BYTE SECTORS;
#TYPE IS ONE OF FILESYSTEM (&quot;FS&quot;) OR &quot;SWAP&quot;.
#DATA TYPE:     ALPHA INT &quot;fs&quot;|&quot;swap&quot;
#EXAMPLE:       a 32768 fs b 380700 swap f 885706 fs
set -A BASELINE_PARTITIONS \
a 32768  fs \
b 380700 swap \
f 885706 fs

#DESCRIPTION:   NUMBER OF ACTIVE NFS.
#DERIVED FROM:  df(1)
#FORMAT:        NUMBER_OF_ACTIVE_NFS
#DATA TYPE:     INT
#EXAMPLE:       0
BASELINE_NUM_NFS=0

#DESCRIPTION:   NUMBER OF ADDITIONAL LOCAL MOUNTED FILESYSTEMS
#DERIVED FROM:  df(1)
#FORMAT:        NUMBER_OF_ADDITIONAL_LOCAL_MOUNTED_FILESYSTEMS
#DATA TYPE:     INT
#EXAMPLE:       0
BASELINE_NUM_LOCAL_FS=0

#FILE CHECK SUMS=================================
#================================================
#DESCRIPTION:   CHECKSUMS OF FILES.
#DERIVED FROM:  sum(1)
#FORMAT:        FILE_SPEC WHITESPACE CHECKSUM [...]
#EXAMPLE:       /vmunix 55947 2660 /usr/bin/Xws 36304 2264

#CHECKSUMS ARE SLOW, KEEP NUMBER TO A MINIMUM.
set -A BASELINE_CHECKSUMS \
/vmunix         55947   2660 \
/usr/bin/Xws    36304   2264

#SYSTEM TABLES===================================
#=================================================
#DESCRIPTION:   KERNEL SYSTEM TABLE SIZES.
#DERIVED FROM:  pstat(8)
#FORMAT:        SYSTEM_TABLE_NAME WS TABLE_SIZE [...]
#DATA TYPE:     ALPHA INT
#EXAMPLE:       files 264 gnodes 204 processes 96
set -A BASELINE_SYSTEM_TABLE \
files       379 \
gnodes      284 \
processes   160

#KERNEL VARIABLE =================================
#=================================================
#DESCRIPTION:   ULTRIX KERNEL VARIABLES
#DERIVED FROM:  kvar(8)
#FORMAT:      FIELD_NAME WS FIELD_VALUE WS KERNEL_VAR WS FIELD_OFFSET [...]
#FIELD_NAME=    NAME WRITTEN TO STD-OUT; GOOD IDEA TO MAKE SAME AS '*.h' FILES.
#VARIABLE_NAME= ACTUAL KERNEL VARIABLE THAT CONTAINS THE FIELD_NAME.
#FIELD_OFFSET=  THE LOCATION OF THE FIELD_NAME WITHIN THE KERNEL_VAR.
#DATA TYPE:     ALPHA INT ALPHA INT
#EXAMPLE:       SEMMAP 60 seminfo 0 SEMMNI 30 seminfo 4
set -A BASELINE_KERNEL_VARIABLES \
SEMMAP       30    seminfo    0 \
SEMMNI       30    seminfo    4 \
SEMMNS      180    seminfo    8 \
SEMMNU       60    seminfo   12 \
SMMNI       100     sminfo    8 \
SMSEG        12     sminfo   12 \
MSGMAP      300    msginfo    0 \
MSGMNI       50    msginfo   12 \
MSGTQL      200    msginfo   20 \
MSGTQL      200    msginfo   20 \
LOTSFREE   1953   lotsfree    0 \
DESFREE     472    desfree    0 \
MINFREE     244    minfree    0

#NETWORK ROUTING AND I/Fs=========================
#=================================================
#DESCRIPTION:   NETWORK IDENTIFICATION AND ROUTING INFO
#DERIVED FROM:  netstat(1)
#FORMAT:        DESTINATION WS GATEWAY WS INTERFACE [...]
#DATA TYPE:     NETWORK_IP_ADDRESS HOSTNAME INTERFACE_NAME
#EXAMPLE:       127.158 my_hostname ln0
#CAN ALSO USE INFO FROM '/etc/rc' OR '/etc/rc.local' IF YOU
#NEED MORE PORTABILITY.
LN0_DESTINATION=127.158; LN0_GATEWAY=$HOST
LN1_DESTINATION=127.157; LN1_GATEWAY=${HOST}P
set -A BASELINE_ROUTES \
$LN0_DESTINATION $LN0_GATEWAY ln0 \
$LN1_DESTINATION $LN1_GATEWAY ln1

#X11 CONFIG=========================================
#=================================================
#DESCRIPTION:   LOCAL FONTS.
#DERIVED FROM:  xlsfonts(1X)
#FORMAT:        PRIVATE_FONT_NAME NUMBER_FONTS [...]
#DATA TYPE:     ALPHANUM INT
#EXAMPLE:       'space*' 4 8x13 1
#NOTE: TO SPECIFY A FAMILY OF FONTS, USE WILDCARDS (AS DESCRIBED
#IN xlsfonts(1X)) ENCLOSED IN SINGLE QUOTES.
set -A BASELINE_PRIVATE_FONTS \
'space*' 8 \
8x13     1

#APPLICATION PROGRAM LICENSING INFO===============
#=================================================
#DESCRIPTION:   SL-GMS LICENSING INFO.
#DERIVED FROM:  './gms/c*' './gms/lib/keys' and './gms/tsn'
#FORMAT:        VALUE
#DATA TYPE:     ALPHANUM
#EXAMPLE:       D4361932
BASELINE_GMS_VERSION=4.03
BASELINE_GMS_KEY=123456
BASELINE_GMS_TSN=1234

#DESCRIPTION:   RS1 LICENSE INFO.
#DERIVED FROM:  '/usr/rs1/license.dat'
#FORMAT:        TEXT OF LICENSE WITH IMBEDDED QUOTES ESCAPED (E.G. \&quot;).
#DATA TYPE:     ALPHANUM
#EXAMPLE:       &quot;SERVER DEMO DEMO \&quot;Dcs\&quot;&quot;
#THE FOLLOWING IS THE GENERIC RS/1 LICENSE.
BASELINE_RS1_LICENSE=&quot;SERVER DEMO DEMO
2222 DAEMON bbnsp bbnsp
FEATURE Rsr bbnsp 100.000 11-JAN-2009 0 zcsq0s1uz4xaw5a \&quot;Dcs\&quot; DEMO&quot;

#DESCRIPTION:   OPERATING SYSTEM USER LICENSE INFO.
#DERIVED FROM:  lmf(8)
#FORMAT:        SIZE (LICENSED NUMBER OF USERS) FOR ULTRIX
#DATA TYPE:     INT
#EXAMPLE:       8
BASELINE_ULTRIX_LICENSE=8

#VENDOR OPERATING SYSTEM SW CONFIG================
#=================================================
#DESCRIPTION:   LIST OF INSTALLED ULTRIX SYSTEM SOFTWARE SUBSETS.
#DERIVED FROM:  setld(8)
#FORMAT:        SUBSET_NAME WS [...]
#DATA TYPE:     ALPHANUM
#EXAMPLE:       COMU4BACKEND205 DXMMRM110
set -A BASELINE_SETLD \
COMU4BACKEND205 DXMMRM110 DXMMWM110 DXMX11110 DXMXM110 SPREXE300 \
SPRMAN300 UDTAFM420 UDTBASE420 UDTBASE425 UDTBIN420 UDTBIN425 \
UDTCOMM420 UDTCOMM425 UDTDCMT420 UDTEXER420 UDTEXER425 UDTINET420 \
UDTINET425 UDTMAN420 UDTMAN425 UDTMANPGMR420 UDTMANPGMR425 UDTNFS420 \
UDTNFS425 UDTPGMR420 UDTPGMR425 UDTPRINT420 UDTPRINT425 UDTSEC420 \
UDTSEC425 UDTUMAIL420 UDWDECW420 UDWFONT420 UDWMAN420 UDWMAN425 \
UDWSER425 UDWX11420 UDWX11425 UDWXDEV420 UDWXDEV425 UDXINET420 \
UDXMAN420 UDXUNFONTS420 UDXUNMAN420 UDXUNMIT420 UWSPAT40263S421

#FILES AND FILE PERMISSIONS=======================
#=================================================
#DESCRIPTION:   FILE PERMISSIONS
#DERIVED FROM:  find(1)
#FORMAT:        FILE_NAME WS FILE_PERMISSION [...]
#DATA TYPE:     FILE_SPEC OCTAL_FILE_PERMISSION
#EXAMPLE:       /dev/mem 644 /user/test 6755
set -A BASELINE_FILE_PERM \
$KERNEL_FILE   755 \
/dev/mem       644 \
/dev/kmem      644 \
/dev/rrz0c     644 \
/dev/tty00     666 \
/dev/tty01     666

#DESCRIPTION:   LIST OF FILES ADDED TO SYSTEM.
#DERIVED FROM:  test(1)
#FORMAT:        FILE_NAME WS [...]
#DATA TYPE:     FILE_SPEC
#EXAMPLE:       /usr/users
set -A SITE_ADDED_FILES \
/usr/users /luser /bin/ksh /etc/ttys.new

#DESCRIPTION:   LIST OF FILES STRIPPED FROM SYSTEM
#DERIVED FROM:  test(1)
#FORMAT:        FILE_NAME WS [...]
#DATA TYPE:     FILE_SPEC
#EXAMPLE:       /usr/sys/MIPS
set -A SITE_STRIPPED_FILES \
/usr/sys/MIPS /usr/lib/DPS

#MISC USER INFO===================================
#=================================================
#DESCRIPTION:   LIST OF REQUIRED USERS AND GROUPS
#DERIVED FROM:  '/etc/passwd', '/etc/group'
#FORMAT:        NAME WS [...]
#DATA TYPE:     ALPHANUM
#EXAMPLE:       testguy1 testguy2
set -A BASELINE_USERS \
test1
set -A BASELINE_GROUPS \
test1

#DESCRIPTION:   ROOT UMASK
#DERIVED FROM:  '/.profile'
#FORMAT:        UMASK
#DATA TYPE:     OCTAL_UMASK
#EXAMPLE:       022
BASELINE_ROOT_UMASK=002

#PROCESS INFO======================================
#==================================================
#DESCRIPTION:   PROCESSES THAT SHOULD_NOT/SHOULD BE RUNNING
#DERIVED FROM:  ps(1)
#FORMAT:        PROCESS_NAME WS [...]
#DATA TYPE:     ALPHANUM
#EXAMPLE:       portmap biod ypbind
set -A NON_BASELINE_PROCESSES \
portmap biod ypbind sendmail timed routed
set -A BASELINE_PROCESSES \
syslog cron lpd elcsd inetd snmpd

#########################################################################
#########################################################################
#################    END CONFIGURATION ITEMS       ######################
#########################################################################
#########################################################################

#SET UP COMMONLY USED VARIABLES
DF=`df`
set -A PSTAT `pstat -T`
CHPT=`chpt -q /dev/rrz0c|tail -8|awk '{print $1,$4}'`
DISPLAY=${HOST}:0.0
PS=`ps -aux`
NETSTAT=`netstat -r`

echo &quot;===================================================================&quo;
date
echo &quot;Configuration verification for:        ${HOST}&quot;
echo &quot;Checked against system baseline load:  $BASELINE_LOAD.&quot;
echo &quot;===================================================================&quo;
echo &quot; &quot;

#=========================HARDWARECONFIGURATION==========================
#=========================================================================
echo &quot;--- Hardware Configuration ---&quot; 1&gt;$OUT
#THE FOLLOWING HARDWARE CHECKS UTILIZE THE ULTRIX SYSTEM EVENT LOGGER,
#WHICH AMONG OTHER THINGS, RECORDS SYSTEM HARDWARE CONFIG UPON STARTUP.
#THESE EVENTS ARE WRITTEN TO AN EVENT FILE, WITH THE EVENT REPORT FORMATTER
#uerf(8) USES.  BECAUSE THE EVENT REPORTER IS SLOW (12X SLOWER THAN THE
#METHOD USED HERE), THE EVENT FILE IS MANUALLY SEARCHED FOR THE MOSTRECENT
#SYSTEM STARTUP, AND THAT LINE NUMBER IS RECORDED.  THEN THE HARDWARE
CONFIG
#INFO CONTAINED IN THE EVENT FILE AT THAT LINE NUMBER IS CUT OUT.
#CHECK RAM SIZE SYS_EVENT_FILE=/usr/adm/syserr/syserr.${HOST}
LAST_STARTUP=`egrep -n 'System #[0-9]' $SYS_EVENT_FILE|tail -1|cut -f1 -d:`
STARTUP_INFO=`tail +$LAST_STARTUP $SYS_EVENT_FILE|head -30`
REAL_MEM=`expr &quot;$STARTUP_INFO&quot; : '.*real mem =\([ 0-9]*\)'`
((REAL_MEM=REAL_MEM/1024/1024))
if [ $REAL_MEM -eq $BASELINE_REAL_MEM ]; then
echo &quot;Baseline amount of RAM ($REAL_MEM)MB installed.&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Amount of RAM ($REAL_MEM)MB installed &quot;
echo &quot;NOT baseline ($BASELINE_REAL_MEM)MB.&quot;

fi

#CHECK ACTIVE SCSI DRIVES FOR BASELINE DRIVES.
#NOTE MUST HAVE LEADING BLANK IS REQUIRED FOR expr TO WORK.
set -A SCSI_DEVICES &quot; &quot;`expr &quot;$STARTUP_INFO&quot;|egrep &quot;at asc0&quot; \
|cut -f1,6 -d' '|sed 's/[()]//g;s/[a-z][a-z]\([0-7]\)/\1/g'`
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_SCSI_DEVICES[*]} ]; do
BASELINE_ID=${BASELINE_SCSI_DEVICES[$ARRAY_ELEMENT]}
BASELINE_NAME=${BASELINE_SCSI_DEVICES[$ARRAY_ELEMENT + 1]}
NAME=`expr &quot;${SCSI_DEVICES[*]}&quot; : &quot;.* $BASELINE_ID \([a-zA-Z0-9]*\)&quot;\
\| CANT_FIND`
if [ $BASELINE_NAME = $NAME ]; then
echo -n &quot;Baseline device ($BASELINE_NAME) &quot; 1&gt;$OUT
echo &quot;at SCSI ($BASELINE_ID).&quot; 1&gt;$OUT
set -A SCSI_DEVICES &quot; &quot;`echo ${SCSI_DEVICES[*]} \
|sed &quot;s/$BASELINE_ID $BASELINE_NAME//&quot;`
else
echo -n &quot;???????&gt; Can't find baseline device ($BASELINE_NAME) &quot;
echo &quot;at SCSI ($BASELINE_ID).&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done

#REPORT NON_BASELINE SCSI DRIVES.
set -A SCSI_DEVICES `echo ${SCSI_DEVICES[*]}`
ARRAY_ELEMENT=0
#IF LENGTH OF ARRAY IS GREATER THAN 1...
if [ ${#SCSI_DEVICES[*]} -gt 1 ]; then
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#SCSI_DEVICES[*]} ]; do
ID=${SCSI_DEVICES[$ARRAY_ELEMENT]}
NAME=${SCSI_DEVICES[$ARRAY_ELEMENT + 1]}
echo &quot;???????&gt; Device ($NAME) at SCSI ($ID) not in baseline.&quot;
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done
fi

#CHECK FOR SECOND ETHERNET I/F (LN1).
#IF THE STRING 'ln1' APPEARS IN THE EVENTFILE....
if [ `expr &quot;$STARTUP_INFO&quot; : '.*ln1'` -gt 0 ]; then
echo &quot;Baseline (ln1) I/F HW installed.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; (ln1) I/F HW not installed.&quot;
fi

#===========================DISK CONFIGURATION ==========================
#========================================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- Disk Configuration ---&quot; 1&gt;$OUT
#CHECK PARTITIONING OF BOOT DISK
#THIS ALGORITHM RELIES ON THE FACT THAT THE SYSTEM EVENTFILE LISTS
#ACTIVE SCSI DEVICES IN NUMERICAL ORDER, 0-7.
set -A PARTITIONS `expr &quot;$DF&quot;|egrep /dev/rz0|cut -c9`
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_PARTITIONS[*]} ]; do
BASELINE_PART_NAME=${BASELINE_PARTITIONS[$ARRAY_ELEMENT]}
BASELINE_PART_SIZE=${BASELINE_PARTITIONS[$ARRAY_ELEMENT + 1]}
BASELINE_PART_TYPE=${BASELINE_PARTITIONS[$ARRAY_ELEMENT + 2]}
PART_NAME=`expr &quot;${PARTITIONS[*]}&quot;:&quot;.*\($BASELINE_PART_NAME\)&quot;`
PART_SIZE=`expr &quot;$CHPT&quot; : &quot;.*$BASELINE_PART_NAME \([0-9]*\)&quot;`
#VERIFY THE SIZES OF THE DISK PARTITIONS
if [ $BASELINE_PART_SIZE = $PART_SIZE ]; then
echo -n &quot;Baseline partition '$BASELINE_PART_NAME' &quot; 1&gt;$OUT
echo &quot;size ($BASELINE_PART_SIZE).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Partition '$BASELINE_PART_NAME' size ($PART_SIZE),&quot;
echo &quot; should be ($BASELINE_PART_SIZE).&quot;
fi
#VERIFY PARTITIONS ARE MOUNTED
if [ $BASELINE_PART_TYPE != 'swap' ]; then
if [ $PART_NAME ]; then
echo &quot;Baseline partition '$BASELINE_PART_NAME' mounted.&quot; 1&gt;$OUT
set -A PARTITIONS `echo ${PARTITIONS[*]} \
|sed &quot;s/$BASELINE_PART_NAME//&quot;`
else
echo &quot;???????&gt; Partition '$BASELINE_PART_NAME' is not mounted.&quot;
fi
else
NUM_SWAP=`expr &quot;${PSTAT[*]}&quot; : '.*text.*[0-9]*/\([0-9]*\)'`
((BASELINE_SWAP=BASELINE_PART_SIZE/200))
if [ $NUM_SWAP -eq $BASELINE_SWAP ]; then
echo &quot;Baseline configured swap ($NUM_SWAP)00K.&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Configured swap ($NUM_SWAP)00K not baseline &quot;
echo &quot;($BASELINE_SWAP)00K.&quot;
fi
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+3))
done

#REPORT NON_BASELINE MOUNTED FILESYTEMS.
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#PARTITIONS[*]} ]; do
PART_NAME=${PARTITIONS[$ARRAY_ELEMENT]}
echo &quot;???????&gt; Mounted partition '$PART_NAME' not in baseline.&quot;
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done

#CHECK FOR MOUNTED NFS
NUM_NFS=`expr &quot;$DF&quot;|egrep -c :`
if [ $NUM_NFS -eq $BASELINE_NUM_NFS ]; then
echo &quot;Baseline ($BASELINE_NUM_NFS) NFS mounted directories.&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; ($NUM_NFS) additional NFS mounted directories, &quot;
echo &quot;should be ($BASELINE_NUM_NFS).&quot;
fi

#CHECK FOR ADDITIONAL LOCAL MOUNTED FILESYSTEMS.
NUM_LOCAL_FS=`expr &quot;$DF&quot;|egrep -c &quot;/dev/rz[1-7]&quot;`
if [ $NUM_LOCAL_FS -eq $BASELINE_NUM_LOCAL_FS ]; then
echo -n &quot;Baseline ($BASELINE_NUM_LOCAL_FS) additional local &quot; 1&gt;$OUT
echo &quot;mounted directories.&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; ($NUM_LOCAL_FS) additional local mounted directories,&quot;
echo &quot; should be ($BASELINE_NUM_LOCAL_FS).&quot;
fi

#===========================KERNEL CONFIGURATION==========================
#=========================================================================
echo &quot; &quot; 1&gt;$OUT
echo &quot;--- Kernel Configuration ---&quot; 1&gt;$OUT
#VERIFY KERNEL IS GLOBALLY READABLE;REQUIRED FOR 'kvar'.
if [ ! -r $KERNEL_FILE ]; then
echo &quot;ERROR&gt;&gt;&gt; Kernel doesn't have READ file permission.&quot;
echo &quot;ERROR&gt;&gt;&gt; Exiting.&quot;
exit 1
fi

# CHECK KERNEL FOR SECOND NETWORK INTERFACE.
IFCONFIG_LN1=`ifconfig ln1 2&gt;/dev/null`
#IF PREVIOUS COMMAND EXITED SUCCESSFULLY...
if [ ${?} -eq 0 ]; then
echo 'Baseline (ln1) I/F SW in kernel.' 1&gt;$OUT
else
echo '???????&gt; (ln1) I/F SW not in kernel.'
fi

#CHECK SYSTEM TABLE CONTENTS.
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_SYSTEM_TABLE[*]} ]; do
BASELINE_TABLE_NAME=${BASELINE_SYSTEM_TABLE[$ARRAY_ELEMENT]}
BASELINE_TABLE_SIZE=${BASELINE_SYSTEM_TABLE[$ARRAY_ELEMENT + 1]}
TABLE_SIZE=`expr &quot;${PSTAT[*]}&quot; : &quot;.*/\([ 09]*\)$BASELINE_TABLE_NAME&quot;`
if [ $TABLE_SIZE -eq $BASELINE_TABLE_SIZE ]; then
echo -n &quot;Baseline system table '${BASELINE_TABLE_NAME}' &quot; 1&gt;$OUT
echo &quot;size (${BASELINE_TABLE_SIZE}).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; System table '${BASELINE_TABLE_NAME}' &quot;
echo &quot;size (${TABLE_SIZE}), should be (${BASELINE_TABLE_SIZE}).&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done

#CHECK KERNEL VARIABLES
#FUNCTION TO CONVERT THE THIRD kvar(8) ARGUMENT HEX TO DECIMAL.
function KVARXTOI {
#CONVERT ALL CHAR TO UPPERCASE (REQUIRED BY dc)
typeset -u HEX_VAL=`echo $3 | cut -dx -f2`
#CONVERT HEX TO DEC
echo &quot;16 i $HEX_VAL p&quot;|dc
}

ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_KERNEL_VARIABLES[*]} ]; do
BASELINE_FIELD_NAME=${BASELINE_KERNEL_VARIABLES[$ARRAY_ELEMENT]}
BASELINE_VAR_SIZE=${BASELINE_KERNEL_VARIABLES[$ARRAY_ELEMENT + 1]}
BASELINE_VAR_NAME=${BASELINE_KERNEL_VARIABLES[$ARRAY_ELEMENT + 2]}
BASELINE_FIELD_OFFSET=${BASELINE_KERNEL_VARIABLES[$ARRAY_ELEMENT + 3]}
VAR_SIZE=`kvar -k -s $BASELINE_VAR_NAME -rw -o \
$BASELINE_FIELD_OFFSET $KERNEL_FILE`
VAR_SIZE=`KVARXTOI $VAR_SIZE`
if [ $VAR_SIZE -eq $BASELINE_VAR_SIZE ]; then
echo -n &quot;Baseline kernel variable '$BASELINE_FIELD_NAME' &quot; 1&gt;$OUT
echo &quot;size ($BASELINE_VAR_SIZE).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Kernel variable ($BASELINE_FIELD_NAME) &quot;
echo &quot;size (${VAR_SIZE}), should be ($BASELINE_VAR_SIZE).&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+4))
done

#===========================NETWORK ROUTING ==============================
#=========================================================================
echo &quot; &quot; 1&gt;$OUT
echo &quot;--- Network Routes ---&quot; 1&gt;$OUT
#CHECK ACTIVE ROUTES.
#GET DESTINATION ($1), GATEWAY ($2), AND INTERFACE ($6) FROM NETSTAT.
set -A ALL_ROUTES &quot; &quot;`expr &quot;$NETSTAT&quot;|egrep -e 'ln[01]' \
|awk '{print $1,$2,$6}'`
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_ROUTES[*]} ]; do
BASELINE_DEST=${BASELINE_ROUTES[$ARRAY_ELEMENT]}
BASELINE_GATEWAY=${BASELINE_ROUTES[$ARRAY_ELEMENT + 1]}
BASELINE_IF=${BASELINE_ROUTES[$ARRAY_ELEMENT + 2]}
ROUTE=&quot;$BASELINE_DEST $BASELINE_GATEWAY $BASELINE_IF&quot;
#IF THIS ONE ROUTE IS IN LIST OF ALL ROUTES...
if [ `expr &quot;${ALL_ROUTES[*]}&quot; : &quot;.*$ROUTE&quot;` -gt 0 ]; then
echo -n &quot;Baseline route [$BASELINE_DEST &lt;- $BASELINE_GATEWAY]&quot; 1&gt;$OUT
echo &quot; on ($BASELINE_IF).&quot; 1&gt;$OUT
set -A ALL_ROUTES &quot; &quot;`echo ${ALL_ROUTES[*]} \
|sed &quot;s/$BASELINE_DEST $BASELINE_GATEWAY $BASELINE_IF//&quot;`
else
echo -n &quot;???????&gt; Cant find baseline route &quot;
echo &quot;[$BASELINE_DEST &lt;- $BASELINE_GATEWAY] on ($BASELINE_IF).&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+3))
done

#REPORT NON_BASELINE ROUTES.
ARRAY_ELEMENT=0
#IF ARRAY LENGTH IS GREATER THAN 1...
#YOU MAY WANT TO LIMIT THIS IF NUMBER OF NON-BASELINE ROUTES IS TOO LARGE.
if [ ${#ALL_ROUTES[*]} -gt 1 ]; then
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#ALL_ROUTES[*]} ]; do
BASELINE_DEST=${ALL_ROUTES[$ARRAY_ELEMENT]}
BASELINE_GATEWAY=${ALL_ROUTES[$ARRAY_ELEMENT + 1]}
BASELINE_IF=${ALL_ROUTES[$ARRAY_ELEMENT + 2]}
echo -n &quot;???????&gt; Route [$BASELINE_DEST &lt;- $BASELINE_GATEWAY] &quot;
echo &quot;on ($BASELINE_IF) not in baseline.&quot;
((ARRAY_ELEMENT=ARRAY_ELEMENT+3))
done
fi


#=========================SIGNIFICANT PROCESSES ==========================
#=========================================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- Significant Running Processes ---&quot; 1&gt;$OUT
#CHECK FOR OUT OF BASELINE PROCESSES
#FOR EACH PROCESS IN LIST OF PROCESS...
for PROCESS in ${NON_BASELINE_PROCESSES[*]}; do
if [ `expr &quot;$PS&quot; : &quot;.*$PROCESS&quot;` -eq 0 ]; then
echo &quot;Baseline '$PROCESS' is not running.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; non-baseline '$PROCESS' is running.&quot;
fi
done
#CHECK FOR NON_EXISTENT BASELINE PROCESSES
for PROCESS in ${BASELINE_PROCESSES[*]}; do
if [ `expr &quot;$PS&quot; : &quot;.*$PROCESS&quot;` -gt 0 ]; then
echo &quot;Baseline '$PROCESS' is running.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; baseline '$PROCESS' is not running.&quot;
fi
done

#=====================CHECK APPLICATION CONFIGURATION=============
#==========================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- Applications Installation and Licensing ---&quot; 1&gt;$OUT
# CHECK VADS INSTALLATION
if [ ! -s /usr/VADS ]; then
echo &quot;Baseline 'VADS' not installed.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; Non-baseline 'VADS' installed.&quot;
fi

# CHECK SL-GMS INSTALLATION AND LICENSING
if [ -s /usr/gms ]; then
#CHECK REVISION OF SL-GMS
if [ -s /usr/gms/$BASELINE_GMS_VERSION ]; then
echo &quot;Baseline 'SL-GMS' version ($BASELINE_GMS_VERSION).&quot; 1&gt;$OUT
else
echo &quot;???????&gt; 'SL-GMS' version not ($BASELINE_GMS_VERSION).&quot;
fi

#CHECK SL-GMS LICENSE IS CORRECT
GMS_KEY=`cat /usr/gms/lib/KEYS|tail -1|sed 's, ,,g'`
if [ $BASELINE_GMS_KEY = $GMS_KEY ]; then
echo &quot;Baseline 'SL-GMS' key ($GMS_KEY).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; 'SL-GMS' key ($GMS_KEY) is not &quot;
echo &quot;the baseline ($BASELINE_GMS_KEY).&quot;
fi

#CHECK SL-GMS TSN CORRECT.
GMS_TSN=`cat /usr/gms/TSN|tail -1|cut -f1 -d'&gt;'|sed 's,[ &lt;],,g'`
if [ $BASELINE_GMS_TSN = $GMS_TSN ]; then
echo &quot;Baseline 'SL-GMS' TSN ($GMS_TSN).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; 'SL-GMS' TSN ($GMS_TSN) is not &quot;
echo &quot;the baseline ($BASELINE_GMS_TSN).&quot;
fi
else
echo &quot;???????&gt; 'SL-GMS' not Installed.&quot;
fi

# CHECK RS/1 INSTALLATION
if [ -s /usr/rs1 ]; then
echo &quot;Baseline 'RS/1' installed.&quot; 1&gt;$OUT
#STRIP ALL NON-ESSENTIAL WHITESPACE FROM VARIABLE JUST IN CASE...
BASELINE_RS1_LICENSE=`echo $BASELINE_RS1_LICENSE|tr '\012\040\011' `
#STRIP ALL NON-ESSENTIAL WHITESPACE FROM FILE.
RS1_LICENSE=`cat /usr/rs1/license.dat|tr '\012\040\011' `
if [ $BASELINE_RS1_LICENSE = $RS1_LICENSE ]; then
echo &quot;Baseline 'RS/1' runtime license.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; 'RS/1' baseline license not installed.&quot;
fi
else
echo &quot;???????&gt; 'RS/1' not Installed&quot;
fi

#CHECK OPERATING SYSTEM LICENSING
ULTRIX_LICENSE=`lmf list 2&gt;/dev/null |egrep ULTRIX|awk '{print $3}'`
#IF VARIABLE IS SET...
if [ ${ULTRIX_LICENSE:=0} -eq $BASELINE_ULTRIX_LICENSE ]; then
echo &quot;Baseline 'ULTRIX' license ($ULTRIX_LICENSE user).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; 'ULTRIX' license ($ULTRIX_LICENSE user), &quot;
echo &quot;should be ($BASELINE_ULTRIX_LICENSE user).&quot;
fi

#CHECK EMULEX INSTALLATION
if [ -s /usr/emlx/bin/rprint ]; then
echo &quot;Baseline 'Emulex' installed.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; 'Emulex' not installed.&quot;
fi

#=====================CHECK FILE INFO======================
#==========================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- File Status ---&quot; 1&gt;$OUT
#CHECK BASELINE FILE PERMISSIONS
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...
while [ $ARRAY_ELEMENT -lt ${#BASELINE_FILE_PERM[*]} ]; do
BASELINE_NAME=${BASELINE_FILE_PERM[$ARRAY_ELEMENT]}
BASELINE_PERM=${BASELINE_FILE_PERM[$ARRAY_ELEMENT + 1]}
if [ -a $BASELINE_NAME ]; then
#IF FILE PERM IS OK, THEN ECHO 0 (ZERO)...
PERM_OK=`find $BASELINE_NAME -perm $BASELINE_PERM -exec echo 0 \;`
#IF VARIABLE IS SET...
if [ ${PERM_OK:=1} -eq 0 ]; then
echo -n &quot;Baseline '$BASELINE_NAME' &quot; 1&gt;$OUT
echo &quot;file permission ($BASELINE_PERM).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; '$BASELINE_NAME' file permissions &quot;
echo &quot;should be ($BASELINE_PERM).&quot;
fi
else
echo &quot;???????&gt; '$BASELINE_NAME' not found.&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done

# CHECK DIRECTORIES EXPECTED TO EXIST
#FOR EACH FILE IN LIST OF FILES...
for FILE in ${SITE_ADDED_FILES[*]}; do
if [ -s $FILE ]; then
echo &quot;Baseline '$FILE' exists.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; '$FILE' does not exist.&quot;
fi
done

# CHECK DIRECTORIES EXPECTED TO BE STRIPPED.
for FILE in ${SITE_STRIPPED_FILES[*]}; do
if [ ! -s $FILE ]; then
echo &quot;Baseline '$FILE' stripped.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; '$FILE' not stripped.&quot;
fi
done

#=====================CHECK MISC USER INFO=================
#==========================================================
#CHECK USER INFO
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- User Info ---&quot; 1&gt;$OUT
#FOR EACH USER IN LIST OF USERS...
for USER in ${BASELINE_USERS[*]}; do
#IF USER HAS AT LEAST ONE LINE IN FILE...
if [ `egrep -c $USER /etc/passwd` -gt 0 ]; then
echo &quot;Baseline '$USER' found in /etc/passwd.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; User '$USER' not found in /etc/passwd.&quot;
fi
done

for GROUP in ${BASELINE_GROUPS[*]}; do
#IF USER HAS AT LEAST ONE LINE IN FILE...
if [ `egrep -c $GROUP /etc/group` -gt 0 ]; then
echo &quot;Baseline '$GROUP' found in /etc/group.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; Group '$GROUP' not found in /etc/group.&quot;
fi
done

#CHECK ROOT UMASK
ROOT_UMASK=`egrep umask /.profile|cut -f2 -d' '`
#IF VARIABLE IS SET (DEFAULT IS 022)...
if [ ${ROOT_UMASK:=022} -eq $BASELINE_ROOT_UMASK ]; then
echo &quot;Baseline root umask ($ROOT_UMASK).&quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Root umask ($ROOT_UMASK), &quot;
echo    &quot;should be ($BASELINE_ROOT_UMASK).&quot;
fi

#CHECK /etc/rc.local FOR ASSORTED CONFIGURATION ITEMS.
if [ `egrep -c '.*#.*/SITE_SPECIFIC_COMMAND_FILE' /etc/rc.local` -eq 0 ]; then
if [ `egrep -c '.*#.*/etc/ifconfig ln' /etc/rc.local` -eq 0 ]; then
echo &quot;Baseline /etc/rc.local likely.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; /etc/rc.local lacks 2 active Ethernet I/Fs.&quot;
fi
else
echo &quot;???????&gt; /etc/rc.local lacks SITE_SPECIFIC_COMMAND_FILE. &quot;
fi

#=================CHECK X11 INFO==========================================
#=========================================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- X11 Info ---&quot; 1&gt;$OUT
# CHECK THE PRIVATE FONTS.
# NOTE: THE X SERVER MUST BE UNLOCKED TO DO THIS.
#IF STRING APPEARS IN VARIABLE...
if [ `expr &quot;$PS&quot; : '.*Xprompter'` -gt 0 ]; then
echo &quot;ERROR&gt;&gt;&gt; Cannot check fonts while console is locked.&quot;
else
ARRAY_ELEMENT=0
#WHILE ARRAY_ELEMENT IS LESS THAN SIZE OF ARRAY...

while [ $ARRAY_ELEMENT -lt ${#BASELINE_PRIVATE_FONTS[*]} ]; do
BASELINE_FONT=${BASELINE_PRIVATE_FONTS[$ARRAY_ELEMENT]}
BASELINE_NUM_FONT=${BASELINE_PRIVATE_FONTS[$ARRAY_ELEMENT + 1]}
set -A NUM_FONT \
`xlsfonts -display $DISPLAY -fn &quot;$BASELINE_FONT&quot; 2&gt;/dev/null`
if [ ${#NUM_FONT[*]} -eq $BASELINE_NUM_FONT ]; then
echo -n &quot;Baseline number of '$BASELINE_FONT' &quot; 1&gt;$OUT
echo &quot;fonts ($BASELINE_NUM_FONT). &quot; 1&gt;$OUT
else
echo -n &quot;???????&gt; Number of '$BASELINE_FONT' fonts &quot;
echo &quot;(${#NUM_FONT[*]}), should be ($BASELINE_NUM_FONT).&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+2))
done
fi

#REPORT NON_BASELINE PRIVATE_FONTS.
#--------NOT IMPLEMENTED---------

#=========================CHECK OPERATING SYSTEMSOFTWARE=================
#=========================================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- ULTRIX Subset Configuration ---&quot; 1&gt;$OUT
INSTALLED_SUBSETS='/tmp/installed_subsets'
setld -i|egrep installed|cut -f1 -d' ' &gt; $INSTALLED_SUBSETS
#USE 'tr(1)' TO REPLACE SPACES WITH CR SO THAT 'diff(1)' CAN COMPARE LINES.
MISSING_SUBSETS=`echo ${BASELINE_SETLD[*]}|tr '\040' '\012' \
|diff - $INSTALLED_SUBSETS |egrep '&lt;'|sed 's,&lt; ,,'`
EXTRA_SUBSETS=`echo ${BASELINE_SETLD[*]}|tr '\040' '\012' \
|diff - $INSTALLED_SUBSETS |egrep '&gt;'|sed 's,&gt; ,,'`
if [ ${#MISSING_SUBSETS} -eq 0 ]; then
echo &quot;Baseline no missing subsets.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; Missing subsets: &quot; $MISSING_SUBSETS
fi
if [ ${#EXTRA_SUBSETS} -eq 0 ]; then
echo &quot;Baseline no additional subsets.&quot; 1&gt;$OUT
else
echo &quot;???????&gt; Extra   subsets: &quot; $EXTRA_SUBSETS
fi
rm -f $INSTALLED_SUBSETS

#===========================FILE CHECKSUMS================================
#=========================================================================
echo &quot;&quot; 1&gt;$OUT
echo &quot;--- File Checksums ---&quot; 1&gt;$OUT
ARRAY_ELEMENT=0
while [ $ARRAY_ELEMENT -lt ${#BASELINE_CHECKSUMS[*]} ]; do
FILENAME=${BASELINE_CHECKSUMS[$ARRAY_ELEMENT]}
if [[ ! -f $FILENAME ]]; then
echo &quot;???????&gt; '$FILENAME' - can't find.&quot;
((ARRAY_ELEMENT=ARRAY_ELEMENT+3))
continue
fi
BASELINE_SUM=${BASELINE_CHECKSUMS[$ARRAY_ELEMENT + 1]}
BASELINE_BLOCK=${BASELINE_CHECKSUMS[$ARRAY_ELEMENT + 2]}
set -A CHECKSUM `sum $FILENAME`
SUM=${CHECKSUM[0]}
BLOCK=${CHECKSUM[1]}
if [ $BASELINE_SUM -eq $SUM -a $BASELINE_BLOCK -eq $BLOCK ]; then
echo &quot;Baseline '$FILENAME' checksum.&quot; 1&gt;$out
else
echo &quot;???????&gt; '$FILENAME' checksum not matched.&quot;
fi
((ARRAY_ELEMENT=ARRAY_ELEMENT+3))
done

echo &quot;&quot; 1&gt;$OUT
echo done. 1&gt;$OUT
exit 0
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
