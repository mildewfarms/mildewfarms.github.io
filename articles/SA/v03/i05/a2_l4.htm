<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i05: Listing 4: chkaging script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink>Listing 4</span></td>
		<td><a href="../../../../source/SA/1994/sep94.tar"><b class=codeListing>sep94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >

<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 4: chkaging script</H1><p>
<PRE>
#!/bin/sh
#
#       chkaging
#
#       Report current password aging settings from the
#       /etc/passwd file.  If -a is used, translates an
#       aging value into a set of weeks numbers.  If -d
#       is used, translates a set of weeks number into an
#       aging value.
#
#       Each aging value is formed from a set of base-64
#       numbers representing:
#
#       1.      the number of weeks maximum before a password
#               change is forced by the system,
#       2.      the number of weeks minimum before a new
#               password may be changed by the user, and
#       3.      the number of weeks elapsed since week 0, 1970,
#               when the password was last changed.
#
#       The base-64 numbers are formed from the set of
#       alphanumeric characters and two punctuation marks.
#       The aging value follows the password, separated by a
#       comma.  If the comma isn't there, aging is
#       deactiviated for that account.  The weeks elapsed
#       string may be missing, which corresponds to 0 weeks
#       elapsed.  That should force the password to change
#       with the next login.  According to passwd(4), the ..
#       (00) should always force a new password on the next
#       login.
#
#       Copyright 1994, Lawrence S Reznick

#       HISTORY
#
# 94Apr19       LSR
#       The base-64 digits are output in reverse place-value
#       order.  That is, if the digits should have been Hm
#       (H in the 64s place and m in the 1s place), the
#       password aging system will output it as mH.
#       Corrected the weeknum() &amp; code_val() functions to
#       handle it that way.
#
#       Also, the NOW_WEEKS value is off because a 365-day
#       year is really 52 weeks plus 1 day.  expr doesn't
#       work with floating point, so the simplest solution

#       is to add 1 day for every 7 years since the epoch.

PW_FILE=/etc/passwd                     # Point to passwd file

#
# NOW_WEEKS holds the number of weeks elapsed since
# 1970: aging epoch
#

#NOW_WEEKS=`expr \( \`date '+%Y'\` - 1970 \) \* 52 + \`date '+%U'\``
NOW_WEEKS=`expr \`date '+%Y'\` - 1970`
NOW_WEEKS=`expr $NOW_WEEKS \* 52 + \`date '+%U'\` + \( $NOW_WEEKS / 7 \)`

#
# Given an encoded aging weeks value, return the
# numeric equivalent
#

DIGITS=&quot;./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&q
ot;

weeknum ()
{
echo $1 |
awk '{
#               for (i = 1; i &lt;= length; i++) {
i = length;
do {
sum *= 64;
sum += index(digits, substr($0, i, 1)) - 1;
} while (--i);
}
END {
print sum;
}' digits=$DIGITS
}

#
# Given a comma-separated number list (max,min,elapsed),
# output aging code
#

code_val ()
{
echo $1 |
awk -F, '
$1 &lt; 0 || $1 &gt;= length(digits) {
print &quot;Max out of range! 0 &lt;= Max &lt; &quot;, length(digits);
exit;
}

$2 &lt; 0 || $2 &gt;= length(digits) {
print &quot;Min out of range! 0 &lt;= Min &lt; &quot;, length(digits);
exit;
}

{
code = substr(digits, $1 + 1, 1);
code = code substr(digits, $2 + 1, 1);

elapsed = $3;
do {
quot = int(elapsed / 64);
remn = elapsed % 64;
#                               base64 = substr(digits, remn + 1, 1) base64;
base64 = base64 substr(digits, remn + 1, 1);
elapsed = quot;
} while (elapsed &gt;= 64);
#                       base64 = substr(digits, quot + 1, 1) base64;
base64 = base64 substr(digits, quot + 1, 1);

code = code base64;
print code;
}

' digits=$DIGITS
}

#
# Given a full aging value (no comma), display its
# numeric values
#

aging_val ()
{
code = $1
if [ `expr length $code` -eq 2 ]
then
code=${code}..
else if [ `expr length $code` -lt 3 ]
then
echo Invalid aging code \&quot;$code\&quot;
return
fi
fi

MAX=`expr $code : '\(.\)'`              # Grab max weeks
MIN=`expr $code : '.\(.\)'`             # Grab min weeks
ELAPSED=`expr $code : '..\(.*\)'`       # Grab weeks since epoch

echo &quot;aging set to `weeknum $MAX` weeks max, \c&quot;
echo &quot;`weeknum $MIN` weeks min, \c&quot;
echo &quot;last changed `expr $NOW_WEEKS - \`weeknum $ELAPSED\`` weeks ago.&quot;
}

#
# Collect the 1st 2 fields of the password file &amp; parse
# the aging info
#

show_aging ()
{
INFO=`
cut -f1-2 -d: $PW_FILE |        # Extract name &amp; passwd fields
egrep -v '\*'`                  # Ignore disabled accounts

for n in $INFO
do
#               echo &quot;`echo $n | cut -d: -f1`\t\c&quot;

oIFS=&quot;$IFS&quot;
IFS=&quot;,&quot;                 # Use field sep to parse aging
set $n                  # $2 has the aging field value
IFS=&quot;$oIFS&quot;

if [ -z &quot;$2&quot; ]
then
#                       echo aging inactive!
NOAGING=&quot;$NOAGING `echo $n | cut -d: -f1`&quot;
else
echo &quot;`echo $n | cut -d: -f1`\t\c&quot;
aging_val $2
fi
done

if [ -n &quot;$NOAGING&quot; ]
then
echo &quot;\rAging inactive ($PWFILE order):&quot;
echo $NOAGING | tr ' ' '\012' | pr -t -6
fi
}

#
# Main processing
#

if [ $# -eq 0 ]                         # Default execution
then
show_aging                      # Show passwd file's aging settings
exit 0
fi

case $1 in
-a)                             # Turn aging value into weeks number
shift                   # Skip to the aging value
for v
do
echo $v = `aging_val $v`
done
;;

-d)                             # Turn weeks numbers into aging value
shift                   # Skip to the week number sets
for v
do
echo $v = `code_val $v`
done
;;

*)                              # Tell how program works
echo &quot;Usage:\t`basename $0` [-a aging_codes] [-d week_nums]\n&quot;
echo &quot;No arg:\tTells aging settings for &quot;$PW_FILE&quot; file.&quot;
echo &quot;-a arg:\tTurns aging codes into week numbers.&quot;
echo &quot;-d arg:\tTurns max,min,elapsed num sets into aging codes.&quot;
;;
esac
exit 0
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
