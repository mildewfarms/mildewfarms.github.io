<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i05:  Automating Symbolic Link Generation</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1994/sep94.tar"><b class=codeListing>sep94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Automating Symbolic Link Generation</H1><p>
<P>
Clive King and Adrian Rixon<P>

<B>Introduction </B><P>

Users should need no more than minimal knowledge about
the structure 
of the network they use. The layout of the filesystem
is only part 
of a user's environment, but it is fundamental to their
perception 
of the network. Within a heterogeneous network, the
filesystem should 
ideally appear the same to a user from all machines
on a network and 
they should not need to understand the underlying network
structure 
required to present referential transparency.<P>

This article addresses the problem of providing referential
transparency 
(making a filesystem look the same from every location
on a network) 
as regards system change and suggests a solution where
symbolic links 
are used in combination with an automounter to give
the user a consistent 
view of filesystems across the network.<P>

With the large numbers of symbolic links required, it
is clearly not 
feasible to generate all required symbolic links by
hand. Our solution 
is a generator for symbolic links that takes a high-level
description 
of the links to be constructed.<P>

Because reference through multiple levels of symbolic
links can have 
a significant impact on performance, we also present
a program for 
identifying potential problem areas. [Editor's note:
The code for 
these tools is too large to be published here but is
available electronically. 
See the &quot;Online Source Code&quot; entry in the
table of contents for a 
pointer to availability information.]<P>

<B>The Virtues of a Consistent Filesystem Structure</B><P>

A consistent filesystem structure over time helps the
administrator 
avoid many problems. For example, users need to be able
to set an 
appropriate search path for the shell so that they can
access the 
software that they use. If the location of an item of
software changes, 
not only will the shell's path require changing, but
also any shell 
scripts that have the path set explicitly and any binaries
that invoke 
commands via the shell using system or popen.<P>

Applications, libraries, and initialization files must
be in the correct 
locations, with the correct permissions, and must be
up to date in 
relation to the software that uses them. If the location
of a library 
is changed, then some applications may stop working
correctly for 
no apparent reason, especially if they are used infrequently.
Recompiling 
applications may not be possible as the sources or the
time may not 
be available.<P>

X applications, for example, can find their defaults
file either by 
using the default search directory which is set at compile
time or 
the environment variable XAPPLRESDIR. If the location
of an 
application's defaults file is changed, then the default
search path 
can be altered by setting XFILESEARCHPATH or XAPPLRESDIR

on a per-user basis. The alternative is recompilation
of the X server. 
Both alternatives are inconvenient, and cause extra
work and confusion.<P>

In the past, some applications have needed to be installed
in a specific 
location. Although current versions of such software
appear to have 
addressed this problem, older versions are still in
use and need access 
to the resources they use. (Does this indicate that
the authors of 
such software were never systems administrators?)<P>

<B>A Solution Strategy</B><P>

At Aberystwyth, the amd automounter has formed a central
part 
of our filesystem management strategy and is used in
place of the 
Sun automounter. All amd maps are distributed via NIS,
which 
allows centralized control of the maps and effective
distribution 
across the network.<P>

Referential transparency requires the implementation
of a naming scheme 
that is independent of the physical location or type
of any item of 
the hardware, the type or release of operating system,
and the role 
of the machine.  For established networks however, it
is not acceptable 
to change the whole structure of a filesystem overnight
so as to adhere 
to a new naming scheme. While a new structure is being
put in place, 
the safe option is to mimic the old filesystem. In our
case,  a significant 
body of applications still access libraries or initialization
files 
from a filesystem naming scheme that started to be phased
out two 
years ago. We addressed this problem by a combination
of symbolic 
links and the link type of map entry under an automounter.<P>

This approach allows a new naming scheme to be adopted
or the change 
of use of individual disk partitions -- only the automounter
maps 
require alteration. We use a mount type of link to simulate
a symbolic 
link of the old filesystem name in addition to a direct
mount for 
the new name.<P>

A large volume of nonsystem software is now used at
many sites. The 
management and updating of this body of software is
a significant 
task and is easier to manage if split into distinct
sections. At Aberystwyth 
we have chosen the following division of non-system
software<P>

<B>TeX</B> -- TeX, LaTeX and associated 
software<P>

<B>gnu</B> -- Free Software Foundation<P>

<B>X11R5</B> -- X software<P>

<B>lang</B> -- Language software such as ADA, POPLOG 
and ML<P>

<B>msdos</B> -- MS-DOS applications for mounting 
by PCs via PCNFS<P>

<B>misc</B> -- Software that does not fit into 
other categories <P>

Each software division has its own disk partition, except
TeX 
and X11R5, which share a disk partition. The Computer
Science department 
has a class C network for teaching and for each of two
research groups. 
TeX and X11R5 are considered basic software and so are
duplicated 
on a server on each of the networks. This is done in
part for resiliency 
and in part to reduce NFS traffic over routers between
the networks. 
The networks each have different LANG and MISC partitions
that reflect 
the different requirements of the groups that use the
machines on 
each subnet. The MSDOS and GNU partitions exist on only
one server.<P>

All files within each of the subdirectories of the above
software 
categories have a symbolic link to the equivalent directory
in /usr/local. 
This means that all non-system software is accessible
via /usr/local/bin. 
All non-system libraries can be set up to be accessible
via /usr/local/lib 
and all non-system manual pages can be found in a subdirectory
of 
/usr/local/man. This policy allows users to cut down
the number 
of items in their path and eliminates the need to change
their paths 
when a new class of software is added; this responsibility
is transferred 
to the administrator.<P>

The form of a user's path name is historical and cannot
be changed 
overnight. To provide a shorter route to home directories,
and in 
keeping with history, a symbolic link is made from each
user's home 
directory to a link of the same name in /home_link.<P>

We deliberately made all solutions as simple as practical
so that 
new staff would not face too great a learning curve
when confronted 
with the site-specific aspects of the network setup.<P>

<B>Generating Symbolic Links</B><P>

The large number of symbolic links required to provide
referential 
transparency makes it infeasible to generate all the
links by hand. 
For example, one of our servers had 1176 symbolic links
in just /home_link 
and /usr/local/bin. With over 100 UNIX machines on our
network, 
an automated method was clearly required.<P>

To document and simplify the creation of symbolic links
within the 
filesystem for local software and to provide a shorter
route to a 
user's home directory, we built a program that takes
a description 
of the form of symbolic links required and makes appropriate
symbolic 
links according to the description given. The links
are made between 
a target and a source file or directory. The target
is the file to 
which the new link is to be created. The source is the
file or directory 
which is to be linked. For example, all executables
in source /usr/local/gnu/bin 
are linked to a target of the same name in /usr/local/bin.<P>
<PRE>
ls -l /usr/local/bin/gcc
lrwxrwxrwx 1 root 22 Nov 7 1992 \
/usr/local/bin/gcc -&gt; /usr/local/gnu/bin/gcc </pre><p>
<p>
The syntax is of the form:<P>
<PRE>
ROOT==   root_path ;
search-depth== a value ;
type [ source -&gt; target  ];</pre><p>
<p>
ROOT is the source directory, such as /usr/local/TeX

or /usr/local/X11R5. The link type can be one of a number

of potential classes of symbolic link structures:<P>

<li>Single links -- Makes one-to-one links directly 
from the source file to the target file.<P>

<li>Multiple links -- Makes links from all the files 
of which source is the parent directory, to the subdirectory
of the 
target directory. <P>

<li>Sub Multiple links -- Makes links from all the files

in the subdirectories of the source to files in newly
created directories 
in the target directory, e.g., Man directory. Subdirectories

of the target are made as required.<P>

The depth to which the links will be followed can be
set by using 
search-depth. search-depth only applies to the sub_multi_link

class and has a default value of 20. A depth of 0 will
make links 
of only the files and immediate subdirectories of the
source directory. 
A depth of 1 will make links of all files and directories
in the immediate 
subdirectories. To make links to all directories and
files, without 
consideration of the depth of the directory tree, search
depth should 
be set to an arbitrarily large value such as 20. For
example:<P>
<PRE>
ROOT==/usr/local/gnu;
search-depth==0;
multi_link[ bin -&gt; /usr/local/bin ];
multi_link [ lib -&gt; /usr/local/lib ];
sub_multi_link [ man -&gt; /usr/local/man ];

ROOT==/home/support/part_a
search-depth==0;
multi_link[ mnt -&gt; /home_link ]; </pre><p>
<p>
The link generator takes the following command-line
flags 
in addition to the file describing the links to be made:<P>

<B>-l</B> -- Makes a log of the links made in linker.log<P>

<B>-t</B> -- Test mode, does not make symbolic 
links, but goes through the motions <P>

<B>-a</B> -- Requires an acknowledgment before 
it makes a link<P>

<B>-b</B> -- If the link exists, then carry on 
to the next, makes a symbolic link only if a link does
not already 
exist<P>

<B>-I</B> -- Ignore and overwrite old links, no 
acknowledgment<P>

<B>-h</B> -- syntax help <P>

The symbolic link generator is written in C and uses
Lex and 
Yacc  to interpret the specification files.<P>

If you add new software to an established setup, you
must create further 
links. You can do this either when installing the software
or by running 
the link generator with the &quot;-b&quot; option at
regular intervals.<P>

<B>Performance Considerations</B><P>

When designing the layout of the filesystem you must
make sure that 
symbolic links are only used on the client to access
the file in question 
and that a mount is never attempted on a symbolic link.
Direct mounts 
should be used to mount all filesystems, and so avoid
excessive resolution 
of the symbolic links that are most inefficient. Therefore
a symbolic 
link should only be used to directly access a file on
the client and 
should never be placed on the server side of a mount.
Multiple levels 
of symbolic links should not exist.<P>

NFS traffic over routers should be reduced as far as
practical. This 
can be achieved by providing all commonly used software
in a mirrored 
partition from a server on each network.<P>

<B>Checking for Multiple Links</B><P>

Within the link generator the function resolve_link
checks 
for multiple symbolic links. It attempts to make a link
direct to 
the file itself if the target path is composed of a
series of symbolic 
links. The compile time #define NO_LINK_RESOLVE can
be used 
to turn this feature off.<P>

Also available is the program link_test, which can be
used 
to analyze a filesystem in regard to the number of symbolic
links 
and cross mounts. It resolves symbolic links and displays
the number 
of links and mount points, where the links exist, and
if a link exists 
on the wrong side of a mount point.<P>

The &quot;-f&quot; option to link_test will analyse
the path 
to every file that is in the argument directory.<P>

link_test ignores any mount on / and can illuminate
problems 
such as<P>
<PRE>
thor:cmk&gt;link_test  ~cmk
----------------------------------------------

Following path &quot;/home/support/part_a/mnt/cmk&quot;

&quot;support&quot;  mounted on mount point &quot;/home&quot;
&quot;mnt&quot; is a symbolic link
&quot;mnt&quot; is a link on the wrong side of a mount
in path &quot;/home/support/part_a/mnt&quot;
&quot;mnt&quot; linked to directory &quot;/a/athene/4.2/xy1e&quot; -- now
following &quot;/a/athene/4.2/xy1e&quot;
&quot;xy1e&quot;  mounted on mount point &quot;/a/athene/4.2&quot;

Path &quot;/home/support/part_a/mnt/cmk&quot; has :-
1 symbolic links
2 cross mounts </pre><p>
<p>
<B>Conclusions</B><P>

The method of managing filesystem structure presented
here can be 
used to provide referential transparency across a heterogeneous
network 
of UNIX machines. It allows the administrator to make
the changes 
necessary for effective administration, while minimizing
both the 
change that the user has to cope with and the possibility
that an 
application might stop working for reasons associated
with these changes.<P>

The AMD automounter with the automounter maps distributed
via NIS 
provides a centralized mechanism for the management
of filesystem 
change. The physical location of a disk partition is
transparent to 
the user; therefore, the underlying structure of the
mounts can be 
changed so long as the structure of the filesystem appears
the same 
to the user.<P>

This article has presented an automated approach to
the generation 
of symbolic links and a simple language for the description
of the 
links. The symbolic link generator greatly simplifies
the generation 
of symbolic links on a network of machines.<P>

Symbolic links can have a significant performance hit;
the electronic 
code distribution includes a short program to survey
the filesystem 
and point out potential problems. In addition, the symbolic
link generator 
attempts to reduce successive levels of symbolic links
in order to 
make a link only to a regular file or directory.<P>

<B>References</B><P>

Pendry, J. 1990. <I>Amd Automounter Manual</I>.<P>

Sun Microsystems. December 1990.  &quot;Networks and

File Servers : A Performance Tuning Guide.&quot; Technical
Report. <P>

The mailing list amd-workers@gov.lanl.acl 
appears to be the best method of getting up to date
information on 
the status of amd. <P>




<P>


<H1>About the Authors</H1><p>
<P>
Clive King is a member of the Centre for Intelligent
Systems 
within the Department of Computer Science in the University
of Wales, 
Aberystwyth. His duties include teaching UNIX systems
programming, 
supporting research, and administering a network of
UNIX workstations. 
Prior to this, he was a Systems Administrator at the
Ordnance Survey, 
the national Mapping agency in the U.K. His research
interests are 
in the area of distributed systems and concurrent programming.<P>

Adrian Rixon is a Systems Administrator within the Department

of Computer Science in the University of Wales, Aberystwyth.
His research 
interests are in the areas of information discovery
and retrieval 
in Wide Area Networks and network security. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
