<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v03, i05:  New Messages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1994/sep94.tar"><b class=codeListing>sep94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>New Messages</H1><p>
<P>
To: saletter@rdpub.com<br>
Subject: upcoming events<P>

We believe the following technical meetings are of interest

to your readers.<P>

<B>September 19-23, 1994</B><P>

8TH USENIX SYSTEMS ADMINISTRATION CONFERENCE (LISA VIII)<P>

Co-sponsored by SAGE, the System Administrators Guild
Town &amp; Country Hotel, San Diego, California
Program Chair: Dinah McNutt, Zilker Internet Park, 
Inc.<P>

<B>October 26-28, 1994</B><P>

USENIX SYMPOSIUM ON VERY HIGH LEVEL LANGUAGES (VHLL)<P>

Santa Fe, New Mexico<br>
El Dorado Hotel<br>
Program Chair: Tom Christiansen, Consultant<P>

<B>November 14-18, 1994</B><P>

SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION

(OSDI)<P>

Co-sponsored by the USENIX Association, ACM SIGOPS 
and IEEE TCOS<br>
Monterey, California<br>
Marriott Hotel<br>
Program Chair: Jay Lepreau, University of Utah<P>

<B>January 16-20, 1995</B><P>

The only &quot;broad-topic&quot; USENIX Conference in
1995!<P>

USENIX WINTER 1995 TECHNICAL CONFERENCE<P>

New Orleans, Louisiana<br>
Marriott Hotel<br>
Program Chair: Peter Honeyman, CITI, University of Michigan<P>

TO RECEIVE COMPLETE REGISTRATION AND PROGRAM INFORMATION<P>

Please contact: USENIX Conference Office<br>
22672 Lambert St., Suite 613<br>
Lake Forest, CA USA 92630<br>
1-714-588-8649<br>
FAX 1-714-588-9706<br>
E-mail: conference@usenix.org<P>

Cynthia Deno<br>
The USENIX Association<P>



Editor:<br>

In the &quot;New Messages&quot; section of vol. 3, no.
3, Larry Reznick 
wrote: &quot;The kill(1) man page doesn't claim an exit
status. 
I wonder if there isn't a way to OR those three [signals]
together 
so that subsequent signals aren't necessary if an earlier
one succeeds?&quot;<P>

kill does have an exit status (at least under Sun's
Solaris 
1 and 2 and HP's HP-UX 9). It indicates if the signal
was successfully 
delivered or not, and has nothing to do with whether
or not the process 
died.<P>

Fortunately, there's a little-known/used solution: kill
-0 {pid}. 
kill -0 {pid} will exit with status 0 if the process
exists 
and the user has permission to send a signal to the
process, otherwise 
it will exit with status 1. The shell script in Listing
1 (E-Media Production Manager's note:  Listings referenced within the New Messages/Letters can be found by
scrolling to the bottom of the current page.) uses this 
to send SIGHUP, SIGTERM, and SIGKILL to a 
process until it dies.<P>

Gaspar Carson<br>
carson@cs.columbia.edu, carson@taltos.sbi.com<P>

<I>Larry Reznick responds -- Thank you very much for the

&quot;kill 0&quot; suggestion. A script function might
best implement 
your primary idea of sending the intended kill signal
followed by 
a 0 query signal. The function could take one signal
and a pid, send 
the signal, wait briefly to give the process time to
die, and then 
use &quot;kill 0&quot; to test whether the signal worked,
returning 
FALSE if it didn't work. One could OR together several
calls to this 
function using increasingly severe kill signals. Alternately,
the 
function could take a set of signals, looping through
sending each 
one. -Larry</I><P>



To: saletter@rdpub.com<br>
Subject: When Inodes Go Bad<P>


Editor,<br>

In the July/August 1994 issue of Sys Admin, you printed
an 
article by Emmett Dulaney entitled &quot;When Inodes
Go Bad.&quot; Most 
of what Mr. Dulaney says in there is OK, but some of
it is either 
incomplete, inconsistent, or incorrect.<P>

The incompleteness arises because Mr. Dulaney consistently
fails to 
mention that there are (at least) two types of links:
hard links and 
symbolic links. Mr. Dulaney only shows hard links. A
prime example 
of where this matters is on page 6, in the last sentence.
There Mr. 
Dulaney states &quot;Two linked files will share the
same inode number.&quot; 
This is true for hard links, but is not true for symbolic
links. Symbolic 
links use a different inode. One significance for systems
administrators 
is that hard links may not span file systems and may
not refer to 
directories, whereas symbolic links may span file systems
and may 
refer to directories. <P>

Another place where this incompleteness shows up is
on page 10, in 
the last sentence of the 3rd paragraph under &quot;Inode
Functionality.&quot; 
In there Mr. Dulaney says &quot;The second link is now
no longer a 
link, but still contains the same information -- by
virtue of still 
referencing that same inode.&quot; Due to the nature
of symbolic links, 
if a link of this type is made to a file and the file
is removed, 
the link remains and points to nothing.<P>

An inconsistency/incompleteness arises between page
8, #3 where Mr. 
Dulaney shows what the special permission modes are,
and page 14 in 
the last sentence on that page (which continues on to
the next page). 
In the first instance, Mr. Dulaney describes the entity
permission 
as &quot;Permissions are four digits, with the first
indicating whether 
a special mode is set (1=sticky bit, 2=SGID, 4=SUID),&quot;
but in 
the other instance he describes this same permission/mode
digit as 
&quot;by being zero, shows the sticky bit is not set.&quot;
What that 
digit completely indicates (by being zero) is that neither
the SUID 
bit, the SGID bit, nor the sticky bit are set.<P>

An incorrectness/incompleteness shows up on page 11
in the last sentence 
of the 2nd paragraph, where he says &quot;In order for
ncheck 
to work properly, the name of the filesystem must be
contained within 
a text file, /etc/checklist.&quot; This may be true
for the 
systems he works with but it is not universally true
(e.g., this is 
not true on any of the six types of UNIX systems I have
access to).<P>

What I consider to be the most blatant error is on page
10, #8. An 
inode does not store the file creation time (it isn't
stored anywhere). 
The inode stores three time/date stamps, usually known
as atime, ctime, 
and mtime. Atime is the last time/date the file was
accessed. Mtime 
is the last time/date the file was modified. Since both
of these refer 
to the file, it may be natural to assume that ctime
does as well and 
if it does, to assume that it is the file creation time/date.
However, 
both of these assumptions are wrong. Ctime refers to
the inode itself 
and is the last time/date the inode was changed. The
following is 
taken from the monthly Frequently Asked Questions (FAQ)
documents 
for comp.unix.questions and comp.unix.shell USENET 
newsgroups, v2.5 4/28/94:<P>

-- How do I find the creation time of a file?<P>

You can't -- it isn't stored anywhere. Files have a
last-modified 
time (shown by &quot;ls -l&quot;), a last-accessed time
(shown by &quot;ls 
-lu&quot;) and an inode change time (shown by &quot;ls
-lc&quot;). The 
latter is often referred to as the &quot;creation time&quot;
-- even 
in some man pages -- but that's wrong; it's also set
by such operations 
as mv, ln, chmod, chown and chgrp.<P>

The man page for &quot;stat(2)&quot; discusses this.<P>

The following copyright notice refers to the above noted
FAQ collection:<P>

This collection of documents is Copyright 1994, Ted

Timar. All rights reserved. Permission to distribute
the collection 
is hereby granted providing that distribution is electronic,
no money 
is involved, reasonable attempts are made to use the
latest version 
and all credits and this copyright notice are maintained.
Other requests 
for distribution will be considered.<P>

Michael J. Chinni <br>
...!uunet!pica.army.mil!mchinni<P>

<I>Emmett Dulaney responds: You raise a few valid points,
and 
a few questionable ones as well. It may not have been
apparent from 
the introduction, but the purpose of the article was
to address the 
subject of inodes in terms of the filesystem. For that
reason, priority 
was given to hard links (which cannot span multiple
filesystems) as 
opposed to symbolic links. You are correct in stating
that removing 
the file a symbolic link points to leaves a reference
to nothing, 
just as you would be correct in stating that the &quot;date&quot;
command 
returns the current date -- as your first paragraph
mentions, only 
hard links were discussed.<P>

As for a digit of zero in the first position of a file's

permissions indicating that sticky bit, SGID, and SUID
are not set: 
I took the easy way out and simply said the sticky bit
was not set, 
implying any of the special permissions. Semantically,
you are correct.<P>

I do not know what six UNIX systems you have around,
but 
it has been my experience that the /etc/checklist file
has 
been necessary. Given the number of vendors and versions,
I won't 
say that you haven't come across six that do not utilize
this.<P>

On the last issue, you are 100 percent correct. Ctime
refers 
to creation and modification. The date maintained is
the date 
the file/inode was created or changed to its present
form (i.e., 
created in this image).<P>

Thanks for your input, and for keeping me on my toes.</I><P>



<H1>Listing 1: Shell script to confirm a process kill</H1><p>

<PRE>
#!/bin/sh
if [ &quot;${#}&quot; -ne 1 ]; then
echo &quot;Usage: ${0} PID&quot; 1&gt;&amp;2
exit 255
fi

kill -0 ${1}
if [ &quot;${?}&quot; -eq 0 ]; then
kill -HUP &quot;${1}&quot;
if [ &quot;${?}&quot; -ne 0 ]; then
echo &quot;kill -HUP ${1} failed with exit status ${?}&quot; 1&gt;&amp;2
exit 1;
fi
kill -0 ${1} &gt;/dev/null 2&gt;&amp;1
if [ &quot;${?}&quot; -eq 0 ]; then
kill -TERM &quot;${1}&quot;
if [ &quot;${?}&quot; -ne 0 ]; then
echo &quot;kill -TERM ${1} failed with exit status ${?}&quot; 1&gt;&amp;2
exit 1;
fi
kill -0 ${1} &gt;/dev/null 2&gt;&amp;1
if [ &quot;${?}&quot; -eq 0 ]; then
kill -KILL &quot;${1}&quot;
if [ &quot;${?}&quot; -ne 0 ]; then
echo &quot;kill -KILL ${1} failed with exit status ${?}&quot; 1&gt;&amp;2
exit 1;
fi
fi
fi
else
echo &quot;Kill -0 ${1} failed!&quot; 1&gt;&amp;2
exit 1;
fi
</pre><p>
<p>

<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
