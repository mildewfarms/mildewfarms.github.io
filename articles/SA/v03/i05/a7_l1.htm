<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i05: Listing 1: The mfsck script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1994/sep94.tar"><b class=codeListing>sep94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: The mfsck script</H1><p>
<PRE>
#!/bin/sh
#
# File:         mfsck.sh (Check File Systems on multiple disks)
# Version:      @(#)mfsck       1.10 25 May 1994 1
#
# Copyright 1994 Sun Microsystems, Inc.  Permission to copy, use, distribute,
# modify and incorporate this work in Sys Admin
# in any form is hereby granted.  Readers of Sys Admin
# may copy, use, and distribute this work
# subject to the following conditions:
#
#   1) The document may be used for non-commercial purposes only; and
#   2) Any copy of this work or portion thereof must include a copy of this
#      copyright notice.
#
# This work is provided as is without warranty of any kind, either express or
# implied, including, but not limited to, the implied warranties of
# merchantability, fitness for a particular purpose, or non-infringement.
#
# This work could include technical inaccuracies or typographical errors.
# Changes are periodically added to the information herein; these changes
# will be incorporated in new additions of the publication.
#
# Sun Microsystems, Inc. may make improvements and/or changes in its products
# and/ or its programs including the program routines described in this work
# at any time.
#
# Synopsis:
# ---------
# mfsck &lt;task file&gt;
#
# where,
#   &lt;task file&gt;  is the name of a file containing the names of the disks and
#               their partitions/file systems to check.
#
# Example:
# --------
#   mfsck task_file
#
# Exits:
# ------
#   = 0,        success
#   &lt;&gt;0,        failure
#
# Notes:
# ------
# -&lt;task file&gt; Format:
#    &lt;logical device&gt; &lt;partition&gt; ... &lt;partition&gt;
#
#  e.g.,
#    c0t5d0     0 1 6
#
# -'CHKFile' used to verify that a process is still active.
# -'WIPFile' is a &quot;work-in-progress&quot; file.
#
# *****************
# *** Functions ***
# *****************
#
# ************************
# *** Function: CkExit ***
# ************************
#
# 'fsck' EXIT CODE
# ----------------
#    0         file system is okay and does not need checking
#    1         erroneous parameters are specified
#    32        file system is unmounted and needs checking  (fsck -m only)
#    33        file system is already mounted
#    34        cannot stat device
#    36        uncorrectable errors detected - terminate normally
#    37        a signal was caught during processing
#    39        uncorrectable errors detected - terminate  immediately
#    40        for root, same as 0.
#    50        removing log file
#
# Arguments:
# ----------
# 0  Exit Code
#
CkExit () {
#
case &quot;$1&quot; in
0) ;;
1) EMSG=&quot;Erroneous parameters are specified&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
32) EMSG=&quot;File system is unmounted and needs checking  (fsck -m only)&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
33) EMSG=&quot;File system is already mounted&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
34) EMSG=&quot;Cannot stat device&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
36) EMSG=&quot;Uncorrectable errors detected - terminate normally&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
37) EMSG=&quot;A signal was caught during processing&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
39) EMSG=&quot;Uncorrectable errors detected - terminate immediately&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
40) EMSG=&quot;For root, same as 0&quot;
echo &quot;$EPROMPT$EMSG&quot;
;;
*) EMSG=&quot;Unknown response from 'fsck'; Received: $1&quot;
echo &quot;$EPROMPT$EMSG&quot;
echo &quot;  Please Check&quot;
;;
esac
#
}       # *** END: CkExit ***
#
# *****************
# *** Main Code ***
# *****************
#
# **********************
# *** Initialization ***
# **********************
PID=$$
#
EPROMPT=&quot;ERROR&gt;&quot;
PROMPT=&quot;&gt;&quot;
#
NARGS=`expr 1`
#
ERR_SYNTAX=`expr 50`
ERR_TFN_OF=`expr 52`    # The task file specified is NOT an ordinary file
ERR_TFN_NRD=`expr 54`   # The task file specified is NOT readable
ERR_TFN_EPTY=`expr 56`  # The task file specified is empty
ERR_CF_NZRO=`expr 60`   # The control file exists AND is a non-ZERO file
ERR_WIP_EXISTS=`expr 62` # WIP file exists as an ordinary file or a directory
ERR_WIP_CREATE=`expr 64` # creating the WIP file
ERR_CHK_EXISTS=`expr 66` # CHK file exists as an ordinary file or a directory
ERR_CHK_CREATE=`expr 68` # creating the CHK file
ERR_LOGF_EXISTS=`expr 70` # log file for partition exists
ERR_LOGF_CREATE=`expr 72` # creating log file for partition
ERR_RM_LOGFS=`expr 76`  # removing log files

#
#
# ***********************
# *** Input Arguments ***
# ***********************

if [ &quot;$#&quot; -ne &quot;$NARGS&quot; ] ; then
echo &quot;$EPROMPT Incorrect Number of Input Parameters; Exp: $NARGS, Obs: $#&quot;
echo &quot;synopsis:&quot;
echo &quot;  mfsck &lt;task file&gt;&quot;
echo &quot;where,&quot;
echo &quot;  &lt;task file&gt;  is the name of a file containing the disks and the&quot;
echo &quot;               file systems to check&quot;
echo
echo &quot;Notes:&quot;
echo &quot;------&quot;
echo &quot;  -Syntax of the file &lt;task file&gt; :&quot;
echo &quot;     #         comment line&quot;
echo &quot;     &lt;logical device&gt; &lt;partition&gt; ... &lt;partition&gt;&quot;
echo
echo &quot;   Example:&quot;
echo &quot;   --------&quot;
echo &quot;     c0t5d0 0 1 6&quot;
echo
exit $ERR_SYNTAX
fi
#
CWD=`pwd`       # *** current working directory
***
#
RES=`expr 0`
RES1=`expr 0`
RES2=`expr 0`
EXE=&quot;999&quot;
#
SleepSec=`expr 60`
#
SP=&quot; &quot;
PER=&quot;.&quot;
#
ASTER=&quot;*&quot;
SLASH=&quot;/&quot;
PIPE=&quot;|&quot;
BKGND=&quot;&amp;&quot;
SQUOTE=&quot;'&quot;
DQUOTE='&quot;'
CQUOTE=$SQUOTE$DQUOTE$SQUOTE
#
EQUALS=&quot;=&quot;
PERIOD=&quot;.&quot;
#
NullList=&quot;&quot;
#
ERRLIS=&quot;&quot;       # error list
FERRLIS=&quot;&quot;      # 'fsck' error list
#
FSCKCMD=&quot;fsck&quot;
#
NDSK=`expr 0`   # number of disks
CDSK=`expr 0`   # scanning number of disks
#
CNTL=&quot;cntl&quot;
CTRLF=&quot;$FSCKCMD$PERIOD$CNTL$PERIOD$PID&quot;
#
F_PID=`expr 0`
#
WIP=&quot;wip&quot;
WIPFile=&quot;$CWD$SLASH$FSCKCMD$PERIOD$WIP$PERIOD$PID&quot;
#
CHK=&quot;chk&quot;
CHKFile=&quot;$CWD$SLASH$FSCKCMD$PERIOD$CHK$PERIOD$PID&quot;
#
LOG=&quot;log&quot;
LOGFile=&quot;$CWD$SLASH$FSCKCMD$PERIOD$LOG$PERIOD$PID&quot;
#
TFN=$1          # get the task file name
#
if [ ! -f &quot;$TFN&quot; ] ; then
echo &quot;$EPROMPT The task file specified ( $TFN ) is NOT an ordinary file&quot;
echo &quot;  Please re-check and re-start&quot;
exit $ERR_TFN_OF
fi
#
if [ ! -r &quot;$TFN&quot; ] ; then
echo &quot;$EPROMPT The task file specified ( $TFN ) is NOT readable&quot;
echo &quot;  Please re-check and re-start&quot;
exit $ERR_TFN_NRD
fi
#
if [ ! -s &quot;$TFN&quot; ] ; then
echo &quot;$EPROMPT The task file specified ( $TFN ) is an empty file&quot;
echo &quot;  Please re-check and re-start&quot;
exit $ERR_TFN_EPTY
fi
#
# ***************************
# *** Check: Control File ***
# ***************************
# The control file should not exist.  If it does and is non-ZERO, this is an
# error.
#
if [ -s &quot;$CTRLF&quot; ] ; then
echo &quot;$EPROMPT The control file $CTRLF exists AND is a non-ZERO file&quot;
echo &quot;  Please re-check and re-start&quot;
exit $ERR_CF_NZRO
fi
#
rm &quot;$CTRLF&quot; 1&gt;/dev/null 2&gt;&amp;1
touch &quot;$CTRLF&quot;#
# *** Identify the Current Process ID ***
echo &quot;The Current Process ID = $PID&quot;
echo &quot;File name extensions will contain this as identification&quot;
#
# ******************************************
# *** Create the &quot;work-in-progress&quot; file ***
# ******************************************
if [ -f &quot;$WIPFile&quot; -o -d &quot;$WIPFile&quot; ] ; then
# WIP file already exists as an ordinary file or a directory.
# This is an error condition!!!
echo &quot;$EPROMPT WIP file already exists as an ordinary file or a directory&quot;
echo &quot;  Aborting.....&quot;
exit $ERR_WIP_EXISTSelse
# the following code makes sure we are starting out with a ZERO file
rm &quot;$WIPFile&quot; 1&gt; /dev/null 2&gt;&amp;1      # delete it
touch &quot;$WIPFile&quot;                     # create it   RES=$?
if [ &quot;$RES&quot; -ne 0 ] ; then
echo &quot;$EPROMPT($RES) Creating the file: $WIPFile&quot;
exit $ERR_WIP_CREATE
fi
fi
#
# ************************************
# *** Create the &quot;Check PID File &quot; ***
# ************************************
if [ -f &quot;$CHKFile&quot; -o -d &quot;$CHKFile&quot; ] ; then
# CHK file already exists as an ordinary file or a directory.
# This is an error condition!!!
echo &quot;$EPROMPT CHK file already exists as an ordinary file or a directory&quot;
echo &quot;  Aborting.....&quot;
exit $ERR_CHK_EXISTS
else
# the following code makes sure we are starting out with a ZERO file
rm &quot;$CHKFile&quot; 1&gt; /dev/null 2&gt;&amp;1      # delete it
touch &quot;$CHKFile&quot;                     # create it
RES=$?
if [ &quot;$RES&quot; -ne 0 ] ; then
echo &quot;$EPROMPT($RES) Creating the file: $CHKFile&quot;
exit $ERR_CHK_CREATE
fi
fi
#
# ********************
# *** Control Loop ***
# ********************
#
exec &lt; $TFN     # redirect standard input to the task file name
#
while true
do
read p0 p1 p2 p3 p4 p5 p6 p7 p8 REM
RES=$?
#
# *****************************
# *** Check: Any More Lines ***
# *****************************
# 'read' always returns an exit status of '0' unless an END-OF-FILE is
# encountered.
#
if [ &quot;$RES&quot; -ne 0 ] ; then
echo &quot;$PROMPT Done reading from Task File: $TFN&quot;
break
fi
#
# *** Check: Comment Line ***
if [ &quot;$p0&quot; = &quot;#&quot;  -o &quot;$p0&quot; = &quot;&quot; ] ; then
# ********************
# *** Comment Line ***
# ********************
#
# echo &quot;$PROMPT Comment Line:&quot;
# echo &quot;  $p0 $p1 $REM&quot;
#
: # NULL command
else
# *****************
# *** Data Line ***
# *****************
# -&lt;task file&gt; Format:
#    &lt;logical device&gt; [0] [1] [2] [3] [4] [5] [6] [7]
#
# echo &quot;Device: $p0; Disk Type: $p1; Remainder: $REM&quot;
#
DEV=&quot;/dev/rdsk/$p0&quot;
#
# ******************************
# *** Check the File Systems ***
# ******************************
NDSK=`expr $NDSK + 1`
EXT=&quot;$NDSK$PERIOD$PID&quot;
#
# **************************************
# *** Merge the Specified Partitions ***
# **************************************
#
case &quot;$p1&quot; in

[0-7]) PART=&quot;s$p1&quot;
SUM=&quot;$DEV$PART &quot;
case &quot;$p2&quot; in
[0-7]) PART=&quot;s$p2&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p3&quot; in
[0-7]) PART=&quot;s$p3&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p4&quot; in
[0-7]) PART=&quot;s$p4&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p5&quot; in
[0-7]) PART=&quot;s$p5&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p6&quot; in
[0-7]) PART=&quot;s$p6&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p7&quot; in
[0-7]) PART=&quot;s$p7&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
case &quot;$p8&quot; in
[0-7]) PART=&quot;s$p8&quot;
SUM=&quot;$SUM $DEV$PART &quot;
#
;;
*) ;;
#
esac
#
;;
*) ;;
#
esac
#
;;
*) ;;
#
esac
#
;;
*) ;;
#
esac
#
;;
*) ;;
#
esac
#
;;
#
*) ;;
#
esac

#
;;
#
*) ;;
esac
#
# *********************************************
# *** Create the &quot;log&quot; file for this device ***
# *********************************************
LF=&quot;$LOGFile$PERIOD$NDSK&quot;
#
if [ -f &quot;$LF&quot; -o -d &quot;$LF&quot; ] ; then
# Log file already exists as an ordinary file or a directory.
# This is an error condition!!!
echo &quot;$EPROMPT Log file already exists as an ordinary file or a directory&quot;
echo &quot;  File:  $LF&quot;
echo &quot;  Aborting.....&quot;
exit $ERR_LOGF_EXISTS
else
# the following code makes sure we are starting out with a ZERO file
rm &quot;$LF&quot; 1&gt; /dev/null 2&gt;&amp;1      # delete it
#
MSG=&quot;Creating Log File: $LF&quot;
echo &quot;$PROMPT$MSG&quot;
#
touch &quot;$LF&quot;                     # create it
RES=$?
if [ &quot;$RES&quot; -ne 0 ] ; then
echo &quot;$EPROMPT($RES) Creating the file: $LF&quot;
exit $ERR_LOGF_CREATE
fi
fi
#
echo &quot;Device:  $DEV&quot; &gt; $LF
date &gt;&gt; $LF
#
# *******************************
# *** Check: Partition Exists ***
# *******************************
CMD=&quot;prtvtoc $SUM&quot;
echo &quot;Checking:  $SUM exists&quot;
eval &quot;$CMD&quot; &gt; /dev/null      # execute the command
RES2=$?
if [ &quot;$RES2&quot; -ne 0 ] ; then
# ****************************
# *** Partition is Missing ***
# ****************************
EMSG=&quot;$SUM is missing&quot;
ERRLIST=&quot;$ERRLIST $EMSG ;&quot;
echo &quot;$EPROMPT$EMSG&quot;
echo
echo &quot;$EPROMPT$EMSG&quot; &gt;&gt; $LF
echo &gt;&gt; $LF
continue
fi
#
# *********************************
# *** Check: Mounted Partitions ***
# *********************************
CMD=&quot;mount $PIPE grep $SUM&quot;

echo &quot;Checking:  $SUM has mounted partitions&quot;
eval &quot;$CMD&quot; &gt; /dev/null      # execute the command
RES2=$?
#
if [ &quot;$RES2&quot; -eq 0 ] ; then
# ***********************************
# *** Disk has mounted partitions ***
# ***********************************
EMSG=&quot;$SUM has mounted partitions&quot;
ERRLIST=&quot;$ERRLIST $EMSG ;&quot;
echo &quot;$EPROMPT$EMSG&quot;
echo
echo &quot;$EPROMPT$EMSG&quot; &gt;&gt; $LF
echo &gt;&gt; $LF
continue
fi
#
# ************************
# *** Partition Exists ***
# ************************
#
CMD=&quot;$FSCKCMD $SUM &gt;&gt; $LF &amp;&quot;
echo &quot;Executing Command:&quot;
echo &quot;  $CMD&quot;
echo &quot;Executing Command:&quot; &gt;&gt; $LF
echo &quot;  $CMD&quot; &gt;&gt; $LF
eval &quot;$CMD&quot; # execute the command in the background
RES1=$?
F_PID=$!       # get the background process ID
#
echo &quot;$F_PID $p0&quot; &gt;&gt; &quot;$WIPFile&quot;  # update the WIP file
#
if [ &quot;$RES1&quot; -ne 0 ] ; then
EMSG=&quot;Checking File Systems Using the Command:&quot;
echo &quot;$EPROMPT($RES1) $EMSG&quot;
echo &quot;  $CMD&quot;
CkExit $RES1
echo &quot;  Ignoring this disk ($p0).............&quot;
#
# *** Update the 'fsck' error list ***
FERRLIST=&quot;$FERRLIST $DEV&quot;
else
echo &quot;$PROMPT Background Process ID $F_PID Started&quot;
# *** Update the Control File ***
echo &quot;$p0 $p1 $F_PID&quot; &gt;&gt; $CTRLF
#
fi
#
;;
#
*) echo &quot;Argument 1 not valid&quot;
;;
esac
#
MSG=&quot;Device: $DEV has started&quot;
echo &quot;  $MSG&quot;
#
# **************************************
# *** END: Processing Current Recond ***
# **************************************

#
fi
#
done    # END: WHILE
#
exec &lt; /dev/tty         # redirect standard input
#
# *************
# *** Notes ***
# *************
# -Done reading the file with the devices.  Now monitor the processes doing the
#  checking.
#
# ********************
# *** Control Loop ***
# ********************
#
echo &quot;&gt; &gt; &gt; Waiting For ALL Processes to Complete &lt; &lt; &lt;&quot;
DoneF=`expr 0`  # Done Flag (=0, NO; &lt;&gt; 0, YES)
#
while true
do
#
# ***********************
# *** Check: WIP File ***
# ***********************
exec &lt; $WIPFile      # redirect standard input
#
Tmp1=`expr 0`        # temp flag (=0, no process active; &lt;&gt; 0, YES)
#
while true
do
# *** Get A Line ***
# Format:
#   &lt;PID&gt;   &lt;raw device&gt;
#
read p0 p1 REM
RES=$?
# *****************************
# *** Check: Any More Lines ***
# *****************************
# 'read' always returns an exit status of '0' unless an END-OF-FILE is
# encountered.
if [ &quot;$RES&quot; -ne 0 ] ; then
# **********************************
# *** At the end of the WIP file ***
# **********************************
break
fi
#
# ***********************************
# *** Check: Process Still Active ***
# ***********************************
eval ps -ae $PIPE grep $p0 &gt; $CHKFile
CkRes=$?
if [ -s &quot;$CHKFile&quot; ] ; then
Tmp1=`expr 1`  # indicate some process active
echo &quot;$p0 still active on $p1&quot;         # notify user
fi
#
done
#
exec &lt; /dev/tty         # redirect standard input
#
# *********************************
# *** Check: Any Process Active ***
# *********************************
if [ &quot;$Tmp1&quot; -eq 0 ] ; then
echo &quot;All recorded background processes have completed&quot;
break
fi
#
# **********************************
# *** Wait Before Checking Again ***
# **********************************
sleep $SleepSec
#
echo &quot;&gt; &gt; &gt; Checking for Active Processes &lt; &lt; &lt;&quot;
#
done
#
# *********************************************
# *** Scan the Log Files for Error Messages ***
# *********************************************
# -This code will scan all file with &quot;$LOGFile$PERIOD&quot; in the file name.
# -If a partition can't be found, a &quot;Can't Stat&quot; message will be placed
#  in a log file.echo &quot;Scanning for partitions that were not found; unable to check&quot;
# echo &quot;-log files will contain message:  Can\'t stat &lt;raw partition&gt;&quot;
CMD=&quot;grep \&quot;Can\'t stat\&quot; $LOGFile$ASTER &quot;
echo &quot;Partitions NOT found if entries follow:&quot;
eval &quot;$CMD&quot;      # execute the command
#
# Notes:
# ------
# -No checking is performed on this command.  Deemed non-critical.
#
# ***************************
# *** Display Error Lists ***
# ***************************
if [ ! &quot;$ERRLIST&quot; = &quot;$NullList&quot; ] ; then
echo
echo &quot;Found Startup Problems With:&quot;
echo &quot;  $ERRLIST&quot;
fi
if [ ! &quot;$FERRLIST&quot; = &quot;$NullList&quot; ] ; then
echo
echo &quot;Found 'fsck' Problems With:&quot;
echo &quot;  $FERRLIST&quot;
fi
#
# ******************************
# *** Remove Temporary Files ***
# ******************************
rm $CHKFile 1&gt; /dev/null 2&gt;&amp;1
rm $WIPFile 1&gt; /dev/null 2&gt;&amp;1
#
echo
MSG=&quot;Do You Want to Remove all Log Files&quot;
echo &quot;$PROMPT$MSG&quot;
MSG=&quot;This will delete all files with 'log' in the file name&quot;
echo &quot;$PROMPT$MSG&quot;
MSG=&quot;Proceed (Y/N) ?&quot;
echo &quot;$PROMPT$MSG&quot;
#
read ans rem
if [ &quot;$ans&quot; = &quot;y&quot; -o &quot;$ans&quot; = &quot;Y&quot; -o &quot;$ans&quot; =
&quot;yes&quot; -o &quot;$ans&quot; = &quot;Yes&quot; -o &quot;$ans&quot; = &quot;YES&quot; ] ; then
# ****************************
# *** Remove All Log Files ***
# ****************************
#
MSG=&quot;Removing Log Files&quot;
echo &quot;$PROMPT$MSG&quot;
CMD=&quot;rm *\.log\.* 1&gt; /dev/null 2&gt;&amp;1&quot;
eval &quot;$CMD&quot;
RES=$?
if [ &quot;$RES&quot; -ne 0 ] ; then
EMSG=&quot;Removing Log Files&quot;
echo &quot;$EPROMPT$EMSG&quot;
echo &quot;  Response: $RES&quot;
exit $ERR_RM_LOGFS
fi
#
fi
#
# *****************************************
# *** Remove all Work-In-Progress Files ***
# *****************************************
#
MSG=&quot;Removing all Work-In-Progress Files&quot;
echo &quot;$PROMPT$MSG&quot;
#
CMD=&quot;rm *\.wip\.* 1&gt; /dev/null 2&gt;&amp;1&quot;
eval &quot;$CMD&quot;
#
# ******************************
# *** Remove all Check Files ***
# ******************************
#
MSG=&quot;Removing all Check Files&quot;
echo &quot;$PROMPT$MSG&quot;
#
CMD=&quot;rm *\.chk\.* 1&gt; /dev/null 2&gt;&amp;1&quot;
eval &quot;$CMD&quot;
#
# **************************************************
# *** Remove the Control File ONLY if successful ***
# **************************************************
#
MSG=&quot;Removing the Control File: $CTRLF&quot;
echo &quot;$PROMPT$MSG&quot;
#
CMD=&quot;rm $CTRLF 1&gt; /dev/null 2&gt;&amp;1&quot;
eval &quot;$CMD&quot;
RES=$?
if [ &quot;$RES&quot; -ne 0 ] ; then
EMSG=&quot;Removing Control File&quot;
echo &quot;$EPROMPT$EMSG&quot;
echo &quot;  Response: $RES&quot;
fi
#
exit 0
#
#
# ***********
# *** END ***
# ***********
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
