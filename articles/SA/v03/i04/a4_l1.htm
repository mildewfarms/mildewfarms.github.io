<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i04: Listing 1: Sharing local software on a network</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a4_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a4_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1994/jul94.tar"><b class=codeListing>jul94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Sharing local software on a network</H1><p>
<PRE>
#!/opt/bin/perl
#                         setup
$version = '30-mar-94';
#
# Maintain the &quot;Honda Normal Form&quot; software packages
# on local disks, as adapted to the Solaris 2 package
# management scheme.
#
# The basic philosophy here is that no error checking
# is done during setup. The weekly &quot;setup -c&quot; and
# &quot;setup -v&quot; runs catch problems.
#
# See the accompanying Texinfo file for more details.
#
# Conversion to Solaris by John Lees, February 1993.
# Original perl coding by John Lees, October 1992.
# After a sh script written by Honda Shing, glorious
# inventor of Honda Normal Form.
#-----------------------------------------------------
# John Lees, Systems Analyst &amp; Lab Manager,
# Pattern Recognition &amp; Image Processing Laboratory
# Department of Computer Science, A714 Wells Hall,
# East Lansing, Michigan 48824-1027  USA
# lees@cps.msu.edu, lees@msuegr.bitnet, CIS 74106,1324
#  M i c h i g a n   S t a t e   U n i v e r s i t y
#-----------------------------------------------------
# Copyright 1994 by the Board of Trustees of Michigan
# State University and made available according to the
# provisions of the Free Software Foundation's GNU
# General Public License. The GPL is available by
# anonymous ftp from prep.ai.mit.edu in the file
# /pub/gnu/COPYING-2.0, or from ftp.cps.msu.edu in
# the file /pub/prip/lees/sysadmin/GPL.
#-----------------------------------------------------
umask(0);       # All permissions set explicitly.

### Globals.
#
$circular = '/opt/bin /opt/doc /opt/info /opt/include
/opt/lib /opt/man';

$nonpackage =
'. .. bin doc info include man lib lost+found';

# All the directories and subdirectories that exist
# under /opt:
@all_dir =
('bin', 'doc', 'include', 'info', 'man', 'lib',
'man/man1', 'man/man2', 'man/man3', 'man/man4',
'man/man5', 'man/man6', 'man/man7', 'man/man8',
'man/manl', 'man/mann', 'man/cat1', 'man/cat2',
'man/cat3', 'man/cat4', 'man/cat5', 'man/cat6',
'man/cat7', 'man/cat8', 'man/catl', 'man/catn');

# The directories in which to look when verifying
# correctness or doing an unsetup:
@std_dir = ('bin', 'doc', 'include', 'info', 'lib',
'man/man1', 'man/man2', 'man/man3', 'man/man4',
'man/man5', 'man/man6', 'man/man7', 'man/man8',
'man/manl', 'man/mann', 'man/cat1', 'man/cat2',
'man/cat3', 'man/cat4', 'man/cat5', 'man/cat6',
'man/cat7', 'man/cat8', 'man/catl', 'man/catn');

$help = '
Usage: setup [-c] [-f] [-h] [-p] [-q] [-r] [-s]
[-u] [-v] [-x] -lHOST/DIR PACKAGE...

-c   Check the /opt tree for UFOs.
-f   Fast! Suppresses unlinking the old pointers
for a package. Do not do this unless you are
certain everything is okay!
-h   Display usage.
-l   Local directory, e.g.,
&quot;-lserver/l00&quot;, &quot;-lserver/l42/gnu&quot;, &quot;-l..&quot;
-p   Package links only (override existing links).
-q   Quiet, do not display links made.
-r   Check for UFOs and remove them. Same as &quot;-cr&quot;.
-s   Skip any package which is already setup.
-u   Unsetup ALL the packages specified.
-v   Verify. Look at all the packages already setup
for collisions and correctness.
-x   Do not actually do the setup or unsetup (useful
to find collisions with a new package).
';

# Process all the &quot;-&quot; arguments.
# What remains should be packages.
require 'getopts.pl';
do Getopts('cfhl:pqrstuvx');

print &quot;MSU CPS setup utility, version $version\n&quot;
unless $opt_q;

# Display help?
if ($opt_h) {
print $help;
exit 0;
}

# Option combinations okay?
# ARGC at this point is the number of packages specified.

# Only check and verify do not need specific packages.
if (!($opt_c || $opt_r || $opt_v)) {
if (@ARGV &lt;&lt; 1) {
die &quot;You must specify at least one package.\n&quot;;
} }

# Check, unsetup, and verify do not need -l option.
if (!($opt_c || $opt_r || $opt_v || $opt_u) &amp;&amp; !$opt_l) {
die &quot;The -l option is required.\n&quot;;
}

# No packages allowed with check and verify.
if ($opt_c || $opt_r || $opt_v) {
if (@ARGV &gt;&gt; 0) {
die &quot;No packages allowed with check/verify.\n&quot;;
} }

# Check out -l option. Set $fs with true path from /.
if ($opt_l) {
if (substr($opt_l,0,1) eq '.') {
chop($here = `pwd`);
chdir($opt_l) ||
die &quot;Arghh! Cannot chdir to \&quot;$opt_l\&quot;!\n&quot;;
chop($fs = `pwd`);
chdir($here) ||
die &quot;Arghh! Cannot get back to \&quot;$fs\&quot;!\n&quot;;
}
else {
$fs = &quot;/home/&quot;.$opt_l;
}
stat($fs) ||
die &quot;Bad -l option. Cannot stat \&quot;$fs\&quot;!\n&quot;;
}

#
### Check option. This option looks at the entire
### /opt tree for anything that should not be there.
### If -r was specified, the bogus stuff is removed.
#
if ($opt_c || $opt_r) {
print &quot;Beginning check . . .\n&quot;;
do check('/opt');

printf(&quot;%d symbolic, %d UFO, and %d empty links.\n&quot;,
$count_links, $count_huh, $count_empty);

if ($opt_r) {
printf(&quot;UFO and empty links have been REMOVED!\n&quot;);
printf(&quot;Rerunning check to verify removals.\n&quot;);
$opt_r = 0;
do check('/opt');
}
} # End of check.

#
### Verify option. This option looks at all the installed
### packages for name collisions. Also check a number of
### requirements for how each package is installed.
#
if ($opt_v) {
print &quot;\nBeginning verify . . .\n&quot;;

foreach $dir (@std_dir) {
print &quot;Verify collisions for $dir . . .\n&quot;;

%bb = (); # Zap the blackboard array.
opendir(OPT, '/opt');

# Check to see if an object is in more than one
# package, e.g., there is a &quot;foobar&quot; in both
# package1/bin and package2/bin.
foreach $package (readdir(OPT)) {
if (index($nonpackage, $package) &lt;&lt; 0) {
do find($package, &quot;/opt/$package/$dir&quot;);
} }
close(OPT);
} # foreach dir (blackboard scan).
print &quot;\n&quot;;

opendir(OPT, '/opt');
foreach $package (readdir(OPT)) {
if (index($nonpackage, $package) &lt;&lt; 0) {
print &quot;Verify correctness for $package . . .\n&quot;;

# Readme.local is required.
if (! ((-s &quot;/opt/$package/README.local&quot;)
|| (-s &quot;/opt/$package/Readme.local&quot;)) ) {
print &quot;   No Readme.local!\n&quot;;
}

# See if catman has been run.
do checkman(&quot;/opt&quot;, $package);

# Iff a package has package/etc then
# /etc/opt/package must be a link.
if (-d &quot;/opt/$package/etc&quot;) {
$link = readlink(&quot;/etc/opt/$package&quot;);
if (defined($link)){
# Must be a link of the form
# &quot;/opt/$package/etc&quot;.
if ($link ne &quot;/opt/$package/etc&quot;) {
print &quot;   ungood link for &quot;
.&quot;\&quot;$package/etc\&quot;: \&quot;$link\&quot;\n&quot;;
} }
else {
print &quot;   $package/etc but no &quot;
.&quot;/etc/opt/$package!\n&quot;;
} }
elsif (-e &quot;/etc/opt/$package&quot;) {
print
&quot;   /etc/opt/$package should not exist!\n&quot;;
}

# /var/opt/$package should be a link if there
# is a $package/var, but it is okay for there
# to be a /var/opt/$package that is not a link.
# There MUST be a /var/opt/$package.
if (-d &quot;/opt/$package/var&quot;) {
if (! -d &quot;/var/opt/$package&quot;) {
print &quot;   $package/var but no link to &quot;
.&quot;/var/opt/$package!\n&quot;;
}
if ((-d &quot;/var/opt/$package&quot;)
&amp;&amp; (! -l &quot;/var/opt/$package&quot;)) {
print
&quot;   $package/var but /var/opt/$package &quot;
.&quot;is not a link!\n&quot;;
} }
if (! -d &quot;/var/opt/$package&quot;) {
print &quot;   no /var/opt/$package!\n&quot;;
} }
close(OPT);
} # foreach dir (correctness scan).
} #--- End of verify.

#
### If we did check or verify, it's time to leave.
#
if ($opt_c || $opt_r || $opt_v) {
exit 0;
}

#
### Setup. #######################################
#
print &quot;Base directory is \&quot;$fs\&quot;\n&quot;
unless ! $opt_l || $opt_q;
if ($opt_x) {
print &quot;### -x, no changes will be made! ###\n&quot;;
}

#
### First make sure the minimum /opt directory
# structure exists.
#
if (! $opt_u) {
# /opt itself.
if (! -e '/opt') {
mkdir('/opt', 0755)
unless $opt_x;
print(&quot;Created /opt\n&quot;)
unless $opt_q;
}
# All the standard directories.
foreach $dir (@all_dir) {
if (! -e &quot;/opt/$dir&quot;) {
mkdir(&quot;/opt/$dir&quot;, 0755)
unless $opt_x;
print(&quot;Created /opt/$dir\n&quot;)
unless $opt_q;
} } }

#
### Now do each package.
#
loop:
foreach $package (@ARGV) {
split(/\//, $package);
$package = pop(@_);
if (! $opt_u  &amp;&amp;  ! -d &quot;$fs/$package&quot;) {
print &quot;WARNING: $package is not a directory. &quot;
.&quot;Skipping!\n&quot;
unless $opt_q;
next loop;
}

# See if catman has been run.
do checkman($fs, $package)
unless $opt_p;

# Readme.local is required.
if (! ($opt_u || $opt_p)
&amp;&amp; ! ((-s &quot;$fs/$package/README.local&quot;)
|| (-s &quot;$fs/$package/Readme.local&quot;)) ) {
print &quot;   No Readme.local file.&quot;;
print &quot; Skipping \&quot;$package\&quot;!\n&quot;;
next loop;
}

# Normally do an unsetup on the package before
# doing a setup.
do {
print &quot;Removing links for $package:\n&quot;
unless $opt_q;
do unsetup($package);
} unless $opt_f || $opt_p || $opt_x;

# Unsetup only?
if ($opt_u) {
next loop;
}

print &quot;Linking package $package:\n&quot;
unless $opt_q;

# The package itself.
if (-e &quot;/opt/$package&quot;) {
if ($opt_s) {
next loop;     # Already setup.
}
print &quot;WARNING: /opt/$package ALREADY LINKED!\n&quot;
unless $opt_q || $opt_p;
}
# The symlink call does not replace an existing
# link, so with -p we have to remove the link first.
if ($opt_p &amp;&amp; ! $opt_x) {
unlink(&quot;/opt/$package&quot;) ||
print &quot;   UNLINK FAILED!\n&quot;;
}
symlink(&quot;$fs/$package&quot;, &quot;/opt/$package&quot;)
unless $opt_x;

# With the -p option, we skip all the rest.
if ($opt_p) {
next loop;
}

# Create /etc/opt/package link only if there is
# a package/etc directory.
if ((-e &quot;$fs/$package/etc&quot;)
&amp;&amp; (! -e &quot;/etc/opt/$package&quot;)) {
symlink(&quot;/opt/$package/etc&quot;, &quot;/etc/opt/$package&quot;)
unless $opt_x;
print(&quot;Created link to /etc/opt/$package\n&quot;)
unless $opt_q;
}

# Always create /var/opt/package, as a link or a dir.
if (-e &quot;$fs/$package/var&quot;) {
symlink(&quot;/opt/$package/etc&quot;, &quot;/var/opt/$package&quot;)
unless $opt_x;
print(&quot;Created link to /var/opt/$package\n&quot;)
unless $opt_q;
}
else {
mkdir(&quot;/var/opt/$package&quot;, 01777)
unless $opt_x;
# With perl-4.036 under Solaris 2.1, the mkdir
# was not setting the permissions correctly. The
# explicit chmod was needed.
chmod(01777, &quot;/var/opt/$package&quot;)
unless $opt_x;
print(&quot;Created /var/opt/$package directory.\n&quot;)
unless $opt_q;
}
#
### Now do the links for each of the standard
### package directories. These are all optional.
#
@pkgdir = ('bin', 'info', 'include', 'lib');
foreach $dir (@pkgdir) {
PKGDIR: {
chdir(&quot;$fs/$package/$dir&quot;) &amp;&amp; do {
print &quot;   /$dir\n&quot;
unless $opt_q;
# Sometimes we play weird games, so prevent
# making a link loop.
if (-l &quot;$fs/$package/$dir&quot; &amp;&amp;
index($circular,
readlink(&quot;$fs/$package/$dir&quot;)) &gt;&gt;= 0) {
printf &quot;      SKIPPING: link to \&quot;%s\&quot;\n&quot;,
readlink(&quot;$fs/$package/$dir&quot;)
unless $opt_q;
next;
}
opendir(DIR, '.');
foreach $obj (readdir(DIR)) {
if ($obj ne '.'  &amp;&amp;  $obj ne '..') {
print &quot;      $obj\n&quot;
unless $opt_q;
symlink(&quot;../$package/$dir/$obj&quot;,
&quot;/opt/$dir/$obj&quot;)
unless $opt_x;
} }
closedir(DIR);
}; } } # foreach PKGDIR

# The doc directory is a little different.
if (-d &quot;$fs/$package/doc&quot;) {
print &quot;   /doc\n&quot;
unless $opt_q;
symlink(&quot;../$package/doc&quot;, &quot;/opt/doc/$package&quot;)
unless $opt_x;
} # doc

# The man hierarchy.
chdir(&quot;$fs/$package/man&quot;) &amp;&amp; do {
print &quot;   /man\n&quot;
unless $opt_q;
opendir(DIR, '.');
foreach $man (readdir(DIR)) {
if ($man ne '.'  &amp;&amp;  $man ne '..'
&amp;&amp;  $man ne 'whatis') {
chdir(&quot;$fs/$package/man/$man&quot;);
opendir(MAN, '.');
foreach $obj (readdir(MAN)) {
if ($obj ne '.'  &amp;&amp;  $obj ne '..') {
print &quot;      $man/$obj\n&quot;
unless $opt_q;
symlink(&quot;../../$package/man/$man/$obj&quot;,
&quot;/opt/man/$man/$obj&quot;)
unless $opt_x;
} }
closedir(MAN);
}
closedir(DIR);
} }; # man
} # foreach package
exit 0;
# End of setup &quot;main program&quot;.

#----------------------------------------------------
# unsetup. Remove all links to a particular package.
#----------------------------------------------------
sub unsetup {
local($package) = @_;
local($link, $obj, $whatsit);

# Funny business to precompile the pattern.
$_ = &quot;../$package/&quot;;
/\.\.\/$package\//;

foreach $whatsit (@std_dir) {
chdir(&quot;/opt/$whatsit&quot;) &amp;&amp; opendir(HERE, '.') &amp;&amp; do {
print &quot;   $whatsit\n&quot;
unless $opt_q;
foreach $obj (readdir(HERE)) {
# Will fail on '.' and '..'
($link = readlink($obj)) &amp;&amp; do {

if ($link =~ //) {
unlink($obj);
do { print &quot;      $obj REMOVED\n&quot;
unless $opt_q};
} }; } };
closedir(HERE);
}

if (-l &quot;/opt/$package&quot;) {
unlink(&quot;/opt/$package&quot;) &amp;&amp;
do { print &quot;/opt/$package  REMOVED\n&quot;
unless $opt_q};
}

if (-l &quot;/etc/opt/$package&quot;) {
unlink(&quot;/etc/opt/$package&quot;) &amp;&amp;
do { print &quot;/etc/opt/$package  REMOVED\n&quot;
unless $opt_q};
}

if (-l &quot;/var/opt/$package&quot;) {
unlink(&quot;/var/opt/$package&quot;) &amp;&amp;
do { print &quot;/var/opt/$package  REMOVED\n&quot;
unless $opt_q};
}
elsif (-d &quot;/var/opt/$package&quot;) {
system(&quot;/bin/rm -rf /var/opt/$package&quot;) &amp;&amp;
do { print &quot;/var/opt/$package  REMOVED\n&quot;
unless $opt_q};
} } # End of routine &quot;unsetup&quot;.

#-----------------------------------------------------
# check. Descend into the directory passed as argument
# $_[0]. @dirhandle is a global array used to hold the
# handles for open directories, indexed by the global
# variable $n. This routine is called recursively.
# The -x and -q options do not apply here.
#-----------------------------------------------------
sub check {
local ($obj); # $_ is implicitly local.
chdir($_[0]);
print `pwd`;
opendir(@dirhandle[++$n], '.');
foreach $obj (readdir(@dirhandle[$n])) {
case: {

# Descend into anything that is real directory.
(-d $obj  &amp;&amp; (! -l $obj)  &amp;&amp;  $obj ne '.'
&amp;&amp;  $obj ne '..'  &amp;&amp;  $obj ne 'lost+found')
&amp;&amp;  do {
if (-x $obj) {
do check(&quot;$obj&quot;);
}
else {
print &quot;Cannot access \&quot;$obj\&quot;!\n&quot;;
}
last case;
};

# Count symbolic links.
(-l $obj)  &amp;&amp;  do {
$count_links++;
if (! -e readlink($obj)) {
print &quot;  Empty link or cannot access: &quot;,
readlink($obj);
if ($opt_r) {
unlink($obj) &amp;&amp; print &quot; REMOVED\n&quot;;
}
else {
print &quot;\n&quot;;
}
$count_empty++;
}
last case;
};

# Not a link, not a directory!
($obj ne '.'  &amp;&amp;  $obj ne '..'
&amp;&amp;  $obj ne 'lost+found')  &amp;&amp;  do {
$f = `ls -Fdl \\$obj`;
chop($f);
print &quot;  Non-link: $f&quot;;
if ($opt_r) {
unlink($obj) &amp;&amp; print &quot; REMOVED\n&quot;;
}
else {
print &quot;\n&quot;;
}

$count_huh++;
last case;
};

} # end of case
}
closedir(@dirhandle[$n--]);
chdir('..');
print `pwd`;
} # End of subroutine check.

#-----------------------------------------------------
# find. Fill up a big associative array with objects
# in the directory. Report collisions.
#----------------------------------------------------
sub find {
local($package, $directory) = @_;
local($obj);

if (-l $directory &amp;&amp; index($circular,
readlink($directory)) &gt;&gt;= 0) {
printf &quot;WARNING: \&quot;$directory\&quot; is a link to \&quot;%s\&quot;\n&quot;,
readlink($directory);
return;
}
opendir(HERE, $directory) || return;

foreach $obj (readdir(HERE)) {
if ($obj ne '.' &amp;&amp; $obj ne '..') {
if ($bb{$obj} ne &quot;&quot;) {
printf &quot;   $obj in $package and $bb{$obj}\n&quot;;
}
else {
$bb{$obj} = $package;
} } }

closedir(HERE);
} # End of routine &quot;find&quot;.

#------------------------------------------------------
# catman. See if catman has been run.
#-----------------------------------------------------
sub checkman {
local($path, $package) = @_;
local($mandir, $catdir, $manpage);
opendir(MAN, &quot;$path/$package/man&quot;);
foreach $mandir (readdir(MAN)) {
if ($mandir =~ /man/) {
$catdir = $mandir;
$catdir =~ s/man/cat/;
opendir(MANX, &quot;$path/$package/man/$mandir&quot;);
foreach $manpage (readdir(MANX)) {
if ($manpage ne '.' &amp;&amp; $manpage ne '..') {
if (! -f
&quot;$path/$package/man/$catdir/$manpage&quot;) {
print &quot;   No $catdir page for $manpage\n&quot;
unless $opt_q;
} } }
closedir(MANX);
} }

closedir(MAN);
} # End of routine &quot;checkman&quot;.
### End of the setup program.
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
