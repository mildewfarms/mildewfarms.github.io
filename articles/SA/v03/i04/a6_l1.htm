<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i04: Listing 1: mon.c Source Code </title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a6_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a6_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1994/jul94.tar"><b class=codeListing>jul94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: mon.c Source Code </H1><p>
<PRE>
1       /*
2        * mon.c
3        * Copyright 1992, Chris Hare
4        */
5
6       #include &lt;sys/types.h&gt;          /* system primitives
7       #include &lt;sys/param.h&gt;          /* system configuration parameters
8       #include &lt;sys/page.h&gt;           /* system memory management
9       #include &lt;sys/immu.h&gt;           /* system intel memory management
10      #include &lt;sys/region.h&gt;         /* system process region configuration
11      #include &lt;sys/proc.h&gt;           /* process table structure */
12      #include &lt;sys/var.h&gt;            /* system configuration */
13      #include &lt;sys/dir.h&gt;            /* File system header */
14      #include &lt;sys/user.h&gt;           /* u-area information */
15      #include &lt;sys/sysi86.h&gt;         /* SCO UNIX SPECIFIC - this header is used
16                                         to provide support for the sysi86
17                                         function which is used to retrive the
18                                         process u-area. */
19      #include &lt;sys/file.h&gt;           /* system file table structure */
20      #include &lt;stdio.h&gt;              /* standard libary header */
21      #include &lt;fcntl.h&gt;              /* file control header */
22      #include &lt;nlist.h&gt;              /* system namelist structure */
23      #include &lt;pwd.h&gt;
24      #include &lt;string.h&gt;             /* string functions */
25      #include &lt;memory.h&gt;             /* memory management functions */
26
27      struct nlist names[] = {
28              &quot;proc&quot;, 0,      0,      0,      0,      0,
29              &quot;v&quot;,    0,      0,      0,      0,      0,
30              &quot;file&quot;, 0,      0,      0,      0,      0,
31              0,      0,      0,      0,      0,      0,
32      };
33
34      proc_t p;                       /* process structure */
35      struct var v;                   /* namelist structure */
36      struct file file_table;         /* file table structure */
37      int NOFILES;                    /* open file counter */
38
39      char *Usage = &quot;Usage: mon\n&quot;;   /* error message */
40
41      main(argc, argv)
42              int argc;
43              char *argv[];
44      {
45
46              int k_fd;               /* kernel filedescriptor */
47
48              /* call nlist(S) to fill out values in names[]; */
49              nlist( &quot;/unix&quot;, names );
50
51              /* open /dev/kmem, readonly;*/
52              k_fd = open( &quot;/dev/kmem&quot;, O_RDONLY );
53              if ( k_fd &lt; 0 )
54                      {
55                      perror(&quot;/dev/kmem&quot;);
56                      exit(1);
57                      }
58              /* call domon() to read the process table and print the results;*/
59              domon(k_fd);
60
61              close( k_fd );
62              exit(0);
63
64      }
65
66      /*
67       * domon()
68       *
69       * lseek, and then read the process table from /dev/kmem
70       */
71
72      domon(fd)
73      int fd;
74      {
75
76              int bytes_seek = 0;
77              int p_no = 0;
78              /*int p_used = 0;*/
79              char *Pp_used;
80              int p_used = 0;
81              struct proc p_entry;
82              long proc_table = names[0].n_value;
83              long var_table = names[1].n_value;
84
85              /* seek to the struct v, and read it; */
86              bytes_seek = lseek( fd, var_table, 0 );
87              read( fd, &amp;v, sizeof(v) );
88              NOFILES = v.v_nofiles;
89              /*
90                 calculate the current extent of the process table, based
91                 on v.ve_proc;
92              */
93              p_used = ( ( (long)v.ve_proc - proc_table ) / sizeof(p_entry) );
94              /* seek to the process table; */
95              bytes_seek = lseek( fd, proc_table, 0 );
96              /*
97              print a header on the screen;
98              */
99              dohdr();
100
101             for( p_no = 0; p_no &lt; p_used; p_no++ )
102                {
103                /* read the process table entry;*/
104                bytes_seek = read( fd, &amp;p_entry, sizeof(p_entry) );
105
106                /*
107                   if p_stat is valid,
108                   call doproc() to display the proc entry;
109                */
110                if ( p_entry.p_stat &gt; 0 )
111                   doproc( &amp;p_entry );
112                }
113             printf( &quot;--\nCONFIG : %d ALLOC : %d\n&quot;, v.v_proc, p_used );
114
115     }
116
117     /*
118      * dohdr()
119      *
120      * print column headers
121      */
122
123     dohdr()
124     {
125             printf( &quot;STATUS FLAGS PID    PPID   USERID   PRI NI C  OF  TTY COMMAND\n&quot;);
126     }
127
128     /*
129      * doproc()
130      *
131      * print process table entry
132      */
133
134     doproc(pp)
135     proc_t *pp;
136     {
137             char *p_state[8] = { &quot;&quot;, &quot;SSLEEP&quot;, &quot;SRUN&quot;,
&quot;SZOMB&quot;,
138                                  &quot;SSTOP&quot;, &quot;SIDL&quot;, &quot;SONPROC&quot;,
&quot;SXBRK&quot; };
139
140             struct passwd *getpwuid();    /* define the subroutine */
141             struct passwd *pw;    /* where to put the data */
142             struct user u_buf;
143             char pflag[6];
144             int x;
145             int ret;
146             char cmd[PSARGSZ];
147
148             /* get the real user name for this process */
149             pw = getpwuid( pp-&gt;p_uid );
150             /* get the u-block for the process and stuff it into a buffer */
151             ret = sysi86( RDUBLK, pp-&gt;p_pid, &amp;u_buf, sizeof(u_buf) );
152             memset( cmd, 0x00, PSARGSZ );
153             if ( ret &lt; 0 )
154                strcpy( cmd, &quot;&lt;defunct&gt;&quot; );
155             else
156                strcpy( cmd, u_buf.u_psargs );
157             /* find out how many files this process has open */
158             for (x = 0; x&lt; NOFILES; x++ )
159                {
160                if ( u_buf.u_ofile[x] == (char *)0 )
161                   break;
162                }
163             /* is this process in ram, or on swap? */
164             memset( pflag, 0x00, sizeof(pflag) );
165             if ( ( pp-&gt;p_flag &amp; 0x00000001 ) == 1 )
166                     strcpy( pflag, &quot;SYS&quot; );
167             else if ( ( pp-&gt;p_flag &amp; 0x00000008 ) == 0x8 )
168                     strcpy( pflag, &quot;NWAKE&quot; );
169             else if ( ( pp-&gt;p_flag &amp; 0x00000020 ) == 0x20 )
170                     strcpy( pflag, &quot;LOCK&quot; );
171             else if ( ( pp-&gt;p_flag &amp; 0x00020000 ) == 0x20000 )
172                     strcpy( pflag, &quot;ASLP&quot; );
173             else if ( ( pp-&gt;p_flag &amp; 0x01000000 ) == 0x01000000 )
174                     strcpy( pflag, &quot;EXIT&quot; );
175             else if ( ( pp-&gt;p_flag &amp; 0x00000010 ) == 0x10 )
176                     strcpy( pflag, &quot;CORE&quot; );
177             else
178                     strcpy( pflag, &quot;SWAP&quot; );
179             /*print the process table entry described by pp;*/
180             /* STATE FLAGS PID PPID UID PRI NI C FILES CMD*/
181             printf( &quot;%-7s %-5s %-6d %-6d %-8s %-3d %-2d %-2d %2d %-s\n&quot;,
182                      p_state[pp-&gt;p_stat], pflag, pp-&gt;p_pid, pp-&gt;p_ppid,
183                      pw-&gt;pw_name, pp-&gt;p_pri, pp-&gt;p_nice, pp-&gt;p_cpu, x, cmd );
184             return(0);
185     }
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
