<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i04: Listing 6: sldial.c--Simple little program which dials-out, then exec's sliplogin to handle teh slip setup</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink>Listing 6</span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1994/jul94.tar"><b class=codeListing>jul94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 6: sldial.c--Simple little program which dials-out, then exec's sliplogin to handle teh slip setup</H1><p>
<PRE>
#include &quot;uucp.h&quot;

#define _PATH_SLIPLOGIN &quot;/usr/sbin/sliplogin&quot;
#define _PATH_PPPD      &quot;/usr/sbin/pppd&quot;

/* amount of time we will wait for CONNECT */
extern int maxexpecttime,
trycalls;       /* number of times to retry a line
*/
jmp_buf Sjbuf;                  /*needed by uucp routines*/
extern void cleanup ();

main(argc, argv)
int argc;
char *argv[];
{
int ret, i, sflag = 0, fflag = 0, fd;
char *name, *pgrm, *string, *slhost;
/* for uucp callers,  dialers feedback */
Verbose = 1;

slhost = NULL;
name = ((name = strrchr (argv[0], '/')) == NULL) ? argv[0] : name + 1;
strcpy(Progname, name);
ret = setservice(&quot;slip&quot;);
ASSERT(ret == 0, Ct_OPEN, &quot;Systems&quot;, ret);

trycalls = 1;       /* default in uucp is 2 */
while((i = getopt(argc, argv, &quot;dS:x:fT:R:&quot;)) != EOF)
switch(i) {
case 'd':
Debug = 9; /*turns on uucp debugging-level 9*/
break;
case 'S':
slhost = optarg;
break;
case 'x':
Debug = atoi (optarg);
break;
case 'f':
fflag++;
break;
case 'T':
maxexpecttime = atoi (optarg);
break;
case 'R':
trycalls = atoi (optarg);
break;
case '?':
goto Usage;
}

/* XXX: add the ability to specify phone number,
line, etc, like cu */
if (optind &lt; argc &amp;&amp; optind &gt; 0) {
sflag++;
string = argv[optind];
if (versys(string)) {
(void) fprintf(stderr,
&quot;%s: %s not in Systems file\n&quot;,
Progname, string);
cleanup(101);
}
strncpy(Rmtname, string, MAXBASENAME);
Rmtname[MAXBASENAME] = '\0';
if (slhost == NULL)
slhost = Rmtname;
}

if (!sflag) {
Usage:;
fprintf (stderr, &quot;Usage: %s [-d] [-T seconds] [-R retries] [-S sliphost] &lt;SystemName&gt;\n&quot;,
Progname);
fprintf (stderr, &quot;\tWhere:\n&quot;);
fprintf (stderr, &quot;\tsliphost is the Slip Host keyword in slip.hosts\n&quot;);
fprintf (stderr, &quot;\tSystemName is the dial-out systemname defined in Systems.slip\n&quot;);
exit (1);
}

/* fork early so that the lockfile gets our pid */
if (!fflag &amp;&amp; fork() &gt; 0)
exit(0);

fd = conn(Rmtname);
if (fd &lt; 0) {
delock(Rmtname);
fprintf (stderr, &quot;%s: FAILED: %s\n&quot;, Progname, UERRORTEXT);
cleanup(101);
}
/* sliplogin expects the tty on stdin */
(void)dup2(fd, 0);

/* XXX: pick between sliplogin or pppd */
pgrm = *Progname == 's' ? _PATH_SLIPLOGIN : _PATH_PPPD;
name = ((name = strrchr (pgrm, '/')) == NULL) ? pgrm : name + 1;

execl(pgrm, name, slhost, (char *) 0);

exit (1);
}

void
cleanup(code)
int code;
{
CDEBUG(4,&quot;call cleanup(%d)\r\n&quot;, code);

/* XXX: might want to do more here ?? */

rmlock((char*) NULL);       /* remove lock files */
exit(code);
}

/*
*      produce an assert error message
* input:
*   s1 - string 1
*      s2 - string 2
*      i1 - integer 1 (usually errno)
*      file - __FILE of calling module
*      line - __LINE__ of calling module
*/
void
assert(s1, s2, i1, file, line)
char *s1, *s2, *file;
{
char buf1[80];

sprintf (buf1, &quot;%s %s: %%d\n&quot;, s1, s2);
VERBOSE(buf1,i1);
}

void logent(){}         /* so we can load ulockf() */

/* End of sldial.c */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
