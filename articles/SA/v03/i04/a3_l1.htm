<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v03, i04: Listing 1: snklogin.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a3_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1994/jul94.tar"><b class=codeListing>jul94.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: snklogin.c</H1><p>
<PRE>
/*  Listing 1
* snklogin.c - front end to standard login program
* which first authenticates the user using the
* SecureNet encryption key.
* Mark Dapoz   Wed Dec  2 15:41:47 MET 1992
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;strings.h&gt;
#include &lt;ctype.h&gt;
#include &lt;signal.h&gt;
#include &lt;setjmp.h&gt;
#include &lt;syslog.h&gt;
#include &lt;pwd.h&gt;
#include &quot;snk.h&quot;
#include &quot;pathnames.h&quot;
#include &quot;des.h&quot;

char snkkey[8];
int pflag=0, iflag=0, hflag=0;
char *from_host = &quot;unknown host&quot;;
char *from_ip   = &quot;location unknown&quot;;
char *user      = NULL;

jmp_buf env;

main(argc, argv)
int argc;
char **argv;
{

char challenge[9], response[9], snkkey[8], reply[16];
char id[16], in_id[9], *p, message[1024];;
unsigned int oct1, oct2, oct3, oct4,
oct5, oct6, oct7, oct8, cksum;
register int ch;
int i;
int secured=0;
extern char *optarg;
extern int optind;
FILE *in_file;
extern int timeout();
char *real_ipinfo();
char *auth_class=NULL;
int quit();

/* list of hostnames that we allow through */
char *hosts_allow[] = {     &quot;viceroy.bsc.no&quot;,
&quot;traine.bsc.no&quot;,
&quot;overlord.bsc.no&quot;,
NULL };

/* list of ip addresses that we allow through */
char *ip_addr_allow[] = {   &quot;129.177.80.6&quot;,
&quot;129.177.80.64&quot;,
&quot;129.177.80.5&quot;,
NULL };

signal(SIGALRM, timeout);
/* just die if anything goes wrong */
signal(SIGHUP, quit);
signal(SIGINT, quit);
signal(SIGQUIT, quit);
signal(SIGILL, quit);
signal(SIGABRT, quit);
signal(SIGSEGV, quit);

signal(SIGTERM, quit);

/* zero out the snkkey first */
for (i=0; i&lt;= 7; i++)
snkkey[i] = NULL;

/* send messages to syslog */
openlog(argv[0], LOG_PID | LOG_CONS, LOG_AUTH);

while ((ch = getopt(argc, argv, &quot;c:h:i:p&quot;)) != EOF) {
switch((char)ch) {
case 'c':
auth_class=optarg;
break;
case 'h':
hflag++;
from_host=optarg;
break;
case 'i':
iflag++;
from_ip=optarg;
break;
case 'p':
pflag++;
break;
case '?':
default:
break;
}
}
argc -= optind;
argv += optind;
if (argc)
user=argv[0];

/* check for hosts we allow directly in */
if (hflag)
secured+=allow(from_host, hosts_allow);
if (iflag)
secured+=allow(from_ip, ip_addr_allow);
/* restricted access line (remote) */
if (auth_class) {
struct passwd *pw=getpwnam(user);

if (pw &amp;&amp; !strcmp(pw-&gt;pw_class, auth_class))
secured++;
}

sprintf(message, &quot;Connection from %s (%s)\n&quot;,
from_host, from_ip);
fprintf(stderr, &quot;%s&quot;, message);
syslog(LOG_NOTICE, message);
/* let some people straight through */
if (secured) {
syslog(LOG_NOTICE,
&quot;Direct access allowed from %s (%s) for %s&quot;,
from_host, from_ip, user ? user : &quot;(unknown)&quot;);
start_login(secured);
syslog(LOG_ERR,&quot;Can't start login process: %m&quot;);
fprintf(stderr,&quot;Problems starting %s...&quot;,
_PATH_LOGIN);
quit();
}

/* open the key file */
if ((in_file = fopen(_PATH_KEYFILE, &quot;r&quot;)) == NULL) {
perror(&quot;keyfile&quot;);
syslog(LOG_ERR,&quot;Can't open key file: %m&quot;);
fprintf(stderr,&quot;Can't open the key file...&quot;);
quit();
}

/* SNK userid supplied on command line */
if (user) {
for (p=user; isalpha(*p) | isdigit(*p); p++);
*p='\0';
strncpy(id,user,sizeof(id));
} else {    /* prompt and get the SNK userid */
for(id[0]='\0'; !strlen(id);) {
fprintf(stderr,&quot;\nSNK login: &quot;);
fflush(stderr);
if(setjmp(env) == 0) {
alarm(SNKTIMEOUT);
if (!fgets(id, sizeof(id), stdin))
quit();
alarm(0);
for (p=id; isalpha(*p) | is-
digit(*p); p++);
*p='\0';
} else {
fprintf(stderr,&quot;Timeout...&quot;);
quit();
}
}
}

/* get the key associated with the userid and
put the key into snkkey */
while (fgets(message, sizeof(message), in_file) != NULL) {
sscanf(message, &quot;%9s %o %o %o %o %o %o %o %o %x&quot;,
in_id, &amp;oct1, &amp;oct2, &amp;oct3, &amp;oct4,
&amp;oct5, &amp;oct6, &amp;oct7, &amp;oct8, &amp;cksum);
if (strlen(in_id) &amp;&amp; strncmp(in_id, &quot;#&quot;, 1)) {
if ((ismatch(in_id, id))) {

snkkey[0] = oct1;
snkkey[1] = oct2;
snkkey[2] = oct3;
snkkey[3] = oct4;
snkkey[4] = oct5;
snkkey[5] = oct6;
snkkey[6] = oct7;
snkkey[7] = oct8;
break;

}
}
*in_id='\0';
}
fclose(in_file);

/* compute the challenge/response, give them the
challenge, and get the response from the user */
installkey(snkkey, pkey);
buildsnk(pkey, challenge, response);
fprintf(stderr,&quot;Challenge is: %s\nEnter Response: &quot;,
challenge);

if(setjmp(env) == 0) {
alarm(SNKTIMEOUT);
fgets(reply, sizeof(reply), stdin);
alarm(0);
for (p=reply; isalpha(*p) | isdigit(*p); p++);
*p='\0';
} else {
fprintf(stderr,&quot;Timeout...&quot;);
quit();
}
for(i=0; i&lt;=7; i++)
if(islower(reply[i]))
reply[i]=toupper(reply[i]);

/* if the reply the user gives doesn't match with the
response we compute, they're out of here! */
if ((strncmp(response, reply, 8)) != 0) {
syslog(LOG_NOTICE,
&quot;Failed SNK login for %s from %s (%s).&quot;, id,
from_host, from_ip);
fprintf(stderr,&quot;Incorrect response...&quot;);
quit();
} else {
start_login(secured);
syslog(LOG_ERR,&quot;Can't start login process: %m&quot;);
fprintf(stderr,&quot;Problems starting %s...&quot;,
_PATH_LOGIN);
}
quit();
}

timeout(sig)
int sig;
{
signal(sig, SIG_IGN);
signal(SIGALRM, timeout);
longjmp(env, 1);
}

/* check if something is on the list */
allow(who, list)
char *who;
char *list[];
{
char *p;

for (p=*list; p; p=*(++list)) {
if (!strcmp(who, p))
return(1);
}
return(0);
}

int ismatch (s1, s2)
char *s1, *s2;
{
if (strlen(s1) != strlen(s2))
return(0);
return(!strncmp(s1, s1, 8));
}

quit()
{
fprintf(stderr,&quot;closing connection\n&quot;);
fflush(stderr);
exit(1);
}

/* start a normal login process */
start_login(secure)
int secure;
{
register char **argv;
char **addarg();

argv = addarg(0, &quot;login&quot;);
if (hflag) {
argv = addarg(argv, &quot;-h&quot;);
argv = addarg(argv, from_host);
}
if (pflag)
argv = addarg(argv, &quot;-p&quot;);
if (user) {
if (secure) {   /* only allow one login attempt */
argv = addarg(argv, &quot;-m&quot;);
argv = addarg(argv, &quot;1&quot;);
}
argv = addarg(argv, user);
} else
if (user=getenv(&quot;USER&quot;))
/* special login id */
if (strcmp(SNKLOGIN, user))
argv = addarg(argv, user);

fprintf(stderr, &quot;\n&quot;);
execv(_PATH_LOGIN, argv);
}

char **addarg(argv, val)
register char **argv;
register char *val;
{
register char **cpp;

if (argv == NULL) {
/*
* 10 entries, a leading length, and a null
*/
argv = (char **)malloc(sizeof(*argv) * 12);
if (argv == NULL)
return(NULL);
*argv++ = (char *)10;
*argv = (char *)0;
}
for (cpp = argv; *cpp; cpp++)
;
if (cpp == &amp;argv[(int)argv[-1]]) {
--argv;
*argv = (char *)((int)(*argv) + 10);
argv = (char **)realloc(argv, (int)(*argv) + 2);
if (argv == NULL)
return(NULL);
argv++;
cpp = &amp;argv[(int)argv[-1] - 10];
}
*cpp++ = val;
*cpp = 0;
return(argv);
}

/* end of snklogin.c */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
