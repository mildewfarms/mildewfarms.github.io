<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i04: Backup Scripts from UnixReview.com</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/apr2002.tar"><b class=codeListing>apr2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a4.gif" width="200" height="174" align="right">Backup 
              Scripts from UnixReview.com</h1>
            <p> <i>Edited by Ed Schaefer</i>
            <p> I host UnixReview.com's Shell Corner column. Each month I 
              choose a winning script submitted to me by a UNIX professional. 
              UnixReview.com publishes the script and pays the lucky submitter 
              $100.00. By far, the most popular submission topic is UNIX backup 
              scripts. For this article, I have selected three previously unpublished 
              UnixReview.com submissions. (All <i>Sys Admin</i> magazine listings 
              are available for download at: <b>http://www.sysadminmag.com/code/</b>.):
            <p> 
            <p> <b>nfs_backup</b> -- by Robert Sciuk (<b>rob@ControlQ.com</b>). 
              This Bourne shell script backs up files to a Network File Server. 
              This script replaces traditional tape and CD media with backing 
              up to another network server. Sciuk mounts an NFS line to the backup 
              (or destination) server, and then copies files to this link. See 
              Listing 1.
            <p> <b>mirrorcopy</b> -- by Chris Matta (<b>chris.matta@sun.com</b>). 
              This Solaris Korn shell script uses the UNIX <b>dd</b> command to 
              perform an image copy of the root file system to another unused 
              partition. Matta uses the Solaris Print Volume Table of Contents 
              command, <b>prtvtoc</b>, to verify that the destination partition 
              is viable before executing the <b>dd</b> command. After <b>dd</b> 
              completes, the <b>fsck</b> command individually checks each partition 
              for corruption. See Listing 2.
            <p> <b>backup.ss</b> -- by John Spurgeon (<b>john.p.spurgeon@intel.com</b>). 
              Newer versions of <b>tar</b> provide an exclude option, <b>-X</b>, 
              and an include option, <b>-I</b>. Spurgeon supports his software 
              distribution process by using these <b>tar</b> options with <b>backup.ss</b>, 
              a Korn shell script. See Listing 3.
            <p> 
            Backing Up a Network File Server
            <p><b> by Rob Sciuk</b>
            <p> How many times have you unintentionally deleted a directory or 
              file only to realize that there was some wheat amongst the discarded 
              chaff? Wouldn't it be nice to be able to immediately grab last 
              night's backup from a network repository? I will demonstrate 
              <b>NFS_backup</b> (Listing 1), a simple Bourne shell script that 
              performs a sophisticated and selective nightly backup of a BSD-based 
              network server.
            <p> <b>Near Line Backup/Recovery</b>
            <p> Why a network repository? With the steep drop in the price of 
              IDE drives and the commensurate increase in drive densities, the 
              newer commodity disk drives offer an unparalleled bargain in the 
              dollar-per-megabyte for storage. So much so, that an old, redundant 
              computer might be redeployed running BSD or Linux to serve as a 
              backup server.
            <p> <b>Configuration</b>
            <p> Configure <b>NFS_backup</b> using the <b>/usr/local/etc/backup.conf</b> 
              file. <b>backup.conf</b> contains the name of a given archive and 
              the path to the files separated by a colon. Each archive is on a 
              separate line:
            <p> 
            <pre>
&lt;Archive Name 1&gt;:&lt;Local Path to Files&gt;
&lt;Archive Name 2&gt;:&lt;Local Path to Files&gt;
</pre>
            For example, I mounted an NFS link to my file server "hippo" 
            as <b>/mnt/hippo</b>. Within that directory, I maintain two important 
            but logically separate projects. "Repository" is where I 
            keep globally used software, and "GoodStuff" is where I 
            keep source code for projects currently under development. Finally, 
            I back up the <b>NFS_backup</b> script and the <b>backup.conf</b> 
            configuration file. My three-archive <b>backup.conf</b> file looks 
            like:
            <p> 
            <pre>
GoodStuff:/mnt/hippo/share/GoodStuff
Repository:/mnt/hippo/share/Repository
Root:/usr/local/etc
</pre>
            <b>The Target Area</b>
            <p> The archive target area, <b>/ul/Backup</b>, living on my big, 
              cheap IDE drive contains the following directory structure:
            <p> 
            <pre>
/u1/Backup
/u1/Backup/usr/local/etc
/u1/Backup/GoodStuff
/u1/Backup/Repository
</pre>
            Each of the above directories corresponds to the archive name in the 
            <b>backup.conf</b> file. If necessary, the script creates a directory 
            corresponding to each archive in the configuration file. However, 
            the script does not delete archives removed from the script. Furthermore, 
            within each directory are ten archive files (configurable by <b>RETAIN=10</b>), 
            with a naming convention as follows:
            <p> 
            <pre>
&lt;archive&gt;.&lt;YYYYMMDD&gt;.tar.gz
</pre>
            For example, the files contained within the Repository archive in 
            my target directory would be:
            <p> 
            <pre>
Repository.20010301.tar.gz
Repository.20010302.tar.gz
.
.
Repository.20010310.tar.gz
</pre>
            <b>Excluded Files</b>
            <p> By using the <b>tar -exclude-from</b> option, the files I want 
              to exclude from nightly archiving are listed within a hidden file, 
              <b>.excludes</b>, in the actual target directory. Typically, I exclude 
              publicly accessible software available via the Internet. Thus, my 
              <b>/mnt/hippo/Repository/.exclude</b> file might contain:
            <p> 
            <pre>
/mnt/hippo/Repository/netscape
/mnt/hippo/Repository/samba
/mnt/hippo/Repository/postgres
</pre>
            <b>The Crontab Entry</b>
            <p> Because I'm using older hardware and I don't want speed 
              to be a critical issue, the script executes from cron during off 
              hours. I execute this script daily at 0259 on my FreeBSD 4.2 backup 
              box:
            <p> 
            <pre>
#minute hour mday month wday who  command
59      2    *    *     *    root /usr/local/etc/NFS_backup|mail rob@schizo
</pre>
            Owing to the network-intensive nature of NFS transfer, this script 
            is definitely an unattended after-hours process. It chews up close 
            to all my bandwidth on a 10-BT/10-B2 Ethernet. I recycled an old Pentium 
            120-Mhz box into a FreeBSD-based guardian angel for my network, and 
            you can too!
            <p> 
            Backing Up the Root File System with mirrorcopy
            <p><b> by Chris Matta</b>
            <p> I periodically back up my root file system to an unused drive 
              by using <b>mirrorcopy</b> (Listing 2), a Korn shell script. Here's 
              my logic:
            <p> 
            <p> 1. Find the root file system from the UNIX <b>df -k command</b>.
            <p> 2. Using the Solaris Print Volume Table of Contents command, <b>prtvtoc</b>, 
              determine the sizes of the root and destination drives. The <b>prtvtoc</b> 
              command determines the geometry and partitioning of a disk.
            <p> 
            <p> Assuming the root drive, executing <b>prtvtoc /dev/dsk/c1t0d0s0</b> 
              could produce:
            <p> 
            <pre>
*                          First     Sector    Last
* Partition  Tag  Flags    Sector     Count    Sector  Mount Directory
       0      2    00       2568    559824    562391   /
       1      3    01     562392    821760   1384151
       2      5    00          0  17773128  17773127
</pre>
            Under Solaris, slice two is known as the "overlap" slice. 
            It contains the whole drive's cylinders. I use it here to determine 
            the size of the drives. In the script, I eliminate comment lines beginning 
            with an asterisk with <b>grep</b>, and the <b>awk</b> script delivers 
            the partition size (field 5) if the first field is 2, the second slice.
            <p> 
            <p> 3. If the destination device doesn't exist, exit with an 
              error.
            <p> 4. If the root size is larger than the destination size, exit 
              with an error.
            <p> 5. If the destination drive doesn't respond to <b>prtvtoc</b>, 
              exit with an error.
            <p> 6. Use slice 2 to <b>dd</b> copy the entire root drive, table 
              of contents and all, ending up with an exact copy of the root file 
              system.
            <p> 7. Perform a system check, <b>fsck</b>, on each object identified 
              by <b>prtvtoc</b>. This ensures that there's no corruption.
            <p> 
            <p> In conclusion, be aware of these issues:
            <p> 
            <p> 1. Since this is potentially a destructive script, the destination 
              drive is hard-coded and is not a command-line option.
            <p> 2. This script must be run by root, but <b>mirrorcopy</b> contains 
              no "check for root section". Root permissions are required 
              to execute <b>prtvtoc</b> and to perform the copy, so non-root users 
              receive "permission denied".
            <p> 
            Including and Excluding Files Using tar
            <p><b> by John Spurgeon</b>
            <p> Many systems administrators use the <b>tar</b> command to back 
              up files. However, it might be news to some admins that the <b>tar</b> 
              command bundled with certain flavors of UNIX, such as Solaris 7, 
              lets you include and exclude specific files. After giving some examples 
              of why you might want to use these options, I present a simple shell 
              script (Listing 3) that was developed to back up an application 
              directory prior to performing an upgrade.
            <p> <b>Why You Might Want to Include or Exclude Files</b>
            <p> As release manager for a software development group, I am responsible 
              for writing the upgrade instructions used by local systems administrators 
              to install new releases of our application. Most of our application's 
              files are stored in a directory called <b>/usr/app/bin</b>. Before 
              overwriting the files in this directory, administrators back up 
              the existing files in case the new release needs to be uninstalled. 
              I developed a backup script that uses <b>tar</b> with the include 
              and exclude options to solve three problems.
            <p> First, some of our application's programs create named pipes 
              in the <b>/usr/app/bin</b> directory. If the named pipes are included 
              in the set of files to be backed up, the <b>tar</b> command hangs. 
              I use the exclude option to ensure that the <b>tar</b> command runs 
              successfully by excluding named pipes from the backup.
            <p> Second, the subdirectory <b>/usr/app/bin/new</b> shouldn't 
              be backed up because it typically contains large files that are 
              unrelated to rolling back the upgrade. I use the exclude option 
              to eliminate this subdirectory from the backup.
            <p> Third, it's convenient to keep copies of site-specific configuration 
              files located in <b>/usr/app/bin</b> separate from the complete 
              backup. In the event that the files are accidentally overwritten, 
              it's a little easier to recover these configuration files if 
              they are stored in a separate backup file. I use the include option 
              to back up specific configuration files.
            <p> 
            A Simple Backup Script Listing 3, <b>backup.sh</b>, backs up the <b>/usr/app/bin</b>
            directory. All files except for named pipes and the <b>/usr/app/bin/new</b> 
            directory are backed up to the file $backup_name. Only the files listed 
            in <b>$include_file</b> are backed up to the file <b>$recover_name</b>.
            <p><i>Ed Schaefer is a frequent contributor to Sys Admin. He is a 
              software developer and DBA for Intel's Factory Integrated Information 
              Systems, FIIS, in Aloha, Oregon. Ed also hosts the UnixReview.com 
              monthly Shell Corner column. He can be reached at: <b>olded@ix.netcom.com.</b></i> 
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
