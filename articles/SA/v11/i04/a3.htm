<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i04:CD Backups with Easy File Access </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_s1.htm">Sidebar</a></span></td>
		<td><a href="../../../../source/SA/2002/apr2002.tar"><b class=codeListing>apr2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a3.gif" width="200" height="175" align="right">CD Backups 
              with Easy File Access</h1>
            <p> <i>Bryan Smith</i>
            <p> CD drives are common components, which makes CD media ideal for 
              both self-backup/restores done by users and point backups by systems 
              administrators. But what is the optimal CD backup approach? In this 
              article, I will introduce the <b>back2cd</b> script, which maximizes 
              CD capacity while preserving CD's inherent random-access advantage.
            <p> <b>CD Recorder Optional</b>
            <p> Creating a CD of files does not require a CD recorder on the same 
              system because CD backup is a two-step process. The first and most 
              involved step is mastering (i.e., creating) the CD image. A CD image 
              is then used in the second step, recording (i.e., burning) to CD 
              media. The <b>back2cd</b> script (Listing 1) handles the first step 
              (mastering) irrespective of a CD recorder on the system. (All <i>Sys 
              Admin</i> magazine listings are available at: <b>http://www.sysadminmag.com/code/</b>.)
            <p> Mastering files into a single CD image file is analogous to archiving 
              files into a single <b>tar</b>, <b>cpio</b>, or <b>zip</b> file. 
              Archiving stuffs files and their attributes (meta-data) into a single 
              file (archive). As with <b>tar</b> or <b>cpio</b>, there is a defined 
              standard format for CD images. The ISO9660 CD standard defines a 
              data track format known as "Yellow Book", commonly represented 
              as a CD image file with a <b>.iso</b> extension. <b>back2cd</b> 
              is built around the <b>mkisofs</b> (make ISO filesystem) program, 
              included or available for most UNIX systems (and standard in Cygwin).
            <p> Recording a CD image is then analogous to un-archiving. The CD 
              recorder software un-archives the files from the single <b>.iso</b> 
              file onto CD media. Thus, the resulting CD is a replica of the files, 
              their hierarchy, and their meta-data (assuming they are preserved 
              during the mastering process). <b>back2cd</b> uses <b>mkisofs</b> 
              to create a <b>.iso</b> file that can be moved to a system with 
              a CD recorder. A <b>.iso</b> file can be recorded by the majority 
              of available CD software (e.g., Adaptec, Nero on Windows, and cdrecord 
              on UNIX).
            <p> <b>Issues with Compression</b>
            <p> Unfortunately, the CD standard does not define a compressed format. 
              Simply compressing the <b>.iso</b> file like a <b>tar</b> archive 
              is not an option because the recording software would no longer 
              recognize it. To increase the storage capacity via compression, 
              files inside the image must be compressed. This is where the capabilities 
              of <b>mkisofs</b> end and CD backup scripts built around it come 
              into play.
            <p> The most direct way is to first use <b>tar</b> to archive and 
              compress the files and then master a CD with that single file. This 
              "double archiving" method is not ideal for several reasons. 
              The CD's advantage of quick, random access is lost. The CD 
              recording process should un-archive our backup onto CD, not simply 
              plop one big file onto a CD (such a file would require further processing 
              before we could start browsing it). Also, most archivers (e.g., 
              <b>tar</b>) compress the entire archive instead of each file in 
              the archive (with the exception of the <b>afio</b> replacement for 
              <b>cpio</b>). An error at one point of a compressed archive can 
              render the rest of the archive unrecoverable.
            <p> The less direct but better method is to individually compress 
              each file. The hierarchy is still preserved for easy browsing, and 
              files are directly accessible (except for decompression). If a scratch 
              or other physical damage corrupts one or more files, no other files 
              are affected (unlike most "double archiving" approaches). 
              This is how compression is implemented in <b>back2cd</b>.
            <p> <b>The back2cd Approach</b>
            <p><b> back2cd</b> is a C shell (<b>tcsh</b> highly recommended) script 
              that reads one or more directories, builds a temporary tree where 
              the files are compressed on a per-file basis, and masters a <b>.iso</b> 
              CD image. <b>back2cd</b> provides the following:
            <p> 
            <p> 
            <ul>
              <li> A directly accessible, hierarchical copy of the original disk 
                tree on CD, except for the compression of the files. 
              <li> Careful test and replication of special files, such as device 
                nodes and symlinks. 
              <li> "Real-time" LZO compression, which drastically improves 
                performance over <b>gzip</b> and <b>bzip2</b> (<b>gzip</b>/<b>bzip2</b> 
                usage optional). See the sidebar for a comparison of LZO, <b>gzip</b>, 
                and <b>bzip2</b>. 
              <li> Errors are isolated due to per-file compression. 
              <li> Uses <b>mkisofs</b> (widely available for UNIX and included 
                in Cygwin), with both Joliet (Windows) and RockRidge (UNIX/Mac) 
                extensions on by default (Apple HFS optional). 
              <li> Option to enable md5 or other checksums for both original and 
                compressed filelist using <b>md5sum</b> (defaults to producing 
                plain filelists). 
              <li> Option to not compress files based on file magic (using <b>file</b>) 
                or extensions, which both add delays. 
              <li> C shell (<b>csh</b>) implementation to address the wealth of 
                legacy UNIX systems without a CD recorder. <b>tcsh</b> is required 
                for many features such as handling pathnames with spaces.
            </ul>
            <b>Using back2cd</b>
            <p> When using <b>back2cd</b>, you'll need to customize the documented 
              "VARIABLES" section. The most important variables are 
              <b>idir</b> and <b>itmp</b>, which each require approximately 700 
              MB free space. If regular users are to run this script, make sure 
              these directories are world-writable. Check the other VARIABLES 
              for compatibility with your OS.
            <p> Once customized, <b>back2cd</b> is simple to run and requires 
              only two parameters:
            <p> 
            <pre>
back2cd &lt;label&gt; &lt;dir&gt; [&lt;dir&gt;...]
  &lt;label&gt;  CD label/filename (withOUT .iso extension)
  &lt;dir&gt;    one or more relative/absolute directory path(s)
</pre>
            For example, user "bob" can back up his home directory. 
            From Bob's home directory:
            <p> 
            <pre>
back2cd bobs_cd .
</pre>
            <b>Conclusion</b>
            <p> <b> back2cd</b> is a cross-platform script for both end-user and 
              point backups to CD, especially legacy platforms that lack CD recorders. 
              By compressing files individually, it backs up disk trees of 1-2 
              GB into a single <b>.iso</b> CD image file that can be moved to 
              any system with a CD recorder. The resulting CD allows quick, easy, 
              and painless browsing and restores of random files as well as complete 
              trees. I have found it useful for letting users self-backup, taking 
              snapshots, off-lining data, and distributing data externally.
            <p> Linux sys admins wanting to complement <b>back2cd</b> with a complete, 
              CD-based disaster recovery solution should investigate Mondo Rescue. 
              Mondo Rescue uses bash scripts for CD-spanned, <b>afio</b>-based 
              archiving (mondo-archive), and automated boot disk/CD creation (mindi). 
              During recovery, it uses a <b>ncurses</b>-based partitioning and 
              restore utility (mondo-restore). Although the <b>afio</b> "double 
              archiving" method does not allow direct browsing like <b>back2cd</b> 
              (a non-issue when doing full restores), errors are usually isolated 
              because <b>afio</b> does per-file compression inside its archives.
            <p> <b>Resources</b>
            <p> mkisofs/cdrecord ISO9660/.iso Mastering/Recording Programs -- 
              <b>http://www.fokus.gmd.de/research/ \ cc/glone/employees/joerg.schilling/private/cdrecord.html</b>
            <p> <b>gzip</b>, <b>bzip2</b>, and <b>lzop</b> File Compression Programs 
              -- <b>http://www.gzip.org/</b> <b>http://sources.redhat.com/ 
              bzip2/</b> <b>http://www.oberhumer.com/opensource/lzop/</b>
            <p> <b>tcsh</b> (Enhanced version of the Berkeley C shell) -- 
              <b>http://www.tcsh.org</b>
            <p> Cygwin (Cygnus GNU/UNIX Environment on Windows) -- <b>http://sources.redhat.com/cygwin/</b>
            <p> <i>Bryan J. Smith has a BSCpE from the University of Central Florida. 
              For the past decade, he has worked in a dual engineering/IT role 
              at firms involved with civil, aerospace, and semiconductor design. 
              His consulting firm, SmithConcepts, Inc., offers engineering-focused 
              IT solutions. Outside of periodicals, Bryan was a contributing author 
              on </i>Samba Unleashed<i>. He currently lives near Orlando with 
              his wife Lourdes, and can be contacted at: <b>b.j.smith@ieee.org</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
