<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i04: Recovering Deleted Files in Linux</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/apr2002.tar"><b class=codeListing>apr2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a9.gif" width="200" height="174" align="right">Recovering 
              Deleted Files in Linux</h1>
            <p> <i>Brian Buckeye and Kevin Liston</i>
            <p> Most systems administrators have experienced a situation where 
              a vital file has accidentally been deleted without a recent backup. 
              In this article, we'll explore how to recover files in Linux. 
              To begin, however, there are several caveats:
            <p> 
            <p> 1. The methods described are emergency measures. They do not replace 
              a working backup process to protect your data. You should also consider 
              version control methods to protect your data from accidents.
            <p> 2. File recovery is usually a time-consuming process, and often 
              is not completely successful. Once a file is deleted, the space 
              it occupied on the hard drive is marked as "available" 
              and can be overwritten. DO NOT install any file recovery software 
              on the drive that houses the file you want to recover.
            <p> 3. These data recovery techniques involve elements of luck and 
              timing, in addition to technique. If you've suffered an accidental 
              deletion in the first place, luck isn't necessarily on your 
              side.
            <p> 4. Even if you do recover the file, there is no guarantee that 
              it will have the same information that was contained in the original. 
              Inspect anything you retrieve and verify the information before 
              you use it in production.
            <p> 5. There are several factors acting against a successful recovery, 
              including: time, file size, congestion of the disk partition, and 
              the system activity:
            <p> 
            <ul>
              <li> The more time that passes between the deletion of the file 
                and the initiation of the recovery process, the less likely the 
                process will succeed. 
              <li> The larger the size of the deleted file, the more likely damage 
                has occurred. 
              <li> The more active the system, the more likely the blocks freed 
                by the deletion will be overwritten by new data. 
              <li> If there is little free space on the disk partition, the smaller 
                pool of available blocks increases the chance that the deleted 
                data blocks will be re-used. </ul>
                <p> With those caveats in mind, we'll examine some options.
                <p> <b>Linux and ext2</b>
                <p> The default file system used by Linux is the Second Extended 
                  File system, referred to as ext2. (Ext3 with its use of journaling 
                  has also recently become common, but we will not cover it in 
                  this article.) The role of the file system itself is to abstract 
                  the physical structure of the storage media. On a physical level, 
                  a drive is a series of 512-byte sectors, addressable from 0 
                  to <i>n</i>-1. The file system is responsible for organizing 
                  these sectors into files and directories eventually used by 
                  applications via the operating system.
                <p> <b>Blocks</b>
                <p> The Linux file system, ext2, collects sectors into blocks. 
                  Ext2 supports block sizes of 1024, 2048, and 4096 bytes. Blocks 
                  are organized into block groups. Blocks are either data blocks 
                  or superblocks. Data blocks are general-purpose blocks used 
                  to store files and directories. Superblocks reside on the border 
                  of block groups and contain settings and status of the file 
                  system (e.g., formatting and cleanliness state). Block groups 
                  consist of a superblock, block allocation bitmap, inode allocation 
                  bitmap, inode table, and data blocks. Block groups are usually 
                  organized into 8*block-size blocks (e.g., 8192 blocks in a 1024-byte 
                  block-sized system). The block allocation bitmap keeps track 
                  of which blocks in the block group are in use (allocated vs. 
                  free). Our 1024-byte block size example has 1024 bytes responsible 
                  for tracking 8192 blocks. Thus, each block is mapped to one 
                  bit in the bitmap. (A "1" denotes allocated and a 
                  "0" denotes the block to be free.) The make-up of 
                  a block group includes a superblock, block allocation bitmap, 
                  inode bitmap, inode table, and data blocks.
                <p> The inode allocation bitmap work similarly, but typically 
                  uses less space than allocated, unless you have defined the 
                  system to have one inode per data block (which would be the 
                  case in a system optimized to handle a large amount of small 
                  files such as a news server). Inodes are special data-structures, 
                  each 128 bytes in length, which represent a file. By default, 
                  <b>mke2fs</b> (used to format an ext2 partition) reserves an 
                  inode for every 4096 bytes of file system space. The first ten 
                  inodes in a file system are special purpose:
                <p> 
                <p> 1 -- Bad blocks inode
                <p> 2 -- Root inode
                <p> 3 -- acl index inode (not supported)
                <p> 4 -- acl data inode (not supported)
                <p> 5 -- Boot loader inode
                <p> 6 -- Undelete directory inode (not implemented)
                <p> 7-10 -- Reserved
                <p> 
                <p> The bad blocks inode lists all of the data blocks on the file 
                  system that have detected unrecoverable errors. The root inode 
                  points to the directory file of <b>/</b>. The acl-related and 
                  undelete directory inodes are currently not implemented.
                <p> <b>Pointers</b>
                <p> Inodes contain information about a file, such as modification, 
                  access, creation (and deletion) time, ownership, permissions, 
                  size, and pointers to the actual data blocks of the file. There 
                  are 15 pointers to data blocks; the first 12 are references 
                  to direct blocks (actual file-data). The 13th pointer references 
                  the indirect block, which is a data block containing a list 
                  of 4-byte pointers to direct blocks (i.e., another 256 direct 
                  blocks in a 1024-byte block-sized system, 1024 direct blocks 
                  in a 4096-byte block-sized inode). The 14th pointer references 
                  the doubly indirect block, which is a block containing pointers 
                  to 256 (in the case of a 1024-byte block-sized file system) 
                  indirect blocks. In other words, the 14th pointer serves as 
                  the root of a tree that references 65536 data blocks in a 1024-byte 
                  block-sized file-system. The 15th pointer points to the triply 
                  indirect block, or a block full of references to doubly indirect 
                  blocks. In other words, this forms an asymmetrical tree-structure, 
                  where the inode references 15 children, the first 12 are terminal, 
                  the 13th has 1 level, the 14th has 2 levels, and the 15th has 
                  3 levels. This causes the 1.6-GB file-size limit on 1024-byte 
                  block-sized systems.
                <p> <b>Everything is a File</b>
                <p> In Linux, directories are simply special files. The second 
                  inode in the file system points to <b>/</b>. This directory 
                  links to other subdirectories (which are other directory files). 
                  Directories are simply lists of four-tuples, consisting of an 
                  inode number, entry length, name length, and filename. The entry 
                  length denotes the length of the directory entry itself. This 
                  structure allows the use of long filenames without wasting disk 
                  space, but there is some waste from directories due to block 
                  size. This is why you see a size such as 1024 for <b>.</b> and 
                  <b>..</b> in the output of <b>ls -la</b>.
                <p> Also implemented with Linux is the <b>/proc</b> pseudo filesystem. 
                  Staying consistent with the UNIX everything-is-a-file metaphor, 
                  the <b>/proc</b> directory allows access to kernel data structures. 
                  The process structures are handy for data recovery. As root, 
                  change directory to <b>/proc/&lt;pid&gt;</b>, where <b>&lt;pid&gt;</b> 
                  is the process ID you're interested in. You will see a 
                  number of directories, links, and files (note that they take 
                  up no space). Two of these directories are useful for recovering 
                  files: <b>/proc/&lt;pid&gt;/exe</b>, and <b>/proc/&lt;pid&gt;/fd</b>.
                <p> The <b>exe</b> link is an actual pointer to the file that 
                  is being executed. The <b>fs</b> link is a directory of file 
                  descriptors currently opened or in-use by the process. Every 
                  process will have at least three, which are listed first and 
                  denote <b>STDIN</b>, <b>STDOUT</b>, and <b>STDERR</b>, respectively. 
                  Other possible entries are network sockets (e.g., <b>20 -&gt; 
                  \socket:[450]</b>, or port 450) and files (e.g., <b>4 -&gt;/home/kliston/.list.swp</b>).
                <p> In Linux, each inode keeps track of a file's link count, 
                  which is the number of times that a directory lists the inode. 
                  When a file is deleted, its entry is removed from the directory 
                  file and the inode's link count is decremented. If this 
                  link is reduced to 0, then the inode is marked as "free" 
                  in the inode bitmap, and all of the blocks referenced by that 
                  inode are marked as "free" in the block bitmap. The 
                  deletion time field is set in the inode. The OS also keeps track 
                  of the processes linked to an inode. This can be used to your 
                  advantage if you are notified of the accidental deletion in 
                  time.
                <p> <b>Getting Your Files Back</b>
                <p> This all may be interesting, but you still need to know how 
                  to get your files back. The first step is determining how important 
                  the information is, and how vital it is to get it back intact. 
                  In Linux, there are a few things you can try before mounting 
                  the affected partition in read-only mode.
                <p> If you need to recover an executable that happens to be currently 
                  running (such as in a forensics case where an intruder has a 
                  backdoor running, but has deleted it to cover his tracks), you 
                  can recover simply with:
                <p> 
                <pre>
cp /proc/415/exe /tmp/backdoor
</pre>
                If you have a process running that references a recently deleted 
                file, you can try similar tricks with the <b>/proc/&lt;pid&gt;/fd</b> 
                directory. In the example above, we had:
                <p> 
                <pre>
/proc/415/fd/4 -&gt; /home/kliston/.list.swp
</pre>
                This happened to be the swap file from a vi session. Performing 
                <b>strings 4</b> returned the contents of <b>/home/kliston/list</b> 
                with some garbage as the header. Using the <b>/proc/&lt;pid&gt;/fd</b> 
                technique will require some understanding of the applications 
                to be fully successful. To list the files currently open on a 
                system, use <b>lsof</b>, or for a quick and dirty method to generate 
                a list of candidates for this technique:
                <p> 
                <pre>
ls -l [0-9]*/fd|grep &lt;deleted_file&gt;
</pre>
                If you're not lucky enough to have a case that can be solved 
                by using the <b>/proc</b> recovery techniques, you need to cease 
                write activity to the affected partition. Our examples will be 
                recovering data from <b>/home</b> or <b>/dev/hdc6</b>.
                <p> Remount the partition in read-only mode:
                <p> 
                <pre>
mount -o ro,remount -n /home
</pre>
                This will allow you to access the system and stop processes from 
                overwriting your to-be-recovered data blocks. The <b>-n</b> flag 
                instructs <b>mount</b> to not write to <b>/etc/mtab</b>, enabling 
                you to recover data from partitions that contain <b>/etc</b>, 
                such as <b>/</b>.
                <p> There are a few factors that can be used to gauge your chances 
                  for success. Before kernel 2.2.x, the indirect inode pointers 
                  (pointers 13 and above) were also zeroed out when a file was 
                  deleted. If you are working with a kernel older than 2.2.0 (use 
                  <b>uname -r</b> to find out), you're limited to the file 
                  size that you can recover using a direct inode reference technique. 
                  This recoverable limit is 12*block size. You can pull the system's 
                  block size from the superblock by doing the following (where 
                  <b>/dev/hdc6</b> is an example file system):
                <p> 
                <pre>
echo stats|debugfs /dev/hdc6
</pre>
                These examples were performed on a system running kernel version 
                2.2.19-6. The file system had a block size of 4096 and 10 block 
                groups. Files were recovered from the <b>/dev/hdc6</b> partition 
                using <b>/home</b> as a mount point. The server saw low-to-moderate 
                activity as a general-purpose server in a home/lab environment.
                <p> Using the <b>debugfs</b> utility, you can generate a list 
                  of deleted inodes, or inodes that have a non-zero time in their 
                  "Deleted Time" field. Generate a list of deleted inodes:
                <p> 
                <pre>
echo lsdel | /sbin/debugfs /dev/hdc6 &gt; /tmp/lsdel.out
</pre>
                This generates an output similar to:
                <p> 
                <pre>
debugfs:   7344 deleted inodes found.

Inode   Owner Mode      Size   Blocks   Time deleted
62984   511   100600   12288   3/   3   Thu Dec 27  10:38:44 2001
62980   511   100644     693   1/   1   Thu Dec 27  10:39:09 2001
110212  511   100644 2123710   520/ 520 Thu Dec 27  10:54:35 2001
</pre>
                Needless to say, a lot of entries were omitted, and we've 
                only shown the last three that belong to our user id since that's 
                what we're interested in. To examine these files a bit more, 
                use the <b>stat</b> command in <b>debugfs</b> to pull additional 
                information about the file referenced by the inode:
                <p> 
                <pre>
debugfs /dev/hdc6
&gt; stat &lt;110212&gt;
</pre>
                This will return the link count (probably 0), the creation, access, 
                modify, and deletion times, and a list of all of the blocks that 
                make up the file. This information will determine whether this 
                inode is your candidate. To actually recover the data, use <b>debugfs</b> 
                to dump the data to which the inode is pointing to a new file:
                <p> 
                <pre>
debugfs /dev/hdc6
dump &lt;110212&gt; /tmp/recovered
</pre>
                To recover all three of these files, edit <b>/tmp/lsdel.out</b> 
                down to the desired files as <b>/tmp/lsdel.edited</b> and do something 
                like this:
                <p> 
                <pre>
     awk '{print $1}' /tmp/lsdel.edited &gt; /tmp/inodes
     for i in $(cat /tmp/inodes); do echo &lt;$i&gt; -p /tmp/recovered.$u\i" | debugfs
/dev/hdc6; done
</pre>
                This creates a series of files in <b>/tmp</b>, but there is still 
                the task of discovering their names and where to place them.
                <p> An alternative method (which is more risky but can work when 
                  you don't have another partition to restore to, and this 
                  is rarely the case) involves directly editing the inode itself. 
                  Zero-out the deletion date and create a link to the inode (both 
                  raising the link count to one, and providing an access point 
                  in a directory):
                <p> 
                <pre>
debugfs -w /dev/hdc6
&gt; mi &lt;110212&gt;
</pre>
                This action will walk us through the settings of the inode. It 
                will show the current setting and offer to change it. Press "Return" 
                to accept the current (or default) setting. When you arrive at 
                the "Deleted Time" field, enter "0" and then 
                continue accepting the rest of the settings. Then, change directory 
                to where you want to link the file. Note that the top directory 
                in <b>debugfs</b> will be the mount point, <b>/home</b> in our 
                example:
                <p> 
                <pre>
&gt; cd kliston/
&gt; link &lt;110212&gt; recovered_file
</pre>
                It is important to <b>unmount</b> the altered partition and run 
                <b>fsck</b> upon it. It will discover that there are blocks that 
                are marked as free in the block allocation table, yet linked to 
                an active inode. Let <b>fsck</b> make the required fixes. Now 
                your file will remain safe, otherwise the data blocks will still 
                be marked as available and eventually other files will reuse them 
                and corrupt data.
                <p> It is simply a matter of chance should these techniques work. 
                  In test recoveries, we were able to help successfully recover 
                  log files on December 27th that had been deleted on October 
                  11th. This was from a low-to-mid-use home/lab server, so these 
                  results are probably atypical.
                <p> <b>Known-Text Recovery</b>
                <p> What if the file wasn't <b>rm</b>ed? What if your unfortunate 
                  user typed:
                <p> 
                <pre>
cat /dev/null &gt; important_file
</pre>
                In this case, the inode isn't deleted but all of the data 
                block pointers are zeroed and the data blocks are freed up in 
                the block allocation bitmap. The odds of recovery have just decreased 
                by an order of magnitude, but there are some other options.
                <p> The "known-text recovery method" is more of an art 
                  than a science and is less likely to succeed, but it has the 
                  advantage of working on file systems other than ext2 (such as 
                  Solaris's <b>ufs</b>). This technique involves searching 
                  for a known pattern through an image of the affected file system. 
                  The pattern should be unique to the file that needs restoration. 
                  Crafting the search pattern is the artistic part of the process. 
                  A poorly written pattern can return too many hits, or no hits 
                  at all.
                <p> The example here involves recovering a DNS database file from 
                  the catastrophic <b>cat /dev/null &gt; important_domain.com.db</b>. 
                  Because we're looking for a bind data file, we could search 
                  on a pattern containing "IN SOA", or for a known host 
                  of the missing domain.
                <p> The first active step involved in this technique is the creation 
                  of the recovery copy of the partition. By this time, the partition 
                  should have already been unmounted, or mounted read-only (see 
                  above techniques). Copy the partition to another file system 
                  (which must be large enough to hold the affected partition) 
                  with a command such as:
                <p> 
                <pre>
dd if=/dev/hdc6 of=/opt/hdc6.image
</pre>
                Apply an <b>fgrep</b> filter to locate the pattern (a unique hostname, 
                in this case) in the recovery image:
                <p> 
                <pre>
fgrep "elmenop" /opt/hdc6.image
</pre>
                Here, we're looking for the domain record that defined <b>elmenop.important_domain.com</b>. 
                In the test case, this returned most of the domain record surrounded 
                by nulls. It probably recovered unused space from a temporary 
                file that referenced the file, rather than the file itself. If 
                you need to search or use regular expressions, you can use <b>egrep</b> 
                in lieu of <b>fgrep</b>, which will output all instances of your 
                search pattern. Then, based on either knowledge, or trial and 
                error, use <b>fgrep</b>'s <b>-A</b> and <b>-B</b> flags to 
                pull a slice out of your recovery copy into (hopefully) an editable 
                file that can be cleaned up for use.
                <p> The <b>-A</b> flag denotes how many lines after the match 
                  to print, and <b>-B</b> instructs how many lines before the 
                  match that <b>grep</b> will print. In the example, <b>elmenop</b> 
                  is a hostname that appears in the domain file. Using some guesswork 
                  (based on inspecting other domain data files that were not deleted), 
                  there is a window size of seven lines before, and ten lines 
                  after. There is added buffer room to our estimates to increase 
                  the odds of grabbing all of the usable data in one pass. In 
                  this special case, we lacked physical access to the server, 
                  and we didn't have enough space to create a recovery copy, 
                  so the action was performed on a live pattern (not recommended 
                  unless you're intentionally pushing your luck as we were):
                <p> 
                <pre>
dd if=/dev/hdc6 | fgrep -B 7 -A 10 --text "elmenop" &gt; /tmp/pattern_match.1
</pre>
                This approach created an editable output, capable of rebuilding 
                the original file. This was successful after <b>cat /dev/null 
                &gt; important_domain.com.db</b> was used to "destroy" 
                the file. The recovery attempt was made less than 24 hours later 
                only to find that the data blocks had been overwritten. Once again, 
                we find that time is not your friend when it comes to data recovery.
                <p> <b>Recovery Tools</b>
                <p> Are there programs out there to make this any easier? Absolutely. 
                  But, as sys admins, we know that you need at least three ways 
                  to fix a problem -- none of them will work, but they'll 
                  give you an idea for a fourth way that probably will. Taking 
                  time to work through the abstraction of the operating system 
                  and understand what is happening at a lower level may help you 
                  see the problem differently. Tools tend to hide what is going 
                  on and may blind you to another answer. Realistically, working 
                  through the problem yourself is not always the most expeditious 
                  path. These tools may make administration a little easier for 
                  you:
                <p> 
                <b> The Coroner's Toolkit</b>
                <p> (<b>http://www.fish.com/tct</b>) -- A collection of tools 
                  originally created for computer forensics work. It includes 
                  the data recovery tools <b>unrm</b> and <b>lazarus</b>, both 
                  of which can be used to recover accidentally deleted data.
                <b> The Recover Tool</b>
                <p> (<b>http://recover.sourceforge.net</b>) -- Automates the 
                  direct inode recovery technique described above. It's good 
                  to use if you have a large number of files to recover.
                <p> <b>Conclusion</b>
                <p> In the end, retrieving a file on Linux comes down to luck, 
                  timing, luck, technique, and luck. Most file recovery tools 
                  are fairly inexpensive and easily available and should be a 
                  standard part of any systems administrator's toolbox. So, 
                  the next time a user accidentally deletes that vital file, you 
                  can say, "Relax, it's probably already too late. But 
                  maybe, just maybe, there's something I can do."
                <p> <b>References</b>
                <p> Ferlito, John and Widdowson, Liam. "Tales from the Abyss: 
                  UNIX File Recovery," <i>Sys Admin</i> magazine, November 
                  2001: <b>http://www.sysadminmag.com/documents/s=1441/sam0111b/0111b.htm</b>
                <p> Mandia, Kevin and Prossise, Chris. <i>Incident Response: Investigating 
                  Computer Crime</i>. Osborne/McGraw Hill, New York 2001.
                <p> Wall, Kurt, Watson, Mark, and Whitis, Mark. <i>Linux Programming 
                  Unleashed</i>. Sams, 1999.
                <p> Ext2 file Undeletion: <b>http://www.billjonas.com/papers/undeletion.html</b>
                <p> Crane, Aaron. Linux Ext2fs Undeletion mini-HOWTO: <b>http://www.praeclarus.demon.co.uk/tech/e2-undel/howto.txt</b>
                <p> Card, Remy, Ts'o,Theodore, and Tweedie, Stephen. Design 
                  and Implementation of the Second Extended Filesystem: <b>http://e2fsprogs.sourceforge.net/ext2intro.htm</b>
                <p> Oxman, Gadi. The extended-2 filesystem overview: <b>http://www.nondot.org/sabre/os/files/FileSystems/Ext2fs-overview-0.1.pdf</b>
                <p> <i>Brian Buckeye is the Director of IT for a medium sized 
                  Ohio business. He can be reached at: </i><b>brian@blindpanic.com</b><i>.</i>
                <p><i> Kevin Liston is a consulting security engineer. He can 
                  be reached at: <b>kliston@infornographic.com</b>.</i>
            </ul>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
