<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i03: Web-Enabled Filesystem-Based Databases</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/mar2002.tar"><b class=codeListing>mar2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a2.gif" width="200" height="200" align="right">Web-Enabled 
              Filesystem-Based Databases</h1>
            <p> <i>Leo Liberti</i>
            <p> Constructing a Web-enabled database is advantageous for many reasons. 
              Virtually all techniques for implementing product catalogs, shopping 
              carts, and even portal sites rely on a database containing the information 
              and some form of dynamic Web page construction, be it ASP, PHP, 
              or CGIs. The downside to having a Web-enabled database is that it 
              is difficult to set up and administer. The usual options are:
            <p> 
            <p> 
            <ul>
              <li> Buy a commercial all-in-one product (e.g., Oracle). 
              <li> Contact a specialized computer services firm that will take 
                care of the job. 
              <li> Dowload, configure, install, and administer freely available 
                software packages (e.g., Apache, PHP, MySQL), and make them work 
                together seamlessly.
            </ul>
            <p> The first solution circumvents having to know all the nitty-gritty 
              details of systems administration, but it still requires quite a 
              lot of technical involvement (using Oracle or other commercial software, 
              however "graphical" the interfaces may appear, is usually 
              not an easy task). Furthermore, commercial software costs money. 
              The second solution simplifies administration, but it is usually 
              very expensive. The third solution costs no money at all, apart 
              from the cost of the hardware. However, it is not easy to set up 
              such a system from scratch. Although there are plenty of resources 
              (on the Web and elsewhere) that teach how to do this, admins may 
              not have the time or the inclination to spend hours or days reading 
              technical manuals.
            <p> <b>Considerations</b>
            <p> The worst problem in setting up a Web-enabled database exclusively 
              based on free software is that it requires a broad range of technical 
              skills:
            <p> 
            <p> 
            <ul>
              <li> A systems administrator to set up and administer the operating 
                system (e.g., Linux) and make the Web server, database server, 
                and server-side scripting modules work together. 
              <li> A Webmaster to properly compile, configure, and maintain the 
                Web server (e.g., Apache). 
              <li> A DBA (database administrator) to properly compile, configure, 
                and maintain the database server (e.g., MySQL). 
              <li> A programmer to write server-side scripts (e.g., PHP) or CGI 
                programs. 
              <li> An HTML designer to write the HTML pages.
            </ul>
            <p> Because small firms can rarely afford to employ all of the professionals 
              described above, the pressure will be put on the systems administrator 
              to tackle all of the tasks. Because operating systems (especially 
              UNIX-like ones) represent data in the form of files, systems administrators 
              are usually very skilled at manipulating files and directories. 
              However, when manipulating databases (creation, data input, searches, 
              output data representation), junior administrators may encounter 
              more difficulties. Furthermore, there are cases when a full-fledged 
              database is either overkill or just not the best way to encapsulate 
              the data. This is the case with product catalog files, for example, 
              where each product needs an image and a description.
            <p> With these issues in mind, I propose a simple filesystem-based 
              database model with the necessary PHP scripts to generate the dynamic 
              HTML pages on the fly. One disadvantage to using files and directories 
              instead of a proper database system is the unsuitability for dealing 
              with large quantities of records, especially where each record field 
              is small. The main advantage is that inputting data into the system 
              can be as simple as copying or moving files around.
            <p> <b>Overview and Requirements</b>
            <p> The filesystem-based database I describe here is based on the 
              principle that a directory represents a record and a file represents 
              a field. This is a good data representation for databases where 
              each record contains fields with variable (and large) sizes. Because 
              a product catalog, for example, usually contains product images 
              and product descriptions for each listed product, it fits the requirements 
              well. Thus, our sample implementation will be a product database. 
              For this example, we assume that a company that sells old computer 
              hardware and systems is setting up the database. The database records 
              simply consist of product ID, name, price, image, and description. 
              The software requirements are:
            <p> 
            <p> 1. Linux OS (or any other OS where Apache and PHP can be installed)
            <p> 2. Apache Web server
            <p> 3. PHP Web-scripting engine
            <p> 
            <p> (Installation and configuration of Linux, Apache, and PHP are 
              outside the scope of this article.)
            <p> <b>Filesystem DB Administration</b>
            <p> We'll start by creating the database:
            <p> 
            <pre>
cd /home/www
mkdir products
</pre>
            Note that the parent directory of products must be in the document 
            paths of the Web server. Assume that the Apache document root directory 
            (corresponding to the URL <b>http://127.0.0.1/</b>) has absolute path 
            <b>/home/www</b>, and the products directory has absolute path <b>/home/www/products</b>.
            <p> Next, we must input data relative to a product. Our example company 
              just collected and refurbished an old SparcStation 1 and wants to 
              insert it in its product catalog. A picture has been saved in <b>??/images/sparcstation1.jpg</b>, 
              a thumbnail image has been created in <b>??/images/sparcstation1.gif</b>, 
              and a brief description of the product has been written in the (ASCII) 
              text file <b>??/descriptions/sparcstation1.txt</b>. To find the 
              next available product ID (which is assumed to be a number starting 
              from 0 and incremented each time a product record is added to the 
              database), we save the following lines to a shell script <b>getnewID</b> 
              and make it executable. Typing <b>./getnewID</b> will then return 
              a new product ID:
            <p> 
            <pre>
  #!/bin/sh
  # getnewID
  cd products
  [ "`echo *`" == "*" ] &amp;&amp; echo 0 || echo * | wc -w | sed -e 's/ //g'
</pre>
            We can now insert a new (empty) record by creating a subdirectory 
            named <b>sparcstation1-ID</b> (where ID is the new product ID found 
            by <b>getnewID</b>) under the products directory. This can be automated 
            by running the following shell script with argument <b>sparcstation1</b>:
            <p> 
            <pre>
  #!/bin/sh
  # newrecord
  if [ "$1" == "" ] ; then
    echo "error: syntax is 'newrecord recordname'"
  else
    cd products
    NEWID=`../getnewID`
    DIR="$1-$NEWID"
    mkdir $DIR &gt;/dev/null 2&gt;&amp;1 || ( echo "error: record exists" )
    [ ! -f $RECORDNAME/name ] &amp;&amp; echo $1 &gt; $RECORDNAME/name
    [ ! -f $RECORDNAME/id ] &amp;&amp; echo $NEWID &gt; $RECORDNAME/id
  fi
</pre>
            Because in this example the database had just been created, the product 
            ID referring to the product <b>sparcstation1</b> is 0. Thus, the directory 
            is <b>sparcstation1-0</b>.
            <p> The product image, thumbnail, and description files are inserted 
              simply by copying them:
            <p> 
            <pre>
  cp ~/images/sparcstation1.jpg products/sparcstation1-0/
  cp ~/images/sparcstation1.gif products/sparcstation1-0/
  cp ~/descriptions/sparcstation1.txt products/sparcstation1-0/
</pre>
            The price can be set (e.g., to 100 pounds) manually by typing:
            <p> 
            <pre>
echo 100 &gt; sparcstation1-0/price
</pre>
            Finally (and optionally), we can make an HTML page with additional 
            information for each product by creating an <b>index.html</b> file 
            with appropriate content within each directory. The whole process 
            can be automated by modifying the above script (<b>newrecord</b>) 
            to include the copying of files and price setting.
            <p> <b>Database Display by PHP</b>
            <p> Next, I will present an HTML page containing a very simple PHP 
              script that displays the whole product database. Here is the HTML 
              code for the page design:
            <p> 
            <pre>
 &lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Old Computers and Hardware&lt;/title&gt;
  &lt;/head&gt;

  &lt;body bgcolor="#000040"&gt;

    &lt;table width="100%" border="0" cellspacing="2" cellpadding="2"&gt;

      &lt;tr&gt;
        &lt;th bgcolor="#5000BB" colspan="3" align="left"&gt;
          &lt;font color="#9090FF" size="6"&gt;
            &lt;i&gt;Products&lt;/i&gt;
          &lt;/font&gt;
        &lt;/th&gt;
      &lt;/tr&gt;
</pre>
            Here is the PHP script (commented):
            <p> 
            <p> 1. initialization;
            <p> 
            <pre>2.
3.     &lt;?php
4.       $pdir = "/home/www/products";
5.       $d = dir($pdir);
6.       $i = 0;</pre>
            7. cycle over the directory entries:
            <p> 
            <pre>8.
9.       while($entry = $d-&gt;read()) {</pre>
            10. skip entries . and ..
            <p> 
            <pre>11.
12.         if(strcmp($entry, ".") != 0 &amp;&amp; strcmp($entry, "..") != 0) {</pre>
            13. display three products on each table row:
            <p> 
            <pre>14.
15.            if ($i % 3 == 0) {
16.                echo "&lt;tr&gt;\n";
17.            }
18.            // cell
19.            echo "&lt;td bgcolor=\"white\"&gt;";</pre>
            20. find product name and ID from directory name:
            <p> 
            <pre>21.
22.            $id = strrchr($entry, "-");           
23.            $name = substr(strrev(strchr(strrev($entry), "-")), 0, -1);</pre>
            24. display product name:
            <p> 
            <pre>25.
26.            echo "&lt;h3&gt;";
27.            echo "&lt;a href=\"".$pdir."/".$entry."/\"&gt;".$name."&lt;/a&gt;";
28.            echo "&lt;/h3&gt;";</pre>
            29. display thumbnail image:
            <p> 
            <pre>30.
31.            echo "&lt;a href=\"".$pdir."/".$entry."/".$name.".jpg\"&gt;";
32.            echo "&lt;img src=\"".$pdir."/".$entry."/".$name.".gif\"&gt;";
33.            echo "&lt;/a&gt;&lt;br&gt;\n";</pre>
            34. display description:
            <p> 
            <pre>35.
36.            readfile($pdir."/".$entry."/".$name."-briefdesc.txt");</pre>
            37. end the row every three products:
            <p> 
            <pre>38.
39.            echo "&lt;/td&gt;\n";          
40.            if ($i % 3 == 2) {
41.                echo "&lt;/tr&gt;\n";
42.            }
43.            $i++;
44.         }
45.       }</pre>
            46. close the directory for reading:
            <pre>47.
48.       $d-&gt;close();</pre>
            49. end the PHP script:
            <p> 
            <pre>50.
51.     ?&gt;</pre>
            52. end the HTML page:
            <p> 
            <pre>53.
54.     &lt;/table&gt;
55.     
56.     &lt;address&gt;
57.       &lt;a href="mailto:liberti@iris-tech.net"&gt;Leo Liberti&lt;/a&gt;
58.     &lt;/address&gt;
59.   &lt;/body&gt;
60. &lt;/html&gt;</pre>
            <b>Database Query</b>
            <p> To perform a query on the filesystem-based database, just run 
              the <b>grep</b> command with a few bells and whistles. The following 
              shell script (<b>search.sh</b>) looks for a regular expression in 
              a database directory and returns an HTML-formatted list:
            <p> 
            <pre>
#!/bin/sh
# search.sh: perform a regexp search in a database directory
if [ "$1" == "" -o "$2" == "" ]; then
    echo "error: syntax is $0 search_regexp db_directory"
    exit 2
fi

cd $2

echo "&lt;ul&gt;"
for i in 'find . -exec grep -isl $1 \{\} \;' ; do
    DIRFILE=`echo $i | cut -b 3-`
    DIR=`echo $DIRFILE | cut -d '/' -f 1`
    FILE=`basename $i`
    if [ $FILE == name ] ; then
        URL=$2/$DIR/
        ITEM=`cat $i`
    else
        URL=$2/$DIRFILE
        ITEM=$DIRFILE
    fi
    echo "&lt;li&gt;&lt;a href=\"$URL\"&gt;$ITEM&lt;/a&gt;&lt;/li&gt;"
done
echo "&lt;/ul&gt;"
</pre>
            Next, prepare a simple HTML form (<b>search.html</b>) that asks the 
            user for a search expression. The form passes the input data to the 
            PHP script <b>search.php</b> in the variable <b>$s</b>:
            <p> 
            <pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;catalogue search&lt;/title&gt;
&lt;/head&gt;
  &lt;body bgcolor="#000040"&gt;
    &lt;table width="100%" border="0" cellspacing="2" cellpadding="2"&gt;
      &lt;tr&gt;
        &lt;th bgcolor="#5000BB" align="left"&gt;
          &lt;font color="#9090FF" size="6"&gt;
            &lt;i&gt;Catalogue Search&lt;/i&gt;
          &lt;/font&gt;
        &lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;	
        &lt;td bgcolor="#BBBBBB"&gt;
          &lt;form method="get" action="search.php"&gt;
            Input search term: &lt;input name="s" size=50 maxlength=200 value=""&gt;
            &lt;input type="submit" value="Search"&gt;
          &lt;/form&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;address&gt;
      &lt;a href="mailto:liberti@iris-tech.net"&gt;Leo Liberti&lt;/a&gt;
    &lt;/address&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
            Finally, run the shell script <b>search.sh</b> above from within the 
            PHP script <b>search.php</b>:
            <p> 
            <pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;products catalogue search&lt;/title&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#000040"&gt;
    &lt;table width="100%" border="0" cellspacing="2" cellpadding="2"&gt;
      &lt;tr&gt;
        &lt;th bgcolor="#5000BB" align="left"&gt;
          &lt;font color="#9090FF" size="6"&gt;
            &lt;i&gt;Database Search for term: &lt;? echo $s ?&gt;&lt;/i&gt;
          &lt;/font&gt;
        &lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
         &lt;td bgcolor="white"&gt;
&lt;?php
      /* search the filesystem-based DB for term in $s */
      $pdir = "products";
      $cmd = "./search.sh " . $s . " " . $pdir;
      $ret = 0;
      System($cmd, $ret);
?&gt;
         &lt;/td&gt;
       &lt;/tr&gt;
    &lt;/table&gt;   
    &lt;address&gt;
      &lt;a href="mailto:liberti@iris-tech.net"&gt;Leo Liberti&lt;/a&gt;
    &lt;/address&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
            <b>Conclusion</b>
            <p> I have presented a scheme for constructing a Web-enabled database 
              that circumvents using a true database engine, thus simplifying 
              the administration. The implementation is based on the principle 
              that a record is represented by a directory and a field is represented 
              by a file. This makes the scheme very useful in cases where the 
              fields contain large amounts of variable-sized data, such as images 
              or text descriptions. I have illustrated a simple PHP script, which 
              creates a Web page displaying the contents of the whole database. 
              There are countless improvements to this simple scheme, and all 
              or most of them should be easy to implement for sys admins with 
              a good command of shell scripting and even a modest knowledge of 
              PHP (or other CGI-like) Web scripting. A few other options include:
            <p> 
            <p> 
            <ul>
              <li> Implementing shell scripts to query the database according 
                to some logical test. 
              <li> Implementing a Web-based database search with PHP. 
              <li> Implementing a security scheme based on the UNIX file permissions 
                so that only certain users have access to changing the records. 
                (Users accessing the database through the Web can be accounted 
                for by having Apache running under a special user, such as <b>wwwrun</b>). 
                Visit <b>http://www.ipnos.co.uk/products.php</b> for a working 
                implementation of this scheme.
            </ul>
            <i>Leo Liberti has graduated in Mathematics from Imperial College, 
            London, in 1992. He holds an M.Sc. in Mathematics from Turin University, 
            Italy. He is now a research assistant and part-time systems administrator 
            at Imperial College; he is also the Technical Director at IrisTech, 
            Como, Italy, an Italian firm that supplies customers with Web-based 
            and electronic services.</i>
        </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
