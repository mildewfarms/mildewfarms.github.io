<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i05: Supporting Screened Hosts with BIND 9.x Views</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a5_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2002/may2002.tar"><b class=codeListing>may2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a5.gif" width="200" height="174" align="right">Supporting 
              Screened Hosts with BIND 9.x Views</b></h1>
            <p> <i>Scott DeJong</i>
            <p> Internally, many companies maintain their own DNS tree and keep 
              the local DNS namespace separate from the Internet namespace. This 
              separation is commonly known as split DNS and allows the owner of 
              the namespace to more effectively manage internal addresses and 
              how those addresses are advertised to external entities. Instead 
              of being rigidly bound to an Internet-wide standard for internal 
              addresses, administrators can use names like time.ikep.west and 
              time.ikep.east, while externally using names like www.ikep.com and 
              www.ikep.org. Further more, most companies utilize a proxy for all 
              internally initiated Internet communication. This setup allows authorization, 
              logging, and caching of things like Web traffic.
            <p> One problem with the split DNS model appears when the local resolver 
              (the client-side piece that sends the query to a DNS server) queries 
              for addresses. If a host asks an internal DNS server for information 
              that is not defined internally, the DNS server will respond positively 
              with "Non-existent domain" and the host will not continue 
              to look to DNS for resolution of that query. If you attempt to work 
              around this issue by using standard forwarding at the DNS server 
              and sending all queries for hosts in unknown domains to another 
              DNS server, you can slow overall performance of DNS by attempting 
              to externally resolve all mistyped addresses. Additionally, you 
              lose the control of deciding who can resolve external information 
              and who cannot and, if users can resolve an address internally but 
              cannot ping or telnet to it, they are generally much more confused 
              than if they could never resolve it in the first place.
            <p> <b>Views</b>
            <p> A relatively new feature of BIND allows you to create Access Control 
              Lists (ACL) consisting of IP addresses and subnet masks, and to 
              use these ACLs to determine which hosts can acquire what data from 
              DNS. BIND 9.x performs this determination by associating an ACL 
              with a view. In its simplest form, a view allows you to let hosts 
              with internal IP addresses (e.g., 192.168.0.0/16) resolve addresses 
              that you designate as internal and let everyone else resolve only 
              addresses you designate as external. The views feature provides 
              the following benefits:
            <p> 
            <p> 1. One DNS server handles resolution for both your Internet and 
              intranet clients while maintaining a split DNS model.
            <p> 2. The internal network information does not get published externally. 
              The view blocks external clients from accessing internal addresses.
            <p> 3. The internal network is forced to perform external resolution 
              through the proxy. The view blocks external addresses from direct 
              access. A sample of this type of configuration could look like this:
            <p> 
            <pre>
acl internals { 10.10.10.0/24; 192.168.15.0/24; };
acl externals { any; };

view "internal" {
   match-clients { internals; };
   recursion yes;
   zone "ikep.com" {
      type master;
      file "internal/db.ikep.com";
   };
};

view "external" {
   match-clients { externals; };
   recursion no;
   zone "ikep.com" {
      type master;
      file " external/db.ikep.com";
   };
};
</pre>
            In this example, the ACL statements define what is considered internal 
            and what is considered external. The match-clients statement inside 
            the view stanza then determines which view pertains to which ACL. 
            Inside each view statement, the same zone is defined with each, taking 
            the data from a different source file. In the sample, you also may 
            have noticed the configuration of the recursion statement. Hosts that 
            match the internal ACL are allowed to use the DNS server recursively, 
            but external hosts are not. Basically, the two views are like two 
            different DNS servers running under the same process and listening 
            on the same port on the same box.
            <p> <b>Real-World Configuration</b>
            <p> If requirements are simple, the configuration in the preceding 
              section works beautifully. Sometimes, however, real-world requirements 
              can be more complex. Consider the following types of hosts.
            <p> 
            <p> Trusted hosts:
            <p> 
            <p> 
            <ul>
              <li> On the internal network 
              <li> Separated from the Internet by a firewall 
              <li> Require a proxy for communication with the Internet 
              <li> Should not be able to resolve Internet addresses without a 
                proxy 
              <li> Should be able to resolve internal addresses
            </ul>
            <p> Screened hosts:
            <p> 
            <p> 
            <ul>
              <li> On a screened internal subnet 
              <li> Separated from the internal network by a firewall 
              <li> Separated from the Internet by a firewall 
              <li> Do not require a proxy for communication with the Internet 
              <li> Should be able to resolve Internet addresses without a proxy 
              <li> Should be able to resolve internal addresses
            </ul>
            <p> External hosts:
            <p> 
            <p> 
            <ul>
              <li> On an external network 
              <li> Should be able to resolve Internet addresses 
              <li> Should not be able to resolve internal addresses
            </ul>
            <p> The screened hosts make this configuration more difficult. As 
              stated before, in a simple split-DNS architecture, the screened 
              hosts would be able to resolve either internal or external addresses, 
              but not both. Hosts files, multiple zone files for each individual 
              type of host, or non-split DNS could be used to take care of naming 
              service requirements for all of the above host types, however, each 
              of these solutions requires a lot of additional administrative overhead.
            <p> <b>Smart Forwarding</b>
            <p> To solve this problem, I have designed a multi-tier DNS structure 
              consisting of multiple single purpose BIND version 9.x servers that, 
              through the use of views, allow for decision-based forwarding of 
              queries.
            <p> The server types are defined as follows.
            <p> 
            <p> External Authoritative -- A secondary DNS server that:
            <p> 
            <p> 
            <ul>
              <li> Holds authoritative information for external zones 
              <li> Does not maintain a cache 
              <li> Is not recursive 
              <li> Only allows queries from external hosts and loopback
            </ul>
            <p> Screened Caching -- A caching only DNS server that:
            <p> 
            <p> 
            <ul>
              <li> Does not hold authoritative information 
              <li> Does maintain a cache 
              <li> Is recursive 
              <li> Only allows queries from screened hosts, trusted caching DNS, 
                and loopback
            </ul>
            <p> Trusted Caching Decision -- A caching and forwarding DNS server 
              with multiple views that:
            <p> 
            <p> 
            <ul>
              <li> Does not hold authoritative information 
              <li> Does maintain a cache 
              <li> Is recursive 
              <li> Forwards queries to screened caching and trusted authoritative 
                DNS 
              <li> Only allows queries from screened hosts, internal hosts, and 
                loopback
            </ul>
            <p> Trusted Authoritative -- A secondary DNS server that:
            <p> 
            <p> 
            <ul>
              <li> Holds authoritative information for internal zones 
              <li> Does not maintain a cache 
              <li> Is not recursive 
              <li> Holds a copy of the internal root zone 
              <li> Only allows queries from internal hosts and loopback
            </ul>
            <p> Management Server -- A stealth master DNS server with multiple 
              views that:
            <p> 
            <p> 
            <ul>
              <li> Controls the named process on all other servers through rndc 
              <li> Holds all master zones for both internal and external 
              <li> Is not listed or advertised as a name server 
              <li> Does not maintain a cache 
              <li> Is not recursive 
              <li> Only allows queries from valid name servers and loopback
            </ul>
            <p> This structure allows selected hosts to resolve addresses contained 
              in the Internet DNS root along with a good portion of your internal 
              network and looks something like that shown in Figure 1. The authoritative 
              servers are configured just like normal secondaries, and the screened 
              caching-only servers are configured just like normal external caching 
              DNS servers. The management server and the trusted caching decision 
              servers are where views are used.
            <p> The management server just has internal and external views configured. 
              Through the use of the defined ACL, which restrict down to the host 
              level, only known name servers are allowed to query and transfer 
              zones. Because of this, it should not be listed as a name server 
              in any of your zone files. Hiding the master server further secures 
              the zone files from the potential for malicious modification.
            <p> The sample named.conf file for the trusted caching decision servers 
              also has only internal and external views defined though more could 
              be added. The ACL used, however, restricts to the network level 
              instead of the host level. Only hosts on known networks are allowed 
              to query. If a host is on a network that is considered internal, 
              the server acts like an internal caching-only name server. If a 
              client that is considered external is posing the query, the server 
              acts like a forwarder. It then forwards all queries for known domains 
              internally and all queries for unknown domains to the external caching 
              layer. The type of host is determined by the ACL and the appropriate 
              view of the DNS server is presented. The forwarder for the query 
              is determined by the zone statement in the view.
            <p> The sample queries are as follows.
            <p> 
            <p> Query from a screened host for an external host (see Figure 2):
            <p> 
            <p> 1. <b>dmzhost</b> requests the address of <b>www.isc.org</b>.
            <p> 2. <b>tcaching1</b> makes the decision to forward the request 
              to <b>scaching1</b>.
            <p> 3. <b>scaching1</b> asks the Internet for the address.
            <p> 4. The Internet responds with 204.152.184.101.
            <p> 5. <b>scaching1</b> caches the response and sends it to <b>tcaching1</b>.
            <p> 6. <b>tcaching1</b> caches the response and sends it to <b>dmzhost</b>. 
              Both <b>scaching1</b> and <b>tcaching1</b> cache the response until 
              the time to live for the record has been reached.
            <p> 
            <p> Query from a screened host for a trusted host (see Figure 3):
            <p> 
            <p> 1. <b>dmzhost</b> requests the address of <b>thost.ikep.west</b>.
            <p> 2. <b>tcaching1</b> makes the decision to forward the request 
              to <b>tns1</b>.
            <p> 3. <b>tns1</b> responds authoritatively with 192.168.10.10.
            <p> 4. <b>tcaching1</b> caches the response and sends it to <b>dmzhost</b>. 
              Subsequent queries to <b>tcaching1</b> for <b>thost.ikep.west</b> 
              will be answered from cache until the time to live associated with 
              the record is reached.
            <p> 
            <p> Query from a trusted host for an external host (see Figure 4):
            <p> 
            <p> 1. <b>thost</b> requests the address of www.isc.org.
            <p> 2. <b>tcaching1</b> makes the decision to forward the request 
              to <b>tns1</b>.
            <p> 3. <b>tns1</b> responds authoritatively with non-existent host/domain.
            <p> 4. <b>tcaching1</b> caches the response and sends it to <b>thost</b>. 
              This example assumes that the tool used in the attempt to resolve 
              <b>www.isc.org</b> was not configured to use a proxy. If a user 
              on <b>thost</b> had used something like an appropriately configured 
              browser, the request would have been forwarded to the proxy for 
              resolution, and the site (assuming it existed and was functional) 
              would have been viewable without issue.
            <p> 
            <p> Query from a trusted host for another trusted host (see Figure 
              5):
            <p> 
            <p> 1. <b>thost</b> requests the address of <b>tserver.ikep.west</b>.
            <p> 2. <b>tcaching1</b> makes the decision to forward the request 
              to <b>tns1</b>.
            <p> 3. <b>tns1</b> responds authoritatively with 192.168.1.30 to <b>tcaching1</b>.
            <p> 4. <b>tcaching1</b> caches the response and sends it to <b>thost</b>. 
              Subsequent queries to <b>tcaching1</b> for <b>tserver.ikep.west</b> 
              will be answered from cache until the "time to live" associated 
              with the record is reached.
            <p> <b>Security</b>
            <p> To add security to this design, BIND was compiled to install into 
              its own directory (not <b>/usr/local</b>). <b>Named</b> is run as 
              a user that is not root and is "change rooted" to its 
              own directory. Further, there is a complete separation of authoritative 
              and caching servers, and the primary master is not accessible from 
              an external source. Information on how to do this (along with other 
              security features, such as <b>dnssec</b> and signed zones) can be 
              found in the BIND documentation.
            <p> <b>Management</b>
            <p> This setup is not particularly difficult to manage. With the use 
              of any file transfer program (ssh/rsync), you can have master copies 
              of everything located on the management workstation. All changes 
              take place there. Using shared keys and rndc, which comes with BIND 
              9.x, you can invoke a reload on any of the servers in this design 
              from the management workstation. You can also create a script with 
              a configuration file that allows you to push an updated named.conf 
              to the appropriate servers when you change it on the management 
              server. To add configuration management, I've placed all of 
              the zone files and named.conf files in CVS.
            <p> <b>Summary</b>
            <p> Views is a powerful feature of the new version of BIND, and this 
              is just one way that you can utilize it to help solve complex DNS 
              problems. Furthermore, BIND is very lightweight, which means that 
              the entire structure described here can be implemented in a secure, 
              redundant, highly available, and load-balanced manner using ten 
              very small workstations. To get the benefits without redundancy, 
              you could implement this setup with as little as two small workstations 
              after modifications to the sample config files (see Listing 1).
            <p> <i>Scott is an independent consultant and an Adjunct Faculty Member 
              at the University of Phoenix. His motto is "Always be smarter 
              than the tools you work with." He is well versed in various 
              development languages, though recently his primary concentration 
              has been systems integration, server consolidation, highly available 
              systems, and enterprise storage. He has worked extensively with 
              most UNIX derivatives along with Microsoft Windows NT and 2000. 
              Scott can be contacted at: <b>code8@primenet.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
