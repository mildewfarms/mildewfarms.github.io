<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i05: Listing 3 emctl.pl </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a4.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink">Listing 3</span></td>
		<td><span class="navbarLink"><a href="a4_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a4_l5.htm">Listing 5</a></span></td>
		<td><a href="../../../../source/SA/2002/may2002.tar"><b class=codeListing>may2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 3 </b><i>emctl.pl</i> </h1>
            <pre>
001: #!/usr/local/bin/perl -w
002: #
003: use strict;
004: use Mail::Mailer;
005: use Parse::RecDescent;
006: #
007: my $pf = "/myconfigs/emctl.dat";
008: my $gf = "/myconfigs/grammar.dat";
009: my $uf = "/myconfigs/users.dat";
010: my %validcmd;
011: my %validuser;
012: my $me = "me\@acompany.com";
013: my $from = "noone"; 
014: my @rslts;
015: my $rval;
016: my $indicator = 0;
017: #
018: process_config_file($pf,\%validcmd);
019: process_config_file($uf,\%validuser);
020: #
021: open GF, "&lt; $gf" or die "Cannot open $gf\n";
022: my @stuff = (&lt;GF&gt;);
023: close GF;
024: my $grammar = qq { @stuff };
025: #
026: my $parse = new Parse::RecDescent ($grammar);
027: #
028: while (&lt;&gt;) {
029:     next if /^\s*$/;
030:     chomp;
031:     my @a = split;
032:     if ($a[0] =~ /^[F|f]rom\:/) {
033:         s/[\&lt;|\&gt;|\"|\:]//g;
034:         my @line = split;
035:         foreach my $item (@line) {
036:             if ($item =~ /\@/) {
037:                 $from = $item;
038:                 if (!(defined $validuser{$from})) {
039:                     my @msg = "Attempt to run command by $from";
040:                     mr_mailman($me,"Unauthorized email command attempt!",\@msg);
041:                     exit;
042:                 } 
043:             }
044:         }
045:     }
046:     else {
047:         if ($a[0] =~ /^Command\:/) {
048:             $indicator++;
049:             shift(@a);
050:             my $cmd = join " ",@a;
051:             $rval = $parse-&gt;Command($cmd);
052:             if ($rval) {
053:                 my @parsertn = split / /,$rval;
054:                 $parsertn[0] = $validcmd{$parsertn[0]};
055:                 my $cstring = join " ",@parsertn;
056:                 my @rslts = do_cmd($cstring);
057:                 my $sbj = "Results of your request to execute $cmd";
058:                 mr_mailman($from,$sbj,\@rslts);
059:             }
060:             else {                # $rval contains a 0 from the parser
061:                 my $sbj = "Problems executing your command!";
062:                 my @rslts = "A syntax error was encountered whilst processing the following command:\n\n$_\n";
063:                 mr_mailman($from,$sbj,\@rslts);
064:             }
065:         }
066:     }
067: }
068: if (!($indicator)) {
069:     my $sbj = "Problems executing your command!";
070:     my @rslts = "I found no commands to execute";
071:     mr_mailman($from,$sbj,\@rslts);
072: }
073: #
074: sub do_cmd {
075:     my $cmd = qq($_[0]);
076:     my @results;
077:     open CMD, "$cmd |";
078:     while (&lt;CMD&gt;) { push @results,$_; }
079:     close CMD;
080:     return @results;
081: }
082: #
083: sub mr_mailman {
084:     my ($to, $subj, $msg) = @_;
085:     my $ecmd = qq(\|mailx -s "$subj" $to);
086:     open (CMD2, $ecmd) or die "Error opening CMD2 for &gt;$ecmd&lt; $!\n";
087:     print CMD2 @$msg;
088:     close CMD2;
089: }
090: #
091: sub process_config_file {
092:     my ($fyle,$hashpointer) = @_;
093:     open CF, "&lt; $fyle" or die "Cannot open $fyle\n";
094:     while (&lt;CF&gt;) {
095:         next if /^\s+$/;
096:         next if /^\s*#/;
097:         chomp;
098:         my @configline = split /,/;
099:         if (defined $configline[1]) { $$hashpointer{$configline[0]} = $configline[1]; }
100:         else { $$hashpointer{$_}++; }
101:     }
102:     close CF;
103: }</pre>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
