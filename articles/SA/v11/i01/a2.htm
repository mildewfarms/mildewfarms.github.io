<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i01: Systems Administration with Scsh</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2002/jan2002.tar"><b class=codeListing>jan2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a2.gif" width="200" height="174" align="right">Systems 
              Administration with Scsh</h1>
            <p> <i>Evan Sarmiento</i>
            <p> Shell scripting languages provide systems administrators with 
              powerful tools to automate mundane tasks, saving hours of work. 
              Most of these languages, however, do not provide a well-designed 
              object system, nor are they optimized for recursion and abstraction. 
              Scheme, a dialect of LISP, incorporates all the features of a good 
              programming language as listed above. Because Scheme cannot interact 
              with UNIX primitives alone, there is a Scheme software package called 
              scsh (the scheme shell). Scsh provides a set of macros for the Scheme 
              programming language, adding the ability to call on all standard 
              UNIX system calls and even adds regular expressions.
            <p> In this article, I will briefly introduce and describe the important 
              features of the Scheme language and present some of my own scripts 
              written in scsh, which exhibit many of the listed features. This 
              article presumes that you know how to program using Scheme. If you 
              are new to Scheme, read the Notes section at the end of this article, 
              which provides numerous learning resources.
            <p> You can download scsh from:
            <p> 
            <pre>
http://www.swiss.ai.mit.edu/ftpdir/scsh/
</pre>
            There are easy-to-follow installation instructions on the site. For 
            FreeBSD users, scsh is present in the ports collection, <b>/usr/ports/shells/scsh</b>.
            <p> Scheme comes in many variants, such as MIT Scheme, Scheme 48, 
              MzScheme, and others. Scsh is based on Scheme 48. However, I find 
              MIT Scheme to be the most complete. You can download MIT Scheme 
              from:
            <p> 
            <pre>
http://www.swiss.ai.mit.edu/projects/scheme/
</pre>
            Scheme tutorials and the book <i>Structure and Interpretation of Programs</i> 
            (Second Edition by Harold Abelson and Gerald Jay Sussman, with Julie 
            Sussman, The MIT Press) are provided online at:
            <p> 
            <pre>
http://sicp.ai.mit.edu
</pre>
            You can also find out more about each variant by looking at:
            <p> 
            <pre>
http://www.Schemers.org
</pre>
            <b>Running Scsh</b>
            <p> When you execute scsh, you're running in interactive mode, 
              which is similar to the interactive mode for Python. You can type 
              in individual commands, and the interpreter will evaluate them line-by-line. 
              To use scsh for batch processing, append this header to the top 
              of your scsh script files:
            <p> 
            <pre>
#! /usr/local/bin/scsh -s
!#
</pre>
            <b>Benefits of Scsh</b>
            <p> Programming in scsh provides numerous benefits. You will have 
              access to both a scripting language and a systems-programming language 
              when using scsh, because it is just a set of macros for Scheme. 
              scsh uses ''process notation'', which allows 
              easy access to the command line. Scsh also provides low-level access 
              to the operating system. The current release of scsh provides full 
              access to Posix, which includes: fork, exec, wait, sockets, write, 
              open, close, seek, tell, chmod, chmod, chgrp, chown, locking, and 
              more. Another benefit of using scsh is that it is very portable. 
              It is based on Scheme and, like Java, Scheme code is executed through 
              a byte-code interpreter. There are Scheme 48 virtual machines for 
              numerous operating systems, including Windows, which allow you to 
              run scsh in almost any environment.
            <p> <b>The Scheme Philosophy</b>
            <p> Before discussing the specifics of scsh, it is useful to understand 
              the peculiar syntax and fundamental data structures of Scheme. Scheme 
              was derived from Lisp, improving upon many of the Lisp features. 
              The Lisp programming language was mainly used in two fields: math 
              and artificial intelligence. Scheme is a dialect of Lisp that stresses 
              elegance and simplicity. It is a stripped-down version of Common 
              Lisp. In fact, the language specification is about 50 pages, while 
              the Common Lisp's specification is about 1,300 pages. Scheme 
              is often used in computer science courses to teach abstraction and 
              programming concepts. Even though it is used primarily as a teaching 
              language, Scheme has numerous applications -- the GIMP allows 
              users to write GIMP-loadable modules in Guile, a GNU Scheme variant, 
              and Scwm, a Window manager, allows users to write their own extensions 
              in Scheme.
            <p> The elegance and readability of Scheme is what prompted Olin Shivers 
              to write scsh, a set of macros that provide access to low-level 
              operating system functions and usual shell commands. Sh provides 
              a terse, inflexible, and hard to read syntax, which does not provide 
              access to lower level functions like sockets or signals, unlike 
              scsh, which encompasses both a shell scripting language and a systems 
              programming language.
            <p> <b>Prefix Notation</b>
            <p> Scheme may be hard to learn at first, but learning scheme will 
              certainly increase your programming skills. What separates Scheme 
              from other languages is its use of Prefix Notation. In Scheme, operations 
              are placed before operands. For example, you would normally write 
              this equation as such:
            <p> 
            <pre>
Regular:               5 / 3 * 10
Prefix Notation:      (* (/ 5 3) 10)
</pre>
            Even simple arithmetic is changed. For example, <b>1 + 1 + 1 + 1</b> 
            becomes:
            <p> 
            <pre>
(+ 1 1 1 1)
</pre>
            The concept of Prefix Notation is important to understand in order 
            to use scsh. All operations in Scheme are done through Prefix Notation 
            syntax, which may seem cumbersome at first, but simplifies coding.
            <p> <b>Lists</b>
            <p> Lists are an integral part of the Scheme programming languages. 
              A list is just a data structure. The most obvious application of 
              a List would be in a loop, where your program needs to take an element 
              from the front of the list and perform some evaluations on it. When 
              I program in scsh, I commonly use lists to parse output from programs. 
              I can also specify that the program output be translated into a 
              list of strings. Another benefit of Lists is that you can have functions 
              return more than one value using a list. This is how the (pipe) 
              system call works -- it returns a list consisting of two new 
              ports.
            <p> Lists are manipulated through the functions: list, cons, car, 
              cdr, and append. Scheme itself is based on the idea of a list. When 
              the Scheme interpreter tries to execute the command <b>(+ 1 1 1 
              1)</b>, the interpreter thinks of it as a list, where the first 
              element of the list is the operator. You create a list by using 
              the list function.
            <p> The following examples are performed in interactive mode:
            <p> 
            <pre>
(define q (list 1 2 3 4 5))
</pre>
            This creates a list assigned to the name q. You do not have to assign 
            lists to names; you can pass them anonymously to functions.
            <p> You can retrieve the item off the front of the list by using <b>car</b>:
            <p> 
            <pre>
(car q)

1
</pre>
            You can remove one item from the list by using <b>cdr</b>. Using <b>cdr</b> 
            on a list creates a temporary copy of the list in memory with the 
            first item removed. The original list is still intact:
            <p> 
            <pre>
(cdr q)
'(2 3 4 5)
</pre>
            <b>cons</b> adds an item to the beginning of a list, while <b>append</b> 
            adds a list to the end of a list:
            <p> 
            <pre>
(cons 5 q)
'(5 1 2 3 4 5)
(append q (list 5))
'(1 2 3 4 5 5)
</pre>
            <b>What is Scsh?</b>
            <p> As stated before, scsh is a set of Scheme macros that allow you 
              to interact with the operating system, even providing access to 
              system calls. Scsh is different from other shell scripting languages 
              because it works with Scheme and uses a syntax that many people 
              are unfamiliar with. However, Scheme does provide recursion, abstraction, 
              object orientation, and readability features, which make it perfect 
              to use for systems programming or shell scripting.
            <p> Keep in mind that scsh is not a "command language"; 
              it is a systems programming language, meaning that it encompasses 
              both a way to interact with the shell, and a way to interact with 
              low-level functions of the operating system. A programming language 
              is just a notation for expressing computation. Scsh has its own 
              way of expressing commands, called S-expressions, which will be 
              described in the next section.
            <p> <b>Ports</b>
            <p> A port, which appears throughout all scsh documentation, is like 
              a file descriptor, from which you can read and write data. In scsh, 
              there are certain functions that either require ports as arguments, 
              or return ports. You will probably be using functions that return 
              ports.
            <p> When I'm programming in scsh, I usually need to parse output 
              from programs or text-files. There is a specific function in scsh 
              that allows you to run a program and have all output returned on 
              a certain port. You can then read all the data from the port and 
              turn it into any sort of data structure. I usually turn output into 
              a list.
            <p> Ports are also used when opening files. When a user calls the 
              (open-file) system call, a port is returned and you can perform 
              subsequent operations, such as reading and writing, on that port.
            <p> <b>Extended Process Notation</b>
            <p> Interaction with the operating system is done through S-expressions. 
              S-expressions themselves are just data structures for representing 
              complex data. They can be either byte strings or lists of S-expressions. 
              Usually, while coding in scsh, you will be dealing with lists of 
              S-expressions. An S-expression could look like this:
            <p> 
            <pre>
(belong (all (your "base")) (to "us"))
</pre>
            This S-expression has no meaning and is only an example of the syntax. 
            When analyzing this S-expression, you can see that <b>belong</b> is 
            a function that acts on the return value of <b>(all (your "base"))</b> 
            and <b>(to "us"))</b>.
            <p> Scsh has a notation, taking the form of S-expressions, for controlling 
              UNIX processes, which are called process forms. An extended process 
              form is a specification of a UNIX process to run, in a particular 
              environment:
            <p> 
            <pre>
(pf redir_1 redir_n)
</pre>
            where <b>pf</b> is the process form and <b>redir_i</b> are arguments. 
            Listed below is a set of process forms that do the normal set of commands, 
            such as creating a pipe, running a process in the background, redirecting 
            output into the calling process or out to a file:
            <p> 
            <p> <b>|</b> -- fork/pipe.
            <p> <b>&amp;</b> -- Run a process in background.
            <p> <b>begin</b> -- Runs code in a <b>fork</b>.
            <p> <b>&lt;</b> -- Open a file for read.
            <p> <b>&gt;</b> -- Open a file for crease/truncate.
            <p> 
            <p> The list below provides scsh functions and examples that are commonly 
              used in shell scripting. Note that "<b>&gt;</b>" means 
              that we are working at the interactive scsh prompt:
            <p> 
            <p> 
              <li> <b>(run . EPF)</b> -- Runs a process; returns an exit code.<p>
                For example:
            <pre>
(run (echo Hello))
Hello
</pre>
              <li> <b>(run/sexps . EPF)</b> -- Run a process and return its 
                output as a list of strings. This is very useful as shown later. 
                This example executes <b>ps | tail -1</b>, transforming the output 
                to a list for further parsing:<p>
            <pre>
&gt; (define output (run/sexps (| (ps) (tail -1))))
&gt; output
'(61661 v0 S 0:00.45 aterm -tr -tn xterm-color -bg black -fg white -sh 30 -font nexus)
&gt; (car output)
61661
</pre>
             <li> <b>(argv n) -&gt; string</b> -- Returns the Nth argument 
                given to the program. <p>
              <li> <b>(begin . EPF)</b> -- Runs code within a fork. For example:<p>
            <pre>
(begin (run (ls)))
</pre>
            This forks a new process to execute <b>ls</b>.
            <p> 
            <p> 
              <li> <b>(with-cwd directory . EPF)</b> -- Changes the current 
                directory to <b>directory</b> and executes the other arguments. 
                For example:
            <p>
            <pre>
(with-cwd "/usr/src"
(run (ls)))
</pre>
              <li> <b>(&amp; . EPF)</b> -- Runs a process in the background. 
                For example, compare these two commands. The first is a command 
                written in Sh, the second is written in scsh. It is a simple operation 
                and both commands get the last ten lines of <b>/var/log/smb.log</b> 
                and <b>grep</b> for the string <b>File</b>.
            <p>
            <pre>
Sh: tail -10 /var/log/log.smb | grep File
Scsh: (run (| (tail -10 /var/log/log.smb) (grep File)))
</pre>
            <b>System Calls</b>
            <p> As noted before, scsh provides access to low-level system calls, 
              like dup, sockets, open, close, write, read, etc. All of these operations 
              are done through the ports. Below is a table of system calls supported 
              in scsh. I took a sampling from each section (not all of the system 
              calls are listed), and you can find the rest in the documentation.
            <p> <b>UNIX I/O</b>
            <p> 
              <li> <b>(dup fd/port) -&gt; fd/port</b> -- This function duplicates 
                a file descriptor or a port, returning the newly created descriptor 
                or port:
            <p>
            <pre>
&gt; (define port (open-file "/etc/inetd.conf" open/read))
&gt; (define port-dup (dup port))
</pre>
              <li> <b>(open-file fname flags [perms]) -&gt; port</b> -- This 
                function opens the filename referenced by fname and returns a 
                port. Perms is an optional argument, allowing you to set permissions 
                on the file you are opening.
            <p>
            The are numerous flags you can use, which are listed in the scsh reference 
            or in cheat.txt, however, the most commonly used flags are:
            <p> 
            <pre>
open/read
open/write
open/append
&gt; (define port (open-file "/etc/inetd.conf" open/read))

(open-input-file fname [flags]) -&gt; port
(open-output-file fname [flag perms]) -&gt; port
(open-fdes fname flags [perms]) -&gt; integer
</pre>
            This returns a true file descriptor; ports are more useful and do 
            all the same things.
            <p> 
              <li> <b>(set-fdes-flags fd/port flags)</b> -- Allows you to 
                set flags on a file descriptor or a port. You can find the flags 
                in the reference manual:
            <p>
            <pre>
&gt; (define port (open-file "/etc/inetd.conf" open/read))
&gt; (set-fdes-flags port open/async)
</pre>
              <li> <b>open/async</b> -- Enables Asynchronous writing on the 
                port. <p>
              <li> <b>(pipe) -&gt; [rport wport]</b> -- This returns two unused 
                ports, <b>rport</b> and a <b>wport</b>. All output on <b>rport</b> 
                is sent to <b>wport</b>.<p> 
              <li> <b>(read-line [fd/port retain-newline?]) -&gt; string or eof-object</b> 
                -- When a file descriptor or port is specified, it returns 
                the first line waiting on the port:
            <p>
            <pre>
&gt; (define port (open-file "/etc/inetd.conf" open/read))
&gt; (read-line port)
"# $FreeBSD: src/etc/inetd.conf,v 1.44.2.1 2000/03/25 22:09:59 jhb Exp $"
&gt; (read-line port)
"#"
&gt; (read-line port)
"# Internet server configuration database"
</pre>
              <li> <b>(read-string nbytes [fd/port]) -&gt; string or #f</b> -- 
                Returns a string from a specified port:
            <p>
            <pre>
&gt; (read-string 30 port)
"# $FreeBSD: src/etc/inetd.conf"
</pre>
              <li> <b>(write-string string [fd/port start end])</b> -- Writes 
                a string to a specified port:
            <p>
            <pre>
&gt; (define port (open-file "/home/evms/.zshrc" open/append))
&gt; (write-string "echo Boo" port)
</pre>
            <b>Locking</b>
            <p> 
              <li> <b>(make-lock-region exclusive? start len [whence]) -&gt; lock-region</b> 
                -- Returns a lock-region record. Records are similar to a 
                <b>struct</b> in C:
            <p>
            <pre>
&gt; (define q (make-lock-region 0 30 50))
</pre>
              <li> <b>(lock-region fdes lock)</b> -- Locks a file descriptor 
                according to the lock region created with make-lock-region.
            <p>
            <b>File System</b>
            <p> 
              <li> <b>(create-directory fname [perms override?])</b> -- Creates 
                a directory <b>fname</b>. <p>
              <li> <b>(delete-directory fname)</b> -- Deletes a directory 
                <b>fname</b>. <p>
              <li> <b>(delete-file fname)</b> -- Deletes a file <b>fname</b>.
            <p>
            <b>Processes</b>
            <p> 
              <li> <b>(exec prog arg1 ...)</b> -- Executes <b>prog</b> with 
                <b>args</b>:
            <p>
            <pre>
&gt; (exec "/bin/ls" "-al")
</pre>
              <li> <b>(fork) -&gt; proc</b> -- Forks a new process and returns 
                a process object.
            <p>
            <b>Process State</b>
            <p> 
              <li> <b>(umask) -&gt; fixnum</b> -- Returns the current <b>umask</b>:
            <p>
            <pre>
&gt; (umask)
18
</pre>
              <li> <b>(set-uid uid)</b> -- Sets the processes UID:
            <p>
            <pre>
&gt; (set-uid 0)
</pre>
            <b>Signals</b>
            <p> 
              <li> <b>(signal-process proc/pid sig)</b> -- Signals a process 
                whose pid is <b>pid</b> with a signal specified by <b>sig</b>. 
                You can use almost any signal, but the most common ones are:
            <p>
            <pre>
signal/kill
signal/stop
signal/alrm
signal/hup

(signal-process (cadr (run/sexps (| (ps aux) (grep inetd) (tail -1)))) signal/hup)
</pre>
            The <b>(cadr ...)</b> evaluates to the <b>pid</b> of the <b>inetd</b> 
            process. As you recall, <b>run/sexps</b> turns the output into a list 
            and <b>cadr</b> takes the second element from the list and returns 
            it.
            <p> 
            <p> These system calls are the ones I use most. There are socket system 
              calls in scsh, but they are complicated and won't be explained 
              in this article. The scsh documentation, however, has great examples 
              on sockets.
            <p> <b>OO in Scheme</b>
            <p> Object oriented programming is becoming a dominant trend for systems 
              programming, and it can also be used for administration tasks. For 
              example, you could create a computer object, which has the locally 
              defined functions <b>ping</b>, <b>restore</b>, <b>reboot</b>, and 
              local variables that indicate the IP address and hostname. When 
              used in a network environment, this script would be modular and 
              powerful. I would use Scheme to write this because it has the capacity 
              for OO.
            <p> OO in Scheme is mainly done through the use of state variables 
              and lambda. All variables in Scheme maintain state. Here, I will 
              use the example of a piggy bank object. You can deposit, withdraw, 
              and display the amount of change within the piggy bank. Of course, 
              you can modify this code to do something that is actually useful:
            <p> 
            <pre>
(define (create-piggybank)
(let ((balance 0))
(define (deposit amount)
(set! balance (+ balance amount)))
(define (withdraw amount)
(if (&lt;= (- balance amount) 0)
(display "Error: you have no balance!")
(set! balance (- balance amount))))
(define (print_balance)
(display balance))
(define (dispatch operation)
(if (eq? operation 'deposit)
deposit
(if (eq? operation 'withdraw)
withdraw
(if (eq? operation 'print_balance)
print_balance))))
dispatch))
</pre>
            See Figure 1.
            <p> <b>System Automation</b>
            <p> Scsh is especially useful for system automation. Below are some 
              of the shell scripts I've created using scsh, comparing them 
              to a script written in sh that performs the same function.
            <p> A jail is similar to chroot, but with more restrictions. Jail 
              is implemented within FreeBSD. This script initializes all of the 
              jails within <b>/jail</b>. It is used on bootup. Within the <b>/jail</b> 
              directory, note that the jails are named by their IP addresses rather 
              than their hostnames.
            <p> 
            <p> Bourne Shell:
            <p> 
            <pre>
#! /bin/sh

JAIL="/usr/sbin/jail"

for dir in $(ls /export); do
echo $dir

$JAIL /export/$dir $dir $dir /bin/sh /etc/rc
done
</pre>
            Scsh:
            <p> 
            <pre>
#! /usr/local/bin/scsh -s
!#
(with-cwd "/jail"
(define (jail dir host ip)
(run (/usr/sbin/jail ,dir ,host ,ip /bin/sh /etc/rc)))
(for-each (lambda (j)
(jail j j j))
(directory-files)))
</pre>
            <b>Comparison</b>
            <p> The sh version of the script looks substantially shorter and easier 
              to read, but, there are substantial benefits in the scsh version. 
              One benefit is the ability to define functions within regions like 
              <b>(with-cwd)</b>, which allowed me to keep the <b>(jail)</b> function 
              hidden from users of the script and I think it makes it easier to 
              read. <b>(directory-files)</b> is also much shorter than writing 
              <b>for dir in $(ls /export); do...</b>.
            <p> <b>(lambda)</b> is used to create anonymous functions in Scheme. 
              As shown, I am passing a function as an argument to <b>(for-each)</b> 
              to be applied to every item of the list <b>(directory-files)</b>. 
              Lambda is very powerful and can be used for a variety of purposes. 
              Using lambda, you can write a scsh script that returns functions 
              or creates functions from a template.
            <p> This second shell script, similar to one in ''Useful 
              Scripts for Overworked Administrators'' by Mark Prager 
              (<i>Sys Admin</i>, June 2001) pings a list of servers to test their 
              availability. If the servers are down, the administrator is contacted.
            <p> 
            <p> Bourne Shell:
            <p> 
            <pre>
#!/bin/sh

hosts="next-station postfix ns router"
for i in $hosts; do
if [ "$(ping -c 1 $i | grep "100% packet loss")" != "" ]; then
/home/evms/sms "$i is down."
echo "$i is down" | /usr/bin/mail kaworu
fi
done
</pre>
            scsh:
            <p> 
            <pre>
#! /usr/local/bin/scsh -s
!#

(for-each (lambda (host)
(define (alive?)
(run/strings (| (/sbin/ping -c 1 ,host) (grep "100% packet loss"))))
(if (alive?)
'()
(begin
(run (/home/evms/sms ", host is down."))
(run (| (echo ", host is down") (/usr/bin/mail kaworu))))))

(list "next-station" "postfix" "ns"
"router" "teqnix" "next" "logsrv"))
</pre>
            This example shows that I am also employing abstraction by defining 
            a function within lambda. This example is a bit larger than the sh 
            script, but it is certainly more readable.
            <p> Through the <b>vnconfig</b> program in FreeBSD, you can create 
              mountable partitions through disk images. This scsh shell script 
              accepts two arguments: the directory that you want to back up, and 
              the path to where the disk image should be stored:
            <p> 
            <pre>
#! /usr/local/bin/scsh -s
!#

(begin
(if (eq? (length (command-line)) 1)
(run (echo
"Usage: ./createbackup &lt;tree&gt; &lt;file&gt;
For example, ./createbackup /usr creates a self-mounting image &lt;file&gt;
containing all files within /usr"))
(let ((totalsize (car (run/sexps (| (du -c ,(argv 1)) (grep "total"))))))
(run (echo "It appears that" ,(argv 1) "is" ,totalsize "K. Starting the backup process.."))
(begin
(&amp;&amp; (dd if=/dev/zero of=,(argv 2) bs=1k count=,totalsize)
(vnconfig -s labels -c vn0 ,(argv 2))
(disklabel -r -w vn0 auto)
(newfs vn0c)
(rmdir /backup_mount)
(mkdir /backup_mount)
(mount /dev/vn0c /backup_mount)
(cp -R -f ,(argv 1) /backup_mount)
(umount /backup_mount)
(rmdir /backup_mount))))
(run (echo "Backup complete."))))
</pre>
            This example illustrates the advantage of Prefix Notation. Instead 
            of having to include a <b>&amp;&amp;</b> after each command, I only 
            have to include it once, which makes the script easier to read. Also, 
            <b>let</b> is a very important constructor that allows you to define 
            variables within a region so that it can not be altered by the programmer. 
            This is another example of abstraction.
            <p> <b>Conclusion</b>
            <p> There are many shells available for the various *NIX operating 
              systems. Each one encompasses both an interactive prompt and a batch 
              mode where more complicated commands can be written. Most shell 
              scripting languages are archaic and have limited access to the operating 
              system. Scsh merges shell scripting and systems programming to produce 
              easy to read, portable, and fast code. When comparing the scsh shell 
              scripts to their sh counterparts, you can see the difference scsh 
              makes.
            <p> <b>References</b>
            <p> Shivers, Olin, "A Scheme Shell". 1994. MIT Laboratory 
              for Computer Science.
            <p> Shivers, Olin, and Brian D. Carlstrom. "Scsh Reference Manual". 
              1994. SCSH 0.5.2 Documentation.
            <p> Kelsey, R. and J. Reeves and M. Sperber. "The Incomplete 
              Scheme 48 Reference Manual for release 0.57", Scheme 48 0.57 
              Documentation.
            <p> Abelson, H., and G. J. Sussman and J. Sussman. "Structure 
              and Interpretation of Computer Programs 2nd edition". 1996. 
              MIT Press.
            <p> IEEE Working Group. "IEEE Standard for the Scheme Programming 
              Language". 1991.
            <p> <i>Evan Sarmiento is a tenth-grade student at Boston University 
              Academy. He enjoys FreeBSD kernel hacking and network administration. 
              He can be contacted at: <b>evms@bu.edu</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
