<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i01: Posting Email to the Web with MHonArc</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a9_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a9_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a9_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a9_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a9_f6.htm">Figure 6</a></span></td>
		<td><a href="../../../../source/SA/2002/jan2002.tar"><b class=codeListing>jan2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a9.gif" width="200" height="174" align="right">Posting 
              Email to the Web with MHonArc</h1>
            <p> <i>Roberto Jo&atilde;o Lopes Garcia</i>
            <p> I work for MHA Engenharia Ltda, a consulting engineering services 
              firm based in S&atilde;o Paulo, Brazil. We encountered the problem 
              of project-related email messages arriving at a single manager' 
              or director's email account, rather than being shared with 
              all members of the project team. We wanted a way to make project-related 
              email available to all team members so that each engineer would 
              have the latest information. We also wanted a more effective method 
              for disseminating information to the team.
            <p> Our first solution was to create an email account for each project, 
              ask our clients to send messages to those project accounts, and 
              teach our engineers to regularly check for new messages at those 
              accounts. This solution was problematic, however, because we checked 
              email through a Eudora email client program and had to register 
              each message (to conform with our ISO9000 proceedings) and move 
              any files attached to the message to a specially created directory 
              (related to the registered message). Nobody wanted the task of checking 
              and registering new messages. We also had problems with more than 
              one user (we have more than 50 engineers) trying to check the same 
              email account simultaneously. Furthermore, there was the risk of 
              someone accidentally deleting important messages.
            <p> We developed a solution that automatically receives and registers 
              each project email message, converts the messages to HTML format, 
              posts the message on a Web server, and then delivers an acknowledgement 
              to the sender verifying that the message was received. The engineers 
              only have to visit the Web site to view any new messages. The solution 
              is based on five open-source software products and one proprietary 
              product.
            <p> The process for this project email system is as follows:
            <p> 
            <p> 
              <li> The Internet email server receives a project message, copies 
                it (as usual) to allow POP3 or IMAP to read it, and transfers 
                the message to an internal server that will process it. If this 
                cannot be completed, the system stores the message and retries 
                later. <p>
              <li> The internal server receives the message from the Internet 
                mail server and then:
            <p>
            1. Registers the message into a unique internal number.
            <p> 2. Transforms the message into an HTML page.
            <p> 3. Extracts the attached files into a specially created directory.
            <p> 4. Checks the extracted files for viruses and makes a report of 
              this task.
            <p> 5. Updates the messages index. There are two indexes: one by date 
              and the other by thread.
            <p> 6. Sends confirmation message to the sender. This message shows 
              the original message and its internal registered number.
            <p> 7. The search program regularly updates its database with the 
              newer messages.
            <p> 
            <p> The engineers read the messages through an Internet Web browser. 
              The HTML pages generated from the email messages can be accessed 
              by the index ordered by receiving date, or by the related message 
              thread. The engineers can search messages from all projects or messages 
              from a specific project. Figure 1 shows a project message received 
              and converted by this system. The top of the message shows the project 
              id and name, the message id (our internal register), and message 
              subject. The receiving date and time, a navigation menu, and again 
              the subject and the message header are shown beneath. The message 
              body is followed by links to the attached message files.
            <p> The attached message files are expanded and checked for viruses. 
              To see the result of this test, the engineer removes the extension 
              <b>.html</b> from the navigation bar, then the browser will launch 
              the scan report. Figure 2 shows the scan report for the message 
              from Figure 1.
            <p> At the center of our solution is a program called MHonArc (<b>http://www.mhonarc.org/</b>). 
              MHonArc is a PERL (<b>http://www.perl.org/</b>) program that transforms 
              the messages into HTML pages and maintains an index. After playing 
              with MHonArc-generated pages, my partner Guilherme Augusto de Brito 
              Neves realized that we could use the MHonArc message numbers as 
              our internal message register required by MHA's ISO9000 proceedings. 
              This helped lead us to our final solution.
            <p> <b>The MHonArc Program</b>
            <p> MHonArc installation is simple and well documented (<b>http://www.mhonarc.org/MHonArc/doc/install.html</b>). 
              If the required PERL version is previously installed, there is no 
              problem installing MHonArc. (The system described in this article 
              uses MHonArc 2.4.7 and Perl 5.006.)
            <p> MHonArc can convert a single message, mail folders, or UUCP- or 
              UNIX-style mailboxes to HTML. The simplest way do run it is:
            <p> 
            <pre>
mhonarc path_to_inbox_file
</pre>
            This will convert all messages in the inbox file into HTML pages. 
            The above command generates two index pages and one file for each 
            message. For example, for a three-message inbox file, the command 
            above generates the files:
            <p> 
            <p> <b>maillist.html</b> -- Index page
            <p> <b>threads.html</b> -- Thread index page
            <p> <b>msg00000.html</b> -- First converted message
            <p> <b>msg00001html</b> -- Second converted message
            <p> <b>msg00002html</b> -- Third converted message
            <p> 
            <p> To add new messages to an already existing MHonArc HTML message, 
              is necessary to use the <b>-add</b> option:
            <p> 
            <pre>
mhonarc -add path_to_inbox_file
</pre>
            If the file to be processed is not specified, MHonArc will expect 
            to read it from the standard input.
            <p> <b>Configuration</b>
            <p> It is possible to configure almost all aspects of the MHonArc 
              program, and there are many options. MHonArc has a complete manual 
              set and good examples that show what can be done. MHonArc works 
              with resources that control its behavior (<b>http://www.mhonarc.org/MHonArc/doc/resources.html</b>). 
              I used resource files to set those resources, but some of them can 
              also be set via command-line options or environment variables. There 
              are also Resource Variables that can be used to represent dynamic 
              data within a resource (<b>http://www.mhonarc.org/MHonArc/doc/rcvars.html</b>).
            <p> The command I use to convert the messages transferred from our 
              Internet mail server is:
            <p> 
            <pre>
/usr/bin/mhonarc3 -add -quiet -rcfile $MRC/files.mrc -rcfile \
  $MRC/indice.mrc -rcfile $MRC/date_p.mrc -outdir $D_OUT $F_IN
</pre>
            <b>mhonarc3</b> is my hacked version; option <b>-add</b> is used to 
            add messages to the existing archive specified by <b>-outdir</b>. 
            I used three resource files, specified by the <b>-rcfile</b> option, 
            to control MHonArc behavior. The environment variables <b>$MRC</b>, 
            <b>$D_OUT</b>, and <b>$F_IN</b> are set by my scripts and specify 
            the resource files and archive (outdir) locations and the input file. 
            <b>$F_IN</b> is set to <b>""</b> to read the messages from the standard 
            input, and <b>-quiet</b> is used for "do not produce status" 
            messages.
            <p> I started by modifying one of the example resource files that 
              produced a behavior similar to what I needed. (The example's 
              location depends on the installation and can be set at that time.) 
              It was <b>date.rc</b>, a resource file that makes MHonArc produce 
              an index page ordering and grouping messages by the date received.
            <p> Figure 3 shows a date index page of the received messages for 
              a given project, "&Iacute;ndice Cronol&oacute;gico das Mensagens 
              de E-MAIL". The page title shows the project ID and name, the 
              word "Recebidas", and the total count of the received 
              messages, starting with zero. There is a link to the thread pages, 
              "&Iacute;ndice De Assuntos", and navigation links because 
              each index page was set to show only 100 messages. The messages 
              are sorted in reverse order to show newest messages first.
            <p> The HTML page displays the message receiving time, our internal 
              message id, the message subject, and the sender. This line is controlled 
              by the <b>LiTemplate</b> resource. This resource is an HTML fragment 
              that will be used to create the index page. Within <b>LiTemplate</b>, 
              I use the same resource variables such as <b>$MSGNUM$</b>, <b>$SUBJECT$</b>, 
              and <b>$FROMNAME$</b>. This is the actual code used for <b>LiTemplate</b>:
            <p> 
            <pre>
&lt;LiTemplate&gt;
&lt;tr valign=top&gt;
&lt;td&gt;&lt;LI&gt;$MSGLOCALDATE(CUR;%H:%M)$ [$MSGNUM$]&lt;/LI&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;$SUBJECT$&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;$FROMNAME:35$&lt;/td&gt;
&lt;td&gt;$NOTE$&lt;/td&gt;
&lt;/tr&gt;
&lt;/LiTemplate&gt;
</pre>
            Within a resource file, resources that have values is set like:
            <p> 
            <pre>
&lt;ResourceName&gt;value&lt;/ResourceName&gt;
</pre>
            Resource variables can have arguments, and I set the <b>$MSGLOCALDATE$</b> 
            arguments to show only the time (<b>%H:%M</b>) of the current (<b>CUR</b>) 
            message in the example above:
            <p> 
            <pre>
$MSGLOCALDATE(CUR;%H:%M)$
</pre>
            You can also control the maximum expanded size of the resource variable. 
            I limit the sender's name size to 35 characters:
            <p> 
            <pre>
$FROMNAME:35$
</pre>
            The <b>$ENV$</b> can be used to retrieve and expand the value of any 
            environment variable; I used it to get the project's id and name 
            set by my scripts into the <b>E_USR</b> variable:
            <p> 
            <pre>
$ENV(E_USR)$
</pre>
            The pages generated can be mounted brick-by-brick with HTML fragments 
            stored in resources. Those fragments can have dynamic information 
            like the <b>LiTemplate</b> above. Each type of page generated (index, 
            thread index, or message) has a well-defined layout. Based on that 
            layout, you can easily construct custom pages. The Message Page layout 
            (<b>http://www.mhonarc.org/MHonArc/doc/layout.html#msgpg</b>) is shown 
            here:
            <p> 
            <pre>
MSGPGBEGIN
    MSGHEAD
    TOPLINKS
    SUBJECTHEADER
    Converted message header
    HEADBODYSEP
    Converted message body
    MSGBODYEND
    (FOLUPBEGIN
        FOLUPLITXT+
     FOLUPEND)?
    (REFSBEGIN
        REFSLITXT+
     REFSEND)?
    BOTLINKS
    MSGFOOT
MSGPGEND
</pre>
            The <b>MSGPGBEGIN</b> (beginning of the message page) resource used 
            to generate the HTML message showed in Figure 1 is:
            <p> 
            <pre>
&lt;MSGPGBEGIN&gt;

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;$ENV(E_BOX)$ $MSGNUM$ - $ENV(E_USR)$ - $SUBJECTNA:72$&lt;/title&gt;
&lt;LINK REV="made" HREF="mailto:$FROMADDR$"&gt;
&lt;/head&gt;
&lt;body BGCOLOR="#FFFFFF" TEXT="#000000" background="/images/fundo2.jpg"&gt;

&lt;table border="0" width="100%"&gt;
  &lt;tr&gt;
    &lt;td align="center" valign="midle"&gt;&lt;p align="center"&gt;
       &lt;font size="6" face="Times New Roman"&gt;$ENV(E_USR)$&lt;BR&gt;
       &lt;img src="$ENV(E_ICON_BOX)$" alt="$ENV(E_BOX)$"s  \
          align="center" hspace="0"&gt;
       *** Mensagem $ENV(E_BOX)$ &lt;B&gt;$MSGNUM$&lt;/B&gt; ***
       &lt;img src="$ENV(E_ICON_BOX)$" alt="$ENV(E_BOX)$"s \
         align="center" hspace="0"&gt;
       &lt;BR&gt;$SUBJECTNA:72$&lt;/font&gt;
    &lt;/td&gt;
    &lt;td align="right"&gt;&lt;img src="/images/mha1.gif" alt="MHA \
      Engenharia Ltda" align="right" hspace="0" WIDTH="221" \
      HEIGHT="117"&gt;&lt;/font&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p align="center"&gt;&lt;font   size="6" face="Times New Roman"&gt;&lt;/font&gt;&lt;/p&gt;
&lt;CENTER&gt;
Mensagem $ENV(E_BOX)$ em&lt;B&gt;$MSGLOCALDATE(CUR; %d/%m/%Y as %H:%M hs)$&lt;/B&gt;.
&lt;/CENTER&gt;

&lt;/MSGPGBEGIN&gt;
</pre>
            My script set diverse environment variables like <b>E_BOX</b>, <b>E_USR</b>, 
            and <b>E_ICON_BOX</b>. There are also resources variables like <b>$MSGNUM$</b> 
            and <b>$SUBJECTNA$</b> limited to 72 characters. The <b>TOPLINKS</b> 
            resource is:
            <p> 
            <pre>
 &lt;TopLinks&gt;
&lt;HR&gt;
&lt;center&gt;
$BUTTON(PREV)$$BUTTON(NEXT)$$BUTTON(TPREV)$$BUTTON(TNEXT)$[&lt;A
HREF="$IDXFNAME$#$MSGNUM$"&gt;$IDXLABEL$&lt;/A&gt;][&lt;A
HREF="$TIDXFNAME$#$MSGNUM$"&gt;$TIDXLABEL$&lt;/A&gt;]
&lt;/center&gt;
&lt;/TopLinks&gt;
</pre>
            The resource that specifies what will be expanded by <b>$BUTTON(PREV)$</b> 
            is set by <b>PrevButton</b> as below:
            <p> 
            <pre>
&lt;PrevButton chop&gt;
[&lt;A HREF="$MSG(PREV)$"&gt;Pr&eacute;via - Data&lt;/A&gt;]
&lt;/PrevButton&gt;
</pre>
            This way, I was able to build the desired layout. I started by designing 
            a single HTML page, and when this page was what we wanted, I broke 
            it down into the respective resources.
            <p> <b>MIME Support</b>
            <p> The MHonArc MIME support is provided by MIME filters. Those filters 
              are functions that have parameters allowing us to configure it. 
              It is possible to write a new filter and to incorporate it into 
              MHonArc. I configure the MIME filters to create a subdirectory for 
              every message that has files attached to it, and to place a link 
              and icon to this file in the generated HTML message. To do that, 
              I set the resource <b>MIMEArgs</b> to:
            <p> 
            <pre>
&lt;MIMEArgs&gt;
   m2h_external::filter;   usename   subdir   useicon
   m2h_plain_text::filter; attachcheck htmlcheck usename subdir \
      useicon maxwidth=80
&lt;/MIMEArgs&gt;
</pre>
            Also for plain text messages that are expanded into the HTML page 
            as a <b>&lt;PRE&gt;</b> tag, I limit the line length to 80 characters 
            and lines are wrapped if they are longer. For the expanded attached 
            files, I set an image icon for each file type and one default for 
            the files that could not match the set types or don't have the 
            correct MIME type set in the message. Again, I use one resource to 
            do that:
            <p> 
            <pre>
&lt;Icons&gt;
audio/basic:/mha_mail/icons/son.gif
image/jpeg:/mha_mail/icons/jpg.gif
application/zip:/mha_mail/icons/zip.gif
application/x-gzip:/mha_mail/icons/zip.gif
application/msword:/mha_mail/icons/doc.gif
   . . . (skipped)
&lt;/Icons&gt;
</pre>
            <b>Hacking MHonArc</b>
            <p> We wanted to notify our clients (send back a received confirmation 
              message) that we have received and registered each message they 
              send. I also wanted the attached message files, automatically expanded 
              by MHonArc, to be scanned by anti-virus software. Because MHonArc 
              does not have these abilities, I hacked it to make them by using 
              my very little Perl experience.
            <p> Sending back a confirmation message meant that the system should 
              confirm that the received message was not automatically sent, like 
              errors messages (<b>http://www.dsv.su.se/~jpalme/ietf/jp-ietf-home.html#newfields</b>). 
              Thus, the system needs to look for the existence of an <b>Auto-Submitted</b> 
              message header in the received message. MHonArc did not do it, and 
              again, I needed to hack it. (Unfortunately, not every system or 
              program uses the <b>Auto-Submitted</b> header in its auto-generated 
              messages.) Figure 4 shows the received confirmation message for 
              the Figure 1 message.
            <p> My hack to MHonArc consisted mainly of two changes. I first changed 
              the main program (MHonArc) to call a post-processing function. For 
              each processed message, this function calls the anti-virus program 
              and, if the message doesn't have the <b>Auto-Submitted</b> 
              header, it prepares and sends back the confirmation message. Listing 
              1 contains the hacked MHonArc and my post-processing function. I 
              then created an internal MHonArc variable to store the existence 
              of the <b>Auto-Submitted</b> header. Listing 2 contains those changes. 
              (Search the files for "ROBERTO" to see all of the changes.)
            <p> <b>OpenSSH to Transfer the Messages</b>
            <p> To add messages as they arrive, I used SendMail's (<b>http://www.sendmail.org/</b>) 
              <b>.forward</b> approach described at the MHonArc FAQ (<b>http://www.mhonarc.org/MHonArc/doc/faq/archives.html#forward</b>). 
              At our Internet mail server, the <b>.forward</b> file is configured 
              to store the newly received message in the local mail folder for 
              each project account and to pass a copy of it to the script that 
              handles the necessary steps to transfer the message to our internal 
              server to be processed by MHonArc. Below is how the <b>.forward</b> 
              file looks:
            <p> 
            <pre>
\prj00777, "|./p_m.scr "prj00777"
</pre>
            <b> \prj00777</b> is used to make Sendmail store the message in the 
            local mail folder; <b>./p_m.scr</b> sets the project-specific values 
            and calls another script to perform the transfer. The <b>p_m.scr</b> 
            script:
            <p> 
            <pre>
#!/bin/ksh
E_USR="Projeto: 00777 - ROCHAVER&Aacute; - TSM";export E_USR
E_NAME=prj00777;export E_NAME
../p_mail.scr
</pre>
            I use the Korn shell. <b>E_USR</b> is set with the project's 
            name (see the resource <b>MSGPGBEGIN</b> above). <b>E_NAME</b> is 
            set with the account name that is the same name used for the archive's 
            location (see the <b>D_OUT</b> variable used in the <b>mhonarc3</b> 
            command line shown above). The main command in the <b>p_mail.scr</b> 
            is the one that transfers all the data to our internal server:
            <p> 
            <pre>
ssh -l username ???.???.???.??? "E_USR=\"$E_USR\";export E_USR; \
E_NAME=$E_NAME;export E_NAME;./mrc/m2h_in.scr"
</pre>
            It calls OpenSSH and asks to connect to our internal server (address: 
            <b>???.???.???.???</b>) as a specific user (<b>username</b> that owns 
            all converted message files and directories) and to execute the command 
            within the quotation marks. This command, running at the internal 
            server, sets the same <b>E_USR</b> and <b>E_NAME</b> environment variables 
            set by the <b>./p_m.scr</b> script and calls <b>m2h_in.scr</b>. This 
            will set some others environment variables and call <b>mhonarc3</b>, 
            as shown later. The message received is magically passed through all 
            the scripts until <b>mhonarc3</b> reads it from its standard input.
            <p> Because I was new to OpenSSH (<b>http://www.openssh.com/</b>), 
              I referred to Matt Lesko's article "Installing and Configuring 
              OpenSSH" (<i>Sys Admin</i> magazine, October 2000: (<b>http://www.samag.com/documents/s=1160/sam0010a/0010a.htm</b>), 
              which helped me get started. After reading the <b>ssh</b> protocol 
              specification (<b>http://www.ietf.org/html.charters/secsh-charter.html</b>) 
              and OpenSSH manuals, I felt comfortable enough to do the job.
            <p> I decided to use only the protocol version 2, check host IP, Strict 
              Host Key Checking, do not forward and do not fall back to <b>rsh</b>. 
              Obviously, I have to correctly generate server keys and configure 
              each server with each other public key.
            <p> After the <b>ssh</b> command, the script checks for any returned 
              errors. If there is an error, the script transfers the message to 
              a temporary file to process later. If there was no error, the script 
              checks for the existence of previously unprocessed messages stored 
              in the temporary file. If that file exists, it will transfer its 
              contents (just like the command above) to the internal server. If 
              there was no error in the transfer, delete the temporary file; otherwise, 
              the file will remain. This approach works well. If the internal 
              server cannot be reached, for example, the message will be processed 
              when the next correctly transferred message occurs.
            <p> <b>The Search Engine</b>
            <p> To allow our engineers to search through the converted messages, 
              we use ht://Dig (<b>http://www.htdig.org/</b>), an HTML search engine 
              that allows extensive customization. It uses ispell (<b>http://fmg-www.cs.ucla.edu/fmg-members/geoff/ispell.html</b>) 
              for its dictionary, so I just had to download and install the Brazilian 
              Portuguese ispell dictionary and afix files. There is one search 
              page that allows searching through messages from all the projects, 
              and one search page that limits the search to a specific project. 
              To limit the search, I use the <b>htdig</b> HTML form hide variable, 
              shown below:
            <p> 
            <pre>
name="restrict" value="/mha_mail/prj00777"
</pre>
            This narrows the search to the 00777 project messages. (See Figure 
            5, a search result for date 21/09/2001 and the word "reuni&atilde;o", 
            limited to the project 00777.) Cron is used to update ht://Dig's 
            database every hour.
            <p> <b>The Anti-Virus Program</b>
            <p> We used the anti-virus program VirusSCAN for UNIX (uvscan) from 
              McAfee (<b>http://www.mcafee.com/</b>, which is not open source. 
              I could also use AMaViS (<b>http://www.amavis.org/</b>) to scan 
              messages at the mail server but I decided to scan at the internal 
              server to keep the scan's report with the original message. 
              Figure 2 shows the scan report of a message.
            <p> <b>Conclusion</b>
            <p> Our problem was solved. Our engineers are now used to reading 
              the project mail messages through an Internet Web browser. Information 
              is easily disseminated to the whole group. Clients know that their 
              messages are received and their information goes to everyone on 
              the project. (See Figure 6.)
            <p> The open-source MHonArc, Perl, ht://Dig (and ispell), OpenSSH, 
              and Sendmail were used together, in addition to the proprietary 
              uvscan, to build a single solution. All of the programs have good 
              documentation and allow extensive customization. The beauty of open-source 
              programs is that if something can't be done by normal customization, 
              the source code is available to help create a solution. I don't 
              think we could solve the granularity mail problem we were having 
              without the open-source options.
            <p> <b>References</b>
            <p> AMaViS -- <b>http://www.amavis.org/</b>
            <p> ht://Dig -- <b>http://www.htdig.org/</b>
            <p> ispell -- <b>http://fmg-www.cs.ucla.edu/fmg-members/geoff/ispell.html</b>
            <p> McAfee -- <b>http://www.mcafee.com/</b>
            <p> MhonArc -- <b>http://www.mhonarc.org/</b>
            <p> OpenSSH -- <b>http://www.openssh.com/</b>
            <p> PERL -- <b>http://www.perl.org/</b>
            <p> SendMail's -- <b> http://www.sendmail.org/</b>
            <p> <i>Sys Admin</i> magazine -- <b> http://www.sysadminmag.com/documents/s=1160/sam0010a/0010a.htm</b>
            <p> <i>Roberto Jo&atilde;o Lopes Garcia is a civil engineer, specializing 
              in software engineering. He has worked with Solaris for more than 
              ten years and now also works with Linux. Roberto has developed FORTRAN, 
              C, C++, LISP, and SQL programs for calculations, CAD (Computer Aided 
              Design) drawings, server daemons, dynamic Web pages, etc. He can 
              be contacted at:<b> roberto@mha.com.br</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
