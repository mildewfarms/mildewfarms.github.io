<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i09: Finding Old Things</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/sep2002.tar"><b class=codeListing>sep2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">Finding 
              Old Things</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> One of the great things about the Perl community is seen in the 
              many ways that Perl information can be obtained to solve typical 
              tasks or to get past those sticky little problems. Besides the professional 
              documentation, there's also the myriad of man pages that come 
              with the Perl distribution itself, and the CPAN modules. And with 
              a little searching on the Net, you can quickly find very active 
              support for Perl in the way of Usenet newsgroups, mailing lists, 
              and a few Web communities.
            <p> The most active Perl Web community that I participate in is known 
              as the Perl Monastery, at <b>http://perlmonks.org</b>. Each day, 
              a few hundred active users and a few thousand visitors post and 
              answer questions and chat in the "chatterbox". In my past 
              role as a systems administrator, it seems like I was always under 
              pressure to solve problems in annoyingly brief amounts of time. 
              Therefore, the Monastery is a welcome resource, because questions 
              often get answered within minutes, so help is just a browser-reload 
              or two away.
            <p> Recently, a relatively new Monk (as we call the participants) 
              who goes by the name "Aquilo" asked for help with a script 
              that:
            <p> recurses through a directory structure and checks if more than 
              half of the files in that directory have been used in the past 180 
              days. The path of directories which are predominately unused is 
              appended to a list of directories which will be used to archive 
              them.
            <p> Aquilo gave some sample code that performed directory recursion 
              in the traditional beginner way. I say traditional, because one 
              of Perl's "rites of passage" seems to be to "write 
              a directory recursion routine". Generally, these solutions 
              are not as flexible or efficient or portable as Perl's built-in 
              <b>File::Find</b> module, but beginners generally aren't aware 
              of this module.
            <p> A typical hand-rolled directory recursion starts like so:
            <p> 
            <pre>
sub do_this {
  my ($dir) = shift;
  if (opendir DIR, $dir) { # it's a directory
    for my $entry (sort readdir DIR) {
     do_this("$dir/$entry"); # recurse
     }
  } else { # it's a file
    # operate on $dir (not shown)
  }
}
do_this("fred"); # our top-level directory
</pre>
            and when that gets typed in, and it runs forever, the beginner will 
            start to scratch his head wondering why. Well, the basic structure 
            is correct, except that the <b>readdir</b> call in the fourth line 
            returns not only the files contained within the directory, but also 
            the directories contained within the directory. That's good for 
            the most part, but we also get the always-present "dot" 
            and "dotdot" entries pointing at the current directory and 
            the parent directory.
            <p> This means that while we are processing our first directory (say 
              <b>fred</b>), we'll also recurse to process that directory 
              followed by slash-dot (<b>fred/.</b>), which processes the same 
              directory again, which then recurses to process that new name followed 
              by slash-dot (<b>fred/./.</b>), forever. Ooops! Similarly, we'll 
              also process the parent directory, which then contains this directory 
              as an entry. Even the fastest supercomputer cannot process an infinite 
              loop in less than infinite time.
            <p> So, the next move the beginner usually takes is to strip out the 
              dot files, or maybe just dot and dot-dot. Something like this:
            <p> 
            <pre>
sub do_this {
  my ($dir) = shift;
  if (opendir DIR, $dir) { # it's a directory
    for my $entry (sort readdir DIR) {
      next if $entry eq "." or $entry eq "..";
      do_this("$dir/$entry"); # recurse
    }
  } else { # it's a file
    # operate on $dir (not shown)
  }
}
do_this("fred"); # our top-level directory
</pre>
            and this is a little better. For the most part, everything runs fine, 
            but we still run into trouble when we hit a symbolic link (or "symlink"). 
            If the symlink points to a directory in a parallel part of the tree, 
            that's usually OK. But if it points to a directory deeper in 
            the current tree, we'll process that portion twice: once as a 
            result of following the symlink, and once when we actually get there 
            by normal directory recursion.
            <p> And then there's the possibility of a symlink pointing to 
              a directory <i>above</i> our current directory. It's just as 
              bad as following dot-dot -- we'll process the new directory 
              recursively, coming right back down to where we've already 
              gone. Infinite loop-time again.
            <p> So, the next necessary refinement is often "ignore symbolic 
              links":
            <p> 
            <pre>
sub do_this {
  my ($dir) = shift;
  if (opendir DIR, $dir) { # it's a directory
    for my $entry (sort readdir DIR) {
      next if $entry eq "." or $entry eq "..";
      next if -l "$dir/$entry";
      do_this("$dir/$entry"); # recurse
    }
  } else { # it's a file
    # operate on $dir (not shown)
  }
}
do_this("fred"); # our top-level directory
</pre>
            And there you have a perfectly fine directory recursion routine. As 
            long as you're running on UNIX, and not MacOS, VMS, OS/2, or 
            Windows, because the step that creates <b>$dir/$entry</b> is wrong 
            for those others. And, there are some speed-optimization steps to 
            keep from recursing into directories that have no subdirectories that 
            we haven't even begun to consider here. Luckily, that's 
            all done for us in the <b>File::Find</b> module, so let's get 
            back to solving the issue raised by Aquilo.
            <p> First, we'll pull in the module:
            <p> 
            <pre>
use File::Find;
</pre>
            Next, let's set up a hash (actually, a nested hash):
            <p> 
            <pre>
my %ages;
</pre>
            We'll use this to keep track of the number of items in the directory 
            that are both newer and older than 180 days. We'll make each 
            key in <b>%ages</b> be the full directory path name. The corresponding 
            value will be a hashref pointing to a hash with two keys in it: <b>old</b> 
            and <b>new</b>. The values of those two entries will be a running 
            count of the number of files of that category in that directory.
            <p> Now the easy and fun part -- calling <b>File::Find::find</b>:
            <p> 
            <pre>
find \&amp;wanted, "fred";
</pre>
            The <b>find</b> routine expects a reference to a subroutine ("coderef") 
            as its first parameter. It then descends into all of the directories 
            listed as the remaining arguments, in this case, just <b>fred</b>. 
            The subroutine gets called for every entry below the listed directories, 
            with a few parameters set. Let's take a look at <b>wanted</b> 
            now:
            <p> 
            <pre>
sub wanted {
  return unless -f $_;
  my $old_flag = -M $_ &gt; 180 ? 'old' : 'new';
  $ages{$File::Find::dir}{$old_flag}++;
}
</pre>
            A lot is going on in these few lines. First, the subroutine returns 
            quickly if we're not looking at a file. The value of <b>$_</b> 
            is the basename of the current entry (like <b>$entry</b> in the hand-rolled 
            version earlier), and our current directory is the directory being 
            examined. Next, <b>$old_flag</b> is set to either <b>old</b> or <b>new</b>, 
            based on looking at the file modification time. Finally, the hash 
            referenced by the value of <b>$ages{$File::Find::dir}</b> has one 
            of its two entries incremented, based on this <b>$old_flag</b>. The 
            value of <b>$File::Find::dir</b> is the full pathname to our current 
            directory. So, if a file in <b>fred/a</b> named <b>dino</b> were newer 
            than 180 days, then <b>${"fred/a"}{new}</b> would be incremented, 
            showing that we have a new file.
            <p> After the directory recursion pass is complete, we merely have 
              to walk the data to see what's old enough now:
            <p> 
            <pre>
for my $dir (sort keys %ages) {
  if ($ages{$dir}{old} &gt; $ages{$dir}{new}) {
    print "$dir has more old than new\n";
  }
}
</pre>
            And there you have it! For all directories that have more old entries 
            than new entries, we'll get a report.
            <p> On that last comparison, we'll get warnings if <b>-w</b> 
              or <b>use warnings</b> is enabled, because some directories have 
              new items but not old, or old items but not new. For a small program 
              like this, I probably wouldn't bother enabling warnings, but 
              if you're a stickler for that, then you might also want to 
              clean it up a bit before comparing:
            <p> 
            <pre>
for my $dir (sort keys %ages) {
  my $old = $ages{$dir}{old} || 0;
  my $new = $ages{$dir}{new} || 0;
  if ($old &gt; $new and $old &gt; 50) {
    print "$dir has more old than new\n";
  }
}
</pre>
            And notice, while I was cleaning up, I couldn't resist tinkering 
            a bit, making it so that directories with fewer than 50 old items 
            are not reported -- just one more thing that was made slightly 
            easier.
            <p> And there you have it -- a typical systems administration 
              task hacked out in a few lines of code, and a reference to a great 
              resource. Until next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for </i>WebTechniques<i> 
              and </i>Unix Review<i> magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
