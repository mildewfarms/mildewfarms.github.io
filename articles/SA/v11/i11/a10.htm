<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i11: Automatically Extending Your Data

</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/nov2002.tar"><b class=codeListing>nov2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">Automatically 
              Extending Your Data</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> Perl is great at parsing data and bringing it into memory-based 
              data structures for reformatting or analysis ("data reduction"). 
              One of Perl's features that permits relatively easy creation 
              of complex data structures is "auto-vivification" -- 
              a mouthful to say, but it roughly means "data structures get 
              expanded as necessary".
            <p> A frequent first reaction when I present auto-vivification in 
              the courses I teach is "isn't that dangerous?" and 
              "how can I turn that off?" and "doesn't that 
              violate 'use strict'?". Well, the answers are "no" 
              and "you don't" and "no". But, let me explain 
              by first going back to something simpler.
            <p> Ever since the earliest versions of Perl, you've been able 
              to say:
            <p> 
            <pre>
$count[3] = 14;
</pre>
            as the first statement of your program. What happens here is that 
            Perl realizes that <b>@count</b> doesn't exist, and creates it. 
            This new <b>@count</b> isn't long enough to hold four elements 
            yet (elements 0 through 3), so Perl extends the array to include those 
            elements, and puts the value 14 at <b>$count[3]</b>.
            <p> Similarly, the code:
            <p> 
            <pre>
$seen{'Dino'} = 7;
</pre>
            has also always worked, first creating the hash <b>%seen</b> if it 
            didn't exist, then adding a hash element with a key of <b>Dino</b>, 
            and finally putting 7 as the corresponding value.
            <p> The value of this "automatic creation of variables" 
              is that I don't need to first predetermine all the possible 
              index values for a given hash or array, create the structure properly, 
              and then run my program. I can simply run my program, and the data 
              structures will expand as necessary to hold the values.
            <p> Admittedly, language purists cringe at even this Perl capability, 
              but let's just presume that they don't understand that 
              the "P" in Perl stands for "Practical" (at least 
              in one telling of the story).
            <p> When Perl references were added mid-way through Perl's life, 
              Larry Wall extended the definition of this auto-extension of variables 
              to include not-yet-defined references, and this is the action defined 
              as "auto-vivification". This is best illustrated as an 
              example:
            <p> 
            <pre>
$myreference = undef;
$myreference-&gt;[3] = 14;
</pre>
            Here, <b>$myreference</b> is being treated as an array reference in 
            the second statement. However, at the moment, that's <b>undef</b>. 
            But just as Perl creates variables where necessary, and extends arrays 
            and hashes as needed, Perl will also plug in a pointer to an empty 
            anonymous array here. It's as if these statements were rewritten 
            as:
            <p> 
            <pre>
$myreference = undef;
$myreference = []; # inserted via autovificiation
$myreference-&gt;[3] = 14;
</pre>
            Now the 14 is being inserted as the fourth element (element index 
            3) of the anonymous array, pointed to by the <b>$myreference</b> variable.
            <p> Again, this is really just a continuation of the prior behavior: 
              "extend the data structures as necessary so that the show can 
              go on". Formally, the rule is:
            <p> 
            <ul>If a variable containing <b>undef</b> is being used in an assignment 
            as if it were a reference to a data structure, a reference to an empty 
            data structure of the appropriate type is placed into that variable 
            before the operation continues.</ul>
            <p> 
            And the result is that we create data structures as needed. For example, 
            this also works:
            <p> 
            <pre>
$myreference = undef;
$myreference-&gt;{'Dino'} = 7;
</pre>
            Note, however, that we'll end up with a hash reference in <b>$myreference</b>, 
            not an array reference. This hash reference initially points at an 
            anonymous empty hash, which is then nearly immediately extended to 
            include an element with a key of <b>Dino</b> and a value of 7.
            <p> The type of reference is determined by the type of the object 
              we're trying to point at, not by the previous contents of the 
              variable. In fact, the previous contents of the variable must be 
              <b>undef</b>, or the rule given above doesn't apply. So, this 
              sequence is guaranteed to fail:
            <p> 
            <pre>
$myreference = undef;
$myreference-&gt;[3] = 14;
$myreference-&gt;{'Dino'} = 7;  # fails
</pre>
            We're trying to use the now-present array reference in <b>$myreference</b> 
            as if it were a hash reference. This can't work (ignoring the 
            soon-to-be-removed pseudo-hash feature, anyway), and will throw a 
            runtime exception.
            <p> The examples above deliberately put an <b>undef</b> into the variable, 
              but the <b>undef</b> that is present in a newly created variable 
              would have worked just as well:
            <p> 
            <pre>
my $newreference;
$newreference-&gt;[3] = 14;
</pre>
            And recall that a new element of an array or hash also has this same 
            sort of <b>undef</b>:
            <p> 
            <pre>
my @pointers;
$pointers[42]-&gt;{'Dino'} = 7;
</pre>
            Here, <b>$pointers[42]</b> doesn't exist, so Perl first extends 
            the <b>@pointers</b> array to include that element. But then the element 
            is being used as if it were a hash ref, so Perl places an anonymous 
            hash reference into <b>$pointers[42]</b>, and continues the operation. 
            If we consistently placed only hash references into this array, we'd 
            have a dynamically allocated array of hashrefs.
            <p> Of course, you can drop that arrow, because it's between 
              two "subscript-y kind of things" (technical terms), so 
              it's more commonly written as <b>$pointers[42]{'Dino'}</b>. 
              And even the quotes aren't necessary there, since the hash 
              element is an alphanumeric symbol, so we can reduce that further 
              to <b>$pointers[42]{Dino}</b> safely.
            <p> An action might invoke multiple levels of auto-vivification. For 
              example, let's look at the following code:
            <p> 
            <pre>
my $source = "red";
my $destination = "yellow";
my $length = 35;

$lengths{$source}{$destination} = $length;
</pre>
            The hash element <b>$lengths{red}</b> is being used as a hash reference, 
            de-referenced, and the element with a key of <b>yellow</b> of that 
            hash is being given the value 35. Now, if these are the first few 
            steps of the program, <b>%lengths</b> won't even exist, so it 
            first gets created. Then, since <b>$lengths{red}</b> doesn't 
            exist, it gets installed with a value of a reference to an empty hash 
            (via auto-vivification). Finally, the element with a key of <b>yellow</b> 
            in that hash is given the value of 35, and we're done. This is 
            more commonly encountered in a loop:
            <p> 
            <pre>
while (&lt;DATA&gt;) {
  my ($source, $destination, $length) = split;
  $lengths{$source}{$destination} = $length;
}
# more code here later
__END__
red yellow 35
red green 19
purple blue 12
blue orange 18
</pre>
            Note that once the first line is processed, creating a hash reference 
            for <b>$lengths{red}</b>, the second line doesn't create a <i>new</i> 
            hash reference, because <b>$lengths{red}</b> is already defined. So 
            the elements with keys of yellow and green are both in the same hash, 
            referenced by the hash element of <b>$lengths{red}</b>.
            <p> A variant on this for tabulation purposes involves the automatic 
              initialization to <b>undef</b> for a variable with respect to an 
              operator like <b>+=</b>. For example, the following code sums a 
              list of numbers:
            <p> 
            <pre>
while (&lt;DATA&gt;) {
  my ($number) = split;
  $sum += $number;
}
print "$sum\n";
__END__
3
5
19
</pre>
            The first time through the loop, <b>$sum</b> is uninitialized, and 
            therefore guaranteed to be <b>undef</b>, but this happens to be the 
            perfect base value for <b>+=</b>, treating the <b>undef</b> like a 
            0 because addition is a mathematical operation. We can apply this 
            to a complex data reduction:
            <p> 
            <pre>
while (&lt;DATA&gt;) {
  my ($source, $destination, $hits) = split;
  $total_hits{$source}{$destination} += $hits;
}
# more code here later
__END__
red yellow 35
red green 19
red yellow 12
blue red 18
blue red 8
</pre>
            Just like the previous summing example, we'll now be adding up 
            a summation. But we're summing the totals organized by the pair 
            of source crossed with destination. Looking at the first invocation:
            <p> 
            <pre>
$total_hits{red}{yellow} += 35;
</pre>
            Since <b>%total_hits</b> is empty at this point, Perl first extends 
            the hash to include a hashref at <b>$total_hits{red}</b>. This hashref 
            initially points to an empty hash, but then gets extended to include 
            an element at the key of <b>yellow</b>. However, since the value at 
            this key is being used in a <b>+=</b>, the initial <b>undef</b> value 
            is treated as 0, and then 35 gets added, resulting in 35. This 35 
            is then stored in place of the initial <b>undef</b>, and we're 
            done. When the third step is executed:
            <p> 
            <pre>
$total_hits{red}{yellow} += 12;
</pre>
            the value of 35 is added to 12, yielding 47, and that becomes the 
            updated value.
            <p> The important point here is that you write what you want it to 
              do, and it just works. That's the nice thing about Perl. It 
              very often just Does The Right Thing. So, be mystified by auto-vivification 
              no more: learn to embrace it, use it, and like it! Until next time, 
              enjoy! 
            <p><i> Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for </i>WebTechniques<i> 
              and </i>Unix Review<i> magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
