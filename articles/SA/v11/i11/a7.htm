<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i11: PAM-like Authentication for Windows Clients</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a7_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a7_f4.htm">Figure 4</a></span></td>
		<td><a href="../../../../source/SA/2002/nov2002.tar"><b class=codeListing>nov2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a7.gif" width="200" height="174" align="right">PAM-like 
              Authentication for Windows Clients</b></h1>
            <p> <i>Nathan Yocom</i>
            <p> Most derivatives of UNIX come with support for Pluggable Authentication 
              Modules (PAM). UNIX boxes can authenticate users in a multitude 
              of ways with PAM. However, if you put a machine running Microsoft 
              Windows NT/2K/XP into the same authentication framework, you will 
              encounter problems. The solutions currently available range from 
              emulation of a domain controller with Samba, to various scripts 
              and back-ends that replicate account information between heterogeneous 
              hosts.
            <p> In the Computer Science department where I work, students receive 
              and use accounts on our Solaris server, but many students also need 
              access to machines with Microsoft Windows. To allow this, and still 
              utilize our Solaris server as an authentication and storage point, 
              I have worked with a colleague to create the GPL'd pGina (<b>http://pgina.cs.plu.edu</b>). 
              Through the use of this replacement GINA for Windows and community-developed 
              plugins for authentication, this tool, in some situations, can replace 
              a Microsoft Windows Domain with other standard authentication methods. 
              Figure 1 shows the ideal single-point authentication framework I 
              was looking for, while Figure 2 shows what I would have had to do 
              using currently available and mostly non-GPL methods.
            <p> <b>What Is a GINA?</b>
            <p> GINA stands for "Graphical Identification aNd Authentication", 
              and is an extension loaded by the Winlogon.exe process, which is 
              responsible for presenting the login dialog box, and handling SAS 
              (typically CTRL+ALT+DEL) sequences. By using the freely available 
              Windows Platform SDK, it is possible to write a replacement GINA 
              library that functions however you like. pGina is exactly that -- 
              a custom GINA interface that loads plugins that conform to an open 
              standard to provide for modular authentication and identification 
              (thus, pluggable Graphical Identification aNd Authentication, or 
              pGina). With the use of pGina, we authenticate our Windows machines 
              against an OpenLDAP schema running on our Solaris server. In this 
              article, I'll describe what pGina does, then set up a system 
              to authenticate against an LDAP server.
            <p> <b>How Does pGina Work?</b>
            <p> To begin, let's walk through a normal user login using pGina. 
              After the user has entered his or her username and password, pGina 
              passes that information, along with configuration settings, to a 
              plugin. The plugin then determines whether the user is to be allowed 
              access and can set up different options on a per-user basis. Once 
              the plugin authenticates a user and has filled in any optional information 
              fields (such as full name, description, administrator status, etc.), 
              pGina regains control and continues with the login process.
            <p> Depending on how pGina is configured, a few different things can 
              happen. For example, in classrooms and labs, we generally enforce 
              a default profile and do not save changes that are made to a profile 
              while logged in. pGina is configured so that every time a user logs 
              in, he inherits a copy of the Default User profile. Therefore, pGina 
              first creates a local user account with the username and password 
              of the authenticated user, during which Windows gives the user a 
              copy of the Default User profile. Upon logging out, pGina will delete 
              both the local user and the corresponding profile, thereby removing 
              any changes and customizations the user may have made. Conversely, 
              in our faculty offices, we want users to be able to maintain a custom 
              profile, so we set up pGina not to delete the user or profile upon 
              logout.
            <p> pGina, through local user profile and settings management, tries 
              to make a system behave as though it were on a domain. pGina can 
              be configured in a variety of ways to make this happen -- through 
              profile management, user groups, administrator flags, and even password 
              management.
            <p> <b>What You Need</b>
            <p> To implement a similar framework in your environment, you must 
              have:
            <p> 
            <p> 1. An authentication service (for this example, I will use OpenLDAP)
            <p> 2. pGina and the LDAPAuth Plugin (available at: <b>http://pgina.cs.plu.edu</b>)
            <p> 3. A Windows 2000/XP machine with Administrative access for testing
            <p> <b>Installation</b>
            <p> The first thing to set up is on the server side. Setting up OpenLDAP 
              is well documented in other articles and resources, so for the sake 
              of brevity, I will assume you have a working schema that authenticates 
              <b>ldap_bind()</b> attempts. Other LDAP servers will work as well, 
              however, we use OpenLDAP because it is open source and freely available.
            <p> To begin, install the core of the new framework, pGina and the 
              LDAPAuth plugin. (As of this writing, the most current revision 
              of pGina is 1.3, so substitute the current revision accordingly.) 
              As a local administrator on the Windows machine, do the following:
            <p> 
            <p> 1. Ensure that the machine is <i>not</i> part of a domain; if 
              it is, remove it.
            <p> 2. Download and run <b>pGina130.exe</b>. This is a standard installation 
              routine, and for this example, the defaults should suffice. pGina 
              and an example plugin should now be installed.
            <p> 3. Download and run <b>ldapauth.exe</b> from the pGina Web site.
            <p> 
            <p> Again, this is a pretty standard installation; be sure that the 
              path for installation corresponds to the one you chose in step 2 
              (the default).
            <p> pGina and the LDAP plugin are now installed, but not configured. 
              Do <i>not</i> reboot until you have configured them.
            <p> <b>Plugin Configuration</b>
            <p> Unfortunately, as of this writing, the LDAP plugin does not have 
              a nice GUI configuration box. Run <b>regedit</b> (<b>Start-&gt;Run-&gt;"regedit"</b>) 
              and navigate to the <b>HKLM\SOFTWARE\pGina\ldapauth</b> key. Here 
              we will place the appropriate LDAP settings for authentication.
            <p> The LDAP plugin has a variety of options that should allow a fit 
              regardless of your schema configuration. For the sake of brevity, 
              I will discuss the basic settings necessary for this example, but 
              a complete list of the available options is on the pGina Web site. 
              Each of the following values should be added to the registry key 
              as strings:
            <p> 
            <p><b> ldapContext0</b> -- "dc=something,dc=here"
            <p> <b>ldapMethod</b> -- "1"
            <p> <b>ldapPrePend</b> -- "uid="
            <p> <b>ldapServer</b> -- "ourhostname.our.edu" <b>useSSL</b> 
              = "0"
            <p> 
            <p> The <b>ldapContext0</b> string indicates the LDAP context with 
              which the plugin should connect. <b>ldapMethod</b> indicates the 
              method of binding that should be used (see documentation on the 
              pGina Web site for other options). <b>ldapPrepend</b> is the string 
              to be pre-pended to the username. <b>ldapServer</b> is the server 
              to authenticate against. <b>useSSL</b> indicates whether the request 
              should be tunneled through SSL. For now, this example shows how 
              to set things up without SSL. Later, I will look at encrypting requests. 
              Reboot now and you should be able to log in as any valid LDAP user.
            <p> <b>Using SSL Tunneling</b>
            <p> To secure the LDAP authentication transaction, you can tunnel 
              the requests over SSL using a tool such as <b>stunnel</b> (<b>http://www.stunnel.org</b>) 
              on the UNIX end. Installation of <b>stunnel</b> is fairly straightforward. 
              After downloading and decompressing the latest version, run:
            <p> 
            <pre>
# ./configure
# make
# make install (as root)
</pre>
            During this process, you will be asked for information in order to 
            generate a security certificate. Alternatively, you can get a signed 
            certificate from a third party.
            <p> Ensure that <b>ldap</b> and <b>ldaps</b> are valid entries in 
              your /etc/services file (or equivalent for your flavor of UNIX). 
              You should have at least:
            <p> 
            <pre>
ldap         389/tcp
ldaps        636/tcp
</pre>
            Now you can start <b>stunnel</b> and tell it to redirect and decrypt 
            requests on the <b>ldaps</b> port to the <b>ldap</b> port:
            <p> 
            <pre>
stunnel -p [path to your certificate] -d ldaps -r localhost:ldap
</pre>
            For more information on <b>stunnel</b> and tunneling services over 
            SSL, see <b>http://www.stunnel.org</b>. Your UNIX machine should now 
            be set up to authenticate users via LDAP over SSL, so I'll move 
            on to setting up the Windows machine.
            <p> For LDAP tunneled through SSL to work correctly from the Windows 
              side, your SSL certificate must be signed by a third party. Or, 
              if you created a certificate (e.g., <b>cert.pem</b> when installing 
              <b>stunnel</b>), you must add that certificate to the trusted stores 
              on the Windows machine. (Thanks to Micah Cooper, author of the LDAPAuth 
              plugin, for instructions on how to do this):
            <p> 
            <p> 1. Obtain the public key certificate. This is the last section 
              of text from your <b>cert.pem</b> file.
            <p> 2. As an administrator, double click on the certificate file.
            <p> 3. Select "Next".
            <p> 4. Select "Place all certificates in the following store".
            <p> 5. Select "Browse".
            <p> 6. Check the "Show physical stores" box.
            <p> 7. Expand "Trusted Root Certification Authorities" and 
              then highlight "Local Computer".
            <p> 8. Hit "OK", and all is well.
            <p> 
            <p> Your Windows machine is now ready for authenticating against your 
              LDAP server over SSL, but you still need to tell the LDAP plugin 
              to do so by changing the <b>useSSL</b> registry entry to a "1". 
              (Micah has provided some very good guidelines for testing LDAP over 
              SSL on the pGina Web site if you run into problems.)
            <p> <b>pGina Configuration</b>
            <p> A GUI configuration tool is available to facilitate changing the 
              behavior of pGina. After installation, it should be available in 
              your Start menu under "pGina" as "Configure". 
              Running this tool allows you to configure and test either a plugin 
              or pGina. Click the "Configure pGina" button, and locate 
              your installation of <b>pGina.dll</b>. This will bring up the GUI 
              tool shown in Figure 3. Here are the available options.
            <p> The first few settings are string values, some of which may be 
              blank.
            <p> 
            <p> Plugin -- This should contain the full path to the selected 
              pGina plugin.
            <p> Maps -- In this box, you can specify login time drive-&gt;directory 
              mappings. So, if you were running a Samba file server (or other 
              file server) and wanted the user's home directory mapped to 
              drive X on login, you would put <b>X:\\hostname.for.share\%username%</b> 
              here. Multiple entries may be used by separating each with semicolons.
            <p> MSGina -- For GINA chaining. Some people already use custom 
              GINAs for other interfaces, and pGina can dynamically chain to them 
              by inserting their paths here.
            <p> 
            <p> The remaining settings are simply 0- or 1-bit style flags.
            <p> 
            <p> Debug Output -- Dump text to <b>C:\pgina_debug[????].txt</b> 
              containing debug information. This file will be requested from you 
              should you report a bug or problem. This file may contain usernames 
              and passwords, which should be edited out prior to sending them.
            <p> Keep Profiles -- This setting indicates whether pGina should 
              keep individual user profiles from one login to the next. By default 
              this is 0; if set to 1, then Force Local should also be turned on.
            <p> Passthru Mode -- When this option is turned on, pGina will 
              not do anything. It will still be loaded and active, but will pass 
              all information and calls to the MSGina specified earlier.
            <p> Allow Locking -- Toggles the ability to lock the workstation 
              with CTRL+ALT+DEL while logged in.
            <p> Map Admins -- When this option is turned off (default), pGina 
              will not try to map things in the "Maps" setting if the 
              authenticated user is a local administrator.
            <p> Button Action -- Toggles the action/caption for the button 
              on the login screen.
            <p> Force Local -- Forces login of a user if a plugin user and 
              the local user have the same username (regardless of password similarity/difference). 
              When combined with Keep Profiles, this can allow a user to maintain 
              a custom local profile.
            <p> <b>Recommendations and the Future of pGina</b>
            <p> I recommend reading the Technical Manual available on the pGina 
              Web site for further pGina details and explanation of the different 
              options. In the future, pGina promises to include a "roaming 
              profile"-like functionality that allows for pseudo-roaming 
              profiles (stored on a Samba share, or other remote media), along 
              with other features and fixes. I encourage you to explore the options 
              and configuration that work best for you, then roll your own installation 
              utility (e.g., Spoon Installer) to ease installation across your 
              enterprise (or through ghosting utilities, etc.).
            <p> Remember, pGina is GPL'd, so you can customize the login 
              screen (see Figure 4), display your organization's logo or 
              text, as well as other things. pGina Project information is also 
              available on SourceForge at:
            <p> 
            <pre>
http://www.sourceforge.net/projects/pgina
</pre>
            For more information on the available plugins, or on developing your 
            own, check out the pGina Web site or email me.
            <p> <b>Resources</b>
            <p> Michael Wright, Pacific Lutheran University: pGina Co-Developer
            <p> Microsoft Support Article on "Setting up a custom default 
              user profile": <b>http://support.microsoft.com/search/ \<br>
              preview.aspx?scid=kb;en-us;Q305709</b>
            <p> pGina and pGina Plugin Documentation: <b>http://pgina.cs.plu.edu</b>
            <p> GINA Documentation: <b>http://msdn.microsoft.com/library/en-us/security/security/winlogon_and_gina_start_page.asp</b>
            <p> Micah Cooper, Miami University Ohio: Author of the LDAPAuth pGina 
              plugin
            <p> Jeremy C. Sparks, Willamette University
            <p> <i>Nathan Yocom has worn many hats in the IT industry during the 
              past eight years. For the past two years, he has worked as the Technical 
              Support Specialist for the Department of Computer Science and Engineering 
              at Pacific Lutheran University. His experience programming in both 
              UNIX and Windows environments, combined with his systems administration 
              experience, has lent itself well to projects such as pGina, which 
              work to promote interoperability within a heterogeneous environment. 
              He can be contacted at: <b>yocomnw@plu.edu</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
