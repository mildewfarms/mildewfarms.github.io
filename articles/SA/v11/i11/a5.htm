<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i11: Replacing Microsoft IIS Webserver and SQL Database in a Web Publishing Environment

</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/nov2002.tar"><b class=codeListing>nov2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a5.gif" width="200" height="174" align="right">Replacing 
              Microsoft IIS Webserver and SQL Database in a Web Publishing Environment</b></h1>
            <p> <i>Arnie Miles</i>
            <p> At a previous job, I worked with 
              a Web site administrator who'd been newly hired to develop 
              and enhance the content of our college Web site (at Hood College 
              in Frederick, MD), transforming it into an inexpensive yet powerful 
              marketing tool. The new site administrator, who would be choosing 
              new servers, operating systems, databases, and Web server software, 
              came from a production shop with a strong Microsoft background, 
              using Cold Fusion with MS SQL Server back ends on Windows NT servers.
            <p> The new site administrator was used to her customers connecting 
              directly to network shares to install and test new content live 
              on the Cold Fusion server without the need for FTP or the command 
              line, and she wanted to replicate that environment. Our IT staff, 
              however, had concerns with the Microsoft products the administrator 
              proposed and she agreed to consider alternatives, provided they 
              met her needs. With a little systems analysis, research, and some 
              well-timed demonstrations, we met her requirements and increased 
              security, while keeping the cost lower than an alternative solution. 
              Our solution involved Linux, Samba, MySQL, and Cold Fusion.
            <p> Other forces pressed for a Microsoft solution, as well. The departments 
              on campus were then responsible for creating their own Web content 
              under the standards and guidelines set by the new Web site administrator. 
              Although these users were willing to learn a GUI tool for Web site 
              creation, they were generally resistant to FTP. The new Cold Fusion 
              environment would require live, on-server testing of all changes 
              made to Web pages. On the other hand, the users were familiar with 
              logging into a Microsoft domain and using network shares. These 
              users wanted a solution that looked like the Microsoft products 
              they were used to. The only element of the setup that was not negotiable 
              was the use of Cold Fusion with some sort of relational database 
              back end. Other technologies for dynamic Web page creation could 
              exist on the server, provided Cold Fusion was installed.
            <p> <b>The Platform-Hardware and Applications</b>
            <p> To start, I confirmed that a version of Cold Fusion was available 
              for Linux. I wanted to keep my venerable but reliable old Alphas, 
              but found that Cold Fusion for Linux does not run on Alpha hardware. 
              Thus, an Intel box became necessary. When I was sure I had a viable 
              platform to support Cold Fusion, I set up an Intel computer running 
              Red Hat 7.2 and Samba 2.2.3a.
            <p> Cold Fusion is a powerful platform for rapid development of Web 
              sites. We had concerns about committing to a proprietary environment, 
              but the existence of Cold Fusion on the server does not impact the 
              use of any other non-proprietary technologies. Even with Cold Fusion 
              installed, your PHP and Perl scripts will run just fine. I just 
              installed Cold Fusion and turned it over to the Web site administrator 
              to handle. She connected to it via her Web browser and configured 
              it in minutes. The default installation provided everything she 
              needed.
            <p> Although Apache is generally the standard among Linux users, Hood 
              College was using Sun's iPlanet Web server on a Tru64 UNIX 
              platform, and decided to stay with iPlanet. Either Web server solution 
              would meet our needs. When you set up a Web server, you obviously 
              want your clients to feel free to play, which means you'll 
              need an area that is not available to the general public -- 
              like an intranet. I won't go into the details of iPlanet configuration 
              or Apache's httpd.conf in this article, except to say that 
              you must set up the Web Server with either a special directory to 
              act as an intranet, or you must turn on home directories for serving 
              Web pages and limit them to the intranet. The decision you make 
              here will affect the settings you use when you create your "add 
              user script" command in smb.conf, which I will cover later 
              in the article.
            <p> <b>Samba and the Domain Controller</b>
            <p> At the college, there was already a surprisingly stable Windows 
              NT domain in place, on which all users automatically had accounts. 
              Thus, it was logical to create a Samba member server and introduce 
              it to the existing domain. Adding your Samba server to an existing 
              NT Domain removes all additional administrative work.
            <p> Samba 2.2.3a comes bundled with Red Hat 7.2. Hood College had 
              used Windows NT for several years before their migration to Win2K, 
              and the Windows systems administrators had the account administration 
              under control. Faculty and staff accounts were handled manually 
              at the Windows Primary Domain Controller as employees are hired 
              or leave. Since all of the available customers already had Windows 
              domain accounts, it seemed pointless to me to duplicate their efforts, 
              so I chose to make my Samba server a member of the existing faculty/staff 
              domain. Setting up the server was a matter of writing a proper smb.conf 
              file, adding the server to the domain as a member, and then introducing 
              the server to the domain.
            <p> <b>Samba Configuration</b>
            <p> There are two sections to the smb.conf file. The first section 
              is Global Settings and contains the directives for the server itself. 
              The second section is called Share Definitions. This defines the 
              different shares to which the server allows connections. Syntax 
              for smb.conf uses both <b>#</b> and <b>;</b> as comments -- 
              the <b>#</b> comments are descriptions, and the <b>;</b> comments 
              are example lines that are available to uncomment and edit for use.
            <p> To act as a member server of an existing Windows domain, the following 
              lines must exist in the Global Settings section of smb.conf:
            <p> 
            <pre>
workgroup = &lt;Windows Domain Name&gt;
server string = &lt;Name of this server&gt;
security = domain
password server = &lt;comma-delimited list of domain controllers, or *&gt;
encrypt passwords = yes
domain controller = &lt;fully qualified Domain name of PDC&gt;
wins server = &lt;ip address of existing WINS server&gt;
</pre>
            All these lines are required to get connected as a member server of 
            a Windows domain. This configuration passes all authentication responsibilities 
            off to the Windows PDC or BDC. However, all users are still required 
            to have a local machine account to access files, which is accomplished 
            by adding this line to the smb.conf Global Settings section:
            <p> 
            <pre>
add user script = &lt;script to run when user is added to system&gt;
</pre>
            This line allows Samba to run any predetermined script whenever it 
            sees a user connect who is authenticated by the Windows domain, but 
            does not have a local machine account. It accepts the variable <b>%u</b> 
            to represent the username passed to it.
            <p> The simplest entry would be:
            <p> 
            <pre>
add user script = useradd -c "Account from PDC" -s /bin/false \
  -d /&lt;home_directory_root&gt;/%u -m -n -g webwriters %u
</pre>
            Note that a Samba user authentication through the domain doesn't 
            require local login privileges, so it is not necessary to assign a 
            password. You do need to set up username and group assignments here. 
            In this example, the <b>-c</b> switch provides an entry for a comment 
            in <b>passwd</b>, and the <b>-s</b> switch is used to turn off local 
            login by setting the shell to <b>/bin/false</b>. The <b>-d</b> sets 
            the default home directory. We want to set up an area for our clients 
            to access the Web server, so this could be the root of your intranet. 
            Alternatively, this could be a standard home directory if you want 
            your clients to work from there. The -m creates a home directory, 
            and the <b>-n</b> turns off Red Hat's default behavior of creating 
            a group with the same name as the user. The <b>-g</b> switch puts 
            all the users who connect via Samba into the same group, in this case 
            <b>webwriters</b>.
            <p> To extend the functionality provided by <b>useradd</b>, you can 
              add a fancy shell or Perl script to your system that adds the user, 
              sets up various features, and then sends the user (or you) an email. 
              The companion to <b>add user script</b> is <b>delete user script 
              = &lt;command&gt;</b>, which will execute <b>&lt;command&gt;</b> 
              whenever someone without an account on the Windows domain tries 
              to connect to a share. Be very careful with this entry if you decide 
              to use it.
            <p> That's it for the required entries for the Global Settings 
              section. Now we need to define the shares. We want to provide an 
              area in which clients can work and test Web pages within the environment 
              that the pages will ultimately appear on the Web server. In this 
              example, the Web site administrator is ultimately responsible for 
              what appears on the main Web site. The departments are creating 
              pages, and presumably they will want to test the pages for functionality, 
              show them to their peers and supervisors, and show them to the Web 
              site administrator before they are posted on the official Web site. 
              Of course, some trusted users can be set up to work live on the 
              Web Site. Certain power users, as well as the Web site administrator, 
              may want this level of access.
            <p> The default settings for <b>[homes]</b> should successfully get 
              you access to your home directory. If you have configured Apache 
              to allow Web pages to be served from home directories to the intranet, 
              you're done setting up your users. If you've set up a 
              separate intranet area in which they can work, you can set up a 
              matching <b>[intranet]</b> share as follows:
            <p> 
            <pre>
[intranet]
 comment = Intranet Playground
 path = /path/to/intranet/root/
 valid users = @webwriters arnie
 force create mask = 755
 force directory mask = 755
</pre>
            This stanza of smb.conf will make available a share called "intranet" 
            to all members of the group "webwriters" and the user "arnie". 
            The "@" sign denotes group names, and a name with no "@" 
            denotes a username. By default, it is not a public share, so it requires 
            a password to connect to it.
            <p> The <b>force create</b> and <b>force directory masks</b> will 
              force your users' files to have permissions set to 755. In 
              this example, everyone is playing in a common sandbox. All members 
              of the "webwriters" group have equal read access to all 
              the files, but only the creator of the files can edit them. This 
              is good in an environment where users aren't particularly savvy 
              to permissions, and no files will be created without the correct 
              permissions for Web serving set. This allows the users to work safely, 
              and provides the Web site administrator with sufficient rights to 
              move the files into the main Web server.
            <p> To set up rights for the Web site administrator and certain other 
              users to access the live Internet site, add a stanza to smb.conf 
              that looks like this:
            <p> 
            <pre>
[http]
 comment = Live Web Site
 path = /var/www/
 valid users = arnie bruce christine
 force create mask = 755
 force directory mask = 755
</pre>
            This example is pretty basic. Users arnie, bruce, and christine all 
            have access to the entire contents of the Web site, and no one else 
            does. The forced masks are optional.
            <p> <b>Testing and Starting Samba</b>
            <p> You should now have a functional smb.conf file. Running the command 
              <b>testparm</b> will test the basic configuration of your smb.conf. 
              It will point out spelling errors and other simple mistakes. If 
              your smb.conf file is okay, you will see a listing of the parameters 
              you have set and the shares you have defined.
            <p> In Red Hat 7.2, the smb startup script is in /etc/rc.d/init.d. 
              It accepts the arguments <b>Start</b>, <b>Stop</b>, <b>Restart</b>, 
              and <b>Status</b>. Therefore, running <b>/etc/rc.d/init.d/smb Start</b> 
              should get everything going. When this step is complete, you can 
              connect to your Samba server from a local client. To do so, run:
            <p> 
            <pre>
smbclient /yourserver.domain.name/sharename -U username
</pre>
            where <b>yourserver.domain.name</b> is the fully qualified domain 
            name of your server as it appears in the local DNS tables, and the 
            <b>sharename</b> is a share that you have defined in smb.conf. Try 
            this with your username; if it fails, be sure you are using a good 
            machine name, or try <b>localhost</b> instead of the machine name.
            <p> <b>Introducing the New Member Server to the Domain</b>
            <p> Samba services must be shut down before introducing the server 
              as a member of the domain. This is a two-step process. First, the 
              server must be given a machine account on the Domain by the Windows 
              administrator using Server Manager. Second, with Samba turned off, 
              you must run:
            <p> 
            <pre>
smbpasswd -j DOMAINNAME
</pre>
            This should result in a line that says <b>Joined domain DOMAINNAME</b>. 
            You can now restart Samba and begin serving up pages. This is also 
            a good time to add Samba to your startup scripts.
            <p> From any Windows computer, you can now click on "Start|Run" 
              and type in <b>\\&lt;servername.domain.name&gt;\&lt;share&gt;</b> 
              to connect to your new Samba Server, just like you would with a 
              standard Windows fileserver. If your Web developers are using Macs, 
              you can still connect to your Samba shares. In OS X, click on "Go|Connect 
              to Server" and put in <b>smb://&lt;server.domain.name&gt;/&lt;share&gt;</b> 
              in the Address block. You'll be greeted with a share mapping 
              on your desktop.
            <p> <b>The Database</b>
            <p> The final step in eliminating Windows servers from your solution 
              is to replace the MS SQL server with MySQL. Cold Fusion developers 
              are not alone in their use of a database to hold content for dynamic 
              pages and general content management. I like to set up my MySQL 
              server on a different server than the one hosting the Web pages, 
              which gave me an excuse to break out one of the old Alphas. MySQL 
              is bundled with Red Hat and comes with excellent documentation. 
              Setting up the MySQL server itself is beyond the scope of this article, 
              but there are several good tools for administering the database 
              remotely from Windows.
            <p> Once the database was installed with its own root password, I 
              created an account for the Web site administrator with full rights 
              and gave her a copy of MySQL Front, which is available at <b>http://www.anse.de/mysqlfront/</b>. 
              This program seamlessly connects to a remote (or local) MySQL server 
              from Windows. The Web site administrator, an MS SQL server fan, 
              immediately began using this tool. She used her Cold Fusion Administrative 
              tools, made one built-in connection to the MySQL database on the 
              remote server, and was in business. Of course, this database is 
              now available for all "webwriters" to use, so they can 
              produce PHP or Perl scripts to serve up whatever data they have 
              to share.
            <p> <b>Conclusion</b>
            <p> With this setup, Hood College avoided the extra licensing costs, 
              security risks, and administrative headaches of setting up extra 
              MS IIS and SQL servers, while still providing the full set of expected 
              features to a Web site administrator and her clients, who were used 
              to Microsoft solutions. The only piece of this solution that is 
              still Microsoft-driven is the existing Primary Domain controller, 
              onto which we piggy-backed for authentication.
            <p> <b>Resources</b>
            <p> Samba: <b>http://www.samba.org</b>
            <p> MySQL Front: <b>http://www.anse.de/mysqlfront/</b>
            <p> MySQL: <b>http://www.mysql.com</b>
            <p> Red Hat Linux: <b>http://www.redhat.com</b>
            <p> Cold Fusion: <b>http://www.macromedia.com/</b>
            <p> The Samba Project Documentation: <b>http://us1.samba.org/samba/docs/Samba-HOWTO-Collection.html</b>
            <p> Samba Pocket Reference, Robert Eckstein, David Collier-Brown and 
              Peter Kelly, O'Reilly &amp; Associates, Inc. April 2001
            <p> 
            <p> Special thanks to the current UNIX/Linux Administrator at Hood 
              College, Bruce Embrey, who assisted in the testing of some modifications 
              to my original installation for this article; Hood College's 
              Web Site Administrator Christine Brown, for helping define this 
              installation; Steve Moore at Georgetown University for editorial 
              assistance; and to Jeff Whipp and Brian Petrewicz at Hood College 
              for providing a Windows Domain stable enough for me to do this testing 
              with, and for trusting me with their domain while I worked.
            <p> <i>Arnie Miles is currently a systems administrator for the Advanced 
              Research Computing Center of Georgetown University, where he provides 
              various IT support for special research projects in the Chemistry 
              and Biology fields, including Beowulf cluster administration, open 
              source database design and administration, data-driven Web site 
              design, Samba server administration, training, and whatever else 
              he can get his hands on. He was formerly the End User Computing 
              Manager and Linux/UNIX Systems Administrator for Hood College. He 
              holds a Masters of Computer Science with a Concentration in Information 
              Technology from Hood College and a Bachelor's of Business Administration 
              from Columbia College.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
