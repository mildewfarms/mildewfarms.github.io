<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i02: SolarisTM Patch Levels</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a9_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2002/feb2002.tar"><b class=codeListing>feb2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a9.gif" width="200" height="174" align="right">Solaris<sup>TM</sup> 
              Patch Levels</h1>
            <p> <i>Thomas Knox</i>
            <p> Keeping the latest Solaris patches installed is a big step towards 
              securing your machine, and to that end, I have written a couple 
              of scripts to help automate the patching process. These scripts 
              have been tested on Solaris 2.6, 2.7, and 2.8. Furthermore, (<b>http://www.sans.org/</b>) 
              and CERT (<b>http://www.cert.org/</b>) are useful in keeping on 
              top of any new security holes that are discovered.
            <p> <b>The Automation Setup</b>
            <p> The first thing to do is to install the Sun <b>patchdiag</b> tool 
              onto your servers. I like to install it into <b>/usr/local/patchdiag</b> 
              so I always know where it is, no matter what system I might be on. 
              The <b>patchdiag</b> tool can be found at:
            <p> 
            <pre>
http://sunsolve.Sun.COM/private-cgi/show.pl?target=resources/patchdiag
</pre>
            and the most recent version (as of this writing) is 1.0.4.
            <p> Please substitute the URL for your local SunSolve mirror in place 
              of <b>sunsolve.sun.com</b>. See:
            <p> 
            <pre>
http://sunsolve.Sun.COM/private-cgi/show.pl?target=link
</pre>
            for the list of mirrors.
            <p> After you have downloaded the <b>patchdiag</b> tool, install it 
              into a uniform place. All of my scripts assume <b>/usr/local/patchdiag</b>; 
              change yours accordingly:
            <p> 
            <pre>
cd /usr/local
zcat patchdiag-1.0.4.tar.Z | tar -xvf -
ln -s patchdiag-1.0.4 patchdiag
cd patchdiag
./patchdiag_setup
</pre>
            I also make a user (called "patches") who owns the <b>patchdiag</b> 
            directory on each machine. This account is used to automate pushing 
            the <b>patchdiag.xref</b> file to all of the servers:
            <p> 
            <pre>
cd /usr/local
chown -R patches patchdiag-1.0.4
chmod 700 patchdiag-1.0.4
</pre>
            <b>The Automation Process</b>
            <p> The first script (Listing 1) will go out to the SunSolve FTP site 
              and download the current <b>patchdiag.xref</b> file for system analysis. 
              After downloading it, it will push it to all of your other servers.
            <p> Replace <b>host1 login_id password</b> ... <b>hostX login_id password</b> 
              with your server names and the login information (i.e., <b>sunbox1 
              patches patchpw /usr/local/patchdiag</b>). Since this script will 
              have live account information, it is a good idea to keep it owned 
              by root with permissions 700, and in a private directory.
            <p> I initially used <b>ncftpget</b> to FTP the <b>patchdiag.xref</b> 
              file, but Sun changed how the file was stored (it is now listed 
              as a 0 byte file), and <b>ncftpget</b> will no longer retrieve this 
              file, even with command-line arguments to "force" a <b>RETR</b>.
            <p> This script was designed to run as a cron entry. How frequently 
              you check your patch levels should help you determine how often 
              to run this script. Running it at off-peak hours will endear you 
              to the Sun administrators.
            <p> The next phase of automation involves determining which patches 
              need to be downloaded, retrieving them, and prepping them for installation. 
              This script (Listing 2) uses <b>wget</b>, available from:
            <p> 
            <pre>
http://www.gnu.org/software/wget/wget.html
</pre>
            or precompiled from:
            <p> 
            <pre>
http://www.sunfreeware.com/
</pre>
            Follow the instructions provided by your download of <b>wget</b> and 
            install it.
            <p> Replace <b>my_login_id</b> with your SunSolve login ID, and <b>my_passwd</b> 
              with your SunSolve password. Again, because Listing 2 contains live 
              passwords, keep it in a private directory with permissions 700.
            <p> <b>patch.ignore</b> is a list of patch IDs that you do not want 
              to get. For example, if you're running a headless Solaris 8 
              server, you probably do not want patch 108576 to support Expert3D 
              IFB Graphics. List the patches without revision numbers. A <b>patch.ignore</b> 
              file that contained the following:
            <p> 
            <pre>
108569
108576
108864
</pre>
            would not download patches 108569, 108576, or 108864.
            <p> If your server is behind a proxy, add the flags:
            <p> 
            <pre>
--proxy=on
--proxy-user=my_id
--proxy-passwd=my_passwd
</pre>
            to the <b>wget</b> statement above, thus supplying your correct proxy 
            user id and password. Be sure to add the line:
            <p> 
            <pre>
http_proxy = http://my.company.proxy:port/
</pre>
            to your <b>~/.wgetrc</b> file, or define the environment variable 
            <b>http_proxy </b>in the script (e.g., <b>http_proxy=http://proxy.company.com: 
            \ 8080/; export http_proxy</b>)
            <p> This script will get all current patches for your system that 
              were not explicitly excluded by the patch.ignore file, and their 
              associated readme files. It will also expand the patches for easy 
              installation. This script can also be run from cron, preferably 
              after the first one runs.
            <p> <b>Conclusion</b>
            <p> Now that the patches have been placed on your systems, it is up 
              to you to determine system applicability and install them by hand. 
              It would be easy to also automate the patch installation. A simple 
              <b>i='ls -d 1*-*'; for j in $i;do;patchadd $j;done</b> 
              would work well. However, it is highly recommended not to do so. 
              Rather review each patch's <b>.readme</b> and <b>PATCH-ID/README</b> 
              files to determine applicability, special requirements, and whether 
              a specific order is needed for installation.
            <p> Using these scripts on a regular basis on my servers has enabled 
              me to be much more proactive in keeping my systems up to date and 
              preventing problems before they become major issues. It has also 
              reduced the usual hassle in finding new patches and retrieving them, 
              thus saving my time for other tasks.
            <p> <i>Thomas Knox has been programming for 19 years and working as 
              a UNIX adminfor 6. He can be reached at : <b>tom@vushta.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
