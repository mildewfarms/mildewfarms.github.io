<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i10: Log Management Using Apache::DBILogger</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2002/oct2002.tar"><b class=codeListing>oct2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a2.gif" width="200" height="174" align="right">Log 
              Management Using Apache::DBILogger</b></h1>
            <p> <i>Chip Castle</i>
            <p> Many log-analyzer applications are available on the Web, but most 
              are limited to specific predefined types of functionality. Many 
              of these applications gather file transfer specifics from Apache's 
              flat-file access log, which can confine the end user to a narrow 
              scope of data-mining activities. I needed a much more flexible solution, 
              which would allow me to add extra functionality in a scalable, customizable 
              fashion. Thus, I installed the Apache::DBILogger module, which logs 
              all incoming http requests on your server to a MySQL database.
            <p> <b>Apache::DBILogger Configuration</b>
            <p> I installed Ask Bjoern Hansen's Apache::DBILogger module, 
              available from CPAN (<b>http://cpan.perl.org</b>), which stores 
              all incoming http requests that Apache handles into a MySQL database 
              rather than the conventional Apache access log. For this solution 
              to work seamlessly, be sure Apache is configured with the mod_perl 
              module (available at: <b>http://www.apache.org</b>). I usually use 
              the script available at: <b>http://www.apachetoolbox.org</b> to 
              help me configure Apache with all the modules I've selected, 
              including downloading all necessary files to complete the setup.
            <p> Once Apache has been configured with mod_perl, you can install 
              Apache::DBILogger, which can easily be done as root by issuing the 
              following command at the shell:
            <p> 
            <pre>
# perl -MCPAN -e 'install Apache::DBILogger'
</pre>
            The module and all of its dependencies, which include Date::Format 
            and DBI, should install without a hitch. If they don't, simply 
            download them from CPAN and install them by hand.
            <p> <b>Database Prep Work</b>
            <p> The next step is to create a table for storing data. You'll 
              need MySQL, which is available at <b>http://www.mysql.com</b>. Retrieve 
              the latest stable RPM or tarball, depending on your system and installation 
              preference. On my system, I can start the MySQL server by becoming 
              root and issuing the following command:
            <p> 
            <pre>
# /usr/bin/safe_mysqld &amp;
</pre>
            Next, log into the MySQL client console and create the httpdlog database 
            and the requests table as follows:
            <p> 
            <pre>
mysql&gt; CREATE DATABASE httpdlog;
mysql&gt; \u httpdlog;
mysql&gt;  CREATE TABLE requests (
server varchar(127) DEFAULT '' NOT NULL,
bytes mediumint(9) DEFAULT '0' NOT NULL,
user varchar(15) DEFAULT '' NOT NULL,
filename varchar(200) DEFAULT '' NOT NULL,
remotehost varchar(150) DEFAULT '' NOT NULL,
remoteip varchar(15) DEFAULT '' NOT NULL,
status smallint(6) DEFAULT '0' NOT NULL,
timeserved datetime DEFAULT '0000-00-00 00:00:00' NOT
NULL,
contenttype varchar(50) DEFAULT '' NOT NULL,
urlpath varchar(200) DEFAULT '' NOT NULL,
referer varchar(250) DEFAULT '' NOT NULL,
useragent varchar(250) DEFAULT '' NOT NULL,
usertrack varchar(100) DEFAULT '' NOT NULL,
KEY server_idx (server),
KEY timeserved_idx (timeserved) );
</pre>
            Whew! That was a lot of work and could certainly be an error-prone 
            process, so I recommend using the example SQL table definition in 
            the POD documentation for Apache::DBILogger, found by issuing the 
            following command:
            <p> 
            <pre>
$ perldoc Apache::DBILogger
</pre>
            You can store the table definition in a file for later use and run 
            a command from the shell to create the database and table in MySQL. 
            For example, I stored the commands in a file called httpdlog.sql and 
            issued the following command as root:
            <p> 
            <pre>
# mysql httpdlog -p &lt; httpdlog.sql
&lt;enter password&gt;
</pre>
            Once you have the proper table definition for storing data, you can 
            configure Apache to send the data there instead of the access log.
            <p> <b>Apache Configuration</b>
            <p> On my system, Apache is located in /usr/local/apache/, so I would 
              edit /usr/local/apache/conf/httpd.conf and add the following directives 
              at the beginning of the file:
            <p> 
            <pre>
PerlModule Apache::DBI
PerlModule DBI
PerlModule Apache::DBILogger

# Place this in your Apache's httpd.conf file
PerlLogHandler Apache::DBILogger

PerlSetVar DBILogger_data_source    DBI:mysql:httpdlog
PerlSetVar DBILogger_username       httpduser
PerlSetVar DBILogger_password       secret
PerlSetvar DBILogger_table          requests
</pre>
            For the configuration changes to take effect, restart Apache like 
            so:
            <p> 
            <pre>
# /usr/local/apache/bin/apachectl graceful
</pre>
            I prefer passing the "graceful" argument to apachectl because 
            it will clearly restart Apache if it's already running, or effectively 
            start Apache if no processes currently exist. You can test this setup 
            thus far by firing up your favorite browser and accessing various 
            documents on your site. First, make several accesses to ensure you 
            have data in the new table. Second, log into MySQL and query the database 
            as follows to confirm data is being stored as expected:
            <p> 
            <pre>
# mysql httpdlog -p
&lt;enter password&gt;
mysql&gt; SELECT * FROM requests;
</pre>
            If you see data, congratulations! You can now start using the script 
            described below. In addition to the modules in the script, the DBD::mysql 
            module is necessary for communicating with the MySQL server. This 
            module can easily be installed by issuing the following command as 
            root:
            <p> 
            <pre>
# perl -MCPAN -e 'install Bundle::DBD::mysql
</pre>
            <b>Code Talk</b>
            <p> The next step involves the script responsible for performing the 
              querying and reporting duties. Although the script could've 
              been written in any language capable of connecting to MySQL, such 
              as PHP, Python, or many others, I chose to write it in Perl, a long-time 
              personal favorite for this type of task:
            <p> 
            <pre>
  1 #!/usr/bin/perl
  2 #
  3 # Author:
  4 # Chip Castle
  5 # Chip Castle Dot Com, Inc.
  6 # http://www.chipcastle.com
  7 # chip@chipcastle.com
  8 #
  9 $|=1;
 10
 11 #use strict;
 12 #use diagnostics;
 13 use DBI ();
 14 use CGI qw(:standard center end_table);
 15 use CGI::Carp qw(fatalsToBrowser);
 16 use URI::Escape;
 17
 18 use constant DSN              =&gt; 'dbi:mysql:httpdlog';
 19 use constant DB_TABLE         =&gt; 'requests';
 20 use constant DB_AUTH          =&gt; 'httpduser:secret';
 21 use constant BG_COLOR         =&gt; 'white';
 22 use constant TABLE_BG_COLOR   =&gt; '#cccc99';
 23 use constant TABLE_DEF        =&gt; '&lt;TABLE BORDER="1" CELLPADDING="7" CELLSPACING="1"&gt;';
 24 use constant LIMIT            =&gt; 10;
 25 use constant TITLE            =&gt; 'Access Log Viewer';
 26
 27 print header;
 28
 29 &amp;display_form;
 30 &amp;display_report;
 31 print('&lt;/center&gt;' . end_form() . end_table() . end_html());
 32
 33 sub display_form {
 34     my %labels = (
 35       "Choose a report"       =&gt; "",
 36       "Total hits"            =&gt; "SELECT COUNT(*) FROM requests",
 37       "Number of bytes transferred"  =&gt; "SELECT SUM(bytes) FROM requests",
 38       "Most popular url's"    =&gt; "SELECT filename,COUNT(*) as count FROM requests GROUP BY filename 
                                      ORDER BY count DESC",
 39       "Broken links"          =&gt; "SELECT filename,COUNT(filename) FROM requests WHERE status=404 
                                      GROUP BY filename",
 40       "Most popular MIME type served" =&gt; "SELECT contenttype,COUNT(*) as count FROM requests GROUP 
                                               BY contenttype ORDER BY count DESC",
 41       "Largest documents served"      =&gt; "SELECT filename,bytes FROM requests ORDER BY bytes DESC",
 42       "Most recently served url's"    =&gt; "SELECT filename, timeserved FROM requests ORDER BY 
                                               timeserved DESC",
 43     );
 44     my %reversed_labels = reverse %labels;
 45     print start_html(-bgcolor=&gt;"${\BG_COLOR}", -title=&gt;"${\TITLE}"),
 46           '&lt;center&gt;',
 47           br,
 48           br,
 49           b(font({-size=&gt;"+2", -face=&gt;"arial,helvetica"}, "${\TITLE}")),
 50           br,
 51           br,
 52           br,
 53           br,
 54           start_form(-action=&gt;url()),
 55           font({-size=&gt;"+1", -face=&gt;"arial,helvetica"}, "Select Report:"),
 56           &amp;spaces(3),
 57           popup_menu(
 58             -name    =&gt; 'canned_report',
 59             -values  =&gt; [ values %labels ],
 60             -default =&gt; "",
 61             -labels  =&gt; \%reversed_labels,
 62           ),
 63           &amp;spaces(3),
 64           font({-size=&gt;"+1", -face=&gt;"arial,helvetica"}, "or"),
 65           br,
 66           br,
 67           font({-size=&gt;"+1", -face=&gt;"arial,helvetica"}, "Enter SQL Query:"),
 68           &amp;spaces(3),
 69           textfield(-name=&gt;'sql', -size=&gt;75),
 70           &amp;spaces(3),
 71           br,
 72           br,
 73           submit(-name=&gt;'submit', value=&gt;'Display Results'),
 74           br,
 75           br;
 76 }
 77
 78
 79 sub display_report {
 80     my $sql = param('canned_report') ne '' ? param('canned_report') :
 81               param('sql') ne '' ? param('sql') : "SELECT * FROM requests";
 82
 83     my $num = defined param('num') ? param('num') : 0;
 84     my $limit_sql = $sql . " LIMIT $num, ${\LIMIT}";
 85
 86     my ($dbh, $ra, $row_count, $results, $sth);
 87
 88     $dbh = DBI-&gt;connect(DSN, split ':', DB_AUTH, {-RaiseError=&gt;1}) or die("ERROR: $DBI::errstr");
 89     eval {
 90         $ra = $dbh-&gt;selectall_arrayref($sql);
 91         $row_count = scalar(@$ra);
 92         $sth = $dbh-&gt;prepare($limit_sql);
 93         $sth-&gt;execute();
 94     };
 95     die($@) if ($@);
 96
 97     $results = "result" . ($row_count &gt; 1 ? 's' : '');
 98
 99     print hr({-width=&gt;"80%"}),
100           br,
101           br,
102           font({-face=&gt;"arial,helvetica"},
103           "Found $row_count $results for the following query: &lt;BR&gt;&lt;BR&gt;$limit_sql"),
104           br,
105           br,
106           ("${\TABLE_DEF}");
107
108     my $url = url() . '?sql=' . uri_escape($sql);
109     my $prev_url = $url . '?m=' . ($num - ${\LIMIT} &gt; 0 ? ($num - ${\LIMIT}) : 0);
110     my $next_url = $url . '?m=' . ($num + ${\LIMIT});
111     $prev_url = ($num + 1 - ${\LIMIT} &gt; 0) ?
112                 a({-href=&gt;$prev_url}, "&lt;&lt; Previous") . &amp;spaces(10) : '';
113     $next_url = ($row_count - $num &gt; ${\LIMIT}) ?
114                 a({-href=&gt;$next_url}, "Next &gt;&gt;") : '';
115     print &amp;get_nav_table($prev_url, $next_url);
116
117     print br, "${\TABLE_DEF}";
118     my $rows = 0;
119     while (my $rh = $sth-&gt;fetchrow_hashref()) {
120          print(Tr({-bgcolor=&gt;"${\BG_COLOR}"}, th([keys %$rh]) )) if $rows == 0;
121          $rows++;
122          my $curr_cell_color = ($rows % 2 == 1) ? "${\TABLE_BG_COLOR}" : "${\BG_COLOR}";
123          print(Tr({-bgcolor=&gt;$curr_cell_color}, td({-nowrap=&gt;1}, [values %$rh]) ));
124     }
125     print end_table, br, &amp;get_nav_table($prev_url, $next_url);
126
127     $sth-&gt;finish;
128     $dbh-&gt;disconnect if defined $dbh;
129 }
130
131 sub get_nav_table {
132     my ($prev_url, $next_url) = @_;
133
134     my $nav = '&lt;table border = "0" width = "80%"&gt;' .
135               Tr(td({-align=&gt;'left'}, [ font({-face=&gt;"arial,helvetica"}, $prev_url)]),
136                  td({-align=&gt;'right'}, [ font({-face=&gt;"arial,helvetica"}, $next_url)])) .
137               end_table();
138     return $nav;
139 }
140
141 sub spaces {
142     my $num = shift or 1;
143     my $spaces;
144     for (1..$num) { $spaces .= ' '; }
145     return $spaces;
146 }
147
</pre>
            Lines 1-16 cover pointing to the correct location of the Perl interpreter 
            on my system, turning off output buffering, and pulling in various 
            modules necessary to complete the task at hand. For performance reasons, 
            both strict and diagnostics modules should be commented out during 
            production use. However, they are an excellent resource for all of 
            my development tasks that aren't of the quick-and-dirty variety. 
            The DBI module allows the script to connect to MySQL and pass queries 
            to the database with ease. The CGI module provides various subroutines 
            for accessing variables via HTTP GET and POST methods, <b>header()</b> 
            for printing the proper "text/html" MIME content-type, and 
            numerous convenient HTML shortcut routines. CGI::Carp's <b>fatalToBrowser()</b> 
            subroutine provides the ability to redirect STDERR to STDOUT, so any 
            time the script calls <b>die()</b>, an error message is displayed 
            in the browser. URI::Escape, the last module pulled in, is necessary 
            for encoding the navigational hyperlinks to display next and previous 
            pages.
            <p> Lines 18-25 define several constants for the customization of 
              the script and the database connection. Note the DSN, DB_TABLE, 
              and DB_AUTH variables because they describe the name of the database 
              and table in addition to the username and password for accessing 
              them. If you created the httpdlog database and requests table as 
              in the above example, the only remaining task is to set the proper 
              username and password combination for your system in DB_AUTH.
            <p> Lines 27-31 are for printing the MIME header, which defaults to 
              "Content-type: text/html", as well as calling the subroutines 
              for displaying the HTML form and the report results. Since <b>display_form()</b> 
              and <b>display_report()</b> are only called in one place, I could 
              have eliminated the calls and declarations of these subroutines 
              to run in standard, sequential shell scripting style.
            <p> On lines 34-43 of <b>display_form()</b>, the <b>%labels</b> hash 
              is set to map the SQL commands to the report names. The first item 
              in the hash is set to an empty string for the "Choose a report" 
              label to ensure that the <b>canned_report</b> <b>popup_menu()</b> 
              doesn't have a predefined value set. As shown in Figure 1, 
              the user has the option to enter his own query in the "Enter 
              SQL Query" text field if none of the canned reports suit his 
              needs. The next item in the <b>%labels</b> hash, <b>SELECT COUNT(*) 
              FROM requests</b>, will display the total number of hits the site 
              has received since installing the Apache::DBILogger module. Remaining 
              items in the hash cover other notable reports such as "Number 
              of bytes transferred", "Most popular URLs", "Broken 
              links", "Most popular MIME type served", "Largest 
              documents served", and "Most recently served URLs". 
              Of course, systems administrators will have different needs for 
              the sites they manage, so assembling additional queries for your 
              site will require some ingenuity.
            <p> After the queries have been defined, it is time to print out the 
              various form elements that make up the access log front-end Web 
              interface. In line 44, the entries in <b>%labels</b> are reversed 
              to ensure <b>popup_menu()</b> displays them in the proper fashion. 
              Line 45 starts a lengthy print statement for printing out the form. 
              A few globals such as BG_COLOR and TITLE, as well as various HTML 
              shortcuts, are used for cosmetic purposes. In general, the form's 
              layout can be customized to suit the end user's desired look 
              and feel. On line 54, the <b>start_form()</b> subroutine's 
              action attribute is a call to <b>url()</b>, which is the name of 
              the CGI script, so it can call itself upon subsequent form submissions.
            <p> Note on line 56 the <b>spaces()</b> subroutine, which is merely 
              a concise way of returning white space suitable for HTML, and will 
              default to only one space if no argument is given. Lines 57-62 cover 
              the <b>canned_report</b> variable's <b>popup_menu()</b>, which 
              is passed a reference to an array of the SQL queries listed in the 
              <b>%labels</b> hash above. The default in <b>popup_menu()</b> is 
              not set so the menu will initially display the "Choose a report" 
              label. This will allow the end user to fire up this script and execute 
              his or her own custom SQL query without being forced to select a 
              predefined report. The rest of this routine does more HTML formatting 
              and then the sql form textfield variable is created, which will 
              be used to pass custom queries. If you're entering the same 
              queries into the sql textfield often, you can edit the script and 
              add the query to the <b>canned_report popup_menu()</b>. Finally, 
              the subroutine ends with more formatting and a form submit button.
            <p> The <b>display_report()</b> subroutine, starting on line 79, is 
              where the real work is done in this script, though. Lines 80-81 
              set <b>$sql</b>, which is done by checking for a <b>canned_report</b> 
              variable being passed in. If the variable is not empty, <b>$sql</b> 
              is set to its value. Otherwise, the <b>sql textfield</b> variable 
              is checked and <b>$sql</b> is set to its value if it is not empty. 
              As a default, <b>$sql</b> is set to display all of the records in 
              the requests table in the event that neither form variables contain 
              values.
            <p> Lines 83-84 set the <b>$num</b> variable, which is used for navigational 
              purposes. However, if no value is present, it is set to 0. The <b>$limit_sql</b> 
              variable is used to limit the number of rows of a query result set 
              being displayed, which is done by using SQL's LIMIT keyword 
              and then providing a row number and offset indicating the number 
              of records to be displayed. I set the LIMIT global variable to 10, 
              but this can be changed to suit specific needs.
            <p> Lines 86-95 is where the majority of the back-end database operations 
              take place. Several variables are created to handle database queries. 
              We then attempt to connect to the database using the DSN (data source 
              name) and <b>DB_AUTH</b> settings, with the latter being specific 
              to your site's database configuration. The script dies if no 
              database connection can be made, since we can't query the database 
              without a connection. Note that the connect method of DBI passes 
              in a <b>RaiseError</b> attribute which is set to 1. This will cause 
              the script to die if any problems occur during the querying operations 
              and also alleviates the need to place a call to <b>die()</b> after 
              every DBI-related method. The queries are wrapped up in a call to 
              <b>eval()</b> to trap any errors that may occur. Line 95 checks 
              the <b>$@</b> variable, which will be set if any errors occur during 
              the call to <b>eval()</b>. If this happens, the script subsequently 
              calls <b>die()</b>.
            <p> Lines 97-106 display a message describing the query that was passed 
              to the server with several of CGI.pm's HTML shortcut functions. 
              Lines 108-115 perform the navigational duties of the script by assembling 
              a query string that is made up of the SQL to be passed to the server 
              and the offset within the query's result set that should be 
              displayed. The <b>$next_url</b> and <b>$prev_url</b> variables are 
              only set if there are records that can be displayed on pages other 
              than the current one. They are passed to <b>get_nav_table()</b> 
              on lines 131-139, which returns a nice HTML table containing the 
              navigational links, and is subsequently printed above and below 
              the rows containing the results of the query. Lines 118-124 fetch 
              the rows of the query result set and print them into a nicely formatted 
              table using CGI.pm's HTML shortcuts. For a nice visual effect, 
              the color of the table rows alternate between white and tan. Lastly, 
              the table is finished and the database connection is dropped.
            <p> <b>Conclusion</b>
            <p> Now that the pieces are in place, we can see how this application 
              could benefit systems administrators wanting to gauge their Web 
              server activity more clearly. Using tools such as sed, awk, and 
              Perl to parse the flat-file implementation of the access log and 
              extracting useful information is not as necessary as it once was. 
              More importantly, this application could be extended to include 
              more elaborate queries for gathering site-specific information. 
              It could include a plethora of other features, such as results graphing, 
              log rotation, and report storage capabilities. My hope is that you 
              can use Apache::DBILogger and the script provided for managing your 
              server data more effectively!
            <p> All code for this article is available for download at: <b>http://www.sysadminmag.com/code/</b>.
            <p> <i>Chip Castle is a Web/database consultant specializing in Open 
              Source software. He can be contacted at: <b>chip@chipcastle.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
