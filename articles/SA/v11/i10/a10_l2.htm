<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i10: Listing 2 Dumping lots of device tree information</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a10.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a10_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a10_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink">Listing 2</span></td>
		<td><span class="navbarLink"><a href="a10_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2002/oct2002.tar"><b class=codeListing></b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 2 </b><i>Dumping lots of device tree information</i></h1>
            <p> 
            <pre>
  1 /* Compile with gcc -g -o devinfo devinfo.c -ldevinfo */
  2 #include &lt;stdio.h&gt;
  3 #include &lt;string.h&gt;
  4 #include &lt;sys/stat.h&gt;
  5 #include &lt;libdevinfo.h&gt;
  6
  7 void showstate(unsigned int state) {
  8    static char outstate[100];
  9
 10    outstate[0] = '\0';
 11    if (state &amp; DI_DRIVER_DETACHED)
 12       strcat(outstate, "drvdet,");
 13    if (state &amp; DI_DEVICE_OFFLINE)
 14       strcat(outstate, "offline,");
 15    if (state &amp; DI_DEVICE_DOWN)
 16       strcat(outstate, "down,");
 17    if (state &amp; DI_BUS_QUIESCED)
 18       strcat(outstate, "busquiesced,");
 19    if (state &amp; DI_BUS_DOWN)
 20       strcat(outstate, "busdown,");
 21    if (outstate[0])
 22       outstate[strlen(outstate) - 1] = '\0';
 23
 24    printf("state(%s) ", outstate);
 25 }
 26
 27 void showprop(di_node_t tNode, di_prop_t tProp) {
 28    if (DINO(tNode)-&gt;hw_prop &amp;&amp;
 29        (DIPROP(tProp)-&gt;self &gt;= DINO(tNode)-&gt;hw_prop))
 30       printf("hw");
 31    else if (DINO(tNode)-&gt;sys_prop &amp;&amp;
 32             (DIPROP(tProp)-&gt;self &gt;= DINO(tNode)-&gt;sys_prop))
 33       printf("sys");
 34    else
 35       printf("drv");
 36
 37    printf("prop(%s) ", di_prop_name(tProp));
 38 }
 39
 40 void showminor(di_minor_t tMinor) {
 41    if (di_minor_spectype(tMinor) == S_IFCHR)
 42       putc('c', stdout);
 43    else
 44       putc('b', stdout);
 45
 46    printf("minor(%s %s) ", di_minor_name(tMinor),
 47           (di_minor_nodetype(tMinor) ? : "None"));
 48 }
 49
 50 void examinenode (di_node_t tNode, int indent) {
 51    di_minor_t tMinor;
 52    di_prop_t tProp;
 53    int i = indent++;
 54
 55    while (i--)
 56       printf("   ");
 57
 58    /* Print basic information */
 59    printf("%s bind(%s) bus(%s) drv(%s) inst(%d) ",
 60           di_node_name(tNode),
 61           di_binding_name(tNode),
 62           (di_bus_addr(tNode) ? : ""),
 63           (di_driver_name(tNode) ? : ""),
 64           di_instance(tNode));
 65
 66    showstate(di_state(tNode));
 67
 68    /* Examine any properties */
 69    tProp = DI_PROP_NIL;
 70    while ((tProp = di_prop_next(tNode, tProp)) != DI_PROP_NIL)
 71       showprop(tNode, tProp);
 72
 73    /* Examine any minor nodes */
 74    tMinor = DI_MINOR_NIL;
 75    while ((tMinor = di_minor_next(tNode, tMinor)) != DI_MINOR_NIL)
 76       showminor(tMinor);
 77
 78    printf("\n");
 79
 80    /* Now examine all the child nodes */
 81    tNode = di_child_node(tNode);
 82    while (tNode != DI_NODE_NIL) {
 83       examinenode(tNode, indent);
 84       tNode = di_sibling_node(tNode);
 85    }
 86 }
 87
 88 int main() {
 89    di_node_t tRootNode;
 90
 91    /* Get a snapshot of the device tree */
 92    if (!(tRootNode = di_init("/", DINFOCPYALL))) {
 93       perror("Failed to get root node");
 94       return(1);
 95    }
 96
 97    /* Recursively examine all nodes */
 98    examinenode(tRootNode, 0);
 99
100    /* Free the snapshot */
101    di_fini(tRootNode);
102
103    return(0);
104 }
</pre>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
