<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i10: NSRXREF -- A Python Script for NSR Files</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a11_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2002/oct2002.tar"><b class=codeListing>oct2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a11.gif" width="200" height="174" align="right">NSRXREF 
              -- A Python Script for NSR Files</b></h1>
            <p> <i>Paul Trout</i>
            <p> I've been using Nessus as a network and host-auditing tool 
              for the past six months. As the person running the audits, I'm 
              more than happy with the tool. When I change hats and become the 
              person who has to fix all the holes, I have a small problem -- 
              the reports that Nessus produces fall into two categories. There 
              is a summary-type report that shows the hosts with the most holes, 
              or a detailed list, by host, of the vulnerabilities found for that 
              host. To build a security remediation plan, I've found a cross-reference 
              chart, with the hosts across the top, and the vulnerabilities down 
              the left side to be the best starting point. Because Nessus does 
              not provide such a report, and because I was unable to find one 
              on the Web, I decided to write my own.
            <p> NSRXREF is a Python script that reads Nessus results files (NSR 
              files), and produces the aforementioned cross-reference chart as 
              a set of HTML tables (see Figure 1). This article describes the 
              NSRXREF script and how to use it. All code for this article is available 
              for download at:
            <p> 
            <pre>
http://www.sysadminmag.com/code/
</pre>
            If you are not familiar with Nessus and want to begin with an introduction 
            to Nessus as an auditing tool, see "Using Freeware Vulnerability 
            Scanners" by Gary Bahadur and Yen-ming Chen (<i>Sys Admin</i>, 
            April 2001).
            <p> <b>NSR Files</b>
            <p> When a Nessus scan is complete, the default option for saving 
              the results is a Nessus Scan Results (NSR) file. This file is a 
              pipe-delimited (|) file with one record per line. Each record has 
              either two or five fields, depending whether a specific vulnerability 
              was found on a particular port/service for a specific host. Briefly, 
              here are the fields:
            <p> 
            <p> 1. IP address of the scanned host
            <p> 2. Service Name -- TCP/UDP Port or application protocol
            <p> 3. Nessus Plugin ID
            <p> 4. One of: NOTE, INFO, REPORT. REPORT indicates that a vulnerability 
              was found (security hole). INFO indicates a potential vulnerability 
              was found (security warning).
            <p> 5. The Nessus plug-in description. Semi-colons in the description 
              are used as line-break indicators in the Nessus output.
            <p> 
            <p> Having only two fields on the line means Nessus discovered some 
              process or application was listening on the port, but found no vulnerabilities. 
              Although a port that is open for receiving information is a potential 
              gateway into the host, I kept the focus of NSRXREF on the actual 
              vulnerabilities found on the various ports. For that reason, the 
              ports that are identified simply as open are ignored during processing. 
              The summary item "Ignored" tabulates the number of these 
              lines.
            <p> NOTE records indicate some piece of information that was retrieved 
              by Nessus, which, in and of itself, does not constitute a security 
              risk. Typical NOTE items are the version of the Web server running 
              on the host, DCE service IDs, and the operating system name, version, 
              and patch level. NSRXREF ignores NOTE records. It simply counts 
              them so the summary will account for all of the lines in the file. 
              The description field presents a few problems for automatic processing. 
              Some of the attack scripts add a list of items, such as daemons 
              or services, to the vulnerability description. Some separate the 
              generic information about the vulnerability from the host-specific 
              information with two consecutive line breaks (represented as semi-colons 
              in the actual description strings).
            <p> I experimented with a table of Nessus Plugin IDs and specific 
              search-and-replace rules and decided that setup was too cumbersome 
              to maintain. Since I was looking for the most verbose and non-host 
              specific description without doing a custom extraction for each 
              rule, I wound up searching for ";;" from the left end 
              of the description, and ":" from the right end. I used 
              whichever was the closest to the left side of the description as 
              the end of my extracted description. I've had very good results 
              with this method. I still get some descriptions containing host-specific 
              information. The saving grace is that, in these cases, I also get 
              enough of the generic description to apply it correctly to all affected 
              hosts.
            <p> <b>How the Script Works</b>
            <p> I will not attempt to introduce Python beyond this brief description 
              of its built-in list and dictionary data types. A list is just that 
              -- a list of items. Python's list is similar to arrays 
              in other languages. While the list has several methods, the two 
              applicable to NSRXREF are "append" and "sort". 
              Append simply appends an item to an existing list. Sort reorders 
              the items, in the list, in ascending order. While a comparison function 
              can be passed, I used the default function, resulting in a straight 
              ASCII sort. Brackets ([]) are used to declare lists. Here is a brief 
              summary of the list type, as it applies to NSRXREF:
            <p> 
            <p> <b>newlist=[]</b> -- Declare a new, empty list named newlist
            <p> <b>newlist.append('One')</b> -- Append a string item to the 
              list
            <p> <b>newlist.append('Four')</b> -- Append another string item 
              to the list. At this point, newlist has the items "One" 
              and "Four" stored like this: <b>['One', 'Four']</b>
            <p> <b>newlist.sort()</b> -- Sort list, in place, in ascending 
              ASCII order. Now newlist has the same items, but they are in this 
              order: <b>['Four', 'One']</b>
            <p> 
            <p> The dictionary is an associative array. It's made up of key 
              value pairs. Entries are set with <b>dict[key]=value</b>, and retrieved 
              with a statement like: <b>x=dict[key]</b>. Like the list type, dictionary 
              types have a several built-in methods. The two most useful, in this 
              context, are <b>has_key</b>, and <b>keys</b>. The <b>has_key</b> 
              method returns 1 if the specified key is already in the dictionary. 
              The <b>keys</b> method returns a list of keys in the dictionary. 
              The <b>keys</b> method is especially useful when you take the list 
              of keys, sort it, and use it as a rudimentary index for stepping 
              through the dictionary in a specific order. Braces ({}) are used 
              to declare dictionaries. As it applies to NSRXREF, here is a summary 
              of the dictionary type:
            <p> 
            <p><b> newdict={}</b> -- Create a new, empty, dictionary
            <p> <b>newdict['PATH']='/home/ptrout'</b> -- Add a new key, PATH 
              with a value of <b>/home/ptrout</b>
            <p> <b>newdict['FILE']='NSRXREF.PY'</b> -- Add another key, FILE 
              with a value of <b>NSRXREF.PY</b>
            <p> <b>print newdict['FILE']</b> -- This displays <b>/home/ptrout</b> 
              since that is the value of the key, PATH.
            <p> 
            <p> Because PATH is a key, in <b>newdict</b>, the following expression 
              returns 1:
            <p> 
            <p> <b>newdict.has_key('PATH')</b>
            <p> 
            <p> The following returns 0, because AUTHOR is not a key:
            <p> 
            <p> <b>newdict.has_key('AUTHOR')</b>
            <p> <b>newdict.keys()</b> returns the list ['PATH','FILE'].
            <p> 
            <p> Because NSRXREF expects the NSR filename to be passed (on the 
              command line) as the first argument, the first thing it does is 
              check whether an argument was passed. If there is no argument, then 
              it displays a usage message and exits. If an argument is present, 
              it assumes it's a filename and attempts to open the file in 
              read mode. If the open fails, an error message (different from the 
              usage message) is displayed, and execution terminates. Obviously, 
              if there are no errors, it's time for processing.
            <p> The file-processing loop is the main body of NSRXREF. Each line 
              is processed, and, at the end, there are three populated dictionaries:
            <p> 
            <p> <b>vulninfo</b> (vulnerability information) -- Keyed by the 
              Nessus Plugin ID number, this stores the vulnerability descriptions. 
              In the cross-reference chart, this dictionary provides the vulnerability 
              information down the left-hand side.
            <p> <b>host_addr</b> (host addresses) -- Keyed by the IP address 
              of each host in the NSR file. This stores a 1 for each entry. In 
              truth, this could be a straight list, but I like using the <b>has_key</b> 
              method of a dictionary, rather than the index method of a list for 
              testing to see whether, in this case, an IP address has already 
              been added. <b>Has_key</b> returns 1 if it's present, and 0 
              if it's not. The index method (list data type) raises an exception 
              to indicate the value could not be found. In the chart, this provides 
              the IP addresses across the top of the chart.
            <p> <b>vulnbyhost</b> (vulnerability by host) -- Keyed by the 
              concatenation of the host IP address, and the Nessus Plugin ID (e.g., 
              if 172.22.16.2 is vulnerable to whatever is tested by Plugin 94567, 
              the key for the dictionary is 172.22.16.294567). As with the <b>host_addr</b> 
              dictionary, I simply store a 1 for each entry. This dictionary is 
              used to determine whether a particular combination of host and vulnerability 
              is present, and what should be displayed in the appropriate cell 
              in the chart.
            <p> 
            <p> In addition to these dictionaries, there are five counters I use 
              for the summary table at the end of the report:
            <p> 
            <p> <b>Linecounter</b> -- A straight count of the number of lines 
              in the NSR file.
            <p> <b>Twoflds</b> -- The number of records (lines) in the NSR 
              file describing open ports, but no found vulnerability. These records 
              are ignored during processing.
            <p> <b>Notecounter</b> -- The number of NOTEs ignored during the 
              processing.
            <p> <b>Warncounter</b> -- The number of INFO records processed.
            <p> <b>Holecounter</b> -- The number of REPORT records processed.
            <p> 
            <p> If you add <b>twoflds</b>, <b>notecounter</b>, <b>warncounter</b>, 
              and <b>holecounter</b> together, you should get <b>linecounter</b>.
            <p> Briefly, here is the process for populating the dictionaries, 
              and setting the counters:
            <p> 
            <p> 1. Read a line.
            <p> 2. Count the number of fields -- if 2, increment <b>twoflds</b>, 
              and continue processing on the next line.
            <p> 3. If there are 5 fields, check the type of record -- if NOTE, 
              increment <b>notecounter</b>, and continue processing on the next 
              line.
            <p> 4. Increment either <b>warncounter</b> or <b>holecounter</b>, 
              extract the description and add an entry to <b>vulninfo</b> (if 
              the vulnerability is not already present).
            <p> 5. If the IP address is not already in <b>host_addr</b>, add it.
            <p> 6. Concatenate the IP address, and the Plugin ID, and add an entry 
              in <b>vulnbyhost</b>.
            <p> 7. Get the next line.
            <p> 
            <p> Once the last line has been processed, and the NSR file closed, 
              we can do some housekeeping chores. Nessus Plugin IDs always appear 
              to be a string of five digits. Since they are all the same length, 
              an ASCII sort works very nicely to put them in order. A list called 
              <b>vulnid</b> holds the sorted list of keys from the <b>vulninfo</b> 
              dictionary. Getting the IP addresses sorted properly is a little 
              more involved. For this I created a function, <b>sortip</b>.
            <p> The <b>sortip</b> function accepts a list of IP addresses, and 
              returns a list of those same IP addresses sorted in correct order. 
              Briefly, <b>sortip</b> does this:
            <p> 
            <p> 1. Each address in the source list is split into its respective 
              four octets.
            <p> 2. Each octet is left-padded with 0s to three characters, and 
              then these padded octets are combined back into an address. A dictionary 
              entry is created with the padded address as the key, and the original, 
              unpadded address as the value.
            <p> 3. When all of the source addresses have been added to the dictionary, 
              the keys method returns a list of just the padded addresses.
            <p> 4. Sort this list with the list type's sort method, and use 
              it as an index to step through the dictionary in the correct order.
            <p> 5. As each address is extracted, it's appended to the list 
              that <b>sortip</b> will return.
            <p> 6. Return the list of IP addresses, in their original format (no 
              left-padded octets), but sorted in the correct order.
            <p> 
            <p> Once the NSR file has been read, and all of the scanned host's 
              IP addresses have been sorted, it's time to create the report. 
              I chose to emit HTML because it's relatively platform-independent, 
              and easy to create. After some trial and error, I empirically chose 
              to display five hosts at a time, which seemed to give the most usable 
              tables on a variety of screen resolutions and printed well, too.
            <p> The HTML output is split into two parts -- the cross-reference 
              table(s), and a summary. The summary is primarily a quick sanity 
              check of the results. Remember, Ignored+NOTES+WARNINGS+HOLES should 
              equal the number of lines in the NSR file. Whenever you're 
              working with a security audit, sanity checks can prevent you from 
              having to explain to your boss or client why you missed the gaping 
              vulnerability in XYZ server that just shut the company down.
            <p> To generate the cross-reference tables, I do the following:
            <p> 
            <p> 
            <ul>
              <li> Pull the next five host IP addresses into a list.
                <p> 
              <li> Emit the table header, and the first row of cells for each 
                vulnerability that was found; print the Nessus plugin ID, and 
                the plugin's description text.
                <p> 
              <li> Concatenate the host IP and the plugin ID, and look up that 
                key in the dictionary of vulnerabilities by host. If it's 
                found, the cell gets a red background with the word FOUND displayed. 
                If it's not found, the background of the cell is green, and 
                there is no text. This process is repeated for each group of host 
                addresses until all of the cross-reference tables have been generated.</ul>
                <p> <b>Using NSRXREF</b>
                <p> NSRXREF accepts the name of a Nessus NSR file as its command-line 
                  argument. It emits HTML to STDOUT, where it can be captured 
                  by redirection. I typically run it with a command line similar 
                  to this:
                <p> 
                <pre>
Python nsrxref.py network.nsr &gt; netxref.html
</pre>
                Of course, you can execute it directly by making it executable, 
                and adding <b>#! /path_to_python/python</b> to the top of the 
                file. Then, you could invoke it with:
                <p> 
                <pre>
Nsrxref.py network.nsr &gt; netxref.html
</pre>
                As with any security auditing tool, Nessus returns a certain number 
                of false positives, depending on the environment and which plugins 
                were enabled during the scan. An example is the SSH-version plugin 
                that mistakenly reports that OpenSSH 3.2.2 is a lesser version 
                that 3.0.2. While NSRXREF does nothing to eliminate these, it 
                does allow them to be visually grouped together and therefore 
                easier to ignore, or explain, while creating the remediation plan 
                or conducting the post-remediation debriefing.
                <p> I've tested NSRXREF with Python 1.5.2, 2.0, 2.1, and 
                  2.1.2 on Windows 2000, and OpenBSD 2.9, 3.0, and Red Hat Linux 
                  7.1. As far as I know, there is nothing that should prevent 
                  it from running on any version of Python subsequent to 1.5.2 
                  on any operating system.
                <p> <b>Conclusion</b>
                <p> I've found the reports built into Nessus to be very good 
                  for showing a user, manager, or senior executive where there 
                  are holes in their networked systems. However, those same reports 
                  required a lot of manual work to turn them into even a rough 
                  remediation plan. NSRXREF provides the starting point in the 
                  remediation process by allowing administrators to quickly discover 
                  which groups of machines have the same holes.
                <p> Using Nessus has helped me to be a more thorough security 
                  auditor. I wrote NSRXREF to help me control the post-audit remediation 
                  process. Since then, I've been able to spend more time 
                  fixing holes, and less time working up the remediation plan. 
                  I hope this tool is also useful to you.
                <p> <i>Paul Trout is a systems engineer for an Internet advertising 
                  company. A systems generalist, and relative *nix rookie, he's 
                  been sucked into the vortex of systems and network security. 
                  He can be reached at: <b>ptrout@usa.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
