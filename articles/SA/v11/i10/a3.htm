<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i10: PHP and MSSQL</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2002/oct2002.tar"><b class=codeListing>oct2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a3.gif" width="200" height="174" align="right">PHP 
              and MSSQL</b></h1>
            <p> <i>Christian Wenz</i>
            <p> When talking about creating server-side scripts using PHP, the 
              MySQL database often comes into play. The reason for that is historical, 
              as the first database system PHP ever supported was MySQL. However, 
              there are some known limitations on MySQL. Sub-SELECT queries are 
              missing, for example, and MySQL also lacks transaction support, 
              at least as of version 3.x. With the forthcoming version 4 (alpha 
              version already available), some of these limitations are supposed 
              to be fixed. A lot of other excellent database systems exist out 
              there, many of which are supported by PHP -- PostgreSQL, for 
              example, is currently popular.
            <p> However, the Windows world also has some fine applications to 
              offer (if you are willing to put ideology aside, that is). Recent 
              versions of Microsoft SQL Server offer a lot of functionality and 
              performance, if you are willing to pay the price.
            <p> The combination of a Microsoft client with a Linux SQL server 
              is quite well known, but the use of a Linux client with a Microsoft 
              SQL server has received less attention. Many heterogeneous networks 
              contain both Linux/UNIX servers and Windows servers, so accessing 
              a Microsoft SQL server (MSSQL) from UNIX or Linux is a logical step. 
              A recent survey in a well-respected German magazine (<i>iX</i>, 
              "The Winner Is" by Christoph Gitschel, Henning Behme, 
              Cristoph Klaja, and Andreas Pelzner) showed that the combination 
              of PHP on Linux and Microsoft SQL beat PHP and MySQL in performance. 
              The survey measured response time of PHP and ASP scripts that retrieved 
              various data from a database and generated an HTML output. Even 
              if you prefer to serve SQL from UNIX/Linux, you may still have occasion 
              to connect to a Microsoft SQL server. For instance, if you wish 
              to migrate the MSSQL server to, say, PostgreSQL, the migrations 
              can be simplified by connecting directly to the MSSQL machine from 
              the UNIX/Linux box. In this article, I will show how to connect 
              to an existing MSSQL installation from a UNIX/Linux client. I'll 
              also describe how to access this data source from within PHP.
            <p> <b>Installation</b>
            <p> Microsoft didn't develop MSSQL from scratch. Formerly, this 
              was a Sybase product; however, Microsoft now does the sole further 
              development for the software. To access a MSSQL database, you need 
              special libraries. The most common ones are called FreeTDS and are 
              available from <b>http://www.freetds.org</b>. The acronym TDS stands 
              for Tabular DataStream, which is a protocol that MSSQL (and Sybase 
              products) uses to talk to its own clients. By implementing this 
              protocol for UNIX/Linux, these machines can connect to MSSQL, too.
            <p> FreeTDS is a set of C libraries distributed under the LGPL license, 
              so no license fees are involved. The software is available free 
              of charge from the FreeTDS Web site. At the time of writing, the 
              must current version was 0.53. The first step is to download the 
              current FreeTDS version. As this currently is 0.53, the filename 
              is <b>freetds-0.53.tgz</b>; if you should be lucky enough to get 
              a more recent version, change the filename in the following instructions 
              accordingly.
            <p> The next step is to unpack the contents of the archive:
            <p> 
            <pre>
$ tar -xzvf freetds-0.53.tgz &amp;&amp; cd freetds-0.53
</pre>
            Then, configure FreeTDS. There are several versions of the TDS protocol 
            supported by FreeTDS 0.53:
            <p> 
            <p> TDS version 4.2 -- Works with all versions, however does not 
              support new MSSQL functionality after version 6.5.
            <p> TDS version 5.0 -- When used with Sybase systems.
            <p> TDS version 7.0 -- Introduced with MSSQL 7.0, includes support 
              for Unicode and for text fields longer than 255 characters.
            <p> TDS version 8.0 -- Introduced with MSSQL 2000; as of time 
              of writing, only partially supported by TDS.
            <p> 
            <p> A general recommendation is to use the old version 4.2, as this 
              is the lowest common denominator. If you need some of the TDS 7.0 
              extensions (e.g., long text fields or Unicode support), try version 
              7.0. Whatever version you choose, it must be provided as a parameter 
              to configure:
            <p> 
            <pre>
$ ./configure --prefix=/usr/local/ftds --with-tdsver=4.2 --enable-dbmfix
$ make
$ make install
</pre>
            Also, configure FreeTDS by editing the file /usr/local/freetds/etc/freetds.conf. 
            Add a new entry in the following manner:
            <p> 
            <pre>
[ServerName]
host = 192.168.0.77   # IP of the MSSQL installation
port = 1433   # default port, modify if you chose another one
tds version = 4.2   # used TDS version
client charset = UTF-8   # only useful when using TDS version &gt;= 7.0
</pre>
            Next, you can tweak PHP a little so that calls to MSSQL are sent to 
            the FreeTDS libraries. To do so, download the most current PHP version 
            (as of time of writing, this is PHP 4.2.2; you may find a more recent 
            version) and unzip it:
            <p> 
            <pre>
$ tar -xzvf php-4.2.2.tar.gz &amp;&amp; cd php-4.2.2
</pre>
            With some PHP versions, all occurrences of "dbopen" in files 
            ext/sybase/config.m4 and /ext/Sybase/php_sybase_db.c must be replaced 
            with "tdsdbopen", so that the TDS protocol is really used.
            <p> PHP can now be configured. Here you see the required configure 
              switches for MSSQL support via FreeTDS, you may add any other switches 
              you find appropriate (e.g., include the GD library for generating 
              graphics on-the-fly):
            <p> 
            <pre>
$ ./configure --with-mssql=/usr/local/freetds --with-sybase=/usr/local/freetds --with-apache=../apache_1.3.26
$ make
$ make install
</pre>
            The support for Apache 2 is not yet stable for PHP, so Apache version 
            1.3.x is used.
            <p> The PHP archive also contains a file <b>php.ini-dist</b> that 
              contains the standard settings for PHP. Copy this file to /usr/local/etc/php.ini 
              (up to version 4.0.4pl1, this file had to be put to /usr/local/lib/php.ini; 
              in PHP 4.0.5, the default folder changed). In this file <b>php.ini</b>, 
              look for "sybase.interface_file" and set this as follows:
            <p> 
            <pre>
sybase.interface_file = /usr/local/freetds/interfaces
</pre>
            In the final step, Apache must gain knowledge of the PHP installation. 
            So, again, it's time to run configure:
            <p> 
            <pre>
$ cd ../apache_1.3.26
$ ./configure --activate-module=src/modules/php4/libphp4.a
$ make
$ make install
</pre>
            In the central Apache configuration file, <b>httpd.conf</b>, the following 
            directive associates the PHP module to files with the extensions .php 
            and .php4:
            <p> 
            <pre>
AddType application/x-httpd-php .php .php4
</pre>
            Restart Apache, and you are done. PHP should now offer you direct 
            access to your MSSQL installation.
            <p> <b>Testing and Working with MSSQL</b>
            <p> To create a connection to a MSSQL database, the PHP function <b>mssql_connect()</b> 
              must be used. This function expects the following parameters:
            <p> 
            <p> 1. The MSSQL server (name, IP address)
            <p> 2. The user that wants to connect to the database
            <p> 3. The password for the user
            <p> 
            <p> All parameters are optional. The <b>mssql_connect()</b> function 
              returns a numeric identifier for the connection to the MSSQL server; 
              this value is used for other MSSQL methods later in a PHP script. 
              One of these functions is <b>mssql_select_db()</b>, which selects 
              one of the databases residing within the MSSQL server.
            <p> The connection to MSSQL is closed automatically when the script 
              terminates (no need for manual garbage collection). However, if 
              you want to do this by yourself, close <b>mssql_close()</b> and 
              provide the connection identifier as parameter:
            <p> 
            <pre>
&lt;?php
  $conn = mssql_connect("192.168.0.77", "sa", "topsecret");
  mssql_select_db("name_of_database", $conn);
  // do some stuff with the DB
  mssql_close($conn);
?&gt;
</pre>
            A common problem arises when you provide a server name rather than 
            an IP address; sometimes, PHP then does not find the server. It helps 
            to create an entry for the server in <b>freetds.conf</b>, and also 
            to map the server name to the appropriate IP address in the file /etc/hosts.
            <p> To execute an SQL statement against the database, <b>mssql_query()</b> 
              can be used. First parameter is the SQL statement, and the second 
              parameter is the connection ID:
            <p> 
            <pre>
&lt;?php
  $conn = mssql_connect("192.168.0.77", "sa", "topsecret");
  mssql_select_db("name_of_database", $conn);
  
  mssql_query("CREATE TABLE users ( id INT IDENTITY (1,1) NOT NULL, \
    name VARCHAR(50) NOT NULL, email VARCHAR(50) NOT NULL)", $conn);
  
  mssql_close($conn);
?&gt;
</pre>
            To illustrate this concept, here is a small application that lets 
            the user enter a name and email address into a database. See Figure 
            1. For this, the table users from the previous application must already 
            have been created. See Figure 2. Also, replace "name_of_database" 
            with the real name of the used database:
            <p> 
            <pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;PHP &amp;amp; MSSQL&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php
  if (!empty($_POST["submit"])) {
    $conn = mssql_connect("192.168.0.77", "sa", "topsecret");
    mssql_select_db("name_of_database", $conn);
    $sql = "INSERT INTO users (name, email) VALUES (";
    $sql .= "'" . $_POST["name"] . "', ";
    $sql .= "'" . $_POST["email"] . "')";
    mssql_query($sql, $conn);
    mssql_close($conn);
    echo("&lt;p&gt;Entry added to database!&lt;/p&gt;");
  }
?&gt;
&lt;form method="post"&gt;
Name: &lt;input type="text" name="name" /&gt;&lt;br /&gt;
Email: &lt;input type="text" name="email" /&gt;&lt;br /&gt;
&lt;input type="submit" name="submit" value="Add to database" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
            Finally, we want to read out all information in the database. To do 
            so, the return value of <b>mssql_query</b> must be saved. If this 
            value is used as a parameter for function <b>mssql_fetch_array()</b>, 
            the first line in the result list of the query is returned as an associative 
            array. Subsequent calls to <b>mssql_fetch_array()</b> move from row 
            to row, therefore enabling to traverse all result rows. The following 
            script prints all entries in the database:
            <p> 
            <pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;PHP &amp;amp; MSSQL&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table cellpadding="5"&gt;
&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;/tr&gt;
&lt;?php
  $conn = mssql_connect("192.168.0.77", "sa", "topsecret");
  mssql_select_db("name_of_database", $conn);
  $result = mssql_query("SELECT * FROM users", $conn);
  while ($row = mssql_fetch_array($result)) {
    echo("&lt;tr&gt;&lt;td&gt;" . $row["id"] . "&lt;/td&gt;");
    echo("&lt;td&gt;" . $row["name"] . "&lt;/td&gt;");
    echo("&lt;td&gt;" . $row["email"] . "&lt;/td&gt;&lt;/tr&gt;\n");
  }
  mssql_close($conn);
?&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
            <b>Conclusion</b>
            <p> I have shown only a small excerpt of the MSSQL functions of PHP; 
              however, the focus of this article was to show how to enable the 
              connection to the MSSQL database, not how to exploit the software 
              for maximum effect.
            <p> I concentrated on the TDS protocol because this currently is the 
              most widely used one to cross the browser from UNIX/Linux and PHP 
              to access Windows-based data sources. An alternative would be to 
              use Microsoft's ODBC (Open Database Connectivity) standard. 
              iODBC (available at: <b>http://www.iodbc.org</b>) is an open source 
              implementation of the ODBC specification. PHP also supports access 
              to ODBC data sources. For more information, see: <b>http://www.php.net/odbc</b>.
            <p> For installation issues and further information on FreeTDS, PHP, 
              and MSSQL, have a look at the following Web resources:
            <p> 
            <p> <b>http://www.freetds.org</b> -- FreeTDS homepage
            <p> <b>http://www.php.net/manual</b> -- Online manual for PHP, 
              including user annotations
            <p> <b>http://www.php.net/mssql</b> -- MSSQL functions of PHP
            <p> <i>Christian Wenz is a Germany-based author of more than 25 books 
              on various topics of Web development and programming. He regularly 
              speaks at international conferences where he tries to express his 
              loathing of stubborn ideology (beware those who do not agree with 
              him on this topic). He can be reached at: <b>chw@hauser-wenz.de</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
