<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i10: Using Oracle with Apache and PHP on Linux</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2002/oct2002.tar"><b class=codeListing>oct2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a1.gif" width="200" height="174" align="right">Using 
              Oracle with Apache and PHP on Linux</b></h1>
            <p> <i>William W. David</i>
            <p> At a USENIX conference several years ago, Linus Torvalds was asked 
              about the scarcity of database software for Linux. The problem, 
              he answered, was that while operating systems are fun, databases 
              are so ugly that you always have to pay someone to write them. MySQL 
              and Postgres have proved that notion not entirely true, and until 
              fairly recently, free database products were the only real option 
              for database software on Linux. But now there are a number of commercial 
              database products officially supported on Linux, including industry 
              heavyweights Oracle and DB2. Those products, combined with the Apache 
              Web server and the PHP programming language, make Linux a very attractive 
              platform for developing and running Web-enabled database applications 
              of all sizes. This article outlines the steps needed to access Oracle 
              databases from PHP running under Apache.
            <p> <b>Platform Notes</b>
            <p> A development version of Oracle 9i is available at: <b>http://www.oracle.com/</b> 
              (The download requires registration.) PHP and Apache are available 
              at: <b>http://www.php.net/</b> and <b>http://www.apache.org/</b>.
            <p> Oracle 9i installs with only minor difficulties under the current 
              versions of both SuSE and Red Hat Linux, and probably under other 
              distributions as well. Oracle 8i and older distributions of Linux 
              can also work, albeit with effort. An Oracle installation tutorial 
              is beyond the scope of this article, but there are several helpful 
              sites around the Web, including dbdomain: <b>http://www.dbdomain.com/articles.htm/</b>.
            <p> The examples in this article were written using Red Hat 7.3, Apache 
              1.3.23, PHP 4.1.2, and Oracle 9i (9.0.1.0.0.) They assume basic 
              familiarity with the Apache and PHP build processes, Oracle in general, 
              and a functioning Oracle database somewhere on your network. The 
              examples use the sample database and users provided by the default 
              Oracle installation.
            <p> <b>Adding Oracle Support to Apache and PHP</b>
            <p> There are several ways for PHP to talk to an Oracle database including 
              using ODBC libraries, as well as two types of Oracle library support 
              built into PHP. This article concentrates on using the Oracle native 
              libraries -- specifically the Oracle 8 function calls. The older 
              Oracle libraries still exist in PHP, but are largely deprecated 
              by the OCI8 functions.
            <p> Before you can compile PHP with Oracle support, the computer doing 
              the build must have Oracle network connectivity established. If 
              the machine on which you're building Apache and PHP also hosts 
              the Oracle database itself, you should already have everything you 
              need. Otherwise, run the Oracle setup utility and install the Oracle 
              client software. Test the installation by making sure you can connect 
              to your database with sqlplus and log in with the one of the sample 
              accounts Oracle provides (i.e., user name "scott"; password 
              "tiger").
            <p> Once the Oracle client software is installed, it's time to 
              add Oracle support to PHP. This is done using the <b>--with-oci8=</b> 
              option to the PHP configuration script. The option should point 
              to the location of the database client software (your <b>$ORACLE_HOME</b> 
              directory, in Oracle terms).
            <p> The example PHP <b>config.nice</b> file used for this article 
              looks like:
            <p> 
            <pre>
#! /bin/sh
#
# Created by configure

'./configure' \
'--with-apache=../apache_1.3.23' \
'--with-oci8=/db/oracle/product/901' \
'--enable-sigchild' \
"$@"
</pre>
            The <b>--enable-sigchild</b> line obviates a problem some users on 
            the Internet have reported. The problem is characterized by a large 
            number of defunct processes existing when using the Apache/PHP/Oracle 
            combination under Linux.
            <p> After you've configured PHP and installed it, build Apache 
              with PHP support enabled. Oracle support also requires that Apache 
              be compiled with the pthread library included. The Apache configuration 
              file with the minimal information for PHP and Oracle is very small:
            <p> 
            <pre>
#!/bin/sh
##
##  config.status -- APACI auto-generated configuration restore script
##
##  Use this shell script to re-run the APACI configure script for
##  restoring your configuration. Additional parameters can be supplied.
##

LIBS="-lpthread" \
./configure \
"--with-layout=Apache" \
"--prefix=/www/apache" \
"--activate-module=src/modules/php4/libphp4.a" \
"$@"
</pre>
            A real-world Apache configuration file will likely have many more 
            options enabled in addition to those shown here.
            <p> For Oracle to work under Apache, the Web server needs to know 
              a few things about the database environment. This is be done by 
              adding several environment variables to the Apache startup script. 
              These variables are the same ones that are typically set for normal 
              Oracle users. You can add them to the configuration section of the 
              <b>apachectl</b> script, which is located in the Apache installation's 
              <b>/bindirectory</b>:
            <p> 
            <pre>
# ||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                             --------------------
export ORACLE_SID=example
export ORACLE_BASE=/db/oracle
export ORACLE_HOME=/db/oracle/product/901
export ORA_NLS33=/db/oracle/product/901/ocommon/nls/admin/data
export PATH=$PATH:$ORACLE_HOME/bin:
</pre>
            An alternative, and probably more globally useful, solution is to 
            keep them in an external place for all users and sourced where appropriate 
            (from <b>etc/profile</b>, <b>apachectl</b>, other places as needed.) 
            On the example system, they are in <b>/db/dbparms</b>, so the <b>apachectl</b> 
            file would look like:
            <p> 
            <pre>
# ||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                             --------------------
. /db/dbparms
</pre>
            After Apache is built and running, it's time to talk to the database.
            <p> <b>Oracle Functions</b>
            <p> There are several basic steps to running any Oracle SQL command 
              under PHP, which include connecting to the database, parsing the 
              SQL command, executing the command, and returning any results. Connecting 
              to the database is accomplished using the <b>OCILogon</b> command. 
              The command takes three arguments: database user name, password, 
              and the name of the database itself:
            <p> 
            <pre>
$db_conn = ocilogon("scott", "tiger", "example.mydomain.net");
</pre>
            The database name parameter is optional, and if it isn't specified, 
            the value of <b>$ORACLE_SID</b> is assumed.
            <p> Once you've connected to a database, the next thing is to 
              run some SQL commands, which is accomplished with a combination 
              of functions -- <b>OCIParse</b> and <b>OCIExecute</b> to generate 
              results, and one of several statements to return the results in 
              a usable form. For this example, I've used <b>OCIFetchStatement</b>, 
              which puts the results of a query into an array, and <b>OCIRowCount</b>, 
              which returns the number of affected rows from an update. The basic 
              syntax of these commands is:
            <p> 
            <p> <b>int OCIParse</b> -- <b>int conn</b>, string query
            <p> <b>int OCIExecute</b> -- <b>int stmt_id</b>, <b>int mode</b>
            <p> <b>int OCIFetchStatement</b> -- <b>int stmt_id</b>, array 
              variable
            <p> <b>int OCIRowCount</b> -- <b>int stmt_idd</b>
            <p> 
            <p> <b>OCIParse</b> takes as arguments the database connection generated 
              in the previous example and an SQL string, and returns the statement 
              ID of the parsed statement. <b>OCIExecute</b> takes the results 
              of <b>OCIParse</b> and an optional mode, which tells the database 
              whether to commit the results of the command (the default is to 
              commit) and returns <b>TRUE</b> on success, <b>FALSE</b> on failure. 
              <b>OCIFetchStatement</b> takes the statement ID of an executed statement 
              and an array to populate with the results of the query, and returns 
              the number of rows in the result set. <b>OCIRowCount</b> takes a 
              statement ID and returns the number of rows altered by an update.
            <p> Here's an example showing all these commands in use. It updates 
              an employee record in the sample database, and then queries for 
              some information about employees named Smith and Jones:
            <p> 
            <pre>
&lt;?
$db_conn = ocilogon("scott", "tiger", "example.mydomain.net");

$cmdstr = "update emp set job = 'techie' where ename = 'SMITH'";
$parsed = ociparse($db_conn, $cmdstr);
ociexecute($parsed);
$nrows = ocirowcount($parsed);
echo "$nrows row updated.&lt;BR&gt;\n";

$cmdstr = "select ename, job from emp where ename in ('SMITH', 'JONES')";
$parsed = ociparse($db_conn, $cmdstr);
ociexecute($parsed);
$nrows = ocifetchstatement($parsed, $results);
echo "Found: $nrows results&lt;BR&gt;\n";

echo "&lt;TABLE BORDER=1&gt;\n";
echo "&lt;TR&gt;\n";
print "&lt;TH&gt;Employee Name&lt;/TH&gt;\n";
print "&lt;TH&gt;Job Title&lt;/TH&gt;\n";
echo "&lt;/TR&gt;\n";

for ($i = 0; $i &lt; $nrows; $i++ ) {
  print "&lt;TR&gt;\n";
  echo "&lt;TD&gt;" . $results["ENAME"][$i] . "&lt;/TD&gt;";
  echo "&lt;TD&gt;" . $results["JOB"][$i] . "&lt;/TD&gt;";
  print "&lt;/TR&gt;\n";
}

print "&lt;/TABLE&gt;\n";
?&gt;
</pre>
            The example should produce output similar to the following:
            <p> 
            <pre>
1 row updated.
Found: 2 results

Employee Name  | Job Title
--------------------------
SMITH          | techie
JONES          | MANAGER
Everyday Use
</pre>
            I've described how to get PHP and Apache to talk to a database, 
            but the steps above are a little unwieldy for everyday use. Consider 
            a typical Web site, with hundreds of pages (perhaps written by a team 
            of programmers), with several queries each -- all writing the 
            connect, parse, execute, and return sequences for each SQL statement. 
            It's a good idea to abstract all the pieces that can be hidden 
            into another layer to provide one well-known interface that all pages 
            use, with consistent options and return values. This also makes it 
            easy to take advantage of another feature -- persistent database 
            connections. A persistent connection is set up once and reused for 
            the entire PHP session, eliminating the overhead of repeatedly connecting 
            to the database.
            <p> To that end, we put the following in an include file:
            <p> 
            <pre>
&lt;?
function dbconnect()
{
   global $db_conn;

   $db_conn = ociplogon("scott", "tiger", "example.mydomain.net");
}


function perform_sql($cmdstr, &amp;$results)
{

   global $db_conn;

   if (!$db_conn) {
      dbconnect();
   }

   $parsed = ociparse($db_conn, $cmdstr);
   ociexecute($parsed);

   if (func_num_args() == 2) {
      $nrows = ocifetchstatement($parsed, $results);
   }
   else {
      $nrows = ocirowcount($parsed);
   }

   return($nrows);
}
?&gt;
</pre>
            and our example above becomes:
            <p> 
            <pre>
&lt;?
include "dbutils.php";

$cmdstr = "update emp set job = 'techie' where ename = 'SMITH'";
$nrows = @perform_sql($cmdstr);
echo "$nrows row updated.&lt;BR&gt;\n";

$cmdstr = "select ename, job from emp where ename in ('SMITH', 'JONES')";
$nrows = perform_sql($cmdstr, $results);
echo "Found: $nrows results&lt;BR&gt;\n";


echo "&lt;TABLE BORDER=1&gt;\n";
echo "&lt;TR&gt;\n";
print "&lt;TH&gt;Employee Name&lt;/TH&gt;\n";
print "&lt;TH&gt;Job Title&lt;/TH&gt;\n";
echo "&lt;/TR&gt;\n";

for ($i = 0; $i &lt; $nrows; $i++ ) {
   print "&lt;TR&gt;\n";
   echo "&lt;TD&gt;" . $results["ENAME"][$i] . "&lt;/TD&gt;";
   echo "&lt;TD&gt;" . $results["JOB"][$i] . "&lt;/TD&gt;";
   print "&lt;/TR&gt;\n";
}

print "&lt;/TABLE&gt;\n";
?&gt;
</pre>
            The sections of code that perform the database activity are more compact 
            in the example, down to four lines from nine, but the HTML section 
            is as ugly as ever. This savings becomes magnified on a large Web 
            page containing many database calls. Notice the use of <b>OCIPLogon</b> 
            in place of the original <b>OCILogon</b>, denoting a persistent connection. 
            Also important is the consistency of the new interface. The same command, 
            <b>perform_sql()</b>, is used for both update and select statements, 
            rather than having two different ones (<b>OCINumRows</b> and <b>OCIFetchInto</b>), 
            as in the original example.
            <p> Moving the OCI8-specific pieces out of the main page code also 
              allows for some less obvious trickery. For example, to ensure that 
              all string operations on the database have newlines removed, you 
              might change the appropriate section of <b>dbutils.php</b>:
            <p> 
            <pre>
$cmdstr = ereg_replace("\n", "", $cmdstr);
$parsed = ociparse($db_conn, $cmdstr);
ociexecute($parsed);
</pre>
            Making the change here means the Web code is only changed in one place, 
            and that the change applies to everybody. The same thing could be 
            done for other characters (i.e., to eliminate dashes from social security 
            numbers), to format date stamps, and so forth.
            <p> <b>Summary</b>
            <p> This article shows how to use Apache and PHP to access an Oracle 
              database. All three are very flexible tools, and in practice the 
              combination is quite pleasant to use. PHP can also be used as scripting 
              language for accessing Oracle outside of a Web context. It has become 
              my language of choice for database programs, whether Web-based, 
              command line, or batch. With a little trial and error, it might 
              be yours, too.
            <p> <i>William W. David is a long-time UNIX and network administrator 
              as well as sometime DBA and programmer. He's spent the past 
              few years working with Web-enabled databases on the Internet, and 
              is afraid they're here to stay. He can be reached at: <b>wdavid@cowford.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
