<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i12: Listing 1 superserver/subserver, superclient/subclient quartet</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a4.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2002/dec2002.tar"><b class=codeListing>dec2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 1 </b><i>superserver/subserver, superclient/subclient 
              quartet</i></h1>
            <p> 
            <pre>
SG.AWK -------------------------------------------------------------

#!/bin/awk -f
# sg.awk PORT_NUMBER SUBSERVER_PORT_CUR SUBSERVER_PORT_BEG SUBSERVER_PORT_END
#
# This superserver spawns subservers to service requests to transfer
# files on the server to remote clients. When the superserver is contacted
# by a superclient, it is passed the type of file being transferred.  The
# superserver uses a block of port numbers whose extremes are passed on the
# cmdline. The current port number in use is held in ARGV[2]. It then spawns
# a subserver, sg2.awk, passing it on the commandline the port on which to
# service and the type of file, ?/b, being transferred to the superclient.
# The superserver then writes the port number being used by the spawned
# server to the socket connected to the superclient. The superclient will
# spawn a client to complete the transaction on the passed port. The
# superserver then closes the socket and spawns another copy of itself to
# service the superport.
#
# Superserver SG.AWK pairs with superclient CP.AWK.
# Superserver SG.AWK spawns subserver SG2.AWK.
# Superclient CP.AWK spawns subclient CP2.AWK.

BEGIN {
# Client picks up port here.
  system("echo " ARGV[1] " &gt; /var/run/sg.port")
  Net = ("/inet/tcp/" ARGV[1] "/localhost/0")
# Sit on the socket, awaiting a Client. Client transmits
# (host filetype)
  Net |&amp; getline
  if (NF&lt;2) {
    print $0
    print "Bad argument count: 2 expected."
  } else {
  # Spawn SUBSERVER. In this order, pass HOST PORT FILETYPE
    sys = sprintf ("/cmn/scr/sg2.awk %s %d %s &amp;",$1,ARGV[2],$2)
    system (sys)
  # Give the SUBSERVER time to establish a  port.
    system("sleep 2")
  # Tell the SUPERCLIENT what port the SUBCLIENT should talk on.
    print ARGV[2] |&amp; Net
    close (Net)
  # Calculate next port number.
    port=ARGV[2]+1
    if (port &gt; ARGV[4]) port=ARGV[3]
  }
  close (Net)
# Get forked.
  sys=sprintf("/cmn/scr/sg.awk %d %d %d %d &amp;",ARGV[1],port,ARGV[3],ARGV[4])
  system (sys)
}

SG2.AWK ------------------------------------------------------------

#!/bin/awk -f
# sg2.awk REMOTE_HOST PORT_NUMBER ?/b &amp;
#
# This subserver is passed the following commandline parameters:
# ARGV[1]: ip number of remote host
# ARGV[2]: port to connect to on localhost on which to talk to SUBCLIENT.
# ARGV[3]: type of file being transferred. ?/b for text/binary.
#
# From the SUBCLIENT, this subserver receives the following items in this order:
# 1. In one transmission, two items separated by space:
#    - $1 : A string of permissions to be applied to the created file.
#    - $2 : The name of a file to create on this server's box.
# 2. Streaming content copied to the local file named in [1].
#
# This subserver is spawned by superserver SG.AWK.

BEGIN {
  Net = ("/inet/tcp/" ARGV[2] "/localhost/0")
# Sit on the socket, awaiting the SUBCLIENT.
  Net |&amp; getline
# Get permissions to apply and name of file to create.
  perm = $1
  file = $2
# Transfer algorithm dictated by filetype.
  if (ARGV[3]=="b") {
    n=1
    while (1) {
      rc1 = Net |&amp; getline rec1
      if (rc1&lt;=0) {
        printf "%s",rec2 &gt; file
        break
      }
      if (n&gt;1) print rec2 &gt; file
      rc2 = Net |&amp; getline rec2
      if (rc2&lt;=0) {
        printf "%s",rec1 &gt; file
        break
      }
      print rec1 &gt; file
      ++n
    }
  } else {
    while ((Net |&amp; getline rec) &gt; 0) print rec &gt; file
  }
  close (Net)
  system ("chmod " perm " " file)
  system ("date &gt;&gt; /var/log/sg2")
  l = sprintf("/cmn/scr/sg2.awk %s %s (file=%s, perm=%s)",ARGV[1],ARGV[2],file,perm)
  print l &gt;&gt; "/var/log/sg2"
}

CP.AWK ------------------------------------------------------------

#!/bin/awk -f
# cp.awk  remotehost  permissions  ftype  local-file  [remote-file]
#
# This superclient contacts a remote superserver in order to initiate a file 
# transfer from the remote server to the client. The superclient contacts the 
# superserver by sending it the name of the client's host and a character: 
# ?/b, for the type of file being requested. The superclient then sits on the 
# socket awaiting the port number on which to transfer the file. When it 
# receives the port number, the superclient spawns a subclient to receive the 
# file. It passes along its commandline data to the subclient plus the port 
# number on which to perform the transfer.
#
# Superclient CP.AWK spawns subclient CP2.AWK. 
# Superclient CP.AWK pairs with superserver SG.AWK.

BEGIN {
  if (ARGC&lt;5) {
    print ("cp.awk " ARGV[1] " " ARGV[2] " " ARGV[3] " " ARGV[4])
    print "cp.awk remotehost permissions ftype local-file [remote-file]"
    print "if ARGV[5] is absent, ARGV[5]=ARGV[4]"
    print "cp.awk  galleon  u+x  [?,b]  /local/file  /remote/file"
#          0       1        2    3      4            5
  } else {
#   Get port on which to talk to a remote SG.AWK
    getline &lt; "/var/run/sg.port"
    if (NF==0) {
      print "cp.awk: no file: /var/run/sg.port"
      exit 1
    }
# Sanity check
   if (ENVIRON["HOSTNAME"]=="") {
     print "cp.awk: environment variable HOSTNAME is null."
     exit
   }
# Setup tcp/ip
    Net = ("/inet/tcp/0/" ARGV[1] "/" $1)
# If no [5], the path/file is identical on the remote host.
    if (ARGC&lt;6) ARGV[5]=ARGV[4]
# Transmit (host filetype) to the remote server
   sys=sprintf ("%s %s",ENVIRON["HOSTNAME"],ARGV[3]) 
   print sys |&amp; Net
# Await the transaction subport
    Net |&amp; getline subport
    close (Net)
# Invoke subclient
    sys = sprintf ("/cmn/scr/cp2.awk %s %s %s %s %s \
                   &amp;",ARGV[1],subport,ARGV[2],ARGV[4],ARGV[5])
    system (sys)
  }
}

CP2.AWK ----------------------------------------------------------------

#!/bin/awk -f
# This subclient transmits three items in this order to a subserver:
# 1. A string of permissions to be applied to the file on the server's end.
# 2. The name of a file to be created by the server on the server's machine.
# 3. The content of the file named in [1].
#
# This subclient is spawned by superclient CP.AWK.
# This subclient pairs with subserver SG2.AWK.
#
#  Usage: cp2.awk remotehost port permissions local-file remote-file

BEGIN {
  if (ARGC&lt;6) {
    print "cp2.awk remotehost port permissions local-file remote-file"
    print "cp2.awk  galleon  port  u+x  /local/file  /remote/file"
#          0        1        2     3    4            5
  } else {
    Net = ("/inet/tcp/0/" ARGV[1] "/" ARGV[2])
    args = (ARGV[3] " " ARGV[5])
    print args |&amp; Net
    while ((getline rec &lt; ARGV[4]) &gt; 0) print rec |&amp; Net
    close (Net)
    system ("date &gt;&gt; /var/log/cp2")
    l = sprintf("/cmn/scr/cp2.awk %s %s %s %s \
                %s",ARGV[1],ARGV[2],ARGV[3],ARGV[4],ARGV[5])
    print l &gt;&gt; "/var/log/cp2"
  }
}
</pre>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
