<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i08: Root Access Intrusion -- A Suite of Tools</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2002/aug2002.tar"><b class=codeListing>aug2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a3.gif" width="200" height="174" align="right">Root 
              Access Intrusion -- A Suite of Tools</b></h1>
            <p> <i>Rhonda Thorne</i>
            <p> While UNIX systems administrators aren't worried about things 
              like the "CodeRed" or "I Love You" viruses, 
              a root access intrusion is a real threat. By minimizing the number 
              of people who know the root password, establishing a frequent regular 
              schedule to change the root password, and forcing a switch user 
              (su) to root, systems administrators may think that they have secured 
              their systems. However, someone who is not approved to use root 
              could still invade a UNIX system. This article will provide some 
              tools to help administrators detect and investigate possible intrusion.
            <p> If you are like me and have lots of systems to monitor, you know 
              it is time consuming to review sulogs, command-line history files, 
              and password files for root access intrusions. Monitoring UNIX files 
              with automated tools is essential for effective security. If you 
              have an HP 11.0 system, the free IDS/9000 Intrusion Detection System 
              may be worth using. If not, the following suite of tools can be 
              used by any UNIX admin for intrusion notification and investigation.
            <p> With more than six years of experience, and using the "Zen 
              of Sys Admin" (save the data, secure the system, and make the 
              users effective), I applied all of the measures that I learned in 
              UNIX security training and was confident that the possibility of 
              a breach was minimal. However, while working on a massive Y2K conversion 
              project that included more than 30 applications, application development, 
              and database consultants, I encountered a breach of security at 
              the root access level. Fortunately, the tools discussed here were 
              in place and disclosed the security breach, identified the intruder, 
              and proved which commands had been executed during the intrusion.
            <p> <b>The Scenario</b>
            <p> I received an email showing su's to root on a system had 
              transpired. I noticed that the username switching to root had no 
              right to root access, so I went to the directory containing each 
              root login command-line history. I had the username, time, and date 
              of the person switching to root. I opened this history file to view 
              the command lines executed by the intruder and found that this person 
              was logged in as root and had entered a command of <b>vi /etc/passwd</b>. 
              I immediately went to the <b>/etc/passwd</b> file and found an additional 
              entry for root with a different username. This is a sys admin's 
              nightmare -- the system had been breached, and the intruder 
              had created a root "back door".
            <p> Upon further review of the root command-line history and home 
              directories <b>.sh_history</b>, as well as checking out the system, 
              the only damage shown was the creation of the root back door and 
              some permission changes to database files. I copied the <b>/etc/passwd</b> 
              file, removed the root back door from the active <b>/etc/passwd</b> 
              file, changed the root password on all of the systems, and printed 
              out my evidence from the saved password file, pertinent history 
              file, and the sulog file.
            <p> After removing the security holes, I gathered the evidence and 
              informed the IT Director. With all of the evidence from these tools, 
              the IT Director had no choice but to let this user go. The IT Director 
              was impressed with my proactive method of proving an improper root 
              access intrusion and rapid system recovery after the breach. There 
              were still lessons to be learned from this incident, however, and 
              I immediately created a way for the system to notify me of any root 
              back doors added to the <b>/etc/password file</b>.
            <p> The tools described here have not been tested on a Linux box, 
              but they should work with some script tweaking. The methods have 
              been tested on IBM AIX, HP-UX, and Solaris platforms for this sample. 
              Here is the setup:
            <p> <b>Step 1: Forcing an su to root</b>
            <p> For all of these tools to work, you must prohibit users from logging 
              in as root. In other words, you must force users to access root 
              through the <b>su -</b> command. This will cause an entry in the 
              <b>/var/adm/sulog</b>, which will provide the name of the user trying 
              to breach root access security. It will also create a separate file 
              in a specified directory that contains the intruder's command-line 
              history (explained in step 2). If you choose not to force <b>su 
              -</b> to root, the notification tools can still be used (steps 3 
              and 4). The following methods will force an su to root, making it 
              so that a direct login as root can only be done at the console.
            <p> 
            <p> AIX: You can use SMIT, security users, change user for root, and 
              mark remote login to be "false". If you are using NIS 
              on your systems, I recommend investigating this further because 
              SMIT will use the "change user command" (<b>chuser</b>). 
              The chuser man page recommends not using this command if you are 
              running NIS because <b>chuser</b> only changes local files, not 
              NIS files.
            <p> HP-UX: Create the file <b>/etc/securetty</b> and add the word 
              <b>CONSOLE</b>. Change permission on the file by doing a <b>chmod 
              600 /etc/securetty</b>, thereby requiring root access to change 
              this file.
            <p> Solaris: Ensure the entry <b>CONSOLE=/dev/console</b> is placed 
              uncommented in the <b>/etc/default/login</b>. Permissions to the 
              <b>/etc/default/login</b> file should be set so that no one can 
              change this file except root, but the file can be read by all. You 
              may try <b>chmod 444 /etc/default/login</b>.
            <p> <b>Step 2: Capturing Individual root Login Command-Line History</b>
            <p> To catch an intruder and the commands he executes, root's 
              <b>.profile</b> must be revised to include the creation of separate 
              command-line histories for each root login. This is accomplished 
              by adding the script in Listing 1 and setting the login shell to 
              be the Korn shell (<b>ksh</b>) in the <b>/etc/passwd</b> file.
            <p> Solaris: You can place the login shell of <b>/bin/ksh</b> in the 
              <b>/etc/passwd</b>, replacing the default of <b>/sbin/sh</b>. Don't 
              make the mistake (as I did) of typing <b>/sbin/ksh</b> -- this 
              is an invalid shell and you won't be able to log in as root.
            <p> Be sure to close down root's <b>.profile</b> permissions 
              by doing a <b>chmod 700 .profile</b> so that root is the only one 
              who can change or read root's <b>.profile</b>. This keeps everyone's 
              command-line histories separate while using the Korn shell <b>esc 
              k</b> command-line history option. If the user or intruder does 
              not use the <b>su - </b>when switching to root, these command-line 
              histories will be kept in the intruder's home directory (<b>.sh_history</b>) 
              file. This makes intrusion investigation difficult (if not impossible), 
              because the intruder can clean up his <b>.sh_history</b> file. If 
              this is a critical point and educating users to enforce the <b>su 
              - </b>is unmanageable, you may choose to use the <b>sudo</b> tool 
              for regular users wanting root access for specific purposes, and 
              enforce the <b>su - </b>for the admins only.
            <p> In this sample, I use the directory name <b>/var/adm/hist</b>, 
              since other system logging is kept in <b>/var/adm</b>. You can use 
              any name for the directory name. Be sure that you <b>chmod 777</b> 
              the directory so that everyone has write permission. I also did 
              a <b>chown root:sys /var/adm</b> on AIX and HP, and <b>root:other</b> 
              for Solaris. The file name consisting of the su entry and date:time-year 
              (<b>rthorne-root@13:42:20-021302</b>) is necessary for pinpointing 
              and proving the intrusion. Don't forget to set a root crontab 
              entry to clean out the <b>hist</b> files, which accumulate and take 
              up space. I set my root crontab to remove any <b>hist</b> files 
              over 30 days old, because I should know if a root access breach 
              has occurred before that time elapses.
            <p> <b>Step 3: Notification of su Activity</b>
            <p> Listing 2 checks the <b>/var/adm/sulog</b> file for su's 
              to root attempted for this date and reports them via email. Remember 
              that a plus sign (+) in the sulog means a successful su, and a minus 
              sign (-) means an unsuccessful su (but it still needs investigation). 
              The reporting function can be changed to the method by which you 
              want to be notified. I have made an entry in the <b>/etc/mail/aliases</b> 
              file for <b>sysadmin2</b>, but you could hardcode the notification 
              address in the script. Place an entry in the root crontab file to 
              run this script on the frequency of your choice, but run it before 
              midnight because it checks for su's for today's date. 
              In this sample, I have simply called this entry <b>security.chk</b>. 
              Keep in mind that an intruder may check the crontab for anything 
              checking for intruders.
            <p> 
            <p> Solaris: For the <b>grep -e</b> to work, you must have <b>/usr/xpg4/bin</b> 
              in the root <b>.profile PATH</b> or hardcode this entry in your 
              script (<b>grep `date +$m/%d` /var/adm/sulog | /usr/xpg4/bin/grep 
              -e "-root"</b>).
            <p> <b>Step 4: Checking the /etc/password File for Root Back Doors</b>
            <p> In Listing 3, the password file will be searched for root back 
              doors. As in step 3, you can be notified in any manner. I choose 
              to be paged when a back door has been detected. I have also placed 
              an <b>/etc/mail/aliases</b> entry for <b>sysadmin-page</b>, but 
              you can hardcode the notification address in the script. Place an 
              entry in the root crontab file for the frequency that you would 
              like to be notified if any root back doors are found. Remember to 
              name this script so that the intruder isn't aware of the check 
              for root back doors while reading a crontab listing. There are some 
              sys admins who have root back door passwd entries for administration 
              reasons. If you are one of those, be sure to change <b>-gt 1</b> 
              to the number of root passwd entries that is normal for your site.
            <p> 
            <p> AIX: Change the count line in the script to be the <b>:0:0:</b>, 
              which is the UID/GID of root. By only looking for <b>:0:</b>, the 
              script could report erroneous findings.
            <p> HP-UX: Change the count line in the script to be <b>:0:3:</b>, 
              which is the UID/GID for root, because some systems use the UID 
              of 0 for the user system.
            <p> Solaris: Change the count line in the script to be <b>:0:1:</b>, 
              which is the UID/GID for root, because some systems use the UID 
              of 0 for the user system. For the <b>grep -e</b> to work, you must 
              have <b>/usr/xpg4/bin</b> in the root <b>.profile PATH</b>, or hardcode 
              this entry in your script as shown in step 3.
            <p> <b>Conclusion</b>
            <p> I hope that you find these tools useful. Proactive security notification 
              tools help keep you informed when there is a root access intrusion 
              on your system, but I also hope you never need to use the information 
              that these tools can give you. <i>That</i> would be a sys admin's 
              dream.
            <p> <i>Rhonda Thorne has been working for more than nine years as 
              a UNIX sys admin. She holds several certifications in IBM AIX and 
              HP-UX and is working on the Solaris SCSA certification. Rhonda is 
              currently working with Solectron Global Services in Memphis, Tennessee. 
              She can be contacted at: <b>rhondathorne@mem.slr.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
