<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i08: SNAREing Intruders in Linux</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2002/aug2002.tar"><b class=codeListing>aug2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a1.gif" width="200" height="174" align="right">SNAREing 
              Intruders in Linux</b></h1>
            <p> <i>Kristy Westphal</i>
            <p> The Solaris operating system has the BSM (Basic Security Module) 
              to enable granular-level kernel logging, and now there's a 
              tool for Linux, too. SNARE is a new host-based Intrusion Detection 
              System (IDS) made especially for Linux. When I first heard about 
              SNARE, I decided to install it and try it out. Through my tests, 
              I found it to be a pretty good plug-in for auditing kernel events 
              on Linux. Besides that, it's free, easy to set up, and easy 
              to deploy. This article will show how to install SNARE, how to test 
              it, and suggest some uses for the tool on your Linux boxes.
            <p> SNARE, which stands for System iNtrusion Analysis and Reporting 
              Environment, is made by InterSect Alliance, an Australian IT security-consulting 
              firm. According to the Web site (<b>http://www.intersectalliance.com/projects/Snare</b>), 
              the company began the SNARE project to "enhance the security 
              of the Linux operating system by providing a comprehensive event 
              logging facility". They explained that one reason Linux is 
              not typically being deployed across more IT enterprises is the lack 
              of comprehensive logging tools. Thus, they created <b>auditd</b>, 
              a tool that works as a dynamically loadable kernel module that runs 
              as a daemon.
            <p> More specifically, the "comprehensive event logging facility" 
              that they refer to includes logging of:
            <p> 
            <p> 
            <ul>
              <li> Opening and accepting network connections 
              <li> Reading or writing to files and directories 
              <li> Modifications to a user's identity or group 
              <li> Modifications to program usage
            </ul>
            <p> Depending upon how you configure SNARE, you can detect when a 
              user or attacker has stopped a key program, switched to the root 
              account, or even installed files in a key system directory. Furthermore, 
              SNARE can audit system calls themselves, such as when files are 
              opened or renamed, when a chroot or reboot is executed, or when 
              <b>mkdir</b> or <b>mknod</b> is used.
            <p> <b>Installation</b>
            <p> Installing a host-based intrusion detection system will not protect 
              any system by itself. This article assumes that the server on which 
              you install SNARE has already been hardened by turning off unnecessary 
              services, changing default file permissions, and installing the 
              latest patches.
            <p> Packages for the SNARE application can be found on InterSect's 
              Web site, <b>http://www.intersectalliance.com/projects/Snare</b>. 
              SNARE comes in two parts: the core package and the GUI. The rpms 
              for Red Hat 7.1 and 7.2 are available on the Web site, as well as 
              source rpms and code. I like to install from the source code to 
              make sure everything runs properly in my environment, so I downloaded 
              the latest release of source code, which happens to be version 0.9 
              (what InterSect has dubbed "Great Expectations"). That 
              gave me two gzipped tar files -- <b>snare-0.9.tar.gz</b> and 
              <b>snare-core-0.9.tar.gz</b> -- for my Red Hat 7.1 box.
            <p> Deciding that it made sense to install the core package first, 
              I gunzipped it:
            <p> 
            <pre>
gunzip snare-core-0.9.tar.gz
</pre>
            then untarred it:
            <p> 
            <pre>
tar xvf snare-core-0.9.tar
</pre>
            The SNARE distribution is small and includes the documentation that 
            is also available on InterSect's Web site. The <b>auditd</b> 
            daemon is already compiled, but you can simply type:
            <p> 
            <pre>
# make   clean
# make
# make   install
</pre>
            to get a fresh copy (which I highly recommend). The <b>auditd</b> 
            daemon will be installed to <b>/usr/sbin</b>, and an audit start/stop 
            script placed in the <b>/etc/init.d</b> directory. A link is then 
            created in the <b>/etc/rc2.d</b> directory for <b>S98audit</b> to 
            link back to the audit start/stop script. You can start the <b>auditd</b> 
            process by <b>cd</b>ing into the <b>/etc/init.d</b> directory and 
            typing:
            <p> 
            <pre>
# ./audit   start
</pre>
            when you're done compiling.
            <p> The GUI is a more standard compilation package. However, I do 
              not recommend following the generic instructions that are given 
              in the INSTALL file. Instead, <b>cd</b> into the <b>snare-0.9</b> 
              directory and follow the directions included in the core documentation 
              and install using:
            <p> 
            <pre>
# ./autogen.sh
# ./make
# ./make install
</pre>
            The GUI files will then be copied into the <b>/usr/local/share</b>. 
            Once this is complete, the GUI can be started by typing:
            <p> 
            <pre>
# snare &amp;
</pre>
            See Figure 1 for a screen shot of the GUI.
            <p> <b>Configuration</b>
            <p> Once SNARE is up and running, you must configure it. Like the 
              <b>syslogd</b> daemon has <b>syslog.conf</b>, the <b>auditd</b> 
              daemon has the <b>audit.conf</b> file. When installed, this file 
              is placed in the <b>/etc/audit</b> directory. I suggest that this 
              file be edited only via the GUI to ensure that it is formatted properly; 
              the file is somewhat intuitive, but this recommendation is a safe 
              one. To configure the file, you can go to the "Setup, Audit 
              Configuration" menu. Here you can change the following parameters:
            <p> 
            <p> AuditType -- Default is "Objective"; the other available 
              option is "Event"
            <p> HostID -- You can specify the name of a remote host to display 
              its SNARE log files
            <p> Objectives -- The granular levels of auditing that you want 
              to do
            <p> Events -- All possible kernel calls that you can audit
            <p> Output -- Where you would like to store the log file; the 
              default is <b>/var/log/audit/audit.log</b>
            <p> 
            <p> The <b>audit.conf</b> file consists of the same elements no matter 
              what you are auditing. When you have selected Objective auditing, 
              the rule file that is displayed will be applied. When you select 
              Event logging, the calls listed under the Event section will show 
              either a 0 or a 1 to indicate whether they are being logged. Note 
              that you can do Objective logging or Kernel logging, but you cannot 
              do both at the same time.
            <p> The real flexibility in SNARE, however, comes in the configuration 
              of rules through the Objective logging. Which type you choose will 
              depend on your reason for using the tool, but if you want to have 
              a lot of control over what is audited, then Objective auditing is 
              the way to go.
            <p> When you add an objective rule (click on the "Add an Objective" 
              button on the Current Objectives tab in Audit Configuration), you 
              can see the options for configuring rules (Figure 2). SNARE breaks 
              it into five steps:
            <p> 
            <p> 1. The high-level configuration 
            <p> 2. The filter by which you want to audit, which can include the 
              use of regular expressions (for a good discussion of regular expressions, 
              see <b>http://sunland.gsfc.nasa.gov/info/emacs/Regexps.html</b>)
            <p> 3. Whether you want to audit the event on success, failure, or 
              success and failure of the filter 
            <p> 4. Whether you want to audit the event for all users, selected 
              users, or audit users other than the ones that are "selected" 
              (accounts specified in the selected users area) 
            <p> 5. Which alert level you think this event should be
            <p> 
            <p> The options for alert levels range from Critical to Clear. Clear 
              indicates neither good or bad; it just notes that something happened. 
              Information notes that something good occurred and is indicated 
              by a green dot. Warning warrants a yellow dot; Priority is orange; 
              and Critical is red.
            <p> <b>Objective Logging</b>
            <p> The default Objective configuration certainly covers the basics 
              of what you may want to audit: it monitors read, write, or creating 
              of the <b>/etc/shadow</b> file; the writing or creating of the <b>/etc/passwd</b> 
              file; and read, write, or creating of the audit files. Further, 
              it monitors adjustments to files or directories in the <b>/sbin</b>, 
              <b>/usr/sbin</b>, <b>/bin</b>, and <b>/usr/bin</b> directories; 
              the use of the su program; acceptance of new connections; use of 
              the newgrp program; changes to the <b>/etc</b> and <b>/var/log</b> 
              directories; and opening of outgoing network connections. For a 
              more complete auditing system, I recommend monitoring some additional 
              files, which again depend upon your available resources and disk 
              space.
            <p> My primary focus when adding files to monitor is to include the 
              files that typically change when someone decides to install a rootkit 
              on your box. These files can include: <b>login</b>, <b>telnet</b>, 
              <b>ftp</b>, <b>netstat</b>, <b>ifconfig</b>, <b>ls</b>, <b>ps</b>, 
              <b>ssh</b>, <b>find</b>, <b>du</b>, <b>df</b>, <b>sync</b>, <b>reboot</b>, 
              <b>halt</b>, and <b>shutdown</b>. You could set up a rule to watch 
              for modification of each specific file to supplement the rule that 
              looks for writing or creating files in the <b>/sbin</b>, <b>/usr/sbin</b>, 
              <b>/bin</b>, and <b>/usr/bin</b> directories. This may seem like 
              overkill, but the default ruleset does not currently monitor this, 
              so potential problems may be overlooked.
            <p> Other files for which you might want to monitor modification activity 
              are the <b>/etc/lilo.conf</b>, <b>/etc/syslog.conf</b> (ironically), 
              <b>/etc/resolv.conf</b>, and <b>/etc/sendmail.cf</b> files. A change 
              to the <b>lilo.conf</b> file should cause concern if it gets modified, 
              especially if you haven't updated the kernel recently! A change 
              in the <b>resolv.conf</b> file might indicate that someone is trying 
              to have you resolve hosts at a DNS server that is not where you 
              want to resolve hosts. An attacker who wants to cover his or her 
              tracks may modify the <b>syslog.conf</b>. Also, if you are running 
              Sendmail, I recommend setting a filter for the <b>sendmail.cf</b> 
              file. Modifications here may indicate that someone is turning on 
              services that you do not want running in your Sendmail environment 
              (e.g., <b>VRFY</b> and <b>EXPN</b>), which can give away too much 
              information about your mail accounts.
            <p> You might also want to monitor any custom application files for 
              non-native applications running on your Linux server. You will probably 
              need to experiment with your ruleset to make sure that the hardware 
              platform that you are running on will handle the load, depending 
              upon how many files you want.
            <p> <b>Event (Kernel) Logging</b>
            <p> As mentioned previously, if you use kernel logging, be aware of 
              how much disk space is available and how much kernel logging you 
              actually do! There are many options that can be logged, and at the 
              kernel level, they can be very chatty.
            <p> The areas available through SNARE include: Resource Access and 
              Security, Command Execution, and Resource Creation and Deletion. 
              Resource Access and Security includes such calls as <b>setuid</b>, 
              <b>open</b>, <b>rename</b>, <b>chmod</b>, and <b>chown</b>. Command 
              Execution includes calls such as <b>chroot</b>, <b>reboot</b>, and 
              socketcalls. Resource Creation and Deletion includes <b>symlink</b>, 
              <b>create_module</b>, and <b>mknod</b>. These calls are audited 
              regardless of user. You can select them all, but this is recommended 
              only for servers that need a very detailed level of logging.
            <p> <b>Testing Your Configuration</b>
            <p> I tested both the Objective and Kernel logging to see how each 
              functions. I have learned that no matter how sure I am that I set 
              something up correctly, I still need to test it. In this case, I 
              did minimal testing (Objective, used the default <b>audit.conf</b> 
              file; and Event, used the selective kernel calls) to get the feel 
              of how SNARE operated. Then, I logged in as a user and did some 
              maneuvering around the system to see what type of traffic I could 
              generate with <b>auditd</b>.
            <p> I tried to look at the <b>audit.conf</b> file and attempted an 
              outgoing <b>telnet</b> connection. The <b>audit.conf</b> file is 
              set to look for both these activities. I then looked at the audit 
              log itself, which logged quite a bit more information besides what 
              was shown in the GUI about the telnet sessions (e.g., what type 
              of call was made, the permissions on the program, what the return 
              code was). This may be something to remember while you review what 
              is displayed on the GUI. All of my actions were appropriately captured 
              through the filters.
            <p> I puttered around with a few more items, such as changing a user's 
              password. This action was not noted in the log because root is excluded 
              from this rule in the configuration. Then, I <b>su</b>'d over 
              to a user (noted), changed my <b>passwd</b> (noted), and tried to 
              relocate the <b>ls</b> program to <b>/tmp</b>. Not only did I not 
              have permission to do so, the only error that came up in the log 
              was that the program <b>mv</b> had been executed. I added a rule 
              to watch for the modification of <b>/bin/ls</b>, tried my action 
              again, and this time it was captured.
            <p> <b>Kernel Testing</b>
            <p> The kernel testing took a lot more resources (as was promised). 
              As soon as I flipped it on, messages began chugging away on the 
              screen, and I hadn't even touched the keyboard yet! I selected 
              only a few calls to watch for: <b>open</b>, <b>setuid</b>, <b>setgid</b>, 
              <b>chown</b>, <b>link</b>, <b>mkdir</b>, <b>chroot</b>, and <b>exit</b>. 
              I attempted a few commands (i.e., made a directory, <b>chown</b>ed 
              a file, and linked the directory to a file in <b>/tmp</b>). I had 
              to turn off the open logging because the entries were running so 
              quickly past the screen from all of the open commands that I couldn't 
              read anything else!
            <p> Kernel logging takes a lot of tweaking to get what you really 
              want. However, it can certainly be useful if you need that level 
              of detail or if you just need to watch the performance of an application 
              on the system.
            <p> <b>Uses</b>
            <p> Many types of log files are available on Linux, but SNARE allows 
              for a much more granular logging than you can do with syslog. While 
              syslog looks more at kernel and processes (mail, daemon, printing, 
              and authorization), SNARE looks at connections, file access, and 
              file modification. Additionally, SNARE is more flexible in setting 
              up its rules -- you can use regular expressions to create filters, 
              whereas you cannot do this in the native syslog.
            <p> One way to foil hackers when they go through log files and try 
              to clean up their trails is to create a secure, central log server. 
              SNARE is ideal for this type of configuration -- only a few 
              clicks away through the GUI. This logging can be accomplished in 
              the Audit Configuration screen, where you can either log locally, 
              log to a networked host, or to both. Which option you choose can 
              depend on how much disk space you have on your host, how much disk 
              space you have on your remote host, and how your network connection 
              to the loghost is configured. You might consider having a separate 
              VLAN to the loghost, because the traffic will be running UDP and 
              can be quite chatty depending on the extent of your configuration 
              file.
            <p> SNARE is not a typical host-based intrusion detection system. 
              Many host-based IDSs run on the premise that they store the MD5 
              checksums of key files on your system in a database. When you suspect 
              a problem, you re-run the script to check the checksums and see 
              what has changed since the original run of the script. SNARE looks 
              in real-time to see whether they have changed, and can notify administrators 
              via email when an event occurs. SNARE is configurable down to what 
              type of alerts that you want (based on Critical-, Warning-, Priority-, 
              Information-, or Clear-level of message) and the maximum number 
              of messages that should be sent per hour.
            <p> There are other uses for this type of IDS. SNARE would be a valuable 
              tool for putting together a homemade honeypot. You could rename 
              the daemon to something else and let it collect data on the files 
              that you want to watch on the system. (Note that if you do decide 
              to rename the daemon, you should also reconfigure the startup files, 
              as it looks for an <b>auditd</b> process.) Furthermore, you can 
              set auditing on actions that normal log files don't record 
              (e.g., when a user opens a network connection, or when a connection 
              is accepted). This can be extremely useful when running a honeypot.
            <p> Audit logs like this can also assist in incident handling and 
              forensic investigations. Again, if you rename the daemon to something 
              other than audit, the intruder might not recognize the audit daemon 
              and happily continue pillaging your system. You would then have 
              a nice record of everything the intruder touched!
            <p> Policy compliance might be an excellent reason to have SNARE enabled 
              on your Linux boxes. If your information security policy at your 
              site includes the control of the root account -- whether log 
              files are reviewed on a frequent basis or how accounts are added 
              -- the <b>auditd</b> daemon can assist in monitoring these types 
              of actions on the system. These logs can be reviewed by an auditor 
              to ensure that your site is actually doing what it's supposed 
              to do!
            <p> Auditing and legal requirements are another reason to have this 
              type of logging. If you need C2-compliant logging, or you need to 
              retain detailed logging information for legal purposes, then this 
              setup might enable you to be more flexible with the type of operating 
              system that you can implement in your environment.
            <p> <b>Advantages and Disadvantages</b>
            <p> The disadvantages of SNARE are few, but could be significant depending 
              on your environment. First, SNARE chews up some CPU and memory, 
              and can grab even more when it gets busy. This will be a trade off 
              with the amount of configuration you set up in your <b>audit.conf</b> 
              file. Second, it works only with newer kernels, so if you are running 
              anything older that Red Hat 7.1, you may be out of luck, unless 
              you can get it to compile! The third disadvantage that I see is 
              that it seems to also have difficulty working on older equipment. 
              If you are deploying Linux on older equipment, you may need to experiment 
              to see whether you can spare the CPU cycles.
            <p> The advantages are fairly significant for the over-burdened systems 
              administrator. SNARE is incredibly easy to set up. It's easy 
              to deploy. After you set up your <b>audit.conf</b> file and your 
              distribution is compiled and running, you can simply <b>tar</b> 
              those files and distribute accordingly to your other servers. Putting 
              the startup files in their appropriate place can be done by script. 
              Best of all -- it's free!
            <p> <b>Conclusions</b>
            <p> SNARE is a nice tool that Intersect Alliance has provided the 
              Linux community. It is configurable, portable, and easy to use. 
              SNARE is not a fancy host-based IDS that monitors specific ports 
              and closes threatening connections. It is a more comprehensive kernel-logging 
              tool, and although it may steal some CPU, memory, and disk space, 
              it will greatly simplify auditing (and a few other things) on Linux.
            <p> For more information about SNARE, see: <b>http://www.intersectalliance.com/projects/Snare</b>
            <p> For information on Solaris BSM, see: Auditing in the Solaris 8 
              Operating Environment --<b>http://www.sun.com/solutions/blueprints/0201/audit-config/pdf</b>
            <p> "Implementing C2 Auditing in the Solaris Environment", 
              by Kevin Wenchel and Stephen Michaels (<i>Sys Admin</i>, November 
              2000) -- <b>http://www.samag.com/documents/s=1157/sam0013d/</b>
            <p> <i>Kristy Westphal is a versatile network administrator, skilled 
              in troubleshooting and process analysis. Her 8+ years of experience 
              in the IS field have allowed her to become knowledgeable in UNIX 
              and NT, as well as project management and security/disaster recovery 
              planning. She currently works as Information Security Officer for 
              Pegasus Solutions. She can be reached at: <b>ckwestphal@cox.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >
<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
