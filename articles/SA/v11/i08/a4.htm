<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v11, i08: SNIPS</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2002/aug2002.tar"><b class=codeListing>aug2002.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/netadmin.gif" width="150" height="150" align="right">SNIPS</b></h1>
            <p> <i>Ron McCarty</i>
            <p> SNIPS, or System and Network Integrated Polling Software, is Netplex 
              Technologies' revamp of Network Operations Center On-line (nocol), 
              which I wrote about in the August 2000 Net Admin column. SNIPS is 
              a network-monitoring tool that provides both a command-line and 
              Web interface to monitoring alarms. SNIPS provides alarm levels 
              that provide an escalation of conditions based on the number of 
              failures. This allows flexibility in reporting and prevents one-time 
              anomalies (such as a network engineer resetting an Ethernet port) 
              from creating alarms for network services that were temporarily 
              unreachable while the Ethernet port was resetting.
            <p> SNIPS architecture logically can be divided into the monitoring 
              function and alarming function. The monitoring function is responsible 
              for determining whether services are running and reporting the status, 
              which can be viewed in real-time by the systems administrator through 
              a terminal or Web interface. The alarming function (actually an 
              API from SNIPS that logs the change of status) can then be alarmed 
              or simply stored for historical purposes. (The logging portion can 
              actually run on another system.)
            <p> SNIPS comes with more than 25 monitors for monitoring both network 
              elements (etherload, ciscomon, bgpmon) and system service elements 
              (WWW, email, name services). The monitoring levels supported by 
              SNIPS are: info, warning, error, and critical. These alarms are 
              based on escalations of the previous level (i.e., warning is considered 
              worse than info, and critical is the highest level).
            <p> <b>SNIPS Installation</b>
            <p> SNIPS runs on most versions of UNIX. For this particular installation, 
              Red Hat 7.3 was used. SNIPS can be downloaded from <b>http://www.netplextech.com/software/downloads/snips/</b>. 
              Documentation for installation is included, but here is a short 
              overview.
            <p> As root, place the gzipped tar ball in <b>/usr/local/src</b> and 
              unzip it:
            <p> 
            <pre>
gunzip snips-1.1.tar.gz
</pre>
            Untar it and <b>cd</b> into the directory structure created from the 
            <b>tar</b> command:
            <p> 
            <pre>
tar xvf snips-1.1.tar
cd snips-1.1
</pre>
            Run <b>configure</b> and the <b>make</b> commands that will install 
            SNIPS into the <b>/usr/local/snips</b> directory, unless you tell 
            the configure script otherwise:
            <p> 
            <pre>
./Configure
make
make install
make root
</pre>
            Add the following entries to your <b>/etc/services</b> directory:
            <p> 
            <pre>
nipslog         5354/tcp        # snipslogd with TCP
snipslog        5354/udp        # snipslogd with UDP
hostmon         5355/tcp        # hostmon uses TCP
</pre>
            Edit the SNIPS config file <b>/usr/local/snips/etc/snips.conf</b> 
            and enter the following (or remove the comments from the existing 
            lines from the standard <b>snips.conf</b> file):
            <p> 
            <pre>
LOGHOST         localhost
DATADIR         /usr/local/snips/data
CONFIGDIR       /usr/local/snips/etc
PIDDIR          /usr/local/snips/run
</pre>
            (If you keep your log files in <b>/var</b>, then you can point the 
            <b>DATADIR</b> to the appropriate location or link the <b>/usr/local/snips/data</b> 
            directory to the appropriate location.)
            <p> Create the snips user. The snips user can be used for a standard 
              login for operators to monitor the system through a terminal window. 
              The following command will create the user and add the <b>snipstv</b> 
              as the shell, which will start the snips text viewer (<b>tv</b>) 
              when the operator logs in. Use the following command to create the 
              user:
            <p> 
            <pre>
useradd -d /tmp -s /usr/local/snips/bin/snipstv snips
</pre>
            Change the password of user snips as appropriate. (Some administrators 
            choose not to give it any password, which allows operators to log 
            in and immediately be given the SNIPS terminal interface (<b>snipstv</b>) 
            since it has been set as snips default shell.)
            <p> Now a simple connectivity monitor using ippingmon can be created. 
              SNIP config files are stored in the <b>etc</b> subdirectory of the 
              application directory (<b>/usr/local/snips/etc/</b>). Create a file 
              called <b>ippingmon-confg</b> with the following entries. (Change 
              router1's IP address into an IP address on your network that 
              answers, and use a non-existing IP address for router2 to see SNIPS 
              in action when router2 does not respond:
            <p> 
            <pre>
POLLINTERVAL  300
PACKETSIZE  100
NPACKETS 5
PKT_THRESHOLDS  3       2       1
RTT_THRESHOLDS  100     500     1500
router  192.168.1.1
router2 192.168.1.2
</pre>
            These entries tell ippingmon how often to run and how to determine 
            the monitoring level alert if changes occur. The <b>POLLINTERVAL</b> 
            tells ippingmon to run its test every 5 minutes (300 seconds) and 
            to use an ICMP package size of 100 bytes. <b>NPACKETS</b> determines 
            the number of packets to send with the ICMP echo request (<b>ping</b>). 
            The <b>PKT_THRESHOLDS</b> and <b>RTT_THRESHOLDS</b> determines when 
            the ippingmon should change levels. The <b>PKT_THRESHOLDS</b> tells 
            ippingmon the number of packets (echo replies) that will cause a change 
            of level. In this case, if three packets were received, the level 
            would change from info to warning; but if only two packets were received, 
            the level would change to error.
            <p> The <b>RTT_THRESHOLDS</b> stands for round-trip time and is defined 
              in milliseconds (in this case, 100, 500 (1/2 second), and 1500 (1.5 
              seconds)). If a packet took more than 1.5 seconds to be received, 
              then the level would change to critical.
            <p> ippingmon allows each host to have specific settings of <b>PKT_THRESHOLDS</b> 
              and <b>RTT_THRESHOLDS</b> by placing values on the particular line:
            <p> 
            <pre>
router2 192.168.1.2     3 2 1 100 500 1500
</pre>
            The <b>3 2 1</b> is the <b>PKT_THRESHOLDS</b> entry for router2, and 
            the <b>100 500 1500</b> is the <b>RTT_THRESHOLDS</b>.
            <p> Once the <b>/usr/local/snips/etc/ippingmon-confg</b> is created, 
              the ippingmon can be started:
            <p> 
            <pre>
/usr/local/snips/bin/ippingmon &amp;
</pre>
            The results of the ippingmon can be seen by telneting to the system 
            and logging in as snips (or <b>su</b>'ing to snips). The various 
            levels can be seen by typing "L", and then the level. For 
            example, pressing "L" and "4" will give a screen 
            similar to that shown in the Figure 1.
            <p> In addition to the basic connectivity shown with ICMP above, SNIPS 
              can be used to monitor many services. In this article, I'll 
              cover the ones that are commonly within the realm of UNIX sys admins.
            <p> <b>DNS Monitoring</b>
            <p> Domain name services are often implemented on UNIX systems, but 
              regardless of the OS providing the name services, the SNIPS DNS 
              monitor (nsmon) can monitor DNS servers.
            <p> The nsmon-confg file is straightforward, with a minimum of four 
              entries: a <b>POLLINTERVAL</b>, a <b>DOMAINNAME</b>, and a host 
              entry that is made up of a host name and IP address. For example, 
              the following entry will monitor the BIND daemon running on <b>sunny.mcwrite.net</b>:
            <p> 
            <pre>
POLLINTERVAL         600
DOMAINNAME           mcwrite.net
sunny.mcwrite.net    192.168.1.252
</pre>
            The DNS monitor can then be started much like the ippingmon:
            <p> 
            <pre>
/usr/local/snips/bin/nsmon &amp;
</pre>
            The results can also be seen the same as with ippingmon -- telnet 
            to the system as snips or use the Web, which will be covered later.
            <p> <b>TCP Services</b>
            <p> Services that use the TCP protocol can be monitored using the 
              portmon monitor. Its configuration is similar to both the ippingmon 
              and the nsmon, but the connect and disconnect strings must be provided 
              in the <b>portmon-confg</b>. For example, to monitor client email 
              (POP3), the following <b>portmon-config</b> can be used:
            <p> 
            <pre>
POLLINTERVAL    600
TIMEOUT         30
SIMULCONNECTS   64

HOST  sunny.mcwrite.net 192.168.1.252   SMTPport  25   Critical  HELO portmon.test
info    250
QUIT    quit
</pre>
            <b>Web Viewing</b>
            <p> For the above examples, the snips user account was used for viewing 
              SNIPS reporting activity. This section covers the configuration 
              of SNIPS to use a Web server to display the results. SNIPS should 
              function with any Web server that supports CGI. If CGI is not preferred, 
              the script can be run as part of a cron job, and content created. 
              With the steps below, either method can be used.
            <p> There are two subdirectories in the <b>/usr/local/snips/web</b> 
              directory: <b>cgi</b> and <b>html</b>. The contents of the <b>cgi</b> 
              directory need to go to the <b>webs cgi-bin</b> directory, and the 
              files in the <b>html</b> directory need to be copied into the snips 
              subdirectory within the <b>html</b> document tree of the Web server. 
              The following steps will perform this task with Apache running under 
              Red Hat 7.3:
            <p> 
            <pre>
cd /usr/local/snips/web
cp -R cgi/* /var/www/cgi-bin/
mkdir /var/www/html/snips/
cp -R html/* /var/www/html/snips/
</pre>
            To see immediate results, the <b>genweb.cgi</b> can be run, which 
            will create html documents for each of the four levels (info, warning, 
            error, and critical):
            <p> 
            <pre>
/var/www/cgi-bin/genweb.cgi
</pre>
            The results can be seen by pointing a browser to the particular html 
            file in the Web server's snips subdirectory:
            <p> 
            <pre>
http://righty.mcwrite.net/snips/Info.html
http://righty.mcwrite.net/snips/Earning.html
http://righty.mcwrite.net/snips/Error.html
http://righty.mcwrite.net/snips/Critical.html
</pre>
            Figure 2 shows and example <b>Critical.html</b> output. These pages 
            are linked to each other for easier navigation, but an <b>index.html</b> 
            could also be created as a table of contents for the four pages.
            <p> As mentioned, the <b>genweb.cgi</b> can be run as part of cron. 
              To add it, run the following as root:
            <p> 
            <pre>
crontab -e
</pre>
            and then enter the following into the crontab:
            <p> 
            <pre>
0-59 * * * * /var/www/cgi-bin/genweb.cgi
</pre>
            The script will then run every minute.
            <p> <b>Loose Ends</b>
            <p> This article did not cover the automatic startup of the monitors. 
              The monitors can be started as part of the System V startup scripts. 
              Additionally, the keepalive_monitors.pl script in the <b>/usr/local/snips/bin/</b> 
              directory can also be run as part of snips crontab to ensure all 
              monitors are running. External alerts were not covered, but are 
              also supported by SNIPS.
            <p> SNIPS uses two aliases -- snips-ops and snips-admin -- 
              that require aliases to be set up with your mail transport agent 
              (typically <b>/etc/aliases</b> or <b>/etc/mail/aliases</b>).
            <p> <b>SNIPS Fit</b>
            <p> SNIPS is an ideal monitoring tool in small and some mid-sized 
              operations, and it can probably be maintained by a sys admin or 
              net admin without creating too much additional work. SNIPS can also 
              be used in large organizations to monitor specific areas (such as 
              all Web servers); however, the standard monitoring tools do not 
              encompass enough services for it to be deployed as the standalone 
              network monitoring solution, "out-of-the-box". Larger 
              organizations require tools that are application- and system-centric 
              monitoring (e.g., email queues, database performance, and other 
              monitoring), which require more than knowing simply whether the 
              service is running.
            <p> <i>Ronald McCarty received his bachelor's degree in Computer 
              and Information Systems at the University of Maryland's international 
              campus at Schwaebisch Gmuend, Germany. He works for Sonus Networks 
              as a senior systems engineer on a customer team responsible for 
              a major telecommunications carrier. Ron is the co-author of New 
              Rider's Linux Routing (<b>http://www.linuxroutingbook.com/</b>). 
              He spends his free time with his two best friends in the world: 
              his daughter, Janice, and his wife, Claudia. Ron can be reached 
              at: <b>ronald.mccarty@gte.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
