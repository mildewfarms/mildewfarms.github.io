<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v04, i05:  procmon: A Process Monitor</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a9_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a9_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a9_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a9_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a9_f6.htm">Figure 6</a></span></td>
		<td><span class=navbarLink><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1995/sep95.tar"><b class=codeListing>sep95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>procmon: A Process Monitor</H1><p>
<P>
Chris Hare<P>

Anyone responsible for maintaining a UNIX system must
be concerned 
with ongoing processes, that is, those that are started
when the system 
is brought up and that we never want to exit. Sometimes,
however, 
that just isn't possible. Processes die, and some of
the reasons for 
this include maximum parameters being reached, programming
errors, 
or a system resource not being available when needed.<P>

For some processes, you can combat this situation by
using the /etc/inittab 
file on System V systems. /etc/inittab contains a list
of 
processes that are to be executed when the system enters
a run level, 
and specifies what to do when the process exits.<P>

The inittab file consists of four colon-separated fields:<P>
<PRE>
identifier:run levels:action:command</pre><p>
<p>
A sample /etc/inittab file is shown in Figure 1.<P>

inittab is a powerful mechanism, but it is found only
on System 
V variants of UNIX. In addition, /etc/inittab and the
init 
command give no indication that the process has exited
and been restarted 
unless the process continuously dies and init prints
a message 
on the console. The message is typically something like
&quot;Command 
is respawning too rapidly.&quot;<P>

BSD-based operating systems, such as SunOS, BSD/OS from
BSD Inc, FreeBSD 
and others, do not use /etc/inittab to control processes
spawned 
by init.<P>

The problem then becomes &quot;How can I provide a system-independent

method of monitoring and restarting critical system
processes?&quot; 
The answer is procmon.<P>

<B>Introducing procmon</B><P>

procmon is a perl script that is started during system

startup, and runs for the life of the system. It has
been written 
to be a system daemon, and it behaves as such. The purpose
of this 
program is to monitor the operation of a set of defined
processes, 
and if they are not present in the process list, to
restart them. 
It also logs its actions, noting when the process fails
and when it 
is restarted. A sample log, which is generated through
the UNIX syslog 
facility, is shown in Figure 2.<P>

The syslog output shows procmon starting up and recording

what it is doing. The goal here is to capture as much
logging information 
as possible about the process being monitored, in this
case named.<P>

<B>Automatically Starting procmon</B><P>

The benefit of a program such as procmon can only be
realized 
when the program is started at system boot time. How
this is accomplished 
depends upon the UNIX variant you are using. On System
V systems, 
the lines shown in Figure 3 are added to /etc/rc2, or
to a 
file in the /etc/rc2.d directory, which is the preferred
method.<P>

procmon is a daemon process. It handles all of the system

signals, and disconnects itself from a controlling terminal.
When 
procmon starts, it prints a line indicating what configuration

parameters it is using, and then quietly moves to the
background. 
All logging at this point is accomplished through the
UNIX syslog 
facility. The output printed when procmon starts is
shown 
in Figure 4.<P>

<B>The procmon Files</B><P>

procmon uses two configuration files: procmon.cfg 
and procmon.cmd. Of the two, only procmon.cmd is absolutely

necessary. If procmon.cfg exists, then it will be used
to 
alter the base configuration of the program. I will
discuss these 
files in detail here.<P>

<B>The procmon Configuration File</B><P>

The default configuration file is /etc/procmon.cfg.
If this 
file is not found when procmon starts, then it uses
the default 
parameters built into the program. This configuration
file is intended 
to provide a mechanism for the system administrator
to change the 
location of the procmon.cmd file and the delay between
checking 
the commands in the list. <P>

If no /etc/procmon.cfg file is found, then the program
looks 
in the /usr/local/bin directory for procmon.cmd and

uses a delay of five minutes between checks. The sample
procmon.cfg 
file shown in Figure 5 illustrates using a delay of
15 minutes (900 
seconds), and a configuration directory of /etc. Notice
that 
the delay value is in seconds, not minutes.<P>

The /etc/procmon.cfg file is not processed by procmon;

if it exists, it is loaded into procmon by perl. This
means 
that comments using the # symbol are supported, and
the last 
line of the file must contain the command 1; to signify
the 
end of the the loaded file. <P>

The reason for using this configuration file is that
the parameters 
of the program can be modified without having to affect
the source 
code. The delay_between variable is used to define the
amount 
of delay between processing the list of commands. For
example, if 
the delay_between variable is 300, then there will be
a pause 
of 300 seconds between processing.<P>

The ConfigDir variable defines to procmon where 
the procmon.cmd file is located. The program defaults
to looking 
for it in /usr/local/bin. The sample in Figure 6 places

the file in /etc.<P>

If you look at Listing 1, the procmon source code, you
will 
see <P>
<PRE>
require &quot;/etc/procmon.cfg&quot;;</pre><p>
<p>
which is how the configuration file is loaded into procmon.

The perl require command causes perl to read the named

file, procmon.cfg, into the current program. This is
a powerful 
feature of perl, and it allows developers the freedom
to concentrate 
on the problem they are trying to solve, rather than
on the mundane 
task of processing configuration files.<P>

<B>The procmon Command File</B><P>

The procmon command file contains the list of processes

that are to be monitored. It contains two exclamation
mark (!)-separated 
fields: the pattern to search for in the process list,
and the name 
of the command to execute if the pattern is not found.
A sample file 
is shown in Figure 6.<P>

In this file, procmon will be watching for named 
and cron. If named is not in the process list, then

the command /etc/named is started. The same holds true
for 
the cron command. Again, the purpose of using a configuration

file for this information is to allow the system administrator
to 
configure the file on the fly. If the contents of the
file change, 
then the procmon daemon must be restarted to read the
changes.<P>

<B>procmon Messages</B><P>

The syslog facility records several messages. These
messages are discussed 
below.<P>

<B>Startup Messages</B><P>

Startup messages are recorded by syslog when procmon

starts up. The appropriate information is substituted
for the values 
in &lt;value&gt;. The &lt;timestamp&gt; is replaced
by the current time through 
syslog. &lt;PID&gt; is the process identification number
of the 
procmon process, and &lt;system_name&gt; is the name
of the system, 
as recorded by syslog.<P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Process Monitor started
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Loaded config file
&lt;value&gt; &lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Command File:
&lt;value&gt; &lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Loop Delay=
&lt;value&gt; &lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Adding
&lt;value&gt; to stored process list &lt;timestamp&gt;
&lt;system_name&gt;
procmon[&lt;PID&gt;]: Monitoring : &lt;value&gt; processes</pre><p>
<p>
<B>Monitoring Messages</B><P>

These messages are printed during the monitoring process;
they represent 
the status of the monitored processes.<P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: &lt;process&gt; running as PID

&lt;PID&gt;</pre><p>
<p>
This record is printed after every check, and indicates
that the monitored 
process is running.<P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: &lt;process&gt; is NOT running</pre><p>
<p>
This record is printed when the monitored process cannot
be found 
in the process list. <P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: Last Failure of &lt;process&gt; @
&lt;time&gt;</pre><p>
<p>
This record is printed to record when the last (previous)
failure 
of the process was.<P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]: issuing
&lt;start_command&gt; to system</pre><p>
<p>
This record is printed before the identified command
is executed.<P>
<PRE>
&lt;timestamp&gt; &lt;system_name&gt; procmon[&lt;PID&gt;]:&lt;start_command&gt;
returns &lt;return_code&gt;</pre><p>
<p>
This command is printed after the command has been issued
to the system. <P>

Looking at the syslog may give you clues regarding the

status 
of things after the command was issued.<P>

<B>Enhancements and Deficiencies</B><P>

The procmon code in Listing 1 was written to run on
System 
V systems. It has been in operation successfully since
December 18, 
1994. However, some enhancements would be useful. For
example, it 
would be wise to report a critical message in syslog
if the 
command returns anything other than 0, since a non-zero
return 
code generally indicates that the command did not start.
Additionally, 
it would be better to include a BSD option to parse
the ps 
output, and add an option in the configuration file
to choose System 
V or BSD.<P>

<B>Conclusion</B><P>

The procmon script helps to ensure that operation-critical

applications remain in operation. While a similar mechanism
is available 
through /etc/inittab and the init command, not all 
systems support it. Moreover, it provides no logging
or history mechanism 
to determine if there is a significant problem to be
reviewed. <P>




<P>


<H1>About the Author</H1><p>
<P>
Chris Hare is the Operations Manager of fONOROLA i*internet,

a Canadian national Internet Access Provider. He is
the co-author 
of the books Inside UNIX and Internet Firewalls and
Network 
Security. Along with his full-time job and writing,
he is the president 
of the Unilabs Research Group, and is presently working
on his third 
book, The UNIX Professional Reference, for New Riders
Publishing. 
Chris can be reached at chrish@fonorola.net or chrish@unilabs.org.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
