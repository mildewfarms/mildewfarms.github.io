<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i05: Listing 1: procmon source code</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a9.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a9_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a9_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a9_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a9_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a9_f6.htm">Figure 6</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1995/sep95.tar"><b class=codeListing>sep95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: procmon source code</H1><p>
<PRE>
#!/usr/local/bin/perl
#
#
# This program requires the PERL ctime(PERL) library for generating date
# strings in the standard ctime format.
#
require &quot;ctime.pl&quot;;
#
# This program requires the syslog(PERL) library for successful delivery
# of logging information to syslog on the host machine.  What syslog does
# with the information is up to syslog and the how the administrator
# has it configured.
#
require &quot;syslog.pl&quot;;

#
# Look to see if the confiuration file for the process monitor is
# present in /etc.  If so, then load in the configuration file.
#
# If not, then use the default values, included here.
#
if ( -e &quot;/etc/procmon.cfg&quot; )
{
printf STDOUT &quot;Found /etc/procmon.cfg ... loading ...\n&quot;;
require &quot;/etc/procmon.cfg&quot;;
$loaded_config = &quot;/etc/procmon.cfg&quot;;
}
else
{
#
# 5 minute delay
#
printf STDOUT &quot;no config file... using defaults ...\n&quot;;
$delay_between = 300;
$ConfigDir = &quot;/usr/local/bin&quot;;
$loaded_config = &quot;&lt;DEFAULTS&gt;&quot;;
}

#
# This is the name of this program.  DO NOT CHANGE THIS.
#
$program = &quot;procmon&quot;;
#
# This is the name of the process list and command file
#
$command_file = &quot;$ConfigDir/procmon.cmd&quot;;

#
# Establish the signal handler
#
$SIG{'HUP'} = &quot;IGNORE&quot;;         # signal value 1
$SIG{'INT'} = &quot;IGNORE&quot;;         # signal value 2
$SIG{'QUIT'} = &quot;IGNORE&quot;;        # signal value 3
$SIG{'ILL'} = &quot;IGNORE&quot;;         # signal value 4
$SIG{'TRAP'} = &quot;IGNORE&quot;;        # signal value 5
$SIG{'IOT'} = &quot;IGNORE&quot;;         # signal value 6
$SIG{'ABRT'} = &quot;IGNORE&quot;;        # signal value 6, yes this is right!
$SIG{'EMT'} = &quot;IGNORE&quot;;         # signal value 7
$SIG{'FPE'} = &quot;IGNORE&quot;;         # signal value 8
$SIG{'KILL'} = &quot;DEFAULT&quot;;       # signal value 9, can't be caught anyway
$SIG{'BUS'} = &quot;IGNORE&quot;;         # signal value 10
$SIG{'SEGV'} = &quot;IGNORE&quot;;        # signal value 11
$SIG{'SYS'} = &quot;IGNORE&quot;;         # signal value 12
$SIG{&quot;PIPE&quot;} = &quot;IGNORE&quot;;        # signal value 13
$SIG{'ALRM'} = &quot;IGNORE&quot;;        # signal value 14
$SIG{'TERM'} = &quot;DEFAULT&quot;;       # signal value 15
$SIG{'USR1'} = &quot;IGNORE&quot;;        # signal value 16
$SIG{'USR2'} = &quot;IGNORE&quot;;        # signal value 17
$SIG{'CLD'} = &quot;IGNORE&quot;;         # signal value 18
$SIG{'CHLD'} = &quot;IGNORE&quot;;        # signal value 18, yes this is right too!
$SIG{'PWR'} = &quot;IGNORE&quot;;         # signal value 19
$SIG{'WINCH'} = &quot;IGNORE&quot;;       # signal value 20
$SIG{'PHONE'} = &quot;IGNORE&quot;;       # signal value 21, AT&amp;T UNIX/PC only!
$SIG{'POLL'} = &quot;DEFAULT&quot;;       # signal value 22
$SIG{'STOP'} = &quot;IGNORE&quot;;        # signal value 23
$SIG{'TSTP'} = &quot;IGNORE&quot;;        # signal value 24
$SIG{'CONT'} = &quot;IGNORE&quot;;        # signal value 25
$SIG{'TTIN'} = &quot;IGNORE&quot;;        # signal value 26
$SIG{'TTOU'} = &quot;IGNORE&quot;;        # signal value 27
$SIG{'VTALRM'} = &quot;IGNORE&quot;;      # signal value 28
$SIG{'PROF'} = &quot;IGNORE&quot;;        # signal value 29

#
# Close Standard Input and Standard output
#
close( STDIN );
close( STDOUT );
close( STDERR );

#
# open syslog for recording the startup messages as debug messages
#
&amp;openlog( $program, &quot;ndelay,pid&quot;, &quot;user&quot; );
#
# Record the startup of the monitor
#
&amp;syslog( info,  &quot;Process Monitor started&quot;);
&amp;syslog( info,  &quot;Loaded config file $loaded_config&quot;);
&amp;syslog( info,  &quot;Command File: $command_file&quot;);
&amp;syslog( info,  &quot;Loop Delay = $delay_between&quot;);
#
# Open the list of processes to be monitored.
#
if ( -e &quot;$command_file&quot; )
{
open( LIST, &quot;$command_file&quot; );
}
else
{
&amp;syslog( crit,  &quot;CAN'T LOAD COMMAND FILE : $command_file: does not exist&quot; );
exit(2);
}
#
while (&lt;LIST&gt;)
{
chop;
#
# we split because each entry has the name of the command that would be
# present in a ps -e listing, and the name of the command that is used to
# start it should it not be running.
#
# An exclamation point is used between the two fields in the file.
#
( $process_name, $start_process ) = split(/!/,$_ );
&amp;syslog( info,  &quot;Adding $process_name to stored process list&quot;);
#
# Save the name of the process being monitored into an array.
#
@process_list = ( @process_list, $process_name );
#
# save the start command in an associative array using the process_name
# as the key.
#
$start_commands{$process_name} = $start_process;
#
# The associative array last_failure is used to store the last failure time
# of the indicated process.
#
$last_failure{$process_name} = &quot;NEVER&quot;;
#
# The associative array last _start is used to store the time the process
# was last started
#
$last_start{$process_name} = &quot;UNKNOWN&quot;;
}
$num_processes = @process_list;
&amp;syslog( info,  &quot;Monitoring : $num_processes processes&quot;);

#
# Loop forever
#
while (1 == 1)
{
EACH_PROCESS:
foreach $process_name (@process_list)
{
#
# This program was originally written for AT&amp;T System V UNIX
# and derivatives.  (Someday I will port it to BSD versions!)
#
open( PS, &quot;ps -e | grep $process_name |&quot; ) || \
&amp;syslog( warn, &quot;can't create PS pipe : $!&quot;);
while (&lt;PS&gt;)
{
chop;
$_name = &quot;&quot;;
#
# There are a log of spaces in the PS output, so these have to
# be squeezed to one space.
#
tr/a-zA-Z0-9?:/ /cs;
#
# Read the PS list and process the information
#
( $junk, $_pid, $_tty, $_time, $_name ) = split(/ /,$_ );
#
# Check to see if we have any information
#
if ( $_name ne &quot;&quot; )
{
#
# We likely have the process running
#
#
# FRom here we go to the next process, as it is still
# running, and we have made a syslog entry to that
# effect.
#
&amp;syslog( &quot;info&quot;, &quot;$process_name running as PID $_pid&quot;);
close(PS);
next EACH_PROCESS;
}
#
# The process is not running, so record an entry in
# syslog.
#
}
close(PS);
&amp;syslog( &quot;crit&quot;, &quot;$process_name is NOT running&quot;);
#
# When did the process last fail?  Saving this allows the
# system administrator to keep tabs on the failure rate of
# the process.
#
&amp;syslog( &quot;crit&quot;, &quot;Last Failure of $process_name, @
$last_failure{$process_name}&quot; );
chop( $current_time = &amp;ctime(time) );
#
# Se the last failure to the current time.
#
$last_failure{$process_name} = $current_time;
#
# If we have a command to execute to restart the service,
# execute the command
#
if ( defined( $start_commands{$process_name} ) )
{
#
# record the sequence of event to restart the
# service in syslog.
#
&amp;syslog( &quot;crit&quot;, &quot;issuing $start_commands{$process_name} to system&quot;);
#
# execute the system command, and save the return code to decide
# if it was a clean start.
#
$retcode = system(&quot;$start_commands{$process_name}&quot;);
#
# Record the return code in syslog
#
&amp;syslog( &quot;info&quot;, &quot;$start_commands{$process_name} returns $retcode&quot;);
#
# Calculate the time in ctime(3C) format
chop( $current_time = &amp;ctime(time) );
$last_start{$process_name} = $current_time;
#
# Save the return code - it is in the sdtandard format, so must be
# divided by 256 to get the real return value.
#
$retcode = $retcode / 256;
}
}
#
# From here we have processed each of the commands in the monitoring list
# We will now pause for station identification .....
#
$secs = sleep($delay_between);
}

sub sig_handler
{
local ($sig) = @_;
&amp;closelog();
&amp;openlog( $program, &quot;ndelay,cons,pid&quot;, &quot;user&quot; );
&amp;syslog( &quot;crit&quot;, &quot;PROCESS MONITOR: SIGNAL CAUGHT SIG$sig-
TERMINATING&quot;);
&amp;closelog();
exit(0);
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
