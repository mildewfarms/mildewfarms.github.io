<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i05: Listing 3: qarcs wrapper script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink>Listing 3</span></td>
		<td><a href="../../../../source/SA/1995/sep95.tar"><b class=codeListing>sep95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 3: qarcs wrapper script</H1><p>
<PRE>
#!/bin/sh
#
#       $Id$
#
#       qarcs
#
#       Combine a set of RCS commands to use by the QA people.  QA needs
#       to archive entire directory trees efficiently and update those
#       trees for use on various test systems later.  The mkarc(1) script
#       creates such an archive and the dearc script extracts from such
#       an archive.  this script uses mkarc to create the archive when
#       needed or uses dearc to extract from the archive when needed.
#       Once the archive is available, the specific commands in this
#       script maintain the file using RCS.
#
#       This script supports common RCS commands depending on the program
#       name used to start this script.  Commands include:
#
#       qarco:          Check out an archive update for modification.
#                       Extract the tree from the archive.
#
#       qarget:         Get an archive without checking it out for
#                       modification.  Extract the tree from the archive.
#
#       qartoc:         Get an archive solely to read the table of
#                       contents.  Remove the checked-out copy when done.
#
#       qarci:          Check in an archive update after modification.
#                       Create the archive from the tree and then destroy
#                       the tree.
#
#       qarlog:         Print an archive's revision control log.
#
#       qarwhich:       Display a list of archives already checked in.
#
#       qarcs:          Modify an archive file's RCS attributes.
#
#       qarmerge:       Merge two archive revisions.
#
#       qarinstall:     Create the links for the program's invocation
#                       names.
#
#       qarhelp:        Print this script's usage.
#
#       Except for qarget, qarhelp, and qarinstall, these commands
#       correspond with the RCS commands named similarly.  The options
#       available to those commands are passed through to them by these
#       qar commands.  The tree archives are compressed and uuencoded.
#       No diff would report useful information.  See rcsintro(1) for an
#       overview of RCS and a crossreference to the other RCS commands
#       and their options.  There is no equivalent to rcsdiff provided.
#
#       Make the primary name qarinstall.  Then run qarinstall to
#       automatically create the links when installing it for the first
#       time.
#
#       Lawrence S Reznick -- 94Nov15

usage () {
echo &quot;Usage: progname [-P rcs] [-D dest]&quot; \
&quot;[-X] [-H] [rcs-opts] archivenames&quot;
echo
echo &quot;Archives compressed directory trees using rcs.&quot;
echo
echo &quot;Options:  See rcsintro(1) and other rcs man pages&quot; \
&quot;for rcs_options.&quot;
echo
echo &quot;-P: New path to hold the rcs archives ($QARCSDIR).&quot;
echo &quot;-D: New destination dir holding the tree ($DESTDIR).&quot;
echo &quot;-X: Turn on shell debugging.&quot;
echo &quot;-H: Get help from commands other than qarhelp.&quot;
echo
echo &quot;Program Names:&quot;
echo
echo &quot;qarco:    Check out an archive update for modification.&quot;
echo &quot;          Extract the tree from the archive.&quot;
echo
echo &quot;qarget:   Get an archive without checking it out for&quot;
echo &quot;          modification.  Extract the tree from the&quot;
echo &quot;          archive.&quot;
echo
echo &quot;qartoc:   Get an archive solely to read the table of&quot;
echo &quot;          contents.  Remove the checked-out copy when&quot;
echo &quot;          done.&quot;
echo
echo &quot;qarci:    Check in an archive update after modification.&quot;
echo &quot;          Create the archive from the tree and then&quot;
echo &quot;          destroy the tree.&quot;
echo
echo &quot;qarlog:   Print an archive's revision control log.&quot;
echo
echo &quot;qarwhich: Display a list of archives already checked in.&quot;
echo
echo &quot;qarcs:    Modify an archive file's RCS attributes.&quot;
echo
echo &quot;qarmerge: Merge two archive revisions.&quot;
echo
echo &quot;qarinstall:       Create the links for the program's&quot;
echo &quot;          invocation names.&quot;
echo
echo &quot;qarhelp:  Print this usage message.&quot;
echo
}

baddir () {
echo &quot;$1 isn't a directory!&quot; 1&gt;&amp;2
}

#
#       Main program starts here
#

progname=`basename $0`

#
#       Initialize variables
#

#
# Uncomment the complex RCSPATH assignment if rcs is in different paths
# on differing machines.  Otherwise, the GNU RCS files should be in
# /usr/local/bin.
#

#RCSPATH=`dirname \`type rcs | awk '{print $NF}'\``
RCSPATH=/usr/local/bin

QARCSDIR=/archive/RCS

CWD=`pwd`
DESTDIR=$CWD

QUIET=-q

OPT=

MANDOPT=                # I've always loved the term &quot;mandatory options&quot;

PREFIXCMD=
SUFFIXCMD=

if [ &quot;$progname&quot; = &quot;qarhelp&quot; ]
then
usage
exit 0
fi

#
#       Collect options
#
#       Must use the roundabout &quot;! -z&quot; syntax to pass hyphenated options
#       through the test program uninterpreted.
#

while [ ! -z &quot;$1&quot; ]
do
case &quot;$1&quot; in
-H)                     # Give help
usage
exit 0
;;

-P)                     # Set a different QARCSDIR
shift
QARCSDIR=${1:-$QARCSDIR}

if [ ! -d $QARCSDIR ]
then
baddir $QARCSDIR
exit 1
fi
;;

-D)                     # Set destination directory
shift
if [ &quot;$1&quot; - &quot;.&quot; ]
then
DESTDIR=$DESTDIR/.
else
DESTDIR=${1:-$DESTDIR}

if [ `expr &quot;$DESTDIR&quot; : &quot;\/&quot;` -ne 1 ]
then
DESTDIR=$CWD/$DESTDIR
fi
fi
;;

-X)                     # Set shell debugging on
set -x
QUIET=
;;

-*)                     # Pass on all other options
OPT=&quot;$OPT $1&quot;
;;

*)                      # Found dirtree
break
;;
esac
shift
done

#
#       Look at this script's name to see which command to run.
#       qarhelp has already been run.
#

case $progname in

qarinstall)                     # Recreate this script's links
for f in qarco qarget qartoc qarci \
qarlog qarwhich qarcs qarmerge qarhelp
do
ln -s $0 $f
chmod a+x $f
done
echo &quot;Links created:&quot;
ls -l qar*

mkdir $QARCSDIR
if [ ! -d $QARCSDIR ]
then
baddir $QARCSDIR
exit 1
fi
chmod 775 $QARCSDIR
exit 0
;;

qarco)                          # Check out an archive
CMD=co
MANDOPT=-l
SUFFIXCMD='dearc `basename $f .Z.uu`.Z.uu $DESTDIR'
SUFFIXCMD=$SUFFIXCMD' ; rm -f `basename $f .Z.uu`.Z.uu
;;

qarget)                         # Get an unmodifiable archive
CMD=co
SUFFIXCMD='dearc `basename $f .Z.uu`.Z.uu $DESTDIR'
SUFFIXCMD=$SUFFIXCMD' ; rm -f `basename $f .Z.uu`.Z.uu
;;

qartoc)                         # Check out only for the Table of Contents
CMD=co
SUFFIXCMD='dearc -t `basename $f .Z.uu`.Z.uu'
SUFFIXCMD=$SUFFIXCMD' ; rm -f `basename $f .Z.uu`.Z.uu
;;

qarci)                          # Check in an archive
PREFIXCMD='mkarc $DESTDIR $f'
CMD=ci
;;

qarlog)                         # Print an archive's log
CMD=rlog
QUIET=                  # Sun doesn't mind it; HP complains
;;

qarwhich)                       # List archive filenames
if [ ! -d $QARCSDIR ]
then
baddir $QARCSDIR
exit 1
fi

ls $QARCSDIR | egrep ,v | sed 's/,v//'
exit 0
;;

qarcs)                          # Change RCS file attributes
CMD=rcs
;;

qarmerge)                       # Merge two archive revisions
CMD=rcsmerge
;;

*)                              # Not a supported command
echo &quot;$progname: \&quot;$progname\&quot; is not one of the qarcs commands.&quot;
echo
usage
exit 1
;;
esac

#
#       Grab remaining arguments as directory tree archive names
#

if [ $# -eq 0 ]
then
echo &quot;Must name at least one dirtree!&quot; 1&gt;&amp;2
exit 2
fi

cd $QARCSDIR

for f
do
eval $PREFIXCMD
$RCSPATH/$CMD $QUIET $OPT $MANDOPT `basename $f .Z.uu`.Z.uu
if [ $? -ne 0 ]
then
rm -f `basename $f .Z.uu`.Z.uu
else
eval $SUFFIXCMD
fi
done
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
