<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i05: Listing 2: pcnfsdcheck.pl</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><a href="../../../../source/SA/1995/sep95.tar"><b class=codeListing>sep95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: pcnfsdcheck.pl</H1><p>
<PRE>
#!/usr/local/bin/perl
#
;#
;# a perl conversion of John Jarocki's pcnfsbabysit shell code
;# with some new items as needed
;# Author - Bruce Altmann
;#
;# rev AMD 1.0
;# Copyright Advanced Micro Devices, Inc. 1995
;#This script is distributed AS IS -- no warranties are stated or implied.

require 'getopts.pl';

;# zero is off
$SILENT = 0;
;# LOCAL CUSTOMIZE SECTION -------------------------
;#
;# ..............rpc info call
;# SunOS 4.1.3.X
;# HPUX 9.01
$RPCINFOCALL = '/usr/etc/rpcinfo';

;# SunOS 5.4
;# $RPCINFOCALL = '/usr/bin/rpcinfo';

;# ........how to start rpc.pcnfsd
;#      change this for your install
;#      ADD ANY FLAGS or ARGS YOU USE..!!
;# SunOS 4.1.3.X
$RPCPCNFSDCALL = '/usr/local/etc/rpc.pcnfsd';
;# SunOS 5.4
;#$RPCPCNFSDCALL = &quot;/etc/init.d/pcnfs start&quot;;
;# HPUX 9.X OS default
;# $RPCPCNFSDCALL = '/etc/pcnfsd';

;# ........what to search for in the PS search for a PID if needed
$PSPCNFSD = 'rpc.pcnfsd';
;# HPUX is a little strange about this

;# $PSPCNFSD = 'pcnfsd';
;# LOCAL CUSTOMIZE SECTION -------------------------

$FIXITFLAG = 0;
undef($RPCSERVER);

$Usage = 'pcnfsdcheck.pl -n node_to_check -s -l -f'
;# if no -h check the localhost
;# -s is silent for return monitoring stuff, and cron calls
;# -l is log to syslog, best with the -s and -f
;# -f try to ps for the PID and kill and restart rpc.pcnfsd (localhost only)

;# I expect people to run this via cron, so I output on
;# error even with -s
;# so they will get mail at root if this fails

;# return codes to identify what is down
;# will only return the code of the first rpc port
;# found to be down, not all of them
$Returncode = 0;  # everything ok

;# 10 ver 1 UDP not working
;# 20 ver 2 UDP not working
;# 11 ver 1 TCP not working
;# 21 ver 2 TCP not working
;# 99 - can't fix (-f)
;# 1 - some program error

;# start MAIN
;#---------------------------------------------------
;# parse the options
undef ($opt_n);

&amp;Getopts('n:slfh');

if ($opt_s) {
$SILENT = 1;
}

if ($opt_n) {
$RPCSERVER = &quot;$opt_n&quot;;
if (!$SILENT) {
print &quot;checking rpcinfo on server $RPCSERVER\n&quot;;
}
} else {
$RPCSERVER = `uname -n` || `hostname` || 'localhostX';
chop($RPCSERVER);
if (!$SILENT) {
print &quot;checking rpcinfo on server $RPCSERVER\n&quot;;
}
}

if ($opt_l) {
require &quot;syslog.pl&quot;;
&amp;openlog(&quot;$PSPCNFSD&quot;, 'cons,pid','daemon');
$SYSLOGIT = 1;
}

if ($opt_f) {
$FIXITFLAG = 1;
}

if ($opt_h) {
print &quot;$Usage\n&quot;;
print &quot;if no -n &lt;node&gt; check the localhost\n&quot;;
print &quot;-s is silent mode, although errors will write to STDOUT\n&quot;;
print &quot;-l is log to syslog, best with the -s\n&quot;;
print &quot;-f try to ps for the PID and kill and restart rpc.pcnfsd (localhost)\n&quot;;
exit(1);
}

;# ---------------------------------------------------
;# UDP check ver 1 and 2
$UDP1 = 0;
$UDP2 = 0;

if (!$SILENT) {
print &quot;\n.........Checking PCNFSD UDP ver 1 on $RPCSERVER\n&quot;;
}

if (!$SILENT) {
system(&quot;$RPCINFOCALL -u $RPCSERVER pcnfsd 1&quot;);
} else {
system(&quot;$RPCINFOCALL -u $RPCSERVER pcnfsd 1 &gt;/dev/null 2&gt;&amp;1&quot;);
}

;# get the return stat
;# zero for ok, other non zero is a problem
$UDP1 = ($? &gt;&gt; 8);

if ($UDP1) {
print &quot;PCNFSD UDP ver 1 not running\n&quot;;
$Returncode = 10;
}

if (!$SILENT) {
print &quot;\n........Checking PCNFSD UDP ver 2 on $RPCSERVER\n&quot;;
}

if (!$SILENT) {
system(&quot;$RPCINFOCALL -u $RPCSERVER pcnfsd 2&quot;);
} else {
system(&quot;$RPCINFOCALL -u $RPCSERVER pcnfsd 2 &gt;/dev/null 2&gt;&amp;1&quot;);
}

;# get the return stat (nothing between this and the system call)
;# zero for ok, other non zero is a problem
$UDP2 = ($? &gt;&gt; 8);

if ($UDP2) {
print &quot;PCNFSD UDP ver 2 not running\n&quot;;
$Returncode = 20;
}
;# ---------------------------------------------------
;# TCP check ver 1 and 2
$TCP1 = 0;
$TCP2 = 0;

if (!$SILENT) {
print &quot;\n........Checking PCNFSD TCP ver 1 on $RPCSERVER\n&quot;;
}

if (!$SILENT) {
system(&quot;$RPCINFOCALL -t $RPCSERVER pcnfsd 1&quot;);
} else {
system(&quot;$RPCINFOCALL -t $RPCSERVER pcnfsd 1 &gt;/dev/null 2&gt;&amp;1&quot;);
}

;# get the return stat
;# zero for ok, other non zero is a problem
$TCP1 = ($? &gt;&gt; 8);

if ($TCP1) {
print &quot;PCNFSD TCP ver 1 not running\n&quot;;
$Returncode = 11;
}

if (!$SILENT) {
print &quot;\n........Checking PCNFSD TCP ver 2 on $RPCSERVER\n&quot;;
}

if (!$SILENT) {
system(&quot;$RPCINFOCALL -t $RPCSERVER pcnfsd 2&quot;);
} else {
system(&quot;$RPCINFOCALL -t $RPCSERVER pcnfsd 2 &gt;/dev/null 2&gt;&amp;1&quot;);
}

;# get the return stat
;# zero for ok, other non zero is a problem
$TCP2 = ($? &gt;&gt; 8);

if ($TCP2) {
print &quot;PCNFSD TCP ver 2 not running\n&quot;;
$Returncode = 21;
}

;# ok we know what is down, check fix flag, and fix if possible
;# local or remote
;#  for HPUX 9.X use:
;#if ($UDP1) {

if ($UDP1 || $UDP2 || $TCP1 || $TCP2) {
if ($SYSLOGIT) {
&amp;syslog('warning', &quot;PCNFSD via pcnfsdcheck reported an error $UDP1, $UDP2, $TCP1,
$TCP2&quot;);
}
if ($FIXITFLAG) {
if (!$SILENT) {
print &quot;Trying to restart $PSPCNFSD\n&quot;;
}
;# get PID
;# ps calls differ by OS
$OS_is = `uname`;
$OS_rev = `uname -r`;
chop($OS_is);
chop($OS_rev);
if ($OS_is eq &quot;HP-UX&quot;) {
$pscmd = &quot;/bin/ps -ef&quot;;
}
if ($OS_is eq &quot;SunOS&quot;) {
if($OS_rev =~ /^5/) {
$pscmd = &quot;/usr/bin/ps -ef&quot;;
} else {
$pscmd = &quot;/usr/bin/ps -auxw&quot;;
}

}

open(PSTAG, &quot;$pscmd|&quot;) || warn &quot;can't run $pscmd: $!&quot;;
$PStitle = &lt;PS&gt;; # read the title line
$found  = 0;
;# this getpid code came from the Perl Camel book; 1992 march ed. p329
;# Reprinted with permission from Programming Perl, copyright 1992,
;# O'Reilly &amp; Associates, Inc.  For orders and information
;# call 800-998-9938.

while ($PSline = &lt;PS&gt;) {
chop($PSline);
($PSuser, $PSPID) = split(' ', $PSline);
next if $PSPID == $$;
$found = 1 if $PSline =~ /\b$PSPCNFSD\b/;
if($found) {
$PCNFSDPID = $PSPID;
last;
}
} ;# end of PS while search
close(PSTAG);

$Result = 0;

if ($found) {
if (!$SILENT) {
print &quot;$PSPCNFSD PID is $PCNFSDPID\n&quot;;
}
kill('SIGKILL', $PCNFSDPID) || warn &quot;could not kill pcnfsd PID $PCNFSDPID\n&quot;;
;# may not have been killed, but start a new one anyway
system(&quot;$RPCPCNFSDCALL &gt;/dev/null 2&gt;&amp;1&quot;);
$Result = ($? &gt;&gt; 8);
} else {
system(&quot;$RPCPCNFSDCALL &gt;/dev/null 2&gt;&amp;1&quot;);
$Result = ($? &gt;&gt; 8);
}

if ($Result != 0) {
;# check to make sure it is running as errors may just
;# be library warnings or some minor stuff
;# hmm , here is this getpid code again, I smell a subroutine
;# maybe in the next rev
open(PSTAG, &quot;$pscmd|&quot;) || warn &quot;can't run $pscmd: $!&quot;;
$PStitle = &lt;PS&gt;; # read the title line
$found  = 0;
;# this getpid code came from the Perl Camel book; 1992 march ed. p329
;# Reprinted with permission from Programming Perl, copyright 1992,
;# O'Reilly &amp; Associates, Inc.  For orders and information
;# call 800-998-9938.

while ($PSline = &lt;PS&gt;) {
chop($PSline);
($PSuser, $PSPID) = split(' ', $PSline);
next if $PSPID == $$;
$found = 1 if $PSline =~ /\b$PSPCNFSD\b/;
if($found) {
$PCNFSDPID = $PSPID;
last;
}
} ;# end of PS while search
close(PSTAG);

if (!$found) {
print &quot;\n\n Could NOT start/restart $PSPCNFSD\n&quot;;
if ($SYSLOGIT) {
&amp;syslog('warning', &quot;pcnfsdcheck was NOT able to restart PCNFSD&quot;);
}
$Returncode = 99;
}


};# end Result check section

if($Result == 0 || $found == 1) {
print &quot;$PSPCNFSD restarted\n&quot;;
if ($SYSLOGIT) {
&amp;syslog('warning', &quot;pcnfsdcheck restarted PCNFSD&quot;);
}
}

} ;# end of the FIXITFLAG section
};# end of UDP TCP section

if ($SYSLOGIT) {
&amp;closelog();
}

;# return the code
exit($Returncode);
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
