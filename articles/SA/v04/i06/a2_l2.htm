<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i06: Listing 2: check_alive.ksh--Connection Monitor script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a2_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a2_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a2_l6.htm">Listing 6</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l7.htm">Listing 7</a></span></td>
		<td><span class=navbarLink><a href="a2_l8.htm">Listing 8</a></span></td>
		<td><span class=navbarLink><a href="a2_l9.htm">Listing 9</a></span></td>
		<td><span class=navbarLink><a href="a2_l10.htm">Listing 10</a></span></td>
		<td><a href="../../../../source/SA/1995/nov95.tar"><b class=codeListing>nov95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: check_alive.ksh--Connection Monitor script</H1><p>
<PRE>
#!/bin/ksh
#=====================================================
# &quot;@(#)check_alive.ksh&quot;
#
# Check if a particular machine is alive by pinging it.
# If the machine does not respond we try once more.
# Log an error if the system does not respond. If the
# system responds, log an okay message.
# The ping command can be set to a particular command
# depending on the OS.
# &quot;newping&quot; is used for UNIX machines and is the
# default.
#
# Author :
# 	Ravindra Nemlekar
#
# Parameters : (Optional)
#    Systems which are to be monitored.
#    If no parameters, then problem specific monitor
#	or the generic monitor list is used.
#
# Calling mechanism :
#   Can be called from cron after every unit of
#   time equal to the reporting time. For example
#   if you want servers to be checked every
#   15 minutes, then the cron entry should be
# 0,15,30,45 * * * * /usr/local/bin/check_alive.ksh
#   Can also be called from other scripts to check
#   if the server is alive before executing any
#   command on it.
#
# Return value :
#  0 - Host is alive and rsh'able
#  1 - Cannot connect to host
#  2 - Host connected but not responding
#  3 - Connection refused by host
#  4 - Network problem
#  5 - Host unreachable
# 254  Host alive but not rsh'able
#		  (i.e. non-UNIX host).
# 255  Unknown Error
#====================================================

BINDIR=/usr/local/admin/sysmon
BASEDIR=/usr/local/admin/sysmon
CONDITION_NAME=Condition.NO_CONNECT
HOST_DIR=$BASEDIR/hosts
PATH=/usr/local/admin/bin:$PATH	# required for newping
tmpfile=/tmp/hostlist.$$
# Wait time (in seconds) between 2 tries
SLEEP_TIME=3
# Avoid permission problems
umask 0

# Pick up the condition specific data
if [ -d $BASEDIR/config.$CONDITION_NAME ] ; then
CONFIGDIR=$BASEDIR/config.$CONDITION_NAME
else
CONFIGDIR=$BASEDIR
fi
# File contains list of hosts monitored
HOST_LIST=$CONFIGDIR/monlist
# Arguments is present are the hosts which are
# to be checked
if [ $# -ne 0 ] ; then
echo &quot;$*&quot; &gt; $tmpfile
HOST_LIST=$tmpfile
fi


#=================================================
# Create a msg directory for each server if it
# doesn't already exist.
for host in `cat $HOST_LIST | grep -v \# `
do
if [ ! -d $HOST_DIR/$host ]
then
mkdir $HOST_DIR/$host
chmod 777 $HOST_DIR/$host
else
touch $HOST_DIR/$host
fi
done

# We ping each host. If the host does not respond,
# we wait for some time and then try again. It it
# fails, we log an error. If the host is responding,
# log an okay if there was previously a problem.

for host in $(cat $HOST_LIST | grep -v \#)
do
# Process the host only if it is present in
# the master list.
$BASEDIR/check_in_master_list.ksh $host \
$BASEDIR/MASTER_LIST
if [ 0 -ne $? ] ; then
continue # Ignore this host
fi

unset PING
# Read this for each host so that each
# gets the initialized parameters
# Read the global config file, then local
# config files would override the parameters
# which are to be reset for each. Each
# parameter is initialized to some default
# value so that even if no config files are
# present, the script does not misbehave.
if [ -f $BASEDIR/config.generic ] ; then
# read the global file first
. $BASEDIR/config.generic
fi
if [ -f $BASEDIR/config.$CONDITION_NAME/\
config.generic ] ; then
# read the condition specific global file
. $BASEDIR/config.$CONDITION_NAME/\
config.generic
fi
if [ -f $BASEDIR/hosts/$host/\
config.$CONDITION_NAME ] ; then
# read the condition specific file for
# the problem on that host.
. $BASEDIR/hosts/$host/config.$CONDITION_NAME
fi
TIME_NOW=$(date &quot;+%h-%d %H:%M&quot;)
EXIT_VALUE=1
# Default ping is the rpc based ping.
PING=${PING:-newping}
$PING $host
status=$?
if [ &quot;$status&quot; -ne 0 ] ; then
sleep $SLEEP_TIME
$PING $host
status=$?
fi
case &quot;$status&quot; in
0)  # Host is up. Log the host as OK if
# previous error existed
if [ -f  $HOST_DIR/$host/$CONDITION_NAME ]
then
echo &quot;$TIME_NOW: $host now reachable&quot; &gt; \
$HOST_DIR/$host/End.$CONDITION_NAME
fi
;;

1)  MSG=&quot;CAN'T CONNECT&quot; ;;

2)  MSG=&quot;CONNECTED but NO RESPONSE&quot; ;;

3)  MSG=&quot;CONNECTION REFUSED&quot; ;;

4)  MSG=&quot;NETWORK PROBLEM&quot; ;;

5)  MSG=&quot;HOST UNREACHABLE&quot; ;;

255) MSG=&quot;UNKNOWN ERROR&quot; ;;

esac     # End of case loop

EXIT_VALUE=$status
if [ $status -ne 0 ] ; then
echo &quot;$TIME_NOW: $host: $MSG&quot; &gt; \
$HOST_DIR/$host/$CONDITION_NAME
else
# Host alive but cannot be rsh'ed
if [ &quot;$PING&quot; != &quot;newping&quot; ] ; then
EXIT_VALUE=254
fi
fi
done      # End of Host Check

# Hosts were passed from the command line
if [ $# -ne 0 ] ; then
/bin/rm -f  $tmpfile
fi

# Return the exit value of the last server. This
# is [more] meaningful when the check is done on
# one server only.
exit $EXIT_VALUE
# End of File
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
