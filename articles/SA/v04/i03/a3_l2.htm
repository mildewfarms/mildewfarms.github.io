<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v04, i03: Listing 2: submit_request.pl</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1995/may95.tar"><b class=codeListing>may95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: submit_request.pl</H1><p>
<PRE>
#!/usr/bin/perl
# submit_request.pl by johnk@dop.water.ca.gov created 1-23-95
#
# parts of this program were originally written for a text
# based support system by Sam Lamtinga &lt;slouken@dop.water.ca.gov&gt;
#

$phonebook=&quot;/support/phone.txt&quot;;  # this is our user information database.
$supportaddr='johnk';           # admin's email address
$mailer='/usr/bin/mailx'        # set to the mailer of your system
$ORG='DOP';                     # organization name

############################################### Begin main code.
$length=$ENV{CONTENT_LENGTH};   # Length of passed data
$have_uname=0;
$ident=$ENV{REMOTE_IDENT};      # Try to get the users' uname.
if (@pwent=getpwnam($ident))
{                               # We have the uname.
$have_uname=1;                # Set this so we won't look for info later.
$uname=$ident;
($rname)=split(/\,/, $pwent[6]);
&amp;lookup($rname);
}
$INPUT=&lt;STDIN&gt;;                 # Get the input sent by httpd.
chop $INPUT;                    # Remove the &lt;cr&gt;.
&amp;convert_escapes;               # Convert escape codes to characters.
&amp;parse_info;                    # Parse up the information from the form.
&amp;send_request;                  # Send in the request.
&amp;print_done;                    # Let user know everything's ok.

################################################ End main code.
# subroutines in alpha order.

sub convert_escapes  # converts escape codes to characters.
{
$pos=(-1);                      # set position to beginning of line
while(($x=index($INPUT, &quot;%&quot;, $pos+1))&gt;=0)
{
# first convert the 2 digit value from hex to character.
$char=sprintf(&quot;%c&quot;, hex(substr($INPUT, $x+1, $x+2)));
#remove from the % to the end of the line.
$temp=substr($INPUT, 0, $x);
$temp.=$char;       # add the character to the end of the new string
$temp.=substr($INPUT, $x+3); # then add on the rest of the string
$INPUT=$temp;            # copy the temp string back to $longdesc
$pos=$x;
}
}

sub cut                 # Snatches the entry for the first field in $INPUT.
{
$end=index($INPUT, '&amp;');
if ( $end == -1 )     # check if this is the last field.
{
$end=$length;       # if so, set the end to the length of the string.
}
$temp=substr($INPUT, 0, $end);
$INPUT=substr($INPUT, $end+1, $length);
$length-= $end;
$begin=index($temp, '=');
$temp=substr($temp, $begin+1, $end);
$temp=~ tr/+/ /;
$temp                 # return temp
}

sub error               # print out error message in HTML and quit
{
print &quot;&lt;H1&gt;Request:  ERROR\!&lt;/H1&gt;\n&quot;;
print &quot;&lt;H2&gt;@_[0]\n&lt;/H2&gt;\n&quot;;           # print the error passed to &amp;error.
print &quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;H2&gt;Please report this error to a Systems
Admin.&lt;/H2&gt;\n&quot;;
print &quot;&lt;HR&gt;\n&quot;;
exit;
}

# lookup is a heavy reworking on a subroutine written
# by Sam Lantinga &lt;slouken@dop.water.ca.gov&gt;
sub lookup
{
$whoiam=$_[0];          # The user to be looked up is the argument.
if (! open(WP, &quot;$phonebook&quot;))
{
&amp;error &quot;Can't open $phonebook: $!\n&quot;;
}
($firstname, $lastname)=split(/ /, $rname);

$matched=0;
while (&lt;WP&gt;)
{
s///;                       # Remove leading carriage return
# Split on 2 or more occurences of whitespace
($lname,$fname,$phonef,$orgf,$locf,$room)=split(/\s{2,}/);
if ( $lname eq $lastname &amp;&amp; $fname eq $firstname )
{
$matched=1;
last;
}
}
close(WP);
if(! $matched)
{
return;
}

# Extract the phone number and then the extension.
($numone, $acode, $ournum)=split(/ /, $phonef);
($pref, $extension)=split(/-/, $ournum);
}

sub parse_info          # parse up what httpd fed us.
{
if (! $have_uname)    # If we couldn't get the users' name...
{
$uname=&amp;cut;        # Pick up each field.
$rname=&amp;cut;        # (Each call to cut returns one field)
$extension=&amp;cut;
$room=&amp;cut;
}
$shortdesc=&amp;cut;
if (! $shortdesc)     # We want a one line description.
{
&amp;error(&quot;A one line description must be entered.&quot;);
}
$level=&amp;cut;
$longdesc=&amp;cut;
$shortdesc=~ s/\&quot;/\\\&quot;/g;             # Remove quotes
$shortdesc=~ s/\$/\\\$/g;             # variables
$shortdesc=~ s/\'/\\\'/g;             # and commands.
}

sub print_done        # called if request was successfully sent to admin
{
print &quot;Content-type:  text/html\n\n\n&quot;;
print &quot;&lt;TITLE&gt;Result of Request Submission&lt;/TITLE&gt;\n&quot;;
print &quot;&lt;Body&gt;\n&quot;;
print &quot;&lt;H3&gt;Your request has been submitted.&lt;br&gt;&quot;;
print &quot;The request database will be updated within 5 minutes.&lt;/H3&gt;\n&quot;;
print &quot;&lt;HR&gt;\n&quot;;
print &quot;&lt;/Body&gt;\n&quot;;
exit;
}

sub send_request                        # Mail off the request
{
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$time=sprintf(&quot;%d:%2d&quot;, $hour, $min);
$time=~ s/ /0/;
$now=sprintf(&quot;%d/%d/%d %s&quot;, $mon+1, $mday, $year, $time);

if (!open (MAIL, &quot;|$mailer -s \&quot;$shortdesc\&quot; '$supportaddr&quot;))
{
&amp;error (&quot;Unable to mail Request form.&quot;);
}
print MAIL
&quot;
$ORG OPERATIONS
REQUEST FORM

=========================  REQUESTOR INFORMATION  =======================

NAME:       $rname
DATE:       $now
EXTENSION:  $extension
LOCATION:   $room
E-MAIL:     $uname

Priority:   $level

=======================  WORK REQUEST INFORMATION  ======================

Work Request: $shortdesc

Description of Request:

$longdesc
&quot;;
close (MAIL);
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>