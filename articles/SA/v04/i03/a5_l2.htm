<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i03: Listing 2: mcplot--Plotting from a Macintosh to a UNIX workstation</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><a href="../../../../source/SA/1995/may95.tar"><b class=codeListing>may95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: mcplot--Plotting from a Macintosh to a UNIX workstation</H1><p>
<PRE>
#!/bin/ksh
######################################################################
# mcplot - plotting from mac's to unix workstation                   #
# written by: Don Stone                                              #
# date      : 11-16-93                                               #
#                                                                    #
#                                                                    #
# Donald C. Stone                                 _/_/_/_/_/ _/_/    #
# Information Systems Analyst                    _/_/       _/_/     #
# California Department of Transportation       _/_/   _/_/_/_/_/_/  #
# District 03 Main Office                      _/_/       _/_/       #
# 703 'B' Street                              _/_/_/_/_/ _/_/  _/    #
# Marysville, California, USA 95901                     _/_/_/_/     #
# Phone: (916)741-4031                                               #
# Email: dstone%trmx2@dot.ca.gov                   Caltrans          #
#                                                                    #
#                                                                    #
# First, create a directory for the script to reside.  Define the    #
# below varible DIR as that directory.  Then, create sub-directories
#
# called &quot;./tmp&quot;, &quot;./que&quot;, and &quot;./log&quot;.  Then create a text file     #
# called &quot;control&quot; with the following format:                        #
#                                                                    #
#   yes  000.000.000.000  queue_name  folder_name                    #
#                                                                    #
# The first column should be yes or no indicating whether the script
#
# uses the information or not, second column is the IP address of    #
# the Mac, third column is the name the plot queue, and the fourth   #
# column is the full pathname of the folder on the Mac.  Finally,    #
# since this script is currently configured for Intergraph's IPLOT   #
# plotting software, copy a default pentable and colortable by the   #
# using the names &quot;igds.tbl&quot; and &quot;igds.ctb&quot;.  Also, define the vari-
#
# bles FNT and SCR pointing to the default font library and scratch  #
# directory.                                                         #
#                                                                    #
######################################################################

### Define version.  ###
PRG=&quot;Mac Plotting&quot;
VER=&quot;1.3&quot;

### Define header and spacing. ###
HDR=&quot;%%McPLOT:&quot;
HSP=&quot;         &quot;

### Define system directory/file names. ###
DIR=&quot;/usr/local/dp&quot;
QUE=&quot;$DIR/que&quot;
TMP=&quot;$DIR/tmp&quot;
LOG=&quot;$DIR/log&quot;
COM=&quot;$TMP/comm&quot;
TBL=&quot;$DIR/igds.tbl&quot;
CTB=&quot;$DIR/igds.ctb&quot;
FNT=&quot;/usr/ip32/ip/igds/resrc/fontlib&quot;
SCR=&quot;/usr/plotwrk/iplot/scr&quot;

### Remote login for UNIX servers. ###
USER=&quot;t3vers&quot;
PASS=&quot;plotter&quot;

### Determine terminal for verbose option. ###
if [ &quot;$1&quot; = &quot;-v&quot; -o &quot;$1&quot; = &quot;-V&quot; ]; then
TERM=&quot;$LOG/dplot.log&quot;
tty | read TERM
else
TERM=&quot;$LOG/dplot.log&quot;
fi

### Begin program loop. ###
GO=&quot;0&quot;
while [ &quot;$GO&quot; = &quot;0&quot; ]; do

### Check for loop switch. ###
if [ &quot;$1&quot; = &quot;1&quot; -o &quot;$2&quot; = &quot;1&quot; -o &quot;$3&quot; = &quot;1&quot;
]; then
GO=&quot;1&quot;
fi

echo &quot;\n$HDR $PRG $VER&quot;                                      &gt;&gt; $TERM
echo &quot;$HSP (Submitting postscript files)&quot;                    &gt;&gt; $TERM
date +&quot;$HSP %a %h %d,19%y %T&quot;                                &gt;&gt; $TERM

### Read control to determine which plot queues. ###
CONTROL=&quot;0&quot;
if [ ! -f $DIR/control ]; then
touch $DIR/control
echo &quot;$HDR No control file!&quot;  &gt;&gt; $TERM
fi
cat $DIR/control | grep -v &quot;#&quot;     |
grep &quot;Plotters&quot; |
grep &quot;yes &quot;     |
while read YESNO TCP PLOTTER REMDIR; do

### Get plot files from remote server. ###
echo &quot;$HDR Searching remote server ($TCP) at:&quot;      &gt;&gt; $TERM
echo &quot;$HSP $REMDIR&quot;                                 &gt;&gt; $TERM
echo &quot;$HSP Attempting file transfer ...\c&quot;          &gt;&gt; $TERM
echo &quot;\nuser $USER $PASS&quot;  &gt;  $COM.1
echo &quot;cd \042$REMDIR\042&quot;  &gt;&gt; $COM.1
echo &quot;lcd $QUE&quot;            &gt;&gt; $COM.1
echo &quot;ascii&quot;               &gt;&gt; $COM.1
echo &quot;mget *&quot;              &gt;&gt; $COM.1
echo &quot;ls&quot;                  &gt;&gt; $COM.1
ftp -vni $TCP &lt; $COM.1     &gt;  $TMP/ftp.tmp 2&gt;  $TMP/ftp.tmp
echo &quot;\n\n&quot;                &gt;&gt; $LOG/ftp.log 2&gt;&gt; $LOG/ftp.log
cat $TMP/ftp.tmp           &gt;&gt; $LOG/ftp.log 2&gt;&gt; $LOG/ftp.log
echo &quot; &quot;  &gt;&gt; $TERM

### Deleting NULL plot files. ###
echo &quot;$HSP Deleting null plot files ...\c&quot;  &gt;&gt; $TERM
find $QUE -type f -size -5 -print |
while read FILE; do rm -f &quot;$FILE&quot;; done
echo &quot; &quot;  &gt;&gt; $TERM

### Submit remaining files to plotter. ###
FLAG1=&quot;0&quot;
find $QUE -type f -print |
while read FILE; do

###                                          ###
### Determine file type; postscript or igds. ###
###                                          ###
TYPE=&quot;invalid&quot;
IFS=&quot;:&quot;
file &quot;$FILE&quot; | tr -d &quot;\011&quot; | read CHUNK1 CHUNK2
IFS=&quot; &quot;
echo &quot;$CHUNK2&quot; | read FLAG2 EXTRA
if   [ &quot;$FLAG2&quot; = &quot;text&quot;     ]; then  FLAG2=&quot;ascii&quot;; fi
if   [ &quot;$FLAG2&quot; = &quot;commands&quot; ]; then  FLAG2=&quot;ascii&quot;; fi
if   [ &quot;$FLAG2&quot; = &quot;unstruct&quot; ]; then  FLAG2=&quot;ascii&quot;; fi
if   [ &quot;$FLAG2&quot; = &quot;Postscript&quot; ]; then
TYPE=&quot;script&quot;
elif [ &quot;$FLAG2&quot; = &quot;data&quot; ]; then
TYPE=&quot;igds&quot;
elif [ &quot;$FLAG2&quot; = &quot;ascii&quot; ]; then
head &quot;$FILE&quot; | grep -c &quot;%%Creator&quot; | read CREATOR
if [ &quot;$CREATOR&quot; = &quot;1&quot; ]; then
TYPE=&quot;script&quot;
fi
fi
if [ &quot;$TYPE&quot; = &quot;invalid&quot; ]; then
echo &quot;$HSP $FILE is an invalid plotfile!!!&quot;  &gt;&gt; $TERM
echo &quot;$HSP $FILE is an invalid plotfile!!!&quot;  &gt;  &quot;$FILE&quot;
fi

###                              ###
### Submit IGDS file to plotter. ###
###                              ###
if [ &quot;$TYPE&quot; = &quot;igds&quot; ]; then

### Check for plot scale. ###
SCALE=&quot;50&quot;
echo &quot;$FILE&quot; | tr &quot;.&quot; &quot;/&quot; | read TEMP
basename &quot;$TEMP&quot; | tr -d [a-z][A-Z] |
tr -d &quot;._+:/\ #&quot; | read SCALE
if [ ! &quot;$SCALE&quot; ]; then SCALE=&quot;50&quot;; fi
let a=$SCALE
if [ $a -lt 1 ]; then SCALE=&quot;50&quot;; fi
SCALE=&quot;$SCALE.0:1.0&quot;

### Determine IPARM filename. ###
basename &quot;$FILE&quot; | read TEMP
echo &quot;$TEMP&quot; | tr &quot;.&quot; &quot; &quot; | read IPARM EXTRA
IPARM=&quot;$SCR/$IPARM.i&quot;

### Create iparm/meta files and submit it. ###
echo &quot;$HSP Submitting $FILE ($TYPE/$SCALE) to $PLOTTER ...\c&quot;  &gt;&gt; $TERM
echo &quot;iplot create &quot;$IPARM&quot; -queue=$PLOTTER \c&quot;         &gt;  $COM.3
echo &quot;-design=\042$FILE\042 -view=1 -units=inches \c&quot;   &gt;&gt; $COM.3
echo &quot;-scale=$SCALE -data_rescale=1.0,1.0 \c&quot;           &gt;&gt; $COM.3
echo &quot;-pen_table=$TBL -color_table=$CTB -fontlib=$FNT&quot;  &gt;&gt; $COM.3
echo &quot;iplot generate \042$IPARM\042&quot;                    &gt;&gt; $COM.3
echo &quot;iplot submit \042$IPARM\042&quot;                      &gt;&gt; $COM.3
chmod 777 $COM.3
$COM.3  &gt; $TMP/iplot.tmp 2&gt; $TMP/iplot.tmp

### Create message file. ###
cat $TMP/iplot.tmp  &gt;&gt; $LOG/iplot.log 2&gt;&gt; $LOG/iplot.log
echo &quot;$PRG $VER&quot;                       &gt;  &quot;$FILE&quot;
date +&quot;Submitted to $PLOTTER at %D.%T&quot; &gt;&gt; &quot;$FILE&quot;
cat $TMP/iplot.tmp                     &gt;&gt; &quot;$FILE&quot;
echo &quot; &quot;  &gt;&gt; $TERM
fi

###                                    ###
### Submit postscript file to plotter! ###
###                                    ###
if [ &quot;$TYPE&quot; = &quot;script&quot; ]; then

### Check for paper size. ###
PAPER=&quot;E&quot;
echo &quot;$FILE&quot; | tr &quot;.&quot; &quot;/&quot; | read TEMP
basename &quot;$TEMP&quot; | tr [a-z] [A-Z] | read SIZE
if [ &quot;$SIZE&quot; = &quot;A&quot; ]; then PAPER=&quot;$SIZE&quot;; fi
if [ &quot;$SIZE&quot; = &quot;B&quot; ]; then PAPER=&quot;$SIZE&quot;; fi
if [ &quot;$SIZE&quot; = &quot;C&quot; ]; then PAPER=&quot;$SIZE&quot;; fi
if [ &quot;$SIZE&quot; = &quot;D&quot; ]; then PAPER=&quot;$SIZE&quot;; fi

echo &quot;$HSP Submitting $FILE ($TYPE/$PAPER) to $PLOTTER ...\c&quot;  &gt;&gt; $TERM
qpr &quot;$FILE&quot; -t $TYPE -q $PLOTTER -o &quot;-a $PAPER&quot;  &gt; $TMP/qpr.tmp 2&gt;
$TMP/qpr.tmp

### Create message file. ###
cat $TMP/qpr.tmp  &gt;&gt; $LOG/qpr.log 2&gt;&gt; $LOG/qpr.log
echo &quot;$PRG $VER&quot;                       &gt;  &quot;$FILE&quot;
date +&quot;Submitted to $PLOTTER at %D.%T&quot; &gt;&gt; &quot;$FILE&quot;
cat $TMP/qpr.tmp                       &gt;&gt; &quot;$FILE&quot;
echo &quot; &quot;  &gt;&gt; $TERM
fi

### Copy message file to remote server. ###
echo &quot;$HSP Sending message file to remote server ...\c&quot;  &gt;&gt; $TERM
basename &quot;$FILE&quot; | read BNAME
cat $TMP/ftp.tmp | grep -v  &quot;local:&quot; |
grep -v &quot;remote:&quot; |
grep     &quot;$BNAME&quot; | read DFILE
echo &quot;$DFILE&quot; | read DFILE
echo &quot;\nuser $USER $PASS&quot;                       &gt;  $COM.2
echo &quot;cd \042$REMDIR\042&quot;                       &gt;&gt; $COM.2
echo &quot;lcd $QUE&quot;                                 &gt;&gt; $COM.2
echo &quot;ascii&quot;                                    &gt;&gt; $COM.2
echo &quot;send \042$FILE\042 \042$DFILE\042&quot;        &gt;&gt; $COM.2
ftp -vni $TCP &lt; $COM.2   &gt;&gt; $LOG/ftp.log 2&gt;&gt; $LOG/ftp.log
echo &quot; &quot;  &gt;&gt; $TERM
rm -f &quot;$FILE&quot;

FLAG1=&quot;1&quot;
done
if [ &quot;$FLAG1&quot; = &quot;0&quot; ]; then
echo &quot;$HSP No files copied or submitted!&quot;  &gt;&gt; $TERM
fi

### Send plot status to remote server. ###
echo &quot;$HSP Sending queue status to remote server ...\c&quot;  &gt;&gt; $TERM
echo &quot;$PRG $VER&quot; &gt;  $TMP/qstat.tmp
date             &gt;&gt; $TMP/qstat.tmp
uname -a         &gt;&gt; $TMP/qstat.tmp
echo &quot;\n&quot;        &gt;&gt; $TMP/qstat.tmp
qstat $PLOTTER   &gt;&gt; $TMP/qstat.tmp
echo &quot;$PLOTTER Status&quot; | tr &quot; &quot; &quot;_&quot; | read STATUS
echo &quot;\nuser $USER $PASS&quot;                   &gt;  $COM.5
echo &quot;cd \042$REMDIR\042&quot;                   &gt;&gt; $COM.5
echo &quot;ascii&quot;                                &gt;&gt; $COM.5
echo &quot;send $TMP/qstat.tmp \042$STATUS\042&quot;  &gt;&gt; $COM.5
ftp -vni $TCP &lt; $COM.5   &gt;&gt; $LOG/ftp.log 2&gt;&gt; $LOG/ftp.log
echo &quot; &quot;  &gt;&gt; $TERM

sleep 5
CONTROL=&quot;1&quot;
done
if [ &quot;$CONTROL&quot; = &quot;0&quot; ]; then
echo &quot;$HSP No control data!&quot;  &gt;&gt; $TERM
fi

###                                           ###
### Purging log files and deleting tmp files. ###
###                                           ###
echo &quot;$HDR Purging log files ...\c&quot;  &gt;&gt; $TERM
find $LOG -type f -print |
while read FILE; do
tail -1000 $FILE &gt; $TMP/logfile
cp $TMP/logfile $FILE
done
echo &quot;\n$HSP Deleting tmp files ...\c&quot;  &gt;&gt; $TERM
rm -f $TMP/*
echo &quot; &quot;  &gt;&gt; $TERM

### The end of the loop! ###
echo &quot;$HDR [!]\n&quot;  &gt;&gt; $TERM
if [ &quot;$GO&quot; = &quot;0&quot; ]; then
sleep 240
fi
done
### The end! ###
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
