<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i03: Listing 1: find_fields.sh</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a6_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1995/may95.tar"><b class=codeListing>may95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: find_fields.sh</H1><p>
<PRE>
#!/bin/sh

# ----------------------------------------------------
# FIND_FIELDS.SH                      October 18, 1994
# Scott A. Tarvainen                     Kyle V. Gleed
# ----------------------------------------------------
# This script queries selected Oracle databases to find
# related fields within different tables.  The user is
# prompted to enter the database which is to be
# queried and the data field they wish to search for.
# The script queries the database and returns all
# tables within the database that contain the search
# field.
# ----------------------------------------------------


#
# Procedure to check for SQL connect errors
#

error_check() {

if [ -s /tmp/sqlerror.log ]; then
if ( grep -i error /tmp/sqlerror.log \
&gt; /dev/null 2&gt;&amp;1 );then
clear
echo
echo -n &quot;Following ERROR encountered &quot;
echo &quot;during database connection:&quot;
echo
head -1 /tmp/sqlerror.log
echo
exit 1
fi
else
clear
echo
echo &quot;$USERID/&lt;PASSWORD&gt;@$DATABASE is empty&quot;
echo
exit 1
fi
}

#
# Process temporary working files
#

if [ -f /tmp/found.lst ]; then
rm /tmp/found.lst
fi

if [ -f /tmp/sqlerror.log ]; then
rm /tmp/sqlerror.log
fi

#
# Prompt user to enter database and
# data field information
#

clear
echo
echo -n &quot;Enter SQLPLUS arguments as outlined below &quot;
echo &quot;when prompted&quot;
echo &quot;&gt;&gt; e.g. sqlplus USERID/PASSWORD@DATABASE &lt;&lt;&quot;
echo
echo -n &quot;Note: the PASSWORD field will not be &quot;
echo &quot;displayed for security reasons&quot;
echo

echo -n &quot;Enter USERID ------&gt; &quot;
read USERID
USERID=`echo $USERID | tr [a-z] [A-Z]`

echo -n &quot;Enter PASSWORD ----&gt; &quot;

#
# Turn echo off so password won't be displayed
#

stty -echo
read PASSWORD
PASSWORD=`echo $PASSWORD | tr [a-z] [A-Z]`

#
# Turn echo back on
#

stty echo
echo
echo -n &quot;Enter DATABASE ----&gt; &quot;
read DATABASE
DATABASE=`echo $DATABASE | tr [a-z] [A-Z]`
echo

#
# Prompt user to enter the query field to search for
#

echo -n &quot;Enter QUERY FIELD -&gt; &quot;
read FIELD
FIELD=`echo $FIELD | tr [a-z] [A-Z]`
echo

#
# Query the database to build a list of tables
#

sqlplus -s $USERID/$PASSWORD@$DATABASE &lt;&lt; xxENDxx \
&gt; /tmp/sqlerror.log 2&gt;&amp;1
set pause off
set feedback off
set heading off
set pages 0
set lines 300
spool /tmp/tables
select TABLE_NAME
from USER_CATALOG;
spool off;
quit
xxENDxx

error_check

#
# Get description of each table in the
# database to match
#

for TABLE in `cat /tmp/tables.lst`
do

echo &quot;Searching $TABLE&quot;
sqlplus -s $USERID/$PASSWORD@$DATABASE &lt;&lt; xxENDxx \
&gt; /tmp/sqlerror.log 2&gt;&amp;1
set pause off
set feedback off
set heading off
set echo off
set pages 0
set lines 300
spool /tmp/struct
desc $TABLE;
spool off;
quit
xxENDxx

#
# Strip first two header lines off the file
#

ed -s /tmp/struct.lst &lt;&lt; xxENDxx
1,2d
w
q
xxENDxx

#
# Attempt to match query field
#

for FIND_FIELD in `nawk '/^ /{print $1}' \
/tmp/struct.lst`
do
if [ &quot;$FIND_FIELD&quot; = &quot;$FIELD&quot; ]; then
echo $TABLE &gt;&gt; /tmp/found.lst
fi
done
done

echo
echo &quot;Processing Finished.&quot;
sleep 1
echo
echo

#
# If query field was matched,
# print out matched table name(s)
#

if [ -s /tmp/found.lst ]; then
echo -n &quot;Matches for $FIELD found in the &quot;
echo &quot;following database tables:&quot;
echo
cat /tmp/found.lst
echo

#
# If query field not matched, inform the user
#

else
echo -n &quot;No matches found for $FIELD &quot;
echo &quot;in the database tables.&quot;
echo
fi
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
