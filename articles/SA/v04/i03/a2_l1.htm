<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i03: Listing 1: setime.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1995/may95.tar"><b class=codeListing>may95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: setime.c</H1><p>
<PRE>
Sets the system date/time retrieved from a server in
TCP/IP-based network.

/*
* This program sets the system date/time retrieved from a server in a TCP/IP
* based network.
*
* Usage:  setime &lt;node name&gt; &lt;time interval in hours&gt;
*
* 1)  Setup the datagram socket
* 2)  Get the hostname
* 3)  Set the optional time interval
* 4)  Send the daytime datagram to the server
* 5)  Set the timeout alarm
* 6)  Receive the daytime string back from the server
* 7)  Time out if a response doesn't arrive in 20 seconds
* 8)  Parse the returned date time string
* 9)  Set the time tm structure
*10)  If the new time is within range parameter, set the system
*     date and time
*/
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;errno.h&gt;
#include &lt;signal.h&gt;

#define BUFSZ  256
#define SERVICE &quot;daytime&quot;
#define is_uppercase(x) ((x &gt;= 'A' &amp;&amp; x &lt;= 'Z') ? 1 : 0)
#define to_lowercase(x) ((is_uppercase(x)) ? x + 'a' - 'A' : x)

main(argc, argv)
int argc;
char **argv;
{
int s, n, len, dayno, mono, hrno, minno, yearno, secno, chkno, chksec;
double timedif;
char buf[BUFSZ], *daystr, *monstr, *nostr, *timestr, *yearstr, *hrstr, *minstr,
*secstr, *chkhrstr;
struct hostent  *hp;
struct servent  *sp;
struct sockaddr_in sin;
time_t tloc, caltime;
struct tm *old, new;
extern int timedout();

/* get a datagram in the Internet domain.  */
if ((s = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0)
{
fprintf(stderr, &quot;socket error&quot;);
exit (1);
}

/* lookup the port number of the daytime service */
if ((sp = getservbyname(SERVICE, &quot;udp&quot;)) == NULL)
{
fprintf(stderr, &quot;upd %s: unknown service.\n&quot;, SERVICE);
exit (1);
}

/* get the server from the command line */
if ((hp = gethostbyname(*++argv)) == NULL)
{
fprintf(stderr, &quot;%s: server unknown.\n&quot;, *argv);
exit (1);
}

/* get the time range parameter */
if ((chkhrstr = *++argv) == NULL)
{
chkno = 24;
chksec = 86400;  /* seconds in 24 hours */
}
else /* default to 24 hours */
{
chkno = atoi(chkhrstr);
chksec = chkno * 3600; /* seconds in an an hour */
if(chksec &lt; 0)
chksec = chksec * (-1);
}

/* build the address of the server on the client machine */
sin.sin_family = AF_INET;
sin.sin_port = sp-&gt;s_port;
bcopy(hp-&gt;h_addr, &amp;sin.sin_addr, hp-&gt;h_length);

/* send datagram to server */
if (sendto(s, buf, BUFSZ, 0, &amp;sin, sizeof(sin)) &lt; 0)
{
fprintf(stderr, &quot;sendto error&quot;);
exit (1);
}

/* set the alarm for 20 seconds */
signal(SIGALRM, timedout);
alarm(20);
/* receive a datagram */
len = sizeof(sin);
n = recvfrom(s, buf, sizeof(buf), 0, &amp;sin, &amp;len);
alarm(0);  /* turn off the alarm */
if (n &lt; 0)
{
fprintf(stderr, &quot;recvfrom error&quot;);
exit (1);
}

/* terminate the returned datagram string */
buf[n] = NULL;
close(s);

/* parse the returned date string */
daystr =   strtok(buf,&quot; &quot;);
monstr =   strtok(NULL,&quot; &quot;);
nostr =    strtok(NULL,&quot; &quot;);
timestr =  strtok(NULL,&quot; &quot;);
yearstr =  strtok(NULL,&quot; &quot;);
hrstr =    strtok(timestr,&quot;:&quot;);
minstr =   strtok(NULL,&quot;:&quot;);
secstr =   strtok(NULL,&quot;:&quot;);

/* convert date and time strings to integer */
dayno = atoi(nostr);
hrno = atoi(hrstr);
minno = atoi(minstr);
secno = atoi(secstr);
yearno = atoi(yearstr);
mono = retmonth(monstr);

/* set the time */
time(&amp;tloc);
old = localtime(&amp;tloc);
new.tm_year = yearno - 1900;
new.tm_mon = mono - 1;
new.tm_mday = dayno;
new.tm_hour = hrno;
new.tm_min = minno;
new.tm_sec = secno;
new.tm_isdst = old-&gt;tm_isdst;
caltime = mktime(&amp;new);

timedif = difftime(tloc, caltime);
if(timedif &lt; 0) /* don't care if time change is negative */
timedif = timedif * (-1);

/* only change, if the time delta is within the parameter range */
if(timedif &lt;= chksec)
{
if(stime(&amp;caltime))
{
if(errno == EPERM)
fprintf(stderr, &quot;You must be super user to set time\n&quot;);
else
fprintf(stderr, &quot;stime() function error is %d\n&quot;, errno);
}
}
else
fprintf(stderr, &quot;change ignored! range parameter is over %d hours\n&quot;, chkno);

exit(0);
}

/*
* this function terminates the utility if the datagram doesn't
* return in the alloted time
*/
int timedout()
{
fprintf(stderr, &quot;setime timed out.\n&quot;);
exit (1);
}

/*
* this function takes a month string, converts it to lowercase and
* returns an integer corresponding to the number of the month or zero
* for an error
*/
int retmonth(mstr)
char *mstr;
{
int i;

for(i=0; i &lt; strlen(mstr); i++)  /*month string to lowercase*/
mstr[i] = to_lowercase(mstr[i]);

if(strcmp(mstr,&quot;jan&quot;) == 0)
return 1;
if(strcmp(mstr,&quot;feb&quot;) == 0)
return 2;
if(strcmp(mstr,&quot;mar&quot;) == 0)
return 3;
if(strcmp(mstr,&quot;apr&quot;) == 0)
return 4;
if(strcmp(mstr,&quot;may&quot;) == 0)
return 5;
if(strcmp(mstr,&quot;jun&quot;) == 0)
return 6;
if(strcmp(mstr,&quot;jul&quot;) == 0)
return 7;
if(strcmp(mstr,&quot;aug&quot;) == 0)
return 8;
if(strcmp(mstr,&quot;sep&quot;) == 0)
return 9;
if(strcmp(mstr,&quot;oct&quot;) == 0)
return 10;
if(strcmp(mstr,&quot;nov&quot;) == 0)
return 11;
if(strcmp(mstr,&quot;dec&quot;) == 0)
return 12;
return 0;  /*error*/
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
