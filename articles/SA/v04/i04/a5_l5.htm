<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i04: Listing 5: getfiles.scr</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a5_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 5</span></td>
		<td><a href="../../../../source/SA/1995/jul95.tar"><b class=codeListing>jul95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 5: getfiles.scr</H1><p>
<PRE>
#!/bin/ksh
#
# getfiles.scr
#
# NOTE: You must be root to execute this script.
#
# This script restores the specific files from a fileset created using
# the backup script backup.scr.
#
# If the tape device being used is an 8 mm tape the blocksize is set
# to 1024 for the duration of the read operation and reset to the previous
# value at the end.  If this script is stopped or aborts the blocksize
# should be manually changed to the previous value.
#
# The format of the tape is as follows:
#
#       BOT
#       header file (format is below)                   (tar format)
#       EOF
#       filesystem 1                                    (backup format)
#       EOF
#       filesystem 2                                    (backup format)
#       EOF
#       .
#       .
#       filesystem n                                    (backup format)
#       EOF
#
# Header File Format
#
#       Line 1:         hostname
#       Line 2:         date and time
#       Line 3:         Level indicator
#       Lines 4-n+3:    i FILESYSTEM_NAME
#                       (where i is 1 for the first, 2 for the second, and
#                        so on.  This is the value of the advance file command
#                        to get this filesystem.)
#
# Parameters:
#
#      p1 : (required) the number ofthe backup set to which contains the files
#           to restore.  The parameter can be obtained from the tape header
#           file !backuplist which is written on the beginning of the tape.
#
#      p2 : (required) the directory to restore the files to.
#
#      p3 : (required) the file(s) to restore from the tape.  If more
#           than one file is to be restored enclose the list in single quotes
#           and separate the members by a space (example: './afile ./bfile').
#           The names must exactly match the filenames as they appear on the
#           tape listing produced with the listfiles.scr script.  If the file
#           specifies a directory name all of the files under that directory
#           are restored in addition to the directory itself.
#
#      p4 : (optional) the tape device to read backups from.  The /dev/
#           qualifier and the .n suffix may be present or absent, i.e.
#           /dev/rmt1.1 is the same as /dev/rmt1 is the same as rmt1.1 is
#           the same as rmt1.  If a .n suffix is used on the device name
#           (i.e. rmt0.3), it MUST be a non-rewinding device, or the
#           successive filesystems will overwrite one another.  The
#           non-rewinding device suffixes are .1, .3, .5, &amp; .7.  If the
#           .n suffix is absent then the value .1 (i.e. $DEFAULT_SUFFIX)
#           is used.  If the parameter is omitted the value /dev/rmt0.1
#           is used.
#
# Exit Status:
#
#       0 : Tape listing completed successfully
#       91: Must be root to execute
#       92: Error rewinding the tape
#       93: Error advancing the tape
#       94: Wrong number of parameters
#       95: Invalid backup set number in param 1
#       96: Could not change tape blocksize
#       97: Invalid directory in param 2
#       98: Tape drive in param 4 does not exist on this system
#       99: Tape drive in param 4 specifies a rewinding tape
#
#
DEFAULT_TAPE=/dev/rmt0
DEFAULT_SUFFIX='.1'
DEFAULT_BLOCKSIZE=&quot;1024&quot;
USAGE=&quot;$0 which_backup_set directory_to_receive_files \
files_to_restore_in_quotes [optional_tape_device]&quot;
integer j
integer savep1
blocksize=-1
basetape=&quot;&quot;
#########################################################################
#
# If the selected tape drive is an 8mm unit, this function will set
# the block size of the drive to 1024.  If the current value is
# different it is saved and restored later.
#
set_blocksize()
{
blocksize=-1                                    # -1 means reset unnecessary
if [[ -n `lsdev -Cc tape | grep $basetape | grep 8mm` ]]
then
blocksize=`lsattr -E -a block_size -l $basetape | cut -f2 -d' '`
if [[ $blocksize != $DEFAULT_BLOCKSIZE ]]
then
chdev -l $basetape -a block_size=$DEFAULT_BLOCKSIZE &gt;/dev/null
if [[ $? = 0 ]]
then
print &quot;$basetape changed (old blocksize = $blocksize, new = $DEFAULT_BLOCKSIZE)&quot;
else
print &quot;Could not change tape blocksize to $DEFAULT_BLOCKSIZE.  Exiting.&quot;
exit 96
fi
fi
fi
}
#########################################################################
#
# If the tape blocksize was changed earlier, restore the old
# value.
#
reset_blocksize()
{
if [[ $blocksize != -1 &amp;&amp; \
$blocksize != $DEFAULT_BLOCKSIZE ]]
then
chdev -l $basetape -a block_size=$blocksize &gt;/dev/null
if [[ $? = 0 ]]
then
print &quot;$basetape changed (blocksize = previous value of $blocksize)&quot;
else
print &quot;Could not change tape blocksize to $blocksize.  Exiting.&quot;
exit 96
fi
fi
}
#########################################################################
#
# This function rewinds a tape
#
rewind()
{
tctl -f $tapedev rewind
if [[ $? != 0 ]]
then
print &quot;Error rewinding $tapedev.  Exiting.&quot;
exit 92
fi
}
#########################################################################
#
# This function advances the tape one filemark (to skip the tar header)
#
skip_1_filemark()
{
tctl -f $tapedev fsf 1
if [[ $? != 0 ]]
then
print &quot;Error advancing $tapedev 1 filemark.  Exiting.&quot;
exit 93
fi
}
#########################################################################
#
# This function checks the parameters and sets up the $tapedev symbol.
#
checkparm()
{
if [[ $savecount &lt; 3 || \
$savecount &gt; 4 ]]
then
print &quot;Wrong number of parameters, usage = $USAGE.  Exiting.&quot;
exit 94
fi
if (( savep1 &lt; 1 || \
savep1 &gt; 99 ))
then
print &quot;Sorry, parm 1 must be a backup set (1-99).  Exiting.&quot;
exit 95
fi
if [[ ! -d $savep2 ]]
then
print &quot;Sorry, parm 2 must be a directory.  Exiting.&quot;
exit 97
fi
tapedev=${DEFAULT_TAPE}${DEFAULT_SUFFIX}
if [[ $savecount = 4 ]]
then
tapedev=&quot;/dev/`basename $savep3`&quot;
if [[ `print $tapedev | cut -c6-8` != &quot;rmt&quot; || \
-z `ls $tapedev 2&gt;/dev/null` ]]
then
print &quot;Sorry, parm 4 must specify a tape device on your system.  Exiting.&quot;
exit 98
fi
if [[  -z `print $tapedev | grep &quot;\.&quot;` ]]
then
tapedev=$tapedev${DEFAULT_SUFFIX}
else
suffix=`print $tapedev | cut -f2 -d'.'`
if [[ $suffix != 1 &amp;&amp; \
$suffix != 3 &amp;&amp; \
$suffix != 5 &amp;&amp; \
$suffix != 7 ]]
then
print &quot;Sorry, parm 4 must specify a non-rewinding tape device.&quot;
exit 99
fi
fi
fi
basetape=`basename $tapedev | cut -f1 -d'.'`
}
#########################################################################
#
# main
#
# make sure we're root first
#
if [[ `whoami`  != &quot;root&quot; ]]
then

print &quot;Sorry, you must be root to execute this script. Exiting.&quot;
exit 91
fi
savecount=$#
savep1=$1
savep2=$2
savep3=$3
savep4=$4
checkparm                                       # check the parms
rewind                                          # rewind the tape
set_blocksize                                   # set the tape blocksize
skip_1_filemark                                 # move past the header file
cd $savep2                                      # point to restore area
# restore the contents
# with stdin as a herefile
restore -qvf $tapedev -s${savep1} -x ${savep3} &lt;&lt;-EOF
1
yes
EOF
reset_blocksize                                 # reset the tape blocksize
exit 0
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
