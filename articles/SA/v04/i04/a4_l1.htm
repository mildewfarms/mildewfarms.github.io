<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i04: Listing 1: buildinfo script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1995/jul95.tar"><b class=codeListing>jul95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: buildinfo script</H1><p>
<PRE>
#!/bin/sh
#
#       buildinfo
#
#       Build a new terminfo.src from the binary terminfo files
#       present in the /usr/share/lib/terminfo directories.  If
#       entries are already present, keep them without change.  If
#       a new entry is found, append it to the source file.
#
#       Copyright 1995, by Lawrence S Reznick -- 1995Apr29

usage ()
{
echo &quot;usage: $0 [-hqv] [-d terminfodir] [-o sourcefile]\n&quot;
echo &quot;Update terminfo source file ($TIOUT)&quot;
echo &quot;from $MASTERDIR directory entries.\n&quot;
echo &quot;Options:&quot;
echo &quot;-h\tHelp: See this usage message.&quot;
echo &quot;-q\tQuiet: Show no output.&quot;
echo &quot;-v\tVerbose: Tell all new &amp; old entries.&quot;
echo &quot;-d\tSet terminfo directory to scan.&quot;
echo &quot;-o\tSet terminfo source file name to add entries.&quot;
}

# Set defaults.

MASTERDIR=/usr/share/lib/terminfo
TIOUT=terminfo.src

# Find out what the user prefers.
# Default (no -v and no -q) shows current terminfo name under
# examination.  Scroll its name back if it gets added to the
# source file.  Otherwise:
#       -v      announce names found in the source file (kept).
#       -q      don't show adding messages.
#       -v -q   show only kept names.

while getopts &quot;hqvd:o:&quot; OP
do
case $OP in
v)      # TRUE = Tell about existing entries
VERBOSE=t
;;

q)      # TRUE = Don't tell about add entries
QUIET=t
;;

d)      # Use another dir for compiled terminfo entries
MASTERDIR=$OPTARG
;;

o)      # Use another source file name for results
TIOUT=$OPTARG
;;

h | \?)
usage
exit 1
;;
esac
done

# Make sure the output file is present without destroying it.

touch $TIOUT

# Make sure all temp files are removed

trap &quot;rm -f *.$$; exit&quot; 0 1 2 3 15

# Collect list of already present terminfo definitions.  Definition
# lines begin at the left margin, excluding comments.  Any line
# starting with a space or tab can't be a definition line.

LISTFILE=tilist.$$
egrep '^[^ #    ]' $TIOUT &gt;$LISTFILE

# Step through each terminfo directory.  Assume that most terminfo
# names start with a lowercase letter.  Most of the rest start with
# either digits or uppercase letters.  Catch whatever remains in
# ASCII order.

for TIDIR in ${MASTERDIR}/[a-z] ${MASTERDIR}/[!a-z]
do
# Check each file in this directory

for TIPATH in $TIDIR/*
do
TIFILE=`basename $TIPATH`
test -n &quot;$QUIET&quot; || echo &quot;$TIFILE\t\t\r\c&quot;

# Some terminfo aliases contain plus signs.  These
# conflict with an egrep RE char unless escaped.
# Double backslashes deliver one backslash.  Double the
# doubling to deliver a double backslash to TIFILE.

T=`echo &quot;$TIFILE&quot; | sed 's/+/\\\\+/g'`

# Be sure to match only terminfo names.  They are always
# followed by a vertical bar.  If a bar isn't present, a
# trailing comma at the end of the line signals a single
# name without an alias.  Can't put a ? after both
# escaped bars or egrep might match a coincidental word
# in the description phrase.

MATCHSTR=&quot;\|?${T}\||^${T},$&quot;

if `egrep &quot;$MATCHSTR&quot; $LISTFILE &gt;/dev/null 2&gt;&amp;1`
then
test -n &quot;$VERBOSE&quot; &amp;&amp; echo Kept $TIFILE.
else
# Add new name's definition

infocmp $TIFILE |
tee -a $TIOUT |
egrep '^[^ #    ]' &gt;&gt;$LISTFILE

test -n &quot;$QUIET&quot; || echo Added $TIFILE.
fi
done
done

egrep '^[^ #    ]' $TIOUT |
sort |
uniq -c |
egrep -v '^ *1 ' &gt;duplist.$$

if [ -s duplist.$$ ]
then
echo &quot;Duplicates found:&quot;
cat duplist.$$
fi
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
