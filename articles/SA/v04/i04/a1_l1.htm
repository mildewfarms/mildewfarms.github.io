<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i04: Listing 1: rlock--A distributed file locking utility</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1995/jul95.tar"><b class=codeListing>jul95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: rlock--A distributed file locking utility</H1><p>
<PRE>
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;signal.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/param.h&gt;

/*
* Quick and dirty basename for machines without such.
*/
char* basename(path)
char* path;
{
int len;
char* ptr;

len=strlen(path);
ptr=path+len-1;
for (;ptr != path;ptr--)
if (*ptr == '/')
{
return(ptr+1);
}
return(ptr);
}

/*
* Quick and dirty dirname for machines without such.
*/
char* dirname(path)
char* path;
{
static char* dot=&quot;.&quot;;
int len;
char* ptr;

len=strlen(path);
ptr=path+len-1;
for (;ptr != path;ptr--)
if (*ptr == '/')
{
*ptr='\0';
return(path);
}
return (dot);
}

/*
* Perform SCCS-like (z-file) file locking.
*
* Attempts to create a file with the parent process
* id's pid in it.  If the file exists and pid exists,
* it can wait on the file until unlocked or test
* if -q.  If the file exists and pid does not, the
* file is removed and new file is created with
* current parent process id.
*
*/

static int dbg=0;
static char* pgm;

/* Location of remote shell program */
#define RSHCMD                &quot;/usr/bin/rsh&quot;

/* Maximum length of hostnames */
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN        64
#endif

/* Maximum number of characters for ASCII pid */
#define PIDBUFFERSIZE         10

/* Current host */
static char hostname[MAXHOSTNAMELEN+1];
/* Locking host from lock file */
static char lockinghost[MAXHOSTNAMELEN+1];

#define DBGMSG(msg,parm) \
{ \
if (dbg) \
{\
fprintf(stderr,&quot;DBG %s: &quot;,__FILE__);\
fprintf(stderr,msg,parm);\
}\
}

static char pidbuffer[PIDBUFFERSIZE+1]=&quot;9876543210&quot;;

static void usage()
{
/* creates a Z.filename for each filename listed */

fprintf(stderr, &quot;Usage: %s [-b|-z] [-p prefix]&quot;, pgm);
fprintf(stderr, &quot;[-q | -s seconds] filename...\n&quot;);
exit(-1);
}

static void lockerror(name,msg)
char* name;
char* msg;
{
fprintf(stderr, &quot;%s: %s %s\n&quot;,pgm,name,msg);
exit(-1);
}

static void writepid(fd, locktype)
int fd;
char locktype;
{
pid_t ppid;

ppid=getppid();
DBGMSG(&quot;creating lock file for pid=[%d]\n&quot;,ppid);
DBGMSG(&quot;creating lock file for hostname=[%s]\n&quot;,
hostname);

/* Write locktype to lock file if not -z */
if (locktype != 'Z')
write(fd,&amp;locktype,1);

if (locktype != 'A') /* Binary lock */
write(fd,&amp;ppid,sizeof(pid_t));
else /* ASCII lock */
{
sprintf(pidbuffer,&quot;%d&quot;,ppid);
write(fd,pidbuffer,PIDBUFFERSIZE);
}

write(fd,hostname,MAXHOSTNAMELEN);
}

void main(argc, argv)
int argc;
char* argv[];
{
int fd;
int delay=2;
int waitonlock=1;
int errflg=0;
int rc=0;
int grc=0;
int filenumber=0;
int c;
char locktype='A';

pid_t ppid;

char* debug;
char* delaystr;
char pathName[1024];
char dirName[1024];
char syscmd[1024];
char prefix[80];

extern char *optarg;
extern int optind;

pgm=argv[0];
strcpy(prefix,&quot;Z.&quot;);

while ((c = getopt(argc, argv, &quot;bzqs:p:&quot;)) != EOF)
{
switch (c)
{
case 'b':
locktype='B';
break;
case 'z':
locktype='Z';
break;
case 'q':
waitonlock=0;
break;
case 's':
delaystr = optarg;
delay=atoi(delaystr);
break;
case 'p':
strcpy(prefix,optarg);
break;
case '?':
errflg++;
}
}

if (errflg || argc &lt; 2 )
usage(argv[0]);

if (gethostname(hostname,MAXHOSTNAMELEN))
lockerror(&quot;gethostname,&quot;,
&quot;unable to obtain hostname&quot;);

debug=getenv(&quot;LOCKDBG&quot;);
if (debug)
dbg=atoi(debug);

for (;optind&lt;argc;optind++)
{
filenumber++;
/* construct Z.filename from argument */

strcpy(dirName,argv[optind]);
sprintf(pathName,&quot;%s/%s%s&quot;,dirname(dirName),
prefix,basename(argv[optind]));

/*
* loop continually until file lock established
* unless !waitonlock
*/

while (1)
{
rc=0;
DBGMSG(&quot;try to create file %s\n&quot;, pathName);

if ((fd=open(pathName,O_CREAT|O_EXCL|O_RDWR, 0644)) == -1)
{
DBGMSG(&quot;file exists, try reading it\n&quot;,&quot;&quot;);

/* file exists */
if ((fd=open(pathName,O_RDONLY)) == -1)
lockerror(pathName,&quot;permission denied&quot;);

/* read pid number */
DBGMSG(&quot;reading pid\n&quot;,&quot;&quot;);

/*
* read locktype (A=ASCII, B=binary if not
* -z option.
*/
if (locktype != 'Z' &amp;&amp; !read(fd,&amp;locktype,1))
{
DBGMSG(&quot;reading locktype\n&quot;,&quot;&quot;);
DBGMSG(pathName,&quot;empty file?&quot;);
if (unlink(pathName) == -1)
lockerror(pathName,&quot;permission denied&quot;);
continue;
}

if (locktype != 'A') /* Binary type */
{
DBGMSG(&quot;locktype is Binary\n&quot;,&quot;&quot;);
if (!read(fd,&amp;ppid,sizeof(pid_t)))
{
DBGMSG(pathName,&quot;empty file?&quot;);
if (unlink(pathName) == -1)
lockerror(pathName,&quot;permission denied&quot;);
continue;
}
}
else /* ASCII type */
{
DBGMSG(&quot;locktype is ASCII\n&quot;,&quot;&quot;);
if (!read(fd,pidbuffer,PIDBUFFERSIZE))
{
DBGMSG(pathName,&quot;empty file?&quot;);
if (unlink(pathName) == -1)
lockerror(pathName,&quot;permission denied&quot;);
continue;
}
else
ppid=atoi(pidbuffer);
}

DBGMSG(&quot;reading locking hostname\n&quot;,&quot;&quot;);

if (!read(fd,lockinghost,MAXHOSTNAMELEN))
{
DBGMSG(pathName,&quot;empty file?&quot;);
if (unlink(pathName) == -1)
lockerror(pathName,&quot;permission denied&quot;);
continue;
}

/* check for pid */

DBGMSG(&quot;\tpid=[%d]\n&quot;,ppid);
DBGMSG(&quot;\tlockinghost=[%s]\n&quot;,lockinghost);

if (!strcmp(hostname,lockinghost) &amp;&amp; dbg != 2)
{
/* determine if local process still active */
if (kill(ppid,0) == -1)
{
if (errno == ESRCH)
{
/* remove file */
DBGMSG(&quot;pid gone!, remove file!\n&quot;,&quot;&quot;);

if (unlink(pathName) == -1)
lockerror(pathName,
&quot;permission denied&quot;);
else
rc=1;
}
}
else
{
DBGMSG(&quot;\tprocess still active\n&quot;,&quot;&quot;);
}
}
else
{
/* determine if remote process exists */
DBGMSG(&quot;\tFOREIGN HOST\n&quot;,&quot;&quot;);
sprintf(syscmd,
&quot;rc=`%s %s \&quot;kill -0 %d 2&gt;/dev/null
echo \\\\$?\&quot;`;exit $rc&quot;,
RSHCMD, lockinghost, ppid);
DBGMSG(&quot;\tissuing %s\n&quot;,syscmd);
rc=system(syscmd);
rc=rc&gt;&gt;8;
DBGMSG(&quot;\tremote process status=[%d]\n&quot;,rc);
if (rc)
{
/* remove file */
DBGMSG(&quot;pid gone!, remove file!\n&quot;,&quot;&quot;);

if (unlink(pathName) == -1)
lockerror(pathName,&quot;permission denied&quot;);
}
else
{
DBGMSG(&quot;\tprocess still active\n&quot;,&quot;&quot;);
}
}

if (rc) /* We removed the lock! Immediately loop. */
{
close(fd);
continue;
}

if (waitonlock)
{
/* sleep for delay */
DBGMSG(&quot;sleep for %d seconds\n&quot;,delay);
sleep(delay);
close(fd);
}
else
{
if (!grc)
grc=filenumber;
break;
}
}
else
{
/* file is new */
writepid(fd,locktype);
close(fd);
break;
}
}
close(fd);
}
exit(grc);
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
