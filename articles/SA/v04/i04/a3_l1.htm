<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i04: Listing 1: closeit: The login management script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1995/jul95.tar"><b class=codeListing>jul95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: closeit: The login management script</H1><p>
<PRE>
1 #!/bin/ksh
2 :
3 ## closeit: a Korn shell to let a system
4 ## administrator readily disable logins to one or
5 ## more accounts and display a message to the
6 ## account users.
7
8 # exit quietly if we aren't root
9
10 id|grep 'uid=0' &gt;&amp;- || exit 2
11
12 # Files we create here are writeable
13 # only by root
14
15 umask 033
16
17 ### Set up initial environment
18
19 # Note: FLAGFILE is set in /etc/profile
20 set -a
21 ORGARGS=$*
22 # Working directory
23 WORKDIR=/nowrite
24 # For storing our home directory list
25 DIRECLIST=${WORKDIR}/direclist
26 # File for manipulating our user message
27 MSGTEMPLATE=${WORKDIR}/msgtmp.closeit
28 export MSGTEMPLATE
29 # Our shell
30 C_SHELL=/bin/ksh
31 # Preferred editor
32 C_EDITOR=/usr/bin/joe
33 PROGNAME=`basename $0`
34 EOFKEY=Ctrl-D
35 # For initial display purposes
36 USERNAME='$USERNAME'
37 OPENTIME='$OPENTIME'
38
39 ### The Usage routine reports command syntax
40 ### and other information
41
42 Usage()
43 {
44 if [ &quot;$PROGNAME&quot; = &quot;closeit&quot; ]
45 then
46   cat &lt;&lt; !!!
47
48   ${PROGNAME} [all] [who] [?]
49
50   $PROGNAME disables logins for usernames
51   specified, which are read interactively. The
52   &quot;all&quot; option operates on all users listed in
53   $DIRECLIST.  The &quot;who&quot; option displays all
54   user accounts currently disabled.  The &quot;?&quot;
55   option displays this message.  The current
56   contents of $DIRECLIST are:
57
58 !!!
59   cat $DIRECLIST;echo
60 fi
61
62 if [ &quot;$PROGNAME&quot; = openit ]
63 then
64   cat &lt;&lt;+++
65
66   $PROGNAME [all]
67
68   ${PROGNAME} reopens any accounts closed by
69   closeit (to which it is linked), reporting on
70   each action it takes.  If the keyword &quot;all&quot;
71   is not used it takes input from standard
72   input.
73
74 +++
75 fi
76 exit 0
77 }
78
79 ### The Getusers routine uses /etc/passwd to
80 ### build a list of current users and their
81 ### home directories
82
83 Getusers()
84 {
85 &gt;$DIRECLIST 2&gt;/dev/null          # Initialize our name file
86 OLDIFS=$IFS                      # Save old IFS
87 IFS=':'                          # Set IFS for /etc/passwd
88
89 # Select /etc/passwd lines ending in 'sh,' set
90 # the elements of each line to positional
91 # parameters, store $1 and $6 in our name-
92 # home directory file ($DIRECLIST).  Modify
93 # to fit your needs, but be sure you don't
94 # close root.
95
96 grep '.*sh *$' /etc/passwd|while read line
97 do
98 set -f - $line
99 [ &quot;$6&quot; ] &amp;&amp; [ &quot;$7&quot; ] &amp;&amp; [ ! &quot;$1&quot; = &quot;root&quot; ]
&amp;&amp; \
100 [ ! &quot;$1&quot; = &quot;sysnews&quot; ] &amp;&amp; \
101 echo &quot;$1\t$6&quot; &gt;&gt; $DIRECLIST
102 done
103 IFS=$OLDIFS           # Restore old IFS
104 set -- $ORGARGS       # Restore old arguments
105 }
106
107 ### The MakeMessage routine selects the current
108 ### default message to be presented to the user or
109 ### lets the system administrator make a new one
110
111 MakeMessage()
112 {
113 cat &lt;&lt;@@@ &gt; $MSGTEMPLATE
114
115   Sorry, account ${USERNAME} is temporarily
116   closed for maintenance.
117
118   It should be available again about ${OPENTIME}.
119
120        (Press &lt;ENTER&gt;)
121 @@@
122
123
124 ANSWER=v
125 while [ &quot;$ANSWER&quot; = &quot;v&quot; -o &quot;$ANSWER&quot; = &quot;y&quot; ]
126 do
127   tput clear
128   echo &quot;\n\n\tYou can use a default message \
129 or compose one now.&quot;
130   echo &quot;\tOr enter 'v' to view the current \
131 message.&quot;
132   echo &quot;\n\tDo you want to compose a new \
133 message? (y/n/v) \c&quot;
134   read ANSWER
135
136   case $ANSWER in
137   Y|y* )
138     ANSWER=y
139     $C_EDITOR $MSGTEMPLATE
140   ;;
141
142   V|v* )
143     ANSWER=v
144     tput clear
145     cat $MSGTEMPLATE
146     echo &quot;\n\n[[ Press &lt;Enter&gt; to return ]]&quot;
147     read NUL
148   ;;
149
150   * )
151     tput clear
152   ;;
153   esac
154
155 done
156 }
157
158 ### WriteMessage tests the validity of the supplied
159 ### user name and writes the flag file to his home
160 ### directory
161
162 WriteMessage()
163 {
164
165 # Match the user's input with leading characters
166 # in $DIRECLIST
167
168 eval grep \'\^${USERNAME}\' ${DIRECLIST} | \
169 read USER HOMEDIR
170 if [ &quot;$USER&quot; ]
171 then
172
173 # Build a 'here document' to wrap up the user's
174 # displayed message and write it to the correct
175 # home directory
176
177   (echo 'cat &lt;&lt; %%%';cat $MSGTEMPLATE;echo;echo '%%%')|\
178    ${C_SHELL} &gt; ${HOMEDIR}/$FLAGFILE 2&gt;&amp;-
179 else
180   echo &quot;\n\tInvalid user name: ${USERNAME}&quot;
181 fi
182 }
183
184 ### ListWho lists all users whose logins are
185 ### currently disabled
186
187 ListWho()
188 {
189 echo &quot;\n\tAccounts now closed:&quot;
190 while read USERNAME HOMEDIR
191 do
192   [ -f ${HOMEDIR}/$FLAGFILE ] &amp;&amp; echo &quot;\t\t$USERNAME&quot;
193 done &lt; $DIRECLIST
194 }
195
196 ### GoAhead lets the user back out, otherwise takes
197 ### input as to reopening time for the account
198
199 GoAhead()
200 {
201 echo &quot;\n\tPreparing to close user accounts.&quot;
202 echo &quot;\tDo you want to continue? (y/n) \c&quot;
203 read ANSWER
204 case $ANSWER in
205 y|Y* )
206   if grep OPENTIME $MSGTEMPLATE &gt;&amp;-
207   then
208     echo &quot;\tTime to reopen: \c&quot;
209     read OPENTIME; export OPENTIME
210   fi
211 ;;
212
213 *   )
214   exit 1
215 ;;
216 esac
217 }
218
219 ########################
220 #                      #
221 # Main line of program #
222 #                      #
223 ########################
224
225 tput clear
226
227 # Maximum one parameter
228
229 [ $# -gt 1 -o &quot;$1&quot; = '?' ] &amp;&amp; Usage
230
231 # The script can be invoked as 'closeit'
232 # or 'openit'
233
234 case $PROGNAME in
235 closeit )
236   if [ &quot;$1&quot; ]
237   then
238     case $1 in
239     who )
240       Getusers
241       ListWho
242       exit 0
243     ;;
244     all )
245       Getusers
246       MakeMessage
247       GoAhead
248       while read USERNAME HOMEDIR
249       do
250         export USERNAME
251         WriteMessage
252       done &lt; $DIRECLIST
253       ListWho
254       exit 0
255     ;;
256     *   )
257       Usage
258     ;;
259     esac
260   else
261     Getusers
262     MakeMessage
263     GoAhead
264     echo &quot;\n\tEnter account names \
265 (${EOFKEY} when done):&quot;
266     while read USERNAME
267     do
268       if [ &quot;$USERNAME&quot; ]
269       then
270         export USERNAME
271         WriteMessage
272       fi
273     done
274     ListWho
275     exit 0
276   fi
277 ;;
278
279 openit )
280
281   # If $1 is 'all' redirect input from $DIRECLIST,
282   # otherwise prepare to take a list of accounts
283   # from standard input
284
285   [ &quot;$1&quot; = &quot;all&quot; ] &amp;&amp; exec &lt;$DIRECLIST || \
286   echo &quot;\n\tEnter account names \
287 (${EOFKEY} when done):&quot;
288
289   while read USR HDIR
290   do
291   if [ &quot;$USR&quot; ]
292   then
293     USERNAME=`eval grep \'\^$USR\' ${DIRECLIST}|cut -f1`
294     if [ ! &quot;$USERNAME&quot; ]
295     then
296       echo &quot;\tInvalid username: $USR&quot;
297     else
298       HOMEDIR=${HDIR:-`eval grep \'\^$USR\' \
299       ${DIRECLIST}|cut -f2`}
300       if [ -f ${HOMEDIR}/${FLAGFILE} ]
301       then
302         rm -f ${HOMEDIR}/${FLAGFILE}
303         if [ $? = 0 ]
304         then
305           echo &quot;\t$USERNAME opened&quot;
306         else
en failed for ${USERNAME}&quot;
308         fi
309       else
310         echo &quot;\t$USERNAME not closed&quot;
311       fi
312     fi
313   fi
314   done
315   ListWho
316 ;;
317
318 esac
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
