<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v04, i04:  Time Services from the U.S. Naval Observatory</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a10_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a10_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a10_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1995/jul95.tar"><b class=codeListing>jul95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Time Services from the U.S. Naval Observatory</H1><p>
<P>
Stephen Friedl and Ed Schaefer<P>

As a system administrator one of your many tasks is
setting the system 
time. To automate this task, a client machine could
call a remote 
(or server) system, obtain the time from the server,
and arbitrarily 
set the time on the client. This article addresses a
C utility, utc 
(Listing 1), which calls the U.S. Naval Observatory
(USNO), in Washington 
D.C. (1-202-653-0351), to obtain as accurate a time
as is available 
anywhere.<P>

<B>The USNO Time Format</B><P>

The USNO provides time data once per second in the format
shown in 
Figure 1. The Julian Date measures the number of days
since Greenwich 
mean noon 1 January 4713 B.C. on the Julian proleptic
calendar. This 
corresponds to the period of the earliest known astronomical
observations 
and forms a common starting point for numerous time
and date systems. 
The Modified Julian Date (MJD) provided by the Observatory
is the 
JD minus 240000.5 (the &quot;.5&quot; shifts the start
of a measured 
day from noon to midnight). Since both UNIX and USNO
keep time using 
Greenwich Mean Time (GMT), time zones are eliminated.<P>

<B>The Systems File</B><P>

Since this utility uses the ubiquitous Call UNIX utility,
cu, 
you first set up the UNIX Systems file for the USNO
site name 
and a speed of 1200 bits per second:<P>
<PRE>
usno Nvr ACU 1200 1-202-653-0351</pre><p>
<p>
This entry attaches a phone number and speed to a system

name -- the typical login information is not required
since uucp 
won't be using this. Speeds above 1200 bits per second
are not supported; 
they would be counterproductive in any case because
of the increased 
delays inherent in the way commonly used error control
protocols are 
packed.<P>

<B>The utc Utility Options</B><P>

The options for utc are:<P>

<I>-s</I>-- specify to set system time via stime() 
(root only)<P>

<I>-c sysn</I> -- specify system name to dial via 
Systems file (usno in our definition)<P>

<I>-D nn</I> -- specify debug level<P>

<I>-d</I> -- don't route cu's stderr 
to /dev/null (for debug)<P>

If no options are specified, no cu is spawned and the
time 
is printed internally in the USNO minute format.<P>

<B>Executing the cu Command</B><P>

The heart of the utc utility is creating a pipe between
the 
cu command and the shell, using the popen() function

call. (For more information on programming the pipe,
see &quot;Using 
the UNIX Pipe in C,&quot; Sys Admin, July/August 1993).
The 
cu command is actually piped in the cu_open() function

and a FILE pointer is returned to the calling set_time()

function. After cu connects, the routine reads output
from 
USNO using the normal stream reading function, fgets().<P>

cu_open() also makes the utc utility a process group

leader via the setpgrp() function call. Since cu typically

spawns an extra process (one for reading, one for writing),
having 
a self-contained process group makes it easier to terminate
all processes 
involved in setting the time should this be necessary.
(Check the 
implementation of setpgrp() on your system -- some UNIX

variants use setsid().)<P>

<B>Parsing the USNO Output String</B><P>

After the connection is made to USNO, the convert_to_time()

function parses the line from USNO format and returns
the UNIX time, 
defined as the number of seconds since midnight 01/01/1970.
convert_to_time() 
returns 0 for the marker and an error if the five expected

fields can not be parsed. utc assumes the UNIX time
is correct 
when five valid times are received sequentially, each
being one second 
greater than the prior time. The marker line is ignored
in the count 
and is not considered an error condition. <P>

<B>Terminating utc</B><P>

The alarm() function is set so that utc will terminate

within 60 seconds if no valid input is received. If
USNO delivered 
a valid UNIX time, utc kills the cu child processes

with the kill() function, and closes the USNO pipe using
pclose().<P>

Finally, if the set-system-time option is on, the system
time 
is set to the time received from USNO. Before calling
setime(), 
however, utc compares the old system time to the new
time. 
The most obvious error condition is a user other than
root attempting 
to set the system time.<P>

<B>Future Enhancements</B><P>

The utc utility obtains the GMT time from the USNO 
and optionally sets system time, but the error checking
is limited. 
A time-range-check-in-hours option could prove useful
(e.g., don't 
change the time if the proposed change from USNO is
more than a certain 
number of minutes or hours).<P>

Also, a clever system administrator could set the utc
utility 
up as part of a timeserver account for others to use,
thus eliminating 
the need for a long-distance telephone call to Washington,
D.C.<P>

<B>References</B><P>

Curry, David A. <I>Using C on the UNIX System</I>. 
Sebastopol, CA: O'Reilly &amp; Associates, 1989. <P>




<P>


<H1>About the Authors</H1><p>
<P>
Stephen Friedl is an independent software and network
consultant 
in Tustin, California, and has been working with C and
UNIX since 
his first exposure on a Z8000 machine in 1981. He develops
UNIX facsimile 
software, does training and system administration, and
is a volunteer 
tutor of English as a second language to a cool group
of students. 
He can be reached via email at friedl@mtndew.com.<P>

Ed Schaefer is a frequent contributer to Sys Admin.
He is an Informix software developer and UNIX system

administrator at jeTECH Data Systems of Moorpark, CA,
where he develops 
Time and Attendance Software. He can be reached at olded@ix.netcom.com.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
