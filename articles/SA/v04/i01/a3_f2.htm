<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v04, i01:  Figure 2: perl version of example in Figure 1</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Figure 2</span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a3_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1995/jan95.tar"><b class=codeListing>jan95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Figure 2: perl version of example in Figure 1</H1><p>
<PRE>
#!/opt/bin/perl5
#
# Example 2 - perl version of example 1
#
#  John Lees                        lees@cps.msu.edu
#  Pattern Recognition &amp; Image Processing Laboratory
#  M i c h i g a n   S t a t e   U n i v e r s i t y

$home = $ENV{'HOME'};
$ls_file = &quot;/tmp/ls.$$&quot;;
$cull_file = &quot;/tmp/cull.$$&quot;;
$rm_file = &quot;/tmp/rm.$$&quot;;

# Patterns for files we may want to remove.
# Standard regular expression syntax applies.
$patterns =
'\\.aux$ \\.bak$ \\.bbl$ \\.blg$ \\.dlg$ \\.dvi$ '
. '\\.glo$ \\.idx$ \\.ind$ \\.lof$ \\.log$ \\.lot$ '
. '\\.old$ \\.ps$ \\.toc$ ^# #$ %$ ~$ ^core$ ^a.out$';

# $SIG is an associative array that holds the name of the
# handler for each signal.
$SIG{'HUP'} = 'sig_all'; $SIG{'INT'} = 'sig_all';
$SIG{'QUIT'} = 'sig_all'; $SIG{'TERM'} = 'sig_all';

if (@ARGV == 0) {
# Create the listing file using &quot;ls -lR&quot;.
chdir &quot;$home&quot;;
chop($pwd = `pwd`);
print &quot;Building the ls file. Patience...\n&quot;;
system(&quot;/bin/ls -ablLR $pwd &gt; $ls_file&quot;) &amp;&amp; do {
print &quot;ls -lR did not complete.\n&quot;;
&amp;sig_all;
};

# Look for files that can be removed.
print &quot;Writing the cull file.\n&quot;;
open(LS_FILE, &quot;$ls_file&quot;) || do {
print &quot;Could not open $ls_file for input.\n&quot;;
&amp;handler;
};
open(CULL_FILE, &quot;&gt;$cull_file&quot;) || do {
print &quot;Could not open $cull_file for output.\n&quot;;
&amp;handler;
};
$dir = &quot;$home&quot;;
while (&lt;LS_FILE&gt;) {
# The line just read is in the variable $_.
# Directory.
/:$/ &amp;&amp; do {
chop; chop;
$dir = $_;
next;
};

# Skip blank lines and &quot;total nnn&quot; lines.
if (length == 1  ||  /^total [0-9]*$/) {
next;
}

# Get just the filename.
/\s(\S*)$/;
$file = $1;

# Is this file a candidate for removal?
foreach $p (split(/ /, $patterns)) {
if ($file =~ /$p/) {
if (&quot;$prev&quot; ne &quot;$dir&quot;) {
print CULL_FILE &quot;$dir:\n&quot;;
$prev = $dir;
}
print CULL_FILE &quot;$_&quot;;
} }

} # while
} # No cull file supplied.
else {
# Cull file supplied.
$SIG{'HUP'} = 'sig_ls_rm'; $SIG{'INT'} = 'sig_ls_rm';
$SIG{'QUIT'} = 'sig_ls_rm'; $SIG{'TERM'} = 'sig_ls_rm';
$cull_file = $ARGV[0];
}

# At this point we have a cull file. Ask the user how to
# proceed from here.
MENU: while (1) {
print &quot; 1 Quit, leaving the cull file $cull_file.\n&quot;;
print &quot; 2 Create a script file you can run to do the&quot;;
print &quot; removals later.\n&quot;;
print &quot; 3 Interactively remove the files now.\n&quot;;
print &quot; 4 List the cull file; return to this menu.\n&quot;;
print &quot;(Ctrl-C to quit, doing nothing.)\n&quot;;
print &quot;Enter number of choice (1-4): &quot;;
$choice = &lt;STDIN&gt;;

$choice == '1' &amp;&amp; do {
print &quot;The file listing possible files to &quot;;
print &quot;remove is \&quot;$cull_file\&quot;.\n&quot;;
print &quot;You can rerun $0 &quot;;
print &quot;using that file as the argument.\n&quot;;
unlink $ls_file;
exit;
};

$choice == '2' &amp;&amp; do {
last MENU;
};

$choice == '3' &amp;&amp; do {
last MENU;
};

$choice == '4' &amp;&amp; do {
system(&quot;/opt/bin/less $cull_file&quot;);
next MENU;
};

# Default.
next MENU;

}; # while

# Create a script file.
$choice == '2' &amp;&amp; do {
$dir = $ENV{'HOME'};
open(CULL, &quot;$cull_file&quot;)
|| die &quot;Could not open $cull_file!\n&quot;;
open(RM, &quot;&gt;$rm_file&quot;)
|| die &quot;Could not open $rm_file!\n&quot;;
while (&lt;CULL&gt;) {
# Directory name.
/:$/ &amp;&amp; do {
chop; chop;
$dir = $_;
next;
};

# File name.
/^-/ &amp;&amp; do {
/\s(\S*)$/;
print RM &quot;/bin/rm -f $dir/$1\n&quot;;
next;
};
}
print &quot;The file containing rm commands is $rm_file\n&quot;;
exit;
}; # create script file

# Interactive file removal.
$SIG{'INT'} = 'sig_c';
$choice == '3' &amp;&amp; do {
# Read the cull file.
$dir = $ENV{'HOME'};
open(CULL, &quot;$cull_file&quot;)
|| die &quot;Could not open $cull_file!\n&quot;;
while (&lt;CULL&gt;) {
# Directory name.
/:$/ &amp;&amp; do {
chop; chop;
$dir = $_;
next;
};

# File name.
/^-/ &amp;&amp; do {
/\s(\S*)$/;
$file = $1;
print &quot;Remove $dir/$file? &quot;;
$_ = &lt;STDIN&gt;;
/^[yY]/ &amp;&amp; do {
unlink &quot;$dir/$file&quot;;
};
next;
};
}

if (@ARGV == 0) {
# Remove the tmp cull file.
unlink $cull_file;
}
unlink $ls_file;
exit;
}; # interactive removal
# Logical end of main program.

# Signal handler. Remove ALL tmp files.
sub sig_all {
unlink $ls_file;
unlink $cull_file;
unlink $rm_file;
exit 1;
}

# Signal handler. Remove ls and rm tmp files.
sub sig_ls_rm {
unlink $ls_file;
unlink $rm_file;
exit 1;
}

# The Control-C handler.
sub sig_c {
print &quot;Do you want to quit? &quot;;
$_ = &lt;STDIN&gt;;
/^[yY]/ &amp;&amp; exit 1;
# Reset the interrupt handler.
$SIG{'INT'} = 'sig_c';
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
