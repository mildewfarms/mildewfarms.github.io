<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i01: Listing 2: cvttime.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/1995/jan95.tar"><b class=codeListing>jan95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: cvttime.c</H1><p>
<PRE>
/*
** Thomas Richter
**
** cvttime [-f Format] [epoch]
**
** If invoked without any parameters, print the current time in seconds since
** 1.Jan 1970 (epoch). If the epoch parameter is specified, it is assumed
** to be seconds since epoch and is converted into human readable date and
** time. The option -f specifies the format of the date/time printout and the
** format string is the same as for the function strftime(3).
** The default format string is '%c%n'.
** Examples:
** cvttime  --&gt; 779048101
** cvttime 360     --&gt; Thu Jan  1 00:06:00 1970
** cvttime -f'%H:%M %d-%b-%y' 3666      --&gt; 01:01 01-Jan-70
*/

#include &lt;sys/types.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;unistd.h&gt;

#define OPTION  &quot;f:&quot;

char    *Prog;   /* Program's name on invocation */
int     main(int argc, char ** argv)
{
extern char     *optarg;
extern int      optind;
extern int      opterr;
extern int      errno;

int      ch;
char     *format = NULL,
buf[128];
time_t   epoch = time(NULL);     /* Default is current since epoch */
struct tm*tmptr;

opterr = 0;
Prog = strrchr(*argv, '/') ? strrchr(*argv, '/')+1 : *argv;
while( (ch = getopt(argc, argv, OPTION)) != EOF )
switch( ch ){
case 'f':   format = optarg;
break;
default:
fprintf(stderr, &quot;usage:%s [-f format] [epoch]\n&quot;, Prog);
exit(1);
}
if( argv[optind] ){
char *endptr;
errno = 0;
/*
** Check if number is not too big for us to handle
*/
epoch = strtol(argv[optind], &amp;endptr, 10);
if( errno == ERANGE ){
fprintf(stderr, &quot;%s:parameter %s out of range\n&quot;, Prog,
argv[optind]);
exit(2);
}
/*
** If parameter epoch doesn't start with a digit or doesn't
** entirely consist of digits print an error and give up.
*/
if( strlen(argv[optind]) == 0
|| strlen(argv[optind]) != strspn(argv[optind], &quot;0123456789&quot;) ){
fprintf(stderr, &quot;%s:parameter '%s' invalid\n&quot;, Prog,
argv[optind]);
exit(3);
}
/*
** Default format is output of the date command
*/
if( format == NULL )
format = &quot;%c%n&quot;;
}else
if( format == NULL ){
/* Just print current time in seconds since epoch */
printf(&quot;%ld\n&quot;, epoch);
return 0;
}

/* Convert time to human readable format */
tmptr = localtime(&amp;epoch);
strftime(buf, sizeof buf, format, tmptr);
printf(&quot;%s&quot;, buf);
return 0;
}
/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
