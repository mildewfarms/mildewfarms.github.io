<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v04, i01:  Figure 1: Example of Bourne shell with signal handling</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink>Figure 1</span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a3_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1995/jan95.tar"><b class=codeListing>jan95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Figure 1: Example of Bourne shell with signal handling</H1><p>
<PRE>
#!/bin/sh
#
# Example 1 - Bourne shell with signal handling
#
# This Bourne (or Korn) shell script illustrates the
# use of traps to catch common signals. This script:
#  1 Generates in a file a listing of all files in a
#    users' home directory.
#  2 From that file generates a &quot;cull file&quot; listing
#    candidates for removal.
#  3 The user can stop at this point, proceed to
#    generate a script file containing rm commands,
#    or remove the files with interactive confirmation.
#
# If this script is run with an argument, it is taken
# to be a previously generated cull file.
#
# John Lees                        lees@cps.msu.edu
# Systems Analyst       http://web.cps.msu.edu/prip
# Computer Science Dept,  Michigan State University
# Pattern Recognition &amp; Image Processing Laboratory

LS_FILE=&quot;/tmp/ls.$$&quot;
CULL_FILE=&quot;/tmp/cull.$$&quot;
RM_FILE=&quot;/tmp/remove.$$&quot;

# Set a trap to remove the temporary files on all
# the usual signals. With the Bourne shell, signal 0
# means normal exit from the shell.
trap &quot;/bin/rm -f $LS_FILE $CULL_FILE $RM_FILE; \
exit 1&quot; 0 1 2 3 15

# Did the user supply a cull file?
if test -z &quot;$1&quot; ; then
# No. Create a file containing a listing of all files
# in the home directory. Use the SVR4 ls command.
echo &quot;Finding all files, please be patient...&quot;
cd
/bin/ls -ablLR `pwd` &gt; $LS_FILE

# Read through the listing looking for files that could
# be removed. Create a cull file having these entries.
# A simple inline awk program is between the pair of
# single quote ('') characters.
echo &quot;Creating cull list.&quot;
/bin/awk ' # This is the beginning of the awk program.

# Matching &quot;:&quot; means this is a new directory.
$1 ~ /:$/ {
dir = $1
}

# Not a blank line and not the &quot;total nnn&quot; line.
# The last token on the line is the filename.
NF &gt; 0  &amp;&amp;  NF != 2 {

flag = &quot;&quot;
# This list could be much longer, of course.
if ( $NF ~ /\.bak$/ ) flag = 1
if ( $NF ~ /\.old$/ ) flag = 1
if ( $NF ~ /~$/ ) flag = 1

if ( flag == 1  ) {
# Print the directory just once.
if ( dir != prev ) {
print dir
prev = dir
}
# Print the file.
print $0
}
} # End of the awk program.
'  dir=&quot;`pwd`:&quot;  $LS_FILE  &gt; $CULL_FILE

else
# The user has supplied a cull file. Reset the trap
# so it is not removed.
trap &quot;/bin/rm -f $RM_FILE; exit 1&quot; 0 1 2 3 15
CULL_FILE=$1
fi

# The cull file looks like an &quot;ls -lR&quot; listing of only the
# files to possibly remove. Ask the user what to do next.
DONE=&quot;&quot;
WHAT=&quot;&quot;
while test -z &quot;$DONE&quot; ; do
echo &quot; &quot;
echo &quot; 1 Quit, leaving the cull file $CULL_FILE.&quot;
echo &quot; 2 Create a script file you can run to do the\c&quot;
echo &quot; removals later.&quot;
echo &quot; 3 Interactively remove the files now.&quot;
echo &quot; 4 List the cull file, then return to this menu.&quot;
echo &quot;(Ctrl-C to quit, doing nothing.)&quot;
echo &quot;Enter number of choice (1-4): \c&quot;
read CHOICE
DONE=&quot;done&quot;
case $CHOICE in
1) trap &quot;/bin/rm -f $LS_FILE; exit 1&quot; 0 1 3 15
echo &quot;The file listing possible files to \c&quot;
echo &quot;remove is \&quot;$CULL_FILE\&quot;.&quot;
echo &quot;You can rerun $0\c&quot;
echo &quot;using that file as the argument.&quot;
exit
;;
2) WHAT=&quot;script&quot;
;;
3) WHAT=&quot;interactive&quot;
;;
4) DONE=&quot;&quot;
${PAGER:-/usr/bin/more} $CULL_FILE
;;
*) DONE=&quot;&quot;
;;
esac
done

#----------
# Choice 2
#----------
if test &quot;$CHOICE&quot; = 2 ; then
# Read the cull file and build a file of rm commands.
echo '#!/bin/sh' &gt; $RM_FILE
echo &quot;# \c&quot; &gt;&gt; $RM_FILE
echo &quot;`/usr/bin/date`&quot; &gt;&gt; $RM_FILE

/bin/awk '
$1 ~ /:$/ { # Directory.
dir = substr($1, 1, length($1) - 1)
}
NF &gt; 2 { # File.
print &quot;/bin/rm -f &quot; dir &quot;/&quot; $NF
}
'  dir=&quot;$HOME&quot;  $CULL_FILE  &gt;&gt; $RM_FILE

# Make the kill file executable, change the trap so the
# remove file is not removed.
/bin/chmod 700 $RM_FILE
if test -z &quot;$1&quot; ; then
trap &quot;/bin/rm -f $LS_FILE $CULL_FILE; \
exit 1&quot; 0 1 2 3 15
else
trap &quot;/bin/rm -f $LS_FILE; exit 1&quot; 0 1 2 3 15
fi
echo &quot;The file containing rm commands is $RM_FILE.&quot;
exit
fi # End of choice 2

#----------
# Choice 3
#----------
# Interactive removal.
# Save the terminal stdin as file descriptor 3 for use in
# user interaction. Attach stdin (descriptor 0) to the cull
# file.
exec 3&lt;&amp;0 &lt;&quot;$CULL_FILE&quot;

# From this point on in case the user panics and hits
# Control-C we want to give her the option to continue.
# The trap to remove all /tmp files on the other signals
# is still in effect.

# The Control-C handler. This function must appear before
# the trap statement that references catch_c.
catch_c() {
# Read from the terminal using descriptor 3.
echo &quot;Do you really want to quit? \c&quot;
read ANSWER &lt;&amp;3
if test &quot;$ANSWER&quot; = &quot;y&quot; -o &quot;$ANSWER&quot; = &quot;Y&quot;
then
echo &quot;Bye. /tmp files removed.&quot;
exit 1
else
echo &quot;Continuing...&quot;
fi
} # end of catch_c

# Set a trap to catch Control-C. The previous traps set on
# signals 0, 1, 3, and 15 remain in effect.
trap &quot;catch_c&quot; 2

# Read the cull file. As each file is encountered, ask the
# user for confirmation and then remove the file or not.
# The read uses descriptor 0, attached to the cull file.
DIR=$HOME
while read FIRST REST
do
# First character of first token.
C=`echo &quot;$FIRST&quot; | sed -e 's/^\(.\).*$/\1/'`

# Directory name.
if test &quot;$C&quot; = &quot;/&quot;
then # Directory
DIR=`echo &quot;$FIRST&quot; | sed -e 's/://'`
continue
fi

# File name.
if test &quot;$C&quot; = &quot;-&quot;
then # File
FILE=`echo &quot;$REST&quot; | sed -e 's/^.* \([^ ]*\)$/\1/'`
echo &quot;Remove $DIR/$FILE? \c&quot;
# Read from terminal using descriptor 3.
read REPLY &lt;&amp;3
if test &quot;$REPLY&quot; = &quot;y&quot; -o &quot;$REPLY&quot; = &quot;Y&quot;
then
/bin/rm -f &quot;$DIR/$FILE&quot;
fi
continue
fi
done

# Done with the interactive removal.
exit
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
