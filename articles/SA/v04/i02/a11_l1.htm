<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i02: Listing 1: mkuser script</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a11.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a11_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a11_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a11_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a11_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1995/mar95.tar"><b class=codeListing>mar95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: mkuser script</H1><p>
<PRE>
#!/usr/local/bin/perl
#
#  make user
#
#  12 December 1994 - Russ Hill
#
#usage
#./mkuser
#./mkuser joe smith jsmith jsmith next workgroup home /bin/csh
#./mkuser tom thibodeaux tthibode tthibodeaux next gen home /bin/ksh
#./mkuser tom thibodeaux tthibode tthibodeaux next gen home /bin/ksh o,iltay
#
# note:
# logname is always 8 characters
# username can be the full name if you wish
# password is the logname if not specified or generated

#read from the command line
($firstname,$lastname,$logname,$username,$uid,$group,$home,
$shell,$passworddef) = @ARGV;

#uncomment to debug script
#$debug = 1;

#set defaults
$homedef = &quot;home&quot;;
$groupdef = &quot;staff&quot;;
$defaultcshdef = &quot;/usr/local/adm/cshuser&quot;;
$defaultkshdef = &quot;/usr/local/adm/kshuser&quot;;

#uncomment to use password generator
#$passwordgenerate = do pwgen() ;

$output = $shell;

#exit if not root
$id = system (&quot;/bin/id | grep 'uid=0' &gt; /dev/null 2&gt;&amp;1&quot;);
if ( $id )
{
die (&quot;ERROR: This script must be run as root.\n&quot;);
}

#Get name if not already set
if ( ! $firstname || ! $lastname )
{
print;
print(&quot;What is the new user's first name?\n&quot;);
chop($firstname = &lt;STDIN&gt;);
$firstname =~ tr/A-Z/a-z/;
print(&quot;What is the new user's last name?\n&quot;);
chop($lastname = &lt;STDIN&gt;);
$lastname =~ tr/A-Z/a-z/;
}

$first = substr($firstname,0,1);

#set username
if ( ! $username )
{
$username = $first . $lastname;
}

#set logname and password
if ( $logname )
{
$password = $logname;
}
else
{
$logname = substr($username,0,8);
$password = $logname;
print(&quot;Use ${logname} as ${firstname} ${lastname}'s login name [yn]?\n&quot;);
chop($answer = &lt;STDIN&gt;);
$answer =~ tr/A-Z/a-z/;
if ($answer eq &quot;n&quot; || $answer eq &quot;no&quot;)
{
print (&quot;What is the new user's login name?\n&quot;);
chop($logname = &lt;STDIN&gt;);
$logname =~ tr/A-Z/a-z/;
$logname = substr($logname,0,8);
$password = $logname;
}
print(&quot;Use ${username} as ${firstname} ${lastname}'s user name (basename home directory)
[yn]?\n&quot;);
chop($answer = &lt;STDIN&gt;);
$answer =~ tr/A-Z/a-z/;
if ($answer eq &quot;n&quot; || $answer eq &quot;no&quot;)
{
print (&quot;What is the new user's user name (basename home directory name)?\n&quot;);
chop($username = &lt;STDIN&gt;);
$username =~ tr/A-Z/a-z/;
}
print(&quot;Use $password as $firstname ${lastname}'s password [yn]?\n&quot;);
chop($answer = &lt;STDIN&gt;);
$answer =~ tr/A-Z/a-z/;
if ($answer eq &quot;n&quot; || $answer eq &quot;no&quot; )
{
print (&quot;What is the new user's password?\n&quot;);
chop($password = &lt;STDIN&gt;);
$password =~ tr/A-Z/a-z/;
}
}

#check to see if logname already exists
if ( getpwnam($logname) )
{
die (&quot;ERROR: Account $logname already exists.\n&quot;);
}

#get next available uid
if ( ! $uid || $uid eq &quot;next&quot; )
{
setpwent;
while (@passwduser = getpwent)
{
push (@passwduidlist,@passwduser[2]);
}
endpwent;

@passwduidlist = reverse sort numerically (@passwduidlist);
#$uid = @passwduidlist[1] + 1;
$uid = @passwduidlist[0] + 1;
}

#check if uid is already used
if ( getpwuid($uid) )
{
die  (&quot;ERROR: uid $uid is already used. \n&quot;);
}

#set group
if ( ! $group )
{
$group = $groupdef;
print (&quot;Put $firstname $lastname in the $group group [yn]?\n&quot;);
chop($answer = &lt;STDIN&gt;);
$answer =~ tr/A-Z/a-z/;
if ($answer eq &quot;n&quot; || $answer eq &quot;no&quot; )
{
print (&quot;What is the new user's group?\n&quot;);
chop($group = &lt;STDIN&gt;);
$group =~ tr/A-Z/a-z/;
}
}

#get gid
($groupname,$grouppasswd,$gid,$groupmembers) = getgrnam($group);
if ( ! $gid  )
{
die (&quot;ERROR: group $group does not exist. \n&quot;);
}

#set home directory
if ( ! $home )
{
$home = &quot;/&quot; . $homedef . &quot;/&quot; . $username;
}
else
{
$home = &quot;/&quot; . $home . &quot;/&quot; . $username;
}


#set shell
if ( ! $shell )
{
$shell = &quot;/bin/csh&quot;;
print (&quot;Use $shell for $firstname ${lastname}'s login shell [yn]?\n&quot;);
chop($answer = &lt;STDIN&gt;);
$answer =~ tr/A-Z/a-z/;
if ( $answer eq &quot;n&quot; || $answer eq &quot;no&quot; )
{
print (&quot;What is the new user's shell?\n&quot;);
chop($shell = &lt;STDIN&gt;);
$shell =~ tr/A-Z/a-z/;
}
}

#set defaults for new account
if ( $shell eq &quot;/bin/ksh&quot; )
{
$default = $defaultkshdef;
}
else
{
$default = $defaultcshdef;
}

#get pid
$pid = getppid;

#make first character uppercase
substr($firstname,0,1) =~ tr/a-z/A-Z/;
substr($lastname,0,1) =~ tr/a-z/A-Z/;

#set password
if ( $passworddef )
{
$password = $passworddef;
}

if ( $passwordgenerate )
{
$password = $passwordgenerate;
print (&quot;${logname} password is: $password \n&quot;);
}

#crypt password
$cryptpassword = crypt($password,$password);

#make shell script to finish
$TEMP = &quot;/tmp/mkuser.$pid&quot;;
open (FILE, &quot;&gt;$TEMP&quot;);
print FILE &quot;#!/bin/sh \n\n&quot;;

#no shadow file
print FILE &quot;echo
\&quot;${logname}:${cryptpassword}:${uid}:${gid}:${firstname}${lastname}:${home}:${shell}\&quot; &gt;&gt;
/etc/passwd \n&quot;;

#with shadow file
#printFILE&quot;echo\&quot;${logname}:x:${uid}:${gid}:${firstname}${lastname}:${home}:${shell}\&quot;
&gt;&gt; /etc/passwd \n&quot;;
#print FILE &quot;echo \&quot;${logname}:${cryptpassword}:8793:0:6993:7:::\&quot; &gt;&gt; /etc/shadow
\n&quot;;
#print FILE &quot;/usr/sbin/pwconv \n&quot;;

#make directory
print FILE &quot;cp -r ${default} ${home} \n&quot;;
print FILE &quot;chown -R $logname ${home} \n&quot;;

#print FILE &quot;find ${home} -type f -exec chmod 755 {} \\\; \n&quot;;
#print FILE &quot;find ${home} -type d -exec chown ${logname} {} \\\; \n&quot;;
#print FILE &quot;find ${home} -type f -exec chmod ${logname} {} \\\; \n&quot;;

print FILE &quot;cd /var/yp \n&quot;;
print FILE &quot;make passwd  &gt; /dev/null \n&quot;;
print FILE &quot;\n\n&quot;;
close FILE;

chmod 0755, $TEMP;

if ( ! $debug )
{
#actually make the user
#run and remove $TEMP shell script
system &quot;$TEMP&quot;;
unlink $TEMP;
}
else
{
#debug - print out
#print(&quot;${logname}:${cryptpassword}:${uid}:${gid}:${firstname}${lastname}:${home}:${shell}\n&quot;);
system &quot;cat $TEMP&quot;;
unlink $TEMP;
}

#print out -- complete
if ( ! $output )
{
print (&quot;\nAccount ${logname} added. \n&quot;);
print (&quot;Add completed. \n&quot;);
}

#------------------------------------------------------------------
# functions

#sort numerically
sub numerically { $a &lt;=&gt; $b; }

sub pwgen {
#
# password generator
#
# Make up passwords which have similar letter digraph frequencies to
# english. frequency of English digraphs (from D Edwards 1/27/66)
#
# note:
# Rewrite this subroutine when perl generally has
# multidimensional arrays.

$PASSWD_LENGTH = 8;

# fake 2 dim-array,
@array =
(4,20,28,52,2,11,28,4,32,4,6,62,23,167,2,14,0,83,76,127,7,25,8,1,9,1,
13,0,0,0,55,0,0,0,8,2,0,22,0,0,11,0,0,15,4,2,13,0,0,0,15,0,
32,0,7,1,69,0,0,33,17,0,10,9,1,0,50,3,0,10,0,28,11,0,0,0,3,0,
40,16,9,5,65,18,3,9,56,0,1,4,15,6,16,4,0,21,18,53,19,5,15,0,3,0,
84,20,55,125,51,40,19,16,50,1,4,55,54,146,35,37,6,191,149,65,9,26,21,12,5,0,
19,3,5,1,19,21,1,3,30,2,0,11,1,0,51,0,0,26,8,47,6,3,3,0,2,0,
20,4,3,2,35,1,3,15,18,0,0,5,1,4,21,1,1,20,9,21,9,0,5,0,1,0,
101,1,3,0,270,5,1,6,57,0,0,0,3,2,44,1,0,3,10,18,6,0,5,0,3,0,
40,7,51,23,25,9,11,3,0,0,2,38,25,202,56,12,1,46,79,117,1,22,0,4,0,3,
3,0,0,0,5,0,0,0,1,0,0,0,0,0,4,0,0,0,0,0,3,0,0,0,0,0,
1,0,0,0,11,0,0,0,13,0,0,0,0,2,0,0,0,0,6,2,1,0,2,0,1,0,
44,2,5,12,62,7,5,2,42,1,1,53,2,2,25,1,1,2,16,23,9,0,1,0,33,0,
52,14,1,0,64,0,0,3,37,0,0,0,7,1,17,18,1,2,12,3,8,0,1,0,2,0,
42,10,47,122,63,19,106,12,30,1,6,6,9,7,54,7,1,7,44,124,6,1,15,0,12,0,
7,12,14,17,5,95,3,5,14,0,0,19,41,134,13,23,0,91,23,42,55,16,28,0,4,1,
19,1,0,0,37,0,0,4,8,0,0,15,1,0,27,9,0,33,14,7,6,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,
83,8,16,23,169,4,8,8,77,1,10,5,26,16,60,4,0,24,37,55,6,11,4,0,28,0,
65,9,17,9,73,13,1,47,75,3,0,7,11,12,56,17,6,9,48,116,35,1,28,0,4,0,
57,22,3,1,76,5,2,330,126,1,0,14,10,6,79,7,0,49,50,56,21,2,27,0,24,0,
11,5,9,6,9,1,6,0,9,0,1,19,5,31,1,15,0,47,39,31,0,3,0,0,0,0,
7,0,0,0,72,0,0,0,28,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,3,0,
36,1,1,0,38,0,0,33,36,0,0,4,1,8,15,0,0,0,4,2,0,0,1,0,0,0,
1,0,2,0,0,1,0,0,3,0,0,0,0,0,1,5,0,0,0,3,0,0,1,0,0,0,
14,5,4,2,7,12,12,6,10,0,0,3,7,5,17,3,0,4,16,30,0,0,5,0,0,0,
1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

@rowsums =
(796,   160,    284,    401,    1276,   262,
199,    539,    777,     16,      39,   351,
243,    751,    662,    181,      17,   683,
662,    968,    248,    115,     180,    17,
162,    5);

# Frequencies of starting characters
@startfreq =
(1299,     425,    725,    271,    375,    470,
93,        223,   1009,     24,     20,    355,
379,       319,    823,    618,     21,    317,
962,      1991,    271,    104,    516,      6,
16,       14);

@alpha =
( 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
't', 'u', 'v', 'w', 'x', 'y', 'z');

$total_sum = 11646;

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);

srand( $sec * $min |  $$ );
$rand = rand($total_sum);
$position = ($rand % $total_sum);
$j = 0;
for ( $row = 0 ; $position &gt;= $row; $row = $row + $startfreq[$j] )
{
$j++;
$j = 0 if $j eq 27;
}

$password = $password . @alpha[ ($j - 1) ];

for ( $char = ($PASSWD_LENGTH - 1); $char; --$char)
{
$i = $j;
$rand = rand($total_sum);
$position = ($rand % $rowsums[$i]);
$j = 0;

for ($row = 0; $position &gt;= $row;
$row += $addition   )
{

@frequency = @array[ ($i * 26) .. (($i * 26) + 25) ];

$addition = $frequency[$j];
$j++;
$j = 0 if $j eq 27;
}
$password = $password . @alpha[ ($j - 1) ];

}

#generated password
return $password;
}
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
