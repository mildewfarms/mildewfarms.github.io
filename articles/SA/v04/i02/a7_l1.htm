<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v04, i02: Listing 1: calendar.sh, the enhanced calendar program</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1995/mar95.tar"><b class=codeListing>mar95.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: calendar.sh, the enhanced calendar program</H1><p>
<PRE>
###########################################################
# BEGIN PROGRAM LISTING
###########################################################

:
# calendar.sh - enhanced calendar program.  Add a .calendar file to
# your $HOME directory and call this program nightly from cron.
#                Copyright (C) 1995 Steven G. Isaacson

# syntax
test &quot;$1&quot; = &quot;-h&quot; &amp;&amp; {
echo &quot;Syntax: `basename $0` [calendar]&quot;
exit 1
}

# calendar file.  If not specifed on command-line, use $HOME/.calendar
calfile=${1:-$HOME/.calendar}

# do we have a valid file?
test -f &quot;$calfile&quot; || {
echo &quot;Error: could not read: $calfile&quot;
exit 1
}

# make sure we have all that we need.  set appropriately for your
# system.
PATH=$PATH:/usr/bin ; export PATH

# we're currently using elm
: ${mailer:=/usr/bin/elm}

# set -xv # uncomment for debugging

# if no mail-to is specified in calendar file, send mail to whoever is
# running this program.  If logname program not available you can strip
# out the name from id.
def_mail=&quot;`logname`&quot;

# tmp file for Regular Expressions
refile=/tmp/refile.$$

# tmp file
tfile=/tmp/tfile.$$

# get 3-character day of week, to be used with our custom keywords.
today=`date '+%a'`

{ # BEGIN BRACE

# all stdout between the braces will be funneled through the closing
# brace.  This is similiar to using parens to spawn a sub-shell, but
# we don't need a subshell.  Could also have done something like this:
#   prog1    &gt;  outfile
#   prog2    &gt;&gt; outfile
#   prog_etc &gt;&gt; outfile
# and then used the contents of outfile.

# This is how the stock calendar program generates r.e. for dates
/usr/lib/calprog

# Look for our custom 'daily' keyword, but not on comment lines.
echo &quot;^[^#]*[Dd]aily&quot;

# Look for custom day keywords.  If this is Mon, then look for
# monday, etc.  Again, skip comment lines.  Case sensitivity is
# consistent with calprog.
case &quot;$today&quot; in
Mon) echo &quot;^[^#]*[Mm]onday&quot; ;;
Tue) echo &quot;^[^#]*[Tt]uesday&quot; ;;
Wed) echo &quot;^[^#]*[Ww]ednesday&quot; ;;
Thu) echo &quot;^[^#]*[Tt]hursday&quot; ;;
Fri) echo &quot;^[^#]*[Ff]riday&quot; ;;
Sat) echo &quot;^[^#]*[Ss]aturday&quot; ;;
Sun) echo &quot;^[^#]*[Ss]unday&quot; ;;
*) echo &quot;ERROR: date&quot; &gt;&amp;2 ; exit 1 ;;
esac

# Custom weekday and weekend keywords
case &quot;$today&quot; in
Mon|Tue|Wed|Thu|Fri) echo &quot;^[^#]*[Ww]eekday&quot; ;;
Sat|Sun) echo &quot;^[^#]*[Ww]eekend&quot; ;;
esac

} | # END BRACE
awk '{
# Now that we have all of our regular expressions ... egrep
# complains that we have too many and fails.  So forget about
# egrep.  Create an awk script egrep work-alike, on-the-fly.  Like
# this:
#  /Oct 20/ { print; next; }
#  /Oct 21/ { print; next; }

# Need to escape slashes from calprog output because slashes are
# the delimiter for awk.  old awk does not have gsub.  use nawk or
# gawk or sed.

gsub(/\//, &quot;\\/&quot;)

printf(&quot;/%s/ {print; next;}\n&quot;, $0)

}' &gt; $refile

# We've got the regular expression file.  Time to pre-process the
# calendar file.  Do two things: convert multi-line entries (designated
# with escapes at end of line) into single-line entries.  And second...
#
# The following calendar file line does not work because we need a
# space between the pipe and Oct
#
#     mail_to|Oct 3 does not work.  [need space]
#
# but I expected it to, so, make it work by adding a space after
# the first pipe and then, after we're done with the regular
# expressions, taking the space out again.

awk '/^[^#]*\|/ {
# sub not gsub; only do first one
sub(/\|/, &quot;| &lt;PIPE_SPACE&gt; &quot;)
}
/\\[    ]*$/ {
# convert multi-line entries
printf(&quot;%s &lt;nl&gt;&quot;, $0)
next
}
{ print }' $calfile |

# pipe the calendar entries through the date/r.e. filter
awk -f $refile |

# read the lines that come out and send mail, etc.
while read line
do
# get the mail-to address, everything up to the first pipe symbol
mail_to=`echo $line | awk -F\| 'NF &gt; 1 {print $1}'`

# if none found, use default address
test &quot;$mail_to&quot; || mail_to=&quot;$def_mail&quot;

# initialize temp file
&gt; $tfile

# create subject line for mailer
subject=&quot;calendar.sh `date`&quot;

# undo the multi-line and pipe-space conversion that was possibly
# done above
line=`echo &quot;$line&quot; | awk '{
gsub(/&lt;nl&gt;/, &quot;\n&quot;)
sub(/\| &lt;PIPE_SPACE&gt; /, &quot;|&quot;)
print
}'`

# echo the entry to the temp file
echo &quot;$line
&quot; &gt;&gt; $tfile

# Check for additional file or system command to be run.
echo &quot;$line&quot; | awk '
/#[f!]:.*#[f!]:/ {
print &quot;ERROR: multiple #f: or #!: expressions&quot;
next
}
/#f:/ {
# delete everything up to #f:
sub(/^.*#f:/,&quot;&quot;)

# delete everything after the first space, which means only one
# file at a time; one per line.
sub(/ .*/, &quot;&quot;)
str=sprintf(&quot;cat %s&quot;, $0)
system(str)
next
}
/#!:/ {
sub(/^.*#!:/,&quot;&quot;)
sub(/#.*/, &quot;&quot;)
str=sprintf(&quot;%s&quot;, $0)
system(str)
next
}' &gt;&gt; $tfile

# send the mail.
$mailer -s &quot;$subject&quot; &quot;$mail_to&quot; &lt; $tfile &gt; /dev/null
done

# cleanup
rm -f $refile $tfile
exit 0

###########################################################
# END PROGRAM LISTING
###########################################################
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
