<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v02, i01:  Publisher's Forum</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1993/jan93.tar"><b class=codeListing>jan93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Publisher's Forum</H1><p>
<P>
Parallel processing and distributed computing have
fascinated 
me for decades now. (Maybe I should have said years
-- then I wouldn't 
be forced to confront my age.) Unfortunately, that interest
has never 
been translated into anything very useful. As a graduate
student I 
seriously pursued some paper designs and analysis of
data flow architectures, 
but in the interest of expediency, based my degree on
some other work. 
I've even tried twice, unsucessfully, since then to
salvage some small 
part of the earlier work. <P>

But, circumstances may finally be conspiring to give
me a 
chance to play with at least some limited distributed
computing. All 
of our business applications (as opposed to typesetting
and graphic 
arts) are hosted on a single, small UNIX box. Our growing
demands 
for peripheral support and database operations are rapidly
outstripping 
the capabilities of this machine, but I'd really like
to avoid the 
expense of moving up into the next performance tier.
We're at that 
awkward size where the price/performance ratio just
isn't that good.<P>

So, we're playing with the idea of spreading our work
across 
two cooperating hosts -- both running UNIX. The two
most likely 
divisions seem to be:<P>

- everything except database engine on one machine;

database files and database engine on the other;<P>

- one relatively independent section of the database

on one machine, the balance of the database on the other,
users split 
between the two, and applications duplicated on both.<P>

I tend to lean toward the first because, with a good
transaction-based 
database manager, it should be cleaner to implement.
Moreover, since 
database operations have a far greater impact on response
time than 
any other part of our load, relegating the database
operations to 
a separate machine would guarantee that all other applications
(including 
most simple data entry and query screens) would always
have snappy 
response.<P>

Unfortunately, I don't have any direct experience with
distributed 
databases, or client-server transaction systems. And,
I know that 
some vendors have released or are promising &quot;distributed&quot;

UNIX operating systems. Should I pursue one of those
solutions instead? 
Judging from our readers' comments and letters, I'm
not the only one 
with unanswered questions in this domain.<P>

So, this is a blatant attempt to pick your brain. If
you have 
experience with UNIX-based distributed computing, please
share your 
experience with me and our readers. Tell us what you've
done, what 
were the surprises, what went well, how has it complicated
(or simplified) 
administration tasks, what you would do different if
you were to start 
all over. <P>

Sincerely yours,<br>
Robert Ward<br>
saletter@rdpub.com (...!uunet!bdsoft!rdpub!saletter&quot;)<P>




<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
