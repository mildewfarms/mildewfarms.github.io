<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i01: Listing 2</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a3.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1993/jan93.tar"><b class=codeListing>jan93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2</H1><p>
<PRE>
1: #
2: # Project Directory and Scratch Directory Management Script
3: # Written by Leor Zolman, 10/92
4: #
5: # For inclusion in .profile under sh or ksh shells.
6: # This code is generalized, and will work as shown under both shells,
7: # though slightly better performance may be obtained under ksh by changing
8: # invocations of pwd into interpolations of the $PWD environment variable.
9: #
10:
11: #### Project directory management: #########################################
12:
13: PROJDIR=$HOME/.Proj     # Master directory for all project definitions
14: export PROJDIR          # (required for use by showp and shows scripts)
15: NPROJDIRS=12            # Maximum number of project directories
16: SCRATCHDIRS=&quot;x y z&quot;     # scratchpad directory memory variables
17: SHOWCHANGE=Y            # Y to show result of dir change, else N (set to N
18:                         # if your prompt already displays working directory)
19: #
20: # Master project directory control function (called by p# functions below)
21: # usages:
22: #   p proj# dir     - add given directory (. for current) to project list
23: #   p proj#         - change directory to given project
24: #   p proj# done    - drop given project from project list
25: #
26:
27: showdir() { [ &quot;$SHOWCHANGE&quot; = Y ] &amp;&amp; pwd; return 0; } # show new dir, if desired
28:
29: p()
30: {
31:     [ $# -eq 0 ] &amp;&amp; echo &quot;p() shell function invoked incorrectly.&quot; &amp;&amp; return
32:     [ $1 -ge 1 ] 2&gt;/dev/null &amp;&amp; [ $1 -le $NPROJDIRS ] 2&gt;/dev/null &amp;&amp;
33:     {
34:         if [ $# -eq 2 ]; then
35:             if [ $2 = done -a -f $PROJDIR/Proj$1 ]; then
36:                 rm $PROJDIR/Proj$1
37:                 eval &quot;unset proj$1&quot;
38:                 return
39:             fi
40:             target=$2
41:             [ $2 = &quot;.&quot; ] &amp;&amp; target=`pwd`
42:             echo $target &gt;$PROJDIR/Proj$1
43:             # Define and export environment variable proj#:
44:             eval &quot;proj$1=$target; export proj$1&quot;
45:         else
46:             if [ ! -f $PROJDIR/Proj$1 ]; then
47:                 echo &quot;No Project #$1 defined.&quot;
48:                 return
49:             fi
50:             touch $PROJDIR/Proj$1
51:             cd `cat $PROJDIR/Proj$1`
52:             showdir
53:         fi
54:         return
55:     }
56:     echo &quot;p() function called with invalid project register number: $1&quot;
57: }
58:
59: # Create project directory, if it does not already exist:
60: [ ! -d $HOME/.Proj ] &amp;&amp; mkdir $HOME/.Proj
61:
62: #
63: # Define all quick-access functions p#(), and define simple
64: # environment variables proj# (for active projects only) by
65: # reading in their values from the .Proj directory:
66: #
67:
68: i=1
69: while [ $i -le $NPROJDIRS ]
70: do
71:     # Define quick-access function p#():
72:     eval &quot;p$i() { p $i &quot;'$*'&quot;; }&quot;
73:
74:     # if project active, define environment variable proj#:
75:     [ -f $PROJDIR/Proj$i ] &amp;&amp;
76:         eval &quot;proj$i=`cat $PROJDIR/Proj$i`; export proj$i&quot;
77:
78:     i=`expr $i + 1`
79: done
80:
81:
82: #### scratchpad directory shorthand function/variable definitions: #########
83:
84: for X in $SCRATCHDIRS
85: do
86:     # Define assignment function setX() for each X in SCRATCHLIST (each such
87:     # function defines a directory and a corresponding environment variable)
88:     eval &quot;set$X() { $X=\`pwd\`; echo \$$X &gt;$PROJDIR/${X}dir; }&quot;
89:
90:     # Define function to undefine a directory and corresponding env. var:
91:     eval &quot;unset$X() { unset $X; rm $PROJDIR/${X}dir; }&quot;
92:
93:     # Define quick-access function goX() for each X in SCRATCHLIST:
94:     eval &quot;go$X() {
95:         [ \&quot;\$$X\&quot; != \&quot;\&quot; ] &amp;&amp; cd \$$X &amp;&amp; touch $PROJDIR/${X}dir \
96:                 &amp;&amp; showdir &amp;&amp; return
97:             echo directory $X undefined.; }&quot;
98:
99:     # Define environment variable X for each *defined* X in SCRATCHLIST:
100:    [ -f $PROJDIR/${X}dir ] &amp;&amp; read $X &lt; $PROJDIR/${X}dir
101:done</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
