<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i05: Listing 1: Eric Horne's corrected newping</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a8.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1993/sep93.tar"><b class=codeListing>sep93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: Eric Horne's corrected newping</H1><p>
<PRE>
/*  newping v1.0f

Replaces ping(1) for simple host status
information. Uses TCP/IP to check the
target machine, connects to a well-known
port, and waits for a response. Does not
use ICMP, like ping(1).

Exit Codes:

0 -- host is up
1 -- Problem with connecting
2 -- host would connect, but wouldn't respond
3 -- Connection was forcably refused
4 -- Problem with the network
5 -- Host is unreachable
255 -- Unknown or unexpected error occured.

REVISIONS:
Version 1.0  -- Nov 07, 1991
Version 1.0a -- Nov 18, 1991
Version 1.0c -- Jul 10, 1992
Version 1.0f -- Aug 23, 1992
*/

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;
#include &lt;ctype.h&gt;
#include &lt;signal.h&gt;
#include &lt;errno.h&gt;

#define DEFAULTTIMEOUT 20    /* in seconds */
#define SERVICEPORT &quot;time&quot;   /* name of port */
#define DEFAULTPORT  37      /* TIME/TCP port # */

#define DEBUG 0x1
#define VERBOSE 0x2

int totsecs=1;       /* Time elapsed so far */
int timeout;         /* Time allowed to elapse */
int sckt;
char *hostname;      /* name of the remote host */
char opts;

extern int errno;    /*  */

void noconnect();
void noresponse();

main(argc,argv)
char *argv[];
int argc;
{
struct hostent *host;
struct servent *service;
struct protoent *protocol;
struct sockaddr_in pinghost,frompinghost;
struct sockaddr_in localhost;
int fromlen,res;
long ipaddress;
char buf[25];

if((argc&gt;1)&amp;&amp;(*argv[1]=='-'))
{
int offset=1;

while(*(argv[1]+offset))
switch(*(argv[1]+offset))
{
case 'd':        /* debug mode */
opts|=DEBUG; offset++;
break;
case 'v':        /* verbose mode */
opts|=VERBOSE; offset++;
break;
case NULL:       /* end of options list */
break;
default:         /* unknown option */
offset++; break;
}
}

if(argc&gt;1)
{
if(isdigit(*(argv[argc-1])))
{
if(strchr(argv[argc-1],'.'))
hostname=argv[argc-1];
else
hostname=(argc-2) ? argv[argc-2] :
argv[argc-1];
}
else
hostname=argv[argc-1];
}
else
{
hostname=(char *)strrchr(argv[0],'/');
if(hostname)
{
hostname++; *hostname=NULL;
}
else
hostname = argv[0];
fprintf(stderr,
&quot;Usage: %s -[dv] host [timeout]\n&quot;,
hostname);
exit(0);
}

if(isdigit(*(argv[argc-1])))
timeout=atoi(argv[argc-1]); /* Define timeout */
else
timeout=DEFAULTTIMEOUT;     /*  or default */

/* Assume an IP address was given */

if((ipaddress=inet_addr(hostname))==-1)
{
if(host=gethostbyname(hostname))
{
/* Found host, initialize the address */
pinghost.sin_family=host-&gt;h_addrtype;
bcopy(host-&gt;h_addr,
(char *)&amp;pinghost.sin_addr,
host-&gt;h_length);
}
else           /* UNKNOWN HOST */
{
/* Host unknown -- assume it is down */
printf(&quot;%s: unknown host %s\n&quot;,
argv[0],hostname);
exit(1);
}
}
else
{
pinghost.sin_addr.s_addr=ipaddress;
pinghost.sin_family=AF_INET;
}

if(opts&amp;DEBUG)
printf(&quot;The IP Address for %s is: %0lX\n&quot;,
hostname,pinghost.sin_addr.s_addr);

/* Define the activity port */
/* I tried using getservbyname(), but it seemed to
crash the program. I don't know why. */

pinghost.sin_port=DEFAULTPORT;

if(opts&amp;DEBUG)
printf(&quot;Service %s recognized as port # %d.\n&quot;,
SERVICEPORT,pinghost.sin_port);

/* Find the protocol by name (TCP/IP) */
if(!(protocol=getprotobyname(&quot;tcp&quot;)))
{
printf(&quot;Unrecognized protocol: tcp\n&quot;);
exit(255);
}

/* Make the socket on the local machine */
if((sckt=socket(AF_INET,SOCK_STREAM,0))&lt;0)
{
perror(&quot;socket&quot;); exit(255);
}

if(opts&amp;DEBUG)
printf(&quot;Socket open. Descriptor Number %d\n&quot;,
sckt);

/* Set the alarm clock to go off in a second */

signal(SIGALRM,noconnect); alarm(1);

/* Attempt the connection with remote machine.
The EINTR is added so that when the alarm goes
off and interrupts the system call, the call
will recover. */

while(res=connect(sckt,
(struct sockaddr *)&amp;pinghost,
sizeof(pinghost)))
{
if(res==-1)                       /* error occured! */
{
if((opts&amp;DEBUG)&amp;&amp;(errno!=EINTR))
perror(&quot;connect&quot;);

switch(errno)
{
case ECONNRESET:    /* reset connection */
case ECONNREFUSED:  /* Connection refused */
perror(&quot;connect&quot;);
mypingexit(3);
break;            /*  Exit CODE 3 */

case EHOSTUNREACH:  /* Host is unreachable */
perror(&quot;connect&quot;);
mypingexit(5);
break;            /*  Exit CODE 5 */

case EINTR:         /* call interrupted */
case EISCONN:       /* Connection exists */
/* The connection was interrupted by alarm
clock going off. The only way I know to
reset the situation is to open a socket,
and reattempt a connect() call */
close(sckt);
if((sckt=socket(AF_INET,SOCK_STREAM,0))&lt;0)
{
perror(&quot;socket&quot;); mypingexit(255);
}

break;
case ENETRESET:     /* Dropped connection */
case ENETDOWN:      /* Network down */
case ENETUNREACH:   /* Network unreachable */
perror(&quot;connect&quot;);
mypingexit(4);
break;            /*  Exit CODE 4 */

case EADDRINUSE:    /* Address in use */
case EADDRNOTAVAIL: /* Address not available */
break;            /*  Ignore these. */

default:            /* Unknown or unexpected */
perror(&quot;connect&quot;);
mypingexit(255);
break;            /*  Exit CODE 255 */
}
}

if((opts&amp;DEBUG)||(opts&amp;VERBOSE))
printf(&quot;Connect made (returned with %d)\n&quot;,res);

/* Reset the alarm to call noresponse() when it
expires */
signal(SIGALRM,noresponse); alarm(1);

/* Just because the connect() succeeded, the
machine may still be down. This portion
tests the down-ness of the machine by
waiting for a response from the connection. */


while((res=recv(sckt,buf,sizeof(buf),0))&lt;=0)
if(res==-1)
{
if(opts&amp;DEBUG)
{
perror(&quot;recv&quot;); continue;
}

switch(errno)
{
case ECONNABORTED:  /* connection aborted */
case ENOTCONN:      /* no connection */
perror(&quot;recv&quot;);   /*  Exit CODE 1 */
mypingexit(1);
break;

case ECONNRESET:    /* reset connection */
case ENETRESET:     /* network reset */
perror(&quot;recv&quot;);   /*  Exit CODE 4 */
mypingexit(4);
break;

default:            /* Unknown or unexpected */
perror(&quot;recv&quot;);   /*  Exit CODE 255 */
mypingexit(255);
break;
}
}

if((opts&amp;DEBUG)||(opts&amp;VERBOSE))
{
printf(&quot;Received something. &quot;);
printf(&quot;Len=%d. Total Elapsed Time: %d\n&quot;,
res,totsecs);
}

/* Ignore any signals, they are meaningless now! */
signal(SIGALRM,SIG_IGN);

/* It's alive!! Let the user know */
printf(&quot;%s is alive (%d)\n&quot;,
hostname,totsecs);
close(sckt);

/* Pack it up, and take it home! */
mypingexit(0);
}
}
mypingexit(retcode)
int retcode;
{
close(sckt);
exit(retcode);
}
/* end of file */</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
