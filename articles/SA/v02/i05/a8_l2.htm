<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i05: Listing 2: Adam Zell's version of newping</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a8.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><a href="../../../../source/SA/1993/sep93.tar"><b class=codeListing>sep93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: Adam Zell's version of newping</H1><p>
<PRE>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include &lt;errno.h&gt;
#include &lt;signal.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

#define SVC_PORT        &quot;time&quot;
#define DEF_TOUT        20 /* default timeout */
#define DEF_PORT        37 /* default port */

#define DEBUG           0X1 /* option flags */
#define VERBOSE         0X2

#define is_opt(x)       (opts &amp; (x))
#define add_opt(x)      (opts |= (x))

typedef enum {             /* use enum instead of multiple
#defines */
OK_RESPONSE         = 0,
TOUT_CONNECT        = 1,
TOUT_RESPONSE       = 2,
REF_CONNECT         = 3,
BAD_NET             = 4,
BAD_HOST            = 5,
BAD_USAGE           = 6,
UNKNOWN_ERR         = 255
} errtype;

static int hoststring(const char *);

static void die(errtype, const char *, const char *);
static void pexit(errtype);

static void noconnect(int); /* signal handlers */
static void noresponse(int);

/* all globals are volatile */
static volatile int timeout = DEF_TOUT, totsecs = 1, sckt = -1, opts;
static volatile const char *hostname;

int
main(int argc, char *argv[]) {
struct sockaddr_in phost;
struct sigaction phan;
int res;
const struct protoent *pent = getprotobyname(&quot;tcp&quot;);
const char *hname, *pname = strrchr(argv[0], '/');

if (pname) /* isolate name of program */
pname++;
else
pname = argv[0];

argc--;
argv++;

if (pent == NULL) /* tcp not available */
die(UNKNOWN_ERR, pname, &quot;&quot;);

if (argv[0] &amp;&amp; argv[0][0] == '-') { /* process options */
const char *p = argv[0] + 1;

if (*p == '\0') /* check for newping - */
die(BAD_USAGE, pname, &quot;&quot;);
for (; *p; p++) {
if (*p == 'd')
add_opt(DEBUG);
else if (*p == 'v')
add_opt(VERBOSE);
else die(BAD_USAGE, pname, &quot;&quot;);
}
argc--;
argv++;
}

if (argc == 0 || argc &gt; 2)
die(BAD_USAGE, pname, &quot;&quot;);

hostname = hname = argv[0]; /* get the host name */

if (argv[1]) { /* if non-NULL, convert to decimal */
timeout = atoi(argv[1]);
if (timeout &lt;= 0)
die(BAD_USAGE, pname, &quot;&quot;);
}

if (hoststring(hname)) { /* is it a string? */
const struct hostent *host = gethostbyname(hname);

if (host) { /* found it */
phost.sin_family = host-&gt;h_addrtype;
memcpy(&amp;phost.sin_addr.s_addr, host-&gt;h_addr, host-&gt;h_length);
}
else
die(TOUT_CONNECT, pname, hname);
}
else { /* is in form 000.00.00.00 */
unsigned long ipaddr = inet_addr(hname);

if (ipaddr != INADDR_NONE) { /* found it */
phost.sin_family = AF_INET;
phost.sin_addr.s_addr = ipaddr;
}
else
die(TOUT_CONNECT, pname, hname);
}

if (is_opt(DEBUG))
printf(&quot;The IP address for '%s' is: %0lX\n&quot;, hname,
phost.sin_addr.s_addr);

phost.sin_port = DEF_PORT;

if (is_opt(DEBUG))
printf(&quot;Service %s recognized as port #%u\n&quot;,
SVC_PORT, phost.sin_port);

sckt = socket(PF_INET, SOCK_STREAM, pent-&gt;p_proto);
if (sckt &lt; 0) { /* socket() returns -1 on failure */
perror(&quot;socket&quot;);
pexit(UNKNOWN_ERR);
}

if (is_opt(DEBUG))
printf(&quot;Socket open.  Descriptor Number %d\n&quot;, sckt);

phan.sa_handler = &amp;noconnect; /* set up sig handler using sigaction() */
sigemptyset(&amp;phan.sa_mask);   /* just block alarm signal */
phan.sa_flags = 0;
/* if defined, SA_RESTART automatically restarts interrupted system calls */
#ifdef SA_RESTART
phan.sa_flags = SA_RESTART;
#endif /* SA_RESTART */
sigaction(SIGALRM, &amp;phan, NULL);
alarm(1);

res = connect(sckt, (struct sockaddr *)&amp;phost, sizeof(phost));
while (res &lt; 0) { /* connect returns -1 on failure */
if (errno != EINTR &amp;&amp; errno != EISCONN)
perror(&quot;connect&quot;);
switch(errno) {
case EINTR: /* we were interrupted...try again */
case EISCONN:
close(sckt);
sckt = socket(PF_INET, SOCK_STREAM, pent-&gt;p_proto);
if (sckt &lt; 0) {
perror(&quot;socket&quot;);
pexit(UNKNOWN_ERR);
}
break;
case ECONNRESET:
case ECONNREFUSED:
pexit(REF_CONNECT);
break;
case EHOSTUNREACH:
pexit(BAD_HOST);
break;
case ENETRESET:
case ENETDOWN:
case ENETUNREACH:
pexit(BAD_NET);
break;
default:
pexit(UNKNOWN_ERR);
break;
}
res = connect(sckt, (struct sockaddr *)&amp;phost, sizeof(phost));
}

if (is_opt(DEBUG) &amp;&amp; is_opt(VERBOSE))
printf(&quot;Connect made (returned with %d)\n&quot;, res);

phan.sa_handler = &amp;noresponse; /* register 2nd phase handler */
sigaction(SIGALRM, &amp;phan, NULL);

do {

char buf[32];

res = recv(sckt, buf, sizeof(buf), 0); /* recv returns -1 on failure */
if (res &lt; 0 &amp;&amp; errno != EINTR) { /* if EINTR, try again */
perror(&quot;recv&quot;);
switch(errno) {

case ECONNABORTED:
case ENOTCONN:
pexit(TOUT_CONNECT);
break;
case ECONNRESET:
case ENETRESET:
pexit(BAD_NET);
break;
default:
pexit(UNKNOWN_ERR);
break;
}
}
} while (res &lt; 0);

if (is_opt(DEBUG) &amp;&amp; is_opt(VERBOSE))
printf(&quot;Received something.  Len = %d  Total Elapsed Time: %d\n&quot;,
res, totsecs);

phan.sa_handler = SIG_IGN; /* just ignore signal now */
sigaction(SIGALRM, &amp;phan, NULL);
printf(&quot;%s is alive (%d)\n&quot;, hname, totsecs);
pexit(OK_RESPONSE);
return 0;
}

/* is string in form of mach.net.com or 123.45.67? */
static int
hoststring(const char *p) {
for (; *p; p++) {
if (!isdigit(*p) &amp;&amp; *p != '.')
break;
}
return (*p != '\0');
}

/* limited error output */
static void
die(errtype which, const char *p, const char *q) {
if (which == BAD_USAGE)
fprintf(stderr, &quot;usage: %s [-dv] host [timeout]\n&quot;, p);
else if (which == TOUT_CONNECT)
fprintf(stderr, &quot;%s: unknown host '%s'\n&quot;, p, q);
else
fprintf(stderr, &quot;%s: unknown protocol TCP/IP\n&quot;, p);
exit(which);
}

static void
pexit(errtype which) {
if (sckt &gt; -1) /* close socket if necessary */
close(sckt);
exit(which);
}

static void
noconnect(int which) {
alarm(1);
totsecs++;
if (is_opt(DEBUG) || is_opt(VERBOSE))
printf(&quot;No connection after %d seconds!\n&quot;, totsecs - 1);
if (totsecs &gt; timeout) {
fprintf(stderr, &quot;'%s' not acknowledging connect attempt\n&quot;, hostname);
pexit(TOUT_CONNECT);
}
}

static void
noresponse(int which) {
alarm(1);
totsecs++;
if (is_opt(DEBUG) || is_opt(VERBOSE))
printf(&quot;No connection after %d seconds!\n&quot;, totsecs - 1);
if (totsecs &gt; timeout) {
fprintf(stderr, &quot;'%s' not acknowledging connect attempt\n&quot;, hostname);
pexit(TOUT_RESPONSE);
}
}

/* end of file */</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
