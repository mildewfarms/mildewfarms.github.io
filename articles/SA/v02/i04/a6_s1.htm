<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v02, i04:  Sidebar: Security Issues</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><a href="../../../../source/SA/1993/jul93.tar"><b class=codeListing>jul93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar: Security Issues</H1><p>
<P>
Programs that launch pipelined tasks pose potential
security problems 
because they open the possibility of a system intruder's
substituting 
an unauthorized program of the same name for one of
the pipeline's 
component programs. For example, an unauthorized program
could be 
named who and placed on the path so that it gets executed
in 
place of the standard who.<P>

To write absolutely secure C programs using pipes, always
use the 
absolute path to the command(s) to be executed, i.e.,
never search 
the PATH. The pipe() method will not search the PATH

so long as communicating tasks are launched with execl(),
execv(), 
execle(), or execve(). The other two members of the

exec() family of functions, execlp() and execvp(), 
as well as popen() and system() do search the PATH.<P>

While completely ignoring the PATH is too restrictive
for most 
serious applications, there are coding practices that
do improve security 
without sacrificing the use of the PATH:<P>

1. Always make sure the PATH is set to search the system
directories 
first. Never search the current directory first, especially
the root 
user. Always make sure the command being executed is
the one you really 
want to execute. In particular, you should never use
a path 
like:<P>
<PRE>
PATH=.:/bin:/usr/bin</pre><p>
<p>
which searches the present directory first.<P>

Programs that use popen() can enforce this restriction
by setting 
the PATH before executing the command(s) to be piped:<P>
<PRE>
char *com_str=&quot;PATH=/bin:/usr/bin; who|sort|pr&quot;;</pre><p>
<p>
This prevents a user from tinkering with the PATH even
if shell 
access is possible.<P>

2. Avoid calling programs that can escape to the shell.
At the very 
least, these programs allow an intruder to shell out
and change the 
PATH to search directories other than the system directories

first. This change alone, is enough to allow the intruder
to force 
an unauthorized version of a system command to be executed.<P>

3. Avoid setting the user ID on executables, especially
on executables 
owned by root. Setting the user ID bestows the file
owner's permissions 
and not the permissions of the user executing the file.
Consider the 
example executable, test:<P>
<PRE>
-rwx--x--x  1 root usr test</pre><p>
<p>
Suppose test tries to read the data file datafile:<P>
<PRE>
-r--------  1 root usr datafile</pre><p>
<p>
User root owns test and if user steve tries 
to execute test, a read error occurs, because steve

doesn't have permission to read datafile. After setting
the 
user ID with the chmod u+s command:<P>
<PRE>
-rws--x--x  1 root root test</pre><p>
<p>
Now if user steve executes test, datafile 
can be read with no errors. At the very least, user
steve could 
affect the datafile if shell access is possible. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
