<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i04: Listing 1: popen example</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1993/jul93.tar"><b class=codeListing>jul93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: popen example</H1><p>
<PRE>
1  /* Listing 1
2   * popen() example
3   */
4  #include &lt;stdio.h&gt;
5  #define MAX_LINES   99
6  #define MAX_CHARS   4000
7  #define MAX_TXT 256
8
9  main()
10  {
11  char *slines[MAX_LINES];
12  char sbuf[MAX_CHARS];
13  char *com_str=&quot;who|sort|pr -n -t|grep -v '^[ \\t]*$'&quot;;
14  int count,i;
15
16  count=run_popen(slines, sbuf, com_str);
17  fprintf(stderr,&quot;count is %d\n&quot;, count);
18  for(i=0; i&lt;count;   i++)
19       printf(&quot;%s\n&quot;, slines[i]);
20  }
21  /*
22   * This function executes   a piped command passed as
23   * a pointer-to-string, exe_str.
24   * buffer is the    array where each line is stored
25   * lineptr is an array-of-pointers where each element of the
26   * array points to the beginning of each line stored in buffer.
27   *
28   * returns the number of lines read into buffer, cnt.
29   */
30  int run_popen(lineptr, buffer, exe_str)
31  char *lineptr[]; /*array-of-pointers to addresses */
32  char buffer[];  /*buffer to save strings */
33  char *exe_str;   /*pipe command */
34  {
35  int i, cnt=0;
36  FILE *ptr, *popen();
37  char *bufstart, *bufend, line[MAX_TXT], *fgets();
38
39  bufstart = buffer;         /*mark start of available space*/
40  bufend = buffer + MAX_CHARS;    /*mark end of available space*/
41  if((ptr =   popen(exe_str, &quot;r&quot;)) == NULL)
42       fatal(&quot;Couldn't open pipe&quot;);
43
44  for(i=0; i&lt;MAX_LINES; i++)
45       {
46       if(fgets(line, MAX_TXT, ptr) == NULL)
47          break;
48       line[strlen(line)-1] = '\0'; /* no new-lines*/
49       if((bufstart + strlen(line) + 1) &gt;= bufend)
50          fatal(&quot;Line too long&quot;);
51       lineptr[i]=bufstart;        /*save the address of the line*/
52       strcpy(bufstart,line);      /*save the line into buffer*/
53       bufstart += strlen(line)+1; /*update starting pointer*/
54       cnt++;
55       }
56  fclose(ptr);
57  return cnt;
58  }
59  /*
60   * Fatal Error
61   */
62  int fatal(x)
63  char *x;
64  {
65  perror(x);
66  exit(1);
67  }
/* End of File */ </pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
