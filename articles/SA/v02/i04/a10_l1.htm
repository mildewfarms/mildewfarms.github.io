<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i04: Listing 1: fss.sh--Compares two du_files</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a10.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a10_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a10_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a10_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a10_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1993/jul93.tar"><b class=codeListing>jul93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: fss.sh--Compares two du_files</H1><p>
<PRE>
#!/bin/sh
# fss.sh:
# compares two du-files and reports with:
#
#       '&gt;' filesize increased
#       '&lt;' filesize decreased
#       '=' filesize not changed
#       '+' new file
#       '-' file removed
#

PROG=`basename $0`

usage(){
echo $PROG: $* &gt;&amp;2
echo Usage: $PROG '-[&lt;&gt;=+-]'  -o ofile -n nfile &gt;&amp;2
exit 1
}

# PARSE OPTIONS
# it was not very clever to use &lt;&gt; and - as flags.
# the user must take care of &lt; and &gt;, but we must take
# care of -: getopt doesn't like -, so we convert it to a D

NARG=
for arg in $*           # - can be in any arg.
do
case &quot;$arg&quot; in
-*-*)
NARG=&quot;$NARG &quot;`echo ' ' $arg |
sed -e 's/-/D/g' -e 's/D/-/'`
;;
*)     NARG=&quot;$NARG $arg&quot;
;;
esac
done                    # NARG is the new commandline

set -- `getopt  '&gt;&lt;=+Do:n:' $NARG`

EQ=N LT=N GT=N RM=N NW=N
DONE=0
OLD=
NEW=

for i in $*
do
case $i in
'-&gt;') GT=Y ; shift ;;
'-&lt;') LT=Y ; shift ;;
'-=') EQ=Y ; shift ;;
'-D') RM=Y ; shift ;;
'-+') NW=Y ; shift ;;
'-o') OLD=$2; shift 2 ;;
'-n') NEW=$2; shift 2 ;;
'--') DONE=1; shift ;;
*)    if test $DONE -eq 1
then
usage unexpected argument: $i
fi

;;
esac
done

if test ! -f &quot;$OLD&quot; -o ! -f &quot;$NEW&quot;
then
usage -o or -n: not a file or not set
fi

if test $EQ$LT$GT$NW$RM = NNNNN
then
EQ=Y LT=Y GT=Y RM=Y NW=Y
fi

# Parsing done, write both files to awk into 2 assoc arrays
# In awk's END section the comparison is done

( cat  $OLD
echo ======
cat  $NEW
) | awk '

BEGIN { f2=0 }

$0 == &quot;======&quot; { f2=1; next }

{ if (f2 == 0)
f1a[$2] = $1
else
f2a[$2] = $1
}
END {
for( f1f in f1a) {

du1 = f1a[f1f]
du2 = f2a[f1f]

if (du2 == &quot;&quot; &amp;&amp; &quot;'$RM'&quot; == &quot;Y&quot;)
# removed
printf &quot;-\t%d\t%d\t%d\t%s\n&quot; , du1, 0, 0, f1f
else if (du1 == du2 &amp;&amp; &quot;'$EQ'&quot; == &quot;Y&quot;)
# equal
printf &quot;=\t%d\t%d\t%d\t%s\n&quot; , du1, du2, 1, f1f
else if (du1 &gt; du2 &amp;&amp; &quot;'$LT'&quot; == &quot;Y&quot;)
# shrunk
printf &quot;&lt;\t%d\t%d\t%d\t%s\n&quot; , du1, du2, du1/du2,
f1f
else if (du1 &lt; du2 &amp;&amp; &quot;'$GT'&quot; == &quot;Y&quot;)
# grown
printf &quot;&gt;\t%d\t%d\t%d\t%s\n&quot; , du1, du2, du2/du1,
f1f
}
# new
for( f2f in f2a) {
du1 = f1a[f2f]
du2 = f2a[f2f]
if (du1 == &quot;&quot; &amp;&amp; &quot;'$NW'&quot; == &quot;Y&quot;)
printf &quot;+\t%d\t%d\t%d\t%s\n&quot; , 0, du2, du2, f2f
}
}'</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
