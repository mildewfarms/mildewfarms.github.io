<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i04: Listing 3: Writing to the pipe example</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a6.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink>Listing 3</span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1993/jul93.tar"><b class=codeListing>jul93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 3: Writing to the pipe example</H1><p>
<PRE>
1  /* Listing 3
2   * Writing to the   pipe example
3   */
4  #include &lt;stdio.h&gt;
5
6  main()
7  {
8  static char *slines[] =
9      {
10      &quot;This is the first line of the example&quot;,
11      &quot;and this is the second line&quot;,
12      &quot;and of course this is the third&quot;
13      };
14  char *com_str=&quot;cat &gt; ascii.file&quot;;
15
16  run_wpipe(slines,   3, com_str);
17  }
18  /*
19  *   This function:
20  *   1) creates a pipe.
21  *   2) creates another process with fork().
22  *   3) couples standard input to the reading end of the pipe
23  *      using the dup() call.
24  *   4) closes file descriptors.
25  *   5) executes the child process.
26  *   6) closes the read side of the pipe.
27  *   7) opens the write side of the pipe using fdopen().
28  *   8) writes the number of input lines.
29  *   9) closes the file pointer.
30  *
31  *   lineptr is an array-of-pointers where each element is a string
32  *   to be written to the pipe.
33  */
34  int run_wpipe(lineptr, nolines, exe_str)
35  char *lineptr[]; /*array-of-pointers to strings */
36  int  nolines;    /*number of lines to write */
37  char *exe_str;   /*pipe command  */
38  {
39  int i, p[2], pid;
40  FILE *ptr, *fdopen();
41
42  if(pipe(p) &lt; 0)
43       fatal(&quot;pipe call&quot;);
44
45  switch(pid=fork())
46       {
47       case -1:
48          fatal(&quot;fork call in run_wpipe&quot;);
49       case 0:
50          close(0);    /*close the standard input */
51          dup(p[0]);   /*read side of the pipe */
52          close(p[0]); /*save the file descriptors */
53          close(p[1]);
54          execlp(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-c&quot;, exe_str, NULL);
55          fatal(&quot;exec call in run_wpipe&quot;);
56        }
57  close(p[0]);  /*close the read side of the parent */
58  if((ptr=fdopen(p[1],&quot;w&quot;)), ptr ==   NULL)
59       fatal(&quot;fdopen call in run_wpipe&quot;);
60
61  for(i = 0; i&lt;nolines; i++)
62       fprintf(ptr,&quot;%s\n&quot;, lineptr[i]);
63  fclose(ptr);
64  /*wait for child process to finish*/
65  while(wait((int *)0) != pid)
66       ;
67  }
/* End of File */ </pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
