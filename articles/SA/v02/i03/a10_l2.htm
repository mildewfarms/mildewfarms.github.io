<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i03: Listing 2: lptran</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a10.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a10_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a10_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a10_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a10_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a10_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><a href="../../../../source/SA/1993/may93.tar"><b class=codeListing>may93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: lptran</H1><p>
<PRE>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dirent.h&gt;

typedef int BOOLEAN;

struct t_type {
char name[255];
struct t_type *next;
}; /* end t_type */

struct t_type *tfirst=NULL;

struct t_type *get_files(),
*find_job_number(int);
BOOLEAN read_and_transfer(char *, char *),
is_file(char *);

main(int argc, char *argv[])

{

if (argc != 3)
fprintf(stderr,&quot;lptran &lt;job_number&gt; &lt;queue&gt;\n&quot;);
else {
tfirst = get_files();
tfirst = find_job_number(atoi(argv[1]));
if (tfirst) {
if (!read_and_transfer(tfirst-&gt;name,argv[2])) {
fprintf(stderr,&quot;Transfer unsuccessful\n&quot;);
return(1);
} /* end then */
} /* end then */
else  {
fprintf(stderr,&quot;Could not find job # %s\n&quot;,argv[1]);
return(1);
} /* end else */
} /* end else */
return(0);

} /* end main */

/* ***************************************************************** *
*                                                                   *
*  Procedure  : get_files                                           *
*  Purpose    : This procedure builds a linked list of the print    *
*               header files                                        *
*                                                                   *
* ***************************************************************** */
struct t_type *get_files()

{

DIR *dir;
struct dirent *entry;

struct t_type *temp,
*hold_first;


#ifdef AIX31
if ((dir = opendir(&quot;/usr/lpd/qdir&quot;)) == NULL)
#endif
#ifdef AIX32
if ((dir = opendir(&quot;/var/spool/lpd/qdir&quot;)) == NULL)
#endif
exit(1);
entry = readdir(dir);   /* . and .. will always be the first two listings */
entry = readdir(dir);   /* so lets get rid of them here                   */
temp = hold_first;
while ((entry = readdir(dir)) != NULL) {
if (!hold_first) {
temp = (struct t_type *) malloc(sizeof(struct t_type));
hold_first = temp;
} /* end then */
else {
temp-&gt;next = (struct t_type *) malloc(sizeof(struct t_type));
temp = temp-&gt;next;
} /* end else */
strcpy(temp-&gt;name,entry-&gt;d_name);
} /* end while */
closedir(dir);
return(hold_first);

} /* end get_files */

/* ***************************************************************** *
*                                                                   *
*  Procedure  : find_job_number                                     *
*  Purpose    : This procedure finds the job number in the header   *
*               files                                               *
*                                                                   *
* ***************************************************************** */
struct t_type *find_job_number(int job)

{

char job_number[10],
temp[255];
struct t_type *info,
*found=NULL;
FILE *fp;

info = tfirst;
do {
#ifdef AIX31
strcpy(temp,&quot;/usr/lpd/qdir/&quot;);
#endif
#ifdef AIX32
strcpy(temp,&quot;/var/spool/lpd/qdir/&quot;);
#endif
strcat(temp,info-&gt;name);
if ((fp = fopen(temp,&quot;r&quot;)) == NULL) {
printf(&quot;cannot open file \n&quot;);
printf(&quot;open = %s\n&quot;,temp);
}  /* end then */
else {
fscanf(fp,&quot;%s&quot;,job_number);
if (job == atoi(job_number))
found = info;
fclose(fp);
} /* end else */
info = info-&gt;next;
} while ((info) &amp;&amp; (!found));
return(found);

} /* end find_job_number */

/* ***************************************************************** *
*                                                                   *
*  Procedure  : read_and_transfer                                   *
*  Purpose    : This procedure reads the header file and builds the *
*               transfer string                                     *
*                                                                   *
* ***************************************************************** */

BOOLEAN read_and_transfer(char *file_name,char *queue_name)

{

char temp[255],
job_name[1024],
transfer_string[4096];
int remote = 18;
FILE *in;

#ifdef AIX31
strcpy(temp,&quot;/usr/spool/lpd/qdir/&quot;);
#endif
#ifdef AIX32
strcpy(temp,&quot;/var/spool/lpd/qdir/&quot;);
#endif
strcat(temp,file_name);
strcpy(transfer_string,&quot;lp -d&quot;);
strcat(transfer_string,queue_name);
if ((in = fopen(temp,&quot;r&quot;)) != NULL) {
do {
fscanf(in,&quot;%s&quot;,job_name);
} while (remote-- &gt; 0);
while (!feof(in)) {
if ((is_file(job_name)) &amp;&amp; (strlen(job_name) &lt; 255)) {
if ((strlen(transfer_string) + strlen(job_name) + 1) &gt; 4095)
return FALSE;
strcat(transfer_string,&quot; &quot;);
strcat(transfer_string,job_name);
} /* end then */
fscanf(in,&quot;%s&quot;,job_name);
} /* end while */
if (system(transfer_string) != 0)
return FALSE;
fclose(in);
} /* end then */
return TRUE;

} /* end read_and_transfer */

/* ***************************************************************** *
*                                                                   *
*  Procedure  : is_file                                             *
*  Purpose    : This procedure returns TRUE if the file passed is   *
*               a regular file, otherwise it return FALSE.          *
*                                                                   *
* ***************************************************************** */

BOOLEAN is_file(file_name)

char *file_name;

{

struct stat buf;

if (stat(file_name,&amp;buf) == 0) {
switch (buf.st_mode &amp; S_IFMT) {
case S_IFDIR : return FALSE;
case S_IFBLK : return FALSE;
case S_IFCHR : return FALSE;
case S_IFIFO : return FALSE;
case S_IFREG : return TRUE;
} /* end switch */
} /* end then */
return FALSE;

} /* end is_file */</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
