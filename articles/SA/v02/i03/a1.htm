<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v02, i03:  fchange: A File System Watchdog</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1993/may93.tar"><b class=codeListing>may93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>fchange: A File System Watchdog</H1><p>
<P>
Steven G. Isaacson<P>

Few things are more annoying for a system administrator
than spending 
hours figuring out why something no longer works, only
to discover 
that someone (perhaps another sysadmin, or some user
who knows the 
root password) has changed a critical system file. An
unadvertised 
change to /etc/profile, for example, can precipitate
a lot 
of head scratching.<P>

The problem is communication. If you know that the kernel
was recently 
relinked, or that a uucp configuration file was changed,
you can narrow 
your search for the source of the (new) problem.<P>

Rather than rely on my collegues to keep me well-informed,
I use a 
utility, fchange, that automatically tells me about
important 
file system changes.<P>

<B>fchange</B><P>

fchange is a filesystem watchdog that sends mail whenever
a 
specified file has changed. For example:<P>
<PRE>
This file was changed recently on Dev
----r----- 1 bin mem 604136 Jul 21 1992 /unix</pre><p>
<p>
fchange includes a detailed listing from /bin/ls, 
so you know the last modification time, the owner, size,
etc., of 
the modified file. A file-tracking mode will even make
a copy of the 
file.<P>

fchange consists of a shell script, a files file (containing

the files to watch and users to notify), and a control
directory. 
An entry in root's crontab runs fchange every 15 minutes.

The fchange shell script employs a simple algorithm:<P>

while there are more lines to read in the files 
file, read them; if the specified file has changed,
send mail.<P>

To determine if a specified file has changed fchange
compares 
the current output from /bin/ls to a previous result.
Previous 
results are maintained in an automatically generated
log file. fchange 
creates a log for each file you want to track. For example,
the log 
file for tracking /unix might be called 01.unix.<P>

The first time fchange looks at /unix, 01.unix 
is empty, so a new entry is made:<P>
<PRE>
----r------ 1 bin mem 604136 Jul 21 1992 /unix</pre><p>
<p>

From then on, fchange works as follows:<P>

<li>it counts the number of lines in the log file;<P>

<li>runs ls -l to add a new line to the log file;<P>

<li>sorts the log file uniquely;<P>

<li>counts the number of lines in the log file again;<P>

<li>checks to see if there is a new line in the log file

after the unique sort has completed; if there is, then
the file (and 
now the log file) has changed; sends mail.<P>

In Figure 1 the file has not changed. Figure
2
shows

the process when the file has changed.<P>

As an added benefit, fchange keeps a running history
of the 
changes made to your file. You can see at a glance how
many times 
a certain file was changed in the past, say, six months.<P>

<B>The files File</B><P>

The straightforward files file contains three fields
per record. 
The first field is an arbitrary string that uniquely
identifies the 
line. I simply &quot;number&quot; the lines, starting
with 01. The second 
field contains the directory path and filename. The
third field contains 
the mail-to names (or aliases), and the optional keyword
track. 
Blank lines and lines beginning with a pound sign are
ignored (see 
Figure 3).<P>

The optional tracking feature provides two benefits.
First, if the 
file you are watching gets removed or horribly corrupted,
you have 
a readily accessible backup copy. Second, it makes it
easy to quickly 
determine what was changed because you have the before
copy and after 
copy in the fchange log directory (see fcdiff below).<P>

Note that the tracking feature also comes with two caveats.
First, 
the files are tracked by cat'ing them to the log file.
So if you try 
to track a binary file, you'll end up with unusable
copies of it in 
the log directory; they will be unusable because new
copies are appended 
to the log file, along with a one line date stamp. The
mixture immediately 
turns to mush.<P>

The second caveat involves the track file itself. If
you are watching 
a file that changes several times a day, the track file
can quickly 
grow in size. You may need to put it under maxtab control
(see Sys 
Admin, Vol. 2, No. 2, &quot;maxtab: Automatic File Pruning&quot;).<P>

<B>Installing fchange</B><P>

fchange requires a control directory. A subdirectory,
logs, 
within the control directory contains the log files
and any files 
that are tracked. For example:<P>
<PRE>
/usr/lib/fchange
/usr/lib/fchange/logs</pre><p>
<p>
The control directory also contains the files file,
named fchange.files, 
and the fchange.sh script (see Listing 1).<P>

On my primary system, I've scheduled fchange to run
every fifteen 
minutes during the day, and once at night. The frequency
is determined 
by the cron entry that runs fchange.sh.<P>

You can run fchange.sh as often or as little as you
like. If 
any of the specified files have changed since the last
time it was 
run, you will get mail.<P>

<B>fchange Utility</B><P>

I use the utility fcdiff, Listing 2, to find differences
between 
the last two copies of a tracked file. fcdiff must to
be run 
in the fchange control directory, because it needs access
to 
the files file.<P>
<PRE>
Usage: fcdiff [-n log number] \
[-f filename]</pre><p>
<p>
The log number is the key to your file. If you know
the log number, 
you can specify it on the command-line and immediately
view the changes. 
fcdiff looks in the log directory for the appropriate
track 
file (for example, 14.log.track). The last two entries
in the 
track file are then written out to temp files and diffed.
You 
can then quickly see what changed.<P>

If you specify the file name, fcdiff will grep the files

file for the name. The log number is displayed for any
matches.<P>

<B>Conclusion</B><P>

I recommend using fchange to watch and track key files
on every 
machine. This is particularly helpful on the occasional
`isolated' 
system in which general access is ostensibly denied.
If /etc/passwd 
changes, you want to know about it.<P>

In short, fchange is a boon for system administrators.
You 
train the system to watch itself, and it does. <P>




<P>


<H1>About the Author</H1><p>
<P>
Steven G. Isaacson has been writing C and Informix
4GL applications 
since 1985. He is currently developing automated testing
tools for 
FourGen Software, the leading developer of accounting
software and 
CASE Tools for the UNIX market. He may be reached via
email at 
uunet!4gen!steve1 or steve1%4gen@uunet.uu.net. <P>




<P>
<br>&nbsp;<br>
</table></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
