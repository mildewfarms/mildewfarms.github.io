<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i02: Listing 1: cleantmp.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a5.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a5_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1993/mar93.tar"><b class=codeListing>mar93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: cleantmp.c</H1><p>
<PRE>
Listing 1  cleantmp -- C source

/*
*  cleantmp.c --
*      delete old files and empty directories from /tmp
*      and /usr/tmp in accord with Official Policy
*/

#include &lt;errno.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/dir.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;time.h&gt;
#include &lt;unistd.h&gt;

#define TOPFILELIM 86400        /* top level: one day           */
#define SUBFILELIM 3 * 86400    /* subdirectories: 3 days       */

typedef struct listnode *ListPtr;
typedef struct listnode {       /* list entry for filenames     */
char *name;                 /* pointer to name              */
ListPtr next;               /* pointer to next entry        */
} ListNode;

/* prototypes */
unsigned clean(const char *dirname, int level);
ListPtr make_filelist(const char *dirname);
void free_filelist(ListPtr p);
void *emalloc(size_t nbytes);
char *savestr(char *s);
void die(int syserr, const char *fmt, ...);
void warn(int syserr, const char *fmt, ...);
void errmesg(int syserr, const char *fmt, va_list ap);

/* globals */
time_t now;                     /* current time         */
int verbose;                    /* verbose if nonzero   */
int nonuke;                     /* no delete if nonzero */

int main(int argc, char **argv)
{
int c;                      /* option               */
extern int optind;          /* index after getopt() */
int errflag;                /* error flag           */

errflag = 0;
verbose = 0;                /* default: be quiet    */
nonuke = 0;                 /* default: delete      */
while ((c = getopt(argc, argv, &quot;vn&quot;)) != EOF) {
switch (c) {
case 'v': verbose = 1; break;
case 'n': nonuke = 1; break;
case '?': errflag = 1; break;
}
}
if (errflag != 0 || optind &lt; argc)
die(0, &quot;Usage: %s [-v] [-n]&quot;, argv[0]);
now = time((time_t *) NULL);
(void) clean(&quot;/tmp&quot;, 0);
(void) clean(&quot;/usr/tmp&quot;, 0);
exit(0);
}

unsigned clean(const char *dirname, int level)
/*
*  clean directory &quot;dirname&quot;, &quot;level&quot; levels below base
*  directory; return number of entries AFTER cleaning
*/
{
double age;         /* file age             */
unsigned entries;   /* entries in this dir  */
struct stat statbuf;/* stat for entry       */
unsigned subent;    /* entries in subdir    */
ListPtr filelist;   /* file list            */
ListPtr p;          /* list traversal ptr   */
int deleteflag;     /* deletion flag        */

if (verbose)
printf(&quot;%*sCleaning directory '%s'\n&quot;,
4 * level, &quot;&quot;, dirname);
filelist = make_filelist(dirname);
if (chdir(dirname) == -1) {
warn(1, &quot;chdir to %s failed&quot;, dirname);
free_filelist(filelist);
return 0;
}
entries = 0;
for (p = filelist; p != NULL; p = p-&gt;next) {
if (strcmp(p-&gt;name, &quot;.&quot;) == 0 ||
strcmp(p-&gt;name, &quot;..&quot;) == 0)
continue;
if (lstat(p-&gt;name, &amp;statbuf) == -1) {
warn(1, &quot;lstat on %s failed&quot;, p-&gt;name);
continue;
}
if ((statbuf.st_mode &amp; S_IFMT) == S_IFDIR) {
/* it's a directory ... */
subent = clean(p-&gt;name, level + 1);
deleteflag = (subent == 0 &amp;&amp; statbuf.st_uid != 0);
if (deleteflag &amp;&amp; nonuke == 0) {
if (rmdir(p-&gt;name) == -1)
warn(1, &quot;rmdir on %s failed&quot;, p-&gt;name);
}
else
entries++;
if (verbose)
printf(&quot;%*sdirectory '%s' has %u entries: %s deleted\n&quot;,
4 * level + 4, &quot;&quot;, p-&gt;name, subent,
deleteflag ? (nonuke ? &quot;would be&quot; : &quot;&quot;) :
(nonuke ? &quot;would not be&quot; : &quot;not&quot;));
}
else {
/* it's a file or something else */
age = difftime(now, statbuf.st_ctime);
deleteflag = (level == 0 &amp;&amp; age &gt; TOPFILELIM) ||
(level &gt; 0  &amp;&amp; age &gt; SUBFILELIM);
if (deleteflag &amp;&amp; nonuke == 0) {
if (unlink(p-&gt;name) == -1)
warn(1, &quot;unlink on %s failed&quot;, p-&gt;name);
}
else
entries++;
if (verbose)
printf(&quot;%*sfile '%s' is %g days old: %s deleted\n&quot;,
4 * level + 4, &quot;&quot;, p-&gt;name, age/86400.0,
deleteflag ? (nonuke ? &quot;would be&quot; : &quot;&quot;) :
(nonuke ? &quot;would not be&quot; : &quot;not&quot;));
}
}
free_filelist(filelist);
if (chdir(&quot;..&quot;) == -1)
die(1, &quot;chdir to %s/.. failed&quot;, dirname);
return entries;
}

ListPtr make_filelist(const char *dirname)
/*
*  make list of entries in specified directory
*/
{
DIR *dirp;          /* directory file       */
struct direct *dp;  /* directory entry      */
ListPtr p;          /* pointer to list      */
ListPtr newent;     /* pointer to new entry */

p = (ListPtr) NULL;
if ((dirp = opendir(dirname)) == NULL) {
warn(1, &quot;opendir on %s failed&quot;, dirname);
return p;
}
errno = 0;
for (dp = readdir(dirp); dp; dp = readdir(dirp)) {
newent = (ListPtr) emalloc(sizeof(ListNode));
newent-&gt;name = savestr(dp-&gt;d_name);
newent-&gt;next = p;
p = newent;
}
if (errno != 0)     /* readdir error */
warn(1, &quot;readdir on %s failed&quot;, dirname);
if (closedir(dirp) == -1)
warn(1, &quot;closedir on %s failed&quot;, dirname);
return p;
}

void free_filelist(ListPtr p)
/*
*  free name list
*/
{
ListPtr q;

while (p != NULL) {
q = p-&gt;next;
free(p-&gt;name);
free(p);
p = q;
}
}

void *emalloc(size_t nbytes)
/*
*  allocate specified amount of memory; die on failure
*/
{
void *p;

if ((p = malloc(nbytes)) == NULL)
die(0, &quot;malloc failed to allocate %lu bytes\n&quot;, nbytes);
return p;
}

char *savestr(char *s)
/*
*  store string s somewhere
*/
{
char *p;

p = (char *) emalloc(strlen(s) + 1);
strcpy(p, s);
return p;
}

void die(int syserr, const char *fmt, ...)
/*
*  output error message to stderr and die
*/
{
va_list ap;

va_start(ap, fmt);
errmesg(syserr, fmt, ap);
va_end(ap);
exit(1);
}

void warn(int syserr, const char *fmt, ...)
/*
*  output warning message
*/
{
va_list ap;

va_start(ap, fmt);
errmesg(syserr, fmt, ap);
va_end(ap);
}

void errmesg(int syserr, const char *fmt, va_list ap)
/*
*
*/ output error message to stderr and return
{
int save;

save = errno;
vfprintf(stderr, fmt, ap);
if (syserr != 0 &amp;&amp; save != 0)
fprintf(stderr, &quot;: %s&quot;, strerror(save));
fprintf(stderr, &quot;\n&quot;);
}</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
