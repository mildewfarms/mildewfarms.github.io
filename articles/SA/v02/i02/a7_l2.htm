<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i02: Listing 2: vmem</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a7_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/1993/mar93.tar"><b class=codeListing>mar93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: vmem</H1><p>
<PRE>
#! /usr/bin/perl
# Listing 2
# Program:      vmem
# Usage:        vmem process-id
# Output:       The memory usage for the process

eval &quot;exec perl -S $0 ${1+\&quot;$@\&quot;}&quot;
if $running_under_some_shell;

require &quot;open2.pl&quot;;

if ($#ARGV &lt; 0 || @ARGV[0] eq '-?') {
die &quot;Usage: vmem pid\n&quot;;
} else {
$nbpp = &amp;get_page_size();
@regions = &amp;get_regions(@ARGV[0]);
if ($#regions == -1) {
die &quot;PID $apid is invalid.\n&quot;;
}
@reg_table = &amp;get_reg_info(@regions);
($spsz, $ppsz, $svl, $pvl) =
&amp;get_reg_size(@reg_table);
print &quot;SPSZ     PPSZ    SVL     PVL\n&quot;;
print $spsz * $nbpp, &quot;\t&quot;, $ppsz * $nbpp, &quot;\t&quot;, $svl * $nbpp, &quot;\t&quot;,
$pvl * $nbpp, &quot;\n&quot;;
0;
}

# Function:     get_page_size
# Usage:        &amp;get_page_size();
# Returns:      The size of a page in k
sub get_page_size
{
local($nbpp);

open(IMMU, &quot;/usr/include/sys/immu.h&quot;) || die &quot;Can't open immu.h\n&quot;;
while (&lt;IMMU&gt;) {
if (/#define[\s]+NBPP[\s]/o) {
($nbpp) = (split)[2];
}
}
close(IMMU);
int($nbpp / 1024 + .5);
}

# Function:     get_regions
# Usage:        &amp;get_regions(process-id)
# Return:       Region lines from the full process table

sub get_regions
{
local($pid) = @_;
local(@regs) = ();

&amp;open2(&quot;INCRASH&quot;, &quot;OUTCRASH&quot;, &quot;crash 2&gt;/dev/null&quot;);
print OUTCRASH &quot;proc -f #$pid\n&quot;;
close(OUTCRASH);
while (&lt;INCRASH&gt;) {
last if (/^[\s]*preg reg/o);

}
while (&lt;INCRASH&gt;) {
last if (/^[\s]*$/o);
($region) = (split)[2];
push(@regs, $region);
}
close(INCRASH);
@regs;
}

# Function:     get_reg_info
# Usage:        &amp;get_reg_info(region-list)
# Return:       Lines from region table display

sub get_reg_info
{
local($regs) = join(&quot; &quot;, @_);
local(@reglist) = ();

&amp;open2(&quot;INCRASH&quot;, &quot;OUTCRASH&quot;, &quot;crash 2&gt;/dev/null&quot;);
print OUTCRASH &quot;region &quot;, $regs, &quot;\n&quot;;
close(OUTCRASH);
@reglist = &lt;INCRASH&gt;;
close(INCRASH);
@reglist;
}

# Function: get_reg_size
# Usage:                &amp;get_reg_size(region-list)
# Returns:      (shared full process space,
#                private full process space,
#                shared in-core process space,
#                private in-core process space)

sub get_reg_size
{
local($spsz, $ppsz, $svl, $pvl, $psz, $vl, $field2, $field3);

foreach (@_) {
if (/^SLOT/o) {
($field2, $field3) = (split)[1,2];
}
elsif (/stxt/o) {
if ($field2 eq 'PSZ') {
($psz, $vl) = (split)[2,3];
}
else {
($psz, $vl) = (split)[3,4];
}
$spsz += $psz;
$svl += $vl;
}
elsif (/priv/o) {
if ($field2 eq 'PSZ') {
($psz, $vl) = (split)[2,3];
}
else {
($psz, $vl) = (split)[3,4];
}
$ppsz += $psz;

$pvl += $vl;
}
}
($spsz, $ppsz, $svl, $pvl);
}</pre><p>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
