<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i06: Listing 2: passPart.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a8.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><a href="../../../../source/SA/1993/nov93.tar"><b class=codeListing>nov93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 2: passPart.c</H1><p>
<PRE>
1  #include &lt;stdio.h&gt;
2
3  main(argc, argv)
4      int argc; char *argv[];
5  {
6      int n;              /* Number of start/end pairs */
7      int *start;         /* Where the bad header starts */
8      int *end;           /* Where the good header starts after a bad header */
9      makeSkipList (argv[1], &amp;n, &amp;start, &amp;end);
10      {   int i;
11          for (i=0; i&lt;n; i++)
12              fprintf (stderr, &quot;start[%d] = %d\tend[%d] = %d\n&quot;, i, start[i], i, end[i]);
13      }
14      passBytes (n, start, end);
15  }
16
17  makeSkipList (filename, Pn, PPstart, PPend)
18      char *filename; int *Pn, **PPstart, **PPend;
19  {
20      char line[100];
21      char isNow = 'n';   /* h for being in the HEADER area; n for not */
22      FILE *fp = fopen (filename, &quot;r&quot;);
23      *Pn = 0;
24      *PPstart = (int *) calloc (1, sizeof(int));
25      *PPend   = (int *) calloc (1, sizeof(int));
26
27      while (fgets (line, sizeof(line), fp)) {    /* exit at EOF or error */
28          if (line[0] == 'H' &amp;&amp; isNow == 'n') {
29              *PPstart = (int *) realloc (*PPstart, (*Pn)+1);
30              sscanf (line, &quot;%*s %*s %d&quot;, &amp;((*PPstart)[*Pn]));
31              isNow = 'h';
32          }
33          if (line[0] != 'H' &amp;&amp; isNow == 'h') {
34              *PPend = (int *) realloc (*PPend, (*Pn)+1);
35              sscanf (line, &quot;%d&quot;, &amp;((*PPend)[*Pn]));
36              isNow = 'n';
37              (*Pn)++;
38          }
39      }
40      fclose(fp);
41  }
42
43  passBytes (n, Pstart, Pend)
44      int n, *Pstart, *Pend;
45  {
46      int i;      /* indexing the Pstart and Pend arrays */
47      int b = 0;  /* Current Byte number */
48      for (i = 0; i &lt; n; i++) {
49          register int s = Pstart[i];
50          register int e = Pend[i];
51          for (; b &lt; s; b++) {
52              putchar (getchar ());
53          }
54          for (; b &lt; e; b++) {
55              getchar();
56          }
57      }
58      while (EOF != (i = getchar()))
59          putchar(i);
60  }
61  /* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
