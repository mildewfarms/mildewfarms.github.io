<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v02, i06:  checkcron:  Checking for the Unexpected</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1993/nov93.tar"><b class=codeListing>nov93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>checkcron:  Checking for the Unexpected</H1><p>
<P>
Steven G. Isaacson<P>

Most system administrators use daemons like cron and
sendmail 
to help keep their systems running smoothly. Daemons
run unobtrusively 
in the background, starting up as needed to do their
work and then 
going back to sleep until more work needs to be done.<P>

Running in the background is good because for the most
part you don't 
need to see what is happening. But running in the background
also 
means that nothing obvious happens when things go wrong.<P>

<B>What Could Go Wrong?</B><P>

On our main development system we use cron to bundle
up source 
code and then transfer it to various machines on the
network. The 
files are bundled, transferred, then unpacked on the
target system.<P>

One night errors were reported on the target system.
The next day 
changes were made to the source code to correct the
problem, but that 
night the same errors appeared. This went on for several
days, until 
someone discovered that the new code had not been transferred
to the 
target system. The new code had not been transferred
because cron 
had failed.<P>

This particular problem could be addressed by having
the target system 
move or remove the file when it was done with it, which
would cause 
a &quot;missing file&quot; error to be generated the
next night. But 
that only addresses one part of a complex system.<P>

<B>What Else Could Go Wrong?</B><P>

Recently NIS failed on our &quot;communication box,&quot;
a computer 
dedicated to handling all of our incoming mail, that
is, mail from 
outside of the company. Without NIS the alias file was
useless and 
two days' worth of mail bounced back.<P>

What's needed is a general solution, a way to check
on background 
processes that doesn't itself rely upon background processes.<P>

<B>A General Solution</B><P>

First, how do you tell if a background process like
cron is 
still running? Type ps -fu root, pipe the results to
grep, 
and look for cron (on some systems you cannot specify
the user 
and so must look through all processes).<P>
<PRE>
ps -fu root | grep cron</pre><p>
<p>
That's easy enough to make into a shell script, and
you 
could echo a warning if grep exits with a bad exit status,

indicating that /etc/cron was not found. The script
could check 
for sendmail, NIS, ypbind -- any background processes

you want to keep tabs on.<P>

But there are two problems.<P>

<B>Two Problems</B><P>

The first problem is a technical one. You need to make
sure that you 
find what you're looking for ... and not what you're
looking for. 
Let me explain.<P>

When you type ps and grep for &quot;cron,&quot; a new

process, with the word &quot;cron&quot; on its command
line, is started. 
Sometimes that process shows up and sometimes it doesn't,
depending 
upon the load on the system. So if cron was found in
the ps 
output, was it /etc/cron, &quot;grep cron,&quot; or
both?<P>

So why not just look for /etc/cron?<P>

Checking for /etc/cron doesn't work because as soon
as you 
grep for /etc/cron, /etc/cron shows up as an 
argument on the grep command line. <P>

Listing 1 illustrates this problem with two examples.
The first example 
usually works, the second one never works. With the
addition of a 
filter, you can make it always work.<P>
<PRE>
ps -fu root | sed '/grep/d' | grep cron</pre><p>
<p>
The command sequence (ps | sed | grep) looks as 
if it won't work because the grep-delete occurs before
the 
call to grep.<P>

But it does work. It works because it is only after
the shell has 
parsed the command line that the three processes are
started (almost 
simultaneously). Before you can attach pipes, there
must be programs 
to attach them to.<P>

So, if the &quot;grep cron&quot; line appears in the
ps output, 
the sed command deletes it. If &quot;grep cron&quot;
doesn't 
appear, it's not deleted. Either way, you get the information
you 
need.<P>

<B>The Real Problem</B><P>

The second problem is the real problem.<P>

How do you automatically check background processes
to see if they 
are still running? That is, how can you make it so the
checkcron 
script is run every so often without your having to
remember to do 
it? (Don't say cron!)<P>

I got around this automated process problem by using
something manual, 
my .profile. I simply added a call to checkcron. Now

whenever I log in I know within a few seconds if there
is a problem.<P>

<B>Installation</B><P>

checkcron is in Listing 2.<P>

Installation is trivial. Customize the program for your
system (by 
editing the line with the list of daemons), and then
add one line 
to $HOME/.profile:<P>
<PRE>
checkcron &amp;</pre><p>
<p>
Every time you log in, you'll see a background pid 
number echoed to your screen and then whatever you normally
see when 
you log in.<P>

For each daemon that cannot be found, checkcron echos
an error 
message to your screen. If all daemons are accounted
for, it does 
nothing. Simple.<P>

checkcron may also be run from the command line if you
have 
been logged in for a while and simply want to double-check
your daemons. <P>




<P>


<H1>About the Author</H1><p>
<P>
Steven G. Isaacson has been writing C and Informix
4GL applications 
since 1985. He is currently developing automated testing
tools for 
FourGen Software, the leading developer of accounting
software and 
CASE Tools for the UNIX market. He may be reached via
email at 
uunet!4gen!steve1 or steve1%4gen@uunet.uu.net. <P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
