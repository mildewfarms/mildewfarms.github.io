<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v02, i06:  Books: A User's Report</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1993/nov93.tar"><b class=codeListing>nov93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Books: A User's Report</H1><p>
<P>
Elizabeth Zinkann<P>

Due to the number of books released this month, the
selection was 
difficult. However, I decided on a new TCP/IP book,
a Korn Shell book, 
one that deals with UNIX and X, an Internet book, plus
a new book 
on UNIX device drivers.<P>

<B><I>TCP/IP Illustrated 
Volume 1: The Protocols</I><br>
by W. Richard Stevens<br>
Addison-Wesley Professional Computing Series<br>
ISBN 0-201-63346-9</B><P>

With this book, Stevens gives his audience -- programmers,
system 
administrators, and users -- the capability not only
to understand 
the network protocols, but also to diagnose network
problems. He presents 
an analysis of the TCP/IP protocol suite and, in the
preface of the 
book, provides a unique chart that matches the TCP/IP
protocol suite 
diagrams with the chapter(s) that discuss them. The
examples presented 
in the book were run on an existing internet and are
not merely theoretical 
illustrations. The author emphasizes that although most
of the cases 
are demonstrated on UNIX systems, TCP/IP &quot;is operating
system-independent, 
and is available on almost every popular, non-UNIX system.&quot;<P>

The TCP/IP protocol suite allows communication among
varied computers 
with different operating systems. Networking protocols
are implemented 
in layers, with each layer responsible for a different
task. The protocol 
suite equals the combination of protocols at various
levels.<P>

Stevens not only enumerates the various levels of the
TCP/IP, but 
also describes what each level does in detail. He demonstrates
the 
differences between client and server, user and kernel,
and peer-to-peer. 
He also illustrates end systems, intermediate systems,
and hop-by-hop 
protocols. He explains what fragmentation is, when it
is used ideally, 
and when it is used practically.<P>

Stevens provides an excellent description of the Internet
Protocol 
and IP Routing. In addition to an historical perspective
and an explanation 
of how internetworking evolved, he includes possible
solutions for 
the future, such as SIP, PIP, TUBA, and CIDR. He also
explains the 
Reverse Address Resolution Protocol (RARP) for use with
diskless systems.<P>

Along with the introduction to TCP/IP, Stevens presents
a detailed 
explanation of the individual protocols. Some of the
protocols, such 
as TCP, warrant several chapters, whereas certain singular
topics, 
such as IP Routing, each merit individual chapters.
Since Stevens 
has chosen to display the TCP/IP protocols through a
diagnostic program, 
two chapters on diagnostics are included. The ping program

checks whether &quot;another host is reachable.&quot;
The traceroute 
program displays the route that an IP datagram takes
&quot;from one 
host to another.&quot; <P>

TCP/IP Illustrated: Volume 1: The Protocols provides

an excellent text on the TCP/IP protocol suite. The
author covers 
the most important sections of the protocols in separate
chapters, 
not only addressing each protocol, but also discussing
the relationships 
between protocols. The diagrams he uses are excellent,
and his writing 
style is clear and readable. In sum, Stevens has made
a complex topic 

easy to understand. This book merits &quot;everyone's&quot;
attention. 
Please read it and keep it on your bookshelf. TCP/IP
Illustrated: 
Volume 1: The Protocols will be available in December
1993.<P>

<B><I>Learning the Korn Shell</I><br>
by Bill Rosenblatt<br>
O'Reilly &amp; Associates, Inc.<br>
ISBN 1-56592-054-6</B><P>

Rosenblatt begins this book with a definition of the
Korn shell and 
its relationship to both the Bourne and the C shells.
Although the 
author addressed the text specifically to the casual
UNIX user, there 
are several chapters that the experienced UNIX user
and the system 
administrator will appreciate. The first two chapters,
&quot;Korn Shell 
Basics&quot; and &quot;Command Line Editing,&quot; introduce
the concepts 
of shell programming and review the more elementary
aspects of the 
Korn shell. In the first chapter, Rosenblatt presents
a table of special 
characters and their meaning within shell command lines.<P>

Chapter 3, &quot;Customizing Your Environment,&quot;
explains the concept 
of an environment and describes a non-computer-related
environment 
as an example. Rosenblatt also presents the concepts
of .profile, 
alias, options, shell variables, and environment variables.
He uses 
particularly good examples when discussing the alias
function. A useful 
table of basic shell options notes that all 22 of the
options are 
listed in Appendix B. The description of the environment
also identifies 
lapses in security that might allow hackers to install
Trojan horses 
or other programs detrimental to your system.<P>

Beginning with chapter 4, &quot;Basic Shell Programming,&quot;
Rosenblatt 
addresses the more complex issues of shell programming,
particularly 
Korn shell programming. He describes different ways
of running shell 
programs and explains how they are executed. He also
discusses shell 
functions, which are new to the Korn shell, and the
distinctions between 
functions and shell programs.<P>

Chapters 5 and 6, &quot;Flow Control&quot; and &quot;&quot;Command-line
Options 
and Typed Variables,&quot; will be very familiar to
UNIX users who 
are also programmers. However, they focus on programming
from the 
Korn shell viewpoint, so non-programmers will have no
difficulty understanding 
the concepts. Experienced programmers may discover new
ways to accomplish 
familiar tasks through command-line options or variables.
<P>

Chapter 7, &quot;Input/Output and Command-line Processing,&quot;
can 
help both new and experienced shell programmers learn
more about input 
and output and different ways of accomplishing them
efficiently. The 
chapter also offers a more in-depth look at &quot;how
the shell processes 
command lines.&quot; Rosenblatt presents a table of
I/O redirectors 
supported by the Korn shell (he includes all sixteen
of them, whether 
or not they exist in the Bourne shell). An informative
diagram helps 
to explore issues related to command-line parsing.<P>

The final chapters in the book -- &quot;Process Handling,&quot;
&quot;Debugging 
Shell Programs,&quot; and &quot;Korn Shell Administration&quot;
-- 
will help the system administrator. The first of these
chapters addresses 
process IDs, job control, signals (and ignoring signals),
coroutines, 
and subshells. In &quot;Debugging Shell Programs,&quot;
Rosenblatt demonstrates 
different ways to debug shell scripts, some new and
some familiar 
to the reader. These include set options, fake signals,
and kshdb 
(the Korn shell debugger). The final chapter covers
customization 
and security.<P>

The three appendices are well worth reading. Appendix
A covers related 
shells, how to emulate the Korn shell on PCs, and the
difference between 
the Bourne and the Korn shells, chapter by chapter.
The second appendix 
contains reference lists, including built-in commands
and keywords, 
shell variables, test operators, set and typeset options,
and both 
emacs and vi mode commands. Appendix C explains how

to obtain sample programs and answers through FTP, FTPMAIL,
BITFTP, 
and UUCP.<P>

This book is an excellent text for both new and experienced
UNIX users. 
If you are new to the Korn shell, I advise reading the
beginning chapters 
so that you can learn to distinguish the Korn shell
from the Bourne 
and C shell capabilities. Rosenblatt presents exercises
(called tasks) 
and their solutions as the book develops and is able
to cover a broad 
range of subjects without oversimplifying any of the
challenging concepts 
involved. This book merits a thorough examination by
every UNIX shell 
programmer.<P>

<B><I>Getting Started with UNIX and X</I><br>
by Torbjùrn Andr³asson and Jan Skansholm<br>
Addison-Wesley<br>
ISBN 0-201-63170-9</B><P>

This very readable book about the UNIX operating system
and the X 
windowing systems available on UNIX is organized so
as to be applicable 
to users at the elementary, intermediate, and advanced
levels. Distinctive 
symbols identify which sections of the text are devoted

to which topics, 
such as X, Motif, OpenWindows, or the Korn shell. Each
section is 
presented independently, so that one or more may be
skipped without 
losing continuity.<P>

The authors begin by recounting the history of UNIX
and its components, 
then continue with a definition of X and an explanation
of the differences 
among several window managers. They describe how to
login, whether 
the user is new to UNIX, X, both, or neither. They carefully
document 
which environment variables must be set before the programs
mentioned 
will execute correctly. Their discussion of Xlib, Xt
Intrinsics, Widgets, 
and application programs demonstrates the X protocol
while providing 
a solution to the X novice's puzzle.<P>

Later chapters describe how to navigate within Motif
and introduce 
OpenLook and OpenWindows. The authors discuss the concepts
of the 
file system, including the X file managers, how to traverse
the X 
file tree, and how to accomplish various tasks within
X. They also 

focus on the more advanced shell commands, such as redirection,
filters, 
environment and shell variables, and the history capability,
where 
applicable. One of the most informative chapters in
the book deals 
with communications. This section explores remote copy
(rcp), 
the file transfer program (FTP), remote shell (rsh),
telnet, 
write and talk, and electronic mail (e-mail), and presents

their X counterparts.<P>

Other topics include text editing, both for UNIX and
for X, and writing 
shell scripts for the four different shells. The authors
also explain 
how to write, compile, and link a program in UNIX, and
they address 
the difficulties of programming in X. The final section,
on system 
administration, describes the superuser, startup and
shutdown procedures, 
adding and removing users, and copying using tar or
cpio. 
Andrasson and Skansholm also present the different menus
for 
the various systems.<P>

The authors have included plenty of diagrams and also
indicate where 
the interfaces originated. Many of the screens show
how to accomplish 
tasks in different windows. Several of the chapters
include quick 
reference guides as summaries -- the comparison table
following 
the advanced shell programming chapter is particularly
useful. The 
programs and tables for different shells are well documented
and the 
tables throughout the book are excellent. This book
should be read 
by anyone using UNIX and X: it will clarify any mysteries
still surrounding 
UNIX, X, and the relationship between the two.<P>

<B><I>Writing UNIX Device Drivers in C</I><br>
by Phillip M. Adams and Clovis L. Tondo<br>
Prentice Hall<br>
ISBN 0-13-963869-5<br>
Disk Included</B><P>

The authors describe this as a workbook rather than
a text. It provides 
the information needed either to experiment with existing
UNIX device 
drivers or to design and implement your own UNIX device
drivers. The 
book is divided into three sections. The introduction
explains the 
vocabulary and tools that the authors use throughout
the remainder 
of the book, including hardware and device driver fundamentals.
The 
second section features &quot;the concept, architecture
and operational 
characteristics of UNIX device drivers.&quot; This section
also presents 
a practical approach through a template that, ideally,
&quot;reduces 
development time&quot; while simultaneously improving
device driver 
reliability. The final portion of the book demonstrates
the techniques 
used in the design, implementation, and debugging phases
of a UNIX 
device driver that transforms &quot;your PC/AT parallel
port into a 
small computer system interface (SCSI) adapter.&quot;
A 3 1/2&quot; diskette 
for SCO UNIX System V/386 device drivers, containing
the source code 
used in most of the appendices, is included with the
book. The diskette 
itself describes the tar command on the label so that
the information 
is easy to transfer.<P>

Adams and Tondo not only define a device driver, but
also explain 
its purpose and enumerate the capabilities a UNIX device
driver must 
have. They stress that the book was written specifically
for programmers 
who either need to know about device drivers or want
to build device 
drivers. The reader should have a knowledge of C plus
minimal assembler 
language fundamentals. Knowledge of UNIX system software
and hardware 
is helpful, but optional.<P>

This book also examines the different reasons for using
the INTEL 
80386 and discusses the differences between real and
protected mode. 
The authors explain address translation and its importance
to the 
device driver author. Describing the UNIX operating
system &quot;as 
a set of layered interfaces,&quot; they enumerate the
interfaces and 
their functions, and present each interface in depth.<P>

Various chapters address the problems most commonly
associated with 
device drivers and present &quot;a `rule book' for developing
device 
drivers.&quot; Other subjects include &quot;UNIX I/O
Data Structures,&quot; 
the &quot;UNIX Block I/O Interface,&quot; the &quot;UNIX
Character I/O 
Interface,&quot; the &quot;UNIX Terminal I/O Interface,&quot;
the &quot;UNIX 
STREAMS I/O Interface,&quot; and the &quot;Small Computer
System Interface 
(SCSI).&quot;<P>

Although the introductory chapters are not addressed
to the novice, 
they are thoroughly documented. Each code segment clarifies
a specific 
concept from the text. The text itself provides an explanation
for 
experienced device driver users. This is an excellent
book for any 
user ready to build a device driver.<P>

<B><I>Connecting to the Internet<br>
A Buyer's Guide</I><br>
by Susan Estrada<br>
O'Reilly &amp; Associates, Inc.<br>
ISBN 1-56592-061-9</B><P>

In the introduction, Tracy LeQuey Parker underlines
the importance 
of knowing what the Internet is and what benefits you
may derive from 
it. Susan Estrada begins Connecting to the Internet
by describing 
the Internet and how it works, emphasizing the importance
of speed 
in transferring data. The primary question in assessing
any type of 
software or hardware is &quot;How are you planning to
use it?&quot; 
Estrada applies this question to the Internet and helps
you to answer 
it in terms of your own requirements.<P>

The next section of the book discusses network providers
and how to 
choose among them. The popularity of the Internet has
meant an increase 
in the number of providers available, but not all of
them offer the 
same services. Estrada presents an eleven-item checklist
-- including 
security, viability, and user services -- for network
providers.<P>

Estrada also differentiates between online and dialup
connections. 
If you are connecting as an individual, you will probably
use online 
services. However, if you are a heavy user or if there
are several 
people using one connection, you may prefer SLIP or
PPP accounts. 
In either case, the author provides a &quot;Checklist
of Questions&quot; 
to assist you. The final chapter deals with questions
regarding dedicated 
line connections.<P>

There are two invaluable appendices. The first contains
the Public 
Dialup Internet Access List (PDIAL), which lists public
access dialup 
accounts plus outgoing Internet access. The second appendix
is an 
&quot;Internet Access Provider List.&quot;<P>

This very useful book both explains the Internet and
helps you analyze 
what type of Internet you really want. The diagrams
are helpful and 
the author's style is crisp and clear. The anecdotes
and real-life 
examples that she uses emphasize the points with humor.
If you are 
interested in the Internet, you will appreciate this
book. <P>




<P>


<H1>About the Author</H1><p>
<P>
Elizabeth Zinkann has been involved in the UNIX and
C environments for the past
11 years. She is currently a UNIX and C consultant,
and one of her specialities
is UNIX education. In addition to her computer science
background, she also has a 
degree in English.<P>




<P><br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
