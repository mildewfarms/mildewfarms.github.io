<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE><title>v02, i06: Listing 1: sudo.c</title></TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1993/nov93.tar"><b class=codeListing>nov93.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<H1>Listing 1: sudo.c</H1><p>
<PRE>
/*
**   sudo.c
*/

/*
**   Configurable constants
*/

#define SECURE_PATH &quot;/bin:/usr/bin:/etc&quot;
#define USERFILE    &quot;/usr/local/adm/sudoers&quot;
#define LOGFILE     &quot;/usr/local/adm/sudolog&quot;
#define TIMEDIR     &quot;/usr/local/adm/sudocheck/&quot;
#define TIME         5 /* minutes */
#define SUDO_COP    &quot;root@localhost&quot;

/*
**   To install create the directories in the SECURE_PATH
**   and TIMEDIR and the files USERFILE and LOGFILE.
**   Set the owner of these files to root and the permissions
**   to og-rw.  Change the owner to root for the sudo program
**   and set the permissions to 4111 (--s--x--x).
*/

#define BUFSIZE  256
#define SUCCESS  1
#define FAILED  -1

#define CONFIG_ERR &quot;Configuration error.  &quot; \
&quot;Contact your security manager.&quot;
#define CONFIG_SUB &quot;Invalid sudo configuration!&quot;
#define SUID_ERR   &quot;Set UID bit not set.&quot;
#define STAT_ERR   &quot;Couldn't stat user file&quot;
#define OWNER_ERR  &quot;User file not owned by root&quot;
#define PERM_ERR   &quot;Invalid permissions on user file&quot;
#define OPEN_ERR   &quot;Couldn't open user file&quot;

#define USER_ERR   &quot;You are not set up to execute &quot; \
&quot;sudo on this machine.&quot;
#define USER_SUB   &quot;SECURITY**  Invalid sudo user!&quot;

#include &lt;ctype.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;pwd.h&gt;
#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/file.h&gt;
#include &lt;sys/param.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;

char *getpass();
char *crypt();

FILE *check_config(user)
char *user;
{
struct stat statb;
FILE *fp;

if ((setuid(0)) &lt; 0) /* no setuid */
mail(CONFIG_SUB,user,SUID_ERR,CONFIG_ERR);
if (stat(USERFILE, &amp;statb))  /* couldn't stat */
mail(CONFIG_SUB,user,STAT_ERR,CONFIG_ERR);
if (statb.st_uid != 0) /* must be owned by root */
mail(CONFIG_SUB,user,OWNER_ERR,CONFIG_ERR);
if (statb.st_mode &amp; 044)   /* should be og-rw */
mail(CONFIG_SUB,user,PERM_ERR,CONFIG_ERR);
if ((fp = fopen(USERFILE, &quot;r&quot;)) == 0) /* open err */
mail(CONFIG_SUB,user,OPEN_ERR,CONFIG_ERR);

return(fp);
}

char *get_command_list(fp, name, password)
FILE *fp;
char *name;
char *password;
{
char buffer[BUFSIZ];

while ((fgets(buffer,BUFSIZ,fp)) != NULL)
{
if(buffer[0] == '#') continue; /* skip remarks */

if((strncmp(buffer,name,strlen(name))) == 0)
if (get_password(name,password))
return(buffer); /* valid user */
else
return(NULL); /* invalid password */
}

return(NULL); /* invalid user */
}

int get_password(name, password)
char *name;
char *password;
{
char     fname[200];
char     *paswd;
char     *encrypted;
struct   stat stab;

sprintf (fname, &quot;%s/%s&quot;,TIMEDIR,name);

if (stat(fname, &amp;stab) == 0)
{
if ((time(NULL) - stab.st_mtime) &lt; (TIME * 60))
{
create_file(fname);
return (SUCCESS);
}
}

paswd = getpass(&quot;Password:&quot;);
encrypted = crypt(paswd,password);

if (strcmp(password, encrypted))
{
fprintf (stderr,&quot;Password incorrect\n&quot;);
return(FAILED);
}

fflush (stderr);
fflush (stdout);

create_file(fname);
return (SUCCESS);
}

create_file(file)
char     *file;    /* filename to be created */
{
int      descrip;
long     timep[2];

if ((descrip = open(file, O_TRUNC|O_CREAT|O_WRONLY,
0700)) &gt; 0)
{
close (descrip);
timep[0] = timep[1] = time(0);
utime (file, timep);
}
}

int checkdoer (dp, ap)
char *dp;
char *ap;
{
char         *cp0, *cp1;
int not_flag = 0;

cp0 = dp;

while (isalnum (*cp0)) cp0++;  /* skip past user */

while (*cp0)     /* search until end of line */
{
while (isspace (*cp0)) cp0++;   /* skip to cmd */
if (strncmp (cp0, &quot;not&quot;,3) == 0)  not_flag = 1;
if (strncmp (cp0, &quot;all&quot;,3) == 0) return (success);
cp1 = cp0;

/* find end of this entry */

while (*cp1 != '\n' &amp;&amp; !isspace(*cp1)) cp1++;

if (strncmp (cp0,ap,strlen(ap)) == 0)
{
cp1 = '\0';
if (not_flag) return(FAILED);
else          return(SUCCESS);
}

/* move pointer past and keep looking */

while (!isspace (*cp0) &amp;&amp; *cp0 != '\n') cp0++;

if (*cp0 == '\n') break;  /* if EOL then fail */
else continue;
}

if (not_flag) return(SUCCESS);
else          return(FAILED);
}

char *log(username, info, argc, argv)
char      *username;
char      *info;
int       argc;
char      **argv;
{
FILE *fp;
long now;
char ret_st[BUFSIZ];

if ((fp = fopen(LOGFILE,&quot;a&quot;)) == NULL)
mail(&quot;WARNING sudo can't open logfile.&quot;,username,
LOGFILE,&quot;&quot;);

now = time((long*) 0);
fprintf (fp, &quot;%20.20s :&quot;, ctime(&amp;now));
fprintf (fp, &quot;%10.10s&quot;, info);
fprintf (fp, &quot;%9.9s :&quot;,username);

while (argc--)
{
fprintf (fp, &quot;%s &quot;,*argv++);
sprintf (ret_st, &quot;%s &quot;,*argv++);
}

fprintf (fp,&quot;\n&quot;);
(void) fclose (fp);
return(ret_st);
}

mail(subject,user,text,err_msg)
char *subject;
char *user;
char *text;
char *err_msg;
{
char hostname[MAXHOSTNAMELEN];
FILE *fd;
FILE *popen();
char cmd[80];

firsthostname (hostname, MAXHOSTNAMELEN);

(void) sprintf (cmd,&quot;/usr/bin/mailx  -s \&quot;%s\&quot; %s &quot;,
subject,SUDO_COP);

if ((fd = popen (cmd, &quot;w&quot;)) == NULL) return;

(void) fputs(text, fd);

(void) fputs (&quot;\n\nThought you might want to know.&quot;,
fd);

(void) pclose(fd);

fprintf(stderr,&quot;%s %s&quot;,err_msg,&quot;\n&quot;);
exit(1);
}

firsthostname(n,l)
char *n;
int l;
{
(void) gethostname(n,l); /* get full hostname */
n[l-1] = 0;         /* make sure null terminated */
if (n = strchr(n, '.')) *n = 0; /* put null on '.'*/
}

main(argc,argv)
int argc;
char **argv;
{

FILE *userfile;
struct passwd *user;
int uid;
char *valid_cmds;
char *progname;
char *cmd_line;

progname = argv[0];

if (argc &lt; 2)
{
fprintf(stderr, &quot;usage: %s cmd\n&quot;, progname);
exit(1);
}

uid = getuid();
user = getpwuid(uid);

userfile = check_config(user);

if ((valid_cmds = get_command_list(userfile,
user-&gt;pw_name,user-&gt;pw_passwd)) != NULL)
{

argv++, argc--;

if (checkdoer(valid_cmds,*argv) != FAILED)
{

putenv(&quot;PATH=&quot; SECURE_PATH);
putenv(&quot;SHELL=/bin/false&quot;);

(void) log(user-&gt;pw_name,&quot;&quot;,argc,argv);
execvp(*argv, argv);   /* then do it */
perror(*argv);
}
else
{
(void) log(user-&gt;pw_name,&quot;FAIL &quot;,argc, argv);
fprintf(stderr,&quot;%s: You are not set up to &quot;
&quot;execute %s with sudo on this machine.\n&quot;,
progname,*argv);
exit(1);
}
}
else
{
cmd_line = log(user-&gt;pw_name,&quot;FAIL &quot;,argc, argv);
mail(USER_SUB,user-&gt;pw_name,cmd_line,USER_ERR);
}
}

/* End of File */
</pre><p>
<p>


<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
