<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i14: SolarisTM BSM Auditing</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/dec2004.tar"><b class=codeListing>dec2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> <h1><B><img src="a3.gif" width="245" height="47" align="right">Solaris<sup>TM</sup> 
              BSM Auditing</B></h1>
            <P> <I>Hal Pomeranz</i>
            <p> When enabled, the Solaris Basic Security Module (BSM) can create 
              an extremely detailed audit trail for all processes on the system. 
              The level of auditing produced is at the level required by systems 
              attempting to achieve the DoD "C2" level certification. The simplest 
              description of BSM auditing that I've been able to come up with 
              is to imagine running <B>truss</B> -- the Solaris system call tracing 
              tool -- on every single process on the system and saving the resulting 
              output to a file. BSM actually provides even more detailed information 
              than that.
            <P> While this information can be incredibly useful for both systems 
              administration and forensic purposes, we're obviously talking about 
              enormous amounts of data here. As a lower bound, consider that the 
              small workgroup server that runs my two-person consulting business 
              generates about 120 MB of BSM logs per month using the configuration 
              discussed later in this article. A machine that actually <I>does 
              something</I>, like a compute server or end-user workstation, will 
              typically generate perhaps an order of magnitude more information 
              than my relatively meager audit trail. It's a good thing disk space 
              is cheap these days.
            <P> While Sun's BSM reference [5] is quite complete, the initial stumbling 
              block for BSM has always been a lack of clearly defined standards 
              or recommendations on which events are necessary or useful to audit 
              and that just generate "noise" in the audit logs. Both DISA [1] 
              and Sun [2] have made their recommendations, and recently part of 
              my work with the Center for Internet Security has been to rationalize 
              these recommendations along with other input to produce some consensus 
              standards [3]. This article is both an introduction to BSM auditing 
              on Solaris and a discussion of the configuration recommendations 
              we've developed via the CIS consensus project.
            <P> <B>BSM Basics</B>
            <P> BSM is not enabled by default under Solaris. The administrator 
              is required to run the "<B>bsmconv</B>" script to set up the initial 
              auditing environment for the system. Sun strongly recommends running 
              the <B>bsmconv</B> script only in single-user mode, but honestly 
              I always do my BSM configuration in multi-user mode and have never 
              encountered any problems. Your mileage, as always, may vary.
            <P> <B>bsmconv</B> creates a number of files in the <B>/etc/security</B> 
              directory. The <B>audit_startup</B> script is invoked at boot time 
              and sets a number of different audit policies for the system. The 
              <B>audit_control</B> file is the primary configuration file for 
              BSM. The <B>audit_class</B> and <B>audit_event</B> files can be 
              used when more fine-grained control of the audit configuration is 
              required. There are a number of other BSM-related files in <B>/etc/security</B>, 
              but the four files mentioned here are the most critical for this 
              article.
            <P> The <B>audit_startup</B> script is simply a series of <B>auditconfig</B> 
              commands to initialize the system auditing policy:
            <P> 
            <pre>
#!/bin/sh
/usr/sbin/auditconfig -conf
/usr/sbin/auditconfig -aconf
/usr/sbin/auditconfig -setpolicy none
/usr/sbin/auditconfig -setpolicy +cnt
/usr/sbin/auditconfig -setpolicy +argv,arge
</pre>
            The first two lines pull configuration information out of the <B>audit_control</B> 
            file and set up the basic events that the system will audit. The remaining 
            lines set other special auditing policy options.
            <P> "<B>-setpolicy none</B>" first blanks the audit policy for the 
              system so we start with a clean slate. "<B>setpolicy +cnt</B>" then 
              tells the system to continue running even if the auditing partition 
              on the machine fills up (high-security sites are required to have 
              the machine shut down if auditing becomes impossible, "<B>-setpolicy 
              -cnt</B>"). "<B>-setpolicy +argv,arge</B>" means to track the full 
              command line and all environment settings for any command executed 
              on the system. Note that the "<B>-setpolicy +argv,arge</B>" line 
              is not part of the default BSM configuration set up by the <B>bsmconv</B> 
              script, but it is part of the consensus recommendations from CIS[3].
            <P> The <B>audit_control</B> file appears deceptively simple:
            <P> 
            <pre>
dir:/var/audit
minfree:20
flags:lo,ad,pc,fm,fw,-fc,-fd,-fr
naflags:lo,ad,ex
</pre> "<B>dir</B>" is the directory where audit logs will be 
            written on the system -- it's a good idea to make sure this directory 
            is only accessible by the superuser. There is no built-in facility 
            for writing audit logs to some other system, although some sites have 
            tried writing to an NFS-mounted directory from some central file server 
            (note that this configuration requires the client system to have root 
            write privileges into the NFS volume, which has some significant security 
            implications). "<B>minfree</B>" specifies the amount of free space 
            -- as a percentage -- that must exist in the auditing partition or 
            else the system starts complaining. So in our case, once our audit 
            partition goes above 80% full, the auditing subsystem starts sending 
            the administrator annoying warning messages (via the <B>/etc/security/audit_warn</B> 
            script).
            <P> The "<B>flags</B>" and "<B>naflags</B>" lines are the really interesting 
              part of the file. These lines define which audit events the system 
              is actually going to pay attention to (these are the lines that 
              the "<B>auditconfig -conf</B>" and "<B>auditconfig -aconf</B>" commands 
              in <B>audit_startup</B> are looking at). The two-letter codes are 
              groups ("audit classes") of related events (system calls) defined 
              via the <B>audit_class</B> and <B>audit_events</B> files. For example, 
              the "<B>fr</B>" class deals with "file read" type events, which 
              mostly consist of various permutations of the <B>open()</B> system 
              call when a file is opened for reading, but also includes events 
              like <B>readlink()</B> for dealing with symbolic link files. For 
              any given class, you have the option of monitoring only system call 
              failures ("<B>-fr</B>"), only successful calls ("<B>+fr</B>"), or 
              both ("<B>fr</B>").
            <P> The "<B>flags</B>" line defines the "audit vector" for normal 
              user sessions on the machine. The "<B>naflags</B>" line catches 
              all "non-attributable" events on the system events that are not 
              associated with a particular user's session. Usually, non-attributable 
              events are the result of system processes and do not occur that 
              frequently. Most of the interesting "tuning" for BSM happens on 
              the "flags" line, and I'll cover these settings in a lot more detail 
              in the latter part of this article.
            <P> Audit logs are written to binary files in your audit directory. 
              The file naming convention used is "<I>&lt;start&gt;.&lt;end&gt;.&lt;hostname&gt;</I>", 
              where <I>&lt;start&gt;</I> and <I>&lt;end&gt;</I> are time/date 
              stamps in the format "<I>YYYYMMDDhhmmss</I>" and <I>&lt;hostname&gt;</I> 
              is the fully qualified hostname of the local machine. Actually, 
              the current audit log that's actively being written is named "<I>&lt;start&gt;</i><B>.not_terminated.</B><I>&lt;hostname&gt;</I>" 
              to distinguish it from the other audit logs in the directory.
            <P> The command "<B>audit -n</B>" signals the system audit daemon 
              to close its current audit log file and start a new one. Unless 
              told otherwise, the audit daemon will simply continue writing to 
              the current audit log, and it will grow without bound until it reaches 
              the file size limit for the machine or fills the partition. The 
              CIS recommendation [3] is to put the following line in root's crontab 
              to force audit logs to be restarted at the top of every hour:
            <P> 
            <pre>
0 * * * * /usr/sbin/audit -n
</pre>
            Once the new audit log has been started, the old log can be compressed 
            and/or moved off of the local system for archival purposes. Some sites 
            that are concerned about attackers sabotaging or removing the audit 
            logs actually rotate their audit logs much more frequently (some every 
            5 minutes) so that they can move the audit logs to some secure repository 
            elsewhere on the network.
            <P> Since the audit log files are binary data, you need a special 
              tool to read them. The <B>praudit</B> command will dump an audit 
              trail in a variety of different formats. The <B>auditreduce</B> 
              program can be used to select particular audit events based on different 
              criteria such as username, time of day, etc. However, the output 
              of <B>auditreduce</B> is still in the internal binary format used 
              in the audit log files themselves, so you must pipe the output of 
              <B>auditreduce</B> into <B>praudit</B> to achieve any intelligible 
              result.
            <P> Beyond that, you're on your own when it comes to interpreting 
              the audit output. Most sites end up "rolling their own" Perl scripts 
              to parse and report on the auditing data. Some of the commercial 
              IDS vendors have been working on incorporating the BSM audit trail 
              into their host-based IDS products as a near real-time system auditing 
              mechanism, but this is still far more art than science.
            <P> <B>Tuning Auditing</B>
            <P> As I mentioned earlier, the real difficulty with BSM is tuning 
              the level of auditing on the system. The trick is to strike a balance 
              between getting the events you need to reconstruct what's been happening 
              on the system, while filtering out uninteresting events that add 
              "noise" to the audit trail and consume huge amounts of disk space. 
              One size does not fit all here. For example, the DoD requirements 
              specified in the DISA STIG [1] reflect very high levels of auditing 
              required for secure military sites. Most organizations don't require 
              this level of auditing and can save enormous amounts of disk space 
              by eliminating some of these audit events from their default audit 
              vectors in the <B>audit_control</B> file.
            <P> I'll first explain which events are covered by some of the more 
              useful audit classes, and then I'll make some recommendations for 
              preserving your sanity and your disk space.
            <P> <B>General Events -- "lo" (login) and "ad" (administrative)</B>
            <P> The "<B>lo</B>" (login) class covers all forms of system logins 
              as well as use of the <B>su</B> command. The "<B>ad</B>" (administrative) 
              class covers a wide variety of administrative actions including 
              rebooting the system, adding and deleting users, changing auditing 
              and logging parameters, mounting and unmounting file both local 
              and remote file systems, changing quotas, loading kernel modules, 
              and even setting the system clock. Every configuration recommendation 
              I've ever seen recommends tracking both successes and failures for 
              events in these classes. The Sun recommendations [2] include some 
              hints for customizing the "<B>ad</B>" class to reduce some of the 
              noise from uninteresting events, but this is not a huge optimization.
            <P> <B>Process Events -- "ex" (execution) and "pc" (process control)</B>
            <P> The "<B>ex</B>" and "<B>pc</B>" classes deal with process execution 
              on the system. Actually, the two events in the "<B>ex</B>" class 
              -- <B>exec()</B> and <B>execve()</B> system calls -- are also contained 
              in the "<B>pc</B>" class, so if your audit vector includes "<B>pc</B>" 
              then you don't need to worry about "<B>ex</B>".
            <P> Aside from the <B>exec()</B> and <B>execve()</B> system calls 
              that are actually used to execute programs on the system, the "<B>pc</B>" 
              class also tracks everything that the process might do during its 
              lifetime -- changing directories, calling <B>setuid()</B> and <B>setgid()</B> 
              to change its privilege level, making <B>chroot()</B> calls, creating 
              child processes with <B>fork()</B> and <B>vfork()</B>, etc. The 
              "<B>pc</B>" class also tracks administrative interaction with processes 
              on the system, like <B>kill</B> and <B>nice</B>.
            <P> The problem here is that "<B>pc</B>" tracks various system calls 
              that aren't usually interesting. For example, you probably don't 
              care to know every time your mail server <B>fork()</B>s a new child 
              process to deal with an incoming connection. What you really care 
              about is when new processes get started on the system -- typically 
              with a <B>fork()</B> followed by an <B>exec()</B>. So we really 
              just want track the <B>exec()</B>s. Similarly, keeping track of 
              every single <B>chdir()</B> call by a process is going to drive 
              you nuts.
            <P> So, we need a way to track the important events from the "<B>pc</B>" 
              class but ignore the uninteresting ones. This requires actually 
              creating a new custom class that includes just the events that we 
              want. More on this later.
            <P> <B>File Attribute Modification -- The "fm" Class</B>
            <P> The "<B>fm</B>" class tracks changes to file attributes like ownership 
              (<B>chown</B>) and permissions (<B>chmod</B>) and even extended 
              file ACL settings. However, "<B>fm</B>" also tracks file locking 
              and updating timestamps on files. These latter events are way too 
              frequent on normal Unix systems to be anything other than "noise" 
              in your logs. Again, we'll need some way to customize the "<B>fm</B>" 
              class so that we see only the interesting stuff in our audit trail.
            <P> <B>Other File Actions -- "fc" (create), "fr" (read), "fw" (write), 
              "fd" (delete)</B>
            <P> The decision about whether to include the other "file" event classes 
              to track creating, deleting, reading, and modifying files was probably 
              the most contentious aspect of our auditing discussions within CIS. 
              Sun [2] recommends avoiding these audit classes to reduce the size 
              of the audit trail. On the other hand, the DoD guidelines [1] require 
              tracking at least failure for these classes (actually the specific 
              recommendation is "<B>fw,-fc,-fd,-fr</B>").
            <P> These classes really can generate an enormous number of audit 
              events and consume huge amounts of disk space. Think about compiling 
              a huge software package from source code -- not only are you going 
              to generate all of those new *<B>.o</B> files, but the compiler 
              will probably be creating and deleting intermediate result files 
              in some system temp directory.
            <P> The "<B>fr</B>" class can really kill you during process execution 
              because each process execution involves searching your <B>LD_LIBRARY_PATH</B> 
              for shared library files. You have to walk through every directory 
              in <B>LD_LIBRARY_PATH</B> for each *<B>.so</B>, and every time you 
              "miss" and don't find the shared object in the early directories 
              in your search path, you generate a read "failure". I've often wished 
              that the auditing system could distinguish between "file not found" 
              (<B>ENOENT</B>) and "permission denied" (<B>EACCES</B>) so that 
              I could audit one and not the other. Unfortunately, this is not 
              possible at this time.
            <P> Ultimately, we decided to err on the side of caution in the CIS 
              recommendations [3]. The default recommendation is not to turn on 
              any auditing of these classes, although we document the DISA recommendations 
              in the notes for the BSM item. This is not to say that these classes 
              do not cover important events on the system (particularly from a 
              forensic perspective); we just didn't want people who followed our 
              recommendations to suddenly start running out of disk space due 
              to their audit logging. If you have the disk space to burn, you 
              might consider auditing "<B>fc,fd,fw</B>". The "<B>fr</B>" class 
              just adds too much noise for my taste, but again your mileage may 
              vary.
            <P> <B>Custom Audit Classes</B>
            <P> Audit class names are defined in the <B>audit_class</B> file. 
              Here are the audit class entries for the classes I've talked about 
              so far:
            <P> 
            <pre>
0x00000001:fr:file read
0x00000002:fw:file write
0x00000008:fm:file attribute modify
0x00000010:fc:file create
0x00000020:fd:file delete
0x00000080:pc:process
0x00000800:ad:administrative
0x00001000:lo:login or logout
0x40000000:ex:exec
0xffffffff:all:all classes
</pre>
            The first field of each line is a unique bit mask that's used to represent 
            the audit class in the internals of the auditing subsystem (there 
            are "gaps" in the numbering between the lines above because there 
            are some other audit classes in the default <B>audit_class</B> file 
            that I'm not showing you). The second field is the class code used 
            in the "<B>flags</B>" and "<B>naflags</B>" lines in <B>audit_control</B>, 
            and the third field is just a brief descriptive name that's for the 
            use of the systems administrator.
            <P> When creating a custom class, you need to pick a bit mask and 
              a two-letter class code that are not currently in use by any other 
              class. In the default <B>audit_class</B> file installed by <B>bsmconv</B>, 
              bit masks from <B>0x00010000</B> through <B>0x08000000</B> are not 
              used. Our CIS recommendations [3] create a custom class called "<B>cc</B>" 
              with a bit mask of <B>0x08000000</B>:
            <P> 
            <pre>
0x08000000:cc:CIS custom class
</pre>
            Once you've defined your new class in the <B>audit_class</B> file, 
            you associate the two-letter class code with specific events via the 
            <B>audit_event</B> file. Here's a sample line from that file:
            <P> 
            <pre>
7:AUE_EXEC:exec(2):pc,ex,cc
</pre>
            The first two fields are a unique code number and code name to identify 
            the event. The third field is purely descriptive. The last field describes 
            which audit classes this event is associated with. As noted earlier, 
            <B>exec()</B> calls are monitored by both the "<B>pc</B>" and "<B>ex</B>" 
            classes. We've added our custom "<B>cc</B>" class to the end of the 
            line so it picks up the <B>exec()</B> events, too.
            <P> So, what events do we actually want to monitor with our custom 
              class? Here's the <B>awk</B> code we use to modify the <B>audit_event</B> 
              file in the CIS document [3]:
            <P> 
            <pre>
awk 'BEGIN { FS = ":"; OFS = ":" }
($4 ~ /fm/) &amp;&amp; ! ($2 ~ /MCTL|FCNTL|FLOCK|UTIME/) \
    { $4 = $4 ",cc" }
($4 ~ /pc/) &amp;&amp; \
! ($2 ~ /FORK|CHDIR|KILL|VTRACE|SETGROUPS|SETPGRP/) \
    { $4 = $4 ",cc" }
{ print }' audit_event &gt;audit_event.new
</pre>
            Essentially, this code is saying that we want all "<B>fm</B>" events 
            except for file locking (<B>mctl()/fcntl()/flock()</B> handle file 
            locking plus some other stuff) and timestamp updates with <B>utime()</B> 
            plus all "<B>pc</B>" events except <B>fork()/vfork(), chdir()</B>, 
            <B>kill()</B>, <B>vtrace()</B>, <B>setgroups()</B>, and <B>setpgrp()</B>. 
            Check the manual pages if you have any questions about what this last 
            set of system calls does. Once you've verified that the <B>audit_event.new</B> 
            file looks the way you want it, make a backup copy of the original 
            <B>audit_event</B> file and replace it with your new version.
            <P> Now that we've fully defined our custom class, we actually have 
              to use it in the audit vector in the <B>audit_control</B> file. 
              Here's the <B>audit_control</B> file from our CIS recommendations 
              [3]:
            <P> 
            <pre>
dir:/var/audit
minfree:20
flags:lo,ad,cc
naflags:lo,ad,ex
</pre>
            After making all of these changes, the system must be rebooted for 
            the changes to take effect.
            <P> <B>BSM Caveats</B>
            <P> It's important to mention a few additional items before closing 
              this article:
            <P> 
            <ul>
              <li> Enabling BSM automatically disables the <B>&lt;Stop&gt;-A</B> 
                keyboard sequence on the machine. After all, you want to be able 
                to monitor shutdown and reboot events and associate them with 
                a particular user. Disabling <B>&lt;Stop&gt;-A</B> means somebody 
                has to log in, become root, and halt the machine. All of these 
                are auditable events. 
              <li> Enabling BSM disables "auto-mounting" of CD-ROMs and floppies 
                via <B>vold</B>. Again, there's an audit trail issue if a system 
                process spontaneously mounts and unmounts file systems. 
              <li> There are known interoperability problems between OpenSSH (particularly 
                with <B>PrivSep</B> enabled) and BSM. The most noticeable issue 
                is that OpenSSH sessions will not appear in your audit logs at 
                all. A patch [4] is available to fix this and some other issues.
            </ul>
            <B>Conclusion</B>
            <P> The first step toward BSM deployment seems to have been achieved, 
              namely that we now have some reasonable configuration standards 
              that a large number of people have agreed to. The next step is developing 
              some good tools for reporting on events in the audit trail. The 
              rumor is that there is already an effort in progress within Sun 
              Microsystems to do just that. Keep your fingers crossed.
            <P> <B>References</B>
            <P> 1. DISA Unix STIG -- <B>http://csrc.nist.gov/pcig/STIGs/unix-stig-v4r4-091503.zip</B>
            <P> 2. "Auditing in the Solaris 8 Operating Environment", William 
              Osser and Alex Noordergraaf -- <B>http://www.sun.com/blueprints/browsesubject.html#security</B>
            <P> 3. Center for Internet Security "Solaris Benchmark" document -- 
              <B>http://www.cisecurity.com/bench_solaris.html</B>
            <P> 4. OpenSSH patch to help with BSM auditing -- <B>http://bugzilla.mindrot.org/show_bug.cgi?id=125</B>
            <P> 5. "SunSHIELD Basic Security Module Guide" -- <B>http://docs.sun.com/db/doc/806-1789</B>
            <P> <I>Hal Pomeranz (<B>hal@deer-run.com</B>) spent so much time haggling 
              about audit flags during the CIS consensus process that he actually 
              started having dreams about them. As scary as this may sound, this 
              was actually an improvement over his previous subconscious activity.</I>
            <h1>&nbsp; </h1>
            </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
