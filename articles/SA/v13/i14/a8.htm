<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i14: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/dec2004.tar"><b class=codeListing>dec2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> <h1><B><img src="a8.gif" width="245" height="47" align="right">Questions 
              and Answers</B></h1>
            <P> <I>Amy Rich</i>
            <p> <b><font size="+2">Q</font></b> I have several files that I need 
              to, for lack of a better word, shuffle together. Each file contains 
              a column of data, and I need to wind up with one file that contains 
              all columns, lined up by line number, and delimited by commas (to 
              import into some database software). For example, say I have three 
              files, foo, bar, and baz. Their contents are as follows:
            <P> 
            <Pre>
foo:           bar:
                   
  1              a
  2              b
  3              c
  4              d
  5              e
  6              f
  7              g
  8              h
  9              i
                 j
baz:             k
                 l
  A              m
  B              n
  C              o
  D              p
  E              q
</pre>
            I want to combine the columns of foo, bar, and baz so I wind up with 
            a file that looks like:
            <P> 
            <Pre>
  1,a,A
  2,b,B
  3,c,C
  4,d,D
  5,e,E
  6,f,
  7,g,
  8,h,
  9,i,
  ,j,
  ,k,
  ,l,
  ,m,
  ,n,
  ,o,
  ,p,
  ,q,
</pre>
            I tried to write an awk script to do this, but it was more difficult 
            than I anticipated because not all the columns are of the same length. 
            Do you know of a simple way to handle a variable number of files and 
            columns?
            <P> <b><font size="+2">A </font></b> Assuming that each file only 
              has one column of data, the best tool for this particular job is 
              the command <B>paste</B>, a utility to merge files by line position. 
              By default, the newline character at the end of every line except 
              those from the last file will be replaced by a tab character.
            <P> You can change this to a comma by specifying the <B>-d</B> flag:
            <P> 
            <Pre>
paste -d , foo bar baz &gt; datafile
</pre> <b><font size="+2">Q</font></b> Because of the recent 
            rise in spam that only has a random dollar figure in the subject line, 
            I want to write a sendmail rule that does a regular expression match 
            and bounce it back. I'm running sendmail 8.12.11, and the rule I came 
            up with is:
            <P> 
            <pre>
LOCAL_CONFIG
Kmoneyspam regex -a@MATCH (\$[0-9][0-9]+)

LOCAL_RULESETS
HSubject:       $&gt;CheckMoneySubject

SCheckMoneySubject
R$*             $: $(moneyspam $1 $: &lt;OK&gt; $)
R&lt;OK&gt;           $@ OK
R$+             $#error $: 550 5.7.1 Spam not accepted here
</pre>
            Unfortunately, I can't get the ruleset to work correctly. It seems 
            never to match any of the spam subject lines. Could you check over 
            my ruleset and offer me some pointers?
            <P> <b><font size="+2">A </font></b> Your regular expression match 
              is not working because sendmail is performing a macro expansion 
              on the $. You need to use \$$ to match a literal $ character. I 
              would also suggest changing the regular expression so that it doesn't 
              catch ANY subject with $NN in it, but only those subjects that have 
              JUST a dollar figure in them:
            <P> 
            <Pre>
Kmoneyspam regex -a@MATCH ^(\$$[0-9]+)?$
</pre>
            This would reject:
            <P> 
            <Pre>
Subject: $1
</pre>
            But not either of:
            <P> 
            <pre>
Subject: a $1
Subject: $1 a
</pre>
            This way you don't accidentally reject important mail, say something 
            from an eBay auction you won, with a dollar figure in the subject 
            line.
            <P> Also, the syntax is wrong in your ruleset's rejection line. It 
              should be:
            <P> 
            <Pre>
$#error $@ 5.7.1 $: 550 Spam not accepted here
</pre> <b><font size="+2">Q</font></b> We're running Solaris 
            9 on a variety of different SPARC-based platforms. Occasionally, when 
            we add a new package, our /usr/local symlink gets removed and the 
            new package creates its own /usr/local directory. This is annoying 
            and extremely disruptive on a live system. How can we prevent /usr/local 
            from being removed and remade?
            <P> <b><font size="+2">A </font></b> You don't say whether you're 
              building the packages yourself or getting them from a third-party 
              source over which you have no control. If you have any say in the 
              package create process, then make sure you don't specify /usr/local 
              as a directory in the prototype file. Make sure there are no lines 
              that look like:
            <P> 
            <pre>
d none /usr/local 0755 root other
</pre>
            You can hard-code your prototype files to treat /usr/local as a symbolic 
            link (this assumes that you're linking to /opt/local):
            <P> 
            <pre>
s none /usr/local=/opt/local
</pre>
            But the better solution is to set the BASEDIR to /usr/local and use 
            relative paths in the prototype file. Here's an example prototype 
            and pkginfo for the md5 program:
            <P> 
            <pre>
i pkginfo=pkginfo
!search /usr/local
d none sbin 0755 root other
f none sbin/md5 0755 root other


BASEDIR=/usr/local
PATH=/sbin:/usr/sbin:/usr/bin:/usr/sadm/install/bin
PKG=md5
NAME=md5
VERSION=1.0
ARCH=sun4u
CATEGORY=application
VENDOR=Your Name Here
EMAIL=me@my.domain
PSTAMP=20040811
CLASSES=none
</pre>
            Create the package with the command:
            <P> 
            <pre>
pkgmk -b /usr/local -o -f prototype
</pre>
            If you don't have control over the creation of these packages or you 
            don't want to deal with the hassle of using symlinks or relative paths, 
            you can instead mount /usr/local as a loopback filesystem and not 
            use a symlink. To do this, make sure that no one is accessing files 
            within /usr/local using a tool like lsof or fuser (or just boot into 
            single-user mode). Remove the /usr/local symbolic link and create 
            a directory in its place:
            <P> 
            <pre>
rm /usr/local
mkdir /usr/local
chmod 0755 /usr/local
</pre>
            Then create the following entry in /etc/vfstab:
            <P> 
            <pre>
/opt/local   -   /usr/local    lofs    -       yes     -
</pre>
            Finally, mount the loopback filesystem:
            <P> 
            <Pre>
mount /usr/local
</pre>
            Now packages will see /usr/local as a directory, and you shouldn't 
            have any more issues.
            <P> <b><font size="+2">Q</font></b> I use tcsh as my interactive shell 
              on a variety of Unix platforms. I'd like to whip up an alias that 
              does the equivalent of the following command line:
            <P> 
            <pre>
find . -exec grep EXP {} \;
</pre>
            I'd like to be able to specify EXP as the input to the alias, for 
            example:
            <P> 
            <pre>
rgrep foo   should expand to   find . -exec grep foo {} \;
rgrep bar   should expand to   find . -exec grep bar {} \;
</pre>
            I'm not sure how to read the input from the command line, though; 
            any suggestions?
            <P> <b><font size="+2">A </font></b> To do exactly what you asked, 
              you could add the following alias to your .cshrc or .tcshrc:
            <P> 
            <pre>
alias rgrep '/usr/bin/find . -exec /usr/bin/grep \!:1 {} \;'
</pre>
            Unfortunately, what you asked for has a few shortcomings. This will 
            not print the name of the file when you get a match. It will also 
            try to grep on directories, special files, etc. To make this a bit 
            better, it could be rewritten as:
            <P> 
            <pre>
alias rgrep '/usr/bin/find . -type f -exec /usr/bin/grep \!:1 {} \; -print'
</pre>
            This will produce output that has the matching line, followed by the 
            matching filename on the next line. With more massaging, you could 
            get it to look exactly like a standard grep command. The best answer, 
            though, is to forget about the alias all together and use a tool like 
            GNU grep, which has a recursive option like this:
            <P> 
            <pre>
grep -r foo .
</pre>
            GNU grep is available from:
            <P> 
            <pre>
http://www.gnu.org/software/grep/
</pre> <b><font size="+2">Q</font></b> We have a number of Windows 
            users at our site that mount Samba shares from our OpenBSD server. 
            When these folks go on the road, they want the same access to the 
            shares, but we don't have any sort of VPN. Obviously, I don't want 
            to pass NetBIOS traffic in the clear over a public network, and I 
            don't really want to open us up for attack. Is there was a secure 
            way to do this without an actual VPN?
            <P> <b><font size="+2">A </font></b> You can tunnel Samba over ssh 
              or use stunnel to encrypt and redirect the session with SSL. In 
              both cases, you're going to need to modify your client machines, 
              since Windows already binds NetBIOS to the local port 139. Each 
              client must therefore install the Microsoft Loopback adapter as 
              described at:
            <P> 
            <pre>
http://support.microsoft.com/default.aspx?scid=839013
</pre>
            Configure the loopback device with an unused IP such as 10.10.10.10 
            or 222.222.222.222 and disable file and print sharing and NetBIOS 
            under the TCP/IP settings.
            <P> The client machines can now opt to go with ssh or stunnel as an 
              encryption method. Setting up tunneling with PuTTY is described 
              at:
            <P> 
            <pre>
http://lists.samba.org/archive/samba/2004-May/085358.html  
</pre>
            Setting up access with stunnel is described at:
            <P> 
            <pre>
http://research.lumeta.com/ches/cheap/stunnelsolution.html
</pre> <b><font size="+2">Q</font></b> I'm running FreeBSD 4.10 
            on a generic PIII machine that I cobbled together from spare parts. 
            The machine is up and running and acting as a development machine 
            for a bunch of users, so I don't want to shut it down. The developers 
            want to know some information about the BIOS and the hardware that's 
            installed. Is there a way I can find that information without shutting 
            down the machine?
            <P> <b><font size="+2">A </font></b> You don't say exactly what information 
              you need to know, but you can get a lot from running dmesg or from 
              the dmesg boot time snapshot, /var/run/dmesg.boot. Additionally, 
              take a look at the tool dmidecode if you're running a machine that 
              has DMI/SMBIOS. You can install it from the ports collection: /usr/ports/sysutils/dmidecode.
            <P> The dmidecode binary dumps the table contents for the DMI, containing 
              a lot of information, in human-readable format. Each record from 
              the table has a handle, type, size, and the decoded values. The 
              handle is a unique identifier that allows records to refer to one 
              another. The type describes the elements a computer can be made 
              of. The size is roughly the size of the record (not accounting for 
              text strings). The value of the decoded section depends on the information 
              for that element. As an example, an old PII Celeron processor might 
              look like the following:
            <P> 
            <pre>
Handle 0x0004
   DMI type 4, 32 bytes.
   Processor Information
         Socket Designation: SLOT 1
         Type: Central Processor
         Family: Pentium II
         Manufacturer: Intel
         ID: 65 06 00 00 FF 39 43 11
         Signature: Type 0, Family 6, Model 6, Stepping 5
         Flags:
                 FPU (Floating-point unit on-chip)
                 VME (Virtual mode extension)
                 DE (Debugging extension)
                 PSE (Page size extension)
                 TSC (Time stamp counter)
                 MSR (Model specific registers)
                 PAE (Physical address extension)
                 MCE (Machine check exception)
                 CX8 (CMPXCHG8 instruction supported)
                 SEP (Fast system call)
                 MTRR (Memory type range registers)
                 PGE (Page global enable)
                 MCA (Machine check architecture)
                 CMOV (Conditional move instruction supported)
                 PAT (Page attribute table)
                 PSE-36 (36-bit page size extension)
                 MMX (MMX technology supported)
                 FXSR (Fast floating-point save and restore)
         Version: INTEL(R) CELERON(TM)
         Voltage: 3.3 V
         External Clock: 66 MHz
         Max Speed: 200 MHz
         Current Speed: 533 MHz
         Status: Populated, Enabled
         Upgrade: Slot 1
         L1 Cache Handle: 0x0000
         L2 Cache Handle: 0x0000
         L3 Cache Handle: No L3 Cache
</pre>
            Be forewarned that the amount of information that dmidecode supplies 
            takes up a number of pages. You'll probably want to parse it with 
            a script or at least pass it through your favorite paging program.
            <P> The FreeBSD dmidecode port also comes with three other programs:
            <P> 
            <P> biosdecode -- Prints all the BIOS info it can find.
            <P> ownership -- Prints the "ownership tag" sometimes set on Compaq 
              machines.
            <P> vpddecode -- Prints the "vital product data" information found 
              in most IBM machines.
            <P> <I>Amy Rich, president of the Boston-based Oceanwave Consulting, 
              Inc. (<B>http://www.oceanwave.com</B>), has been a UNIX systems 
              administrator for more than 10 years. She received a BSCS at Worcester 
              Polytechnic Institute, and can be reached at: <B>qna@oceanwave.com</B>.</I>
            <h1>&nbsp; </h1>
            </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
