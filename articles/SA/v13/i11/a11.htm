<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i11: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/nov2004.tar"><b class=codeListing>nov2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_questions.gif" width="245" height="130" align="right">Questions 
              and Answers</h1>
            <P><i> Amy Rich</i>
            <p> <b><font size="+2">Q</font></b> I have installed <B>syslog-ng</B> 
              and am using <B>stunnel</B> to encrypt the connection between syslog 
              clients and a central server. I followed the directions from:
            <P> 
            <pre>
http://www.stunnel.org/examples/syslog-ng.html
</pre>
            I know I have <B>syslog-ng</B> working without the <B>stunnel</B> 
            bit, so I'm guessing that's where the issue is. When I start 
            <B>syslog-ng</B>, my logs show the following error:
            <P> 
            <pre>
Sep  2 17:10:35 src@host.my.domain syslog-ng[7633]: \
  syslog-ng version 1.6.4 starting
Sep  2 17:10:35 src@host.my.domain syslog-ng[7633]: \
  connect_callback(): connect() failed
Sep  2 17:10:35 src@host.my.domain syslog-ng[7633]: \
  Error connecting to remote host AF_INET(127.0.0.1:514), \
  reattempting in 60 seconds
</pre>
            When I try to send a message to syslog via the logger command, after 
            a bunch of "Garbage collection" and "Object" lines, 
            I get this error:
            <P> 
            <pre>
Sep  2 17:11:36 src@host.my.domain syslog-ng[7633]: \
  connecting fd 6 to inetaddr 127.0.0.1, port 514
Sep  2 17:11:36 src@host.my.domain syslog-ng[7633]: \
  io.c: do_write: write() failed (errno 32), Broken pipe
Sep  2 17:11:36 src@host.my.domain syslog-ng[7633]: \
  pkt_buffer::do_flush(): Error flushing data
Sep  2 17:11:36 src@host.my.domain syslog-ng[7633]: \
  Connection broken to AF_INET(127.0.0.1:514), reopening in 60 seconds
</pre>
            I tried googling for the answer to this, but the only thing I really 
            came up with was a post from 2002 on the <B>syslog-ng</B> mailing 
            list by someone having a similar problem:
            <P> 
            <pre>
https://lists.balabit.hu/pipermail/syslog-ng/2002-June/003416.html
</pre>
            No one came up with a solution as far as I could see, and they suggested 
            he upgrade. I'm already running the latest stable versions of 
            both pieces of software, <B>syslog-ng</B> 1.6.4 and <B>stunnel</B> 
            4.05, so that's not going to help me much. Is there a known bug 
            with <B>stunnel</B> or <B>syslog-ng</B> and Solaris 9 or is there 
            another issue?
            <P> I've included my simplistic <B>stunnel.conf</B> and <B>syslog-ng.conf</B> 
              files from both the client and the server. Here's the client 
              <B>stunnel.conf</B>:
            <P> 
            <pre>
client = yes
cert = /usr/share/certs/syslog-ng-client.pem
CAfile = /usr/share/certs/syslog-ng-server.pem
verify = 3
[5140]
   accept = 127.0.0.1:514
   connect = 192.168.1.3:5140
</pre>
            And the <B>stunnel.conf</B> from the server:
            <P> 
            <pre>
cert = /usr/share/certs/syslog-ng-server.pem
CAfile = /usr/share/certs/syslog-ng-client.pem
verify = 3
[5140]
   accept = 192.168.1.3:5140
   connect = 127.0.0.1:514
</pre>
            The <B>syslog-ng.conf</B> file from the client:
            <P> 
            <pre>
options { long_hostnames(off); sync(0);};

source src { sun-streams("/dev/log" door("/etc/.syslog_door"));
             internal();};

destination dest { file("/var/log/messages");};
destination stunnel { tcp("127.0.0.1", port(514));};
       
log { source(src);destination(dest);};
log { source(src);destination(stunnel);};
</pre>
            And the <B>syslog-ng.conf</B> file on the server:
            <P> 
            <pre>
options { long_hostnames(off); sync(0); keep_hostname(yes);
          create_dirs(yes); chain_hostnames(no);};

source src { sun-streams("/dev/log" door("/etc/.syslog_door"));
             internal();};

source stunnel { tcp(ip("127.0.0.1") port(514) max-connections(1));};

destination dest { file("/var/log/messages");};
destination remotelog { file ("/var/log/remote/$HOST/messages");};

log { source(src);destination(dest);};
log { source(stunnel);destination(remotelog);};
</pre>
            On the clients, things log fine to the local <B>/var/log/messages</B>, 
            but I never see anything in <B>/var/log/remote</B> on the server.
            <P> <b><font size="+2">A </font></b> The problem is that <B>syslog-ng</B> 
              on the client is having trouble talking to the server over <B>stunnel</B>, 
              as you surmised. Your configuration files look fine, though, so 
              the problem lies elsewhere. Did you compile in <B>tcp wrappers</B> 
              support? My first guess would be that you have a packet filter in 
              the way or you're blocking the connection with <B>tcp wrappers</B>. 
              Make sure that you can actually make a normal unencrypted TCP connection 
              between the client and server. Check firewalling and tcp wrapper 
              logs to see if they're catching anything.
            <P> Once you've verified that an unencrypted session works on 
              those ports, make sure that the <B>pem</B> files you're using 
              are valid. Take a look at the <B>stunnel</B> log files (turn on 
              debugging if you haven't already) and see if it mentions having 
              authentication issues. Make sure that you can verify your <B>pem</B> 
              files on the client with the command:
            <P> 
            <pre>
openssl verify -CAfile /usr/share/certs/syslog-ng-server.pem \
 /usr/share/certs/syslog-ng-client.pem
</pre>
            And on the server with the command:
            <P> 
            <pre>
openssl verify -CAfile /usr/share/certs/syslog-ng-client.pem \
 /usr/share/certs/syslog-ng-server.pem
</pre>
            You might have forgotten to add the certificate of the signing CA 
            (and all the intermediaries) to your CAfile if you get an error of:
            <P> 
            <pre>
error 20 at 0 depth lookup:unable to get local issuer certificate
</pre> <b><font size="+2">Q</font></b> We're planning to 
            roll out a number of FreeBSD servers in the near future, but all the 
            1U hardware we've ordered comes without a CD-ROM drive or a floppy 
            drive. In truth, the initial install is the only time such a device 
            would be needed, so we didn't bother with them. I know there 
            must be some way to install FreeBSD machines over the network completely 
            without a boot floppy or CD-ROM, but I was hoping for a push in the 
            right direction. Do you have suggestions or good links that detail 
            how to do custom install setups?
            <P> <b><font size="+2">A </font></b> Presuming your clients support 
              the Intel PXE netboot option and you have at least one machine with 
              a floppy or CD-ROM drive, you can use one machine as an install 
              server for the rest. Install FreeBSD from floppy/network or CD-ROM 
              on the machine that will act as a server. Then follow the instructions 
              from Alfred Perlstein's FreeBSD Jumpstart Guide at:
            <P> 
            <pre>
http://www.freebsd.org/doc/en_US.ISO8859-1/articles/pxe/article.html
</pre>
            to create a PXE boot server. Once you have a PXE server up and running, 
            you can create custom configurations for your servers.
            <P> As the Jumpstart Guide notes, the PXE boot server will be insecure 
              since it'll be running tftp and NFS with no restrictions. I 
              highly suggest putting your PXE server on its own air-gapped network 
              and then reconfiguring the newly built machines to go on your internal 
              LAN or in your DMZ. If you're going to put the PXE server on 
              a network that can access the Internet, heavily firewall it at the 
              very least. RPC, needed for NFS, is known for its insecurity.
            <P> <b><font size="+2">Q</font></b> I'm a consultant who works 
              from home most of the time, generally sshing into client machines 
              to do admin work. I've just started working with a new client 
              who is wary of the past OpenSSH holes and would prefer to use a 
              VPN instead. Of course they have no budget for this project, so 
              anything they install needs to be free or very cheap. They need 
              to support Linux, BSD, Solaris, OS X, and Windows clients, and their 
              server is a Linux Fedora machine. Do you have any suggestions for 
              software I might look at?
            <P> <b><font size="+2">A </font></b> Assuming your Windows users are 
              running 2000 or XP, you might want to consider OpenVPN:
            <P> 
            <pre>
http://openvpn.sourceforge.net/
</pre>
            Their VPN product is based on open source software and licensed under 
            the GPL. It's a user-space daemon (instead of a kernel module) 
            that uses OpenSSL to create cross-platform tunnels between machines 
            running Linux 2.2+, Solaris, OpenBSD 3.0+, OS X Darwin, FreeBSD, NetBSD, 
            and Windows 2000/XP.
            <P> If you want to use IPsec instead of SSL, you can opt to pay money 
              to one of the bigger players that have clients for each of your 
              platforms, or you can roll your own on each platform that you need 
              to support. Take a look at Tina Bird's IPsec RFCs and How-To 
              page for more information on using IPsec on various platforms:
            <P> 
            <pre>
http://vpn.shmoo.com/vpn/vpn-ipsec.html
</pre> <b><font size="+2">Q</font></b> I'm creating a Solaris 
            software package for some internal software. As part of the <B>preinstall</B>, 
            this package must remove a different piece of software (they are incompatible, 
            and the second package MUST be removed first). My <B>preinstall</B> 
            script, among other things, runs the script that tries to do the <B>pkgrm</B> 
            of the second software package. I tried just doing a <B>pkgrm</B> 
            alone, but that failed as follows:
            <P> 
            <pre>
The following package is currently installed:
   pkg2

Do you want to remove this package?
1 package not processed!

pkgadd: ERROR: preinstall script did not complete successfully
</pre>
            So I figured that it must want an answer to something during the <B>pkgrm</B>. 
            To get around this, I created a new admin file with the following 
            contents:
            <P> 
            <pre>
mail=
instance=unique
partial=nocheck
runlevel=nocheck
idepend=nocheck
rdepend=nocheck
space=nocheck
setuid=nocheck
conflict=nocheck
action=nocheck
basedir=default
</pre>
            Then I ran <B>pkgrm</B> from my script as:
            <P> 
            <pre>
pkgrm -n -a /tmp/default pkg2
</pre>
            Now instead of getting an error, I get an endless number of messages 
            saying the following when the <B>preinstall</B> script is executed:
            <P> 
            <pre>
NOTE: Waiting for pkgadd of pkg1 to complete.
</pre>
            How can I work around this?
            <P> <b><font size="+2">A </font></b> The problem you're encountering 
              is that the Solaris package database can only be open for writing 
              by one process at a time. Because you already have the database 
              open to write entries for the installation of <B>pkg1</B>, you can't 
              remove <B>pkg2</B> until <B>pkg1</B> has finished. If you had put 
              the <B>pkgrm</B> statement in the <B>preinstall</B> file itself 
              instead of calling it as an external script, you would have seen 
              the following error message when you tried to do a <B>pkgmk</B>:
            <P> 
            <pre>
ERROR: script &lt;preinstall&gt; attempts to modify locked package database \
at line &lt;the line where you called pkgrm&gt;.
</pre>
            Unfortunately, there is no good workaround except to write a wrapper 
            script to install <B>pkg1</B> that does the <B>pkgrm</B> of <B>pkg2</B> 
            first. Or, you could just tell people that they must remove <B>pkg2</B> 
            before starting the install of <B>pkg1</B>.
            <P> To remind people that they need to remove <B>pkg2</B> before installing 
              <B>pkg1</B>, you could use a <B>depend</B> file to indicate that 
              <B>pkg1</B> and <B>pkg2</B> are incompatible. Your <B>prototype</B> 
              file for <B>pkg1</B> would need to include the line:
            <P> 
            <pre>
i depend=depend
</pre>
            Then in that directory, create the file <B>depend</B> with the contents:
            <P> 
            <pre>
I pkg2
</pre>
            Rebuild your package, and when <B>pkg2</B> is installed and you attempt 
            to run <B>pkgadd</B> on <B>pkg1</B>, you'll get the output:
            <P> 
            <pre>
WARNING:
    A version of &lt;pkg2&gt; package "pkg2" (which is
    incompatible with the package that is being installed)
    is currently installed and must be removed.

Do you want to continue with the installation of &lt;pkg1&gt; [y,n,?]
</pre>
            As you see, though, you can still choose to continue with the <B>pkgadd</B> 
            even though you've marked <B>pkg1</B> as being incompatible with 
            <B>pkg2</B>.
            <P> <b><font size="+2">Q</font></b> I'm trying to lock down our 
              network at the border routers by blocking a number of things. I've 
              got a decent handle on what needs to be permitted with regard to 
              TCP and UDP, but I've seen varying suggestions for ICMP. Should 
              I block all ICMP both in and out, or should I try to let some things 
              through?
            <P> <b><font size="+2">A </font></b> People who block all ICMP traffic 
              often don't understand that they're interfering with path 
              MTU and debugging as well as protecting themselves against things 
              like smurf attacks. ICMP packets have a type and often a code, as 
              seen at:
            <P> 
            <pre>
http://www.iana.org/assignments/icmp-parameters
</pre>
            The type defines the ICMP message that's being passed, and the 
            code is an optional sub message. For example, a "Destination 
            Unreachable" (type 3) message might have a code of 7, "Destination 
            Host Unknown". The following ICMP types/codes should be allowed 
            to pass through your border routers at the very least:
            <P> 
            <pre>
NAME            TYPE  CODE  REASON
ICMP_ECHO       8     0     ping.
ICMP_ECHOREPLY  0     0     ping responses.
ICMP_UNREACH    3     4     needed by Path MTU to determine
                            optimal setting.
ICMP_TIMXCEED   11    0     used by traceroute, which also
                            requires high numbered UDP ports open.
                            also used to detect routing loops.
</pre>
            For more information about various ICMP types and codes, take a look 
            at:
            <P> 
            <pre>
http://www.networksorcery.com/enp/protocol/icmp.htm
</pre> <b><font size="+2">Q</font></b> I'm trying to debug 
            a startup script I wrote for a Solaris 9 machine, but I'm not 
            sure how to go about it. I don't want to have to redirect the 
            output on every single line since that would be a lot of work. Is 
            there a way to redirect all output from a script file? I tried using 
            <B>#!/sbin/sh -x</B>, but that doesn't appear to have worked.
            <P> <b><font size="+2">A </font></b> First, scripts in <B>/etc/rc*.d/</B> 
              are not executed; they're either sourced if the file name ends 
              with <B>.sh</B>, or passed to <B>/sbin/sh</B> for execution. Second, 
              your <B>#!/sbin/sh</B> line at the top is ignored. If you want to 
              turn on execution tracing, place the following line at the top of 
              your file:
            <P> 
            <pre>
set -x
</pre>
            As for redirecting the output, rc scripts log to the location defined 
            in <B>/etc/inittab</B>:
            <P> 
            <pre>
&gt;/dev/msglog 2&lt;&gt;/dev/msglog &lt;/dev/console
</pre>
            So you should be seeing error messages on the console. If you want 
            to redirect things to a file, call exec at the top of your script 
            to replace the running shell. This example will turn on execution 
            tracing and log STDERR and STDOUT to <B>/tmp/&lt;scriptname&gt;.log</B>:
            <P> 
            <pre>
exec &gt; /tmp/'/usr/bin/basename $0'.log 2&gt;&amp;1 &amp;&amp; set -x
</Pre> <I>Amy Rich, president of the Boston-based 
            Oceanwave Consulting, Inc. (<B>http://www.oceanwave.com</B>), has 
            been a UNIX systems administrator for more than 10 years. She received 
            a BSCS at Worcester Polytechnic Institute, and can be reached at: 
            <B>qna@oceanwave.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
