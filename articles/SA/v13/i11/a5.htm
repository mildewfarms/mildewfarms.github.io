<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i11: Strong Passwords with PAM</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/nov2004.tar"><b class=codeListing>nov2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a5.gif" width="200" height="173" align="right">Strong 
              Passwords with PAM</B></h1>
            <P> <I>Hal Pomeranz</i>
            <p> Standard Unix reusable passwords are not really a good authentication 
              system. However, the costs associated with migrating to an alternate 
              authentication system, such as two-factor token authentication or 
              smartcard-based systems, are too high for most enterprises. So sites 
              are generally left with the "lowest common denominator" 
              option provided by their vendors.
            <P> To improve the security of standard reusable passwords, "best 
              practices" tell us to require users to change their passwords 
              on a regular basis, enforce minimum lengths and good "rules" 
              for new passwords (e.g., requiring mixed case and non-alphanumeric 
              characters), and even keep a "history" of previous user 
              passwords so that users don't "repeat". Interestingly, 
              Unix systems have typically lagged behind other operating systems 
              in providing this functionality -- particularly when it comes 
              to rule-based systems for requiring strong passwords, as well as 
              functionality for keeping password history. In an effort to address 
              this shortcoming, the PAM module <B>pam_cracklib</B> was developed 
              for Linux systems.
            <P> I admit that for the longest time I thought <B>pam_cracklib</B> 
              was just about useless. But it turns out that it's not useless, 
              it's just really poorly documented. In an effort to correct 
              this problem, I present the following article based on my research 
              with the existing documentation, the <B>pam_cracklib</B> source 
              code (when in doubt, read the source), and my trusty Knoppix (Debian) 
              GNU/Linux system.
            <P> <B>Enabling pam_cracklib</B>
            <P> The <B>pam_cracklib</B> module is enabled via the system's 
              standard PAM configuration interface. On Debian systems, this is 
              the <B>/etc/pam.d/common-password</B> file (but it's <B>/etc/pam.d/system-auth</B> 
              on Red Hat-derived systems -- can't we all just get along?). 
              The typical configuration looks something like this:
            <P> 
            <pre>
password required pam_cracklib.so retry=3 minlen=6 diffok=3
password required pam_unix.so     md5 use_authtok
</pre>
            The first line enables the <B>pam_cracklib</B> module and sets several 
            module parameters. "<B>retry=3</B>" means that users get 
            three chances to pick a good password before the <B>passwd</B> program 
            aborts. Users can always re-run the passwd program and start over 
            again, however. "<B>minlen=6</B>" sets the minimum number 
            of characters in the password. Actually, since Linux systems generally 
            use MD5 password hashes, which are not limited to eight-character 
            passwords like the old DES56 hashes, you should probably think about 
            increasing the "<B>minlen</B>" parameter to something longer. 
            I'll come back to this notion a bit later in the article. "<B>diffok=3</B>" 
            sets the minimum number of characters that must be different from 
            the previous password. If you increase "<B>minlen</B>", 
            you may also want to increase this value as well.
            <P> The second line invokes the standard <B>pam_unix</B> module. The 
              "<B>md5</B>" argument here enables standard Linux MD5 
              password hashes, although you have the option of using old-style 
              DES56 hashes for backward compatibility with legacy Unix systems. 
              "<B>use_authtok</B>" tells <B>pam_unix</B> not to bother 
              doing its own internal password checks, which duplicate many of 
              the checks in <B>pam_cracklib</B>, but instead to accept the password 
              that the user inputs after it has been thoroughly checked by <B>pam_cracklib</B>.
            <P> <B>Simple Checks</B>
            <P> By default, <B>pam_cracklib</B> performs a number of basic checks 
              on the new password:
            <P> 
            <ul>
              <li> Is the new password just the old password with the letters 
                reversed ("password" vs. "drowssap") or rotated 
                ("password" vs. "asswordp")? 
              <li> Does the new password only differ from the old one due to change 
                of case ("password" vs. "Password")? 
              <li> Are at least some minimum number of characters in the new password 
                not present in the old password? This is where the "<B>diffok</B>" 
                parameter comes into play.
            </ul>
            <P> 
            <P> These are the same checks you get in the <B>pam_unix</B> module 
              if you turn on the "<B>obscure</B>" flag, but because 
              we're already using <B>pam_cracklib</B> we don't need 
              to do this.
            <P> <B>Length and Strength</B>
            <P> Although the "<B>minlen</B>" parameter controls the 
              minimum password length, things are not as simple as they might 
              appear. This is because <B>pam_cracklib</B> combines the notion 
              of password length with password "strength" (the use of 
              mixed-case and non-letter characters).
            <P> "<B>minlen</B>" is actually the minimum required length 
              for a password consisting of all lowercase letters. But users get 
              "length credits" for using upper- and lowercase letters, 
              numbers, and non-alphanumeric characters. The default is normally 
              that you can only get a maximum of "1 credit" for each 
              type of character. So if the administrator sets "minlen=12", 
              a user could still have an eight-character password if they used 
              all four types of characters. Actually, since using a lowercase 
              letter gets you a credit, the real minimum length for an all lowercase 
              passwords is <B>minlen-1</B>.
            <P> The maximum credit for any particular class of characters is actually 
              customizable. The four parameters "<B>lcredit</B>", "<B>ucredit</B>", 
              "<B>dcredit</B>", and "<B>ocredit</B>" are used 
              to set the maximum credit for lowercase, uppercase, numeric (digit), 
              and non-alphanumeric (other) characters, respectively. For example, 
              you could add the following parameters on the <B>pam_cracklib</B> 
              line in the <B>/etc/pam.d/common-password</B> file:
            <P> 
            <pre>
lcredit=0 ucredit=1 dcredit=1 ocredit=2
</pre>
            In other words, lowercase characters aren't special at all, so 
            we give no credit there. But, we do give extra credit if a user puts 
            two or more non-alphanumeric characters in their password. One point 
            is still the max credit for uppercase characters and numbers. Note 
            that no matter what you set "<B>minlen</B>" to and no matter 
            how many "credits" you give to your users, <B>pam_cracklib</B> 
            will never let users pick passwords with fewer than six characters 
            -- this is a hard-coded internal minimum.
            <P> Play around with these values and find something that makes sense 
              for your site; as a starting point, I might recommend "<B>minlen=12 
              diffok=4</B>" for machines using MD5 password hashes. This 
              means that the smallest password a user could have is eight characters, 
              and that's only if they use all four character sets.
            <P> <B>Dictionary Checks</B>
            <P><B> pam_cracklib</b> also checks the user's password against 
              its own internal dictionaries of easily guessed passwords. On Debian 
              systems, <B>pam_cracklib</B>'s dictionaries live in <B>/var/cache/cracklib</B> 
              and are rebuilt nightly by the <B>/usr/sbin/update-cracklib</B> 
              script. Other Linux distros may have other mechanisms for updating 
              the dictionaries (as far as I can tell, Red Hat doesn't provide 
              any tools for doing this).
            <P> The <B>update-cracklib</B> script searches a number of directories 
              for input files, including <B>/usr/local/dict</B> and <B>/usr/local/share/dict</B>. 
              So, adding your own words is as easy as putting them in a file in 
              one of these directories and running <B>update-cracklib</B> or waiting 
              for <B>cron</B> to do it for you. Note that if you want to add other 
              directories to <B>update-cracklib</B>'s search path, you can 
              do this by modifying the <B>/etc/cracklib/cracklib.conf</B> file 
              (at least on Debian systems).
            <P> <B>Password "History"</B>
            <P><B> pam_cracklib</b> is capable of consulting a user's password 
              "history" and not allowing them to re-use old passwords. 
              However, the functionality for actually storing the user's 
              old passwords is enabled via the <B>pam_unix</B> module.
            <P> The first step is to make sure to create an empty <B>/etc/security/opasswd</B> 
              file for storing old user passwords. If you forget to do this before 
              enabling the history feature in the PAM configuration file, all 
              user password updates will fail because the <B>pam_unix</B> module 
              will constantly return errors from the password history code because 
              the file is missing.
            <P> Treat your <B>opasswd</B> file like your <B>/etc/shadow</B> file 
              because it will end up containing user password hashes (albeit for 
              old user passwords that are no longer in use):
            <P> 
            <pre>
touch /etc/security/opasswd
chown root:root /etc/security/opasswd
chmod 600 /etc/security/opasswd
</pre>
            Once you've set up the <B>opasswd</B> file, enable password history 
            checking by adding the option "<B>remember=&lt;x&gt;</B>" 
            to the <B>pam_unix</B> configuration line in the <B>/etc/pam.d/common-password</B> 
            file. Here's how I set up things on my Knoppix machine:
            <P> 
            <pre>
password required pam_cracklib.so  retry=3 minlen=12 diffok=4
password required pam_unix.so      md5 remember=12 use_authtok
</pre>
            The value of the "<B>remember</B>" parameter is the number 
            of old passwords you want to store for a user. It turns out that there's 
            an internal maximum of 400 previous passwords, so values higher than 
            400 are all equivalent to 400. Before you complain about this limit, 
            consider that even if your site forces users to change passwords every 
            30 days, 400 previous passwords represents more than 30 years of password 
            history. This is probably sufficient for even the oldest of legacy 
            systems.
            <P> Once you've enabled password history, the <B>opasswd</B> 
              file starts filling up with user entries that look like this:
            <P> 
            <pre>
hal:1000:&lt;n&gt;:&lt;hash1&gt;,&lt;hash2&gt;,...,&lt;hashn&gt;
</pre>
            The first two fields are the username and user ID. The <B>&lt;n&gt;</B> 
            in the third field represents the number of old passwords currently 
            being stored for the user -- this value is incremented by one 
            every time a new hash is added to the user's password history 
            until <B>&lt;n&gt;</B> ultimately equals the value of the "<B>remember</B>" 
            parameter set on the <B>pam_unix</B> configuration line. <B>&lt;hash1&gt;,&lt;hash2&gt;,...,&lt;hashn&gt;</B> 
            are actually the MD5 password hashes for the user's old passwords.
            <P> <B>Password Expiration</B>
            <P> At this point, you may be wondering how to get the system to automatically 
              force a user to change his password after some period of time. This 
              is not actually the job of <B>pam_cracklib</B>. Instead, these parameters 
              are set in the <B>/etc/login.defs</B> file on most Linux systems. 
              <B>PASS_MAX_DAYS</B> is how often users have to change their passwords. 
              <B>PASS_MIN_DAYS</B> is how long a user is forced to live with his 
              new password before he's allowed to change it again. <B>PASS_WARN_AGE</B> 
              is the number of days before the password expiration date that the 
              user is warned that his password is about to expire. The choice 
              of values for these parameters is entirely dependent on site policy.
            <P> Note that these parameters are only applied to new accounts created 
              with the default system <B>useradd</B> program. If you use some 
              other mechanism for creating accounts on the system, then you'll 
              have to use the <B>chage</B> command (this is not a typo) to manually 
              set these parameters on your user accounts. And, if you use a naming 
              service, such as LDAP or NIS, for account management, then you're 
              completely on your own.
            <P> By the way, if you've ever wondered what all those extra 
              fields in the <B>/etc/shadow</B> file were for, the answer is that 
              they store the password expiration/aging information for the user.
            <P> <B>Conclusion</B>
            <P> I hope I've shed a little light on some of the more mysterious 
              corners of <B>pam_cracklib</B>'s functionality and the Linux 
              password system in general. If <B>pam_cracklib</B> appears limited 
              compared to the password enforcement routines on your particular 
              operating system variant, consider that some Unix-like operating 
              systems (such as Solaris -- at least through Solaris 9) don't 
              have any functionality of this type, other than the standard password 
              expiration/aging routines.
            <P> <I>Hal Pomeranz (<B>hal@deer-run.com</B>) realizes that the wonderful 
              thing about Linux is that you can always refer back to the source 
              code, but would prefer to read a Unix manual page whenever possible.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
