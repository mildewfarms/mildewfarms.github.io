<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i11: Checking Email with PHP</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/nov2004.tar"><b class=codeListing>nov2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a10.gif" width="200" height="167" align="right">Checking 
              Email with PHP</B></h1>
            <P> <I>Russell J.T. Dyer</i>
            <p> As a consultant I'm often away from my office and will miss 
              email from clients. With Web access to my email server, I can read 
              and send mail; however, I don't have time to keep checking 
              email when I'm working. Instead, I've written a program 
              in PHP that checks email for me. I have <B>cron</B> run it every 
              15 minutes. If there's a message, PHP sends a text message 
              to my cellular telephone letting me know. In this article, I will 
              review this PHP script as a learning opportunity.
            <P> <B>Mail Log in MySQL</b>
            <P> To keep track of client email addresses and to prevent PHP from 
              notifying me more than once for a message, I set up a couple of 
              tables in MySQL. The first table contains client names and email 
              addresses. From the <B>mysql</B> client program, I entered the following:
            <P> 
            <pre>
   CREATE DATABASE mail_log;

   USE mail_log;

   CREATE TABLE email_addresses
   (address_id INT AUTO_INCREMENT PRIMARY KEY,
   email_address CHAR(100) UNIQUE, name CHAR(100));
</pre>
            The first two lines create the database <B>mail_log</B> in MySQL and 
            switches the session to it. It's not necessary to create a separate 
            database, though. You could use an existing one instead. The next 
            set of lines creates the table containing client information. The 
            first column is an automatically incremented key field that will be 
            referenced in queries along with the next table, which will contain 
            a log of email. The second column will hold email addresses. Notice 
            that I've required data in this column to be unique; duplicates 
            are not allowed. The last column will hold the client's name. 
            I've set all of these columns to fixed-width columns (no <B>VARCHAR</B> 
            columns) so that the rows will be fixed. This will help speed up queries 
            (not that it matters very much for a script run by <B>cron</B>, but 
            it's a good habit to maintain). I could create a PHP script to 
            enter data in this table through a Web interface, but to keep this 
            article focused, I'll manually enter the email addresses of my 
            few clients like so:
            <P> 
            <pre>
   INSERT INTO email_addresses
   (email_address, name)
   VALUES('russell@dyerhouse.com', 'Russell Dyer');
</pre>
            With the email address table in place, look at the table for logging 
            in email:
            <P> 
            <pre>
   CREATE TABLE log
   (log_id INT AUTO_INCREMENT PRIMARY KEY,
   address_id INT NOT NULL, notified ENUM('y','n'),
   log_date DATETIME, subject CHAR(100),
   message CHAR(100),
   UNIQUE(address_id, log_date));
</pre>
            In this SQL statement, I'm creating the table <B>log</B> with 
            another automatically incremented record identifier (i.e., <B>log_id</B>). 
            This will be useful when updating rows later. The next column will 
            contain the <B>address_id</B> number from the <B>email_addresses</B> 
            table. To keep track of whether PHP has already notified me about 
            an email message, I set up the column <B>notified</B>. I've enumerated 
            the only possible answers to optimize queries.
            <P> Next is a column to record the date of each email message, followed 
              by the subject and the first 100 characters of the message. On my 
              cellular telephone, text messages are limited to only 100 characters. 
              I end the SQL statement above with instructions for MySQL to create 
              an index of both <B>address_id</B> and <B>log_date</B>. This will 
              not only speed up queries, but it will also prevent a message from 
              being recorded twice. If PHP attempts to insert data into <B>log</B> 
              for an email address in which there already exists a related record 
              with the exact same date and time, then the query will be rejected. 
              That's all of the tables that are needed in MySQL. The next 
              section introduces the PHP script that will check for mail sitting 
              on the server.
            <P> <B>Logging Mail with PHP</B>
            <P> There are some nice functions for PHP that make examining a POP3 
              mailbox pretty easy. However, on my server, which runs with Red 
              Hat Linux, I had to download an rpm to add the functions that I 
              needed:
            <P> 
            <pre>
php-imap-xxxx-i386.rpm
</pre>
            With the <B>imap</B> functions in PHP, it can check the mail waiting 
            for me on my email server.
            <P> 
            <pre>
#!/usr/bin/php -q

&lt;?php
$mail_svr = 'mail.dyerhouse.com';
$to = 'russ_cell@dyerhouse.com';
$mail_box =
imap_open("{$mail_svr:110/pop3/notls}INBOX",'russell','password');

$headers = imap_headers($mail_box);
$msg_count = count($headers);
</pre>
            The first two lines start the PHP script. Next, PHP sets up two variables: 
            one contains the address of the mail server, the other contains the 
            email address of my cell phone. If my email server were on the same 
            server, <B>mail.dyerhouse.com</B> could be replaced with <B>localhost</B>. 
            The email address is an alias that I entered in <B>/etc/aliases</B>, 
            which translates to the lengthy numeric address for my cellular telephone.
            <P> On the next line of code, I'm using the <B>imap_open()</B> 
              function to open my inbox. Because I'm using POP3, I list port 
              110 and the notation about <B>pop3</B>. For IMAP servers, use port 
              143 and just leave off the forward-slash along with the <B>pop3</B>. 
              The notation about <B>notls</B> is necessary because I'm using 
              Red Hat Linux, but may not be required for your server. With a connection 
              to the mailbox established, the next line retrieves an array of 
              email headers using the <B>imap_headers()</B> function so that the 
              number of messages may be determined. This will be useful in a <B>for</B> 
              statement that is to follow in which PHP will loop through all of 
              the messages. Before doing that, though, PHP needs to get a list 
              of client email addresses from MySQL:
            <P> 
            <pre>
$link = mysql_connect('localhost', 'russell', 'password')
        or die("Couldn't connect to MySQL" . mysql_error() . "\n");
mysql_select_db('mail_log', $link);

$sql_stmnt = "SELECT address_id, email_address  
              FROM email_addresses";

$results = mysql_query($sql_stmnt)
           or die("Couldn't query server" . mysql_error() . "\n");

while ($row = mysql_fetch_assoc($results)){
   $addresses[$row['email_address']] = $row['address_id'];
}
</pre>
            After connecting to the MySQL server, PHP switches the session to 
            the database <B>mail_log</B> using the <B>mysql_select_db()</B> function. 
            Using the function <B>mysql_query()</B>, PHP queries the database 
            with the SQL statement contained in <B>$sql_stmnt</B> to select client 
            identifiers and their email addresses. Utilizing a <B>while</B> statement 
            and the <B>mysql_fetch_assoc()</B> function, PHP loops through each 
            row found in the <B>email_addresses</B> table, per the SQL statement. 
            With each pass through the <B>while</B> statement, the results from 
            each row is added to an associative array (<B>$addresses[]</B>) that 
            will be referred to later when PHP looks through each email message. 
            The syntax to extract an element using <B>mysql_fetch_assoc()</B> 
            is to simply give the field name as the key, as shown above.
            <P> 
            <pre>
for ($c = 1; $c &lt;= $msg_count; $c++) {
   $headerinfo = imap_headerinfo($mail, $c);
   $unixtime = $headerinfo-&gt;udate;
   $sender_username = $headerinfo-&gt;from[0]-&gt;mailbox;
   $sender_host = $headerinfo-&gt;from[0]-&gt;host;
   $sender_address = "$sender_username@$sender_host";
   $subject = $headerinfo-&gt;subject;
   $message = substr(imap_body($mail, $c), 0, 100);
</pre>
            In the first line here, the <B>for</B> statement mentioned previously 
            is started. Before discussing its components, notice that the closing 
            curly-brace that would end this statement does not appear above. It 
            shows up later in the script. At the start of the <B>for</B> statement, 
            PHP sets a counter (<B>$c</B>) to keep track of which email message 
            is being processed (1 is first). The <B>for</B> statement will last 
            as long as the count does not exceed the number of messages determined 
            earlier (<B>$msg_count</B>).
            <P> The first set of lines in the statement block use the <B>imap_headerinfo()</B> 
              function to retrieve various bits of data (e.g., sender, time, and 
              subject) from the mailbox. The function returns an object and therefore 
              requires the syntax that you see here to extract the values of each 
              attribute of the object. Notice that the email address comes in 
              pieces: the user's name is separated from the domain name. 
              As a result, PHP has to join them.
            <P> In the last line above, PHP uses the function <B>imap_body()</B> 
              to get the body of the message. Using the <B>substr()</B> function, 
              PHP saves only the first 100 characters. Incidentally, if you're 
              not the only person who has access to your MySQL server, you might 
              not want to save even part of your messages. At a minimum, I have 
              PHP delete the message from MySQL after emailing it to my cellular 
              telephone.
            <P> Now that PHP has the salient bits of information from the message, 
              it needs to check the email address against the associative array 
              set up previously, which contains the client addresses. This is 
              done with an <B>if</B> statement as follows:
            <P> 
            <pre>
   if($address_id = $addresses["$sender_address"]) {
      $sql_stmnt = "INSERT IGNORE INTO log
                    (address_id, notified, log_date,
                     subject, message)
                    VALUES('$address_id', 'n',
                    FROM_UNIXTIME($unixtime),
                    '$subject', '$message')";
      mysql_query($sql_stmnt);
   }
}
imap_close($mail);
</pre>
            The condition of the <B>if</B> statement here attempts to extract 
            the <B>address_id</B> from the associative array <B>$addresses[]</B> 
            based on the sender's email address. If it's successful, 
            if the email message being examined is from an email address found 
            in the <B>email_addresses</B> table, then it attempts to make an entry 
            in the <B>log</B> table. The flag <B>IGNORE</B> is added so that MySQL 
            will ignore any error messages that will be generated by attempting 
            to insert data that's not unique (i.e., with the same <B>address_id</B> 
            and <B>log_date</B>).
            <P> Using the <B>FROM_UNIXTIME()</B> function, MySQL converts the 
              Unix time to the <B>datetime</B> column type. The next line of code 
              invokes the SQL statement and the second closing curly-brace ends 
              the <B>for</B> statement started earlier. This allows PHP to close 
              the connection to the mailbox with the <B>imap_close()</B> function.
            <P> Now that the log has been updated for the new messages, PHP needs 
              to figure out which ones to notify me about:
            <P> 
            <pre>
$sql_stmnt = "SELECT log_id, name, subject, message,
              DATE_FORMAT(log_date, '%b %d') AS date
              FROM log, email_addresses
              WHERE log.address_id = email_addresses.address_id
              AND notified = 'n'";

$results = mysql_query($sql_stmnt);

while($row = mysql_fetch_assoc($results)) {
   $log_id = $row["log_id"];
   $name = $row["name"];
   $subject = $row["subject"];
   $message = $row["message"];
   $date = $row["date"];

   $sql_stmnt = "UPDATE log
                 SET notified = 'y', message = ''
                 WHERE log_id = '$log_id'";
   mysql_query($sql_stmnt);

   mail($to, $subject, "$name ($date)\n$message");
}

mysql_close();
?&gt;
</pre>
            Looking at the SQL statement above, MySQL retrieves the data needed 
            to construct an email message to send my cellular telephone. It will 
            only select rows where the column <B>notified</B> is equal to <B>'n'</B>, 
            indicating that I have not been notified yet. Using the built-in MySQL 
            function <B>DATE_FORMAT()</B>, MySQL gives me a shorter, simpler date 
            entry (e.g., "Oct 15"). The <B>while</B> statement that 
            follows uses the <B>mysql_fetch_assoc()</B> function to extract fields 
            from the results set and to place the values in the appropriate variables.
            <P> With each pass through the <B>while</B> statement, MySQL is updating 
              the table <B>log</B> to set the <B>notified</B> column to <B>'y'</B>, 
              indicating that I've been notified. MySQL also erases the contents 
              of the <B>message</B> column to maintain some privacy. The message 
              is only needed for the duration of this script. There is the possibility 
              that the email might not be sent successfully and PHP won't 
              know to retry. However, transaction safety is not all that important 
              for the use made of this script.
            <P> In the third from the last line of code above, PHP uses the <B>mail()</B> 
              function to send an email informing me that I have a message from 
              a client or friend waiting. The message is sent to the address contained 
              in the variable <B>$to</B>, which was set up in the beginning of 
              the script. The subject from the original email is used for this 
              notice, as well. For the third argument of the <B>mail()</B> function, 
              PHP will put together the sender's name and the date of the 
              message on one line. Using <B>\n</B>, a line-break is added before 
              the message. With each loop through the <B>while</B> statement, 
              for each new client message, PHP will send me a text message. I 
              could combine multiple message notices into one, but I only have 
              100 characters and I want to conserve the space by doing separate 
              messages.
            <P> The closing curly-brace above ends the <B>while</B> statement. 
              Since the script is ending, the connection to MySQL is closed using 
              the <B>mysql_close()</B> function.
            <P> <B>Final Thoughts</B>
            <P> I think this script is very handy. It allows me to stay focused 
              on my work and still be responsive to client emails. If you set 
              up a script like this on your server, you may want to configure 
              <B>cron</B> to run it more often, maybe every five minutes. Don't 
              schedule it to run too frequently or it may sometimes notify you 
              of messages even when you're at your desk with your email client 
              program running. Incidentally, you will circumvent the script if 
              you leave your email client running while you're away from 
              your office. Finally, for tidiness, you may want to write a short 
              script that <B>cron</B> runs once a week to delete rows in the <B>log</B> 
              table from the previous week.
            <P> <I>Russell Dyer is a Perl programmer, a MySQL developer, and a 
              Web designer living and working on a consulting basis in New Orleans. 
              He can be reached at: <B>russell@dyerhouse.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
