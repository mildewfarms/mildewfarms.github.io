<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i07: Listing 1 The configurator</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a3.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><span class="navbarLink"><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><a href="../../../../source/SA/2004/jul2004.tar"><b class=codeListing>jul2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>The configurator</I></h2>
            <p> 
            <pre>
#!/usr/bin/perl -w

# SAN To MRTG Configurator
# Mike Scott    : mike@hindsight.it
# Version        : 1.0
# Date        : Feb 2003

######
# WARNING - THIS DATASTRUCTURE IS CASE SENSITIVE
# Make sure that hostnames match exactly...
######
%configuration= (
"sitea" =&gt; {
    "switcha1" =&gt; {
#            PORT =&gt; [HOSTNAME,      HBA NAME    ]
            "01" =&gt; ["hosta1",    "fcaw0"    ],
            "04" =&gt; ["hosta2",    "fcaw0"    ],
            "07" =&gt; ["symma",    "FA-2"    ]
    },
    "switcha2" =&gt; {
            "01" =&gt; ["hosta1",    "fcaw1"    ],
            "12" =&gt; ["hosta2",    "fcaw1"    ],
            "07" =&gt; ["symma",    "FA-1"    ],
            "15" =&gt; ["switchb1",    "port15"    ]
    }
},
"siteb" =&gt; {
    "switchb1" =&gt; {
            "01" =&gt; ["hostb1",    "fcaw0"    ],
            "09" =&gt; ["hostb2",    "fcaw0"    ],
            "03" =&gt; ["symmb",    "FA-1"    ],
            "15" =&gt; ["switcha1",    "port15"    ]
    },
    "switchb2" =&gt; {
            "06" =&gt; ["hostb1",    "fcaw1"    ],
            "09" =&gt; ["hostb2",    "fcaw1"    ],
            "03" =&gt; ["symmb",    "FA-2"    ]
    }
}
);

# Some globals...
$MRTGDIR="/export/data/MRTG";
# MRTG html directory
$HTMLDIR="$MRTGDIR/html";
# MRTG config directory
$CFGDIR="$MRTGDIR/cfg";
# MRTG log directory
$LOGDIR="$MRTGDIR/logs";



#########################
# Routine to generate the MRTG configuration per port
sub brocade_port ($$) {
    # These two values are the OIDs from the Brocade MIB that specify 
    # swFCPortTxWords and swFCPortRxWords. They represent the number
    # of 4 byte Fibrechannel words seen passing through any given port
    # (whose port number is appended to the end of the OID)
    my $OID_INPUT="1.3.6.1.4.1.1588.2.1.1.1.6.2.1.11.";
    my $OID_OUTPUT="1.3.6.1.4.1.1588.2.1.1.1.6.2.1.12.";
    my ($port,$switch)=@_;

    # Physical port 0 is referred to as port 1 in the
    # SNMP information
    $port++;


    # Multiply the SNMP values (swFCPortTxWords/swFCPortRxWords) by 4 to 
    # get the number of bytes.

    # Also notice, the ::1 - we are using SNMPv1 - I noticed that the
    # Brocade 2800 appears to support v2, but our 12000 does not.
    return "( ${OID_INPUT}${port}\&amp;${OID_OUTPUT}${port}:public\@${switch}:::::1 * 4 )"
}

#########################
# A quick and easy routine to check if a directory exists, if not
# then create it.
sub checkAndMkdir ($) {
    my ($dir)=@_;

    if ( ! -d $dir )  {
        print "Warning: Creating directory $dir\n";
        mkdir($dir,0755) || die "Error: Could not create $dir\n";
    }
}




#########################
# Main Program

&amp;checkAndMkdir("$CFGDIR");
&amp;checkAndMkdir("$HTMLDIR");
&amp;checkAndMkdir("$HTMLDIR/group");
&amp;checkAndMkdir("$LOGDIR");
&amp;checkAndMkdir("$LOGDIR/group");



# Loop once per group (which is a general term for "site" in our context)
foreach $group (keys %configuration) {

    # Clear the %hosts cache 
    my %hosts = ();
    print "Generating $group.cfg file...\n";

    # take a copy of the group configuration 
    # Not particularly efficient, but it makes referencing the complex
    # data structure easier...
    my %conf=%{$configuration{$group}};

    # First we need to invert the config, so we are 
    # looking at it from a host-centric view, rather than
    # the switch-centric view...
    foreach $switch (keys %conf) {

        # Loop once per defined switch port
        foreach $port (sort keys %{$conf{$switch}}) {

            # Get the hostname and HBA from the config
            ($hostname,$interface)=@{$conf{$switch}-&gt;{$port}};

            # Generate a hash of hosts in the SAN
            # each hash element is a list of switches and ports
            # that the machines' HBAs are connected to
            push(@{$hosts{$hostname}},"$switch:$port");
        }
    }

    # Create the HTML and log directories, if they don't already exist
    &amp;checkAndMkdir("$HTMLDIR/group/$group");
    &amp;checkAndMkdir("$HTMLDIR/group/$group/img");
    &amp;checkAndMkdir("$LOGDIR/group/$group");

    # Each group has its' own MRTG config file to be processed separately
    open(CFG,"&gt;$CFGDIR/$group.cfg") || die "ERROR: Cannot open \
      $CFGDIR/$group.cfg\n";
    print CFG "HtmlDir:  $HTMLDIR/group/$group/\n";
    print CFG "ImageDir: $HTMLDIR/group/$group/img\n";
    print CFG "LogDir:   $LOGDIR/group/$group/\n";
    # If a global config file exists, then include it into the 
    # generated config
    if ( -f "$CFGDIR/global.inc" ) {
        print CFG "Include:  $CFGDIR/global.inc\n";
    }

    # Generate the MRTG config for each host in the SAN
    foreach $hostname (sort keys %hosts) {
        @host_aggregate=();
        @host_hbalist=();

        # Generate the config for each HBA port
        foreach $hba (@{$hosts{$hostname}}) {
            ($switch,$port)=split(/:/,$hba,2);

            # Get the HBA interface name
            (undef,$interface)=@{$conf{$switch}-&gt;{$port}};

            # Generate the simple configuration for the HBA
            print CFG "Target[${switch}_port${port}]: \
              ".&amp;brocade_port($port,$switch)."\n";
            print CFG "Title[${switch}_port${port}]: Throughput for \
              $switch:$port ($hostname:$interface)\n";
            print CFG "PageTop[${switch}_port${port}]: &lt;H1&gt;Throughput \
              for $switch:$port ($hostname:$interface)&lt;/H1&gt;\n";

            # Store the MRTG config for this HBA - this will be used
            # Once the loop is finished to generate the aggregate config
            push(@host_aggregate,&amp;brocade_port($port,$switch));
            push(@host_hbalist,"&lt;a href=${switch}_port${port}.html&gt; \
              &lt;img src=img/${switch}_port${port}-day.png height=100 \
              width=320 alt=\"${switch}:${port} to ${hostname}: \
              ${interface}\"&gt;&lt;br&gt;&lt;center&gt;${switch}:${port} to \
              ${hostname}:${interface}&lt;/center&gt;&lt;/a&gt;"); 
        }

        # Take all the HBA config cached in @host_aggregate and add them 
        # together 
        print CFG "Target[$hostname]: ".join("+",@host_aggregate)."\n";
        print CFG "Title[$hostname]: Aggregate Throughput for $hostname\n";
        print CFG "PageTop[$hostname]: &lt;H1&gt;Aggregate Throughput for \
          $hostname&lt;/H1&gt;\n";
        print CFG "PageFoot[$hostname]: &lt;hr&gt;&lt;table&gt;";

        # A nice pretty table at the foot of the aggregate page to
        # Contain thumbnails and links to the individual HBA graphs,
        # Which we stored in @host_hbalist
        my $count=0;
        my $GRIDWIDTH=2;
        foreach (@host_hbalist) {
            if ($count%$GRIDWIDTH==0) {
                print CFG "&lt;tr&gt;";
            }

            print CFG "&lt;td&gt;$_&lt;/td&gt;";
    
            if ($count % $GRIDWIDTH==($GRIDWIDTH-1)) {
                print CFG "&lt;/tr&gt;";
            }
            $count++;
        }

        while ($count % $GRIDWIDTH gt 0) {
            print CFG "&lt;td&gt;&amp;nbsp;&lt;/td&gt;";
            $count++;
        }

        print CFG "&lt;/tr&gt;&lt;/table&gt;\n";

    }
    close(CFG);
}</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
