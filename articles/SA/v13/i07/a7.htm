<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i07: Lightweight Persistent Data</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/jul2004.tar"><b class=codeListing>jul2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="../../resource/perl.gif" width="150" height="150" align="right">Lightweight 
              Persistent Data</b></h1>
            <p> <I>Randal L. Schwartz</i>
            <p> Frequently, you have data with a strong will to live. That is, 
              your data must persist between invocations of your program and occasionally 
              even be shared between simultaneous invocations.
            <P> At the high end of this demand, we have entire companies devoted 
              to creating high-performance, multi-user, SQL-interfaced databases. 
              These databases are usually accessed from Perl via the <B>DBI</B> 
              package, or by some wrapper slightly above <B>DBI</B>, such as <B>Class::DBI</B> 
              or <B>DBIx::SQLEngine</B>. The details of SQL might even be entirely 
              hidden away using a higher level package like <B>Tangram</B> or 
              <B>Alzabo</B>.
            <P> But further down the scale, there are some new solutions popping 
              onto the scene, which invite further observation, as well as some 
              old classic solutions. For example, since Perl version 2 we've been 
              able to put a hash out on disk with <B>dbmopen</B>:
            <P> 
            <pre>
dbmopen(%HASH, "/path/on/disk", 0644) || die;
$HASH{"key"} = "value";
dbmclose(%HASH);
</pre>
            The effect of such code is that we now have a key/value pair stored 
            in an external structured file. We can later come along and reopen 
            the database as a hash again, and treat it as if it were a hash with 
            preexisting values:
            <P> 
            <pre>
dbmopen(%HASH, "/path/on/disk", 0644) || die;
foreach $key (sort keys %HASH) {
  print "$key =&gt; $HASH{$key}\n";
}
dbmclose(%HASH);
</pre>
            While the interface was relatively simple, I wrote quite a few programs 
            before Perl5 came around using this storage mechanism for my persistence. 
            However, this storage suffered some limitations: the keys and values 
            had to be under a given size, access to the structure could not handle 
            multi-user reads and writes, and the resulting data files were not 
            necessarily portable to other machines (because they used incompatible 
            libraries or byte orders).
            <P> When Perl5 came long, new problems arose. No longer were we limited 
              to just arrays and hashes, but we could now have complex data types 
              with arbitrary structure. Luckily, the mechanism "behind" the <B>dbmopen</B> 
              was made available directly at the Perl code level, through the 
              <B>tie</B> operator, described in the <B>perltie</B> manpage. This 
              let others besides Larry Wall create "magical" hashes that could 
              perform actions on every fetch and store.
            <P> One early use of the <B>tie</B> mechanism was the <B>MLDBM</B> 
              package, which could take a complex value to be assigned for a given 
              key, and <I>serialize</I> it to a single string value, which could 
              then be stored much like before. For example:
            <P> 
            <pre>
use MLDBM;
tie my %hash, 'MLDBM' or die;
$hash{my_array} = [1..5];
$hash{my_scores} = { fred =&gt; 205, barney =&gt; 195, dino =&gt; 30 };
</pre>
            As each complex data structure was stored into the hash, it was converted 
            into a string, using <B>Data::Dumper</B>, <B>FreezeThaw</B>, or <B>Storable</B>. 
            If a value were fetched, it would be converted back from a string 
            to the complex data structure. However, the resulting value was no 
            longer related to the tied hash. For example:
            <P> 
            <pre>
my $scores = $hash{my_scores};
$scores-&gt;{fred} = 215;
</pre>
            would no longer affect the stored data. Instead, we got warnings on 
            the <B>MLDBM</B> manpage to "not do this". Also, we still had all 
            the limitations of a standard <B>dbmopen</B>-style database: size 
            limits, multi-user access, and non-portability.
            <P> One solution that I used on more than one occasion was to take 
              over the serialization myself, and to use <B>Storable</B>'s <B>retrieve</B> 
              and <B>nstore</B> operations directly. My code would look something 
              like:
            <P> 
            <pre>
use Storable qw(nstore retrieve);
my $data = retrieve('file');
... perform operations with $data ...
nstore $data, 'file';
</pre>
            Now my <B>$data</B> value could be an arbitrarily complex data structure, 
            and any changes I made would be completely reflected in the updated 
            file. The result was that I simply had a Perl data strucure that persisted.
            <P> It appears that the author of <B>Tie::Persistent</B> had the same 
              idea to use <B>Storable</B> on the entire top-level structure as 
              well, except with a <B>tie</B> wrapper instead of explicit fetch-store 
              phases, although I can't vouch for the code. In fact, I see a number 
              of CPAN entries that all seemed to find similar mechanisms, but 
              none of them seemed to have found the "holy grail" of object persistence, 
              making it as absolutely transparent as possible in a nice portable 
              (and hopefully multi-user) manner.
            <P> That is, until I noticed <B>DBM::Deep</B>. According to the Changelog, 
              this distribution has been around for about two years (as I write 
              this), but only on the CPAN for a few months. From its own description:
            <P> A unique flat-file database module, written in pure perl. True 
              multi-level hash/array support (unlike MLDBM, which is faked), hybrid 
              OO / tie() interface, cross-platform FTPable files, and quite fast. 
              Can handle millions of keys and unlimited hash levels without significant 
              slow-down. Written from the ground-up in pure perl -- this is NOT 
              a wrapper around a C-based DBM. Out-of-the-box compatibility with 
              Unix, Mac OS X and Windows.
            <P> And with a promotional paragraph like that, I just had to look. 
              It looks simple enough. I merely say:
            <P> 
            <pre>
use DBM::Deep;
my $hash = DBM::Deep-&gt;new("foo.db");
$hash-&gt;{my_array} = [1..5];
$hash-&gt;{my_scores} = { fred =&gt; 205, barney =&gt; 195, dino =&gt; 30 };
</pre>
            And that's it. In my next program:
            <P> 
            <pre>
use DBM::Deep;          
my $hash = DBM::Deep-&gt;new("foo.db");
$hash-&gt;{my_scores}-&gt;{fred} = 215; # update score
</pre>
            And finally, retrieving it all:
            <P> 
            <pre>
use DBM::Deep;
my $hash = DBM::Deep-&gt;new("foo.db");
print join(", ",@{$hash-&gt;{my_array}}), "\n";
for (sort keys %{$hash-&gt;{my_scores}}) {
  print "$_ =&gt; $hash-&gt;{my_scores}-&gt;{$_}\n";
}
</pre>
            which prints:
            <P> 
            <pre>
1, 2, 3, 4, 5
barney =&gt; 195
dino =&gt; 30
fred =&gt; 215
</pre>
            And, in fact, that all just plain worked. I'm impressed. We've avoided 
            the MLDBM problem, because the update to the nested data worked. And, 
            there's no dependency on traditional DBMs here, so there's no size 
            limitation or byte ordering, or even the need for a C compiler to 
            install.
            <P> I'm told, although I haven't tested it, that I can also add:
            <P> 
            <pre>
$hash-&gt;lock;
... do some shared things ...
$hash-&gt;unlock;
</pre>
            and thereby access shared data in multiple processes.
            <P> There also seems to be some cool stuff around encrypting or compressing 
              the data as well. This definitely bears further examination.
            <P> The limitations of <B>DBM::Deep</B> seem rather expected. Because 
              this is a single data file, it's being locked using <B>flock</B>, 
              so we can't persist data for multiple users across machines or reliably 
              across <B>NFS</B>. Also, we have to clean up after ourselves from 
              time to time by calling an <B>optimize</B> method -- otherwise, 
              unused space starts accumulating in the database.
            <P> One other recent addition to the CPAN also caught my eye -- <B>OOPS</B>. 
              Unlike <B>DBM::Deep</B>, <B>OOPS</B> uses a DBI-style database (currently 
              only compatible with PostgreSQL, MySQL, and SQLite) for its persistent 
              store. However, like <B>DBM::Deep</B>, once a connection is made, 
              you pretty much do anything you want with the data structure, and 
              it gets reflected into the permanent storage. The database tables 
              are created on request, and managed by the module transparently.
            <P> The basic mode of <B>OOPS</B> looks like:
            <P> 
            <pre>
use OOPS;
transaction(sub {
  OOPS-&gt;initial_setup(
    dbi_dsn =&gt; 'dbi:SQLite:/tmp/oops',
    username =&gt; undef, # no matter with SQLite
    password =&gt; undef, # ditto
  ) unless -s "/tmp/oops";

  my $hash = OOPS-&gt;new(
    dbi_dsn =&gt; 'dbi:SQLite:/tmp/oops',
    username =&gt; undef, # no matter with SQLite
    password =&gt; undef, # ditto
  );

  $hash-&gt;{my_array} = [1..5];
  $hash-&gt;{my_scores} = { fred =&gt; 205, barney =&gt; 195, dino =&gt; 30 };
  $hash-&gt;{my_scores}-&gt;{fred} = 215; # update score

  $hash-&gt;commit;
});
</pre>
            The wrapper of <B>transaction</B> forces this update to all be within 
            a single transaction. We fetch the data similarly:
            <P> 
            <pre>
use OOPS;
transaction(sub {
  my $hash = OOPS-&gt;new(
    dbi_dsn =&gt; 'dbi:SQLite:/tmp/oops',
    username =&gt; undef, # no matter with SQLite
    password =&gt; undef, # ditto
  );

  print join(", ",@{$hash-&gt;{my_array}}), "\n";
  for (sort keys %{$hash-&gt;{my_scores}}) {
    print "$_ =&gt; $hash-&gt;{my_scores}-&gt;{$_}\n";
  }
});
</pre>
            And, in fact, this retrieved exactly the values I had expected. I'll 
            be exploring these two modules in greater depth in the future, and 
            until then, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
