<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i13: Automating the spamlist.org Blacklist</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/aug2004.tar"><b class=codeListing>aug2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a1.gif" width="200" height="167" align="right">Automating 
              the spamlist.org Blacklist</b></h1>
            <p> <I>Hal Pomeranz</i>
            <p> As I become increasingly frustrated with the amount of spam I 
              receive via the Deer Run mail servers, I start reaching for ever 
              more draconian tools for blocking spam. One of the more useful blacklists 
              that I've found on the Internet is the one at <B>www.spamlist.org</B>. 
              However, the maintainers of the list (probably in an effort not 
              to get sued by the spammers) go out of their way not to provide 
              the list in a form that can be automatically incorporated into your 
              mail server configuration. So, in this article, I will share a few 
              simple tools I've created for automatically using this list 
              on my own personal mail servers.
            <P> It should be noted that the spamlist.org blacklist is a very dangerous 
              list. Using it blindly will result in a huge number of false positives, 
              because the spamlist.org list blocks entire countries (China, Korea, 
              Brazil, Greece, and others) that are known spam-havens. Before implementing 
              the automated solution presented here, install the list manually 
              and watch your mail server logs carefully to make sure that you 
              are not rejecting email you legitimately wish to receive. In my 
              case, I also maintain an extensive "white list" of people 
              from whom I do want to receive email, despite the spamlist.org list 
              and other blacklists to which I subscribe. However, this may not 
              be reasonable for a large enterprise, so please approach the spamlist.org 
              list with extreme caution.
            <P> <B>Sendmail Configuration</b>
            <p> The easiest way to use the spamlist.org list is via Sendmail's 
              <B>access_db</B> feature. While this feature is described more fully 
              in the O'Reilly &amp; Associates <I>Sendmail</I> book, the 
              simplest way to enable this feature is to add the following macro 
              to the file you use to generate your <B>sendmail.cf</B> file for 
              your external mail relay:
            <P> 
            <pre>
FEATURE('access_db', 'hash -o /etc/mail/access')</pre> <p> "<B>hash</B>" means that the access database 
              will be a Berkeley DB-style hash database (alternatively, "<B>dbm</B>" 
              can be used on systems without Berkeley DB support). This is an 
              "optional" ("<B>-o</B>") database, meaning Sendmail 
              will run without complaint if the DB file doesn't exist, and 
              the name of the database file will be <B>/etc/mail/access.db</B> 
              (the "<B>.db</B>" extension is added automatically by 
              Sendmail because of the choice of database type).
            <P> Normally, the access database is maintained manually by the local 
              site administrator and contains entries for sites from which you 
              don't want to receive email:
            <P> 
            <pre>
Connect:64.35.104	        REJECT
Connect:64.119.222          REJECT
Connect:64.143.184          REJECT
From:optinamerica.com       REJECT
From:superdealmail.com      REJECT
biz                         ERROR:550 Move out of biz domain
</pre>
            As you can see, the access database gives you fairly fine-grained 
            control based on the source of the SMTP connection and/or the sender's 
            domain name. In the last line of the example, we're not only 
            applying a wholesale block to email originating from "<B>.biz</B>" 
            addresses, but also supplying a custom error message with the rejection. 
            In fact, the access database also lets you control the fate of the 
            incoming email based on the recipient address as well, but that's 
            not germane to this discussion.
            <P> Typically, the access database for a site is created in a text 
              file called <B>/etc/mail/access</B>. This text file is then converted 
              into a Berkeley DB file via the <B>makemap</B> program:
            <P> 
            <pre>
cd /etc/mail
makemap -v access &lt; access
</pre>
            The above command creates a file called <B>access.db</B> (again, the 
            extension is supplied automatically) from the input text file called 
            <B>access</B>. The <B>-v</B> ("verbose") option tells <B>makemap</B> 
            to display the key/value pairs as they're being added to the 
            database. Note that if your particular operating system doesn't 
            supply the <B>makemap</B> program, the source code is included with 
            the Sendmail source distribution available from <B>ftp.sendmail.org</B>.
            <P> <B>Downloading the spamlist.org Blacklist</b>
            <p> The actual spamlist.org blacklist is available from:
            <P> 
            <pre>
http://www.spamlist.org/html/the_list.html
</pre>
            The lines of text we need to feed into our access database are unfortunately 
            encapsulated in the middle of this rather large HTML document. Luckily, 
            the lines are set off between "<B>&lt;pre&gt;...&lt;/pre&gt;</B>" 
            tags, so it's a trivial Perl script to extract the lines we need:
            <P> 
            <pre>
#!/usr/bin/perl

$print = 0;
while (&lt;&gt;) {
    if (/&lt;\/pre&gt;/) { exit; }
    if ($print) {
        s/\s*$//;
        print "$_\n";
    }
    if (/&lt;pre&gt;/) { $print = 1; }
}
</pre>
            Note the extra code to remove the DOS-style CR-LF at the end of each 
            line and replace it with the standard Unix new-line sequence. In a 
            fit of whimsy, I called this script <B>spamalama</B>.
            <P> Now that we can extract the necessary lines from the original 
              HTML document, what to do with them? I maintain a manual access 
              database with RCS on my systems, so I don't want the lines 
              from the spamlist.org list to clobber that. Instead, I redirect 
              the output of my <B>spamalama</B> script to a separate file and 
              feed both my manually maintained access DB text file and the <B>spamalama</B> 
              output file into the <B>makemap</B> program to build my Berkeley 
              DB file. And since I hate doing things manually, I encoded everything 
              into a simple <B>Makefile</B> in the <B>/etc/mail</B> directory:
            <P> 
            <pre>
all:: access.db virtusertable.db

virtusertable.db: virtusertable
        makemap -v hash virtusertable &lt; virtusertable

access.db: access access-sl
        cat access access-sl | makemap -v hash access

access-sl: spamlist.org/the_list.html
        spamlist.org/spamalama spamlist.org/the_list.html &gt; access-sl
</pre>
            As you can see, I also use the same <B>Makefile</B> for updating other 
            database files used by Sendmail, like the <B>virtusertable.db</B> 
            file for the various virtual domains I host.
            <P> But let's examine the rules for building the <B>access.db</B> 
              file. The <B>access.db</B> file is built from two dependencies -- 
              the <B>access</B> file that I maintain by hand, and the <B>access-sl</B> 
              file that is created by calling the <B>spamalama</B> script. The 
              <B>spamalama</B> script and the HTML input file it feeds on have 
              been placed in the <B>/etc/mail/spamlist.org</B> directory (the 
              pathname is arbitrary, but it is convenient to have them grouped 
              together in a subdirectory of <B>/etc/mail</B>). So now if I update 
              either the <B>/etc/mail/access</B> file or the <B>/etc/mail/spamlist.org/the_list.html</B> 
              file and then run <B>make</B> in the <B>/etc/mail</B> directory, 
              my access database will automagically get updated. Hooray!
            <P> <B>Automating Downloads from www.spamlist.org</b>
            <p> The only remaining item is a script that I can run from <B>cron</B> 
              to automatically update the <B>/etc/mail/spamlist.org/the_list.html</B> 
              file on my machine and run the appropriate <B>make</B> command. 
              With the help of the <B>wget</B> utility (available from any FSF 
              archive site), this is no problem:
            <P> 
            <pre>
#!/bin/sh

MAILDIR=/etc/mail
LISTDIR=$MAILDIR/spamlist.org
URL=http://www.spamlist.org/html/the_list.html

PATH=/bin:/usr/bin:/usr/sbin:/usr/local/bin
export PATH

FILE='basename $URL'
cd $LISTDIR
mv $FILE $FILE.bak
wget $URL
cd $MAILDIR
make
</pre>
            Note that I like using <B>wget</B> here because <B>wget</B> automatically 
            preserves timestamps on the files that it downloads. This means that 
            if the spamlist.org site hasn't been updated since the last time 
            I ran my script, then the timestamp on the <B>the_list.html</B> file 
            won't change and my <B>make</B> command won't do anything.
            <P> Assuming I install the above script as <B>/etc/mail/spamlist.org/update.sh</B>, 
              the cron invocation is something like:
            <P> 
            <pre>
45 23 * * 0 /etc/mail/spamlist.org/update.sh
</pre>
            Note that the spamlist.org site is generally updated on a weekly basis 
            at best, so running the script once a week as shown here is probably 
            sufficient.
            <P> <B>Conclusion</b>
            <p> Although this collection of scripts and Makefiles works well for 
              my personal email server at Deer Run Associates, I cannot stress 
              enough how aggressive the spamlist.org blacklist is. Please use 
              caution when implementing this list at your site or you may experience 
              terrible consequences. Read and heed the disclaimers at <B>http://www. 
              spamlist.org</B>. You have been warned.
            <P> <I>Hal Pomeranz (<B>hal@deer-run.com</B>) is a relatively young 
              curmudgeon who hates spam in all forms. This causes him to take 
              perilous and foolhardy steps to protect his inbox from pollution.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
