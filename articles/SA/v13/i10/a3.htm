<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i10: Using PHP to Back Up MySQL</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/oct2004.tar"><b class=codeListing>oct2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a3.gif" width="200" height="167" align="right">Using 
              PHP to Back Up MySQL</B></h1>
            <P> <I>Russell J.T. Dyer</i>
            <p> The importance of backing up data can't be stressed enough, 
              and this also applies to backing up MySQL databases. One of the 
              keys to making regular backups is to automate the process. You could 
              buy a backup program that will copy the data files from a filesystem 
              to archive media. However, for more dependable backups, MySQL would 
              have to be shut down before a backup program were run, which could 
              make MySQL unavailable to users for quite a while. A better alternative 
              is to write a PHP script that will use a utility like <B>mysqldump</B>.
            <P> In this article, I will work through the development of a few 
              PHP scripts used for backing up MySQL -- one that will accumulate 
              statistics on the usage of MySQL tables to determine which ones 
              should be backed up daily, another that will make weekly backups 
              of all of the databases on a server, and a third script to perform 
              daily backups based on the statistics from the first.
            <P> <B>Table Usage Statistics</B>
            <P> When developing a backup script, it's important to decide 
              what you want to back up and how frequently. For the purposes of 
              this article, I will assume that only tables in which the data is 
              changed a few times a day are to be backed up. To determine this 
              information, I will keep a log in MySQL of the usage of tables. 
              To set up a statistics log, I'll create a new database and 
              a table with the <B>mysql</B> client like so:
            <P> 
            <pre>
CREATE DATABASE mysql_stats;
USE mysql_stats;

CREATE TABLE table_stats
  (stat_id INT AUTO_INCREMENT PRIMARY KEY,
  stat_time DATETIME, db_name VARCHAR(50),
  table_name VARCHAR(50),
  file_size INT, file_modify DATE);
</pre>
            The first two lines above create the database <B>mysql_stats</B> and 
            switch the client session to it. Next the table <B>table_stats</B> 
            is created. In this table, I will store statistics on MySQL tables 
            gathered by the script I'm about to review, <B>mysql_stats.php</B>. 
            This script will be run by <B>cron</B> each hour to accumulate an 
            adequate amount of statistics:
            <P> 
            <pre>
#!/usr/bin/php -q
&lt;?
mysql_connect('localhost', 'root', 'password');

$databases = mysql_list_dbs();
$db_count = mysql_num_rows($databases);
$db_ignore = array('mysql','test','mysql_stat');
$today = date('Y-m-d');
$hour = date('h');
</pre>
            In this script, the first line signifies to the shell that what follows 
            is a PHP script. This is necessary to execute the script from the 
            command line instead of through Apache and the Web browser. On the 
            third line, PHP connects to MySQL, providing the host, the user name, 
            and the password. Incidentally, for the PHP scripts in this article, 
            I'm using several MySQL functions that come with PHP and don't 
            require a PEAR library to be loaded. The next line of code above uses 
            the function <B>mysql_list_dbs()</B> to retrieve a list of databases 
            in MySQL. An identifier for the results set is stored in the variable 
            <B>$databases</B>. The function <B>mysql_num_rows()</B> counts the 
            number of rows in <B>$datbases </B>so that PHP knows how many databases 
            there are in the results set. It will have one database name per row, 
            the value of which will be stored in <B>$db_count</B>. With this count, 
            PHP can use a <B>for</B> statement to loop through <B>$databases</B>. 
            To be able to exclude certain databases from processing, on the next 
            line above I've set up an array containing a list of databases 
            to ignore.
            <P> 
            <pre>
for($cnt = 0; $cnt &lt; $db_count; $cnt++) {
  $db = mysql_db_name($databases, $cnt);
  if(in_array($db, $db_ignore)){ continue; }

  $tables = mysql_list_tables($db);
  $tb_count = mysql_num_rows($tables);
</pre>
            Here we have the <B>for</B> statement mentioned before. Using the 
            function <B>mysql_db_name()</B>, the name of one database from <B>$databases</B> 
            is extracted. Which one is determined by the second argument of the 
            function. The counter <B>$cnt</B>, which starts with a value of 0, 
            is incremented (<B>$cnt++</B>) with each pass through the <B>for</B> 
            statement, not to exceed the value of <B>$db_count</B>. The second 
            line of the statement block uses the <B>in_array()</B> function to 
            see whether the database name is contained in the array <B>$db_ignore</B>. 
            If it is, then the remainder of the <B>for</B> statement block is 
            skipped and PHP makes another loop through to process the next database 
            name. Otherwise, using the <B>mysql_list_tables()</B> function, PHP 
            retrieves a list of tables from MySQL associated with the database 
            named as the function's argument. To prepare for an embedded 
            <B>for</B> statement that follows, the results set that contains the 
            list of tables for the database is counted with <B>mysql_num_rows()</B>:
            <P> 
            <pre>
  for($c = 0; $c &lt; $tb_count; $c++) {
    $table = mysql_tablename($tables, $c);
    $file_name = "/var/mysql/$db/$table.MYD";

    if(file_exists($file_name)) {
     $file_size = filesize($file_name);
     $file_modify = date('Y-m-d', filemtime($file_name));
     $file_hour = date('h', filemtime($file_name));

    if($file_modify == $today &amp; $file_hour == $hour) {
       $sql_stmnt = "INSERT INTO table_stats
                     (db_name, table_name, stat_time,
                     file_size, file_modify)
                     VALUES('$db', '$table', NOW(),
                     '$file_size', '$file_modify')";

       $results = mysql_db_query('mysql_stats', $sql_stmnt)
                or die(mysql_error());
     }
    }
  }
}

mysql_close();
?&gt;
</pre>
            A different variable (<B>$c</B>) is used so PHP does not confuse the 
            value of the counter of the outer <B>for</B> statement with the counter 
            of the embedded one. The first line of the statement block extracts 
            the table name from <B>$tables</B> and stores it temporarily in <B>$table</B>. 
            The next line sets up a variable that will contain the file path to 
            where the live MySQL tables are stored. This bit of information can 
            be found in the <B>my.cnf</B> file, usually located in the <B>/etc</B> 
            directory on Unix systems. It<B>'</B>s contained in the value 
            of <B>datadir</B>. The additional path information comes from the 
            values of the variables determined by the script. MySQL stores the 
            data for a table in a file with the same name as the table, with the 
            extension of <B>.MYD</B>, in a directory with the same name as the 
            database.
            <P> Using the function <B>file_exists()</B>, PHP tests whether the 
              data file for the table exists. On the first line of this <B>if</B> 
              statement, PHP gets the table's data file size. It then captures 
              the date it was last modified on the next line. The function <B>filemtime()</B> 
              returns Unix time. To reformat that value to the MySQL <B>date</B> 
              format (i.e., yyyy-mm-dd), the function <B>date()</B> is used with 
              the desired format given. Using the same function, we get the hour 
              to compare to the current hour (<B>$hour</B>).
            <P> If the modification date is the same as today's date and 
              hour, then PHP will query MySQL to insert the data with <B>mysql_db_query()</B> 
              in which the database name is given as the first argument and the 
              SQL statement as the second. Since this concludes the script, the 
              connection to MySQL is closed. Incidentally, the trailing closing 
              curly braces close the <B>if</B> statements and the embedded <B>for</B> 
              statement in this code excerpt, as well as the <B>for</B> statement 
              from the previous code excerpt.
            <P> <B>A Complete Backup</B>
            <P> Before going through the script for selectively backing up tables 
              based on statistics collected by the previous script, I'll 
              look at a PHP script that can be used to back up all of the databases 
              in MySQL. Such a script might be set to run once a week by <B>cron</B>. 
              It will back up each database to a separate tar file using <B>mysqldump</B>. 
              With <B>mysqldump</B>, the backups are performed without shutting 
              down MySQL. In addition to backing up the data, this script will 
              also back up the configuration file (<B>my.cnf</B>) and MySQL itself.
            <P> To prepare for this script, I'll first create another table 
              in MySQL. This one will be used to log information on each backup. 
              I'll do this from the <B>mysql</B> client:
            <P> 
            <pre>
CREATE TABLE backup_log
  (log_id INT AUTO_INCREMENT PRIMARY KEY,
  backup_date DATETIME, type ENUM('database','table'),
  cycle ENUM('weekly','daily'),
  tar_file VARCHAR(50), file_path VARCHAR(50));
</pre>
            To generate reports on when backups were made, I've included 
            a column for the date of the backups. To distinguish whether a backup 
            was of a database or a table, I've added an enumerated column 
            called <B>type</B>. Another numerated column indicates the cycle of 
            the backup. Finally, the name of the tar file along with its file 
            path will be saved. I could figure all of this out by just looking 
            at the backup files; however, this is a tidier and more organized 
            method. With this table created, I can now go through the script, 
            <B>mysql_backup_weekly.php</B>:
            <P> 
            <pre>
#!/usr/bin/php -q

&lt;?
mysql_connect('localhost', 'root', 'password');

$databases = mysql_list_dbs();
$db_count = mysql_num_rows($databases);

$dir = '/mnt/backup';
$date_prefix = date('Ymd');
</pre>
            The opening code here is very much like the beginning of the previous 
            script. After starting PHP and connecting to MySQL, the script gets 
            a list of databases. After this, a variable containing the path for 
            the backup directory is given. Next, a variable that contains the 
            numeric date without dashes or slashes is created. This will be used 
            as a prefix for the backup file names so that PHP doesn't overwrite 
            previous backups. Incidentally, by not giving a second argument to 
            the <B>date()</B> function, the current date is used. PHP is now ready 
            to loop through the list of databases and to export the data from 
            each database:
            <P> 
            <pre>
for($cnt = 0; $cnt &lt; $db_count; $cnt++) {
  $db = mysql_db_name($databases, $cnt);

  system("mysqldump -u root -ppassword -h localhost
      -x -e -A $db &gt; $dir/$date_prefix-$db.sql");

  $sql_stmnt = "INSERT INTO backup_log
                (backup_date, type, cycle, tar_file, file_path)
                VALUES(NOW(), 'database', 'weekly',
                '$date_prefix-$db.sql', '$dir')";
  mysql_db_query('mysql_stats', $sql_stmnt);
}
mysql_close();

  system("tar cfz mysql.tar.gz /etc/my.cnf /usr/local/mysql
      /usr/lib/mysql /usr/bin/mysql /usr/sbin/mysqld");
?&gt;
</pre>
            This <B>for</B> statement is much like the two found in the previous 
            script. What's different is the <B>system()</B> function that 
            executes what is contained within the parentheses, and the double-quotes 
            at the system level. For details on <B>mysqldump</B>, see my article 
            on MySQL backups at: <B>http://www.unixreview.com/documents/s=8989/ur0408d/</B>.
            <P> Next, an SQL statement is set up to insert information regarding 
              the backup. After closing out the MySQL session, I end the script 
              by creating another tar file containing the MySQL configuration 
              file and all of the various libraries and binaries. Instead of doing 
              this, though, it might be better to just keep a clean copy (from 
              mysql.com) of the installation file that you used to install MySQL. 
              Just be sure to back up <B>my.cnf</B> if you've modified it.
            <P> <B>Selective Backups</B>
            <P> Which statistics should be kept on databases to determine which 
              tables to back up is debatable and should be determined by the sys 
              admin. As a simple example, I've chosen to determine daily 
              backups based on whether a table's data file is modified at 
              least four times during the day. Based on this policy, I've 
              put together an SQL statement that will check for records where 
              the value of the column <B>file_modify</B> is the same as today's 
              date and where there are more than four records. Let's look 
              at the script, <B>mysql_backup_daily.php</B>, which will be run 
              late each night during a low-traffic time for the fictitious databases:
            <P> 
            <pre>
#!/usr/bin/php -q

&lt;?
mysql_connect('localhost', 'root', 'password');
$dir = '/mnt/backup';

$sql_stmnt = "SELECT db_name, table_name, stat_date
       FROM (
          SELECT db_name, table_name,
          DATE_FORMAT(file_modify, '%Y-%m-%d') AS stat_date,
          COUNT(table_name) AS recs
          FROM table_stats
          WHERE file_modify = CURDATE()
          GROUP BY table_name
          ) AS frequency
       WHERE recs &gt; 4;";

$results = mysql_db_query('mysql_stats', $sql_stmnt);
</pre>
            The opening here is much like the previous scripts. One notable difference 
            is that the <B>SELECT</B> statement involves a sub-query. Sub-queries 
            are available as of version 4.1 of MySQL. See my article on MySQL 
            sub-queries at:
            <P> 
            <pre>
http://www.unixreview.com/documents/s=8969/ur0407e/
</pre>
            The sub-query here is contained within the parentheses and creates 
            a temporary table from which the outer query selects data. Once a 
            results set that contains a list of databases and tables has been 
            generated, it's merely a matter of looping through the data for 
            processing:
            <P> 
            <pre>
while($row = mysql_fetch_object($results)) {
 $db = $row-&gt;db_name;
 $table = $row-&gt;table_name;
 system("mysqldump -u root -ppassword -h localhost
     -x -e $db $table &gt; $dir/$db.$table.sql");

 $sql_stmnt = "INSERT INTO backup_log
        (backup_date, type, cycle, tar_file, file_path)
        VALUES(NOW(), 'table', 'daily', '$db.$table.sql',
        '$dir')";
 mysql_db_query('mysql_stats', $sql_stmnt);
}
mysql_close();
?&gt;
</pre>
            Using the function <B>mysql_fetch_object()</B>, each row is extracted 
            as an object. To access the value of each component, the field name 
            of the results set is used as the identifier. With the name of the 
            database and related table, the utility <B>mysqldump</B> backs up 
            the appropriate tables. An entry is then made to the <B>backup_log</B> 
            table. I'm recording that the backup was of a table and a daily 
            one.
            <P> <B>Conclusion</B>
            <P> To construct a backup system like the one discussed here, you 
              may want to consider the criteria by which you will decide whether 
              a table will be backed up daily. If your databases are small enough 
              and their usage is low, then you may want to perform a complete 
              backup daily regardless of a table's file modification date. 
              The important thing is to back up the data regularly and appropriately.
            <P> <I>Russell Dyer is a Perl programmer, a MySQL developer, and a 
              Web designer living and working on a consulting basis in New Orleans. 
              He is also an adjunct instructor at a technical college where he 
              teaches Linux and other open source software. He can be reached 
              at <B>russell@dyerhouse.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
