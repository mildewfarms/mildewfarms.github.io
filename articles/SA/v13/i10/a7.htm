<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i10: Trapping Special Characters in the Korn Shell</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2004/oct2004.tar"><b class=codeListing>oct2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Trapping 
              Special Characters in the Korn Shell</B></h1>
            <P> <I>Ed Schaefer and John Spurgeon</i>
            <p> Have you ever needed to know whether a user pressed the up arrow 
              key or some other unprintable character from within a shell script? 
              The Korn shell provides no command for detecting whether a user 
              has pressed a special character (arrow keys, function keys, and 
              control key sequences). With a little programming, and by setting 
              certain terminal driver options with the <B>stty</B> command, you 
              can detect these keys. In this column, we'll:
            <P> 
            <ul>
              <li> Discuss special key composition and how to use the <B>stty</B> 
                command in a shell script to break down the composition. 
              <li> Present shell function GetKey, which determines whether a special 
                key has been pressed (the unprintable control characters are embedded 
                in the script). 
              <li> Present shell function NewGetKey (a rewrite of GetKey), which 
                does not use embedded, unprintable control characters, thus improving 
                script portability. 
              <li> Conclude by presenting a "C" utility -- keycode 
                -- that, with the press of a key, displays the key and its 
                value in decimal, octal, and hexadecimal.
            </ul>
            <B>Special Keys Composition</B>
            <P> A control key combination such as CTRL-p is self-explanatory -- 
              while holding down the control key, simply press the "p" 
              key, and the shell interprets the combination. But the arrow keys 
              and the function keys are more complex escape sequences. When an 
              arrow or function key is pressed, the shell actually senses three 
              sequences.
            <P> For the arrow keys:
            <P> 
            <P> 1. The binary ESC sequence<br>
              2. The left bracket ([) key<br>
              3. Based on which arrow key is pressed:<br>
              <ul>a. The up key produces the A key.<br>
              b. The down key produces the B key.<br>
              c. The right key produces the C key.<br>
              d. The left key produces the D key.</ul>
            <P> 
            <P> For the four function keys:
            <P> 
            <P> 1. The binary ESC sequence<br>
              2. The upper-case O key<br>
              3. Based on which arrow key is pressed:<br>
              <ul>a. The F1 function key produces the P key.<br>
              b. The F2 function key produces the Q key.<br>
              c. The F3 function key produces the R key.<br>
              d. The F4 function key produces the S key.</ul>
            <P> 
            <P> The terminal driver controls input between a shell script and 
              the Unix kernel. By default, the control is canonical, line-based 
              mode. That is, input is collected and no communication happens until 
              the user presses the carriage return. To parse the arrow and function 
              keys, we must set the driver to "raw" mode, using the 
              <B>sty</B> command, to inspect each sequence one character at a 
              time.
            <P> <B>Using the stty and dd Commands</B>
            <P> In our Solaris 7 system, the following command:
            <P> 
            <pre>
stty -icanon -echo min 1 time 0 -isig
</pre>
            turns off canonical mode, turns off echoing, accepts one character 
            from the driver, waits zero time units between characters, and turns 
            off the special meaning of characters INTR, QUIT, SWTCH, and SUSP.
            <P> Once raw mode is on, the <B>dd</B> (convert and copy a file) command 
              retrieves one character from standard input: 
            <P> 
            <pre>
readchar=$(dd bs=1 count=1 2&gt;/dev/null)
</pre>
            This is a common method for returning one character to the shell. 
            (See "Returning a Single Character in a Unix Shell Script": 
            <B>http://www.samag.com/documents/s=1205/sam9704f/9704f.htm</B>).
            <P> <B>The GetKey Function</B>
            <P> Using the <B>stty</B>/<B>dd</B> command combination, the GetKey 
              shell function (Listing 1) returns a string identifying the special 
              character. Pressing any normal key returns just that key's 
              value.
            <P> The original GetKey function is from Heiner Steven's confection 
              of Unix scripts located at Shelldorado.com. But Heiner's script 
              only supported the arrow keys; we added the control and the function 
              keys.
            <P> Consider the high points of this script:
            <P> 
            <P> 1. GetKey saves the original terminal settings with this command:
            <P> 
            <pre>
typeset oldstty="$(stty -g)" 
</pre>
            and restores the original settings with this command:
            <P> 
            <pre>
stty $oldstty 
</pre>
            2. When GetKey identifies a special character, it returns a character 
            string representing that character (i.e., the TAB key returns the 
            string "TAB"). To keep the script short, only the arrow 
            keys, function keys, CTRL-p, CTRL-d, TAB, and DELETE key are supported. 
            The other control keys can easily be added to the script.
            <P> 3. When the binary ESCAPE key is identified, the script assumes 
              that either an arrow key or a function key was pressed, and reads 
              the next two characters. Consequently, the script can't detect 
              a lone escape key, and the user can emulate entering an arrow or 
              function key by pressing the correct three characters.
            <P> With GetKey in raw mode, the second character will be a "[" 
              for an arrow key or a "O" for a function key, respectively. 
              Finally, obtain the third character, and return the proper arrow 
              or function key string.
            <P> 4. Note that the control characters and the escape key are the 
              actual key representations. In the vi editor, embed the actual control 
              character by pressing CTRL-v and then pressing the required character.
            <P> <B>The NewGetKey Function</B>
            <P> Embedding the actual control characters in a script is problematic. 
              As long as we use the scripts in the tarball, there's no problem. 
              However, reading the text in an article may lead to confusion, and 
              cutting-and-pasting text may cause portability problems. We need 
              a different method to emulate control characters.
            <P> Each key in the character set can be identified by its octal value. 
              Consulting an ASCII table shows the escape character maps to octal 
              value \033. Perhaps within the script, we can change the case statement 
              to this:
            <P> 
            <pre>
   case "$readchar" in
       '\033') # escape sequence
       .
       .
</pre>
            Unfortunately, the shell doesn't support this syntax, but other 
            external Unix tools do. The following statement is true if the "myvar" 
            variable is the escape key:
            <P> 
            <pre>
if [[ -z $(echo "$myvar"|tr -d '\033') ]]
then
   echo "myvar is the escape key"
fi
</pre>
            Echo the variable to the <B>tr</B> (translate command) and delete 
            the escape key. If the variable contains just the escape key, the 
            resulting null check (<B>-z</B>) returns true.
            <P> The double quotes surrounding the "myvar" variable are 
              important. This statement fails miserably if myvar is whitespace: 
            <P> 
            <pre>
if [[ -z $(echo $myvar|tr -d '\011') ]]
then # this statement fails and is never true
   echo "myvar is a TAB key"
fi
</pre>
            The TAB key, CTRL-i, is whitespace (space, TAB, and newline). Since 
            the shell uses whitespace as an argument delimiter, myvar is not recognized 
            as an argument to the <B>echo</B> command without double quotes.
            <P> In addition to <B>tr</B>, the <B>sed</B> command may also be used:
            <P> 
            <pre>
if [[ -z $(echo "$myvar"|sed 's/'"$(echo '\011')"'//') ]]
then
   echo "myvar is a TAB key"
fi
</pre>
            The NewGetKey function (Listing 2), a rewrite of GetKey, eliminates 
            the need for the embedded control keys. Using the <B>tr</B> command 
            as previously described, the special_char_str function evaluates the 
            passed argument and, if it is a special character, passes back a special 
            character string identifying the character.
            <P> <B>The Keycode "C" Utility</B>
            <P> The keycode "C" utility (Listing 3) is a handy replacement 
              for an ASCII table. Pressing a key displays the key and its value 
              in decimal, octal, and hexadecimal. For example, execute the program 
              and press the "d" key:
            <P> 
            <pre>
Enter keys to display in dec, octal, and hex.  press control-d to quit
keycode&gt;       d     100 0144  0x64 
</pre>
            Analogous to the <B>stty</B> command, the "C" ioctl function 
            places the terminal driver in raw mode. This example displays pressing 
            the up arrow key:
            <P> 
            <pre>
keycode&gt; &lt;ESC&gt;        27 033   0x1b<br>
keycode&gt;       [      91 0133  0x5b<br>
keycode&gt;       A      65 0101  0x41<br>
</pre> <b>Conclusion</b>
            <P> This column has presented how to control the terminal driver and 
              interpret unprintable, special characters such as the arrow keys. 
              The crux of this topic is setting terminal options with the <B>stty</B> 
              command. As far as portability is concerned, <B>stty</B> is one 
              of the more persnickety commands among the Unix variants. 
            <P> In addition to Solaris 7, these two scripts and one "C" 
              utility (Listing 3) also execute under the Bash shell using Red 
              Hat Linux 7.1. Please let us know if you have problems executing 
              them on any other systems.
            <P> <B>References</B>
            <P> Schaefer, Ed. "Returning a Single Character in a Unix Shell 
              Script", <I>Sys Admin</I>, April 1997: <B>http://www.samag.com/documents/s=1205/sam9704f/9704f.htm</B>
            <P> Steven, Heiner. Heiner's Shelldorado -- Unix shell scripting 
              resource: <B>http://www.shelldorado.com</B>.
            <P> Bolsky, Morris, David Korn. <I>The New KornShell Command and Programming 
              Language</I>, 1995. Upper Saddle River, NJ: Prentice Hall PTR.
            <P> <I>Ed Schaefer is a frequent contributor to </I>Sys Admin<I>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also hosts the monthly 
              Shell Corner column on UnixReview.com. He can be reached at: <B>shellcorner@comcast.net</B>.</i>
            <P> <i>John Spurgeon is a software developer and systems administrator 
              for Intel's Factory Integrated Information Systems, FIIS, in 
              Aloha, Oregon. Outside of work, he enjoys turfgrass management, 
              triathlons, and spending time with his family.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
