<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i08: PHP and MySQL</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/aug2004.tar"><b class=codeListing>aug2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a3.gif" width="200" height="167" align="right">PHP 
              and MySQL</b></h1>
            <p> <I>Russell J.T. Dyer</I>
            <P> One of the most popular programming language and database engine 
              combinations for the Web is PHP with MySQL. This combination works 
              well for many reasons: primarily the speed, the stability, and the 
              simplicity of both applications. The two are used extensively on 
              a variety of Web sites. As a systems administrator, you can use 
              the pair for storing data on users, hardware, and system documentation, 
              for example. In this article, I will explain the basics of how to 
              connect to MySQL and how to query MySQL with PHP.
            <P> <B>Connecting to MySQL</b>
            <p> The first task for a PHP script that will interface to MySQL is 
              to make a connection to it, to establish a MySQL session. For the 
              examples in this article, I will use a database called <B>sys_admin</B> 
              that I will assume has already been created in MySQL. If you're 
              unfamiliar with how to create databases in MySQL, check out my MySQL 
              column archives at UnixReview.com (<B>http://www.unixreview.com/mysql/</B>). 
              To connect to the database <B>sys_admin</B>, I could begin a PHP 
              script like so:
            <P> 
            <pre>
&lt;?php

require_once('DB.php');

$user = 'username';
$pw = 'password';
$host = 'localhost';
$db = 'sys_admin';

$dbh = DB::connect("mysql://$user:$pw@$host/$db");

if(DB::iserror($dbh)) {
   die($dbh-&gt;getMessage());
}

?&gt;
</pre>
            This section of PHP code starts by calling the PEAR DB library, which 
            typically comes with the basic installation of PHP. If not, you can 
            get a copy from <B>http://pear.php.net</B>. PEAR, which stands for 
            "PHP Extension and Application Repository", provides libraries of 
            common functions. The DB library provides database functions. The 
            stanza that follows establishes the variables necessary for connecting 
            to the database. After that, a database handle (<B>$dbh</B>) is created 
            -- PHP connects to MySQL by giving the user and database variables. 
            If it's unsuccessful, the script will die with an error message. If 
            the database handle is successful, though, the database <B>sys_admin</B> 
            will be selected for use. Each PHP script that is to interface with 
            MySQL will begin with a section of code like this one.
            <P> <B>Querying Data</b>
            <p> In my fictitious database, there's a table called <B>computers</B> 
              that contains information on the office computers and servers. To 
              retrieve a list of servers and some basic information on them, I'll 
              begin a PHP script by connecting to MySQL, as shown in the last 
              script excerpt. That will be followed by the start of a Web page 
              and then the invoking of an SQL statement to retrieve and display 
              the data. This can be achieved with code such as the following:
            <P> 
            <pre>
...  // Connect to MySQL

&lt;html&gt;
&lt;body&gt;

&lt;h2&gt;List of Servers&lt;/h2&gt;

&lt;?php

$sql = "SELECT comp_id, netbios,
        location, op_sys
        FROM computers
        WHERE type = 'server'";

$q = $dbh-&gt;query($sql);

if(DB::iserror($q)) {
   die($q-&gt;getMessage());
}

while($q-&gt;fetchInto($row)) {
   list($comp_id, $netbios, $location, $op_sys) = $row;

   print 
       "&lt;a href='details.php?comp_id=$comp_id'&gt;$netbios&lt;/a&gt;
       - $location ($op_sys)&lt;br/&gt;";
}

$dbh-&gt;disconnect();

?&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>
            After connecting to MySQL (substituted with ellipses here) and starting 
            the Web page, I then set up a variable (<B>$sql</B>) for the SQL statement. 
            Using object-oriented programming methods, the database is queried 
            with the SQL statement. In the next line or so of code, I have an 
            <B>if</B> statement to see whether an error occurred. If so, the script 
            will terminate and display an error message.
            <P> Assuming PHP was successful in querying the database, I have a 
              <B>while</B> statement loop through each row of data retrieved from 
              MySQL. With each pass, using the function <B>fetchInto()</B>, PHP 
              will temporarily store the columns of data for each row in an array 
              (<B>$row</B>). Within the code block of the <B>while</B> statement, 
              the <B>list()</B> function parses the elements of the array <B>$row</B> 
              into the respective variables. I've named these variables to match 
              their column counter parts. This is not necessary, though; they 
              may be named anything. I could even use the array as it is and reference 
              the appropriate sequence number to retrieve data. For instance, 
              for the operating system value, I could use <B>$row[3]</B> since 
              it's the fourth in the sequence (0 is first). Naming the variables 
              as I've done here, though, makes it easier to read the code and 
              easier for others to follow it later.
            <P> The second line of code within the <B>while</B> statement displays 
              the data in a format necessary for the Web page. The NETbios name 
              is wrapped in a hyperlink with a reference to another PHP script 
              (<B>details.php</B>), which will retrieve all of the details for 
              the particular server selected by a user. That server will be identified 
              by the computer identification number (i.e., <B>comp_id</B>), which 
              is a key column for the PHP script <B>details.php</B> that I would 
              create later. The value for <B>comp_id</B> typically will be placed 
              automatically in a variable by the same name (<B>$comp_id</B>), 
              regardless of what I name that variable in this script. It's based 
              on the name given in the hyperlink or anchor tag. This will happen 
              if the <B>php.ini</B> configuration file has <B>register_globals</B> 
              set to <B>on</B>. On Unix and Linux systems, this file is located 
              in the <B>/etc</B> directory. On a Windows system, it's usually 
              found in the <B>c:\windows</B> directory. If not, then the value 
              can be referenced using the <B>$_POST</B> associative array in which 
              all values that are posted or passed to the next script are stored. 
              In this, case I could retrieve it by using <B>$_POST['comp_id']</B>.
            <P> <B>Conclusion</b>
            <p> I've only covered how to connect to MySQL with PHP and how to 
              query a database using a <B>SELECT</B> statement. However, with 
              these components you can invoke any SQL statement with PHP. There 
              are several other DB functions that you may want to look into for 
              fine-tuning a script. If you're new to combining PHP with MySQL, 
              however, you can initially limit yourself to the basics presented 
              here and learn more when necessary.
            <P> <I>Russell Dyer is a Perl programmer, a MySQL developer, and a 
              Web designer living and working on a consulting basis in New Orleans. 
              He is also an adjunct instructor at a technical college where he 
              teaches Linux and other open source software. He can be reached 
              at <B>russell@dyerhouse.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
