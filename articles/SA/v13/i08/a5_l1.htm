<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i08: Listing 1 compare_table_CRC.pl</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a5.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_f2b.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a5_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2004/aug2004.tar"><b class=codeListing>aug2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>compare_table_CRC.pl: Tells if two tables 
              in two remote databases are different</i></h2>
            <p> 
            <pre>#!/usr/bin/perl -w
# compare_table_CRC
# (C) Giuseppe Maxia 2003
#
# Compares two tables in two remote databases
# and checks for any difference, by comparing a global CRC
# of all the records.
# Does not return individual different records. Use the 
# find_differences script for such purposes
use strict;
use DBI;

# This script is for educational purposes only.
# Parameters are embedded in the script itself.
# For production, it woyld be better to use either
# a config file or any Getopt::XX modules
my $host1 = "localhost";
my $host2 = "192.168.59.9";
my $db1 = "xcompany";
my $db2 = "xcompany";
my $tablename = "employees";
my ($user1, $password1) = ('myuser', 'secret');
my ($user2, $password2) = ('myuser', 'secret');

my $dbh1 =  DBI-&gt;connect("DBI:mysql:$db1;"
    . "host=$host1;port=3306",
    $user1, 
    $password1, 
    {RaiseError =&gt; 1, PrintError =&gt;0}) 
    or die "can't connect : $DBI::errstr";

my $dbh2 =  DBI-&gt;connect("DBI:mysql:$db2;"
    . "host=$host2;port=3306",
    $user2, 
    $password2, 
    {RaiseError =&gt; 1, PrintError =&gt;0}) 
    or die "can't connect : $DBI::errstr";

unless (grep {$_ eq $tablename} $dbh1-&gt;tables()) {
    die "$tablename not found in $db1\n"
}

unless (grep {$_ eq $tablename} $dbh2-&gt;tables()) {
    die "$tablename not found in $db2\n"
}

my $fields = get_fields($dbh1, $tablename);

my $check_table = qq{
   SELECT 
   COUNT(*) AS cnt, 
   CONCAT(SUM(CONV(SUBSTRING(\@CRC:=MD5(CONCAT_WS('/##/',$fields)),1,8),16,10)),
    SUM(CONV(SUBSTRING(\@CRC, 9,8),16,10)),
    SUM(CONV(SUBSTRING(\@CRC,17,8),16,10)),
    SUM(CONV(SUBSTRING(\@CRC,25,8),16,10))
    ) AS sig 
    FROM $tablename 
    };

print $check_table,$/;

my $probe1 = $dbh1-&gt;selectall_arrayref($check_table);
my $probe2 = $dbh2-&gt;selectall_arrayref($check_table);

print "$db1\t $probe1-&gt;[0]-&gt;[0]\t $probe1-&gt;[0]-&gt;[1]\n";
print "$db2\t $probe2-&gt;[0]-&gt;[0]\t $probe2-&gt;[0]-&gt;[1]\n";

my $result = (($probe2-&gt;[0][0] ne $probe1-&gt;[0][0]) 
    or ($probe2-&gt;[0][1] ne $probe1-&gt;[0][1])) ?
        "DIFFERENCE FOUND" :  "NO DIFFERENCE" ; 
 
print "$result\n";

# returns the list of fields, ready to insert into the CRC query
sub get_fields {
    my ($dbh, $tablename) = @_;
    my $sth = $dbh-&gt;prepare(qq{describe $tablename});
    $sth-&gt;execute();
    my @fields=();
    while (my $row = $sth-&gt;fetchrow_hashref()) {
        # discards TIMESTAMP fields from the comparison
        next if lc $row-&gt;{Type} eq 'timestamp';
        my $field ="`$row-&gt;{Field}`";
        # if the field is nullable,
        # then a COALESCE function is used
        # to prevent the whole CONCAT from becoming NULL
        if (lc $row-&gt;{Null} eq 'yes') {
            $field = qq[coalesce($field,"#NULL#")];
        }
        push @fields, $field;
    }
    return join ",", @fields; 
}</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
