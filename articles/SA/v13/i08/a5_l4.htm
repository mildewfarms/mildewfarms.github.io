<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i08: Listing 4 compare_counts.pl</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a5.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_f2b.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a5_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink">Listing 4</span></td>
		<td><a href="../../../../source/SA/2004/aug2004.tar"><b class=codeListing>aug2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 4 </B><I>compare_counts.pl: Finding missing records 
              from remote tables</i></h2>
            <p> 
            <pre>#!/usr/bin/perl -w
# compare_counts
# (C) Giuseppe Maxia 2003
# Compare two tables in two remote databases, looking for missing records.
# If the global count is different, compares the tables group by group
# and returns the missing records.
# It does not find records that are missing in the same number, in both 
# tables and in the same group. For such cases, the find_differences script 
# must be used.
use strict;
use DBI;

# This script is for educational purposes only.
# Parameters are embedded in the script itself.
# For production, it woyld be better to use either
# a config file or any Getopt::XX modules
my $host1 = "localhost";
my $host2 = "192.168.59.9";

my $db1 = "xcompany";
my $db2 = "xcompany";
my $tablename = "employees";

# primary key of the table
my $PK = "employee_code";

# Grouping column, with eventually a formula to obtain it
# (Used in the field list of a SELECT statement)
my $grouping_col = qq{FLOOR(employee_code / 1204)};
# alias for grouping column, to be used in the GROUP BY clause
my $grouping_alias = "empcode";

my ( $user1, $password1 ) = ( 'myuser', 'secret' );
my ( $user2, $password2 ) = ( 'myuser', 'secret' );

my $dbh1 =
  DBI-&gt;connect( "DBI:mysql:$db1;" . "host=$host1", $user1, $password1,
    { RaiseError =&gt; 1, PrintError =&gt; 0 } )
  or die "can't connect : $DBI::errstr";

my $dbh2 =
  DBI-&gt;connect( "DBI:mysql:$db2;" . "host=$host2", $user2, $password2,
    { RaiseError =&gt; 1, PrintError =&gt; 0 } )
  or die "can't connect : $DBI::errstr";

unless ( grep { $_ eq $tablename } $dbh1-&gt;tables() ) {
    die "$tablename not found in $db1\n";
}

unless ( grep { $_ eq $tablename } $dbh2-&gt;tables() ) {
    die "$tablename not found in $db2\n";
}

compare_counts();

$dbh1-&gt;disconnect();
$dbh2-&gt;disconnect();

sub compare_counts {
    my $count_query = qq{SELECT COUNT(*) FROM $tablename};
    my ($count1) = @{ $dbh1-&gt;selectcol_arrayref($count_query) };
    my ($count2) = @{ $dbh2-&gt;selectcol_arrayref($count_query) };
    if ( $count2 == $count1 ) {
        print "Table $tablename in $db1 and in $db2 ",
            "have the same number of records\n";
        return;
    }
    my $get_counts_query = 
      qq{SELECT $grouping_col AS $grouping_alias, COUNT(*) FROM $tablename 
         GROUP BY $grouping_alias };
    my $get_PK_query = qq{SELECT $PK FROM $tablename WHERE $grouping_col = ? };

    # gets the counts for each range
    my $set1         = get_counts( $dbh1, $get_counts_query );
    my $set2         = get_counts( $dbh2, $get_counts_query );
    my %differences  = ();

    # finds the groups in server2 missing from server 1
    for ( keys %$set2 ) {
        if ( not exists $set1-&gt;{$_} ) {
            my $missing_columns =
              get_columns( $dbh2, $get_PK_query, $set2-&gt;{$_}-&gt;[0] );
            print "missing from $db1 (whole group $set2-&gt;{$_}-&gt;[0] ):",
              " @$missing_columns\n";
        }
    }
    # finds the groups in server1 missing from server2
    for ( keys %$set1 ) {
        my ( $dbh, $db, $columns ) = ( undef, undef, undef );
        if ( not exists $set2-&gt;{$_} ) {
            my $missing_columns =
              get_columns( $dbh1, $get_PK_query, $set1-&gt;{$_}-&gt;[0] );
            print "missing from $db2 (whole group $set1-&gt;{$_}-&gt;[0] ):",
              " @$missing_columns\n";
        }
        # establishes which set is smaller and gets the primary key from
        # the lesser one.
        elsif ( $set1-&gt;{$_}[1] &gt; $set2-&gt;{$_}[1] ) {
            $columns = get_columns( $dbh2, $get_PK_query, $set2-&gt;{$_}-&gt;[0] );
            $db      = $db1;
            $dbh     = $dbh1;
        }
        elsif ( $set2-&gt;{$_}[1] &gt; $set1-&gt;{$_}[1] ) {
            $columns = get_columns( $dbh1, $get_PK_query, $set1-&gt;{$_}-&gt;[0] );
            $db      = $db2;
            $dbh     = $dbh2;
        }
        # if the count is the same for this group, do nothing
        else {
            next;
        }
        # gets the missing record from the server with the most 
        # records in this group by comparing with the list taken 
        # from the lesser server
        my $group                = $set1-&gt;{$_}-&gt;[0];
        my $get_missing_PK_query =
            qq{SELECT $PK FROM $tablename WHERE $grouping_col = $group 
            AND $PK NOT IN (}
          . join ( ",", map { $dbh-&gt;quote($_) } @$columns ) . ")";
        my $missing_cols = $dbh-&gt;selectcol_arrayref($get_missing_PK_query);
        print "missing from ", ( ( $db eq $db1 ) ? $db2 : $db1 ),
          " (missing lines): @$missing_cols\n";
    }
}

# returns the first column of one query with a specific parameter
sub get_columns {
    my ( $dbh, $query, $param ) = @_;
    my $sth = $dbh-&gt;prepare($query);
    $sth-&gt;execute($param);
    my @columns = map { $_-&gt;[0] } @{ $sth-&gt;fetchall_arrayref() };
    return \@columns;
}

# returns the set of counts converted into a hash
sub get_counts {
    my ( $dbh, $query ) = @_;
    my $sth = $dbh-&gt;prepare($query);
    $sth-&gt;execute();
    my %set = ();
    while ( my $row = $sth-&gt;fetchrow_arrayref() ) {
        $set{ $row-&gt;[0] } = [ $row-&gt;[0], $row-&gt;[1] ];
    }
    return \%set;
}</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
