<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i09: Strictly Speaking about &quot;use strict&quot;</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/sep2004.tar"><b class=codeListing>sep2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <p> 
            <H1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Strictly 
              Speaking about "use strict"</h1>
            <P> <I>Randal L. Schwartz</i> 
            <p>In many of my writings about Perl, I give the strong admonition 
              to place <B>use strict</B> at the beginning of the program. I've 
              often explained the line with a few short phrases, but I thought 
              it would be interesting to focus on this one construct in detail 
              for a change. 
            <P> The <B>use strict</B> line is a <I>pragma</I>. The purpose of 
              a pragma is to regionally or globally alter the way the language 
              is translated for execution. For the <B>strict</B> pragma, we get 
              three sub-features enabled or disabled within a particular <I>program 
              scope</I>. The scope extends to the end of the curly-brace-delimited 
              block in which the pragma appears or to the end of the file if otherwise 
              outside all blocks. Inner pragma controls override outer controls, 
              so we can get as specific as needed to process a particular chunk 
              of code.
            <P> The <B>use strict</B> pragma has three aspects: <B>vars</B>, <B>subs</B>, 
              and <B>refs</B>. Each aspect may be enabled or disabled individually 
              by explicit name but, most often, all three are enabled at once 
              with a simple <B>use strict</B>. For example, we can enable all 
              three aspects initially and disable just the <B>vars</B> aspect 
              for a portion of the code, like so:
            <P> 
            <pre>
use strict; # all enabled
...
sub marine {
  no strict 'vars'; # disable vars
  ...
}
# all enabled again
</pre>
            The <B>vars</B> aspect is probably the most useful of the three aspects 
            and is the one most likely to give trouble to a beginner. Scalar, 
            array, and hash variables are mapped into package and lexical variables 
            using one of five methods. The <B>vars</B> aspect disables one of 
            these methods, leaving the remaining four enabled.
            <P> For example, the variable <B>$bammbamm</B> might be referring 
              to a lexical variable named <B>$bammbamm</B>, introduced earlier 
              in the same scope through the use of the <B>my</B> declaration, 
              as in:
            <P> 
            <pre>
my $bammbamm = 5;
...
print $bammbamm; # lexical $bammbamm in scope
</pre>
            Or, it might be a package variable declared earlier by <B>use vars</B> 
            in the same package, such as:
            <P> 
            <pre>
package This::One;
use vars qw($bammbamm);
...
print $bammbamm; # same as $This::One::bammbamm
...
package That::One;
# $bammbamm no longer legal here
</pre>
            The variable name might also be declared through the <B>our</B> declaration, 
            which associates a simple name with a package variable in the current 
            package for the remainder of the scope. For example:
            <P> 
            <pre>
package This::One;
sub nominal {
  our $bammbamm; # $bammbamm is $This::One::bammbamm
  ...
  package That::One;
  print $bammbamm; # still prints $This::One::bammbamm
}
# $bammbamm is no longer permitted
</pre>
            Or, if the name contains a package delimiter (double colon), it's 
            an explicit use of a package variable:
            <P> 
            <pre>
package This::One;

print $This::One::bammbamm; # always permitted
</pre>
            Finally, the variable <B>$bammbamm</B> may be just a package variable 
            in the current package, if no prior declaration exists:
            <P> 
            <pre>
package This::One;
print $bammbamm; # $This::One::bammbamm;
package That::One;
print $bammbamm; # $That::One::bammbamm;
</pre>
            It is this particular method that is disabled by <B>use strict</B>, 
            because it can lead to the most errors in larger programs. By default, 
            any mention of any simple scalar, array, or hash name is simply accepted 
            as a package variable in that package, even if the name is a typo!
            <P> By enabling <B>use strict 'vars'</B>, the troublesome automatic 
              acceptance of any variable name is prevented, forcing you to declare 
              your variables through one of the other methods. This isn't all 
              that important on a five-line program, but I have rarely seen any 
              program stay at only five lines unless it was a one-off task.
            <P> The <B>subs</B> aspect of <B>use strict</B> disables the interpretation 
              of "barewords" as text strings. By default, a Perl identifier (a 
              sequence of letters, digits, and underscores, not starting with 
              a digit unless it is completely numeric) that is not otherwise a 
              built-in keyword or previously seen subroutine definition is treated 
              as a quoted text string:
            <P> 
            <pre>
@daynames = (sun, mon, tue, wed, thu, fri, sat);
</pre>
            However, this is considered a dangerous practice, because obscure 
            bugs may result:
            <P> 
            <pre>
@monthnames = (jan, feb, mar, apr, may, jun,
               jul, aug, sep, oct, nov, dec);
</pre>
            Can you spot the bug? Yes, the 10th entry is not the string <B>oct</B>, 
            but rather an invocation of the built-in <B>oct()</B> function, returning 
            the numeric equivalent of the default <B>$_</B> treated as an octal 
            number. And if you wrote this program in April, you might not even 
            notice that it breaks for six months. I'm not saying that this has 
            happened to anyone I know, because I believe I'm protected from self-incrimination.
            <P> Although the problem arises mostly from collisions with built-in 
              words, simply watching for built-ins is insufficient. Suppose we 
              added a <B>sun</B> function earlier in the same scope:
            <P> 
            <pre>
sub sun { ... }
</pre>
            Now our first day name is also messed up, being a call to the subroutine 
            instead of the three-character string. But it's not sufficient to 
            simply scan in the source text for a same-named subroutine. The name 
            can also be imported from other code by one of the earlier <B>use</B> 
            directives!
            <P> So, the proper method out of this madness is to avoid the use 
              of "bare" words in most circumstances. This list of day names can 
              be created easily with <B>qw()</B> instead:
            <P> 
            <pre>
my @daynames = qw(sun mon tue wed thu fri sat);
</pre>
            And now there's no possibility of conflict, because we're using a 
            quoted string instead of a bareword. The nifty part is that <B>use 
            strict 'subs'&gt;</B> (included as part of use strict) takes care 
            of enforcing this automatically. Once enabled, barewords will be flagged 
            while the program is being parsed, before execution even begins.
            <P> Note that barewords are still permitted in a few specific locations. 
              For example, the key to a hash can always be specified as a bareword:
            <P> 
            <pre>
my $age = $data{age}; # same as $data{"age"}
</pre>
            Also, the left side of a "fat arrow" is also automatically quoted 
            if it resembles a bareword:
            <P> 
            <pre>
my %data = (age =&gt; 19); # same as ("age", 19)
</pre>
            These two automatic quotings make working with hashes with program-significant 
            keys easier, presuming the keys you choose are all barewords.
            <P> Finally, a pre-declared subroutine can be treated as a subroutine 
              call, even if the definition of the subroutine had not yet been 
              seen:
            <P> 
            <pre>
sub deeper; # declaration
...
my $result = deeper;
</pre>
            I don't recommend this practice, since it is just as easy (and clearer) 
            to follow the subroutine call with empty parens:
            <P> 
            <pre>
my $result = deeper();  # no declaration needed
</pre>
            The final aspect of the <B>use strict</B> pragma is the disabling 
            of <I>soft references</I> (or <I>symbolic references</I>). Normal 
            references (sometimes called <I>hard references</I> to distinguish 
            them from soft references) come from an explicit referencing operation:
            <P> 
            <pre>
my $ref = \@foo;  # now $ref is a reference to @foo
</pre>
            or from one of the anonymous reference constructors:
            <P> 
            <pre>
my $ref2 = [3, 4, 5];  # array reference created
</pre>
            An auto-vivification will also create a hard reference:
            <P> 
            <pre>
my $ref3; # variable is undef initially
$ref3-&gt;[5] = 10; # $ref3 is now an array reference
</pre>
            Following this reference using a dereferencing operation gets us back 
            to the original data:
            <P> 
            <pre>
print $ref2-&gt;[2]; # prints 5, from the anon array
</pre> <p>However, the dereferencing operation can also be 
              performed against a simple scalar string:
            <P> 
            <pre>
my $sref = "happy";
$sref-&gt;[3] = "hello"; # symbolic reference
</pre>
            This dereferencing is performed at execution time. Perl looks up the 
            value to be dereferenced, notes that it is not a hard reference, and 
            then examines the package variable symbol table for a same-named variable. 
            Because package variables spring into existence as needed, nearly 
            any name in <B>$sref</B> will be considered legal, causing new variables 
            to be created dynamically.
            <P> As if that weren't already scary enough, the variable name does 
              not need to be a standard Perl identifier. Any string will do:
            <P> 
            <pre>
my $sref = "A [variable] {name} !normally! *illegal*";
$$sref = 12;
</pre> <p>We now have a scalar package variable in the current 
              package with a very crazy name.
            <P> Because of the likelihood of an accidental symbolic dereference 
              operation, the <B>use strict 'refs'</B> aspect is recommended for 
              every program that uses references.
            <P> If all three of these restrictions are good, why are they not 
              enabled by default? The answer is "backward compatibility". Perl 
              version 4 (last updated more than a decade ago) permitted casual 
              variable naming (and didn't have any option for lexically declared 
              variables), didn't have the convenient <B>qw()</B> for defining 
              lists of short values, and used soft references for indirect subroutine 
              invocation. Thus, adding <B>use strict</B> by default would have 
              broken nearly every Perl version 4 program!
            <P> But Perl4 is now long dead. Be sure to <B>use strict</B> in your 
              modern Perl5 programs, and you'll get a guaranteed reduction in 
              development time or double your money back! Until next time, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I>
            <h1>&nbsp;</h1>
            </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
