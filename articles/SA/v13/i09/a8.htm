<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i09: PHP and XML</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/sep2004.tar"><b class=codeListing>sep2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a8.gif" width="200" height="167" align="right">PHP 
              and XML</B></h1>
            <P> <I>Russell J.T. Dyer</i>
            <p> XML is very useful in standardizing data that's shared between 
              diverse systems. Most databases and programs can export and import 
              plain text and that's all XML is. So if you've been asked to interface 
              data from your organization's system with the system of another 
              organization, consider using XML for the exchange. It's an agreeable 
              medium.
            <P> In this installment of my series on PHP, I will explore a basic 
              script (<B>books-xml.php</B>) that retrieves data on books from 
              a fictitious library database stored in MySQL and generates XML 
              tags in which to wrap the data. I'll follow this with an explanation 
              of another script (<B>books-xml-extract.php</B>) that extracts data 
              from an XML source, from the first script.
            <P> <B>Retrieving Data from MySQL</B>
            <P> The first task of the XML generation script is to get the data 
              from MySQL. To do that, the script will begin like this:
            <P> 
            <pre>
&lt;?php

   require_once('DB.php');

   $user = 'russell';
   $pw = 'dyer';
   $host = '127.0.0.1';
   $db = 'library';

   $dbh = DB::connect("mysql://$user:$pw@$host/$db");

   if(DB::iserror($dbh)) {
      die($dbh-&gt;getMessage());
   }

   $sql = "SELECT book_id, title, country, author_name
           FROM books, authors
           WHERE books.author_id = authors.author_id
           LIMIT 2";
   $q = $dbh-&gt;query($sql);

   if(DB::iserror($q)) {
      die($q-&gt;getMessage());
   }
</pre>
            After announcing the start of a PHP script, PHP is told to call in 
            the PEAR package DB.php using the <B>require_once()</B> function. 
            If you don't have DB.php installed on your server, you can obtain 
            a copy from:
            <P> 
            <pre>
http://pear.php.net
</pre>
            The following stanza creates some variables that contain the login 
            information for connecting to MySQL. The next couple of lines of code 
            make the connection and test for success. After that, an SQL statement 
            is put together, and the database is queried with it. This was a rather 
            quick run through the code, but in last month's issue of <I>Sys Admin</I> 
            magazine I provided more details on how to interface PHP with MySQL 
            (<B>http://www.samag.com/documents/s=9238/sam0408c/</B>). In this 
            article, I'm mainly focusing on PHP with XML.
            <P> <B>Generating XML</B>
            <P> There are many ways to generate XML code with PHP. After all, 
              XML is just plain text. You could simply print out the tags with 
              a series of loop statements, for instance, but that could be tedious. 
              Fortunately, there's a much more professional method with PHP that 
              makes use of DOM (Document Object Model). It requires version 4.3 
              or higher of PHP and libxml. A recent version of PHP can be obtained 
              from:
            <P> 
            <pre>
http://www.php.net
</pre>
            You can obtain a current version of libxml here:
            <P> 
            <pre>
http://www.xmlsoft.org
</pre>
            Generating XML using DOM is fairly easy. One reason is because it's 
            an object-oriented method. You just start off with a document root, 
            a main object, and then create children of it. With each child you 
            can add attributes. Objects are just piled up until the end, and then 
            they're all dumped into a tidy XML document:
            <P> 
            <pre>
$dom = domxml_new_doc('1.0');

$root = $dom-&gt;create_element('books');
$books = $dom-&gt;append_child($root);
</pre>
            These lines of code follow the MySQL excerpt from earlier. The first 
            line generates an XML header. Incidentally, the names of the variables 
            (e.g., <B>$dom</B>) can be anything. The next line creates an object, 
            the root element of the new document. All other elements after this 
            will be enclosed in this root tag. The last line above is necessary 
            to append the element created. One creates; the other appends. Before 
            proceeding, let's look at the tenative results of this bit of a script:
            <P> 
            <pre>
&lt;?xml version="1.0"?&gt;
&lt;books&gt;
...
&lt;/books&gt;
</pre>
            It's not much, but it's a start. The ellipses that I've manually inserted 
            are where the data for each book will go. To work through the data 
            from MySQL, a <B>while</B> statement will be deployed.
            <P> 
            <pre>
while($q-&gt;fetchInto($row)) {
   list($book_id, $book_title, $country, $author_name) = $row;

   $book = $books-&gt;append_child($dom-&gt;create_element('book'));

   $title = $book-&gt;append_child($dom-&gt;create_element('title'));
   $title_text = $dom-&gt;create_text_node("$book_title");
   $title-&gt;append_child($title_text);
   $title-&gt;set_attribute('book_id',"$book_id");

   $author = $book-&gt;append_child($dom-&gt;create_element('author'));
   $author-&gt;append_child($dom-&gt;create_text_node("$author_name"));
   $author-&gt;set_attribute('country',"$country");
}
</pre>
            Using the object <B>$q</B> that was created earlier and that contains 
            the results of the <B>query()</B>, the function <B>fetchInto()</B> 
            is used to extract one row of data at a time, and each row is placed 
            into a temporary array (<B>$row</B>). The first line of the statement 
            block for the <B>while</B> statement parses the array <B>$row</B> 
            using <B>list()</B>.
            <P> Next, we create and append the XML element <B>&lt;book&gt;</B>, 
              which will contain the data for a book. Notice that this time the 
              two processes are combined into one statement. Either way is fine. 
              Now PHP is ready for the data. First, it generates an XML tag for 
              each book's title. Second, it sets an attribute using the <B>set_attribute()</B> 
              function to store the book's identification number. Notice that 
              the variable <B>$book_id</B> is enclosed in double-quotes. This 
              is necessary to interpolate the data. Single-quotes won't work.
            <P> To place the title of the book within the opening and closing 
              tags of <B>&lt;title&gt;</B>, the function <B>create_text_node()</B> 
              is used. The same set of functions is used to generate tags for 
              the author, but with a couple of additionally steps consolidated. 
              Once all of the rows of data have been fetched and the DOM objects 
              created, the <B>while</B> statement will terminate. Using a simple 
              <B>echo</B> and the <B>dump_menu()</B> function, the stored XML 
              objects are dumped:
            <P> 
            <pre>
echo $dom-&gt;dump_mem(true);

$dbh-&gt;disconnect();

?&gt;
</pre>
            For good form, PHP is instructed to disconnect from MySQL. This concludes 
            the script -- without a bit of HTML. The results of the script will 
            look something like this:
            <P> 
            <pre>
&lt;?xml version="1.0"?&gt;
&lt;books&gt;
  &lt;book&gt;
    &lt;title book_id="10"&gt;If on a winter's night a traveler&lt;/title&gt;
    &lt;author country="Italy"&gt;Italo Calvino&lt;/author&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title book_id="12"&gt;Marcovaldo&lt;/title&gt;
    &lt;author country="Italy"&gt;Italo Calvino&lt;/author&gt;
  &lt;/book&gt;
&lt;/books&gt;
</pre>
            The nice layout shown here is how DOM organized it, including the 
            indents. If you experiment with this script, open it in a Web browser, 
            and then view the source. Of course, you'll have to make adjustments 
            for your database.
            <P> <B>Extracting Data from XML</B>
            <P> The other goal of this article is to develop a script that will 
              extract data from an XML document. To do this easily, DOM will be 
              enlisted again. For this script, it will be assumed that the script 
              will be run from the command line, either manually or through <B>cron</B>:
            <P> 
            <pre>
#!/usr/bin/php -q

&lt;?

... // Connect to MySQL

$dom = domxml_open_file('http://127.0.0.1/php-xml.php');

$books = $dom-&gt;document_element();
</pre>
            The first line provides the path and all for PHP because it's going 
            to be run without the direct assistance of the Apache Web server. 
            The next set of lines, substituted with ellipses, are the same as 
            in the last script for connecting to MySQL. This is in preparation 
            to save data extracted from the XML document to MySQL. The next line 
            opens the XML document by way of the script that we just reviewed.
            <P> Notice that the file path includes an IP address. For testing, 
              I'm just using the localhost address, but this could just as easily 
              be an Internet address or a domain name. Incidentally, PHP is accessing 
              a dynamically created XML document here. It doesn't have to be a 
              flat text file for XML to be extracted. After making the connection 
              to the XML document, PHP then captures the document root and all 
              of its child elements by using the <B>document_element()</B> function.
            <P> With the data in hand, it's just a matter of processing each node 
              to extract the data. There are several ways that this may be done. 
              Because I know basically what the data looks like and the order 
              in which it will be obtained, I've taken a more straightforward 
              method using a <B>foreach</B> loop with a set of <B>if</B> statements 
              to process the data differently depending on the type of XML node 
              and on which node:
            <P> 
            <pre>
foreach ($books-&gt;child_nodes() as $book) {

   if($book-&gt;has_child_nodes()) {

      foreach($book-&gt;child_nodes() as $child_node) {

         if($child_node-&gt;node_type()  ==   XML_ELEMENT_NODE) {
            $child_node_name = $child_node-&gt;node_name();
            $data_array[] = $child_node-&gt;get_content();
         }

         if($child_node-&gt;has_attributes()) {
            if($child_node_name == 'title') {
               $attribute_name =
               $child_node-&gt;get_attribute_node('book_id');
               if($attribute_name) {
                  $data_array[] = $attribute_name-&gt;value();
               }
            }
         }

         if($child_node-&gt;has_attributes()) {
            if($child_node_name == 'author') {
               $attribute_name =
               $child_node-&gt;get_attribute_node('country');
               if($attribute_name) {
                  $data_array[] = $attribute_name-&gt;value();
               }
            }
         }
      }
</pre>
            The initial node of the <B>books</B> node is going to be a <B>book</B> 
            node. The <B>foreach</B> loop extracts one <B>book</B> node at a time 
            and places the object in the variable <B>$book</B>. The first statement 
            of the <B>foreach</B> block tests whether the node has children, nodes 
            under it, using the <B>has_child_nodes()</B> function.
            <P> After that, for each child node found, it will check to see what 
              kind of node it's examining. There are couple ways of doing this. 
              One is the first method shown -- PHP tests whether the node is an 
              element. The <B>title</B> and <B>author</B> nodes are in this category, 
              so the first <B>if</B> statement will process those nodes and add 
              them to an array that PHP will use to create an SQL statement later.
            <P> Another simple method of testing a node is to see whether its 
              name equals a certain value. For attributes, PHP is using that method. 
              It first tests whether the child node has attributes and then determines 
              the child node's name. That name will dictate the value for the 
              argument of the function <B>get_attribute_node()</B> that PHP will 
              use to get the particular attribute node. From there, the function 
              <B>value()</B> is used to extract the value of the attribute. Once 
              the nodes for a book have been processed, the data can be saved 
              to MySQL like so:
            <P> 
            <pre>
      $title = mysql_escape_string($data_array[0]);

      $sql = "INSERT INTO xml_test
              VALUES('$data_array[1]', '$title',
              '$data_array[2]', '$data_array[3]')";
      $q = $dbh-&gt;query($sql);

      if(DB::iserror($q)) {
         die($q-&gt;getMessage());
      }

      unset($data_array);
   }
}
   $dbh-&gt;disconnect();

?&gt;
</pre>
            Because one of the book titles has an apostrophe in the name, the 
            first line here uses <B>mysql_escape_string()</B> to escape the apostrophes 
            with a back-slash contained in the element of the <B>$data_array</B> 
            array that holds the book's title. The rest of the elements are added 
            to the SQL statement in the next line without being pre-processed.
            <P> Next, PHP sends the SQL statement to MySQL using the database 
              handle set up at the beginning of the script and with the function 
              <B>query()</B>. Provided no errors are generated, the array is dropped 
              using <B>unset()</B> so that more data is not appended to the end 
              of the array during the next loop through the <B>foreach</B> statement, 
              causing the first book to be re-inserted into the database.
            <P> <B>Conclusion</B>
            <P> There are many ways in which XML documents can be generated with 
              PHP, and there are probably just as many ways to extract data from 
              an XML document. There are several XML functions in PHP and more 
              are added each year. Getting what you want out of PHP just requires 
              a little bit of experimentation.
            <P> <I>Russell Dyer is a Perl programmer, a MySQL developer, and a 
              Web designer living and working on a consulting basis in New Orleans. 
              He is also an adjunct instructor at a technical college where he 
              teaches Linux and other open source software. He can be reached 
              at <B>russell@dyerhouse.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
