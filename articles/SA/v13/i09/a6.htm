<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i09: Using LSD to Sync a Solaris Environment</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a6_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a6_f6.htm">Figure 6</a></span></td>
		<td><span class="navbarLink"><a href="a6_f7.htm">Figure 7</a></span></td>
		<td><span class="navbarLink"><a href="a6_f8.htm">Figure 8</a></span></td>
		<td><span class="navbarLink"><a href="a6_f9.htm">Figure 9</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_f10.htm">Figure 10</a></span></td>
		<td><span class="navbarLink"><a href="a6_s1.htm">Sidebar</a></span></td>
		<td><span class="navbarLink"><a href="a6_t1.htm">Table 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_t2.htm">Table 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_t3.htm">Table 3</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_t4.htm">Table 4</a></span></td>
		<td><span class="navbarLink"><a href="a6_t5.htm">Table 5</a></span></td>
		<td><span class="navbarLink"><a href="a6_t6.htm">Table 6</a></span></td>
		<td><a href="../../../../source/SA/2004/sep2004.tar"><b class=codeListing>sep2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a6.gif" width="200" height="167" align="right">Using 
              LSD to Sync a Solaris Environment</B></h1>
            <P> <I>Justin Buhler</i>
            <p> Currently, my team and I manage more than 400 Sun servers for 
              the Athens 2004 Olympic Summer Games. From previous events (see 
              Problem Profile sidebar), I learned that we had a definite need 
              for a centralized Unix software distribution utility. In this article, 
              I will show how we have used the versatility of an LDAP directory, 
              vendor's standard packaging, and a little Perl to achieve centralized 
              and secure software distribution.
            <P> <B>Architecture Overview</B>
            <P> We often forget to keep things simple when developing a solution 
              to solve a particular problem. But, keeping it simple is the philosophy 
              behind the LSD (LDAP Software Distribution) framework we created 
              for our environment. This framework is made of the five components 
              shown in Table 1. There are some additional pieces that provide 
              a little more security in the overall process, such as MD5sum(s) 
              and the SSH framework for transferring files (SCP).
            <P> Let's start with an example of how LSD works before jumping into 
              the details of the LSD framework. Figure 1 shows two examples of 
              the framework in action. These examples are based on listing (auditing) 
              missing packages and then fixing (correcting) the missing packages.
            <P> Now let's look at some of the nuts and bolts of the LSD framework 
              and see how you can use the tools to sync your Solaris environment.
            <P> <B>LSD Packages</B>
            <P> The Solaris environment has a standard package format, which comes 
              with its own software management framework, which includes version 
              control and auditing. Richard Elling has written a great series 
              of articles that cover the management of Solaris systems using Solaris 
              packaging. (See the references.)
            <P> The LSD framework is built completely around the Solaris package 
              format and its pkginfo file. Therefore, you must have a very good 
              understanding of the Solaris packaging format and requirements in 
              order to really master the concept of LSD.
            <P> Table 2 shows the key points that are required by LSD framework 
              regarding the use of the pkginfo file when building software to 
              be managed by LSD. The package factory is where all packages are 
              built and tested. All of our packages have standard directory structure 
              and consistent build process using a Master Makefile. The result 
              of the build process is a compressed software package with the following 
              "mandatory" naming convention.
            <P> <B>LSD Software Package: LSDtop-1.0.pkg</B>
            <P> The software factory and structure are shown in Figure 2.
            <P> The package depot is the only important element for the LSD framework; 
              however, the package factory should be managed diligently since 
              you must trust the package built from it. For further information 
              on building Solaris packages, see the Application Developers' Guide. 
              See Figure 3 for an example of the LSD package factory.
            <P> <B>LSD Agent</B>
            <P> The LSD Agent is where all the "magic" occurs and was developed 
              using Perl and some additional Perl modules. I have tried to make 
              it as functional and reusable as possible. Below is a table of all 
              the Perl modules required by the LSD framework, and it should be 
              installed on all of the client servers. All the Perl modules not 
              already included with the standard Perl distribution listed in Table 
              3 or the LSD framework are available for download from CPAN. The 
              Perl version I used is Perl-5.8.3 from <B>www.sunfreeware.com</B>.
            <P> The Agent script, lsdagent.pl (see Listings 1 and 2), contains 
              the options shown in Figure 4. The definition to each option of 
              the lsdagent.pl script is shown in Table 4.
            <P> The Agent checks the LDAP Registry and then the Agents Registry 
              in /var/sadm. The Agent considers the registry the baseline for 
              all software that should be installed on the client server. It then 
              reports the status of the Agent if the <B>-list</B> option has been 
              selected (see Figure 5).
            <P> <B>Agent Configuration Overview</B>
            <P> To make the Agent a little more portable, I have tried to keep 
              it from being environment-specific. This is because the tool needs 
              to be used for other projects, which may have different naming conventions. 
              Thus, there is a configuration section at the beginning of the script, 
              which allows for customization of the Agent.
            <P> The Agent uses the operating systems commands /usr/sbin/pkgadd 
              and /usr/sbin/pkgrm to perform all of the installations. The Agent 
              will only install software, which is identified by the registry 
              as being approved for the host based on the values in the [lsdhost] 
              attribute. The comparison of the rules is done by the Agent, so 
              you can determine the identifier the Agent uses to approve software 
              to be installed. See the lsdagent.pl configuration section for details.
            <P> The following are guidelines for the Agent to successfully interact 
              within the LSD framework:
            <P> 
            <P> 1. You must have a local account configured on the Agent and Depot 
              servers for downloading software from the registry. This account 
              is used to retrieve software across the LAN or WAN using SCP and 
              Public-Key Authentication.
            <P> 2. You must generate SSH public and private keys without a passphrase, 
              using the locally created account, which will be used to download 
              software from the registry. The private key must be installed on 
              all systems, whereas the public key will only need to be installed 
              into the depot server:
            <P> 
            <pre>
## LSD Agent Depot Account
my $lsduser = 'softdist'; # Local Account
my $lsdkey = "/home/$lsduser/.ssh/id_rsa"; # Private Key
my $lsdlocaldepot = "/home/softdist/data"; # Local Package spool directory
</pre>
            3. You must have permission to read the packages on the depot server. 
            This is achieved by creating the identical local account on the depot 
            server, using the same UID and GID.
            <P> 4. You must configure the correct CATEGORY the agent should look 
              for. You need to separate each category with a space:
            <P> 
            <pre>
## LSD Package PKGINFO Categories
## Package category used to find
## software locally in /var/sadm.
####################################
my @lsdcategories = qw(LSD);
</pre> <b>LSD Registry</B>
            <P> The Registry is an LDAP directory with each entry representing 
              a software package. The LDAP server that we are using is SUNONE 
              5.2, which allows for easy customization of the schema. The schema 
              consists of the attributes/value pairs found in a standard Solaris 
              package. The schema is also configured to include some additional 
              attribute/value pairs for the LSD application. Table 5 contains 
              the additional LSD value names and descriptions.
            <P> Each LDAPAttribute value is populated by the information found 
              within the Solaris package (pkginfo -l ). All of this additional 
              information is gathered during the software registration process 
              using the lsdregsitry.pl script (Listing 3).
            <P> Registration is the process in which you take a tested package 
              and update the registry with the packages information (see Figure 
              6):
            <P> <b>-pkg [/path/to/the/software/pkg-x.x.pkg]</B> -- Package to 
              be registered or modified in the LSD registry
            <P> <B>-version</B> -- Version of the script
            <P> <B>-debug</B> -- Print debugging information for troubleshooting
            <P> 
            <P> I have made the lsdregistry.pl command portable by including a 
              configuration section at the beginning of the script, which allows 
              for customization of the registry software. This must be completed 
              before using the script to register software.
            <P> Here are some guidelines for successfully registering software 
              within the LSD framework:
            <P> 
            <P> 1. Review and complete configuration section of the lsdregistry.pl 
              command.
            <P> 2. You must have an account with add/modify permission on the 
              LDAP directory. The lsdregistry.pl command prompts for your user 
              name and password.
            <P> 3. The software package "must" have all fields completed correctly.
            <P> 
            <P> Figure 7 provides an example of registering the SLBtop-2.0.pkg 
              software package. Figure 8 is the schema definition, which is used 
              to create our LSD registry, and Figure 9 shows an example LDAP entry.
            <P> <B>Security Note</B>
            <P> One of the principle reasons for having the registry is that it 
              is considered a global trusted reference. We trust the registry 
              to provide correct information regarding the version, location, 
              and integrity (md5) for the packages that are destined for the client 
              system. Therefore, the registry must be secured correctly. LDAP 
              security is outside the scope of this document. However, here are 
              some keys points regarding to the LSD framework: 
            <ul>
              <li> lsdagent.pl requires LDAPDN and Password to BIND/SEARCH. 
              <li> lsdregistry.pl requires LDAPDN and Password -- BIND/ADD/MODIFY.
            </ul>
            <P> Optional items that could further enhance the security: 
            <ul>
              <li> Disable anonymous access to listing the contents of packages. 
              <li> Add TLS authentication to lsdagent.pl.
            </ul>
            <B>LSD Depot</B>
            <P> The Depot consists of "ready" or "tested" versions of the LSD 
              software that are located centrally on the network for the LSD agents 
              to download using SCP. Our current Depot server is a Sun Fire 280R 
              configured with some external storage for additional capacity.
            <P> A package must be registered into the LSD registry in order to 
              be made available for the environment. The Agent uses the "lsdlocation" 
              field from the software entry to locate the package on the network 
              first. It tries to verify the IP address is up by pinging it. If 
              successful, the Agent uses SCP to download the software package 
              (see Figure 10).
            <P> Guidelines for the Agent to successfully interact with the Depot:
            <P> 
            <ul>
              <li> You must have the same software distribution account locally 
                configured. 
              <li> You must have SSHD listening. 
              <li> You must configure the local account with the agent's public 
                key. 
              <li> The Agent/Local account must have permission to read the packages.
            </ul>
            <B>LSD Security Issues</B>
            <P> Now we have this great framework, but is it secure? The answer 
              is yes, but you have options. Table 6 lists some of the items we 
              have implemented and some options that could be implemented depending 
              on your own level of acceptable risk. Everyone's security requirements 
              are different, but the options let you customize the framework for 
              your needs.
            <P> <B>Configuring Restricted Shell on the Depot Server</B>
            <P> In the /etc/passwd file on the Depot Server, the following must 
              be configured for the softdist account:
            <P> 
            <P> HOMEDIR -- /Software<br>
              SHELL -- /usr/lib/rsh (restricted shell)
            <P> 
            <P> Next, move the /home/softdist/.ssh directory containing the public 
              key of the softdist account to the new HOMEDIR location and remove 
              the old location.
            <P> Create the .profile with owner and group matching the softdist 
              account in the HOMEDIR location. Set and export the PATH environment 
              variable to PATH=/Software/bin.
            <P> Create the /Software/bin directory. If you want to add some functionality 
              to the "softdist" account, create the necessary links to the commands 
              you want to allow.
            <P> Everything under /Software must have the correct owner and group 
              permissions:
            <P> 
            <P> Directories -- <B>find /Software -type d -exec chmod 750 {} \;</B><br>
              Files (Packages) -- <B>find /Software -type f -exec chmod 640 {} 
              \;</B><br>
              BaseDir (/Software) -- <B>chmod 755 /Software</B><br>
              Ownership -- <B>chown -R root:softdist</b>
            <p> This allows the softdist account using public key to collect the 
              software, but have access to do anything.
            <P> <B>Conclusion</B>
            <P> The following are some keys points that we worked through when 
              evaluating our software distribution framework:
            <P> 
            <P> 1. Our main objective was to keep the solution simple.
            <P> 2. We needed a centrally available and easily maintainable registry 
              for storing information regarding packages.
            <P> 3. The system needed to be a pull process and not a push process 
              because environments are not guaranteed to be online when updates 
              occur.
            <P> 4. The framework needed to use the vendor's software format.
            <P> 5. The installation process needed to be clearly understood and 
              simplified. For example, operating system software on the installation 
              CDs and LSD packages would equate to a complete image.
            <P> 
            <P> I hope this article has shown how, with the power and versatility 
              of LDAP and the magic of Perl, you can easily build solutions to 
              meet everyday issues, which in the end improves your productivity 
              and manageability.
            <P> <B>Wish List and References</B>
            <P> I hope to include the following items in the next version of the 
              tool:
            <P> 
            <ul>
              <li> Web-based management and report 
              <li> Rollback functionality on the Agent using the perversion attributes 
              <li> Allowing agent to have an alternate version for the host using 
                altversion attributes 
              <li> Add a <B>-generate</B> option to create lid file for LDAP server 
                installation 
              <li> Place configuration parameters into a configuration file such 
                as lsd.properties 
              <li> Convert to a Java application
            </ul>
            <B>References</B>
            <P> Elling, Richard. Rapid Recovery Techniques: Auditing Custom Software 
              Configurations. Sun BluePrints. February, 2000.
            <P> Elling, Richard. Rapid Recovery Techniques for the Solaris Operating 
              Environment. Sun BluePrints. January, 2000.
            <P> Elling, Richard. Rapid Recovery Techniques: Repairing File Ownership 
              and Mode. Sun BluePrints. December, 1999.
            <P> Elling, Richard. Rapid Recovery Techniques: Exploring the Solaris 
              Software. Sun BluePrints. October, 1999.
            <P> Application Packaging Developer's Guide -- <B>http://docs.sun.com/db/doc/817-1778</B>
            <P> Sun ONE Directory Server 5.2 Ref. Manual -- <B>http://docs.sun.com/source/816-6699-10/schemaov.html</B>
            <P> CPAN -- <B>http://search.cpan.org/</B>
            <P> SunFreeware -- <B>http://www.sunfreeware.com</B>
            <P> <I>Justin Buhler is the Senior Unix Administrator for Major Events, 
              Atos Origin. His current projects include Athens 2004 Summer Olympics 
              and Torino 2006 Winter Olympics. You can contact him at: <B>jbuhler@torino2006.it</B> 
              or <B>jpbuhler@athens2004.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
