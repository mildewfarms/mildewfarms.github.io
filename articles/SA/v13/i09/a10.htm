<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i09: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/sep2004.tar"><b class=codeListing>sep2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_questions.gif" width="245" height="130" align="right">Questions 
              and Answers</h1>
            <P> Amy Rich
            <p> <b><font size="+2">Q</font></b> Because of security concerns, 
              I need to log the RUID, RGID, EUID, EGID, and arguments of any program 
              that's run. I've considered wrapping everything with a script and 
              then having users call it for command, but that would be easy to 
              circumvent. I definitely don't want to give users elevated access 
              by allowing them to use sudo on a shell script when they need to 
              run commands as root, either. Is there any way to do this natively 
              with Solaris 8, or is there a third-party product or freeware program 
              (not shell script) that I could use?
            <P> <b><font size="+2">A </font></b> If you're running Solaris 8, 
              you can enable BSM to capture this information. Of course, if you 
              have complete root access on the machine, you can always find a 
              way around any restriction. In this case, you could just turn off 
              BSM. You'll need to edit /etc/security/audit_control on the machine 
              where you want to capture this data. The audit_control file specifies 
              which classes of events you're going to log. In a default install, 
              you'll see four directive lines:
            <P> 
            <pre>
dir:/var/audit
flags:
minfree:20
naflags:lo
</pre>
            The dir line dictates the directory name where the audit files will 
            be stored. By default, this is /var/audit. The minfree line specifies 
            the percentage of free space that must be present in the file system 
            containing the current audit file. The flags and naflags (non-attributable 
            flags) lines specify the event classes to audit. Flags matches defined 
            users while naflags matches anything else. The audit classes specified 
            in the flags and naflags directives can be audited for failure only 
            if prefixed with a <B>-</B> character, success only if prefixed with 
            a <B>+</B> character, or all events if left without a prefix. Multiple 
            flags are separated by commas with no whitespace.
            <P> The predefined audit classes are:
            <P> 
            <table width="91%" border="0" cellpadding="1">
              <tr> 
                <td><strong>Short Name</strong></td>
                <td><strong>Long Name</strong></td>
                <td><strong>Description</strong></td>
              </tr>
              <tr> 
                <td><b>no</b></td>
                <td><b>no_class</b></td>
                <td>Null value for turning off event preselection</td>
              </tr>
              <tr> 
                <td><b>fr</b></td>
                <td><b>file_read</b></td>
                <td>Read of data, open for reading, etc.</td>
              </tr>
              <tr> 
                <td><b>fw</b></td>
                <td><b>file_write</b></td>
                <td>Write of data, open for writing, etc</td>
              </tr>
              <tr> 
                <td><b>fa</b></td>
                <td><b>file_attr_acc</b></td>
                <td>Access of object attributes: stat, pathconf, etc.</td>
              </tr>
              <tr> 
                <td><b>fm</b></td>
                <td><b>file_attr_mod</b></td>
                <td>Change of object attributes: chown, flock, etc.</td>
              </tr>
              <tr> 
                <td><b>fc</b></td>
                <td><b>file_creation</b></td>
                <td>Creation of object</td>
              </tr>
              <tr> 
                <td><b>fd</b></td>
                <td><b>file_deletion</b></td>
                <td>Deletion of object</td>
              </tr>
              <tr> 
                <td><b>cl</b></td>
                <td><b>file_close</b></td>
                <td>close(2) system call</td>
              </tr>
              <tr> 
                <td><b>pc</b></td>
                <td><b>process</b></td>
                <td>Process operations: fork, exec, exit, etc.</td>
              </tr>
              <tr> 
                <td><b>nt</b></td>
                <td><b>network</b></td>
                <td>Network events: bind, connect, accept, etc.</td>
              </tr>
              <tr> 
                <td><b>ip</b></td>
                <td><b>ipc</b></td>
                <td>System V IPC operations</td>
              </tr>
              <tr> 
                <td><b>na</b></td>
                <td><b>non_attrib</b></td>
                <td>Non-attributable events</td>
              </tr>
              <tr> 
                <td><b>ad</b></td>
                <td><b>administrative</b></td>
                <td>Administrative actions: mount, exportfs, etc.</td>
              </tr>
              <tr> 
                <td><b>lo</b></td>
                <td><b>login_logout</b></td>
                <td>Login and logout events</td>
              </tr>
              <tr> 
                <td><b>ap</b></td>
                <td><b>application</b></td>
                <td>Application auditing</td>
              </tr>
              <tr> 
                <td><b>io</b></td>
                <td><b>ioctl</b></td>
                <td>ioctl(2) system call</td>
              </tr>
              <tr> 
                <td><b>ex</b></td>
                <td><b>exec</b></td>
                <td>exec(2) system call</td>
              </tr>
              <tr> 
                <td><b>ot</b></td>
                <td><b>other</b></td>
                <td>Everything else</td>
              </tr>
              <tr> 
                <td><b>all</b></td>
                <td><b>all</b></td>
                <td>All flags set </td>
              </tr>
            </table>
            <P> Intercepting commands at the exec level will catch every program 
              that users run. Tampering with user-configurable variables such 
              as LD_LIBRARY_PATH or IFS can not bypass logging. So, to include 
              exec logging, change the flags and naflags line of the audit_control 
              file to read:
            <P> 
            <pre>
flags:ex
naflags:lo,ex
</pre>
            Now turn on BSM by running /etc/security/bsmconv as root. This will 
            add a line to /etc/system to load the c2audit module, and it will 
            turn off volume management. Once bsmconv is run, reboot the machine 
            by issuing init 6.
            <P> If you make changes to the /etc/security/audit_control file after 
              the initial configuration, instruct the audit daemon to read the 
              new audit_control file by executing:
            <P> 
            <pre>
/usr/sbin/audit -s
</pre>
            When the machine comes back up, there should be an audit file in /var/audit. 
            The name of the current audit file is in /etc/security/audit_data. 
            This file has two fields that are ":" separated -- the first is the 
            PID of auditd, the second is the full path name of the active audit 
            file. For example:
            <P> 
            <pre>
305:/var/audit/20040527201025.not_terminated.host.my.domain
</pre>
            To convert the binary audit data into human-readable form, use the 
            praudit. Praudit has a few basic options that determine single- or 
            multi-line display and delimiters but provides no mechanism for choosing 
            which events get displayed. Filter the events by using auditreduce, 
            which reads all of the files in the audit directory and searches for 
            matching criteria. For example, to get a listing of every event for 
            the user "usera", execute the following:
            <P> 
            <pre>
/usr/sbin/auditreduce -u usera | /usr/sbin/praudit
</pre>
            A matching record for an <B>ls -al</B> would look like the following:
            <P> 
            <pre>
header,134,2,execve(2),,host.my.domain,2004-05-27 17:39:09.493 -04:00
path,/usr/xpg4/bin/ls
attribute,100555,root,bin,32,15209,0
subject,usera,usera,groupa,usera,groupa,291,283,0 0 host.my.domain
return,success,0
</pre>
            Note that it did not log the arguments to the <B>ls</B> command. To 
            add those fields, execute the command:
            <P> 
            <pre>
/usr/sbin/auditconfig -setpolicy +argv
</pre>
            To see whether it's taken effect, execute:
            <P> 
            <pre>
/usr/sbin/auditconfig -getpolicy
</pre>
            The output should be:
            <P> 
            <pre>
audit policies = argv,cnt
</pre>
            After making this modification, the records appear as:
            <P> 
            <pre>
header,151,2,execve(2),,host.my.domain,2004-05-27 17:54:22.068 -04:00
path,/usr/xpg4/bin/ls
attribute,100555,root,bin,32,15209,0
exec_args,3,
ls,-al,/tmp
subject,usera,usera,groupa,usera,groupa,323,283,0 0 host.my.domain
return,success,0
</pre>
            To make this change permanent, edit /etc/security/audit_startup and 
            add the line:
            <P> 
            <pre>
/usr/sbin/auditconfig -setpolicy +argv
</pre>
            All possible policy settings can be viewed by executing: <p>
			
            <table width="98%" border="0" cellpadding="1">
              <tr> 
                <td width="39%"><strong>/usr/sbin/auditconfig -lspolicy</strong></td>
              </tr>
              <tr> 
                <td><strong>Policy string</strong></td>
                <td width="61%"><strong>description</strong></td>
              </tr>
              <tr> 
                <td><strong>ahlt</strong></td>
                <td><strong>halt machine if it can not record an async event</strong></td>
              </tr>
              <tr> 
                <td><strong>arge</strong></td>
                <td><strong>include exec environment args in audit recs</strong></td>
              </tr>
              <tr> 
                <td><strong>argv</strong></td>
                <td><strong>include exec command line args in audit recs</strong></td>
              </tr>
              <tr> 
                <td><strong>cnt</strong></td>
                <td><strong>when no more space, drop recs and keep a cnt</strong></td>
              </tr>
              <tr> 
                <td><strong>group</strong></td>
                <td><strong>include supplementary groups in audit recs</strong></td>
              </tr>
              <tr> 
                <td><strong>seq</strong></td>
                <td><strong>include a sequence number in audit recs</strong></td>
              </tr>
              <tr> 
                <td><strong>trail</strong></td>
                <td><strong>include trailer token in audit recs</strong></td>
              </tr>
              <tr> 
                <td><strong>path</strong></td>
                <td><strong>allow multiple paths per event</strong></td>
              </tr>
              <tr> 
                <td><strong>public</strong></td>
                <td><strong>audit public files</strong></td>
              </tr>
              <tr> 
                <td><strong>zonename</strong></td>
                <td><strong>generate zonename token</strong></td>
              </tr>
              <tr> 
                <td><strong>all</strong></td>
                <td><strong>all policies</strong></td>
              </tr>
              <tr> 
                <td><strong>none</strong></td>
                <td><strong>no policies</strong></td>
              </tr>
            </table>
              <p>                      
           <b><font size="+2">Q</font></b> Our company needs a way 
            to transfer large files electronically to and from various outside 
            vendors. Currently, we try to send attachments to email. Transfers 
            using this method fail more than half the time when the files exceed 
            4 to 5 MB.
            <P> I believe we need our own FTP site, but I'm concerned about security. 
              Our IT division has resisted setting this up, so we're probably 
              stuck doing it ourselves. I'm sure they're also concerned about 
              security, but I think it's primarily because they don't want another 
              maintenance headache.
            <P> <b><font size="+2">A </font></b> Depending on your environment, 
              implementing the features you've detailed may not be a trivial task. 
              There are a number of things to consider when you want to set up 
              a secure data depot.
            <P> The server itself needs to be protected, which means that you 
              want secured authentication. Standard FTP does not encrypt the authentication 
              phase, so there's the potential for third parties to sniff passwords 
              and gain unauthorized access. You may want to look at a TLS/SSL-enabled 
              ftp server like Pure-FTPd, which encrypts the authentication phase, 
              but not the data phase. Another issue with the FTP protocol is that 
              it's difficult to pass through a tight firewall because of the way 
              it handles port allocation.
            <P> Does the data itself need to be protected? If you're passing proprietary 
              data between clients, do you want other people to be able to intercept 
              and read that data? If not, then you also want something that does 
              encryption of the data as well as encryption of the authentication 
              phase. This is usually accomplished by using SSL, whether as compiled 
              with something like scp/sftp/ssh or as compiled into something like 
              Apache.
            <P> Can both ends pull data, or does one end need to push data? In 
              other words, can you download files from clients, or will they have 
              to be able to upload them to you? The former case is reasonably 
              easy to handle with a Web server like SSL-enabled Apache. This option 
              doesn't work as well if people need to upload files to you, though 
              it can be made to work via custom CGI scripts.
            <P> If people need to upload files to you, can they have shell access 
              on the machine? If so, you can easily use scp or sftp. If not, then 
              you need to restrict their capabilities to upload only. Standard 
              FTP does this, but is not secure. Tools like scp and sftp can be 
              augmented to do this, but they were not designed to do so out of 
              the box.
            <P> Depending on your platform, you may be able to use an FTP daemon 
              with TLS/SSL support for both authentication and data connections 
              built in.
            <P> Take a look at:
            <P> 
            <pre>
http://www.ford-hutchinson.com/~fh-1-pfh/ftps-ext.html
</pre>
            for a comparison of ftps servers and clients.
            <P> <b><font size="+2">Q</font></b> I've been looking at implementing 
              DNSBLs on our mail servers, but I'm not sure which lists to use. 
              Are there some generally accepted ones? Ones to avoid? Actually, 
              is there even a canonical list of all DNSBL services anywhere?
            <P> <b><font size="+2">A </font></b> Which DNSBLs you want to use 
              depends on your site policy. Do you need to be conservative in what 
              you reject, or can you be extremely aggressive? How much collateral 
              damage are you willing to accept? For a fairly comprehensive list, 
              take a look at:
            <P> 
            <pre>
http://spamlinks.openrbl.org/filter-dnsbl-lists.htm#spamsource
</pre>
            They break the list down into various types of DNSBLs, including those 
            that are mainstream or aggressive, how addresses get on the list, 
            whitelists vs blacklists, etc. Openrbl.org also has links to testing 
            DNSBLs, information on DNSBL return codes, and comparison statistics 
            for various DNSBLs. If you can't find a combination of DNSBLs that 
            meet your needs, you may consider running your own.
            <P> <b><font size="+2">Q</font></b> I've been trying to learn shell 
              scripting, primarily Bourne because it's the most portable. One 
              of the things that I've come across is a weird function or variable 
              substitution that looks like the following:
            <P> 
            <pre>
if [ "Xsomething" != "X${somevar}" ]; then
</pre>
            What do the capital X characters do in this statement? As far as I 
            can tell, these serve no purpose, and things work just fine if you 
            remove them.
            <P> <b><font size="+2">A </font></b> This is a common defensive coding 
              practice. The capital X characters are in the statement to prevent 
              the code from evaluating strange non-alphanumeric characters after 
              the variable expansion. The X prefix basically means that the comparison 
              will always be treated as a string instead of doing something odd 
              with the contents of ${somevar}. You can replace the X with any 
              other alphabet character or series of characters that you want and 
              it will have the same effect. Imagine that the ${somevar} variable 
              had the contents of "-foo". If you left off the X, the expansion 
              would be:
            <P> 
            <pre>
if [ something != -foo ]; then
</pre>
            That's invalid syntax and the test will give you an error. With the 
            addition of the X prefix, you instead get:
            <P> 
            <pre>
if [ Xsomething != X-foo]; then
</pre>
            which is valid shell syntax.
            <P> <b><font size="+2">Q</font></b> We have a large number of AIT 
              tapes that we no longer need, so we were going to degauss them and 
              sell them on eBay. I'm concerned that degaussing the tapes will 
              ruin them, though, since I've heard that the process can destroy 
              certain types of media. I know that AIT tapes have a MIC chip on 
              them, and I'm wondering if that will be irrecoverably damaged in 
              the degaussing process.
            <P> <b><font size="+2">A </font></b> The tape products that can be 
              damaged by degaussing are those that have factory pre-recorded magnetic 
              servo tracks. Luckily, all versions of AIT tapes are safe and you 
              can degauss them at will. For a list of media that is safe/not safe 
              to degauss, take a look at:
            <P> 
            <pre>
http://www.fujifilmmediasource.com/specs/degauss.htm
</pre> <b><font size="+2">Q</font></b> We have various Linux 
            boxes at work that run Oracle for test, development, and production. 
            We also have a number FreeBSD boxes on which I'd like to install Oracle 
            as well, but I haven't been able to find a FreeBSD version of Oracle 
            out there. I know one must exist, because I've heard of other people 
            running Oracle on FreeBSD. Is there a special FreeBSD-only Web site 
            from which I need to download Oracle?
            <P> <b><font size="+2">A </font></b> The people running Oracle on 
              FreeBSD are doing so under Linux emulation mode. For detailed instructions 
              on how to get Oracle9i running from scratch on a FreeBSD box, take 
              a look at Brian Ledbetter's article in the daemon news:
            <P> 
            <pre>
http://ezine.daemonnews.org/200402/oracle.html
</pre>
            It includes information on the prerequisites you need, where to get 
            the Oracle distribution for Linux, how to set up the Linux compat 
            packages and users, and how to run the Oracle9i installer. There are 
            even snapshots of the GUI installer running so you know exactly what 
            things should look like. Brian also reports that installing Oracle10g 
            on FreeBSD appears to be much easier than the preceding versions.
            <P> If you're interested in Oracle8i instead of 9i for some reason, 
              take a look at:
            <P> 
            <pre>
http://www.scc.nl/~marcel/howto-oracle.html
</pre>
            or Chapter 22 of the FreeBSD handbook:
            <P> 
            <pre>
http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/linuxemu-oracle.html
</pre> <I>Amy Rich, president of the Boston-based Oceanwave Consulting, 
            Inc. (<B>http://www.oceanwave.com</B>), has been a UNIX systems administrator 
            for more than 10 years. She received a BSCS at Worcester Polytechnic 
            Institute, and can be reached at: <B>qna@oceanwave.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
