<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i01: Managing System Identity with changeident</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_s1.htm">Sidebar</a></span></td>
		<td><a href="../../../../source/SA/2004/jan2004.tar"><b class=codeListing>jan2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a5.gif" width="200" height="167" align="right">Managing 
              System Identity with changeident</b></h1>
            <p> <i>John Spurgeon and Ed Schaefer</i>
            <p> When building or reconfiguring a system, an administrator performs 
              many mundane and repetitive jobs to identify the system. These tasks 
              may include setting the time zone, setting the netmask, configuring 
              sendmail, configuring the network interfaces, changing the node 
              name, and so forth. In this article, we present a Korn shell utility 
              called changeident that automates changing the system identity. 
              Changeident includes a generic driver, a collection of program modules 
              where each module performs a specific task (such as changing the 
              node name), and a configuration file that determines which modules 
              need to be executed. Additionally, optional response files can eliminate 
              the need for human interaction.
            <p> <b>The changeident Driver</b>
            <p> The changeident driver (Listing 1) executes the programs listed 
              in the configuration file. Invoking changeident with no options 
              prompts the user to enter the required configuration information. 
              When run with a nodename option, user interaction is not required 
              because predefined responses to various prompts are stored in a 
              response file.
            <p> The changeident driver supports the following options:
            <p> 
            <p> <b>-m</b> (modules_file) -- Override the default modules file 
              with modules_file.
            <p> <b>-n</b> (nodename) -- Use a response file for nodename instead 
              of prompting the user. Using response files allows an administrator 
              to remotely execute changeident, including rebooting the system 
              if necessary.
            <p> <b>-p</b> (program_list) -- Execute a specified list of programs. 
              In this case, the default modules file is not used, but if the option 
              <b>-m</b> (modules_file) is supplied, program_list is appended to 
              the list of programs contained in modules_file.
            <p> <b>-r</b> -- Automatically reboot the system if a reboot is necessary 
              to apply the configuration changes.
            <p> <b>Example 1</b>
            <p> Run changeident in the background, and redirect standard output 
              to /dev/null. Use a response file for the example doomsday server, 
              and automatically reboot the system, if necessary:
            <p> 
            <pre>
changeident -n doomsday -r &gt; /dev/null &amp;
</pre>
            <b>Example 2</b>
            <p> Run changeident using the programs listed in module file Solaris_7:
            <p> 
            <pre>
changeident -m Solaris_7
</pre>
            <b>Example 3</b>
            <p> Run changeident using the program modules Solaris/nodename and 
              Solaris/nics:
            <p> 
            <pre>
changeident -p "Solaris/nodename Solaris/nics"
  </pre>
            <b>Program Modules</b>
            <p> Module files are inherently OS specific, however, additional modules 
              for other Unix variants can easily be added. Later in the article, 
              we examine a module that changes the node name on a Solaris system. 
              See the "Changeident Program Modules" sidebar for a discussion of 
              the other modules we include in the tar file.
            <p> <b>Configuration Files</b>
            <p> The configuration file is a list of all the modules you'll need 
              to execute. Here is an example of what a configuration file might 
              look like:
            <p> 
            <pre>
Solaris/nodename
Solaris/nics
Solaris/netmasks
Solaris/nsswitch
Solaris/resolv
Solaris/defaultrouter
Solaris/ntp
Solaris/sendmail
Solaris/timezone
Solaris/mymodule
</pre>
            <b>Response Files</b>
            <p> If you support a large enterprise network with many hosts, response 
              files let you predefine the configuration options for each server. 
              Also, response files facilitate administering servers remotely. 
              Without a response file, you could be disconnected from the system 
              in the process of changing certain network settings. With a response 
              file, you can execute the entire program in the background, including 
              rebooting the system if necessary.
            <p> Here is an example of what some typical entries in a response 
              file might look like:
            <p> 
            <pre>
nodename=doomsday
nic_action:iprb0=configure
nic_ip_address:iprb0=192.111.11.11
nic_hostname:iprb0=doomday
nic_action:iprb1=disable
hostname_lookup=files dns
change_netmasks=no
change_dns=yes
dns_domain=eds.com
dns1=192.111.9.1
dns2=192.111.9.21
dns3=192.222.10.1
Sourcing the globals File
</pre>
            Since each module can execute independently of the changeident driver, 
            sourcing the globals file (Listing 2) is always the first step in 
            module execution. The globals file defines the global variables, the 
            OS-specific environment, an alternate reboot function, and alternate 
            functions for the Sun <b>ckyorn</b> and <b>ckstr</b> functions.
            <p> Among the global variables defined are the following application 
              variables:
            <p> 
            <pre>
CHANGEIDENT_HOME_DIR=/opt/changeident
CHANGEIDENT_BIN_DIR=$CHANGEIDENT_HOME_DIR/bin
CHANGEIDENT_LIB_DIR=$CHANGEIDENT_HOME_DIR/lib
CHANGEIDENT_VAR_DIR=$CHANGEIDENT_HOME_DIR/var
CHANGEIDENT_ETC_DIR=$CHANGEIDENT_HOME_DIR/etc
</pre>
            If your application home directory is different, change the CHANGEIDENT_HOME_DIR 
            variable.
            <p> When executed on a Solaris system, the globals file detects the 
              OS version and sets the module_file variable:
            <p> 
            <pre>
modules_file=Solaris_7
</pre>
            The globals file can be modified to set the module_file variable to 
            various values depending on the particular type of system. In this 
            instance, the Solaris <b>pkginfo</b> command determines whether the 
            Intel IT environment is installed, and if it is, sets modules_file 
            to Intel_Solaris_7.
            <p> Solaris includes the non-standard utilities <b>ckyorn</b> and 
              <b>ckstr</b>. In a non-Solaris environment where these programs 
              do not exist, the globals file provides replacement shell functions.
            <p> <b>An Example Program Module: Solaris/nodename</b>
            <p> You may think changing the nodename it is as simple as changing 
              the /etc/nodename and /etc/hosts files. Invariably, it is more complicated 
              than that. Typically, several files contain the system's name and/or 
              IP address, and many other configuration files may also require 
              updating.
            <p> The Solaris/nodename module (Listing 3) updates the /etc/nodename 
              file and the transport provider files. This is the program logic:
            <p> 
            <p> 
            <ul>
              <li> Ensure that the effective user is root. (There is no reason 
                for any user other than root to execute a module.) 
              <li> Obtain the host name. Either pass the name of a response file 
                (typically the response file name is the name of the host it describes) 
                to the script via the <b>-n</b> command-line option, or query 
                the user for the information. 
              <li> Set the host name and transport provider files. The /etc/nodename 
                file contains one entry -- the host name of the local machine. 
                The transport provider files contain one line with the host name 
                repeated twice delimited by a tab:
            <pre>
doomsday doomsday
</pre>
            According to Sun's Transport Interfaces Programming Guide, transport 
            services allow distributed applications a standard interface to communicate 
            using different protocols. The transport file naming convention is:
            <p> 
            <pre>
/etc/net/"transport name"/hosts
</pre>
            Solaris 7 supports the <b>ticlts</b>, <b>ticots</b>, and <b>ticotsord</b> 
            transport services, so the files are:
            <p> 
            <pre>
/etc/net/ticlts/hosts
/etc/net/ticots/hosts
/etc/net/ticotsord/hosts
</pre>
            The /etc/netconfig file contains the names of the supported transport 
            services.
            <p> 
              <li> Create and configure a crash dump directory for the new host 
                name. An example for the doomsday server is:
                <p> 
                <pre>
mkdir -p /var/crash/doomsday
dumpadm -s /var/crash/doomsday &gt; /dev/null
</pre>
                The <b>dumpadm</b> utility actually performs the configuration. 
                From the Solaris 7 <b>dumpadm</b> MAN page:
                <p> "A crash dump is a disk copy of the physical memory of the 
                  computer at the time of a fatal system error. When a fatal operating 
                  system error occurs, a message describing the error is printed 
                  to the console. The operating system then generates a crash 
                  dump by writing the contents of physical memory to a predetermined 
                  dump device, which is typically a local disk partition."
                <p> Typically, the savecore utility creates the crash dump file. 
                  For more information, check the savecore MAN page.
                <p> 
              <li> Finally, create the REBOOT file. The nodename changes do not 
                take effect without rebooting. If nodename is executed by the 
                changeident driver, the REBOOT file forces a system reboot when 
                the changeident driver terminates.</ul>
                <p> <b>Conclusion</b>
                <p> The changeident application is limited only by your imagination 
                  and system needs. The backbone of changeident is a template 
                  that facilitates using plug-and-play program modules for solving 
                  your particular system identity problems.
                <p> <b>References</b>
                <p> Transport Interfaces Programming Guide, 1998, Palo Alto, CA: 
                  Sun Microsystems, Inc.
                <p> For an extensive collection of Sun/Solaris documentation, 
                  visit the Sun Product Documentation Web page at: <b>http://docs.sun.com</b>
                <p> <i>John Spurgeon is a software developer and systems administrator 
                  for Intel's Factory Integrated Information Systems, FIIS, in 
                  Aloha, Oregon. Outside of work, he enjoys turfgrass management, 
                  triathlons, and spending time with his family.</i>
                <p> <i>Ed Schaefer is a frequent contributor to Sys Admin. He 
                  is a software developer and DBA for Intel's Factory Integrated 
                  Information Systems, FIIS, in Aloha, Oregon. Ed also edits the 
                  monthly Shell Corner column on UnixReview.com. He can be reached 
                  at: <b>shellcorner@comcast.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
