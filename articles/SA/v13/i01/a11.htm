<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i01: Sharing Open Source Code Through the CPAN</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a11_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a11_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a11_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a11_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a11_l5.htm">Listing 5</a></span></td>
		<td><span class="navbarLink"><a href="a11_l6.htm">Listing 6</a></span></td>
		<td><a href="../../../../source/SA/2004/jan2004.tar"><b class=codeListing>jan2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">Sharing 
              Open Source Code Through the CPAN</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> The Comprehensive Perl Archive Network (CPAN) is a wonderful place, 
              full of contributed items for you to use, such as scripts and modules. 
              Modules are the core of the CPAN: little building blocks for you 
              to include into your applications.
            <p> Modules end up in the CPAN by being wrapped in a <i>distribution</i>. 
              A distribution is typically a compressed <b>tar</b> archive, identified 
              with a particular version number, and containing one or more modules 
              separated out into packages. A distribution also contains installation 
              instructions and often contains tests to validate proper build and 
              installation.
            <p> Let's look at a sample distribution that I entered into the CPAN 
              this past summer to see the essential parts of any distribution. 
              As a joke, I created the <b>Acme::Current</b> module which gives 
              the current year, month, and day... as constants! The module is 
              out-dated and updated every 24 hours, using an automated script 
              that I'll describe shortly.
            <p> The module itself is in <b>Current.pm</b>, shown in Listing 1. 
              Line 1 defines the module name by switching to its package. Line 
              2 enables <b>strict</b> -- a good thing for larger program development. 
              Lines 4 and 6 declare the package variables <b>$VERSION</b>, <b>$YEAR</b>, 
              <b>$MONTH</b>, and <b>$DAY</b>. Although I could have done this 
              with <b>our</b> rather than <b>use vars</b>, that would have restricted 
              my module to installations with Perl 5.6 or later. When contributing 
              to the CPAN, it's important to think about portability.
            <p> Line 8 provides the version number of the module. In this joke 
              module, it happens to be the entire active code of the module as 
              well. The values for the three constants are established using hardwired 
              values, and then they are wrestled into a single integer by <b>sprintf</b>. 
              The name <b>$VERSION</b> is special to Perl's <b>require</b> operator, 
              and also to the indexing software used to track changes to CPAN 
              modules. Because the indexing software is simplistic, I had to keep 
              this line within the guidelines established in the <b>ExtUtils::MakeMaker</b> 
              manpage.
            <p> The resulting version number for these constants is <b>20030720</b>. 
              Any version number greater than this supersedes this release, so 
              it's important that the version number monotonically increase with 
              time.
            <p> Line 10 provides the mandatory "true value" required by the <b>require</b> 
              operator, on which the use operator is built. Line 12 defines the 
              end of the executable portion of the file, as we are now beginning 
              the POD for the module. While this line is essentially optional, 
              it does save a bit of time in the parser, because the parser doesn't 
              need to scan beyond the <b>__END__</b> marker to find non-POD code 
              after the POD.
            <p> The POD starts in line 14. Again, the format of POD for a CPAN 
              distribution is a bit restricted because the automated tools are 
              extracting key information. The <b>NAME</b> heading is very specific, 
              for example. The synopsis here shows a typical use of this module. 
              I left out the remainder of the POD for space... you can see it 
              in the CPAN if you wish.
            <p> To create a distribution from this module, we need to create a 
              distribution directory, and put this file beneath that directory. 
              I called mine <b>Acme-Current</b> and placed this module into <b>lib/Acme/Current.pm</b> 
              below that directory.
            <p> At the top of the directory, I include the next essential component 
              -- the <b>Makefile.PL</b>, shown in Listing 2. This file is a Perl 
              program that creates a <b>Makefile</b> that can be used to build, 
              test, install, and create distribution archives for this particular 
              distribution. Line 1 pulls in the <b>ExtUtils::MakeMaker</b> module, 
              which defines the meaning of the rest of the file.
            <p> Lines 2 through 8 create a <b>Makefile</b> when executed. The 
              parameters declare the name of my distribution (<b>Acme::Current</b>), 
              which file I'm getting the distribution version number from (the 
              only module here), and also that to properly install this module, 
              the user must have any version of <b>Test::More</b> installed. It's 
              important to list every non-core module in this list if I've used 
              them in my module, because the automated installation tools (like 
              <b>CPAN.pm</b>) can then install any necessary dependencies before 
              continuing on to my module.
            <p> But what is <b>Test::More</b>? I've used it in my one test file 
              for this distribution, which I've placed in <b>t/01-core.t</b> below 
              <b>Acme-Current</b>, the contents of which are shown in Listing 
              3. Once again, it's a Perl program, using the <b>Test::More</b> 
              testing harness. To be recognized as a test, the file should match 
              the fileglob of <b>t/*.t</b>. If there's more than one test, they're 
              run in alphabetical order.
            <p> Line 1 pulls in the <b>Test::More</b> module, declaring that I'm 
              not prepared to define how many tests I'm running. If this had been 
              a real module and not a joke module, I should change this to:
            <p> 
            <pre>
use Test::More tests =&gt; 4;
</pre>
            because at the moment, there are four tests. Of course, I'd have to 
            change this every time I added or deleted a test, so the <b>no_plan</b> 
            option was good while I was monkeying around.
            <p> The first test (in line 2) is a <b>use_ok</b> test, which verifies 
              the syntax of the <b>Acme::Current</b> module. At this point, we 
              should now have the three constants defined in the <b>Acme::Current</b> 
              package namespace.
            <p> To test the values, I compute the current time vector using <b>gmtime</b>. 
              Then, using a series of <b>is</b> tests, I compare the value as 
              given by the module with the value as it should be. If the numbers 
              are the same, the test passes. Otherwise, the test fails, and the 
              discrepancy is noted. A failed test normally prevents the module 
              from being installed as well, unless the user is fairly insistent 
              (and a bit crazy).
            <p> These tests succeed as long as "today" (from a GMT perspective) 
              is the same as the values that I set when making up the version 
              number. If someone tries to install a stale version, the tests will 
              fail. Obviously, for this to work, a new version must be uploaded 
              every day, and the process to do that will be described shortly.
            <p> Besides the module itself, the <b>Makefile.PL</b>, and one or 
              more test files, I also need a <b>MANIFEST</b> file to denote the 
              contents of the distribution archive. My <b>MANIFEST</b> looks like 
              Listing 4. It's just a list of files. Note that a comment is permitted 
              following some delimiting whitespace. One additional file is listed 
              there -- the <b>README</b> file, which should be a simple information 
              file. The <b>README</b> file is extracted separately and archived 
              in the CPAN so that users can download and examine just the <b>README</b> 
              without having to unpack the entire distribution. My <b>README</b> 
              is given in Listing 5.
            <p> So, now I've got the essentials of a distribution. To make a distribution 
              archive, I issue the following commands:
            <p> 
            <pre>
perl Makefile.PL
make all test tardist
</pre>
            The first command creates a <b>Makefile</b>, which the second command 
            uses to build the module (copying it into a staging area), run the 
            tests on the distribution (everything matching <b>t/*.t</b>), and 
            then if that all works, create a file whose name looks like <b>Acme-Current-20030720.tar.gz</b>. 
            Whew!
            <p> Once we have the distribution archive, it's time to get that into 
              the CPAN. I had already applied and received my CPAN <i>PAUSE</i> 
              ID, by visiting <b>http://pause.cpan.org</b>. Using that same Web 
              site, I can also insert items into my CPAN author directory, by 
              file upload, URL fetching, or FTP transfer.
            <p> I decided that since this joke would need to be updated nightly, 
              I would build a Perl program to update the constants in the <b>.pm</b> 
              file and then submit the file using a URL fetch. By experimenting 
              with <b>WWW::Mechanize</b>, I found the right combination of steps, 
              and put that into a <b>cron</b>-trigger job that I call <b>Maintain</b> 
              in the same <b>Acme-Current</b> directory, presented in Listing 
              6.
            <p> Lines 1 through 3 start nearly every long Perl program that I 
              write, turning on the compiler restrictions. Lines 5 and 6 force 
              the current directory to be the same directory in which the script 
              is located.
            <p> Lines 8 and 9 pull in the <b>WWW::Mechanize</b> (found in the 
              CPAN) and <b>File::Copy</b> modules. Lines 11 through 14 define 
              the necessary paths and authentications for the CPAN upload. I use 
              a private directory on my Web server to provide the source for the 
              upload. My CPAN PAUSE ID is <b>merlyn</b>, but my CPAN PAUSE password 
              is not shown, because it is provided on <b>STDIN</b> from <b>cron</b> 
              for security.
            <p> Lines 16 through 26 edit the <b>.pm</b> file to create the proper 
              version number and date constants. I use an in-place edit here, 
              looking for the <b>$VERSION</b> assignment line by recognizing the 
              specific pattern. Once that's complete, I can now go about the task 
              of testing and creating a new distribution.
            <p> Line 28 performs the steps shown earlier, throwing away any output 
              text. Because this is a joke module, I fail silently, erring on 
              the side of just not uploading a new module. Had this been a more 
              important module, I'd be parsing through the output text to verify 
              that it is as expected. At this point, we've either rebuilt the 
              same distribution archive as before, or we now have a new archive.
            <p> Line 30 cleans up some cruft that had been left over when the 
              same version number was used twice (which is true 23 times a day). 
              Line 31 does the actual business of attempting an upload for any 
              new distributions now made. Each name that fits the fileglob pattern 
              is submitted to the CPAN, using the subroutine beginning in line 
              33.
            <p> Line 34 saves the local file name parameter. Line 36 computes 
              this same name in the Web server directory, and if it already exists, 
              then we've already uploaded this file and return immediately (in 
              line 37).
            <p> Line 39 copies this new file to the Web server directory. Line 
              40 creates a <b>WWW::Mechanize</b> object to let us talk to the 
              PAUSE site and schedule a new upload.
            <p> Line 42 establishes my PAUSE ID and password using HTTP "basicauth". 
              Line 44 gets the initial form that I see to log in. Line 45 follows 
              the login link, which will look at the "basicauth" credentials, 
              and present me with a menu of actions to take regarding my CPAN 
              author directory.
            <p> Line 46 follows the link to upload a file. The resulting form 
              has some very specific form elements, into which I stuff the URL 
              that maps to my new distribution (line 47). Line 49 submits that 
              form, and line 50 reports that a new distribution was submitted. 
              Because this is run from <b>cron</b>, I get one email every day 
              with this single text line in it.
            <p> The next step is to set up this script to run every hour. Why 
              every hour? Because I don't want to figure out when GMT rolls over, 
              so I let the machine just do the work every hour, and upload only 
              when there's a new distribution. Simple, but effective. The <b>cron</b> 
              entry looks like this:
            <p> 
            <pre>
## Acme::Current joke module
11 * * * * /home/merlyn/Perl/Acme-Current/Maintain%MYPASSWORD
</pre>
            I do this at 11 minutes past the hour every hour of every day. Why 
            11? Because I have different things firing from my crontab, and I 
            try to stagger them so that they don't all start at the same time, 
            and "11 minutes past the hour" was the next slot available.
            <p> Thus, 24 times a day, the <b>pm</b> file gets edited, and the 
              <b>Makefile.PL</b> is transformed into a <b>Makefile</b>, and the 
              distribution gets tested and an archive gets created. But only once 
              a day is this version number different from the previous number, 
              and then the PAUSE machinery is contacted to trigger an upload.
            <p> OK, so it's a lot of work for a joke that I eventually disabled 
              anyway, but hey, that's what <b>Acme</b> is for. I hope I've shown 
              how simple it is to create a distribution, though, and inspired 
              you to get your open source code pieces into the CPAN. Until next 
              time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </i>Programming Perl<i>, </i>Learning Perl<i>, </i>Learning 
              Perl for Win32 Systems<i>, and </i>Effective Perl Programming<i>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
