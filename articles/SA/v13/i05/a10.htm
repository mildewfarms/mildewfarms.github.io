<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i05: Constructing Objects</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/may2004.tar"><b class=codeListing>may2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">Constructing 
              Objects</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> To construct an object in Perl, you must select a valid package 
              name for the object's class, populate that package with subroutines 
              to define the methods, set the value of <b>@ISA</b> within that 
              package to define the base (parent) classes for that class, and 
              then create a blessed reference. For example, we can make widgets 
              that know how to say their names and take on new names with the 
              following code (I'll describe <b>$self</b> in a moment):
            <p> 
            <pre>
package Widget;

sub display {
  my $self = shift;
  print $self-&gt;{name}, "\n";
}

sub rename {
  my $self = shift;
  $self-&gt;{name} = shift;
  $self;
}
</pre>
            A constructed object compatible with this definition must be a hashref 
            with at least a key of <b>name</b> holding the name of the object. 
            We can construct such a hashref like so:
            <p> 
            <pre>
my $dog = { name =&gt; 'Spot' };
bless $dog, 'Widget';
</pre>
            The <b>bless</b> operation puts a little post-it note on the hash 
            data structure (not the reference!) that says, "I belong to Widget". 
            Now, we can invoke the methods like so:
            <p> 
            <pre>
$dog-&gt;display; # prints "Spot\n"
$dog-&gt;rename("Fido");
$dog-&gt;display; # prints "Fido\n"
</pre>
            How does this work? To execute the <b>rename</b> call, for example, 
            Perl constructs an argument list consisting of the object variable 
            (<b>$dog</b>) plus any arguments given to the method, resulting in:
            <p> 
            <pre>
($dog, "Fido")
</pre>
            Next, Perl looks for a subroutine in the package given by the post-it 
            note (the object's class) named the same as the method. The subroutine 
            <b>Widget::rename</b> gets invoked, and the first argument ends up 
            in <b>$self</b>. The second argument is assigned as an element of 
            the hash, and finally the subroutine returns <b>$self</b> (not a requirement, 
            but handy for other operations).
            <p> Normally, we wouldn't hand-construct the object. The lines 
              to create the hash and bless the object will be found in a <i>constructor</i> 
              within the class. We'll invoke the constructor as:
            <p> 
            <pre>
my $dog = Widget-&gt;named("Spot");
</pre>
            To execute this class method invocation, Perl again constructs an 
            argument list, but this time puts the name of the package as the first 
            element:
            <p> 
            <pre>
("Widget", "Spot")
</pre>
            And upon finding the <b>Widget::named</b> subroutine, invokes it:
            <p> 
            <pre>
package Widget;

sub named {
  my $class = shift; # gets Widget (usually)
  my $self = { name =&gt; shift };
  bless $self, $class;
  $self;
}
</pre>
            Comparing this code to the code above, we see that we'll be returning 
            <b>$self</b>, which is just like the <b>$dog</b> from before. (One 
            common optimization is to know that <b>bless</b> also returns <b>$self</b> 
            in this case, so we can leave that last line out with no change in 
            result.)
            <p> For a more detailed explanation of this process, please see my 
              most recent tutorial book, <i>Learning Perl Objects, References, 
              and Modules</i>, from O'Reilly &amp; Associates.
            <p> Now, why didn't we just hardcode the <b>Widget</b> value 
              into the <b>bless</b>, and what's up with that "usually" 
              in the comment? The complication arises when we get to inheritance. 
              Suppose we have a subclass called <b>ColoredWidget</b> that inherits 
              from <b>Widget</b> and adds two methods to manage the color of the 
              widget:
            <p> 
            <pre>
package ColoredWidget;
use base qw(Widget); # sets @ISA

sub color {
  my $self = shift;
  $self-&gt;{color};
}

sub recolor {
  my $self = shift;
  $self-&gt;{color} = shift;
  $self;
}
</pre>
            Calling <b>color</b> or <b>recolor</b> on a <b>ColoredWidget</b> uses 
            the subroutines found in the <b>ColoredWidget</b> package, but calling 
            <b>named</b> on <b>ColoredWidget</b> uses the <b>@ISA</b> to find 
            the <b>named</b> routine from the base class, <b>Widget</b>. In this 
            case, the argument list will look like:
            <p> 
            <pre>
("ColoredWidget", "Spot")
</pre>
            Because the first argument to <b>named</b> is shifted off into <b>$class</b>, 
            and then used in the <b>bless</b>, we get an object of class <b>ColoredWidget</b> 
            instead of <b>Widget</b>.
            <p> Our <b>display</b> method for <b>ColoredWidget</b> needs a bit 
              more work, though, if we want the color as well. We can use <i>overriding</i> 
              to handle that:
            <p> 
            <pre>
package ColoredWidget;

sub display {
  my $self = shift;
  print $self-&gt;name, ", colored ", $self-&gt;color, "\n";
}
</pre>
            Now, for <b>ColoredWidget</b> objects, this version of <b>display</b> 
            is used in preference to the previous version. We can also <i>extend</i> 
            rather than override by reusing the base class version of <b>display</b>:
            <p> 
            <pre>
package ColoredWidget;

sub display {
  my $self = shift;
  $self-&gt;SUPER::display;
  print "[color: ", $self-&gt;color, "]\n";
}
</pre>
            Now when we invoke <b>display</b> on a <b>ColoredWidget</b>, we invoke 
            the first <b>display</b> found in the base class (as if there were 
            no definition in this class). That invocation produces the name by 
            itself. Then control returns to this method, and we add the color 
            in brackets below.
            <p> The constructor here is named <b>named</b> because it reads like 
              what it does: give me a Widget named Spot. But for tradition's 
              sake, I could also call the constructor <b>new</b>. In fact, I might 
              make a constructor <b>new</b> that returns an unnamed Widget (the 
              name left as <b>undef</b> if referenced). This would look like:
            <p> 
            <pre>
package Widget;

sub new {
  my $class = shift;
  bless {}, $class;
}
</pre>
            Here, a simple reference to an empty hash is generated, blessed into 
            the right class, and returned. To make Spot, I can now say:
            <p> 
            <pre>
my $dog = Widget-&gt;new;
$dog-&gt;rename("Spot");
</pre>
            That's a little more clumsy, but it gets the job done.
            <p> Another advantage to always naming your constructor as <b>new</b> 
              is that you can easily create an object that is "like" 
              another object. For example, if we have an unknown object <b>$object</b>, 
              we can call <b>ref $object</b> to get its class, then create another 
              object of the same class by calling <b>new</b>:
            <p> 
            <pre>
my $similar = (ref $object)-&gt;new;
</pre>
            But this works only if all of our possible classes of <b>$object</b> 
            understand the same <b>new</b> method. Fortunately, for the times 
            we're likely to do this, we've also made the classes work 
            this way.
            <p> Another common operation is <i>cloning</i>: making an object that 
              is a copy of the current object. It's not enough simply to 
              copy the reference:
            <p> 
            <pre>
my $puppy = $dog;
</pre>
            This action copies the reference to the data but not the data itself. 
            So if I rename the <b>$puppy</b>, the <b>$dog</b> changes its name 
            as well! Cloning is best handled by copying all of the data. A naive 
            <b>clone</b> could be executed as:
            <p> 
            <pre>
package Widget;

sub clone {
  my $self = shift;
  my $clone = { %$self }; # copy keys/values one level deep
  bless $clone, ref $self; # copy the object class, returning $clone
}
</pre>
            This will work properly for objects that do not have a deep structure, 
            such as we've seen here so far. But what if one of the object 
            attributes is a reference to yet another data structure. Again, we're 
            copying the reference, and not the data, so the data will be shared 
            amongst the clones. See my column from February 2000 (<b>http://www.samag.com/documents/s=1168/sam0002d/0002d.htm</b>) 
            for more details on deep copying.
            <p> An alternative method of cloning is a more piecemeal approach. 
              Teach each class in the hierarchy to clone the attributes added 
              by that class:
            <p> 
            <pre>
package Widget;

sub clone {
  my $self = shift;
  my $clone = (ref $self)-&gt;new; # empty object of same class
  $clone-&gt;rename($self-&gt;name); # copy name attribute
  $clone;
}

package SubWidget;

sub clone {
  my $self = shift;
  my $clone = $self-&gt;SUPER::clone; # clone base class stuff
  $clone-&gt;recolor($self-&gt;color); # copy color attribute
  $clone;
}
</pre>
            Note the similarity of design. If a class knows that it adds a complex 
            attribute (a reference to a deeper data structure), then it can add 
            special copying instructions for that attribute to the new clone. 
            This is a good OO design, because the information contained within 
            each base and derived class is maintained closely with the logic on 
            which it depends.
            <p> And now, before I run out of space, I'll touch on a hot-button 
              for me. The <i>perltoot</i> manpage contains an archetypal <b>new</b> 
              routine that looks like:
            <p> 
            <pre>
sub new {
  my $proto = shift;
  my $class = ref($proto) || $proto;
  my $self  = {};
  ...
}
</pre>
            The purpose of these few lines of extra code is to permit:
            <p> 
            <pre>
my $other = $dog-&gt;new;
</pre>
            to act like:
            <p> 
            <pre>
my $other = (ref $dog)-&gt;new;
</pre>
            But here's the problem. When I survey experienced object-oriented 
            programmers, and ask them what they expect <b>new</b> means when called 
            on an instance (without looking at the implementation), the result 
            usually divides rather equally into three camps: those who go "huh, 
            why would you do that" and think it should throw an error, those 
            that say that it would <b>clone</b> the object, and those that say 
            it would <b>copy</b> the object's class but not the contents.
            <p> So, no matter what you intend, if you make your <b>new</b> do 
              one of those three things, two thirds of the people who look at 
              it will be wrong. It's not intuitive. So, don't write 
              code like that, and especially don't just cargo-cult that from 
              the manpage into your code. If you want an object <b>like</b> another 
              object, use <b>ref</b> explicitly, as shown above. If you want a 
              clone, put cloning code into your package, and call <b>clone</b>, 
              as I showed earlier.
            <p> I hope you've learned at least one or two things about objects 
              that you might not have considered before. Until next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>. He's also a frequent contributor to the 
              Perl newsgroups, and has moderated comp.lang.perl.announce since 
              its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
