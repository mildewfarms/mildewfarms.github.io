<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i12: Debugging SSL</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/dec2004.tar"><b class=codeListing>dec2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><B><img src="a4.gif" width="200" height="167" align="right">Debugging 
              SSL</B></h1>
            <P> <I>Ryan Matteson</i>
            <p> The SSL and TLS protocols have become the standard for securing 
              network communications. These protocols provide confidentiality, 
              authentication, and message integrity, but add additional complexity 
              to client/server communications. This situation is most evident 
              when application maintainers and systems administrators need to 
              debug application-layer protocols protected by SSL. In this article, 
              I will discuss two utilities -- <B>ssldump</B> and <B>openssl</B> 
              -- that can help debug applications utilizing SSL.
            <P> <B>How SSL Works</B>
            <P> The SSL and TLS protocols define the rules SSL clients and servers 
              use to communicate with each other. These rules define the order 
              in which messages are sent, the format of each message, and the 
              way cryptographic algorithms are applied to network communications. 
              The SSL and TLS protocols use a layered communications stack, and 
              define several message types. The bottom layer of this communication 
              stack is called the SSL record layer. This layer accepts protocol 
              messages and application data from higher-level protocols, adds 
              SSL-specific headers, and hands these messages (often referred to 
              as SSL record layer messages) to TCP to be transmitted.
            <P> The SSL and TLS connection setup process consists of four stages. 
              The first stage allows the client and server to negotiate security 
              capabilities, such as the public-key algorithm, the symmetric key 
              algorithm, and compression algorithms. The second stage allows the 
              server to transmit digital certificates and key information to the 
              client, allowing the client to validate the identity of the server. 
              The third stage allows the client to exchange key information with 
              the server, and optionally authenticate itself with a digital certificate. 
              The final stage allows the client and server to use the negotiated 
              parameters.
            <P> The <B>openssl</B> utility can be used to connect to an SSL-enabled 
              service, and print each stage described above:
            <P> 
            <pre>
$ openssl s_client -connect mail.daemons.net:443 -state \
  -nbio 2&gt;&amp;1 | grep "^SSL"

SSL_connect:before/connect initialization
SSL_connect:SSLv2/v3 write client hello A
SSL_connect:error in SSLv2/v3 read server hello A
SSL_connect:SSLv3 read server hello A
SSL_connect:SSLv3 read server certificate A
SSL_connect:SSLv3 read server key exchange A
SSL_connect:SSLv3 read server done A
SSL_connect:SSLv3 write client key exchange A
SSL_connect:SSLv3 write change cipher spec A
SSL_connect:SSLv3 write finished A
SSL_connect:SSLv3 flush data
SSL_connect:error in SSLv3 read finished A
SSL_connect:error in SSLv3 read finished A
SSL_connect:SSLv3 read finished A
SSL handshake has read 1584 bytes and written 346 bytes
SSL-Session:
</pre>
            For a detailed analysis of each state, see the references.
            <P> <B>Testing SSL Servers</B>
            <P> When debugging SSL client server communications, it is often beneficial 
              to watch the SSL connection setup process, and if this completes 
              successfully, pass application data to the server. The <B>openssl</B> 
              utility provides the <B>s_client</B> option, which can be used to 
              set up an SSL connection and pass arbitrary data (e.g., POP3 commands, 
              IMAP commands, HTTP methods) to a server process. The following 
              example lists the available messages on a POP3 server utilizing 
              SSL:
            <P> 
            <pre>
$ openssl s_client -connect mail.daemons.net:995
CONNECTED(00000003)

[ ..... ]

user ME
+OK Name is a valid mailbox

pass SOMETHING_OR_ANOTHER
+OK Mailbox locked and ready

list
+OK scan listing follows
1 1225
2 1863
3 1668
4 963
5 1969
6 1437
7 2357
8 3316
9 3517
10 8952
11 9616

quit
+OK
</pre>
            The following example issues an HTTP GET request to a Webserver utilizing 
            SSL:
            <P> 
            <pre>
$ openssl s_client -connect mail.daemons.net:443
CONNECTED(00000003)

[ .... ]

GET / HTTP/1.0

HTTP/1.1 403 Forbidden
Date: Sat, 04 Sep 2004 16:54:01 GMT
Server: Apache/2.0.50
Content-Length: 202
Connection: close
Content-Type: text/html; charset=iso-8859-1

&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don't have permission to access /
on this server.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
closed
</pre> 
            <b>Printing Encrypted Application-Layer Data</B>
            <P> When the SSL and TLS protocols are used to protect network communications, 
              the application-layer data is obfuscated, and unavailable to network 
              analysis tools (e.g., snoop, tcpdump). This limits an administrator's 
              ability to debug application problems, and view application-layer 
              headers and data. The <B>ssldump</B> utility can be used in these 
              situations and allows SSL messages and application data to be displayed 
              in real time. The following example shows how <B>ssldump</B> can 
              be used to print the SSL handshake messages:
            <P> 
            <pre>
$ ssldump -a -A -H -i en0

New TCP connection #1: winnie(32866) &lt;-&gt; 192.168.1.8(8389)
1 1  0.0043 (0.0043)  C&gt;S SSLv2 compatible client hello
1 2  0.0057 (0.0014)  S&gt;C  Handshake  
      ServerHello
1 3  0.0057 (0.0000)  S&gt;C  Handshake
      Certificate
1 4  0.0057 (0.0000)  S&gt;C  Handshake
      ServerHelloDone
1 5  0.0182 (0.0125)  C&gt;S  Handshake
      ClientKeyExchange
1 6  0.0182 (0.0000)  C&gt;S  ChangeCipherSpec
1 7  0.0182 (0.0000)  C&gt;S  Handshake
1 8  0.0367 (0.0184)  S&gt;C  ChangeCipherSpec
1 9  0.0367 (0.0000)  S&gt;C  Handshake
1 10 3.2154 (3.1786)  C&gt;S  application_data
1 11 3.2154 (0.0000)  C&gt;S  application_data
1 12 3.4370 (0.2216)  C&gt;S  application_data
1 13 3.4370 (0.0000)  C&gt;S  application_data
1 14 3.4681 (0.0311)  S&gt;C  application_data
1 15 3.4681 (0.0000)  S&gt;C  application_data
2    3.4307 (3.4307)  S&gt;C  TCP FIN
1 16 3.5172 (0.0491)  S&gt;C  Alert
1 17 3.5178 (0.0006)  C&gt;S  Alert
1    3.5180 (0.0001)  C&gt;S  TCP FIN
2    3.4815 (0.0508)  C&gt;S  TCP FIN
1    3.5194 (0.0013)  S&gt;C  TCP FIN
</pre>
            The "-A" and "-H" options tell <B>ssldump</B> to print all of the 
            SSL record-layer headers. The "-a" option will provide TCP connection 
            state (e.g., SYN, SYN/ACK, ACK, FIN, etc.) information. Communications 
            originating from the client are marked with "C&gt;S," and messages 
            originating from the server are marked with "S&gt;C." In the previous 
            example, <B>ssldump</B> was not configured to decrypt communications, 
            so the words "application_data" were printed instead of the actual 
            application data.
            <P> To decrypt communications and dump application data, <B>ssldump</B> 
              will need a copy of the private key associated with the server you 
              want to debug. <B>ssldump</B> will use this key to derive the session 
              key that is negotiated between the client and the server, and used 
              to encrypt all network communications. The following example uses 
              the private key stored in the file rsa.key to decrypt communications, 
              and display the application-layer data:
            <P> 
            <pre>
$ ssldump -a -A -H -k rsa.key -i en0

&lt; connection setup removed &gt;

3.6155 (3.6155)  C&gt;S
---------------------------------------------------------------
GET / HTTP/1.0
---------------------------------------------------------------

2 12 3.8862 (0.2310)  C&gt;SV3.1(32)  application_data
2 13 3.8862 (0.0000)  C&gt;SV3.1(32)  application_data
3.8466 (0.2311)  C&gt;S
---------------------------------------------------------------

---------------------------------------------------------------

3.8777 (0.0310)  S&gt;C
---------------------------------------------------------------
HTTP/1.1 403 Forbidden
Date: Sun, 25 Jul 2004 04:27:16 GMT
Server: Apache/2.0.50
Content-Length: 1
Connection: close
Content-Type: text/html; charset=iso-8859-1
</pre>
            As you can see from this example, <B>ssldump</B> displays the HTTP 
            requests sent to the daemons.net Web server. <B>ssldump</B> supports 
            Berkeley Packet Filter style filters, allowing you to grab and decode 
            specific communications. The following example shows how to capture 
            SSL communications destined for host fred on TCP port 443:
            <P> 
            <pre>
$ ssldump -a -A -H -k rsa.key -i en0 host fred and port 443
</pre> <b>Conclusion</B>
            <P> This article provided a brief introduction to the SSL and TLS 
              protocols, and showed how <B>ssldump</B> and <B>openssl</B> can 
              be used to debug network communications. Both commands provide several 
              facilities to help troubleshoot SSL and TLS communication problems. 
              For additional information on the internal workings of the SSL state 
              engine and handshake process, see the references.
            <P> <B>References</B>
            <P> TLS 1.0 RFC -- <B>http://www.ietf.org/html.charters/tls-charter.html</B>
            <P> SSL Reference -- <B>SSL &amp; TLS Essentials by Stephen Thomas</B>
            <P> OpenSSL Web site -- <B>http://www.openssl.org</B>
            <P> OpenSSL References -- Network Security with OpenSSL, by John Viega, 
              Matt Messier, and Pravir Chandra
            <P> SSL Dump Web site -- <B>http://www.rtfm.com/ssldump/</B>
            <P> <B>Acknowledgements</B>
            <P> Ryan thanks the <B>ssldump</B> and <B>openssl</B> developers, 
              and all the folks who have put time and energy into the design and 
              implementation of the TLS and SSL protocols.
            <P> <I>Ryan Matteson works as a systems engineer for Earthlink and 
              speciailizes in Web technologies, Storage Area Networks, high-availability 
              systems, and the Linux and Solaris operating systems. Questions 
              and comments about this article can be addressed to: <B>matty@daemons.net</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
