<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i03: Evaluating Conditional Expressions with Functions</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2004/mar2004.tar"><b class=codeListing>mar2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a8.gif" width="200" height="167" align="right">Evaluating 
              Conditional Expressions with Functions</b></h1>
            <p> <i>Ed Schaefer</i>
            <p> When I was a less experienced shell programmer, I didn't 
              think about my Korn shell function's return value. My functions 
              tended to look like these two examples:
            <p> 
            <pre>
# Using ksh pattern-matching operators, this function
# replaces the unix basename command.  If a 2nd argument
# exists, strip off the extension.
function basename {
   typeset v x

   v=${1##*/}
   x=${2#.} # get rid of the '.'
   v=${v%.$x}
   echo $v
}


# Using ksh pattern-matching operators, this function
# replaces the unix dirname command.
function dirname {
typeset v="$@"

  echo ${v%/*}
}

# basename and dirname function examples
var=/usr/eds/ddir/ttest.c

bn=$(basename $var)
echo $bn # displays: ttest.c

bn=$(basename $var .c)
echo $bn # displays: ttest

dn=$(dirname $var)
echo $dn # displays: /usr/eds/ddir
</pre>
            The above functions serve a purpose -- pass a parameter, perform 
            a task, and return a result. This is fine, but this function style 
            doesn't take advantage of the shell's power, namely evaluating 
            shell conditional expressions. To demonstrate, the following hackneyed 
            <b>newwho</b> function calls the Unix who command:
            <p> 
            <pre>
function newwho
{
   who -uTH
}
</pre>
            The function implicitly returns success, provided the <b>who</b> command 
            executes properly and returns failure if it doesn't. This command 
            uses this implicit return value to deliver more information to the 
            user:
            <p> 
            <pre>
if newwho
then
   printf "The above users are logged in\n"
fi
</pre>
            The "The above users..." blurb appears at the end of the 
            list because <b>newwho</b> successfully executes. Also, the appearance 
            of this final blurb verifies that the command ran to completion, and 
            didn't terminate at some intermediate point in the list.
            <p> In this article, I discuss other techniques for employing the 
              power of exit codes. Furthermore, I explain implementing shell conditional 
              expressions by using the test command or brackets. Simulating <b>if-then</b> 
              and <b>if-then-else</b> statements with boolean expressions is detailed. 
              Finally, I conclude by presenting some realistic commands and functions 
              that use conditional expressions.
            <p> <b>Using the Test Utility vs. Using Brackets Around Expressions</b>
            <p> Unix programs terminate with the exit code, <b>$?</b>, set from 
              0 to 255. Zero (true) indicates success, and any other value indicates 
              a failure. In the same way, conditional expressions, using the test 
              command or the brackets, evaluate to true or false.
            <p> There's no difference between using test and using brackets. 
              The following code fragments are equivalent:
            <p> 
            <pre>
-&gt; if test -f "myfile"
   then
      ...
   fi

-&gt; if [ -f "myfile" ]
   then
      ...
   fi
</pre>
            In the early Unix days, a program called /bin/[ enabled the bracket 
            syntax emulating the same functionality as the test utility. With 
            either case, most modern shells implement both <b>test</b> and <b>[</b> 
            as built-in commands, so there is no performance advantage to using 
            one over the other. However, it's best to use double brackets, 
            [[..]], instead of [..] when evaluating conditional expressions. Why? 
            I quote <i>The New KornShell Command and Programming Language</i> 
            (Bolsky and Korn, Prentice Hall):
            <p> Since words inside [[..]] do not undergo field splitting and pathname 
              expansion, many of the errors associated with test and [ are eliminated.
            <p> The authors further state that <b>&amp;&amp;</b> and <b>||</b> 
              are used for logical operators, and unquoted parentheses are used 
              for grouping. This example is from <i>The New KornShell</i>:
            <p> 
            <pre>
[[ ! (-w file || -x file) ]]
</pre>
            is equivalent to:
            <p> 
            <pre>
test ! \( -w file -o -x file \)
</pre>
            <b>Simple Bracket Tests</b>
            <p> The man page for "test" lists a large number of options. 
              For example, the following checks whether "/tmp" is a 
              directory:
            <p> 
            <pre>
if [[ -d "/tmp" ]]
then
   echo "/tmp is a directory."
else
   echo "/tmp is NOT a directory."
fi
</pre>
            or if you prefer to use test:
            <p> 
            <pre>
if test -d "/tmp"
then
   echo "/tmp is a directory."
else
   echo "/tmp is NOT a directory."
fi
</pre>
            <b>Negation Tests</b>
            <p> Sometimes you want to know whether something is not true. The 
              shell uses the exclamation point (called a "bang") to 
              indicate a negation condition. Using negation, the previously example 
              is:
            <p> 
            <pre>
if [[ ! -d "/tmp" ]]
then
   echo "/tmp is NOT a directory."
else
   echo "/tmp is a directory."
fi
</pre>
            <b>Using Shell Conditional Expressions and Short-circuit Evaluation</b>
            <p> Similar to C and Java, the shell evaluates combined conditional 
              expressions only to the point that the shell determines the value 
              of the expression. The mathematical definition for this is short-circuit 
              evaluation. The <b>&amp;&amp;</b> ("and" operator) and 
              <b>||</b> ("or" operator) are both short-circuit evaluators. 
              The "and" evaluation stops when the first value is false, 
              and the "or" stops when the first value is true.
            <p> <i>The New KornShell</i> expresses it another way:
            <p> || Runs the command following the || only if the command preceding 
              the || returns False.
            <p> &amp;&amp; Runs the command following the &amp;&amp; only if the 
              command preceding the &amp;&amp; returns True.
            <p> <b>Short-circuit Evaluation Examples</b>
            <p> In the following nonsensical examples:
            <p> 
            <pre>
x=0
(( 0 == 1 )) &amp;&amp; { echo This will never display; x=$((x+1)); }
(( 0 == 0 )) || { echo Also, This will never display; x=$((x+1)); }
</pre>
            the second part of the expression never executes. The first test stops 
            because the expression preceding the "and", <b>(( 0 == 1 
            ))</b>, always returns false. The second test stops because the expression 
            preceding the "or", <b>(( 0 == 0 ))</b>, always returns 
            true. These examples illustrate a side effect when evaluating conditional 
            expressions. Variable "x" remains zero because the short-circuit 
            evaluation guarantees the second part of the expression is ignored.
            <p> Remember that the last expression evaluated in a function is its 
              implicit return value. To demonstrate the "or" condition, 
              I define a shell function called LE2 for "less than or equal 
              2":
            <p> 
            <pre>
   function LE2 {
      (( $1 &lt; 2 )) || (( $1 == 2 ))
   }
</pre>
            Executing "LE2 1" returns exit code true (0), and executing 
            "LE2 5" returns exit code false (1). This example is obviously 
            contrived to illustrate a point. This is a more realistic example:
            <p> 
            <pre>
   function LE2 {
      (( $1 &lt;= 2 ))
   }
</pre>
            To clarify an "and" example, I use shell function INSEQ 
            to check whether three numbers are in sequence (first less than second, 
            and second less than third):
            <p> 
            <pre>
   function INSEQ {
      (( $1 &lt; $2 )) &amp;&amp; (( $2 &lt; $3 ))
   }
</pre>
            Executing <b>INSEQ 1 2 3</b> returns exit code true (0), and executing 
            <b>INSEQ 2 2 3</b> returns exit code false (1).
            <p> <b>Using &amp;&amp; and || to Simulate if-then-else Statements</b>
            <p> The short-circuit property of these operators also allows the 
              creation of compact <b>if-then</b> and <b>if-then-else</b> statements. 
              The following <b>if</b> statement:
            <p> 
            <pre>
   if (( $x &lt; $y ))
   then
      echo "X is less than Y"
   fi
</pre>
            is more succinctly stated as:
            <p> 
            <pre>
   (( $x &lt; $y )) &amp;&amp; echo "X is still less than Y"
</pre>
            and an <b>if</b> statement with an <b>else</b>:
            <p> 
            <pre>
   if test $space -gt $size
   then
      echo "Your file will fit here."
   else
      echo "Try backing up to /dev/null. Your file will fit there.";
   fi
</pre>
            can be rewritten as:
            <p> 
            <pre>
   (( $space &gt; $size )) &amp;&amp; echo "Your file will fit here."
      || echo "The file is too large. Your file won't fit here."
</pre>
            A "real world" <b>if</b> example is terminating a script 
            if there is not 1 command-line argument:
            <p> 
            <pre>
if (( $# != 1 ))
then
   echo "requires 1 command-line argument. Terminating!"
   exit 1
fi
</pre>
            You can emulate the same functionality by grouping shell commands 
            with braces:
            <p> 
            <pre>
# white space around the braces and the ";" before the closing 
# brace is required.
(( $# != 1 )) &amp;&amp;
   { echo "requires 1 command-line argument. Terminating!"; exit 1; }
Function Examples
</pre>
            <b>The isatty, Test for a Terminal Function</b>
            <p> There's no sense executing commands relating to terminal 
              control if the script is not connected to a terminal device. The 
              <b>test -t</b> option returns true if the associated file descriptor 
              is associated with a terminal. The following function emulates C 
              library function <b>isatty</b> test for a terminal device:
            <p> 
            <pre>
# Implicitly return true if open file descriptor $1 is
# connected to a terminal
function isatty {
  [[ -t $1 ]]
}
</pre>
            The following stub code doesn't allow querying the user for input 
            if file descriptor 0 isn't standard input:
            <p> 
            <pre>
if isatty 0
then
   echo "input variable x: "
   read x
fi
</pre>
            <b>The is_leap_year, Leap Year Function</b>
            <p> The following leap year check example also implicitly checks the 
              exit code. The four-digit year is a leap year if it is divisible 
              by 4, unless it is also divisible by 100 (2100, 2200) except if 
              it a year also divisible by 400, which is a leap year (1600, 2000). 
              As long as the arithmetic evaluations don't fail, the exit 
              code is always implicitly true. If the evaluation does fail, the 
              code is false:
            <p> 
            <pre>
function is_leap_year {
   (($1 % 4 == 0)) &amp;&amp; (($1 % 100 != 0)) || (($1 % 400 == 0))
}

# test: "2000 is a leap year"
dyear=2000
is_leap_year $dyear &amp;&amp; echo "$dyear is a leap year" ||
   echo "$dyear is NOT a leap year"
</pre>
            We can rewrite <b>is_leap_year</b> combining the expressions:
            <p> 
            <pre>
function is_leap_year {
   (($1 % 4 &amp;&amp; $1 % 100 != 0)) || (($1 % 400 == 0))
}
</pre>
            <b>The streq, String Equal Function</b>
            <p> In addition to arithmetic evaluations setting the exit code, a 
              string comparison evaluation also sets the exit code, as follows:
            <p> 
            <pre>
function streq { [[ $1 == $2 ]]; }

# test "NOT equals"
str="xtext string"
streq "$str" "text string" &amp;&amp; echo "equals" || echo "NOT equals"
</pre>
            <b>The echo_n, No Echo Function</b>
            <p> An irritating difference between the GNU <b>echo</b>, (i.e., Linux) 
              and other Unix <b>echo</b> versions, is how the trailing newline 
              is suppressed. Under traditional Unix, <b>echo \c</b> eliminates 
              the newline, while GNU <b>echo -n</b> performs the same function. 
              Defining an <b>echo_n</b> function based on how the shell executes 
              <b>echo -n</b> hides the <b>echo</b> usage syntax:
            <p> 
            <pre>
[[ "$(echo -n)" == "-n" ]]
 &amp;&amp; function echo_n { echo "$@\c"; } || function echo_n { echo \
   -n "$@"; }
</pre>
            The <b>echo_n</b> function definition is based on whether the <b>echo 
            -n</b> command echos <b>-n</b> (Unix) or just a null (GNU). Using 
            the <b>echo</b> command seems to be part of the Unix consciousness, 
            but if script portability between Linux and Unix is an issue, consider 
            using the <b>printf</b> command in place of <b>echo</b> or <b>echo_n</b>.
            <p> <b>The lss, Listing Function</b>
            <p> With the <b>ls</b> command and help from the Korn shell string 
              operator <b>${varname:+word}</b>, the <b>lss</b> function returns 
              null if an object doesn't exist:
            <p> 
            <pre>
function lls { ls -1 ${1:+"$@"} 2&gt;/dev/null; }
</pre>
            Consider the string operator description from <i>Learning the Korn 
            Shell</i> (Rosenblatt, O'Reilly &amp; Associates):
            <p> 
            <pre>
${varname:+word}  If varname exists and isn't null, return word;
                  otherwise return null.
</pre>
            To illustrate using the <b>lss</b> function, in the following function, 
            trap the output of <b>lss $1</b> using command substitution. If the 
            negation <b>-z</b> check signals that the return value is not null, 
            the implicit exit code is true and the object exists:
            <p> 
            <pre>
function does_obj_exist { [[ ! -z "$(lls $1)" ]] ; }

# test if file dc.ss exists
s=dc.ss
does_obj_exist "$s" &amp;&amp; echo "$s exists" || echo "$s does NOT exist"
</pre>
            Since the "<b>test -f</b>" unary file expression performs 
            this same operation, the <b>does_obj_exist</b> function is superfluous. 
            A more useful function is a directory empty check:
            <p> 
            <pre>
function is_dir_empty { [[ ! -d $1 || -z "$(lls -A $1)" ]] ;}

# test if the directory is not empty,
# change permissions on all objects in the directory
obj=/home/eds/tmps
is_dir_empty $obj &amp;&amp; echo $obj is empty || chmod 666 $obj/*
</pre>
            If object is not a directory or the results of the <b>lss</b> function 
            are null, the object is empty.
            <p> By default, when using <b>ls</b>, I prefer one object per line 
              using the -1 option, but note that I can override this. The <b>-A</b> 
              option includes all hidden objects that start with a dot (.), except 
              the working directory (.) and the parent directory (..). As previously 
              stated, if the test command or single brackets are used, change 
              the boolean "or" identifier. The following <b>is_dir_empty</b> 
              rendition uses the single bracket syntax:
            <p> 
            <pre>
function is_dir_empty { [ ! -d $1 -o -z "$(lls -A $1)" ]; }
</pre>
            <b>The askyorn Function</b>
            <p> Most interactive shell programs require yes or no input from the 
              user. Instead of returning a Y or an N, the <b>askyorn</b> function 
              returns a true or false exit code for yes or no, respectively:
            <p> 
            <pre>
# this function down shifts string case to lower
function down_shift {
  echo $@ | tr '[A-Z]' '[a-z]'
} 

function askyorn {
   local d=
   local lower=
   local ques="y/n"
   local reply=

   lower=$(down_shift $1)
   if streq "$lower" "-y" || streq "$lower" "-n"
   then
      d=${lower#-}; shift
      case $d in y)ques="Y/n";; n)ques="y/N";; esac
   fi
   while echo_n "$@" "($ques)? "
   do
      read reply
      case "${reply:=$d}" in [yYnN]*)break;; esac
   done
   case "$reply" in [yY]*)return 0;; *)return 1;; esac
}

# test
askyorn -Y Do you want to make more changes &amp;&amp; echo Pressed Yes
   || echo Pressed No
</pre>
            The <b>askyorn</b> function is similar to the Solaris internal <b>ckyorn</b> 
            command. Call <b>askyorn</b> with an optional "-y for yes" 
            or "-n for no" question (upper or lower case), and a prompt 
            string. If the option exists, the function downshifts it and removes 
            the "-" with Korn shell pattern <b>${lower#-}</b>. Executing 
            shift removes the option from the rest of the command line. The question 
            is set to "y/n" with the default option upshifted. For example, 
            if <b>-Y</b> or <b>-y</b> is the default, the question equals "Y/n".
            <p> Using the <b>echo_n</b> function displays the prompt and the question 
              within the while loop. The user may answer Y or N, regardless of 
              case. Pressing RETURN sets the user reply to the default if one 
              was passed. If no default, the user must press [Yy] or [Nn] to terminate 
              the loop. Finally, the exit code returns true for [Yy] and false 
              for [Nn].
            <p> <b>Conclusion</b>
            <p> Do you really need to write functions that only use the exit code 
              as a return value? Certainly not, but I find this function and corresponding 
              test more aesthetically pleasing:
            <p> 
            <pre>
function mySillyFunction1 {
   return 0
}

# test
if mySillyFunction1
then
   echo "mySillyFunction1 is always true"
fi</pre>
            <p> than this function and test:
            <p> 
            <pre>
function mySillyFunction2 {
   echo 1
}

# test
if (( $(mySillyFunction2) == 1 ))
then
   echo "mySillyFunction2 always returns a value of 1"
fi
</pre>
            Also, if your maintenance and sustaining career is long, you may have 
            to edit conditional expressions and change functions that don't 
            explicitly return a value, so it's best to know how.
            <p> <b>References</b>
            <p> Tutorial Notes on Logic and Short Circuit Evaluations, by Dr. 
              Andrew Kwok Fai Lui, Open University of Hong Kong: <b>http://learn.ouhk.edu.hk/~mt258/mt258/selfstudy/document/ShortCircuitEvaluation.pdf</b>
            <p> Bolsky, Morris I., David G. Korn. <i>The New Kornshell Command 
              and Programming Language</i>, 1995. Upper Saddle River, NJ: Prentice 
              Hall PTR.
            <p> Rosenblatt, Bill. <i>Learning the Korn Shell</i>, 1993. Sebastopol, 
              CA: O'Reilly &amp; Associates, Inc.
            <p> <i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also edits the UnixReview.com 
              monthly Shell Corner column. He can be contacted at: <b>shellcorner@comcast.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
