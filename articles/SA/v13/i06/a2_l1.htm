<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i06: Listing 1 Tests the times needed by FreeRADIUS to authenticate, under artificially created heavy load</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a2_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/2004/jun2004.tar"><b class=codeListing>jun2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>Tests the times needed by FreeRADIUS to authenticate, 
              under artificially created heavy load</i></h2>
            <p> 
            <pre>
/*************************************************************************\
| stress.c: Designed for a Linux Platform, making use of the fork() method |
|                                                                         |
| Engineered: Karlovassi, Samos                                           |
| Copyright (C) 2003-2004                                                 |
|                                                                         |
| Developer:    Konstantinos Lizos    (icsdm03020@icsd.aegean.gr)         |
|                Markos Gogoulos        (cs00013@icsd.aegean.gr)          |
|                                                                         |
| Description:    Performs a stress test over the RADIUS server           |
|                Leaves a period of 10 seconds time - space               |
|                                                                         |
| Project Name: (RAST) RADIUS Authentication Stress Test                  |
|                                                                         |
\*************************************************************************/

//    Section one: Library Insertion

#include &lt;sys/types.h&gt;        //    Header includes definitions for data types    
#include &lt;unistd.h&gt;           //    Standard symbolic constants and types 
#include &lt;stdio.h&gt;            //    Standard Input-Output Library
#include &lt;stdlib.h&gt;           //    Standard Library Definitions
#include &lt;time.h&gt;             //    Standard Time Library

//    End of Section one


//    Section two: Preprocessor flags

#define    NOC    1000        //    NOC = Number of Clients
#define AF    20              //    AF = Attack Frequency

//    Both are affected by the proper 

//    End of Section two


//    Section three: Variable declaration &amp; definition

time_t start, during;
//    General Purposed time_t structures
//    Start denotes the start time of the program execution 
//    During denotes the time measument during the execution cycle 

time_t    threshold[NOC/AF];
//    Denotes a time (period) threshold
//    It is directly affected by the AF and the NOC preprocessor tags  

int current_service_client=0;
//    Just as the name implies, it is a common variable that plays the role
//    of enumeration

clock_t beg[NOC], ending[NOC];
//    The proper variables to keep track of the timing service module

//    End of section three


//    Section four: Function Declaration

void slp (double);

//    End of section four


//    Section five: Function Definition

//    Special Purpose Sleep function (Reaches the level of processor clocks)
void slp ( double seconds )
{
  clock_t endwait;
  endwait = clock () + (long)seconds * CLK_TCK ;
  while (clock() &lt; endwait)
        {}
}

//    End of section five

//    Section six: Main function

int
main()
{

    int i;                      //  Local variable used for initializing 
                                //  period modules
    pid_t pid=1;                //  Variable used for the fork() function

    time(&amp;start);               //  Starting counting the time. Beware

    threshold[0]=start+10;      //  Giving a proper 10 seconds head-start

    for(i=1;i&lt;NOC/AF;i++)       //  For all discrete periods, do
    {
        threshold[i]=threshold[i-1]+1;  // Initialize the period thresholds
    }

    for(current_service_client=0;current_service_client&lt;NOC;current_service_client++)
    {
        if (pid)
        {
            pid = fork();
        }
        //    Used especially so that a client can born only one child


        switch( pid )                   //    Service Activation
        {
            case 0:

                while(1)                //    Remaining in the loop until 
                                        //    proper time exit is reached
                {
                    time(&amp;during);      //    Getting the system time

                    if(threshold[(int)current_service_client/(int)AF]&lt;=during)
                    //   If the proper time period has expired, break the loop
                    {
                        break;
                    }
                }


                system("./radclient -f digest localhost auth  ******");  
                //    The most important function for the stress test
                //    Begin a radclient test

                if(current_service_client==NOC-1)
                //    In case we reached the end, calculate time period of 
                //    execution
                {
                     time(&amp;during);     //    Getting current time variable

                    printf("Difference: %d\n", during-threshold[0]);
                                        //    Printing the time difference
                }

                return(0);              //    Exiting
                
                break;

            case -1: // error
                printf("Cannot create process!\n");
                                        //    System Fork Function Failure
                break;
            
            default:
                  break;
        };
    }
    
    return (0x0);                                
                                        //    Returning in case the program 
                                        //    reaches this point safely
}

//   This program can easily be transformed so that it can flush the 
//   contents of the beg and ending variables to a file storage container.
//   (With a slight transform of processor clocks to seconds. See slp function)</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
