<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v13, i06: Listing 1 check_cron</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a6.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a6_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_s1.htm">Sidebar</a></span></td>
		<td><a href="../../../../source/SA/2004/jun2004.tar"><b class=codeListing>jun2004.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>check_cron</I></h2>
            <p> 
            <pre>
#!/bin/ksh
# Listing 1: check_cron
#
# This shell script processes the cron log entries located in the
# /var/cron/log file completed within a certain time interval.
# After the entries have been processed, the script prints a message
# indicating whether or not all jobs completed with a return code of zero.

trap "clean_up" 2 3

. /etc/setenv_path
TRUE=0
FALSE=1

readonly TEMP_DIR=/tmp
readonly TEMP_START=$TEMP_DIR/.check_cron.start.$$
readonly TEMP_FINISH=$TEMP_DIR/.check_cron.finish.$$
readonly TEMP_ALERTS=$TEMP_DIR/.check_cron.alerts.$$
readonly DEFAULT_WINDOW=3600

recent=$FALSE
alert=$FALSE
verbose=$FALSE
users=""
minutes=0
hours=0

clean_up()
{
    rm -f $TEMP_START $TEMP_FINISH $TEMP_ALERTS $TEMP_DIR/.check_cron.*.$$
    exit
}

while getopts ah:m:ru:v OPTION
do
    case "$OPTION"
    in
        a) alert=$TRUE ;;
        h) hours=$OPTARG ;;
        m) minutes=$OPTARG ;;
        r) recent=$TRUE ;;
        u) users=$OPTARG ;;
        v) verbose=$TRUE ;;
    esac
done

if (( $minutes == 0 )) &amp;&amp; (( $hours == 0 )) 
then
    window=$DEFAULT_WINDOW
else
    window=$(( ($minutes*60) + ($hours*3600) ))
fi

rm -f $TEMP_ALERTS $TEMP_DIR/.check_cron.*

&gt; $TEMP_FINISH
&gt; $TEMP_START

if [[ -z $users ]]
then
    grep "^&lt;" /var/cron/log | tail -r &gt; $TEMP_FINISH
    grep "^&gt;" /var/cron/log | tail -r &gt; $TEMP_START
else
    grep "^&lt;" /var/cron/log | tail -r | \
    while read char user rest_of_line
    do
        if (( $(echo $users | grep -c -w $user) &gt; 0 ))
        then
            echo $char $user $rest_of_line &gt;&gt; $TEMP_FINISH
        fi
    done

    grep "^&gt;" /var/cron/log | tail -r | \
    while read char user rest_of_line
    do
        if (( $(echo $users | grep -c -w $user) &gt; 0 ))
        then
            echo $char $user $rest_of_line &gt;&gt; $TEMP_START
            read next_line
            echo $next_line &gt;&gt; $TEMP_START
        fi
    done
fi

date | read c_weekday c_month c_day c_time c_timezone c_year

while read \
f_char1 f_user f_pid f_char2 \
f_weekday f_month f_day f_time f_year f_return_string
do
    if [[ -n $f_return_string ]]
    then
        f_return_code=$(echo $f_return_string | cut -d= -f2)
    else
        f_return_code=0
    fi
    age=$(datediff $f_year/$f_month/$f_day $f_time \
      $c_year/$c_month/$c_day $c_time)
    if (( $age &gt; $window ))
    then
        break
    fi
    while read \
    s_char1 s_user s_pid s_char2 \
    s_weekday s_month s_day s_time s_year
    do
        read s_char3 s_cmd_tag s_command
        if [[ $f_pid = $s_pid ]] &amp;&amp; [[ $f_user = $s_user ]]
        then

            command_fingerprint=$(echo $s_command | md5)
            command_file=$TEMP_DIR/.check_cron.$command_fingerprint.$$

            if (( $recent == $TRUE )) &amp;&amp; [[ -f $command_file ]]
            then
                break
            fi

            duration=$(datediff \
            $s_year/$s_month/$s_day $s_time \
            $f_year/$f_month/$f_day $f_time)

            cat &gt; $command_file &lt;&lt; EOF
user=$s_user
command=$s_command
start=$s_time $s_day $s_month $s_year $s_weekday
duration=$duration sec
rc=$f_return_code

EOF
            if (( $verbose == $TRUE ))
            then
                cat $command_file
            fi

            if (( $f_return_code != 0 ))
            then
                cat $command_file &gt;&gt; $TEMP_ALERTS
            fi
            break
        fi
    done &lt; $TEMP_START
done &lt; $TEMP_FINISH

window_dhms=$(echo $window | secs2dhms)

if [[ -f $TEMP_ALERTS ]]
then
    echo \
"Some cron jobs that completed in the past ${window_dhms} did not return 0!"
    cat $TEMP_ALERTS | sudo -u monitor \
    /opt/monitor/bin/create_alert_file \
    -p medium \
    -c $(basename $0) \
    -s "possible cron problem"
else
    echo "All cron jobs that \c"
    if (( $recent == $TRUE ))
    then
        echo "recently \c"
    fi
    echo "completed in the past ${window_dhms} returned 0."
fi

clean_up</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
