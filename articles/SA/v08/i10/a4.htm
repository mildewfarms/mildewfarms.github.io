<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i10: Compiling Regular Expressions</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/1999/oct99.tar"><b class=codeListing>oct99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Compiling Regular Expressions</H1><p>
<P>Randal L. Schwartz
<P>
Perl's regular expressions set Perl apart from most other scripting languages. Some features (like the positive and negative lookahead, and the optional lazy evaluation of multipliers) make matching troublesome strings trivial in Perl. This power has not gone unnoticed by the open software community -- a package called PCRE available on the 'Net (use your favorite search engine) claims to implement "a regular expression matching engine that's compatible with Perl 5.004's syntax".<P>
Just like the strings they are matching, regular expressions can come from many sources. The most common source is inside the program:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
while (&lt;&gt;) {
    print if /foo/ || /bar/;
}
</PRE>
<P>
This little guy ran in about a quarter of a CPU second for me, and generated a nice list of words that contain <B>foo</B> and <B>bar</B>. Notice that I wrote <B>/foo/</B> and <B>/bar/</B> as separate regular expressions, instead of the seemingly identical <B>/foo|bar/</B>. Why did I do that? Experience. As reported by the following program:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
use Benchmark;
timethese (10 =&gt; {
    'expression or' =&gt;
        '@x = grep /foo/ || /bar/, @words',
    'regex or' =&gt;
        '@x = grep /foo|bar/, @words',
});
</PRE>
<P>
We get the following output from <B>Benchmark</B>:<P>
<PRE>
Benchmark: timing 10 iterations of expression or, regex or... 
expression or:  1 wallclock secs ( 0.97 usr +  0.00 sys =  0.97 CPU) 
regex or:  3 wallclock secs ( 2.87 usr +  0.00 sys =  2.87 CPU)
</PRE>
<P>
This shows that for this example using the regular expression <B>| </B>operator was more than twice as slow. There are certain optimizations that kick in when the text to be matched is a constant string that cannot be done with something more complex, or so says the online documentation. The exact list of optimized things varies from release to release of Perl, so <B>Benchmark</B> is your friend.<P>
Often, the regular expression will come from a computed string, such as the value of a Web form field or a command-line parameter or the result of a prompted query. The Perl syntax lets us interpolate a variable into a regular expression, permitting the regular expression to be created at runtime:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
$regex1 = "foo";
@result = grep /$regex1/, @words;
</PRE>
<P>
In order to be useful, a regular expression first must be "compiled". This is often an expensive step compared to the actual matching of the string to the regular expression. So, usually, this compilation happens while the Perl program itself is parsed and compiled, before the execution of the program. However, when part of a regular expression is a variable (such as the example above), Perl can't do that, and defers the regular expression compilation until execution time.<P>
While this provides a powerful option (creating a regular expression at runtime, it comes with a performance penalty if used incorrectly). Let's test this out:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
push @words, @words;
push @words, @words;
use Benchmark;
$foo = '[f][o][o]';
$bar = '[b][a][r]';
timethese (5 =&gt; {
    'constant' =&gt;
        '@x = grep /[f][o][o]/ || /[b][a][r]/, @words',
    'one variable' =&gt;
        '@x = grep /$foo/ || /[b][a][r]/, @words',
    'two variables' =&gt;
        '@x = grep /$foo/ || /$bar/, @words',
});
</PRE>
<P>
Here's the result:<P>
<PRE>
Benchmark:  timing 5 iterations of constant, one variable, two <BR>
variables... 
constant:  3 wallclock secs ( 2.86 usr +  0.00 sys =  2.86 CPU)
one variable:  4 wallclock secs ( 3.49 usr +  0.00 sys =  3.49 CPU)
two variables:  4 wallclock secs ( 4.11 usr +  0.00 sys =  4.11 CPU)
</PRE>
<P>
Notice that we're paying a penalty for the recompilation of the regular expression. (I made the regular expression a little more complicated and used a little more data to make it obvious.)<P>
Why is this? Well, on each match between an element of <B>@words</B> and the regular expression defined with a variable, Perl has to <B>recompile</B> the regular expression over, and over, and over again.<P>
One way to fix this is to use the "once-only" modifier on a regular expression. By appending a <B>o</B> suffix to the regular expression match operator, any deferred compilation will be executed only once per program invocation. Let's see if this helps:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
push @words, @words;
push @words, @words;
use Benchmark;
$foo = '[f][o][o]';
$bar = '[b][a][r]';
timethese (5 =&gt; {
    'constant' =&gt;
        '@x = grep /[f][o][o]/ || /[b][a][r]/, @words',
    'two variables' =&gt;
        '@x = grep /$foo/ || /$bar/, @words',
    'two variables - opt' =&gt;
        '@x = grep /$foo/o || /$bar/o, @words',
});
</PRE>
<P>
When we see the results, we confirm that it has helped significantly:<P>
<PRE>
Benchmark: timing 5 iterations of constant, two variables, two <BR>
           variables - opt...
constant:  3 wallclock secs ( 2.86 usr +  0.01 sys =  2.87 CPU)
two variables:  4 wallclock secs ( 4.15 usr +  0.01 sys =  4.16 CPU)
two variables - opt:  3 wallclock secs ( 2.98 usr +  0.00 sys =  <BR>
                      2.98 CPU)
                      </PRE>
<P>
Yes, now we're getting close to the original compiled-in regular expression speed. But there's a downside to using this once-only flag -- we can't change the regular expression after it has been used once.<P>
So, code like this is fine:<P>
<PRE>
$var = param('search_for');
@results = grep /$var/o, @input;
</PRE>
<P>
But code like this is very broken and hard to track down:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
for $item (qw(foo bar)) {
    @results = grep /$item/o, @words;
    print @results. " words match $item\n";
}
</PRE>
<P>
This prints:<P>
<PRE>
43 words match foo
43 words match bar
</PRE>
<P>
instead of the proper answer:<P>
<PRE>
43 words match foo
131 words match bar
</PRE>
<P>
which I got after removing the <B>o</B> suffix. That's because the <B>foo </B>string got memorized into the regular expression compilation, even after <B>$item</B> changed for the second iteration.<P>
So, what are we to do? How do we get the speed of a once-compiled regular expression but still be able to loop through many search patterns?<P>
One way is to use an anonymous subroutine that is compiled once for each change in the pattern variable. That'd look like this:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
for $item (qw(foo bar)) {
    $match = eval 'sub { $_[0] =~ /$item/o }';
    @results = grep $match-&gt;($_), @words;
    print @results. " words match $item\n";
}
</PRE>
<P>
which again prints the right values. What's happening here is a bit weird -- we're still using <B>$item</B> as the pattern, but because each iteration of the loop recompiles the anonymous subroutine (referenced by <B>$match</B>), the once-only flag effectively resets.<P>
Of course, we're throwing away the result of the compilation on the next iteration of the loop, but at least we're not recompiling for each item in <B>@words</B>.<P>
You can even make a subroutine that makes these subroutines:<P>
<PRE>
sub make_match {
    my $item = shift;
    eval 'sub { $_[0] =~ /$item/o }';
$match_foo = make_match "foo";
$match_bar = make_match "bar";
@foo_words = grep $match_foo-&gt;($_), @words;
@bar_words = grep $match_bar-&gt;($_), @words;
</PRE>
<P>
Here, the reference to <B>$item</B> in the anonymous subroutine generates a "closure", which remembers the value of <B>$item</B> independently as long as the subroutine is alive.<P>
And then, there's Perl 5.005 to the rescue! The <B>qr//</B> quoting operator was introduced in this latest version of Perl. The purpose of the operator is to provide a way to compile regular expressions and pass the compiled values around in variables, rather than the original source strings.<P>
Let's fix that search again:<P>
<PRE>
@ARGV = qw(/usr/dict/words);
@words = &lt;&gt;;
for $item (qw(foo bar)) {
    $compiled = qr/$item/;
    @results = grep /$compiled/, @words;
    print @results. " words match $item\n";
}
</PRE>
<P>
Ahh yes, the right answer again. And Perl compiles the regular expression once, rather than each time the string is seen. We could even compile them all at once:<P>
<PRE>
@patterns = map { qr/$_/ } qw(foo bar);
</PRE>
<P>
and then use <B>@patterns</B> interpolated as we would have used the original strings.<P>
I hope you've enjoyed this little compilation about compiling regular expressions. Until next time, enjoy. <P>

<p>
<h1>About the Author</h1><p>
Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has co-authored <I>Programming Perl</I>, <I>Learning Perl</I> , <I>Learning Perl for Win32 Systems</I>, and <I>Effective Perl Programming</I>, as well as writing regular columns for <I>WebTechniques</I>, <I>Performance Computing</I>, <I>Sys Admin</I>, and <I>Linux</I> magazines. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc. Randal can be reached for comment at: merlyn@stonehenge.com and welcomes questions on Perl and other related topics.</BODY>




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>