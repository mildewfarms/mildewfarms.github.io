<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i05: Enhancing Network Security with tcp_wrapper</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Enhancing Network Security with tcp_wrapper</H1><p>
<P>Christopher Bush
<P>
More than just the Internet concerns the security-minded systems administrator. The same technology that made the Internet what it is - TCP/IP - has now been widely deployed on private LANs, as more companies have realized the benefits of open systems solutions, and software giants have embraced those solutions and technologies in their product offerings. Now, the same vulnerabilities exist on private internal networks, even if they aren't connected to the Internet. It is widely recognized that most computer security breaches result from attacks within an organization. Even if you are connected to the Internet, and protected by a seemingly impenetrable firewall, you still must protect yourself from attack over the network.<p>
So what does a savvy systems administrator do? You can cross your fingers and hope. You can rely on your network administrator to provide strong network security. Both are bad ideas. You should have an overall enterprise security architecture, which consists of many pieces. Developing an overall security strategy is far beyond the scope of this article. I have, however, provided a list of resources that you may wish to consult as you develop a strategy (see sidebar "UNIX Network Security Resources"). In this article, I will present a detailed description of one of the tactical tools that should be included in any plan to provide solid network security on your UNIX systems. That tool is Wietse Venema's <B>tcp_wrapper</B> (sometimes called <B>log_tcp</B> or <B>tcpd</B>). This article covers the basics of installing and using the software, and more information is contained in an accompanying article on the <I>Sys Admin</I> Web site at: <B>www.samag.com</B>.<p>
<B>What Is tcp_wrapper?</b><p>The <B>tcp_wrapper</B> software provides an extra level of security for network services such as <B>telnet</B>, <B>ftp</B>, <B>tftp</B>, <B>rlogin</B>, and more. Essentially, it is a small daemon program that acts as a "security blanket" for server daemons that provide these network services. The <B>tcp_wrapper</B> daemon, <B>tcpd</B>, does not actually interact directly with either the client or the server for the protected applications. One of the fundamental requirements for using the <B>tcp_wrapper</B> is that your system uses the network service "super daemon", <B>inetd</B>, to start server daemons like <B>telnetd</B>, etc. The <B>tcpd</B> daemon forms an additional layer, or wrapper, between <B>inetd</B> and the application server daemon. See Figure 1.<p>
Under normal, unsecure conditions, <B>inetd</B> listens on several ports for incoming connection requests, and spawns the appropriate application server daemons as necessary. If <B>inetd</B> gets a connection request on TCP port 23, the standard <B>telnet</B> port, it will spawn the <B>telnet</B> daemon (<B>telnetd</B> or <B>in.telnetd</B>), and the connection request will be handed off to that process. The client then communicates directly with that server daemon, freeing <B>inetd</B> to continue listening for other requests. With the <B>tcp_wrapper</B> software installed and configured, <B>inetd</B> will spawn <B>tcpd</B>, which will perform some logging functions through the <B>syslogd</B>(8) daemon, and optionally, will do some access control checking. If access to the requested service is granted, <B>tcpd</B> spawns the "real" network service daemon, and <B>tcpd</B> goes away. The client then communicates directly with the application server daemon. As you can see, once a connection has been established between the client and the protected server daemon, <B>tcpd</B> imposes no additional overhead on that client-server interaction. It does not filter the data exchanged between client and server, or perform any additional checks for that connection.<p>
The security provided by <B>tcpd</B> is two-fold. First, it logs all connection attempts to protected services using the <B>syslog</B> facility. This points out another major requirement of using the <B>tcp_wrapper</B> tool. You need to be running the <B>syslogd</B>(8) daemon, either on the same host or through a centralized loghost server. I consider logging a security feature because without it, you have no record of connection requests in your logs. The basic setup of <B>inetd</B> and the application servers do not provide this logging. A solid audit trail should be an integral part of building and running secure systems. The second security feature of <B>tcp_wrapper</B> is the ability for the <B>tcpd</B> daemon to perform access control. This allows you to selectively accept or reject connection requests before they ever reach the protected service's daemon. That is why it is called a wrapper. It forms a protective layer between the client and server.<p>
In the following sections, I'll discuss how to install and configure the <B>tcp_wrapper</B> software to achieve the logging and access control needed to administer secure network services on your systems.<p>
<B>Downloading and Installing</b><p>I downloaded the most recent version, <B>tcp_wrapper</B> 7.6, from CERT's web site. CERT (Computer Emergency Response Team) was established by DARPA and based at Carnegie Mellon University in 1988, primarily in response to the now infamous Morris worm. The URL for the <B>tcp_wrapper</B> package is:<p>
<PRE>
http://www.cert.org/ftp/tools/tcp_wrappers/tcp_wrappers_7.6.tar.gz
</PRE>
Once you have downloaded the package, unzip it and extract the <B>tar</B> archive in your source tree. For example, I'll assume you have downloaded the file above to your <B>/usr/local/src</B> directory:<p>
<PRE>
% cd /usr/local/src
% gunzip tcp_wrappers_7.6.tar.gz
% tar -xvf tcp_wrappers_7.6.tar
% cd tcp_wrappers_7.6
</PRE>
<p>
You are now ready to compile the source and install it on your system. A Makefile for compilation of the source is included. However, unlike much of the freely available software for UNIX, there is no Configure (or configure) script. If there are any concerns you need to take into account to build the <B>tcp_wrapper</B> package on your version of UNIX, you should edit the Makefile yourself, and judiciously comment or uncomment various lines. The good news is that seemingly every variety of UNIX is supported, and the Makefile is generously commented, making it relatively simple to get going.<p>
To see instructions for the minimal changes you must make, type the command:<p>
<PRE>
% make what
</PRE>
<p>
You will see a brief message indicating that you must edit the Makefile and set the <B>REAL_DAEMON_DIR</B> macro to get started. The value you assign to <B>REAL_DAEMON_DIR</B> depends entirely upon how you will install the <B>tcp_wrapper</B> daemon, <B>tcpd</B>. You have two choices for your installation, referred to in the README file accompanying the software as the "easy" and "advanced" installations, respectively. In the easy install, you will move protected server daemons into a separate directory, and replace them in their original location with copies of <B>tcpd</B>, renamed to the same file name as the original daemon. For example, you might move all of the server daemons you will be protecting to <B>usr/sbin/real_daemons</B>.<p>
<PRE>
% mkdir /usr/sbin/real_daemons
% mv /usr/sbin/in.telnetd /usr/sbin/real_daemons
% cp /usr/local/tcp_wrappers_7.6/tcpd /usr/sbin/in.telnetd
</PRE>
<p>
You would repeat the last two commands for each daemon you will be protecting. If this is how you intend to use <B>tcp_wrapper</B>, then before building the software, you must edit the Makefile and set <B>REAL_DAEMON_DIR</B> to the location to which you moved the actual server daemons, in this case <B>/usr/sbin/real_daemons</B>. Installing <B>tcp_wrapper</B> this way requires no modification to the configuration file for <B>inetd</B>, <B>/etc/inetd.conf</B>. With this setup, when <B>inetd</B> gets a connection request, it thinks it is still spawning the real server daemon. In reality, you have "faked it" into starting <B>tcpd</B>, which will then start the real server daemon based on the value of <B>REAL_DAEMON_DIR</B> that was compiled in.<p>
I've never been comfortable with this method of installing the <B>tcp_wrapper</B> software. With no changes to <B>/etc/inetd.conf</B> and no daemon named <B>tcpd</B> lying around in <B>/usr/sbin</B> or wherever, it isn't as obvious from an initial system survey that <B>tcpd</B> is in use. This can be troublesome to new systems administrators who are unfamiliar with the systems for which they are responsible. It also can be troublesome for forgetful administrators like me. With this type of installation, if you install a vendor patch that installs a new version of one of the network service daemons, it will replace the fake one (the copy of <B>tcpd</B>) that you have in place. Now, instead of spawning <B>tcpd</B> for this service, <B>inetd</B> will spawn the real server daemon, and any access control and logging you thought you were doing for that service with <B>tcpd</B> will be gone. This is definitely not a good thing.<p>
The second, or "advanced" technique for installing the <B>tcp_wrapper</B> software involves setting <B>REAL_DAEMON_DIR</B> in the Makefile to the same directory as your vendor-supplied network server daemons. In most cases, this is either <B>/usr/sbin</B>, <B>/usr/etc</B>, or perhaps <B>/usr/libexec</B> for BSD systems. In the advanced installation, you leave these network server daemons where they are, install <B>tcpd</B> somewhere (most likely in this same directory), and modify <B>/etc/inetd.conf</B>, so that <B>inetd</B> will spawn <B>tcpd</B> for protected services. I'll cover the modifications to <B>inetd.conf</B> in detail later.<p>
If you are eager to get started, you can make the <B>tcp_wrapper</B> software without ever editing the Makefile. You will be accepting the default settings for all optionally configurable macros, and setting the <B>REAL_DAEMON_DIR</B> macro on the command line. Simply scan the Makefile for the appropriate build target for your UNIX type. Let's say you're building on Linux (congratulations!); you can get going quickly by typing:<p>
<PRE>
% make REAL_DAEMON_DIR=/usr/sbin linux
</PRE>
<p>
The software should build easily, leaving the executable files right there in the source directory. I'll assume you are performing the advanced installation and will be editing <B>/etc/inetd.conf</B>, which will be discussed in the next section. For now, you'll want to copy the executables and man pages to the appropriate locations on your system. Copy the <B>tcpd</B> executable to the same directory as your other network daemons - the directory you assigned as a value to <B>REAL_DAEMON_DIR</B>. Copy the man pages (<B>tcpd.8</B>, <B>tcpdmatch.8</B>, <B>tcpdchk.8</B>, <B>hosts_access.5</B>, <B>hosts_options.5</B>) to the appropriate directory. This is usually <B>/usr/local/man</B>. A few very useful utility programs will get built as well. These are <B>tcpdmatch</B>, <B>tcpdchk</B>, <B>try_from</B>, and <B>safe_finger</B>. I copied these to <B>/usr/local/etc</B>. You should put them wherever you like to keep non-vendor administrator utilities. These utilities are discussed in the accompanying Web article mentioned earlier.<p>
You now have a <B>tcp_wrapper</B> installation ready for configuration that is using all of the default options. This should be sufficient for most installations, and I recommend using this build, with the "advanced" installation method, until you are comfortable with configuring and using the software. If at a later time, you wish to explore some of the optional macros in the Makefile, feel free. These macros are also discussed briefly in the accompanying Web article.<p>
<B>Configuring and Using tcp_wrapper</b><p>Now that <B>tcp_wrapper</B> has been compiled and installed, it's time to get everything else set up and "wrap up" your network services. I will assume you've installed <B>tcpd</B> using the advanced method, so I'll discuss the necessary modifications to <B>/etc/inetd.conf</B>. I'll also assume you are familiar with <B>inetd</B> and the format of the <B>inetd.conf</B> file and limit the discussion to those modifications necessary to use <B>tcp_wrapper</B>.<p>
A typical service in <B>inetd.conf</B> has a line like this for starting the <B>telnet</B> server:<p>
<PRE>
telnet  stream  tcp    nowait  root   /usr/sbin/in.telnetd   in.telnetd
</PRE>
<p>
The sixth field is the most important piece for configuring <B>tcp_wrapper</B>. This field is where the path to the server daemon is specified and is where you will make your modification and tell <B>inetd</B> to run <B>tcpd</B> instead. The line above becomes:<p>
<PRE>
telnet  stream  tcp    nowait  root   /usr/sbin/tcpd  in.telnetd
</PRE>
<p>
This assumes you have installed <B>tcpd</B> in <B>/usr/sbin</B>. The <B>tcpd</B> daemon will get the real daemon name (<B>in.telnetd</B> in the example above) from the argument field in <B>inetd.conf</B> (the last field), and will spawn that daemon after performing its logging and access control checks. Thus, setting <B>REAL_DAEMON_DIR</B> properly at compile time is very important. <B>tcpd</B> needs to know where to find the real server daemon. Don't worry, though, if you have server daemons in <B>inetd.conf</B> that don't live in this default directory. This may be the case for third party application daemons, license server daemons, or other open source software you may have built. You can specify the full path to the real server daemon right there in <B>inetd.conf</B>. For example:<p>
<PRE>
ftp     stream  tcp    nowait  root    /usr/sbin/tcpd  \<br>                                       /usr/local/sbin/wu.ftpd -l -i -a
</PRE>
<p>
Note that in the above example, there are other command-line arguments related to the start of the real server daemon. They will be passed right along when <B>tcpd</B> starts this daemon.<p>
That's about it for configuring <B>inetd.conf</B>. Make similar changes for each server you wish to protect, and don't forget to send a HUP signal to <B>inetd</B> when you're done.<p>
Once you have <B>tcpd</B> wrapped around your network services, you will start seeing messages being logged through <B>syslog</B> for connection requests. Since we haven't configured any access control rules yet, these should be messages indicating that a connection has been accepted. An example of a typical <B>syslog</B> message from <B>tcpd</B>, <B>telnetd</B> in this case, looks like this:<p>
<PRE>
Jan 17 21:12:03 rocinante in.telnetd[367]: connect from lerxst.bushnet.net
</PRE>
<p>
The next step is to configure some access control rules, so you can let the good guys in and keep the bad guys out. There are two files that contain access control rules: <B>/etc/hosts.allow</B> and <B>/etc/hosts.deny</B>. They each contain rules of the following form:<p>
<PRE>
daemon_list : client_list [: shell command]
</PRE>
<p>
A complete reference to the access control rule language can be found in the <B>hosts_access</B>(5) man page included with the distribution.<p>
The <B>daemon_list</B> is the list of server daemons to which this rule applies. The <B>client_list</B> is a list of client host names or IP addresses, optionally with user names, to which the rule applies. The optional shell command can be any UNIX command or script to be executed in a spawned shell whenever the rule matches against a particular connection request. Both the <B>daemon_list</B> and <B>client_list</B> can contain multiple items, separated by either whitespace or a comma.<p>
When <B>tcpd</B> receives a connection request, it attempts to find a matching rule by examining these files in a specific order. First, <B>/etc/hosts.allow</B> is searched, sequentially. If a match is found, the connection is allowed, and is handed off to the real server daemon. If no match is found in <B>hosts.allow</B>, <B>tcpd</B> searches for a matching rule in <B>/etc/hosts.deny</B>. If a match is found there, the connection is refused. If no match is found in either file, the connection is implicitly accepted. If either file is missing, or contains no rules, that step in the process is simply ignored. A <B>hosts.deny</B> file with no rules would result in all connections being accepted, regardless of the contents of <B>/etc/hosts.allow</B>.<p>
<B>What tcp_wrapper Can't Do</b><p>As discussed previously, the <B>tcpd</B> daemon goes away after a connection is established between a client and server. For this reason, it can do nothing to protect daemons that service more than one client at a time, other than to provide access control and logging of the first request. The NFS mount daemon, <B>mountd</B>(8), is a good example of this. The Web server daemon, <B>httpd</B>, is also a poor candidate for protection with <B>tcpd</B> for similar reasons. There may also be server daemons, typically UDP-based ones, that remain running for a time after the client disconnects, either waiting for another message from the same client, or to service another client. Many UDP or RPC/UDP daemons behave this way. One example of such a service is the talk service, <B>in.talkd</B>(8). Typically, services that use the wait flag in the <B>inetd.conf</B> file are like this. Again, you may only realize the benefits of <B>tcp_wrapper</B> with these services on the initial client request that resulted in the server daemon being spawned. With these restrictions in mind, feel free to use <B>tcpd</B> for whatever other services spawned normally by <B>inetd</B> that you feel necessary.<p>
<B>Security Architecture</b><p>The <B>tcp_wrapper</B> software should be just one tool you use in implementing an overall security strategy. That strategy should also include a firewall if you are connected to the Internet, physical security for your people and systems, host and filesystem security, password control and administration, and perhaps even encryption. These should be backed by a concisely documented and enforceable security policy that all employees or members of your organization have read, understood, and agreed to. Detailing such a strategy and accompanying policy is far beyond the scope of this article. The sidebar contains a brief list of resources that should prove invaluable to you as you seek the tools and information you need to create and implement an enterprise-wide security architecture.<p>
Instead, I have shown you the ins and outs of a particular tool that, while just one small piece of the puzzle, is an important piece. The <B>tcp_wrapper</B> package can be configured a number of different ways, making it adaptable to just about any network security policy.<p>
Depending on your organization and the services you provide on your systems, you may find yourself implementing one of two diametrically opposed security policies. The first says, "That which is not explicitly allowed is denied." This is either an extremely paranoid approach (not necessarily a bad thing), or one for specialized systems where you know exactly who needs access to your system(s), and from where they will be connecting. Many Internet Web hosting service companies will do this with <B>telnet</B> and <B>ftp</B> services on their publicly accessible Web servers. They need to provide <B>telnet</B> and <B>ftp</B> access to the customer's Webmaster, so she can manage the content on the site. But only that person should ever have need for those services. On the other hand, the world at large should have <B>http</B>/<B>https</B> access (if it's a public Web site). It simply isn't possible to just put the Web server behind a firewall or filtering router and deny all incoming TCP connections. It wouldn't make for a very successful Web site. By using <B>tcp_wrapper</B> on the Web server, the hosting company can provide a reasonably secure way for the customer's Webmaster to manage the site, while allowing the general public to browse the site's content. See the accompanying Web article for more information on Web server usage.<p>
<B>Conclusion</b><p>The <B>tcp_wrapper</B> software is clearly a powerful tool that should be part of any security implementation. You cannot afford to rely solely on one or two utilities cobbled together on a few key systems, though. Security requires a rigorous, disciplined approach that is clearly documented, and proactively managed. Don't just implement <B>tcp_wrapper</B> on a couple of your systems. And, don't ignore the access control capabilities just because you're behind a firewall and think all the people in your organization are trustworthy. That guard at the farm gate will do you no good if the fox has been hired to work at the hen house.<p>
Consider also how <B>tcp_wrapper</B> will complement, or interact with, other security tools you use. Also consider ways in which you can make <B>tcp_wrapper</B> easier to administer. Heavily used systems will result in copious amounts of logging to your <B>syslog</B> daemon. If you have a lot of systems, you may want to centralize <B>syslog</B> activity onto one single host, the loghost. If so, that may mean only one or two primary log files to scan, but they will also be much larger. A useful utility that I think complements <B>tcp_wrapper</B> nicely is called <B>swatch</B>, available from:<p>
<PRE>
ftp://ftp.stanford.edu/general/security-tools/swatch
</PRE>
<p>
The <B>swatch</B> utility, written in Perl, is a handy tool for scanning system logs for desired patterns. Results of scans can be emailed, or a shell script can be triggered, enabling you to send pages or whatever other kind of alerting you may be able to script. There is a multitude of other freely available security tools you'll want to have a look at also. Visit:<p>
<PRE>
http://www.stanford.edu/group/itss-ccs/ \<br>  security/Bestuse/software.html
</PRE>
<p>
for a good list.<p>
COPS is another utility that complements <B>tcp_wrapper</B>. COPS will report on the internal integrity of your system, including alerting you to files that have changed since a baseline checkpoint. If your system has been compromised through some other means, and your <B>/etc/hosts.allow</B> or <B>/etc/hosts.deny</B> files have been modified, you'll want to know about it as soon as possible. COPS is one way to do that.<p>
Security is a big part of systems administration. Depending upon the number of systems you are responsible for, it can also be a big problem. Take advantage of tools like <B>tcp_wrapper</B>, and implement them wisely and uniformly, and in conjunction with an overall strategy that includes other tools. You'll sleep better at night, as will your users, knowing that everything is safe and sound. 
<p>
<h1>About the Author</h1><p>
Chris Bush is a Programmer Analyst for a major mid-west bank in Cleveland, Ohio. He does Web site management, Web development, Internet/Intranet architecture, UNIX systems administration, and dabbles with Linux at home in his spare time. He can be reached at chris.bush@stratos.net.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>