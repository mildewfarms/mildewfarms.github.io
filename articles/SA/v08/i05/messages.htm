<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i05:  New Messages </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>New Messages</H1><P><p>
<I>Please send letters via email to saletter@mfi.com.<br>
</I>From: Phil Macias (<B>pmacias@kenan.com</B>)<p>
I downloaded the <B>syslog</B> monitoring script from your site and gave it a go. It was nice, but I wanted to colorize key words and not the entire line. I hacked the script to do this, but found that it was highly processor-intensive.<p>
I wrote a new script, enclosed below, that not only is faster but allows colorization of Perl regular expressions.<p>
I run it on a Linux box. I have symlinks of all my logs in <B>/root/LOGS/</B>.<p>
<PRE>
#!/usr/local/bin/perl
     
## by phil macias
## 10/7/98
  
%hash = (
         ## system
         "su " =&gt; "[41;31;1m",
         "kernel" =&gt; "[41;31;1m",
   
         ## DNS
         "named" =&gt; "[44;36;1m",
         "Err/TO" =&gt; "[44;36;1m",
     
         ## sendmail
         "sendmail" =&gt; "[40;36;1m",
         "stat=Deferred" =&gt; "[40;36;1m",
         "dead.letter" =&gt; "[40;36;1m",
         "return to sender" =&gt; "[40;36;1m",
    
         ## web
         "GET" =&gt; "[40;32;1m",
   
         ## ip addresses
         '\d+\.\d+\.\d+\.\d+' =&gt; "[40;33;1m",
         );
    
     
open(LOGGER, "tail -v -n1 -f /root/LOGS/* |");
while(&lt;LOGGER&gt;)
 {
  foreach $h (keys %hash)
    {
     if (/$h/i)
       {
        s/($h)/\033$hash{$h}$1\033[0m/;      
       }
     }
     print;
  }
</PRE>
<p>
<I>Thank you.<p>
</I><p>
From: Timothy Best (<B>tbest@us.ibm.com</B>)<p>
On page 55 of the March 1999 issue, there are two errors. The article defines the <B>$\</B> as the input record separator. It is in fact the output record separator in Perl. This is reflected a few lines down by the:<p>
<PRE>
$/="";
</PRE>
<P>
Also, I believe there is an error a few lines below where the syntax is listed as:<p>
<PRE>
$="/n/n";
</PRE>
<p>
This is an illegal operation in Perl as the <B>$=</B> is a special variable. I believe the author intended to once again refer to the input record separator, thus making the line:<p>
<PRE>
$/="\n\n";
</PRE>
<p>
Just trying to help.<p>
From: Keith R. Jarvis (<B>kjarvis@iss.net</B>)<p>
On January 4th, 1999 on the public BUGTRAQ mailing list, the following message was posted at:<p>
<PRE>
http://www.netspace.org/cgi-bin/wa?A2=ind9901a&amp;L=bugtraq&amp;F=&amp;S=&amp;P=4998
</PRE>
<p>
Sender: Bugtraq List &lt;<B>BUGTRAQ@NETSPACE.ORG</B>&gt;<p>
From: "Jan B. Koum" &lt;<B>jkb@BEST.COM</B>&gt;<p>
Subject: January<I> Sys Admin</I> EY script DoS bug.<p>
   Lets make it short. <I>Sys Admin</I> (<B>www.samag.com</B> - btw, their DNS is broken. Isn't it ironic that they can't get their own systems running, yet they teach others how) magazine published a script in the Jan. 1999 issue which, after you run it as root, tells you stuff about your system. Here are some parts of this script:<p>
<PRE>
    set HOSTNAME=`hostname`
    set basedir=/tmp/eyscan
    set OUTPUT=?{basedir}/ey-?{HOSTNAME}.out
</PRE>
After that, output like <B>ls -l /etc/passwd</B> is sent to <B>$OUTFILE</B>.<p>
So, you know that your admin runs lame scripts as root and what do you do?<p>
<PRE>
    % mkdir /tmp/eyscan
    % ln -s /etc/passwd /tmp/eyscan/ey-`hostname`.out
</PRE>
After an admin runs the script, he is toasted. A point to this story:<p>
<PRE>
    o  set basedir=/root or /var/run ..
Yan
</PRE>
I am wondering if <I>Sys Admin</I> magazine will be making an official statement in regard to this post or providing a fix for the mentioned script. I do not wish to misrepresent your organization in any of our products or information. Thank you in advance.<p>
<p>
<I>Keith, thank you for bringing this to our attention. The author says for extra security, change the variable:<p>
</I>
<PRE>
set basedir=/tmp/eyscan
</PRE>
<p>
<I>to:<p>
</I>
<PRE>
set basedir=/root
</PRE>
<p>
From: The Book Home (<B>thebook@hammer.thebook.com</B>)<p>
I am currently reading your Anti-Spam articles and wanted to share our method of creating and using the access database.<p>
Unless you have installed the Berkeley DB package, <B>makemap</B> hash does not work correctly. One obvious solution is to install the Berkeley package. The other is to configure the <B>sendmail.cf</B> for the dbm database format.<p>
When building the <B>sendmail.cf</B> file, you add the following line to use the access database:<p>
<PRE>
FEATURE(access_db)
</PRE>
<p>
This would use the hash format, alternately, you can use:<p>
<PRE>
FEATURE(access_db, dbm -o /etc/mail/access)
</PRE>
<p>
to specify a dbm file.<p>
We keep our spammers list in <B>/etc/mail/spammer.txt</B>, so then you can just create the <B>/etc/mail/access</B> database file using <B>makemap</B>:<p>
<PRE>
makemap dbm /etc/mail/access &lt; /etc/mail/spammer.txt
</PRE>
<p>
This is an alternative method for those without Berkeley DB who would rather not go though installing another package.<p>
<p>
<I>Thanks for the input. Good alternative. <br>
REB</I>
<p>



<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
