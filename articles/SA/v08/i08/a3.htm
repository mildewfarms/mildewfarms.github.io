<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i08: The Missing Symlink</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/1999/aug99.tar"><b class=codeListing>aug99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>The Missing Symlink</H1><p>
<P>Randal L. Schwartz
<P>
Symbolic links were not present in the first version of UNIX that I used. That would be UNIX V6, back in 1977, when the UNIX kernel size was under 32K. It's hard to imagine anything under 32K being associated with UNIX these days.<p>
But somewhere in the bowels of the University of California at Berkeley, in the early 80s, the boys working on BSD concocted a scheme to rectify two of the biggest problems with hard links: they couldn't be made to a directory, and they didn't want to point to another mounted filesystem. Their solution was that now common feature, a symbolic link.<p>
A symbolic link is essentially a text string that sits in place of a file. When the symbolic link's filename is accessed, the UNIX kernel replaces the filename with its text value instead, like a macro expansion. This all happens transparently to the executing program (unlike some other popular operating systems).<p>
From the shell, symbolic links are easy enough to create:<p>
<B><pre>
ln -s /usr/lib/perl5 ./Lib
</pre>
</B>which makes a reference to <B>Lib</B> in the current directory hop over to <B>/usr/lib/perl5/</B>. From Perl, this same step is:<p>
<B><pre>
symlink("/usr/lib/perl5", "./Lib") or die "$!";
</pre>
</B>We can see this is so with:<p>
<B><pre>
ls -l
</pre>
</B>which will show something like:<p>
<B>     <pre>
..... Lib -&gt; /usr/lib/perl5
</pre>
</B>indicating this redirection is going on. That same fact is apparent to Perl, like so:<p>
<B><pre>
my $where = readlink("Lib");
print "Lib =&gt; $where\n";
</pre>
</B>But what if <B>/usr/lib</B> itself is also a symbolic link, say to <B>/lib</B>? Well, the system nicely picks that up when it's looking down the steps from <B>/usr</B> to <B>/usr/lib</B>, redirects that to <B>/lib</B>, and continues from there to look for <B>perl5</B>.<p>
Thus, following a symlink may involve multiple expansions. There's a limit to the number of expansions in a path to prevent runaway loops, but generally it's enough that you won't worry about it.<p>
What's the easiest way to really know where the symlink ends up then? Well, you could keep typing a lot of <B>ls -l</B> invocations, and take careful notes, or just write a Perl program to do the expansion for you.<p>
While we're at it, let's also make this work recursively from a starting directory in a filetree, dumping out all the symlinks and their ultimate expansions in all directories contained within. Cool.<p>
So, here's a program that does just that, presented a few lines at a time.<p>
<B><pre>
#!/usr/bin/perl -w
use strict;
$|++;
</pre>
</B>These first three lines tell us where to find Perl, and enable warnings and the usually good compiler restrictions. We'll also disable buffering on <B>STDOUT</B>, so I can see how far the program has gotten during a long run.<p>
<B><pre>
use File::Find;
use Cwd;
</pre>
</B>Next, we'll pull in two modules from the standard Perl distribution library. <B>File::Find</B> helps us recurse through a directory hierarchy without thinking too hard about it, and <B>Cwd</B> gets the current working directory, usually without forking off a child process.<p>
<B><pre>
my $dir = cwd;
</pre>
</B>Now, we'll get the current directory via <B>cwd</B> (imported from <B>Cwd</B>). We'll need this to properly expand relative names into absolute names.<p>
<B><pre>
find sub {
  ##### contents here presented below
}, @ARGV;
</pre>
</B>Next, the outer part of the body of the program. We'll call <B>find</B> (imported from the <B>File::Find</B> module), passing it an anonymous subroutine reference, and the command-line argument array <B>@ARGV</B>. The subroutine (whose contents are defined below) will be called for each file or directory in all directories and subdirectories starting at the top-level directories named in <B>@ARGV</B>.<p>
Now for the guts of the subroutine. In the real program, these are really located where <B>#####</B> is marked above.<p>
<B><pre>
return unless -l;
</pre>
</B>When this subroutine is called, <B>$_</B> is set to the name of the file or directory of interest, and the current directory is set to the directory that contains this item. Here, we'll end up returning if the item is not a symbolic link.<p>
The next two lines set up the core of the routine. I'm gonna have an <B>@left</B> and an <B>@right</B> variable. Think of <B>@left</B> as "where in the filetree am I so far?" and <B>@right</B> as "where else am I being told to go?". The basic task is to take one element at a time from the front of <B>@right</B>, and try to glue it onto the end of <B>@left</B>, until we have no more <B>@right</B> to go. If at any step, the path of <B>@left</B> is a symlink, however, we'll have to expand it and start again. Also, if the element being examined from <B>@right</B> is a dot or dot-dot, we'll need to back up on <B>@left</B> instead.<p>
<B>     <pre>
my @right = split /\//, $File::Find::name;
</pre>
</B>The variable <B>$File::Find::name</B> has the full pathname starting from the kind of name we gave on the command line. If that was a relative name, this will also be a relative name to the original working directory (now saved in <B>$dir</B>). Here, I'm splitting the name apart into individual elements.<p>
<B>     <pre>
my @left = do {
  @right &amp;&amp; ($right[0] eq "") ?
    shift @right :            # quick way
      split /\//, $dir;
};    # first element always null
</pre>
</B>This is a bit more complicated, so I'll take it slowly. We're setting up <B>@left</B> to be the value of this expression coming from a <B>do</B> block. If the first element of <B>@right</B> is empty, then the original string began with a slash, and we need to be relative to the root directory. That's handled by moving that empty element from the beginning of <B>@right</B> to become the <I>only</I> element of <B>@left</B>. Otherwise, we had a relative name, and we'll preload <B>@left</B> with a split-apart version of the initial working directory.<p>
<B><pre>
while (@right) {
</pre>
</B>Now, as long as we have items to keep walking, we'll do this.<p>
<B><pre>
my $item = shift @right;
next if $item eq "." or $item eq "";
</pre>
</B>This grabs the next step, and discards it if it's just an empty string or a single dot, meaning that we would have stayed at the current directory.<p>
<B><pre>
if ($item eq "..") {
  pop @left if @left &gt; 1;


  next;
  }
</pre>
</B>And if it's dot-dot, we'll have to pop up a level on our current position (unless it would have us back up over the top).<p>
<B>     <pre>
my $link = readlink (join "/", @left, $item);
</pre>
</B>Now, if the path of <B>@left</B>, together with the next step, forms a symbolic link, the value of <B>$link</B> will be defined to be what we need to replace <B>$item</B> with. Otherwise, we can just slide along.<p>
<B><pre>
if (defined $link) {
  my @parts = split /\//, $link;
  if (@parts &amp;&amp; ($parts[0] eq "")) { # absolute
    @left = shift @parts;   # quick way
  }
  unshift @right, @parts;
  next;
</pre>
</B>If it's a symbolic link, we'll split it apart. If it's absolute, <B>@left</B> gets reset to the top. Otherwise, <B>@left</B> stays as is. We'll also push whatever we got in front of the remainder of <B>@right</B>, as it will influence the interpretation of that remaining path.<p>
<B><pre>
} else {
  push @left, $item;
  next;
}
</pre>
</B>If it wasn't a symbolic link at this step, it's simple; we just move along to that point in <B>@left</B>.<p>
<B>     <pre>
}
print "$File::Find::name is ", join("/", @left), "\n";
</pre>
</B>When the loop is over, we'll dump out the resulting path of <B>@left</B>.<p>
And there you have it. It's a bit tricky, since the macro expansion of a symbolic link is somewhat recursive, but Perl's data structures and full access to the right system calls give us a straightforward way of interpreting symbolic links.<p>
Now you'll never have to wonder where those links point again. Until next time, enjoy!<p>

<p>
<h1>About the Author</h1><p>
Randal L. Schwartz is an eclectic tradesman and entrepreneur, making his living through software design, technical writing and training, systems administration, security consultation, and video production. He is known internationally for his prolific, humorous, and occasionally incorrect spatterings on Usenet - especially his "Just Another Perl Hacker" signoffs in comp.lang.perl. Randal honed his many crafts through seven years of employment at Tectronix, ServioLogic, and Sequent. Since 1985, he has owned and operated Stonehenge Consulting Services in his home town of Portland, Oregon.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>