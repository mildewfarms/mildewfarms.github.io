<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i03: UNIX Accounting Magic</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1999/mar99.tar"><b class=codeListing>mar99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>UNIX Accounting Magic</H1><p>
<P>Victor Hazlewood
<P>
Contrary to popular belief, UNIX accounting is not a black art that can be understood by only a few UNIX sorcerers who have studied in great temples atop faraway mountains. The magic of UNIX accounting is contained in a set of C programs and shell scripts that can be used to build a system for resource usage reporting and for additional security logging. Although repairing a damaged accounting system can be tedious, getting started and configuring UNIX accounting is straightforward even if you are only a sorcerer's apprentice.<p>
The importance of UNIX accounting involves more than just the traditional ability to report on resource consumption. In today's complex computing environments, resource usage reporting is important, but UNIX accounting can provide additional security logging capabilities that are invaluable as audit trails. These audit trails can be used to obtain additional clues for investigation of suspected security intrusions - clues that can be lost if accounting is not properly enabled or configured.<p>
This article describes how to enable UNIX accounting magic in a few easy steps. It describes the flow of data in the accounting system, provides a set of the most useful accounting system reincarnations, and describes how to use the accounting system for billing and security auditing. The focus will be on the daily periodic accounting process, although a monthly periodic accounting process is included with UNIX accounting. Each of the topics will be described based on the accounting system available with Solaris 2.6. Though the specifics are for Solaris, many of the spells, chants, and magic techniques are available on most UNIX System V-based systems.<p>
<B>Quick Start</b><p>The UNIX accounting system is made up of scripts and utility programs, each of which performs a specific function in creating, processing, or reporting accounting data. These spells are located in <B>/usr/lib/acct</B>. When maintaining the accounting system, the <B>/usr/lib/acct</B> directory should be placed in your path. Additionally, adding yourself to the <B>adm</B> group will provide access to accounting directories and data files without the need to access these by using <B>superuser</B> or <B>adm</B> user privileges (<B>su - root</B> or <B>su - adm</B>).<p>
On a new system or a system with accounting disabled, there are three easy steps to starting the accounting system. The three steps to perform are:<p>
<ol>
<li>Start process accounting with <B>turnacct on</B>.
<li>Place <B>ckpacct</B> in <B>adm</B>'s cron entry:
<p>
<pre>
0 * * * *       /usr/lib/acct/ckpacct<p>
</pre>
<li>Place <B>runacct</B> in <B>adm</B>'s cron entry:<p>

<p>
<pre>
50 23 * * *     /usr/lib/acct/runacct &gt; /var/adm/acct/nite/fd2log 2&gt;&amp;1
</pre>
</ol>
<p>
It is recommended to perform the above as user <B>adm</B>. Performing them as root will work, but file permissions may not be set properly, requiring <B>superuser</B> privileges for access to accounting files and directories. The accounting system is designed to give the proper privileges to <B>adm</B> to perform the accounting functions, including enabling or disabling process accounting in the kernel and setup of proper permissions for accounting files including those created by the <B>runacct</B> script.<p>
To determine whether <B>turnacct</B> was successful, check for the existence of the <B>/var/adm/pacct</B> file. As processes are created and complete, the kernel will write a process accounting record to <B>/var/adm/pacct</B>. As you issue commands, you should see <B>/var/adm/pacct</B> grow in size. More details about the <B>pacct</B> file, the <B>ckpacct</B>, and <B>runacct</B> scripts are discussed in subsequent paragraphs.<p>
If you plan to run UNIX accounting on a large system or are required to keep several months of accounting data online, you may want to consider creating a separate file system for storage of accounting files. <B>/var/adm/acct</B> is the top-level directory, which contains accounting data files and reports except for <B>/var/adm/wtmp</B>, <B>/var/adm/wtmpx</B> (these are sometimes found in <B>/etc</B>), and the current process accounting data files located in the <B>/var/adm/pacct*</B> files. Creating a separate file system for <B>/var/adm/acct</B> is recommended if you enable UNIX accounting.<p>
<B>Accounting Data Flow</b><p>Figure 1 provides an overview of the flow of data in the accounting subsystem available with Solaris. Accounting data starts out as process data contained in the UNIX kernel data structures. If accounting is turned on, then upon termination of each process, the kernel writes a process accounting (<B>pacct</B>) record, which is appended to <B>/var/adm/pacct</B>. The <B>pacct</B> file format is described by the <B>acct</B> structure contained in <B>/usr/include/sys/acct.h</B>. <B>pacct</B> files can be processed outside of the daily periodic accounting run with the <B>acctcom</B> command.<p>
<B>wtmp</B> and <B>wtmpx</B> are valuable files used by the accounting subsystem process. <B>wtmp</B> and <B>wtmpx</B> keep track of information about interactive logins, their <B>tty</B>'s and originating hosts. The <B>wtmp</B> format is described by the <B>utmp</B> structure contained in <B>/usr/include/utmp.h</B>. The <B>wtmpx</B> format is described by the <B>utmpx</B> structure contained in <B>/usr/include/utmpx.h</B>. The information contained in the <B>wtmpx</B> file can be processed outside of the daily periodic accounting run with the <B>last</B> command.<p>
The <B>ckpacct</B> script should be executed by <B>adm</B>'s cron. It checks both the size of the <B>/var/adm/pacct</B> file and the availability of space in the file system that contains <B>/var/adm/pacct</B>. If the <B>pacct</B> file is over the size threshold contained in the script, then it is rolled over to <B>/var/adm/pacctN</B> (where N is the next unused number is sequence for the <B>pacct</B> file set starting with 1). If the file system has less space than defined in the script, <B>ckpacct</B> will turn off the accounting system by executing <B>turnacct off</B>. It is recommended to run <B>ckpacct</B> by adm's cron once an hour.<p>
The daily periodic accounting run is accomplished by executing the <B>runacct</B> script. This script should be run daily by <B>adm</B>'s cron. (An example of the crontab entry for <B>runacct</B> was provided above.) <B>runacct</B> processes and generates reports of the data contained in the <B>pacct</B> and <B>wtmp</B> files. <B>runacct</B> is a Bourne shell script made up of 11 restartable states. The states are: <B>SETUP WTMPFIX CONNECT PROCESS MERGE FEES DISK MERGETACCT CMS USEREXIT</B> and <B>CLEANUP</B>.<p>
As <B>runacct</B> executes, it logs its progress by writing descriptive messages to <B>/var/adm/acct/nite/active</B>. <B>/usr/adm/acct/nite/statefile</B> and <B>/usr/adm/acct/nite/lastdate</B> contain the last known state and date, respectively, of the <B>runacct</B> script. To prevent execution of <B>runacct</B> for the same accounting period, lock files are used. The lock files are <B>/var/adm/acct/nite/lock</B> and <B>/var/adm/acct/nite/lock1</B>.<p>
If an error is encountered during execution, a message is logged on the console, mail is sent to the administrators (root and adm), and <B>runacct</B> exits. If a state aborts due to an error, review both <B>statefile</B> and <B>active</B> to determine the location and cause of the error. The error can be investigated and repaired with accounting utility programs such as <B>fwtmp</B> and <B>wtmpfix</B>. Accounting can then be restarted at the state where the error was encountered, thereby reducing the overhead. To be started, <B>runacct</B> must be invoked with an argument (e.g., <B>runacct 1117</B>). The argument should correspond to the date when the error was encountered. This date should also be described in the <B>lastdate</B> file. The state described by <B>statefile</B> will be the state at which <B>runacct</B> will restart execution. This can be overidden by adding the state to the argument list (e.g., <B>runacct 1117 USEREXIT</B>). Upon successful completion, <B>runacct</B> will write COMPLETE into the <B>statefile</B>.<p>
Upon the completion of a successful execution of <B>runacct</B>, several reports and binary data files are created and several raw data files are removed. A brief description of the action performed in each <B>runacct</B> state follows. Table 1 provides this information in tabular format. The CONNECT state creates <B>lineuse</B>, <B>reboots</B>, and <B>ctacct</B> files from the <B>wtmp</B> file. The <B>lineuse</B> and <B>reboots</B> files provide the history of login connections and system reboots, respectively. The <B>ctacct</B> file contains this login and reboot information in total accounting (<B>tacct</B>) format. The PROCESS state creates the <B>ptacct</B> total accounting file from the process accounting data (<B>pacct*</B> files). The total accounting file generated in this state is a summary by user of <B>pacct</B> data. The MERGE state combines the <B>ptacct</B> and <B>ctacct</B> files to create the <B>daytacct</B> total accounting file. This contains all of the accounting data available in summarized form. (Files in <B>tacct</B> format can be processed by the <B>acctmerg</B> command.)<p>
If the system administrator has configured fee and disk accounting, then these files will be processed into the <B>daytacct</B> total accounting file by the FEE and DISK states. The MERGETACCT state processes the current days total accounting data into another <B>tacct</B> file called <B>/var/adm/acct/sum/tacct.MMDD</B> (where MMDD is the month and day of the accounting run). This <B>tacct</B> file is a running total of all daily <B>tacct</B> files used by the monthly accounting script <B>monacct</B>. The CMS state uses the <B>acctcms</B> command to summarize the process accounting data by command into <B>cms</B> files. One file is this data in binary format, and the other is in ascii format. The CMS state also creates the last login report by using the <B>lastlogin</B> command. The USEREXIT state will run the <B>/usr/lib/acct/runacct.local</B> script (if it exists and has a size greater than zero). An example USEREXIT script is given in Listing 1. The CLEANUP state generates the final report using the <B>prdaily</B> report, removes all unnecessary data files, removes the lock files, reports the completion of the accounting run, and terminates.<p>
<B>Useful runacct Modifications<p>
runacct</B> generates several default reports, summarizes accounting data into a few binary data files, and removes several raw data input files. Each of these processes should be reviewed for usefulness by the system administrator. If a component of <B>runacct</B> is determined not to be useful to a site, it should be removed or commented out. If modifications are made to accounting scripts, a copy of the original script should be retained for comparison and debugging purposes. Modifications can easily be maintained by a source code management system, such as rcs.<p>
<B>Preserve Raw Data</b><p>The most important and useful modification to <B>runacct</B> is the preservation of the raw <B>pacct</B> and <B>wtmpx</B> data files. These files provide the audit trail for both billing and security. It is standard procedure for <B>runacct</B> to remove all <B>pacct</B> files by the completion of the script. These files, if preserved from deletion and archived, can provide supporting documentation for billing inquiries and can provide clues for suspected security intrusions. I recommend archiving the raw input <B>pacct*</B> and <B>wtmpx</B> files for security and accounting system auditing purposes. The user exit capability (see the USEREXIT state) in the <B>runacct</B> script can be used to accomplish this archiving task. A sample user exit script, called <B>runacct.local</B>, is provided in Listing 1.<p>
<B>Mail Recipient Configuration</b><p>Modification of the mail recipient list from the <B>runacct</B> script can easily be done by creating an environment variable called <B>_maillist</B> and calling <B>mailx ${_maillist}</B> instead of the default <B>mailx root adm</B>. Add the following line in the environment variable section:<p>
<pre>
_maillist="root adm"

</pre>
<p>
Replace all instances of:<p>
<pre>
mailx root adm
</pre>
<p>
with<p>
<pre>
mailx ${_maillist}
</pre>
<p>
Of course, now change the mail recipient list to those users you want notified of an error in <B>runacct</B>.<p>
<B>USEREXIT Environment</b><p>Additionally, the USEREXIT state has two deficiencies. First, the environment of the <B>runacct</B> script is not passed when the <B>/usr/lib/acct/runacct.local</B> script is called. Second, the exit status of the <B>runacct.local</B> script is not checked. The following <B>runacct</B> changes are recommended. Change:<p>
<pre>
USEREXIT)
#      "any installation dependant accounting programs should be run here"
[ -s /usr/lib/acct/runacct.local ] &amp;&amp; /usr/lib/acct/runacct.local
 
echo "CLEANUP" &gt; ${_statefile}
;;

<b>to</b>

USEREXIT)
#      "any installation dependant accounting programs should be run here"
if [ -s /usr/lib/acct/runacct.local ]
then
   . /usr/lib/acct/runacct.local
   if [ ${?} -ne 0 ]
   then
        _errmsg="\n\n***** Accounting error with runacct.local \<br>          *******\n\n\n"
        (date ; echo "$_errmsg" ) | logger -p daemon.err
        echo "$_errmsg" | mailx adm root
        echo "ERROR: problem with runacct.local, run aborted" &gt;&gt; \<br>          ${_active}
        rm -f ${_nite}/lock*
        exit 1
   fi
fi
</pre>
<P>
Listing 1 is an example <B>runacct.local</B> script to preserve the <B>pacct*</B> and <B>wtmpx</B> files in <B>/var/adm/acct/sum/YYYYMMDD</B>. YYYYMMDD represents the four-digit year, month, and day of the accounting run. This new subdirectory is created by the script and will help in the organization and management of these files.<p>
<B>Project Accounting</b><p>If access to accounting source code can be obtained, another useful modification to the accounting system would be to retain the group id (gid) component of the <B>pacct</B> data when it is summarized and converted to <B>tacct</B> data. In the PROCESS state, the <B>acctprc</B> command summarizes process accounting (<B>pacct</B>) data into total accounting (<B>tacct</B>) data. In this process, the group id is stripped out of the data leading to a loss of information in the <B>tacct</B> file. A modification of <B>acctdef.h</B>, <B>acctprc.c</B>, and <B>acctmerg.c</B> to retain the gid in the <B>tacct</B> structure and the corresponding summarizing of data by user and by group would provide project accounting capabilities in UNIX accounting. (The author is working with several vendors to adopt this project accounting modification.)<p>
<B>Billing and Security Auditing Capabilities</b><p>When UNIX accounting is enabled, additional auditing capabilites are available if the <B>pacct*</B> and <B>wtmpx</B> files are retained from deletion from the standard accounting process. If you preserved the <B>pacct</B> files and a user complains about a specific charge he may have incurred by running on your system, a more detailed report about the resource usage consumption can be generated with the <B>acctcom</B> command. This same information can be used when gathering clues regarding a suspected security intrusion. Output 1 is a sample accounting report generated by <B>acctcom</B> from preserved Solaris <B>pacct</B> data.<p>
<B>Output 1 </B>-<B> Sample acctcom Output<p>
<pre>
solaris% /usr/lib/acct/acctcom -u victor -f
/usr/adm/acct/sum/19981119/Spacct1.1030
 
ACCOUNTING RECORDS FROM:  Thu Nov 19 23:50:00 1998
COMMAND                         START    END          REAL     CPU    MEAN
NAME       USER     TTYNAME     TIME     TIME       (SECS)  (SECS) SIZE(K)
pwd        victor    pts/2      08:47:41 08:47:41     0.03    0.02 1640.00
ls         victor    pts/2      08:47:42 08:47:42     0.03    0.03 1104.00
last       victor    pts/2      08:47:49 08:47:49     0.02    0.02 1380.00
cpp        victor    pts/2      18:49:48 18:49:48     0.01    0.01 1104.00
cc         victor    pts/2      18:49:48 18:49:48     0.19    0.02 1208.00
cc         victor    pts/2      18:49:47 18:49:47    10.35    7.03  858.67
a.out      victor    pts/2      18:53:17 18:53:19   500.63  460.02 1076.00
cat        victor    pts/2      18:12:50 18:12:50     0.03    0.02 1028.00
vi         victor    pts/2      18:13:04 18:13:21    17.96    0.05 1321.60
ls         victor    pts/2      18:13:25 18:13:25     0.03    0.03  928.00
vi         victor    pts/2      18:25:15 18:25:30    15.21    0.08 1234.00
grep       victor    pts/2      18:25:35 18:25:35     0.02    0.02 1580.00
grep       victor    pts/2      18:31:25 18:31:25     0.02    0.02 1448.00
acctcom    victor    pts/2      18:49:27 18:49:29     2.20    2.17 1119.85
</pre>
<p>
If the <B>wtmpx</B> file is preserved, you can use this information to provide additional clues as to how long a suspected intruder has been lurking about your system. If a security intrusion is detected on a specific user's account (e.g., victor), and the host where the suspected intruder comes from remains constant (e.g., <B>unknown.fake.edu</B>), you can use the last command and the preserved <B>wtmpx</B> files to determine how long the suspected intrusion has been occuring. Output 2 is a sample session that uses the preserved daily <B>wtmpx</B> records to generate a report of all the login activity for user victor.<p>
<B>Output 2 </B>-<B> Using wtmpx Files Sample Session<p>
<pre>
solaris% cd /usr/adm/acct/sum
solaris% /bin/sh
solaris$ for file in 1998110?/wtmpx*
&gt; do
&gt; echo $file
&gt; last -f $file | grep victor
&gt; done
19981101/wtmpx.1101
victor    pts/1        unknown.fake.edu Sun Nov  1 14:30 - 14:41  (00:11)
19981102/wtmpx.1102
victor    pts/2        victor-2.remote. Mon Nov  2 01:00 - 01:11  (00:11)
19981103/wtmpx.1103
victor    pts/3        unknown.fake.edu Tue Nov  3 08:49 - 12:42  (03:53)
19981104/wtmpx.1104
victor    pts/2        victor-2.remote. Wed Nov  4 08:30 - 15:02  (06:31)
19981105/wtmpx.1105
victor    pts/2        unknown.fake.edu Thu Nov  5 08:23 - 15:02  (06:38)
19981106/wtmpx.1106
victor    pts/1        victor-2.remote. Fri Nov  6 10:16 - 14:54  (04:38)
19981107/wtmpx.1107
victor    pts/2        victor-2.remote. Sat Nov  7 14:29 - 17:44  (03:15)
19981108/wtmpx.1108
victor    pts/4        unknown.fake.edu Sun Nov  8 10:36 - 11:55  (01:19)
19981109/wtmpx.1109
victor    pts/2        victor-2.remote. Mon Nov  9 08:41 - 16:19  (07:37)
</pre>
<p>
<b>Conclusions</b><p>UNIX accounting, when enabled, can provide useful information about who is using your system and overall resource consumption in basic terms. By implementing the suggested modifications, you can magically transform the accounting system into a more useful billing and security auditing subsystem. Use of the user exit provided in the <B>runacct</B> script is quite possibly the most useful modification to the accounting system. The user exit script, <B>runacct.local</B>, should be created and should contain all necessary local file archives and manipulations. By using the information provided by the UNIX accounting system with the recommended modifications, you can generate useful reports on system utilization and provide additional audit trails for billing and security inquiries. 


<p>
<h1>About the Author</h1><p>
Victor Hazlewood is a UNIX administrator and manager of the HPC Systems group at the San Diego Supercomputer Center. Victor has worked with UNIX accounting for more than 10 years on a variety of platforms for resource reporting and auditing purposes. He plans to work closely with UNIX vendors and standards organizations to improve the capabilities and robustness of UNIX accounting.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>