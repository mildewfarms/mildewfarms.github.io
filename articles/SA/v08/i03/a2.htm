<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i03: Proactive Spam Prevention</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1999/mar99.tar"><b class=codeListing>mar99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Proactive Spam Prevention</H1><p>
<P>Michael Schwager
<P>
Last month, I discussed the basics of blocking mail from spammers. With the <B>check_mail</B> and <B>check_rcpt rulesets</B>, we can block mail that breaks some of the rules (i.e., mail from a domain not given in the DNS) or that attempts to relay. The <B>check_relay</B> ruleset uses the Realtime Blackhole List to block known spammers. If spammers try to look legitimate and create a proper RFC-822 envelope and header, we can still block them based on their return address by using the access database. This month, I conclude my three-part series on blocking spam email with a discussion of more proactive approaches. I'll begin with a more in-depth discussion of the Realtime Blackhole List (RBL).<p>
<B>How the RBL Works</b><p>Offending machines or domains are added to the RBL by people who have been spammed. This step is not to be taken lightly, since mail from an entire domain may end up being blocked by thousands of hosts. Basically, when a spam recipient (which could be you) receives spam, they need to contact the ISP or host of the spammer to get it stopped. If a host refuses or is unable to contain the spammer, they can be added to the list via an email message to the maintainers of the RBL. See <B>http://maps.vix.com/rbl/reporting.html</B> for more information.<p>
Some people might say that this is vigilantism or big-brotherism, however, subscription to the RBL is entirely voluntary. If you want to use it, you may. If you do not, don't. It's as simple as that. Nothing can be more empowering to an individual or a corporation than to be able to say, "I choose not to receive mail from known spammers. I trust the RBL to list those spammers for me." There is no coercion, no violation of rights.<p>
Many ISPs, once they find that they are on the RBL, waste little time in working to get themselves off it. However, you may find a site that is reluctant to do so; I have known ISPs to remain on the RBL for weeks. If people within your domain cannot wait that long, there are ways to fix the situation. Simply add the domain to the access database, like this:<p>
<pre>
clumsy.isp.com        OK
</pre>
Mail from that domain will now be allowed into your domain.<p>
How do you know if the RBL, or any of the rules, are working? I like lots of logging turned on. The default is 9, and should be adequate for most purposes. Check your <B>/etc/syslog.conf</B> file and direct your <B>mail.info</B> logging to a file of your choice, like this:<p>
<pre>
mail.info             /expand/log/maillog
</pre>
<p>
Don't forget to touch that <B>maillog</B> file, and kill <B>-HUP syslogd</B> so that it sees your changes. Now, when spam comes in, you will see messages like this:<p>
<pre>
Sep 29 01:04:30 antispam.com sendmail[24509]: Ruleset check_mail
(&lt;scvzzxxv@yahoo.com&gt;) rejection: 553 &lt;scvzzxxv@yahoo.com&gt;...  Mail from
195.76.98.3 refused, see http://maps.vix.com/rbl/
</pre>
<p>
Hmm, is that really a spammer? Let's look:<p>
<pre>
telnet 195.76.98.3 25
</pre>
<p>
We see:<p>
<pre>
Connected to 195.76.98.3.
Escape character is '^]'.
220 futurnet.es Sendmail SMI-8.6/SMI-SVR4 ready at Wed, 30 Sep 1998 02:47:52
-0100
</pre>
<p>
Sure enough, the From: address was <B>scvzzxxv@yahoo.com</B> but the machine is really at <B>futurnet.es</B> - surely a spammer. The host is running Sun's Sendmail, which does not have the anti-spam functionality of Sendmail 8. Likely they were being used as a relay, and were perhaps either slow to upgrade or ignored pleas to do so. Update: As of 12/7/98, their welcome banner looks like this:<p>
<pre>
220 futurnet.es ESMTP Sendmail 8.8.8+Sun ready at Mon, Dec 7 1998 21:42:36
-0100
</pre>
<p>
They seem to have been inspired to upgrade :-).<p>
<B>Regular Expressions</b><p>We can match mail addresses against regular expressions. For example, often spammers use a From: address with all numbers in the username. Although risky (some paging-by-mail systems use a format like that), you may want to apply this rule. You can add the rule to the <B>check_mail</B> ruleset, by changing the <B>Local_check_mail</B> ruleset in the <B>antispam.mc</B> file. It is set up like a database lookup. After the:<p>
<pre>
LOCAL_CONFIG
# Change "hostname" to a real hostname in the following.
# localhost is used verbatim.
Cwantispam hostname.antispam.com antispam.com localhost antispam.UUCP
antispam.com.UUCP
</pre>
<p>Add the following line:<p>
<pre>
Kallnumbers regex -a@MATCH ^[0-9]+$
</pre>
<p>
Then change:<p>
<pre>
SLocal_check_mail
# Local_check_mail input:  the address following the colon in the MAIL
command
#
     
R$*                     $@ OK
</pre>
<p>
To look like this:<p>
<pre>
SLocal_check_mail
# Local_check_mail input:  the address following the colon in the MAIL
command
# check address against various regex checks
R$*                             $: $&gt;Parse0 $&gt;3 $1
R$+ &lt; @ $+ &gt; $*                 $: $(allnumbers $1 $: $1&lt;@$2&gt; $)
R@MATCH                         $#error $: 553 Header Error
</pre>
<p>
Mail Headers</b><p>We have seen what can be done in the mail envelope, now what about the headers (the addresses people see in their mail programs)? Spammers often will use legitimate-looking addresses in the envelope, but the headers will have such things as "Friend@public.com". It may be easier for you as a Systems Administrator to block mail based on header addresses. Beginning with revision 9, Sendmail 8 has the capability to reject mail based on the contents of the mail headers. See <B>antispam.mc.PROACTIVE</B> in the schwager code package on <B>www.samag.com</B> from last month. The headers are tokenized and processed just as an envelope address would be.<p>
We take a clue from the <B>Basic_check_mail</B> and <B>Basic_check_rcpt</B> rulesets and block mail based on the contents of the From: and To: headers. We also include the regular expression lookups for addresses with all numbers, as described above in <B>Local_check_mail</B>. I create a rule called <B>LookupHeaderUser</B> and have both the <B>CheckFrom</B> and <B>CheckTo</B> rules call it. All the logic for looking up the header mail addresses is located there. Make your <B>CheckFrom</B> ruleset look like:<p>
<pre>
SCheckFrom
R$*                             $&gt;LookupHeaderUser $1
</pre>
,p>
The <B>CheckTo</B> rule will look like this:<p>
<pre>
SCheckTo
R$+ , $+                $@ $&gt;LookupHeaderUser $1
R$*                     $@ $&gt;LookupHeaderUser $1
</pre>
<p>
I set this up so that it only looks at the first address in a To: line with multiple addresses. Working on multiple addresses is left as an exercise for the reader. Be careful though, because on a busy gateway, long mail headers may make your Sendmail daemon very busy.<p>
Notice that <B>LookupHeaderUser</B> defines the user part of the mail address as "user@" to the access database. I like that because it's unambiguous in the access database. You can easily change the rule; in the <B>mc</B> file when you see "access $2@" or "access $1@" just remove the "@".<p>
You can <B>telnet</B> in as we did earlier to check whether this works, although this time you will need to actually enter a mail message after the RCPT To: part of the SMTP conversation. For example, using a Sendmail config created with the <B>antispam.mc.03</B> file, you could type:<p>
<pre>
data
From:  address@domain
To: 123456789@antispam.com<
  
testing
.
</pre>
Sendmail will reply with:<p>
<pre>
553 header error
</pre>
<p>
The one disadvantage of this is that Sendmail will receive the entire message before rejecting it.<p>
What if all these measures fail, and you want to be even more proactive? Checking the subject line and the Message-ID headers will give you more control. Since spammers often create messages with invalid Message-IDs, you can include the following rules in the <B>CheckMessageID</B> ruleset:<p>
<pre>
SCheckMessageId
R&lt; $+ @ $+ &gt;            $@ OK
R$*                     $#error $: 553 Header Error
</pre>
<p>
To check the subject line, you might do something like this:<p>
<pre>
SCheckSubject
R$* make money fast $*  $#error $@ 5.7.1 $: "553 Header Error"
R$* hot girls $*        $#error $@ 5.7.1 $: "553 Header Error"
</pre>
<p>The left-hand side (LHS) in the <B>CheckSubject</B> rule is essentially a case-insensitive substring search, not a regular expression. Go ahead and change the rules in the <B>antispam.mc</B> file; when you run <B>build</B>, your changes will be included. As before, you can check the effect of these changes by <B>telnet</B>ing to port 25 on your mail server and attempting to send mail in violation of these rules.<p>
Unfortunately, every time we want to update our subject lines we would be editing the <B>sendmail.cf</B> file. You may want to keep such "data" out of the "code" of your config file. Here's how to do that.<p>
Define a file class, such as:<p>
<pre>
FS/usr/local/sendmail-r8.9/databases/reject-subjects, and change the
CheckSubject rule to look like this:
     
R$* $=S $*        $#error $@ 5.7.1 $: "553 Header Error"
</pre>
<p>
Now, put your strings in the <B>reject-subjects</B> file. The FS line would be placed in the <B>antispam.mc</B> file in the <B>LOCAL_CONFIG</B> section.<p>
<B>Where to Go from Here</b><p>Congratulations, with implementation of the measures I've described, you are well an your way to preventing at least some of the spam mail from reaching your users. At least, many of the more obvious violators will be stopped. In the future, spammers will get more sophisticated and you may find much of what's been discussed to be nearly useless. Is there more you can do?<p>
In terms of filtering mail, the <B>procmail</B> utility is also quite useful. It allows for all sorts of scanning capabilities based on the contents of both the headers and the body of the mail message. This can be set up on an individual basis (as I've done at my ISP), or <B>procmail</B> can be called from Sendmail. Set it as the default mailer for local mail on your hosts, and protect all of your users on a POP3/IMAP4 server that's running Sendmail. Instructions for including <B>procmail</B> support in Sendmail are in the <B>cf/README</B> file in the Sendmail hierarchy.<p>
If you want to filter before getting to the mail delivery part - in other words, you want to reject the mail but still be able to check body content, you can use the <B>checkcompat()</B> routine and write some C code to rummage through the message, or have it exec a Perl script to do so. One of the arguments to <B>checkcompat()</B> is the message envelope; in there, you will find the name of the file that contains the body of the message.<p>
The <B>check_compat</B> ruleset is given both the recipient and sender mail address as input. You may find a use for it, beyond the <B>check_rcpt</B> and <B>check_mail</B> rulesets.<p>
Another proactive measure that cannot be overlooked is foregoing all of this trouble and purchasing an anti-spam service. There are currently two that I know of, by BSDI, Inc. and Bright Light Technologies. They both work by extending the capabilities of Sendmail through hooks into Sendmail and an associated database. A team of dedicated "spambusters" scour the Internet looking for spam. When found, your database is updated on the fly so that as little spam as possible enters your domain. See below for contact information. As of this writing the BSDI solution has been withdrawn from the market, but expect to see it again in the first quarter of 1999.<p>
<B>Conclusion</b><p>Armed with Sendmail 8.9, and the <B>check_*</B> rulesets, you now have an inexpensive tool for cutting down on spam coming into your domain(s). I encourage you to join the fight! May the good guys win (for you spammers who may be reading, that would be us hard-working sys admins)!<p>
<B>Further Resources<p>
Reading</b><p><I>Sendmail</I>, 2nd Edition, by Eric Allman and Bryan Costales. O'Reilly and Associates. ISBN 1-56592-222-0. It's the Bible for Sendmail, written by the man himself, Eric Allman. If you are configuring Sendmail and you don't have this book, you are a far braver human than I. This is also known as "The Bat Book".<p>
Usenet newsgroups: <B>comp.mail.sendmail</B> and <br><B>news.admin.net-abuse.email</B><p>
<B>Web Sites</B><p>
<b>www.spam.com/ci.htm</B> - The definitive SPAM&reg; site. (SPAM&reg; is a registered trademark of Hormel Foods.)
<p><B>www.sendmail.org</B> - Resources for the freeware version of Sendmail.
<p><B>www.sendmail.com</B> - Eric Allman's company, if you want to call in the professionals.
<p><B>members.aol.com/emailfaq/emailfaq.html</B> - The email abuse FAQ.
<p><B>maps.vix.com/rbl/</B> - Paul Vixie's MAPS RBL site.
<p><B>www.brightlight.com</B> - See the "Spam Calculator" to give some indication of the cost of spam.
<p><B>www.BSDI.COM/products/BMF/</B> - The MailFilter product.
<p><B>www.bsdi.com/white-papers/war-on-spam</B> - Rob Kolstad's white paper on the war on spam.
<p><B>www.informatik.uni-kiel.de/~ca/email/english.html</B> - A very good site for technical information concerning Sendmail version 8.8 and above. Claus Assmann wrote a very complete set of mail  header check rulesets; see also:<br><B>www.informatik.uni-kiel.de/~ca/email/chk-89.html#HEADER</B>
<p><B>www.ora.com/catalog/sendmail2/</B> - A description of The Bat Book, the Sendmail book, the Book I  live (and die) by. It's big; it's thorough; it's essential.
<p><B>www.cauce.org</B> - The Coalition Against Unsolicited Commercial Email. Write your  congressperson, and ask them to put an end to all this. Join the  CAUCE and join The Good Fight. A good resource for keeping tabs on  where we are on the political front.
<p><B>http://www.porcupine.org/postfix/</B> - Weitse Venema's Postfix project. This looks like a very well-written program. At this point, I think Sendmail is very useful but also very system-hungry; perhaps this will prove a viable alternative.
<p><B>Commercial Products</B></b><p>Bright Mail, by Bright Light Technologies (<B>www.brightlight.com</B>). Uses an API and software in concert with the Sendmail discussed here. Allows you to use your own hardware. Database is updated on the fly, 7x24.<p>
MailFilter, by BSDI (<B>www.bsdi.com</B>). Composed of both a PC running the BSDI OS and mail filtering software, a "plug-and-play" solution. Database is updated on the fly, 7x24. 
<p>
<h1>About the Author</h1><p>
Mike Schwager is a contractor specializing in UNIX and the Internet. He has spent the past 15 years writing C and Perl code, shell scripts, and maintaining systems in the corporate and educational environments. Email him at Michael@Schwager.com or visit http://come.to/lanicservices.




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
