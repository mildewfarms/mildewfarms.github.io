<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i03: Using Expect to Configure Cisco Routers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a3_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/1999/mar99.tar"><b class=codeListing>mar99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Using Expect to Configure Cisco Routers</H1><p>
<P>Clay Lin
<P>
Changing the configuration on one Cisco router is a breeze - you <B>telnet</B> to the router, enter the configuration line by line, then you are done. But what about manually changing the configurations on 200 routers? Not only is it time consuming, it is also easy to make mistakes during this manual process.<p>
Where I work, the network consists of more than 200 Cisco routers interconnected by frame relay and ISDN wide area network all over the U.S. continent. We used to change all the router configurations by hand, and the entire task would take about a month for two people to finish, not including the time to verify accuracy. As a smart (or lazy?) administrator, I wanted to find a way to automate this task.<p>
<B>Tools from Cisco</b><p>I first looked for the commercial-off-the-shelf (COTS) solutions to help us. Two applications, ConfigMaker and CiscoWorks, from Cisco are capable of dealing with configuration issues. The ConfigMaker is a little program with a nice graphical user interface (GUI) running on the Win95/NT platform. It is easy to use, and it is free.<p>
This solution does not fit our requirements in that:<p>
<ol>
<li>It does not work for Cisco 7000 series routers.<p>
<li>It is primarily used to configure routers from scratch.<p>
<li>It is best used for small to mid-sized (about 20-30 routers) networks, according to Cisco's recommendation.<p>
<li>It does not work with TACACS+, which is the authentication/authorization mechanism we use for Cisco routers.<p>
</ol><p>
CiscoWorks is a full-blown management tool for routers with a lot of nice features and is recommended if you have a large number of Cisco routers. However, it only provides configuration management for routers, not switches or dial-up servers. Although CiscoWorks for Switched Internetworks could do the job, but we needed something simpler.<p>
<B>Expect to the Rescue</b><p>While I was searching the Usenet newsgroups for alternate COTS tools that I might be able to modify for our needs, Expect came to my attention. Expect, a scripting language based on Tcl, was created by Don Libes to make the automation of interactive programs such as <B>telnet</B> or <B>ftp</B> easier. <B>telnet</B>, of course, is the program we use to access the routers and enter the configurations.<p>
At first I was not thrilled with the idea of learning another programming language. But, as a quick example, let's say you don't care about error recovery and just want something quick and dirty to do this job, a mere 10 lines of Expect code will be sufficient (see Listing 1).<p>
As shown in the listing, by replacing the parentheses and their contents with site-specific information, you have a handy tool to configure one Cisco router for you. Although a program without any error recovery mechanisms is not recommended, Listing 1 demonstrates how easy it is to create powerful tools with Expect.<p>
I purchased <I>Exploring Expect</I> by Don Libes from O'Reilly and Associates, and after studying it for a few hours, I was able to come up with a useful program to configure more than 200 routers all at once. What used to take us a month now takes about an hour to finish completely and accurately.<p>
<B>configrouter </B>-<B> An Expect Script to Configure Cisco Routers</b><p>The following assumptions were made when I wrote the script <B>configrouter</B> (see Listing 2):<p>
<ol>
<li>The script only works for those configurations that have "global" characteristics, which means the same configuration can be applied repeatedly to all the routers. Configurations such as implementing TACACS+, SNMP, Network Time Protocol (NTP), and changing enable password on all routers fall into this category. For configuration that has local significance to each router, you need to either create a more complicated Expect script or use some other tool.<p>
<li>The script will access two files for data. The first file is a list of all the routers' DNS names, one line for each. The second one is the configuration that you would like to apply.<p>
<li>A naming convention is needed for all the routers. Although Expect can recognize any response from the router and respond properly, the router should have a pattern within its prompt for the Expect script to look for. <B>configrouter</B> looks for location ID and company name, such as LAX001-ZEROONE, within a router's prompt.<p>
<li>Our network uses TACACS+ to control the access to the routers, so valid TACACS+ username and password are needed as command-line arguments. If the TACACS+ server is not available when accessing the routers, according to our router configuration, the routers will prompt for enable password to get into router configuration mode. This password will also be passed to <B>configrouter</B>.<p>
<li><B>configrouter</B> is run under Redhat Linux 4.2 but should work without any modification under all UNIX environments.<p>
</ol><p>
As an example, let's assume we would like to synchronize the clocks on all the routers with a network time server. <B>configrouter</B> will take your TACACS+ username and password along with the enable password as command-line arguments to login to all the routers (see Listing 3). It will enter the configuration and apply the configuration (see Listing 4) line by line (for convenience, we'll set the time zone on all the routers to EST).<p>
<B>configrouter</B> will first check to see whether the correct number of arguments has been passed to it, then read the router's DNS name from the file <B>/tmp/routerlist</B>, one name at a time. The script can tell whether access to the router is controlled by TACACS+ service and login accordingly by using proper username and password passed to it. It will then apply the configuration line by line from the file <B>/tmp/ntp</B>. When the configuration is entered successfully, it will save the changed configuration to NVRAM and the target TFTP server. Although this script is simple and fairly self-explanatory, a few items need to be noted here:<p>
<ol>
<li>The built-in command expect can be instructed to parse the response from the router by using regular expression given the syntax as: <B>expect -re</B>.<p>
<li>It is advisable to factor in the WAN delay then adjust the timeout value accordingly to avoid unexpected results.<p>
<li>If you need to configure a large number of routers at one time, it is wise to follow the <B>close</B> command with a <B>wait</B> command for each spawned process. Otherwise you may end up with a lot of zombie processes, run out of the <B>tty</B> numbers on your system, and cause the script to exit abruptly.<p>
</ol>
<p>
<B>Issues Raised by Running configrouter</b><p>It is very important to test the script thoroughly before using it in a production environment. As <B>configrouter</B> conducts massive configuration changes on all the routers, I am not responsible nor will be liable for any damages or any consequences of running the scripts in this article.<p>
Although <B>configrouter</B> does not require root privilege to run, it does reveal the router's password on the command line, which, of course, is a security threat. Anyone could use the UNIX <B>ps</B> command to retrieve the password. This problem can be solved by having <B>configrouter</B> take passwords interactively, or by saving the sensitive information in a file encrypted by the UNIX <B>crypt</B> command and decrypting it on the fly.<p>
<B>Other Uses of Expect</b><p>I am writing a Perl script to wrap <B>configrouter</B> with a Web interface. This Web interface will present an HTML form to the users. Legitimate users can submit username, password, a list of routers, and desired configurations to the script through a Web browser and have the result displayed on the browser.<p>
With minor modifications of <B>configrouter</B>, you can manage not only Cisco routers but also Cisco switches and other equipment that accept <B>telnet</B> login. Although this is a preliminary thought, it appears that by combining <B>configrouter</B> with version control tools such CVS/RCS, we may come up with a home-grown configuration management tool that will satisfy our requirements.<p>
Here are some useful ways of utilizing Expect's power of interaction automation:<p>
<ol>
<li>Used together with Tcl/Tk, you can create a nice GUI for certain old command-line based programs without changing the original source code.<p>
<li>Used with Perl, Expect is an excellent tool to write a TCP/IP port scanner. In fact, this is exactly what the famous scanner SATAN was built from.<p>
</ol>
<p>
<B>Conclusion</b><p>Expect is not an one-size-fits-all language. It was designed to do one thing, interaction automation, and it does that very well. Although Expect is simple, do not underestimate its power. As Don Libes said in the preface of his book, "Using it is one thing, mastering it is quite another." 


<p>
<h1>About the Author</h1><p>
Clay Lin is a Chief Engineer at Zero &amp; One Engineering, Inc., a system integrator specialized in network engineering and systems integration in the Washington D.C. area. He works on-site at a federal government agency, where he is in charge of network security, router configuration, and UNIX system administration. He can be reached at: clay_lin@0-1.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>