<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i03: The Masshosts Tool</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/1999/mar99.tar"><b class=codeListing>mar99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>The Masshosts Tool</H1><p>
<P>John Mechalas
<P>
One of the many challenges facing UNIX systems administrators in large, heterogeneous environments is the management of numerous, dissimilar hosts. In order to distribute software, make configuration changes or perform routine customer support, it is often necessary for machines to be broken down into categories, based on their architecture and OS level, or referenced by subnet. Most useful to the administrator is the ability to execute arbitrary commands on these groups of hosts or execute a series of commands on a single machine with the target hostnames as arguments.<p>
Virtually every systems administration group in a large environment maintains a script or program for accessing hosts en masse. This article describes the masshosts tool, a highly configurable Perl script that fills this role, with an emphasis on performance, efficiency, and flexibility.<p>
<B>About Masshosts</b><p>Masshosts grew from a shell script that was originally written in our computing environment for the purpose of executing a single command on a large number of machines. This shell script, named allhosts, took as its arguments a list of keywords, where each keyword would correspond to a list of hosts that fell into a common category (e.g., the keyword "ibmws" would correspond to a list of IBM RS/6000 workstations). When allhosts was run, it would either print out the host list that corresponded to your keywords or, via a command-line option, <B>rsh</B> to each host in that list and execute a desired command.<p>
The primary problem with allhosts, however, was its speed. Each <B>rsh</B> command would execute in series, requiring the first <B>rsh</B> to complete before the second could begin. Given the length of time needed to perform each remote execution, using allhosts to execute the desired commands on a large number of hosts would be painstakingly slow. Also, if any of the hosts in the list happened to be unresponsive, the entire execution string would be delayed, waiting for that <B>rsh</B> to time out.<p>
Consider, for example, a list of keywords that would correspond to 200 hosts. If we assume each <B>rsh</B> and command would take roughly three seconds to complete, then using allhosts to execute that command on all 200 machines would take at least 10 minutes. If even 2% of those hosts happened to be down, off the net or otherwise unavailable, that would be an additional 4 minutes of execution time due to <B>rsh</B> timeouts. If we extend this list of targets to include 1000 machines, not too unusual in our environment, then we would be looking at a minimum execution time of just under an hour, plus potentially 10 minutes in <B>rsh</B> timeouts.<p>
Reality, of course, was much worse. It was not uncommon for an allhosts run against 400 machines to take well over an hour, and runs against larger lists of hosts had to be "split up" and run in parallel. It was out of this parallel run technique that masshosts was born. To cut down execution times, a new script was developed in Perl to actively manage its child processes and provide a means for executing these processes in parallel instead of in series. This new approach resulted in a performance boost that was limited only by the CPU of the local machine; and because <B>rsh</B> is cheap in terms of CPU consumption, it was not uncommon to run up to 30 or more processes at a single time, giving over a 30x increase in performance. Command runs that once took an hour or more would complete in minutes, and smaller runs would finish in a few seconds. This performance boost was invaluable to our administrative processes.<p>
Since its first incarnation, masshosts has undergone many modifications designed to increase its usability and flexibility without sacrificing its performance. The masshosts described here was written in Perl and makes use of Perl5 techniques. It was developed and tested on 5.004, but it should run on earlier versions with few or no modifications (though note that the <B>-c</B> option requires Graham Barr's excellent IO::Socket library).<p>
<B>Overview</b><p>Masshosts can work with three different types of input: a list of hosts, a list of filters, or a list of keywords. The distinction and relationship between keywords and filters is very important, so I'll discuss that in detail before moving on. (All listings mentioned in this article are available from the <I>Sys Admin</I> Web site: <B>www.samag.com</B> or <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.)<p>
The default behavior of masshosts is to take a list of keywords, turn those into filters, and use the filters for matching hosts from a predefined list or database. The keyword then functions as an easy-to-remember "tag" that corresponds to a potentially complex filter; but, it is the filter that is actually used in matching a hostname. Keywords are mapped to filters via the filter configuration file, which is explained in more detail below.<p>
The actual host lookup and matching is performed by a custom subroutine named <B>getHosts</B>, which you (the administrator) provide. You can make the <B>getHosts</B> routine as simple as pattern matching hostnames from <B>/etc/hosts</B> (or the <B>hosts.byname</B> map in NIS), or as complex as looking up hosts in some centralized database or flat text file (based on machine attributes). The <B>getHosts</B> subroutine API, and two samples, are also presented later.<p>
The command syntax for masshosts is:<p>
<pre>
masshosts [ -f | -F | -l | -L | -K ] [ -ivV ] [ -x | -X file ]
[ -n net_expr ] [ [ -crz ] [ -p N ] [ -t time_limit ]
[ -o prefix ] -e "cmd &lt;arguments&gt;" ] arg1 arg2 ...
</pre><p>
</b><p>By default, arguments are a list of keywords. These keywords are looked up in the filters file and used to fetch a list of filters. These filters are then used to return a list of hostnames. If multiple arguments are specified, they are <B>OR</B>'d together.<p>
<B>Options<p>
-c</B> - Check the connectivity to the remote host before attempting an <B>rsh</B>. Only meaningful when combined with the <B>-r</B> switch.<p>
<B>-e cmd</B> - Execute the command(s) specified by <B>cmd</B> for each hostname in the match list. The command will be executed on the local machine unless the <B>-r</B> option is specified. If the command string or argument list contains the literal pattern <B>%HOST%</B>, it will be replaced with the current hostname before being executed.<p>
<B>-f</B> - Arguments are an explicit list of filters to use for matching hosts. Filters will be <B>OR</B>'d together.<p>
<B>-h</B> - Print usage.<p>
<B>-i</B> - Prepend all command output with the string "hostname:", for each matching hostname. Only useful when combined with the <B>-r</B> switch. Ignored if <B>-o</B> is specified. This option is handy when you are letting the output from masshosts go to <B>stdout/stderr</B>, and you want to see which host said what.<p>
<B>-l</B> - Arguments are an explicit list of hostnames. Useful when you already know the list of machines, and just want to run commands against them quickly.<p>
<B>-n net_expr</B> - Only hosts whose IP address matches <B>net_expr</B> will be returned. This is interpreted literally as a regular expression, so be careful.<p>
<B>-o prefix</B> - Send the standard output and standard error from commands run to the files <B>prefix.hostname.out</B> and <B>prefix.hostname.err</B> for each hostname that is matched. Only meaningful when used with the <B>-e</B> switch.<p>
<B>-p N</B> - Run commands in parallel, keeping N jobs active simultaneously. Only meaningful when used with the <B>-e</B> switch.<p>
<B>-r</B> - <B>rsh</B>(1) to each matching host and execute commands on the remote machine. Only meaningful when used with the <B>-e</B> switch.<p>
<B>-t time_limit</B> - Time limit, in seconds, for command execution when making parallel runs. Only meaningful when combined with the <B>-p</B> switch.<p>
<B>-v</B> - Be mildly verbose: display the list of outstanding processes after all processes have been spawned. Very useful if the <B>-r</B> switch is specified. Currently only meaningful when combined with the <B>-p</B> switch.<p>
<B>-x</B> - Exclude any hosts listed in the default exclusion file.<p>
<B>-z</B> - Delete any output files that are zero-length (i.e., empty). Only meaningful when used with the <B>-o</B> switch.<p>
<B>-F</B> - Arguments are files that contain an explicit list of filters to use for matching hosts. Using <B>-</B> as an argument specifies standard input. Filters will be <B>OR</B>'d together.<p>
<B>-K</B> - Arguments are files that contain a list of keywords. These keywords will be looked up in the filters file and used to fetch a list of filters. These filters will then be used to match hostnames.<p>
<B>-L</B> - Arguments are files that contain an explicit list of hosts. Like <B>-l</B>, this is useful for those times when you already have a list of machines, and you need to run commands against them quickly. Using <B>-</B> as an argument specifies standard input.<p>
<B>-V</B> - Be very verbose: show when child processes are spawned, as well as when they are collected. Currently only meaningful when combined with the <B>-p</B> switch.<p>
<B>-X file</B> - Exclude any hosts listed in file.<p>
<B>Examples</b><p>
<ol>
<li><B>masshosts sparc</B> - Prints a list of all machines corresponding to the keyword "sparc".<p>
<li><B>masshosts -r -e date sparc</B> - <B>rsh</B>'s to each machine corresponding to the keyword "sparc" and runs the <B>date</B> command.<p>
<li><B>masshosts -Licr -p 25 -e 'last -10' /tmp/machines</B> - <B>rsh</B>'s to each host listed in <B>/tmp/machines</B> and executes the command <B>last -10</B>. Runs 25 <B>rsh</B>'s in parallel, and prepends the output to <B>stdout/stderr</B> with the target machine's hostname.<p>
</ol>
<B>The config file</B></b><p>Masshosts uses a configuration file for customizing its default behavior. The location of the configuration file is hardcoded into masshosts itself as a Perl "require" directive. This is the only line of the masshosts source that you should have to change (see Listings 1 and 2).<p>
The configuration variables and descriptions are as follows:<p>
<B>$CONNECT_TIMEOUT</B> - Used by the <B>-c</B> option. Specifies how long, in seconds, we should wait for a successful connection to a machine before assuming it is down. Set this to something short: if a host doesn't respond in 10 seconds or so, chances are it's not going to, or it has other problems that you may want to look at personally.<p>
<B>$EXCLUDE_FILE</B> - The location of the file containing a list of hosts to exclude from masshosts runs. Host exclusion is explained in detail, below.<p>
<B>$FILTER_FILE</B> - The file that maps keywords to filters. This is explained in detail below.<p>
<B>$GETHOSTS_PL</B> - The location of the Perl library file containing your <B>getHosts</B> subroutine. It is included in masshosts via a "require" directive.<p>
<B>$RSH_CMD</B> - The command name to use when performing an <B>rsh</B> to a remote host. Useful for specifying, for example, <B>ssh</B> instead of <B>rsh</B>.<p>
<B>The Filter Configuration File</b><p>The filter configuration file defines the associations between keywords and filters. When a keyword is specified on the command line, masshosts consults the filter file for that keyword and returns each matching filter. The format of filter file is relatively simple, consisting of two "fields" that are separated by whitespace. Blank lines are ignored, and <B>#</B> signs denote comments (in-line comments are allowed). The first field contains the filter, and the second field contains a pipe-separated list of keywords that will match that filter. This keyword list is actually treated as a regular expression, and every keyword expression in the filters file is matched against each keyword specified on the masshosts command line. Keywords match on whole words only.<p>
For example, if the filter configuration file contained the following lines:<p>
<pre>
sun\d+      sparc|sunos     # Sun sparcs running SunOS
sunsol\d+   sparc|solaris   # Sun sparcs running Solaris
x86sol\d+   x86|solarisx86  # Intel PC's running Solaris x86
x86lin\d+   x86|linux       # Intel PC's running Linux
</pre>
<p>
then the keyword <B>sparc</B> would match lines one and two, but not lines three and four. The keyword <B>solaris</B> would match line two, but not lines one, three, or four.<p>
Note that the matches from each keyword are combined to form the final list. The masshosts command line <B>masshosts sparc x86</B> would match all four lines in the filter configuration file and return the list of hosts that matched each of these four filters. Another way of looking at this is that the keywords themselves are <B>OR</B>'d together, so that adding more keywords potentially gives you more matches, and hence more machines in the list.<p>
<B>Special Features</b><p>Masshosts has several special features to improve its overall performance. These features serve to reduce its run time, make it less susceptible to network outages, and exclude certain hosts from the final match list, regardless of the keywords or filters that were specified on the command line.<p>
<B>Executing Commands on Remote Hosts vs. Local Host</b><p>For each host that your masshost query returns, you have the opportunity to run a command, with arguments, via the <B>-e</B> parameter. This command can be executed either locally (the default) or on the remote host through an <B>rsh</B>, if the <B>-r</B> switch is specified.<p>
If the string <B>%HOST%</B> appears in either the command or the argument list, it will be replaced by the current hostname in masshost's execution queue.<p>
<B>Parallel Execution</b><p>The <B>-p</B> switch is arguably masshost's most powerful option. Rather than waiting for a single command to complete before starting a new one, masshost will spawn the desired number of processes (N) to run in parallel. As each child process exits and is collected, masshosts will spawn a new process in its place, always keeping N processes active at any given time.<p>
Processes can run either on the local machine or, via the <B>-r</B> switch, on the remote host through an <B>rsh</B>. Note that you must be careful when specifying the parameter to the <B>-p</B> switch not to overload your local machine. Commands that run locally can easily suck up available CPU cycles to the point where your performance worsens rather than improves. Unless your jobs are going to be spending a significant amount of time waiting for something (e.g., I/O), keep the number of parallel processes small.<p>
When using the <B>-r</B> switch, however, you can jack up the <B>-p</B> parameter to fairly large values (25 and 30 are not unreasonable numbers). In terms of local CPU, <B>rsh</B> processes are relatively cheap.<p>
<B>Avoiding rsh Timeouts</b><p>Perhaps the biggest source of potential delays in a masshosts run is <B>rsh</B> timeouts. In every environment, there are bound to be machines that are down, not responding to network requests or even off the net entirely, but that are still in the hosts file or the local hosts database. Masshosts, of course, has no way of knowing which machines are up and will blindly attempt to connect to every host in its execution queue. For the machines that it can't reach, however, <B>rsh</B> will hang, waiting for either a connection or a timeout. These timeouts can take anywhere from one to two minutes to occur, depending on your local OS.<p>
With the <B>-c</B> switch, however, you can attempt to avoid <B>rsh</B> timeouts. When specified, masshosts will first check the network connectivity to the remote host by attempting to connect to that host's shell port. If a connection is not established within <B>$CONNECT_TIMEOUT</B> seconds, masshosts assumes that the host is unreachable and will not attempt an <B>rsh</B>. This feature is implemented through Graham Barr's IO::Socket package.<p>
Of course, just because a machine is up, that doesn't mean that it can be <B>rsh</B>'d to successfully. A down fileserver, busy CPU, and a variety of other problems can prevent a machine from actually executing your commands once you have connected to it. The <B>-c</B> switch won't help you in these circumstances, but the <B>-t</B> switch will.<p>
<B>Execution Time Limits</b><p>When running commands in parallel, you can specify a time limit on overall command execution to prevent stalled machines from tying up the execution queue. The <B>-t</B> switch specifies, in seconds, the time limit for the command to complete, including the <B>rsh</B> itself. This is implemented via a call to <B>alarm</B>(2). Be careful when using this option, particularly if you are executing on multiple machine types or speeds: set the time limit according to the projected execution time of your slowest host.<p>
<B>Host Exclusion</b><p>The <B>-x</B> or <B>-X</B> switches tell masshosts to exclude any hostname that appears in the "host exclusion" file. This file has a very simple format: one hostname per line, with no added spaces and no comments. Hostnames must be an exact match.<p>
<B>IP Address Matching</b><p>Specifying the <B>-n</B> switch and its argument allows you to restrict the masshosts host list to machines whose IP addresses match the given regular expression. All known IP addresses for each machine in the host list are checked against this regular expression for a match. The advantage to this technique is that multi-homed hosts will be included if one of their interfaces matches the <B>regex</B>. The disadvantage is that it slows down masshosts, because a <B>gethostsbyname</B>(2) call is made for each hostname in the host list - the longer the host list, the slower the process.<p>
This switch is useful when you only want to hit machines on a specific network or subnet.<p>
<B>Writing the Custom Host-Matching Subroutine</b><p>At the heart of masshosts lies the subroutine that actually takes a list of filters and uses it to generate a list of hostnames that meet the conditions specified by one or more of those filters. This subroutine is named <B>getHosts</B>, and it must be supplied by you.<p>
Because every environment names their hosts differently, it is not possible to provide a generic <B>getHosts</B> subroutine that will work for everyone. Some environments, for example, may choose a naming convention for their hosts where the hostname identifies the type of machine. (Our environment takes this approach: all RS6k's are named with "rs" followed by a numerical suffix, all Solaris machines are "ss" followed by a numerical suffix, and so on). Other administrators may maintain a host information database (whether it be a flat text file or a formal SQL database) where machine configuration information is stored for each host on the network.<p>
The purpose of providing a standard API to the <B>getHosts</B> subroutine, and not including it as a part of masshosts itself, is to allow you, the systems administrator, to easily integrate masshosts into your environment. By writing your own <B>getHosts</B> routine, you choose how to translate filters to hostnames, providing ultimate flexibility.<p>
This section describes the API for the <B>getHosts</B> subroutine and provides two samples that you can either incorporate with few or no changes or use as the basis for building your own.<p>
<B>API</b><p>The API for the <B>getHosts</B> subroutine is quite simple: only two arguments are passed, and both are references to arrays. The <B>getHosts</B> subroutine itself is stored in a file named by <B>$GETHOSTS_FUNC</B> and is included into the Perl script via a "require" directive.<p>
The first argument, which we'll call <B>$arefHosts</B>, is a reference to an array containing the hosts found in the <B>getHosts</B> subroutine. The second argument, which we'll call <B>$arefFilters</B>, is a reference to an array containing our filters. Each host that matches one of the filters in <B>@$arefFilters</B> should be pushed onto the array <B>@$arefHosts</B>.<p>
The following two examples show two different implementations of the <B>getHosts</B> subroutine and will be discussed in detail.<p>
<B>Example 1: Matching Hostnames in /etc/hosts (or hosts.byname)</b><p>Listing 3 shows code for a <B>getHosts</B> subroutine that performs the simplest form of hostname matching. Each filter is a regular expression, and those regular expressions are matched against the hostnames in <B>/etc/hosts</B> or the <B>hosts.byname</B> NIS map.<p>
This function assumes that you have some sort of naming convention identifying machine type according to its hostname. As previously mentioned, our environment uses this technique, where the hostname consists of an alphabetic tag indicating its architecture and OS, followed by a numerical sequence number (rs006, ss102, hp903, etc.). With this arrangement, it is possible to create a regular expression that matches, say, all RS6k's or HP workstations, and the performance is on par with the <B>grep</B> family of commands. Note that you are limited by the granularity of your naming convention. Our hostnames, for example, don't differentiate between HP-UX 9.x and HP-UX 10.x, so when we ask for HP machines, we get them all regardless of their OS level.<p>
Given this naming convention, our filter configuration file might look like Figure 1. Providing the keyword <B>aix</B> on the masshosts command line would correspond to the filter <B>ibm\d+</B>. If we specified <B>solaris</B> as a keyword, we would get two filters: <B>sunsol\d+</B> and <B>sunafs\d+</B>.<p>
The <B>getHosts</B> function in Listing 3 takes these filters from <B>@$arefFilters</B> and forms a single regular expression of the form:<p>
<pre>
\b(filter1|filter2|filter3...)\b
</pre>
<p>
Using the above examples and Figure 1, then, the keyword <B>aix</B> would generate the regular expression <B>\b(ibm\d+)\b</B>, and the keyword <B>solaris</B> would generate <B>\b(sunsol\d+|sunafs\d+)\b</B>. The <B>\b</B> designations help prevent unintended matches. If we, for example, specified <B>nfs</B> as our keyword, we would not want the regular expression <B>fs\d+</B> to also match our AFS servers, whose naming convention is <B>sunafs\d+</B>.<p>
Each line of the hosts file (or the <B>hosts.byname</B> NIS map if <B>$USE_NIS</B> is set) is then matched against this regular expression. If a match is successful, the matching hostname is pushed onto the <B>@$arefHosts</B> array.<p>
<B>Example 2: Querying a Host Information Database</b><p>Listing 4 shows how masshosts could be used to query an LDAP database, using Graham Barr's Net::LDAP Perl module, which can be obtained from the Perl-LDAP page on the Web at <B>http://www.connect.net/gbarr/perl-ldap/</B>. LDAP was chosen for this example because both the Perl modules and the University of Michigan's LDAP server implementation (see <B>http://www.umich.edu/~dirsvcs/ldap/</B>) are freely available.<p>
The advantages of using a database query to match hostnames are numerous and are limited only by the amount and type of data you choose to store for your machines. For the purposes of this example, let's assume that our records have the following structure (in reality, there would be additional fields required by the LDAP database, but we'll leave them out for simplicity):<p>
<pre>
dn: hostname=fs5, o=ourcompany
arch: aushp
hostname: fs5
o: ourcompany
osname: SunOS
osrelease: 4.1.4
osversion: 1
</pre>
<p>
The attributes could be generated using <B>uname -a</B>, then updated into the database. We could then use masshosts to allow queries against this information, creating a filter configuration file similar to Figure 2.<p>
We could even expand the attribute list for a machine's entry, allowing storage of IP address, total RAM, CPU type, Ethernet address, and even which NIS server the host is bound to (provided you update records often, of course). The more data you choose to store, the more granularity you have in selecting the machines for your masshosts run. For truly complex queries, you could skip using keywords altogether and use the <B>-f</B> or <B>-F</B> options to specify search filters directly, giving you the ability to make customized queries on the fly.<p>
<B>Installation</b><p>To install masshosts:<p>
<ol>
<li>Install the masshosts script in the desired location (<B>/usr/local/bin</B>, etc.).<p>
<li>Change the hardcoded "require" line of masshosts to reflect the location of your config file.<p>
<li>Create your filters file.<p>
<li>Create the <B>getHosts</B> subroutine.<p>
<li>Create your config file, <B>masshosts.pl</B>.<p>
</ol>
<B>Conclusion</B></b><p>My group has found masshosts to be a powerful and flexible tool for acessing large numbers of machines. The custom <B>getHosts</B> subroutine makes it easy to integrate masshosts into your existing environment, and allows you to define host-matching filters that range from simple pattern matches to complex database queries. The performance boosts of parallel process execution can save you hours of execution time, and make it possible to run commands on a large number of hosts in a reasonable amount of time, with little or no operator babysitting. These, combined with its other features, make masshosts an invaluable tool for administering large computing environments. 

<p>
<h1>About the Author</h1><p>
John Mechalas has a B.S. and M.S. in Aeronautical and Astronautical Engineering from Purdue University. He has worked at Intel Corporation for four years, where he currently manages a UNIX systems administration and security team for a large microprocessor design site. He can be reached at: johnm@ichips.intel.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
