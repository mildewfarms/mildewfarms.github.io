<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i03: Perls of Wisdom</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1999/mar99.tar"><b class=codeListing>mar99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Perls of Wisdom</H1><p>
<P>Christopher Bush
<P>
A year or so ago, my son, then age five, asked me, "How did they make tools before there were tools?" Or, to put it another way, "Which came first, the chicken or the egg?" After thinking about my son's question, I realized I didn't have a very good answer. Then I thought about the apes in the opening scenes of the movie "2001: A Space Odyssey". They had discovered how to use the bones of a dead animal as a tool - a weapon really. Too graphic an example for a five-year-old, I thought. That scene does, however, illustrate how humankind has continually found ways to use what we have to get what we need. This same approach applies to managing the UNIX operating system.<p>
I recall the first time I wanted to build the GNU C compiler on my new Sun workstation running Solaris 2.1. Sun Microsystems had seen fit to stop bundling the C compiler with the operating system, since there was no longer a need to re-compile the kernel. So there I sat with the source distribution for the latest GNU C compiler, written entirely in C. I was all dressed up with someplace to go, but no way to get there. Luckily, I had tools at hand. I used my favorite tool, the Internet, to download a pre-compiled older version of gcc for Solaris, which I then used to compile this new version. Problem solved, question left unanswered. Where did the older pre-compiled version come from? I didn't know, and I didn't care; any more than the ape in the movie cared what the dead animal was, or what killed it. What I did know was that I needed to use the tools at my disposal to create what I needed, and I was comfortable doing so.<p>
It's this very knack for creating and using tools that is part of the underlying philosophy of UNIX (although I'm not implying that the typical UNIX systems administrator in any way resembles an ape). The creators of UNIX made no myopic assumptions about what kinds of things people would need to do. As a result, a lot of small, efficient utility programs were added to UNIX allowing it to become a flexible, if sometimes arcane, operating system.<p>
UNIX is more than an operating system, though. It is a fully loaded toolbox. Instead of hammers and screwdrivers (or the femur of a dead tapir), you get <B>grep</B>, <B>awk</B>, <B>sed</B>, <B>lex</B>, <B>yacc</B>, and more. These tools are general purpose enough to allow a savvy systems administrator to use them for accomplishing a variety of different things, most of which couldn't have been imagined at the time UNIX was designed. To be a successful systems administrator, you'll have to continually learn to wield these tools in ways that you can't even imagine today. UNIX is an operating system with a personality, which lends itself well to those people with an inherent ability to use and combine tools to accomplish their tasks.<p>
<B>In Every Oyster</b><p>It is precisely this UNIX toolbox that gives its systems administrators a distinct advantage over those administering other operating systems. I'm not suggesting that you beat your Windows NT counterparts senseless with the leg bone of some poor dead creature, but in a figurative way, you can "beat them" nonetheless. Consider this problem. I want to know how many partitions/drives on my Windows NT server are over 90% capacity. I can fire up the Windows Explorer (file manager), point here, click there, drag, select, and pretty soon I have a nifty little window with a pie chart showing utilization of one drive. I make a note of the capacity and utilization. Then, I can do it all again for each drive. Wash, rinse, and repeat. On my UNIX box, I can perform this check by whipping off one simple command line:<p>
<pre>
% df -k | perl -ane '($F[4] &gt; 90) &amp;&amp; print)'
</pre>
"Whoa, there!", you say. "Is that Perl he's using? What about <B>awk</B> and <B>grep</B>?" Yes, I used Perl. I long ago relegated <B>awk</B>, <B>grep</B>, <B>lex</B>, and <B>sed</B> to the bottom drawer of my systems administrator's toolbox. They now sit there collecting dust right beside that tired old Bourne shell.<p>
When I first discovered Perl, I used it for scripting of frequently performed tasks that begged for automation. Perl had the power and (mostly) familiar syntax of C, the ease of use of Bourne shell, powerful string handling, and the same regular expression capabilities familiar to anyone who has ever read the man page for <B>sed</B>(1). Perl quickly replaced Bourne shell as my language of choice for automating everything from backups to printer and DNS management. Then the World Wide Web came along, and Perl increased in popularity as the language of choice for CGI application programming. Before I knew it, I was so familiar with Perl syntax and semantics that I rarely needed to pick up my favorite Perl book (see References).<p>
In the meantime, every time I needed to do something that traditionally required some combination of <B>grep</B>, <B>awk</B>, or <B>sed</B>, I'd find myself reading the man pages, or worse, picking up my <B>awk</B> or shell book to look up syntax. Then I thought, what if Perl could be used in a similar fashion - on the command line? Perhaps there was opportunity to save myself time and get fewer paper cuts flipping through my <B>awk</B> text.<p>
Here's what I would have done with <B>awk</B> to accomplish the same thing as the filesystem example above:<p>
<pre>
% df -k | awk '{if ($4 &gt; 90) then print $0}'
awk: syntax error near line 1
awk: illegal statement near line 1
</pre>
After this, I would have retrieved my <B>awk</B> text, figured out the syntax, and come up with:<p>
<pre>
% df -k | awk '{if ($4 &gt; 90) print}'
</pre>
<P>
Pretty similar to the command line using Perl. <B>awk</B>, like Perl, doesn't use a then keyword in if-then constructs. I should have known that. I wonder how long it would take to get all that information on a Windows NT system? However, I admit I had to learn a few things about Perl to get this far. At first look, I would've written a small Perl program like this:<p>
<pre>
#! /usr/local/bin/perl
die "Sorry!" unless open(DFOUT,"/usr/bin/df -k|");
while (&lt;DFOUT&gt;) {
    @fsys = split;
    if ($fsys[4] &gt; 90) {
        print $_;
    }
}
</pre>
<p>
I could then tuck this program away in <B>/usr/local/bin</B> and forget what I named it, making it almost impossible to use again. Luckily, Larry Wall and friends have seen fit to build into the Perl interpreter a number of extremely useful command-line switches. These switches, little Perls of wisdom if you will, are precisely what are needed to turn Perl from powerful programming language into powerful and easy to use command-line tool. I will present six such switches in this article and provide some simple but useful one-liners that can be used to perform some day-to-day systems administration and Web site administration tasks. More important though, I hope you'll learn enough about using Perl as a general purpose command-line tool to apply it usefully to your own administration tasks.<p>
<B>Perl 1</b><p>There is one fundamental switch necessary to use Perl from the command line, and that is the <B>-e</B> switch. The <B>-e</B> switch tells the Perl interpreter to execute the following argument as its program, rather than looking through the argument list to find a script filename to execute. The argument to <B>-e</B> should be a valid Perl program, enclosed in single or double quotes. The above short Perl program could have been executed on the command line like this:<p>
<pre>
% df -k | perl -e 'while (&lt;&gt;) {@fsys = split; if ($fsys[4] &gt; 90) {print}}'
</pre>
Perl, like <B>awk</B>, <B>grep</B>, and <B>sed</B>, can accept data from standard input, or by including filename(s) on the command line. The above command accomplishes the same thing as the program shown previously, but it still seems like a lot to type for one command. It would be easier to type the previous program into an executable script file after all. That doesn't mean the <B>-e</B> switch isn't useful, though. A number of other switches can also make life on the command line easier. One such switch is <B>-n</B>.<p>
<B>Perl 2</b><p>The <B>-n</B> switch automatically encloses your script, in our case the argument to <B>-e</B>, in a loop like this:<p>
<pre>
while (&lt;&gt;) {
    # your code here
}
</pre>
<p>
This will cause your code to be executed for every record in the standard input, which may come from multiple files, the terminal, or piped from another command. For the above example, we can now write:<p>
<pre>
% df -k | perl -ne '@fsys = split; if ($fsys[4] &gt; 90) {print}'
</pre>
<p>
That's a little shorter, but may be more work than is necessary.<p>
Before we move on to another switch that will help out, let's take advantage of the way Perl evaluates logical expressions to shorten the code above. Previously in this article, you saw the following command line:<p>
<pre>
%df -k | perl -ane '($F[4] &gt; 90) &amp;&amp; print)'
</pre>
Besides the <B>-a</B> switch, which we'll get to shortly, you'll see that there is no if conditional. Instead, I have used a logical AND, denoted by the <B>&amp;&amp;</B>. Here, the left side of the logical AND expression is evaluated, and the right side is only evaluated if the left side evaluates to true. This is perfectly okay, since the entire expression cannot possibly evaluate to true if either one of the evaluated expressions (in this case, the one on the left) is not true. By evaluating the left side first, Perl avoids wasting time evaluating the right-hand expression if the left isn't true. The end result is a short-form if-then construct. This doesn't save much typing with this particular example, but it can be a handy thing to know. Combining this revised conditional construct with the <B>-a</B> switch, will get us to the final form of this example command line as first seen in the introduction.<p>
<B>Perl 3</b><p>The <B>-a</B> switch turns on autosplit mode, automatically splitting the input records into a list. The split function, by default, splits a string on whitespace, just like <B>awk</B>. Perl's autosplit mode splits the string into the array <B>@F</B>. So, now we can rewrite the previous command:<p>
<pre>
% df -k | perl -ane '($F[4] &gt; 90) &amp;&amp; print'
</pre>
<p>
I think I've seen this before somewhere. Let's look at a few more examples combining what we've learned so far. Let's say we want a sum total of Kbytes used on all filesystems. We might use something like:<p>
<pre>
% df -k | perl -ane '$tot+=$F[2]; END {print $tot,"\n";}'
</pre>
<p>The <B>END</B> will look familiar to avid <B>awk</B> users. It is included in Perl specifically to provide the same functionality as it does in <B>awk</B> - to allow for statements to be executed after the implicit loop created by <B>-n</B>. Similarly, there is a <B>BEGIN</B> keyword for blocks that must be executed before the loop. If you're a stickler for initializing variables, you would write:<p>
<pre>
% df -k | perl -ane 'BEGIN {$tot=0} $tot+=$F[2]; END {print $tot, \n"}'
</pre>
<p>
This is really starting to look like an <B>awk</B> program, isn't it? To further the similarity to <B>awk</B>, Perl includes the familiar <B>-F</B> switch.<p>
<B>Perl 4</b><p>Just as with <B>awk</B>, the <B>-F</B> switch allows you to change the character used to divide up input records into separate fields (or list elements as they are called in Perl). For example, let's look at all of the user names in the password file:<p>
<pre>
% perl -F: -ane 'print $F[4], "\n"' /etc/passwd
</pre>
<p>
The <B>:</B> character is the field separator for elements in the password file. Note that rather than the implicit while loop processing records from standard input as the result of a pipe, it reads from <B>/etc/passwd</B>. Perl will treat everything after the last switch and its accompanying argument as a filename or filenames to be read as input. Multiple files can be given, either explicitly or using shell metacharacters (wildcards).<p>
So far, we haven't seen much that you can't do with <B>awk</B>, using a few less command-line switches. But consider the following example, in which Perl comes in handy for a quick and dirty "killall" command:<p>
<pre>
% ps -wax | perl -ane '/httpd/ &amp;&amp; kill 9,$F[0]'
</pre>
<p>There's that <B>&amp;&amp;</B> logical expression again, acting like an if-then. If you just typed the above command, and you had proper privileges, you just unceremoniously shut down your Web server. Oops! No new switches on this command line, but because of Perl's built-in pattern matching capabilities and robust function set, which includes inter-process communication capabilities such as signaling, by using the kill function, we've done something that would otherwise require a shell looping construct, a <B>grep</B> command, and probably <B>awk</B>.<p>
Another handy thing to know when using Perl this way is that like <B>awk</B>, when Perl is processing a file or standard input (as with the while <B>(&lt;&gt;) { }</B> loop construct or the <B>-n</B> switch) the file or files will be broken into records, with the default record separator being the end-of-line (<B>"\n"</B>). Also like <B>awk</B>, Perl allows this default input record separator to be changed. The <B>$\</B> scalar variable in Perl, if explicitly set, changes the input record separator. For example, if you have a file broken up into paragraphs, you can process each paragraph as a separate input record, rather than each line. The assumption here is that paragraphs are sections of the file separated by two or more consecutive newlines. In Perl, you would set:<p>
<pre>
$/="";
</pre>
<p>
to do this. This is different from:<p>
<pre>
$="\n\n";
</pre>
<p>
which specifically looks for a blank line, and treats the next character as the first character of the next input record. Using <B>"\n\n"</B> would not work properly if you had a file with three consecutive newlines. For example, I maintain a printcap file with a blank line between each printer definition. If I want to search <B>/etc/printcap</B> for every printer that spools remotely to the print server named megadon, I could do this:<p>
<pre>
% perl -ne 'BEGIN {$/=""} /rm=megadon/ &amp;&amp; print, "\n";' /etc/printcap
</pre>
<p>
So far, we've looked at examples of reporting on contents of files or post-processing the output from commands such as <B>df</B>. All these things could as well be done with <B>awk</B>, or <B>awk</B> combined with <B>grep</B> and the shell in some fashion. That's okay. We're tool jockeys; we can handle that. But what if we want to make changes to files instead of simply reporting on their contents? Enter the Perl interpreter's <B>-p</B> switch.<p>
<B>Perl 5</b><p>The <B>-p</B> switch works much like <B>-n</B>, except the implicit loop looks like:<p>
<pre>
        while (&lt;&gt;) {
            # your code here
        } continue {
            print;
        }
</pre>
<p>
Here, all input records are passed to standard output after your code operates on them. With <B>-n</B>, the only things that are output are what you explicitly cause to be from within your code. Consider this example:<p>
<pre>
% perl -pe 's/rm=megadon/rm=syrinx/;' /etc/printcap &gt; /etc/printcap.new
</pre>
<p>
We've just created a new printcap file, <B>/etc/printcap.new</B>, that if installed will cause all print jobs that previously spooled remotely to megadon to spool to the server named syrinx. We've just used Perl where we might previously have used <B>sed</B>. Let's say you're confident and brave (admirable but often dangerous traits for a systems administrator), and you want to skip the intermediate step of creating <B>/etc/printcap.new</B> and then copying to <B>/etc/printcap</B>. Instead of using the <B>-p</B> switch, you can use <B>-i</B>.<p>
<B>Perl 6</b><p>The <B>-i</B> switch considerably expands the amount of implicit code used. In short, <B>-i</B> specifies that the files processed by <B>&lt;&gt;</B> are edited in place. Sound dangerous? It can be, but you can pass an optional argument to <B>-i</B>, which specifies an extension to be used to create a backup of the original file or files. We can now do this:<p>
<pre>
% perl -p -i.old -e 's/rm=megadon/rm=syrinx/;' /etc/printcap
</pre>
Now restart the line printer daemon (you did shut it off first, right?). Your printers that formerly spooled to megadon will spool to syrinx. If you need to move these printers back to megadon, you have a file called <B>/etc/printcap.old</B>, which contains the version of the printcap file prior to executing the above command.<p>
Another place I've found the <B>-i</B> switch useful is in administering a Web site. Suppose I have a bunch of HTML files that refer to an image, but the author of the pages did not include the image size attributes (width and height) in the HTML code. Including these attributes can enhance the viewer's browsing experience by allowing the browser to display the text of the document more quickly, because it knows how much space on the page to allocate for the images before they finish loading. I can edit all of the files in my current directory that refer to a particular image with a command like this:<p>
<pre>
% perl -pi.bak -e 's/src="ceopic.jpg"/src="ceopic.jpg" width="100"
height="125"/g;' *.html
</pre>
<p>
You can also take advantage of another feature of Perl that is very similar to one in <B>sed</B>, in which all or part of the matched pattern can be plugged into the substitution string. For example, suppose I have a bunch of HTML files with some navigation buttons, named <B>button1.gif</B>, <B>button2.gif</B>, <B>button3.gif</B>, etc. Not very creative naming, but it serves to illustrate the point. I want to add the width and height attributes to all references to these images in each file in the current directory. I can do this with a command like this:<p>
<pre>
% perl -pi.bak -e 's/(src="button.*\.gif")/$1 width="40" height="20"/g;'
*.html
</pre>
<p>
By grouping part of the pattern we are attempting to match (which is a simple regular expression) in parentheses, we can then use the matched pattern in the substitution string, in the form of the <B>$1</B> scalar. Multiple groupings in the pattern are referred to in the replacement string as <B>$1</B>, <B>$2</B>, <B>$3</B>, and so on. Sure beats editing each file individually and remembering how to do a similar substitution within the <B>vi</B> editor. I've been told that you can use <B>ed</B> to do similar in-place editing of multiple files, but I've yet to master that one.<p>
I've found myself using the <B>-i</B> switch for more and more tasks, both in systems administration and Web site administration. It is a very powerful addition to my Perl knowledge. If you're interested in exactly what the implicit code placed by the <B>-i</B> switch is, see page 332 of <I>Programming Perl</I>, 2nd Edition, by Larry Wall, Tom Christiansen, and Randal Schwartz. Every Perl programmer ought to have this book.<p>
<B>Conclusion</b><p>I previously stated that UNIX is an operating system designed by and for people with an inherent knack for combining and using tools. Perl, which has originally developed for use on UNIX systems, follows in a similar vein. UNIX is an operating system with personality, and Perl is a programming language with a similar personality. The same traits that make people good UNIX systems administrators seem to make them very comfortable with Perl.<p>
In this article, I've shown you how to adapt Perl, a full-featured programming language used for anything from systems administration scripts to Web applications, and use it as a powerful and flexible command-line utility. It's this knack for tools that makes UNIX systems administrators what they are, and quite possibly is what draws them to UNIX versus the more sexy, trendy operating systems like Windows NT. But are we adept at using tools because we use UNIX, or do we use UNIX because we are so skilled with tools? It's the chicken and the egg all over again.<p>
<B>References and Recommended Reading</b><p>Tomas Scoville, "The Elements of Style: UNIX as Literature", <B>http://www.performancecomputing.com/features/9809of1.shtml</B>, 1998<p>
Larry Wall, Tom Christiansen, Randal L. Schwartz, <I>Programming Perl</I>, 2nd Edition. O'Reilly &amp; Associates, Inc. 1996.<p>
Stanley Kubrick, "2001-A Space Odyssey", MGM/UA Studios, 1968. 

<p>
<h1>About the Author</h1><p>
Chris Bush is a Programmer Analyst for a major mid-west bank in Cleveland, Ohio. He does Web site management, Web development, Internet/Intranet architecture, UNIX systems administration, and dabbles with Linux at home in his spare time. He can be reached at chris.bush@stratos.net.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>