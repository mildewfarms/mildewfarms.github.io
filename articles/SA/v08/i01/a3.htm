<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i01:Sendmail as Gatekeeper </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1999/jan99.tar"><b class=codeListing>jan99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Sendmail as Gatekeeper</H1><p>
Michael Schwager
<p>
If you have an Internet email account, you likely have encountered the problem of "spam", or "Unsolicited Commercial (or Bulk) Email" (UCE or UBE). It may already be a big problem for your organization or company. Beginning this month, <I>Sys Admin</I> will begin a three-part series on Sendmail and configuring it for denying spam. In this issue, we'll give you the basic foundation for understanding Sendmail. Next month, we'll cover the important anti-spam features; and in March, we'll wrap it up by discussing ways to be even more proactive in stopping mail before it enters your Intranet.<p>
You and your users may already be combatting spam with filters on your mail clients. However, it would be most efficient if you could stop spam before it enters your domain. Sendmail, as the Internet's foremost Mail Transfer Agent (MTA), is becoming smarter at denying spam-suspicious email. Here are the facilities that Sendmail, as of version 8.9, contains to deny spam mail:<p>
<ul>
  <li>Disallowing relaying (the delivery of mail to addresses not in your domain, from a client host not located in your domain).
  <li> Blocking mail from envelope (<B>MAIL FROM:</B>) addresses that do not have a valid domain name.
  <li>Blocking mail based on the envelope sender's user and/or hostname.
  <li>Denying mail from hosts known to harbor spammers, or are misconfigured such that spammers are using it as a relay using the "Realtime Blackhole List" (discussed next month).
  <li>Blocking mail based on the contents of the message headers; for example, if the To: address is "friend@public.com" (used by some popular spam generating packages).
</ul>
<p>
The first four items are set up when you configure sendmail "out of the box", the last item requires you to set up the rules to enable them. All of the items need at least some configuration to allow or disallow certain emails.<p>
<B>Sendmail Operation</b><p>Compiling and installing the Sendmail binary is liable to give you a false sense of bravado. The real "guts" of Sendmail are found in the configuration file. Indeed, it can seem intimidating. However, as with any great work, much of Sendmail's complexity comes from its genuine simplicity.<p>
If you think of the Sendmail program itself as a black box, it does the following four things:<p>
<ul>
  <li>Receives a mail message.
  <li>Processes addresses (they may be changed somehow).
  <li>Figures out where the message should go next.
  <li>Delivers the message.
</ul>
<p>
To do these things, it uses the <B>sendmail.cf</B> file. In it:<p>
<ul>
  <li>Operators make up a rule.
  <li>Rules are applied to addresses.
  <li>Rules make up rulesets.
  <li>Addresses get rewritten, and a mail delivery method is chosen.
</ul>
<p>
Rulesets are traditionally referred to by a simple number (e.g., "Ruleset 3" or "Ruleset 0"), but as of Sendmail 8.7, named rulesets have been available (e.g., "Ruleset check_mail").<p>
Sendmail has a definitive order for doing things. This order is pre-ordained in the source code. There is a famous "sequence of rule sets" diagram that bears repeating. It shows the basic paths that an address may take through Sendmail's rules:<p>
<p>
<img src="../../resource/v08/i01/a3_f1.gif" width=350 height=52  alt="The sequence of rule sets Diagram">
<p>
<p>
For in-depth information about the program, I suggest buying a copy of Sendmail, Second Edition, by Bryan Costales and Eric Allman from O'Reilly and Associates (ISBN 1-56592-222-0). It is truly the Sendmail bible. Within the constraints of this article, however, I'll discuss Sendmail's operation by looking at a typical SMTP conversation. The client connects to the server at port 25 where our Sendmail daemon is listening:<p>

<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td>Speaking?</td>
<td>Conversation</td>
<td>Type of address</td>
</tr> 

<tr>
<td>client:</td>
<td>MAIL FROM: some_address@somewhere.com</td>
<td>&nbsp;Sender</td>
</tr>

<tr>
<td>us:</td>
<td>250 some_address@somewhere.com...</td>
<td></td>
</tr>

<tr>
<td>client:</td>
<td>RCPT TO: valid_recipient@valid_host.com</td>
<td>Recipient</td>
</tr>

<tr>
<td>us:</td>
<td>250 valid_recipient@valid_host.com...</td>
<td></td>
</tr>

<tr>
<td>client:</td>
<td>DATA</td>
<td></td>
</tr>

<tr>
<td>us:</td>
<td>354 Enter mail, end with "." on a line by itself</td>
<td></td>
</tr>

<tr>
<td>client:</td>
<td>sends its message, including headers and body.</td>
<td></td>
</tr>

<tr>
<td></td>
<td>The last line is comprised of a single '.':</td>
<td></td>
</tr>

<tr>
<td></td>
<td>From: some_address@somewhere.com</td>
<td>Sender</td>
</tr>

<tr>
<td></td>
<td>To: valid_recipient@valid_host.com</td>
<td>Recipient</td>
</tr>

<tr>
<td></td>
<td>Subject: Hi</td>
<td></td>
</tr>

<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>

<tr>
<td></td>
<td>Hello!</td>
<td></td>
</tr>

<tr>
<td></td>
<td>.</td>
<td></td>
</tr>

<tr>
<td>us:</td>
<td>250 Message accepted for delivery</td>
<td></td>
</tr>
</table>

<p>
That's four addresses. Here's what happens (refer to the sequence of rulesets): The envelope <B>FROM:</B> address (in the SMTP dialog) is run through Ruleset 3, then Ruleset 1, then the rule that appears in the S= flag from the mailer specification as determined by Ruleset 0,  then through Ruleset 4. It is rewritten based on the rules in those rulesets, and the modified form is passed from one ruleset to the next ruleset. Thus, Ruleset 3 modifies the address, and the output of its work becomes the input to Ruleset 2, and so on.<p>
Now for the envelope recipient (the <B>RCPT TO:</B> in the SMTP dialog). In reality, this address is one of the first to be processed. The address first gets processed by Ruleset 3. Since it is the envelope recipient address, it is then sent through Ruleset 0. The job of Ruleset 0 is to look into the future, and determine where this message is going. Is it a local or Internet user? Are there special delivery conditions? Ruleset 0 figures it out and selects a mailer. A mailer is just the method used to deliver this mail. The method includes the host or program we need to interact with, and any special rules that should be applied to the email addresses on this mail message, by filling in the blanks after the R= and S=.<p>
Let's say Sendmail has determined that R=21 and S=11. So, the envelope recipient address continues (after Ruleset 3 and after determining the mailer) to go through and be processed by Rulesets 2, then 21, then 4.<p>
Similarly, the header <B>To: address</B> is processed by Rulesets 3, 2, 21, and 4. The header <B>From: address</B> is a sender address, so it is processed by Rulesets 3, then 1, 11, and 4. After all this rewriting is accomplished, the mail message is written to a file and queued for redelivery (if necessary) and sent.<p>
<B>Installing Sendmail</b><p>In order to learn Sendmail, it's best to have a running copy. You can download Sendmail by pointing your Web browser to <B>http://www.sendmail.org</B> and following the instructions there. Sendmail runs on many versions of UNIX, including Linux, see:<p>
<pre>
http://www.sendmail.org/faq/section3.html#3.26
</pre>
<p>
A Windows NT version is available from <B>www.metainfo.com</B>. I have not used that version; it claims to have a specialized GUI for configuration although I understand it uses a standard <B>sendmail.cf</B> file.<p>
Additionally, you may want to get the Berkeley DB package. It comes highly recommended and is easy to install and implement. The most recent version is available at <B>http://www.sleepycat.com</B>.<p>
Once you obtain the source code, you'll need to compile it and install it. I will assume that you are installing the Berkeley DB package, as well. Installing Sendmail goes like this:<p>
<ol>
<li>Uncompress and extract the <B>tar</B> files.
<li>Install DB according to the instructions.
<li>Create <B>BuildTools/Site/site.config.m4</B>. Below is a sample. (When you are editing or creating m4 files, be sure that you do not create extraneous blank spaces, or you will get strange results.)
</ol>
<p>
<pre>
APPENDDEF(`confENVDEF',`-DMAP_REGEX')
define(`confCC',`gcc')
define(`confEBINDIR',`/usr/local/sendmail-r8.9/lib')
define(`confHFDIR',`/usr/local/sendmail-r8.9/lib')
define(`confMANROOT',`/usr/local/man/man')
define(`confMANDOC',`-man')
define(`confMBINDIR',`/usr/local/sendmail-r8.9/lib')
define(`confNROFF',`nroff -Tlp')
define(`confSBINDIR',`/usr/local/sendmail-r8.9/bin')
define(`confUBINDIR',`/usr/local/sendmail-r8.9/bin')
define(`confLINKS',`${UBINDIR}/newaliases ${UBINDIR}/mailq \<br>  ${UBINDIR}/hoststat ${UBINDIR}/purgestat')
define(`confLIBDIRS',`-L/usr/local/lib')
define(`confMAPDEF', `')
</pre>
<p>
A description of the above values can be found in the <B>src/README</B> file in the Sendmail source tree, and in the <B>BuildTools/README</B> file.<p>
Note that I am not installing Sendmail in the usual place. This practice goes against Eric Allman's recommendation, but I always leave the root partition alone as much as possible. Because of the myriad different files associated with the program, I install it in <B>/usr/local/sendmail-r8.X</B> (where X is the current revision). When I upgrade to a new version, it will be easy for me to link <B>/usr/lib/sendmail</B> to the new Sendmail. As soon as I am confident the new program is running well, I simply delete the old structure.<p>
To build Sendmail:<p>
<ol>
	<li>  Create the directories <B>/usr/local/sendmail-r8.X</B>,<B> /usr/local/sendmail-r8.X/bin</B>, <B>/usr/local/sendmail-r8.X/lib</B>, and <B>/usr/local/sendmail-r8.X/databases</B>.
	<li>  <B>cd</B> to the <B>src</B> subdirectory in the Sendmail source hierarchy.
	<li>  run <B>Build -c</B> to build Sendmail (the <B>-c</B> overrides any previous configuration).
	<li>  <B>cd obj*</B> and do <B>make install</B>. You may have errors installing the <B>man</B> pages into the <B>man8</B> subdirectory. Edit the <B>Makefile</B> to correct this.
	<li>  <B>cd ../../makemap</B>. Run <B>sh Build</B> <B>-c </B>to build makemap. <B>cd</B> to the <B>obj*</B> directory and do <B>make install</B>.
	<li>  Move your old version of Sendmail to something like <B>/usr/lib/sendmail.bak</B>, and link <B>/usr/local/sendmail-r8.X/lib/Sendmail</B> to <B>/usr/lib/sendmail</B>.
</ol>
<p>
<B>A Short Tutorial on Sendmail's Rules<br>
</B>Sendmail's rules look like this:<p>
<pre>
Rlhs &lt;tab&gt; rhs &lt;tab&gt; comment
</pre>
<p>
Note that there are three fields: a left-hand side (LHS), a right-hand side (RHS), and a comment. They are separated by tabs; this is very important! If you are ever cutting and pasting when you edit the <B>sendmail.cf</B>, you will lose the tabs to spaces. Be very careful, because this is an easy mistake to make. The comment is optional. The letter <B>R</B> just means, "This is a Rule." Sendmail's rules have a short little algorithm, which works like this:<p>
<pre>
begin:
if (lhs matches the workspace) then
  rhs rewrite
  goto begin
else
  next rule
</pre>
<p>
First the input (an email address) and LHS are tokenized (separated into component pieces). Tokens are divided by delimiting characters: <B>.:%@!^=/[]</B> also <B>&lt;&gt;;</B> and the space (which is why Sendmail needs a tab to separate fields). Then the LHS is pattern matched against the input (case insensitive); this is not a regular expression.<p>
For example, tokenize the input:<p>
<pre>
&lt;fuu@bar.spammer.org&gt; -&gt; becomes &lt; fuu @ bar . spammer . org &gt;
</pre>
<p>
Tokenize the patterns:<p>
<pre>
$*&lt;$*&gt;$*&lt;$*&gt;$* -&gt; becomes $* &lt; $* &gt; $* &lt; $* &gt; $*

$=w . $=D ! $+ -&gt; becomes $=w . $=D ! $+
</pre>
<p>
(Note that the spaces around our separators only makes them easier to read. It doesn't add more separation.)<p>
<pre>
$=W$*&lt;@$=X.$X&gt;$* -&gt; becomes $=W $* &lt; @ $=X . $X &gt; $*
</pre>
<p>
Trick question! I have not shown you the building blocks, or operators, of the LHS. These operators follow; they are each tokens.<p>
<B>The LHS</b><p>LHS Building blocks:<br>
<table border=0 cellpadding =3 cellspacing =1>
<tr>
<td><B>$*</B></td>
<td>Match 0 or more token</td>
</tr>

<tr>
<td><B>$+</B></td>
<td>Match 1 or more token</td>
</tr>

<tr>
<td><B>$</B>-</td>
<td>Match exactly 1 token</td>
</tr>

<tr>
<td><B>$@</B></td>
<td>Match exactly 0 tokens</td>
</tr>

<tr>
<td><B>$=letter</B></td>
<td>Match any token in class letter</td>
</tr>

<tr>
<td><B>$~letter</B></td>
<td>Match any token not in class letter</td>
</tr>

<tr>
<td><B>$letter</B></td>
<td>Match any token in macro letter</td>
</tr>

<tr>
<td>Anything else</td>
<td>Match token for token</td>
</tr>
</table>

<p>
Tokens in the LHS match the minimum number of tokens possible in the input (including matching nothing). If the token does not match, you back up and retry, adding a token to the input and trying to match. The simplified algorithm goes like this:<p>
<pre>
begin:
tokenize
loop:
if (all tokens are used up) match!
if (current tokens match) next tokens
else backup lhs
goto loop:
</pre>
<p>
Matching "nothing" on the RHS is a trivial case, so it may be convenient to think of "nothing" as a "token". For example:<p>
<p>
Match LHS: $*yyy$*<br>
with input: Xxx.yyy.zzz<p>
<p>
Work methodically, and apply the algorithm.<br>
Tokenize:<p>
<pre>
$* yyy $*          Xxx . yyy . zzz
</pre>
</b><p>Match:<p>
<table border=0 cellpadding=3 cellspacing =1>
<tr>
<td>$*</td>     <td>with</td>       <td>nothing</td>       <td>? Yes, it matches.</td> 
</tr>
<tr>
<td>yyy</td>    <td>with</td>       <td>Xxx</td>           <td>? No, it does not. So back up LHS:</td> 
</tr>
<tr>
<td>$*</td>     <td>with</td>       <td>Xxx</td>           <td>? Yes, it matches.</td> 
</tr>
<tr>
<td>yyy</td>    <td>with</td>       <td>.</td>             <td>? No, so back up LHS:</td> 
</tr>
<tr>
<td>$*</td>     <td>with</td>       <td>Xxx .</td>         <td>? Yes, it matches.</td> 
</tr>
<tr>
<td>yyy</td>    <td>with</td>       <td>yyy</td>           <td>? Yes, it matches.</td> 
</tr>
<tr>
<td>$*</td>     <td>with</td>       <td>nothing</td>       <td>? Yes, it matches. We're out of LHS, so we stay at the $*...Since we still have RHS, we continue.</td> 
</tr>
<tr>
<td>$*</td>     <td>with</td>       <td>. </td>            <td>? Yes, it matches.</td> 
</tr>
<tr>
<td> $*</td>     <td>with</td>      <td>. zzz</td>         <td> ? Yes, it matches.</td> 
</tr>
</table>
<p>
Before we look at the RHS, let's look at some more constructs that can be used in the config file:<p>
<B>Classes and Macros</b><p>Classes are used only in the LHS. Macros are used in the LHS or RHS. A macro is defined thus:<p>
<pre>
Dletterstring
</pre>
<p>
It is evaluated as the configuration file is read. It is called as follows: <B>$letter</B>.<p>
A class is defined in the following manner:<p>
<pre>
Cletter string1 string2 string3
</pre>
<p>
It is evaluated when it is reached. It is called as follows: <B>$=letter</B>. Prior to V8, Sendmail looked up only a single token to match a class. Classes are stored in a hash table; lookup is efficient.<p>
File classes are very similar to regular C classes. C and F build on each other; simply use them when you need a longer list of strings. A file class is defined like: <B>FXfile</B>. For example:<p>
<pre>
FA/usr/local/sendmail-r8.X/lib/subdomains
</pre>
<p>
Database classes are defined like this:<p>
<pre>
Kname class args
</pre>
<p>
Class specifies what kind of database it is, and <B>args</B> is the name of the file it is stored in. Example:<p>
<pre>
Kmailertable dbm /usr/local/sendmail-r8.X/lib/mailertable
</pre>
<p>
Database classes are called in the RHS only, like:<p>
<pre>
$( name key $)
</pre>
<p>
That string is replaced with the result of the key lookup in database "name". Each entry in the database has two parts, the key and the data. If the key matches, the data is returned; otherwise, the key is returned. However, you can have an additional construct, the <B>$:</B>. It looks like this:<p>
<pre>
$( name key $: default $)
</pre>
<p>
This means that if the key is not found, the token following the <B>$:</B> is returned, in this case, "default".<p>
<B>The RHS</b><p>The purpose is to rewrite the workspace. The workspace is a temporary buffer whereupon a rule's actions are applied. The way a rule works is this: The email address is copied to the workspace. The workspace is compared against the LHS. If it matches, it is rewritten according to the RHS. After it is rewritten, you simply try again until it does not match. Here is the algorithm:<p>
<pre>
while (lhs matches workspace); do
      rewrite workspace (according to rhs)
</pre>
<p>
The operators of the RHS:<p>
<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td>$digit</B></td>
<td>Copy by position</td>
</tr>

<tr>
<td><B>$:</B></td>
<td>Rewrite once (prefix)</td>
</tr>

<tr>
<td><B>$@</B></td>
<td>Rewrite and return (prefix)</td>
</tr>

<tr>
<td><B>$&gt;set</B></td>
<td>Rewrite through another ruleset</td>
</tr>

<tr>
<td><B>$#</B></td>
<td>Specify a delivery agent</td>
</tr>

<tr>
<td><B>$[ $]</B></td>
<td>Canonicalize hostname</td>
</tr>

<tr>
<td><B>$( $)</B></td>
<td>Database lookup</td>
</tr>

<tr>
<td><B>$letter</B></td>
<td>Rewrite with macro</td>
</tr>

<tr>
<td>anything else</td>
<td>Rewrite</td>
</tr>
</table>
<p>
Now we have all the building blocks needed to write a rule. So, let's go through a simple rule:<p>
<pre>
Rab$+.$*   de.$2
</pre>
<p>
Our input is <B>ab.c.def</B>.<br>
Tokenize:<p>
<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td>LHS</td>
<td>input</td>
</tr>

<tr>
<td><B>ab $+ . $*</td>
<td>ab . c . def</td>
</tr>

<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr></table>

<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td></B>Match:</td>
<td>Match:</td>
</tr>

<tr>
<td><B>ab</B</td>
<td>matches</td>
<td><B>ab</B></td>
</tr>

<tr>
<td><B>$+</B></td>	<td>matches</td>		<td><B>.</B></td>
</tr>

<tr>
<td><B>.</B></td>	<td>does not match</td>	        <td><B>c</B></td>         <td>so backup</td>
</tr>

<tr>
<td><B>$+</B></td>	<td>matches</td>		<td><B>. c</B></td>
</tr>

<tr>
<td><B>.</B></td>	<td>matches</td>		<td><B>.</B></td>
</tr>

<tr>
<td><B>$*</B></td>	<td>matches</td>		<td><B>def</B></td>
</tr>
</table>
<p>
Yes, it matches! Now, we rewrite <B>ab.c.def</B>:<p>
The <B>$*</B> match is put into <B>$2;</B> "copy by position" means that the n'th pattern from the left-hand side is used when writing to the workspace. So, the output from our first run through this rule is: <B>de.def</B>. But, we're not done. Recall that Sendmail rules loop, so we try again with the new input of <B>de.def</B>:<br>
Tokenize:<p>
<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td>LHS</td>
<td>input</td>
</tr>

<tr>
<td><B>ab $+ . $*</td>
<td>de . def</td>
</tr>
</table>
<p>
<table border=0 cellpadding=3 cellspacing=1>
<tr>
<td></B>Match:</td>
<td>Match:</td>
</tr>

<tr>
<td><B>ab</B></td>
<td>does not match</td>
<td><B>dc</td></tr>
</table>
<p>
This rule is through because we do not match. We go down to the next rule.<p>
<B>Delivery Rules</b><p>There is a special type of rule called a delivery rule. Its job is not merely to rewrite, but to actually define an action: How is this message to be delivered? A delivery rule will tell you.<p>
Delivery rules apply to the RHS only. They are used in <B>ruleset 0</B> to set the delivery agent or exit on an error, and in the anti-spamming rulesets to deny mail. The only delivery rule that makes sense in the anti-spamming rulesets is the <B>#error</B> agent.<p>
The RHS in a delivery rule looks like: <B>$#agent $@host $:user</B><p>
The LHS is as usual. For example:<p>
<pre>
R$+&lt;$+&gt;$* $#smtp$@internal.com $:$1&lt;@$2&gt;
</pre>
<p>
Here, the RHS says that if the LHS matches, this message will be sent using the <B>smpt</B> delivery agent to the host <B>internal.com</B>, and the user will be written using the first and second patterns that the LHS matched.<p>
<B>Delivery Agent</b><p>The actual mail delivery for the message in question is handled by the delivery agent. It's not a rule; it is an action. Delivery agents look like: <B>Mname</B>, <B>equate</B>, <B>equate</B>, <B>equate</B>, ... For example:<p>
<pre>
Msmtp, P=[IPC], F=mDFMuX, S=11/31, R=61, E=\r\n, L=990, A=IPC $h
</pre>
<p>
Only the name, the <B>P= equate</B>, and the <B>A= equate</B> are required.<p>
<B>Rulesets</b><p>A single rule can only do so much. To get any real work done, rules are grouped together in sets. Within the group, the output of the previous rule becomes the input of the next rule.<p>
Rulesets begin with S and a name or number, such as S3. Consider the following ruleset:<p>
<pre>
######################################################################
###  LookUpDomain - search for domain in access database
###
###     Parameters:
###             &lt;$1&gt; - key (domain name)
###             &lt;$2&gt; - default (what to return if not found in db)
###             &lt;$3&gt; - passthru (additional data passed unchanged through)
######################################################################

SLookUpDomain
R&lt;$+&gt; &lt;$+&gt; &lt;$*&gt;         $: &lt; $(access $1 $: ? $) &gt; &lt;$1&gt; &lt;$2&gt; &lt;$3&gt;
R&lt;?&gt; &lt;$+.$+&gt; &lt;$+&gt; &lt;$*&gt;  $@ $&gt;LookUpDomain &lt;$2&gt; &lt;$3&gt; &lt;$4&gt;
R&lt;?&gt; &lt;$+&gt; &lt;$+&gt; &lt;$*&gt;     $@ &lt;$2&gt; &lt;$3&gt;
R&lt;$*&gt; &lt;$+&gt; &lt;$+&gt; &lt;$*&gt;    $@ &lt;$1&gt; &lt;$4&gt;
</pre>
<p>This is a fairly simple ruleset found in your Sendmail config file. Each rule in the ruleset is applied to the input. The input of each rule is the result of the rule above it in this ruleset.<p>
<B>Summary</b><p>In preparation for our Sendmail-based war on spam, we've learned that Sendmail uses rules to determine destination and to rewrite addresses. Rules have a left-hand side (LHS) and a right-hand side (RHS). Pattern matching is used in the LHS. Sendmail's function can be summarized as tokenize, then rewrite or deliver. We've also seen that in accomplishing that task, Sendmail uses operators, classes, and macros. Now that we have a solid foundation for using Sendmail, next month we will delve into the specifics of using the program to fight spam. <p>
(E-Media Manager's Note:  This is the first article of a three part series.  Check the February and March, 1999 issues
for continued content.) <p>
<p>
<h1>About the Author</h1>
<p>Mike Schwager has been a Systems Administrator since he struggled with his 2-Megabyte disk quota on a Vax 11/780. He is going to use some of the proceeds from this article for a new 10-Gig hard disk on his Linux box. Write him at: Michael@Schwager.com and visit http://www.enteract.com/~schwager.
<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >


</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>