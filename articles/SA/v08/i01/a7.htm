<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i01:Application Level Ping: alp </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a7_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a7_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a7_f5.htm">Figure 5</a></span></td>
		<td><a href="../../../../source/SA/1999/jan99.tar"><b class=codeListing>jan99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Application Level ping: alp</H1><P>
<P>Ron Jachim
<p>
The ability of users to access systems and the applications that reside on those systems is a fundamental concern in any organization, and ensuring such access is the most basic task of all systems administrators. The organizational concern is sufficient, in fact, that many, more sophisticated organizations have established service level agreements (SLAs) under which a specified level of access is guaranteed by the IT staff as part of the departmental charge-back arrangement.<p>
What can you, as a systems administrator, do to address user concerns about system uptime? One approach is to utilize SNMP to log which hosts are up. This requires SNMP monitoring to be installed, which is expensive, complex, and can be inefficient. A less expensive solution is to set up a computer as a logging unit that uses the <B>ping</B> command to query each significant host and network device (e.g., every 10 minutes). This will allow you to demonstrate the uptime of your hardware and linkages.<p>
Such a system-response arrangement is simplistic, however, in that it only shows half of the picture. What about the user who cannot access email because the IMAP server crashed? To that user, the system is still down, and your demonstrated uptime appears suspect.<p>
One approach to monitoring applications is to run a script on the server to check the results of the <B>ps</B> command every 10 minutes or so. But what if you do not have control over that host? The answer is a single-sided socket client that tries to connect with the server application on the host. This amounts to an application level <B>ping</B>, or <B>alp</B>. While <B>ping</B> works at the lower regions of the OSI Reference Model, testing basic network connectivity, <B>alp</B> works at the higher regions of the OSI Reference Model, testing the ability to connect with applications.<p>
The November issue of <I>Sys Admin</I> contained an article entitled "The Art and Detection of Port Scanning" by Arthur Donkers. In it, the nmap program is described as a tool with which hackers can determine which ports are active and thus concentrate attacks on known bugs. That is essentially the theory here, but this is a legitimate use of that information. <B>alp</B> was written as a straightforward Perl program to demonstrate real-world socket programming in Perl and to monitor which services are up. Either tool can be useful to either hackers or system administrators. Use of these types of programs involves the classic trade off between security and information.<p>
<B>Network Programming</b><p>To understand how <B>alp</B> works, one must understand a bit about UNIX network programming, especially the client-server model and socket programming. Usually client-server programs are built in two halves. The server component typically sits on a UNIX host or NT server. The client portion often but not always runs on PC clones or Macintoshes. The two halves communicate over the network using sockets. This style of programming allows us to write one server program with a well-defined application programming interface (API). We can write a Mac client or a PC client. From the server's perspective, it doesn't matter as long as both clients correctly use the API defined by the server.<p>
One way to implement a client-server application is to cause the server application to create a socket and listen for clients attempting to connect to that socket. Some sockets are universally defined, while others depend on a particular operating environment. The active sockets on most UNIX systems are listed in <B>/etc/services</B>.<p>
Sockets come in many flavors. The two most common in the IP world are Transmission Control Protocol (TCP) sockets and User Datagram Protocol (UDP) sockets. Our discussions will only cover these types. TCP is connection-based and is reliable; in other words, its header contains enough information to ensure delivery of the segment. UDP, on the other hand, is connectionless and unreliable. Why would anyone use a network communication protocol that is unreliable? Let's examine IP, TCP, and UDP a little more closely.<p>
As you can see from Figure 1, an IP header contains at least 20 bytes of information. This includes a source IP address, a destination IP address, and a protocol. The protocol is usually TCP or UDP, but there are several other choices. In UNIX, the protocols are usually listed in <B>/etc/protocols</B> along with their numeric representation. This information, coupled with the other housekeeping information is enough to route IP datagrams and verify that the delivered datagram is valid. However, there is no acknowledgement that the datagram was received at the destination. Verification is left up to higher layers.<p>
Figure 2 shows the IP header in outline and TCP header in more detail. Since the IP header contains the information necessary to get the packet to its destination, the TCP header contains information necessary to assemble the segments into a cohesive, correctly sequenced whole. It also contains the controls necessary to acknowledge the receipt of a segment. Additional bookkeeping functionality is built into the header. Common TCP applications include <B>ftp</B>, <B>telnet</B>, and <B>rlogin</B>.<p>
In an effort to improve upon the speed of processing TCP segments, we see a much smaller UDP header in Figure 3. It includes none of the sequencing or acknowledgement information that was found in the TCP header. Why? Because if a layer above the UDP layer must intelligently examine the data in the packet anyway, why bother checking it at a lower layer too? This also results in a stateless connection. Some UDP applications are TFTP, BOOTP, and SNMP. DNS can use both UDP and TCP, but usually it uses UDP.<p>
Although NFS is an RPC application, it frequently runs on top of UDP. By being stateless, if you have an NFS-mounted network filesystem and your access to that system goes down and then comes back up, the NFS client should not notice the interruption. If you are running NFS over a wide area network (WAN), you may find better performance by using TCP for NFS traffic since there is more transmission reliability. Figure 4 summarizes the relationship between the various discussed headers and the nomenclature used to refer to the networking elements.<p>
To actually do client/server programming, you must set up a server that uses a predefined socket to communicate through. Then you develop a client that connects to the server's socket. The calls necessary to do this are illustrated in Figure 5, which compares a standard client with the <B>alp</B> client. This illustration is based on the illustration in UNIX Network Programming which shows a connection -oriented client-server exchange in its most basic form.<p>
<B>Implementation<p>
alp</B> was implemented as a Perl script (Listing 1) to be a UNIX style command. (Listings for this article can be found at: <B>www.samag.com</B> or <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.) It requires three command line arguments. The host is specified by IP address or name, the socket is specified by number because there is no way to correlate socket naming conventions between hosts. Finally, the service is specified by name for reporting purposes. There is a fourth, optional, command-line argument that allows specifying command-line switches. Getting and processing the command-line arguments is relatively straightforward; I will concentrate on the setup and use of the socket code.<p>
<B>alp</B> only works with TCP sockets, so <B>$protocol</B> is set to <B>'tcp'</B>. We then get the protocol number by using the <B>getprotobynumber()</B> call. We need a destination host that can be either an IP address or name. We use <B>gethostbyname()</B> or <B>gethostbynumber()</B> to fill in the missing host variable.<p>
The socket address information is set up for the appropriate protocol family, service, and destination host. This is used in the <B>socket()</B> call.<p>
Next, you call <B>socket()</B> to create a socket on your computer. The socket is S. The <B>PF_INET</B> identifies the protocol family as Internet. The common alternative is <B>PF_UNIX</B> or the UNIX protocol family, which is used for interprocess communication (IPC) on exactly one host. The equivalent, alternative naming is <B>AF_INET</B> and <B>AF_UNIX</B> - AF stands for address family. For TCP sockets, the socket type is <B>SOCK_STREAM</B>. For UDP, the socket type is <B>SOCK_DGRAM</B>. These are the most common types of sockets. This call should succeed; if it doesn't, there is a problem at the local end. A somewhat helpful message is printed if you are running the command in the verbose mode.<p>
Next, we call <B>connect()</B> to attempt to connect to the socket. This determines whether or not the application is accessible. An appropriate response is printed. The <B>alarm()</B> call sets up for a 5-second time out so that if the <B>connect()</B> call does not return an answer, we can proceed with an error message.<p>
Finally, we call <B>close()</B> to close the socket. If the socket opened correctly and stayed open, the <B>close()</B> should be successful. In any case, a message is printed if you are running the command in the verbose mode.<p>
<B>alp</B> was developed on a 7-year-old Gateway 2000 486-66 with 64MB running Linux 1.2.13. It was run without conversion on a Sun running Solaris 2.6 and a second PC running Linux 2.0.34. It should be highly portable if you have the proper C header files converted for use with Perl, and if you have the <B>Socket.pm</B> file in the proper place.<p>
<B>Usage</b><p>Three examples of <B>alp</B> execution are shown in Listing 2. I show the command syntax if the wrong number of command-line arguments are provided. In the basic form, the command returns a single line response, much like a basic <B>ping</B> command. In verbose mode, additional information is provided. This is often useful for debugging problems.<p>
Some common TCP applications that one might test include:<p>
<p>
<table BORDER COLS=3 WIDTH="100%" >
<tr>
<td>Application&nbsp;</td>

<td>Socket</td>

<td>Description</td>
</tr>

<tr>
<td><B>ftp</B></td>

<td>21</td>

<td>File Transfer Protocol</td>
</tr>

<tr>
<td><B>telnet</B></td>

<td>23</td>

<td>Telnet</td>
</tr>

<tr>
<td><B>smtp<B></td>

<td>25</td>

<td>Simple Mail Transport Protocol</td>
</tr>

<tr>
<td><B>dns<B></td>

<td>53</td>

<td>Domain Name Service</td>
</tr>

<tr>
<td><B>httpd<B></td>

<td>80</td>

<td>Web Server</td>
</tr>

<tr>
<td><B>rpcbind<B></td>

<td>111</td>

<td>RPC bind, necessary for NFS as well as RPC</td>
</tr>

<tr>
<td><B>nfsd<B></td>

<td>2049</td>

<td>NFS Daemon</td>
</tr>

<tr>
<td><B>lockd<B></td>

<td>4045</td>

<td>NFS Lock Manager</td>
</tr>

</table>

<p>
<p>
There are two ways you might want to utilize <B>alp</B>. It makes a good addition to the <B>ping</B> command in that once basic network connectivity is established, the viability of network applications can be confirmed. The second way to use this command is to use a central computer to monitor various servers to determine a realistic picture of application, as well as network and host, uptime.<p>
Remember, <B>alp</B> only determines if a socket connection can be established to the server. This is a good indicator that the server is up, but it may give false positives when the server is establishing new connections, but not servicing those connections after they are established. Also, remember that <B>alp</B> only works with TCP sockets, because it is single sided and testing UDP sockets cannot be done in an easily transparent manner with a single-sided client. This can be done using nmap by doing some fancy checking of error information. Since I discovered nmap, I probably won't bother implementing a UDP version of <B>alp</B>.<p>
I used a sequence of <B>alp</B> commands in a cron job to gather information on many of our significant Internet services. A number of changes were made to make the <B>alp</B> output more useful for reporting purposes, all of which are reflected in this article. We are collecting data every 10 minutes but may modify the interval to reflect our environment.<p>
These data will be displayed in a modified horizontal bar chart with cells filled in with black when the service is up. We will use colors to indicate the reason for the outage. If the outage is caused by routine scheduled maintenance such as monthly upgrades, hardware installation, etc., we will use green. If the outage is sudden but planned (e.g., installing security patches that cannot wait until the next scheduled downtime), we will use yellow. Finally, the unexpected service interruptions such as power failures will be in red. This will clearly identify the reason for the outage, along with an explanation.<p>
<B>References</b><p><I>UNIX Network Programming</I> by W. Richard Stephens. Prentice Hall, 1990. Note: This is now in second edition, with two of the three volumes now available.<p>
<I>Advanced Programming in the UNIX Environment</I> by W. Richard Stephens. Addison-Wesley, 1992.<p>
<I>TCP/IP Illustrated (The Protocols)</I>, Volume 1 by W. Richard Stephens. Addison-Wesley, 1994.<p>
<I>TCP/IP Illustrated (The Implementation)</I>, Volume 2 by Gary Wright and W. Richard Stephens. Addison-Wesley, 1995.<p>
<I>Programming Perl</I>, Second Edition by Larry Wall, Tom Christiansen, and Randal L. Schwartz, with Stephen Potter. O'Reilly &amp; Associates, 1996.<p>
<I>Advanced Perl Programming</I> by Sriram Srinivasan. O'Reilly &amp; Associates, 1997. 
<p>
<h1>About the Author</h1><p>
Ron Jachim is Manager of Systems for the Barbara Ann Karmanos Cancer Institute, where he is responsible for the systems half of the Information Systems Group. He has 14 years of networking experience and both a BA and an MS in Computer Science. His thesis was on fuzzy queries. He can be reached at: jachimr@karmanos.org.




<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>