<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i01:  Freeware-Based Security </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1999/jan99.tar"><b class=codeListing>jan99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Freeware-Based Security</H1><P>
<P>Syed Ali
<p>
Press coverage of security measures such as advanced firewalls, tunneling, and so forth diverts our attention from less sophisticated measures that may provide adequate security. In this article, I explore various freeware security measures and provide rudimentary information about obtaining and installing them.<p>
Security can be classified into host-based, network-based, remote access, and physical. Host-based security tools would prevent Trojan horse attacks. Network-based security tools would assist in port monitoring, detection of port scanning, and access control. Remote access security would enable a secure channel for remote communication. Physical security would ensure that servers are not damaged physically. Any of the mentioned attacks can be detected using event detection.<p>
In general, protecting against Trojan horses, controlling access, actively monitoring your system, and using a secure shell will lead to a system that is sufficiently secure for most needs. There are many freeware security tools available on the Internet, and I will give a brief description of a few. Keep in mind, though, the first step toward a more secure environment is installing the vendor-recommended security patches.<p>
<B>Tripwire for Trojans</b><p>Once a cracker manages to break into your system, most often he or she will install a Trojan horse so that access in the future will be easier. The most common Trojan horses include a tainted <B>/bin/login</B> that will allow a specified user root access. Other Trojan horses include tainted <B>/bin/su</B> that will grant root access without a password when invoked with a particular option. Tripwire is one way to make sure these binaries and other important files are not tainted.<p>
Installation of Tripwire is relatively complex. It involves checking the makefile to ensure that the C compiler settings are okay, then checking the configs directory to match a config file with your OS. This config file name will need to be entered in the <B>include/config.h</B> file. Then, look in the configs directory to match a <B>tw.conf</B> file for the OS on which Tripwire will be compiled. Run <B>make</B> at the top level of your tripwire source directory. This will produce the needed binaries, but will not install them. Run <B>make test</B> to test the configuration file. Then, copy the Tripwire binary to <B>/usr/local/bin</B> and the configuration file to a read-only filesystem if possible.<p>
The heart of Tripwire is the <B>tw.conf</B> file. In this file, you specify which files Tripwire needs to track. Besides the common files, such as <B>/etc/passwd</B>, different UNIX flavors have different configuration files in different locations. When you choose the <B>tw.conf </B>file for your flavor of UNIX, it includes a default set of files. You should look at these defaults and add or delete target files as appropriate for your site.<p>
Tripwire can be run in four modes: database generation, integrity checking mode, interactive mode, and database update mode.<p>
The database generation mode will generate a database file based on <B>tw.conf</B>. The database file will be used in the future to compare any changes, additions, and deletions to <B>tw.conf </B>and the file specified in <B>tw.conf</B>. This mode is invoked by using the <B>-initialize</B> option to Tripwire.<p>
In the integrity checking mode, Tripwire will check all files specified in the <B>tw.conf </B>file. It will notify the user of any discrepancies between the original file and the changed file. No options are needed, and this mode can be invoked by simply typing in <B>tripwire</B>.<p>
Running Tripwire in interactive mode is similar to the integrity checking mode with the difference that whenever a deleted, added, or changed file or directory is encountered, Tripwire asks the user whether the database entry should be updated. This mode is invoked by using the <B>-interactive</B> option.<p>
In the database update mode, Tripwire will note the changes, additions, and deletions of files and will update the current database without asking for confirmation. This mode is invoked by using the <B>-update</B> option.<p>
Tripwire comes with eight different signature routines: MD5, Snefru, MD4, MD2, SHA, Haval, CRC-32, and CRC-16. The CRC signature routines use simple polynomial division to generate the checksums, whereas the other six routines are all examples of message-digest algorithms, otherwise known as one-way hash functions. Tripwire can be obtained at:<p>
<pre>
ftp://coast.cs.purdue.edu/pub/Purdue/Tripwire</pre>
<p>
<B>Access Control with tcp_wrapper</b><p>Unrestricted access to a host often leads to unwanted access. If you have a server on the Internet, and you know which hosts connect to it and what protocol they use, then <B>tcp_wrapper</B> will enable you to restrict or grant access based on network number, domain name, or protocol. For example, say you have a Web server on the Internet. You want the Internet community to be able to access the <B>httpd</B> daemon, but not necessarily <B>ftp</B> or <B>telnet</B>. <B>tcp_wrapper</B> gives you the ability to restrict access to your <B>telnet</B> and <B>ftp</B> port, but allow free access to your <B>http</B> port. This reduces the risk of unauthorized access to your Web server. Installation of <B>tcp_wrapper</B> is simple. After obtaining the distribution and untarring it, simply run <B>make</B> to compile and produce the binary <B>tcpd</B>.<p>
<B>tcp_wrapper</B> works well with most TCP- and rpc-based applications but not with UDP, because UDP is stateless. For instance, <B>tcp_wrapper</B> can be used for services such as <B>systat</B>, <B>finger</B>, <B>ftp</B>, <B>telnet</B>, <B>rlogin</B>, <B>rsh</B>, <B>exec</B>, <B>tftp</B>, and <B>talk</B>. <B>tcp_wrapper</B> provides small daemon wrappers that can be installed without changing the way the existing services and applications run.<p>
There are two ways <B>tcp_wrapper</B> can be used. The first and easiest way is to move the programs that you plan to replace with <B>tcp_wrapper</B> to a different directory (e.g., <B>/etc/tcp_wrapper</B>) and fill in the resulting holes with the wrapper programs generated during compilation. There is no other change to the system configuration, so this method involves minimum risk. The second method is to leave the network daemons alone and modify their respective entries in <B>/etc/inetd.conf</B>. The <B>inetd.conf</B> file has syntax of:<p>
<pre>
&lt;service_name&gt; &lt;socket_type&gt; &lt;proto&gt; &lt;flags&gt; &lt;user&gt; &lt;server_pathname&gt; &lt;args&gt;
</pre><p>
for socket-based internet services, or:<p>
<pre>
&lt;service_name&gt; tli &lt;proto&gt; &lt;flags&gt; &lt;user&gt; &lt;server_pathname&gt; &lt;args&gt;
</pre>
<p>
for TLI-based internet services. Because <B>tcp_wrapper</B> supports both socket- and TLI-based services, we are able to replace the <B>&lt;server_pathname&gt;</B> field in either case with the location of the <B>tcpd</B> binary. When an Internet request arrives, <B>inetd</B> will run the wrapper program with the name of the concerned server. <B>tcpd</B> will then log the request and call the respective server with the necessary arguments. For instance, a normal <B>telnetd</B> line appears in <B>/etc/inetd.conf</B> as:<p>
<pre>
telnet  stream  tcp     nowait  root    /usr/sbin/in.telnetd    in.telnetd
</pre>
<p>
With <B>tcpd</B> installed, it would appear as:<p>
<pre>
telnet  stream  tcp     nowait  root    /usr/sbin/tcpd    in.telnetd
</pre>
<B>tcp_wrapper</B> supports extensive logging and all log information goes to the <B>syslog</B> daemon. Messages are written to files, to the console, or are forwarded to <B>@loghost</B>. <B>tcp_wrapper</B> also supports access control by using the <B>/etc/hosts.allow</B> and <B>/etc/host.deny</B> files. Access is granted when a daemon/client pair matches an entry in the <B>/etc/hosts.allow</B> file; otherwise, access is denied. By default, <B>tcpd</B> allows access to all hosts. You can also enable client hostname lookup in the <B>Makefile</B> by uncommenting the line reading:<p>
<pre>
#AUTH = -DALWAYS_RFC931
</pre>
<p>
This will tell <B>tcpd</B> to allow connections from hosts whose IP address can be resolved into a hostname and disallow connections otherwise. Banner messages can also be displayed by <B>tcp_wrapper</B>. To support banners, language extensions must be enabled in the <B>Makefile</B>. This can be done by uncommenting the line that reads:<p>
<pre>
#STYLE = -DPROCESS_OPTIONS # Enable language extensions
</pre>
<p>Then, create a banners subdirectory and move the <B>Banners.Makefile</B> file to that subdirectory and rename it <B>Makefile</B>, then create a file called prototype in the same subdirectory and type <B>make</B>. This will produce three files, <B>in.ftpd</B>, <B>in.rlogind</B>, and <B>in.telnetd</B>, which can be then moved to your directory of choice (e.g., <B>/etc/banners</B>). Then, specify the location in the <B>/etc/hosts.allow</B> or <B>/etc/hosts.deny</B> file of the banner file, using the syntax:<p>
<pre>
daemons ... : clients ... : banners /some/directory ...
</pre>
<p>
The <B>tcp_wrapper</B> program can be obtained at:<p>
<pre>
ftp://coast.cs.purdue.edu/pub/mirrors/ftp.win.tue.nl/tcp_wrappers
</pre>
<p>
<B>Port Monitoring with Satan</b><p>From a security perspective, an offensive strategy sometimes proves better than a defensive strategy. Instead of letting a cracker discover holes in your system, why not attempt to discover the holes yourself? This is the main reason Security Administrator Tool for Analyzing Networks (Satan) was written. Satan scans a remote system for various security holes. These holes indicate possible avenues of attack into the system. As a responsible system administrator, running Satan may help detect security holes. Possible security holes, which are outlined on Satan's Web page (<B>http://www.trouble.org/~zen/satan/satan.htm</B>) are:<p>
<ul>
  <li>NFS file systems exported to arbitrary hosts
  <li>NFS file systems exported to unprivileged programs
  <li>NFS file systems exported via the portmapper
  <li>NIS password file access from arbitrary hosts
  <li>Old (i.e., before 8.6.10) Sendmail versions
  <li>REXD access from arbitrary hosts
  <li>X server access control disabled
  <li>Arbitrary files accessible via <B>tftp</B>
  <li>Remote shell access from arbitrary hosts
  <li>Writeable anonymous <B>ftp</B> home directory
</ul>
<p>  
Satan requires Perl 5.000 or later and a Web browser. Satan's author, Dan Farmer, recommends a "SPARC 5, Indy, or better and memory 32MB or better" as the Satan host. To get started, run the <B>reconfig</B> script, which will set up a few preliminaries, such as finding your Web browser path, changing the source directories, and looking for commands. The next step is to run <B>make</B> with the system option (e.g., <B>make sunos5</B> for SunOS 5.x systems). If all this works, then run the script <B>satan</B>, which will start up a Web browser and present the configuration menu. Satan can also be run from the command line. The attack level can be set at three different values: light, normal, and heavy. In light mode (using option <B>-a 0</B>), Satan collects information about RPC services and from DNS. In normal mode (<B>-a 1</B>), Satan collects information from <B>telnet</B>, <B>smtp</B>, <B>ftp</B>, and will usually specify the operating system type. In heavy mode, (<B>-a 2</B>), Satan does additional scanning. Satan stores results in <B>results/satan-data/all-hosts</B>. When using the Web browser to view results, Satan parses this file and displays the results by listing the vulnerabilities found.<p>
Once vulnerabilities have been identified, it is obviously prudent to fix them. For example, if Satan detects a writeable <B>ftp</B> directory, you should change the permissions on the <B>ftp</B> home directory to be read and execute only (<B>chmod 755 ~ftp/pub</B>). Out-of-the-box UNIX installations tend to run a lot of network services that may not be needed. Examples would be <B>chargen</B> (port 19) and <B>echo</B> (port 7). Satan will detect that these services are running and report them as vulnerabilities. It is best to turn these services off by commenting them out in <B>/etc/inetd.conf</B> and sending the HUP signal to <B>inetd</B>. Satan can be obtained at:<p>
<pre>
http://www.fish.com/satan/
</pre>
<p>
<b>Port Monitoring Detection with Courtney</b><p>In addition to checking your systems yourself, it is prudent to know when your system is being scanned for weakness by crackers. Satan is a port scanner, and it quite popular in the cracker community. Although there are a number of Satan detection tools, some commercial, some freeware, I found Courtney to be the most convenient to use. Another popular Satan probe detection tool is Gabriel, but Gabriel runs only on SunOS. Courtney runs on multiple platforms, but requires Perl, <B>libpcap</B>, and <B>tcpdump</B>.<p>
Installation of Courtney is simple. After untarring the distribution, make sure that <B>tcpdump</B> is in your path environment variable, edit the <B>courtney.pl</B> executable, and modify the first line to point to your Perl executable. By default it points to <B>/bin/perl</B>.<p>
Courtney is fairly reliable, however, it may miss packets on a heavily loaded system or a very busy network. Courtney can be set to mail detection using the <B>-m &lt;user@host&gt;</B> option, or to output to the screen using the <B>-s</B> option. A specific interface on a multiple interface machine can be monitored with the <B>-i &lt;interface&gt;</B> option. <B>libpcap</B> and <B>tcpdump</B> can be obtained at <B>ftp.ee.lbl.gov</B>. Courtney can be obtained at:<p>
<pre>
ftp://ciac.llnl.gov/pub/ciac/sectools/unix/courtney/courtney-1.3.tar.Z
</pre>
<p>
<b>Secure Shell Access with ssh</b><p>Two reasons for creating a networked environment are to be able to access files on remote systems and to execute programs on such systems. A common method of remote execution is to use <B>rsh</B> (remote shell) for command execution. However, <B>rsh</B> assumes the network to be secure, and hence uses clear text to transmit passwords as well as data. The solution is to use <B>ssh</B> (secure shell), which uses encryption between endpoints. Other features of <B>ssh</B> include:<p>
<ul>
  <li>Strong authentication
  <li>Improved privacy
  <li>Secure X11 sessions
  <li>No additional training
</ul>
<p>
Installing <B>ssh</B> is relatively simple, but does require a C compiler. After unpacking the <B>tar</B> file, run <B>configure</B>, <B>make</B>, and then <B>make install</B>. <B>make install</B> will install the binaries and two configuration files, <B>/etc/sshd_config</B> and <B>/etc/ssh_config</B>. The former is for the server, and the latter for the client. In general, no editing of these files is required, but checking them does not hurt. Also, if you plan to connect to the server using <B>ssh</B> from another server, <B>sshd</B> will have to be entered in the run scripts.<p>
<B>ssh</B> consists of the following programs:<br>
<ul>
 <li><B> sshd</B> - Server program run on the server machine. This listens for connections from client machines, and whenever it receives a connection, it performs authentication and starts serving the client.
 <li><B> ssh</B> - This is the client program used to log into another machine or to execute commands on the other machine. <B>slogin</B> is another name for this program.
 <li><B> scp</B> - Securely copies files from one machine to another.
 <li><B> ssh-keygen</B> - Used to create RSA keys (host keys and user authentication keys).
 <li><B> ssh-agent</B> - Authentication agent. This can be used to hold RSA keys for authentication.
 <li><B> ssh-add</B> - Used to register new keys with the agent.
 <li><B>make-ssh-known-hosts</B> - Used to create the <B>/etc/ssh_known_hosts</B> file.
</ul>
<p>
<B>ssh</B> can be obtained from <B>http://www.cs.hut.fi/ssh/</B>. <B>ssh</B> has been discussed in a previous <I>Sys Admin</I> article, which can be found on the <I>Sys Admin</I> Web site at: <B>http://www.samag.com/archive/0701 \ /feature.html</B>. The article covers <B>ssh</B> as a secure way for remote access and gives detailed information on installation and configuration.<p>
<B>Event Detection with swatch</b><p>Now that you are using Tripwire to prevent Trojan horses, <B>tcp_wrapper</B> to control access, Satan for port monitoring, <B>ssh</B> for secure shell, you might want to consider getting <B>swatch</B> for triggering events based on entries in the messages file by <B>syslog</B>. Although the software mentioned has built-in notification, it is sometimes useful to add event triggering based on logs that are output using the <B>syslog</B> facility. <B>swatch</B> is one such tool, and can either email you, page you, or perform some other task based on a particular string it notices in any given log file (e.g., <B>/var/adm/messages</B> in Solaris or <B>/var/log/messages</B> in Linux).<p>
Installation of <B>swatch</B> is relatively easy. Keep in mind, though, that you need Perl on the system of installation. The <B>swatch</B> executable itself is written in Perl. <B>swatch</B> comes with a Bourne shell installation script that can be invoked by typing in <B>sh install.sh</B>, and it also comes with a Perl installation script that can be invoked using <B>perl install.pl</B>. The script asks for some basic information, like the location where you want the program to be installed and the permissions on the program. Choose the default values given in square brackets, if you have no preference. You will, however, need to know the location of your Perl libraries. These normally reside in <B>/usr/local/lib/perl</B>. Installation places a <B>.swatchrc</B> file in the home directory of the user installing <B>swatch</B>. The <B>.swatchrc</B> file controls the behavior of <B>swatch</B>. The <B>.swatchrc </B>file consists of four tab-separated fields where one can specify the following: the pattern to look for in regular expression form, the action to perform when such a pattern is noticed, a third (optional) field of time interval within which if another such pattern is received <B>swatch</B> will not perform the action, and a fourth field (which is also optional) that specifies the location of the time stamp in the log message as well as the length of the time stamp.<p>
<pre>
# sample .swatchrc file
/file system full/ mail=root    10:00    0:15
</pre>
<p>
In the above example, <B>swatch</B> will mail root when it notices that a file system is full. It will not mail again if the same message appears within ten minutes, thereby giving you at least ten minutes to clean up. The 0:15 specifies the location of the time stamp (i.e., 0 and the length of the time stamp, 15).<p>
Pattern is specified through regular expression using <B>/pattern/</B>; action can be of seven types: <B>echo</B>, <B>bell</B>, <B>exec</B>, <B>ignore</B>, <B>mail</B>, <B>pipe</B>, and <B>write</B>. Time is specified in the format of either SS, MM:SS, or HH:MM:SS, and the fourth field in the format of start:length. The <B>man</B> page that comes with the distribution for <B>swatch</B> gives detailed information on configuring the <B>.swatchrc</B> file. Creating a run script for <B>swatch</B> would help in starting it each time the system boots.<p>
<B>swatch</B> can be obtained via <B>ftp</B> from:<p>
<pre>
ftp://coast.cs.purdue.edu/pub/mirrors/ftp.stanford.edu/swatch
</pre>
<p>
<b>Physical Security</b><p>Software-based security measures can be defeated if the server is physically not protected from unauthorized access. Cabinet and rack-mountable servers can offer some protection, but a server room with restricted key access is usually a better solution. Don't forget to apply the same diligence to monitoring physical security that you apply to software security tools, however. For example, if you have a touch-pad combination lock on the door, change the combination as frequently as you would a password. Also, make sure individuals with server-room access do not keep the door combination on a card in their Rolodex (or in a world-readable file on the server).<p>
<B>Conclusion</b><p>Keep in mind that the tools mentioned here may not be a complete solution to your security needs. Each tool by itself offers functionality that when combined with other tools offers reasonable security, but not necessarily complete security. For example, none of the above mentioned tools does packet filtering, which quite often is a required part of security measures.<p>
These tools also do not offer certain other features that may be desired in a modern security tool. An example would be a WWW-based interface to configuration, scalability across multiple platforms, distributed computing support, or a graphical user interface to configuration.<p>
The security tools I mentioned are free, so your only cost is the time spent installing them. However, these tools might not be the ideal solution for you organization if you are looking for commercial support. For example, if you use S/Key for logins into a firewall, and S/Key breaks, then your only support is the user community, including newsgroups, mailing lists, and IRC channels pertaining to the particular software. On the other hand, buying a commercial product with support does entitle you to support, which at times is needed. Additionally, any security tool that you install should be consistent with the security requirements of your particular environment, and ideally those requirements should be reflected in a formal security plan or architecture document. You can see, however, that it is possible to achieve a reasonable level of security at a minimal cost. <p>
<p>
<h1>About the Author</h1><p>
Syed Ali started his system administration career in 1996 after graduating from Rutgers University. Currently he is working for a major financial firm and can be reached at: alii@paul.rutgers.edu.<p>




<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>