<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i01:  Password Encryption in Shell Scripts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a8_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a8_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1999/jan99.tar"><b class=codeListing>jan99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Password Encryption in Shell Scripts</H1><P>
<P>Ed Schaefer
<p>
As a system administrator, have you ever desired a quick method for password protecting a shell script or other program? Although some UNIX variants provide the <B>crypt</B> utility, it's not typically part of a normal operating system release because of export restrictions. This article presents a utility named <B>coffin</B>, which, when included in a shell script, verifies a user-entered password before allowing program execution to continue.<p>
Coffin works like this: prompt the user for a password; execute <B>coffin</B> with the password as an argument. Sample the exit value of <B>coffin</B> and, if it is zero, continue executing or else terminate. Coffin, written in C, is a symmetrical key, CRC-checked, xor-based, ascii-encoded, encryption algorithm. Before investigating <B>coffin</B> further, let's define some terms as they will be used in this article:<br>
Plaintext - The message being hidden. (The message is a password in our case.)<br>
Ciphertext - The message in encrypted form.<br>
Encryption - The process or algorithm used to hide or change a message to ciphertext.<br>
Decryption - The process or algorithm used to turn ciphertext back to plaintext.<br>
Symmetrical key - The same mathematical key, a string of ascii characters, is used for encrypting as well as decrypting.<br>
ascii-encoded - The ciphertext stored in the <B>encrypt.fil</B> is guaranteed to be ascii and not binary.<p>
<B>Using Coffin</b><p>Before coffin can be used in a shell script, you must store the ciphertext password in the file <B>encrypt.fil</B>. The command to do so is:<p>
<pre>
coffin -e {password} {key}
</pre>
<p>
where the encryption flag is <B>-e</B>. The password to be encrypted and the symetrical key are the arguments password and key, respectively.<p>
Here is the pseudo-code:<br>
<ol>
<li>  Pass the password to encrypt and the symetrical key as arguments.
<li>  Obtain the CRC of the plaintext password.
<li>  Write the key to the file named <B>key.fil</B>.
<li>  Append the last five characters of the CRC to the end of the plaintext password.
<li>  Encode the plaintext to ciphertext with the <B>xor</B> function.
<li>  Change the ciphertext to ascii.
<li>  Write the resulting ciphertext to the file named <B>encrypt.fil</B>.</ol><p>
Listing 1, <B>new.ss</B>, is an example of Coffin in action. Prompt the user to enter a password. Execute coffin with the <B>-d</B> switch, passing the password. If the exit code equals zero, the shell script is run. If not, access is denied, and the shell script terminates.<p>
Listing 2, <B>snew.ss</B>, is a more professional sample script. This script replaces the shell "read" statement used in Listing 1 with a "C" program, <B>get_char</B>, which not only prompts the user to enter a password, but also turns off echoing characters to the screen.<p>
Listing 3 is the source to <B>get_char</B>. <B>get_char</B> is simply a "while" loop that calls a non-echoing function, <B>ret_char</B>, which returns one character until the carriage return is pressed or until a defined length is reached. The <B>ret_char</B> function source code is not included here, but was extensively covered in the April, 1997 issue of <I>Sys Admin</I> article, "Returning a Single Character in a UNIX Shell Script".<p>
To utilize coffin decrypt, the shell script executes:<p>
<pre>
coffin -d {$password}
</pre><p>
with the values for the password and key being extracted from the environment within the script.<p>
The password is decrypted in reverse order from encrypt:<p>
<ol>
<li>  Pass the password as an argument to decrypt.
<li>  Read the file named <B>encrypt.fil</B> to obtain the ciphertext password.
<li>  Read the file named <B>key.fil</B> to obtain the key.
<li>  Change the ciphertext password to ascii.
<li>  Decode the ciphertext password to plaintext (including the original CRC) with the <B>xor</B> function.
<li>  If the original CRC doesn't agree with the CRC of the plaintext password, send an error to the root user.
<li>  Set the exit code to zero if the password to check is the same as the plaintext password, or to one if it is not.</ol>
<p>
<B>Inside Coffin</b><p>The heart of coffin is the XOR mathematical function used to encrypt and decrypt the password. In his book, <I>Applied Cryptography</I>, Bruce Schneier describes the XOR algorithm as an "embarrassment". The amount of time needed or work factor for a trained cryptographer to break the algorithm is minimal.<p>
Although the simplicity of the XOR algorithm allows its use in this article, the most obvious enhancement to coffin would be an improved cryptographic algorithm. Most cryptographic algorithms are patented so their use is restricted. Also, the U.S. Government tightly controls the use and export of all things cryptographic. Other commercial algorithms such as DES, A5, SEAL, etc. could be used to replace XOR, with the appropriate license.<p>
The Cyclic Redundancy Check (CRC) warns the root user if someone has tampered with the <B>encrypt.fil</B>. When the password was encrypted, the CRC of the password was stored in the last five characters of the ciphertext. Strip off these last five characters, because they are the original CRC.<p>
When decrypting ciphertext, coffin strips off the last five characters of the plaintext and chnges them to an integer. It then computes the CRC of the plaintext minus the last five characters. If the computed CRC does not equal the orginal CRC, coffin alerts the root user with the <B>crc_error</B> function call and exits with an error code. Note, that except for the <B>crc_error</B> and <B>getuid</B> functions, coffin may be used with any non-UNIX operating system, which is why the <B>UNIX_SW</B> is used. For more information, see the sidebar on CRC.<p>
Originally, coffin was designed to read and write to a window's INI file, which required the ciphertext to be in ASCII. The functions used to convert to and from ASCII are modified versions of the UNIX utilities <B>uuencode</B> and <B>uudecode</B>.<p>
<B>Coffin Security</b><p>Without care, the coffin utility is susceptible to a possible Trojan horse. File permissions for coffin include the userid being set, which allows the <B>encrypt.fil</B> to be read only:<p>
<pre>
-r-s--s---  1 tmpusr   tmpusr  35124 Apr 23 19:26 coffin
-r--------  1 tmpusr   tmpusr     25 Apr 20 20:51 encrypt.fil
-r--------  1 tmpusr   tmpusr      8 Apr 20 20:51 key.fil
-rwx--x---  1 tmpusr   tmpusr  31716 Apr 23 19:39 get_char
-r-xr-x---  1 tmpusr   tmpusr    189 Apr 20 21:00 new.ss
-r-xr-x---  1 tmpusr   tmpusr    205 Apr 23 19:34 snew.ss
</pre><p>
Coffin only allows the encryption option to be executed by the root user.<p>
<B>References</b><p><I>Applied Cryptography: Protocols, algorithms, and source code in C</I> by Bruce Schneier. John Wiley &amp; Sons, 1996. 
<p>
<h1>About the Author</h1><p>
Ed Schaefer has been involved with UNIX since the mid 1980s. Presently, He is a senior programmer/analyst for Intel's Factory Information and Control System (iFICS) Group in Hillsboro, Oregon. His viewpoints on crytography or any other subject in no way reflects Intel's position. He can be reached at: olded@ix.netcom.com.




<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>