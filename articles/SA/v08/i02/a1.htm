<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i02: De-Spamming the Enterprise with Sendmail 8.9</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1999/feb99.tar"><b class=codeListing>feb99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>De-Spamming the Enterprise with Sendmail 8.9</H1><p>
<P>
Michael Schwager<P>
Unsolicited bulk email, or "spam" as it is not-so-lovingly referred to, is a growing problem in almost every organization. Spammers, the originators of such communications, daily spew forth thousands of messages advertising everything from the latest get-rich-quick scheme to pornography sites. Not only are such missives potentially offensive, they also consume significant system and people resources, if allowed past your email gateway. Thus, filtering spam has become an important element in systems administration. Running a UNIX system as your email gateway, however, provides you with one of the best spam-fighting tools around - Sendmail. In the January article, "Sendmail as Gatekeeper", I discussed the basics of what Sendmail does and how it accomplishes its tasks. It's time to look at our raison d'etre: Sendmail's anti-spam rulesets. This discussion covers Sendmail 8.9 and above.<p>
<B>Spam-Specific Rulesets</b><p>Sendmail, as you may recall, filters and redirects incoming email based on various rulesets and delivery methods. These rulesets provide a flexible and highly configurable method for processing incoming communications, and include the following techniques for de-spamming your machines:<p>

<table border=0 cellpadding=5 cellspacing=0>
<tr>
<td><U>Ruleset</U></td>		 <td><U>Purpose</U></td>
</tr>
<tr>
<td>
<B>check_relay</B></td>	 <td>Deny mail from clients found in Paul Vixie's Realtime Blackhole List.</td>
</tr>
<tr><td>
<B>check_mail</B></td>	 <td>Deny mail from known spamming email addresses in the envelope "From:", such as friend@public.com.</td>
</tr>
<tr><td>
<B>check_rcpt</B></td>	 <td>Deny mail based on the envelope "To: ". This ruleset is checked before Ruleset 0, and thus is preferred.
                                     Also, rules are included in this set to prevent relaying. If a connection
                                     comes from a host that is not in your domain, and the recipient is not destined
                                     for your domain, deny the mail.</td>
</tr>
<tr>
<td>Header Rules</td>		 <td>You can write rules based on the contents of any mail  message header, and deny
                                     it. In addition to patterns, you can also match regular expressions.</td>
</tr>
</table>
<p>
<B>Generate the Config File</b><p>Central to Sendmail's functionality is its so-called config file, <B>sendmail.cf</B>. To begin our quest to squelch spam, let's generate a config file, using Sendmail's <B>m4</B> method. As long as your version of <B>m4</B> is fairly modern, it should work. Check the README file in the <B>cf</B> subdirectory of the Sendmail install hierarchy for details about whose versions of <B>m4</B> are likely to fail, and where to get the latest GNU <B>m4</B> (which will surely work).<p>
<ol>
<li>  <B>cd</B> into the Sendmail hierarchy. When you extracted the Sendmail <B>tar</B> file, it should have created a subdirectory that looks like <B>sendmail-8.x.y</B>, where x and y represent the current release numbers. <B>cd</B> there.
<li>  <B>cd</B> to the <B>cf</B> subdirectory.
<li>  make a directory <B>../../Sendmail.inst</B> for Sendmail install.
<li>  execute: <B>tar cf - . | (cd ../../Sendmail.inst ; tar xf -)</B>
<li>  <B>cd ../../Sendmail.inst</B>
</ol>
<p>
Let's assume we're going to install Sendmail for a master mail server for the domain "antispam.com". All the hosts inside antispam.com send mail to this server, and from there through the firewall to the Internet. Antispam.com receives mail for all domains inside the antispam.com domain (i.e., for anything.antispam.com). I recommend installing Sendmail this way:<p>
  <ul>
  <li><B>mkdir Antispam</B> within the current (<B>Sendmail.inst</B>) directory
  <li><B>cd Antispam</B>
  <li>Create a file called "build" that contains:
  </ul>
  <p>
<pre>
  ###BEGIN###
  #!/bin/sh
  
  cp antispam.cf antispam.cf.old
  m4 ../m4/cf.m4 antispam.mc &gt; antispam.cf
  cp antispam.cf /usr/local/sendmail-r8.9/lib/sendmail.cf
  ###END###
 </pre>
 <p>
Later, if you are creating new configs for other hosts on this machine, comment out the last line. You don't want to overwrite a working config.<p>
  <ul>
  <li><B>chmod 755 build</B>
  </ul>
  <p>
Prepare <B>m4</B>:<p>
<ul>
  <li><B>cp ../domain/generic.m4 ../domain/antispam.m4</B>
  <li><B>ln -s ../domain/antispam.m4 antispam.m4</B>
  <li><B>ls ../ostype</B>, and choose the file that corresponds to your operating system type.
   <li>Edit <B>antispam-head.mc</B>, and include the following lines (Solaris 2 is shown):
</ul>

<p>
<PRE>
  ### BEGIN ###
  #
  #  This is taken from the  generic configuration file for SunOS 5.x
  #  (a.k.a. Solaris 2.x)
  #
  # The `DOMAIN' file is in ../domain... unfortunately, we can't group it
  # here with the other m4 files...
  divert(0)dnl
  VERSIONID(`@(#)antispam-solaris2.mc  8.8 (Berkeley) 5/19/98')
  OSTYPE(solaris2)dnl
  DOMAIN(antispam)dnl
  MAILER(local)dnl
  MAILER(smtp)dnl
  define(`confMAX_MESSAGE_SIZE', `5000000')dnl
  define(`confCHECKPOINT_INTERVAL', `5')dnl
  define(ANTISPAM_INSTALLDIR, `/opt/local/sendmail-r8.9')dnl
  define(`confCW_FILE', `ANTISPAM_INSTALLDIR/lib/sendmail.cw')dnl
  define(`confCR_FILE', `ANTISPAM_INSTALLDIR/databases/relay-domains')dnl
  define(`ALIAS_FILE', `ANTISPAM_INSTALLDIR/lib/aliases')dnl
  define(`HELP_FILE', `ANTISPAM_INSTALLDIR/lib/sendmail.hf')dnl
  define(`STATUS_FILE', `ANTISPAM_INSTALLDIR/lib/sendmail.st')dnl
  define(`confPRIVACY_FLAGS', \
    `authwarnings,noexpn,novrfy,noreceipts,restrictqrun')dnl
  define(`confSMTP_LOGIN_MSG', `[$j Your Greeting Here $b]')dnl
  define(`confRECEIVED_HEADER', `[$?sfrom $s $.$?_($?s$|from $.$_) $.by \
    $j (confCF_VERSION)$?r with $r$. id $i$?u for $u; $|; $.$b]')
  FEATURE(access_db, hash -o ANTISPAM_INSTALLDIR/databases/access.db)dnl
  FEATURE(blacklist_recipients)dnl
  divert(-1)
  The above changes the default for:
  FR-o /etc/mail/relay-domains
  O AliasFile=/etc/mail/aliases
  O HelpFile=/etc/mail/sendmail.hf
  O StatusFile=/etc/mail/sendmail.st
  divert(0)dnl
  #
  define(`MAILER_TABLE', \
    `hash ANTISPAM_INSTALLDIR/databases/mailertable.db')dnl
  ### END ###
</PRE>

  <p>
  We will be able to reuse this header file not only on Internet mail relays, but also on internal machines. The information inside the file should be constant across our configurations.<p>
  <ul>
  <li>Create your file <B>antispam.mc</B>. This is the <B>m4</B> file upon which we'll build (see the <B>antispam.mc</B> file available at the <I>Sys Admin</I> Web site: <B>www.samag.com</B> or <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>).
  </ul>
  <p>
<B>m4 Background</b><p>Remember that our command is:<p>
<pre>
m4 ../m4/cf.m4 antispam.mc &gt; antispam.cf
</pre>
<p>
The purpose of <B>m4</B> is to replace text with other text (e.g., the define's listed above). Here, it opens the <B>../m4/cf.m4 file</B>, which figures out where we are in the filesystem and sets the <B>_CF_DIR_</B> macro so that other <B>m4</B> files will be able to find files they need to include. It calls the <B>cfhead.m4</B> file, which defines lots of options and sets up basic <B>m4</B> diversions. <B>cfhead.m4</B> calls <B>proto.m4</B>, which contains most of the rulesets. <B>m4</B>'s output is the text found among the commands in the <B>m4</B> file after it has completed all the replacements.<p>
A special note about diversions: I found <B>m4</B> diversions confusing, but they are really like placeholders. They say, "This is slot X. When I say 'undivert X', output whatever text you have been storing in that slot." Diversions 1-9 are possible. Diversion 0 is basically a default, since it brings you back to normal output. Diverting to anything other than 0-9 discards the text. This is why you'll see a lot of <B>divert(-1)</B> in the <B>m4</B> macro files. Using an illegal diversion buffer is a way of including comments.<p>
You can find more information about <B>m4</B> by doing a <B>man m4</B>, but for any serious <B>m4</B> work, you may find the man pages sparse. A good introduction to <B>m4</B> is hard to find, but Sun's Answerbook contains some useful information in the Programming Utilities section. The Info files for <B>m4</B> from the GNU distribution are very informative as well.<p>
<B>Sendmail's Databases</b><p>We're almost ready to try out our initial Sendmail config file. Before that, though, Sendmail needs some database files to do its work. The files needed with our current configuration and their type are:<p>

<table border=0 cellpadding=3 cellspacing=0>
<tr><td><U>Pathname</U></td><td><U>Type</U></td></tr>
<td><pre>/usr/local/sendmail-r8.9/lib/sendmail.cw</pre></td>             <td><pre>text</td></pre></tr>
<td><pre>/usr/local/sendmail-r8.9/databases/relay-domains</pre></td>        <td><pre>text</pre></td></tr>
<td><pre>/usr/local/sendmail-r8.9/databases/mailertable.db </pre></td>      <td><pre>hash</pre></td></tr>
<td><pre>/usr/local/sendmail-r8.9/databases/access.db</pre> </td>           <td><pre>hash</pre></td></tr>
<td><pre>/usr/local/sendmail-r8.9/lib/aliases </pre></td>                   <td><pre>hash</pre></td></tr>
</table>
<p>
Files that you can create for Sendmail, but which will not be discussed here, include:<p>
<table border=0 cellpadding=3 cellspacing=0>
<tr><td><pre>/usr/local/sendmail-r8.9/lib/sendmail.hf          </pre></td><td><pre>text</pre></td></tr>
<tr><td><pre>/usr/local/sendmail-r8.9/lib/sendmail.st          </pre></td><td><pre>text</pre></td></tr>
</table>
<p>
File Descriptions<p>
<b>sendmail.cw</B> - The <B>sendmail.cw</B> file is useful if you receive mail for a domain name other than your own. For example, say our domain is antispam.com. We receive mail for ouch.com. In this case, we would want the <B>sendmail.cw</B> file to contain simply:<p>
<pre>
ouch.com
</pre>
<p>
Other domains can be added, one line at a time. We won't work with this file here, but since Sendmail includes it by default in the <B>domain/generic.m4</B> file, create a 0-length file for now:<p>
<pre>
touch /usr/local/sendmail-r8.9/lib/sendmail.cw .
</pre>
<P>
<B>relay-domains</B> - This file is somewhat related to the <B>sendmail.cw</B> file. In this file, you would include the domain names of hosts that are allowed to relay mail through you. For example, ouch.com sends mail to the Internet through antispam.com. Normally, we would not want this to happen, because we don't want people outside our domain to be able to relay through us to the Internet. However, since we are hosting ouch.com, we will make an exception. This file would contain that information. For right now, let's make that an empty file as well:<p>
<pre>
touch /usr/local/sendmail-r8.9/databases/relay-domains .
</pre>
<p>
<b>mailertable.db</B> - This file is used to "override routing for particular domains," in the words of Eric Allman. This means, for example, that mail destined for ouch.com arrives at our antispam.com mail relay machine. If we have an entry like the following in the mailertable:<p>
<pre>
ouch.com      esmtp:internal.antispam.com
</pre>
<p>
then whenever mail arrives destined for the ouch.com domain, our server will in turn connect to internal.antispam.com for further delivery. Let's create a mailertable file containing just that information. Use your favorite text editor to create the file and include the aforementioned text. Spaces or tabs separate the two fields. After editing, you need to build the database; I recommend creating a script that will renew all the databases that we'll be working with. Here is the script:<p>
<pre>
### BEGIN
#!/bin/sh

PATH=$PATH:/usr/local/sendmail-r8.9/bin ; export PATH

cd /usr/local/sendmail-r8.9/databases
makemap hash mailertable.db &lt; mailertable
makemap hash access.db &lt; access
newaliases
### END
</pre>
<p>
I'll call it <B>mkdbs</B>. Don't forget to make it executable.<p>
<B>access.db</B> - The access database is the core of the anti-spam capabilities of Sendmail 8.9 and above (as of this writing). The access database will contain all sorts of entries dealing with allowing or denying mail from and to hosts, domains, or usernames. The access database looks like this:<p>
<pre>
###BEGIN


     cyberspammer.com        550 We don't accept mail from spammers
     okay.cyberspammer.com   OK
     sendmail.org            OK
     192.168.0               RELAY
     myfriend@ REJECT
     friend@public.com       REJECT
     slammer@                "550 Envelope Mail address rejected.
                             See http://www.antispam.com"
###END
</pre>
<p>
User your favorite editor to create the access file.<p>
The access database has a key and a value like the mailertable. This time the key is a host, domain name, or username. The following table describes the values; I am quoting verbatim from the README file in Sendmail's <B>cf</B> directory:<p>
<B>OK</B>	 Accept mail even if other rules in the running ruleset would reject it.<p>
<B>RELAY</B>	 Allow domain to relay through your SMTP server. <B>RELAY</B> also serves an implicit OK for the other checks.<p>
<B>REJECT</B>	 Reject the sender/recipient with a general purpose message.<p>
<B>DISCARD</B>	 Discard the message completely using the <B>$#discard</B> mailer.<p>
<B>### any text</B>	 Where <B>###</B> is an RFC 821 compliant error code, and "any text" is a message to return for the command.<p>
You can see that <B>RELAY</B> duplicates the work of the <B>relay-domains</B> file, with one exception. The access database is used in the <B>check_mail ruleset</B> and the <B>relay-domains</B> file is not. Normally this will not be of any concern.<p>
<B>aliases</B> - This is the usual Sendmail aliases file. Create a skeleton aliases file or copy your existing one to that file. For our purposes, we won't discuss it. Here is a simple aliases file:<p>
<pre>
###BEGIN
##
#  Aliases can have any mix of upper and lower case on the left-hand side,
#     but the right-hand side should be proper case (usually lower)
#
#     &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;      The program "newaliases" will need to be run after
#     &gt;&gt; NOTE &gt;&gt;      this file is updated for any changes to
#     &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;      show through to sendmail.
##

# Following alias is required by the mail protocol, RFC 822
# Set it to the address of a HUMAN who deals with this system's mail
# problems.
Postmaster: yournamehere

# Alias for mailer daemon; returned messages from our MAILER-DAEMON
# should be routed to our local Postmaster.
MAILER-DAEMON: postmaster

# Aliases to handle mail to programs or files, eg news or vacation
# decode: "|/usr/bin/uudecode"
nobody: /dev/null

#######################
# Local aliases below #
#######################

###END
</pre>
<p>
Now that we have all the files we need, run the <B>build</B> script that you created earlier, then run the <B>mkdbs</B> script. Fix any errors that may come up. One possible error is that Sendmail may complain:<p>
<pre>
/etc/sendmail.cf: line 102: fileclass: cannot open \<br>  /usr/local/sendmail-r8.9/lib/sendmail.cw: Group writable directory
</pre>
<p>
This is Sendmail helping you make your host more secure. The fix is to <B>chmod g-w</B> every subdirectory in that hierarchy. For example:<p>
<pre>
chmod g-w /usr
chmod g-w /usr/local
chmod g-w /usr/local/sendmail-r8.9
chmod g-w /usr/local/sendmail-r8.9/lib
</pre>
<p>
If any of these are links to another directory, <B>makemap</B> will complain. You will have to go back and edit the <B>antispam-head.mc</B> file and change the <B>ANTISPAM_INSTALLDIR</B> so that the directory hierarchy contains no symlinks. The problem arises because a symlink will show permissions for everybody.<p>
Now we have installed Sendmail, and we have rudimentary anti-spam measures. As of this moment, we have:<p>
<p>
The <B>check_mail</B> ruleset:<p>
<ul>
  <li>Disallows mail from parties who use hostnames in the envelope<br>
      address (i.e., during "MAIL From:" in the SMTP conversation) that are<br>
      not found in DNS. Remember, all "From:" addresses can be forged.
  <li>Disallows mail from parties who do not use hostnames in the envelope address.
  <li>Disallows mail from senders/domainnames/hostnames that you may have entered into the access database.
</ul>
<p>
The <B>check_rcpt</B> ruleset:<p>
  <ul>
  <li>Disallows relaying through our host. Mail that comes from a machine not located in our domain had better be going to an address within our domain, or we will assume we're being hijacked. We can specifically allow hosts to relay through us by using the access database.
  <li>Disallows mail to recipients that we may have entered into the access database.
</ul>
<p>
The <B>check_relay</B> ruleset:<p>
  <ul>
  <li>Is run just as soon as the client connects to our mail host.
  <li>Looks up connecting host's hostname and/or IP address in the access database to allow or disallow connections.
  <li>Is used by the RBL (see below).
  </ul>
  <p>
<B>Testing, Testing</b><p>Make sure all database files and the aliases file are created as described earlier. Run the <B>mkdbs</B> script; as long as it exits without error, we should be ready to run. There are two ways to test Sendmail. The first is to use it in "address test mode". This can be useful if you don't have a machine to play with. You can safely run Sendmail off to the side without affecting current mail processing. However, it's not a real-world test. A more rigorous test would be to run Sendmail on your machine.<p>
<B>Address Test Mode</b><p>Address test mode goes like this. Type:<p>
<pre>
/usr/lib/sendmail -bt
</pre>
<p>
If you want to see the operation of the rulesets in detail, type:<p>
<pre>
/usr/lib/sendmail -bt -d21.4 -d21.12
</pre>
<p>
Use the correct pathname if <B>/usr/lib</B> is incorrect. At this point, Sendmail responds with:<p>
<pre>
WARNING: Ruleset Local_check_mail has multiple definitions
WARNING: Ruleset Local_check_rcpt has multiple definitions
ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)
Enter &lt;ruleset&gt; &lt;address&gt;
&gt;
</pre>
<p>
Ignore those warnings; they will not affect the operation or anti-spam capabilities of Sendmail in any way.<p>
Address test mode is similar to a debugging mode. The idea is that you supply a ruleset and an address, and Sendmail runs the address through the given ruleset. It shows you what it is doing as it operates on an address. For example, try:<p>
<pre>
check_mail &lt;schwager@cyberspammer.com&gt;
</pre>
<p>
Sendmail will reject this spammer; the last line should say:<p>
<pre>
rewrite: ruleset 184 returns: $# error $@ 5 . 7 . 1 $: 550 We don't \
  accept mail from spammers.
</pre>
<p>
Try some other addresses in the access database and observe address test mode in action. To exit address test mode, type a control-D at the prompt.<p>
Address test mode can be tricky to use. For example, the <B>client_name</B> macro can affect operation of some of the rulesets, but in address test mode it's undefined.<p>
To test Sendmail more realistically, we can run it and talk to it through port 25. If the machine you're testing on is not currently being used for mail processing, run the newly compiled Sendmail:<p>
<pre>
/usr/lib/sendmail -bD
</pre>
<p>
The <B>-bD</B> keeps it in the foreground and makes it easy to kill in your terminal window with a control-C.<p>
Find another machine that you can use for running <B>telnet</B>. Now <B>telnet</B> into port 25 of the machine running this Sendmail:<p>
<pre>
telnet hostname.antispam.com 25
</pre>
<p>
You should see a greeting message, like:<p>
<pre>
220 [hostname.antispam.com ESMTP Antispam Mailer Tue, 05 Nov 1998 \
  14:29:01 -0500 (CDT)]
</pre>
<p>
Now say hello with <B>helo</B>:<p>
<pre>
helo localhost
</pre>
<p>
It will reply back with a message beginning with "250". Let's test our anti-relay rules. Send it the following two lines:<p>
<pre>
mail from: &lt;schwager@antispam.com&gt;
rcpt to: &lt;noone@somewhereindns.com&gt;
</pre>
<p>
The mail addresses should contain valid domain names. You will see:<p>
<pre>
550 &lt;noone@somewhereindns.com&gt;... Relaying denied
</pre>
<p>
Type <B>quit</B> to exit. Note that our local domain "antispam.com" was given, yet we were still denied. This is because right now the <B>check_rcpt</B> ruleset denies mail from any host connecting to our machine if it's destined for outside our domain. Try connecting to port 25 of our anti-spam test machine from itself, and executing the same SMTP conversation. It will not fail.<p>
To fix this, we put our domain name in the <B>relay-domains</B> file. I look at the <B>relay-domains</B> file as a short, static list of our local domain and other domains we may relay for. The access database can be used for the same purpose, but that file will likely get cluttered over time. So, put the local domain in the <B>relay-domains</B> file; for example:<p>
<pre>
antispam.com
</pre>
<p>
Kill and restart Sendmail, then <B>telnet</B> in from another host and rerun the previous test. It should now work; after the "rcpt to:", Sendmail will say:<p>
<pre>
250 &lt;noone@somewhereindns.com&gt;... Recipient ok
</pre>
<p>
Try some other things; for example you might try:<p>
<pre>
mail from: &lt;friend@public.com&gt;
</pre>
<p>
Sendmail will say,<p>
<pre>
550 &lt;friend@public.com&gt;... Access denied
</pre>
<p>
If you put this in the "rcpt to:" section, Sendmail says:<p>
<pre>
550 &lt;friend@public.com&gt;... Mailbox disabled \
                           for this recipient
</pre>
<p>
The <B>check_rcpt</B> ruleset checked the access database and found the entry. Because we do not want to receive from friend@public.com, we also cannot send to friend@public.com; the access database does not discriminate.<p>
<B>The RBL</b><p>Unless the spammer bends the rules, we will get spammed even using the <B>check_mail</B> and <B>check_rcpt</B> rulesets. Often the problem lies in the fact that we have to see spam to block spam. However, it is possible to be more proactive.<p>
Paul Vixie, a long-time Internet guru, began a service that allows you to reject spam before it reaches your site. Here's how it works:<p>
In the Sendmail config file, rules in the <B>check_relay</B> ruleset check the identity of the connecting client. Sendmail looks up the client's IP address on Vixie's DNS servers. If it gets a affirmative response, Sendmail will reject the connection. The service is known as the Mail Abuse Protection System Realtime Blackhole List (or MAPS RBL, or just RBL).<p>
The RBL is turned on by a line near the beginning of your <B>antispam.mc</B> file; the <B>FEATURE(rbl)</B>. I highly recommend you leave it in.<p>
<B>Summary</b><p>Congratulations! You now have a potent weapon in the war against spam. Next month, we'll conclude this Sendmail series with a discussion of more proactive approaches to dealing with the problem of spam. Be sure to check the <I>Sys Admin </I>Web site (<B>www.samag.com</B>) this month for more details about how spammers spam, a detailed look at Sendmail's anti-spamming rulesets, the config files mentioned in the article, and a bibliography of anti-spam resources. 

<H1>About the Author</H1><p>
<P>
Mike Schwager is a contractor specializing in UNIX and the Internet.
He has spent the past 15 years writing C and Perl code, shell scripts,
and maintaining systems in the corporate and educational environments.
Email him at Michael@Schwager.com or visit http://come.to/lanicservices.

<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>