<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i04: Painless AIX</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1999/apr99.tar"><b class=codeListing>apr99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Painless AIX</H1><p>
<P>John E. Canavan
<P>
For the novice system administrator or someone just learning UNIX, the topic of AIX system security can be somewhat intimidating. AIX is such a robust, but complex, operating system that it takes time to fully comprehend its capabilities and inner workings. However, there are measures that even the beginning administrator can take to strengthen the security of any AIX system. Because of AIX's unique design, many of these measures are easily implemented and don't require a great deal of knowledge. The measures described below are rudimentary and are not to be considered all-inclusive, but they are a good starting point.<p>
<B>Restricting Root</b><p>One of the things that system administrators fear most is a cracker gaining root access to a system over the network. AIX's design makes it very easy to prevent this. This is done through the AIX System Management Interface Tool (SMIT). SMIT allows users to perform system administration and management commands without having to know the command-line syntax. Using the SMIT interface (which is a hierarchy of menus) information is entered into several options. The dialog then executes a shell script to perform the system management function. With SMIT, you can assign attributes that control the environment for a particular account, when it logs into the system. For example, by using SMIT you can restrict the ability of an account to <B>rlogin</B> or <B>su</B>. You can also prevent someone from gaining access over the network to accounts such as root by restricting the ability to log into the root account to specific devices.<p>
Using the SMIT utility, you can restrict the root account to specific tty devices. The steps to restrict the root account are as follows:<p>
<ol>
<li>Go into SMIT by typing in the command <B>smit</B>.
<li>Select the "Security &amp; Users" option.
<li>Select the "Users" option.
<li>Select "Change/Show Characteristics of a User".
</ol>
<p>
You will then need to provide an account name. Enter the account name <B>root</B>. A menu listing will then display the attributes of the root account. Arrow down the list until you reach the attribute Valid TTYs. In the field to the right, you would enter the valid ttys for the root account. For example, <B>/dev/tty0,/dev/tty1</B> could be entered in the field. That would require anyone who wanted to log into the root account to use either tty0 or tty1. Once you have entered the tty devices that you wish to restrict the root logins to, press F10 to exit.<p>
By restricting the root account in this way, even if someone had access to root's password, they could not login to the root account if they didn't have physical access to the specific tty devices. They certainly couldn't login over a network connection. Restricting the root account to specific tty devices also prevents someone from using the <B>su</B> command to switch to the root account. One of the nice things about this configuration is that if someone tries to login to the root account over the network, they won't get any descriptive error message. It will simply appear as if they've entered an incorrect password.<p>
There is a tradeoff here between convenience and security. Restricting root login to specific tty devices means you must have a serial connection to those devices. This can be an inconvenience if you are not at one of those specified devices and you need root access to your system. However, I think the fact that no one else can get root access to the system without access to those specific devices is a security measure worth the inconvenience.<p>
<B>failedlogin File</b><p>Another simple measure you can take is monitoring the <B>failedlogin</B> log file that normally resides in the <B>/etc/security</B> directory. This log will display every failed attempt to log into the system. The log also shows the device type of the attempted connection, so you can tell whether it was from a tty or over the network. This may alert you to the first indications of someone probing your system. If the attempted login was over the network, the log also displays the IP address from which the connection originated.<p>
Some system administrators question the wisdom of using the <B>failedlogin</B> log file feature. They believe that the log file may inadvertently record the password for an account, if the account name and password are entered out of sequence. This is a possibility, but in practice I have never known it to be an issue.<p>
It is a good idea to print the <B>failedlogin</B> log file every day for review, then clear the log file after printing. This can be set up automatically in the <B>crontab</B>. The <B>crontab</B> can be set up to run a script file that would look something like:<p>
<pre>
string /etc/security/failedlogin &gt; /dev/lp0
rm /etc/security/failedlogin
touch /etc/security/failedlogin
chmod 666 /etc/security/failedlogin
</pre>
<p>In this example, starting with the first line, the <B>failedlogin</B> log file is printed using the <B>string</B> command on the log file and redirecting it to a line printer device at <B>/dev/lp0</B>. The log file is deleted using the <B>rm</B> command and then recreated using the <B>touch</B> command. Finally, the permissions for the file are changed, so that all processes can write to it.<p>
The printout from the log file would look something like this:<p>
<pre>
bernie
pts/16
124.34.45.132
UNKNOWN
tty5
UNKNOWN
pts/23
124.34.45.206
</pre>
<p>
In the above example, there are three entries in the log file. The first one is for the account bernie, originating from IP address 124.34.45.123. Since it is a network connection, it has a pseudo device number (pts/16). For the next entry, the account is unknown, and it came from device tty5, which is a physical device on the system. The next entry is again a network connection, and it originated from IP address 124.34.45.206.<p>
If you have multiple entries for a single account, it may be an indication that something is wrong. If you have unfamiliar IP addresses attempting to connect to your system, that is also something that should be investigated. They both could be indications that someone is probing your system.<p>
<B>The sulog</b><p>Another useful log to review regularly is the <B>sulog</B>. Like most versions of UNIX, AIX records failed attempts to spawn another process and switch to another user with the <B>su</B> command. This is recorded in the <B>sulog</B> log file. Entries in this log file may be from someone who is probing your system and attempting to gain privileged access. Any entry in this log should be investigated to determine whether it is legitimate. The contents of the <B>sulog</B> would look something like the following:<p>
<pre>
SU      04/10        15:06 - tty1/0 oper1 - root
</pre>
<p>
In this example, the log shows that the account "oper1" attempted to <B>su</B> to root at 3:06 p.m. on April 10. In this case, it may not be unusual for the operator to <B>su</B> to root. If however, the log shows someone attempting to <B>su</B> to root who should not be attempting such a function, you should investigate the occurrence. You should also investigate if you see an account in the log with multiple consecutive entries.<p>
The printing of the <B>sulog</B> log file can also be automated. The <B>crontab</B> could be set up to run a script file that prints the <B>sulog</B> every night. The script file could be set up as follows:<p>
<pre>
cat /usr/adm/sulog &gt; /dev/lp0
rm /usr/adm/sulog
touch /usr/adm/sulog
</pre>
In the above example, the <B>sulog</B> log file is printed by using the <B>cat</B> command to redirect the log file to the printer device at <B>/dev/lp0</B>. The file is then cleared out by deleting it with the <B>rm</B> command and recreated using the <B>touch</B> command.<p>
<B>The wtmp File</b><p>Another useful log is the <B>wtmp</B> log. This file records information for every account that logs in and out of your system. It gives you the time and duration of the login. You can also determine whether the connection was from a tty, <B>telnet</B>, or <B>rlogin</B> connection, or was an <B>ftp</B> connection. I find the fact that it distinguishes <B>telnet</B> and <B>rlogin</B> connections from <B>ftp</B> connections to be very useful. In the environment where I work, almost no one should be connecting to our systems using <B>ftp</B>. As a result, when an <B>ftp </B>connection shows up on the log, it stands out as an item to be investigated.<p>
For network connections, the <B>wtmp</B> log file will also display the IP address from which the connection originated. That too can be very useful for tracking down the individual responsible for the connection. The <B>wtmp</B> file is stored in a binary format. Thus, you must use the <B>last</B> command to display its contents. Below is an example of a typical <B>wtmp</B> printout using the <B>last</B> command:<p>
<pre>
bernie  pts/20  124.35.46.132   Mon Apr 13 14:30 - 16:29 (01:59)
oper2   ftp/31  124.35.46.205   Mon Apr 13 14:30 - 16:29 (01:59)
oper1   pts/54  124.35.46.206   Mon Apr 13 14:35 - 14:45 (00:10)
sally   tty3                    Mon Apr 13 15:30 -16:25 (00:55)
frank   pts/18  124.35.46.184   Mon Apr 13 14:18 -14:39 (00:21)
</pre>
<p>
Four of the entries in this example are network connections that list IP addresses. The fifth is from a tty connection, so there is no IP address listed. One of the four network connections (oper2) used <B>ftp</B>. You can tell that by the device type (ftp/31).<p>
Printing of the <B>wtmp</B> can be automated in the <B>crontab</B> file as follows:<p>
<pre>
last &gt; /dev/lp0
</pre>
<p>
The <B>wtmp</B> file will continue to grow if it is not periodically cleared out. I generally print the file every day, and clear it once a week. I recommend retaining hard copy printouts of the <B>wtmp</B> file in the event they are ever needed to determine when a particular account last accessed your system. This can be useful information if your system is ever compromised.<p>
<B>Using the Profile</b><p>Since the <B>wtmp</B> log resides on the system's disk storage, it is possible that if someone were to gain privileged access to your system, they could alter the <B>wtmp</B> file. As an alternative or in conjunction with the <B>wtmp</B> log, you can use a <B>who am I</B> command in the system-wide <B>/etc/profile</B> file to print an entry whenever someone logs into the system.<p>
The system-wide <B>/etc/profile</B> usually executes whenever someone logs into the system. There are a few exceptions such as <B>ftp</B> connections. Putting a <B>who am I</B> statement in <B>/etc/profile</B>, that redirects its output to a printer device, will give you a real-time hard copy log that can not be altered or circumvented. Placing the statement in <B>/etc/profile</B> is simple using <B>vi</B>. Simply edit the <B>/etc/profile</B> file and insert the statement:<p>
<pre>
who am I &gt; /dev/tty10
</pre>
<p>
Typically, the printout will be as follows:<p>
<pre>
bernie   pts/20  Apr 13 14:30    124.35.46.132
oper1    pts/54  Apr 13 14:35    124.35.46.206
sally    tty3    Apr 13 15:30
frank    pts/18  Apr 13 14:18    124.35.46.184
</pre>
<p>
The <B>who am I</B> command statement displays much the same information as the <B>wtmp</B> file. The major difference is that <B>who am I</B> only shows the login time and not the logout and duration of the connection. One word of caution, if the printer device you specify in the redirect of <B>who am I</B> statement is out of paper, jammed, or offline, your users may not be able to login.<p>
I maintain hard copy printouts from both the <B>wtmp</B> log and the <B>who am I</B> statement in <B>/etc/profile</B>.<p>
<B>Using the Hosts File</b><p>If you work in an environment where your system is on a relatively large network (several hundred nodes or more), but only a limited number of specific users should be accessing your system, you can use the <B>/etc/hosts</B> file to distinguish the legitimate connections from those that may be probing your system. This will only work for users who connect to the system over an IP network using <B>ftp</B>, <B>telnet</B>, <B>rlogin</B>, or some other remote terminal IP session, but can still be very useful.<p>
Where I work, there are thousands of systems and users on a corporate network, but only about a hundred have a legitimate reason to be accessing the systems for which my group is responsible. We have used the <B>/etc/hosts</B> file to make it easier to distinguish the IP addresses of possible intruders from the IP addresses of our legitimate users. You can do this by adding an entry into the <B>/etc/hosts</B> file for each system that is authorized to connect to your system. Each system entry will include the IP address and the alias for the system. Below is an example of what the <B>/etc/hosts</B> file entries might look like for the IP addresses used in the log file examples above.<p>
<pre>
124.35.46.132   STATION1
124.35.46.105   ADMIN2
124.35.46.206   ADMIN1
124.35.46.184   STATION2
</pre>
<p>
Including these entries in the <B>/etc/hosts</B> file will change the information displayed on the <B>failedlogin</B> file, the <B>sulog</B>, the <B>wtmp</B> file, and the printout from the <B>who am I</B> command in the <B>/etc/profile</B> file.<p>
If a system with an entry in the <B>/etc/hosts</B> file shows up in the <B>failedlogin</B> log file, it will display with its alias where the IP address would be.<p>
Below are two examples of the <B>failedlogin</B> log file. On the left, is an example of what the log would look like without the entries in the <B>/etc/hosts</B> file. On the right, is an example of the log with the entries in the <B>/etc/hosts</B> file. For the right-hand example, there is an entry in the <B>/etc/hosts</B> file for IP address 124.35.46.132, so the alias displays in the log file instead of the IP address. Since there is no entry on the hosts file for IP address 124.35.46.205, the IP address displays on the log printout. This makes it very easy to distinguish known IP addresses from unknown intruders.<p>
<pre>
bernie                 bernie
pts/16                 pts/16
124.34.45.132          STATION1
unknown                unknown
tty5                   tty5
unknown                unknown
pts/23                 pts/23
124.35.46.205          124.34.45.205
</pre>
<p>Below is an example of what the <B>wtmp</B> file might look like with the entries in the <B>/etc/hosts</B> file.<p>
<pre>
bernie  pts/20  STATION1        Mon Apr 13 14:30 - 16:29 (01:59)
oper2   ftp/31  124.35.46.205   Mon Apr 13 14:30 - 16:29 (01:59)
oper1   pts/54  ADMIN1          Mon Apr 13 14:35 - 14:45 (00:10)
sally   tty3                    Mon Apr 13 15:30 -16:25   (00:55)
frank   pts/18  STATION2        Mon Apr 13 14:18 -14:39   (00:21)
</pre>
<p>For IP addresses loaded in the hosts file with aliases, the aliases show in the log in place of the IP address. Thus, when you do see an IP address in your log, you know it came from a system that does not normally connect to your system.<p>
Below is a sample printout from the <B>who am I</B> command in <B>/etc/profile</B>. Again, the IP address for the system without an entry in the hosts file stands out.<p>
<pre>
bernie  pts/20  Apr 13 14:30    STATION1
oper1   pts/54  Apr 13 14:35    ADMIN1
sally   tty3    Apr 13 15:30
John    pts/33  Apr 13 15:33    146.35.48.145
frank   pts/18  Apr 13 14:18    STATION2
</pre>
<p>This is not fool proof; it can be circumvented by IP spoofing.<p>
Obviously, this scheme will not work in an environment where you are using DHCP. It is not scalable, because it becomes difficult to manage with large numbers of entries. It only works well with a limited number of systems, say 100 or 200. If a hacker gets your <B>/etc/hosts</B> file, they will be able to get the IP addresses of the other systems. However, if they've gotten the <B>/etc/hosts</B> file, they already have access to your system, so you have already been compromised.<p>
<B>Conclusion</b><p>All the measures described above are preliminary measures toward securing and monitoring your system. As stated previously, these are just rudimentary steps. These have helped us identify when our systems were being probed by another system on the corporate network. We have also taken other measures to safeguard and firewall our systems. You must determine which measures are necessary for your system, based upon your environment. These measures are no substitute for a firewall, but having a firewall is no excuse for not monitoring your system. If your systems are in an environment where the network is potentially hostile, then additional measures are certainly in order. Consider using some of the tools that are available on the Web, such as the TCPwrapper program. This is a program that allows you much more control over services and a greater capability to log events.<p>
Even if your system sits on a secure or trusted network or behind a firewall, you should secure and monitor your system. Network security begins at the individual system level. You have no idea if the next system administrator down the line is doing their job properly. They could be hanging dial-up connections off their system without proper security measures. A network is only as secure as the individual systems on that network.<p>
Listed below are some Web sites that are good resources for AIX information.<p>
<p>
Institute of Theoretical Physics's AIX Newsgroup Archive at the University of Duisburg (Germany) at:<p>
<pre>
http://www.thp.uni-duisburg.de/cuaix/cuaix.html
</pre>
<p>This site is very useful because it gives you the ability to easily search the archives using topics or key words.<p>
A good site with precompiled binaries for AIX 3.xx and 4.xx is UCLA's AIX Public Domain Software Library. It can be found at:<p>
<pre>
http://aixpdslib.seas.ucla.edu/aixpdslib.html
</pre>
<p>Emory University's Emerson Center for Scientific Computation AIX FAQs at:<p>
<pre>
http://euch6h.chem.emory.edu/services/aix-faq/
</pre>
<p>Ohio State University's AIX FAQ at:<p>
<pre>
http://www.cis.ohio-state.edu/hypertext/faq/usenet/aix-faq/top.html
</pre>
<p>
<h1>About the Author</h1><p>
John Canavan works at Chevron Federal Credit Union where he is responsible for directing the financial institution's information technology unit. He can be reached via email at: jcnv@chevron.com.




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>