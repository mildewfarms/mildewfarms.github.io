<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i11: Log File Event Management with Waldo</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/1999/nov99.tar"><b class=codeListing>nov99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Log File Event Management with Waldo</H1><p>
<P>Joe Aguiar
<P>
A common problem for systems administrators is the efficient  identification and prioritization of problems as they occur on a variety of platforms across a network. A popular tool used for this purpose is the UNIX <B>syslog</B> utility. By feeding messages from multiple services into <B>syslog</B> (<B>inetd</B>, <B>snmp</B> <B>traps</B>, etc.) and forwarding messages to one or more platforms acting as a centralized <B>syslog</B> console, the systems administrator can monitor the health of the network from a single point.<P>
If the site is large or very busy, the number of log messages can quickly become overwhelming. The problem now becomes:<P>
<P>
&#149;  How can the truly serious problems be identified and the proper sys admin notified?<P>
&#149; How can appropriate action be taken automatically?<P>
&#149; How can redundant notices or actions be avoided?<P>
&#149;  How can each sys admin monitor messages according to responsibility?<P>
<P>
There are a number of commercial applications as well as a few publicly available tools that can accomplish these things. This article describes how an application called Waldo was developed using open source tools (Perl, Tcl/Tk, flex, gcc) to accomplish these goals at one site.<P>
<B>A Solution</b><p>Waldo is a Perl application that uses regular expressions to identify events and to execute an action associated with the event. The action may be the execution of any script or program that the uid of the user has privilege to execute. In fact, action can be a semicolon- separated list of actions to be taken in sequence. Waldo provides no predefined actions -- only those specifically defined by the user may be executed. It is therefore a simple matter to integrate existing email notification, pager scripts, and the like.<P>
Waldo uses an anomaly file to associate the occurrence of an event with some action, be it corrective, informative, or otherwise. Each record that Waldo reads from the specified log file is represented by the symbol, <B>LINE</B>, in the anomaly file. This may be used as part of the specified action or passed to another program or script as a parameter if desired.<P>
The anomaly file is a four-field data file with each column separated by two colons (::). The first column contains the regular expression or search string that identifies an event (e.g., file system full). The second column is the Waldo id, which is a unique three-digit decimal number that the user chooses to identify the event. The third column is the acknowledgment timer. This is expressed in minutes and represents the time period during which this action will not be executed again, even if the event recurs. The fourth and last column is the action to be performed. A sample anomaly file is shown below:<P>
<PRE>
#       Filename:       /var/log/anomalies
#       Date:           12/29/98
#       Descr:  Sample use of anomaly file
#
###############################################################
# Look for log messages with a kernel tag.  Use cron job to
# mail file at later time.
#
kernel::001::0:: echo LINE &gt;&gt; /var/adm/kernel.dat
#
# Create a list of unauthorized or denied requests for
# later mailing as reported by tcp_wrappers...and write the
# message to sysadmin as it happens.
#
(unauthor|Unauthor|refused|denied)::002::0:: echo LINE \
&gt;&gt; /var/adm/secure.dat; echo LINE | write sysadmin
#
# If var file system full try clearing some old log files.
# Send message to all ttys.  Wait at least 30 minutes before
# doing this again.  Check mail box size and shame users
# into cleaning mailboxes
#
/var file system full::245::30:: wall LINE; \
find /var/log -name "snmpd_log*" -mtime +6 -exec rm -f {} \;
du -b /var/spool/mail/* | \
sed -e 's/\([2-9][0-9]\{6,\}\)\|\([0-9]\{7,\}\)/\
Clean up you mailbox NOW please!/g' | wall
#
# Backups failed? Use a pager script to inform user fred.
# Wait an hour before sending similar pages.
#
amdump failed::734::60:: pageme.pl -u fred -m LINE
</PRE>
Sometimes it is necessary to have multiple anomaly files for different administrators or purposes. For instance, there may be a service running on a host, like an http server, that writes to its own set of log files. It may be necessary to monitor these logs for an entirely different set of events. Consider the following sample anomaly file:<P>
<PRE>
Filename:       /var/adm/httpanom
#       Descr:          Sample application to http log.
###########################################################
#
# Keep a running total of all access from Lynx browsers.
# Assuming the shell is sh/ksh.  Perhaps this will be used
# in a cgi script.
#
Lynx::100::0:: \
i='cat lynx.cnt'; i='expr $i + 1'; echo $i &gt; lynx.cnt
#
# Send interesting messages to the console ( see http RFC)
#
# Client side
(401|403|414)::400::0:: echo LINE &gt; /dev/console; \
echo LINE &gt;&gt; /var/adm/client-msgs
#
# Server side
(5[0-9][0-9])::500::0:: echo LINE &gt; /dev/console; \
echo LINE &gt;&gt; /var/adm/server-msgs
</PRE>
<P>
In this way, Waldo may be tailored to the service being monitored. The next question is, how does Waldo know which anomaly file to use? There are a number of command-line switches available with a full explanation presented in the man pages; however, the easiest way is to use a Waldo config file--usually this is called <B>waldo.conf</B>. The next few paragraphs show two sample Waldo config files. The first is for a typical messages file:<P>
<PRE>
#       Filename: /etc/waldo.conf
###########################################################
# turn verbose messages on
verbose = 1
# define logfile to read from
logfile = /var/adm/messages
# define anomaly file
anomaly = /var/adm/anomalies
# location of waldo ack file
ackfile = /var/adm/wack
</PRE>
<P>
The above file sets Waldo to operate in verbose mode, causing various informative messages to be written to standard output. It is important to place the verbose at the top of the config file so that the following config file settings are echoed to the screen as well. Note particularly the location of the logfile (file being read from), anomaly file (file that associates an event with an action), and the ack file (file that keeps track of the ack timers). These files are all located in the <B>/var/adm path</B>. These settings are typical for a systems administrator who wants to monitor <B>syslog</B> activity. Compare the previous <B>/etc/waldo.conf</B> file with the config file below, which might be typical for a Web administrator:<P>
<PRE>
#       Filename: /apache/adm/waldo.conf
###########################################################
# turn on verbose messages
verbose = 1
logfile = /apache/var/logs/access_log
anomaly = /apache/var/logs/anomalies
ackfile = /apache/var/wack
</PRE>
<P>
In this case, the log file being monitored is the Apache access log at <B>/apache/var/logs/access_log</B>. Because all the files being written to in the above examples (<B>/var/adm/wack</B> and <B>/apache/var/wack</B>) are in different locations, starting two instances of Waldo should present no problems. To do so, the <B>-F </B>option would be used as shown:<P>
<PRE>
% waldo -F /etc/waldo.conf &amp;
% waldo -F /apache/adm/waldo.conf &amp;
</PRE>
<P>
In reality, the first instance could have simply been started with the command <B>waldo</B> because, by default, Waldo looks for a config file under <B>/etc/waldo.conf</B>. The second instance of Waldo also looks for <B>/etc/waldo.conf</B> and reads it, if it can. It then reads the <B>/apache/adm/waldo.conf</B> file and resets any parameters to values found in this file. In other words, the parameters found in <B>/etc/waldo.conf</B> are set first. If these settings are not overridden with a user config file, they remain in effect. This makes for a convenient way to set up global configuration defaults on a host.<P>
If it is desired to have multiple administrators monitoring the same log file but looking for different events, then the administrators could maintain their own config files, anomaly files, and ackfiles. In fact, they should be able to use the same ack file since Waldo uses <B>flock</B> when modifying the ack file. Additionally, each administrator would use a separate set of Waldo id numbers for each event described in the individual anomaly files to prevent someone else's instance of Waldo from resetting the wrong timer.<P>
All this is fine, but many sites have a variety of UNIX platforms mixed in with other systems, such as Windows NT. The idea is to somehow centralize logging for easier identification and response to current or potential problems.<P>
The first step is to configure the UNIX hosts to send system log information to a central loghost. It may be a good idea to keep local logging in place, but send a duplicate to the central loghost. This is accomplished by editing the <B>syslog.conf</B> file and restarting the <B>syslogd</B> on each host, perhaps with different options on the loghost (to enable it to accept remote log messages). Please consult your local man pages for <B>syslog.conf</B> and <B>syslogd,</B> because this can vary a bit from platform to platform. A few articles in <I>Sys Admin</I> have covered this particular topic, and it may be wise to consult your back issues. In general, the <B>syslog.conf</B> can simply be directed to forward a copy of everything of interest to the central log. For instance, given a line in the <B>syslog.conf</B> that looks like this: <P>
<PRE>
kern.*                          /dev/console
</PRE>
<P>
Add an additional line that looks like the following: <P>
<PRE>
kern.*                          @targethost
</PRE>
<P>
where targethost is the name of your central loghost. This may be applied to any facility level messages for which forwarding is desired. Generally, I take the approach of forwarding everything and then throttling back if need be. Use your judgment and consult the references as needed.<P>
Some applications may write to a separate log file from the <B>syslog</B>. It may be desirable, instead of running and maintaining a separate instance of Waldo for each, to send these messages to the central <B>syslog</B>. There are several simple tools included in the Waldo package to help with this type of task. For instance, instead of maintaining a separate set of config files for the <B>http</B> server mentioned earlier, the <B>httpd</B> anomaly file entries could be added to those on the central <B>syslog</B> host anomaly file, and the application log file entries forwarded using the included log file forwarder program:<P>
<PRE>
% logfwder -p local0.notice -t httpd -h targethost \
/apache/var/logs/access_log
</PRE>
<P>
This will send a copy of each new message written to the <B>access_log</B> directly to the loghost (targethost) using udp port 514 with a tag of <B>httpd</B> and a priority of <B>local0.notice</B>. The same script can be used to forward <B>access_log</B> entries to the local <B>syslog </B>by leaving off the <B>-h</B> targethost option.<P>
If there are Windows NT boxes that must be maintained, it may be desirable to apply event/action scenarios to the output of the event log. There is currently no version of Waldo that runs on Windows NT; but, there is a script included with the package that will forward event log messages to the central loghost. It is called <B>evtfwder.pl</B> and requires Perl and the Win32 module (see <B>www.activestate.com</B>). The following line illustrates its usage:<P>
<PRE>
C:&gt; perl -w evtfwder.pl -p 9 -h targethost \
Application
</PRE>
<P>
This sends a copy of any new entries in the Application Event Log to targethost (there are three event files: System, Security, and Application) with a priority of <B>user.alert</B> (the priority must be expressed as a number in this case).<P>
Waldo may be run in a server configuration in that events are written to named pipes which are created and removed by client applications. This requires Waldo to be started with the <B>-s</B> command line option or to include the server-related parameters in the <B>waldo.conf</B> file, such as <B>server=1</B>. This allows the use of such applications as <B>wgclient</B>, which is a Tcl/Tk-based graphical interface to Waldo. It consists of a text widget, which displays the messages and an entry box to execute miscellaneous commands. The first column of <B>wgclient</B> display shows the Waldo id, followed by the ack expiration time, followed by the logfile entry. Figure 1 shows a sample <B>wgclient</B> display.<P>
It is possible to highlight various messages in the display with a meaningful color. For instance, specific strings can be color coded with red, yellow, or green to indicate a level of importance. Any color your display supports can be used for whatever meaning desired. This is controlled using the <B>.wgc_profile</B> file. The example below shows a typical <B>.wgc_profile</B> file: <P>
<PRE>
^(9[0-9][0-9])::red
^(8[0-9][0-9])::yellow
^(7[0-9][0-9])::green
^(6[0-9][0-9])::blue
|(warn|WARN)::yellow
|(fatal|FATAL|error|ERROR|fail|FAIL)::red
|(waldo restart...)::green
|(INFORMATION|info)::blue
amanda::pink
</PRE>
<P>
The first few lines assign a color to a range of Waldo id numbers that appear at the beginning of the line. The <B>|</B> at the beginning of the next few lines means apply an OR with the other regular expressions associated with the indicated color. In other words, <B>800 - 899 </B>would be yellow at the line beginning as well as any occurrence of <B>warn</B> or <B>WARN</B>.<P>
The Waldo acknowledgment capability is really designed to take advantage of the GUI client although it can be used from the command line. The GUI shows the current time just above the text window, and the text window shows the Waldo id and the ack expiration time. For instance, consider the message shown below:<P>
<PRE>
528: Mon Jun 28 09:10:51 1999: Jun 28 07:10:45 host \
nfs-client nfs server not responding
</PRE>
<P>
The expiration time is two hours. If the problem gets fixed within two hours, the timer may be cleared by typing in the client entry box:<P>
<PRE>
waldo -ack 528
</PRE>
<P>
The entry for anomaly <B>528</B> will be removed from the ack file, and Waldo will now report any further occurrences of this event. Waldo only sends events that match regular expressions in the anomaly file to the clients. As a result, if it is desired that a message show up on the client display without taking any specific action, add a line similar to the following to the anomaly file:<P>
<PRE>
swap space limit exceeded::999::0:: echo LINE &gt; /dev/null
</PRE>
<P>
This will cause the log file message to be sent to the client named pipe and the action would send the message to <B>/dev/null</B>. Waldo also has some support for monitoring the <B>wtmp/utmp</B> files. Since these files are not ASCII text, the Perl unpack function is used to translate new records into something printable. The <B>waldo.conf </B>parameters of <B>utmp</B>, <B>template</B>, and <B>utmpsize</B> may be used to tailor things to your particular <B>utmp</B> structure. There is built-in support for several popular UNIX platforms already. If it is necessary to tailor things a bit, the <B>utmpsize.c</B> file under the <B>misc</B> directory may be helpful. To compile it, type:<P>
<PRE>
% gcc -o utmpsize utmpsize.c
</PRE>
<P>
Running this should spit out the size of various data types including the overall size of your system's particular <B>utmp</B> structure. This information, along with the <B>utmp.h</B> file listing, should allow you to create an appropriate template for the unpack routine.<P>
<B>Installation</b><p>A Perl 5 interpreter will be needed. Binaries are available from various sources, but it is probably best to compile it yourself. See <B>www.perl.com</B> for source code. Follow the installation instructions for the package.  If the GUI client will be used, a Tcl/Tk interpreter will also be needed.  See the<B> www.scriptics.com</B> site for this. As stated earlier, the ActiveState site is a good place to get Perl 5 for Win32.  If you intend to use the anomaly file syntax checker, download and compile the latest flex from <B>ftp.gnu.org</B>.<P>
Once these items have been installed, unpack the Waldo package and check to see that the proper locations of your interpreters are shown at the top of each script that you will be using in the <B>waldo</B>, <B>waldo/clients</B>, and <B>waldo/misc</B> directories. Examine the Makefile in the <B>waldo</B> directory and make any changes needed for your site. Type <B>make</B>, and then as root type <B>make install</B>. That should do it.<P>
Now comes the task of configuring everything for your particular needs.  If you are going to run a single instance of Waldo, it will be necessary to decide under what uid it will run. I typically run it as root. This means whatever actions are set in the anomaly file are executed as root by default. This can be dangerous, particularly if the anomaly file permissions allow write access to a number of users. Waldo will not write to files that it uses for normal processing if they are hard or symbolic links. It does not check files that are written to as a result of anomaly file actions, however, so be careful.<P>
It may be wise to run Waldo under a separate, non-privileged uid and group that has read access to the log file being monitored and write access to the ack file.  Also, Waldo will refuse to read configuration files if the permissions are not exclusive enough.  Waldo comes with a decent set of man pages so be sure to reference them as needed.  I hope you find the Waldo package useful (see <B>http://dogbert.inreach.com/~jaguiar for download</B>).<P>
<B>References</b><p>Wall, T., T. Christianson, and R. L. Schwartz. 1996. <I>Programming Perl</I> Second Edition. O'Reilly &amp; Associates.<P>
Christianson, T. and N. Torkington. 1998. <I>Perl Cookbook</I>. O'Reilly &amp; Associates.<P>
Roth, D. 1998. <I>Win32 Perl Programming: The Standard Extensions</I>. MacMillan Technical Publishing.<P>
Stevens, W. R. 1992. <I>Advanced Programming in the UNIX Environment</I>. Addison-Wesley.<P>
Stevens, W. R. 1998. <I>UNIX Network PRogramming</I>. Volume 1. Prentice Hall.<P>
Friedl, J. 1997. <I>Mastering Regular Expressions</I>. O'Reilly &amp; Associates.<P>
Ousterhout, J. K. 1994. <I>Tcl and the Tk Toolkit</I>. Addison-Wesley.<P>
libwin32 source code from CPAN archive,  logger.c source code from <B>www.OpenBSD.org</B>. n<P>
<h1>About the Author</h1><p>
Joe Aguiar has worked as a Systems and Network Administrator and Software Engineer since 1986. He holds a BSEE degree from CSU, Fresno. He can be reached at jaguiar@inreach.com.</BODY>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>