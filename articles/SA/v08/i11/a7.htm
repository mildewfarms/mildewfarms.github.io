<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i11: Automating Your Site with Expect</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/1999/nov99.tar"><b class=codeListing>nov99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Automating Your Site with Expect</H1><p>
<P>Mike Schwager
<P>

Have you ever wanted a tool that would allow you to automate various command line tasks -- even those things you thought difficult or impossible to do? Such a tool has been available for years, and it's called Expect. If you become proficient with Expect, it can help you take care of the mundane, repetitive parts of your job.<P>
<B>What is Expect?</b><p>Expect is an extension built onto Tcl/Tk -- the Tool command language and the Tk toolkit. Expect allows you to manipulate any character-based application via a program that can look and act like a human being to your UNIX/Linux-based machines. Expect and Tcl/Tk also run on Windows NT. If you are already familiar with Tcl or Expect, you can jump down to the "Expect in Greater Depth" section below. Otherwise, I will touch on what you can do with Expect and the very basics of the Tcl language.<P>
Consider the following scenario -- you need to change the root password on a number of different machines. From where you are sitting at your local host, the interaction will look like this:<P>
<PRE>
localhost$ telnet remote0.mydomain.com
Welcome to remote0.
login: myname
Password: &lt;password&gt;
Last login: Yesterday.
remote0$ su
Password: &lt;root's password&gt;
remote0# passwd root
New password: &lt;new password&gt;
Re-enter new password: &lt;new password&gt;
password changed.
remote0# exit
remote0$ exit
Connection closed by foreign host.
localhost$ telnet remote1.mydomain.com ... (repeat as necessary)
</PRE>
<P>
Now, as a great programmer, your three virtues ("laziness, impatience, and hubris" -Larry Wall) all kick in at once. You write the following Expect script:<P>
<PRE>
    foreach host "remote0.mydomain.com ... remoteN.mydomain.com" {
        spawn telnet $host
        expect "login: "
        send "myname\r"
        expect "Password: "
        send "mypassword\r"
        expect "$ "
        send "su\r"
        expect "password: "
        send "rootpassword\r"
        expect "# "
        send "passwd root\r"
# Here, we look for either of two strings, like an if/else construct
        expect {
               "password: " {
                   send "rootnewpassword\r"
                   exp_continue
               }
               "# " {
                   send "exit\r"
               }
        }
        expect "$ "
        send "exit\r"
    }
</PRE>
<P>
Easy, no? As a human being, you spawn a job, then expect to see some feedback, and you send some text. Expect works the same way; hence the name. Notice in the seventh line that you do not need to match all text -- Expect can simply look for a substring.<P>
Once Expect has found the text, it executes the next statement. In line 14, we have a more elaborate Expect statement. This statement allows you to look for either <B>"password:"</B> or <B>"#"</B>. The <B>exp_continue </B>essentially creates a <B>while</B> loop within the current Expect. Note that Tcl strips off the double quotes for Expect.<P>
<B>A Look at Tcl</b><p>To use Expect, you need to know Tcl. The entire Tcl/Tk language is available to you when you work with Expect. All of the usual programming features are available, like <B>foreach</B>, <B>switch</B>, <B>if/then/else</B>, <B>while</B>, etc.<P>
<B>Obtaining and Installing Tcl/Tk/Expect </b><p>The current release of Expect is 5.31, and it requires Tcl 8.2. Further information about the requirements is available in the Expect README file. Expect is available from <B>http://expect.nist.gov/</B>. You can download Tcl from there or go to <B>http://www.scriptics.com</B>. On Solaris and Linux, installing couldn't be easier. Instructions are in the INSTALL files with each distribution.<P>
<B>How Tcl Processes Your Script</b><p>Tcl is quite simple. There are two inner parts to it -- the parser and the executer. The parser performs substitutions as required. Tcl then assumes that the first word is a command name, and invokes the command procedure with the other strings that the parser found. It doesn't get any more complicated than that. The <B>for </B>command is a procedure that contains four arguments -- think of them as four strings. Even the body is just a big string -- it gets passed back to the interpreter by <B>for</B>. There is no "for loop" to Tcl, per se. Remember not to give the Tcl interpreter any more intelligence than it possesses.<P>
Here is a summary of some basics of Tcl:<P>
<P>
&#149;  Statements are executed as they're encountered -- there is no optimization or byte-compilation of your script (&agrave; la Perl or Java).<P>
&#149;  There are no types -- all variables are strings. <P>
&#149;  Tcl uses command and variable substitution. Variable substitution is done with the dollar sign <B>$</B>. Command substitution is done using square brackets, such as:<P>
<P>
<PRE>
 set i [ set j "101" ]
</PRE>
sets both $i and $j to 101.<P>
&#149;   Tcl contains variables, lists, and array constructs. Tcl arrays are associative arrays, and elements of the array are accessed like: <B>$month(January)</B>. A list is basically a string with a space between each element.<P>
&#149;  To initialize a variable:<P>
<PRE>
  set var value
</PRE>
If you try to say <B>$var=value</B> in Tcl, you will get an error. Remember that Tcl is very consistent. The first word of every line is assumed to be a command, except for comment lines, of course.<P>
<P>
&#149;   Accessing files is done within the language, with "primitive" file statements like <B>open</B>, <B>close</B>, <B>puts</B>, <B>stat</B>, etc.<P>
&#149;  Creating a command (a.k.a. procedure) in Tcl is as simple as:<P>
<PRE>
 proc { arg1 ... argn } { body }
</PRE>
See the expect examples below.<P>
<P>
&#149;   Procedures' arguments are called by value. It is possible to call by reference using the <B>uplevel</B> command. Variables within procedures have local scope. The<B> global</B> command will make their scope global.<P>
&#149;  In Tcl, the result of every command is a string.<P>
&#149; You quote strings in double quotes or braces: <B>{}</B>.<P>
&#149;   Braces provide strong quoting -- that is, command and variable substitutions are deferred.  Do not think that braces define blocks, like Perl.  They are not really blocks.<P>
&#149;   Tcl is a complete programming environment.  Your scripts won't be <B>fork</B>ing and <B>exec</B>ing lots of subshells or external programs.<P>
&#149;   The end of a line ends the Tcl command.  You can also use a semicolon to end a Tcl command.<P>
<P>
There is much more to learn about Tcl -- more than we have space for here. For more indepth study, get <I>Tcl and the Tk Toolkit</I> by John Ousterhout (Addison-Wesley).<P>
<B>Expect in Greater Depth: Diving In</b><p>I showed you a basic Expect script above. You can see that an Expect script goes like this:<P>
<P>
1. Spawn a subprocess<P>
2. Expect some output from the subprocess<P>
3. Send some text to it in reply<P>
<P>
I will show you more Expect by way of example.<P>
<B>Expect Excellent Example 1</B><P>
You are a responsible systems administrator. Your cleartext passwords are nowhere except in your brain, but now you need to move files from one machine to the next, and you need to extract them once they arrive. You'll be doing this time and time again. How?<P>
You create the following Expect script:<P>
<PRE>
#!/usr/local/bin/expect -f

match_max 10000

set env(TERM) "dialup"
set user $env(LOGNAME)
stty -echo
send_user "Enter password for $user now: "
gets stdin password
send_user "\nEnter password for root on remotes now: "
gets stdin rootpw
stty echo
#
foreach machine $argv {
        spawn ftp $machine
        expect -re "Name .*: "
        send "$user\r"
        expect "word:"
        send "$password\r"
        expect "ftp&gt; "; send "bin\r"
        expect "ftp&gt; "; send "cd /tmp\r"
        expect "ftp&gt; "; send "put localfile.tar\r"
        expect "ftp&gt; "; send "quit\r"
        send_user "\r\nftp exited.\n"
        sleep 1; spawn telnet $machine
        expect "ogin: "; send "$user\r"
        expect "word: "; send "$password\r"
        expect -re "(\\$|&gt;) "; send "su\r"
        expect "word: "; send "$rootpw\r"
        expect "# "; send "cd /tmp\r"
        expect "# "; send "tar xvf localfile.tar\r"
        expect "# "; send "exit\r"
        expect -re "\\$|&gt; "; send "exit\r"
}
</PRE>
<P>
<B>What It Does</B><P>
In line five, I set up a simple TERM for my subprocesses; my fancy <B>.*rc</B> files on the remote machines are designed to recognize this terminal type and simplify my environment. All shell environment variables are available in the <B>env()</B> array. I assume in line six that my remote user name is the same as <B>LOGNAME </B>on this local host. In line nine, you can see how Tcl gets input from the user. You can also see how I shut off echoing of the passwords.  Notice in line 16 how I am using a simple regular expression instead of a string, with the <B>-re</B> option. In line 28, I use another regular expression; it looks for a literal <B>$</B> or <B>&gt;</B>, followed by a space.  The <B>$</B> is meaningful to Tcl and Expect, and must be escaped.  Regular expressions are similar to Perl regular expressions.<P>
You can elaborate on this basic script, perhaps interacting with <B>ssh</B> (you are very responsible), or running some install commands after the <B>tar</B> extraction.<P>
<B>Expect Excellent Example 2</B><P>
As a systems administrator, I am concerned that my systems are up and running adequately. Often I use <B>ping</B>, but that's hardly enough. <B>ping</B> merely sends ICMP requests to the remote system's hardware -- your CPU doesn't get involved. Your applications may have problems, and you'd never know it.  Here's a better way to  check on the status of a daemon, in this case <B>innd</B>:<P>
<P>
<PRE>
#!/usr/local/bin/expect -f

set timeout 10
proc smart_expect { look send } {
    expect {
        -exact $look {
            send $send
        }
        timeout {
            send_user "Something is wrong with innd!\n"
            exit 1
        }
    }
}

#
spawn telnet newshost.mydomain.com 119
match_max 10000
smart_expect "\r
200 " "group comp.risks\r"
smart_expect "\r
211 " "quit\r"
smart_expect "\r
205 " ""
smart_expect eof ""
</PRE>
<P>
<B>What It Does</B><P>
Expect spawns a <B>telnet</B> into the <B>nntp</B> port (119) on the news host. I created a procedure for the Expect that takes two arguments -- what we are looking for, and what we should send if the item is found. The first <B>smart_expect</B> on line 21 is looking for a carriage return, linefeed, 2, 0, 0, and a space, in sequence. When it finds this sequence, Expect will send the string <B>group comp.risks</B> plus a return. I'm using a smarter Expect, so I don't have repeat the timeout case for each string that I'm looking for. <P>
<B>Important Features</B><P>
&#149;  Line 3, the timeout: By default it's 30 seconds. You can adjust it to whatever is appropriate. This is an integral number of seconds.<P>
&#149;   Line 6, <B>-exact</B>: By default, certain characters have special meaning to the Expect command's input string. Expect matches strings using "glob patterns", like the shell. In this case, we want to match all characters literally. Expect accepts a number of options to its string or pattern matching. We use the <B>-exact </B>option; pattern matching is turned off. However, normal Tcl substitutions will apply. Thus <B>\r</B> represents a carriage return (control<B>-M</B>) and not a two-character sequence.<P>
&#149;   Line 20, <B>match_max</B>: We don't want to have a huge input buffer -- eventually, old information is useless. At the same time, we want to make sure we are looking at enough output to grab the appropriate text. This should be adequate.<P>
&#149;  Line 21, <B>smart_expect</B> and the carriage return/linefeed: Notice how the end of line doesn't end the string on this line. This will not cause a syntax error; Expect correctly identifies the return/linefeed sequence in your script and will look for it as the output from <B>telnet</B>.<P>
<P>
These examples are pretty simple. Fortunately, the Expect distribution comes with a directory full of more robust examples. <P>
<B>Expect Excellent Example 3</b><p>Two programs that accompany this artcicle can be found on the <I>Sys Admin</I> Web site -- <B>login.exp</B> and <B>run_general</B>. Additionally, as I make changes, I will modify:<P>
<PRE>
http://www.enteract.com/~schwager/expect.htm
</PRE>
<P>
<B>login.exp</B> is a general login procedure that you can use in your own Expect scripts. As a side effect, it sets the <B>$prompt</B> variable. You call it by:<P>
<PRE>
source /usr/local/lib/login.exp
</PRE>
<P>
Use the real path to where you install it. The other script is <B>run_general</B>. There are many times when I just want to whip out a quick series of instructions and run them with automatic logins for my<B> telnet</B>s and <B>ftp</B>s. <B>run_general</B> allows me to do that in the general case, more easily than <B>autoexpect</B> (described next).<P>
<B>Expect Tips and Tricks</b><p>Instead of writing your own Expect scripts, get Expect to do it for you! Upon installing Expect, you will also install <B>autoexpect</B>. <B>autoexpect</B> will capture all the input and output from a session. You run <B>autoinspect</B>, do your work, and exit from the shell. Your work is saved for you to modify. Usually this entails whittling the file down significantly, but it's a great way to get started without having to know much about Tcl. It's excellent for automating curses-based programs, because you will be able to see the escape sequences that were sent by the program.<P>
Expect captures both the <B>stdout</B> and <B>stderr</B> of spawned processes and places them in <B>stdout</B> for you to see. This leaves Expect's <B>stderr</B> available for diagnostic output, such as:<P>
<PRE>
print STDERR "Hit enter to continue.\n"
</PRE>
<P>
Meanwhile, <B>stdout</B> contains all other output from your script. So you can interact with your script while redirecting <B>stdout</B> to a file.<P>
Use the command:<P>
<PRE>
log_user 0
</PRE>
<P>
to shut off output from your spawned process. <B>log_user 1</B> restarts it. You can intersperse them throughout your scripts. You can debug your Expect patterns with <B>exp_internal 1</B>. <B>exp_internal 0</B> shuts debugging off again.<P>
Don't think of the Expect statement as a single-line, monolithic command. You can set up powerful <B>if</B> constructs and looping conditions. See my example at the beginning of this article and note how the <B>exp_continue</B> command is used.<P>
Part of any login procedure is to enter a password. You can turn off the display of the password when using Expect to automate logins. Do it with <B>stty -echo</B>. Turn character echoing back on with <B>stty echo</B> after you have entered the password.<P>
Expect has a rare capability -- it can sleep for fractions of a second. Try inserting a <B>sleep .4</B> command in your Expect script. It works! Note that on most systems, the number given is a minimum. You'll sleep at least that long, but there is no guarantee that this number won't extend into multiple seconds.<P>
If you are a power user who likes to set up many things in your <B>rc</B> files, you may discover that your Expect script is having trouble handling cursor addressing escapes at login. I have found it useful to set the TERM environment variable to something innocuous (like <B>dialup</B>) in my Expect scripts:<P>
<PRE>
set env(TERM) "dialup"
</PRE>
<P>
Here's a scenario -- you start your Expect script, but change your mind and hit control-C. Later you discover that there are orphaned processes like <B>ftpd</B> hanging around, which were created by you. Here's a way to ensure a clean exit from Expect:<P>
<PRE>
       #! /usr/local/bin/expect -f
       proc my_exit {} {
         global pid

       # This should do it, but we'll go down the line, to clean
       # up any mess.
         exec kill -TERM $pid
       # Oh yeah?  Take this!
         exec kill -HUP $pid
       # Oh double yeah? Take this!
         exec kill -KILL $pid
         send_user "Early exit.\n"
         exp_exit
       }

       trap my_exit {SIGINT SIGTERM}

       set pid [spawn -ignore SIGINT -ignore SIGTERM ftp remote
       host]
       expect -re "Name .*: "
       ...etc....
</PRE>
<P>
Now, when you hit control-C, <B>my_exit</B> is called, which tries in a number of ways to kill any recalcitrant child.<P>
<B>Expect Caveats</B><P>
Note that in Tcl, you must set a variable before using it. Often it's difficult to get the pattern matching just right. Try to match on the smallest portion of text that you can guarantee to be unique, and be careful if you <B>set</B> <B>timeout -1</B> (never <B>timeout</B>). Note also that if you place a closing brace (}) inside a comment, the comment ends and the rest of the line is read by the Tcl interpreter. <P>
Parentheses are used somewhat sparingly in Tcl/Expect. You can use them in expressions and regular expressions, but they are not used in <B>while</B>, <B>for</B>, or <B>if</B> statements. You use braces. Remember that braces defer substition of variables. If you write a Tcl statement like <B>while { $i &lt; 5 }</B>, the <B>while</B> command actually sees the string <B>$i &lt; 5</B>. This is because it must evaluate it every time. Control-flow commands do their own substitutions.<P>
Do not perform brace command substitutions; that is, don't do <B>set</B> <B>j { [ set i 157 ] }</B>. Put them in double quotes if you need to group them with other strings, like:<P>
<PRE>
set j "Expression results: [ expr 1 &gt; 0 ]"
</PRE>
<P>
I use a shell prompt that shows part of the prompt string in boldface. Some of my colleagues use prompts that end in various characters. Matching prompts with Expect can be tricky. Here is something that works for me:<P>
<PRE>
set prompt "(%|&gt;|:|\#|\\$) ($|^[)"
</PRE>
<P>
The last character before the closing parentheses at the end of line is not an up-arrow/bracket combination, but the "escape" character. The string is a regular expression matching literally <B>%</B> or <B>&gt;</B> or <B>:</B> or <B>#</B> or <B>$</B>, followed by a space, followed by either the end of input or an escape character.<P>
When I match the prompt, I write an Expect command that looks like the following:<P>
<PRE>
       set $long_timeout 30
       expect -re $prompt {
          sleep .2 ;     # timeout only takes integer seconds
          set timeout 0
          expect {
              -notransfer -re "\[a-zA-Z0-9\]" {
                  ; # not a prompt- fall through and continue the 
                    # outer
              }
              timeout {
                  ; # we got a prompt!
                  set timeout $long_timeout
                  continue ; # jump to an outer while or for loop
              }
          }
          set timeout $long_timeout
          exp_continue
      }
</PRE>
<P>
The <B>-notransfer</B> option to Expect means that we will not slurp in the output from our spawned process -- we just want to take a look, without "touching" the text. The text is available to be scanned by a subsequent Expect.<P>
Why is there <B>sleep</B> in the above section of script? Because Expect's dollar sign does not match the end of line -- it matches end of input! What is end of input? It is whatever the operating system says it is. The OS reads characters into a buffer and hands that buffer to Expect. Sometimes strings you think are whole actually come in multiple chunks. I have found that a slight pause is enough to not slow my scripts down too much, yet ensure that we are looking at a prompt and not simply some slow buffers. Adjust the <B>sleep </B>value to taste.<P>
<B>Where to Go from Here</B><P>
With this introduction, I hope you will be encouraged to go further with Expect/Tcl. You can write fancy X-based user interfaces quickly and easily with another Tcl extension, Tk. For more information, check out <B>http://www.scriptics.com</B>. My favorite books on Expect/Tcl/Tk are <I>Tcl and the Tk Toolkit,</I> by John Ousterhout (Addison-Wesley), and <I>Exploring Expect,</I> by Don Libes (O'Reilly and Associates). Armed with these tools, I Expect that you'll do great things!<P>

<h1>About the Author</h1><p>
Mike Schwager is a contractor specializing in UNIX and the Internet. He has spent the past 15 years writing C and Perl code, shell scripts, and maintaining systems in the corporate and educational environments. Email him at Michael@Schwager.com or visit http://come.to/lanicservices.</BODY>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
