<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i09: Maintaining Patch Levels with Open Source BSDs</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/1999/sep99.tar"><b class=codeListing>sep99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Maintaining Patch Levels with Open Source BSDs</H1><p>
<P>Michael Lucas
<P>
</I>The open source BSDs are based on 20-year-old UNIX code released by the University of California Berkeley in the early 1990s. Today, open source BSD has broken into three branches: FreeBSD, NetBSD, and OpenBSD. Each has its own focus. NetBSD runs on almost any hardware. OpenBSD's focus is security on a wide hardware base. FreeBSD focuses on being the most stable, high-performance OS possible on Intel CPUs. Versions of the open source BSDs are used on several major ISP Web sites and in many commercial organizations. Besides time-tested code and top-notch performance, however, all the BSDs offer three main features.<P>
The emulation functions are an important feature. Most open source BSDs can run binaries for SVR4, SCO UNIX, BSDI, character-mode DOS, and Linux. The Linux emulation alone is remarkable; applications from WordPerfect to Informix run perfectly. The second advantage (for corporate users, at least) is the license. The BSD license boils down to: "Give us credit for our work, and don't sue us if something breaks." There is no obligation to make changes public or to propagate source code. The last advantage is the very easy upgrade method. This article was written on a FreeBSD machine, installed in November of 1997. It's running a version of FreeBSD less than a week old. I upgrade the operating system every week, and it takes less than fifteen minutes each time. This is due to the BSD development model and tools like <B>sup</B> and CVSup.<P>
This article focuses on upgrading FreeBSD systems, but the concepts are applicable in both OpenBSD and NetBSD. Some of the procedures are slightly different, but pointers to detailed information for each BSD are provided.<P>
<B>BSD Development Model</b><p>The open source BSDs have several versions available at any time: snapshots/releases, current, and (in FreeBSD) stable. Current is the very latest version, containing code being tested publicly for the first time. If you can't read C, or don't feel like debugging your OS, or don't like parts of an OS failing during an initial public test, current might not be your best choice. The developers do their best to keep the current version reliable, but there are times when this simply isn't possible. For example, this spring, FreeBSD-current changed compilers from <B>gcc</B> to <B>egcs</B>. Some pieces of third-party software stopped working until they could be debugged. Although the developers fixed these issues quickly, this is indicative of the types of problems a current user can have.<P>
Under FreeBSD, once a piece of code is thoroughly tested in current mode, it is merged into "stable". Stable is expected to be solidly tested and relatively bug-free. Keep in mind that "stable" is a description of the codebase, not of the OS itself. For example, FreeBSD 2.2.8-stable is considered more "reliable" than FreeBSD 3.0-stable, although both have the stable tag. As with any software, you need to be leery of .0 releases.<P>
A "snapshot" or "release" is generally made for a CD image and reflects the state of current or stable at a particular date. The advantage to this system is quality control. You can use the quality given by a stable or release version, or contribute to the BSD of your choice by running and debugging the current version. By the time a piece of code makes it into a release, it has been tested by thousands of users with countless different hardware configurations.<P>
When a developer changes code for any BSD, the change is publicly available from the project's CVS servers within hours. You can synchronize your machine's source code with a master CVS server and recompile the system at any time. The source code for the entire system, including kernel and utilities, is maintained in an easily compilable manner. The entire operating system can be recompiled and reinstalled at any time. All the user needs to do is keep a copy of the system source code available and get the latest patches via CVS.<P>
Before you can update your source code, however, be sure you have a full source tree for your BSD. The source code is usually under <B>/usr/src</B>. You can install the source code when you install the machine. If you're running FreeBSD, CVSup will automatically fetch and install the source code for you. Otherwise, you can generally <B>ftp</B> the source code from the 'Net, or copy it from the installation CD-ROM and uncompress it under <B>/usr/src</B>. A full source tree uses about 50 MB of disk space.<P>
If you're unsure whether you need to upgrade, check out the online sidebar to this article (<B>www.sysadminmag.com</B>). This sidebar is a list of all BSD-related CERT advisories and pointers to security alerts for the various BSDs.<P>
<B>What is CVS?</b><p>CVS, or the Concurrent Version System, is a further development of RCS. CVS allows developers to keep a central repository of all code. Files can be checked out across the 'Net, edited and tested locally, and then committed back to the central repository for everyone's use. CVS is used by a variety of open source projects, such as Nessus. For more information on CVS, see "The Linux Kernel: A Case Study for CVS" in <I>Sys Admin</I>, Vol. 8, No. 6, or the CVS home page at:<P>
<PRE>
http://www.csc.calpoly.edu/~dbutler/tutorials/winter96/cvs/
</PRE>
<P>
Sites lacking an IP Internet access, such as a UUCP feed, can look at CTM. CTM allows you to receive easily applicable source diffs via email. For more information on using CTM with a BSD, look at:<P>
<PRE>
http://www.freebsd.org/handbook/synching.html#CTM
http://www.openbsd.org/ctm.html
http://www.nemeton.com.au/netbsd/ctm.html
</PRE>
<P>
The base distribution of all BSDs includes CVS. FreeBSD has an improved CVS called "CVSup." (CVSup is a successor to <B>sup</B>, or "Software Update Protocol," that includes CVS integration.) Both are used for sweeping CVS updates of large sections of source code. CVSup uses network resources far more efficiently than CVS does, however, and if you have FreeBSD it is highly recommended that you use CVSup. CVS is part of the base distribution of NetBSD and OpenBSD. You will need to install CVSup on a FreeBSD machine, however.<P>
<B>Installing CVSup on FreeBSD</b><p>The simplest way to install CVSup is by package. If you have a FreeBSD CD-ROM, just do:<P>
<PRE>
mount -t cd9660 /dev/wcd0c /cdrom
cd /cdrom/packages/net/
pkg_add cvsup-bin-16.0.tgz
</PRE>
<P>
Your version number might differ, depending on the age of your CD-ROM. If you don't have the CD-ROM, you can get CVSup for FreeBSD 3.x with:<P>
<PRE>
pkg_add
ftp://ftp.freebsd.org/pub/FreeBSD/packages/net/cvsup-bin-16.0.tgz
</PRE>
<P>
If you're a fan of rolling your own binaries from source, you can install the CVSup port. This takes quite a while to build. (Technically, CVSup itself builds rapidly. It is written in Modula-3, however, which does take time to build.) You can build the port by:<P>
<PRE>
cd /usr/ports/net/cvsup
make install
</PRE>
<P>
If you have the CD-ROM containing the source code for CVSup mounted under <B>/cdrom</B>, it will copy the source tarballs automatically. Otherwise, it will fetch the sources automatically from a master <B>ftp</B> site.<P>
<B>Selecting your supfile</b><p>CVSup uses a config file, or "supfile". This tells CVSup exactly which files to update. Various supfiles are in <B>/usr/share/examples/cvsup/</B> (or, on NetBSD and OpenBSD in <B>/usr/share/examples/supfiles/</B>). The supfile you use varies with the version of your particular BSD you want. If you want to track stable, use the <B>stable-supfile</B>. If you want to track current, use the <B>standard-supfile</B>. The files are well commented, with all the options described.<P>
Looking at the uncommented lines of a recent FreeBSD <B>stable-supfile</B>, we see:<P>
<PRE>
*default host=CHANGE_THIS.FreeBSD.org
*default release=cvs tag=RELENG_3
*default base=/usr
*default prefix=/usr
*default delete use-rel-suffix
*default compress
src-all
</PRE>
<P>
You'll need to edit the file. First, choose a CVSup server. A full list of FreeBSD CVSup servers is available at: <B>http://www.freebsd.org/handbook/mirrors-cvsup.html</B>. (NetBSD just uses <B>sup.netbsd.org</B>, while a list of mirrors for OpenBSD can be found at <B>http://www.openbsd.org/anoncvs.html</B>.) Use <B>ping</B> and <B>traceroute</B> to choose a mirror close to you.<P>
The default release is a tag for the version, or collection, you've chosen. <B>RELENG_3</B> is the tag for <B>3-stable</B>. A full list of available tags for updating FreeBSD is available at:<P>
<PRE>
http://www.freebsd.org/handbook/synching.html#CVSUP-COLLEC
</PRE>
</b><p>The example supfiles for each BSD list all available tags. The default prefix is where the collection you've chosen will go. In this particular case, <B>/usr</B> is correct. The default base is where <B>sup</B>/CVSup will keep its status files. CVSup will keep a list of which files it has updated, allowing quicker future updates.<P>
Both <B>sup</B> and CVSup have a variety of other options. Those normally specified for CVSup are <B>delete</B>, <B>use-rel-suffix</B>, and <B>compress</B>. If your connection is a T1 or faster, you can remove the <B>compress</B> setting. <B>delete</B> gives CVS permission to remove obsoleted source files. <B>use-rel-suffix</B> allows CVSup to share a common base directory among several versions of the source, without confusing them. These options cover almost all situations.<P>
The <B>src-all</B> tells CVSup which part of the stable tree you are synchronizing with. A close look at the <B>standard-supfile</B> shows a whole list of available sub-collections, such as <B>usr.bin</B>, <B>contrib</B>, <B>sys</B>, and so on. You can choose to update only one section of your system (i.e., the <B>who</B> program, or the contents of <B>/usr/sbin</B>). This is not recommended. No BSD guarantees that random mixes of different versions of utilities will work together.<P>
If you're interested in the ports collection, you might also add the line <B>ports-all tag=</B>. to your supfile. This will also update your ports tree. Likewise, if you want to update your system's cryptography and are in the United States or Canada, the tags <B>src-crypto</B>, <B>src-kerberosIV</B>, and <B>src-secure</B> might be useful. If you're outside the United States or Canada, you can fetch these collections from: <B>cvsup.internat.freebsd.org</B>. South Africans can fetch them from: <B>cvsup2.internat.freebsd.org</B>.<P>
You will need to examine example supfiles for your particular OS; subtle differences from BSD to BSD make broad generalizations difficult. Once you've created a supfile, however, you can continue to use it forever.<P>
<B>Blocking CVSup Updates</b><p>You can choose to refuse to allow updates of certain programs. For example, you might not be interested in the ports for Vietnamese, Chinese, and German software. To tell CVSup not to bother updating these directories, make a file <B>/usr/sup/refuse</B> that looks like this:<P>
<PRE>
ports/vietnamese
ports/chinese
ports/german
</PRE>
<P>
You can choose to do this with any section of your OS; however, you must know what you're doing. If you refuse updates to a program, that program might become incompatible with your system at some point.<P>
<B>Upgrade Preparation</b><p>If you intend to maintain your system at stable or current patch levels, you need to read the appropriate mailing list for your OS. All of the BSD teams announce major changes that require special handling. Device drivers, bootstrap methods, compilers, even binary types are subject to change through the lifetime of the OS.<P>
For example, if you're tracking <B>freebsd-stable</B>, you should read <B>stable@freebsd.org</B>. Warnings of major changes are announced with a subject beginning "HEADS UP". OpenBSD and NetBSD maintain similar mailing lists. Watch for those messages, and take whatever steps they recommend.<P>
<B>Upgrading Source Code</b><p>Once you have a supfile, running CVSup is easy. Become root and do:<P>
<PRE>
cvsup supfile
</PRE>
<P>
If you're running X, CVSup will open a GUI. Otherwise, it will just start upgrading your source files. Under OpenBSD, you will need to run:<P>
<PRE>
setenv CVSROOT anoncvs@anoncvs.ca.openbsd.org:/cvs
cd /usr
cvs -q get -PA src
</PRE>
<P>
to install your initial source tree. To grab the latest patches, you need to run:<P>
<PRE>
cd /usr/src
cvs -q up -PAd
</PRE>
</b><p>NetBSD is more complicated, but the NetBSD project has made a script available to ease upgrades. For details, take a look at:<P>
<PRE>
http://www.netbsd.org/Documentation/current/index.html#using_cvs
</PRE>
<P>
<B>Building New Kernel and Userland</b><p>Once CVSup is complete, you can rebuild your system. Become root, <B>cd /usr/src</B>, and type:<P>
<PRE>
make world (FreeBSD)
make build (NetBSD, OpenBSD)
</PRE>
<P>
Your machine will begin compiling all system utilities. On my desktop AMD K6 350 running FreeBSD-current, this takes about 2 hours. On my office firewall, a 25-Mhz 486 running FreeBSD 2.2.8-stable, it's about 12 hours. When <B>make world</B> finishes, you need to reconfig and recompile your kernel. The exact method varies from BSD to BSD, and from platform to platform. On an Intel FreeBSD box, do the following:<P>
<PRE>
cd /sys/i386/conf
config KERNELNAME
cd ../../KERNELNAME
make depend &amp;&amp; make all install &amp;&amp; reboot
</PRE>
</b><p>When your new kernel is complete, the system will reboot. You will now be running a fully upgraded system. This process can even be run out of cron, and updates will be taken care of automatically.<P>
<B>What Won't CVS and make world Do?</b><p>CVS only takes care of the base operating system. If you have separate programs such as shells, Web servers, or editors, you need to upgrade them manually. You can do this by fetching the latest package/port, running <B>pkg_delete oldpackagename</B>, and building the new package. CVS won't handle rewriting your personal kernel config file to accommodate system changes. Lastly, <B>make world</B> will not change the contents of your /etc directory. This is left to the user, for good reason.<P>
<B>/etc Changes</b><p>You also need to handle any changes in <B>/etc</B>. System startup scripts change from time to time as new functions are added. Samples of all files and directories in <B>/etc</B> can be found under <B>/usr/src/etc</B>. Compare any files there (particularly <B>rc</B> files) to those in your <B>/etc</B> directory, and see which changes you need to merge. The FreeBSD utility "mergemaster" can cut merge time considerably. Mergemaster is not part of the base system, but can be installed as a package or port in a manner much like CVSup.<P>
<B>Partial Updates</b><p>If you don't want to update your entire system, but only a piece of it, you can use CVS to grab the appropriate files. For example, if a new version of a utility comes out, and you wish to upgrade that utility without upgrading the entire OS, you can do that with CVS. Do this at your own risk; programs that are closely dependent on other parts of the system (<B>top</B>, <B>vmstat</B>, <B>ps</B>, etc.) will be very unlikely to work.<P>
Before using CVS, you need to set an environment variable so that your CVS program will know which server to talk to. You can do this with:<P>
<PRE>
setenv CVSROOT anoncvs@anoncvs.freebsd.org:/cvs
</PRE>
<P>
This is perfectly safe to set in your login script. Once you have your CVSROOT configured, you can check out the latest version of a program with:<P>
<PRE>
cvs co &lt;program name&gt;
</PRE>
<P>
For example, to get the latest version of <B>more</B>, use <B>cvs co more</B>. A directory called <B>more</B> will be created in your current directory. You can <B>cd more &amp;&amp; make install</B>. You can also use this to get the latest skeleton for a port, without upgrading your entire ports collection.<P>
A <B>cvs co modules</B> will give you a complete list of all possible targets for a CVS operation. CVSup also supports partial updates with the <B>-i pattern</B> option. A <B>cvsup my-supfile -i src/etc</B> will update the <B>/usr/src/etc</B> directory using the default settings in <B>my-supfile</B>.<P>
<B>Conclusion</b><p>The BSD upgrade system makes it easy to maintain a large number of servers at the latest patch levels. Using the procedures outlined here, you can keep servers at the optimum OS reliability level, based on the use of the particular machine, and do so with relative ease. The ease with which you can upgrade open source BSDs using the tools described here, however, may create a desire to migrate from other Intel-based UNIX-like systems. Thus, you may want to be cautious about how much time you save, keeping practicality and popularity in the appropriate perspective. n<P>

<p>
<h1>About the Author</h1><p>
Michael Lucas is an independent networking, security, and FreeBSD consultant. He previously worked for Verio, AGIS, and Oakland University. He lives in Detroit, Michigan with his wife Liz, four gerbils, and assorted fish. He can be reached at mwlucas@exceptionet.com.</BODY>




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>