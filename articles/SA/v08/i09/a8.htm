<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i09: Practical Packet Sniffing</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a8_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a8_f3.htm">Figure 3</a></span></td>
		<td><a href="../../../../source/SA/1999/sep99.tar"><b class=codeListing>sep99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Practical Packet Sniffing</H1><p>
<P>John Mechalas
<P>
</I>The packet sniffer is an extremely useful, and often overlooked, systems administration tool that helps resolve not only complex network issues, but also application-level problems. Every systems administrator, whether he or she is responsible for networking or not, should be familiar with the workings of packet sniffers and should have one in his or her troubleshooting toolbox.<P>
This article will provide a basic overview of packet sniffers and how to use them, while also providing several practical examples. I will then discuss a series of simple case studies, detailing real-life problems that I have encountered as a systems administrator, and how packet sniffers were used to isolate the root causes of those issues. The goal is that, by the end of this article, you will possess skills and tools that can be applied right away.<P>
My focus will be on Ethernet networks -- almost exclusively on the TCP/IP protocol suite -- and all of my examples will be for <B>tcpdump</B> and <B>snoop</B> (q.v.). I chose <B>tcpdump</B> because it is available in the public domain, and <B>snoop</B> because it is part of the Solaris OS, and has several useful features that I am familiar with.<P>
One word of caution: packet sniffers can reveal sensitive information, particularly when you are viewing the actual application data. It is easy to read passwords, private email, and even NFS file operations with only rudimentary knowledge. For this reason, it is extremely important that you:<P>
<P>
1.  Never use a packet sniffer while a user (i.e., non-systems administrator) is watching.<P>
2.  Only view as much data as necessary to solve the problem at hand.<P>
3.  Follow your local system policies regarding directed, network monitoring before proceeding.<P>
<B>A Brief Introduction to Packet Sniffers</b><p>Packet sniffers like <B>tcpdump</B> and <B>snoop</B> are designed to capture and analyze individual network packets. Normally, a specific machine only sees those packets that are destined for it, and a particular application only receives packets that are a part of its session. The packet sniffer, however, will by default place the specified network interface in promiscuous mode, which means that it will capture all packets traveling on the wire, regardless of source or destination. To perform this feat, the program must have the ability to open and read from the network device. On a UNIX system, it must be running as root, because a packet sniffer can easily be used to gather passwords and other sensitive information -- not a capability you want in the hands of users. Unsecure operating systems, such as DOS and Win95/98, allow users to perform any action with no restrictions, making it possible for general users to run packet sniffers indiscriminately. Caveat, sysadmin.<P>
However, you should be aware of some limitations. Most importantly, a software-based packet sniffer can be quite CPU intensive, particularly if a complex filter is applied against a busy network interface. Sniffing on critical machines (file servers, mail servers, etc.) can have a detrimental affect on their performance, and make you unpopular if done indiscriminately for extended lengths of time. Also, packet sniffers show you what is happening on the network only for a given point in time. Unlike more general network monitoring systems, the basic packet sniffer gives you no information regarding trending or overall utilization. Because of these shortcomings, the packet sniffer is most often employed when looking for a specific problem or trying to analyze behavior in a specific network session.<P>
In this article, I will provide examples for two sniffers -- <B>tcpdump</B> and <B>snoop</B>. Both of these are introduced, briefly, below:<P>
<B>tcpdump<P>
tcpdump</B> is a freely available sniffer available from the Lawrence Berkeley National Laboratory's Network Research Group. The source distribution can be obtained from <B>ftp://ftp.ee.lbl.gov/</B> along with the <B>libpcap</B> library, described as "a system-independent interface for user-level packet capture". You will need <B>libpcap</B> to compile <B>tcpdump</B>. Users of Linux and the free BSD variants for the PC may conveniently find <B>tcpdump</B> included as part of their distribution. Users of AIX may not be able to run the public domain version of <B>tcpdump</B> because of difficulties making the OS work with <B>libpcap</B>. AIX does, however, ship with a version of <B>tcpdump</B> based on an older release. Users of HP-UX may need to do some porting to get <B>tcpdump </B>and <B>libpcap</B> to compile, but users of 10.20 can obtain a patched source distribution at:<P>
<PRE>
http://hpux.petech.ac.za/hppd/hpux/Networking/Admin/tcpdump-3.4/.
</PRE>
<P>
<B>snoop<P>
snoop</B> is part of the Solaris 2.x distribution, and has some excellent features that make it a very capable packet sniffer. At the basic level, <B>tcpdump</B> and <B>snoop</B> are functionally equivalent; there are subtle differences, however, in their filter syntax and data output. I prefer <B>snoop</B> to <B>tcpdump</B>, and recommend its use on the Solaris OS.<P>
<B>Using Your Packet Sniffer</b><p>The best way to learn the ins and outs of your packet sniffer is to read the man page and practice with various options and expressions. In this discussion, I won't attempt to duplicate what is found in the man pages for <B>snoop</B> and <B>tcpdump</B>. Instead, I will cover what I believe to be their most useful options and provide a simple introduction into how filter expressions are built. The man pages for both of these tools are lengthy, and discuss the syntax and options in great detail. However, they must be read carefully -- the common practice of simply "skimming" for information can quickly get you lost.<P>
<B>Useful Options for tcpdump<P>
-N</B> -- Prints the "short" form of host names instead of FQDNs.<P>
<B>-i interface</B> -- Specifies the network interface to listen on.<P>
<B>-l</B> -- Buffers the stdout line. This handy when you want to watch the data display while capturing it.<P>
<B>-p</B> -- Specifies that the sniffer not put the interface in promiscuous mode. This is useful when you only want to monitor traffic to or from the host that you are logged into. This also prevents the sniffer from looking at other traffic on the wire.<P>
<B>-r file</B> -- Reads packets from <B>file</B> (which was created with the <B>-w</B> option)<P>
<B>-s snaplen</B> -- Captures <B>snaplen</B> bytes of data from each packet, rather than the default of 80. It's necessary when you need to see the actual application data within the packets.<P>
<B>-w file</B> -- Writes the raw, captured packets to <B>file</B>, which can be read using the <B>-r</B> option.<P>
<B>-x</B> -- Prints the contents of each packet, in hex, minus the link-level header. This is what actually lets you view the packet contents.<P>
<B>Useful Options for snoop<P>
-P</B> -- Do not put the interface into promiscuous mode -- like <B>-p</B> in <B>tcpdump</B>.<P>
<B>-d device</B> -- Specifies the network device to listen to -- like <B>-i</B> in <B>tcpdump</B>.<P>
<B>-i</B> <B>file</B> -- Reads packets from <B>file</B> (which was previously created using the <B>-o</B> option).<P>
<B>-o</B> <B>file</B> -- Writes the raw, captured packets to <B>file</B>.<P>
<B>-s</B> <B>snaplen</B> -- Truncates the packets after <B>snaplen</B> bytes. Note that this is different from <B>tcpdump</B>, in that <B>snoop</B> will read the whole packet if -s is omitted (<B>tcpdump</B> only reads 80 bytes by default).<P>
<B>-t [ a | d | r ]</B> -- Displays either an absolute, delta, or relative timestamp for each packet.<P>
<B>-x offset</B> [ <B>, length</B> ] -- Prints the contents of the packets in both hexadecimal and ASCII, starting at byte offset and, optionally, up to length bytes. If length is omitted, the rest of the packet is displayed.<P>
<B>Basic Filter Expressions</b><p>Though <B>tcpdump</B> and <B>snoop</B> have slightly different syntax, simple expressions can be built using a common approach. Each expression can be thought of as consisting of three primitives, all of which are optional:<P>
<PRE>
program [ options ] [ protocol ] [ direction ] [ type ] &lt; id &gt;
</PRE>
<P>
In the above example, the program would be either <B>tcpdump</B> or <B>snoop</B>, and the options would be the desired command-line switches to the sniffer. The actual filter expression consists of the arguments for <B>protocol</B>, <B>direction</B>, and <B>type</B>. If the sniffer is run with no arguments, the default behavior is to report all packets captured on the given interface:<P>
<P>
&#149;  Protocol specifies the protocol of interest and limits the reporting of packets to those matching that protocol. Typical values for protocol might be: <B>ip</B>, <B>arp</B>, <B>rarp</B>, <B>tcp</B>, <B>udp</B>, etc.<P>
&#149;  Direction limits the reporting of packets to those headed to, from, or between a host or pair of hosts. Typical values for direction might be <B>src</B>, <B>dst</B>, <B>src</B> or <B>dst</B>, or <B>src</B> and <B>dst</B>, but the exact set of legal values depends upon your sniffer. Read the man page for more information.<P>
&#149;  Type identifies what ID is, and would typically be <B>host</B>, <B>net</B>, <B>port</B>, etc. Again, exact syntax depends upon the sniffer being used. Generally, if type is omitted, ID is assumed to be a host name or IP address.<P>
<P>
Additionally, primitives can be combined with parentheses and boolean expressions, such as "and", "not", and "or". Each sniffer may have special keywords, such as multicast, broadcast, and arithmatic expressions, and advanced filters can even be built that examine specific bytes within the packet itself. Again, the man pages provide detailed information on the specific syntax for your sniffer.<P>
<B>Simple Examples</b><p>1. <B>snoop host gpws and port 23</B><P>
This monitors all traffic to and from "host gpws" on port 23, which has the effect of monitoring all <B>telnet</B> sessions on this machine. <B>snoop</B> is particularly good for this task, since it decodes the first few bytes of the packet for you, displaying them in ASCII without your specifying any options. This makes it relatively easy to monitor a given user's login session -- including when they enter their login password -- and makes a good argument for deploying ssh.<P>
<P>
2. <B>tcpdump -s 194 host nfssrv2 and port nfs</B><P>
This shows all NFS traffic to and from "nfssrv2" on the local subnet. Note that a snap length of 194 is required for the sniffer to completely decode NFS packets (the man page for <B>tcpdump</B> incorrectly states that 193 is the minimum size). This command will give you the NFS procedure, as well as target filehandles and filenames.<P>
<P>
3. <B>snoop -x 54 host www and port 80</B><P>
This displays the contents of HTTP packets going to and from the server "www". When using <B>tcpdump</B>, increase your snap length to see the entire contents of the packet.<P>
<P>
4. <B>tcpdump -x port smtp</B><P>
This shows all mail (SMTP) traffic on the local subnet. If run on a mail hub, this will grab all mail traffic to and from the machine. This demonstrates how easy it is to read users' email, and makes a good argument for using PGP for sensitive messages.<P>
<B>Hints and Tips</b><p>Simply knowing how to use your packet sniffer may not be enough. A well-constructed filter, for example, can be worthless if it is run on the wrong machine, or if the captured data can't be examined at a later time. In this section, I will point out some of the pitfalls in packet sniffing and discuss how to work around them.<P>
<B>Switched Networks</b><p>In a traditional Ethernet network, every machine on the local network sees every packet on the subnet. Although this was simple and cheap network design, it created a very large security hole -- any machine on the subnet could essentially monitor all the traffic on that subnet using a packet sniffer. In a switched environment, the hub is replaced with a switch that directs packets to the particular segment connected to the destination host. The end result is that, in a typical switch configuration, a machine only sees the traffic sent or received by itself. This is good for security, but makes the business of legitimate packet sniffing by administrators quite a bit more difficult.<P>
If you are in a switched environment, and you need to monitor traffic to or from a specific host, then you should log in to that host and sniff locally. If, for some reason, login access to the client is not possible, you can either sniff from the server, or set up a dedicated host on that segment to monitor the desired traffic. As a general rule, sniffing from the client machine is your best option, because it does not require extra hardware and won't create performance issues for the server machine.<P>
<B>Multi-Homed Machines</b><p>A machine with multiple network interfaces is sometimes referred to as being "multi-homed", since it exists on several different subnets. When sniffing on a multi-homed machine, you must first determine which interface is sending or receiving the desired traffic, then direct your sniffer at that interface. Note, however, that routing is not always intuitive or logical. It is completely reasonable for traffic to enter via one interface and leave through another. This means that a single sniffer may capture only half of the conversation between two machines. In general, when dealing with traffic between a multi-homed and single-homed machine, it's best to sniff from the single-homed one. If this is not possible, you may find it necessary to run multiple sniffers simultaneously, which can impair performance.<P>
<B>Using -s Wisely</b><p>The more data you capture from each packet, the more likely it is that your sniffer will drop packets during your session. Capturing packets is a CPU-intensive task, and heavy network activity can easily overwhelm a packet sniffer (and a CPU), particularly if you are using the <B>-x</B> option to display the packet contents. The purpose of the <B>-s</B> switch is to limit the amount of data that your sniffer must decode. By default, <B>snoop</B> will attempt to capture the entire packet, whereas <B>tcpdump</B> will only look at 80 bytes -- neither of these defaults are optimal for all situations. You should adjust your snap length for a particular session. Usually, that means capturing only as much of the packet that is needed for your investigation or analysis, particularly when on a chatty net.<P>
<B>Capture to a File</b><p>The best way to make the most of your packet sniffer is to capture the raw packets to a file, then run filters on the packet file. Running a broad filter and capturing a wide range of packets gives you the ability to fine-tune your filter expression after-the-fact and extract only the data you need. You will also have a permanent copy of the packets from that time interval, so you can run several different filters against it if you decide you need more (or less) information from the session. You can also recreate the output from your sniffer at any time, and in any format, that you need. Most importantly, however, is the fact that writing the raw packets to a file prevents I/O buffering problems. When you are running a packet sniffer live, you may not see the output from the most recent traffic; this typically means that the last packet or two from a particular session may never get displayed to your screen because the final packets of a conversation may not fill the output buffer for your tty.<P>
<B>Reading Application Data</b><p>The <B>-x</B> option allows you to view the packet data, which will show you what the particular application responsible for your packet is saying. With <B>snoop</B>, you must provide an offset to the <B>-x</B> option, which tells the sniffer where to start when displaying the packet contents. For a TCP/IP packet on an Ethernet network, the packet data starts at byte 54, so "-x 54" will display the application data without showing the packet headers. <B>snoop</B> also provides you an ASCII representation of the packet data, which is handy for monitoring those protocols that speak English (SMTP, HTTP, POP, IMAP, etc.).<P>
When using <B>tcpdump</B>, the <B>-x</B> option does not take an offset, so you will need to wade through several bytes of headers before seeing the actual application data. And, unlike <B>snoop</B>, <B>tcpdump</B> will not give you an ASCII representation of the packet data, showing only the raw hex output. I have provided a quick-and-dirty Perl script, called <B>tcpdascii</B>, which takes output from <B>tcpdump</B>'s <B>-x</B> option and provides a <B>snoop</B>-like ASCII representation of the data. <B>tcpdascii</B> is not a very robust or flexible program, but it does work. Note, however, that piping live <B>tcpdump</B> output to <B>tcpdascii</B> amplifies the I/O buffering problems mentioned above. So, capture your packets to a file first, and then run <B>tcpdump</B> with the <B>-x</B> option on the capture file and pipe the output to <B>tcpdascii</B>. (<B>tcpdascii</B> is available from <I>Sys Admin</I> at: <B>http://www.sysadminmag.com</B> or <B>http://ftp.mfi.com</B>.)<P>
<B>Hardware Implementation of Protocols</b><p>Some hardware vendors will manufacture task-specific servers that implement a particular protocol in hardware for increased performance. A common example would be high-end NFS file servers, where the NFS requests are processed in hardware running a dedicated kernel. In these cases, where a server is processing a particular protocol at the hardware level, your packet sniffer may not see the traffic because it's not passed up to the main kernel for processing. In these situations, you may have no choice but to sniff from the client machines or set up a dedicated sniffer on the subnets in question.<P>
<B>Case Studies</b><p>Once you are familiar with your packet sniffer and how to wield it effectively, you can put it to use solving everyday problems. Naturally, the uses of a packet sniffer are wide and varied and can't all be covered in the space of this article. Instead, I will discuss some real-world issues that I have encountered and describe how packet sniffers were used to resolve them. These examples provide only a glimpse of what is possible, but serve as good examples because of their simplicity.<P>
Note that the actual packet sniffer output is provided for most of these case studies, but usernames and hostnames have been modified to protect the privacy of the individuals involved.<P>
<B>Case Study #1: "NFS server fs11 not responding"</b><p>In this case, the user filed a request indicating that the error message "NFS server fs11 not responding" was repeating sporadically in his console window. To determine some sort of pattern, or cause-effect relationship between actions on the workstation (Sparc Solaris 2.5.1) and the error message, I logged on to his machine, ran <B>snoop</B> to examine the NFS traffic, and then ran <B>ls</B> against various remote filesystems exported by that NFS server. The output from this session is shown in Figure 1.<P>
I saw that NFS retransmits were being generated when <B>stat</B>-ing certain filesystems (see the READDIRPLUS3 procedure calls). A look at <B>/etc/exports</B> on the fs11 fileserver showed that the filesystems responsible for the errors all had <B>timeo=1</B> set in the parameter list, which is way too small for clients that run NFS version 3. This <B>timeo</B> parameter was a legacy setting for older filesystems, and it had never been removed.<P>
In this situation, the problem could have been identified without the use of a sniffer, but it immediately pointed me in the right direction.<P>
<B>Case Study #2: "Mail server configuration problem"</b><p>Our support group received a request from a user claiming that there was a "mail server configuration problem" with our mail hub. He said the problem was that a single invalid recipient prevented delivery of the message to any of the recipients (i.e., one bad address on the To: or Cc: line supposedly caused the entire message to bounce without delivering to anyone). I was skeptical, since this is not how the SMTP protocol is designed -- a single bad address will not prevent delivery to the entire list of recipients. I also knew from experience that our mail server was running properly.<P>
Since there was no problem with the mail server, my attention turned to the user's mail client. In this case, the user was running a Web server in his department, and was using an NT application that he downloaded off the Internet to send his email from a Web form. Since I could not log into the NT machine or examine the mail program's source code, I opted to run a network sniffer on the mail server and monitor the conversation between the client and server.<P>
Figure 2 shows an excerpt from the SMTP exchange. Because our mail server is multi-homed, only the server half of the conversation was captured. It was enough, however, to identify the source of the problem. Packet eight in the session shows the reply from the server to the client -- a properly formed 550 error in response to the invalid recipient specified by the client. However, packet nine shows that the mail server closed the connection with a 221, indicating that it received an explicit <B>QUIT</B> command from the client.<P>
I concluded that the mail server, was fine. The user's mail program was causing the problem. Instead of accepting the 550 (invalid recipient) error and moving on to the next recipient, the mail client incorrectly responded with a <B>QUIT</B> directive, aborting the SMTP session without sending the message for delivery.<P>
<B>Case Study #3: "POP server is deleting my mail"</b><p>In this problem, a user claimed that the POP server was deleting his email from the mail server, even though he had explicitly configured it not to do so. When he read his mail via POP, he could see all of his mail messages because they were downloaded to his local computer. Attempts to read his mail via UNIX mail clients (elm, pine, etc.) showed that his mail spool was empty.<P>
To investigate this claim, I decided to run a sniffer on the POP server and watch the POP dialogue to see whether the client was explicitly telling the server to delete the mail in the mail spool. I discovered, however, that it wasn't necessary to go this far.<P>
Figure 3 shows the relevant output from the very beginning of the POP session. Packet 19 shows the user login, and packet 21 shows the server response after the user's password was validated. In packet 21, the server is claiming that there are 983 messages in the user's mailbox. A look at <B>/usr/spool/mail/&lt;user&gt;</B> showed that the mail spool was, indeed, empty. So where was his mail?<P>
The answer was in the documentation for the POP server, which states that the <B>~/mbox</B> file will be used for storing incoming email, if it exists. A look at the user's home directory showed that he did, in fact, have an mbox file in his home directory, containing exactly 983 messages.<P>
<B>Case Study #4: "Can't access Web server"</b><p>Several users complained that they were receiving "Document contains no data" errors when trying to access a particular Web site on the Internet.<P>
The site in question was not viewable in either Netscape or MS Internet Explorer. However, Lynx (a text-based Web browser) was able to bring up the Web pages on the remote server just fine. Given that Lynx worked, and Netscape and MSIE did not, my first question was: What was Lynx doing differently?<P>
Suspecting that it might have something to do with the headers, I fired up a sniffer on our proxy server, and watched the conversation between the client, proxy, and destination server to capture the HTTP dialogue. Unfortunately, I do not have the packet sniffer output available, but it showed that the remote server was dropping the connection immediately after receiving the headers from Netscape and MSIE, whereas the Lynx session was allowed to complete.<P>
By examining the headers, I saw that MSIE and Netscape were sending a "Proxy-Connection: Keep-Alive" line, but Lynx was not. Using <B>telnet</B> to connect from the proxy server to the remote Web server on port 80, I spoke raw HTTP to the server and discovered that the "Proxy-Connection: Keep-Alive" header was the culprit -- the remote server immediately dropped the connection without sending back a document. There was not much I could do, other than disable "Keep-Alive" support on our proxy server, until the remote site resolved this issue.<P>
<B>Putting it All Together</b><p>I have barely scratched the surface of packet sniffers and their applications. The point, however, is that packet sniffers can help guide you to the answers to many common systems administration problems. Remember that the packet sniffer is not a solution in and of itself -- you must have some understanding of the underlying protocols that you are monitoring, and you must be able to understand and interpret what you see. The basics outlined in this article should provide you with a solid foundation for exploring more complex issues and problems on your own. <P>
<p>
<h1>About the Author</h1><p>
John Mechalas has a B.S. and M.S. in Aeronautical and Astronautical Engineering from Purdue University. He has worked at Intel Corporation for five years, where he currently manages a UNIX systems administration and security team for a large microprocessor design site. He can be reached at: johnm@ichips.intel.com.</BODY>




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>