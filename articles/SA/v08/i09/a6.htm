<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i09: Hardening a Host</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a6_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a6_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1999/sep99.tar"><b class=codeListing>sep99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Hardening a Host</H1><p>
<P>Dave D. Zwieback
<P>
</I>The first postulate of computer security is that no computer system can be completely secure. While this statement makes the work of computer security specialists seem like that of Sisyphus, rolling the heavy rock up the hill only to have it roll back to the bottom in a never-ending cycle, careful design of a system can greatly reduce the potential risk of compromise. Security must be balanced with user requirements, however. For instance, one of the most effective ways to improve security is not to connect the system to the network (like the Internet) and to restrict all physical access to it. This, unfortunately, defeats the purpose of having a system in the first place.<P>
In this article, I will focus on building a hardened host, which is to be connected to a network (like the Internet) and which will run one or more applications (e.g., a firewall, Web or mail servers, database servers). Any application adds its own distinct vulnerabilities to the mix; however, I will concentrate on making the underlying operating system as secure as possible as well as limiting the damage that compromised applications can cause. In my discussion, I use Solaris 2.6 as the default OS; however, the general concepts discussed here apply to most modern UNIX-based systems and beyond. Because of the narrow focus of this article, the discussion here is by no means all-inclusive. For a more complete approach to security, I refer the reader to the resources listed in the appendix.<P>
A successful approach to building a hardened host can be summarized in three steps:<P>
1. Disable all possible ways of accessing the system.<P>
2. Allow only those ways that are necessary for the user. <P>
3. Secure the allowed means of access.<P>
This bottom-to-top approach makes sure that nothing is missed. That said, let's examine areas of system vulnerability before delving into how to harden a host.<P>
<B>Vulnerabilities</b><p>Although the sheer number of potential vulnerabilities and exploits that have been documented to date can be staggering, most of these can be classified into only a few categories:<P>
<P>
1.  Denial of Service (DoS) <P>
2.  Buffer Overflows/Race Conditions <P>
3.  Trojan Horses/Viruses <P>
4.  Password Cracking <P>
5.  Improper permissions on admin files and programs<P>
<P>
A typical DoS attack succeeds when the attacked machine or service is disabled or its performance is severely impacted. For instance, an unhardened Solaris 2.5.1 host is susceptible to SYN and ICMP flooding attacks, which will often slow the machine down to a halt. Another example of a DoS vulnerability is incorrect quotas and permissions that may allow malicious users to fill up a file system. While under a DoS attack, the system or data is rarely compromised. However, DoS attacks are often used as part of larger attacks, and their impact can be equally severe. Consider, for example, the cost of an automated stock trading system that was unavailable for an hour because of a DoS.<P>
Perhaps the most dangerous category of vulnerabilities consists of buffer overflows and race conditions. Even though these types of vulnerabilities have been exploited for years, new ones are being constantly discovered in various parts of the OS and applications. In most cases, they arise due to unchecked user input (read: bad design). For instance, if a program (running as root) does no checking of user data input and normally expects a 4-bit integer as input, but instead receives a carefully constructed 4000-bit string, it may crash.  In the process, it may overwrite the stack and execute an arbitrary command (e.g., <B>/bin/sh</B>) as root. Buffer overflows are especially dangerous because, in many cases, they may be performed remotely (as in the recent <B>imapd</B> exploit).<P>
Race conditions are simply another variation on the "bad design" theme. In a typical scenario, a program writes to a temporary file in a directory that is publicly writeable (like <B>/tmp</B>). This file may be present for only a few seconds, but if a malicious user manages to replace it with a symbolic link to another file, the latter could be overwritten, possibly with improper permissions. This type of attack is commonly used to overwrite important system files (like <B>/etc/password</B> or <B>/etc/shadow</B>).<P>
An equally dangerous type of exploit is the so-called "Trojan Horse", a program that appears to be harmless but is not. For instance, a malicious user may compile a program called <B>ls</B> and place it in a public directory. When another user -- possibly root -- executes this program, it may act as the normal <B>ls</B> and show the contents of a directory, but it might also remove all the files in the directory, or change permissions for them. If a host has already been compromised, special sets of tools like RootKit and DaemonKit are often used to cover up the attack. These tools replace common binaries (like <B>ls</B>, <B>ifconfig</B>, and <B>ps</B>) with modified versions that hide the fact that the system has been broken into. Additionally, these tools can be used to bypass the standard log files or remove any trace of suspicious activity from them.<P>
Passwords are perhaps the weakest link in security. Besides being easily guessed, in a shared network like the Internet, passwords can be "sniffed" in transit, because in most cases the user's input is passed in plaintext. On older or improperly configured systems, encrypted passwords can be read from the <B>/etc/password</B> or <B>/etc/shadow</B> files, and there are a number of brute force tools available to crack these passwords.<P>
Finally, improperly set up systems often have important system files configured incorrectly, or perhaps have unnecessary setuid bits on programs that can be used to compromise the system's security. The good news is that careful system design will reduce the risk associated with most of the above mentioned vulnerabilities.<P>
<B>Presenting Vulnerabilities</b><p>The first step in designing a more secure system is to precisely define its purpose. Whether the system is going to be a Web server, an <B>ftp</B> server, a mail relay host, or a firewall will largely determine how it should be configured and what precautions should be taken to increase its security. In general, it is not recommended to run more than one application on a system since a vulnerability in one application can be used to compromise another.<P>
It follows that, to reduce the risk of exploit, the system should be configured with a bare minimum number of options. For example, you might install only the Solaris Core and the Terminal Information clusters, along with the latest recommended patch cluster from Sun. The disks should be partitioned to allow enough space for the logs stored in <B>/var</B>, and with additional swap space to help deal with DoS attacks. As an added precaution, the system should not be connected to the network until it is completely set up and secure.<P>
As much as it would be preferable to have all access to the system disabled by default, even this basic Solaris setup comes with a variety of potentially unsecure services enabled. Thus, the next step is to comb through the files in <B>/etc/rc*.d</B> directories (or <B>/etc/init.d</B>) and rename any that are associated with services that are not absolutely necessary. Perfect candidates for removal may be Sendmail, <B>tftp</B>, <B>nfs</B>, all of which have a rich history of vulnerabilities.<P>
Let's turn our attention to permissions of files. Solaris ships with the Automated Security Enhancement Tool (ASET), which automatically tightens system security by adjusting permissions on system files (among other things). The public domain program "fix-modes" does much the same thing.<P>
Ideally, there should not be any setuid programs on a secure system; however, Solaris comes with more than 70 setuid programs by default. It is advisable to go through all of them (<B>find / -perm -4000 -print</B>) and turn off the setuid bit unless it is required for the intended use of the system. To further decrease the risk of exploit, it makes sense to modify the <B>/etc/vfstab</B> to mount all file systems with the nosuid option. Taking this one step further, it is possible to mount the <B>/</B> and <B>/usr</B> file systems with the <B>ro</B> (read-only) option. Highly secure systems accomplish this by accessing these partitions from a CD-ROM or other physically read-only media.<P>
<B>Network Setup</b><p>Having a host connected to a network introduces a large set of vulnerabilities into the mix. For instance, by default, if more than one interface is enabled, Solaris will route between them, and this can be used to attack other systems. To disable routing, execute:<P>
<PRE>
touch  /etc/notrouter
</PRE>
<P>
Additionally, instead of using the dynamic routing that is enabled in Solaris by default, use static routing: disable the <B>in.routed</B> and <B>in.rdisc</B> daemons, create <B>/etc/defaultrouter</B>; add <B>/usr/bin/route</B> commands to <B>/etc/init.d/inetinit</B> file if multiple routes need to be defined.<P>
Since both DNS (bind) and NIS have been the subject of a number of well-publicized security breaches, it is best not to rely on these services for name resolution. Instead, where feasible, use the <B>/etc/hosts</B> file. DNS resolution should be used in all other cases, since NIS is extremely unsecure.<P>
Solaris 2.6 network settings should also be tuned to prevent a number of vulnerabilities (see Table 1 for <B>ndd</B> commands that should be added to the end of <B>/etc/init.d/inetinit</B>).<P>
<B>/etc/inetd.conf</B> is used by the <B>inetd</B> daemon for network services that are started on demand. Following the bottom-to-top philosophy, make a backup of <B>inetd.conf</B> and re-create it from scratch, including only those services that are necessary for the intended use of that specific system. Additionally, instead of running these services directly, install Wietse Venema's TCP Wrappers, which allow logging and limiting access. Table 2 lists additional replacement recommendations.<P>
Additionally, if the system is not used for receiving email, run Sendmail periodically run from cron to process outgoing mail rather than as a service.  This reduces resource utilization while improving the security of the system.<P>
<B>Preventing Buffer Overflows and Race Conditions</b><p>To prevent stack-based buffer overflows from being exploited, and to be notified when such an attempt is made, place the following two options in <B>/etc/system</B>:<P>
<PRE>
set noexec_user_stack=1
set noexec_user_stack_log=1
</PRE>
<P>
Since legitimate programs are commonly written to execute code from the stack, they will not work properly when <B>noexec_user_stack</B> is set to 1. Unfortunately, there is no way to allow some programs to execute code from the stack, and not others. The <B>noexec_user_stack</B> setting is system-wide, so test the particular programs by using the <B>noexec_user_stack_log</B> option and watching the <B>syslog</B> before enabling this setting.<P>
Preventing race conditions is best addressed by proper software design. However, if you have to use software that you didn't write and for which you have no source code, run <B>truss</B> on the program to see which files are being read or written. Once you identify the location of files that are being written with potentially dangerous permissions, change their location to a more secure area (if possible), or change their permissions by setting the proper <B>umask</B> value.<P>
<B>Preventing Trojan Horses and Viruses</b><p>Although viruses are rare on UNIX systems, Trojan horses abound. Once on the system, these programs are extremely difficult to deal with.  There may not be an easy way to find them, because  the tools that are used to locate them may be trojaned themselves! Thus the best way to deal with these malicious programs is proactively.<P>
ASET can (among other things) create a database of checksums of important files on the system and will alert the administrator if these files are modified. Tripwire is a more popular tool that has the same functionality. Whatever your tool of choice, it is advisable to keep the created database of checksums on write-protected media, like CD-ROM, and periodically scan the system for changed files. You should also keep a clean copy of system binaries on hand, again preferably on read-only media. This can be invaluable in case of a security breach.<P>
<B>Preventing Password Cracking</b><p>Password cracking is an extremely effective way to gain unauthorized access to a system. The encrypted passwords can be sniffed from a shared network, or obtained from compromised <B>/etc/passwd</B> or <B>/etc/shadow</B> files. Passwords are usually cracked either via brute force method (e.g., trying all 10-character combinations of letters and digits) or the so-called dictionary attacks (when all words in a dictionary are used). With the increase of CPU speed, programs like <B>crack</B> are extremely effective.<P>
A proactive method for ensuring good passwords on your system with Solaris 2.6 is to use its Pluggable Authentication Module (PAM) to ensure that easy-to-crack passwords are not used. S/Key (and other one-time password generation methods) is another popular way to provide an additional level of security against password cracking. At the very least, obtain the <B>crack</B> program and run it against your passwords to see if they can be easily cracked.<P>
<B>Log! Log! Log!</b><p>If a system has been compromised, nothing is more useful than  a complete log of the attack. One of the reasons why TCP Wrappers and other recommended Solaris program replacements are so useful is that they provide additional logging with their functionality. For instance, <B>wu-ftpd</B> can be configured to generate copious logs of activity that regular <B>ftpd</B> cannot.<P>
A log of logins and logouts can be enabled by touching the <B>/var/adm/loginlog</B> file (make sure it's owned by <B>root:sys</B> and has mode of 600). By modifying the <B>/etc/syslog.conf</B>, the <B>syslog</B> facility can be configured to generate additional information, and logs can be further separated by type into different files. Finally, at up to a 20% performance penalty, Solaris process accounting (<B>acct</B>) can be turned on.<P>
Security-related logs are best stored in encrypted format (e.g., with PGP); all logs need to be periodically archived, preferably onto a very secure system (i.e., one connected to the system periodically via a serial or SCSI connection, but not connected to any network) or at least onto tape.<P>
Finally, to ensure that the timestamps in the system log files are accurate, synchronize the system time with <B>xntp</B>.<P>
<B>Odds and Ends</b><p>Remove all but the necessary accounts on the system or lock them by putting "NP" in the password field of the <B>/etc/shadow</B> file. Verify that all users have a safe path and <B>umask</B> settings: <B>.</B> (current directory) should never be in the path due to risk of inadvertently running a trojaned program, and <B>umask</B> should be either 077 or 027. If possible, change the permissions on the <B>.login/.profile/.cshrc</B> files to prevent modification by the users.<P>
Consider disallowing root logins via the network by enabling the "CONSOLE" line in <B>/etc/default/login</B>. This way, especially with loginlog enabled, there will be a record of who <B>su</B>-ed into root. When <B>su</B>-ing into root, make sure that you use <B>/bin/su -</B>, which loads the proper environment and also runs <B>su</B> from its proper location. Add users that do not need <B>ftp</B> access to <B>/etc/ftpusers</B>.<P>
Review the permissions and the contents of the cron file for every system account in <B>/var/spool/cron/crontabs</B>. Delete unnecessary jobs or cron files, and enable cron logging by ensuring that <B>CRONLOG=YES</B> in <B>/etc/default/cron</B>.<P>
Consider the use of proxies for commonly compromised services such as Sendmail and <B>httpd</B>. Such proxies can be effective in making sure that valid data are passed to these vulnerable programs.  Some proxies simply check the validity of commands (including length, helping prevent buffer overflows), and several also add virus checking. As mentioned before, to reduce potential vulnerabilities, proxy should ideally run on a separate server.<P>
<B>Backing Up</b><p>After you've configured the system with security in mind, test it to make sure that it functions as you think it should. Visit security sites to learn of exploits used against your OS and applications and try them on your system (of course, with prior permission from management). Keep abreast of the latest developments by subscribing to security mailing lists, especially the full-disclosure ones (see bibliography).<P>
Upon completion, make a complete backup -- it will be extremely handy in case you have to ever restore a compromised system.  Store it in a safe place. In case the physical security of a site is compromised, you should have a set of known good backups offsite.<P>
<B>Wrapping Up</b><p>Although complete system security cannot be attained in our imperfect world, careful bottom-to-top design will lead to a system that is more resistant to attacks and that is able to recover more quickly. Many important topics that were not covered in this article include physical security, overall network security, application security, creating an effective security policy, and protecting against an extremely versatile hacking tool -- "social engineering". For a more complete security solution, all these topics must be considered.<P>
<B>Bibliography</B><P>
Galvin, Peter Baer. 1999. The Solaris Security FAQ -- <BR>
<B>http://www.sunworld.com/common/security-faq.html</B><P>
Darmohray, Tina and Phil Cox. 1998. <I>Computer Attacks: Trends and Countermeasures</I>. The Fourth Annual UNIX and NT Network Security Conference Course Book.<P>
Garfinkel, Simson and Gene Spafford. 1996. <I>Practical UNIX and Internet Security</I>. Second Edition. O'Reilly &amp; Associates.<P>
San Diego State University's NAC-Security Committee. 1998. Basic Solaris Security Setup -- <B>http://www.tns.sdsu.edu/security/solaris_setup.html</B><P>
Sun Microsystems -- <B>http://docs.sun.com</B> and <B>http://sunsolve.sun.com</B><P>
<B>Tools and Replacements</B><P>
Wietse Venema's TCP Wrappers and rpcbind -- <B>ftp://ftp.win.tue.nl/pub/security/</B><P>
fix-modes -- <B>ftp://ftp.fwi.uva.nl/pub/solaris/</B><P>
xntp (for systems prior to Solaris 2.6) -- <B>ftp://ftp.udel.edu/pub/ntp/</B><P>
Secure Shell (ssh) -- <B>http://www.cs.hut.fi/ssh/index.html</B> and <BR>
<B>http://www.datafellows.com/f-secure/</B><P>
Sendmail -- <B>ftp://ftp.cs.berkeley.edu/ucb/sendmail/ </B>and <B>http://www.sendmail.org</B><P>
Crack -- <B>ftp://sable.ox.ac.uk/pub/comp/security/software/crackers/</B><P>
wu-ftpd -- <B>ftp://wuarchive.wustl.edu/packages/wuarchive-ftpd</B><P>
Tripwire -- <B>ftp://coast.cs.purdue.edu/pub/tools/UNIX/Tripwire/</B><P>
<B>Security Resources</B><P>
L0pht Heavy Industries -- <B>http://www.l0pht.com</B><P>
Bugtraq -- <B>http://www.geek-girl.com/bugtraq/index.html</B><P>
<p>
<h1>About the Author</h1><p>
Dave D. Zwieback is the Technical Director of inkcom (www.inkcom.com), a New Jersey-based consultancy specializing in UNIX, Networks, Security, and Internet/Intranet development. He can be reached at: zwieback@inkcom.com.</BODY>




<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
