<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i12: Using Solaris Packages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a3_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a3_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/1999/dec99.tar"><b class=codeListing>dec99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Using Solaris Packages</H1><p>
<P>Dave Zwieback
<P>
There are many ways of distributing software to systems, the most commonly used way is via NFS (often in combination with the automounter). However, there are situations when particular software must be physically installed on systems, and this is usually accomplished with <B>tar</B> files. This method has a number of shortcomings that become especially apparent in large installations of complex software. In such situations, Solaris packages clearly emerge as the preferred way of distributing software, specifically due to the following features:<P>
<P>
&#149;  Uniform package installation and removal interfaces (<B>pkgadd</B> and <B>pkgrm</B>)<P>
&#149;  Ability to see exactly which (versions of) packages are installed on the system (<B>pkginfo</B>)<P>
&#149;  Ability to verify the integrity of the contents of the package (<B>pkgchk</B>)<P>
&#149;  Ability to specify package dependencies and/or incompatibilities (<B>depend</B>, <B>compver</B>)<P>
&#149;  Ability to specify additional space requirements for the package (<B>space</B>)<P>
&#149;  Ability to create custom, dynamic package installation and removal scripts (<B>request</B>, <B>checkinstall</B>, <B>preinstall</B>, <B>postinstall</B>; <B>preremove</B>, <B>postremove</B>, and Class Action scripts)<P>
<P>
I will not go into exhaustive detail about all of the powerful features of Solaris packages, which can be found in their full glory in the Application Packaging Developer's Guide. This article is intended as a primer that will allow you to start building functional packages right away.<P>
<B>Contents of a Package</b><p>Besides containing the installation files and directories ("package objects"), a package must also contain two "information files": <B>pkginfo</B>(4) and <B>prototype</B>(4). The <B>pkginfo</B> file includes the mandatory package abbreviation, name, architecture, version, and category, which are listed along with the most important optional parameters in Table 1.<P>
The <B>prototype</B> file contains information about each package object, such as its source and destination pathnames, ownership, and permissions. It is a space-delimited file with up to nine fields, the meanings of which are listed in Table 2.<P>
The package may also include optional package information files (<B>compver</B>(4), <B>depend</B>(4), <B>space</B>(4), and <B>copyright</B>(4)), and package installation and removal scripts. Collectively, all the information files and installation scripts are referred to as "control files". The prototype file must also specify the location of the <B>pkginfo</B> file, and other control files that are used in the package.<P>
<B>Building a Package</b><p>There are seven steps involved in building a package:<P>
<P>
1.  Create directory hierarchy and organize the object files.<P>
2.  Create the <B>pkginfo</B> file.<P>
3.  Create optional information files.<P>
4.  Create optional installation and removal scripts.<P>
5.  Create the prototype file.<P>
6.  Build the package.<P>
7.  Verify and transfer the package.<P>
<P>
We will follow the above steps and build a (not so simple) sample package called INKtest.<P>
<B>Step 1: Create Directory Hierarchy and Organize the Object Files</b><p>The first step is to create working a directory in which the package objects and control files will be placed. In this case, because we abbreviate the name of the sample package to INKtest, We create the directory <B>/home/test/INKtest</B> for the package objects. In this example, We know that the package requires <B>bin</B>, <B>doc</B>, <B>lib</B>, <B>man</B>, and <B>src</B> directories, so we create them under <B>/home/test/INKtest</B> and place the appropriate files there.<P>
We also have a symbolic link from <B>/home/test/INKtest/lib/liblink</B> to <B>/usr/lib/libauth.a</B> in order to demonstrate that we can also package links (and, for that matter, named pipes and devices). We also have a file (<B>etcfile1</B>) that should be placed in the <B>/etc</B> directory, and thus we create an <B>/etc</B> directory in our hierarchy. And don't forget the two Perl scripts (<B>script[12].pl</B>) in the scripts directory!<P>
Finally, we create a directory named <B>/home/test/control</B>, in which to store all of the information files and installation scripts. In the end, the hierarchy looks like this:<P>
<PRE>
unix# ls -R /home/test
/home/test:
INKtest          control

/home/test/INKtest:
bin      doc      etc      lib      man      scripts  src

/home/test/INKtest/bin:
binfile1  binfile2

/home/test/INKtest/doc:
docfile1  docfile2

/home/test/INKtest/etc:
etcfile1

/home/test/INKtest/lib:
libfile1  liblink1

/home/test/INKtest/man:
man1  man2

/home/test/INKtest/man/man1:
manfile1

/home/test/INKtest/man/man2:
manfile2

/home/test/INKtest/scripts:
script1.pl  script2.pl

/home/test/INKtest/src:
srcfile1  srcfile2

/home/test/control:
</PRE>
<P>
<B>Step 2: Create the pkginfo File</b><p>The second step in creating a package is defining the required information about it. In this case, the <B>pkginfo</B> file will look as follows:<P>
<PRE>
PKG="INKtest"
NAME="Sys Admin Test Package"
ARCH="sparc"
VERSION="0.1"
CATEGORY="application"
DESC="This is a test package for Sys Admin on the sparc platform"
VENDOR="inkcom Communications"
EMAIL="zwieback@inkcom.com"
CLASSES="none scripts"
PSTAMP="December 1, 1999"
BASEDIR="/opt "
</PRE>
<P>
It is customary for PKG (the abbreviated name of the package) to start with up to four letters uniquely identifying the company creating the package. Additionally, the PSTAMP parameter can be used to provide other information (namely, the date of the creation of the package); if not defined, the default of string of "machinenameYYMMDDHHMM" is used.<P>
CLASSES are extremely useful means of grouping package objects, primarily because of Class Action scripts, which allow a series of actions to be performed on a group of objects at installation or removal. In INKtest, most of the package objects belong to  the default class "none", except for the two Perl scripts that belong to the class "scripts". In Step 4, we will write a Class Action script for this class to modify the location of the Perl interpreter from <B>/usr/bin/perl</B> to <B>/usr/local/bin/perl</B>. In Step 5, we will add objects to a class using the <B>prototype</B> file. All the classes that are used in a package must be listed in the <B>pkginfo</B> file.<P>
We chose <B>/opt</B> as the default installation directory for the "relocatable" files in this package -- because of the nature of the software, most of the package objects in INKtest can be installed in any directory, and are thus "relocatable". The one file in INKtest that is not relocatable is <B>etcfile1</B>, since it must go into <B>/etc</B>. In Step 5, we will create the prototype file that will specify which package objects are relocatable.<P>
Now that I have defined some basic information about the package, we can specify what will go into the package.<P>
<B>Step 3: Create Optional Information Files</b><p>The third step is to create the information files, which are optional, but extremely useful nonetheless. Specifically, we want to specify package dependencies using a <B>depend</B> file, ensure that additional disk space for our log files is available with a <B>space</B> file, and finally print a copyright message.<P>
Using a <B>depend</B> file allows us to establish three types of dependencies: prerequisite packages (P), reverse dependencies (R) (i.e., other packages depend on the existence of the current package -- a feature that is rarely used) and incompatible packages (I). In the simplest form, the format of the <B>depend</B> file includes a line for each package as follows:<P>
<PRE>
type    PKG    NAME
</PRE>
<P>
PKG and NAME can be easily obtained using <B>pkginfo</B>(1). Since our Perl scripts rely on the existence of the Perl interpreter, we must verify that the Perl package is installed on the system:<P>
<PRE>
unix# pkginfo | grep perl
utility perl5       perl 5.004.04 SPARC \
                      Solaris 2.6
</PRE>
<P>
Thus, our depend file looks as follows:<P>
<PRE>
P perl5 perl 5.004.04 SPARC Solaris 2.6
</PRE>
<P>
Next, we create the <B>space</B> file. Since we need space for the INKtest log file, which will be placed in <B>/var/adm</B> and which will take at least 10 Mb of disk space, our <B>space</B> file will contain:<P>
<PRE>
/var/adm    20480    1
</PRE>
<P>
The package INKtest will not get installed on a system unless it has 20480 512-byte blocks of disk space and at least 1 inode free on the partition where <B>/var/adm</B> resides.<P>
Our last optional information file will be the copyright message:<P>
<PRE>
Copyright (c) 1999 inkcom Communications
All Rights Reserved
</PRE>
<P>
Finally, here is a quote from the <B>compver</B> man page:<P>
       Since some packages may require installation of a specific version of another software package, compatibility information is extremely crucial. Consider, for example, a package called 'A', which requires version '1.0' of application 'B' as a prerequisite for installation. If the customer installing 'A' has a newer version of 'B' (version 1.3), the compver file for 'B' must indicate that '1.3' is compatible with version '1.0' in order for the customer to install package 'A'.<P>
In our case, since this is the first version of the package, we don't have to worry about the condition described in the man page entry, but this is something to keep in mind when creating subsequent versions. For instance, if versions 0.1, 0.2, and 1.0.2 were all compatible, our <B>compver</B> file would look as follows:<P>
<PRE>
0.1
0.2
1.0.2
</PRE>
<P>
<B>Step 4: Create Optional Installation and Removal Scripts</b><p>One of the most powerful features of Solaris packages is the ability to use installation scripts. These scripts are Bourne shell (sh) scripts, and can be one of the following four types:<P>
<P>
Request script -- Requests data from the administrator installing the package for assigning or redefining environment variables<P>
Checkinstall script -- Examines the system for needed data, can set or modify package environment variables, and determines whether or not the installation proceeds (only in Solaris 2.5 and later)<P>
Procedure scripts -- Preinstall, postinstall, preremove, and postremove scripts<P>
Class Action scripts -- Actions applied to a class of package objects during installation or removal<P>
<P>
For demonstration purposes, we will create a Class Action script to set the proper location of the Perl interpreter in the two Perl programs that belong to the class "scripts". In accordance with the Class Action script naming convention (<B>i.classname</B> and <B>r.classname</B> for installation and removal scripts, respectively), we call our script <B>i.scripts</B>:<P>
<PRE>
while read src dest
do
        sed 's/\/usr\/bin/\/usr\/local\/bin/' $src &gt; $dest || exit 2
done
exit 0
</PRE>
<P>
Note that the above script is responsible for installing the files into their ultimate destination. The <B>sed</B> command takes the source files (taken from the <B>prototype</B> file and passed as <B>$src</B>), replaces <B>/user/bin</B> with <B>/usr/local/bin</B> on the first line, and redirects the output into the destination files (passed as <B>$dest</B>), thus creating them or overwriting them if they already exist. In the absence of a Class Action script, <B>pkgadd</B> and <B>pkgrm</B> will simply copy or delete the file to or from its destination. As with other information files, their location is specified in the <B>prototype</B> file.The use of the installation scripts is discussed in exhaustive detail in the Application Packaging Developer's Guide.<P>
<B>Step 5: Create the Prototype File</b><p>The fifth step is to create the required prototype file. The easiest way is by using the <B>pkgproto</B>(1) command:<P>
<PRE>
unix# cd /home/test
unix# pkgproto ./INKtest &gt; control/prototype
</PRE>
<P>
(Alternatively, you may use <B>find ./INKtest | pkgproto &gt; control/prototype</B>).<P>
The resulting prototype file looks as follows:<P>
<PRE>
d none INKtest 0755 root other
d none INKtest/bin 0755 root other
f none INKtest/bin/binfile2 0755 root other
f none INKtest/bin/binfile1 0755 root other
d none INKtest/doc 0755 root other
f none INKtest/doc/docfile2 0644 root other
f none INKtest/doc/docfile1 0644 root other
d none INKtest/lib 0755 root other
f none INKtest/lib/libfile1 0755 root other
s none INKtest/lib/liblink1=/usr/lib/libauth.a
d none INKtest/man 0755 root other
d none INKtest/man/man1 0755 root other
f none INKtest/man/man1/manfile1 0644 root other
d none INKtest/man/man2 0755 root other
f none INKtest/man/man2/manfile2 0644 root other
d none INKtest/src 0755 root other
f none INKtest/src/srcfile2 0644 root other
f none INKtest/src/srcfile1 0644 root other
d none INKtest/etc 0755 root other
f none INKtest/etc/etcfile1 0644 root other
d none INKtest/scripts 0755 root other
f none INKtest/scripts/script1.pl 0755 root other
f none INKtest/scripts/script2.pl 0755 root other
</PRE>
<P>
As listed in Table 2, the first column (since part number is optional and not used) is the ftype: <B>d</B> is a directory, <B>f</B> is a standard file (as opposed to special files), <B>s</B> stands for symbolic link. The other ftypes that we will use in this article are: <B>i</B> (installation script or information file), <B>e</B> (editable file), and <B>v</B> (volatile file, like the INKtest log file).<P>
First, we modify the above prototype file, to include the location of the <B>pkginfo</B> file:<P>
<PRE>
i pkginfo=/home/test/control/pkginfo
</PRE>
<P>
Since <B>etcfile1</B> must reside in <B>/etc</B>, we need to change:<P>
<PRE>
d none INKtest/etc 0755 root other
f none INKtest/etc/etcfile1 0644 root other

to:

d none /etc ? ? ?
f none /etc/etcfile1=INKtest/etc/etcfile1 0644 root other
</PRE>
<P>
The question marks in <B>d none /etc ? ? ?</B> simply mean that the file or directory already exists on the system and should not be changed.<P>
We also need to modify the two lines referring to the Perl scripts: they must be of the type <B>e</B>, and belong to the "scripts" class in order for them to be modified by our Class Action script:<P>
<PRE>
e scripts INKtest/scripts/script1.pl 0755 root other
e scripts INKtest/scripts/script2.pl 0755 root other
</PRE>
Of course, we need Perl to be installed on the system to run the scripts above. Thus, before we install INKtest, we should verify that it is indeed installed and specify the location of the <B>depend</B> file created in Step 3:<P>
<PRE>
i depend=/home/test/control/depend
</PRE>
<P>
We also include a quick <B>copyright</B>(4) message:<P>
<PRE>
i copyright=/home/test/control/copyright
</PRE>
<P>
Additionally, INKtest requires a log file <B>/var/adm/INKtest</B> (initially blank), and there is a special ftype of <B>v</B> (for volatile) used for just such files:<P>
<PRE>
d none /var ? ? ?
d none /var/adm ? ? ?
v none /var/adm/INKtest=/dev/null 0600 root other
</PRE>
<P>
Since <B>/var/adm/INKtest</B> tends to get rather large, we need to make sure that this space is available on the system before installing the package. We will accomplish this in Step 4 when we create a <B>space</B>(4) file, which must be specified in the prototype file:<P>
<PRE>
i space=/home/test/control/space
</PRE>
<P>
Finally, we specify the installation Class Action script location:<P>
<PRE>
i i.scripts=/home/test/control/i.scripts
</PRE>
<P>
The new prototype file is listed below:<P>
<PRE>
i pkginfo=/home/test/control/pkginfo
i depend=/home/test/control/depend
i copyright=/home/test/control/copyright
i space=/home/test/control/space
i i.scripts=/home/test/control/i.scripts
d none INKtest 0755 root other
d none INKtest/bin 0755 root other
f none INKtest/bin/binfile2 0755 root other
f none INKtest/bin/binfile1 0755 root other
d none INKtest/doc 0755 root other
f none INKtest/doc/docfile2 0644 root other
f none INKtest/doc/docfile1 0644 root other
d none INKtest/lib 0755 root other
f none INKtest/lib/libfile1 0755 root other
s none INKtest/lib/liblink1=/usr/lib/libauth.a
d none INKtest/man 0755 root other
d none INKtest/man/man1 0755 root other
f none INKtest/man/man1/manfile1 0644 root other
d none INKtest/man/man2 0755 root other
f none INKtest/man/man2/manfile2 0644 root other
d none INKtest/src 0755 root other
f none INKtest/src/srcfile2 0644 root other
f none INKtest/src/srcfile1 0644 root other
d none /etc ? ? ?
f none /etc/etcfile1=INKtest/etc/etcfile1 0644 root other
d none INKtest/scripts 0755 root other
e scripts INKtest/scripts/script1.pl 0755 root other
e scripts INKtest/scripts/script2.pl 0755 root other
d none /var ? ? ?
d none /var/adm ? ? ?
v none /var/adm/INKtest=/dev/null 0600 root other
</PRE>
<P>
The prototype file is extremely powerful, and only basic functionality has been covered in this article. Again, please refer to the man pages as well as the Developer's Guide for complete information.<P>
<B>Step 6: Build the Package</b><p>Next, we build the package using <B>pkgmk</B>(1):<P>
<PRE>
unix# cd /home/test/control
unix# pkgmk -o -b /home/test
## Building pkgmap from package prototype file.
## Processing pkginfo file.
## Attempting to volumize 26 entries in pkgmap.
part  1 -- 267 blocks, 33 entries
## Packaging one part.
/var/spool/pkg/INKtest/pkgmap
/var/spool/pkg/INKtest/pkginfo
/var/spool/pkg/INKtest/root/etc/etcfile1
/var/spool/pkg/INKtest/root/var/adm/INKtest
/var/spool/pkg/INKtest/reloc/INKtest/bin/binfile1
/var/spool/pkg/INKtest/reloc/INKtest/bin/binfile2
/var/spool/pkg/INKtest/reloc/INKtest/doc/docfile1
/var/spool/pkg/INKtest/reloc/INKtest/doc/docfile2
/var/spool/pkg/INKtest/reloc/INKtest/lib/libfile1
/var/spool/pkg/INKtest/reloc/INKtest/man/man1/manfile1
/var/spool/pkg/INKtest/reloc/INKtest/man/man2/manfile2
/var/spool/pkg/INKtest/reloc/INKtest/scripts/script1.pl
/var/spool/pkg/INKtest/reloc/INKtest/scripts/script2.pl
/var/spool/pkg/INKtest/reloc/INKtest/src/srcfile1
/var/spool/pkg/INKtest/reloc/INKtest/src/srcfile2
/var/spool/pkg/INKtest/install/copyright
/var/spool/pkg/INKtest/install/depend
/var/spool/pkg/INKtest/install/i.scripts
/var/spool/pkg/INKtest/install/space
## Validating control scripts.
## Packaging complete.
</PRE>
<P>
The above command creates the directory <B>/var/spool/pkg/INKtest</B>, in which it copies the <B>pkginfo</B> file and creates the <B>pkgmap</B> file:<P>
<PRE>
: 1 267
1 d none /etc ? ? ?
1 f none /etc/etcfile1 0644 root other 958 22646 936996453
1 d none /var ? ? ?
1 d none /var/adm ? ? ?
1 v none /var/adm/INKtest 0600 root other 0 0 937003138
1 d none INKtest 0755 root other
1 d none INKtest/bin 0755 root other
1 f none INKtest/bin/binfile1 0755 root other 5122 54390 936996395
1 f none INKtest/bin/binfile2 0755 root other 52620 14902 936996419
1 d none INKtest/doc 0755 root other
1 f none INKtest/doc/docfile1 0644 root other 1624 4378 936996434
1 f none INKtest/doc/docfile2 0644 root other 1041 11294 936996439
1 d none INKtest/lib 0755 root other
1 f none INKtest/lib/libfile1 0755 root other 26372 37864 936996532
1 s none INKtest/lib/liblink1=/usr/lib/libauth.a
1 d none INKtest/man 0755 root other
1 d none INKtest/man/man1 0755 root other
1 f none INKtest/man/man1/manfile1 0644 root other 8670 31098 936996550
1 d none INKtest/man/man2 0755 root other
1 f none INKtest/man/man2/manfile2 0644 root other 6460 35141 936996560
1 d none INKtest/scripts 0755 root other
1 e scripts INKtest/scripts/script1.pl 0755 root other 544 39584 936999236
1 e scripts INKtest/scripts/script2.pl 0755 root other 498 39260 936999245
1 d none INKtest/src 0755 root other
1 f none INKtest/src/srcfile1 0644 root other 1738 5997 936996612
1 f none INKtest/src/srcfile2 0644 root other 951 5682 936996629
1 i copyright 61 5425 936986213
1 i depend 40 2858 936986148
1 i i.scripts 97 8063 936999971
1 i pkginfo 261 22068 937003862
1 i space 17 1060 936986493
</PRE>
<P>
The contents of the <B>pkgmap</B> are quite similar to that of the prototype file. The differences are that the first column is the part number, and the last three are the size of the file, the checksum, and the datestamp of each object file. In addition, the first line specifies the number of parts and the maximum part size (in blocks).<P>
It is also worthwhile to investigate the structure of the resulting directories in <B>/var/spool/pkg/INKtest</B>. The install directory contains our control files (<B>copyright</B>, <B>depend</B>, and <B>space</B>, and Class Action script <B>i.scripts</B>); the <B>root</B> directory contains package objects that cannot be relocated, while the <B>reloc</B> directory contains the relocatable ones.<P>
<B>Step 6: Verify and Transfer the Package</b><p>We use <B>pkgchk</B>(1) to verify the contents of the package:<P>
<PRE>
unix# pkgchk -d /var/spool/pkg INKtest
Checking uninstalled directory format package &lt;INKtest&gt; from \
  &lt;/var/spool/pkg&gt;
## Checking control scripts.
## Checking package objects.
## Checking is complete.
</PRE>
<P>
At this point, we can either <B>tar</B> and <B>compress</B> the INKtest directory, or use the <B>pkgtrans</B>(1) command to create a datastream package file:<P>
<PRE>
unix# pkgtrans -s /var/spool/pkg /tmp/INKtest
The following packages are available:
  1  INKtest     Sys Admin Test Package
                 (sparc) 0.1
                 

Select package(s) you wish to process (or 'all' to process
all packages). (default: all) [?,??,q]: 1
Transferring &lt;INKtest&gt; package instance
</PRE>
<P>
To further verify that our package does what it's supposed to, we can actually install it:<P>
<PRE>
unix# pkgadd
</PRE>
<P>
The following packages are available:<P>
<PRE>
  1  INKtest     Sys Admin Test Package
                 (sparc) 0.1

Select package(s) you wish to process (or 'all' to process
all packages). (default: all) [?,??,q]: 1

Processing package instance &lt;INKtest&gt; from &lt;/var/spool/pkg&gt;

Sys Admin Test Package
(sparc) 0.1
Copyright (c) 1999 inkcom Communications
All Rights Reserved
Using &lt;/opt&gt; as the package base directory.
## Processing package information.
## Processing system information.
   4 package pathnames are already properly installed.
## Verifying package dependencies.
## Verifying disk space requirements.
## Checking for conflicts with packages already installed.
## Checking for setuid/setgid programs.

This package contains scripts which will be executed with super-user
permission during the process of installing this package.

Do you want to continue with the installation of &lt;INKtest&gt; [y,n,?] y

Installing Sys Admin Test Package as &lt;INKtest&gt;

## Installing part 1 of 1.
/etc/etcfile1
/opt/INKtest/bin/binfile1
/opt/INKtest/bin/binfile2
/opt/INKtest/doc/docfile1
/opt/INKtest/doc/docfile2
/opt/INKtest/lib/libfile1
/opt/INKtest/lib/liblink1 &lt;symbolic link&gt;
/opt/INKtest/man/man1/manfile1
/opt/INKtest/man/man2/manfile2
/opt/INKtest/src/srcfile1
/opt/INKtest/src/srcfile2
/var/adm/INKtest
[ verifying class &lt;none&gt; ]
[ verifying class &lt;scripts&gt; ]

Installation of &lt;INKtest&gt; was successful.

The package is now installed:

unix# pkginfo | grep INKtest
application INKtest        Sys Admin Test Package

unix# pkginfo -l INKtest
   PKGINST:  INKtest
      NAME:  Sys Admin Test Package
  CATEGORY:  application
      ARCH:  sparc
   VERSION:  0.1
   BASEDIR:  /opt
    VENDOR:  inkcom Communications
      DESC:  This is a test package for Sys Admin on the sparc platform
    PSTAMP:  December 1, 1999
  INSTDATE:  Sep 10 1999 17:56
     EMAIL:  zwieback@inkcom.com
    STATUS:  completely installed
     FILES:     26 installed pathnames
                 3 shared pathnames
                12 directories
                 5 executables
               214 blocks used (approx)
</PRE>
<P>
<B>Conclusion</b><p>Solaris packages are one of the most effective ways of distributing software consistently across multiple systems. Additionally, packaging software is extremely flexible, aided by the fully functional installation and removal scripts. This article only begins to uncover the power of this method of software distribution, which have been used by almost all software vendors (and www.sunfreeware.com) for many years. I encourage those reader responsible for maintaining software in large environments to further investigate the tools by reading the Application Packaging Developer's Guide.<P>
<B>Bibliography</b><p>Sun Microsystems. 1997. Application Packaging Developer's Guide. <B>http://docs.sun.com</B><P>
Christensen, Steven M. 1999. Creating <B>pkgadd</B> Software Packages under Solaris. <B>http://www.sunfreeware.com/pkgadd.html</B><P>
In side Solaris. January 1997. Packaging groups of files for distribution. <B>http://www.zdjournals.com/sun/9701/sun9712.htm</B> <P>
<p>
<h1>About the Author</h1><p>
Dave D. Zwieback is the Technical Director of inkcom (www.inkcom.com), a New Jersey-based consultancy specializing is Unix, Networks, Security, and Internet/Intranet development. He can be reached at zwieback@inkcom.com.</BODY>


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
