<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i12: Verifying Dates and Times for the Millennium</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/1999/dec99.tar"><b class=codeListing>dec99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Verifying Dates and Times for the Millennium</H1><p>
<P>Lenard Morin and Ed Schaefer
<P>
Although the millennium bug seems to be on everybody's mind, most UNIX administrators might think it's more of a problem for our mainframe brethern. After all, UNIX and its associated modern Relational Database Management Systems (RDMS) have been on the cutting edge for solving problems such as this.<P>
But what about the "flat file" ASCII loads that may update your RDMS? As an administrator, are you going to trust that data from an outside source is the correct format or are you going to verify it?<P>
This article addresses a shell script, <B>chkdate.sh</B>, and an awk program, <B>chkdate.awk</B>, which validate and correct variable-length, field-delimited, date and datetime ASCII data. <B>chkdate.sh</B> parses the command-line options and calls a companion awk script. The awk script reads a configuration file, reads the input data file, validates each date and datetime field against a predefined mask, and writes the data to an output file.<P>
As the data input file is read, each field is correctly verified character-by-character against a specified mask. Since the mask is an absolute check, the data of the field must follow the mask exactly. For example, if the mask is MM/DD/YY, data 1/1/99 will fail. Also, for the same mask, 01/01/1999 will fail, because the mask expects a two-digit year.<P>
Given the same two-digit year mask, MM/DD/YY, after the data is verified for accuracy, the year is extended to four digits. Extending the date mask to four digits eliminates the millennium problem. Of course, the program must have some alogithm for determining whether a two-digit year is a 1900 year or a 2000 year. In this case, the program assumes the two-digit years 51-99 are 1900 dates (1951-1999) and the years 00-50 are 2000 dates (2000-2050). This scheme works well for our data, but you may wish to adapt the program to use a different algorithm depending on the nature of your own data.<P>
If any errors occur while processing the mask, an entry is made in an error log file and the shell script terminates.<P>
<B>The chkdate.cmd Configuration File</b><p>For example, the following two data records need the second, fourth, and sixth fields verified for accuracy:<P>
<PRE>
11111|08/15/99|33333|1999-08-15 23:59:59||99-02-28||
11111|02/29/00|33333|1999-09-08 23:23:49||00-02-29||
</PRE>
<P>
For greater flexibility, the field number to be verified and its associated mask (delimited by a comma) are stored in a configuration file, <B>chkdate.cmd</B> (Listing 1).<P>
The masks for these three fields:<P>
<PRE>
2,MM/DD/YY,N
4,YYYY-MM-DD hh:mm:ss,Y
6,YY-MM-DD,Y
</PRE>
<P>
deliver the following output file:<P>
<PRE>
11111|08/15/1999|33333|1999-08-15 23:59:59||1999-02-28||
11111|02/29/2000|33333|1999-09-08 23:23:23||2000-02-29||
</PRE>
<P>
The mask fields are:<P>
<PRE>
M - Month
D - Day
Y - Year
h - Hour
m - Minute
s - Second
</PRE>
<P>
The third field of the configuration determines how null or undefined fields will be processed. 'Y'es allows null fields and 'N'o does not.<P>
<B>The chkdate.sh Shell Script</b><p>The <B>chkdate.sh</B> shell script (Listing 2) executes:<P>
<PRE>
chkdate.sh [-F"Fs"] [-f awkfile] [-c cmdfile] [-i infile] [-o outfile]
</PRE>
<P>
where the command-line switches are:<P>
<PRE>
-F  value  Field separator for data records   # default |
-f  name   Awk program file name              # default chkdate.awk
-c  name   Command file name                  # default chkdate.cmd
-i  name   Input file name                    # default data.in
-o  name   Output file name                   # default data.out
-h         Usage message display
</PRE>
<P>
The while loop/case statements support the variable number of arguments. The shell shift command shifts arguments to the left (<B>$2</B> to <B>$1</B>, <B>$3</B> to <B>$2</B>, etc.) decrementing the number of variables, "$#". Whitespace between the command-line switches is optional.<P>
The field separator, <B>-F</B>, by default is the pipe symbol (<B>|</B>). When attempting to change the field separator to any of the shell's special characters:<P>
<PRE>
;  &amp;  (  )  |  ^  &lt;  &gt;
</PRE>
<P>
the file separator must be quoted:<P>
<PRE>
chkdate.sh -F "\&amp;"
</PRE>
<P>
The chkdate.awk awk Script</b><p>After parsing the command-line arguments, an accompanying awk script, Listing 3, processes the data corresponding to the following pseudocode:<P>
<P>
1. Read the configuration file into an array.<P>
<P>
Skipping any blank line or comment, the records in the configuration are parsed into a one-dimensional array, entry, where subscript 1 is the field number, subscript 2 is the mask, and subscript 3 is the optional required field flag.<P>
Using the associative properties of awk arrays, the subscript 1 of entry becomes the index of the 2-dimensional <B>cmd</B> array. The mask and the required field flag are set to the <B>cmd[x, 1]</B> and <B>cmd[x, 2]</B>, respectively.<P>
Awk only emulates multi-dimensional arrays. So, in order to access individual elements of the array, the non-printable separator, SUBSEP, must be used as:<P>
<PRE>
   split(NFLD, fld, SUBSEP)
</PRE>
   <P>
For each record in the input file and for each field to be validated:<P>
<P>
2.  If a required field is null, set an error.<P>
<P>
3. If the lengths of mask and field value differ, set an error.<P>
<P>
4.  Concatenate characters to build date and time components according to  the mask.<P>
<P>
5.  If the year is two-digit, extend the century to four characters.<P>
The algorithm used to extend the century is: any year greater than 50 and less than or equal to 99 is 19, and everything else is 20.<P>
<P>
6.  If the date is not valid, set an error.<P>
The <B>is_leap_year</B> function is the Gregorian calendar check for leap year. Leap year is a year evenly divisible by 4, provided the year is not divisible by 100, except when divisible by 400. Thus, 2000 is a leap year; whereas 1900 is not.<P>
Earlier versions of awk do not perform automatic character-to-numeric conversions. To force a conversion, add the variable in question to itself and add a zero (0). See the function validate in the awk script.<P>
<P>
7. If time is not valid, set an error. The time is strictly 24-hour clock. Midnight is 0000, not 2400.<P>
<P>
8. If an error is set, write the record number, offending field number, and error text to the error log file and terminate.<P>
<P>
9. If no error, write the record to the output file.<P>
<B>Conclusion<P>
chkdate.sh</B> is a modest attempt at verifying dates and datetimes. Although it handles our millennimum date verification problems, it may not handle yours. Some possible modifications are:<P>
1. Determine another algorithm for extending the century. For example, consider a birthdate of 05/10/30. <B>chkdate</B> now extends the century to 05/10/2030, which is too far in the future to make sense. Shift the paradigm so that if the extended date in the previous century (1930) makes more sense, use it.<P>
2. Expand single-digit month and day with a preceding zero (i.e., 1/1/1999 is changed to 01/01/1999).<P>
3. Expand the datetime check beyond seconds. Some databases support 10,000th of a second.<P>
4. Expand the time check to handle a.m. and p.m.<P>
<B>References</b><p>Aho, Alfred, Brian Kernighan, Peter Weinberger. 1988. <I>The Awk Programming Language</I>. Addison-Wesley.<P>
Dougherty, Dale. <I>Sed &amp; Awk</I>. 1991. O'Reilly &amp; Associates.<P>
Latham, Lance. 1998. <I>Standard C Date/Time Library, Programming the World's Calendars and Clocks</I>. Miller Freeman. <P>

<h1>About the Author</h1><p>
Lenard Morin is a senior software consultant employed by Meridian Technology group of Portland, OR. Meridian provides consultants in the Pacfic Northwest and Arizona. He can be reached at: lenard@meridiangroup.com.<P>
Ed Schaefer is a senior programmer/analyst for Intel's Factory Information and Control System (IFICS) Group in Hillsboro, OR.  His viewpoints on the millennium problem or any other subject in no way reflects Intel's position. He can be reached at: olded@ix.netcom.com. </BODY>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>