<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i12: TCP/IP Troubleshooting in AIX Using Network Packet Traces</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a6_f4.htm">Figure 4</a></span></td>
		<td><a href="../../../../source/SA/1999/dec99.tar"><b class=codeListing>dec99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>TCP/IP Troubleshooting in AIX Using Network Packet Traces</H1><p>
<P>James Santos
<P>
Have you ever wanted to troubleshoot network problems and found that the tools at your disposal fell short of giving you the details? Or have you ever wanted to buy that Protocol Analyzer but could not afford to do so? Many systems administrators have encountered these obstacles.<P>
Some UNIX systems provide utilities that can function as a poor man's protocol analyzer. These utilities put an interface into promiscuous mode, thus allowing the capture of frames. AIX provides the <B>iptrace</B> utility. This utility, combined with <B>ipreport</B>, provides a formatted and readable network-packet trace output. In this article, I discuss how you can use AIX's <B>iptrace</B> and <B>ipreport </B>to troubleshoot network problems. I provide a sample output of the program and a brief interpretation of this output. Additionally, I  provide a shell program for monitoring some <B>netstat</B> statistics over time.<P>
In this article, I assume that the reader is familiar with IP, TCP, and UDP packet formats. For convenience, I have illustrated the packet structures for each of the three protocols in Figure 1. (For those who need more detailed information, Douglas Comer's <I>Interconnecting with TCP/IP, Volume I</I>, 3rd Edition and W. Richard Stevens' <I>TCP/IP Illustrated, Volume 1</I> are excellent references.)<P>
<B>iptrace and ipreport</b><p>The <B>iptrace</B> utility allows you to record <B>tcp</B>/<B>ip</B> network packets going through your network interfaces. The program gives some flexibility by providing command flags that act as filters to capture specific packets that meet your  criteria. The syntax for running the command is as follows:<P>
<PRE>
/usr/sbin/iptrace [ -a ] [ -P Protocol ] [ -i Interface ]
[ -p Port ] [ -s Host [ -b]] [ -d Host [ -b ]] LogFile
</PRE>
<P>
Please refer to the man page for more details on using the command.<P>
<B>iptrace</B> on its own does not produce human-readable text. You must also run <B>ipreport</B>, giving it the output name of <B>iptrace</B> as a parameter.<P>
In this article, we will run <B>iptrace</B> using the <B>startsrc</B> command. In AIX, you use <B>startsrc</B> and the corresponding <B>stopsrc</B> to start and stop a subsystem. Listing 1 shows a script that gives you an example on how <B>iptrace</B> and <B>ipreport</B> can be invoked.<P>
Running the following:<P>
<PRE>
# hostname -s
dev01
# iptracethis.ksh  xxx.xxx.30.90 5
0513-059 The iptrace Subsystem has been started. Subsystem PID is 16197.
0513-044 The stop of the iptrace Subsystem was completed successfully.
</PRE>
<P>
will capture the network traffic between hosts <B>dev01</B> and the host with an address of <B>xxx.xxx.30.90</B> for five minutes. Figure 2 is an example of the packet trace (the first two bytes of the IP address has been changed to protect the innocent):<P>
<B>Three-Way Handshake</b><p>The previous trace provides a lot of information. You can see, from packets one to three, the establishment of a TCP connection, also known as the "three-way handshake." Looking at the TCP portion of Packet 1, the source host (<B>SRC =xxx.xxx.30.90</B>), or "Host A", sends a SYN segment with its initial sequence number (<B>th_seq=d930100</B>) to the destination host (<B>DST = xxx.xxx.23.19</B>), or "Host B". Host A also indicates the port number that it wants to communicate with (3300) in Host B, as well as the port number it is using (1902). Notice also that Host A is the one that initiates the connection. In this particular scenario, Host A is a PC client (MS Windows) that is trying to establish a connection to Host B, which is an RS/6000 server (AIX 4.1.4) running a Sybase database server. The database server in this case listens on port 3300.<P>
In Packet 2, notice that Host B is now the source of this packet (<B>SRC = xxx.xxx.23.19</B>). In this packet, Host B responds to Host A with its own SYN segment, which contains its initial sequence number (<B>th_seq=4e5c4401</B>). Also in this segment, Host B acknowledges Host A's SYN segment (Packet 1) by sending an ACK (<B>th_ack=d930101</B>) that is 1 plus the initial sequence number sent by Host A from the previous packet.<P>
In Packet 3, Host A acknowledges Host B's SYN segment by sending an ACK (<B>th_ack=4e5c4402</B>) that is 1 plus the initial sequence number of Host B. Thus, the three-way handshake is established (three packets are needed to establish the connection).<P>
<B>Troubleshooting</b><p>Continuing the example, it turns out that the connection between Host A and Host B is unpredictable. There were times during the conversation when the connection seemed very unstable. Further analysis of the packet trace was necessary.<P>
In Packets 23 and 24, you can see that the TCP sections are identical, indicating a possible "retransmission" of the same packet. This is not necessarily bad because the retransmission might have been done on purpose by TCP, if it hadn't received a response from the other host. But in this example, this is not a retransmission as TCP defines it. Furthermore, Packet 24 was sent almost immediately after Packet 23. This can be shown by subtracting the transmission time of Packet 23 from that of Packet 24, as follows:<P>
<PRE>
   12:33:57.971356416 (Packet 24)
 - 12:33:57.967711744 (Packet 23)
   ------------------
   00:00:00.003644672
</PRE>
<P>
This does not indicate a TCP retransmission because TCP sends its first packet retransmission only after a full second has elapsed.<P>
For some reason, probably because of a bug in a PC device driver, the client PC sent identical TCP packets one after another. Looking at the rest of the trace (not shown) shows this happening  frequently.  This is a waste of computer resources and network bandwidth and caused unpredictable behavior of the PC application. After changing the device driver, the problem disappeared. Figure 3 shows the network trace done with the new driver installed in the client PC:<P>
This example shows how to use <B>iptrace</B>, coupled with a good understanding of the TCP/IP protocol suite, to troubleshoot nagging network problems.<P>
<B>netstatus.sh</b><p>Listing 2 is the listing of <B>netstatus.sh</B>. Using this program, you can monitor the number of incoming and outgoing packets to your host, as well as the number of errors encountered. This program runs <B>netstat</B> using a 20-second interval and averages out the results, which are then saved to a file. The output shows <B>netstat</B> statistics per second. Figure 4 is a sample output of this program. The <B>colls</B> column in the output is meaningless if you are using token-ring. <P>
The syntax for running the shell program is as follows:<P>
<PRE>
netstatus.sh interface
</PRE>
<P>
where interface is the network interface that you want to monitor.<P>
An effective way of using <B>netstatus.sh</B> is to schedule it using cron at a selected interval, as in the following:<P>
<PRE>
0,15,30,45 8-22 * * 1-5 /home/santosj/bin/netstatus.sh \<BR>
  tr0 &gt; dev/null </B>2&gt;&amp;1
</PRE>
<P>
This example will run the program (monitoring interface <B>tr0</B>) on the hour, and every 15, 30, and 45 minutes after the hour. It will run it from 8 am to 10 pm,  Monday through Friday. See Figure 4.<P>
In addition to monitoring errors, you can use the program to do some benchmarking. I have used it to monitor the amount of traffic that the host is receiving (and transmitting) given a certain increase in the number of business transactions generated by a certain application. Also, if you have a Web server, you can determine at what time of day your site gets the most traffic.<P>
As a <I>Sys Admin</I> reader, you are free to use and modify the shell programs in this article (at your own risk, of course), but you may not sell the code or incorporate it into a commercial product without my consent. You can download the listings from <I>Sys Admin</I>'s Web site at: <B>www.sysadminmag.com</B> or from <B>ftp.mfi.com </B>in<B> /pub/sysadmin/</B>.<P>

<h1>About the Author</h1><p>
James M. Santos is an independent consultant specializing in systems administration and performance tuning. He has worked in the computer industry for over thirteen years. He teaches UNIX at Columbia University on a part-time basis. He can be reached at: jamessantos@usa.net.</BODY>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>