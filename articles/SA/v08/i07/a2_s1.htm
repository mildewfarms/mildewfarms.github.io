<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i07: Sidebar 1</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a2.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><a href="../../../../source/SA/1999/jul99.tar"><b class=codeListing>jul99.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Sidebar 1:  Commands</H1><p>
<B>Core Functions</b><p>These are the most commonly used functions, used to access and manipulate data.<p>
<p>
Command: <B>use</B><p>
Requires: Module name<p>
Returns: Loads the requested module into Perl-space<p>
Example: <B>use DBI;</B><p>
<p>
The <B>use</B> command is actually the Perl command that loads external modules; however, you need to load the DBI module before you can access it. So <B>use DBI;</B> should appear early in every DBI-based Perl script.<p>
<p>
Command: connect<p>
Requires: Data source, username, and password (minimum)<p>
Returns: Database handle<p>
Example: <B>$dbh = DBI-&gt;connect('dbi:Oracle:db01', 'scott/tiger');</B><p>
Database handles are created with the <B>connect</B> command. The <B>connect</B> string varies from database to database, and so there are many variants. However, each requires at least two strings, the first specifying the DBD driver (the Oracle driver in the example), and the second a username/password pair. Other databases may require the username and password as separate arguments, like this:<p>
<B><p>
<pre>
$dbh = DBI-&gt;connect('dbi:Pg', 'scott', 'tiger');
</pre>
</b><p>You can do nothing with the database without a valid database handle. Also, you can create multiple database handles - one for each unique database.<p>
Note: If the database name is not specified in the <B>connect</B> string, the Oracle driver uses the database specified in the <B>TWO_TASK</B> or <B>ORACLE_SID</B> environment variable. So, before connecting, specify the database with the Perl <B>ENV</B> variable, like this:<p>
<B><p>
<pre>
$ENV{TWO_TASK} = 'dbname';
$dbh = DBI-&gt;connect('dbi:Oracle:', 'scott/tiger')
</pre>
</b><p>This technique may work with other databases as well, if the database uses an environment variable to specify the database. Some database drivers accept database specification in the connect string - for instance, you can connect to the Postgres database "foo" like this:<p>
<B><p>
<pre>
$dbh = DBI-&gt;connect('dbi:Pg:dbname=foo');
</pre>
</b><p>Check the DBD-specific Perl documentation.<p>
<B><p>
<pre>
% perldoc DBD::Pg
</pre>
</b><p>Command: <B>quote</B><p>
Requires: A string<p>
Returns: The string, prepared for insertion into the database<p>
Example: <B>$string = $dbh-&gt;quote("O'Leary's Burgers and Brew");</b><p><p>
Some strings are not properly formed for insertion into the database. This command quotes any strange characters (such as "'" in the example) and ensures the string is quoted properly. Use this function liberally on any Perl variables before using them in a database statement.<p>
<p>
Command: <B>do</B><p>
Requires: Database statement<p>
Returns: Number of rows affected, or error code<p>
Example: <B>$rv = $dbh-&gt;do(q{ DELETE FROM my_tables });</B><p>
<p>
The <B>do </B>command sends a database statement to the database for immediate execution. Use this for non-select statements that are executed only once.<p>
<p>
Command: <B>prepare</B><p>
Requires: Database statement<p>
Returns: Statement handle<p>
Example: <B>$sth = $dbh-&gt;prepare(q{ SELECT table_name FROM all_tables });</b><p><p>
The <B>prepare</B> command simply associates a database statement with a statement handle. Also, some databases validate the statement and prepare an execution path. The <B>prepare</B> command should never execute the statement, just prepare to execute it. In practice, this is not always true. For instance, the Oracle driver executes data definition statements when creating or dropping tables. These few exceptions should not be a problem, though.<p>
The <B>prepare</B> command may also use placeholders. A placeholder may appear as a database value, and looks like this:<p>
<p>
<pre>
$sth = $dbh-&gt;prepare(q{
        SELECT * FROM     all_tables
                 WHERE    table_name LIKE ? });
</pre>
<p>
or
<pre>
$sth = $dbh-&gt;prepare(q{
        INSERT INTO       addressbook (street, city)
               VALUES     (?, ?) });
</pre>
<p>
The placeholders are bound at execution.<p>
<p>
Command: <B>execute</B><p>
Requires: Placeholder values (optional)<p>
Returns: Number of rows affected, or error code<p>
Example: <B>$rv = $sth-&gt;execute;</b><p><p>
This command executes the previously prepared statement. It returns the number of rows affected, or <B>UNDEF</B> if an error occurs. Note that even if the return code is 0, this is treated as true by Perl. It simply means that no rows were affected.<p>
For <B>SELECT</B> statements, <B>execute</B> does not return the number of rows affected, because this is often not known in advance. A successful execution will still return <B>TRUE</B>, and an error will result in <B>UNDEF</B>.<p>
If the prepared statement has placeholders, the <B>execute</B> command must bind values to the placeholders. So, using the second "prepare" example above, an <B>execute</B> statement may look like this:<p>
<p>
<pre>
$rv = $sth-&gt;execute('Cathedral Way', 'Sitka');
</pre>
<p>
Command: <B>bind_param</B><p>
Requires: Placeholder<p>
Returns: Error code<p>
Example: <B>$rc = $sth-&gt;bind_param(1, 'Cathedral Way');</B><p>
<p>
The <B>bind_param</B> command binds a value to a placeholder before execution. This is useful in any situation where execution of a prepared statement is delayed. For example, this would work in subroutines that take a statement handle as an argument, where the statements require the same type of information bound to the same placeholders.<p>
<p>
Command: <B>fetchrow_array</B><p>
Requires: Previously executed statement handle<p>
Returns: Array consisting of one row of data<p>
Example: <B>@row = $sth-&gt;fetchrow_array;</b><p><p>
After executing a prepared select statement, use this statement to extract the results from the database, one row at a time. The results are returned in the same order specified in the <B>select</B> statement.<p>
<p>
<pre>
while (($city, $street) = $table_handle-&gt;fetchrow_array) {
        &amp;do_stuff ($city, $street);
}
</pre>
<p>
A Note on Placeholders<p>
The <B>prepare</B> command has one important feature: placeholders. Placeholders allow the creation of generic SQL statements that are modified dynamically.<p>
<p>
<pre>
$sth = $dbh-&gt;prepare(q{
        SELECT * FROM     all_tables
                 WHERE    table_name LIKE ?
                      AND owner      LIKE ? });
$return_value = $sth-&gt;execute("%SYS%", "SYSTEM");
@row_array = $sth-&gt;fetchrow_array;
</pre>
</b><p>In this example, we are only interested in the SYSTEM tables that have "SYS" in them somewhere. The "?" is a placeholder, and must be bound during statement execution. In this fashion, a single statement is prepared once and executed many times with different values.<p>
Placeholders can only represent single, scalar values. A statement that requires a list or array will not take a placeholder - so, the following statement will not work:<p>
<p>
<pre>
$sth = $dbh-&gt;prepare(q{
        SELECT * FROM    all_tables
                 WHERE   table_name IN (?) });  ;# Does NOT work
</pre>
</b><p>Also, a statement using a placeholder must be validated by the database before the placeholder is bound with a value. Therefore, you can't use a placeholder to reference a command, table, or column name. So, the following two statements will not work:<p>
<p>
<pre>
;# These two statements will not work!
$sth = $dbh-&gt;prepare(q{ SELECT ? FROM all_tables }); ;# Won't work
$sth = $dbh-&gt;prepare(q{ SELECT * FROM ? });          ;# Won't work
</pre>
</b><p>Some DBD drivers allow numbered or named placeholders. For example, the Oracle driver allows named placeholders, like this:<p>
<p>
<pre>
$sth = $dbh-&gt;prepare(q{
        SELECT * FROM    all_tables
                 WHERE   table_name like :tname });
$sth-&gt;bind_param("tname", "%SYS%");
</pre>
</b><p>Placeholder naming varies from driver to driver, so this code is not portable. However, in many cases using named placeholders results in much cleaner, easier-to-read code.<p>
These examples use a single quote (<B>q{..}</B>) technique to avoid quoting conflicts with database statements that use standard quotes (<B>"</B> and <B>'</B>). Using this quote, Perl passes the statement untouched to the DBI. If you use the double-quote operator, <B>qq{..}</B>, Perl will interpolate all the variables in the statement. This allows dynamic creation of database statements, like this:<p>
<p>
<pre>
$command = "SELECT * FROM";
$tablename = "All_tables";
$sth = $dbh-&gt;prepare(q{ $command $table });  # This is wrong
$sth = $dbh-&gt;prepare(qq{ $command $table }); # This will work
</pre>
</b><p>So, why use binding variables instead of variable interpolation? It takes much longer to prepare a statement than it does to bind variables into a pre-prepared statement. In many cases, it's much more efficient to prepare a single statement and bind and execute that statement many times.<p>
Because of the limits on binding variables, variable interpolation allows greater flexibility. Since you can build queries on-the-fly, you are not limited to predefined queries.<p>
<B>Error Conditions</b><p>There are three commands that provide information after an error: <B>state</B>, <B>errstr</B>, and <B>err</B>. Use these to provide feedback after an unsuccessful command.<p>
<p>
Command: <B>state</B><p>
Requires: Nothing<p>
Returns: The <B>SQLSTATE</B> error for the last database function called<p>
Example: <B>$state = $dbh-&gt;state;</B><p>
<p>
This returns the standard <B>SQLSTATE</B> error code of the last database function. Some DBD drivers do not support the <B>SQLSTATE</B> standard; these drivers will return the general error code, <B>S1000</B>, for all errors.<p>
<p>
Command: <B>errstr</B><p>
Requires: Nothing<p>
Returns: The error string for the last database function called<p>
Example: <B>$error = $dbh-&gt;errstr;</B><p>
<p>
This command simply provides a human-readable string of the error state of the last database function called. Usually, this is used after an error condition, like this:<p>
<p>
<pre>
$sth-&gt;execute or die "Can't execute SQL: $dbh-&gt;errstr\n";
</pre>
</b><p>Command: <B>err</B><p>
Requires: Nothing<p>
Returns: Native database error code<p>
Example: <B>$errorcode = $dbh-&gt;err;</b><p><p>
This is just like the <B>errstr</B> command, but returns the native database error instead of a human-readable descriptive string.<p>
<p>
<pre>
$sth-&gt;execute or die "Database error code: $dbh-&gt;err\n";
</pre>
<p>
Transaction Management
</B>Most databases support the concept of transaction management; changes are not permanent until the session is "committed." Until the session is committed, the program or user has the option to "roll back," or discard, all changes since the last commit.<p>
These are the commands that affect transaction management.<p>
<p>
Attribute: <B>AutoCommit</B><p>
Requires: Flag indicating <B>AutoCommit</B> state<p>
Returns: <B>AutoCommit</B> state<p>
Example<B>: $dbh-&gt;{AutoCommit} = 0;</b><p><p>
The DBI has two ways of handling transactions. They are either automatically committed upon successful completion, which is known as "autocommit" mode, or the DBI waits for an explicit commit before making the changes permanent.<p>
The <B>AutoCommit</B> attribute tells the DBI how to behave. If the attribute is true, the DBI will autocommit every transaction; if it is false, it will not commit any transaction until it recieves an explicit <B>commit</B> command. The default mode is to <B>AutoCommit</B>; to change to full transactional mode, the Perl program should unset <B>AutoCommit</B> like this:<p>
<p>
<pre>
$dbh-&gt;{AutoCommit} = 0;
</pre>
</b><p>Checking the state of the <B>AutoCommit</B> attribute is as easy as reading the attribute, like so:<p>
<p>
<pre>
$state = $dbh-&gt;{AutoCommit};
</pre>
</b><p>Command: <B>commit</B><p>
Requires: Nothing<p>
Returns: Error code<p>
Example: <B>$rc = $dbh-&gt;commit;</B><p>
<p>
This command merely tells the DBI interface to commit all transactions.<p>
<p>
Command: <B>rollback</B><p>
Requires: Nothing<p>
Returns: Error code<p>
Example: <B>$rc = $dbh-&gt;rollback;</B><p>
<p>
This command merely tells the DBI interface to discard all transactions that have not yet been committed.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
