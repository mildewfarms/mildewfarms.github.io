<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i13: tcp_wrapper Macro Basics</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_s1.htm">Sidebar</a></span></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>tcp_wrapper Macro Basics</H1><p>
<P>Chris Bush
<P>

<BODY><I>The following information supplements the article, "Enhancing Network Security With </I><B>tcp_wrapper</B><I>" by Christopher Bush appearing in the May, 1999 issue of </I>Sys Admin<I>. This material is not meant as a standalone article.</I><p>
<B>tcp_wrapper Macro Basics</B><p>

By default, <B>tcpd</B> will be compiled to log through <B>syslogd</B>(8) using the <B>LOG_MAIL</B> facility, used by most Sendmail daemons, and a severity of <B>LOG_INFO</B>. I'll assume a reasonable level of familiarity with <B>syslog</B>, as a detailed discussion of <B>syslog</B> is not the purpose of this article. The macros in the Makefile that control this are <B>FACILITY</B> and <B>SEVERITY</B>, respectively. If you heavily customize your <B>syslog</B> configuration, you may choose to change these macros to tailor your <B>tcp_wrapper</B> installation to the rest of your environment. You may also choose to change these so that you are logging <B>tcpd</B> messages to a completely separate log file, making it easier to scan for potential attacks.<p>
You could make this change by adjusting the <B>SEVERITY</B>, or perhaps setting the <B>FACILITY</B> to one of <B>LOCAL0-LOCAL7</B> - the facilities reserved for localized configurations and applications. One interesting "feature" I discovered is that the <B>SEVERITY</B> macro in the Makefile only controls the logging of accepted connections. The severity setting for logging refused connections is hard-coded into <B>tcpd.c</B>. Refused connections by default are logged with a severity of <B>LOG_WARNING</B>. Refused connections use the value of <B>FACILITY</B> as do accepted connections. Normally, this would not be a problem, and would log to the same place as accepted connections, since <B>LOG_WARNING</B> is of higher priority than <B>LOG_INFO</B>. Most <B>syslog</B> configurations will contain something like this in <B>/etc/syslog.conf</B>:<p>
<pre>
*.info          /usr/adm/messages
</pre><p>
This would result in both <B>LOG_INFO</B> and <B>LOG_WARNING</B> messages being logged to <B>/usr/adm/messages</B>. On my Slackware Linux 3.5 distribution, however, the default <B>syslog.conf</B> file has:<p>
<pre>
*.=info; *.=notice              /usr/adm/messages
</pre><p>
Instead of logging anything of severity <B>LOG_INFO</B> and higher to <B>usr/adm/messages</B>, this logs only messages of severity equal to <B>LOG_INFO</B> or <B>LOG_NOTICE</B>. This is something to watch out for. If you don't see refused connection messages from <B>tcpd</B> in your log, check your <B>/etc/syslog.conf</B> carefully, especially if you are going to modify the <B>FACILITY</B> and <B>SEVERITY</B> macros in the Makefile.<p>
Another important macro in the Makefile is <B>ACCESS</B>, which by default is set to <B>-DHOSTS_ACCESS</B>. This tells <B>tcpd</B> whether or not it will be performing access control checks or not. Even if you don't intend to use the <B>tcp_wrapper</B> for access control, there is a better way to do this than at compile time. Leave this set to the default of enabling access control. You can then disable access control by having empty rule files. If you choose to use access control in the future, you won't have to recompile.<p>
The <B>TABLES</B> macro defines the location of the access control rule files. The default locations are <B>/etc/hosts.allow</B> and <B>/etc/hosts.deny</B>. These files contain your access control rules. I'll discuss their use later. If you really want to disguise your use of <B>tcp_wrapper</B> (and have used the "easy" installation method), you might want to compile the software to look somewhere besides <B>/etc</B> for these two files. It will be difficult for future administrators of your systems to recognize right away that you are using <B>tcp_wrapper</B>.<p>
The <B>PARANOID</B> macro, default value <B>-DPARANOID</B>, specifies whether to use the paranoid mode or not. The default value turns paranoid mode on. The paranoid mode means that connection requests where the host name does not match the IP address of that host are automatically rejected. If the host name cannot be verified, the connection will be rejected as well. This adds a level of security against host name or address spoofing. You can get more control over being paranoid by disabling this at compile time, and using the <B>PARANOID</B> keyword in your access control rules, which will be discussed shortly. I leave <B>PARANOID</B> set in the Makefile. I don't think everyone's out to get me; I know they are.<p>
There are other optional macros as well. Get used to using <B>tcp_wrapper</B>, then spend some time studying the Makefile; after that, you can decide if you need to tailor your installation any further. Let's move on to configuring and using <B>tcp_wrapper</B>.<p>
<B>A Rule Example</b><p>Here's an example of a very simple rule:<p>
<pre>
in.telnetd : 10.1.15.37
</pre><p>
If this rule were in <B>hosts.allow</B>, it would say that connections to the <B>telnet</B> server from 10.1.15.37 are accepted. If they were in <B>hosts.deny</B>, they would be refused. It is important to realize that once a match is found, the search stops. Putting a rule like the above in <B>hosts.deny</B> does no good if you mistakenly put a broader rule in <B>hosts.allow</B> that would also match the request. Broader rules are possible through the use of patterns and wildcard keywords in the access control language.<p>
There are six wildcard keywords; <B>ALL</B>, <B>LOCAL</B>, <B>UNKNOWN</B>, <B>KNOWN</B>, <B>PARANOID</B>, and <B>EXCEPT</B>. <B>ALL</B> and <B>EXCEPT</B> can be used in both the <B>daemon_list</B> and the <B>client_list</B>. The remainder apply just to the <B>client_list</B>. The <B>ALL</B> wildcard does just what you'd think; it matches everything. The <B>EXCEPT</B> keyword is sort of a qualifier to <B>ALL</B> and <B>LOCAL</B>. It allows you to specify exceptions to these more broadly inclusive wildcards. As an example, let's say you want to allow <B>telnet</B> connections from all hosts, but <B>ftp</B> connections only from one specific host. In <B>/etc/hosts.allow</B>, make two rules that look like these:<p>
<pre>
in.telnetd : ALL
in.ftpd : 10.1.15.37
</pre><p>
To prevent other <B>ftp</B> connections that don't match the above rule, you'll need to add a rule to <B>/etc/hosts.deny</B> that prevents them. You could simply deny all connections of any type by putting this in <B>hosts.deny</B>:<p>
<pre>
ALL : ALL
</pre><p>
You could also specifically deny just <B>ftp</B> connections with:<p>
<pre>
in.ftpd : ALL
</pre><p>
The language for forming access control rules is very flexible and easy if you remember the search order, and keep in mind what happens when a connection request doesn't match a rule.<p>
The wildcards <B>KNOWN</B> and <B>UNKNOWN</B> apply to the <B>client_list</B>, and will cause a match when the host name or address is known or unknown, respectively. They can also be used to match known or unknown user names. Be careful when using these wildcards. A host name may be unavailable if there are intermittent DNS failures. You don't want to refuse otherwise valid connections just because of this. Similarly, relying on detecting known usernames is troublesome because this depends on the client host running the <B>ident</B> daemon, <B>identd</B>, or some other RFC 931 compliant service. Here are a few examples using the <B>KNOWN</B> and <B>UNKNOWN</B> wildcards.<p>
<pre>
ALL : cebush@ALL
</pre><p>
would match connections to all daemons from user "cebush" at all hosts.<p>
<pre>
in.ftpd : UNKNOWN@ALL
</pre><p>
matches all <B>ftp</B> connections from unidentified users on all hosts.<p>
<pre>
ALL : ALL
ALL : UNKNOWN
</pre><p>
would match connections to all daemons from known hosts, and unknown hosts, respectively.<p>
Suppose you want to set up your Web server so that <B>telnet</B> and <B>ftp</B> connections are only allowed from your user ID on your workstation. In <B>/etc/hosts.allow</B>, you might have a rule like this:<p>
<pre>
in.telnetd in.ftpd : jreader@yourhost
</pre><p>
and in <B>/etc/hosts.deny</B>:<p>
<pre>
ALL : ALL
</pre><p>
to prevent connections to all daemons that didn't match in the <B>hosts.allow</B> file.<p>
I mentioned previously the <B>EXCEPT</B> keyword. Let's say you want to allow all hosts except mine to connect. You could write the following rule in <B>/etc/hosts.allow</B>:<p>
<pre>
ALL : 'ALL EXCEPT syrinx'
</pre><p>
where "syrinx" is the host name of my workstation. It is important to put the single quotes around this as shown; otherwise, <B>ALL</B>, <B>EXCEPT</B>, and syrinx would be treated as separate client elements in the <B>client_list</B>, instead of as one element.<p>
The <B>PARANOID</B> wildcard works like the paranoid mode discussed previously in the installation section. Using it in access control rules simply gives you finer grained control over when it is applied.<p>
The <B>LOCAL</B> wildcard will match client hosts that do not have a "." character in their name. This indicates that they are in the local domain. If you trust all local hosts and no external ones, put:<p>
<pre>
ALL : LOCAL
</pre><p>
in <B>hosts.allow</B>, and:<p>
<pre>
ALL : ALL
</pre><p>
in <B>hosts.deny</B>. You can also use the <B>EXCEPT</B> qualifier with <B>LOCAL</B>. For example:<p>
<pre>
ALL : 'LOCAL EXCEPT syrinx'
</pre><p>
which matches all local clients except the host named syrinx.<p>
There are also four important patterns you can use in your <B>client_list</B>. Strings with a "." character at the beginning match if the last components of the name match. For example:<p>
<pre>
ALL : .samag.com
</pre><p>
matches everything from the <B>samag.com</B> domain. Similarly, strings ending with a "." will match if the first numeric fields of a connection client address match. For example:<p>
<pre>
ALL : 10.1.
</pre><p>
matches all IP addresses in 10.1.x.x. This is useful for matching everything from a particular network or subnet. However, if a network is using a netmask that is not on an octet boundary, you can still do subnet matching simply by using an expression of the form:<p>
<pre>
n.n.n.n/m.m.m.m
</pre><p>
where the n.n.n.n is a network address, and m.m.m.m is the subnet mask. Consider this rule:<p>
<pre>
in.fingerd : 10.1.20.0/255.255.252.0
</pre><p>
This will match connections to the finger daemon from 10.1.20.0 through 10.1.23.255. This is a subnet scheme that is using 10-bit host numbers.<p>
The final pattern you can use matches hosts in a netgroup, using a leading "@" character. Netgroups are a feature of NIS, which I don't use, so I won't go into that here.<p>
The final piece of your access control rules is the optional shell command. You can use this to trigger a command or script every time a specific rule matches. Perhaps you want to receive an email every time a particular connection request is refused. You might end up with a rule like this in <B>hosts.deny</B>:<p>
<pre>
in.telnetd : 10.1.15.37 : (echo "Attack!" | /usr/bin/mail root)
</pre><p>
The real power of the shell command is through expansion of special macros that are part of the access control language. These macros allow you to include information about the connection request within your shell command. The <B>hosts_access(5)</B> man page, included with the distribution, provides a complete reference for all of these macros, so I won't go into all of them in detail here. Instead, I'll show another version of the example above. In that example, the information that is emailed to root is extremely limited. I'd prefer to know what address or host originated the connection, and the user id if available. Consider this rule:<p>
<pre>
ALL : 10.1.15.37 : (echo "Attack against %d from %u on %a" | \<br>  /usr/bin/mail -s 'tcpd alert' root)<p>
</pre><p>
The <B>%d</B> expands to the daemon name of the server (i.e., <B>in.telnetd</B>). The <B>%u</B> expands to the client user name, or "unknown" if it cannot be determined. Finally, <B>%a</B> expands to the client address. Other macros expand to the host name of the client or server, daemon process id, and more. This can greatly enhance the information you can relay when rules match, allowing you to perform other forms of logging, send descriptive email messages, or even send informative text pager alerts.<p>
There is also an optional, extended language for access control rules. This is described in <B>hosts_options(5)</B>. To use this extension, you have to recompile <B>tcpd</B>, after uncommenting the <B>STYLE</B> macro in the Makefile. By default, this macro (which would take the value of <B>-DPROCESS_OPTIONS</B> if you wanted the extensions) is commented out. You could also add <B>-DPROCESS_OPTIONS</B> to your <B>make</B> command if you don't wish to modify Makefile. I don't use these options, but you may eventually choose to. One noteworthy feature includes the ability to display banner messages to connecting clients for each service. You can also select the <B>syslog</B> facility and severity on a per-rule basis, giving you finer control of logging.<p>
Another useful feature is the existence of <B>ALLOW</B> and <B>DENY</B> keywords, which make it possible to put all of your access control rules in one file. These extensions could be a powerful addition to your configuration and are worth exploring.<p>
<B>Other Tools</b><p>Four other tools, besides <B>tcpd</B>, are included with the <B>tcp_wrapper</B> software. Two of them are useful for checking and verifying your <B>tcpd</B> configuration. It's important to discuss them, because although <B>tcpd</B> is not particularly complicated to configure in most cases, the consequences of getting it wrong could be embarrassing at best and disastrous at worst. These tools can help you avoid deploying a <B>tcpd</B> configuration that doesn't behave as you expected.<p>
The first utility is called <B>tcpdmatch</B>(8). A man page for <B>tcpdmatch</B> is included with the <B>tcp_wrapper</B> distribution. Briefly, <B>tcpdmatch</B> is used to confirm how <B>tcpd</B> will respond to a request for a specific service, from a specific client host. The command uses the following syntax:<p>
<pre>
tcpdmatch [-d] [-i inet_conf] daemon[@server] [user@]client
</pre>
<p>For example, to test how the local server's <B>tcpd</B> would respond to a <B>telnet</B> request from 10.1.15.37, you could issue the command:<p>
<B><p>
% tcpdmatch in.telnetd 10.1.15.37<p>
</b><p>This, however, would test how the current "live" configuration would handle the request. Ideally, you want to perform this kind of testing before you deploy a configuration. That's where the <B>-d</B> and <B>-i</B> switches come in. The <B>-d</B> switch tells the tool to examine the <B>hosts.allow</B> and <B>hosts.deny</B> files in the current directory, rather than their default location (usually <B>/etc</B>). The <B>-i</B> switch takes as an argument the path to an alternate <B>inetd.conf</B> file, other than the default (<B>/etc/inetd.conf</B> in most cases). Suppose you've copied your <B>inetd.conf</B> file to a working directory, <B>/usr/tmp/security</B>, and added the configuration changes you think you need to wrap everything up with <B>tcpd</B>. Then, in that same directory you create a <B>hosts.allow</B> and <B>hosts.deny</B> file with your desired access controls. While in this working directory, issue the command:<p>
<pre>
% tcpdmatch -d -i ./inetd.conf in.fingerd 10.1.15.37
</pre><p>
substituting for the daemon and client as necessary. You'll want to do this for each service you've wrapped, and for a variety of client addresses and host names, depending upon the access control rules you've configured. The <B>tcpdmatch</B> utility will report something like this:<p>
<pre>
client:   hostname rocinante.bushnet.net
client:   address  10.1.15.37
server:   process  in.fingerd
access:   granted
</pre><p>
which shows whether the requested connection would be accepted or rejected.<p>
Another included utility, <B>tcpdchk</B>(8), performs an examination of your <B>tcpd</B> configuration and presents a report of any problems it finds. A man page for <B>tcpdchk</B>(8) is also included in the distribution. The syntax for <B>tcpdchk</B> is:<p>
<pre>
tcpdchk [-a] [-d] [-i inet_conf] [-v]
</pre><p>
Like <B>tcpdmatch</B>, <B>tcpdchk</B> has the <B>-i</B> and <B>-d</B> switches, which behave exactly the same as described above. There is also a <B>-v</B> switch, which presents a pretty-printed report of each access control rule. The <B>-a</B> switch is used to report on rules that allow access without the <B>ALLOW</B> keyword, which is a feature of the extended access control language described in <B>hosts_options(5)</B>. I won't go into particulars of using <B>-a</B> here.<p>
If <B>tcpdchk</B> (with no command line switches) finds no errors in your configuration, it prints nothing. Below is a sample output from running <B>tcpdchk</B> with the <B>-v</B> switch:<p>
<pre>
rocinante:/tmp# /usr/local/etc/tcpdchk -d -i ./inetd.conf -v
Using network configuration file: ./inetd.conf
&gt;&gt;&gt; Rule hosts.deny line 14:
daemons:  ALL
clients:  jhacker@ALL
access:   denied
</pre><p>
The <B>try_from</B> utility is useful in determining whether your protected host can properly perform host and username lookups against connecting systems. You can test this by calling <B>try_from</B> on your protected host from another system. For example, while logged in on a different host, run the command:<p>
<pre>
rocinante:/home/cebush% rsh syrinx /usr/local/etc/try_from
client address     (%a): 10.1.15.37
client hostname  (%n): rocinante.bushnet.net
client username  (%u): cebush
client info           (%c): cebush@rocinante.bushnet.net
server address    (%A): 10.1.15.43
server hostname (%N): syrinx.bushnet.net
server process    (%d): try-from
server info          (%s): try-from@syrinx.bushnet.net
</pre><p>
Be sure that remote shell connections are allowed by the current <B>tcpd</B> configuration on the protected host ("syrinx" in my example) before you try this. The output from <B>try_from</B> should tell you which host you connected from, and potentially the username. This will be helpful in deciding whether you can set up the protected host with access control rules based on the username. If running <B>try_from</B> as above does not report a username, you probably won't be able to use user id lookups in your access control rules.<p>
The <B>safe_finger</B> utility is provided for use in the optional shell command section of the access control rules. If you want to run a <B>finger</B> command back to a connecting host to get further information, use <B>safe_finger</B> instead of your vendor-supplied <B>finger</B> command. Your vendor-supplied <B>finger</B> command may subject you to security problems through responses to your <B>finger</B> probe. For example, you may have in your <B>/etc/hosts.deny</B> file:<p>
<pre>
in.telnetd : ALL : (/usr/local/etc/safe_finger -l @%h |
  /usr/bin/mail -s "%d %h" root) &amp;
</pre>
This will send an email to root with the output of <B>safe_finger</B> run against the connecting host, substituted in place of the <B>%h</B> in the command.<p>
<B>Using tcp_wrapper on Web Sites</b><p>Implementing this type of policy with <B>tcp_wrapper</B> is easy. Your <B>/etc/hosts.deny</B> file will simply have one line:<p>
<pre>
ALL : ALL
</pre><p>
with any optional shell commands added on as previously discussed. Then, in <B>/etc/hosts.allow</B>, you simply list the services that are allowed to connect, and only those IP addresses or host names permitted. For example:<p>
<pre>
in.telnetd : 10.1.15.124
in.ftpd: 10.1.15.124
</pre><p>
where 10.1.15.124 would be the IP address from which the Webmaster connects. Remember that <B>tcpd</B> looks for a match first in <B>/etc/hosts.allow</B>, which was configured with very minimal information. You need to create the universally restrictive <B>/etc/hosts.deny</B> file as described above to match everything else and deny access. If <B>/etc/hosts.deny</B> were left empty, connection requests from hosts other than the Webmaster's would fail to match in <B>hosts.allow</B>, but would also fail to match in <B>hosts.deny</B>, and the connection would be accepted. This is not what you want.<p>
This example raises a particularly thorny issue. As a Webmaster, I may want to administer my site from my dial-up ISP, while working at home or while travelling. In this case, the only logical solution is to arrange for a static IP address from my ISP. Many ISPs can't or won't do this, and insist on handing out dynamically assigned addresses through DHCP. Other ISPs may accommodate you, but at a higher cost. The other option would be to expand the range of allowed connections in <B>hosts.allow</B> to allow connections from the entire pool of IP addresses from your ISP. For example:<p>
<pre>
in.telnetd : 10.0.
in.ftpd : 10.0.
</pre><p>
Now, anyone who uses the same ISP as you can potentially connect to those services and exploit them to attack your Web site. You might as well not have <B>tcpd</B> running at all.<p>
The other policy extreme is based on the statement, "That which is not explicitly denied is allowed." This may be used when you have a very open, general purpose system, but there are specific people or services you do not allow. In this case, you would have an empty <B>/etc/hosts.allow</B> file, or no file at all. The reason for this lies in the order in which access control matches are searched. Because <B>/etc/hosts.allow</B> is consulted first, if it were configured with:<p>
<pre>
ALL : ALL
</pre><p>
all connections from all hosts would match this rule and <B>/etc/hosts.deny</B> would be ignored. But having <B>/etc/hosts.allow</B> empty provides more of an implicit permission, and <B>/etc/hosts.deny</B> is then consulted for matches to determine what specific connections to refuse.<p>
Let's say your organization has just hired John Q. Hacker as a contractor, and you don't trust him. You could set up your systems, which may ordinarily allow all connections, with an empty <B>/etc/hosts.allow</B> file, and configure <B>/etc/hosts.deny</B> with:<p>
<pre>
ALL : 10.1.15.37
</pre><p>
where 10.1.15.37 is the IP address of John Q. Hacker's workstation. You are denying connection requests from that address for all services. You might also add to this list other hosts that you know John has access to, depending upon whether they are multi-user systems or not. If John's workstation, or the other hosts he uses, support the IDENT service or some other similar descendant of RFC 931, you may attempt to match with:<p>
<pre>
ALL : jhacker@ALL  10.1.15.37
</pre><p>
in <B>/etc/hosts.deny</B>. This will block any connection from hosts that <B>tcp_wrapper</B> can retrieve the user id from and match it to jhacker. It will also block all connections from 10.1.15.37, regardless of the user id.<p>
This is obviously a contrived example, and not a foolproof one. It would be more sensible not to hire John Q. Hacker in the first place - but maybe he's a COBOL wizard, and with Y2K right around the corner . . . well, you get the picture.<p>
More likely, your policy dictates some middle ground between these extremes when it comes to network service access. You have to look at each server individually, and configure each appropriately. The first thing you should do is turn off all network services you don't need. If you're not sure of one, turn it off and wait for the phone to ring. It's guerrilla systems administration to be sure, but it is effective.<p>
I always find it easier to get forgiveness than permission for changes like that, and when it's done for security reasons, forgiveness is pretty easy to get. You can always turn the service back on if it turns out that someone uses it, and wrap <B>tcpd</B> around it for logging and access control. If you're squeamish about turning the service off so unceremoniously, wrap it with <B>tcpd</B> and no access control, and include a shell command in the <B>/etc/hosts.allow</B> file that will log connections to that service to a separate file. This will make it easier to track who, if anyone, has used it over a period of time. For example, before turning off the <B>telnet</B> daemon, you might put the following in <B>/etc/hosts.allow</B>:<p>
<pre>
in.telnetd : ALL : (echo "'date': %u connected from %h &gt;&gt; \
  /usr/adm/telnet_log)
</pre><p>
Keep an eye on <B>/usr/adm/telnet_log</B> for 30 days or so. If nobody connects, turn off <B>telnet</B> altogether. If someone does, find out who, and why, before wrapping additional security around the service. Remember, it's your responsibility to administer the system appropriately. You should know for what purposes it is being accessed. For the services you know are needed, apply the most restrictive access control you can. You can always adjust it later, and that's easier than recovering compromised data from backups.<p>
The <B>tcp_wrapper</B> software is not necessarily part of a firewall implementation. It is possible though, that it could be used to intercept and hand off connection requests to proxy services, like a <B>telnet</B> proxy. It's conceivable that only certain people in your organization are authorized to <B>telnet</B> to hosts outside your network. Your Webmaster might be one, especially if the Web site is hosted externally. In this case, <B>tcpd</B> may be wrapped around the firewall's <B>telnet</B> proxy, and access control configured appropriately. There are many firewall implementations available, which may offer other ways of providing this level of control to proxy services. Firewalls that use a circuit-level proxy like SOCKS would not likely be a good place to use <B>tcpd</B>. However, just because you have a firewall protecting your servers against attack from the Internet, that doesn't mean that a solution like <B>tcp_wrapper</B> isn't a good idea.<p>
There are other ways an intruder can access your servers, like walking in the front door, the way John Q. Hacker did, or through dial-up connections. That's why you need to set up your <B>tcp_wrapper</B> configuration to protect against internal systems or networks.  You may need to either deny or allow access to one person, or an entire subnet, or a building with multiple subnets. Perhaps you have an <B>ftp</B> server that should only be accessed by a select few PCs in your sales and marketing department. From this server, you may be providing files with sensitive marketing data or new product information to the people in that department to share. The <B>tcp_wrapper</B> software, in conjunction with solid user level and file system security, can help provide a strong level of inter-departmental security for your systems and data. 
<h1>About the Author</h1><p>
Chris Bush is a Programmer Analyst for a major mid-west bank in Cleveland, Ohio. He does Web site management, Web development, Internet/Intranet architecture, UNIX systems administration, and dabbles with Linux at home in his spare time. He can be reached at chris.bush@stratos.net.<p>


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
