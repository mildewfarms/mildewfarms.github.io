<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v08, i13: TCP States Defined</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a5_f1.htm">Figure 1</a></span></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>TCP States Defined</H1><p>
<P>Noah Davids
<P>
This information supplements Noah Davids' article "TCP Connection States -- A Clue to Network Health" that appeared in the June issue of <I>Sys Admin</I>. See Figure 1 for diagram of the state machine.<P>
<B>SYN_SENT</b><p>The <B>SYN_SENT</B> state is entered when a TCP client application on host 1 issues a connection request (active open) to a TCP server application on host 2. The TCP stack on host 1 sends a packet to the TCP stack on host 2 with the synchronization flag set, hence the <B>SYN_SENT</B> state. If there is no server application running on host 2, host 2 will send a RST packet. The TCP client gets an error and no connection is established. If there is a server application running and it can accept connections, host 2 will send a <B>SYN-ACK</B> packet. When host 1 receives the <B>SYN-ACK</B> packet, it sends back an ACK packet and moves the connection state to <B>ESTABLISHED</B>.<P>
So what does it mean if the connection stays in the <B>SYN_SENT</B> state? It means that host 1 never got the <B>SYN-ACK</B> packet from host 2.<P>
<B>SYN_RCVD</b><p>This state is the mirror image of <B>SYN_SENT</B>, so the roles of host 1 and host 2 are reversed. The <B>SYN_RCVD</B> state is entered on host 1 when a <B>SYN</B> packet is received from host 2 for a server application that host 2 thinks is running on host 1. As discussed above, if there is no server application running on host 1, host 1 will respond with an RST packet, and no connection is established. If there is a server application, and it can accept the connection request, host 1 replies with a <B>SYN-ACK</B> packet. Once host 2 gets the <B>SYN-ACK</B>, it moves its state from <B>SYN_SENT</B> to <B>ESTABLISHED</B> and sends an <B>ACK</B> packet back to host 1. Once host 1 receives the <B>ACK</B> packet, it moves its state from <B>SYN_RCVD</B> to <B>ESTABLISHED</B>.<P>
So what does it mean if a connection remains in the <B>SYN_RCVD</B> state? It means that host 1 never got the <B>ACK</B> packet from host 2.<P>
<B>FIN_WAIT_1</b><p>This state is entered when the application on host 1 closes the connection and sends host 2 a <B>FIN</B> packet. Host 2 should respond with an <B>ACK</B> packet. When host 1 receives the <B>ACK</B> packet, it moves the state to <B>FIN_WAIT_2</B>.<P>
What does it mean if a connection remains in the <B>FIN_WAIT_1</B> state? It means that host 1 never got the <B>ACK</B> packet from host 2.<P>
<B>FIN_WAIT_2</b><p>When host 1 receives an <B>ACK</B> packet from host 2 for the <B>FIN</B> packet that host 1 sent to host 2, the state changes to <B>FIN_WAIT_2</B>. In the <B>FIN_WAIT_2</B> state, host 1 waits for host 2 to send a <B>FIN</B> packet. There is no time limit by which host 2 must send its <B>FIN</B>. Indeed, there is no requirement that it send a <B>FIN</B> at all. The <B>FIN</B> will be sent when the application on host 2 shuts down its side of the connection. So, a connection can be stuck in <B>FIN_WAIT_2</B> forever. Many TCP stacks have implemented timeouts for these connections, but it's not a requirement from TCP.<P>
What does it mean if the connection remains in the <B>FIN_WAIT_2</B> state? It means that host 1 never got a <B>FIN</B> packet from host 2.<P>
<B>CLOSING</b><p>The <B>CLOSING</B> state is entered when both the host 1 and host 2 applications close their connections at almost the same time. Host 1 sends its <B>FIN</B> and then waits for its <B>ACK</B>, but instead it receives a <B>FIN</B> from host 2. At that point, it enters the <B>CLOSING</B> state. It still must wait for the <B>ACK</B> of its <B>FIN</B>, so in that respect having a connection in the <B>CLOSING</B> state is the same as having it in the <B>FIN_WAIT_1</B> state.<P>
<B>CLOSE_WAIT</b><p>A connection in <B>CLOSE_WAIT</B> has received a <B>FIN</B> from host 2, <B>ACK</B>ed the <B>FIN</B> packet, and sent a notification to the local application that the connection has been closed by host 2. The TCP stack now waits for the local application to close the connection, so it can send host 2 its own <B>FIN</B> packet.<P>
What does it mean if the connection remains in the <B>CLOSE_WAIT</B> state? It means that the local application has not closed the connection after being notified that the application on host 2 has closed its side of the connection.</BODY>

<h1>About the Author</h1><p>
Noah Davids works in the Customer Assistance Center of Stratus Computer Inc. He specializes in the diagnosis and correction of LAN problems. "It's the wire" followed by "it's the router" covers most problems. The trick is finding which wire or router. He can be reached at: Noah_Davids@stratus.com.</BODY>


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
