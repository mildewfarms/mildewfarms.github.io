<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>Web Feature: The Sendmail Rulesets -A Detailed Look   </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a2_l2.htm">Listing 2</a></span></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >






<H1>The Sendmail Rulesets-A Detailed Look</H1><P>
<P>Michael Schwager
<p>
To help you understand the nitty gritty of Sendmail's rules and rulesets, this article will take you on a tour of a couple of the rules. We'll look closely at two of the major anti-spam rulesets, <B>check_mail</B> and <B>check_rcpt</B>. These rulesets were extracted from <B>antispam.cf</B>; other rulesets mentioned in this document will be found there. (All related code for this article can be downloaded from the <I>Sys Admin</I> Web site.)<p>
<B>Check_mail</b><p>Refer to the <B>check_mail</B> listing (Listing 1). We'll start at line 6, which says, "This is a ruleset." Note that the input to this set is the mail address following the "Mail From:" command (i.e., <B>&lt;schwager@enteract.com&gt;</B>). We will use that as the example input for <B>check_mail</B>. Here are selected annotated lines from the rest of the ruleset that illustrate its operation:<p>
<pre>
<U>Line           Rule</U>
7 R$*          $: $1 $| $&gt;"Local_check_mail" $1
</pre>
The <B>$*</B> matches anything, so basically our input is copied to <B>$1</B>. The right-hand side (RHS) rewrites the input as:<p>
<pre>
&lt;schwager@enteract.com&gt; $| (the results of &lt;schwager@enteract.com&gt;
as returned by the Local_check_mail ruleset)
</pre>
So we enter <B>Local_check_mail</B>. Let's make it simple and assume it looks like:<p>
<pre>
SLocal_check_mail
R$*                     $@ OK
</pre>
The input to this ruleset is <B>&lt;schwager@enteract.com&gt;</B>. Since the <B>$*</B> matches it, we return from the ruleset (<B>$@</B>) after rewriting the input with the "OK". Thus, we jump back to line 7, and the result of the rewrite on the RHS is:<p>
<pre>
&lt;schwager@enteract.com&gt; $| OK
</pre>
The <B>$:</B> says that we only apply the RHS once (otherwise we'd have an infinite loop). So, we jump down to line 8:<p>
<pre>
8  R$* $| $#$*                $#$2
</pre>
The <B>$*</B> will match <B>&lt;schwager@enteract.com&gt;</B>, and the <B>$|</B> will match the <B>$|</B> of our input - of the rule, not of the ruleset. (At this point, we don't care what the input of the ruleset is; each rule gets its input from the results of the rule above.) Note that the <B>$|</B> is actually the "then" operator of an if-then-endif macro conditional, but it makes a handy token to use as a separator, because you will not see it in an email address. Now we take the <B>$#$*</B> of the left-hand side (LHS). This will not match the OK, so this rule does not match. We move to the next rule:<p>
<pre>
9  R$* $| $*          $@ $&gt;"Basic_check_mail" $1
</pre>
Here <B>$*</B> will match <B>&lt;schwager@enteract.com&gt;</B>, the <B>$|</B> will match the <B>$|</B> of our input, and <B>$*</B> will match OK. So, on the RHS we copy the first position of the input (<B>&lt;schwager@enteract.com&gt;</B>) to <B>$1</B>. We call <B>Basic_check_mail </B>with <B>&lt;schwager@enteract.com&gt;</B>. Before we jump to line 11, I'd like to call your attention to a little Sendmail trick. Note how lines 7, 8, and 9 use the <B>$|</B> separator. The purpose of line 7 is both to run the input through the <B>Local_check_mail</B> ruleset, and to preserve the input for use by <B>Basic_check_mail</B> in line 9. This is an example of how the simplicity of Sendmail's operators means we sometimes have to be devious to get work done.<p>
On to <B>Basic_check_mail</B>. Lines 13-15 check to see whether Sendmail is deferring delivery; if so, we don't do any more processing in this rule. Note that line 15's purpose, again, is to restore the input to what it was when we entered this rule. Line 17 returns ok because <B>MAIL From: &lt;&gt;</B> means that we're receiving mail from the Mailer-Daemon.<p>
Line 18 is interesting, because it takes the input and runs it through two rulesets, first Ruleset 3 and then Parse0. The results of Ruleset 3 will become the input to Parse0. Parse0 does some syntax and error checking. Ruleset 3 will ensure that our hostname is a fully qualified domain name, and it will focus attention on the hostname, by moving the brackets. Thus, <B>&lt;schwager@enteract.com&gt;</B> will become <B>schwager&lt;@enteract.com.&gt;</B>. Note the addition of the trailing dot on the domain name. The <B>&lt;?&gt;</B> is prepended to the results of the Ruleset 3 call, so our input to this rule comes out as:<p>
<pre>
&lt;?&gt; schwager&lt;@enteract.com.&gt;
</pre>
Rule 19 strips the dot; we now have:
<pre>
&lt;?&gt; schwager&lt;@enteract.com&gt;
</pre>
after going through it once. We don't need to worry about an infinite loop here, because this does not match the LHS after being rewritten by the RHS the first time.<p>
Line 21 is for handling non-DNS hostnames, although we aren't doing anything special with them (you need to be connected to the Internet to talk to our host). Line 22 matches, though, so our RHS will look like this after replacing the <B>$1</B>'s and <B>$2</B>'s: <B>$1</B> becomes <B>schwager</B>; <B>$2</B> becomes <B>enteract.com</B>; and <B>$3</B> is empty.<p>
<pre>
$: &lt;? $(resolve enteract.com $: enteract.com &lt;PERM&gt; $) &gt; schwager &lt;\ 
@ enteract.com &gt;
</pre>
It will try to resolve <B>enteract.com</B> using the host map (discussed at length in the Sendmail book), which is named "resolve". If successful, it will return <B>&lt;OK&gt;</B> and append that to the domain name. If not, it will return:<p>
<pre>
enteract.com &lt;PERM&gt;
</pre>
In our case, it's successful, so the final result is:<p>
<pre>
&lt;? enteract.com&lt;OK&gt; &gt; schwager &lt; @ enteract.com &gt;
</pre>
The <B>$:</B> at the beginning of the RHS means rewrite only once. On to line 23. We will match the LHS. The <B>$-</B> is a pattern we have not seen before, it means to match exactly one token, which would be the "OK". So, <B>$1</B> becomes <B>enteract.com</B>; <B>$2 </B>becomes <B>OK</B>; <B>$3 </B>becomes <B>schwager</B>; <B>$4</B> becomes <B>enteract.com</B>; and <B>$5</B> is empty.<p>
The RHS then rewrites it once as:<p>
<pre>
&lt;OK&gt; schwager &lt; @ enteract.com &gt;
</pre>
Lines 26-34 will not match. Line 33 is worth looking at. What if a spammer says in the SMTP conversation, "MAIL From: &lt;mr_friendly@localhost&gt;", but they were from a host without a DNS entry? The input of line 27 would be:<p>
<pre>
&lt;OK&gt; mr_friendly &lt; @ localhost &gt;
</pre>
but then we rewrite it, while checking the <B>client_name</B>. Since it will not resolve, <B>$&amp;{client_name}</B> looks like <B>[ 192.168.0.55 ]</B> or some such. So line 27 will return:<p>
<pre>
&lt;? [ 192.168.0.55 ] &gt; &lt;OK&gt; mr_friendly &lt; @ localhost &gt;
</pre>
If this were from the localhost, line 32 would catch it and rewrite, so the input would look like:<p>
<pre>
&lt;?&gt; &lt;mr_friendly@localhost&gt;
</pre>
However, here it will not. So line 33 will match, and the nasty spammer will be denied.<p>
Back to our schwager mail address. Line 37 will match, so our RHS will essentially be: <B>$1</B> becomes <B>OK</B>; <B>$2</B> becomes <B>schwager</B>; <B>$3</B> becomes <B>enteract.com</B>; <B>$4</B> is empty.<p>
<pre>
&lt;USER $(access schwager@ $: ? $) &gt; &lt;OK&gt; schwager &lt; @ enteract.com &gt;
</pre>
The part here to notice is:<p>
<pre>
$(access schwager@ $: ? $)
</pre>
This looks up <B>schwager@</B> in our access database. Note that we're looking up a username, and the <B>@</B> is appended to it. This is because we're receiving mail from an external host. If line 37 does not match, we will return a simple <B>?</B>. Assuming it does not, the result of 37 is:<p>
<pre>
&lt;USER ?&gt; &lt;OK&gt; schwager &lt; @ enteract.com &gt;
</pre>
Line 39 will match, and we will look up <B>schwager@enteract.com</B> in the access database. Line 39 includes any strings to the right of the domain. Quite honestly, I'm not sure when you would use this. Note that line 39 spans two lines; the carriage return in between is simply whitespace. Note that after the database lookup (the closing "<B>?)</B>" ), the rest of line 40 is the same as 37. Assuming a negative result for us, line 40 returns the same result as 37.<p>
Lines 42/43 are nearly identical to 39/40, except they do not attempt to match past the domain name. Again, our result looks like that of line 37. Lines 45/46 match, but this time we get an RHS that looks like:<p>
<pre>
$&gt;LookUpDomain &lt;enteract.com&gt; &lt;OK&gt; &lt;&gt;
</pre>
The <B>LookUpDomain</B> ruleset, found elsewhere in the config file, takes three parameters as input:<p>
<p>
<B>&lt;$1&gt;</B> - Key (domain name)<br>
<B>&lt;$2&gt;</B> - Default (what to return if not found in db)<br>
<B>&lt;$3&gt;</B> - Passthru (additional data passed through unchanged)<br>
<p>
<B>LookUpDomain</B> will loop and take a domain, for example <B>internal.enteract.com</B>, and check the name against the access database. First, it checks <B>internal.enteract.com</B>. Then, it strips the first word and the dot, and checks <B>enteract.com</B>. Finally, it checks <B>com</B>.<p>
If none of those are found, it will return <B>$2</B>. If any are found, it will return the value found in the access database: OK, TEMP, a string, etc. (see lines 59-65).<p>
We're nearing the end of this ruleset; <B>LookUpDomain</B> will look for <B>enteract.com</B> and not find it, so the result of line 46 is:<p>
<pre>
&lt;OK&gt; &lt;&gt;
</pre>
Moving along rapidly now, none of lines 47-58 match. Line 59 matches, and the output of the RHS is:<p>
<pre>
&lt;OK&gt;
</pre>
The <B>$@</B> means to exit this rule after rewriting, so we return <B>&lt;OK&gt;</B>. All the <B>check_ rules</B> work in such a way that as long as we do not return a <B>#error</B> or <B>#discard,</B> the mail will pass our ruleset. Since we return <B>&lt;OK&gt;</B> (it could have been any text at all except the aforementioned), this is successful and the mail will be accepted (at least according to <B>check_mail</B>).<p>
Now, we have taken a detailed tour through the <B>check_mail </B>ruleset. From an anti-spam perspective, things to note are:<p>
<pre>
Line	Purpose
18	Check for errors in the mail address
22	Sender's domain name must resolve in DNS
33	If you say you're local, you better be local
37-48	Check the access database for:
	<B>user@</B>
	<B>user@domain</B> and stuff
	<B>user@domain</B>
	domain and all subdomains
53-55	Reject if mail is from a non-local host and 
        has no domain name on the From: address
58-65	Exit the ruleset with the results of the 
        searches from 37-48
</pre>
As a quick exercise, let's look at what happens if we receive a connection from <B>cyberspammer.com</B>, and they give their return address in the mail envelope as "friend" (i.e., during the "MAIL From: " SMTP conversation). Assume <B>friend@</B> is not found in the access database. I'll gloss over some details and zip through quickly. The trip through the ruleset looks like this:<p>
<pre>
Line	Action
13	Input: friend. Ignore lines 14-17
18	Returns <B>&lt;?&gt; friend</B>
19-47	No matches anywhere
48	Look up friend@, not found; the RHS returns
	<B>&lt;USER ?&gt; &lt;?&gt; friend</B>
50	Matches and returns <B>&lt;?&gt; friend</B>
53	Matches and returns <B>&lt;? cyberspammer.com&gt; friend</B>
55	Matches and returns
	<B>$#error $@ 5.5.4 $: "553 Domain name required"</B>
</pre>
Thus, this mail will be rejected.
<B>The check_rcpt Ruleset</B><p>
Recall the SMTP conversation. Between the:<p>
<pre>
client:  MAIL FROM: some_address@somewhere.com
</pre>
and the<p>
<pre>
host:    250 some_address@somewhere.com... Sender ok
</pre>
This is what we just covered. <B>Check_mail</B> goes into action as soon as the client sends the address. Next, the client sends the recipient address(es). This is where the <B>check_rcpt</B> ruleset comes in. I will now cover this ruleset in detail. Check the ruleset listing in the file <B>check_rcpt</B> (Listing 2). Again, we begin at line 6. Notice how this ruleset looks almost identical to the <B>check_mail</B> ruleset. Since we are in the <B>antispam.com</B> domain, we will look at the recipient address <B>&lt;schwager@antispam.com&gt;</B>. This mail, too, will end in success but will give us the opportunity to exercise as many rules as possible.<p>
We can see that we jump right into <B>Basic_check_rcpt</B>, and that lines 13-15 don't apply.<p>
In line 17, we call the <B>ParseRecipient</B> rule. The purpose is to look at the hostname and strip it off the mail address if it is designated RELAY in the access database or is in the relay-domains file. For example, if a spammer tries to send through us:<p>
<pre>
schwager@final.domain.com@antispam.com
</pre>
we will first take off the <B>antispam.com</B> and look at <B>final.domain.com</B> for the remainder of this ruleset. <B>ParseRecipient</B> is smart enough to handle wily tricks, like:<p>
<pre>
schwager@final.domain.com@antispam.com@antispam.com
</pre>
It will change that to <B>schwager@final.domain.com</B>, so we can check that domain in this ruleset.<p>
<B>ParseRecipient</B> also calls Parse0 and ruleset 3. So, since we are looking at <B>&lt;schwager@antispam.com&gt;</B>, we will return from <B>ParseRecipient</B> with <B>schwager&lt;@antispam.com&gt;</B>. Line 20 changes our input to <B>&lt;?&gt; schwager&lt;@antispam.com&gt;</B>.<p>
Line 21 matches, since Class w includes our <B>antispam.com </B>domain. Thus, we end up with:<p>
<pre>
&lt;&gt; &lt;USER schwager&gt; &lt;FULL schwager@antispam.com&gt; &lt;HOST antispam.com&gt;
&lt;schwager&lt;@antispam.com&gt;&gt;
</pre>
By doing it this way, we are able to look up each field in the access database in lines 24-28: each of the user, the hostname, and the full email address. Note that the username is the local username, so to deny mail to a user in your domain you need to not include the <B>@</B> sign after the name.<p>
Lines 32 and 33 act on the results of the access database lookup. If the data for the key is "REJECT" or an error string, the mail will be denied. Otherwise, we continue on. Note that we will get to line 36, and our input now looks like:<p>
<pre>
schwager&lt;@antispam.com&gt;
</pre>
Line 36 allows for mail destined to our domain; so we will return OK from this ruleset. Had we been looking for an address not in our domain, for example to <B>user@otherdomain.com</B>, we would continue on. Here's what would happen: Line 38 does a more complete lookup of the domain and all subdomains in our email address in the access database.<p>
Lines 44-48 will check whether the mail is for a local user (i.e., simply "username"). If so, okay. If not, the input remains untouched. Note that at this point, we are guaranteed to have an Internet-bound email because we've checked for a local user; we've checked to see if it is destined for a host in our domain; and we've checked to see if it is destined for a host that we relay for.<p>
In lines 50-62, we check to see whether the client that connected to us is in our domain or is one of the hosts we relay for. If so, okay. If not, we look at the IP address of the client in line 66. If the address is not from one of our machines or a machine we relay for, then we fall through to line 78.<p>
From an anti-spam perspective, the key lines in this ruleset are:<p>
<pre>
Line	Purpose
17	Check for errors in the mail address; make the 
        address look like <B>user&lt;@host.com&gt;</B>
20-33	Check for user, host, or <B>user@host</B> in 
        the access database
35-39	Mail to our domain or hosts we relay for: OK
43-47	Mail to a local user: OK
50-62	The connection was from a local machine or a 
        host we relay for: OK
65-74	The connection was from a local machine or a 
        host we relay for and they are not in the 
        DNS: OK
78	Reject mail that is both not to one of our 
        machines, and not from one of our machines
</pre>
<p>
<h1>About the Author</h1><p>
Mike Schwager is a contractor specializing in UNIX and the Internet. He has spent the past 15 years writing C and Perl code, shell scripts, and maintaining systems in the corporate and educational environments. Email him at Michael@Schwager.com or visit http://come.to/lanicservices.





<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
