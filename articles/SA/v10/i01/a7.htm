<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i01: Homebrew High Availability: Booting Linux from a RAID-1 Device</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2001/jan2001.tar"><b class=codeListing>jan2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1> <img src="a7.gif" width="200" height="177" align="right">Homebrew 
              High Availability: Booting Linux from a RAID-1 Device</h1>
            <p> <i>Drew Smith</i>
            <p><i> </i>Recently, a colleague told me about a trick his company 
              uses to make Windows NT remote administration easier. His firm provides 
              professional services for many small server rooms around town, and 
              the trick involved mirrored IDE hard disks in removable drive bays 
              -- by mirroring the primary disk, you provide an easier backout 
              path when doing upgrades. When doing service work, he always removes 
              the second hard disk, providing an up-to-the-minute backup in case, 
              for example, the latest Microsoft "Service Pack" does 
              more harm than good.
            <p> My first reaction was to say "Of course, you can do that 
              in Linux!". However, it brought to mind a few questions -- 
              most importantly, just <i>how</i> would you go about doing this? 
              I mulled it over and eventually decided to explore it on my own. 
              I found that it was possible to boot Linux from a software RAID-1 
              device, along with a few <b>LILO</b> and <b>mkinitrd</b> tricks, 
              and this little hack could potentially give your Linux Web server 
              a performance boost. In addition to doubling the reliability of 
              your hard disk, RAID-1 configuration also gives your IDE or SCSI 
              bus a break, providing two different paths from which to read the 
              disk. Of course, write operations will be slower because the data 
              must be written to the drive twice, but in many situations (most 
              commonly Web servers, where read operations are a top priority), 
              slower writes are not a drawback.
            <p> This is a project for anyone with a Linux machine. If you're 
              new to Linux, you'll need a solid understanding of hard-disk 
              partitioning and the Linux command line, but it's surprisingly 
              easy and fun to do.
            <p> <b>Getting Started</b> 
            <p>The machine you choose to work with probably shouldn't be 
              a production server. As with any project that involves partitioning, 
              you will run the risk of losing data. The machine should have two 
              identical hard disks. Although this process will work happily with 
              different-sized disks, I've decided to stay on the safe side. 
              Any size disks will do, and they can be either SCSI or IDE. For 
              this example, I've used two Quantum Fireball 20-GB drives, 
              and I've installed them as the primary drives on each of the 
              machine's IDE buses. The machine in the example is a VA Linux 
              2130 rackmountable server with a single 650-MHz Pentium III, and 
              I used a stock installation of RedHat 6.2.
            <p> The safest and easiest way is to start from a completely fresh 
              machine, installing the operating system as a part of the process, 
              but it doesn't necessarily have to be this way. (As of this 
              writing, RedHat 7.0 has been released, but I don't have a machine 
              around to re-test with at the moment.) If you're starting from 
              scratch, you'll end up with a cleaner system if you install 
              the operating system to the hard disk on the second IDE bus, or 
              <b>/dev/hdc</b>. You'll probably want to use the original <b>fdisk</b> 
              rather than DiskDruid or a similar tool. Making a program easier 
              to use often removes parts of the functionality, and <b>fdisk</b> 
              is a prime example. DiskDruid didn't allow me to create <b>/dev/hdc1</b>. 
              Your configuration should look similar to this:
            <p> 
            <pre>
/dev/hdc1 - 20M, mounted on /boot
/dev/hdc2 - &lt;most of the drive&gt;, mounted on /
/dev/hdc3 - 120M, for swap-space
</pre>
            Give <b>/dev/hdc1</b> a <b>boot</b> flag, as you'll be using 
            it as the booting drive when you next power down. However, first install 
            the rest of the OS. Normally, security considerations would require 
            creating more than just these three partitions. A separate partition 
            for <b>/tmp</b> and <b>/var</b> is always a good idea to prevent an 
            attacker from filling your root partition with a denial-of-service 
            attack on your logfiles. Without quotas, a malicious user can do the 
            same if you don't have a separate partition for <b>/home</b>. 
            This article will only cover a basic example, but you can take it 
            to whatever lengths you feel appropriate.
            <p> Install the OS, and be certain to create a bootdisk. This step 
              should also be done if you're not installing from scratch; 
              see <b>man</b> <b>mkbootdisk</b> for more information on how to 
              do this step. Because we are installing from scratch, write the 
              boot information to the superblock of <b>/dev/hdc</b>, rather than 
              the master boot record (MBR). This may or may not allow you to boot 
              the system after the install is complete, but we've got a bootdisk 
              and are far from done anyway.
            <p> Finish installing and reboot. If it doesn't come up, use 
              the bootdisk, and log in as root.
            <p> <b>Creating the RAID Devices</b> 
            <p>Now that we've got a running system, it's time to tackle 
              that second drive we've put in (the primary drive in the machine). 
              We'll configure it as a RAID device with two drives involved, 
              declaring <b>/dev/hdc</b> to be a mirror of <b>/dev/hda</b>. Here's 
              the really clever part -- we'll declare <b>/dev/hdc</b> 
              as "failed" until we move the operating system off of 
              it and onto the new RAID device. Then simply add <b>/dev/hdc</b> 
              to the RAID as a replacement for the failed disk, and allow it to 
              rebuild.
            <p> Note that Linux handles software RAID with the "md" 
              driver, which stands for "multiple devices". This driver 
              has the ability to control storage devices in several different 
              fashions -- RAID-0 through RAID5, or even combinations of two 
              or more types. Drives are allocated into a storage array, and when 
              the array is of RAID type 1 or higher, the drives work together 
              towards redundancy. Should one drive fail, the RAID subsystem will 
              mark that drive as "failed", stopping any subsequent requests.
            <p> Partition <b>/dev/hda</b> exactly the same as <b>/dev/hdc</b>. 
              As <b>root</b>, <b>fdisk -l /dev/hdc</b> provides a listing of the 
              partitions on that drive, which we'll then match. However, 
              we won't use the same partition types as before; instead, set 
              the main data partitions as type <b>fd</b>, or "<b>Linux raid 
              autodetect</b>". In my case, I set up <b>/dev/hda</b> like 
              this:
            <p> 
            <pre>
DEVICE     BOOT   START   END   BLOCKS     ID  SYSTEM
/dev/hda1  *      1       3     24066      fd  Linux raid autodetect
/dev/hda2         4       2484  19928632+  fd  Linux raid autodetect
/dev/hda3         2485    2498  112455     82  Linux swap
</pre>
            Build these partitions, but don't create filesystems on them 
            yet. We must first declare the RAID device to the system, using a 
            configuration file in <b>/etc/</b>, called a "<b>raidtab</b>". 
            Listing 1 shows my copy of the <b>raidtab</b> file. The format is 
            fairly straightforward, but for larger formats (e.g., partitions for 
            <b>/var/</b>, <b>/tmp/</b>, etc.) can become confusing pretty quickly. 
            There's also a manpage dedicated to this file.
            <p> After you've written a <b>/etc/raidtab</b> file, it's 
              time to create the actual RAID devices, which is accomplished with 
              <b>mkraid</b>, a program from the "raidtools". In an uncommon 
              show of forgiveness, this program will not actually let you create 
              the new RAID devices without adding an <b>-f</b> switch to "force" 
              it. The partitions involved are of type "<b>Linux raid autodetect</b>", 
              and <b>mkraid</b> assumes they are already a part of another RAID 
              device. You <i>do</i> want to force it, however, and the extra warnings 
              are humorous. Go ahead and create the first RAID device:
            <p> 
            <pre>
[root@tester /etc]# mkraid /dev/md0
</pre>
            Linux uses the special <b>/proc</b> filesystem to provide interesting 
            statistics about running processes and the kernel, and the raidtools 
            are no exception. A special file called <b>/proc/mdstat</b> will show 
            you the current status of any <b>md</b> devices in the system. <b>cat 
            /proc/mdstat</b> will show you some information on your newly created 
            RAID device. View that file, then create the second device.
            <p> 
            <pre>
[root@tester /etc]# mkraid /dev/md1
</pre>
            Check the <b>/proc/mdstat</b> file again. You should now see both 
            devices -- both with a disk marked as failed such as:
            <p> 
            <pre>
[root@tester /etc]# cat /proc/mdstat
Personalities : [raid1]
read_ahead 1024 sectors
md1 : active raid1 hda1[0] 24000 blocks [2/1] [U_]
md0 : active raid1 hda2[0] 19928512 blocks [2/1] [U_]
unused devices: &lt;none&gt;
</pre>
            <b>/dev/md1</b> will hold the boot information, and <b>/dev/md0</b> 
            will be the root partition. You'll need to create filesystems 
            on the new devices before you can use them:
            <p> 
            <pre>
[root@tester /etc]# mke2fs /dev/md0
    &lt;stuff&gt;
[root@tester /etc]# mke2fs /dev/md1
    &lt;stuff&gt;
</pre>
            With that, two new filesystems are ready to be mounted.
            <p> <b>Now What?</b>
            <p> You now have a booting system and two working RAID devices, but 
              how do you switch the operating system over into the new devices 
              and make it boot? Actually, only the "making it boot" 
              part is difficult; some tricks with <b>LILO</b> and <b>mkinitrd</b> 
              will help. For now, move the filesystem across with a <b>cp</b>. 
              First mount the RAID device to an arbitrary directory:
            <p> 
            <pre>
[root@tester /etc]# mkdir -p /feh
[root@tester /etc]# mount /dev/md0 /feh
</pre>
            You should maintain all the permissions and datestamps, etc., so use 
            the <b>-a</b> switch to make <b>cp</b> treat the operation as an archive:
            <p> 
            <pre>
[root@tester /etc]# cp -a /bin /feh
[root@tester /etc]# cp -a /dev /feh
[root@tester /etc]# cp -a /etc /feh
[root@tester /etc]# cp -a /home /feh
[root@tester /etc]# cp -a /lib /feh
[root@tester /etc]# cp -a /root /feh
[root@tester /etc]# cp -a /sbin /feh
[root@tester /etc]# cp -a /tmp /feh
[root@tester /etc]# cp -a /usr /feh
[root@tester /etc]# cp -a /var /feh
</pre>
            Notice, however, that from a stock RedHat 6.2 system, I've omitted 
            the <b>/opt</b>, <b>/proc</b>, and <b>/boot</b> directories. We'll 
            create those by hand:
            <p> 
            <pre>
[root@tester /etc]# mkdir -p /feh/boot
[root@tester /etc]# mkdir -p /feh/opt
[root@tester /etc]# mkdir -p /feh/proc
</pre>
            The "lost+found" directory should have already been created 
            by <b>mke2fs</b>. Mount the other RAID device under <b>/feh/boot</b>, 
            and copy all of the boot files into it:
            <p> 
            <pre>
[root@tester /etc]# mount /dev/md1 /feh/boot
[root@tester /etc]# cp -a /boot /feh
</pre>
            Now make the necessary changes in the new filesystem to have it correctly 
            mount the new filesystems after reboot. You must edit the <b>/feh/etc/fstab</b> 
            file to change the <b>/</b> and <b>/boot</b> partitions. The current 
            <b>/etc/fstab</b> file looks like this:
            <p> 
            <pre>
/dev/hdc2       /               ext2    defaults        1       1
/dev/hdc1       /boot           ext2    defaults        1       2
/dev/fd0        /mnt/floppy     auto    noauto,owner    0       0
none            /proc           proc    defaults        0       0
none            /dev/pts        devpts  gid=5,mode=620  0       0
/dev/hdc3       swap            swap    defaults        0       0
</pre>
            We'll only be changing it slightly, pointing it to the new devices:
            <p> 
            <pre>
/dev/md0        /               ext2    defaults        1       1              
/dev/md1        /boot           ext2    defaults        1       2              
/dev/fd0        /mnt/floppy     auto    noauto,owner    0       0
none            /proc           proc    defaults        0       0              
none            /dev/pts        devpts  gid=5,mode=620  0       0
/dev/hdc3       swap            swap    defaults        0       0               
</pre>
            Nothing else in this file needs to change. We're almost ready 
            to reboot and try to boot into the new RAID-1 Linux machine for the 
            first time, but we'll definitely need a bootdisk to start. Grab 
            another blank floppy and build one:
            <p> 
            <pre>
[root@tester /etc]# mkbootdisk --mkinitrdargs "--preload raid1" 2.2.14-5.0<p>
</pre>
            Notice the <b>--mkinitrdargs</b> switch, and the value afterwards. 
            The <b>mkinitrd</b> command is an extremely powerful tool for booting 
            machines with special requirements. At its simplest, an <b>initrd</b> 
            is an "initial ramdisk", which contains modules to be loaded 
            before anything else. For example, imagine you're trying to boot 
            a machine with a non-standard SCSI controller. You will have serious 
            problems booting if the kernel itself sits on a drive on that controller! 
            The initial ramdisk could hold the module needed to talk to that controller, 
            and as such, using it could prevent the need of a boot floppy. In 
            this case, we'll add the module required to speak to RAID-1 devices 
            to this <b>initrd</b>, and build a boot floppy accordingly. If you're 
            using SCSI devices, you may want to add a preload statement, which 
            loads the necessary modules for your SCSI controller.
            <p> Reboot the machine from the new floppy.
            <p> <b>First Boot with RAID-1</b>
            <p> As the machine begins to boot from the floppy disk, there will 
              be a <b>BOOT</b>: prompt displayed for about ten seconds. We want 
              to type in an argument here. Don't worry about time, because 
              after you start typing, it'll wait for you to finish.
            <p> 
            <pre>
BOOT: linux root=/dev/md0
</pre>
            This should bring up your machine with the RAID devices as your boot 
            and root disks! Log in and type <b>df</b> to see something like this:
            <p> 
            <pre>
[root@tester /etc]# df
Filesystem    1k-blocks    Used      Available  Use%   Mounted on
/dev/md0      10615648     415012    18204212   2%     /
/dev/md1      23239        2442      19597      11%    /boot
[root@tester /etc]#
</pre>
            Next, the idea is to make LILO want to boot from these new devices, 
            and to make certain that it will boot from either one.
            <p> If you don't see output like this, something's wrong. 
              Is it your bootdisk? What are the error messages? Did your system 
              almost come up? How far did the boot get before stopping? Often, 
              the best step here is to return to your former setup (i.e., remove 
              the floppy and reboot), repartition the RAID disk, and try again.
            <p> <b>Making It All Bootable</b>
            <p> This section assumes you've got a recent backup of your system. 
              With that out of the way, repartition <b>/dev/hdc</b> and add it 
              to the new RAID devices as a replacement for the "failed disks". 
              Using <b>fdisk</b>, open <b>/dev/hdc</b> and use the "<b>t</b>" 
              key to toggle the partition type for the first two partitions from 
              <b>83</b> (Linux) to <b>fd</b> (Linux raid autodetect). If you're 
              absolutely certain that you're not going to get in trouble 
              for losing any data, you can now use the "<b>w</b>" key 
              to write changes to the disk.
            <p> Adding the new partitions to the RAID device shows just how easy 
              it is to work with RAID under Linux:
            <p> 
            <pre>
[root@tester /etc]# raidhotadd /dev/md0 /dev/hdc2
       &lt;stuff&gt;
[root@tester /etc]# raidhotadd /dev/md1 /dev/hdc1
       &lt;stuff&gt;
</pre>
            Don't worry about the <b>&lt;stuff&gt;</b>, unless there's 
            something extremely alarming in the messages. If something goes horribly 
            pear-shaped, delete all the partitions on <b>/dev/hdc</b> and try 
            again. If that fails, you're hooped -- bring out the backups 
            and start over.
            <p> At this point, we need a proper system-wide <b>initrd</b> image, 
              containing all the modules needed to boot the system into RAID-1. 
              This is like the bootdisk we made earlier, but it will be written 
              to the hard disk.
            <p> 
            <pre>
[root@tester /]# mkinitrd /boot/initrd-2.2.14-5.0.img \
&gt; --preload raid1 2.2.14-5.0
</pre>
            It's important that you specify your kernel version here. In 
            my case, the stock RedHat 6.2 kernel is 2.2.14-5.0.
            <p> As a final step, use <b>LILO</b> to make the system bootable. 
              We're going to be a bit sneaky here and use two slightly different 
              <b>LILO</b> configuration files -- one for the booting of each 
              drive. This way, either drive can fail and the machine will still 
              boot.
            <p> Listing 2 shows a working <b>lilo.conf.hda</b> configuration file. 
              Note that I specified the disk as <b>/dev/md0</b>. Also note that 
              the sectors, heads, and cylinders are included (different from standard 
              <b>LILO</b> config). These numbers can be obtained with <b>fdisk 
              -l /dev/hd&lt;x&gt;</b> and are extremely important here.
            <p> In the second file (Listing 3), I changed only one parameter -- 
              the <b>boot=</b> flag. After you've written these two files, 
              run <b>LILO</b> with the <b>-C</b> flag to specify which configuration 
              file to use:
            <p> 
            <pre>
[root@tester /etc]# lilo -C /etc/lilo.conf.hda
Added LinuxRAID *
    [root@tester /etc]# lilo -C /etc/lilo.conf.hdc
Warning: /dev/hdc is not on the first disk
Added LinuxRAID *
</pre>
            Reboot. If all went well, you're booting into a mirrored, high-availability 
            (well, higher availability) Linux machine!
            <p> <b>Conclusion</b>
            <p> Although the benefits of this configuration are obvious, the fact 
              remains that it is a reasonably simple procedure, and the resulting 
              machine is much more stable than before. The hard disk, usually 
              being the only moving part in a Linux system (with the exception 
              of cooling devices), is usually the first to fail. Adding monitoring 
              and paging capabilities is fairly simple (although beyond the scope 
              of this article), but for deployment to remote locations, an hour 
              or so of work could save you the trouble of getting out of bed to 
              fix a downed system.
            <p> <b>Acknowledgements</b>
            <p> Thanks to Peter Lincoln for putting the idea into my head and 
              to Linus Vepstas for writing the HOWTO that pointed me in the right 
              direction. Also, my girlfriend Erin, for putting up with my near-constant 
              geeking.
            <p> <i>Drew Smith lives in East Vancouver, has blue hair, lives in 
              a house full of geeks, and works as the UNIX Network Administrator 
              for a stock trust company. When not geeking, he makes live electronic 
              music for raves. He can be reached via the geek-house Web site, 
              at: </i><b><i>http://eastvan.bc.ca</i></b><i>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
