<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i01: Build a Floppy Firewall</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/jan2001.tar"><b class=codeListing>jan2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1> <img src="a10.gif" width="200" height="177" align="right">Build 
              a Floppy Firewall</h1>
            <p> <i>Andreas Meyer</i>
            <p> Here's how I turned an unused PC into a packet-filtering 
              firewall using a package called <b>floppyfw</b>. The firewall boots 
              off a single floppy, runs completely in RAM, and uses ipchains for 
              the filter rules. It also does IP masquerading, port forwarding, 
              and can log to a remote host using <b>syslog</b>. All this in a 
              machine with as little as 8 MB of RAM and no hard drive!
            <p> <b>floppyfw</b>'s author, Thomas Lundquist, describes it 
              as a Linux "screening router with firewall capabilities". 
              It boots a Linux kernel and comes with a minimal set of tools to 
              get the job done. If you think about it, that's actually a 
              feature. If a bad guy were to get into your firewall machine somehow, 
              there won't be much for him to use against you. And since we're 
              running completely on a RAM disk, a simple reboot from the floppy 
              will restore the system to its original state.
            <p> As with many Linux projects, <b>floppyfw</b> has a do-it-yourself 
              aspect. But I'll show you where I found a set of almost-ready-to-run 
              filter rules, so you can quickly set up your own firewall.
            <p> <b>Hardware</b>
            <p> You probably have a suitable machine sitting around (or enough 
              parts to build one). You will need a 386 or better, with:
            <p> 
            <p> 
            <ul>
              <li> At least 8-MB RAM 
              <li> 3.5" floppy drive 
              <li> Video card 
              <li> Keyboard 
              <li> video monitor
            </ul>
            <p> Note that if you're going to run "headless", you'll 
              only need the keyboard and monitor for setup and testing.
            <p> Install a pair of network cards. The following types are supported 
              by <b>floppyfw</b>:
            <p> 
            <p> 
            <ul>
              <li> 3Com 3c509 
              <li> NE2000 compatibles 
              <li> Tulip-based 
              <li> Intel EtherExpress PCI
            </ul>
            <p> Make sure each card has its own IRQ and memory address. That's 
              simple to set if your network cards have jumpers on them. I used 
              a pair of 3Com 3c509 cards. The first time I booted the machine, 
              both cards came up at IRQ 10 and 0x300. I fixed that problem using 
              a DOS utility from 3Com called 3C5X9CFG.EXE. Make a bootable DOS 
              floppy, copy the utility onto it, and (with both cards installed) 
              run it. Select a card, then auto-configure to have it choose a new 
              IRQ and memory address. Do this for both cards, and remember to 
              save the new settings. I found 3C5X9CFG.EXE on EtherDisk 4.3; the 
              newest EtherDisk is available on the 3Com Web site: <b>http://www.3com.com</b>.
            <p> <b>Software</b>
            <p> Making the <b>floppyfw</b> boot floppy is simple. Download the 
              latest stable image from:
            <p> 
            <pre>
http://www.zelow.no/floppyfw/download/
</pre>
            (As of this writing, 1.0.5 is the current image). Then write the image 
            to a floppy:
            <p> 
            <pre>
# dd if=floppyfw-1.0.5.img of=/dev/fd0 bs=72k
</pre>
            <b>Configuration</b>
            <p> This floppy disk is in DOS (FAT) format. Before you can boot it, 
              you'll need to take it to some other machine and edit the config 
              files. I prefer to use Linux mtools, like this:
            <p> 
            <pre>
$ cd /tmp
$ mcopy a:config
$ vi config
$ mcopy config a:
</pre>
            If you need to use another operating system, I understand you can 
            edit these files with NotePad.
            <p> There are actually five <b>floppyfw</b> configuration files:
            <p> 
            <p> 
            <ul>
              <li> <b> config</b> (main configuration) 
              <li> <b> firewall.ini</b> (filter rules) 
              <li> <b> modules.lst</b> (additional <b>ip_masq</b> modules) 
              <li> <b> syslinux.cfg</b> (kernel boot parameters) 
              <li> <b> syslog.cfg</b> (<b>syslog</b> config, such as <b>/etc/syslog.conf</b>)
            </ul>
            <p> You probably won't need to touch <b>syslinux.cfg</b> or <b>modules.lst</b> 
              at all. So I'll discuss the main file, <b>config</b>. In the 
              interest of clarity, I've stripped out most of the comments. 
              Most of the values are fairly obvious anyway, except maybe for the 
              switches near the end of the file:
            <p> <b>OPEN_SHELL</b> controls shell access (<b>/bin/ash</b>) at the 
              console. If your machine has less than 12MB of RAM, set ONLY_8M 
              to "y". <b>USE_SYSLOG</b> determines whether <b>syslogd</b> 
              runs or not, and <b>SYSLOG_FLAGS</b> are the flags passed to <b>syslogd</b> 
              when it does start.
            <p> Listing 1 contains my config file. By the way, I wasn't able 
              to get DHCP to work with my cable provider. They seem to have some 
              funky, non-standard DHCP server. Instead, I set things up as if 
              I had a static IP address. It's been working for two years 
              without a problem. Your mileage may vary.
            <p> <b>Filter Rules</b>
            <p> Now, let's have a look at <b>firewall.ini</b>. The original 
              file that <b>floppyfw</b> comes with only sets up basic masquerading 
              and rejects a couple of ports. Because we're building a firewall, 
              we need to modify it. However, creating a comprehensive set of filter 
              rules can be a big job. Logically, we want to close off all the 
              ports and only create openings for services we want to use. I was 
              relieved to find that most of this work has already been done by 
              someone else.
            <p> I started with the <b>ipchains</b> example file from Robert L. 
              Ziegler's Web site:
            <p> 
            <pre>
http://linux-firewall-tools.com/linux/faq/index.html
</pre>
            Ziegler is also the author of <i>Linux Firewalls</i> (New Riders Publishing, 
            ISBN: 0735709009). His rules are very well commented, explaining in 
            detail what each set is intended to do. When I actually needed to 
            open ports, these comments were invaluable.
            <p> The <b>ipchains</b> rules I started with are available here:
            <p> 
            <pre>
http://linux-firewall-tools.com/ftp/firewall/rc.firewall.ipchains
</pre>
            I recommend reading through the entire file first; you don't 
            want to use it as is! There are even some sections with alternative 
            paragraphs, marked with the word "OR". One or the other 
            of the paragraphs is meant to be used, but not both. To activate a 
            section, simply uncomment it.
            <p> With a file this large and a limited amount of space on the floppy 
              disk, it might be useful to delete the sections you think you will 
              never use. Of course, it's probably also wise to keep a spare 
              original around just in case. Once you've got a working configuration 
              written to floppy, you should make a few copies of that too, in 
              case the original wears out.
            <p> The <b>firewall.ini</b> provided in Listing 2 is one I've 
              modified for <b>floppyfw</b>. To avoid making too many global edits 
              and possibly damaging one or more rules, I made some simple variable 
              substitutions near the top of the file, passing values from <b>floppyfw</b> 
              variables into the appropriate variables used by Ziegler. In a few 
              cases, when there wasn't a handy variable to use, I set the 
              value directly.
            <p> Listing 2 should give you an idea what I did to open ports to 
              allow clients on my internal network to access the usual essential 
              services: DNS, SMTP, POP, NNTP, TELNET, SSH, FTP, HTTP, and WHOIS. 
              Note that I typically wouldn't have opened the POP port, but 
              I use <b>fetchmail</b> to retrieve mail from a remote provider. 
              If you're nervous about someone snooping your mail while it's 
              being pulled down, <b>fetchmail</b> has a neat feature that lets 
              you first establish an SSH connection and then download your mail 
              over that. In that case, you wouldn't need to open the POP 
              port.
            <p> <b>Logging</b>
            <p> If you use the default <b>syslog.cfg</b> file, <b>floppyfw</b> 
              will very happily log everything to the console. I run my firewall 
              machine headless (i.e., without a monitor or keyboard), so that 
              wasn't very useful to me. I want to analyze the log to keep 
              an eye on what's happening.
            <p> So, I set up one of my internal Linux machines as a log host. 
              To do this, make sure that your log host starts <b>syslogd</b> with 
              the <b>-r</b> option to allow it receive messages over the network. 
              (On a Red Hat system, for example, you'll need to edit <b>/etc/rc.d/init.d/syslog</b>). 
              Then, set up your <b>syslog.cfg</b>, making sure to change the 192.168.1.2 
              to your log host's IP address. See Listing 3 for <b>syslog.cfg</b>.
            <p> Once you've got these few files configured and written to 
              the floppy, you can boot up from the floppy and test some things. 
              Make sure your internal machines can all talk to each other. Also, 
              check whether you can access each external service for which you've 
              opened a port. Keep an eye on <b>/var/log/messages</b> if you're 
              logging remotely or on the firewall console screen if you're 
              not. These should provide clues as to what's working. You may 
              need to fine tune your firewall rules a bit. Just be sure to write 
              any changes back to the floppy, or they'll be lost.
            <p> Do keep an eye on your log file. When you finally put your firewall 
              into service, you might be surprised to see how many people are 
              doing port scans and other strange things. Isn't it nice to 
              have a firewall?
            <p> <b>References</b>
            <p> Floppyfw by Thomas Lundquist: 
            <p> 
            <pre>
http://www.zelow.no/floppyfw/
</pre>
            Linux Firewalls by Robert L. Ziegler: 
            <p> 
            <pre>
http://linux-firewall-tools.com/linux/faq/
</pre>
            <i>Andy Meyer as worked as an amusement ride operator and a technical 
            support engineer. For the past two years, he's been doing Linux 
            administration at Bell Laboratories in Murray Hill, NJ. In his spare 
            time, he likes to race HO-scale slot cars.</i>
        </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
