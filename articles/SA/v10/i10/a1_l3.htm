<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i10: Listing 3 slowdisk</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a1.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink">Listing 3</span></td>
		<td><a href="../../../../source/SA/2001/oct2001.tar"><b class=codeListing>oct2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b>Listing 3 </b><i>slowdisk</i></h1>
            <p> 
            <pre>
 1  #!/opt/esp/common/bin/perl
 2   
 3  use Getopt::Std;
 4  use Solaris::Kstat;
 5  use Solaris::MapDev qw(:ALL);
 6  use POSIX;
 7   
 8  getopts( "i:s:b:h" );
 9  die "usage: slowdisk -i&lt;interval&gt; -s&lt;slow&gt; -b&lt;busy&gt; -h\n"
10     if $opt_h;
11
12  $pk    = new Solaris::Kstat;
13  $hz    = sysconf(_SC_CLK_TCK);
14  @disks = grep(/^s+d/, get_inst_names());
15
16  foreach $dev ( @disks ) {
17     $pk-&gt;update();
18     ($mod, $inst)          = ($dev =~ /^(s+d)(\d+)$/);
19     %{$prev-&gt;{$dev}}       = %{$pk-&gt;{$mod}-&gt;{$inst}-&gt;{$dev}};
20     $prev-&gt;{$dev}-&gt;{utime} = $pk-&gt;{unix}-&gt;{0}-&gt;{system_misc}-&gt;{clk_intr};
21  };
22
23  while( 1 ) {
24     sleep( $opt_i || 5 );
25     foreach $dev ( @disks ) {
26        $pk-&gt;update();
27        ($mod, $inst)          = ($dev =~ /^(s+d)(\d+)$/);
28        %{$curr-&gt;{$dev}}       = %{$pk-&gt;{$mod}-&gt;{$inst}-&gt;{$dev}};
29        $curr-&gt;{$dev}-&gt;{utime} =
30           $pk-&gt;{unix}-&gt;{0}-&gt;{system_misc}-&gt;{clk_intr};
31     };
32     foreach $dev (keys %{$curr}) {
33        $etime = ($curr-&gt;{$dev}-&gt;{utime}-$prev-&gt;{$dev}-&gt;{utime})/$hz;
34        $rps   =
35           ($curr-&gt;{$dev}-&gt;{reads}-$prev-&gt;{$dev}-&gt;{reads})*1.0/$etime;
36        $wps   =
37           ($curr-&gt;{$dev}-&gt;{writes}-$prev-&gt;{$dev}-&gt;{writes})*1.0/$etime;
38
39        $hr_etime =
40           ($curr-&gt;{$dev}-&gt;{wlastupdate}-$prev-&gt;{$dev}-&gt;{wlastupdate})
41           || 1000000000;
42        $rdwr     = $rps+$wps;
43
44        $avw =
45           ($curr-&gt;{$dev}-&gt;{wlentime}-$prev-&gt;{$dev}-&gt;{wlentime})/$hr_etime;
46        $avr =
47           ($curr-&gt;{$dev}-&gt;{rlentime}-$prev-&gt;{$dev}-&gt;{rlentime})/$hr_etime;
48        $avwait = $rdwr ? ($avw*1000.0)/$rdwr : 0.0;
49        $avserv = $rdwr ? ($avr*1000.0)/$rdwr : 0.0;
50  
51        $w_pct =
52           ($curr-&gt;{$dev}-&gt;{wtime}-$prev-&gt;{$dev}-&gt;{wtime})*100.0/$hr_etime;
53        $r_pct =
54           ($curr-&gt;{$dev}-&gt;{rtime}-$prev-&gt;{$dev}-&gt;{rtime})*100.0/$hr_etime;
55        $svc_t = $avwait+$avserv;
56   
57        printf("slow disk detected: %-12s /dev/dsk/%-10s %-8.2f %-8.2f\n",
58           strftime("%T", localtime()), inst_to_dev($dev), $svc_t, $r_pct)
59           if ($svc_t&gt;=($opt_s || 50.0) &amp;&amp; $r_pct&gt;=($opt_b || 20.0));
60        %{$prev-&gt;{$dev}} = %{$curr-&gt;{$dev}};
61     };
62  };
</pre>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
