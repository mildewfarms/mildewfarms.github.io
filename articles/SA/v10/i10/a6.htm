<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i10: A Framework for JumpStart Begin/Finish Scripts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/2001/oct2001.tar"><b class=codeListing>oct2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a6.gif" width="200" height="174" align="right">A Framework 
              for JumpStart Begin/Finish Scripts</h1>
            <p> <i>Chris Josephes</i>
            <p> If you've ever managed a large Solaris environment, you are 
              probably familiar with JumpStart. JumpStart is a system for automating 
              the installation of new Solaris systems, over a network. With JumpStart, 
              an administrator can install an OS on multiple systems at once, 
              with little or no user intervention.
            <p> This article covers one aspect of the JumpStart process -- 
              the begin and finish scripts. It is presumed that the reader already 
              has some knowledge of the JumpStart system. To learn more about 
              JumpStart, I recommend reading "Automating Solaris Installations: 
              A Custom JumpStart Guide" by Kasper/McCellen, or the "Solaris 
              Advanced Installation Guide" that comes with your Solaris distribution.
            <p> Unlike other installation systems, JumpStart gives an administrator 
              two points where she can customize the installation process -- 
              the begin script, and the finish script. The scripts give you full 
              access to the hardware and software, so it's possible to automate 
              tasks that are normally performed manually after the installation.
            <p> Here is what happens during a JumpStart installation process:
            <p> 
            <p> 1. When the new host is booted from the network, its configuration 
              is examined to see which rules best identify the host. The rules 
              specify how an installation proceeds based on the architecture of 
              the host, the network the host is on, the size of the disks on the 
              host, or other parameters.
            <p> 2. The begin script runs. Because no operating system or software 
              has been installed yet, there aren't very many things you can 
              customize at this point. However, you can perform special disk partitioning 
              operations, change <b>eeprom</b> settings, or create a dynamic installation 
              profile.
            <p> 3. The <b>pfinstall</b> program runs. This program performs the 
              partitioning, filesystem setup, and package installation. The parameters 
              for this process are specified in the JumpStart profile.
            <p> 4. The finish script runs. This is usually where more of the customization 
              occurs because this is the first chance to be able to access the 
              files installed on the new system. Typically, most admins use the 
              finish script to edit <b>/etc</b> files, build home directories, 
              or install patches.
            <p> 5. The system reboots. Ideally, at this point, the new system 
              should be fully configured and ready to be put in service. You may 
              have to change some network settings, but other than that, the system 
              should be fully operational.
            <p> 
            <p> To elaborate on how JumpStart begin and finish scripts can assist 
              in building a new system, I'll discuss a fictional system environment. 
              This environment has three distinct classes of Solaris systems: 
              desktop systems for employees, public Internet servers, and large-scale 
              application/development servers.
            <p> Each system group has different installation requirements. Listed 
              below is the base installation cluster each system requires, and 
              a checklist of operations that need to be performed before the system 
              can be put in production. See Table 1.
            <p> The installation process for each of these system groups is pretty 
              complicated, but everything we want to do can be accomplished by 
              using a begin or finish script.
            <p> Unfortunately, we can only specify one begin script and one finish 
              script in the rules file. Writing one giant script to perform the 
              tasks listed above would have several disadvantages. It'd be 
              pretty awkward to maintain, difficult to debug, and each script 
              we'd write would have repeated code to perform identical tasks.
            <p> The solution to this is to break down these tasks into a group 
              of smaller scripts, each one performing an individual function. 
              One script disables the Sendmail daemon, one script makes sure every 
              entry in <b>inetd.conf</b> is commented out, and so on. A controlling 
              script manages the whole process by running the scripts you specify 
              at the begin or finish phase, and in the proper order.
            <p> The controlling script is known as the wrapper script, and the 
              smaller scripts that perform the installation customization are 
              known as the operation scripts.
            <p> <b>Filesystem Layout</b>
            <p> The scripts are organized in a layout similar to the startup/shutdown 
              scripts in the <b>/etc/rc?.d</b> directories, which are really links 
              to the real files in <b>/etc/init.d/</b>.
            <p> If your JumpStart directory is <b>/export/jumpstart/</b>, create 
              the following directory structure:
            <p> 
            <pre>
/export/jumpstart/scripts/
/export/jumpstart/scripts/master.d/
</pre>
            Then, create a subdirectory for each installation group:
            <p> 
            <pre>
/export/jumpstart/scripts/desktop.d/
/export/jumpstart/scripts/inetsvr.d/
/export/jumpstart/scripts/appsvr.d/
</pre>
            The <b>master.d</b> directory is our base directory for all of our 
            operation scripts. When scripts need to be placed in the installation 
            group directories, a link is created.
            <p> <b>The Wrapper Script</b>
            <p> The wrapper script is placed in <b>/export/jumpstart/scripts/</b> 
              (see Listing 1). Here is an explanation of what the script does:
            <p> 
            <p> 1. The script breaks down its calling name to find out if it is 
              called at the begin phase or the finish phase, and to see what directory 
              the operation scripts are in.
            <p> 2. It searches for scripts to run. If we are in the begin phase, 
              we will run every script that starts with a B. If we are in the 
              finish phase, we will run every script that starts with an F.
            <p> 3. The operation scripts are run. When the script is called, the 
              word "begin" or "finish" is passed as the first 
              argument, in case the operation script needs to know when it is 
              being called. Each script and the time it ran is clearly labeled 
              in the standard output, which JumpStart saves to a file in <b>/var/sadm/system/logs/</b>.
            <p> 
            <p> The wrapper script only needs to be written once. To create future 
              instances, just create two hard links or soft links to it. One link 
              is for the begin script, the other for the finish script.
            <p> So, a <b>ls</b> of our script directory might look like this:
            <p> 
            <pre>
$ ls -F scripts/
appsvr.beg@     desktop.beg@     inetsvr.beg@     master*
appsvr.d/       desktop.d/       inetsvr.d/       master.d/
appsvr.fin@     desktop.fin@     inetsvr.fin@
</pre>
            The JumpStart rules file would look similar to this.
            <p> 
            <pre>
(rule)   scripts/desktop.beg profiles/desktop scripts/desktop.fin
(rule)   scripts/inetsvr.beg profiles/inetsvr scripts/inetsvr.fin
(rule)   scripts/appsvr.beg profiles/appsvr scripts/appsvr.fin
</pre>
            The infrastructure is in place and we need to populate the directories 
            with the operation scripts that perform the individual tasks.
            <p> <b>The Operation Scripts</b>
            <p> All of the scripts we write will be kept in the <b>master.d</b> 
              directory. Then we create links in the corresponding group directory 
              that identify when the scripts are called and in what order.
            <p> Because the operation scripts are meant to be written only once, 
              they need to be flexible. Even though they only perform one operation, 
              they should be able to cope with different installation environments.
            <p> <b>Example 1 </b>--<b> Creating the /etc/shells File</b>
            <p> This script puts together an <b>/etc/shells</b> file that determines 
              what user accounts can have <b>ftp</b> access to a host (see Listing 
              2).
            <p> The script only builds an <b>/etc/shells</b> file if one doesn't 
              already exist, and it only lists a shell in the file if it is present 
              on the host filesystem.
            <p> The script's filename is <b>set-shells</b> and it's 
              placed in the <b>scripts/master.d</b> directory. When it needs to 
              be placed in one of the installation group directories, it is linked 
              to the directory with a name starting with F followed by an order 
              number:
            <p> 
            <pre>
$ cd scripts
$ ls -F master.d
set-shells*
$ ln -s master.d/set-shells desktop.d/F42set-shells
$ ls -F desktop.d
F42set-shells@
</pre>
            When the <b>desktop.fin</b> script runs, it will call the <b>F42set-shells 
            </b>script.
            <p> <b>Example 2 </b>--<b> Populating the passwd and Shadow Files</b>
            <p> One added benefit of using this system is that your operation 
              scripts are not limited to the borne shell. You could use <b>bash</b>, 
              <b>csh</b>, or <b>ksh</b>. The boot server installation of Solaris 
              8 also includes a Perl 5 distribution, so you could write your operation 
              scripts in Perl.
            <p> Listing 3 is a Perl script that populates the <b>/etc/passwd</b>, 
              <b>/etc/shadow</b>, <b>/etc/group</b>, and <b>/etc/auto_home</b> 
              files. The script reads in two datafiles -- one detailing the 
              user account information, the other detailing the group information. 
              It populates each file with the user or group entries and it makes 
              some changes to the data, if necessary. For example, it can limit 
              which accounts are added to the system by group id, or it can change 
              the user's default shell if it isn't installed on the 
              system.
            <p> <b>Example 3 - Preserving a Configuration File During an Upgrade</b>
            <p> When JumpStart performs an upgrade of a system, it removes the 
              existing packages on a host system, and replaces them with the packages 
              consistent with the same metacluster of the new operating system. 
              That is, when you upgrade an old Solaris 7 SUNWCreq installation 
              to Solaris 8, it removes the old packages and installs the equivalent 
              SUNWCreq cluster.
            <p> In most situations, configuration files are preserved, but that 
              may not be the case with some third-party applications. To ensure 
              peace of mind, create a single operation script that runs during 
              the begin phase and the finish phase to preserve the configuration 
              files and then restore them after the upgraded package has been 
              installed (see Listing 4).
            <p> When called from the begin script, it mounts the root filesystem, 
              finds the configuration files, and copies them to a different directory 
              on the disk that isn't referenced in the package's installation 
              data. When it's finished, it unmounts the disk.
            <p> When called from the finish script, it copies the new configuration 
              files to a different directory, and replaces the configuration files 
              that it saved during the begin phase.
            <p> <b>Conclusion</b>
            <p> When testing this software, I put a standalone server into production 
              in less than 45 minutes. That included patching the system, building 
              home directories, securing the daemons, and installing backup software. 
              There were 20 operation scripts that ran during the installation 
              for this particular environment, and when the system was done, all 
              I had to do was change the IP address, gateway, and hostname.
            <p> However, I still see environments where administrators go though 
              a manual post-installation process of removing software, adding 
              software, copying files, changing name services. They've repeated 
              the process for so long, it's practically second nature to 
              them. Unfortunately, it takes up more time, and there is a higher 
              chance of mistakes.
            <p> JumpStart can fully automate a system installation, but only if 
              we take advantage of its capabilities. These scripts can help you 
              get started on a framework for your own JumpStart environment. Then, 
              you can expand the system by writing more operation scripts. Don't 
              miss the opportunity to automate a task if it can simplify future 
              installations. 
            <p> <i>Chris Josephes is currently self-employed as a systems engineer 
              in Minneapolis, Minnesota. He can be reached at: <b>cpj1@visi.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
