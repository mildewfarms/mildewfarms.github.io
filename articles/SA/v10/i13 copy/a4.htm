<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i13: AIX Network Install Manager</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<! -- Begin Horizontal Border -->
<td bgcolor="#990000" width=1 colspan=4><img src="../../resource/clear.gif" border=0 vspace=0 hspace=0 width=1 height=1 alt="  "></td>
<! -- End Horizontal Border -->
</tr>
<tr>

<! -- Begin Navigation ------ >
<td valign=top width=154 bgcolor="#ffffff">
<center>
        <a href="../i13/v10i13.htm"><img src="../../resource/cover/1013.gif" width=150 height=200  alt="Cover V10, I13" border=1 vspace=2 hspace=0 align=center></a> 
      </center>
<center>
      </center>
      <div align="center"><b class="navbarLink">Article<br>
        </b><br>
      </div>
      <center>
        <a href="../../../code/2001/jun_sup2001.tar"><b class=codeListing>jun_sup2001.tar</b></a> 
      </center><br><img src="../../resource/clear.gif" width=154 height=1 border=0 alt=""><br>
</td>
<! -- End Navigation ------ >

<! -- Begin Vertical Border -->
<td bgcolor="#990000" width=1><img src="../../resource/clear.gif" border=0 vspace=0 hspace=0 width=1 height=1 alt="  "></td>
<! -- End Vertical Border -->

<! -- Begin Vertical Border -->
<td bgcolor=#ffffff width=5><img src="../../resource/clear.gif" border=0 vspace=0 hspace=0 width=5 height=5 alt="  "></td>
<! -- End Vertical Border -->

<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=0 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a4_pic.gif" width="200" height="174" align="right">AIX 
              Network Install Manager</h1>
            <p> <i>Bill Wood</i>
            <p> When we replaced our old hardware platform with IBM AIX RS/6000 
              systems, a main concern was controlling how our new systems would 
              be installed. With the old platform, we ran into several instances 
              where the software (moving from our development group to QA and 
              into production) was not the same, which caused numerous build breaks. 
              We chose the AIX Network Installation Management (NIM) setup, because 
              we needed to ensure consistent, standard OS installations between 
              systems within our four separate data centers. Our company also 
              has a security rule that doesn't allow any one machine access 
              to all networks within our organization. Our four separate data 
              centers have four separate networks with no connection between them, 
              and each network is segmented into either inside or outside the 
              firewall. 
            <p> <b>NIM Resources</b>
            <p> NIM allows you to customize installations and maintain clients 
              on the network from a centralized location (the NIM master) or the 
              NIM client itself. The master contains the NIM database and can 
              serve resources. Resources in NIM are files or directories containing 
              data that NIM will use to install, customize, and maintain NIM clients. 
              A NIM client is any machine configured and defined in the NIM database. 
              Some key NIM resources used in our setup are:
            <p> 
			<ul>
              <li> Licensed Program Product Source Directory (<b>lpp_source</b>): 
                This directory contains backup file format (BFF) images, which 
                AIX installp uses to load software. One way to understand the 
                role of the <b>lpp_source</b> directory in a BOS installation 
                is to compare it to all the installation images needed to support 
                any configuration (specifically different device configurations) 
                along with a base core set of software (called simages) that are 
                on the BASE installation CDs. We created a base 433 <b>lpp_source</b>, 
                multiple <b>lpp_sources</b> containing different maintenance levels, 
                and separate <b>lpp_sources</b> for our 32-bit and 64-bit third-party 
                application software. 
              <li> Shared Product Object Tree (SPOT): This directory is created 
                from an <b>lpp_source</b> and is equivalent in content to a<b> 
                /usr</b> file-system on AIX. The purpose of a SPOT in a NIM installation 
                is similar to the boot images and BOS installation scripts (<b>bi_main</b>, 
                <b>rc.boot</b>, and <b>rc.bosinst</b>) on volume 1 of the BASE 
                install CD. The SPOT must contain support for all boot environments 
                (platform, network type, kernel type). We created several different 
                SPOTs for the different data centers and maintenance levels we 
                use to support our systems. 
              <li> <b>bosinst_data</b>: This data file contains information that 
                drives the BOS install (e.g., prompt vs. no-prompt, which disk 
                to install the OS on, and the type of installation (Overwrite, 
                Preservation, or Migration) to name a few). First, we created 
                separate <b>bosinst_data</b> resources for each machine type (S80, 
                H70, B50, M80, P680, and 43P). Then, by specifying two disks to 
                target in our <b>bosinst_data</b> resource and specifying copies 
                in the <b>image_data</b> resource, we could set up mirroring during 
                the initial load. 
              <li> <b>image_data</b>: This data file contains information about 
                the characteristics of the OS being installed. For example, it 
                includes the size of file systems, whether or not to mirror, and 
                whether or not to disk stripe. We created separate <b>image_data</b> 
                resources for each machine type (S80, H70, B50, M80, P680 and 
                43P). 
              <li> Script: This is a customization file the systems administrator 
                can create, which executes near the end of the BOS installation. 
                You can execute multiple NIM script resources during a BOS installation. 
                If you need to control the order of execution, I recommend putting 
                it all in one large script. We created one NIM script to set up 
                the OS environment and hardware parameters, configure certain 
                system files, set up security, install third-party software, create 
                and set up dump devices, customize paging space to correspond 
                to the system RAM, and help create a complete inventory by machine 
                type and serial number. I've included a copy of this script 
                at the end of this article (Listing 1). All listings for this 
                article are available from the <i>Sys Admin</i> Web site: <b>http://www.sysadminmag.com</b>
              <li> <b>Installp_bundles</b>: This data file contains a customized 
                list of additional software to install after the base AIX software 
                is loaded. If you have different configurations that you need 
                to duplicate on a repeatable basis, this resource is very useful. 
                In our environment, we have different OS software requirements 
                for development, QA, and production above the minimal AIX software 
                needed to support different hardware systems. The easiest way 
                to facilitate and maintain these different requirements, which 
                need to be consistent, is to use <b>installp_bundles</b>. 
              <li> <b>mksysb</b>: This is a backup archive file that contains 
                a system image of <b>rootvg</b>. Because of our network security 
                restrictions (no one machine could be connected to all the networks 
                within our organization), we used <b>mksysb</b> and <b>savevg</b> 
                tapes to replicate the NIM master to the other data centers. If 
                we had one machine connected to the different data centers, we 
                could have used NIM to replicate and update the NIM masters in 
                the different data centers by BOS-installing a NIM <b>mksysb</b> 
                resource and using a NIM script to restore the other volume group 
                data. 
              <li> <b>mac_group</b>: This is a logical grouping of machine types 
                (standalone, diskless, or dataless) that enables the systems administrator 
                to target one or more machines with a single command or NIM operation. 
                We did not use this feature, but we could have taken advantage 
                of this by grouping all like systems and like configurations to 
                install to more than one machine at a time.
				</ul>
            <b>Working with NIM</b>
            <p> We used the 43P systems as our NIM masters for each data center 
              because they could complete remote installations of machines or 
              be moved and directly connected to a server for OS installations. 
              These NIM masters were also designated as the resource servers in 
              our environment. To ensure consistency and standardization of each 
              NIM master (for the different data centers), we created a standard 
              NIM master machine, which we cloned. We made a stacked tape containing 
              a <b>mksysb</b> image and a <b>savevg</b> image of the standard 
              NIM master to sync up and update the other NIM masters. Here are 
              the commands we ran on the standard NIM master to create this stacked 
              single tape:
            <p> 
            <p> 1. <b>mksysb -i /dev/rmt0</b> <br>
              2. <b>tctl -f/dev/rmt0.1 fsf4</b> <br>
              3. <b>savevg -i -m {volume_group_name} -f/dev/rmt0.1</b> <br>
              4. <b>mt -f/dev/rmt0 rewind</b>
            <p> 
            <p> To restore the tape to the other NIM masters, we did the following:
            <p> 
            <p> 1. Booted and restored the <b>mksysb</b> image from the stacked 
              tape <br>
              2.<b> tctl -f/dev/rmt0.1 fsf4</b> <br>
              3. <b>restvg volume_group_name</b><p>
            <p> These NIM servers were placed throughout our environment and are 
              used by multiple operators with different training levels. Thus, 
              we developed a strict directory tree for storage of resources on 
              the NIM server, but this was our own restriction, not a restriction 
              created by NIM. I recommend creating either one large separate filesystem 
              or a few file systems that will contain your NIM resource files. 
              Also, use naming conventions that make sense to you in terms of 
              the resource name and directory structure. The following is a breakdown 
              of our directory structure and a description of what is contained 
              in the directory:
            <p> 
              <li>Master directory of bundle lists: 
                <p> 
                <p> <b>/export/installp_bundles </b>
                <p> 
                <p> 
              <li>Master directory of all NIM resources:
                <p> 
                <p> <b>/export/nim </b>
                <p> 
                <p> 
              <li><b>lpp</b> sources for use by the NIM server during SPOT generation 
                and system installation:
                <p> 
                <p> <b>Installations/export/nim/aix433</b>
                <p> 
                <p> 
              <li>32-bit and 64-bit compiled third-party applications:
                <p> 
                <p> <b>/export/nim/aix433/32bit-lpp</b> and
                <p> <b>/export/nim/aix433/64bit-lpp</b>
                <p> 
                <p> 
              <li>Master <b>bosinst.data</b> files for each server type:
                <p> 
                <p> <b>/export/nim/bosinst</b>
                <p> 
                <p> 
              <li>Master <b>image.data </b>files for each server type: 
                <p> 
                <p> <b>/export/nim/imagedata </b>
                <p> 
                <p> 
              <li>In-house customization scripts:
                <p> 
                <p> <b>/export/nim/scripts </b>
                <p> 
                <p> 
              <li>Master OS system files:
                <p> 
                <p> <b>/export/nim/system </b>
                <p> 
                <p> 
              <li>Flat file inventories by serial number of each system installed 
                by the NIM server: 
                <p> 
                <p> <b>/export/nim/system/{system type}/{serial number} </b>
                <p> 
                <p> 
              <li>Master directories of additional special filesets: 
                <p> 
                <p> <b>/export/nim/packages </b>
                <p> 
                <p> 
              <li>Any <b>mksysb</b> file images of servers: 
                <p> 
                <p> <b>/export/nim/mksysb </b>
                <p> 
                <p> 
              <li>Master installable SPOT images: 
                <p> 
                <p> <b>/export/nim/spot </b>
                <p> 
                <p> 
              <li>NIM custom scripts: 
                <p> 
                <p> <b>/export/nim/custom </b>
                <p> 
                <p> 
              <li>Manual backups of the NIM configurations: 
                <p> 
                <p> <b>/export/nim/nim-backup</b>
                <p> 
                <p> We used SPOT copies (customized to contain only the minimal 
                  OS software) to complete the initial loads of our NIM client 
                  systems to support our six different hardware platforms. To 
                  build a SPOT, we first loaded all AIX 4.3.3.0 filesets into 
                  a directory called <b>raw-lpp_source</b>. This directory essentially 
                  contained all volumes of the BASE install CDs, bonus pack CDs, 
                  and base and extended documentation CDs for 4.3.3. We also had 
                  an equivalent <b>raw-lpp_source</b> for each maintenance level 
                  we needed to support. We made sure that every fix for that maintenance 
                  level was present. Once completed, we generated a listing of 
                  <b>lpp</b>'s into a bundle format (an <b>installp_bundle</b> 
                  resource that contained our customized minimal OS software) 
                  to create the AIX433-base <b>lpp_source</b>. We then created 
                  an MLXX <b>lpp_source </b>containing only the maintenance level 
                  we approved for our standard. This was customized similar to 
                  the AIX433-base <b>lpp_source</b> except it contained only the 
                  ML fixes. After our customized SPOTs were created, we were ready 
                  to install a system from this base <b>lpp_source </b>with any 
                  ML level.
                <p> During the installation process, we used the <b>bosinst.data</b> 
                  and <b>image.data</b> files to control the layout of the <b>rootvg</b> 
                  onto the hard disks of the server. Using NIM has been facilitated 
                  by establishing strict hardware configuration standards for 
                  each each IBM server type at our site. This provides the ability 
                  to move machines around without conducting a hardware upgrade. 
                  It also makes installation easy, because we always know what 
                  kind of hardware we are using.
                <p> <b>Customizing </b>
                <p> After the installation of the OS was complete, we had the 
                  NIM server automatically run a customization script to enforce 
                  more unique standards within our computing environment. This 
                  customization script (Listing 1) was written, in-house, to facilitate 
                  turning on and off selected functions. It uses these functions 
                  to control the flow of each operational section. Each command 
                  used was echoed to the NIM console log along with a description 
                  to aid in diagnostics in case something went wrong during the 
                  NIM installation. By defining this script as a NIM resource, 
                  NIM is able to perform the administrative tasks discussed below. 
                  Note that this script is designed to meet the objective of a 
                  system being 95% pre-configured for our operating environment 
                  after NIM has completed its operations. The other 5% is what 
                  our operations staff performs on the server to turn it into 
                  a Web server, ftp server, gateway, or even a database server. 
                  Also note that this script is good for teaching new AIX systems 
                  administrators about essential system commands in AIX. Each 
                  command executed is echoed to the screen with a description 
                  of what it's doing, it's command syntax, and it's 
                  output.
                <p> <b>Set Up OS Environment Parameters </b>
                <p> During this phase of the script, we adjust AIX to meet our 
                  standards for items such as: 
                <p> 
                <ul>
                  <li> Timezone 
                  <li> Remote boot facility 
                  <li> Network Options 
                  <li> Starting certain demons on restart
                </ul>
                <p><b>Setup Hardware Parameters </b>
                <p> AIX will set the 10/100 NIC cards to "autonegotiate". 
                  We found this caused a network bottleneck in our infrastructure. 
                  We utilize these commands to force the adapter to 100/full duplex 
                  on startup of the server.
                <p> <b>Configure System Files </b>
                <p> We have created a master directory of certain system files 
                  that are copied onto each system when a NIM installation takes 
                  place. Utilizing this repository allows control of what the 
                  initial system files will conform to. This is also the first 
                  time in the script that you see special programming for a particular 
                  platform. Note at the end of this function that we do not want 
                  the "<b>httplite docsearch</b>" utility running on 
                  anything other than a 43P workstation.
                <p> <b>Setup Security </b>
                <p> Here we utilize the NIM server to create another script that 
                  will only run once on bootup and then remove itself, the <b>/etc/firstboot</b>. 
                  By placing commands in the <b>/etc/firstboot</b> script, the 
                  NIM-installed client will execute these commands and then remove 
                  the script after it gets an OS installed. This allows us to 
                  lock a system down to our security standards immediately. We 
                  do this after NIM is finished with the server, because you will 
                  lose connectivity to the NIM server and your install will hang 
                  if you run these commands before NIM has completed.
                <p> <b>Install Third-Party Applications </b>
                <p> Here we have created our own "BFF"-formatted install 
                  packages for 32-bit and 64-bit compiled software. We keep these 
                  in separate directories and use this script to determine whether 
                  we are installing a 32-bit or 64-bit machine, and then to install 
                  the correct versions.
                <p> <b>Create and Set Dump Devices </b>
                <p> Depending on the configuration of an AIX server, the initial 
                  dump space defined may not be big enough. The two main parts 
                  of this function are to calculate whether the dump space is 
                  big enough and to determine whether a mirror drive exists. If 
                  the function determines the dump space is too small, it will 
                  increase it automatically and set up a secondary dump file on 
                  the mirror drive if available.
                <p> <b>Adjust Paging Space to Complement RAM </b>
                <p> Because AIX has changed its swap algorithms, it is no longer 
                  necessary to have swap space equal to size of RAM. (This really 
                  helps on a 64-Gig RAM system.) We use this function to calculate 
                  the size of RAM and then adjust the swap space to the values 
                  noted in the script.
                <p> <b>Create a Hardware Inventory </b>--<b> By Machine Type 
                  or by Serial Number </b>
                <p> This function calls another script that will create an exhaustive 
                  inventory of a NIM installed server (Listing 2). We use this 
                  to verify a server install or for disaster recovery of a down 
                  server. We could literally rebuild a like server from this listing.
                <p> <b>Create a Complete Inventory </b>--<b> By Machine Type 
                  or by Serial Number </b>
                <p> The purpose of this function is to call a smaller system inventory 
                  script (Listing 3) that will only give the amount of information 
                  about each NIM-installed server for our inventory-tracking database.
                <p> <b>Conclusion</b>
                <p> In summary, we needed to ensure consistent standard OS installations 
                  between four separate data centers. By using AIX 43P systems 
                  and NIM system software, we succeeded in our efforts. NIM allowed 
                  for remote installation and management of our networked systems. 
                  Specifically, the NIM script resource handled tedious and time-consuming 
                  tasks that cause systems administrators to dread post-install 
                  configuration. From setting up hardware parameters to creating 
                  inventory lists, NIM allowed complete customization while leaving 
                  us free to handle other vexing tasks...like resetting passwords.
                <p> <i>Bill Wood is a co-author of three UNIX books and now works 
                  as a systems team lead in a UNIX shop. His primary function 
                  is the mentoring and coaching of the other UNIX administrators 
                  and engineers. He enjoys working with large IBM AIX SP Frames 
                  within supercomputing data centers with large server farms. 
                  The largest IBM AIX SP Frame he has worked on to date was 612 
                  nodes with 912 Terabytes of disk storage, and he's looking 
                  forward to working with his first Petabyte. This also explains 
                  why he is so adamant about standards </i>--<i> without them 
                  in large data centers, you will quickly lose control, which 
                  is why he has chosen NIM to ensure these standards.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>
<! -- Begin Horizontal Border -->
<td bgcolor="#990000" width=1 colspan=4><img src="../../resource/clear.gif" border=0 vspace=0 hspace=0 width=1 height=1 alt="  "></td>
<! -- End Horizontal Border -->

</table><!/center>
<! -- End MASTER TABLE -- >

<! -- Begin Copyright Notice ------ >
<br>
<table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff"><tr><td><div class=copyright align=center>&copy; 2007 CMP Media LLC.  All Rights Reserved.</div></td><tr><td><div class=copyright align=center><a href="http://www.samag.com" target="_new">www.samag.com</a></div></td></table><! -- End Copyright Notice ------ >

<br>&nbsp;<br>

</BODY>



<! -- Begin Content ------ >
</html>
