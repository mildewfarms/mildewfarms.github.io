<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i02: What To Do When the Server Doesn't Serve</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/feb2001.tar"><b class=codeListing>feb2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a2.gif" width="200" height="177" align="right">What 
              To Do When the Server Doesn't Serve </h1>
            <p> <i>Brett Lymn</i> 
            <p> Not that long ago when a server stopped serving files, most people 
              would ask when the machine would be back on the air, smile ruefully, 
              and wait patiently for their files to reappear on their network 
              drives. The excuse "sorry, I cannot tell you that because the 
              computer is down" was accepted, and people would call back 
              later for the information. Those were the days. Servers are now 
              expected to reliably serve up files 24 hours a day, 7 days a week. 
              Downtime no longer is an inconvenience -- it costs money. If 
              your Web server is down because of a file server failure, then people 
              will rarely wait patiently for the Web server to come back on line. 
              They will take their business, and their money, elsewhere. Because 
              of this, there has been a lot of focus placed on building systems 
              that do not rely on a single point of failure, so that even if one 
              component fails, the system as a whole will continue functioning. 
            <p> Hardware designers have been working at this for some time, and 
              it shows in the latest machines that have dual this, hot-swap that, 
              to provide the ability to ride out a hardware failure and repair 
              the machine without requiring it to be shut down. Of course, the 
              operating systems that sit on top of this hardware have been modified 
              to exploit the new hardware features to provide resiliency in the 
              face of failures. The problem now is that modern machines rarely 
              live in isolation. They are typically networked to other machines 
              with the result that all your hardware and software redundancy grinds 
              to a halt when the file server goes down. To prevent this situation, 
              we need to have a system that will detect when the file server has 
              gone down and take some action to ensure the continuity of service 
              in the face of a file server failure. 
            <p> <b>Managing Failover with cachefs</b> 
            <p><b> </b>There are quite a few solutions to the problem of file 
              serving failure. My three-part series of articles will contain a 
              sampling of what is available. My articles will have a heavy Sun 
              Solaris slant because that is what I work predominately with. The 
              first article in the series describes providing failover using a 
              little known feature of Sun's <b>cachefs</b> implementation 
              that allows <b>cachefs</b> clients to operate disconnected from 
              the file server. 
            <p> Both Solaris 2 and <b>amd</b> running on Solaris 2 have a file 
              system called <b>cachefs</b>. This filesystem uses the client's 
              local disk to cache copies of files that originate from a remote 
              server. The idea behind this file system is to improve performance 
              by providing files at local disk access speeds for frequently used 
              files, but still have the files served from a central location. 
              Although <b>amd</b> supports the <b>cachefs</b> on Solaris 2, it 
              does not provide all the features that Sun's implementation 
              does and, hence, is not as useful in providing a fail-over service. 
              In this article, I will concentrate on the features of the Sun <b>cachefs</b> 
              implementation. 
            <p> One of the interesting things with the <b>cachefs</b> is that 
              once a file has been accessed on the client, the file resides on 
              the client's local disk. So, if the <b>cachefs</b> can be convinced 
              to serve up a (possibly out of date) file from cache, even if the 
              origin server is currently down, then the system could mount files 
              from a central server, but still ride out server outages if the 
              files required by the client are in the client's local cache. 
              With some judicious use of flags, this is exactly what we can do 
              with the <b>cachefs</b>. In <b>cachefs</b> parlance, the file system 
              mounted from the server is called the back file system, and the 
              local <b>cachefs</b> file system is called the front file system. 
              To create a <b>cachefs</b> mount, you first need to initialize the 
              front file system storage on the client using the <b>cachefs</b> 
              administration tool, <b>cfsadmin</b>, like this: 
            <p> 
            <pre>cfsadmin -c /var/cache
</pre>
            <b> </b>This creates and populates the file system cache in the directory 
            <b>/var/cache</b>. The location of the <b>cachefs</b> cache directory 
            is arbitrary; I will use the location <b>/var/cache</b> in the examples 
            in this article. The contents of this directory must only be manipulated 
            by the <b>cachefs</b> or <b>cfsadmin</b>. Any attempts to edit or 
            rename files in the cache directory will probably corrupt the cache 
            file system. After we have created the front file system, we can mount 
            the back file system onto the <b>cachefs</b>: 
            <p> 
            <pre>mount -F cachefs -o backfstype=nfs,cachedir=/var/cache server1:/file/tree /file/tree
</pre>
            <b> </b>The options here tell the <b>cachefs</b> that the back file 
            system is from a NFS server and that the cache directory is located 
            in <b>/var/cache</b>. The client will now be caching files from <b>server1</b> 
            onto local disk in <b>/var/cache</b>. The whole process is transparent 
            to the file system user; all the user sees is a normal directory and 
            is not aware that the files are not coming straight from the server. 
            The example as given will not handle a server outage. If the server 
            goes down, then the <b>cachefs</b> mount in the above example will 
            hang when attempting to validate the file on the server. 
            <p> Fortunately, the <b>cachefs</b> has some options that help the 
              situation. One of these options is the "local-access" 
              <b>cachefs</b> mount option. This option tells the <b>cachefs</b> 
              to use the file attributes of the cached copy of the file, rather 
              than validate those file attributes on the back file system server. 
              This is meant to save a round trip to the server when checking the 
              file attributes, but it also serves to decouple the <b>cachefs</b> 
              a bit more from the back file system server; we no longer have to 
              rely on the server's being up to get file attributes for files 
              that are in cache. 
            <p> Another pair of handy options are the <b>demandconst</b> and <b>noconst</b>, 
              which affect the way the <b>cachefs</b> validates the contents of 
              the cache against the back file system server. Normally, the <b>cachefs</b> 
              periodically automatically validates the contents of the cache against 
              the back file system server. By using the <b>demandconst</b> mount 
              flag, you can indicate to the <b>cachefs</b> that validation will 
              be done manually using the <b>cfsadmin -s</b> command. The <b>noconst</b> 
              mount option tells the <b>cachefs</b> that the cache will never 
              be validated against the back file system server. 
            <p> Either of these mount options are good if the files on the back 
              file system are modified infrequently. With the <b>demandconst</b> 
              mount option, the clients can be instructed to revalidate their 
              caches after the changes have been made. With the <b>noconst</b> 
              mount option, the client <b>cachefs</b> must have the file in the 
              cache cleared so that the updates will flow through. Note with both 
              the automatic validation and the <b>demandconst</b> mount option, 
              if the back file system server is down when the cache object is 
              validated, then the <b>cachefs</b> will remove the object from the 
              cache. Clearly, this is undesirable if the primary reason for running 
              the <b>cachefs</b> is to provide some resiliency in the server mount. 
              An approach to this problem is to use the <b>demandconst</b> mount 
              option on the client and to either <b>NFS ping</b> the server prior 
              to requesting an update to ensure the validation will work, or to 
              make the server send a signal out to inform the clients to revalidate 
              their cached files. Fortunately, this is not neccessary. 
            <p> Sun has built a mount option into the <b>cachefs</b> called disconnectable. 
              This option is only available when the back file system type is 
              NFS. The disconnectable option is very poorly documented -- 
              it does not appear in the man pages for <b>mount_cachefs</b>, nor 
              is there a man page for the daemon called <b>cachefsd</b> that supports 
              the disconnectable mode. I found out about this mode by chance when 
              I was searching the Sun support pages looking for patches that I 
              may need to apply to my system. I found an <b>infodoc</b> number 
              21701 that provided information on how to set up the <b>cachefs</b> 
              in disconnectable mode. The procedure is quite simple. You create 
              the directory: 
            <p> 
            <pre>/etc/fs/cachefs
</pre>
            <b> </b>and add the mount option "disconnectable" to the 
            <b>cachefs</b> mount command. The mount command now looks like: 
            <p> 
            <pre>mount -F cachefs -o backfstype=nfs,cachedir=/var/cache,disconnectable \<br>  server1:/file/tree /file/tree
</pre>
            <b> </b>Or if you want the file system to be mounted automatically 
            when the machine boots, then add a line like the one below to the 
            <b>/etc/vfstab</b> file: 
            <p> 
            <pre>server1:/file/tree /var/cache /file/tree cachefs - yes \<br>  backfstype=nfs,cachedir=/var/cache,disconnectable,local-access
</pre>
            <b> </b>Those who are familiar with the syntax of the <b>vfstab</b> 
            entry will note that where there is normally a raw device name, we 
            have the directory <b>/var/cache</b>. This field is used during boot 
            to <b>fsck</b> the file system, so for a <b>cachefs</b> file system 
            must provide the cache directory for <b>fsck_cachefs</b> to operate 
            on.To properly implement the disconnectable mode, you will need to 
            make an entry in the <b>/etc/vfstab</b> and either run the <b>cachefs</b> 
            scripts from <b>/etc/init.d</b> or simply reboot the system because 
            there is a supporting daemon, <b>cachefsd</b>, that needs to be run. 
            <p> <b>Understanding Disconnectable Mode</b> 
            <p><b> </b>The disconnectable mode changes the behavior of the <b>cachefs</b> 
              in some subtle ways. First, the back file system is mounted in what 
              Sun terms a "semi-soft" mode, which allows the back file 
              system access to fail without hanging (much like a soft NFS mount). 
              However, if the accessed file exists in the cache, then the requestor 
              will receive the cached copy of the file instead of seeing an error 
              that would be seen if the mount was a usual NFS soft mount. In disconnectable 
              mode, the <b>cachefs</b> will block writes to the file system as 
              a normal hard NFS mount. Second, the operating system starts a <b>cachefsd</b> 
              daemon on the first access to the <b>cachefs</b> filesystem. This 
              daemon monitors the link to the back file system server and will 
              manage the process of keeping the client cache in sync with the 
              files on the back file system server. 
            <p> By using the disconnectable mount option, the behavior of the 
              file attributes fetching changes as well. If the back file system 
              server is down, then the <b>cachefs</b> will wait for the RPCs to 
              the server to time out, but rather than returning an error, the 
              <b>cachefs</b> detects the failure and offers the file attributes 
              from the cached object instead. You can speed things up in disconnectable 
              mode by still using the local-access mount flag to prevent the <b>cachefs</b> 
              from checking the file attributes on the server. This provides a 
              noticeable improvement if the server is down. Another advantage 
              of the <b>cachefs</b> in disconnectable mode is that it supports 
              writes to the file system, even when the back file system server 
              is down, but only if you mount the <b>cachefs</b> with the non-shared 
              mount option. This option indicates that only one client will modify 
              the files on the server. In this manner, Sun has neatly avoided 
              the problem of multiple clients modifying a file when they are disconnected 
              from the server by limiting who can modify the files. If you do 
              not have the non-shared mount flag, then attempts to write to the 
              file system when the back file system server is down will result 
              in the write blocking until the server comes back up. 
            <p> <b>What to Watch For</b> 
            <p><b> </b>As with any solution, the <b>cachefs</b> solution has problems. 
              If the files you are interested in are not in the local cache when 
              the server is down, then you will get a read failure on those files. 
              To make matters worse, there is no way to tell the <b>cachefs</b> 
              system which files are desired to be in the client cache except 
              by performing a read of each file that is deemed critical. You also 
              must provision sufficient client-side storage to accommodate all 
              the files that you want available during a possible server outage. 
              Normally, you do not need to match byte for byte server storage 
              capacity on the client. It is expected that the client will only 
              use a small subset of the server files, and some objects in the 
              <b>cachefs</b> can be purged to make room for newer objects. If 
              you use the <b>cachefs</b> as a failover store, then you must ensure 
              there is enough client-side storage for the <b>cachefs</b> cache 
              to hold all the files that you need during a server outage. Also, 
              the limitation of the number of clients that can update the file 
              system (although it does avoid the problems of conflicting updates) 
              may be problematic in some circumstances. Also watch the default 
              size limit for caching files in the <b>cachefs</b>. This limit is 
              set at 3 MB, but can be increased by using the <b>cfsadmin</b> command 
              like this: 
            <p> 
            <pre>cfsadmin -o maxfilesize=5 /var/cache
</pre>
            <b> </b>The effect of this command is to increase the maximum size 
            limit of the files cached by the <b>cachefs</b> to 5 MB. This limit 
            may need to be tweaked to cope with the largest file that is required 
            to be cached so that it is available during a server outage. In addition 
            to the file size limit, there are a lot of options available in <b>cfsadmin</b> 
            that control the resource utilization of the <b>cachefs</b>. Details 
            about these options are outside the scope of this article, but if 
            you are planning to cache a large number of files, check the man page 
            of <b>cfsadmin</b> to ensure that all the files you require to be 
            cached will get cached without exceeding the default resource limits. 
            Finally, when the <b>cachefs</b> is in disconnectable mode, the <b>cachefs</b> 
            behaves like the <b>demandconst</b> mount flag is being used. That 
            is, changes to the back file system are not propagated unless you 
            run: 
            <p> 
            <pre>cfsadmin -s all
</pre>
            <b> </b>This behavior is odd, but it can be worked around by putting 
            a cron job onto the client system to periodically run the <b>cfsadmin</b> 
            command. If the server is down, the <b>cfsadmin</b> will quit without 
            doing anything. Note the difference disconnectable mode makes here 
            -- if you just use <b>demandconst</b> and run the <b>cfsadmin 
            -s</b> command when the server is down, the contents of the <b>cachefs</b> 
            will be flushed, but in disconnectable mode the files stay intact. 
            <p> <b>Conclusion</b> 
            <p><b> </b>That about does it for <b>cachefs</b>, which gives you 
              the option to use some local machine resources to provide a way 
              to ride out server outages. This approach is best suited to situations 
              where you have a small number of files necessary for the local machine 
              operation. Larger file trees will spend more time doing the validation 
              of the <b>cachefs</b> contents and will also increase the network 
              traffic while performing the validation, which may make the <b>cachefs</b> 
              approach undesirable. 
            <p> Furthermore, if you are planning to use the <b>cachefs</b>, check 
              that you have the appropriate patches for your version of Solaris. 
              Even though <b>cachefs</b> has been available since Solaris 2.3, 
              the disconnectable mode was a later addition, which may require 
              a patch to your system. In my next article, I will cover a more 
              traditional way of implementing failover by using replicated servers. 
            <p> <i>Brett Lymn works for a global company helping to manage a bunch 
              of UNIX machines. He spends entirely too much time fiddling with 
              computers but cannot help himself.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
