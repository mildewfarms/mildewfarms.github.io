<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i02: Keeping Your Web Content in Sync</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/feb2001.tar"><b class=codeListing>feb2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a4.gif" width="200" height="177" align="right">Keeping 
              Your Web Content in Sync </h1>
            <p> <i>Adam Olson</i> 
            <p> This article is all about keeping the content in your Web server 
              farm synchronized with rsync. rsync is a very handy program that 
              provides a simple way to mirror content across a number of machines. 
              I'll show how to design a straightforward content push system 
              to keep front-end Web server content synchronized. There are plenty 
              of ways to utilize a program like rsync; this is just one of them. 
            <p> <b>Obtaining and Building rsync</b> 
            <p> The current version of rsync is 2.4.6 and was written by Andrew 
              Tridgell and Paul Mackerras. Download the compressed source <b>tar</b> 
              ball at: <b>http://rsync.samba.org</b>. I ran the following commands 
              on a system running Solaris 2.7, and the compilation went smoothly: 
            <p> 
            <pre>
# gzip -dc rsync-2.4.6.tar.gz | tar xvf -
# cd rsync-2.4.6
# ./configure
# make
# make install
</pre>
            This will install the rsync binary in <b>/usr/local/bin</b> as well 
            as the man pages. You will need to go through this process on all 
            the involved hosts.
            <p> <b>More on Our Goal</b>
            <p> One example of a cookie cutter Web tier is a design where a number 
              of front-end Web servers all serve up identical content and the 
              rest is handled via calls to a back-end database of some kind. Traffic 
              is load balanced across the Web servers using a method such as DNS 
              round robin or, if possible, a hardware solution. Because the Web 
              servers all have the same content tree, using rsync to maintain 
              these structures from a central distribution point provides a clean 
              and easy way to maintain the content.
            <p> <b>More on rsync</b>
            <p> Why does rsync work so well in this configuration? Here are some 
              of the key factors:
            <p> 
            <p> 1. You can use <b>ssh</b> as the underlying transport mechanism. 
              This means you get added security without a lot of extra work. <b>ssh</b> 
              handles all of the authentication which is a lot better than leaving 
              it up to clear text protocol like <b>rlogin</b>.
            <p> 2. Entire filesystems or individual directories can be updated, 
              therefore making it easy to mirror your document root and subdirectories 
              to a number of destination hosts.
            <p> 3. It preserves symbolic and hard links, ownership, permissions, 
              etc. For example, if rsync is preserving file ownership, the UIDs 
              of the transferred files will remain the same instead of being owned 
              by the account initiating the transfer.
            <p> 
            <p> rsync also includes an algorithm for determining which portions 
              of a file need to be synchronized, thus it can be more efficient 
              over slow transmission lines. Personally, I don't usually benefit 
              from this feature because high bandwidth paths are increasingly 
              more common. As the following example shows, I am more concerned 
              with the act of synchronizing our hosts than with the hopes of doing 
              it in the most efficient manner. If you are interested in learning 
              more about the rsync algorithm, a detailed description is provided 
              in the distribution.
            <p> <b>Let's Do Some Syncing</b>
            <p> I'll now walk through how to build a basic configuration 
              that can be expanded to support a multitude of hosts. The following 
              is an example of using <b>ssh</b> to transfer the files. You need 
              <b>ssh</b> (<b>http://www.ssh.com</b>) installed on both hosts, 
              or you can use <b>rsh</b>.
            <p> The central distribution point will be located on a host named 
              <b>dev</b>, and our front-end Web server will be on a host named 
              <b>www1</b>. The distribution root on <b>dev</b> will be located 
              at <b>/usr/local/webroot</b>, and the document root on <b>www1</b> 
              will be located at <b>/usr/local/webroot</b> as well.
            <p> The basic command to synchronize <b>www1</b> to <b>dev</b> looks 
              like this:
            <p> 
            <pre>
dev# rsync -vrlHpog --delete --rsh=/usr/local/bin/ssh/usr/local/webroot/ www1:/usr/local/webroot/
</pre>
            Here is a break down of this command that shows what each part does:
            <p> 
            <p> 
            <ul>
              <li> <b>-v</b> -- Run in verbose mode. Displays the files being 
                transferred, as well as statistics on how much data was written, 
                read, and how long it took. 
              <li> <b>-r</b> -- Recurse into directories. 
              <li> <b>-l</b> -- Preserve soft links. 
              <li> <b>-H</b> -- Preserve hard links. 
              <li> <b>-p</b> -- Preserve permissions. 
              <li> <b>-o</b> -- Preserve owner. 
              <li> <b>-g</b> -- Preserve group. 
              <li> <b>--delete</b> -- This option deletes any files on the 
                destination host that do not exist on the distribution host. This 
                is useful because when certain portions of the content have been 
                deleted in new revisions, unless this option is specified, the 
                files will linger around on the front-end Web servers. This could 
                conceivably have bad affects on your application. 
              <li> <b>--rsh=/usr/local/bin/ssh</b> -- The path to <b>ssh</b>. 
              <li> <b>/usr/local/webroot/</b> -- The local content source 
                directory. 
              <li> <b>www1:/usr/local/webroot/</b> -- The remote host and 
                its local content document root.
            </ul>
            <p> Another argument you may use often is <b>--exclude</b>. For example, 
              adding <b>--exclude="*.log"</b> or <b>--exclude="*.old"</b> would 
              exclude any file ending in <b>.log</b> or <b>.old</b> from being 
              pushed to the front-end Web servers. Log files or backups made while 
              on the development server are of little use when synchronized into 
              production. For a list of all the arguments to rsync, run rsync 
              without any arguments or check out the man page.
            <p> <b>Sprucing It Up</b>
            <p> Typing the command discussed above works well when you are dealing 
              with only a few front-end Web servers. Even then, it is always easier 
              to write a script to do it for you! I am always happier when I have 
              eliminated repetitious tasks.
            <p> Here is a basic script that gets the job done. A useful addition, 
              if you use RSA authentication in your <b>ssh</b> setup, is to add 
              support for <b>ssh</b>-agent so a passphrase only needs to be entered 
              once:
            <p> 
            <pre>
#!/usr/local/bin/perl

#
# a basic script utilizing rsync that will synchronize
# content to a number of front end servers.
#
# adamo@humboldt1.com 10/31/00
#

#### DEFINE ####

# array of servers, add your hosts here.
@servers = (www1, www2, www3, www4, www5, www6, www7, www8);

# distribution directory
$distdir = "/usr/local/webroot/";

# destination directory
$destdir = "/usr/local/webroot/";

#### END ####

foreach $server (@servers) {
  
  print "Initiating content synchronization on $server.\n";
  system "/usr/local/bin/rsync -vrlHpog --delete \
    --rsh=/usr/local/bin/ssh $distdir $server:$destdir";
  
    if ($? == 0) {
      print "Content synchronization successful on $server.\n";
    } else {
      print " Content synchronization failed on $server.\n";
    }
}</pre>
            <b>Conclusion </b>
<p> This article covered a relatively painless way to keep the content 
              on your front-end Web servers synchronized. It can be expanded upon 
              to synchronize content across a wide area of differing services, 
              as well. rsync's seamless integration with <b>ssh</b> and ability 
              to mirror entire directory trees while keeping permissions and ownership 
              intact, make it a good solution to the problem of content management. 
            <p> <i>Adam Olson has helped build a successful ISP (</i><b><i>http://www.humboldt1.com</i></b><i>), 
              designed and configured portions of the California Power Network 
              while working at MCI WorldCom, and is currently working for a startup 
              in the Silicon Valley (</i><b><i>http://www.quaartz.com</i></b><i>). 
              Adam hopes to be sailing a lot soon. He can be contacted at: </i><b><i>adamo@humboldt1.com</i></b><i>.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
