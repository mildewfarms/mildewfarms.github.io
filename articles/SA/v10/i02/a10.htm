<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i02: What is That, Anyway?</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/feb2001.tar"><b class=codeListing>feb2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/perl.gif" width="150" height="150" align="right">What 
              is That, Anyway? </h1>
            <p> <i>Randal L. Schwartz</i> 
            <p> So, you've got a directory full of mixed stuff, or maybe 
              an entire tree of directories. Just what's behind each of those 
              names? Are they directories, symbolic links, or just plain files? 
              And if they're files, are they text files or binary files? 
              And if they're binary files, are they images, executables, 
              or just random garbage? 
            <p> Perl has many built-in operators to make getting lists of names 
              easy, and also for figuring out what you really have once you know 
              a name. 
            <p> For example, let's find all the subdirectories within the 
              current directory: 
            <p> 
            <pre>
for my $name (glob '*') {
  next unless -d $name;
  print "one directory is $name\n";
}
</pre>
            <p> Here, the <b>glob</b> operator expands to all the non-dot-prefixed 
              names within the current directory, and the <b>-d</b> operator returns 
              true for all those names that are directories.
            <p> What if we wanted to do this recursively? We need to step outside 
              of the core Perl, but not very far away. A core-included module 
              called <b>File::Find</b> takes care of nearly all of our recursive 
              directory processing problems. Let's find all directories below 
              the current directory:
            <p> 
            <pre>
use File::Find;
find sub {
  return unless -d $_;
  print "one directory is $File::Find::name\n";
}, ".";
</pre>
            <p>The <b>find</b> subroutine takes a subroutine reference (called 
              a <i>coderef</i>), here provided with the anonymous subroutine constructor. 
              Each name found below <b>.</b> (specified on the last line of this 
              snippet) will trigger an invocation of this subroutine, with <b>$File::Find::name</b> 
              set to the full name, and <b>$_</b> set to the basename (with the 
              working directory already selected to the directory in which the 
              name is located).
            <p> If you run this, you'll see that each directory is typically 
              shown two or more times! Once as a name within its parent directory, 
              once as the name of <b>.</b> when we're in the directory, and 
              perhaps one or more times for each of the subdirectories contained 
              within the directory. So, how do we eliminate that? Well, just rejecting 
              "dot" and "dot-dot" in the subroutine will do 
              nicely:
            <p> 
            <pre>
use File::Find;
find sub {
  return if $_ eq "." or $_ eq "..";
  return unless -d $_;
  print "one directory is $File::Find::name\n";
}, ".";
</pre>
            <p> There. We'll keep moving forward from this as our base, because 
              rejecting the meta-links of dot and dot-dot is generally a useful 
              thing.
            <p> What about all the symbolic links? Can we find those? Sure! That's 
              the <b>-l</b> operator:
            <p> 
            <pre>
use File::Find;
find sub {
  return if $_ eq "." or $_ eq "..";
  return unless -l $_;
  print "one symlink is $File::Find::name\n";
}, ".";
</pre>
            <p> Cool! But where do they point? That's the <b>readlink</b> 
              operator, as in:
            <p> 
            <pre>
use File::Find;
find sub {
  return if $_ eq "." or $_ eq "..";
  return unless -l $_;
  my $dest = readlink($_);
  print "one symlink is $File::Find::name, pointing to $dest\n";
}, ".";
</pre>
            <p> We can skip the <b>-l</b> test by knowing that any non-symlink 
              will automatically return <b>undef</b> on the <b>readlink</b>, as 
              in:
            <p> 
            <pre>
use File::Find;
my @search = @ARGV;
@search = qw(.) unless @search;
find sub {
  return if $_ eq "." or $_ eq "..";
  return unless defined (my $dest = readlink($_));
  print "one symlink is $File::Find::name, pointing to $dest\n";
}, @search;
</pre>
            <p> I've also made it simpler to run this on different directories 
              by passing them on the command line.
            <p> So, what do we have left? We can notice and skip over directories 
              and symbolic links. How about files? Files are where the real action 
              is located. And some of them are text-like, and some of them are 
              binary-like. Although even those lines are blurry: you could argue 
              that XML is really just a text-like binary format, and a Microsoft 
              Word document is clearly text inside a binary-like format.
            <p> But back to what Perl can help with, first. Let's add the 
              <b>-T</b> operator to distinguish those text files:
            <p> 
            <pre>
use File::Find;
my @search = @ARGV;
@search = qw(.) unless @search;
find sub {
  return if -d $_ or -l $_;
  return unless -T $_;
  print "One text file is $File::Find::name\n";
}, @search;
</pre>
            <p> And that's pretty cool. Just a list of text files. But this 
              actually doesn't tell us too much. What we might really want 
              is a list of all the Perl scripts. What can tell us that? Well, 
              the UNIX command called <i>file</i> can peer inside the contents 
              of a file to figure out what it is. Let's invoke that on each 
              file:
            <p> 
            <pre>
use File::Find;
my @search = @ARGV;
@search = qw(.) unless @search;
find sub {
  return if -d $_ or -l $_;
  my $file_said = 'file $_';
  if ($file_said =~ /perl/) {
    print "$File::Find::name: $file_said";
  }
}, @search;
</pre>
            <p> Hey, look at that. Now we're pulling out just the names that 
              <i>file</i> insists are possibly Perl programs. But this program 
              will slow to a crawl on a large tree. We're reinvoking the 
              <i>file</i> command individually on every file in the tree.
            <p> There's a couple of ways to go from here to speed it up. 
              I could save all the filenames to invoke <i>file</i> once at the 
              end of the program:
            <p> 
            <pre>
use File::Find;
my @search = @ARGV;
@search = qw(.) unless @search;
my @list;
find sub {
  return if -d $_ or -l $_;
  push @list, $File::Find::name;
}, @search;
for ('file @list') {
  if (/perl/) {
    print;
  }
}
</pre>
            <p> And yes, that sped it up considerably, but now we don't get 
              the results until the end of the tree walk, and we'll run into 
              problems if the number of arguments exceeds a comfortable limit 
              for <i>file</i>.
            <p> But there's another way. Out in the CPAN (at places such 
              as <b>search.cpan.org</b>), we can find the <b>File::MMagic</b> 
              module. This apparently is a Perl module derived from the <i>file</i> 
              command created for the PPT project, which was originally based 
              on code written for Apache to implement the <b>mod_mime</b> module, 
              to emulate the standard <i>file</i> command. Wow. And now I'm 
              going to write a recursive controllable <i>file</i>-like program 
              on top of that. Will the reuse ever stop? (I hope not!)
            <p> So, what we need from this module is the method called <b>checktype_filename</b>, 
              which returns back a MIME type (like <b>text/plain</b> or <b>image/jpeg</b>), 
              and perhaps a semicolon and some additional information. So, let's 
              find all the Perl scripts quickly. First, after a little playing 
              around, I see that the string I'm looking for has "executable" 
              followed by a space, then something ending in "perl" followed 
              by a space and then "script". That's a simple regular 
              expression, so I'll add that at the right place:
            <p> 
            <pre>
use File::Find;
use File::MMagic;
my $mm = File::MMagic-&gt;new;
my @search = @ARGV;
@search = qw(.) unless @search;
my @list;
find sub {
  return if -d $_ or -l $_;
  my $type = $mm-&gt;checktype_filename($_);
  next unless $type =~ /executable \S+\/perl script/;
  print "$File::Find::name: $type\n";
}, @search;
</pre>
            <p> Now I know what programs to look at when I upgrade, to see which 
              modules they all use. (Hmm. Sounds like an idea for another column. 
              I'll note that.)
            <p> And one last fun one. Let's find all the images in the tree, 
              and then call <b>Image::Size</b> (also found in the CPAN) on them 
              to see their respective sizes. Just a few more tweaks:
            <p> 
            <pre>
use File::Find;
use File::MMagic;
use Image::Size;
my $mm = File::MMagic-&gt;new;
my @search = @ARGV;
@search = qw(.) unless @search;
my @list;
find sub {
  return if -d $_ or -l $_;
  my $type = $mm-&gt;checktype_filename($_);
  next unless $type =~ /^image\//;
  print "$File::Find::name: $type: ";
  my ($x, $y, $imgtype) = imgsize($_);
  if (defined $x) {
    print "$imgtype: $x x $y\n";
  } else {
    print "error: $imgtype\n";
  }
}, @search;
</pre>
            <p> And as it turns out, I could have left the <b>File::MMagic</b> 
              out of this program, since <b>Image::Size</b> can cheerfully inform 
              me when it wasn't called on an image, but you know the old 
              Perl motto: There's More Than One Way To Do It!
            <p> So, next time someone asks you "what do you have?", 
              I hope you can now answer them with a nice short Perl program. Until 
              next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for WebTechniques 
              and Unix Review magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
