<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i02: A Centralized and Flexible Antivirus Solution</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2001/feb2001.tar"><b class=codeListing>feb2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a3.gif" width="200" height="177" align="right">A Centralized 
              and Flexible Antivirus Solution </h1>
            <p> <i>Dani Pardo</i> 
            <p> Viruses can represent a huge problem, specially now that information 
              flows so fast. If your network has a reasonable number of clients, 
              you probably don't want to spend much time regularly installing 
              and upgrading antivirus software. Using client-side antiviruses 
              also has the disadvantage of slowing down performance, and your 
              users might even find them difficult to run. 
            <p> <b>Client/Server Antivirus</b> 
            <p> The solution I present here uses Linux <b>smb</b> support to scan 
              viruses in your network client's hard disk. The idea is to 
              share the client's hard disk or directory, and let the server 
              scan it via the network. This solution saves you from installing, 
              operating, and maintaining separate antivirus installations on each 
              client. However, this approach also has some limitations. Performing 
              virus scans from the server consumes a lot of network bandwith. 
              Also, I do not recommend this approach if you are concerned about 
              privacy and internal security. This solution also has the drawback 
              that it won't be able to scan the MBR (the boot sector) of 
              the hard disk and the partition table. 
            <p> It uses McAffe's AVP (Antiviral Toolkit Pro), with the kernel's 
              ability to mount NetBIOS shares. The user only requires a Web browser 
              to tell the server which shared resource needs to be scanned, and 
              AVP's output report will be emailed to him (or to the sys admin). 
              So, you just need the server to run something like: 
            <p> 
            <pre> # smbmount //novita/C /mnt/smb/novita/C
</pre>
            <b> # uvscan -c -r /mnt/smb/novita/C |mail </b><u>user@domain</u> 
            In this example, we suppose machine "novita" wants to scan 
            share "C" (usually the hard disk). If we want to write this 
            CGI, the first question to ask is: How do we know the client's 
            Netbios name, and how do we get his shared resources? Here is an easy 
            way using Perl's CGI and socket modules: 
            <p> 
            <pre> #!/usr/bin/perl
 
 use CGI;
 use Socket;
 use Sys::Hostname;
 
 $query=new CGI;
 my $hostname = gethostbyaddr(inet_aton($query-&gt;remote_host()),AF_INET);
 $hostname=~s/.domain.com//; # Cut the domain
 $hostname=uc($hostname); # Uppercase the name
</pre>
            <p> Thus, you get the TCP/IP hostname, via a DNS server. (You'll 
              need a DNS server in your network.) In my network, TCP/IP names 
              and Netbios names are the same. If that's not true in your 
              case, you might need to add some extra code to get the Netbios name 
              having the TCP/IP name -- probably by using a database or text 
              file. To get a client's availiable resources and store them 
              in an array using Samba's <b>smbclient</b>: 
            <p> 
            <pre> my @shares;
 
 open (FILE,"/usr/local/samba/bin/smbclient -L $hostname -U \
  nobody%nopass |grep Disk| cut -f 1 -d \" \" |");
 while (&lt;FILE&gt;)
 {
 $_=~s/^\s+//; # Delete spaces
 $_=~s/Disk//;
 if (! ($_=~/PRINTER\$/)) # We dont want the PRINTER$ share.
 {push @shares, $_;}
 }
 close FILE;
</pre>
            Notice that we login to the client machine with a username/password 
            nobody%nopass. This is because if omitted, <b>smbclient</b> will interactively 
            prompt us for a password and use our login name as the netbios username. 
            We always send user=nobody, and password=nopass in our script. This 
            will work for Win95/98 clients, but not for NT. NT will require us 
            to be a user of the system. Now if you're using NT clients, you'll 
            have to adapt this section to get the available resources (e.g., adding 
            a user "nobody" with password "nopass" in all 
            NT clients in our network). Note that if somebody also has a shared 
            printer, you'll find a shared directory named <b>PRINTER$</b>, 
            which you don't want to take care of. With the shared resources 
            in an array, you can present them to the users via a pop-up menu in 
            a browser for users to select the desired directory to scan: 
            <p> 
            <pre> print $query-&gt;start_form;
 if ($#shares==-1) # Empty array, nothing shared from the client
 {
 print "&lt;B&gt;You don't have any shared resource to scan!B&gt;&lt;P&gt;";
 # A link to an HTML help page
 print '&lt;a href="http://calix:85/help.html"&gt;&lt;img SRC="/help.gif" \
  BORDER=0 height=40 width=200&gt;&lt;/a&gt;'; }
 else
 {
 
 print "Select desired resource: " . \
  $query-&gt;popup_menu('Shares',\@shares) . "&lt;/P&gt;";
 print "Send report (e-mail) to: " . $query-&gt;textfield(-name=&gt;'email',
 -size=&gt;30) . "&lt;/P&gt;";
 print $query-&gt;checkbox(-name=&gt;'ScanNow',-label=&gt;'Check now');
 print '&lt;a href="http://calix:85/help.html"&gt;&lt;img SRC="/help.gif" \<br>
  BORDER=0 height=40 width=200&gt;&lt;/a&gt;'; print "&lt;P&gt;" . \<br>
  $query-&gt;submit(-name=&gt;'Iniciar');
 }
 
 print $query-&gt;end_form;
 print $query-&gt;end_html;
</pre>
            I've also included the textfield "email", in which 
            the user can enter his email address, and a check button that, when 
            active, the system will start scanning immediately. If not activated, 
            the system will scan at 23:00 p.m. 
            <p> 
            <pre> #!/usr/bin/perl
 use CGI
 
 $query=new CGI;
 if ($query-&gt;param())
 {
 # Use parameters and do the scanning, or program an at job that
 # does the scanning
 }
 else
 {
 # Check hostname, resources, and ask for input
 }
 Mount and Scan
</pre>
            When users press the submit button, this script will begin the second 
            part, receiving <b>$query-&gt;param('Shares')</b>, <b>$query-&gt;param('e-mail')</b>, 
            and <b>$query-&gt;param('ScanNow')</b> as parameters. 
            <p> First, it creates the appropiate directory in which to mount the 
              share. To support multiple simultaneous clients, I used the convention 
              of <b>/mnt/smb/$hostname/$share</b>. Also, check the given email 
              to be a valid (allowed) address: 
            <p> 
            <pre> if (!($email=~/[a-z-A-Z-0-1]+\@domain.com/)) # only numeric or 
  # alfanumeric address 
  # from our domain
 {
 print "&lt;B&gt;Error:&lt;/B&gt; Invalid e-mail address: $email";
 exit(-1);
 }
 
</pre>
            Since there are two cases (scan inmediately or scanning at night), 
            we'll program only one <b>at</b> job to be run "now" 
            or at 23:00, for example): 
            <p> 
            <pre> if ($query-&gt;param('ScanNow') eq 'on')
 {
 $time='now';
 print "&lt;B&gt;You'll soon receive the antivirus report by e-mail.&lt;/B&gt;";
 }
 else
 {
 $time='23:00';
 print "&lt;B&gt;Ready&lt;P&gt;Remember to leave the computer on \
  tonight...&lt;/B&gt;";
 }
 system ("at $time -f /tmp/atjob.$hostname.$share");
 
</pre>
            I've checked parameters, created the appropiate directory, written 
            the commands file, and called <b>at</b> to execute this file at a 
            programmed time: 
            <pre> mkdir "/mnt/smb/$hostname",500;
 mkdir "/mnt/smb/$hostname/$share",500;
 
 open FD, "&gt;/tmp/atjob.$hostname.$share" || die "Can't create tmp file";
 
 
 print FD "/usr/bin/smbmount //$hostname/$share \
  /mnt/smb/$hostname/$share -N &gt; /dev/null \n";
 print FD "/usr/local/bin/uvscan -c -r \
  /mnt/smb/$hostname/$share |mail -s \"Antivirus repot\" $email \n";
 print FD "/usr/bin/smbumount /mnt/smb/$hostname/$share\n";
 
 # We delete in two steps, instead to do a rm -r (just in case)
 print FD "rmdir /mnt/smb/$hostname/$share\n";
 print FD "rmdir /mnt/smb/$hostname\n";
 
 close FD;
 chmod 500,"/tmp/atjob.$hostname.$share";
 To Do
</pre>
            Listing 1 provides the entire script. The script can be optimized, 
            but it gets the job done. If you're concerned with security or 
            privacy, you will probably find this solution too high-risk. (It's 
            not the best CGI to run in your main server where all your users have 
            a shell login.) Security can be enhanced by adding support for password-protected 
            shares. This can be achieved by adding a text field where the user 
            could enter the password of the share, so you'll receive <b>$password=$query-&gt;param("password")</b> 
            as a parameter. That way you'll be able to invoke <b>smbmount</b> 
            with: 
            <p> 
            <pre> /usr/bin/smbmount //$hostname/$share /mnt/smb/$hostname/$share \
  -U nobody%$password -N &gt;/dev/null
</pre>
            In my case, omitting passwords made things simpler. 
            <p> Another issue with this solution is the need for a Linux kernel. 
              At first, I wanted it to run Samba's <b>smbsh</b> (Samba shell) 
              in order to run the CGI in other UNIXes. <b>smbsh</b> also has the 
              advantage that you can scan all your network at one time (using 
              something like <b>uvscan -r /SMB</b>). The biggest advantage is, 
              of course, that now you only need to upgrade the server's antivirus 
              information (the DAT files) and forget about the clients. Enjoy 
              it. 
            <p> <i>Dani Pardo is a 27-year-old programmer and system manager in 
              Enplater s.a., a packaging factory in Estartit (Spain). When not 
              working, he spends his weekends going out with his friends until 
              noon. He can be reached at: </i><b><i>dani@enpl.es</i></b><i>.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
