<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i11: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/nov2001.tar"><b class=codeListing>nov2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b><img src="../../resource/questions.gif" width="200" height="100" align="right">Questions 
              and Answers</b></h1>
            <p> <i>Amy Rich</i>
            <p> Back in the August issue of <i>Sys Admin</i>, someone asked a 
              question about how to read a file backwards, and I provided a handy 
              one-liner in Perl. Thanks to Tillman Hodgson for pointing out that 
              there is also a GNU program called tac (cat spelled backwards) that 
              does the same thing. Also thanks to Tom Payerle for pointing out 
              the program rev, which prints lines from right to left.
            <p> <b><font size="+2">Q</font></b> I have our Sendmail server configured 
              with <b>RBL</b> and <b>DUL</b>, but these lists are not complete 
              enough to catch all the spam that we receive. We get nothing but 
              spam, for instance, from several top-level country domains, and 
              I'm trying to block those with the <b>access_db</b> feature. 
              I'm having some difficulty blocking a TLD and all of its subdomains, 
              however. I can successfully block the addresses in the <b>access.db</b> 
              when I have an exact match. For example, the following entry works:
            <p> 
            <pre>
host.sub.domain            REJECT
</pre>
            I obviously don't want to go through and match every host, so 
            I was trying to write a match for the entire TLD:
            <p> 
            <pre>
.domain                    REJECT
</pre>
            When I test my access rules with <b>sendmail -bt -v</b> it doesn't 
            seem to work:
            <p> 
            <pre>
&gt; /map access .domain
map_lookup: access (.domain) returns REJECT (0)
</pre>
            which is fine, but:
            <p> 
            <pre>
&gt; /map access sub.domain
map_lookup: access (sub.domain) no match (0)
</pre>
            which fails. How do I correctly block an entire TLD?
            <p> <b><font size="+2">A </font></b> Your access.db entry is syntactically 
              incorrect and should look like the following:
            <p> 
            <pre>
domain                     REJECT
</pre>
            You don't want the leading '.' on the domain when you're 
            trying to block the whole domain. When lookups are done against the 
            access database, they're done in tokens, separated by dots. When 
            the lookup for host.sub.domain is done, it then iterates through, 
            taking off a token and a dot each time:
            <p> 
            <pre>
host.sub.domain
sub.domain
domain
</pre>
            Your other issue is that you're trying to validate your matches 
            in testing mode with <b>/map</b>. This won't work because of 
            the above-mentioned recursive token removal. This happens as part 
            of the <b>check_*</b> rulesets, not the map lookup. The <b>check_*</b> 
            rulesets will do multiple map lookups until the TLD is reached.
            <p> <b><font size="+2">Q</font></b> I just installed Solaris 8 on 
              my E450 and flashed the OBP. Now whenever I try to boot the machine, 
              it insists on booting off the network instead of the disk. This, 
              of course, fails because I don't have a network boot server. 
              I've set the boot device to <b>disk</b> and tried again, but 
              it still tries to boot from the network. Why won't my machine 
              boot from the disk that Solaris is installed on?
            <p> <b><font size="+2">A </font></b> Suns usually boot from the network 
              for diagnostic purposes. Your machine may not see the disk, may 
              not have the boot <b>device</b> set correctly, or may just be tagged 
              to do a diagnostic boot. First, make sure that the machine can actually 
              see the disk device. At the OK prompt, type the following (assuming 
              you have SCSI disks):
            <p> 
            <pre>
probe-scsi-all
</pre>
            If you don't see your disk, verify that the disk is connected 
            properly and is actually spinning up. If you still can't see 
            your disk, you may have damaged your disk or controller (or some other 
            piece of hardware) that you'll need to replace.
            <p> If you can see your disk with the probe, verify that the boot 
              device and any aliases are set correctly. You can see the values 
              of each variable by using <b>printenv</b> from the <b>ok</b> prompt. 
              Verify that <b>boot-device</b> is set to boot from <b>disk</b> first. 
              An example boot device line looks like the following:
            <p> 
            <pre>
boot-device=disk net
</pre>
            Verify that <b>disk</b> is actually correctly aliased to your boot 
            disk. The address of your boot device will look different depending 
            on what sort of hardware you have in your machine. You can use the 
            command <b>devalias</b> from the <b>ok</b> prompt to view your aliases. 
            On a PCI bus, the <b>disk</b> alias may look something like the following:
            <p> 
            <pre>
/pci@1f,0/pci@1/scsi@1/sd@0,0:a
</pre>
            You may also want to try booting directly from the disk path if you 
            suspect problems with the NVRAM aliases. If you need to reset the 
            alias, you can use the <b>nvalias</b> command, and be sure to set 
            <b>use-nvramrc?</b> to <b>true</b>.
            <p> Most machines will have <b>diag-device=net</b>, so verify that 
              the <b>diag-switch</b> is set to <b>false</b>:
            <p> 
            <pre>
diag-switch?=false
</pre>
            If you still can't get your machine to boot from the disk, you 
            may have hardware issues. If you have a Sun contract, call them and 
            have them help. If you don't have a contract, Sun also offers 
            per-incident pricing.
            <p> <b><font size="+2">Q</font></b> I've just been handed the 
              systems administration tasks at work, and I'm not really all 
              that UNIX-savvy yet. Right now I'm trying to change <b>ftpd</b> 
              so that all the incoming files have the permissions <b>-rwxrwxrwx</b> 
              instead of <b>-rw-rw-rw</b>. I've tried changing both root 
              and <b>ftp</b>'s umask to 0, but this doesn't seem to 
              help. How can I change the default incoming <b>ftp</b> permissions?
            <p> <b><font size="+2">A </font></b> To help you understand why your 
              umask command didn't work, let's start with a bit of information 
              about file modes, file creation modes, and umask. UNIX file permissions 
              have two sorts of representations (letters, as you listed) and octal 
              numbers. To understand the umask, it's important that you understand 
              octal permissions.
            <p> With standard UNIX permissions (no extended ACLs), there are three 
              catagories of permissions: user, group, and other. In both the octal 
              and alphabetic representations, the categories are read from left 
              to right. For each category, you can set three basic permission 
              types: read, write, and execute. (We'll skip SUID, SGID, and 
              other special permissions for now.) Using the alphabetic output, 
              read is represented by the letter r, write by w, and execute by 
              x. Using the octal output, read is represented by the number 4, 
              write by the number 2, and execute by the number 1. To translate 
              your desired permissions from alphabetic to octal, you add up the 
              numbers for each category (user, group, and other):
            <p> 
            <pre>
-rwxrwxrwx  is equivalent to 0777  (4+2+1 4+2+1 4+2+1)
-rw-rw-rw-  is equivalent to 0666  (4+2 4+2 4+2)
-rw-r--r--  is equivalent to 0644  (4+2 4 4)
</pre>
            The default file creation mode for files in UNIX is 0666. For directories, 
            the default creation mode is 0777. The umask is another octal number 
            that is subtracted from the default creation permission. If you have 
            a umask of 2 (you can also pad it out with leading zeros so the umask 
            becomes 0002), you get the following:
            <p> 
            <pre>
directories     0777           drwxrwxrwx
- umask         0002         - --------w-
____________________           __________            
creation mode   0775           drwxrwxr-x

files           0666           -rw-rw-rw- 
- umask         0002         - --------w-
____________________           __________            
creation mode   0664           -rw-rw-r--
</pre>
            If you have a umask of 22 (or 0022), then you get file creation modes 
            of 0644 (<b>-rw-r--r--</b>), and directory creation modes of 0755 
            (<b>drwx-r--r--</b>). The "d" in the first position of the 
            alphabetic listings above denotes that the entry in is a directory.
            <p> Your problem with ftp is that all ftp file uploads start off with 
              the creation permission for 0666. Umask cannot add permissions, 
              only take them away. You'll never be able to upload files with 
              the execute bit set by using ftp. There are a couple ways to get 
              around this. You can use something like <b>scp</b> (part of <b>ssh</b>) 
              to upload files instead of ftp. <b>Scp</b> will subtract the destination 
              user's umask from the existing permissions on the remote machine. 
              So, if you <b>scp</b> a file with the permissions of 0775 from a 
              remote machine and your umask is 22, you will then have a resulting 
              file on the local machine of 0755.
            <p> As an aside, root's umask should be something fairly restrictive, 
              such as 22, so that random people on the system cannot write to 
              files owned by root.
            <p> Taking a different approach, you can also run a cron job to change 
              the permissions of the uploaded files on a regular basis if they 
              are in a known location. Beware when adding the execute bit to uploaded 
              files, though -- malicious users can upload trojans and when 
              you change the permissions on them, people may unwittingly execute 
              those trojan binaries.<b><i><u> </u></i></b>
            <p> <i>Amy Rich, president of the Boston-based Oceanwave Consulting, 
              Inc. (<b>http://www.oceanwave.com</b>), has been a UNIX systems 
              administrator for more than five years. She received a BSCS at Worcester 
              Polytechnic Institute, and can be reached at: <b>arr@oceanwave.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>

<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
