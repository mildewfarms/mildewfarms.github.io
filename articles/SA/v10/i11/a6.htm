<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i11: Centralize Your Crontabs</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/nov2001.tar"><b class=codeListing>nov2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a6.gif" width="200" height="174" align="right">Centralize 
              Your Crontabs</h1>
            <p> <i>Richard Hellier</i>
            <p> This article presents a way of centralizing the administration 
              of cron by using NIS (Network Information Service) and may be helpful 
              for systems administrators working with a large number of systems 
              and users and services that need local crontab entries.
            <p> <b>The Problem</b>
            <p> In large-scale installations, the usual approach is to make all 
              the UNIX workstations be clones, meaning each machine is logically 
              the same as any other. Such cloning is usually achieved by technologies 
              such as Sun's JumpStart or HP's Instant Ignition. Installing 
              machines this way makes them field replaceable so that if a disk 
              or processor fails, a spare can replace the machine with no loss 
              of data.
            <p> In my environment, we install machines using JumpStart and then 
              apply a rule specifying no client-side tailoring. In other words, 
              once a machine is installed, we try as hard as possible to avoid 
              applying any customizations to it. Allowing such customizations 
              means an additional burden in recording, backups, incorporation 
              into DR plans, etc. However, one of the main rule breakers is the 
              cron program since the crontab files (the "diaries") must 
              reside on the machine where cron runs.
            <p> Restricting the use of cron (at least to non-privileged users) 
              to a small number of machines, perhaps just one or two, can alleviate 
              this problem. The administration of these cron servers gives more 
              "bang for the buck" than dealing with each workstation 
              individually. Sadly, centralizing cron in this way is, at best, 
              a halfway house and doesn't handle cases where the presence 

              of special devices or other constraints make a local crontab entry 
              essential.
            <p> <b>The Solution</b>
            <p> The solution adopted here is to add a new NIS map, <b>crontab.byname</b>, 
              to the normal set (hosts, passwd, etc). The source file for the 
              NIS map (i.e., the file <b>/etc/crontab.conf</b> on the NIS master), 
              looks like:
            <p> 
            <pre>
lonws28         root:30 7 * * * /foo/bar/somecmd
loncs50         sys:5,35 * * * * /foo/bar/othercmd
lonws59 root:0 0 * * * /usr/bin/touch /tmp/foo// \
        uucp:2 2 * * * /usr/bin/touch /tmp/baz%%5 5 \
        * * * /usr/bin/touch
/tmp/quux
</pre>
            Each (logical) line of the file contains all the crontab entries to 
            be run on the machine named on the left-hand side. The right-hand 
            side (RHS) of each line is a list of crontab entries for different 
            users within that machine. As usual, "long" lines can be 
            broken by escaping the newlines with a backslash character. Entries 
            for different users are separated with the sequence <b>%%.</b> Although 
            you could argue about the syntax, the one provided here works fine. 
            The file <b>/var/yp/Makefile</b> is augmented in the usual way to 
            build the <b>crontab.byname</b> map along with all the others.
            <p> What happens on the client side? At installation time, a shell 
              script is installed along with an entry in root's crontab that 
              runs the script every few minutes. When the script runs (Listing 
              1), it removes any existing crontab entries that came via NIS, which 
              are easy to find since they are bracketed by the following lines:
            <p> 
            <pre>
#NISCRON-START
#NISCRON-END
</pre>
            Next, the script uses the <b>ypmatch</b> command with the hostname 
            as the key to look up its entry in the <b>crontab.byname</b> map. 
            If a match is found, the crontabs for all users appearing in the entry 
            are updated. The same is then done using <b>*</b> as the key, which 
            gives a simple way to have cron entries run on all machines.
            <p> Thereafter, placing, altering, or removing a crontab entry is 
              simply a matter of editing <b>/etc/crontab.conf</b> on the NIS master, 
              and rebuilding the NIS map. At the end of the next update interval, 
              all the necessary updates occur. This mechanism is especially convenient 
              for transferring a crontab entry from one machine to another or 
              for setting up identical entries on many machines. Note that "down" 
              machines behave correctly when they next restart.
            <p> <b>Summary</b>
            <p> A scheme for centralizing the administration of cron has been 
              presented here. By using this scheme, client workstations remain 
              "field-replaceable" while still allowing the effect of 
              client-side tailoring because a machine replaced by a spare with 
              the same name will automatically "inherit" the correct 
              crontab entries. If the new machine is not able to have the same 
              name, the entries will be "inherited" when the NIS map 
              is updated. Although the article describes the use of NIS, other 
              tools such as NISplus could use the same method.
            <p> <b>Further Work</b>
            <p> To achieve the same effect with even less overhead, it would be 
              good if cron were to become "NIS-aware". That is, if the 
              file <b>/etc/nsswitch.conf</b> included cron as one of the services 
              that can be "vectored", then "local" crontabs 
              could run directly from the NIS map -- well, maybe some day!
            <p> <i>Richard Hellier has been around UNIX systems since 1976, first 
              as a user, then a software developer, and most recently as an administrator. 
              He is part of a team that manages the UNIX machines in the European 
              offices of LSI Logic. He can be contacted at: <b>rlh@lsil.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
