<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i09: A Framework for Automated File Transfer</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/sep2001.tar"><b class=codeListing>sep2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1>A Framework for Automated File Transfer</h1>
            <p> George Callaway
            <p> Lost systems administrators regularly have to transfer files from 
              machine. Writing scripts to perform this activity is part of the 
              nature of a good admin. As a consultant, I have had to make my scripts 
              portable because every client has a different environment with new 
              twists. One way to deal with this is to keep as much reusable functionality 
              as possible in <b>ksh</b> function libraries.
            <p> This article explores some functions that I have written to help 
              automate file transfers. I do not promise that my scripts are bug 
              free, or that they are the best approach in every circumstance. 
              My objective here is to provide some examples of methods that have 
              worked for me, and that might help.
            <p> Really, all that these file transfer functions do is to use <b>ftp</b> 
              or <b>rcp</b> to move files. I have wrapped them with <b>ksh</b> 
              code to make them a little more reliable, or a little more flexible, 
              for unattended operation. I also provide other useful functions 
              that appear in most of my production scripts. The complete syntax 
              for each function is provided as comments in the function library 
              <b>admin_lib</b>. (All listings for this article are available from: 
              <b>www.sysadminmag.com</b>.)
            <p> A <b>ksh</b> function library is really just a <b>ksh</b> script 
              that contains <b>ksh</b> functions. They could be contained in the 
              script itself, but keeping them in a separate file allows them to 
              be used by multiple scripts as well as allowing you to fix your 
              bugs in one place instead of many. A <b>ksh</b> function is a bit 
              of code that can be called to perform a specific task. For example, 
              one function that I wrote simply checks the exit value from the 
              last command, and exits if it is non-zero.
            <p> 
            <pre>
function OnErrorExit
{
typeset ErrorCode="$?"
if [[ "$ErrorCode" -ne 0 ]]
   then
   DebugMsg 1 Exiting with code of $ErrorCode
   exit $ErrorCode
fi
}
</pre>
            The way that you would use this in your script would be to use this 
            function just like you would any other <b>ksh</b> command:
            <p> 
            <pre>
/usr/sbin/ping myhost
OnErrorExit
</pre>
            If the <b>ping</b> returns non-zero, the program will exit with <b>ping</b>'s 
            exit value. This approach can help keep your code be more modular 
            and easier to read.
            <p> Once you have created your function library (or <b>ksh</b> script 
              containing functions), you simply need to "source" it 
              by typing "dot" followed by the <b>ksh</b> script name. 
              You can either provide a full pathname to the script, or it can 
              be in your PATH. Here is how it is done in the example provided:
            <p> 
            <pre>
. admin_lib
</pre>
            This article will introduce you to some functions that I have written, 
            along with an example script that uses the provided function library.
            <p> 
            <p> <b>ReliableTransfer</b> -- The first function of interest 
              is <b>ReliableTransfer</b>. This function was originally written 
              as part of a method for backing up a database to a remote machine. 
              I was using <b>rcp</b>, but found that I would do some silly things 
              like overwrite files and fill up filesystems. <b>ReliableTransfer</b> 
              accepts the basic syntax of <b>rcp</b>, and does some additional 
              checks. For example:
            <p> 
            <pre>
ReliableTransfer MyFileName yourmachine:/home/YourFileName
</pre>
            transfers the file <b>MyFileName</b> to a remote machine called <b>yourmachine</b>, 
            to a file <b>/home/YourFileName</b> using <b>rcp</b>. What I added 
            was a list of things that I found myself doing in various scripts, 
            with the option of printing a lot of debug information.
            <p> 
            <p> First, it determines whether the copy is local or remote. If the 
              copy is a local copy, the <b>cp</b> command is used instead of <b>rcp</b>. 
              For a remote copy, various network checks are performed to make 
              sure that the host is available and ready for an <b>rcp</b>. It 
              then checks the size of the file to be transferred against the available 
              space on the remote filesystem, and will exit with an error if there 
              is not enough space. It then ensures that it will not overwrite 
              a file on the target, and commences copying the file to a temporary 
              name. Once complete, it does a checksum against the original file 
              and, if correct, renames the remote file to its correct name, thus 
              alerting you if the script has failed, and why.
            <p> <b>The ftp Functions</b>
            <p> The next set of functions deals with <b>ftp</b>. They are not 
              as thorough as <b>ReliableTransfer</b>, but they could be extended 
              to use the same approach. The <b>ftp</b> command is preferred over 
              <b>rcp</b> when security is a concern (no <b>.rhosts</b> files or 
              service), or when you are transferring to a system where <b>rcp</b> 
              is not supported.
            <p> What these functions do is to move the existing <b>.netrc</b> 
              file (if there is one) to a backup name, then write a replacement 
              that has commands specific to what the function is designed to accomplish. 
              For this reason, these commands should be used with care. Another 
              important note here is that <b>ftp</b> behaves differently when 
              run in the foreground. Although these scripts work in the foreground, 
              they were designed to work in the background, such as being run 
              from cron. The worst case is that when you run them from the shell, 
              an <b>ftp</b> failure may leave you at an <b>ftp</b> prompt. Just 
              type "quit" and the script will continue.
            <p> 
            <p> 
            <ul>
              <li> <b> CheckRemoteLogin</b> -- This function tries an <b>ftp</b> 
                login, and exits with an error value if the login does not work. 
                I used this to check for a machine that was only occasionally 
                there. This helped convince everyone that the other machine was 
                the problem, and not my code! 
              <li> <b> GetRemoteList</b> -- This function returns a list of 
                files with the extension passed to it. I use it in the script 
                to assign the returned list into a <b>ksh</b> variable. This list 
                can be used to control the remaining <b>ftp</b> sessions. 
              <li> <b> GetRemoteFiles</b> -- This function gets the files 
                in the file list, and returns them to the local location given. 
                It then renames the remote files with a <b>.done</b> extension 
                to prevent them from being transferred again. 
              <li> <b> PutRemoteFiles</b> -- This function transfers a list 
                of files from a local directory to a remote directory via <b>ftp</b>.
            </ul>
            <p> <b>Other Useful Functions</b>
            <p> The remaining functions are for supporting general script creation:
            <p> 
            <p> 
            <ul>
              <li> <b> DebugMsg</b> -- This function prints a message to the 
                console. Messages print based on the setting of an environment 
                variable called "DebugLevel". Level 0 is supposed to 
                be almost silent, 1 is errors only, 5 is general info, and 10 
                is full debug. In the example script, this function defaults to 
                5 if it is not already set in the environment. 
              <li> <b> CreateApplicationLock</b>, <b>RemoveApplicationLock</b> 
                -- These functions are used to ensure that only a single copy 
                of a script is being run. 
              <li> <b> OnErrorExit</b> -- This function simply checks for 
                the exit value of the previous command (<b>$?</b>) and exits the 
                program with that value. The value of this function is that it 
                reads much better than putting an entire "if" statement 
                block after every command that you want to check. 
              <li> <b> GetFileSize</b> -- This function returns the size in 
                bytes of a file either locally or on a remote machine. 
              <li> <b> GetFileSum</b> -- This function returns the checksum 
                of a file either locally or on a remote machine. 
              <li> <b> RemoteSpace</b> -- This function returns the space 
                left on a remote filesystem. 
              <li> <b> LogEvent</b> -- This function writes a log entry to 
                a specified log file either locally or on a remote machine. 
              <li> <b> Help</b> -- This function prints out descriptions of 
                functions in the library. This was written to promote self-documentation 
                of the library by using comments.
            </ul>
            <b>Putting It All Together </b>--<b> The Example Script</b>
            <p> The scripts provided with this article are <b>admin_lib</b> and 
              <b>frame</b>. <b>Admin_lib</b> is the collection of <b>ksh</b> functions. 
              <b>frame</b> is an example script that uses many of the functions 
              described here.
            <p> Let's walk through <b>frame</b> and outline how <b>admin_lib</b> 
              functions are used. Of course, somewhere near the top of the script, 
              you will need to source the function library. In <b>ksh</b>, this 
              is done by sourcing <b> admin_lib</b>. I usually set up a function 
              in my script that will run when the script exits for any reason. 
              I then reference that function in a "trap". This function 
              is where I put notification email, logs, cleanup, etc. That way, 
              no matter how the script exits, it cleans up after itself.
            <p> 
            <pre>
function ExitGracefully  # Exit the program gracefully
{
...
}
trap ExitGracefully EXIT
</pre>
            I like to make sure that there is not another instance of this program 
            running. To do this, I attempt to place a "lock" by creating 
            a special directory in <b>/tmp</b>. The function I use to do this 
            is <b>CreateApplicationLock</b>. If it fails, then the program is 
            already running and should not start up again. I clean up this lock 
            by running <b>RemoveApplicationLock</b> when I am done.
            <p> The next section of code checks the <b>ftp</b> connection. This 
              is done using:
            <p> 
            <pre>
CheckRemoteLogin $RemoteMachineName $RemoteUserName \
  $RemoteUserPassword 2&gt; /tmp/check$$
</pre>
            The function <b>CheckRemoteLogin</b> attempts a login based on the 
            passed parameters. The file <b>/tmp/check$$</b> is used to verify 
            that a "good" login was achieved. It there is any output 
            to this file, it is assumed that the login failed.
            <p> Next, a list of files from the remote machine is created:
            <p> 
            <pre>
FileList='GetRemoteList $RemoteMachineName $RemoteUserName \
  $RemoteUserPassword $LocalLocation $RemoteLocation html'
</pre>
            (Note that there is no line wrap in the script.) This returns a list 
            of files with an html extension into the variable <b>FileList</b>. 
            This will be used to get the files:
            <p> 
            <pre>
GetRemoteFiles $RemoteMachineName $RemoteUserName \
  $RemoteUserPassword $LocalLocation $RemoteLocation $FileList
</pre>
            The remote files are transferred to the local machine, then <b>have 
            .done</b> appended to their names. After this, a list of local files 
            is built for transfer to the remote machine:
            <p> 
            <pre>
FileList='ls -1 *.html 2&gt; /dev/null'
</pre>
            This list is then used to push files over to the remote system:
            <p> 
            <pre>
PutRemoteFiles $RemoteMachineName $RemoteUserName \
  $RemoteUserPassword . $RemoteLocation $FileList
</pre>
            After <b>PutRemoteFiles</b> finishes copying the files over to the 
            remote system, it places them into a local directory called "archive". 
            At this point, the script has done all that it was designed to do, 
            and should now exit with a successful status:
            <p> 
            <pre>
# If program makes it here, then it was successful
ErrorFlag=0
echo  &gt;&gt; $MailStatusFile
# Then go to ExitGracefully via trap
</pre>
            Setting the <b>ErrorFlag</b> at the end ensures that we actually made 
            it to the bottom of the script. After this normal exit, as with any 
            exit, control is passed to the <b>ExitGracefully</b> function defined 
            earlier.
            <p> <b>Conclusion</b>
            <p> I hope you find this set of functions and the example script helpful. 
              Please feel free to email questions, suggestions, and improvements 
              to me at the address provided.
            <p> <i>George Callaway is a Senior Technical Architect with Emerald 
              Solutions, a professional services company based in Portand, OR. 
              His primary interests are systems and software architecture, UNIX 
              administration, Oracle database administration, and Java. He can 
              be reached at: <b>george@georgecallaway.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
