<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i09: A Perl Package for Monitoring Traffic</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a11_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2001/sep2001.tar"><b class=codeListing>sep2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1>A Perl Package for Monitoring Traffic </h1>
            <p> John Shearer 
            <p> Systems and network administrators constantly struggle to know 
              what is happening on their networks. This job is difficult at best, 
              and at worst, it can be downright exasperating. With the myriad 
              of manufacturers, standards, protocols, and everyone thinking they 
              have the tool that does it all, the situation is not improving. 
              With this challenge in mind, I decided to turn to my old friends 
              for help: Perl, SNMP (Simple Network Management Protocol), CGI, 
              and good old-fashioned HTML. 
            <p> The rtr-graph package described in this article is a set of Perl 
              scripts for polling routers (or other SNMP-enabled devices) for 
              information about traffic in and out of specified interfaces. You 
              can set up "<b>rtr-traff</b>" as a cron job to poll the 
              interface at a specified interval, then use a CGI script for a Web 
              front end to the finished graphs. The Web interface automatically 
              sorts results from different devices into separate drop-down lists. 
              You can also set up multiple config files to poll different devices, 
              change final graph specs, and set up new parameters. This concept 
              was originally designed to check our Internet T1 interface for traffic 
              levels during the day. It has since evolved into a versatile program 
              that gathers statistics from any device to check problems, get baselines, 
              or just see what's going on. 
            <p> Rtr-graph allows the administrator to quickly gain access to traffic 
              statistics in specific areas of the network. When trouble spots 
              (or suspected trouble spots) arise, rtr-graph can be quickly adjusted 
              to monitor a certain area. The Web interface allows the administrator 
              to instantly view multiple graphs spanning several days to see trends 
              and set benchmarks (Figure 1). 
            <p> In the next several sections, I will cover the installation and 
              use of the various Perl modules required for rtr-graph to function. 
              Once all the required components are explained, I will cover the 
              installation and use of the rtr-graph scripts. My current implementation 
              of rtr-graph is based on Red Hat 7.0 with a basic RPM installation 
              of Perl version 5.6.0, and Apache 1.3.12. 
            <p> <b>SNMP </b>--<b> Simple?</b> 
            <p> The Simple Network Management Protocol (SNMP) can be anything 
              but simple. It is a low-level protocol used to manage and monitor 
              devices on a network. SNMP can provide an incredible amount of information 
              about your devices, as long as you know how to obtain and decipher 
              it. Most routers, many switches, and even end devices like workstations, 
              servers, and printers can be managed using SNMP. The Perl implementation 
              of SNMP that I am using is Net-SNMP, which offers an object-oriented 
              interface to the Simple Network Management Protocol. Net-SNMP, by 
              David M. Town, can be downloaded from: 
            <p> 
            <pre>
http://www.perl.com/CPAN-local/modules/by-module/Net/
</pre>
            The current version as of this writing is 3.60. To unpack this Perl 
            module, download it to a local directory and issue the following command: 
            <p> 
            <pre>
tar -xzvf Net-SNMP-3.60.tar.gz
</pre>
            Next, change to the newly created directory and issue these commands: 
            <p> 
            <pre>
perl Makefile.PL
make test
make install
Installing GDGraph</pre>
            The graphing functionality of Perl requires several packages to work 
            properly. Since hundreds of possible permutations exist in Linux installations, 
            I will mention the packages needed and discuss some of the possible 
            solutions (see resources section for more information). 
            <p> The idea is to have a functioning installation of the Perl module 
              GDGraph, but this module has several prerequisites. Before installing 
              GDGraph, you must have <b>zlib</b>, <b>freetype</b>, <b>libpng</b>, 
              <b>jpeg-6b</b>, and <b>gd</b> installed and functioning. Luckily, 
              Red Hat Linux comes with all of these packages in RPM format, and 
              they work just fine. 
            <p> You will also need to download the Perl modules GD-1.32, GDTextUtil-0.80, 
              and GDGraph-1.33 from: 
            <p> 
            <pre>
http://www.perl.com/CPAN-local/modules/by-module/GD
</pre>
            Once you download and un-tar these archives, you can install them 

            by going into each of the newly created directories and entering the 
            following commands: 
            <p> 
            <pre>
perl Makefile.PL
make
make install
</pre>
            GDGraph has the optional command "<b>make samples</b>", 
            which will create a subdirectory containing many excellent examples 
            of how to use the GDGraph Perl module if desired. 
            <p> The last component to install is the ImageMagick package. This 
              package takes the individual graphs created for each interface and 
              uses the "Montage" function to combine them into a single 
              image. Again, the Red Hat RPM will work just fine for this install. 
            <p> <b>The rtr-graph Scripts</b> Once all the prerequisite modules 
              are installed, it is time to install and look at the scripts in 
              the rtr-graph package. Download the <b>tar</b> file <b>rtr-graph-1.0.tar.gz</b> 
              and put it into a temporary directory. Next, issue the command: 
            <p> 
            <pre>
tar -xzvf rtr-graph-1.0.tar.gz
</pre>
            This will create a new directory called rtr-graph and extract the 
            scripts <b>rtr-traff</b>, <b>rtr-graph</b>, <b>traf-lister.cgi</b>, 
            and the sample configuration file <b>traffic.cfg</b>. These files 
            must be manually moved to their final locations: <b>rtr-traff</b> 
            and <b>rtr-graph</b> to a bin directory such as <b>/usr/local/bin</b>; 
            <b>traf-lister.cgi</b> to a Web cgi-bin directory; <b>traffic.cfg</b> 
            to<b> /etc</b>. To understand how the scripts work together, let's 
            look at the configuration file (Listing 1). 
            <p> <b>traffic.cfg</b> is just an example and will need to be modified 
              to suit your own needs. You will need a different configuration 
              file for each device you want to poll. Each variable will need to 
              be defined, but some of them can be left to their defaults. Here 
              is a quick explanation of each of the variables: 
            <p> 
            <p> <b>$name</b> -- This can be set to any name for this particular 
              setup that will be understandable to you. This name will be used 
              for graph names, data file names, etc. It is a good idea to name 
              this the same as the configuration file for all features of rtr-graph 
              to work (e.g., if the configuration file is named <b>/etc/traffic.cfg</b>, 
              set this value to "<b>traffic</b>"). 
            <p> <b>@interfaces</b> -- This is a list of the interfaces on 
              the device to be polled. You may need to use some other SNMP management 
              software to know what the interface indexes are, but they usually 
              follow the pattern of 1, 2, 3, etc. You also have the option of 
              adding a colon-delimited value for the graph y-axis for just this 
              interface. 
            <p> <b>$y_axis_def</b> -- This is the default value in megabits 
              for the graph y-axis. This value is overridden by any values specified 
              in the <b>@interfaces</b> list. Again, this value is in megabits 
              (e.g., a value of 10 will give the y-axis a value of 10,000,000). 
            <p> <b>$tmp_dir</b> -- The directory to be used for the data files 
              and some temporary files needed by the <b>rtr-graph</b> script. 
              This directory will need to be writable by the executor of the scripts 
              and the <b>httpd</b> daemon in order for all the functions of the 
              Web interface to work. 
            <p> <b>$www_dir</b> -- The directory that will store the finished 
              graphs. Again, this will need to be writable by the executor of 
              the rtr-graph scripts and the <b>httpd</b> daemon. 
            <p> <b>$offset</b> -- This is the number of seconds to offset 
              the date for which a graph is generated, if no date is given. For 
              instance, a value of 86,400 seconds means that, if no date is given, 
              the default is to generate a graph for 86,400 seconds ago, or "yesterday". 
            <p> <b>$comm</b> -- The Read community string for the device being 
              polled, usually "public". 
            <p> <b>$address</b> -- The IP address or resolvable name of the 
              device to be polled. 
            <p> <b>$tile</b> -- This is the grid size of the final graph specified 
              as "WIDTHxHEIGHT". If you were polling one interface then 
              you would specify "1x1". If you are polling eight interfaces, 
              then you could specify "8x1", "4x2", etc. This 
              depends mostly on how you would like to see the final display. 
            <p> <b>$skip</b> -- This value specifies how often the graphing 
              program should insert an x-axis value. If you poll the device every 
              minute, trying to show every minute as an x-axis value would be 
              quite unreadable. I find these values to work fairly well: 
            <p> 
            <p> 
            <ul>
              <li> 1-minute poll -- <b>$skip</b> = 50 
              <li> 5-minute poll -- <b>$skip</b> = 10 
              <li> 10-minute poll -- <b>$skip</b> = 5 
            </ul>
            <p> <b>$gr_width</b> and<b> $gr_height</b> -- These values specify 
              the width and height of the individual graphs. Again, this is user 
              preference and is highly dependent on how many interfaces you are 
              polling and the resolution of the display where you will be viewing 
              the graphs. 
            <p> <b>rtr-traff Script</b> 
            <p> I will now explain the <b>rtr-traff</b> script (Listing 2). <b>rtr-traff</b> 
              is the mechanism that polls the device for the number of octets 
              sent and received from each interface. This script takes one required 
              argument, which is the name of the configuration file to be used. 
              This configuration file should be specified as just the file name, 
              because the script will assume it is in the<b> /etc</b> directory. 
              Here is an example cron entry that will poll the router every five 
              minutes: 
            <p> 
            <pre>
*/5 * * * * /usr/local/bin/rtr-traff --cfg traffic.cfg
</pre>
            Using the Net::SNMP Perl module, <b>rtr-traff </b>creates an object 
            for the device to be polled as found in the configuration file. It 
            then polls the two MIB objects specified as <b>$inmib </b>and <b>$outmib 
            </b>with the actual interface index appended to the end of each object. 
            These values are stored in a data file (the location specified in 
            the configuration file) along with the time in seconds since epoch. 
            The data file name is derived from the<b> $name</b> variable, the 
            current date, and the interface index. This allows for each interface's 
            data to be stored in its own file. Because the data file name contains 
            the date, the files are automatically rotated every day. 
            <p> <b>rtr-graph Script</b> 
            <p> Next comes the<b> rtr-graph</b> script (Listing 3), which is the 
              real workhorse of the system. This script can be broken down into 
              four basic components: 1) startup and setting of variables; 2) processing 
              the data collected into a more usable format; 3) making the small 
              graphs for the individual interfaces; 4) generating the final picture 
              and do some cleanup. 
            <p> Let's consider these components one at a time. Most straightforward 
              is the setup where <b>rtr-graph</b> sets variables and offers help 
              if requested. It also checks for command-line arguments, such as 
              the required configuration file. We also have an option of specifying 
              a date for the graph. This gives us the option of re-creating graphs 
              for previous days (as long as we still have the data files) and 
              creating graphs on the fly for the current day. There is a built-in 
              option for specifying "today" as a valid date, so you 
              don't have to figure out today's date yourself. This makes 
              it a little easier to use "<b>rtr-graph</b>" in other 
              scripts without having to write code for date calculation. 
            <p> Next, <b>rtr-graph</b> parses through each data file and puts 
              the polled information into a graphable format. One interesting 
              SNMP problem is that the values for ifInOctets and ifOutOctets are 
              stored in octets (bytes) instead of bits, which is what most people 
              are used to. This is handled by the <b>$scale</b> variable which 
              is set to .125 (or 1/8) to give a more readable value. This could 
              also be set to 1 for bytes, 128 for kilobits, 1024 for kilobytes, 
              etc. Just remember to change your graph labels to reflect this! 
              Another SNMP issue to overcome is the fact that integers stored 
              in a MIB counter have a 4- byte maximum value, or 4,294,967,294. 
              Even on a 1.5-Mb T1, this counter can roll over several times a 
              day. To handle this, the script checks whether the current value 
              it is processing is less than the last value it processed (meaning 
              a rollover has occurred) and uses this maximum to calculate the 
              actual data throughput during that period. 
            <p> <b>rtr-graph</b> is also able to accurately graph using variable 
              sample periods. It uses the time stamps to see how many seconds 
              passed between samples, and then divides the traffic by that value. 
              This solves two potential problems. First, the administrator can 
              set different sample rates for different devices, or change the 
              sample rate on a device, while being assured he is getting an accurate 
              bits-per-second reading; Second, if the <b>rtr-traff</b> script 
              misses a reading (which can happen for any number of reasons), the 
              graphing script will just treat the gap as a long sample and still 
              give an accurate reading. 
            <p> Now I will use the functions of GDGraph to make the individual 
              graphs for the interfaces. The documentation that comes with GDGraph 
              is fairly clear about how to create a variety of different graphs, 
              and the samples provided are excellent. I simply feed the newly 
              created graph object the data just compiled, along with a few pre-set 
              variables for labels, graph size, etc. These individual graphs are 
              stored in <b>png</b> format in the temp directory specified in the 
              configuration file. I used to use the GIF format for my graphs, 
              but during a re-install some time ago, I found this excerpt from 
              the GD package README file: 
            <p> 
            <pre>
===&gt; This version of GD no longer supports GIF output because of 
===&gt; threats from the legal department at Unisys. Source code
===&gt; that calls $image-&gt;gif will have to be changed to call either 
===&gt; $image-&gt;jpg or $image-&gt;png to output in JPEG or PNG formats. 
===&gt; The last version of GD that supported GIF output was version 
===&gt; 1.19.
</pre>
            In the final step,<b> rtr-graph</b> uses the Montage function of ImageMagick 
            to compile the individual graphs into a single graphic. Here the <b>$tile</b> 
            setting from the configuration file comes into play. If you are polling 
            one, two, or even three interfaces, a single row of graphs will be 
            okay. I pushed the potential of this system and polled all 32 interfaces 
            of a high-end router we were using. It worked like a champ, but that's 
            a lot of graphs to try to look at on the screen! In this case, I actually 
            opted for a <b>$tile</b> value of "32x1". Even though this 
            created a final image of 9600 pixels across, I found it easier to 
            get comparisons over several days by viewing one day per row. YMMV. 
            <p> As part of the final step, <b>rtr-graph</b> removes the temporary 
              graphs and sets the owner and group permissions of the final image 
              to root. This is necessary because the Web interface can generate 
              the graphs on its own, which will give the image the owner and group 
              permissions of the <b>httpd</b> daemon. Even if <b>rtr-graph</b> 
              re-generates the graphs during its regular execution, the ownership 
              will not automatically change to root (or whoever the cron job runs 
              as) if the image already exists. This step is not absolutely necessary, 
              but I feel better knowing that the Web daemon (or rogue Web processes) 
              couldn't alter or remove the images once they were written. 
            <p> Finally, this script needs to be run at a regular interval just 
              like the <b>rtr-traff</b> script. An example cron entry to execute 
              this script every morning at 12:30 might be: 
            <p> 
            <pre>
30 00 * * * /usr/local/bin/rtr-graph --cfg traffic.cfg
</pre>
            <b>Web Interface</b> 
            <p> The final piece to this system is the Web front-end for viewing 
              the graphs. This script (<b>traf-lister.cgi</b> -- Listing 4) 
              needs to be put in a <b>cgi-bin</b> directory on your Web server. 
              I put this script in a separate directory from my public scripts 
              in order to maintain some security. I'm not sure how this information 
              could necessarily be used maliciously, but the directory was already 
              set up for other administrative scripts, so it seemed like the logical 
              place to put it. 
            <p> Because the <b>traf-lister.cgi</b> is not necessarily dependent 
              on any specific<b> rtr-graph</b> configuration file, some variables 
              must be hard-coded directly into the script. Those variables are: 
            <p> 
            <p> <b>$www_dir</b> -- This is the full path to the directory 
              where the graphs are stored. 
            <p> <b>$cgi_dir</b> -- The directory where this script resides. 
              This is most likely an alias that is defined in your Web server 
              configuration files (e.g., <b>httpd.conf</b> in Apache). 
            <p> <b>$bin_dir</b> -- The directory where the <b>rtr-graph</b> 
              script is stored. This is necessary if you want to be able to generate 
              current graphs from the Web interface. 
            <p> <b>$url </b>-- This is the full URL to the directory where 
              the traffic graphs are stored. Again, this may be an alias defined 
              in your Web server configuration. 
            <p> 
            <p> I tried to make the Web interface as intuitive as possible without 
              cluttering it up with a lot of unnecessary text and instructions 
              (Figure 1). Basically, each graph that is stored in the <b>$www_dir</b> 
              <b>directory</b> (designated by the <b>.jpg</b> extension) is placed 
              in a list based on its prefix, which is defined by the <b>$name</b> 
              variable in the configuration file. Radio buttons correspond to 
              each list, so you can generate a new graph for that device. If you 
              try to graph too many devices with too many interfaces, you may 
              encounter a time-out situation on your browser. This has never happened 
              to me, but the possibility exists. 
            <p> To view the finished graphs, simply select as many images from 
              as many lists as you want and hit the SUBMIT button. Most browsers 
              support the [CTRL]-Click and [SHIFT]-Click options for selecting 
              multiple items in a list. The <b>traff-lister.cgi</b> script will 
              also remember your last selections; so, to remove them from your 
              next SUBMIT, select the auto-generated "No Graph" entry. 
              All the scripts in this package were designed with configuration 
              simplicity in mind. This allows an administrator to make a logical 
              separation in the devices monitored for easier viewing. For instance, 
              a number of printers can be polled and the graphs stored in <b>/www/html/printers</b>, 
              and a number of routers can be polled and stored in <b>/www/html/routers</b>. 
              Then, two different viewer scripts can be configured, so you can 
              quickly jump to just the devices you are looking for. 
            <p> <b>Conclusion</b> 
            <p> While <b>rtr-graph</b> cannot replace all commercial network analysis 
              products, it does offer an easy, automated way to view particular 
              devices that are potential trouble spots. With its ease of configuration, 
              an administrator can easily customize the output. Figure 1 shows 
              an Internet router with one Ethernet interface that is being graphed 
              with a 10-Mb scale. It also shows two T1 interfaces that are graphed 
              with a 1.6-Mb scale (a T1 actually has a maximum of ~1.54 Mb, but 
              1.6 Mb makes the graph easier to view). With the separation of "Traffic 
              In" and "Traffic Out", we can also see exactly how 
              the data is moving through this device. 
            <p> A nice advantage <b>rtr-graph</b> has over some other products 
              is the ability to view the statistics of several interfaces at the 
              same time. Not long after we put our load-balanced T1's into 
              production, we saw that even though they looked like they were balanced, 
              the Ethernet interface on the router showed we were still only getting 
              single T1 performance and that the traffic on the T1's were 
              actually mirrored instead of balanced. Without being able to see 
              the T's and the Ethernet interfaces at the same time, the problem 
              may have gone unnoticed for quite a while. (Figure 1 shows an example 
              of this discrepancy.) 
            <p> There's one last bit of maintenance to perform. Your temp 
              directory can quickly fill up with data files if you're not 
              careful. I like to keep these files around for a few days just in 
              case, but I have never needed them beyond that. A useful program 
              for handling this problem is the <b>tmpwatch</b> utility, which 
              can remove old files from any directory you specify. Red Hat systems 
              automatically run this utility daily to remove files from the <b>/tmp</b> 
              directory that are more than 10 days old. 
            <p> <b>Where Do We Go from Here?</b> 
            <p> A logical step for future implementation would be to use an SQL 
              database to store all the polled information rather that cluttering 
              up the system with text data files. As long as you're doing 
              that, you might as well poll for other types of information like 
              errors, broadcasts, etc. Most of the work has already been done, 
              you would just need to add the new MIBs to the polling script and 
              send the collected data to your database instead of a text file. 
              Then, you could make your Web interface so you could select only 
              the information and time period you want and have it create a custom 
              graph on the fly! 
            <p> <b>Resources</b> 
            <p> Net-SNMP -- <b>http://www.perl.com/CPAN-local/modules/by-module/Net/</b> 
            <p> <b>zlib</b> -- <b>http://www.info-zip.org/pub/infozip/zlib/</b> 
            <p> <b>freetype</b> -- <b>http://freetype.sourceforge.net/</b> 
            <p> <b>libpng</b> -- <b>http://freesoftware.com/pub/png/src/</b> 
            <p> <b>jpeg-6b</b> -- <b>ftp://ftp.uu.net/graphics/jpeg/</b> 
            <p> <b>gd</b> -- <b>http://www/boutell.com/gd/</b> 
            <p> GD, GDTextUtil, GDGraph -- <b>http://www.perl.com/CPAN-local/modules/by-module/GD/</b> 
            <p> ImageMagick -- <b>http://www.imagemagick.org/</b> 
            <p> <i>John Shearer helps manage about 2000 laptops and desktops at 
              a boarding high school in Massachusetts. Although he comes from 
              a primarily Dos/Windows background, he has learned of the wonderful 
              world of Linux and devours anything Linux-related that he can get 
              his hands on. When he's not putting the final touches on a 
              new script, he loves to chase around his two-year-old son. He can 
              be reached at: <b>jshearer@nmhschool.org</b>.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
