<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i09: High-Availability File Server with heartbeat</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2001/sep2001.tar"><b class=codeListing>sep2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a3.gif" width="200" height="174" align="right">High-Availability 
              File Server with heartbeat</h1>
            <p> <i>Steve Blackmon and John Nguyen</i>
            <p> Maintaining maximum system uptime is becoming increasingly critical 
              to the success of any organization. While there are many off-the-shelf 
              solutions for high availability, they are often very expensive and 
              require expertise that smaller companies do not have on staff. In 
              this article, we present a much lower cost alternative to achieving 
              high-availability (HA) services using inexpensive hardware and publicly 
              available software. A systems administrator can learn to use and 
              maintain our system with minimal time investment. We will provide 
              step-by-step procedures for building a high-availability file server 
              for UNIX and Windows clients. Although the article focuses on how 
              to set up a file server, the technique could be applied to any number 
              of services.
            <p><b>Hardware and Software Components</b> 
            <p><b> Hardware</b>
            <p> To get started, you will need two systems with at least one network 
              interface each (preferably two), an available serial port, a SCSI 
              controller, and an external SCSI hard drive.
            <p> We used two identically configured Intel ISP 1100 servers with 
              650-MHz Pentium III processors and 128 MB of RAM. These systems 
              each have two integrated 10/100 Ethernet interfaces and are rack-mountable 
              (1U). Each system has two internal IDE drives, which we used for 
              the OS installation. For our shared disk, we used an external 9-GB 
              SCSI drive that is attached to both systems. Our SCSI controllers 
              are Adaptec AHA-2940AUs (see Figure 1).
            <p> <b>Software</b>
            <p> We used Red Hat Linux 6.2 (kernel 2.2.14-5.0), Samba version 2.0.6-9 
              (included with RH 6.2), and heartbeat version 0.4.9-1 (available 
              from: <b>http://www.linux-ha.org/download</b>).
            <p> heartbeat is a publicly available package written by Alan Robertson. 
              heartbeat provides the basic functions required by any HA system 
              such as starting and stopping resources, monitoring the availability 
              of the systems in the cluster, and transferring ownership of a shared 
              IP address between nodes in the cluster. heartbeat is a software 
              solution that monitors the health of a particular service (or services) 
              through either a serial line or Ethernet interface or both. The 
              current version supports a 2-node configuration whereby special 
              heartbeat "pings" (broadcast/multicast messages) are used 
              to check the status and availability of a service. It is a vital 
              component of the whole Linux-HA package.
            <p> Although heartbeat is currently only available for Linux, the 
              next release will include support for Solaris, FreeBSD, and OpenBSD.
            <p> We are grateful to Alan for contributing this useful software 
              and also for his input while we were writing this article.
            <p> <b>Procedure</b>
            <p> This is the procedure we used with our hardware. You may need 
              to adapt this procedure depending on you situation and/or hardware 
              available to you.
            <p> <b>Hook Up the Equipment </b>
            <p> Figure 1 shows the connectivity required for this cluster.
            <p> 
            <ul>
              <li> Connect a null modem cable between the serial ports on each 
                system. 
              <li> Connect a Cat 5 crossover cable between your second ethernet 
                interfaces on each system. 
              <li> Connect a SCSI cable from each system to your external SCSI 
                disk.
            </ul>
            <b>Change the SCSI ID on Your Primary System </b>
            <p> With SCSI, every component on the bus must have a unique ID, including 
              the host adapter cards that normally have a default ID of 7. Because 
              our SCSI bus will have two host adapters and a disk, we need to 
              change the ID of one of the adapters. We changed the SCSI ID of 
              our primary system to 6 and left the ID of the secondary system 
              at 7. The ID of the adapter must be changed from the SCSI BIOS. 
              With Adaptec SCSI controllers, you typically get into the BIOS configuration 
              screen by pressing &lt;control&gt;A when prompted during the boot 
              process. If you are using some other host adapter, you will need 
              to refer to your manual to figure out how to change the SCSI ID 
              of your adapter.
            <p> <b>Install the Operating System on the Primary System </b>
            <p> We called our systems "ttisrv1" and "ttisrv2"; 
              ttisrv1 is our primary system and ttisrv2 is the secondary. You 
              will want to give the primary Ethernet interface of each system 
              a unique public address. You also need to configure your secondary 
              Ethernet interfaces with IP addresses, but you can pick any unique 
              subnet because these interfaces will be private. If you do a custom 
              installation, don't forget to include Samba.
            <p> <b>Set Up the External Disk</b>
            <p> You will need to partition and create a filesystem on your external 
              disk. Note that this is only necessary on your primary system. We 
              used a single partition that contained the entire disk.
            <p> Create partition with <b>fdisk</b>:
            <p> 

            <pre>
ttisrv1 #  fdisk /dev/sda
</pre>
            The number of cylinders for this disk is set to 1116. There is nothing 
            wrong with that, but this is larger than 1024, and could in certain 
            setups cause problems with:
            <p> 
            <p> 1. Software that runs at boot time (e.g., LILO) 
            <p> 2. Booting and partitioning software from other OSs
            <p> (e.g., DOS FDISK, OS/2 FDISK)
            <p> 
            <pre>
Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1116, default 1):
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-1116, default 1116):
Using default value 1116

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: If you have created or modified any DOS 6.x
partitions, please see the fdisk manual page for additional
information.
</pre>
            Now we create a filesystem on the external SCSI disk:
            <p> 
            <pre>
ttisrv1# mkfs /dev/sda1
</pre>
            Create a mount point for the disk:
            <p> 
            <pre>
ttisrv1# mkdir /ttidisk
</pre>
            Make sure you can mount the filesystem:
            <p> 
            <pre>
ttisrv1# mount /dev/sda1 /ttidisk
</pre>
            Create a directory to hold the Samba password file:
            <p> 
            <pre>
ttisrv1# mkdir /ttidisk/smb
</pre>
            Create a public directory for file sharing and set the proper permissions:
            <p> 
            <pre>
ttisrv1# mkdir /ttidisk/public
ttisrv1# chmod 1775 /ttidisk/public
</pre>
            Unmount the drive (heartbeat will mount it for you):
            <p> 
            <pre>
ttisrv1# umount /ttidisk
</pre>
            <b>Download and Install heartbeat </b>
            <p> After downloading heartbeat, install it on the primary system:
            <p> 
            <pre>
ttisrv1# rpm -ivh &lt;download_path&gt;/heartbeat-0.4.9-1.i386.rpm
</pre>
            <b>Configure heartbeat</b>
            <p> The procedures for configuring heartbeat are well documented and 
              you can find examples along with the documentation in <b>/usr/share/doc/packages/heartbeat</b>. 
              We show you the specific configuration we used for our implementation; 
              if you require more information, please refer to the documentation 
              in the abovementioned directory.
            <p> There are three files that you will need to set up to get heartbeat 
              working: <b>authkeys</b>, <b>ha.cf</b>, and <b>haresources</b>.
            <p> <b>Configure /etc/ha.d/authkeys</b>
            <p> This file sets your authentication keys for the cluster that must 
              be the same on both nodes. You can choose from three authentication 
              schemes: <b>crc</b>, <b>md5</b>, or <b>sha1</b>, depending on your 
              security needs. We chose <b>md5</b>. Here is our <b>/etc/ha.d/authkeys</b> 
              file:
            <p> 
            <pre>
# use md5 with key "ttikey"
auth 3
3 md5 ttikey
</pre>
            The <b>authkeys</b> file must only be readable by root or heartbeat 
            will not start. Be sure to set the appropriate permissions after creating 
            this file:
            <p> 
            <pre>
# chmod 600 /etc/ha.d/authkeys
Configure /etc/ha.d/ha.cf
</pre>
            This file defines the nodes in the cluster and the interfaces that 
            heartbeat uses to verify whether or not a system is up. Here is our 
            <b>/etc/ha.d/ha.cf</b> file:
            <p> 
            <pre>
# define nodes in cluster
node     ttisrv1
node     ttisrv2

# time a system must be unreachable before considered dead (seconds)
deadtime 5

# set up for the serial heartbeat pulse
serial   /dev/ttyS0
baud     19200

# interface to run the network heartbeat pulse
udp      eth1
Configure /etc/ha.d/haresources
</pre>
            This file describes the resources that are managed by heartbeat. The 
            resources are basically just start/stop scripts much like the ones 
            used for starting and stopping resources in <b>/etc/rc.d/init.d</b>. 
            Note that heartbeat will look in <b>/etc/rc.d/init.d</b> and <b>/etc/ha.d/resource.d</b> 
            for scripts. Here is our <b>/etc/ha.d/haresources</b> file:
            <p> 
            <pre>
# use ttisrv1 as primary, use 192.168.0.100 as shared IP
ttisrv1 192.168.0.100 Filesystem::/dev/sda1::/ttidisk::ext2 smb nfslock nfs
</pre>
            This line tells heartbeat to start these resources on ttisrv1 with 
            the shared IP address of 192.168.0.100. It also tells heartbeat to 
            mount the filesystem found on <b>/dev/sda1</b> at the <b>/ttidisk</b> 
            mount point and to start Samba and NFS.
            <p> <b>Configure /etc/hosts</b>
            <p> Your <b>/etc/hosts</b> file should contain entries for both of 
              the nodes in your cluster and your shared IP address. Here is an 
              except from out <b>/etc/hosts</b> file on <b>ttisrv1</b> (each system 
              should have the same entries):
            <p> 
            <pre>
127.0.0.1    ttisrv1 localhost.localdomain localhost
192.168.0.99         ttisrv2
192.168.0.100        ttisrv
</pre>
            <b>Configure Samba </b>
            <p> Samba version 2.0.6 is included with Red Hat Linux 6.2. If you 
              did not select the option to include it when you installed Red Hat 
              on your machine, you can install it from the installation CD using 
              RPM:
            <p> 
            <pre>
ttisrv1# rpm -Uvh /mnt/cdrom/RedHat/RPMS/samba-*.rpm
</pre>
            Substitute <b>/mnt/cdrom</b> with the mount point of the CD drive 
            on your machine if it is different.
            <p> <b>Configure smb.conf</b>
            <p> Check to see if Samba is already running. Type:
            <p> 
            <pre>
ttisrv1# /etc/rc.d/init.d/smb status
</pre>
            If Samba is not active you will see:
            <p> 
            <pre>
smbd is stopped
nmbd is stopped
</pre>
            If Samba is running, you will see:
            <p> 
            <pre>
smbd (pid 5103) is running...
nmbd (pid 5114 5112) is running...
</pre>
            Note: the PIDs might be different for your host. If Samba is running, 
            stop it:
            <p> 
            <pre>
ttisrv1# /etc/rc.d/init.d/smb stop
</pre>
            It really doesn't matter whether Samba is running or not. Modifications 
            that we make to its configuration file will be picked up by Samba 
            because, by default, it checks that file every 60 seconds for changes. 
            For consistency's sake, we would like Samba to come up after 
            we are completely done with our configuration. Remember to save the 
            original copy in case you have to go back to it. Locate the file <b>/etc/smb.conf</b> 
            (or <b>/etc/samba/smb.conf</b>), and let's get to work.
            <p> Installing Samba is a simple process. You either select it as 
              an option during your Red Hat installation or install the package 
              later using RPM. Configuring it is another matter. We won't 
              go into a Samba configuration tutorial here. However, <i>Using Samba</i> 
              from O'Reilly &amp; Associates delves into this subject, and 
              we recommend that you refer to this book for further understanding.
            <p> With that said, Listing 1 shows what we've done with our 
              Linux host to turn it into a Samba server. We basically started 
              out with the default <b>smb.conf</b> file that came with our system 
              and modified it to suit our needs. Please note that this is not 
              the complete <b>smb.conf</b> file; it only lists the options that 
              we actually changed. You can leave the other options as they were 
              in the original file.
            <p> <b>Get Samba Ready </b>
            <p> After you've finished making changes to the <b>smb.conf</b>, 
              you can check to make sure that your configuration file is set up 
              correctly and free of errors:
            <p> 
            <pre>
ttisrv1# /usr/bin/testparm -s
</pre>
            If there is no error, you are ready to go. However, don't start 
            the Samba server at this time. The heartbeat program is set up to 
            start it automatically.
            <p> Next, add a user to your Samba password file. This user should 
              already have a valid account on your Linux machine (i.e., the account 
              is present in your <b>/etc/passwd</b> file). If not, Samba will 
              refuse to add the user. For our example, we will add the user steve.
            <p> Mount the filesystem: 
            <p> 
            <pre>
ttisrv1# mount /dev/sda1 /ttidisk
</pre>
            Add the user:
            <p> 
            <pre>
ttisrv1# /usr/bin/smbpasswd -a steve
</pre>
            Samba will prompt you for the new SMB password; enter it accordingly.
            <p> Unmount the drive (heartbeat will mount it for you):
            <p> 
            <pre>
ttisrv1# umount /ttidisk
</pre>
            Please note that the mounting and unmounting of <b>/ttidisk</b> is 
            totally unnecessary once the system is up and running with heartbeat 
            in control of the shared filesystem. This is just a demonstration 
            to provide you with a starting point for your Samba server.
            <p> <b>Configure NFS</b>
            <p> Make sure that you don't start NFS on boot up:
            <p> 
            <pre>
ttisrv1# /sbin/chkconfig --del nfs
</pre>
            Then add the links to kill NFS on shutdown or reboot:
            <p> 
            <pre>
ttisrv1# /sbin/chkconfig --level 016 nfs off
</pre>
            These steps are necessary because we want heartbeat to control the 
            startup of NFS.
            <p> Add the following to <b>/etc/exports</b>. Create the file if it 
              doesn't already exist:
            <p> 
            <pre>
# Export the shared disk, allowing read/write access and
# synchronous I/O with no write delay.
/ttidisk    192.168.0.*(rw,sync,no_wdelay)
</pre>
<b>Test heartbeat</b><p>
Start heartbeat on the primary system with the following command:<p>
<pre>
ttisrv1# /etc/rc.d/init.d/heartbeat start
Starting High-Availability services: [  OK  ]
</pre>
<p>If it fails, look in <b>/var/log/messages</b> to determine the reason and then correct it. After heartbeat starts successfully, you should see a new interface with the IP address that you configured in the <b>ha.cf</b> file. This interface is an alias, so you will see it displayed like the following:<p>
<pre>
ttisrv1# ifconfig

&lt;...clipped output...&gt;

eth0:0    Link encap:Ethernet  HWaddr 00:D0:B7:00:B5:09  
          inet addr:192.168.0.100  Bcast:192.168.0.255  \
            Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:7 Base address:0x7000
</pre>
<p>Note: You might experience a short delay while heartbeat attempts to bring up the interface. You should also see that the disk has been mounted:<p>
<pre>
ttisrv1# df -k

Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/hda1              2016016     42612   1870992   2% /
/dev/hda6             11385128    376292  10430500   3% /usr
/dev/sda1              8823404       552   8374644   0% /ttidisk
</pre>
Also check to see that Samba and NFS started successfully:<p>
<pre>
ttisrv1# /etc/rc.d/init.d/smb status

smbd (pid 5729) is running...
nmbd (pid 5740 5738) is running...

ttisrv1# /etc/rc.d/init.d/nfs status

rpc.mountd (pid 5825) is running...
nfsd (pid 5841 5840 5839 5838 5837 5836 5835 5834) is running...
rpc.rquotad (pid 5816) is running...
</pre>
<b>Configure the Secondary System </b><p>
The secondary system can be configured with a subset of the steps used to configure the primary. The steps for configuring the secondary system are very similar to the primary.<p>
First, install the operating system as outlined in the section labeled Install the Operating System on the Primary System. Next, download and install heartbeat per the section labeled Download and Install heartbeat. We recommend that you copy all the configuration files created on the primary system to the secondary system. You could manually go through the process of creating them again but it is time consuming and prone to error. You can get all the files you need in a <b>tar</b> archive with the following command:<p>
<pre>
ttisrv1# cd /
ttisrv1# tar cvf &lt;path&gt;/hafiles.tar /etc/smb.conf  \
  /etc/ha.d/haresources /etc/ha.d/ha.cf /etc/ha.d/authkeys \
  /etc/exports
</pre>
<p>After creating the <b>tar</b> file, transfer it to the secondary system using FTP or whatever method you prefer (you could mount the shared disk on the primary, put the <b>tar</b> file on it, umount it, and then mount it on the secondary system for the extraction), and extract the configuration files:<p>
<pre>
ttisrv2# cd /
ttisrv2# tar xvf &lt;path&gt;/hafiles.tar
</pre>
<p>Remember to add entries for the primary system and shared IP address into your <b>/etc/hosts</b> file.<p>
<b>Test Connectivity</b><p>
At this point both systems should be ready to go. There are a few tests you should try to make sure everything is in order before testing failover. First, make sure you can <b>ping</b> one system from the other on both interfaces. You also need to test that your serial connection is functional.<p>
On <b>ttisrv1</b>:<p>
<pre>
ttisrv1# cat &lt; /dev/ttyS0
</pre>
On <b>ttisrv2</b>:<p>
<pre>
ttisrv2# echo "TTY test" &gt; /dev/ttyS0
</pre>
<p>You should see the text on <b>ttisrv1</b>. You should also reverse the test to make sure you have bi-directional communication.<p>
We will now test the ability to mount the disk on the secondary system. First, create the mount point:<p>
<pre>
ttisrv2# mkdir /ttidisk
</pre>
Make sure you can mount the filesystem:<p>
<pre>
ttisrv2# mount /dev/sda1 /ttidisk
</pre>
Unmount the disk:<p>
<pre>
ttisrv2# umount /ttidisk
</pre>
<b>Start heartbeat on Secondary System</b><p>
If you've made it this far with no problems you are in excellent shape! All we have left to do is start heartbeat on the secondary system, and then we can test to make sure it all works.<p>
Start heartbeat on secondary system:<p>
<pre>
ttisrv2# /etc/rc.d/init.d/heartbeat start
</pre>
<b>Testing Failover </b><p>
You can test failover by simply stopping heartbeat on the primary system:<p>
<pre>
ttisrv1 # /etc/rc.d/init.d/heartbeat stop
</pre>
<p>You should see all the services come up on the second machine in 30 seconds or less. If you do not, look in <b>/var/log/messages</b> to determine the problem and correct it. You can fail back over to the primary by starting heartbeat again. heartbeat will always give preference to the primary system and will start to run there if possible.<p>
<b>Caveats </b><p>
In the configuration we have described, we used only one disk, which is a single point of failure. It would be preferable to either use a hardware RAID device or two disks with mirroring, which we felt was beyond the scope of this article. We have tested this configuration with a hardware RAID device with no anomalies noted. We have not tried to use software RAID 1 (mirroring), although we think it would work fine. We would also like to point out that any pending disk writes during a failover could fail depending on the precise timing, but a second attempt would work fine.<p>
It is possible to corrupt your disk if both of the systems attempt to mount the filesystem read/write at the same time. This condition is known as "split brain", and you must take every precaution to ensure it does not happen. If both systems were to mount the same filesystem read/write, they would both attempt to keep the superblock synchronized without regard for changes being made on the other system. This will result in data corruption. The best way to reduce this risk is to have multiple heartbeat interfaces, so heartbeat can determine the status of the other system in the cluster. If you use only a single Ethernet interface and that interface fails, heartbeat will assume the system is down and attempt to take over the disk. By using an Ethernet and a serial heartbeat interface, it would take two distinct failures before split brain could occur.<p>
<b>Other Uses </b><p>
There are endless possibilities for how you may use heartbeat to provide high-availability services. It is particularly good for providing Web services and read-only file access. For example, if you have a number of CDs that you would like to make available to your users, you could purchase a SCSI device with multiple CDs and share them all via Samba and NFS.<p>
<b>Summary </b><p>
We have provided a way to set up a very useful and highly available file server using inexpensive hardware and software that are free, readily available, and relatively easy to set up. You are only limited by your imagination as to how you can expand this sample system to include other components to meet your needs. We hope that we have piqued your interest enough for you to get started on your own high availability project. Feel free to send us your comments.<p>
<i>Steve Blackmon cofounded Transparent Technologies, Inc. in 1999. He has been a Software Developer and System Administrator for 14 years. He currently provides consulting expertise in the areas of high-availability, SAN, and IT infrastructure to high-profile clients in the Atlanta area. He can be reached at: <b>steve.blackmon@transtech.cc</b>.</i><p><i>
John Nguyen has a B.S. in Computer Engineering from Florida Institute of Technology, Melbourne, Florida. He is an application developer with 14 years of experience. His interests are computers, politics, and classical literature. He can be reached at <b>john.nguyen@acm.org</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
