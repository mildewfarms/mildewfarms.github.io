<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i09: New Messages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/sep2001.tar"><b class=codeListing>sep2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b><img src="../../resource/messages.gif" width="200" height="77" align="right">New 
              Messages</b> </h1>
            <p> <i>Readers: Thank you for your excellent feedback during this 
              past month. I received many letters in particular about the "Fastest 
              OS for Network Applications" article featured on the July Web 
              site. The letters are too numerous to reprint here, but many contained 
              similar points. Specifically, the FreeBSD users among you expressed 
              concern over the lack of kernel tuning done for the test. You made 
              your case so strongly that the authors agreed to retune and retest. 
              Their fresh results, and the readers' recommendations for proper 
              tuning appear on the </i>Sys Admin 
            Web site. 
            <p><i> I also received a most useful letter providing additional tips 
              and outlining inaccuracies in the "Dangers of SUID Shell Scripts" 
              article (June issue). It appears below. </i>
            <p><i> Thanks again for your support of the magazine. Write to me 
              with your comments at: <b>aankerholz@cmp.com</b>.</i><p> 
            <hr>
            <p> From: dgk@research.att.com<br>
              Subject: Dangers of SUID Shell Scripts 
            <p> I read the article "Danger of SUID Shell Scripts" in 
              the June issue of <i>Sys Admin</i>. While there are many pitfalls 
              in writing SUID shell scripts, some of which you pointed out, the 
              article contains several inaccuracies and makes it seems as if it 
              is impossible to write SUID shell scripts that are secure. Writing 
              SUID scripts in any language requires a great deal of understanding 
              and should not be done without a complete understanding of the issues. 
              As far as csh is concerned, I agree with you. It is not an appropriate 
              shell for writing any script, let alone, SUID scripts. 
            <p> First, let me describe the inaccuracies. You state that if you 
              invoke the script as 
            <p> 
            <pre>
change-pass "user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh"
</pre>
            that the shell will run the <b>cp</b> command and create a SUID shell 
            program. No shell that I am aware of would do this. Shell syntax is 
            checked before parameter expansion, and the results of expansions 
            are not automatically re-evaluated. Perhaps, you are thinking of the 
            effects of <b>eval</b>. Your warning about the effects of special 
            characters would make sense if you were describing to C programmers 
            the danger of calling <b>system()</b> from a SUID program. The <b>system("string")</b> 
            call invoked <b>sh -c "string"</b> and special characters in string 
            would be processed by the shell grammar. 
            <p> A second error relates to the warnings about IFS. ksh, and POSIX-conforming 
              shells, will not split <b>/usr/bin/passwd</b> into <b>usr bin passwd</b> 
              like older Bourne Shells did. Only characters generated as the result 
              of substitutions are split with IFS. Moreover, ksh ignores IFS settings 
              from the environment and resets IFS to the default value at the 
              start of each script. Better advice would be to set <b>IFS=''</b> 
              if you do not require word splitting, and to put <b>set -o noglob</b> 
              if you do not require file name generation. Your current example 
              does not put double quotes around <b>$user</b>, so that a user could 
              run from a directory that contains only a file named <b>root</b>, 
              and <b>/usr/bin/passwd</b> would be invoked with the argument <b>root</b> 
              by passing <b>*</b> as the name. 
            <p> The dangers of <b>/tmp</b> files have also been eliminated with 
              recent versions of ksh. The <b>/tmp</b> file names are not guessable, 
              and they are created with an exclusive mode that prevents their 
              use in any way. 
            <p> The timing problem you mention in the article depends on the system 
              that you are running on. On some systems, when the system encounters 
              <b>#!</b>, it opens this file and then passes down <b>/dev/fd/n</b>, 
              where <b>n</b> is the open file descriptor number, rather than the 
              name of the script. The shell than reads the script from this file 
              descriptor. On these systems there is no race condition. Moreover, 
              the script does not need to be readable in order to run. On systems 
              that don't have this feature, if the SUID script has been invoked 
              by ksh, the environment variable "_" will contain the 
              pathname of the invoking script when the script is invoked. The 
              script could check this against the expected name to avoid allowing 
              a symlinked version to be invoked so that this race condition could 
              not be exploited. 
            <p> Finally, you left out additional advice on writing secure SUID 
              shell scripts. For example, if a user creates a symbolic link named 
              <b>-i</b> to the SUID script, and you use <b>#! /bin/ksh</b> in 
              line 1, then ksh will be invoked as <b>ksh -i</b>, which would specify 
              an interactive shell. (Actually, ksh is paranoid about running interactive 
              SUID shells, so it will fail). Adding a <b>-</b>, or <b>--</b> 
              after <b>#! /bin/ksh</b> will prevent this. Additionally, you do 
              not warn about the dangers of using <b>eval</b>, or the danger of 
              not quoting parameter and command substitution. 
            <p> I have included a list of advice that I would give to users that 
              wish to create SUID shell scripts. 
            <p> 
            <p> 
            <ul>
              <li> Put <b>#! /bin/ksh -</b> as the first line, rather than just 
                <b>#! /bin/ksh</b>. 
              <li> Manually set your <b>PATH</b> using only absolute names. 
              <li> If you do not require file name expansion, use <b>&gt;set -o 
                noglob</b>. 
              <li> If you do not need word splitting, use <b>IFS=''</b>. Otherwise, 
                use double quotes around every expansion. You might still need 
                to use double quotes to handle the case in which the expansion 
                yields the null string. 
              <li> Invoke <b>unset</b> on each variable before you use it. 
              <li> Check each argument to see whether it meets the required specifications. 
              <li> Do not use <b>eval</b> in your script. 
              <li> Avoid creating file unless absolutely necessary. Be careful 
                about any files that you create. Use <b>set -o noclobber</b> before 
                creating files so that they will be created with exclusive use. 
              <li> Before you create any file, add a trap on <b>EXIT</b> to remove 
                that file so that if your script aborts or exits, the file will 
                be removed. 
            </ul>
            <p> David Korn<br>
              Author of ksh<br>
              <b>http://www.kornshell.com</b> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
