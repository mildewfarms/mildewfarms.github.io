<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: It's All About Context</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/perl.gif" width="150" height="150" align="right">It's 
              All About Context</h1>
            <p> <i>Randal L. Schwartz</i>
            <p> A recent article on Slashdot (<b>www.slashdot.org</b>) discussed 
              the surprising story of a high-school student who made a small Perl 
              programming mistake that got him into a big amount of trouble. On 
              his dynamically generated Web page, he had used the code:
            <p> 
            <pre>
my($f) = `fortune';
</pre>
            when what he should have done was:
            <p> 
            <pre>
my $f = `fortune';
</pre>
            Now, both of these invoke the <i>fortune</i> program, capturing its 
            random quip of text. In this particular case, when the school administrators 
            visited the boy's page, <i>fortune</i> had selected a quote from 
            a William Gibson novel:
            <ul><p> I put the shotgun in an Adidas bag and padded it out with four 
              pairs of tennis<br>
			  socks, not my style at all, but that was what I 
              was aiming for: If they think <br>
			  you're crude, go technical; if 
              they think you're technical, go crude. I'm a <br>
			  very technical 
              boy. So I decided to get as crude as possible. These days, <br>
			  though, 
              you have to be pretty technical before you can even aspire to <br>
			  crudeness.
            <p> --Johnny Mnemonic, by William Gibson</ul>
            <p> Now, if you can't tell what would be in <b>$f</b> for both 
              of the code fragments above, read on, and you'll see how an 
              unwitting mistake can leave someone with an unexpected police file.
            <p> The problem is a matter of context (in more ways than one). Perl's 
              operators are "context sensitive", in that the operator 
              can detect whether it is being used in a place looking for a scalar 
              rather than looking for a list, and return an appropriate result. 
              In this case, the backtick operator returns a differing result, 
              depending on whether it was invoked in a scalar context or a list 
              context.
            <p> To understand this, first look at how to detect context. Starting 
              with the basics, the right-hand side of an assignment to a scalar 
              variable must be a scalar value:
            <p> 
            <pre>
$a = ...
</pre>
            Whatever's on the right has to be a scalar value, because that's 
            the only thing that'll fit into a scalar variable.
            <p> Similarly, the right side of an assignment to an array can be 
              any list value:
            <p> 
            <pre>
@b = ...
</pre>
            Let's put some things in both places and see how results differ. 
            One that you are probably familar with is the <b>readline</b> operator, 
            spelled "less-than filehandle greater-than":
            <p> 
            <pre>
$a = &lt;STDIN&gt;
</pre>
            In this "scalar context", the <b>readline</b> operator returns 
            the next line to be read, or <b>undef</b> if an I/O error occurs (such 
            as at end-of-file).
            <p> However, the very same operator and punctuation in a "list 
              context" yields all the remaining lines until end-of-file is 
              reached, or an empty list if already at end of file:
            <p> 
            <pre>
@b = &lt;STDIN&gt;
</pre>
            Now, Larry Wall could have come up with two different operators for 
            these two similar operations, but by making the operator "context 
            sensitive", we get the savings of brainspace and keyboardspace. 
            Apparently, we humans are fairly good at grokking context, so why 
            not leverage off that a bit in the language?
            <p> Similarly, the matching operator in a scalar context returns a 
              success value:
            <p> 
            <pre>
$a = /(\w+) (\d+)/
</pre>
            which is true if the regular expression matches <b>$_</b>, and false 
            otherwise. If the result was true, we'd look in <b>$1</b> for 
            the word, and <b>$2</b> for the digit string. A shorter way to do 
            the same thing, though, is to use the same regular expression in a 
            list context:
            <p> 
            <pre>
@b = /(\w+) (\d+)/
</pre>
            And now, the regular expression match operator is not returning true/false, 
            but rather a list of two items (the two memories) or an empty list 
            if the match was not successful. Thus, <b>$b[0]</b> ends up with the 
            word, and <b>$b[1]</b> gets the digit-string.
            <p> In both of these operators, the scalar interpretation and the 
              list interpretation are related, but not by any predictable formula. 
              That's the way it is in general. You can't apply a general 
              rule, except that there are no rules. It's whatever Larry thought 
              would be the most practical and useful, and least surprising (well, 
              least surprising to Larry).
            <p> A few more examples to keep getting our feet progressively more 
              wet, and then we'll look some more at detecting context.
            <p> In a scalar context, <b>gmtime</b> returns a human-readable string 
              of the GMT time (defaulting to the current time, but optionally 
              converting any UNIX-epoch integer timestamp). But in a list context, 
              a nine-element list contains the various second, minute, hour (and 
              so on) pieces of the time for easy manipulation.
            <p> The <b>readdir</b> operator acts similarly to the <b>readline</b> 
              operator, returning the "next" name from a directory in 
              a scalar context, but all the remaining names in a list context.
            <p> And finally, a common operation is to use the name of an array 
              in both contexts. The "operator" of <b>@x</b> in a list 
              context yields the current elements of the <b>@x</b> array. However, 
              in a scalar context, the same "operator" yields the <i>number</i> 
              of elements in that same array (sometimes called the "length 
              of the array", but that can be confusing, so I'd rather 
              not use that here).
            <p> Please note on that last example that at no time does Perl first 
              extract all the elements in the scalar context, only to then somehow 
              "convert" it to a count. From the very beginning, Perl 
              knows that the <b>@x</b> operation is in a scalar context and performs 
              the "scalar" version of that operation.
            <p> Put another way, there is no way to "coerce" or "convert" 
              a list to a scalar, because <i>it can never happen</i>, in spite 
              of what some of the so-called commercial Perl documentation incorrectly 
              implies.
            <p> So, where does context occur? Everywhere! Let's introduce 
              a convention for a moment, to make it easy to talk. If a portion 
              of the expression is evaluated in scalar context, let's use 
              <b>SCALAR</b> to represent that:
            <p> 
            <pre>
$a = SCALAR;
</pre>
            And similarly, we'll show list context with <b>LIST</b>:
            <p> 
            <pre>
@x = LIST;
</pre>
            Let's look at some other common ones. Assigning to the element 
            of an array looks like this:
            <p> 
            <pre>
$w[SCALAR] = SCALAR;
</pre>
            Note that the subscripting expression is evaluated in a scalar context. 
            That means if we had an array name on the left, and a readline operation 
            on the right, we'll use scalar meanings for both:
            <p> 
            <pre>
$w[@x] = &lt;STDIN&gt;;
</pre>
            and assign a single line (or <b>undef</b>) to the element of <b>@w</b>, 
            indexed by the <i>number</i> of elements currently in <b>@x</b>. As 
            an aside, that's always evaluated before the assignment starts 
            to happen, so:
            <p> 
            <pre>
$w[@w] = &lt;STDIN&gt;;
</pre>
            adds the next line to the <i>end</i> of <b>@w</b>, although you'll 
            probably scare people by doing that.
            <p> Slices are in list context, even with only a single value for 
              an index:
            <p> 
            <pre>
@w[LIST] = LIST;
@w[3] = LIST;
</pre>
            Even hash slices work that way:
            <p> 
            <pre>
@h{LIST} = LIST;
</pre>
            Lists of scalars are always lists, even with only a single value (or 
            no values) on the left:
            <p> 
            <pre>
($a, $b, $c) = LIST;
($a) = LIST;
() = LIST;
</pre>
            And then we have the context provided by some common operations:
            <p> 
            <pre>
foreach (LIST) { ... }
if (SCALAR) { ... }
while (SCALAR) { ... }
@w = map { LIST } LIST;
@x = grep { SCALAR } LIST;
</pre>
            One useful rule is that anything being evaluated for a true/false 
            value is always a scalar, as shown in the <b>if</b>, <b>while</b>, 
            and <b>grep</b> items above.
            <p> Subroutines act "at a distance". The return value of 
              a subroutine is always evaluated in the context of the invocation 
              of the subroutine. Here's the basic form:
            <p> 
            <pre>
$a = &amp;fred(LIST); sub fred { ....; return SCALAR; }
@b = &amp;barney(LIST); sub barney { ....; return LIST; }
</pre>
            But what if I had used <b>fred</b> for both of those? Yes, the context 
            would pass through, and be different for different invocations! If 
            that makes your head spin, try not to do that for a while until you 
            fully understand it.
            <p> Speaking of subroutines: a common thing to do is to create a lexical 
              variable (often called a <b>my</b>-variable) to hold incoming subroutine 
              arguments or temporary values, as in:
            <p> 
            <pre>
sub marine {
  my ($a) = @_;
  ...
}
</pre>
            In this case, if the parentheses are included, we get list context 
            (imagine the <b>my</b> is not there). The many elements of <b>@_</b> 
            get returned, but only the first of which is stored into <b>$a</b> 
            (the remainder are ignored). 
            <p> However, the same expression without parentheses provides scalar 
              context to the right side:
            <p> 
            <pre>
my $a = @_;
</pre>
            which gets the <i>number of elements</i> in <b>$@</b> (the argument 
            list). There's not one that's "more right"; you 
            need to learn the difference, and use the appropriate one.
            <p> And that brings us full circle to the question I posted at the 
              beginning. What <i>is</i> the difference? Backquotes in a scalar 
              context generate the entire value as one string:
            <p> 
            <pre>
my $f = `fortune';
</pre>
            but the same expression in a list context generates a list of items 
            (one line per item, just like reading from a file), only the first 
            of which can fit into the scalar on the left:
            <p> 
            <pre>
my ($f) = `fortune';
</pre>
            So <b>$f</b> gets just the first line of the fortune, harmless for 
            those one-liners, but pretty devastating when a school official sees 
            that a student has apparently written:
            <ul><p> I put the shotgun in an Adidas bag and padded it out with four 
              pairs of tennis</ul>
            <p> on a Web page, in light of the tragic school shootings we hear 
              about these days. Nevermind that a simple reload of the page had 
              shown something different each time, or that this is really just 
              a random quote.
            <p> The police were called, the boy was questioned, and now has a 
              police file simply because he added some erroneous parentheses. 
              No charges resulted, but the embarrassment here is certainly unwelcome. 
              (I say this from personal experience -- my own ongoing saga 
              about misplaced understandings and resulting criminal charges can 
              be found at the archive located at:
            <p> 
            <pre>
http://www.lightlink.com/fors/
</pre>
            The embarrassment was also avoidable with a little more care in programming 
            and quality-assurance testing. So when you hack Perl, and you wonder 
            about context, get the text right or you may end up a con. Until next 
            time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for </i>WebTechniques<i> 
              and </i>Unix Review<i> magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
