<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: A Powerful Search Tool for ASCII Files</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a8.gif" width="200" height="174" align="right">A Powerful 
              Search Tool for ASCII Files</h1>
            <p> <i>Koos Pol</i>
            <p> Sometimes the main UNIX principle of combining small tools to 
              accomplish complex tasks just isn't enough. There are times 
              that you just need more. A striking example is the task of searching 
              through ASCII files. This can be any sort of file: C programs, error 
              logs, HTML files, etc. If you need to find a specific string, it 
              is usually sufficient to <b>grep</b> through the file and view the 
              results. Combined with <b>find</b>, you can get a long way. For 
              example, if you need to dig through your HTML files and find the 
              ones that have obsolete links to your old department, you may want 
              to run something like:
            <p> 
            <pre>
find /usr/local/web -name "*.html" -print |
while read F; do echo "**** $F";
grep http://intranet.mycompany.com/olddepartment $F; done
</pre>
            If your queries get a bit more complicated, you may still get by using 
            <b>egrep</b> instead of <b>grep</b>, but you will run out of steam 
            very soon. Besides that, you really don't want to learn all the 
            <b>egrep</b> options if they can be different on any operating system. 
            So what's the alternative? This is a perfect challenge for Perl 
            regular expressions: they can be extremely powerful and are the same 
            for all UNIXes that run Perl. So, what if we could rewrite the monster 
            above in something more attractive, such as:
            <p> 
            <pre>
find.pl http://intranet.mycompany.com/olddepartment "/usr/local/web/*.html"
</pre>
            We obviously need to combine <b>find</b> and Perl's regular expressions 
            in one script. If we can do that, we really have a powerful tool for 
            searching files. Here are a few more examples:
            <p> Look for all your HTML files with images on <i>remote</i> servers:
            <p> 
            <pre>
find.pl "&lt;img src=\"((http)|(ftp))" "/usr/local/web/*.html"
</pre>
            You inherited a bunch of Perl scripts and you want a quick view of 
            all the subroutines used:
            <p> 
            <pre>
find.pl -v "sub\s+\w+\s*{" "*.pl"
</pre>
            You are sifting through some C sources for a bug. It appears it has 
            to do with signals in combination with file operations:
            <p> 
            <pre>
find.pl "signal.*?FILE" "*.c"
</pre>
            This will produce a list of all lines containing the word "<b>signal</b>" 
            and a constant that has "<b>FILE</b>" in its name. However, 
            this list is too long to handle. If we ignore all the <b>FILE_SELECTION 
            </b>matches because they don't seem to be involved, it makes 
            the list much smaller:
            <p> 
            <pre>
-i "\$COPY\W.*\#.*status" "/usr/local/scripts/*.sh"
</pre>
            Note that I changed from a double quote to a single quote because 
            some shells really don't like the <b>!</b> on the command line 
            and I had to prevent the shell from interpretting it. 
            <p> You may have noticed that we need a few command switches to display 
              only the file name or to display the matching lines as well. We 
              may also want to search case-insensitive. With the <b>Getopt::Std</b> 
              package, this is very easy. It is even included in the standard 
              Perl distribution. So, we don't need to worry a lot about that.
            <p> 
            <pre>
my %opt;        # h=help, i=no case, v=view lines, l=line numbers
my $regex;      # what we're looking for
my $filemask;   # which files
my $dir;        # location
my $filename;   # name of file found
my $line;       # matching line
my $linenr;     # remembers the line number
my $nameonly;   # only print the filename
</pre>
            The start is easy. All we need is <b>find</b> to deliver us a list 
            of files. This list can then be read one-by-one:
            <p> 
            <pre>
open (LIST, "find \"$dir\" -name \"$filemask\" -print|") or die /"$!\n" ;
while (defined ($filename=&lt;LIST&gt;)) {
    chomp $filename;
    next if (-B $filename); # don't check binary files
    open (FILE, "&lt;$filename") or warn "Can't open $filename ($!)\n";
</pre>
            By now we have the first of our files opened for reading. We can scan 
            it to see if it matches our <b>regex</b>:
            <p> 
            <pre>
    while (defined($line = &lt;FILE&gt;)) {    # read as long as necessary
        if ($line =~ /$regex/) {         # we have a match
</pre>
            If we have reached this point, we have had a match. Now we can print 
            the filename and move on to the next file in the list. Let's 
            see what we have so far:
            <p> 
            <pre>
open (LIST, "find \"$dir\" -name \"$filemask\" -print|") or die /"$!\n" ;
while (defined ($filename=&lt;LIST&gt;)) {
    chomp $filename;
    next if (-B $filename); # don't check binary files
    open (FILE, "&lt;$filename") or warn "Can't open $filename ($!)\n";
    while (defined($line = &lt;FILE&gt;)) {    # read as long as necessary
        if ($line =~ /$regex/) {         # we have a match
                print $filename,"\n";
            last;
        }
    }
}
</pre>
            You may have noticed I cheated on the <b>$dir</b> and <b>$filemask</b>. 
            Where did those come from? We used regular expressions! If the given 
            command-line parameter contains a "<b>/</b>", we know that 
            a directory is involved. We just cut the string on the last "<b>/</b>". 
            Everything before the "<b>/</b>" is the directory, and everything 
            after it is the actual filemask:
            <p> 
            <pre>
$dir = '.';    # use current dir if we don't get one
if ($filemask =~ m|/|) {          # directory given
    $filemask =~ m|(^.*)/(.*$)|;  # split the string up...
    ($dir,$filemask) = ($1,$2);   # ...and save both parts
}
</pre>
            Of course, we want to search case-insensitive, as well. Perl accommodates 
            this easily by extending the regular expression syntax. The prefix 
            to make a <b>regex</b> case insensitive is (<b>?i</b>). We'll 
            stick that to the <b>regex</b> if there is a "<b>-i</b>" 
            on the command line:
            <p> 
            <pre>
$opt{i} &amp;&amp; ($regex = '(?i)'.$regex);  # case insensitive?
</pre>
            (You can find all the details on these extensions in the <b>perlre</b> 
            man pages). There is one more hurdle -- if we want to view the 
            matching lines or their line numbers, then we need to modify the logic 
            a bit. When we have a match on our <b>regex</b>, then we need to continue 
            reading the file for more matches until the whole file is read. Only 
            then can we skip to the next file. By the way, let's agree on 
            one thing -- if we want to see the line numbers, it is reasonable 
            to display the lines as well, isn't it? There is not much use 
            in displaying the line numbers only:
            <p> 
            <pre>
$nameonly = !(($opt{1} || $opt{v}); # only print the filename
</pre>
            Start at the point where we have a match on our <b>regex</b>. Instead 
            of just printing the filename, it becomes:
            <p> 
            <pre>
# read as long as necessary
NEXTLINE: while (defined($line = &lt;FILE&gt;)) {
    $linenr++;                        # remember this line number
    if ($line =~ /$regex/) {          # we have a match
</pre>
            If we didn't get a "<b>-v</b>" or "<b>-l</b>" 
            on the command line, it is sufficient to print the filename. There 
            is no need to read the rest of the file.
            <p> 
            <pre>
            if ($nameonly) {           # only print the filename
                print $filename,"\n";
                last NEXTLINE;
</pre>
            If we do have a "<b>-v</b>" or "<b>-l</b>" on 
            the command line, we print a filename that is more visible in the 
            clutter of long screens full of text. Of course, we print the line 
            and, if requested, the line number also.
            <p> 
            <pre>
            } else {
                print "**** $filename *****\n";
                print $opt{l} ? "$linenr: " : "", $line;
</pre>
            We now continue reading the rest of the file for other matches. If 
            we find them, we again print the lines or line numbers. We close off 
            by printing a new line as a separator between files:
            <p> 
            <pre>
                while (defined($line = &lt;FILE&gt;)) {  # read until EOF
                    $linenr++;
                    if ($line =~ /$regex/) {      # more matches
                        print $opt{l} ? "$linenr: " : "", $line;
                    }
                }
                print "\n";
            }
        }
    }
    close (FILE);
}
close (LIST)
</pre>
            Let's give the lost user some helpful messages in case the program 
            gets the wrong parameters. When we stuff that into the script and 
            clean up some things here and there, then this is the final result:
            <p> 
            <pre>
#! /usr/bin/perl -w
use strict;
use Getopt::Std;

my %opt;         # h=help, i=no case, v=view lines, l=line numbers
my $regex;       # what we're looking for
my $filemask;    # which files
my $dir;         # location
my $filename;    # name of file found
my $line;        # matching line
my $linenr;      # remembers the line number
my $nameonly;    # print only the filename

sub usage1 {
    $0 =~ s|^.*/||;  # strip of the path
    print  "Usage: $0 [-h] [-i] [-l] [-v] regex filemask\n";
    exit
}
sub usage2 {
    $0 =~ s|^.*/||;  # strip of the path
    print &lt;&lt;EOF;
Usage: Usage: $0 [-h] [-i] [-l] [-v] regex filemask

$0 is a powerful text grepper. It combines find and Perl regular expressions.

Options:
     -h  help screen
     -i  case insensitive matching
     -l  display line numbers on matching lines
     -v  display the lines matching 'regex'
EOF
    exit
}

getopts('hlvi',\%opt);  # process the command line switches
usage2() if (defined $opt{h});  # "HELP ME...!"
if (defined($ARGV[0]) &amp;&amp; defined($ARGV[1])) {
    ($regex, $filemask) = ($ARGV[0], $ARGV[1]);
} else {
    usage1();
}

usage1() if (! defined $regex) or (! defined $filemask);
$opt{v} = 1 if ($opt{l} == 1 );       # -l without -v is useless
$opt{i} &amp;&amp; ($regex = '(?i)'.$regex);  # case insensitive?

$dir = '.';    # use current dir if we don't get one
if ($filemask =~ m|/|) {          # directory given
    $filemask =~ m|(^.*)/(.*$)|;  # split the string up...
    ($dir,$filemask) = ($1,$2);   # ...and save both parts
}
open (LIST, "find \"$dir\" -name \"$filemask\" -print|") or die ;
while (defined ($filename=&lt;LIST&gt;)) {
    chomp $filename;
    open (FILE, "&lt;$filename") or die "Can't open $filename ($!)\n";
    $linenr=0;
    # read as long as necessary
    NEXTLINE: while (defined($line = &lt;FILE&gt;)) {
        $linenr++;                    # remember this line number
        if ($line =~ /$regex/) {      # we have a match
            if (!$opt{l}) {           # just print the filename
                print $filename,"\n";
                last NEXTLINE;
            } else {
                print "**** $filename *****\n";
                print $opt{l} ? "$linenr: " : "", $line;
                while (defined($line = &lt;FILE&gt;)) {  # read until EOF
                    $linenr++;
                    if ($line =~ /$regex/) {       # more matches
                        print $opt{l} ? "$linenr: " : "", $line;
                    }
                }
                print "\n";
            }
        }
    }
    close (FILE);
}
close (LIST);
</pre>
            <i>Koos Pol is a systems administrator with Compuware. He has a broad 
            experience in UNIX, Windows, and OS/2 systems. His main responsibilities 
            are providing tools and database support on various platforms to a 
            group of developers. He also provides command-line interfaces and 
            Web interfaces to database backends. He can be reached at: <b>koos_pol@nl.compuware.com</b>.</i>
        </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
