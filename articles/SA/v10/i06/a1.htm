<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: Dangers of SUID Shell Scripts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_s1.htm">Sidebar </a></span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a1.gif" width="200" height="174" align="right">Dangers 
              of SUID Shell Scripts</h1>
            <p> <i>Thomas Akin</i>
            <p> This article attempts to walk the fine line between full disclosure 
              and published exploits. The object of this article is to illustrate 
              how SUID programs work in order to help others writing their own 
              programs avoid some common mistakes. The examples I provide are 
              detailed enough to help you understand each danger, but I don't 
              promise that all will work exactly as demonstrated if you try to 
              use them maliciously.
            <p> Normally, UNIX scripts and programs run with the same permissions 
              as the user who executes them. This is why typical users can't 
              change their passwords by editing the <b>/etc/passwd</b> file; they 
              don't have the permission to write to <b>/etc/passwd</b>, and 
              no command they run will either. SUID programs, however, override 
              normal permissions and always run with the permissions of the program's 
              owner. Therefore, users can use the <b>/usr/bin/passwd</b> command 
              to change their passwords. The <b>/usr/bin/passwd</b> command is 
              SUID and is owned by root. It always runs with the same permissions 
              as root.
            <p> When new administrators discover SUID, they often see it as a 
              silver bullet that will solve all of their problems. They immediately 
              begin using SUID scripts and programs to make their jobs easier. 
              Unfortunately, they usually do it wrong.
            <p> When working with admins new to SUID, I often encounter scripts 
              like this:
            <p> 
            <pre>
% ls change-pass
-rwsr-x---   1 root     helpdesk       37 Feb 26 16:35 change-pass

% cat change-pass
#!/bin/csh -b
set user = $1
passwd $user
</pre>
            This simple script was set up to allow the help desk reset user passwords, 
            which is a common need. The script is SUID root and is only executable 
            by root or the members of the help desk group. This simple script 
            is also riddled with holes. I'm going to expose seven of these 
            holes and see whether they can be prevented.
            <p> The first problem occurs because this script is written in C-shell. 
              C-shell scripts are vulnerable to manipulating environment variables. 
              To take advantage of this, a hacker can compromise a help desk account 
              (fairly trivial) and give himself a root shell with:
            <p> 
            <pre>
% env TERM='`cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh`' change-pass
</pre>
            Lesson One -- Never use C-shell for SUID scripts.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
user=$1
passwd $user
</pre>
            Rewriting the script in Korn shell helps us avoid the C-shell problem, 
            but we still have problems. The script is vulnerable to a hacker manipulating 
            the PATH variable. Because the program uses relative path names, a 
            hacker can change his PATH to use his own program instead of the regular 
            <b>/usr/bin/passwd</b> program:
            <p> 
            <pre>
% export PATH='/tmp'
% echo "cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755/tmp/sh" &gt;/tmp/passwd
% ./change-pass
</pre>
            The PATH has been changed, and the <b>change-pass</b> command now 
            runs the <b>/tmp/passwd</b> program instead of the <b>/usr/bin/passwd</b> 
            program that we intended.
            <p> Lesson Two -- Always manually set the PATH and use absolute 
              path names.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
user=$1
/usr/bin/passwd $user
</pre>
            Now the PATH is secure and we are using absolute paths; but look closely 
            and see that this script can change any password, even root's! 
            We don't want the help desk (or a hacker) using our script to 
            change root's password.
            <p> Lesson Three -- Understand how the programs in your script 
              work.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
user=$1
rm /tmp/.user
echo "$user" &gt; /tmp/.user
isroot='/usr/bin/grep -c root /tmp/.user'
[ "$isroot" -gt 0 ] &amp;&amp; echo "You Can't change root's password!" &amp;&amp; exit
/usr/bin/passwd $user
</pre>
            Now this script will exit if someone enters root as the argument. 
            But what happens if a hacker runs the program and doesn't specify 
            an argument? The program will run the <b>passwd</b> command without 
            any arguments. When the <b>passwd</b> command doesn't receive 
            any arguments, it defaults to the current user. The problem is that 
            in a root-owned SUID script, the current user is always root. The 
            help desk (or hacker) can still change root's password by not 
            giving <b>change-pass</b> any arguments.
            <p> Lesson Three (revised) -- Understand how the programs in your 
              script work, especially how they handle arguments.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
user=$1
[ -z $user ] &amp;&amp; echo "Usage: change-pass username" &amp;&amp; exit
rm /tmp/.user
echo "$user" &gt; /tmp/.user
isroot='/usr/bin/grep -c root /tmp/.user'
[ "$isroot" -gt 0 ] &amp;&amp; echo "You Can't change root's password!" &amp;&amp; exit
/usr/bin/passwd $user
</pre>
            We no longer let anyone change root's password, but notice that 
            we are using a temporary file. This script deletes the temporary file, 
            recreates it, fills it with the username, and finally checks to see 
            whether the username is root.
            <p> What if a hacker could time things perfectly so that just after 
              the script removes the <b>/tmp/.user</b> file, but just before it 
              creates a new <b>/tmp/.user</b> file, he created an empty <b>/tmp/.user</b> 
              file? Would the hacker's file be overwritten? Possibly, but 
              possibly not, depending on how file clobbering was set up. If the 
              hacker's <b>/tmp/.user</b> is not overwritten, the hacker bypasses 
              the checks and fools the script into changing root's password. 
              To make this type of attack easier, a hacker could write a program 
              that will automatically watch for activity and replace the <b>/tmp/.user</b> 
              file.
            <p> Lesson Four -- Don't use temporary files! If you must 
              use temporary files, don't put them in a publicly writable 
              area.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
user=$1
[ -z $user ] &amp;&amp; echo "Usage: change-pass username" &amp;&amp; exit
[ "$user" = root ] &amp;&amp; echo "You can't change root's password!" &amp;&amp; exit
/usr/bin/passwd $user
</pre>
            There are no temporary files, but now a hacker can use the well-known 
            semi-colon trick. A semi-colon lets you put more than one command 
            on a single line. By taking advantage of this, a hacker could type:
            <p> 
            <pre>
% change-pass "user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh"
</pre>
            Our script would take this input and run:
            <p> 
            <pre>
/usr/bin/passwd user;cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh
</pre>
            Each of these commands will be executed in order providing a root 
            shell. To prevent problems like this, we need to make sure that any 
            data the user inputs doesn't contain a semi-colon or any of the 
            other shell meta-characters.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
user=${1##*[ \\$/;()|\&gt;\&lt;&amp;    ]}
[ -z $user ] &amp;&amp; echo "Usage: change-pass username" &amp;&amp; exit
[ "$user" = root ] &amp;&amp; "You can't change root's password!" &amp;&amp; exit
/usr/bin/passwd $user
</pre>
            We now remove any of the following characters from user input: a space, 
            \, $, /, ;, (, ), |, &gt;, &lt;, &amp;, and a tab. It is difficult 
            to see, but there is space after the open bracket ( [ ) and a tab 
            before the closing bracket ( ] ).
            <p> Lesson Five -- Distrust and check all user input, and strip 
              out any meta-characters.
            <p> Another common vulnerability is related to a shell's Internal 
              Field Separator (IFS). The IFS specifies which characters separate 
              commands. It is normally set to a space, tab, or new line. By changing 
              the IFS, a hacker can change what programs our script executes. 
              Our script calls the <b>/usr/bin/passwd</b> program. Changing the 
              IFS to "/" with
            <p> 
            <pre>
% export IFS='/'
</pre>
            causes the script to no longer run <b>/usr/bin/passwd</b>, but instead 
            run <b>usr bin passwd</b>. Now a hacker can create a script called 
            <b>usr</b> that generates a root shell, and our SUID script will run 
            that program for him.
            <p> Lesson Six -- Always manually set your IFS.
            <p> 
            <pre>
% cat change-pass
#!/bin/ksh
PATH='/bin:/usr/bin'
IFS=' '
user=${1##*[ \\$/;()|\&gt;\&lt;&amp;    ]}
[ -z $user ] &amp;&amp; echo "Usage: change-pass username" &amp;&amp; exit
[ "$user" = root ] &amp;&amp; "You can't change root's password!" &amp;&amp; exit
/usr/bin/passwd $user
</pre>
            Unfortunately, we are still not safe. There is an inherent race condition 
            in shell scripts that we can't fix with better programming. The 
            problem is that running a shell script is a two-step process. First, 
            the system starts up a new shell. Then, the new shell reads the contents 
            of the script and executes it. By timing things perfectly, a hacker 
            can exploit the delay between shell startup and when the script is 
            read and executed. By creating a link to the SUID script:
            <p> 
            <pre>
% cd /tmp
% ln -s change-pass rootme
</pre>
            running the link, and quickly replacing it with another file:
            <p> 
            <pre>
% ./rootme &amp;
% rm rootme &amp;&amp; \
  echo "cp /bin/sh /tmp/sh;chown root /tmp/sh;chmod 4755 /tmp/sh" &gt;&gt; rootme
</pre>
            it is possible to run anything as root. Done like this, there is only 
            a small chance the attack would succeed, but there are techniques 
            and programs to increase the chances of success and to automate the 
            procedure for you. There are only two defenses against this attack. 
            First, do not use SUID shell scripts. Second, some systems (e.g., 
            Solaris) prevent this race condition by passing an open file handle 
            to the new shell, thus avoiding the need to reopen and read the SUID 
            file.
            <p> Lesson Seven -- Don't use SUID shell scripts.
            <p> Even after all our work, it is nearly impossible to create safe 
              SUID shell scripts. (It is impossible on most systems.) Because 
              of these problems, some systems (e.g., Linux) won't honor SUID 
              on shell scripts. If you need the functionality of SUID, there are 
              three more secure options. A wrapper program written in C, a Perl 
              script, or a program like <b>sudo</b>. If you are new to secure 
              programming, I recommend either <b>sudo</b> or a Perl script. SUID 
              Perl scripts have built-in protection to prevent programmers from 
              making the mistakes addressed in this article. For more information 
              on secure SUID programming, see <i>Practical UNIX &amp; Internet 
              Security</i> (O'Reilly &amp; Associates), or visit: <b>http://seclab.cs.ucdavis.edu/~bishop/ 
              \ secprog.html</b>.
            <p> <i>Thomas Akin has worked in Information Security for almost a 
              decade and specializes in UNIX, Network, and Internet security. 
              In addition to the CISSP, he has four UNIX and three Networking 
              certifications. Most of his time is spent developing Information 
              Security training programs, teaching, and writing. He can be reached 
              at: <b>takin@crossrealm.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
