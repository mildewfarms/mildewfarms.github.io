<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: PICA Framework for Integrated Alarms (PIFIA)</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a18.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a18_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a18_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink">Sidebar</span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1>PICA Framework for Integrated Alarms (PIFIA)</h1>
            <p> As we have already said, the alarm manager is very basic. So, 
              the rest of this section is purely vaporware. The design floats 
              around the following concepts:
            <p> 
            <p> 1. Flexibility (did we mention it was important to us?)
            <p> 2. Simplicity
            <p> 
            <p> An alarm is a special type of object: it's seen simply as 
              one that we will normally want to execute. It needs some more attributes, 
              like priority, but, like the rest of the objects, it's installed 
              in the appropriate hosts, so we will always have the possibility 
              of executing any alarm by hand, even if the "central" 
              host is down or unreachable.
            <p> The actual call of each alarm is done via a special script called 
              <b>"&lt;alarmname&gt;-picacaller</b>". That way we can 
              use scripts not designed originally for PICA. The only thing you 
              need to define is the calling convention (one of the alarm's 
              extra attributes). In its definition, we can take advantage of the 
              many features of the preprocessor, such as variable substitution 
              or Perl on-the-fly code generation. It describes the parameters 
              the alarm will be called with. It will probably be a way to tell 
              the caller script to expect command-line arguments, but don't 
              count on it.
            <p> <b>What We Have Now (WWHN)</b>
            <p> Until we have a more elaborated alarm framework, we have developed 
              a very simple alarm management system. We have a "scheduler" 
              script that is run periodically from <b>crond</b>. This script runs 
              every alarm in a given priority, gets every alarm output, and generates 
              a report that is sent via email (or whatever you specify). Each 
              alarm has to manage its own variable persistency at this point.
            <p> For now, we have some basic alarm scripts to:
            <p> 
            <ul>
              <li> Check if a given RPM package is installed (also check version). 
              <li> Check if critical processes are running, and restart them if 
                they are down. 
              <li> Check file and directory permissions (and correct them). 
              <li> Check usage of filesystems and send an alarm if it's over 
                a given threshold.
            </ul>
            All these alarms send a notification if any of the conditions are 
            met. The alarms remember when they sent the last notification and 
            will send another only if a given "remind" period has passed. 
            Thus, we avoid flooding sys admins with notifications if a problem 
            persists. In the near future, all these notification and persistency 
            features will be integrated in the alarm framework, and will be transparent 
            to the alarm script.
            <p> Because the scheduler script only gets the output of the alarm 
              scripts, we can really run any program as an alarm. This is very 
              useful for sending reports of excellent external programs, such 
              as TripWire, PortSentry, intrusion detection systems, etc.
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
