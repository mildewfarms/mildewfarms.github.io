<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: Fuzzy Text Searches with agrep and afind</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a2.gif" width="200" height="174" align="right">Fuzzy 
              Text Searches with agrep and afind</h1>
            <p> <i>Alex Golomshtok and Yefim Nodelman</i>
            <p> In the past few years, the advents of storage and networking technology 
              and the Internet have contributed to a dramatic increase in the 
              amount of information accessible from the desktop. Users are now 
              faced with the problem of information overload -- it can be 
              difficult to locate the resources relevant to their needs. Under 
              these conditions, the ability to effectively search through vast 
              amounts of data becomes a primary requirement for any modern computing 
              environment.
            <p> Most of the popular programming languages now are equipped with 
              text-searching and pattern-matching facilities of varying degrees 
              of sophistication. Most common are the "all-or-none" search 
              facilities that incorporate either exact string matching or wildcard 
              and regular expression matching algorithms. When the precise search 
              string is known in advance, the exact string matching algorithms 
              usually offer the best performance, although the speed of the search 
              is proportional to the length of the search argument and the quality 
              of the matching algorithm. For very short search patterns, for instance, 
              with length of the pattern not exceeding four characters, the brute-force 
              matching algorithms are usually the fastest. For longer search patterns, 
              more sophisticated algorithms (e.g., Rabin-Karp Checksum [1] or 
              Boyer-Moore [2] Algorithm) are known to provide superior performance.
            <p> Regular expressions [3] are often used when an exact search pattern 
              is not known in advance. The power of regular expressions comes 
              from the ability to express a search pattern in generic terms, potentially 
              representing an infinite set of search arguments with a single expression. 
              A pattern like "[A-Za-z]+", for instance, will match any 
              string comprised by the upper and lower letters of the alphabet. 
              In addition to expressing the patterns using generic "meta-characters", 
              regular expression implementations often provide for anchors or 
              ability to control the exact position of a match within the search 
              text, and back-references that allow for easy text replacement and 
              substitution. Regular expressions are the natural solution to many 
              pattern-matching problems, such as looking for files and directories, 
              monitoring and extracting the information from log files, filtering 
              mail messages, etc.
            <p> Despite all their power, exact matching as well as regular expressions 
              are usually an all-or-nothing proposition. These algorithms make 
              it difficult, if not impossible, to account for typos, alternative 
              spellings, spelling errors, and errors originated from data transmission. 
              To solve these types of problems efficiently, you would have to 
              employ an alternative technique known as approximate matching. Approximate 
              string matching is fundamental to modern text processing and is 
              heavily used by such computer applications as word processors or 
              search and indexing engines.
            <p> Based on the needs of a particular application, the actual algorithm 
              behind the approximate matching mechanism may vary. Phonetic algorithms 
              such as soundex [4], for example, allow for matching strings that 
              sound similarly. A typical soundex implementation is simply an indexing 
              system that translates the strings into alphanumeric soundex codes 
              by ignoring the vowels and assigning "weights" to the 
              consonants. Since similar-sounding consonants are assigned the same 
              weight (e.g., "B", "P", "F", and "V" 
              are all assigned "1"), similar-sounding strings are likely 
              to produce equal soundex codes. Soundex is a very popular technology, 
              the most famous application of which was the initiative of the U.S. 
              Bureau of the Census to create an index for individuals listed in 
              the U.S. census records after 1880.
            <p> While being efficient and easy to implement, soundex is limited 
              due to its phonetic nature; different natural languages require 
              different implementations. The German soundex, for instance, usually 
              uses six character codes as opposed to four-character English codes, 
              and the consonants are grouped based on different rules.
            <p> Yet another family of string-matching algorithms, known as fuzzy 

              matching algorithms, takes an entirely different approach of calculating 
              various measures to assess the degree of proximity between strings. 
              There are two major measures that reflect the degree of proximity 
              -- k-mismatches and k-differences. The k-mismatches measure, 
              also known as Hamming distance, expresses the difference between 
              two strings by the number of characters that need to be changed 
              to obtain one from the other, where "k" is the maximum 
              number of differences allowed. For instance, "butter" 
              and "ladder" have a Humming distance of four as four characters 
              need to be replaced to obtain one from the other. The k-differences 
              measure or Levenshtein distance [5] indicates how many "edits" 
              (i.e., insertions, deletions, or substitutions) are necessary to 
              transform one string into the other, where "k" is the 
              maximum number of edits allowed. The Levenshtein distance between 
              "GUMBO" and "GAMBOL", for example, is two because 
              two edits are necessary.
            <p> There are numerous fuzzy matching algorithms that utilize k-mismatches 
              (such as Baeza-Yates-Gonnet [6]), and k-differences (such as Wu-Manber 
              [7]). These algorithms are efficient, versatile, and language independent, 
              which makes them suitable for many text-processing tasks.
            <p> <b>Perl and Fuzzy String Matching</b>
            <p> Perhaps one of the most exciting features of Perl is its unsurpassed 
              support for regular expressions that has been an intrinsic part 
              of the language since its inception. One thing that Perl lacks, 
              however, is built-in fuzzy or approximate text-matching facilities. 
              This niche is filled with Perl extension modules, thanks to the 
              enthusiasm of numerous Perl developers. Currently, the Comprehensive 
              Perl Archive Network (CPAN) (<b>http://www.perl.com/CPAN-local/CPAN.html</b>) 
              offers several modules that perform fuzzy string matching and calculate 
              similarities between strings.
            <p> One of these modules, <b>String::Approx</b> by Jarkko Hietaniemi 
              [8], allows for approximate string matching and substitutions using 
              Wu-Manber k-differences algorithm. This module performs fuzzy matching 
              based on a set of inputs that control such aspects of matching process 
              as maximum degree of proximity, case sensitivity, and more.
            <p> Yet another extension, <b>String::Similarity</b> by Mark Lehmann 
              [9], is designed to calculate the similarity index between two string 
              arguments. This module is based on an O(ND) Difference Algorithm 
              [10], which also calculates the k-differences measure for its input 
              arguments.
            <p> These modules bring the benefits of fuzzy matching to Perl users 
              while encapsulating the complexities of the underlying algorithms 
              and exposing enough functionality to solve nearly any text searching 
              and matching problem.
            <p> <b>afind</b>
            <p> To illustrate how approximate string matching may be applied to 
              everyday computing tasks, we developed several useful utilities 
              that extend the functionality of traditional UNIX programs such 
              as <b>find</b> and <b>grep</b>. The <b>afind</b> script recursively 
              descends the directory hierarchy searching for files, named such 
              that the degree of similarity between the file name and a search 
              string does not exceed a certain percentage. The similarity search 
              limit percentage is controlled via a command-line parameter. The 
              script outputs a list of files that match the criteria, sorted by 
              similarity index (most similar first).
            <p> The script takes several command line options. Option <b>-l</b> 
              specifies the similarity limit as a percentage -- a higher number 
              will force the script to output closer matches. Option <b>-h</b> 
              causes the script to print the usage string and exit immediately. 
              Finally, option <b>-v</b> forces verbose output, which can be very 
              useful for diagnostic purposes. The remaining two arguments are 
              the name of the directory to use as a starting point for the search 
              and a search pattern. The directory name can be omitted, in which 
              case the current working directory will be used as a starting point.
            <p> The following is the complete source code listing for the <b>afind</b> 
              script:
            <p> 
            <pre>
1  #!/usr/local/bin/perl
2
3  use Getopt::Std;
4  use File::Find;
5  use String::Similarity;
6   
7  $| = 1;
8   
9  $usage = qq(Usage: afind -lvh [directory] search_pattern\n);
10
11  die $usage
12    unless  getopts( qq(l:vh) );
13  die $usage
14     unless @ARGV;
15  die $usage
16     if $opt_h;
17
18  $limit   = ( $opt_l =~ /^(\d{1,2}|100)$/ ) ? ( $opt_l/100.0 ) : 0.75;
19  $dir     = @ARGV &gt; 1 ? shift : q(.);
20  $pattern = shift;
21
22  die qq(Directory $dir doesn't exist!\n)
23     unless -d $dir;
24
25  File::Find::find( \&amp;wanted, $dir );
26
27  foreach $file ( sort { $b-&gt;{ sindex } &lt;=&gt; $a-&gt;{ sindex } } @files ) {
28     printf "%.2f\t%s\n",$file-&gt;{ sindex }, $file-&gt;{ name };
29  }
30  exit( 0 );
31
32  sub wanted {
33     my $sindex   = similarity( $pattern, $_, $limit );
34     print qq(Processing $File::Find::name ( $sindex )...\n)
35        if $opt_v &amp;&amp; -t;
36     push( @files, { name =&gt; $File::Find::name, sindex =&gt; $sindex } )
37        if $sindex &gt;= $limit;
38  }
</pre>
            Lines 3 through 5 load several Perl extension modules, used by the 
            script <b>Getopt::Std</b> [11] that facilitates parsing the command-line 
            arguments, <b>File::Find</b> [12] that provides the framework for 
            traversing directory structures and, finally, <b>String::Similarity</b> 
            [9] that provides the functionality for fuzzy pattern matching. Line 
            7 sets a special variable <b>$|</b> to a non-zero value, which turns 
            off the IO buffering and forces the flush after every <b>print</b> 
            statement on currently selected output channel. Line 9 sets up the 
            variable that contains the usage string for <b>afind</b>; this string 
            is output by lines 11 through 16 in case the script is invoked with 
            wrong or insufficient command-line arguments. Lines 11 and 12 call 
            the <b>getopts</b> routine from the <b>Getopt::Std</b> module in order 
            to parse the command-line arguments. This routine takes a single argument 
            -- a string that contains all allowed command-line options, in 
            our case single character options <b>l</b>, <b>v</b>, and <b>h</b>. 
            The switches that take arguments, such as <b>l</b>, are followed by 
            colons. On completion, the <b>getopts</b> routine sets up variables 
            for every command-line argument. For <b>afind</b>, three option variables 
            will be set -- <b>$opt_v</b>, <b>$opt_h</b>, and <b>$opt_l</b>. 
            Because <b>$opt_v</b> and <b>$opt_h</b> do not take arguments, they 
            will be assigned a Boolean true or false value based on whether the 
            command-line switches for these options are supplied. <b>$opt_l</b>, 
            however, if set, will contain the value for the similarity limit parameter.
            <p> The <b>getopts</b> routine stops processing command-line arguments 
              as soon as it encounters an argument that does not look like a command-line 
              switch (i.e., does not have the dash as a first character). Therefore, 
              after <b>getopts</b> returns, the <b>@ARGV</b> array is expected 
              to contain at least one argument (the search string) because the 
              starting directory is optional. Lines 13 and 14 validate this condition 
              by checking the <b>@ARGV</b> array, which in scalar context evaluates 
              to the number of remaining command-line arguments. Finally, lines 
              15 and 16 print the "usage" string and exit the program 
              if the "help" option is set.
            <p> Lines 18 through 23 perform some rudimentary validity checking 
              of input arguments. Line 18 ensures that the similarity limit value, 
              if supplied, is a valid percentage (i.e., an integer between 0 and 
              100). If no valid value is supplied, the limit is set to a default 
              value of 75% (0.75). Line 19 checks if the starting directory command-line 
              parameter is present, otherwise the default starting point is set 
              to the current working directory. Line 20 simply obtains the value 
              of the command-line search pattern argument and lines 22 and 23 
              validate the starting directory.
            <p> Line 25 invokes the find routine from the <b>File::Find</b> module. 
              This routine traverses the directory hierarchy recursively starting 
              from the directory, identified by the second parameter, the <b>$dir</b> 
              variable. For every directory entry encountered by <b>File::Find</b>, 
              it invokes a user-supplied subroutine; reference to this subroutine 
              is passed to <b>File::Find</b> as a first parameter.
            <p> This subroutine, called <b>wanted</b> (see lines 32 through 38), 
              performs the bulk of the work. Every time it is called, <b>File::Find</b> 
              sets the default input variable <b>$_</b> to the base name of the 
              directory entry being processed. The subroutine calls "similarity" 
              function, which is part of the <b>String::Similarity</b> module, 
              to calculate the similarity index between the search pattern, contained 
              in the global variable <b>$pattern</b> and <b>$_</b>, which is set 
              to the current file or directory name. The similarity index (<b>$sindex</b>), 
              calculated by the similarity function, may take values between 0 
              and 1, where 1 means that two string arguments are identical. The 
              third parameter to the <b>similarity</b> function (<b>$limit</b>) 
              is optional; it sets the minimum similarity that the input string 
              arguments must satisfy.
            <p> Based on this parameter, the <b>similarity</b> function stops 
              analyzing its input arguments as soon as it determines that the 
              result is likely to fall below the limit. In this case, the returned 
              similarity index will be invalid but lower than the limit. Therefore, 
              setting the limit may significantly boost the performance of the 
              algorithm, especially when comparing long strings. Lines 34 and 
              35 of the <b>wanted</b> subroutine simply check whether the <b>verbose</b> 
              output is requested and output the full name of the current file 
              or directory, contained in the <b>$File::Find::name</b> variable, 
              along with the calculated similarity index. This feature comes handy 
              while debugging the script or checking the results of the similarity 
              search.
            <p> Finally, lines 36 and 37 save the name and the similarity index 
              of those files (and directories) that satisfy search criteria (i.e., 
              have the similarity index that exceeds the search limit). File names 
              and corresponding indexes are saved into an anonymous hash with 
              two keys, <b>name</b> and <b>sindex</b>, and the reference to this 
              hash is pushed into a global <b>@files</b> array.
            <p> Upon the completion of the <b>File::Find::find</b> function, the 
              script iterates through the global <b>@files</b> array that contains 
              one entry for every file or directory that satisfies the search 
              criteria. The array is sorted in descending order by the similarity 
              index using a user-defined anonymous sort subroutine [13]. Each 
              iteration of the <b>foreach</b> loop at line 27 assigns the reference 
              to a hash, containing the current file information to the variable 
              <b>$file</b>. Then, line 28 outputs the full name of the file along 
              with its similarity index. Running <b>afind</b> on the system with 
              the following command:
            <p> 
            <pre>
afind /etc sesytem
</pre>
            produces the following output:
            <p> 
            <pre>
0.77 /etc/system
</pre>
            While changing the similarity limit from the default of 75% to 50%:
            <p> 
            <pre>
afind -l50 /etc sesytem
</pre>
            yields the following:
            <p> 
            <pre>
0.77 /etc/system
0.62 /etc/setmnt
0.57 /etc/lp/Systems
0.57 /etc/uucp/Systems
</pre>
            <b>agrep</b> The <b>agrep</b> script is an example of another application 
            of an approximate string-matching technique to the well-known computing 
            problems. This script works in a way similar to a traditional UNIX 
            <b>grep</b> utility -- it searches input files for occurrences 
            of a particular string, specified by a command-line argument.
            <p> The script requires at least two command-line arguments -- 
              the search pattern and the name of the file to search for occurrences 
              of the pattern. Multiple file names or filenames with wildcards 
              may be supplied. Note that the <b>agrep</b> script relies on a shell 
              to perform the wildcard expansion; if the wildcard arguments are 
              quoted so that the expansion does not take place, the script will 
              process these arguments as exact file names.
            <p> The behavior of the script and the amount of output can be controlled 
              via three command-line switches: <b>-l</b>, which specifies the 
              similarity search limit similar to the parameter of the <b>afind</b> 
              script; <b>-i</b>, which causes the search algorithm to ignore the 
              case of the letters while comparing; and <b>-n</b>, which directs 
              the script to only output the names of the files that contain the 
              search pattern instead of printing the actual matches (similar to 
              the <b>-l</b> option of a traditional <b>grep</b>).
            <p> The following is a complete source code for the <b>agrep</b> script:
            <p> 
            <pre>
1  #!/usr/local/bin/perl
2
3  use Getopt::Std;
4  use String::Approx 'amatch';
5   
6  $| = 1;
7   
8  $usage = qq(Usage: agrep -linh search_pattern [files...]\n);
9   
10  die $usage
11    unless  getopts( qq(l:inh) );
12  die $usage
13     unless @ARGV;
14  die $usage
15     if $opt_h;
16
17  $limit   = ( $opt_l =~ /^(\d{1,2}|100)$/ ) ?
18     q($opt_l%) : q(15%);
19  $pattern = shift;
20
21  foreach $file ( @ARGV ) {
22     next if -B $file;
23     open( _F, $file ) || do {
24        print STDERR qq(Can't open file $file - $!.\n);
25        next;
26     };
27     @lines = &lt;_F&gt;;
28     foreach $match ( amatch( $pattern,
29        [ $limit, $opt_i &amp;&amp; qq(i) ], @lines ) ) {
30        print qq($file: ), $opt_n ? qq(\n) : $match;
31        last

32           if $opt_n;
33     }
34     close( _F );
35  }
</pre>
            Lines 3 through 15 are very similar to the corresponding code of the 
            <b>afind</b> script with one exception -- instead of loading the 
            <b>String::Similarity</b> [10] module, the agrep uses another Perl 
            extension for approximate string matching, <b>String::Approx</b> [9]. 
            This module exposes numerous functions, however, the agrep script 
            will only use one of them -- <b>amatch</b>.
            <p> The similarity search limit parameter, taken by the <b>String::Aprox</b> 
              module, is different from the corresponding parameter of the <b>String::Similarity</b> 
              module. It is expressed either as an absolute number of allowed 
              "edits" (i.e., k-differences measure) or a percentage 
              value of the number of allowed "edits" relative to the 
              length of the string (i.e., 10% means that every 10th character 
              may be an "edit"). For the sake of consistency, agrep 
              uses the percentage values to control the similarity limit with 
              the default set at 15%.
            <p> Line 21 of the script iterates over the <b>@ARGV</b> array that 
              contains the names of the files to be searched for the occurrences 
              of the pattern. Every iteration of the loop assigns the name of 
              the file from the <b>@ARGV</b> to the variable <b>$file</b>. Line 
              22 skips to the next iteration of the loop if the current file is 
              a binary; for the sake of simplicity we excluded the processing 
              for binary files from the script. Lines 23 through 27 open the current 
              file for read access and load the file data into a global array 
              <b>@lines</b>. Finally, the <b>foreach</b> loop at line 28 invokes 
              the <b>amatch</b> function of the <b>String::Approx</b> module, 
              collects the matches one-by-one into the <b>$match</b> variable, 
              and prints them out.
            <p> The <b>amatch</b> function is the simplest of the functionality, 
              exposed by the <b>String::Approx</b>. It takes a search pattern 
              as its first parameter, then a number of optional modifiers and 
              an optional array of input strings. The third parameter, the array 
              of inputs, may be omitted, in which case, the <b>amatch</b> will 
              assume that the default input <b>$_</b> contains the string to be 
              matched. In list context, this function returns all input lines 
              that match the pattern; in scalar context, it simply returns a true 
              or false value based on whether any of the inputs match the pattern.
            <p> The behavior of <b>amatch</b> can be controlled via a number of 
              optional modifiers, passed as a second parameter. One of the modifiers 
              is the similarity limit, discussed previously. As mentioned before, 
              the limit here is a total number of "edits" -- insertions, 
              deletions, and substitutions allowed in the search. This, however, 
              can be controlled at a much finer level by supplying explicit numbers 
              for each type of "edit". For instance, "I10%", 
              "D20%", and "S5%" will allow for 10% of insertions, 
              20% of deletions, and 5% of substitutions, respectively. Another 
              modifier, used by <b>agrep</b>, is the case-sensitivity modifier 
              <b>i</b>, which turns off case-sensitive matching. Other modifiers 
              are available. For instance, the exact positions within the input 
              argument where the search should begin and end can be controlled 
              via <b>initial_position</b> and <b>final_position</b> modifiers. 
              Running <b>agrep</b> on the system:
            <p> 
            <pre>
agrep sysshm /etc/system
</pre>
            produces the following output:
            <p> 
            <pre>
/etc/system: *                exclude: sys/shmsys
/etc/system: set shmsys:shminfo_shmmax=1610612736
/etc/system: forceload: sys/shmsys
</pre>
            Bumping up the similarity limit from the default 15% to 25%:
            <p> 
            <pre>
agrep -l25 sysshm /etc/system
</pre>
            will yield the following:
            <p> 
            <pre>
/etc/system: *ident   "@(#)system    1.15    92/11/14 SMI" /* SV
/etc/system: * root device and root filesystem configuratio
/etc/system: *    the root filesystem) rather than at first
/etc/system: set shmsys:shminfo_shmmax=1610612736
/etc/system: forceload: sys/msgsys
/etc/system: forceload: sys/shmsys
/etc/system: forceload: sys/semsys
...
</pre>
            The output of <b>agrep</b> is not sorted by relevance or similarity 
            index simply because the <b>amatch</b> function does not return the 
            calculated edit distance. However, another function of the <b>String::Approx</b> 
            module, <b>adist</b>, is specifically designed to calculate and return 
            the edit distance between the input string and the pattern. Also, 
            function <b>aslice</b> may be directed to return the calculated edit 
            distance via optional modifier <b>minimal_distance</b>. This function 
            is especially useful as it provides the starting position and the 
            length of the match.
            <p> <b>Summary</b>
            <p> Approximate string matching is an extremely powerful technique, 
              quickly gaining popularity within the modern software development 
              community. More and more often we see the new software products, 
              reaping the benefits of those fuzzy searching algorithms, which 
              up until a few years ago were thought of as a subject for a Ph.D. 
              in Computer Science rather than something that had any practical 
              application. Languages like Perl make these algorithms easy to use, 
              which leaves no excuse for not exploring the power of the approximate 
              text matching capabilities.
            <p> We hope that this article stimulated your interest, and we encourage 
              you to become familiar with Perl text-processing extension modules. 
              Apart from the two modules discussed here, CPAN offers some more: 
              stemming and inflection modules, such as <b>Text::Stem</b> and <b>Lingua::EN::Inflect</b>, 
              which may be very useful for spell checking applications; and <b>Text::Soundex</b>, 
              which encapsulates the soundex algorithm implementation and others. 
              Altogether, these modules will enable you to produce powerful and 
              user-friendly software applications.
            <p> <b>References</b>
            <p> 1. R. Karp and M. Rabin. Efficient randomized pattern-matching 
              algorithms. <i>IBM Journal of Research and Development</i>, 31:249-260, 
              1987.
            <p> 2. R. Boyer and J. Moore. A fast string-searching algorithm. <i>Communications 
              of the ACM</i>, 20:762-772, 1977.
            <p> 3. J. Friedl and A. Oram. <i>Mastering Regular Expressions: Powerful 
              Techniques for Perl and Other Tools</i>. O'Reilly &amp; Associates. 
              1997.
            <p> 4. D. Knuth. <i>The Art of Computer Programming: Sorting and Searching</i>, 
              Vol. 3. Addison-Wesley, 1998.
            <p> 5. V. I. Levenshtein. Binary codes capable of correcting deletions, 
              insertions and reversals. <i>Sov. Phys. Dokl.</i>, 6:707-710, 1966.
            <p> 6. G. Gonnet and R. Baeza-Yates. <i>Handbook of Algorithms and 
              Data Structures</i>. Addison-Wesley, 1991.
            <p> 7. S. Wu and U. Manber. Fast text searching allowing errors. <i>Communications 
              of the ACM</i>, 35:83-91, 1992.
            <p> 8. J. Hietaniemi. <b>String::Approx</b>, Latest Version 3.15, 
              Feb, 2000. CPAN directory JHI.
            <p> 9. M. Lehmann. <b>String::Similarity</b>, Latest Version 0.02, 
              Nov 2000. CPAN directory MLEHMANN.
            <p> 10. E. Myers. An O(ND) Difference Algorithm and its Variations. 
              <i>Algorithmica</i>, Vol 1. No. 2. 251-266, 1986.
            <p> 11. G.Sarathy. <b>Getopt::Std</b>, Latest Version - Perl 5.6.1, 
              Jan 2001. CPAN directory GSAR.
            <p> 12. G.Sarathy. <b>File::Find</b>, Latest Version - Perl 5.6.1, 
              Nov 2000. CPAN directory GSAR.
            <p> 13. L. Wall, T. Christiansen, R. L. Schwartz. <i>Programming Perl</i>. 
              O'Reilly &amp; Associates, 1996.
            <p> <i>Alexander Golomshtok is a professional consultant who, for 
              the last decade, has been hanging around downtown New York developing 
              large-scale software systems and infrastructure solutions for Wall 
              Street firms. He can be reached at: <b>golomshtok_alexander@jpmorgan.com</b>.</i>
            <p><i> Yefim Nodelman is a seasoned systems administrator with seven 
              years of professional experience in supporting UNIX and Windows 
              NT ystems. He can be reached at: <b>nodelman_yefim@jpmorgan.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
