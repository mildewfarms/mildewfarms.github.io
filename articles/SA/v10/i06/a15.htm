<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i06: Remote System Logs via SSH</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/jun2001.tar"><b class=codeListing>jun2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1>Remote System Logs via SSH</h1>
            <p> David Beecher
            <p> You may work for a company with sites distributed over multiple 
              geographic locations or for a company with multiple computer centers 
              on a single campus. In either case, you probably have too many systems 
              to review the individual logs on each one. Also, if you have custom 
              parsing and monitoring scripts written, every time you make a change 
              you must roll it out to perhaps dozens of servers -- cumbersome 
              at best. If you have not set up central logging because you are 
              afraid of exposing sensitive log information over the public Internet 
              or your WAN, perhaps it is time to encrypt your logs in transit.
            <p> In this article, I will first show you how to configure remote 
              logging. Then I will show how to transport your <b>syslog</b> and 
              <b>sysklog</b> information over an encrypted link to a remote logging 
              host where all your scripts and monitoring tools may reside.
            <p> <b>Tools Needed for This Job</b>
            <p> The SSH (SecureShell) tool (version 2) can make these things happen 
              for you. SSH allows you to connect to a remote server with an encrypted 
              tunnel over a single port and pass TCP traffic. Most often, SSH 
              is used as a replacement for <b>telnet</b>. It can be used to pass 
              other TCP traffic. I chose SSH2 because it solves many of the security 
              issues currently related to SSH1 and as with most security tools, 
              the latest versions are the best. SSH may be obtained from:
            <p> 
            <pre>
http://www.ssh.org
</pre>
            Netcat is one of those all-purpose tools that helps you do all kinds 
            of things. Because the <b>syslog</b> uses UDP when logging to a central 
            logging server and SSH is a TCP-oriented tool, we'll use Netcat 
            to be the "glue" in our solution. An excellent reference 
            can be found at:
            <p> 
            <pre>
http://www.l0pht.com/~weld/netcat/index.html
</pre>
            Use the man pages! Familiarize yourself with your <b>syslogd</b> and 
            <b>syslog.conf</b> information.
            <p> <b>Assumptions</b>
            <p> I have made some assumptions here that match my own setup. Those 
              are:
            <p> 
            <ul>
              <li> You need root access to two or more UNIX workstations or servers. 
              <li> For the purpose of this article, both of the servers or workstations 
                you use must be running UNIX. 
              <li> You must have SSH2 client and server installed on both your 
                office workstation and your home workstation. The SSHD server 
                daemon must be running and listening for a connection (mine is 
                on the default port 22) on the system you will be using as your 
                central logging host. 
              <li> You have Netcat downloaded, configured, built, and installed. 
              <li> You know how to use SSH to do port forwarding (forwards data 
                sent to a specific port over an encrypted tunnel); see the January 
                2001 issue of <i>Sys Admin</i>, p. 45.
            </ul>
            <b>Basic Remote Logging</b>
            <p> If you already know how to set up remote logging, you may want 
              to skip to the next section. This section will help you determine 
              whether you can get remote logging working between your two test 
              workstations. The next section will undo some of the changes you 
              make in this section. Before you make any changes here, make backup 
              copies of any files I ask you to change.
            <p> Basic remote logging can be done on two servers located in separate 
              buildings, or on two workstations that are sitting side by side 
              (my preference for testing). We'll call those workstations/servers 
              "myworkstation" and "myloghost" for the purpose 
              of this article. You will need to use the valid names in your DNS 
              or <b>/etc/host</b> file. Please make backup copies of any files 
              you modify as we will be undoing the next few changes when we move 
              into encrypting your log data before it gets transmitted to your 
              loghost.
            <p> First, let's establish the basis that you can do remote logging 
              at all. You will need to check the man page on your <b>syslogd</b>. 
              Some versions of <b>syslogd</b> listen to network connections by 
              default. Others do not. I am using a Linux workstation for my central 
              loghost. Normally my <b>syslogd</b> gets run at startup as:
            <p> 
            <pre>
syslogd -m 0     (that's a zero at the end)
</pre>
            It does not, by default, listen for network connections. To do that, 
            I killed my <b>syslogd</b> and started it with (as root):
            <p> 
            <pre>
syslogd -r -m 0
</pre>
            If you keep this configuration, be sure to remember to update your 
            startup files.
            <p> Now we need to go to your other workstation and tell it to send 
              logging messages to your newly created central loghost. You will 
              need to edit <b>/etc/syslog.conf</b> as root (make a backup copy 
              first). Add the following line to the end of the file:
            <p> 
            <pre>
*.*     @myloghost
</pre>
            Save the file and exit. The reason we added this line and did not 
            change anything else is to demonstrate that you can send logging information 
            to multiple destinations (e.g., the local logfile, <b>/dev/console</b>, 
            email, and a separate loghost if you want, all at the same time). 
            In this case, your system will continue to log information normally, 
            but it will also send a copy of every log event to "myloghost".
            <p> To make this work, restart your <b>syslogd</b> daemon on both 
              workstations. You can do this by sending it the HANGUP signal:
            <p> 
            <pre>
kill -HUP &lt;process-id-of-your-syslogd-program&gt;
</pre>
            Begin tailing the default message log (in my case <b>/var/adm/messages</b>) 
            on your "myloghost" and try doing things on your "myworkstation" 
            that cause log messages to appear (e.g., sending email, logging in 
            or out, <b>ftp</b>, etc.). You should see the messages appear in your 
            "myloghost" logfiles:
            <p> 
            <pre>
tail -f /var/adm/messages
</pre>
            Don't go any further until you get the above working. Read your 
            man pages. They are very good and having this working will give you 
            the confidence to take the next step of encrypting the transmission 
            of these log messages.
            <p> <b>Protecting Your Logging Data in Transit</b>
            <p> This section will undo some of the changes you made in the previous 
              section. 
            <p> 1. We need to do things a little differently to make this work. 
              For that reason, we need to undo the changes that we made above. 
              Restore your original <b>/etc/syslog.conf</b> on your "myworkstation" 
              and HUP your <b>syslogd</b> on that machine to restore things to 
              normal.
            <p> 2. On your "myloghost", you also need to tell <b>syslogd</b> 
              NOT to listen to network connections. If you had to make a change 
              above and add the <b>-r</b> option to <b>syslogd</b>, kill it and 
              rerun it without that option. If your <b>syslogd</b> listens to 
              the network by default, check the man page and use the option to 
              turn off the behavior that is described there.
            <p> 3. Establish a SSH tunnel between your two workstations on port 
              32000. Let's start with "myloghost":
            <p> 
            <pre>
ssh -R 32000:localhost:32000 -l jdoe myworkstation
</pre>
            The above command means: using SSH, map a port (32000) on the remote 
            server (myworkstation) to my local machine (myloghost) port (32000), 
            and login to the remote server (myworkstation...) as user "jdoe". 
            If your username on your workstation at work is the same as your workstation 
            at home, you can eliminate the "<b>-l jdoe</b>" portion 
            of the command.
            <p> I picked port 32000 because it was not listed as a Well-Known-Service 
              port (<b>cat</b> the file <b>/etc/services</b>). It is a "High 
              Port" (above 1024), so you don't have to be root to attach 
              to it and, most importantly, neither of my workstations were bound 
              to it. You could use other port numbers (e.g., 9999, etc.).
            <p> 4. As SSH connects to your "myworkstation", you will 
              be asked for a password. This is the password on your "myworkstation" 
              for the user "jdoe"; enter it.
            <p> 5. If you have a problem and cannot get connected, simplify the 
              command and just see if you can SSH to your "myworkstation" 
              machine from your "myloghost" machine:
            <p> 
            <pre>
ssh -l jdoe myworkstation
</pre>
            6. If that doesn't work, see if you can <b>traceroute</b> or 
            <b>ping</b> to your "myworkstation". If you can't, 
            your "myworkstation" may have been disconnected. Test whether 
            you can <b>telnet</b> to port 22 on your "myworkstation" 
            (<b>telnet 'myworkstation'</b>). It should come up with an SSH notice 
            after it connects. If that doesn't work, see if you can connect 
            to any port you know is active on "myworkstation". If none 
            of those work, something is amiss and you need to scrutinize your 
            network or the setup of "myworkstation".
            <p> 7. If you got this far, I'll assume you got connected and 
              logged in. You are now talking to your "myworkstation" 
              over an encrypted channel. Congratulations.
            <p> 8. Review the messages that were sent while you were getting connected. 
              If you don't see any messages saying "Remote port forwarding 
              failed" then you're probably OK. If you do, it probably 
              indicates that the port you tried to remote forward (in my example, 
              32000) is being used by somebody else. Exit from your workstation 
              and try again with a port number of something like 32500. You can 
              use any high port that is not in use by an existing daemon or other 
              service.
            <p> <b>Wrapping UDP</b>
            <p> 9. Now use Netcat to pipe UDP (used by <b>syslogd</b>) into a 
              TCP stream (used by SSH). On the client ("myworkstation") 
              side, make sure Netcat is in your PATH and run it as follows:
            <p> 
            <pre>
nc -l -u -p syslog | nc localhost 32000
</pre>
            10. On the "myloghost", run Netcat as follows:
            <p> 
            <pre>
nc -l -p 32000 | nc localhost -u syslog
</pre>
            Data logged to <b>syslog</b> on the "myworkstation" will 
            be transmitted over an encrypted tunnel to "myloghost" and 
            sent to the <b>syslog</b> facility. It is best to keep your "myloghost" 
            behind a firewall to prevent DoS-type attacks.
            <p> <b>Conclusion</b>
            <p> This is a way of getting your logs passed in a secure tunnel if 
              you really need to do so. It does not have any of the finess that 
              generally indicates a good solution. If you have more than a handful 
              of hosts that you need to deal with, you'll probably want to 
              use a command-line tool like <b>crypt</b>. I chose <b>ssh</b> for 
              this article because it is available to everyone and is quite secure. 
              The <b>crypt</b> utility is not necessarily available outside North 
              America. If you know of a better way of doing this, please let me 
              know.
            <p> Again, I recommend reading the <b>syslog </b>man pages thoroughly; 
              they are an invaluable tool. Also, the SSH Web site is an excellent 
              source for information on SSH (<b>http://www.ssh.org</b>). The software 
              provided there by SSH Communications Security, Inc. is free for 
              evaluation purposes (please review their license agreement before 
              using). You should license it if you are using it in a commercial 
              setting. Also see: <b>http://www.freessh.org</b>.
            <p> Netcat is a very powerful tool that I have not thoroughly explored 
              here. Read the Netcat man page and check out the information at:
            <p> 
            <pre>
http://www.l0pht.com/~weld/netcat/index.html
</pre>
            Use Netcat wisely. As with most powerful UNIX tools, it has a dark 
            side and must be used with caution. However, you may find that it 
            can solve many problems.
            <p> <i>David Beecher is a Sr. UNIX System Administrator with more 
              than 12 years of experience. He has a background in analog and digital 
              electronics, robotic control systems, and many years of programming 
              in assembly language on a variety of platforms. Dave currently works 
              for a technical services company and is on assignment at a well-known 
              Internet destination. He lives in Castle Rock, Colorado. He can 
              be reached via email at: <b>DAVEUSW1@QWEST.net</b>.</i>

          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
