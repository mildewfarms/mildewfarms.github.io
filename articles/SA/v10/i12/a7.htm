<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i12: NFS Part II, Usage</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_s1.htm">Sidebar </a></span></td>
		<td><a href="../../../../source/SA/2001/dec2001.tar"><b class=codeListing>dec2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/netadmin.gif" width="150" height="150" align="right">NFS 
              Part II, Usage </h1>
            <p> Ron McCarty
            <p> In Part I (<i>Sys Admin</i>, October 2001, <b>http://www.sysadminmag.com/articles/2001/0110/0110h/0110h.htm</b>), 
              I covered NFS at a high level. This month I will cover the NFS protocol 
              and daemons in more detail, including examples using Linux Red Hat 
              6.2 and Solaris 2.6.
            <p> <b>NFS Penguin Style</b>
            <p> Although the Linux coverage here is based upon Red Hat 6.2, the 
              kernel version is 2.4.9. Red Hat 6.2 shipped with version 0.1.6 
              of the nfs-utils package, but the system was also upgraded to nfs-utils 
              version 0.3.1, the latest available at the time the column was written. 
              Version 0.3.1 is available at:
            <p> 
            <pre>
http://sourceforge.net/project/shownotes.php?group_id=14&amp;release_id=24211
</pre>
            The nfs-utils contains the NFS executables exportfs, lockd, mountd, 
            nfsd, nfsstat, nhfsstone, rquotad, showmount, and statd.
            <p> Unfortunately for Linux administrators, the NFS support has at 
              times been downright confusing as support for particular features 
              and versions have been added with different kernel and nfs-utils 
              packages. Thankfully, things are getting better for Linux administrators. 
              Current distributions include the latest kernel support and nfs-utils. 
              For older production systems, the NFS-HOWTO section 2.4 documents 
              exactly what is available with each combination, and the nfs-utils 
              authors are keeping the package backward compatible with earlier 
              versions but providing "...lots of security and bug fixes."
            <p> NFS support must be activated when the kernel is compiled. Additionally, 
              NFS version 3 support must also be added to the kernel if it's needed.
            <p> For distributions supporting linuxconf, NFS services for both 
              servers and clients are easily configured. Although linuxconf gives 
              a quick way to set up NFS, what files are being created or edited 
              are much more important for the administrator to understand when 
              trouble arises and the NFS configuration needs to be analyzed. Linux 
              NFS' architecture is loosely based upon the BSD version, so the 
              support files and programs are easy to find for administrators that 
              have used the BSD or Sun OS 2.5 or earlier NFS versions.
            <p> The <b>/etc/exports</b> file, like BSD's earlier version of <b>/etc/exports/</b>, 
              defines what file systems are allowed to be accessed by NFS clients. 
              Additionally, it provides extra management and security features 
              that give necessary granular control for the administrator. The 
              file is a text file made up on entries, blank lines, or comment 
              lines that start with the pound (#) symbol.
            <p> Let's assume we would like to allow clients read-only access to 
              the <b>/home</b> directory on Lefty. The following entry would be 
              created in <b>/etc/exports</b>:
            <p> 
            <pre>
/home (ro)
</pre>
            At this point, we need to tell the system which directories can be 
            exported and provided access by the mount daemon, <b>rpc.mountd</b>:
            <p> 
            <pre>
[root@lefty /root]# exportfs -r
exportfs: No host name given with /home (ro), suggest *(ro) to avoid warning
[root@lefty /root]#
</pre>
            When run, The <b>exportfs</b> command warns that the <b>/etc/exports</b> 
            does not limit access to a particular host and creates the appropriate 
            entry from the <b>/etc/exports</b> in the <b>/var/lib/nfs/etab</b>, 
            which can be viewed with:
            <p> 
            <pre>
[root@lefty /root]# cat /var/lib/nfs/etab
/home   (ro,async,wdelay,hide,secure,root_squash,no_all_squash,subtree_check,sec
ure_locks,mapping=identity,anonuid=-2,anongid=-2)
</pre>
            The other information listed in the <b>etab</b> includes the defaults 
            used by NFS. The specifics will be covered shortly. To give access 
            to the <b>/home</b> directory, the NFS-related daemons need to be 
            started:
            <p> 
            <pre>
[root@lefty /root]# portmap
[root@lefty /root]# rpc.mountd
[root@lefty /root]# rpc.nfsd
[root@lefty /root]# rpc.statd
[root@lefty /root]# rpc.rquotad
</pre>
            At any point after starting the mount daemon (<b>rpc.mountd</b>), 
            the specific files that are available for output can be viewed by 
            looking at the <b>/proc/fs/nfs/exports</b> file:
            <p> 
            <pre>
[root@lefty nfs]# cat /proc/fs/nfs/exports
# Version 1.0
# Path Client(Flags) # IPs
/home   192.168.1.252(ro,root_squash,async,wdelay) # 192.168.1.252
[root@lefty nfs]#
</pre>
            The <b>showmount</b> command with the <b>-e</b> parameter can be used 
            to view the same information:
            <p> 
            <pre>
[root@lefty /root]# showmount -e
Export list for lefty:
/home (everyone)
[root@lefty /root]#
</pre>
            Although we are jumping ahead here, the <b>showmount</b> can also 
            be used to determine which systems have mounted file systems, or stated 
            otherwise, which hosts are NFS clients for the system where the <b>showmount</b> 
            command is running. <b>showmount -a</b> will show all client mounts:
            <p> 
            <pre>
[root@lefty /root]# showmount -a
All mount points on lefty:
192.168.1.252:/home
[root@lefty /root]#
</pre>
            As mentioned in Part I, most implementations of NFS support the various 
            versions of NFS. The Linux implementation allows you to limit which 
            versions of NFS to run by excluding specific versions using the <b>-N</b> 
            with the mount daemon. For example, to only run NFS version 3, use:
            <p> 
            <pre>
[root@lefty /root]# rpc.mountd -N 1 -N 2
</pre>
            Purists may point out that the Linux version of the NFS daemon (<b>rpc.nfsd</b>) 
            is listening for version 1 and 2 packets; however, the same effect 
            is gained as if the protocol was not supported by the NFS daemon, 
            albeit not as elegant as it should be. This will hopefully be corrected 
            in a future version, with tighter integration of protocol versions 
            throughout the package.
            <p> <b>Swimming with Penguins</b>
            <p> Accessing the exported NFS file systems from the Linux system 
              "Lefty" configured above will depend on the client operating systems. 
              Most UNIX-like operating systems will either use similar settings 
              as the original Sun OS and BSD or the newer Solaris style. Because 
              I am covering both Linux and Solaris in this article, the client 
              configuration of Solaris 2.6 will now be covered with the intent 
              of connecting to the Linux NFS covered above.
            <p> Due largely to its inheritance, configuring Solaris 2.6 to act 
              as an NFS client is straightforward and requires only one command 
              as root:
            <p> 
            <pre>
# mount -F nfs 192.168.1.254:/home /tmp/tmp2
</pre>
            Assuming a successful mount, the <b>mount</b> command will have an 
            entry for the mount:
            <p> 
            <pre>
# mount
/ on /dev/dsk/c0t0d0s0 read/write/setuid/largefiles on Mon Sep  3 10:17:56 \
   2001
...
...
/tmp/tmp2 on 192.168.1.254:/home read/write/remote on Mon Sep  3 23:19:25 \
   2001
</pre>
            Let's examine the tcpdump output on Lefty after the user runs <b>ls 
            /tmp/tmp2</b> on Sunny:
            <p> 
            <pre>
[root@lefty rc2.d]# tcpdump host lefty and host sunny -s512
06:07:43.490583 sunny.2191983953 &gt; lefty.mcwrite.n.nfs: 128 getattr   \
   fh Unknown/1 (DF)
06:07:43.490678 lefty.mcwrite.n.nfs &gt; sunny.2191983953: reply ok 112   \
   getattr DIR 40755 ids 0/0 sz 0x000001000  (DF)
06:07:43.491397 sunny.2191983954 &gt; lefty.mcwrite.n.nfs: 132 access   \
   fh Unknown/10001 (DF)
06:07:43.491463 lefty.mcwrite.n.nfs &gt; sunny.2191983954: reply ok 120   
   access c0001 (DF)
06:07:43.492296 sunny.2191983955 &gt; lefty.mcwrite.n.nfs: 152 readdirplus   \
   fh 0,1/16777984 1048 bytes @ 0x000000000 (DF)
06:07:43.492417 lefty.mcwrite.n.nfs &gt; sunny.2191983955: reply ok 1000   \
   readdirplus (DF)
</pre>
            We see that Sunny asks for a file handle (<b>fh</b>) for the <b>ls</b> 
            command and Lefty replies with an <b>OK</b> and returns a directory 
            structure. Sunny then checks permissions within the directory (<b>132 
            access fh</b>), and Lefty replies with the permissions. Sunny then 
            uses the <b>readdirplus</b> to read the complete directory. These 
            remote procedure calls are covered in RFC 1813 and were summarized 
            in Part I of this article:
            <p> 
            <pre>
http://www.samag.com/articles/2001/0110/0110h/0110h.htm
</pre>
            Although the command sequence is very simple to access remote file 
            systems, there are numerous things that can keep the mount from functioning 
            correctly. Before mounting the directory, the mount point must exist 
            or be created with a <b>mkdir</b> command. Lack of a local directory 
            for the mount is typically the only thing that goes wrong on the client 
            side. Most NFS integration problems are associated with a mismatch 
            between the client and server or incomplete configuration on the server.
            <p> The easiest way to troubleshoot the server problems is from the 
              server; however, sometimes this is not possible when someone else 
              administers the server. A quick way to ensure the server has the 
              appropriate services configured is to use the <b>rpcinfo</b> command 
              with the <b>-p</b> parameter. From Sunny, the Solaris host, we can 
              see that the Linux host has the following RPC processes registered:
            <p> 
            <pre>
# rpcinfo -p 192.168.1.254
   program vers proto   port  service
    100000    2   tcp    111  rpcbind
    100000    2   udp    111  rpcbind
    100024    1   udp    692  status
    100024    1   tcp    694  status
    100005    3   udp   1024  mountd
    100005    3   tcp   1024  mountd
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100021    1   udp   1026  nlockmgr
    100021    3   udp   1026  nlockmgr
    100021    4   udp   1026  nlockmgr
#
</pre>
            Note that versions are also listed, which comes in handy should you 
            have an environment that requires support of multiple NFS protocols. 
            If a particular daemon is not running, then it must be corrected on 
            the server. After a mount fails, the <b>rpcinfo -p</b> below shows 
            that the <b>mountd</b> is not running on the server:
            <p> 
            <pre>
# rpcinfo -p 192.168.1.254
   program vers proto   port  service
    100000    2   tcp    111  rpcbind
  ...
  ...
    100021    4   udp   1026  nlockmgr
#
</pre>
            The <b>rpcinfo</b> can be very useful in ensuring that remote processes 
            are running. The <b>-p</b> parameter is the most useful, but check 
            the man page for full coverage of <b>rpcinfo</b>.
            <p> Another useful tool is the <b>nfsstat</b> command. The <b>nfsstat</b> 
              can determine whether clients are actually accessing an export, 
              as well as reporting statistics by protocol version.
            <p> tcpdump can also be quite useful for troubleshooting problems:
            <p> 
            <pre>
[root@lefty /]# tcpdump host lefty and host sunny -s512
tcpdump: listening on eth0
06:29:51.773646 sunny.2191984020 &gt; lefty.mcwrite.n.nfs: 140 lookup   \
   fh Unknown/1"test.c" (DF)
06:29:51.773819 lefty.mcwrite.n.nfs &gt; sunny.2191984020: reply ok 116   
   lookup ERROR: No such file or directory (DF)
06:29:51.774593 sunny.2191984021 &gt; lefty.mcwrite.n.nfs: 128 getattr   \
   fh Unknown/1 (DF)
06:29:51.774670 lefty.mcwrite.n.nfs &gt; sunny.2191984021: reply ok 112   \
   getattr DIR 40755 ids 0/0 sz 0x000001000  (DF)
06:29:51.775289 sunny.2191984022 &gt; lefty.mcwrite.n.nfs: 140 lookup   \
   fh Unknown/1"test.c" (DF)
06:29:51.775357 lefty.mcwrite.n.nfs &gt; sunny.2191984022: reply ok 116   \
   lookup ERROR: No such file or directory (DF)
06:29:51.776029 sunny.2191984023 &gt; lefty.mcwrite.n.nfs: 184 create   \
   fh Unknown/1 "test.c" (DF)
06:29:51.776169 lefty.mcwrite.n.nfs &gt; sunny.2191984023: reply ok 120   \
   create ERROR: Permission denied (DF)
</pre>
            In the above output from <b>touch test.c</b>, the <b>touch</b> command 
            tried to access a file by the name of <b>test.c</b>, then it looked 
            for a directory by the same name. After failing both tests, it then 
            tried to create <b>test.c</b>, which also fails.
            <p> Once the file system is mounted, the most common errors relate 
              to common UNIX access rights. The use of common uid or Sun's NIS+ 
              can help ensure permissions are implemented globally across file 
              systems. Some administrators are tempted to "open" directories through 
              the use of giving world-read permissions; however, this should be 
              avoided for security reasons. Even ignoring the security implications, 
              this methodology is a management nightmare because processes or 
              users seldom create data as world readable.
            <p> The root user is given special treatment within NFS mounts. To 
              avoid the limitless possibilities afforded the super user, root 
              user requests are treated as if they come from the user "nobody", 
              which effectively restricts root access to world-readable and write-enabled 
              files. To add additional security to your NFS implementation, refer 
              to the "Security Measures and Resources" sidebar.
            <p> <b>Solaris NFS Server</b>
            <p> Configuring Solaris to run as an NFS server is as straightforward 
              as the Linux version; however, the commands and file locations are 
              a bit different. Solaris automatically starts the NFS services and 
              exports all file systems when run level 3 is reached at boot up. 
              To manually start the processes, use:
            <p> 
            <pre>
#/usr/lib/nfs/mountd
</pre>
            To start the mount daemon, and to start the NFS server, use:
            <p> 
            <pre>
#/usr/lib/nfs/nfsd
</pre>
            With Solaris 2.6, Solaris no longer uses an export file to identify 
            the file systems to be exported. Rather, the files are exported using 
            the <b>share</b> command. Assuming we want to allow remote hosts to 
            mount <b>/export/home</b>, use the following command run as root:
            <p> 
            <pre>
share -F nfs /export/home
</pre>
            (See the sidebar for the <b>-o</b> parameter to create limitations 
            with the <b>share</b> command.)
            <p> Once the <b>share</b> command is executed to export the file system, 
              a list of exported shares can be seen with the <b>share</b> command 
              with no parameters:
            <p> 
            <pre>
# share
-               /export/home   rw   ""
</pre>
            An exported file system can also be removed from export status with 
            the <b>unshare</b> command:
            <p> 
            <pre>
# unshare -F nfs /export/home 
</pre>
            Solaris stores the information concerning NFS in the <b>/etc/dfs</b> 
            directory. The <b>/etc/dfs/sharetab</b> contains the exported file 
            systems and is where the <b>share</b> command without parameters gets 
            its information.
            <p> The <b>/etc/dfs/dfstab</b> contains a list of share commands that 
              are executed during bootup. To have <b>/export/home</b> automatically 
              exported, the aforementioned <b>share</b> command <b>share -F nfs 
              /export/home</b> would be added to <b>/etc/dfs/dfstab</b>.
            <p> An additional useful command for exporting file systems is the 
              <b>shareall</b> command. <b>shareall</b> proves most useful when 
              executed without any parameters, which causes it to execute all 
              the share commands in the <b>/etc/dfs/dfstab</b>. <b>unshareall</b> 
              can be used to remove all exported file systems from their export 
              status.
            <p> <b>We Return to Penguin Broadcasting Corporation</b>
            <p> Using Linux client NFS capabilities was not presented earlier 
              in the Linux section to follow the normal flow of exporting a file 
              system and then mounting it from the client. But to complete the 
              circle, here is the procedure to mount the exported Solaris file 
              system.
            <p> Mounting an exported system on Linux is straightforward and similar 
              to the Solaris version with the noticeable exception that <b>-t</b> 
              as opposed to <b>-F</b> is used to identify the file system type:
            <p> 
            <pre>
[root@lefty /root]# mount -t nfs sunny:/export/home /tmp/tmp2
</pre>
            The status of the mounted file system can then be viewed with the 
            <b>mount</b> command:
            <p> 
            <pre>
[root@lefty /root]# mount
/dev/hda1 on / type ext2 (rw)
none on /proc type proc (rw)
none on /dev/pts type devpts (rw,gid=5,mode=620)
sunny:/export/home on /tmp/tmp2 type nfs (rw,addr=192.168.1.252)
</pre>
            <b>Just the Beginning</b>
            <p> The Network File System can be used for diskless workstations, 
              applications, or simple user storage. Whatever the use, I've covered 
              the basics to get you pointed in the right direction. Enjoy.
            <p> <i>Ronald McCarty received his bachelor's degree in Computer and 
              Information Systems at the University of Maryland's international 
              campus at Schwaebisch Gmuend, Germany. He works for Sonus Networks 
              as a senior systems engineer on a customer team responsible for 
              a major telecommunications carrier. Ronald is co-author New Rider's 
              Linux Routing (<b>http://www.linuxroutingbook.com/</b>). 
              He spends his free time with his two best friends in the world: 
              his daughter, Janice, and his wife, Claudia. He can be reached at: 
              <b>ronald.mccarty@gte.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
