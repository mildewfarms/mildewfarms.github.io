<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i12: Parsing Interesting Things</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/dec2001.tar"><b class=codeListing>dec2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/perl.gif" width="150" height="150" align="right">Parsing 
              Interesting Things</h1>
            <p> <i>Randal L. Schwartz</i>
            <p> Someone recently popped into one of the newsgroups I frequent 
              and asked how to parse an INI file. You might have seen those before, 
              with sections and keyword=value lines, like:
            <p> 
            <pre>
[login]
timeout=30
remote=yes

[password]
minlength=6
</pre>
            I think they started in the Microsoft world, since no sane UNIX hacker 
            would have come up with something like that. No, we come up with things 
            like <b>.Xdefaults</b> and <b>sendmail.cf</b> and <b>termcap</b>. 
            But the request seemed simple: parse the file and gather the information 
            into a hash for quick access, two levels deep, of course.
            <p> Now, I usually carry the banner here for "use the CPAN", and in 
              fact, there are numerous CPAN modules that parse INI files (too 
              many, I think). But let's take a different route here. Suppose we 
              were parsing a file that wasn't already CPANned to death. What tools 
              could we use?
            <p> Well, certainly Perl's regular expressions are pretty powerful 
              in the first place, and this task really wouldn't be that difficult 
              with hand-written code, but we can go a bit further and pull out 
              a nifty tool from the CPAN: the "madman of Perl" Damian Conway's 
              <b>Parse::RecDescent</b>. This module permits extremely complex 
              parsers to be built by specifying a nice hierarchical description 
              of the data (as a grammar), and a series of actions to be taken 
              as each portion of the data is returned. I find it very simple to 
              use, and whipped up a parser in no time.
            <p> The key to a useful grammar is getting the description right, 
              and what to do once you've seen that. First, let's look at a file. 
              A file is a series of sections, so in the grammar language, that's 
              given as:
            <p> 
            <pre>
file: sections
</pre>
            Actually, a file is a bit more than that. If we just used that, the 
            grammar would match any prefix of the input that also had sections. 
            So, we need to anchor that:
            <p> 
            <pre>
file: sections /\z/
</pre>
            Which says, match sections, and when you're done matching sections, 
            match the end of the string. If you're not at the end of the string 
            when you are done matching sections, this isn't a file that we want.
            <p> And now, <b>sections</b> is zero or more sections, which we write 
              as:
            <p> 
            <pre>
sections: section(s?)
</pre>
            with the <b>(s?)</b> suffix meaning "zero or more". Very readable 
            so far. A section is a section marker (the square-bracket line) and 
            some definitions:
            <p> 
            <pre>
section: section_marker definitions
definitions: definition(s?)
</pre>
            And we've defined the definitions as well. So far, we've managed to 
            capture the essence of an INI-like file, but we've not actually matched 
            anything (except the end of string). That's because we've been constructing 
            "non-terminals". Grammar rules can also contain "terminals" (like 
            the end-of-string token above) to define specific things to match. 
            Let's start with a section marker:
            <p> 
            <pre>
section_marker: /\[.*\]/
</pre>
            There. A section marker is a square-bracketed thingy. And what's a 
            definition?
            <p> 
            <pre>
definition: key /=/ value
</pre>
            Yeah, it's a key and a value, separated by an equals. But what are 
            those? Why, more terminals!
            <p> 

            <pre>
key: /\w+/
value: /.*/
</pre>
            And already with just a few lines of code, we've defined most of the 
            grammar. But now we need to introduce a bit more knowledge about <b>Parse::RecDescent</b>. 
            Between each of the items of the rules, the generated parser will 
            be permitted to skip over the current skip string, which is "whitespace" 
            by default. This is fine for section markers: we don't mind any preceding 
            whitespace being tossed. But it's a pain if whitespace gets in-between 
            the key and the rest of the line. Fortunately, we can define that 
            the skip string be altered for the remainder of a rule:
            <p> 
            <pre>
definition: key &lt;skip: ''&gt; /=/ value
</pre>
            which means that the string <b>''</b> (the empty string) is now the 
            skip string, meaning that the equals must be adjacent to the end of 
            the key, and the value starts immediately after the equals. Good!
            <p> We could stick all the rules above into a string <b>$GRAMMAR</b>, 
              and then create a parser <b>$PARSER</b> using these rules as:
            <p> 
            <pre>
use Parse::RecDescent;
my $PARSER = Parse::RecDescent-&gt;new($GRAMMAR)
  or die;
</pre>
            This <b>$PARSER</b> can then be used repeatedly to see whether a file 
            fits the specifications. To do that, we call the top-level rule (<b>file</b>) 
            as a method, passing it <b>$INPUT</b>, the contents of the file in 
            question:
            <p> 
            <pre>
if (defined(my $result = $PARSER-&gt;file($INPUT))) {
  print "It's a valid INI file!\n";
} else {
  print "No good.\n";
}
</pre>
            Now, if all we were doing was verifying well-formedness, that's enough. 
            But we wanted to also use the data as it was parsed. To do that, we 
            need to also know that every rule is like a subroutine call, and passes 
            back the last value evaluated. By default, that's the string matching 
            the terminal (or <b>$1</b> if it's included), or whatever value the 
            last subrule returns. (For the repetitions above, an arrayref is returned 
            of all the matches, if any.) However, we can include some Perl code 
            enclosed in a block as the last rule, and then <i>that</i> will be 
            the return value.
            <p> For example, we really don't want the brackets included in the 
              section marker, so we can select (using <b>$1</b>) them away:
            <p> 
            <pre>
section_marker: /\[(.*)\]/
</pre>
            There. Now the brackets are not part of the return value. If we didn't 
            know that <b>$1</b> is automatically returned, we could return it 
            explicitly:
            <p> 
            <pre>
section_marker: /\[(.*)\]/ { $1 }
</pre>
            which says to perform the regex match, and if it succeeds, evaluate 
            the block. As long as the block doesn't return <b>undef</b>, it's 
            also considered a "match", and as the last thing in a rule, it's also 
            the overall value of the rule.
            <p> But what about the definitions? We want to note both the key and 
              the value, so we'll use some sort of Perl block at the end of the 
              rule. And we can return an arrayref of the two items just fine, 
              but we need to access the "value" of the key and value subrules 
              through the magical <b>%item</b> hash. The keys to this hash are 
              the names of the subrules. (Sorry for the overloading of the key/value 
              terms here.)
            <p> 
            <pre>
definition: key &lt;skip: ''&gt; /=/ value
  { [$item{key}, $item{value}] }
</pre>
            And now a definition is an arrayref, consisting of the found key, 
            and its found value. (If there's more than one item called "key", 
            then you must resort to positional syntax, but it's almost always 
            easier and clearer to just invent a new non-terminal name for that 
            particular slot.)
            <p> Similarly, a section needs the name of the section and all of 
              the definitions of that section.
            <p> 
            <pre>
section: section_marker definitions
  { [$item{section_marker}, $item{definitions}] }
</pre>
            Note that <b>definitions</b> will already be an arrayref of individual 
            definitions, which are themselves references to two-element arrays. 
            All this stacking is taken care of automatically by the parser built 
            by <b>Parse::RecDescent</b>!
            <p> Finally, the fun part. A file wants to be all the sections. And 
              we could just punt and return that:
            <p> 
            <pre>
file: sections /\z/ { $item{sections} }
</pre>
            which will then be an arrayref pointing to a list of sections, each 
            section being an arrayref pointing to a list of definitions in that 
            section, each definition being an arrayref pointing to a key/value 
            tuple. But let's convert this into a hash for quick access:
            <p> 
            <pre>
  file:
    sections /\z/
    { my %return;
      my $sections = $item{sections};
      for my $section (@$sections) {
my ($section_marker, $definitions) = @$section;
for my $definition (@$definitions) {
  my ($key, $value) = @$definition;
  for ($return{$section_marker}{$key}) {
    if (not defined $_) {
      $_ = $value;
    } elsif (not ref $_) {
      $_ = [$_, $value];
    } else {
      push @$_, $value;
    }
  }
}
      }
      \%return;
    }
</pre>
            Wow. What was that? Well, first we define a hash to be returned (as 
            a hashref), and then walk the multiple levels of the arrayrefs of 
            arrayrefs of tuples. The interesting part starts in the middle, which 
            is merely aliasing <b>$return{$section_marker}{$key}</b> to <b>$_</b> 
            for the rest of the inner loop. If that value isn't defined, then 
            this is the first time we've seen a keyword under a given section, 
            so we stuff the value. If it's already defined, then we've seen the 
            same keyword twice. In this case, I decided to turn the value into 
            an arrayref, so that the values are individually extractable. And 
            finally, if it's already an arrayref, then we just push the latest 
            hit onto the end.
            <p> The return value of calling the <b>file</b> method is now either 
              this hashref, or <b>undef</b>. So to get the "timeout" parameter 
              from the example INI file above, we'd say:
            <p> 
            <pre>
my $timeout = $result-&gt;{login}{timeout};
</pre>
            Because the names are case sensitive, we might want to add a few other 
            things to force all the section names and keys to lowercase, or perhaps 
            we could do that while we were building the hash.
            <p> There you have it: an INI-like file parser made with <b>Parse::RecDescent</b>. 
              I hope this brief intro to this powerful module will get you interested 
              enough to read the rest of the documentation and study its amazing 
              array of features. And you'll never fear parsing an odd-looking 
              file again. Until next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </i>Programming Perl<i>, </i>Learning Perl<i>, </i>Learning 
              Perl for Win32 Systems<i>, and </i>Effective Perl Programming<i>, 
              as well as writing regular columns for </i>WebTechniques<i> and 
              </i>Unix Review<i> magazines. He's also a frequent contributor to 
              the Perl newsgroups, and has moderated comp.lang.perl.announce since 
              its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
