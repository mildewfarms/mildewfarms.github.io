<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i12: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/dec2001.tar"><b class=codeListing>dec2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b><font size="+2"><img src="../../resource/questions.gif" width="200" height="100" align="right">Questions 
              and Answers</font></b></h1>
            <b><font size="+2">Q</font></b> My Ultra 10 box running Solaris 
              7 is a JumpStart server with a Solaris 8 01/00 release image on 
              it. I want the latest features of Solaris, though, so I downloaded 
              the maintenance upgrade (MU) from SunSolve. Can I "patch" my JumpStart 
              image as I originally intended? If so, how? The <i>install_mu</i> 
              shell script was obviously intended to upgrade a running OS, and 
              I see nothing in the accompanying documentation of any relevance 
              to upgrading a JumpStart image.
            <p> <b><font size="+2">A </font></b> No, you cannot easily patch the 
              JumpStart image on your disk. The maintenance updates are provided 
              as a series of patches to the base operating system. What you can 
              do is apply the maintenance update patches on each of your newly 
              jumpstarted machines using one of your post install scripts, just 
              like you would with the recommended patch set.
            <p> The best course of action, though, is to just install a new JumpStart 
              image from the latest ISO images instead of using the maintenance 
              updates. That way you'll have the new base OS instead of a patched 
              older base OS.
            <p> <b><font size="+2">Q</font></b> I'm creating a bash script that's 
              supposed to do things to people's home directories. Root runs this 
              script and gives the username as an argument on the command line. 
              In the script, I'm trying to use <b>~username</b> to access the 
              user's home directory like this:
            <p> 
            <pre>
#!/usr/local/bin/bash
ls ~$1
</pre>
            Instead of seeing the contents of the user's directory, I get the 
            output:
            <p> 
            <pre>
ls: ~username: No such file or directory
</pre>
            Where "username" is the argument that was passed in to the script. 
            If I hardcode the script, everything works fine:
            <p> 
            <pre>
#!/usr/local/bin/bash
ls ~username
</pre>
            Why isn't it working when I pass in the username, and why do I get 
            an error saying that it can't find <b>~username</b> when <b>~username</b> 
            is clearly there and works when it's hardcoded? How can I make this 
            work so I can operate on user's home directories?
            <p> <b><font size="+2">A </font></b> The reason that your script is 
              not working is because of the order of expansion. There are two 
              different items being expanded: <b>~</b> and <b>$1</b>. The <b>~</b> 
              is expanded first, and then your script tries to do an <b>ls</b> 
              on the directory called, literally, <b>~$1</b>. Obviously this doesn't 
              work, so your shell script goes to print out an error. When the 
              error is printed, however, the second expansion takes place and 
              <b>$1</b> becomes the argument you passed in. To get around this, 
              you want to use <b>eval</b>:
            <p> 
            <pre>
#!/usr/local/bin/bash
eval "homedir=~$1"
ls $homedir
</pre>
            You can also use some other basic UNIX tools to accomplish the same 
            thing instead of using tilde expansion in your script (since not all 
            shells support tilde expansion). These next two command-line examples 
            assume that your password file contains all of the local users (no 
            NIS/NIS+/LDAP or other remote account authorization in use) and that 
            the user's home directory is stored in the sixth field of the password 
            file:
            <p> 
            <pre>
awk -F: '/^username:/ {system("ls "$6)}' /etc/passwd

grep ^username: /etc/passwd | cut -d: -f6 | xargs ls
</pre>
            You can also take a similar approach but substitute checking <b>/etc/passwd</b> 
            with checking NIS maps or LDAP output, too. Be sure to make it so 
            that the string match on the username will be unique. In the case 
            of checking <b>/etc/passwd</b>, the username will be the first field 
            of output, immediately followed by a ":".
            <p> The other caveat to changing things based on the user's home directory 
              is that you may have some users that have invalid home directories, 
              system directories, or files as home directories, or share home 
              directories with other users. For example, be on the look out for 
              home directories such as:
            <p> 
            <pre>
/
/dev/null
/nohome
/tmp
</pre>
            You don't want to blindly change things in places such as those.
            <p> <b><font size="+2">Q</font></b> I made some modifications to <b>/etc/system</b> 
              to tune the kernel. I am running Sun OS 5.8, and I added the following 
              lines:
            <p> 
            <pre>
set shmsys:shminfo_shmmax = 4294967295
set shmsys:shminfo_shmmin = 1
set shmsys:shminfo_shmmini = 100
set shmsys:shminfo_shmseg = 100
set shmsys:seminfo_semmni = 100
set shmsys:seminfo_semmsl = 510
set shmsys:seminfo_semmns = 1010
set shmsys:seminfo_semopm = 100
set shmsys:seminfo_semvmx = 32767
set shmsys:seminfo_semume = 30
</pre>
            I then rebooted the server as stated in the manual. I also did a <b>boot 
            -r</b> from the OK prompt just in case. However, I received the following 
            errors when the machine booted:
            <p> 
            <pre>
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'shminfo_shmmini' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semmni' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semmsl' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semmns' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semopm' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semvmx' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
Jul 12 14:56:52 host.domain.com genunix: [ID 492708 kern.notice] sorry, 
  variable 'seminfo_semume' is not defined in the 'shmsys'
Jul 12 14:56:52 host.domain.com genunix: [ID 966847 kern.notice] module
</pre>
            Why am I getting these errors? Can I ignore them, or is something 
            broken?
            <p> <b><font size="+2">A </font></b> You have the wrong variables 
              and modules. Take a look at System V Semaphores and System V Shared 
              Memory under:
            <p> 
            <pre>
http://docs.sun.com/ab2/coll.736.2/SOLTUNEPARAMREF/@Ab2PageView/1220
</pre>
            There is no <b>shminfo_shmmini</b> (perhaps you meant <b>shminfo_shmmni</b>, 
            whose default is already 100), and all of the seminfo variables you 
            list belong under the module semsys, not shmsys. Try this instead:
            <p> 
            <pre>
set shmsys:shminfo_shmmax = 4294967295
set shmsys:shminfo_shmmin = 1
set shmsys:shminfo_shmmni = 100
set shmsys:shminfo_shmseg = 100
set semsys:seminfo_semmni = 100
set semsys:seminfo_semmsl = 510
set semsys:seminfo_semmns = 1010
set semsys:seminfo_semopm = 100
set semsys:seminfo_semvmx = 32767
set semsys:seminfo_semume = 30
</pre>
            <b><font size="+2">Q</font></b> I<b>'</b>m writing a Bourne shell 
            script that needs to read in a username and shell as arguments, instead 
            of prompting the user for input while the script is running. The order 
            of the parameters shouldn't matter, and I want to make this extensible 
            so that I can add other command-line options in the future. What's 
            the best way to do this, a <b>for</b> loop, a <b>while</b> loop, <b>if</b> 
            statements?
            <p> <b><font size="+2">A </font></b> You can certainly do what you 
              want with a plain <b>while</b> loop, as in the following:
            <p> 
            <pre>
#!/bin/sh

while [ $# -gt 0 ]
do
  case "$1" in
   -u) USERNAME=$2;;
   -s) USERSHELL=$2;;
  esac
  shift
done
echo "user == $USERNAME"
echo "shell == $USERSHELL"
</pre>
            Even better, though, is to use <b>getopts</b> to specify your options:
            <p> 
            <pre>
#!/bin/sh
while getopts u:s: opt
do
  case "${opt}" in
    u) USERNAME=${OPTARG}
       ;;
    s) USERSHELL=${OPTARG}
       ;;
  esac
done
shift 'expr ${OPTIND} - 1'
echo "user == ${USERNAME}"
echo "shell == ${USERSHELL}"
</pre>
            Be sure to do some error checking to verify that you actually have 
            a valid value for each variable before you try to use it, though.
            <p> The options that <b>getopts</b> is aware of in this case are <b>u:s:</b>. 
              The ":" after each letter option means that an argument is required. 
              If you leave out the ":", then the flag can stand on its own without 
              an argument. The space between the flag and the argument is optional. 
              You can invoke this script in either of these ways:
            <p> 
            <pre>
./script -u User -s Shell
./script -uUser -sShell
</pre>
            When <b>getopts</b> finds a valid flag, it puts the associated argument, 
            if any, into the variable <i>OPTARG</i>. The variable <i>OPTIND</i> 
            contains the pointer to the current word.
            <p> For each iteration through the <b>while</b> loop, <b>getopts</b> 
              looks for a valid command line flag (<b>u</b> or <b>s</b>, in this 
              case) and then uses a case statement to decide on the action. If 
              you used <b>-u</b>, then the action is to assign the argument (stored 
              in <i>OPTARG</i>) to the variable <i>USERNAME</i>. If it's <b>-s</b>, 
              you store the value in <i>USERSHELL</i>. You then decrement <i>OPTIND</i> 
              and look for the next valid option. When working with your own variables 
              for usernames and shells, be sure not to use the environment variables 
              <b>${USER}</b> and <b>${SHELL}</b> or you may wind up with some 
              very unexpected results.
            <p> <i>Amy Rich, president of the Boston-based Oceanwave Consulting, 
              Inc. (</i><b>http://www.oceanwave.com</b><i>), has been a UNIX systems 
              administrator for more than five years. She received a BSCS at Worcester 
              Polytechnic Institute, and can be reached at: <b>arr@oceanwave.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
