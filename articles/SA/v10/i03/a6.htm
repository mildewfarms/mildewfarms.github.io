<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i03: Creating Global Functions with the Korn Shell</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2001/mar2001.tar"><b class=codeListing>mar2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a6.gif" width="200" height="174" align="right">Creating 
              Global Functions with the Korn Shell </h1>
            <p> <i>Rainer Raab</i> 
            <p> Scripting and UNIX systems administration go hand in hand. Writing 
              scripts to automate repetitive tasks is necessary if you want to 
              find the time to work on other things, such as tightening security 
              on the systems you manage, migrating applications to promote server 
              utilization, capacity planning, and system tuning. These types of 
              tasks often fall at the bottom of the food chain if you are in a 
              typical shop, constantly putting out the fires started by buggy 
              applications, compounded by poor vendor support, and unreliable 
              hardware. They also lose priority if you are supporting a development 
              team with a time to market of 3-6 months for their application and 
              the developers expect you to manage the test, staging, and production 
              environments, along with application deployment and installation 
              scripts. Fortunately, most UNIX variants provide an ideal tool for 
              developing and deploying scripts -- the Korn shell. 
            <p> The Korn shell is not just a command interpreter; it provides 
              a powerful and versatile programming language for the rapid development 
              of automation scripts and the capability to write globally accessible 
              functions. In its basic form, a Korn shell script is a series of 
              shell commands, strung together in an executable file. In its most 
              advanced form, a Korn shell script may utilize built-in shell commands 
              that provide support for arrays, integer arithmetic and arithmetic 
              conditions, advanced UNIX I/O redirectors, and functions. It is 
              the support for functions that allows the rapid development of scripts 
              that provide solutions to the tasks of routine UNIX systems administration. 
            <p> <b>Defining Global Functions</b> 
            <p> Korn shell functions, known as procedures or subroutines in other 
              programming languages, allow for the organization of related shell 
              commands by name. By organizing shell commands into functions, long 
              shell scripts are easier to read and follow, and thus maintain. 
              More importantly, functions provide a mechanism allowing shell scripts 
              to be quickly developed, because Korn shell functions can be made 
              available for use by other Korn shell scripts. 
            <p> Korn shell functions are normally defined within the script from 
              which they are called. However, in order for them to be made available 
              to other Korn shell scripts (i.e., made global), they must be defined 
              separately and saved in their own files, with only one function 
              per file. To define a global function in Korn shell, use the same 
              syntax for defining all functions. Either one of the following forms 
              will work: 
            <p> 
            <pre> function function_name {
 shell commands...
 }
 
</pre>
            Or the Bourne shell form: 
            <pre> function_name () {
 shell commands...
 }
 
</pre>
            I always use the first form since it is the one that I am more familiar 
            with and seems to be the predominantly used one. 
            <p> A global function is one that returns the system date and time 
              in a format that is suitable for timestamps in log files: 
            <p> 
            <pre> function get_time {
 TIME=$(date '+%m/%d/%y-%H:%M:%S')
 printf "$TIME\n"
 }
 
</pre>
            To make the <b>get_time</b> function global and invokable from Korn 
            shell scripts, create a special directory (e.g., <b>ksh_functions</b>) 
            in a system-wide accessible directory (e.g., <b>/usr/local</b>). Save 
            the <b>get_time</b> function in that directory, using the function 
            name as the filename. I prefer to use the <b>/usr/local/ksh_functions</b> 
            directory as the global Korn shell function directory: 
            <p> 
            <pre> [rainer@fostercity]/usr/local/ksh_functions&gt;ls -l
 total 2
 -rw-r--r-- 1 rainer gurus 93 Nov 28 10:00 get_time
 
</pre>
            Add the Korn shell built-in variable <b>FPATH=/usr/local/ksh_functions</b> 
            and autoload <b>get_time</b> to your <b>.kshrc</b> file, or to the 
            file you have defined as the environmental file for your login shell. 
            If you have not previously done so, adding export <b>ENV=~/.kshrc</b> 
            to your <b>.profile</b> initialize file will set your environmental 
            file to <b>.kshrc</b>: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana&gt;more .kshrc
 export FPATH=/usr/local/ksh_functions
 autoload get_time
 
</pre>
            The use of the built-in variable <b>FPATH</b> is similar to that of 
            the <b>PATH</b> environment variable. <b>FPATH</b> contains the list 
            of directories that have function definitions, and is used by the 
            autoload <b>function_name</b> command to locate functions. The <b>autoload</b> 
            command not only instructs the shell to load the function only when 
            invoked, but also enables us to store functions in locations other 
            than in our local <b>.profile</b> or <b>.kshrc</b> files, providing 
            the entire framework for creation of global functions. Actually, the 
            <b>autoload</b> command is an alias for the typeset <b>-fu</b> command 
            and can be used instead. I prefer to use the <b>autoload</b> command 
            because it is easier to remember. 
            <p> To use <b>get_time</b> from a script, simply invoke the function 
              name from a shell script: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;more test_time1
 #!/bin/ksh
 PATH=/usr/bin:/usr/ucb
 get_time
 
</pre>
            You can even assign a variable to hold the results from <b>get_time</b>: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;more test_time2
 #!/bin/ksh
 PATH=/usr/bin:/usr/ucb
 SYSTIME=$(get_time)
 
 Securing Global Functions
</pre>
            You may have noticed that in the <b>get_time</b> function I did not 
            specify the path for the system commands <b>date</b> and <b>printf</b>. 
            This is because the PATH environment variable is set explicitly, from 
            the shell scripts <b>test_time1</b> and <b>test_time2</b>, to include 
            the standard system command directories <b>/usr/bin</b> and <b>/usr/ucb</b>. 
            This is my preferred method for writing functions and scripts. If 
            you view this as a security concern, simply include the full path 
            for system commands in all functions and set the <b>PATH</b> to null 
            (<b>PATH=""</b>) in your shell scripts. 
            <p> For added security, create a special group, such as <b>kshteam</b>, 
              and add supplementary group membership to users who want to create 
              and access global functions in the<b> ksh_functions</b> directory: 
            <p> 
            <pre> [rainer@fostercity]/usr/local/ksh_functions&gt;groups rainer 
 gurus kshteam
 
</pre>
            Then, assign the user bin as the owner, with group name <b>kshteam</b>, 
            to the <b>ksh_functions</b> directory with permissions of read, write, 
            and execute for the owner/group and no permissions for world. Next, 
            set the sticky bit on the <b>ksh_functions</b> directory to only allow 
            the owner of a global function to delete, rename, or modify the function: 
            <p> 
            <pre> [rainer@fostercity]/usr/local/ksh_functions&gt;ls -la 
 total 6 
 drwxrwx--T 2 bin kshteam 512 Nov 28 12:41 . 
 drwxr-xr-x 40 root root 1024 Oct 22 14:50 .. 
 -rw-r--r-- 1 rainer gurus 93 Nov 28 14:50 get_time
 
</pre>
            This scheme will prevent unauthorized access to global functions, 
            as well as prevent authorized users from modifying functions that 
            they do not own. However, be sure to inform authorized users that 
            their functions must be world readable to allow other authorized users 
            access (unless the other authorized users all belong to the same primary 
            group and the appropriate permissions are set to allow group access 
            to the functions). Setting the global functions to world readable 
            is not a security concern in this scheme because the permissions on 
            the <b>ksh_functions</b> directory are set to none for world, making 
            the directory inaccessible by anyone other than root or members of 
            the <b>kshteam</b> group. 
            <p> <b>Managing Global Functions</b> 
            <p> There are several useful commands for managing functions. To verify 
              which functions are available to your shell, use the <b>functions</b> 
              command. The <b>functions</b> command displays a list of all defined 
              functions, listed in alphabetical order by function name, defined 
              in your login session: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;functions
 function get_time
 
</pre>
            The <b>functions</b> command, like <b>autoload</b>, is yet another 
            Korn shell alias. The typeset <b>-f</b> command can be used instead. 
            There are a number of predefined Korn shell aliases that might be 
            of interest. Use the <b>alias</b> command to display a list of all 
            aliases defined for your login session: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;alias
 autoload='typeset -fu'
 command='command '
 functions='typeset -f'
 history='fc -l'
 integer='typeset -i'
 local=typeset
 nohup='nohup '
 r='fc -e -'
 stop='kill -STOP'
 suspend='kill -STOP $$'
 
</pre>
            The <b>functions</b> command does not just list functions available 
            to your current login session, but all of your shells, because the 
            <b>FPATH=/usr/local/ksh_functions</b> and the autoload <b>get_time</b> 
            statements have been added to your <b>.kshrc</b> environment file. 
            The <b>get_time</b> function, as well as other functions defined by 
            the autoload command in your <b>.kshrc</b> file, are available to 
            all subshells and Korn shell scripts run under your login. 
            <p> <b>whence</b> is another useful built-in command. It identifies 
              the source of a command. When used with the <b>-v</b> option (verbose), 
              <b>whence</b> produces useful information as to what type of command 
              it is (e.g., is it a shell function, a built-in command, a reserved 
              shell keyword, an alias, etc.): 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;whence -v get_time
 get_time is a function
 [oksana@fostercity]/export/home/oksana/scripts&gt;whence -v whence
 whence is a shell builtin
 [oksana@fostercity]/export/home/oksana/scripts&gt;whence -v function
 function is a reserved shell keyword
 [oksana@fostercity]/export/home/oksana/scripts&gt;whence -v functions
 functions is an exported alias for typeset -f
 
</pre>
            Use <b>whence</b> for clarification when there is some uncertainty 
            as the output of a command. Strange results are often not so strange 
            when you realize that the command you have been running is not the 
            command you thought you were running. A good example of this is the 
            <b>pwd</b> command, which is also a built-in shell command, and takes 
            precedence over <b>/usr/bin/pwd</b> when typed without the full path. 
            This conundrum becomes apparent when you <b>cd</b> to a directory 
            via a symbolic link, and find yourself wondering where you really 
            are: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;cd /usr/pub \
  [oksana@fostercity]/usr/pub&gt;pwd
 /usr/pub 
 [oksana@fostercity]/usr/pub&gt;/usr/bin/pwd 
 /usr/share/lib/pub
 
</pre>
            This occurs because <b>pwd</b> is a built-in shell command that displays 
            the contents of the present working directory set by the <b>cd</b> 
            command and stored in the PWD shell environment variable. PWD stores 
            the relative path, while <b>/usr/bin/pwd</b> displays the absolute 
            path name of the current working directory. 
            <p> <b>Practical Global Functions</b> 
            <p> The <b>get_time</b> function was a simple example of a function, 
              made global, that may be useful for incorporation into other Korn 
              shell scripts. However, it is hardly worth the effort to make <b>get_time</b> 
              global just to save 3-4 lines of future typing. A more useful global 
              function would be one to send out email alerts (see Listing 1): 
            <p> The first thing you might notice that is different with this function, 
              than with the previous <b>get_time</b> function, is that it contains 
              a documentation header. When writing functions for system-wide usage, 
              it is helpful to include a small description of the function that 
              describes (at a minimum) what the function does and its usage. Develop 
              a standard documentation header and stick to it. As the system-wide 
              function library grows, you will be glad to see the documentation 
              header there when you want to use someone else's function or 
              need to use one of your older functions. 
            <p> To make the <b>send_email</b> function globally available and 
              invokable from Korn shell scripts, save the <b>send_email</b> function 
              to our system-wide accessible <b>/usr/local/ksh_functions</b> directory 
              and add the <b>autoload</b> <b>send_email</b> command to your <b>.kshrc</b> 
              file: 
            <p> 
            <pre> [rainer@fostercity]/usr/local/ksh_functions&gt;ls -l
 total 4
 -rw-r--r-- 1 rainer gurus 93 Nov 28 10:00 get_time
 -rw-r--r-- 1 rainer gurus 290 Nov 28 10:05 send_email
 
 [oksana@fostercity]/export/home/oksana&gt;more .kshrc
 export FPATH=/usr/local/ksh_functions
 autoload get_time
 autoload send_email
 
</pre>
            To use the <b>send_email</b> function from a script, simply assign 
            values to the variables <b>EMAIL_LIST</b>, <b>EMAIL_SUBJECT</b>, and 
            <b>EMAIL_MESSAGE</b>, then invoke the function name from a script: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;more test_email
 #!/bin/ksh
 PATH=/usr/bin:/usr/ucb
 EMAIL_LIST="raabrr@yahoo.com 4151234567@alphapage.airtouch.com"
 EMAIL_SUBJECT="Testing"
 EMAIL_MESSAGE="This was only a test.."
 send_email
 
</pre>
            Notice that you can pass the value of variables to functions. In the 
            <b>test_email</b> script, we are passing a space-separated list of 
            the users to whom we want to send email using the <b>EMAIL_LIST</b> 
            variable, and the subject of the email message with the <b>EMAIL_SUBJECT</b> 
            variable, and the email message itself with the <b>EMAIL_MESSAGE</b> 
            variable. This little bit of magic works because functions do not 
            run in separate subshells, as scripts normally do (the exception is 
            if you invoke a script with the "." command). Utilizing 
            functions in this manner allows you to use functions within your scripts 
            as if they were present locally! 
            <p> Another useful function is one to read a configuration file (see 
              Listing 2. When developing complex scripts, I find it useful to 
              be able to change the values of variables from a configuration file, 
              rather than hardcoding the values within the script itself. This 
              not only eases script maintenance, but also allows for user-adjustable 
              settings. Since the configuration file is a text file, you can make 
              appropriate comments to assist the individuals who may be responsible 
              for managing the process that your script performs. 
            <p> Listing 3 contains a configuration file that could be used with 
              the <b>read_config</b> function. To make the <b>read_config</b> 
              function globally available and invokable from Korn shell scripts, 
              save it to our system-wide accessible <b>/usr/local/ksh_functions</b> 
              directory and add <b>autoload</b> <b>read_config</b> to your <b>.kshrc</b> 
              file. Then to use it from a shell script, simply invoke the function 
              name from a script: 
            <p> 
            <pre> [oksana@fostercity]/export/home/oksana/scripts&gt;more test_read_cfg
 #!/bin/ksh
 PATH=/usr/bin:/usr/ucb
 CONFIG_FILE=/export/home/oksana/scripts/test_read_cfg.conf
 read_config
 printf "Email list: $EMAIL_LIST\n"
 printf "Log file: $LOG_FILE\n"
 printf "Debugging is: $DEBUG\n"
 
</pre>
            Notice how the values of the variables <b>DEBUG</b>, <b>LOG_FILE</b>, 
            and <b>EMAIL_LIST</b> are magically available to the <b>test_read_cfg</b> 
            script. This is accomplished by exporting the variables found in the 
            configuration file to the current shell for use. I use the <b>read_config</b> 
            function for all of my shell scripts that require regular updates 
            or are maintained by someone else. For example, to add someone to 
            the email list, just edit the <b>test_read_cfg.conf</b> file with 
            your favorite text editor and then append an additional email address 
            to the <b>EMAIL_LIST</b> variable. Someone with no Korn shell scripting 
            experience can do this, since the configuration file is easily readable 
            and in plain text. 
            <p> <b>Conclusion</b> 
            <p> The Korn shell provides a powerful and versatile programming language 
              and is my scripting language of choice for automating routine UNIX 
              systems administration tasks. The Korn shell function facility not 
              only provides the mechanism for allowing shell scripts to be quickly 
              developed, but it promotes the sharing of code through the use of 
              global functions. There is no point in reinventing the wheel every 
              time a new script has to be developed. With some proper management, 
              the use of global Korn shell functions can become an invaluable 
              tool for everyone on a system, not just the systems administrator. 
            <p> <b>References</b> 
            <p> <i>Learning the Korn Shell</i>, Bill Rosenblatt, O'Reilly 
              and Associates, Inc., 1993 
            <p> <i>Rainer Raab is a senior UNIX Systems Administrator, consulting 
              for Wells Fargo Bank in San Francisco, California. When not scripting, 
              he spends as much time as possible with his lovely wife, Oksana. 
              He can be contacted at: <b>raabrr@yahoo.com</b>.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
