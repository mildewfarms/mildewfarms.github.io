<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i07: WTMP: Another Step Toward Centralizing Event Management</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2001/jul2001.tar"><b class=codeListing>jul2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a8.gif" width="200" height="174" align="right">WTMP: 
              Another Step Toward Centralizing Event Management</h1>
            <p> <i>Joe Aguiar</i>
            <p> This article addresses yet another aspect of centralized event 
              logging and management integrating data from the UNIX <b>wtmp</b> 
              file into the the <b>syslog</b> text files. Because <b>wtmp</b> 
              is not a text file, the typical shell commands are of limited use 
              when examining its contents. I will discuss how to examine and integrate 
              the data with the UNIX <b>syslog</b> utility for processing with 
              familiar tools using a package written in C called <b>logutmpd</b>.
            <p> Although most of this discussion applies both to the <b>utmp</b> 
              and <b>wtmp</b> files, I will focus primarily on <b>wtmp </b>because 
              new records are appended to <b>wtmp</b>, whereas with <b>utmp</b> 
              records are as likely to be deleted as appended. You might think 
              of the info in <b>utmp</b> as indicating the current state of things, 
              while <b>wtmp</b> contains historical data.
            <p> <b>Events Reported in wtmp</b>
            <p> Any process may write to the <b>wtmp</b> file providing that process 
              has the required write privileges (user write, where user is root). 
              The most common entries are made from the <b>init</b> process. The 
              processes that <b>init</b> starts are listed in the <b>/etc/inittab</b> 
              file. A <b>wtmp</b> entry may be made for each of the processes 
              that <b>init</b> manages. Other programs that may make <b>wtmp</b> 
              entries include <b>telnetd</b>, login, and <b>xterm</b>, or anything 
              else that may connect to <b>ttys</b>, alter run level, or set the 
              system date.
            <p> The type of information you might find in <b>wtmp</b> includes 
              login/logout times for specific <b>ttys</b>, users, and sometimes 
              remote hosts. Also, changes in run level and boot times are typical 
              information to find in <b>wtmp</b>. Clearly this type of information 
              can be of great interest to a systems administrator, particularly 
              in regard to security management.
            <p> The amount and type of information found in <b>wtmp</b> can vary 
              quite a bit from system to system. Some systems feature an extended 
              <b>wtmp</b> file called <b>wtmpx</b>. This is true of Solaris and 
              other SVR4-based systems. In fact, under Solaris, there is a <b>wtmp</b> 
              file as well as a <b>wtmpx</b> file. The <b>utmp</b> struct that 
              defines the records in both the <b>utmp</b> file and the <b>wtmp</b> 
              file may be found in the file <b>/usr/include/utmp.h</b>, or perhaps 
              <b>/usr/include/utmpbits.h</b> under Linux. This file, or actually 
              the C struct statement within it, will describe what pieces of information 
              are potentially available from each record of the <b>wtmp</b> file. 
              Listing 1 shows an example of a typical <b>utmp </b>struct and the 
              type of data to be had from it.
            <p> The only items that may not be obvious are <b>ut_type</b> and 
              <b>ut_exit</b>. The <b>ut_type</b> describes the type of entry (e.g., 
              boot time, run level, login process, etc.) These are described in 
              the header files mentioned previously. The <b>e_termination</b> 
              value is the signal number that caused termination of the child 
              and <b>e_exit</b> is the exit code of the child. Your system man 
              pages for <b>utmp/x(5</b>) as well as <b>wait(2)</b> should shed 
              additional light on this.
            <p> <b>Reading Data from wtmp</b>
            <p> Because <b>wtmp</b> is a fixed-length record, binary style, data 
              file, we cannot easily use normal text-based tools to look at its 
              contents. Tools like <b>last</b> are extremely useful to examine 
              <b>wtmp</b> data. However, it may not be easy or efficient to use 
              <b>last</b> to examine <b>wtmp</b> in real time. Most UNIX systems 
              provide the <b>getutent(3)</b>, <b>setutent(3)</b>, <b>utmpname(3)</b>, 
              and <b>endutent(3)</b> system calls to read and manipulate <b>wtmp</b>/<b>utmp</b> 
              entries. Under Solaris, there are corresponding system calls for 
              managing the <b>wtmpx</b> file.
            <p> The <b>logutmpd</b> daemon uses these, or alternatively, customized 
              versions of some of these calls to continuously get at the latest 
              entry in the <b>wtmp</b> file.
            <p> <b>Using Logutmpd</b>
            <p> The whole purpose of <b>logutmpd</b> is to allow the sys admin 
              to efficiently and continuously monitor the <b>wtmp</b> file for 
              new entries, convert them into the desired text-formatted message, 
              and forward that message to the local <b>syslog</b> where the event 
              may be easily viewed or acted upon.
            <p> To do this, <b>logutmpd</b>, upon startup, opens the system <b>wtmp</b> 
              file. It then traverses the <b>wtmp</b> file one <b>utmp </b>struct 
              record at a time until it reaches the end of the file. At this point, 
              <b>logutmpd</b> waits for any new data to be written to <b>wtmp</b>. 
              The interval that <b>logutmpd</b> waits (by default) is 1 second. 
              The user may specify a different interval using the <b>-us</b> option 
              to specify the number of microseconds, and <b>-s</b> to specify 
              seconds. The timer used is based on the system <b>select()</b> call. 
              When new data is detected it is read, reformatted, and written to 
              the <b>syslog</b> at a priority of <b>auth.notice</b>.
            <p> By default, <b>logutmpd</b> runs as a daemon process and can be 
              started at boot time using a normal UNIX startup script. The <b>logutmpd</b> 
              distribution includes a sample Sys V-style <b>init</b> script. A 
              command-line example of starting <b>logutmpd</b> might look like 
              the following:
            <p> 
            <pre>
# logutmpd -us 500000 -f /var/log/wtmp
</pre>
            This would run <b>logutmpd</b> as a daemon process, reading from the 
            file <b>/var/log/wtmp</b>, checking for new data every 500,000 micro-seconds 
            (.5 seconds). <b>Logutmpd</b> may also be run in foreground or debug 
            mode using the <b>-d</b> command-line switch. Using <b>-d</b> will 
            prevent <b>logutmpd</b> from writing to the <b>syslog</b>. Instead, 
            it will read all the data currently in <b>wtmp</b>, writing it out 
            to <b>stderr</b>, and then write any new data to <b>stdout</b>. In 
            this way <b>wtmp</b> data may be redirected to a text file or piped 
            to another process, if desired. For instance, the following command 
            would discard all the historical data and send any new data to the 
            system console:
            <p> 
            <pre>
# logutmpd -d 2&gt;/dev/null 1&gt;/dev/console
</pre>
            The nice thing about having a daemon like this is to be able run this 
            on all your remote hosts and let <b>syslog</b> do all the work of 
            forwarding the data to your central log host. There is a tool called 
            <b>ulogger</b> included in the <b>logutmpd</b> package that can be 
            used to send messages to <b>wtmp</b> to test your installation (similar 
            to using the l<b>ogger</b> command to send messages to <b>syslog</b>).
            <p> <b>Customizing Logutmpd</b>
            <p> Simple configuration changes to <b>logutmpd</b> may be accomplished 
              at build time by defining certain macros using <b>Makefile</b> variables. 
              More complex customization of <b>logutmpd</b> can be done by modifying 
              the macros defined in the <b>logutmpd.h</b> file.
            <p> Let's examine what can be changed easily by modifying the 
              <b>Makefile</b>. To change a configuration in the <b>Makefile</b>, 
              we will need to change how the DEFINE variable is set. For instance, 
              if our operating system is Digital UNIX, the line in the <b>Makefile</b> 
              should read:
            <p> 
            <pre>
DEFINE = -DOSF
</pre>
            This has the effect of setting the OSF preprocessor macro at build 
            time, which will ideally set things up for a proper build of the <b>logutmpd</b> 
            binary on a Digital UNIX system. Other build options that are easily 
            set up in the <b>Makefile</b> include the <b>syslog</b> priority that 
            will be used for new messages and a flag to include the time data 
            from the <b>wtmp</b> record.
            <p> Because <b>syslog</b> priorities have two components (a facility 
              and a level), you must define the <b>UT_FACILITY</b> and <b>UT_LEVEL</b> 
              macros to change the default <b>logutmpd</b> behavior. The default 
              is <b>LOG_AUTH</b> and <b>LOG_NOTICE</b>, respectively. If you were 
              to set the <b>DEFINE</b> variable in the <b>Makefile</b>, it might 
              look like this:
            <p> 
            <pre>
DEFINE = -DUT_FACILITY=LOG_USER -DUT_LEVEL=LOG_WARN -DOSF
</pre>
            After rebuilding, each new message would now be sent to <b>syslog</b> 
            at the <b>user.warn</b> priority. To investigate other possible settings 
            for priority, check out the <b>/usr/include/syslog.h</b> file. <b>syslog</b> 
            priorities are pretty standard, but there are subtle differences between 
            systems. To include the time data from <b>wtmp</b> record in your 
            <b>syslog</b> messages, simply append <b>-DUT_TIME</b> to the <b>DEFINE</b> 
            variable definition in the <b>Makefile</b>.
            <p> <b>Logutmpd</b> is known to run on Linux, Solaris, and an ancient 
              version of Digital UNIX. If you want to run this on a different 
              platform, the easiest way may be to copy the set of macros for a 
              system that comes close. Change the outermost <b>#ifdef</b> statement 
              to reflect your OS, and customize the remaining macros as needed. 
              The <b>OLIST</b> and <b>UT_FORMAT</b> macros are probably all that 
              will be needed in the way of customization.
            <p> Suppose the <b>utmp </b>struct on your operating system only has 
              two pieces of data: <b>ut_user</b> and <b>ut_time</b>. The <b>OLIST</b> 

              might be changed from:
            <p> 
            <pre>
#define OLIST u-&gt;ut_user, u-&gt;ut_line,
u-&gt;ut_id, u-&gt;ut_pid, u-&gt;ut_host
</pre>
            to:
            <p> 
            <pre>
#define OLIST u-&gt;ut_user
</pre>
            and the corresponding <b>UT_FORMAT</b> from:
            <p> 
            <pre>
#define UT_FORMAT "%s, %s, %s, %d, %s\n"
</pre>
            to:
            <p> 
            <pre>
#define UT_FORMAT "%is\n"
</pre>
            The <b>T_UT</b>_FORMAT may require changing as well; the only difference 
            is the time is placed at the front of the macros with the <b>T_</b> 
            at the beginning. The <b>ut_time</b> data will be included automatically 
            if the macro discussed above has been set. Also, you have the option 
            of building <b>logutmpd</b> using the systems <b>*utent()</b> calls 
            or the custom ones supplied with <b>logutmpd</b>. Use whichever works 
            best with your system. Don't forget to include <b>-DYourOSName</b> 
            when setting DEFINE in the <b>Makefile</b> so your new macros will 
            be used when building. That's about all that should be needed 
            to get things working on your system.
            <p> <b>Exploring Alternatives</b>
            <p> There must be many alternative methods of centralizing all the 
              <b>wtmp</b> data. One interesting approach is discussed in <i>UNIX 
              System V Network Programming</i> by Stephen A. Rago, in which the 
              author provides examples in the use of the ONC RPCs XDR to format 
              the <b>wtmp</b> data before transferring it to a central host where 
              it is imagined that the data can then be easily interpreted with 
              another application since all the data, no matter what type of processor 
              it came from, is in a uniform, XDR representation.
            <p> Another, perhaps simpler, approach is to write a Perl script that 
              uses the <b>unpack()</b> function to read the data. One such script 
              is shown in recipe 8.18 of <i>Perl Cookbook</i>, by Tom Christianson 
              and Nathan Torkington. The <b>unpack()</b> argument format can be 
              tricky to get right. Because it is based on the <b>utmp </b>struct, 
              it may vary a bit between operating systems. You will need to "use 
              Sys::Syslog;'' and add the <b>openlog()</b>, <b>syslog()</b>, 
              <b>closelog()</b> calls. Also, to get it to run as a daemon, you 
              need to add code similar to:
            <p> 
            <pre>
sub daemon_init {
    my $cpid;
    if ( !defined( $cpid = fork())) {
        perror( "Cannot fork a new process.");
        exit( -1);
    } elsif ( $cpid != 0) {
        exit( 0);
    }

    open( STDOUT, ''&gt;/dev/null'');
    open( STDERR, ''&gt;&amp;STDOUT'');

    setsid();    # use POSIX;
    chdir( "/");
    umask( 0);

    return( 0);
}
</pre>
            Using this method may give you a slight performance hit compared to 
            the C-based solution. On the other hand, if you have Perl on all of 
            your hosts, this might be a way to go.
            <p> <b>Conclusion</b>
            <p> UNIX has a long history and exists in many forms. As a result, 
              achieving consistent and complete logging across platforms can be 
              a really interesting project. I hope the tools presented here will 
              help you achieve an extra step toward that goal.
            <p> The latest version of the <b>logutpmd</b> package may be downloaded 
              from <b>http://home.inreach.com/jaguiar</b>. Questions or comments 
              should be addressed to <b>jaguiar@inreach.com</b>.
            <p> <b>References</b>
            <p> 1. Rago, Stephen A. <i>UNIX System V Network Programming</i>, 
              1993, Addison-Wesley.
            <p> 2. Christianson, Tom and Torkington, Nathan. <i>Perl Cookbook</i>, 
              1998, O'Reilly &amp; Associates.
            <p> 3. Stevens, W.R. <i>Advanced Programming in the UNIX Environment</i>, 
              1992, Addison-Wesley.
            <p> 4. UNIX Manual pages for <b>wait(2)</b>, <b>utmp(5)</b>, <b>init(8)</b>, 
              <b>getutxent(3C)</b>.
            <p> <i>Joe Aguiar has worked as a Systems and Network Administrator 
              and Software Engineer since 1986. He holds a BSEE degree from CSU, 
              Fresno. He can be reached at <b>jaguiar@inreach.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
