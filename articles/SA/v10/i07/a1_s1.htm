<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i07: How To Determine Which Network Programming Architecture Is Being Used</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a1.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink">Sidebar 1</span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a1_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/2001/jul2001.tar"><b class=codeListing>jul2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1>How To Determine Which Network Programming Architecture Is Being 
              Used</h1>
            <p> Most program documentation remains vague about which network programming 
              architecture is used. Since the architecture is the single strongest 
              determinant of performance under load, you need a way to find out. 
              Below are techniques you can use snoop on an application, even if 
              you do not have access to the source code. First, you must set up 
              a load-creating situation, with at least 200 simultaneous tasks. 
              Then, examine how the process is running with various tools:
            <p> 
            <b>Linux</b> 
            <p> 
            <ul>
              <li> Run <b>top</b> 
              <li> One-process-per-task -- Many processes running, all with 
                a different amount of memory use. 
              <li> One-thread-per-task -- Many processes running, all with 
                the same amount of memory use, and the number of processes changes 
                over time. 
              <li> One-thread-many-tasks (one thread) -- A single process 
                running. 
              <li> One-thread-many-tasks (several threads) -- Many processes 
                running, all with the same amount of memory use, and the number 
                of processes is less than 100.
            </ul>
            <b>Solaris</b> 
            <p>
            <ul>
              <li> Run <b>ps -efL</b>. The "NLWP" column indicates how 
                many "lightweight processes" are running inside each 
                process, and lists each LWP in a separate row. 
              <li> One-process-per-task -- <b>ps -efL</b> reports multiple 
                copies of your application, but each has a different process ID, 
                then the application uses the process-per-task approach. 
              <li> One-thread-per-task -- Multiple processes reported by <b>ps 
                -efL</b> for your application. If all have the same process ID, 
                and the number of copies changes over time, then the application 
                uses the one-thread-per-task (multi-threaded) approach. 
              <li> One-thread-many-tasks (one thread) -- A single process 
                reported. 
              <li> One-thread-many-tasks (several threads) -- Multiple copies 
                of your application reported by<b> ps - efL</b>, all running copies 
                of your application have the same process ID, and the number of 
                copies is less than 100.
            </ul>
            <b>Windows 2000 and NT </b> 
            <p>
            <ul>
              <li> Use Task Manager to view active tasks and <b>perfmon.exe</b> 
                to view the number of threads in the running task. 
              <li> One-process-per-task -- Task Manager shows approximately 
                one process per running task. 
              <li> One-thread-per-task -- <b>perfmon.exe</b> shows approximately 
                one thread per running task. 
              <li> One-thread-many-tasks (one thread) -- One process, one 
                thread. 
              <li> One-thread-many-tasks (several threads) -- Task Manager 
                shows one process; <b>perfmon.exe</b> shows less than 100 threads.
            </ul>
            <b>Alternative Snooping Technique: Trace the System Calls </b>
            <p>
            <ul>
              <li> Use <b>strace</b> (on Linux) or <b>truss</b> (on Solaris and 
                FreeBSD) to display the application's system calls. 
              <li> <b>grep</b> for calls to "select" or "poll", 
                which usually indicate asynchronous operations. <b>Poll()</b> 
                is more efficient than <b>select()</b> with large numbers of connections. 
              <li> <b>grep</b> for calls that start with <b>aio</b> (which stands 
                for Asynchronous I/O) or <b>lio</b> (List I/O). These calls are 
                a likely sign of a sophisticated asynchronous architecture. Examples: 
                <b>aio_write()</b>, <b>aio_read()</b>, <b>lio_listio()</b>. 
              <li> <b>grep</b> for calls that start with "pthread" or 
                "thr_" (on Solaris), which indicates some amount of 
                multi-threading. If a new task always causes a call the <b>pthread_create()</b>, 
                then the "one-thread-per-task" design is being used.
            </ul>
</table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
