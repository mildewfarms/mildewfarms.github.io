<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i07: Simplifying WindowMaker Menus in a Distributed Environment</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2001/jul2001.tar"><b class=codeListing>jul2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a4.gif" width="200" height="174" align="right">Simplifying 
              WindowMaker Menus in a Distributed Environment</h1>
            <p> <i>Anthony Taylor</i>
            <p> Choosing a window manager for a distributed system is tough. When 
              a single system serves up the desktop for many users, the window 
              manager must be efficient; there's always a trade-off between 
              functionality and memory and CPU use.
            <p> When we at Southeast Alaska Regional Health Consortium (SEARHC) 
              moved to the SunRay thin client, we left behind X terminals and 
              <b>ncdwm</b> (the <b>mwm</b>-like window manager). Although <b>mwm</b> 
              (Motif Window Manager) was a mainstay of the X desktop, it definitely 
              shows its age. <b>mwm</b> takes the role of window manager very 
              literally; it restricts its job to window decorations (titlebar, 
              minimize/maximize buttons, window frame, etc.) and a simple menu 
              used to launch applications.
            <p> The move to the SunRay device was an opportunity to change to 
              a more modern window manager. In our quest for the perfect balance 
              of ease-of-use, power, and low memory footprint, we tested several 
              desktops, including KDE (<b>www.kde.org</b>), Gnome (<b>www.gnome.org</b>), 
              WindowMaker (<b>www.windowmaker.org</b>), and the Solaris default 
              desktop, CDE. There are many other excellent window managers, but 
              these were the only ones we tested.
            <p> During testing, it became apparent that the full-fledged CORBA-enabled 
              KDE and Gnome desktops were too memory- and CPU-intensive to be 
              a viable option for us. Although both are excellent workstation 
              environments, the resources required would have been much too expensive.
            <p> On the test system, a 300-MHz Sun Ultra 10 with 512 MB RAM, both 
              KDE and Gnome would comfortably handle about 4-5 users. Adding more 
              memory would certainly have increased that number, but would have 
              defeated the point of the test -- to get a rough idea of the 
              resource requirements for the various desktops.
            <p> Both CDE and WindowMaker appear to have similar memory requirements. 
              CDE is a technically advanced window manager, but WindowMaker is 
              easier for non-technical users. WindowMaker also has a menu system 
              similar in functionality to the <b>mwm</b> menu, easing the transition 
              from ncdwm.
            <p> Running either CDE or WindowMaker on the same Ultra 10 supported 
              nine users with memory to spare. Ultimately, our very precise and 
              extremely scientific research results pointed to WindowMaker as 
              the best option in terms of memory, usability, and manageability. 
              Note that although we used the SunRay network device for the desktop, 
              the problems and solutions presented here are applicable to any 
              distributed X Window system-based desktop -- whether the underlying 
              hardware is thin client, X terminal, or workstation based.
            <p> <b>WindowMaker Unplugged</b>
            <p> WindowMaker is designed after the NeXT desktop. It sports a versatile 
              menu system, easy configuration, and a "dock." A configuration 
              utility is included, which greatly simplifies end-user customization 
              of everything from focus behavior to desktop themes.
            <p> The dock is a special icon on the desktop that resides along one 
              side of the screen. Other icons are placed on the dock by dragging 
              them to the dock; applications are then launched by simply double-clicking 
              the icon on the dock. Several applets can be docked as well, such 
              as the calendar and CPU meter in Figure 1.
            <p> The menu is accessed by clicking on the background with the right 
              mouse button. The menu itself is a simple text file, but submenus 
              can be directories filled with executables (in which case the menu 
              items are listed as the names of the executables), programs that 
              return menu structures, or internal commands. This provides great 
              flexibility in designing and implementing dynamic menus.
            <p> <b>WindowMaker in a Distributed Environment</b>
            <p> The SunRay architecture is a strange mix of thin client and X. 
              The Xsun server process running on a SunRay server is displayed 
              to the SunRay client device. This makes the clients extremely inexpensive, 
              reducing total cost of ownership. This savings on the client side 
              is offset somewhat by the additional server resources required to 
              run the window manager. However, in the final analysis, it is still 
              a cost-effective desktop.
            <p> SEARHC has three main sites using SunRays. While implementing 
              WindowMaker, we used a single menu for all three sites to keep the 
              menus from diverging. Since each site runs their applications from 
              different servers, we needed a method for selecting the appropriate 
              server for each site, while maintaining a homogeneous menu.
            <p> Listing 1 is a very abbreviated menu. It has two main entries, 
              a regular submenu, a couple of filesystem-based submenus, and a 
              standard "Exit" submenu. Note that most of the menu entries 
              reference files in <b>/usr/local/menu</b>. We decided to place our 
              homegrown menu framework in this single non-standard directory to 
              make maintenance easy. (Listings for this article are available 
              from the <i>Sys Admin</i> Web site: <b>http://www.sysadminmag.com</b>.)
            <p> This is the content of<b> /usr/local/menu</b>:
            <p> 
            <pre>
-rw-r--r--   1 root   other   322 Feb 22 16:18 aliases.razor
-rw-r--r--   1 root   other   219 Feb  2 11:29 aliases.turing
-rw-r--r--   1 root   other   158 Jan 25 10:15 dockinglist
-rwxr-xr-x   1 root   other  1088 Jan 25 10:17 docklinks.pl*
-rwxr-xr-x   1 root   other  1431 Feb 22 16:17 launch.sh*
lrwxrwxrwx   1 root   other     9 Jan 25 09:41 moon -&gt; launch.sh
lrwxrwxrwx   1 root   other     9 Feb  2 15:04 netscape -&gt; launch.sh*
lrwxrwxrwx   1 root   other     9 Jan 25 09:41 raven -&gt; launch.sh*
</pre>
            I'll use <b>/usr/local/menu/netscape</b> in my examples. Notice 
            that the file "netscape" is nothing more than a symbolic 
            link to <b>launch.sh</b>. In fact, <i>all</i> of the menu links are 
            nothing more than symbolic links to <b>launch.sh</b>.
            <p> <b>launch.sh</b> is shown in Listing 2. Because this is the heart 
              of the menu system, I'll discuss the highlights of this script. 
              First, <b>launch.sh</b> ensures that the PATH environment variable 
              is set to included common program directories. This would be customized 
              depending upon a company's local policy.
            <p> Next, <b>launch.sh</b> iterates through the command-line arguments, 
              stripping out the <b>-display</b> options. This is necessary because 
              of the way the dock works (which I will cover in a moment), and 
              the way the SunRay server handles Xsun display names. This step 
              also collects the command line into a single variable,<b> $args</b>. 
              This simplifies program invocation in the last step.
            <p> <b>launch.sh</b> then determines the name of the machine on which 
              it is running. It uses this name to determine the machine from which 
              it should run the menu pick. This customization is kept in the file 
              <b>aliases.&lt;machinename&gt;</b> (Listing 3), where <b>&lt;machinename&gt;</b> 
              is the canonical name reported by <b>uname -n</b>.
            <p> The next step involves the little-used shell variable <b>$0</b>, 
              which is the name of the program being executed. Since the program 
              name is <b>/usr/local/netscape</b> (in this example), that is the 
              contents of <b>$0</b>. Stripping the path part of the command leaves 
              us with "netscape". The <b>grep</b> bit merely determines 
              whether <b>$0</b> is a bare command, or contains a path. If it does 
              contain a path, the <b>sed</b> statement strips out everything before 
              the final <b>/</b>.
            <p> This trick is useful any time you find yourself repeating a command, 
              changing only one parameter. Simply create a single script, and 
              create a symbolic link based on the single parameter you wish changed. 
              There is great precedence in UNIX -- as an example, consider 
              this symbolic link:
            <p> 
            <pre>
ln -s /usr/bin/rlogin /usr/bin/razor
</pre>
            Invoking the command <b>razor</b> will cause rlogin to try to rlogin 
            to the machine named <b>razor</b>.
            <p> Now that we have the name of the program we wish to run, we determine 
              which server to contact. This is where the <b>aliases.&lt;hostname&gt;</b> 
              file comes in. A sample aliases file is in Listing 3.
            <p> <b>launch.sh</b> greps for the command name, then pulls the name 
              of the remote host from there. If there is no entry in the aliases 
              file, <b>launch.sh</b> assumes the command name is also the name 
              of the remote machine. This works particularly well for machines 
              that provide one service. For instance, we run our RPMS medical 
              database on dedicated systems. Those systems are known by their 
              hostnames -- Raven and Moon. This allows an alternative to the 
              <b>/usr/local/menu/aliases.&lt;hostname&gt;</b> file: add an entry 
              to the <b>/etc/hosts</b> file instead, with the IP of the remote 
              host keyed to the name of the command.
            <p> One special alias is "local." An entry assigned to "local" 
              runs on the same server as WindowMaker. Some would prefer no special 
              case; if a command does not appear in the aliases file, it is assumed 
              to be local. This is personal preference. The script could be adjusted 
              to either preference; also, this would do away with the <b>/etc/hosts</b> 
              alternative, which some may prefer.
            <p> Next, <b>launch.sh</b> sets up the remote <b>PATH</b> and <b>DISPLAY</b> 
              environment variables. Since the C shell uses a different syntax 
              from the Bourne and Korn shell, we adjust the commands appropriately. 
              Finally, <b>launch.sh</b> executes the command remotely using <b>rsh</b>.
            <p> The remote command is exactly the same as the symbolic link called 
              from the menu. In this example (<b>/usr/local/menu/netscape</b>), 
              the command will be "netscape". Because <b>/usr/local/bin</b> 
              is guaranteed to be in the path (since we explicitly add it to <b>PATH</b>), 
              "netscape" can be a shell script that resides in<b> /usr/local/bin</b> 
              on the remote machine.
            <p> <b>A Quick Note on rsh and Security</b>
            <p> Many systems administrators consider <b>rsh</b> insecure. This 
              is a valid concern; opening your system to <b>rsh</b> takes careful 
              planning. Both SSH (<b>http://www.ssh.com/</b>) and OpenSSH (<b>http://www.openssh.org/</b>) 
              are excellent and more-secure alternatives, with stronger authentication 
              and stream encryption. The security-minded sys admin should consider 
              <b>ssh</b> or OpenSSH.
            <p> <b>Adding a Menu Item</b>
            <p> Adding a new menu item to WindowMaker is pretty straightforward. 
              Simply add an entry to <b>/usr/local/etc/WindowMaker/WMRootMenu</b> 
              (the menu file, as shown in Listing 1), and make the command <b>/usr/local/menu/&lt;command&gt;</b>. 
              In the directory <b>/usr/local/menu</b>, create a symbolic link 
              from <b>launch.sh</b> to <b>&lt;command&gt;</b>. Add an entry in 
              the <b>alias.&lt;hostname&gt;</b> file, keyed to the name of the 
              remote server, like this:
            <p> 
            <pre>
&lt;remoteserver&gt;: &lt;command&gt;
</pre>
            You can list more than one command per entry.
            <p> This means editing three files instead of one (the <b>WMRootMenu</b>); 
              but for sites with multiple desktop servers, the menu system (including 
              <b>WMRootMenu</b>) can be copied wholesale from one machine to the 
              next, maintaining consistency across all desktops.
            <p> Installing on a new server is quite simple -- just copy the 
              <b>WMRootMenu</b> file, and the contents of <b>/usr/local/menu</b>, 
              to the new desktop server. Then create an <b>aliases.&lt;hostname&gt;</b> 
              file for the new server.
            <p> <b>Using the Dock</b>
            <p> The dock is a convenient feature of WindowMaker. Residing along 
              either side of the workspace, the end user may place often-used 
              application icons in a convenient location. Applications are then 
              available with a double-click on the appropriate icon.
            <p> WindowMaker assigns an icon to each running application. These 
              icons are generally placed at the bottom of the workspace; as more 
              applications are launched, icons collect along the bottom. Each 
              icon is associated with a single running program. For example, if 
              the user launces two copies of <b>xterm</b>, the "icon box" 
              will contain two <b>xterm</b> icons.
            <p> The user may drag one of these icons to the dock. The icon then 
              becomes a persistent part of the desktop, and the user may launch 
              the <b>xterm</b> simply by double-clicking on the icon. When the 
              icon is docked, WindowMaker queries the window for the program name. 
              However, WindowMaker assumes the program was launched from the local 
              machine. This network ignorance results in error messages (like 
              that in Figure 2), as WindowMaker tries to launch the program from 
              the local machine.
            <p> To hack around this problem, I install shell scripts in place 
              of the application. So, using the error message from Figure 2, I 
              install a shell script named <b>/usr/netscape/netscape</b> that 
              simply calls <b>/usr/local/menu/netscape</b>. This ties the docked 
              icons with the script that launches the application. Because I'm 
              lazy, I wrote a Perl script to automate the management of these 
              scripts (Listing 4). This Perl script simply iterates through the 
              file <b>/usr/local/menu/dockinglist</b>, making a customized shell 
              script if the file does not already exist.
            <p> <b>/usr/local/menu/dockinglis</b>t is a simple file, as illustrated 
              in Listing 5 -- it is simply a key, followed by a filename. 
              The key is the same as the file used to launch the application -- 
              in this example, netscape, which <b>docklinks.pl</b> will expand 
              to <b>/usr/local/menu/netscape</b>. The filename should be just 
              as reported in the error window (Figure 2).
            <p> Running the Perl script<b> docklinks.pl</b> (Listing 4) will step 
              through the dockinglist file, creating (on the local machine) the 
              shell scripts necessary to launch the applications from the remote 
              machine. The script will create any required subdirectories, as 
              well.
            <p> <b>It's Not as Complicated as It Seems</b>
            <p> Really, the process is pretty simple, once the infrastructure 
              is in place. Simple follow these easy steps:
            <p> 
            <p> 1. Edit <b>/usr/local/etc/WindowMaker/WMRootMenu</b>. Add an entry 
              for each new application; the executable bit should point to a link 
              in <b>/usr/local/menu</b>.
            <p> 2. Create a link in <b>/usr/local/menu</b>. This should correlate 
              to the <b>WMRootMenu</b> entry from Step 1.
            <p> 3. Add an entry to <b>/usr/local/menu/aliases.&lt;machinename&gt;</b>. 
              Associate the application with its server, so the menu system knows 
              where to go.
            <p> 4. Make sure the application is in the path on the remote server.
            <p> 
            <p> The command from Step 2 should also work on the remote machine. 
              For instance, if we are adding <b>/usr/local/menu/netscape</b> to 
              our menu on Razor, our WindowMaker host, and netscape resides on 
              the server Helios, we must make sure the command <b>netscape</b> 
              is in the path on Helios. The simplest way to accomplish this is 
              to create a script called <b>netscape</b> on Helios, in <b>/usr/local/bin</b>, 
              a directory that is guaranteed to be in the path.
            <p> At this point, the menu pick for "Netscape" should work. 
              Now we have only to make Netscape cooperate with the dock.

            <p> 
            <p> 5. Add the command to <b>/usr/local/menu/dockinglist</b>
            <p> 
            <p> Launch the program (<b>netscape</b>, in our example) from the 
              menu. Dock the resulting icon. Exit the program, then attempt to 
              launch the program from the docked icon. The resulting error message 
              will tell you specifically which command the WindowMaker dock is 
              attempting to run.
            <p> 
            <p> 6. Run <b>docklinks.pl</b>. This will create a shell script in 
              the location the dock expects to find the application.
            <p> 
            <p> At this point, the docked icon should also work.
            <p> <b>Troubleshooting</b>
            <p> Although these troubleshooting tips are geared to Solaris, they 
              can (generally) be applied to other operating systems. Although 
              the names and locations of log files may differ, there should be 
              similar log files on all makes of UNIX (and Linux).
            <p> If you run into problems, you can check the contents of <b>/var/dt/Xerrors</b> 
              for clues. Often the problem is "command not found," or 
              something similar. This indicates that the command being run from 
              <b>/usr/local/menu</b> on the local WindowMaker machine does not 
              have an equivalent command on the remote application server.
            <p> Try running the command in<b> /usr/local/menu</b> by hand (with 
              the DISPLAY environment variable set appropriately, of course). 
              If the application launches successfully, check the menu entry in 
              <b>/usr/local/etc/WindowMaker/WMRootMenu</b>.
            <p> If the application launches properly from the menu, but not the 
              dock, ensure the file (as reported by the error window that WindowMaker 
              should pop up) exists. If it does not, add the appropriate entry 
              to<b> /usr/local/menu/dockinglist</b>. If it does exist, check the 
              type and contents of this file.
            <p> If you get an "unknown host" error in <b>/var/dt/Xerrors</b>, 
              make sure there is a proper entry in<b> /usr/local/menu/aliases</b>.<b>&lt;machinename&gt;</b>, 
              where <b>&lt;machinename&gt;</b> is the canonical name of the local 
              machine as reported by <b>uname</b> <b>-n</b>.
            <p> <b>Conclusion</b>
            <p> This wraps up the tour of SEARHC's ad hoc menu system for 
              WindowMaker. For small installations, where WindowMaker will have 
              only one or two hosts, this may be overkill. But for larger installations, 
              a good menu-management system is needed. Also, the menu system employs 
              a few interesting techniques -- the use of the <b>$0</b> variable 
              in shell scripts, configuration files to control the behavior of 
              the shell scripts, and the automation of shell script creation using 
              Perl. A shell script could handle this last step just as easily, 
              but I enjoyed using Perl. And isn't having fun what it's 
              all about?
            <p> <i>Anthony Taylor is the Senior DBA for Southeast Alaska Regional 
              Health Consortium. He occasionally takes time from his busy day 
              of slacking to simplify his life with rococco menu systems and opaque 
              scripts. He can be reached at: <b>tony@searhc.org</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
