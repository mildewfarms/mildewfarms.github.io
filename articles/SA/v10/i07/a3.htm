<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i07: Interoperating Linux with NetWare</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2001/jul2001.tar"><b class=codeListing>jul2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a3.gif" width="200" height="174" align="right">Interoperating 
              Linux with NetWare</h1>
            <p> <i>A. J. Weinzettel</i>
            <p> Passwords are a necessity in keeping information secure. The drawback 
              is having so many of them -- one for email, one to access files, 
              <b>telnet</b>/<b>ssh</b> sessions, etc. In this article, I will 
              introduce an Apache module that allows users to use their Novell 
              NDS password to access secure Web pages on a Linux Web server. The 
              name of this Apache module is called <b>mod_auth_nds</b>, and it 
              was written by Phillip R. Wilson. A list of software used is provided 
              at the end of this article.
            <p> <b>Recompiling the Linux Kernel</b>
            <p> To install <b>mod_auth_nds</b>, the Linux Kernel will have to 
              be recompiled. Instructions on recompiling the kernel can be found 
              at: <b>http://www.linuxdoc.org</b>. I have tested kernel versions 
              2.2.17, 2.2.18, and 2.4.1 in production environments using <b>mod_auth_nds</b> 
              with no problem. The basic commands for compiling the kernel are 
              also listed below:
            <p> 
            <p> 1. <b>make menuconfig</b> -- This allows you enable certain 
              options in the kernel. <b>Mod_auth_nds</b> requires the following 
              parameters to be enabled inside the Linux kernel:
            <p> 
           Block Devices<br>
            &nbsp;&nbsp;&nbsp;&nbsp;Network Block Device Support
            <p> 
            <p>Networking Options<br>
             &nbsp;&nbsp;&nbsp;&nbsp;IPX Protocol<br>
			 &nbsp;&nbsp;&nbsp;&nbsp;Full Internal IPX Network 
            <p> 
            <p>File Systems<br>
            &nbsp;&nbsp;&nbsp;&nbsp;Networking File Systems<br>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NCP File Systems
            <p> 
            <p> 2. <b>make dep</b> 
            <p> 3. <b>make clean</b> 
            <p> 4. <b>make bzImage</b> 
            <p> 5. <b>make modules </b>
            <p> 6. <b>make modules_install</b> 
            <p> 7. <b>cp ./arch/i386/boot/bzImage /boot/new_kernel</b>
            <p> 8. <b>edit /etc/lilo.conf </b>
            <p> 9. 
            lilo
            <p> 
            <p> Explaining how to set up <b>lilo</b> is beyond the scope of this 
              article, but information can be found at: <b>http://www.linuxdoc.org</b>. 
              Once <b>lilo</b> has been reconfigured to read the new kernel, the 
              machine will have to be rebooted. When the computer is booting up, 
              be sure to choose the new kernel at the <b>lilo</b> prompt if the 
              new kernel was not set to the default in the <b>lilo</b> configuration.
            <p> <b>Setting up Apache for mod_auth_nds</b>
            <p> There are options when installing <b>mod_auth_nds</b>. I chose 
              to compile the module into Apache. If you installed Apache during 
              the installation of Linux or from an RPM, I suggest uninstalling 
              Apache. To uninstall Apache, follow the steps below. The first command 
              is an RPM command that queries the RPM database to see whether Apache 
              is installed.
            <p> 
            <pre>
[aj@desktop aj]$ rpm -qa | grep apache
apache-1.3.12-25
</pre>
            The <b>rpm</b> command returned that Apache 1.3.12 is installed. Generally, 
            there are dependencies that require Apache to be installed. To find 
            out what dependencies are using Apache, try to uninstall Apache (you 
            must be root to do this).
            <p> 
            <pre>
[root@desktop aj]# rpm -e apache-1.3.12-25
error: removing these packages would break dependencies:
        apache = 1.3.12-25 is needed by mod_ssl-2.6.6-25
        webserver is needed by mod_perl-1.24-4
</pre>
            According to my installation, <b>mod_ssl</b> and <b>mod_perl</b> depend 
            on Apache being installed. The dependencies may differ for your installation. 
            I suggest noting those dependencies, removing them, and then reinstalling 
            that software. Below are the steps that I use to uninstall the dependencies, 
            and uninstall Apache:
            <p> 
            <pre>
[root@desktop aj]# rpm -e mod_ssl-2.6.6-25
[root@desktop aj]# rpm -e mod_perl-1.24.-4

[root@desktop aj]# rpm -e apache-1.3.12-25
</pre>
            Next, extract Apache and <b>mod_auth_nds</b> from their compressed 
            format. The command is <b>tar -zxvf filename</b>. This will create 
            a separate directory for each of the files. Under the directory for 
            <b>mod_auth_nds</b>, there will be a file called <b>mod_auth_nds.c</b>. 
            This file will have to be copied under the Apache source tree to <b>apache-1.3.12/src/modules/extra</b>.
            <p> 
            <p> 1. 
		   <b>./configure --sysconfdir=/etc/httpd \<br>
           --datadir=/var/www \ <br>
           --iconsdir=/home/www/icons \ <br>
           --htdocsdir=/home/www/html \ <br>
           --cgidir=/home/www/cgi-bin \ <br>
           --logfiledir=/var/log/httpd \<br>
           --add-module=src/modules/extra/mod_auth_nds.c</b>
            <p> 2. <b>make</b> 
            <p> 3. <b>make install</b>
            <p> <b>Starting and Configuring Apache</b>
            <p> This is just a personal preference, but I like to copy the <b>/usr/local/apache/bin/apachectl</b> 
              file to <b>/etc/rc.d/init.d/httpd</b>. This allows all of the startup 
              files to be kept in one location. To test Apache and make sure everything 
              is working, type in <b>service httpd start</b> from the command 
              prompt. If <b>/sbin</b> is not in <b>$PATH</b>, you will have to 
              type in <b>/sbin/service httpd start</b>. (A note about the service 
              script that comes with Red Hat -- for some versions, you will 
              have to modify the script to make it work, or you can run <b>/etc/rc.d/init.d/httpd 
              start</b>.)
            <p> To see if Apache is running do a process list (<b>ps ax | grep 
              httpd</b>). This should list about five processes that reflect the 
              <b>httpd</b> process. Another test to make sure that Apache is running 
              is to type in <b>lynx localhost</b>. You should get a screen that 
              says something along the lines of "it worked". If none 
              of this is working, take a look at the <b>/var/log/httpd/error_log</b>. 
              This should give you some insight as to why Apache does not want 
              to run.
            <p> Assuming Apache is running with the <b>mod_auth_nds</b> module, 
              it is time to configure Apache to authenticate against the NDS database. 
              Figure 1 is the layout of the NDS tree that I am authenticating 
              against.
            <p> I have a tree with the name of <b>ACME_TREE</b>, an organization 
              of ACME and three organizational units -- one called TENNESSEE, 
              one called OREGON, and another called UTAH. We want to give access 
              to user "feb03112" and access to "ajw02085", 
              but when user "bsh03191" tries to access our secure Web 
              pages, he will be denied access. Below is the Directory entry that 
              I added to <b>/etc/httpd/httpd.conf</b> that allows this type of 
              access:
            <p> 
            <pre>
&lt;Directory "/home/www/html/secrets"&gt;
AuthType Basic
AuthName "Top Secret"
AuthNDSUserFile /home/www/secret_access
       AuthNDSServer SERVER_01 SERVER_02
        AuthNDSContext  .TENNESSEE.ACME .OREGON.ACME
          require valid-user
&lt;/Directory&gt;
</pre>
            The configuration setting is fairly self-explanatory. I am setting 
            up Basic Authentication, with a name of "Top Secret". The 
            file that Apache reads to get a list of people who can access the 
            Web pages is <b>/home/www/secret_access</b>. Once Apache reads the 
            <b>AuthNDSUserFile</b>, it will first authenticate to SERVER_01. If 
            by some chance SERVER_01 is not responding, then try to authenticate 
            to SERVER_02 via NDS. The next part of the configuration file is the 
            context in the NDS Tree where the users are located. The last part 
            of the configuration tells Apache to allow access only to valid users.
            <p> The last part of configuring Apache is to build an access file. 
              This is relatively an easy task. We will give access to user "ajw02085" 
              and "fdb03110" to the "Top Secret" files. The 
              contents of the <b>/home/www/secret_access</b> are as follows:
            <p> 
            <pre>
ajw02085
feb03112
</pre>
            In our configuration of <b>mod_auth_nds</b>, the context was set to 
            <b>.TENNESSEE.ACME</b> and <b>.OREGON.ACME</b>. This allows us to 
            add just the user name with no context appended to the end of the 
            user id. You must be careful though; if you have two users with the 
            same user id this will cause problems. If you do have two users with 
            the same user id, and you want both of them to access the secure Web 
            pages, you must put the full context inside the <b>secret_access</b> 
            file. This means when the user logs into the secure pages, users must 
            enter their full context as their username. All in all, life is much 
            easier when there are not two user ids that are the same.
            <p> <b>Configuring IPX</b>
            <p> After compiling the kernel with IPX support and running on the 
              new kernel, you will need to configure IPX. Other packages also 
              need to be installed before IPX can run. These packages are <b>ipxutils</b> 
              and <b>ncpfs</b>. The author of the module has done a great job 
              of configuring these packages. I strongly suggest downloading these 
              from his Web site. When you are ready to install these packages, 
              make sure they are not already installed by running <b>rpm -qa | 
              grep ipxutils</b> and <b>rpm -qa | grep ncpfs</b>. If either one 
              of the packages are already installed, I suggest uninstalling them 
              with the <b>rpm -e package name</b> command. To install, simply 
              do the following:
            <p> 
            <pre>
rpm -ivh ipxutils-2.2.0.17-3
rpm -ivh ncpfs-2.2.0.17a-2
</pre>
            Now we can move on to configuring IPX. You can use <b>linuxconf</b> 
            to configure IPX, but I prefer to modify files that make up the configuration 
            of IPX. The files are <b>/etc/sysconfig/network</b> and <b>/etc/sysconfig/network-scripts/ifcfg-eth0</b>. 
            The first file that we are going to look at is <b>/etc/sysconfig/network</b>:
            <p> 
            <pre>
NETWORKING=yes
HOSTNAME="server03.acme_co.com"
GATEWAY=10.1.1.1
IPX="yes"
IPXINTERNALNETNUM="0"
IPXINTERNALNODENUM="0"
IPXAUTOPRIMARY="off"
IPXAUTOFRAME="off"
</pre>
            I added the last five lines of the configuration file. Going through 
            the file, we will turn on IPX by saying "IPX=yes". The zero 
            value for the lines <b>IPXINTERNALNETNUM</b> and <b>IPXINTERNALNODENUM</b> 
            is to get the network number and network node number from current 
            values that reside on your network. I am also setting <b>IPXAUTOPRIMARY</b> 
            and <b>IPXAUTOFRAME</b> to off. I do not want the kernel to pick my<b> 
            IPX</b> frame type for me. The frame type will be set in the next 
            configuration file, <b>/etc/sysconfig/network-scripts/ifcfg-eth0</b>:
            <p> 
            <pre>
DEVICE="eth0"
BOOTPROTO="none"
BROADCAST=10.1.255.255
IPADDR="10.1.100.32"
NETMASK="255.255.0.0"
NETWORK=10.1.0.0
ONBOOT="yes"
IPXNETNUM_802_2=""
IPXPRIMARY_802_2="no"
IPXACTIVE_802_2="no"
IPXNETNUM_802_3=""
IPXPRIMARY_802_3="no"
IPXACTIVE_802_3="no"
IPXNETNUM_ETHERII=""
IPXPRIMARY_ETHERII="yes"
IPXACTIVE_ETHERII="yes"
IPXNETNUM_SNAP=""
IPXPRIMARY_SNAP="no"
IPXACTIVE_SNAP="no"
</pre>
            When you look at this file, the IPX entries may or may not be there. 
            If the IPX entries are there, just change the no to yes for the IPX 
            frame type you are running on your network. In my case, I am running 
            ETHERII.
            <p> When you are done configuring IPX, it is time to test and make 
              sure that IPX will bind to the network card. To restart your network 
              settings, you can run <b>service network restart</b> or you can 
              run <b>/etc/rc.d/init.d/network restart</b>. To actually test whether 
              IPX is bound to the card, run the command <b>/sbin/ifconfig</b>. 
              The following is the result of the command on my box:
            <p> 
            <pre>
eth0   Link encap:Ethernet  HWaddr 00:02:B3:0A:20:F2
         inet addr:10.1.100.32  Bcast:10.1.255.255
Mask:255.255.0.0
         IPX/Ethernet II addr:001001E2:0002B30A20F2
         UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
         RX packets:49456814 errors:11 dropped:0 overruns:0 frame:0
         TX packets:6515777 errors:0 dropped:0 overruns:0 carrier:0
         collisions:0 txqueuelen:100
         Interrupt:11

lo     Link encap:Local Loopback
         inet addr:127.0.0.1  Mask:255.0.0.0
         UP LOOPBACK RUNNING  MTU:16192  Metric:1
         RX packets:8599 errors:0 dropped:0 overruns:0 frame:0
         TX packets:8599 errors:0 dropped:0 overruns:0 carrier:0
         collisions:0 txqueuelen:0
</pre>
            The information we are concerned with is the third line for eth0 (<b>IPX/Ethernet 
            II addr:001001E2:0002B30A20F2</b>). This tells me that Ethernet II 
            is bound to the card with the network number of 001001E2 and a node 
            address of 0002B30A20F2. If you did not get the same results, make 
            sure you are running your new kernel with IPX support, have made changes 
            to both the<b> /etc/sysconfig/network </b>and <b>/etc/sysconfig/network-scripts/ifcfg-eth0</b> 
            files, and have restarted the network. If you are still running into 
            problems, check your <b>/var/log/messages</b> file for more information.
            <p> <b>Testing Authentication</b>
            <p> Now that we have gone through this extensive configuration of 
              the Linux Kernel, Apache, and setting up IPX, we can test whether 
              everything works. First, we create a file that we will access in 
              the <b>secret_access</b> directory. The name of the file will be 
              <b>index.html </b>and the contents, for the sake of this article, 
              will be "Congratulations you have found the Top Secret Stuff".
            <p> Here is a quick checklist to make sure everything is correct:
            <p> 
            <p> 1. We are running the new kernel. 
            <p> 2. NCPFS and IPXutils are installed. 
            <p> 3. IPX is configured and bound to the network card. 
            <p> 4. Apache has been installed and configured to use <b>mod_auth_nds</b>.
            <p> 5. The<b> /home/www/html/secret_access/index.html</b> file is 
              created. 
            <p> 6. Is Apache running? (<b>ps ax | grep httpd</b>)
            <p> 
            <p> We are now ready to test our authentication against NDS. Open 
              a browser on a workstation and type in the address of your Web server 
              (<b>http://10.1.100.32/index.html</b>). If that works, proceed with 
              accessing the secret stuff (<b>http://10.1.100.32/secret_access/index.html</b>). 
              You should get a login prompt at this point. Put in the user id 
              of a valid user and the NDS password of that same user. If all is 
              working correctly, you should see the contents of the <b>secret_access</b> 
              file that we created called <b>index.html</b>. If this does not 
              work, refer to <b>/var/log/httpd/error_log</b> for any errors that 
              might have occurred.
            <p> <b>Conclusion</b>
            <p> There are other ways to implement <b>mod_auth_nds</b> and you 
              can also use <b>mod_ssl</b> to create an SSL connection upon login. 
              When users type in their passwords, the passwords do not go over 
              the wire unencrypted. Check out Mr. Wilson's Web site at: <b>http://www.users.drew.edu/~pwilson/mod_auth_nds</b> 
              for more documentation and other configuration properties for Apache.
            <p> Phillip Wilson has created something great with this module. Reducing 
              the number of passwords users have to remember makes administration 
              easier, lowers the total cost of ownership, and makes the user base 
              happier. In reducing the number of passwords, the chance the user 
              community will write down passwords is decreased, which in turn 
              makes for a better security policy. I thank Mr. Wilson for the contribution 
              he has made. When people work together and share ideas to create 
              solutions the possibilities are endless.
            <p> <b>Software Used</b>
            <p> 1. Apache -- <b>http://www.apache.org</b> 
            <p> 2. Kernel -- <b>http://www.kernel.org</b> 
            <p> 3. mod_auth_nds --<b> http://www.users.drew.edu/~pwilson/mod_auth_nds</b>
            <p> 4. ipxutils -- <b>http://www.users.drew.edu/~pwilson/mod_auth_nds</b> 
            <p> 5. ncpfs -- <b>http://www.users.drew.edu/~pwilson/mod_auth_nds</b>
            <p> 6. Novell Netware 5.1 NDS Version 8.59 
            <p> 7. Red Hat Linux version 6.2
            <p> <i>A.J. Weinzettel is a Linux consultant in Chattanooga, Tennessee. 
              He holds a SAIR Linux LCP certification and is working toward SAIR's 
              LCA certification. A.J. can be reached at: <b>aj@linuxaid.org</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
