<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: Quick Network Redundancy Schemes</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a1.gif" width="200" height="174" align="right">Quick 
              Network Redundancy Schemes 
              <p> 
            </h1>
            <i>Leo Liberti</i> 
            <p> Simple bash scripting and IP aliasing can be used to implement 
              quick and easy host redundancy schemes based either on host availability 
              or service availability. In this article, I describe a very simple 
              way to implement such a scheme. The idea sprang from the need to 
              supply a simple redundancy scheme to an HTTP service we have at 
              IrisTech, where I work. The programming involved is limited to bash 
              scripting and the availability of standard UNIX network utilities. 
              This approach makes use of a feature of the Linux kernel, IP aliasing, 
              which provides a neat way to assign more than one IP address to 
              one network card; however, Linux is by no means the only operating 
              system with this property. And even on operating systems without 
              IP aliasing features, there are ways to circumvent this problem 
              (e.g., installing two network cards). 
            <p> Redundancy is useful when you have a computer running a crucial 
              service. To lessen the probability of the service becoming unavailable, 
              one (or possibly more than one) other computer monitors the activity 
              of the service on the main computer. If the service becomes unavailable, 
              there can be one of two reasons: 
            <p> 
            <p> 1. The computer has crashed (or has lost the network connections); 
            <p> 2. The computer is alive but the process running the service has 
              died. 
            <p> 
            <p> The monitoring computer must take different actions according 
              to the nature of the problem. 
            <p> <b>Initial Scenario</b> 
            <p> To put this idea into practice, I will first describe the network 
              setup needed to implement it. Host A (IP address 192.168.1.1 on 
              device <b>eth0</b>) supplies the important service. Host B (IP address 
              192.168.1.2 on device <b>eth0</b>) monitors A and takes action when 
              the important service becomes unavailable. To make things more precise 
              and readily applicable, A runs the HTTP service with an Apache Web 
              server running on port 80, and both A and B run Linux. The version 
              is largely unimportant, as long as it is later than 2.0.1. I advise 
              using the latest stable kernel (as of this writing, 2.2.17). One 
              last requirement is that the two hosts must be on the same IP network. 
              With tremendous effort and deviant hacks, this requirement can be 
              circumvented, but for this discussion I assume that A and B are 
              on the same network. 
            <p> <b>Taking Over a Crashed Server</b> 
            <p> The first step is to make B capable of taking over the service 
              provided by A.This means, first, that Apache must be installed on 
              B (even though it may not be running while A is functioning properly). 
              Second, that B must mirror all data files necessary to the HTTP 
              service. This can be easily implemented with a cron job running 
              <b>rsync</b>, <b>rdist</b>, or other syncronization software. At 
              IrisTech, we use cron on host B to periodically run a bash script 
              which: 
            <p> 
            <ul>
              <li> Mounts the data directory from A to B via NFS, 
              <li> Uses <b>rsync</b> to copy the data from A to B, 
              <li> Unmounts the NFS export. 
            </ul>
            <b>Details</b> 
            <p> Add a line like the following: 
            <p> 
            <pre>
00 4 * * * root /usr/local/sbin/mirror</pre>
            <p> in your <b>/etc/crontab</b>. This means run the <b>mirror</b> 
              script at 4 am each morning. This is the <b>mirror</b> script: 
            <p> 
            <pre>
#!/bin/sh
mount A:/data -t nfs /mnt/A
sleep 25
rsync -a --delete /mnt/A/ /home/data-from-A
umount /mnt/A
  </pre>
            <p> Of course, the details of this script will vary with your network 
              setup. 
            <p> <b>IP Aliasing</b> 
            <p> Now, host B must be made capable of assigning more than one IP 
              address to a single network interface. Under Linux, this can be 
              obtained by rebuilding a kernel with the <b>IP_alias</b> option. 
              Put the following line: 
            <p> 
            <pre>
CONFIG_IP_ALIAS=y
  </pre>
            <p> in the file <b>/usr/src/linux/.config</b>, then run: 
            <p> 
            <pre>
make dep; make clean; make bzImage; make modules; make
modules_install
cp /usr/src/linux/arch/i386/boot/bzImage /boot/vmlinuz-ipalias
  </pre>
            <p> Insert the relevant lines in <b>/etc/lilo.conf</b>, and run <b>lilo</b>; 
              if it produces no errors, reboot. On machines or operating systems 
              without this feature, a second network card can be installed on 
              host B. At this point, B is ready to monitor A and take action should 
              A fail. Recall that B should be able to tackle two problems: a) 
              A crashes or loses the network connection, and b) A loses the service. 
              I will first show how to monitor and take action for the first problem 
              (a). 
            <p> <b>Monitoring the Network Connection</b> 
            <p> Monitoring of A can be obtained by using <b>ping</b>. We embed 
              this command in a bash function <b>pinghost</b>: 
            <p> 
            <pre>
function pinghost() {
  ping -c 1 $1 &gt; /dev/null 2&gt;&amp;1
}
  </pre>
            <p> The option <b>-c</b> <b>1</b> means ''send just one 
              ICMP probe packet''; the default behavior would be to 
              keep sending packets indefinitely towards the target host (in this 
              case, the placeholder <b>$1</b> is used as a target host for <b>ping</b>). 
              Since we are only interested in the return value of <b>pinghost()</b>, 
              we send standard output and standard error to <b>/dev/null</b>. 
              The main bash script runs a loop that calls <b>pinghost() </b>continuously 
              and exits the loop when the target host stops responding to pings: 
            <p> 
            <pre>
while pinghost A
  do
  sleep 10
done
  </pre>
            <p> The instruction <b>sleep 10</b> in the main loop body ensures 
              that ping packets are not sent too frequently. In this case, they 
              are sent every 10 seconds. This parameter can be varied as needed. 
            <p> <b>Substituting the Host</b> 
            <p> In short, <b>pinghost()</b> is used as a functionality test inside 
              a loop. If the test keeps succeeding, we wait 10 seconds, then go 
              back to the start of the loop and repeat the test. If the test fails, 
              we exit the loop and take action: B takes over A. 
            <p> 
            <pre>
apachectl graceful
ifconfig eth0:0 192.168.31.1 up
  </pre>
            <p> Make sure Apache is running on host B, then B is configured to 
              respond to two IP addresses (thanks to the <b>IP_alias</b> kernel 
              feature) on the same network card: its own (on <b>eth0</b>) and 
              the IP address previously assigned to A (on <b>eth0:0</b>). 
            <p> <b>The Complete Bash Script</b> 
            <p> The bash script shown in Listing 1 is an embellishment of the 
              principle expounded above with some user-definable parameters and 
              some logging facilities. This bash script must be installed as <b>/usr/local/sbin/monitor</b>; 
              it depends on directories <b>/usr/local/lib/monitor/log</b> and 
              <b>/usr/local/lib/monitor/bin</b>. The ''take action'' 
              part of the scheme is included in a separate executable bash script, 
              <b>A-noping</b>, to be placed in <b>/usr/local/lib/monitor/bin/</b>, 
              where A is specified as the first argument on the command line of 
              <b>monitor</b>. The second argument specifies whether <b>monitor</b> 
              must continue monitoring after taking action (<b>yes</b>) or not 
              (<b>no</b>). It is also possible to have <b>monitor</b> simply record 
              the event of the crash of A without actually taking any action by 
              making the ''take action'' script <b>/usr/local/lib/monitor/bin/A-noping</b> 
              not executable. (Listings for this article are available from the 
              <i>Sys Admin</i> Web site: <b>http://www.sysadminmag.com</b>.) 
            <p> A typical <b>monitor</b> invocation would be: 
            <p> 
            <pre>
backup.mydomain.com:~# /usr/local/sbin/monitor www.mydomain.com \
    yes
  </pre>
            <p> Taking Over a Crashed Service 
            <p> I will now show how to tackle service problems when A does not 
              lose its network connections. There are two possible approaches: 
            <p> 
            <p> 1. B tells A to respawn the Apache process. 
            <p> 2. B tells A to bring down its network interface and then B takes 
              the place of A as in the previous case. 
            <p> 
            <p> The best results are often obtained by using a combination of 
              these two approaches. The ideal situation would be as follows: B 
              checks whether the Apache process is present on A. If it is not, 
              it tries to respawn apache on A. If it is present, the problem is 
              not easy to solve -- we tell A to lose its network connection 
              and take over its IP address with the <b>IP_alias</b> technique 
              described above. 
            <p> <b>Executing Commands Remotely</b> 
            <p><b> Security Issues</b> -- All of these approaches make use 
              of the concept ''B tells A to do something''. 
              Furthermore, everything B tells A to do requires root privileges 
              on A. To keep this task reasonably simple, the root password of 
              host A must be stored on host B in plain text. This is a very bad 
              idea in regard to security. I recommend that you only implement 
              this scheme if: 
            <p> 
            <ul>
              <li> Your network is behind a very strict firewall; 
              <li> User access to hosts A, B and the network they are on is limited 
                and easily controllable; 
              <li> The data on host A is not terribly important; 
              <li> The root password on host A is different by all other root 
                passwords on the network. 
            </ul>
            <p> If any of these requirements are not met, I suggest you abandon 
              this ''poor man's redundancy scheme'' and 
              go for something more robust. 
            <p> Assuming all of the above requirements are met (or you find a 
              way to ensure root privileges to B on A without storing the root 
              password in plain text), we can go on to modify the <b>monitor</b> 
              script to take care of the new problem. 
            <p> <b>Using rexec</b> -- I will explain how to make B give root 
              commands to A in a totally automated way. To this purpose, I will 
              make use of the <b>rexec</b> service. 
            <p> 
            <p> 1. Make sure the <b>rexec</b> daemon is installed in the <b>inetd</b> 
              services (check <b>/etc/inetd.conf</b>). 
            <p> 2. Make a file <b>.netrc</b> in the home directory of the root 
              user (usually <b>/root</b>) on host B with the following lines: 
            <p> 
            <pre>
machine A
login root
password root_password_on_A
  </pre>
            <p> and give it permissions 400. 
            <p> 3. Test this setup by running an <b>ls</b> command remotely: 
            <p> 
            <pre>
root@B:~# rexec A ls
  </pre>
            <p> The weak link in the security chain is the <b>.netrc</b> file 
              where the root password of host A is stored in plain text. Keep 
              it as safeguarded as possible. 
            <p> <b>Monitoring a Service</b> 
            <p> I will now explain how host B can monitor the HTTP service on 
              host A. To monitor any service, one simply connects to that service 
              and transfers some data. If all goes well, one assumes the service 
              is up and running. To connect to a service manually, the normal 
              <b>telnet</b> client may typically be used. Unfortunately, <b>telnet</b> 
              cannot be automated, because it cannot accept commands from standard 
              input. The alternative is netcat (<b>http://www3.l0pht.com/ weld/netcat/</b>). 
              Along with the freely available source code, you can find netcat 
              precompiled and packaged for most Linux distributions. After netcat 
              is compiled and installed, the binary executable <b>nc </b>should 
              be placed in a directory in your <b>PATH</b> (usually <b>/usr/local/bin</b>). 
            <p> Thus, we have to substitute the monitoring function <b>pinghost() 
              </b>of the script above with the following: 
            <p> 
            <pre>
function pingservice() {
  echo "GET /" | nc $1 80 | grep -qs "&lt;HTML&gt;"
}
  </pre>
            <p> This means connect to port 80 (HTTP) of the host specified in 
              the function argument and execute the command <b>GET /</b>; then 
              scan the output for the string ''<b>&lt;HTML&gt;</b>''. 
              If it is found, return 0 (success), otherwise return non-zero (failure). 
              The options to <b>grep</b> mean ''suppress all visible 
              output''. 
            <p> Service monitoring will take place as in the previous case via 
              a main loop: 
            <p> 
            <pre>
while pingservice A ; do
  sleep 10
done</pre>
            <b>Taking Action</b>
            <p> If the monitoring test fails, the main loop is exited and some 
              action must be taken. As mentioned previously, the strategy to be 
              implemented is the following: 
            <p> 
            <ul>
              <li> Host B checks the process table on host A and verifies whether 
                the Apache process is present. 
              <li> If Apache is not running, respawn the Apache process and try 
                the service monitoring test again. If it succeeds, go back to 
                the main loop; otherwise, continue with next step. 
                <p> 
              <li> The problem is not easy to solve -- Host B tells host A 
                to lose its network connection and then takes over its IP address, 
                effectively ''becoming'' host A.
            </ul>
            <p> <b>Checking Remote Processes</b> 
            <p> Checking the process table for Apache is easy: 
            <p> 
            <pre>
rexec A ps -e | grep -v grep | grep -qs httpd
</pre>
            This command means execute <b>ps -e</b> on host A, then scan the output 
            for the string ''httpd''. If it is found, return 
            0 (success), otherwise return non-zero (failure). The middle pipe, 
            <b>grep -v grep</b> is a technicality; it removes from the process 
            list all <b>grep</b> processes. If you skip this, you risk finding 
            the string ''httpd'' on the process table even 
            when httpd is <i>not</i> running (which would defy the whole purpose 
            of this check). As for the option ''<b>-e</b>'' 
            to the remote <b>ps </b>command, it means ''list all processes''. 
            If it does not work for you, check your local <b>ps</b> man page for 
            the correct option.
            <p> <b>Decisions</b>
            <p> Now we implement the logic to make the necessary choices. In bash, 
              we check return values of a command via the construct:
            <p> 
            <pre>
if command ; then commands ; fi
</pre>
            In this case, we use the following script excerpt:
            <p> 
            <pre>
FLAG=1
if ! rexec A ps -e | grep -v grep | grep -qs httpd ; then
  rexec A apachectl graceful
  sleep 1
  if pingservice A ; then
    FLAG=0
  fi
fi
if [ FLAG==1 ] ; then
  rexec A ifconfig eth0 down
  apachectl graceful
  ifconfig eth0:0 192.168.31.1 up
fi
</pre>
            <b>The Complete Bash Script</b> 
            <p> Listing 2 is a modification of the <b>monitor</b> script above 
              called <b>service-monitor</b>, which completes the discussion. The 
              main difference with the <b>monitor</b> script is that the ''take 
              action'' script is now part of the main script. Consequently, 
              I did not include a device for continuing to monitor the service. 
              If <b>service-monitor</b> succeeds in resuming the service on host 
              A, it keeps monitoring it; otherwise it automatically takes its 
              IP address and then exits. (Otherwise it would just monitor itself, 
              and if the service test should fail for whatever reason, this script 
              would take host B off the network -- a most unpleasant situation.)
            <p> <b>Further Development</b>
            <p> In this article, I tried to show, rather than the scripts themselves, 
              the general approach to quick redundancy schemes and some of the 
              techniques necessary to implement them. The scripts can be modified 
              to accomplish lots of other things, such as better logging, mailing 
              systems administrators automatically when crashes occur, secure 
              communication between the hosts, or even many-hosts redundancy, 
              where lots of hosts monitor each other in order to supply the same 
              service.
            <p> <i>Leo Liberti graduated in Mathematics from Imperial College, 
              London, in 1992 and then received a M.Sc. in Mathematics from Turin 
              University, Italy. He is now a research assistant and part-time 
              system administrator at Imperial College, and the Technical Director 
              at IrisTech, Como, Italy, an Italian firm that supplies customers 
              with Web-based and electronic services. Leo Liberti can be reached 
              at: <b>liberti@iris-tech.net</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
