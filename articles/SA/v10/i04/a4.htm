<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: Minimal Backups</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a4.gif" width="200" height="174" align="right">Minimal 
              Backups 
              <p> 
            </h1>
            <i>Shawn Bayern</i>
            <p> Simple machines deserve simple, inexpensive backup plans. Good 
              tape drives, network arrays, and commercial backup software can 
              be expensive, and for many small but important systems, traditional 
              expensive solutions can be overkill.
            <p> On the other hand, hard disks are plentiful and cheap, and they 
              function fine as backup devices for systems with relatively modest 
              backup demands. For several of my systems, I've written and 
              deployed a simple, one-script backup program that can use an extra 
              hard drive. The script offers incremental and full backups using 
              only a handful of lines of shell-script code, and like most scripts, 
              it's easily customized for your own environment.
            <p> Admittedly, this script is appropriate only for relatively small 
              machines. In the interest of simplicity, it doesn't take advantage 
              of potential optimizations for speed, disk usage, and so on. Furthermore, 
              using an extra disk drive as a destination for backups isn't 
              always appropriate. For example, if you need your backup media to 
              be frequently transported off-site, hard disks are probably not 
              right for your need. However, my script should work nicely with 
              volumes mounted over NFS, JAZ drives, or other mountable media, 
              so it might still be useful to you if off-site backups are a requirement.
            <p> This script (Listing 1) is intended to run once per backup period 
              (e.g., day). The line beginning <b>DEST_DIR</b> points to the directory 
              (presumably, on a mounted volume separate from the data that's 
              being backed up) that will receive the backups. <b>BACKUP_TIMESTAMP</b> 
              points to a file that is important only because of its inode's 
              <b>mtime</b>, which is managed by the backup program. If this file 
              doesn't exist, the backup script performs a full (not incremental) 
              backup; otherwise, it backs up only those files that have an <b>mtime</b> 
              later than the <b>mtime</b> of the timestamp file. (Thus, whenever 
              you desire a full backup, you can simply erase this timestamp file.)
            <p> The script simply uses <b>find</b> to find all files modified 
              since the last backup ran, and it simply uses <b>cp</b> to copy 
              them to a predefined destination directory. The appropriate flags 
              for <b>cp</b> (in this case, <b>-aP</b>) may need to vary depending 
              on operating system or specific situation. The flags I've demonstrated 
              are appropriate for the version of <b>cp</b> from the Free Software 
              Foundation (as part of GNU fileutils 4.0x), and I've chosen 
              to preserve as much information as possible about the original files 
              (e.g., owner, permissions) in the versions copied to the backup 
              directory. I recommend the GNU version of <b>cp</b> because it takes 
              a flag <b>--target-directory</b> that simplifies the syntax; if 
              your version of <b>cp</b> doesn't, you'll need to modify 
              the script. (You can find out more about GNU fileutils, including 
              information about where to download it, from:
            <p> 
            <pre>
http://prep.ai.mit.edu/gnulist/production/fileutils.html
</pre>
            The backup script segregates distinct runs of backup by date, creating 
            subdirectories off of your main backup directory that are named by 
            date. It's easy to find different versions of an incrementally 
            modified file. To find all versions of <b>/usr/local/etc/backup.sh</b>, 
            for example, you could run:
            <p> 
            <pre>
% ls -l $DEST_DIR/*/usr/local/etc/backup.sh
</pre>
            where <b>DEST_DIR</b> has the same value as it does in your copy of 
            the script. Writing scripts to automate file restorations for various 
            environments is, therefore, almost trivial.
            <p> One more piece of the script deserves explanation. The string 
              passed to <b>egrep</b> excludes files in particular directories 
              from backup. I've chosen not to back up <b>/proc</b>, <b>/tmp</b>, 
              and <b>/dev</b> (and, of course, <b>/hd2</b>, which is the destination 
              for backups). My goal, in addition to showing you a particular script 
              that may simplify an important task, is to demonstrate how straightforward, 
              scripted solutions are both easy to develop and widely useful on 
              UNIX systems. They still have a place in the modern systems administrator's 
              arsenal, amidst expensive and more complex solutions.
            <p> <i>Shawn Bayern is a systems programmer in Yale University's 
              ITS Technology and Planning group. As a student and, more recently, 
              a staff member at Yale, he has administered (and written scripts 
              for) systems that serve over 20,000 users. Shawn Bayern can be reached 
              at: <b>shawn.bayern@yale.edu</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
