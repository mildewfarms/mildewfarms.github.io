<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: Using One Script to Back Up Linux and Solaris</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a2.gif" width="200" height="174" align="right">Using 
              One Script to Back Up Linux and Solaris 
              <p> 
            </h1>
            <i>Clark Cooper</i>
            <p> Backups are one of many critical tasks systems administrators 
              must perform. Unfortunately, we too often hear horror stories of 
              those who have not done them. This article introduces two shell 
              scripts, <b>Backup.sh</b> and <b>Restore.sh</b>, which can be used 
              to handle <b>cpio</b> backups and restores for an administrator 
              needing a simple solution.
            <p> With a desire to have backup and restore scripts that can function 
              across both Linux and Solaris using a native command, <b>cpio</b> 
              was chosen as the archive method. Attempts with <b>tar</b> on Solaris 
              showed that the shipping version would not back up the root file 
              system as a relative path. Alternatively, the recommended Solaris 
              method of <b>ufsdump</b> was not included with Linux. Using <b>cpio</b> 
              itself did not come without problems. The GNU version typically 
              used on Linux appeared to output everything to standard error. For 
              instance, the following should have created two files, one for stdout 
              and the other for stderr:
            <p> 
            <pre>
find . -print | cpio -oacBv -O /dev/st0 1&gt;/tmp/files 2&gt;/tmp/files.err
</pre>
            Instead, output for both stdout and stderr were directed to <b>/tmp/file.err</b>. 
            Because there was a need to have these in their respective files, 
            a workaround had to be implemented. Both scripts have been tested 
            with Red Hat Linux 7 and Solaris 2.x.
            <p> Warning! Testing is essential for any backup and recovery process. 
              All backup and restore operations mentioned in this article should 
              be tested before production usage. Also, running applications may 
              need to be shut down before using this backup. Consult your application's 
              documentation for backup requirements.
            <p> All code for this article is available for download from the <i>Sys 
              Admin</i> Web site at:
            <p> 
            <pre>
http://www.sysadminmag.com
Backup Features</pre>
            
              <li> A backup completion email is sent to a defined recipient. An 
                example of a successful email message is as follows:
            
            <pre>
The backup on testbox to device /dev/rmt/0 was \
successful. See testbox:/var/log/backup_0.11222000 \
for a list of files backed up.
</pre>
            
              <li> The backup script with no parameters will back up all locally 
                mounted file systems to the tape device defined by <b>$TAPE_DEVICE</b>. 
                You can optionally pass the tape device or file systems to be 
                backed up as parameters. 
              <li> All backup log files are named according to the tape device 
                used and the date. The following running example of <b>backup.sh</b> 
                created a log file named "backup_0_11142000":
            
            <pre>
# /usr/local/Backup.sh
***Rewinding tape device /dev/rmt/0...
***Backing up /export/home /opt /var /
 To view files as they are backed up, "tail -f \
   /var/log/backup_0.11142000"
</pre>
            This allows you to monitor the files as they are being backed up or 
            later search for a file's backup status. Because the backup logs 
            are unique, they must be maintained. This can be achieved by defining 
            a rotation period. Any logs exceeding this period in days will be 
            removed.
            <p> 
            
              <li> You may define a list of errors that can be ignored. If the 
                backup script is reporting an error for something that is of no 
                concern (e.g., No such file), you may exclude this error so that 
                successful messages are received. You may also define a list of 
                directories or files to exclude from the backup.
            
            <b>Restore Features</b>
            <p> 
            
              <li> The restore script (<b>Restore.sh</b>) prompts the user for 
                a list of files or directories to restore. For example:
            
            <pre>
# /usr/local/lbin/Restore.sh

Enter filenames or directories to restore (End with a ".") 
NOTE:  Directories should be followed with a "/*"
       Example /home/*

/var/mail/*
/home/user/filename
</pre>
            You may restore to an alternate directory. As follows:
            <p> 
            <pre>
Would you like to restore to an alternate directory? (y/n): y
Please enter the alternate directory to restore to: /tmp
</pre>
            Because the backups are done as an absolute path:
            <p> 
            <p> 
            
              <li> You may restore the file or directory elsewhere, allowing you 
                to keep the current file or directory intact. If you don't 
                restore to an alternate directory, the current file or directory 
                will be overwritten. 
              <li> Restores are recorded into a file. This allows you to monitor 
                the restore in progress:
            
            <pre>
***Rewinding tape device /dev/rmt/0...
***Restoring  =&gt; /tmp
 To view files as they are restored, "tail -f /tmp/files_restored"
</pre>
            or search for a file's restore status at a later time. Note above 
            that we are restoring to an alternate directory of <b>/tmp</b>. If 
            we had chosen not to install to an alternate directory, this would 
            have been <b>/</b>.
            <p> <b>Configuration</b>
            <p> The following steps comprise the minimum that should be done to 
              get the setup working:
            <p> 
            <p> 1. If you do not want to use the <b>-d</b> option to pass the 
              tape device, modify <b>TAPE_DEVICE</b> in both <b>Backup.sh</b> 
              and <b>Restore.sh</b> to reflect the device you want to use. 
            <p> 2. In <b>Backup.sh</b>, check <b>EmailRecipients</b> to reflect 
              any email addresses to which a completion status should be sent.
            <p> <b>Script Operation</b>
            <p> The backup script takes two optional parameters and does not require 
              any user input:
            <p> 
            <pre>
Usage: ./Backup.sh [-d tape_device] [-f /dirone /dirtwo /dirthree...] [-?]


All arguments are optional and will override their respective \
definitions in ./Backup.sh.


-d tape_device is the backup device (e.g., /dev/rmt/0).


-f defines which file systems to back up. If not passed, all \
locally mounted file systems will be backed up.
</pre>
            The script can be put into cron for automation. Here is an example 
            cron entry for every weekday night at 11:00 pm:
            <p> 
            <pre>
0 11 * * 1-5 /usr/local/lbin/Backup.sh &gt;/dev/null 2&gt;&amp;1
</pre>
            The restore script takes one optional parameter, which can be used 
            to specify the tape device you want to use:
            <p> 
            <pre>
# ./Restore.sh -?
Usage: ./Restore.sh [-d tape_device]


  -d tape_device is the backup device (e.g., /dev/rmt/0). Optional \
  and will override $TAPE_DEVICE in ./Restore.sh.
</pre>
            Input from the user in the form of the full path of the file or directory 
            to be restored is required. Any directories to be restored should 
            be appended with <b>/*</b> (see example under "Restore Features" 
            above). This is not absolutely necessary if the directory currently 
            exists. <b>Cpio</b> requires directory restores to be appended with 
            <b>/*</b>. However, the restore script checks whether the requested 
            restore is an existing directory and, if not appended with <b>/*</b>, 
            will correct the entry. Be aware that if the requested directory is 
            not appended with <b>/*</b> and only exists on tape, the directory 
            will not be restored. After all files and directories to be restored 
            have been named, enter a <b>.</b> to go on to the next step. You will 
            then be asked whether an alternate directory is desired. Following 
            this, the restore will begin.
            <p> <b>Recovery by Hand</b>
            <p> If you need to recover complete file systems by hand with the 
              <b>cpio</b> command, use the following guidelines to restore from 
              the archive (<b>tape_device</b> represents the device, e.g., <b>/dev/rmt/0</b>).
            <p> 
            <p> 
            
              <li> Root File System Only:
            
            <p> Use the <b>-f</b> option with <b>cpio</b> to exclude all non-root 
              file systems backed up as demonstrated with<b> /var</b> and <b>/home</b>:
            <p> 
            <pre>
cpio -icBdumv -I tape_device -f "var/*" "home/*"
  </pre>
            
              <li> Selective File Systems:
            
            <p> Specify the file system(s) as shown here for restoring <b>/usr</b> 
              and <b>/export</b>:
            <p> 
            <pre>
cpio -icBdumv -I tape_device "usr/*" "export/*"
  </pre>
            
              <li> Everything on Tape:
            
            <p> Do not enter any patterns as shown below:
            <p> 
            <pre>
cpio -icBdumv -I tape_device
  </pre>
            <b>Limitations</b>
            <p> These backup and restore scripts are not designed to span across 
              multiple tapes on one device. Therefore, these scripts should only 
              be used when you have a tape device that can back up all desired 
              data onto one tape. However, if you have multiple tape devices, 
              you can break up the backup to fit onto multiple tapes. Use the 
              <b>-d</b> and <b>-f</b> options to make these definitions (see Script 
              Operation). Backups are done as full. Incremental backups are not 
              optional.
            <p> <i>Clark has worked as a systems administrator and/or client support 
              for nine years. He is currently employed by VC3 Inc. and can be 
              reached at: <b>Clark.Cooper@vc3.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
