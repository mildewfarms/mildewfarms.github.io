<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b><img src="../../resource/questions.gif" width="200" height="100" align="right">Questions 
              and Answers</b></h1>
            <p> <i>Jim McKinstry and Amy Rich</i>
            <p><i> </i><b><font size="+2">Q</font></b> I would like to be able 
              to automate the creation of a mail message (on Solaris 2.6) that 
              includes an attachment and then send that message onto its destination 
              addresses. However, it appears that, at least with <b>dtmail</b> 
              and <b>pine</b>, this cannot be done. For instance, with <b>dtmail</b>:
            <p> 
            <pre>
# dtmail -a file_to_attach -T destination_addresses
</pre>
            starts up the application and waits for user intervention to press 
            "send". (This also appears to be the case with Microsoft's 
            Outlook.) Is there a way around this issue?
            <p> <b><font size="+2">A </font></b> If you want to send an attachment 
              without user intervention, you need to use a mailer that supports 
              command-line batching mode and does not drop the user into an interactive 
              editor. You have several options described on the "Sending 
              email with attachments on UNIX systems" page:
            <p> 
            <pre>
http://www3.primushost.com/~kylet/unix-att.html
</pre>
            I think the best of these options is either installing <b>mutt</b>:
            <p> 
            <pre>
http://www.mutt.org/
</pre>
            or MetaMail:
            <p> 
            <pre>
ftp://thumper.bellcore.com/pub/nsb/
</pre>
            <b> mutt</b> can be invoked from the command line as follows:
            <p> 
            <pre>
mutt -s "This is a picture." -a picture.gif recipient@address.com &lt; /dev/null
</pre>
            Syntax with MetaMail would be:
            <p> 
            <pre>
metasend -b -t recipient@address.com -s "This is a picture." -m image/gif -f picture.gif
</pre>
            These commands send <b>picture.gif</b> as a MIME attachment to <b>recipient@address.com</b> 
            with the subject <b>This is a picture</b>. The <b>-b</b> flag in <b>metasend</b> 
            tells it that you want to complete this in batch mode, without user 
            intervention. The same effect is reached by using <b>&lt;/dev/null</b> 
            as file redirection for the message body with the <b>mutt</b> command. 
            You can also add any other text body with the <b>mutt</b> command 
            line by redirecting it from a file. If no file is specified, then 
            <b>mutt</b> will enter interactive mode.
            <p> To make sending your attachments easier with MetaMail, you may 
              want to take a look at two scripts that automate determining the 
              MIME attachemnt type:
            <p> 
            <pre>
sendfile &lt;http://www.oase-shareware.org/shell/scripts/cmds/sendfile&gt;, and
getmimetype &lt;http://www.oase-shareware.org/shell/scripts/cmds/getmimetype&gt;</pre>
            <b><font size="+2">Q</font></b> Can you use <b>growfs</b> to extend 
            a file system after adding a new disk on Solaris 2.6? If so, please 
            explain it or point me to a site that can detail the procedure.
            <p> <b><font size="+2">A </font></b> <b>Growfs</b> is part of the 
              DiskSuite package, not part of any base Solaris OS version. DiskSuite 
              is supported under 2.5, however, so you can use <b>growfs</b>.
            <p> If you've added a new disk to your system, you need to make 
              that disk part of a metadevice before you can expand the filesystem. 
              If you don't know anything about using DiskSuite, you'll 
              probably want to read through the DiskSuite User's Manual on 
              <b>http://docs.sun.com/</b> first. The specifics on how to use <b>growfs</b> 
              for DiskSuite 4.0 can be found at:
            <p> 
            <pre>
http://docs.sun.com/ab2/@LegacyPageView?Ab2Lang=C&amp;Ab2Enc=iso-8859-1&amp;
toc=SUNWab_68_1%3A%2Fsafedir%2Fspace3%2Fcoll1%2FSUNWabmd%2Ftoc%2
FDISKSUITEADMIN%3A1182;bt=Solstice+DiskSuite+4.0+Administration+Guide;
ps=ps%2FSUNWab_68_1%2FDISKSUITEADMIN%2F11.Expanding_a_File_System#3</pre>
            <b><font size="+2">Q</font></b> I have a Solaris 8 system and I want 
            to set up IMAP over SSL so my users are not passing their passwords 
            in clear text when they check mail from offsite. How can I do this 
            cheaply?
            <p> <b><font size="+2">A </font></b> There are a number of commercial 
              packages that will serve IMAP over SSL, but if you want something 
              free, you probably want to pick your favorite IMAP daemon and wrap 
              it with something like <b>stunnel</b>. Your biggest pain on Solaris 
              is going to be the lack of a <b>/dev/urandom</b> for OpenSSL. I 
              suggest picking up something third party like the entropy-gathering 
              daemon. Steps to take are:
            <p> 
            <p> 1. Download, compile, install, and configure your favorite IMAP 
              daemon. UW, cyrus, and courier are all very popular.
            <p> 2. Download and install some form of random generator, like <b>egd</b> 
              (<b>http://www.lothar.com/tech/crypto/</b>).
            <p> 3. You should probably grab TCP wrappers, too:
            <p> 
            <pre>
ftp://ftp.porcupine.org/pub/security/index.html
</pre>
            so that you can limit access to various sites (and it's required 
            if you want to do redirection to the actual IMAP port, instead of 
            just running IMAP/SSL directly).
            <p> 4. Start your random generator and download, compile, and install 
              OpenSSL (<b>http://www.openssl.org</b>) with <b>libwrap</b> and 
              <b>egd</b> support.
            <p> 5. Download, compile, and install <b>stunnel</b> with <b>egd</b> 
              support.
            <p> 6. Add the following entry to <b>/etc/services</b>:
            <p> 
            <pre>
imaps           993/tcp
</pre>
            7. Start up <b>stunnel</b> in one of two ways:
            <p> a. Standalone IMAP/SSL daemon:
            <p> 
            <pre>
/usr/local/sbin/stunnel -d imaps -l /path/to/your/imapd
</pre>
            b. Run the IMAP daemon on port 143, and then redirect connections 
            to <b>stunnel</b> on port 993 to the locally running daemon on port 
            143.
            <p> 
            <pre>
/usr/local/sbin/stunnel -d imaps -r imap
</pre>
            Put an entry for your IMAP daemon in <b>/etc/inetd.conf</b> and use 
            TCP wrappers to limit IMAP connections to localhost.
            <p> <b><font size="+2">Q</font></b> I've just been hired at a 
              site where the previous network admin is no longer available. They 
              have a lot of password-protected Cisco kit (2500 series routers, 
              cat5000s, a PIX, etc.), to which no one knows the password. How 
              do I recover the passwords without wiping out all of the configurations?
            <p> <b><font size="+2">A </font></b> Cisco lists password recovery 
              techniques for their gear at:
            <p> 
            <pre>
http://www.cisco.com/warp/public/474/index.shtml
</pre>
            The one limitation is that you have to have physical access to the 
            machine (and it therefore needs a physically connected console terminal).
            <p> <b><font size="+2">Q</font></b> I'm trying to get X forwarding 
              working with OpenSSH 2.2.0p1 and Solaris 8. I've compiled OpenSSH 
              from source and edited <b>/usr/local/etc/sshd_config</b> to have:
            <p> 
            <pre>
Protocol 2,1
X11Forwarding yes
</pre>
            I'm still not getting any DISPLAY set, however. <b>/usr/local/etc/ssh_config</b> 
            claims to have site-wide defaults, and it already has the option I 
            want (<b>ForwardX11 yes</b>). What am I missing?
            <p> <b><font size="+2">A </font></b> OpenSSH installs with the things 
              in <b>/usr/local/etc/ssh_config</b> commented out. The message at 
              the top of this file is misleading. <b>/usr/local/etc/ssh_config</b> 
              is the file for site-wide defaults, but the items that are commented 
              out are not the default installed options. If you want to forward 
              X11 packets, you need to uncomment the line that says <b>ForwardX11 
              yes</b>. You can also test X11 forwarding by specifying <b>ssh -X</b>. 
              If this doesn't fix your problem, you may want to run <b>ssh 
              -v</b> to see where you're having issues.
            <p> <b><font size="+2">Q</font></b> I want to keep track of the stuff 
              I install on my Sparc. How do I make my own Solaris packages? How 
              do I upgrade a package once I have it installed?
            <p> <b><font size="+2">A </font></b> Once you've installed the 
              package, there is no reliable way to do an upgrade, per se. You 
              can either remove the old package first and then install the new 
              one, or you can leave the old one in place and just install over 
              it. If you leave the old package in place, it may leave around old 
              files that are no longer used in the new version of the software. 
              If you are going to remove the old package, be sure to remove the 
              old package <i>before</i> you install the new one. If you remove 
              the old package after installing the new one, there's a good 
              chance that you will delete part of the new installation if the 
              two installations share the same files.
            <p> Making Solaris packages is accomplished with the tools <b>pkgproto</b> 
              and <b>pkgmk</b>. This method of creating a package will work with 
              most software programs. There are some, however, that are very picky 
              about where they install:
            <p> 
            <p> 1. Download, compile, and install your software.
            <p> 2. Create a temporary alternate root directory where you will 
              "install" your package. Building a package prototype requires 
              that you know where all of the files were installed and what permissions 
              they were given.
            <p> 3. In your Makefile, change the destination root directory to 
              the <b>tmp</b> space you created above. Now do another make install 
              so that all of your files are "installed" into your alternate 
              root directory.
            <p> 4. Change directory to your alternate root and run the following 
              command to create a listing of all the files that you just "installed". 
              Anything in the following examples that specifies <b>/tmp</b> can, 
              of course, be any directory you have write access to:
            <p> 
            <pre>
find . -print | pkgproto &gt; /tmp/prototype
</pre>
            5. Add the following to the top of <b>/tmp/prototype</b>:
            <p> 
            <pre>
!search
</pre>
            all the paths needed for the install, e.g., <b>/usr/local/bin</b>, 
            <b>/usr/local/man</b> <b>/usr/local/man/man1</b>, etc.
            <p> 
            <pre>
i pkginfo=/tmp/pkginfo
</pre>
            6. Create the above mentioned <b>pkginfo</b> file in <b>/tmp</b>. 
            The <b>pkginfo</b> man page will give you a listing of all the tags 
            you can put in this file. Here is an example for screen:
            <p> 
            <pre>
PKG="screen"
NAME="Screen 3.9.8"
VERSION="3.9.8"
ARCH="sun4u"
CLASSES="none"
CATEGORY="utility"
VENDOR="GNU"
PSTAMP="4thSep00"
EMAIL="request@gnu.ai.mit.edu"
ISTATES="S s 1 2 3"
RSTATES="S s 1 2 3"
BASEDIR="/"
</pre>
            7. Create the package in datastream format.
            <p> 
            <pre>
cd /tmp
pkgmk -o -d $PWD -f ./prototype
</pre>
            If you need to use the package in directory format (say for Jumpstart), 
            you can use the <b>pkgtrans</b> command to convert from one format 
            to another. From the directory that the screen package is in (and 
            the package name is <b>screen.pkg</b>):
            <p> 
            <pre>
pkgtrans -s . screen.pkg screen</pre>
            <b><font size="+2">Q</font></b> I have seen different names on the 
            Ethernet card device in Sun Solaris. The ones I have seen are <b>hme</b>, 
            <b>le</b>, <b>ie</b>, <b>elx</b>, and <b>qfe</b>. Why do they have 
            different names? Are there any more of these that I have not seen? 
            Is the name dependent on the Solaris version (2.4, 2.5, 2.6, 7, 8) 
            or is it dependent on hardware and/or drivers? Is it a different name 
            in the Intel version of Solaris?
            <p> <b><font size="+2">A </font></b> These are all Sparc-based network 
              device drivers. Solaris 1.x and 2.x support many different types 
              of network cards and have various device drivers. As far as I know, 
              there is no canonical list because anyone can write a network device 
              driver for any sort of network card out there.
            <p> For supported x86 cards, visit:
            <p> 
            <pre>
http://http://docs.sun.com/ab2/coll.610.1/x86HW/@Ab2PageView/1214?Ab2Lang=C&amp;Ab2Enc=iso-8859-1
</pre>
            under the listings for Network Adapters. For supported cards on the 
            more recent Sparc platforms, visit:
            <p> 
            <pre>
http://docs.sun.com/ab2/coll.28.21/@Ab2CollView?Ab2Lang=C&amp;Ab2Enc=iso-8859-1
</pre>
            under FDDI, hme, GigE, quad fast, atm, and HSI.
            <p> The man page for each device driver should detail its specifications.
            <p> <i>Jim McKinstry is a Senior Sales Engineer for MTI Technology 
              Corporation (<b>www.mti.com</b>). MTI is a leading international 
              provider of data storage management products and services. He can 
              be reached at: <b>jrmckins@yahoo.com</b>.</i>
            <p> <i>Amy Rich, president of the Boston-based Oceanwave Consulting, 
              Inc. (<b>http://www.oceanwave.com</b>), has been a UNIX systems 
              administrator for more than five years. She received a BSCS at Worcester 
              Polytechnic Institute, and can be reached at: <b>arr@oceanwave.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
