<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: Automatically Restart Login Services on a Remote Host</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a10_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a10.gif" width="200" height="177" align="right">Automatically 
              Restart Login Services on a Remote Host 
              <p> 
            </h1>
            <i>Hiu F. Ho</i>
            <p> If you manage a server that is offsite, one of the worst things 
              that can happen is that you can no longer log onto it, and you have 
              to spend hours driving to the server in order to fix the problem. 
              A number of problems, ranging from hardware failures to software 
              problems, can keep you out of touch with your remote servers. For 
              software-related problems, however, it may be possible to let the 
              server automatically resuscitate your login service.
            <p> I live in Maryland, but I need to manage a FreeBSD Web server 
              in New Jersey. (It's a personal Web server that is co-located 
              at a Web-hosting company's data center.) For security reasons, 
              the only way I can log onto the server is to use Secure Shell (<b>ssh</b>). 
              The problem is, if <b>sshd</b> (Secure Shell daemon) has died for 
              some reason, I will either have to drive three hours to the data 
              center to restart <b>sshd</b>, or call someone at the data center 
              to press the reset button to reboot my FreeBSD box (and who knows 
              what damage that will do to the file system).
            <p> UNIX's login services are usually very stable and seldom 
              crash. However, I wrote a small Perl script to prepare for the worst 
              and with the help of the cron utility, I now have a server that 
              can restart <b>sshd</b> if it is killed unintentionally. This works 
              in most cases, except for cases of system or hardware-related problems.
            <p> The idea is simple -- a cron job is set up to run the Perl 
              script every few minutes, and the script checks whether <b>sshd</b> 
              is currently running. If it's not, it starts the <b>ssh</b> 
              daemon. This procedure will not solve all login problems, but it 
              is the least you can do to keep the login service alive without 
              purchasing any new hardware and services.
            <p> <b>Setting Up</b>
            <p> To begin, you must log in as root. Listing 1 shows the Perl script 
              (<b>chk-sshd.pl</b>) I created to start <b>sshd</b> whenever necessary. 
              There are two things to specify in the script. First, you need to 
              specify the name of the login process. To find out the process name 
              of your login daemon, start the login service (if it's not 
              already started), then use <b>ps</b> to list all the processes that 
              are currently running and look for the name:
            <p> 
            <pre>
$ ps ax
PID TT STAT  TIME COMMAND
...
162 ?? Is    0:00.99 moused -p /dev/psm0 -t auto
202 ?? Is    0:46.00 /usr/local/sbin/sshd
238 ?? S     0:02.46 /usr/interbase/bin/gds_lock_mgr
...
</pre>
            Because I'm running <b>sshd</b> as my only login service, I copy 
            the command section of the <b>sshd</b> line (<b>/usr/local/sbin/sshd</b>) 
            and put it into my Perl script's line #7.
            <p> Next, specify the path to the login daemon that you want the script 
              to start in line #13 of the script. In my case, I can use the <b>which</b> 
              command to get the full path to <b>sshd</b>:
            <p> 
            <pre>
$ which sshd
/usr/local/sbin/sshd
</pre>
            Leave the rest of the script as is (unless you know what you're 
            doing).
            <p> The first thing the script does is to get a list of the currently 
              running processes (line #19). Then it examines the list to see if 
              <b>sshd</b> is currently running (line #24 - #28). The script will 
              start the <b>sshd</b> if the process doesn't exist in the list 
              (line #34 - #36).
            <p> After you save the script, remember to <b>chmod</b> and <b>chown</b> 
              the script file so it can <i>only</i> be read, written, and run 
              by root.
            <p> 
            <pre>
$ chmod 700 chk-sshd.pl
$ chown root chk-sshd.pl
</pre>
            After creating the script, you need to add a new cron job for root. 
            If a crontab file already exists, you can simply add the following 
            line to the file. If you don't already have a crontab file, simply 
            create a file and name it whatever you want (e.g., mycrontab) and 
            add the following line to the file:
            <p> 
            <pre>
0,5,10,15,20,25,30,35,40,45,50,55 * * * * /root/chk-sshd.pl
</pre>
            You may need to change the path to your Perl script at the end of 
            the above line. After adding the line to your crontab file, rerun 
            crontab with the crontab file you just modified:
            <p> 
            <pre>
$ crontab -u root mycrontab
</pre>
            Now you should have a diehard login service running on your server.
            <p> <b>Testing</b>
            <p> The simplest way to test whether it work is to kill your login 
              service, so in my case:
            <p> 
            <pre>
$ killall -9 sshd
</pre>
            then wait several minutes and check if your login service is being 
            restarted. (Don't do this on a remote server unless you're 
            certain everything is set up correctly.) In my case, (five minutes 
            after I killed <b>sshd</b>):
            <p> 
            <pre>
$ ps ax | grep sshd
54441 ?? Ss 0:00.70 /usr/local/sbin/sshd
</pre>
            It's alive, again!
            <p> <b>Summary</b>
            <p> After completing the above steps, you should have a server that 
              is able to resuscitate its login service after the login daemon 
              dies. Keep in mind that this won't solve all the login problems 
              you might encounter, but it's the least you can do to recover 
              the login service without any additional hardware or human support.
            <p> <i>Hiu Ho is a Senior Software Engineer at Netword, and the creator 
              of the Netword Agent for Linux. Hiu Ho can be contacted at: <b>hiu@netword.com</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
