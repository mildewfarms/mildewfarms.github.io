<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i04: A MIME Is a Terrible Thing to Waste</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/apr2001.tar"><b class=codeListing>apr2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/perl.gif" width="150" height="150" align="right">A 
              MIME Is a Terrible Thing to Waste 
              <p> 
            </h1>
            <i>Randal L. Schwartz</i>
            <p> The Multipurpose Internet Mail Extensions (MIME) standard has 
              been around for nearly a decade, but has only recently become popular. 
              This is probably because of the higher bandwidth data connections 
              available for email, as well as the advent of the Web, and the desktop 
              horsepower required to make things that are fancier than plain text 
              (or should that be <b>text/plain</b>)?
            <p> MIME is both a blessing, and a curse, in my opinion. It's 
              cool that I can send a PDF or a JPEG to a friend as an attachment, 
              and know that I don't need to figure out if they have a uu-decoder 
              or a shell to extract from a sharchive. It's bad, however, 
              because a lot of mail that is really just plain old text is being 
              sent as HTML mail or the very popular "multipart/alternative" 
              mail.
            <p> Why is this bad? Well, for one, I don't think Tim Berners-Lee 
              or any of the chaps involved with the creation of the Web envisioned 
              HTML as a medium for email. HTML is about hyperlinks and structured 
              text, readable in an interactive environment. Email is a simple 
              message, usually conversational, and generally with an absence of 
              a need for markups and links.
            <p> So most of the use of HTML mail these days is by the "push 
              advertisers", or as we more often call them, "spammers". 
              It's a great way to shove a flashy, sizzly, no-content ad for 
              fax paper or a trip to Central America into our email boxes, with 
              enough bouncy clicky things that we'll probably respond. 
            <p> A more serious problem with HTML email is that it's a great 
              carrier of Javascript viruses. Countless times I've read about 
              people getting nailed because of embedded codes in HTML email. Thus, 
              it's a security threat to organizations.
            <p> That's why I think mail should always be plain text, unless 
              both parties agree otherwise. Go ahead, shoot me, but there's 
              my opinion.
            <p> Apparently, my opinion is <i>not</i> shared by the makers of some 
              of the so-called mail clients, like Outlook Express or Netscape 
              Communicator. Out of the box, every mail sent is as the <b>multipart/alternative</b> 
              MIME type, with a text version and a HTML version. Theoretically, 
              if you have a MIME-savvy mail client, you receive such mail as a 
              nice HTML-formatted window. If not, you get gibberish for the second 
              half of your text screen. And they call that communicating.
            <p> Sure, you can turn it off. Perhaps. But read on, and you'll 
              see where this is going.
            <p> Now, here's the problem. I run a low-volume mailing list 
              for a management class I'm taking... nothing fancy... just 
              a rebroadcaster called from <b>procmail</b>. I started to see a 
              lot of these HTML forked messages, and got annoyed when some of 
              the replies also quoted part of the MIME wrapper markup, making 
              it hopeless to read in any normal sense.
            <p> So I put a filter in the mail forwarder to kick back anything 
              that included either <b>boundary</b> or <b>html</b> in the <b>content-type</b> 
              mail header... a sure sign that someone was sending something other 
              than plain text. Yes, right after inserting that filter, the worst 
              offenders were unable to use my mailing list until they figured 
              out how to turn that HTML fork off, and then all was good.
            <p> In this most recent group of users, we had a couple of people 
              who had installed Outlook with Windows 2000 (not Outlook Express). 
              Even after I had called in favors from my friends who understand 
              Redmond-ware better than I do, they still couldn't figure out 
              how to turn off the durn HTML.
            <p> So what to do? I wasn't about to relax my policy, having 
              been very happy with the result achieved with the previous group. 
              And one of them had started painfully copying all the addresses 
              directly into their address book, a mess for maintenance, and trouble 
              for the Web-based archive for the mailing list.
            <p> Then I thought, "Hey, all I need is a small Perl filter that 
              recognizes this so-called email and strips the HTML fork!" 
              And that's what I decided to build.
            <p> Luckily, we've got the very nice <b>MIME::Tools</b> package 
              in the CPAN to do most of the hard work, although I admit it took 
              me a few false starts to get the project done.
            <p> First, let's hack out some code to take a brain-damaged email 
              on standard input, writing out a clean piece of email on standard 
              output (untouched if it's not the right format). We'll 
              start with three lines that begin nearly every program I write:
            <p> 
            <pre>
#!/usr/bin/perl -w
use strict;
$|++;
</pre>
            This enables warnings, turns on the compiler restrictions (no symbolic 
            references, undeclared variables, or barewords), and unbuffers standard 
            output. Next, we grab the "envelope-from" from the input:
            <p> 
            <pre>
my $envelope = &lt;STDIN&gt;;
</pre>
            This "envelope-from" looks like:
            <p> 
            <pre>
From merlyn  Wed Jan 24 11:37:17 2001
</pre>
            and tells the next mailer where this mail came from. It's actually 
            not in the shape of an RFC822 header, because it's a "meta-header", 
            and therefore shouldn't be parsed along with the rest of the 
            MIME information. We'll grab it here, and print it back out when 
            we're done.
            <p> Next, we'll pull in two of the modules from the <b>MIME::Tools 
              </b>distribution:
            <p> 
            <pre>
use MIME::Parser;
use MIME::Entity;
</pre>
            And then we'll create a <b>MIME::Parser</b> object to read the 
            input:
            <p> 
            <pre>
my $parser = MIME::Parser-&gt;new;
$parser-&gt;output_to_core(1);
$parser-&gt;tmp_to_core(1);
</pre>
            Here, I'm creating a MIME parser that keeps everything in core, 
            including any temporary files. Of course, this will break down if 
            someone sends me a 200-MB AVI file, but I can catch that at the step 
            before this anyway.
            <p> Now it's time to read standard input:
            <p> 
            <pre>
my $ent = $parser-&gt;parse(\*STDIN);
</pre>
            The <b>$parser</b> object reads the email message from standard input 
            into memory. If there's any failure here (bad input, bad format), 
            the parser will die. We'll call this program so that if it fails 
            in any way, the original message is kept, so the death is not an issue.
            <p> Now for the cool part. I can use the methods available on the 
              message (a <b>MIME::Entity</b> object) to probe into the structure. 
              One of the first ones I did simply turned the rest of the program 
              into:
            <p> 
            <pre>
$ent-&gt;dump_skeleton(\*STDERR); exit 1;
</pre>
            This caused the program to show the structure of message, so I could 
            figure out what an HTML-forked mail message looks like, compared to 
            everything else. After I ran that on a few sample messages, I removed 
            that line and replaced it with this:
            <p> 
            <pre>
if ($ent-&gt;effective_type eq "multipart/alternative"
    and $ent-&gt;parts == 2
    and $ent-&gt;parts(0)-&gt;effective_type eq "text/plain"
    and $ent-&gt;parts(1)-&gt;effective_type eq "text/html") {
</pre>
            Whoa. Lots of stuff here. Let's go slow. First, I'm seeing 
            if the top-level structure is a <b>multipart/alternative</b>. A MIME 
            document is hierarchically structured (attachments can have attachments, 
            and so on), so we're looking at the root here. If that's 
            good, then we also make sure there are two alternatives, and that 
            the first one is a plain text entry, and the second one is HTML. If 
            so, it's likely to be the evilness that I'm trying to fix. 
            (There's a very small chance that the text and HTML parts are 
            radically different and unrelated, but if so, it's mistagged 
            as <b>multipart/alternative</b> rather than the more proper <b>multipart/mixed</b> 
            type.)
            <p> So the next step is to extract the text part as its own entity, 
              and then hoist that part to become the entire message. There may 
              be an easier way of doing this, but here's what I did. First, 
              make a new entity from the body of the old text one:
            <p> 
            <pre>
my $newent = MIME::Entity-&gt;build(Data =&gt;
                      $ent-&gt;parts(0)-&gt;body_as_string .
                      "\n\n[[HTML alternate version deleted]]\n");
</pre>
            Notice that I added a little message on the end to let people know 
            magic has happened. I could have also inserted it into the mail header 
            instead, but I wanted it to be prominent.
            <p> Next, we toss all the parts except for this one:
            <p> 
            <pre>
$ent-&gt;parts([$newent]);
</pre>
            And then, we fold it from a multipart document to a single-part document 
            (where MIME is not even mentioned, and we have no boundary markers):
            <p> 
            <pre>
$ent-&gt;make_singlepart;
</pre>
            And finally, some of the headers were now out of sync, so it's 
            time to clean it up as best we can:
            <p> 
            <pre>
  $ent-&gt;sync_headers(Length =&gt; 'COMPUTE', Nonstandard =&gt; 'ERASE');
}
</pre>
            And that's it. If it met the ugly-message criteria, we now have 
            a new message in <b>$ent</b>; otherwise, we have the original. Time 
            to dump it out. First the envelope:
            <p> 
            <pre>
print $envelope;
</pre>
            And now the message itself:
            <p> 
            <pre>
$ent-&gt;print;
</pre>
            The next step was to hook it into <b>procmail</b> delivery for the 
            mailing list. Ahead of the step that does the actual sending, I added 
            one additional rule:
            <p> 
            <pre>
:0 fw
* ^Content-type:.*boundary
| $HOME/lib/Strip-HTML-fork
</pre>
            where <b>$HOME/lib/Strip-HTML-fork </b>contains the program above. 
            If the filter is able to do its magic, then the next <b>procmail</b> 
            rule starting with:
            <p> 
            <pre>
:0
* ^Content-type:.*(html|boundary)
{
  .. bouncing logic not shown ..
}
</pre>
            no longer triggers, and the mail goes through! Success.
            <p> Well, I hope I've convinced you that a MIME is a terrible 
              thing to waste, but once wasted, we can fight back properly. Until 
              next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for </i>WebTechniques<i> 
              and </i>Unix Review<i> magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
