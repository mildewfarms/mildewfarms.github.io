<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i08: Tripwire in the Enterprise: Integrating Tripwire into Big Brother</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a1_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a1_f6.htm">Figure 6</a></span></td>
		<td><span class="navbarLink"><a href="a1_f7.htm">Figure 7</a></span></td>
		<td><span class="navbarLink"><a href="a1_f8.htm">Figure 8</a></span></td>
		<td><span class="navbarLink"><a href="a1_f9.htm">Figure 9</a></span></td>
		<td><a href="../../../../source/SA/2001/aug2001.tar"><b class=codeListing>aug2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a1.gif" width="200" height="174" align="right">Tripwire 
              in the Enterprise: Integrating Tripwire into Big Brother</h1>
            <p> <i>Elena Khan</i>
            <p> I work for Adero, Inc., a start-up that specializes in global 
              caching of Web content. We first opened shop in Massachusetts two 
              years ago, moved a couple of times to bigger facilities, and finally 
              found a home in the Boston suburb of Waltham. As our company grew, 
              however, so did our need for intrusion detection. Our security team 
              recommended Tripwire, and the operations team (my group) was tasked 
              with implementing it on 200 machines (comprising four discrete functional 
              groups) that were already deployed worldwide.
            <p> This article describes the system I created for making Tripwire 
              administration across the enterprise as easy as possible. It was 
              designed for Adero's specific needs, which were three-fold:
            <p> 
            <p> 1. Install Tripwire on production machines in the field.
            <p> 2. Confirm that the builds were consistent between machines within 
              each functional group.
            <p> 3. Integrate the running of Tripwire into an existing monitoring 
              system.
            <p> 
            <p> Before beginning this project, I tried to find a third-party solution 
              for using Tripwire in an enterprise, but an extensive Web search 
              produced nothing. The only product that came close to addressing 
              the problem was from Tripwire itself -- the "HQ Console". 
              When I evaluated the Console (Q4 of 2000), it was not robust enough 
              for our needs. As I continued to work on this project, I realized 
              that the dearth of ready-made solutions was a result of Tripwire's 
              being inherently "enterprise unfriendly". I will clarify 
              this perception as I explain what I did and the reasoning behind 
              it. I assume throughout that the reader is familiar with Tripwire 
              (<b>www.tripwire.com</b>), Big Brother (<b>www.bb4.com</b>), <b>ssh</b>, 
              and shell scripting.
            <p> One of the reasons that Tripwire is "enterprise unfriendly" 
              is its dependence on a static machine configuration. After Tripwire 
              is installed, it must be initialized, meaning that it creates a 
              "snapshot" of specified files and stores that snapshot 
              in a database file. Any subsequent change to a monitored file is 
              reported as a violation the next time Tripwire runs. To let Tripwire 
              know that a reported violation is okay, the database must be updated. 
              Specifically, I have to log on to the machine, run the update command:
            <p> 
            <pre>
tripwire -m u -r the_report_file_that_shows_the_change ,
</pre>
            approve the change shown on the screen, and then enter a password 
            to authorize the update. In my company's case, however, machine 
            configurations definitely do not remain static over time. To the contrary, 
            many files are changed as we add customers and features to our service. 
            Thus, the strict checking and the manual updates that make Tripwire 
            so secure are also obstacles to deploying it across many machines, 
            because any change mandates that I "touch" all affected 
            machines.
            <p> <b>Policy Files</b>
            <p> I circumvented this manual process by using, paradoxically, multiple 
              databases. In the preceding paragraph, I said that the database 
              holds a "shapshot" of files. In fact, that is the sole 
              job of the database. The snapshot itself is simply information about 
              a set of files, and its contents are governed by a policy file. 
              Figure 1 shows an excerpt from a text file that will become a policy 
              file for a Solaris machine. After the text file is created, it must 
              be encrypted. It is the encrypted file that must be present for 
              Tripwire to run. The text file should not be on any machine running 
              Tripwire because it shows exactly what is and is not monitored. 
              The excerpt shows that the root, <b>/.ssh</b>, and <b>/etc</b> (except 
              for four files) directories will be monitored. The letters following 
              the "t" sign represent the file attributes to monitor.
            <p> I divided the files on our machines into four policy groups based 
              on the likelihood that they would change:
            <p> 
            <p> 1. System files (e.g., <b>/etc/system</b>), which rarely change;
            <p> 2. Application files (most of these files are in <b>/usr/local/</b> 
              but also include any corresponding start-up scripts in the <b>init.d/</b> 
              directories) that often change;
            <p> 3. Files that change frequently (e.g., <b>/etc/shadow</b>), which 
              will not be checked by Tripwire;
            <p> 4. Files unique to a machine (e.g., <b>/etc/hosts</b>), which 
              "never" change.
            <p> 
            <p> Machines of the same type have the same policy and database files 
              for policies 1 and 2. Policy 3 files do not need either file. For 
              policy 4, machines have the same policy file, but each machine has 
              a different database. The point is that the same policy and database 
              files can be used on many machines. This fact becomes important 
              when system updates occur. I give an examle in the next section.
            <p> <b>Configuration File</b>
            <p> Besides the policy file, there is one other file that determines 
              Tripwire's behavior. It is the configuration file, an example 
              of which is shown in Figure 2. In my system, each policy has its 
              own configuration file, but the only differences between them are 
              the values for <b>POLFILE</b>, <b>DBFILE</b>, and <b>REPORTFILE</b>. 
              In Figure 2, the "p1" in the values shows that this file 
              is for policy 1. Just as with the policy file, the configuration 
              file also has to be encrypted. Tripwire uses one password (the "site 
              key") to encrypt the configuration and policy files, and it 
              uses another password (the "local key") to create the 
              encrypted database file. I chose to use the same site and local 
              keys across all machines, so the <b>SITEKEYFILE</b> and <b>LOCALKEYFILE</b> 
              values are the same in all the configuration files.
            <p> During the life of a machine, the configuration file never has 
              to change, but the policy and database files will change. Updating 
              these files, however, is straightforward. For example, if I want 
              to add a key to the <b>/.ssh/authorized_keys</b> file on all our 
              cache machines, I would use the following procedure:
            <p> 
            <p> 1. Roll out the change.
            <p> 2. Update the Tripwire database on only one machine.
            <p> 3. Copy the updated database to the rest of the machines.
            <p> 
            <p> So, instead of the native Tripwire process of updating the database 
              on our 100 cache machines, I only have to manually update one machine. 
              Continuing the example, if I decide that I do not want to check 
              the <b>/.ssh/</b> directory in policy 1, then I must change the 
              policy file. Any change to a policy file mandates a change to the 
              associated database, so I end up with two files to update. The process 
              for updating the two files, however, is the same; I just distribute 
              two files instead of one.
            <p> Changing policy 2 is exactly the same as changing policy 1, but 
              changing policy 4 is different because each machine has a unique 
              database. For instance, say that I am monitoring <b>/etc/hosts</b> 
              in policy 4, but I am not monitoring <b>/etc/resolv.conf</b>. If 
              I change <b>/etc/hosts</b> on a machine, I have to manually update 
              the database on that machine (just as for policy 1 or 2), but that 
              database is not copied to the other machines. If I add <b>/etc/resolv.conf</b> 
              to policy 4 (i.e., if I change the contents of policy 4), then I 
              have reached the worst-case scenario of my multi-policy scheme, 
              which means that the update procedure falls through to the native 
              Tripwire process. As with policy 1 and 2, the new policy file is 
              created on one machine and distributed to the others, but then I 
              must update each machine individually. Unfortunately, having policy 
              4 also means that each machine must be touched during the installation 
              procedure. The compensation for such an odious task, however, is 
              that (if the files in the policy are chosen wisely), the task will 
              seldom be repeated.
            <p> <b>Installation</b>
            <p> Although the manual aspect makes the initial install more tedious, 
              the installation procedure itself is quite easy -- there are 
              only a handful of steps. Assuming that <b>ssh</b> is already set 
              up on the remote machines, step 1 is setting up an identity key. 
              Once the key is set up, the <b>ssh</b> program no longer asks for 
              a password when logging into the machine. The importance of the 
              identity key will be clear later in the article. Our machines have 
              the same <b>authorized_keys</b> file, so the command I use is:
            <p> 
            <pre>
[root@interrogator src]# scp authorized_keys &lt;remote_machine&gt;:/.ssh/
</pre>
            Steps 2 through 4 set up the Tripwire infrastructure on the remote 
            machine:
            <p> 
            <pre>
[root@interrogator src]# scp TSS.tar &lt;remote_machine&gt;:/opt
[root@remote_machine opt]# tar xvf TSS.tar
[root@remote_machine opt]# rm TSS.tar
</pre>
            The tarball only contains directories and the four Tripwire binaries:
            <p> 
            <pre>
[root@interrogator src]# tar tvf TSS.tar
drwx------ root/other        0 2000-11-21 04:59:31 TSS/
drwx------ root/other        0 2000-11-21 04:58:59 TSS/bin/
-r-x------ root/other  2149312 1999-12-05 22:24:15 TSS/bin/siggen
-r-x------ root/other  2329944 1999-12-05 22:20:10 TSS/bin/twprint
-r-x------ root/other  2519780 1999-12-05 22:23:07 TSS/bin/twadmin
-r-x------ root/other  2801324 1999-12-05 22:18:35 TSS/bin/tripwire
drwx------ root/other        0 2000-11-21 05:00:07 TSS/policy/
drwx------ root/other        0 2000-11-20 19:09:22 TSS/report/
drwx------ root/other        0 2000-11-21 04:59:09 TSS/db/
drwx------ root/other        0 2000-11-21 04:59:16 TSS/key/
</pre>
            Step 5 copies over the local and site keys:
            <p> 
            <pre>
[root@interrogator src]# scp local.key site.key \
  &lt;remote_machine&gt;:/opt/TSS/key/
</pre>
            Steps 6 through 8 copy over the configuration, policy, and database 
            files:
            <p> 
            <pre>
[root@interrogator rb]# scp p1.cfg p2.cfg p4.cfg \
  &lt;remote_machine&gt;:/opt/TSS/bin
[root@interrogator rb]# scp p1.pol p2.pol p4.pol \
  &lt;remote_machine&gt;:/opt/TSS/policy
[root@interrogator rb]# scp p1.twd p2.twd \
  &lt;remote_machine&gt;:/opt/TSS/db
</pre>
            Steps 9 and 10 check the machine against the first two databases:
            <p> 
            <pre>
[root@machine bin]# ./tripwire -m c -c p1.cfg
[root@machine bin]# ./tripwire -m c -c p2.cfg
</pre>
            Any inconsistencies should be addressed, and these commands should 
            be repeated until there are no discrepancies. Step 12 creates the 
            database for policy 4:
            <p> 
            <pre>
[root@machine bin]# ./tripwire -m i -c p4.cfg
</pre>
            Because files in policy 4 are different on each machine, step 11 should 
            be a manual check of the files in this policy before the database 
            is generated.
            <p> Figure 3 shows an example of a Tripwire run immediately after 
              installation. The colors will be explained later. The discrepancies 
              between the "machine1" filesystem and the one outlined 
              in its database are listed in the "Added" and "Modified" 
              sections. After bringing "machine1" into line with the 
              database, the output of Tripwire looks like Figure 4. When all the 
              machines report "No violations", I have confirmed that 
              the machines' filesystems are identical.
            <p> Since all our machines were already operating in the field, though, 
              none of them could be the "model" on which the policy 
              and database files were created. After all, it was possible that 
              their security had already been breached, and I wanted to be sure 
              that my file system snapshots were created on a pristine machine. 
              Instead of a machine in the field, I used freshly built, in-house 
              machines as the models for each machine type; that means I have 
              four machines sitting in our lab that are used solely for policy 
              and database creation and updates. Taking together the facts that 
              the models are on a private network and that each remote machine 
              should be identical to any other in its group, any discrepancy between 
              any of the machines (both at installation and on an ongoing basis) 
              indicates a possible violation.
            <p> <b>Monitoring</b>
            <p> Having described my solution for getting around the "snapshot" 
              model of Tripwire, I will now focus on the other obstacle to running 
              Tripwire in an enterprise -- monitoring. Tripwire's optional 
              notification procedure is email, and it has two settings: either 
              send email only when a violation is found or send email after every 
              run. Having the remote machines send email is problematic, however. 
              First, the email recipient is set up in the policy file. If I want 
              to change the recipient of the emails, I have to change the policy 
              file (and therefore the database file) on all the affected machines. 
              Second, if I choose the "every run" option, then I will 
              be inundated with email, and my team will have to look at each one 
              to determine whether there is a violation. Third, if I do not choose 
              the "every run" option, there is no way to know whether 
              Tripwire is still working because a lack of email could mean that 
              no violations have been found. I opted out of this catch-22 by disabling 
              the email option.
            <p> Tripwire's response to the monitoring dilemma is the company's 
              HQ Console product -- software that can be used to run Tripwire 
              remotely and to produce alerts. Unfortunately, it did not handle 
              multiple policy files, which rendered it useless to me. Furthermore, 
              it did not copy over and store reports (it only reported and stored 
              the exact errors); and it is a standalone product (we wanted something 
              that integrated into our existing system). Finally, it was only 
              available for Windows NT, and I wanted a UNIX solution because our 
              department is infinitely stronger in managing a UNIX box for security 
              purposes. To their credit, Tripwire did send representatives to 
              discuss our needs and to ask for input on improving the Console. 
              Although the representatives were more than willing to help, we 
              needed a solution quickly and could not afford to wait for a software 
              revision. It was then clear that we would have to create our own 
              monitoring solution to encompass all our requirements.
            <p> <b>Running Tripwire Remotely</b>
            <p> The HQ Console, however, did introduce a very useful idea -- 
              running Tripwire remotely. I adopted this idea and set up an intermediate 
              machine, which sits between the remote machines and the monitoring 
              system. This machine, named "interrogator", takes the 
              responsibility of running Tripwire and sending updates away from 
              the remote machines. By centralizing these two jobs, I only have 
              to keep interrogator and the monitoring machine healthy and safe; 
              in return, they will notify me of problems on the remote machines. 
              The "interrogator" performs its jobs via three scripts: 
              <b>do_tw.sh</b> (Listing 1) checks policy 1, 2, and 4 files on the 
              remote machines; <b>do_files.sh</b> (Listing 2) checks policy 3 
              files; and <b>check_status.sh</b> (Listing 3) sends the status of 
              the machines to the monitoring system. The outline of the system 
              is shown in Figure 5. (Listings for this article are available from 
              the <i>Sys Admin</i> Web site: <b>http://www.sysadminmag.com</b>.)
            <p> The "BB Display" is our Big Brother machine. Our team 
              leader suggested Big Brother as the monitoring system because we 
              were more familiar with it than our other monitoring system. Indeed, 
              I had set up BB for our department a year ago precisely because 
              our other system was difficult to use, configure, and understand. 
              In contrast to its monitoring partner, BB has proven itself to be 
              simple and elegant. Its native display is a Web page, and by setting 
              up a certificate and password authentication, we have secure access 
              to its display outside the office. Except for a few binaries, BB 
              is all shell scripts, so it's just a matter of reading the 
              scripts to find out exactly what the program is doing. (The mailing 
              list archives are also an excellent source of additional information.) 
              In the spirit of Big Brother, I chose to make my three programs 
              shell scripts as well.
            <p> BB displays its information in columns; several examples of its 
              interface can be accessed from: <b>http://www.bb4.com/demo.html</b>. 
              The Tripwire information from the remote machines must have its 
              own column, of course, and adding an additional column is simple. 
              From interrogator, I just use the following command within the <b>check_status.sh</b> 
              script:
            <p> 
            <pre>
$BB $BBDISPLAY $LINE ,
</pre>
            where <b>$BB</b> is the "bb" binary, <b>$BBDISPLAY</b> is 
            the name or IP of the display machine, and <b>$LINE</b> is the actual 
            information that the display will use. Interrogator already had Big 
            Brother installed, so my value of <b>$BB</b> is <b>/opt/bb/bin/bb</b>. 
            The <b>$LINE</b> variable takes the form:
            <p> 
            <pre>
status $NAME.$TEST $COLOR `date` $MESSAGE ,
</pre>
            where <b>$NAME</b> is the name of the machine (with commas instead 
            of periods), <b>$TEST</b> is the column name (I use <b>tw</b>), <b>$COLOR</b> 
            is "red" or "green" (indicating the machine's 
            status), and <b>$MESSAGE</b> is text that will be displayed on the 
            display's "drill-down" Web page. The presence of the 
            <b>MESSAGE</b> variable is one example of how BB's thoughtful 
            design was an excellent fit with our needs. I wanted the ability to 
            determine the severity of a violation directly from the monitoring 
            screen, so I use the <b>MESSAGE</b> variable to send excerpts of the 
            Tripwire output to the display. Figure 6, an example of the drill-down 
            page for a violation, shows how it works. In this example, I can clearly 
            see that the <b>known_hosts</b> file has been modified. In my case, 
            this error is usually not serious, and I know that I should first 
            investigate who in our department has forgotten about Tripwire before 
            I start sounding the security alarm. Figure 7 shows an example of 
            a machine whose latest Tripwire run found no problems. In these cases, 
            I use the <b>MESSAGE</b> variable to send "Report created on:" 
            information to the display. As a good monitoring system should, BB 
            also provides the alerts.
            <p> There are two benefits to centralizing notification responsibilities 
              to BB. First, while Tripwire only has email alerts, BB provides 
              several methods of notification. Second, when changing alert recipients, 
              I only have to change configuration files on the one BB machine 
              instead of on each remote machine.
            <p> <b>Interrogator</b>
            <p> BB, however, depends upon interrogator for its information, so 
              I will now return to describing interrogator -- specifically, 
              how it is set up and how it performs its jobs. Its directory structure 
              is shown in Figure 8. There is no setup script, so the directories 
              must be created manually. The uppercase, boldface names (i.e., "<b>ROOTDIR</b>") 
              are the variables used in the scripts to represent the directories. 
              The file listings shown are examples of what lies in each directory.
            <p> The system is based on machine types. Figure 8 shows that four 
              types are currently set up to be checked: cache machines (type 1), 
              type 2 machines, type 3 machines, and type 4 machines. Each type 
              has a set of configuration, policy, and database files, which are 
              stored in the <b>src/</b> directory tree. The <b>src/cache/</b> 
              directory shows the full set of configuration files for the "cache" 
              machines. Each type also has a list of member machines; these lists 
              are stored in the <b>TYPEDIR</b> directory. Under <b>TYPEDIR</b> 
              are the directories where the files for policy 3 are stored. Finally, 
              the <b>TEMPLATEDIR</b> stores information about how the output of 
              a Tripwire run should look for each machine type.
            <p> The first script, <b>do_tw.sh</b>, is responsible for running 
              Tripwire on the remote machines. It takes three parameters and is 
              run as:
            <p> 
            <pre>
do_tw.sh machine1.company.com cache p1 ,
</pre>
            where <b>machine1.company.com</b> is the name of the machine, <b>cache</b> 

            is the type of machine, and <b>p1</b> is the policy to check. After 
            checking the parameters and pinging the machine, the script logs on 
            to the remote machine as root using the <b>ssh</b> identity key that 
            was set up during installation. The key must have root access because 
            Tripwire must be run as root. After logging in, it runs Tripwire via 
            the command:
            <p> 
            <pre>
tripwire -m c -c X.cfg ,
</pre>
            where X is the third parameter (the policy to check) submitted to 
            <b>do_tw.sh</b>. The output is redirected to the <b>REPORTDIR</b> 
            directory and saved with the <b>.asc</b> suffix. Figure 8 shows example 
            reports under the <b>machine1/</b> and <b>machine2/</b> directories.
            <p> The script then extracts the report's core information from 
              the surrounding extraneous information and puts it into a temporary 
              file in the <b>TMPDIR</b> directory. (Temporary files are saved 
              with the job number as the suffix.) In Figures 3 and 4, the orange 
              text represents the information that is ignored, and the black text 
              represents the information that is saved to the temporary file. 
              The contents of the temporary file are then compared (via the <b>diff</b> 
              command) to the contents of a template.
            <p> Which template to use is determined by the second and third parameters 
              to the <b>do_tw.sh</b> script. As shown in Figure 8, the templates 
              are named <b>template.report.&lt;machine_type&gt;.&lt;policy_number&gt;</b>. 
              The templates themselves are simply the core information of a Tripwire 
              report from a clean run and must be created manually. That is, the 
              core information from the model machine's output must be saved 
              as a template and transferred to the intermediate machine's 
              <b>TEMPLATEDIR</b>. The black text in Figure 4, for example, could 
              be the contents of a template file, but the black text in Figure 
              3 could not.
            <p> Assume for the moment that the black text shown in Figure 4 is 
              a template. Assume, also, that Tripwire runs on a remote machine 
              and the output looks like Figure 3. The <b>diff</b> between the 
              report core and the template will produce output, which means that 
              there is a violation. Each time <b>do_tw.sh</b> runs, it produces 
              two files in <b>STATUSDIR</b> that together describe the state of 
              the remote machine; one file has a <b>.msg</b> suffix and the other 
              has <b>.status</b>. The output from the <b>diff</b> is sent to the 
              <b>.msg</b> file. Also, the word "red" is written to the 
              <b>.status</b> file. If there is no output from <b>diff</b>, then 
              the word "green" is written to the <b>.status</b> file. 
              To the <b>.msg</b> file goes the phrase "No violations." 
              and the time of the run. Figures 6 and 7 are examples of violations 
              and a clean run, respectively.
            <p> When there is a violation, the script logs into the remote machine 
              a second time and copies over the official Tripwire report file, 
              which has the suffix <b>.twr</b>. This report has five levels of 
              detail to choose from. Figure 2 shows that I use level 3, which 
              contains minimal but exact information about how the files are in 
              violation. The <b>.twr</b> report file is also saved in the <b>REPORTDIR</b>. 
              In Figure 8, there is a <b>.twr</b> file in the <b>machine4/</b> 
              directory, showing that there is a violation in policy 1.
            <p> Policy 4 is just a tiny bit different. Notice that there is a 
              line in Figures 3 and 4 that says "Total objects scanned:". 
              For policies 1 and 2, this number should be the same on all the 
              machines because policies 1 and 2 check generic file systems. For 
              policy 4, this number may be different. Thus, if the script is checking 
              policy 4, it treats this line as extraneous information and takes 
              it out.
            <p> The sister script to <b>do_tw.sh</b> is <b>do_files.sh</b>, which 
              checks policy 3 files. It takes two parameters and is run as:
            <p> 
            <pre>
do_files.sh machine1.company.com cache ,
</pre>
            where <b>cache</b> is the machine type. Unlike <b>do_tw.sh</b>, this 
            script can check all machines of a given type, so the command:
            <p> 
            <pre>
do_files.sh all cache
</pre>
            will check all the machines in the <b>cache.list</b> file.
            <p> As previously mentioned, <b>do_files.sh</b> does not use Tripwire 
              to check the files. Rather, I have traded some of the extra security 
              of Tripwire checking for the ease of immediately changing files. 
              The script compares an <b>ls -l</b> listing (minus the date and 
              time fields) and the <b>md5sum</b> output of the remote files to 
              local master copies, whose names represent absolute paths on the 
              remote machine. For example, the <b>/etc/shadow</b> file is named:
            <p> 
            <pre>
etc-^-shadow
</pre>
            The script takes a directory listing from the appropriate subdirectory 
            under <b>TYPEDIR</b>, translates the separators into slashes, and 
            adds a leading slash. After this step, it has a list of files to check 
            on the remote machine. Then the script sends <b>ls -l</b> (using the 
            real pathname) and <b>md5sum</b> information for the master files 
            to <b>REPORTDIR</b>. An example of this file is in the <b>p3/</b> 
            directory in Figure 8. Because of the full listing, the user and group 
            names must be the same for the master file as for the remote machine, 
            but the UID and GID do not have to be the same. The next step is logging 
            into the remote machine and sending the <b>ls</b> and <b>md5sum</b> 
            information to a temporary file. The comparison method is the same 
            as for <b>do_tw.sh</b>; <b>diff</b> compares the report and temporary 
            files. Again, output from <b>diff</b> goes to the <b>.msg</b> file 
            in <b>STATUSDIR</b> and a "red" or "green" status 
            is sent to the <b>.status</b> file.
            <p> I also check Tripwire's configuration and policy files with 
              this script to ensure they have not been altered. Taking together 
              this fact with the template checking and the inclusion of Tripwire's 
              binaries in policy 2, I ensure that Tripwire itself is not corrupted 
              on the remote machines.
            <p> Since the first two scripts take parameters, I created wrappers 
              to save some typing. For <b>do_tw.sh</b>, there are three wrappers 
              -- one each for p1, p2, and p4. They take the form:
            <p> 
            <pre>
for MACHINE in `cat $MACHINE_LIST` ; do
      /opt/tw/scripts/do_tw.sh $MACHINE $MACHINE_TYPE $POLICY
done
</pre>
            For <b>do_files.sh</b>, the wrapper reads:
            <p> 
            <pre>
/opt/tw/scripts/do_files.sh all $MACHINE_TYPE
</pre>
            The third script takes no parameters. It simply runs as:
            <p> 
            <pre>
check_status.sh
</pre>
            As explained above, this script sends status information to BB using 
            the <b>$LINE</b> variable. To find out which machines to report on, 
            it looks in <b>STATUSDIR</b> for all files ending in <b>.bb</b> and 
            parses the filenames. Figure 8 shows the relevant files for "<b>machine1</b>". 
            After the script creates the machine list, it recreates the <b>.bb</b> 
            file with information from the <b>.msg</b> and <b>.status</b> files. 
            If any of the <b>.status</b> files contain the word "red", 
            the <b>$COLOR</b> variable in <b>$LINE</b> is set to <b>red</b>. The 
            contents of the <b>.msg</b> files are concatenated and sent over as 
            the <b>$MESSAGE</b> contents. Our BB machine rewrites its Web pages 
            every five minutes, so within five minutes of running <b>check_status.sh</b>, 
            the new information is on the display, and the alerts are sent out.
            <p> BB's information is considered stale (and its display turns 
              purple) if it is not updated within 30 minutes. To keep the status 
              information fresh, I run <b>check_status.sh</b> every 20 minutes 
              from <b>cron</b>. Instead of having a <b>cron</b> job on each of 
              the remote machines, I have a single <b>cron</b> file on interrogator, 
              thus centralizing the frequency of the scripts' running. Root's 
              <b>cron</b> jobs on interrogator are:
            <p> 
            <pre>
0 0,8,16 * * *       /opt/tw/scripts/do_tw.wrapper-p1.sh &gt; /dev/null
0 2,10,18 * * *      /opt/tw/scripts/do_tw.wrapper-p2.sh &gt; /dev/null
0 4,12,20 * * *      /opt/tw/scripts/do_files.wrapper.sh &gt; /dev/null
0 6,14,22 * * *      /opt/tw/scripts/do_tw.wrapper-p4.sh &gt; /dev/null
0,15,30,45 * * * *   /opt/tw/scripts/check_status.sh
</pre>
            Although minimal, <b>do_tw.sh</b> and <b>do_files.sh</b> do produce 
            output, hence the redirection to <b>/dev/null</b>. Figure 9 shows 
            examples of good and bad output from the two scripts.
            <p> <b>Conclusion</b>
            <p> We have been using this system for several months now. Granted, 
              it is far from perfect. There are three areas in particular that 
              need improvement. First, there is no inode checking inherent in 
              this system. If the scripts are run very often, they will produce 
              a lot of reports, which in turn will deplete the filesystem's 
              inodes. As I found out, this system does produce reactive alerts 
              regarding this "device out of space" system error, but 
              periodic, proactive log removal would be more helpful. Second, there 
              should be a better way to check policy 4 files. Although I am not 
              certain of how it should be done, I am certain that I want to avoid 
              the possibility of logging onto every box if I change the policy. 
              Third, the <b>do_tw.sh</b> script should accept an "all" 
              parameter. There are also three outstanding items on the "nice-to-have" 
              list: variable number of policies per machine type (currently, all 
              types must have the same number of policies); skipping a machine 
              if it is not in the <b>known_hosts</b> file (to bypass hanging at 
              the "do you want to connect" question); and choosing which 
              attributes to check for policy 3 (currently, checking <b>ls</b> 
              and <b>md5sum</b> are the only options).
            <p> Even with its lack of refinement, though, this system has been 
              a very useful tool for bringing centralized Tripwire monitoring 
              into our enterprise. Our machines are checked by Tripwire at least 
              three times a day, and all my department has to do is look at the 
              BB display if we are curious or wait for an alert. I have taken 
              my department out of the checking loop. The only time we have to 
              log on to a machine is to investigate a violation.
            <p> I hope this article will provide systems administrators with a 
              springboard (or template) for including Tripwire monitoring in their 
              own enterprises.
            <p> <i>Elena Khan graduated from college in 1992 without knowing how 
              to use a computer. She started using computers at her first job, 
              where she became something of an expert in WordStar. In 1996 she 
              took a vocational class to learn how to fix computers and landed 
              a job as a junior sys admin soon afer and she's been a sys 
              admin ever since. She can be reached at: <b>ekhan@adero.com</b> 
              or <b>elena.khan@usa.net</b>.</i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
