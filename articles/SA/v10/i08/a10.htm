<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i08: Developing a Perl Routine</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/aug2001.tar"><b class=codeListing>aug2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="../../resource/perl.gif" width="150" height="150" align="right">Developing 
              a Perl Routine </h1>
            <p> <i>Randal L. Schwartz</i> 
            <p> I was cruising the Perl newsgroups the other day, and found the 
              following request. It appears to be a homework problem from a university 
              assignment, so I won't embarrass the original poster by including 
              his name. (Normally, I try to give credit to the source of inspiration 
              for one of my columns, so if you want your name in lights, please 
              email your ideas to me!) 
            <p> Here's the task: start with the three-letter English abbreviations 
              for the seven days of the week, in their natural order. Write a 
              subroutine that takes two of these weekday abbreviations, and returns 
              a single comma-separated string with all the days in between, wrapping 
              around if necessary. For example, given an input of <b>Tue</b> and 
              <b>Thu</b>, the return value is <b>Tue,Wed,Thu</b>. However, an 
              input of <b>Thu</b> and <b>Tue</b> should wrap all the way around 
              to <b>Thu,Fri,Sat,Sun,Mon,Tue</b>. Be sure to reject (via <b>die</b>) 
              any erroneous inputs. 
            <p> This doesn't sound like that difficult a task, but some interesting 
              subtleties arose as I was starting to solve it in my head. So, I'm 
              writing this column effectively in real time, as I would consider 
              each piece of the problem, to illustrate effective practices at 
              developing Perl routines. 
            <p> First, I need a subroutine name. This is sometimes harder than 
              it looks. I want a name that's short enough that I'll 
              reuse it, but long enough to be descriptive and unique. Let's 
              start with <b>day_string_range</b>. Our initial subroutine looks 
              like: 
            <p> 
            <pre>
sub day_string_range {
  ... code goes here ...
}
</pre>
            Good so far. I hope that wasn't too surprising. Next, I need 
            to grab the start and end values, so let's first check that they 
            are there, and if so, grab them: 
            <p> 
            <pre>
sub day_string_range {
  die "too few args: @_" if @_ &lt; 2;
  die "too many args: @_" if @_ &gt; 2;
  my ($start,$end) = @_;
  ...
}
</pre>
            Note here the use of <b>@_</b> in a scalar context (with the two comparison 
            operators) to check the number of elements. We then create two local 
            variables to hold the arguments if we make it past the test. 
            <p> But <b>$start</b> is now something like <b>Thu</b>. How do we 
              turn that into a computable value so that we can increment it? Well, 
              we'll need a map to map it back and forth to integers. Let's 
              use an array (for now) to hold the names in the proper order: 
            <p> 
            <pre>
my @day_names = qw(Sun Mon Tue Wed Thu Fri Sat);
</pre>
            Where do we put this? If we put it inside the subroutine, it'll 
            get initialized every time, at a slight speed penalty. However, if 
            we put it outside the subroutine, it needs to get executed before 
            the initialization occurs. Fortunately, we can create "static 
            local" variables using a common Perl idiom: 
            <p> 
            <pre>
BEGIN {
  my @day_names = qw(Sun Mon Tue Wed Thu Fri Sat);

  sub day_string_range {
    die "too few args: @_" if @_ &lt; 2;
    die "too many args: @_" if @_ &gt; 2;
    my ($start,$end) = @_;
    ...
  }
}
</pre>
            The <b>BEGIN</b> block causes the code to be executed at compile time, 
            initializing the value of <b>@day_names</b> before any other "normal" 
            code is executed. The variable is local to the block, so it won't 
            be seen by any other part of the program, just the subroutine inside 
            the <b>BEGIN</b> block. 
            <p> Using this array, how do we turn a name into a number? An array 
              isn't very good for searching, except as a linear search. A 
              linear search might look like: 
            <p> 
            <pre>
my $number_for_start;
for (0..$#day_names) {
  if ($day_names[$_] eq $start) {
    $number_for_start = $_;
    last;
  }
}
die "$start is not a day name"
  unless defined $number_for_start;
</pre>
            This would probably suffice if we called this routine only a few times 
            in the program. But let's step up the efficiency a bit (and simplify 
            the logic) by using a hash. First, we'll convert the array trivially 
            into a hash with keys of the original array names and values equal 
            to the position within the array: 
            <p> 
            <pre>
my @day_names = qw(Sun Mon Tue Wed Thu Fri Sat);
my %mapping; @mapping{@day_names} = 0..$#day_names;
</pre>
            Now we have <b>$day_names[3]</b> as <b>Wed</b>, and <b>$mapping{Wed}</b> 
            as <b>3</b>, so we can go from one to the other. For symmetry, we 
            <i>could</i> have made these both hashes, but the differences in the 
            resulting code would be minor. 
            <p> Now, how do we get from <b>$start</b> to <b>$number_for_start</b>? 
              Much simpler: 
            <p> 
            <pre>
die "No such name: $start" unless exists $mapping{$start};
my $number_for_start = $mapping{$start};
</pre>
            That's a very pure way to do it. We can be slightly dirtier and 
            optimize knowing that there are no <b>undef</b> values in the hash: 
            <p> 
            <pre>
defined (my $number_for_start = $mapping{$start})
  or die "no such name: $start";
</pre>
            This is all fine and well for <b>$start</b>, but we need to perform 
            the same operation for <b>$end</b>. I could cut-and-paste that code 
            twice, making the subroutine so far as: 
            <p> 
            <pre>
BEGIN {
  my @day_names = qw(Sun Mon Tue Wed Thu Fri Sat);
  my %mapping; @mapping{@day_names} = 0..$#day_names;

  sub day_string_range {
    die "too few args: @_" if @_ &lt; 2;
    die "too many args: @_" if @_ &gt; 2;
    my ($start,$end) = @_;
    defined (my $number_for_start = $mapping{$start})
      or die "no such name: $start";
    defined (my $number_for_end = $mapping{$end})
      or die "no such name: $end";
    ...
  }
}
</pre>
            My "maintenance alarm", however, goes off when I type such 
            code. I've got the same code twice in the program, but merely 
            operating on different variables. If I were maintaining this code 
            for some reason (to add functionality or additional error checking, 
            for example), and I missed the fact that the two pieces of code must 
            stay in parallel, I'd probably spend a lot of time debugging. 
            Or, worse yet, the code would go into production to show errors in 
            live data. 
            <p> I can solve this with a bit of indirection -- if I see it 
              properly as a "mapping" from a set of values to another, 
              the wonderful <b>map</b> operator pops into mind: 
            <p> 
            <pre>
    my ($number_for_start, $number_for_end) = map {
      defined (my $ret = $mapping{$_})
        or die "no such name: $_";
      $ret;
    } $start, $end;
</pre>
            Here, each value is placed into <b>$_</b>, and then we run the code 
            in the block. The last expression evaluated (in this case, <b>$ret</b>) 
            provides the elements of the output list. 
            <p> But as I'm staring at this, I realize that once I've 
              got the value of <b>$number_for_start</b>, I'll never need 
              the original <b>$start</b> value again. So, another approach (again 
              shooting for more simplification) is to use the "in-place-ness" 
              of the <b>foreach</b> loop: 
            <p> 
            <pre>
    foreach ($start, $end) {
      exists $mapping{$_}
        or die "no such name: $_";
      $_ = $mapping{$_};
    }
</pre>
            For each of the start and end values, if a mapping for it exists, 
            replace the value with its mapped equivalent, otherwise die. 
            <p> At this point, we've got two small, validated integers in 
              the range of 0 to 6. It's time to start building the return 
              value. We'll build it up as a list, then join the list with 
              commas to get a single string: 
            <p> 
            <pre>
    my @return;
    while (1) {
      push @return, $day_names[$start];
      last if $start == $end;
      ($start += 1) %= 7;
    }
</pre>
            Starting with the empty list, we'll push the day name for <b>$start</b> 
            onto the end of the list. If this is the end, we also quit. Otherwise, 
            we'll increment the value of <b>$start</b>, but in a "modulus 
            7" way, wrapping around from 6 back to 0. I really wanted to 
            write <b>++$start %= 7</b>, but that's sadly not permitted. This 
            loop has stuff before the exit test, and stuff after the exit test, 
            which is easiest to write as an "infinite" loop with an 
            exit test in the middle. 
            <p> For the final return value -- a simple join on the list thus 
              created: 
            <p> 
            <pre>
  return join ",", @return;
</pre>
            And to put that all together: 
            <p> 
            <pre>
BEGIN {
  my @day_names = qw(Sun Mon Tue Wed Thu Fri Sat);
  my %mapping; @mapping{@day_names} = 0..$#day_names;

  sub day_string_range {
    die "too few args: @_" if @_ &lt; 2;
    die "too many args: @_" if @_ &gt; 2;
    my ($start,$end) = @_;
    foreach ($start, $end) {
      exists $mapping{$_}
        or die "no such name: $_";
      $_ = $mapping{$_};
    }
    my @return;
    while (1) {
      push @return, $day_names[$start];
      last if $start == $end;
      ($start += 1) %= 7;
    }
    return join ",", @return;
  }
  }
</pre>
            It's simple, but there are a lot of steps to get it done right. 
            Sure, you can probably play "Perl golf" and "minimize 
            the [key]strokes" to write this routine in about half the number 
            of lines. But I think we've got enough here for the maintenance 
            programmer to follow along or modify nicely, and it does the job with 
            reasonable efficiency. Until next time, enjoy! 
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>, as well as writing regular columns for </i>WebTechniques<i> 
              and </i>Unix Review<i> magazines. He's also a frequent contributor 
              to the Perl newsgroups, and has moderated comp.lang.perl.announce 
              since its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i> 
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
