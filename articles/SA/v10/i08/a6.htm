<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i08: Jailed Internet Services</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>
<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr> 
    <table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/aug2001.tar"><b class=codeListing>aug2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
        <tr> 
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a6.gif" width="200" height="174" align="right">Jailed 
              Internet Services</h1>
            <p> <i>Liam Widdowson</i> 
            <p> Many security analysts recommend that a physical server run a 
              single service only. This segmentation of services provides an extra 
              layer of protection in the event of an attack. If, for example, 
              a cracker compromises a server through a buffer overflow in Sendmail, 
              the cracker would not be able to alter Web server content because 
              it would be stored on a separate server that would not be vulnerable 
              to the Sendmail hole. 
            <p> However, it may be impractical from a systems management or financial 
              point of view to place each distinct service on a separate physical 
              machine. In this situation, systems administrators could still enjoy 
              the benefits of separate hosts by running each service in a virtual 
              machine. Virtual machine software (such as VMWare [1] and Bochs 
              [2]) allows administrators to run separate instances of operating 
              systems simultaneously on a single host. However, this still leaves 
              a systems management problem -- extra operating systems to maintain, 
              increased system complexity, as well as performance degradation 
              due to virtual machine overhead. 
            <p> Fortunately, UNIX variants possess the <b>chroot(2)</b> system 
              call. This system call causes a particular directory to become the 
              root directory of the calling process. This allows the process to 
              be locked into a virtual root directory, commonly referred to as 
              a "jail" somewhere along the directory tree. For example, 
              an application that executes the following C code (error checking 
              omitted) will have its root directory set to <b>/var/chroot</b> 
              and will open the file <b>/tmp/test.txt</b> (stored as <b>/var/chroot/tmp/test.txt</b> 
              in the base file system) relative to the jail: 
            <p> 
            <pre>
/* other initialization code here */
chdir("/var/chroot");
chroot("/var/chroot");
/* perform code here such as setuid() and setgid() */
f = fopen("/tmp/test.txt", "r");
</pre>
            The <b>chroot(2)</b> system call can only be used by root. Privileges 
            should be dropped as soon as possible after a successful <b>chroot(2)</b> 
            call, as it is possible to break out of a <b>chroot</b> jail if a 
            process has root privileges [3]. 
            <p> Thus, it is important to understand that an application running 
              within a <b>chroot</b> jail with root privileges only serves as 
              an annoyance or extra hurdle for a cracker to pass, not as an unbreakable 
              jail. All applications that contain built-in <b>chroot</b> jail 
              functionality should drop privileges immediately after chrooting. 
              Further, the <b>chroot(2)</b> system call should be called as soon 
              as possible during application initialization, because operations 
              performed on files or other resources opened outside the <b>chroot</b> 
              jail will result in erroneous behavior. 
            <p> This article will outline how the <b>chroot</b> command can be 
              used to place any existing application in a <b>chroot</b> jail. 
              Additionally, it will describe how to configure three popular open 
              source Internet software packages that contain <b>chroot</b> support 
              -- BIND, Obtuse SMTPD, and Boa. Solaris will be used as an example 
              operating system within this article, but the details described 
              can easily be adapted to any other UNIX variant. 
            <p> <b>Base chroot Jail Requirements</b> 
            <p> The <b>chroot(2)</b> system call changes the position of the root 
              directory. For applications to function correctly, this new root 
              directory must contain some base operating system primitives. Think 
              of the contents of the <b>chroot</b> jail as a complete mini-operating 
              system/file system in itself. In particular, a subset of system 
              libraries, configuration files, and device files, along with any 
              application-specific files must be available in the jail. These 
              files should be copied into the jail, or a hard link could be created 
              if the two directories reside on the same file system. The following 
              commands provide an example of creating the base jail directory 
              (<b>/var/chroot</b>), copying the standard C library (<b>/usr/lib/libc.so.1</b>) 
              into the jail and creating the null device file: 
            <p> 
            <pre>
# mkdir -p /var/chroot/usr; mkdir /var/chroot/dev
# chown -R root:root /var/chroot; chmod 755 -R /var/chroot
# cp -p /usr/lib/libc.so.1 /var/chroot/usr/lib/libc.so.1
# mknod /var/chroot/dev/null c 13 2
</pre>
            A minimum base set of files and devices are typically required within 
            any <b>chroot</b> jail. These will vary for each different UNIX variant, 
            but the following Solaris base should be applicable to most systems: 
            <p> 
            <pre>
The NULL device file            /dev/null
The 'zero' device file          /dev/zero
The TCP/IP protocol device file /dev/tcp
The UDP/IP protocol device file /dev/udp

Standard C library              /usr/lib/libc.so.1
Runtime linker                  /usr/lib/ld.so.1
Dynamic linker library          /usr/lib/libdl.so.1
Network services library        /usr/lib/libnsl.so.1
TCP/IP networking library       /usr/lib/libsocket.so.1
DNS services shared object      /usr/lib/nss_dns.so.1
File services shared object     /usr/lib/nss_files.so.1

Time zone database              /usr/share/lib/zoneinfo and /etc/TIMEZONE
Hosts database                  /etc/hosts and /etc/inet/hosts
Services database               /etc/services
Protocols database              /etc/protocols
Name services configuration     /etc/nsswitch.conf
Resolver configuration          /etc/resolv.conf
Temporary storage directories   /var, /var/tmp, /var/run and /tmp
</pre>
            The <b>chroot</b> jail should be owned by root with a permissions 
            mask of 755. The permissions of each file and directory described 
            above should be identical to those within the standard base operating 
            system. 
            <p> <b>Determining chroot Jail Inclusions</b> 
            <p> Most non-trivial applications will require more than the base 
              jail set outlined above. Determining the entire set of resources 
              required by an application is more an art than an exact science. 
            <p> An application should initially be installed into the standard 
              base operating system and configured to operate correctly. The Apache 
              Web server (installed into <b>/opt/apache</b>) will be used to illustrate 
              the procedure required to place any application in a <b>chroot</b> 
              jail. 
            <p> The base binaries and configuration files of the Apache tree (<b>/opt/apache</b>) 
              should be copied into the <b>chroot</b> jail with permissions preserved. 
              For example: 
            <p> 
            <pre>
# mkdir -p /var/chroot/opt/apache
# cp -p -R /opt/apache/* /var/chroot/opt/apache
</pre>
            The libraries that an application is linked against can be displayed 
            by using the <b>ldd(1)</b> (Solaris, Linux, etc.) or <b>chatr(1)</b> 
            (HP-UX) command. <b>ldd(1)</b> may also be used on libraries to determine 
            the dependencies of each library. Example output using <b>ldd(1</b>) 
            against the Apache <b>httpd</b> executable is: 
            <p> 
            <pre>
# ldd /opt/apache/bin/httpd
      libsocket.so.1 =&gt; /usr/lib/libsocket.so.1
      libnsl.so.1 =&gt;    /usr/lib/libnsl.so.1
      libc.so.1 =&gt;      /usr/lib/libc.so.1
      libdl.so.1 =&gt;     /usr/lib/libdl.so.1
      libmp.so.2 =&gt;     /usr/lib/libmp.so.2
</pre>
            The libraries displayed as dependencies by <b>ldd(1)</b> or <b>chatr(1)</b> 
            should be copied into the appropriate relative directory within the 
            jail. 
            <p> Many libraries, such as name resolution and PAM, have support 
              files. These files must also be copied into the jail. Examples include: 
            <p> 
            <pre>
PAM configuration file           /etc/pam.conf
PAM LDAP authentication module   /usr/lib/security/pam_ldap.so
NIS name services                /usr/lib/nss_nis.so.1
</pre>
            However, this method does not cover shared objects that are dynamically 
            loaded by an application at run time. For example, Apache dynamically 
            loads the <b>mod_perl</b> shared object during start up with the <b>dlopen(3DL)</b> 
            function. To discover which files and libraries are opened at run-time, 
            the operations of an application can be captured with a system call 
            trace. 
            <p> A system call trace is performed with the <b>truss(1</b>) (Solaris), 
              <b>strace(1)</b> (Linux), <b>tusc(1)</b> (HP-UX 11.X), <b>trace(1)</b> 
              (HP-UX 10.X), or <b>ktrace</b> (BSD) command. Readers familiar with 
              C programming should have no difficulty in following a system call 
              trace. 
            <p> An example of starting up the Apache process in the base operating 
              system is as follows: 
            <p> 
            <pre>
# truss -f /opt/apache/bin/httpd 2&gt;&amp;1 | grep open | more
   ...
28183:  open("/etc/group", O_RDONLY)               = 3
28183:  open("/etc/passwd", O_RDONLY)              = 3
   ...<p>
</pre>
            The above line indicates that <b>httpd</b> opens the files <b>/etc/group</b> 
            and <b>/etc/passwd</b>. These files need to be copied in order for 
            the application to function correctly. In addition to performing system 
            call tracing, some initial application analysis can assist in getting 
            things right the first time. For example, if an application performs 
            functions based on usernames and groups, then it will require <b>/etc/passwd</b> 
            and <b>/etc/group</b>. 
            <p> <b>Putting It All Together</b> 
            <p> When all required resources are installed into the jail, it is 
              time to test Apache in the <b>chroot</b> environment. This can be 
              done by executing the following command: 
            <p> 
            <pre>
# /usr/sbin/chroot /var/chroot /opt/apache/bin/httpd
</pre>
            Be careful when starting a jailed application for the first time, 
            because some unforeseen or unknown resource may not been installed 
            within the jail. An example is Apache returning with the following 
            error message: 
            <p> 
            <pre>
httpd: bad user name nobody
</pre>
            At this point, a system call trace will again be beneficial in displaying 
            what resource is missing: 
            <p> 
            <pre>
# truss -f /usr/sbin/chroot /var/chroot /opt/apache/bin/httpd
</pre>
            Study the output provided from your system call tracer and look for 
            errors. An <b>open()</b> system call that resulted in error was discovered 
            within the trace output: 
            <p> 
            <pre>
...
   28201:  open("/etc/passwd", O_RDONLY)              Err#2 ENOENT
...
</pre>
            The application failed to open the file <b>/etc/passwd</b>, which 
            in turn meant that it was unable to look up the uid for the user name 
            "nobody". The uid is required by Apache to drop privileges 
            after initialization. The user/group-related files can be copied into 
            the jail by executing the following command: 
            <p> 
            <pre>
# cp -p /etc/passwd /var/chroot/etc/passwd
# cp -p /etc/group /var/chroot/etc/group
</pre>
            Once complete, restarting Apache yields another failure. The error 
            message is as follows: 
            <p> 
            <pre>
# /usr/sbin/chroot /var/chroot /opt/apache/bin/httpd
ld.so.1: /opt/apache/bin/httpd: fatal: relocation error:
   file /usr/lib/nss_dns.so.1: symbol res_gethostbyname:
   referenced symbol not found
Killed
</pre>
            An error message referring to name resolution is generated and states 
            that the library function <b>res_gethostbyname</b> is missing from 
            the <b>chroot</b> jail. The <b>nm(1)</b> command can be used to check 
            the existence or reference of a function within a library. 
            <p> The following shell command checks each library in <b>/usr/lib</b> 
              for the function in question: 
            <p> 
            <pre>
# for file in 'ls -1 *.so'
     do
      echo "$file:"
        /usr/ccs/bin/nm $file | grep res_gethostbyname |grep -v UNDEF
     done
</pre>
            The output is as follows: 
            <p> 
            <pre>
...
libresolv.so:
[1068]  |    51720|     140|FUNC |GLOB |0    |9    |res_gethostbyname
...
</pre>
            From the resulting output, you can deduce that the function exists 
            within <b>libresolv.so</b>. The library is then copied into place 
            by executing the following command: 
            <p> 
            <pre>
# cp -p /usr/lib/libresolv.so /var/chroot/usr/lib/libresolv.so
</pre>
            At this point, Apache is restarted and loads without error. Nonetheless, 
            perform basic checks to ensure correct operation: 
            <pre>
# /usr/sbin/chroot /var/chroot /opt/apache/bin/httpd
# ps -ef | grep http
     nobody 23646 23643  0 19:57:37 ?      0:00 /opt/apache/bin/httpd
     nobody 23648 23643  0 19:57:37 ?      0:00 /opt/apache/bin/httpd
     nobody 23645 23643  0 19:57:37 ?      0:00 /opt/apache/bin/httpd
     nobody 23644 23643  0 19:57:37 ?      0:00 /opt/apache/bin/httpd
      root  23643     1  0 19:57:36 ?      0:00 /opt/apache/bin/httpd

# telnet localhost 80
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
HEAD / HTTP/1.0

HTTP/1.1 200 OK
Date: Tue, 17 Apr 2001 10:19:58 GMT
Server: Apache/1.3.12 (Unix)
... 

# tail -1 /var/chroot/opt/apache/logs/access_log
127.0.0.1 - - [17/Apr/2001:10:23:16 +0000] "GET / HTTP/1.0" 200 1358
</pre>
            According to the basic tests above, the newly jailed Apache server 
            is operating correctly. Perform thorough testing of the application 
            to validate correct operation within the jail. An example <b>init</b> 
            script is described in Listing 4 to illustrate how to start and stop 
            Apache in the jail. 
            <p> This raises an interesting issue -- the Apache server logs 
              to a file within the jail, but does <b>syslog</b> work in a <b>chroot</b> 
              environment? Without specific configuration, <b>syslog</b> operations 
              will fail within the jail. Fortunately, there are three possible 
              ways of configuring <b>syslog</b> support within a jail, and the 
              most appropriate method depends on your operating system. 
            <p> <b>Syslog</b> 
            <p> Most software needs to perform some logging, and the standard 
              UNIX <b>syslog</b> is a popular tool for doing so. Inside a <b>chroot</b> 
              environment, it is possible, with some configuration, to perform 
              <b>syslog(3C)</b> operations that propagate to the log files outside 
              the jail. 
            <p> To provide <b>syslog(3C)</b> support in a Solaris <b>chroot</b> 
              environment, the creation of the device files <b>/dev/log</b> and 
              <b>/dev/conslog</b> within the jail is all that is required. For 
              example: 
            <p> 
            <pre>
# mknod /var/chroot/dev/log c 21 5
# mknod /var/chroot/dev/conslog c 21 0
</pre>
            Alternatively, the <b>syslogd(8)</b> daemon provided with the free 
            UNIX variants (e.g., Linux, OpenBSD, etc.) provides a command-line 
            argument to specify additional <b>syslog</b> sockets (up to 19 additional 
            sockets may be specified). An example is as follows: 
            <p> 
            <pre>
# syslogd -a /var/chroot/dev/log   # Linux and OpenBSD
# syslogd -l /var/chroot/dev/log   # FreeBSD
</pre>
            The <b>syslogd(8)</b> daemon will automatically create the logging 
            socket within the jail file system and will look similar to the following: 
            <p> 
            <pre>
# ls -l /var/chroot/dev/log
srw-rw-rw-   1 root     root       0 Apr 20 11:32 /var/chroot/dev/log
</pre>
            Alternatively, if <b>syslogd(8)</b> does not support additional sockets, 
            multiple instances of <b>syslogd(8</b>) may be run with each listening 
            on a specific device or socket within the jail file system. 
            <p> <b>Applications with Built-In chroot Support</b> 
            <p> A variety of applications contain built-in <b>chroot(2)</b> support. 
              This functionality is particularly useful in software that is accessible 
              from the Internet such as WWW, DNS, and SMTP servers. 
            <p> This section will briefly cover the compilation, configuration, 
              and installation of ISC BIND, Boa, and Obtuse SMTPD. 
            <p> <b>BIND</b> 
            <p> ISC's BIND name server has had a significant number of security 
              problems over the past few years. Fortunately, BIND has the ability 
              to run in a <b>chroot</b> jail. Any cracker that is able to compromise 
              BIND will not be able to attack the rest of the host system. Given 
              that history often repeats itself, every BIND name server should 
              run in a <b>chroot</b> jail. In fact, running BIND in a jail is 
              a SANS recommendation [4]. 
            <p> Download the latest version of BIND (8.2.3-REL at the time of 
              writing) from <b>ftp.isc.org</b>. Uncompress the <b>tar</b> ball 
              into a temporary directory and customize the <b>Makefile.set</b> 
              for the host operating system (e.g., <b>port/solaris/Makefile.set</b>). 
              For example: 
            <p> 
            <pre>
'CC=gcc'
'CDEBUG=-O2'
'DESTBIN=/usr/local/named/bin'
'DESTSBIN=/usr/local/named/sbin'
'DESTEXEC=/usr/local/named/sbin'
'DESTMAN=/usr/local/named/share/man'
'DESTHELP=/usr/local/named/lib'
'DESTETC=/usr/local/named/etc'
'DESTRUN=/var/named'
'LDS=:'
'AR=/usr/ccs/bin/ar cru'
'LEX=/usr/ccs/bin/lex'
'YACC=/usr/ccs/bin/yacc -d'
'SYSLIBS=-ll -lnsl -lsocket'
'INSTALL=/usr/ucb/install'
'MANDIR=man'
'MANROFF=man'
'CATEXT=$$N'
'PS=ps -p'
'RANLIB=/usr/ccs/bin/ranlib'
</pre>
            The above example Solaris <b>Makefile.set</b> does not limit BIND's 
            configuration to run only in a jail, but allows it to run within the 
            base file system. After customizing <b>Makefile.set</b>, change directory 
            to <b>src</b> and run <b>make</b>. When BIND has compiled and linked, 
            run <b>make install</b> to install the binaries into the directories 
            defined in <b>Makefile.set</b>. Once installed, a non-privileged user 
            and group that will run BIND must be created, and the jail environment 
            must be prepared. 
            <p> Start with the base jail as defined previously in this article. 
              In addition to the base jail, the <b>lex</b> system library <b>/usr/lib/libl.so.1</b> 
              and the multiple precision library <b>/usr/lib/libmp.so.2</b> must 
              be copied into <b>/usr/lib</b> relative to the jail. Many of the 
              BIND helper binaries such as <b>named-xfer</b> must also be included 
              in the jail. It is best to copy the entire <b>/usr/local/named</b> 
              structure to the jail and then remove unnecessary files as required. 
              Listing 1 provides an example of a typical BIND jail. (All listings 
              for this article are available from the <i>Sys Admin</i> Web site: 
              <b>http://www.sysadminmag.com</b>.) 
            <p> Typically, zone files and internal BIND debug files are stored 
              in <b>/var/named</b>. The <b>/var/named</b> directory in the jail 
              needs to be created with sufficient permissions for the non-privileged 
              user running BIND to read and write. An example is as follows: 
            <p> 
            <pre>
# mkdir -p /var/chroot/var/named
# chown named:named /var/chroot/var/named
# chmod 755 /var/chroot/var/named
</pre>
            The BIND configuration file <b>named.conf</b> should be stored within 
            the <b>chroot</b> jail, and all paths specified within <b>named.conf</b> 
            should be relative to the jail. In this example, <b>named.conf</b> 
            would be stored in <b>/var/chroot/etc/named.conf</b> in the base file 
            system and referred to as <b>/etc/named.conf</b> relative to the jail. 
            Once configured, <b>named</b> may be started in the <b>chroot</b> 
            jail as a non-privileged user/group (<b>named/named</b>) with the 
            following command: 
            <p> 
            <pre>
# /usr/local/named/sbin/named -u named -g named -t /var/chroot -c /etc/named.conf
</pre>
            BIND can be configured to log directly to a file, or the jail can 
            be configured to log to <b>syslog</b> as detailed previously in this 
            article. Consult the BIND documentation for further information relating 
            to logging and application configuration. 
            <p> <b>Boa</b> 
            <p> Boa is a popular light-weight, high-performance non-forking Web 
              server that aims to be secure. It is often used in situations where 
              the significant amount of functionality in Web servers such as Apache 
              is not required. Boa is used by sites such as by <b>Hotmail.com</b> 
              to serve images and static pages. If large amounts of server-generated 
              dynamic content is required, then another Web server may be more 
              appropriate. 
            <p> A patched version of the Boa 0.94.8.3 Web server contains <b>chroot</b> 
              support. Download Boa 0.94.8.3 from <b>http://www.boa.org</b>. Uncompress 
              the <b>tar</b> ball in a temporary directory and then download and 
              uncompress the <b>chroot</b> and Solaris support patch from <b>http://www.inodes.org/~liam/boa/</b> 
              into the Boa <b>src</b> directory. Apply the individual patches 
              with the following command: 
            <p> 
            <pre>
$ ./boa-patch
</pre>
            The output should look as follows: 
            <p> 
            <pre>
Looks like a new-style context diff.
done
...
   Looks like a new-style context diff.
Done
</pre>
            Once the patch has applied, run <b>configure</b> and then <b>make</b> 
            (GNU <b>make</b> is required) to compile Boa. Once compiled and linked, 
            install the <b>boa</b> executable into a directory in the base file 
            system such as <b>/usr/local/sbin</b>. A non-privileged user must 
            be created to run the Boa Web server. For example, create a user and 
            group called "www". 
            <p> The jail environment must now be prepared. Begin with the base 
              jail as defined previously in this article and copy the <b>boa_indexer</b> 
              binary into the directory <b>/usr/bin</b> relative to the jail. 
              For example: 
            <p> 
            <pre>
# mkdir -p /var/chroot/usr/bin
# cp /usr/src/boa-0.94.8.3/src/boa_indexer /var/chroot/usr/bin
</pre>
            A copy of the Boa configuration file must also be placed into the 
            jail. For example: 
            <p> 
            <pre>
# mkdir -p /var/chroot/etc/boa
# cp /usr/src/boa-0.94.8.3/boa.conf /var/chroot/etc/boa
</pre>
            A directory to store Web content must then be created within the jail. 
            For example: 
            <p> 
            <pre>
# mkdir -p /var/chroot/var/www
# chown www:www /var/chroot/var/www; chmod 755 /var/chroot/var/www
</pre>
            The path of the content root directory relative to the jail will then 
            be passed to Boa as a command-line argument at run time. Finally, 
            a directory with appropriate write permissions to store logs must 
            also be created. For example: 
            <p> 
            <pre>
# mkdir -p /var/chroot/var/log
# chown www:www /var/chroot/var/log; chmod 755 /var/chroot/var/log
</pre>
            The <b>mime.types</b> file (available from within the Apache distribution) 
            must be copied into the <b>/etc/boa</b> directory within the jail, 
            and the <b>boa.conf</b> configuration file should be configured accordingly. 
            <p> Do not include the ChrootPath configuration directive in <b>boa.conf</b>. 
              This configuration directive is not used in the patched version 
              of Boa. Instead, Boa determines its jail path from a command-line 
              argument. Once the jail has been set up, Boa can run with the following 
              command: 
            <p> 
            <pre>
# /usr/local/sbin/boa -c /var/www -e /var/chroot &amp;
</pre>
            Some basic tests should be performed (as described earlier in this 
            article) to ensure that Boa is functioning correctly. 
            <p> Many readers may also wish to deploy Web servers with dynamic 
              content in <b>chroot</b> jails. This can be achieved with a little 
              additional work. For example, to run basic Perl scripts within the 
              jail, download Perl from <b>http://www.cpan.org</b>, compile as 
              normal, and copy the entire distribution into the jail. If Perl 
              was installed into the <b>/opt/perl5</b> directory within the base 
              file system, then: 
            <p> 
            <pre>
# mkdir -p /var/chroot/opt/perl5
# cp -R /opt/perl5/* /var/chroot/opt/perl5/
</pre>
            The relevant libraries will need to be copied into the jail as described 
            earlier in this article. If scripts utilize functions such as <b>system()</b>, 
            then the default shell <b>/bin/sh</b> and other utilities will need 
            to be copied into the jail. Keep in mind that the utilities and functionality 
            added to the jail will be also be available to a cracker. These utilities 
            may be used to perform attacks on other machines in your network. 
            <p> A complete listing of the contents of the Boa jail is described 
              in Listing 2. 
            <p> <b>SMTPD</b> 
            <p> SMTPD is a popular store-and-forward SMTP proxy that has <b>chroot</b> 
              support built in. It is available from <b>http://www.obtuse.com/smtpd.html</b>. 
              The <b>smtpd</b> executable listens on port 25 and stores messages 
              in the <b>chroot</b> jail. The <b>smtpfwdd</b> daemon executes outside 
              the <b>chroot</b> jail and pipes the messages stored within the 
              jail to an MTA (e.g., Sendmail or qmail) for delivery. 
            <p> The supplied INSTALL and README documentation provides a good 
              guide to compiling and installing SMTPD in a <b>chroot</b> jail. 
              Prior to installation, a non-privileged user and group that will 
              run SMTPD should be created. 
            <p> Next, edit and configure the <b>Makefile</b> accordingly for your 
              own site. In particular, the SPOOLDIR variable should point to the 
              base path of the <b>chroot</b> jail (e.g., <b>/var/chroot</b>), 
              and the <b>SPOOSUBDIR</b> variable should point to a directory (e.g., 
              <b>/mqueue</b>) relative to the jail where messages will be stored. 
              Additionally, the <b>SMTP_USER</b> and <b>SMTP_GROUP</b> variables 
              should be set to the non-privileged user that SMTPD will run as. 
              That user must have sufficient privileges to write to the SPOOLSUBDIR 
              directory defined in the <b>Makefile</b>. 
            <p> Once compiled, the <b>smtpd</b> and <b>smtpdfwdd</b> binaries 
              should be copied to a directory within the base file system (e.g., 
              <b>/usr/local/sbin</b>). 
            <p> The <b>chroot</b> jail should then be built using the standard 
              base described previously in this article. Note that if SMTPD is 
              installed on a Solaris system later than version 2.5.1, the <b>chroot</b> 
              jail should be configured according to the base jail described before, 
              not the configuration in the SMTPD documentation. 
            <p> SMTPD can then be started by placing the relevant entry in <b>inetd.conf</b> 
              as specified in the documentation or running it in daemon mode by 
              executing the following command: 
            <p> 
            <pre>
# /usr/local/sbin/smtpd -D &amp;
</pre>
            For messages to be delivered, the SMTP forwarding daemon must be started 
            with the following command: 
            <p> 
            <pre>
# /usr/local/sbin/smtpfwdd &amp;
</pre>
            A complete listing of the contents of the SMTPD jail is described 
            in Listing 3. 
            <p> <b>Conclusion</b> 
            <p> Configuring software to execute within a <b>chroot</b> jail is 
              an art tempered with a smattering of trial and error. However, the 
              significant security benefits outweigh any initial inconvenience 
              or time spent configuring jails. Placing untrusted or Internet-facing 
              applications in a <b>chroot</b> jail minimizes the damage a cracker 
              can do to your other applications or other systems by limiting the 
              facilities and tools available. This provides an extra level of 
              comfort and allows systems administrators to sleep a little easier. 
            <p> <b>References</b> 
            <p> 1. VMWare -- Virtual machine software for Linux or Windows 
              NT/2000: <b>http://www.vmware.com</b>. 
            <p> 2. Bochs -- Intel x86 emulator software: <b>http://www.bochs.com/</b>. 
            <p> 3. How to break out of a <b>chroot()</b> jail: <b>http://www.bpfh.net/simes/computing/chroot-break.html</b>. 
            <p> 4. How to eliminate the ten most critical Internet security threats: 
              <b>http://www.sans.org/topten.htm</b>. 
            <p> <i>Liam Widdowson is a consultant at Hewlett-Packard. He can be 
              contacted at: <b>lbw@telstra.com</b>.</i> 
      </table>
</table>
<br>
&nbsp;<br>
<! -- End Content ------ >
<!/center>
<! -- End MASTER TABLE -- >
</body>
<! -- Begin Content ------ >
</html>
