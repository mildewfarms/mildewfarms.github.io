<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i05: New Messages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2001/may2001.tar"><b class=codeListing>may2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b><img src="../../resource/messages.gif" width="200" height="77" align="right">New 
              Messages</b></h1>
            <p> To: Rainer Raab<br>
              From: Michael Wang &lt;<b>mwang@mindspring.com</b>&gt;<br>
              Subject: Your article on ksh functions (March issue)
            <p> 
            <p> I read the introduction and conclusion part on your article on 
              ksh functions, as I am interested to know why you choose to use 
              *functions* instead of the scripts. However, I fail to get the answer. 
              Can you give me three reasons?
            <p> As to the two function forms:
            <p> 
            <pre>
funtion name { ... }
</pre>
            and
            <p> 
            <pre>
name() { ... }
</pre>
            the primary difference has to do with scoping of variables and traps, 
            as documented in Bolsky and Korn, ISBN 0-13-182700-6, page 76.
<hr>
            To: Michael Wang &lt;<b>mwang@mindspring.com</b>&gt;<br>
            Subject: Re: Your article on ksh functions<br>
            Hello Michael, 
            <p> Great question. Creating globally accessible Korn shell function 
              libraries provides the same benefits as providing the same libraries 
              as Korn shell scripts, i.e. promoting the sharing of code, decreasing 
              the amount of time spent QA'ing scripts, and reducing redundant 
              programming.
            <p> As to why do I prefer using globally accessible Korn Shell functions 
              instead of implementation as a Korn Shell script:
            <p> 
            <p> 1. Functions run as part of the current shell, i.e. they behave 
              as built-in shell commands. They don't run as a separate process.
            <p> 2. Functions have order precedence over scripts when invoked, 
              providing for enhanced security.
            <p> 3. Functions can be more easily secured by the use of the FPATH 
              environment variable, as opposed to using the PATH environment variable.
            <p> 4. Once a function has been accessed, it is stored in memory and 
              does not have to been re-read from disk.
            <p> 5. Functions provide a standardized framework to build on, rather 
              than creating and enforcing your own standards.
            <p> 6. Functions can be easily managed using the built-in functions 
              (<b>typeset -f</b>) command to display available functions.
            <p> I hope that answers your question.
            <p> 
            <p> Best Regards,<br>
              Rainer Raab
			  <hr>
             To: Brett Lymn<br>
              From: Alek Komarnitsky &lt;<b>alek@komar.org</b>&gt;<br>
              Subject: Comment on "Duplicating Data" article in March/2001 
              <i>Sys Admin</i><br>
              Brett,
            <p> I read your article about "Duplicating Data", and you 
              talked about a handy feature in Solaris2.6+ where the automounter 
              now has the ability (as <b>amd</b> has had for a long time) to failover 
              to server2 if server1 goes down (after the mount occurs).
            <p> I'm pretty sure you need to have the mount point specified 
              as read-only ... this kinda clues in the automounter that this is 
              a "replicated filesystem" and it can therefore assume 
              you have done "something" to ensure that they are all 
              the same (as you correctly talk about later in your article).
            <p> The "<b>ro</b>" option exists in your discussion about 
              <b>amd</b>; but wasn't there for the Sun automounter, so maybe 
              this was just an editing blip?
            <p> 
            <p> <b>alek@komar.org</b>
<hr> 
             From: Brett Lymn<br>
              Subject: Re: Duplicating Data article in March
            <p> 
            <p> Yes, you are correct. There should have been a "<b>-ro</b>" 
              option on the example for the Sun automounter. I have it in my test 
              setup but, for some reason, it never made it into the article. The 
              correct line should read:
            <p> 
            <pre>
tree    -ro    server1:/share/file/tree server2:/share/file/tree
</pre>
            Thanks for being so observant.
            <p> 
            <p> Brett Lymn<br>
              Computer Systems Administrator<br>
              BAE SYSTEMS
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
