<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i05: Using PHP and MySQL as a Weblog</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2001/may2001.tar"><b class=codeListing>may2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a1.gif" width="200" height="174" align="right">Using 
              PHP and MySQL as a Weblog</h1>
            <p> <i>Anders &Oslash;sterg&aring;rd Jensen</i>
            <p> In this article, I will show how the embedded server-side scripting 
              language PHP and the fast MySQL database can work as a Weblog. The 
              logged data (e.g., date, time, browser, and IP) is stored in the 
              database, and when the Webmaster wants to check the Weblog, he just 
              opens a PHP file on the Web server. This file loads all data from 
              the MySQL database and prints it out as HTML. What distinguishes 
              PHP from Java or Javascript, for example, is that the PHP script 
              is executed and operated on the server. The PHP parser will print 
              the output from the script as HTML. The opposite is a client-side 
              scripting language, which is executed and operated on the client 
              computer.
            <p> Besides manipulating and creating dynamic Web pages, PHP also 
              has many advanced database functions that allow the Webserver to 
              connect to and query database servers, such as MySQL, PostgreSQL, 
              and Oracle. In this article, I will be using MySQL because of its 
              popularity at Web sites and hosting services. See Figure 1 for an 
              illustration of how the PHP technique works.
            <p> <b>The Basics</b>
            <p> As stated before, the PHP code is included in the HTML at the 
              server. The code starts with <b>&lt;?php</b> or <b>&lt;?</b> and 
              ends with <b>?&gt;</b>, so the Web server can recognize the PHP 
              code. Everything inside these tags, except from output, will not 
              be visible by the client. I'll start with a traditional "Hello 
              World" example:
            <p> 
            <pre>
&lt;?php
// Comments can look like this
/* Or like this */

echo "Hello World";

?&gt;
</pre>
            Remember, all PHP files end with a <b>.php</b> or <b>.php3</b>, depending 
            on the settings in the <b>httpd.conf</b> file. The PHP syntax looks 
            a lot like C. All commands and functions end with a semicolon. The 
            next example demonstrates the inclusion of PHP in an HTML file and 
            the use of variables:
            <p> 
            <pre>
&lt;html&gt;

&lt;head&gt;
&lt;title&gt;PHP-test&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
This is not PHP-output&lt;br&gt;&lt;br&gt;
&lt;?php
$var = "&lt;b&gt;This is PHP-output&lt;/b&gt;";
echo $var;
?&gt;
&lt;/body&gt;

&lt;/html&gt;
</pre>
            PHP also includes some useful system/environment variables, which 
            identify client browser, client IP, server name, etc. To make the 
            Web server print out your browser and IP, use the following code:
            <p> 
            <pre>
&lt;?php
echo "My browser: ";
echo $HTTP_USER_AGENT;
echo "&lt;br&gt;My IP: ";
echo $REMOTE_ADDR;

?&gt;
</pre>
            As shown, some of these system variables could be useful in a Weblog. 
            Later, I will show how these variables can be inserted in the database. 
            A complete list of all system variables in the PHP scripting language 
            can be found by using the <b>phpinfo()</b> function, which generates 
            a useful document.
            <p> <b>Creating the Database</b>
            <p> The database functions are a little more advanced than the basic 
              variable-to-output functions shown above. First, we need to connect 
              to the MySQL server. This is done by using the following function:
            <p> 
            <pre>
mysql_connect($host, $username, $password);
</pre>
            If you are running the Web server and MySQL server at your computer, 
            <b>mysql_connect("localhost", "root");</b> is often enough. If the 
            PHP file is hosted by an Internet hosting service, ask the sys admin 
            for the username and password for the database. The <b>$host </b>variable 
            also contains the potential for connecting to MySQL servers anywhere 
            on the Internet. To connect to a database at the Web server, use the 
            following function:
            <p> 
            <pre>
mysql_selectdb($db);
</pre>
            where <b>$db</b> is the name of your database. To send SQL queries, 
            use this function:
            <p> 
            <pre>
mysql_query($query);
</pre>
            where <b>$db</b> contains your SQL commands.
            <p> Next, connect and create a table in the database that contains 
              the fields <b>id</b>, <b>date</b>, <b>ip</b>, <b>port</b>, <b>browser</b>, 
              and <b>time</b>. The following PHP code, which uses the functions 
              above, will do this:
            <p> 
            <pre>
&lt;?php
mysql_connect("localhost", "root");
mysql_selectdb("mydb");
mysql_query("
CREATE TABLE weblog (

ip VARCHAR(255),
port VARCHAR(255),
browser VARCHAR(10),
time VARCHAR(255),
id INT NOT NULL AUTO_INCREMENT,
PRIMARY key(id),
date TIMESTAMP(8)
)");
?&gt;
</pre>
            We've now created the fields for the PHP system variables for 
            the Weblog. The date field will generate a date by the MySQL server 
            each time data is inserted. The current time will be generated by 
            the PHP command <b>date("H:i:s");</b> and inserted into the time field. 
            The id is a unique number for each inserted set of data and is automatically 
            generated by the MySQL server whenever data is inserted. Executing 
            the the code on the server won't give any output, and you can't 
            know whether the table is created or not. To solve this problem, modify 
            your code to this:
            <p> 
            <pre>
&lt;?php
mysql_connect("localhost", "root") || \
  die("The &lt;b&gt;mysql_connect()&lt;/b&gt; failed!");
mysql_selectdb("mydb") || die("The \
  &lt;b&gt;mysql_selectdb()&lt;/b&gt; failed!");
if(
mysql_query("
CREATE TABLE weblog (
ip VARCHAR(255),
port VARCHAR(255),
browser VARCHAR(10),
time VARCHAR(255),
id INT NOT NULL AUTO_INCREMENT,
PRIMARY key(id),
date TIMESTAMP(8)
)")
) {
echo "The table was created!";
}
else {
echo "The table was not created!";
}
?&gt;
</pre>
            If someting fails, the <b>die()</b> functions will print out the text 
            located inside the brackets. For example, if the <b>mysql_connect()</b> 
            fails, you will see the output "<b>The mysql_connect() failed!</b>" 
            in your browser. The if-then-else statement will tell you whether 
            the table was created by putting the <b>mysql_query()</b> into an 
            if-operator.
            <p> <b>Using the Database</b>
            <p> The next step is to insert some PHP code in the Web page where 
              you want the Weblog (e.g., <b>index.php</b>). The Weblog will fetch 
              the necessary information from the client, establish the database 
              connection, and insert the retrieved data into the database. The 
              code should look like:
            <p> 
            <pre>
&lt;?php
$time = date("H:i:s");
mysql_connect("localhost", "root");
mysql_selectdb("mydb");
mysql_query("INSERT INTO weblog(ip, browser, port, time) " . " \<br>
  VALUES('$REMOTE_ADDR', '$HTTP_USER_AGENT', '$REMOTE_PORT', \<br>
  '$time')");
?&gt;
</pre>
            When the client loads the document, the Web server will do the following:
            <p> 
            <ul>
              <li> Create the <b>$time </b>variable 
              <li> Connect to the database 
              <li> Select the <b>mydb</b> database 
              <li> Send the SQL-query, which inserts the information retrieved 
                from the client into the table named Weblog
            </ul>
            <b>Printing the Output</b>
            <p> Finally, we need to know which data is stored in the database. 
              We could start the MySQL shell from the command line and edit the 
              data, but it would be easier to open a PHP document on the Web server 
              from any browser and view the data. To do this, we need a PHP procedure 
              that does the following:
            <p> 
            <ul>
              <li> Connects to the database 
              <li> Selects the <b>mydb</b> database 
              <li> Retrieves an array that contains the data 
              <li> Prints out the array
            </ul>
            <p> The code should look like:
            <p> 
            <pre>
&lt;?php
mysql_connect("localhost, root");
mysql_selectdb("mydb");
$query = mysql_query("SELECT * FROM weblog ORDER BY id DESC");
while($row == mysql_fetch_array($query)) {
$ip = $row['ip'];
$browser = $row['browser'];
$port = $row['port'];
$time = $row['time'];
$date = $row['date'];
$id = $row['id'];
echo "No. &lt;b&gt;$id&lt;/b&gt; on &lt;b&gt;$date - $time&lt;/b&gt;&lt;br&gt;
IP: &lt;b&gt;$ip&lt;/b&gt;&lt;br&gt;
Browser: &lt;b&gt;$browser&lt;/b&gt;&lt;br&gt;
Port: &lt;b&gt;$port&lt;/b&gt;&lt;br&gt;&lt;br&gt;";
}
?&gt;
</pre>
            The while loop will retrieve an array named "<b>$row</b>" 
            by using the <b>$query</b> variable to connect to the database. Inside 
            the while loop, a set of variables are created to make the procedure 
            of the variable/array name more manageable. Finally, the data is printed 
            in HTML format.
            <p> <b>Securing PHP/MySQL</b>
            <p> As the Webmaster or Web server administrator, you must secure 
              the vulnerable parts of the PHP/MySQL structure. First, users at 
              the Web server should have access only to their own databases, protected 
              with unique usernames and passwords. The root account should also 
              be password protected, because the default installation of MySQL 
              (e.g., from a Linux distribution) is installed without a password 
              for root. Use <b>mysqladmin</b> to create and administer accounts 
              for the server. This is a useful interface to control installed 
              databases and user accounts, and it is installed by the standard 
              MySQL installation. Check out the MySQL online manual (<b>http://www.mysql.com/</b>) 
              for a complete explanation of the commands and utility options.
            <p> To make the client browser safe for user input (e.g., a forum 
              or a guestbook on a PHP-based site), PHP contains a set of functions 
              that can strip client database input for HTML and PHP commands. 
              PHP input is dangerous because it can contain internal database 
              queries. For example, HTML tags (such as <b>&lt;blink&gt;</b>) and 
              PHP commands are removed from user input by using the <b>strip_tags()</b> 
              function:
            <p> 
            <pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Example using strip_text()&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;This is &lt;b&gt;HTML-formatted&lt;/b&gt; input&lt;/h1&gt;

&lt;?php
$string = "&lt;h1&gt;This is not &lt;b&gt;HTML-formatted&lt;/b&gt; input&lt;/h1&gt;";

echo strip_tags($string);

?&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>
            The parsed document will generate a big headline (<b>&lt;h1&gt;</b>) 
            and an unformatted line of text. Thus, a Web site visitor using form 
            input has no chance of inserting HTML or PHP commands into a string 
            or database. Characters used for HTML codes, such as "&lt;", 
            "&gt;", "&amp;", etc. can be converted into HTML 
            entities by using the <b>htmlspecialchars() </b>function. This disables 
            formatting of the characters and preserves the meaning of the character. 
            The following figure diplays the conversion:
            <p> 
            <ul>
              <li> <b>&lt;</b> becomes <b>&amp;lt</b> 
              <li> <b>&gt;</b> becomes <b>&amp;gt</b> 
              <li> <b>&amp;</b> becomes <b>&amp;amp</b> 
              <li> <b>"</b> (a double quote) becomes <b>&amp;quot</b>
            </ul>
            <p> Use <b>htmlspecialchars()</b> like this:
            <p> 
            <pre>
&lt;?php
$string = "&lt;h1&gt;This is not formatted HTML-code&lt;/h1&gt;";
echo htmlspecialchars($string);
?&gt;
</pre>
            The PHP output will look like:
            <p> 
            <pre>
&amp;lt;h1&amp;gt;This is not formatted HTML-code&amp;lt;/h1&amp;gt
</pre>
            To secure data inserted to a database by an SQL query, it is also 
            necessary to remove the single quotes, double quotes, etc. from the 
            inserted string. This is done by using the <b>addslashes()</b> function, 
            which adds slashes to these special characters. This forces the SQL 
            database to ignore the characters and disables a client from manipulating 
            SQL queries. Use <b>addslashes(); </b>like:
            <p> 
            <pre>
&lt;?php
$string = "&lt;b&gt;'Everything inside single-quotes is ignored'&lt;/b&gt;";
echo addslashes($string);
?&gt;
</pre>
            It is also necessary to quote all meta-characters, which can be done 
            by using the <b>quotemeta()</b> function. This will quote the following 
            characters with a backslash:
            <p> 
            <pre>
. \\ + * ? [ ^ ] ( &amp; )
</pre>
            Use the function:
            <p> 
            <pre>
&lt;?php
$string = "+++++++++ quotemeta() quotes all meta-characters \
  &amp;&amp;&amp;&amp;&amp;&amp;&amp;";
quotemeta($string);
?&gt;
</pre>
            In a forum, it is sometimes necessary to convert line breaks into 
            a <b>&lt;br&gt;</b> tag. This makes the output more readable, but 
            still contains the possibility to remove all other HTML tags. This 
            is done by using the <b>nl2br()</b> function:
            <p> 
            <pre>
&lt;?
$string = "newline.....
newline........
newline........
";
echo nl2br($string);
?&gt;
</pre>
            Thus, the forum user is able to insert line breaks without using any 
            HTML tags.
            <p> When a database connection between the Web server and MySQL server 
              is established, the user name and password are sent in plain text. 
              To avoid the possibility of a misconfigured Web server or corrupt 
              configuration of PHP, it is a good idea to store all variables needed 
              for the database connection in an <b>include</b> file. Whenever 
              a PHP file establishes a connection to a MySQL server via <b>mysql_connect()</b>, 
              it will use the user name, password, and host. These are stored 
              as variables in an <b>include</b> file. The <b>include</b> file 
              should look like:
            <p> 
            <pre>
&lt;?php
$host = "localhost";
$username = "myusername";
$password = "mypassword";
?&gt;
</pre>
            And the main document should look like this:
            <p> 
            <pre>
&lt;?php
require("include-filename");
mysql_connect($host, $username, $password);

/* etc.... */
?&gt;
</pre>
            The <b>require() </b>function fetches all variables from the include 
            file and stores them for use in the main document. The most secure 
            PHP environment is when PHP Safe Mode is activated. This is done by 
            editing the <b>php.ini</b> file, which is located normally in <b>/etc</b> 
            and enabling the following line:
            <p> 
            <pre>
safe_mode = On
</pre>
            This will cause the Web server to perform additional checks of a PHP 
            script before functions, which contain possible security problems, 
            are executed. For example, the filesystem functions such as fopen(), 
            file(), and include() are only able to manipulate files that are owned 
            by the owner of the script. <b>safe_mode_exec_dir = &lt;dir&gt;</b> 
            will force PHP to execute a binary only from a specified directory.
            <p> <b>Securing the PHP CGI Module</b>
            <p> If PHP is running at the server as a CGI module, the Web server 
              is vulnerable to some client-side attacks. PHP is built to prevent 
              some basic CGI-interpreter attacks like this one:
            <p> 
            <pre>
http://localhost/cgi-bin/php?/etc/passwd
</pre>
            PHP still has some problems with PHP files on the Web server redirecting 
            to the installed CGI module (<b>/cgi-bin/php</b>). A simple redirection 
            for the CGI module looks like:
            <p> 
            <pre>
http://localhost/directory/secret/file.php ----&gt; \
   http://localhost/cgi-bin/php?directory/file.php
</pre>
            The directory existing at the Web server is used as GET input to the 
            CGI module, and thereafter parsed. Unfortunately, if the direct POST-path 
            to<b> /cgi-bin/php</b> is entered from the browser, no user permissions 
            are checked, and non-public files in the Web server root are viewable 
            from the client. This attack is prevented by using the <b>--enable-force-cgi-redirect</b> 
            during module compilation.
            <p> <b>Conclusion</b>
            <p> I hope that this article helped to show how a set of relatively 
              simple scripting commands and a MySQL database can work as a Weblog. 
              The security of PHP is an important part of the language, and the 
              functions and security options described in this article can help 
              secure a Web site and make it more difficult for crackers to break 
              into a system.
            <p> PHP is distributed under the GNU/GPL and MySQL is free for private 
              use. If you want to learn more about the PHP language, go to the 
              official Web site at:
            <p> 
            <pre>
http://www.php.net/
</pre>
            The site provides documentation, an online manual, and the latest 
            downloadable sources and binaries. There are also other great PHP 
            Web sites on the Internet (such as <b>http://www.phpdeveloper.com/</b>) 
            that contain other useful articles. The MySQL database is owned by 
            the Swedish company T.c.X DataKonsultAB. MySQL can be downloaded for 
            many platforms from: 
            <p> 
            <pre>
http://www.mysql.com/</pre>
            <i>Anders is a Web designer and has developed a lot of PHP-based Web 
            applications. He is a member of the Danish SunSITE staff and works 
            with Linux and FreeBSD. Anders is also a member of his local Linux 
            User Group in Denmark, MVJLUG (<b>www.MVJLUG.dk</b>).</i>
        </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
