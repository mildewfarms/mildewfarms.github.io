<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i05: Communicating with Intermec and Zebra Bar Code Printers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a15_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a15_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a15_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a15_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a15_l4.htm">Listing 4</a></span></td>
		<td><span class="navbarLink"><a href="a15_l5.htm">Listing 5</a></span></td>
		<td><span class="navbarLink"><a href="a15_l6.htm">Listing 6</a></span></td>
		<td><span class="navbarLink"><a href="a15_l7.htm">Listing 7</a></span></td>
		<td><a href="../../../../source/SA/2001/may2001.tar"><b class=codeListing>may2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><img src="a15.gif" width="200" height="174" align="right">Communicating 
              with Intermec and Zebra Bar Code Printers </h1>
            <p> Ed Schaefer
            <p> If you're administering a UNIX application requiring bar 
              code printer support, plan on serious development time. Every programming 
              example I've seen is DOS/Windows based. In this article, I 
              will demonstrate a UNIX "C" tool kit for communicating 
              with Intermec and Zebra bar code printers, both serial and TCP/IP 
              network connected. Intermec and Zebra are two premier providers 
              of quality bar code printers.
            <p> The demonstration program, <b>bc_demo</b>, uses the tool kit to 
              create an Intermec and Zebra test label containing human-readable 
              text, code 39 bar codes, and the ubiquitous Consumer Electronics 
              (CE) graphics character. Figure 1 shows the example label.
            <p> In normal production, required data such as labels, serial devices, 
              network ports, and data sent to the bar code printer are stored 
              in a database, a file system, or other repository and retrieved 
              as needed. Because the emphasis is on using the tool kit, these 
              objects are hard-coded in a "C" structure and arrays of 
              character pointers to strings and are not retrieved.
            <p> <b>How Do Bar Code Printers Work?</b>
            <p><b> </b>The printer vendors provide a control language for controlling 
              the printer's firmware downloading a label format to the printer's 
              RAM. The label format is the definition of what objects appear on 
              the label. For a given object, the label defines the font and size, 
              location, human readable or bar code, or whether the field data 
              is constant or variable. Also, user-defined graphics characters, 
              such as the CE mark, may also be downloaded to the printer.
            <p> Once a format exists in the printer's RAM, the control language 
              downloads the required variable data for each required label and 
              prints the label. Typically, a format downloads to the printer once 
              and is used many times.
            <p> For Intermec and Zebra printers, the control language is the Intermec 
              Printer Command Language and the Zebra Programming Language II (ZPL 
              II), respectively. A detailed explanation of these languages is 
              beyond the scope of this article. Just enough control language is 
              used to download and print the example label in Figure 1.
            <p> <b>What is the Environment?</b>
            <p><b> </b>The tool kit was developed under Solaris 7 (11/99) using 
              an Intel Dual Xeon System with an Intel Pro100+ network adapter. 
              Because the operating system is Solaris, the network communication 
              will be decidedly BSD. The printers are the Intermec 3400B (200 
              dpi) and the Zebra 105Se (203 dpi). While the tool kit functions 
              with any printer supporting either of the two control languages, 
              the demo label's real estate (i.e., where the objects reside 
              on the label) is designed for the above printers. 
            <p> <b>How Does the bc_demo Program Work?</b>
            <p><b> </b>In a production environment, the label format and graphics 
              characters are downloaded once to the printer. From that point, 
              for each label required, the variable data will be collected, and 
              in one step, the data and commands will be downloaded, and the label 
              will be printed. Emulating production, the demo program (<b>bc_demo</b>) 
              downloads the required format and prints two labels with differing 
              data. The pseudo code is:
            <p> 
            <p> 1. Choose the printer (Intermec TCP/IP, Zebra TCP/IP, Intermec 
              Serial, or Zebra Serial). 
            <p> 2. Open the network port or serial device based on the chosen 
              printer. 
            <p> 3. Download the CE graphic character to the printer. 
            <p> 4. Download the label format to the printer. 
            <p> 5. Download the data to the printer for label 1 and print label 
              1. 
            <p> 6. Download the data to the printer for label 2 and print label 
              2. 
            <p> 7. Close the network port or serial device. 
            <p> 
            <p> <b>How Do I Choose a Printer?</b>
            <p><b> </b>Via the command line, choose the printer to demo. The keyword 
              <b>intermectcpip</b> is the Intermec network printer; <b>zebratcpip</b> 
              is the Zebra network printer; <b>intermecserial</b> is the Intermec 
              serial printer; and <b>zebraserial</b> is the Zebra serial printer.
            <p> In the structure declaration section of Listing 1 (<b>printer_choice</b>), 
              declare the four keyword definitions: the function to call using 
              a pointer to a function, (<b>*fptr()</b>), and the three arguments 
              to the function. The arguments are the network address or serial 
              device, the port number of the network device or baud rate of the 
              serial device, and the printer choice (1 = Intermec, 2 = Zebra).
            <p> Assign the address of the function to call -- either <b>bc_tcpip</b> 
              or <b>bc_serial</b> -- to the pointer to a function. At runtime, 
              the loop processing the command-line options determines the correct 
              function to call based on printer choice. The NULL pointer at the 
              end of the program structure terminates the loop. The functions 
              <b>bc_tcpip</b> and <b>bc_serial</b> must contain the same argument 
              types and return the same data type.
            <p> <b>How Do I Use a Serial Printer?</b>
            <p><b> </b>If the choice is a serial printer, the <b>bc_serial</b> 
              function in <b>serial.c</b> (Listing 2) executes with the following 
              parameters: which serial port to open, the baud rate (9600 in the 
              example), and which serial printer to use (Intermec = 1 and Zebra 
              = 2).
            <p> In UNIX, a device can be opened just as a file is opened. The 
              <b>open</b> function opens the device and returns the operating 
              system's lowest available integer file descriptor. The bitwise 
              inclusive (<b>OR</b> or <b>O_RDWR</b> and <b>O_SYNC</b>) opens the 
              device for read-write and causes data to be delivered to the device 
              to block.
            <p> Once the file descriptor is obtained, a call to the <b>set_terminal</b> 
              function manipulates printer options using the <b>termio</b> structure 
              and the <b>ioctl</b> control device function:
            <p> 
            <p> 1. The terminal input control flag, <b>termio.c_iflag</b>, with 
              an inclusive <b>OR</b> sets the ignore break condition, (<b>IGNBRK</b>), 
              inputs parity checking (<b>INPCK</b>), strips characters to 7 bits 
              (<b>ISTRIP</b>), and enables start/stop control (<b>IXON|IXOFF</b>). 
            <p> 2. The terminal control mode flag, <b>termio.c_cflag</b>, bitwise 
              inclusive <b>OR</b> sets the baud rate (<b>B9600</b> or <b>B19200</b>), 
              enables receiver (<b>CREAD</b>), 7-bit character size (<b>CS7</b>), 
              and enables parity (<b>PARENB</b>). 
            <p> 3. The terminal special control character array, <b>termio.c_cc[VMIN] 
              = 1 and c_cc[VTIME] = 0</b>, controls processing just one character 
              at a time.
            <p> 
            <p> The original terminal values were saved before calling <b>set_terminal</b>. 
              When the label printing is completed, the original terminal values 
              are restored.
            <p> <b>How Do I Communicate with the Printer?</b>
            <p><b> </b>Once the printer is opened, write objects to the device 
              using the <b>write_load_commands function</b>, located in <b>bc_demo.c</b>. 
              The <b>write_load_commands</b> parameters are the array of character 
              pointers comprising the data and the integer file descriptor returned 
              from the <b>open</b> function call or from a network socket call. 
              For each line of text in the array, you can call the <b>write_port_data 
              function</b>, also located in <b>bc_demo.c</b>, to write the string 
              to the printer. The <b>write_port_data</b> function writes the passed 
              string one character at a time up to the null terminator.
            <p> Any array of pointers passed to the <b>write_load_commands</b> 
              function must be terminated with a null character pointer, <b>(char 
              *) NULL</b>.
            <p> <b>How Do I Download a Graphics Character?</b>
            <p><b> </b>The first object to download is the CE graphics character 
              located in <b>cemarks.h</b>, Listing 3. The array of character pointers 
              containing the Zebra CE definition is <b>*zebra_ce[]</b> and the 
              Intermec definition is <b>*intermec_ce[]</b>. Download the correct 
              array based on which printer is chosen.
            <p> Intermec and Zebra each have their own method for creating graphics 
              characters from bit-mapped objects. While the methods are beyond 
              this article's scope, Intermec calls their characters 6-bits 
              per byte graphics and Zebra refers to their graphics as hexadecimal 
              representations.
            <p> Besides the obvious differences of graphics definition and command-language 
              syntax, a few of the differences between the two vendors are:
            <p> 
            <p> 1. Zebra requires the graphics character to be downloaded as a 
              one-character stream, while the Intermec supports writing multiple 
              lines. 
            <p> 2. Zebra identifies the character by name (i.e., CEMARK.ZPL) while 
              Intermec identifies the character by graphics position in the printer 
              (i.e., G0). 
            <p> 3. Intermec can, optionally, embed a graphics character definition 
              within a normal label format and download both at the same time. 
              Zebra requires graphics characters to be downloaded separately from 
              the label format. 
            <p> 4. Intermec embeds the command to print a previously downloaded 
              graphics character within the label format, while Zebra embeds the 
              print graphics command with the other print commands.
            <p> <b>How Do I Download a Label Format?</b>
            <p><b> </b>The Intermec and Zebra label formats are stored in <b>intermec.h</b>, 
              Listing 4, and <b>zebra.h</b>, Listing 5, respectively. As with 
              the graphics characters, labels are stored in an array of character 
              points with the Intermec format stored in <b>*load_intermec_label[]</b> 
              and the Zebra format stored in <b>*load_zebra_label[]</b>. Via a 
              call to the <b>write_load_commands</b> function, you can download 
              the correct array based on the chosen printer. 
            <p> <b>How Do I Print the Label?</b>
            <p><b> </b>Once the graphics character and label format are downloaded, 
              download the data and print commands to the printer and the label 
              prints. The Intermec and Zebra data and print commands are also 
              stored in <b>intermec.h</b> and <b>zebra.h</b> respectively. The 
              first Intermec label is <b>*print_intermec_label1[]</b>, and the 
              second is <b>*print_intermec_label2[]</b>. The Zebra data and print 
              commands are named similarly in <b>zebra.h</b>. Via a call to <b>write_load_commands</b> 
              function, download the correct array based on the chosen printer 
              and the label prints.
            <p> If the choice is to use a TCP/IP network printer instead of a 
              serial printer, follow the same downloading and printing scenario 
              as with the previously described serial printer, only replace the 
              serial <b>open</b> with a TCP/IP network <b>open</b>.
            <p> <b>How Do I Use a TCP/IP Network Printer?</b>
            <p><b> </b>To use the TCP/IP printer, the <b>bc_tcpip</b> function 
              in <b>tcpip.c</b> (Listing 6) executes with three parameters: the 
              network address to open, the network port (3001 for Intermec and 
              9100 for the Zebra), and the network printer (Intermec = 1 and Zebra 
              = 2).
            <p> The <b>open_network_device</b> function, using the Berkeley Network 
              Library Routines, opens the printer port and returns a socket descriptor 
              analogous to the file descriptor when opening a file:
            <p> 
            <p> 1. Assuming the printer address is properly set up in <b>/etc/hosts</b>, 
              resolve the printer address by calling the <b>gethostbyname</b> 
              library function returning a pointer to a hostent structure. 
            <p> 2. To perform the network I/O, create a socket descriptor by calling 
              the socket library function returning an integer socket descriptor. 
              The arguments to the socket function are the <b>AF_INET</b> constant 
              to designate the Internet protocol and the <b>SOCK_STREAM</b> constant 
              defining a stream socket. 
            <p> 3. Before making a connection to the printer, create a socket 
              structure of type <b>sockaddr_in</b>: 
            <p> 
            <p> A. Initialize the socket with a <b>bzero</b> function call. 
            <p> B. Set the socket family to the <b>AF_INET</b> constant designating 
              the Internet protocol. 
            <p> C. Set the socket address to the hostent address determined in 
              Step 1. 
            <p> D. Set the socket port number and verify proper byte ordering 
              with the <b>htons</b> library function. 
            <p> 
            <p> 4. Establish the TCP/IP connection using the library function 
              connection. The arguments to connection function are the socket 
              descriptor determined in Step 2 and the address of the socket structure 
              determined in Step 3. 
            <p> 5. Return the socket descriptor to the <b>bc_serial</b> function 
              and continue processing.
            <p> <b>How Do I Compile and Link bc_demo?</b>
            <p><b> </b>Under Solaris, the TCP/IP program <b>tcpip.c</b>, requires 
              a different C compiler from the default to compile and link correctly. 
              The Makefile (Listing 7) will compile and link the <b>bc_demo</b> 
              project correctly.
            <p> <b>Conclusion</b>
            <p><b> </b>This article has presented a tool kit for communicating 
              with serial printers. I'd like to conclude by noting the following 
              issues:
            <p> 
            <p> 1. A two-second sleep command exists after both the serial and 
              network open because a small amount of time is required to ensure 
              the device is ready to accept input. Production code should provide 
              a more foolproof method than a sleep. 
            <p> 2. The serial part of the tool kit is designed using the Solaris 
              serial ports. If you're using a port server on a different 
              UNIX variant, I do not guarantee the tool kit will function correctly. 
              If trouble arises using a port server, experiment with the open 
              function parameters. As a last resort, download the data in the 
              structures in <b>cemarks.h</b>, <b>intermec.h</b>, and <b>zebra.h</b> 
              to an ASCII file and concatenate the contents of the file to the 
              serial port device using the UNIX <b>cat</b> command. 
            <p> 3. The Intermec network printer setup requires a step not documented. 
              Point your browser to the Intermec printer address (both the Intermec 
              and the Zebra bar code printers have their own home page). After 
              logging in as administrator, change the following: 
            <p> 
            <p> A. Check the "Reverse Telnet Options Enabled" box. 
            <p> B. Set the Printer 1 Reverse Telnet Port Number to the proper 
              port number (3001 in this case). 
            <p> <b>References</b>
            <p><b> </b>Austin, Lori. <i>Intermec 3400 Bar Code Label Printer User's 
              Manual</i>, Intermec Corporation, 1995.
            <p> <i>ZPL II Programming Guide</i>, Zebra Technologies Corporation, 
              1998
            <p> Stevens, W. Richard. <i>Unix Network Programming</i>, Prentice-Hall, 
              Inc. 1990.
            <p> <b>Acknowledgements</b>
            <p><b> </b>The word "Intermec" is a registered trademark 
              of Intermec Corporation. The word "Zebra" is a registered 
              trademark of Zebra Technologies Corporation.
            <p> <i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. 
              He is a Senior Programmer Analyst for Intel's Factory Integrated 
              Information Systems (FIIS) Group of Aloha, OR. His viewpoints on 
              bar code printing or any other subject do not reflect Intel's 
              position. </i>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
