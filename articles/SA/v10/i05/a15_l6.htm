<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v10, i05: Listing 6 tcpip.c</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a15.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a15_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a15_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a15_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a15_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a15_l4.htm">Listing 4</a></span></td>
		<td><span class="navbarLink"><a href="a15_l5.htm">Listing 5</a></span></td>
		<td><span class="navbarLink">Listing 6</span></td>
		<td><span class="navbarLink"><a href="a15_l7.htm">Listing 7</a></span></td>
		<td><a href="../../../../source/SA/2001/may2001.tar"><b class=codeListing>may2001.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <H1><b>Listing 6 tcpip.c</b></h1>
            <p> 
            <pre>
 * Functions to open a network device and write Intermec or
 * Zebra command objects to the network device.
 * Author: Ed Schaefer
 */
#include    &lt;stdio.h&gt;
#include    &lt;sys/socket.h&gt;
#include    &lt;netinet/in.h&gt;
#include    &lt;netdb.h&gt;
#include    "intermec.h" 
#include    "zebra.h" 
#include    "cemarks.h" 

/*
 * Print TCP/IP label
 * 1 for Intermec and 2 for Zebra
 */
int bc_tcpip(char *network_address, int port_number, int printer_choice)
{
   int lpr_fd;

   if(printer_choice == 1)
      {  /* Intermec TCP/IP */
      printf("Intermec  Network Printer test\n");

      printf("Loading Intermec CE graphics character\n");
      lpr_fd=open_network_device(network_address, port_number);
      sleep(2); 
      write_load_commands(intermec_ce, lpr_fd);

      printf("Loading Intermec TCP Format \n");
      write_load_commands(load_intermec_label, lpr_fd);

      printf("Printing First Intermec Label \n");
      write_load_commands(print_intermec_label1, lpr_fd);

      printf("Printing Second Intermec Label \n");
      write_load_commands(print_intermec_label2, lpr_fd); 
      close(lpr_fd); 
      }

   if(printer_choice == 2)
      {  /* Zebra TCP/IP */
      printf("Zebra Network Printer test\n");

      printf("Loading Zebra CE graphics character\n");
      lpr_fd=open_network_device(network_address, port_number);
      sleep(2);
      write_load_commands(zebra_ce, lpr_fd);

      printf("Loading Zebra TCP/IP Format \n");
      write_load_commands(load_zebra_label, lpr_fd);

      printf("Printing First Zebra Label \n");
      write_load_commands(print_zebra_label1, lpr_fd);

      printf("Printing Second Zebra Label \n");
      write_load_commands(print_zebra_label2, lpr_fd);
      close(lpr_fd);
      }
}

/*
 * This function opens network device 'device_name' on
 * 'port_number' and return the socket descriptor, lpr_fd.  Terminate if error.
 */
int open_network_device(char *device_name, int port_number)
{
   int lpr_fd;
   struct sockaddr_in pin;
   struct hostent *hp;

  /* Resolve the specified host name which is the printer */
  if((hp = gethostbyname(device_name)) == 0)  
    { 
    perror("gethostbyname");
    exit(1); 
    }
 
   /* Complete the socket structure */
   bzero(&amp;pin,sizeof(pin));
   pin.sin_family = AF_INET;
   pin.sin_addr.s_addr = ((struct in_addr*)(hp-&gt;h_addr))-&gt;s_addr;
   pin.sin_port = htons(port_number);
  
   /* Get an Internet Domain Socket */
   if ((lpr_fd=socket(AF_INET,SOCK_STREAM,0)) == -1) 
     {
     perror("socket");
     exit(1); 
     }

   /* Connect to the printer */
   if (connect(lpr_fd,&amp;pin,sizeof(pin)) == -1) 
     {
     perror("connect");
     exit(1); 
     }
   return(lpr_fd);
} /* end tcpip.c */</pre>
          </table></table><br>&nbsp;<br>

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
