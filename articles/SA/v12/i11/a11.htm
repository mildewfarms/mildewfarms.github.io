<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i11: Advanced Configuration of Nagios</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/nov2003.tar"><b class=codeListing>nov2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a11.gif" width="200" height="167" align="right">Advanced 
              Configuration of Nagios</b></h1>
            <p> <i>Syed Ali</i>
            <p> In last month's <i>Sys Admin</i>, I described the open source, 
              SNMP-based monitoring tool Nagios (<b>http://www.nagios.org</b>). 
              (See Part 1 at: <b>http://www.samag.com/documents/s=8892/sam0310c/</b>.) 
              Nagios 1.1 released on June 2 of 2003 can be downloaded from <b>http://www.nagios.org</b>. 
              Nagios remotely monitors services and hosts, and can monitor network 
              services without the need for a software-based monitoring agent 
              on the computer you are monitoring. The primary purpose of Nagios 
              is to check the state of hosts or services on the network. However, 
              you can also use Nagios to obtain performance data on the hosts 
              and services it monitors. You can customize a Nagios plugin to look 
              for performance data. Nagios then lets you do either of the following:
            <p> 
            <p> 
            <ul>
              <li> Route the performance data to an external command 
              <li> Write the performance data to a log file
            </ul>
            <p> Like other elements of the Nagios environment, the performance 
              data feature is not intended for any specific application but is, 
              instead, an architecture designed to support many kinds of custom 
              solutions. The details of obtaining the performance metrics are 
              left to the plugin creator. Similarly, the external command used 
              to process the performance information is at the discretion of the 
              Nagios user. The task of writing or adapting a plugin (which is 
              essentially script, such as a Perl script) is a much bigger topic 
              than I can cover in this article. (See <b>http://sourceforge.net/projects/nagiosplug/</b> 
              for more on writing Nagios plugins.) This article focuses on how 
              to configure Nagios to receive incoming performance data from the 
              plugin and route the data to a file or an external command.
            <p> <b>Getting Performance Data with Nagios</b>
            <p> As illustrated last month, Nagios lets the user specify commands, 
              which Nagios will run to monitor hosts and services. Some plugins 
              do not provide any performance data. For instance, the check_ssh 
              plugin, which can be run as follows:
            <p> 
            <pre>
$ /usr/local/nagios/libexec/check_ssh -H my_ssh_server
</pre>
            returns the following output:
            <p> 
            <pre>
SSH OK - OpenSSH_2.9p2 (protocol 1.99)
</pre>
            This output does not provide any indication of how long the SSH server 
            took to respond.
            <p> Other plugins provide performance data that is not necessarily 
              in a format that Nagios can use with the special performance-data 
              processing feature. For instance, the standard output line for a 
              Nagios plugin that monitors network connectivity using <b>ping</b> 
              is:
            <p> 
            <pre>
PING OK - Packet loss = 0%, RTA = 1.36 ms
</pre>
            This plugin does indeed provide some performance information, but 
            that information is passed to the standard $OUTPUT$ macro, thus bypassing 
            the performance data-processing features described in this article.
            <p> We need to modify the plugin source code to display the performance 
              data in a manner that makes it easy for Nagios to parse. According 
              to Nagios documentation, "If a plugin wishes to pass performance 
              data back to Nagios, it does so by sending the normal text string 
              that it usually would, followed by a pipe character (|), and then 
              a string containing one or more performance data metrics." 
              In other words, the data must be in the form:
            <p> 
            <pre>
Normal_output | performance_output
</pre>
            If the plugin output is in this form, Nagios routes the normal output 
            to the $OUTPUT$ macro and sends the portion of the output after the 
            | symbol to the $PERFDATA$ macro.
            <p> In the check_ping.c file found in the source code of Nagios plugins, 
              printing is done for the output by the following entry:
            <p> 
            <pre>
printf ("PING %s - %sPacket loss = %d%%, RTA = %2.2f ms", \
  state_text (result), warn_text,pl, rta);
</pre>
            The entry has to be modified to print the performance data in a Nagios-friendly 
            manner as follows:
            <p> 
            <pre>
printf ("PING %s - %sPacket loss = %d%%, RTA = %2.2f ms | RTA = \
  %2.2f ms ", state_text (result), warn_text,pl, rta, rta);
</pre>
            After recompiling the check_ping.c entry, running the <b>check_ping</b> 
            command gives an output similar to the following:
            <p> 
            <pre>
PING OK - Packet loss = 0%, RTA = 1.36 ms | RTA = 1.36 ms
</pre>
            The data after the | symbol is then placed by Nagios in the $PERFDATA$ 
            macro. You can use the data in the $PERFDATA$ macro to build a performance 
            profile of the server response time over daily and weekly cycles.
            <p> <b>Compiling Nagios for Performance Data</b>
            <p> As I mentioned in an earlier section, Nagios offers two methods 
              for processing performance data:
            <p> 
            <p> 
            <ul>
              <li> External command method -- An option that lets you specify 
                an external command that Nagios will execute to generate the performance 
                data. This is a very flexible option, however, this option consumes 
                more system resources than the alternative file-based method because 
                it forks a process each time a host or service check is performed. 
              <li> File-based method -- The data is output to a file in a 
                template-specified format. This is much less resource-intensive 
                than the external command method.
            </ul>
            <p> To get Nagios to recognize performance data, you must enable processing 
              of performance data in the main config file <b>nagios.cfg</b>, as 
              follows:
            <p> 
            <pre>
process_performance_data = 1
</pre>
            After you enable performance monitoring in the config file, you must 
            recompile Nagios and specify either the default external command method 
            or the file-based method. To use the default external command method, 
            rerun the configure script with the option:
            <p> 
            <pre>
# /usr/loca/src/nagios/configure --prefix=/usr/local/nagios \
  --with-cgiurl=/nagios/cgi-bin--with-htmurl=/nagios \
  --with-nagios-user=nagios --with-nagios-grp=nagios \
  --with-default-perfdata
</pre>
            To use the file-based method, rerun the configuration script with 
            the option:
            <p> 
            <pre>
# /usr/loca/src/nagios/configure --prefix=/usr/local/nagios \
  --with-cgiurl=/nagios/cgi-bin--with-htmurl=/nagios \
  --with-nagios-user=nagios --with-nagios-grp=nagios \
  --with-file-perfdata
</pre>
            then rerun <b>make</b>.
            <p> <b>The External Command Method</b>
            <p> As I previously described, Nagios uses the $PERFDATA$ macro to 
              provide the performance data collected from a monitoring plugin 
              such as check_ping. Once you have configured your Nagios implementation 
              for performance monitoring, you must specify the command that Nagios 
              will execute using the data it collected from the $PERFDATA$ macro. 
              The Nagios configuration file nagios.cfg lets you specify the name 
              of the command that will run against the $PERFDATA$ as follows:
            <p> 
            <pre>
service_perfdata_command=myservice-processor
</pre>
            <b>myservice-processor</b> is a name I have chosen for the command. 
            I must then associate this command name with a command definition 
            through the Nagios object configuration file commands.cfg. In this 
            case, commands.cfg contains a definition such as:
            <p> 
            <pre>
define command {
command_name myservice-processor
command_line /bin/echo "$HOSTNAME has a ping response time of 
  $PERFDATA" &gt;&gt; /usr/local/nagios/var/ping-response-time}
</pre>
            To process host performance data in addition to service performance 
            data, provide the following configuration definition in the main Nagios 
            config file nagios.cfg:
            <p> 
            <pre>
host_perfdata_command=myhost-processor
</pre>
            You will also need a definition of <b>myhost-processor</b> in the 
            object configuration file commands.cfg, similar to the definition 
            defined for the service:
            <p> 
            <pre>
define command {
command_name myhost-processor
command_line /bin/echo "$HOSTNAME has a response time of 
  $PERFDATA" &gt;&gt; /usr/local/nagios/var/host-response-time}
</pre>
            This example uses the command <b>/bin/echo</b> to write the data in 
            a reader-friendly format. I could have, however, used any other external 
            command to process the data.
            <p> <b>File-based Method</b>
            <p> The file-based method is less flexible than the default external 
              command method because it does not allow you to specify an external 
              command to be used with the $PERFDATA$ macro. All you can do is 
              specify a file into which Nagios will log the $PERFDATA$.
            <p> Remember that $PERFDATA$ is simply the performance output of the 
              plugin command (i.e., the data that a plugin returns after the | 
              symbol). We must tell Nagios where to log this data.
            <p> To use the file-based method, edit the main configuration file 
              Nagios.cfg for host and service-based $PERFDATA$ collection as follows:
            <p> 
            <pre>
xpdfile_host_perfdata_file=&lt;hostfile&gt; 
  xpdfile_service_perfdata_file=&lt;servicefile&gt;
</pre>
            <b>&lt;hostfile&gt;</b> can be /usr/local/nagios/var/myhostdata or 
            any other file you want to log to, and <b>&lt;servicefile&gt;</b> 
            can be /usr/local/nagios/var/myservicedata or any other log file.
            <p> You must tell Nagios in what format you want the logging done 
              by using the following two directives:
            <p> 
            <pre>
xpdfile_host_perfdata_template=&lt;template&gt; 
xpdfile_service_perdata_template=&lt;template&gt;
</pre>
            <b>&lt;template&gt;</b> can be a definition such as:
            <p> 
            <pre>
$HOSTNAME$\t$TIME$\t$OUTPUT$\t$PERFDATA
</pre>
            <b>Conclusion</b>
            <p> By gathering performance data, you can execute a command against 
              the data or simply log the data to a file. In this article, I've 
              illustrated how to enable performance data collection, how to configure 
              Nagios to support separate processing of performance data, and how 
              to either run external commands against that data or simply log 
              that data to a file. Nagios offers a lot of flexibility when it 
              comes to monitoring the performance of services and hosts on the 
              network. 
            <p> <i>Syed Ali has a Master's in Computer Science from Stevens 
              Institute of Technology and is an MCP, MCSE, MCT, CCNA, CCAI, RHCE, 
              and SCSA. He currently works for a research laboratory in Princeton, 
              New Jersey, as a supervisor for systems administration. Syed can 
              be contacted at: <b>alii@paul.rutgers.edu</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
