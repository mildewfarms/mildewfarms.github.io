<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i05: Variables and Scoping</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/may2003.tar"><b class=codeListing>may2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">Variables 
              and Scoping</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> Programs push data around. In Perl, this data lives in variables, 
              and the variables can be associated with various scopes. Let's 
              take a look at Perl's peculiar scoping rules.
            <p> To begin, let's define a term, <i>lexical scope</i>. A lexical 
              scope provides the boundaries of some property of the program associated 
              with the text of the program itself, as opposed to properties that 
              are associated with the runtime state of the program. Lexical properties 
              might include variable declarations, compiler directives, exceptions 
              being caught, and so on.
            <p> In Perl, the largest lexical scope is the source file itself. 
              Lexically scoped items never affect anything larger than a file. 
              Additionally, nearly all blocks also introduce a nested lexical 
              scope that ends where the block ends. Because blocks are nested 
              and not overlapping, the lexical scopes also nest. This will become 
              clearer in the examples that follow.
            <p> Some of the variables in a Perl program are <i>package variables</i> 
              (also called <i>symbol-table variables</i>). A package variable's 
              full name consists of a package prefix followed by the specific 
              identifier for the variable. The prefix is separated from the identifier 
              by a double colon.
            <p> For example, in <b>$Animal::count</b>, <b>Animal</b> is the package 
              prefix, while <b>count</b> is the variable within the package. Both 
              the package and the identifier contain one or more alphanumerics 
              and/or underscores. Additionally, packages can have multiple, double-colon 
              separated parts, as in <b>$Animal::Dog::count</b>. Again, <b>count</b> 
              is the variable, and <b>Animal::Dog</b> is the package prefix. There's 
              no necessary relationship between <b>Animal</b> and <b>Animal::Dog</b>, 
              although people tend to give related names to related packages.
            <p> Although package variables are formally named with colons, you 
              won't see many colons in most <b>uses</b> of package variables. 
              That's because by default variable name without colons are 
              automatically placed into the <i>current package</i>. The initial 
              current package is package <b>main</b>, so the following two code 
              snippets are identical:
            <p> 
            <pre>
print "What is your name? ";
chomp($input = &lt;STDIN&gt;);
$length = length $input;
print "Your name $input is $length characters long.\n";
</pre>
            and
            <p> 
            <pre>
print "What is your name? ";
chomp($main::input = &lt;STDIN&gt;);
$main::length = length $main::input;
print "Your name $main::input is $main::length characters long.\n";
</pre>
            It's a good thing we don't have to have <b>main</b> all 
            over the place.
            <p> So, why do we have packages, if everything already defaults to 
              package <b>main</b>? Well, it's so that we can have multiple 
              portions of code brought together into one program. Suppose the 
              code above were to be added into a program that already had a meaning 
              for <b>$main::input</b> or <b>$main::length</b>. We'd have 
              a collision of names. But we can fix that by using a different package 
              prefix:
            <p> 
            <pre>
print "What is your name? ";
chomp($Query::input = &lt;STDIN&gt;);
$Query::length = length $Query::input;
print "Your name $Query::input is $Query::length characters long.\n";
</pre>
            Now <b>$Query::input</b> has nothing to do with <b>$main::input</b>, 
            so we no longer have a naming collision. Of course, this is a lot 
            of typing, and we can shorten this by changing the current package, 
            using the <b>package</b> directive:
            <p> 
            <pre>
package Query;
print "What is your name? ";
chomp($input = &lt;STDIN&gt;);
$length = length $input;
print "Your name $input is $length characters long.\n";
</pre>
            Wow, that's easier to type, and yet the <b>$input</b> variable 
            there is really <b>$Query::input</b>, and won't conflict with 
            <b>$main::input</b> used elsewhere.
            <p> The package directive is lexically scoped (thought we forgot about 
              that term, eh?). This means that the package directive stays in 
              effect until the end of the current scope, or until another package 
              directive changes the current package again. For example, we could 
              put that piece of code into the middle of the rest of our program 
              as:
            <p> 
            <pre>
# initial package main
...
$input = "Hey"; # $main::input

package Query;  # now in package Query
print "What is your name? ";
chomp($input = &lt;STDIN&gt;);  # $Query::input
$length = length $input;
print "Your name $input is $length characters long.\n";

package main;  # back to package main

print $input;  # $main::input again
print "that length was $Query::length\n"; # reference prior value
</pre>
            However, we have to remember to reset the package back to what it 
            was before. This is error-prone, and perhaps not easy to maintain, 
            especially if we're not sure what the prior package might be. 
            But, since the package directive is lexically scoped, we can introduce 
            a block to limit the directive's influence:
            <p> 
            <pre>
# initial package main
...
$input = "Hey"; # $main::input

{ # start scope
  package Query;  # now in package Query
  print "What is your name? ";
  chomp($input = &lt;STDIN&gt;);  # $Query::input
  $length = length $input;
  print "Your name $input is $length characters long.\n";
} # end scope

# automatically back to package main

print $input; # $main::input again
print "that length was $Query::length\n"; # reference prior value
</pre>
            Ahh, that's a bit simpler.
            <p> As that last example showed, we can access any package variable 
              from any location in our program, much as we can spell out the full 
              path to any accessible file in a UNIX filesystem regardless of our 
              current directory, even though the files at or below the current 
              directory are easier to type. But these global variables can lead 
              to global headaches, since we can't really know at a glance 
              about all the code that can examine or modify the variable.
            <p> Like most modern programming languages, Perl also includes the 
              notion of a lexical variable. Lexical variables do not belong to 
              a package, so they cannot be referenced outside the lexical scope 
              in which they are declared. Their names also cannot contain colons, 
              because they do not have a package prefix.
            <p> Lexical variables are introduced with the <b>my</b> keyword:
            <p> 
            <pre>
print "What is your name? ";
chomp(my $input = &lt;STDIN&gt;);  # lexical $input
my $length = length $input; # lexical $length
print "Your name $input is $length characters long.\n";
</pre>
            Because these variables are introduced outside any block in this example, 
            they are lexically scoped to the file in which they appear. If this 
            code is part of a file being included with <b>eval</b>, <b>do</b>, 
            <b>require</b>, or <b>use</b>, there's no chance that this <b>$input</b> 
            will conflict with any other use of <b>$input</b>. There's also 
            no syntax that would let any other code outside of this code access 
            those variables, so we can be assured that our variables won't 
            be changing mysteriously.
            <p> Besides file-scoped lexical variables, another common appearance 
              is in the block that belongs to a subroutine:
            <p> 
            <pre>
sub get_name_length {
  print "What is your name? ";
  chomp(my $input = &lt;STDIN&gt;); # lexical $input
  my $length = length $input; # lexical $length
  print "Your name $input is $length characters long.\n";
}
</pre>
            When the subroutine returns, the lexical variables are discarded, 
            automatically recycling the memory that had been used. Additionally, 
            any outer declaration of <b>$input</b> or <b>$length</b> is temporarily 
            shadowed within the subroutine, protecting the outer variables from 
            accidental alteration.
            <p> We can also create temporary variables this way:
            <p> 
            <pre>
{ # start temporary scope
  print "What is your name? ";
  chomp(my $input = &lt;STDIN&gt;); # lexical $input
  my $length = length $input; # lexical $length
  print "Your name $input is $length characters long.\n";
} # end temporary scope
</pre>
            The variables declared and used in this block will be recycled at 
            the end of the block, just as if we had placed this code into a subroutine.
            <p> A frequent admonition in the Perl literature is "Always use 
              strict!". What does this do, precisely? Well, among other things, 
              <b>use strict</b> disables the automatic prepending of the package 
              to a variable name. Once <b>use strict</b> is in effect, a name 
              without colons must have been declared, either as a lexical variable, 
              or as a specially noted package variable.
            <p> The primary purpose of <b>use strict</b> is to catch any random 
              erroneous variations of a variable name:
            <p> 
            <pre>
print "What is your name? ";
chomp($input = &lt;STDIN&gt;); # $main::input
my $length = length $input; # $main::length
print "Your name $input is $lenth characters long.\n"; # broken
</pre>
            Oops! That's <b>$main::lenth</b>, not <b>$main::length</b>. But 
            by turning on <b>use strict</b>, we no longer get <b>main::</b> in 
            front of anything we mention, and thus we must declare the variables 
            lexically at first use instead:
            <p> 
            <pre>
use strict;

print "What is your name? ";
chomp(my $input = &lt;STDIN&gt;); # lexical $input
my $length = length $input; # lexical $length
print "Your name $input is $lenth characters long.\n"; # caught
</pre>
            The compiler will abort at that last line, because we can't just 
            turn <b>$lenth</b> into <b>$main::lenth</b> any more.
            <p> To refer to package variables, we can simply use the full prefix-included 
              colon name:
            <p> 
            <pre>
use strict;

print "$Animal::Dog::count dogs were seen!\n";
print "$main::length characters in that name.\n";
</pre>
            If we want to refer to a package variable without the package prefix, 
            we can use the <b>use vars</b> compiler directive:
            <p> 
            <pre>
use strict;

use vars qw($length); # now permits $length to mean $main::length

print "$length characters\n"; # $main::length
</pre>
            Any name in the <b>use vars</b> list can be referenced in the current 
            package as if it were fully specified. Once seen, the directive is 
            in effect for that variable name as long as the current package is 
            the same as the package in which the <b>use vars</b> appeared. So, 
            this is an error:
            <p> 
            <pre>
use strict;
use vars qw($length); # $length is $main::length in main

{ package Query;
  print $length; # COMPILE ERROR... $Query::length not permitted
}

print $length; # would have been ok, back to $main::length
</pre>
            In recent versions of Perl, the <b>our</b> keyword was introduced 
            as a parallel to <b>my</b>. It functions similarly to <b>use vars</b>, 
            but the declaration of the package variable is lexically scoped, not 
            dependent on the current package.
            <p> 
            <pre>
use strict;
our $length; # $length is $main::length in this scope

{ package Query;

  our $input; # $input is $Query::input in this scope

  print $length; # permitted access to $main::length here
  print $input; # permitted access to $Query::input here

} # end of scope, so $input goes out of scope

print $length; # still $main::length
print $input; # COMPILE ERROR, no access to $main::input permitted
</pre>
            As you can see, <b>use vars</b> and <b>our</b> are not precisely the 
            same thing, but in general, they both serve to permit selected package 
            variables to be used without colons.
            <p> I hope this brief overview of package and lexical variables and 
              scoping has been useful. Until next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>. He's also a frequent contributor to the 
              Perl newsgroups, and has moderated comp.lang.perl.announce since 
              its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
            <p>&nbsp; 
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
