<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i01: Usogres -- The PostgreSQL Replication Tool</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a12_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2003/jan2003.tar"><b class=codeListing>jan2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a12.gif" width="200" height="167" align="right">Usogres 
              -- The PostgreSQL Replication Tool</b></h1>
            <p> <i>Tim Epkes</i>
            <p> Data redundancy is important in any network requiring zero downtime. 
              Load balancing software works great, however, data replication sometimes 
              becomes a challenge. How do we get the data currently being entered, 
              replicated to a standby database in case of a primary database failure? 
              This can be a very big challenge. You could shut down the database 
              every night and rsync the data, which would work, but this method 
              doesn't provide a very good solution for keeping the data up 
              to date. A failure during mid-day transactions could result in loss 
              of the data entered for that morning.
            <p> The Usogres tool solves this problem by replicating the data in 
              real time. As updates are entered to the master database, the slave 
              gets updated. Usogres runs on port 5432 (standard Postgres port). 
              The two Postgres servers run on an alternate port (i.e., port 5434). 
              Usogres actually listens for the updates and then distributes the 
              updates to both databases at the same time. If you add a content 
              services switch that will load balance the two databases and remove 
              a failed system from the services ring, you get very high availability. 
              Usogres was written by Sebastian Paviot and is currently in release 
              0.8.1.
            <p> <b>Configuration</b>
            <p> To begin, download Usogres from:
            <p> 
            <pre>
http://www.usogres.good-day.net
</pre>
            Configuration of this tool assumes knowledge of PostgreSQL.
            <p> The following steps describe how to install, configure, and run 
              Usogres. Prerequisites for this process are two fully installed 
              and operational PostgreSQL systems. Note that you must ensure the 
              slave system does not have important data on it, as it will be wiped 
              by the master. See Figure 1.
            <p> 
            <p> 1. Log into the systems as the Postgres user and make a temporary 
              directory in Postgres' home directory called temp:
            <p> 
            <pre>
# mkdir temp
# cd temp
</pre>
            2. Stop PostgreSQL on each server:
            <p> 
            <pre>
# /usr/local/pgsql/bin/pg_ctl stop
</pre>
            3. Untar Usogres in your sources directory (I use /opt):
            <p> 
            <pre>
# tar -xzvf usogres-0.8.1.tar.gz
</pre>
            4. Change directory to usogres and configure:
            <p> 
            <pre>
# cd usogres-0.8.1
# ./configure
</pre>
            5. Compile and install Usogres:
            <p> 
            <pre>
# make
# su -c make install
</pre>
            Note: By default Usogres is installed to /usr/local/bin/usogres and 
            the resource file is installed to /usr/local/etc/usogresrc.
            <p> 6. Vi /usr/local/etc/usogresrc and make it look as follows:
            <p> SYSTEM A -- Master
            <p> 
            <pre>
#
# usogres run command file for systemA
#
# host address that usogres performed
host = "10.1.1.20"
# port address that usogres performed
port = 5432
# host address that postgres original server performed
hostorg = "10.1.1.20"
# port address that postgres original server performed
portorg = 5434
# host address that postgres backup server performed
hostcopy = "10.1.1.21"
# port address that postgres backup server performed
portcopy = 5434
# directory for log files
logdir = ~/.usogres-log
# max number of usogres process
max_process = 32
</pre>
            SYSTEM B -- Slave
            <p> 
            <pre>
#
# usogres run command file for systemB
#
# host address that usogres performed
host = "10.1.1.21"
# port address that usogres performed
port = 5432
# host address that postgres original server performed
hostorg = "10.1.1.20"
# port address that postgres original server performed
portorg = 5434
# host address that postgres backup server performed
hostcopy = "10.1.1.21"
# port address that postgres backup server performed
portcopy = 5434
# directory for log files
logdir = ~/.usogres-log
# max number of usogres process
max_process = 32
</pre>
            7. As the user Postgres, add the following variables to the .profile 
            file:
            <p> For system A:
            <p> 
            <pre>
PGHOST=systemA
PGPORT=5432
export PGHOST PGPORT
</pre>
            For system B:
            <p> 
            <pre>
PGHOST=systemB
PGPORT=5432
export PGHOST PGPORT
</pre>
            8. Restart PostgreSQL using port 5434 (on both systems):
            <p> 
            <pre>
# su pgsql -c "/usr/local/pgsql/bin/postmaster -S -i -p
   5434 -D /usr/local/pgsql/data"
</pre>
            9. Start Usogres to begin replication (on both systems):
            <p> 
            <pre>
# /usr/local/bin/usogres
</pre>
            10. Test your connection to Usogres:
            <p> 
            <pre>
# psql template1
</pre>
            It should come up to the psql prompt for template1. If it does not, 
            recheck the steps to ensure you followed them correctly.
            <p> Optional: Usogres looks for the resource file in /usr/local/etc 
              first; if it doesn't find it there, it will look in the Postgres 
              home directory as a hidden file .usogres. I move my usogresrc (located 
              in /usr/local/etc) to $PGHOME/.usogresrc.
            <p> <b>Conclusion</b>
            <p> I am currently running PostgreSQL/Usogres to support internal 
              OSS Web applications. I will be moving to the Cisco CSS 11050's 
              to provide load-balancing services, but first I have to write the 
              PostgreSQL keep-alive script for the CSS. To accomplish the load 
              balancing, you can create a service ring with a content switch. 
              Then create a virtual IP for everybody to be your virtual server. 
              If one of your database servers or Postgres processes goes down, 
              it will be removed from the service ring and the online database 
              will only be written to. The combination of Postgres and Usogres 
              provides a powerful tool to ensure maximum availability of the database 
              to your users.
            <p> I thank Sebastian Paviot for writing this application and hope 
              he continues further development.
            <p> <i>Tim Epkes is a consultant and provides professional services 
              for small to medium businesses and service providers. He is a CCIE, 
              CCDA, CCNA, Solaris Admin/Network certified and is currently working 
              toward OCP certification. His Web site can be found at: <b>http://www.epkes.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
