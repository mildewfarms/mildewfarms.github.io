<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i01: The Duct Tape of the Internet</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/jan2003.tar"><b class=codeListing>jan2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="../../resource/perl.gif" width="150" height="150" align="right">The 
              Duct Tape of the Internet</b></h1>
            <p> <i>Randal L. Schwartz</i>
            <p> When you're a Perl programmer, you never fret about those 
              little ugly tasks that creep up. Perl can deal with file wrangling, 
              text manipulation, and process management in a way unequaled by 
              any other single language, whether open source or proprietary.
            <p> For example, in this column, I'll take a simple file and 
              text-wrangling task and show how I solved it with Perl. I was a 
              systems administrator for many years, and I'd say that this 
              task is representative of those niggling little things that I faced, 
              typically daily, in the course of my job.
            <p> Nearly all Perl modules contain embedded documentation, called 
              "POD" (described by <b>perldoc perlpod</b>). When I install 
              a module from the Comprehensive Perl Archive Network (the "CPAN": 
              see <b>http://www.cpan.org</b> for further information), the module 
              is usually installed into a place where my Perl binary can find 
              it (along Perl's <b>@INC</b> path). By default, the installation 
              process also creates an <b>nroff -man</b> page, so that the <i>man</i> 
              command can display a nicely formatted version (presuming you extend 
              your <b>MANPATH</b> or equivalent). Thus, for most modules, you 
              can say either <b>perldoc Some::Module</b> (to convert the embedded 
              POD into text) or <b>man Some::Module</b> (to display the preprocessed 
              man page).
            <p> However, the server that runs <b>http://www.stonehenge.com</b> 
              runs OpenBSD (mostly so I can sleep at night knowing that security 
              is a key point of the OpenBSD developers). The default Perl installation 
              of OpenBSD is configured in such a way that the man pages are <i>not</i> 
              generated for non-core Perl modules. I'm expected to type <b>perldoc 
              Some::Module</b> to get the documentation for the module, instead 
              of the more familiar <b>man Some::Module</b>; however, I <i>can</i> 
              use <i>man</i> for the core modules. Because I found this rather 
              confusing, I faced two alternatives:
            <p> 
            <p> 1. I could hack the core installation of Perl so that it would 
              install man pages, thereby risking breakage if the Perl installation 
              were upgraded during a minor or major release.
            <p> 2. I could write a simple tool to take all the embedded POD and 
              generate man pages into my private area.
            <p> 
            <p> I decided to write a simple tool, mostly because I'm opposed 
              to touching anything in the core distribution, since I have no idea 
              if someone at OpenBSD headquarters is likely to change things out 
              from under me.
            <p> And a simple tool it is, although it's about 80 lines of 
              Perl code. So, looking at a few lines at a time, here's what 
              I wrote, in about the order that I created the lines. To begin, 
              I started with my normal header:
            <p> 
            <pre>
#!/usr/bin/perl -w
use strict;
$|++;
</pre>
            With these three lines, I've turned on warnings, enabled the 
            common compiler restrictions (undeclared variables, soft references, 
            and barewords are all disabled), and turned off the buffering for 
            <b>STDOUT</b>.
            <p> Next, I put in a few configuration lines that I might change, 
              based on where I'm running the program:
            <p> 
            <pre>
## BEGIN configuration

my $MAN3DIR = "/home/merlyn/man/man3";
my $MAN3EXT = "3p";

## END configuration
</pre>
            Here I've defined a location below my home directory where I've 
            placed other personal manpages, and an extension for the specific 
            Perl module pages. Traditionally, Perl modules have the <b>3p</b> 
            extension and are placed in section 3 of the UNIX manual. I've 
            added <b>/home/merlyn/man</b> to my <b>MANPATH</b>, so the <i>man</i> 
            command finds this directory just fine:
            <p> 
            <pre>
use Pod::Man;
use File::Find;
use Config;
</pre>
            Following that, I bring in the three modules (all in the Perl core 
            distribution) that I'll need to wander through the installed 
            directories and find the POD files. The <b>Pod::Man</b> module can 
            convert POD into manpages. The <b>File::Find</b> module recurses through 
            subdirectories. The <b>Config</b> module provides a hash interface 
            to the configuration parameters for the installed Perl. In fact, the 
            next two lines use that hash to locate two specific directories:
            <p> 
            <pre>
my $SITELIB = $Config{sitelib};
my $SITEARCH = $Config{sitearch};
</pre>
            The value for <b>$SITELIB</b> gives the path in which local Perl modules 
            are installed. <b>$SITEARCH</b> provides a similar path for architecture-specific 
            modules -- those which contain binary files resulting from compiling 
            C (or other languages). Generally, the <b>$SITEARCH</b> directory 
            will be within the <b>$SITELIB</b> directory, and this program presumes 
            that.
            <p> Next, I'll create a <b>Pod::Man</b> object configured for 
              the task:
            <p> 
            <pre>
my $podmanparser = Pod::Man-&gt;new(section =&gt; $MAN3EXT);
</pre>
            The <b>section</b> value gives the name appearing in the page header 
            banner, mostly cosmetic, but nice to get right.
            <p> Now comes the task of finding the existing POD documentation. 
              So, after a few tries, I came up with the following loop with <b>File::Find</b>:
            <p> 
            <pre>
my %pods;
find sub {
  return unless /\.p(m|od)$/;
  my $package = $File::Find::name;
  for ($package) {
  s{^\Q$SITEARCH/}{}
    or s{^\Q$SITELIB/}{}
      or die "Cannot remove $SITEARCH or $SITELIB from ", $File::Find::name\n";
  s/\.p(m|od)$//
    or die "What happened to the ext in $package?\n";
  s{/}{::}g;
  }
  push @{$pods{$package}}, $File::Find::name;
}, $SITELIB;
</pre>
            There's a lot going on here, and it's best to work from 
            the outside in. The <b>find</b> subroutine has been imported from 
            <b>File::Find</b> and is presented with a subroutine reference (here, 
            an anonymous subroutine) and a starting path, <b>$SITELIB</b>. The 
            <b>find</b> routine starts at the top directory, recursing down, calling 
            the subroutine for each found entry (even ones in which we're 
            not interested). The line:
            <p> 
            <pre>
return unless /\.p(m|od)$/;
</pre>
            rejects the filenames that are neither Perl modules nor Perl POD files 
            by looking at <b>$_</b>, which contains the basename (no directory 
            part) of the file or directory being examined. The next few lines 
            extract the package name for the filename into <b>$package</b>. It 
            takes the full path from <b>$File::Find::name</b>, then removes either 
            the <b>$SITEARCH</b> or <b>$SITELIB</b> prefix from the path. If neither 
            of these succeeds, then something has gone terribly wrong, so it will 
            abort.
            <p> Next, these lines:
            <p> 
            <pre>
s/\.p(m|od)$//
  or die "What happened to the ext in $package?\n";
s{/}{::}g;
</pre>
            turn the remainder of the name into a module name, by replacing the 
            slashes with double-colon package delimiters and stripping off the 
            extension. Finally, the loop adds this file name to an arrayref contained 
            within the <b>%pods</b> hash, indexed by the package name. Why a list? 
            Because many modules have a separate POD file, so we'll see both 
            <b>Some/Module.pm</b> and <b>Some/Module.pod</b>. We'll later 
            sort out which of these to use for the manpage, but we'll record 
            them all for now.
            <p> When this loop has completed, we have a hash <b>%pods</b>, keyed 
              by package name, with each entry comprising a list of one or more 
              files that may contain the documentation for that module.
            <p> When I showed this program to one of my friends, my friend commented 
              (only after I toiled over this part), "Why didn't you 
              just use <b>Pod::Find</b>?". Ah, yes. If I'd only known, 
              I could have reduced this part of the program to a few lines of 
              code. I'll have to file that away for use in a future program. 
              The lesson here is "always check the CPAN first, because any 
              interesting task is likely already written".
            <p> The next step is to wander through the hash and do whatever it 
              takes to update the manpages if needed. I'll start with a loop 
              like this:
            <p> 
            <pre>
POD: for my $pod (sort keys %pods) {
  my @files = @{$pods{$pod}};
  ... more code here ...
}
</pre>
            I had to name the loop because we'll see a point later where 
            I want to execute a <b>next</b> against this loop even though I'm 
            in a nested loop. So, <b>$pod</b> contains a package name, and <b>@files</b> 
            contains one or more source files for that package. Next, we need 
            to figure out which one of many source files is needed if there's 
            more than one:
            <p> 
            <pre>
if (@files &gt; 1) {    # more than one?  must sort
@files = sort {
  ## primary: prefer arch-specific over non-arch-specific
  to_boolean($b =~ m{^\Q$SITEARCH}) &lt;=&gt; 
  to_boolean($a =~ m{^\Q$SITEARCH})
    ## secondary: prefer .pod to .pm
    or to_boolean($b =~ /\.pod$/) &lt;=&gt; to_boolean($a =~ /\.pod$/);
} @files;
}
my $file = shift @files;    # first one is always best now
</pre>
            Again, a lot of stuff going on here. If there's more than one 
            file, we'll sort it, preferring architecture-specific files over 
            generic files, and <b>.pod</b> files over <b>.pm</b> files. The first 
            entry in the list after sorting (or the only entry in the list if 
            there was only one to start with) is now the most likely candidate 
            for our manpage.
            <p> The <b>to_boolean</b> routine forces false to have 0 and true 
              to have 1, so we can sort nicely:
            <p> 
            <pre>
sub to_boolean {
  $_[0] ? 1 : 0;
}
</pre>
            Next, we'll figure out the name of the manfile, and determine 
            whether we have any work to do:
            <p> 
            <pre>
my $manfile = "$MAN3DIR/$pod.$MAN3EXT";
next if
-e $manfile and
  -M $manfile &lt; -M $file;    # skip if exists and newer
</pre>
            If the manpage file exists, and is newer than our source file, we've 
            got nothing to do, so we continue to the next entry.
            <p> At this point, we have a source file (either POD or Perl file), 
              which has not yet been updated into a manpage. However, the file 
              may still contain no POD directives. We need to look for some POD 
              in the file. The easiest way is to look for <b>=head</b> at the 
              beginning of a line. This isn't entirely accurate, but it's 
              the same rule that the <b>perldoc</b> command uses, so I figure 
              it's close enough. And that code came out like this (after 
              a few tries):
            <p> 
            <pre>
open IN, $file
or warn("Cannot open $file, skipping\n"), next POD;
while (&lt;IN&gt;) {
if (/^=head/) {    # POD sign!
  print "pod2man $file $manfile\n";
  not -e $manfile or unlink $manfile
    or warn("Cannot remove $manfile: $!\n");
  open OUT, "&gt;$manfile"
    or warn("Cannot create $manfile: $!\n"), next POD;
  seek IN, 0, 0;
  $podmanparser-&gt;parse_from_filehandle(\*IN, \*OUT);
  close OUT;
  next POD;
}
}
</pre>
            The meat is in the middle: once we've determined we have a decent 
            POD file, we seek the file back to the beginning, and then call <b>parse_from_filehandle</b> 
            to generate the manpage.
            <p> So, any time I suspect that there's been a new module added 
              to my local install, I can run this program, and my local manpage 
              collection is updated, with minimal effort.
            <p> A simple task, simply executed by Perl, but handling an important 
              issue of letting me get at Perl's documentation with either 
              <i>perldoc</i> or <i>man</i>, working around a vendor limitation. 
              Most of those "gotta get it done now with no time to do it" 
              systems administration tasks seem to be about this large, and as 
              you can see, Perl fits the task nicely. So, until next time, enjoy!
            <p> <i>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, 
              security, technical writing, and training. He has coauthored the 
              "must-have" standards: </i>Programming Perl<i>, </i>Learning 
              Perl<i>, </i>Learning Perl for Win32 Systems<i>, and </i>Effective 
              Perl Programming<i>. He's also a frequent contributor to the 
              Perl newsgroups, and has moderated comp.lang.perl.announce since 
              its inception. Since 1985, Randal has owned and operated Stonehenge 
              Consulting Services, Inc.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
