<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i14: Introduction to Performance Data Values</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a1.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a1_f5.htm">Figure 5</a></span></td>
		<td><span class="navbarLink"><a href="a1_f6.htm">Figure 6</a></span></td>
		<td><span class="navbarLink"><a href="a1_f7.htm">Figure 7</a></span></td>
		<td><span class="navbarLink"><a href="a1_f8.htm">Figure 8</a></span></td>
		<td><span class="navbarLink"><a href="a1_f9.htm">Figure 9</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink">Sidebar</span></td>
		<td><a href="../../../../source/SA/2003/dec2003.tar"><b class=codeListing>dec2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Introduction to Performance Data Values</b></h1>
            <p> Wk -- This is the assigned numeric workload number ID when collecting 
              data.
            <p> Timestamps -- Timestamps are in Unix Epoch time format, which 
              is the number of seconds after 00:00:00 UTC on January 1 1970.
            <p> Command -- The workload search filter based on the command name.
            <p> Args -- The workload search filter based on processes arguments.
            <p> User -- The workload search filter based on the processes running 
              user name.
            <p> Cnt -- The number of concurrent instances of the running workload 
              process.
            <p> usr% -- The total percentage of time the workload spent running 
              on the CPU executing in the developer code.*+
            <p> sys% -- The total percentage of time the workload spent running 
              on the CPU executing in the kernel servicing the system calls for 
              your application.*+
            <p> cpwt% -- The total percentage of time the workload was ready to 
              run, but spent in the RUNQUE waiting to get back on the CPU to begin 
              executing again.
            <p> chld% -- The total percentage of CPU time of the child processes 
              that have exited. You will see high chld% percentages if your application 
              is forking off multiple shell scripts. This happens typically with 
              monitoring applications. (See Figure 9 for a great example, represented 
              as reaped children).
            <p> sizeM -- The virtual address space for the application. Most long-lived 
              processes grow their address space quickly when they first start 
              up then stabilize. If a process's virtual memory size continues 
              to increase, then it is quite likely that it has some kind of memory 
              leak. This rule is useful for long-term analysis; it does not apply 
              recently created processes.
            <p> pf -- The number of page faults that had been triggered. Page 
              faults occur when the process returns to the CPU and finds that 
              a page in memory no longer exists and has to be reclaimed back to 
              the memory freelist. This can indicate a memory-shortage if seen 
              in high numbers.^
            <p> pgwt% -- The total percentage of time waiting for page fault to 
              be completed. The time spent waiting for page faults for non-executable 
              data pages indicates I/O activity. The pgwt% can be used to indicate 
              a memory shortage
            <p> ulkwt% -- The total percentage of CPU time the user-lock from 
              idle threads stopped on a semaphore. This is relevant on systems 
              with databases.
            <p> Process with Blocked Threads Rule -- Multithreaded processes can 
              consume more than 100% CPU time, and can also report more than 100% 
              of wait time. Every thread that is blocked on a semaphore will report 
              via the microstate "user lock wait time". This can be confusing 
              as you could see a process accumulating hundreds or thousands of 
              wait% time in a report. The fact is that there are a bunch of idle 
              threads; no CPU resources are being consumed. The Java runtime environment 
              is multithreaded, and it is quite common for this to occur with 
              Java programs.
            <p> ioK -- The total number of characters in Kb read and written in 
              read/write system calls.
            <p> sysc -- The total number of system calls executed for the workload.
            <p> vctx -- Voluntary context switches happen when the application 
              leaves the CPU on its own. An example would be waiting for the system 
              to service a disk I/O. If you see this consistently high, then it 
              may indicate that the application is spending more time waiting 
              for its own interrupts to be completed than processing on the CPU. 
              Voluntary context switches occur when the process blocks in a system 
              call to wait for something else to complete.
            <p> ictx -- Involuntary context switches happen when a process is 
              interrupted or kicked off the CPU by a high priority process or 
              a system interrupt. High involuntary context switches can indicate 
              that the system has lots more processes with higher priority keeping 
              your process from getting CPU time. An involuntary context switch 
              occurs when another higher priority process has taken over the CPU, 
              and often occurs when the process has used up an entire time slice 
              and had its priority reduced as a consequence. So, voluntary context 
              switches should be expected, but involuntary context switches indicate 
              that there is some contention for the CPU and a bottleneck exists.
            <p> msps -- The milliseconds per context switch shows how long the 
              process ran on average before it switched off the CPU. 1 seconds 
              = 1000 milliseconds and 1 minute = 60000 milliseconds.<p>
			  <hr>
             *The microstate measures of user and system CPU time don't miss 
              anything, so if they are zero the process has definitely not run 
              in the interval.
            <p> +You may see the CPU percentage reach over a 100% on a multiprocessor 
              machine; the following can be read to correctly interpret (100%=1 
              CPU).
            <p> ^Swapping happens to idle processes, so when memory is short you 
              would expect to see one process reporting a memory shortage and 
              different processes reporting that they have been swapped out to 
              make space.
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
