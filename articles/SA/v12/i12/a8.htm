<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i12: Cross-Platform Native Package Creation with EPM</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/dec2003.tar"><b class=codeListing>dec2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a8.gif" width="200" height="167" align="right">Cross-Platform 
              Native Package Creation with EPM</b></h1>
            <p> <i>Jeff Layton</i>
            <p> I'm a big fan of open source software and also of writing my own 
              scripts and programs to automate things. Currently, I manage three 
              major Unix-ish operating systems at work: Solaris, HP-UX, and Debian 
              GNU/Linux. Tracking all of this added software can be a relatively 
              large burden, especially if it's just copied or unzipped into place. 
              Because of this, I've recently come to favor using the "native" 
              package format for an operating system. If you simply copy or untar 
              files on a machine, or use a non-standard packaging scheme, it's 
              quite difficult to know when you are overwriting a file that is 
              being tracked in the native package catalog, and to uninstall the 
              files later.
            <p> Unfortunately, the process to generate a package for each OS often 
              varies greatly between platforms. Generating HP-UX depots is very 
              different from creating a Solaris package. Even on Linux, there 
              are significant differences between the two major package formats 
              (RPMs and debs).
            <p> <b>The Easy Software Productions Package Manager (EPM)</b>
            <p> Enter EPM, the cross-platform packaging tool from Easy Software 
              Productions (better known for their fabulous CUPS software). EPM 
              can generate binary packages for many Unix and Linux-based operating 
              systems, including AIX, BSD, Tru64, Debian, HP-UX, IRIX, OS-X, Red 
              Hat, and Solaris. It can also build packages in its own format that 
              includes a GUI setup program. In this article, I will focus on creating 
              "native" packages -- those that use the packaging scheme bundled 
              with the OS.
            <p> EPM relies on programs that are bundled with an operating system 
              to package software. Building an RPM package means that you need 
              an "rpm" binary, and building a package for Solaris requires the 
              Solaris "pkgmk" tool. Building packages in non-native formats is 
              possible, but only if you have a version of the packaging tool available 
              on the system on which you're building the package. For instance, 
              it's possible to build an RPM package on a Solaris machine, but 
              an installed version of RPM must exist on your Solaris machine.
            <p> The EPM distribution is available from:
            <p> 
            <pre>
http://www.easysw.com/epm
</pre>
            EPM is licensed for distribution under the GNU Public License. To 
            begin, download the tarball and unpack it into a directory. It requires 
            an ANSI C compiler, a make program, a Bourne-style shell, and gzip. 
            If you want to build in support for the GUI setup program, you'll 
            also need the FLTK library (<b>http://www.fltk.org</b>).
            <p> <b>Building and Installing EPM</b>
            <p> EPM is an autoconf-managed project, so look over the INSTALL and 
              README files, and then issue the command:
            <p> 
            <pre>
 % ./configure
</pre>
            Or, do the following if you want to install it in a different location 
            from /usr/local:
            <p> 
            <pre>
% ./configure --prefix=&lt;destination&gt;
</pre>
            Now, build the software with:
            <p> 
            <pre>
% make
</pre>
            Once the software is built, however, do not do the usual "make install". 
            Instead, you can make EPM a package in the native format of the machine 
            with the following command:
            <p> 
            <pre>
% ./epm -f native epm
</pre>
            On some architectures (notably, HP-UX), building packages requires 
            root access, so you may need to be root to execute this command. The 
            "native" keyword here tells EPM that we want to build a package in 
            the native format for the machine on which we're working. It's possible 
            to specify different package formats (e.g., "deb" or "rpm" instead 
            of native), as long as the proper tools for packaging the software 
            exist on the system. See the EPM documentation for a list of keywords 
            for different package types.
            <p> After the command completes, the generated package should be inside 
              a directory named after the OS and architecture of the machine (e.g., 
              solaris-2.8-sparc or linux-2.4-intel). Install this package using 
              the native package installation tools for your platform (e.g., dpkg 
              on Debian, or pkgadd on Solaris).
            <p> <b>Overview of the Packaging Process</b>
            <p> The first thing to do when building a package is to obtain the 
              sources and produce binaries. EPM doesn't compile the software for 
              you; it only packages the files for distribution.
            <p> Once you generate all the files you want packaged for distribution, 
              you'll need to write a configuration file that describes your package. 
              These files are called "listfiles" and describe meta-information 
              on the package itself, which files get installed, what their permissions 
              and ownership are, and whether there are scripts that should be 
              executed when the package is installed or removed.
            <p> <b>Building a Package</b>
            <p> For this example, we will package a copy of OpenSSH (available 
              at <b>http://openssh.com</b>), built for installation in /usr/local, 
              with configuration files in /etc/ssh.
            <p> Download the sources for the latest portable distribution and 
              unpack them into a directory. Presuming you have all the necessary 
              dependencies, run:
            <p> 
            <pre>
./configure --prefix=/usr/local --sysconfdir=/etc/ssh
make (or gmake)
</pre>
            Again, we skip the "make install" stage, because we'll be putting 
            the files into a package for distribution.
            <p> <b>Creating ListFiles</b>
            <p> EPM uses package description files called "listfiles". These files 
              are named with the name of the package and end with the extension 
              ".list". For example, "openssh.list" would be the listfile describing 
              the "openssh" package. Listfiles are documented in <b>epm.list</b>(5).
            <p> <b>Package Identification and Information</b>
            <p> Every listfile must contain a set of required information. Here's 
              an example of the required info for "openssh.list":
            <p> 
            <pre>
%product OpenSSH
%copyright The OpenSSH Team, All Rights Reserved
%vendor http://www.openssh.com/
%license ./LICENSE
%readme ./README
%description Secure Shell
%version 3.6.1p2 3612
</pre>
            The %product, %copyright, %vendor, and %description are simple text 
            fields that will populate similar fields in the generated package. 
            %license and %readme are names of files that contain their respective 
            information. The %version line has two fields. The first is a human-readable 
            text version. The second is an integer version number. If the integer 
            version number is omitted, EPM will try to generate one from the human-readable 
            field.
            <p> <b>Files</b>
            <p> Next, we can start adding files and directories to be packaged. 
              The basic format for filesystem entities is:
            <p> 
            <pre>
type mode owner group destination source options
</pre>
            We'll build this package with the build directory of OpenSSH as our 
            current working directory. So, to add entries for the SSH program 
            and its manpage, we'll add these lines to our listfile:
            <p> 
            <pre>
f 755 root sys /usr/local/bin/ssh ./ssh
f 644 root sys /usr/local/man/man1/ssh.1 ssh.1.out nostrip()
</pre>
            By default, EPM runs the <b>strip</b>(1) command on all files that 
            it packages. The <b>strip</b> command removes symbols from object 
            files, thereby reducing the size of binary programs at the expense 
            of sometimes useful debugging information. To prevent this behavior, 
            add the <b>nostrip()</b> option. Since manpages are not binaries, 
            stripping has no effect; but on some platforms, it generates a warning.
            <p> <b>Directories</b>
            <p> You can also add directories to the package. Most packaging systems 
              will create directories for you if you install a file into a directory 
              that doesn't exist. However, if you want to create empty directories, 
              have control over permissions and ownership, or want the directories 
              removed on package removal, then you must specify directory entries. 
              Here we'll create the directory that will hold the OpenSSH configuration 
              files:
            <p> 
            <pre>
d 755 root sys /etc/ssh -
</pre>
            The "source" attribute for directory entries is always a hyphen, since 
            they aren't actually copied from anything.
            <p> <b>Symbolic Links</b>
            <p> Symbolic links are prefixed with "l" in the listfile. Here we 
              add the slogin link, which points to the SSH binary:
            <p> 
            <pre>
l 777 root root /usr/local/bin/slogin ssh
</pre>
            The source field for symlinks is interpreted as is, so you can create 
            relative or absolute symlinks.
            <p> <b>Configuration Files</b>
            <p> Some packaging systems (e.g., Debian and Red Hat) handle configuration 
              files differently from regular files. Others (such as HP-UX and 
              Solaris) make no such distinction. If your packaging system does 
              distinguish between configuration and regular files, then you can 
              declare configuration files like this:
            <p> 
            <pre>
c 644 root root /etc/ssh/ssh_config ssh_config
</pre>
            For packaging systems that make no distinction between the two, configuration 
            files are treated as normal files.
            <p> With the above line in your listfile, what happens if this file 
              already exists at install time? It depends on the packaging system 
              used. With Debian, for example, you are presented with a dialog 
              asking whether you want to overwrite the file. On Solaris and HP-UX, 
              this file is treated like any other and is overwritten.
            <p> If in doubt, create a test package for your platform and see how 
              it handles overwriting an existing file before relying on this feature.
            <p> <b>Variables</b>
            <p> Arbitrary variables are defined in listfiles by prefixing them 
              with a dollar sign. Since we'll be installing a lot of our files 
              under /usr/local, we can set a variable to that location and reference 
              it throughout the listfile:
            <p> 
            <pre>
$prefix=/usr/local
</pre>
            We can then reference this as either <b>$prefix</b> or <b>${prefix}</b>. 
            If you do not use curly braces to reference them, then variables names 
            end at the first slash, hyphen, or whitespace.
            <p> If we use the <b>$prefix</b> variable above to describe the installation 
              prefix, our file and symlink entries in the listfile might look 
              like this:
            <p> 
            <pre>
f 755 root sys ${prefix}/bin/ssh ./ssh
f 644 root sys ${prefix}/man/man1/ssh.1 ssh.1.out nostrip()
l 777 root root ${prefix}/bin/slogin ssh
</pre>
            By using variables to describe installation locations, it becomes 
            easy to change the location of package files. Now, if we want to change 
            the package so that it installs under /usr instead of /usr/local, 
            all we need to do is change the <b>$prefix</b> variable.
            <p> Variables also make it easy to build listfiles programatically, 
              and when combined with conditionals (described later in this article) 
              make it possible to describe very complex packaging scenarios.
            <p> <b>A Simple Example</b>
            <p> Listing 1 is an example listfile, describing a basic SSH client 
              package. (Listings for this article are available from the <i>Sys 
              Admin</i> Web site at: <b>http://www.sysadminmag.com</b>.) After 
              building SSH and editing the ssh_config file to your liking, copy 
              this file into the OpenSSH source directory and name it ssh-client.list. 
              Then run:
            <p> 
            <pre>
epm -f native ssh-client
</pre>
            This should build the package and place it into a directory named 
            with a combination of your OS and architecture (e.g., "linux-2.4-intel" 
            or "solaris-2.8-sparc"). You can then install this package using the 
            proper package installation tools.
            <p> <b>Scripts</b>
            <p> Most packaging systems provide hooks to allow you to run arbitrary 
              code during the installation or removal process. EPM supports this 
              via the following header tags:
            <p> 
            <pre>
%preremove
%postremove
%preinstall
%postinstall
</pre>
            EPM can either be told to run a particular command, or scripts can 
            be embedded in the package. For example, this line in a listfile will 
            have EPM generate an SSH host key after installation:
            <p> 
            <pre>
%postinstall /usr/local/bin/ssh-keygen -q -b 1024 -t dsa -N ''
</pre>
            Only one script tag of each type is allowed, but you can embed scripts 
            that are in other files with a less-than sign:
            <p> 
            <pre>
%postinstall &lt;${srcdir}/generate_keys
</pre>
            Alternatively, you can inline scripts using herefile-like syntax:
            <p> 
            <pre>
%postinstall &lt;&lt;EOT
printf "Generating keys: "
/usr/local/bin/ssh-keygen -q -b 1024 -t dsa -N '' -f etc/ssh/ssh_host_dsa_key
printf "done"
EOT
</pre>
            <b>Package Dependencies</b>
            <p> One great thing about using packaging systems is that it facilitates 
              tracking dependencies and incompatibilities. EPM allows you to declare 
              a package requirement using the %requires tag. For example, if we 
              dynamically link OpenSSH, we should require the OpenSSL package 
              to be installed to ensure that it will work. We'll also declare 
              that we need version 0.9.7:
            <p> 
            <pre>
%requires openssl 0.9.7
</pre>
            We may obtain packages from other places that depend on the same software 
            that is in our package, but under a different name. The %provides 
            tag allows us to "alias" our package:
            <p> 
            <pre>
%provides ssh
</pre>
            We can also declare an incompatibility. Here we'll declare that this 
            is incompatible with the kerberized version of SSH:
            <p> 
            <pre>
%incompat sshkrb5
</pre>
            This states that this package can replace a packaged commercial version 
            of SSH that is named "ssh-commercial":
            <p> 
            <pre>
%replaces ssh-commercial
</pre>
            <b>Conditionals</b>
            <p> It's possible to have sections of your listfile that are applicable 
              only on certain packaging systems, operating systems, or architectures. 
              The %format tag declares that anything following it is applicable 
              only for the declared packaging system types. The special name "all" 
              refers to all format types. In this example, anything following 
              this line applies only to RPM, deb, and Solaris packages:
            <p> 
            <pre>
%format rpm deb pkg
</pre>
            The %system tag is similar to the %format tag, but it works on the 
            system name as reported by a lowercased <b>uname -s</b> and an optional 
            OS version as given by <b>uname -r</b>. In this example, we change 
            the package dependency on Solaris to require the OpenSSL package provided 
            by sunfreeware.com; everything else will depend on a package called 
            "openssl":
            <p> 
            <pre>
%system solaris
%requires SMCossl
%system !solaris
%requires openssl
</pre>
            There are also a number of conditional tags that can operate on variables:
            <p> 
            <pre>
%if
%ifdef
%elseif
%elseifdef
%else
%endif
</pre>
            These are primarily of use when you have listfiles that are generated 
            through some automatic process.
            <p> <b>Init Scripts</b>
            <p> EPM treats System V init scripts a little differently. Init scripts 
              are declared much like normal files, but are prefixed with an "i" 
              instead:
            <p> 
            <pre>
i mode user group service-name source ["options"]
</pre>
            The service-name in this case is what the script that is installed 
            in the normal init script directory should be named. This varies by 
            platform, but on Linux and Solaris, it usually gets installed in /etc/init.d, 
            and on HP-UX in /sbin/init.d.
            <p> The <b>runlevel()</b> option lets you control what rc directories 
              should get symlinks that point to the init script. Any non-zero 
              runlevel listed will get a start symlink, whereas runlevel 0 will 
              get a stop symlink.
            <p> The <b>start()</b> and <b>stop()</b> options allow you to specify 
              at what point in the startup and shutdown process the script should 
              be run. Here's an example:
            <p> 
            <pre>
i 755 root root sshd sshd.rc "runlevel(02) start(82) stop(18)"
</pre>
            This would install the sshd.rc file as "sshd" in the init script directory. 
            It would then create a symlink in the rc0.d directory called K18sshd, 
            and one in the rc2.d directory called S82sshd. There are also some 
            Apple OS X specific options that handle its dependency-oriented init 
            procedure. See the documentation for more info on it.
            <p> <b>A Complete Example Package</b>
            <p> Listing 2 shows a listfile for a complete OpenSSH package, which 
              uses most of the features of EPM I've covered here. As before, copy 
              this file into the directory where you've built SSH and name it 
              "openssh.list". Edit the configuration files to your liking and 
              add any init scripts that are not part of the distribution. Then 
              run:
            <p> 
            <pre>
epm -f native openssh
</pre>
            It should generate your package and place it into the appropriate 
            directory.
            <p> <b>Generating listfile Entries Automatically</b>
            <p> Manually configuring listfiles for a large package can be very 
              tedious, so EPM comes with another command called <b>mkepmlist</b>, 
              which will automatically generate listfile entries for everything 
              under a given directory. When generating a package with a lot of 
              files, I often do an initial install in a temporary directory and 
              use <b>mkepmlist</b> to generate the list of files that would be 
              installed. I then do a search and replace to change the locations 
              of the files to their actual location. This is particularly useful 
              when installing a lot of files in a directory shared among many 
              packages (such as /usr or /usr/local).
            <p> <b>Conclusion and Resources</b>
            <p> EPM has transformed how we approach software maintenance at my 
              site. By making it simple to generate custom packages, we can install 
              software in a consistent manner across many machines as well as 
              track versions and dependencies. This makes it much easier to deploy 
              "standard" machine configurations and ensure consistency across 
              many machines.
            <p> The EPM site is the primary site for EPM-related news and information 
              (<b>http://www.easysw.com/epm</b>). It also contains more comprehensive 
              documentation on using EPM.
            <p> Major kudos and thanks to the ESP folks for making another great 
              software tool, and for being so helpful via their newsgroups and 
              mailing lists.
            <p> <i>Jeff Layton has been working with computers since he got his 
              paws on a TRS-80 in 1981 at age 10. After working in the Macintosh 
              and PC realm for more than a decade and attaining a degree in Physics 
              Education, he came to his senses and made the jump to Unix administration 
              in 1996. He is currently employed as a Senior Unix Systems Administrator 
              at Bowe Bell and Howell.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
