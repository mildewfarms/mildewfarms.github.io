<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i12: HTE: Host Table Editor</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a10_s1.htm">Sidebar</a></span></td>
		<td><a href="../../../../source/SA/2003/dec2003.tar"><b class=codeListing>dec2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a10.gif" width="200" height="167" align="right">HTE: 
              Host Table Editor</b></h1>
            <p> <i>Daniel Speers</i>
            <p> Many years ago, I worked for a large trading firm in New York 
              with about 100 different networks spanning 12 offices around the 
              United States and a few in other countries. The network subnets 
              were grouped by DNS domains and managed by several different systems 
              administrators. IP addresses were managed in a central host table 
              and in DNS zone files, all on one master server. This created several 
              problems, not the least of which was keeping the /etc/hosts file 
              and the DNS zone files in sync.
            <p> Other problems involved the security of different people editing 
              these tables, keeping track of what addresses were really in use, 
              and what devices were using those addresses. We also had reserved 
              addresses. This typically meant that the first 20 addresses on a 
              subnet were for network devices, and the following 10 were for DHCP-assigned 
              addresses.
            <p> The idea to manage the host table in a database evolved from these 
              problems. From this database, we could generate a proper /etc/hosts 
              file, DNS configuration and zone files, and the DHCP config files. 
              Address space could be reserved, and permissions assigned to each 
              admin for their assigned networks. One other critical tool that 
              helped ensure the accuracy of the host table was an IP discovery 
              program that regularly checked each address to see whether it was 
              in use, and by what type of device.
            <p> This article focuses on the host table editor. Apart from the 
              main requirement of solving the problems mentioned above, the users 
              of HTE had their own ideas about how it would work, ideas that were 
              often at odds with each other. Some wanted an interactive-style 
              program, while others preferred it to be command-line driven so 
              that scripts could be written around it. Therefore, I made the interface 
              work both ways. The same hierarchical command structure can be called 
              from the command line to make scripting easy.
            <p> <b>Introducing HTE</b>
            <p> Host Table Editor (HTE), available for download at <b>http://www.samag.com/code/</b>, 
              is a Perl program that manages a database of DNS information. See 
              the sidebar for a summary of HTE files available with the code. 
              The HTE system provides a uniform interface for entering DNS data 
              and generating DNS-related configuration files.
            <p> The advantages of storing Hostname, IP address, DNS, and DHCP 
              information in a database system such as HTE include:
            <p> 
            <p> 
            <ul>
              <li> Centralized control &#151; It allows administrators to keep 
                track of all host, IP address, DNS, and DHCP information in one 
                common database. 
              <li> Security &#151; By using a database, remote admins can access 
                the host table data without requiring root access to the master 
                servers that host DNS and/or DHCP maps. 
              <li> Error checking &#151; Data input rules and automated building 
                of host table, DHCP, and DNS configuration files helps ensure 
                syntactic accuracy. 
              <li> Uniform updates &#151; By using a single system and database, 
                the data and the format of the automatically created files will 
                remain neat and consistent. 
              <li> Single source (only have to enter the data once) &#151; This 
                eliminates the need to manage separate host table, DNS, and DHCP 
                configuration files, which can often reside on multiple servers. 
              <li> Automatic file generation &#151; In a shop where several servers 
                are used to manage the network, changes will be propagated properly 
                without the need for manual intervention.
            </ul>
            <p> Some possible disadvantages to this HTE program may have to do 
              with unique or special needs of your environment. For example, the 
              configuration files that are built were designed for use with standard 
              DNS or DHCP servers on Unix-based systems. Where third party server 
              software is used, these files may not work, or there may be a number 
              of required options that are not supported.
            <p> This article describes how to set up HTE, how to enter DNS information 
              into the HTE database, and how to use HTE to automatically generate 
              host files, DNS zone files, and DHCP configuration files.
            <p> <b>Installing HTE</b>
            <p> You will need a current version of MySQL and Perl. If you plan 
              to run a DNS server, HTE was built with Bind 9.2.1, however, newer 
              and older versions may work just as well. (Keeping Bind up-to-date 
              is recommended.) Install the following Perl modules from CPAN: Term::Readline::Gnu, 
              DBI, DBD::MySQL, Getopt::Long, Config::Simple, Data::Dumper, and 
              Net::Netmask. The Net::Netmask module (by David Muir Sharnoff) provides 
              HTE the ability to keep your network structured. You may also want 
              to install MySQLCC to simplify database administration.
            <p> Unpack the HTE kit in a temporary directory and install it with 
              the following commands:
            <p> 
            <pre>
perl Makefile.PL
make
make test
make install
</pre>
            Create a MySQL database to store the host table data using a suitable 
            name such as &#147;hosts&#148;. Then, while still in the directory 
            into which you unpacked the HTE kit, run the following command to 
            initialize the database with a MySQL account that has create privileges:
            <p> 
            <pre>
mysql -u admin -p hosts &lt; hte.sql
</pre>
            You then must create user accounts in MySQL. Begin with an account 
            with a name like &#147;build&#148; with SELECT only privileges. This 
            account will be used to create the hosts table, DNS, and DHCP files. 
            This may also be used to give average users read-only access to the 
            HTE editor.
            <p> Copy hte.conf to /etc/hte.conf and put the values for your database 
              and read-only user on the dsn, user, and pass lines.
            <p> Much of the security of the system is managed by the database. 
              If you want to specify sets of users who can create networks and 
              those who add and delete host table entries, provide different permissions 
              in your grant statements. For example, a MySQL account for Super_Admin 
              can be created with SELECT, INSERT, UPDATE, and DELETE on all tables 
              in the hosts database.
            <p> Super_Admin can create network definitions, DNS zones, and host 
              table entries. Joe_Admin, who is only allowed to create host table 
              entries, should have SELECT on all tables, and INSERT, UPDATE, and 
              DELETE on just the hosts table. Network_Guy will have INSERT, UPDATE, 
              and DELETE permissions on hosts and networks. You may not want Joe_Admin 
              to delete addresses once they are created, so only give INSERT and 
              UPDATE permissions. The editperms and glue tables are reserved to 
              manage HTE and should be read-only for all users. The htevars table 
              is where user-defined preferences are stored. If you want to allow 
              your users to save their preferences, make sure they can INSERT, 
              UPDATE, and DELETE. Thus, the permission schemes can be provisioned 
              in the manner most appropriate for your shop.
            <p> To simplify using HTE, add the HTE_USER environment variable to 
              your .cshrc or .bash_profile. You may also want to set HTE_PASS, 
              though it&#146;s not recommended if security is a concern. HTE will 
              prompt you for a password if HTE_USER is set and HTE_PASS isn&#146;t.
            <p> <b>Take a Look Around</b>
            <p> Get familiar with the interface. The command levels can be stepped 
              into one at a time, or chained together to jump to the desired level 
              or invoke a desired command. For example, if you type &#147;show&#148; 
              by itself, you will be at the show prompt and can then type any 
              sub-level command.
            <p> 
            <pre>
bash $&gt; hte
hte &gt;  show
show &gt; ip 192.168.254.12
</pre>
            or:
            <p> 
            <pre>
bash $&gt; hte
hte &gt; show ip 192.168.254.12
</pre>
            or, from the command line:
            <p> 
            <pre>
bash $&gt; hte show ip 192.168.254.12
</pre>
            When you use commands from the command line, interactive mode is disabled. 
            The only exception is when you create something, you will be placed 
            into the entry editor to modify the values of the newly created item. 
            You can also skip the editor by adding a set value command. For example:
            <p> 
            <pre>
bash $&gt; hte create zone fred.com set nameserver ns.myisp.com
</pre>
            Once created, editing the zone from the command line is done the same 
            way:
            <p> 
            <pre>
bash $&gt; hte edit zone fred.com set nameserver ns.myisp.com
</pre>
            Typing <b>help</b> at any prompt will show the entire command tree 
            from that level down. The command-line version is <b>--help</b>. As 
            you can see, the interface is quite flexible.
            <p> <b>Building Your Network</b>
            <p> If you are going to use DNS, you will want to start by creating 
              your DNS zones. Create your zone records and make sure you set the 
              nameserver and SOA fields to the right values for your setup:
            <p> 
            <pre>
bash $&gt; hte create zone fred.com set nameserver ns.myisp.com
bash $&gt; hte edit   zone fred.com set SOA master.fred.com
</pre>
            Now create at least one network to get started. The networks are created 
            using the CIDR format, which is common. When you edit or show a network, 
            leave off the <b>/bits</b> value at the end:
            <p> 
            <pre>
bash $&gt; hte
hte $&gt; create network 192.168.101.0/24
Network created.
  description    :
  network_address: 192.168.101.0
  bits           : 24
  create_date    : 20030531204143
  creator        : dspeers
  dns_id         : []
  group_id       :
  location       :
edit network&gt;
</pre>
            Type <b>help</b> to see what you can do in the edit mode and to see 
            which fields are read-only.
            <p> You will first describe your new network to make it different 
              from all the other networks. The <b>set</b> command takes the field 
              name you want to set as its first argument. Everything that follows 
              is the value:
            <p> 
            <pre>
set description My own private network
</pre>
            Typing <b>sh</b> at the <b>edit network&gt;</b> prompt will redisplay 
            the record with your new description.
            <p> Next, place this network in the DNS zone you created earlier. 
              The DNS zone is assigned using the dns_id field. Notice how the 
              dns_id field has square brackets in it, because it is a lookup field. 
              If you try to assign any value that is not a valid key or a complete 
              value in the lookup table, the possible values will be listed, using 
              your argument as a filter:
            <p> 
            <pre>
edit network&gt; set dns_id fred
The following are valid for dns_id (Filter: fred)
     1     =&gt; fred.com
edit network&gt; set dns_id 1
</pre>
            In the above example, &#147;fred&#148; was not a valid value for the 
            dns_id field. In such a case, the program will use that invalid value 
            as search criteria to find possible matches in the zone table. Each 
            matching item is listed by a number that can be used to set the dns_id 
            field. In this example, by setting dns_id to 1, the fred.com zone 
            was assigned. It is also valid to set the name to an exact match in 
            the zone table:
            <p> 
            <pre>
edit network&gt; set dns_id fred.com
</pre>
            Once you have made your changes, press &#147;Enter&#148; once to leave 
            this level. The program will notice that you made changes and ask 
            you whether you want to save them. Congratulations! You have created 
            your first network. Look at your new network:
            <p> 
            <pre>
hte &gt; show network 192.168.101.0
  description     =&gt; My own private network
  network_address =&gt; 192.168.101.0
  bits            =&gt; 24
  create_date     =&gt; 20030604135652
  creator         =&gt; dspeers
  dns_id          =&gt; [fred.com]
  location        =&gt;
  </pre>
            <b>Create a Host Table Entry</b>
            <p> Creating a host table entry is done in the same way as creating 
              a network, which must already exist. HTE will already know to which 
              network the address belongs.
            <p> 
            <pre>
hte &gt; create ip 192.168.101.10
Address created.
  description     =&gt;
  host_name       =&gt;
  ip_address      =&gt; 192.168.101.10
  aliases         =&gt;
  create_date     =&gt; 20030531220751
  creator         =&gt; dspeers
  device_id       =&gt;
  last_seen       =&gt;
  status_id       =&gt; [assigned]
edit host&gt;
</pre>
            The only other field that must be set is the host_name. The status_id 
            field is used to help provide guidance to other admins on which addresses 
            are in use, available, or reserved for future use.
            <p> <b>Building the Host Table</b>
            <p> Building a host table is as easy as typing &#147;build host table&#148;. 
              The table will be grouped by network to keep it looking neat:
            <p> 
            <pre>
###########################################
#
# Network    : 192.168.101.0/24  Mask: 255.255.255.0
# Location   : My House   Domain: fred.com
# Description: Middle Earth
#
192.168.101.10  bilbo                # Dan's server
192.168.101.11  frodo                # File Server
192.168.101.12  epson                # My Printer
</pre>
            You can capture the output in traditional Unix fashion by redirecting 
            the output to /etc/hosts, or by setting the <b>output</b> variable:
            <p> 
            <pre>
hte&gt; build host
host &gt; set output /etc/hosts
</pre>
            <b>Building the DNS Maps</b>
            <p> The host table editor will create both the named.conf file and 
              the individual zone files. Often the named.conf file will need more 
              options than the Host Table Editor will support. Your shop may also 
              have things that you don&#146;t want the Host Table Editor to manage 
              for you, or other configuration settings you want to set. The best 
              practice is put your standard options in /etc/named.conf and use 
              an include file command to reference the Host Table Editor portions. 
              To do this, you have the Host Table Editor output its master DNS 
              configuration data to a file named /etc/named.auto, which would 
              look something like this in your /etc/named.conf file:
            <p> 
            <pre>
options {
    directory "/var/named";
}
include "/etc/named.auto";
</pre>
            The default settings for the <b>build dns maps</b> command will create 
            the /etc/named.auto file and will put the zone files in the /var/named 
            directory. You must add the include statement to your /etc/named.conf 
            file.
            <p> The settings that determine where the files are saved can be changed 
              in interactive mode at the <b>build dns</b> level:
            <p> 
            <pre>
hte &gt; build dns
dns &gt; vars
  config          =&gt; /etc/named.auto
  dir             =&gt; /var/named
  verify          =&gt; /usr/sbin/named-checkzone
dns &gt; set dir /var/named.d
</pre>
            If you have a current version of Bind installed, it comes with a helper 
            program to verify the format of the zone files. It will run as each 
            zone file is created.
            <p> Here is a practical example of how all these pieces of DNS will 
              fit together. Say you had a DNS domain called &#147;myplace.com&#148; 
              and in that network is a machine called foobar with the IP address 
              of 192.168.200.37. Your DNS server will live on a box called ns.myplace.com 
              and have an address of 192.168.200.5.
            <p> To begin, create your DNS zone:
            <p> 
            <pre>
hte &gt; create zone myplace.com set nameserver ns.myplace.com
hte &gt; edit   zone myplace.com set SOA ns.myplace.com
</pre>
            Then, define the network where your hosts will live:
            <p> 
            <pre>
hte &gt; create network 192.168.200.0/24 set dns_id myplace.com
</pre>
            Next, add the hostnames to the network:
            <p> 
            <pre>
hte &gt; create ip 192.168.200.5  set host_name ns
hte &gt; create ip 192.168.200.37 set host_name foobar
</pre>
            There may also be extra records you need in a zone file. For example, 
            you may want to define an alias for foobar and have it also known 
            as www.myplace.com. You may also want to define how email gets to 
            your mailserver. These are accomplished with the <b>create zone_record</b> 
            command. It takes no arguments and will allow a variety of record 
            types, including MX records to extra CNAME entries. A typical addition 
            of an MX record to handle mail will look like this:
            <p> 
            <pre>
hte &gt; create zone_record
Zone entry created.
    address         =&gt;
    dns_id          =&gt; []
    entry_id        =&gt; 3
    priority        =&gt; 0
    record          =&gt; IN
    target          =&gt;
    type            =&gt; []
edit zone_entries&gt; set address myplace.com.
edit zone_entries&gt; set dns_id myplace.com
edit zone_entries&gt; set target foobar
edit zone entries&gt; set priority 10
edit zone_entries&gt; set type MX
</pre>
            This MX record will allow mail bound for myplace.com to be handled 
            by foobar.myplace.com. Note the period at the end of the &#147;set 
            address&#148; line. Anytime you set the address or target fields to 
            a fully qualified domain name instead of just a hostname, you must 
            include the period to make sure the nameserver doesn&#146;t automatically 
            add the local domain name for you.
            <p> To make people think that foobar also goes by the name of www.myplace.com, 
              you could create another zone record using the CNAME type using 
              these settings:
            <p> 
            <pre>
edit zone_entries&gt; set address www
edit zone_entries&gt; set dns_id myplace.com
edit zone_entries&gt; set target foobar
edit zone_entries&gt; set type CNAME
</pre>
            And the last step will create the DNS maps:
            <p> 
            <pre>
hte &gt; build dns maps
</pre>
            The named.auto file will look something like this:
            <p> 
            <pre>
zone "myplace.com"{
type master;
file  "myplace.com.zone";
};
zone "254.168.200.in-addr.arpa"{
type master;
file  "254.168.200.in-addr.arpa.zone";
};
</pre>
            The myplace.com zone file may look a bit cryptic, which is why you 
            wanted a program like the Host Table Editor to make it for you:
            <p> 
            <pre>
;Zone built by HTE
$TTL 86400
@         IN   SOA    ns.myplace.com root.localhost (
                      11 ; serial
                      28800 ; refresh
                      7200 ; retry
                      604800 ; expire
                      86400 ; ttl
                 )

@                IN   NS     ns.myplace.com
myplace.com      IN   MX     10 foobar
www              IN   CNAME  foobar
ns               IN   A      192.168.200.5
foobar           IN   A      192.168.200.37
</pre>
            <b>Building DHCP Config Files</b>
            <p> DHCP has become a required service as the popularity of wireless 
              networks increases. Automatically creating the configuration for 
              DHCP is a natural extension of the Host Table Editor. In just a 
              couple of easy steps, your DHCP server will be ready to go.
            <p> To keep things simple, a DHCP entry is associated with a network. 
              The network records already know things like the netmask and DNS 
              domain name, so the only required step is to define the range of 
              IP addresses that will be available for DHCP clients to borrow (or 
              lease in DHCP terms), which is done by giving the starting and ending 
              address range for the desired network.
            <p> 
            <pre>
hte &gt; edit dhcp 192.l68.254.0 set range 192.168.254.100 192.168.254.120
</pre>
            DHCP as a protocol supports a number of optional convenience features 
            to help the weary transient user navigate around your network. These 
            include things like the address of the router to use to get off the 
            local network, and address of your DNS server:
            <p> 
            <pre>
hte &gt; edit dhcp 192.168.254.0 set router 192.168.254.1
</pre>
            Many of the options you could provide depend largely on how your DHCP 
            clients are configured and the services your network offers. For example, 
            say your network has an NTP (Network Time Protocol) server to set 
            your workstation clock against. You would set the ntp-servers option:
            <p> 
            <pre>
hte &gt; edit dhcp 192.168.254.0 set ntp-servers 192.168.254.1
</pre>
            For a list of valid options, see the dhcpd-options manual page that 
            comes with the ISC DHCP client or the IETF draft on DHCP agent options 
            at <b>http://www.ietf.org</b>.
            <p> Last, to build the dhcpd.auto configuration file, type &#147;build 
              dhcp&#148; at the <b>hte&gt;</b> prompt. Here you can set the global 
              options of max-lease-time and default-least-time by using the <b>set</b> 
              command. The default values will be sufficient for most sites:
            <p> 
            <pre>
hte &gt; build dhcp conf
Building dhcpd.auto file...
   '192.168.254.0/24'
Done.
</pre>
            Here is what the resulting dhcpd.auto file will look like:
            <p> 
            <pre>
subnet 192.168.254.0 netmask 255.255.255.0 {
default-lease-time 21600;
max-lease-time 43200;
option subnet-mask 255.255.255.0;
option domain-name "myplace.com";
range dynamic-bootp 192.168.254.10 192.168.254.20;
option routers 192.168.254.1;
}
</pre>
            You will use an include statement in /etc/dhcpd.conf just same way 
            we did for /etc/named.conf, which will set a variety of static and 
            default options for your DHCP server.
            <p> <b>Summary and Future Features</b>
            <p> By now you have created DNS zones, networks, and host table entries. 
              You now have effective ways to manage access to the host table, 
              and automated ways to build your /etc/hosts file, DNS, and DHCP 
              configuration files. This should dramatically simplify the way you 
              manage your network addresses, improve security, and will keep all 
              addresses and related configuration files in sync.
            <p> At this point, will want to create a crontab entry to build the 
              various configuration files on a regular basis. An example contrab 
              entry looks like this:
            <p> 
            <pre>
   0 * * * * /usr/bin/hte build host table;/usr/bin/hte build \
     dns maps;/usr/bin/hte build dhcp conf
</pre>
            Some issues in how you manage your network remain, such as how to 
            know when an address is no longer in use, or whether one has been 
            taken without being allocated in the database. You may also want to 
            know what kind of devices are using those addresses. These features 
            are planned for in an add-on program called ip-discover that may be 
            available by the time you read this. In the original system, ip-discover 
            used both icmp requests and SNMP gets to determine which addresses 
            were in use and what was using them.
            <p> <i>Dan Speers has been in the technology industry for 17 years 
              and is currently a Professional Services Engineer with VA Software. 
              He has been a Linux user since kernel 0.98. At every opportunity, 
              he helps promote the use of open source software in roles traditionally 
              filled by commercial products.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
