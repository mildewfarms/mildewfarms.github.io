<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i12: How to Handle (a) Python</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a1.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink">Sidebar</span></td>
		<td><a href="../../../../source/SA/2003/dec2003.tar"><b class=codeListing>dec2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>How to Handle (a) Python</b></h1>
            <p> Most modern Unix distributions include Python, and good binary 
              and source versions are available from <b>http://python.org/download</b> 
              for essentially all platforms that appear in the pages of <i>Sys 
              Admin</i>.
            <p> Bring up a (shell) command line, therefore, and try:
            <p> 
            <pre>
# python
</pre>
            With any luck, you'll see:
            <p> 
            <pre>
Python 2.3+ (#2, Aug 10 2003, 11:33:47)
[GCC 3.3.1 (Debian)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>
            Don't worry if your version is different from this one. The Python 
            language is quite conservative; plenty of applications written in 
            the mid-'90s work unchanged today, and all the experiments described 
            here are compatible with all Python releases dating back several years.
            <p> You can use Python in any of a handful of "modes". Most immediately 
              rewarding is the interactive one begun by the command-line invocation 
              above. Treat this as a "calculator":
            <p> 
            <pre>
&gt;&gt;&gt; # Lines that begin this way are comments.
...
&gt;&gt;&gt; # When you type in what appears 
    # after "&gt;&gt;&gt; ", you
...
&gt;&gt;&gt; # should see these results:
...
&gt;&gt;&gt; 2 + 3
5
&gt;&gt;&gt; '2' + '3'
'23'
&gt;&gt;&gt; alphabet = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; character_list = list(alphabet)
&gt;&gt;&gt; character_list.reverse()
&gt;&gt;&gt; reverse_alphabet = ''.join(character_list)
&gt;&gt;&gt; print reverse_alphabet
zyxwvutsrqponmlkjihgfedcba
</pre>
            Python also lets you "batch" your computations. If you create a file 
            called <b>my_script.py</b> with contents:
            <p> 
            <pre>
2 + 3
'2' + '3'
alphabet = 'abcdefghijklmnopqrstuvwxyz'
character_list = list(alphabet)
character_list.reverse()
reverse_alphabet = ''.join(character_list)
print reverse_alphabet
</pre>
            you can run it "automatically" by invocation at the command line of 
            <b>python my_script.py</b>. Executing it yields the output you'd expect:
            <p> 
            <pre>
5
23
zyxwvutsrqponmlkjihgfedcba
</pre>
            As we pursue our work with Python, we'll come across at least a couple 
            of other execution "modes". Interactive and batch interpretation are 
            much the most important for your start. Even if you are accustomed 
            to work with command-line BASIC or Unix shells, though, it's likely 
            to take a while to appreciate the richness of Python's interaction.
            <p> Python embeds powerful documenting and introspective capabilities 
              that make it inviting, for example, to "ask the language" itself 
              how common tasks are done. If you're fuzzy on how Python lists work, 
              start by printing out the interpreter's own help on the subject:
            <p> 
            <pre>
# python
Python 2.2.1 (#1, Aug 30 2002, 12:15:30)
[GCC 3.2 20020822 (Red Hat Linux Rawhide 3.2-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; help(list)
Help on class list in module __builtin__:

class list(object)
 |  list() -&gt; new list
 |  list(sequence) -&gt; new list initialized from sequence's items
 |
 |  Methods defined here:  ...
</pre>
            Future articles will give more practice in taking advantage of Python's 
            self-documenting benefits.
        </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
