<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i10: Getting Status Information about an HACMP Cluster</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2003/oct2003.tar"><b class=codeListing>oct2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a7.gif" width="200" height="167" align="right">Getting 
              Status Information about an HACMP Cluster</b></h1>
            <p> <i>Arni Snorri Eggertsson</i>
            <p> During the time that I have managed High Availability Cluster 
              Multiprocessing for AIX (HACMP) clusters, I have found that status 
              information for these clusters is not very accessible. There are 
              ways of monitoring them with standard commands that answer one question 
              per command or with the CLVIEW program, which is actually getting 
              better and better with each release. But it's difficult to monitor 
              for status changes and especially difficult to do custom monitoring, 
              such as Big Brother. And since HACMP is intended for running highly 
              available applications, state monitoring is one of the essential 
              parts for it to meet its goals.
            <p> Over time I created small scriptlets using SNMP to give me information 
              about specific things inside HACMP. These include checking if all 
              interfaces are up, and if each application is up and running and 
              on its intended node. As my collection of scriptlets grew, I decided 
              to combine them into one script that would create a human-readable 
              status screen (see Listing 1). My experience is that condensed information 
              that can fit on one screen is very useful for systems administrators 
              to quickly and easily debug a problem.
            <p> But how can you get this information and wrangle with it? The 
              easiest way to do this is by querying the HACMP server demons using 
              SNMP (the command is snmpinfo on AIX and snmpget on Linux). You 
              can't, however, receive all information using SNMP, so I had to 
              use at least one command that belongs to the HACMP command set.
            <p> Detailed discussion about SNMP in general is beyond the scope 
              of this article, but I assume readers at least know what SNMP is. 
              Actually, I think anyone with basic shell scripting skills who reads 
              through the script given in Listing 2 will understand it without 
              knowing anything about SNMP.
            <p> Information is actually quite easy to retrieve using SNMP since 
              IBM is kind enough to publish the MIB (Management Information Database), 
              which helps translate and query SNMP data into a human-readable 
              format. Here is an example without the MIB in place:
            <p> 
            <pre>
root@server1:/&gt;snmpinfo -m dump -c public -h localhost \
1.3.6.1.4.1.2.3.1.2.1.5.1
1.3.6.1.4.1.2.3.1.2.1.5.1.1.0 = 1
1.3.6.1.4.1.2.3.1.2.1.5.1.2.0 = 41:43:4D:45
1.3.6.1.4.1.2.3.1.2.1.5.1.3.0 =
1.3.6.1.4.1.2.3.1.2.1.5.1.4.0 = 2
1.3.6.1.4.1.2.3.1.2.1.5.1.5.0 = 1
1.3.6.1.4.1.2.3.1.2.1.5.1.6.0 = 1043707312
1.3.6.1.4.1.2.3.1.2.1.5.1.7.0 = 0
1.3.6.1.4.1.2.3.1.2.1.5.1.8.0 = 32
1.3.6.1.4.1.2.3.1.2.1.5.1.9.0 = 73:65:72:76:65:72:31
1.3.6.1.4.1.2.3.1.2.1.5.1.10.0 = 73:65:72:76:65:72:31
1.3.6.1.4.1.2.3.1.2.1.5.1.11.0 = 2
1.3.6.1.4.1.2.3.1.2.1.5.1.12.0 = 1
</pre>
            However, if we have the MIB in place and repeat the query, we get 
            the following. Note that I also added the "-v" flag to translate the 
            results from HEX into ASCII:
            <p> 
            <pre>
root@server1:/&gt;snmpinfo -m dump -v  -c public -h localhost -o \
  /usr/sbin/cluster/hacmp.defs 1.3.6.1.4.1.2.3.1.2.1.5.1
clusterId.0 = 1
clusterName.0 = "ACME"
clusterConfiguration.0 = ""
clusterState.0 = 2
clusterPrimary.0 = 1
clusterLastChange.0 = 1043707312
clusterGmtOffset.0 = 0
clusterSubState.0 = 32
clusterNodeName.0 = "server1"
clusterPrimaryNodeName.0 = "server1"
clusterNumNodes.0 = 2
clusterNodeId.0 = 1
</pre>
            And to make it even easier, you can replace the query string "1.3.6.1.4.1.2.3.1.2.1.5.1" 
            with the word "cluster" and get the same results. All this translation 
            between these numbers and names is done with help from the MIB. The 
            MIB that is deployed with HACMP/CS and HACMP/ES is named hacmp.defs 
            and hacmp.my. These are plain text files and provide information about 
            what you can get from HACMP with SNMP. You may have to open these 
            files to fully understand the result set. The constants I set up first 
            in the script are pure information from the MIB.
            <p> If you are using HACMP/ES, the MIB files are located under /usr/es/sbin/cluster 
              but, if you are using HACMP/CS, the MIB files can be found under 
              /usr/sbin/cluster.
            <p> The scripts can easily be modified to run on a different node 
              than one of the cluster nodes. To make them run on a different AIX 
              machine, just comment out the part where I use the <b>clfindres</b> 
              command and update the variables that decide which host to query. 
              Please note that different operating systems have different commands 
              of using SNMP so some adjustments may be required to port the script 
              to another platform.
            <p> To understand how some of the information is retrieved, you can 
              view Table 1, which describes the SNMP keys and what the retrieved 
              information means. Some SNMP keys describe themselves.
            <p> The entire script can be found in Listing 2. The script is basically 
              built from about five function calls, each of which does a bit of 
              work. When combining my scriptlets into this single script, I tried 
              to be as modular as possible, but that is not always possible when 
              reusing code. I also realize that this can all be done with Perl 
              in a simpler manner, but I prefer shell scripts.
            <p> The script works like this: gather_information is called, which 
              reads the variable SNMPKEYS, and this variable contains all the 
              SNMP keys listed in Table 1. These are the keys from which I get 
              most of the information. The gather_information function calls get_info, 
              which translates all the SNMP information into variables using the 
              snmp_cmd function. Once we have most of the information loaded as 
              variables, it's time to print the status screen using the print_report 
              function. Since shell scripts do not offer three-dimensional arrays, 
              I had to improvise when printing the network information and that's 
              why network information is retrieved from a special function.
            <p> This is just one way of how to use the information gathered. This 
              script can easily be extended to do much more and even report to 
              open source monitoring tools such as BigBrother or BigSister. I 
              encourage everyone to have a go at modifying the status screen and 
              let their imagination go wild.
            <p> <i>Arni Snorri Eggertsson is an RHCE and an CATE for AIX 5L and 
              AIX 4. He has been working professionally in the *nix world for 
              about four years now although he has much longer been active as 
              an amateur. His focus is large HACMP installations and AIX support. 
              Arni can be contacted at <b>arnie@gormur.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
