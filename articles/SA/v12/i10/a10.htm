<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i10: The PBS Accounting Toolkit</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a10_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a10_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a10_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a10_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a10_f5.htm">Figure 5</a></span></td>
		<td><a href="../../../../source/SA/2003/oct2003.tar"><b class=codeListing>oct2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a10.gif" width="200" height="167" align="right">The 
              PBS Accounting Toolkit</b></h1>
            <p> <i>Rodney Mach</i>
            <p> The Portable Batch System (OpenPBS) is a workload management package 
              used in many high-performance computing environments. OpenPBS reports 
              a plethora of information in an accounting log file that can be 
              used by systems administrators for capacity planning, resource reporting, 
              and performance tuning. Unfortunately, extracting information from 
              the accounting logs for those purposes has historically been a difficult 
              task. The example shown in Figure 1 is a typical accounting log 
              entry for an executed job generated by OpenPBS.
            <p> This example provides quite a bit of information. The typical 
              solution to extracting information from the accounting log would 
              be to first decipher the format, and then spend time writing Perl 
              code to get the information you need. However, this solution means 
              you spend more time retrieving your data instead of working with 
              your data. The PBS Accounting Toolkit solves this problem. It allows 
              administrators to convert the PBS accounting logs to XML to leverage 
              XML technologies for querying and parsing, and includes software 
              to generate high quality PDF usage reports from this XML accounting 
              data.
            <p> <b>Installing the Software</b>
            <p> Before installation, make sure you have Java 1.4 or higher installed. 
              You can type "java -version" at the Unix prompt to make sure the 
              version number you have is 1.4.X. You can install the latest Java 
              1.4 RPM from <b>http://java.sun.com</b>.
            <p> After confirming your Java installation, go to:
            <p> 
            <pre>
http://pbsaccounting.sourceforge.net
</pre>
            and obtain the latest version of the Accounting Toolkit. There are 
            two RPMs to install -- one is the XML conversion software, the other 
            is the Darkslide reporting package that I will discuss later.
            <p> <b>XML Conversion</b>
            <p> After installing the RPMs, you can convert the first accounting 
              file to XML. For example, to convert accounting data found in the 
              file /usr/spool/PBS/server_priv/accounting/20030523 to XML, type:
            <p> 
            <pre>
% cd /usr/spool/PBS/server_priv/accounting/
% mkdir xml
% pbstoxml 20030523 xml/20030523.xml
</pre>
            Figure 2 shows the resulting 20030523.xml file.
            <p> Converting the accounting data to XML opens up a powerful set 
              of XML tools for querying, parsing, converting, and storing the 
              data.
            <p> One example of leveraging an existing tool is using XPath to find 
              out how many nodes user rmach used. To do this, use the Perl XML:Xpath 
              module to do an XPath query against the XML data. (You could think 
              of XPath sort of like SQL for XML; see the references section for 
              a good tutorial on XPath.):
            <p> 
            <pre>
% xpath "sum(//pbs_jobfile/execution_record/resource_list/nodes)" &lt; 20030523.xml
Query didn't return a nodeset. Value: 1
</pre>
            In this case, the XPath query returned 1 nodes were used by user rmach. 
            Writing a Perl script would have given the same answer, assuming it 
            was coded correctly, but using XPath is much faster and less prone 
            to error because it doesn't require any coding.
            <p> <b>Darkslide Report Generation</b>
            <p> The XML by itself isn't useful if you don't do something with 
              it, which is where the Darkslide Report Generator comes in. Darkslide 
              produces high-quality usage graphs and tables with which you can 
              easily visualize your accounting data (see Figure 3).
            <p> A high-level view of the Darkslide architecture is shown in Figure 
              4. XML accounting data is stored inside Xindice, a native XML database. 
              The database is accessed via XML:DB. The reporting engine issues 
              XPath commands against the database to gather data to produce the 
              PDF report output.
            <p> <b>Darkslide Installation</b>
            <p> The basic steps to getting up and running with the Darkslide Report 
              Generator are:
            <p> 
            <p> 1. Install and configure Xindice.<br>
              2. Convert your OpenPBS accounting data to XML.<br>
              3. Load the converted XML accounting data into Xindice.
            <p> 
            <p> When this is complete, you will be able to generate the report.
            <p> <b>Xindice Installation</b>
            <p> DarkSlide uses Xindice, a native XML database, to store the accounting 
              data. Here is the procedure (also documented in the Xindice admin 
              guide) for setting up the database in preparation for storing the 
              accounting data.
            <p> Download and install the package xml-xindice-1.0.tar.gz from: 
              <b>http://xml.apache.org/xindice</b>:
            <p> 
            <pre>
% gunzip xml-xindice-1.0.tar.gz
% tar xf xml-xindice-1.0.tar
% mv xml-xindice-1.0 /usr/local/
% nohup /usr/local/xml-xindice-1.0/start &amp;
</pre>
            If everything went well, you should get a message saying "Server Running". 
            Set important environment variables that Xindice requires:
            <p> 
            <pre>
% export PATH=$PATH:/usr/local/xml-xindice-1.0/bin
% export XINDICE_HOME=/usr/local/xml-xindice-1.0
</pre>
            Next, you can configure Xindice.
            <p> <b>Configuring Xindice</b>
            <p> At this point, you must create a "collection" in which to store 
              your XML accounting data. A collection is a storage location where 
              XML files will be stored. By convention, I just use the name of 
              the cluster that the accounting data is for. Remember what you use 
              here for the collection name, because later you will need to edit 
              the Darkslide configuration file to reflect the name of the collection 
              you chose. Here is an example of creating a collection for the cluster 
              named "examplecluster"; replace "examplecluster" with the name for 
              your cluster:
            <p> 
            <pre>
% xindiceadmin add_collection -c /db/ -n examplecluster
Created : /db//examplecluster
</pre>
            <b>Configuring Darkslide</b>
            <p> You will also need to edit the Darkslide configuration file QueryEngineConfig.xml 
              in /usr/local/darkslide-1.0/etc/. The most important parameter is 
              ensuring the &lt;collection&gt; tag has the same collection name 
              you created in the "Configuring Xindice" step. In this case, you 
              would change it to "examplecluster". You may also want to edit the 
              title tag &lt;title&gt; that modifies the title of the report.
            <p> If you have any problems, try lowering the debugging tag &lt;debugging&gt; 
              from SEVERE to FINEST to get copious amounts of debugging information.
            <p> The Config file after editing for our purposes is shown in Figure 
              5.
            <p> <b>Loading XML Accounting Data</b>
            <p> You can use the <b>bulkloader</b> command included with the Accounting 
              Toolkit to load all the XML files into the Xindice collection you 
              created. For example, if all your XML data was converted with pbstoxml 
              into the directory /usr/spool/PBS/server_priv/accounting/xml/, you 
              would type this command:
            <p> 
            <pre>
% bulkloader --directory=/usr/spool/PBS/server_priv/accounting/xml/
Document /usr/spool/PBS/server_priv/accounting/xml/20030501 inserted
Document /usr/spool/PBS/server_priv/accounting/xml/20030502 inserted
Document /usr/spool/PBS/server_priv/accounting/xml/20030503 inserted
Document /usr/spool/PBS/server_priv/accounting/xml/20030504 inserted
Document /usr/spool/PBS/server_priv/accounting/xml/20030505 inserted
</pre>
            To verify the documents were loaded properly, use the following Xindice 
            command to query the files in the collection named "examplecluster":
            <p> 
            <pre>
% xindiceadmin ld -c /db/examplecluster
</pre>
            The filenames that were just loaded into the collection should be 
            listed as output.
            <p> <b>Generating the Report</b>
            <p> It's finally time to produce some reports. To generate a report 
              from 4-10-2003 through 04-29-2003 and save the report in a file 
              called /tmp/test.pdf, type the following command:
            <p> 
            <pre>
/usr/local/darkslide-1.00/bin/reportgenerator \
  --startdate=04-10-2003 --enddate=04-29-2003 --filename=/tmp/test.pdf
</pre>
            You can now use your favorite PDF viewer to view the report.
            <p> <b>Daily Updates</b>
            <p> To load the daily XML accounting data you converted with pbstoxml 
              into Xindice, simply create a daily cron job. The cron job should 
              load the XML document into Xindice using the Xindice command here:
            <p> 
            <pre>
xindice add_document -c /db/examplemachine -f \
  /usr/spool/PBS/server_priv/accounting/xml/filename -n filename
</pre>
            where the filename is the name of the accounting file, such as 20030523.
            <p> <b>Conclusion</b>
            <p> Although there is certainly a bit of a learning curve to XML technologies 
              in the beginning, the time invested in learning them pays back dividends 
              in the long run. Leveraging tools provided in the PBS Accounting 
              Toolkit gives you the power to visualize accounting information 
              quickly and easily, harnessing the power of XML tools and technologies 
              to give you the decision-making information you need.
            <p> <b>References</b>
            <p> PBS Accounting Toolkit -- <b>http://pbsaccounting.sourceforge.net</b>
            <p> OpenPBS -- <b>http://www.openpbs.org</b>
            <p> Xindice -- <b>http://xml.apache.org/xindice</b>
            <p> XML tutorials -- <b>http://www.w3schools.com</b>
            <p> <i>Rodney Mach is President of Fathom5 Consulting (<b>http://www.fathom5consulting.com</b>), 
              a technology firm specializing in providing fast affordable custom 
              software solutions. He can be reached at: <b>rmach@fathom5consulting.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
