<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i09: Listing 6 rcndupdt script</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a3.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a3_l2b.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a3_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a3_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a3_l5.htm">Listing 5</a></span></td>
		<td><span class="navbarLink">Listing 6</span></td>
		<td><a href="../../../../source/SA/2003/sep2003.tar"><b class=codeListing>sep2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 6 </b><i>rcndupdt script </i></h1>
            <p> 
            <pre>#!/usr/bin/perl
###############################################################
######## Name: rcndupd
########
######## Purpose: To update /appscripts on all nodes from /u/shared/appscripts
######## For runlevel and rccfg checks
########
######## Author: BJM 5/29/02
######## BJM 5/31/02 Added mk cp of key in /tmp
###############################################################
use strict;
### Globals ###########
### Config file Parms
my $gscripts; my $lscripts; my $rclog; my $stlink; my $stplink; my $secaccess;
### Go read config file and parms
read_cfg();
my $ldir="$lscripts/" ;
my $gdir="$gscripts/" ;
#########################################
### Go read config file and parms
my @flist=(); my %startlst=(); my @tmp=();
### Globals ###########
################################# MAIN -------
mklst();
cpfiles();
###############################################################
sub cpfiles {
#local var
my $key; my $lstamp; my $gstamp;my $mtime; my $ctime;
my $lfile; my $gfile; my $comm; my $tlfile;
print " Starting Copy function for Local Runlevel scripts \n";
foreach $key ( sort keys %startlst) {
$lfile="$ldir$key";
$gfile="$gdir$startlst{$key}";
#print "-$lfile- and -$gfile- \:File names \n";
$mtime = (stat $lfile)[9]; $lstamp=$mtime;
$mtime = (stat $gfile)[9]; $gstamp=$mtime;
if ($gstamp &gt; $lstamp) {
print "\tGlobal is newer Gtime\=$gstamp
Ltime\=$lstamp\n";
print " \t\t$key \-\&gt;$startlst{$key} \n";
$tlfile="/tmp/$key.sav" ;
$comm="cp -p $lfile $tlfile ";
system("$comm");
$comm="cp -p $gfile $lfile";
system("$comm");
print "\t\t\t Copying \-\-$comm \n" ;
} else { print "\tGlobal and Local in sync for $lfile \n"; }
$gstamp=0; $lstamp=0;
}
print " Ending Copy function for Local Runlevel scripts \n";
}
###############################################################
sub mklst {
#local var
my $key; my $comm; my $gname;
# make hash and file list
$comm="ls $ldir | grep -E \"^S\"" ;
open(fin,"$comm |");
while (&lt;fin&gt;) {
chomp();
push(@flist,$_);
@tmp=split(/\./,$_);
shift(@tmp);
$gname=join("\.",@tmp);
$startlst{$_}="$gname";
}
print " Starting list of Local Runlevel Scripts \n";
foreach $key ( sort keys %startlst) {
print " \t\t $key \-\&gt;$startlst{$key} \n";
}
print " Ending List list of Local Runlevel Scripts \n\n";
}
###############################################################
sub read_cfg {
#Global variables
#my $gscripts; my $lscripts; my $stlink; my $stplink; \
my $rclog;my $secaccess;
##########################Local Vars
my $match="gscripts lscripts stlink stplink rclog"; \
## required parm list
my @mlist=split(" ",$match);
my @line; my %rparm; my $key; my $parm;
my $config_file="/etc/rccfg.config";
###########################################3
open(fin,"cat $config_file \| grep -vE \"^\\#\" |") || die \
" Config file $config_file is not present -- \n";
## Read config into hash
while (&lt;fin&gt;) {
chomp;
if ((/[a-z]/i)) { # Allow for blanks
@line=split(/ /);
if ($match =~/$line[0]/) {
$rparm{$line[0]}=$line[1];
}
}
}
close(fin);
####Setting Parms
for $key (keys %rparm) {
#print " $key -&gt; $rparm{$key} \n";
if ($key eq "gscripts") {$gscripts=$rparm{$key}; }
elsif ($key eq "lscripts") {$lscripts=$rparm{$key}; }
elsif ($key eq "secaccess") {$secaccess=$rparm{$key}; }
elsif ($key eq "stlink") {$stlink=$rparm{$key}; }
elsif ($key eq "stplink") {$stplink=$rparm{$key}; }
elsif ($key eq "rclog") {$rclog=$rparm{$key}; }
else { print " Invalid parm in config file $key ignored \n"; }
}
#####checking for all config variables
foreach $parm (@mlist) {
if ($rparm{$parm} =~/[a-z]/i) {
#print " $parm -&gt; $rparm{$parm} is valid \n ";
} else { die "ERROR $parm is not valid and is required \
in rccfg.config file ERROR";}
}
}
### end sub read_cfg
########################################################################</pre>
        </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
