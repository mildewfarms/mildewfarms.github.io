<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i09: I &quot;new&quot; It -- A Generator for New Shell Script Templates</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/sep2003.tar"><b class=codeListing>sep2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a9.gif" width="200" height="167" align="right">I 
              "new" It -- A Generator for New Shell Script Templates</b></h1>
            <p> <i>Joseph Pietras</i>
            <p> I knew it! Just when everything seems to be going okay, something 
              else breaks. It seems like the life of a Unix systems administrator, 
              when not rebuilding computers, fixing the network, and putting out 
              fires, is spent writing scripts to make something work. In this 
              article, I'll describe "new", the script I use to generate a script 
              template.
            <p> Experience has shown that a large portion of script writing is 
              repetitive. Minimally, a shell needs to read the command-line options 
              do the work and exit cleanly. Consequently, I find that I write 
              the "template" part over and over. And I have to maintain multiple 
              templates because companies vary in the kind of scripts that they 
              use. Most of the companies for which I consult prefer scripts to 
              be written in Bourne shell (/bin/sh) since it is (in theory) more 
              portable. However, I prefer to write in Korn shell, because it has 
              so many nice language extensions, not to mention the speed improvement. 
              And then there's bash -- lots of companies are using it more and 
              more because of Linux. Of course, some sys admins require C-shell 
              (or TC-shell) scripts.
            <p> So, naturally, I evolved my templates for writing scripts into 
              a script. I wrote a shell script that writes a shell script. I guess 
              it's the academic in me: I love recursion. My script, "new", outputs 
              any one of the five templates I was maintaining -- the first versions 
              of "new" simply used /bin/cat, but I couldn't leave it at that. 
              After many iterations, I had a script that was well over 2000 lines.
            <p> Eventually, I had to break up the script because, well, the script 
              generator, "new", would generate a script that, when run, would 
              generate a script that, when run, would generate a script, that... 
              Anyway, I finally divided "new" into three scripts named "new", 
              "workctl", and "working". Now it's much easier to explain. In this 
              article, I will describe "new", and explain how to use it. I will 
              also detail the "workctl" and "working" scripts.
            <p> The "new" script will generate a template script using any of 
              these shells:
            <p> 
            <p> 
            <ul>
              <li> Bourne shell (/bin/sh) 
              <li> Korn shell (/bin/ksh) 
              <li> Bash shell (/bin/bash) 
              <li> C-shell (/bin/csh) 
              <li> TC-shell (/bin/tcsh)
            </ul>
            <p> Regardless of the shell, the template script performs these steps:
            <p> 
            <p> 1. Creates a variable NAME and dynamically binds it with the name 
              of the template script. If the name of the template script is changed, 
              the NAME variable automatically reflects the change.
            <p> 2. Examines the environment variable ECHO. If the ${ECHO} is set 
              to any of the values true/yes/on (case insensitive), then the script 
              turns on debugging with "set -x" (set echo in the C-shell and TC-shell).
            <p> 3. Creates a USAGE variable for I/O from the template shell. When 
              you run the template shell with zero command-line arguments, the 
              USAGE variable is printed to the screen.
            <p> 4. Creates a set of uniquely named temporary files to be used 
              by the template as needed. These can be used to hold sed scripts, 
              awk scripts, temporary edits, etc.
            <p> 5. Creates the template shell code needed to clean up temporary 
              files under common circumstances (i.e., when the template shell 
              receives an interrupt (SIGINT), hangup (SIGHUP), or terminate (SIGTERM) 
              signal). These can be easily extended. For C-shell and TC-shell, 
              an "onintr" logic is put into the template to handle the temporary 
              file cleanup chores.
            <p> 6. Generates code so that the template shell will accept the "-" 
              option or the "--" option to override usage, thereby allowing the 
              programmer of the template shell to have options that enable the 
              user of the template shell to "take all the defaults" of the template 
              shell.
            <p> 7. Prompts for options that the template shell program will accept.
            <p> 
            <p> The "new" script can create a template script with either "getopts" 
              or "gnu" style command-line parser logic. Alternatively, "new" can 
              also be used to create a template script that does not have command-line 
              parser logic. So, there are essentially three ways to use "new" 
              to create a new template script:
            <p> 
            <p> 
            <ul>
              <li> With "gnu" style command-line parsing logic 
              <li> With "getopts" style command-line parsing logic 
              <li> Without command-line parsing logic
            </ul>
            <p> Basically, the difference between "getopts" and "gnu" style parsing 
              is that the traditional Unix "getopts" style only allows options 
              to be one character long, while the (so-called) "gnu" style parsing 
              allows each one-character command-line option have a "long format" 
              counterpart. The long format options are often easier to remember 
              and are very useful when used within scripts. Even if you leave 
              a script for a year or more, when you come back to editing it again, 
              you will remember what the commands in the script are doing because 
              of the long format options.
            <p> To make use of this feature, GNU style parsing logic is used by 
              "new". Consequently, users of "new" can specify command-line options 
              in either long format or short format.
            <p> These are the options that control the choice of parser logic 
              that "new" outputs to the template script:
            <p> 
            <p> <b>--gnustyle | -g</b> Enable gnu style options<br>
              <b>--nognustyle | -n</b> Disable gnu style options<br>
              <b>--getopts | -G</b> Enable getopts style options<br>
              <b>--nogetopts | -N</b> Disable getopts style options<br>
              <b>--omit | -o</b> Alias for <b>--nognustyle</b> and <b>--nogetopts</b>
            <p> 
            <p> When <b>--omit</b> has been chosen, the script writer is on his 
              own and will have to edit the template and write any command-line 
              parsing desired, otherwise "new" will prompt the user to enter the 
              options that the template script should recognize. Prompting is 
              terminated by entering an empty line or EOF (usually CTRL-D).
            <p> If "gnu" style is in effect, then "new" prompts the user twice 
              -- once for the long format and once for the short format of the 
              option. The short format defaults to the first character of the 
              long format, just as you would expect.
            <p> Now, when "gnu" style options are used there is a subtle issue 
              with regard to white space and the short format version of an option. 
              Here is what I mean -- if the option <b>--output=file</b> is valid 
              and <b>-o</b> is the short format version of this option, then <b>-ofile</b> 
              is valid. But, should <b>-o file</b> also be valid?
            <p> Some programmers argue that it should, and others argue that it 
              shouldn't. It's hard to please the customer with this kind of thing 
              going on. So, I solved the problem with more software. That's why 
              the "new" script has these command-line options:
            <p> 
            <pre>
--threevariants | -3
--twovariants   | -2
</pre>
            The template created by "new" will or won't accept the <b>-o file</b> 
            variant of the "gnu" style short format version, depending on which 
            of the above options are in effect. Other options to "new" are:
            <p> 
            <pre>
--plugin        | -P
--noplugin      | -I
</pre>
            These options control whether the template script will output "SMDP_*" 
            variables. They are used only if the script template being generated 
            is going to be used with OpenSysMon (OSM) Meta Monitoring Software. 
            If you are interested in plug-ins for OSM, check out the Web site 
            (<b>http://www.opensysmon.com</b>).
            <p> The <b>--date(-d)</b> and <b>--nodate(-D)</b> options control 
              whether "new" puts a date stamp into the template that is output.
            <p> Previously, I mentioned that "new" is one of three scripts in 
              this set -- the other two being "workctl" and "working".
            <p> These two companion scripts exist to facilitate solving the long 
              response time problem. Shell script software typically runs fast, 
              however some shell scripts can be quite complicated and require 
              a very long execution time. And, when they do, they can leave the 
              user hanging. Any shell script that will have a long response time 
              can employ the "working" shell script to overcome this long response 
              time problem.
            <p> To effectively control the "working" script from any other script 
              (including script languages that do not implement functions and 
              traps), the programmer can use "workctl". So, depending upon the 
              programmer's choice of a scripting language "workctl" may or may 
              not be needed. However, from within "new", regardless of the kind 
              of template script being generated, I consistently output calls 
              to "workctl". I do this because it makes "new" easier to write and 
              makes the the generated template easier to read.
            <p> The template generated by "new" can automatically call "workctl", 
              which calls "working", in order to produce a template script that 
              is working as soon as it is created. By that, I mean it works immediately 
              and controls the "working" script in such a way that you, the programmer, 
              see what the "working" script is doing.
            <p> Options that control these scripts are:
            <p> 
            <p> <b>--work | -w</b> Enables workctl in the template<br>
              <b>--nowork | -W</b> Disables workctrl 
            <p> For new users of "new", it is recommended that "--work" be used. 
              This makes the whole process easier and facilitates learning how 
              to use "new". Naturally, you will have to download the "working" 
              software also.
            <p> For example, enter these commands to build a working, advanced 
              script:
            <p> 
            <pre>
#edinburghBASH: ./new --work --korn --omit &gt; template
#edinburghBASH: chmod +x ./template
#edinburghBASH: ./template -
</pre>
            This example assumes that you already have "workctl" and "working" 
            in your PATH. It also introduces the last two sets of options I will 
            discuss. The type of shell created by "new" is controlled by these 
            options:
            <p> 
            <p> <b>--bourne | -B</b> Produce a /bin/sh template<br>
              <b>--korn | -k</b> Produce a /bin/ksh template<br>
              <b>--bash | -b</b> Produce a /bin/bash template<br>
              <b>--csh | -c</b> Produce a /bin/csh template<br>
              <b>--tcsh | -t</b> Produce a /bin/tcsh template<br>
              <b>--shell | -s</b> Shell options are aliases for <b>--bourne</b> 
              and <b>-B</b>
            <p> 
            <p> The last options have to do with controlling where the output 
              of "new" goes. As this example shows, when a script template is 
              generated with "new", the template will be sent to standard output, 
              which typically is redirected. Or, if the command-line option <b>--output=&lt;file&gt;</b> 
              is given, the template is written to <b>&lt;file&gt;</b>.
            <p> Installation of "new" (as well as "workctl" and "working") is 
              trivial; you simply put the scripts in your PATH. Otherwise, they 
              are fully functional and do not require any configuration. However, 
              if you want to change any of the defaults for the scripts, you can 
              edit the configuration section and simply toggle the default from 
              TRUE to FALSE. The "new" script will then automatically adapt itself, 
              including its usage line, to the new defaults.
            <p> One caveat -- all three of these scripts must know the numeric 
              values of SIGUSR1 and SIGUSR2. Additionally, "new" needs to know 
              the values of SIGHUP, SIGINT, and SIGTERM. All of these numeric 
              values can be obtained with <b>kill -l</b>, or you can look in /usr/include/sys/signal.h.
            <p> The "new" software is available for download from the Sys Admin 
              Web site at: <b>http://www.sysadminmag.com</b> or from <b>ftp://ftp.opensysmon.com/pub/new/</b> 
              directory. There is a zip file along with the individual files. 
              Note that <b>http://www.opensysmon.com</b> is a shell script archive 
              site that also contains an open source system monitoring and network 
              monitoring software package. Many platforms are supplied already 
              compiled.
            <p> <i>Joseph Pietras is a Sr. UNIX systems programmer living and 
              working in sunny San Diego, California. He holds a MS in Computer 
              Science and loves all things UNIX! When he's not writing code or 
              at the beach riding the waves he can be reached at <b>jpietras@ChironComputing.Com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
