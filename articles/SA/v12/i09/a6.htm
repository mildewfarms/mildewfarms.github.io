<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i09: Embedding man Pages in Shell Scripts with kshdoc</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2003/sep2003.tar"><b class=codeListing>sep2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a6.gif" width="200" height="167" align="right">Embedding 
              man Pages in Shell Scripts with kshdoc</b></h1>
            <p> <i>Michael Wang and Ed Schaefer</i>
            <p> Generally, large programs (such as Solaris, Oracle, Perl, and 
              ksh) possess big documentation -- books, technical papers, man pages, 
              etc. However, the shell scripts that we write every day usually 
              aren't that big, and it's overhead to maintain separate documentation. 
              Furthermore, shell programmers and administrators are notorious 
              for not providing documentation. Why not simplify the task? One 
              method is to maintain online documentation within the code so that 
              when code does change, documentation updates exist in only one place. 
              This article presents kshdoc (Listing 1), a Korn shell function 
              that allows printing documentation embedded within a Korn shell 
              script.
            <p> Perl programmers conveniently embed documentation in Perl scripts 
              using the POD (plain old documentation) format. The kshdoc function 
              uses the perldoc utility to process POD-formatted documentation 
              existing in Korn shell scripts. This article briefly describes a 
              modified POD format, kshdoc usage using the perldoc and pod2man 
              utilities, and a thorough kshdoc code review.
            <p> <b>POD Format -- ksh Style</b>
            <p> The documentation is entered in scripts using the POD format, 
              preceding each line with "## ", where the space can be omitted for 
              empty lines. The "## =" signifies the beginning of the POD.
            <p> kshdoc supports splitting documentation, so you can include comments 
              and code in between ksh-style POD format.
            <p> Generally, Unix man pages consist of highlighted NAME, SYNOPSIS, 
              and DESCRIPTION sections:
            <p> 
            <pre>
## =head1 NAME
##
## B&lt;kshdocexample.ss&gt; - test the I&lt;kshdoc function&gt;
##
#* where B&lt;&gt; will embolden text, and I&lt;&gt; will italicize or underline
#* depending on the terminal.
#*
#* The above explains not only what B&lt;&gt; and I&lt;&gt; are, but also shows
#* how to use comments inside ksh style POD.  Lines not starting with "##"
#* are not part of modified POD, and, therefore, will not be processed.
#*
## =head1 SYNOPSIS
## ...
## =head1 DESCRIPTION
## ...
</pre>
            For more information on POD directives, see the man pages for perldoc, 
            pod2man, perlsyn, or Chapter 26 of <i>Programming Perl</i> (by Larry 
            Wall, Tom Christiansen, and Jon Orwant, O'Reilly &amp; Associates).
            <p> Using "##", we differentiate ksh-style POD from normal shell comments 
              while also maintaining 100% legal ksh code because ksh-style POD 
              are still comment lines.
            <p> At run-time, anything after the exit command is not interpreted 
              by the shell, so it is possible to include "bare" POD inside ksh 
              scripts. However, this approach confuses the shell parser. For example, 
              the two-line script:
            <p> 
            <pre>
exit 0
)
</pre>
            produces the following error when parsed with "ksh -n", which checks 
            the syntax but does not execute:
            <p> 
            <pre>
syntax error at line 2: ')' unexpected
</pre>
            That is why we insist on 100% legal ksh syntax.
            <p> <b>Executing kshdoc</b>
            <p> Execute the kshdoc function either from a shell script or from 
              the command line:
            <p> 
            <pre>
kshdoc  help=y|ps|pdf  [file=...]  [ path=... ]
</pre>
            or
            <p> 
            <pre>
kshdoc  show=y  [file=...]  [ path=... ]
</pre>
            Obviously, kshdoc may be embedded in any ksh shell script, but if 
            it's called from the command line or used across the enterprise, it's 
            best to autoload the function (i.e., load when it is first referenced).
            <p> The Korn shell automatically loads a function the first time it's 
              called, provided the function resides in a directory in the shell 
              variable FPATH (the format of FPATH is the same as PATH), and the 
              command of the same name cannot be found, or the function is typeset 
              with the -u option:
            <p> 
            <pre>
typeset -fu kshdoc
</pre>
            <b>Executing from the Command Line</b>
            <p> From the command line, process the POD of kshdoc itself when kshdoc 
              is in FPATH, or when kshdoc is in the current directory:
            <p> 
            <pre>
kshdoc file=kshdoc
</pre>
            or simply
            <p> 
            <pre>
kshdoc
</pre>
            or, if kshdoc is not autoloaded from FPATH:
            <p> 
            <pre>
kshdoc file=/path/to/kshdoc
</pre>
            Process the POD of the foo file in current directory, or foo program 
            in PATH, or foo function in FPATH:
            <p> 
            <pre>
kshdoc file=foo
</pre>
            Except for FPATH, which is ksh-specific, foo is not limited to a ksh 
            script. It can be any file, or command with embedded modified POD.
            <p> Process the POD of the foo script located in /some/where:
            <p> 
            <pre>
kshdoc file=/path/to/foo
</pre>
            In the above examples, the default "help=y" is omitted. "help=y" displays 
            a man page, "help=ps" generates a Postscript document, and "help=pdf" 
            generates a PDF document.
            <p> <b>Executing from a Script</b>
            <p> The kshdoctest.ss (Listing 2) is a typical example of calling 
              kshdoc from a script. Executing:
            <p> 
            <pre>
kshdoctest.ss help=y
</pre>
            outputs the man page converted from POD to standard output.
            <p> The following lines from within the test script:
            <p> 
            <pre>
my_getopts "$@"
[[ $HELP = Y ]] &amp;&amp; { kshdoc file=$0; exit 0; }
</pre>
            sets <b>HELP="Y"</b>, calls the kshdoc to process the POD, and exits 
            the script. (For more on the my_getopts function, which evaluates 
            the command line, see: <b>http://www.unixreview.com/documents/s=1344/uni1042138723500/</b>.)
            <p> The argument <b>file=$0</b> instructs kshdoc to search the present 
              file for POD. Unfortunately, the argument is necessary since <b>$0</b> 
              inside a function in ksh93 is the function name, instead of the 
              calling program name. Passing the program name works in both ksh88 
              and ksh93.
            <p> Execute:
            <p> 
            <pre>
kshdoctest.ss
</pre>
            without the <b>help=y</b> command-line argument, skip printing the 
            documentation, and continue normal program flow. Of course, production 
            scripts may have other command-line arguments.
            <p> You don't need to use my_getopts. Any command-line argument processing 
              sensing that help should be printed can be used:
            <p> 
            <pre>
[[ $1 = "-h" ]] &amp;&amp; { kshdoc file=$0; exit 0; }
</pre>
            The above command executes kshdoc if argument 1 equals "-h".
            <p> So far, the examples have all displayed man pages. Sometimes you 
              want to generate PS or PDF files for publishing. All you need is 
              to tell the program what you want to do, pass it to kshdoc function, 
              and your wish will be granted.
            <p> Here is an example:
            <p> 
            <pre>
[[ $HELP = @(Y|PS|PDF) ]] &amp;&amp; { kshdoc file=$0 help=$HELP; exit 0; }
</pre>
            <b>Retrieving Clean Source</b>
            <p> The <b>show=y</b> argument of kshdoc prints the function itself 
              to standard output suitable to be statically included in a shell 
              program. The usage is:
            <p> If kshdoc is autoloaded from FPATH or from the current directory:
            <p> 
            <pre>
kshdoc show=y file=kshdoc
</pre>
            or simply:
            <p> 
            <pre>
kshdoc show=y
</pre>
            If kshdoc is not autoloaded:
            <p> 
            <pre>
kshdoc show=y file=/path/to/kshdoc
</pre>
            You can embed the kshdoc source from within the vi editor by executing 
            this command:
            <p> 
            <pre>
:r!kshdoc show=y [file=/path/to/kshdoc]
</pre>
            The <b>show=y</b> option displays all code of the function not ending 
            with "##". In the above example, the new copy of kshdoc disables <b>show</b> 
            since that capability within the original code ends with "##", generating 
            leaner code. The <b>show=y</b> argument also implies <b>help=n</b>, 
            which disables POD processing.
            <p> <b>Utilities Used and Passing the Path</b>
            <p> kshdoc executes correctly only if the function can find the perldoc 
              and pod2man utilities, and Unix commands <b>sed</b>, <b>mkdir</b>, 
              <b>rm</b>. groff is needed for creating Postcript documents with 
              the <b>help=ps</b> option, and ps2pdf is needed for converting Postscript 
              to PDF documents when specifying the <b>help=pdf</b> option.
            <p> perldoc and pod2man are part of Perl package. groff is a GNU utility, 
              while ps2pdf is part of the Ghostcript package.
            <p> The PATH defined inside the function defaults to the PATH of the 
              calling program. If the calling program -- login shell or the shell 
              program -- includes perldoc in its PATH, the <b>path=</b> option 
              is not required. You can choose to create a different PATH and pass 
              it to kshdoc via the <b>path=...</b> option.
            <p> <b>kshdoc </b>--<b> Code Review</b>
            <p> The Korn shell supports two types of functions:
            <p> 
            <p> 
            <ul>
              <li> POSIX style -- <b>name() {}</b> 
              <li> ksh style -- <b>function name {}</b>
            </ul>
            <p> kshdoc (Listing 1) is a ksh-style function since it allows defining 
              local variables with typeset. Local variables (lines 2-5) inside 
              the function, and variables of the same name outside, do not affect 
              each other, making the function modular and safe to include in other 
              programs.
            <p> In addition to typeset, <b>help</b> and <b>show</b> are defined 
              as upper case, making the evaluation of their values easier. If 
              the help argument isn't passed, it defaults to "Y" (line 7).
            <p> kshdoc uses a localized PATH, so a different PATH may be used 
              inside the function and not affect the rest of the program.
            <p> In line 9, <b>$PATH</b> is expanded first. If "path" is not specified, 
              PATH is assigned the value of $PATH defined outside of the function. 
              The <b>path=...</b> option provides the function a way to override 
              this default behavior. PATH is exported since perldoc needs PATH 
              to locate pod2man in line 43.
            <p> On Solaris, the perldoc and other Perl binaries are installed 
              in a less well-known place -- /usr/perl5/bin. Unfortunately, many 
              users do not have this location in their PATH. Test whether perl2doc 
              is in the current PATH. If it is, do nothing. If it's not, test 
              whether perldoc is in /usr/perl5/bin. If it is, append /usr/perl5/bin 
              to PATH; if it is not, return an error. (See lines 11-17.)
            <p> If no <b>file=...</b> option is specified, the file defaults to 
              <b>kshdoc</b>. "kshdoc" is spelled out for portability. In ksh88, 
              the value of "$0" inside a function is the calling program name, 
              and in ksh93, it is the function name (line 19).
            <p> Lines 21-32 tries to locate the file specified via the <b>file=...</b> 
              option. If <b> [[ -r $file ]]</b> is not locatable, check to see 
              whether it exists as an executable in PATH. If it still isn't locatable, 
              see whether it exists as a function in $FPATH (lines 24-26). Finally, 
              if file is still not located, error out (lines 28 and 29).
            <p> Since $FPATH is colon-separated, set <b>IFS=:</b> to check each 
              directory within FPATH. Since IFS is redefined in a subshell, the 
              parent isn't affected.
            <p> <b>show=y</b> generates the function source. Since <b>show=y</b> 
              and <b>help=...</b> are mutually exclusive, we need not specify 
              <b>show=y </b>and <b>help=n</b> (line 35).
            <p> The heart of the function (lines 37-47) involves processing the 
              modified POD with the perldoc or pod2man utilities. Since not all 
              versions of perldoc and pod2man support standard input, convert 
              the commented POD to native POD in a temporary file.
            <p> Since perldoc displays the program name, use the base name of 
              the file as the POD file name with a "pod" extension. Set the temp 
              directory name to the basename of the POD file name, a dot, the 
              process id, another dot, and a RANDOM number. The trap (line 40) 
              removes the directory when the function exits.
            <p> In line 41, the <b>sed</b> starts processing the POD from the 
              line beginning with <b>## =</b>. For lines beginning with <b>##</b>, 
              strip the comment characters, followed by 0 or 1 space, and redirect 
              the resulting lines to a file.
            <p> At this point, what happens depends on what you want to do:
            <p> 
            <p> 
            <ul>
              <li> Specify <b>help=Y</b>, and perldoc processes the POD sending 
                the man pages to the screen. 
              <li> Specify <b>help=PS</b> and groff converts the POD to PostScript. 
              <li> Specify <b>help=PDF</b>, and groff/ps2pdf converts the POD 
                to PDF.
            </ul>
            <p> <b>show=y</b> prints out the entire function, except lines ending 
              with <b>## </b>(lines 49-51). At the end of function, return rather 
              than exit, allows the calling program to continue further processing 
              (line 53).
            <p> Future version of kshdoc, if any, can be found at:
            <p> 
            <pre>
http://www.unixlabplus.com/unix-prog/kshdoc
</pre>
            <b>Conclusion</b>
            <p> In conclusion, we've presented the Korn Shell function kshdoc, 
              which uses Perl utilities to generate professional-looking man pages, 
              Postscript, and PDF documents. The "commented POD format" is suitable 
              for any ksh script, other source file, or configuration file that 
              uses "#" for a comment.
            <p> <b>References</b>
            <p> Wall, Larry, Tom Christiansen, and Jon Orwant. 2000. <i>Programming 
              Perl</i>. Sebastopol, CA: O'Reilly &amp; Associates, Inc.
            <p> Bolsky, Morris, David Korn. 1995. <i>The New Kornshell Command 
              and Programming Language</i>. Upper Saddle River, NJ: Prentice Hall 
              PTR.
            <p> <i>Michael Wang earned Master Degrees in Physics (Peking) and 
              Statistics (Columbia). Currently, he is applying his knowledge to 
              Unix systems administration, database management, and programming. 
              He can be contacted at: <b>xw73@columbia.edu</b>.</i>
            <p> <i>Ed Schaefer is a frequent contributor to Sys Admin. He is a 
              Software Developer and DBA for Intel's Factory Integrated Information 
              Systems, FIIS, in Aloha, OR. Ed also hosts the monthly UnixReview.com 
              Shell Corner column. He can be contacted at: <b>shellcorner@comcast.net</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
