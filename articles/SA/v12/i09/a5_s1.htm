<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i09: Detecting Application Level Rootkits</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a5.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a5_l1.htm">Listing 1</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink">Sidebar 1</span></td>
		<td><span class="navbarLink"><a href="a5_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/2003/sep2003.tar"><b class=codeListing>sep2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Detecting Application Level Rootkits</b></h1>
            <p> The best method for detecting application-based rootkits is ongoing 
              use of Tripwire and other checksum utilities. On initial install, 
              Tripwire creates a database of all sensitive files including their 
              size, time, dates, and checksum. This database is periodically checked 
              against the current system on a schedule that you determine. Tripwire 
              will alert you when any anomalies occur between the database and 
              your current system. Tripwire is able to detect changes in the binaries 
              because it essentially contains its own copy of "trusted" systems 
              administration tools. This will not work against kernel-based rootkits 
              because Tripwire calls still pass through the system call table 
              and kernel for processing.
            <p> If you did not implement Tripwire when you first installed your 
              operating system (before it was placed online), then your best detection 
              method is to place "trusted" copies of utilities such as "ps", "ls", 
              and "netstat" on a floppy or CD and use them to check the integrity 
              of your system.
            <p> Manual file inspections can also provide insight into the health 
              of your system. A good method is to execute "strings" on any suspicious 
              file and look for unusual characteristics. For instances, a strings 
              of "ps" once t0rn is installed contains: /usr/src/.puta/.1proc (the 
              well known "hidden" directory for this rootkit). A similar example 
              is demonstrated in with a strings of netstat.
            <p> Clean copy of netstat:
            <p> 
            <pre>
/proc/net
No usable address families found.
%02X-
[NONE SET]
/proc/net/unix
unix
unspec
out of virtual memory
%d.%d.%d
Routing table for 'ddp' not yet supported.
</pre>
            T0rn trojaned copy of netstat:
            <p> 
            <pre>
/proc/net
No usable address families found.
%02X-
[NONE SET]
/proc/net/unix
unix
unspec
out of virtual memory
%d.%d.%d
Routing table for 'ddp' not yet supported.
/usr/src/.puta/.1addr
</pre>
            Strings of "nethide" distributed with Knark 2.4.3 contains "Have you 
            really loaded knark.o?!" Even after being "stripped", the backdoor 
            contains: dup2, socket, accept, bind, and listen (all indicators of 
            a program used to establish network connections).
            <p> In general, the first place to start looking for rootkits is the 
              "startup" scripts directory. This is where most rookits implant 
              themselves to ensure a presence. On Linux, this is located in /etc/rc.d/init.d. 
              Here you want to verify that only valid services are being started 
              on boot. Attackers typically add additional lines in existing scripts 
              or create new scripts all together. You should also examine /etc/rc.d/rc0.d 
              - rc6.d. Every single file in these directories should be a link 
              to a valid startup script in /etc/rc.d/init.d. If they are not, 
              then you have trouble.
            <p> On Solaris, the startup scripts directory is /etc/rcS.d - /etc/rc6.d. 
              Examine these directories just the same as you would on Linux.
            <p> Following inspection of startup scripts, it is proper to run checksums 
              of most files on the system. There are numerous utilities to aid 
              in the automation of checksum verification including: Tripwire, 
              RPM, sfpDB.
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
