<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i09: Listing 1 kshdoc</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a6.htm">Article</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2003/sep2003.tar"><b class=codeListing>sep2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 1 </b><i>kshdoc</i></h1>
            <p> 
            <pre># kshdoc  - ksh function for processing online documentation
# To autoload, place in directory pointed to by FPATH
 1  function kshdoc {
 2    typeset path file base tdir;
 3    typeset fdir                                                 ##
 4    typeset -u help
 5    typeset -u show                                              ##
 6  
 7    eval help=y "$@"
 8   
 9    typeset -x PATH=${path:-$PATH}
10   
11    whence perldoc &gt;/dev/null || {
12      [[ -x /usr/perl5/bin/perldoc ]] &amp;&amp; PATH=$PATH:/usr/perl5/bin
13      whence perldoc &gt;/dev/null || {
14        print "You need to have perldoc in your PATH."
15        return 1
16      }
17    }
18   
19    : ${file:=kshdoc}                                            ##
20                                                                 ##
21    [[ -r $file ]] || {                                          ##
22      whence $file &gt;/dev/null &amp;&amp; file=$(whence $file)            ##
23      [[ -r $file ]] || {                                        ##
24        for fdir in $(IFS=:; print $FPATH); do                   ##
25          [[ -r $fdir/$file ]] &amp;&amp; { file="$fdir/$file"; break; } ##
26        done                                                     ##
27        [[ -r $file ]] || {                                      ##
28          print "There is no POD to process. Use file=... option." ##
29          return 2                                               ##
30        }                                                        ##
31      }                                                          ##
32    }                                                            ##
33                                                                 ##
35    [[ $show = "Y" ]] &amp;&amp; help="N"                                ##
36  
37    [[ $help = @(Y|PS|PDF) ]] &amp;&amp; {
38      base=${file##*/}; base=${base%.@(ksh|sh|ss)}
39      tdir=/tmp/$base.$$.$RANDOM
40      mkdir $tdir &amp;&amp; trap "rm -rf $tdir" EXIT
41      sed -n '/^## =/,${/^##/s/^## \{0,1\}//p;}' $file &gt; $tdir/$base.pod
42      case $help in
43        Y)   perldoc $tdir/$base.pod;;
44        PS)  pod2man $tdir/$base.pod | groff -man &gt; $base.ps;;
45        PDF) pod2man $tdir/$base.pod | groff -man | ps2pdf - $base.pdf;;
46      esac
47    }
48  
49    [[ $show = Y ]] &amp;&amp; {                                         ##
50      [[ -r $file ]] &amp;&amp; sed -n "/^function kshdoc/,/^}/{/##$/d;p;}" $file ##
51    }                                                            ##
52                                                                 ##
53    return 0
54  }
## =head1 NAME
##
## B&lt;kshdoc&gt; - ksh function for processing online documentation
##
## =head1 SYNOPSIS
##
## [FPATH=/path/to/kshdoc]
##
## B&lt;kshdoc&gt; I&lt;help=y|ps|pdf&gt;|I&lt;show=y&gt; [I&lt;file=...&gt;] [I&lt;path=...&gt;]
##
## =head1 DESCRIPTION
##
## Generally, large programs possess big documentation - with books, 
## technical papers, and separate MAN pages.  Examples include Solaris, 
## Oracle, Perl, ksh, etc.   However, the shell scripts that we write 
## every day to solve specific problems usually aren't that big, and  
## it's overhead to maintain separate documentation.  In addition, 
## shell programmers and administrators are notorious for not 
## providing documentation.  
##
## Perl programmers conveniently embed documentation in Perl scripts 
## using the POD format, plain old documentation.  The kshdoc function 
## uses the perldoc utility to print POD formatted documentation.</pre>
        </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
