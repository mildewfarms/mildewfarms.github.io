<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i08: Enterprise Database Backup Check</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2003/aug2003.tar"><b class=codeListing>aug2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a1.gif" width="200" height="167" align="right">Enterprise 
              Database Backup Check</b></h1>
            <p> <i>Ed Schaefer</i>
            <p> If you administer a phalanx of enterprise, worldwide, distributed 
              databases, how can you verify remote server sites are performing 
              scheduled database backups or archives? How about executing a shell 
              script on a Unix client that accesses each remote database server, 
              checks how long it's been since the last backup completed, 
              and emails a warning to the proper administrators? This is child's 
              play if the backup start and stop times are stored in the database. 
              Also, it's simple enough if the backup statistics are generated 
              by a Unix executable -- just execute a remote shell, <b>remsh</b>, 
              and return the necessary data.
            <p> Unfortunately, for security reasons, many network firewalls no 
              longer allow executing the "r" commands -- <b>remsh</b> 
              (remote shell) or <b>rcp</b> (remote file copy) -- severely 
              limiting remote access. This article presents one method for avoiding 
              the "r" problem; however, the database vendor's access 
              utility must have remote server access, and the database stored 
              procedure language, SPL, must allow executing a subprogram.
            <p> My database is Informix, but to enhance portability, I hide database-specific 
              implementation details (such as the access utility) in shell variables. 
              (See my article "db_update: Controlling UNIX Enterprise Database 
              Releases" in <i>Sys Admin</i>, December 2002, <b>http://samag.com/documents/s=7732/sam0212c/</b>.)
            <p> <b>General Design</b>
            <p> On a single client server, I periodically execute the shell script, 
              buc_client.ss (Listing 1). For each remote server defined in a configuration 
              file, the client executes stored procedure, SP, sp_spawn_rem on 
              the remote database. The SP executes shell script, buc_server.ss 
              (Listing 2), on the remote server (see Figure 1).
            <p> The buc_server.ss script executes the subprogram oncheck, which 
              determines the last backup date and time. The buc_client.ss script 
              stores the last backup date-time and the current date-time in the 
              remote database, and returns control to the client that completes 
              the report processing. If the time since the last backup exceeds 
              the allowable, it sends a report to the administrators stored in 
              another configuration file.
            <p> Next, I will discuss selected issues of buc_client.ss and buc_client.ss:
            <p> <b>Buc_client.ss Design Logic</b>
            <p> For each server:
            <p> 
            <p> 
            <ul>
              <li> Determine the time to wait before reporting a backup required 
                error. 
              <li> Execute stored procedure sp_spawn_rem, which executes the buc_server.ss 
                script on the remote server. Pass a PRIMARY KEY to the remote 
                server to store the backup data in the database. 
              <li> After the remote server completes execution, using the PRIMARY 
                KEY, retrieve the data from the remote server via the database's 
                remote_values table containing the current and backup date-times. 
              <li> If a network or other connection error occurs, email the DBA 
                list, and continue to the next server. 
              <li> Using the PRIMARY KEY, delete the entry in the remote remote_values 
                table. 
              <li> Determine the elapsed time between the backup time and the 
                current system time. 
              <li> If the elapsed time is greater than the time to wait, report 
                to the administrator's mail list.
            </ul>
            <b>Buc_server.ss Design Logic</b>
            <p> On the remote server:
            <p> 
            <p> 
            <ul>
              <li> Execute the Informix oncheck utility, which determines the 
                backup date and time. 
              <li> Determine the current date and time. 
              <li> Save, by PRIMARY key, the backup date and time and the current 
                date and time in the remote_values table. 
              <li> Terminate the server script returning to the client.
            </ul>
            <b>Configuration Objects</b>
            <p> <b>config_data.file</b>
            <p> The config_data.file, located in the Informix user home directory, 
              contains the number of hours to wait before reporting that a backup 
              is required. The colon-delimited file structure is the variable 
              name, the number of hours to wait, and a comment, respectively:
            <p> 
            <pre>
hours_from_archive:18:number of hours to wait before reporting backup required
</pre>
            For administrator convenience, the wait parameter is in hours. The 
            script converts the hours to seconds since date arithmetic in the 
            shell is most easily performed from the Unix Epoch.
            <p> <b>buc_server_list.txt file</b>
            <p> The names of the servers to be accessed reside, one per line, 
              in the buc_server_list.txt file:
            <p> 
            <pre>
betty
doomsday
#babylon
</pre>
            Each database and server are accessed as such:
            <p> 
            <pre>
dbaccess testdb@betty
</pre>
            Any server commented out is ignored.
            <p> <b>buc_mail_list.txt file</b>
            <p> If a report is generated, it is mailx'ed to the administrators 
              listed, one per line, in the buc_mail_list.txt:
            <p> 
            <pre>
ed@schaefer.com
jwayne
#rrogers
</pre>
            Any administrator commented out is ignored.
            <p> <b>dba_mail_list.txt file</b>
            <p> Any network or database connection problems are mailx'ed 
              only to the administrators listed, one per line, in the dba_mail_list.txt:
            <p> 
            <pre>
ed@schaefer.com
#rmitchum
</pre>
            Again, any administrator commented out is ignored.
            <p> <b>Database Objects</b>
            <p> Executing the stored procedure sp_spawn_rem (Listing 3) allows 
              execution of the buc_server.ss script on the remote server. For 
              security purposes, I use a full path to the script to be executed:
            <p> 
            <pre>
EXECUTE PROCEDURE sp_spawn_rem("/home/eds/buc/buc_server.ss", "$rem_key");

remote_values table
</pre>
            Each remote server's database must contain the following table:
            <p> 
            <pre>
create table remote_values
  (
  remote_key char(20) not null,
  remote_values varchar(64),
  primary key(remote_key)
  );
</pre>
            This table is the coupling between the client and the server. After 
            the client initiates a start message, the server gathers the backup 
            statistics and stores it in the remote_values column.
            <p> The primary key maintains the coupling between the primary and 
              server process and is removed when the server process terminates. 
              The primary key not only is good database design, but also allows 
              other client/server scripts performing other functions to use this 
              table.
            <p> <b>Report Output</b>
            <p> Example data example from remote_values looks like:
            <p> 
            <pre>
2003-04-06 06:30:01  2003-04-06 16:57:21        
</pre>
            If the time to wait is exceeded, this is the generated report structure:
            <p> 
            <pre>
==== Backup Report for betty  ==== Sun Apr  6 16:57:21 PDT 2003
Backup Date: 2003-04-06 06:30:01 Current Date: 2003-04-06 16:57:21
number of hours since archive: 10.4 Sun Apr 6 16:57:21 PDT 2003
</pre>
            <b>Setting the Time Zone</b>
            <p> In both the client and server programs, I set the time zone, TZ:
            <p> 
            <pre>
export TZ=$(grep TZ= /etc/TIMEZONE|cut -d= -f2)
</pre>
            This may be Solaris 7 or database specific, but if the TZ isn't 
            set within the buc_server.ss script, the oncheck utility uses the 
            client's TZ -- an obvious error. An improperly set TZ in 
            a worldwide network configuration may be catastrophic.
            <p> <b>Cron Execution</b>
            <p> By design, the client script executes from cron. The following 
              example runs buc_client.ss hourly starting at midnight:
            <p> 
            <pre>
0 * * * * cd /home/eds/buc; [ -x ./buc_client.ss ] &amp;&amp; \
  ./buc_client.ss &gt; /dev/null 2&gt;&amp;1
  </pre>
            <b>Script Security</b>
            <p> A network design such as this is always a security risk. To minimize 
              problems such as a Trojan horse, I implement the following:
            <p> 
            <p> 
            <ul>
              <li> Only effective user Informix may execute either the client 
                or server script. 
              <li> The sp_spawn_rem stored procedure may execute only the buc_client.ss. 
              <li> External programs buc_client.ss and oncheck execute with a 
                full path.
            </ul>
            <b>Conclusion</b>
            <p> Originally, this client/server design was entirely for my benefit; 
              I am able to identify which sites aren't doing timely backups. 
              However, since the buc_client.ss script is distributed to all sites, 
              it can run on the same database server as the buc_server script.ss 
              script. The site DBA has only to set up his or her own local configuration 
              files and cron.
            <p> Finally, is this client/server design the only solution for this 
              backup problem? Certainly not. This is especially true if the server 
              process returns large amounts of data. The Expect environment might 
              be a better option, but requires climbing the Expect learning curve 
              and querying the keepers and denizens of the network.
            <p> <i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. 
              He is a software developer and DBA for Intel's Factory Integrated 
              Information Systems, FIIS, in Aloha, Oregon. Ed also hosts the UnixReview.com 
              monthly Shell Corner column. He can be reached at: <b>olded@ix.netcom.com</b>.</i>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
