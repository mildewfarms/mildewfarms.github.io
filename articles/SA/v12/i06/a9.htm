<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i06: Using the xargs Command</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/jun2003.tar"><b class=codeListing>jun2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a9.gif" width="200" height="167" align="right">Using 
              the xargs Command</b> </h1>
            <p> <i>Ed Schaefer</i> 
            <p> Many UNIX professionals think the <b>xargs</b> command, construct 
              and execute argument lists, is only useful for processing long lists 
              of files generated by the <b>find</b> command. While xargs dutifully 
              serves this purpose, xargs has other uses. In this article, I describe 
              xargs and the historical "Too many arguments" problem, 
              and present eight xargs "one-liners": 
            <p> 
            <p> 
            <ul>
              <li> Find the unique owners of all the files in a directory. 
              <li> Echo each file to standard output as it deletes. 
              <li> Duplicate the current directory structure to another directory. 
              <li> Group the output of multiple UNIX commands on one line. 
              <li> Display to standard output the contents of a file one word 
                per line. 
              <li> Prompt the user whether to remove each file individually. 
              <li> Concatenate the contents of the files whose names are contained 
                in file into another file. 
              <li> Move all files from one directory to another directory, echoing 
                each move to standard output as it happens. 
            </ul>
            <b>Examining the "Too Many Arguments" Problem</b> 
            <p> In the early days of UNIX/xenix, it was easy to overflow the command-line 
              buffer, causing a "Too many arguments" failure. Finding 
              a large number of files and piping them to another command was enough 
              to cause the failure. Executing the following command, from <i>Unix 
              Power Tools</i>, first edition (O'Reilly &amp; Associates): 
            <p> 
            <pre>
pr -n 'find . -type f -mtime -1 -print'|lpr
</pre>
            will potentially overflow the command line given enough files. This 
            command provides a list of all the files edited today to pr, and pipes 
            pr's output to the printer. We can solve this problem with <b>xargs</b>: 
            <p> 
            <pre>
find . -type f -mtime -1 -print|xargs pr -n |lp
</pre>
            With no options, <b>xargs</b> reads standard input, but only writes 
            enough arguments to standard output as to not overflow the command-line 
            buffer. Thus, if needed, <b>xargs</b> forces multiple executions of 
            <b>pr -n|lp</b>. 
            <p> While xargs controls overflowing the command-line buffer, the 
              command xargs services may overflow. I've witnessed the following 
              <b>mv</b> command fail -- not the command-line buffer -- 
              with an argument list too long error: 
            <p> 
            <pre>
find ./ -type f -print | xargs -i mv -f {} ./newdir
</pre>
            Limit the number of files sent to mv at a time by using the <b>xargs 
            -l</b> option. (The <b>xargs -i ()</b> syntax is explained later in 
            the article). The following command sets a limit of 56 files at time, 
            which mv receives: 
            <p> 
            <pre>
find ./ -type f -print | xargs -l56 -i mv -f {} ./newdir
</pre>
            The modern UNIX OS seems to have solved the problem of the <b>find</b> 
            command overflowing the command-line buffer. However, using the <b>find 
            -exec</b> command is still troublesome. It's better to do this: 
            <p> 
            <pre>
# remove all files with a txt extension
find . -type f -name "*.txt" -print|xargs rm
</pre>
            than this: 
            <p> 
            <pre>
find . -type f -name "*.txt" -exec rm {} \; -print
</pre>
            Controlling the call to <b>rm</b> with <b>xargs</b> is more efficient 
            than having the <b>find</b> command execute <b>rm</b> for each object 
            found. 
            <p> <b>xargs One-Liners</b> 
            <p> The <b>find-xargs</b> command combination is a powerful tool. 
              The following example finds the unique owners of all the files in 
              the /bin directory: 
            <p> 
            <pre>
# all on one line
find /bin -type f -follow | xargs ls -al | awk ' NF==9 { print $3 }
'|sort -u
</pre>
            If /bin is a soft link, as it is with Solaris, the <b>-follow</b> 
            option forces <b>find</b> to follow the link. The <b>xargs</b> command 
            feeds the <b>ls -al</b> command, which pipes to <b>awk</b>. If the 
            output of the <b>ls -al</b> command is 9 fields, print field 3 -- 
            the file owner. Sorting the <b>awk</b> output and piping to the <b>uniq</b> 
            command ensures unique owners. 
            <p> You can use <b>xargs</b> options to build extremely powerful commands. 
              Expanding the xargs/rm example, let's assume the requirement 
              exists to echo each file to standard output as it deletes: 
            <p> 
            <pre>
find . -type f -name "*.txt" | xargs -i ksh -c "echo deleting {}; rm {}"
</pre>
            The <b>xargs -i</b> option replaces instances of <b>{}</b> in a command 
            (i.e., <b>echo</b> and <b>rm</b> are commands). 
            <p> Conversely, instead of using the <b>-i</b> option with <b>{}</b>, 
              the <b>xargs -I</b> option replaces instances of a string. The above 
              command can be written as: 
            <p> 
            <pre>
find . -type f -name "*.txt" | xargs -I {} ksh -c "echo deleting {}; rm {}"
</pre>
            The new, third edition of <i>Unix Power Tools</i> by Powers et al. 
            provides an xargs "one-liner" that duplicates a directory 
            tree. The following command creates in the usr/project directory, 
            a copy of the current working directory structure: 
            <p> 
            <pre>
find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir
</pre>
            The /usr/project directory must exist. When executing, note the error: 
            <p> 
            <pre>
mkdir: Failed to make directory "/usr/project/"; File exists
</pre>
            which doesn't prevent the directory structure creation. Ignore 
            it. To learn how the above command works, you can read more in <i>Unix 
            Power Tools</i>, third edition, Chapter 9.17 (O'Reilly &amp; 
            Associates). 
            <p> In addition to serving the <b>find</b> command, xargs can be a 
              slave to other commands. Suppose the requirement is to group the 
              output of UNIX commands on one line. Executing: 
            <p> 
            <pre>
logname; date
</pre>
            displays the logname and date on two separate lines. Placing commands 
            in parentheses and piping to xargs places the output of both commands 
            on one line: 
            <p> 
            <pre>
(logname; date)|xargs
</pre>
            Executing the following command places all the file names in the current 
            directory on one line, and redirects to file "file.ls": 
            <p> 
            <pre>
ls |xargs echo &gt; file.ls
</pre>
            Use the <b>xargs</b> number of arguments option, <b>-n</b>, to display 
            the contents of "file.ls" to standard output, one name per 
            line: 
            <p> 
            <pre>
cat file.ls|xargs -n1  # from Unix in a Nutshell
</pre>
            In the current directory, use the <b>xargs -p</b> option to prompt 
            the user to remove each file individually: 
            <p> 
            <pre>
ls|xargs -p -n1 rm
</pre>
            Without the <b>-n</b> option, the user is prompted to delete all the 
            files in the current directory. 
            <p> Concatenate the contents of all the files whose names are contained 
              in file: 
            <p> 
            <pre>
xargs cat &lt; file &gt; file.contents
</pre>
            into file.contents. 
            <p> Move all files from directory $1 to directory $2, and use the 
              <b>xargs -t</b> option to echo each move as it happens: 
            <p> 
            <pre>
ls $1 | xargs -I {} -t mv $1/{} $2/{}
</pre>
            The <b>xargs -I</b> argument replaces each <b>{}</b> in the string 
            with each object piped to xargs. 
            <p> <b>Conclusion</b> 
            <p> When should you use xargs? When the output of a command is the 
              command-line options of another command, use xargs in conjunction 
              with pipes. When the output of a command is the input of another 
              command, use pipes. 
            <p> <b>References</b> 
            <p> Powers, Shelley, Peek, Jerry, et al. 2003. <i>Unix Power Tools</i>. 
              Sebastopol, CA: O'Reilly &amp; Associates. 
            <p> Robbins, Arnold. 1999. <i>Unix in a Nutshell</i>. Sebastopol, 
              CA: O'Reilly &amp; Associates. 
            <p> <i>Ed Schaefer is a frequent contributor to Sys Admin. He is a 
              software developer and DBA for Intel's Factory Integrated Information 
              Systems, FIIS, in Aloha, Oregon. Ed also hosts the monthly Shell 
              Corner column on UnixReview.com. He can be reached at: <b>olded@ix.netcom.com</b>.</i>
            <p>
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
