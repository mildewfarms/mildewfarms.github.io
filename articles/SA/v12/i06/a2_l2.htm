<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i06: Listing 2 portknocking server</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink">Listing 2</span></td>
		<td><a href="../../../../source/SA/2003/jun2003.tar"><b class=codeListing>jun2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b>Listing 2 </b><i>portknocking server</i></h1>
            <p> 
            <pre>
use strict;
use File::Tail;
use Crypt::CBC;
use Schedule::At;
use Math::VecStat qw(sum);
use POSIX qw(strftime);
use Getopt::Long;
use constant PORTMIN      =&gt; 745;
use constant KNOCKLENGTH  =&gt; 8;
use constant KEY          =&gt; "knock";
use constant CIPHER       =&gt; "Blowfish";
use vars qw($opt_file);

         GetOptions("file=s");

die "cannot open firewall log file (-file FILENAME)" if ! -e $opt_file || ! -r _;

my $file = File::Tail-&gt;new(name=&gt;"$opt_file",maxinterval=&gt;2);

my %QUEUE;
while(defined(my $line=$file-&gt;read)) {
    # pay attention only to DENY packets
    next unless $line =~ /DENY/;
    if($line =~ /PROTO=6 ([\d.]+):\d+ [\d.]+:(\d+)/) {
    my ($ip,$port) = ($1,$2);
    # pay attention only to ports allocated for knocking
    next if ($port &lt; PORTMIN || $port &gt;  PORTMIN+255);

    print "knock from $ip to port $port\n";

    # push this port to each queue item
    $QUEUE{$ip} = [] if ! $QUEUE{$ip};
    push(@{$QUEUE{$ip}},$port);
    print "current queue ",join(" ",@{$QUEUE{$ip}}),"\n";
    # if the queue is of the expected length, process it
    if(@{$QUEUE{$ip}} == KNOCKLENGTH) {
      ProcessQueue($QUEUE{$ip});
      print "current queue @{$QUEUE{$ip}}\n";
    }
      }
  }

sub ProcessQueue {
  my $queue = shift;
  # try to decrypt the queue contents
  my $cipher = Crypt::CBC-&gt;new({key        =&gt; KEY,
                iv         =&gt;"01234567",
                prepend_iv =&gt; 0,
                cipher     =&gt; CIPHER});
  my @data = unpack("C*",
            $cipher-&gt;decrypt(pack("C*",
                      map {$_ - PORTMIN } @$queue)));
  # decrypted list must have 7 elements, otherwise remove oldest item and keep listening
  if(@data != 7) {
    print "ERROR could not decrypt properly\n";
    shift(@$queue);
    return;
  }
  print "Got data ",join(" ",@data),"\n";
  # check crc of knock sequence
  if ((sum(@data[0..@data-2]) % 255) == $data[-1]) {
    # extract information from the decrypted list
    my ($remoteip,$localport,$time) = (join(".",@data[0..3]),$data[4],$data[5]);
    print "$remoteip $localport $time\n";
    # open port to remote ip
    system("/sbin/ipchains -I input -p tcp -s $remoteip/32 -d 0/0 $localport \
      -j ACCEPT") if $time != 255;
    # close the port if time = 255
    if($time == 255) {
      system("/sbin/ipchains -D input -p tcp -s $remoteip/32 -d 0/0 $localport \
        -j ACCEPT ");
    } elsif ($time) {
      # schedule the port to be closed in $time minutes
      my $time = strftime "%Y%m%d%H%M", localtime(time+60*$time);
      my $command = "/sbin/ipchains -D input -p tcp -s $remoteip/32 -d 0/0 \
        $localport -j ACCEPT";
      print "scheduled $time $command\n";
      Schedule::At::add(TIME=&gt;$time,COMMAND=&gt;$command);
    }
    # clear the queue
    @$queue = ();
  } else {
    print "ERROR bad crc\n";
    shift(@$queue);
  }
}</pre>
            <p>&nbsp; 
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
