<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v12, i06: CFS -- The Cryptographic File System</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2003/jun2003.tar"><b class=codeListing>jun2003.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><b><img src="a5.gif" width="200" height="167" align="right">CFS 
              -- The Cryptographic File System</b> </h1>
            <p> <i>Keith McDuffee</i> 
            <p> The use of Linux on laptops has become increasingly popular as 
              a development platform, and with this increased use of laptops comes 
              the necessity for securing a company's intellectual property, 
              namely product source code. Ordinary file security protects a file 
              from unauthorized access within the normal operating context, but 
              an attacker who has physical control of the computer has many other 
              options for gaining access to the file if it is not encrypted. So, 
              when a laptop is stolen, there's often a lot more at stake 
              than the price of the hardware. 
            <p> Recently I was asked to find a tool to keep product source code 
              on laptops encrypted while being relatively painless for developers 
              to use. We didn't want to require users to enter a password 
              for each file being accessed, much like an encryption application 
              might work. This would also leave too much up to the user in terms 
              of making sure each sensitive file was encrypted when not in use. 
              Another important factor was performance. If developers experienced 
              noticeable performance loss, they'd be more inclined to bypass 
              the encryption route altogether and hope for the best. 
            <p> For my solution, I chose Matt Blaze's Cryptographic File 
              System (CFS), which is located here: 
            <p> 
            <pre>
http://www.crypto.com/software/
</pre>
            Another option I considered was TCFS (<b>http://www.tcfs.it</b>), 
            or Transparent CFS. TCFS requires some kernel modifications and, as 
            of this writing, the latest release only supported the 2.2 Linux kernel. 
            The Linux CryptoAPI project (<b>http://www.kerneli.org</b>) is an 
            ambitious project that also requires kernel modification, and I felt 
            it was a bit beyond what I needed to do in my case. 
            <p> The original work on CFS dates back to 1992. Matt Blaze has updated 
              it since then, with version 1.4.0 appearing in beta form around 
              1997, but CFS is not currently in active development, and Blaze 
              warns at his Web site to consider the code unsupported. Nevertheless, 
              the CFS solution worked well for my purposes, and it may work for 
              you also if you are in a similar situation. 
            <p> In this article, I will cover building and configuration of CFS 
              under Linux only, however, CFS is reported to run under IRIX, AIX, 
              and Solaris. The RPMs I found worked out of the box under Red Hat 
              7.2 through Red Hat 9, which our laptops use. After applying a small 
              patch, the latest source code also built without issues. 
            <p> <b>How CFS Works</b> 
            <p> Unlike application-based solutions for encryption, CFS works on 
              the system level through a standard UNIX file system interface. 
              A daemon (cfsd) runs on the client system as a special NFS server, 
              on its own port (3049), to interpret CFS requests. A user then creates, 
              "attaches", and "detaches" special directories 
              that will contain the encrypted files. Current directories cannot 
              be converted into CFS directories without copying their contents 
              into a new, attached CFS directory. The latest version of CFS supports 
              3DES encryption as well as DES, Blowfish, MacGuffin, and SAFER-SK128. 
            <p> Once a CFS directory is created and attached, all files written 
              through the attached directory are encrypted (and decrypted) on 
              the fly. A directory becomes detached when a user manually detaches 
              it or when cfsd is stopped. 
            <p> <b>Building and Installing CFS</b> 
            <p> You can obtain a somewhat older version of a CFS RPM at: 
            <p> 
            <pre>
http://www.rpmfind.net//linux/RPM/rhcontrib/7.1/i386/cfs-1.4.0.beta2-6.2.i386.html
</pre>
            or the latest sources (1.4.1) from: 
            <p> 
            <pre>
http://www.crypto.com/software/
</pre>
            When building from the 1.4.1 sources, you need to apply a patch found 
            either on the <i>Sys Admin</i> Web site: 
            <p> 
            <pre>
http:/www.sysadminmag.com/code/
</pre>
            or: 
            <p> 
            <pre>
http://www.realistek.com:5150/sources/cfs-1.4.1-patch.


user&gt; tar xvfz cfs-1.4.1.tar.gz
user&gt; patch -p0 &lt;cfs-1.4.1.patch
user&gt; cd cfs-1.4.1
user&gt; make cfs
user&gt; su
# make install_cfs
</pre>
            CFS comes with another piece of software called ESM (Encrypted Session 
            Management). ESM is an encrypted session layer for managing remote 
            encrypted sessions, but that won't be covered here. 
            <p> To use CFS, you will need to have the nfs-utils and mount packages 
              installed on your system. You should be able to find the RPMs at 
              <b>http://www.rpmfind.net</b> or on your CD distribution. 
            <p> <b>Starting CFS</b> 
            <p> Since cfsd runs as an NFS server, we'll be mounting an NFS 
              exported directory onto the local system: 
            <p> 
            <pre>
# mkdir /.cfsd
# chmod 0 /.cfsd
# mkdir /mnt/crypt
</pre>
            Make the following addition to /etc/exports: 
            <p> 
            <pre>
/.cfsd           localhost(rw)
</pre>
            Add this line to /etc/fstab: 
            <p> 
            <pre>
localhost:/.cfsd     /mnt/crypt   nfs   port=3049,intr,vers=2,udp
      0 0
</pre>
            The /.cfsd directory is a placeholder for exporting our CFS directories. 
            It can actually be any name, as long as it's also reflected in 
            the /etc/exports file. It's also important to be sure to mount 
            the directory with the NFSv2 and UDP flags. 
            <p> Start cfsd and proceed with the export and mount of the CFS: 
            <p> 
            <pre>
user&gt; su
# /usr/local/etc/cfsd
# exportfs /.cfsd
# mount /mnt/crypt
</pre>
            <b>Using CFS</b> 
            <p> Directories are created using the <b>cmkdir</b> command. The resulting 
              directory is essentially a normal directory that contains the key 
              information for decrypting/encrypting files that are passed in/out 
              of it via CFS: 
            <p> 
            <pre>
user&gt; cd /home/user
user&gt; /usr/local/bin/cmkdir junk
Key: &lt;enter at least 16-character key&gt;
Again: &lt;enter same key again&gt;
</pre>
            The key you use must be at least 16 characters long, which can include 
            spaces, so using an easy to remember phrase with several shifts in 
            case and added symbols can help lessen the practice of writing it 
            down somewhere (i.e., "Thi$ iz mY Stufff"). It's also 
            a good idea not to use a directory name, like "sourcefiles", 
            that would arouse curiosity. 
            <p> You will now see the regular directory "junk" in /home/user; 
              however, placing files into this directory does not encrypt them. 
              You need to attach the directory to CFS in order to access it: 
            <p> 
            <pre>
user&gt; cd /home/user
user&gt; /usr/local/bin/cattach junk
Key: &lt;enter key used during creation&gt;
</pre>
            You can access the directory via its CFS mountpoint in /mnt/crypt. 
            This is where you will place your files to be encrypted and see them 
            unencrypted, as long as the directory is attached to CFS. For example, 
            let's create a simple text file in the newly attached directory: 
            <p> 
            <pre>
user&gt; echo "This is a test" &gt; /mnt/crypt/junk/test.txt
user&gt; ls -l /mnt/crypt/junk/
-rw-rw-r--    1 user   users          15 Sep 24 14:59
/mnt/crypt/junk/test.txt
user&gt; cat /mnt/crypt/sourcefiles/test.txt
This is a test
</pre>
            <p> We can also see what the directory contents look like in their 
              encrypted state to see what's going on behind the scenes: 
            <p> 
            <pre>
user&gt; ls -l /home/user/junk
total 1
-rw-rw-r--    1 user   users          23 Sep 24 14:59
fc23b20ec3aa88a8b8c1016cf2575028
</pre>
            If you tried to cat the contents of that file, you'd see a bunch 
            of indistinguishable characters. 
            <p> <b>cattach</b> can be used with the <b>-t</b> flag to automatically 
              detach the attached directories after a specified number of minutes, 
              or <b>-i</b> for a specified number of minutes of inactivity. Otherwise, 
              to detach directories, you use the <b>cdetach</b> command: 
            <p> 
            <pre>
user&gt; /usr/local/bin/cdetach /home/user/junk
</pre>
            Of course, rebooting or shutting down the laptop will also cause attached 
            directories to become detached. 
            <p> Like other system level daemons, you might want to create a chkconfig 
              script in /etc/init.d to have cfsd start during boot time. Just 
              make sure the script starts after your nfs script and before your 
              netfs scripts or you will run into errors when cfsd tries to start. 
              Having this script in place will make things a bit easier for the 
              user to put CFS into common practice, too. 
            <p> <b>Other CFS Commands</b> 
            <p> CFS has a few other useful commands worthy of mention: 
            <p> 
            <p> <b>cfssh</b> -- A simple Korn Shell script that attaches the 
              CFS directory given, then invokes a new shell within the attached 
              directory. Edit this script as appropriate for your installation. 
            <p> <b>ccat</b> -- Intended to assist in emergency access to CFS 
              directories when cfsd is not running. 
            <p> <b>cmkkey</b> -- Creates a secondary copy of the key for an 
              encrypted CFS directory into a new CFS directory. 
            <p> <b>cpasswd</b> -- Changes the passphrase associated with a 
              CFS directory. 
            <p> <b>Conclusion</b> 
            <p> My own tests have shown that there doesn't seem to be a significant 
              impact on read/write performance when using CFS, which should be 
              within range for routine use in typical developer environments. 
            <p> Computer theft is obviously not limited to laptops. CFS can be 
              put into use on desktop systems as well, but security should of 
              course not end there. A multitude of tools can be used to secure 
              systems from would-be thieves on a software level, and common sense 
              and a secure working environment will obviously help protect physical 
              inventory. 
            <p> Implementing a policy for using CFS on all developer laptops is 
              much easier than enforcing one. The tools may be simple to use, 
              but making sure sensitive documents and source files are always 
              kept under CFS will still be left up to the individual user. Similarly, 
              keeping access keys to CFS-encrypted directories on scraps of paper 
              within a laptop case is an open invitation for data theft, making 
              CFS worthless. CFS probably won't prevent a skillful hacker 
              from accessing your files, but if a laptop gets left behind in an 
              airport terminal, you'll be glad your data's not left 
              out there with it. 
            <p> 
           <b> Resources </b>
            <p><b> http://www.crypto.com/software </b>
            <p><b> http://www.crypto.com/papers/cfs.pdf </b>
            <p><b> http://www.tcfs.it </b>
            <p><b> http://www.kerneli.org </b>
            <p> <i>Keith McDuffee (</i>gudlyf@realistek.com<i>) has been a Network 
              and Systems Administrator for more than 10 years and is currently 
              employed as the IT Manager for Etnus in Natick, Massachusetts.</i> 
          </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
