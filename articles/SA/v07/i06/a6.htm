<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i06: Logical Volumes in AIX</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a6_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1998/jun98.tar"><b class=codeListing>jun98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Logical Volumes in AIX<p>
</H1><p>James Santos<p>
AIX provides the Logical Volume Manager (LVM) for managing disk storage. LVM gives administrators features that enhance system integrity, increase performance and, in some instances, simply make the administrator's life easier. This article reviews the fundamental features of LVM and explores two shell scripts that can aid in the management of LVM-based storage.<p>
<B>LVM Features</b><p>Although LVM uses hardware-level storage in much the same manner as conventional UNIX file systems, LVM operates at a higher level of abstraction and provides considerably more flexibility in how those physical resources are used. For simplicity, LVM's features fit conveniently into integrity-enhancing features, performance-enhancing features, and the traditional catch-all, other features.<p>
Some of the LVM features that enhance integrity are:<p>
<ul>
<li>Disk mirroring<br>
<li>Reallocation of bad blocks<br>
<li>Read after write verification<br>
</ul><p>
Some of the features of the LVM that can enhance performance are:<br>
<ul>
<li>Disk striping<br>
<li>Placement of logical volumes (where filesystems are created; much like disk partitions in other UNIX systems) into specific regions of the disk (i.e., center region of the disk gives the highest performance by minimizing the disk read/write head movement)<br>
<li>Disk defragmentation<br>
</ul><p>
Other features include:<br>
<ul>
<li>Dynamic expansion of filesystems (dynamic method minimizes downtime)<br>
<li>Placement of filesystems over multiple disks<br>
</ul><p>
Listings 1 and 2 are shell programs that help you manage physical and logical volumes. The second program (<B>crmklvall.ksh</B>) uses the output of the first program (<B>listpvlv.ksh</B>). Both have been tested with AIX 4.1.4.0 and AIX 4.2.0.0. (All listings for this article can be found at <B>ftp.mfi.com</B> in <B>/pub/sysadmin/</B>.)<p>
<B>listpvlv.ksh</b><p>AIX provides various commands for managing logical and physical volumes that give the administrator a wealth of information. From my day-to-day experience with managing disks in AIX systems, I have found that there is some basic information that I use quite often. To get this information, though, I need to execute multiple commands. I wrote the <B>listpvlv.ksh</B> shell program (Listing 1) to address this problem by printing out the most useful information.<p>
The program produces output similar to the following:<p>
<pre>
Host : dev01
Date : 11/11/97 16:45:58

Information for hdisk0
Part of Volume Group : rootvg
PP Size              : 8 megabyte(s)
Total PPs            : 537 (4296 megabytes)
Free PPs             : 57 (456 megabytes)
Size (No   Size (No
C D  LV Name  Distribution        of LPs)    of PPs)   FS Name
1 1  lnts     97..53..00..34..00       184        184    /lnts
1 1  hd5      01..00..00..00..00         1          1      N/A
1 1  hd2      10..54..75..57..49       245        245     /usr
1 1  hd6      00..00..32..00..00        32         32      N/A
1 1  hd1      00..00..00..06..00         6          6    /home
1 1  hd3     00..00..00..04..00         4          4     /tmp
1 1  hd9var  00..00..00..03..00         3          3     /var
1 1  hd4     00..00..00..00..04         4          4        /
1 1  hd8     00..00..00..00..01         1          1      N/A
.       .
.       .
.       .
.       .
Information for hdisk3
Part of Volume Group : testareavg
PP Size              : 8 megabyte(s)
Total PPs            : 537 (4296 megabytes)
Free PPs             : 215 (1720 megabytes)
Size (No  Size (No
C D  LV Name       Distribution       of LPs)   of PPs)  FS Name
1 1  prd02_data01  47..25..85..53..00      210       210     N/A
1 1  prd02_data01  08..32..00..00..00       40        40     N/A
1 1  prd01_idx01   00..21..00..00..00       21        21     N/A
1 2  arealv2       00..05..00..00..00        5         5     N/A
1 2S arealv3       00..04..00..00..00        4         4     N/A
1 2S cabtest1      00..08..00..00..00        8         8     N/A
1 2S cabtest2      00..04..00..00..00        4         4     N/A
1 2  arealv4       00..08..17..00..00       25        25  /cabfs
2 2  arealv1       00..00..05..00..00        5         5     N/A
.       .
.       .
.       .
.       .
</pre><p>
<p>The report is organized by physical volume (PV). It provides summary information about each PV on the system and lists all the logical volumes (LV). It also provides information such as mirroring (the "C" column), the number of disks the LVs reside on (the "D" column), and whether or not the LV is striped. An "S" beside the number in the "D" column indicates a striped LV. The syntax of the program is as follows:<p>
<pre>
listpvlv.ksh [-p] [-o filename] [hdiskn]
</pre><p>
<p><B>
-p</B> displays the LV size as the number of physical partitions (PP) (default is in megabytes). <B>-o filename</B> sends the output of the program to the filename given (default output is <B>stdout</B>). <B>hdiskn</B> allows you to specify which PVs to display in the report (default is all PVs). All arguments are optional.<p>
The program starts by parsing the command line options using <B>getopts</B>. <B>getopts</B> gives the program flexibility in handling arguments. Combine <B>getopts</B> with the <B>case..esac</B> construct within a "while" loop and you have a convenient way of validating arguments entered by the user. Notice that an <B>exec 1&gt;$OPTARG</B> is called if the user entered <B>-o filename</B> as an argument. Running this command within a Korn shell script allows you to redirect file descriptors. In this case I am redirecting <B>stdout</B> to the value of the <B>$OPTARG</B> variable. This variable was initialized by <B>getopts</B> with the filename that the user entered with the -o argument. Finally, a <B>shift $(($OPTIND -1))</B> is done after the "while" loop that contains the <B>getopts</B>. This <B>shift</B> is needed to point <B>$1</B>, <B>$2</B> and so on to the <B>hdisk</B>(s) arguments.<p>
If the user entered <B>hdisk</B> argument(s), the program checks for the validity of these parameters. If the user entered an invalid <B>hdisk</B>, then an error message is displayed.<p>
The main "for" loop processes one PV at a time. Within the loop, all the corresponding LVs within each PV are processed. The first <B>awk</B> builds the PV information and prints out the volume group, the PP size, the total, and the free <B>hdisk</B> space (please refer to the sample output).<p>
Next, the value of the <B>PPSIZEMULT</B> variable is set. This variable is used later as a multiplier in computing the LV size. If the user did not specify a <B>-p</B> as a parameter (<B>-m</B> is the default), then the multiplier is set equal to the PP size of the <B>hdisk</B>; otherwise, the multiplier is set to 1.<p>
The second <B>awk</B> segment extracts the LV details. The <B>BEGIN </B>section of this <B>awk</B> segment prints out the headings, then computes the size of the LV. Note that it uses the <B>awk getline</B> function to execute an external command and save the output of the command to the <B>COPY_STR_LINE</B> variable. This variable would contain information indicating whether the LV is mirrored (multiple copies) or striped. The <B>awk split</B> function is then used to split the <B>COPY_STR_LINE</B> variable into the <B>CSLARRAY</B> array using the field separator (FS) as the delimiter. The size of the LV is then computed using the <B>PPSIZEMULT</B> variable discussed earlier.<p>
The second element of the <B>CSLARRAY[]</B> array, <B>CSLARRAY[2]</B>, contains the value of the "C" column in the report. A value of more than 1 indicates that the LV is mirrored. The fifth element of the array, <B>CSLARRAY[5]</B>, indicates whether the LV is striped.<p>
The <B>getline</B> function is used again to get the number of disks that the LV spans (the "D" column in the report). <B>lslv -l "$1"</B> (<B>$1</B> contains the LV name) prints out all the PVs that the LV resides on. <B>tail +3</B> removes the header section. <B>wc -l</B> gives you the number of lines, which, in this case, is the number of PVs that the LV is defined on. <B>getline</B> will assign this number to the <B>NO_OF_DISKS</B> variable. This variable, together with other variables initialized earlier, will be used by the <B>printf</B> function to print the various information for the LV.<p>
<B>crmklvall.ksh</b><p>There are instances when you have to recreate logical volume definitions from one machine to another. One case is in disaster recovery. For example, at my client, we simulate a disaster by pretending that our data center has gone down. We then proceed to a predetermined site and start building our production environment. The <B>crmklvall.ksh</B> shell program (Listing 2) can help in this rebuilding. It reverse engineers the creation of LVs by creating a shell script (<B>mklvall.sh</B>) that contains <B>mklv</B> commands.<p>
Going back to my example, we start building the environment by loading our <B>mksysb</B> tape on a machine that is identical to our production machine. We then run the <B>mklvall.sh</B> shell script. The actual <B>mklvall.sh </B>script that we use is edited to include only those LVs that we want to recreate. We then build our Sybase environment on top of these newly created LVs. This program is also useful when you need to duplicate the logical volume definitions from one machine to another. I often have to migrate a Sybase environment between machines, and the <B>crmklvall.ksh</B> shell program has become quite handy.<p>
The program produces output similar to the following:<p>
<pre>
#*************************************************************
#* For Host    : dev01
#* Date        : 11/12/97    17:06:19
#* Description : This script contains mklv commands to create
#*               the LVs that existed when crmklvall.ksh was
#*               run on this host (dev01).
#*
#*               crmklvall.ksh generates this script. All
#*               existing LVs are included here (including
#*               the LVs that are automatically created when
#*               AIX is installed). For safety reasons, all
#*               lines in this script are commented out.
#*
#*               Uncomment only the lines that you need.
#*************************************************************
.               .
.               .
.               .
.               .
#mklv -y intradb01datlv    -c 1 sybasevg     25 hdisk1
#mklv -y intradb01idxlv    -c 1 sybasevg      6 hdisk1
#mklv -y intradb01loglv    -c 1 sybasevg      6 hdisk1
#mklv -y intradb02datlv    -c 1 sybasevg     15 hdisk1
#mklv -y intradb02idxlv    -c 1 sybasevg      6 hdisk1
#mklv -y intradb02loglv    -c 1 sybasevg      6 hdisk1
#mklv -y intraserv_mast    -c 1 sybasevg      3 hdisk1
#mklv -y intraserv_proc    -c 1 sybasevg      3 hdisk1
#mklv -y intraserv_secu    -c 1 sybasevg      3 hdisk1
#mklv -y prd01_data01      -c 1 testareavg  155 hdisk2
#mklv -y prd01_idx01       -c 1 testareavg   21 hdisk3
#mklv -y prd01_log01       -c 1 sybasevg     21 hdisk1
#mklv -y prd01rms_mast01   -c 1 sybasevg      3 hdisk1
#mklv -y prd01rms_proc01   -c 1 sybasevg      3 hdisk1
#mklv -y prd02_data01      -c 1 testareavg   40 hdisk3
#extendlv prd02_data01                      210 hdisk3
#mklv -y prd02_idx01       -c 1 sybasevg     79 hdisk1
#mklv -y prd02_log01       -c 1 testareavg   21 hdisk2
#mklv -y sybaselv          -c 1 sybasevg     50 hdisk1
#mklv -y tempdblv          -c 1 sybasevg     57 hdisk1
#mklv -y arealv2           -c 1 testareavg    7 hdisk2
#extendlv arealv2                             5 hdisk3
#mklv -y arealv3          S64K  testareavg    8 hdisk2 hdisk3
#mklv -y arealv4           -c 1 testareavg   10 hdisk2
#extendlv arealv4                            25 hdisk3
#mklv -y cabtest1        -S128K testareavg   16 hdisk2 hdisk3
#mklv -y cabtest2        -S16K  testareavg    8 hdisk2 hdisk3
#mklv -y arealv1           -c 2 testareavg    5 hdisk2 hdisk3
.               .
.               .
.               .
.               .
</pre><p>The output is a shell script with commands to create LVs. The <B>mklv</B> command that is generated takes into consideration whether the LVs are mirrored or striped or are extended to another PV. If it is striped, the correct stripe size is used. It does not, however, retain the original positioning of the LV within the PV (e.g., center, inner middle, etc.), and it was not designed for LVs created with a non-strict allocation policy (<B>-s n</B> option of <B>mklv</B>). The syntax of the program is as follows:<p>
<pre>
crmklvall.ksh [-o filename]
</pre><p>
<p><b>-o filename</B> sends the output of the program to the filename given (default output file is <B>mklvall.sh</B>).<p>
The program starts by parsing the command line using <B>getopts</B>. The user has the option of overriding the default output file by running the command with the <B>-o filename</B> argument. (For more information on <B>getopts</B>, please refer to the discussion of the <B>listpvlv.ksh</B> shell program.)<p>
The first awk parses the <B>$TMPFILE</B> (which is the output of <B>listpvlv -p</B>). Next, the output of this awk is sorted with the primary sort key being the mirroring information (the "C" column in the <B>listpvlv.ksh</B> output). The output of the sort is processed by a second awk.<p>
This next awk is where most of the processing takes place. The main <B>if/else</B> checks whether the LV currently being processed is mirrored or not. If it is not, then the program checks whether the LV is striped or not. Different processing occurs depending on this last test. For striped LVs, the program does not print the <B>mklv</B> command immediately. It builds two arrays. The first one, <B>STR_ARRAY_SZ[]</B>, contains the number of PPs used in each of the PVs that are part of the striped set. The second one, <B>STR_ARRAY_PV[]</B>, contains the names of all the <B>hdisks</B> that are part of the striped set. If the next record processed pertains to an LV that is no longer part of the previous striped set, then a break process occurs. Note that this break process occurs in the program if the <B>if (STR_ARRAY_PV[1] != "")</B> test evaluates to true. If so, then the <B>print_strlv()</B> function is called. (This test is done in four parts of the program.)<p>
If the LV is not striped, the program prints the <B>mklv</B> (<B>print_line()</B> with <B>1dsk</B> argument). An <B>extendlv</B> is printed by the program (<B>print_line()</B> with <B>ext</B> argument) if appropriate to the next LV being processed by awk. If the LV is mirrored, then the <B>print_line()</B> function is called. The parameter passed to this function depends on whether the number of LV copies is two or three. If there are two, it passes the <B>2mir</B> argument; if there are three, it passes the <B>3mir</B> argument.<p>
Let's now turn our attention to the two functions mentioned in this discussion: <B>print_line()</B> and <B>print_strlv()</B>.<p>
Note that the <B>print_line()</B> function contains the different <B>printf()</B> routines for (a) a single-disk <B>mklv</B>, (b) an <B>extendlv</B>, (c) a two-copy <B>mklv</B>, and (d) a three-copy <B>mklv</B>. The function accepts different arguments (discussed in the previous paragraphs) that tell it which <B>printf()</B> routine to execute.<p>
Within the <B>print_strlv()</B> function, the total size of the striped LV is computed. It adds the size (number of PPs) of the current LV being processed with all of the values stored in the <B>STR_ARRAY_SZ[]</B> array. As mentioned earlier, this array contains the number of PPs used in the other PVs that are part of the same striped set. Another way of computing the total size of the striped LV, without using the array, is by multiplying the size of the current LV by the number of <B>hdisks</B> that are a part of the same striped set. This method can be used since the number of PPs used should be the same in all of the PVs within the same stripe set.<p>
Also, within the <B>print_strlv()</B> function, the awk <B>getline()</B> function is utilized to get the stripe size used to create the stripe set. <B>lslv "STRLV"</B> (<B>STRLV</B> contains the LV name) prints out a detailed report about the LV. <B>tail -1</B> discards the output of the <B>lslv</B> except the last line. <B>cut -c21-24</B> gives the stripe size. <B>getline</B> will assign this value to the <B>STRIPE_SIZE</B> variable that, together with other variables, is used by the <B>printf()</B> function when printing the <B>mklv</B> for the striped LV. The <B>mklv</B> that is printed does not yet contain all of the names of the PVs that are a part of the same stripe set. The next routine handles that. Notice that the <B>printf()</B> does not issue a line feed yet.<p>
The next "for" loop processes the <B>STR_ARRAY_PV[]</B> array. As mentioned earlier, this array contains the names of all the other PVs that are part of the same stripe set. The <B>printf()</B> within this "for" loop takes care of printing the rest of the PV names within the same stripe set.<p>
<B>Conclusion</b><p>Although the AIX graphical admin tool, <B>smit</B>, includes features for managing LVM, the two tools presented in this article augment <B>smit</B>. These shell scripts have become part of my regular toolkit for the management of AIX systems, and have served me well in that role. As a <I>Sys Admin </I>reader, you are free to use and modify these scripts as you see fit (at your own risk, of course), but you june not sell the code or incorporate it into a commercial product without my further consent.<p>
<B>Other Resources</b><p><I>AIX  Storage Management</I>. IBM Publication GG24-4484-00<br>
<I>AIX  Versions 3.2 and 4.1 Performance and Tuning Guide</I>. IBM Publication SC23-2365-03.<br>
<I>Ess ential System Administration</I>, Second Edition by AEleen Frisch. O'Reilly &amp; Associates, Inc.




<h1>About the Author</h1><p>










James M. Santos is an indepentdent consultant specializing in systems administration and performance tuning. He is the President of his consulting company, Cornerstone Systems Solutions, Inc. He can be reached at: <B>jamessantos@usa.net</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >


</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>