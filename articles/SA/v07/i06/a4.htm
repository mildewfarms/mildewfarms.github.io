<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i06: The /proc File System</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1998/jun98.tar"><b class=codeListing>jun98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>The /proc File System<p>
</H1><p>Werner Klauser<p>
The <B>/proc</B> file system (<B>procfs</B>) is an example of a virtual file system used by several UNIX operating systems, including Sun's Solaris, Linux, OpenBSD, and AT&amp;T's UNIX on an NCR system. No official standards regulate the <B>/proc</B> file system. This article provides a brief history of <B>/proc</B> and its implementation on Sun's Solaris 2.5 and Solaris 2.6 operating systems, as well as a few hints about how <B>/proc</B> can be used to solve various system administration problems.<p>
<B>History</b><p>The concept of <B>/proc</B> was first introduced by Tom Killian in the research Eight Edition UNIX system and was first written up in a paper: "Process as Files" in the Proceedings of the USENIX Association Summer Conference held in Salt Lake City, June 1984. The early version was essentially a <B>ptrace(2)</B> replacement with the important advancement that the address space of the process could be examined and modified using the <B>read(2)</B> and <B>write(2) </B>system calls rather than the clumsy <B>ptrace(2)</B> one-word-at-a-time interface.<p>
Roger Faulkner and Ron Gomes ported the research version of <B>/proc</B> to SVR4 and provided an easier viewing and access method of the active processes. They presented their work in another USENIX paper: "The Process File System and Process Model in UNIX System V" in the Proceedings of the USENIX Association Winter Conference held in Dallas, TX, January 1991. At that time, Roger Faulkner was with Sun Microsystems and Ron Gomes with AT&amp;T Bell Laboratories. As described in that paper, future work was intended to restructure <B>/proc</B> from a flat file system into a directory hierarchy describing a process. That work was undertaken with Sun's Solaris 2.6.<p>
<B>/proc in Solaris 2.5</b><p>What first appears to be a normal file system beginning at <B>/proc</B> and containing large-sized files having the same names as the process IDs of the currently running processes is, in effect, an illusion. They do not occupy disk space - they exist in the working memory and the used swap space. The files contain information that the <B>ps(1)</B> command can show us. The contents of these files and how they are addressed will be discussed in more detail, as will the changes between Solaris 2.5 and Solaris 2.6.<p>
<B>Process Tools</b><p>Process tools found in <B>/usr/proc/bin</B> are similar to some options of the <B>ps(1)</B> command, except that the output provided by these tools is much more detailed. In general, the process tools:<p>
<p>
<ul>
<li>Provide control over processes, allowing users to stop or resume them. <p>
<li>Display more details about processes, such as <B>fstat(2)</B> and <B>fcntl(2)</B> information, working directories, and trees of parent and child processes.<p>
</ul><p>
An explanation of some of the more interesting tools follows.<p>
<p>
Tools that control processes:<p>
<p>
<B>pstop pid</B> - stops the process <p>
<B>pstart pid</B> - restarts the process<p>
<B>pwait [-v] pid</B> - waits for the processes to end<p>
<p>
A practical usage is to stop a process that is using too much CPU power and then restart it during noon time while everybody's out for lunch. Rather then starting another job that also uses a lot of CPU power, let <B>pwait(1)</B> inform you when the CPU-heavy job has finished.<p>
<pre>
$ /usr/proc/bin/pwait &lt;pid_of_heavy_job1&gt; ; heavy_job2
</pre><p>Tools that display process details:<p>
<p>
<B>pfiles pid</B> -  <B>fstat(2)</B> and <B>fcntl(2)</B> information for open files <p>
<B>pldd pid</B> -   dynamic libraries linked into each process <p>
<B>psig pid</B> -  signal actions <p>
<B>ptree pid</B> - process trees containing specific pids of fathers and     children<p>
<B>pwdx pid</B> - current working directory<p>
<p>
Have you ever wondered who is reading or writing a certain file? All you need is to find out the file's inode, and then you can use <B>pfiles(1)</B> to examine the running process to see which process(es) is using the file. Be certain to run the following command as root, because you need to examine all the system's processes. You must be root to do this.<p>
<pre>
# ls -i theFile
34277 theFile
# cd /proc
# /usr/proc/bin/pfiles *  view
search for "ino:34277"
#
</pre><p>
<p>/usr/proc/bin/ptree(1)</B> will give you a useful display of the ancestors and children of the desired process. For example:<p>
<pre>
$ ps
PID TTY      TIME CMD
16149 pts/6    0:05 loggerTest
15766 pts/6    0:00 ksh
$ /usr/proc/bin/ptree 15766
178   /usr/sbin/inet -s
15763 in.rlogind
15765 login -d /dev/pts6 -r sunshine.klauser.ch
15766 -ksh
16149 bin/loggerTest
16769 /usr/proc/bin/ptree 15766
$
</pre><p>
<p>If you're having problems unmounting a CD-ROM and you're certain some process is sitting on it, it's no problem for <B>pwdx(1)</B> to find out who the culprit is.<p>
<pre>
# cd /proc
# /usr/proc/bin/pwdx *  grep \/cdrom
2397:   /cdrom/sunsolve_3_0_7
# ps -ef | grep 2397
root  2397  2357  0   Mar 09 pts/5    0:00 ksh
root  2588  2397  0 10:24:29 pts/5    0:00 /bin/sh ./sunsolve
root  2652  2370  0 10:26:10 pts/3    0:00 grep 2397
#
</pre><p>
<p>It's amazing how these <B>proc(1)</B> tools can help solve those little but messy problems!<p>
<B>Coding Example</b><p>Beginning a program with <B>main(int argc, char *argv[])</B> and then looking at <B>argv[0]</B> will give you the name of how the program was called to execute it. But how does the <B>ps(1)</B> command get the process IDs and the names belonging to these process IDs?<p>
The system command <B>getpid(2)</B> returns the process's ID. But now that you have its ID, what do you do? This is where the <B>/proc</B> file system comes into use. Although these files only exist in a virtual world, they are readable. So, all you need to do is execute a simple <B>open</B>.<p>
<pre>
#include  &lt;stdio.h&gt;
#include  &lt;fcntl.h&gt;             /* file control option      */
#include  &lt;unistd.h&gt;            /* symbolic constants       */

main(int, char *argv[])
{
int     ifd;                 /* file descriptor          */
char    sFilename[16];

(void) sprintf(sFilename, "/proc/%d", getpid() );
ifd = open(sFilename, O_RDONLY);
(void) fprintf(stderr, "file = %s, file descriptor = %d\n",
sFilename, ifd);
(void) close(ifd);

return(0);
}
</pre><p>
<p>Note that if you look at the files in <B>/proc</B> with <B>ls(1)</B>, you will have the impression that their names are always five digits. That means if the process's ID is less than 10,000, it must be left-padded with zeros. However, you do not need to take this into account. For example, opening <B>/proc/123</B> has the same effect as opening <B>/proc/00123</B>. Now that is what I call one of the hidden surprises of a virtual file system. We only want information about the process, so its corresponding file is opened for reading only. But, just opening and closing the virtual file doesn't help us too much. We need to do a bit more.<p>
So, we add the following lines to the above example:<p>
<pre>
#include  &lt;sys/procfs.h&gt;      /* process file system info   */

....

struct prpsinfo  tPrpsinfo; /* ps(1) process information    */

....

(void) ioctl(ifd, PIOCPSINFO, &amp;tPrpsinfo);
(void) fprintf(stderr, "processname = %s\n",
tPrpsinfo.pr_fname);
</pre><p>
<p>Now the process name is printed out onto <B>stderr</B>.<p>
The include file <B>&lt;sys/procfs.h&gt;</B> introduces our code example to the <B>/proc</B> file system. It includes, among other things, the variable type <B>struct prpsinfo</B>, which is a structure containing process information. Its element <B>pr_fname</B> is the name of the process. It also contains the defined PIOCPSINFO, which gets us <B>ps(1)</B> information. Using <B>PIOCUSAGE</B> and a variable of type <B>struct prusage</B> can provide information concerning the process's usage of computer resources. This must be what <B>sar(1)</B> uses. Do take a look at this include file found in the <B>/usr/include/sys</B> directory.<p>
<B>Solaris 2.6 Changes</b><p>The previous flat <B>/proc</B> file system has been restructured into a directory hierarchy that contains additional subdirectories for state information and control functions. Although the flat files no longer exist and are now directories, you can still open them as flat files just as in Solaris 2.5. Another virtual file system surprise!<p>
<B>Summary</b><p>As you can see, using <B>/proc</B> and its tools is quite easy and provides information that is otherwise difficult to access. By treating processes as files, <B>procfs</B> enables files to be opened and manipulated in much the same manner as conventional files. This elegant and very UNIX-like approach allows you to gain information about the processes in a straightforward way.n




<h1>About the Author</h1><p>










Werner Klauser is an independent UNIX consultant working near Zurich, Switzerland. While not paragliding, enjoying his girls, or roarin' around on his Harley chopper, he can be reached at <B>klauser@klauser.ch</B> or via his Web page <B>www.klauser.ch</B> .





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
