<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i03: iptool - Maintaining /etc/hosts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1998/mar98.tar"><b class=codeListing>mar98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>iptool - Maintaining /etc/hosts</H1><p>
<p>Bob Ess
<p>
Before DNS and NIS, the <B>/etc/hosts</B> file was the method used for tracking hostnames and their associated IP addresses. In the early days of UNIX, before there were several thousands hosts to track, maintaining this file was relatively easy. A handful of hostnames and addresses was all that occupied the file. But as distributed computing grew up, this file grew larger and larger. Maintaining it correctly became more important as business came to rely on workstation network communications. Whether you have a small network or a WAN of thousands of machines, this file still plays an important role in the UNIX environment.<p>
Simply put, the file provides a one-to-one (or one-to-many) IP address to hostname key. On most, if not all, UNIX platforms, this file is what tells the workstation the value of its IP address during the boot process. When setting up DNS tables, this file is referenced by the <B>h2n</B> utility that is often used to create and update the DNS network tables. It is imperative that this file be accurate. If not, duplicate addresses can creep into the network and cause severe performance problems.<p>
Most large sites rely on NIS (Network Information Service) or DNS (Domain Name Service) to provide host to address resolution. These two facilities still rely on an accurate <B>/etc/hosts</B> file to maintain their tables. How these facilities operate is beyond the scope of this article. However, regardless of whether your site is using NIS, DNS, or the <B>/etc/hosts</B> file itself, keeping this file up to date and accurate is critical to maintaining a happy network.<p>
<B>Maintenance Problems</b><p>At large sites, there are usually several sys admins of various levels of expertise, one or two of whom are designated "keepers of the keys" when it comes to assigning IP addresses. This method works fine most of the time unless the keeper(s) is sick, on vacation, or just plain quits. Some sites use enterprise management software to help maintain the administrative flat files. These solutions, while effective, are highly complex and prohibitively expensive. Other sites use home-grown tools to help maintain their files. This is the spirit in which "<B>iptool</B>" was written. Our site has five administrators who could be changing the <B>/etc/hosts</B> at any one time; so, we needed a method that provided file-locking to keep from stepping on each others toes.<p>
Why automate? Manually maintaining the <B>/etc/hosts</B> file works effectively if just one or two admins are doing so in a fairly small shop. If you have dozens of segments with hundreds, perhaps thousands, of workstations, maintaining free and available addresses, assigning names, and knowing what is available or already on the net can be overwhelming. <B>iptool</B> does all of these things for you.<p>
<B>Security Issues</b><p>If you decide to run <B>iptool</B> as root, it will work just fine, however, you will lose the audit trail capability (i.e., who did what and when). In a large networked environment, this can be important - and not from a standpoint of being able to assign blame. By keeping a database of all transactions performed, you are maintaining a historical database of growth and resource allocation.<p>
We run <B>sudo</B> at our site. <B>sudo</B> allows non-root users to perform certain commands as root. It provides a complete audit trail as well. <B>sudo</B> is used with <B>iptool</B> to allow the user write access to the <B>/etc/hosts</B> file and root access to modify and push the NIS maps, all the while maintaining their UID during the process. It is this UID that is kept in the database as well as a log of their actions.<p>
<B>Program Outline<p>
iptool</B> is a Korn shell script (Listing 1) consisting of discrete shell functions that generate segment files, add a host and address, delete a host and address, show all free addresses for a given segment, sort and rebuild the <B>/etc/hosts</B> file and push out NIS maps, if needed. (Listings can be found at: <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.)<p>
<B>Program Flow</b><p>By following the program listing, I will review important sections and point out areas where you likely need to make changes to allow <B>iptool</B> to play within your environment.<p>
<B>Init Variables</b><p>The only item you should have to change here would be the location of certain files and binaries. <B>MASTERHOSTFILE</B> will not likely change but <B>SUDO</B> may be in a public area other than <B>/usr/local/bin</B>. You may also want to keep your backup copies (<B>ARCHIVE</B>) in some other area than <B>/etc/archive</B>.<p>
I trap <B>CNTRL-C</B>'s so that the <B>tmp</B> files are removed before the program exits. The program creates a lot of them and aborting out of the program without cleaning them up leaves a significant amount of trash in <B>/tmp</B>.<p>
<B>Usage</B> and <B>CheckUID</B> should be self explanatory. Again, not runnig as root allows an audit trail based on UID. <B>LockHost</B> and <B>UnLockHost</B> keep us from stepping all over each other. <B>Usage</B> is called anytime the incorrect number of arguments are used when the program is invoked.<p>
The first interesting function is <B>GenFiles</B>. This function does the following:<p>
<ul>
<li>creates the HOSTDB, if necessary
<li>creates the archive directory, if necessary
<li>creates a backup copy of the current hosts file
<li><B>grep</B>s out all uncommented host names, chops off the trailing host number, <B>sorts</B> and <B>uniq</B>s the results to give us a valid list of segments within our network.
</ul><p>
Once the above processes are finished, we then <B>grep</B> out the appropriate hosts for each segment and put them into a segment file. We end up with "n" number of files, named <B>hosts.$segment</B> (i.e., <B>hosts.101.10.2</B>), that include all of the valid hostnames and addresses for the segment. Now that we have the sorted segment files, we are ready to add, delete, or query for free IP addresses.<p>
<B>AddIp<p>
AddIp</B> contains four sanity checks before proceeding. First, it checks to see whether the address given on the command line already exists in the hosts file. If so, the program exits. The next check verifies that you have provided a unique hostname. If not, it aborts. Next, it checks to see whether the segment you provided in the IP address is valid for your network. Finally, a valid hostnumber check is performed. All of these checks are done in the <B>AddIp</B> function. Before this function is ever called, sanity checks are performed on the <B>IPADDRESS</B> and <B>HOSTNAME</B> as well. This is done to ensure that what we are telling the program to do is, in fact, what we want it to do.<p>
After the sanity checks are performed, a functional test is done to ensure that the chosen IP address is not actively configured on the network. Just because an address has not been formally assigned, does not mean it may not be in use somewhere. <B>iptool </B>will flag this condition if it exists.<p>
Also, if comments were provided on the command line, a <B>COMMENTS</B> string is built consisting of <B>$USER</B>, the date, and time.<p>
The host file is ready to be rebuilt, but first another check is done.<p>
<B>DeleteIp</b><p>The checks for deleting an IP address are not quite as extensive as for adding an IP address, because in order to delete an entity, you must provide an exact match. The program will not attempt to guess at it for you. <B>DeleteIp</B> provides only these two checks: Is the address in the host file, and does the address respond to <B>ping</B>s? If the address is not in the host file, the program aborts. If the address responds to a <B>ping</B>, the program will not let you delete that hostname.<p>
If both of these checks pass, a simple <B>grep -v</B> is performed to create a temporary host file that has all entries but the one you want deleted. The host file can now be built.<p>
<B>BuildHostFile</b><p>First, a timestamped header is put at the top of the hosts file. Next, we check to see if we have done an "Add" action. If so, we add the entry to the temporary segment file. This file is then sorted.<p>
The <B>HOSTDB</B> file is updated to provide an audit trail of what has been added and deleted, by whom, and on what day and time. Finally, all of the segment files are <B>cat</B>'d into a <B>tmp</B> file. This file <B>/tmp/hosts.tmp</B> is <B>uniq</B>'d and <B>sort</B>'d and becomes our new host file.<p>
<B>CleanUp</b><p>A check is done to ensure that differences actually exist between the temporary host file and the current master. If so, we copy to the file to its final resting place and push out the NIS maps. <B>CleanUp</B> is also called when <B>INTR</B>'s are caught. It removes all of the temporary files, of which there are quite a few, depending on the number of segments you have in your host file.<p>
<B>ShowFreeIp</b><p>Another function of this script is to provide the administrator a list of available IP addresses. This is done by invoking <B>iptool</B> with the <B>-f</B> switch and a segment number. A very simple check is then done using a counter to <B>grep</B> addresses against.<p>
<B>Program Shortcomings</b><p>The program, as written, requires 10 to 12 seconds to generate its temporary files using a host file of roughly 1000 entries. No doubt this program could be speeded up considerably using Perl or C. Nonetheless, performing any of the operation of <B>iptool</B> requires no more than a minute, including <B>ping</B> checks.<p>
<B>Summary</b><p>I have presented a simple method for maintaining the <B>/etc/hosts</B> file from the command line that all administrators can use. I have shown how to sort the hosts file, check for valid address, segments and hostnames, and how to rebuild the host file with proper address sequencing. By using this program, your host file insulates itself from "fat-finger" mistakes and protects you and your network by providing backup copies of the host file and doing preventative checks before adding or deleting a network entity.




<h1>About the Author</h1><p>










Bob Ess is a Senior UNIX Systems Administrator, currently managing a UNIX support staff for Fujitsu Network Communications in Richardson, Texas. When not putting out fires, he spends as much time as possible with his lovely wife, Angel, and their two boys, Matthew and Gabriel. He can be reached via email at <B>bob.ess@fnc.fujitsu.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
