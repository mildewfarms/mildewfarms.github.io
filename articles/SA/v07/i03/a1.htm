<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i03: UNIX Serial Communication</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1998/mar98.tar"><b class=codeListing>mar98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>UNIX Serial Communications<p>
</H1><p>Ross Goldman
<p>
Networks and their high-speed data communications have become an everyday part of computing life. However, not every device comes with a built-in Ethernet port. Serial communication remains an important technique to talk to many devices. Modems, bar code printers, intelligent controllers and many other devices still primarily rely on serial communications. This article will show how to perform serial communications from a C program using a paging program as an example. My own environment is HP-UX 10.20, but the techniques and procedures described here should easily port to other System V and POSIX UNIX environments. BSD uses five different data structures in place of <B>termio</B>. You should be able to map the <B>termio</B> references into these structures by reading the man pages.<p>
<B>Communication Ports</b><p>Because UNIX treats most system resources as files, serial communications looks just like regular file I/O. That is, of course, after the communication port has been configured. The actual communication port interface is through a special device file. The names of these files are usually of the form <B>/dev/ttyxxx</B>. For example, on my HP9000/C110, the two built-in serial ports are accessed through the files <B>/dev/tty0p0</B> and <B>/dev/tty1p0</B>. This can vary from system to system depending on what special device files have been created. See your system documentation for details. These file names come from the old days when terminals were Teletype machines (tty) connected via a serial cable to the host.<p>
It is important that the file permissions on these special device files be set for both read and write access. I usually set them at 666.<p>
<B>System Library Calls</b><p>Serial communications are accomplished through two types of system library calls. These are the file I/O calls (open, read, write, etc.) and the <B>ioctl</B> call. Closely associated with <B>ioctl</B> is the general terminal interface, <B>termio</B>. A program that needs to perform serial communications will use <B>ioctl</B> and <B>termio</B> to configure the communications port and characteristics, and will use the file I/O calls to send and/or receive data.<p>
The POSIX standard has made some changes to <B>termio</B> and <B>ioctl</B>. <B>termio</B> has been replaced with <B>termios</B> and the generic <B>ioctl</B> call has been replaced with several more specific system calls. The good news is that <B>termio</B> and <B>termios</B> are very similar to each other. In fact, for the purposes of this article, we will not even need to worry about the differences. The change from <B>ioctl</B> to the new calls is a little more radical. This article will discuss <B>ioctl</B> as well as two of the new calls that are used to get and set the port parameters. These calls are <B>tcgetattr</B> and <B>tcsetattr</B>. The sample code has been written to support both the POSIX and System V environments.<p>
<B>termio<p>
termio</B> (and the POSIX <B>termios</B>) is the general terminal interface. It is used to set the communication parameters and the behavior of the communication port. A program creates a <B>termio</B> structure for use with the routines that set port settings:<p>
<pre>
#ifdef _POSIX
struct termios settings; /* POSIX termios structure */
#else
struct termio settings; /* System V termio structure */
#endif
</pre><p>There are many options associated with <B>termio</B>, and I will discuss only a few of the basic ones in this article. I highly recommend reading the man page for <B>termio</B> for more information. When you do read about <B>termio</B>, remember that it was developed with terminals in mind. For serial device communications, many of the features of <B>termio</B> will not be used.<p>
The first use we will make of <B>termio</B> will be to set the communication parameters. The <B>termio</B> structure variable for setting the parameters is <B>c_cflag</B>. The parameters are <B>OR</B>ed together. The settings that are needed for the pager program are 1200 baud, even parity, and 7-bit character size. The paging service requires these settings. It is also necessary to explicitly tell <B>termio</B> to "enable receiver" in order to be able to read data. These settings are set in the <B>termio</B> structure by this line of code:<p>
<pre>
settings.c_cflag = B1200 | CS7 | PARENB | CREAD; /* 1200 E71 */
</pre><p>Note that there are four system calls in the POSIX environment that can be used to get and set baud rates. These are <B>cfgetispeed</B>, <B>cfgetospeed</B>, <B>cfsetispeed</B>, and <B>cfsetospeed</B>. To write truly portable POSIX code, these routines should be used instead of manually setting the baud rate as shown above.<p>
The next use of the <B>termio</B> structure is to set the behavior of the port. By "behavior" I mean how the input processing (a read posted on the port) is satisfied. When dealing with non-terminal serial devices, the input data is usually processed one character at a time. This mode of input processing is known as "non-canonical mode." There are four ways that input characters may be processed. These different processing techniques are determined by the MIN and TIME (referenced as VMIN and VTIME) values of the <B>c_cc</B> array of <B>termio</B>. All four ways are thoroughly described in the man pages for <B>termio</B>. To determine which case to use, you must know what to expect from your serial device. In the case of the pager program, we know that a complete string of data will be received in reply to our issuance of commands. For example, we know that when a command is issued directly to the modem, it should send an "OK" reply. Also, when a string of data is sent to the paging service, we know that a prompt for the next piece of data should be received as a reply. We want to know whether some data has come in as a reply to the write. Reading through the different cases on the man pages shows that this requirement is case C, <B>MIN = 0</B> and <B>TIME &gt; 0</B>. The value of <B>TIME </B>will be used as a read timer. The read call posted on the port will return either when some actual data has been read or when the timer times out as specified by these lines of code:<p>
<pre>
settings.c_cc[VMIN] = 0;
settings.c_cc[VTIME] = 10; /* 10 X .1 seconds = a 1 second
timeout clock */
</pre><p>Note that the timer resolution is .1 seconds. The above code sets the time to time out after 1 second. I like to use a 1 second timer because I can then multiply it by any value to get a larger whole seconds timeout value. I use this technique in the pager program because I know that certain events take longer to complete than others. For example, it may take up to 60 seconds for the pager service to pick up the phone call and send a carrier signal. Other events, such as an "OK" reply from the modem should only take a second or two at the very most.<p>
<B>ioctl and the POSIX calls</b><p>Before any communication parameters can be set, it is necessary to read the current settings for the port. This ensures that only the parameters that we want to change will be modified. The calls for reading and writing port settings are very different for the POSIX and System V standards. I will cover both cases.<p>
The System V method for reading and writing port settings is use of the <B>ioctl</B> function. The parameters passed to the function are the file handle of the special device file for the port (<B>/dev/tty0p0</B> in our example), a request reference, and a pointer to the program's <B>termio</B> structure. To read the current port settings for our pager program:<p>
<pre>
if (ioctl (fpPort, TCGETA, &amp;settings) == -1) {
printf ("ioctl get failure - %s\n", strerror (errno));
exit (1);
}
</pre><p>After setting the port settings to the desired values, it is necessary to write the new settings:<p>
<pre>
if (ioctl (fpPort, TCSETA, &amp;settings) == -1) {
printf ("ioctl set failure - %s\n", strerror (errno));
exit (1);
}
</pre><p>The only difference between the read and write function is the request reference, <B>TCGETA</B> for read (get) and <B>TCSETA</B> for write (set).<p>
The new (POSIX) method uses separate functions for reading and writing port settings. The read function, <B>tcgetattr</B>, takes as parameters the file handle for the special device file and a pointer to the <B>termios</B> structure:<p>
<pre>
if (tcgetattr (fpPort, &amp;settings) == -1) {
printf ("tcgetattr get failure - %s\n", strerror (errno));
exit (1);
}
</pre><p>The write function, <B>tcsetattr</B>, takes an additional parameter, which is for optional actions. This parameter is used to determine exactly when the new settings are to take effect:<p>
<pre>
<U>Optional action</U>	<U>When settings take effect</U>
TCSANOW		Immediately.
TCSADRAIN	After all pending data has been written.
TCSAFLUSH	After all pending data has been written and all input data has been flushed.
</pre><p>
<p>For the pager program, the call to write the port settings is: <p>
<pre>
if (tcsetattr (fpPort, TCSANOW, &amp;settings) == -1) {
printf ("tcsetattr set failure - %s\n", strerror (errno));
exit (1);
}</pre><p>
<p>Input/Output operations</b><p>As previously mentioned, serial communications uses file I/O for reading and writing data. Before any operations can be performed on the serial port, including getting and setting of port parameters, the special device file associated with that port must be opened. Note that non-streamed file I/O is used. The command to open the device file that will be used in the pager program is:<p>
<pre>
if ( (fpPort = open (COMM_PORT, O_RDWR)) == -1 ) {
printf ("port open failure - %s\n", strerror (errno));
exit (1);
}
</pre><p>
<p><B>COMM_PORT</B> is defined as <B>/dev/tty0p0</B> in the code. Note that setting the port for reading is really a two-step process. First the file must be opened with read and write access with the <B>O_RDWR</B> flag. Then the program must also enable the receiver function by setting <B>CREAD</B> in the <B>c_cflag</B> variable of the <B>termio</B> structure (see above).<p>
Once the file or port has been opened, the program can set the necessary port parameters. At this point everything should be ready for reading and writing data through the port. Writing data is a fairly straightforward operation. Just like normal file I/O, the program calls the write function with the proper parameters. Other than error checking, there is nothing further for the program to do. A sample write from the pager program looks like this:<p>
<pre>
if (write (fpPort, buffer, strlen (buffer)) == -1) {
printf ("send failure on '%s' - %s\n", message, strerror
(errno));
/* quit if the port write failed */
close (fpPort);
exit (1);
}
</pre><p>
<p>Remember that in non-streamed file I/O, you must specify the number of bytes to be written. Reading data from the port is a more complicated matter. Recall that in the above text, the port behavior was set for completing a read after the data was received or a timeout of 1 second had occurred. The routine that processes reads is passed a timeout value in seconds. The 1-second timer is used with this value to construct longer variable timeout periods. Listing 1 shows how this method is implemented. The characters are read from the port one at a time. If a 1-second port timeout occurs, then the number of tries is incremented. Once this number of tries equals the timeout value, then a read timeout is considered to have occurred, and a <B>TIMEOUT</B> value is returned.<p>
This basic functionality is the core of the data reception portion of the program. As the characters are received one at a time and placed in the buffer, the buffer is compared to the expected reply. Once the expected reply comparison is satisfied, the routine returns. If the reply is longer than expected, the extra characters are simply read and placed in the buffer the next time the routine is called. Since the routine dynamically compares the read data to the expected reply, these extra characters are effectively ignored. These techniques allow the expected replies to be defined less exactly. For example, if the expected reply is defined as "Enter the Message," and the actual reply is "Enter the Message, then RETURN", the routine will return after "Enter the Message" has been received and ", then RETURN" will be read and ignored the next time the routine is called.<p>
<B>Compiling and Running the Code</b><p>The sample code was written for use with the PageNet text paging service. Other services may have different prompts. For example the AirTouch service uses "Send another page?" instead of "Thank You" as PageNet uses. Also note that the code will do case-insensitive compares, so the prompts may actually be specified case-independent.<p>
Using the HP Ansi C compiler, the command to compile the code as POSIX is:<p>
<pre>
cc -Ae -D_POSIX textpage.c -o textpage
</pre><p>and to compile the code as System V:
<p><pre>
cc -Ae textpage.c -o textpage
</pre><p>To keep things simple, I wrote the sample program to read its parameters from the runstring. The program expects a pager PIN, the message to send, and an optional debug flag. For example:<p>
<pre>
textpage 00001234 "The 9:00am staff meeting has moved to
10:00am." debug
</pre><p>The debug mode is useful in getting the prompts right and also in uncovering problems such as having to enter PINs as 8-digit numbers. Listing 2 shows this case with actual sample output from the program with debug mode on.<p>
<B>Conclusion</b><p>In this article, I showed how to perform basic serial device communications. I have used these techniques to write communication drivers for modems, bar code printers, programmable controller interfaces, and many other serial devices.<p>
The sample program (Listing 3) was taken from a larger program that I wrote for our in-house paging needs. (All Listings can be found at: <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.) This larger "paging engine" runs as a daemon and processes pages via files received from many different applications. I hope you find the program useful.




<h1>About the Author</h1><p>










Ross Goldman is a UNIX sys admin, NT systems administrator, and C programmer. He works for CDI Computer Services and is currently on assignment at Ford Motor Company's Utica Trim Plant. He may be reached via email at: <B>rgoldma1@mailhost.ptpd.ford.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
