<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i11: Managing Multi-File System Backup Using dump/restore</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1998/nov98.tar"><b class=codeListing>nov98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Managing Multi-File System Backup Using dump/restore</H1><p>
<p>Yufan Hu<p>
As UNIX system administrators, many of us are still using our good old friends, <B>dump</B> and <B>restore</B>, to do backups and restores for our UNIX file systems. <B>dump</B> and <B>restore</B> are some of the oldest and most popular backup tools used on many UNIX systems, especially those derived from BSD.<p>
Over the years, the combination of <B>dump</B> and <B>restore</B> has proven its reliability and simplicity. Small is beautiful has been the philosophy of programming since the very beginning of the UNIX system. <B>dump</B> and <B>restore</B> are small, reliable, and flexible. They are not only able to do backup jobs independently, but are also able to be integrated with other programs to complete more sophisticated jobs.<p>
<B>Root is Relative</b><p>On UNIX, the file system refers to the entire directory tree starting from the root, <B>/</B>. From a user's point of view, there is no concept of a partition or a disk. Everything is located within this giant directory.<p>
For administrators, the view is a bit different. We still have the concept of disk and disk partitions. We put a disk or a partition into the overall file system by mounting the disk or partition onto a directory. After mounting, the contents of the root directory of the disk become the contents of the mounting directory. The overall file system is thus expanded without the users noticing the difference, except for the added directory tree branch. From the administrator's view, we call the directory tree in a single disk or disk partition a file system. We call the directory on which we mount the file system the mounting point of that file system.<p>
The <B>dump</B> command is made to back up one file system at a time. To back up a file system, we simply use <B>dump</B> as in:<p>
<pre>
dump  0bdsf  126  54000  13000  /dev/rst8  /home
</pre><p>Where <B>/home</B> is the mounting point of the file system. It is also possible to specify the disk or partition device name for the file system instead of the mounting point, as in:<p>
<pre>
dump 0bdsf 126 54000 13000   /dev/rst8   /dev/sd2f
</pre><p>I prefer using the mounting point to the device name, because the mounting point is more meaningful than the device name as far as the backup/restore process is concerned.<p>
<B>dump</B> can also do incremental backups by specifying different dump levels, as in:<p>
<pre>
dump 5bdsf 126 54000 13000 /dev/rst8 /dev/sd2f
</pre><p>A simple daily incremental backup plan can be set up as follows:<p>
<pre>
Sunday    Full backup      dump 0bdsf 126 54000 13000 /dev/rst8 /home

Monday    Backup changes   dump 9bdsf 126 54000 13000 /dev/rst8 /home
made on Monday

Tuesday   Backup changes   dump 8bdsf 126 54000 13000 /dev/rst8 /home
made on Tuesday

Wednesday Backup changes   dump 7bdsf 126 54000 13000 /dev/rst8 /home
made on Wednesday

Thursday  Backup changes   dump 6bdsf 126 54000 13000 /dev/rst8 /home
made on Thursday

Friday    Backup changes   dump 5bdsf 126 54000 13000 /dev/rst8 /home
made on Friday</pre><p>
<p>
dump</B> is also able to dump a file system onto a tape drive on a remote system by specifying a remote device name for the tape drive, as in:<p>
<pre>
rdump 5bdsf 126 54000 13000 back:/dev/rst8 /home

</pre><p>After <B>dump</B> finishes the backup, it automatically rewinds the tape.<p>
<B>Backup Multiple File Systems</b><p>Since <B>dump</B> is only for a single file system backup, we can only back up a file system residing on one disk partition each time we invoke <B>dump</B>. As a simple backup tool, <B>dump</B> always thinks it dumps one disk partition to one tape. In many cases, it may not be feasible to back up only one file system onto one whole tape. For example, we may have many small partitions, such as <B>/</B>, <B>/usr</B>, <B>/usr/local</B>, etc., which have only a couple of hundred megabytes, but a relative large tape with say 5 GB. When performing an incremental backup, we almost always have many file systems with only a few megabytes of data to be backed up. In these situations, we certainly want to dump all these file systems onto one tape. This way it not only saves the tape media, but also saves the effort needed to change the tapes.<p>
By using a so-called "non-rewinding" device name for the same tape drive, we can fool the <B>dump</B> to use only a segment of the tape for one file system. The following simple shell script dumps three file systems onto one tape, one after another.<p>
<pre>
#!/bin/sh

mt -f /dev/nrst8 rewind
dump 0bdsf 126 54000 13000 /dev/nrst8 /
dump 0bdsf 126 54000 13000 /dev/nrst8 /usr
dump 0bdsf 126 54000 13000 /dev/nrst8 /usr/local
mt -f /dev/nrst8 rewind
</pre><p>Since we are using the non-rewinding device driver, <B>dump</B> will not automatically rewind the tape after it finishes the backup. When <B>dump</B> is started for the next file system, it simply writes to the media following the previous dump. Thus it makes dumping multiple file systems onto one tape possible.<p>
We can use the <B>mt</B> command to force the tape to rewind before the whole backup process starts and after it finishes. It is also possible to dump multiple file systems located in different hosts onto one tape. For example:<p>
<pre>
#!/bin/sh

rsh back mt -f /dev/nrst8 rewind
rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /
rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /usr
rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /usr/local
rsh walnut rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /
rsh peanut rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /usr
rsh chesnut rdump 0bdsf 126 54000 13000 back:/dev/nrst8 /local
rsh back mt -f /dev/nrst8 rewind
</pre><p>The above shell script controls the backing up of different file systems located on different hosts to the tape drive on the host named as "back".<p>
<B>Restoring from a dump</B> <B>Tape</b><p>Restoring files from a <B>dump</B> tape is also straightforward. Suppose <B>/home</B> has been dumped to a tape, and we want to restore files in <B>/home/yufan</B>. We can do this via command <B>restore</B> in interactive mode:<p>
<pre>
shell&gt; restore if /dev/rst8
restore&gt; add yufan
restore&gt; extract
</pre><p>The above interaction will extract the directory <B>yufan</B> into the current directory. From here, we can copy the files to their destination.<p>
The <B>restore</B> command is also simple. It has no idea of multiple file systems on one tape. It takes the given device as a tape and tries to read from it as one file system.<p>
<B>restore</B> can also be fooled using the non-rewinding device driver, but it is a bit more difficult than <B>dump</B>. Before we can use <B>restore</B> on a tape segment, we must make sure the beginning of the segment is currently under the tape head, because <B>restore</B> cannot read the dumped file system from the middle of a segment. This effect can be achieved by using the <B>mt</B> command to manually position the tape to the beginning of the segment. For example, if we want to restore files from <B>/usr/local</B> and the tape was created using the shell script previously shown, we can use following commands to restore <B>/usr/local/lib</B>:<p>
<pre>
shell&gt;mt -f /dev/nrst8 rewind
shell&gt;mt -f /dev/nrst8 fsf 2
shell&gt;restore if /dev/nrst8
restore&gt;add lib
restore&gt;extract
</pre><p>We used <B>mt -f /dev/nrst8 fsf 2</B> to move the head forward two EOF marks, thus skipping the segment for <B>/</B> and <B>/usr</B>. This leaves the head at the first block of the segment.<p>
<B>Pitfalls</b><p>It is straightforward to dump multiple filesystems onto a tape. We can simply write a shell script to call multiple <B>dump</B> commands, one after another, until all file systems are backed up or the tape is exhausted. We can also write the script so that it logs in to other machines on the local network and fires the <B>dump</B> command there to remotely backup the file systems to the tape. This way we are able to put more than a dozen file systems onto a tape. There is really no rule as to the maximum you can put onto a tape. It is certainly possible to put 10, 20, or even 30 file systems onto a big tape, especially when we are doing incremental backup.<p>
But then how are we going to restore from any one of these segments? Is the file system I wanted in the tape? If so, in which segment? How many EOFs do we need to forward before we can reach the segment?<p>
If we can keep the shell script, we can always check the script, count the number of dump <B>commands</B> before the target segment, and issue a <B>mt</B> command with the proper number of <B>fsf</B>. This seems perfect until the day you need to change the script to add and delete file systems. The script no longer matches any old tapes. Keeping backup copies of these scripts may be one solution, but from time to time you need to know which script was used.<p>
Even if a good matching record can be found for each tape, counting the number of segments each time we need to restore something is certainly not a pleasant job. This is a job meant to be done by the computer instead of a human. After years of suffering, I finally decided to give our old friends a little help so they can be a bit more friendly. The results are the two Perl scripts, <B>mdump</B> and <B>mrestore</B> to make the <B>dump</B>/<B>restore</B> job a bit easier.<p>
<B>mdump - Keep a Record of Multiple Dumps</b><p>As discussed above, it is vital to keep a record of what has been dumped to the tape and its exact location (in which segment) on the tape. The best place to store this record is on the tape itself. This way the record always correctly represents the tape, and the two will not be separated.<p>
Since we can use the non-rewinding device to divide the tape into multiple segments for <B>dump</B>, we might as well allocate one such segment for the purpose of housekeeping. The first segment is the one to use, because it can be read before we move to any other segments.<p>
<B>mdump</B> simply stores the list of all file systems, in the form of the mounting point directory names, and in the order these file systems are stored in the tape. It simply prints the names as a string, using <B>;</B> as the delimiter, and pipes the result to the <B>dd</B> command to store the string in the first segment of the tape.<p>
When we <B>dump</B> multiple file systems from multiple hosts, one problem we may encounter is name clashing. Mounting point <B>/usr</B> can exist on more than one host. And, if <B>/usr</B> on all these hosts is to be dumped onto the tape, how can we distinguish among them? Even if we only <B>dump</B> multiple file systems on the same host to a tape, we may still have the problem of determining which host these file systems belong to if we forgot to properly label and mark the tapes.<p>
To prevent this lost identity problem, <B>mdump</B> does some name normalization before storing the names onto the tape. It uses the form of <B>host:/directory</B> to distinguish each dumped file system. This form of naming is also expected as arguments passed to <B>mdump</B> for any remote file systems that need to be dumped. If a local file system is given to <B>mdump</B> without the leading host part, the local host name is automatically added. This way we will not lose track of which segment belongs to which file system on which host, because all the information has been recorded on the tape itself.<p>
Apart from simple housekeeping job, <B>mdump</B> also tries to automate some scripting work. It always automatically rewinds the tape when started to ensure that the housekeeping information is recorded at the beginning of the tape. <B>mdump</B> can automatically eject the tape if instructed to do so via a command-line option. It will also decide whether to use local <B>dump</B> or a remote <B>dump</B> via <B>rsh</B> based on the host on which the file system resides.<p>
The basic command-line syntax of mdump is as follows:<p>
<pre>
mdump [options] filesystem filesystem....
</pre><p>We can have following minimum options:<p>
<B>-l num</B> - Indicates the <B>dump</B> level. num can be from 0 to 9, where 0 represents a full dump.<p>
<B>- f dev</B> - Indicates the device name for the tape. It can take the form <B>host:/dev/nrst8</B> to indicate a remote tape drive.<p>
<B>-u</B> - Indicates that we want the <B>/etc/dumptable</B> to be updated for incremental backup.<p>
<B>-e</B> - Instructs <B>mdump</B> to eject the tape when finished.<p>
We can pass as many file systems to <B>mdump</B> as the tape is capable of holding. Each file system name can be a local directory name that represents the local mounting point of the file system, or can be in the form of <B>host:/directory</B> if it is a remote one. We can also put all these file system names into a plain text file (one line for each file system) and pass the file to <B>mdump</B>. <B>mdump</B> will read the file for the file system names to be dumped.<p>
With <B>mdump</B>, the previous shell script used to dump multiple partitions can be reduced to a one-line command.<p>
<pre>
mdump -l 0 -f  back:/dev/nrst8 peanut:/ peanut:/usr peanut:/local walnut:/
walnut:/usr walnut:/local
</pre><p>This one-liner can be nicely fitted into the <B>crontab</B> to do scheduled system backup jobs. A sample <B>crontab</B> for backup using <B>mdump</B> can be as follows:<p>
<pre>
50 23 * * 0 mdump -e -u -l 0 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
50 23 * * 1 mdump -e -u -l 9 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
50 23 * * 2 mdump -e -u -l 8 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
50 23 * * 3 mdump -e -u -l 7 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
50 23 * * 4 mdump -e -u -l 6 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
50 23 * * 5 mdump -e -u -l 5 -f back:/dev/nrst8 peanut:/ peanut:/usr \
peanut:/local walnut:/ walnut:/usr walnut:/local
</pre><p>Note that we use the <B>-e</B> option to automatically eject the tape, so that it will not be accidentally rewritten.<p>
<B>mdump</B> will preserve the order in which these file systems appear on the command line or in the text file. Although this order is less important, as <B>mrestore</B> is capable of locating the segment automatically, we might want to put frequently accessed file systems toward the beginning of the tape to speed up the restoring process.<p>
<B>mrestore - Restoring from a Multi-File System dump Tape</b><p>After all the hard work done by <B>mdump</B>, restoring from a multi-file system <B>dump</B> table becomes a straightforward job. For example, if we want to restore files or directories for <B>/usr</B> on <B>walnut</B>, the following command will bring us straight to the segment:<p>
<pre>
mrestore -f back:/dev/nrst8 walnut:/usr
</pre><p>From there, we can use whatever <B>restore</B> command to do the interactive restoring of the files or directories from the segment.<p>
<B>mrestore</B> expects a file system name convention similar to <B>mdump</B>. When such a file system name is given, <B>mrestore</B> automatically consults the housekeeping information stored at the first segment on the tape and calculates the segment number of the file system. It then uses the <B>mt</B> command to position the tape at the beginning of that segment.<p>
Unlike the native <B>restore</B> command, you can pass more than one file system names to the <B>mrestore</B> command. The <B>mrestore</B> command will sort the names according to the sequence of the corresponding file system stored on the tape. It will sequentially position the tape to the corresponding segment for us to do the restoring work one file system after another, without rewinding the tape for each file system.<p>
To identify the contents of a tape created by <B>mdump</B>, we can use <B>mrestore</B> to list the contents of the tape:<p>
<pre>
mrestore -l -f back:/dev/nrst8</pre><p>
<p>Conclusion and Issues
mdump</B> and <B>mrestore</B> are simple Perl scripts that wrap the native system <B>dump</B> and <B>restore</B> commands. They are intended to bring some convenience when performing multiple file system backups to a single tape cartridge.<p>
Even though <B>mdump</B> does some housekeeping for the contents it stores, it can not replace the current organization of our backup archives. We still need to clearly mark and label tapes. <B>mdump</B> does not have any idea of the contents other than that of the tape it created. We need our own approach to organizing tape archives if we ever want to restore anything from them. The current version of <B>mdump</B> and <B>mrestore</B> do not deal with multi-volume <B>dump</B> archives very well. They are not intended for such multi-tape backups. To do remote backup using <B>dump</B>, we need to use the <B>rmt</B> protocol and <B>rsh</B> command. These commands require proper setting of <B>.rhosts</B> file, which may be of some security concern.



<h1>About the Author</h1><p>










Dr. Yufan Hu started his system administration and software development career using UNIX in 1983 on a PDP-11/23. Since then, UNIX System and network administration have been part of his research and development career. He is currently in charge of networking and system-related activities for Regent Electronics Corp. He can be reached at: <B>yufan@recmail.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>