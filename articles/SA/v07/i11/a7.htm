<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i11: Creating User Accounts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1998/nov98.tar"><b class=codeListing>nov98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Creating User Accounts</H1><p>
<p>Steven Bellenot<p>
The code for generating user accounts is often one of the most site-specific pieces of software that a system administrator grows. Every system has its quirks, and the account generation program must cover them all. Every account generator does the same basic tasks: creates the user account in a password database, creates the user's home directory, copies the possibly customized dot files into this new directory, and performs whatever else your particular site requires. The generator described in this article was intended for use on undergraduate student accounts, and the quirks there included: disk space quotas, interfacing with a home grown printer accounting program, and of course the first email that specifies the rules of the road. A less obvious requirement was adding all the students to same netgroup and using that netgroup to limit which computers they could use. The account generator described here has been in production use for a couple of years.<p>
The source for this generator is available at:<p>
<pre>
ftp://ftp.mfi.com/pub/sysadmin/1998/nov98.tar.Z
</pre><p>The source contains more than a dozen files, mostly C code and Bourne shell scripts and a Tcl/Tk file to glue it together. A mock database and NIS setup is included, so you can easily build a working demo. The demo has been tested on a Linux system, as well as the Sun environment.<p>
Seemingly, one of the constants in any computer environment is that there is always an account generator in place and it always breaks. The old generator at our site was a batch system. Classroom instructors would send a list of names by email and get back a hard copy list of accounts with new random passwords assigned by the program. The old system had several spectacular failures. The list of names was assumed to be in the form <B>firstName lastName</B>, and "John Doe" would get the account name "jdoe". If the instructor listed the names backwards, like Doe, John, the account name became "djohn". If the instructor added a comma, like "John Doe," the account name became "jdoe," with the comma. If the instructor listed a double first name, like "Mary Jo Doe," and the next name was "John Deer", it generated accounts "mjo", "djohn", and crashed because it couldn't find a match for the first name "Deer". But the really spectacular failure came when I ran the batch system on a list that still included the mail header.<p>
<B>The New Requirements</b><p>There were three goals for the new account generator. First, we needed to get the instructors out of the loop. We especially didn't like the need to hand out slips of paper with passwords on them. Second, we wanted the computer lab assistants to do all the work. This was particularly a problem because the account NIS database was maintained on a machine that only system people could log onto. The lab assistant had an X terminal. And finally, we were able to acquire the enrollment data from the registrar, so any typos were part of the student official record and not part of the chaos added by us. This enrollment information was modified until there were flat ASCII files for every math class section, which contained a line like:<p>
<pre>
lastName firstName perhapsOtherNames socialSecurityNumber otherJunk
</pre><p>for every student in that section.<p>
One of the problems with automatic generation of account names by rules such as these is name collusions. In our case, both Jane Doe and John Doe would map to the user name "jdoe". Even the old generator was smart enough to detect a duplicate hit and abort generation of the duplicate. We added another file to the enrollment database that allowed us to fudge duplicates. The above collusion could be avoid by adding "John Doe2" to this special file, so his user name became "jdoe2". Or we could add "J ohnDoe" to the file to make his user name "johndoe". Currently, this name collusion problem is the only case where a system person is involved with the undergraduate account generation. Collusions are rather rare; forgotten passwords are much more common.<p>
An additional requirement was self-imposed. I used this opportunity to learn and use Tcl/Tk to generate a GUI interface for the lab assistant. I used example routines from an earlier addition of Welch's excellent book on Tcl/Tk. Since then, my students and I have used Tcl/Tk in a number of other programs with good success. I am not a graphic designer; the GUI is merely functional and not a work of art.<p>
<B>NIS and Netgroups</b><p>We use Netgroups to decide which group of people can log on to which machines. Our typical <B>/etc/passwd</B> file has the "standard users", such as root, bin, and nobody then a few lines at the bottom like:<p>
<pre>
+@uaccount:x::::::/etc/uaccount-shell
+@ulab:x::::::/etc/not-here-try-there
+@sysadmin:::::::
+:x::::::/etc/nicer-not-here-shell
</pre><p>This particular machine accepts only people in the <B>sysadm netgroup</B>, for all other uses, it accepts their login but runs a different shell program listed in <B>/etc/passwd</B>. The "not-here" shells are compiled c programs, which just print a message and exit. The "uaccount-shell" is describe below. The order in which these occur is important: login takes your first match, and the last + matches everyone (in particular it matches the boss, hence the "nicer"). Warning: On Solaris 2.x this is not the default behavior for <B>passwd</B>. The <B>passwd</B> line in <B>/etc/nsswitch.conf</B> needs to be "passwd: compat".<p>
In NIS, the netgroup database is created from the <B>netgroup</B> file. For example, <B>netgroup</B> has lines like:<p>
<pre>
sysadmin (,dude1,) (,dude2,) (,dude3,)
uaccount (,labasst1,) (,labasst2,)
eqhosts (host1,,) (host2,,) (host3,,)
ulab0 (,name1,) (,name2,)
ulab1 (,name21,) (,name22,)
ulab2 (,name41,) (,name42,)
ulab ulab0 ulab1 ulab2.
</pre><p>The format is described in detail in <B>netgroup</B>(4), however note that the first field is for hosts, the second for user names, and the last for NIS domains. The multiple "ulab" lines are a way of overcoming the line limit for <B>/etc/netgroup</B> of around 1000 characters. The <B>netgroup</B> "ulab" will contain all the user names on any of the <B>ulab[012]</B> lines.<p>
<B>Solution Architecture</b><p>Here is a run down of the sequence of events for starting the account generator program. The lab assistant sits in the lab in front of an X terminal called hostA, and starts the program by running a program which just does <B>rlogin nis-master</B>. Since the assistant is in the <B>netgroup</B> "uaccount", this starts the program <B>/etc/uaccount-shell</B> as the assistant's shell. This is a compiled c program, which sets the <B>DISPLAY</B> environment variable to <B>hostA:0.0</B>, and executes the main GUI program <B>account.tcl</B>. This <B>account.tcl</B> is now running on the "nis-master", but displaying on the lab assistant's X terminal. (In some environments, the initial program might have to do an <B>xhost nis-master</B> so that the "nis-master" would have permission to draw on the X terminal <B>hostA</B>. That is not the case here, because the lab assistant has the same home directory on both machines.)<p>
The GUI program is now running, and the lab assistant and student can use it to add a user. The GUI allows them to browse the database of students allowed to add accounts and select one. The student is authenticated both by the lab assistant and by the student's ID number. The GUI can only add accounts of the form &lt;first initial&gt;&lt;last name or the first seven letters of the last name&gt;; if there is already such an account, the session fails. Failure is benign; the GUI merely returns to the browsing window. The GUI also checks that the password is good. Once the user password combination has been approved, the GUI calls a setuid c program to do all the work.<p>
The C program updates both the <B>passwd</B> and <B>netgroup</B> database, and calls <B>ypmake</B> to update the database. It calls an even older account-generating script, which creates the home directory, copies the initial dot files, sets up the users quota, turns on printing privileges, and mails the standard "greeting and rules letter". The C program keeps both the <B>passwd</B> and <B>netgroup</B> file in alphabetical order.<p>
<B>The Tcl/Tk Code</b><p>The GUI code in <B>src/account.tcl</B> uses <B>wish4.2</B> (Tcl7.6/Tk4.2) and borrows a couple of slightly modified procedures, <B>GetValue</B> and <B>ScrolledListBox2</B> from the example code to the first edition of Welch's <I>Practical Programming in Tcl and Tk</I> (<B>http://www.beedub.com/book/</B>). <B>GetValue</B> is a generic dialog box that gets one value. <B>GetValue</B> is set to non-echo mode when asking for a password. The class roll database is displayed in two scrolled list boxes, each generated via <B>ScrolledListBox2</B>. The files in the <B>db</B> directory are in the list box to the left, and the students in the selected class are displayed in the listbox to the left. Selecting a class in the class list evokes the procedure, <B>FileSelect</B>, which parses the class file and enters the data in the second listbox.<p>
Selecting a student in the second list box evokes the procedure <B>StudentSelect</B>. <B>StudentSelect</B> is the heart of the system. First, it constructs the user name via the <B>LoginName</B> procedure. It makes sure there is not already a user account with this name via <B>AlreadyAccounted</B>. If the user name is new, then we use the <B>GetValue</B> to get their student number. The student number usually is the social security number. Some folks enter this number as a string of nine digits, while others use hyphens to give the form xxx-xx-xxxx. StudentSelect handles both forms, and if this number matches the one in the database, we continue with the password. As usual, the password must be typed twice and run though the procedure <B>pwok</B> to make sure the password is "difficult" enough. Finally, we call on some utility C code to finish job. The <B>crypt</B> program encrypts the password, which is passed to the <B>addone</B> program to finish adding the user. Finally, our action is logged via <B>logit.sh</B>.<p>
A more-experienced Tcl/Tk programmer likely would not design the program this way. The script is used to glue existing programs together, and some of these programs could also be easily done in Tcl/Tk.<p>
<B>The C Code</b><p>The <B>crypt.c</B> code is very straightforward. It picks a random salt and encrypts the given password using the <B>crypt(3c)</B> call. The random salt means the same password is encrypted differently for different calls.<p>
The <B>addone.c</B> code (and its helpers, the other files in <B>src</B>) is not very transparent. This code has been abused; basically picks a uid for the user and then updates the system files for the <B>passwd</B> and <B>netgroup</B>. (In the demo case, these files are in the directory <B>../nis</B>.) Finally, it calls the oldest add user script and mails the welcome notice. The code locks certain files to ensure sequential access with other password utilities.<p>
The <B>netgroup</B> code (<B>newnetgp.c</B>) is perhaps the most interesting helper. The new login user name is added via <B>AddItem</B>, then the old <B>netgroup</B> file is parsed for all names in this group via <B>MergeNetgroups</B>. Each <B>ulab netgroup</B> line is parsed with <B>ProcessUlabLine</B> adding the items with <B>AddItem</B>. The whole list is sorted with qsort via <B>SortItems</B> and then output to the "netout" file. This last task is done via OutputUlabGroups. Apparently, there is a limit in this code; it will break if around 10,000 students are in this one <B>netgroup</B>.<p>
Another interesting item is the way the <B>passwd</B> file is updated. The file <B>temp.pw</B> contains the new line for the <B>passwd</B> file. (This would need modification if your NIS system used both <B>passwd</B> and shadow files.) The shell script <B>vipw.kludge</B> uses <B>vi</B> to read and sort the <B>passwd</B> file. The <B>vipw.kludge</B> file is a HERE document, and the lines between the two "HERE" are almost exactly as they would be typed during a <B>vi</B> editing session. We move to the end of the file, read in the <B>temp.pw</B> file, then the file is sorted and written out. (The original <B>vipw.kludge</B> used <B>vipw</B> to lock the <B>/etc/passwd</B> file.)<p>
When these programs were updated to Solaris 2.x, it was noticed that shell scripts did not work the same. The <B>addone.c</B> code contained several system calls that didn't work anymore. The <B>suidsystem.c</B> and <B>cp.c</B> programs were essentially attempts to get around the system call not working. We discovered that all that was needed was to add the option <B>-p</B> to the shell scripts.<p>
The file locking code was necessary because other users could be updating their passwords (via <B>yppasswd</B>). The <B>newlock.c</B> does the file locking so that <B>yppasswd</B> and <B>addone</B> correctly take turns updating passwords and accounts.<p>
The <B>uid.c</B> does a straightforward search to find the next unused uid in the <B>passwd</B> file. Our <B>passwd</B> file is sorted by user name, so an inspection of the whole file is necessary. The last two acts of <B>addone</B> are to mail root a message and to create the home directory and other user files via the <B>copyfiles.sh</B>.<p>
<B>The Shell Script</b><p>The shell script <B>copyfiles.sh</B> is really the old <B>adduser</B> script. It creates the home directory and copies configuration files such as <B>.login</B>. For <B>.login</B>, it changes the default printer. The group and owner of these new files are changed to the new user. The initial disk quota is set. Our printer accounting software checks for a file which is created next, then quotas for files on a remote machine are set. Finally, the welcome message is mailed.<p>
<B>Final Words</b><p>This system just grew. In that, it does show how a hodge podge of techniques can be used, but it certainly is not an example of clear design or implementation. Note that in this implementation, passwords are sent over the wire in clear text. It is also possible to use X Windows and NIS unsecurely.




<h1>About the Author</h1><p>










Steve Bellenot has a Ph.D. in Mathematics from Claremont Graduate University. He is currently a member of the sys admin faculty at Florida State University. His interests include Scientific Visualization and cooperative computing. Steve can be reached at: <B>bellenot@math.fsu.edu</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
