<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i11: Alternate Boot Devices</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1998/nov98.tar"><b class=codeListing>nov98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Alternate Boot Devices</H1><p>
<p>Jim McKinstry<p>
Ever have a hard drive crash? What a pain. Replace the drive, slice it up, create the filesystems, restore the data (and pray that the backup tapes are good). One-hour downtime, minimum. Ever lose the hard drive that the operating system is on (the boot device)? It's no fun recovering from an OS disk crash. Boot from CD or tape, more backup tapes and prayers, and with a little luck your machine is back in action. There's nothing worse than spending hours in a disaster situation trying to recover. With an alternate boot device, those hours can be turned into minutes. This article discusses how to set up alternate boot devices on HP and Sun and explains why they are a good idea.<p>
<B>What Are Boot Devices?</b><p>A system's boot device is the disk slice where the "root" file system is installed and consequently where the installed system will boot from. While you only need the "root" filesystem to boot a system, I prefer to include the <B>/usr</B>, <B>/opt</B>, <B>/tmp</B>, and <B>/var</B> filesystems as well <B>swap</B> and <B>dump</B> as part of a "boot device". This allows me to have a complete working system even after losing my primary boot disk. I also like to keep all of these items on one dedicated hard drive. In the past, I've set up systems with these filesystems scattered over different hard drives, but that was more difficult to manage. I learned that using one hard drive eases management of the operating system and limits the odds of crashing the system due to a hard drive failure. Ideally, the primary boot device hard drive should be mirrored to virtually eliminate outages due to a hard drive crash. (Alternate boot devices don't need to be mirrored since they are not vital for normal system operation.)<p>
An alternate boot device is another disk slice that contains the information needed for the operating system to boot and operate, which sits idle most of the time. The alternate boot device does not need to be the same OS level as the primary boot device or be at the same patch level. Again, I consider my alternate boot device as a collection of root, plus the <B>/usr</B>, <B>/opt</B>, <B>/tmp</B>, and <B>/var</B> filesystems, as well <B>swap</B> and <B>dump</B> all on one disk.<p>
<B>Pros and Cons</b><p>The pros far outweigh the cons where alternate boot devices are concerned. Cost is the only negative I can think of, in that you need an extra, dedicated hard drive sitting idle for a majority of the time. A few years ago, that would have been really expensive. Now, however, storage is very cheap. On the positive side, an alternate boot device is priceless when you need to add patches, upgrade an OS, recover from a hard drive failure, or recover from corruption of a critical file.<p>
<B>Corrupted/Lost Data</b><p>Have you ever typed <B>rm -rf &lt;enter&gt;</B> and thought, "Oops! I'm not in <B>/tmp</B>... I'm in <B>/etc</B>!" No matter how quickly you press the Ctrl-C sequence, you've lost some critical data. Then you have to get out the backup tapes and begin the restoration process. With a current alternate boot device configured, all you need to do is copy the alternate <B>/etc</B> directory to the "real" <B>/etc</B> directory.<p>
A more frightening experience is the failure of the default boot device. Without an alternate boot device, you are dead in the water until a new hard drive can be installed, configured, and the OS can be recovered. With an alternate boot device, you simply boot off the alternate device and are back in production. You can then schedule downtime to replace the bad drive during a normal maintenance window. Once the drive has been replaced, reboot from the alternate boot device to configure the new drive, then copy the data from the alternate device to the new device and reboot from the new device.<p>
<B>Patches/Operating System Upgrades</b><p>One of the most difficult tasks for system administrators is upgrading an operating system on a production server. The risk associated with such a task is tremendous. One mistake and your production server can be ruined. Patches, although usually safe, should always be checked by installing them while booted off of the alternate boot device and then reinstalling them on the primary boot device after testing. With an alternate boot device, you can upgrade the alternate device and thoroughly test it. No matter what you do to the alternate device, you can always boot from the primary boot device and be back where you started within minutes. Once the upgrade is complete and fully tested, you just copy everything onto the primary boot device and reboot.<p>
<B>The Process</b><p>Below are the steps that should be followed to setup an alternate boot device on HP-UX 10.X, using Logical Volume Manager, and Solaris 2.5.1 or 2.6.<p>
<B>Assumptions</b><p>I assume that the primary boot device is already set up with "root", <B>/usr</B>, <B>/opt</B>, <B>/tmp</B>, <B>/var</B> , <B>swap</B>, and <B>dump</B> on one disk drive. I also assume that the alternate boot device is the same size as the primary boot device. For the Solaris example, I assume that the current primary boot device is set up "correctly." This example uses the <B>c0t0d0s2</B> as the primary boot device and <B>c1t0d0s2</B> as the alternate boot device.<p>
<B>Partition the Alternate Boot Disk<p>
Solaris</b><p>Partitioning (also known as "slicing") the alternate boot disk is easy for Solaris.<p>
1.  Capture the format of the primary boot disk:<p>
<pre>
prtvtoc /dev/rdsk/c0t0d0s2 &gt; /tmp/boot_disk.vtoc</pre><p>
<p>The <B>prtvtoc</B> command displays the volume table of contents (VTOC) for the primary boot disk. I save that in a file, so that I can edit it and use it as input to the <B>fmthard</B> command. See the sidebar for a description of the output of <B>prtvtoc</B>.<p>
2.  Edit <B>/tmp/boot_disk.vtoc</B> to format it for the <B>fmthard</B> command. The raw output of the <B>prtvtoc</B> command and the edited version will be similar to that shown in Figure 1.<p>
3.  Format the alternate boot disk:<p>
<pre>
fmthard -s /tmp/boot_disk.vtoc /dev/rdsk/c1t0d0s2</pre><p>
<p>
fmthard</B> uses the formatting information contained in <B>/tmp/boot_disk.vtoc</B> (specified with the "<B>-s</B>" option) to write the VTOC information for <B>/dev/rdsk/c1t0d0s2</B>. You could also slice the disk by hand using the format command.<p>
<B>HP-UX</b><p>Since I'm using Logical Volume Manager, the setup of the disk is more involved.<p>
1.  First, we have to initialize the disk for use by volume manager:<p>
<pre>
pvcreate -B /dev/rdsk/c1t0d0</pre><p>
</b><p>The <B>-B</B> option for <B>pvcreate</B> makes it a bootable physical volume.<p>
2.  To make a Volume Group for the alternate boot filesystems, create a directory for the Volume Group information (I name all of my volume groups vg&lt;some name or number&gt;):<p>
<pre>
mkdir /dev/vgaltboot</pre><p>
<p>
3.  To make the group file (I am using 0x020000 as the minor number here), use a minor number that is not already in use. To find out what is being used, do <B>ls -l</B> for each Volume Group directory and look at the minor numbers for all of the group files. If all of your volume groups start with a "vg", then you can do <B>ls -l /dev/vg*/group</B> to list all of the group files.<p>
<pre>
mknod /dev/vgaltboot/group c 64 0x020000</pre><p>
<p>
4.  Now that we have initialized the disk, and we created the directory and the group file, we can create the volume group:<p>
<pre>
vgcreate /dev/vgaltboot /dev/dsk/c1t0d0</pre><p>
<p>5.  The last step is to create the logical volumes. The volume size, denoted by the "-L" option, is purely hypothetical in this case (the sizes used will fill a 4GB drive). Note that lvol1, lvol2 and lvol3 will be used for /stand, swap and / and are therefore contiguous (defined with the "-C y" option):<p>
<pre>
lvcreate -C y -L 48 -r n -n lvol1 /dev/vgaltboot
lvcreate -C y -L 800 -r n -n lvol2 /dev/vgaltboot
lvcreate -C y -L 84 -r n -n lvol3 /dev/vgaltboot
lvcreate -L 600 -n lvol4 /dev/vgaltboot
lvcreate -L 512 -n lvol5 /dev/vgaltboot
lvcreate -L 1024 -n lvol6 /dev/vgaltboot
lvcreate -L 1024 -n lvol7 /dev/vgaltboot</pre><p>
<p><b>Make the Alternate Boot Device Bootable<p>
Solaris</b><p>Again, since I'm not using any kind of Volume Management tool, this step is simple for Solaris.<p>
1.  The following command installs a ufs bootblock on slice 0 of the alternate boot disk:<p>
<pre>
installboot   /usr/platform/`uname -I`/lib/fs/ufs/bootblk   /dev/rdsk/c1t0d0s0</pre><p>
<p><b>HP-UX</b><p>
First, we install the boot programs onto the disk. <B>mkboot</B> is used to install boot programs on a device.  The <B>-l</B> option says that the device is a Logical Volume, and the <B>-a</B> option creates an autoexecute file, AUTO, on the device and puts the string into that file. In this case, the string is <B>hpux (0/4.1.0;0)/stand/vmunix</B>. This allows the system to automatically boot from this device. Use <B>ioscan -fnC</B> disk to find the hardware path (e.g., 0/4.1.0) for the disk.<p>
<pre>
mkboot -l -a "hpux (0/4.1.0;0)/stand/vmunix" /dev/rdsk/c1t0d0</pre><p>
<p><p>
HP-UX also requires you to define the volume as bootable as well as defining the volume as the root volume. We also need to define the <B>swap</B> and <B>dump</B> volumes. We will use the <B>lvlnboot</B> with various options to prepare the proper volumes.<p>
1.  The boot volume must be the first volume in the volume group, and it must be contiguous. In this example, that would be <B>lv0l1</B>:<p>
<pre>
lvlnboot -b lvol1 /dev/vgaltboot</pre><p>
<p><p>
2.  HP-UX uses <B>swap</B> for the dump area. This must also be contiguous storage (<B>lvol2</B> in this example).<p>
<pre>
lvlnboot -s lvol2 /dev/vgaltboot
lvlnboot -d lvol2 /dev/vgaltboot</pre><p>
<p><p>
3.  The last step is to define the root area. This is another volume that must be contiguous storage. In this case, I use <B>lvol3</B>.<p>
<pre>
lvlnboot -r lvol3 /dev/vgaltboot</pre><p>
<p><b>Set Up the New Filesystems<p>
Solaris</b><p>Next, we need mountpoints and filesystems in order to copy the primary boot device data onto the alternate boot device.<p>
1.  Create the mountpoints:<p>
<pre>
mkdir  /alt_root
mkdir  /alt_var
mkdir  /alt_opt
mkdir  /alt_usr
</pre><p>
<p>2.  Create the filesystems:<p>
<pre>
newfs  /dev/rdsk/c1t0d0s0
newfs  /dev/rdsk/c1t0d0s1
newfs  /dev/rdsk/c1t0d0s5
newfs  /dev/rdsk/c1t0d0s6</pre><p>
<p>3.  Add the following lines to <B>/etc/vfstab</B> for the new mountpoints:<p>
<pre>
/dev/dsk/c1t0d0s0   /dev/rdsk/c1t0d0s0   /alt_root   ufs   2   yes   -
/dev/dsk/c1t0d0s1   /dev/rdsk/c1t0d0s1   /alt_var    ufs   2   yes   -
/dev/dsk/c1t0d0s5   /dev/rdsk/c1t0d0s5   /alt_opt    ufs   2   yes   -
/dev/dsk/c1t0d0s6   /dev/rdsk/c1t0d0s6   /alt_usr    ufs   2   yes   -
</pre><p><b>HP-UX</b><p>These steps for HP are almost identical to Sun.<p>
1.  Create the mountpoints:<p>
<pre>
mkdir  /alt_root
mkdir  /alt_var
mkdir  /alt_opt
mkdir  /alt_usr
mkdir /alt_stand
mkdir /alt_tmp
</pre><p>
<p>2.  Create the filesystems (note that <B>lv0l1</B>, the boot volume, must be <B>hfs</B>. I use <B>vxfs</B> on all of the other volumes to take advantage of the benefits of <B>vxfs</B> technology):<p>
<pre>
newfs -F hfs /dev/vgaltboot/rlvol1
newfs -F vxfs /dev/vgaltboot/rlvol3
newfs -F vxfs /dev/vgaltboot/rlvol4
newfs -F vxfs /dev/vgaltboot/rlvol5
newfs -F vxfs /dev/vgaltboot/rlvol6
newfs -F vxfs /dev/vgaltboot/rlvol7
</pre><p>
<p>3.  Add the following lines to <B>/etc/fstab</B> for the new mountpoints:<p>
<pre>
/dev/vgaltboot/lvol1    /alt_stand    hfs    defaults    0    1
/dev/vgaltboot/lvol3    /alt_root     vxfs   delaylog    0    1
/dev/vgaltboot/lvol4    /alt_opt      vxfs   delaylog    0    2
/dev/vgaltboot/lvol5    /alt_tmp      vxfs   delaylog    0    2
/dev/vgaltboot/lvol6    /alt_usr      vxfs   delaylog    0    2
/dev/vgaltboot/lvol7    /alt_var      vxfs   delaylog    0    2
</pre><p>
<p><b>Copy the Data</b><p>Now that the disk is partitioned and the filesystems are created, we can copy the data from the primary device to the alternate.<p>
<B>Solaris</b><p>1. Mount all of the new filesystems:<p>
<B><p>
mountall<p>
</b><p>2. Copy the data:<p>
<pre>
ufsdump 0f - / | (cd /alt_root; ufsrestore xf -)
ufsdump 0f - /var | (cd /alt_var; ufsrestore xf -)
ufsdump 0f - /usr | (cd /alt_usr; ufsrestore xf -)
ufsdump 0f - /opt | (cd /alt_opt; ufsrestore xf -)</pre><p>
<p><p>
<b>HP-UX</b><p>1. Mount all of the filesystems:<p>
<pre>
mountall
</pre><p>2.  Copy the data. I use <B>cpio</B> here to show a "generic" way of doing this:<p>
<pre>
cd /; find . -xdev -depth -print | cpio -puxdm /alt_root
cd /stand; find . -xdev -depth -print | cpio -puxdm /alt_stand
cd /var; find . -xdev -depth -print | cpio -puxdm /alt_var
cd /usr; find . -xdev -depth -print | cpio -puxdm /alt_usr
cd /opt; find . -xdev -depth -print | cpio -puxdm /alt_opt
</pre><p>
<p><b>Test It</b><p>To test the alternate boot device, we will boot from it and verify that the system is running normally. Before we boot from the alternate device, however, we need to setup the <B>fstab/vfstab</B> on the alternate disk so that the correct filesystems are mounted at boot.<p>
<B>Solaris</b><p>1.  Earlier, we added lines in the <B>vfstab</B> file for the new filesystems that we created. When we boot from the alternate device, we want the new filesystems to be mounted as <B>/</B>, <B>/opt</B>, <B>/var</B>, and <B>/usr</B>, and the original filesystems to be mounted as <B>/alt_root</B>, <B>/alt_var</B>, <B>/alt_usr</B>, and <B>/alt_opt</B>. You can modify <B>/alt_root/etc/vfstab</B> manually or use something like:<p>
<pre>
sed "s/c0t0d0s/somethingunique/" /alt_root/etc/vfstab | sed <br>   "s/c1t0d0s/c0t0d0s/" | sed "s/somethingunique/c1t0d0s/" &gt; <br>   /alt_root/etc/vfstab.altboot

* cp /alt_root/etc/vfstab.altboot /alt_root/etc/vfstab</pre><p>
<p>
1.  We need to tell the system what device to boot from. First, we find the full device path name of the alternate boot device:<p>
<pre>
ls -l /dev/dsk/c1t0d0s0
</pre><p>returns something like:<p>
<pre>
lrwxrwxrwx   1 root   root     50 Jun 29 13:52 c1t0d0s0 -&gt; ../../devices/
sbus@3,0/SUNW,fas@3,8800000/sd@0,0:a</pre><p>
<p>We will need the <B>/sbus@3,0/SUNW,fas@3,8800000/sd@0,0:a</B>.<p>
2.  We will now get to an "ok" prompt to boot from the alternate device.<p>
<B><p>
shutdown -y -i0 -g0<p>
</b><p>3.  From the "ok" prompt, you can boot directly from the alternate boot device or setup an alias and boot using that. I will show both:<p>
Use the long name:<p>
<pre>
boot /sbus@3,0/SUNW,fas@3,8800000/sd@0,0:a
</pre><p>Setup an alias and use that:<p>
<pre>
nvalias altboot /sbus@3,0/SUNW,fas@3,8800000/sd@0,0:a

boot altboot
</pre><p>A quick test to check if you are running off the alternate device is to do a <B>df -k</B> and verify that <B>/</B>, <B>/var</B>, <B>/usr</B>, and <B>/opt</B> are all mounted from the alternate boot disk (<B>/dev/dsk/c1t0d0s0</B>). Also check that the "alt" filesystems are mounted from the original device (<B>/dev/dsk/c0t0d0</B>). Reboot, and you'll automatically come up off the original boot device.<p>
<B>HP-UX</b><p>1.  As in Solaris, we swap the original filesystems with the new "alt" filesystems. Again, you can modify <B>/alt_root/etc/fstab</B> by hand or use <B>sed</B>. I assume that the original filesystems were set up on <B>vg00</B>, which is the default when installing HP-UX:<p>
<pre>  sed "s/vg00/somethingunique/" alt_root/etc/fstab | sed "s/vgaltboot/vg00/" |
sed "s/somethingunique/vgaltboot/" &gt; alt_root/etc/fstab.altboot

cp /alt_root/etc/fstab.altboot /alt_root/etc/fstab

</pre><p>2.  HP allows you to boot from your alternate device from the command line. Use the <B>setboot</B> command to view/set the primary and alternate boot devices. <B>setboot</B> returns something like:<p>
<pre>
Primary bootpath : 8/0.0.0
Alternate bootpath : 10/0.6.0

Autoboot is ON (enabled)
Autosearch is OFF (disabled)
</pre><p>The alternate bootpath is usually defaulted to a CD or tape device. We want to set the primary boot path to be our new device:<p>
<pre>
setboot -a 0/4.1.0

</pre><p>and the alternate bootpath to be the original device:<p>
<pre>
setboot -a 8/0.0.0
</pre><p>Now a <B>setboot</B> returns:<p>
<pre>
Primary bootpath : 0/4.1.0
Alternate bootpath : 8/0.0.0

Autoboot is ON (enabled)
Autosearch is OFF (disabled)

</pre><p>3.  Reboot the server to come up using the alternate boot device.<p>
<pre>
shutdown -y -r 0

</pre><p>4.  Again, a quick test can be performed by doing a <B>bdf</B> and verifying that <B>/</B>, <B>/var</B>, <B>/usr</B>, and <B>/opt</B> are all mounted off the alternate boot disk (<B>/dev/vgaltboot</B>), and that the "alt" filesystems are mounted off the original device (<B>/dev/vg00</B>).<p>
5.  After testing, use the <B>setboot</B> command to set the primary bootpath back to the original bootpath, and the alternate bootpath to the new boot device. Reboot, and you'll be back up on the original boot device.<p>
<B>Conclusion</b><p>The steps above should provide a guide to setting up an alternate boot device on your systems. The basic steps will be the same on any UNIX box with the specifics dependent on the OS. I highly recommend investing the time and money to install another hard drive and implement an alternate root device, especially if your server is mission critical. However, if your root disk is not mirrored and you can only get funding for one drive, then I recommend mirroring the root hard drive before adding an alternate boot device. An alternate boot device is very useful and highly recommended, but a mirrored root disk is absolutely essential in a 7x24 shop.




<h1>About the Author</h1><p>










Jim is a Technical Analyst specializing in UNIX for Sprint Paranet. He has also worked for IBM, EDS, and Rite Aid. He can be reached at: <B>jrmckins@yahoo.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
