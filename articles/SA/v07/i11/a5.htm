<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i11: Managing a Distributed Software Library Using LUDE</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/1998/nov98.tar"><b class=codeListing>nov98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Managing a Distributed Software Library Using LUDE<p>
</H1><p>Charles Gagnon<p>
Few sites use only one flavor of UNIX. Even if they use the UNIX from a single vendor, they rarely have only one release installed at one time. Commercial software vendors usually issue new releases or patches every six or eight months, and freely distributed software and applications are often updated more frequently. These elements can make managing a distributed software library a challenge for system administrators.<p>
I recently implemented a software repository using a combination of LUDE 2.1(*), a freely available tool from the University of Montreal, and the automounter, now available on most UNIX platforms. This solution eases management and maintainance of multiple versions of public domain software, as well as commercial applications. It also makes testing and upgrading to newer releases a more uniform and documentable process, and allows upgrades to be done by one system administrator or multiple administrators working in concert.<p>

LUDE is a public domain application allowing the compilation and the installation of all software packages. It organizes the packages such that each software package is kept in a separate subdirectory, but local copies of the binaries and man pages are available without editing the <B>$PATH</B> and <B>$MANPATH</B> environment variables. In addition, more than one release of a package can co-exist during transitions.<p>
The LUDE/automounter solution also makes all the applications on the server available from one NFS-mounted <B>/usr/local </B>directory, solving the problem of managing long $PATH variables on countless machines.<p>
<B>Preparing The File Server</b><p>To build your repository, you will need one server to hold all the applications locally. This NFS server will also share the files for the rest of the community. The needed disk space naturally depends on how many applications will be installed. I strongly recommend using a volume manager so that file systems can be resized as necessary. A previous implementation was done using an Ultra2 from Sun Microsystems running Solaris 2.6, augmented by a RAID5 array from Box Hill. This server easily could have been a PowerPC running AIX or a Pentium-based server running Linux. For our example, let's call the file server "repository".<p>
First, create the directories needed under <B>/export</B>. (I like the <B>/export</B> structure because it seems logical to me, but it could be anywhere):<p>
<pre>
/export/local/SunOS5.5.1/
/export/local/SunOS5.6/
/export/local/AIX4.2/
/export/local/AIX3.2/
/export/local/Linux2.0.31/
/export/soft/
</pre><p>I created one directory per architecture/OS release in my environment. The names are usually the concatenation of <B>uname -s</B> and <B>uname -r</B> making it easy to obtain with a script. To mount the directories, I use the automounter and my NIS automount maps. For example, on your NIS server, make sure the <B>auto.master</B> map contains:<p>
<pre>
/- auto.direct
</pre><p>Add the following lines to your <B>auto.direct</B> map:<p>
<pre>
/usr/local   -rw,soft   repository:/export/local/${OSNAME}${OSREL}/
/usr/soft    -rw,soft   repository:/export/soft
</pre><p>These two directories will be know as the "depot" (<B>/usr/soft</B>) and the "public" (<B>/usr/local</B>) directories. I'll explain their exact role when I discuss LUDE.<p>
Some UNIX flavors, like Solaris, support the <B>${OSNAME}</B> and <B>${OSREL}</B> variables "out of the box". For other implementations of UNIX, such as AIX or SunOS 4.1.x, you will need to restart the automounter with <B>-D</B> arguments:<p>
<pre>
/usr/sbin/automountd -D OSNAME=AIX -D OSREL=4.2
</pre><p>Since Linux doesn't support the direct (/-) mounts with the automounter, I mounted all of them under <B>/apps</B> using this extra line in the <B>auto.master</B>:<p>
<pre>
/apps auto.linux
</pre><p>The <B>auto.linux</B> map should look exactly like the <B>auto.direct </B>map for the other machines:<p>
<pre>
local   -rw,soft   repository:/export/local/${OSNAME}${OSREL}/
soft    -rw,soft   repository:/export/soft
</pre><p>The directories <B>/apps/local</B> and <B>/apps/soft</B> will later need to be manually linked to <B>/usr/local</B> and <B>/usr/soft</B>, respectively. It's a dirty workaround but it works. Once this setup is complete, you should be able to see the following mounts on a client or the repository machine:<p>
<pre>
sun_client# mount
repository:/export/local/SunOS5.5.1/ on /usr/local
repository:/export/soft on /usr/soft
aix_client# mount
repository:/export/local/AIX4.2/ on /usr/local
repository:/export/soft on /usr/soft
linux_client# mount
repository:/export/local/Linux2.0.31/ on /apps/local
repository:/export/soft on /apps/soft
</pre><p>
<p><b>Downloading and Installing LUDE</b><p>
LUDE is built around Perl5. You will therefore need to download and install the latest copy of Perl5 if it isn't already on your system. You can download the latest Perl sources from <B>ftp.perl.org</B>, by downloading the latest <B>.tar.gz</B> file located in the <B>/pub/perl/CPAN/src/</B> directory. A multitude of other sites also offer sources and pre-compiled binary versions of Perl5. Installing and configuring Perl5 is beyond the scope of this article, but I recommend you follow the Perl literature for that task.<p>
You can retrieve the latest copy of LUDE form the University of Montreal <B>ftp</B> server (<B>ftp.iro.umontreal.ca/pub/lude/</B>). The file is called <B>lude.tar.gz</B>, and the latest release, when this article was written, was 2.1.22. Perl and LUDE are the only files you should have to download to build your software library.<p>
Then, extract the LUDE archive in a temporary location on your file server:<p>
<pre>
$ zcat lude.tar.gz | tar -xvf      or
$ tar -zxvf lude.tar.gz
</pre><p>Once the sources are extracted, run the "configure" script for LUDE. The script does several things, including checking for the presence of specific files, trying to bootstrap Perl5 if necessary, localizing your LUDE installation for your specific site, and creating makefiles. This script will also ask several questions. To make your task easier, you should prepare your answers beforehand. Note that the script will provide default answers.<p>
<ul>
<li>What are the other classes that the current machine can be identified with? (list of classes separated by blanks)<p>
The classes in LUDE define the different architectures LUDE will have to work with. In our example environment, we will create different classes. The class name should match the names of your public directories in <B>/export</B>. It is not a requirement, but it makes everything clearer. I don't usually use LUDE's default class names, because I find them too long. The classes in our example will be:<p>
<p>
SunOS5.6<br>
SunOS5.5.1<br>
Linux2.0.31<br>
AIX4.2<br>
AIX3.2<br>
<p>
Next, the "configure" script will ask for the various paths needed for the installation:<p>
<li>What is the default public tree you want to use for your LUDE installation? [<B>/usr/local</B>]<p>
The public tree will be the shared directory containing all the packages. Each "class" will have its own copy of the public tree. It's important here to answer with <B>/usr/local</B> and not <B>/export/SunOS5.6</B>, because the LUDE commands and functions will be executed from any client on our network. <B>/usr/local</B> should be the correct directory (<B>/export/${OSNAME}${OSREL}</B>) on all clients.<p>
<li>What is the default server root directory you want to use for your LUDE installation? [<B>/usr/local/server</B>]<p>
I don't currently use the server feature of LUDE, so I would leave this answer as the default.<p>
<li>What is the default depot you want to use for your LUDE installation? [<B>/usr/soft</B>]<p>
The depot will contain all the LUDE packages. I will explain later the role of the depot. I usually choose <B>/usr/soft</B> as my depot. Again, answer <B>/usr/soft</B> and not <B>/export/soft</B> for the same reasons as before.<p>
<li>In which depot should this release of LUDE be installed? [<B>/usr/soft</B>]<p>
</ul><p>This indicates where to install the LUDE files. It should be the same as the previous question.<p>
At the end of the configuration, the script will ask whether <B>make install</B> should be run for you. Since we want to do some modifications, I recommend answering "no" at this time. The second to last step will be to personalize some of LUDE files. I normally modify the file "ludeguess" located in <B>src/bin</B> of the LUDE built tree. This script is used to guess the class for a machine. It uses a combination of <B>uname</B> commands to determine the class. I normally modify this file to return the proper class names. For SunOS machines, I replace the line [88]:<p>
<pre>
echo sparc_sun_solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`
</pre><p>
<p>with:<p>
<pre>
echo "`uname -s``uname -r`"
</pre><p>
</b><p>This <B>echo</B> statement should work for most platforms, but you can pretty much decide what the class name will look like for each platform and release of the OS. Finally, run <B>make install</B> to finish your LUDE installation. This last step will create the required directories and install all the required LUDE files.<p>

<B>How LUDE Works</b><p>Here's a short overview of the way LUDE handles things and how it can make life easier. In a LUDE environment, the files will never be installed in <B>/usr/local</B> directly. All your files should reside in the <B>/usr/soft</B> structure. You will also have one subdirectory per package, and all of those will be created automatically:<p>
<pre>
/usr/soft/procmail-3.11
/usr/soft/procmail-3.09
/usr/soft/maker-5.5
</pre><p>Each package directory will contain a compiling space (<B>src</B>) per class (plus one for the originals) and a binary space (<B>run</B>) per class. Figure 1 illustrates this directory structure for a "typical" package in LUDE.<p>
LUDE provides a space to compile and install software packages for a multitude of platforms. It also makes these packages easier to manage, because everything related to one application resides in one directory.<p>
The command format for LUDE is:<p>
<pre>
lude --{some_function} --package {package_name}
</pre><p>Let's take a look at the major LUDE commands:<p>
<B>create</B> - The <B>lude --create</B> is the option used to create a new package when installing new software. One command has to be issued for each architecture for which the package will be installed. For example:<p>
<pre>
lude --create --package procmail-3.11 --class SunOS5.6
lude --create --package procmail-3.11 --class AIX4.2
</pre><p>This function creates the directory structure in which the package will live.<p>
<B>duplicate</B> - Once the original sources are in place, the duplicate option will make a copy of the source for a certain class.<p>
<B>unduplicate</B> - Undo the package duplication. LUDE removes all files that were not changed during the compilation process.<p>
<B>release</B> - Once a package is ready and compiled, all the locks are removed using the release option. File locking is important in LUDE, because people could work on the same package from different machines.<p>
<B>install</B> - The most important function of LUDE. Once the package is compiled and installed, the administrator will be able to create links from everything under the "run" directory of LUDE directly to the public directory [<B>/usr/local</B>] on you repository.<p>
<B>uninstall</B> - Remove the links in the public directory.<p>
<B>remove</B> - The remove option will remove all trace of the package both in the public directory [<B>/usr/local</B>] and in the software depot [<B>/usr/soft</B>].<p>
<B>The RCS Example</b><p>Let's look at an example of using the LUDE environment to manage the installation of RCS. I'll explain the installation process of RCS within the LUDE environment step-by-step. For the example, I will assume LUDE was installed properly, and the automounter setup explained earlier was completed.<p>
<B>Building RCS for SunOS5.6 and AIX4.2</b><p>First, we need to access a machine that runs SunOS5.6 and mounts the LUDE directories (<B>/usr/local</B> and <B>/usr/soft</B>). Note that the only step where you need a machine of the right architecture is for the compilation, otherwise, any machine with NFS write access to <B>/usr/local</B> and <B>/usr/soft</B> will do. The first step is to create the package directories:<p>
<pre>
$ cd /usr/soft
$ lude --create --pack rcs-5.7
</pre><p>Since I'm on a SunOS5.6 machine, the guessed class is already SunOS5.6. But if wanted to create the same package for AIX, I would need to explicitly declare the class:<p>
<pre>
$ lude --create --pack rcs-5.7 --class AIX4.2
$ ls -l
[...]

drwxr-xr-x   5 charlesg css           512 Sep 23  1997 rcs-5.7/
[...]
</pre><p>That <B>rcs-5.7</B> directory contains the <B>src</B> and the <B>run</B> subdirectories needed to compile and install the RCS binaries and man pages. Now let's extract the sources. The <B>{package-name}/src/orig</B> is there to extract the original sources, as downloaded from the Net:<p>
<pre>
$ cd /usr/soft/rcs-5.7/src/orig
$ tar -zxf /tmp/rcs-5.7.tar.gz
</pre><p>All the sources were extracted in the <B>rcs-5.7/src/orig</B> directory. So, we'll make one copy for the SunOS compile and one copy for the AIX compile. We use the duplicate option of LUDE to achieve that:<p>
<pre>
$ lude --duplicate --pack rcs-5.7 [--class SunOS5.6]
$ lude --duplicate --pack rcs-5.7 --class AIX4.2
</pre><p>Now we have two copies of the sources, the SunOS version is in <B>rcs-5.7/src/default/SunOS5.6</B>, and the AIX version in <B>rcs-5.7/src/default/AIX4.2</B>. Let's configure and compile the SunOS version first.<p>
<pre>
$ cd /usr/soft/rcs-5.7/src/default/SunOS5.6/
</pre><p>At that point, follow the instructions for the various packages. The packages normally contain a README or an INSTALL file with all the necessary instructions. The only thing you will need to modify is the target directory or the directory where everything will be installed. In the case of RCS, I used the <B>--prefix</B> option of the "configure" script.<p>
<pre>
$ ./configure --prefix=/usr/soft/rcs-5.7/run/default/SunOS5.6
$ make all
$ make install
</pre><p>All my RCS binaries, libraries, and man pages are now compiled and installed under <B>/usr/soft/rcs-5.7/run/default/SunOS5.6</B>. Later, I'll explain why the users won't have to know that path.<p>
For the AIX platform, you will need access to a machine capable of compiling for AIX. The procedure stays the same otherwise.<p>
Once the package is built and installed, we can clean up and unduplicate all the "unchanged" files from the <B>src</B> directory. The only files kept are the original sources and those modified during the SunOS5.6 or the AIX4.2 build. That feature allows the administrator to recompile any application easily. Next time the <B>lude --duplicate</B> is run, the configuration of the last build will still be there for all the platforms supported in your environment. If you frequently have to make minor changes to a compiled piece of code, not counting the actual release revisions, LUDE will definitely be helpful for you.<p>
To clean up our installation:<p>
<pre>
$ make clean
$ cd /usr/soft
$ lude --unduplicate --pack rcs-5.7 [--class SunOS5.6]
</pre><p>The last step is the actual installation of the package. This is where all the static links are created between the "run" environment of LUDE and the public directory. One simple command will create all the links:<p>
<pre>
$ lude --install --package rcs-5.7 [--class SunOS5.6]
</pre><p>Once the install is done, the application is available from <B>/usr/local/bin</B> and its man pages from <B>/usr/local/man</B>. The application physically lives under the <B>run/default/SunOS5.6</B> directory, but it is effectively linked in the <B>/usr/local</B> for the correct platform. This simple step makes accessing the software easier for the users and also eases management of the <B>$PATH</B> variable for the administrators. Figure 2 gives an overview of the structure, including the <B>/usr/soft</B> (depot) and the <B>/usr/local</B> (public) directories. If you look closely at the example after the <B>lude --install</B>, you will find that:<p>
<pre>
sun_client$ which rcs
/usr/local/bin/rcs
sun_client$ ls -l /usr/local/bin/rcs
rcs@ --&gt; /usr/soft/rcs-5.7/run/default/SunOS5.6/bin/rcs*

aix_client$ which rcs
/usr/local/bin/rcs
aix_client$ ls -l /usr/local/bin/rcs
rcs@ --&gt; /usr/soft/rcs-5.7/run/default/AIX4.2/bin/rcs*</pre><p>
<p>Other Tricks</b><p>Once this static link process is well understood, many interesting things can be done. I used this same process to manage commercial applications and pre-built software packages. I simply skip the use of the package/src structure, and copy or install the files directly in the run/default structure. Once my files are copied, I can install the application using:<p>
<pre>
$ lude --install --package package_name</pre><p>
</b><p>and links will be created for me. In my current environment, for example, FrameMaker was installed using the same technique:<p>
<pre>
$ cd /usr/soft/maker-5.5/run/default/5.6


$ ls -l
drwxr-xr-x   4 charlesg css    512 Mar  9 18:20 Maker-5.5/
drwxr-xr-x   2 charlesg css    512 Mar  9 18:25 bin/</pre><p>
</b><p>Once linked using <B>lude --install</B>, users use <B>/usr/local/bin/maker</B> to launch FrameMaker, and the <B>$FMHOME</B> is set to <B>/usr/local/Maker-5.5</B> for everyone.<p>
Changing versions and upgrading software becomes a truly trivial task. The "run" environment of LUDE can also be used as a testing environment for new releases. The files can be installed in <B>package/run/default/</B> and fully tested before being linked in <B>/usr/local</B> to replace the old version.<p>
This process can make managing packages easier because the administrator is able to build new versions of the software and install them only when fully tested and ready for production. To install a release of RCS, the administrator would simply run:<p>
<pre>
$ lude --uninstall --package rcs-5.6
$ lude --install --package rcs-5.7
</pre><p>If a mistake was made while upgrading to <B>rcs-5.7</B>, the administrator could, for example:<p>
<pre>
$ lude --uninstall --package rcs-5.7
$ lude --install --package rcs-5.6
</pre><p>That wouldn't really delete or move any files, but it would simply change the static links in <B>/usr/local</B>.<p>
<B>References</b><p>LUDE2 Documentation at:<p>
<p>
<B>http://www.iro.umontreal.ca/contrib/lude/lude2_toc.html</b><p><p>
<I>Managing NFS and NIS</I>. Hal Stern and Mike Loukides. 1991. O'Reilly &amp; Associates.<p>
LUDE was developed at the University of Montreal Computer Sciences Department. More info is available from <B>www.iro.umontreal.ca/contrib/lude/</B>.




<h1>About the Author</h1><p>










Charles Gagnon has a degree in Electrical Engineering but is now working as a Consultant for Collective Technologies. Currently working on site at Bell Atlantic, he supports a heterogeneous UNIX environment. Collective Technologies specializes in systems management consulting, helping clients manage their complex, distributed client/server computing environments. Charles can be reached at: <B>charlesg@colltech.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>