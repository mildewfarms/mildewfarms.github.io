<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05: Security Tools in FreeBSD</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Security Tools in FreeBSD<p>
</H1><p>Guy Helmer<p>
Any UNIX system administrator or network manager on a tight budget, but with a need for stable, high-performance network servers, is prompted to consider alternatives to conventional commercial operating systems. While FreeBSD and similar systems obviously offer inexpensive alternatives for UNIX-like workstations and servers, their suitability from a security perspective may be less obvious. This article explores FreeBSD's security features with an eye toward assisting you in making a decision about whether it is suitable for your requirements.<p>
Before launching into an exploration of FreeBSD, suffice it to say that the relationship of UNIX to Internet security is a massive topic. There are numerous books and other resources that discuss various elements of the subject, some of which are included in the Resource List at the end of this article. In particular, the interested reader is referred to <I>Practical UNIX and Internet Security</I> [5] and <I>Firewalls and Internet Security</I> [4], which are two of many well-known books on this topic.<p>
<B>Features of FreeBSD and Relatives</B><p>
FreeBSD offers several features not usually found in stock UNIX-like systems. Some of these features are common to other BSD-derived systems (NetBSD and OpenBSD) or Linux, so one may wish to consult the system's documentation to see whether these features are available.<p>
<B>System Security Levels</B><p>
UNIX system security has suffered from the all-powerful access given to the root-privileged user. Once a cracker obtains root privileges, the entire system becomes vulnerable to the cracker. The 4.4BSD-derived systems offer a new security feature called "system security levels" (see the man page for <B>init(8)</B> for details on these security levels). Raised system security levels prevent certain actions on a system irrespective of a user's privilege. Used properly, this can prevent an assortment of system compromises, including the introduction of Trojan horses and back doors into system binaries and modification of configuration files.<p>
System security levels are: -1, permanently insecure mode; 0, insecure mode - no additional protections enabled; 1, secure mode - files may be protected from modification and memory device special files may not be opened for writing; 2, highly secure mode - protection of level 1 plus disk devices may not be opened for writing; 3, extended secure mode - protection of level 2 plus the IP packet filter list may not be changed. The default system security level of -1 is called "permanently insecure mode" because <B>init(8)</B> will not automatically raise the level to 1 when the system goes into multiuser mode as it would if the security level were 0.<p>
The default system security level is -1, which corresponds to "normal" security for a traditional UNIX system. Raising the security level above 0 causes the kernel to disallow the following operations:<p>
<ul>
<li>Changes to any file whose immutable flag is set (see the <B>chflags(1)</B> man page for the <B>schg</B> flag).
<li>Removal of the immutable and append-only flags on files.
<li>Direct writes to disk devices which are mounted at security level 1, or direct writes to all disk devices at security levels higher than 1.
<li>Writes to the <B>/dev/mem</B> and <B>/dev/kmem</B> device special files.
<li>Loading any loadable kernel module.
<li>Changes to the IP packet filter lists (at security levels greater than 2).
</ul>
<p>When a FreeBSD system is installed by using a make world on the source code, a number of system files are installed with the immutable flag set. In general, executable files that are <B>setuid</B> root are installed with the immutable flag. Note that systems installed via <B>sysinstall</B> (e.g., installed via the network or from CD-ROM) do not have the immutable flag set on any files by the installation program.
At any time, the <B>schg</B> flag may be set on files with <B>chflags</B>, but the flag can only be cleared when the system is at security level -1 or 0. During multi-user operation, the system security level may only be raised. The command to raise the security level to level 1 is:<p>
<pre>
sysctl -w kern.securelevel 1
</pre><p>The system security level can be raised automatically at system startup by including the above <B>sysctl</B> command in the system's <B>/etc/rc.local</B> file (and <B>/etc/rc.local</B> should then have its <B>schg</B> flag set as well). Raising the security level will limit file management activities, so you may not wish to use this feature on frequently changing systems. Once the security level has been raised, the only way to lower the security level is to restart the system. If one needs to perform maintenance on the system, it can be booted into single user mode where the security level will be its default of -1.<p>
<B>IP Firewall</B><p>
Several TCP/IP protocols included with FreeBSD, such as NFS and NIS, may be more secure if they are unaccessible from outside the trusted part of the network. For protocols that may not be restricted any other way, a packet filter that allows only designated protocols can be used to block external access. The book <I>Building Internet Firewalls</I> [3] is suggested as a good introduction to IP packet filtering.<p>
FreeBSD's kernel option IPFIREWALL enables IP firewalling, which applies filter rules to IP packets entering or exiting the machine. When a kernel built with the IPFIREWALL option starts, its default action is to drop every IP packet; additional filter rules must be given to a system to allow it to accept desired IP packets. The startup script <B>/etc/rc.firewall</B> provides sample filters, which must be modified before they can be used. The sample filter types are selected by the firewall option in <B>rc.conf</B>, which include:<p>
<p>
<B>open</B> - No limitations on any protocols; any IP packet may enter or exit any interface.<p>
<B>client</B> - Protects a system which is a client on a network. Given the client system's network number, subnet mask, and IP address, a basic filter is set up to allow all traffic originating from or destined for the local network, to allow packets for any established TCP connection, to allow incoming email and any outgoing TCP connection, and to allow Domain Name Service and Network Time Protocol UDP packets (everything else is denied).<p>
<B>simple</B> - Set up a simple packet filter on a system that routes between networks, which is suitable for a simple FreeBSD router with two network interfaces. Given the network numbers, subnet masks, and IP addresses of the external ("unsafe") network and internal ("safe") network, this option in <B>rc.firewall</B> creates a packet filter that:<p>
<ul>
<li>Prevents outside packets with a source IP address of the internal network from entering, and likewise prevents packets from going outside unless they have a source address of the internal network (to prevent spoofing),
<li>Allows all packets for established TCP sessions,
<li>Allows TCP connections for incoming email, DNS, and World Wide Web requests,
<li>Rejects and logs all attempts to connect to TCP services other than those allowed above,
<li>Allows all DNS and Network Time Protocol UDP requests and responses,
<li>Denies anything not explicitly allowed.
</ul><p>
If the system security level is above 2, changes are not allowed to the packet filter list. This allows a system administrator to prevent modifications to the packet filter list in the event of a system compromise, much like the raised security level can prevent modifications to parts of the filesystem. The IP firewall option can assist in monitoring potential attacks on a system. The kernel option IPFIREWALL VERBOSE enables logging of packet filtering messages via <B>syslogd(8)</B>. The logged information can be useful in spotting port scanning or break-in attempts.<p>
<B>One-Time Passwords</b><p>Password sniffing has been plaguing the Internet for some time [2]. Users logging into <B>telnet</B> or <B>ftp</B> across the Internet may be well advised to use one-time passwords for logins from remote sites to avoid having their reusable password captured and abused by crackers. FreeBSD uses the S/Key software [6] to provide one-time passwords. Users can set up one-time passwords on a FreeBSD system by using the command:<p>
<pre>
keyinit
</pre><p>which will ask for a private password (which probably should be different than the regular system login password, but doesn't have to be) that only the user knows, and then <B>keyinit</B> will show something like:<p>
<pre>
ID fred s/key is 99 sp99609
BUY OUR BOLD LEER YOKE COW
</pre><p>Then, the user can generate a series of one-time passwords to take on her travels by using the command:<p>
<pre>
key -n 10 98 sp99609
</pre><p>which will ask for the user's private password used in the <B>keyinit</B> step above and generate the one-time passwords for the next 10 logins (98 down to 89). The user can print these passwords and take them along for her next remote logins over the Internet. (Of course, the printed password list poses other security concerns.)<p>
A FreeBSD system can require the use of S/Key passwords for logins from all sites other than local systems. The file <B>/etc/skey.access</B> (see the <B>skey.access(5)</B> manual page for complete information about this file) defines where S/Key passwords must be used. For example, if the administrator trusts the systems in his own network (numbered 172.16), but wants users to always use S/Key one-time passwords for logins from other sites, he could use a <B>/etc/skey.access</B> file like this:<p>
<pre>
permit 172.16.0.0 255.255.0.0
deny
</pre><p>Noe that <B>/etc/skey.access</B> does not affect all remote access methods, just <B>telnet</B>, <B>ftp</B>, and <B>rlogin</B>. For example, <B>ssh</B>, <B>pop</B> daemons, and <B>imap</B> daemons ignore S/Key restrictions.<p>
<B>Disallowing Logins</b><p>An administrator can completely restrict <B>telnet</B> and <B>ftp </B>access for particular users and sites by adjusting the <B>/etc/login.access</B> file. This option can reduce the usefulness of compromised passwords by limiting the sites from which a system can be abused (see the <B>login.access(5)</B> manual page for details on this file).<p>
Note that <B>login.access</B> does not affect all remote access methods, just <B>telnet</B>, <B>ftp</B>, and <B>rlogin</B>. For example, <B>ssh</B>, <B>pop</B> daemons, and <B>imap</B> daemons ignore the restrictions in <B>login.access</B>.<p>
For example, if an administrator wanted to allow logins for all accounts to his or her system from two networks, 172.16 and 192.168.32, and allow all users in the group wheel to also login from the system with IP address 192.168.2.2, this <B>/etc/login.access</B> file could be used:<p>
<pre>
+:ALL:172.16.
+:ALL:192.168.32.
+:wheel:192.168.2.2
-:ALL:ALL
</pre><p>
<p>Conclusion</b><p>Thanks to its development team and support from related developers, FreeBSD is a solid system that can be configured to stand up to security attacks. While the default installation is still fairly open and friendly to users, FreeBSD provides many security mechanisms and several add-on packages that can improve a system's resistance. These security improvements can ensure the operation and availability of the system as well as the confidentiality of the information it contains.<p>
<B>Acknowledgments</b><p>Thanks to Adam Shostack, Falko Dressler, Robert N. Watson, and other anonymous reviewers for significant comments on previous versions of an article on which this article was based. Thanks to the FreeBSD core team and all of the FreeBSD contributors who have made FreeBSD an excellent performing, extremely stable operating system. Thanks also to the developers who produce security fixes, usually within days after security issues are found.<p>
<B>References</b><p>
[1] Steven M. Bellovin. Security problems in the TCP/IP protocol suite. <I>Computer Communications Review</I>, 19(2), April 1989.<p>
[2] CERT Advisory 94.01: <I>Ongoing network monitoring attacks</I>. [Online] <B>ftp://info.cert.org/pub/cert- \<br>advisories/CA-94:01.network. \<br>monitoring.attacks</B>, August 17 1997.<p>
[3] Brent Chapman and Elizabeth Zwicky. 1995. <I>Building Internet Firewalls</I>. O'Reilly &amp; Associates, Inc., Sebastopol, CA.<p>
[4] Bill Cheswick and Steve Bellovin. <I>Firewalls and Internet Security: Repelling the Wily Hacker</I>. 1994. Addison-Wesley.<p>
[5] Simson Garfinkel and Eugene H. Spafford. 1996. <I>Practical UNIX and Internet Security</I>, Second Edition. O'Reilly &amp; Associates, Inc., Sebastopol, CA.<p>
[6] Neil M. Haller. The S/KEY one-time password system. In <I>Proceedings of the Internet Society Symposium on Network and Distributed System Security</I>, San Diego, CA. February, 1994.<p>
[7] Robert T. Morris. A weakness in the 4.2BSD UNIX TCP/IP software. <I>Science of Computer Programming</I>, February 25, 1985.<p>
[8] Jennifer G. Steiner, B. Clifford Neuman, and Jeffrey I. Schiller. Kerberos: An authentication service for open network systems. In <I>Proceedings of the Winter 1988 Usenix Conference</I>, February, 1988. (Version 4).<p>
[9] Wietse Venema. TCP wrapper: Network monitoring, access control, and booby traps. In <I>Proceedings of the UNIX Security III Symposium</I>. USENIX, September, 1992.




<h1>About the Author</h1><p>










Guy Helmer is a graduate student in Computer Science at Iowa State University, concentrating on security in operating systems and networks. Previously, Guy was a system programmer and network engineer for a university, where he engineered local and wide area networks and administered UNIX servers, including several FreeBSD servers. Guy has been a beta tester and occasional contributor for the FreeBSD Project since its inception.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>