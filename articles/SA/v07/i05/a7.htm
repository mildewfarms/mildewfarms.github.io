<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05: Assessing CPU Utilization</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Assessing CPU Utilization<p>
</H1><p>Joe Berry<p>
Part of the art (as opposed to the science) of system administration is knowing the difference between normal and abnormal operation on each of the systems being administered. To gain that insight, administrators often examine both the overall activity on the system and the behavior of individual processes as they relate to the total system performance.<p>
When investigating the performance characteristics of a particular process, the CPU utilization percentage is one of the first things that comes to mind. Is the CPU percentage high and, if so, why? If the answer, for example, is 27%, what does that mean? Is that a good number or a bad number? Is the process utilizing 27% of the entire computer (whatever that means)?<p>
In this article, I look at CPU percentage as displayed by three different tools, <B>ps</B>, <B>top</B>, and <B>sar</B>. Of these three, only <B>sar</B> does not display process-specific performance metrics. To simplify this discussion (for the time being, at least), I will assume that the computer I am monitoring has only one CPU. Furthermore, I will compare these tools for three platforms: AIX 4, Solaris 2, and HP-UX 10.<p>
<B>ps</b><p>Let us look first at the familiar command, <B>ps</B>. This command allows the administrator to view the process status for every process on the system; also, output from the <B>ps</B> command on some systems can include CPU%. There are two basic flavors of <B>ps</B>, the SVR4 version and the BSD version. Most computer systems have either both programs (in different paths) or a combined version (e.g., AIX). Not all SVR4-based versions of <B>ps</B> support an option for displaying CPU%. To view CPU% for a list of processes, enter the command <B>ps u</B>, where <B>ps</B> is the BSD version (on Solaris systems, this version of <B>ps</B> is found in <B>/usr/ucb</B>).<p>
Unfortunately, there is no consistency across different platforms for the definition of the CPU% value that is displayed via the <B>ps</B> command. On AIX 4 systems, CPU% is computed by dividing the time the process uses the CPU by the elapsed time of the process. For example, if a process was started 60 minutes ago, and has so far used 60 seconds of the CPU, then its CPU% is 1 2/3%. This is sometimes called the "weighted CPU%".<p>
On Solaris systems, CPU% is a raw number that the kernel calculates for each running process. This number is simply converted to a floating point value that is displayed. This number appears to be based upon the BSD <B>p_cpu</B> or <B>p_time</B> variables in the kernel, which are used in scheduling. With the new POSIX-compliant <B>ps</B> command (Solaris 2.5 and higher), you can display CPU% as follows: <B>ps -o pid,pcpu,comm</B>. This <B>ps</B> command states that you want a three-column display including the <B>pid</B>, the CPU% (<B>pcpu</B>), and the name of the process (<B>comm</B>). The full set of optional names that can be referenced is available in the man pages.<p>
The man pages for <B>ps</B> are very informative. The following comments describe the <B>pcpu</B> parameter: "The ratio of CPU time used recently to CPU time available in the same period, expressed as a percentage." The meaning of ''recently'' in this context is unspecified. The CPU time available is determined in an unspecified manner. It is stored in the <B>proc</B> structure (see field <B>p_pctcpu</B> in <B>/usr/include/sys/proc.h</B>) as a packed percentage.<p>
HP-UX 10.01 systems have no CPU% metric that can be displayed. For HP-UX 10.20 systems, the default <B>ps</B> command is also of little use. However, there is an XPG4 standards option that can be invoked so that the <B>ps</B> behavior will follow the XPG4 rules. Specify XPG4 behavior, and the <B>-o</B> option will then work. To do this, define and export environment variable UNIX95 (it can be set to any value).<p>
<pre>
$ UNIX95=1
$ export UNIX95
$ ps -o pid,pcpu,comm
PID %CPU COMMAND
1651    0 bash
1636    0 -ksh
1674    0 ps
</pre><p>After this variable is defined as shown, the command <B>ps -o pid,pcpu,comm</B> will then work (just like on Solaris systems). That is the good news. The bad news is that I could not get <B>ps</B> to display anything meaningful. All processes under the column %CPU showed 0. When I ran a program that executed a non-stop loop, %CPU showed a value of 1 but never more than 1. I believe that <B>ps</B> uses the HP proprietary interface, <B>pstat</B> (see <B>/usr/include/sys/pstat.h</B>). The comments presented below for running <B>top</B> on HP-UX systems are also applicable to <B>ps</B>.<p>
<B>top</b><p>If the <B>ps</B> command on your system is less informative than you would like, you might consider one of the popular free performance tools found on UNIX systems, <B>top</B>. <B>top</B> displays process-specific information about all (or active) processes on the system. It includes two fields, WCPU and CPU, which are the "weighted CPU percentage" and "CPU percentage" utilization of each process. <B>top</B> (I used version 3.5beta3) has different logic for each supported platform. I'll discuss each in turn, starting with Solaris 2.4+.<p>
The "Changes" file for this version of <B>top</B> documents that the column WCPU was removed from Solaris systems "since it is meaningless on a SVR4-based system". This change went into effect in version 3.5beta2, so any user running on a Solaris system with a column heading of WCPU has an old version of <B>top</B>.<p>
On Solaris systems, <B>top</B> extracts its process data from the <B>procfs</B> filesystem. The per-process data is loaded via special <B>ioctl()</B> calls into a structure called <B>prpsinfo</B> (see <B>/usr/include/sys/procfs.h</B>). This is the mechanism that the <B>ps</B> command uses to gets its information. Near the end of the structure is a field called <B>pr_pctcpu</B>. According to the comments next to the field, this is the "% of recent cpu time" for one or all of the process's threads. The documentation does not describe how this percentage is actually calculated. This is the same field that the BSD version of <B>ps</B> displays when used with the <B>u</B> option. <B>top</B> displays this number in the CPU column. According to comments in the <B>top</B> source code, the field <B>pr_pctcpu</B> was not maintained prior to Solaris 2.4.<p>
Observation of the <B>top</B> sources shows that there is code for a "weighted cpu" for Solaris. <B>top</B> calculates a weighted CPU by using an exponential average that it also calculates. This code may be simply left over from the pre-Solaris 2.4 version.<p>
On AIX systems, <B>top</B> extracts its process data from two sources: the <B>procinfo</B> structure (see <B>/usr/include/procinfo.h</B>) and the <B>proc</B> structure (see <B>/usr/include/sys/proc.h</B>). Similarly to Solaris, AIX has a field in the <B>proc</B> structure called <B>p_pctcpu</B>, which is the CPU% utilized by the process as calculated by the kernel. This number is the same as the CPU column of <B>top</B>. <B>top</B>'s WCPU column is equivalent to the <B>ps u</B> command output.<p>
On HP-UX 10.01 systems, <B>top</B> gets its data from the <B>pstat</B> interface by using the <B>pstat_getproc()</B> procedure to access the <B>pst_status</B> structure for each process (see <B>/usr/include/sys/pstat.h</B>). The field CPU in <B>top</B> comes directly from field <B>pst_pctcpu</B> (times 100 to convert to percentage), which according to the include file is "%cpu for this process during p_time". The field, <B>p_time</B>, is the <B>pstat</B> field; <B>pst_time</B>, the resident time for scheduling. This again appears to be related to the BSD scheduling mechanism described above. As for the field WCPU, it is calculated as follows:<p>
<pre>
pst_pctcpu / (1.0 - exp(pst_time * \<br>  log(loadavg)))
</pre><p>where <B>loadavg</B> is the one minute run queue length (see command <B>uptime</B> for an explanation) and <B>exp()</B> is the mathematical exponential function.<p>
If we were to take an instantaneous snapshot of a system and all its processes, it would show that at any instant in time, only one process can be running on one CPU. So, is this process using 100% of the CPU? Yes, but only for that small instant of time. CPU% utilization must therefore be defined over a time interval. If that time interval becomes small enough, then we end up with the above scenario where only one process can physically be running, and therefore that process's CPU% utilization approaches 100%. But if the time interval were, say, 10 seconds, then we could look at all the processes that shared the CPU over this time interval. We would take each process's CPU consumption (user time plus system time), divide that number by the 10-second interval and multiply by 100 to give the CPU% utilization in that 10-second interval for each process.<p>
<B>sar<p>
sar</B> works in the manner described above. <B>sar</B> has two parameters that define its collection behavior: how many intervals of data should be reported and what interval of time should be used. Unfortunately, <B>sar</B> only collects system-level data. No process statistics are available from <B>sar</B>.<p>
The previous discussion shows that CPU% only has meaning when discussed with respect to an interval. To say that a process is consuming 50% of the CPU is an incomplete statement. For example, suppose we have a process that sleeps for 58 seconds, wakes up and does some processing for 2 seconds, and continuously repeats this cycle. Therefore, its CPU% utilization over 1 minute is (2/60) * 100 = 3 1/3%. However, if we measure the process every 30 seconds, we will see that its CPU% utilization will alternate between 0% and (2/30) * 100 = 6 2/3%. If we now monitor the process every 10 seconds, for every one minute, we will see CPU% values as follows: 0%, 0%, 0%, 0%, 0%, 20%. Most performance monitors usually don't show any inactive processes. Therefore, a typical monitor (with a 10-second refresh rate) will only see this process once a minute consuming 20% of the CPU. But really, over an entire minute, this process only consumed 3 1/3% of the CPU.<p>
All of the foregoing discussions have assumed a single CPU. How do these commands behave on a symmetric multi-processor (SMP) computer, the more common server configuration these days? Both the <B>ps</B> command and the latest version of <B>top</B> adjusts the CPU% to reflect the number of CPUs on the system. Therefore, on a four-CPU system, a non-threaded, CPU-intensive process will show a maximum of 25% CPU utilization.<p>
Identifying the CPU percentage utilization of a process is a useful goal. As I have tried to show, however, the tools typically used to calculate and display this value do not use an intervalized approach; rather, they employ an algorithm that over time approaches the true CPU percentage utilization. Note the sidebar, "Looking at a CPU Hog" where I demonstrate how the CPU% of a process in a CPU loop changes over time. The UNIX tools do not have to maintain current and past data (in order to "delta" the values). Although over time, with long running processes, the difference between the two approaches is negligible, for short period snapshots of the system, the differences can be noticeable. By knowing how CPU% is calculated, the system administrator will better understand when to be concerned about the values that are seen.




<h1>About the Author</h1><p>










Joe Berry is a senior software developer at Landmark Systems Corporation in Vienna, Virginia. He is one of the authors of Landmark's PerformanceWorks products, PerformanceWorks/Smart Agents for UNIX. A former systems specialist for Hewlett-Packard, he has been in the computer industry for almost 30 years.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
