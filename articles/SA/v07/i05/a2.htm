<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05: Graphing Usage Statistics on the Web</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a2_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a2_l5.htm">Listing 5</a></span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Graphing Usage Statistics on the Web<p>
</H1><p>Andrew Mickish<p>
As a system administrator in an environment with limited resources, I am required to monitor performance on machines that gradually become saturated with work and must be upgraded or redistributed. To monitor load and detect usage trends that might overwhelm a server, I implemented a system to log, parse, and plot usage statistics in graphs that are updated hourly on the Web. These graphs are especially useful in persuading management of the legitimate need for upgrades.<p>
This article describes techniques for logfile analysis and datapoint plotting that should facilitate graphing any routine, logged activity. Two different approaches to acquiring usage data are illustrated by measuring DNS requests with the standard <B>named</B> daemon, and measuring network congestion with a customized script. The suite of scripts listed here will generate GIF files like those in Figures 1 and 2.<p>
<B>Collecting Daemon Usage Logs</b><p>Typical UNIX daemons like <B>sendmail</B>, <B>named</B>, <B>ftp</B>, and <B>httpd</B> can be configured to log their activities. Turning on logging may involve changing a configuration file, adding a parameter to the daemon invocation, or possibly recompiling the daemon with a flag set. Once enabled, the daemons make calls to the special <B>syslogd</B> daemon each time they have something to enter in the log. <B>syslogd</B> itself has a configuration file that controls which messages go to which file.<p>
The DNS daemon <B>named</B> is capable of logging virtually every detail of its operation. It is also one of the more difficult daemons for which to activate logging, since it involves recompiling. If your DNS server does not already write out XSTATS entries to a system log, then you probably need to recompile <B>named</B> with the "extended statistics" flag enabled. Look in the BIND source code (The official home of the Berkley Internet Name Daemon is <B>http://www.isc.org/bind.html</B>.) for the file <B>conf/options.h</B> where you can uncomment the XSTATS flag. After recompiling <B>named</B> with this option, it will invoke <B>syslog()</B> hourly to report a summary of all activity for the past hour.<p>
<B>syslogd</B> must also be configured to direct the informational messages from the <B>named</B> process to an appropriate log file. Adding something like the following to <B>/etc/syslog.conf</B>, and sending the <B>syslogd</B> process a hangup signal, will direct informational messages from all daemons to the designated file:<p>
<pre>
daemon.info          /var/stats/named.messages

</pre><p>The hourly summaries from <B>named</B> include the number of name resolution requests submitted to the DNS, the number of queries that had to be forwarded to a higher DNS authority, the number of lame delegations from other DNS servers, etc. For counting DNS hits, the relevant field is the "RQ" field - the number of requests that have come in since the <B>named</B> process was restarted.<p>
<B>Parsing Logs into Plottable Data</b><p>Once <B>named</B> has written a few entries in its log, plottable X,Y data for each hour's requests must be extracted into an auxiliary table suitable for plotting with GnuPlot. The script <B>named_log_to_stats.pl</B> in Listing 1 performs this analysis specifically for the <B>named</B> log.<p>
This parser uses Perl's <B>split()</B> function to parse the full log entry into a complete set of variables, and uses only the interesting ones. Note that the parser's calculations are based on the assumption that log entries contain cumulative values since a fixed time (such as the start of the log), rather than values relative to each interval. The script can be easily customized to parse other log files that follow this statistical format.<p>
<B>Customized Usage Logs and Data</b><p>Collecting data for your own interesting events is even easier, because you can bypass the idiosyncrasies of things like <B>named</B>, and write data directly into a parsable format. It is a good idea, however, to collect statistics in a consistent manner for all processes you monitor, so that you can use the same analysis and plotting tools for all of them. For example, always keep a cumulative count of events since a fixed date, instead of a relative count since the last hour.<p>
The script <B>netstats.pl</B> in Listing 2 uses the standard UNIX command <B>netstat</B> to record the number of outbound packets and the number of packet collisions that have occurred since the host was rebooted. This allows the parsing script to compute a ratio describing congestion on the host's network. Since the absolute time is included in each entry, this script can be run at any desired frequency from a cron job to obtain the maximum desired resolution of data points.<p>
The parser script for the <B>netstat</B> output is <B>netstats_log_to_stats.pl</B> in Listing 3. This script extracts plottable X,Y data for each hour's network congestion.<p>
<B>Plotting the Data</b><p>GnuPlot 3.6 (<B>http://cmpc1.phys.soton.ac.uk/gnuplot.html</B>) will accept X,Y data files as input and produce graphs in GIF format, suitable for displaying on the Web. Given the intermediate data files generated by the two parser scripts, the GnuPlot command file in Listing 4 is a "generated" file that will act on a specific 10-day range of X,Y data. This command file builds four graphs by selecting different columns from the two data files.<p>
The top-level script <B>graphlogs.pl</B> in Listing 5 puts it all together by calling the parsing scripts to generate X,Y data files and building the GnuPlot command file, culminating in the final graphs in Figures 1 and 2.<p>
<B>Conclusion</b><p>The ability to view continuously updated graphs reassures me that servers I administer are up to the task. Additionally, I can spot trends before they become crises, and justify requests for more resources with hard data. While DNS hits and network congestion are the two examples in this article, these techniques can be used to accumulate statistics on user logins, server load, disk space, and just about any other events occuring on a server. Tweaking the scripts is all it takes.




<h1>About the Author</h1><p>










Andrew Mickish graduated from Carnegie Mellon University with a degree in Computer Science. At CMU he worked on the graphical abstraction layer of early Java-like languages. He is currently an application developer and system administrator at Vanderbilt University Medical Center, supporting the delivery of patient records and other medical information directly to on-line physicians in the hospital. He can be contacted at: <B>http://www.mc.vanderbilt.edu/~mickish</B>/.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
