<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05: Web-Enabled man Pages</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Web-Enabled man Pages<p>
</H1><p>Steven G. Isaacson<p>
There are several obvious benefits to Web-enabled man pages: (1) the Web browser interface makes it easy to scroll back and forth; (2) you can access man pages on different systems without having to open another session and login to that machine; and (3) you can see more of a page at a time by changing the browser's font size.<p>
But the real advantage to Web-enabling (actually HTTP-enabling) is that when you're reading the man page and it says, for example, see <B>chown(2)</B>, all you have to do is click there, and, presto, there's the <B>chown(2)</B> man page. Then, the browser's Back button will take you back to the previous page.<p>
This feature is particularly useful when you don't know exactly what you're looking for. Most man pages contain a SEE ALSO section at the end that lists related items of interest, such as system calls and companion programs. With a Web-enabled man page, you simply click on the item you want to see.<p>
This article briefly discusses the creation of <B>man.sh</B>, a shell script designed to serve up Web-enabled man pages (Listing 1).<p>
<B>Dynamic Web Pages</b><p>There are two types of Web pages: static and dynamic. Static Web pages are simply files that get sent to the browser. Dynamic Web pages also get sent to the browser, but they are generated anew for each request. That is, they're dynamically created. The results you might see from a Yahoo search request are an example of a dynamically created Web page.<p>
I'll do the same with the man pages I create, using a common gateway interface (CGI) script. Generally CGI programs go in the <B>cgi-bin</B> subdirectory of your Web server's <B>$SERVER_ROOT</B> directory. If your program is called <B>prog</B>, you would access it from your Web browser like this: <B>http://[your_server]/cgi-bin/prog</B>. Here's a simple three-line CGI program - a shell script that displays the system date.<p>
<pre>
#!/bin/ksh
echo "Content-type: text/html\n"
date
</pre><p>
<p><b>Markup Tags</b><p>Obviously the output from any command can be displayed in this way. However, as the output gets more complicated, problems crop up. To see why, I'll make our dynamically created Web page more sophisticated, by adding a title ("YOUR TITLE GOES HERE"), a heading ("HEADING CENTERED"), and distinguishing between the header and body sections. This is done by adding markup tags (as in HyperText Markup Language), which are simply keywords enclosed in less-than and greater-than signs. The keyword marks the start of the section, and slash-keyword marks the end of the section.<p>
<pre>
#!/bin/ksh
echo "Content-type: text/html\n
&lt;html&gt;
&lt;head&gt;
&lt;title&gt; YOUR TITLE GOES HERE &lt;/title&gt;
&lt;h1 align=center&gt; HEADING CENTERED &lt;/h1&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt; `command`` &lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;"
</pre><p>The <B>&lt;html&gt;</B> and <B>&lt;/html&gt;</B> tags specify where the HTML document begins and ends. The "Content-type" line - echoed before our document begins - is required by the HyperText Transfer Protocol. The <B>&lt;head&gt;</B> and <B>&lt;body&gt;</B> tags separate the header portion of the document from the body of the document. The header portion of the document describes information about the document. In this case a title and heading, which is centered on the page. The body portion contains the document information.<p>
In the first example, we displayed the output from the <B>date</B> command. In this more sophisticated example, we display the output from <B>command</B>. The <B>&lt;pre&gt;</B> and <B>&lt;/pre&gt;</B> tags wrapped around <B>command</B> indicate that everything in between is understood to be preformatted. This solves a display problem as described below.<p>
<B>Preformatting</b><p>Suppose that instead of getting output from the <B>date</B> command you want to see all activity on the system. To do this you could display output from <B>ps</B>, for example, <B>ps -ef</B>. What you expect to see is a listing of all of the processes currently running on the system. But that's not what you get. What you get - in the browser - is one long line of output. Newlines, indentation, and whitespace are all ignored. When displaying the output from a simple command, such as <B>date</B>, the problem is masked. There is no leading whitespace and only one newline, so the output looks fine. But the output from <B>ps -ef</B> is not that simple.<p>
To preserve the display of whitespace and newlines, you must tell the browser that the following text (i.e., everything between <B>&lt;pre&gt;</B> and <B>&lt;/pre&gt;</B>) is preformatted, which is what we did above:<p>
<pre>
&lt;pre&gt; `command` &lt;/pre&gt;
</pre><p>But there is another problem that must be solved.<p>
<B>Embedded Markup Tags</b><p>What if the text you're displaying itself contains embedded markup tags? For example, suppose you want to display the output from <B>man 3s printf</B>. The top of the man page shows the required C preprocessor include line:<p>
<pre>
#include &lt;stdio.h&gt;
</pre><p>To your browser, everything between a less-than and a greater-than sign is a markup tag. So, <B>&lt;stdio.h&gt;</B> looks like a markup tag, but it isn't. What does the browser do with unknown markup tags? Nothing. It simply throws them away. The <B>#include</B> line from the <B>printf(3S)</B> man page looks like this when displayed in your browser:<p>
<pre>
#include
</pre><p>Fortunately, once you understand what's happening, the problem is easily solved. In order to display literal less-than and greater-than signs, you must use keywords: <B>&amp;lt</B> for less-than, and <B>&amp;gt</B> for greater-than. Your CGI script must filter the output from your program before sending it to the browser, substituting <B>&amp;lt</B> for &lt;, and <B>&amp;gt</B> for &gt;. To display the correct <B>#include</B> line in a browser, the output from your CGI script would look like this:<p>
<pre>
#include &amp;ltstdio.h&amp;gt
</pre><p>
<p>Command-Line Arguments</b><p>Now that we know how to display the output from <B>man printf</B>, we also want to be able to display the output from man anything. How do you tell the <B>man.sh</B> script which man page you'd like to see?<p>
When <B>man.sh</B> is called without any arguments, it generates a form that allows you to type in the name of the man page you'd like to see. When the form is submitted, the arguments (i.e., the requested man page and section) are passed to <B>man.sh</B>. The form is also displayed if the requested man page does not exist, so that you can try again.<p>
How are the arguments passed? A longer discussion of forms and the CGI interface is beyond the scope of this article, but basically all you have to do is snake out the arguments from the <B>$QUERY_STRING</B> environment variable, which gets set automatically when <B>man.sh</B> is run by the Web server.<p>
For example, to see the man page for <B>chown(2)</B>, this URL is generated by the form:<p>
<pre>
http://cgi-bin/man.sh?man=2+chown</pre><p>
<p>
man.sh</B> parses the <B>QUERY_STRING</B>, changing + into a space, and then runs the man program with <B>2 chown</B> on the command line. This URL could also be typed directly into your browser, or embedded as a link in some other Web page.<p>
<B>See Also</b><p>Now that we know how to pass arguments on the URL command line, it's possible to embed links to other man pages in the current man page. First, we run man to get the requested information. Second, we filter the output from man, so that it can be displayed in a Web browser. And third, if there are references to other man pages within the page we're about to display, we embed links to those other pages.<p>
To find out if there are references to other man pages, watch for strings of text like <B>grep(1)</B>, <B>lang(5)</B>, and <B>catman(1M)</B>. When one of those strings of text is found, it can be converted to a link back to <B>man.sh</B> with the appropriate command line. For example, a string of text like this:<p>
<pre>
chown(2)
</pre><p>
</b><p>gets converted to this:
<pre>
&lt;a "http://cgi-bin/man.sh?man=2+chown"&gt;<br>  chown(2)&lt;/a&gt;
</pre><p>Having embedded links allows you to click from man page to man page, as needed. The "man" man page, for example, contains 32 references to other man pages.<p>
<B>man.sh</b><p>Installing <B>man.sh</B> is simple. Download the program (<B>man.sh</B>), make it executable, and move it to your <B>$SERVER_ROOT/cgi-bin</B> directory. Then, in your browser, type <B>http://[your_server]/cgi-bin/man.sh</B>. That's all there is to it.<p>
<B>Further Information</b><p>For more information on the Hypertext Transfer Protocol (HTTP/1.0), see: <B>http://www.ics.uci.edu/pub/ietf/http/rfc1945.html</B><p>
<p>
For more information on the HyperText Markup Language (HTML - 4.0 Working Draft Release), see: <B>http://www.w3.org/TR/WD-html40-970708/</b><p><p>
For more information on The Common Gateway Interface, or CGI, see:<br><B>http://hoohoo.ncsa.uiuc.edu/cgi/</B>




<h1>About the Author</h1><p>










Steven G. Isaacson currently works with the porting group at Endura Software Corporation (<B>http://www.enduracorp.com</B>). He may be reached via email at <B>steven.isaacson@enduracorp.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
