<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05:  Sidebar : A Summary of Security Concerns</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink>Sidebar 1</span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Sidebar : A Summary of Security Concerns</H1><p><p>
In general, a system should be as physically secure as necessary, and the system should have only a minimal set of services and privileged programs as are necessary to the system's desired level of operation. The following sections discuss various areas of security concerns in more detail.<p>
<B>Physical System and Console</b><p>With physical access to the system, an attacker can give a <B>-s</B> option at the FreeBSD boot prompt and get a single user mode shell with root privilege. To avoid this, if a system is not in a physically secured location (such as in a locked room with access limited to authorized personnel), it is a good idea to mark the console as insecure in <B>/etc/ttys</B> so that the system will require the root password when it enters single-user mode. See the <B>init(8)</B> manual page for details.<p>
If the system is not physically secure, it should not have a floppy disk drive. An attacker can use the FreeBSD boot prompt to boot a rogue kernel or mount the floppy disk as the root partition, thereby avoiding any safeguards in the standard <B>/etc/ttys</B>.<p>
<B>setuid Programs and Daemons</b><p>Problems in daemons and <B>setuid</B> programs are often exploited by crackers to gain root privileges on systems. It is wise to prune the daemons and <B>setuid</B> programs on systems to reduce the opportunities for trouble in case a vulnerability in one of these programs is found by a cracker.<p>
<B>Daemons</b><p>The idea with daemons is to turn off any that are not needed. Edit <B>/etc/rc.conf</B> and <B>/etc/inetd.conf</B> to turn off unused services. For example, if the <B>rlogin</B> or <B>rsh</B> services are not necessary, one can disable them in <B>/etc/inetd.conf</B> by commenting them out with a # symbol. Likewise, if the <B>lpr</B> line printer daemon is not needed, set the <B>lpd_enable</B> option in <B>rc.conf</B> to "NO".<p>
Another strategy is to replace daemons that are known to have had problems in the past with daemons that provide the same services but were designed with security in mind. For example, while FreeBSD's <B>sendmail</B> daemon is kept in sync with the most current versions available, one could replace it with <B>qmail</B>, which was designed and written entirely with security in mind. <B>qmail</B> is available from <B>http://www.qmail.org/</B>.<p>
<B>setuid Programs<p>
setuid</B> programs are special programs in the system that run with the privilege of the program's owner when any user executes them. For example, the PPP program <B>/usr/sbin/ppp</B> performs some tasks that only root has permission to do, so its <B>setuid</B> bit is set and it is owned by root. As a result, when any user runs PPP, it runs with the security permissions of the root user. See the manual page for <B>chmod(1)</B> for information on the <B>setuid</B> bit and other file permission bits.<p>
<B>setuid</B> programs are a security problem because the programs often contain bugs that allow crackers to misuse them. Supplying user input or a command line argument that overruns the program's stack with malicious code is a common attack on <B>setuid</B> programs. Since the program is running with root privilege, the cracker's code executes with root privilege. The simplest way to review all <B>setuid</B> and <B>setgid</B> programs in the system is to execute the commands:<p>
<pre>
find / -perm -4000 -print
find / -perm -2000 -print
</pre><p>With help from the system manual pages, identify the <B>setuid</B> and <B>setgid</B> programs that are not needed for system operation and use the command <B>chmod gu-s</B> filename to turn off the <B>setuid</B> and <B>setgid</B> bits of those programs.<p>
<B>Filesystems</b><p>On a system where the user's filesystems are separate from the filesystems containing the system executables and device special files, a couple of filesystem options can stop some potential attacks or "back doors". Because one method of gaining root access or leaving a back door to gain root access again later is creating a <B>setuid</B>-root executable or creating a device special file to allow write access to the system's memory, the <B>nosuid</B> and <B>nodev</B> mount options can be used in <B>/etc/fstab</B> for filesystems on which there should be no <B>setuid</B> or device special files. See the <B>mount(8)</B> and <B>fstab(5)</B> manual pages for details.<p>
These options should be used on filesystems on which users can create files. It is a good idea to break apart the directories containing user files, such as <B>/home</B>, <B>/tmp</B>, and <B>/var/tmp</B>, onto separate filesystems from the <B>/usr</B> filesystem so that the <B>nosuid</B> and <B>nodev</B> options may be used on those filesystems.<p>
<B>Device Special Files</b><p>Device special files give users direct access to the hardware of the system via names in the filesystem, such as <B>/dev/mem</B> for access to the memory of the system. Access to critical hardware should be strongly restricted. For example, if <B>/dev/mem</B> were readable by everyone, a user's password could be observed by reading the data segment of the login program while it is running.<p>
The file <B>/etc/fbtab</B> specifies a list of devices that should have their ownership changed to that of the user who logs into the console. See the <B>fbtab(5)</B> manual page for details. Devices that one may want to list in this file include <B>/dev/audio*</B> and <B>/dev/console</B>.<p>
<B>Network Protocols</b><p>Weaknesses exist in several network services protocols and TCP/IP itself [7, 1]. Here is a brief summary of solutions for network security issues:<p>
<ul>
<li>Disabling unneeded network services in the <B>inetd.conf</B> and <B>rc.conf</B> configuration files.<p>
<li>Filtering packets entering a site's network that have the site's IP network address in the source address. Such packets are obviously forged or originate from an incorrectly configured host.<p>
<li>Using the TCP wrappers daemon [9] on TCP services started via <B>inetd</B> to prevent IP source routing, verify the source IP address and host name of the remote host, and implement access restrictions based on the source IP address. See the FreeBSD package <B>net/tcp_wrappers-7.4.tgz</B> and its accompanying manual pages for details.<p>
</ul>If possible, using a Kerberos authentication server [8] and Kerberos-enabled versions of <B>rlogin</B> and <B>rsh</B> for strong authentication and secrecy.<p>
<p>
The <B>ssh</B> secure shell package offers remote logins and file transfers that encrypt all data that traverses the network. For this reason alone, <B>ssh</B> is a great replacement for <B>telnet</B>, <B>rlogin</B>, and <B>ftp</B>, especially for remote system administration. Its encryption of all data between the source and destination renders sniffing useless.<p>
The Network File System (NFS) protocol, which shares filesystems between systems via the network, has numerous security issues. If it is used, it is best hidden behind a firewall (note that FreeBSD can act as a packet filtering firewall).<p>
Like NFS, the Network Information Service (NIS, also known as "Yellow Pages") has several security issues. NIS is useful for distributing user account information in a network of UNIX systems. Unlike NFS, NIS does not use a particular set of network ports, so it can't be specifically hidden behind a packet filtering firewall. FreeBSD's NIS uses the configuration file <B>/var/yp/securenets</B> to limit client access to NIS information. Each line in the securenets file is either a comment (denoted by a # symbol as the first character of the line) or a Internet address and network mask pair, like:<p>
<pre>
172.16.0.0 255.255.0.0
192.168.5.0 255.255.255.0 </pre><p>
<p>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
