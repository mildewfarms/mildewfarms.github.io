<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i05:  Listing 1: man.sh</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a4.htm">Article</a></span></td>
		<td><span class=navbarLink>Listing 1</span></td>
		<td><a href="../../../../source/SA/1998/may98.tar"><b class=codeListing>may98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>




<H1>Listing 1: <tt>man.sh</tt></H1><p>
<pre>
#!/bin/ksh
####################################################################
# Copyright (C) 1998 Steven G. Isaacson, All rights reserved.
####################################################################
# man.sh - web-enable man pages.  This script should go in your web
# server's $SERVER_ROOT/cgi-bin directory.

# get a good awk
AWK=awk
whence gawk &gt; /dev/null &amp;&amp; AWK=gawk
whence nawk &gt; /dev/null &amp;&amp; AWK=nawk

tmpfile=/tmp/man.$$
tmpfile2=/tmp/man2.$$

####################################################################
# standard html header stuff
####################################################################

echo "Content-type: text/html\n"

####################################################################
# parse the query string
####################################################################
# Use awk to split up the arguments, print them one per line in the
# form of name="value", substitute + for space, and finally eval
# everything.  Another approach, instead of using eval, is to write
# the entries to a file and then dot-in the file.
#
# Example.  If "2 chown" is entered into the form, with no search
# critera, then QUERY_STRING looks like this:
#     srch=&amp;man=2+chown
#
# And the awk program below converts it to this:
#     srch=""
#     man="2 chown"

eval $(
if test "$REQUEST_METHOD" = POST
then
cat -
else
echo "$QUERY_STRING"
fi | # tee /tmp/query.out | # debug for query string
$AWK -F\&amp; '{
for (i=1; i&lt;=NF; i++) {
x=$i
sub(/\=/, "=\"", x)
sub(/$/, "\"", x)
sub(/^M/, "", x)
gsub(/\+/, " ", x)
print x
}
}' # | tee /tmp/awk.out     # debug for awk program
)

#-------------------------------------------------------------------
escape() {
#-------------------------------------------------------------------
# Escape characters for HTML output.

sed -e 's,&amp;$,__AMP__BR,g' \
-e 's,&amp;,__AMP__,g' \
-e 's,&lt;,__LT__,g' \
-e 's,&gt;,__GT__,g' \
-e 's,__AMP__BR,\&amp;amp,g' \
-e 's,__AMP__,\&amp;amp&lt;!-- --&gt;,g' \
-e 's,__LT__,\&amp;lt&lt;!-- --&gt;,g' \
-e 's,__GT__,\&amp;gt&lt;!-- --&gt;,g' \
-e 's,\&amp;gt&lt;!-- --&gt;$,\&amp;gt&lt;!-- --&gt; ,' \
-e 's,\&amp;lt&lt;!-- --&gt;$,\&amp;lt&lt;!-- --&gt; ,'
}

#-------------------------------------------------------------------
display_form()
#-------------------------------------------------------------------
{
echo '&lt;h2&gt;&lt;form method="GET" action="/cgi-bin/man.sh"&gt;
Search string &lt;input name="srch" type=text size=20&gt;
man page &lt;input name="man" type="text" size="15"&gt;
&lt;input type="submit"&gt; &lt;input type="reset"&gt;
&lt;/form&gt;&lt;/h2&gt;'
}

####################################################################
# Start our HTML document
####################################################################

echo "&lt;head&gt;&lt;title&gt;man $man&lt;/title&gt;&lt;/head&gt;
&lt;h1 align=center&gt;man &lt;font color=\"#FF0080\"&gt;
&lt;tt&gt;$man&lt;/tt&gt;&lt;/font&gt;&lt;br&gt;&lt;/h1&gt;
&lt;body&gt;&lt;pre&gt;"

test "$man" || {
echo "Error: no man request specified"
display_form
echo "&lt;/body&gt;&lt;/html&gt;"
exit 1
}

whence man &gt; /dev/null || {
echo "&lt;h2&gt;Error: man program not found.&lt;/h2&gt;"
echo "Here is the \$PATH"
echo $PATH
echo "&lt;/body&gt;&lt;/html&gt;"
exit 1
}

####################################################################
#                                 man
####################################################################

# Some platforms require a flag to specify the section.
case "$(uname -s)" in
SunOS) section_flag="-s+";; # plus-sign is a space in URL.
*) section_flag="";;
esac

# Set TERM=dumb because this tells some man programs to strip out
# the formatting characters.

TERM=dumb man $man |

# But that doesn't always work.  So we also force it manually here.

sed -e 's/.^H//g' |

# Pass the results on to this awk program to have it shrink down
# multiple blank lines.  (See also more -s.) If we get nothing out
# of this, then tell user there are no man pages.

$AWK 'BEGIN {i=1}
/   - [0-9]* -   / {continue} # skip page lines
{
# this shrinks down multiple blank lines
if ($0 || !(last_line[1] == "" &amp;&amp; last_line[2] == ""))
print

last_line[i++]=$0
if (i == 3) i=1
}' &gt; $tmpfile

test -s $tmpfile || {
echo "&lt;h2&gt;No man entry found for $man&lt;/h2&gt;"
display_form
echo "&lt;/body&gt;&lt;/html&gt;"
exit_script 1
}

# We got something from the man program.

# Now if a search critera was entered, look for it here.
if test "$srch"
then

cat $tmpfile | escape |
$AWK -v x="$srch" '$0 ~ x {
printf("&lt;li&gt;&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;&lt;/li&gt;\n", $0, $0)
}' &gt; $tmpfile2

# Was anything found?
if test -s $tmpfile2
then
echo "&lt;a name=TOPOFFILE&gt;"
echo "&lt;hr&gt;&lt;ul&gt;"
echo "&lt;h2 align=center&gt;lines containing: \"$srch\"&lt;/h2&gt;"
cat $tmpfile2
echo "&lt;/ul&gt;&lt;br&gt;"
else
echo "&lt;h2&gt;No lines found with: \"$srch\"&lt;/h2&gt;"
fi
rm -f $tmpfile2
echo "&lt;hr&gt;"
fi

cat $tmpfile |

# Escape characters for HTML output.
escape |

# Use sed, which is good at this kind of thing, to wrap references
# to other man pages inside of ctrl-a and ctrl-b.  For example, a
# reference to grep(1) gets changed to a reference to ^Agrep(1)^B.
# The awk program below unwraps it again.

sed -e \
's,\([-_\.a-zA-Z0-9][-_\.a-zA-Z0-9]*([a-zA-Z0-9][a-zA-Z0-9]*)\),^A\1^B,g' |

# debug
# tee /tmp/sed.out |

# Here's the tricky part.
# 1) If the line contains a ctrl-a, this is what we do:
#    step through the line, a char at a time, and print
#    the char if we're not inbetween ctrl-a and ctrl-b.  If we are
#    inbetween, then figure out the name and section number (by
#    stepping up to the left paren, etc.) and stick in a url for a
#    man page jump to that item.
# 2) If the line does not contain a ctrl-a, then just print it.
#    (See last line of awk program.)

$AWK '/^A/ {

# We are dealing with something like this:
#     This is a ^Aman(1)^B and so on.

line=$0
len=length(line)

for (i=1; i&lt;=len; i++) {

char=substr(line,i,1)

if (char == "^A") {
inname=1
name=""
}
else if (char == "^B") {
inname=0
printf("&lt;a href=\"http:/cgi-bin/man.sh?man=")
printf("%s%s+%s\"&gt;%s(%s)&lt;/a&gt;",
section_flag, section, name, name, section)
}
else {
if (inname == 1) {
if (char == "(") {
insection=1
section=""
}
else if (char == ")") {
insection=0
}
else {
if (insection == 1) {
section = section char
}
else
name = name char
}
}
else # not inname == 1
printf("%s", char)
}
}
printf("\n")
continue
}
{print}' section_flag="$section_flag" |

# debug
# tee /tmp/awka.out |

# We have our man page.  If a search string was requested, we search
# for that here and build in the internal references.

{
if test "$srch"
then
$AWK '$0 ~ x {

printf("&lt;a name=\"%s\"&gt;&lt;/a&gt;&lt;br&gt;", $0)
printf("&lt;font color=\"#FF0080\"&gt;%s&lt;/font&gt;", $0)
printf("  &lt;a href=#TOPOFFILE&gt;&lt;small&gt;Top of <br>                   File&lt;/small&gt;&lt;/a&gt;\n")
continue
}
{print}' x="$srch"
else
cat -
fi
} |

# Highlight section headings.  Section headings are thought to be
# any capitalized words at the beginning of a sentence, such as
# NAME, SYNOPSIS, SEE ALSO, etc.

$AWK 'BEGIN { print "&lt;pre&gt;" }
# allow zero or one space
/^([A-Z][A-Z]| [A-Z][A-Z])/ {
print "&lt;strong&gt;" $0 "&lt;/strong&gt;"
continue
}
{ print $0 }'

# We're done.
echo "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;"

# Cleanup
rm -f $tmpfile $tmpfile2

exit 0

# End of File</pre><p>
<p>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
