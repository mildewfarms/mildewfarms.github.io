<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i07: SLAMming Symbolic Links</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1998/jul98.tar"><b class=codeListing>jul98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>SLAMming Symbolic Links<p>
</H1><p>Edward Quillen<p>
Symbolic links are one of the most useful and powerful features of UNIX. However, they also can become a management nightmare. Symbolic links just are too easy to create. In the blink of an eye, a link can be created that makes accessible an entire directory tree of data from some far off filesystem. And once a path to data exists, it will live on, embedded in login scripts, configuration files, and who knows where else, seemingly until the end of time. That may or may not be what you want. In any case, detection of symbolic links and their properties can be a handy management tool. This is what led me to develop the program that I call SLAM (Symbolic Link Auto Management).<p>
SLAM's major feature is symbolic link change detection. It detects the following major incidents (and some more obscure ones discussed later):<p>
<ul>
<li>Creation of a new link
<li>Deletion of an old link
<li>Changing of a link's value
</ul><p>It accomplishes this by creating a database of all links in a defined set of directories and directory trees, which I call "linksets". It can then compare current link data with past link data to determine changes.<p>
SLAM was implemented with Perl5 for its obvious advantages of features and portability. The SLAM code, however, is not very "perlish" since I am a C programmer by training. Although the code works well, I'm sure it could be much more efficient. To strictly control directory traversal, there is OS-specific Perl code embedded in a couple of modules. Support for SunOS, Solaris, HP-UX, AIX, OSF, and Linux currently exists, and it would be easy to add others. (SLAM and other listings mentioned in this article can be found at: <B>ftp.mfi.com</B> in <B>/pub/sysadmin/</B> or <B>www.samag.com</B>.<p>
SDBM is used to implement the database. SDBM is a "key-based" database implementation similar to the classic DBM used in NIS for map storage. The benefits of using SDBM are that it provides a sizable performance advantage over flat files and is supported in the base installation of Perl5. Currently the following link properties are stored in the database:<p>
<ul>
<li>Link full path
<li>Link value (destination)
<li>Link change time (ctime)
<li>Link mode
<li>Link uid and gid
</ul><p>The creation time, mode, uid, and gid are currently not used by SLAM but are kept for other uses of the data or for future features.<p>
When SLAM is used to manage a directory of databases (default behavior), it stores databases using the following naming structure:<p>
<pre>
slam-&lt;hostname&gt;-&lt;linksetname&gt;-&lt;timestamp&gt;[.dir|.pag]
</pre><p>
<p>For all unique hostname and linksetname pairs, a special set of links are maintained with the timestamp field set to the string "last", so that easy access to the last database exists. The hostname field is used to allow the data from multiple UNIX nodes to be kept in the same directory for global processing of links and easier management. The linksetname field refers to an identifier that signifies a set of directory and directory tree definitions and has the following syntax:<p>
<pre>
&lt;linksetname&gt; [tree=&lt;dir&gt;] [tree_localdisk=&lt;dir&gt;] \<br>               [tree_private=&lt;dir&gt;]<p>
[dir=&lt;dir&gt;] [linkdef=&lt;linkpath&gt;^&lt;linkvalue&gt;]
</pre><p>
<p><B>tree</B> - Traverse a directory tree starting at <B>dir</B><p>
<B>tree_localdisk</B> - Same as tree except only crossing filesystems if the filesystems are local and meaningful<p>
<B>tree_private</B> - Same as tree except never crossing filesystem boundaries<p>
<B>dir</B> - Process a directory without descending down branches<p>
<B>linkdef</B> - Used for a special SLAM function discussed later<p>
<B>Running SLAM</b><p>SLAM consists of one executable file: slam. I created it that way by mashing all the modules together into one file so that it can be placed anywhere and work after defining the location of the Perl5 executable in the first line of the file. It has a verbose, yet restrictive command line syntax. I like verbose arguments for programs that are not commonly hand entered, because they tend to be self-documenting. Restrictive syntax results from sheer laziness on the programmer's part. The minimal syntax is as follows:<p>
<pre>
slam -dbdir=&lt;dirname&gt; -cmd=[check|checkdef|dump] \<br>     -linkset=&lt;name&gt;
[-justbuild] [-linksetdef="name arg1 ..." |
-linksetfile=[&lt;file&gt;||command]]
[-action=[fix|nolog||command]</pre><p>
<p>Other Goodies</b><p>Apart from SLAM's major feature of storing links in a database and detecting link changes, it also has the following features:<p>
<ul>
<li>Maintenance of defined links - SLAM can also examine, create, or fix well-defined symbolic links on your systems. Using the <B>linkdef</B> parameter of a linkset definition, multiple links along with their values can be defined and then processed by SLAM using the <B>checkdef</B> command.
<li>Link reference existence checks - Using the <B>-checkdest</B> flag on the command line, SLAM can check for the existence of the object a link is pointing to during a database build or when a <B>checkdef</B> is performed.
<li>Directory recursion checks - SLAM can detect links that point to directories that are ancestors of the link by using the <B>-checkrecursion</B> flag on the command line. This can be used to solve that pesky problem of infinite directory traversals.
<li>Output of all link database info - Using the <B>dump</B> command, SLAM can display all the link data in the current databases (<B>-dbfiles=all</B>) or in specific files (<B>-dbfiles=&lt;file w/ wildcards&gt;</B>). Hostname and linksetname fields are prepended to the output to make searches more productive. A separate utility named <B>rrp</B> is provided to resolve relative paths and can be used in conjunction with the link value dumps to do even more exact searches. I'll leave it to you to write the scripts for this.
<li>Handy modules for Perl5 junkies - To control directory traversals done by SLAM, I developed a module named FindPlus, which has a few more features than the standard <B>File::Find</B> that comes with Perl. Namely, it integrates with another module I developed, called <B>MountedFileSystems</B>, which gives details about all currently mounted filesystems. These modules are handy for administrators who need to simulate the <B>-mount</B> or <B>-xdev</B> arguments of the find program for controlling directory traversal.<p>
</ul><p><B>Examples</b><p>Example 1: Build a database of all links on a system.<p>
<pre>
slam -cmd=check -justbuild -dbdir=/linkdbdir \<br>          -linkset=first \
-linksetdef="first tree_localdisk=/"
</pre><p>
<p>Example 2: Check for any changes some time later, stopping logging to stdout and calling the program <B>/lchg</B> for each event.<p>
<pre>
slam -cmd=check -dbdir=/linkdbdir -linkset=first \
-linksetdef="first tree_localdisk=/" \
-action="|/lchg" -action=nolog
</pre><p>
<p>Arguments to <B>/lchg</B> will be:<p>
<pre>
&lt;timestamp&gt; &lt;hostname&gt; &lt;event&gt; &lt;linkpath&gt; &lt;linkvalue&gt; \<br>       [&lt;auxlinkvalue&gt;]<p>
</pre><p>
<p>where event can be: <B>notexist</B>, <B>incorrect</B>, <B>newlink</B>, <B>nodest</B>, <B>recursive</B>.<p>
Example 3: Make sure a set of defined links exist and are correct on a node. Build an NIS map called <B>slam-linksets</B> with the following data:<p>
<pre>
key=ls1   value="linkdef=/usr/local^/net/local"
key=ls1 value="linkdef=/usr/myapp^/net/myapp"

slam -cmd=checkdef -linkset=ls1 -linksetfile="|ypcat \<br>  slam-linksets" -action=fix<p>
</pre><p><p>
Example 4: Dump all links from all systems with a : delimiter as opposed to the default ^ delimiter.<p>
<pre>
slam -cmd=dump -dbdir=/linkdbdir -dbfiles=all -delim=":"
</pre><p>
<p>Installation Example</b><p>The ideal way to install SLAM is to untar the source (which can be found at <B>www.samag.com</B>) in a directory that is NFS accessible from all your machines (which I will call <B>&lt;slamdir&gt;</B> for the following example). If you will be using SLAM to scan system links, it is also beneficial to maintain a central database directory that allows root to write to it. Let's call this directory <B>&lt;slamdir&gt;/dbdir</B>.<p>
Next, run an initial SLAM database build on all your systems by running the following command on each of your machines:<p>
<pre>
&lt;slamdir&gt;/slam -cmd=check -justbuild -dbdir=&lt;slamdir&gt;/dbdir \<br>  -linkset=all -linksetdef="all tree_local disk=/"
</pre><p>
<p>To set up SLAM to monitor all link changes once a week on all systems, you can just add the following root <B>crontab</B> entry on all your machines:<p>
<pre>
0 2 * * * &lt;slamdir&gt;/slam -cmd=check -dbdir=&lt;slamdir&gt;/dbdir \<br>           -linkset=all -linksetdef="all tree_localdisk=/"
</pre><p><p>
A list of all link changes will be mailed to root on each system due to the fact that the change messages are logged to stdout by default. Some sample messages follow:<p>
<pre>
19980221023432:host1:notexist:/home/joe/testlink
19980221023632:host2:newlink:/home/bobj/work/plan:.. \<br>   /current.plan
</pre><p>
<p>Of course, SLAM can be used in many different ways with many levels of complexity. The above is a simple example that provides a large amount of link activity information with a minor amount of time invested.<p>
<B>Summary</b><p>I have discussed some of the major features of SLAM in this article, but certainly did not cover all of the possibilities. SLAM is really a framework in which useful features can be implemented in companion scripts. Thus, you will need to tweak SLAM for your site to receive maximum benefit. In summary, I realize the problem of symbolic link management is something administrators don't usually spend much time fretting about. However, SLAM can take you a long way toward your solution.




<h1>About the Author</h1><p>










When not working on consulting projects for Sprint Paranet, Ed spends time with his wife, Jill, and his 18-month-old daughter, Megan, who is the supervising admin for their home network. You can reach Ed at <B>quillen@usa.net</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>