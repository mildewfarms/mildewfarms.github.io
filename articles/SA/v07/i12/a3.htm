<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i12: Managing Documentation with RCS</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/1998/dec98.tar"><b class=codeListing>dec98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Managing Documentation with RCS</H1><p>
<p>Robert Kiesling<p>
Although the Revision Control System (RCS) is commonly used to manage source code in software projects, the package is useful in documentation projects, especially when managing documentation written by multiple authors through multiple revisions. Similarly, the file utilities <B>tar</B> and <B>find</B>, and the text processing utility <B>awk</B>, can be used singly or in conjunction with RCS to make distribution, archiving, and backup much easier. The project discussed in this article provides a good example of how RCS can be employed to manage conventional documents.<p>
When asked to edit the anthology, <I>Linux: The Complete Reference</I>, 6th Edition, the publishers had only the text of the previous editions, which had been written by approximately 30 authors. Some of the articles had been superseded, some were no longer being maintained by their authors (they were written by authors of the Linux Documentation Project, and some turnover was inevitable), and some were technically out of date. Additionally, the anthology was to include several book-length manuscripts, one of which was undergoing revision at the time. To keep track of the revisions, RCS was pressed into service to manage this library of documents.<p>
RCS, which was written by Walter F. Tichy and Paul Eggert, is not one program, but a suite of programs. It manages archives of revisions, checks documents in and out of the archives, views the revision logs, and manages keyword searches. RCS is distributed by the Free Software Foundation (FSF) under the GNU (General Public License). The <B>rcsintro(1)</B> manual page provides a quick introduction to the system.<p>
<B>Basic RCS Usage</b><p>The RCS suite of programs manages archives of text file revisions, version releases, and manages access to the revisions. The revisions are a series of <B>diff</B> output files that list the changes in each revision, with the initial document as the starting point. The <B>ci</B> program checks revisions into an archive; <B>co</B> checks versions out from an archive; <B>rcs</B> creates archives and manages their attributes; <B>rlog</B> prints the archives' revision logs; <B>rcsmerge</B> merges different sets of revisions into one; and <B>rcsdiff</B> is a front end for <B>diff </B>and <B>diff3</B>. The <B>rcsintor(1)</B> manual page provides an overview of the programs (see Figure 1).<p>
The first step in organizing the huge amounts of text for the Linux book was to set up an RCS archive for each article. The individual archives incorporated the initial revision. In this case, the initial revisions were the text of the previous edition. By default, RCS stores its archives in a subdirectory, <B>./RCS</B>, and this directory structure was maintained for ease of archiving and backup as described below.<p>
Because only one person had access to the archive, non-strict locking was used. With many people accessing a set of documents, revision clashes can be prevented by using the RCS locking mechanism. The shorter articles were written in SGML, and the book-length manuscripts were written in LaTeX 2e. Before editing, the SGML was translated into LaTeX. For every article that made it into the anthology, Postscript proofs of the edited articles were provided to the authors, and their corrections incorporated into the draft that went to the printer. For each document, <B>file.sgml</B>, and its derived <B>file.tex</B>, an RCS archive was created and initialized with the commands:<p>
<PRE>
rcs -i -U -tinitial.msg [file.sgml]
rcs -i -U -tinitial.msg [file.tex]

</pre><p>The file <B>initial.msg</B> contained a single line of text that identified the document as legacy text from the previous revision. The <B>-U</B> option prevents strict locking of the archive. By default, RCS provides strict locking of revisions.<p>
The archive file is created in the <B>./RCS</B> subdirectory with the same name as the working file and a "<B>,v</B>" suffix. By default, read-only permissions are given to the archive, and only the person who created the archive can access it. For example:<p>
<PRE>
-r--r--r--   1 kiesling users          91 Aug  3 10:54 file.sgml,v

</pre><p>If the <B>-t</B> command line option is not used, RCS prompts the user for a message.<p>
Before the working document has been checked in, the initial RCS archive entry, as printed by the <B>rlog</B> command, looks like this:<p>
<PRE>
RCS file: RCS/file.sgml,v
Working file: file.sgml
head:
branch:
locks:
access list:
symbolic names:
keyword substitution: kv
total revisions: 0
description:
This is the initial revision.

</pre><p>If strict locking was selected, the "<B>locks:</B>" entry would have read, "<B>locks: strict</B>".<p>
At least one of the documents was edited by several people. It was necessary, when archiving between editors, to control who had the ability to access the archives. RCS, by default, provides access to the archive's owner. Enabling other users to access the archive is done with the command:<p>
<PRE>
rcs -asmith,jones file.sgml

</pre><p>Then the RCS archive information for the archive looks like:<p>
<PRE>
RCS file: RCS/file.sgml,v
Working file: file.sgml
head:
branch:
locks:
access list:
smith
jones
symbolic names:
keyword substitution: kv
total revisions: 0
description:
This is the initial revision.

</pre><p>After an archive is created, the document itself must be checked in. This is done with the <B>ci</B> command. So, for each SGML and LaTeX file, the commands are simply:<p>
<PRE>
ci -u file.sgml
ci -u file.tex

</pre><p>The <B>-u</B> flag on the command line maintains the archives in an unlocked state. If strict locking of a particular revision is desired, the <B>-l</B> flag can be used instead.<p>
If we specify the <B>-l</B> flag, the archive entry looks like this.<p>
<PRE>
RCS file: RCS/file.sgml,v
Working file: file.sgml
head: 1.1
branch:
locks: strict
access list:
smith
jones
symbolic names:
keyword substitution: kv
total revisions: 1;     selected revisions: 1
description:
This is the initial revision.
-----------------------------
revision 1.1
date: 1998/08/03 16:16:18;   author: kiesling;  state: Exp;
Initial revision

</pre><p>The <B>-u</B> command line option also has the effect of checking in a working file and then checking it out again. By default the initial revision is 1.1, and each successive revision has its minor version number incremented by one (e.g., 1.2, 1.3, 1.4, and so on). A different revision number can be given as an argument to the <B>ci</B> command, as in:<p>
<PRE>
ci -u2.1 file.sgml

</pre><p>This increments the revision number to 2.1 and results in the archive entry:<p>
<PRE>
RCS file: RCS/file.sgml,v
Working file: file.sgml
head: 2.1
branch:
locks: strict
access list:
smith
jones
symbolic names:
keyword substitution: kv
total revisions: 2;     selected revisions: 2
description:
This is the initial revision.
-----------------------------
revision 2.1
date: 1998/08/03 16:23:49;  author: kiesling;  state: Exp;  lines: +1 -0
This revision has the major version number incremented.
-----------------------------
revision 1.1
date: 1998/08/03 16:16:18;  author: kiesling;  state: Exp;
Initial revision
Organizing and Searching by Key Word
</pre><p>RCS provides for key word searching in the text. The <B>ident</B> program can be used to search and categorize documents by key word. Although not used in the <I>Linux: The Complete Reference</I> project because of formatting considerations, key words can be included in RCS working files, which are updated when the working file is checked out. The key words are delimited by dollar signs, "<B>$</B>". Whenever a document is checked out of a working file, the date and time, and revision number are made current. The revision log can also be included.<p>
For example, when a working file is checked out, the "<B>$Id$</B>" keyword is expanded to the date and time of the revision, the user ID of the author (or the person who created the archive), and the file name of the document. In a LaTeX file, if we create a one-line text file, called <B>id.txt</B>, with the string:<p>
<PRE>
%% $Id$

</pre><p>it can be prepended to a LaTeX source file, as in the following example:<p>
<PRE>
cat id.txt file.tex.orig &gt;file.tex.out

</pre><p>Then the preamble the LaTeX file might look like:<p>
<PRE>
%% $Id$
\documentclass[12pt,twoside]{book}
\begin{document}

</pre><p>When checked in to the RCS archive and checked out again, the <B>$Id$</B> string is expanded, and the preamble looks like the following.<p>
<PRE>
%% $Id: file.tex,v 2.2 1998/08/03 17:25:08 kiesling Exp $
\documentclass[12pt,twoside]{book}
\begin{document}

</pre><p>In TeX and LaTeX documents, dollar signs are used to delimit math mode input, so RCS strings used in this way should be commented out. Ident prints the RCS key words that are embedded in a file.<p>
<PRE>
&gt; ident file.tex
$Id: file.tex,v 2.2 1998/08/03 17:25:08 kiesling Exp $

</pre><p>The <B>rlog(1)</B> manual page provides details on the RCS key words that can be embedded in documents. They include the path name of the working file, the user name of the file's owner, the date and time the revision was checked out, and the revision log text for that revision. Checking out a document with <B>co</B> expands the key word where it appears in the document. For example, an expanded <B>$Log$</B> entry might look like this.<p>
<PRE>
%% $Log: file.tex,v $
%% Revision 1.3  1998/08/04 19:06:36  kiesling
%% Derived from the second draft of the author's SGML code.
%%

</pre><p>In a SGML file, the <B>$Log$</B> key word (if it is enclosed in a comment) might look like this before expansion.<p>
<PRE>
&lt;!-- $Log$ &gt;

</pre><p>After it is expanded, the revision log entry should appear as:<P>
<PRE>
&lt;!-- $Log: file.sgml,v $
&lt;!-- Revision 1.2  1998/08/04 19:34:34  kiesling
&lt;!-- Author's second revision.
&lt;!--&gt;

</pre><p>Unfortunately, SGML (at least using the LinuxDoc DTD) is particular about how comments are formatted. The proper form of a <B>$Log$</B> entry, if it is to be enclosed by comments, is:<p>
<PRE>
&lt;!-- $Log: file.sgml,v $
Revision 1.2  1998/08/04 19:34:34  kiesling
Author's second revision.
--&gt;

</pre><p>The following <B>sed</B> script will format the comment that contains the <B>$Log$</B> key word correctly.<p>
<PRE>
#! /usr/bin/sed -f
s/^&lt;!-- [^$]/    /
s/^&lt;!--&gt;/--&gt;/

</pre><p>If the script is placed in a file of its own (here called <B>sgml-comment.sed</B>) and given execute permissions, the standard output of the command, showing only the edited comment of the SGML file, will look like this.<p>
<PRE>
&gt; sed-comment.sed &lt;file.sgml
&lt;!-- $Log: file.sgml,v $
Revision 1.2  1998/08/04 19:34:34  kiesling
Author's second revision.
--&gt;
<p>
</pre><p>Including RCS entries in source files, however, may not be desirable if the RCS data is to appear in the formatted output. This is because the output is dependent on the formatter, and results will be different if the output is post-processed by LaTeX or <B>troff</B>. Generally, RCS key words format well in HTML and plain ASCII text.<p>
<B>Archiving, Distribution, and Backup</b><p>For archival storage purposes, the default RCS directory structure, where revisions are stored in a <B>./RCS</B> subdirectory, means that no special measures are necessary when making backups. However, for distributing the archives to authors or outside peer reviewers, for example, it is often not desirable to include the RCS archives in the distribution. Fortunately, <B>tar</B> provides an exclusion mechanism, provided by the "<B>X</B>" flag to <B>tar</B>. This indicates that a file containing the regular expressions of file path names to exclude from the archive follows on the command line. Although <B>tar</B>'s command line syntax is less than intuitive, file names generally follow the option switches in the order that the options are specified. For example, to make a backup file <B>archive-file.tar.gz</B>, the command is the following:<p>
<PRE>
tar zcvfX archive-file.tar.gz exclude-file archive-directory

</pre><p>The file, <B>exclude-file</B>, is a plain text file that contains the single line:<p>
<PRE>
*RCS*

</pre><p>Another file processing utility, <B>find</B>, can be used to clean up the auxiliary and temporary files generated during text processing in order to save space in the archive and to speed backup. Here is part of one shell script that was used for backup.<p>
<PRE>
#!/bin/sh
find . -name "*~" -exec rm -f {} \; -print
find . -name "#*" -exec rm -f {} \; -print
find . -name "core" -exec rm -f {} \; -print
find . -name "*.dvi" -exec rm -f {} \; -print
find . -name "*.aux" -exec rm -f {} \; -print
find . -name "*.log" -exec rm -f {} \; -print
find . -name "*.out' -exec rm -f {} \; -print
find . -name '*.bak" -exec rm -f {} \; -print
find . -name "*.dj" -exec rm -f {} \; -print

</pre><p>Each <B>find</B> command searches the current directory and subdirectories for files that match the arguments to the <B>-name</B> search criterion. The command "<B>-exec rm -f {}</B>" executes the shell command "<B>rm -f</B>". The braces ("<B>{}</B>") expand to the name of the matching file. The semicolon ("<B>;</B>") marks the end of the command to be executed, and the <B>-print</B> command prints the name of each matching file to the standard output.<p>
If we wanted to list the archived files belonging to the author, "Jones", the following command would be used:<p>
<PRE>
find ./RCS -name "*,v" -exec awk '/Jones/' \{\} \; -print

</pre><p>The braces and semicolon must be escaped with backslashes when the command is executed from the sh shell prompt. This prevents the shell from interpreting them itself.<p>
Of course, the working file names do not have the "<B>,v</B>" suffix, and they are located in the current directory, not the <B>./RCS</B> subdirectory. Again, <B>sed</B> comes to the rescue to edit the path names:<p>
<PRE>
find ./RCS -name "*,v" -exec awk '/Jones/' \{\} \; -print | \
sed `s/,v//' |\
sed 's/.\/RCS\///'

</pre><p>The first <B>sed</B> command simply removes the "<B>,v</B>" suffix from the archive name. The second <B>sed</B> command removes the "<B>./RCS/</B>" prefix. The forward slashes in the path name must be escaped with backslashes, so they are not confused with the pattern delimiters.<p>
The files whose archives contain a string that is given on the command line can be archived with the following shell script.<p>
<PRE>
#! /bin/sh
#
find ./RCS -name "*,v" -exec awk "/$1/{print ARGV[1]}" {} \; | \
sed 's/,v//' |\
sed 's/.\/RCS\///' |\
tar zcvfT $1.tar.gz -

</pre><p>If we name the shell script <B>archive-string.sh</B> and give it executable permission, it uses the following syntax:<p>
<PRE>
archive-string kiesling

</pre><p>to search for the archives that contain the name "<B>kiesling</B>". To dissect this program line by line, the <B>-name</B> argument to <B>find</B> in the first line matches all archive files in the <B>./RCS</B> subdirectory. The <B>-exec</B> statement:<p>
<PRE>
awk "/$1/{print ARGV[1]}"

</pre><p>matches the files that contain the string in the <B>awk</B> text pattern, not the files matched by <B>find</B>. Note that the <B>$1</B> in the <B>awk</B> pattern is expanded from the shell prompt when the script is executed, but the <B>ARGV[1]</B> string is expanded with the file name provided by <B>find</B>.<p>
The two <B>sed</B> commands, as described above, edit the names of the matching archive files, so they match the working files which contain the author's name in the current directory.<p>
The <B>tar</B> statement is straightforward. The <B>T</B> option specifies that tar take its list of input files from a file - in this case, the standard input.<p>
<B>Conclusion</b><p>The tasks of cataloging authors' revisions, editing and formatting the documents, proofreading the output, archiving, and generating authors' proofs and final output, is complex enough when only one document is involved. The complexity increases when multiple documents are involved, just as it does in software projects that have multiple source code modules. Utilities that automate the task can save hours of the editors' time. RCS and the text processing utilities are flexible enough that these techniques described above can be adapted easily to projects' specific requirements.



<h1>About the Author</h1><p>










Robert Kiesling is the editor of Linux: The Complete Reference, 6th Edition and a contributor to Linux Installation and Getting Started. He is also the maintainer of the Linux Frequently Asked Questions (FAQ) list. Comments should be directed to: <B>kiesling@terracom.net</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
