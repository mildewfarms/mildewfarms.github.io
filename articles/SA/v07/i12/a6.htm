<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i12: Writing Maintainable Perl Programs and Shell Scripts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><a href="../../../../source/SA/1998/dec98.tar"><b class=codeListing>dec98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Writing Maintainable Perl Programs and Shell Scripts</H1><p>
<p>Brian Tanaka<p>
It's all too common for system administrators, especially novices, to fall into the trap of writing sloppy Perl programs and shell scripts. Sloppy programs and scripts are problematic because, although they may function perfectly well, they are harder to maintain, pass on to others, enhance, and debug than tidy, well-organized scripts.<p>
Fortunately, by using a handful of simple techniques, you can write tidy programs and scripts. This will save you time and aggravation in the long run, and help you finish your scripts with speed and efficiency in the short run. By using these techniques, you will make your job and the jobs of your colleagues easier.<p>
This article is not intended to be an exhaustive exploration of good programmatic style. Rather, it describes some techniques that have worked well for me over the years. The techniques are easy to use and go a long way toward making programs and scripts easier to read and maintain.<p>
The techniques I will cover can be summarized as follows:<p>
<UL>
<LI>Be consistent
<LI>Include an informative prologue
<LI>Use whitespace effectively
<LI>Comment your code
<LI>Be terse with caution
<LI>Include documentation
</UL><p>
<B>Consistency of Style</b><p>How you indent, line up your braces, use whitespace, and place comments constitutes your own style of programming. How you decide to handle each element of your style is up to you, provided it is logical. But, once you find a style you like, use it consistently.<p>
For instance, if you like to brace your "while" loops in Perl with the opening <B>{</B> on the same line, like this:<p>
<PRE>
while &lt;FOO&gt; {
&amp;dostuff;
}

</pre><p>then always do it that way. If you ever get the urge to write:<p>
<PRE>
while &lt;FOO&gt;
{
&amp;dostuff;
}

</pre><p>resist it. Consistency throughout your programs and scripts significantly increases readability.<p>
<B>Prologue</b><p>The beginning of your program or script is very important. A quick review of the first dozen lines or so should provide the reader with critical information that will help her interpret or modify the code.<p>
Here is an example of a good prologue:<p>
<PRE>
#!/usr/bin/perl
# diskhogs - This script generates a report of the ten users
#            who use the most diskspace on this host.
#
#   Author: Brian Tanaka
#     Date: Mon Jul  6 18:21:14 PDT 1998
#

</pre><p>By skimming these lines, the reader knows which interpreter is being used (Perl), what the name of the script is (diskhogs), what it is supposed to do (report the top disk hogs), who wrote it, and when it was written.<p>
The statement of purpose is particularly important. Don't make your reader read through your whole script just to find out what it's supposed to do. Be as verbose as you need to be, but make sure you have a clear summary of the purpose of the program.<p>
If revisions are made, use this section to document who made the revisions, when they were made, and provide a brief description of the changes. The prologue is also a great place to put special instructions to the reader. For instance, you could note that the program uses a configuration file that can be modified to customize behavior, or mention which variables to check and modify if the program or script is moved to a new host.<p>
<B>Whitespace</b><p>Liberal and logical use of whitespace is one of the most effective ways of making your programs and scripts more readable. Be aware of the amount of whitespace between words, between lines, and between groups of lines. Don't crowd everything together. For instance, you can emphasize the boundaries between functional or logical units within your program by increasing whitespace between them. So, instead of:<p>
<PRE>
# Write a timestamp to the log file to show when the script ran
$date = `date`;
chomp($date);
open (LOGFILE, "&gt;&gt;$logfile") || die "could not open $logfile\n";
print LOGFILE "$date: ";
# Count how many times the string "deblobulator.html" appears
# in the web access log
open (ACCESS, "$access") || die "could not open $access\n";
while ($line = &lt;ACCESS&gt;) {
$count++ if ($line =~ m/deblobulator\.html/i);
}
close (ACCESS);
# Write the result to the log file
print LOGFILE "deblobulator.html hits: $count\n";
close (LOGFILE);

</pre><p>you might do something like this:<p>
<PRE>
#
# Write a timestamp to the log file to show when the script ran
#
$date = `date`;
chomp($date);
open (LOGFILE, "&gt;&gt;$logfile") || die "could not open $logfile\n";
print LOGFILE "$date: ";

#
# Count how many times the string "deblobulator.html" appears
# in the web access log
#
open (ACCESS, "$access") || die "could not open $access\n";
while ($line = &lt;ACCESS&gt;) {
$count++ if ($line =~ m/deblobulator\.html/i);
}
close (ACCESS);

#
# Write the result to the log file
#
print LOGFILE "deblobulator.html hits: $count\n";
close (LOGFILE);

</pre><p>Although this is a trivial example, you can see that the second example is easier to understand because the functional groups are visually differentiated. In a long, complex program, visual clarity becomes even more critical.<p>
Indentation is another important form of whitespace. A chunk of code like this:<p>
<PRE>
while &lt;FOO&gt; {
&amp;dostuff;
if ( $stuff ne "blah" ) {
&amp;domorestuff;
}
}

</pre><p>is much easier to read than:<p>
<PRE>
while &lt;FOO&gt; {
&amp;dostuff;
if ( $stuff ne "blah" ) {
&amp;domorestuff;
}
}

</pre><p>Be as consistent and predictable as possible, so that your use of whitespace reliably means something to the reader (even if only subconciously). Given that, you should pay attention to your use of whitespace within single lines as well.<p>
<B>Comments</b><p>Inheriting a long, complicated program or script that lacks useful comments is aggravating. Comment your code. Too many comments are better than not enough.<p>
I adhere to the following guidelines:<p>
1.  Comments that introduce a new, major section of code are formatted as follows:<p>
<PRE>
#
# Description of following section goes here. It's as
# detailed as the situation requires.
#

</pre><p>         I use at least three blank lines before this type of comment in order to set it apart from the section above, because it heralds a new distinct logical chunk.<p>
2.  Comments that explain a line (or set of lines) precede that line and are formatted as follows:<p>
<PRE>
# Explanation of following line or lines goes here.

</pre><p>3.  Very short descriptive comments can be included on the same line, like so:<p>
<PRE>
$datafile = "/home/btanaka/data";       # Important data file
$tmpfile = "/var/tmp/deblobulator.$$";  # Temporary blob file

</pre><p>Note that the short comments line up.<p>
A richly commented program is easier to understand and modify. Get into the habit of explaining how each section of your code works. If you're ever in doubt about whether a section or line requires a comment, go ahead and write one. It's better to err on the side of too much information than not enough.<p>
<B>The Long Road vs. the Short Road</b><p>The Perl slogan says, "There's More Than One Way To Do It." This is often true in shell scripts as well. Some ways of doing a given task are more terse than others.<p>
It's up to you to decide how terse any given chunk of code should be. However, bear in mind that in terms of readability, it's better to be less terse unless there's a compelling reason to do otherwise. If you do have a compelling reason to be very terse, you can mitigate the negative effect on readability with good, clear, concise comments. In general, I prefer to use a less terse style unless by doing so I incur some performance cost that I cannot afford.<p>
<B>Documentation</b><p>A well-written program or script is not complete without an appropriate amount of documentation. In many cases, the comments in the code are enough. In other cases, more thorough documentation is necessary, and it's worth taking the time to create a README file, a man page, or POD format documentation.<p>
<B>Summary</b><p>Be consistent; always include an informative prologue; use whitespace effectively; comment your code; be terse with caution; and include documentation. By doing these simple things, you will make your Perl programs and shell scripts much easier to read and maintain.<p>
If you would like to learn more about stylistic principles in programming, many books about programming devote at least a short section to it. For Perl programmers, <I>Progamming Perl</I>, 2nd Edition by Wall, Christiansen, and Schwartz from O'Reilly and Associates covers style issues in Chapter 8: Other Oddments.



<h1>About the Author</h1><p>










Brian Tanaka is a system administrator currently working at RealNetworks in Seattle, Washington. He can be reached at: <B>btanaka@real.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>