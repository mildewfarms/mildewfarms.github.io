<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i12: Sidebar:  Managing Personal root Accounts</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink>Sidebar 2</span></td>
		<td><span class=navbarLink><a href="a1_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1998/dec98.tar"><b class=codeListing>dec98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Sidebar:  Managing Personal <B>root</B> Accounts</h1><p><p>
The use of individual root accounts (e.g., <B>rootjs</B> for John Smith's <B>root</B> account), rather than the anonymous real root, is advantageous when sys admins use RCS, and is preferable for these reasons as well:<p>
<ul>
<li>Each person can have their own personal <B>root</B> environment. This is accomplished by either specifying unqiue home directories or by customizing the <B>.profile</B> with a case <B>$LOGNAME</B> statement.<p>
<li>It makes it more convenient to determine who did what.<p>
<li>Each account can have a separate root shell history (if you use <B>su -rootyou</B> to become <B>root</B>)<p>
<li>It will enable you to keep track of who did what edits as root with RCS. (Even though you are really root (<B>uid=0</B>) when you log in, RCS will use your login name to track changes.)<p>
<li>It is more secure than sharing the real root password. If necessary, you can disable one user's root access without having to change the password for everyone.<p>
</ul>
<B>Adding root Accounts</b><p>Using <B>vipw</B>, if available, edit the <B>passwd</B> file(s) to add an entry something like this:<p>
<PRE>
root:x:0:1:Super-User:/:/bin/sh
rootjs:x:0:1:Root - John Smith:/:/bin/ksh

</pre><p>When adding additional uid 0 accounts, remember the 8-character limit on the length of UNIX user names. It may be convenient to name the accounts <B>rootxx</B>, where <B>xx</B> are the users initials.<p>
Note that under AIX, users are added using the <B>smit</B> command. <B>smit</B> doesn't allow the addition of multiple password entries with the same user id. I work around this limitation by adding the additional <B>rootyou</B> accounts with other uids. I then edit the <B>/etc/passwd</B> and <B>/etc/security/user</B> file manually to set the uid to 0 and set the user attributes like those of the real root account.<p>
If your system provides a utility such as Solaris' <B>pwck(1M)</B>, you can use it to check the <B>passwd</B> file integrity before logging out of your root shell. When adding multiple "<B>uid=0</B>" accounts, make sure to add the additional <B>root </B>accounts after the "normal" one, so that files owned by <B>uid=0</B> will show <B>root</B> as the owner. (On most systems <B>getpwuid(3)</B>, the function commonly used to translate a numeric user id to a user name, will perform a sequential search of the <B>passwd</B> file. Still, some systems, such as Digital UNIX, create a hashed database of <B>passwd</B> file entries to efficiently perform <B>getpwuid(3)</B>, so <B>ls(1)</B> might show a user name other than simply <B>root</B>. This is only a small annoyance as long as you put the word <B>root</B> in the names of all "<B>uid=0</B>" accounts.) Also, it's safer to leave the real <B>root</B> as the first line in case the <B>passwd</B> file is somehow corrupted while editing.<p>
Make sure that the GECOS field has a unique "real" name (i.e., more specific than "superuser" or some such thing) so that if anyone sends email using the name from the GECOS field, it will go to the right place. Many sendmails will allow you to send to the user name by the name in this field with underscores in place of spaces (e.g., John_Smith). You would want this email to go to John Smith's normal account. However, if you had accidentally put John Smith in the GECOS field as <B>rootjs'</B> "real" name, email to "John_Smith" would be delivered to <B>rootjs</B>, because that entry would be encountered earlier in the passwd file.<p>
<B>Becoming root using su(1)</b><p>The <B>-</B> argument to <B>su(1)</B> causes it to invoke a login shell. This is necessary so the shell startup files (e.g., <B>/etc/profile</B>, <B>.profile</B>) and <B>rc</B> (e.g., <B>/.kshrc</B>) will be sourced - enabling you to customize your root shell environment:<p>
<PRE>
$ su - rootyou
Password:
#
Changing a root Account Password
</pre><p>When changing a <B>root</B> account password, it's important to use your own <B>root</B> account name as the argument to <B>passwd</B>. Otherwise, you will end up changing the real <B>root passwd</B> and confusion will ensue:<p>
<PRE>
# passwd rootyou
New password:
Re-enter new password:
#
Maintaining Shell Startup Files
</pre><p>Common shell startup files, such as <B>/etc/profile</B> and root's <B>.profile</B> should be compatible with Bourne shell syntax, so they will be compatible with all commonly used shells. A similar rule holds true for csh-derived shells and their respective startup files. Here's a sample fragment for root's <B>.profile</B>:<p>
<PRE>
# { Some systems don't set LOGNAME to the login name specified at the
# "login:" or as arg to su(1).  (I.e. sometimes it will be "root" even <br># though another uid=0 username was specified.  Try to fix that here...
case "$LOGNAME" in
root|'')
LOGNAME=`/usr/bin/logname` # set LOGNAME correctly to the real login name
export LOGNAME
;;
esac
# }

case "$LOGNAME" in

you|rootyou) # rootyou uses ksh
LOGNAME=rootyou
export HISTFILE=/.sh_history_${LOGNAME?}
;;

*) # generic root, keep syntax Bourne shell compatible
HISTFILE="/.sh_history_$LOGNAME"
export HISTFILE
;;

esac

</pre><p>Lastly, under some UNIX flavors, I have noticed that the <B>LOGNAME</B> environment variable is not set to the real login name given at the <B>login:</B> prompt or as an argument to <B>su</B>. This problem is exhibited under RedHat Linux with <B>pdksh</B> as the login shell, for example. If after logging in as <B>rootyou</B>, you find that <B>LOGNAME</B> is set to just <B>root</B>, rather than your own personal login name, modify your shell initialization file so that it will be set appropriately. For instance, if your login shell is <B>sh</B>, <B>bash</B>, or <B>ksh</B>, add this line to <B>root</B>'s .profile:<p>
<PRE>
LOGNAME=`/usr/bin/logname` # be sure LOGNAME is set correctly to the login name
export LOGNAME

</pre><p>If multiple system administrators maintain these files, it would be a good idea to use RCS.
<p>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
