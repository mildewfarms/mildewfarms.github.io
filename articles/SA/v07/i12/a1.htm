<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i12: Sys Admin File Revision Control with RCS</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a1_s2.htm">Sidebar 2</a></span></td>
		<td><span class=navbarLink><a href="a1_t1.htm">Table 1</a></span></td>
		<td><a href="../../../../source/SA/1998/dec98.tar"><b class=codeListing>dec98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<p>
<H1>Sys Admin File Revision Control with RCS
</H1><p>
<p>Dave Plonka
<p>System administrators do a lot of operating system configuration. In systems such as UNIX, this task is done almost exclusively by editing plain text files that determine the behavior of the system. Any sys admin who has been tasked with duplicating all the tweaks done to a mature system knows that it's often impossible to remember all the changes made to a system since the base OS install. Additionally, in many environments a team of systems administrators shares the responsibility of system maintenance. Certainly every sys admin in such an environment has been surprised at one time or another by an unexpected change done by a co-worker. Systems or processes that allow the participants to track configuration changes are not new. Sometimes they are loosely referred to as "configuration management" or, usually in software development and maintenance, simply as "revision control".<p>
A revision control system, used to track modification of such configuration files could provide: (1) a "documentation" mechanism through which sys admins explain why a change was made; (2) a "locking" mechanism so that two or more sys admins don't overwrite each others' changes by simultaneously editing the same file; and (3) an audit trail or historical record of what has been done, and the ability to retrieve an earlier configuration if necessary. The RCS utility is the basis for the system that I will describe. (For a discussion of differences between SCCS and RCS see the sidebar RCS vs. SCCS.)<p>
<B>Introducing RCS</b><p>Most administrators know that RCS, the Revision Control System, manages file revisions. Although it can be used to maintain any group of plain text files, in UNIX environments these files are most often C language source files, shell scripts, and configuration files. In addition to managing source code, RCS can enable sys admins to:<p>
<ul>
<li>Store and retrieve revisions of text files.
<li>Maintain a history of changes.
<li>Resolve access conflicts when two or more sys admins wish to modify the same file.
</ul>
<p>Some UNIX systems (e.g., HP-UX, RedHat Linux, Digital UNIX) supply a version of RCS with the system. You should be sure that you are using a fairly current version, such as 5.x or greater.<p>
<B>Obtaining and Installing RCS</b><p>As of this writing, the latest version of RCS is 5.7, packaged by the name <B>rcs-5.7.tar.gz</B>. It is available from many sites via anonymous <B>ftp</B> including <B>ftp://ftp.cs.purdue.edu/pub/RCS/</B> and <B>ftp://prep.ai.mit.edu/pub/gnu/</B>. Installation is well documented. The only unusual bit is that the RCS author doesn't allow you to perform the build as <B>root</B>. The following is an example of how you might extract, build, and install RCS. If your system has a <B>nobody</B> user, you can substitute that for <B>user</B> below; otherwise use another non-root account, such as your own. (You should refer to the <B>README</B> and <B>INSTALL</B> files supplied in the distribution to verify that this is appropriate for your situation.)<p>
<pre>
# mkdir -p /usr/local/src
# cd /usr/local/src
# mv /tmp/rcs-5.7.tar.gz .
# gunzip -c ./rcs-5.7.tar.gz |tar xf -
# chown -R user:group rcs-5.7
# su - user
...
$ cd /usr/local/src/rcs-5.7
$ rm -f config.cache
$ ./configure
...
$ make
...
$ exit # back to root
# make install clean
...

</pre><p><p>
At this point, the RCS commands and <B>man</B> pages are installed. You may also wish to obtain and install the <B>find_revisions</B> script, discussed below. This RCS reporting tool is available at: <B>http://net.doit.wisc.edu/~plonka/find_revisions/</B>. There are a few prerequisites to take care of before sys admins begin using RCS as root.<p>
<B>Using RCS as root</b><p>In applications other than system administration, RCS is most often used by "normal", non-<B>root</B> users. RCS uses the user's login name (from the <B>LOGNAME</B> or <B>USER</B> environment variable) to uniquely identify the user when a lock is obtained (using the RCS <B>co</B> command) and in maintaining the RCS log information on check-in (using the <B>ci</B> command). Unfortunately, sys admins often must do their machine configuration work as <B>root</B>. On most systems, <B>root</B> is essentially an anonymous account because it doesn't identify which individual is currently operating as <B>root</B>. When using RCS in an environment with more than one sys admin, this is unacceptable.<p>
A solution I've found for this problem is to create personal "<B>root</B>" accounts. That is, create multiple accounts with the user id of 0, each with a unique name identifying the sys admin who uses it. Because RCS uses the <B>LOGNAME</B> to identify the "locker", even though multiple accounts may have uid 0, RCS will be able to differentiate among them. If you will have multiple sys admins using RCS to perform maintenance tasks on a given machine, see the sidebar titled "Managing Personal <B>root</B> Accounts".<p>
One caveat of which sys admins should be aware when using RCS as <B>root</B> is that text editors, such as <B>vi</B>, will sometimes allow you to force the writing of a read-only file. This can be used to side-step RCS's locking mechanism, and could result in file modifications being lost. In practice, this need not be much of a problem since <B>vi</B>, for instance, will warn that the file is read-only - the user must use <B>:w!</B> to force the write. It should be sufficient just to remind users that they still must "play along" with RCS for it to work correctly. As is often the case, those with <B>root</B> privilege should not abuse it to work around the intended process.<p>
<B>Which Files Should be Maintained Using RCS?</b><p>Any plain text file can be maintained using RCS. UNIX configuration files have formats that allow varying amounts of freedom. For instance, shell scripts such as <B>/etc/profile</B> allow the introduction of comments by beginning the line with the <B>#</B> character. This allows you to paste a comment to remind others that the file is being maintained using RCS. For example:<p>
<pre>
# $Id$
#
#     #                     ###
#     #  ######    #   #    ###
#     #  #          # #     ###
#######  #####       #       #
#     #  #           #
#     #  #           #      ###
#     #  ######      #      ###
# THIS FILE IS BEING MAINTAINED USING RCS!
# PLEASE USE the RCS co(1) and ci(1) commands to maintain it.

</pre><p><p>Other files, such as <B>/etc/passwd</B>, have a rigid format and cannot contain such reminder comments. There may be other requirements. For instance, the <B>/etc/passwd</B> and <B>/etc/shadow</B> are very special cases. These files should always be writable because they are sometimes maintained using such commands as <B>vipw</B>, <B>chsh</B>, <B>chfn</B>, HP-UX's <B>sam</B>, AIX's <B>smit</B>, and Solaris' <B>admintool</B>. So, when using RCS with these files, the sys admin would leave them locked out at all times and periodically <B>rcsdiff</B> them to discover changes. When you wish to "checkpoint" these files, you would perform check-in with <B>ci -l</B>. Be sure to keep these configuration file formats and other issues in mind when using RCS to maintain critical system configuration files. Table 1 is a list of some common configuration files that usually reside on the root file system that you would maintain in RCS.<p>
<B>An RCS Tutorial</b><p>Here is an example of how to use RCS when updating the sendmail aliases file. We will add an alias to be used as the recipient of the output of the <B>find_revisions</B> reporting script discussed below.<p>
1. Log in using your own personal <B>root</B> account. Here I also show that you are really root (i.e., <B>uid=0</B>) and that your <B>LOGNAME</B> reflects a unique user name.<p>
<pre>
$ su - rootyou
Password:
# id -u
0
# echo $LOGNAME
rootyou
#

</pre><p><p>
2. Change directories to that in which the aliases file resides. On some systems, such as Solaris, that will be <B>/etc/mail</B> rather than <B>/etc</B> as is shown here. Since this is the first time we are using RCS, we will make a sub-directory that will contain the RCS revision (<B>,v</B>) files. (The RCS sub-directory is strictly optional, but it keeps your working directories less cluttered.) We then check in the initial revision of this file as it exists now. This will be the baseline from which we will make our change. Upon initial check-in, RCS asks for a description of the file. Quite often for systems administrators, the file is self-explanatory, so either enter a short description or just type <B>^D</B> (Control-d, or <B>EOF</B>) to indicate you are finished. Following this check-in, a read-only aliases file will be left in the working directory.<p>
<pre>
# cd /etc
# mkdir RCS
# ci -u aliases
RCS/aliases,v   &lt;-- aliases
enter description, terminated with single '.' or end of file:
NOTE: This is NOT the log message!
&gt;&gt; sendmail aliases file
&gt;&gt; ^D
initial revision: 1.1
done
#

</pre><p><p>
3. Check out the aliases file, with a lock. This will leave a writable aliases file in your working directory. Use the editor of your choice to add an alias called <B>root-revisions</B>.<p>
<pre>
# co -l aliases
RCS/aliases,v  -  aliases
revision 1.1 (locked)
done
# vi aliases

</pre><p><p>
4. Examine the modification. (For this particular change, you should probably run <B>newaliases</B> or <B>/usr/lib/sendmail -bi</B> to integrate the change into sendmail's database. You can test this new alias with <B>/usr/lib/sendmail -bv root-revisions</B>.) The <B>rcsdiff</B> command will show differences between the "head" or "tip" revision and the working file. (For our purposes, the head revision is simply the most recently checked-in revision.) Assuming that you approve of the modification as displayed, check in the revision, unlock the file, and leave a read-only aliases file. The <B>ci</B> command will ask for a "log message". You should explain why you made the change. Remember that it's better to explain why a change was done rather than to describe the change itself. The latter can always be deduced from the <B>rcsdiff</B> output, but the former may have been known only to the author of the change. When interacting with RCS, if you find that you've made a typo, simply type the interrupt character (usually Control-c) and issue the <B>ci</B> command again.<p>
<pre>
# rcsdiff aliases
===================================================================
RCS file: RCS/aliases,v
retrieving revision 1.1
diff -r1.1 aliases
38a39,41
&gt;
&gt; # folks who want to be notified about RCS revisions on the root file-system
&gt; root-revisions: you@your.org
# ci -u aliases
RCS/aliases,v  &lt;-- aliases
new revision: 1.2; previous revision: 1.1
enter log message, terminated with single '.' or end of file:
&gt;&gt; added "root-revisions" which is an e-mail alias to which <br>   &gt;&gt; the output of the "find_revisions" script is e-mailed as specified in <br>   &gt;&gt; root's crontab
&gt;&gt; ^D
done

</pre><p>
<p><p>5. You can examine the RCS revision file using the <B>rlog</B> command. Note that it displays the head revision, which user has a lock (if any), the description, and log messages.<p>
<PRE>
# rlog aliases

RCS file: RCS/aliases,v
Working file: aliases
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;     selected revisions: 2
description:
--------------
revision 1.2
date: YYYY/MM/DD HH:MI:SS;  author: rootyou;  state: Exp;  lines: +3 -0
added "root-revisions" which is an e-mail alias to which the output of
the "find_revisions" script is e-mailed as specified in root's crontab
--------------
revision 1.1
date: YYYY/MM/DD HH:MI:SS;  author: rootyou;  state: Exp;
Initial revision
========================================================================
#

</pre><p><p>
Although I was a bit verbose in clarifying some subtleties of the RCS commands, that was a basic example of an edit with RCS. Once you are more familiar with it, you'll see that you usually issue just this series of commands: <B>co -l file</B>, <B>vi</B> <B>file</B>, <B>ci -u</B> <B>file</B>.<p>
Common mistakes when learning how to use RCS include editing a file without first obtaining a lock (then finding out when attempting to write that the file is read-only), typing "garbage" characters into the RCS log message during check-in, and accidentally checking in a revision. These problems can be resolved with <B>RCS</B> commands. For instance, the <B>rcs</B> administrative command allows you to delete selected revisions within a <B>,v</B> file with the <B>-o</B> option.<p>
Never change file permissions to work around RCS access control and never attempt to edit RCS <B>,v</B> files directly. The revision files can become corrupt and unusable if you edit them - treat them as a "black box". With better understanding of the RCS commands' features, you will be able to manipulate revisions through RCS's interface and avoid exacerbating the problem that you're attempting to solve.<p>
<B>Useful RCS Commands</b><p>The following is a list of commands useful to systems administrators.<p>
<B>co [-M] file</B> - Check out <I>file</I> for reading. The <B>-M</B> specifies that the file should be retrieved with the original modification time, rather than the current time. (This is sometimes nice when using <B>make(1)</B>, because the file won't look as if it's been touched unless a real change has been made.)<p>
<B>co -l file</B> - Check out <I>file</I> locked (i.e., for writing).<p>
<B>rcsdiff file</B> - Show the differences for <I>file</I> between the revision currently locked and the previously checked in revision. That is, this command will show changes to <I>file</I> that are in progress.<p>
<B>ci -u file</B> - Check in <I>file</I>, to deposit changes made in the <B>RCS/file,v</B>. Before checking in a file, you will probably want to create an RCS sub-directory, which will contain the revision (<B>,v</B>) files: <B>mkdir RCS</B>. For administrative usage, it is important to use the <B>-u</B> option. This causes RCS to leave a read-only copy of the working file in place. By default (without the <B>-u</B>), <B>ci</B> will remove the working file, which would be a Bad Thing for most UNIX configuration files.<p>
<B>ci -l file</B> - Check in <I>file</I>, to deposit changes made in the <B>RCS/file,v</B> but retain a lock on the file. For administrative usage, this is an appropriate way to check in files that are edited by other utilities (e.g., <B>/etc/passwd</B> which is maintained using <B>vipw(1)</B>). It's important to retain the lock so that a writable working file will remain.<p>
<B>rcs -u file</B> - Break a lock for <I>file</I>. If someone else holds a lock on the file, you will be prompted for an explanation of why you are breaking their lock, and a message will be emailed to them. This is particularly useful when another sys admin has locked a file out and possibly modified it, but has neglected to check in the change and unlock it. If that user has modified the file, you should be sure to save their working file before performing <B>co -l </B>yourself.<p>
<B>rcs -u file &amp;&amp; rm file &amp;&amp; co -M file</B>  - Break a lock for <I>file</I>, remove the file with the edits to be thrown away, and check out the latest revision for reading. This procedure would be used to "back out" of a change you were working on, but decided not to check in. (Another method is to do a <B>co -u</B> and answer with a yes when <B>co</B> asks if it's okay to overwrite the writable working file.) See the <B>rcsintro</B> man page for more information.<p>
<B>Implement When?</b><p>When is the right time to implement RCS control on your system's configuration files? The answer is "as soon as possible". Every time you perform an edit without RCS, you potentially lose information about how a sys admin performs her job. This information could be used for such purposes as training new administrators or even helping you to fill in your timesheet at the end of the week.<p>
Ideally, to build a complete revision history, start with RCS as soon as the base operating system is installed. If your system does not provide RCS, you will have to install a compiler in order to build RCS from its source distribution. By starting early, you'll catch all those quick-and-dirty configurations and will be able to use them as a reference for configuring your next system from scratch. Another advantage to starting just after the operating system install is that the initial file revisions checked in with RCS will be those provided by the operating system vendor. Often, the initial configuration is useful as a reference to determine how to fix problems that have been created by customizations.<p>
That said, the adage "better late than never" still applies. Even if you didn't start from the initial system install, at least you will be able to track recent modifications and familiarize yourself with revision control so that you can apply it to future projects.<p>
<B>Reporting</b><p>Now that a revision control system is in place, a reporting mechanism would be useful to periodically report on activity involving RCS-maintained files. Ideally, the report will help identify:<p>
<UL>
<LI>Misuse, such as editing a file without first obtaining a lock<p>
<LI>Edits that are left "in-progress" for an extended period of time<p>
<LI>Poor explanations of why a file was edited<p>
</UL>
<p>You could do this sort of reporting with a combination of system and RCS-provided commands such as <B>find</B> and <B>rlog</B>. For instance, to show revisions to files on the root file system since July 1, you might issue this command:<p>
<PRE>
# find / -xdev -type f -name '*,v' -print |xargs rlog -d'1998/07/01'

</pre><p><p>
Although that may be sufficient in some instances, I wanted to fine tune the output format to show the RCS log information for revisions and to show the <B>rcsdiff</B> output for changes in progress. Additionally, if no changes were made, I didn't want any output. The result of my modifications is a Perl script called <B>find_revisions</B> mentioned above.<p>
Here is an example of the output of <B>find_revisions</B> showing recent changes on the root file system:<p>
<PRE>
# find_revisions -s 1998/07/01 -dx /
============================================================================
RCS file: /etc/RCS/group,v
revision 1.7
date: 1998-07-07 10:55:06-05;  author: rootme;  state: Exp;  lines: +1 -1
added Jess to the "net" group
============================================================================
RCS file: /etc/RCS/vfstab,v
revision 1.3
date: 1998-08-04 10:11:52-05;  author: rootme;  state: Exp;  lines: +6 -1
added mount of floppy
This is being used to hold the tripwire database
--------------
revision 1.2
date: 1998-07-23 15:07:15-05;  author: rootme;  state: Exp;  lines: +14 -2
added comment to remind folks that this file is maintained using RCS

specified "nosuid" for "/export" and "/var/data"
(Apr 23)
============================================================================
RCS file: /etc/RCS/defaultrouter,v
revision 1.2
date: 1998-07-06 16:54:09-05;  author: rootme;  state: Exp;  lines: +1 -1
changed the defaultrouter (May 8) now that the ATM LANE interface is up
============================================================================
RCS file: /etc/RCS/system,v
revision 1.2
date: 1998-07-23 15:08:17-05;  author: rootme;  state: Exp;  lines: +21 -0
added System V IPC configuration (May 11)
============================================================================
</pre><p><p>

find_revisions</B> has a number of options similar to those of <B>rlog</B>, <B>rcsdiff</B>, and <B>find</B>. This is its usage information:<P>
<PRE>
$ find_revisions -?
Unknown option: ?

usage: find_revisions [-hx] [-n newer_than_file|-s since_date] \<br>  [-u user(s)] [-d|c] [find(1)_args]
-h                     - help (shows this usage info)
mnemonic: 'h'elp
-n newer_than_file     - show revisions newer than
the modification time of the
specified file
mnemonic: 'n'ewer
-s since_date          - find revisions done since
the date specified.
The date format should be
that accepted by rlog(1)'s
"-d" option.
e.g. "%Y/%m/%d %H:%M:%S"
mnemonic: 's'ince
-u user(s)             - find revisions done by the
user(s) specified.
The argument format should be
that accepted by rlog(1)'s
"-w" option.
mnemonic: 'u'ser(s)
-d                     - show current rcsdiff(1)
output (if any) as well.
This is useful to discover
changes which are
in-progress, or simply
have yet to be checked-in
with ci(1).
mnemonic: 'd'iff
-c                     - show current rcsdiff(1) "-c"
output (if any) as well.
(implies "-d")
mnemonic: 'c'ontext diff
-x                     - restrict the search to the
file system containing the
directory specified.
mnemonic: -'x'dev

e.g.

$ find_revisions -x /

$ touch /var/tmp/find_revisions.touch
$ # time passes...
$ find_revisions -n /var/tmp/find_revisions.touch -x /

</pre><p>
<p><p>
Below is a sample crontab entry, to run <B>find_revisions</B> every day at 5:30 a.m. It will attempt to find RCS revisions since the previous time <B>find_revisions</B> was run from this crontab entry. If revisions or work-in-progress is found, the output will be emailed to the email recipient <B>root-revisions</B>, which we set up earlier in the sendmail aliases file. (You should create the file <B>/var/tmp/find_revisions.touch</B> when you initially submit this entry using crontab.)<p>
<PRE>
30 5 * * * /usr/bin/touch /var/tmp/find_revisions.next &amp;&amp;/usr/local/bin/find_revisions /
 -n /var/tmp/find_revisions.touch -dx/ /var/tmp/find_revisions.out &amp;&amp; /usr/xpg4/bin/mv /
 /var/tmp/find_revisions.next /var/tmp/find_revisions.touch &amp;&amp; test -s /var/tmp/find_revisions.out /
 &amp;&amp; /opt/local/bin/mutt -s "`/usr/bin/hostname`: recent revisions on / file-system"  /
 -i /var/tmp/find_revisions.out root-revisions
</pre><p><p>
<b>Reality Check</b><p>In assessing the practicality of the system, be sure that it is not prohibitively cumbersome. It's important that sys admins can use such a system even amidst the "fire-fighting" that is sometimes characteristic of their work. Here are some suggestions to raise the level of awareness of RCS usage and to help remind sys admins to participate in the system:<p>
<UL>
<LI>Remind administrators that RCS is being used to maintain the machine's configuration by placing comments within the files themselves when the file's format allows. Consider putting the full path to the real file (rather than a symbolic link) within the comment as well.<p>
<LI>Set up an email report to those interested in seeing recent revisions done by administrators.<p>
<LI>Make some simple documentation available showing a synopsis of typical RCS usage for sys admins. The man pages are the definitive reference, however a simple tutorial showing the common "check-out, edit, check-in" is less overwhelming. A good place to provide this would be within a FAQ.
</ul><p>
<B>Summary</b><p>RCS is an effective tool to track file modifications. Although it is often considered a programmers' tool, it is useful as a system administrators' tool as well. When used to track modifications to system configuration files, RCS provides a mechanism for administrators to cooperate in a team environment, to keep team members informed of changes, and to recall past configurations for problem solving.




<h1>About the Author</h1><p>
Dave is a benevolent hacker and UNIX aficionado. He is employed as a Network Engineering Technology Systems Programmer in the Division of Information Technology (DoIT), at the University of Wisconsin, Madison. He can be reached at: <B>plonka@doit.wisc.edu</B> or via <B>http://net.doit.wisc.edu/~plonka/</B>.



















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
