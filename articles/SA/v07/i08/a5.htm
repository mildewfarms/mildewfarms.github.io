<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i08: Centaur: Hybrid Desktop with Manageability</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a5_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a5_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a5_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a5_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1998/aug98.tar"><b class=codeListing>aug98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Centaur: Hybrid Desktop with Manageability</H1><p>
<p>Yuval Lirov, Dave Macolino, Martha Ben-Michael, and Andrew Rieger
<p>
Hybrid systems, desktops that combine UNIX and Windows NT, offer better systems performance and significant flexibility but usually cost more because of increased systems management complexity. However, gaining the advantages of multiple platforms without increasing costs is possible using uniform systems management. Centaur, a combined UNIX/NT workstation, uniformly administered under Atlas, is a working prototype for this new approach. It is currently deployed in production to 105 users spanning trading, sales, research, development, and support at a Wall Street firm. The system approach and the Atlas management techniques are presented here as potential guides to others implementing similar architectures.<p>
Hybrid systems enable coexistence of applications on different platforms prior to their migration to the new platform, but they also introduce a new complexity aspect to system support. Increased complexity usually results in lower systems reliability and increased support costs. Specifically, SA productivity ratio can drop from 200 UNIX hosts/SA to 85-100 hybrid Desktops/SA, raising the systems support costs by a factor of 2. Moreover, as new desktops are brought to the users without taking away the old desktops, the rising number of networked computers creates network congestion problems in terms of both connection ports and network traffic. Finally, the hybrid systems expose multiple new problems at the application level, including keyboard mapping problems, divergent behavior under different X servers, different fonts, and centralized file system service synchronization (Figure 1).<p>
Surprisingly, a new systematic approach to hybrid systems support helps achieve application transparency while maintaining traditional UNIX support productivity levels. It is based on X-hosting technology, and it provides the best of the two different systems (namely, UNIX and Windows NT) by integrating them along three dimensions: time, data, and function. Specifically, a hybrid system allows simultaneous use of shared file and print services, the ability to run both MS and X Windows applications, font sharing, common user names and passwords, and system monitoring. Centaur is an example of a hybrid system that achieves better computing services at lower costs.<p>
<B>Systems Management</b><p>In a hybrid environment, uniform systems management has paramount importance because of the potential economies of scale. Unfortunately, to our knowledge none of the tools available on the market today provides a cross-platform, cross-functional. and ubiquitous functionality. Atlas, a homegrown prototype of such a tool, implements most of the required aspects.<p>
Specifically, Atlas is a global systems management platform for 3,200 hosts, 360 data servers, 10,200 batches, 2,600 backups, and more than 100 NT hosts in New York, Tokyo, and (for global applications) London. Atlas provides access to systems information via the Intranet web. The information spans the spectrum between real-time production crisis management, systems configuration, change management, and support service level accountability. For instance, in May 1997, we experienced 35 production systems outages. In 80% of the cases, Atlas notified us first, allowing proactive troubleshooting ahead of users noticing the problem. Automated crisis identification and notification are key to achieving and maintaining the productivity of 167 hosts/SA despite the recent 25% growth in systems administration workload.<p>
<B>Architecture </B>-<B> NT Desktops and UNIX Back End Servers</b><p>After considering several alternative architectures, we settled on combining Microsoft NT workstation and UNIX back-end servers with remote X-hosting technology on a native NT window manager. Centaur, our internal name for the hybrid desktop, provides an interim solution that is both cost-effective and user friendly. Only one interface is needed to access both platforms' applications and only one workstation is required on the desktop.<p>
Figure 2 depicts the scheme for the Centaur configuration. This prototype uses the following 5 components:<p>
<ul>
<li>NT Workstation - The user's desktop for running both NT and UNIX-native applications.<p>
<li>UNIX Server - File services and UNIX-native applications are run by many NT workstations from these servers. Typical ratios are five NT workstations to one SPARCstation 5 Model 170. Ratios increase using faster servers.<p>
<li>HummingBird Corp's eXceed - PC X Server providing remote display capability for UNIX/X Window applications.<p>
<li>Samba - Samba is a robust implementation of SMB services on UNIX. It provides file and print sharing to native NT clients. <p>
<li>Load Balancing Name Server - <B>lbnamed</B> tracks load on UNIX servers and dynamically updates the name server authoritative for the domain on which the NT stations are placed with an alias for the best performing host. This allows the UNIX applications to be served in parallel from multiple workstations, ensuring balanced application load. This functionality is transparent to the user.<p>
</ul><p>
While the commercial elements of the system and Samba are well-known to most system administrators, the load balancing name server, <B>lbnamed</B>, is not - and warrants a more detailed examination.<p>
<B>lbnamed </B>-<B> The Load Balancing Name Server<p>
lbnamed</B> is a freely distributed load balancing name server written in Perl. The distribution can be obtained from:<p>
<B><p>
http://www-leland.stanford.edu/~schemers/dist/lb.tar<p>
<p>
lbnamed</B> provides a means of transparently distributing the compute cost of multiple users running an X application across a number of UNIX servers. <B>lbnamed</B> can be used as a low-cost HA (high availability) solution to clustering UNIX servers or workstations.<p>
A host designated as the load balancing name server tracks the load on a defined group of machines. When a user invokes an X application, a request is sent to the load balancing name server. The name server resolves this request by returning the address of the machine that will yield the best performance, and the application is invoked there.<p>
The load balancing name server consists of the following components:<p>
The poller - The poller daemon periodically polls each of its clients regarding system load and number of users. Based upon a configurable formula, it then calculates a weighted load for each client host and dumps this data into a file.<p>
<B>lbcd</B> - <B>lbcd</B> is the client daemon that runs on each client that is to be polled. <B>lbcd</B> responds to poller requests over UDP using a simple protocol (for more information, see the documentation included with the distribution).<p>
The <B>lbnamed</B> daemon - Externally, the lbnamed daemon looks like a standard DNS name server, listening on <B>named</B>'s port and providing resolutions to IP addresses requested. Internally, it maintains a hash table containing the data collated by the poller. Requests are resolved with the IP address of the least loaded system polled.<p>
At virtually no cost, the use of <B>lbnamed</B> provides the Centaur model with the following characteristics:<p>
<B>Scalability</B> - By simply adding new server names to <B>lbnamed</B>'s configuration file, new UNIX servers can be integrated into lbnamed's pool of X application servers. In this manner, the inevitable increase in number of users or application compute complexity can be accommodated with minimal administrative cost.<p>
<B>Robustness</B> - Because each X application is replicated across a number machines in the server pool, the loss of any given machine will not impact the availability of the application. If a server is unavailable for any reason, the <B>lbnamed</B> poller will see that it has failed to respond and remove it from the list of available servers. When the server comes back up it will be recognized by the poller and reinserted into the server pool.<p>
<B>Efficiency</B> - All too often misused technology is mistaken for insufficient technology. <B>lbnamed</B> transparently maximizes the use of all available system resources by eliminating the need for users to be educated regarding each system's existence or capabilities. As faster systems are added to the server pool, they will naturally absorb greater proportions of the workload as their system load's indicate their capacity to do so.<p>
<B>lbnamed </B>-<B> Configuration Examples</b><p>In most cases, <B>lbnamed</B> will be used to create a virtual machine. A cluster of workstations can be configured to operate under one virtual hostname. The host that is the least loaded will be returned. For example, assume we have an inventory of:<p>
<pre>
5 Sparc 5 170s w/ SunOS 4.1.3_U1  hostnames: s5_1 through s5_5
5 Sun Ultra 2200 w/ Solaris 2.6   hostnames: u2_1 through u2_5
</pre><p>In order for <B>lbnamed</B> to delegate workload across multiple machines in a domain, it must be authoritative for that domain. In this example, we'll use the domain name <B>lbnamed.centaur.org</B> (see Figure 3). The primary nameserver for the organization, <B>ns.centaur.org</B>, will point any name service requests to the nameserver that is authoritative for the <B>lbnamed</B> domain; we'll use <B>ns.lbnamed.centaur.org</B> in our example. The nameserver, <B>ns.centaur.org</B>, will have the following entries in its <B>db.centaur </B>file used by the normal implementation of BIND1:<p>
<pre>
lbnamed    IN    NS    nslb.centaur.org
</pre><p>
</b><p>A name resolution request that is sent to <B>ns.centaur.org</B> for the host <B>sunos.lbnamed.centaur.org</B> will be forwarded to <B>nslb.centaur.org</B>, since it is authoritative for the <B>lbnamed.centaur.org</B> domain. This server in turn will resolve the hostname in the SunOS grouping, <B>sunos.lbnamed.centaur.org</B>, to be one of the five Sparc 5s. The one that is selected will have the least load on it as determined by the poller. The poller uses formulas based on users logged into a system in conjunction with load average to determine the given load of a host. The formulas used to determine the system load are:<p>
<pre>
fudge = (tot_user - uniq_user) * 20;
weight = (uniq_user) * 100 + (3*l1) + fudge;
</pre><p>where:<p>
<ul>
<li><B>tot user</B> = the number of users logged in<p>
<li><B>uniq_user</B> = unique number of users logged in<p>
</ul><p><B> l1</B> = the load average over the last minute multiplied by 100<p>
The Sparc 5 with the best load average as determined by the poller is configured dynamically in the <B>lbnamed</B> server as alias <B>sunos.lbnamed.centaur.org</B>.<p>
Configuring lbnamed is done primarily in the poller configuration file. Included in the <B>lbnamed</B> distribution is an example file, <B>sweet.config</B>. The syntax of the file is:<p>
<pre>
hostname    weight-multiplier    alias(es)
</pre><p>In our example, we have 10 different machines on which to balance our application load (see Listing 1). This configuration will create two virtual machines <B>sunos.lbnamed.centaur.org</B> and <B>solaris.lbnamed.centaur.org</B>.<p>
<B>Flow of Application Execution</b><p>The NT Workstation running eXceed can run applications native to NT locally, or run UNIX/X Windows applications remotely from SPARCstations or servers. Both platforms' applications will run, transparently to the user, from either NT or UNIX environments. File and print sharing between platforms also functions transparently.<p>
The user of the Centaur desktop invokes either platform's applications through the NT Start Menu or desktop Icon. NT native applications run locally on the NT workstation. When a user activates a UNIX application, the NT operating system distinguishes that the program being executed is to be handled by the eXceed X Server. The eXceed "start file" passes the necessary runtime parameters to eXceed. These parameters include the host on which to remotely execute programs, the program to run with command line arguments, and the user ID under which the program is run. Next, the remote execution request is made by eXceed to a workstation contained in the "virtual cluster". Finally, the application is executed on the SPARCstation while being displayed to the NT Workstation making the request. The Perl wrapper script "ntXstart" sets the remote display (see Listing 2). This allows the user to connect from any NT workstation without having to manually set the location for remote X hosting.<p>
<B>Atlas </B>-<B> A Uniform Systems Management Platform</b><p>Atlas is a multi-platform, uniform systems management suite. It expedites navigation through the typical maze of enterprise-wide system components and provides both crisis management and comprehensive performance history for any UNIX or NT host, database, or batch process. Atlas uniquely integrates time, function, and structural aspect of support process; makes outages, systems' shortcomings, and support resources visible to everybody; and pulls the resources together to fix the problems.<p>
Atlas delivers critical information while maintaining a uniform view above a forest of details and multiple platforms. It provides an intuitive view of every aspect of multi-platform systems, yet it selectively presents this information only at the request and pace of each individual who uses it. On the highest level, it provides a view of business lines and their associated hosts, data servers, batches, backups, and any other categories used to define systems components (Figure 4).<p>
Architecturally, platform-dependent monitors periodically collect status of defined systems objects. Descriptions of the detected faults are passed on to a platform-independent fault management system, which in turn, diagnoses the problem using the configuration information available about the object and the severity and frequency of the fault. It then defines the appropriate notification method and recipients, and passes the diagnostics and the notification information on to the notification and problem tracking systems. Real-time and historical data of detected faults are displayed on both UNIX and NT platforms through a platform-independent GUI written in Java.<p>
Atlas (specifically its problem tracking system) can be a powerful tool for ensuring that the support sector remains accountable to the users running and developing applications on both UNIX and NT platforms. In addition to the automatic creation of problem tickets when a fault is detected, users can submit requests through an intuitive GUI. Atlas also provides reports allowing both support managers and users to stay on top of the work flow. For the systems manager, pending reports show what work is outstanding for his or her group. For the systems user, support meeting agenda reports show all recently completed work and all outstanding requests. For all interested parties, there are daily backlog statistics, calling out priority items as a special case (Figure 5).<p>
Atlas uses the Microsoft Performance Monitor, which is part of the NT OS, to monitor the NT hosts. The monitor is configured to raise alarms when certain error conditions are detected. When an alarm is raised, a message that includes the description of the problem and its source is sent to the UNIX fault management server via TCP/IP. The fault management server diagnoses the problem, issues notifications, and displays the current status and historical error information on the platform-independent Atlas Java GUI. NT host configuration information, collected via remote polling by Windows NT Diagnostics tool, is stored in a centralized database and is displayed by the Java GUI.<p>
<B>Open Issues</b><p>Although much has been accomplished in terms of cross-platform integration and systems management, there are still a number of open issues, which need to be addressed before Centaur can be considered a production quality environment. These issues fall into three broad categories discussed below.<p>
<B>Desktop Integration</b><p>Although Centaur begins to address many of the issues concerning desktop integration, there is still much work to be done. File sharing between UNIX and NT systems is still an open issue. One method is to run one of the third party NFS daemons on the NT box and share files via NFS. Although NFS is a well-established industry standard in the UNIX world, its performance and robustness is still in question on the NT side. An alternate method is to use NT's SMB protocol and run Samba, a public domain SMB daemon for UNIX. Both methods require testing for robustness and performance.<p>
A second open issue is the decision between using XDM versus RSH in authentication and application launching. There are two clear design choices in this decision. XDM is more flexible in terms of management and authentication, but it uses a remote window manager and takes control of the entire NT desktop. The remote window manager is significantly slower than a local NT window manager.<p>
Third, scores of applications must be tested to ensure that all functionality, aesthetics, and behavior exists on the eXceed X Server. Most likely special fonts, keyboard mappings, and user environments will need to be implemented on NT in order to provide seamless execution.<p>
Finally, there is the issue of the load balancing name daemon. While the <B>lbnamed</B> is theoretically a big win in terms of robustness and performance, it is still in the beta testing stage and must be significantly stress tested before being used in a production environment.<p>
<B>Environmental Impact</b><p>Until recently, the majority of network infrastructure served one specific platform, either PC or UNIX-based systems. As the need grows for improved technology, networks are beginning to host a combination of these platforms. As more systems begin to populate a network, its efficiency and availability decrease as use proportionally increases. Can Centaur aide in reducing network traffic while making network resources such as ports available? Further testing and network traffic analyses need to be performed.<p>
In recent years, disaster recovery has become a growing concern for firms in the financial industry. The focus of any disaster recovery project is to have an off-site location that will allow the business to function in the event of a disaster that would render the primary site useless. Needless to say, vast resources and expenses accompany this type of undertaking. Currently in an environment where UNIX and NT co-exist, both would be critical for conducting business. Does Centaur provide enough flexibility to provide a service to both UNIX and NT applications in the event of a disaster?<p>
<B>Systems Management</b><p>A centralized cross-platform systems management scheme needs to be developed. Currently, monitoring is supported, but user management for both UNIX and NT must be developed and tested. Aspects that need to be covered are: UNIX and NT menu management, cross-platform username resolution, email management, and application distribution.<p>
<B>Summary</b><p>Unitl recently, the primary Wall Street desktop computing environment has been the UNIX workstation. These workstations have provided a flexible and robust environment in which to run both in-house and off the shelf applications. Unfortunately, these workstations lack the ability to run common productivity tools typical to the PC environment.<p>
In the past two years, Microsoft Windows NT has gained popularity as a workstation environment. The NT workstation combines the user friendly, GUI environment of Windows with a more robust, secure workstation platform. The NT workstation allows users to run PC applications in a more professional environment. Additionally, because NT runs on the PC platform (among others), it is an attractive choice from a corporate cost perspective. There are numerous debates as to whether NT is as good as UNIX for the financial environment. People contest its manageability, its robustness, and the true cost of ownership. In our opinion, NT will be a key desktop environment for the next generation of workstations, and UNIX servers will continue to provide a flexible, robust, and easily managed server environment. Combining NT desktops and UNIX servers into a single architecture, which we have dubbed Centaur, provides the best of both worlds.<p>
A methodology for remote support of the combined desktop needs to be built and tested in a production environment. Among other issues, it must deal with the following: special keyboard mappings and different behavior under different X servers such as xnews, X, or eXceed. Also, different fonts used by UNIX applications need to be identified and configured on a font server or integrated within the standard NT blast. Finally, some file sharing issues include AFS and DFS synchronization must be addressed.<p>
<B>References</b><p>Y. Lirov, "Mission Critical Systems Management," Prentice Hall, 1997.<p>
Y. Lirov, M. Ben-Chael, P. Brin, M. Covic, A. Rieger, A. Sherman, and T. Wagersreiter, "Web-based Distributed Sytems Management with Atlas,: forthcoming on Mathematical and Computer Modelling, 1998. <p>
Y. Lirov, M. Ben-Michael, L. Chen, A. Rieger, A. Sherman, and T. Wagersreiter. "Atlas: A Universal Platform for Distributed Systems Management." <I>Heuristics </I>-<I> The Journal of Intelligent Technologies</I>. Spring 1997, Volume 10, Number 1, pp. 38-55.<p>
Roland J. Schemers, III. "lbnamed: A Load Balancing Name Server in Perl." LISA IX, Fall 1995.




<h1>About the Author</h1><p>










Yuval Lirov is Senior Vice President at Lehman Brothers, in charge of the production of Portfolio Management Systems.  He is an author of "Mission Critical Systems Management" (Prentice Hall, 1997) and over 100 technical publications and patents in distributed systems management and resource allocation.Dave Macolino is Vice President at Lehman Brothers leading the Internet and Intranet initiatives for the firm.  He has over 10 years experience in the UNIX and PC platforms and has done extensive work on integrating the two platforms.Martha Ben-Michael is Vice President in Fixed Income Analytics department at Lehman Brothers. Previously she led the development of systems management projects in UNIX support area at Lehman Brothers and at the Israeli Ministry of Defense.Andrew Rieger is Vice President at Lehman Brothers, in charge of UNIX Support, managing 24x7 support of over 3,300 hosts and 360 dataservers.  





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>