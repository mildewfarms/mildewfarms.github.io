<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i08: Readership Sensitive Expiration Control for Usenet News</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/1998/aug98.tar"><b class=codeListing>aug98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>Readership Sensitive Expiration Control for Usenet News<p>
</H1><p>Yufan Hu<p>
News administrators have always dealt with the problem of having less disk space than they would like to have for Usenet News. During the past several years, however, that problem has become much worse. The typical solutions include carrying fewer news groups or using a shorter expiration time for the groups carried. These solutions treat all groups more or less equally without considering how the groups are read. This article explores the deficiency of the traditional expiration mechanism and suggests an improved solution based on the readership of the news groups.<p>
<B>News Expiration</b><p>Usenet news articles are continuously fed from other news servers and stored on local disks dedicated to this purpose. This disk space is usually called the news spool. The finite amount of this spool space limits the time of news articles kept in the news spool. They can only be kept for a finite period of time and then expired, meaning removed from the spool and discarded. Every news server has a mechanism for such expiration. For the most popular news server on UNIX, INN, a tool called <B>expire</B> does this job.<p>
When <B>expire</B> starts, it checks its configuration file <B>expire.ctl</B> to see how the expiration job is to be done. A line like this:<p>
<pre>*:A:7:30:60
</pre><p>
<p>tells <B>expire</B> that every article should be kept in the news spool for at least 7 days; it should stay for 30 days if the article itself does not have an "Expire:" header indicating the date it expires. If the article has such a header, it will be kept until that date, but no more than 60 days from the date it arrived in the news spool. The general format of such control rules is as follows:<p>
<pre>pattern:A:minimum:default:purge
</pre><p>
<p>where "pattern" specifies a wild card pattern to match news groups. The "minimum" value indicates the minimum number of days for any article whose group name matches "pattern" to be kept in the news spool. The "default" value specifies the default number of days for the article to stay if there is no "Expire:" header indicating its expiration time. If there is an "Expire:" header in the article, then the article will be expired shortly after the indicated expiration date, but not longer than "purge" number of days since its arrival to the server.<p>
There may be more than one such rule in the <B>expire.ctl</B> file. Each rule starts with a wild card pattern. This pattern is used to match group names. If a group name matches the pattern, then the minimum, default, and purge values from the rule are used to determine whether the article should be expired when the <B>expire</B> utility runs. <B>expire</B> scans through the whole <B>expire.ctl</B> file from the beginning to the end. The last matching rule is used for determining the minimum, default, and purge values. Thus, general control rules can be placed at the beginning of the file, and fine adjustments can be placed toward the end of the <B>expire.ctl</B> file. For example:<p>
<pre>
*:A:7:30:60
comp.*:A:14:60:90
</pre><p>
<p>determines that all groups in the "comp" hierarchy will stay for at least 14 days, default for 60 days, and be purged in 90 days. Anything else will stay for at least 7 days, default for 30 days, and be purged in 60 days. Any group that matches <B>comp.*</B> also matches <B>*</B>. But since the control rule for <B>comp.*</B> appears later, it is used to determine the expiration time for articles in the "comp" hierarchy.<p>
<B>expire.ctl Pitfalls</b><p>With today's news volume, it is very difficult for many sites to keep everything as long as 30 days. Daily news volume can be as big as 20 GB. Thus, 30 days worth will require as much as 600 GB. There are two approaches commonly used by many news administrator's to cope with this problem. The first way is to reduce the number of news groups the server carries. The server then rejects all articles whose group it does not carry, thus saving the disk space needed to store these articles. The problem with this approach is that, some groups interesting to our readers may also be excluded. The second approach is to try carry as many groups as possible but not keep the articles as long on the server, so that there is more space to accept new articles. The problem with this approach is that, if the expiration time is too short, our users must be vigilant about reading the news or risk missing important postings.<p>
<B>Collecting Readership Data</b><p>So, how can user readership information be collected? Some UNIX administrators have tried this on UNIX systems by scanning through <B>.newsrc</B> files in each user's home directory in order to search for subscribed groups. Although such information represents some readership on these UNIX systems, it is not accurate and is probably against privacy. A user can subscribe to a group, but then forget about it. This method also may not be very practical nowadays, because many users are non-UNIX users. They are using personal computers to read news. These users may not even have a UNIX account and may not leave a trace of their subscribed groups on the UNIX system even if they have one. Due to the heavy load of modern news servers, the current common practice usually excludes accessing the news from within the news server. News is now commonly accessed through NNTP protocol.<p>
On an INN news server, there are usually some <B>syslog</B> entries recording the activities of the news server. These activities include user's readership information. If a user has accessed one news group and read some articles, an entry like this:<p>
<pre>Jan 28 14:20:48 news nnrpd[8096]: reader.foo.com group \<br>  news.software.nntp 1<p>
</pre><p><p>
will be recorded in the <B>news.notice</B> level. Proper configuration of the <B>syslogd</B> allows this information to be saved in a file, usually called <B>news.notice</B> by administrators. A program can periodically scan this information to find out which groups are currently read by users.<p>
The <B>news.notice</B> file is usually recycled daily by a utility called <B>news.daily</B>. Thus the readership information collected contains at most one day's worth. This information can be kept in a database to represent the readership information over a period of time. The dynamic nature of the readership can be represented by adding new group information to the database each time the <B>news.notice</B> file is scanned and removing old entries that are not detected again in a predefined period of time. To track the time a group was last read, both the group name and the time it was last detected in the <B>news.notice</B> file are recorded in the database.<p>
<B>Adjusting expire.ctl</b><p>After the readership information is collected and stored in the database, it can be used to adjust the rules in <B>expire.ctl</B> so that the groups found in the database are kept a longer time, while those not found in the database (or the time since they were last seen is longer than a predefined length of time) are expired sooner. For example, if we find <B>news.software.nntp</B> in the database, we know that this group is currently read by some of our users, so articles in it should stay longer. The following <B>expire.ctl</B>:<p>
<pre>*:A:0:1:1
#adjusted based on readership
news.software.nntp:A:30:30:30
</pre><p>
<p>will keep articles in <B>news.software.nntp</B> for up to 30 days while removing everything else which is one day old.<p>
<B>Automatic Readership Information Collection and expire.ctl Adjustment Using actgroups</b><p>The readership information collection and <B>expire.ctl</B> file adjustment can be automatically done by a small Perl script called <B>actgroups</B>, shown in Listing 1. The script is named after "active groups" in that it is interested only in those groups that are actively read by local readers. We can see that these groups really are active, but many groups in INN's <B>active</B> file may not be. The first thing <B>actgroups</B> does is scan the news server log file, usually <B>news.notice</B>, to find out the readership information. The <B>scan_log()</B> function does this job. It scans through the <B>news.notice</B> file, finding lines similar to:<p>
<pre>Jan 28 14:20:48 news nnrpd[8096]: reader.foo.com group \<br>  news.software.nntp 1<p>
</pre><p>
<p>to find out the group name, <B>news.software.nntp</B>.<p>
Any group detected by the <B>scan_log()</B> will be used as the key to an associative array. The value of the element will be the time when <B>actgroups</B> started. This array is mapped to a DBM file so that its values are persistent across the sessions of <B>actgroups</B>. The array actually records the time a group is detected in the <B>news.notice</B> file. This information roughly represents the readership of the group during the time <B>news.notice</B> is recycled.<p>
After readership information is collected in the "%LASTREAD" database, <B>actgroups</B> must decide how to adjust the <B>expire.ctl</B> file to create different expire times for different groups. News administrators can control the decision made by <B>expire</B> and <B>actgroups</B> by putting control rules in the <B>expire.ctl</B> file. The default control rules, as specified above and in <B>expire.ctl(5)</B>, control the groups that are not read. <B>actgroups</B> introduces another set of rules, in similar syntax and semantics, to control the adjustment of expire time for the active groups, which are currently actively read. The format of such adjustment control rules is as follows<p>
<pre>#% patter:A:minimum:default:maximum
</pre><p>
<p>As you can see, except for the leading token <B>#%</B>, everything else is in exactly the same format as an ordinary control rule. The leading token is needed so the expire command will treat them as comments and ignore them.<p>
<B>actgroups</B> will scan <B>expire.ctl</B>, copy every line that is not generated by itself, and establish a list of control rules according to the adjustment control rules the news administrator has specified. This job is done by function <B>scan_expire_ctl()</B>.<p>
It scans through the <B>expire.ctl</B> file, and copies everything before the line:<p>

<pre>### Actively Accessed Groups Start ###
</pre><p>
<p>This line and everything behind it will be automatically generated by <B>actgroups</B> so the old one can be ignored during the scanning.<p>
While scanning the <B>expire.ctl</B> file, it looks for the adjustment control rules. For each line it finds, the pattern and the rest are separated and saved in <B>%rules</B> associative array for later use. The value of each pattern is also saved in <B>@patterns</B> array to preserve the order of such rules. This preserves the semantics of the <B>expire.ctl</B> control rules, so that rules appearing later in the file take precedence over the rules appearing earlier in the file. Thus, the administrator can also specify general adjustment rules first, followed by more specific ones.<p>
Now <B>actgroups</B> has the readership information and the adjustment rules. It is ready to generate adjustment lines for groups that it considers active. The function <B>adjust_expire_ctl()</B> does this job.<p>
It iterates over the <B>%LASTREAD</B> database to find an adjustment rule for each key in the <B>%LASTREAD</B> associative array, which corresponds to a group name detected by <B>actgroups</B> earlier. If a match is found and the time recorded in the database is not more than <B>$purge</B> days old, then an adjustment control line is emitted for the group. All of the expire values are replaced by the ones specified in the corresponding adjustment control rule.<p>
Finally, the old <B>expire.ctl</B> file is backed up, and the newly generated <B>expire.ctl</B> file is renamed to <B>expire.ctl</B> and is ready to be used by <B>expire</B>.<p>
The installation and configuration of the script are very simple. The script can be copied into any location and started at any time. There are only three Perl variables to be set according to individual news server's configuration. They are the location of the <B>%LASTREAD</B> database (which is usually in the same place as history file), the location of <B>news.notice</B>, and the location of <B>expire.ctl</B>. To have <B>actgroups</B> adjust expire time for active groups, set corresponding adjustment rules in the <B>expire.ctl</B> file.<p>
<B>actgroups</B> needs only to be run before expire runs. The best fit may be to run it together with <B>news.daily</B>. To do so, we can pass the full path as the parameter to the <B>news.daily</B> cron job entry, as in:<p>
<pre>30 3 * * * /usr/local/news/bin/news.daily delayrm \<br>  /usr/local/news/local/actgroups
</pre><p>
<p><B>news.daily</B> will call <B>actgroups</B> before it starts the expiration process.<p>
<B>Issues<p>
actgroups</B> adjusts the expiration time of a news group based on whether or not the group is read. It requires at least one article to be read by one user to activate the group. If a group was previously marked as inactive and then activated by a user, it will be impossible for the user to search articles older than the default time that was defined in <B>expire.ctl</B> at the time the group was activated. Only after activation will the articles in the group be kept longer. After the group is activated, at least one article must be read in the time defined by purge value; otherwise, the group will be marked as inactive again.<p>
Standard <B>nnrpd</B> server will not send a log entry to <B>syslog</B> if the reader only browses the group without actually reading an article. A simple patch to the <B>nnrpd</B> source can solve this problem. The patch can be found at:<p>
<pre>http://www.regentec.com/~yufan/actgroups/actgroups.html</pre><p>
<p>Conclusion<p>
actgroups</B> is a useful tool for managing the news servers that provide news reading service directly to the users. It collects user readership information and adjusts the expiration time for groups that are actively read by user. This tool can help provide maximum news service within limited disk space. It is able to help delay the time necessary to invest and upgrade the disk space needed for your news spool.<p>
<B>actgroups</B> may not be very effective for servers providing news feed service to other servers. In this case, if the default expiration time is set too short, the articles may be expired before they are delivered to other news server.<p>
<B>actgroups</B> has been used with good results for all the INN servers I have administered including newly released INN 2.0 with traditional storage format. The current version is the result of suggestions from many people, and their comments are acknowledged. The original assumption that only a small set of groups are actively read in a period of time has be proven by the number of groups recorded in the <B>%LASTREAD</B> database. Using the script, I have been able to keep a good feed for the "big 8" news groups, excluding binary groups, on a server with only 4 Gb of disk space.




<h1>About the Author</h1><p>










Dr. Yufan Hu started his system administration and software development career using UNIX in 1983 on a PDP-11/23. Since then, UNIX System and network administration have been part of his research and development career. He is currently in charge of networking and system-related activities for Regent Electronics Corp. He can be reached at: <B>yufan@recmail.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
