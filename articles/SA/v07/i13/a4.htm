<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>Web Feature:  Security Tools in FreeBSD</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<table width=100% cellpadding=15 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>
<td>
<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a4_f3.htm">Figure 3</a></span></td>
		<td></td>

	</tr>
</table>
</td>

</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top>

<H1>Security Tools in FreeBSD</H1><p>
Guy Helmer
<br>&nbsp;<br>
<p>This article provides a summary of security features in FreeBSD, a freely available FreeBSD UNIX-like operating system. FreeBSD provides a number of features that can be configured to reduce the risk of compromise. A well-configured FreeBSD system can provide needed services to users while being highly resistant to attacks.<p>
<B>Introduction</b><p>Any UNIX system administrator or network manager on a tight budget, but with a need for stable, high-performance network servers is prompted to consider alternatives to conventional commercial operating systems. While FreeBSD and similar systems obviously offer inexpensive alternatives for UNIX-like workstations and servers, their suitability from a security perspective may be less obvious. This article explores FreeBSD's security features with an eye toward assisting you in making a decision about whether it is suitable for your requirements. Before launching into an exploration of FreeBSD, suffice it to say that the relationship of UNIX to Internet security is a massive topic. There are numerous books and other resources that discuss various elements of the subject, some of which are included in the References at the end of this article. In particular, the interested reader is referred to <I>Practical UNIX and Internet Security</I> [4] and <I>Firewalls and Internet Security</I> [3], which are two of many well-known books on this topic.<p>
<B>Related Work</b><p>OpenBSD, a close relative of FreeBSD, is being developed with one of its stated goals being to improve the security of the BSD-based operating system. FreeBSD has and will likely continue to incorporate relevant security fixes identified by OpenBSD. OpenBSD information is available online at:<p>
<pre>
http://www.openbsd.org/.</pre><p>
<p><B>Road Map</b><p>The article will begin by discussing general system issues, most of which apply to nearly any UNIX system but for which FreeBSD provides specific assistance. Items included in the system discussion are physical system security, privileged programs, and filesystems. Next, network issues will be covered, with emphasis on weaknesses of particular protocols, reasons for avoiding certain network services, and solutions to known problems. The last half of the article concentrates on security features available on FreeBSD but not always provided by other UNIX systems. These features include system security levels, IP packet filtering, one-time passwords, and controlling remote access to user accounts.<p>
<B>Summary of Security Concerns</b><p>In general, a system should be as physically secure as necessary, and the system should have only a minimal set of services and privileges programs that are necessary to the system's desired level of operation. The following sections discuss various areas of security concerns in more detail.<p>
<B>Physical System and Console</b><p>With physical access to the system, an attacker of a FreeBSD system can give a <B>-s</B> option at the FreeBSD boot prompt and get a single-user mode shell with root privilege. To avoid this, if a system is not in a physically secured location (such as in a locked room with access limited to authorized personnel), it is a good idea to mark the console as insecure in <B>/etc/ttys</B> so that the system will require the root password when it enters single-user mode. See the <B>init(8)</B> manual page for details. If the system is not physically secure, it should not have a floppy disk drive. An attacker can use the FreeBSD boot prompt to boot a rogue kernel or mount the floppy disk as the root partition, thereby avoiding any safeguards in the standard <B>/etc/ttys</B>. If the system is in an extremely unsecure area, such as an unsupervised university lab, the system case should be locked shut. Some system cases even offer a tab (albeit flimsy and probably easily cut) through which a padlock and perhaps a security cable can be attached.<p>
<B>setuid Programs and Daemons</b><p>Problems in daemons and <B>setuid</B> programs are often exploited by crackers to gain root privileges on systems. It is wise to prune the daemons and <B>setuid</B> programs on systems to reduce the opportunities for trouble in case a vulnerability in one of these programs is found by a cracker.<p>
<B>Daemons</b><p>The idea with daemons is to turn off any that are not needed. Edit <B>/etc/rc.conf</B> and <B>/etc/inetd.conf</B> to turn off unused services. For example, if the <B>rlogin</B> or <B>rsh</B> services are not necessary, one can disable them in <B>/etc/inetd.conf</B> by commenting them out with a # symbol. Likewise, if the <B>lpr</B> line printer daemon is not needed, set the <B>lpd_enable</B> option in <B>rc.conf</B> to "NO".<p>
Another strategy is to replace daemons that are known to have had problems in the past with daemons that provide the same services but whose code was designed with security in mind. For example, while FreeBSD's sendmail daemon is kept in sync with the most current versions available, one could replace it with <B>qmail</B>, which was designed and written entirely with security in mind. <B>qmail</B> is available from <B>http://www.qmail.org/</B>.<p>
<B>setuid Programs<p>
setuid</B> programs are special programs in the system that run with the privilege of the program's owner when any user executes them. For example, the PPP program <B>/usr/sbin/ppp</B> performs some tasks that only root has permission to do, so its <B>setuid</B> bit is set, and it is owned by root. As a result, when any user runs <B>ppp</B>, it runs with the security permissions of the root user. See the manual page for <B>chmod(1)</B> for information on the <B>setuid</B> bit and other file permission bits. <B>setuid</B> programs are a security problem, because the programs often contain bugs that allow crackers to misuse them. Supplying user input or a command line argument that overruns the program's stack with malicious code is a common attack on <B>setuid</B> programs. Since the program is running with root privilege, the cracker's code executes with root privilege. The simplest way to review all <B>setuid</B> and <B>setgid</B> programs in the system is to execute the commands:<p>
<pre>
find / -perm -4000 -print
find / -perm -2000 -print
</pre><p>Using the generated list of <B>setuid</B> and <B>setgid</B> files, determine which of the programs are not necessary for system operation and use the command <B>chmod gu-s</B> filename to turn off the <B>setuid</B> and <B>setgid</B> bits of the unnecessary <B>setuid</B>/<B>setgid</B> programs. A list of common <B>setuid</B> and <B>setgid</B> commands and their uses are given in Figures 1 and 2.<p>
<B>Filesystems</b><p>On a system where the user's filesystems are separate from the filesystems containing the system executables and device-special files, a couple of filesystem options can stop some potential attacks or "back doors". One method of gaining root access or leaving a back door to gain root access again later is creating a <B>setuid</B>-root executable or creating a device special file to allow write access to the system's memory. The <B>nosuid</B> and <B>nodev</B> mount options can be used in <B>/etc/fstab</B> for filesystems on which there should be no <B>setuid</B> or device special files. See the <B>mount(8)</B> and <B>fstab(5)</B> manual pages for details.<p>
These options should be used on filesystems on which users can create files. It is a good idea to break apart the directories containing user files, such as<B> /home</B>, <B>/tmp</B>, and <B>/var/tmp</B>, onto separate filesystems from the <B>/usr</B> filesystem so that the <B>nosuid</B> and <B>nodev</B> options may be used on those filesystems. The <B>nosuid</B> and <B>nodev</B> options are especially important on filesystems that are NFS-mounted from an untrusted system. A rogue user on the other system could create a <B>setuid</B>-root executable or a <B>/dev/kmem</B>-equivalent device special file on the server's filesystem, then use that file on the client to gain root privileges. The <B>noexec</B> option may also be useful on a filesystem mounted from an untrusted server.<p>
<B>Monitoring the File System</b><p>Some system attacks are carried out through the UNIX filesystem, usually by abusing daemons or <B>setuid</B> programs. Typically these attacks create or change configuration files, such as user's <B>.rhosts</B> files, that then allow a cracker further access to a system. These attacks are typically prevented by closing holes in daemons and <B>setuid</B> programs, but the holes must first be found. Thus, it's good to either reduce the usefulness of these attacks or monitor the system for problems.<p>
<B>File System Monitoring</b><p>FreeBSD sends a daily security report to the root user every day. It checks for new or changed <B>setuid</B> programs or device special files. If new <B>setuid</B> programs appear, the time or size of <B>setuid</B> programs mysteriously changes, or new <B>UID 0</B> (root-equivalent) users appear, it's probably time for further investigation. But, if a system is thoroughly cracked, the reports will not indicate any problems because the security script and its data files are vulnerable to tampering. Only <B>tripwire</B> (see below), when correctly installed and used, can reliably detect system compromise. Unfortunately, due to the way the system is scanned for <B>setuid</B> programs, it is possible for the whitespace in the list of <B>setuid</B> programs to change, causing an occasional false alarm in the "<B>setuid</B> files and devices" section of the security report. Before you become too alarmed when a long list of "changed" <B>setuid</B> files appear in this report, you should doublecheck whether the messages are just due to changes in the whitespace in the list of files.<p>
<B>Advanced Monitoring with tripwire<p>
tripwire</B> is an add-on package that monitors the filesystem for changes in files and permissions. The installation instructions provided with <B>tripwire</B> provide an excellent overview of the package and the correct installation procedure.<p>
Essentially, <B>tripwire</B> should be installed and initialized on a pristine system (so that there is no chance that the system could have already been compromised before the <B>tripwire</B> installation). The <B>tripwire</B> executable file, linked as a static executable to avoid using the systems shared libraries, and its database file, which contains the digital signatures that verify the integrity of the files on the system, should be written to media that can be physically set read-only. Then, when <B>tripwire</B> is used to verify the integrity of the filesystem, it should be invoked directly from its executable on the read-only media. In sample installations by the author, the <B>tripwire</B> executable and database for each system was kept on a 3.5-inch floppy diskette on which the read-only tab was set to prevent modification. The author used <B>tripwire</B> for years and detected occasional anomalies that would have otherwise gone unnoticed. <B>tripwire</B> is available as a port on FreeBSD as security/tripwire.<p>
<B>rhosts and hosts.equiv</b><p>If the remote shell (shell) or remote login (login) network services are enabled in <B>/etc/inetd.conf</B> on a system, the files <B>/etc/hosts.equiv</B> and <B>.rhosts</B> are important for security. <B>hosts.equiv</B> defines which systems have users who are trusted to use any matching account without requiring a password. Each user's <B>$HOME/.rhosts</B> defines the remote systems and the users who may use that account without giving a password. See the man page <B>hosts.equiv(5)</B> for the particulars, but essentially no system's name should be listed in these files unless that host and the networks between them are truly trustworthy.<p>
Note that if the line + + appears in these files, the system is completely unsecure - any user on any other system can login to that system without a password unless the shell and login services are disabled. It has been reported on the BUGTRAQ mail list that crackers often leave a + + in a <B>.rhosts</B> file, which would allow the cracker back into that account from any other host.<p>
A form of attack may be executed where an intruder uses a vulnerability, typically in a system daemon or <B>setuid</B> program, to create a <B>.rhosts</B> file in a user's directory or append data to an existing <B>.rhosts file</B>. This attack seems to be less frequent since improvements have been made in the checks for ownership and permissions of the <B>.rhosts</B> file that <B>rlogin</B> and <B>rsh</B> make before they allow access. However, these attacks are still possible.<p>
One method to completely eliminate the problem is to turn off the <B>rlogin</B> and <B>rsh</B> services by commenting out or removing the login and shell service lines in <B>/etc/inetd.conf</B>. However, turning off these services often is not an option. For example, the shell protocol is used for other services, such as <B>rdump</B> remote backups.<p>
An often more acceptable method of limiting exposure is to limit the systems to which <B>rlogin</B> and <B>rsh</B> are allowed. This limitation is often implemented by installing the TCP wrappers daemon [8] by Weitse Venema. See the FreeBSD package <B>net/tcp_wrappers-7.4.tgz</B> and its accompanying manual pages for details.<p>
Another solution is to add the <B>-l</B> option to the <B>rlogind</B> and <B>rshd</B> services in the appropriate <B>/etc/inetd.conf</B> entries to prevent authentication using any <B>.rhosts</B> file other than root's.<p>
A last option in the <B>rlogin</B> and <B>rsh</B> area is to monitor the filesystem for <B>.rhosts</B> files that contain odd entries. However, this can be too little too late if an intrusion has already occurred.<p>
<B>Device Special Files</b><p>Device special files give users direct access to the hardware of the system via names in the filesystem, such as <B>/dev/mem</B> for access to the memory of the system. Access to critical hardware should be strongly restricted. For example, if <B>/dev/mem</B> were readable by everyone, a user's password could be observed by reading the data segment of the login program while it is running.<p>
An attack via device special files can be mounted by using a vulnerability in a daemon or <B>setuid</B> program to create a <B>/dev/kmem</B>-equivalent device, and then writing into the kernel via the newly created device to increase the privilege level of the intruder's shell. If the device special files are not properly protected, the intruder's task of raising her privilege is even easier.<p>
The device special files are given good default protection during an installation of FreeBSD, but one should verify that the permissions of these important files are set properly. Some of the device special files of particular interest are shown in Figure 3.<p>
The file <B>/etc/fbtab</B> specifies a list of devices that should have their ownership changed to that of the user who logs into the console. See the <B>fbtab(5)</B> manual page for details. Devices that one may want to list in this file include <B>/dev/audio*</B> and <B>/dev/console</B>.<p>
<B>Network Protocols</b><p>
Weaknesses exist in several network services protocols and TCP/IP itself [6, 1]. Here is a brief summary of solutions for network security issues:<p>
  <ul><li>Disabling unneeded network services in the <B>inetd.conf</B> and <B>rc.conf</B> configuration files.<p>
  <li>Filtering packets entering a site's network that have the site's IP network address in the source address. Such packets are obviously forged or originate from an incorrectly configured host.<p>
  <li>Using the TCP wrappers daemon [8] on TCP services started via <B>inetd</B> to prevent IP source routing. Verify the source IP address and host name of the remote host, and implement access restrictions based on the source IP address. See the FreeBSD package <B>net/tcp_wrappers-7.4.tgz</B> and its accompanying manual pages for details.<p>
  <li>If possible, using a Kerberos authentication server [7] and Kerberos-enabled versions of <B>rlogin</B> and <B>rsh</B> for strong authentication and secrecy.</ul><p>
The <B>ssh</B> secure shell package offers remote logins and file transfers that encrypt all data traversing the network. For this reason alone, <B>ssh</B> is a great replacement for <B>telnet</B>, <B>rlogin</B>, and <B>ftp</B>, especially for remote system administration. Its encryption of all data between the source and destination renders sniffing useless.<p>
The Network File System (NFS) protocol, which shares filesystems between systems via the network, has numerous security issues. If it is used, it is best hidden behind a firewall (note that FreeBSD can act as a packet filtering firewall). If NFS is used in a hostile environment (e.g., connected to the Internet without the benefit of a packet filtering router or firewall), the command <B>fsirand(8)</B> should be used to randomize the inode numbers of files and thus make guessing NFS file handle numbers more difficult for attackers. See the manual page for usage information on <B>fsirand</B> - it can't be used on mounted filesystems.<p>
Like NFS, the Network Information Service (NIS, also known as "Yellow Pages") has several security issues. NIS is useful for distributing user account information in a network of UNIX systems. Unlike NFS, NIS does not use a particular set of network ports, so it can't be specifically hidden behind a packet filtering firewall. FreeBSD's NIS uses the configuration file <B>/var/yp/securenets</B> to limit client access to NIS information. Each line in the securenets file is either a comment (denoted by a # symbol as the first character of the line) or an Internet address and network mask pair. For example:<p>
<pre>
172.16.0.0 255.255.0.0
192.168.5.0 255.255.255.0</pre><p>
<p><p>
<b>Features of FreeBSD and Relatives</b><p>FreeBSD offers several features not usually found in stock UNIX-like systems. Some of these features are common to other BSD-derived systems (NetBSD and OpenBSD) or Linux, so one may wish to consult the system's documentation to see whether these features are available.<p>
<B>System Security Levels</b><p>UNIX system security has suffered from the all-powerful access given to the root-privileged user. Once a cracker obtains root privileges, the entire system becomes vulnerable to the cracker. The 4.4BSD-derived systems offer a new security feature called "system security levels" (see the man page for <B>init(8)</B> for details on these security levels). Raised system security levels prevent certain actions on a system irrespective of a user's privilege. Used properly, this can prevent an assortment of system compromises, including the introduction of Trojan horses and back doors into system binaries and modification of configuration files.<p>
System security levels are: -1, permanently unsecure mode; 0, unsecure mode - no additional protections enabled; 1, secure mode - files may be protected from modification and memory device special files may not be opened for writing; 2, highly secure mode - protection of level 1 plus disk devices may not be opened for writing; 3, extended secure mode - protection of level 2 plus the IP packet filter list may not be changed. The default system security level of -1 is called "permanently unsecure mode" because <B>init(8)</B> will not automatically raise the level to 1 when the system goes into multiuser mode as it would if the security level were 0. Raising the security level above 0 causes the kernel to disallow all of these operations:<p>
  <ul>
  <li>Removal of the immutable and append-only flags on files
  <li>Direct writes to disk devices that are mounted at security level 1, or direct writes<br>
      to all disk devices at security levels higher than 1
  <li>Writes to the <B>/dev/mem</B> and <B>/dev/kmem</B> device special files
  <li>Changes to any file whose immutable flag is set
  <li>Loading any loadable kernel module
  <li>Changes to the IP packet filter lists (at security levels greater than 2)
</ul>
<p>When a FreeBSD system is installed by using a <B>make world</B> on the source code, a number of system files are installed with the immutable flag. In general, executable files that are <B>setuid</B> root are installed with the immutable flag. Note that systems installed via <B>sysinstall</B> (e.g., installed via the network or from CD-ROM) do not have the immutable flag set on any files by the installation program.<p>
At any time, the <B>schg</B> flag may be set on files with <B>chflags</B>, but the flag can only be cleared when the system is at security level \0001 or 0. During multiuser operation, the system security level may only be raised. The command to raise the security level to level 1 is:<p>
<pre>
sysctl -w kern.securelevel 1
</pre><p>The system security level can be raised automatically at system startup by including the above <B>sysctl</B> command in the system's <B>/etc/rc.local</B> file (and <B>/etc/rc.local</B> should then have its <B>schg</B> flag set as well). Raising the security level will limit file management activities, so you may not wish to use this feature on frequently changing systems. Once the security level has been raised, the only way to lower the security level is to restart the system. If you need to perform maintenance on the system, it can be booted into single user mode where the security level will be its default of -1.<p>
<B>IP Firewall</b><p>Several TCP/IP protocols included with FreeBSD, such as NFS and NIS, may be more secure if they are unaccessible from outside the trusted part of the network. For protocols that may not be restricted any other way, a packet filter that allows only designated protocols can be used to block external access. <p>
FreeBSD's kernel option <B>IPFIREWALL</B> enables IP firewalling, which applies filter rules to IP packets entering or exiting the machine. When a kernel built with the <B>IPFIREWALL</B> option starts, its default action is to drop every IP packet. Additional filter rules must be given to a system to allow it to accept and output desired IP packets. The startup script <B>/etc/rc.firewall</B> provides sample filters that will have to be modified before they can be used. The sample filter types are selected by the firewall option in <B>rc.conf</B>, which include:<p>
<B>open</B> - No limitations on any protocols; any IP packet may enter or exit any interface.<p>
<B>client</B> - Protects a system which is a client on a network. Given the client system's network number, subnet mask, and IP address, a basic filter is setup to allow all traffic originating from or destined for the local network, allow packets for any established TCP connection, allow incoming email and any outgoing TCP connection, and allow Domain Name Service and Network Time Protocol UDP packets (everything else is denied).<p>
<B>simple</B> - Setup a simple packet filter on a system that routes between networks, which is suitable for a simple FreeBSD router with two network interfaces.  Given the network numbers, subnet masks, and IP addresses of the external ("unsafe") network and internal ("safe") network, this option in <B>rc.firewall</B> creates a packet filter that:<p>
  <ul><li>Prevents outside packets with a source IP address of the internal network from entering, and likewise prevents packets from going outside unless they have a source address of the internal network (to prevent spoofing)
  <li>Allows all packets for established TCP sessions
  <li>Allows TCP connections for incoming email, Domain Name Service, and World Wide Web requests
  <li>Rejects and logs all attempts to connect to TCP services other than those allowed above
  <li>Allows all Domain Name Service and Network Time Protocol UDP requests and responses
  <li>Denies anything not explicitly allowed</ul>
<p>If the system security level is above 2, changes are not allowed to the packet filter list. This allows a system administrator to prevent modifications to the packet filter list in the event of a system compromise, much like the raised security level can prevent modifications to parts of the filesystem.<p>
The IP firewall option can assist in monitoring attempted attacks on a system. The kernel option IPFIREWALL_VERBOSE enables logging of packet filtering messages via <B>syslogd(8)</B>. The logged information can be useful in spotting port scanning or break-in attempts.<p>
<B>One-Time Passwords</b><p>Password sniffing has plagued the Internet for some time [2]. Users logging into <B>telnet</B> or <B>ftp</B> across the Internet may be well advised to use one-time passwords for logins from remote sites to avoid having their reusable password captured and abused by crackers.<p>
<p>
FreeBSD uses the S/Key software [5] to provide one-time passwords. Users can set up one-time passwords on a FreeBSD system by using the command: <p>
<pre>
keyinit
</pre><p>which will ask for a private password that only the user knows. This password probably should be different from the regular system login password, but doesn't have to be. Then <B>keyinit</B> will show something like:<p>
<pre>
ID fred s/key is 99 sp99609
BUY OUR BOLD LEER YOKE COW
</pre><p>The user can then generate a series of one-time passwords to take on her travels by using the command:<p>
<pre>
key -n 10 98 sp99609
</pre><p>which will ask for the user's private password used in the <B>keyinit</B> step above and generate the one-time passwords for the next 10 logins (98 down to 89). The user can print these passwords and take them along for her next remote logins over the Internet. (Of course, the printed password list poses other security concerns.)<p>
A FreeBSD system can require the use of S/Key passwords for logins from all sites other than local systems. The file <B>/etc/skey.access</B> (see the <B>skey.access(5)</B> manual page for complete information about this file) defines where S/Key passwords must be used. For example, if the administrator trusts the systems in his own network (numbered 172.16), but wanted users to always use S/Key one-time passwords for logins from other sites, he could use a <B>/etc/skey.access</B> file like this:<p>
<pre>
permit 172.16.0.0 255.255.0.0
deny
</pre><p>Note that <B>/etc/skey.access</B> does not affect all remote access methods, just <B>telnet</B>, <B>ftp</B>, and <B>rlogin</B>. For example, <B>ssh</B>, <B>pop</B> daemons, and <B>imap</B> daemons ignore S/Key restrictions.<p>
<B>Disallowing Logins</b><p>If a password is disclosed in any way to a cracker, that cracker may access the compromised user's account via protocols such as <B>telnet</B> and <B>ftp</B>. This may lead to further compromise of the site's system and network on which the account resides.<p>
An administrator can completely restrict <B>telnet</B> and <B>ftp</B> access for particular users and sites by adjusting the <B>/etc/login.access</B> file. This option can reduce the usefulness of compromised passwords by limiting the sites from which a system can be abused (see the <B>login.access(5)</B> manual page for details on this file).<p>
Note that <B>login.access</B> does not affect all remote access methods, just <B>telnet</B>, <B>ftp</B>, and <B>rlogin</B>. For example, <B>ssh</B>, <B>pop</B> daemons, and <B>imap</B> daemons ignore the restrictions in <B>login.access</B>.<p>
For example, if an administrator wanted to allow logins for all accounts to his or her system from two networks, 172.16 and 192.168.32, and allow all users in the group wheel to also login from the system with IP address 192.168.2.2, this <B>/etc/login.access</B> file could be used:<p>
<pre>
+:ALL:172.16.
+:ALL:192.168.32.
+:wheel:192.168.2.2
-:ALL:ALL</pre><p>
<p><b>Conclusion</b><p>Thanks to its development team and support from related developers, FreeBSD is a solid system that can be configured to stand up to security attacks. While the default installation is still fairly open and friendly to users, FreeBSD provides many security mechanisms and several add-on packages can improve a system's resistance. These security improvements can ensure the operation and availability of the system, as well as the confidentially of the information it contains.<p>
<B>Acknowledgments</b><p>Thanks to Adam Shostack, Falko Dressler, Robert N. Watson, and other reviewers for significant comments on previous versions of an unpublished article on which this article was based.<p>
Thanks to the FreeBSD core team and all of the FreeBSD contributors who have made FreeBSD an excellently performing, extremely stable operating system. Thanks also to the developers who produce security fixes, usually within days after security issues are found. (Online FreeBSD security support includes <B>ftp://ftp.freebsd.org/pub/FreeBSD/CERT/</B> for advisories and patches, and the mail list <B>freebsd-security@freebsd.org</B>. The mailing list archives are available and can be searched at <B>http://www.freebsd.org/search.html</B>.)<p>
<B>References</b><p>[1] Steven M. Bellovin. Security problems in the TCP/IP protocol suite. <I>Computer Communications Review</I>, 19(2), April 1989.<p>
[2] CERT Advisory 94.01: <I>Ongoing network monitoring attacks</I>. [Online] ftp://info.cert.org/pub/cert_advisories/CA-94:01.network.monitoring.attacks, August 17 1997.<p>
[3] Bill Cheswick and Steve Bellovin. <I>Firewalls and Internet Security: Repelling the Wily Hacker</I>. Addison-Wesley, 1994.<p>
[4] Simson Garfinkel and Eugene H. Spafford. <I>Practical UNIX and Internet Security</I>. O'Reilly &amp; Associates, Inc., Sebastapol, California, 1996. Second Edition.<p>
[5] Neil M. Haller. The S/KEY one-time password system. In <I>Proceedings of the Internet Society Symposium on Network and Distributed System Security</I>, San Diego, CA, February 1994.<p>
[6] Robert T. Morris. A weakness in the 4.2BSD UNIX TCP/IP software. <I>Science of Computer Programming</I>, February 25 1985.<p>
[7] Jennifer G. Steiner, B. Clifford Neuman, and Jeffrey I. Schiller. Kerberos: An authentication service for open network systems. In <I>Proceedings of the Winter 1988 Usenix Conference</I>, February 1988. (Version 4).<p>
[8] Wietse Venema. TCP wrapper: Network monitoring, access control, and booby traps. In <I>Proceedings of the UNIX Security III Symposium</I>. USENIX, September 1992. 
<h1>About the Author</h1><p>
Guy Helmer is a graduate student in Computer Science at Iowa State University, concentrating on security in operating systems and networks.  Previously, Guy was a system programmer and network engineer for a university, where he engineered local and wide area networks and administered UNIX servers, including several FreeBSD servers.  Guy has been a beta tester and occasional contributor for the FreeBSD Project since its inception.<P>




<P>
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >
</td>
</tr>

</table></center>
<! -- End MASTER TABLE -- >

</body></html>