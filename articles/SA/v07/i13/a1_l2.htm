<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>Listing 2</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<table width=100% cellpadding=15 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>
<td>
<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a1.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</span></td>
		<td><span class=navbarLink><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a1_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a1_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a1_l7.htm">Listing 7</a></span></td>
		<td></td>

	</tr>
</table>
</td>

</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top>
<h1>Listing 2</h1><p>
<pre>
#! /bin/bash -
# FILENAME: mkhtaccess
# DESCRIPTION: Creates htaccess files to protect an httpd directory tree.
# Protection may be specified through an input file or, for single directory,
# on the command line. Input file format is:
#
# dir USER=user[,user,...] GROUP=group[,group,...] ALLOW=net[,net,...] 	
#        DENY=net[,net,...]
#
# Comments are allowed on whole lines or part preceded by "#".
#
# Usernames and groups must be recognized by httpd, i.e. included in global or
# local htpasswd and htgroup files.
#
# USAGE: mkhtaccess [-H] [-f file] [-d network[,network,...]]
#	[-a net[,net,...]] [-t template] [-h file] [-v]
#	[-D dir] [-g group[,group,...]] [-u user[,user,...]]
# OPTIONS:
#	-H - Prints help message
#	-f file - Uses "file" for protection assignments
#	-d network - Denies access from "network"
#	-a network - Allows access from "network"
#	-t template - Uses htaccess file template
#	-h file - Name of htaccess files created
#	-D dir - Works on this directory's protections
#	-g group - Grants access to specified group(s)
#	-u user - Grants access to specified user(s)
#	-v - Produces verbose output
#
# LABEN S.p.A. - 23-dec-1997
#
# HISTORY:
# 0.0	Luca Salvadori &lt;lsalvadori.laben.it&gt; - 23-dec-1997
# 	- Functions and behaviour
# 0.1	Luca Salvadori &lt;lsalvadori.laben.it&gt; - 28-dec-1997
# 	- New options added
#
#
########################## S U B R O U T I N E S ##########################

# Program information
AUTHOR="Luca Salvadori &lt;salvadori.l@laben.it&gt;"
VERSION="0.1"
DATE="28-dec-1997"
# Initializing global variables
# Default networks to grant access to
DEF_ALLOW=laben.it,193.42.128.,193.42.129.,193.42.130.,193.42.131.
# Default networks to deny access to
DEF_DENY=all
DEF_TEMPLATE=htaccess.template        # Default template for htaccess
DEF_GROUP=sysadm                      # Default group to grant access to
DEF_USER=root                         # Default user to grant access to
DEF_FILE=mkhtaccess.dat               # Default input file
DEF_HTACCESS=.htaccess                # Default output file(s)
DEF_DIR=~/public_html/                # Default directory to protect
DIR_SELECTED=0                        # Initialize index to false (0)
FILE_SELECTED=0                       # Initialize index to false (0)
VERBOSE=0                             # Brief output is default
TEMP=/tmp                             # Scratch directory
TMPFILE=$TEMP/`basename $0`.$$        # Temporary file
CMDFILE=$TEMP/`basename $0`.ed.$$     # Temporary command file
# Options string
OPTS=":-H -t: -a: -d: -g: -u: -f: -h: -D: -v"
# Default options
DEFOPT="-D $DEF_DIR -a $DEF_ALLOW -d $DEF_DENY -h $DEF_HTACCESS -t $DEF_TEMPLATE"
# End of global variables initialization

function helpmsg() {
	echo "" 1&gt;&amp;2
	echo " `basename $0` Version $VERSION - $DATE" 1&gt;&amp;2
	echo " Author: $AUTHOR" 1&gt;&amp;2
	echo "" 1&gt;&amp;2
	echo " USAGE: `basename $0` [-H] [-f file] [-d network[,network,...]]" 1&gt;&amp;2
	echo "	[-a net[,net,...]] [-t template] [-h file] [-v]" 1&gt;&amp;2
	echo "	[-D dir] [-g group[,group,...]] [-u user[,user,...]]" 1&gt;&amp;2
	echo " OPTIONS:" 1&gt;&amp;2
	echo "	-H - Prints help message" 1&gt;&amp;2
	echo "	-f file - Uses "file" for protection assignments" 1&gt;&amp;2
	echo "	-d network - Denies access from "network"" 1&gt;&amp;2
	echo "	-a network - Allows access from "network"" 1&gt;&amp;2
	echo "	-t template - Uses htaccess file template" 1&gt;&amp;2
	echo "	-h file - Name of htaccess files created" 1&gt;&amp;2
	echo "	-D dir - Works on this directory's protections" 1&gt;&amp;2
	echo "	-g group - Grants access to specified group(s)" 1&gt;&amp;2
	echo "	-u user - Grants access to specified user(s)" 1&gt;&amp;2
	echo "	-v - Produces verbose output" 1&gt;&amp;2
	echo "" 1&gt;&amp;2
}

##################### E N D  O F  S U B R O U T I N E S ####################


########################## M A I N  P R O G R A M ##########################

# Parsing input parameters and assigning default if needed
options=`echo $*`
[ "$options" = "" ] &amp;&amp; { $0 $DEFOPT ; exit }

# Parsing options and setting defaults if needed
while [ $OPTIND -le $# ]
do
	getopts "$OPTS" option
	case $option in
		t)
			TEMPLATE=$OPTARG
			;;
		a)
			ALLOW=$OPTARG
			;;
		d)
			DENY=$OPTARG
			;;
		h)
			HTACCESS=$OPTARG
			;;
		H)
			helpmsg
			exit 0
			;;
		g)
			GROUP=$OPTARG
			;;
		u)
			USER=$OPTARG
			;;
		f)
			FILE=$OPTARG
			FILE_SELECTED=1
			;;
		D)
			DIR=$OPTARG
			DIR_SELECTED=1
			;;
		v)
			VERBOSE=1
			;;
		"?")
			echo "`basename $0` - ERROR: Option -$OPTARG requires an argument or is unknown." 1&gt;&amp;2
			echo "Run `basename $0` -H for help." 1&gt;&amp;2
			exit 3
			;;
		*)
			echo "`basename $0` - ERROR: Unknown option -$OPTARG." 1&gt;&amp;2
			echo "Run `basename $0` -H for help." 1&gt;&amp;2
			exit 2
			;;
	esac
	case $OPTARG in
		-*)
			echo "`basename $0` - ERROR: Option -$option requires an argument." 1&gt;&amp;2
			echo "Invalid argument $OPTARG." 1&gt;&amp;2
			echo "Run `basename $0` -H for help." 1&gt;&amp;2
			exit 3
			;;
	esac
done
# Setting defaults for unselected options
TEMPLATE=${TEMPLATE:-$DEF_TEMPLATE}
ALLOW=${ALLOW:-$DEF_ALLOW}
DENY=${DENY:-$DEF_DENY}
HTACCESS=${HTACCESS:-$DEF_HTACCESS}
GROUP=${GROUP:-$DEF_GROUP}
USER=${USER:-$DEF_USER}
FILE=${FILE:-$DEF_FILE}
DIR=${DIR:-$DEF_DIR}
# Perform sanity checks, just in case
[ $FILE_SELECTED -eq 1 -a $DIR_SELECTED -eq 1 ] &amp;&amp; { echo "`basename $0` - ERROR: Options -D and -f are mutually exclusive. Select only one." 1&gt;&amp;2 ; echo "Run `basename $0` -H for help." 1&gt;&amp;2 ; exit 4 }
[ -f $TEMPLATE ] || { echo "`basename $0` - ERROR: Template file $TEMPLATE does not exist." 1&gt;&amp;2 ; echo "Run `basename $0` -H for help." 1&gt;&amp;2 ; exit 5 }
[ $FILE_SELECTED -eq 1 -a ! -f $FILE ] &amp;&amp; { echo "`basename $0` - ERROR: Data file $FILE does not exist." 1&gt;&amp;2 ; echo "Run `basename $0` -H for help." 1&gt;&amp;2 ; exit 6 }
[ $DIR_SELECTED -eq 1 -a ! -d $DIR ] &amp;&amp; { echo "`basename $0` - ERROR: Directory $DIR does not exist." 1&gt;&amp;2 ; echo "Run `basename $0` -H for help." 1&gt;&amp;2 ; exit 7 }

# Here begins the real stuff

# Some nice output for verbose mode
[ $VERBOSE -eq 1 ] &amp;&amp; echo "`basename $0` - Verbose output
-------------------------------------------------------------
Invoked with following defaults:
- Allowed user(s): $USER
- Allowed group(s): $GROUP
- Allowed network(s): $ALLOW
- Denied network(s): $DENY
- Output file: $HTACCESS
- Template file: $TEMPLATE
-------------------------------------------------------------"

# Creating scratch file
[ $FILE_SELECTED -eq 1 ] &amp;&amp; cat $FILE | sed -e "s/#.*$//" -e "s/ /;/g" &gt; $TMPFILE
[ $DIR_SELECTED -eq 1 ] &amp;&amp; echo "$DIR;USER=$USER;GROUP=$GROUP;ALLOW=$ALLOW;DENY=$DENY" &gt; $TMPFILE

# Now loop over directories
for line in `cat $TMPFILE`
do
	# Cleanup previous command file, if any
	[ -f $CMDFILE ] &amp;&amp; rm $CMDFILE
	# Unset local variables
	unset _DIR _USER _GROUP _ALLOW _DENY
	# Parse and evaluate line
	line=`echo $line | sed -e "s/^/_DIR=/" -e "s/USER=/_USER=/g" -e "s/GROUP=/_GROUP=/g" -e "s/ALLOW=/_ALLOW=/g" -e "s/DENY=/_DENY=/g"`
	eval $line
	# Another sanity check
	[ $_DIR ] || { echo "`basename $0` - ERROR: Incorrect record format in file $FILE." 1&gt;&amp;2 ; echo "Run `basename $0` -H for help." 1&gt;&amp;2 ; exit 5 }
	# Output in verbose mode
	[ $VERBOSE -eq 1 ] &amp;&amp; echo "Directory: $_DIR"
	# Set allowed networks
	_ALLOW=${_ALLOW:-$ALLOW}
	# Write relevant lines in command file
	if [ $_ALLOW ] 
	then
		[ $VERBOSE -eq 1 ] &amp;&amp; echo "Allowed networks: $_ALLOW"
		echo "1
		/^# allow from NETWORK/
		c" &gt;&gt; $CMDFILE
		for net in `echo $_ALLOW | tr -s "," " "`
		do
			echo "allow from $net" &gt;&gt; $CMDFILE
		done
		echo "." &gt;&gt; $CMDFILE
	fi
	# Set denied networks
	_DENY=${_DENY:-$DENY}
	# Write relevant lines in command file
	if [ $_DENY ] 
	then
		[ $VERBOSE -eq 1 ] &amp;&amp; echo "Denied networks: $_DENY"
		echo "1
		/^# deny from NETWORK/
		c" &gt;&gt; $CMDFILE
		for net in `echo $_DENY | tr -s "," " "`
		do
			echo "deny from $net" &gt;&gt; $CMDFILE
		done
		echo "." &gt;&gt; $CMDFILE
	fi
	# Set allowed users
	_USER=${_USER:-$USER}
	# Write relevant lines in command file
	if [ $_USER ] 
	then
		[ $VERBOSE -eq 1 ] &amp;&amp; echo "Allowed users: $_USER"
		echo "1
		/^# require user USER/
		c" &gt;&gt; $CMDFILE
		echo "require user `echo $_USER | tr -s "," " "`" &gt;&gt; $CMDFILE
		echo "." &gt;&gt; $CMDFILE
	fi
	# Set allowed groups
	_GROUP=${_GROUP:-$GROUP}
	# Write relevant lines in command file
	if [ $_GROUP ] 
	then
		[ $VERBOSE -eq 1 ] &amp;&amp; echo "Allowed groups: $_GROUP"
		echo "1
		/^# require group GROUP/
		c" &gt;&gt; $CMDFILE
		echo "require group `echo $_GROUP | tr -s "," " "`" &gt;&gt; $CMDFILE
		echo "." &gt;&gt; $CMDFILE
	fi
	# Close command file
	echo "wq $_DIR/$HTACCESS" &gt;&gt; $CMDFILE
	[ $VERBOSE -eq 1 ] &amp;&amp; { 
		echo "Saving to file: $_DIR/$HTACCESS"
		echo "----------------------------------------------------------"
	}
	# Edit template upon command file and save it to final location
	ed -s $TEMPLATE &lt; $CMDFILE 2&gt;&amp;1 &gt; /dev/null
done

# Cleanup and exit
[ -f $TMPFILE ] &amp;&amp; rm $TMPFILE
[ -f $CMDFILE ] &amp;&amp; rm $CMDFILE
exit 0

#################### E N D  O F  M A I N  P R O G R A M ####################
</pre>
<p><br>&nbsp;<br>
<! -- End Content ------ >
</td>
</tr>
</table></center>
<! -- End MASTER TABLE -- >

</body></html>