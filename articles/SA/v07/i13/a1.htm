<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>Web Feature:  Access Control in Sensitive WWW Environments</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<table width=100% cellpadding=15 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>
<td>
<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a1_l4.htm">Listing 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a1_l6.htm">Listing 6</a></span></td>
		<td><span class=navbarLink><a href="a1_l7.htm">Listing 7</a></span></td>
		<td></td>

	</tr>
</table>

</td>
</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top>

<h1>Access Control in Sensitive WWW Environments</h1><p>
Luca Salvadori<p>
<p>Publishing on the Web is rapidly becoming the fastest and most efficient way for companies to distribute information and data to customers and commercial partners. Furthermore, the Internet is exploding within companies to form so-called Intranets, where information and services are offered to employees and management. Thus, while results are ever more encouraging, system administrators are under increasing pressure because much of the published data is highly sensitive and not all users are allowed to access it. Therefore, a thorough and comprehensive effort is needed to secure data and validate users without exposing data to unauthorized eyes.<p>
Several incarnations of <B>httpd</B> services, even the oldest ones, include features allowing such protection. However, since http protocol has been created for an open world, some tricks and tips are necessary for sys admins to avoid surprises. This article will expose some of those tricks and explore a set of tools I developed to help ease management and control tasks in a secured, controlled-access Web environment.<p>
<B>httpd Security Concepts</B><p><B>
</b>As any Web surfer has experienced, some sites are defined as "secure", because they allow cryptography over incoming and outgoing links. This is useful to prevent hackers from spoofing sensitive information, such as credit cards numbers and passwords. Many techniques have been developed over the years to keep Web content secure, but this paper will focus on whether or not to allow a specific user, computer, or network access to a particular set of data, encrypted or not.<p>
It is useful, therefore, to explain some basic concepts about <B>httpd</B> security. Information is stored in directory trees, and basic file and directory protections (as allowed by the filesystem in use) apply. In addition, since the delivery of file contents is performed by a TCP/IP-based process (<B>httpd</B>), the network is highly involved. Therefore, it's easy to conclude that both file protection and network access must be carefully managed to allow proper security configuration. Because file access is a matter of local username privileges, a survey must be performed to avoid unnecessary access. Since network access is a matter of IP addresses, domain names, and protocols, careful selection and planning of allowed systems and access modes are needed.<p>
Finally, <B>httpd</B> can only restrict access to directories, not to single files. Thus, care must be taken by Web publishers to properly structure and organize their security-sensitive contents in dedicated directories that can be protected as needed.<p>
<B>Local System Considerations</B><p><B>
</b>Whenever sensitive information must be offered on line, it is good practice to use a dedicated server for the purpose. This server should be secured such that it can only be accessed the way it is intended (i.e., no generic usernames, no ordinary users, only system- or content-maintainers preferably accessing the system through <B>ftp</B>, no NFS exports, no anonymous <B>ftp</B>, and strict password control with all available tools). Basically, secure Web servers must be accessed only through <B>httpd</B>.<p>
Since the system load generated by http service is usually low, an http server can be easily implemented on small systems, even an old, otherwise minimally useful 386 PC. Such a system can be reconfigured with Linux and NCSA <B>httpd</B> or Apache, to provide reasonable http service at a minimal cost, assuming sufficient disk space is available for hosting the Web contents.<p>
<B>Network Considerations</B><p><B>
</b>After the Web server has been internally secured and can be accessed only through <B>httpd</B>, some reasoning is necessary about network access. <B>httpd</B> allows network access controls in its basic configuration files. For example, one could restrict access to the whole server or part of it by declaring allowed or forbidden IP addresses or domain names.<p>
Therefore, it is necessary to identify IP addresses, single addresses, groups, or classes, from which access is to be allowed, while forbidding all others. This assumes that local DNS (Domain Name Server) systems work properly. Other security considerations, such as firewall protection, still apply but are beyond the scope of this article.<p>
<B>Content Considerations</B><p><B>
</b>As stated above, proper structure must be implemented in Web content to allow protections to be effective. This requires a strict coordination between authors (who are usually not skilled security managers) and sys admins, at least during the initial phase of deployment. Authors must be informed of basic security concepts related to their Web pages, and strong emphasis must be placed on a directory-level protection scheme. This may require a heavily branched directory tree, potentially leading to confusion; thus sys admins are encouraged to tutor authors and discuss document structure with them. Since security problems and related damage are usually considered a result of the sys admin's mismanagement, this is the best way to clarify that Web content access is primarily driven by authors themselves. <p>
<B>Configuration Files and Syntax</B><p><B>
</b>After discussions with your Web content authors, you are ready to set basic protections to the local system and http daemon. By carefully editing access configuration files (usually <B>~httpd/conf/access.conf</B>) it is possible to restrict access to the base directory, CGI script directories, and other relevant parts of the system. A directory protection fragment in <B>access.conf</B> has the following form:<p>
<pre>
&lt;Directory /mydir&gt;

&lt;Limit GET&gt;
AuthUserFile /etc/htusers
AuthGroupFile /etc/htgroup
order deny, allow
allow from 100.101.102
allow from 200.201.202
allow from mydomain.com
deny from all
require user user1 user2
require group group1 group2
&lt;/Limit&gt;
     
&lt;/Directory&gt;
</pre><p>
<p>The syntax is straightforward: <B>&lt;Directory&gt;</B> and <B>&lt;Directory&gt;</B> tags enclose information related to directory <B>/mydir</B> (rooted under the base <B>httpd</B> home directory, usually <B>~httpd/htdocs</B>, i.e., plain directory name is <B>~httpd/htdocs/mydir</B>). <B>&lt;Limit&gt;</B> and <B>&lt;Limit&gt;</B> tags refer to access limitation of http <B>GET</B> directive.<p>
In the above example, we defined that access is denied by default to everyone, then selectively allowed in accordance with the defined rules. The example rules state that access is allowed to networks 100.101.102, 200.201.202, and to domain <B>mydomain.com</B> (provided a working DNS is found whenever a request is received from that domain). Other addresses and domains are rejected. Finally, user authentication is defined: users <B>user1</B> and <B>user2</B> are allowed in, as well as those included in <B>group1</B> and <B>group2</B>. Both usernames and groups are defined in files listed by <B>AuthUserFile</B> and <B>AuthGroupFile</B> directives. Conditions are additive; therefore, all conditions must be met for the requested document to be sent through the channel. Otherwise an error page is displayed on the requesting user's browser.<p>
The same syntax applies to other files residing in Web content directories, which regulate access to those directories and lower branches. These files can be managed by authors or by sys admins; however, I strongly suggest the latter. Local security files, scanned by <B>httpd</B> whenever directory access is required, are named as declared in the <B>AccessFileName</B> directive in the  <B>~httpd/conf/srm.conf</B> file. Thus, while protection schemes are inherited by directories below the protected one, more restrictive conditions can be applied to subdirectories and their branches. Remember, restrictions are additive. To gain access to a directory, the user must be able to access higher directories.<p>
<B>User Authentication</B><p><B>
httpd</b> implements a rudimentary, albeit effective, way to identify users through the usual username-password mechanism. Relevant data is stored in files declared by <B>AuthUserFile</B> and <B>AuthGroupFile</B> directives in <B>~httpd/conf/httpd.conf</B> or local security files. <B>AuthUserFile</B> and <B>AuthGroupFile</B> files can be different for each directory or tree, and can be directly managed by authors. I suggest nevertheless that sys admins retain control of this task.<p>
The user file format is quite simple: a record includes a username and an encrypted password, separated by semicolon. The group file record contains a groupname and a list of associated usernames, separated by blanks. Whenever a record length reaches about 200 characters, the groupname should be repeated on a new line to include additional users. Otherwise, usernames beyond the 200-character limit will be disregarded.<p>
Passwords can be created through <B>httpd</B> utilities included in distribution files (<B>htpasswd</B> for instance) or home-developed tools. If your <B>httpd</B> host will have many users, you will likely want to write maintenance tools in Web-friendly languages, such as Perl, to assist in the administrative task of creating usernames, encrypting passwords, and inserting the records in to the appropriate files. Authors of special content sections must inform you of user lists and privileges associated with the content of their Web pages.<p>
<B>Tools and Tricks</B><p><B>
</b>My company wanted to implement a management reporting system on the intranet to allow all levels of management staff to access budget, project, and corporate data. The primary goal of the project was to save the labor associated with previous paper-based systems. The project was obviously security sensitive. We developed a set of tools to enable proper Web security management. These tools cover the following administrative areas:<p>

<ul>
<li>Password generation and dissemination<p>
<li>Password policy enforcement<p>
<li>Directory protection<p>
<li>Security audit<p>
<li>Access logging<p>
<li>Web content distribution<p>
</ul><p>

Since the tools were to be portable to various systems, we decided to use Perl, bash, and other standard UNIX facilities. All scripts allow proper parameterization and options.<p>
<B>Password Generation and Dissemination</B><p><B>
</b>The first task we faced was defining usernames and assigning passwords. Since the first intranet implementation involved about 50 users and we expected the pool of users to increase to about 150, we wanted an automated tool for the task. A fairly simple Perl script generated a random set of passwords of the desired length, while retaining some readability by using vowel-consonant pairs. Such passwords were related to usernames defined in the basic <B>AuthUserFile</B>, encrypted with a random salt, and substituted in the user record. They were also sent by mail to the users. Since users are local to the network, unencrypted password mailing was considered only a minor risk, and therefore a more complicated effort was avoided. Password generation and (optional) <B>AuthUserFile</B> update are done by <B>chtpwd</B>, while password dissemination is done by <B>sendhtpwd</B>. All listings for this article are available from <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.<p>
<B>Password Policy Enforcement</B><p><B>
</b>Since password aging is not implemented in the NCSA https I use, it was only a matter of putting <B>mkhtpasswd</B> and <B>sendhtpwd</B> into crontab to be run every month to force a password change. Further improvement may lead to stricter policies, which at the moment have not been considered essential.<p>
<B>Directory Protection</B><p><B>
</b>This was the most difficult task. Creating a <B>.htaccess</B> file for every directory is simple, but as soon as directories number in the hundreds, it becomes a nightmare. Therefore, I decided to store access information in a plain text file, where a line stores full directory name and usernames, groups allowed, and denied networks in the following format:<p>
<pre>
/my/dir/name USER=user1,user2 GROUP=group1,group2
ALLOW=100.101.102,my.domain.com
DENY=300.301.302,yet.another.domain.com
</pre><p>
<p>A script (<B>mkhtaccess</B>) parses this kind of file and, with various options, creates <B>.htaccess</B> files in all directories listed based on a command-line supplied template. Single directory protection is possible through command-line options. Another script, called <B>gethtaccess</B>, does the reverse (i.e., for every directory in a tree, it gets the proper protection information stored in <B>.htaccess</B> file (if any) and stores it in a file for editing and later use by <B>mkhtaccess)</B>.<p>
<B>Security Audit</B><p><B>
</b>Checking that applied protections are what users expect is a key issue. Therefore a tool was developed to check this. The <B>chkhtaccess</B> script scans a directory tree for <B>.htaccess</B> files and warns about directories without protection, (i.e., where no <B>.htaccess</B> file is found). This script should be run at least daily to warn security managers about possible breaches or errors. A useful and easy improvement to <B>chkhtaccess</B> is to copy a default <B>.htaccess</B> file to unprotected directories to avoid unauthorized access until administrators take proper action.<p>
<B>Access Logging</B><p><B>
</b>Any Web access is logged by <B>httpd</B> in a logfile (usually <B>~httpd/logs/access_log</B>). This is a plain text file; therefore, parsing may be performed to get information. A simple one-line script (<B>cat | grep | mail</B>, etc.) may be used to get unauthorized access information, password mismatch, and other security-related issues. Such a one-liner may be run periodically to warn about intrusions.<p>
<B>Web Content Distribution</B><p><B>
</b>Since direct access to Web server is inherently dangerous, I restricted authors to <B>ftp</B>-only logins. This is not an unreasonable limitation, since most of them work on Windows-based PCs and use common Web-authoring tools to create their pages. Thus, full exposure to UNIX would be confusing for them.<p>
I instructed users to create zip files of their work and transfer them to the server by <B>ftp</B> in a directory to which they have exclusive access. A script, (<B>userunzip</B>), invoked every 15 minutes by cron, expands the zip files, moves them to the final location, and triggers other ancillary tasks (file protection checks, symbolic links creation, etc.). Every author has his or her own home directory and <B>public_html</B> subtree. Authors are therefore able to develop and check their work "at home" and move it to the production server autonomously without any sys admin assistance. Sys admins sleep well since tools are in place to check for author mistakes and warn of any required action.<p>
<B>Code Description</B><p><B>
</b>As explained before, maximum care has been exercised to ensure portability. Therefore, scripts are implemented in sh (bash on Linux, our reference platform for Web applications) or Perl, and no special tools are needed beyond the standard operating system and Perl.<p>
Most scripts share a common core to parse line input and parameters and to properly initialize processing as required by selected options. Then specific tasks are performed. The rest of code is self-explanatory. Just be careful about passwords: scripts working on them store or get information from plain script files, where passwords are stored in clear text and in encrypted form. Thus, it is necessary to keep these files in restricted directories.<p>
<B>Conclusions</B><p><B>
</b>Managing access rights to a complex, highly branched Web tree is simple in concept but difficult in practice. Rudimentary access control is implemented in http servers, therefore some work is needed to keep the situation under control. This toolset allows easy management of directory protection, as well as usernames and passwords, allowing me to sleep well.  <p>
<B>Listings</B><p><B>
</b>The following is list of all scripts and their basic function. For further details just read them or run them with <B>-H</B> option. (All listings are available from <B>www.samag.com</B> or <B>ftp.mfi.com</B> in <B>/pub/sysadmin</B>.)<p>
<ul>
<li><B>chkhtaccess</B> (Listing 1) - Bash script. Checks directory trees for <B>.htaccess</B> files.<p>
<li><B>mkhtaccess</B> (Listing 2) - Creates <B>.htaccess</B> files for a directory or tree as supplied by input file or keyboard.<p>
<li><B>gethtaccess</B> (Listing 3) - Scans a directory tree for <B>.htaccess</B> files and stores access information in a text file (to be used by <B>mkhtaccess</B>).<p>
<li><B>newhtuser</B> (Listing 4) - Creates a new username assigning it a random password. Data are stored in a plain file to be used by <B>sendhtpwd</B>.<p>
<li><B>sendhtpwd</B> (Listing 5) - Gets data from newhtuser-produced file and sends mail messages to relevant users.<p>
<li><B>chtpwd</B> (Listing 6) - Creates <B>httpd</B> password for relevant usernames, optionally updating actual <B>htpasswd</B> file.<p>
<li><B>userunzip</B> (Listing 7) - Expands and moves to final destination authors files, optionally invoking post-processing utilities.<p>
</ul><p>

<h1>About the Author</h1><p>
Luca Salvadori is head of the Information Systems Dept. at LABEN S.p.A., a leading European Space Electronics supplier. His experience spans from PDP-11 to Linux, Windows, PCs, and networking. He manages the Company's Web site (http://www.laben.it/) and (in his free time with a bunch of friends) another Linux box (http://aeroweb.lucia.it/) dedicated to aviation. As a hobby, he flies sport aerobatics. Luca can be reached at:lsalvadori@batman.laben.it.
<br>&nbsp;<br>
<! -- End Content ------ >
</td>
</tr>
</table>
<! -- End MASTER TABLE -- >

</body></html>