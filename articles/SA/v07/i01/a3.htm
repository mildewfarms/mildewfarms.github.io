<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v07, i01: SOCKSLIB.PL - A Library for Using SOCKS Firewalls</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</span></td>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/1998/jan98.tar"><b class=codeListing>jan98.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>



<H1>SOCKSLIB.PL - A Library for Using SOCKS Firewalls<p>
</H1><p>Matt Ganis
<p>
If you're a system administrator you've probably been asked to "help support just a few more machines." That's usually not too bad; most of your scripts and tools can easily be expanded to support "a few more," but often people don't realize that servers on the Internet (outside your corporate firewall) are different to manage from those on the inside.  Firewalls are put in place to make it difficult to break into your network, but at the same time they sometimes make it difficult for you on the inside to get out. SOCKSLIB.PL is a Perl library of functions that allow the creator of Perl programs to issue just one call, <B>rconnect()</B>, to make a connection to a networked machine, whether from inside or outside the firewall.<p>
SOCKS has been around since about 1994. It was originally conceived by David Koblas while at MIPS Computer Systems and has gained a wide acceptance within the Internet community.  SOCKSLIB currently supports version 4 of the SOCKS protocol. Although there is currently an effort to standardize the protocol (version 5) within the IETF RFC process, most SOCKS firewalls are running version 4.<p>
<B>Making a Network Connection</b><p>Anyone who has written a networked application in Perl (or C, for that matter) knows there are several steps involved in setting up the network connection (in this case a TCP session from one machine to another). Specifically they are:<p>
<ol>
<li> Convert the hostname to an IP address.
<li> Obtain the system protocol number (ie, tcp, udp, etc.).
<li> Create a socket of the desired type. (In SOCKSLIB's case, I always create a TCP-based socket within the <B>AF_INET</B> domain or within the Internet/tcp/ip domain.)
<li> Build a data structure that contains the address family, port, and address of the machine with which you wish to talk.
<li> Issue the connect (over the newly created socket) using the data structure to indicate which machine to talk to and how to talk.
</ol>This may sound confusing (and it can be if you're not sure what you're doing). Since most applications use the reliable tcp protocol (as opposed to the unreliable udp protocol), I've written the SOCKSLIB library under the assumption that all connections are tcp-based.<p>
Making a tcp connection through a SOCKS firewall is slightly more complicated. First, before making the connection to the foreign host, the client connects via tcp to the SOCKS firewall. Using the protocol defined in the SOCKS 4 specification, the client gives the firewall the ip address and port number of the remote host with which it wishes to communicate. The SOCKS firewall makes the connection (on behalf of the client) and then acts as relay between the two (receiving data from the client and passing it onto the foreign host and vice versa). Also, as part of the protocol, a user name is passed along in the session setup (for tracking purposes on the server). For this library, I've hardcoded the user name to be Perl. It can be changed in the <B>rconnect()</B> call at the statement <B>$bytes3 = pack("C5",80,101,114,108,00)</B>. If you do the decimal-to-ascii conversion, you'll find that's P-e-r-l with a 0 terminator.<p>
I wanted to avoid having to know ahead of time whether or not a given host was outside of the firewall (requiring the use of SOCKS) or inside the firewall, so I combined all of the network calls (and the determination of the status of a given host) within the call to <B>rconnect()</B>. Since you don't need to know if your connection is going through a firewall or not, you just issue the <B>rconnect()</B> to a given host, and the socket file handler, <B>SOCKS_SOCKET</B>, is set up to talk to the remote host. Whether it goes through a firewall is immaterial to the programmer.<p>
<B>An Example</b><p>Listing 1, <B>webcheck.pl</B>, is a small program used to check some of the Web servers that I use (and support) to ensure they are working correctly. Basically I needed a program that connected to a Web server and returned a predetermined page of text. If the amount of text returned matches the expected result, then I assume the Web server is working fine. Note that you could connect to port 80 (the default Web port) and issue a <B>get</B> command. But if you don't know how much data should be returned, you don't know if you're getting back a 404 (and its associated error text) or a real page.<p>
<B>Setup</b><p>Within the <B>webcheck.pl</B> program, the servers to check are added to the array <B>webservers[]</B>. There is no distinction between being inside or outside the firewall on the Internet.  This makes managing servers relatively transparent to the system administrator or support staff or other users that you supply with this library.<p>
Also, besides the use of the <B>rconnect()</B> call, you should include a call to the <B>SOCKSinit()</B> routine to set up the global variables needed for the routines. However, it's not mandatory to issue the call. A check is made in the <B>rconnect()</B> routine, and if the global variable <B>SOCKS_GW</B> isn't set, the <B>SOCKSinit()</B> routine gets called anyway.<p>
The SOCKSLIB library is intended to be installed into a public library. (I install public libraries in <B>/usr/local/lib</B>.) Once you install the library you'll need to make some modifications to the library to fit your site. All modifications need to be made in the <B>SOCKSinit()</B> routine where all of the global variables are defined.<p>
The first of these is the SOCKS gateway that you want your customers to use. Simply set the global variable <B>$SOCKS_GW</B> to either the name or the IP address of your firewall. The <B>getIPaddress() </B>routine is smart enough to know the difference between an address and a fully qualified name.<p>
The second set of "variables" is an array of networks, <B>SOCKS_DIRECTS</B>, that are local subnets within your site. In the <B>rconnect()</B> routine, a call is made to the routine <B>CheckDirect()</B>. This routine compares the IP address of the destination to which you want to connect to the "addresses" in the <B>SOCKS_DIRECTS</B> array. If a match is found, the tcp connection is made directly to the destination, bypassing the firewall. The determination of a direct host is made by comparing the IP addresses from the most significant byte to the least, where zeros indicate to match all. So, comparing a destination of <B>15.23.192.15</B> with an entry of <B>15.0.0.0</B>, <B>15.23.0.0</B>, or just <B>15</B> would cause a direct connection to be made.<p>
<B>Summary</b><p>The routines in the SOCKSLIB.PL package, though simple, can be quite useful (even if you're not using the routines to connect through a firewall). In summary, the relevant routines are:<p>
<B>rconnect( address, port)</B> - where <B>address</B> is either a hostname  or IP address and <B>port</B> is a valid port number to connect. Returns with the global variable <B>SOCKS_SOCKET</B> set for communication. Returns:
<pre>
-1:	could not create a socket to the firewall
-2:	could not connect to the firewall
-10:	could not create a socket to direct host
-20:	could not connect to a direct host
90:	Successful socks transfer
91:	socks server could not connect to a host</pre><p>
<p>getIPaddress( address )</B> - returns an array of four elements representing four octets of an IP address.
Note that <B>address</B> can be either a  hostname or a valid TCP/IP address.<p>
CheckDirect( address ) </B>- checks if a given address is an internal or external address.<p>
Returns: <pre>
0:	Network is defined as internal
1:	Network is defined as external</pre><p>
<p>

<h1>About the Author</h1><p>










Matt Ganis currently works for IBM in Harrison, New York. In his spare time, he can be found teaching astronomy at Pace University in Pleasantville, New York. He can be contacted via email at <B>ganis@vnet.ibm.com</B>.





















<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
