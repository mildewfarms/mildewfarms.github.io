<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i02: Building a Web-based Java Application Server with Apache JServ</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a7_f3.htm">Figure 3</a></span></td>
		<td><a href="../../../../source/SA/2000/feb2000.tar"><b class=codeListing>feb2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Building a Web-based Java Application Server with Apache JServ</H1><p>
<P>Don Gourley and Wei Wu
<P>
From the early days of the World Wide Web, systems developers have looked for ways to generate dynamic Web pages, especially for content based on information in databases. Application servers are now available that integrate directly with Web servers to extend Web server processing, without the overhead or complexity associated with previous mechanisms for dynamic content (such as CGI or scripts embedded in Web pages)(Figure 1).<P>
The latest generation of these Web application servers combines the benefits of a robust, scalable application server, with the power and flexibility of the Java programming language. Custom Java objects, third-party class libraries, database connectivity (JDBC) drivers, and Java's bytecode-based Virtual Machine (JVM) allow developers to quickly build and deploy Web applications integrating information from a variety of databases and Web servers.<P>
The Java application server market is very crowded now, with large companies like IBM (WebSphere) competing with smaller companies trying to carve out a niche for their products. However, one of the most popular Java application servers is Apache JServ, a freely available open-source product from the Java Apache Project. In this article, we describe how to install and configure JServ to provide systems developers in your organization with a full-featured, reliable, and scalable platform for developing Web-based, server-side applications.<P>
<B>JServ Features</b><p>Apache JServ provides most of the features you expect in a Java application server, including full support for the JavaSoft Servlet API (version 2.0). It also provides a number of tools for performance tuning (e.g., load balancing among multiple servers) and systems administration. The Java platform provides complete portability of the JServ engine and application servlets across a variety of UNIX and Windows platforms.<P>
JServ is a standalone process that communicates with Apache Web servers through the Apache <B>mod_jserv</B> module. When a request for a Java servlet is received by the Web server, <B>mod_jserv</B> passes it to JServ where the request is processed and results sent back to the Web server. <B>mod_jserv</B> and JServ use the Apache JServ Protocol (AJP) to communicate. AJP is a network protocol providing support for very complex network environments (e.g., multiple Web servers connecting to many JServs on different servers).<P>
Currently JServ only supports this integration with Apache Web servers (versions 1.2.x and 1.3.x). Since Apache Web servers can run on virtually all UNIX and Windows NT computers, this does not limit JServ deployment very much (although it does make it a more obvious application server choice for organizations already using Apache). In our organization, we have Apache Web servers running on Sun, IBM, and Intel-based servers. We have successfully deployed JServ on UNIX (Solaris 2.6) and Linux (RedHat 6.0) operating systems, and the following installation and configuration instructions are based on those experiences.<P>
<B>Installing JServ</b><p>JServ is completely written in Java (although <B>mod_jserv</B> is written in C using the Apache API), so it requires the JVM to run itself as well as application servlets. JServ requires a version 1.1-compliant JVM. The JVM comes in 1.1.x versions of the Java Development Kit (JDK), which also includes the core Java classes and some documentation. Sun provides free 1.1 JDKs for Solaris and Windows at:<P>
<PRE>
http://java.sun.com/products/jdk/1.1/
</PRE><P>
Although Solaris comes with JDK pre-installed, we recommend updating to get the latest bug fixes and performance improvements. 1.1 JDKs for other operating systems, including Linux, are available from IBM:<P>
<PRE>
http://www.ibm.com/java/jdk/
</PRE><P>
and <B>Blackdown.org</B>:<P>
<PRE>
http://www.blackdown.org/
</PRE><P>
The official list of compatible Java ports is at:<P>
<PRE>
http://java.sun.com/cgi-bin/java-ports.cgi
</PRE><P>
JDK installation instructions vary depending on the package. IBM's Linux port can be installed by simply unpacking a <B>tar</B> file. A common location for JDK is <B>/usr/java</B>, so we renamed the resulting <B>jdk118</B> directory to <B>/usr/java</B>. On Solaris, you must use Sun's package management commands (e.g., <B>pkgrm</B>, <B>pkgadd</B>) to install software packages for the Java runtime environment, development environment, JIT compiler, man pages, and demo programs. They require that you remove the existing packages before upgrading with newer ones. Specific instructions for running the install commands are in the README file included in the <B>tar</B> file available from the Sun Web site. You must be root to run these commands.<P>
The next step is to install the Java Servlet Development Kit (JSDK). This is available from Sun for any platform with a compliant JDK. Separate packages are available for Windows and UNIX (the UNIX version is labeled Solaris, but works on any UNIX or UNIX-like operating system, including Linux). The UNIX package is a <B>tar</B> file that can be unpacked wherever you put local packages. It includes a Java archive (<B>.jar</B> file), which you will reference from your JServ configuration. Note that 2.0 and 2.1 versions of JSDK are available. Current versions of Apache JServ (1.0 and 1.1 beta as of this writing) will only work with JSDK 2.0.<P>
With JDK and JSDK in place, you are ready to install JServ. The installation package is available from the Java Apache Project (<B>http://java.apache.org/</B>). We assume you have installed and tested the Apache Web server. Based on your Apache installation, you must choose whether to compile <B>mod_jserv</B> into the Apache <B>httpd</B> program, or use the Dynamic Shared Object (DSO) support to load <B>mod_jserv</B> when the <B>httpd </B>program is started.<P>
We recommend using DSO on your server. This eases building and upgrading JServ. If you are compiling <B>mod_jserv </B>into the Web server, you will have to run <B>make install</B> in the Apache source directory after making JServ. If the module is loaded dynamically, then the module shared object file (e.g., <B>mod_jserv.so</B>) can be easily moved, copied, or updated in the modules directory without affecting your Web server executable.<P>
The JServ installation will build the necessary objects and (optionally) reconfigure your Web server. This is handled by specifying a number of options (detailed in the INSTALL file included with the JServ distribution), such as the location of your Apache and Java files. For example, here is the <B>configure</B> command we used on our Solaris development server:<P>
<PRE>
configure \
    --with-apache-install=/usr/local/src/apache_1.3.4 \
    --prefix=/usr/local/jserv \
    --enable-apache-conf \
    --with-jdk-home=/usr/java \
    --with-jsdk=/sunsoft/jsdk
</PRE><P>
Like other Apache products, the <B>configure</B> script will check the local development environment and build an appropriate Makefile. You will need an ANSI-C compiler (such as GCC) to compile <B>mod_jserv</B>. Running <B>make install</B> compiled <B>mod_jserv</B>, and copied it into the Apache modules directory, created the JServ <B>.jar </B>file, and installed it into the directory specified by the configure <B>prefix</B> option.<P>
We could then copy the <B>mod_jserv.so</B> that was built to other Solaris servers, even if they had the Apache Web server installed in a different location or were running a different version of the Web server. We also installed the JServ servlet engine on other Solaris servers by copying the <B>/usr/local/jserv</B> directory.<P>
On RedHat Linux, things can be simplified by downloading the RedHat Package Manager (<B>.rpm</B>) version of JServ. This can be installed using the <B>rpm -i</B> command. By default, this will install JServ into your existing Apache Web ServerRoot. If you want to use JServ with another instance of the Web server, you must move the JServ directories and restore the old Web server configuration.<P>
<B>Configuring JServ</b><p>The configure script <B>enable-apache-conf</B> option caused the <B>make</B> command to update the Apache <B>httpd</B> configuration files with the necessary directives to load the <B>mod_jserv</B> module. If you don't use that option, or are copying the JServ installation to another server, you must make these changes to the local Apache configuration. To enable <B>mod_jserv</B>, include <B>LoadModule</B> and <B>AddModule</B> directives that point to the modules directory where the <B>mod_jserv </B>shared object lives.<P>
The JServ distribution contains an example directory with sample versions of all the configuration files. These samples include a description of each directive or parameter and many examples. This is the best documentation available for configuring JServ. The example <B>jserv.conf</B> file includes Apache JServ directives to include in <B>httpd.conf</B>. It is best to keep these directives in a separate file referenced by <B>httpd.conf</B> using the Apache <B>Include</B> directive. A few of the Apache JServ directives are described here:<P>
<P>
<B>ApJServManual</B> -- This directive determines whether JServ is started automatically by the Apache Web server.<P>
<B>ApJServProperties</B> -- The file containing configuration properties for the JServ engine, used to start JServ in automatic mode.<P>
<B>ApJServMount</B> -- The &#147;mount point&#148; and name of a servlet zone.<P>
<P>
For example, here are sample directives for a JServ, which is started automatically and processes servlet requests for production and test zones:<P>
<PRE>
  &lt;IfModule mod_jserv.c&gt;
    ApJServManual off
    ApJServProperties /usr/local/jserv/conf/jserv.properties
    ApJServMount /Z-TEST /TestZone
    ApJServMount /Z-PROD /ProdZone
  &lt;/IfModule&gt;
</PRE><P>
The <B>ApJServMount</B> directives map URLs to servlets. In our example, the URL &#147;http://localhost/Z-PROD/ExampleServlet&#148; will execute the servlet class named <B>ExampleServlet</B> in the <B>ProdZone</B> zone. The actual locations of the files or directories containing the classes in that zone are defined by the <B>repositories</B> parameter in the <B>ProdZone</B> properties file. For example, if the <B>ProdZone.properties </B>file contains:<P>
<PRE>
repositories=/usr/local/jserv/servlets/Z-PROD
</PRE><P>
the URL would run:<P>
<PRE>
/usr/local/jserv/servlets/Z-PROD/ExampleServlet.class
</PRE><P>
Specifying separate zones for test and production (and for separate applications) allows you to isolate servlets from each other. For example, if your servlets use the <B>javax.servlet.http.HttpSession </B>interface, user sessions will be unique for each zone. Also, recompiling a class in one zone will not reinitialize other zones. Each servlet zone runs its own class loader, keeping them from accessing data in other servlet zones. However, note that all zones are run in the same JVM with the same user and group IDs and permissions, without any kind of &#147;security sandbox&#148; like applets have. This means all the servlets have equal access to resources outside of JServ and the JVM. If this is unacceptable in your environment, you can run separate JServs for different zones.<P>
The <B>ApJServProperties</B> file contains properties that define the classpath and environment for the JVM and the properties files for the servlet zones. If the Web server is using the Apache JServ directives in the example above, then the <B>jserv.properties</B> file might look like this:<P>
<PRE>
# wrapper parameters
wrapper.bin=/usr/java/bin/java
wrapper.classpath=/usr/java/lib/classes.zip
wrapper.classpath=/usr/local/jserv/lib/ApacheJServ.jar
wrapper.classpath=/sunsoft/jsdk/lib/jsdk.jar
wrapper.classpath=/sunsoft/jdbc/lib/classes111.zip
wrapper.classpath=/sunsoft/jdbc/mysql.jar
wrapper.env=ORACLE_HOME=/oracle
wrapper.env=ORACLE_SID=ENTDB
wrapper.env=LD_LIBRARY_PATH=/sunsoft/jdbc/lib

# servlet zones
zones=TestZone,ProdZone
TestZone.properties=/usr/local/jserv/conf/TestZone.properties
ProdZone.properties=/usr/local/jserv/conf/ProdZone.properties
</PRE><P>
The <B>wrapper</B> parameters must point to the JVM (<B>wrapper.bin</B>) and each class (<B>wrapper.classpath</B>) used by JServ, including JSDK and the JServ engine. Note the JDBC and Oracle <B>wrapper.classpath</B> and <B>wrapper.env</B> paramaters. This example is using JDBC drivers to connect servlets to an enterprise Oracle database and a local MySQL database (Figure 2). JDBC is a very powerful tool for developing applications integrating data from disparate sources. A list of JDBC drivers for a wide variety of databases is available at:<P>
<PRE>
http://java.sun.com/products/jdbc/drivers.html
</PRE><P>
Many are native-protocol fully Java technology-enabled drivers, meaning that they do not require any middleware or client libraries on the JServ machine to connect to the database server. These drivers are installed the same way the JSDK was installed: simply copy a Java archive file into a known location which is referenced in the <B>wrapper.classpath</B> parameters.<P>
The servlet zone properties files define the configuration for each zone. This includes, at a minimum, a <B>repositories</B> parameter like the <B>ProdZone.properties</B> example we looked at when discussing the <B>ApJServMount</B> directive. The <B>repositories</B> parameter can include a list of directories and Java archive files that contain the zone's servlet classes. Other parameters control the zone's class loader, session management, and servlet configuration. For example, the timeout value for an unused user session can be changed from the default of 30 minutes or timeouts can be disabled altogether. These properties are documented in the <B>example/example.properties</B> file.<P>
<B>Running JServ</b><p>The <B>wrapper</B> parameters in the JServ properties file allow the Apache Web server to start a JServ automatically. This is often the most convenient way to start JServ, particularly in a production environment where you always want the JServ running. However, when first configuring JServ, it is easier to start and stop JServ manually to test configuration without bouncing your Web server. Also, some advanced features, such as load balancing, require one or more standalone JServ processes that are started manually.<P>
To manually start JServ, turn off the Web server's automatic startup (i.e., set &#147;ApJServManual on&#148; in the <B>jserv.conf</B> file) and write a little script that defines the CLASSPATH (much like the JServ <B>wrapper</B> properties) and starts up the JVM. Here is a sample startup script, which starts JServ with the same environment as the <B>wrapper</B> parameters above:<P>
<PRE>
#!/bin/sh
# Launch jserv in manual mode.
 
LD_LIBRARY_PATH="/sunsoft/jdbc/lib"
export LD_LIBRARY_PATH

ORACLE_HOME=/prod/orahome
ORACLE_SID=ENTDB
export ORACLE_HOME ORACLE_SID

jdk=/usr/java/lib/classes.zip
jsdk=/sunsoft/jsdk/lib/jsdk.jar
jserv=/usr/local/jserv/lib/ApacheJServ.jar
oradb=/sunsoft/jdbc/lib/classes111.zip
mysql=/sunsoft/jdbc/mysql.jar
props=/usr/local/jserv/conf/jserv.properties
classes=$CLASSPATH:$jdk:$jsdk:$jserv:$oradb:$mysql
/usr/java/bin/java -classpath $classes \
	org.apache.jserv.JServ $props &amp;
</PRE><P>
Use the UNIX <B>kill</B> command to stop the JServ Java process.<P>
<B>Administering JServ</b><p>Once JServ is running, the systems administrator needs to test and monitor it. JServ includes a built-in servlet to display the current status of both <B>mod_jserv</B> and the servlet engine. To enable the status handler, you must allow JServ to run itself as a servlet by specifying the following in the JServ properties file:<P>
<PRE>
security.selfservlet=true
</PRE><P>
To access this servlet, include the <B>SetHandler</B> directive in your Web server configuration file to map a Location to the <B>jserv-status </B>servlet. For example, this configuration stanza allows you to use a URL like:<P>
<PRE>
http://www.your.org/status/jserv/
</PRE><P>
to view the status pages:<P>
<PRE>
  &lt;Location /status/jserv/&gt;
    SetHandler jserv-status
    order deny,allow
    deny from all
    allow from your.org
  &lt;/Location&gt;
</PRE><P>
It is important to restrict the <B>Location</B> to trusted sites, since the status pages may give users the ability to gather important system information. This configuration allows you to immediately test whether the basic JServ service is working. The status pages list the various pieces that have been installed and the parameters that have been set, so it can be used to verify your configuration.<P>
JServ also includes two logging facilities, one for <B>mod_jserv </B>and another for the servlet engine. Several changes in the configuration options were made in JServ 1.1, so review the example files for your version to get the details.<P>
The <B>mod_jserv</B> log file is defined in the Apache Web server configuration with the <B>ApJServLogFile</B> directive:<P>
<PRE>
ApJServLogFile /usr/local/apache/logs/mod_jserv.log
</PRE><P>
<B>mod_jserv</B> logs a moderate amount of information about startup and shutdown, problems connecting to the servlet engine, and servlet errors that are returned by the servlet engine. Alternatively, you can mark the log file as &#147;DISABLED&#148; and <B>mod_jserv</B> will redirect its messages to the Apache error log file. In version 1.1, you have additional control over the level of <B>mod_jserv</B> logging with the <B>ApJServLogLevel</B> directive.<P>
The logging and tracing options for the servlet engine are specified in the JServ <B>properties</B> file, and examples and documentation are found in the <B>example/jserv.properties</B> file. The servlet engine log file can be made quite verbose by using a variety of logging and tracing options. When first configuring JServ, it is useful to turn on all of these options, but on a production server, this can quickly result in a very large log with every action traced. Logging is also an expensive operation in terms of performance and should be disabled (or limited to exceptions) on any production server where performance is an issue.<P>
Logging is not the only feature that can be tuned for performance. Just as you must balance the need for status and load information with the cost of logging, tuning for performance often requires compromises in other areas. Here are some trade-offs to consider; a more detailed discussion can be found in a performance paper available from the Java Apache Project at:<P>
<PRE>
http://java.apache.org/jserv/papers/performance.pdf
</PRE><P>
Multithreading </b><p>By default, JServ will store only one instance of each servlet and use multiple threads to handle concurrent requests. While this improves performance (even on single-processor servers), care must be taken in servlet design to avoid multiple threads corrupting shared resources. If servlets cannot be designed this way, they must implement the SingleThreadModel interface to force JServ to store multiple instances to handle multiple requests, losing the performance benefit of multithreading. Also, if supported on your operating system, always use a JVM with native thread support rather than &#147;green threads&#148; (virtual threads on a single-threaded OS).<P>
<B>Authentication </b><p>JServ provides an authentication mechanism to verify that only trusted Web servers and servlets are connected. This mechanism requires a challenge and response procedure that takes an additional round-trip over the network between the two services. This delay can be eliminated by turning off the authentication mechanism and relying on connection IP filtering and other external network protections. (Note that network delay between Web servers and servlets can be eliminated altogether if they are placed on the same server.)<P>
<B>Class Loading and Caching </b><p>Servlets can be pre-loaded at JServ startup to avoid any latency that would occur on the first request to uninitialized servlets. This is configurable in the zone properties file. Also, if a servlet class is changed after it has been loaded, JServ will detect the change and reload it. For consistency, JServ must reinitialize the entire zone, including reloading all other classes in that zone. Auto-reloading can severly degrade performance while the zone is being reinitialized. Separating applications and test environments in different zones can minimize this effect.<P>
If, after performance tuning, your server is simply unable to handle the load, you can run multiple JServs and let <B>mod_jserv</B> balance the load across the servlet engines. The JServs can run on the same server or be distributed across multiple servers. Running multiple JServs on a single server can still help by distributing the threads across multiple JVMs. To run multiple instances of JServ on the same machine, the <B>bindaddress</B> and <B>port</B> parameters in the JServ properties file must be unique for each instance.<P>
The features of load balancing can also be used to add some fault tolerance to your JServ implementation, since <B>mod_jserv</B> will redirect requests to other servers if one JServ fails. Also, some of these features can be used to set up complex networked environments where certain zones are hosted on distributed hosts. These topics are explored in a how-to document available from the Java Apache Project:<P>
<PRE>
http://java.apache.org/jserv/howto.load-balancing.html
</PRE><P>
Load balancing is enabled in the Apache configuration for <B>mod_jserv</B>. Suppose you have two instances of JServ on two different hosts. The following directives will balance requests for the Z-PROD zone between the two servers:<P>
<PRE>
# use manual startup for load-balancing configurations
ApJServManual on

# Set the mount point and load balancing on a zone: PRODZone
ApJServMount /Z-PROD balance://set1/PRODZone 

# set each jserv weight, default 1
ApJServBalance set1  SUNSVR
ApJServBalance set1  LNXSVR

# specify jserv protocol and connection host and port
ApJServHost SUNSVR ajpv11://jserv1.your.org:8007
ApJServHost LNXSVR ajpv12://jserv2.your.org:8007 

# define a unique session cookie suffix for each jserv  
ApJServRoute JS1 SUNSVR
ApJServRoute JS2 LNXSVR
</PRE><P>
Balancing is done by randomly selecting a server from the set of hosts for each request. A weight can be added to have some hosts process more requests than others. For example, if we want LNXSVR to handle two thirds of the requests, we can add a weight of two to its balance:<P>
<PRE>
ApJServBalance set1  LNXSVR 2
</PRE><P>
Since the requests are routed in a random manner (rather than in a round robin fashion) the actual load may not be exactly balanced. However, the larger the number of requests, the more balanced the load will be.<P>
In the example above, the two hosts are actually running different versions of JServ. SUNSVR is running version 1.0, and LNXSVR is running 1.1b3. These two versions of JServ use different versions of the AJP. Therefore, we must specify the protocol for <B>mod_jserv</B> to use when talking to the two hosts. This is done in the <B>ApJServHost</B> directive, where we also specify hostname and port number as a URL. Note that <B>mod_jserv</B> must be able to use the latest version of AJP; you cannot force a 1.1 JServ to use the older protocol.<P>
Our example also demonstrates how to force a session to be bound to a particular JServ. Since user sessions contain state information used by servlets, the same JServ must process all requests for that session. Sessions are identified by session cookies set by servlets. The <B>ApJServRoute</B> directive tells <B>mod_jserv</B> to look for a JServ id at the end of the session cookie to determine which JServ owns the session. If there is no JServ id, <B>mod_jserv</B> will select the JServ based on its usual (random+weight) mechanism. It will pass the selected server's id to the JServ, which will append it to the cookie when it is passed back to the Web browser. Since the JServ id is in the cookie, it will be available for the next request even if it is processed by a different Web server (Figure 3).<P>
JServ includes both authentication and IP filtering to ensure that only trusted <B>mod_jservs</B> and servlet engines can connect. These features are particularly important when you have a distributed JServ implementation as in our example. IP filtering is done by the servlet engine when accepting a connection from a Web server. The <B>security.allowedAddresses</B> property must include all IP addresses for any Web server allowed to connect to it.<P>
Authentication is also enabled in the JServ properties file. The following properties turn on authentication and specify the location of a key that is used by the Web server and servlet engine to authenticate:<P>
<PRE>
security.authentication=true
security.secretKey=/usr/local/jserv/conf/jserv.secret.key
</PRE><P>
The secret key is simply an arbitrary text file. A key file on the Web server, with the exact same contents as the JServs' key files, must be specified in its configuration file:<P>
<PRE>
ApJServSecretKey /usr/local/apache/conf/jserv.secret.key
</PRE><P>
When a request is passed to the JServ, it will challenge the Web server for the key. The Web server then encrypts the key (using MD5) and passes it to the JServ. To ensure security of the key on the servers, the Web server host's <B>jserv.secret.key</B> file should only be readable by the Apache <B>httpd</B> process, and the servlet engine's file should only be readable by the JServ Java process.<P>
<B>Future Developments</b><p>As this article is being written, it appears that JServ will be rolled into the new Apache Jakarta Project:<P>
<PRE>
http://jakarta.apache.org/
</PRE><P>
JServ was developed as an independent implementation of the Javasoft servlet specification. The Jakarta Project is merging the work that Sun did on the original reference implementation of the spec with the work being done on JServ. The result will be the official reference implementation for JSDK 2.1 (and subsequent versions) and, although the project is supported by the Apache Software Foundation under its open source rules, the servlet engine will not be limited to Apache Web servers.<P>
However, The Apache JServ Future Roadmap:<P>
<PRE>
http://java.apache.org/jserv/future/
</PRE><P>
indicates that development of JServ will continue, at least for one more major release. Important improvements that should be included in that release include socket and thread recycling, AJP version 2.1, and support for JSDK 2.1. There may also be improved status pages with current load and dynamic status information.<P>
<p>
<h1>About the Author</h1><p>
Don Gourley and Wei Wu work at the Washington Research Library Consortium where they develop and administer Web-based information systems for academic libraries. Don can be reached at: gourley@wrlc.org. Wei can be reached at: weiwu@wrlc.org.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
