<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i02: A linux Email Server</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a6_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2000/feb2000.tar"><b class=codeListing>feb2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>A Linux Email Server</H1><p>
<P>Marcel Gagn&eacute;
<P>
Electronic mail is a strange beast. In the past few years, I've set up a number of electronic mail and Internet gateways. Some of my customers are smaller companies with a few employees and no desire to pay huge amounts of money for a 24x7 ISDN or DSL connection. They want to try out the Internet and email, and see how it fits into their corporate model without investing in a lot of hardware and software.<P>
For companies such as these, Linux is made to order. Out of the box, your favorite Linux distribution comes with everything necessary to set up a complete Internet/intranet solution -- from email to Web servers and even firewalls. Best of all, in the spirit of Linux and open source, all the software is free!<P>
<B>Defining the Network</b><p>Imagine a local network consisting of the hot new Linux system and six PCs. The Linux server is at address 192.168.1.100, and the PCs are at addresses 192.168.1.31 through 192.168.1.36. The private internal network addressing scheme as defined in RFC1918 is used. I'll call the Linux server &#147;mailserv&#148;. The fully qualified domain name is <B>mailserv.mycompany.com</B>.<P>
Each PC has its own mail client. All mail traffic goes through the Linux server. For this article, I'll create a local mail server. For this example, I used a RedHat 6.0 system. There should be little here that does not directly relate to your specific distribution. Any RPM-based distribution (Caldera, TurboLinux, Mandrake) will behave in a similar manner.<P>
<B>The Components</b><p>As I mentioned, the Linux distribution will come with all the things you need to get up and running. On the server end, those things are a mail transport agent, or MTA, (Sendmail), and a local delivery agent, or LDA (usually a program called &#147;deliver&#148;). The client side consists primarily of a mail user agent, or MUA, which usually lives on the user's PC. This should be your favorite email package. I often recommend Pegasus, a great Windows email package that is freely distributed (though not GPL'ed). Your MUA could also be something like Netscape mail, Eudora, or Microsoft Outlook.<P>
Another alternative that would simplify things would be to have users <B>telnet</B> into the server, log into a shell prompt, and use a text-only mailer like &#147;pine&#148; or &#147;elm&#148; -- no fancy Windows packages and no GUIs. Going that route requires no MUA setup.<P>
Before I move on to the specifics of those components, I will review how an email message moves from one person or system to the next. Imagine the user &#147;Tux&#148; writes user &#147;Elvis&#148; an email message. Tux fires up his Netscape email package, clicks &#147;New Message&#148;, and addresses it to &#147;Elvis&#148;. After Tux finishes typing, he clicks &#147;send&#148;. In the background, Tux's mail package (MUA) calls Sendmail (MTA) to handle the message. Sendmail does several things -- first, it deciphers the message and determines how to transfer it. In this case, Sendmail recognizes this as a local address and passes it on to <B>procmail</B> (LDA) for local delivery. If Tux had addressed this message to the Internet, the local Sendmail would have contacted the remote machine (via TCP/IP port 25) and transferred the message.The remote Sendmail would analyze the header, recognize the local address, and pass the message to the LDA for delivery. After taking over from Sendmail, the LDA would route the message to &#147;Elvis'&#148; inbox. Depending on the remote machine's operating system, the LDA could be another <B>procmail</B>, <B>deliver</B>, or a simple program called <B>mail</B>.<P>
Some time later, Elvis starts his MUA (i.e., Pegasus mail or Outlook) and collects the message. By clicking &#147;check for mail&#148;, he tells his MUA to contact the mail server and send any mail sitting in his mailbox. The program that accepts requests for mail pickup from the MUA is called a POP3 server. Therefore, the packages you need (if not already installed) are:<P>
<P>
&#149; Sendmail (your MTA)<P>
&#149; <B>procmail </B>(your LDA)<P>
&#149; IMAP (which includes you POP3 server, ipop3d)<P>
<P>
I've chosen Sendmail rather than qmail (or some other alternative) because it is pretty universal and Sendmail will probably be installed already. IMAP, on the other hand, was not part of my default RedHat installation. Since the IMAP package contains the POP3 server, I'll briefly cover that.<P>
<B>Setting up the POP3 Server</b><p>The POP3 server listens for mail pickup requests from the users. If the POP3 server receives a pickup request, the POP3 server forwards all waiting messages to the email client program on the user's PC. To check whether you have the IMAP POP3 server installed, use this version of the <B>rpm</B> command:<P>
<PRE>
# rpm -q imap
</PRE><P>
If the system responds with something like <B>imap-4.5-3</B>, then the package is already loaded. If not, mount your distribution CD-ROM and install IMAP:<P>
<PRE>
# mount /mnt/cdrom
# cd /mnt/cdrom/RedHat/RPMS
# rpm -ivh imap-somereleasenumber.i386.rpm
</PRE><P>
You may also need to activate those services in <B>/etc/inetd.conf</B>. Here's the line pertaining to POP3 before I change it in <B>/etc/inetd.conf</B>:<P>
<PRE>
#pop-3   stream  tcp     nowait  root    /usr/sbin/tcpd	ipop3d
</PRE><P>
Uncomment the line by removing the hash mark at the beginning. Next, refresh the <B>inetd</B> process for this change to take effect. Find <B>inetd</B>'s process id and send a SIGHUP to it. That means you do a <B>kill -1</B> on the process. Be careful because a <B>kill -1</B> looks an awful lot like a <B>kill 1</B>. The master process on the system is <B>init</B>, and it runs at process id 1. Kill <B>init</B>, and you kill the whole system. If you are concerned, use <B>kill -SIGHUP</B> instead of <B>kill -1</B>. Here's how it looks:<P>
<PRE>
# ps ax | grep inetd
  391 ?        S      0:00 inetd
6568 pts/0    S      0:00 grep inetd

# kill -1 391
#
</PRE><P>
On my RedHat system, I can also restart <B>inetd</B> like this:<P>
<PRE>
/etc/rc.d/init.d/inet restart
</PRE><P>
The next step is to refresh Sendmail.<P>
<B>Setting up Sendmail</b><p>Depending on how your account is set up with your ISP, the domain name of your server may be something like <B>dhch3-ip1.theirdomain.com</B> , which is not the best name for setting up the email gateway. For a return address, user &#147;fred&#148; would wind up as <B>fred@dhcp3-ip.theirdomain.com</B>, when sending mail from the local system. You can have the Sendmail program put in your domain name by making the one modification that I recommend in the Sendmail configuration file. I mentioned that this email server is not going to be connected to the Internet, but if you make this easy change now, you won't need to do it later.<P>
Using your editor, open <B>/etc/sendmail.cf</B> and look for the lines shown in Listing 1. Notice the part that talks about <B>my official domain name</B>. The line that reads <B>Dj$w.Foo.COM</B> has been copied and rewritten with the domain name to define the &#147;Dj&#148;  macro. A macro in Sendmail parlance is very much like an environment variable in your Bourne, Korn, or C shell. The Dj macro references your canonical hostname. For this article, I'll call the domain <B>mycompany.com</B>.<P>
That is the only change needed in the <B>/etc/sendmail.cf file</B>. The next file to modify is <B>/etc/sendmail.cw</B>. This file contains a list of all the domains and systems for which the server will accept mail. For instance, if you edit the file with your editor, and add the domain name (<B>mycompany.com</B>) and the localhost name (<B>localhost</B>), you end up with this simple file:<P>
<PRE>
# sendmail.cw - include all aliases for your machine here.
mailserv
mailserv.mycompany.com
mycompany.com
localhost
</PRE><P>
This tells the Sendmail daemon to accept mail messages addressed to either <B>user@localhost</B>, or <B>user@mycompany.com</B>, or any of the aliases you have set up. Next, you need to edit <B>/etc/mail/relay-domains</B>. <P>
One of the great annoyances of modern email is SPAM (those unwanted bits of advertising that seem to rain down in your email box). Particularly galling are the spammers who use other people's email servers to route their mail traffic. Fortunately, the modern incarnations of Sendmail make it difficult for spammers to use your machine as a relay. In fact, unless otherwise specified, Sendmail will refuse to deliver messages from unfamiliar machines or domains. That is where the <B>relay-domains</B> file comes into play. Edit the file and add the following:<P>
<PRE>
localhost
127.
mycompany.com
192.168.1.
</PRE><P>
This should cover all hosts in your small, networked office, including any need you have for using Sendmail to relay messages on the server. Be sure to include the dot at the end of your localhost domain address (127.) and at the end of your private network and domain (192.168.1.).<P>
<B>Stopping and Restarting Sendmail </b><p>After making these configuration changes, restart Sendmail. The different distributions will vary slightly in this manner. With Red Hat or TurboLinux, simply do the following:<P>
<PRE>
/etc/rc.d/init.d/sendmail restart
</PRE><P>
If your distribution of choice is Caldera, you can use the following command:<P>
<PRE>
/etc/rc.d/init.d/mta restart
</PRE><P>
Caldera defines the MTA in &#147;options&#148; under <B>/etc/mta</B>. If all else fails, you can kill the Sendmail process and restart it the old-fashioned way, by issuing this command:<P>
<PRE>
/usr/sbin/sendmail -bd -q5m
</PRE></b><p>That's all you really need to do with Sendmail and IMAP in order to send and receive mail on this small network. <P>
<B>To DNS or Not to DNS</b><p>For Sendmail to route mail properly, it must be able to resolve domain names to IP addresses. An email server operating on the Internet uses DNS servers for name resolution. <P>
Simply put, a DNS, or Domain Name Server, takes a system's IP address and converts it to a more &#147;human&#148; name (like <B>mailserv.mycompany.com</B>). It will also convert that name back to its numeric IP address. On the server, <B>mailserv.mycompany.com</B> would become <B>192.168.1.100</B>, or vice-versa. This requires the setup of &#147;zone&#148; files and domain tables and can be quite complex. For the small network here, it is easier to list host-to-name-to-IP-address mappings in the <B>/etc/hosts </B>file:<P>
<PRE>
127.0.0.1       localhost
192.168.1.100   mailserv.mycompany.com   mailserv   mycompany.com
192.168.1.31    john
192.168.1.32    myrtle
192.168.1.33    bonnie
192.168.1.34    gilbert
192.168.1.35    elvis
192.168.1.36    tux
</PRE><P>
Usually, the standard Linux install fires up with a DNS already present. This is a simple version called a &#147;caching nameserver&#148;. For this example, you need to get rid of it or it will try to use the DNS to resolve the address of the local machine. The mail client will usually time out waiting for the system to return with a failed DNS lookup, which is not a good idea. The easiest way is to rename the <B>/etc/resolv.conf</B> file:<P>
<PRE>
# mv /etc/resolv.conf /etc/resolv.conf.orig
</PRE><P>
Next, stop the DNS by shutting down the <B>named</B> daemon:<P>
<PRE>
# /etc/rc.d/init.d/named stop
</PRE></b><p>To make sure <B>named</B> does not restart on boot, use this command:<P>
<PRE>
# chkconfig --del named
</PRE><P>
Of course, if your network has been set up for a while and you have a fully configured DNS, you should simply continue using it.<P>
<B>Setting up Users and Aliases</b><p>You can add users to your Linux system with the <B>adduser</B> command. If you are running a desktop environment like KDE, you have access to <B>kuser</B>, a nice user, and group maintenance program while GNOME provides <B>linuxconf</B>. I confess that for user maintenance (as well as many systems administration functions) I prefer doing it the old-fashioned way -- at the command line. In its simplest form,<B> adduser</B> works like this:<P>
<PRE>
adduser user_name
</PRE><P>
You then assign a password with the <B>passwd</B> command.<P>
<PRE>
passwd user_name
</PRE><P>
One thing to do is create an alias for your office. Aliases are also useful if you want to add something like<B> sales@mycompany.com</B> that you want redirected to the salespeople. Another useful alias, <B>office@mycompany.com</B> sends mail to everybody. The file you need to edit is called <B>/etc/aliases</B>. Open the file using the editor. The format of the aliases file is simple:<P>
<PRE>
alias_name:    real_name1,real_name2,real_name3, . . .
</PRE><P>
The <B>alias_name</B> is the name for which you are creating the alias. In the example above, it would be &#147;sales&#148; or &#147;office&#148;. After the colon, hit tab (or put spaces) and type in your list of user names separated by commas. White space at the beginning of a line implies the continuation of an alias. Here's an example using office:<P>
<PRE>
office: john,myrtle,bonnie,gilbert,elvis,tux
</PRE><P>
The six email addresses listed after <B>office:</B> will receive a copy of any mail addressed to <B>office@mycompany.com</B>. Save your work, and run the following command:<P>
<PRE>
/usr/sbin/sendmail -bi
</PRE></b><p>The <B>dash bi (or -bi)</B> stands for <B>build index</B>. Running this command should return a message similar to this:<P>
<PRE>
/etc/aliases: 14 aliases, longest 10 bytes, 152 bytes total
</PRE><P>
The new aliases are ready to roll.<P>
The server now has Sendmail and a simple DNS set up, the users have been created (in a virtual sense), and there are aliases for the office and sales team. The only thing left is the clients.<P>
<B>Setting up Your Client MUAs</b><p>The ways that a user can collect mail continually change. A popular newcomer to the field is the browser-based email package. Still, most people in an office environment will have some kind of preferred email package. (Earlier, I mentioned Pegasus and Netscape Communicator among others.) Because the email server will both send and receive mail, the MUA configuration is simple.<P>
If you are using &#147;Netscape Communicator&#148; for email, click &#147;Edit&#148;, then click &#147;Preferences&#148;. When the Preferences window pops up, click one more time on &#147;Mail and Newsgroups&#148; in the Category menu. There are two groups of settings need to change -- the first is &#147;Identity&#148; (see Figure 1) and the second is &#147;Mail Servers&#148; (Figure 2).<P>
In the identity dialog, enter the full name (i.e., Tux M. Penguin) and email address (<B>tux@mycompany.com</B>). On the &#147;Mail Servers&#148; dialog, click &#147;Add&#148; to specify an incoming (POP3) mail server. You will get another dialog box asking you to specify the POP3 server name. This is &#147;mailserv&#148; and the Server Type is POP. The user name in this case is &#147;tux&#148;. Click &#147;OK&#148; to return to the &#147;Mail Servers&#148; dialog. There, you will enter &#147;mailserv&#148; again as the Outgoing Mail (SMTP) Server. The outgoing user name is Tux's email address, &#147;tux@mycompany.com&#148;.<P>
Another example is Pegasus Mail, a great Windows email client developed by David Harris. Figure 3 shows a snapshot of the &#147;Internet Options&#148; dialog from Pegasus version 3.1 (click &#147;Tools&#148; on your Pegasus menu bar and choose &#147;Internet options&#148;). On the first tab (&#147;General&#148;) enter the user's email address (in this case, <B>tux@mycompany.com</B>).<P>
The second tab (pictured) is &#147;Receiving (POP3)&#148;. For our POP3 host, enter &#147;mailserv&#148;, the email server's hostname. The user name and password are &#147;tux&#148; and whatever password assigned to him earlier. Finally, under the &#147;Sending (SMTP)&#148; tab, enter &#147;mailserv&#148; one more time, since the server is handling both sending and receiving of mail.<P>
I've included two examples to show that most Windows email clients follow a similar setup. You need the SMTP and POP3 host defined, a user name and password to pick up mail, and your email address.<P>
<B>One Last Little Bit</b><p>Since we are not setting up a DNS in this example, the PCs need to have the address for the email server in the HOSTS file. This file is located in the &#147;C:\WINDOWS&#148; directory. Edit the file by clicking &#147;Start&#148;, &#147;Run&#148;, and typing this command:<P>
<PRE>
EDIT C:\WINDOWS\HOSTS
</PRE><P>
Add this line:<P>
<PRE>
192.168.1.100    mailserv.mycompany.com    mailserv
</PRE><P>
Click on &#147;File&#148; in the editor, and choose &#147;Save&#148; then &#147;Quit&#148;.<P>
<B>Send Some Mail </b><p>Bring up your mail client, and send mail to the office. In the &#147;To&#148; field, enter <B>office@mycompany.com</B>. Enter some clever subject and text, then click on the &#147;send&#148; button. Each of the users should now be getting mail.<P>
<B>Conclusion </b><p>Becoming a master of Sendmail alone is a daunting task -- this is a massive program. However, Linux is a wonderful platform to deploy network office applications like email. Its UNIX roots mean that it offers the same mature, stable network communications tools that connect the planet. With an unbeatable price tag (free), Linux is certainly an affordable platform for businesses of every size. Its ever increasing popularity means you won't be alone if you need help.<P>
<B>Resources</B><P>
<B>http://metalab.unc.edu/mdw/linux.html</B> -- The Linux      Documentation Project.<P>
<B>http://www.netscape.com </B>--<B> </B>Netscape Communications.<P>
<B>htt p://www.pegasus.usa.com</B> -- David Harris' Pegasus Email Web site.<P>
<B>http://www.redhat.com</B> -- Red Hat Software.<P>
<B>http://www.rfc-editor.org</B> -- The RFC Editor.<P>
<B>http://www.sendmail.org</B> -- The Official Sendmail Web site. <P>

<h1>About the Author</h1><p>
Marcel Gagn&eacute; lives in Mississauga, Ontario. In real life, he is president of Salmar Consulting Inc, a systems integration and network consulting firm. He is also a pilot, writes science fiction and fantasy, and edits TransVersions, a science fiction, fantasy, and horror magazine. He loves Linux and all flavors of UNIX and will even admit it in public. He can be contacted at: mggagne@salmar.com. You can discover lots of other things from his Web site at: www.salmar.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
