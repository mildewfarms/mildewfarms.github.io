<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i05: Building a Jumpstart Server for Solaris</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/may2000.tar"><b class=codeListing>may2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Building a Jumpstart Server for Solaris</H1><p>
<P>Peter van der Weerd
<P>

In today's computing environments, machines are often just a means to get to the data storage media. They are either there to offer you a place to log into and work from, or to create a path to your data and applications. Every machine that you use, regardless of its purpose, must first be configured. Minimally, you will have to install the OS and perhaps also install additional packages and configure application-dependent files or scripts.<P>
To reduce this installation time, every UNIX variant has some product that offers automated installation of clients. As it happens, most of these tools have a graphical interface. This article deals with the Solaris version of network install. Solaris and graphical user interfaces have never been the best match (no offense); the same goes for the Solaris network installation product, &#147;Jumpstart&#148;. To get a working Jumpstart server, you will have to do some additional configuring that cannot be done by using a GUI. To avoid the use of a GUI altogether, I will discuss a complete manual configuration.<P>

<B>How Does Jumpstart Work?</B><P>


A new machine (client) is physically connected to a network segment. You switch it on, and the client has one or more disks with nothing on them -- not even a bootblock. The client will end up in the Open Boot Prom. In the case of a bootable disk, you can interrupt the boot sequence by pressing &lt;Stop&gt;+&lt;a&gt;.<P>
From the Open Boot Prom, you type <B>boot net - install</B>. This will cause a reset and subsequent boot from the network with the option &#147;install&#148; added to it. Keep in mind that this only applies to Sun's sparc machines. Other vendors also support network install clients and servers, but the options and arguments will differ:<P>
<P>
1.  All the client knows is its own Ethernet address. What it needs, however, is its IP address. To get its IP address, the client broadcasts a RARP request. A boot server, running the <B>in.rarpd daemon</B>, receives the request and checks its ethers table <B>/etc/ethers</B> for the Ethernet address. This boot server must be in the same subnet because RARP works on the Ethernet level and cannot be routed. The ethers file holds the client's Ethernet address and hostname. The hostname is used to find the client's IP address in the host file <B>/etc/hosts</B>. The server replies to the request, thus providing the client with its IP address.<P>
2.  The client now needs a bootimage. This bootimage is obtained with a <B>tftp</B> request. The <B>tftp</B> request is a built-in request initiated from the open boot PROM and fully automatic because of the <B>net</B> option in the boot <B>net -install</B> command. The server holds a bootimage for every client in the <B>tftpboot</B> directory <B>/tftpboot</B>. This directory holds the hexadecimal IP address that is linked to the client stub:<P>

<pre>
C00C6E0A - &gt; inetboot.SUN4U.Solaris_2.6-1
</pre>

This example is a machine with Ultra architecture using a 2.6 bootimage and has the IP address 192.12.110.10.<P>
3. When the client has loaded the bootimage, it will request further parameters concerning identification, software, and configuration. This information will be rendered by the bootparams daemon on the server: <B>rpc.bootparamd</B>. The bootparams information is stored in the server's <B>/etc/bootparams</B> file.<P>
4. Among other things that I will cover, the bootparams file contains the Solaris software directory on the server. The client needs this to get the kernel <B>/kernel/genunix</B>. The client mounts the root filesystem (<B>/</B>) from the server and loads the kernel.<P>
5. Finally, the client connects to the configuration server, which is also in the bootparams file and may well be the same server as the boot server. This configuration server holds the necessary information for the client to identify itself (<B>sysidtool</B>) and run a proper installation (<B>suninstall</B>).<P>

<B>Installation Procedure</B><P>

Solaris installation basically consists of three steps:<P>

<ul><li>System identification (<B>sysidtool</B>)</li>
<li>Software installation (<B>suninstall</B>)</li>
<li>Configuration of installed software</ul></li><P>

These three steps can be fully automated and configured to your own needs. This is what the client needs to find:<P>
<P>
<ul><li>Directory where the Solaris software (including the kernel) resides</li>
<li>Directory for system identification script</li>
<li>Directory for suninstall scripts</ul></li><p>

<B>System Identification</B><P>

The client will need the following information to be identifiable by itself and others:<P>
<P>
1. Language and locale<br>
2. Hostname<br>
3. Whether it is networked or not<br>
4. Network interface<br>
5. IP address<br>
6. Nameservice<br>
7. Netmask<br>
8. Timezone<P>
<P>
Regardless of the fact that the client could get the IP address and hostname from the server since it managed to boot, it will still run the system identification tool as if totally ignorant, so you will have to provide it with the information it will normally get from the keyboard. This information is all stored in a system identification configuration file: <B>sysidcfg</B>. This file can be in any directory you like, as long as it is mentioned in the bootparams file. Every client should have its own <B>sysidcfg</B> file.<P>

<B>Suninstall</B><P>

The client will need to know whether it is going to get an initial install or upgrade. It also must know which software packages or software cluster it is going to get. This information is provided in a &#147;class file&#148;. This file will be in the jumpstart configuration directory. This directory can be any directory on the server but is preferably a dedicated directory. The name of this configuration directory can be regarded as a boot parameter, so it is stored in the <B>/etc/bootparams</B>.<P>
I will first list the files and directories needed, with their respective contents. After that, they will be implemented in an example configuration:<P>
<P>
1. <B>/etc/ethers</B> (file) -- Contains Ethernet address and hostname, needed for RARP reply.<br>
2. <B>/etc/hosts</B> (file) -- Contains IP address and hostname, needed for RARP reply.<br>
3. <B>/tftpboot</B> (dir) -- Contains IP address (hexadecimal) and bootimage.<br>
4. <B>/etc/bootparams</B> (file) -- Contains information needed for a number of things. Here's an example:<P>

<pre>
berlin root=sp5:/cdrom/cdrom0/s0/Solaris_2.6/Tools/Boot
install=sp5:/cdrom/cdrom0/s0
boottype=:in
sysid_config=sp5:/usr/local/jumpstart
install_config=sp5:/usr/local/jumpstart
</pre>

&#147;Hostname&#148; is &#147;berlin&#148;; &#147;root&#148; specifies the directory for the kernel;  &#147;install&#148; specifies the software location; &#147;boottype&#148; specifies the type of client (install); &#147;sysidconfig&#148; specifies the location of the <B>sysidcfg</B> file; &#147;install_config&#148; specifies the directory that contains files needed for suninstall.<P>
5. <B>sysidcfg</B> (file) -- Located in the directory that is specified by the <B>sysid_config</B> entry in <B>/etc/bootparams</B> (see 4). This file identifies the client. Another example:<P>

<pre>
system_locale=en_US
timezone=MET
name_service=NONE
terminal=dtterm
timeserver=localhost
network_interface=le0 {netmask=255.255.255.0}
</pre>

This example is not complete and you can specify more or less. I left out the  root password, for example.<P>
6.  <B>host_class</B> (file) -- This file is located in the directory specified by the <B>install_config</B> entry in <B>/etc/bootparams</B> (see 4). An example:<P>

<pre>
install_type    initial_install
system_type     standalone
partitioning    explicit
filesys         any     64      swap
filesys         any     free    /
cluster         SUNWCall
</pre>

Although this file also has more options than shown, these are the most important and most used options. The machine that owns this file will end up as a standalone client with a 64-Meg swap device and a rootslice that covers the rest of the drive. In this particular example, it is not interesting to know what drive is used for the installation of Solaris (value of keyword filesys : any). You can imagine that if you would want the rootslice to be on a particular drive, you replace the value &#147;any&#148; with the slicename. <B>SUNWCall</B> causes the entire distribution to be installed. Other options here would be: <B>SUNWprog</B> (developer), <B>SUNWuser</B> (enduser) and <B>SUNWreq</B> (core OS).<P>
7.  <B>begin_script</B> (file) -- This file is also located in the configuration directory (see 4). It is run before the <B>host_class</B> file is run (see 6). The file can contain any instruction you like. It is an optional file.<P>
8.  <B>finish_script</B> (file) -- Yet another file for the configuration directory (see 4) and as optional as the <B>begin_script</B>. It is run after the <B>host_class</B> script has been run. Although optional, it is often used to set the root password as well as to install additional files or packages or patches.<P>
9. <B>rules</B> (file) -- Also in the configuration directory. This file has a specific layout:<P>

<pre>
keyword value begin_script host_class finish_script.
</pre>

An example is:<P>

<pre>
hostname berlin  -  sun4u_class_gen copy_passwd
arch_type sun4m  -  sun4m_class_gen -
</pre>

There are many possible keywords; these are only a few. The sample script offered by Sun will give them all. In the example, the client named &#147;berlin&#148; will use no begin script, but it does have a <B>host_class</B> script and a finish script, <B>sun4u_class_gen</B> and <B>copy_passwd</B>, respectively. The second line specifies that any machine of the sun4m type will use the subsequent scripts on that line.<P>
I hope you're still with me, and you probably now expect me to tell you that you must type out all of these files (like you should). However, Sun provides you with templates for all the files, except <B>/etc/bootparams</B>, but this file can be generated by a single instruction.<P>

<B>And Now for the Practical Example</B><P>

I have a server called &#147;mercury&#148;, with the IP address 192.12.110.12, that I am going to configure into a jumpstart server. The server has the following drives to use: c0t0d0 (boot drive), and c0t2d0 (4-GB) drive that can be used for the jumpstart purpose. The server runs Solaris 2.6 and has the Solaris distribution CD inserted:<P>
<P>
1. Software -- You can leave the OS software on the CD and install from that without a problem, but it will take more time (unless your CD player is faster than the c0t2d0 drive). I am going to use the drive. This also gives me the advantage of being able to install multiple clients with different Solaris versions at the same time.<P>
To set up the install server, I create a 500-Meg partition and filesystem on the c0t2d0 drive and mount it to the directory <B>/Solaris_2.6</B>. This drive will hold the Solaris OS software. I CD to the Tools directory on the distribution CD:<P>

<pre>
# cd /cdrom/cdrom/0/s0/Solaris_2.6/Tools
</pre>

I run the script that will copy the software to the newly created filesystem:<P>

<pre>
# ./setup_install_server /Solaris_2.6
</pre>

This will take a while.<P>
2. Configuration data -- I am going to set up one client that I want to be able to reinstall whenever I feel like it. I create the jumpstart configuration directory:<P>

<pre>
# mkdir /usr/local/jumpstart
</pre>

I CD to the directory that holds the sample files, and copy them to /<B>usr/local/jumpstart</B>:<P>

<pre>
# cd /cdrom/cdrom/0/s0/Solaris_2.6/Misc/jumpstart_sample
# cp -r * /usr/local/jumpstart
</pre>

The two directories will both be accessed by the client through NFS mounts,  so I must not forget to share them:<P>

<pre>
# echo "share -F nfs -o ro /usr/local/jumpstart" &gt;&gt; /etc/dfs/dfstab
# shareall
</pre>

(If this is the first share, you will have to stop and start the NFS server.)<P>
I only share the configuration directory. The other one I'll deal with later. First, I will configure the clients' system identication and suninstall data.<P>

<pre>
# vi /usr/local/jumpstart/sysidcfg

     system_locale=en_US
     timezone=MET
     name_service=NONE
     terminal=dtterm
     timeserver=localhost
     root_password=h1HsSZX0qUQuU
     network_interface=le0 {netmask=255.255.255.0} 

# vi /usr/local/jumpstart/host_class

     install_type    initial_install
     system_type     standalone
     partitioning    default
     cluster         SUNWCuser
     cluster         SUNWCown delete
     cluster         SUNWCtltk delete
     cluster         SUNWCxgl delete
     cluster         SUNWCxil delete
     filesys         mercury:/usr/openwin - /usr/openwin ro,intr
</pre>

My client will have an initial install on an arbitrary drive and with default partitioning and an entire distribution, but it will use the Windows environment from server mercury.<P>

<pre>
# vi /usr/local/jumpstart/rules

     hostname berlin  -  host_class copy_passwd
</pre>

Obviously, my client is called berlin. To make sure the syntax and contents of the rules file are okay, I will have to run a check on the file. This check will create a <B>rules.ok file</B>. This is the actual file that will be used by jumpstart:<P>

<pre>
# cd /usr/local/jumpstart; ./check
</pre>

Now, I am ready to really configure the client. I decide that the client IP address is going to be 192.12.110.99. On the box, I read the Ethernet address 8:0:20:43:12:ef. (You can also run the &#147;banner&#148; command from the Open Boot Prom on the client.) After I have added berlin to <B>/etc/hosts</B>, I run the following commands:<P>

<pre>
# cd /cdrom/cdrom0/s0/Solaris_2.6/Tools
# ./add_install_client -e  8:0:20:43:12:ef -i  192.12.110.99 \
  -s mercury:/Solaris_2.6 -c mercury:/usr/local/jumpstart -p \
  mercury:/usr/local/jumpstart berlin sun4u
</pre>

I see that the instruction changes <B>/etc/ethers</B>, shares /<B>Solaris_2.6</B> (the one I had neglected earlier), and updates <B>/etc/bootparams</B>. Make sure that <B>/etc/ethers</B> contains the proper information for berlin. Also check <B>/tftpboot</B>. It should contain the bootimage.<P>
As you may have noticed, the finished script I use is called &#147;copy_passwd&#148;. For some reason or other, I want some users to always be able to log into berlin, and since I do not use NIS or NIS+, I will have to make sure that the users are in the <B>/etc/passwd</B> and <B>/etc/shadow</B> file. I do not want to do any manual configuration afterwards, so I ask jumpstart to do it for me. You can do whatever you like in the finished script. The root slice of the client is always mounted on <B>/a</B> during installation; I save the original <B>passwd</B> file and replace it with my own.<P>

<pre>
# vi /usr/local/jumpstart/copy_passwd

     cp /a/etc/passwd /a/etc/passwd.org
     cp /a/etc/shadow /a/etc/shadow.org
     cp /usr/local/jumpstart/copy_passwd/a/etc/passwd
     cp /usr/local/jumpstart/copy_shadow/a/etc/shadow
</pre>

Now I stumble to berlin, give it a <B>boot net - install</B>, and sit back.<P>

<B>Troubleshooting Your Jumpstart Server</B><P>

I could have partially configured the server using the GUI (hostmanager). The advantage of manually configuring the server is that I have to know what goes where and why, not for the sake of knowledge or because this is &#147;UNIX-like&#148;, but simply because I want to be able to troubleshoot my server. You can make your own checklist to troubleshoot. Here is mine:<P>
<P>
1.  Did I share the relevant directories (<B>/Solaris_2.6</B> and <B>/usr/local/jumpstart</B>)?<br>
2.  Are <B>in.rarpd</B> and <B>rpc.bootparamd</B> running?<br>
3.  Did I create the <B>rules.ok</B> file by running check?<br>
4.  Is there an entry for my client in <B>/tftpboot</B>?<br>
5.  Is there an entry for my client in <B>/etc/bootparams</B>?<br>
6.  Is there an entry for my client in <B>/etc/hosts</B> and <B>/etc/ethers</B>?<br>
7.  I run snoop to trace the installation of my client.<P>
<P>
When you run a test install, it will annoy you that you have to wait until the entire distribution is installed before you notice that the <B>sysidcfg</B> file has errors or even the finished script is incorrect. To speed up test installation, you can use SUNWreq (host_class). This is the smallest software cluster and takes only a couple of minutes to install (depending on the speed of the peripherals, of course).<P>
<p>
<h1>About the Author</h1><p>
Peter van der Weerd works as a UNIX trainer and consultant for Sun Microsystems and Hewlett Packard in Europe.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>





