<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i05: Setting Root SUIDed Programs at Work</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><span class=navbarLink><a href="a7_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/2000/may2000.tar"><b class=codeListing>may2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Setting Root SUIDed Programs at Work</H1><p>
<P>Didier Racheneur
<P>
The SUID feature lets you alter a program's execution environment. This article describes SUID and provides some example SUID programs -- where there is power, there is danger. The article also include some security tips for using SUID programs without putting the network at risk.<P>
What is a uid? What is the uid bit? The nine permission bits (located in the inode) are shown below:<P>

<pre>
owner:                                     other (world):
execute -------------------                -----------read
write ------------------  |                |  --------write
read ---------------   |  |                |  |  -----execute
                    |  |  |                |  |  |
                    0  1  0    1  0  0     1  0  1
group:                         |  |  |

read ---------------------------  |  |
write -----------------------------  |
execute ------------------------------
</pre>

In octal, this is expressed as: 245 or <B>-w-r--r-x</B>. There are three more bits (from left):<P>
<P>
<ul><li>The set-user-ID bit (on execution): SUID</li>
<li>The set-group-ID bit (on execution): SGID</li>
<li>The sticky bit</ul></li></p>
<P>
to give:<P>

<pre>
                1   0   0   0 1 0  1 0 0  1 0 1
                |   |   |
SUID ------------   |   |
SGID ----------------   |
sticky bit --------------
</pre>

To complete the two bytes, we still have at left three bits to show the file type (from <B>&lt;sys/inode.h&gt;</B>):<P>

<pre>
IFIFO           0010000        /* fifo */
IFCHR           0020000        /* character special */
IFDIR           0040000        /* directory */
...
</pre>

The sticky bit holds the text image on the swap disk (the program loads into memory faster the next time it is executed, because the swap area is handled as a contiguous file). With virtual memory, the utility of the sticky bit has disappeared. With a directory, the sticky bit (<B>t</B>) restricts the removal and renaming of files in the directory (interesting on <B>/tmp</B> for example). To rename or drop a file, you must either be the owner of the file or of the directory or be root (the superuser).<P>
Every process has the four following IDs associated with it:<P>

<pre>
<ul><li>Real user ID</li>
<li>Real group ID                    }  Who we really are</li>
<P>
<li>Effective user ID</li>
<li>Effective group ID and        }  Used for file access permission checks
supplementary group IDs</li></ul></P>
</pre>

See the &#147;Supplementary Groups&#148; sidebar for more information. The real user ID and real group ID come from <B>/etc/passwd</B> as we log in. The effective user ID, effective group ID, and supplementary group ID determine file access permissions. The effective user and group IDs are, by default, equal to the real IDs.<P>
In other words, by default, effective uid = real uid and effective gid = real gid. But it is also possible to say: &#147;when this file is executed, set the effective user ID of the process to be the owner of the file&#148;. For example, let's compile the simple program:<P>

<pre>
myprog.c:

main()
{
system("id");
}
</pre>

You can change the owner of the file to John, but unless you set the suid bit, the file will still execute under the real and effective uid of the current user &#147;henry&#148;:<P>

<pre>
$ id
uid=327(henry) gid=22(tennis)

$ cc -s -o myprog myprog.c        # -s to stripe (smaller output)
$ chmod 111 myprog
$ chown john:sys myprog
$ ll myprog                       # ll = ls -l

---x--x--x   1 john         sys         12339 Nov 25 09:11 myprog
</pre>

Launched by user &#147;henry&#148; (who belongs to the group &#147;tennis&#148;); it has a real and effective uid &#147;henry&#148; and a real and effective gid &#147;tennis&#148;.<P>

<pre>
$ ./myprog
uid=327(henry) gid=22(tennis)
</pre>

When the real uid is the same as the effective one, it is not displayed. The same is true for the real and effective gid. If we set the SUID bit (as root or john -- only the owner or root can change the permissions):<P>

<pre>
# chmod u+s myprog                      # or chmod 4111 myprog

---s--x--x   1 john         sys        12339 Nov 25 09:11 myprog
</pre>

The same user (henry) launching the program will be: real user=henry, effective user=john (= the owner of the file) for the duration of the program.<P>

<pre>
$ id
uid=327(henry) gid=22(tennis)

$ ./myprog
uid=327(henry) gid=22(tennis) euid=330(john)
</pre>

If we execute a SUID file, our effective uid is automatically set to the uid of the file's owner: if the file is owned by root, we are root (effective uid=0) for the duration of the program.<P>

<B>Setting the Real UID to Root</B><P>

The following facts lead to some interesting possibilities. If the SUID permission is set, the effective uid becomes the file's owner (likewise, the effective gid becomes the file's group if the SGID bit is set). Also, the C function <B>setuid(newid)</B> allows us to change the real and effective uid to newid. But to successfully use <B>setuid</B>(0), we must first have the effective uid of root (obtained through the permissions+ownership of the program file as explained above).<P>
The result of these facts is that, if the effective uid=0 (=&gt; SUID bit set + owner=root), then <B>setuid(0)</B> lets you change not just the effective uid but also the real uid to root. Otherwise, only the effective uid is changed. It is important to keep the following rules in mind when using the <B>setuid(newid)</B> function (see man pages <B>setuid</B>(2) and Figure 1):<P>
<P>
<ul><li>If the process has the effective uid=0, the function <B>setuid(newid) </B>sets the real uid, the effective uid and the saved uid to newid.</li>
<li>If the effective uid != 0, but newid is equal to the real uid or to the saved uid, <B>setuid(newid)</B> only sets the effective uid to newid. The real and saved uid remain unchanged.</li>
<li>In all other cases, errno is set to EPERM (=1) and an error is returned (-1).</li>
<li>For the group ID (gid), the rules are similar.</ul></li></P>
<P>
To change <B>/etc/passwd</B>, it is enough to have the effective uid of root (file access). To mount a filesystem, on the other hand, it is necessary to have the real uid of root (because the command <B>mount</B> checks the real uid).<P>
If you want to be &#147;full&#148; root (real + effective uid = 0), you must use the following statement in a C root SUID program:<P>

<pre>
setuid(0);                      // 0 is the uid of root
</pre>

or login as root or use <B>su</B>, but both will ask the root password.<P>
To change the permissions of a file, you must be the owner of the file (or root depending on _POSIX_CHOWN_RESTRICTED if it exists, see man <B>setprivgrp</B>(2) as well). In HP-UX, it is not set by default. Therefore, to set the SUID bit of a root-owned file, you must be root first.<P>
As root:<P>

<pre>
# chmod 111 myprog
# ll myprog

---x--x--x   1 root         sys       20038 Nov 25 09:11 myprog

# chmod 4111 myprog                   # or chmod u+s myprog
# ll myprog

---s--x--x   1 root         sys       20038 Nov 25 09:11 myprog
</pre>

<b>Shells and Scripts</B><P>
Changing the SUID bit of a shell gives the effective uid. It is not the real uid, but it can easily lead to it, giving for example the possibility to change <B>/etc/passwd</B> (e.g., to set to 0 the uid of any regular user). The following lines shows the effect of setting the SUID bit of a shell on the effective uid:<P>
As root:<P>

<pre>
  # cp /usr/bin/sh /home/me          # let's work on a copy
  # ll /home/me/sh                   # ll = ls -l
  -r-xr-xr-x   1 bin       bin    491520 Jun 29 14:10 /home/me/sh

  # chmod u+s /home/me/sh
  # chown root /home/me/sh
  # ll /home/me/sh                   # ll = ls -l
  -r-sr-xr-x   1 root      bin    491520 Jun 29 14:10 /home/me/sh

  # cd /home/me
  # echo id &gt; t1.sh
  # chmod 555 t1.sh
  # su bin
  $ id
  uid=2(bin) gid=2(bin)

  $ /usr/bin/sh t1.sh                     # Posix shell
  uid=2(bin) gid=2(bin)

  $ ./sh t1.sh                            # local SUID shell
  uid=2(bin) gid=2(bin) euid=0(root) egid=3(sys)

  =&gt; Only the effective uids are changed.
</pre>

Changing the SUID bit of a script gives a similar effect. The script must begin with the following as first line (otherwise the SUID bit is ignored):<P>

<pre>
#!/usr/bin/sh
</pre>

or any other interpreter (use the absolute pathname; also the line may not exceed 32 characters in all). For example, (as root):<P>

<pre>
  # echo '#!/usr/bin/sh' &gt; t1.sh
  # echo id &gt;&gt; t1.sh
  # chmod 4555 t1.sh
  # chown root t1.sh  # in principle, root is already the owner
  # ll t1.sh
  -r-sr-xr-x   1 root      sys          17 Jan  4 09:43 t1.sh
  # su bin
  $ id
  uid=2(bin) gid=2(bin)
  $ ./t1.sh
  uid=2(bin) gid=2(bin) euid=0(root)
</pre>

<b>Adding a Wrapper</B><P>

If the real uid=0 is necessary (e.g., if you wish to use <B>mount</B>, <B>su</B> without password, <B>remsh</B>, etc.), you must create a C wrapper (Listing 1), compile it, and set the SUID bit of that executable file. The C wrapper can then call a script (if you don't intend to continue in C). If you call a script from within a C wrapper with the SUID bit set, you don't need to set the SUID bit of the script. (All listings for this article are available from the <I>Sys Admin</I> Web site: <B>www.sysadminmag.com</B>.)<P>
Don't forget to test the interruptions (signals): ctrl-C, etc. and use, if necessary, the statement &#147;trap&#148; in the scripts (or the signal family in C). Also, don't forget that all the scripts called by a C wrapper (or which have the SUID bit set) must have the following first line to invoke the shell:<P>

<pre>
#!/usr/bin/sh
</pre>

or another shell or interpreter (Perl, ksh, csh, etc.). <B>/usr/bin/sh</B> is the Posix shell (<B>man sh-posix</B>), the Bourne shell (<B>man sh-bourne</B>) is <B>/usr/old/bin/sh</B> (HP-UX 10.20 or 11.0). Here's another example (see also &#147;Build a Backdoor&#148; sidebar):<P>

<pre>
#!/bin/awk -f
{
system("id")
}

#!       have to be the 2 first characters of the first line.
</pre>

<b>Setting the Saved UID</b><P>
<b>_POSIX_SAVED_IDS</B> indicates whether the implementation supports the saved SUID and the saved SGID (it is the case of HP-UX). The command <B>getconf _SC_SAVED_IDS</B> returns 1 if the saved SUID is supported, the C function <B>sysconf(_SC_SAVED_IDS)</B> returns 1 if the saved SUID supported (errno unchanged). Use:<P>

<pre>
#include &lt;unistd.h&gt;
</pre>

_POSIX_SAVED_IDS</B> can be checked at compile time (<B>#ifdef _POSIX_SAVED_IDS</B>) and <B>sysconf</B>(<B>_SC_SAVED_IDS</B>) at runtime (see Figure 1).<P>
We can obtain the current value of the real and effective uids (<B>getuid()</B> and <B>geteuid()</B>), but we cannot obtain the current value of the saved uid. If a program completely changes its real+effective users, it can no longer obtain the original real+effective uid because changing the effective uid destroys the original SUID bit. Here's a program illustrating that:<P>

<pre>
  t0.c :

  #include &lt;unistd.h&gt;
  #include &lt;stdio.h&gt;
  int errno;

  main ()
  {
1 int ret;
2 printf("getuid=%d geteuid=%d\n",getuid(),geteuid());
3 ret=setuid(5);
4 printf("errno=%d ret=%d getuid=%d geteuid=%d\n",
        errno,ret,getuid(),geteuid());

5 ret=setuid(0);                // try to come back
6 printf("errno=%d ret=%d getuid=%d geteuid=%d\n",
        errno,ret,getuid(),geteuid());
  }
</pre>

Now, let's compile and run the above program. As root:<P>

<pre>
  # cc t0.c
  # chmod 4111 a.out
  # ll a.out
  ---s--x--x   1 root        sys     20531 Jan 10 11:26 a.out
  # su bin
  $ id
  $ uid=2(bin) gid=2(bin)
  $ ./a.out
  getuid=2 geteuid=0
  errno=0 ret=0 getuid=5 geteuid=5
  errno=1 ret=-1 getuid=5 geteuid=5
</pre>

getuid</B> gives the real uid, <B>geteuid</B> the effective one. Because the program is SUID, the effective uid becomes the file's owner (1st line of output): real remains 2, effective=0 (=file's owner). Having effective uid=0, we have the &#147;full power&#148;. <B>setuid(5)</B> sets the real, effective, and saved uids to 5.<P>
Now we have real, effective, and saved uid=5 (source code line 4). Because the effective uid is not 0, the &#147;power&#148; is limited. Only the effective uid can be changed (to the saved uid only). Source code line 5 tries to become root back. It fails because the saved uid is 5. See the uid-related functions in HP-UX 10.20 or 11.0 listed in Figure 2.<P>

<B>Restricting Access to su</B><P>

The <B>su</B> command creates a shell with effective uid of another user. If you don't specify a user, the shell has an effective uid of root.<P>

<pre>
# ll /usr/bin/su
  -r-sr-xr-x   1 root    bin     24576 Nov  7  1997 /usr/bin/su
</pre>

Changing the permissions, you can restrict the use of <B>su</B> to the users of a group, let's say &#147;admin&#148; (to define in <B>/etc/group</B>), as root:<P>

<pre>
  # cp /usr/bin/su /home/me          # let's work on a copy
  # chmod 4110  /home/me/su
  # chgrp admin /home/me/su
  # ll /home/me/su                   # ll = ls -l
  ---s--x---   1 root   admin    24576 Nov  7  1997 /home/me/su
</pre>

Only the members of the group admin are now allowed to run <B>su</B>.<P>
Other methods are:<P>

1. see <B>acl(5)</B> Access Control Lists.<p>
2.  <B>(un)alias</B> in some <B>.profile</B> (see the article &#147;Controlling Root&#148; of Carolyn Conner in <I>Sys Admin</I> June 1997) to forbid the use of <B>su</B> by some users.<p>
3. <B>sudo</B>.<P>

<B>Setting the uid with sudo</B><P>

The <B>sudo</B> utility offers several options for setting uid that aren't available through most UNIX-based operating systems. The <B>sudo</B> Web site (<B>www.courtesan.com/sudo/</B>) explains:<P>
&#147;Sudo (Superuser do) allows a system administrator to give certain users (or group of users) the ability to run some (or all) commands as root or another user while logging the commands and arguments.&#148;<P>
No vendor supports the third-party package. Because it is a more complex product than an SUID C program of a few lines, it is potentially more dangerous and many potential customers refuse to install it. To be honest, it seems to work correctly and it is free of charge.<P>

<B>Setting the uid in Perl</B><P>

Let's build a script (<B>t.pl</B>) containing the two lines:<P>

<pre>
  #!/usr/contrib/bin/perl
  system("id");
</pre>

then (as root):<p>

<pre>
  # chmod 4555 t.pl
  # ll t.pl
  -r-sr-xr-x   1 root       bin           38 Nov  8  1999 t.pl

  # su bin
  $ ./t.pl
</pre>

Output (under HP-UX 10.* or 11.0) the following lines:<P>

<pre>
YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!
FIX YOUR KERNEL, PUT A C WRAPPER AROUND THIS SCRIPT, \
  OR USE -u AND UNDUMP!
</pre>

In some operating systems, you can disable the SUID effect on scripts. The SUID bits are then ignored. If the SUID effect is disabled, Perl detects the SUID bit and emulates <B>setuid</B>/<B>setgid</B> in a secure fashion. Some systems, however (such as, HP-UX 10.x or 11.0), do not let you disable the SUID effect; and Perl, therefore, always refuses to run SUID scripts (for security reasons). The solution is to use a C wrapper to call the Perl program (Listing 3) or use <B>-u</B> and <B>undump</B>. Perl <B>-u</B> generates a core dump, and <B>undump</B> creates a compiled executable from the core file. However, <B>undump</B> doesn't exist under HP-UX and should be provided by the creators of Perl (or any third party).<P>

<B>Becoming Root without the Password</B><P>

The <B>.rhosts</B> feature provides a means for a user to become root without ever knowing the root password. Let's take the user &#147;carol&#148; existing on the host &#147;chicago&#148;:<P>

<pre>
  $ id
  uid=201(carol) gid=20(users)
  $ rlogin chicago -l root
</pre>

She can log in as root without the root password if the file <B>.rhosts</B> is in the home directory of root, owned by root and not writable by others, and if the same <B>.rhosts</B> file contains the line:<P>

<pre>
chicago carol
</pre>

From here, it is in principle, the default situation. <B>/etc/inetd.conf</B> contains the line (or similar):<P>

<pre>
login      stream tcp nowait root /usr/lbin/rlogind rlogind
</pre>

<b>/etc/services</B> contains the line:<P>

<pre>
login      513/tcp         # remote login
</pre>

<b>inetd</B> is running as daemon (HP-UX: <B>/usr/sbin/inetd</B>) or is configured to start up automatically on demand. To switch user without a password (<B>su</B> needs a password), user &#147;john&#148; becomes user &#147;appli&#148;. If a group of users (operators) need to log in as &#147;appli&#148; (e.g., to launch an application) without knowing the password of appli or of root, the following can be put into a script:<P>

<pre>
su [-] appli -c "&lt;script or command&gt;"
</pre>

This is in turn called by a root SUID C program (likewise the &#147;myscript&#148; in Listing 2). In that case, <B>su</B> requests no password.<P>

<B>Some Security Tips</B><P>

<ul><li>Run some regular checks in crontab. For example, list the SUID programs of the (mounted) disk space (<B>SGID : -perm -2000</B>):</ul></li></P>

<pre>
  find / -perm -4000 -exec ls -ld {} \; &gt; /me/check.$$
</pre>

or for both:<p>

<pre>
  find / \( -perm -4000 -o -perm -2000 \) -exec ls -ld {} \; &gt; \
    /me/check.$$
</pre>

Either you have to look at the list every day to detect any new program (or to count them with <B>wc -l</B>) or, much better, you keep the list of the previous day and perform a <B>diff</B>, emailing you the difference (if any).<P>

<ul><li>Write a little script to detect the 0 uids in <B>/etc/passwd</B> (3rd field) and the users without password. Trying to crack the passwords is also recommended but is out of the scope of this article.</li>
<li>Regularly look at <B>/var/adm/sulog</B> or automate the lookup (sending you the result). If any <B>sulog</B> contains lines like these:</ul></li></P>

<pre>
  SU 11/29 06:30 + tty?? root-john          (root became john)
  SU 11/29 08:38 + 2 root-bin               (root became bin)
</pre>

or if you detect lines ending with:<P>

<pre>
  ...... john-root                          (john became root)
</pre>

it means that john knows the root password!<P>
By the way, becoming root through a self-done SUID program (Listing 1) doesn't automatically create any entry in <B>sulog</B>! You can notice it by auditing the system calls, or by adding some logging lines (recommended) in the source code, like done in Listings 5 and 6.<P>
Carefully log all the users who call the program especially in the beginning. If there is any problem, you can know who called the utility, at what time and eventually from what IP address or terminal.<P>

<ul><li>Typically, only the people logged in as root can launch root processes (except using <B>su</B> but those are visible in <B>sulog</B>). If somebody logged in as &#147;john&#148; has some root processes running on his terminal device and is not in <B>sulog</B>, he may have used some hidden SUID program (or a bug in any utility) or he knows the root password.</ul></li></P>

Combining <B>who -u</B> and <B>ps -ef</B>, a regularly scheduled script can email you some result (if any).<P>

<ul><li><B> copy</B>: as root, no change. As non-root, you are the new owner and the SUID bit is dropped (security).</li>
<li><B>system(3C)</B>, <B>exec(2)</B>, <B>popen(2)</B>, and all the commands allowing you to load a shell (<B>ed</B>, <B>vi</B>, <B>pg</B>, <B>mail</B>, etc.) automatically give a prompt as root if we call them from a root SUID program. That allows a non-root user to do everything as root. For example, if, from a root SUIDed program, we call a script containing <B>/usr/bin/pg</B> to display some big lists, it allows the user to type <B>!sh</B> to load a shell and to receive a root prompt (<B>!</B>).</li></ul></p>

In this case, to avoid that, it can be enough to set export SHELL=&#148;&#148; in the script before calling the <B>pg</B> command. Other protection methods include using a restricted shell, chroot, etc.<P>

<ul><li>If you use a temporary file with sensitive data, either set correctly the permissions and the owner or use an &#147;invisible&#148; temporary file:</li></ul><P>

<pre>
  fd=open("/tmp/mytemp", O_RDWR|O_CREAT);
  unlink("/tmp/mytemp");
</pre>

The directory entry is away but the associated storage will remain untill the last file descriptor referring to the file is closed.<P>

<ul><li>Use full paths or set your PATH:</ul></li><P>

<pre>
  system("PATH=/bin:/usr/bin;vi");
  same with popen() and exec()
</pre>

Not setting (correctly) the PATH variable can lead to misuse. Likewise, check umask. As root, avoid to have umask=00 (<B>/etc/profile</B> or <B>$HOME/.profile</B>). <B>system()</B> is dangerous because some old shells don't reset IFS =&gt; possible misuse.<P>
<P>
<ul><li>Don't pass user-specified args to <B>system()</B>, <B>exec()</B>, <B>popen()</B></li>
<li>Keep the SUID (SGID) programs you write as simple as possible.</li>
<li>Never leave any SUID (SGID) program writable by others. Don't leave any compiled SUID program readable by others to avoid that someone sees the (eventual) security holes. Permission 4111 (or 2111) is the maximum acceptable.</li></ul><p>

<B>References</B><P>

<I>Unix System Security</I> by Patrick H. Wood and Stephen G. Kochan, Hayden Books, 1985.<P>
<I>Advanced Programming in the Unix Environment</I> by W. Richard Stevens, Addison-Wesley, 1992.<P>
<I>Unix Systems Advanced Administration</I> by Bruce H. Hunter &amp; Karen Bradford Hunter, Macmillan Publishing Company, 1991.<P>
<I>Unix Power Tools</I> by Jerry Peek, Tim O'Reilly and Mike Loukides, O'Reilly &amp; Associates/Bantam Book, 1993.<P>
<I>UNIX System Security</I> by David A. Curry, Addison-Wesley, 1992.<P>
<I>UNIX System Security</I> by Rik Farrow, Addison Wesley, 1991.<P>
<I>UNIX Administration Guide for System V</I> by Rebecca Thomas and Rik Farrow, Prentice Hall, 1989.<P>
<I>UNIX System V Release 4 Administration</I>, 2nd Edition, by Fiedler and Hunter, Hayden Books, 1991.<P>
<p>
<h1>About the Author</h1><p>
The author has worked as a consultant in the systems administration field (UNIX, networking, and Oracle) for more than 15 years. He can be reached at: dr000@usa.net.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>

