<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i06: Getting It to Look the Way You Want</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/jun2000.tar"><b class=codeListing>jun2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Getting It to Look the Way You Want</H1><p>
<P>Randal L. Schwartz
<P>
For the most part, Perl programmers tend to use the nice standby print operator for output, or drift occasionally into the realm of formats to quickly lay out a look for a customized report. However, the often overlooked <B>printf</B> operator provides a nice amount of custom control to get those output strings to look exactly the way you want.<P>
The <B>printf</B> operator takes a format string, and zero or more values. The format string drives the whole process. With a few exceptions, each percent <B>%</B> field in the format string matches up with one of the additional values, defining how the value will appear in the output. For example:<P>

<pre>
printf "my string %s has %d characters.\n", $str, length($str);
</pre>

Here, the <B>%s</B> field calls for a string value, provided by <B>$str</B>. Similarly, the <B>%d</B> field calls for a decimal integer, provided by the <B>length($str)</B> computation. The parameters are evaluated in a list context, so we could have also used the following code to accomplish the same output:<P>

<pre>
@output = ($str, length($str));
printf "my string %s has %d characters.\n", @output;
</pre>

This gets interesting if we don't know the length of <B>@output</B>, because we need a <B>%-field</B> for each element of <B>@output</B>, but since we set it up ourselves here, that's not a problem.<P>
Besides <B>%s</B> for string, and <B>%d</B> for decimal integer, another common format is <B>%f</B> for floating point:<P>

<pre>
printf "he has $%f in his account\n", 3.50;
</pre>

Here, the value 3.5 is printed as a floating point number <B>3.500000</B>. But why all the extra zeroes? Well, the default precision for floating point output appears to be six places after the decimal point. To narrow that down, we can add a precision control between the <B>%</B> and the <B>f</B> in the format:<P>

<pre>
printf "he has $%.2f in his account\n", 3.50;
</pre>

And that'll generate <B>3.50</B> as we expect. The <B>2</B> here means two digits after the decimal point, and that makes cents, er, uh, sense. The value is rounded to fit, so <B>3.509</B> would show up as <B>3.51</B>, whereas <B>3.502</B> shows up as <B>3.50</B>. As an extreme, we can use <B>%.0f</B> to round to the nearest whole number, and no decimal point will be used.<P>
Another common format is scientific notation, <B>%e</B>. This is handy when the number would be normally too large to represent in a few digits:<P>

<pre>
printf "2 to the 100 power is approximately %e\n", 2 ** 100;
</pre>

And this shows up as <B>1.267651e+30</B>, again defaulting to 6 digits after the decimal point unless we use a precision control like <B>%.10e</B>.<P>
But <B>%e</B> is used rarely (that I've seen). Generally, when a number of unknown magnitude or precision is displayed, most programmers fall back to the <B>%g</B> &#147;general number&#148; format. In this case, the number is formatted using whatever of <B>%d</B>, <B>%f</B>, or <B>%e</B> gives &#147;better&#148; results. If it's a nice integer, we get a nice integer format. If it's a reasonably sized floating point number, that format is used, and otherwise, we fall back on to the scientific notation.<P>

<pre>
printf "Your number is %g\n", $number;
</pre>

The precision can again be used, but in this case specifies the maximum number of significant digits, defaulting to 6 again. So, for <B>%.15g</B>, we get the best possible display for the 15 most significant digits.<P>
For strings, we get a similar &#147;precision&#148; control. If we include a precision on a string, and the string is longer, it's automatically truncated:<P>

<pre>
printf "I said %.5s!\n", "hello world";
</pre>

which prints <B>I said hello!</B>, truncating the string.<P>
Another feature of <B>printf</B> is the field-width padding. After the value for a particular field is determined, a specified minimum width can be respected, indicated by decimal integer after the percent:<P>

<pre>
printf "=%10s=\n", "hello";
</pre>

Here, the six-character string is not a full ten characters, so four spaces are added on the left. This is a minimum width, not a maximum, so if the string were longer, it'd still be included in its entirely. We can combine the precision field with the width field to get a string that is space-padded up to a size, or truncated if it exceeds the size. Take the sample code:<P>

<pre>
printf "=%5.5s=\n", substr("1234567890", 0, $_) for 0..10;
</pre>

which displays a nice pattern of:<P>

<pre>
  =     =
  =    1=
  =   12=
  =  123=
  = 1234=
  =12345=
  =12345=
  =12345=
  =12345=
  =12345=
  =12345=
</pre>

The space padding can appear on the right instead of the left by using a negative number for the minimum width:<P>

<pre>
printf &#147;=%-5.5s=\n&#148;, substr(&#147;1234567890&#148;, 0, $_) for 0..10;

  =     =
  =1    =
  =12   =
  =123  =
  =1234 =
  =12345=
  =12345=
  =12345=
  =12345=
  =12345=
  =12345=
</pre>

Additionally, numbers can be zero padded rather than space padded, using a leading <B>0</B> in front of the width:<P>

<pre>
printf "%02d:%02d:%02d %s", $h, $m, $s, $ampm;
</pre>

If the number for <B>$m</B> is less than 10 (like 7), we get a leading 0 in the output (as in <B>07</B>). This is very handy for time displays like this one.<P>
A literal <B>%</B> can be obtained by doubling it up, as in:<P>

<pre>
printf "He scored %.0f%% of the goals", 100 * $him / $total;
</pre>

Note that the often-attempted backslashing of <B>%</B> won't do. This isn't a string-interpolation escaping problem: it's a <B>printf</B>-interpretation problem.<P>
One of the less frequently used formats is the &#147;character&#148; format:<P>

<pre>
printf "the letter A is %c\n", 65;
</pre>

Here, the value of 65 is treated as an ASCII code, and turned into the uppercase A. It's not as frequently used in Perl as in C, because Perl deals with strings as first-class datatypes, rarely exposing the numeric values of the individual characters to the programmer.<P>
And then there's the &#147;programmer-type&#148; formats... <B>%h</B> for hexadecimal, <B>%o</B> for octal, and new in Perl 5.6, <B>%b</B> for binary. For example, here's one way to look at the permission bits of a file:<P>

<pre>
      printf "%s is mode %o\n", $_, 07777 &amp; (stat)[2] for @ARGV;
</pre>

But looking at the output, the values juggle all around. Ahh, time to use the minimum field width:<P>

<pre>
      printf "%30s is mode %04o\n", $_, 07777 &amp; (stat)[2] for @ARGV;
</pre>

So, that's the basics, but let's look at some practical code as well. Suppose I have a series of values in <B>@numbers</B> that I want to print in a vertical column, all with a format of <B>%15g</B>. You might think that I could simply do this:<P>

<pre>
      printf "%15g\n", @numbers; # bad
</pre>

but this won't work, because there needs to be a <B>%-field</B> for each value used from the list (as we saw earlier). Well, a simple way to fix that is to use a loop:<P>
<pre>
      printf "%15g\n", $_ for @numbers;
</pre>

But another way to do this is to replicate the format string. If we need to print three entries, we need a string like <B>%15g\n%15g\n%15g\n</B>, which we can get with <B>"%15g\n" x 3</B>. So, we need the number of elements in <B>@numbers</B> on the right of that x. Easy enough: just use the arrayname in a scalar context (which it is!):<P>

<pre>
      printf "%15g\n" x @numbers, @numbers;
</pre>

Here, <B>@numbers</B> is used in both a scalar context and a list context in the same expression: same text, different meaning. Just like when you wind up with no wind for your kite.<P>
Occasionally, you may need to have a variable width for a column. Let's say you needed that <B>15</B> from the previous example to be configurable:<P>

<pre>
      $width = 15;
      printf "%$widthg\n", $_ for @numbers; # bad
</pre>

This won't work, because Perl is looking for a variable named <B>$widthg</B>, even though you intended that as <B>$width</B> followed by <B>g</B>. But you also can't put a space in there, because the <B>printf</B> format is picky and can't understand a space. One solution is to delimit the variable name:<P>

<pre>
      $width = 15;
      printf "%${width}g\n", $_ for @numbers;
</pre>

Another is to use the <B>*</B> indirection in the list to define the number. Each <B>*</B> in a format field calls for an element to be used from the values for the numeric value that the <B>*</B> stands in for:<P>

<pre>
      $width = 15;
      printf "%*g\n", $width, $_ for @numbers;
</pre>

And there you have it. Many ways to print your numbers, strings, and anything else you come up with in your evaluations. Until next time, enjoy! <P>
<p>
<h1>About the Author</h1><p>
Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the &#147;must-have&#148; standards: <I>Programming Perl</I>, <I>Learning Perl</I>, <I>Learning Perl for Win32 Systems</I>, and <I>Effective Perl Programming</I>, as well as writing regular columns for <I>WebTechniques</I> and <I>Unix Review</I> magazines. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. Randal's desire to give back to the Perl community inspired him to help create and provide initial funding for The Perl Institute (<I><B>perl.org</B></I>). He is also a founding board member of the Perl Mongers (<I><B>pm.org</B></I>), the worldwide association of &#147;Perl users groups&#148;. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
