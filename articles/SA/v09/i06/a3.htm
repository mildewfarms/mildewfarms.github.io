<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i06: FreeBSD Firewall Tools &amp; Techniques</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/jun2000.tar"><b class=codeListing>jun2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>FreeBSD Firewall Tools &amp; Techniques</H1><p>
<P>Michael Lucas
<P>
FreeBSD includes a variety of security tools. These tools can be used to build an inexpensive, reliable firewall for your organization. The basic security measures I will cover are:<P>
<P>
&#149;  Host hardening<P>
&#149;  IP transaction control<P>
&#149;  Application proxies<P>
&#149;  Post-install maintenance<P>
<P>
The specific components you choose will depend on your security policy. Each tool controls traffic in a different way, and may or may not fit your needs. This information can also be applied to NetBSD and OpenBSD, with some minor changes.<P>
OpenBSD is a secure-by-default version of BSD. OpenBSD also incorporates some bleeding-edge security tools, however, such as encrypting swap space on the fly. If you're working on an OpenBSD system, your system is already hardened and you can skip that portion. Any BSD variant can be made secure by a competent systems administrator, but since FreeBSD is in wider use, I will focus on that.<P>
If you need a better grounding in the basics of FreeBSD, either see the FreeBSD Handbook (<B>http://www.FreeBSD.org/handbook/</B>) or my article &#147;FreeBSD for the SysV/Linux Administrator&#148; (<I>Sys Admin</I>, March 2000).<P>
<B>Who Should Build a Firewall?</b><p>Building a firewall from source code isn't something to be taken lightly. You must have a good working knowledge of TCP/IP, a good understanding of your firewall's operating system, and have current knowledge of Internet security. An excellent resource is <I>Practical UNIX &amp; Internet Security</I>, by Simon Garfinkel and Gene Spafford (O'Reilly and Associates).<P>
<B>Host Design and Hardening</b><p>The firewall host itself must be the most secure machine on your network. All your systems can be compromised if the firewall is successfully attacked. Even if an attack only crashes the firewall without compromising information, your organization will suffer. Start with high-quality components. A $400 PC might suffice for a user who doesn't mind a low mean time between failures, but this is unacceptable for a point-of-failure system.<P>
You don't need a large or fast disk, unless you're doing extensive logging. If you are logging thoroughly, you probably want to set up a separate logging host so you can write some simple CGI scripts to generate the Web-based reports that management loves. While you probably won't need a RAID array, you will need a good backup in case of a hard-disk crash. If you're an experienced BSD administrator, you might consider a flash disk.<P>
The firewall should be installed in a secure location, with tightly controlled physical access. The best proxies and filters won't do you a bit of good if the firewall host itself is compromised. Hardening the OS secures it against attack. Hardening the operating system is useful on all hosts on the exposed Internet, not just firewalls. Start with the network services. On FreeBSD 3.2 and above, you can use <B>sockstat</B> to find which network daemons are running.<P>
<PRE>
% sockstat
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS  FOREIGN ADDRESS
daemon   portmap    392    3 udp    *.111                 *.*
daemon   portmap    392    4 tcp    *.111                 *.*
root     inetd      155    4 tcp    *.21                  *.*
root     inetd      155    7 tcp    *.23                  *.*
root     inetd      155    8 tcp    *.514                 *.*
root     inetd      155    9 tcp    *.513                 *.*
root     inetd      155   10 tcp    *.79                  *.*
root     inetd      155   11 udp    *.512                 *.*
root     inetd      155   12 udp    *.518                 *.*
%
</pre>

This provides a list of all open network services, their associated program, their PID, file descriptors, the address they're listening on, and the address of any remote connection. Each daemon listening on a socket is a potential attack point. On a firewall, the sockets must all be closed.<P>
In a default FreeBSD installation, the biggest source of listening daemons is <B>inetd</B>. <B>portmap</B>, <B>syslogd</B>, and Sendmail are also open by default. You can disable all of these with the following settings in <B>/etc/rc.conf</B>:<P>

<PRE>
inetd_enable="NO"
syslogd_flags="-ss"
portmap_enable="NO"
sendmail_enable="NO"
</pre>

The changes will take effect the next time you reboot. Run <B>sockstat</B> again and check for listening services. You should see no sockets open. Now that you have a network-secure machine, you can open a few carefully chosen proxies of your choice.<P>
On a non-firewall machine, you can secure <B>inetd</B>, <B>portmap</B>, Sendmail, and most other daemons through <B>tcp_wrappers</B> (default in 3.x and above). Similarly, <B>syslogd</B>'s <B>-a</B> flag allows you to specify which hosts may connect to the <B>syslogd</B> socket.<P>
You can also harden your system at the filesystem layer. Once your firewall is complete, you can edit <B>/etc/fstab</B> to mount <B>/</B> and <B>/usr</B> read-only. Similarly, you can mount <B>/var</B> and <B>/tmp noexec</B>, so anything on them cannot be executed. A typical <B>/etc/fstab</B> might look like:<P>

<PRE>
# Device         Mountpoint   FStype  Options        Dump    Pass#
/dev/wd0s1b      none         swap    sw              0       0
/dev/wd0s1a      /            ufs     rw              1       1
/dev/wd0s1f      /usr         ufs     rw              2       2
/dev/wd0s1e      /var         ufs     rw              2       2
/dev/wcd0c       /cdrom       cd9660  ro,noauto       0       0
proc             /proc        procfs  rw              0       0
/dev/wd0s1b      /tmp         mfs     rw              0       0
/dev/fd0         /mnt         ufs     rw,nodev,noauto 0       0
</pre>

To mount a filesystem read-only, change the <B>rw</B> option to <B>ro</B>. To mount it <B>noexec</B>, add <B>,noexec</B> after <B>rw</B> under options.<P>
Mounting <B>/usr</B> read-only isn't appropriate in some situations, especially while a firewall is going through its initial testing. The main purpose behind mounting a filesystem read-only is to prevent file alteration, and you'll probably need to alter files repeatedly as you tune the system. Effects similar to a read-only system can be achieved with file flags.<P>
The flags we need to worry most about are <B>schg</B> (system immutable), <B>sappnd</B> (system append-only), and <B>sunlnk</B> (system undeletable). See man (1) <B>chflags</B> for a complete list of file flags. A file marked <B>schg</B> cannot be changed, even by the superuser. Similarly, a <B>sappnd</B> file cannot be truncated, and a <B>sunlnk</B> file cannot be deleted. You should protect any critical binaries and log files on a read-write filesystem with the appropriate flags.<P>
You set a system flag with:<P>

<pre>
% chflags schg &lt;filename&gt;
</pre>

You can set an entire directory hierarchy immutable with the <B>-R</B> option. On your production firewall, you might want to immute the entire <B>/bin</B>, <B>/sbin</B>, <B>/usr/bin</B>, <B>/usr/sbin</B>, <B>/lib</B>, and <B>/usr/lib</B> directories, and parts of others.<P>
For a flag to take effect, the system must be running in &#147;secure mode.&#148; FreeBSD has a default securelevel of -1, meaning that none of the filesystem security controls are irreversible. On your firewall host, you will want to use at least securelevel 1, and probably securelevel 3 when the system is completely tuned.<P>
Securelevels have the following effects at each level:<P>
<P>
-1 Permanently insecure mode -- Any security changes made can be overridden at the command line while the system is in multi-user mode.<P>
0 Insecure mode -- Immutable and append-only flags can be turned off, and all devices may be read or written to as their permissions allow.<P>
1 Secure mode -- Immutable and append-only flags cannot be turned off, and disks for mounted filesystems, <B>/dev/mem</B>, and <B>/dev/kmem</B> cannot be opened for writing.<P>
2 Highly secure mode -- As securelevel 1, plus unmounted disks cannot be opened for writing (except by <B>mount</B>(2)).<P>
3 Network secure mode -- As securelevel 2, plus IPFW, IPFilter, and dummynet configurations cannot be altered.<P>
Use <B>sysctl</B> to set a running system's securelevel:<P>

<pre>
% sysctl -w kern.securelevel=3
</pre>

To set securelevel at boot time, do the following <B>/etc/rc.conf</B>:<P>
<pre>
kern_securelevel="3"
</pre>

Securelevel can be raised on a running machine, but cannot be lowered without dropping to single-user mode. If you're using IPFilter to control traffic, you don't want to set the securelevel in <B>/etc/rc.conf</B>. I'll show later where to do that.<P>
Remember, <B>newsyslog</B> cannot rotate append-only logfiles; you must drop to single-user mode to perform that maintenance. If you are logging large amounts of network traffic, you're better off logging to a separate host that can rotate its logs more easily. The best defense your organization can have is regularly examined logs. Despite all this, however, your system might still be compromised. A tool like tripwire (<B>/usr/ports/security/tripwire</B>) will help you detect when this happens. Tripwire has been documented in extensive detail elsewhere, so I won't cover it here.<P>
<B>IP Transaction Control</b><p>One of the core functions of a firewall is to control who can make what sorts of connections through it. FreeBSD includes two sets of software for this purpose: IPFW and IPFilter. IPFW is a classic FreeBSD utility, and is available on all open-source BSD platforms. IPFilter provides stateless packet filtering, and has been tested and improved for several years now.<P>
IPFilter is a newer tool that performs stateful inspection of all packets. While IPFilter is included with FreeBSD, it is maintained as a separate project. The version of IPFilter in FreeBSD might or might not be the very latest. You can find full details on IPFilter at <B>http://coombs.anu.edu.au/~avalon</B>.<P>
Stateful inspection was recently integrated into IPFW. This is only available on FreeBSD 4.x, however. Many people are still on FreeBSD 3.x (or even the unsupported 2.x), so I'll use IPFilter in my examples. IPFW has a similar configuration, and many people use it very effectively: see man (8) <B>ipfw</B> for details on use.<P>
A stateless filter simply looks at each individual packet. If the rules allow that type of packet, it is passed. The drawback with stateless filters is that it is possible to spoof IPs that appear to be part of an existing connection. The firewall doesn't track existing connections, and doesn't realize that the connection was never requested.<P>
Stateful inspection maintains a table of existing connections. If a packet arrives claiming to be part of an established connection, but no corresponding connection appears in the connection state table, the packet is dropped. Stateful inspection provides more thorough control of your connections than a stateless filter.<P>
<B>Kernel Configuration</b><p>For IPFilter, add the following to your kernel.<P>

<pre>
options         IPFILTER          #kernel ipfilter support
</pre>

You might also want:<P>

<pre>
options         IPFILTER_LOG      #ipfilter logging
options         IPFILTER_LKM      #kernel support for ip_fil.o LKM
</pre>

The <B>IPFILTER_LKM</B> option is experimental. For a production firewall, you probably don't want to use it. Since the machine will be providing continuous protection, you don't want to be able to unload the firewall module.<P>
<B>Filter Configuration</b><p>IPFilter uses a very powerful descriptive language for its rules. For a complete description, see the file <B>/usr/src/contrib/ipfilter/BNF</B>. This contains many things you'll probably never use, but the basic syntax is very simple. Let's look at an example:<P>

<pre>
block in log quick from any to any with ipopts
</pre>

The format is simple: block or pass, in or out, options, from where, to where, and other options. The most common options are <B>log</B>, <B>quick</B>, <B>proto</B>, and <B>on</B>. If you want to log the packet, use the <B>log</B> option. The <B>quick</B> option aborts all further rule processing. In our example rule, if a packet has IP options we don't need to know any more; we reject it. The <B>proto</B> option allows you to choose which network protocols the rule applies to, either by number or name as shown in <B>/etc/protocols</B>.<P>
The <B>on</B> option allows you to specify an interface. If you wanted to stop packets with IP options on the ed0 interface, you could specify it like:<P>

<pre>
block in log quick on ed0 from any to any with ipopts
</pre>

The <B>from</B> and <B>to</B> keywords are the source and destination address of the packet. You can follow them with a few more options that will control ICMP packets, stateful inspection, and other packet details I'll cover later.<P>
The script <B>mkfilters</B> will use your machine's current configuration to build a set of initial IPFilter rules. These rules will prevent basic spoofing attacks, remote attacks to loopback addresses, absurdly short packets, and similarly well-known chicanery. If <B>mkfilters</B> isn't in your <B>$PATH</B>, look under <B>/usr/src/contrib/ipfilter</B>. You will also find the IPFilter source code, original documentation, and examples here.<P>
My example host has an ISDN link to the outside world, and an Ethernet card on the inside. tun0 is the outside link, and ed0 is the inside. I have one outside IP address; for the purpose of this example, let's say it's 209.69.80.8. My inside NIC has an IP of 192.168.66.1.<P>
The <B>mkfilter</B> script gives me the following:<P>

<pre>
% mkfilters &gt; /etc/ipf.conf
% cat /etc/ipf.conf
#
# The following routes should be configured, if not already:
#
# route add 192.168.66.1 localhost 0
#
block in log quick from any to any with ipopts
block in log quick proto tcp from any to any with short
pass out on ed0 all head 150
block out from 127.0.0.0/8 to any group 150
block out from any to 127.0.0.0/8 group 150
block out from any to 192.168.66.1/32 group 150
pass in on ed0 all head 100
block in from 127.0.0.0/8 to any group 100
block in from 192.168.66.1/32 to any group 100
block in from 209.69.80.8/0xffffff00 to any group 100
pass out on tun0 all head 350
block out from 127.0.0.0/8 to any group 350
block out from any to 127.0.0.0/8 group 350
block out from any to 209.69.80.8/32 group 350
pass in on tun0 all head 300
block in from 127.0.0.0/8 to any group 300
block in from 209.69.80.8/32 to any group 300
block in from 192.168.66.1/0xffffff00 to any group 300
%
</pre>

Rules can be arranged in groups. This improves performance; rather than checking every packet against every rule, you can follow different paths through the rules based on packet characteristics. The fewer rules a packet must go through before being approved or rejected, the faster your firewall will run. <B>mkfilters</B> makes a simple group structure, based on the direction a packet traverses an interface.<P>
In this example, group 100 controls access from the inside network to the firewall and outside network. Group 300 controls access from the outside world to the firewall and inside. Group 150 controls access from the firewall to the inside network, and group 350 controls access from the firewall out. All packets are checked against every rule without a &#147;group&#148; or &#147;head&#148; statement.<P>
&#147;Head&#148; statements are the beginning of rule groups. If a packet matches a &#147;head&#148; statement, it is checked against all members of that group. If the packet doesn't match the head statement, it isn't checked against members of that group. For example, take a packet coming in on tun0. Like all packets, it will be checked against the rules:<P>

<pre>
block in log quick from any to any with ipopts
block in log quick proto tcp from any to any with short
</pre>

The packet will hit this rule:<P>

<pre>
pass in on tun0 all head 300
</pre>

and switch into group 300. It will not be affected by rules in any other group.<P>

<pre>
block in from 127.0.0.0/8 to any group 300
block in from 192.168.1.200/32 to any group 300
</pre>

These rules stop packets from loopback addresses, as well as packets from outside that appear to have an address on the local machine. Note that they no longer include <B>on tun0</B>; the head rule covers that. These rules should be used even if you have a permissive firewall; they block things that can only result from misconfiguration or malice. This configuration is useful even on a non-firewall, single-interface host on the exposed Internet.<P>
Now that you have a basic setup, you can begin restricting traffic. If you have a restrictive security policy, you'll want to add a final rule like this:<P>
<pre>
block from any to any
</pre>

This will stop any traffic coming into your system. To allow access, you open holes with particular rules. Start with access from the inside network to the outside world. We'll start by assuming no local proxies; redirection will be covered later.<P>
First, find the port number of all services you want to offer. Check <B>/etc/services</B> if you're not sure. Let's assume you want to offer outbound HTTP and pop3 service. To keep our rules short, branch new connections into a new group:<P>

<pre>
block in log proto tcp all flags S/SA head 101 group 100
</pre>

Any packets with the SYN flag set will be blocked and diverted into group 101. (The SYN flag is set to signal the beginning of a new TCP connection.) This rule catches all requests for new connections. Then, we can follow up with:<P>

<pre>
pass in quick proto tcp from any to any port \
   = www keep state 
  group 201<P>
pass in quick proto tcp from any to any port \
   = pop3 keep state 
  group 201<P>
</pre>

The &#147;keep state&#148; keyword adds in the rules necessary for return packets to be accepted. You don't need to add any rules on the exterior interface to support these outgoing connections. When the packet hits the &#147;quick&#148; option, it is immediately passed on. Adding new protocols to your access list, both inbound and outbound, is this simple.<P>
Many organizations aren't interested in controlling outbound traffic, but want to control who may connect in. In this case, you can use rules like:<P>

<pre>
pass in quick proto tcp from 192.168.66.0/24 \
   to any keep state 
  group 201
pass in quick proto udp from 192.168.66.0/24 \
   to any keep state 
  group 201
</pre>

If you want to strictly control who may access an outside service, you can specify internal IP addresses in a rule:<P>

<pre>
pass in quick proto tcp from 192.168.66.12 \
   to any port = www keep 
  state group 201
</pre>

Once your configuration file is set, you can start IPFilter with the command:<P>

<pre>
% ipf -f /etc/ipf.conf
</pre

If you need to change the rules, you can flush out the old rules and reread the configuration file with:<P>

<pre>
% ipf -F o &amp;&amp; ipf -f /etc/ipf.conf
</pre>

It's also possible to feed rules into your running configuration at the command line. If you're building your first firewall, however, you will want to be certain that your configuration file matches the settings that actually work for you. See man (1) <B>ipf</B> for details. Set up rules to allow incoming connections in the same way. Your internal network is probably on non-routable addresses, however, so you'll also have to specify redirection in your address translation.<P>
<B>Address Translation</b><p>Most organizations don't have enough routable IP addresses to assign one to every host on their internal network. IPFilter includes a network address translation utility, <B>ipnat</B>. The <B>ipnat</B> configuration for our example above is very simple:<P>

<pre>
map tun0 192.168.66.0/24 -&gt; 209.69.80.8/32 \
   portmap tcp/udp 10000:60000
map tun0 192.168.66.0/24 -&gt; 209.69.80.8/32
</pre>

The syntax is very simple: the map keyword, the inside IP address range, and the outside IP address range. The <B>portmap</B> keyword allows the firewall to change source ports for connection requests. Without this, if two inside hosts were to make a connection request from the same port, the NAT would become confused. The 10000:60000 is the range of port numbers to be used; 50,000 is generally enough for most organizations' outgoing requests on a single class C block. You can also map blocks of internal addresses to an assigned external IP address. See <B>/usr/src/contrib/ipfilter/rules/BASIC.NAT</B> for some examples.<P>
Combining address translation with packet filters can be confusing. Remember that incoming packets are translated before the packet is checked against the access list. Outbound packets are checked against the filter before being translated. You will want to write your rules appropriately; use the internal address as configured, not as translated. Put your configuration in <B>/etc/ipnat.conf</B>. You can then start <B>ipnat</B> with:<P>

<pre>
% ipnat -f /etc/ipnat.conf
</pre>

As with <B>ipf</B>, if you want to flush the old rules and install updated ones, you simply do:<P>

<pre>
% ipnat -C &amp;&amp; ipnat -f /etc/ipnat.conf
</pre>

<b>Service Redirection</b>
If you're using NAT, you'll want legitimate service requests that reach the outside of your firewall to be redirected to the proper port on an internal server. This can also support transparent proxies; outgoing requests on a particular port number can be redirected to a local proxy server.<P>
To do this with <B>ipnat</B>, use the <B>rdr</B> keyword. Let's continue our example above by pointing mail requests to our outside IP to an inside IP: 192.168.66.5. Add the following to <B>/etc/ipnat.conf</B>:<P>
<PRE>
rdr tun0 209.69.80.8/0 port 25 -&gt; 192.168.66.5
</pre>
<b>Transparent Proxies</b>
<b>ftp</B> was written well before anyone thought firewalls or NAT would be necessity. Allowing naked <B>ftp</B> to pass through a non-NAT firewall requires fairly hideous rules in <B>/etc/ipf.conf</B>:<P>

<pre>
pass in quick proto tcp from any to any port \
   = ftp keep state 
  group 101
pass in quick proto tcp from any to any port \
   = ftp-data keep 
  state group 101
pass in quick proto tcp from any port = \
   ftp-data to any port &gt; 
  1023 keep state group 301
</pre>

The third rule allows the notorious &#147;<B>ftp</B> backchannel&#148; connection. Anyone can talk to any port above 1023 if their connection originates on port 20. This is bad; any cracker worthy of the name can make a connection originate from any port they like, and portscanning from port 20 is not uncommon. You can avoid the <B>ftp</B> backchannel by requiring your users to use passive <B>ftp</B>. You can also use IPFilter's built-in <B>ftp</B> proxy by adding this to <B>/etc/ipnat.conf</B>:<P>

<pre>
rdr ed0 0.0.0.0/0 port ftp -&gt; 127.0.0.1 port ftp
</pre>

This is an excellent example of a transparent proxy. The user doesn't need to change anything on his desktop; you control where service requests go, and you can change proxies as you desire. You can use similar rules to force traffic through other proxy servers. If you're running the TIS http-gw on port 80, for example, this rule will direct all requests for an outside http-port connection to the proxy:<P>

<pre>
rdr ed0 0.0.0.0/0 port 80 -&gt; 127.0.0.1 port 80
</pre>

Similar configurations can be used for any protocol to any proxy.<P>
<B>Packet Logging</b><p>The option <B>log</B> in an IPFilter rule requires <B>ipmon</B>, a separate program dedicated to logging <B>ipf</B> traffic. With the <B>-s</B> option, <B>ipmon</B> can send messages to <B>syslogd</B>, so you can set up a separate log host in standard UNIX fashion. IPFilter logs under the LOCAL0 facility.<P>
<B>Starting IPFilter at Boot Time</b><p>A simple shell script will start these at boot time for you. Simply write a brief shell script and put it in <B>/usr/local/etc/rc.d</B>.<P>

<pre>
% cat /usr/local/etc/rc.d/firewall.sh
#!/bin/sh

echo 'Starting firewall'
/sbin/ipf -f /etc/ipf.conf                #start protections
/sbin/ipnat -f /etc/ipnat.conf            #start address translation
/sbin/sysctl -w net.inet.ip.forwarding=1  #start packet forwarding
/sbin/sysctl -w kern.securelevel=3        #set securelevel
/usr/sbin/ipmon -s                        #start logging
echo 'firewall started'
%
</pre>

Set your script mode 500, owned by root. The script name must end in <B>.sh</B> for the system loader to run it. You probably also want to protect it with <B>chflags schg /usr/local/etc/rc.d/firewall.sh</B>. It's also entirely possible to edit <B>/etc/rc</B> to run these commands. If you have to upgrade your firewall OS, however, you'll have to maintain these changes independently. See my article &#147;Maintaining Patch Levels on Open-Source BSDs&#148; (<I>Sys Admin</I>, September 1999).<P>
<B>Proxy Software</b><p>Proxy software makes network requests for a client, and returns the results to the client. Proxies can alter requests and perform access control. This article is too short to give full details on all proxy software available; this listing only gives a rough overview and pointers to more information. For an up-to-date list, check the search engine at <B>http://www.freebsd.org/search/</B>. Be sure to check all ports categories for proxies.<P>
Some of the most well-known proxy packages include:<P>
<P>
DeleGate (<B>/usr/ports/security/delegate</B>) -- This arbitrary TCP/UDP port redirection package is so full of buffer overruns that every BSD security team discourages its use in the strongest possible terms; it's mentioned here only as a warning.<P>
FWTK (<B>/usr/ports/security/fwtk</B>) -- The TIS FireWall Tool Kit is a standard, well-tested proxy toolkit. It includes proxies for <B>telnet</B>, <B>ftp</B>, <B>http</B>, <B>smtp</B>, and X Window. These proxies are highly configurable and flexible. FWTK can be integrated with other proxies, such as Squid. The Web proxy (<B>http-gw</B>) can be configured to block certain types of content, such as JavaScript or ActiveX. Also, they do not require packet forwarding. If all your traffic runs through FWTK proxies, then you don't even require packet forwarding, further heightening security. See <B>http://www.fwtk.org</B> for more information. Note that the licensing on FWTK is rather restrictive; you cannot resell FWTK, or make a business out of installing FWTK.<P>
JunkBuster (<B>/usr/ports/www/ijb</B>) -- JunkBuster can control which cookies are allowed to pass, and to where. This can be tedious to maintain in a large organization; but if cookie security is a concern, then this is your answer. JunkBuster can also strip banner ads from Web pages, making them load faster. See <B>http://www.junkbuster.com</B> for details.<P>
PoPToP (<B>/usr/ports/net/poptop</B>) -- This is a Microsoft PPTP-aware VPN daemon, useful for making secure connections between your remote users and the internal network. See <B>http://www.moretonbay.com/vpn/help.html</B> for more information.<P>
raproxy (<B>/usr/ports/audio/raproxy</B>) -- The reference RealAudio proxy provided by RealNetworks. This proxy is designed to be integrated with TIS' FireWall Tool Kit. For details, see <B>http://docs.real.com/proxykit/</B>.<P>
rtsp-proxy-1.0 (<B>/usr/ports/net/rtsp_proxy</B>) -- This proxy will allow you to pass Apple's streaming Quicktime through your NAT firewall. See <B>http://www.apple.com/ \<BR>
quicktime/resources/qt4/us/proxy/</B> for more information.<P>
SKIP (<B>/usr/ports/security/skip</B>) -- Sun's Secure Connectionless Internet Protocol. Provides encryption of all IP services, without client changes. Useful between BSD and Sun boxes, or with Windows boxes with add-on client. See <B>http://www.skip-vpn.org</B> for more information.<P>
Squid (<B>/usr/ports/www/squid23</B>) -- Squid is a caching Web proxy. It provides detailed logging and high performance. Squid is frequently updated; check the <B>/usr/ports/www</B> directory for recent versions. See <B>http://www.squid-cache.org</B> for details.<P>
<P>
By combining these proxies as your security needs dictate, you can provide the exact level of security you need.<P>
<B>Post-Install Maintenance</b><p>Once you've installed and debugged your firewall, you'll want to inspect it periodically to be certain that it still meets your needs. FreeBSD has a variety of security tools to help you confirm this.<P>
Any number of security-related sites carry auditing tools and security scanners. Some particularly useful ones already ported to FreeBSD include:<P>
<P>
&#149; <B> firewalk</B> (<B>/usr/ports/security/firewalk</B>)<P>
&#149; <B> nmap</B> (<B>/usr/ports/security/nmap</B>)<P>
&#149; <B> strobe</B> (<B>/usr/ports/security/strobe</B>)<P>
<P>
The most useful scanner I've seen is Nessus (<B>/usr/ports/security/nessus</B>). Nessus is fast, secure, highly configurable, and actively maintained. Nessus is especially useful in demonstrating the need for a firewall; once installed, it's easy to use. The reports generated are simple enough that anyone can understand the importance of any discovered holes. Check <B>http://www.nessus.org</B> for Nessus information. If you find security problems, adjust your firewall or your server software appropriately.<P>
<B>Conclusion</b><p>Building a firewall is not a task for the inexperienced systems administrator. It can be rewarding, however, and the results are just as effective, or more so, than commercial firewalls. The various BSDs have powerful firewalling features. Firewall techniques are also useful in protecting isolated hosts on the Internet. Since BSD hosts power some of the most high-traffic sites, this is a vital consideration. The firewall administrator has a wide choice of tools to enforce the organization's security policy. <P>
<p>
<h1>About the Author</h1><p>
Michael Lucas is a networking and FreeBSD consultant working for the Great Lakes Technologies Group. He lives in Detroit, Michigan with his wife Liz, four gerbils, and assorted fish. He can be reached at: mwlucas@exceptionet.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
