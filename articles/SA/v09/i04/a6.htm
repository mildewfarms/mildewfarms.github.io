<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i04: Automating Single-User Backups with Tape Verification</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2000/apr2000.tar"><b class=codeListing>apr2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Automating Single-User Backups with Tape Verification</H1><p>
<P>Alan C. Davis
<P>
The benefits of a complete, verified system and application backup have been acknowledged by systems administrators for many years. This task is one of the fundamental jobs that every sysadmin learns and is often one of the most important and neglected of any item in the sysadmin's job description. In almost four years working on the UNIX support hotline for a major UNIX OS and hardware manufacturer too many times the answer to &#147;Do you have a current backup?&#148; was an abashed &#147;No&#148;. This article will describe one method of performing unattended backups while the system is in single-user mode and includes a procedure for verifying the readability of the backup. The scripts described use only commands found in the base operating system distribution and aren't dependent on third-party or share/freeware packages. This method is useful for systems that have the luxury of a period of time when the system may be offline in which to perform the backup and where the data to be backed up will fit on the number of tapes available online.<P>

<B>The Problem</B><P>

Backups are time-consuming, tedious, and a necessary part of UNIX systems administration. Depending upon the system hardware used and the amount of data, a backup may take anywhere from minutes to several hours. Offline backups must generally be run during times of low use -- typically nights and weekends. The manual tasks of shutting the system down to single-user mode, beginning the backup, and then waiting for the backup to finish are usually done by less skilled operators or junior administrators. In many businesses, the costs of this additional staff is prohibitive and is just one of the reasons given for inadequate backup procedures.<P>

<B>Automation is the Answer</B><P>

The solution that will be described here combines several scripts to automate the numerous details of robustly executing single-user backups and verifying the readability of the backups when they are completed (Figure 1). The most important hardware requirement is that adequate tape capacity be available to store the complete backup. The scripts presented assume that a single tape is sufficient. The additional procedures to manage a multi-tape loader would be relatively easy to add, but the choice of loader and controlling software would determine the exact commands used.<P>
There are a number of steps necessary to ensure a robust backup solution:<P>

<UL><LI>Verify that a tape is available and can be written to</LI>
<LI>Ensure that data already on the tape can be overwritten</LI>
<LI>Shutdown all applications</LI>
<LI>Create flag file to indicate backup required</LI>
<LI>Bring the system to single-user mode</LI>
<LI>Execute the backup commands for filesystems in a known sequence</LI>
<LI>Document the contents of the backup</LI>
<LI>Bring the system back online</LI>
<LI>Notify the appropriate sysadmin if any steps fail</LI>
<LI>Log successes and failures</LI>
<LI>Verify the data written to tape immediately</LI>
<LI>Unload the tape when verification is complete</LI></ul></p>

The scripts described here were written for Compaq's Tru64 UNIX v4.0 and above. File and command locations may vary with other UNIX variants, but the scripts should be easily modified to work correctly. In many UNIX variants, the <B>mt</B> command is the primary method of controlling a tape drive. The return code from the <B>mt online</B> command is used to verify that a tape is loaded and is writable. In the scripts, the command for loading a tape, unloading a tape, and setting tapes on and offline are all defined as environment variables. These are then called as needed making it easy to adapt to different UNIX variants or to add loader capabilities. Not all tape drives implement the full set of control commands necessary to load and unload the tape.<P>

<B>Check the Tape</B><P>

Once the tape is online, it must be read to determine whether any data already on it can be overwritten. The <B>tape_check</B> script calls the <B>dump</B> command, or whatever backup command is defined, to read the first <B>dump</B> file on the tape and determine whether it may be overwritten. The check used in this version is a simple aging. If there is a backup file already on the tape, and it's more than 72 hours old, it may be overwritten. If the file is less than the defined age, the backup is aborted and a message is sent via pager to the sysadmin. A more elaborate scheme using ANSI labels, rotating schedules, or staggered incremental backups could be devised and implemented as the <B>tape_check</B> script. Command-line switches will override the 72-hour check.<P>

<B>Stop Applications</B><P>

The process of shutting down any applications running on the system is beyond the scope of this article, however there are a few issues that should be considered when choosing a shutdown method. The default <B>shutdown</B> command of Tru64 UNIX prior to version 5.0 doesn't service any application's special requirements for a graceful exit. It will kill processes without executing the scripts used to cleanly shut down the individual system services. The <B>init</B> command does execute the requisite kill scripts, however, it doesn't have a <B>reboot</B> option. As a workaround, the script that starts the backup process and that is called via cron is used to run any specific kill scripts to ensure an orderly application shutdown. This also allows any failure during the shutdown to be logged, and proper notification made while leaving the system up for the sysadmin to take any recovery steps necessary and to cleanly shut down the system.<P>

<B>Create Flag File</B><P>

The <B>run_cold_backup</B> script creates a file on the root partition, <B>/local/.autobackup</B> that serves as a flag that after boot into single-user mode the backup script is to be executed.<P>
The last step of this phase is to finally run the <B>shutdown -r now</B> command to reboot the server after all the applications have been stopped.<P>

<B>System Boot</B><P>

As the system boots, one of the first scripts executed is <B>/sbin/bcheckrc</B>. This script checks and mounts all the local filesystems. A line is added to <B>bcheckrc</B> to also execute the script <B>/local/autobackup</B>. The autobackup script logs the start of the backup, executes the backup script and when the backup completes logs the end of the backup. The <B>/local/.autobackup</B> file is copied to <B>/local/.verify_backup</B> to serve as the indicator that the tape in the drive should be verified against the last backup log file. The last command removes the <B>/local/.autobackup</B> file.<P>

<B>Backup</B><P>

The backup script does the actual work of the backup. It again verifies that a tape is available. It also creates a log file using a list of filesystems and other information specified in a <B>site.rc</B> file and derived from commands such as &#147;date&#148;. The <B>vdump</B> command is then executed on each filesystem in the list in turn, with a full list of all files in the backup redirected to the log file (Figure 2).<P>

<B>Verify Backup Integrity</B><P>

Once the backup is complete the system continues to boot to multi-user mode and initializes the network. A script placed in the <B>rc3.d</B> directory checks for the <B>/local/.verify_backup</B> file, and, if it's found, begins verifying the backup. The last real file from each fileset is selected from the backup log file listing and the <B>tmp</B> directory is checked to ensure enough space is available to restore that file. The selected file is restored to the <B>/tmp</B> directory and a checksum is calculated for both the original file and the restored version. The checksums are compared and any difference in checksum or a failure to restore the file generates a notification to the sysadmin.<P>
In order to restore the last file from each fileset, the <B>vrestore</B> command must read each file in the fileset to find the one specified. This method ensures that the full tape is readable.<P>


<B>Conclusion</B><P>

This set of scripts enables a sysadmin to implement an unattended single-user backup system in a robust, easily maintained manner. The scripts as described have been in daily use for over 12 months on several systems with no failures. The only operator intervention that is required is to change the tapes daily and monitor the email and log files.<P>

<h1>About the Author</h1><p>
Alan Davis is a UNIX systems administrator with over 12 years of experience in many different flavors on UNIX. His interests lie in the areas of process automation and administrative tools. He may be reached via email at: Davis_Consultants@att.net.

<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>






