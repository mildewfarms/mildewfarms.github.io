<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i04: Rainy Day Template Fun</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/apr2000.tar"><b class=codeListing>apr2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Rainy Day Template Fun</H1><p>
<P>Randal L. Schwartz
<P>
I grew up (and still reside) in Oregon, well known for having rain nearly all parts of the year. However, the months around April seem to have been particularly wet, and as a child, I'd often end up doing &#147;indoor&#148; activities during the heaviest rainy days.<P>
One of the things I remember doing was playing a game (whose name I won't mention so as not to infringe on any trademark) that consisted of two people taking turns asking each other for various items, like &#147;a noun&#148; or &#147;a verb ending in -ed&#148;. Besides teaching us the parts of speech, it also delighted us to know that we had constructed a story by filling in the blanks of a complete story in an unexpected way. Of course, as we got more creative with the answers, we got better stories.<P>
Now, what does this have to do with Perl? Well, I often see questions online about &#147;how do I create a fill-in-the-blank template&#148;? For general applications, the answer is &#147;go see one of the templating solutions in the CPAN&#148;. That is, go to <B>http://search.cpan.org</B> and enter template in the search box on the left. You'll see a dozen or two different ways to take advantage of existing code.<P>
For simple problems, though, an ad hoc approach may be best. Our story creator software is simple enough that we can code it from scratch, also to show there's nothing magic about the approach. Let's start with a simple template:<P>
The [person] went to the [place].<P>
How do we turn [person] into the question &#147;give me a person&#148; and put the response back in the string? Well, something like this will work:<P>

<pre>
$_ = "The [person] went to the [place].";
s/\[(.*?)\]/&amp;process($1)/eg;
sub process {
  print "give me a $_[0]: ";
  chomp(my $response = &lt;STDIN&gt;);
  $response;
}
print;
</pre>

What we're doing here is going through the value of <B>$_</B> with the global substitution. Each time a bracketed item is found, we'll evaluate the right side of the substitution <B>as Perl code</B>. In this case, it'll be an invocation of the process subroutine, passing <B>$1</B> as the parameter. The subroutine takes the input parameter to create a prompt, then reads my response from the result. The return value of the subroutine becomes the replacement value for the bracketed item. Note the <B>/eg</B> on the end of the substitution: for this, we get the right side as <B>evaluated</B> code, with the substitution executed <B>globally</B>.<P>
To get a little more flexible, we might also allow multiple words, including newlines, inside the brackets. That'd look like this:<P>

<pre>
{ local $/; $_ = &lt;DATA&gt; }
s/\[(.*?)\]/&amp;process($1)/egs;
sub process {
  my $prompt = shift;
  $prompt =~ s/\s+/ /g;
  print "give me a $prompt: ";
  chomp(my $response = &lt;STDIN&gt;);
  $response;
}
print;
__END__
The [sad person] went to the [fun
place to go].
</pre>

Now, we'll get the prompts like so:<P>

<pre>
give me a sad person: ____
give me a fun place to go: ____
</pre>

And the right values will be filled in appropriately. The addition of the <B>s</B> suffix to the substitution operator enables <B>.</B> to match an embedded newline. Inside the subroutine, we crunch all embedded newlines into single spaces. Also note that we're fetching the template from the <B>DATA</B> filehandle, which begins at the end of the program immediately after the <B>__END__</B> marker.<P>
Now, let's look at a further complication. Suppose I want to ask the questions in an order different from how they'll be used in the story. That makes it more fun, because having an unexpected response to the ordering is often an interesting surprise.<P>
To do this, I'll need a way of asking a prompt, but storing the value instead of immediately substituting it. Let's introduce a variable syntax, like so:<P>

<pre>
[person=person]
[place1=nearby place]
[place2=far away place]
[$person] went to [$place1], and then to [$place2].
[$person] was [emotion after a long trip].
</pre>

Here, I'm expecting that we'll ask for a person, two places, then do some substitution, then ask for an emotion and substitute that directly. Note that the person is used twice.<P>
We'll say that a variable has to be a Perl identifier (alphas, numerics, and underscores), conveniently matched by <B>\w</B> in a regular expression. So, brackets can now contain three things, and the processing subroutine has to distinguish three cases: (1) a simple prompt, to be substituted, (2) a variable to be prompted for, and remembered, or (3) a reference to a previously established variable.<P>
We'll hold the variable values in a hash called <B>%value</B>. So, <B>process</B> will look like this:<P>

<pre>
sub process {
  my $thing = shift;
  if ($thing =~ /^\$(\w+)$/) { # variable reference
    return $value{$1};
  }
</pre>

So far, we'll take the value between the brackets (coming in as <B>$thing</B>), and if it's a dollar followed by a variable name, then we'll return its current value. Next, we fix the embedded newlines, in case the starting bracket is on a different line from the ending bracket:<P>

<pre>
  $thing =~ s/\s+/ /g;  # handle wrapping
</pre>

And then we'll handle the &#147;defining&#148; case:<P>

<pre>
  my $variable;
  $variable = $1 if $thing =~ s/^(\w+)=//; <BR>
    # may be undef
</pre>

At this point, <B>$variable</B> is either undef or the name of a variable to define and remember. What's left in <B>$thing</B> is now the prompt to issue, and that comes next:<P>

<pre>
  print "Give me a", $thing =~ /^[aeiou]/i ? 
    "n " : " ", $thing, ": ";
</pre>

Note the extra logic here to make it &#147;an apple&#148; or &#147;a carrot&#148; when given &#147;apple&#148; and &#147;carrot&#148;. Finally, let's finish up the prompting:<P>

<pre>
  chomp(my $response = &lt;STDIN&gt;);
  if (defined $variable) {
    $value{$variable} = $response;
    return "";
  }
  return $response;
}
</pre>

Note that if it's a bracketed item defining a variable, no value is returned. If you'd rather make a definition also be an invocation automatically, you can leave out the <B>return ""</B>. Either way, it's nice.<P>
So, we've now got some nice code, and it works against our example earlier. If you run this code, however, you may notice that there are some extra newlines in the output. Why is this so? Well, the definition lines:<P>

<pre>
[person=person]
[place1=nearby place]
[place2=far away place]
</pre>

are in fact replaced with &#147;nothing&#148; followed by newline, three times. (If you've hacked <I>m4</I> before, you may recall this as the need for frequent <B>dnl()</B> constructs in your input.) That's a bit messy, so let's special-case that. If a line consists entirely of a bracketed item, the trailing newline is automatically swallowed up. Not tough, but we have to get a bit messy:<P>

<pre>
s&lt;^\[([^]]+)\]\s*\n|\[([^]]+)\]&gt;
 {&amp;process(defined $1 ? $1 : $2)}meg;
</pre>

Here, I again have effectively an <B>s/old/new/eg</B> operation, split over two lines, using alternate delimiters. Note that the pattern to be matched consists of two separate regular expressions joined by the vertical bar:<P>

<pre>
^\[([^]]+)\]\s*\n
</pre>

and<P>

<pre>
\[([^]]+)\]
</pre>

The latter should be familiar... it's similar to what we've been using all along. The first one is a match for an entire line consisting only of the bracketed item, so that we can also scarf down the newline.<P>
The right-side replacement text, as code, becomes slightly more complicated, because we need to use either <B>$1</B> or <B>$2</B>, depending on which item on the left matched. The <B>defined()</B> took care of that. And finally, the substitution uses the additional suffix of <B>m</B>, meaning that <B>^</B> in the regular expression matches any embedded newline, and coincidentally spelling <B>meg</B>, because I watched a Meg Ryan movie last night on DVD.<P>
One final nicety: we have no way to include a literal left or right bracket in the text, so let's let <B>[LEFT]</B> and <B>[RIGHT]</B> stand for those. That'll work by including these lines early in <B>process</B>:<P>

<pre>
  return "[" if $thing eq "LEFT";
  return "]" if $thing eq "RIGHT";
</pre>

So, let's put it all together. And as a way of demonstrating how easy it is to get stories to feed into this, I found an archive with several &#147;fill in the blank&#148; stories at <B>http://www.mit.edu/storyfun/</B>, and stole the following story to tack onto the end of the program:<P>
<pre>
{ local $/; $_ = &lt;DATA&gt; }
s/^\[([^]]+)\]\s*\n|\[([^]]+)\]/&amp;process(defined $1 ? $1 : $2)/meg;
sub process {
  my $thing = shift;
  return "[" if $thing eq "LEFT";
  return "]" if $thing eq "RIGHT";
  if ($thing =~ /^\$(\w+)$/) { # variable reference
    return $value{$1};
  }
  $thing =~ s/\s+/ /g;  # handle wrapping
  my $variable;
  $variable = $1 if $thing =~ s/^(\w+)=//; # may be undef
  print "Give me a", $thing =~ /^[aeiou]/i ? "n " : " ", $thing, ": ";
  chomp(my $response = &lt;STDIN&gt;);
  if (defined $variable) {
    $value{$variable} = $response;
    return "";
  }
  return $response;
}
print;

__END__
[LEFT]... from http://www.mit.edu/storyfun/I_went_for_a_walk[RIGHT]
[adj1=adjective]
[place=place]
[verbed=verb (ending in -ed)]
[adj2=adjective]
[nouns=plural noun]
[plants=plural plant]
[adj3=adjective]
[adj4=adjective]
[adj5=adjective]
[noun=noun]
[verbing=verb (ending in -ing)]
[verb_past=verb (past tense)]
[animals=plural animal]

[your name] went for a walk

Yesterday, I went out walking, and somehow ended up in [$place]. I saw
[$plants] and [$animals] -- it was [$adj2]! But I started getting
[$adj5] hungry, and needed to find my way home. But no matter where I
[$verb_past], I couldn't see the path. I decided to go around the
[$adj1] [$noun] up ahead, and discovered that it led back home! I was
[$verbed]. At dinner, when I told my [$adj3] story, my [$nouns] looked
at me with [$adj4] expressions. Then they forbade me from ever
[$verbing] again.
</pre>

So, never again will you need to worry about those rainy days, or whenever you need to have &#147;fill in the blank&#148; templates. Perl can help you pass the time away, and do those tasks more efficiently. Until next time, enjoy!<P>

<h1>About the Author</h1><p>
Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the &#147;must-have&#148; standards: <I>Programming Perl</I>, <I>Learning Perl</I>, <I>Learning Perl for Win32 Systems</I>, and <I>Effective Perl Programming</I>, as well as writing regular columns for WebTechniques and Unix Review magazines. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. His offbeat humor and technical mastery have reached legendary proportions worldwide (but he probably started some of those legends himself). Randal's desire to give back to the Perl community inspired him to help create and provide initial funding for The Perl Institute (<I><B>perl.org</B></I>). He is also a founding board member of the Perl Mongers (<I><B>pm.org</B></I>), the worldwide association of &#147;Perl users groups&#148;. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
