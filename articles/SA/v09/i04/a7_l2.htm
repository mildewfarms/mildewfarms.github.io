<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i04: Listing 2</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#990000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink><a href="a7.htm">Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink>Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/2000/apr2000.tar"><b class=codeListing>apr2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >



<H1>Listing 2  rcs_recover.ss</H1><p>
<pre>
#!/bin/ksh
# this script uses either Bourne or Korn shell. 
#
# Listing 2:
# Title:   rcs_recover.ss
# Subject: RCS head branch retrieval script.
# Author:  Mike Dunham
# Date:    12/02/1999
# Description:
#   Retrieve the head branch of code from a former RCS
#   file. Intended for quick use when retrieving data from
#   old RCS archives without the time consuming step of configuring 
#   the RCS archive directories and environments.

# retrieve list of file names is passed to the shell script.
file_list=$*

# create a sub directory for the output of the head branch source
# with the original file name under the current working directory.
output_dir=./tst

# Define the awk command. this may be nawk, gawk, etc
awk_cmd=awk

# Setup a var for the awk script to get the header revision number.
awk_header=$output_dir/header.awk.$$

# Setup a var for the awk script to get the source code
awk_version=$output_dir/version.awk.$$

# Create output directory if it doesn't exist and make it writable
if [ ! -d $output_dir ]
then
    mkdir $output_dir
    chmod 755 $output_dir 
fi

# Build an awk script using the shell's here facility to strip the 
# header version from the RCS file.  Add the process id to the end 
# of file to make sure the name is unique.
cat &lt;&lt;EOF &gt;$awk_header
/^head/ {
        version=\$2;
        semi=index(version,";");
        final=substr(version,1,(semi-1));
        printf "%s", final;
}
EOF

# loop through the files in the list
for work_file in $file_list
do
    # Get the header version from the file with the awk command
    header_version='$awk_cmd -f $awk_header $work_file'

    # If there was no header information, we may not have an RCS
    # file, so inform the user and terminate
    if [ ! $header_version ]
    then
        echo "Unable to find the RCS HEAD block in file $work_file"
        echo "Can not continue!"
        exit 1
    fi

    # build another awk script to capture the source code for the 
    # header reversion
cat &lt;&lt;EOF &gt;$awk_version
BEGIN { 
        first_line_flg=0;
        text_line_flg=0;
        first_at_flg=0;
        last_at_flg=0;
}

/^${header_version}/ {
        if (first_line_flg==0) {
                first_line_flg=1;
        }
}

/^text/ {
        if (first_line_flg==1 &amp;&amp; text_line_flg==0) {
                text_line_flg=1;
        }
}

/^@/ {
        if (first_at_flg==0) {
                if (first_line_flg==1 &amp;&amp; text_line_flg==1) {
                        first_at_flg=1; 
                        tmp_str=substr(\$0,2);
                        printf("%s\n",tmp_str);
                        getline;
                }
        }
        else {
                if (first_line_flg==1 &amp;&amp; text_line_flg==1) {
                        last_at_flg=1; 
                }
        }
}

{
        if (first_line_flg==1 &amp;&amp; text_line_flg==1 &amp;&amp; \
            first_at_flg==1 &amp;&amp; last_at_flg==0) 
                print \$0;
}
EOF

    # Name of our work directory and output file
    output_file=$output_dir/$work_file.tmp
        
    # Execute AWK script and redirect to output file
    $awk_cmd -f $awk_version $work_file &gt;$output_file

    # Strip out any double @ signs and tack .src on just to prevent
    # overwriting of the original files if an error condition occurs.
    sed -e '/\@\@/s/\@\@/\@/g' \
      $output_file &gt;$output_dir/$work_file.src

    # Cleanup temp work file from AWK/SED step
    rm $output_file
done

# remove temporary files
rm -f $awk_header $awk_version

exit 0
</pre>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>




