<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i04: Recovering Source From a Defunct RCS System</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a7_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/2000/apr2000.tar"><b class=codeListing>apr2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Recovering Source From a Defunct RCS System</H1><p>
<P>Mike Dunham and Ed Schaefer
<P>
UNIX-based source code control systems, commercial or free-ware (that aren't SCCS), are probably Revision Control System (RCS) based. Recently, we had to recover very old source code from a defunct RCS-based system. The RCS clone's raw data files were available, but the system that generated the files was not. This article presents a UNIX shell script, <B>rcs_recover.ss</B>, which recovers the last revision of the code from the raw data file.<P>
In an RCS database, each source module is actually an ASCII flat file with the last revision of the source intact and previous revisions or deltas logged as <B>sed</B>-like commands. Listing 1 is a &#147;C&#148; demo, <B>func.c</B>, with a final revision of 1.3. The number of the last revision, 1.3, is stored in the &#147;head&#148; section of the file. Upon finding the revision number, search the file until you find the revision number with the following:<P>

<pre>
   1.3
   log
   @
   text
   @
</pre>

The source code for version 1.3 starts at this point and continues until you see one terminating &#147;@&#148; sign. Any source containing an &#147;@&#148; sign is expanded to &#147;@@&#148; by RCS.<P>
If only a few files need to be converted, a developer with the VI editor could easily do the function that <B>rcs_recover.ss</B> performs. If a large number of files need to be retrieved, this script eliminates tedious editing.<P>

<B>Pseudo Code for rcs_recover.ss</B><P>

To avoid destroying the original RCS file, the converted output file is stored with a <B>.src</B> extension in directory <B>tst,</B> below the present working directory.  The psuedo code is:<P>
1.  Create an AWK script using the &#147;here file&#148; facility of the shell to retrieve the header revision number. The revision number format at the beginning of a line is:<P>

<pre>
   ^head {Revision #};
</pre>

For each RCS file to be converted:<P>
2.  Execute the script created in step 1.<P>
3.  Create another AWK script looking for the revision number found in step 2. The format at the beginning of each line is:<P>

<pre>
   ^{Revision #}
   ^log
   ^@ { Log Description for this version } {optionally @ here if \
                                            only one line}
   ^@
   ^text
   ^@
</pre>

4.  Execute the AWK script built in step 3, sending the original source to the output file.<P>
5.  Cycle through the output file replacing any &#147;@@&#148; signs with a single &#147;@&#148; sign.<P>

<B>Conclusion</B><P>

Listing 2 is the source for <B>rcs_recover.ss</B>. This article is one method for retrieving the latest version from RCS source code files. The obvious enhancements are to support retrieving branches and retrieving revisions other than the last revision. To implement this functionality, it is necessary to create a script or program that reads the RCS delta commands. Essentially, this creates your own RCS system -- something beyond the scope of our original mission.<P>

<h1>About the Author</h1><p>
Michael Dunham is currently a senior programmer/analyst for Intel's Factory Information and Control System (IFICS) Group in Hillsboro, Oregon. He has eight years of experience developing and implementing systems on UNIX-based platforms. His experience includes working for Hewlett Packard and Consolidated Freightways writing real-time systems, automation interfaces, and maintaining enterprise manufacturing systems. He can be reached at: mike.dunham@intel.com.<P>

Ed Schaefer is a senior programmer/analyst for Intel's Factory Information and Control System (IFICS) Group. His viewpoints on source code control or any other subject in no way reflect Intel's position. He can be reached at: olded@ix.netcom.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
