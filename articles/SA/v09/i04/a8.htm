<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i04: Managing Usability with the TERM Variable</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a8_l3.htm">Listing 3</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a8_l4.htm">Listing 4</a></span></td>
		<td><span class=navbarLink><a href="a8_l5.htm">Listing 5</a></span></td>
		<td><span class=navbarLink><a href="a8_l6.htm">Listing 6</a></span></td>
		<td><a href="../../../../source/SA/2000/apr2000.tar"><b class=codeListing>apr2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Managing Usability with the TERM Variable</H1><p>
<P>Mats Brym&eacute;r
<P>
If you have applications that use <B>telnet</B>, then upgrading older servers may create problems. A common solution is for a server to have one application, and the user uses a <B>telnet</B> icon with a configuration that is specific for that application. When a larger and more powerful server running several network applications replaces an older application server, the <B>telnet</B> icon may pose a security problem by giving the user access to the additional applications. In this article, I will address five of the many ways to solve this problem.<P>

<B>Solution 1</B><P>

In the first solution, the user gets one account for each application that he uses. However, this solution creates too many accounts for the administrator to manage. This is not a good alternative because management of access rights to the server would be hard to control. Ideally, one account per user decreases administration and security issues.<P>

<B>Solution 2</B><P>

A second solution is one user-ID in the server and use the terminal emulators script function to point the user to the right start script. This means that if the user logs on in a different manner, he will get access to the server and end up with a shell prompt.<P>

<B>Solution 3</B><P>

Another way to solve the problem is to use a shell program menu. A common menu that users access, in which they have a pre-set choice of applications, will also work. Or, the user can have a customized menu with a pre-set choice of applications. However, a common menu might confuse the users, since they will see applications that they can not access. Customized menus cause a large workload for the administrator when the user has to update them.<P>

<B>Solution 4</B><P>

A dynamic menu can be constructed when the user logs on, depending upon which group the user belongs to. With this solution, the user gets a menu when he logs on. When using solution three or four, you can use standard commercial products in the construction of the menus. However, management of the menus will still cause the same workload as before.<P>

<B>Solution 5</B><P>

Use the TERM variable in the <B>telnet</B> emulator to control which application to start. When the user logs onto the server, a script starts that will check the TERM variable and start the appropriate script to control the access rights of the user. When the TERM has been set to <B>appl1</B>, then the script <B>startappl1</B> will start. It will control whether the user belongs to the <B>appl1</B> group. If the user belongs to the <B>appl1</B> group, the user will get access to the application. If the user does not belong to the <B>appl1</B> group, the session will be terminated. The users who do not have access rights to the application will not be able to log on. The logon procedure looks the same as before to the user.<P>
The description that follows is a step-by-step solution to implement an easy migration from several application servers to one large application server. The solution that will be described in this article uses the Reflection terminal emulator, DNS, a group file, a log on script, and three different application scripts. Management will be very easy for the administrator. The users have one user-ID and one password to remember. This will give a better adaptation of the local security policy, since the users will have fewer passwords and user-IDs to remember -- no more cue cards with passwords and user-IDs. The use of the R-command to access the server will not be described here. This solution has not been tested with NIS or NIS+, but it should work in that environment also. If you have a client server environment, the user problem should not occur, since the problem is solved in the client software. The following example of how to configure the DNS has been performed on a Sun Spark 5 with Solaris version 2.6:<P>

<B>DNS</b><P>
<pre>
Name          Record type      Lookup

server1       IN A             192.168.58.10
appl1         IN CNAME         server1
appl2         IN CNAME         server1
</pre>
This enables you to easily move the application to a new server. If the DNS lookup is the same as the application group, it will be easy to take control of the environment. However, this is not a requirement for the solution to work.<P>

<B>Terminal Emulation</B><P>

For the solution to work, you need to be able to set the TERM variable to a name of your choice in the <B>telnet</B> emulator.<P>

<B>Example Using Reflection</B><P>

Start Reflection and press &#147;Alt-y&#148;. Doing this will start the command window, where you can write scripts or change parameters. How it will look is shown in Figure 1.<P>

<pre>
In the command window:
To display all the parameters that are set in the emulator write: v
To change parameters:
set TELNET-TERMINAL "appl1"
set DATACOMM-NODE "appl1"
set WINDOWS-TITLE  "Applikation1"
</pre>

You can then check for errors with <B>v TELNET-TERMINAL</B> in the command window. It should look like this: <P>

<pre>
TELNET-TERMINAL "appl1"
</pre>

To save the changes, choose &#147;File&#148; and &#147;Save as&#148; in the terminal window. Pick an appropriate name, in this case <B>appl1</B>. Exit the command window and do not save it. You will end up with a file named <B>appl1.r2w</B>, which can be placed on the workbench or can be a shortcut on the workbench. There are other terminal emulators that can do this, such as Anita, where you enter under the Config and chose UNIXENV setup. Write the application name.<P>

<B>Groups</B><P>

To edit the group file, use your favorite editor or the <B>grpadd</B> command. Please refer to the following example:<P>

<pre>
grpadd &#150;g 600 appl1
</pre>

The groups that are used in this example are presented below.<P>

<pre>
Application                   Group name        Gid

Applikation1                  appl1             600
Applikation2                  appl2             692
System administrator          sysuser           200
</pre>

<B>Scripts</B><P>

You will need two scripts to log into the application -- the start script and the application script. When the user starts the <B>telnet</B> emulator, it asks the DNS for the the IP address. The login procedure that follows is the same as usual, with username and user-ID. However, instead of starting <B>/bin/sh</B> or any other shell, the script <B>/usr/local/bin/startup</B> will start. The entry in <B>/etc/passwd</B> looks like this:<P>

<pre>
peter:*:200:600:Peter:export/home/peter:/usr/local/bin/startup
</pre>

The script startup is described in Listing 1. The <B>/usr/local/bin/startup</B> file decides which application script will start, depending on what has been set in the TERM variable. If a user has an account on the server, but has not an authorized TERM variable, the user will get a message that the choice was not allowed. Information will then be sent to the log file, and the session will be terminated. When TERM is set to <B>appl1</B>, the <B>startappl1</B> script will start. See Listing 2.<P>
The control of the user belonging to a certain group is performed in an easy manner. Use <B>fgrep</B> to see whether the user belongs to the specified group. The information is presented to you by using the <B>id</B> command. If the control is &#147;true&#148;, the information with the TERM variable and the time will be written to the log file. After this procedure, you can add your own variables that normally exist in the profile, or run an <B>initappl1.sh</B> script for the user. You can then run the start script for the application. If the value is not &#147;true&#148;, then a logpost is created with the error information. Be careful of having one group with the name <B>appl</B> and another group with the name <B>appl1</B> because the value can become &#147;true&#148; in two cases.<P>
The example script, <B>appl2</B>, has a choice of what menu the user will start in the application. This problem can occur when the application has different start menus, depending on which department the user belongs to in the organization. The control performed is done in the same way as in <B>startappl1</B>. If the user is authorized, the user is then checked towards the <B>config</B> file with user name and start script. If the user is not found in the <B>config</B> file, the information about this session is sent to the log file and the session is terminated. See Listing 3.<P>
The <B>config</B> file for the script contains the user-ID and start program. One example of the <B>config</B> file can be found in Listing 4.<P>
The third choice is to use the same method when the systems administrator accesses the server. See Listing 5. All scripts need to have the mask of 755 to work properly. If the permissions are set more strictly, the scripts won't start for all users and there is no entry in the logfiles. A problem can occur when using the <B>su</B> command to another user. The user has <B>/usr/local/bin/startup</B> as login shell. The tests for applications with the TERM variable are performed, so set the TERM variable before you <B>su</B> to another user. This script helps you to do this because it uses the group-ID and the user-ID to input variables. See Listing 6.<P>

<B>Logging</B><P>

Each script has its own log files stored in <B>/usr/local/log</B>. The catalog and the log files need to have write access for the other 622  because of the error log entries. If the user doesn't belong to the group, you must get that information. If the user can't write to the log file, the script exits and the user can't log in. You can also log to syslog with logger. See the manpage for your server.<P>

<B>Preparing the Environment</B><P>

When moving the user from the old server to the new one, you can make a script that will change the start shell and create the user with <B>adduser</B>. This is a way to solve the problem with the startup shell: <P>

<pre>
# Cut -d":" -f1 /etc/passwd &gt;/tmp/foo
</pre>

Delete all users that do not use the startup shell. (i.e. <B>root</B>, <B>uucp</B>, <B>ftp</B>.)<P>

<pre>
#for i in 'cat /tmp/foo'
&gt;do
&gt;usermod -s /usr/local/bin/startup $i
&gt;done
</pre>

Before you test this, make a copy of <B>/etc/passwd</B>.<P>

<B>Conclusion</B><P>

This solution works fine for us and it's easy to install. It's a cost-effective way to solve the problem with many applications on one server. For the user of the system, it looks the same as before the upgrade. It uses standard UNIX commands so it should work with any UNIX flavor.<P>
<p>
<h1>About the Author</h1><p>
Mats Brym&eacute;r has worked with computers for the last 14 years, first with mainframes. For the last 6 years he's worked as a sysadmin on different UNIX flavors. He currently works for WM-data as a UNIX consultant. He can be reached at: mabry@wmdata.com.<p>


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>






