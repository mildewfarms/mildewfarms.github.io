<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i12: FCheck: A Solution to Host-Based Intrusion Detection</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a8_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/2000/dec2000.tar"><b class=codeListing>dec2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>FCheck: A Solution to Host-Based Intrusion Detection</H1><p>
<P>Ron McCarty
<P>
In September 1999, my <I>Sys Admin</I> article &#147;Intrusion Detection Strategies and Design Considerations&#148; gave an overview of intrusion detection. In February 2000, I followed up with an introduction to Snort, a network intrusion detection system (IDS), so it is about time I got around to a host-based IDS.<P>
A host-based IDS is responsible for notifying administrators that key system files have changed on a particular system. Intrusion detection provides a very important function, but many administrators come to rely on their host-based IDS to provide an audit trail for changes made by their peers and themselves in the regular course of systems administration.<P>
This value added auditing feature has encouraged the use of free software (especially Tripwire [<B>http://www.tripwire.com</B>], which was freely available in the past) for this purpose even in shops that would not normally allow &#147;free&#148; software installation. Since there is no capital expenditure for the product, the system auditing functionality can be used in as many systems as possible. This is definitely win-win: it provides a broader spectrum of host-based IDS and allows administrators to more effectively manage systems through better auditing.<P>
FCheck:<P>
<pre>
http://sites.netscape.net/fcheck/download.html) 
</pre>
is an Open Source freely available host IDS that will run on both UNIX and Windows systems. FCheck is written in Perl, which will be considered an advantage by many admins. Perl 5 or later is required.<P>
<B>FCheck Architecture</b><p>FCheck definitely supports the UNIX philosophy of using small, specific task-oriented tools to create larger, general purpose tools. FCheck can use any system executable or script for reporting, which gives it great flexibility. <B>syslog</B> (using the logger command) or <B>lpr</B> are common reporting methods for IDS. Using <B>lpr</B> and a printer gives the added security feature of using a write once media, which is very hard to change after a system compromise.<P>
FCheck also uses external programs to determine signatures of files with MD5 (RFC 1321) being the likely choice. Keep in mind that this flexibility does have a weakness: the md5 executable could be replaced during a root compromise with a program that outputs the same signatures that FCheck is expecting.<P>
FCheck comprises the <B>fcheck</B> Perl script, the <B>fcheck.cfg</B> configuration file (which is normally kept in <B>/usr/local/etc/</B>), the database directory, and files it uses to determine whether changes have been made to the system. FCheck does not have to be run as root; however, the program requires read permissions on all files being monitored. Setting read permissions on files that would otherwise not have them can make the deployment very complex and could open additional holes.<P>
FCheck currently does not allow individual files to be monitored with one entry such as <B>/etc/passwd</B>, which seemed like a major weakness to me when I first took a look at the IDS. However, the small footprint and ease of use convinced me that, despite this weakness, FCheck still had merit. To overcome this weakness, I've written the simple <B>fcheck_file_support</B> script that creates the necessary output to create the configuration entries to simulate individual file support. See the sidebar <B>fcheck_file_support</B> for an overview and some other useful pointers. I hope this item will be fixed in a future release.<P>
<B>Installation</b><p>Installation of FCheck is very straightforward. For the installation covered here, RedHat 6.2 and Perl 5.005.03 were used, but installation on other versions of UNIX is very similar. Ideally, any IDS should be installed following a new system install; however, this is simply not practical in many situations. At the time of this writing, FCheck's current version is 2.7.51, which will be covered here.<P>
As root, download the FCheck archive from:<P>
<pre>
http://sites.netscape.net/fcheck/   \
   FCheck_2.07.51.tar.gz
</pre>
and place it in <B>/usr/local/src/</B>, or an appropriate place on the file system. If this is a new system, a network connection should not be used (the system should not be hooked up to the network until completion). FCheck weighs in at less than 100 KB, so if the system has a floppy, sneakernet can be used.<P>
Move into the source directory and unzip the archive:<P>
<pre>
cd /usr/local/src/
gunzip FCheck_2.07.51.tar.gz
</pre>
Now un<B>tar</B> the archive:<P>
<pre>
tar xvf FCheck_2.07.51.tar
</pre>
The Perl scripts <B>fcheck</B> and <B>fcheck.cfg</B> need to be put in the proper location. I normally recommend a dedicated directory structure for new software; however, there are only two files involved here, so we'll follow the author's suggestion and place the <B>fcheck</B> script into<B> /usr/local/bin/ </B>and <B>fcheck.cfg</B> into <B>/usr/local/etc/</B>:<P>
<pre>
cp /usr/local/src/fcheck/fcheck \
   /usr/local/bin/
cp /usr/local/src/fcheck/fcheck.cfg \
   /usr/local/etc/
</pre>
Check the first line (<B>#!/usr/bin/perl</B>) of the <B>/usr/local/bin/fcheck </B>script and ensure it points to the proper location of Perl on the system that FCheck is being installed on.<P>
Next, create the data directory for FCheck:<P>
<pre>
mkdir /usr/local/data/
</pre>
This directory can be modified...replace the &#147;<B>DataBase = /usr/local/data</B>&#148; entry in the <B>/usr/local/etc/fcheck.cfg</B> configuration file.<P>
<B>Running FCheck</b><p>Before running FCheck, let's create a simple configuration that will monitor the<B> /etc/</B> directory for changes. Edit <B>/usr/local/etc/fcheck.cfg</B> using <B>vi</B> or your favorite editor and search of the entry <B>Directory = /tmp</B>. Change the entry to &#147;<B>Directory = /etc</B>&#148;. By leaving off the trailing<B> /</B> we are telling FCheck to not check sub-directories.<P>
Save the file and run FCheck with:<P>
<pre>
/usr/local/bin/fcheck -acs
</pre>
A quick breakdown of the parameters are:<P>
<P>
<B>-a</B> -- Automatic scan of all the directory configuration.<P>
<B>-c</B> -- Create the initial (baseline) database to which subsequent scan comparisons will be made.<P>
<B>-s</B> -- Create signatures (fingerprints). The documentation that comes with FCheck does not emphasize the use of <B>-s</B>, but I highly recommend its use since permissions, dates, and file sizes can be manipulated by skilled hackers and hacking tools. FCheck will use the program defined with the <B>$Signature</B> parameter in the <B>fcheck.cfg</B> configuration file.<P>
<P>
After running the program, take a look in the <B>/usr/local/database/</B> directory. You'll notice that FCheck has created a file containing a list of the file names being monitored with the file information and signature listed on the same line. The file name is in the format <B>hostname._directory</B> and is a standard text file that can be read with UNIX programs that work with text as input.<P>
Now, we can make a change that FCheck should notice. Change the password of your normal user (non-root) using the <B>passwd</B> program. You can use the old password -- we are simply getting the system to make a change to the password file and its shadow counterpart.<P>
Run the program with only the <B>-a</B> as the parameter:<P>
<pre>
/usr/local/bin/fcheck -a
</pre>
This should result in the following output:<P>
<pre>
PROGRESS: validating integrity of /etc
STATUS:
   WARNING: [lefty] /etc/passwd
   Inode   Permissons   Size   Created On            Name
   293999  -rw-r--r--   707    Oct 01 08:11 2000     /etc/passwd
   ** Was modified to reflect the following: **
   294000  -rw-r--r--   707    Oct 01 11:35 2000     /etc/passwd

   WARNING: [lefty] /etc/passwd-
   Inode   Permissons   Size   Created On            Name
   293243  -rw-r--r--   707    Oct 01 08:11 2000     /etc/passwd-
   ** Was modified to reflect the following: **
   293243  -rw-r--r--   707    Oct 01 11:35 2000     /etc/passwd-

   WARNING: [lefty] /etc/shadow
   Inode   Permissons   Size   Created On            Name
   294000  -r--------   629    Oct 01 08:11 2000     /etc/shadow
   ** Was modified to reflect the following: **
   294001  -r--------   629    Oct 01 11:35 2000     /etc/shadow

   WARNING: [lefty] /etc/shadow-
   Inode   Permissons   Size   Created On            Name
   293772  -r--------   629    Oct 01 08:11 2000     /etc/shadow-
   ** Was modified to reflect the following: **
   293772  -r--------   629    Oct 01 11:35 2000     /etc/shadow-
</pre>
You may have noticed the output went to standard out. This is because only the <B>-a</B> was used. If the<B> -l </B>parameter were used, then the output would have been piped to the program defined with the <B>Logger</B> parameter in the configuration file <B>fcheck.cfg</B>. Of course, the standard out can also be redirected on the command line. For example, to mail the above output, use:<P>
<pre>
/usr/local/bin/fcheck -a | mail \
   root@localhost
</pre>
Replace &#147;root@localhost&#148; with the appropriate recipient. The output can also be directed to write to medium, such as printer or CD-R, which might be desired on very sensitive hosts.<P>
<B>Configuration: A Brief Look</b><p>There are six simple parameters in the <B>fcheck.cfg</B>. To view the ones that are active in your configuration, use:<P>
<pre>
grep -v ^# /usr/local/etc/fcheck.cfg \
   | grep -v ^$
</pre>
This will give output similar to this:<P>
<P>
<B>Directory = /etc <br>
DataBase = /usr/local/data <br>
Logger = /usr/bin/logger -tfcheck <br>
TimeZone = EST5EDT <br>
$Signature = /usr/bin/md5sum<br>
</pre>
The <B>Directory</B> parameter that we edited earlier tells FCheck which directories to monitor. As mentioned, a following <B>/</B> after the directory tells FCheck to check sub-directories as well. The <B>Database</B> parameter tells FCheck where to store the results. The <B>Logger</B> parameter tells FCheck what program to use for notification; however, it is only used if the <B>-l</B> parameter is used on the command line. The <B>TimeZone</B> allows the local time zone to be ignored for reporting purposes and, finally, the somewhat nonconformist (due to the leading <B>$</B>) <B>$Signature</B> specifies which program to use to create the signature or fingerprint. This is only used if you use the <B>-s</B> parameter on the command line. The sixth and not shown parameter is the <B>Exclusion</B> parameter, which allows the admin to define which file in a directory to ignore. Check the sidebar <B>fcheck_file_support </B>for a closer look at the <B>Exclusion</B> parameter.<P>
<B>Which Files and How Often?</b><p>Determining which files to monitor can be difficult, and it becomes more difficult on systems that often change. My general rule is to monitor all system files that are stored in<B> /etc/ </B>as well as the binaries usually stored in<B> /bin/ </B>and <B>/sbin/</B>. If the system is a centralized services or application server with very few changes outside of the application's directory structure, then a larger umbrella makes sense. Monitoring a larger directory structure will not add very much additional work. Systems known for unauthorized software use can be monitored as closely as needed.<P>
After the initial configuration and several days of fine tuning, you'll generally not need to adjust the IDS, but don't hesitate to adjust the configuration to meet new needs as applications and users change.<P>
Baselining, or creating snapshots for new databases should be taken seriously, especially where binaries and authentication files (password, trusted hosts, etc.) are concerned. If your systems have a lot of configuration changes such as adding and removing users, then separate FCheck processes should be set up to meet both needs. One process can monitor the password files and have a daily baseline (if necessary), and the other FCheck process can be used to monitor the other system configuration and binary files. The <B>-f </B>parameter can be used to tell FCheck to use another configuration file. The other separation file should be set up to use its own database directory structure for storage.<P>
Use the <B>crontab</B> facility to integrate FCheck into the system. FCheck's documentation suggests calling &#147;<B>fcheck -a</B>&#148; every ten minutes. Every ten minutes is reasonable in many environments, but may be overkill initially as you get a feel for the system. Remember to keep an eye on the system log files or output files that you are recording. If files are being kept outside the normal system log files, then a procedure for rotating or moving the files offline will also be needed.<P>
<B>Summary</b><p>FCheck is still a bit rough around the edges, but it definitely has a place in many network administrators' toolboxes. The program is easy to implement, the Perl source code is available, and it does what it is supposed to do. Keep an eye on it because it only gets better.I'm looking forward to advanced reporting tools and support of differences in text files.<P>
<p>
<h1>About the Author</h1><p>
Ronald McCarty received his bachelor's degree in Computer and Information Systems at the University of Maryland's international campus at Schwaebisch Gmuend, Germany. After completing his degree, Ronald McCarty started his network career as network administrator at the Schwaebisch Gmuend campus. Ronald McCarty works for Lucent Technologies as a senior systems engineer on a customer team responsible for a major telecommunications carrier. He spends his free time with his two best friends in the world: his daughter, Janice, and his wife, Claudia. Ron can be reached at: ronald.mccarty@gte.net.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
