<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i12: So What's the Difference?</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/dec2000.tar"><b class=codeListing>dec2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>So What's the Difference?</H1><p>
<P>Randal L. Schwartz
<P>
A lot of common programming is dealing with things that change. Things do indeed change, and sometimes we'd like to know how they changed.<P>
For example, if we have a list of items:<P>
<pre>
@one = qw(a b c d e f g);
</pre>
then later, we look at it again, and there's a different set of items:<P>
<pre>
@two = qw(b c e h i j);
</pre>
How can we tell what's new, what's old, and what's gone? We could certainly try to do it by brute force:<P>
<pre>
@one = qw(a b c d e f g);
@two = qw(b c e h i j);
foreach $one (@one) {
  if (grep $one eq $_, @two) {
    print "$one is in both old and new\n";
  } else {
    print "$one has been deleted\n";
  }
}
foreach $two (@two) {
  unless (grep $two eq $_, @one) {
     print "$two has been added\n";
  }
}
</pre>
This in fact gives us an appropriate response:<P>
<pre>
a has been deleted
b is in both old and new
c is in both old and new
d has been deleted
e is in both old and new
f has been deleted
g has been deleted
h has been added
i has been added
j has been added
</pre>
But this is incredibly inefficient. The computation time will rise in proportion to the product of sizes of both the lists. This happens because every element of one list is being compared to every element of the other list (twice, in fact). The <B>grep</B> operator is a loop over each item, so we effectively have nested loops, which should usually be a danger sign.<P>
The<B> perlfaq4</B> manpage approaches this subject, giving a solution of something like:<P>
<pre>
  @union = @intersection = @difference = ();
  %count = ();
  foreach $element (@one, @two) { $count{$element}++ }
  foreach $element (keys %count) {
      push @union, $element;
      push @{ $count{$element} &gt; 1 ? \@intersection : \
             \@difference }, $element;
  }
</pre>
with the caveat that we're assuming one item of each kind within each list. While that works for our input data as well, we'll run into trouble on more general data. However, with a slight modification, we can handle even duplicate items in each list:<P>
<pre>
@one = qw(a a a a b c d e f g);
@two = qw(b c e h i i i i j);
my %tracker = ();
$tracker{$_} .= 1 for @one;
$tracker{$_} .= 2 for @two;
for (sort keys %tracker) {
  if ($tracker{$_} !~ /1/) {
    print "$_ has been added\n";
  } elsif ($tracker{$_} !~ /2/) {
    print "$_ has been deleted\n";
  } else {
    print "$_ is in both old and new\n";
  }
}
</pre>
Success. Correct output, and it's reasonably efficient. If you're doing a lot of these, check into the CPAN modules starting with <B>Set::</B>.<P>
Then we come to the problem of telling the difference between two sequences, where the ordering matters. The very nice <B>Algorithm::Diff</B> in the CPAN computes a reasonably short difference-list, similar to the UNIX <B>diff</B> command, to tell us how to transform one list into another. There are a number of interfaces.<P>
The most interesting one I found was <B>traverse_sequences</B>, which gives me all of the elements of the two lists in sequence, but marked in a way that I can tell to which of the two lists (or both) the item belongs.<P>
Let's look at a simple example:<P>
<pre>
use Algorithm::Diff qw(traverse_sequences);
@one = qw(M N a b P Q c d e f V W g h);
@two = qw(a b R S c d T U e f g h X Y);
traverse_sequences(\@one, \@two, {
  MATCH =&gt; sub { show($one[$_[0]], $two[$_[1]]) },
  DISCARD_A =&gt; sub { show($one[$_[0]], "---") },
  DISCARD_B =&gt; sub { show("---", $two[$_[1]]) },
});
sub show {
  printf "%10s %10s\n", @_;
}
</pre>
Here, we've given two token sequences in <B>@one</B> and <B>@two</B>. Using <B>traverse_sequences</B>, we'll print out common sequences (via the <B>MATCH</B> callback, removed material (via the <B>DISCARD_A</B> callback), and new material (via the <B>DISCARD_B</B> callback). Changed material shows up as a series of deletes followed by a series of inserts.<P>
The callbacks are defined as references to anonymous subroutines, more commonly known as &#147;coderefs&#148;. The two parameters passed to each of the callbacks are the current indicies within the <B>@one</B> and <B>@two</B> arrays. As this isn't the actual value, I need to take the index and look it up in the appropriate array.<P>
The result is something like:<P>
<pre>
  M        ---
  N        ---
  a          a
  b          b
  P        ---
  Q        ---
---          R
---          S
  c          c
  d          d
---          T
---          U
  e          e
  f          f
  V        ---
  W        ---
  g          g
  h          h
---          X
---          Y
</pre>
Notice the common sequences. The <B>printf</B> operation lines up the columns nicely.<P>
Well, this is a nice text-mode tabular output, but we can get a bit nicer if we know we're sending the result to HTML. Let's color-code all deletions in red, and insertions in green.<P>
A first cut at the algorithm generates far too many font tags:<P>
<pre>
use Algorithm::Diff qw(traverse_sequences);
@one = qw(M N a b P Q c d e f V W g h);
@two = qw(a b R S c d T U e f g h X Y);
traverse_sequences(\@one, \@two, {
  MATCH =&gt; sub { colorshow("", $one[$_[0]]) },
  DISCARD_A =&gt; sub { colorshow("red", $one[$_[0]]) },
  DISCARD_B =&gt; sub { colorshow("green", $two[$_[1]]) },
});
sub colorshow {
  my $color = shift;
  my $string = shift;
  if (length $color) {
    print "&lt;font color=$color&gt;$string&lt;/font&gt;\n";
  } else {
    print "$string\n";
  }
}
</pre>
</B>This generates a correct result, but excessive output:<P>
<pre>
&lt;font color=red&gt;M&lt;/font&gt;
&lt;font color=red&gt;N&lt;/font&gt;
a
b
&lt;font color=red&gt;P&lt;/font&gt;
&lt;font color=red&gt;Q&lt;/font&gt;
&lt;font color=green&gt;R&lt;/font&gt;
&lt;font color=green&gt;S&lt;/font&gt;
c
d
&lt;font color=green&gt;T&lt;/font&gt;
&lt;font color=green&gt;U&lt;/font&gt;
e
f
&lt;font color=red&gt;V&lt;/font&gt;
&lt;font color=red&gt;W&lt;/font&gt;
g
h
&lt;font color=green&gt;X&lt;/font&gt;
&lt;font color=green&gt;Y&lt;/font&gt;
</pre>
What we need is some tracking of state information to figure out if we're already in red or green mode:<P>
<pre>
use Algorithm::Diff qw(traverse_sequences);
@one = qw(M N a b P Q c d e f V W g h);
@two = qw(a b R S c d T U e f g h X Y);
traverse_sequences(\@one, \@two, {
  MATCH =&gt; sub { colorshow("", $one[$_[0]]) },
  DISCARD_A =&gt; sub { colorshow("red", $one[$_[0]]) },
  DISCARD_B =&gt; sub { colorshow("green", $two[$_[1]]) },
});
colorshow(""); # reset back to
BEGIN {
  my $currentcolor = "";

  sub colorshow {
    my $color = shift;
    my $string = shift;
    if ($color ne $currentcolor) {
      print "&lt;/font&gt;\n" if length $currentcolor;
      print "&lt;font color=$color&gt;\n" if length $color;
      $currentcolor = $color;
    }
    if (defined $string and length $string) {
      print &#147;$string\n&#148;;
    }
  }
}
</pre>
Here, I'm tracking the state of the current HTML color in the <B>$currentcolor</B> static variable. As it changes, I send out the end-font or begin-font tags as needed. The only oddness now is that I need to make one final call to <B>colorshow</B> with the uncolored tag to close off any final begin-font tag. This call would be harmless if we were already outside a colored region.<P>
That's much better, resulting in:<P>
<pre>
&lt;font color=red&gt;
M
N
&lt;/font&gt;
a
b
&lt;font color=red&gt;
P
Q
&lt;/font&gt;
&lt;font color=green&gt;
R
S
&lt;/font&gt;
c
d
&lt;font color=green&gt;
T
U
&lt;/font&gt;
e
f
&lt;font color=red&gt;
V
W
&lt;/font&gt;
g
h
&lt;font color=green&gt;
X
Y
&lt;/font&gt;
</pre>
Although my Web-hacking friends might prefer to see that as:<P>
<pre>
&lt;span style="background: red; color: black"&gt;
M
N
&lt;/span&gt;
a
b
&lt;span style="background: red; color: black"&gt;
P
Q
&lt;/span&gt;
&lt;span style="background: green; color: black"&gt;
R
S
&lt;/span&gt;
c
d
&lt;span style="background: green; color: black"&gt;
T
U
&lt;/span&gt;
e
f
&lt;span style="background: red; color: black"&gt;
V
W
&lt;/span&gt;
g
h
&lt;span style="background: green; color: black"&gt;
X
Y
&lt;/span&gt;
</pre>
That'd be a pretty easy small change, but I'll leave that to you. There's a little more whitespace in the output here than I like, but at least the job is getting done with minimal hassle.<P>
So, now when someone asks you &#147;what's the difference?&#148;, you can show different ways of answering that question! Until next time, enjoy!<P>
<p>
<h1>About the Author</h1><p>
Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the &#147;must-have&#148; standards: <I>Programming Perl</I>, <I>Learning Perl</I>, <I>Learning Perl for Win32 Systems</I>, and <I>Effective Perl Programming</I>, as well as writing regular columns for WebTechniques and Unix Review magazines. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
