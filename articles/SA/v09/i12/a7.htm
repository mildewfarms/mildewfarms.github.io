<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i12: Managing an LDAP Database with Perl and Apache</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/dec2000.tar"><b class=codeListing>dec2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Managing an LDAP Database with Perl and Apache</H1><p>
<P>Reinhard Erich Voglmaier
<P>
One of the most tedious activities in systems administration is password management. This means not only to create, modify, and delete accounts, but also to handle requests from users who forgot their passwords and, even more time consuming, to explain what password has to be used on which system under what application. In <I>Sys Admin</I>, June 2000, Lizmari Brignoni described the basics behind the LDAP protocol (Lightweight Directory Access Protocol). This protocol is widely used for user authentication. It allows one application to access information maintained by another one. A good example is the use of data stored in an email system by the company telephone book made accessible via a Web application.<P>
The strength of the LDAP protocol is that it is a standard protocol implemented by a large number of big players in the software arena, such as: Netscape, Oracle, Sun, and Microsoft. Furthermore, commercial solutions are available as well as free source code implementations such as OpenLDAP, which is based on the University of Michigan Implementation.<P>
While the Brignoni article described the LDAP protocol and basic design questions, I will examine application development using data from LDAP. Specifically, I will discuss a self-service application that permits users to subscribe themselves to an application. Once they are subscribed, they also can modify their data such as phone number, address, and password. In this application, I use the following software: Apache Web server 1.3.12 (required &gt; 1.3) with mod_aut_ldap, OpenLDAP 1.2.8, and Perl 5.6 (required &gt; 5.xxxx). In this article, I will explain the use of the Perl and Apache LDAP APIs but I'll only scratch the surface. For more information, see the documentation that comes with the software distribution for the Perl and for the Apache API.<P>
<B>The First Step after Installation </B>--<B> Loading Data</b><p>After you've chosen, installed, and configured the server software, you must consider how to load the data in the database. There are several possibilities, depending on your local requirements. The first is an import utility, suitable if you have to add a large number of entries. It uses the standard input format LDIF (LDAP Data Interchange Format). The following line imports an input file written in LDIF format in the database:<P>
<pre>
ldif2ldbm -i LDAP.ldif
</pre>
If you only need to add one entry or modify something, there are also command-line utilities available. The most important one to know is <B>ldapmodify</B>. This utility is used to add or modify an entry. The second utility is <B>ldapsearch</B>, which is used to retrieve entries from the database. The following is an example of <B>ldapmodify</B>:<P>
<pre>
ldapmodify -a -h ldap.myorganisation.com -p \
   389 -D "uid=RVoglmaier, ou=IT, o=GlaxoWellcome" \
   -w "Password" -f Inputfile
</pre>
where &#147;InputFile&#148; reads:<P>
<pre>
dn: uid=MyName, ou=Department1, o=GlaxoWellcome
cn: My Name
sn: Name
givenname: My
</pre><P>
A brief example of <B>ldapsearch</B>:<P>
<pre>
ldapsearch -h ldap.myorganisation.com -p \
   389 -D "uid=RVoglmaier, ou=IT, o=GlaxoWellcome" \
   -w "Password" -b "o=GlaxoWellcome" "(sn = Name)"
</pre>
After you have an LDAP server running and armed with these tools, you can store information in your database, search, and update it. For occasional use by experienced LDAP users, this may not seem too bad. However, for the administrator in his everyday job or even the end user, it is not so comfortable. Furthermore, we wanted an application that is accessible via a Web browser, and occasionally used by employees who are unskilled in IT.<P>
<B>Toward a More Robust Application</b><p>Because we wanted a Web-enabled application and command- line tools are not very safe in this environment, we needed another mechanism. Most LDAP implementations have APIs for a number of programming languages (e.g., C, Java, PHP, and Perl, which I used for this article). Here is the basic functionality requested from our application:<P>
<P>
1. Add a new entry. <br>
2. Modify an existing entry. <br>
3. Search for an entry.<P>
<P>
However, since there will be an administrator who must erase old entries, there must be a delete entry as well as other maintenance tools, which I'll address later in this article.<P>
<B>A Command-Line Search Utility</b><p>Listing 1 explains the very basics of the LDAP Perl Interface. (All listings for this article are available from <I>Sys Admin</I>'s Web site: <B>http://www.sysadminmag.com</B>.) It's object oriented and requires Perl 5.000 or above. Before connecting with an LDAP server, you need an LDAP object containing the necessary data structures. This does the &#147;new&#148; call. After creating an instance of the LDAP class, you can connect with the LDAP server. In LDAP parlance, this is called binding, so it's no wonder the method is called &#147;bind&#148;.<P>
Remember LDAP is a protocol based on TCP/IP, which means you can connect not only to a local LDAP server, but also to a remote LDAP server. Furthermore, there are two ways to bind to an LDAP server -- one unprivileged way, called &#147;anonymous&#148;, and another way using UserId and Password.<P>
Once bound to the LDAP server, you can search. Be careful because the LDAP Perl API calls return result objects, regardless of whether the method call failed or not. To understand whether everything's okay, you can use the &#147;code&#148; method ($Result-&gt;code) which returns the error code, where 0 means OK. If it's true (not equal 0) in the listing we print the error message via the method &#147;error&#148;.<P>
<B>Format the Search Results</b><p>After finishing the search call, you have a handy tool to work with. In the previous example, you used the tool to plot out (in plain text) everything the object contains, but maybe that's not really what you wanted. Assume you only want the name, phone number, and email of the persons satisfying the query. In Perl there's always more than one way to do it. The first is to print out only what you wanted and substitute the <B>dump</B> method in the for each loop with the following:<P>
<pre>
foreach $entry ($Result-&gt;all_entries) {
   printf("Name: %s\n",$entry-&gt;get('cn')) ;
   printf("Name: %s\n",$entry-&gt;get('given \
          name')) ;
}  
</pre>
The second way is to resctrict the search by using the <B>@attrs </B>parameter in the search call. (See listing 2.) This parameter is a pointer to an array and indicates the entries in which we are interesed in the database. This way allows you to get from the found entries all attributes except for the Distinct Name (DN). To get the DN, you have to use the method <B>dn</B>, as shown in the example.<P>
There are a couple of other useful search methods. You can get the number of found entries with the <B>count</B> method:<P>
<pre>
printf (" Found : %d records\n",$Result-&gt;count()) ;
</pre>
You can also put the whole result of your query in a complex data structure. This is achieved with the method <B>as_struct</B>. The call <B>as_struct</B> gives you back a pointer to a hash. The keys of this hash are the Distinct Names (DN). Meanwhile, the values of the hash are pointer to Hashes containing the key/value pairs of the data.<P>
Note that in LDAP a query is called a &#147;filter&#148;. A filter is the condition all entries must satisfy in order to be elected by the query. Another term is &#147;base&#148;, which is the node in the hierarchical object tree where the search begins. <P>
<B>Entering Data</b><p>Previously, I mentioned a self-service application where the user enters data. To do this, there's the &#147;add&#148; method, but to use it you must understand a little detail of LDAP's architecture. LDAP is a database with the knowledge of objects and inheritance. This means that every entry knows exactly where it fits in the hierarchy. If you want to insert a new entry, you must explain this structure. Do this by using an array, such as:<P>
<pre>
top -&gt; person -&gt; organizationalperson \
   -&gt; inetOrgperson
</pre>
This means, that an &#147;inetOrgperson&#148; is a kind of &#147;organizationalperson&#148;, which gets properties from &#147;person&#148; and from the &#147;top&#148; object. In Perl this sounds like:<P>
<pre>
@objectclasses = ['top','person',   \
   'organizationalperson','inetOrgperson'] ;
</pre>
As above, we create a new LDAP object, call the &#147;bind&#148; method on it, and insert the new object in the database using the &#147;add&#148; method. At the end, disconnect from the database by using the method &#147;unbind&#148;. Listing 3 shows how to insert a new object in the database.<P>
<B>Keep Data Up-to-Date</b><p>It frequently happens that some user data, such as email, changes or that a user simply wishes to change her password.  Obviously this happens via Web, so you need two things:<P>
<P>
&#149; An application consisting of one HTML page generated on the fly and a CGI script to actually modify the user data. <P>
&#149; An authentication mechanism to guarantee that the user can see and change data only regarding herself.<P>
<P>
<B>HTML Page/CGI</b><p>The HTML page is easily produced by a CGI script using the CGI module from Lincoln Stein:<P>
<pre>
http://stein.cshl.org/WWW/CGI
</pre>
As shown in Listing 4, it's just one query to put user data building the LDAP object into the HTML page. The LDAP object is found using the unique userid as a filter. The userid is obtained from the authentication mechanism, which will be covered later. Once the user has finished the modification of her data and clicks on the submit button, the second CGI script (Listing 4) comes into action -- it simply uses the <B>ldapmodify</B> method to update the user data.<P>
You may have noticed that <B>ldapmodify</B> needs to specify what type of change it has to apply on the object. There are three possibilities: add, modify, and delete. Add means you add a new property to the object; modify means you change an existing one; delete means you erase a property. For details, see Graham Barr's module Bundle::Net::LDAP, which you can easily find with the search utility of CPAN:<P>
<pre>
http://theoryx5.unwinnipeg.ca/   \
   CPAN/cpan-search.html
</PRE>
<B>Authentication </b><p>Fortunately, Apache has the <B>mod_ldap_auth</B> module that does exactly what we want. See Listing 5 for the configuration. Line 3 specifies the directory that contains the application. Line 10 tells the Web server where the LDAP server is listening. Line 11 specifies that only valid users can connect to this particular directory. We could also require that only memebers of a particular user group can connect (e.g., require group admin) and so on. See:<P>
<pre>
http://www.rudedog.org/mod_ldap
</pre>
(Dave Carrigan: <B>mod_ldap</B>) for more information about the API and the location of software download. The Web server also puts the userid in the environment variable for later use. This is necessary for the CGI script in Listing 4. See the line: <P>
<pre>
$Uid=$ENV{&#145;REMOTE_USER'}
</pre>
<B>Data Maintenance </b><p>The self-service application allows the user to subscribe herself, change her data, change password, and launch applications after previous authentication. Once authenticated, the Web server can produce dynamic HTML pages, depending on the user access rights (e.g., using PHP). With the help of the Perl libraries, we can easily build the scripts necessary for the administration: an AddUser script, a ModifyUser script, a DeleteUser script, and as mentioned previously, a SearchUser script.<P>
Another important utility is the reset password script. The reset password script may have various forms, depending on your security requirements. You might provide a &#147;forget password?&#148; button on the authentication request page, or when you notice that authentication failed. When the user clicks on this button, you can automatically send the password to her email address, or you can set the password to a determined value (such as the UserId, or a randomly generated value). The user should be instructed to then change her password immediately. You can set up a password reset robot that, on receiving email, launches the Reset Password utility.<P>
For some reason, you might wish to export and then reimport your database. Listing 6 shows the example for the export and import utility.<P>
<B>Password Encoding</b><p>Sometimes users don't want to have a lot of passwords, and it's common for your users to have one password for several accounts. That password should not be stored in plain text in the database. When your application inserts new data into the database, it must convert the user-supplied password in an encrypted form. You can use the <B>Digest::SHA1</B> module available from the CPAN and choose the format you want to use. When you put the encrypted password into the database, you don't have to convert the password every time the user authenticates herself. LDAP is smart enough to understand if, and how, the password has been encrypted.<P>
<B>Conclusion</b><p>LDAP is a standard protocol that permits the sharing of information between different applications. It allows the centralization of authentication, thereby avoiding password proliferation. It has powerful interfaces in a number of languages, including Perl, which is one of the most versatile scripting languages. In Perl + Net::LDAP, you can not only write user-friendly administration scripts, but also entire, safe Web applications to insert and update entries in the database.<P>
Regarding the self-service application and how to use the Net::LDAP library, I have two observations -- this application is only a basic example and is far from complete. You may not want to suddenly activate the user account, but only do so after having controlled some user data. Second, as Larry Wall says, there's more than one way to do things. There is, for example, the Netscape LDAP SDK delivered with the Netscape Directory Server. The SDK is a comfortable Perl library that allows you to do the same things in slightly different syntax.<P>
For more information about LDAP, the software development kits, and the API, refer to <I>Programming LDAP, </I>by Mark Wilcox (Wrox Press).<P>
<p>
<h1>About the Author</h1><p>
Reinhard Voglmaier studied physics at the University of Munich in Germany and graduated from Max Planck Institute for Astrophysics and Extraterrestrial Physics in Munich. After working in the IT department at the German University of the Army in the field of computer architecture, he was employed as a Specialist for Automation in Honeywell and then as a UNIX Systems Specialist for performance questions in database/network installations in Siemens Nixdorf. Currently, he is the Internet and Intranet Manager at GlaxoWellcome, Italy. He can be reached at: rv33100@GlaxoWellcome.co.uk.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
