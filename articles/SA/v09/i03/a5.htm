<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i03: Script Manager</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a5_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2000/mar2000.tar"><b class=codeListing>mar2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Script Manager</H1><p>
<P>Ed Quillen
<P>Scripting is an invaluable tool for UNIX systems administrators. We constantly fix complex problems with a script here and a script there to keep everyone happy. When a seemingly insignificant and very hard-to-find script breaks for some odd reason, the whole house of cards can fall. The person who wrote that script may be somewhere in Redmond selling penguin dolls or something, and you have to fix the problem. Collecting the following basic pieces of information about scripts will help you solve most scripting problems:<P>
<P>
&#149;  What does the script do? <P>
&#149; How is it used? (interactive, batch, or daemon) <P>
&#149; What are the script inputs? <P>
&#149; What are the script ouptputs?<P>
&#149; Which scripts are its parents and which are its children?<P>
&#149; When has this script been used?<P>
<P>
The classic way to find these answers is to have a documentation standard in which the author is expected to include information about the script somewhere within the script itself. The problem is that it is not fun to write that comment block and sys admins are not developers. It can be very tempting to move on to the next problem as soon as you get the script working. I know because I have left scripts undocumented in the past.<P>
Script Manager (or SM) is a tool I wrote to try to make scripting more manageable. The tool mainly does this by requiring the collection of basic information about a script before that script is usable. This makes the act of writing a script and jamming it into production a bit more time consuming, but it is well worth the effort.<P>
<B>What is SM?</b><p>SM is a Perl program written in eight different Perl modules along with a main program. To allow <B>ftp</B> access to repositories, the <B>libperl</B> modules written by Graham Barr are included as well. SM was developed and tested on both Solaris and Linux but should also work on any flavor of UNIX as long as Perl 5.002 or greater is installed on the system.<P>
SM has the following features:<P>
<P>
&#149;  Provides a hierarchical structure similar to a directory structure for storing scripts.<P>
&#149;  Allows for the detailed definition of shells outside of scripts. This increases the portability of scripts from system to system by removing the shell definition from inside the script itself. <P>
&#149;  Tracks script dependencies by recording parent and child script dependencies at execution time. <P>
&#149;  Controls the process environment before the script runs, including the working directory, umask, and detailed control over all environment variables. <P>
&#149;  Logs all script executions to either a file or a program (such as <B>logger</B> for sending the information to <B>syslog</B>). Current data collected is: start time, stop time, username, uid, complete command string with arguments, parent process, and return code. <P>
&#149;  Allows for the storage of documentation along with the script.<P>
&#149;  Supports an <B>apropos</B>-like command for searching documentation and script descriptions. <P>
&#149;  Improved script browsing due to script descriptions and an indicator showing whether documentation exists for the script in question. <P>
&#149; Can easily manage binary executables. <P>
&#149;  Can be used to restrict which users on which hosts are allowed to execute a script. <P>
&#149;  Allows for the use of <B>ftp</B> to access central repositories when NFS is not an option.<P>
&#149;  Allows for, and in most cases requires, the following information to be kept about scripts entered into SM:<P>
<P>
&#149; Time created <P>
&#149; Time modified<P>
&#149; Owner<P>
&#149; Owner uid <P>
&#149; Owner gid <P>
&#149;  Shell type -- Which shell (if any) to use and with what options.<P>
&#149;  <B>cwd</B> -- Which directory to change to (if any) before running the script.<P>
&#149; <B>umask</B> -- What to set the <B>umask</B> to (if at all).<P>
&#149;  Environment modifications -- Details about which environment variables to delete, replace, append to, prepend to, or leave alone. <P>
&#149;  Script type -- Whether interactive, scheduled batch, ad hoc batch, or daemon. <P>
&#149; Importance -- Low, medium, or high <P>
&#149; Audit level -- Low, medium, or high <P>
&#149; Author name<P>
&#149; Authored date<P>
<B>How to Install and Configure SM</b><p>Installing SM is as simple as running the <B>install.sh</B> script that comes with SM. It will prompt you for a directory to store the SM packages and files and also a directory where the main executable <B>sm</B> should be placed. The SM executable is customized to store the location of your Perl binary and the SM package directory by the install script.<P>
To configure SM, you will need to define at least one, and possibly multiple, repositories that are just UNIX directories or standard <B>ftp</B> URLs for remote access to repository directories. You should also define various shells. Defining shells is not a strict requirement but provides a lot of flexibility because it allows you to attach a generic name of a shell to a script and use that name to set exact shell paths and options. Some of the common shells are configured by default. You can use the <B>list_shells</B> command to see the current list. In addition to repositories and shells, there are a few other options that can be set.<P>
Configuring is done mainly through <B>sm.conf</B> files. The following <B>sm.conf</B> files are read in the order listed:<P>
<PRE>
/etc/sm.conf
/etc/sm.conf.&lt;HOSTNAME&gt;
~/.sm.conf
~/.sm.conf.&lt;HOSTNAME&gt;
</PRE><P>and the file pointed to by the <B>SM_CONF_FILE</B> environment variable. To define repositories in the config files, use the following syntax:<P>
<PRE>
repos &lt;repository_name&gt; = &lt;absolute \
                           directory path&gt;
repos &lt;repository_name&gt; = &lt;ftp_url&gt; (
ftp://username:password@hostname/directory)
</PRE><P>To define a shell in the config files, use the following syntax:<P>
<PRE>
shell &lt;shell_name&gt; = &lt;shell def&gt;
</PRE><P>
<B>&lt;shell def&gt;</B> must contain an absolute path to a shell program and the following two macro strings for placing the shell script and arguments, respectively: <B>{file}</B> and <B>{args}</B>. For example:<P>
<PRE>
shell perl_strict=/usr/bin/perl -w {file} {args}
</PRE><P>there are config file options:<P>
<PRE>
default_repos=&lt;reposname&gt;       (default: default)
log_file=&lt;filepath or |command&gt;  (default: /var/tmp/sm.log.&lt;USERNAME&gt;)
retain_env_var=&lt;varname&gt;        (keep this env variable during run
                                 if set to wipe all vars)
dont_wipe_env_vars_by_default=0|1 (default:0)
use_runners_umask_by_default=0|1  (default:0)
</PRE><P>The following environment variables can be used to configure the SM run:<P>
<P>
<B>SM_CONF_FILE</B> -- <B>sm.conf</B> file to use in addition to the defaults. <B>SM_REPOS</B> -- Which defined repository to use (instead of &#147;default&#148;). <B>SM_ REPOS_DEF</B> -- Undefined repository directory to use; overrides <B>SM_REPOS</B>.<P>
<B>Running SM</b><p>SM is currently a command-line based program that allows you to do most of the obvious functions that would be needed for traversing a hierarchical structure and creating, deleting, modifying, executing various scripts and levels (<B>level</B> is just the term I use for directories in SM). Figure 1 shows a list of the functions that can be performed by the <B>sm</B> command:<P>
<B>Conclusion</b><p>Although SM tackles some of the basics when it comes to script management, there are quite a few features that would make it more useful, such as better reporting functions, more auditing options such as capturing environment variables and STDERR, version control for the scripts, and a menu interface. I hope to have a few of these items implemented by the time you read this article and will be looking for help with the others. Feel free to send me email. Happy scripting! <P>

<h1>About the Author</h1><p>
When not working on consulting projects for Sprint Paranet, Ed spends his time with his wife Jill and 3 year old daughter Megan. He can be contacted at ed@quillen.net.

<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
