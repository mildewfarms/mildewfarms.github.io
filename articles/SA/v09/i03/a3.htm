<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i03: LogViewer</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a3_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a3_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a3_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a3_s1.htm">Sidebar 1</a></span></td>
		<td><a href="../../../../source/SA/2000/mar2000.tar"><b class=codeListing>mar2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>LogViewer</H1><p>
<P>Darrin Husmann and Andy Sackrieter
<P>
On our work as both consultants and systems administrators, we recognized the potential of log files as a valuable nugget in the enterprise systems rhetoric. System and application log files are where competent systems administrators usually find the true cause and applicable solution protocol to most system and application issues. After exhaustive searches, we realized that an easy-to-use, semi-autonomous log viewing application that offers a client-graphical user interface did not exist. So, while learning the Perl programming language, we wrote the application described in this article.<P>
LogViewer presents distributed log files via a centralized desktop application. A LogViewer instance is composed of a minimum of three elements, each containing unique and uniform sub-modules. The first element is the Obelisk, or master server. The purpose of the Obelisk is to act as the networking server and the primary database administrator, to monitor text and log files for exception or alarm conditions, and to keep the status of the instance current. The second element is the auxiliary server, one server per node being monitored. The purpose of an auxiliary server is to keep configuration data applicable to the node current, maintain communication with the Obelisk, and analyze log files for exceptions or alarms, and to tail applicable logs on that node. The third element is the Client/Graphical User Interface, which differentiates LogViewer from the other log-monitoring applications. The client offers three desktops of two log files each (six log files total), a simple text editor, and a menu from which users can dynamically select the log files to monitor. The primary benefits of the Client are:<P>
<P>
&#149;  Decreased chance of reading error -- During emergencies, the client makes selection and viewing almost foolproof.<P>
&#149;  Increased security -- An operator does not need a system login to each node that has log files to monitor. Because of the LogViewers' custom RPC communication architecture, a desktop shortcut (on Windows or UNIX) is enough to launch the client.<P>
&#149;  Decisive access to critical information -- Having six logs in one application, with the ability to easily monitor even more (just one click to view another log file), simplifies gathering information. Additionally, the stop/start buffer option allows the user of the client application to temporarily stop or resume scrolling to assess a situation.<P>
&#149;  Built-in easy editor -- The built-in text editor and associated bindings allow a user to produce a running log of events, complete with actual log file entries, for more complete reviews of critical events.<P>
<P>
The following sub-elements are instrumental in the composition of a robust instance:<P>
<P>
&#149;  Alarm monitor -- Analyzes incoming text from logs and nodes for exceptions. Upon receiving an exception, it runs an associated system command on either the Obelisk or the Auxiliary server node.<P>
&#149;  Frequency monitor -- Same as the alarm monitor.<P>
&#149; <B> ftp</B> module -- Used to periodically issue configuration files to subscribers, which allows dynamic updates and keeps the entire application in sync.<P>
&#149;  Status module -- Monitors instance status and attempts to correct exceptions.<P>
<P>
In the next sections, we will show sub-modules operation, describe how they work, then use these to build the above elements. Figure 1 shows a screen dump of LogViewer in action. Figure 2 is a screen dump of LogViewer on a UNIX platform, and Figure 3 is an illustration of how all these processes work together as a LogViewer instance.<P>
<B>Fundamental Elements<P>
Obelisk Server</b><p>The Obelisk Server is composed of the following sub-modules:<P>
<P>
&#149;  RPC/communication module<P>
&#149;  System integrity module<P>
&#149;  Database module<P>
&#149;  Alarm module<P>
&#149;  Configuration governance module (i.e., <B>ftpr</B> and database code)<P>
<B>Auxiliary Servers</b><p>The auxiliary servers are composed of the following sub-modules:<P>
<P>
&#149;  RPC/communication module<P>
&#149;  Tailing module<P>
<B>Client Servers</b><p>The client servers are composed of the following sub-modules:<P>
<P>
&#149;  RPC/communication module<P>
&#149;  Graphical interface code<P>
<B>RPC/communication module</b><p>The purpose of this is to provide a uniform, robust communication platform for the application. This module uses a modified version of the RPC code in the book <I>Advanced Perl Programming</I> (Sriram Srinivasa, O'Reilly Publishing, 1997).<P>
<B>Program Files</b><p>Configuration of these files will be explained in the next section, Installing LogViewer. The application gets its configuration data (port number, IP address of Obelisk, etc.) from the file <B>../cfg/setup.ini</B>. Listing 1 shows a typical <B>setup.ini</B> file. This file will be discussed in the Installing LogViewer section. The application knows which logfiles to monitor by reading the file <B>../cfg/SUBSCRIBER_TABLE</B>. Note the difference between UNIX and Win32 files and that the port is saved for later versions of LogViewer, (i.e., not used).<P>
<PRE>
# Notes:
# 1.note that the files for win32 should still be of the form 
# C!/windows, with the drive letter in caps and a shebang (!)
# being subbed for the colon
#
# Format: ip:local_file:port:master_ip
#unix files
24.6.30.3:/var/log/syslog:2112:24.6.30.3
24.6.30.3:/tmp/one:2112:24.6.30.3
24.6.30.3:/tmp/511:2112:24.6.30.3
24.6.30.3:/export/home/greycat/prod/log/gl_syslog_cli:2112:24.6.30.3
#wintel files
24.6.30.9:C!/apps/balsa/prod/log/gl_syslog:2112:24.6.30.3
24.6.30.9:C!/apps/balsa/prod/log/gl_syslog_cli:2112:24.6.30.3
</PRE>
<P>The application knows which files to alarm by reading the file <B>../cfg/filters</B>.<P>
<PRE>
#
# this allows you to take a specified action when a string appears 
# in the monitored files of a given node.
#
# Notes:
# 1.note that the files for win32 should still be of the form 
# C!/windows, with the drive letter in caps and a shebang (!) 
# being subbed for the colon
#
# Form: ip:string:command:event_name(default is
# event0):execute_location(local or on master server)
#
# use the balsa_filter_bldr command to build additional filters
#this will exec rm /tmp/nothing/* (if rm is not in ../cfg/ua_commands)
24.6.30.3:darrin:/usr/bin/rm /tmp/nothing/* :event0:m
#explain: if the text madeline occurs in a monitored file on 24.6.30.3,
#do the command /usr/bin/echo "gluphus2". The l (or m) at the end
#specifies to execute the command on the master (m) or the local server,
#here 24.6.30.3.
24.6.30.3:madeline:/usr/bin/echo "gluphus2" :event0:l
24.6.30.9:cheryl:/usr/bin/echo "TEST42k" :event0:m
24.6.30.9:cheryl:echo "TEST#221ab" :event0:l
24.6.30.9:steve:echo "hello":event0:l
</PRE>
<P>The application performs frequency analysis by reading the file <B>../cfg/frequency</B> (Listing 2).<P>
<B>Installing LogViewer</b><p>1.  Install Perl (version 5.004 or later). Perl is available from <B>www.perl.com</B> and <B>www.activestate.com</B> (for Win32) on each node that will be running LogViewer code.<P>
2.  Install the following Perl modules on each node that will be running LogViewer code. (Most modules are available from the sites listed in subtask #1, except <B>RPC.pm</B> and <B>MSG.pm</B>, which can be obtained from the O'Reilly <B>ftp</B> site for the book <I>Advanced Perl Programming</I>:<P>
<P>
&#149; <B> libnet</B><P>
&#149; <B> RPC.pm</B><P>
&#149; <B> MSG.pm</B><P>
&#149; <B> FreezeThaw.pm</B><P>
&#149; <B> Crypt.pm</B><P>
&#149; <B> Tk.pm</B><P>
<P>
3.  Download the Balsa LogViewer code from<BR>
<B>http://www.sysadminmag.com</B> or <B>http://dthusma.balsa-tech.com</B>.<P>
4.  Review the LogViewer README file and the <B>../bin/README.addm</B> file.<P>
5.  Add a user &#147;balsa&#148; (with password &#147;balsa&#148;) to an <B>ftp</B> server on the Obelisk. Note that the entry <B>ftp_source</B> in <B>../cfg/setup.ini</B> must match this verbatim.<P>
6.  Run the script <B>../bin/balsa_install.pl</B> (i.e., perl <B>balsa_install.pl</B>).<P>
7.  Review the files <B>../cfg/setup.ini</B> and <B>../cfg/SUBSCRIBER_TABLE</B> because these often require custom settings. The <B>setup.ini</B> file defaults to itself as master server, port 2111, and its bin directory as containing the desired Perl scripts (<B>balsa_aux.pl</B>, <B>balsa_master.pl</B>, <B>balsa_client.pl</B>). Therefore, you should review this file for proper settings.<P>
8.  Contact your network administrator to verify a valid port number is entered in <B>../cfg/setup.ini</B>. <B>s_port=2111</B> is the default setting.<P>
9.  Start the Obelisk:<P>
<PRE>
perl balsa_master.pl
</PRE>
<P>   We recommend that you then start the master timer, <B>balsa_cycle_master.pl</B>. <B>Balsa_cycle_master</B> kills the master after <B>master_kill_time</B> seconds to limit stack size. To restart the master application, reference the example in the <B>../scripts</B> directory. Note that only one master can run at any time -- the system won't allow more than one server, but more than one <B>aux_server</B> or client can run simultaneously.<P>
10.  Start each auxiliary server:<P>
<PRE>
perl balsa_aux.pl
</PRE>
<P>11.  Start the client:<P>
<PRE>
perl balsa_client.pl -l logon_name
</PRE>
<P>   Note that the <B>logon_name</B> will allow <B>balsa_api</B> to control this window and that <B>logon_name</B> will also look in the directory <B>../profiles</B> for itself and customize its GUI appearance accordingly.<P>
12.  Start the frequency daemon on the master server:<P>
<PRE>
perl balsa_freq_analysis.pl
</PRE>
<P>This application runs only once. To facilitate periodic frequency monitoring, it is best to put this into a <B>while()</B> loop such as:<P>
<PRE>
        $leave=1;
        while ( $leave ) {
system("perl balsa_frequency.pl -c \<BR>
  /export/home/greycat/balsa2/bin/balsa_freq_analysis.pl");
            sleep 120; #number of seconds to sleep
        }
</PRE>
<P>This application will serve as a frequency daemon sufficient for most needs -- if more granular needs occur, adjust the sleep number accordingly.<P>
Once the Obelisk is started, it must initialize the environment. This includes such tasks as <B>ftp</B>ing the configuration files to all subscribing nodes, reading in what files to watch for, what databases to configure, and what alarms to prepare for.<P>
Note that the Obelisk will <B>ftp</B> configuration files over to all subscribers. Additionally, <B>ftp</B> is then used periodically to update nodes, ensuring that all nodes have uniform configuration data and that the original configuration data resides in <B>../cfg</B>, while the transferred data resides in <B>../cfg2</B>. (This is because the Obelisk can also perform the Auxiliary server duties and will periodically <B>ftp</B> to itself.)<P>
To ready the database on the Obelisk, another process is called. This uses standard Perl databases. Notice that this takes into account the log files and nodes to be monitored as per the file <B>../cfg/SUBSCRIBER_TABLE</B>. The Perl databases reside in the directory <B>../db</B>. A limitation of this is that many Perl database structures exhibit decreased system performance when size exceeds 1Mb. To accommodate this limitation, you can run a database truncater in the system crontab or scheduler. Review the README and <B>README.addm</B> for use of the truncator application (<B>balsa_dbtrunc.pl</B>).<P>
The rest of the operations performed by the Obelisk, alarm and frequency analysis, system integrity, etc., are performed as corollary events to receipt of new data from auxiliary servers and timed operations.<P>
<B>The Client</b><p>The client offers the most options of all the modules. Most of the features of the Client GUI are shown in this section:<P>
<P>
&#149;  Logon -- Balsa LogViewer does not require you to issue a logon. By default, it assigns you the logon &#147;balsa&#148;. However, a unique logon is beneficial in its ability to use the <B>api</B> (see the Options section).<P>
&#149;  Log menu selection -- This allows a user to specify which log will be viewed on a desktop. The menu resides on desktop four, beside the text editor. To select a log or desktop, specify the desktop, then double click on the desired log file to view.<P>
&#149;  Text editor -- Note that when you subscribe to a desktop, it gives historical log data up to <B>db_buffer_time</B> seconds.<P>
<B>Starting and Stopping <BR>
Real-Time Updates</b><p>&#149;  Stoplight button -- This stops and resumes scrolling of logfiles. While logfiles are not scrolling, all data is written into a buffer. This buffer is dumped when scrolling resumes.<P>
&#149;  Bindings -- Note that a double-click on a log entry automatically puts it into the text editor. This can be verified by looking at the text above the log portal on which the log file is running and the verification text that reports successful connection to the logfile. Depending upon user needs, cut and paste, and OLE integration can be added to the Client.<P>
<B>Options</b><p>LogViewer offers many options. The API interface allows another application to launch LogViewer to a specified log set automatically. This is used in alarms and batch job failure. Here is the format for enacting an API session (assuming a client GUI is logged in, with a username &#147;darrin&#148;) where it automatically shows the log <B>/tmp/one</B> on the node 192.168.3.33 on the right side of its first desktop:<P>
<PRE>
perl balsa_api -i "darrin;right: desktop_1;192.168.3.33;/tmp/one"
</PRE>
<P>Note the quotes around the submitted argument. It is important to note in Windows systems that the colon in the drive should be substituted with an exclamation point (!).<P>
To log on as a given user, use the following command:<P>
<PRE>
perl balsa.pl -l darrin
</PRE>
<P>This will also look for a profile in the directory <B>../profiles/</B> for darrin and customize the GUI accordingly. For an example of customization, refer to Figure 3.<P>
<B>Caveats</b><p>LogViewer will work on both Win32 and UNIX systems, even allowing an instance to have both Win32 and UNIX elements simultaneously. However, the following issues must be considered when porting the Perl source code back and forth:<P>
<P>
&#149;  The different file structure between UNIX and Win32 will result in different changes in the configuration setup and files. Additionally, the &#147;!&#148; is substituted for the &#147;:&#148; in the configuration files.<P>
&#149;  The GUI EOL statements have trouble between platforms. This is just a visual limitation and does not degrade system performance.<P>
&#149;  This version of LogViewer has limitations on its frequency analysis time-scope and resolution of addresses within the filter viewer.<P>
<P>
If you wish to evaluate Balsa LogViewer in a production environment, there are other modules involved -- a Perl cron application, a control console, system log viewers, and configuration of the application. See the README files and the Web site for updates and offerings.<P>
<B>Conclusion</b><p>LogViewer offers a simple solution to remote system monitoring of logfiles via a semi-secure environment. Bypassing command prompts and manual typing, LogViewer decreases the chance of operator error in shell operations and incorrect file monitoring during times of crisis. The API, customization, self-recovery, and versatility make LogViewer a great accessory to existing enterprise system monitoring and batch-file processing applications. <P>
<p>
<h1>About the Author</h1><p>
Darrin Husmann is a systems analyst with AT&amp;T wireless and principal architect with Balsa Software. He can be reached at: dthusma@dthusma.balsa-tech.com.<P>
Andy Sackrieter is a systems analyst for AT&amp;T wireless in Minneapolis, MN.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
