<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i07: Pushing Corporate Email out to Wireless Devices</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/jul2000.tar"><b class=codeListing>jul2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Pushing Corporate Email out to Wireless Devices</H1><p>
<P>Pam Rissmann
<P>

For the most part, email is delivered to employees' desktop computers. However, what happens when important email is delivered and one of the key decision makers is out of the office? Or if a meeting at 2 P.M. is cancelled, but some of the attendees are offsite when the cancellation email is delivered? To address these issues, many companies extend email to wireless devices like pagers, cell phones, and PDAs, allowing urgent and timely email to reach recipients no matter where they are. This article will explain how Sendmail can be linked with wireless messaging software to push email out to wireless devices.<P>

<B>Quality of Service</B><P>

Several wireless carriers provide email gateways where you can send an email to <B>pin_number@wireless_carrier.com</B>. This is sometimes convenient, however, it lacks the necessary control and reliability when wireless email messages are a mission-critical part of a company's way of doing business. As an alternative, companies use wireless messaging software that can provide robust logging, fail-over, and analysis. In this article, I will discuss extending Sendmail to use as a wireless messaging engine that provides the QoS features needed for corporate communications. For the sake of the examples, I'll refer to generic messaging software as <B>msg_sw</B>.<P>

<B>Extending Sendmail to Wireless Devices</B><P>

Most UNIX hosts utilize Sendmail for managing the delivery of email messages. Messaging software can be integrated tightly with the Sendmail facility. Before performing this integration, you will need to decide which of the following integration strategies is best for you:<P>

<ul>
<li>Provide a different dedicated email address for each pager. All email sent to the given email address will be automatically forwarded to the pager.</li>
<li>Perform text pattern matching on incoming email for individual email accounts and selectively forward email to the individual's pager.</li></ul></P>

<B>Dedicated Email Address for Each Pager</B><P>

The Sendmail alias file provides a mechanism for routing email to a program. Messaging software utilizes this facility to allow forwarding of messages to pagers. The Sendmail alias file (normally located at <B>/etc/aliases</B>) has the following format:<P>

<pre>
my-pager-email-alias: |"/usr/local/msg_sw/bin/email_wrapper mypager"
</pre>

The email address <B>my-pager-email-alias</B> is a valid email address. If a message is sent to this address, the entire email will be piped to the program (or shell script) shown after the pipe symbol in quotes, (e.g., <B>/usr/local/msg_sw/bin/email_wrapper</B>). I'll show an example of an email wrapper script shortly. Note that &#147;mypager&#148; is the recipient's pager name.<P>
Once you have created an alias for each of your pagers, you must compile the aliases file using the <B>newaliases</B> command. Usually, typing <B>newaliases</B> with no parameters or argument as root will compile your alias file. See your UNIX man pages for help in running this command. You will also need to create a wrapper script that will parse the email and send it to the pager using your messaging software. The following is a sample wrapper script for this purpose:<P>

<pre>
#! /bin/sh
#
if [ "$1" = "" ]
then
     echo "usage: email_wrapper &lt;pagername&gt;"
     exit
fi

# this line sends the message body to the
# messaging software (msg_sw) command line program
sed -e '1,/^$/ d' | /usr/local/msg_sw/bin/msg_sw $1 -
</pre>

This script will strip the header from the email and send the body of the message to the pager that was given as the argument to the script. Place this script in <B>/usr/local/msg_sw/bin/email_wrapper</B> (this path will vary from site to site) to be consistent with the Sendmail alias defined above. The <B>email_wrapper</B> sends the email message to the <B>msg_sw</B> command, which will queue the message and send it to the desired carrier.<P>

<B>Selectively Forwarding Email Based on Text Pattern Matching</B><P>

Using the email utility, <B>procmail</B>, you can send email to pagers based on certain criteria, like a keyword in the email's subject line. If you haven't used <B>procmail</B> before, you should get acquainted with it. It is an extremely powerful tool that can be used for many different purposes. For this application, we will forward emails to <B>procmail</B> and use its powerful string matching capability to selectively forward email onto your messaging software.<P>
Start by creating a file named <B>.forward</B> in the user's home directory as follows:<P>

<pre>
# forward all email to procmail
|"/tools/local/bin/procmail"
</pre>

This <B>.forward</B> file forwards all incoming email to the <B>procmail</B> tool.<P>
You will need to create a file named <B>.procmailrc</B> in the user's home directory. A good first step for testing is:<P>

<pre>
PATH=/usr/local/bin:/bin:/usr/bin:/etc/:/usr/contrib/bin
DEFAULT=/usr/mail/user
MAILDIR=$HOME
LOGFILE=$HOME/procmail.log
VERBOSE=on

# send selected messages to the pager
:1Hbc
^Subject:.*pager.*
|/usr/local/msg_sw/bin/msg_sw mypager -
#
# all email placed in spooling file for normal reading
:0
/usr/mail/user
</pre>

In this case, we perform a pattern match on each incoming email and, if the subject of the email contains the string &#147;pager&#148;, it will be forwarded to the pager &#147;mypager&#148;. The <B>1Hbc</B> code is interpreted as follows:<P>
<ul>
<li><B> 1</B> -- One pattern match line follows</li>
<li><B> H</B> -- Perform the match on the email header only</li>
<li><B> b</B> -- Pipe the body of the email only to the pager</li>
<li><B> c</B> -- Carbon copy the email so it shows up for email reading as well</li></ul></P>

Following the code line, we see the pattern match line, followed by the action line. The action line starts with the pipe character <B>| </B>indicating the output should be piped to the <B>msg_sw</B> command for forwarding to the pager. Additionally, we also put all of the incoming email into the normal email spooling file so the users can read the email with their favorite email program as usual. The second control code <B>:0</B> is interpreted as follows:<P>

<ul>
<li><B> 0</B> -- No pattern match lines, process unconditionally</li></ul></P>

Following the code line, we see the pathname for the email spooling file to which <B>procmail</B> will append all email.<P>

<B>Conclusion</B><P>

The two email-to-wireless device integration methods described above are specific to the UNIX Sendmail program. However, this general email-to-wireless messaging engine integration can be accomplished with almost any email program. The email program just needs to support a mechanism for passing an email message to a program. Most UNIX email software supports this. Once the integration is complete, the corporate mobile workforce is ready to be looped into corporate communications, instantly and anywhere.<P>

<h1>About the Author</h1><p>
Pam Rissman is vice president of customer support and services at MobileSys, Inc. (http://www.mobilesys.com). MobileSys develops very reliable and highly scalable wireless messaging solutions for UNIX and Windows NT platforms.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
