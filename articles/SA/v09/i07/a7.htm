<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i07: As Easy As It Gets</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_t1.htm">Table 1</a></span></td>
		<td><span class=navbarLink><a href="a7_t2.htm">Table 2</a></span></td>
		<td><a href="../../../../source/SA/2000/jul2000.tar"><b class=codeListing>jul2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>As Easy As It Gets</H1><p>
<P>W. Curtis Preston
<P>
I send a &#147;welcome aboard&#148; email to every new consultant that joins our company. After issuing the standard welcome statements, I issue a warning. Although this warning holds especially true for consultants, I'd like to pass this warning on to you -- Whatever you do, make sure you have a good backup of a system before you start working on it.<P>
I can't tell you the number of times that I've seen messages on Usenet that say something like, &#147;This morning we added patch 49430-32 to our system, and the system panicked halfway through the install. That's when we discovered that this system's root disk wasn't being backed up by our backup system. Does anybody know of any disk recovery companies, and do you know how much they cost?&#148; Being forced to use a disk recovery company is a pretty rough way to learn that you need to back up systems before working on them. These companies are very expensive, they give you no guarantees that the recovered data will be usable, and even rush service will include overnight shipment each way. One company I know recently lost an important disk drive only to find out that they did not have a backup of it. They sent their disk to a disk recovery company. By the time the data was recovered, they had already recreated it.<P>
Disk recovery companies are the perfect examples of necessity being the mother of invention. If not for them, there would be a lot of other companies completely out of luck. It's just that no matter how good they get at their job, or how much they reduce the cost of the service, they'll never beat a recovery from a good backup. Okay, we know that backups are good, what's next? Many people want to create a good backup before working on a system, but they don't have the time or the expertise to do so. This article introduces one of my favorite tools, <B>hostdump.sh</B>. This tool makes backup about as easy as it gets.<P>

<B>First, a Note From Our Sponsor</B><P>

Before we talk about <B>hostdump.sh</B>, though, I'll review the utility on which it is based, <B>dump</B>. Although <B>hostdump.sh</B> does all the work for you, it's important to understand the format of the backup that it will create. The first thing to understand is what your <B>dump</B> command is, and what its options are. See Table 1 for a listing of <B>dump</B> commands on various UNIX versions.<P>
<B>Syntax of the dump Command</B><P>

I'll start with the basic <B>dump</B> commands:<P>

<pre>
#  dump levelunbdsf blkg-factor density size device-name file_system
</pre>

The following are examples of running this command:<P>

<ul>
<li>To create a full backup of <B>/home</B> to a local tape drive called <B>/dev/rmt/0cbn</b>:</li></ul></P>

<pre>
  #  dump 0unbdsf 126 141000 11500 /dev/rmt/0cbn /home
</pre>

<ul>
<li>To create a full backup of <B>/home</B> to an optical or CD device called <B>/backup/home.dump</b>:</li></ul></P>

<pre>
  #  dump 0unbdsf 126 141000 11500 /backup/home.dump/home
</pre>

<ul>
<li>To create a full backup of <B>/home</B> to the remote tape drive <B>/dev/rmt/0cbn</B> on elvis:</li></ul></P>

<pre>
  #  (r)dump 0unbdsf 126 141000 11500 elvis:/dev/rmt/0cbn /home
</pre>

The preceding commands are composed of three options (<B>0</B>, <B>u</B>, and <B>n</B>) that do not require arguments and four options (<B>b</B>, <B>d</B>, <B>s</B>, and <B>f</B>) that do require a &#147;companion&#148; argument. The <B>dump</B> command accepts as its first argument a list of options, and each option's argument is placed on the command line in the same order in which the options are listed.<P>

<B>The Options to the dump Command</B><P>

The <B>dump</B> utility has seven main options that are available on most platforms:<P>

<ul>
<B>0-9</B> -- Specifies the level of backup that <B>dump</B> should perform.<P>
<B>b</B> -- Specifies the blocking factor that <B>dump</B> should use.<P>
<B>u</B> -- Tells <B>dump</B> to update the dumpdates file.<P>
<B>n</B> -- Tells <B>dump</B> to notify the members of the operator group when a <B>dump</B> is completed.<P>
<B>d</B> and <B>s</B> -- Tell <B>dump</B> how large the backup volume is. <B>dump</B> uses these numbers to estimate how much &#147;tape&#148; is available.<P>
<B>f</B> -- Tells <B>dump</B> what device to use.</ul></P>

If you are using <B>dump</B> for regular system backups, you should be using most of the preceding options. It is important to note that many of these options have default values, thereby eliminating the need to specify that option and its argument in the <B>dump</B> command. For example, the default backup level is usually <B>9</B>. The problem with the default values is that they vary between operating systems and may also vary even on the same operating system, depending on factors such as media type. It is better to specify each of these options the same way on all your <B>dump</B> backups, to make restores easier.<P>

<B>Automating your dump Backups: The hostdump.sh Utility</B><P>

If you are using <B>dump</B> for your regular system backups, like any backup methodology, it should be automated. Simply putting a single-line <B>dump</B> command in cron is not enough; you need a script that includes at least the following features:<P>

<ul>
<li>Sanity and return-code checks to ensure that <B>dump</B> and <B>restore</B> are doing what you think they're doing.</li>
<li>An &#147;intelligent&#148; way of deciding which filesystems to back up, rather than just an &#147;include&#148; list.</li>
<li>Some method of dealing with hosts that won't fit on a single volume.</li>
<li>Creation of a table of contents by reading the volumes after the backup and saving the TOC to a file. (Once again, this TOC can be used when you are looking for a particular file. If you name the TOC the same as the volume, simply <B>grep</B> for the filename out of the TOC, and you've got the names of the volumes that have the file you are looking for.)</ul></li></P>

This article presents <B>hostdump.sh</B>, a shell script that has grown over the years to include all of the preceding features, as well as a few more. It was first written several years ago to back up Ultrix boxes, and it has grown to support many other UNIX versions. The script currently supports almost every version of UNIX that I could find that uses some form of <B>dump</B>. It should run unmodified on each version of UNIX listed at the top of the program. I continue to update it based on reader input, including bug fixes and adding other UNIX versions. The script is available at <B>http://www.backupcentral.com</B> and from the <I>Sys Admin</I> Web site: <B>http://www.sysadminmag.com</B>.<P>
If your version of UNIX is supported by <B>hostdump.sh</B>, it's pretty much plug-and-play. All you have to do is put in a volume, give it a device name and a hostname, and it does the rest. <B>hostdump.sh</B> backs up all the hosts that you list to the device that you specify. It automatically determines the names of all the filesystems and their filesystem types. If the filesystem type supports <B>dump</B>, it calls the appropriate <B>dump</B> command. If it is an unknown filesystem or one that does not have a good <B>dump</B> command, <B>hostdump.sh</B> uses <B>cpio</B>. The script also puts two extra <B>tar</B> files on the volume. The first is a header put on the first partition of the tape1 that lists all the filesystems on the volume and the commands that were used to back them up. After all backups are done, it rereads the table of contents of each of the backups and places that information into another <B>tar</B> file at the end of the volume. (The <B>tar</B> file at the beginning of the volume contains detailed instructions on how to find and read the <B>tar</B> file at the end of the volume, including which partition it will be placed on.)<P>

<B>Installing hostdump.sh</B><P>

Download the file <B>hostdump.tar</B> from <B>http://www.backupcentral.com</B> and place it in a temporary directory. The command <B>tar xf hostdump.tar</B> will create a directory called <B>hostdump</B> that contains several scripts. You can run <B>hostdump.sh</B> directly from that directory, or copy the scripts into a directory such as <B>/usr/local/bin</B>. You then need to edit <B>hostdump.sh</B> and change the value of the <B>BINDIR</B> variable to the name of the directory where <B>hostdump.sh</B> and the other scripts reside. Once you've done that, you're ready to back up!<P>

<B>Using hostdump.sh</B><P>

To back up one or more UNIX systems, simply tell the script what level of backup to perform, what device to use, what file to log to, and what systems to back up. To do this, issue the following <B>hostdump.sh</B> command:<P>

<pre>
# hostdump.sh level device logfile system_list
</pre>

For example, to perform a level 0 backup of apollo and elvis to <B>/dev/rmt/0cbn</B> on apollo and log it to <B>/tmp/backup.log</B>, issue the following command on apollo:<P>

<pre>
# hostdump.sh 0 /dev/rmt/0cbn /tmp/backup.log apollo elvis
</pre>

<b>hostdump.sh</B> automatically determines the names of all the filesystems and backs them up to the backup drive device that you specify. Sometimes you don't want to back up an entire system. To back up less than the entire system, add, after the system name, the name of the filesystems that you want. To back up more than one filesystem, simply list them in the order that you want them backed up. (You will need to continue to specify the name of the system that contains the filesystem as well.)<P>

<pre>
# hostdump.sh  level device logfile system:/filesys system:/filesys
</pre>

For example, to perform a level-0 backup of apollo and elvis's root drive to <B>/dev/rmt/0cbn</B> on apollo and log it to <B>/tmp/backup.log</B>, issue the following command on apollo:<P>

<pre>
# hostdump.sh 0 /dev/rmt/0cbn /tmp/backup.log apollo:/ elvis:/
</pre>

The arguments to the <B>hostdump.sh</B> command are:<P>

<ul>
<li>level -- A valid dump level between 0 and 9.</li>
<li>device -- A non-rewinding tape device, such as <B>/dev/rmt/0n</B> or <B>/dev/nrmt0</B>, or a file on disk, CD-ROM, or optical platter. (The script tests to see if the device you specify is actually a no-rewind device.)</li>
<li>logfile -- This is an absolute pathname to a log file that will contain <B>stdout</B> and <B>stderr</B> from the <B>hostdump.sh</B> script. This pathname should be a name that can be associated with the volume. When I use this script for production backups, I name the volumes and the log files after the name of the system, backup drive, and level. You could use something like this:</li></ul></P>

<pre>
  /backuplogs/apollo.DevRmt0n.Level0.12.13.1999
</pre>

<ul>
<li>system1 [system2 ... systemx] -- This is a list of one or more systems that you want the script to back up. Each system you list is written to the volume, in the order in which it is listed. The script automatically looks at each system's <B>fstab</B> file, and creates a list of filesystems to be backed up. The locations of various <B>fstab</B> files are shown in Table 2. Except for AIX's <B>/etc/filesystems</B> and SCO's <B>/etc/default/filesys</B>, they all have the same format, listing all the information about a particular filesystem in one white-space-delimited line. AIX's and SCO's files each have their own unique format.</li>
<li>system:/filesys [system:/filesys] -- If you are backing up the whole system, it is best to use the preceding option and have <B>hostdump.sh</B> figure out which filesystems to back up. But if you want to limit the filesystems included, you can list as many as you want in this format.</li>
<li>system1 system2 system3:/filesys system4:filesys -- You also can mix and match the options like this. Any systems that are listed without an accompanying filesystem name receive a full backup. Any systems that have a filesystem listed after them have only that filesystem backed up.</li></ul></p>

<B>Including or Excluding Special-Case Filesystems</B><P>

You may have filesystems that are listed in the <B>fstab</B> file that you want to exclude on a regular basis. Or you may want to back up the<B> /tmp</B> filesystem, which is normally excluded by <B>hostdump.sh</B>. <B>hostdump.sh</B> can handle both of these special cases. If you want to exclude filesystems that normally would be included, you put that filesystem's name in a file called <B>fstab.exclude</B> on the system where you want to exclude it. (For <B>fstab</B>, you need to substitute whatever that version of UNIX calls the <B>fstab</B> file. For example, you would use <B>/etc/vfstab.exclude</B> on Solaris.) To include filesystems that are not in the <B>fstab</B> file or are normally excluded by <B>hostdump.sh</B>, put that filesystem's name in a file called <B>fstab.include</B> on the system where you want to include it. For example, assume that on a Solaris system called apollo, you want to exclude the <B>/home</B> filesystem. Normally it would get backed up since it is in <B>/etc/vfstab</B>. Suppose also that you want to include the <B>/tmp</B> filesystem. To do this, you would create two files on apollo. One would be called <B>/etc/vfstab.exclude</B>, and it would contain the entry:<P>

<pre>
/home
</pre>

The second file would be called <B>/etc/vfstab.include</B>, and it would contain the entry:<P>

<pre>
/tmp
</pre>

<b>Handling Systems Bigger than a Single Volume</b><P>

<b>hostdump.sh</B>, like the <B>dump</B> and <B>restore</B> commands, was not originally designed with today's systems in mind. The script was first written to back up Ultrix systems (the largest of which was 7 GB at the time) to 8-mm compressed drives (the smallest of which was 10 GB). The original author2 never envisioned a system in which the disk was bigger than a volume. Then the company started ordering HPs that shipped with 20 GB of disk and one 4-GB DDS tape drive! Something had to be done.<P>
The easiest thing would be to scrap the original idea of looking at the <B>fstab</B> and give <B>hostdump.sh</B> a list of filesystems to back up. That would be an easy option to include, and the job would get done. Essentially, that's what I've done, but with a twist. I recommend the following:<P>

<ul>
<li>Use <B>hostdump.sh</B> in the usual manner, but exclude enough filesystems in <B>fstab.exclude</B> so that what is left will fit on one volume.</li>
<li>Run <B>hostdump.sh</B> twice. The first run will back up the filesystems that are in the <B>fstab</B> file, but aren't in <B>fstab.exclude</B>. The second run will back up only the filesystems that are listed on the command line. (An example of how to do this follows.)</li></ul></P>

This works because the default operation of <B>hostdump.sh</B> is to back up what is listed in the <B>fstab</B> file, excluding what is listed in the <B>fstab.exclude</B> file. However, if you specify filesystems on the command line, it will ignore both <B>fstab</B> and <B>fstab.exclude</B> and back up only the filesystems that you specify.<P>
Why is it important to do it this way? It goes back to the second essential element of a good backup intelligence. For example, what if you had only two include lists? You tell <B>hostdump.sh</B> to back up /<B>,</B> <B>/usr</B>, <B>/var</B>, <B>/opt</B>, and <B>/home1</B> on one volume, and <B>/home2</B> and <B>/home3</B> on another. What happens when you add <B>/home4</B>? Unless someone or something tells the backup program, it will never get backed up. You'll never know it either, until someone asks you to restore <B>/home4/yourboss/really-important-presentation-to-the-board-of-directors.doc</B>. So, whenever you are in a situation like this, whether you are using this program or not, you need to find a way to back up the entire system on one backup drive (excluding certain filesystems), then back up the excluded filesystems on another volume. That way, when you add <B>/home4</B>, it will be included automatically on the first volume. The worst thing that could happen is that the new <B>/home4 </B>fills up your first volume, and you have to manually add it to the second volume and exclude it from the first.<P>
To use this option, run <B>hostdump.sh</B> a second or third time, specifying the filesystems that were excluded in <B>fstab.exclude</B>. It is easier to explain this option with an example. In this example, elvis is the name of the Solaris system you want to back up. You are using <B>hostdump.sh</B> for the first time, and you know that a full backup will fit onto three different volumes. You have divided the filesystems equally, as follows:<P>

Volume 1: OS filesystems (<B>/</B>, <B>/usr</B>, <B>/var</B>, <B>/opt</B>, etc.), <B>/home1</B><P>
Volume 2: <B>/home2</B>, <B>/home3</B>, and <B>/home4</B><P>
Volume 3: <B>/home5</B> and <B>/home6</B><P>

Now, take the following steps:<P>

1.  Back up the whole system, excluding <B>/home2-6</B>, on the first volume. Create a file on elvis called <B>/etc/vfstab.exclude</B> containing the following lines:<P>

<pre>
/home2
/home3
/home4
/home5
/home6
</pre>

Then run this command every night:

<pre>
#  hostdump.sh level device1  logfile1 elvis
</pre>

This will back up the entire system, excluding what is in <B>/etc/vfstab.exclude</B>.<P>

2.  Back up the other filesystems on other volumes. Run these two commands every night:<P>

<pre>
# hostdump.sh level device2 blocking-factor logfile2
  elvis:/home1 elvis:/home2 elvis:/home3 elvis:/home4
# hostdump.sh level device3 blocking-factor logfile3
  elvis:/home5 elvis:/home6
</pre>

<b>Preparing for the Worst</B><P>

I install <B>hostdump.sh</B> on every system that I work on. That way, I'm ready to do a quick backup of any filesystem (or the operating system) before doing any maintenance. It sure beats a poke in the eye with a sharp stick! n<P>

Footnotes<br>

<font size="-1 point">1  A separately named file for a disk-based backup.</font><P>
<font size="-1 point">2  The credit for the first version of <b><font size="-1 point">hostdump.sh</font></B> goes to Andrew Blair. Although almost none of the original code remains, the original logic of the script does. It's quite possible that many of my ideas about how backups should be done go all the way back to this script. Thanks, Andrew!</font><P>

<h1>About the Author</h1><p>
W. Curtis Preston is a principle consultant at Collective Technologies (http://www.colltech.com), and has specialized in designing and implementing enterprise backup systems for Fortune 500 companies for more than 7 years. Portions of this article are excerpted from his O'Reilly book <I>UNIX Backup &amp; Recovery</I>. Curtis may be reached at: curtis@backupcentral.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
