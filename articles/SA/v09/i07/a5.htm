<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i07: Processing Command-Line Options in the Shell</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a5_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a5_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2000/jul2000.tar"><b class=codeListing>jul2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Processing Command-Line Options in the Shell</H1><p>
<P>Ed Schaefer
<P>
If your shell scripts are to move beyond the ad hoc, you will need to process command-line options beyond the simple:<P>

<pre>
unixscript $1 $2 $3
</pre>

And, if other users and software developers are going to use your scripts, a concise approach to processing command-line options will simplify using these options and trapping errors.<P>
his article presents three advanced methods of processing command-line options. The first method is using the UNIX built-in command, <B>getopts</B>, to do the parsing. The other two methods, coding parameters and <B>keyword=value</B>, require writing code to process the command-line options using a &#147;while&#148; loop and the shift command.<P>

<B>Using getopts</B><P>

System V supports a built-in command-line parser command, <B>getopts</B>, for both the Bourne and Korn shells. The <B>getopts</B> command placed in a loop will parse single character flags, provided that the flag exists in the argument string succeeding the <B>getopts</B> command and the flag is preceded by a dash.<P>
the general form of <B>getopts</B> is:<P>

<pre>
getopts optionstring name
</pre>

where &#147;optionstring&#148; is one or more valid option letters that <B>getopts</B> recognizes and &#147;name&#148; is a variable that <B>getopts</B> shifts into with each execution. If an option requires an argument, such as &#147;-z argument&#148; a colon follows the option letter.<P>
With each execution of <B>getopts</B>, the next command-line option value is placed in variable name for processing. Each execution also bumps the <B>OPTIND</B> counter by one. Using <B>OPTIND</B> allows other command-line options to be processed after the <B>getopts</B> loop terminates.<P>
If the next command-line option requires an argument, that argument is placed in variable <B>OPTARG</B> for processing. If an illegal option occurs, a question mark (<B>?</B>) is placed in variable name.<P>
Listing 1, <B>getopts.sh</B>, demonstrates how to use <B>getopts</B>. The <B>getopts</B> loop: &#147;while getopts abz: name&#148; requires script execution to be:<P>

<pre>
getopts.sh -a -b -z zstring anyotheroptions
</pre>

After the <B>getopts</B> loop terminates, executing the shift command and decreasing <B>OPTIND</B> by 1 allows the processing of any other command-line options not part of <B>getopts</B> option string.<P>
Using <B>getopts</B> is too restrictive for the following reasons:<P>


<ul>1. Not every version of Bourne and Korn shells support <B>getopts</B>.</ul>
<ul>2. Option names can only be one character long.</ul>
<ul>3. Option names must be preceded by a dash.</ul></p>

<B>Coding the Parameters in the Script</B><P>

You can eliminate the <B>getopts</B> loop by writing code that parses the command-line options. An example is an any-length option followed by the value (whitespace between option and value is optional). Listing 2, <B>option.sh</B>, demonstrates:<P>

<pre>
option.sh OPTION astring      # white space
</pre>

or<P>

<pre>
option.sh OPTIONastring       # no white space
</pre>

For the whitespace example, the psuedocode would be:<P>

<ul>1. Find the option string.</ul>
<ul>2. Shift to the value.</ul>
<ul>3. Set the option value.</ul>
<ul>4. Shift to the next option if there is one.</ul></p>

For the no-whitespace example, the psuedocode would be:<P>


<ul>1. Find the option string.</ul>
<ul>2. Set the value cutting the option from the string.</ul>
<ul>3. Shift to the next option if there is one.</ul></p>

Listing 2, <B>option.sh</B>, demonstrates how to parse the options. Every option processed requires two checks; one check is whitespace between option and value, and the other check is without space. Always make sure that the no-whitespace check for each option is placed first in the loop.<P>

<B>Using keyword=value</B><P>

Your shell scripts may be better suited for <B>keyword=value</B>. In that case, we can expand the coding parameters to parse the keyword, the equal sign, and the value. Listing 3, <B>keyword.sh</B>, demonstrates how to process <B>keyword = value</B> or <B>keyword=value</B>.<P>

<pre>
keword.sh F1=value   # no white space
</pre>

or<P>

<pre>
keword.sh F1 = value # white space
</pre>

the only real difference between parsing options and processing keywords is the added nuisance of checking for and eliminating the equal sign. Once again, always make sure the no-whitespace check for each keyword is placed first in the loop.<P>
With a little effort, the command-line processing in a shell script may approach the flexibility of procedural languages. This article has presented three approaches toward that end.<P>
<p>
<h1>About the Author</h1><p>
Ed Schaefer is a frequent contributor to <I>Sys Admin</I>. He is a senior programmer analyst for Intel's Factory Information Control System (IFICS) in Hillsboro, OR. His viewpoints on shell scripting or on any other subject in no way reflect Intel's position. He can be reached at olded@ix.netcom.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>









