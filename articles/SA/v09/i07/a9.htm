<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i07: Gettemp -- Built-In Temperature Monitoring for Sun Enterprise Servers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2000/jul2000.tar"><b class=codeListing>jul2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Gettemp -- Built-In Temperature Monitoring for Sun Enterprise Servers</H1><p>
<P>Alek Komarnitsky
<P>
Do you know what the temperature of your server room is right now? Do you have some way of being alerted when it gets too warm? If you have a room temperature probe, how do you know when a fan fails in your Sun Enterprise Server and the internal temperature starts to climb? These questions can be easily addressed with <B>gettemp</B>, a free software solution.<P>
Sun Enterprise servers have built-in sensors (depending on the model) that can report on the ambient room or various internal temperatures. You can access this via the following command:<P>

<pre>
/usr/platform/'uname -i'/sbin/prtdiag -v
</pre>

This command, however, returns quite a bit of hardware-specific information and has different formats, so it can be difficult to use as a quick and dirty temperature check.<P>
<B>gettemp</B> comprises a couple of Perl/CGI scripts that format the output (depending on the server model and operating system) and generates a Web page showing the current temperatures. Optional alerting capability is available via a Perl stub routine, and you can also generate a viewable time history (see Figure 1).<P>
This shows temperature data gathered every 10 minutes (polling interval is user definable) from various hosts in an easy to understand Web page. There are a number of clickable links:<P>

<ul>
<li>&#147;only AMBIENT temperatures&#148; -- shows only data from those machines that report ambient temperature. Some only provide internal temperatures (that incidentally do go up when the room gets warm).</li>
<li>Convert to Celsius (or back to Fahrenheit) -- The output from <B>prtdiag</B> is actually in Celsius.</li>
<li>You can use the optional alert/notify &#147;stub&#148; routine so that the hostname is a clickable link to some notification URL associated with that hostname. Note that this is for viewing purposes -- the &#147;stub&#148; routine can also generate an event asynchronously. (We generate a <B>syslog</B> event that ends up causing an email.)</li>
<li>You can use the optional time history feature so that the &#147;{cool,WARM,HOT!}&#148; is a clickable link to the temperature history of that hostname.</li></ul></P>

The rest of the page shows the actual temperatures as being reported by the various servers and is fairly self-explanatory.<P>

<B>Installing and Configuring gettemp</B><P>

Installing and configuring <B>gettemp</B> is quite simple. It is composed of the following programs:<P>

<ul>
<li><B>gettemp</B> -- Perl script that parses <B>prtdiag</B> output for temperature data. We put this on all machines under <B>/usr/local/share/bin</B>. You can run this from the command line to see how it works.</li>
<li><B>gettemp.all</B> -- Perl script that <B>rsh</B>'s to hosts and runs <B>gettemp </B>on them, and then generates HTML and other data. Basically, figure out which host you want to run this from and which user (we use a &#147;captive&#148; account) will need <B>rsh</B> capability to the hosts of interest. Then simply set up a cron entry to run this periodically.</li>
<li><B>gettemp.all.hosts.ph</B> -- Perl include file of hosts for <B>gettemp.all</B> to check. The comments should be pretty self-explanatory. Enter the human names of the hosts and their hostnames. <B>gettemp.all</B> uses this data to see which machines to <B>rsh </B>to.</li>
<li><B> gettemp.all.ph</B> -- Perl include file for <B>gettemp.all</B> with miscellaneous data. Again, the comments should be self-explanatory. Check out the optional &#147;alert&#148; functionality that is defined here and called out in the alert routine in <B>gettemp.all</B>.</li>
<li><B>gettemp.cgi</B> -- Perl CGI script to display output of file. You'll need to drop this into your cgi-bin directory. Note that this script tries to make sure the inputs to it are &#147;semi-reasonable&#148; for security purposes.</li></ul></P>

While you may need some sort of <B>sudo</B>/root access to install these files, <B>gettemp</B> does not need any special privileges (besides the ability of the captive account to <B>rsh</B> to the target machines) to run. While you will need to do some minor code tweaks for your site, these are documented and should not be difficult. <B>gettemp </B>takes about a second or two to run, so it does not cause any significant load on your systems.<P>
How does <B>gettemp</B> work in real life? It works quite well and has been in operational use for more than 6 months at a large (1,000+ UNIX nodes) site with more than 50 Sun Enterprise Servers scattered in various buildings administered by a variety of sys admins.<P>
Previously, when there was an air conditioning problem, it would not be known unless someone walked into the computer room and discovered that it was like a sauna, or the users complained because a machine shut down. Internal fan failures, while rare, were not typically caught until the machine actually shut itself down.<P>
With <B>gettemp</B>, you can take a quick look at all Sun Enterprise Servers by simply clicking on the Web page. When a server does get warm (either due to room or internal temperature), an alert is automatically routed to the appropriate sys admin so that they are aware of the issue and can call facilities, put fans in the server room, or shut the server down gracefully, if needed.<P>
The time history feature has also been quite useful for identifying when problems occurred and removing ambiguity. For instance, a particular server room seemed warm if visited early in the morning. A review of the logs showed that the temperature typically started to climb after midnight, and then went back down starting at 6:00 A.M. A call to facilities yielded the response that there was nothing wrong with the air-conditioning. A follow-up fax of the <B>gettemp</B> time history logs resulted in an admission that some air conditioning was turned off at night that should not have been.<P>
Some sites already have room temperature monitoring systems. <B>gettemp</B> can not only complement this, but can also provide monitoring of the internal temperature of the server. Also, since the alerting capability is simply a Perl stub routine, it is easier to ensure that the right type of notification occurs. Finally, the &#147;price is right&#148;. I'm aware of one site where the facilities group is spending over $50,000 to install computer room temperature monitoring, but it's not clear how or if admins will get notified when there is an issue!<P>

<B>Summary</B><P>

At my site, <B>gettemp</B> has easily been incorporated into our 24/7  monitoring and alerting system, so there's also an overall warm fuzzy feeling of confidence that <B>gettemp</B> is monitoring things and the right sys admin will be alerted before things completely melt-down. <B>gettemp</B> has been downloaded hundreds of times by the Internet community and the email feedback has been very positive. It also resulted in polishing of the code, so feel free to send suggestions for further improvement.<P>

<B>Future gettemp Work</B><P>

Future development is a somewhat bounded problem in that there should not be much more to really do. Obviously, if the output of <B>prtdiag</B> changes with new models and operating systems, some simple parsing code will need to be added. The time history is simply a text dump of the daily data -- you could hook MRTG, Cricket, or any of the graphical tools into this, but I was trying to keep things simple. Furthermore, software always has a few bugs lurking, but I think most of these have been fixed. <B>gettemp</B> could easily be expanded for other platforms and operating systems if an equivalent <B>prtdiag</B> command is available to query for temperature data. A <B>tar</B>ball of <B>gettemp</B> with code, documentation, and examples can be found on the <I>Sys Admin</I> Web site () or at: <B>http://www.komar.org/komar/alek/ -&gt; Misc. Tech Stuff -&gt; gettemp</B>. The author can be reached at <B>alek@komar.org</B> and he welcomes any suggested enhancements, bug reports, fixes, or comments in general.<P>

<h1>About the Author</h1><p>
Alek Komarnitsky has spent the past 5+ years as Chief Technologist for a large IS consulting/outsourcing firm and helps manage a network of over 1,000 UNIX workstations (and other assorted stuff) scattered from coast-to-coast supporting (literally) rocket scientists. Previously, he was the Network/Systems Manager for two Boulder County software start-ups where he built the computing infrastructures from scratch. His educational background includes an Aero/Astro Engineering undergraduate degree from the University of Washington and an MBA from CU-Boulder. He can be reached at: alek@komar.org.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
