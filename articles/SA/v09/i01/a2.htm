<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i1: Linux under FreeBSD</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/jan2000.tar"><b class=codeListing>jan2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Linux under FreeBSD</H1><p>
<P>Michael Lucas
<P>
FreeBSD has several options for using software from other platforms, such as Wine for Win32 and dosemu for DOS. BSDI, NetBSD, and OpenBSD binaries will run unmodified, and source code from many UNIX or Linux programs can be compiled without modification on FreeBSD. Additionally, FreeBSD includes kernel modules for Linux, SCO, and SVR4. These modules allow you to run unmodified binaries for these platforms on your FreeBSD machine. FreeBSD's Linux module works well enough that several commercial software packages for Linux have been included in the FreeBSD ports system. Similarly, this article was written on Sun StarOffice 5.1 for Linux, on my FreeBSD-current box. Because the last version of RealVideo for FreeBSD is version 3.0, I run RealVideo 5.0 for Linux.<P>
In FreeBSD 3.3-stable or higher, Linux mode has two components: the kernel system call module, and the runtime environment.<P>
<B>The Linux Kernel Module</b><p>The kernel-loadable module, or KLM, supports Linux-specific system calls. You can determine whether the Linux KLM is loaded on your system by using:<P>
<P>
<PRE>#kldstat -v | grep linux
 2    1 0xc08dc000 e000     linux.ko
                15 linuxelf
                16 linuxaout
#
</PRE><P>
(kldstat -v provides other useful information about your kernel, and is generally informative on any FreeBSD system.) If the module is not loaded, you can load it by becoming root and typing:<P>
<P>
<PRE># linux
</PRE><P>
You can make this automatic at boot by setting <B>linux_enable="YES"</B> in <B>/etc/rc.conf</B>. Strictly speaking, you don't have to compile a custom kernel to support the Linux module. You'll be more satisfied with your results, however, if your kernel includes the following options:<P>
<P>
<PRE>options "P1003_1B"                 #POSIX infrastructure
options "_KPOSIX_PRIORITY_SCHEDULING" #Built-in POSIX priority scheduling
options "_KPOSIX_VERSION=199309L"   #POSIX version kernel is built for
options SYSVSHM                    #System V shared memory
options SYSVMSG                    #System V semaphores
options SYSVSEM                    #System V messaging
options USER_LDT                      #allow user-level control of i386 ldt
</PRE><P>
For full instructions on building a custom kernel, check:<P>
<P>
<PRE>http://www.FreeBSD.org/handbook/handbook50.html
</PRE><P>
If you have the FreeBSD docs installed on your local system, see:<P>
<P>
<PRE>/usr/share/doc/handbook/handbook50.html

</PRE><P>The kernel emulator does have a small overhead, but it is negligible. If you're interested in the details and don't feel like reading the source code, search for &#147;overhead&#148; in the freebsd-emulation mailing list archives (<B>http://www.FreeBSD.org/search/</B>).<P>
<B>Runtime Environment</b><p>Dynamically linked Linux binaries expect to have certain libraries available. Linux has a variety of library sets, such as <B>libc4</B>, <B>libc5</B>, and <B>glibc2</B>. Additionally, some Linux programs expect to have particular Linux userland programs available (<B>sh</B>, <B>test</B>, etc.) Because FreeBSD uses the same codebase as original UNIX, whereas Linux was written from scratch, these may not be 100% compatible. A selection of Linux userland utilities can also be helpful, especially when dealing with closed-source commercial software products.<P>
The dynamic libraries and Linux userland utilities are available as a port. Look under <B>/usr/ports/emulators/linux_base</B> for the latest stable version. Install these as you would any other port:<P>
<P>
<PRE>#cd /usr/ports/emulators/linux_base
#make install
</PRE><P>
The port installs a subset of Red Hat Linux's userland under <B>/compat/linux</B>.<P>
The original source files (or &#147;distfiles&#148;, in FreeBSD parlance) are quite large. You will probably want to load these from a FreeBSD CD, a Red Hat CD, or from behind a large Internet circuit. If you're downloading over a 56 Kb modem, I'd recommend doing this when you don't plan to use your 'Net connection for several hours. The <B>linux_base</B> port installs everything under <B>/compat/linux</B>. If you're curious, do an <B>ls</B>:<P>
<P>
<PRE>#ls
bin     boot    etc     lib     mnt     proc    sbin    usr     var
#
</PRE><P>
This looks suspiciously like a subset of the root directory. <B>/compat/linux</B> contains resources for Linux binaries that expect to find different resources than those available on a FreeBSD machine. While it's not <B>chroot</B>ed, it's built in a similar manner.<P>
For example, on a Linux machine the file <B>/etc/nsswitch.conf </B>contains vital configuration information. FreeBSD keeps that information elsewhere. Any program run under Linux mode will check <B>/compat/linux/etc</B> for a system config file, and then fall back to <B>/etc</B>.<P>
<B>Linux Distributions and Emulation</b><p>At the moment, FreeBSD's Linux mode is based on Red Hat 5.2. (RedHat 6.0 emulation is in <B>-current</B>, and should be backported to <B>-stable</B> by the time you read this.) This doesn't mean that you can't use software designed for other distributions, however.<P>
Using a particular Red Hat distribution simply indicates the level of Linux kernel and userland library support available in your FreeBSD system. Red Hat 5.2 uses <B>libc5</B>, <B>glibc2</B>, and Linux kernel 2.0.36. RedHat 6.0 uses <B>glibc2.1</B> and kernel 2.2.5. Linux software that will run under these libraries, and this kernel will work in FreeBSD's Linux mode.<P>
<B>Running Linux Apps</b><p>When you have the <B>linux_base</B> port installed, and <B>kldstat -v </B>shows the Linux module is running, just run your Linux program from a command prompt.<P>
<B>Adding Linux Libraries</b><p>FreeBSD's install routines and ports system take care of almost all the ugly details of configuring shared libraries, insulating the administrator from the majority of these issues. This system does not cover software from other operating systems running under kernel modules. Linux systems tend to accumulate shared libraries like pocket lint. Eventually, you'll need to add additional Linux shared libraries to your system.<P>
The Linux emulator has its own <B>ldconfig</B>, <B>/compat/linux/sbin/ldconfig</B>, and its own <B>ld.so.conf</B> file, <B>/compat/linux/etc/ld.so.conf</B>. If you look at this file, you'll see:<P>
<P>
<PRE>#more ld.so.conf
/usr/X11R6/lib
/usr/i486-linux-libc5/lib
#
</PRE><P>
These are the directories where the module will look for Linux libraries, in addition to <B>/lib</B> and <B>/usr/lib</B>. Despite the initial slash, these directory names are all under <B>/compat/linux</B>. I recommend installing additional libraries under <B>/compat/linux/usr/local/lib</B>. Edit <B>/compat/linux/etc/ldconfig.conf</B> to add this path. When you have large programs that include many libraries of their own, you might wish to create new directories for those shared libraries. My <B>/compat/linux/etc/ld.so.conf</B> looks like:<P>
<P>
<PRE>#more ld.so.conf
/usr/local/lib
/usr/local/lib/soffice
/usr/X11R6/lib
/usr/i486-linux-libc5/lib
/usr/openwin/lib
#
</PRE><P>
Whenever you add new libraries, rerun <B>/compat/linux/sbin/ldconfig</B>. This rereads the directories in the configuration file and updates the list of available libraries. Be sure you run <B>/compat/linux/sbin/ldconfig</B>, and not FreeBSD's <B>/sbin/ldconfig</B>. Not only will the FreeBSD ldconfig not accomplish what you want, you'll find yourself either digging through <B>/etc/rc.*</B> scripts to learn how to properly reconfigure your shared library cache or simply rebooting in annoyance.<P>
When a Linux program fails because it cannot find a library, check to be sure you have the library. If you don't have it, call up your favorite Internet search engine and fetch a copy. Install it in <B>/compat/linux/usr/local/lib</B>, run Linux <B>ldconfig</B>, and you'll be up and running.<P>
Alternately, you can use the environment variable <B>LD_LIBRARY_PATH</B> to tell a shell to check a particular directory for libraries (see man 8 <B>ldconfig</B>). Many problems can be caused by the indiscriminate use of <B>LD_LIBRARY_PATH</B>, however, so you're better off editing<B> /usr/compat/linux/etc/ld.so.conf</B>.<B><P>
<B>Installing Linux Software as FreeBSD Ports</b><p>Some Linux software packages are available via FreeBSD's ports system. One well-known example is WordPerfect 8. If you become root, <B>cd /usr/ports/editors/wordperfect</B>, and type <B>make</B>, you will get:<P>
<P>
<PRE>#make
===&gt; wordperfect-8.0 'The source to this port may not be automatically fetched
 due to licensing restrictions.  You MUST fetch the source manually after reading
 and agreeing to the license at: http://linux.corel.com/linux8/download.htm 
Once GUILG00.GZ has been downloaded, move it to 
/usr/ports/distfiles and then restart this build.'.
#
</PRE><P>
In this case, FreeBSD's automatic fetch mechanism won't work -- WordPerfect's distribution terms require the user to agree to a license before downloading. Go to the Web page, accept their terms, and download WordPerfect. Install the file in<B> /usr/ports/distfiles</B>, return to <B>/usr/ports/editors/wordperfect</B>, and type <B>make</B>. The port will automatically install WordPerfect for you.<P>
<B>Linux Packages</b><p>One of the tools <B>linux_base</B> installs is Red Hat's RPM. You can use this to install RPMs on your FreeBSD machine. When using RPMs, you will want to be certain to install the software under <B>/compat/linux</B>. Because of FreeBSD's monolithic upgrade procedure (see my article &#147;Maintaining Patch Levels in Open-Source BSDs, <I>Sys Admin</I>, September 1999), any RPM components that overwrite system components will be blown away the next time you upgrade. If you overwrite the wrong files, your system might even become unbootable. To install an RPM, do:<P>
<P>
<PRE>rpm -i --ignoreos --dbpath /var/lib/rpm --root 
  /compat/linux [package]
</PRE><P>
Add other RPM flags as desired. Of course, RPM packages are completely separate from FreeBSD's usual package system. Do not expect to be able to <B>pkg_delete</B> these; you will need to use <B>rpm</B> to handle them.<P>
Be very careful in your use of RPM; if you accidentally overwrite part of your FreeBSD installation with Linux binaries, you can expect to find yourself booting off CD-ROM to restore your system. (The Linux module is good, but not that good.) If you're using a Linux program built into a FreeBSD package, such as <B>linux_glide</B>, you can use the standard FreeBSD <B>pkg_add pkgname</B>.<P>
<B>Manual Installations</b><p>Even with FreeBSD's excellent package management, some software has to be installed the hard way, by hand. I'll use Sun's StarOffice 5.1 as an example. Rather than provide a specific set of instructions on how to install this particular application, we'll troubleshoot a typical closed-source, Linux-binary software installation.<P>
You can download StarOffice at <B>www.stardivision.com</B>. A full download runs about 70 megs, so you might wish to spend the $10 for a CD-ROM. Copy the file <B>so51a_lnx_01.tar</B> to your home directory and untar it.<P>
After decompressing, <B>cd so51inst/bin</B> and run <B>./setup</B>. At this point, you might get a warning about <B>/tmp</B> being full. StarOffice is a huge office suite. If you run out of space, you will need to repoint your <B>tmp</B> directory. The easiest way to do this is with the environment variable <B>$TMPDIR</B>. Point <B>TMPDIR</B> at a directory with a lot of space, and try again.<P>
You'll see:<P>
<P>
<PRE>#./setup
./setup: Window manager didn't set icon sizes - using default.
/tmp/sv001.tmp/setup.bin: error in loading shared libraries
libvos517li.so: cannot open shared object file: No such file or directory
#
</PRE><P>
This is a shared library problem, as described above. You can simply do:<P>
<P>
<PRE>#LD_LIBRARY_PATH=/tmp/sv001.tmp ; export LD_LIBRARY_PATH
</PRE><P>
Rerun the setup routine. This time, it will open a nice GUI window, ask you some questions, and install itself. After the install, look in &#147;Office51/bin&#148; under your home directory. Typing <B>./soffice&amp;</B> will bring up StarOffice. I use a simple shell script:<P>
<P>
<PRE>#!/bin/sh
/home/mwlucas/Office51/bin/soffice&amp;
</PRE><P>
If you are interested in server applications, you should take a look at &#147;How to run Oracle for Linux on FreeBSD,&#148; available at:<P>
<P>
<PRE>http://www.scc.nl/~marcel/howto-oracle.html
</PRE><P>
<B>Problems</b><p>Any number of things can go wrong with a software install, let alone one running on a platform it wasn't built for. Some programs will require branding before you can run them. Branding a binary leaves an ELF comment that the kernel uses to choose an ABI. <B>brandelf programname </B>will tell you which ABI a program thinks it needs. You can use <B>brandelf -t linux programname</B> to manually point a binary at the Linux module. (SysV binaries do not use branding.)<P>
If the program complains about unsupported functions, check your kernel config. Do you have the POSIX and SysV options configured? Check <B>kldstat -v</B> to confirm the Linux module is loaded. If the above fails, your first resource should be the FreeBSD mailing list archives. Look at:<P>
<P>
<PRE>http://www.FreeBSD.org/search.html
</PRE><P>
Unless you're the first person in the world to have a problem with this piece of software, you'll find an archived question about it. The &#147;questions&#148; and &#147;emulation&#148; archives are excellent places to search.<P>
If the mailing lists archives don't help, send a message to <B>freebsd-questions@FreeBSD.org</B>. Be sure to give the version of FreeBSD you have, the version of <B>linux_base</B> you're using, and any and all details about the program you're trying to run, including any error messages when you try to run it. If it's an obvious problem, someone will probably answer you quickly. For more difficult problems, you might be directed to the freebsd-emulation mailing list.<P>
If you find yourself using Linux emulation more and more frequently, you would find it worthwhile to subscribe to the freebsd-emulation mailing list. Email <B>majordomo@FreeBSD.org</B> with a body of &#147;subscribe freebsd-emulation&#148;.<P>
<B>Conclusion</b><p>FreeBSD's Linux mode gives FreeBSD users access to a wide variety of commercial software packages. I encourage you to contact any software vendor that does not offer a FreeBSD version of a desired program and let them know you would purchase a native version. Vendors don't realize that demand exists unless someone tells them. Although good for your karma, these requests won't help you listen to <B>espn.com</B>'s daily broadcasts on your computer. Combined with the SVR4 and SCO kernel modules, the Linux module gives you access to almost the entire range of UNIX software on your FreeBSD box.<P>

<p>
<h1>About the Author</h1><p>
Michael Lucas is a networking and FreeBSD consultant working for the Great Lakes Technologies Group. He lives in Detroit, Michigan with his wife Liz, four gerbils, and assorted fish. He can be reached at: mwlucas@exceptionet.com. <P>
The author wishes to thank Marcel Moolenar and Steven Arlow for their assistance with this article.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
