<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i08: Network Operations Center On-line</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a12_f1.htm">Figure 1</a></span></td>
		<td><a href="../../../../source/SA/2000/aug2000.tar"><b class=codeListing>aug2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Network Operations Center On-line</H1><p>
<P>Ron McCarty
<P>
Despite the tremendous advances in network management systems, many of us find ourselves in need of network monitoring tools that are not as complex as commercial network management systems, or tools that are not licensed based upon the number of nodes monitored. Sometimes we just need a monitoring system that can be put together in less than a day. Whatever the reason, if you need a network monitoring tool that supports both a CLI and Web interface, you should consider the Network Operations Center On-line (<B>nocol</B>). (Major future versions of <B>nocol</B> will be called System and Network Integrated Polling Software [SNIPS].)<P>
<B>nocol</B> is a freely available monitoring took that will compile and run on most versions of UNIX. The examples here are based upon RedHat Linux 6.1, but <B>nocol</B> installs without problems on Solaris and BSDi systems.<P>
The <B>nocol</B> home page is located at:<P>
<pre>
http://www.netplex-tech.com/software/nocol/
</pre>
and the <B>nocol</B> gzipped <B>tar</B>ball can be downloaded from:<P>
<pre>
ftp://ftp.navya.com/pub/nocol.tar.gz
</pre>
The latest version of <B>nocol</B> at the time of writing is 4.3.1, but the <B>tar</B> file just referenced is always linked to the latest version.<P>
<B>nocol Monitoring<P>
nocol</B> will likely meet the monitoring needs of most small and mid-sized networks. It supports multiple monitoring methods including ICMP (<B>ping</B>), TCP port monitoring, <B>syslog</B> messages, and SNMP variables. A complete list of monitors directly supported are listed at:<P>
<pre>
http://www.netplex-tech.com/software/nocol/
</pre>
</B>Should the monitors included with <B>nocol</B> not be sufficient, additional monitors can be programmed. With the included monitors, it is easy to monitor hosts for connectivity issues and to monitor network services such as Web and mail servers. Although <B>nocol</B> is not a distributed system, multiple <B>nocol</B> stations can be easily configured and managed with separate or overlapping networks to monitor.<P>
<B>Installation</b><p>As mentioned, the installation shown here is based upon Red Hat 6.1, but <B>nocol</B> installs easily on other systems. All configuration options shown are not dependent on the version of UNIX used. To avoid possible security problems associated with running applications as <B>root</B>, the installation below uses the user <B>nocol</B> for installation.<P>
Note that the <B>nocol</B> programs <B>etherload</B>, <B>multiping</B>, and <B>trapmon</B> require <B>root</B> access during installation, but <B>root</B> access is not necessary if these programs are not to be installed. These programs are installed with the SUID bit set so they will run as user <B>root</B>.<P>
To add the user <B>nocol</B> use:<P>
<pre>
adduser nocol
</pre><P>
Be sure to change the <B>nocol</B> user&#146;s password. Now either login as <B>nocol</B> or use the <B>su</B> command to change to the user.<P>
Download the <B>nocol</B> distribution from:<P>
<pre>
ftp://ftp.navya.com/pub/nocol.tar.gz
</pre>
and place it in an appropriate source directory. On Linux systems, I prefer to use <B>/usr/local/src/</B>.<P>
Once the <B>nocol</B> distribution is downloaded, unzip the file:<P>
<pre>
cd /usr/local/src/
gunzip nocol-4.3.1.tar.gz
</pre>
Then un<B>tar</B> the file using:<P>
<pre>
tar xvf nocol-4.3.1.tar
</pre>
This will create a source directory structure within the <B>/usr/local/nocol-4.3.1/</B> directory. Now go into the <B>nocol-4.3.1</B> directory:<P>
<pre>
cd nocol-4.3.1
</pre>
Read through the INSTALL file for a quick rundown on the installation steps and to see whether there are any last minute changes for the installation. Also, take a look at the README file to see if there is any late-breaking news.<P>
At this point, the source can be configured for the local installation. Run:<P>
<pre>
./Configure
</pre>
The Configure script will prompt you for the top-level directory of where the <B>nocol</B> distribution will be installed. As the script mentions, by placing all the software in a central directory, the software can be easily upgraded. Additionally, the binaries can also be easily <B>tar</B>red for backup or further distribution.<P>
If the suggested <B>/usr/local/nocol/</B> is appropriate, then hit return at the prompt; otherwise, type in the directory to which you wish to install. The script will also prompt for the man page location and defaults to <B>/usr/local/nocol/man/</B>, which you can change if you wish.<P>
The script will then ask for the loghost. It will use the localhost by default or a configurable host. After entering the loghost, you will be prompted for email addresses to send lower-level messages (operation messages) and urgent messages. If the <B>nocol-ops</B> and <B>nocol-crit</B> are used, be sure to either create the accounts or create a mail alias to have the email distributed to the appropriate administrators.<P>
Finally, the script will ask for the locations of several programs needed by <B>nocol</B>. The Configure script will usually guess these correctly; however, the program does check the defaults and any answers you supply and print a warning, but will use the incorrect entries during installation. If a warning is received about the file not existing, use:<P>
<pre>
find / -name filename -print
</pre>
to find the file and re-run Configure. Upon completion, the Configure script creates a Makefile that can be further edited. Keep in mind that the Makefile will be overwritten by running the Configure script again. If the email addresses that you chose during Configure do not exist, create them or email aliases to ensure notifications are delivered properly.<P>
To compile the program and install it to the appropriate directory:<P>
<pre>
make

make install

su -

make root
</pre>
Logout to return to the user <B>nocol</B>.<P>
<B>Configuration</b><p>Assuming all goes well with the compile and installation, you can test and configure <B>nocol</B>. The easiest <B>nocol</B> monitor to configure is the <B>ippingmon</B> monitor, which (as its name implies) <B>ping</B>s hosts to test network connectivity. So, let&#146;s use <B>ippingmon</B> to test the <B>nocol</B> installation:<P>
<pre>
cd /usr/local/nocol/
cp etc/samples/ippingmon-confg etc/
</pre>
Now, edit the file for testing:<P>
<pre>
vi etc/ippingmon-confg
</pre>
The polling interval (<B>POLLINTERVAL</B>) can be left at 300 seconds, but remove all of the host entries and add two to simplify testing. One of the host entries should be a host that will reply to a <B>ping</B>, and the second host should be a non-existing host to ensure that a notification is made:<P>
<pre>
realhost    192.168.1.1
fakehost    10.1.1.1
</pre>
The format for the <B>ippingmon</B>-config file host list is simply hostname and IP address. The hostname does not necessarily have to be the true hostname of the machine &#151; this is the name reported by <B>nocol</B>; however, in larger environments it is wise to ensure that the two correspond.<P>
The <B>ipping-confg</B> file should resemble the following:<P>
<pre>
## Config file for ippingmon.
##
# Can also mark a site as TEST
# POLLINTERVAL is number of seconds between
# each poll cycle.
##

POLLINTERVAL  300

# ALL Unix hosts should be monitored using \
   'rpcpingmon'. Put them 
# in the 'rpcppingmon-confg' file and not here.

realhost    193.141.226.1
fakehost    10.1.1.1
</pre>
Now, the <B>ippingmon</B> can be started:<P>
<pre>
bin/ippingmon &amp;
</pre>
The <B>netconsole</B> CLI utility can be used to view the output of the monitors in real time. To start the utility, type:<P>
<pre>
bin/netconsole
</pre>
<B>netconsole</B> begins by displaying only critical errors; however, the level of errors can be changed by pressing the letter l and the level number from 1 through 4. The four levels are 1-critical, 2-error, 3-warning, and 4-informational. Level 4 will show all hosts being monitored, as well as the monitor being used to monitor the host. Figure 1 shows that the realhost and fakehost are being monitored. After the next iteration of <B>ippmon</B>, the warning would turn into an error. After error, assuming another failure, the error would turn into a critical. Operation centers will typically monitor using warning or higher depending on local needs. The information level is typically used by the administrator to discover which hosts are being checked.<P>
<B>tcpmon</B> is one of the most useful tools for monitoring network services, but it is a bit more complicated to configure, because either knowledge of the application protocol is required or a configuration example must be used. There is an example configuration included, so it will be used for the initial configuration.<P>
<pre>
cd /usr/local/nocol/
cp etc/examples/portmon-confg etc/
</pre>
</B>Edit the file:<P>
<pre>
vi etc/portmon-confg
</pre>
The <B>portmon-confg</B> file can seem overwhelming at first, because so many examples are included. To get a quick understanding of the configuration, remove all text below the <B>SIMULCONNECTS=64</B> line and enter the following after the <B>SIMULCONNECTS=64</B>:<P>
<pre>
HOST  test	193.141.226.1   SMTPport  25   \
   Critical  HELO portmon.test
info  250
QUIT  quit
</pre>
Here&#146;s how to interpret the entry:<P>
<B>HOST</B> test with the IP address 193.141.226.1 is being monitored on port 25. When the <B>tcp</B> connection is established, <B>nocol</B> will issue the command<B> HELO portmon.test</B>. <B>nocol</B> then expects to receive the reply (info) text of 250, at which <B>nocol</B> will send the SMTPport the <B>quit</B> command. The hostname and SMTPport above are description fields and used by <B>nocol</B> for reporting. The <B>HELO</B> and <B>quit</B> commands are SMTP commands supported by mail transport agents. Once the syntax is understood, other entries can be copied from the original configuration file or created for any TCP applications not included.<P>
Start the <B>tcpmon</B> monitor:<P>
<pre>
bin/tcpmon &amp;
</pre>
</B>If a mail transport agent is not running on the host specified above, the error will be logged and reported.<P>
<B>nocol Reporting</b><p>The <B>netconsole</B> utility is very useful within an operations area. Often, however, an error report should automatically send an alarm or message to someone to take action. The <B>noclogd</B> daemon is used for this purpose. The daemon uses a configuration file like the other utilities included with <B>nocol</B>. An example <B>noclogd</B> is included in the <B>nocol/etc/samples/</B> directory, so we will use it to get started:<P>
<pre>
cd /usr/local/nocol/

cp etc/samples/noclogd-confg etc/
</pre>
</B>Edit the file:<P>
<pre>
vi etc/noclogd-confg
</pre>
</B>and change the log entries to point to where log files should go. They can be placed wherever there is enough room, and the files should be rotated as well. The program <B>log-maint</B> in <B>nocol/bin</B> can be used to rotate the files.<P>
The <B>noclogd</B> is also a network application that listens on UDP port 5534. It logs entries for any hosts that are configured to do so and that are specified in the <B>noclogd-confg</B> file. If you add any additional <B>nocol</B> hosts to your network and use the <B>noclogd</B> on another station, be sure to add the entry on the <B>permithosts</B> line.<P>
Besides the logging just configured, <B>noclogd</B> can also run external programs for notification. The syntax, which resembles <B>syslogd</B> configuration, is:<P>
<pre>
monitor    level    | /path/to/program
</pre>
</B>For example, remove the two notification entries in the <B>noclogd-confg</B> and enter:<P>
<pre>
ippingmong	critical    | /bin/mail^netadmin
</pre>
This entry will send <B>netadmin</B> an email whenever the <B>ippingmon</B> records a critical event, which should be the case if the <B>ippingmong</B> started earlier is still running. Notice that spaces are represented with the <B>^</B> character. Start the <B>noclogd</B> daemon:<P>
<pre>
bin/noclogd &amp;
</pre>
<B>noclogd</B> will only run the notifications when an event changes to the level specified so the receiver will not receive multiple messages based upon an event; however, an event can be notified at each level so that messages will be sent whenever the situation worsens or betters itself.<P>
<B>Final Steps</b><p>The basic steps required to configure <B>nocol</B> and set up some monitors for <B>nocol</B> deployment has been covered. Other monitors can also be used, but they are outside the scope of this column.<P>
The only step left to fully automate <B>nocol</B> is to integrate it into the system for automatic startup. The file <B>nocol/bin/crontab.nocol</B> gives examples for the <B>keepalive_monitors</B>, <B>notification.pl</B>, <B>log-maint</B>, and <B>genweb.pl</B>. The <B>keepalive_monitor</B> script checks to see whether the <B>nocol</B> programs are running. If not, it starts them back up. The <B>notification.pl</B> script, as the name implies, is used for automating notifications; the <B>log-maint</B> is used to rotate logs; and the <B>genweb.pl</B> is used to create Web pages based upon <B>nocol</B> warnings and errors. For the current configuration, only the following entry is needed.<P>
<pre>
15 * * * *      /usr/local/nocol/bin/keepalive_monitor
</pre>
</B>Before making the change:<P>
<pre>
vi bin/keepalive_monitor
</pre>
and change the <B>PROGRAMS=</B> entry to reflect the <B>nocol</B> monitors that are running. For this example use:<P>
<pre>
PROGRAMS="noclogd ippingmon portmon"
</pre>
Save the <B>keepalive_monitor</B> file and add the following entry to the <B>/etc/cronttab</B> file:<P>
<pre>
15 * * * *      /usr/local/nocol/bin/keepalive_monitor
</pre>
Restart cron:<P>
<pre>
killall -HUP crond
</pre>
To test the crontab, you can kill the <B>noclogd</B>, <B>ippingmon</B>, and <B>portmon</B> previously started, and they should be restarted within 15 minutes.<P>
After completion of these steps, <B>nocol</B> should be up and running and mostly automated. We did not fully cover log file rotation, but the <B>log-maint</B> will get you on the right track. Several monitors were not discussed for space reasons, but the ones mentioned will cover 95% of most monitoring needs. <B>nocol</B> is definitely worth having in your toolbox. <P>
<p>
<h1>About the Author</h1><p>
Ronald McCarty received his bachelor&#146;s degree in Computer and Information Systems at the University of Maryland&#146;s international campus at Schwaebisch Gmuend, Germany. After completing his degree, Ronald McCarty started his network career as network administrator at the Schwaebisch Gmuend campus. Ronald McCarty works for Lucent Technologies as a senior systems engineer on a customer team responsible for a major telecommunications carrier. He spends his free time with his two best friends in the world: his daughter, Janice, and his wife, Claudia. Ron can be reached at: ronald.mccarty@gte.net.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
