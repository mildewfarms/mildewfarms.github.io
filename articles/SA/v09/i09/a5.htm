<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i09: OpenBSD as a VPN Solution</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/sep2000.tar"><b class=codeListing>sep2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>OpenBSD as a VPN Solution</H1><p>
<P>Alex Withers
<P>
One of the most pertinent topics in the networking industry today is Virtual Private Networks, or VPNs. In short, VPNs arose out of a need for a cheaper method to connect networks and hosts while still maintaining security and privacy. Many businesses found that in order to connect their branches they had to invest in expensive equipment and leased lines. The same went for providing connections to remote clients; however, in this case the cost went into dedicated modem lines. While methods like these provided for a relatively secure solution, they also tended to be expensive on the implementation and maintenance side. The Internet is an obvious solution to the cost issue by providing one giant medium for connection at a reasonable price (at least when compared with the other solutions).<P>
Even though the Internet can be used to get around the cost issue, we still have to deal with security. It is here that VPNs play a part by protecting the data transmitted on the Internet. VPNs essentially form an artificial network on an already existing public network. The technology can authenticate, encrypt data, and provide a secure tunnel between two or more points. As a result, VPNs are being used more often for a cost-effective and secure method to communicate.<P>
Many VPN solutions are emerging on the market today, and many of these are offered by big name companies. The technology is often proprietary and very expensive, incurring costs on the software and hardware level. However, since VPNs are more of a concept than an actual technology, we are allowed much working room to implement it. Software such as SSH can be used to create VPNs and there are free Open Source solutions for the free UNIX variants. While these solutions may work fine, they can also be somewhat complex in the implementation process.<P>
Another solution involves the OpenBSD operating system. In the case of VPNs, you can take advantage of some of the features OpenBSD has to offer natively. The OpenBSD solution uses a relatively new technology called IPSec. IPSec was designed to secure the existing IP technology. It is independent of any application since it works at a lower level. This is rather convenient, because all data sent is encrypted without having to configure any applications.<P>
<B>Implementing the VPN</b><p>Even within OpenBSD, there are several methods available to deploy IPSec. In this article, I will use the <B>isakmpd</B> daemon. This daemon allows for a secure method to exchange keys between two hosts; however, the configuration can be more sophisticated than &#147;manual keying&#148;. All of the following examples were developed using OpenBSD 2.6, and they may need to be modified for earlier or later versions of OpenBSD.<P>
<B>Enabling IPSec in OpenBSD</b><p>Two variables must be set in order to enable IPSec. They are not set by default, but the following two commands will do the trick:<P>
<pre>
sysctl -w net.inet.esp.enable=1
sysctl -w net.inet.ah.enable=1
</pre>
The <B>sysctl</B> command is used to change the state of the kernel, and in this case we are enabling AH and ESP. (See the article by Michael Lucas in this issue for more information about <B>sysctl</B>.)You may be wondering what AH and ESP are and what they have to do with IPSec. AH authenticates, but does not encrypt, the data. ESP will authenticate <I>and</I> encrypt the data sent through the network. Both of these are protocols of IPSec and, in the case of <B>isakmpd</B>, should both be enabled. If you wish to have this done each time the system boots, then you need to edit the <B>/etc/sysctl.conf</B> file. To do so, simply add the following two lines:<P>
<pre>
net.inet.esp.enable=1
net.inet.ah.enable=1
</pre>
To disable it during boot time, simply change the 1&#146;s to 0&#146;s or comment it out with the # symbol. The VPN <B>man</B> page strongly recommends that you have inbound packet verification enabled. To do this, issue the following command:<P>
<pre>
sysctl -w net.inet.ip.ipsec-acl=1
</pre>
If the host will be a gateway, then you must make sure IP forwarding is enabled. This is yet another <B>sysctl</B> command:<P>
<pre>
sysctl -w net.inet.ip.forward=1
</pre>
Add these to the <B>sysctl.conf</B> like the first two tags in order for this to take place during boot time. Once everything has been enabled, IPSec is ready to be configured.<P>
<B>The isakmpd Daemon</b><p>OpenBSD 2.6 should come with the <B>isakmpd</B> binaries without having to take any further steps after installation. When dealing with <B>isakmpd</B>, there are two main files that will occupy our attention:<P>
<pre>
/etc/isakmpd/isakmpd.conf
/etc/isakmpd/isakmpd.policy.
</pre>
The first of these is the configuration file, which determines the behavior for <B>isakmpd</B>. The latter file is the policy file, which tells how to authenticate connections. These two files are very important because they are the keys to creating the VPN.<P>
<B>Configuring isakmpd<P>
Step One: isakmpd.policy</b><p>Our scenario for discussion involves three networks: 10.0.1.0, 10.0.2.0, and 10.0.3.0. Each of these networks has a main router: 10.0.1.1, 10.0.2.1, and 10.0.3.1. These networks will communicate using the &#147;outside&#148; network: 192.168.1.0. In the real world, this &#147;outside&#148; network may very well be the Internet. In this example, each router will be connected to the &#147;outside&#148; network with the following IP addresses: 192.168.1.1, 192.168.1.2, and 192.168.1.3. Each of these routers is running OpenBSD 2.6, and they will be the boxes configured for this example of a simple VPN.<P>
Unfortunately, the default installation of OpenBSD does not come with the <B>isakmpd.policy</B> or <B>isakmpd.conf</B> files. However, there are example files available if you have the official OpenBSD CD-ROM or can get them through CVS. Under the <B>/src/sbin/isakmpd/samples</B> directory, there are two files that can be useful: <B>policy</B> and <B>VPN-east.conf</B>. Simply copy the file <B>policy</B> to <B>/etc/isakmpd/ \<BR>
isakmpd.policy</B> and <B>VPN-east.conf</B> to <B>/etc/isakmpd/isakmpd.conf</B>. They will be the files dealt with in this article. In this example, they will exist on all three machines.<P>
First, edit the <B>isakmpd.policy</B> file to specify who can connect using IPSec. If we wanted to allow anyone to connect, then <B>isakmpd.policy</B> would look like this:<P>
<pre>
KeyNote-Version: 2
Comment: A policy which accepts anyone.>
Authorizer: "POLICY"
</pre>
This would probably be useful only for testing purposes, as it is not very secure. For something more secure, we could use the following:<P>
<pre>
KeyNote-Version: 2
Comment: A policy which accepts anyone \
  that uses "yoursecret" as a passphrase.
Authorizer: "POLICY"
Licensees: "passphrase:yoursecret"
Conditions: app_domain == "IPsec policy" &amp;&amp;
            esp_present == "yes" &amp;&amp;
            esp_enc_alg != "null" -&gt; "true";
</pre>
Note that a lot more can be done with this file, and you should refer to the <B>isakmpd.policy</B> <B>man</B> pages for more information. We could use digital certificates or other such things for authentication. I will keep this example simple and use a passphrase.<P>
<B>Step Two: isakmpd.conf</b><p>The next step is to modify the <B>isakmpd.conf</B> file. Since we have three networks between which we would like to establish a VPN, we need to tell each router about the other two routers. But before we do this, each <B>isakmpd.conf</B> needs to have the following:<P>
<pre>
[General]
Retransmits=        3
Exchange-max-time=  60
Listen-on=          192.168.1.x
</pre>
The first variable, <B>Retransmits</B>, tells <B>isakmpd</B> how many times a message should be retransmitted before it gives up. The second variable, <B>Exchange-max-time</B>, gives the number of seconds available for an exchange to set up. The third variable, <B>Listen-on</B>, gives the IP address of the external interface and, in this example, the <B>x</B> should be replaced with 1,2, and 3 for each machine, respectively. There are many more parameters available under the General section (see the <B>isakmpd.conf</B>(5) <B>man</B> page). These values should be tweaked, since every network and situation is different.<P>
When establishing an IPSec connection between two nodes, there are two phases. The first phase establishes the secure connection, and the second phase does the rest of the work by establishing the tunnel in a secure connection. Therefore, the next section in the configuration file specifies the daemon from which it can accept connections:<P>
<pre>
[Phase 1]:
192.168.1.2=        host2
192.168.1.3=        host3
</pre>
The above would have been what host1 (192.168.1.1) needs in its configuration file. Thus, in this scenario, every host would need the other two hosts listed. Now, we add a section for the second phase:<P>
<pre>
[Phase 2]:
Connections=        host1-host2
Connections=        host1-host3
</pre>
This section has also been taken from what would have been the configuration for host1, and describes the possible connections. Note that the right-hand side values are quite meaningless, since they are nothing but strings that signify the name of the next sections. It is after the phase 2 section that these sections are defined. Continuing with host1, we add the next section to the configuration file:<P>
<pre>
[host2]
Phase=              1
Transport=          udp
Address=            192.168.1.2
Configuration=      MainMode
Authentication=     yoursecret

[host3]
Phase=              1
Transport=          udp
Address=            192.168.1.3
Configuration=      MainMode
Authentication=     yoursecret
</pre>
Since we are dealing with host1, we listed the two other nodes. The <B>Transport</B> flag tells <B>isakmpd</B> which protocol to use. The <B>Address</B> flag gives the IP of the remote node. The <B>Configuration</B> flag points to another section, and the <B>Authentication</B> flag is the passphrase matched with the policy found in <B>isakmpd.policy</B>.<P>
Note that this setup is similar to the example configuration file provided by OpenBSD. Also note that in regard to the <B>Transport</B> flag, some firewalls won&#146;t allow UDP packets, so some change would be necessary. Next, we define the sections referred to in the phase 2 section:<P>
<pre>
[host1-host2]
Phase=             2
ISAKMP-peer=       host2
Configuration=     QuickMode
Local-ID=          Net1
Remote-ID=         Net2

[host1-host3]
Phase=             2
ISAKMP-peer=       host3
Configuration=     QuickMode
Local-ID=          Net1
Remote-ID=         Net3
</pre>
Remember that we are still dealing with host1&#146;s configuration. The <B>ISAKMP-peer</B> flag (host2) refers to the remote node. The <B>Configuration</B> flag refers to a section further below in the configuration file. The <B>Local-ID</B> and <B>Remote-ID</B> flag refers to the sections that describe the networks we are dealing with. We would define those sections in host1&#146;s configuration file as follows:<P>
<pre>
[Net1]
ID-type=           IPV4_ADDR_SUBNET
Network=           10.0.1.0
Netmask=           255.255.255.0

[Net2]
ID-type=           IPV4_ADDR_SUBNET
Network=           10.0.2.0
Netmask=           255.255.255.0

[Net3]
ID-type=           IPV4_ADDR_SUBNET
Network=           10.0.3.0
Netmask=           255.255.255.0
</pre>
</B>The <B>ID-type</B> describes the node and might be <B>IPV4_ADDR</B> instead. The <B>Network</B> and <B>Netmask</B> flag give the appropriate numbers to describe the private network.<P>
Now we need to define the MainMode and QuickMode. These describe the encryption methods for the first and second phases, respectively.<P>
<pre>
[MainMode]
DOI=               IPSEC
EXCHANGE_TYPE=     ID_PROT
Transforms=        BLF-SHA-M1024

[QuickMode]
DOI=               IPSEC
EXCHANGE_TYPE=     QUICK_MODE
SUITES=            QM-ESP-3DES-SHA-PFS-SUITE
</pre>
The <B>Transform</B> tag in MainMode tells <B>isakmpd</B> to use the blowfish algorithm for encryption and the SHA hashing algorithm. There are many to choose from, and the example configuration in the <B>isakmpd.conf</B> man page lists some. The <B>SUITES</B> tag in the QuickMode section points to predefined sections, but it basically tells <B>isakmpd</B> to use the ESP protocol, Triple DES for encryption, and the SHA hashing algorithm. These tags, <B>Transform</B> and <B>SUITES</B>, point to predefined sections, which can be found in the OpenBSD&#146;s sample configuration file or the <B>isakmpd.conf</B> <B>man</B> page, but they aren&#146;t necessary for the configuration file.<P>
<B>Preparing for and Running isakmpd</b><p>If the machine is a gateway to a network, then it&#146;s a good idea to make it a firewall. All incoming packets, except those from the VPN, should be blocked. To do this, open a plain text file for the firewall rules:<P>
<pre>
block in log on &lt;network-interface&gt; \
   from any to any
block out log on &lt;network-interface&gt; \
   from any to any

block in log on enc0 from any to any
block in log on enc1 from any to any

pass in proto esp from 192.168.2.1/32 \
   to 192.168.1.1/32
pass in proto esp from 192.168.3.1/32 \
   to 192.168.1.1/32
pass out proto esp from 192.168.1.1/32 \
   to 192.168.2.1/32
pass out proto esp from 192.168.1.1/32 \
   to 192.168.3.1/32

pass in on enc0 from 10.0.2.0/24 to 10.0.1.0/24
pass in on enc1 from 10.0.3.0/24 to 10.0.1.0/24
</pre>
This set of firewall rules would be used on host1. The rules are quite easy to read, and it&#146;s not hard to understand what is going on here. Note that <B>&lt;network-interface&gt;</B> should be changed to the external interface of the machine (the interface connected to the external network). Also, enc0 and enc1 are the IPSec interfaces from which host1 receives the packets.<P>
The above rules will block any incoming traffic, but we need to make sure a connection can be established. Since <B>isakmpd</B> works on port 500 using the UDP protocol, incoming packets need to be allowed in:<P>
<pre>
pass in proto udp from 192.168.2.1/32  \
   to 192.168.1.1/32 port = 500
pass in proto udp from 192.168.3.1/32  \
   to 192.168.1.1/32 port = 500
</pre>
Because I am still using host1 as an example, I am allowing UDP traffic on port 500 from 192.168.2.1 and 192.168.3.1. Now that you have compiled these rules (and any others you might need) in a text file, you must pipe it to OpenBSD&#146;s firewall tool, <B>ipf</B>:<P>
<pre>
ipf -f textfile
</pre>
If you want this done every time during boot, then add <B>ipfilter=YES</B> to the <B>/etc/rc.conf</B> file. Now, <B>ipf</B> will read the <B>/etc/ipf.rules</B> during boot time.<P>
The next step is to run the daemon. To run the daemon in the foreground, simply use the <B>-d</B> flag as follows:<P>
<pre>
isakmpd -d
</pre>
Using the <B>-DA=99</B> option will set all debugging classes to level 99. This will provide quite a bit of information. If <B>isakmpd</B> is not started during boot time automatically, then edit <B>/etc/rc.local</B>. You can now test your setup by sending traffic between the two nodes and using <B>tcpdump</B> to see whether the traffic contains ESP or AH packets.<P>
<B>Conclusion</b><p>The examples I used here were for a simple VPN, which worked well enough for my employer, but <B>isakmpd</B> is extremely flexible. There are many more options to use in <B>isakmpd</B> for authentication, such as X509 digital certificates. <B>isakmpd</B> is also known to work with many popular VPN clients, which are listed in the OpenBSD FAQ. I strongly suggest going through all the man pages for <B>isakmpd</B>, <B>ipsec</B>, <B>vpn</B>, etc. I also suggest reading the OpenBSD FAQ. These were my primary resources, and they contain many more examples, especially with digital certification.<P>
Since OpenBSD tightly integrates cryptography, the solutions for a VPN are myriad and easy to deploy. OpenBSD is also very secure and rock stable, and with support of hardware encryption just around the corner, OpenBSD can be very attractive in many situations. n<P>
<p>
<h1>About the Author</h1><p>
Alex Withers (awithers@gonzaga.edu) is currently a student at Gonzaga University in Spokane, WA. When not sitting through the riveting lectures, Alex either works to administer networks or enjoys running.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
