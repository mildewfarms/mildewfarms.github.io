<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i09: Cross-Platform Event Reporting</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2000/sep2000.tar"><b class=codeListing>sep2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Cross-Platform Event Reporting</H1><p>
<P>Joe Aguiar
<P>
It is relatively common these days for systems administrators to be responsible for the management of multiple dissimilar platforms. A mix of UNIX and Windows NT is probably one of the most common scenarios. It would be nice if all operating systems used a standard method of reporting system errors and events, but this is not the case. Windows NT uses the Event Log service and UNIX uses the <B>syslog</B> service. Each system uses a disk file repository to keep the information, however this is just about where the similarity ends. The data file formats are completely different (the UNIX <B>syslog</B> using a simple text file, easily readable, while the NT Event Log uses a binary format data file similar to the UNIX <B>utmp</B> file).<P>
This article addresses some alternatives for integrating the two systems using free software tools written in Perl so that reporting can be centralized and analysis can be accomplished more easily and at a lower cost.<P>
<B>Alternatives</b><p>Whether your mixed environment is predominantly UNIX or Windows NT, it might be desirable to run your management software on a single platform of your choice. This would save time spent learning how to use tools to do the same thing on multiple platforms, as well as reduce licensing costs of what would likely be tools from multiple vendors (and multiple support contracts). Perhaps you just want to be able to check one, or a small number of designated management hosts manually. In any case, there are at least two alternatives that could help satisfy this need: send the UNIX <B>syslog</B> events to the Windows NT Event Log, or send the Windows NT Event Log entries to the UNIX <B>syslog</B>. These alternatives are discussed below.<P>
<B>Event Log to syslog</b><p>There could be a number of reasons for taking the approach of forwarding Event Log entries to a UNIX <B>syslog</B> server. Perhaps your site is predominantly UNIX, or perhaps you have invested time and money into a software product that does event management from UNIX. Whatever the reason, there is a freely available tool that my site, for example, uses to help accomplish this goal. It is called <B>evtfwdd</B>. It is a Perl script that will forward new Event Log entries to a UNIX <B>syslog</B> server at a specified <B>syslog</B> priority.<P>
The NT Event Log provides a number of data members in each record that are suitable for sorting. The <B>evtfwdd</B> tool, using a configuration file, allows the user to sort messages according to five pieces of data: Event Type, Source, Category, EventID, and Computer Name. All of these fields may use regular expressions to obtain matches. The most interesting field is probably the Event Type. NT supports at least five different types:<P>
<pre>
EVENTLOG_INFORMATION_TYPE
EVENTLOG_WARNING_TYPE
EVENTLOG_ERROR_TYPE
EVENTLOG_AUDIT_SUCCESS
EVENTLOG_AUDIT_FAILURE
</pre>
The meaning of each of these is implied by its name; however, the <I>Win32 Perl Programming</I> book [1] gives a short explanation of each. The next most interesting field to sort on is Source, which is like the &#147;tag&#148; portion of the <B>syslog</B> message format and often refers to the application that generated the message. It is unclear to me how NT actually uses Category or EventID, however, <B>evtfwdd</B> will let you sort on these fields, too. The way <B>evtfwdd</B> does its sorting is controlled by the <B>evtfwd.con</B> configuration file (Figure 1).<P>
The entries above will cause <B>evtfwdd</B> to forward new data in the Event Log to the host &#147;tweedle&#148;, dependent upon the Type field. If the Event Log entry is of <B>EVENTLOG_INFORMATION_TYPE</B>, the message will be forwarded to the <B>syslogd</B> on host tweedle at priority 14. This corresponds to the <B>syslog user.info</B> priority. The <B>EVENTLOG_WARNING_TYPE</B> entries will go with priority 12, which is <B>user.warn</B>. Priority 11 is <B>user.err</B>, and 38 and 36 are <B>auth.info</B> and <B>auth.warn</B>, respectively.<P>
It is easy to calculate the priority entries (under Solaris, the <B>calctool</B> in logical mode works well). Look at the <B>syslog.h</B> file on any UNIX box, find the number corresponding to the facility, left shift three, then OR the number corresponding to the level. There is also a tool called <B>xlatepri.pl</B> that comes with the <B>evtfwdd</B> package that will convert UNIX <B>syslog</B> priority string to an integer. The priority may be expressed as a string, such as <B>user.info</B>, or as an integer in the configuration file.<P>
The other fields shown above (Category, Event ID, etc.) are represented here by regular expression character classes. The &#145;&#145;+&#146;&#146; means one or more occurrence of any of these characters. To run <B>evtfwdd</B>, use the following command:<P>
<pre>
perl -w evtfwdd --conf /etc/evtfwd.con  \
  --port 514 -debug
</pre>
Actually, <B>/etc/evtfwd.con</B> and port 514 are the default and do not need to be specified on the command line. The <B>pl2bat</B> command that is distributed with the Active State Perl package will create an <B>evtfwdd.bat</B> file, which can then be started simply by typing <B>evtfwdd</B> as long as it resides in your path.<P>
<B>Syslog to Event Log</b><p>If you are operating in a predominantly NT environment, forwarding UNIX <B>syslog</B> entries to a Windows NT Event Log service may be a desirable alternative. There is a tool called <B>ntpsysld</B>, which can be used to accomplish this. <B>ntpsysld</B> is a UNIX <B>syslogd</B> work-alike written in Perl and ported to the Windows NT environment. It has a number of interesting features, however, the thing that makes it useful for our purpose is the fact that <B>syslog</B> entries can either be sent to a text file on the NT server or directly into the NT Event Log database.<P>
Like the UNIX <B>syslogd</B>, <B>ntpsysld</B> uses a configuration file (<B>syslog.con</B>) that has a very similar format to the typical <B>syslog.conf</B> file. A sample <B>ntpsysld</B> configuration file is shown in Figure 2.<P>

Instead of a tab separating the fields, one or more spaces are used. The two columns represent <B>syslog</B> priority and the action to be taken. The priority has the same meaning as in the normal UNIX <B>syslog</B> (see your UNIX <B>syslogd</B>(3), and <B>syslog.conf</B>(3) man pages) with the following extensions:<P>
<P>
&#149;  A range of priority levels may be specified using a hyphen (-). For example, <B>auth.info-warning</B>, would apply to messages of the auth facility with info, notice, and warning levels.<P>
&#149;  A single priority level may be specified using <B>-only</B>. For instance, <B>user.crit-only</B> would apply only to messages of user facility at crit level instead of the default crit and above (crit, alert, and emerg).<P>
<P>
The action column supports the normal <B>syslog</B> convention of specifying a disk file. There is no wall or user list ability, however, a slight modification to the source code and downloading an additional module may get you a Winpopup capability (this is planned for the next version of <B>ntpsysld</B>). The odd period-separated action specifier shown in Figure 2 has the following meaning:<P>
<P>
&#149;  The first part is an event type specifier, such as <B>EVENTLOG_ERROR_TYPE</B>.<br>
&#149;  The second part is the event category, such as 0 (meaning none).<br>
&#149;  The third part is the event identifier. This can be used as a means to further sort your messages.<br>
&#149;  The last part, the &#147;evt&#148; tag, tells <B>ntpsysld</B> that this message should be sent to the Event Log service.<br>
<P>
For example, the first line in the sample <B>ntpsysld</B> configuration file will cause <B>ntpsysld</B> to send messages it receives from any facility at level info and above to the NT Event Log with an event type of <B>EVENTLOG_INFORMATION_TYPE</B>, a category of 0, and an event identifier of 8000. The last line shown in this sample would send all messages of level debug to the text file <B>debug.log</B>.<P>
<B>ntpsysld</B> also differs from the normal UNIX <B>syslogd</B> in that it only accepts messages from an Internet domain UDP socket. To run <B>ntpsysld</B>, type:<P>
<pre>
perl -w ntpsysld --port 514 --conf  \
  /etc/syslog.con
</pre>
The <B>pl2bat</B> tool can be applied here as with <B>evtfwdd</B>. It may be necessary to create an <B>/etc/syslog.aut</B> file. This file specifies from which hosts messages will be accepted. The documentation that accompanies the package explains the use of this file, however, an entry such as <B>type = none</B> should get you up and running.<P>
<B>Download and Installation</b><p>The download package for each of these tools contain installation instructions, so those will not be covered here. Note that <B>ntpsysld</B> is now bundled into the <B>psyslogd</B> package, which is an extended <B>syslogd</B> for UNIX, written in Perl. To build <B>ntpsysld</B> from this package requires GNU tools on your NT box, which you may or may not want to deal with. Because of this, a pre-built <B>ntpsysld</B> is available at the same download site and in the <B>psyslogd</B> package as <B>ntpsysld.sample</B>. Tools discussed in this article may be downloaded at the following sites:<P>
<P>
<B>Evtfwdd</B> and <B>ntpsysld</B>: <B>http://home.inreach.com/jaguiar</B><P>
Activestate Perl for NT: <B>http://www.activestate.com</B><P>
One of several sites for GNU tools for NT: <B>ftp://sourceware.cygnus.com</B><P>
<P>
It is possible to run <B>evtfwdd</B> or <B>ntpsysld</B> as an NT service. A very good article detailing how to turn a Perl script into an NT service appeared in <I>The Perl Journal</I> [2]. Also, there have been a number of news group postings on turning a program into an NT service, as well as postings on the Microsoft Web site. Tools are available for creating an NT service in the NT resource kit for NT 4.0. The same tools for creating a service on NT 3.5 seem to work for NT 4.0 as well and are available for download at:<P>
<pre>
ftp://ftp.microsoft.com/bussys/winnt/  \
   winnt-public/reskit/nt35/i386/
</pre>
<B>Summary</B><P>
It is possible to effectively and inexpensively solve the problem of integrating event reporting between UNIX and Windows NT. In the cases discussed here, we were able to build and use freely available tools. Which solution you choose can depend on many things, some of which are: what management platform you use, what OS the majority of your servers run, or where your expertise lies.<P>
There are a number of improvements planned for the tools <B>evtfwdd</B> and <B>ntpsysld</B>, and they will be added over time. Suggestions or bug reports/fixes are always welcome (<B>jaguiar@inreach.com</B>). I hope these tools prove to be useful in solving some of your cross-platform system logging needs.<P>
<B>References</b><p>[1]  <I>Win32 Perl Programming: The Standard Extensions</I>, Dave Roth, MacMillan Technical Publishing, 1998.<P>
[2]  &#147;Turning a Perl Program into an NT Service&#148;, Kevin Meltzer, <I>The Perl Journal: Vol.4, No.3</I>, (http://tpj.com), Earth Web, Inc.<P>
[3]  <I>Programming Perl</I>, Larry Wall, Tom Christianson and Randal L. Schwartz, O&#146;Reilly and Associates, Inc., 1996. <P>
<p>
<h1>About the Author</h1><p>
Joe Aguiar has worked as a Systems and Network Administrator and Software Engineer since 1986. He holds a BSEE degree from CSU, Fresno. He can be reached at jaguiar@inreach.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
