<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i09: FreeBSD Mail Server with GUI</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2000/sep2000.tar"><b class=codeListing>sep2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>FreeBSD Mail Server with GUI</H1><p>
<P>John C. Place
<P>
Some time ago, I was assigned to set up a mail server. However, I did not want the hassles of adding and deleting users as they came and left the company, changed their names, and so on. I decided that it would make most sense if the people doing the personnel changes did the upkeep of the mail accounts. I chose not to deal with one of the many MS Windows-based mail servers for two reasons: usability and cost. Quite a bit of the Internet&#146;s email is handled by UNIX and Sendmail, so why should I be any different? UNIX is a stable and proven platform. But UNIX and Sendmail, although a good combination from a stability and cost view, are terrible when it comes to the user interface. Many people would call it, when compared to Windows mail servers, user hostile. I also wanted to be able to control what the human resources department does to the mail server. With the help of FreeBSD and Apache, and some CGI scripting, this has become a reality.<P>
The process of installing and configuring FreeBSD and Apache is outside the scope of this article, but they do install quite easily on a wide range of hardware. If you have any experience with UNIX or Linux, I have found that it will take less than 2 hours to get the FreeBSD and Apache up and running. There is plenty of documentation at <B>www.freebsd.org</B> and <B>www.apache.org</B>. I have done this with FreeBSD 3.4 and 4.0, and Apache 1.3.9, and I do not see why a newer version of either would be any different. FreeBSD is quite efficient and requires little hardware to run. I have set one of these mail servers up on a Pentimum 133 Mhz with 40 MB of RAM and more than 300 mail accounts.<P>
The most important aspect of a mail server is hard-disk space. With the low cost of IDE, this is definitely not a problem. If you already have a FreeBSD box set up, maybe even a Web server, then this can be easily added to it with little impact to the machine except for the hard disk, which depends on the number of users and what they are emailing. Adding this does not lower the security of the box. The CGI script can only change things in the specified group that it uses, and the accounts it adds cannot login via <B>telnet</B> or <B>ftp</B> because the shell points to no login.<P>
On a running FreeBSD system, you need to make a change to <B>/etc/group</B> and add the group popuser. If you would like to make it another group ID, make sure to change line 8 in the <B>mail_admin</B> script (Listing 1) accordingly. This separate group is set up so that the <B>mail_admin</B> script can only change users in this group. (All listings for this article are available at: <B>http://www.sysadminmag.com</B>.)<P>
Install Apache by downloading the source and running <B>configure</B>, <B>make</B>, and <B>make</B> <B>install</B>. Once installed, the server will be at <B>/usr/local/apache</B>. You should be able to execute <B>/usr/local/apache/bin/apachectl</B> <B>start</B>, and be able to see Apache&#146;s welcome screen from a browser. If you cannot, please refer to the FAQ and man pages from Apache. When compiling Apache from the sources, make sure you do the entire process as <B>root</B> because if you do not, Apache&#146;s <B>config</B> file will point to port 8080, not 80 (this is a common problem). After you have tested to make sure that the server is working, it is a good idea to create a new <B>index.html</B> with your information in it, so users do not stumble upon it and send mail to maintainers at <B>apache.org</B>. If you are not comfortable with installing Apache from these sources, then you can use FreeBSD&#146;s package system to install. However, some directories change by doing this. The important ones (for this article) are:<P>
<P>
<B>config</B> files (<B>httpd.conf</B>) in: <B>/etc/apache</B><P>
Executables in: <B>/usr/local/bin</B> or <B>/usr/local/sbin</B><P>
Web root directory at: <B>/usr/local/www</B><P>
<P>
For large packages (like Apache), I usually install from source because it provides greater control over what options and modules are linked in. I also like the fact it puts everything under <B>/usr/local/apache</B>, which to me simplifies housekeeping.<P>
Make a directory under Apache&#146;s <B>root</B> called &#147;<B>mail_admin</B>&#148; and copy the <B>mail_admin</B> script into this directory. Next, the SUID bit is to be set. Because this script will change users and passwords, it must therefore have <B>root</B> privileges. This is accomplished by issuing <B>chmod</B> <B>4555</B> on the script. At this point, you have the script installed and must now secure it to keep people from making unsanctioned changes to the mail server&#146;s user accounts. In <B>/usr/local/apache/conf/httpd.conf</B>, add a directory container like:<P>
<pre>
&lt;Directory /usr/local/apache/mail_admin/&gt;
        AuthType Basic
        AuthUserFile /usr/local/apache  \
          /conf/mail_admin.pw
        AuthName mail_admin
        require valid-user
&lt;/Directory&gt;
</pre>
You also must tell Apache that it is acceptable to have scripts in this directory by putting this in <B>httpd.conf</B>:<P>
<pre>
ScriptAlias /mail_admin/ "/usr/   \
   local/apache/mail_admin/"
</pre>
Next create the <B>mail_admin.pw</B> file in <B>/usr/local/apache/conf</B>. This is done using the <B>htpasswd</B> program, while in the <B>/usr/local/apache/conf</B> issue:<P>
<pre>
/usr/local/apache/bin/htpasswd \
   -c mail_admin.pw postmaster
</pre>
<B>htpasswd</B> will prompt for a password and verification. Any user listed in this file will be able to make changes to the mail server. The <B>-c</B> switch is only used when a file does not exist. Do not use it when you are updating passwords or adding users to an existing file.<P>
The mail server can now receive mail for any users you add through the CGI script. You must let the users pick up their mail by adding <B>popper</B>. Install <B>popper</B> from the ports collection. Next, edit <B>/etc/inetd.conf</B> and uncomment or add the following line:<P>
<pre>
pop3   stream  tcp   nowait  root   \
   /usr/local/libexec/popper  popper
</pre>
Restart <B>inetd</B> with a HUP; <B>sockstat</B> should now show that port 110 is in a listen state. This is historically the POP port, and I do not advise changing it. It is now simply a matter of the user setting up the mail client. They should now be able to receive mail.<P>
As with any project like this, first and foremost in a sys admin&#146;s mind should be security. One concern is that these scripts use the set UID bit to assume root privileges. This is necessary for modifying user accounts.<P>
Perl automatically enables a set of special security checks, called taint mode, when it detects its program running with differing real and effective user or group IDs. These checks keep the risks to a minimum and prohibit the writing of unsecure code. Another concern is that you want to control who runs the <B>mail_admin</B> scripts. At the time of this writing, there are no known bugs that will allow you to circumvent Apache&#146;s authorization. If the server is behind a firewall, then make sure that port 80 is not allowed to the mailserver. Another option is to employ TCP wrappers to restrict which IPs connect to the server on that port, and have <B>inetd</B> start the Apache server. The Apache group frowns on this for performance reasons, but for the <B>mail_admin</B> scripts there should be no problem. One final thought on security, please realize that information is being sent in plain text on the wire. Packet sniffers and other tools will be able to see the information you are passing back and forth. Thus, it is a bad idea to administer this on the Internet. If you put SSL on the server, this will encrypt the transactions. For the truly paranoid, simply allow connections only from localhost, and put the box right next to the person charged with administrating the user accounts.<P>
I chose this setup because I considered it to be the best option for what I needed. A perk is that there are no license hoops to jump through, which will save in cost and aggravation. Also, with the onslaught of email viruses, Sendmail rule changes are quite painless to apply. And if you (like me) are not a wizard at Sendmail rule sets, the fixes for these are posted quickly to several sites on the Internet. Because you are not burdened with administering the mail server, maybe you can learn to write rule sets too. <P>
<p>
<h1>About the Author</h1><p>
John C. Place has been a Systems Administrator/Programmer for more than 8 years working in QNX, FreeBSD, Solaris, SCO, Linux, and NT. He believes in keeping it simple and using the right tool for the right job. His weapon of choice is FreeBSD for stability and flexibility. He can be contacted at: jcplace@attglobal.net.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
