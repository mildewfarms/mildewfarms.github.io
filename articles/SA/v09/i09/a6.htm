<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i09: Snort &#151; A Look Inside an Intrusion Detection System</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><a href="../../../../source/SA/2000/sep2000.tar"><b class=codeListing>sep2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Snort &#151; A Look Inside an Intrusion Detection System</H1><p>
<P>Kristy Westphal
<P>
As evidenced by the daily news headlines, catching wily hackers is becoming even tougher. Every bit of sensible security you can add to your network may help, especially if the tool you are using is free, portable, and easy to install. In the case of Intrusion Detection Systems (IDS&#146;s), there are many good commercial versions. What isn&#146;t as widely advertised are the freeware IDS&#146;s. These programs are not only good products by themselves, but are also excellent supplements to these commercial systems.<P>
Snort (written by Martin Roesch) is one such tool. Snort is a rules-based, &#147;lightweight&#148; Intrusion Detection System that is based on <B>libpcap</B>, and runs on UNIX operating systems. Snort can perform content searches on IP packets, then, through logging, let the security administrator know if unusual activity has occurred. It is the type of IDS that lets you dig down into the packet via the <B>tcpdump</B> format, or simply a decoded format through a directory structure based upon the IP address of the source address. The administrator has the flexibility to set up filters based on IP addresses and the ability to close connections when a rule for a hostile probe or possible attack is found.<P>
This article explores setting up Snort, how to use the various plugins, how to interpret the output of packet captures from Snort, and how it can compliment other IDS&#146;s.<P>
<B>Setting Up Snort: Where to Start, and What You&#146;ll Need</b><p>Snort runs on almost every flavor of UNIX, including: Linux, OpenBSD, FreeBSD, Solaris, HP-UX, and AIX. It runs on various hardware platforms (x86, Sparc, and Alpha), as well. Check the hardware matrix listed in the documentation to make sure that the OS/hardware combination you prefer is available. The examples in this article are all based on an x86, Solaris 2.7 installation, using the 1.6.1 beta3 source code of Snort.<P>
Usually, Snort can be found at the main Snort homepage: <B>http://www.clark.net/~roesch/security.html</B>, but the author is currently looking for a new home. In the meantime, you can download the Snort source code from one of the various mirror sites. (Check out <B>http://www.whitehats.com</B>, under their Free Tools, Intrusion Detection, NIDS section. Not only does this site store Snort, but it has arachnids, which is a database of known attack signatures that may come in handy when you start writing your own IDS rules.)<P>
In addition to the Snort source code, you need various tools to compile Snort: a C compiler (the gcc version from <B>sunfreeware.com</B> works well), and the <B>libpcap</B> library (download from <B>ftp://ftp.ee.lbl.gov/libpcap.tar.Z</B>).<P>
<B>libpcap</b><p>What is <B>libpcap</B>? <B>libpcap</B> is &#147;a portable framework for low-level network monitoring&#148;. It is system independent and allows a lot of flexibility, especially for an Intrusion Detection System. To install it, un<B>tar</B> the source code in a temporary directory. (Note: you will also need Flex and Bison to successfully compile <B>libpcap</B>. I downloaded versions 2.5.4 and 1.2.8, respectively, from <B>http://sunfreeware.com</B>.) While still in that directory, check the <B>makefile.in</B> file for any path changes that need to be made, then run:<P>
<pre>
./configure
make
make install
make install-incl
make install-man
</pre>
You only need to run the last two commands if you want to have the <B>include</B> and <B>man</B> files. This installation is straightforward and went without issue on my system.<P>
<B>Back to Installing Snort</b><p>Once your C compiler and <B>libpcap</B> are in place, you are ready to compile Snort. Un<B>tar</B> it in a temporary directory. If you want to install the basic Snort, you can run the following while still in the directory you un<B>tar</B>red it in:<P>
<pre>
./configure
make
make install
</pre>
The install will put the binaries in <B>/usr/local/bin</B>. There are also several options you can use while compiling the source code. For example, if you have special system variables that need to be used while compiling, you can run the configure option like this:<P>
<pre>
CFLAGS=-O2 LIBS=-lposix ./configure
</pre>
You can also compile Snort for more than one type of OS at the same time, but you must have a version of <B>make</B> that supports the VPATH variable in order to place the object files for each type in different directories.<P>
An interesting option you can use while compiling is the <B>-enable-smbalerts</B> option, which can be a security issue because it opens a <B>popen()</B> call that runs with root privileges. The best idea is not to use SMB alerting, however, if you want this functionality, it might be best to have Snort running by itself on a machine with minimal services so that if it is ever compromised, nothing else is jeopardized.<P>
Another option is <B>-enable-flexresp</B>. When you compile with this option, your code will allow you to cancel hostile connections when you get a rule match. Note that in order to use this option, you will need another library &#151; <B>libnet</B>. <B>libnet</B> can be found at: <B>https://www.packetfactory.net/libnet</B>. There are more details on this option in the <B>README.FLEXRESP</B> file that comes with the source code.<P>
When I compiled Snort on my Solaris system, I did the basic install, and it compiled without any problems. Once the code is compiled, it is time to start setting up your sensors.<P>
<B>A Side Discussion on IDS Sensors</b><p>It can be diffficult deciding where to place your IDS sensors on your network. I have heard a lot of discussion about where to place sensors: outside the firewall monitoring incoming traffic, inside the firewall monitoring outgoing traffic, or in the DMZ of your network. It mostly depends on two factors: 1) how much flexibility with money and resources that you have with implementing your IDS, and 2) how paranoid you are. Attacks can come from all sides, and my theory is &#151; the more sensors the better. Naturally, along with more comes the problem of support.<P>
If you have numerous sensors, but no one to monitor them, then it becomes a fruitless process. However, if your organization is one that needs to keep a record of everything whether it is analyzed or not, then you may be required to store the logs away as they come in, reading only the incoming traffic logs as time allows. The notion to keep in mind is that IDS alone cannot be depended upon to save your network from would-be attackers. It can play a vital role, along with other tools such as your firewall and routers, to protecting your network, but only if it is used as it was intended.<P>
Intrusion Detection Systems were meant to capture traffic on your network for analysis of suspicious behavior. Depending on what type of system it is, an IDS can only analyze so far. With today&#146;s technology, the real payoff in an IDS is the analyst who can investigate the analogous pattern until resolution is satisfactory. This analyst has to go way beyond the traffic on the network to figure out what a pattern could mean.<P>
Placing sensors carefully and meaningfully throughout your network will not only help get the maximum benefit out of the IDS itself, but will also help the diligent analyst who is trying to understand what it all means. If you have the opportunity to add only one sensor to your network, then I recommend putting it between the Internet and your firewall. The ideal situation is to have two sensors at every gateway: one watching incoming traffic, and one watching outgoing traffic. Outgoing traffic can be just as malicious as incoming traffic due to the large number of attacks that happen from the inside of organizations.<P>
<B>Running Snort</b><p>Now that you have carefully considered where to put your sensors, you are ready to actually run Snort. Snort comes with several basic rule sets, including:<P>
<P>
&#149; <B> web-lib</B> &#151; For Web-based attacks on applications like Cold Fusion and Frontpage<br>
&#149; <B> scan-lib</B> &#151; Looks for port scans, traceroutes, and the like<br>
&#149; <B> overflow-lib</B> &#151; For buffer overflow exploits<br>
&#149; <B> backdoor-lib</B> &#151; For backdoor type of attacks like Back Orifice<br>
&#149; <B> misc-lib</B> &#151; A library for miscellaneous rules called<br>
&#149; <B> snort-lib</B> &#151; References all of the other rules<P>
<P>
These rules are standard with the source code, but are updated frequently by the author. Updated versions can be found on the Snort homepage. See Figure 1 for an example of the <B>overflow-lib</B> rules file.<P>
The format of the rule is broken into two parts: the header and the options. However, each individual rule must be within one line or the parser does not understand it. The header contains the following format: action, protocol, source and destination IP addresses and their netmasks, as well as the source and destination ports information. The rules option section actually contains the alert message and the pattern or signature for which you are inspecting a packet. Examine the last rule in the <B>overflow-lib</B> ruleset as an example. The header consists of:<P>
<pre>
alert tcp any any -&gt; $HOME_NET 21
</pre>
The action portion of the header can mean one of three things: alert (a match for your rule has been found, now follow the designated action), log (log this particular packet), or pass (drop the packet). The types of alerts currently available are: full, fast, or none. The full alert writes a fairly complete log entry in your log file, whereas fast simply writes the timestamp, message, IP address, and port numbers to the log file. None turns off alerting altogether.<P>
The alerting of Snort was kept simple to enable the system to 1) run efficiently and 2) keep security tight. The author of Snort recommends using the excellent freeware third-party tools already available to do any type of fancy alerting, like paging or email. In order to keep the performance of your Snort system running well, I recommend storing your logs on another server that can scan them and alert accordingly.<P>
The second field is the protocol field. Snort currently can filter <B>tcp</B>, <B>udp</B>, and <B>icmp</B> protocols, with the author&#146;s intention of adding more protocols as time allows. The first &#147;any&#148; in this particular header stands for the IP address range, in this case the source address, as it is the left side of the arrow. IP addresses can be in two formats in the header &#151; either with a CIDR block mask to indicate the netmask, or with the use of negation. A CIDR block mask in the format of /24 designates a Class C network, /16 is Class B network, and /32 designates a particular machine address. For negation, an exclamation mark in front of the address indicates that anything but that address should be considered. The second &#147;any&#148; in the header relates to the port number for the source IP.<P>
Below is an example of a header that is scanning for traffic coming from ports less than or equal to 1024 on the 192.168.1.0 network, to ports greater than or equal to 100 on the 10.1.1.0 network:<P>
<pre>
alert tcp 192.168.1.0/24 :1024  \
   -&gt; 10.1.1.0/24 100:
</pre>
On the destination side of the header, the variable <B>$HOME_NET</B> stands for the destination network for which the packet is addressed. 21 is the certain port to be monitored. Notice that <B>$HOME_NET</B> is an environment variable versus an IP address range. Variables were added to the later versions of Snort as a feature, and can be set in the rules file with the following syntax: <B>var</B> <B>HOME_NET</B> <B>xxx.xxx.xxx.xxx/24</B>. Another advanced rule setting is <B>Include</B>, which allows you to include other rules files that are not mentioned when running Snort at the command line.<P>
Currently, there are 15 rule option keywords that can be utilized for rules files. Some of the recognized options are: <B>content</B>, <B>flags</B>, <B>seq</B>, <B>icmp_id</B>, and <B>ipoption</B>. The content rule looks for a particular pattern in the packet&#146;s payload. The <B>flags</B> keyword searches for the TCP flags for certain settings, whereas <B>seq</B> looks at the TCP sequence number field. <B>icmp_id</B> looks for a certain value in the ICMP ECHO ID field, and <B>ipoption</B> examines the IP option fields for certain values. Rule options are separated from each other with a semi-colon, whereas keywords are separated from their corresponding arguments with a colon. Rule options are distinguished by parentheses. Look at the option section of the rule header we already examined:<P>
<pre>
(msg:"FTP buffer overflow1!";  \
   content:"|5057 440A 2F69|";)
</pre>
This option prints the message: <B>FTP buffer overflow!</B> in the alert and log file when the content of <B>|5057 440A 2F69|</B> is found in the <B>tcp</B> packets that are destined for port 21 on your home network.<P>
<B>The Precompiled Plugins</b><p>To make Snort even more flexible, plugin functionality was created in later versions. With this capability, willing contributors can write modules that can act as plugins or preprocessors, running before the detection engine runs, but after the packet has already been examined. The main difference between the two types of available plugins is that the plugin can be called numerous times with different criteria during the examination of a single packet, whereas the preprocessors are used once per packet to perform a single function. Generally, the plugins are called out of the main rules file (<B>snort-lib</B>). The format to use a preprocessor in a rules file is:<P>
<pre>
preprocessor &lt;name&gt;:&lt;options&gt;
</pre>
Several plugins have already been written including: Portscan Detector and Minfrag. The Portscan Detector (written by Patrick Mullen) looks for TCP or UDP packets sent so many times during a specified time period, which you can designate yourself. Running this preprocessor is very flexible and can be used in conjunction with the <B>scan-lib</B> ruleset. The Minfrag preprocessor looks at fragmented packets of a particular size.<P>
It is also painless to add new plugins that you may write by simply updating the <B>plugbase.h</B> and <B>plugbase.c</B> files, adding them to the <B>makefile</B>, and recompiling. Don&#146;t forget to update the <B>snort-lib</B> rules file to reference your new plugin, too!<P>
<B>What Does a Packet Capture Look Like?</b><p>You have compiled your code, configured your rules, and decided where your sensors will go. Now you are finally ready to run Snort! Keep in mind when first using Snort that you may want to adjust the settings to ensure that you are getting the desired traffic. Snort is so flexible that you may end up sniffing for nothing at all!<P>
When you run Snort, designate a location to log the packets it is filtering if your Snort directory doesn&#146;t have a lot of room. When you do so, Snort starts to log by network ID. For instance, if your IP address is 10.x.x.x, then it will make a directory under the designated log directory called 10.x.x.x, and start logging by traffic type. When I ran:<P>
<pre>
snort -v -l /logpath
</pre>
at the command line, a log file called <B>ICMP_ECHO_REPLY</B>, was written in my log directory under my workstation&#146;s IP address. The output of the file looked like:<P>
<pre>
05/23-18:57:59.513554 172.x.x.x \
   -&gt; 172.x.x.y
ICMP TTL:255 TOS:0x0 ID:37055  DF
ID:256   Seq:4608  ECHO REPLY
</pre>
This way of running Snort simply gives you the packet&#146;s protocol header information. In this example, the date and time are given, then the source address, then the destination address. The protocol type is next, then the packet&#146;s time-to-live value, the type of service, the IP Header identification field, the &#147;do not fragment&#148; flag, the ICMP packet identification field, the sequence number of the packet, then the ICMP flag, <B>ECHO</B> <B>REPLY</B>.<P>
If you run Snort with the additional <B>-d</B> flag, you will see packet data, in addition to the header. An example of this output is shown below:<P>
<pre>
05/23-19:04:47.034777 172.x.x.y:1953 \
   -&gt; 172.x.x.x:23
TCP TTL:128 TOS:0x0 ID:53377  DF
*****PA* Seq: 0x2F10B2B5    \
   Ack: 0x502E6B3B   Win: 0x2229
FF FC 1F FF FC 23 FF FC 27 FF FC \
   24 9E 3F EE C2  .....#..'..$.?..
</pre>
In this case, we are looking at the same information as before, except that this is a TCP packet. This time we can see the TCP flags that are set (<B>Push</B> and <B>Ack</B>), as well as part of the data that is being pushed over to the host during this attempted <B>telnet</B> session.<P>
You can see even more data by running Snort with the <B>-e</B> option (Figure 2). This example shows everybody&#146;s favorite type of traffic &#151; good ol&#146; <B>netbios</B>. In this case, we are looking at a UDP packet, as well as much of the payload that comes with those annoying broadcast packets we so often having floating around the network.<P>
<B>Why It Is Good to Use Alone or with Other IDS&#146;s</b><p>Snort is touted as a lightweight IDS. This is an understatement at best, but then again, it cannot do everything. Snort can be a wonderful companion to a commercial IDS when you need to dig down into the packet and monitor for signatures that are seen nowhere but in the payload of the packet. However, if you don&#146;t already have an IDS, then Snort can be used in conjunction with other freeware (such as Shadow) to make a powerful combination for any network.<P>
Shadow, developed by a team at the Naval Surface Warfare Center (<B>http://www.nswc.navy.mil/ISSEC/CID</B>) analyzes datagram headers, as opposed to the content of packets. Used together, these two IDS&#146;s can be great allies as they cover more ground. How you design your network will depend upon how you will want to use these two tools.<P>
<B>More Information</b><p>Snort is a well documented freeware tool but, even after reading this article and the documentation, you may have some questions. In addition to the forum hosted at <B>www.whitehats.com</B> under Security Forum, you can join the Snort mailing list by sending a mail message to: <B>majordomo@bofh.kyrnet.kg</B>, with &#147;subscribe snort&#148; (minus the quotes) in the subject line. You can also sign up for the &#147;snort-announce&#148; or &#147;snort-digest&#148; lists using the same method. You can also email the author directly at: <B>roesch@hiverworld.com</B>.<P>
Snort also has quite a following, which has resulted in some cool tools being developed by the Snort community. Two of these add-on tools are <B>snortlog</B> (a logging tool written in Perl by Angelos Karageorgiou) and <B>snort_stat.pl</B> (a great stats tool for Snort, also in Perl and with output in html, written by Yen-Ming Chen).<P>
<B>Summary</b><p>Snort is a &#147;lightweight&#148; Intrusion Detection System that can stand on its own, or fit in nicely with other IDS&#146;s on your network. Snort has numerous features, which seem to grow frequently, and can be customized to be as specific for your network as you need it to be. Easy to set up and easy to use, Snort is a smart addition to the security engineer&#146;s toolkit.<P>
<B>References</b><p>&#149;  Snort readme files &#151; Much of the material in this article is from the readme files included with the Snort source code, as well as the Snort homepage. Thanks to Martin Roesch for starting such a great thing!<P>
&#149; <B> libpcap</B> readme files <P>
<p>
<h1>About the Author</h1><p>
Kristy Westphal is a versatile network administrator, skilled in troubleshooting and process analysis. Her 6+ years of experience in the IS field have allowed her to become knowledgeable in UNIX and NT, as well as project management and security/disaster recovery planning. She can be reached at: cpwkaw@primenet.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
