<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i09: FreeBSD&#146;s sysctl Interface</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/sep2000.tar"><b class=codeListing>sep2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>FreeBSD&#146;s sysctl Interface</H1><p>
<P>Michael Lucas
<P>
BSD 4.4&#146;s <B>sysctl</B> interface captures and sets kernel state information. This gives sys admins the ability to change the behavior of a running kernel, without a recompile or even a reboot. This ability is invaluable in systems where uptime is vital. The <B>sysctl</B> interface is a powerful but shadowy corner of systems administration.<P>
In this article, I will focus on the <B>sysctl</B> interface as found in FreeBSD 4-stable. The interface also exists in BSD/OS, NetBSD, OpenBSD, SunOS, and any other BSD 4.4-Lite-based UNIX. You will want to check the documentation for your operating system to see which of the MIBs discussed below apply to your system.<P>
<B>Warning<P>
sysctl</B> is a very powerful tool. You can use it to send performance through the roof and save the day. You can also badly maim your system. <B>sysctl</B> modifies a running kernel, and if you kick a program&#146;s legs out from under it, you won&#146;t be happy. Test all changes on a non-production system first.<P>
<B>Retrieving sysctl Information</b><p>The exact <B>sysctl</B>s available on your system, and their values, depend on your kernel configuration and any kernel modules loaded. To get a snapshot of all system <B>sysctl</B>s, run:<P>
<pre>
#sysctl -a
</pre>
This produces a lot of information; you might want to pipe this to your favorite pager or redirect it to a file.<P>
The <B>sysctl</B> Management Information Bases (or MIBs) are similar to SNMP MIBs &#151; arranged in trees, with broad root categories. Each subcategory is separated by periods. The system is deliberately extensible. On a fairly typical kernel, the root trees are as follows:<P>
<P>
<B>kern</B>: Controls core kernel functions<br>
<B>vm</B>: Virtual memory functions<br>
<B>vfs</B>: Filesystem information<br>
<B>net</B>: Network functions<br>
<B>debug</B>: Kernel debugging controls<br>
<B>hw</B>: Hardware descriptions<br>
<B>machdep</B>: Machine-dependent variables<br>
<B>user</B>: Userland interface features<br>
<B>p1003_1b</B>: POSIX features<br>
<P>
MIBs have fairly familiar values: some are integers, others are strings, some are binary. Binary MIBs are generally switches, turning particular behavior on (1) or off (0). String and integer MIBs have a variety of possible meanings, depending on their function.<P>
Some MIBs, and some entire MIB trees, are read-only. The hw tree, for example, is hardware-dependent. These won&#146;t change unless you can change your hardware on the fly.<P>
You can read individual MIB values with <B>sysctl</B> mibname, i.e.:<P>
<pre>
# sysctl hw.usermem
hw.usermem: 148332544
#
</pre>
This tells you how much physical memory remains free.<P>
<B>Writing sysctls</b><p>Read/write values can be set with <B>sysctl -w mibname=value</B>. Let&#146;s look at some common systems administration issues, and how they can be addressed with <B>sysctl</B> MIBs.<P>
<B>IP Networking</b><p>If you&#146;re running a FreeBSD router or firewall, enabling and disabling IP forwarding at will is useful. You can control this with the binary MIB <B>net.inet.ip.forwarding</B>. To disable IP forwarding, do:<P>
<pre>
# sysctl -w net.inet.ip.forwarding=0
</pre>
FreeBSD&#146;s IP stack defaults to not using RFC 1325 and RFC 1644 extensions. You can easily enable these on the fly with:<P>
<pre>
# sysctl -w net.inet.ip.rfc1325=1
# sysctl -w net.inet.ip.rfc1644=1
</pre>
If you&#146;re having problems communicating with another host, you might adjust these MIBs and see what happens. As an example, try using <B>ftp</B> to <B>ftp.netscape.com</B> with these extensions both on and off; the connection only works with the extensions off.<P>
Another default in the GENERIC kernel is the ICMP bandwidth limitation, to rate-limit replied to bad requests. On a busy server, you might find that the default limit is too low:<P>
<pre>
# sysctl -w net.inet.icmp.icmplim=400
</pre>
You might find that you need to accept source-routed packets for a particular application:<P>
<pre>
# sysctl -w net.inet.ip.accept_sourceroute=1
</pre>
Some daemons leave TCP connections open for too long or fail to close them properly. This can soak up system resources or network sockets. You can either wait for these idle connections to time out, or you can enable TCP keepalives and adjust the idle connection deletion time:<P>
<pre>
sysctl -w net.inet.tcp.always_keepalive=1
sysctl -w net.inet.tcp.keepintvl=60
sysctl -w net.inet.tcp.keepinit=60
sysctl -w net.inet.tcp.keepidle=300
</pre>
You will want to experiment with the exact keepalive times needed in your situation.<P>
Even if you have various network daemons logging every connection attempt to your machine, your machine won&#146;t log attempts to connect to ports you have nothing listening on. You can log these attempts with <B>net.inet.tcp.log_in_vain</B> and <B>net.inet.udp.log_in_vain</B>:<P>
<pre>
sysctl -w net.inet.tcp.log_in_vain=1
sysctl -w net.inet.udp.log_in_vain=1
</pre>
You will get messages like this:<P>
<pre>
Oct 14 10:57:20 moneysink /kernel: \
  Connection attempt to TCP \
  209.69.69.85:8080 from 204.71.200.67:1634
</pre>
This can be invaluable for diagnosing connection problems.<P>
If you have a busy server exposed on the Internet, you probably don&#146;t want to enable this continually unless you have a lot of logging capacity. You might also find it instructional to run for short times on such a server, however, watching the log with <B>tail -f /var/log/messages | grep kernel</B>.<P>
Using <B>log_in_vain</B> on a machine in your corporate DMZ can also help justify increasing your security budget. Actual portscan and intrusion attempt data will convince almost anyone of the importance of a reliable firewall.<P>
<B>File and Process Control</b><p>Some systems, such as news servers, have a high number of open files. The FreeBSD kernel computes the maximum number of files it can open at one time from the value of the <B>MAXUSERS</B> kernel config variable. Other systems vary. On such a busy server, it&#146;s quite possible that you will exceed the maximum number of open files, unless you set <B>MAXUSERS</B> to an insanely high value. Every system has days at the far end of the bell curve, afterall.<P>
If you&#146;re out of file descriptors, your <B>/var/log/messages</B> will start filling with messages like:<P>
<pre>
/kernel: file: table is full
</pre>
The <B>kern.maxfiles</B> MIB contains the maximum number of open files on the system. Read the current value, and then reset it to an appropriately higher value:<P>
<pre>
# sysctl kern.maxfiles
kern.maxfiles: 1064
# sysctl -w kern.maxfiles 2128
kern.maxfiles: 1064 -&gt; 2128
#
</pre>
You can set similar resource-related limits with the MIBs:<P>
<P>
<B>kern.maxproc</B>:                  Maximum number of system processes<br>
<B>kern.maxfilesperproc</B>:  Maximum number of files per process<br>
<B>kern.maxprocperuid</B>:      Maximum number of processes per uid<br>
<P>
<B>sysctl</B> can be useful, but it might not always be the best solution. If you want to vary user resources by user ID, you might find <B>/etc/login.conf</B> more appropriate.<P>
<B>System Security</b><p>The <B>kern.securelevel</B> was covered in great detail in my article in the June 2000 issue of <I>Sys Admin</I>, so I won&#146;t talk about it much here. Check the <I>Sys Admin</I> article, or man (8) <B>init</B>. One word of warning on this MIB, however &#151; once you raise a system&#146;s securelevel, you cannot reduce it without rebooting the system. The protections inherent in securelevel can interfere with some system operations. A high securelevel will prevent X from starting, for example. Do not raise <B>kern.securelevel</B> on a production system unless you understand exactly what it will do, or are prepared to reboot the system.<P>
Other <B>sysctl</B> values can be used to enhance system security. If you don&#146;t want users running more than X processes simultaneously, adjust <B>kern.maxprocperuid</B>.<P>
<B>Making sysctl Values Permanent<P>
sysctl</B> changes are only written into the running kernel, and are not saved. If you want them to be permanent, you have two choices. Some <B>sysctl</B> behavior can be controlled by a kernel compile. Check /<B>sys/i386/conf/LINT</B> for kernel options that control this behavior. In some cases, this is not desirable &#151; for example, a high <B>MAXUSERS</B> value will set many system defaults very high. On a news server, all you really care about is <B>kern.maxfiles</B>; cranking <B>MAXFILES</B> is a waste of system resources.<P>
Other <B>sysctls</B>, especially network-related ones, can only be set via <B>sysctl</B>. Some have hooks in /<B>etc/rc.conf</B>. Others can be set in /<B>etc/sysctl.conf</B> in a simple <B>mib=value</B> format:<P>
<pre>
# more /etc/sysctl.conf
kern.maxfiles=4000
#
</pre>
<B>Conclusion</B><P>
The <B>sysctl</B> interface allows the administrator to control almost every aspect of a running kernel&#146;s behavior. You can adjust every aspect of your system to your precise needs. <P>
<p>
<h1>About the Author</h1><p>
Michael Lucas is a networking and FreeBSD consultant working for the Great Lakes Technologies Group. He lives in Detroit, Michigan with his wife Liz, four gerbils, and assorted fish. He can be reached at: mwlucas@exceptionet.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
