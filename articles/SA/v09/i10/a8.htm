<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: MySQL for E-Commerce Web Sites</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>MySQL for E-Commerce Web Sites</H1><p>
<P>Werner Klauser
<P>
Today's e-commerce Web sites do not have dry HTML-coded Web pages. Their dynamic Web pages need to react to changing situations. Whether this situation involves constantly changing inventory, orders being processed, up-to-date sport scores, or live share prices, the Web pages must reflect these changes. You want to constantly re-code the HTML-coded Web pages, but wouldn't it be cool if the Web pages somehow adapted themselves to a constantly changing database? Why is MySQL often used on e-commerce Web sites? For that matter, what is MySQL, and what can you do with it? In this article, I will provide an overview of MySQL and its uses.<P>
<B>Introduction</b><p>MySQL can be used to get a small-scale SQL system to run. With small scale, I do not mean small; I mean not large scale, such as a major airline booking system. MySQL (pronounced &#147;My Ess Que Ell&#148;, not MY-SEQUEL) is a true multi-user, multi-threaded SQL database server using SQL, the most popular and standardized database language in the world. MySQL is a client/server implementation that consists of a server daemon <B>mysqld</B> and many different client programs and libraries. The main goals of MySQL are speed, robustness, and ease of use.<P>
MySQL was originally developed because an SQL server was needed that could handle very large databases of a magnitude faster than what any database vendor could offer on inexpensive hardware. The development team has been using MySQL since 1996 in an environment with more than 40 databases containing 10,000 tables, of which more than 500 tables have more than 7 million rows. This is about 100 GB of mission-critical data.<P>
Because speed was a goal of MySQL's development team, various functions common to a commercial SQL system are missing. These are things such as transactions, stored procedures, locks, views, and triggers. But even with these missing functions, much can be accomplished with MySQL. Originally, (1979!) MySQL was called mSQL and written in BASIC. Later it was named MySQL, and developed on Solaris and Linux systems by T.c.X. DataKonsultAB, a Swedish company. It is now available on every system that supports GNU's <B>configure</B>. This includes Microsoft operating systems.<P>
<B>MySQL Costs</b><p>For normal use, MySQL costs nothing. Only when you sell MySQL directly or as a part of another product do you have to pay for it. The current price is $200 for one license, and $1000 for 10 licenses. What does this mean if you are running a commercial Web server using MySQL? In this case, because you are not directly selling MySQL, you are not required to purchase a MySQL license. However, the designers of MySQL would like you to purchase email MySQL support, which costs $200 per year.<P>
Exceptions to this are Microsoft operating systems. There is a shareware version of MySQL called MySQL-Win32, which may be used for evaluation purposes, but a usage license is required. A license is required under Microsoft Windows because Windows is a highly commercial operating system, with very high development costs. (It usually takes 3 times longer to build and test things under Windows.)<P>
<B>Installing MySQL</b><p>MySQL can be downloaded from: <B>http://www.mysql.com</B>, or from one of its many mirrors. Although its source could be downloaded, it is rarely necessary since you're sure to find the proper binary, which includes manual pages, both in <B>.txt</B> and <B>.html</B> format. In my case, I used <B>mysql-3.22.32-sun-solaris2.7-sparc</B>. The general installation steps are:<P>
<pre>
$ gunzip &lt; mysql-VERSION-OS.tar.gz | gtar xvf -
$ ln -s mysql-VERSION-OS mysql
$ cd mysql
$ scripts/mysql_install_db
</pre>
The only other step to properly (safely) start the MySQL daemon <B>mysqld</B>, is the following:<P>
<pre>
$ bin/safe_mysqld &amp;
</pre>
Included in the downloaded installation README, is a pointer to a script that must be installed as <B>/etc/rc3.d/S99mysql</B> to automatically start the MySQL server daemon when the system starts.<P>
Now that the MySQL daemon is properly running, the next step is to use MySQL with your own database.<P>
<B>Your First Database</b><p>Instruct MySQL to create your database with its <B>mysqladmin</B> command:<P>
<pre>
$ bin/mysqladmin create database999
</pre>
Start your MySQL session with this newly created database:<P>
<pre>
$ bin/mysql database999
</pre>
After some introductory remarks, you will begin using MySQL's shell. Of course, you can enter new commands, but it also supports a history of your past commands. These entries are addressed with the cursor-up and cursor-down keys, and can be edited interactively using almost all of your keyboard's keys.<P>
<B>Create a Table</B><P>
<pre>
mysql&gt; create table people (name varchar(20), \
    first varchar(20), address varchar(60));
</pre>
Note that each SQL command ends with a semi-colon. See how MySQL describes your table with the <B>desc</B> <B>SQL</B> command:<P>
<pre>
mysql&gt; desc people;

+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| first   | varchar(20) | YES  |     | NULL    |       |
| address | varchar(60) | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
</pre>
Now insert two records describing your favorite friends:<P>
<pre>
mysql&gt; insert people values ('Doe', 'John', \
   'his address');
mysql&gt; insert people values ('Doe', 'Jane', \
   'same address as John Doe');
</pre>
View the new data:<P>
<pre>
mysql&gt; select * from people;

+------+-------+--------------------------+
| name | first | address                  |
+------+-------+--------------------------+
| Doe  | John  | his address              |
| Doe  | Jane  | same address as John Doe |
+------+-------+--------------------------+
</pre>
Or select only one person with a more constraining select:<P>
<pre>
mysql&gt; select * from people where first = 'Jane';

+------+-------+--------------------------+
| name | first | address                  |
+------+-------+--------------------------+
| Doe  | Jane  | same address as John Doe |
+------+-------+--------------------------+
</pre>
Update information:<P>
<pre>
mysql&gt; update people set address = 'John\'s \
   new address' where first = 'John';
</pre>
These are the simpler SQL commands supported my MySQL. The next step is to be able to access and modify the database using dynamic HTML Web pages.<P>
<B>Using MySQL with Dynamic HTML Web Pages</b><p>Before the dynamic HTML Web pages that will be using Perl can access the database, you must download some Perl modules. One method is to download the proper Msql-Mysql modules from MySQL's download site, and then properly configure and make these modules. An easier method is to use Perl's CPAN (Comprehensive Perl Archive Network). If you don't have this valuable aid, download it from:<P>
<pre>
http://www.cpan.org/modules/bymodule/CPAN
</pre>
Install it:<P>
<pre>
$ perl Makefile.PL
$ make
$ make test
$ make install
</pre>
Or, use the CPAN module to retrieve and install the two necessary modules:<P>
<pre>
$ perl -MCPAN -e "install CGI"
$ perl -MCPAN -e "install DBD::mysql"
</pre>
An advantage of CPAN is that it automatically downloads and installs necessary prerequisites. Now you can begin with the Perl CGI scripts. You need to do the following:<P>
<P>
&#149;  Connect with your database.<br>
&#149;  Create your SQL statement.<br>
&#149;  Use prepare to send it to the database server.<br>
&#149;  Execute the SQL command.<br>
&#149;  Fetch the results.<br>
&#149;  Finish the statement.<br>
&#149;  Disconnect from the database.<br>
<P>
Here's a short example:<P>
<pre>
#!/usr/bin/perl -w
use strict;
use DBI;

my $dbh = DBI-&gt;connect("DBI:mysql:database999");
my $sth = $dbh-&gt;prepare("select name, first from people");
$sth-&gt;execute();
my ($first, $name);
$sth-&gt;bind_col(1, \$name);
$sth-&gt;bind_col(2, \$first);
while ( $sth-&gt;fetch() ) {
    print("$first $name\n");
}
$sth-&gt;finish;
$dbh-&gt;disconnect;
</pre>
Note that this simple example has no error handling. This would certainly not be useable for a commercial Web site. This example can be executed from the command line and prints the names found in database999's people table. The next step is to add the necessary lines making it a <B>cgi-bin</B> executable Web page with an appropriate Web design:<P>
<pre>
#!/usr/bin/perl -w
use strict;
use DBI;
use CGI;

my $query = new CGI;
print $query-&gt;header;

my $dbh = DBI-&gt;connect("DBI:mysql:database999");
my $sth = $dbh-&gt;prepare("select name, first from people");
$sth-&gt;execute();
print("&lt;html&gt;&lt;body&gt;&lt;table border=1&gt;&lt;th colspan=2&gt;Name&lt;/th&gt;");
my $name;
$sth-&gt;bind_col(1, \$name);
$sth-&gt;bind_col(2, \$first);
while ( $sth-&gt;fetch() ) {
    print("&lt;tr&gt;&lt;td&gt;$first&lt;/td&gt;&lt;td&gt;$name&lt;/td&gt;&lt;/tr&gt;");
}
print("&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;");
$sth-&gt;finish;
$dbh-&gt;disconnect;
</pre>
Only three lines were added to allow CGI use. Some HTML code was added to <B>print</B>'s output to make a useable table of the people's names. Simple, isn't it?<P>
<B>An E-commerce Example Using MySQL</b><p>I was involved in developing the B2B Web site <B>http://www.chipexchange.com</B>. Chipexchange is an Internet-based trading platform designed to allow the electronic chip industry to source and sell standard components. Contracts are concluded between a buyer who entered a buying request with a maximum price on the platform, and the seller who, during the auction procedure, bids the lowest acceptable price. These transactions and reverse-auctions are saved using MySQL's database addressed using Perl scripts.<P>
An in expensive but quality database in the form of MySQL allows your Web pages to adapt themselves to your constantly changing business. That's a necessary step for a successful e-commerce Web site.<P>
<p>
<h1>About the Author</h1><p>
Werner Klauser is an independent UNIX consultant working near Zurich, Switzerland. While not paragliding, enjoying his girls, or roarin' around on his Harley chopper, he can be reached at klauser@klauser.ch or via his Web page www.klauser.ch.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
