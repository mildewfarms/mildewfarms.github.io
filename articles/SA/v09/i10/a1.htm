<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: Installing and Configuring OpenSSH</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Installing and Configuring OpenSSH</H1><p>
<P>Matt Lesko
<P>
Thanks to the proliferation of packet sniffers and the escalating reasons for data security and integrity, it should no longer be acceptable to allow network logins to be sent in plain text. By discovering passwords sent over the wire or hijacking a connection via man-in-the-middle attacks, a malicious cracker could quickly commandeer your network for her own nefarious purposes. Luckily, a solution has been created, Secure Shell, which replaces plain-text communication protocols, such as <B>telnet</B>, <B>rsh</B>, and <B>rlogin</B>. Many other features are included besides encryption, such as X11 forwarding (which allows secure use of X applications across a network), port forwarding (allowing standard TCP ports to be securely accessed), strong authentication, authentication forwarding (allowing a single resource to hold authorization information), Kerberos and AFS ticket forwarding, and data compression.<P>
Secure Shell, or SSH, was originally a free implementation written by Tatu Ylonen. After restrictive licenses were placed upon the code, Bjorn Gronvall decided to write a more open version of the software, called OSSH. This caught the attention of the developers of OpenBSD, already well known for their extensive attention to security. Within a few months, OpenSSH 1.2.2 had been released (and incorporated into OpenBSD 2.6). Many additions and improvements were made to the previous version, including: all patent-encumbered algorithms removed and replaced, support of <B>ssh</B> 1.5 protocol, support for Kerberos IV authentication, and far leaner, cleaner, more secure code. The license is extremely liberal, and may be used without charge for commercial and non-commercial applications alike. The patent on RSA public-key algorithm expires in September 2000, making both protocol versions usable free of charge.<P>
Development continued on OpenSSH, culminating on May 4, 2000 when OpenSSH 2.0 was released. OpenSSH 2.0 works with the <B>ssh</B> 1.3, 1.5, and superior 2.0 protocols, with the ability to automatically adjust to the best performing protocol. Since then, development has continued, particularly in the area of porting to other operating systems. OpenSSH is now available for Linux, Solaris, HP/UX, Irix, AIX, SCO, and NeXT.<P>
<B>Getting OpenSSH</b><p>OpenSSH can be downloaded from the team's Web site at:<P>
<pre>
http://www.openssh.com/portable.html
</pre>
It is available in RPM format for Linux systems, and as source in the standard tarballed format. Find a mirror close to you, and download the format you want. If downloading for a non-OpenBSD system, make sure you grab the file from the &#147;portable&#148; directory, or you may have trouble installing OpenSSH. You will also need OpenSSL version 9.5.0a or greater. It should be available as either an RPM in the RPMs directory or from the OpenSSL Web site at:<P>
<pre>
http://www.openssl.org/source/
</pre>
Zlib is also required. If you do not have it already, fetch it from:<P>
<pre>
ftp.freesoftware.com/pub/infozip/zlib/zlib.tar.gz
</pre>
If the target system does not have an entropy device (<B>/dev/random</B>, <B>/dev/urandom</B>, etc.), you must also download and install <B>egd</B>, the entropy gathering device, from:<P>
<pre>
http://www.lothar.com/tech/crypto/
</pre>
PAM (pluggable authentication modules) support is included in OpenSSH -- Solaris contains PAM by default, as do some Linux distributions. If you do not have PAM and wish to use it, you can get it at:<P>
<pre>
http://www.kernel.org/pub/linux/libs/pam/
</pre>
The OpenSSH installation process will automatically detect and install support for PAM if it is found on the system.<P>
If your media is tarballed, do the following:<P>
Install OpenSSL:<P>
<P>
1. Untar the archive and enter the <B>openssl-version</B> directory.<br>
2. Read the INSTALL file if desired.<br>
3. <B>./config</B> (change the directory in which <B>ssl</B> is installed via <B>--openssldir=directory</B>, default is <B>/usr/local/ssl</B>).<br>
4. <B>make &amp;&amp; make test</B><br>
5. <B>/bin/su</B><br>
6. <B>make install<br>
</B><P>
Install compression libraries (if not already present):<P>
<P>
1. Untar the archive and enter the <B>zlib-version</B> directory.<br>
2. <B>./configure</B><br>
3. <B>make &amp;&amp; make test</B><br>
4. <B>/bin/su</B><br>
5. <B>make install</B><br>
<P>
Install the entropy gathering daemon (<B>egd</B>) if your system does not have <B>/dev/random</B> or <B>/dev/urandom</B>:<P>
<P>
1. Untar the archive and enter the <B>egd-version</B> directory.<br>
2. <B>perl Makefile.PL</B><br>
3. <B>make &amp;&amp; make test</B><br>
4. <B>/bin/su</B><br>
5. <B>make install</B><br>
6. Configure your <B>rc</B> scripts to run <B>egd.pl</B> socket at bootup; the argument given is the socket used for random data. Example: <B>/usr/local/bin/egd.pl</B> <B>/dev/random</B> would create a UNIX-socket at <B>/dev/random</B> that can be read for the entropy <B>egd.pl</B> provides. <B>egd.pl</B> will automatically fork into the background.<br>
<P>
Install OpenSSH via tarball:<P>
<P>
1.  Untar the archive and enter the <B>openssh-version</B> directory<br>
2.  <B>./configure</B> <B>--with-openssl-dir=/ \<BR>
usr/local/ssl--with-entropy-pool=/ \<BR>
dev/random</B> (or wherever you had <B>egd.pl</B> create an entropy socket). If you did not use use <B>egd.pl</B>, but have a random device in an unusual place, use <B>--with-random=FILE</B>.<br>
3.  <B>make</B><br>
4.  <B>make install</B><br>
5.  These files are by default stored in <B>/usr/local/bin</B> for the clients and <B>/usr/local/sbin</B> for the server (<B>sshd</B>), which can be changed via <B>./configure --with-prefix=DIR</B>.<br>
<P>
Configuration files are also therefore placed in <B>/usr/local/etc</B> automatically, and you can change this via <B>./configure</B> with the <B>--with-sysconfdir=PATH</B>.<P>
Installing OpenSSH and OpenSSL via RPM:<P>
<P>
1.  Make sure you have downloaded an RPMs for OpenSSL, server, and clients. Most Linux distributions contain <B>zlib</B> and <B>/dev/random</B> already installed.<P>
2. <B>rpm -i openssl-version.rpm</B><br>
3. <B>rpm -i openssh-version.rpm</B><br>
4. <B>rpm -i openssh-server-version.rpm</B><br>
5. <B>rpm -i openssh-clients-version.rpm</B><br>
<B>Configuring OpenSSH to Work</b><p>OpenSSH main configuration files are located at <B>/usr/local/etc/sshd_config</B> and <B>/usr/local/etc/ssh_config</B> (unless you changed the <B>sysconfdir</B> varible). Most of the options are fairly self-explanatory and do not need to be changed. The default installation point for these files when installed by RPMs is <B>/etc/ssh/sshd_config</B> and <B>/etc/ssh/ssh_config</B>. It's good to look through these files and familiarize yourself with the options. The Protocol line is commented out by default (<B>#</B>) in <B>sshd_config</B>, and contains information for <B>sshd</B> about which protocols to use. The default is to use SSH Version 2 followed by Version 1.5; however, this can be changed if you do not wish to serve 1.5 clients (or vice versa).<P>
Various options are available in <B>ssh_config</B> and can be set on a host-by-host or default configuration. If your installation media was RPMs, you will find a start-up script installed into <B>/etc/rc.d/init.d/sshd</B> and <B>/etc/rc.d/rc[2-5].d/S55sshd</B>. If you installed via source code, you will need to configure <B>/usr/local/sbin/sshd</B> and <B>/usr/local/bin/egd.pl</B> to start during your system's boot sequence. At this time, you may generate your RSA or DSA keys using <B>ssh-keygen</B> if you plan to use them. The default is to create an RSA key in <B>$HOME/.ssh/identity</B>; however, with the <B>-d</B> option, a DSA key is generated in <B>$HOME/.ssh/id_dsa</B>. RSA is used by protocols 1.3 and 1.5; whereas DSA is used by protocol 2.0. A passphrase increases security for these keys, but is not necessary.<P>
<B>Using OpenSSH</b><p>The main focus of <B>ssh</B> is to replace <B>telnet</B>, which is easily accomplished by simply typing: <B>ssh host</B>. Assuming <B>sshd</B> is running on the target host, you should soon see a password prompt for your user name, enter it, and you will be dropped into your default shell. Some useful options are:<P>
<P>
<B>-l login</B> -- Login as this user.<br>
<B>-v</B> -- Verbose, gives plenty of output while it connects, good for diagnosing problems.<br>
<B>-C</B> -- Compression, compresses all data, very useful for slow data links.<br>
<P>
You may also decline from starting an interactive shell; simply place a command after the host and it will be executed on the remote machine, akin to <B>rexec</B>. If you created an RSA or DSA key for yourself, copy either <B>$HOME/.ssh/identity.pub</B> to <B>$HOME/.ssh/authorized_keys</B> or <B>$HOME/.ssh/id_dsa.pub</B> to <B>$HOME/.ssh/authorized_keys2</B> on the remote machine, and you will not be required to enter your password. Use the <B>cat &gt;&gt;</B> command for those files since more than one authorized key is allowed, a separate line for each key. If you want a replacement for <B>ftp</B>/<B>rcp</B>, use the OpenSSH supplied program <B>scp</B>, which works in a manner similar to that of <B>rcp</B> (e.g., <B>scp</B> <B>user@host:path</B> <B>localname</B>). For the functionality of interactive <B>ftp</B> with <B>ssh</B>, check out Brian Wellington's <B>sftp</B> at:<P>
<pre>
http://www.xbill.org/sftp
</pre>
The latest version is 0.9.5, but works reasonably well. There are too many options to describe here, so check the man pages for more information on these programs. Some other interesting features not covered here include X11 session forwarding, port forwarding, and support for IPv6.<P>
<B>Conclusion</b><p>I hope that this article has provided you with an understanding of the need for secure communication channels and the ease with which these services can be installed and used. Remember that installing OpenSSH makes your system more secure only if you then disable <B>rsh</B>, <B>rlogin</B>, <B>rexec</B>, <B>telnet</B>, and possibly, <B>ftp</B> from <B>/etc/inetd.conf</B>. OpenSSH is Open Source and will continue to be improved, particularly in September 2000 when the RSA patent expires. Consult the following references for more information on Secure Shell:<P>
<P>
<B>http://www.openssh.com</B> -- OpenSSH: The free, open version of <B>ssh</B>.<br>
<B>http://www.ssh.com</B> -- A commercial alternative.<br>
<B>http://www.zip.com.au/~roca/ttssh.html</B> -- A <B>ssh</B> extension to the popular TeraTerm for Windows.<br>
<B>http://www.xbill.org/sftp/</B> -- An interactive <B>ftp</B> service over <B>ssh</B>.<br>
<B>http://www.openssl.org</B> -- A free implementation of the Secure Sockets Layer.<br>
<B>http://www.openbsd.org</B> -- OpenBSD: The proactive security-minded UNIX.<br>
<B>comp.security.ssh</B><br>
<I>SSH, The Secure Shell: The Definite Guide</I>. Daniel J. Barrett and Richard Silverman. O'Reilly and Associates. ISBN: 0596000111.<P>
<p>
<h1>About the Author</h1><p>
Matt works as the systems administrator for a database consulting company. He is a big fan of Linux, BSD, and Free Software in general, and has been using them since 1997. He can be reached at: matt@advancedatatools.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
