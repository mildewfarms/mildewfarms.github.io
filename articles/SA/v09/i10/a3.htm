<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: nmap-web: Port Scanning Made Easy</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a3_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a3_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a3_f3.htm">Figure 3</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>nmap-web: Port Scanning Made Easy</H1><p>
<P>Alek Komarnitsky
<P>
Hardly a day goes by that you don't read about crackers (&#147;blackhats&#148;) breaking into a machine and causing problems. While there are a number of ways to break into machines, a very common approach is via &#147;back doors.&#148; These are typically unguarded ports that are either running an unnecessary service (because the vendor shipped it that way) or perhaps a necessary service (e.g., <B>ftp</B>, Sendmail, <B>ssh</B>) that is being handled by an unsecure software version. After that, the blackhat may often configure a process to listen on a high-numbered port that allows future undetected access. Systems administrators (&#147;whitehats&#148;) should know what ports are open and what software is answering in order to maintain security on their systems.<P>
<B>nmap-web</B> provides a Web interface to the <B>nmap</B> program and makes port scanning super easy. You can not only tell which ports are open, but also acquire information on what is answering at those ports. <B>nmap-web</B> can be used to answer the following type of questions:<P>
<P>
&#149;  Are you aware of what ports are open on your machines and sure that only those you need are open? That is, would you know if a someone has installed a &#147;back door&#148;?<P>
&#149;  Is anyone running an unauthorized Web server?<P>
&#149;  Can you easily check the version of Sendmail running on hundreds of machines?<P>
&#149;  Can you easily check the time synchronization of hundreds of machines?<P>
&#149;  Can you do a quick-n-dirty check of DNS A and PTR records?<P>
<P>
Although <B>nmap-web</B> can also be used by blackhats, it is a useful tool for whitehats to stay one step ahead.<P>
<B>A Brief Background on TCP/IP and Ports</b><p>A complete discussion of TCP/IP is beyond the scope of this article, and I assume you have some knowledge of networking, but here's a brief background to bring you up to speed.<P>
There are typically 65,536 ports that are available on machines running modern TCP/IP networking protocols. Although the assignment of a particular port number to a protocol is arbitrary, there are a number of well-known ports, such as <B>ftp</B> on port 21, <B>telnet</B> on port 23, Sendmail on port 25, <B>httpd</B> on port 80, etc.<P>
So when you hit a Web site with your favorite browser, it opens a TCP connection to port 80 (by default) on that Web site. Your browser sends some data and the Web site responds, which the Browser then formats for you. If you'd ever like to see this &#147;manually&#148;, here's an example of how this looks behind the scenes:<P>
<pre>
My-Machine$ telnet SOME-WEB-SITE 80  \
   (assumes no proxies in between)
Trying 11.22.33.44 ......
Connected to SOME-WEB-SITE
Escape character is '^]'.
GET /   (&lt;CR&gt;)
   (Actual HTML code will be shown \
    on your screen)
Connection closed by foreign host.
</pre>
And here's an example of the &#147;conversation/protocol&#148; for Sendmail on port 25:<P>
<pre>
 My-Machine$ telnet SOME-MAIL-SERVER 25
 Trying 11.22.33.44...
 Connected to SOME-MAIL-SERVER
 Escape character is '^]'.
 220 SOME-MAIL-SERVER ESMTP Sendmail \
   8.9.3/8.9.3; "DATE FIELD"
 &gt;&gt;&gt; EHLO My-Machine
 250-SOME-MAIL-SERVER. Hello My-Machine, \
   pleased to meet you
 &gt;&gt;&gt; MAIL From:&lt;alek@My-Machine&gt;
 250 &lt;alek@My-Machine&gt;... Sender ok
 &gt;&gt;&gt; RCPT To:&lt;alek@SOME-MAIL-SERVER \
   &gt;
 250 &lt;alek@SOME-MAIL-SERVER&gt;... \
   Recipient ok
 &gt;&gt;&gt; DATA
 354 Enter mail, end with "." on a line by \
   itself
 &gt;&gt;&gt; .
 250 OAA14516 Message accepted for delivery
 alek@SOME-MAIL-SERVER ... Sent (OAA14516 \
   Message accepted for delivery)
 &gt;&gt;&gt; QUIT
 221 SOME-MAIL-SERVER closing connection
</pre>
A similar &#147;conversation&#148; goes on for other protocols such as <B>ftp</B>, <B>ssh</B>, <B>telnet</B>, etc. An interesting thing to note about the Sendmail example above is that the blackhat now knows that you are running Sendmail version 8.9.3 on port 25, which may be useful information. That version happens to be a pretty secure version, but what if you had one machine out of hundreds running an older unsecure version? It is possible to configure Sendmail to hide this information (which is a good idea), but you shouldn't rely on this &#147;security through obscurity&#148; approach.<P>
Note that the focus of this article (and <B>nmap-web</B>) is on TCP ports -- there are also UDP (and other) types of ports. For instance, DNS queries are often handled via UDP queries to port 53. While these are important (and <B>nmap</B> has extensive capabilities in that area), <B>nmap-web</B> currently only does TCP queries. This is mostly because TCP queries tend to be more of interest, and you can do them without root access. I wanted to minimize privileges for <B>nmap-web</B>.<P>
<B>What is Port Scanning?</b><p>Port scanning is (basically) the process of seeing which ports are open and responding to queries. Here's a sample code snippet that attempts a <B>telnet</B> connection to each of the 65,536 ports. On most machines, you will get a &#147;connection refused&#148; for most of these queries, meaning that the port is not open.<P>
<pre>
 #!/bin/csh -f
 set hostname = SOMEHOSTNAME
 @ port = 1
 while ( $port &lt;= 65535 )
    echo -n "Checking $port ... "
    cat /dev/null | telnet $hostname $port
    @port ++
 end
</pre>
Not only is this output difficult to read, but it took 40 minutes to run. A more efficient approach is to use a &#147;port scanner&#148; that is optimized to scan all the ports (doing the work in parallel) and present the results in a more readable format. For instance, it took <B>nmap</B> 24 seconds to complete the same type of scan as above. You could run <B>netstat</B> (or <B>lsof</B>) on the local machine to show what ports are open, but these tools don't allow scanning of remote machines. These tools are more useful for obtaining additional information once you figure out something is amiss.<P>
Many of the subtleties of port scanning are beyond the scope of this article -- for instance, firewalls may filter or drop queries, making it more difficult for the port scanner to assess what is out there. On the other hand, port scanners can use advanced features of the TCP/IP protocol to ferret out information that might not be obtainable through normal means. There are many resources on the Web (e.g., Fyodor's Web Site at <B>http://www.insecure.org/</B>) with information on this topic.<P>
Some administrators may think that because they have a firewall they don't have to worry about port scanning, since the firewall blocks these from the Internet. Although that may be true (are you certain your firewall can not be penetrated?) for external access, you should still make sure you aren't vulnerable from internal access. The &#147;classic&#148; model of a hard exterior (via the firewall) that's soft-n-chewy internally can be improved upon by tightening up stuff on all machines.<P>
<B>What is nmap?<P>
nmap</B> (<B>http://www.insecure.org/nmap/</B>) is a very powerful and easy-to-use tool to check which ports are open/responding on your computer. Note that a lot more things can be done with it (e.g., remote OS fingerprinting). Check out the Web site for further information. It is lightning fast -- depending on the number of ports you scan, rates of 100+hosts/seconds are easily obtainable. Fyodor, who has been very responsive to requests and questions, actively maintains nmap. Here is a quote from SANS:<P>
&#147;<B>nmap</B> is perhaps the most versatile and widely used tool for penetration testing today. Offering a wide range of port-scanning techniques, this utility will report which ports are open, who owns each process, which service is typically assigned to the port, the probability of a TCP sequence prediction attack, and more. Another useful feature of <B>nmap</B> is its ability to remotely &#147;fingerprint&#148; a machine's operating system. This utility has become the penetration tester's Swiss Army Knife.&#148; (<B>http://www.sans.org</B>).<P>
If nothing else, this quote should convince administrators that they need to be using something like nmap (or <B>nmap-web</B>) for port scanning so they can stay one step ahead of crackers.<P>
<B>What is nmap-web?</b><p>I wrote <B>nmap-web</B> because I wanted an easy-to-use Web interface to <B>nmap</B>. My initial interest was a quick-n-dirty way to determine which machines were running Web servers, since there was a corporate effort underway to get a handle on this. But it quickly became obvious that there were other interesting things one could do with it. Since a picture is worth a thousand words, check out Figure 1:<P>
The abbreviated example in Figure 1 (I didn't want to show all 1,000+ UNIX boxes) demonstrates a scan of port 80 (default for <B>HTTPD</B>). From the top, the figure shows:<P>
<P>
&#149;  <B>Select port(s) to check:</B> This is a pull-down that lists which port(s) you want to scan for. This is defined by the administrator who installed <B>nmap-web</B>. So, you can control the type of scans that are allowed.<P>
&#149;  <B>Port Numbers:</B> Click here to see information on port numbers and what is typically running on that port (e.g., port 80 is typically <B>httpd</B>).<P>
&#149;  <B>Show machines that appear but do not seem to be up:</B> If a machine is not pingable, then we assume it must not be running (see mojo in the lower frame). It's usually a good idea to have this selected, unless you have a lot of down machines and don't want them to clutter the display.<P>
&#149;  <B>Show machines that don't answer at any of the selected ports:</B> A machine may be up but not answering at the selected port (in this example, no Web servers are running on africa, nowhere, and perth). Similar to comments above, you can decide whether this information is of interest to you.<P>
&#149;  <B>Get program/version information running on an individual port selected:</B> If not clicked, then <B>nmap-web</B> will just display whether something is answering at the port. If you do select it, then <B>nmap-web</B> will try to determine what version of software is running there. In this example, we can see various types of Web servers and versions.<P>
&#149;  <B>Select one of these groupings:</B> The administrator who installs <B>nmap-web</B> can preload a list of hosts or netgroups that show up in this box, so it's easy to quickly take a look at machines of interest.<P>
&#149;  <B>Enter a space-separated list to scan:</B> Enter the name(s) of hosts you want to scan or their IP addresses. Some wildcards are allowed to do subnet scanning.<P>
&#149;  <B>Start the Scan</B><P>
&#149;  <B>Help/Information/README:</B> Miscellaneous information about <B>nmap-web</B>.<P>
<P>
Once you have defined your scan and hit Start the Scan, the bottom frame shows the results. It gives a count of the number of machines and shows what is being scanned. In the left column, it shows each IP/hostname. Forward or reverse lookups are done depending on whether you enter hostnames or IP addresses. For example, if the IP address for &#147;nowhere&#148; cannot be found, it shows unresolvable. This is rather handy, since errors in your DNS configuration will be obvious, and it's especially easy to forget a reverse PTR record. The right column shows the results of the scan. Since we clicked on show version, <B>nmap-web</B> shows what is running on that port. The &#147;standard&#148; Web server is Apache (defined by the admin who installed <B>nmap-web</B>), so anything answering as something different is highlighted in red. There's also some summary information at the bottom.<P>
So, not only did we find out which machines are running Web servers (determined by seeing if something was answering on port 80), but we also got a list of type of Web servers and even a misconfigured DNS entry as a bonus!<P>
Figure 2 shows another useful way of using <B>nmap-web</B>. On this network, port 13 (daytime) is enabled via <B>inetd</B>. So, you can do a <B>telnet HOST 13</B>, and it will return the current date/time on that machine. <B>nmap-web</B> can do a quick scan of your network and check whether your time synchronization (via <B>ntp</B>, I hope) is working correctly. In this example, everything looks okay with the exception of two machines that are 80 and 90 seconds off. These would be worth looking at further. <B>nmap-web</B> lets you set the allowable time skew with anything exceeding that highlighted in red. Time synchronization is a &#147;good&#148; thing, and with <B>ntp</B> it's easy. So, there's no excuse not to be time synced.<P>
Figure 3 shows an example of scanning multiple ports. As mentioned earlier, administrators installing <B>nmap-web</B> can predefine a list of port(s) to scan. In this example, we are checking for a variety of ports that should not be enabled on most of the machines. Note that we only want to see those machines that are either down or are answering at these ports (i.e., don't show the &#147;uninteresting&#148; situation of a machine up and running with all those ports closed).<P>
This output clearly shows that we have several machines that are running the <B>finger</B> daemon (port 79) and various POP/IMAP services (109, 110, and 143). Further investigation of this would be warranted to make sure we truly need those services running on those machines and have the software appropriately configured to make them secure.<P>
<B>Installing and Configuring nmap-web</b><p>Installing and configuring <B>nmap-web</B> is straightforward. From the INSTALL docs:<P>
<P>
1.  Get/compile/install <B>nmap</B> (&gt;=2.52) from <B>http://www.insecure.org/nmap/</B>.<P>
2.  Create a directory under your Web site and put all the files there.<P>
&#149;  An example is <B>/home/httpd/html/nmap-web/</B>.<br>
&#149;  Modify <B>nmap-web</B>'s <B>index.html</B> to reflect the <B>cgi-bin</B> path selected in #3 below.<br>
&#149;  Optionally, create log and counter directories (see <B>nmap_web_local.pm</B>).<P>
3.  Copy <B>cgi-bin/check-for-web.pl</B> into the appropriate <B>cgi-bin</B> directory.<P>
&#149;  An example is <B>/home/httpd/cgi-bin/</B>.<br>
&#149;  Modify the location of Perl and the &#147;INCLUDE&#148; directory, which should be  the path in #2 above with &#147;include&#148; appended.<P>
4.  There are several &#147;include&#148; files that are used -- the idea is that you should NOT have to change any of these except the local ones; and those should be relatively constant between releases. Please do review these and make changes as appropriate from the comments!<P>
5.  You can use the sample <B>misc/getnetgroup</B> (see <B>nmap_web_local.pm</B>).<P>
6.  Point your browser to the directory listed above and rock-n-roll. It should be fairly self-explanatory. If you peruse the code, you'll see there is the ability to put a <B>-ports</B> manually into the host field. This is handy if you decide there is a new port you want to scan, and you don't want to have to change the code.<P>
<P>
The <B>nmap_web_local.pm</B> allows you to configure which types of scans are allowed, optionally restrict which browser IPs are even allowed to run it (above and beyond any <B>.htaccess</B> Web server permissions you might set up), log all <B>nmap-web</B> runs, and other cool tricks.<P>
<B>How Does nmap-web Work in Real Life?<P>
nmap-web</B> has been very useful as a quick and easy-to-use check of which ports are open on various machines. While you could use <B>nmap</B> itself for this, <B>nmap-web</B> provides a Web interface, plus it tidies up the output a bit for certain functions that are useful when scanning large numbers of machines.<P>
A couple of examples mentioned above were scanning for Web servers (and what version of software), checking time synchronization, and seeing if any unnecessary ports were open. Other useful things include:<P>
<P>
&#149;  Version scanning/checking is very useful to make sure you're running the latest Sendmail, <B>sshd</B>, <B>ftpd</B>, etc.<P>
&#149;  While scanning all 65,536 ports can take a few minutes, this can be done on similarly configured machines to see whether anything looks different (i.e., basically a Tripwire concept for network port scanning). Remember that a non-root user can listen on ports greater than 1023, which is a common approach used by the crackers to open a back door.<P>
&#149;  You can use the command line capability of <B>nmap-web</B> to generate periodic snapshots, and then do diffs/compares to see whether anything has changed.<P>
<P>
For example, a recent security advisory warned about a remote exploit with older versions of <B>qpopper</B>. It was trivial to use <B>nmap-web</B> to identify which machines were running POP, and which ones had older software that needed to be updated. After this was done, <B>nmap-web</B> was used to confirm that no older versions were still running.<P>
<B>Summary<P>
nmap-web</B> has been downloaded hundreds of times by the Internet community and the email feedback has been positive and has also resulted in polishing of the code. It provides an interface to allow controlled, audited port scanning. I hope <B>nmap-web</B> will encourage more whitehats to use hacking tools, such as port scanners, to test their machines and networks before the &#147;blackhats&#148; find them.<P>
<B>Future nmap-web Work<P>
nmap-web</B> was designed as a tool to help admins easily discover which ports are open and what is running on them in order to take any appropriate action. There's a temptation to tweak <B>nmap-web</B> to provide a Web interface to everything that <B>nmap</B> can do, but there are already various TK/X-based toolkits that allow this. So, rather than incorporate all the scanning options available, I decided to just provide the most interesting ones that don't require root access.<P>
One area where work can be done is to add more code to assess what versions of software are running for different ports. <B>nmap-web</B> currently has some code to do simple connections to the named port and look for what is expected there. More sophisticated approaches can be done and, in fact, there is discussion about adding this functionality into <B>nmap</B> itself. <B>nmap-web</B> could, of course, take advantage of that.<P>
<B>Availability</b><p>A tarball of <B>nmap-web</B> with code, documentation, and examples can be found at: <B>http://www.komar.org/komar/alek/ -&gt; Misc. Tech Stuff -&gt; nmap-web</B> or downloaded from <I>Sys Admin</I>'s Web site: <B>http://www.sysadminmag.com</B>. I welcome any suggested enhancements, bug reports or fixes, and comments in general.<P>
<p>
<h1>About the Author</h1><p>
Alek Komarnitsky (alek@komar.org) has spent the last 5+ years as Chief Technologist for a large IT consulting/outsourcing firm and helps manage a network of over 1,000 UNIX workstations supporting rocket scientists. Before that he was the Network/Systems Manager for two Boulder County software start-ups, and he spent his first 4 years out of college as an Air Force Officer doing weapons research. He has an Aero/Astro Engineering undergraduate degree from the University of Washington and an MBA from CU-Boulder. 


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
