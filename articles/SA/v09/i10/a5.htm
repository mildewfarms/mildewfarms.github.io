<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: Little Acts of Magic</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Little Acts of Magic</H1><p>
<P>Randal L. Schwartz
<P>
So, let's start with some text manipulation. I have a poem written by a good friend of mine, Peg Edera, in a file named <B>peg_poem</B>, as follows:<P>
<P>
The Little Acts<P>
<P>
Maybe there is no magic.<br>
Maybe it is only faith.<br>
The lonely girl stuffs a letter<br>
In a bottle, casts it in the sea.<br>
It floats, it sinks.<br>
What counts is that it's cast.<br>
<P>
Those little intentions,<br>
The petals placed on the altar,<br>
The prayer whispered into air,<br>
The deep breath.<br>
The little acts,<br>
The candles lit,<br>
The incense burning<br>
And we remember what counts<br>
And we know what we need<br>
In the little acts.<br>
<P>
Then is when to listen.<br>
What is it that brought you<br>
To this?<br>
There's the magic.<br>
Right in hearing what<br>
Sends you to<br>
Hope.<br>
<P>
Peg Edera<br>
February 8, 2000<br>
<P>
The title of her poem inspired the theme of this column, so it's only appropriate that we use the text as grist for the mill.<P>
Let's start with the basics of opening the file and reading. That'd be something like:<P>
<pre>
  open POEM, &#147;peg_poem&#148; or die &#147;Cannot open: $!&#148;;
  while (&lt;POEM&gt;) {
    ... do something here with each line
  }
</pre>
Within the body of this <B>while</B> loop, <B>$_</B> contains each line from the poem. So on the first iteration, we get <B>The Little Acts</B> and a new line, and so on.<P>
If we just want to copy the data to <B>STDOUT</B>, a simple <B>print</B> will do:<P>
<pre>
  # open...
  while (&lt;POEM&gt;) {
    print;
  }
</pre>
Here, the <B>print</B> defaults to <B>STDOUT</B>, so we'll end up copying the input to the output. What if we wanted line numbers? The variable <B>$.</B> contains the line number of the most recently read file:<P>
<pre>
  # open...
  while (&lt;POEM&gt;) {
    print &#147;$.: $_&#148;;
  }
</pre>
We get a nice display labeled by line numbers. Let's optimize this a bit -- there's too much typing for such a small thing happening in the middle of the loop:<P>
<pre>
  # open...
  print &#147;$.: $_&#148; while &lt;POEM&gt;;
</pre>
Ahh yes, the <B>while</B> modifier form. Each line is still read into<B> $_</B>, and thus the <B>print</B> gets the right info.<P>
Even the <B>open</B> can be optimized out of there, by using the cool &#147;diamond&#148; operator. The operator looks at the current value of <B>@ARGV</B> for a list of filenames, so let's give it one:<P>
<pre>
  @ARGV = qw(peg_poem);
  while (&lt;&gt;) {
    print;
  }
</pre>
Notice we don't have to explicitly open now, because that's handled by the diamond. Of course, copying files is best done by a special purpose module for copying:<P>
<pre>
  use File::Copy;
  copy &#147;peg_poem&#148;, \*STDOUT;
</pre>
But that's just another way of doing it.<P>
Let's go the other direction: processing the information before sending it out. As an artist, I'm sure Peg appreciates the ability to include blank lines between the paragraphs of the poem. But how would we strip those blank lines on the output? Simple enough: use a regular expression:<P>
<pre>
  while (&lt;&gt;) {
    print if /\S/;
  }
</pre>
Here, the regular expression is looking for any single non-whitespace character. If there aren't any of those, the line is at least blank-looking, and not worth printing.<P>
Besides printing things as quickly as we read them, we can also read the entire file into memory for more interesting operations:<P>
<pre>
  while (&lt;&gt;) {
    push @data, $_;
  }
</pre>
Each new line is added to the end of <B>@data</B>, which initially starts empty. Now we can print them out in the reverse order:<P>
<pre>
  for ($i = $#data; $i &gt;= 0; $i--) {
    print $data[$i];
  }
</pre>
And while this works (it's a normal <B>for</B> loop), it's actually less work for the programmer (and slightly more for Perl) to write this simply as:<P>
<pre>
  print reverse @data;
</pre>
which takes the<B>@data</B> value and reverses a copy of it end-for-end before handing this new list off to <B>print</B>.<P>
What if we wanted to reverse each string? Well, the <B>reverse</B> operator in a scalar context turns the string around. But then the new line is at the wrong end. So, it's a multiple-step procedure:<P>
<pre>
  foreach $line (@data) {
    chomp($copy = $line);
    print reverse($copy).&#148;\n&#148;;
  }
</pre>
Here, I take the string, copy it into a separate variable (so that the <B>chomp</B> doesn't affect the original <B>@data</B> element), then reverse that variable's contents in a scalar context (because it's the operand of the string concatenation operator), and then dump that out.<P>
Another way to grab the part of the string up to but not including the new line is with a regular expression:<P>
<pre>
  foreach (@data) {
    print reverse($1).&#148;\n&#148; if /(.*)/;
  }
</pre>
In this case, I'm using the implicit <B>$_</B> variable together with a regular-expression match to find all the characters that don't include a new line (because dot doesn't match a new line), and then using that as the argument to <B>reverse</B>. Magic!<P>
We could also drift this towards a mapping operation, now that I look at it. Let's make a little assembly line:<P>
<pre>
  @reversed = map {
    /(.*)/ &amp;&amp; reverse($1).&#148;\n&#148;;
  } @data;
  print @reversed;
</pre>
The <B>map</B> operation takes every element of <B>@data</B> and temporarily places it into<B> $_</B>. The regular expression match always succeeds, and when it does, <B>$1</B> contains the string up to but not including the new line, which then gets reversed and a new line is tacked on the end. Of course, we don't need that intermediate variable:<P>
<pre>
  print map {
    /(.*)/ &amp;&amp; reverse($1).&#148;\n&#148;;
  } @data;
</pre>
I think Peg would probably laugh at the output of that program applied to her work, so let's look at some other small magic items.<P>
If we wanted to break the lines into a series of words, the easiest way is to apply a regular expression match with a &#147;global&#148; modifier to each line, like so:<P>
<pre>
  while (&lt;&gt;) {
    push @words, /(\S+)/g;
  }
</pre>
Here, the regular expression of <B>\S+</B> matches every contiguous chunk of non-whitespace characters. So, after the first line has been processed, we'll have:<P>
<pre>
  @words = (&#147;The&#148;, &#147;Little&#148;, &#147;Acts&#148;);
</pre>
and the second line contributes nothing to the array, because there are no matches. We can shorten this slightly, using that <B>map</B> operator again:<P>
<pre>
  @words = map /(\S+)/g, &lt;&gt;;
</pre>
First, the diamond operator on the right is being used in a list context, meaning that all the lines from all the files of <B>@ARGV</B> are being sucked in at once. Next, the <B>map</B> operator takes each element (line) from the list, and shoves it into <B>$_</B>. Next, the regular expression is being evaluated in a list context, and since the match can occur multiple times on a given string, each match contributes 0 or more elements to the result list. That result list then becomes the value for <B>@words</B>. Wow, all in one line of code.<P>
The problem with this particular rendering is that we're sucking in the punctuation as well. Thus, <B>magic</B> is in the array as <B>magic.</B>, and that's not the same word, especially if we want to count the words.<P>
We can alter this a bit:<P>
<pre>
  @words = map /(\w+)/g, &lt;&gt;;
</pre>
and now we're grabbing all contiguous alphanumerics-and-underscores, selected by the things that <B>\w+</B> matches. But that breaks the word <B>There's</B> into two pieces. Bleh. There are many a long hacking sessions when I've wished that the definition for <B>\w</B> had included apostrophes but excluded underscores. So, it's a slightly more precise and explicit regex for me:<P>
<pre>
  @words = map /([a-zA-Z'])/g, &lt;&gt;;
</pre>
That works for this poem, and leaves out those nasty date numbers as well. As a final bit of magic, let's see what the most frequent word is. Wait, some of them are initial caps, so we need to do one more hop:<P>
<pre>
  @words = map lc, map /([a-zA-Z'])/g, &lt;&gt;;
</pre>
That fixes it so they're all lowercase and now let's count them:<P>
<pre>
  $count{$_}++ for @words;
</pre>
Can it be that simple? It is. Each of the words ends up in <B>$_</B>. We use that as a key to a hash. The value initially is <B>undef</B>, and incremented as we see each word.<P>
Now it's time to dump them out:<P>
<pre>
  @by_order = sort { $count{$b} &lt;=&gt; \
    $count{$a} } keys %count;
  for (@by_order) {
    print &#147;$_ =&gt; $count{$_}\n&#148;;
  }
</pre>
That dumps them out in the sorted order. We're using a sort block to control the ordering of the keys, then dumping them in that order. I hope you see that Perl can be a little magic at times. It's the little things that count. Until next time, enjoy!<P>
<p>
<h1>About the Author</h1><p>
Randal L. Schwartz is a two-decade veteran of the software industry -- skilled in software design, system administration, security, technical writing, and training. He has coauthored the &#147;must-have&#148; standards: <I>Programming Perl</I>, <I>Learning Perl</I>, <I>Learning Perl for Win32 Systems</I>, and <I>Effective Perl Programming</I>, as well as writing regular columns for WebTechniques and Unix Review magazines. He's also a frequent contributor to the Perl newsgroups, and has moderated comp.lang.perl.announce since its inception. Since 1985, Randal has owned and operated Stonehenge Consulting Services, Inc.<I></BODY>



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
