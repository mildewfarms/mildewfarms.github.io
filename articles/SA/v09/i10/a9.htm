<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: Scaring Crackers Away with TCP Wrapper</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Scaring Crackers Away with TCP Wrapper</H1><p>
<P>Adam Olson
<P>
Would it not be great if computers could be connected to a network without any regard for malicious users and other security threats? In this fairy tale world, you could focus solely on tuning your systems to function as smoothly as possible. You wouldn't have to worry about a thing while implementing that intricate backup system you conjured up in your head. It is too bad this isn't the case, but there are tools out there to increase the security of these networked computer systems.<P>
One of these tools is called TCP Wrapper. This article will cover how to configure TCP Wrapper in such a way that crackers probing your network will be afraid to investigate any further.<P>
TCP Wrapper can also be used to verify a client's identity, control which clients can access certain services, and display custom banners. The last item will play a large part in telling the cracker you know what they are up to.<P>
Where is it located?<P>
TCP Wrapper is available via <B>ftp</B> at:<P>
<pre>
ftp://ftp.porcupine.org/pub/security/  \
   tcp_wrappers_7.6.tar.gz
</pre>
For a list of other security tools written by Wietse Venema, check out:<P>
<pre>
ftp://ftp.porcupine.org/pub/security/  \
   index.html
</pre>
The above link also includes a version of TCP Wrapper that supports IPv6.<P>
<B>Building and Installing TCP Wrapper</b><p>I performed the following steps on a system running Solaris 2.7. The steps will be very similar on most other platforms. Place the source in your favorite directory (<B>/var/tmp</B>, for example):<P>
<pre>
# cd /var/tmp
</pre>
Unpack the source:<P>
<pre>
# gzip -d tcp_wrappers_7.6.tar.gz
</pre>
Un<B>tar</B> the source:<P>
<pre>
# tar xvf tcp_wrappers_7.6.tar
</pre>
Change directories:<P>
<pre>
# cd tcp_wrappers_7.6
</pre>
Before running <B>make</B>, you must first uncomment the appropriate line in the <B>Makefile</B> that designates the standard location of the daemon software. On Solaris 2.7, it is line 47 of the <B>Makefile</B> and it reads: <B>REAL_DAEMON_DIR=/usr/sbin</B>. Run <B>make</B> and include the correct system type (type <B>make</B> for a listing of system types):<P>
<pre>
# make sunos5 CC=gcc
</pre>
If you run into any compile time errors, refer to the <B>README</B> located in the <B>tcp_wrappers_7.6</B> directory. The <B>README</B> is also an excellent source for any questions you may have about how TCP Wrapper functions and how it can be used.  The <B>tcp_wrappers_7.6</B> directory will now include five additional binaries: <B>tcpdchk</B>, <B>tcpdmatch</B>, <B>safe_finger</B>, <B>try-from</B>, and <B>tcpd</B>.<P>
The following is an excerpt from the <B>README</B> that provides a brief description of each binary:<P>
You can use the <B>tcpdchk</B> program to identify the most common problems in your wrapper and <B>inetd</B> configuration files.<P>
With the <B>tcpdmatch</B> program you can examine how the wrapper would react to specific requests for service.<P>
The <B>safe_finger</B> command should be used when you implement booby traps: it gives better protection against nasty stuff that remote hosts may do in response to your finger probes.<P>
The <B>try-from</B> program tests the host and username lookup code. Run it from a remote shell command (<B>rsh host /some/where/try-from</B>) and it should be able to figure out from what system it is being called.<P>
The <B>tcpd</B> program can be used to monitor the <B>telnet</B>, <B>finger</B>, <B>ftp</B>, <B>exec</B>, <B>rsh</B>, <B>rlogin</B>, <B>tftp</B>, <B>talk</B>, <B>comsat</B> and other TCP or UDP services that have a one-to-one mapping onto executable files.<P>
Finally, copy the newly compiled binaries to the following directories:<P>
<pre>
# cp tcpd /usr/sbin
# cp safe_finger tcpdchk tcpdmatch try-from \
   /usr/local/bin
</pre>
<B>Moving On to the Configuration</b><p>There are two ways to continue with the configuration. One way involves moving daemon binaries around on your system. The other leaves them alone, and all changes are made in the configuration file of <B>inetd</B>. I recommend the latter, because I think it is easier to manage all changes in one central place. Moving around multiple files can become messy and is more prone to error. So, fire up your favorite editor and modify <B>inetd.conf</B>. In this example, I will be filtering connections to the <B>telnet</B> daemon.<P>
A typical <B>telnet</B> entry in <B>inetd.conf</B> will look this:<P>
<pre>
telnet stream  tcp    nowait  root   \
   /usr/sbin/in.telnetd   in.telnetd
</pre>
As far as running new connections through TCP Wrapper, we are primarily concerned with the last two fields. The first defines the location of the server program to start when the new connection request arrives. The second is for including any arguments that should be passed along to the server program.<P>
Modify the <B>telnet</B> entry above to look like the following:<P>
<pre>
telnet  stream  tcp    nowait  root   \
   /usr/sbin/tcpd  in.telnetd
</pre>
Note that these are the steps to follow when using Solaris. Other platforms will be similar or identical. If the location of <B>in.telnetd</B> is different from what you specified as the <B>REAL_DAEMON_DIR</B> in the <B>Makefile</B>, you must specify the full path. For example:<P>
<pre>
telnet  stream  tcp    nowait  root   \
   /usr/sbin/tcpd  /usr/local/sbin/in.telnetd
</pre>
Save your changes to <B>inetd.conf</B> and send a <B>HUP</B> signal to <B>inetd</B>.<P>
<pre>
# kill -HUP pid_of_inetd
</pre>
Any requests to the <B>telnet</B> service should now be logged and by default, if reverse and forward lookups on the client's address don't match, the connection will be refused. If this isn't kosher with your security policy, comment out the <B>PARANOID= -DPARANOID</B> entry in the <B>Makefile</B> and recompile.<P>
Try opening a <B>telnet</B> session to the host from both a client whose reverse and forward name lookups match and from a client who does not have matching name lookups. After doing this, check out the log files. Logging information is by default sent to the same location as Sendmail transactions. To change this, check out the <B>Makefile</B> and <B>README</B>.<P>
Your log file will look something like this:<P>
<pre>
# tail /var/log/syslog
Jun  4 19:08:28 kt in.telnetd[20483]:   \
   connect from ny.sparc5.com
Jun  4 19:09:05 kt in.telnetd[20493]:   \
   warning: can't verify hostname: getho
stbyname(bd.sparc5.com) failed
Jun  4 19:09:05 kt in.telnetd[20493]:   \
   refused connect from 206.13.45.90  
</pre>
The first connect from <B>ny.sparc5.com</B> was successful because both name lookups returned the same value. There was a discrepancy in the values returned for the second host, so the connection was refused.<P>
<B>Access Control</b><p>Now that we have connections running through <B>tcpd</B>, let's start restricting access to specific client IP addresses only. This is accomplished by creating a <B>/etc/hosts.allow</B> file and a <B>/etc/hosts.deny</B> file.<P>
Before creating the files though, let's first go over how the access control mechanism works. After receiving the connection request, <B>tcpd</B> first examines <B>/etc/hosts.allow</B> for a line that matches the requested daemon and client address. If one is found, the client is permitted. If one is not found, the <B>/etc/hosts.deny</B> file is opened and a daemon/client match is sought. If a match is found, the client is rejected. If a match is not found, the client is permitted. Thus, if there isn't a specific rule denying the client or a catch-all rule denying anyone who isn't permitted in <B>/etc/hosts.allow</B>, the client is allowed to connect to the daemon. Make careful note of this, as you don't want to leave a service open to any untrusted hosts.<P>
You can approach access control in two ways. Permit certain hosts and deny the rest, or deny certain hosts and permit the rest. The deciding factor really depends on the environment in which the host resides. Whenever possible, I prefer to permit a group of hosts I have a trust relationship with and deny all others.<P>
Create a <B>/etc/hosts.allow</B> and a <B>/etc/hosts.deny</B> file identical to the following. (Substitute the allowed addresses with trusted addresses of your own.):<P>
<pre>
/etc/hosts.allow:

in.telnetd: 10.1.2.3 10.4.5.6 

/etc/hosts.deny:

in.telnetd: ALL
</pre>
Now try it out! You should connect successfully from any IP address in <B>/etc/hosts.allow</B> and be denied from any IP address not in <B>/etc/hosts.allow</B>. Check out the log file as well to make sure everything looks good.<P>
The files above are an example of permitting specific trusted hosts and denying everyone else. If you wanted to do the opposite, the access files would look like:<P>
<pre>
/etc/hosts.allow - empty

/etc/hosts.deny:

in.telnetd: bad_user's_address problem_host
</pre>
This configuration would permit any host not listed in <B>/etc/hosts.deny</B>.<P>
<B>Custom Banners</b><p>Before I can discuss a design of how to fool a cracker into telling you what they are up to, I must address how to create custom banners.<P>
Creating custom banners provides a way to personalize a service or provide more information, such as the administrative contact, to the client. We will be using custom banners to display a message to the intruder that should deter them from pursuing the target host any further. As long as the service being requested is using TCP, this is easily accomplished with TCP Wrapper.<P>
We need to first recompile the package to add support for the extended options required to display banners. In addition to custom banners, these extended options can perform a number of other tasks, such as changing the security level of an event being logged, providing additional access control syntax to consolidate rules into one file, and enabling the execution of external scripts.<P>
To recompile with support for extended options type:<P>
<pre>
# make clean
# make STYLE=-DPROCESS_OPTIONS sunos5 CC=gcc
# cp tcpd /usr/sbin
# cp safe_finger tcpdchk tcpdmatch try-from \
   /usr/local/bin
</pre>
The rest is straightforward. We want to display a banner to anyone who is refused a connection to the <B>telnet</B> service. This example is using the &#147;permit some, deny the rest&#148; mentality.<P>
<pre>
/etc/hosts.allow:

in.telnetd: 10.1.2.3 10.4.5.6

/etc/hosts.deny:

in.telnetd: ALL: banners /usr/local/banners
</pre>
We just need to do one small thing before this will work -- create the banner! The &#147;banners&#148; in the above line tells <B>tcpd</B> to issue a banner to the client. The path that follows is the location where the banners live. So, <B>/usr/local/banners</B> needs to be created, and a banner file with the same name as the requested daemon will hold our banner text.<P>
Using your favorite editor again, create a <B>/usr/local/banners/in.telnetd</B> file that looks like:<P>
<pre>
Connection from unknown system refused!
</pre>
Test this by opening a <B>telnet</B> session to the host from an IP address that will fall under the ALL rule in <B>/etc/hosts.deny</B>. You should be greeted with the custom banner, and then your connection will be closed.<P>
For information on how to configure other extended options, type:<P>
<pre>
# nroff -man hosts_options.5 |more -s
</pre>
<B>Scaring the Cracker Away</b><p>Perhaps by now you're saying, &#147;I want to start scaring people away!&#148; After going over the above material, we are now ready to implement the required measures. Let's first start off with how a cracker will probe your network. A common way to gather information about an unknown network is to use a tool called <B>nmap</B> or something similar. For detailed information on <B>nmap</B> and to download a copy, visit:<P>
<pre>
http://www.insecure.org/nmap
</pre>
Upon execution, <B>nmap</B> will send a number of different types of packets to a target host or network and will return a list of active port numbers (provided they are not blocked by a firewall, router ACL, etc). Because many services have a default port that they listen on, it is fairly easy to determine which services are active and to which exploits the host or network may be vulnerable. The cracker will then attempt to connect to one of these ports to obtain additional information, such as the server program name and version.<P>
We want to configure TCP Wrapper to listen on multiple unused ports. Choose ports normally used for common network services that the host is not providing. This would include services like smtp (port 25), http (port 80), and pop3 (110).<P>
Let's say we have a host that should only be providing ssh and http services. We will modify <B>/etc/inetd.conf</B> to include others services that <B>tcpd</B> will be responsible for. TCP Wrapper will listen on unused ports that crackers commonly attempt to contact (such as the <B>ftp</B> and <B>telnet</B> ports) and will send a blistering message to any intruder who attempts to contact the port. If these ports are ever contacted, there is a very high chance someone is poking around.<P>
An example copy of <B>/etc/inetd.conf</B> on Solaris is:<P>
<pre>
ftp      stream  tcp    nowait  root    \
   /usr/sbin/tcpd      in.ftpd
telnet  stream  tcp    nowait  root     \
   /usr/sbin/tcpd       in.telnetd

</pre>
<B>/etc/hosts.allow</B> would be empty.
<B>/etc/hosts.deny</B> would look like this:
<pre>
ALL: ALL: banners /usr/local/banners : spawn  \
   (/usr/bin/mailx -s "tcpd violation from %h  \
   - possible cracker!" user@domain.com) &amp;
</pre>
Note that <B>%h</B> is expanded to include the address of the source host. For a list of other variables you might want to use, type:<P>
<pre>
nroff -man hosts_access.5 |more -s
</pre>
Send a <B>HUP</B> signal to <B>inetd</B>, and you are set:<P>
<pre>
#  kill -HUP pid_of_inetd
</pre>
TCP Wrapper should now be listening for incoming connections on port 21 and port 23. The connection will be refused and a custom banner will be displayed to the cracker. Make sure that the correct files exist in <B>/usr/local/banners</B>, as they must match the name of the daemon.<P>
An example custom banner for the <B>ftp</B> daemon would be located at <B>/usr/local/banners/in.ftpd</B> and would look something like:<P>
<pre>
This service is not provided by this host!
An administrator has been notified of this 
connection attempt and your IP address has 
been logged for our records!
All traffic to this host is now being captured 
and logged!
</pre>
That last line is an extra incentive for the cracker to run away. If you dont currently capture traffic that strays from your normal traffic trends, I suggest checking out:<P>
<pre>
http://www.snort.org
</pre>
Snort is an excellent lightweight network intrusion detection program that I use to capture all &#147;interesting&#148; traffic 24x7. There is also an article on Snort in the September issue of <I>Sys Admin</I>.<P>
<B>From the Crackers Point of View</b><p>To test this setup, pretend you are probing your own network. You will see something like the following:<P>
<pre>
# ./nmap hostname

Starting nmap V. 2.3BETA14 by fyodor@insecure.org \
  ( www.insecure.org/nmap/ )
Unable to find nmap-services!  Resorting 
   to /etc/services
Interesting ports on host (10.1.1.1):
Port    State       Protocol  Service
21      open        tcp       ftp
22      open        tcp       unknown
23      open        tcp       telnet
80      open        tcp       unknown

Nmap run completed -- 1 IP address (1 host up) \
   scanned in 0 seconds

# telnet hostname 21
Trying 10.1.1.1...
Connected to host.domain.com.
Escape character is '^]'.

This service is not provided by this host!  
An administrator has been notified of this 
connection attempt and your IP address has 
been logged for our records!
All traffic to this host is now being captured 
and logged.  

Connection closed by foreign host.
</pre>
Also, verify that an alert was received at the email address defined earlier.<P>
<B>Conclusion</b><p>TCP Wrapper is an excellent tool to use for early notification of a crackers attempt to probe your network, as well as scaring them away. If this doesnt deter crackers, the administrator is still alerted to whats going on and can immediately either watch them or block them from entering the network with ingress filtering. TCP Wrapper has other uses that were not covered in this article, so please check out the <B>README</B> file to see if those interest you.<P>
<p>
<h1>About the Author</h1><p>
Adam Olson has helped build a successful ISP (http://www.humboldt1.com), designed and configured portions of the California Power Network while working at MCI WorldCom, and is currently working for a company targeting the e-commerce and time management industries (http://www.quaartz.com). Adam hopes to be sailing a lot soon. He can be reached at: adamo@humboldt1.com.


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
