<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i10: Building Tunnels with VTun</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
<style type="text/css">
        <!--
                pre { font-size: 75%; }
                
        -->
        </style>
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/oct2000.tar"><b class=codeListing>oct2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Building Tunnels with VTun</H1><p>
<P>Arthur Donkers
<P>
It has been a while since I wrote an article for <I>Sys Admin</I>. A lot of things have happened in that time -- business has been expanding, and Linux has definitely become mainstream. For my company, this meant that we grew out of our original office space and had to rent a new office to accommodate more people. And, since we did not want to drill holes in the (concrete) walls for the network cabling, we had to think of something else.<P>
<B>Wireless LAN</b><p>After some searching on the Internet, I ran into a wireless LAN system that operates at a frequency of 2.4 GHz. This system consists of two PCMCIA cards, plus two PCMCIA-to-ISA adapters, that you can add to your server or laptop computer. These cards emulate a &#147;normal&#148; Ethernet adapter and work both under Linux and Microsoft. After some initial testing, these cards were able to make a reliable connection between our two offices, with an acceptable throughput.<P>
However, using these cards causes a security problem. They communicate through the airwaves, free for anyone with a scanner (or a similar card) to pick up the signal and tune into the conversation. To solve this problem, a standard has been set that will encrypt the wireless communication, called WEP (Wireless Encryption Protocol). Different cards can join in by using the proper ESSID (a sort of shared secret that everyone must use to be able to communicate to each other). Being the paranoid people we are, we did not like this WEP thing, especially since even the 128-bit cards can be freely exported. So, we secured the communications ourselves. Besides, what's more fun than experimenting with new things under Linux?<P>
<B>Tunneling Through</b><p>After some Internet research, we decided to lay an encrypted IP tunnel on top of the wireless connection. This would secure communications between our offices, without sacrificing network functionality. So, first I will explain what IP tunneling is all about.<P>
Typically, on an IP network you communicate by directly addressing the party you want to talk to. So if, for instance, you wish to send an email to someone on the Internet, the following things happen:<P>
<P>
&#149;  You compose a message.<br>
&#149;  You give this message to your MTA (Mail Transfer Agent).<br>
&#149;  This MTA will ask DNS where he can find the mailserver for the destination.<br>
&#149;  Using the routing on the local machine, the MTA will connect to the mailserver and deliver the message.<br>
<P>
This scenario applies to many other services as well (<B>http</B>, <B>telnet</B>, <B>ftp</B>), in the same way. It is just like sending an envelope to someone, directly to their address. Directly addressing your counterpart is clean and simple; however, there are some problems related to this (some of which are resolved in IPv6, but that's a different article). Two of the main problems are:<P>
If you want to secure the communications, each protocol (server and client) must resolve that for themselves -- examples of these are SSH and SSL. Both of these added encryption and authentication functionality to the software for this.<P>
If you want to address a system you cannot reach directly, you have another problem. Suppose you are working at a client's site, and you want to read your company email. You must contact your internal mailserver, but this machine has been secured by using a firewall, so you cannot contact it.<P>
Both of these problems can be resolved with a tunnel. The best way to describe this is by saying that you put the envelope with the message into another envelope, addressed at the central mail dispatch of a company. This mail dispatch will pick up that envelope, open it, and send the original envelope on to the final destination.<P>
The same thing happens with an IP tunnel. Your original IP traffic is encrypted, including all header information, and stored as a data payload into another IP connection (the tunnel). This IP connection carries your data to the other side, where it is decrypted and sent to its original destination (based on the headers in the original message).<P>
Normally, this tunneling is done by the kernel itself, because it involves reassembling encrypted IP packets. Here's the process:<P>
<P>
&#149;  The kernel receives an IP packet.<br>
&#149;  The kernel recognizes that it is a special tunneling packet (mostly done by means of the protocol field. I think Cisco uses protocol #47 to indicate an IP tunneling packet).<br>
&#149;  Gets the payload from that packet.<br>
&#149;  Decrypts it (if necessary) into the original packet.<br>
&#149;  Sends the original packet on its way.<br>
<P>
Sending tunneling packets follows the same flow, in reverse order:<P>
<P>
&#149;  The kernel receives an IP packet (mostly done on a special interface).<br>
&#149;  It encrypts the complete packet.<br>
&#149;  It builds a new IP packet containing the encrypted original as data payload.<br>
&#149;  Sends this new packet, with a special protocol ID, to the other side.<br>
<P>
The kernel is normally assisted by a daemon that will do the authentication and determine the encryption key used between the different parties.<P>
<B>Tunneling the Linux Way: Getting and Building VTun</b><p>For Linux, there are a number of tunneling packages available. If you visit <B>freshmeat.net</B> and search for tunnel, you get a list of different packages that build a tunnel one way or another. Especially for the 2.2.x (and 2.4.x) kernels, there are a number of tools available. There is a TAP device available, which allows you to manipulate raw IP packets in a user space program (e.g., a daemon or another program).<P>
After doing some research into the different packages, we chose VTun (virtual tunnel) because it is clean and simple and also works under OpenBSD and other UNIX implementations. You can find the home page of VTun at:<P>
<pre>
http://vtun.sourceforge.net
</pre>
The VTun software (derived from VPPP by Maxim Krasnyansky) consists of two parts, the universal TUN/TAP driver and the VTun software itself. Both have excellent documentation on how to build and install the software. VTun does not quite follow the tunneling model described above. It uses its own daemon that will do the encryption and authentication. This daemon will use the Linux TUN/TAP devices to receive and send the IP traffic. The general idea, however, remains the same.<P>
If you follow these instructions, you should be able to build the software yourself. You may need to (possibly) recompile your kernel so it supports TUN and TAP. (TUN is a device for tunneling IP frames, and TAP is a device for tunneling Ethernet frames). You should install the TUN/TAP driver first (mind your kernel version), so you use the proper driver with Vtun. Both kernel options are shown below:<P>
<pre>
IP: tunneling (CONFIG_NET_IPIP) [M/n/y/?] ?

CONFIG_NET_IPIP:

  Tunneling means encapsulating data of one
  protocol type within another protocol and
  sending it over a channel that understands
  the encapsulating protocol. This particular tunneling driver 
  implements encapsulation of IP within IP, which sounds kind of 
  pointless, but can be useful if you want to make your (or some 
  other) machine appear on a different network than it physically 
  is, or to use mobile-IP facilities (allowing laptops to 
  seamlessly move between networks without changing their IP 
  addresses; check out 
  http://anchor.cs.binghamton.edu/~mobileip/LJ/index.html). 

  Saying Y to this option will produce two modules ( = code which 
  can be inserted in and removed from the running kernel whenever 
  you want). Most people won't need this and can say N.

Universal TUN/TAP device driver (CONFIG_TUN) [M/n/y/?] ?

CONFIG_TUN:

  If you say Y here and create a character special files /dev/tun0
  with major 90 and minor 0 and /dev/tap0 with major 90 and minor 
  128 using mknod (&#147;man mknod&#148;), you will be able to have a user 
  space program read and write raw IP or Ethernet frames from/to 
  that special file. tun0 and tap0 can be configured with ifconfig 
  and route like any other network devices but they are not 
  connected to any physical media; everything written by the user 
  to /dev/tun0 and /dev/tap0 is treated by the kernel as if it 
  had come in from a physical interface to the device tun0 or 
  tap0; everything the kernel wants to send out over the device 
  tun0 or tap0 can instead be read by the user from /dev/tun0 and
  /dev/tap0. Please read the file Documentation/networking/tun.txt 
  for more information. 

  This driver is also available as a module ( = code which can be
  inserted in and removed from the running kernel whenever you 
  want). The module will be called tun.o If you want to compile it 
  as a module, say M here and read Documentation/modules.txt. If 
  you don't know what to use this for, you don't need it.
</pre>
It is a good idea to build these as a loadable kernel module to avoid recompiling the whole kernel when you want to change the version of your TUN/TAP driver. You can even have the module autoload by adding it to the <B>/etc/conf.modules</B> file.<P>
After compiling the TUN/TAP driver, you can also compile the VTun software itself. You will end up with a <B>vtund</B> daemon program. After compiling all software, you should boot your new kernel.<P>
<B>Configuring VTun</b><p>Now that the easy part is done, you need to configure VTun. This is done through a number of simple steps. First, you need to load the <B>tun</B> module so you can create a tunneling Ethernet interface. You can simply <B>insmod</B> the module or have it autoloaded. This is how it looks on our machine:<P>
<pre>
[root@gw /root]# lsmod
Module             Size      Used by
tun                2396      1
hisax              135080    2
isdn               85024     2  [hisax]
ray_cs             24572     1
ds                 5740      1  [ray_cs]
i82365             22640     1
pcmcia_core        39464     0  [ray_cs ds i82365]
</pre>
</B>The <B>tun</B> module is the one from the TUN/TAP package. (Note that the <B>ray_cs</B>, <B>ds</B>, i82365, and <B>pcmcia_core</B> are used by the wireless LAN card and the rest are for our ISDN card).<P>
After you have loaded the <B>tun</B> module (and possibly others), you can configure the Ethernet interfaces and routing in the normal way. Depending on your network, you get something like this:<P>
<pre>
eth1      Link encap:Ethernet  HWaddr 00:00:8F:48:84:5E  
          inet addr:192.168.1.2  Bcast:192.168.1.3  \
            Mask:255.255.255.252
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:6332560 errors:0 dropped:0 overruns:0 frame:20736
          TX packets:5736741 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:100
          Interrupt:3

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:3924  Metric:1
          RX packets:219222 errors:0 dropped:0 overruns:0 frame:0
          TX packets:219222 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 

tun1      Link encap:Point-to-Point Protocol  
          inet addr:192.168.2.2  P-t-P:192.168.2.1  \
            Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1450  Metric:1
          RX packets:5170215 errors:0 dropped:0 overruns:0 frame:0
          TX packets:4211139 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:10
</pre>
In our setup, eth1 is the wireless card and tun1 is the tunneling interface that communicates over this card. (The interface over which the tunneling software communicates depends on the routing and location of the VTun daemon on the other side. More on this later.)<P>
Combined with the routing below, this completes the basic networking setup.<P>
<pre>
[root@gw /root]# netstat -rn
Kernel IP routing table
Destination  Gateway      Genmask          Flags  MSS Window  irtt Iface
192.168.2.1  0.0.0.0      255.255.255.255  UH       0 0         0 tun1
192.168.1.0  0.0.0.0      255.255.255.252  U        0 0         0 eth1
127.0.0.0    0.0.0.0      255.0.0.0        U        0 0         0 lo
0.0.0.0      192.168.2.1  0.0.0.0          UG       0 0         0 tun1
</pre>
You now have a secure connection running over your wireless network. Running <B>tcpdump</B> on the different interfaces will show you that the data is really encrypted. By using <B>ping</B>, I will demonstrate this below (remember that <B>ping</B> fills its databuffer with a bytecounter incrementing in steps of 1).<P>
Running <B>tcpdump</B> on tun1, the input interface for traffic to be tunneled yields:<P>
<pre>
[root@gw /root]# ./tcpdump -i tun1 -lenx
Kernel filter, protocol ALL, datagram packet socket
tcpdump: listening on tun1
08:02:23.869025 &gt; 0:0:0:0:0:0 0:0:0:0:0:0 ip 98: 193.78.174.193 &gt; \
  193.78.174.34: icmp: echo request
                         4500 0054 7e50 0000 3f01 1dd8 c14e aec1
                         c14e ae22 0800 0601 703b 0000 7eaf 7239
                         9ad7 0b00 0809 0a0b 0c0d 0e0f 1011 1213
                         1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
                         2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
                         3435 3637
08:02:23.882594 &lt; 0:0:0:0:0:0 0:0:0:0:0:1 ip 98: 193.78.174.34 &gt; \
  193.78.174.193: icmp: echo reply
                         4500 0054 a785 0000 fe01 35a2 c14e ae22
                         c14e aec1 0000 0e01 703b 0000 7eaf 7239
                         9ad7 0b00 0809 0a0b 0c0d 0e0f 1011 1213
                         1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
                         2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
                         3435 3637
08:02:24.860996 &gt; 0:0:0:0:0:0 0:0:0:0:0:0 ip 98: 193.78.174.193 &gt; \
  193.78.174.34: icmp: echo request
                         4500 0054 7e56 0000 3f01 1dd2 c14e aec1
                         c14e ae22 0800 3f20 703b 0100 7faf 7239
                         5fb8 0b00 0809 0a0b 0c0d 0e0f 1011 1213
                         1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
                         2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
                         3435 3637
08:02:24.874011 &lt; 0:0:0:0:0:0 0:0:0:0:0:1 ip 98: 193.78.174.34 &gt; \
  193.78.174.193: icmp: echo reply
                         4500 0054 a786 0000 fe01 35a1 c14e ae22
                         c14e aec1 0000 4720 703b 0100 7faf 7239
                         5fb8 0b00 0809 0a0b 0c0d 0e0f 1011 1213
                         1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
                         2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
                         3435 3637
</pre>
As you can see from the data part of <B>tcpdump</B> (look at the echo-requests), the data is nicely incremented each byte. If you run <B>tcpdump</B> on eth1 (the wireless interface that carries the tunneled data), you will see this:<P>
<pre>
[root@gw /root]# ./tcpdump -i eth1 -lenx   
Kernel filter, protocol ALL, datagram packet socket
tcpdump: listening on eth1
08:03:29.856228 &gt; 0:0:0:0:0:0 0:0:8f:48:84:5e arp 42: arp who-has \
  192.168.1.1 tell 192.168.1.2 (0:0:8f:48:84:5e)
                         0001 0800 0604 0001 0000 8f48 845e c0a8
                         0102 0000 0000 0000 c0a8 0101
08:03:29.862493 &lt; 0:0:8f:48:fd:f1 0:0:0:0:0:1 arp 64: arp reply \
  192.168.1.1 is-at 0:0:8f:48:fd:f1 (0:0:8f:48:84:5e)
                         0001 0800 0604 0002 0000 8f48 fdf1 c0a8
                         0101 0000 8f48 845e c0a8 0102 b084 c14e
                         ae31 0000 0000 0000 c14e ae32 0000 f031
                         97a0
08:03:33.978459 &gt; 0:0:0:0:0:0 0:0:8f:48:84:5e ip 140: \
  192.168.1.2.socks &gt; 192.168.1.1.vtun: udp 98
                         4500 007e 7f85 0000 4011 7796 c0a8 0102
                         c0a8 0101 0438 1388 006a b676 0060 5ec0
                         343d 6feb b64e 1c0f 5b14 66ab 2fb7 e783
                         9868 1773 fe8f a7bd 00d8 1e48 f246 f0fd
                         c6ce 1515 48c1 6a29 aefb 7faf d874 1c97
                         06fa 37f0 f7f2 300d b505 48f3 a9e3 8ec0
                         f671 1888 0ada 1f23 0f9d ca42 1ff1 6ad0
                         87ca 8283 75f4 71db 24bd cdcc d411
08:03:33.989318 &lt; 0:0:8f:48:fd:f1 0:0:0:0:0:1 ip 144: \
  192.168.1.1.vtun &gt; 192.168.1.2.socks: udp 98
                         4500 007e 3ea4 0000 4011 b877 c0a8 0101
                         c0a8 0102 1388 0438 006a 9d96 0060 5ec0
                         343d 6feb b64e 4d95 f12c 4129 bc65 4ba1
                         132f 3e0e 6433 4703 be60 5beb d6c7 f0fd
                         c6ce 1515 48c1 6a29 aefb 7faf d874 1c97
                         06fa 37f0 f7f2 300d b505 48f3 a9e3 8ec0
                         f671 1888 0ada 1f23 0f9d ca42 1ff1 6ad0
                         87ca 8283 75f4 71db 24bd cdcc d411 fcc8
                         0918
08:03:34.973114 &gt; 0:0:0:0:0:0 0:0:8f:48:84:5e ip 140: \
  192.168.1.2.socks &gt; 192.168.1.1.vtun: udp 98
                         4500 007e 7f89 0000 4011 7792 c0a8 0102
                         c0a8 0101 0438 1388 006a e34f 0060 5ec0
                         343d 6feb b64e 6ff7 f215 27ff 05f9 56a4
                         fd2f e44b 2297 c613 3ffe a08d eaaf 126e
                         1ae4 677d c2f4 aece 3bc6 5021 a826 1c97
                         06fa 37f0 f7f2 300d b505 48f3 a9e3 8ec0
                         f671 1888 0ada 1f23 0f9d ca42 1ff1 6ad0
                         87ca 8283 75f4 71db 24bd cdcc d411
</pre>
All data will be gibberish, and you won't even recognize the ICMP protocol. You only see data between the IP addresses of the wireless interface. (The fact that one of them uses the <B>socks</B> port has nothing to do with the tunneling. The client daemon (which runs on 192.168.1.2) has used the first free port, which happened to be port 1080, the socks port. The VTun port is the service port of VTun when running in server mode.<P>
You now have a running encrypted tunnel. The last thing to know is how to configure the VTun daemon.<P>
<B>Configuring vtund daemon</b><p>For the tunnel to be established, you must run the daemon as a server on one machine and as a client on the other. The reason for this is mainly to have one daemon listening for connections from another one. If you would run <B>vtund</B> on a firewall, you would configure that daemon as a server. Clients who wish to make a connection run the daemon in client mode and make that connection when necessary. From the process listing, you can see whether the daemon runs in server [s] or client [c] mode:<P>
<pre>
ps ax
25677 ?        S&lt;   397:04 vtund[s]: wireless2 tun tun0

ps ax
7577 ?         S&lt;   261:28 vtund[c]: wireless2 tun tun1
</pre>
Both daemons use a configuration file; you can specify this file on the command line when starting the daemon. If not specified, it will look for the default <B>/etc/vtund.conf</B>. I have made a separate file for the client and server configuration. Thus, you can change the behavior of the daemon, simply by giving it a different configuration file.<P>
The file for the server looks like this (I changed the password for obvious reasons):<P>
<pre>
options {
  port 5000;               # Listen on this port.

  # Path to various programs
  ppp           /usr/sbin/pppd;
  ifconfig      /sbin/ifconfig;
  route         /sbin/route;
  firewall      /sbin/ipchains;
}

# TUN config.
wireless2 {
  pass  SecretPassword;    # Password
  type  tun;               # IP tunnel
  proto udp;               # UDP protocol
  comp  lzo:9;             # LZO compression level 9
  encr  yes;               # Encryption
  keepalive yes;           # Keep connection alive

  up {
        # Connection is Up 

        ifconfig "%% 192.168.2.1 pointopoint 192.168.2.2 mtu 1450";
  };
}
</pre>
The general options apply to all configuration blocks in the file. You can have one server serve more than one client. Each client has its own configuration block, and the options part applies to all blocks.<P>
The port in the options block says on which port the daemon listens for new connections from clients. Once the connection is established, it will fork an active daemon that will communicate over that port with the connected client. The other items are locations of different programs used to configure interfaces and routing when a client connection is made.<P>
The wireless2 block is a block for a client that connects under the wireless2 name. It states the password (SecretPassword) that is also used by the client for authentication purposes. This password is never sent across the line, it is only used in a challenge-response mechanism.<P>
The &#147;type&#148; clause tells what kind of tunnel is established. Typically, you will use a &#147;tun&#148; type, since this is able to carry all types of IP traffic. You can also select &#147;ether&#148; to build an Ethernet tunnel (so you can use the tunnel as a kind of bridge), or &#147;tty&#148; to make a tunnel over a serial connection, or &#147;pipe&#148; to make a tunnel over a pipe. Typically, you would set this to &#147;tun&#148;.<P>
The &#147;proto&#148; clause tells <B>vtund</B> which protocol to use for communication to the other tunnel. Since UDP has the least overhead, you would usually choose &#147;udp&#148;. The <B>vtund</B> will make sure all data sent is also received.<P>
The &#147;encr&#148; and &#147;comp&#148; will tell <B>vtund</B> to encrypt and compress the traffic. You can unset these, but that will mean your tunnel is no longer secure.<P>
The &#147;keepalive&#148; clause will make sure the connection remains active if, for a longer period of time, you have no actual data traffic.<P>
The &#147;up&#148; clause will tell <B>vtund</B> what to do once the wireless2 client makes a connection to the daemon. You can specify all kinds of commands here, even IPchains statements to close down your firewall.<P>
The configuration file on the client side looks similar to the server:<P>
<pre>
options {
  port 5000;              # Connect to this port.
  persist yes;            # Persist mode
  timeout 60;             # General timeout

  # Path to various programs
  ppp           /usr/sbin/pppd;
  ifconfig      /sbin/ifconfig;
  route         /sbin/route;
  firewall      /sbin/ipchains;
}

# TUN example. Host 'cobra'.
wireless2 {
  pass  SecretPassword;   # Password
  device tun1;            # Device tun1
  up {
        # Connection is Up 

        # Assign IP addresses.
        ifconfig "%% 192.168.2.2 pointopoint 192.168.2.1 mtu 1450";
  };
}
</pre>
You see that the password is included here as well; the other options are set by the serving daemon.<P>
<B>Conclusion</b><p>By using the VTun software, you can establish a tunnel over almost any network connection you have. And although it uses its own protocol for that, it is available in source and for a number of different platforms. Checking with <B>tcpdump</B> reveals that all tunneled traffic is not sent in the clear and protects from eavesdropping.<P>
<p>
<h1>About the Author</h1><p>
Arthur Donkers graduated from the Delft University of Technology with a degree in Electrical Engineering and a major in Computer Architecture. Since then he has worked for a number of major software houses in the Netherlands. His primary field of interest is in datacommunications, especially the security aspects involved. He now is the founder and owner of Le Reseau, a company specializing in security-related issues for UNIX, OpenVMS and Windows NT, and the application of Linux in corporate environments.</I></BODY>


<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
