<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i11: Introducing FreeS/WAN and IPsec</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a9_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a9_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a9_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2000/nov2000.tar"><b class=codeListing>nov2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Introducing FreeS/WAN and IPsec</H1><p>
<P>Duncan Napier
<P>
FreeS/WAN (Secure Wide Area Network) is a tool that permits the secure transmission of data over untrusted networks, such as the Internet. The central component of FreeS/WAN is the IETF's (Internet Engineering Task Force) IPsec (Internet Protocol SECurity) specification. Among other things, IPsec is designed to support Virtual Private Networks (VPNs). While FreeS/WAN is Linux-based, it conforms to the IETF's IPsec specification and is known to be interoperable with many other vendor's implementations of IPsec. (Refer to the official Web site,  <B>www.freeswan.org</B>, for the latest news.) The FreeS/WAN project was started by John Gilmore, is maintained by numerous energetic individuals, and is freely available in source code under the GNU General Public License.<P>
IPsec is an extension to the Internet Protocol (IP) that provides authentication and encryption at the OSI Reference Model transport layer. IPsec has been mandated into the IETF's specification of IP version 6 (IPv6). Three protocols are used to handle encryption and authentication: ESP (Encapsulating Security Payload); AH (Authentication Header); and IKE (the Internet Key Exchange). All  of these components are included in the FreeS/WAN implementation of IPsec, and are generally invisible to the end user. The ESP and AH handle encryption and authentication, while IKE negotiates the connection parameters, including the initialization, handling, and renewal of encryption keys. The only encryption scheme currently supported by FreeS/WAN is 3DES (the triple DES or Data Encryption Standard, the current standard for IPsec encryption). Authentication is carried out using MD5 digests of a so-called shared secret (a shared key). The shared key could be a mutually agreed upon character string or RSA private keys. FreeS/WAN's KLIPS (kernel IPsec) component, which is compiled into the Linux kernel, implements AH, ESP, and the handling of packets. IKE processes are carried out through FreeS/WAN's standalone <B>pluto</B> daemon. The IETF RFCs and Internet drafts on these and related topics may be found at the official FreeS/WAN Web site. The site also contains full on-line manpages and documentation, as well as numerous links to the full IETF specifications, user-developer mailing lists, mailing list archives, and other IPsec-related sites.<P>
FreeS/WAN is an implementation of the IPsec standard through its KLIPS and IKE components. Currently, FreeS/WAN provides support for IPsec over IP version 4 (IPv4), although at the time of writing, FreeS/WAN support for IPv6 was in progress.<P>
FreeS/WAN is meant to be a fully compliant IPsec implementation that imposes a minimum of overhead and will run even on low-end PCs that use the Linux OS. The overhead imposed and measured performance will depend on the configuration of the hardware platform as well as the network bandwidth that is being served. I recently set up a network of FreeS/WAN firewalling gateways (RedHat 6.1, standard 2.2.12 kernel, FreeS/WAN 1.4 running 3DES encryption/MD5 authentication, using IPchains 1.3.9 for firewalling) interconnected through a 512-kb/s DSL (digital subscriber line) WAN (wide-area network). The hardware platforms were off-the-shelf Dell Dimension 133-MHz Pentium machines with 32 MB of RAM; the only modification was the installation of 2 Intel Ether Express 10/100 network cards on each machine. The uncompressed sustained transfer rate for a single session in this particular case was measured to be about 450-kb/s or about 90% the theoretical maximum. The file transfer showed virtually no effect on either CPU or memory loading. Some performance numbers for FreeS/WAN and other VPN-capable products are given in<P>
<pre>
http://www.epm.ornl.gov/~dunigan/vpnperf.html
</pre>
FreeS/WAN is written and tested around RedHat's implementation of the Linux operating system, but FreeS/WAN is known, with no or slight modification, to work with SuSE, Slackware, and Debian distributions as well. FreeS/WAN has also been reported to work on Linux systems that run non-Intel CPUs, such as the DEC 64-bit Alpha, Motorola Power PC, Sun's SPARC, MIPS, and StrongARM. FreeS/WAN interoperates to varying degrees with the IPsec implementations of other vendors, including Cisco IOS 12.0 and later, Open BSD, Raptor Firewall, CheckPoint FW-1, F-Secure VPN, Xedia Access Point, PGP 6.5/PGPnet, IRE Safenet/SoftPK, Freegate 1.3, Borderware 6.0, Timestep Permit/Gate 2520, Sun Solaris, Intel/Shiva LANrover, and Windows 2000. The official FreeS/WAN Web site has a regularly updated compatibility list with the latest version of its online documentation. <P>
The following details the steps required to build a FreeS/WAN VPN-firewall gateway from scratch. The steps to configuring a site-to-site VPN with firewalls on both ends are also included. Numerous other variants, such as point-to-site, site-to-multisite, and point-to-point connections are also possible with slight modifications, but will not be covered here.<P>
<B>Installation</b><p>Due to the regulation of cryptographic tools and applications in some countries, FreeS/WAN is generally not included in the compiled Linux kernel of most Linux distributions. SuSe Linux version 6.3 has been reported to have shipped in Europe with FreeS/WAN compiled in the kernel. FreeS/WAN versions 1.1 and later are known to compile with the Linux 2.0.x and 2.2.x kernels. Refer to the FreeS/WAN Web site for information on the Linux 2.3 kernel, or later versions. The following example was compiled on a standard RedHat 6.1 distribution.<P>
FreeS/WAN requires the Linux kernel to be recompiled. The kernel source usually resides in<B> /usr/src/linux</B>. If you need a more recent version of the kernel, download the kernel source and install in <B>/usr/src/linux</B>.<P>
<B>Recompiling the Kernel with FreeS/WAN</b><p>1.  Download the FreeS/WAN source code and digital signatures from:<P>
<pre>
http://www.freeswan.org
</pre>
or:<P>
<pre>
ftp://ftp.xs4all.nl/pub/crypto/freeswan
</pre>
2. Move the <B>tar.gz</B> file to: <B>/usr/local/src/</B> <br>
3. Go to: <B>/usr/local/src/</B>:<P>
<pre>
cd /usr/local/src/
</pre>
4.  Un<B>tar</B> the <B>tar</B>file, set permissions, and go into the FreeS/WAN source directory:<P>
<pre>
cat /usr/local/src/freeswan-x.x.tar.gz    \
   | gunzip | tar xvf - chown -R    \
   root:root freeswan-x.x
</pre>
5. Do a test configure and compile of the kernel (usually found in <B>/usr/src/linux</B>) to ensure a functioning kernel. Go into the kernel source root:<P>
<pre>
cd  /usr/src/linux
make config
make dep
make bzimage
</pre>
You may wish to load and boot off the kernel as a test, using         LILO (refer to section 8).<P>
6.  Run the <B>make</B> utility that sets the kernel compilation option using a menu interface. (For other options, see FreeS/WAN documentation):<P>
<pre>
cd /usr/local/src/freeswan-x.x
make menugo
</pre>
This particular choice will run the curses-based menu-driven kernel configurator. In nearly all cases, the default options will suffice. Make sure that you choose the option to save the kernel configurations. Go into the Linux source directory and run <B>bzImage</B>:<P>
<pre>
cd /usr/src/linux
make bzImage
</pre>
7. Copy the resulting boot image to the <B>/boo</B>t partition:<P>
<pre>
cp /usr/src/linux/arch/i386/boot/   \
   bzImage /boot/vmlinuz-ipsec
</pre>
8. Edit the boot loader config file <B>/etc/lilo</B>:<P>
<pre>
boot=/dev/hda
map=/boot/map
install=/boot/boot.b
prompt
timeout=100
image=/boot/vmlinuz-ipsec
label=linux-ipsec
root=/dev/hda1
read-only
image=/boot/vmlinuz-2.x.x
label=linux
root=/dev/hda1
read-only
</pre>
Rerun LILO and you should see:<P>
<pre>
linux-ipsec *
linux
</pre>
9. Reboot the machine. IPsec starts automatically from init.d scripts, which are installed by default during the FreeS/WAN installation. Once the machine has restarted, FreeS/WAN will need to be configured.<P>
<B>Configuring TCP/IP for FreeS/WAN</b><p>The machine running FreeS/WAN functions as a gateway and will require IP forwarding to be enabled between the interfaces. To do this in Linux, change the parameter in <B>/etc/sysconfig/network </B>from:<P>
<pre>
FORWARD_IPV4=false
</pre>
to:<P>
<pre>
FORWARD_IPV4=true
</pre>
<B>Configuring IPsec with FreeS/WAN</b><p>For the following discussion, assume the network setup shown in Figure 1 is a site-to-site VPN. The file <B>/etc/ipsec.conf</B> will need to be customized. The other parameters (e.g., in the defaults section) can generally be left as is. Refer to the man page for <B>ipsec.conf</B> for full details on the syntax for <B>ipsec.conf</B> files. On server 1.2.3.4, the following network entries are made (Listing 1). On server 5.6.7.8, the converse applies, and left and right are interchanged (Listing 2).<P>
Replace the <B>espenckey</B> and <B>espauthkey</B> with keys generated from <B>/usr/local/bin/ranbits</B>, the random key generator that is installed with FreeS/WAN.<P>
To reset or restart FreeS/WAN using manual keying, type:<P>
<pre>
/etc/rc.d/init.d/ipsec restart
/usr/local/bin/ipsec manual -up  \
   conn_name
</pre>
where <B>conn_name</B> is the interface name specified by the <B>conn</B> header in <B>/etc/ipsec.conf</B>.<P>
Check that the tunnel is set up by typing:<P>
<pre>
/usr/local/sbin/ipsec eroute
</pre>
to display the extended routes on your system. For the above example on the right subnet, expect to see something like:<P>
<pre>
192.168.1.0/24     \
   -&gt; 192.168.0.0/24   \
     =&gt; tun0x10e@5.6.7.8
</pre>
which shows the tunnel between the subnets and the remote (left subnet) gateway. Once the above setup is complete, you should be able to <B>ping</B> any node on the subnet at the other end of the VPN. Note that you cannot access remote private subnets from any point outside these subnets, including from your own IPsec gateway.<P>
The above setup is for a manually keyed system, which is less secure than an autoconnection keyed system. It should only be used for testing purposes, since it does not use the key management and exchange systems that FreeS/WAN uses for secure cryptographic exchange.<P>
<B>FreeS/WAN and Firewalls</b><p>If you are running a firewall, you will have to allow access through the firewall. An example of such a setup would comprise a tunnel between two firewalls. FreeS/WAN runs well on Linux firewalls with the standard distribution of <B>ipchains</B>. Note that running a FreeS/WAN IPsec tunnel through any device with NAT (Network Address Translation) or IP masquerading will have unpredictable results and is not recommended (refer to documentation, <B>http://www.freeswan.org</B>). If the IPsec gateway is not the platform that performs NAT/masquerading, then it is strongly recommended that the IPsec gateway lies in front of the NAT/masquerading platform. A sample firewall script containing filtering rules for FreeS/WAN is available from the FreeS/WAN Web site. In addition to many of the familiar rules for <B>ipchains</B>, the following directives are required to enable the passage of data packets across the WAN.<P>
On Server 1.2.3.4, the following firewalling rules should be added:<P>
<pre>
ipchains -A forward -p all -j ACCEPT -s \
   192.168.0.0/24 -d 192.168.1.0/24<P>
ipchains -A forward -p all -j ACCEPT -s \
   192.168.1.0/24 -d 192.168.0.0/24<P>
</pre>
These rules must appear before the masquerading rule. The masquerading rules will look like this:<P>
<pre>
#
# FORWARD RULES
#
ipchains -P forward DENY
#
ipchains -A forward -p all -j ACCEPT -s 192.168.0.0/24  \
   -d 192.168.1.0/24
ipchains -A forward -p all -j ACCEPT -s 192.168.1.0/24  \
   -d 192.168.0.0/24
ipchains -A forward -p all -j MASQ -s 192.168.0.0/24  \
   -d 0.0.0.0/0
</pre>
On server 5.6.7.8, the converse is done:<P>
<pre>
ipchains -A forward -p all -j \
   ACCEPT -s 192.168.1.0/24  \
    -d 192.168.0.0/24
ipchains -A forward -p all -j ACCEPT -s \
   192.168.0.0/24 -d 192.168.1.0/24
</pre>
Again, these rules appear before the masquerading rule, and it should look like this:<P>
<pre>
#
# FORWARD RULES
#
ipchains -P forward DENY
#
ipchains -A forward -p all -j ACCEPT -s 192.168.1.0/24  \
   -d 192.168.0.0/24
ipchains -A forward -p all -j ACCEPT -s 192.168.0.0/24  
   -d 192.168.1.0/24
ipchains -A forward -p all -j MASQ -s 192.168.1.0/24  \
   -d 0.0.0.0/0
</pre>
Once the above manually keyed solution works (try <B>ping</B>ing between subnets as a test), an autokeyed solution that uses the IKE (Integrated Key Exchange mediated via the <B>pluto</B> daemon) can be tested.<P>
<B>Autokeyed Connection</b><p>In order to activate the autokeying, a shared secret is placed in the <B>/etc/ipsec.secrets</B> file. This file should be readable only to the root user. The shared secret can be any difficult-to-guess string that is identical in the <B>ipsec.secrets</B> file on each machine. For the above example, left network, it has the following format:<P>
<pre>
192.168.0.253 192.168.1.253: PSK  \ 
   "jx2V2S5grnATGH86gerEpi6Vjl1RTmkuTmS1TRSnuR
1R525WTuTn321m4luVRRjWWU2uR2U3VnkU"
</pre>
where two IP addresses correspond to the ends of the tunnel, separated by a colon, PSK, and a string enclosed in quotes. An alternative is to use RSA private keys (refer to the man page for <B>ipsec.secrets</B>). The following shows the relevant portion of the <B>/etc/ipsec.conf</B> file for the example network, which is identical to the manual key example above, except with manual keying parameters removed:<P>
<pre>
conn left-test
type=tunnel
left=1.2.3.4
leftnexthop=1.2.3.5
leftsubnet=192.168.0.0/24
right=5.6.7.8
rightnexthop=5.6.7.9
rightsubnet=192.168.1.0/24
keyexchange=ike
keylife=8h
keyingtries=0
</pre>
To automatically restart, replace: <P>
<pre>
auto=add
</pre>
with:<P>
<pre>
auto=start
</pre>
To restart IPsec, run the startup script:<P>
<pre>
/etc/rc.d/init.d/ipsec restart
</pre>
The use of <B>auto=start</B> will automatically bring up the IPsec interface. If you use a firewall, you will need to allow access through the following ports: 500 (UDP), 50, and 51.<P>
For IKE (Internet Key Exchange), carried out by the pluto daemon, which handles the negotiation of connection parameters, acceptable algorithms, key sizes, key, and so forth, requires a the UDP protocol connection on port 500. The resulting firewall script would be:<P>
<pre>
ipcha ins -A input -p udp -j ACCEPT \
   -s 0.0.0.0/0 -i eth0 -d $IPSECGW 500
</pre>
where <B>$IPSECGW</B> is the Internet IP address of the a remote gateway requesting a connection. For added security, the source IP should be stated explicitly.<P>
ESP (Encapsulated Security Payload) provides authentication and encryption of the payload contents and requires port 50 to be opened:<P>
<pre>
ipchains -A input -j ACCEPT -i eth0  \
   -p 50 -s $IPSECGW
</pre>
The authentication header (AH) requires access through port 51:<P>
<pre>
ipchains -A input -j ACCEPT -i eth0 \
   -p 51 -s $IPSECGW
</PRE>
<B>Troubleshooting</b><p>There are several troubleshooting tools available that will give detailed debugging information. Two useful tools are <B>ipsec barf</B> and <B>ipsec look</B> (refer to manpages <B>ipsec_barf</B> and <B>ipsec_look</B>). The <B>barf</B> utility collects, formats, and labels the system configuration and logfile information, which it then dumps to standard output as ASCII text. It is primarily intended as a comprehensive remote diagnostic tool that dumps output to a file that the troubleshooter can then analyze for errors. The outpt of the <B>look</B> utility is a pared-down subset of the <B>barf</B> information. <P>
Another useful practice is to turn on debugging by setting the parameters assigned to <B>klipsdebug</B> and <B>plutodebug</B> in <B>/etc/ipsec.conf </B>config setup:<P>
<pre>
klipsdebug=all
plutodebug=all
</pre>
and restart FreeS/WAN. There is also a mailing list for reporting problems. Refer to the FreeS/WAN documentation.<P>
<B>Other Configurations</b><p>There are numerous themes and variations that you can apply to the above configuration. Point-to-site, site-to-multisite, and point-to-point configurations are some of the other configuration possibilities. Extruded subnet configurations allow the loaning of IP addresses at remote sites over private lines. A common configuration is the so-called &#147;Road Warrior&#148; configuration, which allows remote users with dynamically assigned IP addresses and an IPsec client to tunnel into a private network. FreeS/WAN can work in environments that use dynamically assigned IP addresses. Refer to the FreeS/WAN documentation on these topics, as well as links to discussions of other example configurations.<P>
<B>Conclusion</b><p>With the increasing penetration of broadband technologies into the ISP market, it is now practical to use the Internet to connect geographically dispersed clusters of private networks. It is apparent that VPN products will greatly enhance the safe and secure interconnectivity of networked devices, whether they are used for communication, monitoring, entertainment, or other purposes. Given the impending explosion of network-capable consumer electronics, FreeS/WAN provides an inexpensive option to secure networking for our everyday world.<P>
<B>Sources</b><p>1. The official FreeS/WAN Web site and references cited therein:<P>
<pre>
http://www.freeswan.org
</pre>
2. Linux FreeS/WAN manpages and documentation. <P>
3. Kurt Seifried's <I>Linux Administrator's Guide</I>, specifically the section on IPsec:<P>
<pre>
http://www.securityportal.com/lasg/ipsec
</pre>
<h1>About the Author</h1><p>
Duncan Napier is an avid mountain biker. When not out riding trails, he may be found running Napier Systems Research, an IT networking consultancy based in North Vancouver, B.C., Canada. He can be contacted at: napier@computer.org.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
