<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i11: How to Hack -- An Introduction</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/nov2000.tar"><b class=codeListing>nov2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>How to Hack -- An Introduction</H1><p>
<P>Kurt Seifried
<P>
What is hacking? From an online dictionary (<B>www.dictionary.com</B>), the definition is:<P>
a.  To write or refine computer programs skillfully. <P>
b.  To use one's skill in computer programming to gain illegal or unauthorized access to a file or network: hacked into the company's intranet.<P>
<P>
An earlier term for gaining unauthorized access to computers was &#147;cracking&#148; (as in safe cracking), whereas &#147;hacking&#148; applied to people that pushed computers and software to their limits (and beyond). Over time, the media has bastardized the term &#147;hacking&#148;, leaving &#147;cracking&#148; to pedantic geeks and the history books. The term hacker is now applied equally to people like Linus Torvalds (father of Linux) or Tim Berners-Lee (father of the modern WWW), and criminals that steal information or execute attacks on network sites.<P>
What is a hacker (ignoring the law-abiding definition)? It's anyone who tries to intrude into other computers and networks. This definition covers almost anything modern -- from corporate networks to the phone system and power grid. Anything remotely complex in the modern world is invariably controlled by computers, and people have discovered that networked computers are more useful and easier to manage then standalone computers.<P>
The first thing to realize is that the majority of hackers possess very little expertise. Teenagers have managed to take major online companies (like Yahoo and CNN) offline with network-based attacks. How can it be that they are not geniuses? To put it bluntly, because the state of computer security, on average, is terrible. The fundamental protocols used for communicating on networks were designed a long time ago in a less hostile environment, and in many cases, these protocols were not meant to survive this long. The majority of computers placed on networks are insecure, because securing a modern OS takes a significant amount of effort. In most cases, you must disable services, remove unneeded software, upgrade and patch the system, make sure the OS is hardened, and then worry about users running foreign content sent to them in emails labeled &#147;I love you&#148;. Most admins don't have the time or resources to properly secure their infrastructure, and far too many projects (especially online e-commerce ones) are rushed to completion.<P>
<B>Classes of Attackers</b><p>The first class of attackers probably forms more than 95% of the population, and are often referred to as &#147;script-kiddies&#148;. Beyond being able to use a computer and having a very basic knowledge of networks and operating systems, script-kiddies do not have much skill. They typically download packaged software (and in some cases, precompiled software) that they then use to attack other computers. Often, they do not even know how the software works, other than it will allow them to gain access to other computers, or deny use of remote services (by crashing the machine or simply flooding the link it is on).<P>
The next group is more skilled, having a knowledge of UNIX (most often Linux or other &#147;free&#148; variants) and/or Windows. They may have knowledge of networks, protocols, and services, which they can leverage to direct their attacks, and usually have a higher &#147;success rate&#148; then script-kiddies because of this. Most cannot program or identify new weaknesses in software and networks. Like script-kiddies, they are followers rather than leaders. This group is much smaller than script-kiddies, but significantly larger than expert attackers.<P>
The last group are the skilled people who have managed to learn a significant amount, either on their own, or through work and training. These are the people who will download software and test it for new problems, and figure how to exploit the weaknesses they find. Often they will write programs (referred to as scripts) that can exploit these weaknesses, usually releasing them to their friends and associates, and sometimes publicly. These scripts eventually filter into the public domain where they are used by the first two groups of attackers. Many people in this group are &#147;white hats&#148; --  they do not break the law, but they feel it is necessary to release the scripts they write in order to get vendors to fix problems (&#147;proof of concept&#148;). The ethical debate surrounding this matter would easily fill a book.<P>
<B>Anatomy of a Hack</b><p>The first thing attackers will do is decide on their objectives. This is usually a conscious process, but sometimes attackers only know that they want to attack an organization, for whatever reason. This decision is also influenced by the amount of risk attackers are willing to take during the attack. However, attackers are sometimes unaware of the actual risk involved and will bite off more than they can chew. &#147;Mafiaboy&#148;, for example, attacked CNN.com, which guaranteed there would be a lot of press coverage and that action would be taken to track down the attacker.<P>
The least risky attack is usually a denial of service attack. Launched from insecure computers, it is often easy to do and the results are immediate and gratifying to the attacker -- preventing access to a Web server, for example. However, a denial of service attack will only go so far, and generally speaking, will not gain the attacker anything financially. <P>
A penetration attack can provide attackers with credit card numbers or access to additional resources that they can use to continue their attacks on other sites. Attackers are usually caught when they get overly confident and continue to attack a site over a period of days or weeks. If attackers know when to cut and run, catching them can be very difficult.<P>
The less skill an attacker has, the more obvious and clumsy any attack will be. Script-kiddies might not even bother to reconnoiter your network; instead, they might just download exploits and try them at random. This type of activity should set off many alarms on your firewall and your intrusion detection systems, and should not work if you keep software up to date. A skilled attacker will do a basic analysis of your network, typically using tools like <B>traceroute</B> and DNS information. For example, I did a reverse DNS lookup on 65,000 IPs at the local university in a few hours and never received a complaint or inquiry. You cannot easily prevent these probes because they can imitate legitimate network requests. Unfortunately, the only methods of logging these probes will result in a huge amount of data. Other areas to probe are a company's phonelines, since most companies have modems attached to computers that may not be properly secured. Expert attackers might try social engineering. This is rare for the first two groups, because it requires a high degree of interaction with people and is reasonably difficult to do well. The more skilled an attacker, the more focused the attack will be -- like a scalpel instead of a blunt object.<P>
<B>The Tools</b><p>Where can you find all these scripts and information on exploits? There are numerous Web sites devoted to the topic, and IRC is used for real-time discussions and trading of software by many hackers. The following is a catalog of sites commonly used by hackers:<P>
<P>
<B>http://www.antionline.com/</B> -- This is one of the most comprehensive sites; it's nicely formatted, and easy to navigate. There are hundreds of exploits for almost anything that can be attached to a computer network (Cisco, Windows, BSD, AIX, etc.). There are also a number of network scanners, password generators, keyloggers, and other tools that can be used to assist a person committing illegal acts (or running a legitimate penetration test).<P>
<B>http://www.rootshell.com/</B> -- This site was once the definitive site for exploits. However, activity has slowed down significantly in recent months. The site can be browsed by month (useful for finding the latest exploits), and there is a search engine available. Plug in your favorite OS or network software, and if this doesn't convince you that upgrades are necessary, nothing will.<P>
<B>http://packetstorm.securify.com/</B> -- This is by far the largest archive of exploits, going back several years.<P>
<P>
The following are tools that can be used to probe networks, determine their structures, and so forth:<P>
<P>
<B>http://www.nmap.org/</B> -- The best port scanner around, and it's free. Scanning your network from internal trusted hosts to find out what is running is a good idea (since sometimes people add servers without mentioning it), and also from an external untrusted host, so you can see what an attacker would see.<P>
<B>http://www.nessus.org/</B> -- One of the better intrusion scanners, and Open Source. It has a client/server architecture, for both UNIX and Windows, with several hundred tests. The reports it generates are complete and some include information on how to fix the problem. It also has denial of service tests, which should be run with caution since they might crash machines.<P>
<P>
Scanning a company for modems will usually result in discovery of at least one modem that can be used to gain access to the network. There are four methods to deal with this problem. The first method is a physical inspection of computers for modems. However, the user may have an external modem that is not always attached. The second method is to scan your phone lines for modems. Again, the user's modem may not always be attached or turned on. The third method is to prevent users from using their com ports. In UNIX, you can set permission on <B>/dev/</B> appropriately, and for Windows there is a product called SecureNT. The fourth and last method is to firewall your phone lines. Currently, the only available product for these firewalls is TeleWall.<P>
<P>
<B>http://www.hackers.co.za/archive/hacking/wardialers/</B> -- The best selection of free wardialers like THC (The Hackers Choice) for scanning phones. Remember to disable caller ID display when using a tool like this.<P>
<B>http://www.securelogix.com/</B> -- SecureLogix makes the TeleWall, a firewall for phone systems. Place it in front of your PBX. It handles up to 24 lines, and you can use as many as you need. It can filter incoming and outgoing calls based on origin, destination, time, and type of call. SecureLogix also makes TeleSweep, an industrial-strength wardialer.<P>
<B>http://www.securewave.com/</B> -- SecureNT is a product that allows you to control access to com and LPT ports, as well as removable media such as floppy drives, CD-ROMs, and zip drives in Windows. You can use this to lock down Windows 9x, NT, and 2000 machines. It features nice central management.<P>
<B>The Defenses</b><p>There are specific defenses against these attacks, however the list is rather huge. Having a good security policy and enforcing it, a solid IT/IS team, and procedures to deal with problems is generally your best defense. Specifically, you should keep software up-to-date, install vendor patches where possible, and restrict access to services. Physical security is also important -- consider buying lockable cases. Controlling access to workstations is almost impossible with cleaning staff and other people circulating around offices. Encrypt network traffic where possible, and consider using one-time password schemes (such as SecureID for services that require a higher degree of assurance). Filtering and scanning content is a must. This can be as simple as a packet-level firewall, all the way up to virus scanning proxy servers and intrusion detection systems. Since an attacker will usually have to modify binaries and configuration files on the system to create a back door for further access, tools like TripWire are invaluable. For UNIX and NT, the attacks and defenses vary significantly, and will be covered in later articles.<P>
<B>References</b><p>Wadlow, T. 2000.<I> The Process of Network Security</I>. Addison-Wesley. This book discusses how to handle incidents, how to build a team, etc. It's invaluable.<P>
Winkler, I. 1997. <I>Corporate Espionage</I>. Prima Publishing. This book is more policy/procedure focused than technology. However, it will give you the mindset of a skilled attacker, and &#147;best practices&#148; that any company would be advised to use.<P>
<P>
Unfortunately, many OS vendors have little or no useful security documentation online, but there are a few exceptions:<P>
<P>
<B>http://docs.sun.com/</B> -- Sun Documentation site.<P>
<B>http://www.cisco.com/</B> -- Click on &#147;Technical Documents&#148; for Cisco's information.<P>
<B>http://www.microsoft.com/technet/security/</B> -- Microsoft's collection of security information.<P>
<p>
<h1>About the Author</h1><p>
Kurt Seifried is senior analyst for SecurityPortal and somewhat confused as to what that actually means. His primary interests are security, crypto, privacy, and sushi. He may be reached at: seifried@securityportal.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
