<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i11: Using vi Tag Files</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><span class=navbarLink><a href="a7_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2000/nov2000.tar"><b class=codeListing>nov2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Using vi Tag Files</H1><p>
<P>Ed Schaefer
<P>
Administering large software projects requires editing objects in multiple source files. If the desired object, function, etc. is not in your working source file, you probably won't remember where in the source hierarchy that object resides. The <B>vi</B> editor provides a tag file facility that allows a developer or admin to move the <B>vi</B> editing session to the desired object and changes the current working source file with just a key stroke combination. This article covers the use and structure of <B>vi</B> tag files. Creating tag files with the UNIX <B>ctags</B> utilities is also presented.<P>
<B>Cursor Movement with Tag Files</b><p>After tag file set up, while in <B>vi</B>, simply place the cursor on the first character of the object and press <B>control-]</B> (right bracket). <B>vi</B> changes the current file to the file in which the object resides. The <B>control-]</B> provides a developer with just a key stroke to move to a function in another source module.<P>
An equivalent method is the <B>tag</B> command. While in <B>vi</B> command mode:<P>
<pre>
:tag func2
</pre>
causes the same effect as placing the cursor over func2 and pressing <B>control-]</B>.<P>
In addition to cursor movement commands, you can initialize <B>vi</B> knowing the object name by using the -t flag:<P>
<pre>
vi -t &lt;object&gt;
</pre>
For example, if function <B>func2()</B> resides in <B>func2.c</B>, executing <B>vi -t func2</B> makes <B>func2.c</B> the current file and places the cursor at the <B>func2()</B> position in the file.<P>
At any time in <B>vi</B>, you can return to the last edited file by using the <B>e#</B> command (<B>e!#</B> to ignore any changes to the current file). Solaris has provided an extension called &#147;tag stacking&#148; using the <B>control-t</B> command. With tag stacking, cursor movement between files using <B>control-]</B> is remembered. Pressing <B>control-t</B> returns to the previously edited file. Successively executing <B>control-t</B> returns up the stack until the top is reached with &#147;tag stack empty&#148; message.<P>
<B>Tag File Structure</b><p>The tags file on separate lines contains the object name, the file in which it is defined, and a search pattern for the object definition, separated by white space. The tags file (which by default is named tags) can be changed with the <B>set</B> command:<P>
<pre>
:set tags=&lt;new file&gt;
</pre>
An example of a line of tag file might be:<P>
<pre>
func2     func2.c       \
   /^void func2(char *str)$/
</pre>
<B>Using UNIX ctags Command</b><p>Fortunately, UNIX provides a utility called <B>ctags</B> that creates a tags file for specified C, C++, Pascal, FORTRAN, yacc, and lex source files. Assuming C source, the tagged objects may be functions, <B>typedef</B>, <B>#define</B>, <B>enum</B>, <B>struct</B>, and union statements. Execute <B>ctags</B> in the present working dirctory:<P>
<pre>
ctags *.h *.c
</pre>
Consider an example C project: Listings 1 to 4 include a header file, <B>max.h</B> and three C files, <B>main.c</B>, <B>func1.c</B>, and <B>func2.c</B>. Executing the above <B>ctags</B> command creates the following tags file:<P>
<pre>
Mmain     main.c    /^main()$/
func1     func1.c   /^void func1(char *str)$/
func2     func2.c   /^void func2(char *str)$/
max       max.h     /^#define max(x,y) ((x &gt; y) ? x : y)$/
node      max.h     /^struct node {$/
</pre>
For C/C++ programs only, the main tag object is preceded by &#147;M&#148;. This allows having source modules with separate main functions residing in the same directory.<P>
<B>Conclusion</b><p>This article has covered the use and structure of tag files. The example C project resides only in the present working directory. An obvious enhancement would be to support a project with a multiple directory structure. The file where the object is defined, column 2, supports a full search path:<P>
<pre>
func1      /usr/demo/lib/func1.c      \
   /^void func1(char *str)$/
</pre>
<h1>About the Author</h1><p>
Ed Schaefer is a frequent contributor to <I>Sys Admin</I>. He is a senior programmer/analyst for Intel's Factory Information and Control System (IFICS) Group in Aloha, OR. His view points on tag files or any other subject in no way reflects Intel's position. He can be reached at: olded@ix.netcom.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
