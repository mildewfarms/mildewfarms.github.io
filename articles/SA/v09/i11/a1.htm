<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i11: A Perl of a Site Map</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><span class=navbarLink><a href="a1_f1.htm">Figure 1</a></span></td>
		<td><span class=navbarLink><a href="a1_f2.htm">Figure 2</a></span></td>
		<td><span class=navbarLink><a href="a1_f3.htm">Figure 3</a></span></td>
		<td><span class=navbarLink><a href="a1_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_f5.htm">Figure 5</a></span></td>
		<td><span class=navbarLink><a href="a1_f6.htm">Figure 6</a></span></td>
		<td><span class=navbarLink><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class=navbarLink><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class=navbarLink><a href="a1_s1.htm">Sidebar 1</a></span></td>
	</tr>
	<tr>
		<td><span class=navbarLink><a href="a1_s2.htm">Sidebar 2</a></span></td>
		<td><span class=navbarLink><a href="a1_s3.htm">Sidebar 3</a></span></td>
		<td><a href="../../../../source/SA/2000/nov2000.tar"><b class=codeListing>nov2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>A Perl of a Site Map</H1><p>
<P>David Sweet
<P>
Every MIS manager I have worked for has had some version of a blank photocopied map of his building's cubes and offices. He'd fill in all the little squares, rectangles, and polygons with user names, IPs, or hostnames. When I needed to find out where a particular user or equipment was located, he'd go through his pile of photocopies until he found the right one. Then I'd replace the equipment or solve the user's problem.<P>
At one of my first job sites, I felt there had to be a better way. I was just learning how to use Perl for CGI programming, but I was able to quickly write a couple of scripts and scan in a blank map. Thus, my first clickable Web-based site map was born. I showed it to my manager, but he was unimpressed. Apparently he was very fond of those dog-eared, penciled-in photocopies.<P>
At my last job, I discovered that my manager didn't even have blank maps for reference. She simply tried to remember the location of equipment and people. Since she had not become attached to any other method, I felt this site was a prime candidate for using my scripts, so I installed them. My manager liked them, but had a few suggestions. After another five weeks of intensive development, I had the final product. I called it, simply, Site-map.<P>
Site-map incorporates these features:<P>
<P>
&#149; A searchable Web-based graphical site map<BR>
&#149;  Clickable hot spots correspond to cubes and offices (referred to as &#147;areas&#148;)<BR>
&#149; Information fields about areas are revealed by clicking<BR>
&#149;  A single configuration file for controlling the number and type of  information fields<BR>
&#149; A report generator<BR>
&#149;  A cookie-based preference for controlling visible fields and report styles<BR>
&#149;  Security features that password protect the editing features<BR>
<P>
You need to understand the inner workings of your Web server in order to install the scripts, files, and directories that comprise the Site-map software. You also need to have Perl installed. I have installed Site-map many times on Solaris systems, and once on a Linux box. The distribution is UNIX-centric, but I actually developed it on a Macintosh, and it works great on that platform. Although I haven't tried it yet, I'm confident it will work on Windows systems, also.<P>
<B>Installing Site-map </b><p>The first step to installing and configuring the software is to download the compressed <B>tar</B> file from the <I>Sys Admin</I> Web site. When Site-map is uncompressed and untarred, you will have created the file hierarchy diagrammed in Figure 1. Permissions are important. The permissions can be looser then specified, but no tighter. However, if the permissions are looser than specified, then you may weaken security. The group owner shown in Figure 1 is <B>http</B>. Whatever group your Web browser uses to execute CGI scripts  should be used instead of <B>http</B>. If your Web server is Apache, then you can determine the group identity by viewing Apache's configuration file and noting what the group directive is set to. <B>chown</B> and <B>chgrp</B> the files as appropriate, then proceed.<P>
If the Web server you are using is Apache and its  <B>share</B> directory has both a <B>htdocs</B> and a <B>cgi-bi</B>n directory below it, then you may un<B>tar</B> the Site-map distribution from within the share directory. If this is not the case, you will have to move the Site-map directory to your Web server's document root, and move the contents of <B>cgi-bin</B> into the directory where your Web server keeps its CGI scripts. Activating a portion of your Web server's directory structure as a CGI repository is beyond the scope of this article.<P>
Each of the Perl scripts in <B>cgi-bin</B> start with the line <B>#!/usr/local/bin/perl</B>. If <B>/usr/local/bin/perl</B> is not the path to your Web server's copy of Perl, then you will have to change this line in the nine <B>.pl</B> files.<P>
The <B>map-lib.pl</B> file will have to be modified to work with your Web server. The following global variables that you will find set at the beginning of <B>map-lib.pl</B> affect all of the scripts that make up Site-map:<P>
<P>
<B>$METHOD</B> -- Should be set to &#147;post&#148; so that when form requests are made to Site-map's CGI scripts. None of the CGI parameters will be displayed on the user's Web browser URL field. I recommend you keep <B>$METHOD</B> set to &#147;post&#148; unless you are doing testing. The alternative setting is &#147;get&#148;. Note that some Web browsers and Web servers cannot handle the very long URLs created by using &#147;get&#148; as your form method.<P>
<B>$url</B> -- Should be set to the top level of Site-map. I use <B>/site-map/</B> because, as instructed above, I placed the distribution's site-map directory in my Web server's document root directory.<P>
<B>$homeUrl</B> -- Should be set to whatever you consider Site-map's parent Web page. I use <B>/</B> because the top level Web page for the Web server on which I installed this example was my IT group's home page.<P>
<B>$searchUrl</B> -- The URL path to the Site-map's static html page, which passes search requests off to the search engine on your Web server. I have provided a simple html page (<B>search.html</B>) and a Perl script (<B>map-search.pl</B>) that will work with Swish-E. If you are using a different search engine, then you will need to develop both of these on your own.<P>
<B>$getUrl</B>, <B>$editUrl</B>, <B>$updateUrl</B>, <B>$searchUrl</B>, <B>$reportUrl</B>, and <B>$prefUrl</B> -- Should all be set to a path relative to your server's document root. By default, Apache uses<B> /cgi-bin </B>for its CGI scripts. So an Apache example for <B>$getUrl </B>would be <B>/cgi-bin/getarea.pl</B>. Later, you may want to change the path to some of these scripts to password protect the editing portion of Site-map. I'll discuss implementing that feature later in this article.<P>
<P>
Listing 1 shows what the above variables should be set to if Apache is your Web server, its install base is <B>/usr/local/apache</B>, and its <B>cgi-bin</B> and <B>htdocs</B> directories reside in Apache's share directory.<P>
The last step necessary to get a simple example of Site-map running on your Web server is to modify the static Web page <B>index.html</B>. The lines of <B>index.html</B> that may need to be modified are shown in Figure 2. If you want the top level of your Web server to be the home page for Site-map, and you did not move <B>map.gif</B> and <B>search.html</B> out of the directory where <B>index.html</B> resides, and your Web server uses <B>/cgi-bin</B> for CGI scripts, then you do not need to change any of these lines. Otherwise, make changes as appropriate.<P>
Once you have Site-map working, you can see how it all fits together. By pointing your Web browser at the top level of Site-map, you should see a page like the one in the top center of Figure 3. The URL will be something like <B>http://your_web_server/site-map</B>. Clicking one of the navigation links will take you to the appropriate script or html that will display the indicated Web page. Figure 3 shows what each Web page does, but it doesn't explain the purposes of all the files in the distribution:<P>
<P>
&#149;  <B>map.gif</B> is an image with a square labeled &#147;Area 1&#148; in the middle, and you will modify this image to look like the floor plan of the site you are tracking with Site-map. I will describe how to do this later.<P>
&#149;  <B>map.conf</B> is used by all of the scripts to determine the nature of the site database. Without this file, none of the scripts know how to interpret the data in the area files.<P>
&#149;  <B>map_conf_api.txt</B> is not used by Site-map. It is a reference for properly modifying the <B>map.conf</B> file.<P>
&#149;  The data directory holds all the area data files. For now, only <B>1.txt </B>resides there.<P>
&#149;  <B>updatearea.pl</B> resolves <B>editarea.pl</B> submissions. Because it sends a user back to <B>index.html</B>, it cannot be displayed in Figure 3.<P>
&#149;  <B>map-search.pl</B>, similarly, resolves search requests initiated by  <B>search.html</B>. <B>map-search.pl</B> will give you errors until you configure your system to use Swish-E. This is explained in the next few paragraphs.<P>
&#149;  <B>map-lib.pl</B>, <B>cgi-lib.pl</B>, and <B>cookie.lib</B> are libraries, that all the other scripts reference for redundant code. <B>cgi-lib.pl</B> was written by Steven E. Brenner. In accordance with his copyright notice, I have modified it for my needs. <B>cookie.lib</B> was written by Matthew M. Wright, and he has given permission to distribute it with Site-map.<P>
<B>Configuring the Search Capabilities <P>
search.html</B> and <B>map-search.pl</B> were written to use Swish-E. Swish-E is a Simple Web Indexing System for Humans, originally written by Kevin Hughes. The current, enhanced version is being maintained by the Swish-E team. To use a different search engine, you will have to configure Site-map and modify <B>search.html</B> and <B>map-search.pl</B> to use it. If you want to use Swish-E, follow the link found on <B>search.html</B> to the Swish-E distribution. Download and compile it, unless you find a copy already compiled for your Web server's architecture.<P>
Index the site map before you run your first query. To do this,  create an index configuration file for Site-map. Use the example <B>swish.conf</B> file, which comes with the Swish-E distribution, as a template. The following <B>swish.conf</B> lines will have to be used since they are written or modified to work with your system: <P>
<pre>
IndexDir /usr/local/apache/share/htdocs/site-map/data
IndexFile /usr/local/apache/share/htdocs/site-map/swish.index
ReplaceRules replace /usr/local/apache/share/htdocs/  \
   site-map/data/cgi-bin/getarea.pl?filename=
</pre>
To actually create an index, run the following command:<P>
<pre>
/usr/local/bin/swish-e -c /usr/local/apache/   \
   share/htdocs/site-map/swish.conf
</pre>
Modify the above paths as appropriate.<P>
Unless you put everything where I do, you will have to modify <B>search.html</B> and <B>map-search.p</B>l, in order for your search queries to go through the Site-map interface. The lines of <B>search.html</B>, which may need to be modified, are shown in Figure 2. Notice that, like <B>index.html</B>, the top and bottom of the file have identical lines that need to be modified the same way because the navigation links appear at the top and the bottom of the page. These are the <B>map-search.pl</B> lines that may need to be modified:<P>
<pre>
$swishcmd='/usr/local/bin/swish-e';
$swishindex='/usr/local/apache/share/   \
   htdocs/site-map/swish.index';
</pre>
When you have made the appropriate modifications, the search feature should work. However, unless you update the index regularly, your search queries will provide less and less accurate results. Therefore, you will probably want to make a crontab entry similar to the following one to ensure the index is kept up to date:<P>
<pre>
15 4 * * 1,5 /usr/local/bin/swish-e -c \
  /usr/local/apache/share/htdocs/site-map/swish.conf &gt; \
  /usr/local/apache/share/htdocs/site-map/swish.log
</pre>
<B>Editing the Site-map Configuration File</b><p>The next step is to start modifying the Site-map configuration file to meet your needs. If you don't modify the <B>map.conf</B>, this Web-based site map will be no better then my old MIS manager's photocopies, since it has only one field to start with. The example shown in Figure 4 illustrates the power and use of this file. Figure 4 also shows an edit details page of an area whose Site-map is using the example <B>map.conf</B>. For a nuts and bolts description of the <B>map.conf</B>, file consult the <B>map_conf_api.txt</B>.<P>
The first line of the example <B>map.conf</B> is a comment. A line beginning with white space or a pound (#) sign is considered a comment line.<P>
The bulk of the lines shown in Figure 4 are nickname descriptions. A nickname description has four elements. The first is the nickname itself. This must be unique and must also start the line. I always make nicknames short and in all capital letters, but they don't have to be. Since white space delineates nickname description elements, a nickname cannot have white space within it, and it can't start with a pound sign either. The nickname is for internal use and will not be displayed through the Site-map interface.<P>
The next element is the label of the nickname; it is surrounded by double-quotes (&#147;&#148;). Since it is within quotes, it may have white space but cannot have double-quotes imbedded in it. The label is displayed left of a field when viewing an area through the Site-map interface.<P>
The third element is the nickname type. There are three types of nicknames: OPEN, SELECT, and LIST. They must be spelled with capital letters. If your type is OPEN, your nickname needs no more information beyond this line. If your type is SELECT or LIST, then a SELECT or LIST description must appear elsewhere in the file:<P>
<P>
&#149;  OPEN refers to an open-ended field. A user, through the Site-map interface, can type anything he wants into a field that is OPEN.<P>
&#149;  SELECT allows users to select options from a pull-down menu.<P>
&#149;  LIST types are made up of other nicknames. A LIST can be made up of nested LISTs.<P>
<P>
The last element determines whether there will be only one value for the nickname (SINGLE) or possibly many for a given area (MULTI). In the example, IP is a MULTI because a given network port can have more then one IP address.<P>
The rest of the lines of the <B>map.conf</B> are SELECT descriptions, or lines that start or end a list description. SELECT descriptions start with the nickname and are followed by white space delineated, double-quoted values. SELECT descriptions must be described outside any LIST descriptions. The last line of the example <B>map.conf</B> is a SELECT description.<P>
Your <B>map.conf</B> has to have at least one LIST description. Like all LIST descriptions, it starts with its nickname on a line by itself. The mandatory LIST nickname is MAIN. Every line between the line that reads MAIN and the line that reads END constitutes your top-level nickname descriptions. Any SELECT or LIST nickname descriptions that you place within MAIN need to be described elsewhere. COMP, NETWORK, and PORT are examples of additional LIST descriptions.<P>
Ensure the fields are formatted the way you want them by going to an edit details page and viewing the layout. You can make changes to the<B> map.conf</B> file after the database is populated, so it doesn't have to be perfect now. If you do this, however, the data stored in the different fields can change in surprising ways. To prevent unpredicted behavior when you change the type of a nickname description from OPEN/SELECT to LIST, or LIST to OPEN/SELECT, also change the nickname. Because only the label is seen through the Site-map interface, this won't confuse you or the other Site-map users.<P>
<B>Creating the Image Map</b><p>Now that Site-map is working and the database is laid out the way you want it, you'll have to modify the <B>map.gif</B> and <B>index.html</B> for your site unless you are blessed with having only one cube in your building. You'll need a drawing program to modify the <B>map.gif</B>. You can draw a simple floor plan from scratch (see Figure 5). For a more complicated corporate environment (Figure 6), you will need a jumping off point. Scan a dog-eared photocopy or the office blueprints. In Figure 6, I scanned the blueprints in little by little. Then I put the pieces together with a drawing program and scaled it so it works well on a Web page. No matter how you scan it in, you'll want to clean it up in your drawing program.<P>
Next, author the image map definition that will reside in the <B>index.html</B> file. I created the image map in the distribution without the aid of an html authoring program, since it is so simple. The area I wanted a hot spot on was 100x100 pixels and started 50x50 pixels from the top left corner, so I only needed these lines:<P>
<pre>
&lt;AREA SHAPE=RECT COORDS="50,50,150,150"
HREF="/cgi-bin/getarea.pl?filename=1.txt"&gt;
</pre>
When a Site-map user moves his mouse over a hot spot like the one above, his cursor will change. If he clicks in the hot spot, the Web browser will be redirected to the Web page that <B>HREF</B> is set to. In this case, the Web browser runs the CGI script <B>getarea.pl</B> with the parameter filename set to <B>1.txt</B>. You'll have to author lines for each area on your <B>map.gif</B>. You can use your drawing program to find out the XY coordinates for the top left and bottom right corners of each cube and office, but I usually use an html authoring program to define the hot spots. I keep an early version of Pagemill on my laptop for this, but any of the modern WYSIWYG html authoring programs can do it.<P>
<B>getarea.pl</B> requires &#147;filename&#148; to be set to something in order to know which file in the data directory to parse. For security reasons, Site-map doesn't create any area files in the data directory. For each hot spot, choose names and create area files with the UNIX <B>touch</B> command. Each one must be readable and writeable by your Web server. I create each file with <B>.txt</B> extension so I can point my Web browser at the raw data file and it'll be able to display it. The<B> .txt</B> is stripped off by all the scripts when they display the area's name. You can use any filename you want for the area data files. To keep things simple, I just use cube or office numbers, such as <B>001.txt</B> and <B>002.txt</B>. The nice thing about using numbers is that you can easily script area data file creation (see Listing 2).<P>
<B>Password Protection </b><p>I mentioned that the editing portions of Site-map could be password protected. I have been avoiding this topic since this is a function of your Web server, and Web server management is beyond the scope of this article, but there are some specifics that need to be addressed when password protecting any portion of Site-map.<P>
There are three steps to password protecting the editing portions of Site-map. First, move <B>editarea.pl</B> and <B>updatearea.pl</B> into a directory you have established as password protected. Second, edit these so that the &#147;require&#148; lines at the top point to the location of the <B>map-lib.pl</B> file. It initially reads:<P>
<pre>
require('map-lib.pl');
</pre>
If a sub-directory of <B>cgi-bin</B> is password protected and you have moved them into it, then you only need to modify the line to read:<P>
<pre>
require('../map-lib.pl'); 
</pre>
Third, modify the <B>map-lib.pl</B> to set <B>$editUrl</B> and <B>$updateUrl </B>to the new location. In the case of Apache, if you have established a script alias named <B>/secured</B> for the password protected portion of your Web site, then these lines would read:<P>
<pre>
$editUrl="/secured/editarea.pl";
$updateUrl="/secured/updatearea.pl";
</pre>
<B>Modifying the Site-map's Functionality</b><p>There are modifications a Perl-savvy administrator might like to make to the distribution to meet his or her needs. All of these I have done, or will do, to solve different problems. Since I am a minimalist when it comes to Web page design, you'll note the absence of colored backgrounds, flashy navigation bars, or animated gifs. If the look and feel doesn't match your company's intranet Web site design, you only need to modify portions of <B>cgi-lib.pl</B>. As I mentioned, I didn't write <B>cgi-lib.pl</B>, but I have modified it a great deal to work for me. I encourage you to do the same. The sub-routine that can control the overall look of a Web page is <B>printTitle</B>, but you will also need to modify the static html pages <B>index.htm</B>l and <B>search.html</B> to get a uniform look and feel.<P>
The style of my navigation links is also spartan and reflects the needs of the Web sites I have worked on. The sub-routine that controls this is in <B>map-lib.pl</B> and is called <B>printNav</B>. The scripts that use this sub-routine are <B>getarea.pl</B>, <B>editarea.pl</B>, <B>map-report.pl</B>, and <B>map-pref.pl</B>. Also note that the array <B>@urls </B>defined at the beginning of each of these scripts determines which of the navigation links will be displayed by <B>printNav</B>. Like the first suggestion, the static html pages will also have to be modified.<P>
Without the <B>index.html</B> and <B>map.gif</B> files, Site-map is still a simple and powerful database, but it lacks an initial interface for a user to access it. Because of this, when asked to create a subscription database for a Web site, I simply modified Site-map. Obviously, I had to change the script names, the titles of the Web pages, and the navigation links to reflect the new purpose, but that was surprisingly simple. The new initial interface was an html report generated by<B> map-report.pl </B>with the &#147;show filename&#148; preference turned on. I didn't use the <B>.txt</B> extension on the area data files, because they were now subscriber data files. The filename became the user's login name. My point is that you don't need to use Site-map as a site map. You can, without any changes, track just about any kind of data with it.<P>
You can track more than one site with a single installation of Site-map, as long as each area data file has a unique name. You  only need to have two Web pages like the present <B>index.html</B>, but problems arise. Reports include information about both sites and when you return to the <B>index.html</B>,<B> </B>it may not be the map you were just dealing with, but these are minor annoyances. Without major changes, you can avoid these by just installing the distribution more than once. To do this, you will either have to rename the scripts, or put them in a different CGI directory. You might have to modify the <B>map-lib.pl</B>, all &#147;require&#148; lines, and the static Web pages, but you'd be up and running with two site maps in no time. <P>
Alternatively, you can create two data directories and introduce a new CGI parameter, &#147;database&#148;. I have done this with one install, and it went smoothly. The filename parameter goes through a lot of testing to ensure a user is not trying to get out of the data directory and to check out a file, such as <B>/etc/passwd</B>. You'd have to do the same with database, but if it passes the tests, then you'd introduce it into the <B>$datapath</B> variable. So, most of the modification would occur in <B>map-lib.pl</B>, but the static Web pages would also have to be modified. Only someone that really needs this sort of functionality should attempt this modification, since it does require making a basic concept change to the distribution.<P>
A final modification suggestion is regarding the introduction of a new data type. I haven't done this yet, but I worked it out in my head, and the next time I implement Site-map for a company I will probably include it. I'd call the type REALTIME and, instead of consulting the data file for the field values, it would run something on the command line and place the results into the field. This would slow down display time, but it would make Site-map more powerful. A nickname description for it in <B>map.conf</B> could look something like this:<P>
<pre>
PING "Ping Results" REALTIME SINGLE 
</pre>
Its corresponding REALTIME description, which would reside outside the parent LIST description in the <B>map.conf</B>, could look like this:<P>
<pre>
PING "ping $VALUE" 
</pre>
When you go to the details page for an area, the field would display the results, and it would tell you whether there was &#147;no answer&#148;, or whether it &#147;is alive&#148;. The value for <B>$VALUE </B>would be set in the edit details page. This would allow your site to implement system monitoring without the cost and complexity of installing HP's OpenView or Sun's SyMon. Anything you can run from the command line could be used, including scripts you've written yourself. This would constitute a security threat, but as long as only experienced and trusted systems administrators are given access to the <B>map.conf</B> file and  to the edit scripts, the risk would be minimal. Like the last possible modification, this is a serious conceptual change and should not be attempted carelessly.<P>
I hope I have inspired you to sneak into your boss's office and throw away all the photocopies of you site. Site-map is really a better way to do things.<P>
<p>
<h1>About the Author</h1><p>
David Sweet is presently an independent contractor working primarily in the Silicon Valley. He received a history degree from UCB and teaching credentials from SFSU. After deciding substitute teaching wasn't for him, he began his five-year career as a Solaris systems administrator. He can be reached at: dsweet@tgd-inc.com.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
