<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i11: Automating UNIX Security Monitoring</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class=navbarLink>Article</a></span></td>
		<td><a href="../../../../source/SA/2000/nov2000.tar"><b class=codeListing>nov2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Automating UNIX Security Monitoring</H1><p>
<P>Robert Geiger and John Schweitzer
<P>
It's no secret to anyone working in the IT business that security, while always a relevant concern, has reached a prominent position on most organizations' priority lists. At the same time, systems administrators continue to be among the most overworked IT people on a day-to-day basis. To be sure, the daily security management of any large network is an arduous task, with firewalls shouldering much of the burden and considered the front line in protecting a company's information assets. But the importance of providing rock-solid host security with stringent, daily monitoring cannot be overstated.<P>
Most information security professionals concede that it is impossible to make a system 100-percent hacker proof. However, keeping a close eye on a system's security vital signs will  allow a systems administrator to quickly catch hackers, or perhaps repel an attack in progress.<P>
There are some relatively easy ways to automate monitoring, and this article will address ways in which a systems administrator can use scripts and other automated routines to watch a UNIX system for intrusions and attempts at system breaches. With moderate scripting ability, the accompanying code will illustrate a cheap, simple method of security monitoring.<P>
All of the scripts listed in this article are meant to be run from <B>cron</B> on a regular basis -- daily or hourly, depending on the routine in question -- with the output going to either email or to the systems administrator's pager. However, none of the things described in this article are foolproof. UNIX security mechanisms are only relevant if the root account has not been compromised. For example, scripts run through <B>crontab</B> can be easily disabled or modified if the attacker has attained root access, and most log files can be manipulated to cover tracks if the intruder has control over the root account.<P>
We will focus on some important facets of systems administration, including suspicious log entries, network adapters going into promiscuous mode, strange directories appearing, and the number of SUID root files mysteriously changing. While in most cases Tripwire would do a tremendous job of finding changes to the integrity of system files and directories, the software can sometimes take a long time to run, thus making it impractical to use many times in one day. Tripwire may also be overkill on many systems, and managing the output may become an untenable burden.<P>
These scripts provide a poor-man's way of monitoring for key security events. One of the common themes in this article is that the systems administrator doesn't need to be bothered for normal operation. Therefore, these scripts don't make any &#147;noise&#148; when nothing is wrong.<P>
Finally, these scripts cannot be all things to all people because of the differences in how some UNIX variants work, and because of the factors that affect what is a relevant security event in one systems environment versus another.<P>
We hope that this is a good overview and that these scripts and their conceptual underpinnings will help in the daily monitoring of your systems.<P>
<B>What's your Operating System?</b><p>Although we knew it would be far easier to focus on one kind of UNIX for this article, we wanted to make this portable across a couple of UNIX types -- specifically Linux and Solaris, given their wide install base. Most of these scripts can be easily modified to run on other types of UNIX -- such as FreeBSD, OpenBSD, AIX, and HP-UX -- and may even run as-is on some.<P>
Listing 1 shows <B>os.sh</B>, which determines the system's operating environment and is called by all other scripts included with this article. It's assumed location in all other scripts is <B>/usr/local/bin</B>. (All listings for this article are available from the <I>Sys Admin</I> Web site: <B>http://www.sysadminmag.com</B>.)<P>
A key feature of <B>os.sh</B> is found in the<B> ALARM_COMMAND </B>variable, which drives how each script in this article will alert the systems administrator of security events. It simply emails the alert generated by each script to a local mail account, Internet email address, pager, or cell phone, assuming the system being monitored has Internet access.<P>
<B>Who's Watching Your Back?</b><p>Logs are truly the lifeblood of monitoring your system and, if they're implemented and watched closely, will give you a ton of important information. Watching system log files is much easier said than done. The majority of the time, they reflect perfectly normal system events and, at the very least, show anomalies that are usually hardware or software problems, rather than security related.<P>
However, these logs can still show hackers knocking at your doors. For example, error messages from daemons like Sendmail and <B>finger</B> can signal break-in attempts, and repeated login failures could signal a brute-force effort to breach your systems.<P>
<B>check_logs.sh</B> in Listing 2 checks common system logs and finds suspicious entries based on the values assigned to the REDFLAGS variable. This is done through a nested set of &#147;for&#148; loops checking each log file for each word defined in REDFLAG. The script outputs to a file and uses the <B>diff</B> command to discern the differences between the current output and a previous run, so problems are only reported once.<P>
The LOGFILES variable, set in <B>os.sh</B>, determines the logs that are examined. <B>syslog</B>, the central logging facility in UNIX, typically defaults to either <B>/var/adm/messages</B> or <B>/var/log/messages</B>, depending on your UNIX variant. The LOGFILES variable can be customized to have <B>check_logs.sh</B> look at any log you choose.<P>
The REDFLAG variable lists various keywords that, if found in logs, will make the script alert the systems administrator. It contains parts of several common error messages:<P>
<P>
&#149;  excessive -- This usually comes in the form of &#147;excessive login failures&#148; and could denote a brute-force password attack.<P>
&#149;  <B>vrfy</B> -- From the SMTP <B>vrfy</B> command for username identification.<P>
&#149;  <B>expn</B> -- From the SMTP <B>expn</B> command; also good for username identification.<P>
&#149;  snort -- Any alerts from the output of snort should alert the systems adminstrator.<P>
&#149;  portsentry -- Anything that portsentry finds could be bad, as well.<P>
<P>
The REDFLAG variable can be modified in this script to contain as many words as the systems administrator believes are red flags in their environments. For example, the words &#147;failed&#148; or &#147;failure&#148; may be helpful to some administrators since they could help spot password attacks, but may result in too many pages due to simple login errors on multi-user machines. Having <B>pop3</B> or <B>fingerd</B> as flagging words may alert you to attempts to exploit those services. There are many variations, and users should experiment with those most appropriate to their environments and their system's normal usage.<P>
<B>Are Filesystems Getting Overgrown?</b><p>An important component of the availability part of system security is ensuring that you know when filesystems are running out of disk space. Monitoring for filesystem growth will also allow you to notice a filesystem's free space shrinking -- through user or system error -- in time to investigate and correct the problem. Additionally, sudden increases in the amount of filesystem space used may alert you to someone storing unauthorized files on your network.<P>
Listing 3 shows <B>check_filesys.sh</B>, which will watch all filesystems and send an alert when the space used exceeds the number defined with the <B>MAX_PERCENT</B> variable. The <B>EXEMPT</B> variable can be used to exclude filesystems from this scrutiny if they are static in size, but typically over the space usage limit set in <B>MAX_PERCENT</B>.<P>
<B>Mind Your crons and ats</b><p>Automated routines performed by the <B>cron</B> daemon, such as <B>cron</B> and <B>at</B> jobs, are an extraordinary convenience to systems administrators. They are also a devious place for an intruder to plant a regenerating backdoor that will keep duplicating itself at a set date and time if the systems administrator finds the original.<P>
Listing 4 shows the script <B>time_sync.sh</B>, which will compare &#147;trusted&#148; copies of root's normal <B>cron</B> and <B>at</B> configuration, stored in <B>/etc/master</B>,<B> </B>against whatever is running as the current versions. So, why the odd filename <B>time_sync.sh</B>? If an intruder were to seize the root account, and thus have the ability to modify or delete any alarms in root's <B>crontab</B>, this may give the script a name that's innocuous enough not to draw the attacker's attention. There should never be changes of unknown origin on root-owned routines, and the existence of such changes may signal a system breach.<P>
<B>Things that Shouldn't Change Overnight</b><p>While there are things on a UNIX system that change constantly, certain key components don't change much and, when they do, the systems administrator should know when and why the changes occurred.<P>
This certainly applies to the checks done in<B> check_crit_files.sh </B>(Listing 5), which monitors <B>inetd.conf</B>, the system startup directories, the number of users in <B>/etc/passwd</B>, and the system's supply of <B>.rhosts</B> files.<B> check_crit_files.sh</B> will constantly compare against trusted results stored in <B>/etc/master</B> and notify you of any sudden changes.<P>
<B>inetd.conf</B>, which controls most running system services, should be watched carefully so that you know which services are running on your system. This script compares the current version of the file with a trusted version to verify that no unauthorized additions or changes have been made. This will allow you to notice anything suspicious, such as the appearance of new entries that execute shell programs.<P>
System startup routines seldom change, except for installations of new software or invoking new services not started in <B>inetd.conf</B>.<B> </B>And, the contents of the <B>/etc/rc*</B> directory structure should certainly not be modified without your knowledge. This is because system boot routines will often be modified by intruders to install back doors each time a system boots, enabling them to renew their access or to alter the services running on the system.<P>
Trusted host relationships are the double-edged sword of systems administration because they can make life very convenient when managing multiple systems, but they can also be a security nightmare. It's therefore important to occasionally sweep the system for all <B>.rhosts</B> files and pay special attention when new files suddenly appear.<P>
Likewise, there's seldom a good reason for new user IDs to be generated without the systems administrator's knowledge, and this script will alert you to any added or deleted user IDs.<P>
<B>Is Your Network Adapter Promiscuous?</b><p>Having your system's network adapter suddenly go into promiscuous mode (in which it sniffs the entire network for packets and not just those bound for its address) is a good sign that your system has been hacked and that you should be notified immediately.<P>
The script in Listing 6, <B>check_promisc.sh</B>, will tell you when your Linux system's adapter is promiscuous and will work for other UNIX variants whose <B>ifconfig</B> command reports promiscuous mode. This script can be easily modified to use other dedicated promiscuous mode detectors, such as <B>ifstatus</B>, <B>cpm</B>, and <B>promisc</B>, if your UNIX's <B>ifconfig</B> does not do it.<P>
As we did with the script checking automated routines, you may want to rename this script or embed it in another script so that it is transparent to an attacker (who would have gotten root to run a sniffer on your system).<P>
<B>Who is su'ing to root?</b><p>Security-minded systems administrators should watch every avenue that an attacker could use to access the root account, and logging of the <B>su</B> command is one of the biggest. The <B>check_su.sh </B>script in Listing 7 does that by referencing <B>os.sh</B> for your UNIX variant's standard <B>su</B> logging mechanism, extracting root entries, and notifying you if unauthorized people have attempted (or succeeded) to access root via the <B>su</B> command.<P>
The <B>OK_TO_SU</B> variable allows you to exempt user IDs that have a legitimate reason to <B>su</B> to root, and for which you do not wish to receive notification. The script also dumps the current <B>su</B> log contents elsewhere, and reinitializes the log so you aren't paged with the same event the next time this script runs.<P>
<B>Monitor Supply of SUID/SGID Files</b><p>The Set User ID (SUID) and Set Group ID (SGID) functions allow any user who is executing files set with such privileges to run the associated process with owner or group-owner privileges. This is especially dangerous when the owner of the file is root.<P>
Because SUID root files are a major security exposure, most notably, with buffer overflow attacks, it's a good idea to remove this setting from all possible binaries. (It's not always possible because users are unable to log in if the login command is not SUID root, but many other commands that aren't accessed by the average non-root user can easily get by without that setting.)<P>
Listing 8 shows <B>check_suid_sgid.sh</B>, which counts the system's inventory of these files and reports any discrepancy. It is especially important that the systems administrator be aware of any new SUID root files that suddenly appear, because this is a common mechanism used by intruders to leave back doors on a UNIX system.<P>
This script assumes that there are no rogue SUID or SGID files on the system the first time it is run, stores that trusted output in <B>/var/tmp</B>, and then compares the number of files found the next time the script is run. It then notifies whoever is designated in <B>ALARM_COMMAND</B> in the <B>os.sh</B> script when variations are found.<P>
<B>Should That Account Have a UID Number of 0?<P>
find_new_zeros.sh</B> in Listing 9 simply looks at <B>/etc/passwd </B>and reports any new user IDs that have a UID number of zero in an entry's third field. This is important as UNIX systems recognize any UID number of zero as the root user, regardless of the English-language name of the user ID. For obvious reasons, a new root-equivalent user ID may be a bad sign for your system security efforts. Listing 9 allows you to exempt IDs other than root from this scrutiny via the <B>TOOR_IS_OK</B> and <B>TOOR_USERIDS</B> variables.<P>
<B>Watch for Nasty Hiding Places</b><p>No self-respecting attacker is going to leave files, back doors, or other evidence where a systems administrator can easily discover them and, because UNIX allows for so many unusual characters in file and directory names, it's important to watch for new ones on your system. Although there are some strange directory entries on any UNIX system, it is unusual to have the number of these increase overnight or in any short period of time.<P>
<B>check_odd_dirs.sh</B> in Listing 10 keeps an eye out for odd directory entries, keeps a static list in <B>/var/tmp</B> and notifies the appropriate party of any unusual items found. Of course, any new such directories found should be investigated immediately.<P>
<B>Conclusion</b><p>There's always more than one way to do anything in UNIX, and we would never claim that these scripts are an exhaustive treatment of how to keep tabs on all facets of your system's security. Tripwire and TCP Wrappers are invaluable tools and will do a wonderful job on a good number of the things we have tried to highlight in our home-grown solutions.<P>
However, if time is short and a quick security fix is required, these scripts will give you a quick way to get on the road to more proactive monitoring of your systems.<P>
In addition to doing good backups, staying informed on UNIX security issues and vulnerabilities and maintaining good anecdotal knowledge of all systems you administer, and making sure you hear about bad things happening to your system before your co-workers or boss are also important aspects of the job.<P>
<p>
<h1>About the Author</h1><p>
Bob Geiger is VP of Information Security Services for info-defense.com (www.info-defense.com), a network security consultancy. A popular speaker on the security conference circuit, Bob has been working in systems administration and security for 15 years. He lives in Westchester County, New York, with wife Sandi and raging toddler Sammy and can be reached at: bgeiger@info-defense.com.<P>
John Schweitzer is a Senior Security Consultant for the information security consultancy info-defense.com. He has been coding and securing UNIX variants for almost 10 years, and honestly can't believe that he gets paid to do this for a living. John lives in Herndon, Virginia with his amazingly tolerant wife Sonya, and their three cats, who are up-and-coming Linux zealots.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
