<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i13: Starfire Administration</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2000/nov_sup2000.tar"><b class=codeListing>nov_sup2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>Starfire Administration</H1><p>
<P>Jeff Ruggeri
<P>
The Enterprise line of Sun servers has proven, over time, to be an indomitable force in large-scale UNIX installations. Despite this fact, administration of the largest enterprise server still remains something of a mystery to many Solaris sys admins. The E10000, or Starfire, has brought many interesting new dimensions to the Solaris environment that dramatically enhance the existing flexibility and power of a Sun. The goal of this article is to explain precisely what makes this machine so different, and to demystify some of the concepts and eccentricities surrounding administration of what is arguably one of the most versatile machines available today.<P>
<B>The System</b><p>The first difference between the Starfire and its enterprise line of cousins is its capacity. Physically, the Starfire is much larger than the rest of the line, and its curvy design is made to stand out in a data center full of boxy machines. Peeking under the hood proves that it doesn't just look big and fast. With support for up to 64 CPUs overall, this machine can give nearly any vendor's largest workhorse a run for its money. However, the central concept that differentiates the Starfire from any other system is that it is capable of being partitioned into several logical machines, or domains, each of which can operate as a stand-alone Solaris box. Beyond that, system boards can be dynamically added to or removed from a running domain, allowing for previously unthinkable levels of flexibility in production environments. In addition to dynamic reconfiguration, other features such as a floating network console (netcon) and a system service processor (SSP) further enrich the machine. The SSP is the hub of operations for the Starfire, actually a separate machine, from which every aspect of the environment can be controlled. Netcon is the software equivalent of a terminal concentrator, allowing access to each domain's console from anywhere.<P>
Examining the physical layout of the system is the first key to understanding the environment's flexibility. The machine is split into 16 system boards, with 8 on each side. Each system board is capable of holding 4 UltraSPARC II CPUs, 4 SBUS I/O cards, and 8 GB of memory. In addition to this, there are two Centerplane Support Boards (CSBs) that allow for netcon functionality without a network connection present on a domain. All of these boards are connected by an intelligent, high-bandwidth backplane that is capable of making point-to-point connections from any system board to any other, allowing for seamless SMP between random boards. Yet another notable feature is a required private, hub-based network that connects all of the domains, the CSBs, and the SSP. The usefulness of this will come to light shortly.<P>
The theory behind the design is elegantly simple. Domains are essentially logical entities, existing primarily in the software of the SSP. The SSP itself groups boards into domains, allows access to consoles with netcon, can power on or off any component of the system, and also controls a virtual system &#147;key&#148; with the <B>bringup</B> command. Domains can be accessed even when their network connections are not present through the CSB connection, called the JTAG, which communicates over the backplane. Even the OpenBoot PROM for each domain is contained in software on the SSP! Of course, this is where the complexity comes in. The commands that are used for controlling the Starfire environment are essentially unique, as they are not currently found anywhere else in the enterprise line. Administration requires familiarity with the SSP commands, and more specifically the <B>ssp</B> user.<P>
<B>The SSP User</b><p>The SUNWssp package, which is generally preloaded on the Ultra5 (which comes with the E10k), installs a user called <B>ssp</B>, by default. This user controls the environment variables and scripts that are used to create, destroy, and modify domains. Upon logging into this user, you will be greeted with the prompt:<P>
<pre>
Please enter SUNW_HOSTNAME:
</pre>
This is referring to the current working domain. The value of this variable is the domain to which any <B>ssp</B> commands issued will be applied, so it is important to ensure it is set correctly before you perform an action. (Fortunately, its value is displayed by default in the <B>ssp</B> user's command prompt.) To switch its value at any time, use the command:<P>
<pre>
domain_switch &lt;domainname&gt;
</pre>
Keep in mind that all of the following commands source this variable as their argument.<P>
Regarding domain naming conventions, note that using a domain's hostname as the domain name is generally not a good idea. The reasoning behind this is simple: each domain has both a private (SSP) and public Ethernet address. Giving the domain a name that differs from its actual hostname provides an easy way to ensure you're talking to the right IP address, which is invaluable when booting from the SSP or reconfiguring the domain. A good convention would be to name the domain something like hostname-dN, where N is a number, incremented for each domain.<P>
To view information about configured domains, use the command:<P>
<pre>
domain_status
</pre>
On a configured system, the output might look something like:<P>
<pre>
DOMAIN      TYPE                     PLATFORM   OS    SYSBDS
frobozz-d1  Ultra-Enterprise-10000   frood      2.7   0 1 2 3 4
</pre>
and so on, for each domain. Notice the <B>platform</B> name. This is essentially the name of your E10000, which is established at initial SSP setup, presumably to differentiate it from the scores of other E10000s littering your machine room.<P>
Of course, for any of this to work, one must first configure domains. To do this, a EEPROM image will be required for each domain. When you first uncrate the machine, Sun will provide you with an image for each domain requested. If further images ever need to be added, you can obtain a hostid and key for use with the <B>sys-id</B> utility, which will generate the EEPROMs. Once the images are successfully installed, the next step is to power up the individual system boards being used in the domain. This is accomplished with the command <B>power</B>. Its simplest uses are:<P>
<pre>
power -on -sb 0 1
power -on -cb 0
</pre>
which power up system boards 0 and 1, and CSB 0, respectively. To reverse this, use the <B>-off</B> flag. Used with no arguments, the <B>power</B> command will display the power statistics of each board in the Starfire. The <B>-all</B> flag will apply a command to every board on the system, hence its inherent danger. Fortunately, the SSP software is smart enough to recognize when domains are running and deny power requests.<P>
Once power is established, the <B>domain_create</B> command can be used to initialize a domain. Its syntax is:<P>
<pre>
domain_create -d &lt;domain name&gt; -b &lt;system   \
   boards&gt; -o &lt;os version&gt; -p &lt;platform&gt;
</pre>
To remove a domain, the command is simply:<P>
<pre>
domain_remove -d &lt;domain name&gt;
</pre>
Fortunately, this command is essentially reversible, and recreating a domain with <B>domain_create</B> will restore it as if it had not been destroyed, provided the same system boards are used in the re-creation.<P>
<B>Bringup and Netcon</b><p>Once the domain is created, how do you &#147;turn the key&#148; on the host, or access the console? The answer lies in the <B>bringup</B> and <B>netcon</B> commands. The <B>bringup</B> command will cycle a domain through a power on self-test (POST), bring it up to an OpenBoot PROM prompt, and even boot the OS if it is installed. Before issuing this command, it is wise to determine the status of the domain with the <B>check_host</B> command. This will return a simple &#147;Host is UP&#148; or &#147;Host is DOWN&#148; response, which lets you know whether it is safe to bring the machine up.<P>
The <B>bringup</B> command has a very specific set of functions that it executes, in the following order:<P>
<P>
&#149;  <B>bringup</B> runs power to check that all of the system boards in the domain are powered up. If not, it will abort with a message to this effect. <P>
&#149;  Next, it runs <B>check_host</B> to determine the status of the domain. If the domain is determined to be up, <B>bringup</B> will prompt you whether  to continue. This is useful if you are using the command to recover from a hung host; however, it is recommended that you use <B>bringup</B> for this purpose only in extreme situations.<P>
&#149;  The blacklist file, located in <B>$SSPVAR/etc/&lt;platform name&gt;/blacklist</B> is checked. This file allows components, from I/O units and CPUs to entire system boards, to be individually excluded from the domain at start time. This is a fairly useful feature, which can be manually edited.<P>
&#149;  <B>bringup</B> runs <B>hpost</B> on the domain. <B>hpost</B> is a very valuable tool, which can be run (on a domain that is not up) interactively at any time. It runs the domain through a series of tests, which can often shake out hardware errors. By default, it will run at level 16. It can be configured to run up to level 127 (which executes extremely detailed testing), with the file <B>~ssp/.postrc</B> by adding the line <B>level N</B>.<P>
&#149;  Finally, <B>bringup</B> starts the <B>obp_helper</B> and the <B>netcon_server</B>, which indicates that the domain is ready.<P>
<P>
The only important arguments to <B>bringup</B> are <B>-A on</B> or <B>-A off</B>. This is the equivalent of the <B>AutoBoot?</B> OpenBoot PROM parameter, as &#147;on&#148; will boot the system (if extant) and &#147;off&#148; will dump you to the OpenBoot PROM itself.<P>
Some mention should be made of ways to interrupt a running domain. Assuming your domain is hung, and you can't seem to get it to come back for whatever reason, the Starfire offers several commands above and beyond the traditional <B>stop-a</B> type interrupt. They are, in order of severity:<P>
<P>
<B>hostint</B> -- This forces a panic on a domain.<P>
<B>hostreset</B> -- The domain goes into a reset state, but you can then run a <B>bringup</B> on it. <P>
<B>sys_reset</B> -- This performs a hardware reset of all of the system boards in a domain, and should be used only as a last resort.<P>
<P>
The <B>bringup</B> command is, in fact, most severe of all in a hang situation.<P>
Once bringup exits (assuming success), the <B>netcon</B> command can be used to access the domain. If <B>netcon</B> is used on a domain which has not been brought up, the command will sit and idle, waiting for a connection. As previously mentioned, the current value of <B>$SUNW_HOSTNAME</B> is the domain which is accessed, meaning that multiple windows can most definitely access multiple domains, simply by using <B>domain_switch</B>. Once the command is issued, a sysadmin can interact with the system no matter what state or runlevel it is in. One caveat, however, is that when the system is not in multi-user mode, the connection can be extremely slow, as it is going over the JTAG. It does, however, grant the access needed. Once the system reaches runlevel 2, the <B>cvcd</B> is started, which allows communication between the domain and the <B>ssp</B> on the private ethernet network.<P>
Of course, since multiple users could theoretically have access to the <B>ssp</B> user at once, it follows that multiple users could try and <B>netcon</B> into the same domain at once. This could lead to some problems, but fortunately <B>netcon</B> implements a locking mechanism that only allows one user to have write access at a time. A user of <B>netcon</B> can be in unlocked write, locked write, or read only mode. Control commands for <B>netcon</B> begin with the tilde (~) as an escape character, and are as follows:<P>
<P>
<B>~#</B> -- Analogous to <B>stop-A</B> on a normal system. This will halt your system and bring it to the OpenBoot PROM. Use caution with this command. <P>
<B>~?</B> -- Shows the current status of all the open <B>netcon</B> sessions.<P>
<B>~=</B> -- Switch between the SSP private interface for the domain and the control board JTAG interface. This feature only works in private mode, when the <B>cvcd</B> is running on the host. <P>
<B>~*</B> -- Private mode. This sets Locked Write permission, closes any open <B>netcon</B> sessions, and disallows access to <B>netcon</B> from any other terminal. This is the same as the <B>-f</B> (force) flag to the <B>netcon</B> command itself. <P>
<B>~&amp;</B> -- Locked Write mode. This is the same as opening a session with the <B>-l</B> flag. <P>
<B>~@</B> -- Unlocked Write mode. Another user easily revokes this. This is the same as opening a session with the <B>-g</B> flag. <P>
 <B>~^</B> -- Read-Only mode. Releases write permission and echoes any other session with write permission to your terminal. <P>
<B>~.</B> -- Release <B>netcon</B>. This will exit the <B>netcon</B> session and return you to the command prompt.<P>
<P>
A sample output of <B>netcon</B> might look like:<P>
<pre>
frobozz-ssp01:frood-d1% netcon
trying to connect...
connected.

SUNW,Ultra-Enterprise-10000, using Network Console
OpenBoot 3.2.4, 12288 MB memory installed, Serial #00000000.
Ethernet address 0:0:00:00:00:00, Host ID: 00000000.

&lt;#0&gt; ok
</pre>
At this point, you should be in familiar territory. You can essentially treat the domain just as you would any other enterprise system. The only major difference once the domain is up comes with the dynamically reconfigurable properties of the Starfire.<P>
<B>Dynamic Reconfiguration</b><p>The feature on the Starfire, which is the most important departure from the rest of the enterprise line, is the ability to change the capacity of a running system without interrupting any services. The practical applications for this feature are almost endless, and it is limited only by I/O configuration. System boards can be allocated from one domain to another, or even removed from a domain, powered off, and removed from the system for repair! There are two methods that can be used to accomplish the task of reconfiguration. The first method is to use the <B>dr</B> command, and the other (less reliable) method is to use the <B>hostview</B> GUI interface.<P>
A brief note about <B>hostview</B>: this tool can be used to perform several actions, including modifying the aforementioned blacklist file or opening <B>netcon</B> consoles. However, it has been my experience that <B>dr</B> should always be used for reconfiguration, as <B>hostview</B> seems unreliable when it comes to modifying a domain. Board attachments or detachments often do not work, for no visible reason. While the intent is not to malign this tool, as it is useful in its own right, it is not the best tool for this particular feature of the E10k.<P>
Issuing the command <B>dr</B> will start a shell-like environment and report on what boards are physically present. It will also report which boards are currently in use by <B>$SUNW_HOSTNAME</B>, as this is the domain that will be modified. Before entering <B>dr</B>, you may want to first use <B>domain_status</B> to see what boards are being used overall on the platform. The major actions that can be performed from within <B>dr</B> are the attachment or detachment of a system board. The commands used to achieve these functions are as follows:<P>
<P>
<B>To attach an unused system board to the current domain:</B><P>
<P>
<B>init_attach &lt;sysbd&gt;</B> -- Prepare the named board for attachment. <P>
<B>complete_attach &lt;sysbd&gt;</B> -- Attaches the board to the domain, after running <B>init_attach</B>.<P>
<B>abort_attach &lt;sysbd&gt;</B> -- Aborts the attach process after a failed attach, or before <B>complete_attach</B> is run.<P>
<P>
<B>Detaching a system board:<P>
<P>
drain &lt;sysbd&gt;</B> -- Evacuates the memory on the named board. <P>
<B>complete_detach &lt;sysbd&gt;</B> -- Detaches the board from the domain, after running drain.<P>
<B>abort_detach &lt;sysbd&gt;</B> -- Aborts the detach process after a failed drain, or before <B>complete_detach</B> is run.<P>
<P>
<B>Other commands:<P>
<P>
reconfig</B> -- Run after a board attachment, this will run the Solaris <B>config</B> sequence on the domain: <B>drvconfig</B>; <B>devlinks</B>; disks; ports; tapes.<P>
<B>drshow &lt;sysbd&gt; &lt;command&gt;</B> -- Shows the status of a running <B>dr</B> command. The most important arguments are <B>drain</B> and <B>io</B>.<P>
<P>
Now for the warnings. Although attachment is relatively straightforward, and can be done without incident using any free system board, use caution when detaching a board from a running domain. The first notable issue is that running <B>drain</B> on a board is not an instantaneous process, even though the command returns immediately. Before running a <B>complete_detach</B>, the board should be examined with the command <B>drshow &lt;sysbd&gt;</B> <B>drain</B>, which shows the status of the <B>drain</B> process. <B>drain</B> actually attempts to move physical memory pages off to memory on other system boards, and attempting to detach the board before this is complete can be catastrophic. Of course, if enough free memory isn't available elsewhere on the system, the <B>drain</B> may not work!<P>
The second, more important, caveat is that a board should never be detached if it contains any I/O. While it is obvious that attempting to detach a board that contains the SCSI channel to your boot disk would be a bad thing, what is less obvious is that any I/O cards on a board may be held open by the kernel. This includes boards that you may not be using at that particular moment. Detaching a board that the system is not ready to release can lead to a panic! To be safe in these situations, use the command <B>drshow &lt;sysbd&gt; io</B>. This will tell you whether the kernel on the domain is using any I/O. In designing your domains for proper <B>dr</B> usage, the best idea is to institute a set of floater boards, which contain no I/O whatsoever -- only CPU and memory. These boards can easily be attached or detached from any system with few problems and make life much easier on an E10k, which is constantly reconfigured. Also, it is a good idea to concentrate as much I/O on the first board or two of a domain (in a multi-board domain) as possible, yet still ensure redundancy. Keeping as little I/O on the last boards of a domain is incredibly useful if you plan on swapping system boards often.<P>
<B>Conclusion</b><p>The Starfire presents several layers of complexity, which significantly expands upon the existing Sun architecture. The features presented in this article lend themselves to a coherent and, above all, reliable machine that takes the concept of uptime very seriously. The benefits of such a platform are plain to be seen. Although there are many more facets to the administration of a Starfire, I have attempted to provide you with a base arsenal of concepts and commands with which to approach this powerful environment.<P>
<p>
<h1>About the Author</h1><p>
Jeff Ruggeri is a Solaris Systems Administrator at Aetna in Middletown, CT., where he is responsible for an environment comprised of nearly 300 mission-critical Sun Enterprise servers. He has been hacking UNIX in one form or another since he was approximately 12 years old.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >


</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
