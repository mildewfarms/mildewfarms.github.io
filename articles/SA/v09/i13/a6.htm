<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v09, i13: IP Filter on Solaris</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center><table width=600 cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">

<tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2000/nov_sup2000.tar"><b class=codeListing>nov_sup2000.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
<td valign=top width=440 bgcolor="#ffffff">
<table width=100% cellpadding=15 cellspacing=0 border=0>
<tr><td valign=top>
<! -- Insert Content ------ >

<H1>IP Filter on Solaris</H1><p>
<P>Ron McCarty
<P>
If you are responsible for host or network security within your organization, then you should consider adding ipf to your network tool kit. IP filter, or ipf (<B>http://coombs.anu.edu.au/~avalon/ip-filter.html</B>), is an advanced packet filter with an easy to understand configuration, but it has some nuisances that may seem strange to those who have used other packet filtering systems. However, ipf should not be avoided because of its &#147;quirks&#148;, since they can easily be overcome. This article will give you an introduction to ipf and its rule sets, as well as its logging and administration capabilities. Ipf can also act as a Network Address Translator (NAT), but that isn't covered in this article.<P>
Ipf supports filtering on incoming and outgoing packets. Incoming packets are packets that are destined for the packet filters interface, and outbound packets are packets that have received a routing decision by the node where the packet filter is running, and would normally be placed on the outgoing interface destined to some other node.<P>
I usually prefer to filter incoming packets. The major advantage to filtering on incoming packets is increased performance. Packets that are dropped at the incoming interface do not create additional load by making a routing decision before the packet is dropped, whereas a packet that is dropped by an outgoing rule has unnecessarily used CPU processes to determine the proper interface out of which to route the packet.<P>
However, there are environments where filtering outgoing packets makes sense, such as using ipf to harden hosts that are not multi-homed, such as Web servers or workstations connected directly to the Internet. This is becoming more common with the availability of broadband in small office and home office environments.<P>
Ipf supports packet filtering for the common protocols in the TCP/IP family, including IP, TCP, UDP, and ICMP. Additionally, ipf supports advanced options, including state tables, (NAT), and fragmentation.<P>
State table support was first made popular with Checkpoint's Firewall-1. State tables maintain lists of active sessions to ensure sessions were actually generated before allowing the packet to pass. This keeps the packet filter from passing traffic that would normally allow TCP packet replies through, based on the TCP flags that can easily be spoofed by programming, or set by any number of security and hacker tools. Additionally, state tables can be used to allow extra security to be added to UDP, since UDP does not have support of established sessions.<P>
NAT support allows internal (RFC 1918) addresses to be translated to a globally unique address or multiple unique addresses. NAT is often used to connect enterprise networks to the Internet, but are also useful for connecting corporate extranets to other corporations, or to translate addresses for organizations with overlapping addresses due to corporate takeovers. My March 2000 <I>Sys Admin</I> column covered NAT in depth. Although not covered here, ipf makes a good NAT.<P>
Fragmentation support is important in environments with various frame sizes caused by having different media types, such as Ethernet and Token Ring. Some attacks are based on small fragment sizes that are not likely to be normal fragmented packets, and <B>ipf</B>, with the use of a special <B>shor</B> parameter, can also drop these special fragmented packets.<P>
<B>Installation</b><p>Solaris 2.6 was used for this article, but support for Solaris 7 was added with version 3.3 of ipf, and support for Solaris 8 was added with version 3.4. At the time of this article, the latest version of ipf is version 3.4.9 and can be downloaded via anonymous <B>ftp </B>from:<P>
<pre>
ftp://coombs.anu.edu.au/pub/net/   \
   ip-filter/ip-fil3.4.9.tar.gz
</pre>
These instructions assume the GNU C compiler <B>gcc</B>, as well as the GNU <B>make</B>; however, the Sun compiler and <B>make</B> are supported.<P>
Place the <B>ip_fil3.4.9.tar.gz</B> compressed archive in your source directory. On Solaris, I usually use the <B>/usr/share/src/</B>. As root, move to that directory for installation:<P>
<pre>
cd /usr/share/src/
</pre>
Uncompress the archive with:<P>
<pre>
gzip -d gzip-d ip_fil3.4.9.tar.gz
</pre>
Un<B>tar</B> the file with:<P>
<pre>
tar xvf ip_fil3.4.9.tar
</pre>
which will create a directory structure under <B>ip_fil3.4.9</B> in the <B>/usr/share/src/</B> directory.<P>
Move to ipf source directory structure:<P>
<pre>
cd ip_fil3.4.9 
</pre>
If you have both the GNU version of <B>make</B> and Sun's version, then be sure to read the COMPILE.Solaris2 file on using the Sun version of <B>make</B> stored in <B>/usr/ccs/bin/</B>:<P>
<pre>
make solaris
</pre>
After <B>make</B> has completed, move into the SunOS5 directory:<P>
<pre>
 cd SunOS5 
</pre>
and run:<P>
<pre>
 make package 
</pre>
which will create and install the Solaris ipf package. Additionally, it will create <B>/etc/init.d/ipfboot</B>, which is linked to <B>/etc/rc2.d/S65ipfboot</B>. The <B>/etc/rc2.d/S65ipfboot</B> script runs when the system boots. The package installation routine installs the software in <B>/opt/ipf/</B>. This directory includes the bin, examples, and man page subdirectories. If you wish to copy the man pages to the standard directory in Solaris, use:<P>
<pre>
cd /opt/ipf/man/
cp -r * /usr/share/man/
</pre>
At this point, you should be able to view the ipf man page that covers ipf and its configuration with:<P>
<pre>
man -s 5 ipf
</pre>
(Running <B>catman</B> to recreate <B>windex</B> is also a good idea.)<P>
To quickly test ipf, you can use a <B>block all</B> rule and fire up ipf to ensure that packets are being dropped. If you are remotely accessing the box, ensure you have access to the console to deactivate the rules to allow the remote access until configuration is complete.<P>
Edit the ipf configuration file <B>ipf.conf</B> with:<P>
<pre>
vi /etc/opt/ipf/ipf.conf
</pre>
and add the following lines:<P>
<pre>
block in all
block out all
</pre>
Then activate the rules with:<P>
<pre>
/etc/init.d/ipfboot start
</pre>
Any access to the host should now be blocked. Pings to the host should not be successful, and any access from the box will not work.<P>
To deactivate these rules, use:<P>
<pre>
/etc/init.d/ipfboot stop
</pre>
<B>Configuration and IPF Rules</b><p>As mentioned, ipf can block traffic based upon its direction, which makes rules easier for hosts with single network interfaces (since the interface is not necessary). This means that:<P>
<pre>
block in all
</pre>
is the same as <B>block in all</B> on le0 on a single NIC host. However, on a multi-homed box, this would block all incoming traffic, which would mean that incoming traffic on le0, le1, le2, and so on would be blocked.<P>
The major difference between ipf and other packet filtering products is its philosophy on rules -- by default, it reads through the whole set of rules before deciding to discard or allow the OS to route the packet. For anyone new to packet filtering, this may seem acceptable and easy enough to learn; however, use caution with this method because an intentional block can be allowed through by a later rule that is intended to allow other services, but inadvertently allows the &#147;bad&#148; traffic through. To bypass this default behavior, the parameter <B>quick</B> can be used with a rule, which tells ipf to execute the rule immediately, as opposed to making further decisions. The <B>quick</B> parameter makes the rule act like the packet filters that most administrators with packet filtering experience are used to seeing. The <B>quick</B> parameter follows the direction of the packet -- in or out in the packet filter rule, as I will show later.<P>
The block primitive was covered previously, and its counterpart, pass functions, is the opposite and allows traffic to pass. Assuming a single NIC system, create a rule that allows Web access to anywhere. Using vi, edit <B>/etc/opt/ipf/ipf.conf</B>, remove the previous entries, and add these:<P>
<pre>
# Allow outgoing web traffic
# This rule also allows the replies, too
# the www requests
pass out quick on le0 proto tcp from \
   10.1.1.1 to any port = 80 keep state
# Drop all other outgoing traffic
block out quick all
# block all incoming traffic
block in quick all
</pre>
Let's cover the syntax in detail using the first rule. The # represents comments. Use plenty of them, especially on systems with complicated rules, such as systems acting as firewalls. The first rule:<P>
<preP>
pass out quick on le0 proto tcp from \
   10.1.1.1 to any port = 80 keep state
</pre>
can be interpreted as:<P>
<P>
<B>pass</B> -- Allow the traffic to pass if it matches this rule.<P>
<B>out</B> -- Apply this rule to outgoing traffic. (At this point we've not specified an interface.)<P>
<B>quick</B> -- Apply the rule immediately. Do not continue reading rules (as the normal algorithm would require) to determine if there is a match later in the rule set.<P>
<B>on le0</B> -- Apply the rule to the Ethernet interface le0.<P>
<B>proto tcp</B> -- This is first portion of the filtering, based upon layer three and above. This rule applies to <B>tcp</B> traffic only (i.e., UDP and ICMP would not be matched at this point in the algorithm, so the filter would continue with the next rule).<P>
<B>from 10.1.1.1</B> -- Defines the source address for matching against the rule. On a single NIC system, this will be its own IP address, and on a multi-homed system it can be a complete network using the prefix notation such as 0.0.0.0/8.<P>
<B>to any</B> -- Defines the destination address for this rule. In this case, traffic to any IP address is allowed.<P>
<B>port = 80</B> -- Because it follows the &#147;to any destination&#148; address, this indicates the destination port: 80.<P>
<B>keep state</B> -- Maintain a table of requests so that the replies to the request will be handled in the same way that in this case is to allow (pass) the packets.<P>
<P>
This rule can be read as: Allow traffic going out Ethernet le0 with a source of address of 10.1.1.1, AND any destination address, AND a <B>tcp</B> destination port of 80, through. Additionally, allow any replies to the requests through.<P>
The rules before the previous rule drops all other traffic with <B>block out quick all</B> dropping the outgoing, and <B>block in quick all</B> dropping the incoming.<P>
As you can see, the <B>keep state primitive</B> allows rules to be quickly built without the normal hassles of having to define the matching replies to create the reply. Also, as previously mentioned, this allows &#147;simulated&#148; sessions for ICMP and UDP, which makes getting through the packet filter much more difficult since the packet will be dropped if there is not a matching &#147;request&#148; for the &#147;reply&#148;.<P>
You can now test the rule with:<P>
<pre>
/etc/init.d/ipfboot reload
</pre>
(With the current rule, you will have to test the rule using the IP address of the Web server, since we've not allowed DNS queries.)<P>
The <B>keep</B> state is so flexible, that it is very easy to match the security given by many Internet firewall appliances that simply allow connections initiated by the user, and drops incoming connects. Here is such an example:<P>
<pre>
# Allow all outgoing traffic and replies \
  to those requests
pass out quick on le0 proto tcp from any \
  to any keep state
pass out quick on le0 proto udp from any \
  to any keep state
pass out quick on le0 proto icmp from any \<
  to any keep state
# Drop all other outgoing traffic<P>
block out quick all
# block all incoming traffic
block in log quick all
</pre>
The results of <B>nmap</B> (<B>http://www.insecure.org/ \<BR>
nmap/</B>) run against the host (which received no attempts at hardening) without ipf active:<P>
<pre>
10.1.1.1

Starting nmap V. 2.12 by Fyodor \
   (fyodor@dhp.com, www.insecure.org/nmap/)

Interesting ports on freddy (10.1.1.1):

Port    State       Protocol  Service
7       open        tcp        echo
9       open        tcp        discard
13      open        tcp        daytime
19      open        tcp        chargen
21      open        tcp        ftp
23      open        tcp        telnet
25      open        tcp        smtp
37      open        tcp        time
79      open        tcp        finger
111     open        tcp        sunrpc
512     open        tcp        exec
513     open        tcp        login
514     open        tcp        shell
515     open        tcp        printer
540     open        tcp        uucp
1103    open        tcp        xaudio
4045    open        tcp        lockd
6112    open        tcp        dtspc
7100    open        tcp        font-service

nmap run completed -- 1 IP address (1 host up) scanned in 8 seconds.
</pre>
And the results with the ipf rules:<P>
<pre>
nmap 10.1.1.1

Starting nmapV. 2.12 by Fyodor \
   (fyodor@dhp.com, www.insecure.org/nmap/)
Nmap run completed -- 1 IP address \
   (0 hosts up) scanned in 30 seconds
</pre>
As shown, this immediate hardening can be very effective, and is the minimum I recommend to anyone connecting a host to the Internet on their small office network. (This policy, however, has some major weaknesses since all protocols and their appropriate weaknesses are still active on the host.)<P>
<B>Logging and Administration</b><p>ipf support logging of filtering using the log parameter in the filter rule. From the example above, the rule:<P>
<pre>
block in log quick all
</pre>
told ipf to log the entries that were <B>block by this rule</B>, which, in that case, was all outside initiated sessions. The ipf packages uses the <B>ipmon</B> program to support actual logging. By default, <B>ipmon</B> is started in the startup script and is configured to log to the syslog facility (<B>ipmon -sn</B>). As compiled, <B>ipmons</B> syslog support logs to the local0 facility, with the following levels based upon the rule:<P>
<P>
<B>info</B> -- Logged packets that are only logged, not passed or dropped. (This is useful for logging a &#147;large&#148; rule such as a large network, and then using other rules for more granular support. For example, ipf could log all access to 10.0/8, without passing or dropping the packet, and then allow other rules to allow Web access, but deny <B>ftp</B>.)<P>
<B>notice</B> -- Logged packets within a pass rule.<P>
<B>warning</B> --  Logged packets within a block rule.<P>
<B>error</B> -- Logged packets that are so short in length that they are suseptible to an attack based upon incorrect IP fragmentation.<P>
<P>
If these standard levels are not granular enough, the ipf supports additional control of the logging. For example, you need additional logging based upon certain ports or IP addresses, and you can specify the facility and level with the log level <B>facility.level</B> parameter. Here's an example to log all traffic from the 192.168.1.0/24 network to the <B>auth</B> facility at error level:<P>
<pre>
block in log level auth.error quick \
   on le0 from 192.168.1.0/24  \
   to 10.1.1.1<P>
</pre>
Remember that you have to configure syslog accordingly using the <B>syslog.conf</B> file for the logging to take place. Also, don't forget to build in rotation for any specific logging files that are not normally rotated with your standard syslog logging.<P>
In addition to syslog support, <B>ipmon</B> can also be used to view the logging in real time to the terminal. <B>ipmon</B> can be directed to display packets logged (<B>ipmon -o I</B>), logged state tables changes (<B>ipmon -o S</B>), and NAT table activity (<B>ipmon -o N</B>), or all three with <B>ipmon -a</B>.<P>
Examine the output of <B>/opt/ipf/bin/ipmon -a I</B> based upon a <B>telnet</B> session against a host running earlier port scan against the network appliance, like security policy covered above:<P>
<pre>
13/08/2000 21:11:54.378242  \
   le0 @0:1 b 192.168.1.1,1025 -&gt; \
  10.1.1.1,23 PR tcp len 20 60 -S IN
</pre>
As shown, the date, time, and interface are recorded, as well as the interface (le0). The <B>@0:1</B> identifies the group (<B>0</B>), and 1 identifies the rule number in the particular pass or block rules. This is a block rule, as shown by the <B>b</B>, which follows the <B>@0:1</B>. This means this rule was the first rule that blocks and logs the traffic. The <B>192.168.1.1,1025</B> is the source address and the destination, and the <B>10.1.1.1,23</B> is the destination address and port (<B>23 = telnet</B>). The length of the payload (<B>20</B>) and the packet (<B>60</B>) follows. Since this is a TCP packet, the final field is the flags that are set.<P>
I've not covered all the logging possibilities here, so consult the man page for <B>ipmon</B> (<B>man -s 8 ipmon</B>) -- it does a very good job of documenting the logging functions.<P>
<B>Summary</b><p>Although ipf rule base takes some getting used to, its excellent configuration file support, flexibility in filtering points in the routing process, strong logging support, and wide flavors of UNIX support, make it a good tool to add to your net admin tool box. If you support security administration across multiple flavors of UNIX, you probably won't find a better cross-platform packet filter.<P>
<p>
<h1>About the Author</h1><p>
Ronald McCarty received his bachelor's degree in Computer and Information Systems at the University of Maryland's international campus at Schwaebisch Gmuend, Germany. After completing his degree, Ronald McCarty started his network career as network administrator at the Schwaebisch Gmuend campus. Ronald McCarty works for Lucent Technologies as a senior systems engineer on a customer team responsible for a major telecommunications carrier. He spends his free time with his two best friends in the world: his daughter, Janice, and his wife, Claudia. Ron can be reached at: ronald.mccarty@gte.net.



<! -- Begin Content ------ >
<br>&nbsp;<br>
</table></center></td>
<! -- End Content ------ >

</table><!/center>
<! -- End MASTER TABLE -- >

</body></html>
