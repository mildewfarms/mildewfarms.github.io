<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i08: Open Source Build Management for Java Projects -- Part 1</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a6_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a6_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a6_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a6_l4.htm">Listing 4</a></span></td>
		<td><span class="navbarLink"><a href="a6_l5.htm">Listing 5</a></span></td>
		<td><span class="navbarLink"><a href="a6_s1.htm">Sidebar 1</a></span></td>
		<td><span class="navbarLink"><a href="a6_s2.htm">Sidebar 2</a></span></td>
		<td><a href="../../../../source/SA/2006/aug2006.tar"><b class=codeListing>aug2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1> <img src="a6.gif" width="200" height="167" align="right">Open Source Build Management for Java Projects -- Part 1 </h1>
            <p> Craig Caulfield 
          <p> The field of software engineering is now reaching a 
            stage of maturity such that developers and systems administrators have a 
            significant body of knowledge, best practices, and patterns to draw upon at 
            all stages of the development process. For example, when it comes to 
            setting up the infrastructure for a software development project, best 
            practice suggests the following elements: 
          <p>
          <ul>
            <li>There should be a central code repository 
              that represents that latest state of the project. 
            <li>Developers should have a local workspace, 
              isolated from the main development line, where they develop and test their 
              assigned tasks. When these changes are stable, they can be committed to the 
              main development line, preferably in small, regular chunks.
            <li>The project should be automatically built from source code 
              on a regular basis (possibly daily or even multiple times during the day) 
              so that any newly committed code that breaks the build can be detected and 
              rectified quickly. An automatic build also 
              means it should be possible for someone new to the project to check out a 
              fresh version from the repository, build it from sources, and end up with a 
              functioning product. 
        </ul>
            <p> In a Java development environment, implementing this 
              sort of infrastructure has typically meant using repositories such as CVS: 
          <p>
          <pre>
http://www.nongnu.org/cvs/ 
            </pre>
or Subversion:
<p>
<pre>
http://subversion.tigris.org/
</pre>
and perhaps a build management tool like CruiseControl:
<p>
<pre>
http://cruisecontrol.sourceforge.net/
</pre>
and then crafting various Ant build files to 
    explicitly orchestrate each step of the build cycle. However, anyone who 
    has had to maintain these build files over time will know that the task can 
    quickly become unwieldy.
<p> Fortunately, open source tools such as Maven 2 (<b>http://maven.apache.org</b>) can 
  help. Rather than hand-cranking an Ant build file, build administrators 
  define a sequence of Maven goals to, for example, clean out the build 
  artifacts directory, recompile the project, run the unit tests, generate 
  any documentation, and publish the results of the build. So that each goal 
  knows where to go and what to do, Maven assumes there will be a standard directory structure in much the same way the 
  J2EE specification defines a standard directory structure for Web 
  applications. When used in conjunction with build management tools such as CruiseControl, which is Maven-aware, build administrators 
  can provide their development teams with a simple but complete build 
  environment for just the cost of a low-range box on which to run it. 
<p> The purpose of these articles is to describe how to 
  create an open source Java software development build environment using 
  Maven version 2 and CruiseControl version 2.4 
  like that shown in Figure 1. In this first part, I will focus on Maven, and 
  I will cover CruiseControl next month. In my case, the build machine is an 
  unremarkable Intel box running Linux SUSE 10.0, and it's assumed that 
  the source code repository is already up and running (here, I'll be 
  using Subversion). 
<p>

<b>Maven</b>
<p> Even though every software development project is 
  unique, at a high level they all need to perform some common infrastructure 
  tasks like compiling the source code, running tests, creating metrics and 
  documentation, and deploying the final product. Naturally, there's 
  variation in detail, but these are the tasks generally done. 
<p> Across several Apache projects, it was recognized that 
  these common tasks could be abstracted in a way that provided some tangible 
  benefits. For example, having a common development structure meant 
  developers would be able to move between projects without having to learn 
  each project's specific routine for getting things done, so they 
  could become productive much sooner. Furthermore, all the rules for 
  orchestrating the steps of a build were usually captured in make files or 
  Ant build files. Maintaining these files for even a project of moderate 
  size required a certain skill and care. 
<p> In response to these and other lessons, Maven creates 
  a pattern-informed development infrastructure with these features: 
<p>
<ul>
<li>A standard directory structure is defined 
  along with a way to easily generate it. Then, across different projects, 
  everyone will know where to find the source files, the test cases, and any 
  project-specific resources, such as configuration files, images, or 
  documents. 
<li>Dependencies are managed through remote and local repositories. A remote repository is a 
  central warehouse for common dependencies like junit or the Apache Commons 
  utilities (Maven uses Ibiblio <b>http://www.ibiblio.org/maven2/</b> by default); 
  while a local repository is a developer's cached collection of 
  downloads from the remote repository. When a project declares a dependency, 
  Maven sees whether a copy is already held in the local repository; if not, 
  it will be automatically downloaded from the remote repository. 
</ul>
<p> As I'll show later, it's also possible to 
  create "internal" remote repositories where commercial or 
  proprietary products can be stored, along with any other dependencies that 
  can't be satisfied by the usual central repository. 
<p>
<ul>
<li>It is easy to create up-to-date project 
  documentation (javadoc, metrics, project information, dependencies, mailing 
  lists, repository activity, etc.) and to publish that information as a Web 
  site. Team members can quickly find project information and see what 
  everyone else is doing so there's more chance of coordinating work, 
  reusing code, sharing knowledge, and, most importantly, there are fewer 
  surprises. 
<li>Each project declares how the final 
  product will be packaged, for example, as a JAR, WAR, or EAR. Besides 
  actually creating such an artifact, the packaging declaration indicates 
  that a specific build lifecycle is followed. For JARs, the default packaging, the build lifecycle is the sequence: 
  process-resources, compile, process-test-resources, test-compile, test, 
  package, install, deploy. If any specific goal is invoked, Maven will ensure that any relevant previous goals will be 
  invoked first.
<li>In the real world, it's unlikely 
  that all development will happen within a single Maven project: there may 
  be a number of projects producing JAR files, with these perhaps being used 
  in a Web application in yet another project, and maybe some EJBs in the mix 
  as well. To Maven, this type of project structure is simply configured as 
  another type of dependency.
</ul>
<p> So, in a nutshell, Maven is the realization of a 
  number of fundamental configuration management and project management patterns. 
<p>

<b>Installing Maven </b>
<p> Download the binary Maven distribution from: 
<p>
<pre>
http://maven.apache.org
</pre>
and unpack it to a location such as <b>/usr/local/maven-2.0</b>. Then create an environment variable 
    called $MAVEN_HOME, point it to the installation directory, and add the 
    $MAVEN_HOME/bin to $PATH.
<p> Checking for the version should show if the 
  installation has been successful: 
<p>
<pre>
cruise@snagglepuss:~&gt; mvn -version
Maven version: 2.0 
</pre>

<b>Configuring Maven </b>
<p> The general behavior of Maven is controlled by a 
  settings.xml file (Listing 1), which can be placed in the user's home 
  directory for a local configuration or in the $MAVEN_HOME/conf directory 
  for global configuration. 
<p> For example, the &lt;localRepository&gt; element can 
  be used to change the default location of the locally cached repository. 
  Meanwhile, the &lt;servers&gt; element can be used to define the 
  authentication profiles Maven needs when connecting to particular servers. 
  Matching &lt;id&gt; elements in the project object model (POM, discussed 
  next) will use this authentication information when connecting to the 
  server to deploy the project documentation or connect to the internal 
  remote repository. 
<p>

<b>Creating and Configuring a Maven Project </b>
  <p> Maven uses the idea of an archetype to define a 
    standard directory structure for new projects. For example: 
  <p>
  <pre>
mvn archetype:create -DgroupId=sopwith -DartifactId=SunDeveloper
    </pre>
This command creates a Maven project called 
    SunDeveloper, a top-level package called sopwith, along with some skeleton 
    main and test source files, all inside the standard Maven directory 
    structure:
<p>
<pre>
SunDeveloper 
|-- pom.xml 
`-- src 
    |-- main 
    |   `-- java 
    |       `-- sopwith 
    |           `-- App.java 
    `-- test 
        `-- java 
            `-- sopwith 
                `-- AppTest.java 
</pre>
Besides laying out the directory structure, Maven 
    creates a project object model file (POM), pom.xml -- the single 
    source of truth for all project information. The main elements of the 
    out-of-the-box version (Listing 2) are:
<p>
<ul>
<li>The &lt;project&gt; element of the root 
  element of all POM files. 
<li>The &lt;modelVersion&gt; element 
  indicates which version of the object model this POM is using. Maven is 
  still a work-in-progress, so the first step in debugging any problems is 
  making sure that everything is at the right version level. 
<li>The &lt;groupId&gt; is a unique 
  identifier (often fully qualified) for the organization or group that 
  created the project. 
<li>The &lt;artifactId&gt;, 
  &lt;packaging&gt;, and &lt;version&gt; elements work together to name the 
  project's final product. 
</ul>
The &lt;artifactId&gt; is a unique name for the 
    product, the &lt;packaging&gt; element declares how the product will be 
    packaged (as a JAR, WAR, EAR, etc.), and the &lt;version&gt; element gives 
    the version number. The format is 
    &lt;artifactId&gt;-&lt;version&gt;.&lt;extension&gt;, so this project will 
    produce SunDeveloper- 1.0-SNAPSHOT.jar.
    <p> As mentioned before, the &lt;packaging&gt; element 
      also does double duty by indicating that a specific build lifecycle is 
      followed. If any specific goal is invoked, Maven will ensure that any 
      preceding lifecycle goals will be invoked first. 
  <p> Maintaining the build process now means working with 
    coarse-grained lifecycle goals rather than fine-grained Ant tasks. 
  <p>
  <ul>
    <li>The &lt;name&gt;, &lt;url&gt;, and 
      &lt;description&gt; elements are all used by Maven's generated 
      documentation (see the section on creating a documentation Web site for the 
      details). 
</ul>
    As you develop and refine your project by editing the 
    POM, you influence how and when Maven's goals are executed. See the 
    Maven online documentation and the XML Schema at:
    <p>
  <pre>
http://maven.apache.org/maven-v4_0_0.xsd
    </pre>
for the complete description of the project object model.
<p> The standard directory structure can be changed by 
  defining new archetypes, but unless there's a compelling reason, 
  it's best to work within Maven's bounds. One valid way in which 
  the standard directory can be changed is by adding a resources directory 
  under src/main to contain any project-specific resources such as 
  configuration files, images, or documents. In this case, the directory 
  structure would now look like: 
<p>
<pre>
SunDeveloper
|-- pom.xml 
`-- src 
    |-- main 
    |   |-- java 
    |   |   `-- sopwith 
    |   |       
     `-- App.java 
    |   `-- resources 
    |       `-- 
    instructions.txt 
    `-- test 
        `-- java 
            `-- sopwith 
                `-- AppTest.java 
</pre>
When the final project artifact (JAR, WAR, EAR, etc.) 
    is created, the contents of the resources directory will be copied to the 
    base directory.
<p>

<b>Executing Maven Goals </b>
<p> Even at this early stage, the project is ready to 
  start responding to Maven goals. But, there's something to be aware 
  of for new Maven installations -- each time Maven is invoked, it 
  checks which plug-ins it needs to execute the goal at hand and downloads 
  from the central repository anything not already held locally. Initially, 
  this can take a few minutes while Maven gets itself set up, but thereafter 
  things will happen more quickly. With this forewarning, compiling the 
  project, which at this point consists of just the skeleton main program, 
  simply means invoking the following Maven goal: 
<p>
<pre>
mvn compile 
</pre>
This single goal will compile any source files and 
    place the classes in a newly created target/classes directory. Compiling 
    and running the test cases is equally simple:
<p>
<pre>
mvn test 
</pre>
Even though Maven's goals are a convenient way 
    to execute most project tasks (see the sidebar "Some Useful Maven 
    Plug-ins" for some of these), Maven doesn't have goals for 
    everything. For example, a common requirement 
    in an automated build environment would be updating the local working copy 
    with any changes from the source code repository before starting a build, 
    and perhaps creating a tagged version if the build completes successfully.
    <p> At present, there is no Maven or native Ant task that 
      will do this. So, one solution is to create some custom Ant tasks such as 
      those in Listing 3, and then take advantage of Maven's build 
      lifecycle to make sure the tasks are invoked at the appropriate time. In my 
      case, I have bolted the Subversion update onto the validate lifecycle phase 
      as shown in the &lt;build&gt; element in Listing 4. 
  <p> Maven goals can also be executed from within your 
    favorite IDE. See Sidebar 2 for how this can be done with Eclipse. 
  <p>

    <b>Creating a Documentation Web Site </b>
  <p> Archetypes are also used to create Maven's 
    built-in documentation Web site: 
  <p>
  <pre>
mvn archetype:create -DgroupId=sopwith -DartifactId=SunDeveloperSite \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DarchetypeArtifactId=maven-archetype-site 
    </pre>
This command creates another standard directory 
    structure. For convenience, I copied the just-created site directory into 
    the main project, so my directory structure now looks like:
<p>
<pre>
SunDeveloper 
|-- pom.xml 
`-- src 
    |-- main 
    |   |-- java 
    |   |   `-- sopwith 
    |   |       `-- App.java 
    |   `-- resources 
    |       `-- instructions.txt 
    `-- site 
    |   |-- site.xml 
    |   `-- apt 
    |   `-- fml 
    |   `-- xdoc 
    `-- test 
        `-- java 
            `-- sopwith 
                `-- AppTest.java 
</pre>
Once the documentation Web site has been generated, it 
    can be customized in a number of ways:
<p>
<ul>
<li>The site's banners and menus can be 
  changed via the site descriptor file, site/site.xml (Listing 5).
<li>The site generator creates three main 
  sub-directories under the site that can be used for FAQs, technical 
  documents, and any other project-specific content. 
<li>Lots of information in the POM is used as 
  fodder for the documentation Web site. This includes the project name, URL, 
  and description, along with information about the development team members, 
  mailing lists, issue tracking system, and source control tools. Listing 4 
  has some of the usual inclusions.
</ul>
<p> The basics of Maven's documentation Web site 
  have now been created; it just needs to be fleshed out with some reports. 
  Maven knows which reports it should generate by the contents of the 
  &lt;reporting&gt; element in the POM. A typical collection is shown in 
  Listing 4. 
<p> To generate the Web site, the following command is 
  used: 
<p>
<pre>
mvn site 
</pre>
Maven generates the documentation under the target 
    directory, but naturally it can't just be left there.
<p> To then deploy the documentation Web site, the &lt;distributionManagement&gt; element is added to the POM. 
  Listing 4 shows a &lt;distributionManagement&gt; element that points to a 
  directory at /opt/maven/sites/developer on <b>http://snagglepuss</b>, which is served by Apache. As 
  mentioned previously, if a username and password are needed to connect to 
  the deployment server, they can be specified in the &lt;server&gt; element 
  of $MAVEN_HOME/conf/settings.xml. 
<p> The following command is then run to deploy the site 
  to its final destination: 
<p>
<pre>
mvn site-deploy 
</pre>
When calling this goal, an error message like 
    "The authenticity of host 'snagglepuss' can't be 
    established..." may come up. The solution is to create a directory 
    called .ssh in the user's home directory. The next time the goal is 
    called, Maven will create a known_hosts file in this new directory, and the 
    problem won't happen again.
    <p> The documentation Web site should now be up and 
      running (Figure 2).
  <p>

    <b>Setting Up and Using Repositories </b>
  <p> As mentioned before, Maven uses a number of 
    repositories to manage each project's dependencies and build 
    artifacts: 
  <p>
  <ul>
    <li>Remote repositories are central 
      warehouses for commonly used dependencies like junit and are typically 
      accessed using protocols such as http://, ftp://, scp:// or file://. By 
      default, Maven uses Ibiblio (<b>http://www.ibiblio.org/maven2</b>) as its remote 
      repository. 
    <li>The local repository is a local cache of 
      downloads from a remote repository and also contains build artifacts that 
      have not yet been released. 
</ul>
    <p> When the POM declares a required dependency, such as 
      junit in Listing 4, Maven first checks if a cached copy is held in the 
      local repository; if not, the dependency is downloaded from the remote 
      repository and then becomes available to the project. 
  <p> So that all this happens seamlessly, all Maven 
    repositories have a certain directory structure and naming convention, 
    which maps to particular parts of the &lt;dependency&gt; element in the 
    POM. The &lt;groupId&gt; tells Maven to look in a specific repository 
    directory, &lt;artifactId&gt; then points to a specific subdirectory, 
    &lt;version&gt; is yet another subdirectory down, and &lt;type&gt; points 
    to a named file of this type. Browse through <b>http://www.ibiblio.org/maven2/</b> to see this 
    directory structure in action. 
  <p> For the most part, Maven will handle any repository 
    activity for you, but there may be times when you manually need to install 
    a certain resource into your local repository. For this, Maven provides an 
    install goal: 
  <p>
  <pre>
mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; \
    -DartifactId=&lt;artefact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;
    </pre>
Afterwards, the resource will be available to your 
    project just like anything else in the local repository.
<p> Normally, developers manually add resources to their 
  local repository only when those resources can't be found in the 
  remote repository. This practice can lead to subtle version conflicts and 
  inconsistencies between developers' workspaces, because each 
  developer is actively manipulating his local repository. It also means that 
  developers can no longer clean out their local repository and rely on Maven 
  to do a complete refresh on their behalf. A better way is to create an 
  "internal" remote repository -- one that contains jars and 
  resources that can't be found in Ibiblio, that are locally created, 
  or which are commercially licensed. All developers can then point to this 
  alternative repository. 
<p> An "internal" remote repository is just a 
  local directory served by an appropriate protocol. In my case, I've 
  created a repository directory at /opt/maven/remote and set it up to be 
  served by Apache. So that Maven knows what is happening, a <b>&lt;repository&gt;</b> element is added to the 
  Maven configuration file, settings.xml (Listing 1). A &lt;repository&gt; 
  element with a matching &lt;id&gt; in the POM (Listing 4) then lets each 
  project know it has an alternative place to search for dependencies. 
<p> With the "internal" remote repository set 
  up, artifacts can be added to it so they can be drawn upon when necessary. 
  For example, to deploy the MySQL Connector/J JAR file: 
<p>
<pre>
mvn deploy:deploy-file -DgroupId=MySQL -DartifactId=MySQLConnectorJ \
  -Dversion=3.1.12 -DgeneratedPom=true -Dpackaging=jar \
  -Dfile=mysql-connector-java-3.1.12-bin.jar -DrepositoryId=internalRepository \
  -Durl=scp://snagglepuss/opt/maven/remote
</pre>

<b>Maven Wrap-Up </b>
<p> Maven is a tool that developers and build 
  administrators have long been waiting for. But, it is still a work in 
  progress, so be prepared to do some research (read: trial and error) and to 
  hit the newsgroups when things don't work as expected. Also, there 
  have been some major changes between versions 1 and 2, which means finding 
  good, version-right examples and documentation, or just any documentation 
  in general, can be a problem. Even so, Maven is worth the perseverance. 
<p> With Maven up and running, we're half way 
  towards the goal of an automated build environment. In part 2 of this 
  series, I'll show how CruiseControl completes the setup.
<p>

<b>Resources</b>
<p> Apache Maven Project -- <b>http://maven.apache.org/</b>
<p> Beck, K. 2000. <i>Extreme Programming Explained: Embrace Change</i>. Boston: Addison-Wesley. 
<p> Berczuk, S. P. and Appleton, B. 2003. <i>Software Configuration Management Patterns</i>. Boston: Addison-Wesley.
<p> Clark, M. 2004. <i>Pragmatic Project Automation: How to Build, Deploy, and Monitor Java Applications</i>. Raleigh, NC: The Pragmatic Programmers.
<p> CruiseControl -- <b>http://cruisecontrol.sourceforge.net/</b>
<p> Fowler, M. and Foemmel, M. "Continuous Integration". Available at: <b>http://www.martinfowler.com/articles/continuousIntegration.html</b> 
<p> Maraia, V. 2005. <i>The Build Master: Microsoft's Software Configuration Management Best 
  Practices</i>. Upper Saddle River: Addison-Wesley. 
<p> Massol, V. and O'Brien, T. M. 2005. <i>Maven: A Developer's Notebook</i>. Sebastopol, CA: O'Reilly Media.
<p> McConnell, S. 1996. <i>Rapid Development: Taming Wild Software Schedules</i>. 
  Redmond, WA: Microsoft Press. 
<p> O'Brien, T. M. 2006. "Maven Project Info 
  Reports Considered Dangerous". Available at: <b>http://www.oreillynet.com/onjava/blog/2006/03/maven_project_info_reports_con.html</b>
<p> 

<i>Craig Caulfield is a senior software engineer and 
  build manager for a defense and commercial software house in Perth, Western 
  Australia. He holds a Bachelor's degree in Computer Science, a 
  Master's degree in Software Engineering, and certifications in Java, 
  XML, DB2, UML, MySQL, and WebSphere. He can be contacted at: <b>ccaulfi1@bigpond.net.au</b>.</i>
</table></table>
&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
