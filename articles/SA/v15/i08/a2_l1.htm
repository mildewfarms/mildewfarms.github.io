<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i08: Listing 1 NiktoRAT</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><a href="../../../../source/SA/2006/aug2006.tar"><b class=codeListing>aug2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2> Listing 1  NiktoRAT </h2>
            <pre>
#!/usr/bin/perl
#
# NiktoRAT -- Nikto Results Analysis Tool
#
# This script will process a text Nikto results file 
# and generate a series of navigable web pages that 
# contain an HTML dump of the vulnerability URL, the HTTP
# request and response headers, and data for each finding.  
#
# Written for Nikto 1.35 reports.  Other versions may not work.
# This WILL NOT work for CSV or HTML Nikto reports.
#
# Usage:  ./niktorat.pl &lt;nikto-report.txt&gt; &lt;output-directory&gt;
#
# Brian Reilly &lt;niktorat@gmail.com&gt;
#
# Version 1.0, Initial Release
#

use Tie::File;
use File::Path;
use HTML::Entities;
use URI::Escape;

# Change the following as appropriate
$CURL_BIN = '/usr/bin/curl';
$CURL_ARGS = '-k -g'; # allow insecure SSL connections, disable URL globbing

###############################################################

$count = 0;
$foundurl = 0;

select (STDOUT);
$|  = 1 ; #Unbuffer STDOUT

#Make sure we have the right number of arguments
if ($#ARGV != 1) { die "Usage:  $0 &lt;text-nikto-report-file&gt; \
  &lt;output-directory&gt;\n\n" } 

print "\n************\n* NiktoRAT *\n************\n\n";
#Make sure we can run curl
if (! -x $CURL_BIN) { die "Cannot execute curl \
  binary: $CURL_BIN\nExiting.\n\n"; 
} 

$nikto_file = $ARGV[0];
$output_dir = $ARGV[1];

open (FH, "$nikto_file") || die \
  "ERROR:  Cannot open file $nikto_file\nExiting.\n\n";

if (! -d $output_dir) { 
  print "Directory $output_dir doesn't exist.  Would you like to \
    create it (y/n)? ";
  $bool = &lt;STDIN&gt;;
  chomp $bool;
  if ($bool =&#126; /^y$|^yes$/i) { mkpath ("$output_dir"); } 
} 

print "Reading file: $nikto_file\n";

while (&lt;FH&gt;) {
  chomp $_;
  if ($_ =&#126; /^\+ Target IP:\s+\d+/) {
     ($ip) = ($_ =&#126; /^\+ Target IP:\s+([^ ]*)/);
     print "\nIP Address Found: $ip\n";
     $foundurl = 0;
     $hostname = "";
     $port = "";
     $ssl = 0;
     push (@nomatch,$_);
   }
  elsif ($_ =&#126; /^\+ Target Hostname:\s+/) {
     ($hostname) = ($_ =&#126;/^\+ Target Hostname:\s+([^ ]*)/);
     print "Hostname Found: $hostname\n";
     push (@nomatch,$_);
  }
  elsif ($_ =&#126; /^\+ Target Port:\s+\d+/) {
    ($port) = ($_ =&#126;/\+ Target Port:\s+([^ ]*)/);
     print "Port Found:  $port\n";
     push (@nomatch,$_);
  }
  elsif ($_ =&#126;/^\+ SSL Info:\s+/) {
    $ssl = 1;
    print "SSL Info Found\n";
    push (@nomatch,$_);
}
  # make sure we have an ip address, port, and hostname before
  # parsing the URL
  elsif ( $ip &amp;&amp; $hostname &amp;&amp; $port &amp;&amp; $_ =&#126; /^\+ \//) {
      if ( $foundurl ) { 
          print '.' } else {
          $ip_and_host = "$ip:$port ($hostname:$port)";
          $host_index_url = '&lt;a href="nikframe-' . $count . '.html" \
            target="_top"&gt;' . $ip_and_host . '&lt;/a&gt;';
      push (@host_indexes, $host_index_url);
          print "Processing URLs."; 
          $foundurl++;
      } 
      $_ =&#126; (s/^\+ //);
     ($vulnpath, $vuln) = split (/\s+/,$_,2);
     $esc_vulnpath = $vulnpath;
     $esc_vulnpath =&#126; s/([^A-Za-z0-9])/\\$1/g;
     $uri_esc_vulnpath = uri_escape($vulnpath,"^A-Za-z0-9\-_.!*'&#126;?()=&amp;/");
     $html_esc_vulnpath = encode_entities($vulnpath);
     if ($ssl) { $protocol = "https://"; } else { $protocol = "http://";} 
     if (! $ssl &amp;&amp; $port == 80) { $urlport = "" } 
      elsif ($ssl &amp;&amp; $port == 443) { $urlport = "" } 
       else { $urlport = ":$port" } 
     $baseurl_ip = $protocol . $ip . $urlport;
     $url = $baseurl_ip . $vulnpath ;
     $esc_url = $baseurl_ip .  $esc_vulnpath ;
     $uri_esc_url = $baseurl_ip . $uri_esc_vulnpath ;
     $html_esc_url = $baseurl_ip . $html_esc_vulnpath ;
     &amp;makeFiles;
     $count++;
     if ($hostname ne $ip) {  
        $baseurl_hn = $protocol . $hostname . $urlport;
        $url = $baseurl_hn . $vulnpath ;
        $esc_url = $baseurl_hn . $esc_vulnpath ;
        $uri_esc_url = $baseurl_hn . $uri_esc_vulnpath ;
        $html_esc_url = $baseurl_hn . $html_esc_vulnpath ;
        &amp;makeFiles;
        $count++;
     }
  }
  else  { push(@nomatch, $_); } 
}

print "\n\nDone parsing file. \
  Results begin here: $ARGV[1]/nikframe-0.html\n\n";
close FH;

$prevcount = $count - 1 ;

open (LASTFRAME, "&gt;$output_dir/nikframe-$count.html");

print LASTFRAME &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;frameset cols="20%,80%"&gt;
&lt;frame src="nikframe-nav.html"&gt;
&lt;frame src="nikrat-unparsed.html"&gt;
&lt;/frameset&gt;
&lt;/frameset&gt;
&lt;noframes&gt;
You need a browser that supports frames.
&lt;/noframes&gt;
&lt;/html&gt;
EOF

close LASTFRAME;

open (LASTFILE, "&gt;$output_dir/nikrat-unparsed.html");

print LASTFILE &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;a href="nikframe-$prevcount.html" target="_top"&gt;Previous&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;The lines below from the Nikto report did not appear to contain \
  vulnerability 
URLs.  They should be reviewed manually.&lt;/b&gt;
&lt;br&gt;&lt;hr&gt;
&lt;br&gt;

EOF

foreach (@nomatch) { 
    chomp;
    print LASTFILE $_ . "&lt;br&gt;&lt;br&gt;\n";
}

print LASTFILE &lt;&lt;EOF;
&lt;/body&gt;
&lt;/html&gt;
EOF

close LASTFILE;

open (NIKFRAMENAV, "&gt;$output_dir/nikframe-nav.html");

print NIKFRAMENAV &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
&lt;b&gt;NiktoRAT&lt;/b&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Report File Analyzed:&lt;/b&gt;
&lt;br&gt;
$ARGV[0]
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Results Navigation:&lt;/b&gt;
&lt;br&gt;
&lt;i&gt;&lt;a href="nikframe-0.html" target="_top"&gt;All Files ($count)&lt;/a&gt;&lt;/i&gt;&lt;br&gt;
&lt;br&gt;&lt;i&gt;By HTTP Response Code&lt;/i&gt;&lt;br&gt;
EOF

foreach $http_code (@http_codes) {
  &amp;makeLastCodeFiles;
  print NIKFRAMENAV "&lt;a href=\"nikframe-$http_code-$first{$http_code}.html\" \
    target=\"_top\"&gt;$http_code ($counter{$http_code})&lt;/a&gt;&lt;br&gt;\n";
}

print NIKFRAMENAV '&lt;br&gt;&lt;i&gt;Jump to Results for Target Host&lt;/i&gt;&lt;br&gt;';

foreach (@host_indexes) { 
  print NIKFRAMENAV "$_" . '&lt;br&gt;' . "\n";
}

print NIKFRAMENAV &lt;&lt;EOF;
&lt;br&gt;&lt;i&gt;&lt;a href="nikframe-$count.html" target="_top"&gt;Unparsed 
Lines&lt;/a&gt;&lt;/i&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Contact:&lt;/b&gt; &lt;a href="mailto:niktorat\@gmail.com"&gt;niktorat\@gmail.com&lt;/a&gt;
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;

EOF

close NIKFRAMENAV;

#####################
# SUBROUTINES
#####################


sub makeFiles {

$prevcount = $count - 1 ;
$nextcount = $count + 1;

if ( $count &gt; 0 ) { 
  $prev_url = "&lt;a href=\"nikframe-$prevcount.html\" \
    target=\"_top\"&gt;Previous&lt;/a&gt;" ; 
   } else  { 
  $prev_url="";
}


open (MAIN, "&gt;$output_dir/nikframe-$count.html") || die "File open error.\n";
open (TOPFRAME, "&gt;$output_dir/nikframe-top-$count.html") || die \
  "File open error\n";

print MAIN &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;frameset cols="20%,80%"&gt;
&lt;frame src="nikframe-nav.html"&gt;
&lt;frameset rows="*,*,2*"&gt;
&lt;frame src="nikframe-top-$count.html"&gt;
&lt;frame src="nikframe-headers-$count.txt"&gt;
&lt;frame src="nikframe-bottom-$count.html"&gt;
&lt;/frameset&gt;
&lt;/frameset&gt;
&lt;noframes&gt;
You need a browser that supports frames.
&lt;/noframes&gt;
&lt;/html&gt;
EOF

close MAIN;

print TOPFRAME &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;b&gt;Browsing:  All Files&lt;/b&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;URL:&lt;/b&gt; &lt;a href="$uri_esc_url" target="_top"&gt;$html_esc_url&lt;/a&gt;
&lt;br&gt;
&lt;b&gt;Vulnerability Summary:&lt;/b&gt; $vuln
&lt;br&gt;
$prev_url &lt;a href="nikframe-$nextcount.html" target="_top"&gt;Next&lt;/a&gt;
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
EOF

close TOPFRAME;

($curl_output) = `$CURL_BIN $CURL_ARGS -s -D \
  $output_dir/nikframe-headers-$count.txt -o \
  $output_dir/nikframe-bottom-$count.html -w "%{http_code} \
  %{url_effective}" $esc_url`;

($http_code, $curl_get) = split (/\s+/,$curl_output,2);

tie @headers_file , "Tie::File", \
  "$output_dir/nikframe-headers-$count.txt" || die \
  "ERROR:  Cannot tie file \
  $output_dir/nikframe-headers-$count.txt\nExitting.\n\n";

splice @headers_file, 0, 0, "HTTP REQUEST:", "$curl_get", "", "HTTP RESPONSE:";

if ( $counter{$http_code} &gt; 1 ) {
  $prev_code_url = \
    "&lt;a href=\"nikframe-$http_code-$old_prev_page{$http_code}.html\" \
    target=\"_top\"&gt;Previous&lt;/a&gt;" ;
   } else  {
  $prev_code_url="";
}

if ( $counter{$http_code} &gt; 0 )  { 
open (PREVCODETOP, \
  "&gt;$output_dir/nikframe-top-$http_code-$prev_page{$http_code}.html") \
  || die "File open error.\n";

print PREVCODETOP &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;b&gt;Browsing:  HTTP Response Code $http_code&lt;/b&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;URL:&lt;/b&gt; &lt;a href="$prev_uri_esc_url{$http_code}" \
  target="_top"&gt;$prev_html_esc_url{$http_code}&lt;/a&gt;
&lt;br&gt;
&lt;b&gt;Vulnerability Summary:&lt;/b&gt; $prev_vuln{$http_code}
&lt;br&gt;
$prev_code_url &lt;a href="nikframe-$http_code-$count.html" \
  target="_top"&gt;Next&lt;/a&gt;
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
EOF

close PREVCODETOP;

open (CODEMAIN, "&gt;$output_dir/nikframe-$http_code-$prev_page{$http_code}.html") \
  || die "File open error.\n";

print CODEMAIN &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;frameset cols="20%,80%"&gt;
&lt;frame src="nikframe-nav.html"&gt;
&lt;frameset rows="*,*,2*"&gt;
&lt;frame src="nikframe-top-$http_code-$prev_page{$http_code}.html"&gt;
&lt;frame src="nikframe-headers-$prev_page{$http_code}.txt"&gt;
&lt;frame src="nikframe-bottom-$prev_page{$http_code}.html"&gt;
&lt;/frameset&gt;
&lt;/frameset&gt;
&lt;noframes&gt;
You need a browser that supports frames.
&lt;/noframes&gt;
&lt;/html&gt;
EOF

close CODEMAIN;

}

if (! $counter{$http_code} ) {
   push (@http_codes, $http_code);
   $first{$http_code} = $count;
}
$old_prev_page{$http_code} = $prev_page{$http_code};
$prev_vuln{$http_code} = $vuln;
$prev_uri_esc_url{$http_code} = $uri_esc_url;
$prev_html_esc_url{$http_code} = $html_esc_url;
$prev_page{$http_code} = $count;
$counter{$http_code}++;

}



sub makeLastCodeFiles { 

open (PREVCODETOP, \
  "&gt;$output_dir/nikframe-top-$http_code-$prev_page{$http_code}.html") \
  || die "File open error.\n";

print PREVCODETOP &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;b&gt;Browsing:  HTTP Response Code $http_code&lt;/b&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;URL:&lt;/b&gt; &lt;a href="$prev_uri_esc_url{$http_code}" \
  target="_top"&gt;$prev_html_esc_url{$http_code}&lt;/a&gt;
&lt;br&gt;
&lt;b&gt;Vulnerability Summary:&lt;/b&gt; $prev_vuln{$http_code}
&lt;br&gt;
&lt;a href="nikframe-$http_code-$old_prev_page{$http_code}.html" \
  target="_top"&gt;Previous&lt;/a&gt;
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
EOF

close PREVCODETOP;

open (CODEMAIN, \
  "&gt;$output_dir/nikframe-$http_code-$prev_page{$http_code}.html") \
  || die "File open error.\n";

print CODEMAIN &lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;NiktoRAT&lt;/title&gt;&lt;/head&gt;
&lt;frameset cols="20%,80%"&gt;
&lt;frame src="nikframe-nav.html"&gt;
&lt;frameset rows="*,*,2*"&gt;
&lt;frame src="nikframe-top-$http_code-$prev_page{$http_code}.html"&gt;
&lt;frame src="nikframe-headers-$prev_page{$http_code}.txt"&gt;
&lt;frame src="nikframe-bottom-$prev_page{$http_code}.html"&gt;
&lt;/frameset&gt;
&lt;/frameset&gt;
&lt;noframes&gt;
You need a browser that supports frames.
&lt;/noframes&gt;
&lt;/html&gt;
EOF

close CODEMAIN;

}
            </pre>
</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
