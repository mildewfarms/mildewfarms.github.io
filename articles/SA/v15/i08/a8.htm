<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i08: Processing User Input: Waiting for a Key Press</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a8_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2006/aug2006.tar"><b class=codeListing>aug2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Processing User Input: Waiting for a Key Press</h1>
            <p> Ed Schaefer and John Spurgeon
          <p> Dealing with user input can be challenging. Should a program wait indefinitely 
            for the user to respond? How do you design a shell script to time out after a specified period of time? 
            In this article, we present a method for determining whether a program is waiting for user input. 
            In a subsequent article, we'll discuss ways to implement a timeout feature in your shell scripts.
          <p> If you are interacting with a program that is prompting for input, it's 
            easy to see what's going on; just look at the screen. But what if you are monitoring a process 
            and can't see the program's output? How do you know whether the program is doing work 
            or is paused waiting for a response?
          <p> We encountered this problem with a program called ontape. The command <b>ontape-c</b> is used to continuously back up our database engine's logical logs. If the logs are 
            not backed up, the engine will eventually freeze when all the logs have been used. We've taken 
            several steps to make sure this doesn't happen, including monitoring the ontape process. 
            In the case of <b>ontape-c</b>, we can't simply check whether the process is running, because it might 
            be waiting for the user to press return after inserting a tape into the tape drive. This scenario 
            motivated us to find a way to determine whether a command is waiting for user input.
          <p> Solaris provides a set of tools that can be used to exercise features 
            of the /proc file system. One of these tools, pstack, prints a stack trace for each lightweight process 
            in each process. By analyzing the output of the <b>pstack</b> command, it is possible to determine whether 
            a process is waiting for user input.
          <p> If your system doesn't have the <b>pstack</b> command, you might be able 
            to use <b>truss</b> instead. With the <b>-p</b> option, <b>truss</b> interprets the arguments to <b>truss</b> as a list of process 
            ids for existing processes, takes control of each process, and begins tracing it.
          <p> We decided to use <b>pstack</b> instead of <b>truss</b>, because the <b>truss</b> command 
            continues to run until the command being traced completes. In contrast, <b>pstack</b> prints a stack trace 
            including the most recently executed system call and then exits, even if the process being traced 
            is still running. It was easier for us to analyze the output of <b>pstack</b> than to handle a <b>truss</b> command 
            that can run indefinitely.
          <p> To illustrate the technique, we've included a small C program, 
            my_ontape (Listing 1), which simulates the ontape program. The program simply prompts the 
            user to press return and then sleeps indefinitely.
          <p> When the user has not pressed return, executing <b>pstack</b> with the process 
            id of my_ontape as an argument produces the following output:
          <p>
          <pre>
2632:   /usr/local/bin/my_ontape
 dfb69900 read     (0, dfbcc0b0, 400)
 dfb91002 _filbuf  (80608f0) + 86
 dfb92fc4 fgets    (80474a0, c8, 80608f0) + d0
 0805070c main     (1, 8047594, 804759c) + 2c
 0805061c ???????? ()
            </pre>
The output of <b>pstack</b> is formatted such that the second line contains the most 
recently executed system call. Certain values vary from one execution of the program to the next. 
By observing the output, we concluded that the program is waiting for user input if the second line's 
3rd, 8th, and 10th fields equal the string "read (0, 400)". The following command generates 
a string that can be used to test for this condition:
<p>
<pre>
/usr/proc/bin/pstack 2&gt;&amp;- \
$(pgrep -f "^/usr/local/bin/my_ontape") \
| head -2 | tail -1 | cut -d' ' -f3,8,10
</pre>
The <b>pgrep</b> utility determines the process id of /usr/local/bin/my_ontape 
and uses it as an argument to <b>pstack</b>. The <b>head/tail</b> plumbing isolates the second line. And the <b>cut</b> command grabs the required fields.
<p> To test the <b>pstack</b> check, we incorporated the above code into my_ontape.ss 
  (Figure 2). If the script finds the required string it exits with true, otherwise false.
<p> Keep in mind that our example illustrates the Solaris <b>pstack</b> command 
  run against a specific executable. The output of <b>pstack</b> may vary across implementations and from 
  process to process. It is important to study <b>pstack</b> in your particular context before developing 
  code based on assumptions about the output.
<p>
<i>Ed Schaefer is a frequent contributor to Sys Admin. He is a software developer 
  and DBA for Intel's Factory Information Control Systems, IFICS, in Aloha, Oregon. Ed also 
  hosts the monthly Shell Corner column on UnixReview.com. He can be reached at: <b>shellcorner@comcast.net</b>.</i>
<p>
<i>John Spurgeon is a software developer and systems administrator for 
  Intel's Factory Information Control Systems, IFICS, in Aloha, Oregon. Outside of work, 
  he enjoys turfgrass management, triathlons, ultra-marathon cycling, and spending time with 
  his family.</i>
<p>
</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
