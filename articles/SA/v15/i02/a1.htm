<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i02: File Integrity Assessment via SSH</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a1_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a1_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a1_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2006/feb2006.tar"><b class=codeListing>feb2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a1.gif" width="200" height="167" align="right">File 
              Integrity Assessment via SSH</h1>
            <P> Hal Pomeranz
            <P> File integrity assessment (FIA) tools like Tripwire [1], Samhain 
              [2], AIDE [3], et al. are commonly deployed in organizations to 
              help assist forensic investigation after a security incident and 
              as a host-based intrusion detection tool to help detect unauthorized 
              file system changes (this also makes them useful monitoring tools 
              for existing change control procedures, though that is not the focus 
              of this article). The concept is simple: the administrator creates 
              a configuration file that lists the critical system files and directories 
              that the FIA tool should monitor, then uses the FIA tool to create 
              a database that tracks common parameters about those files, such 
              as permissions and ownerships, file size, and MAC times, along with 
              one or more cryptographic checksums over the file contents (typically 
              via common hashing algorithms like MD5, SHA-1, etc.). The FIA tool 
              is then re-run periodically, and the current state of the file system 
              is compared to the values stored for the various files in the database 
              -- if there are any discrepancies, the files are flagged as having 
              been modified and a report is generated.
            <P> The canonical problem with FIA tools, however, is protecting the 
              database generated by the FIA tool, as well as the binary for the 
              FIA tool itself, from unauthorized tampering by attackers who gain 
              root access to the system. After all, if the attacker installs a 
              rootkit and then updates the FIA database for the system to reflect 
              the new state of the file system, then the administrator may be 
              unaware of the attacker's changes. Similarly, the attacker could 
              modify the FIA tool binary to either ignore or lie about the state 
              of files installed by the attacker.
            <P> Several different strategies have been developed to try and address 
              this problem:
            <P> 
            <ul>
              <li> <I>FIA database/binary on read-only media</I> -- One way to 
                prevent tampering is to burn the FIA database and binary onto 
                a CD-ROM. The difficulty with this approach is that the FIA database 
                will need to be updated after normal system updates -- like patching 
                and configuration file changes -- and burning a new CD after each 
                system update becomes a huge hassle. 
              <li> <I>Access FIA database/binary via read-only NFS</I> -- FIA 
                databases and binaries for various systems could be stored on 
                a central, secure NFS server and exported read-only to the rest 
                of the network. Assuming you trust the security of your network, 
                this seems like a reasonable strategy for a protected enterprise 
                network because it provides the read-only functionality we're 
                looking for while still allowing a relatively sane update strategy 
                (see Jason Perlman's article in the December 2004 issue of <I>Sys 
                Admin</I> for a simple implementation of this idea [4]). 
              <li> <I>Digital signature</I> -- The commercial version of Tripwire 
                protects its FIA database by validating the digital signature 
                of the database before each use. One could imagine implementing 
                a similar strategy with an Open Source FIA tool and PGP.</ul>
                <P> 
                <P> Lately, however, I've been experimenting with a different 
                  approach. The concept is to store FIA databases and binaries 
                  for the various systems being monitored on a central, highly 
                  secure system on a protected network -- call this the FIA management 
                  server. Periodically from <B>cron</B>, we run a script on the 
                  FIA management server that uses <B>scp</B> to copy the FIA database 
                  and binary to a given system and then runs the FIA tool on that 
                  remote system via SSH. Any report output and/or updates to the 
                  FIA database can then be pulled back to the FIA management server 
                  via <B>scp</B>, and all traces of the FIA tool can then be removed 
                  from the remote system.
                <P> Thus, the FIA tool binary and database are only available 
                  to the attacker at the instant the scan is being performed. 
                  Furthermore, there is no <B>cron</B> job that can be subverted 
                  by the attacker, or any other indication on the individual systems 
                  themselves that the site is even using FIA tools to monitor 
                  their systems. And as we'll see later, there are some additional 
                  tricks we can use to further deceive attackers who may be monitoring 
                  the system closely at the time the FIA scan is being performed.
                <P> One of the issues with this approach, however, is that the 
                  FIA tool must generally run with root privileges on the system 
                  being scanned. So we're assuming here that the FIA management 
                  server has remote root access via SSH to all of the systems 
                  on the network where the FIA tool is being used. This means 
                  that the FIA management server must be protected at all costs, 
                  since anybody with root access on the FIA management server 
                  will effectively have root privileges on the entire network.
                <P> <B>Initial Setup</B>
                <P> On the FIA management server, use the <B>ssh-keygen</B> command 
                  to generate a public/private key pair for the root account. 
                  Because this authentication key will be used by a fully automated 
                  <B>cron</B> job, you will probably want to use a null passphrase 
                  when creating the key -- note, however, that this means that 
                  the private key will be stored unencrypted in the <B>.ssh</B> 
                  directory in root's homedir on the FIA management server. The 
                  <B>ssh-agent</B> utility could be used as an alternative to 
                  an unencrypted key file, but configuring <B>ssh-agent</B> for 
                  this purpose is outside the scope of this article.
                <P> Once the key pair has been generated on the FIA management 
                  server, copy the public key into <B>~root/.ssh/authorized_keys</B> 
                  on all of the systems you plan to monitor. Also make sure that 
                  you have set "<B>PermitRootLogin without-password</B>" (or "<B>PermitRootLogin 
                  nopwd</B>" if you're using the commercial version of SSH) in 
                  the <B>sshd_config</B> file on these systems, so that root logins 
                  are allowed using public-key authentication. At this point, 
                  you should verify that you can use SSH to execute commands from 
                  the FIA management server on the various remote systems without 
                  being prompted for a password or passphrase -- something like 
                  "<B>ssh &lt;remotehost&gt; uptime</B>" should be sufficient 
                  for testing purposes.
                <P> The next step is to configure the FIA tool and create the 
                  initial FIA databases for all the systems you plan to monitor. 
                  On each system, create a directory that contains the FIA tool 
                  binary and an appropriate configuration file for that system. 
                  Next, use the FIA tool to generate the initial FIA database 
                  for the machine and store that database in the same directory 
                  with the FIA tool binary and configuration file. Then, simply 
                  <B>tar</B> up the directory you just created, <B>gzip</B> it, 
                  and copy the resulting <B>tgz</B> file back to the FIA management 
                  server as <B>&lt;hostname&gt;.tgz</B>, where <B>&lt;hostname&gt;</B> 
                  is the name of remote system from which the tarball was copied.
                <P> <B>The Scripts</B>
                <P> Initially, I wrote a simple script called "<B>check</B>" that 
                  would run an FIA scan on a single remote system. Note that for 
                  this particular implementation I'm using AIDE as my FIA tool 
                  because it's (a) open source, (b) portable across many Unix 
                  flavors, and (c) easy to get up and running quickly. But you 
                  could easily port my scripts to use any other common FIA tool.
                <P> After using my script for a short period of time, however, 
                  it became clear that I needed a way to more easily update the 
                  FIA databases in the various host tarballs, as well as make 
                  configuration file changes when necessary -- this led to "<B>update</B>" 
                  and "<B>modify-config</B>" scripts. Because all of these scripts 
                  need to be configured with the same pathnames for the FIA install 
                  directory, database name, etc., I extracted all of this information 
                  into a single include file called "<B>DECL</B>" for easier maintenance.
                <P> The scripts are all fairly simple at this stage, but let's 
                  look at the <B>check</B> script (Listing 1) in more detail. 
                  After setting a sane <B>PATH</B> environment variable, the script 
                  checks its argument list. The only required argument is the 
                  name of the host to be scanned. The second argument, which is 
                  optional, is the SSH port number on the remote machine -- on 
                  many of my Internet-facing systems I run SSH on an alternate 
                  port number so I don't have to deal with constant SSH scanning 
                  and brute force password attacks on port 22. A third argument 
                  may also be added, which is the path to GNU <B>tar</B> on the 
                  remote system (it's easier to use GNU <B>tar</B> since it has 
                  built-in <B>gzip</B> functionality). The second argument defaults 
                  to port 22, and the third to <B>/bin/tar</B> (which is correct 
                  for most open source OS versions).
                <P> Next, the script declares <B>$ROOTDIR</B>, which is the directory 
                  where the per-host tarballs live as well as the <B>DECL</B> 
                  file containing other pathname declarations. After defining 
                  a temporary file for collecting script output, the <B>check</B> 
                  script then reads in the additional settings from the <B>DECL</B> 
                  file.
                <P> Let's consider the <B>DECL</B> file briefly (Listing 2). This 
                  file defines path and file names that will be used on the remote 
                  system being scanned:
                <P> 
             <ul> <li> <B>REM_DIR</B> -- The directory on the remote system where 
                the tarball will be copied and unpacked. It's important that this 
                directory <I>not</I> be one of the directories monitored by your 
                FIA tool, because the state of this directory will change every 
                time you run a scan. 
              <li> <B>REM_ARCH</B> -- The name of the tarball (REMote ARCHive 
                file) when copied to the remote system. 
              <li> <B>REM_IDIR</B> -- The name of the directory you get when the 
                tarball is unpacked. 
              <li> <B>REM_CMD</B> -- The name of the FIA binary inside of the 
                unpacked directory. 
              <li> <B>REM_CONF</B> -- The name of the FIA config file inside the 
                directory. 
              <li> <B>REM_ADB</B> -- The FIA database in the unpacked directory. 
              <li> <B>REM_NEWDB</B> -- The pathname where updated databases are 
                created by the FIA tool running on the remote system, again relative 
                to <B>$REM_DIR/$REM_IDIR</B>.</ul>
                <P> 
                <P> The default <B>DECL</B> file shown in Listing 2 has the appropriate 
                  settings to unpack the tarball as <B>/var/spool/aide</B> on 
                  the remote system and assumes that the directory will contain 
                  the binary <B>aide</B>, configuration file <B>aide.conf</B>, 
                  and database <B>aide.db</B>.
                <P> After reading all of these variable assignments from the <B>DECL</B> 
                  file, the <B>check</B> script does a quick sanity check to make 
                  sure that the tarball for the specified host exists on the FIA 
                  management server and initializes its temporary file. The main 
                  work of the script is a series of <B>ssh</B> and <B>scp</B> 
                  commands that are created using the command-line arguments to 
                  the script and the declarations in the <B>DECL</B> file. The 
                  output of all of these commands is captured in <B>$TEMPFILE</B> 
                  for later reporting.
                <P> The first <B>scp</B> merely copies the tarball to the remote 
                  system. Then there's a fairly complicated <B>ssh</B> command, 
                  but all that's really happening here is (1) a <B>cd</B> to the 
                  appropriate install directory, (2) unpacking the tarball, (3) 
                  another <B>cd</B> into the directory created by unpacking the 
                  tarball, (4) running the FIA scan, and (5) <B>tar/gzip</B>-ing 
                  the updated database created by the scan so that it can be copied 
                  back to the FIA management server. These last two steps will 
                  probably require some tweaking if you decide to use a tool other 
                  than AIDE.
                <P> AIDE supports the <B>--update</B> option, which does a normal 
                  scan and simultaneously produces a new database that reflects 
                  the current state of the system, thus making it easy to update 
                  your FIA database once you've verified that all changes in the 
                  report are "expected" (the path where the new database gets 
                  dumped is defined in your <B>aide.conf</B> file, and must also 
                  match the <B>$REM_NEWDB</B> variable in the <B>DECL</B> file). 
                  However, if your FIA tool doesn't support similar functionality 
                  (or uses a different command-line option than <B>--update</B>), 
                  you'll need to come up with another mechanism for running a 
                  scan and generating a new database and modify the script.
                <P> The next <B>scp</B> command in the script simply grabs the 
                  new tarball containing the updated FIA database created in the 
                  previous step and copies it back to the FIA management server 
                  and saves it to a file named <B>&lt;hostname&gt;.tgz-update</B>. 
                  Finally, the script uses <B>ssh</B> to remove the installation 
                  tarball and installation directory from the remote system, completely 
                  eliminating all traces of the FIA scan.
                <P> The only remaining item is to see whether there were any changes 
                  to the file system. If there were no changes, the AIDE output 
                  will contain a line of text that reads, "<B>### All files match 
                  AIDE database. Looks okay!</B>" If the script doesn't detect 
                  this line of output, then we're simply going to send the contents 
                  of <B>$TEMPFILE</B> to the standard output. Since we assume 
                  the <B>check</B> script is being run from <B>cron</B>, this 
                  should cause the script output to automatically be collected 
                  and emailed to the user the <B>cron</B> job is running as (typically 
                  root).
                <P> Actually, inside of the <B>if</B> statement we're going to 
                  use <B>awk</B> to filter out some of the uninteresting command 
                  output from <B>$TEMPFILE</B> -- specifically the output from 
                  <B>scp</B> that simply shows the file name being copied, as 
                  well as the warning banners emitted by the SSH daemon on the 
                  remote machine (which in my world begin "<B>Authorized uses 
                  only...</B>"). After that, it's just a matter of cleaning up 
                  <B>$TEMPFILE</B>.
                <P> The <B>update</B> and <B>modify-config</B> scripts are considerably 
                  simpler but follow the same basic pattern as the <B>check</B> 
                  script, so there's not much point in reviewing them here. All 
                  of the scripts, along with a sample <B>DECL</B> file, as well 
                  as some sample <B>aide.conf</B> files can be found at my Web 
                  site [5].
                <P> <B>Some Thoughts on Obfuscation</B>
                <P> One issue is that an attacker who happens to be monitoring 
                  the system at the time the scan is being run is likely to notice 
                  the scan happening. If they run <B>ps</B>, they'll see the process 
                  in the process table, and having a directory on the system called 
                  <B>/var/spool/aide</B> is also likely to be a real tip-off.
                <P> But it turns out that there's no need to use pathnames like 
                  <B>/var/spool/aide</B>, or file names like <B>aide</B>, <B>aide.conf</B>, 
                  and <B>aide.db</B>. We can simply choose some arbitrary but 
                  innocuous names to try to obscure the scan from a wary attacker. 
                  This is another reason why having all of the path names abstracted 
                  into the <B>DECL</B> file is useful -- we can easily change 
                  the names to suit our tastes, at least as long as we remember 
                  to update the file names in the host tarballs to reflect our 
                  new naming scheme.
                <P> Listing 3 shows a sample <B>DECL</B> file with a more generic 
                  set of file names. Using this <B>DECL</B> file, the AIDE directory 
                  on the remote system will end up being <B>/var/spool/config</B>, 
                  and the command line to run the AIDE scan will just be <B>./configure 
                  --config=./system.conf --update</B>. Not much to tip off our 
                  worthy attacker.
                <P> <B>Conclusion</B>
                <P> Right now the scripts presented here are merely at "proof 
                  of concept" stage, although I am actively using them to monitor 
                  a few systems for myself and some of my customers. However, 
                  further work is needed in a couple of areas:
                <P> 
           <ul>   <li> Better functionality for scheduling scans across a large number 
                of hosts, including the ability to have scans run on some sort 
                of random schedule so that they don't happen at exactly the same 
                time every day. 
              <li> Better error detection and possibly even a <B>-n</B> mode similar 
                to the make command so that you can see what the script would 
                do without actually performing the scan. I managed to destroy 
                one of my test systems when working on these scripts because a 
                mis-configured <B>DECL</B> file caused the <B>check</B> script 
                to remove the entire file system of the remote machine I was scanning 
                (remember there's an "<B>ssh ... rm -rf ...</B>" at the end of 
                that script)!</ul>
                <P> 
                <P> Still, I hope you find these scripts useful or at least hope 
                  that the ideas presented here will spur your own thinking about 
                  the use of FIA tools at your site. Feedback and updates that 
                  you make will be gratefully accepted at my email address below. 
                  Happy hunting!
                <P> <B>Notes and References</B>
                <P> 1. Tripwire home page -- <B>http://www.tripwire.com/products/index.cfm</B>
                <P> 2. Samhain home page -- <B>http://la-samhna.de/samhain/</B>
                <P> 3. AIDE home page -- <B>http://www.cs.tut.fi/~rammer/aide.html</B>
                <P> 4. Perlman, Jason. 2004. "Using FCheck". <I>Sys Admin</I>, 
                  13(12): 26-28. <B>http://www.samag.com/documents/s=9426/sam0412e/</B>
                <P> 5. Hal's AIDE info -- <B>http://www.deer-run.com/~hal/aide/</B>
                <P> <I>Hal Pomeranz (<B>hal@deer-run.com</B>) is an independent 
                  computer security consultant who has spent more time analyzing 
                  file systems than he cares to think about. No mugwumps were 
                  harmed in the creation of this article.</I></ul></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
