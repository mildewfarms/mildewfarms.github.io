<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i10: Listing 2 shadow script</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink">Listing 2</span></td>
		<td><span class="navbarLink"><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a2_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2006/oct2006.tar"><b class=codeListing>oct2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2>Listing 2  <i><b>shadow</b> script</i></h2>
<pre>
#!/bin/bash

# Set defaults
secdisk="c0t2d0"

# Figure out which disk is our "primary disk" and which is the "shadow disk"
rootdisk=`df / | awk '{print $2}' | sed 's/(\/dev\/dsk\///' | sed 's/s.$//'`
if [ $rootdisk = "c0t2d0" ]
then
   secdisk="c0t0d0"
   eeprom boot-device="disk2 disk net"
else
   eeprom boot-device="disk disk2 net"
fi

# Define variables
yes="y"

echo "Executing \"$0\" on `date`"
echo "Shadowing $rootdisk to $secdisk......."

# Get rid of any existing snapshots and unmount any associated filesystems
umount -f /extra/root
umount -f /extra/usr
umount -f /extra/var
umount -f /extra/home
fssnap -d /
fssnap -d /usr
fssnap -d /var
fssnap -d /export/home
rm /extra/snapshots/*

# Prepare the secondary disk
echo "Creating new file systems on secondary disk...."
newfs /dev/rdsk/${secdisk}s0 &lt;&lt;&lt;$yes
newfs /dev/rdsk/${secdisk}s3 &lt;&lt;&lt;$yes
newfs /dev/rdsk/${secdisk}s4 &lt;&lt;&lt;$yes
newfs /dev/rdsk/${secdisk}s6 &lt;&lt;&lt;$yes

echo "Mounting file systems on secondary disk...."
if [ ! -d /extra/root ];then mkdir /extra/root;fi
mount /dev/dsk/${secdisk}s0 /extra/root
if [ ! -d /extra/usr ];then mkdir /extra/usr;fi
mount /dev/dsk/${secdisk}s3 /extra/usr
if [ ! -d /extra/var ];then mkdir /extra/var;fi
mount /dev/dsk/${secdisk}s4 /extra/var
if [ ! -d /extra/home ];then mkdir /extra/home;fi
mount /dev/dsk/${secdisk}s6 /extra/home

# Create directory to hold backing store files if necessary
if [ ! -d /extra/snapshots ];then mkdir /extra/snapshots;fi

echo "Backing up file systems on primary disk to secondary disk...."

# Backup root slice to secondary disk
ufsdump 0f - `fssnap -o bs=/extra/snapshots /` | (cd /extra/root && \
  ufsrestore rf -)
fssnap -d /

# "Fix up" config files with hard coded disk device file names
cat /etc/vfstab | sed s/$rootdisk/$secdisk/g &gt; /extra/root/etc/vfstab
cat /etc/dumpadm.conf | sed \
  s/$rootdisk/$secdisk/g &gt; /extra/root/etc/dumpadm.conf
umount /extra/root

# Backup /usr slice to secondary disk
ufsdump 0f - `fssnap -o bs=/extra/snapshots /usr` | (cd /extra/usr && \
  ufsrestore rf -)
umount /extra/usr
fssnap -d /usr

# Backup /var slice to secondary disk
ufsdump 0f - `fssnap -o bs=/extra/snapshots /var` | (cd /extra/var && \
  ufsrestore rf -)
umount /extra/var
fssnap -d /var

# Backup /export/home slice to secondary disk
ufsdump 0f - `fssnap -o bs=/extra/snapshots /export/home` | \
  (cd /extra/home && ufsrestore rf -)
umount /extra/home
fssnap -d /export/home

# Remove backing store files
rm /extra/snapshots/*

echo "-----------------------------------------------"
</pre>
            </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
