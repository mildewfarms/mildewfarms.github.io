<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i10: Processing User Input: Timeout Mechanisms</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a10_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2006/oct2006.tar"><b class=codeListing>oct2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Processing User Input: Timeout Mechanisms</h1>
            <p> Ed Schaefer and John Spurgeon 
          <p> Waiting for a user to respond to a program that is 
            requesting input can be an issue. How do you provide a timeout mechanism in 
            your shell scripts? In this column, we consider three methods. We touch on 
            the <b>read</b> command's <b>-t</b> option; we discuss manipulating the terminal driver with the <b>stty</b> command; and we 
            present our own script, called timeout_countdown, that can kill another 
            process if the user doesn't respond within a certain amount of time. 
          <p>

            <b>Using the read Command</b>
          <p> The bash and ksh93 shells provide a timeout option for 
            the <b>read</b> command. 
            The following stub waits 5 seconds before exiting the script: 
          <p>

          <pre>
any_key=""
echo "wait 5 seconds for input"
read -t5 any_key 
if [[ -z "$any_key" ]] 
then 
   echo "User neglected to enter value 
    within 5 seconds"
   exit 1 
fi 
echo "any_key is: $any_key"
            </pre>

            <b>Manipulating the Terminal </b>
            <p> If you're using the Bourne shell or ksh88, the comp.unix.shell FAQ provides a solution that manipulates the 
              terminal driver. In a sub-process, save the terminal mode, using the <b>stty</b> command, turn off 
              canonical processing and wait. Then, grab one line of input and restore the 
              saved terminal settings: 
          <p>

          <pre>
#!/bin/ksh 


any_key=""
echo "wait 5 seconds for input"


    { 
      oldtty=$(stty -g) 
      stty -icanon min 0 time 50 
      any_key=$(head -n 1) 
      stty "$oldtty"
    } 


if [[ -z $any_key ]] 
then 
   echo "User neglected to enter value within 5 seconds"
   exit 1 
fi 
echo "any_key: is $any_key"
            </pre>
While this solution is elegant, it does not handle 
    special characters well. Since canonical mode is off, the special 
    characters are processed as individual keystrokes. For example, the back 
    space key doesn't function as a back space, and the interrupt key 
    -- after waiting the prescribed time out -- terminates the parent 
    shell. This logs you out if the parent shell was your original login shell.
<p> You can always turn off signals by changing the <b>stty</b> command, which disables processing special characters: 
<p>

<pre>
stty -icanon min 0 time 50 -isig
</pre>

<b>Using the timeout_countdown Script</b>
<p> For cases where the <b>read</b> command's <b>-t</b> option isn't supported, we developed the 
  timeout_countdown script (Listing 1). Before 
  executing a command that prompts the user for input, start the 
  timeout_countdown script in the background. If the user doesn't enter 
  input within the required timeframe, then the timeout_countdown kills its 
  parent or possibly some other specified process. If the user enters input 
  within the timeframe, another call to timeout_countdown with the stop 
  argument prevents the process from being killed; it's like disabling 
  a time bomb. The following script demonstrates the use of timeout_countdown:
<p>

   <pre>
#!/bin/ksh 
# timeout.ss: timeout_countdown demo  

echo "Enter input within 5 seconds or else!" 

timeout_countdown -t 5 start &amp;
read any_key 
timeout_countdown stop 


echo "any_key is: $any_key"
# end script 
     </pre>
With the start argument, timeout_countdown by default 
    finds the parent process id with the <b>ps -p</b> command and saves its own process id in a temporary 
    file. If the user doesn't respond, the script sleeps for the 
    specified amount of time (5 seconds in this case), kills the timeout.ss 
    process, and deletes the temporary file.
    <p> If the user responds to the read command's 
      prompt before the timeout period, then timeout_countdown is executed again 
      with the stop argument. Calling timeout_countdown with the stop argument 
      retrieves the process id of the initial timeout_countdown process and kills 
      it, thus preventing timeout.ss from being killed. 
  <p> When called with the stop argument, the 
    timeout_countdown script performs a sanity check before killing a process 
    (viz., before disabling the corresponding timeout_countdown time bomb). The 
    script uses the process id to retrieve the name of the command it's 
    about to kill and verifies that it appears to be an instance of a 
    timeout_countdown process. 
  <p> The <b>-t</b> option changes the 300 second default time frame, and the <b>-d</b> option changes the default 
    /tmp temporary file directory. Finally, by default, timeout_countdown 
    determines its parent's process id. You can overrule the default by 
    passing another process id with the <b>-p</b> option. 
  <p>

    <b>Resource</b>
  <p> Comp.unix.shell newsgroup FAQ, Part 2 -- <b>http://home.comcast.net/~j.p.h/cus-faq-2</b>
  <p>

    <i>John Spurgeon is a software developer and systems 
      administrator for Intel's Factory Information Control Systems, IFICS, 
      in Aloha, Oregon. Outside of work, he enjoys turfgrass management, 
      triathlons, ultra-marathon cycling, and spending time with his family. </i>
  <p>

    <i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. He is a software 
      developer and DBA for Intel's Factory Information Control Systems, 
      IFICS, in Aloha, Oregon. Ed also hosts the monthly Shell Corner column on 
      UnixReview.com. He can be reached at: <b>shellcorner@comcast.net</b>. </i>
  <p>

  </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
