<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i12: Korn Shell Nuances</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/dec2006.tar"><b class=codeListing>dec2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_shell.gif" width="245" height="130" align="right">Korn Shell Nuances </h1>
            <p> Ed Schaefer and John Spurgeon 
          <p> We use the Korn shell almost exclusively. This month 
            we'll investigate an eclectic mix of topics pertaining to the Korn 
            shell and related shells: 
          <p>

          <ul>
            <li> How can you tell which shell you are using?
              
            <li> What happens if the shell isn't specified on the first line of a script?
              
            <li> Setting the environment variable PS1. 
        </ul>
            <b>Which Shell Am I Using?</b>
            <p> From the command line, how can users determine which 
              shell they are currently using? Looking at the user's entry in the 
              /etc/passwd file only indicates the user's login shell, not 
              necessarily what the shell is now. 
          <p> Similarly, the environment variable SHELL or shell may 
            be set but not reset for any spawned child shells. The Solaris 9 man page 
            for ksh states that SHELL is not set at all by the shell, but is set by 
            login on some systems. 
          <p> Within a script, $0 is set to the name of the script. 
            But at the command line, $0 provides the name of the shell. For example, if 
            you are using the Korn shell, then the command "echo $0" 
            displays "-ksh". 
          <p> This method also works for the Bourne shell. Spawn a 
            Bourne shell and verify the child "sh" displays: 
          <p>

          <pre>
echo $0 
sh 
            </pre>
Unfortunately, this technique doesn't work with the shells csh and tcsh.
<p> Probably the best method of tracing which shells are 
  running is to use the <b>ps</b> command. One technique is to execute <b>ps</b> with no arguments. Echoing <b>$$</b> obtains the process id of your current shell. By 
  cross-referencing the process id with the output of <b>ps</b>, you can determine that the current 
  shell is the Bourne shell (sh). 
<p> When spawning multiple shells, you can quickly lose 
  track of which shell is spawning what. Here is a long listing process 
  command, <b>ps -l</b>: 
<p>

<pre>
F S   UID   PID  PPID  C PRI NI     ADDR    SZ    WCHAN TTY     TIME CMD 
8 S  1001 11404 11399  0  51 20 e4f35898   408 e4f35904 pts/0   0:00 ksh 
8 S  1001 16823 16822  0  51 20 e4d92158    62 e4d921c4 pts/0   0:00 sh 
8 S  1001 16822 11404  0  41 20 e3758120   291 e3758344 pts/0   0:00 csh 
8 S  1001 16824 16823  0  51 20 e3755118   408 e3755184 pts/0   0:00 ksh 
</pre>
In the above example, tracing the parent id, PPID, 
    tells you that parent shell ksh, PID 11404, spawned a csh followed by sh, 
    followed by another ksh.
<p> Executing <b>ps -p $$</b> lists only data from the current process id. The last 
  line contains the current shell: 
<p>

<pre>
   PID TTY      TIME CMD 
 16824 pts/0    0:00 ksh 
</pre>
A script can use a variety of tools to parse the output of <b>ps</b> and 
    pick out the shell. In the following example, the <b>xargs</b> command spits out all the words 
    on a continuous line, and the <b>awk</b> command grabs the last field:
    <p>

  <pre>
ps -p $$ | xargs | awk ' { print $NF } ' 
    </pre>
If you prefer to eliminate xargs and its plumbing, 
    save the last field of every line read, and print only the last one at the 
    end of the input:
<p>

<pre>
ps -p $$| awk ' { lf=$NF } END { print lf } ' 
</pre>
Alternatively, if your <b>ps</b> command supports the <b>-o</b> format option, execute <b>ps</b> with the <b>comm</b> format:
<p>

<pre>
ps -o comm -p $$ 
</pre>
The output is:
<p>

<pre>
COMMAND 
ksh 
</pre>
The <b>comm</b> format displays only the command being executed -- ksh in this case. Now, by using the formatting 
    option, simply grab the last line to obtain the shell:
<p>

<pre>
ps -o comm -p $$ | tail -1 
</pre>

<b>Specifying a Shell on the First Line of a Script </b>
<p> One of the first lessons a new shell programmer learns 
  is not to rely on the default environment. It's always a good idea, 
  for example, to invoke the shell of choice on the first line of a script 
  like this: 
<p>

<pre>
#!/bin/ksh 
</pre>
Not only must the shell specification be on the first 
    line, but the "#" character must be in the first column. What 
    happens if these conditions are not met?
    <p> A simple test script illustrates the effect. To 
      begin, invoke the Bourne shell from the command line, so the script is 
      interpreted by sh if a shell is not explicitly specified on the first line 
      of the script. Next, place the following commands in a script: 
  <p>

  <pre>
#!/bin/ksh 
echo $(ps -p $$) 
    </pre>
Executing the script produces the following output on our system:
<p>

<pre>
PID TTY TIME CMD 16057 pts/3 0:00 test.ss 
</pre>
Next, try placing a comment on the first line, so the script looks something like this:
<p>

<pre>
# Doh! 
#/bin/ksh 
echo $(ps -p $$) 
</pre>
Execute the script again, and this error displays:
<p>

<pre>
./test.ss: syntax error at line 3: '(' unexpected 
</pre>
The problem is that the Bourne shell is interpreting 
    the script instead of the Korn, and the <b>ksh</b> command substitution syntax <b>$()</b> is not supported by sh. The same thing happens if white 
    space precedes the string <b>#/bin/ksh</b> on the first line of the script.
    <p> Since many Korn shell scripts appear to work fine when 
      interpreted by the Bourne shell, problems with where the shell 
      specification is located may not always be obvious. We learned this the 
      hard way. 
  <p>

    <b>Setting the Primary Prompt String</b>
  <p> Using the environment variable PS1, users can create a 
    dynamic prompt string. Here's a common example using Korn shell 
    environmental variables: 
  <p>

  <pre>
export PS1='$LOGNAME@$SYSNAME:$PWD'&quot;:&gt; &quot;
    </pre>
Since environmental variable PWD is dynamically set by the <b>cd</b> command, 
    each time the directory changes, our PS1 displays the system name, the user 
    name, and the current working directory.
<p> According to Bolsky and Korn, the "ksh performs 
  parameter expansion, arithmetic expansion, and command substitution on the 
  value of PS1 each time before displaying the prompt". However, not 
  all implementations of the Korn shell provide all of these features. 
<p> The version of the Korn shell we use most often 
  performs parameter expansion but not command substitution. Under these 
  conditions, suppose we want the prompt string to only display the last two 
  directories of the current working directory's full pathname. For 
  example, if PWD were: 
<p>

<pre>
/home/eds/jspurgeo/myentry/src 
</pre>
we only want to see:
<p>

<pre>
myentry/src 
</pre>
Here's one way to solve the problem:
<p>

<pre>
export PS1='${PWD##/*/*}${PWD#${PWD%/*/*}} &gt;' 
</pre>
To simplify the explanation, we break the solution into three pieces:
<p>

<ul>
<li> With <b>${PWD%/*/*}</b> -- The % operator matches the end of the PWD 
  variable for everything between two slashes. This leaves an intermediate 
  string, which is actually what should be deleted.
  
<li> Match the beginning of the PWD directory 
  with the intermediate string using the # operator: <b>${PWD#${PWD%/*/*}}</b>, which deletes the start of the string leaving only the last two directories.
  
<li> The second step doesn't solve the 
  special case where PWD is less than two directories, that is, <b>/tmp, /</b>. So, we perform a final 
  match using the ## operator:
  <pre>
${PWD##/*/*}${PWD#${PWD%/*/*}} 
    </pre>
  If the PWD string contains two or less slashes, don't delete anything. 
</ul>
<p>

<b>References </b>
<p> Bolsky, Morris I., David G. Korn. 1995. <i>The New Kornshell Command and 
  Programming Language</i>. Upper Saddle River, NJ: Prentice Hall PTR. 
<p>

<i>John Spurgeon is a software developer and systems 
  administrator for Intel's Factory Information Control Systems, IFICS, 
  in Aloha, Oregon. He is currently preparing to ride a single-speed bicycle 
  in Race Across America in 2007. </i>
<p>

<i>Ed Schaefer is a frequent contributor to </i>Sys Admin<i>. He is a software 
  developer and DBA for Intel's Factory Information Control Systems, 
  IFICS, in Aloha, Oregon. Ed also hosts the monthly Shell Corner column on 
  UnixReview.com. He can be reached at: <b>shellcorner@comcast.net</b>.</i>
<p>

</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
