<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i12: Writing Email Auto-Responders </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2006/dec2006.tar"><b class=codeListing>dec2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a4.gif" width="200" height="167" align="right">Writing Email Auto-Responders </h1>
            <p> Hal Pomeranz 
          <p> Email auto-responders are a quick and easy way to 
            extend the functionality of your email system. They can provide instant 
            feedback for potential customers, help guide existing customers toward 
            appropriate support resources, interface with CRM and helpdesk systems, and 
            just generally alleviate a lot of grunt work that would otherwise have to 
            be done by a human being. However, these programs typically run with 
            elevated privileges so extreme care must be taken when implementing such a 
            system. 
          <p> This article covers the basics of writing a simple 
            auto-responder program and provides working Perl code that you can use as a 
            template for your own auto-responders. Along the way I'll also go 
            into some detail of the pitfalls you face when developing these kinds of 
            email auto-responders, which should help when you're trying to write 
            such a system on your own. The Perl code is so trivial that it's 
            easily ported to your preferred programming language, but I find Perl 
            particularly effective for this task because it is such a good text 
            manipulation language. 
          <p>

            <b>High-Level Overview</b>
          <p> Auto-responder programs are generally invoked via an alias, such as:
          <p> 

          <pre>
sales: |/usr/local/bin/info 
            </pre>
You may also specify command-line arguments to the 
    auto-responder program as part of the alias, but a difficulty is that these 
    command-line arguments are hard-coded for each alias and do not vary on a 
    per-message basis. Still, command-line arguments are sometimes useful. For 
    example, we might use the same auto-responder program for two different 
    aliases, but change the content of the outgoing reply message by specifying 
    a different directory of attachments in each alias:
<p>

<pre>
sales: &quot;|/usr/local/bin/info -d /var/attach/sales&quot; 
support: &quot;|/usr/local/bin/info -d /var/attach/support&quot;
</pre>
Note the use of double quotes to group the 
    command-line arguments with the rest of the alias.
<p> The program invoked by the alias generally runs with 
  the privileges of the mail server (MTA) process, typically root. Thus, it 
  is extremely important to code these auto-responders carefully to avoid 
  both programmer error and exploits resulting from malicious user input. 
  Note that the standard Sendmail distribution includes "<b>smrsh</b>" (the SendMail 
  Restricted SHell), a safer execution 
  environment for these kinds of aliases, but configuring <b>smrsh</b> is outside of the scope of this article. 
<p> Auto-responder programs should exit with an exit 
  status of zero, unless an error has occurred. If you don't explicitly 
  exit with zero status, you will typically see <b>"Unknown mailer error"</b> messages in your 
  postmaster email and mail server logs. 
<p>

<b>Parsing the Incoming Message</b>
<p> The auto-responder message will be handed the 
  incoming message via its standard input. The incoming message will be in 
  the typical "Unix mailbox" format, which you can think of as 
  having three major components. The first line of the incoming message will 
  be information from the message <b>envelope</b> -- typically the sender address and a time/date stamp. Following the envelope information will be a variable 
  number of lines of mail headers. The header 
  information is complete when you encounter a blank line. After the blank 
  line, all other lines in the message are considered to be part of the 
  message body. 
<p> Here is some simple Perl code to break the incoming 
  message into its component chunks:
<p>

<pre>
$envelope = &lt;STDIN&gt;; 

while (&lt;STDIN&gt;) { 
    last if (/^$/);       # look for blank line 
    push(@headers, $_); 
} 

@msg_body = &lt;STDIN&gt;; 
</pre>
Actually, if you're concerned that the incoming 
    message might contain large attachments, you may not want to 
    "slurp" the entire body of the 
    message into memory as we do on the last line of the example above. In 
    fact, in most cases auto-responder programs can safely ignore the body of 
    the incoming message entirely. The exceptions 
    would be programs like mailing list managers that are looking for commands (subscribe, unsubscribe, etc.) embedded in the body of 
    the email messages. But for simple auto-responder programs, this 
    isn't an issue.
    <p>

    <b>Dealing with Headers</b>
  <p> The initial line of envelope information generally 
    looks like <b>&quot;From &lt;<i>sender</i>&gt; &lt;<i>date</i>&gt;&quot;</b>. 
    For example: 
  <p>

  <pre>
From hal@deer-run.com Tue Sep 26 07:36:45 2006 
    </pre>
Note that the envelope line uses <b>&quot;From&lt;<i>space</i>&gt;&quot;</b>, which is different from 
    the <b>&quot;From: &quot; (&quot;From&lt;<i>colon</i>&gt;&lt;<i>space</i>&gt;&quot;</b>) header found later in the header lines. Really the only thing 
    interesting in the envelope line is the sender email address, which we can extract easily as follows:
    <p>

  <pre>
$envelope = &lt;STDIN&gt;; 
($sender_addr) = $envelope =~ /^From\s+(\S+)/; 
    </pre>
Here we're exploiting the fact that the Perl 
    pattern match operator, when used in a list context, returns a list of the 
    sub-expressions (things in parentheses) in the regular expression.
<p> The remaining headers are of the form <b>&quot;&lt;<i>header</i>&gt;: &lt;<i>value</i>&gt;&quot;</b>, as in: 
<p>

<pre>
From: Hal Pomeranz &lt;hal@deer-run.com&gt;
</pre>
Actually you are allowed to have multi-line headers such as:
<p>

<pre>
Received: from somehost.example.com (...) 
        by mail.deer-run.com (...) ... 
        for &lt;hal@deer-run.com&gt;; ... 
</pre>
Notice that all lines after the first line of the 
    multi-line header must begin with whitespace.
<p> But which headers are significant or important? 
  Obviously, for an auto-responder you must work out the sender address you want your reply to go to. In my auto-responders, I 
  generally will only reply to the sender address found in the envelope. Yes, the <b>From:</b> header is supposed to contain the sender's address and there may even be a <b>Reply-to:</b> header with a different 
  email address where you should direct responses (RFC2822 says that you 
  SHOULD obey the <b>Reply-to:</b> header, but it doesn't say that you MUST do so). However, as we 
  will see shortly, forging email headers is trivial. Forged headers are one 
  common vector for malicious outsiders who are trying to exploit your 
  auto-responder program. It is just slightly more difficult to forge the 
  envelope information, and so you may choose to regard this information as 
  more trustworthy. Wherever you take the sender address from, you should 
  still carefully verify this address using the techniques we will discuss shortly. 
<p> One header that may be useful to note is the <b>Precedence:</b> header. This 
  header was originally created in Sendmail as a mechanism for ordering the 
  mail queue so that more important messages got delivered first. However, 
  other software -- particularly mailing list management software 
  -- has adopted this header to tag traffic 
  generated via a mailing list or other bulk email program. In general, you 
  would like your auto-responder to avoid spamming large Internet mailing 
  lists, so you would probably like to recognize the <b>Precedence:</b> tags <b>list</b>, <b>junk</b>, or <b>bulk</b> and simply not reply if you find one of them. 
<p>

<b>Sanity Checking Sender Addresses</b>
<p> The biggest worry you have with these sorts of 
  auto-responder programs is a malicious user attempting to inject shell 
  commands and shell metacharacters into the sender address in order to 
  trigger bad behavior in your auto-responder program. One simple approach is 
  to just filter for obviously bad characters: 
<p>

<pre>
die &quot;Hostile address: $sender_addr\n&quot;
    if ($sender_addr =~ /[&lt;&gt;|&amp;;\\]/); 
</pre>
Actually, the right-hand side of an email address must 
    be a valid domain name or something that looks like a fully qualified 
    hostname. This means that the right-hand side of the email address should 
    only contain alphanumeric characters, period, and hyphen. Thus, we can make 
    our filtering expression a bit more aggressive:
<p>

<pre>
die &quot;Hostile address: $sender_addr\n&quot;
    unless ($sender_addr =~ /^[^&lt;&gt;|&amp;;\\]+@[-\w.]+$/); 
</pre>
So here we're saying that everything to the left 
    of the <b>@</b> sign cannot contain any of the following characters: <b>&lt;</b>, <b>&gt;</b>, <b>|</b>, <b>&amp;</b>, <b>;</b>, and <b>\</b>. On the right-hand side of the <b>@</b> sign we have to have 
    something that looks like a valid domain name or hostname. While this 
    doesn't cover every possible valid email address, it's 
    "good enough" for 99% of the email addresses you'll 
    encounter on the modern Internet, while still filtering out the bad stuff 
    we're trying to avoid.
    <p> The other thing you want to avoid is generating an 
      auto-responder reply to somebody else's auto-responder or to an error 
      message from another mail server. Otherwise, you run the risk of getting 
      into an endless "shouting match" between two auto-responder 
      programs that are mindlessly firing emails back and forth to one another. 
      Auto-responder messages and mail system error messages are supposed to use 
      a sender address of <b>MAILER-DAEMON</b>, often represented simply as the sender address <b>&lt;&gt;</b>. When we receive and 
      email from this sender address, our auto-responder should simply exit 
      without replying. Also, when we generate a reply to a legitimate email 
      address, we should make sure our messages go out using <b>MAILER-DAEMON</b> as the message 
      sender. 
  <p> With all of this in mind, here's a slightly updated version of our original example: 
  <p>

  <pre>
$envelope = &lt;STDIN&gt;; 
($sender_addr) = $envelope =~ /^From\s+(\S+)/; 
exit(0) if ($sender_addr eq '&lt;&gt;' || 
            $sender_addr =~ /^mailer-daemon/i) 
die &quot;Hostile address: $sender_addr\n&quot; 
    unless ($sender_addr =~ /^[^&lt;&gt;|&amp;;\\]+@[-\w.]+$/); 

while (&lt;STDIN&gt;) { 
    last if (/^$/); 
    exit(0) if (/^Precedence:\s+(list|junk|bulk)/); 
    push(@headers, $_); 
} 
    </pre>

    <b>Generating the Outgoing Message</b>
    <p> Now that we've safely gathered the 
      sender's email address for our reply and have parsed through the 
      header information, it's time to think about actually generating the 
      response email. I find that the easiest thing to do is to simply invoke the <b>sendmail</b> binary 
      directly and feed the outgoing email into the <b>sendmail</b> process on the standard input (though I'm using 
      Sendmail for this example, the principles are the same for other mail 
      systems). One of the advantages to this approach is that it allows you to 
      generate your own custom mail headers. 
  <p> You could use the standard Perl <b>open()</b> syntax to start the 
    Sendmail process: 
  <p>

  <pre>
open(MAIL, 
     &quot;|/usr/sbin/sendmail -f '&lt;&gt;' $sender_addr&quot;); 
    </pre>
Note the use of <b>-f '&lt;&gt;'</b> to specify the sender address for 
    the envelope of our outgoing email message. Our <b>$sender_addr</b> is specified on the 
    command line as the recipient of the email message -- whatever you put 
    in the <b>To:</b> header 
    in the message itself doesn't matter.
    <p> However, the problem with this syntax is that the 
      command line you specify in the <b>open()</b> call first gets passed to the shell, which means that if 
      we've somehow failed to filter out all of the dangerous shell 
      metacharacters from <b>$sender_addr</b> we could be opening ourselves up for a possible 
      compromise. If you're really paranoid like I am, you can use the 
      following alternate syntax to accomplish the same goal without ever 
      invoking the shell: 
  <p>

  <pre>
$pid = open(MAIL, &quot;|-&quot;); 

# The child executes this block. 
unless ($pid) { 
    exec(/usr/sbin/sendmail, 
         '-f', '&lt;&gt;', $sender_addr); 
    die &quot;exec() failed: $!\n&quot;; 
} 

# If we get here, we're the parent process. 
die &quot;fork() failed: $!\n&quot; unless (defined($pid)); 
    </pre>
The <b>open(..., "|-")</b> tells Perl to <b>fork()</b>, which means to make an 
    exact duplicate copy (usually referred to as a <b>child process</b>) of the original process (the <b>parent</b>). Both processes continue 
    executing from the instant after the <b>open()</b> call. However, in the parent process the <b>open()</b> call returns the non-zero PID 
    of the child process (<b>undef</b> is returned if the <b>fork()</b> fails for some reason). In the child process the <b>open()</b> call returns 0.
    <p> In the example above, the child process recognizes 
      this return value and calls <b>exec()</b>, which causes the child process to go away and be replaced 
      by the <b>sendmail</b> command line specified in the <b>exec()</b> call. Specifying the <b>sendmail</b> command line as a list of separate arguments is a Perl 
      peculiarity that forces <b>exec()</b> not to invoke the shell, but instead simply run our 
      command line directly. 
  <p> The other important detail of the <b>open(..., &quot;|-&quot;)</b> syntax is 
    that the file handle created in the parent process (<b>MAIL</b> in our example) becomes the 
    standard input of the child process -- even after the <b>exec()</b> call replaces the 
    original child process with the new <b>sendmail</b> process. So we can compose our outgoing email message by 
    simply writing data to the <b>MAIL</b> file handle, just as if we had used the normal Perl <b>open()</b> syntax. When composing 
    the outgoing email message, you need to specify your mail headers (<b>From:</b>, <b>To:</b>, <b>Subject:</b>, etc.), followed by a blank line, followed by 
    whatever message body you wish to send. For example: 
  <p>

  <pre>
print MAIL&lt;&lt;&quot;EoMessage&quot;; 
From: Santa@Northpole.com 
To: Little Elf &lt;$sender_addr&gt;<br> 
Subject: You'd better watch out! 

You've been a naughty, naughty child this year! 
EoMessage 

close(MAIL); 
exit(0); 
    </pre>
You can absolutely make up any header information or 
    other message content you wish, which is why I'm so dubious about 
    headers like <b>From:</b> and <b>Reply-to:</b> in 
    incoming messages received by my auto responders. Note that if you 
    don't include a <b>Date:</b> or <b>Message-Id:</b> header, they will typically be added for you automatically 
    by your mail system.
    <p> When you're done composing the outgoing email 
      message, simply <b>close()</b> the <b>MAIL</b> file handle, which in turn closes the standard input in the child process 
      and causes <b>sendmail</b> to send the outgoing email and exit. You may then <b>exit(0)</b> in the parent process. 
  <p>

    <b>Wrapping Up </b>
  <p> For a somewhat more interesting example, please see 
    Listing 1, which is the code for a little auto-responder I wrote to let 
    people know that a particular user has left the company and optionally what 
    his new email address is. The standard invocation for the program is: 
  <p>
 
  <pre>
smith: &quot;|/usr/local/bin/natabot smith@other.org&quot;
    </pre>
The email address argument is optional -- if 
    provided, the outgoing auto-reply tells the sender that this is the new 
    email address for the user he was trying to reach. Also note that the 
    auto-responder includes a copy of the original email in the outgoing 
    response, just in case the sender doesn't automatically make copies 
    of his outgoing email.
<p> Beyond this simple example, it's really a case 
  of "the sky's the limit". Your auto-responder can 
  interact with external databases, just like the Unix vacation program keeps 
  track of sender email addresses in a database so that it doesn't 
  reply to a given mailbox more than once per week. Or the auto-responder can 
  automatically open up a support ticket in your helpdesk software or 
  generate a "potential sales lead" notice in the Sales CRM 
  system for your company. You can use MIME encoding tools from the CPAN and 
  other sources to send binary attachments with your auto-responder messages. 
  Or you can embed commands in the incoming email message and have the 
  auto-responder parse the message and take various actions (I recommend at 
  least using a digital signature technology like GPG for validation if you 
  contemplate something like this). Once you've got the basics down, 
  this really is quite a powerful tool to have at your disposal. Happy 
  coding! 
<p>

<i>Hal Pomeranz (<b>hal@deer-run.com</b>) is really just a very clever email auto-responder program that sometimes masquerades an independent consultant and the Technical Editor for </i>Sys Admin<i> magazine.</i>
<p>

</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
