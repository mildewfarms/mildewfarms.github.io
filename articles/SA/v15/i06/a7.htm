<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i06: Platform-Independent Stress Testing from the Command Line </TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a7_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a7_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a7_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a7_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a7_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a7_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink"><a href="a7_l4.htm">Listing 4</a></span></td>
		<td><a href="../../../../source/SA/2006/jun2006.tar"><b class=codeListing>jun2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a7.gif" width="200" height="167" align="right">Platform-Independent Stress Testing from the Command Line </h1>
          Alan M. Berg
          <p> This article will describe the use of various open 
            source tools for scripting without any specific platform dependences. 
            Specifically, I will show how to plumb the Ant [1] and Jmeter [2] tools 
            together via the command line, generating HTML reports. I will also show 
            how to use email, scp, and file renaming. This information should allow you 
            to take the coding further and apply Ant to 
            other problem domains. Platform-independent scripting is a very handy tool 
            in a systems administrator's arsenal. 
        <p> Ant is a task-based tool that reads in an XML 
          file(s), known as a build file, and performs specific tasks based on the 
          build. Example tasks include the archiving of directory structures, 
          emailing, secure copying, compiling token replacement, deploying Web 
          applications, etc. Ant was originally billed as a tool to take over the 
          role of the <b>make</b> command. 
          However, Ant has spread its roots further to encapsulate whole realms of 
          functionality. The quick growth of tasks can be attributed to the fact that 
          Ant is easily extendable. Tasks are written in Java and can be enabled via 
          the build file. 
        <p> Ant's built-in features allow the following 
          types of tasks: 
          
        <ul>
          1. Archiving and file. These tasks include: bzip, 
          zip, jar, war, copy, delete, mkdir.
          <p> 2. Programming tasks, such as javac, cvs. 
          <p> 3. Remote tasks, such as FTP, Rexec, Scp, mail, sql. 
          <p> 4. Logging, such as the record task. 
          <p> 5. Extensions. Ant tasks are Java classes that are 
            relatively easy to write.
        </ul>
          <p> There are numerous examples of contributed tasks; we 
            will take advantage of two of these: the Jmeter and Ant contribution 
            extensions. Note that certain operating system features do exist in Ant, 
            specifically file permission and exec tasks. Please be careful to check 
            these tasks against your target deployments. 
        <p> Jmeter is a stress-testing and assertion tool. Jmeter 
          has a GUI for building test plans and can be run from the command line or 
          via an extended Ant task. A typical PC can run 500-1000 concurrent threads 
          sending HTTP requests. It is worth noting that for a receiving system a 
          thread can be more active than a typical user. Five hundred threads are 
          probably more like 1500 real users. Jmeter can fire off requests to http, 
          ftp, jdbc (database), soap (http with xml mixed in), LDAP, JMS (message 
          queues), and mail. This list of target protocols is a typical mix for 
          enterprise-wide infrastructures. 
        <p> Ant, Jmeter, Tomcat, and Apache have been developed 
          under the Apache project [3] umbrella. The Ant and Jmeter tools are written 
          in Java and, thanks to the JVM, can run on any Java-enabled operating 
          system. The supported systems include Solaris, Linux, AIX, HP-UX, BSD, 
          Windows, and Apple. 
        <p>

          <b>Stress-Testing Basics </b>
        <p> So, you want to hit your systems hard and see what 
          happens. Stress testing is an excellent tool for gaining confidence in a 
          given infrastructure's ability to survive the onset of the end user. 
          In general, there are three scenarios. The first is the acceleration of a 
          burn period for new hardware. On one occasion, I had the pleasure of seeing 
          a system fail five times all due to motherboard issues. By the application 
          of a focused stress test, the motherboard issue would have been found 
          before the hardware had reached production status. Thus stress testing 
          would have avoided a significant number of help desk calls from irate 
          clients. 
        <p> The second scenario is that of knocking systems that 
          have been patched. Before deploying a patch to production, we first update 
          an acceptance environment and, if required, again hit the systems hard. 
          Logging is vigorously analyzed for those strange exception numbers that 
          occur when systems start to fail. The third and most difficult to achieve 
          situation is that of both stress testing and performing functional tests 
          within a full software cycle. Figure 1 defines one possible solution. 
        <p> Automated scripts run tests against development, 
          acceptance, and production. The scripts are called via cron jobs or 
          scheduled tasks, and the generated html-formatted results are sent by scp 
          to a directory on a results server. Emails are sent to a distribution list 
          of interested parties. The advantage of automation is the capturing of 
          bogus code, patch, or intermittent errors early on in the cycle. 
          Furthermore, this process provides you, as a systems administrator, with 
          the feeling of orderly control over a potentially chaotic environment. By 
          the end of this article, you should have enough background knowledge to be 
          able to consider the pros and cons of building this structure based on Ant. 
        <p>

          <b>What Is to Come? </b>
        <p> The source code accompanying this article contains 
          four example build files. The first example sends email and has the purpose 
          of introducing you to the build file structure. The second example archives 
          log files from a directory structure and sends the archive by email. The 
          purpose of the second example is to show how instantaneous it is to script 
          for complex tasks. Further, the example highlights the relevance of using 
          Ant in your environment. The third example is a script that runs a stress 
          test automatically. This example shows how to extend Ant for extra tasks 
          and how to perform basic stress tests. The final example performs a series 
          of stress tests. Here you will learn about iteration through tasks and 
          passing of variables. 
        <p>

          <b>Setting Up Your Environment </b>
        <p> The following scripts will work with Jmeter 2.1 or 
          above and Ant 1.6 or above. Both packages are downloaded as zip files [4, 
          5] that once unzipped can be directly run. Java 1.4 is required. Please 
          follow the simple installation instructions contained within the packages. 
        <p> To run Ant from a cron job, I typically set a couple 
          of environment variables in one file and call the file from a batch file. 
          For example: 
        <p>

        <pre>
file: setenv 

export CVS_RSH=/usr/local/bin/ssh 
export JAVA_HOME=/usr/java 
export ANT_HOME=/opt/usr/ant 
export CLASSPATH=/opt/usr/ant/lib/mail.jar:/opt/usr/ant/ \
  lib/activation.jar 
export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH 

cronjob batch 
#!/usr/bin/bash 
source /opt/usr/scripts/set_env 
ant -f /opt/usr/scripts/example1.xml ?Dtest.value=45 
          </pre>
Note that if you want to extend Ant tasks, you would 
    normally set the extra libraries in a location defined in the CLASSPATH. 
    Further, if you want to pass a value to the build files from the command 
    line, then you would need to follow the convention of <b>ant -Dname=value</b>. Finally, Ant tasks 
    obviously have a lot of power; <b>delete dir</b>, for example, has the same effect as <b>rm -rf</b>. Therefore, it would not be a 
    good idea to run as a privileged user.
    <p>

    <b>Project Basics </b>
  <p> Before going further, let's define some basic 
    terminology -- a project defines the whole. A target is a collection 
    of tasks that are grouped together. One target may be to zip all files and 
    then copy the archive to a backup mount; another may be to initiate the 
    directory structure or delete it. Therefore, a project may contain a series of targets. A target in itself may contain a group 
    of tasks. The build file has an XML structure and the tags either are 
    self-contained (e.g., &lt;fileset /&gt;) or may enclose other tags (e.g., 
    &lt;fileset&gt;&lt;/fileset&gt;). 
  <p>

    <b>Example 1</b>
  <p> Listing 1 enables Ant to send an email. The basic structure is as follows: 
  <p> Project <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Define some properties <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Target <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do some tasks <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Target <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do more tasks 
  <p> Translating project into Ant syntax: 
    
  <pre>
&lt;project name=&quot;example1&quot; default=&quot;sendmail&quot;&gt;
    </pre>
The code fragment states that if we run Ant from the 
    command line, then the sendmail target is called by default. To run another 
    task first, simply add the target name after Ant (e.g., ant targetname). To 
    obtain the full list of targets in a given build file, type <b>ant -projecthelp</b>.
    <p> The &lt;property file=
      "default.properties"/&gt; statement is powerful; it tells Ant 
      to load in the variables from the property file default.properties. The 
      property file has the syntax value=name (e.g., jmeter.host=localhost). To 
      reference the variable within Ant, you would need to enclose the variable 
      with ${} (e.g., ${Jmeter.host}). 
  <p> The mail task looks pretty straightforward apart from 
    the fileset attribute. This attribute is common to many tasks: 
  <p>

  <pre>
&lt;fileset dir=&quot;${log.dir}&quot;&gt;
       &lt;include name=&quot;**/*.zip&quot;/&gt;
&lt;/fileset&gt;
    </pre>
In other words, the fileset is the set of files under 
    the ${log.dir} directory and its children as defined by log.dir= in the 
    property file. The set of files should only include zip files.
<p> The mail task uses the fileset attribute to define the 
  files to be sent by mail. The task has a dependency on outside libraries. 
  Download the mail and activation.jar files [6, 7] and add their locations 
  to the CLASSPATH variable. 
<p>

<b>Example 2</b>
<p> Listing 2 copies all .log files from a given directory 
  structure and places the logs in an archive. For example, the time stamp is 
  placed in the variable today: 
<p>

<pre>
&lt;tstamp prefix=&quot;today&quot;/&gt;
</pre>
There are three formats for the time stamp DSTAMP 
    (yyyMMdd), TSTAMP(HHmm) and TODAY (MMMM dd yyyy). To reference the DSTAMP 
    format, we need to use the notation ${today.DSTAMP}.
<p> Copying files is straightforward; however, you may 
  want to map the names or directory structures. Ant can achieve this in 
  multiple ways, such as via mapping(s) within the fileset: 
<p>

<pre>
&lt;chainedmapper&gt;
    &lt;flattenmapper/&gt;
    &lt;globmapper from=&quot;*.log&quot; to=&quot;*_${today.DSTAMP}.log&quot; /&gt;
&lt;/chainedmapper&gt;
</pre>
The "chainedmapper" is used to make a 
    composite of other mappers. The "flattenmapper" mapper removes 
    the path information, and the "globmapper" does a simple 
    wild-card mapping and replacing, in the above situation adding a timestamp 
    to the log filenames. For more complex mappings, I would recommend looking 
    at the "regexp" mapper.
    <p> Zipping the archive is straightforward: 
  <p>

  <pre>
&lt;zip zipfile=&quot;${log.dir}/logs_${today.DSTAMP}.zip&quot; 
  basedir=&quot;${log.dir}/${today.DSTAMP}&quot;/&gt;
    </pre>
The sending of email occurs by setting the 
    mail.message property and calling example1.xml:
<p>

<pre>
&lt;property name=&quot;mail.message&quot; value=&quot;Have a nice day 
  ${today.TODAY}&quot; /&gt;
&lt;ant antfile=&quot;example1.xml&quot;/&gt;
</pre>
Notice that mail.message is not defined in the 
    default.properties file. Otherwise, the default.properties setting will 
    override the value set.
<p>

<b>The Plan </b>
<p> Note that the important theme of this article is the 
  control and iteration of tasks via Ant and that Jmeter stress testing is 
  just one example. If you feel that the details of the Jmeter test plan are 
  not immediately relevant, feel free to skip the next couple of paragraphs. 
<p> Like Ant, Jmeter uses an XML configuration, known as a 
  test plan, to define which tests to perform. However, unlike Ant, the plans 
  generally are made via a GUI. In this exercise, we will run a templated 
  test plan. The Ant script will copy the test plan and replace information 
  such as target host and port with parameters stored in the 
  default.properties file. The templated test plan is found under 
  examples/Jmeter/templates/plan.jmx and is best viewed from the GUI. A 
  screen grab is shown in Figure 2. Notice the @PORT@ string. This is one of 
  the tokens that will be stamped. 
<p> The plan consists of a number of elements. The top 
  level is a thread group, which defines the number of threads to be run. The 
  child HTTP cookie manager remembers the cookie per thread and returns it if 
  asked by the server. The HTTP user parameter modifier replaces specific 
  parameters in an HTTP request with data from an XML file. This is useful, 
  for example, if you want to log into a server with the parameters user and 
  password. 
<p> The data file has an XML structure and needs also to 
  sit under the bin directory of the Jmeter instance. The final component is 
  the HTTP request, which sends a request per thread to a server. Notice the 
  parameters user and pass are left blank and will be filled in from the data 
  file. For convenience, a very brutal Perl script (scripts/make_user.pl) is 
  supplied to generate a data file. Otherwise, you may use the file found 
  under examples/Jmeter/user_data.xml. 
<p>

<b>Initial Conditions </b>
<p> Setting up the test environment requires installing an 
  example war file under a Servlet container, such as Tomcat or JBoss. The 
  war file can be built by running at the top level of the source code Ant 
  build, then collecting build/war/Jmeter_target.war and deploying. The 
  application is composed of two pages. Index.html is a login form, and 
  parser.jsp sends a message based on the user name and password. The 
  advantage of JSP pages is that you can change the pages on the fly without 
  rebuilding the application. 
<p> To define a new Jmeter task in Ant, download the 
  Jmeter library [8]. Add the location of the library to the CLASSPATH. 
<p>

<b>Example 3 </b>
<p> Listing 3 is responsible for running the Jmeter task. 
  However, workflow is required so that we can run the task more than once 
  without overwriting the results or ruining the template. The flow is as 
  follows: 
<p>

<ul>
  1. The template is copied to a second directory, and 
  the @@ tokens are replaced with values defined in the default.properties 
  file.
  <p> 2. The test plan is carried out, and the results are 
    saved. The results name is made unique by following a convention that 
    includes the parameter used and a time stamp. 
<p> 3. An XSL task is run that turns the results into a 
  statistics page. 
</ul>
<p> Within the listing, a new taskdef is needed to allow 
  us to apply the Jmeter task: 
  
<pre>
&lt;taskdef 
    name=&quot;jmeter&quot;
    classpath=&quot;../extlib/ant-jmeter.jar&quot;
    classname=&quot;org.programmerplanet.ant.taskdefs.jmeter.JMeterTask&quot;/&gt;
</pre>
Next, we need to copy the templated test plan to a 
    second directory, replacing the tokens with variables in the properties 
    file. This is achieved by:
<p>

<pre>
&lt;filter token=&quot;LOOPS&quot; value=&quot;${example.three.loops}&quot;/&gt;
&lt;copy todir=&quot;${jmeter.workpad}&quot; filtering=&quot;true&quot; overwrite=&quot;true>&quot;&gt;
</pre>
Note that overwrite is set to "true" and 
    that the token @LOOPS@ in the test plan will be replaced with the variable 
    example.three.loops from the properties file.
<p> The Jmeter task runs Jmeter and the XSLT task 
  generates the html report. Figure 3 is a screen grab of one such report. 
<p>

<b>A More Advanced Project </b>
<p> We will use the excellent Ant-contrib library, which can be found at: 
<p>

<pre>
http://www.jcraft.com/jsch/index.html 
</pre>
Please download the library and add to the CLASSPATH. 
    Also, please comment out in default.properties the property 
    example.three.threads.
<p>

<b>Example 4 </b>
<p> Ramp testing is stress testing with different levels 
  of usage. One of the motivations behind ramp testing is to give an 
  indication of how a system performs under future loads. Figure 4 shows two 
  typical responses to a ramp test. The linear response under load is exactly 
  what you want to see. If a production system is successful and more users 
  wish to visit the application then, with a linear response curve, you will 
  have more time to plan for replacement or additions to your hardware farm. 
  However, with the second response curve, you will have a significantly 
  condensed period to react in. Further, instabilities in response may 
  confuse the underlying cause. In principle, it is better to find out the 
  limitations of your system in acceptance than in production. It costs in 
  short term effort, but generally saves in the middle term. 
<p> Ant is somewhat weak in mathematics and iteration, 
  the task for list processes the example.four.thread property and expects a 
  comma-delimited string (e.g., example.four.threads=5,10,15,20,30,40,50). Each element mentioned within <b>&lt;for 
    &lt;/for&gt;</b> will be looped through. 
<p>

<pre>
&lt;for list=&quot;${example.four.threads}&quot; param=&quot;threads&quot;&gt;
</pre>
The <b>&lt;sequential&gt;</b> statement forces the code to be run sequentially. If 
    you wish you can also run the tasks in parallel. But that action risks side 
    effects such as race conditions and resource deadlocks.
<p> Within the for loop, we call the antfile example3, 
  which runs an individual Jmeter testplan. The 
  parameter example.three.threads is set to the 
  iterated value: 
<p>

<pre>
&lt;ant antfile=&quot;example3.xml&quot; target=&quot;JmeterTest&quot;  
  inheritall=&quot;true&quot; &gt; 
    &lt;property name=&quot;example.three.threads&quot; value=&quot;@{threads}&quot;/&gt;
&lt;/ant&gt;
</pre>
Note that you will need to comment out the 
    example.three.threads in the property file, or the properties file value will win over the iterated value. Also note the 
    strangeness with the "@" instead of the "$" for 
    threads; you will need to accept this for the task at hand. Sometimes life 
    is just like that.
    <p> Now that I've run through the basics, here are a 
      few hints based on my own experience: 
  <p>

  <ul>
    1.   Make paths relative. This practice will 
    allow you to keep resources within your build structure and make transport 
    of the structure to other machines easier.
    <p> 2.   Make your targets as brief and as discreet 
      as possible. You should call one target from another. 
    <p> 3.   Always run as a non-privileged user or some 
      of the more powerful tasks may cause pain if misconfigured. 
    <p> 4.   Resist the temptation to use OS-specific 
      code such as exec. If required, then move into a separate task. 
    <p> 5.   Add meaningful descriptions so that other 
      systems administrators can guess what is going on. 
    <p> 6.   Try to collect often used targets into 
      generic build files. 
    <p> 7.   Use Echo copiously. 
    <p> 8.   Make sure property names are consistent 
      between the build and property files. 
    <p> 9.   Be careful when you overwrite files or 
      clean directories as you will be indirectly affecting other tasks. 
    <p> 10. Do not get set in your ways. Find excuses to try 
      out new tasks, and this will allow you to expand the applicability of the 
      tool further. 
    <p> 11. Testing should be done from another server as you 
      may affect the tester by the resources used by the tested. 
    <p> 12. Let the Jmeter GUI do the configuration work for 
      you.
  </ul>
    <p> Looking back to the infrastructure described in Figure 
      1, we have cycled through all the relevant tasks and approaches from the 
      Ant side apart from the scp task. Code for this would look similar to:
  <p> 

  <pre>
&lt;scp todir=&quot;${scp.user}:${scp.pass}@${scp.host}:${scp.rootdir}&quot; \
  trust=&quot;true&quot; &gt;
    &lt;fileset dir=&quot;${clean_dir}/scp_final&quot;/&gt;
&lt;/scp&gt;
    </pre>
The task requires the scp dependency library [9].
<p> That brings us to the assertion tests. Jmeter has 
  components for assertion testing. If a particular string or lack of a 
  string is returned from a response, then an error can be raised. Therefore, 
  to render assertion tests from Ant requires no more scripting skills. It is a question of making the correct test plans 
  and templates. However, that said, anteater is 
  an Ant-specific assertion task. If you would like a more direct approach, 
  then this contribution should be your first port of call. Other tasks of 
  interest include ones to deploy and maintain Tomcat and the standard SQL 
  task to connect and manipulate databases. They are many more tasks worth 
  exploring. 
<p> Enjoy your experimentations. I wish you luck. 
<p>

<b>Resources </b>
<p> 1. Ant Home -- <b>http://ant.apache.org/</b>
<p> 2. Jmeter home -- <b>http://jakarta.apache.org/jmeter/</b>
<p> 3. Apache home -- <b>http://www.apache.org</b>
<p> 4. Ant download page -- <b>http://ant.apache.org/bindownload.cgi</b>
<p> 5. Jmeter download page -- <b>http://jakarta.apache.org/site/downloads/downloads_jmeter.cgi</b>
<p> 6. Mail library download page -- <b>http://java.sun.com/products/javamail/</b>
<p> 7. Activation download page -- <b>http://java.sun.com/products/javabeans/jaf/index.jsp</b>
<p> 8. Jmeter library download page -- <b>http://www.programmerplanet.org/ant-jmeter/</b>
<p> 9. Scp dependency library -- <b>http://www.jcraft.com/jsch/index.html</b>
<p>

<i>Alan M. Berg has been a lead developer at the Central 
  Computer Services at the University of Amsterdam for the past seven years. 
  He likes to get his hands dirty with the building and gluing of systems. In 
  previous incarnations he was a technical writer, an Internet/Linux course 
  writer, and before that a science teacher. He remains agile by playing 
  computer games with his kids (Nelson and Lawrence) who sadly consistently 
  beat him. </i>
<p>

</table></table> 

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
