<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i06: Sendmail's New GreetPause Feature</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/jun2006.tar"><b class=codeListing>jun2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a1.gif" width="200" height="167" align="right">Sendmail's New GreetPause Feature</h1>
 <p>Hal Pomeranz
<p>In most cases, spammers are motivated to send their 
    unsolicited emails as rapidly as possible. Slamming is a technique where 
    the spammer simply fires all of the SMTP commands necessary to transmit an 
    email message to another mail server without waiting for the normal SMTP 
    responses from the remote machine. Typically, the remote mail server will 
    end up accepting the message despite the fact that the slammer is actually 
    disobeying the SMTP behavior mandated by various Internet RFCs. 
	
	<p>However, no well-behaved mail server should ever 
    inject email messages in this fashion, so it would be nice if there were 
    some way to distinguish between the malicious slamming activity and more 
    normal SMTP traffic. The Sendmail v8.13 release train introduced the <b>GreetPause</b> option for doing 
    exactly that. When <b>GreetPause</b> is enabled, Sendmail simply waits a specified amount of 
    time on each new connection before emitting the standard SMTP greeting 
    message. If the remote server starts sending SMTP commands before your mail 
    server sends out the SMTP greeting string, 
    then the remote side is trying to slam you. When this happens, Sendmail 
    simply rejects all of the incoming SMTP commands and drops the message. 
<p>
    <b>GreetPause</b> is one of those 
    extremely useful spam-fighting techniques that precisely identifies a 
    specific type of unwanted email traffic while 
    having minimal impact on regular SMTP sessions. 
    As such, it's a good idea to implement this feature on all of your 
    Internet-facing mail servers to help cut down on the amount of spam you 
    have to deal with. <p>
<b>Implementation</b><p>
    Turning on the <b>GreetPause</b> option is simple. Just add a macro like the following to your existing Sendmail macro configuration file:  
<pre>
FEATURE(`greet_pause', `1000')  
</pre>
<p>The second argument is the number of milliseconds 
    Sendmail should wait before sending the SMTP greeting string to the remote 
    mail server -- so here we're pausing for one second. 
    Obviously, you don't want to set this value too high because you are 
    introducing a delay on each new SMTP connection. Something in the range of 
    1-5 seconds (1000-5000 milliseconds) seems appropriate. 
<p>In fact, at the same time they implemented the <b>GreetPause</b> option, the Sendmail 
    developers also implemented some hooks in the standard Sendmail access DB, 
    which allow you to specify different <b>GreetPause</b> delays for specific IP addresses or network ranges. This 
    feature is most commonly used to turn off the <b>GreetPause</b> delay for trusted mail servers (like your internal mail 
    relays) that may be sending mail through machines that have the <b>GreetPause</b> option turned 
    on. 
<p>The trick is that you must declare <b>FEATURE(`greet_pause',...)</b>in your macro configuration file 
    after your normal access DB 
    declaration in order for these hooks to work:  
<pre>  
FEATURE(`access_db',  
`hash -o -T&lt;TMPF&gt; /etc/mail/access') 
FEATURE(`delay_checks', `friend')  
</pre>

<i>...other configuration lines can go here... </i><p>

<pre>
FEATURE(`greet_pause', `1000')  
</pre>

<p>As of Sendmail v8.13.1 if you get the declarations in 
    the wrong order, you see an error message when you try to compile your 
    macro definitions into a <b>sendmail.cf</b> file:  
<pre>  
$ m4 config.mc >sendmail.cf  
*** WARNING: FEATURE(`greet_pause') before  
    FEATURE(`access_db')- greet_pause will  
    not use access_db!  
</pre>
    <p>By the way, note the addition of the <b>"-T&lt;TMPF&gt;"</b> 
    option in the <b>access_db</b> declaration in the example above. This option was added (as of 
    Sendmail v8.12) so that Sendmail will emit a temporary (4xx type) error 
    message to the remote sender if the local access DB is unavailable for some 
    reason. This can be very useful if you're accessing the database from 
    a remote LDAP server that is unavailable for some reason. Also we're 
    using the <b>delay_checks</b> feature so that we can allow unfiltered email to reach some of 
    our internal recipient addresses (like our <b>"abuse@"</b> addresses). The <b>delay_checks</b> feature was actually introduced in Sendmail v8.10, but the access DB syntax for it was changed as of Sendmail v8.12. 
<p>
    Here are a couple of examples showing the <b>GreetPause</b> hooks in the access 
    DB along with the new <b>delay_checks</b> syntax:  
<pre>  
GreetPause:192.168                 0  
Spam:abuse@sysiphus.com            FRIEND  
</pre>
<p>The first line says use a <b>GreetPause</b> value of zero milliseconds for all connections originating 
    from the 192.168.0.0/16 network. Assuming this is our internal network 
    address range, it basically means we won't be holding up any outgoing 
    email messages with useless <b>GreetPause</b> delays. The second line just shows the new preferred syntax 
    that uses the <b>delay_checks</b> feature to allow unfiltered email feeds to a specific email 
    address. The older syntax (<b>"To:
    abuse@sysiphus.com SPAMFRIEND"</b>) is still 
    supported for backward-compatibility reasons, but has been deprecated and 
    may go away in the future. <p>
<b>Testing the Configuration</b><p>
    Having implemented this new feature, it would be nice 
    if we had a reliable way of testing that it was working properly. Testing 
    is actually pretty straightforward if you have a copy of the extremely 
    handy <b>netcat</b> 
    utility lying around -- most open source operating systems come with <b>netcat</b> pre-installed, and 
    the source is also readily available from the Internet. 
<p>
   The first step is to create a text file containing the 
    SMTP commands typically used to send an email message to a remote mail 
    server. Here's an example that you can use for your testing:  
<pre>  
helo localhost.localdomain  
mail from: hal@deer-run.com  
rcpt to: hal@sysiphus.com  
data  
From: hal@deer-run.com  
To: hal@sysiphus.com  
Subject: testing  


1 2 3  
.  
quit  
</pre>
<p>Please change the email addresses in the sample file 
    above so I don't get hit with a lot of backscatter spam. I thank you. 
    
<p>Once you've created this file on the local 
    machine, you should be able to use it to test the <b>GreetPause</b> feature. Here's 
    sample output on a machine that <i>doesn't</i> have <b>GreetPause</b> enabled:  
<pre>  
$ cat smtp-session | nc localhost 25  
220 int1.sysiphus.com ESMTP Sendmail 8.13.4/8.13.4... 
250 int1.sysiphus.com Hello [127.0.0.1], pleased to...  
250 2.1.0 hal@deer-run.com... Sender ok  
250 2.1.5 hal@sysiphus.com... Recipient ok  
354 Enter mail, end with &quot;.&quot; on a line by itself  
250 2.0.0 k059BPhT004045 Message accepted for delivery 
221 2.0.0 int1.sysiphus.com closing connection  
</pre>
<p>See the <b>"Message accepted for delivery"</b> line? Looks 
    like our message went through just fine. 
<p>
    Now let's try that against a machine that has 
    the <b>GreetPause</b> option enabled: <p>
	
	<pre>
$ cat smtp-session | nc ext1.sysiphus.com 25  
554 ext1.sysiphus.com ESMTP not accepting messages  
250 ext1.sysiphus.com Hello [10.1.1.1], pleased to... 

550 5.0.0 Command rejected  
550 5.0.0 Command rejected  
550 5.0.0 Command rejected  
500 5.5.1 Command unrecognized: &quot;From: hal@deer-run...&quot;
500 5.5.1 Command unrecognized: &quot;To: hal@sysiphus.com&quot; 
500 5.5.1 Command unrecognized: &quot;Subject: testing&quot; 
500 5.5.1 Command unrecognized: &quot;&quot;  
500 5.5.1 Command unrecognized: &quot;1 2 3&quot;  
500 5.5.1 Command unrecognized: &quot;.&quot;  
221 2.0.0 ext1.sysiphus.com closing connection  
</pre>
    <p>Here we see the remote machine rejecting our SMTP 
    commands because we didn't wait for the <b>GreetPause</b> timeout. 
<p>
    So this technique gives us a reasonable mechanism for 
    at least verifying the <b>GreetPause</b> feature is working. However, remember to test from an IP address that doesn't have an exception defined for it in your access 
    DB. If the above test had been done from a machine in the 192.168.0.0/16 
    network (per our previous access DB example), then it would have appeared 
    as if <b>GreetPause</b> 
    weren't working, when in fact all that was going on was that we had 
    specifically disabled the <b>GreetPause</b> delay for hosts in this network range. <p>
<b>Final Thoughts </b><p>
    <b>GreetPause</b> is an extremely 
    simple technique, yet useful for stopping one particular part of your 
    incoming spam volume. Of course, the folks who are writing bulk-emailing 
    software are reasonably clever people. As more sites implement the <b>GreetPause</b> option, I assume 
    that future spamming software will become more intelligent and simply wait 
    for the SMTP greeting message before slamming in the SMTP commands required 
    to transmit the email message. At that point, I guess the good guys will 
    have to retaliate by introducing timeout delays at each stage of the SMTP 
    communication. This, of course, will slow down legitimate email 
    transmission to some degree. And people wonder why I hate spammers so much.<p> 
	
    <i>Hal Pomeranz (<b>hal@deer-run.com</b>) spends a large amount of time fighting spam for his own 
    company as well as his consulting clients. He possesses a highly accurate 
    spam-detection device that he refers to as "His Wife", which 
    alerts him when the amount of received spam is reaching unacceptable 
    levels. </i><p>

        </table></table>
			<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
