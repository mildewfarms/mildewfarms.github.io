<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i05: Listing 1 db2dot</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a8.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a8_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a8_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a8_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2006/may2006.tar"><b class=codeListing>may2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2><B>Listing 1 </B><I>db2dot</i></h2>
            <p> 
            <pre>
#!/usr/bin/perl

package main;

use strict;
use warnings;
$|++;

use GraphViz;
use NetAddr::IP;
use Getopt::Std;
use lib 'scripts';
use MyConfigCDBI;
require nodes;

use vars qw/%device_node %interface_node %subnet_node %if_edge
%subnet_node %sighting_edge %endpoint_node %addr_edge %graph_options
%addr_edge %assignment_edge $opt_3 $opt_e $opt_E $opt_s $opt_S $opt_d
$opt_D $opt_h $opt_i $opt_I $opt_N $opt_n $opt_v $opt_V/;

getopts('3d:D:e:E:hi:I:s:S:Nnv:V:');

die &lt;&lt;DIE if $opt_h;
db2dot [opts]

Where opts is up to one of

  -h: This help screen
  -d regexp: Perl regexp that the device must match to be added
  -D regexp: If the device matches this endpoint, is not added
  -e regexp: Perl regexp that the endpoint name must match to be added
  -E regexp: If the endpoint matches this regexp, is not added
  -i regexp: Perl regexp that the interface name must match to be added
  -I regexp: If the interface matches this regexp, is not added
  -s regexp: Perl regexp that the os of the endpoint must match to be added
  -S regexp: If the os matches this regexp, is not added
  -v regexp: Perl regexp that the vendor of the endpoint must match to be added
  -V regexp: If the vendor matches this regexp, is not added
  -3: Only include interfaces with IP addresses
  -n: Do not include subnets in the diagrams
  -N: Include only subnets with endpoints
  

DIE
    ;

my $g = GraphViz-&gt;new(%graph_options);
MyConfig::CDBI-&gt;connection('dbi:SQLite:dbname=config.db');

my %dev = ();
my %int = ();
my %eps = ();
my %subnets = ();
my %sightings = ();
my %assignments = ();

sub _ifname ($) { $_[0]-&gt;device . '|' . $_[0]-&gt;interface }

sub _store_dev
{
    my $dev = shift;
    return if exists $dev{$dev-&gt;device};
    $dev{$dev-&gt;device} = $dev;
}

sub _store_ep
{
    my $ep = shift;
    return if exists $eps{$ep};
    $eps{$ep} = $ep;
}

sub _store_int
{
    my $int = shift;
    my $l3 = shift;
    return if exists $int{_ifname $int};
    my @addrs = MyConfig::CDBI::Address-&gt;search
    (
     interface =&gt; $int-&gt;interface,
     device =&gt; $int-&gt;device,
    );
    return if $l3 and !@addrs;
    $int{_ifname $int} = { if =&gt; $int, addr =&gt; \@addrs };
}

if ($opt_d)
{
    for my $dev (MyConfig::CDBI::Device-&gt;retrieve_all)
    {
    next unless $dev-&gt;device =~ m/$opt_d/i;
    if ($opt_D) { next if $dev-&gt;device =~ m/$opt_D/i }
    _store_dev($dev);

    for my $ifs ($dev-&gt;interfaces)
    {
        if ($opt_i) { next unless $ifs-&gt;interface =~ m/$opt_i/i }
        if ($opt_I) { next if $ifs-&gt;interface =~ m/$opt_I/i }
        _store_int($ifs, $opt_3);
    }
    }
}

if ($opt_e or $opt_s or $opt_v)
{
    for my $ep (MyConfig::CDBI::Endpoint-&gt;retrieve_all)
    {
    if ($opt_e) { next unless $ep-&gt;endpoint =~ m/$opt_e/i }
    if ($opt_s) { next unless $ep-&gt;os and $ep-&gt;os =~ m/$opt_s/i }
    if ($opt_v) { next unless $ep-&gt;vendor and $ep-&gt;vendor =~ m/$opt_v/i }
    if ($opt_E) { next if $ep-&gt;endpoint =~ m/$opt_E/i }
    if ($opt_S) { next if $ep-&gt;os and $ep-&gt;os =~ m/$opt_S/i }
    if ($opt_V) { next if $ep-&gt;vendor and $ep-&gt;vendor =~ m/$opt_V/i }

    _store_ep($ep);

    for my $sight ($ep-&gt;all_sightings({order_by =&gt; 'time DESC'}))
    {
        $sightings{$ep}-&gt;{_ifname $sight} ||= [ $sight, 0 ];
        $sightings{$ep}-&gt;{_ifname $sight}-&gt;[1]++;
        _store_dev($sight-&gt;device);
        _store_int(MyConfig::CDBI::Interface-&gt;retrieve(
               interface =&gt; $sight-&gt;interface,
               device =&gt; $sight-&gt;device,
               ), 0);
    }

    for my $assign ($ep-&gt;all_assignments({order_by =&gt; 'time DESC'}))
    {
        $assignments{$ep}-&gt;{$assign-&gt;ip} ||= [ $assign, 0 ];
        $assignments{$ep}-&gt;{$assign-&gt;ip}-&gt;[1]++;
    }
    }
}

unless ($opt_n)
{
    unless ($opt_N)
    {
    for my $if (keys %int)
    {
        for my $a (@{$int{$if}-&gt;{addr}})
        {
        my $sn = $a-&gt;cidr;
        if ($sn) { $subnets{$sn-&gt;cidr} = $sn }
        else { 
            warn "Missing or unknown subnet from interface $if...\n";
        }
        }
    }
    }
    
    for my $ep (keys %assignments)
    {
    for my $ip (keys %{$assignments{$ep}})
    {
        my $sn = $assignments{$ep}-&gt;{$ip}-&gt;[0]-&gt;cidr;
        if ($sn) { $subnets{$sn-&gt;cidr} = $sn }
        else { warn "Missing or unknown subnet from assignment ", 
           $assignments{$ep}-&gt;{$ip}-&gt;[0], "...\n" }
    }
    }

    $g-&gt;add_node($_, label =&gt; $_, %subnet_node)
    for keys %subnets;
}

$g-&gt;add_node($_, label =&gt; $dev{$_}-&gt;device, dev_image($dev{$_}-&gt;class),
         %device_node) 
    for keys %dev;

for my $if (keys %int)
{
    $g-&gt;add_node($if, label =&gt; $int{$if}-&gt;{if}-&gt;interface, %interface_node);
    $g-&gt;add_edge($int{$if}-&gt;{if}-&gt;device =&gt; $if,
         ($int{$if}-&gt;{if}-&gt;description ? 
          (label =&gt; $int{$if}-&gt;{if}-&gt;description) : ()),
         %if_edge);
    unless ($opt_n)
    {
    for my $a (@{$int{$if}-&gt;{addr}})
    {
        next if $opt_N and not exists $subnets{$a-&gt;get('cidr')};
        $g-&gt;add_edge($if =&gt; $a-&gt;get('cidr') || '?',
             label =&gt; NetAddr::IP-&gt;new($a-&gt;ip)-&gt;addr,
             %addr_edge);
    }
    }
}

for my $ep (keys %eps)
{
    $g-&gt;add_node($ep, label =&gt; $eps{$ep}-&gt;endpoint . "\n" . $eps{$ep}-&gt;vendor, 
         %endpoint_node);
    if (exists $sightings{$ep})
    {
    my $sight = $sightings{$ep};
    for my $if (keys %$sight)
    {
        $g-&gt;add_edge(
        $ep =&gt; $if,
        label =&gt; $sight-&gt;{$if}-&gt;[1] . "x " 
        . scalar(localtime($sight-&gt;{$if}-&gt;[0]-&gt;time)),
        %sighting_edge
        );
    }
    }

    if (!$opt_n and exists $assignments{$ep})
    {
    my $assign = $assignments{$ep};
    for my $a (keys %$assign)
    {
        $g-&gt;add_edge(
        $ep =&gt; $assign-&gt;{$a}-&gt;[0]-&gt;get('cidr') || '?',
        label =&gt; $assign-&gt;{$a}-&gt;[1] . "x " 
        . NetAddr::IP-&gt;new($assign-&gt;{$a}-&gt;[0]-&gt;ip)-&gt;addr,
        %assignment_edge
        );
    }
    }
}

print $g-&gt;as_debug;</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
