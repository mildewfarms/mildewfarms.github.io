<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i01: Generating Object Accessors</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/jan2006.tar"><b class=codeListing>jan2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Generating 
              Object Accessors</h1>
            <P> Randal L. Schwartz
            <P> The traditional Perl object model is rather simple. Create a hash, 
              use a reference to that hash as the object (appropriately blessed 
              so that we can find the associated package of methods), and use 
              the hash elements as the member variables. So, for a class <B>Rectangle</B>, 
              we write the constructor as:
            <P> 
            <pre>
package Rectangle;
sub new {
  my $class = shift;
  die if @_ % 2;
  my %args = @_;
  my $self = {
    width =&gt; $args{width} || 0;
    height =&gt; $args{height} || 0;
  };
  return bless $self, $class;
}
</pre>
            We can invoke this (probably buggy) constructor as:
            <P> 
            <pre>
my $small_rect = Rectangle-&gt;new; # 0 by 0
</pre>
            to use the default values for width and height, and:
            <P> 
            <pre>
my $square = Rectangle-&gt;new(width =&gt; 10, height =&gt; 10);
</pre>
            to override those to set our own height and width. To this class, 
            we can add methods for computing the total area, for example:
            <P> 
            <pre>
 sub area {
   my $self = shift;
   return $self-&gt;{width} * $self-&gt;{height};
 }
</pre>
            So far, so good. Typically, we'll also want a way to fetch the current 
            object attributes (here, <B>height</B> and <B>width</B>), and perhaps 
            update them if it's appropriate.
            <P> At first, it looks tempting to write code outside the class that 
              functions similarly to the code inside the class:
            <P> 
            <pre>
my $w = $square-&gt;{width}; # bad idea
</pre>
            But this is a bad idea, because it breaks the encapsulation of the 
            object. What if the author of the class decides to switch to an array 
            representation instead of a hash? Or wants to store the width with 
            some sort of unit scaling (12 inches instead of 1 foot)?
            <P> Instead of directly accessing the internals of the object, the 
              general rule is that the class author provides <I>getters</I> and 
              <I>setters</I> (often called <I>accessors</I>) to fetch and store 
              the values, like so:
            <P> 
            <pre>
sub width {
  my $self = shift;
  return $self-&gt;{width};
}
sub set_width {
  my $self = shift;
  $self-&gt;{width} = shift;
}
sub height {
  my $self = shift;
  return $self-&gt;{height};
}
sub set_height {
  my $self = shift;
  $self-&gt;{height} = shift;
}
</pre>
            Now I can fetch the width as:
            <P> 
            <pre>
my $w = $square-&gt;width;
</pre>
            Even if the <B>Rectangle</B> implementation is later changed to be 
            an array-based class (or an inside-out class, or a prototyped object, 
            and so on), we presume the class author will maintain a sensible <B>width</B> 
            method to do the right thing for the external protocol.
            <P> But take a look at that code! It's repetitious. In fact, to write 
              that code, I grabbed the first chunk, copied it and pasted it, and 
              changed all <B>width</B> to <B>height</B>. If you ever find yourself 
              using cut-and-paste in your editor, you're probably programming 
              incorrectly.
            <P> But of course, this is Perl. Perl is good at string manipulation. 
              Is there some way we can get Perl to do the right thing? Certainly; 
              there are a few ways to do it, keeping with Perl traditions.
            <P> One straightforward way that requires very little imagination 
              is to let Perl do the cutting and pasting at compile time:
            <P> 
            <pre>
  BEGIN {
    for my $member (qw(width height)) {
      eval qq{
sub $member {
  my \$self = shift;
  return \$self-&gt;{$member};
}
sub set_$member {
  my \$self = shift;
  \$self-&gt;{$member} = shift;
}
      }; die $@ if $@;
    }
  }
</pre>
            First note that the entire thing is wrapped within a BEGIN block. 
            This means that this code will be executed at compile time, as if 
            we had literally stuffed the subroutine definitions into the source 
            text. The loop evaluates two strings, treating them as Perl code. 
            The <B>$member</B> variable's value establishes the right subroutine 
            names and hash element accesses.
            <P> Note that I had to backslash the other double-quote significant 
              items here (all dollars, at signs, and backslashes), because they 
              would otherwise be expanded while building the string, instead of 
              being treated as source text. Also note that if the <B>eval</B> 
              fails, I want the compilation to die, because that's one of those 
              "should never happen" problems.
            <P> While this is a workable solution, it's easy to make a mistake 
              getting all the backslashes just right in the double-quoted string, 
              leading to obscure errors. Also, because it's an eval, the line 
              numbers of errors will have rather useless eval line numbers in 
              them.
            <P> Another solution involves a bit more trickiness, but doesn't require 
              the use of <B>eval</B>. We can construct a coderef that does the 
              right thing, and then install it into the symbol table as if it 
              were a named subroutine:
            <P> 
            <pre>
BEGIN {
  for my $member (qw(width height)) {
    no strict 'refs';
    *{$member} = sub {
      my $self = shift;
      return $self-&gt;{$member};
    }
    *{"set_$member"} = sub {
      my $self = shift;
      $self-&gt;{$member} = shift;
    }
  }
}
</pre>
            Without eval, we can now write the code as normal Perl code, without 
            worrying about the extra required level of backslashes. Once we've 
            turned off the <B>use strict</B> checking for symbolic references, 
            we can use the <B>$member</B> variable as a symbolic glob ref (the 
            star syntax), and update the coderef portion of that symbol with our 
            constructed coderef.
            <P> Okay, so maybe it's a bit more magic, but it's actually more straightforward 
              in Perl technology. We're not firing up the compiler repeatedly 
              to evaluate a templated piece of text. Instead, we're installing 
              a series of coderefs as named subroutines in the current package.
            <P> What if our object has a few dozen member variables, and we generally 
              use only a few of the getters and setters in a given program? For 
              this, I might choose a different approach, using <B>AUTOLOAD</B>.
            <P> When a method is called, and cannot be found, a search for a method 
              named <B>AUTOLOAD</B> is made using the same inheritance path. If 
              found, the method is invoked, passing the original method name (fully 
              qualified with a package name) in the current package's <B>$AUTOLOAD</B> 
              variable.
            <P> For example, if we didn't define the getters and setters as above, 
              but instead defined:
            <P> 
            <pre>
sub AUTOLOAD {
  my $self = shift;
  my ($method) = (our $AUTOLOAD) =~ /^.*::(\w+)$/
    or die "Weird: $AUTOLOAD";
  ...
}
</pre>
            then we now have <B>$method</B> as the original method name. From 
            here, we can either (a) act like the getter/setter, or (b) install 
            a getter/setter and execute it. Let's look at the first option:
            <P> 
            <pre>
my %MEMBERS = map { $_ =&gt; 1 } qw(width height);
sub AUTOLOAD {
  my $self = shift;
  my ($method) = (our $AUTOLOAD) =~ /^.*::(\w+)$/
    or die "Weird: $AUTOLOAD";
  if ($MEMBERS{$method}) { # getter
    return $self-&gt;{$method};
  }
  if ((my $m = $method) =~ s/^set_//) { # might be setter
    if ($MEMBERS{$m}) { # yes, it's a member
      return $self-&gt;{$m} = shift; # act like a setter
    }
  }
  ...
}
</pre>
            Here, with the help of the <B>%MEMBERS</B> hash, we validate possible 
            method names against our known member variables. If we have a getter 
            method, the right value is returned. For a setter method (after we 
            strip <B>set_</B> from the method name), we update the right member 
            variable.
            <P> The last step is what to do if we make it through this chain. 
              Because we're in an AUTOLOAD, we might also be trapping methods 
              that aren't implemented. So, we have to give the rest of the system 
              a chance to respond to the method (perhaps with a parent-class AUTOLOAD). 
              Probably the simplest way is to execute a <B>SUPER::</B> call, so 
              at the end of the subroutine, we add:
            <P> 
            <pre>
  $method = "SUPER::$method";
  return $self-&gt;$method(@_);
</pre>
            If there's no AUTOLOAD higher in the chain, we'll get blamed for trying 
            to call something that didn't exist, but hopefully that will be shaken 
            out in testing. At least we won't die silently.
            <P> If you don't want to do all this by hand, there are a few modules 
              in the CPAN that can help, such as <B>Class::Accessormaker</B>, 
              <B>Class::MethodMaker</B>, <B>accessors</B>, <B>Spiffy</B>, <B>Class::MakeMethods</B>, 
              and so on. Check out those to see if something might suit you better, 
              but don't be afraid to roll your own. Until next time, enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
