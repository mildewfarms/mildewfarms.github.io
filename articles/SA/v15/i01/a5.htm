<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i01: Automate System Configurations and Changes with cfengine</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a5_l1.htm">Listing 1</a></span></td>
		<td><a href="../../../../source/SA/2006/jan2006.tar"><b class=codeListing>jan2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1>Automate System Configurations and Changes with cfengine </h1>
            <P> John Borwick
            <P> Humans are not as good as computers at applying changes consistently. 
              If you manually maintain several computers, your machine configurations 
              will drift apart over time. Aside from the problems inherent in 
              manual maintenance, there are several benefits to automated, repeatable 
              processes. Repeatable processes help you understand and document 
              your machines' environments. If you can automate system changes, 
              you can repeat your configuration process. You can develop disaster-recovery 
              systems that rely on reinstalling the OS and applying changes, rather 
              than recovering your OS from backups. Automating your system configurations 
              also means less work for you over time.
            <P> Cfengine, written by Mark Burgess, is one of several tools available 
              to automate system configurations and changes. Cfengine lets you 
              assert certain conditions on a server, and over time the server 
              will converge towards meeting those conditions. Depending on how 
              you write your cfengine configuration files, the first time cfengine 
              runs on your mail server it could install your sendmail RPM. The 
              second time it could update /etc/mail from a CVS repository. The 
              third time cfengine runs it could restart your mail daemon if it's 
              not running already. At midnight, cfengine might clear out all old 
              files from "/tmp" and run your log rotation scripts.
            <P> Cfengine works by reading its configuration files, setting "classes" 
              for the machine on which it runs, and then processing actions in 
              an "actionsequence" of things to do. Classes set the conditions 
              under which an action occurs. Your actionsequence define the types 
              of actions -- like deleting files or mounting NFS shares -- that 
              should be taken.
            <P> Every machine in your environment can use the same configuration 
              files. These files will be processed differently depending on which 
              classes have been set. For example, the same configuration file 
              could set your Solaris and Red Hat Linux machines to have identical 
              "/etc/resolv.conf" files, but might only install "atop" on your 
              Red Hat Linux machines.
            <P> This article will introduce you to cfengine and help get you started. 
              For additional information on cfengine, I recommend the Cfengine 
              Reference Guide and other documentation at <B>http://www.cfengine.org/documentation.phtml</B>, 
              the cfengine wiki at <B>http://cfwiki.org</B>, and the cfengine-help 
              mailing list at <B>http://lists.gnu.org/mailman/listinfo/help-cfengine</B>.
            <P> Relevant Directories and Files
            <P> All the files important to cfengine are stored in "/var/cfengine":
            <P> 
            <pre>
bin/       Binaries
inputs/    Configuration files
modules/   Third-party cfengine code
outputs/   Time-stamped messages and complaints
ppkeys/    Public and private cfengine keys
state/     Environmental data
</pre>
            Cfengine's binaries include <B>cfagent</B>, <B>cfexecd</B>, <B>cfenvd</B>, 
            and <B>cfservd</B>. <B>cfagent</B> is a command-line tool for processing 
            cfengine configuration files. <B>cfexecd</B> is the cfengine daemon; 
            it will regularly process your cfengine configuration files. <B>cfenvd</B> 
            monitors system environmentals, such as the load on the system, and 
            converts this data into classes set in <B>cfagent</B> and <B>cfexecd</B>. 
            <B>cfenvd</B> helps you say, for example, "run my <B>decrease_load</B> 
            shell script whenever the load is two times above its standard deviation". 
            <B>cfservd</B> is the cfengine server that, among other things, can 
            serve arbitrary files to your cfengine clients.
            <P> Binaries in /var/cfengine/bin are typically symlinked to somewhere 
              such as /usr/sbin for ease of use.
            <P> <b>Configuration Files</b>
            <P> Unless you explicitly specify a full path, cfengine assumes all 
              configuration files are in /var/cfengine/inputs. Cfengine's two 
              most important configuration files are /var/cfengine/inputs/update.conf 
              and /var/cfengine/inputs/cfagent.conf. When cfengine runs, it will 
              evaluate both update.conf and cfagent.conf.
            <P> Update.conf is parsed first; it's designed to be your emergency 
              configuration file. Update.conf typically sets your system time 
              and copies the rest of your cfengine configuration files from your 
              cfengine server. The system time has to be set for cfengine to authenticate 
              with the cfengine server, similar to how Kerberos authentication 
              requires synchronized clocks. The cfengine configuration files get 
              copied to the client in update.conf so that, if you botch the rest 
              of your configuration, update.conf can restore your configuration 
              with a new (corrected) copy. Update.conf should get your cfengine 
              client back to a "known state". For these reasons, your update.conf 
              should have no dependencies and be very small.
            <P> Cfagent.conf is parsed second. It controls all the work you want 
              done on any of your cfengine clients. Because environments usually 
              have one set of configuration files, and machine-specific actions 
              are controlled via classes, your configuration tends to be quite 
              large. One of cfengine's keywords is <B>import</B>, which allows 
              you to include other cfengine configuration files. Our site's cfagent.conf 
              includes many <B>import</B> statements, so we can split up our configuration 
              into manageable files.
            <P> <b>Syntax</b>
            <P> Each cfengine configuration file is divided into actions, conditions, 
              and declarations:
            <P> 
            <pre>
action:
  class1::           # 'class1' is a condition
    declaration
    declaration
  class2|class3::    # 'class2|class3' is a condition
    declaration
</pre>
            Actions are always denoted by a single colon. Declaration syntax varies 
            wildly depending on the kind of action. Hash marks denote comments. 
            Cfengine has no rigid whitespace standard.
            <P> Conditions, or "compound classes", are always denoted by double 
              colons. Conditions can get fairly complex, but at their simplest 
              level, a condition is just a class name. You can use the special 
              class "any" to apply an action statement to all machines.
            <P> Conditions can be unions of classes (logical "or") by using a 
              pipe. <B>Hr00|Hr12</B> means execute at midnight or noon, for example. 
              Conditions can be intersections (logical "and") by using a period. 
              <B>Hr00.disk_space_needed</B> means execute when it's midnight and 
              the class <B>disk_space_needed</B> is defined. You can negate classes 
              with a bang. <B>!Hr00</B> means do this unless it's midnight. You 
              can also use parentheses with conditions. <B>(!Hr00.(disk_space_needed|Tuesday))</B> 
              means run the action statements if it's not midnight and either 
              disk space is needed or it's Tuesday.
            <P> <b>Classes</b>
            <P> Cfengine defines many classes (also known as groups) when it runs. 
              You can define your own classes in configuration files, too. On 
              one Red Hat Enterprise Linux 3 machine, many classes are predefined. 
              I will present them here by logical group:
            <P> 
            <pre>
10_1_1 10_1_1_1 ipv4_10 ipv4_10_1 ipv4_10_1_1 ipv4_10_1_1_1
192_168_1 192_168_1_1 ipv4_192 ipv4_192_168 ipv4_192_168_1 ipv4_192_168_1_1
net_iface_eth0 net_iface_eth1 net_iface_lo
host1 host1_example_com
</pre>
            The machine has two NICs -- one with IP 10.1.1.1 and another with 
            IP 192.168.1.1. Both NICs and loopback are defined. The machine's 
            hostname and FQDN are also set.
            <P> 
            <pre>
August Day20 Hr21 Hr21_Q1 Min10 Min10_15 Q1 Yr2005
</pre>
            Classes related to the date are defined.
            <P> 
            <pre>
any cfengine_2 cfengine_2_1 cfengine_2_1_10 compiled_on_linux_gnu
</pre>
            The special class "any" is defined, as well as class names corresponding 
            to the cfengine environment.
            <P> 
            <pre>
32_bit i686 linux linux_2_4_21_4_ELsmp linux_i686 linux_i686_2_4_21_4_ELsmp
linux_i686_2_4_21_4_ELsmp__1_SMP_Fri_Oct_3_17_52_56_EDT_2003
redhat redhat_as redhat_as_3
</pre>
            Details about the kernel are defined, as well as the distribution.
            <P> <B>cfenvd</B> also helps cfengine define more classes, such as 
              <B>entropy_www_in_low</B>, based on measurements about the current 
              environment. I have omitted these classes from the list above because 
              they make the issue of learning about classes more complicated. 
              You can see all the classes defined on your machine by running <B>cfagent 
              -pv</B> and looking for the line that begins with "Defined Classes".
            <P> To define your own classes, you can use the <B>classes</B> action. 
              The <B>classes</B> action will define a new class if one of the 
              classes you list is defined. For example, if you're going to use 
              cfengine to install software packages on different types of machines, 
              the most useful predefined class is the machine's hostname:
            <P> 
            <pre>
classes:
  any::
    mx_server = ( host1 host3 host11 )
    mail_server = ( mx_server host12 )
    cfengine_client = ( any )
</pre>
            These rules define a new class, <B>mx_server</B>, for any machine 
            where the class <B>host1</B>, <B>host3</B>, or <B>host11</B> is defined. 
            <B>mail_server</B> would then be defined for any <B>mail_server</B> 
            or for <B>host12</B>. <B>cfengine_client</B> would be defined when 
            <B>any</B> is defined, and as mentioned earlier, <B>any</B> is a special 
            class that is always true.
            <P> Using conditions, you could rewrite the above section:
            <P> 
            <pre>
classes:
  host1|host3|host11::
    mx_server = ( any )
  mx_server|host12::
    mail_server = ( any )
  any::
    cfengine_client = ( any )
</pre>
            Either method of defining new classes is okay; the two examples above 
            are equivalent, but I think the first is a little more readable.
            <P> <b>The Control Action</b>
            <P> Of all the actions in your cfengine configuration files, <B>control</B> 
              is the one action that will always get run. The <B>control</B> block 
              controls what cfengine should do and how it should do it. In the 
              <B>control</B> block, there are several variables you can set. For 
              example, you can set how often <B>cfexecd</B> should run with the 
              special <B>schedule</B> control variable:
            <P> 
            <pre>
control:
  any::
    schedule = ( Min00_05 )
</pre>
            This schedule, which happens to be the default, means that <B>cfexecd</B> 
            will run within the first five minutes of each hour. You can read 
            about dozens of other specialized control variables in the Cfengine 
            Reference Guide.
            <P> The most important control variable is the <B>actionsequence</B>, 
              which defines what actions you want to run. With the exception of 
              the special actions <B>control</B>, <B>import</B>, <B>alerts</B>, 
              and <B>classes</B>, your actions will not run unless they are listed 
              in the actionsequence.
            <P> <b>Actionsequence</b>
            <P> Section 4.9.2 of the Cfengine Reference Guide lists all the following 
              valid actions for your actionsequence:
            <P> 
            <pre>
mountall mountinfo checktimezone netconfig resolve unmount packages
shellcommands editfiles addmounts directories links mailcheck mountall
required tidy disable files copy processes module:name
</pre>
            These actions are really the most complicated part of cfengine because 
            each one uses a slightly different declaration syntax. Here are some 
            of the actions that our site uses, along with short descriptions. 
            See Listing 1 for a cfengine configuration file that uses all the 
            below actions:
            <P> <b>links</B> -- This action creates soft links. It can create 
              simple links, or it can create a "forest" of links. This declaration 
              means "link everything in /usr/local/Sophos/bin into /usr/local/bin":
            <P> 
            <pre>
links:
  sophos_server::
    /usr/local/bin +&gt; /usr/local/Sophos/bin
</pre> <b>packages</b> -- Once you define the special variable 
            <B>DefaultPkgMgr</B> in your control block so that cfengine knows 
            what package system you're using, you can query the system's installed 
            packages. You can then use the special tag <B>elsedefine</B>, part 
            of the <B>packages</B> action, to define classes that you use to take 
            the appropriate action later. To learn about these special tags, I 
            always turn to the Cfengine Reference Guide.
            <P> <B>shellcommands</B> -- The full path of shell commands to run. 
              Some commands can do strange things with standard input or output 
              that can make cfengine hang, which is why some cfengine shellcommands 
              are written like:
            <P> 
            <pre>
"/path/to/binary &lt; /dev/null &gt; /dev/null 2&gt;&amp;1"
</pre> <b>editfiles</B> -- Cfengine has many 
            special commands for editing files, including <B>AppendIfNoSuchLine</B> 
            and <B>ReplaceLineWith</B>. For example, to ensure that no one has 
            set the <B>forceInstall</B> parameter for up2date in Red Hat Enterprise 
            Linux 3, we use the following declaration:
            <P> 
            <pre>
editfiles:
  redhat::
    { /etc/sysconfig/rhn/up2date
      LocateLineMatching '^forceInstall=[1-9]'
      ReplaceLineWith 'forceInstall=0'
      DefineClasses 'up2date_forceinstall' }
</pre>
            Once again, you must look in the Cfengine Reference Guide to learn 
            about all the options for <B>editfiles</B> declarations.
            <P> <B>directories</B> -- This simple action creates directories.
            <P> <B>tidy</B> -- Given a pattern of files to find and a minimum 
              age, <B>tidy</B> deletes files.
            <P> <B>disable</B> -- Renames files. The renamed files get the suffix 
              <B>.cfdisabled</B> appended to them. <B>Disable</B> can be used 
              to ensure you have no <B>/etc/hosts.equiv</B> files lying around 
              on your servers.
            <P> <B>files</B> -- Checks file permissions and can optionally maintain 
              a checksum database.
            <P> <B>copy</B> -- Copies files from one directory to another, or 
              from your cfengine server to cfengine clients. <B>cfservd</B> must 
              be running on your cfengine server, the server must allow the client 
              to talk to it, your machines must have the same clock time, and 
              the client and server must have each others' public keys in /var/cfengine/ppkeys.
            <P> <B>processes</B> -- Checks to see whether processes are running, 
              and can define classes under certain conditions.
            <P> <b>Example</b>
            <P> Now that you understand classes, the control block, actions, and 
              actionsequence, let's look at an example. See Listing 1.
            <P> <b>Deployment</b>
            <P> Cfengine can be deployed in two ways. You can put a <B>schedule</B> 
              line in your control section and run <B>cfexecd</B> like any other 
              daemon, or you can add a cron entry to call <B>cfexecd</B>. In our 
              environment, we run <B>cfexecd</B> as a daemon, but we could have 
              just as easily added the following to cron:
            <P> 
            <pre>
0 * * * * /var/cfengine/bin/cfexecd -F
</pre>
            The <B>-F</B> means "don't fork and become a daemon".
            <P> Typically, people who deploy cfengine have a version-controlled 
              repository where they check in configuration updates. The cfengine 
              server checks out the most recent configurations. Cfengine clients 
              then copy the configurations from the cfengine server. This version-controlled 
              server-client configuration is a bit of a pain; we set it up in 
              our environment with help from Luke Kanies's article, "Distributed 
              Cfengine", available at:
            <P> 
            <pre>
http://www.onlamp.com/pub/a/onlamp/2004/05/13/distributed_cfengine.html
</pre>
            In our environment, we have a CVS-controlled repository of cfengine-related 
            information. The <B>config</B> directory from our CVS repository is 
            checked out on our cfengine server as /cfserver/config. Our configuration 
            has a line that says "if this machine is the cfengine server, run 
            <B>cd /cfserver/config; cvs -q upd -d</B>". When the cfengine server 
            parses this configuration, it checks out the most recent files from 
            CVS. Each client then copies these checked-out files from /cfserver/config 
            as instructed in our configuration. See Luke Kanies's article for 
            more information on the cfengine server-client relationship.
            <P> <b>Potential Problems</b>
            <P> Besides the difficulty required to set up a cfengine server/client 
              environment, you may run into a few other problems with cfengine. 
              As hinted at in the example configuration file, cfengine parses 
              all your imported files before it executes them. As cfengine reads 
              your configuration files, it creates a list of potential class dependencies. 
              If you import files "A" and then "B", and file "B" defines a class, 
              file "A" will never see that class defined. You must keep track 
              of the order in which files are imported.
            <P> Also, your actionsequence order is really important. You will 
              eventually get the temptation to re-order your actionsequence because 
              your "links" action really needs to use your "shellcommands" action. 
              My advice is to pick an order and stick with it. Cfengine runs multiple 
              passes through your actionsequence to resolve class dependencies 
              and, if you really need to, you can use a more advanced technique 
              and run the same action several times with different defined classes. 
              See the Cfengine Reference Guide, section 4.9.2, for details.
            <P> Cfengine defines its default classes when it first runs. If you 
              add an IP address to a machine within a cfengine configuration file, 
              for example, cfengine's default classes will not include that IP 
              address until the next time you run cfengine.
            <P> <b>cfagent Options and Testing</b>
            <P> <B>cfagent</B>, the command-line tool to run cfengine, has 46 
              options. Here are the 6 that I think are most useful:
            <P> 
<b>-K</B> -- Don't wait on any cfengine locks before running; run now.<P>
<B>-v</B> -- Be verbose.<P>
<B>-q</B> -- Don't wait the default "splay time"; start running immediately. By default, cfengine waits a random amount of "splay time" before running to keep cfengine clients from overwhelming the cfengine server or other communal resources.<P>
<B>-n</B> -- Perform a dry run. Don't actually change the system.<P>
<B>-D&lt;class&gt;</B> -- Define whatever class you specify when running the configuration file. For example, when our site is ready to fully initialize a machine, we run <B>cfagent -Kvq -DInit</B>. That means ignore locks, tell me everything, run right now, and run with the "Init" class (which for us means "it's OK to do things that might break the system").<P>
<B>-f&lt;file&gt;</B> -- Process the specified file rather than <B>update.conf</B> followed by <B>cfagent.conf</B>. When testing cfengine statements, I typically create a file called /var/cfengine/inputs/test.conf, with a tiny complete configuration file that contains whatever I need to test. For example, the file might say:<P>
<pre>
control: actionsequence = ( tidy )
tidy: /tmp recurse=inf age=0
</pre>
I can then process this file by running <B>cfagent -Kvq -f test.conf</B> to isolate my problem.<P>
<P>
The other time I use <B>-f</B> is when I just want to run update.conf. To update our cfengine server's copy of /cfserver, the server only has to process update.conf. I can run <B>cfagent -Kq -f update.conf</B> on our server to make new versions of our configurations available for our cfengine clients and save it from running through the whole configuration in <B>cfagent.conf</B>.<P>
<b>Conclusion</b><P>
Our environment defines classes like <B>mysql_server</B> and <B>lsi_client</B> to install the appropriate binaries and utilities, and to copy our configuration files. Cfengine is a timesaving maintenance tool once you have expended the effort to configure it initially. Cfengine's advantage and complexity comes from being able to automate virtually all parts of server configuration.<P>
<I>John Borwick is a SAGE Level III systems administrator at Wake Forest University, with a background in Computer Science and English. His goal is to make systems administrators' lives easier by optimizing common processes.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
