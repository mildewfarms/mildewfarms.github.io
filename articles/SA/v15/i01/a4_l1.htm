<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i01: Listing 1 lb_state.pl</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a4.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a4_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a4_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a4_f3.htm">Figure 3</a></span></td>
		<td><span class="navbarLink"><a href="a4_f4.htm">Figure 4</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink">Listing 1</span></td>
		<td><span class="navbarLink"><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><span class="navbarLink"><a href="a4_l3.htm">Listing 3</a></span></td>
		<td><a href="../../../../source/SA/2006/jan2006.tar"><b class=codeListing>jan2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h4><B>Listing 1 </B><I>lb_state.pl</i></h4>
            <p> 
            <pre>
#!/usr/bin/perl
#
## Name:         lb_state.pl - squid recirect_program 
#
## Author:      Tom Northcutt
## Synopsis:    squid redirect_program that implements load balancing
#               with the ability to keep state for backend applications 
## Description:
#               This version implements static pages, state and round
#               robin load balancing. Credit to: Rajeev Kumar (Sys
#               Admin V13 n.2) and Jeremy Zawodny for components of
#               this script
#
#
# user defined section ###

use strict;
$|=1;

my $debug = 1;
my $logfile = "/var/log/squid/lb_data.log";
my $serverlist = "/usr/local/squid/etc/servers-up.dat";

#get list of servers that are up
my @servers;
open SUD, "&lt; $serverlist";
while ( &lt;SUD&gt; ){
    #skip comments, blank lines
    s/#.*//; 
    next if /^(\s)*$/;
    #chomp;
    push @servers, $_;
}
close SUD;
print @servers;
my $i = 0;

#use to ensure key passed is valid
my %server_name;
foreach my $key (@servers){
    chomp $key;
    $server_name{"$key"} = $key;
}

##mainloop ####
while (&lt;&gt;) {
  $i++;
  $i = 0 if ($i &gt; $#servers); 
  my $line = $_;
  my $server = $servers[$i];
  if ($debug){
     open F, "&gt;&gt; $logfile" or die "Can't open $logfile : $!";
     print F "\n[server $server]\n$i $line";
  }

  ##section 1
  #check for URLs that should always be directed to a 
  #specific node (server1)
  if ($line =~ /some.cgi/ || $line =~ /MyWebApp/ || \ 
      $line =~ /~joes_home/  || $line =~ /appDirectory/ ){
      print $line;
      print F "--static goto server1 only \n-&gt; $line" if $debug;
      next; 

  # a different specific node (server3)
  }elsif($line =~ /another.cgi/ || $line =~ /otherWebApp/ || \ 
      $line =~ /~toms_home/  || $line =~ /srvDirectory/ ){
      $line =~ s/server1/server3/;
      print $line;
      print F "--static goto server3 only \n-&gt; $line" if $debug;
      next; 

  ##section 2
  #check for stateful pages
  }elsif($line =~ /lbnode/){
      #this can be done more elegantly, but I like split
      my ($null,$first) = split(/lbnode=/,$line);
      my ($second, $null) = split(/&amp;/,$first);
      my ($node, $null) = split(/ /,$second);
     chomp $node;
     chomp $node;
      print F "--found a lbnode tag, node = $node\n" if $debug;

      my $j = $server_name{"$node"} || "server1";
      print F " --node=$node j=$j --\n" if $debug; 
      $line =~  s[^http://server1.localdomain] [http://$j.localdomain];
      print $line;
      print F "-&gt; static lbnode node=$node j=$j  $line" if $debug;
      next;

  ##section 3    
  #round robin
  }else{
      my $k = $server_name{"$server"} || "server1";
      chomp $k;
      $line =~  s[^http://server1.localdomain] [http://$k.localdomain];
      print $line ;
      print F "--round robin, server = $k \n-&gt; $line" if $debug;
  }
  close F if $debug;
}
</pre></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
