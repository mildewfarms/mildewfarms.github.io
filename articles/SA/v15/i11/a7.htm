<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i11: Learning DTrace -- Part 3: Advanced Scripting and Aggregations</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/nov2006.tar"><b class=codeListing>nov2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a7.gif" width="200" height="167" align="right">Learning DTrace -- Part 3: Advanced Scripting and Aggregations </h1>
            <p> Chip Bennett
            <p> In part two of this series on DTrace, I covered the 
              basics of writing D programs. In this part, I'll go into more detail 
              about the D language and tell you about some additional probe providers. Along the way, I'll show you some 
              examples, expanding on last month's example script and developing a new one.
            <p> This leg of our adventure will deal more with the D 
              language, which is based on C. I'll explain some of the common 
              features, but it's beyond the scope of these articles to teach all of 
              the capabilities of C. If you're not familiar with the C language, 
              there are a number of online references and tutorials that can be found by 
              searching the Internet for something like "C programming 
              tutorials."
          <p>

            <b>Arithmetic Expressions </B>
          <P> D supports most of the arithmetic expressions that 
            ANSI C supports. These expressions can be used in predicates, recording 
            actions like <i>printf</i>, 
            functions like <i>exit</i>, 
            or in a statement by themselves. Standalone D expressions, like C 
            expressions, must have a side effect to be useful. The two sets of 
            operators with side effects are the assignment operators and the 
            increment/decrement operators. For example, the expression <i>3+1</i> is a valid standalone 
            expression, but it doesn't change anything.
          <p> One particular expression operation that D borrowed 
            from C is especially useful in D. It is the conditional expression 
            (expression1 ? expression2 : expression3). This is a powerful operation in 
            C, but it's even more useful in D, because D doesn't have flow 
            control statements [1]. Since this operation is so important in D and often 
            unknown to casual C programmers, I'll touch on it here.
          <p> First, expression1 is evaluated. If the result is true 
            (non-zero), then expression2 is evaluated and returned as the overall 
            expression result. Otherwise, the result of expression 3 is returned. For 
            example: 
          <p>

          <pre>
  printf (&quot;The value of x is %s\n&quot;, x == 0 ? &quot;zero&quot; : &quot;non-zero&quot;); 
            </pre>
I'll tell you more about the usefulness of conditional expressions a little later.
<p>

<b>DTrace Provider </b>
<p> DTrace has a number of providers for creating 
  different type of probes. The only provider you've seen, unless 
  you've been reading the manual, is the <i>syscall</i> provider, which provides a way to instrument Solaris 
  system call ingress and egress. 
<p> There are times when you need to be able to perform 
  actions only once: at the start of the run, and at the end of the run. 
  DTrace has a provider, actually called the <i>dtrace</i> provider, that gives you this capability. The <i>dtrace</i> provider only has 
  three probes. (Note that capitalization is important. These probe names are 
  in all uppercase.):
<p>

<ul>
<li> <i>BEGIN</i> -- Fires once at the start of the script, before 
  any other probes fire
  
<li> <i>END</i> -- Fires once at the end of the script, after all 
  the other probes fire
  
<li> <i>ERROR</i> -- Fires when a clause execution error occurs
</ul>
To expand on the D program shown in part two (<i>execs.d</i>), suppose you'd 
  like to add a header and a trailer to the output. You can use the <i>BEGIN</i> probe to print a header 
  before any of the other probes fire. It also might be useful to keep some 
  kind of tally of probe events, to be printed at the conclusion of the run. 
  The <i>dtrace</i> provider's <i>END</i> probe can be used for this purpose:
  <p>

<pre>
#pragma D option quiet 
dtrace:::BEGIN 
{ 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
   printf (&quot;%-20s %s\n&quot;, &quot;Execing Process&quot;, &quot;Execed Process&quot;); 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
   total = 0; 
} 
syscall::exec*:entry 
{ 
   self-&gt;exn = execname; 
} 
syscall::exec*:return 
/ self-&gt;exn != NULL / 
{ 
   printf (&quot;%-20s %s\n&quot;, 
   self-&gt;exn, execname); 
   self-&gt;exn = 0; 
   total++; 
} 
dtrace:::END 
{ 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
   printf (&quot;Total # of execs = %d\n&quot;, total); 
} 
  </pre>
In practice, you usually only specify <i>BEGIN</i> and <i>END</i> without the rest of the probe 
  tuple; the <i>dtrace</i> provider probes are unique and well known.
  <p> You'll notice that the variable <i>total</i> is not prefixed with <i>self-&gt;</i>. This is because <i>total</i> is not a thread-local 
    variable (see part two of this series for an explanation of thread-local 
    variables). Since <i>total</i> is not one of the built-in variables, the D compiler will 
    make it a global variable. Global variables maintain their value for the 
    entire execution, and there is only one copy shared by all threads. Like 
    other variable types in D, the compiler gets the type of a global variable 
    from an explicit declaration or an assignment statement. All explicit 
    declarations must be outside of the probe clauses.
<p> How does DTrace decide when to fire the <i>END</i> probe? DTrace has an <i>exit</i> function that can be called 
  from any clause. Additionally, you could type ^C to interrupt execution. 
  When the D program calls <i>exit</i>, receives a SIGINT, or receives a SIGTERM, it executes the <i>END</i> clause(es) before 
  exiting. Your output should look something like this: 
<p>

<pre>
===============      ============== 
Execing Process      Execed Process 
===============      ============== 
sshd                 sh 
sh                   locale 
sshd                 pt_chmod 
sshd                 sh 
sh                   quota 
sh                   cat 
sh                   mail 
^C 
===============      ============== 
Total # of execs = 7
  </pre>

  <b>Structures </b>
  <p> In D, structures are declared and referenced the same 
    way they are in C. There are two main reasons why you would use structures 
    in D -- to organize your own data and to allow easy access to the 
    myriad of structures in the kernel.
  <p> Like other kinds of declarations in D, you may only 
    declare structures outside of probe clauses. The declaration syntax is the 
    same as C, as is the dot operator used to reference a structure member 
    (mystruct.x). Also, like C, if you are dealing with a pointer to a 
    structure, you can access a member using the arrow operator 
    (pmystruct-&gt;x). Most kernel structure references you run into will be 
    pointers. They come from basically two sources: built-in variables and 
    external variables. 
<p> Some of the built-in variables are pointers to 
  structures. For example, <i>curpsinfo</i> is a pointer to the current psinfo structure (see <b>man -s 4 proc</b>). An extremely 
  useful built-in variable is the <i>args</i> array. This is an array that represents the arguments 
  passed to the probe clause. The <i>args</i> array is referenced just like any array in C, using a 
  0-based index. However, the <i>args</i> array has been given a special capability -- the 
  probe provider can make each element of the <i>args</i> array a different type. For example, one probe might 
  define <i>args[0]</i> an 
  integer and <i>args[1]</i> a pointer to a structure. Another probe might define <i>args[0]</i>, <i>args[1]</i>, and <i>args[2]</i> to be pointers to 
  different structures. 
<p> This flexibility allows strongly typed access to the 
  most useful data that each probe has to offer. Note that not all probes 
  have the <i>args</i> array available. Some probes don't have any arguments. Others have 
  arguments, but the <i>args</i> array still isn't available. In those cases, there's 
  another set of built-in variables: <i>arg0</i> through <i>arg9</i>. However, these variables are just integers. If they 
  contain pointers to structures, the variables must be cast, and the 
  structures to which they point may need to be declared, unless 
  they're already declared by default (i.e., psinfo_t). The DTrace 
  guide details which arguments are available for each provider and probe.
<p> One of the providers that defines types for the <i>args</i> array is the <i>io</i> provider. It has a set of 
  probes named <i>start</i>, 
  which has various function names for different kinds of I/O. All of the <i>start</i> probes have three elements 
  in their <i>args</i> arrays:
<p>

<ul>
  <li> args[0] -- pointer to a bufinfo 
    structure
    
  <li> args[1] -- pointer to a devinfo 
    structure
    
  <li> args[2] -- pointer to a fileinfo 
    structure
</ul>
  <p> Each structure provides information about different 
    aspects of an I/O request. The following are the actual structure 
    definitions. These declarations are automatically provided to any clauses 
    called from an <i>io:::start</i> probe: you do not include them in your D program. This 
    information was extracted from the Solaris Dynamic Tracing Guide: 
<p>

<pre>
typedef struct bufinfo { 
    int b_flags;         /* flags */ 
    size_t b_bcount;     /* number of bytes */ 
    caddr_t b_addr;      /* buffer address */ 
    uint64_t b_blkno;    /* expanded block # on device */ 
    uint64_t b_lblkno;   /* block # on device */ 
    size_t b_resid;      /* # of bytes not transferred */ 
    size_t b_bufsize;    /* size of allocated buffer */ 
    caddr_t b_iodone;    /* I/O  completion routine */ 
    dev_t b_edev;        /* extended device */   
} bufinfo_t; 

typedef struct devinfo { 
    int dev_major;       /* major number */ 
    int dev_minor;       /* minor number */ 
    int dev_instance;    /* instance number */ 
    string dev_name;     /* name of device */ 
    string dev_statname; /* name of device + instance/minor */ 
    string dev_pathname; /* pathname of device */ 
} devinfo_t; 

typedef struct fileinfo { 
    string fi_name;      /* name (basename of fi_pathname) */ 
    string fi_dirname;   /* directory (dirname of fi_pathname) */ 
    string fi_pathname;  /* full pathname */ 
    offset_t fi_offset;  /* offset within file */ 
    string fi_fs;        /* filesystem */ 
    string fi_mount;     /* mount point of file system */ 
} fileinfo_t; 
  </pre>
With all this predefined power at hand, writing a D 
  program to inspect I/O information becomes a much easier task. Here's 
  an (<i>ios.d</i>) example 
  that prints some of this information, as each I/O start occurs:
  <p>

<pre>
#pragma D option quiet 
io:::start 
{ 
   printf (&quot;%5d %4d %4d %30s %30s\n&quot;, args[0]-&gt;b_bcount, 
           args[1]-&gt;dev_major, args[1]-&gt;dev_minor, 
           args[1]-&gt;dev_pathname, args[2]-&gt;fi_pathname); 
}
  </pre>
Your output should look something like this:
<p> 

<pre>
 8192  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a  /usr/share/lib/termcap 
 8192  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a                  &lt;none&gt;
32768  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a       /var/tmp/ExP3aOLg 
16384  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a       /var/tmp/ExP3aOLg 
16384  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a       /var/tmp/ExP3aOLg 
34816  136  8 /devices/pci@1f,0/ide@d/dad@0,0:a                  &lt;none&gt;
</pre>

<b>No Control Constructs: Deal With It </b>
<p> The lack of control constructs in D is not as limiting 
  as you might think. There are several methods 
  for getting around this limitation:
<p> 1. Use the C preprocessor to implement static 
  changes.
<p> 2. Utilize the ability to have more than one probe 
  clause per probe.
<p> 3. Use conditional expressions to assign alternate 
  values.
<p> 4. Drive your D script, or multiple D scripts, from a 
  parent script or program. 
<p>

  <b>C Preprocessor </b>
<p> As you may recall, when writing C programs, the C 
  preprocessor (cpp), performs a first pass on the C source file and looks 
  for directives that start with a # in column one. Based on the preprocessor 
  directive, the source code is modified and then 
  handed to the real compiler. For example, <i>#if</i>, followed by a logical expression, controls whether or not 
  a block of code gets included in the compilation. You can invoke the C 
  preprocessor for your D program using the <b>-C</b> flag on the DTrace command line. One use for this is to 
  make the <b>printf</b> format a common definition that can be maintained in one place.
<p> For example, here's how you might modify <i>execs.d</i> using the preprocessor 
  directive <i>#define</i>:
<p>

<pre>
#pragma D option quiet 
#define fmt &quot;%-20s %s\n&quot;
BEGIN 
{ 
  printf (fmt, &quot;===============&quot;, &quot;==============&quot;); 
  printf (fmt, &quot;Execing Process&quot;, &quot;Execed Process&quot;); 
  printf (fmt, &quot;===============&quot;, &quot;==============&quot;); 
} 
  ... 
  </pre>
There are other DTrace command-line options available 
  to control the preprocessor, such as <b>-D</b> to define a symbol or <b>-I</b> to add a path to the <i>#include</i> search. Any of these can also be included in the 
  script preamble (#!/usr/sbin/dtrace). The preprocessor can be used to 
  statically control which parts of the D program are given to the compiler.
  <p>

  <b>Multiple Probe Clauses for a Probe </b>
<p> Conditional logic in the probe clause can be 
  accomplished by dividing the clause into multiple clauses. The predicate is 
  used to select which clause is executed when the corresponding probe fires. 
  Also, since the size of a probe clause's trace record is static[1], 
  this is the only way to generate a varying amount of trace data for a 
  probe. For example, suppose I wanted to refine the printing of the header 
  and trailer in <i>execs.d</i>. It would be useful to reprint the header every 20 lines of 
  output, and omit the separator line at the end if there were no execs 
  printed: 
<p>

<pre>
#pragma D option quiet 
BEGIN 
{ 
   total = 0; 
} 
syscall::exec*:entry 
{ 
   self-&gt;exn = execname; 
} 
syscall::exec*:return 
/ self-&gt;exn !=NULL &amp;&amp; !(total % 20) / 
{ 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
   printf (&quot;%-20s %s\n&quot;, &quot;Execing Process&quot;, &quot;Execed Process&quot;); 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
} 
syscall::exec*:return 
/ self-&gt;exn != NULL / 
{ 
   printf (&quot;%-20s %s\n&quot;, 
   self-&gt;exn, execname); 
   self-&gt;exn = 0; 
   total++; 
} 
END 
/ total / 
{ 
   printf (&quot;%-20s %s\n&quot;, &quot;===============&quot;, &quot;==============&quot;); 
} 
END 
{ 
   printf (&quot;Total # of execs = %d\n&quot;, total); 
}
  </pre>
The exec return clauses are executed in order each 
  time the probe fires. The first clause will print the header if <i>total</i> is a multiple of 20 (which 
  of course includes 0). The beauty of this method is that if no execs 
  happen, the header will never be printed. When the <i>END</i> probe fires, if <i>total</i> is zero, the ending 
  separator is not printed.
  <p> Another good example exists in the <i>ios.d</i> script. In the output, you 
    probably noticed that <i>args[2]-&gt;fi_pathname</i> is the string <b>&lt;none&gt;</b> much of the time. This is because many IO requests are not 
    associated with any particular file. To pretty this up a bit, we could put 
    the tracing of the file path in a different clause, and bypass it 
    altogether if its value is <b>&lt;none&gt;</b>: 
<p>

<pre>
#pragma D option quiet 
io:::start 
{ 
   printf (&quot;%5d %4d %4d %s\n&quot;, args[0]-&gt;b_bcount, 
           args[1]-&gt;dev_major, args[1]-&gt;dev_minor, 
           args[1]-&gt;dev_pathname); 
} 
io:::start 
/ args[2]-&gt;fi_pathname != &quot;&lt;none&gt;&quot; / 
{ 
   printf (&quot;                %s\n&quot;, args[2]-&gt;fi_pathname); 
} 
  </pre>
The output should look something like this:
<p>

<pre>
 1024  136    8 /devices/pci@1f,0/ide@d/dad@0,0:a 
 1024  136    8 /devices/pci@1f,0/ide@d/dad@0,0:a 
24576  136    8 /devices/pci@1f,0/ide@d/dad@0,0:a 
                /var/tmp/Extya4Mg 
 8192  136    8 /devices/pci@1f,0/ide@d/dad@0,0:a 
                /var/tmp/Extya4Mg 
</pre>

<b>Using Conditional Expressions </b>
<p> This technique allows your D program to choose 
  different calculations to perform based on the probe data. As an 
  alternative to the previous example (<i>ios.d</i>) of splitting the printed output into two probe clauses, a 
  conditional expression can do the same thing in one probe clause: 
<p>

<pre>
#pragma D option quiet 
io:::start 
{ 
   printf (&quot;%5d %4d %4d %s%s\n&quot;, 
      args[0]-&gt;b_bcount, args[1]-&gt;dev_major, 
      args[1]-&gt;dev_minor, args[1]-&gt;dev_pathname, 
      args[2]-&gt;fi_pathname == &quot;&lt;none&gt;&quot; ? 
        &quot;&quot; : strjoin(&quot;\n             &quot;, args[2]-&gt;fi_pathname)); 
} 
</pre>
For this modification, I've also introduced a 
  string function, <i>strjoin</i>. The function returns a string with the two argument strings 
  concatenated. The conditional expression tests <i>args[2]-&gt;fi_pathname</i>. If it's equal to <b>&lt;none&gt;</b>, it prints a null string. If it's not equal to <b>&lt;none&gt;</b>, it prints the 
  pathname, but it does so with a newline and some extra white space. This 
  formats the pathname, so that it's lined up on the next line, just 
  like the split probe clause method [2]. The output should look just like 
  the previous example.
  <p> Another use for conditional expressions is to present 
    information in a more readable form. The kernel usually stores an 
    enumerated list of choices as a group of bits. For example, the <i>bufinfo</i> structure has a <i>b_flags</i> field that contains a 
    single bit that represents whether an I/O is a read or a write. In the <i>ios.d</i> script, we can mask 
    out this bit and then use a conditional expression to print a value that is 
    more descriptive than 1 or 0: 
<p> 

<pre>
#pragma D option quiet 
io:::start 
{ 
   printf (&quot;%c %5d %4d %4d %s%s\n&quot;, 
      args[0]-&gt;b_flags &amp; B_READ ? 'R' : 'W', args[0]-&gt;b_bcount, 
      args[1]-&gt;dev_major, args[1]-&gt;dev_minor, args[1]-&gt;dev_pathname, 
      args[2]-&gt;fi_pathname == &quot;&lt;none&gt;&quot; ? 
         &quot;&quot; : strjoin(&quot;\n               &quot;, args[2]-&gt;fi_pathname)); 
} 
  </pre>
Like C, the D language uses single quotes for 
  character constants and double quotes for string constants. I chose to use 
  a %c format item with character constants 'R' and 
  'W'. You could also have used %s with string constants 
  "R" and "W". The choice is somewhat arbitrary [3]. 
  This output should look like the previous examples, but with an R or W in 
  the first column.
  <p>

  <b>Driving the D Script from a Parent Script </b>
<p> In this method, you invoke the D script from another 
  program, such as a shell script. In the parent script, you make all the 
  decisions about how the D script is going to be invoked and then tailor the 
  D script accordingly. The D program source can be contained within the 
  shell script as one long command, or it can be invoked from a separate 
  file. If it's embedded in the shell script, you can use shell 
  variables to tailor the DTrace command line before it's invoked. 
  There are some excellent examples of this technique in the DTrace Toolkit 
  developed by Brendan Gregg at: 
<p>

<pre>
http://www.opensolaris.org/os/community/dtrace/dtracetoolkit/ 
  </pre>
If the D script is in a separate file, you can use D 
  macro variables on the DTrace command line to tailor the D program. See the 
  Solaris Dynamic Tracing Guide for more information about using macros.
<p>

<b>Aggregations </b>
<p> One of the most powerful features of DTrace is 
  aggregations, which provides the ability to automatically collect raw data 
  and print statistical reports. An aggregating function is executed using 
  the following general form: 
<p>

<pre>@aggname[key1, key2, ...] = aggfunc(arg1, arg2, ...); 
</pre>
where <i>aggname</i> is a variable used to uniquely identify this aggregation, 
  each key is an expression that defines how the aggregation is grouped, <i>aggfunc</i> is the name of one of 
  D's built-in aggregating functions, and each arg is an expression 
  that <i>aggfunc</i> acts 
  on. By default, an aggregating function collects data each time it's 
  executed, and the resulting statistics are printed when the D program exits 
  (either via the <i>exit</i> function or ^C).
  <p> As an example, let's suppose I want to modify <i>ios.d</i> to include a grand total 
    of both the number of I/O starts and the number of bytes read and written. 
    Also, I want to segregate the totals into read totals and write totals. To 
    get a total number of I/O starts, I'll use the <i>count</i> function, and to get a total 
    number of bytes read and written, I'll use the <i>sum</i> function: 
<p>

<pre>
#pragma D option quiet 
io:::start 
{ 
   self-&gt;rw = args[0]-&gt;b_flags &amp; B_READ ? &quot;R&quot; : &quot;W&quot;; 
   printf (&quot;%s %5d %4d %4d %s%s\n&quot;, self-&gt;rw, args[0]-&gt;b_bcount, args[1]-&gt;dev_major, 
      args[1]-&gt;dev_minor, args[1]-&gt;dev_pathname, 
      args[2]-&gt;fi_pathname == &quot;&lt;none&gt;&quot; ?
         &quot;&quot; : strjoin(&quot;\n             &quot;, args[2]-&gt;fi_pathname)); 

   @blcktotal[self-&gt;rw] = count(); 
   @bytetotal[self-&gt;rw] = sum(args[0]-&gt;b_bcount); 

   self-&gt;rw = 0; 
} 
  </pre>
You'll note that I've added a thread local 
  variable, <i>self-&gt;rw</i>, so that the conditional expression doesn't have to be 
  repeated. The keys for these aggregations are the same as what is printed 
  in the first column of the detail lines: "R" or 
  "W". I had to make them strings instead of chars: keys with the 
  char type, by default, are displayed as integers (which wouldn't look 
  as nice). It's also worth noting that <i>count</i> and <i>sum(1)</i> yield the same results. Upon exit, the new <i>ios.d</i> will display four lines 
  that look something like this:
  <p>

<pre>
  R                 107 
  W                 129 
  R              317440 
  W              418816 
  </pre>
We also have the ability to control the final output 
  using the <i>printa</i> data recording action. This action works much like the <i>printf</i> action. The format string for <i>printa</i> is 
  used to position and restrict how each result line is printed. Each regular 
  format item corresponds to one of the keys in the aggregation. A special 
  format item prefix, %@, corresponds to the aggregation result.
  <p> As an example, to get almost the same output as the 
    default (except for the amount of white space), you could use the following 
    in an <i>END</i> clause: 
<p>

<pre>printa (&quot;%s %@30d\n&quot;, @blcktotal); 
printa (&quot;%s %@30d\n&quot;, @bytetotal); 
  </pre>
However, to make the output easier to read, you can 
  change the field widths, add other constant data to the format, and 
  surround the <i>printa</i> actions with <i>printf</i> actions:
  <p>

<pre>
#pragma D option quiet 
io:::start 
{ 
   self-&gt;rw = args[0]-&gt;b_flags &amp; B_READ ? 'R' : 'W'; 
   printf (&quot;%c %5d %4d %4d %s%s\n&quot;, self-&gt;rw, args[0]-&gt;b_bcount, 
      args[1]-&gt;dev_major, args[1]-&gt;dev_minor, args[1]-&gt;dev_pathname, 
      args[2]-&gt;fi_pathname == &quot;&lt;none&gt;&quot; ? 
         &quot;&quot; : strjoin(&quot;\n              &quot;, args[2]-&gt;fi_pathname)); 

   @blcktotal[self-&gt;rw] = count(); 
   @bytetotal[self-&gt;rw] = sum(args[0]-&gt;b_bcount); 

   self-&gt;rw = 0; 
} 
END 
{ 
   printf (&quot;Blocks: R/W     Total\n&quot;); 
   printf (&quot;=====================\n&quot;); 
   printa (&quot;        %c %@11d\n&quot;, @blcktotal); 
   printf (&quot;\n&quot;); 
   printf (&quot; Bytes: R/W     Total\n&quot;); 
   printf (&quot;=====================\n&quot;); 
   printa (&quot;        %c %@11d\n&quot;, @bytetotal); 
} 
  </pre>
Note that I changed the result of the conditional 
  expression back to a <i>char</i>, rather than a <i>string</i>. Now that I have control over the output format of the 
  aggregations, I can use the <i>char</i> data type and actually print a character rather than 
  its integer representation. The output at the end, after you enter ^C, 
  should look something like this:
  <p>

<pre>
Blocks: R/W     Total 
===================== 
        R           4 
        W          36 
 Bytes: R/W     Total 
===================== 
        R        4096 
        W       50176
  </pre>

  <b>Profile Provider </b>
  <p> The <i>syscall</i> provider is an example of an anchored provider, because 
    its probes are triggered by events in the code that you are observing. 
    DTrace also has unanchored probes, which are asynchronous to the observed 
    code. The <i>dtrace</i> provider's probes are examples of unanchored probes. Another 
    unanchored probe provider is the <i>profile</i> provider. The <i>profile</i> provider's probes fire on a time interval. In <i>ios.d</i>, suppose you want to 
    print the aggregation results on a 15-second interval. You could use the 
    profile provider's <i>tick-15s</i> probe, which fires every 15 seconds. I've added this 
    probe to <i>ios.d</i> below: 
<p>

<pre>
   ...
 
END,tick-15s 
{ 
   printf (&quot;\n&quot;); 
   printf (&quot;Blocks: R/W     Total\n&quot;); 
   printf (&quot;=====================\n&quot;); 
   printa (&quot;       %c %@11d\n&quot;, @blcktotal); 
   printf (&quot;\n&quot;); 
   printf (&quot; Bytes: R/W     Total\n&quot;); 
   printf (&quot;=====================\n&quot;); 
   printa (&quot;       %c %@11d\n&quot;, @bytetotal);  
   clear (@blcktotal); 
   clear (@bytetotal); 
} 
  </pre>
The <i>io:::start</i> probe clause hasn't changed, but I added the <i>tick-15s</i> probe to the <i>END</i> clause. This will cause the 
  aggregations to be printed every 15 seconds, in addition to after the 
  script is interrupted. The <i>clear</i> functions zero out the result values for each aggregation, 
  making the output the total for the last 15-second period. If, instead, you 
  want a running total, just remove the <i>clear</i> functions.
  <p> The units that can be specified for the <i>tick</i> probes are: 
    nanoseconds (nsec or ns), microseconds (usec or us), milliseconds (msec or 
    ms), seconds (sec or s), minutes (min or m), hours (hour or h), days, (day 
    or d), and hertz (hz). Hertz (the default, if no suffix is supplied) 
    specifies the number of times per second the probe will fire.
  <p> The numeric value of the probe is completely 
    arbitrary. You could have just as easily used <i>tick-14s</i> or <i>tick-2s</i>. One of the interesting things about <i>profile</i> probes is that they don't exist until they are used. 
    If you run <b>dtrace -lP profile</b> before using the <i>profile</i> provider the first time, you'll see a handful of 
    probes that get created by default, but probably not <i>tick-15s</i>. When you run a D program 
    that uses this probe, it gets created. Once the probe is created, it 
    remains on the probe list until the system is rebooted or the <i>profile</i> module is unloaded [4]. 
    On top of that, if five different users are running a D program that 
    happens to use the <i>tick-15s</i> probe, they will all be using the same probe.
  <p> As you may recall, each DTrace consumer has its own 
    trace buffer. When the <i>tick-15s</i> probe fires, that event gets shared with all the buffers 
    for all the consumers who have clauses associated with that probe. This 
    also means that each DTrace consumer sees the firing of the probe at about 
    the same time. (There is a slight delay because of the buffer.) As a 
    result, you shouldn't write a D program that depends on the first 
    firing of a profile probe to be a certain amount of time from the start of 
    the program. If the same probe has been instrumented by another consumer, 
    your timing will vary according to when you enter the cycle. This is 
    easiest to see in an example. Try running the following command in two 
    different windows at the same time. Once the command is entered in the 
    first window, no matter when you start the second instance, you'll 
    see that each consumer shows <i>tick-15s</i> firing at about the same time: 
<p>

<pre>
dtrace -n tick-1s -n tick-15s
  </pre>

  <b>Summary </b>
  <p> In this article, I've taken you a lot deeper 
    into the D language than I did in part two. I think you can begin to see 
    the extreme flexibility of D, and the power of observability that DTrace 
    has on your system. In part four, I'll present some real examples of 
    problems and show you how to solve them using DTrace. Of course, along the 
    way, I'll explain more about the D language and some other probe 
    providers.
  <p>

  <b>Endnotes </b>
<p> [1] There's a couple of very good reasons why 
  the D language doesn't have flow control statements like if, while, 
  or for. In part two, I mentioned that a D program is compiled into a format 
  called DIF (D Intermediate Format). The DIF program for each probe clause 
  is executed in the kernel, with interrupts disabled. If a DIF program got 
  into a long or infinite loop, a processor would now be running a 
  long-lasting, kernel resident, uninterruptible thread.  To prevent 
  this possibility, the D compiler doesn't allow backward branches in 
  DIF code. This precludes any kind of loop construct. 
<p> Additionally, DTrace requires that each probe clause 
  produce a fixed-length trace record. This means that the total number of 
  bytes generated by all of the recording actions (trace, printf, etc.), for 
  one clause, must be constant. Each clause can generate a different size 
  record, but one clause must generate the same size record each time it is 
  invoked. If the designers allowed flow control statements, the size of the 
  trace record could vary, depending on whether the if condition was true.
<p> [2] You may be asking how we are cheating the static 
  trace record limitation with the conditional expression method. When the D 
  program alternates between the two possible results, isn't the DIF 
  program in the kernel sending a different-sized record to the buffer? 
  Actually it isn't (as you've probably guessed by my leading 
  question). In D, strings are always allocated at a pre-defined length. By 
  default, this pre-defined length is 256. The intermediate string generated 
  by the conditional expression is 256 bytes, regardless of how much data is 
  shoved into it. In this example, three integers and two 256-byte strings 
  are actually put into the buffer. When the DTrace consumer pulls the data 
  out of the buffer, it formats it using the <i>printf</i> format string, and varies the length of the output 
  based on the position of the terminating null character.
<p> [3] I say "somewhat" because there is a 
  distinct difference in how much data is put in the recording buffer, 
  considering that strings are always recorded at their full length, which by 
  default is 256 bytes.
<p> [4] DTrace providers are Solaris-loadable modules 
  that can be listed using <i>modinfo</i>. Any default probes for a provider are created when the 
  module is loaded. The provider's probes become undefined when the 
  module is unloaded (modunload -i <i>module_id</i>), or when the system is rebooted. So theoretically, 
  profile provider probes, that you've created, could be removed by 
  unloading the profile module, but I've never had success with this -- the module is always busy. 
<p>

  <i>Chip Bennett (<b>cbennett@laurustech.com</b>) is a systems engineer for Laurus Technologies (<b>http://www.laurustech.com</b>), a 
    Sun Microsystems partner. He has more than 20 years experience with Unix 
    systems, and holds a B.S. and M.S. in Computer Science. Chip consults with 
    Laurus and Sun customers on a variety of Solaris related topics, and he 
    co-chairs OS-GLUG, the OpenSolaris Great Lakes User Group (Chicago). </i>
<p>
</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
