<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i11: A New Approach to Account Activity Monitoring</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/nov2006.tar"><b class=codeListing>nov2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a4.gif" width="200" height="167" align="right">A New Approach to Account Activity Monitoring</h1>
            <p> Owen Stevens 
          <p> My standard /etc/motd has always stated something like 
            "Use of this system constitutes consent to monitoring..." The 
            truth is that until recently, almost no monitoring was taking place. Sure, 
            I use an endless variety of security tools and mechanisms to keep potential 
            Bad Guys out of my systems, but what about the Good Guys? Once a user is 
            authenticated, the motd is little more than an empty threat. 
          <p> In my situation, there are three good reasons to 
            monitor shell account activity. The first is, of course, security -- 
            shell accounts are occasionally issued to consultants, vendors, and 
            frequently to local end users. Although all of these users are essentially 
            trusted, I cannot guarantee that their accounts will not be compromised or 
            improperly used. Second, the ability to monitor account activity enhances 
            my team's efficacy when troubleshooting end user sessions. Third, 
            account monitoring satisfies some auditing requirements that are specified 
            in corporate policies. Conversely, there is no good reason not to implement 
            this functionality, as shell users on my production systems do not have any 
            reasonable expectation of privacy. 
          <p> During my time as a sys admin, I have often found 
            myself trying to re-trace a user's steps. Typical Unix system 
            configurations do not lend themselves well to this type of forensic 
            investigation. There are only four basic tools at our disposal: the lastlog 
            (or equivalent), shell history files, the sudo log (if applicable), and the <b>find</b> command. 
          <p> I usually start by examining the lastlog to determine 
            the relevant login times of the account in question. Although reliable, the 
            information provided is minimal. I then refer to the shell history file 
            associated with the account. This method has several major drawbacks. 
            History files do not timestamp entries or separate sessions, therefore it 
            can be difficult to correlate shell history with the information contained 
            in the lastlog. Users obviously need write permissions 
            to their own history files, a necessity that all but eliminates their 
            usefulness as a monitoring component. The sudo 
            log is only useful when the account has access to privileged commands, although it does a 
            decent job of logging both successful and failed attempts in those 
            instances. Both the sudo log and the shell history file are similarly 
            limited when they record the execution of an interactive command. When 
            interactive commands are executed, only the command itself is logged; any 
            subsequent interaction is not recorded. In the cases of missing or 
            incomplete shell history files, I can use the <b>find</b> command to list files owned or writable by the 
            account, that have been modified since a given time. At this point, I have 
            completely given up any pretense of monitoring and am merely searching for 
            clues. 
          <p> To live up to the claims I implied in /etc/motd, I 
            need to dramatically improve my ability to monitor user account activity. 
            As I set out to accomplish this, I soon became aware of a significant 
            limitation -- any solution will inevitably involve some process 
            invoked by the user at login. It follows that the user will thereby have 
            write access to any files created by such a process, as well as the ability 
            to terminate the process. Resolution of this core issue precedes any 
            reasonable claim of progress. I considered various options, but each one 
            invariably led me back to the same paradoxical problem, until I eventually 
            devised an acceptable response. 
          <p>

            <b>The Access Server </b>
          <p> I decided to "wrap" access to the server 
            in question by introducing an intermediary server to which users must 
            connect as the prerequisite path to their intended destination server. This 
            "access server" can be a small PC running Linux, on which the 
            user has almost no privileges. The access server performs three essential 
            duties: it handles user authentication, session monitoring, and 
            connectivity to the "destination server". All of these should 
            occur with complete transparency from a user perspective. I began by 
            setting up user accounts on the access server to match those on the 
            destination server. Because I don't want the users to have to enter 
            their password twice, I set up ssh keypairs that use a null passphrase for 
            each account. Once a user authenticates on the access server, a connection 
            to the destination server can be established without any further 
            interaction from the user. This procedure is often referred to as 
            "passwordless ssh", which I won't cover in this article 
            because suitable tutorials are readily available on the Internet. 
          <p> Session monitoring is accomplished on the access 
            server with <b>screen</b>, 
            which is invoked by the user at login. To ensure that the user has no other 
            privileges on the access server, I need to make some rather debilitating 
            changes to /etc/bashrc and /etc/profile. I'm okay with doing this 
            because the access server has no other role in my infrastructure. In 
            addition to these changes, I also need to disable the sftp subsystem in the 
            sshd_config file, and ensure that the access server will not run any 
            network services in addition to sshd. I have now restricted all non-root 
            users to a screen session, which logs their activity and initiates a 
            connection to the destination server. When this process exits, the user is 
            logged off the system, and because exec is used, there is no opportunity 
            for the user to break into a local shell. Although users have write 
            permissions to their own logs, there is no available interface to these 
            files. The relevant changes in each file are shown below. /etc/bashrc: 
          <p>

          <pre>
# /etc/bashrc 
[...] 
# Effectively disable scp by echoing something to STDOUT at login: 
/bin/echo &quot;scp disabled&quot;
            </pre>
and /etc/profile:
<p>

<pre>
# /etc/profile 
[...] 
if [ &quot;$USER&quot; != &quot;root&quot; ]; then 
        exec /usr/bin/screen -l -L -q -s \
          '/usr/local/bin/connect.sh' -c /etc/screenrc 
        exit 
fi 
# 
</pre>
A working screen installation is assumed in 
    /etc/profile. The two necessary files, connect.sh, and screenrc, are shown 
    below. /etc/screenrc:
<p>

<pre>
# /etc/screenrc 
[...] 
logtstamp on 
logfile &quot;/var/log/screenlogs/screenlog.%c:%s&quot;
#
</pre>
and /usr/local/bin/connect.sh:
<p>

<pre>
#!/bin/bash 
# /usr/local/bin/connect.sh 
/usr/bin/ssh $USER@destination.domain.net 
# 
</pre>
Any session on the destination server can now be 
    monitored (with a slight delay) by the superuser who runs <b>tail -f</b> on the 
    corresponding screen log file on the access server. Screen log files can be 
    retained or moved to a backup tape for archival purposes. With this 
    approach, account monitoring cannot be tampered with, even after a 
    successful privilege escalation attack on the destination server.
    <p>

    <b>The Destination Server </b>
  <p> On the destination server, there are a couple of 
    slight changes to make. I'd like to set the maximum number of 
    concurrent sessions to one per non-root account, to ensure linear creation 
    of the screen logs on the access server. I'll also use a host-based 
    firewall on this server to deny ssh connections that do not originate from 
    the access server. This step guarantees that the access server is used 
    every time. Due to excellent documentation of host-based firewalls 
    available on the Internet, I'll skip discussing this step any 
    further. Here is the stanza in /etc/profile that limits the number of 
    sessions: 
  <p>

  <pre>
# /etc/profile 
[...] 
# Only one concurrent session per non-root account allowed 

readonly INSTANCES=`w|awk '{print $1}'|grep -w `whoami`|wc -l' 
if [ &quot;$INSTANCES&quot; -gt 1 ] &amp;&amp; [ b$USERb != brootb ]; then 
  stty susp ^- intr ^- eof ^- quit ^- 
  echo &quot;You are already logged in.&quot;
  sleep 5 
  exit 
fi 
# 
    </pre>
Now that session activity is properly recorded, 
    I'd like to incorporate a notification method that can be used on 
    selected accounts. When vendors and consultants use their shell accounts, 
    I'd like to be independently notified and have the option to review 
    their work. I would also like to be alerted to account activity whenever I 
    am troubleshooting or investigating a specific account over a period of 
    more than one day. I have found AIDE to be very useful for this purpose.
<p> Typically, vendor accounts may have sudo access to 
  specified commands, and they may have write access to application 
  configuration files, and sometimes database access. For each account, I 
  identify any pertinent files and directories. The level of granularity 
  varies considerably between accounts; of course, each particular situation 
  must be analyzed. I'll demonstrate a basic example configuration of 
  /etc/aide.conf.  If the vendor1 user modifies any file in his home 
  directory, or modifies his crontab, then this activity will be detected: 
<p>

<pre>
# Configuration file for AIDE 
@@define DBDIR /var/lib/aide 
database=file:@@{DBDIR}/aide.db.gz 
database_out=file:@@{DBDIR}/aide.db.gz 
gzip_dbout=yes 
verbose=20 
report_url=file:/var/log/aide.log 
report_url=stdout 
[...] 
# Custom Rules 
FILE = p+i+u+g+n+s+b+m+c+md5 
DIR = p+i+u+g 

# Files and directories to monitor: 

=/home/vendor1$                         DIR 

/var/spool/cron/vendor1                 FILE 
# 
</pre>
Notice that this AIDE configuration differs from the 
    standard recommended practice; the archive log and the initialized log are 
    the same. That's because I'm going to run /usr/sbin/aide from cron and, if any changes are detected, I'll 
    receive a report via email. The cron job will then reinitialize the AIDE 
    database by running <b>/usr/sbin/aide -i</b>. This way, any 
    detected changes will only be reported once. Here is an example detail from 
    the report, in this case indicating a modified crontab file:
    <p>

  <pre>
File: /var/spool/cron/vendor1 
  Size     : 684                               , 629 
  Mtime    : 2006-04-21 10:31:55               , 2006-07-05 12:07:04 
  Ctime    : 2006-02-09 22:32:22               , 2006-07-05 12:07:04 
  Inode    : 7209157                           , 7209134 
  MD5      : kAe8EKx2mXQmmrSbAitp7A==          , 
N/Sr/vD3/7oQ0UnyK4fbmA= 
# 
    </pre>

    <b>Putting It All Together </b>
    <p> Finally, I recommend configuring ntpd on both servers 
      so that the clocks on both these systems are synchronized. This step will 
      greatly assist any future forensic use of the screen logs. With this 
      accomplished, I have deployed an effective combination of ssh and screen 
      within an enforced shell environment, which records session activity in a 
      tamper-resistant fashion. The resulting logs provide detail superior to 
      anything previously available, and this functionality has been deployed 
      without interruption of service or negative user experience. My team also 
      now has a valuable session troubleshooting resource. 
  <p> I'm sure that nobody actually reads /etc/motd, 
    but I like to think it can have a little more weight than expected. On my 
    systems, you can take it to the bank. 
  <p>

    <i>Owen Stevens is currently employed as the Senior 
      Systems Administrator for a medium-sized online retailer. He has more than 
      eight years of experience as a Unix/Linux Administrator and runs a small 
      consultancy. Owen can be contacted at: <b>ostevens@gmail.com</b>.</i> 
  <p>

  </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
