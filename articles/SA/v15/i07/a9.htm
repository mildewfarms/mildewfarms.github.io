<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i07: Questions and Answers</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/jul2006.tar"><b class=codeListing>jul2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_questions.gif" width="245" height="130" align="right">Questions and Answers </h1>
            <p> Amy Rich
            <p> <b><font size="+2">Q</font></b> We have an old Alpha that we&rsquo;re trying to decommission, which is running Digital Unix 5.1. Our plan is to move all of the people on it to an existing Solaris 8 server, but Digital Unix stores its passwords in a database instead of a flat file. Is there an easy way to pull the hashed password out of the database for each user so we can just migrate their current passwords over, or do we have to make everyone log in and set new passwords on the new machine? 
            <p>

            <b><font size="+2">A </font></b> The answer to your question depends on whether your Digital Unix machine is using 3DES passwords or an extended password format for extra security. If your users&rsquo; passwords are all 3DES, then you can pull the necessary information out of the Digital Unix password database. If you&rsquo;re using something other than 3DES, there&rsquo;s no way (that I know of) to migrate from that format back to 3DES.
            <p>There are two files that hold password hashes: 
              
            <pre>
/tcb/files/auth.db
  Enhanced security password database for system accounts.
/var/tcb/files/auth.db
  Enhanced security password database for user accounts. 
            </pre>
So, assuming you&rsquo;re using 3DES, you can either try to parse each of those files using a script, or you can whip up a short C program to use the <b>getespwuid()</b> call. Here&rsquo;s a quick and dirty example of a C program that will do what you want (minus decent error checking):
<pre>
/********************************************************************
** getshadow.c
**
** Retrieve crypted passwd hash of specified UID from protected password
** databases on Digital Unix 5.1.
**
** Compile as cc getshadow.c -lsecurity -ldb -laud -lm -o getshadow
********************************************************************/

#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/security.h&gt;
#include &lt;prot.h&gt;

main (argc, argv)
int        argc;
char      *argv[];
{
  struct es_passwd *acct;
  int uidnum;
  int i;

  uidnum = atoi (argv[1]);
  set_auth_parameters(argc, argv);
  initprivs();

  /* print out a Solaris style /etc/shadow entry for a valid UID */

  if (acct-&gt;ufld-&gt;fd_encrypt == NULL) {
    printf("BADENTRY:%d:NP:6445:::::: \n", uidinput);
  }
  else if (strlen (acct-&gt;ufld-&gt;fd_encrypt) != 13) {
    printf("%s:NP:6445::::::\n", acct-&gt;ufld-&gt;fd_name);
  }
  else {
    printf("%s:%s:6445::::::\n", acct-&gt;ufld-&gt;fd_name,
    acct-&gt;ufld-&gt;fd_encrypt);
  }
}
 </pre>
To create an entire /etc/shadow file for a Solaris machine, you&rsquo;d run the above program, feeding it the input of all the UIDs in the <b>/etc/passwd</b> file:
<pre>
touch /tmp/shadow
chmod 600 /tmp/shadow
for i in `awk -F: '{print $3}' /etc/passwd`; do
  ./getshadow $i &gt;&gt; /tmp/shadow
done
 </pre>
The above program makes sure that the crypted password entries are all 13 characters to verify that you&rsquo;re using 3DES passwords. For those accounts that have more or less than 13 characters, including <b>NOLOGIN</b>, as their crypted password hash, the program gives them a <b>NP</b> (No Password) entry.  You may want to change this to <b>*LK*</b> (Locked), depending on whether you want these accounts to be able to run cron jobs.
<p>If you&rsquo;re instead parsing the output of <b>edauth -g &lt;username&gt;</b>, you&rsquo;ll want the <b>u_pwd= field</b>.  If it&rsquo;s a 3DES password, you can match it in perl with something like the following:
  
<pre>
open (AUTH, "edauth -g $username |") || die or die "Cannot open \
  edauth -g $username\n";
while (&lt;AUTH&gt;) {
  if (/u_pwd=/) {
    $_ =~ s/.*u_pwd=([\w\.\/]*):.*/$1/e;
    chomp; 
</pre>

<p> <b><font size="+2">Q</font></b>At our company, we have a gateway machine that handles all incoming mail and hands it off to another machine acting as a mail hub. Both of these boxes are running sendmail 8.13.6. We want to use the <b>redirect</b> functionality to bounce messages for employees who are no longer with the company, but to do that, you need to consult the aliases file. Since the gateway host is forwarding everything to an internal mail hub, it never looks at the aliases file. We could put the <b>redirect</b> entries on the internal mail host, but the problem is that we wind up attempting to bounce a lot of forged spam that&rsquo;s passed the initial gateway machine.
<p>Is there any way we could use the <b>redirect</b> functionality on the gateway machine so we don&rsquo;t wind up accepting a lot of spam and then either bouncing the message back to some innocent person who got joe jobbed (or just holding it in our mailq because it&rsquo;s trying to bounce back to an invalid address)? For reference, here&rsquo;s our current sendmail.mc:
  
<pre>
divert(0)dnl
VERSIONID(`@(#)sendmail.mc       8.13.6.1 (gw.my.domain) 5/4/2006')
OSTYPE(aix5)dnl
FEATURE(`use_cw_file')dnl
FEATURE(`always_add_domain')dnl
FEATURE(`masquerade_envelope')dnl
FEATURE(`masquerade_entire_domain')dnl
FEATURE(`allmasquerade')dnl
MASQUERADE_AS(`my.domain')dnl
FEATURE(`nouucp',`reject')dnl
FEATURE(`redirect')dnl
FEATURE(`access_db')dnl
FEATURE(`blacklist_recipients')dnl
FEATURE(`dnsbl', `dul.dnsbl.sorbs.net', \
 `"550 5.7.1 ACCESS DENIED to "$&{client_addr}" \
 by dul.dnsbl.sorbs.net \
 (http: //www.dnsbl.us.sorbs.net/cgi-bin/lookup?js&IP=)"', `')dnl
FEATURE(`dnsbl', `dnsbl.njabl.org', `"550 5.7.1 ACCESS DENIED to \
 "$&{client_addr}" by dnsbl.najbl.org (see http://njabl.org/)"', `')dnl
FEATURE(`dnsbl', `list.dsbl.org', `"550 5.7.1 ACCESS DENIED to \
 "$&{client_addr}" by list.dsbl.org (see http://dsbl.org/)"', `')dnl
FEATURE(`dnsbl', `sbl.spamhaus.org', `"550 5.7.1 ACCESS DENIED to \
 "$&{client_addr}" by sbl.spamhaus.org \
 (see http: //www.spamhaus.org/sbl/index.lasso)"', `')dnl
define(`MAIL_HUB',`smtp')dnl
define(`confSAFE_QUEUE', `true')
define(`confPRIVACY_FLAGS', ``authwarnings,noexpn,novrfy'')dnl
define(`confTO_IDENT', `0s')dnl
define(`confSMTP_LOGIN_MSG', `$j (WE DO NOT ACCEPT UCE OR UBE)')dnl
MAILER(local)dnl
MAILER(smtp)dnl
</pre>

<p>
              <b><font size="+2">A </font></b> As you pointed out, you can&rsquo;t use <b>redirect</b> because you&rsquo;re never consulting your aliases database since you&rsquo;ve defined a <b>MAIL_HUB</b> definition. What you can do, though, is use an access_db entry to accomplish more or less the same thing. Say you want to inform people that the user <b>joe@my.domain</b> is no longer with your company and has moved to <b>jdoe@another.domain</b>. You&rsquo;d add something like the following entry to your access file:
  
<pre>
To:joe@my.domain ERROR:"550 joe@my.domain is no longer with My
Company, use jdoe@another.domain to reach him regarding personal
matters and newcontact@my.domain for inquiries about My Company."
</pre>
Be sure to rebuild the <b>access.db</b> file and HUP sendmail for the changes to take effect.
<p> <b><font size="+2">Q</font></b>We&rsquo;re centralizing our home directories from various machines onto one Netapp. From here on out, we&rsquo;ll be using automounter to mount home directories individually via NFS on all of these other machines.
<p>On the current standalone machines, the user&rsquo;s home directory is stored in a hashed directory structure based on the first two characters of the user&rsquo;s username. For example, the user fred would have the home directory <b>/home/f/r/fred</b> and the user mary would use <b>/home/m/a/mary</b>. We don&rsquo;t really have enough users to warrant such a scheme, so we want to flatten this to simply be <b>/home/fred</b> and <b>/home/mary</b>. This will enable us to use a very simple catchall <b>&</b> construct in the automounter map.
<p>What&rsquo;s the best way to migrate all the user home directories to the Netapp with minimal downtime?
<p>
              
              <b><font size="+2">A </font></b>You can always write a simple script that specifies the location of the home directory on the fly and have automounter use that instead of the <b>&</b> expansion variable. Regardless of your choice to reorganize the directory structure, your best bet for minimal downtime is probably rsync. Since the Netapp doesn&rsquo;t have rsync as part of its operating environment, you&rsquo;ll need to do the data move on the client machine via NFS instead of over ssh or rsh.
<p>To begin, mount the Netapp partition on the machine you want to copy the files from, making sure you have root-level access to the filesystem:
  
<pre>
mkdir /mnt/netapp
mount netapp:/vol/vol0/homedirs /mnt/netapp
</pre>
Now perform an initial rsync to copy all of the data over. At this point, we aren&rsquo;t going to worry about reorganizing the directory structure, since we&rsquo;ll be doing another rsync just before it&rsquo;s time to swap the filesystems. The <b>--delete</b> flag will delete anything in <b>/mnt/netapp</b> that does not exist in <b>/home</b>:
<pre>
rsync -av --delete /home/ /mnt/netapp
</pre>
Just before you&rsquo;re ready to swap the disks, make sure that the filesystem is quiescent and that no users are logged in. Run the rsync one final time, then move the directories around:
<pre>
rsync -av --delete /home/ /mnt/netapp

# In case you have single character usernames that will clash with the
# top level of the hashed level directory structure, put accounts in a
# tmp directory first (this assumes you don't have a user named tmp).
mkdir /mnt/netapp/tmp
mv /mnt/netapp/*/* /mnt/netapp/tmp

# Use rmdir to prune the now empty directories in the hashed tree.
# You'll get an error for tmp, since it's not empty.
rmdir /mnt/netapp/*/*
rmdir /mnt/netapp/*

# move all of the accounts into their final home and remove the tmp
# directory
mv /mnt/netapp/tmp/* /mnt/netapp/
rmdir tmp
</pre>
At this point you need to modify your <b>fstab</b> (or <b>vfstab</b>) files, removing the entry for the local home directory filesystem, and unmount both filesystems. You&rsquo;ll also want to turn on automounter and make sure your <b>auto_home</b> maps are up to date. Presumably you&rsquo;re doing something akin to the following in <b>auto_home</b>:
<pre>
fred netapp:/vol/vol0/homedirs/&
mary netapp:/vol/vol0/homedirs/&
</pre>
Have the following in <b>auto_master</b> (perhaps with the addition of the nosuid and/or nodev flags for security):
<pre>
/home           auto_home       -nobrowse
</pre>
Should any issues arise and you need to roll back the changes you&rsquo;ve made (and assuming you haven&rsquo;t added any new accounts since the migration), it&rsquo;s best to work from the listings on the old disk. This assumes that you&rsquo;ve disabled automounter and the Netapp disk is mounted as <b>/home</b> now while the old local home directory disk is mounted as <b>/mnt/oldhome</b>:
<pre>
# Build up a list of users and copy their files back, ignoring the
# Netapp .snapshot directories.
#
# This assumes that all of your users are nested two directories down
# and have no weird embedded characters in their usernames.

cd /mnt/oldhome

for i in `ls'; do
  cd $i
  for j in `ls' do
    rsync --delete -av --exclude .snapshot /home/$j/ /mnt/oldhome/$i/$j
  done
  cd ..
done
</pre>
Depending on the reason you need to roll back, you may not want to use the <b>--delete </b>flag (e.g., missing files or certain types of corruption).
<p>
              
<b><font size="+2">Q </font></b>I&rsquo;m attempting to create a Solaris package for a machine running 5.9. This particular package has a <b>postinstall</b> script that requires some user input, so I&rsquo;ve tried using various forms of redirection and piping with the <b>pkgadd</b> command (using things like shift and or read inside the script). No matter what I try, I can&rsquo;t seem to make the script ask me the necessary questions before the package is installed. I know this is possible because I&rsquo;ve seen other packages do it, but I&rsquo;m stumped as to how they manage to take input. Could you write me a very simple <b>postinstall</b> script and an example of <b>pkgadd</b> to illustrate the proper syntax?
<p>
              
<b><font size="+2">A </font></b>The issue is that there&rsquo;s no way for any of the scripts (<b>preinstall</b>, <b>postinstall</b>, <b>preremove</b>, <b>postremove</b>) to take user input, and you can&rsquo;t use redirection or piping with pkgadd. The Solaris packaging suite does include a way to get information from the user outside of these scripts, though. If you take a look through Sun&rsquo;s Solaris 9 Application Packaging Developer&rsquo;s Guide, you&rsquo;ll that there&rsquo;s a request script that will do what you need:
  <a href="http:%20//docs.sun.com/app/docs/doc/817-1778" target="_blank">
http: //docs.sun.com/app/docs/doc/817-1778
</a>
  .
<p>Here&rsquo;s an example request script that checks whether an old version of the package, under a different name, is installed. If so, and you choose not to overwrite it, the request script tells you how to remove the other package. It then asks whether you&rsquo;d like to install documentation and/or example scripts and prompts for the location if you say yes:
  
<pre>
OPKGNAME="oldpkg"
PKGNAME="newpkg"

DEF_DOC_DIR="${BASEDIR}/doc"
DEF_SCRIPT_DIR="${BASEDIR}/bin"
INST_DOC=NO
INST_SCRIPT=NO

pkginfo -q $OPKGNAME
OVERWRITE=$?
if [ $OVERWRITE -eq 0 ]; then
  echo "WARNING: Found previously-installed version of this package: "
  pkginfo -l ${OPKGNAME}
  echo "  Run the command 'pkgrm ${OPKGNAME}'."
  echo "  After ${OPKGNAME} has been successfully removed, \
       run 'pkgadd ${PKGNAME} again."
  exit 1
fi

printf "\n%s" "Install user documentation? [y]: "
read ANSWER
ANS=`echo ${ANSWER} | tr '[:upper:]' '[:lower:]'`
if [ "X${ANS}" = "Xy" -o "X${ANS}" = "Xyes" -o "X${ANS}" = "X" ]; then
  DOC_DIR=`ckpath -aof -d $DEF_DOC_DIR -p \
  "Where would you like to install the documentation? \
  [${DEF_DOC_DIR}]: "` || exit $?
  INST_DOC=YES
fi

printf "\n%s" "Install example scripts? [y]: "
read ANSWER
ANS=`echo $ANS|tr '[:upper:]' '[:lower:]'`
if [ "X${ANS}" = "Xy" -o "X${ANS}" = "Xyes" -o "X${ANS}" = "X" ]; then
  SCRIPT_DIR=`ckpath -aof -d $DEF_SCRIPT_DIR -p \
  "Where would you like to install the example scripts? \
  [${DEF_SCRIPT_DIR}]: "` || exit $?
  INST_SCRIPT=YES
fi

cat &gt;$1 &lt;&lt;!
DOC_DIR=${DOC_DIR}
SCRIPT_DIR=${SCRIPT_DIR}
INST_DOC=${INST_DOC}
INST_SCRIPT=${INST_SCRIPT}
!
exit 0
</pre>
Now you can put something like the following in your <b>postinstall</b> script to install the documentation and/or example scripts:
<pre>
umask 022

if [ ${INST_DOC} = YES ]; then
  echo "Extracting documentation into ${DOC_DIR}"
  mkdir -p ${DOC_DIR}
  cd ${DOC_DIR} && if [ -f ${BASEDIR}/${PKGNAME}/docs.zip ]; then
    unzip ${BASEDIR}/${PKGNAME}/docs.zip
  else
    echo "Can`t find ${BASEDIR}/${PKGNAME}/docs.zip"
    exit 1
  fi
fi

if [ ${INST_SCRIPT} = YES ]; then
  echo "Extracting example scripts into ${SCRIPT_DIR}"
  mkdir -p ${SCRIPT_DIR}
 cd ${SCRIPT_DIR} && if [ -f ${BASEDIR}/${PKGNAME}/scripts.zip ]; then
    unzip ${BASEDIR}/${PKGNAME}/scripts.zip
  else
    echo "Can't find ${BASEDIR}/${PKGNAME}/scripts.zip"
    exit 1
  fi
fi
</pre>
Include the following line in your <b>prototype</b> file before you build the package with <b>pkgmk</b>:
<pre>
i request
</pre>

<p>If you later want to automate your package installation for use with JumpStart, you can use the <b>pkgask</b> program to generate a default response file to the questions in your <b>request</b> file. </p>
<p><i>Amy Rich has more than a decade of Unix systems administration experience in various types of environments. Her current roles include that of Senior Systems Administrator for the University Systems Group at Tufts University, Unix systems administration consultant, author, and charter member of LOPSA. She can be reached at: <b>qna@oceanwave.com</b>.</i></p>
<p>
          
        </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
