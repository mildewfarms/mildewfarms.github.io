<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i03: Inside-Out Objects</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/mar2006.tar"><b class=codeListing>mar2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="../../resource/1_perl.gif" width="245" height="130" align="right">Inside-Out 
              Objects</h1>
            <P> Randal L. Schwartz
            <P> In my previous article, "Generating Object Accessors", which appeared 
              in the January 2006 issue, I created a traditional hash-based Perl 
              object: a Rectangle with two attributes (width and height) using 
              the constructor and accessors like so:
            <P> 
            <pre>
package Rectangle;
sub new {
  my $class = shift;
  my %args = @_;
  my $self = {
    width =&gt; $args{width} || 0;
    height =&gt; $args{height} || 0;
  };
  return bless $self, $class;
}
sub width {
  my $self = shift;
  return $self-&gt;{width};
}
sub set_width {
  my $self = shift;
  $self-&gt;{width} = shift;
}
sub height {
  my $self = shift;
  return $self-&gt;{height};
}
sub set_height {
  my $self = shift;
  $self-&gt;{height} = shift;
}
</pre>
            I can construct a 3-by-4 rectangle easily:
            <P> 
            <pre>
my $r = Rectangle-&gt;new(width =&gt; 3, height =&gt; 4);
</pre>
            At this point, $r is an object of type Rectangle, but it's also simply 
            a hashref. For example, the code in <B>set_width</B> merely deferences 
            a value like $r to gain access to the hash element with a key of <B>width</B>. 
            But does Perl require such code to be located within the Rectangle 
            package? No. As a <B>user</B> of the Rectangle class, I could easily 
            say:
            <P> 
            <pre>
$r-&gt;{width} = 5;
</pre>
            and update the width from 3 to 5. This is "peering inside the box" 
            and will lead to fragile code, because we've now exposed the implementation 
            of the object, not just the interface.
            <P> For example, suppose we modify the <B>set_width</B> method to 
              ensure that the width is never negative:
            <P> 
            <pre>
use Carp qw(croak);
sub set_width {
  my $self = shift;
  my $width = shift;
  croak "$self: width cannot be negative: $width"
    if $width &lt; 0;
  $self-&gt;{width} = $width;
}
</pre>
            If the $width is less than 0, we <B>croak</B>, triggering a fatal 
            exception, but blaming the caller of this method. (We don't blame 
            ourselves, and <B>croak</B> is a great way to pass the blame.)
            <P> At this point, we'll trap erroneous settings:
            <P> 
            <pre>
$r-&gt;set_width(-3); # will die
</pre>
            But if someone has broken the box open, we get no fault:
            <P> 
            <pre>
$r-&gt;{width} = -3; # no death
</pre>
            This is bad, because the author of the Rectangle class no longer controls 
            behavior for the objects, because the data implementation has been 
            exposed.
            <P> Besides exposing the implementation, another problem is that I 
              have to be careful of typos. Suppose in rewriting the <B>set_width</B> 
              method, I accidentally transposed the last two letters of the hash 
              key:
            <P> 
            <pre>
  $self-&gt;{widht} = $width;
</pre>
            This is perfectly legal Perl and would not throw any compile-time 
            or run-time errors. Even <B>use strict</B> isn't helping here, because 
            I'm not misspelling a variable name, just naming a "new" hash key. 
            Without good unit tests and integration tests, I might not even catch 
            this error. Yes, there are some solutions to ensure that a hash's 
            keys come from only a particular set of permitted keys, but these 
            generally slow down the hash access significantly.
            <P> We can solve both of these problems at once, without significantly 
              impacting the performance of our programs by using what's come to 
              be known as an <B>inside-out object</B>. First popularized by Damian 
              Conway in the neoclassic <I>Object-Oriented Perl</I> book, an inside-out 
              object creates a series of parallel hashes for the attributes (much 
              like we had to do back in the Perl4 days before we had hashrefs). 
              For example, instead of creating a single object for a rectangle 
              that is 3 by 4:
            <P> 
            <pre>
my $r = { width =&gt; 3, height =&gt; 4 };
</pre>
            we can record its attributes in two separate hashes, keyed by some 
            unique string:
            <P> 
            <pre>
my $r = "some unique string";
$width{$r} = 3;
$height{$r} = 4;
</pre>
            Now, to get the height of the rectangle, we use the unique string:
            <P> 
            <pre>
my $width = $width{$r};
</pre>
            and to update the height, we use that same string:
            <P> 
            <pre>
$height{$r} = 10;
</pre>
            When we turn on <B>use strict</B> and declare the <B>%width</B> and 
            <B>%height</B> attribute hashes, this will trap any typos related 
            to attribute names:
            <P> 
            <pre>
use strict;
my %width;
my %height;
...
my $r = "another unique string";
$height{$r} = 7; # ok
$widht{$r} = 3; # won't compile!
</pre>
            The typo on the width is now caught, because we don't have a <B>%widht</B> 
            hash. Hooray. That solves the second problem. But how do we solve 
            the first problem, and where do we get this "unique string", and how 
            do we get methods on our object?
            <P> If I assign a blessed anonymous empty hash to $r:
            <P> 
            <pre>
my $r = bless {}, "Rectangle";
</pre>
            then when the value of <B>$r</B> is used as a string, I get a nice 
            <B>unique</B> string:
            <P> 
            <pre>
Rectangle=HASH(0x400180FE)
</pre>
            where the number comes from the hex representation of the internal 
            memory address of the object. As long as this reference is alive, 
            that memory address will not be reused. Aha, there's our unique string:
            <P> 
            <pre>
sub new_7_by_3 {
  my $self = bless {}, shift;
  $height{$self} = 7;
  $width{$self} = 3;
  return $self;
}
</pre>
            And this is what our constructor does! By blessing the object, we'll 
            return to the same package for methods. By having an anonymous hashref, 
            we're guaranteed a unique number. And as long as the lexical <B>%height</B> 
            and <B>%width</B> hashes are in scope, we can access and update the 
            attributes.
            <P> But what are we returning? Sure, it's a hashref, but it's empty. 
              There's no code that we can use to get from <B>$r</B> to the attribute 
              hashes:
            <P> 
            <pre>
my $r = Rectangle-&gt;new_7_by_3;
</pre>
            The only way we can get the height is to have code in the same scope 
            as the definitions of the attribute hashes:
            <P> 
            <pre>
sub height {
  my $self = shift;
  return $height{$self};
}
</pre>
            And then we can use that code in our main program:
            <P> 
            <pre>
my $height = $r-&gt;height;
</pre>
            The first parameter is <B>$r</B>, which gets used only for its unique 
            string value, as a key into the lexical <B>%height</B> hash! It all 
            Just Works.
            <P> Well, for some meaning of Works. We still have a couple of things 
              to fix. First, there's really no reason to make an anonymous hash, 
              because we never put anything into it, so we might as well make 
              it a scalar:
            <P> 
            <pre>
my $self = bless \(my $dummy), shift;
</pre>
            Because Perl doesn't have a primitive anonymous scalar constructor, 
            I'm cheating by making a <B>$dummy</B> variable.
            <P> Second, we've got some tidying up to do. When a value is no longer 
              being referenced by any variable, we say it <I>goes out of scope</I>. 
              When a traditional hashref-based object goes out of scope, any elements 
              of the hash are also discarded, usually causing the values to also 
              go out of scope (unless they are also referenced by some other live 
              value). This all happens quite automatically and efficiently.
            <P> However, when our inside-out object goes out of scope, it doesn't 
              "contain" anything. However, its address-as-a-string is being used 
              in one or more attribute hashes, and we need to get rid of those 
              to mimic the traditional object mechanism. So, we'll need to add 
              a <B>DESTROY</B> method:
            <P> 
            <pre>
sub DESTROY {
  my $dead_body = $_[0];
  delete $height{$dead_body};
  delete $width{$dead_body};
  my $super = $dead_body-&gt;can("SUPER::DESTROY");
  goto &amp;$super if $super;
}
</pre>
            Note that after deleting our attributes, we also call any superclass 
            destructor, so that it has a chance to clean up, too.
            <P> Let's put it all together:
            <P> 
            <pre>
package Rectangle;
my %width;
my %height;
sub new {
  my $class = shift;
  my %args = @_;
  my $self = bless \(my $dummy), $class;
  $width{$self} = $args{width} || 0;
  $height{$self} = $args{height} || 0;
  return $self;
}
sub DESTROY {
  my $dead_body = $_[0];
  delete $height{$dead_body};
  delete $width{$dead_body};
  my $super = $dead_body-&gt;can("SUPER::DESTROY");
  goto &amp;$super if $super;
}
sub width {
  my $self = shift;
  return $width{$self};
}
sub set_width {
  my $self = shift;
  $width{$self} = shift;
}
sub height {
  my $self = shift;
  return $height{$self};
}
sub set_height {
  my $self = shift;
  $height{$self} = shift;
}
</pre>
            Not bad! That's only slightly more complex than a traditional hashref 
            implementation and a lot safer for the "outside". Of course, this 
            is a lot of code to get right, so the best thing is to let someone 
            else do the hard work. See <B>Class::Std</B> and <B>Object::InsideOut</B> 
            for some budding frameworks to build these objects. Until next time, 
            enjoy!
            <P> <I>Randal L. Schwartz is a two-decade veteran of the software 
              industry -- skilled in software design, system administration, security, 
              technical writing, and training. He has coauthored the "must-have" 
              standards: </I>Programming Perl<I>, </I>Learning Perl<I>, </I>Learning 
              Perl for Win32 Systems<I>, and </I>Effective Perl Programming<I>. 
              He's also a frequent contributor to the Perl newsgroups, and has 
              moderated comp.lang.perl.announce since its inception. Since 1985, 
              Randal has owned and operated Stonehenge Consulting Services, Inc.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
