<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i03: Better Find and Replace on HTML Content</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><span class="navbarLink"><a href="a4_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a4_l2.htm">Listing 2</a></span></td>
		<td><a href="../../../../source/SA/2006/mar2006.tar"><b class=codeListing>mar2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a4.gif" width="200" height="167" align="right">Better 
              Find and Replace on HTML Content</h1>
            <P> Charles M. Dalsass 
            <P> How many times have you run into situations in which you need 
              to find and replace HTML content across a large Web site? For example, 
              you need to swap out headers and footers with SSIs (server side 
              includes) on a large static Web site for better maintainability, 
              or you need to find a header image across a site and replace it 
              with another header image. The best tools for performing Find and 
              Replace against HTML content are bundled with commercial HTML editing 
              software. These tools are GUI-based, normally run on Windows or 
              Macintosh, and include the the ability to cut multi-line chunks 
              of HTML and replace all pages in a folder or site with another multi-line 
              chunk of HTML. Most allow you to use regular expressions in your 
              search. 
            <P> However, there are limitations to GUI software when performing 
              find-and-replace tasks across large numbers of Web pages. The most 
              obvious limitation is not having access to an environment with these 
              tools installed, such as a Unix or server environment. This article 
              describes these limitations and shows how to perform similar find-and-replace 
              operations on the command line by using a few scripts and standard 
              Unix command-line utilities. This article should be as relevant 
              to sys admins as it is to Web developers. If you've ever spent time 
              cleaning up a Web site that has been corrupted by a virus, you will 
              agree. 
            <P> My company, Neptune Web, Inc., needed a practical, command-line 
              alternative to GUI search-and-replace facilities. I've always been 
              told that Perl is great for matching text, but found that it's difficult 
              to perform find and replace without writing a new program every 
              time. I also wanted the interface to be as intuitive as possible. 
            <P> Finally, I wanted to fix the other shortfalls of GUI-based find 
              and replace: 
            <P> 
            <ul>
              <li> GUI tools lack the ability to track changes (revision control) 
                and undo them if you make a mistake. 
              <li> GUI tools normally don't allow you to script out multiple searches 
                and replacements (e.g., if a first match doesn't work, try a second 
                match etc.). 
              <li> It's difficult to record searches and replacements that were 
                performed in the past, since everything is GUI-based. Options 
                such as "regular expression" or "ignore whitespace" can't be written 
                down since they only exist as checkboxes in the GUI. This can 
                be particularly irksome if you have made a mistake at some point 
                in the process of reworking hundreds of documents and have since 
                made other changes. 
              <li> With GUI find and replace, it's difficult to choose subsets 
                of files or folders, apart from "everything in the site", "everything 
                in the folder", etc. 
              <li> GUI tools lack the ability to do "reverse" matches, where you 
                grab content from one, known spot and work your way backwards 
                to perform the replacement. This can be a useful way to grab content 
                within nested tables. 
              <li> In most GUI find-and-replace tools, the regular expressions 
                have been simplified. For example, many tools don't have the ability 
                to control greediness (i.e., no ability to match random stuff 
                between two known tags that may repeat beyond the match in which 
                you are interested, such as table tags.) Nested tables, for example, 
                become difficult to match if you are looking for a particular 
                table. 
            </ul>
            <P> 
            <P> Our company has written a Perl program called "dwreplace.pl" (see 
              Listing 1) that, in combination with some "old school" Unix utilities, 
              does all of the above. We've tried to make the command-line interface 
              as simple as possible, with real examples in the output, so you 
              won't forget how to use it. 
            <P> In a command-line environment, such as the bash shell, it's possible 
              (but difficult) to pass large strings of text to programs (e.g., 
              <B>grep</B>), since most programs have line-based options and return 
              characters in the options cause problems. To simplify passing complex 
              arguments to the program, the program uses what I call an "rfile" 
              (replacement file). The rfile defines a list of possible matches 
              and replacements to make against the Web pages, defined in a (Perl) 
              array format (run the program with <B>-e</B> to see an example rfile). 
              The rfile also serves as a history of your searches, which allows 
              you to run them again if something went wrong. 
            <P> The program is run like this: 
            <P> 
            <pre>
dwreplace (other options) --rfile=rfile file1 [file2 ... filen]
</pre>
            where "rfile" is the name of the rfile, and <B>file1..filen</B> are 
            the files on which the search and replace is performed. 
            <P> The program works by converting the HTML text you've pasted into 
              the rfile into a Perl regular expression that is "whitespace insensitive". 
              It also escapes out all characters that have special meanings within 
              the regular expression. For example, if you have a block of text 
              like this: 
            <P> 
            <pre>
&lt;br&gt;
&lt;br&gt;$5.00 per item*
&lt;/p&gt;
</pre>
            the program converts that into a Perl regular expression like this 
            (<B>\s*</B> matches 0 or more whitespace characters) by escaping all 
            special characters and turning whitespace into <B>\s*</B>: 
            <P> 
            <pre>
&lt;br&gt;\s*&lt;br&gt;\$5\.00\s*per\s*item\*\s*&lt;\/p&gt;\s*
</pre>
            Let's start with an easy example. Suppose I have 1000 HTML pages with 
            a background color in a table cell and a tag that I'd like to remove. 
            The old HTML looks like this: 
            <P> 
            <pre>
&lt;td bgcolor="#000000" id="termbodybox"&gt;
</pre>
            or possibly this: 
            <P> 
            <pre>
&lt;td bgcolor="#000000" id="bodybox"&gt;
</pre>
            And I'd like to replace the tags with this HTML snippet: 
            <P> 
            <pre>
&lt;td id="termbodybox"&gt;
</pre>
            I realize this would be a very trivial replacement to do in the GUI 
            tools -- you'd just have to run the replacement two times. This example 
            would also be trivial running <B>sed</B> or <B>perl -ni</B> two times. 
            <P> To enable "rollback" and revision control of changes, I'm going 
              to check in all the files using RCS (revision control system). Although 
              any revision control system could be used, RCS is a great because 
              of its availability (on *NIX systems) and simplicity. RCS will create 
              a revision history of the file next to the file you are working 
              on (it's stored in a <B>[filename],v</B> file). The <B>,v</B> file 
              can be deleted or removed with no effect on the overall project. 
              (Keep in mind that it is important to delete any ancillary files 
              such as "rfiles" or <B>,v</B> files when you are have finished a 
              find and replace. By-products left on publicly accessible Web folders 
              could reveal information about your system to hackers.) RCS has 
              been around forever, so it's pre-installed on almost all Unix/Linux 
              distributions. You can read more about RCS here: 
            <P> 
            <pre>
http://www.gnu.org/software/rcs/rcs.html
</pre>
            or by running <B>man rcsintro</B>. 
            <P> I'm going to combine an RCS <B>"initial"</B> check-in with a <B>find</B> 
              command to check in all the .html files in the site. The <B>-i -t-"initial"</B> 
              says to create the <B>,v</B> files associated with each HTML page, 
              using the string <B>"initial"</B> as a starter comment. The <B>-u</B> 
              ensures that the files don't disappear (odd as it sounds). I also 
              use the <B>null</B> option to find so that filenames containing 
              spaces or quotes won't cause an error: 
            <P> 
            <pre>
find . -type f -name "*.html" -print0 | xargs -0 ci -u -i -t-"initial"
</pre>
            Using my dwreplace.pl, I define an rfile (run <B>dwreplace.pl -e</B> 
            to see a sample rfile), called, for example, "removetablecolors.rfile". 
            The rfile defines the "OLD" and "NEW" arrays, which are the find and 
            replace strings, respectively. The code in the configuration file 
            is standard Perl, so anything goes here (including HERE documents 
            [shown below], variables, functions, or single- or double-quoted strings). 
            Matches are performed linearly through the array, against each file 
            passed to the program: 
            <P> 
            <pre>
$OLD[0] = &lt;&lt;'END_OF_TEXT';
&lt;td bgcolor="#000000" id="termbodybox"&gt;
&lt;p&gt;
END_OF_TEXT
</pre>
            In this example and in the documentation embedded in the dwreplace.pl 
            program, I've use Perl's single-quoted HERE documents to define the 
            boundaries of the <B>$OLD[0]</B> string. I often paste a half page 
            or more of HTML between the <B>END_OF_TEXT</B> lines. I use this notation 
            so that I don't have to escape special characters found in the HTML 
            blocks, such as single quotes. 
            <P> Since the rfile is standard Perl, any Perl quoting syntax works 
              fine, for example: 
            <P> 
            <pre>
$OLD[0] =
     '&lt;td bgcolor="#000000" id="termbodybox"&gt;
     ';
</pre>
            The notation above can be easier to read for shorter strings. If you 
            use this notation, be sure to escape any single quotes that occur 
            in the HTML snippet or the Perl code in the rfile will not compile 
            properly.
            <P> The <B>$NEW</B> array contains the text to be substituted in place 
              of the <B>$OLD</B>:
            <P> 
            <pre>
$NEW[0] = &lt;&lt;'END_OF_TEXT';
&lt;td id="termbodybox"&gt;
END_OF_TEXT
</pre>
            Now we use the array index to define the next find and replace. You 
            can add as many matches as you like:
            <P> 
            <pre>
$OLD[1] = &lt;&lt;'END_OF_TEXT';
&lt;td bgcolor="#000000" id="bodybox"&gt;
&lt;p&gt;
END_OF_TEXT

$NEW[1] = &lt;&lt;'END_OF_TEXT';
&lt;td id="bodybox"&gt;
END_OF_TEXT
</pre>
            That completes the rfile. Back to RCS and the command line, I check 
            out and lock the HTML files using RCS like this:
            <P> 
            <pre>
find . -type f -name "*.html" -print0 | xargs -0 co -l
</pre>
            Then I run dwreplace.pl like this:
            <P> 
            <pre>
dwreplace.pl --rfile= removetablecolors.rfile 'find . \
  -name "*.html" -print'
</pre>
            Note that at this time I do not have a <B>-null</B> option for the 
            program, so I run the program using shell backtick notation instead. 
            This assumes a limited number of files (or the shell will say the 
            argument list is too long) and that your filenames don't have funny 
            characters such as spaces and quotes. If these conditions are met, 
            the simpler backtick notation can be used. You can always reduce the 
            number of input files by using <B>grep -l</B> to reduce the number 
            of candidate input files.
            <P> I can always see my changes with RCS by running rcsdiff:
            <P> 
            <pre>
find . -type f -name "*.html" -print0 | xargs -0 rcsdiff | less
</pre>
            If I don't like my changes, I can undo (rollback) using this command:
            <P> 
            <pre>
find . -type f -name "*.html" -print0 | xargs -0 co -l -f
</pre>
            If I'm sure replacement worked fine, I can check in (commit a revision) 
            and comment my files as well. Keeping revisions makes it easy for 
            me to revert to a given version:
            <P> 
            <pre>
find . -type f -name "*.html" -print0 | xargs -0 ci -u  \
     -m'removed table color'
</pre>
            Of course, the program allows you to use regular expressions in the 
            rfile, instead of cut-and-pasted HTML. For each match that you define, 
            you can pass options such as:
            <P> <b>isregexp</B>: the match is a regular expression
            <P> <B>interpolator</B>: interpolate backreferences in the right-hand 
              side (i.e. $1, $2 .. etc.)
            <P> <B>eflag</B>: execute the right hand side (right hand side is 
              normally a function or expression)
            <P> <B>reversefile</B>: reverse the file prior to performing the match.
            <P> <B>casesensitive</B>: perform a case sensitive match (default 
              is case insensitive)
            <P> For my second example, I want to replace everything between the 
              two comment tags (see below) with an include file to make the site 
              easier to maintain. I know that there is some variation in content 
              between the comments, so I need to use a regular expression to match 
              everything between the tags:
            <P> &lt;!-- Menu Starts --&gt; any random HTML with variable whitespace 
              &lt;!-- Menu Ends --&gt; to become:
            <P> 
            <pre>
&lt;!-- Menu Starts --&gt;
include("righthandnav.php");
&lt;!-- Menu Ends --&gt;
</pre>
            Let's put together a regular expression to match the HTML text containing 
            the comments. In Perl, the regular expression to match the comment 
            tags would look sort of like this:
            <P> 
            <pre>
&lt;!-- Menu Starts --&gt;.*?&lt;!-- Menu Ends --&gt;
</pre>
            But, you need to be sure to escape the parts of the regular expression 
            that you don't want treated specially (such as "?" or "."). Since 
            this is HTML, you also want to be sure that you accept strings with 
            variable whitespace as a match. I've extracted a function from dwreplace.pl 
            into a standalone program called "escape_perl_regular_expression" 
            (Listing 2), which replaces existing whitespace with <B>\s*</B> and 
            takes out the funny characters:
            <P> 
            <pre>
[cdalsass@house dev]$ escape_perl_regular_expression
&lt;!-- Menu Starts --&gt;.*?&lt;!-- Menu Ends --&gt;

(the regular expression above was pasted in to yield)

&lt;!--\s*Menu\s*Starts\s*--&gt;\.\*\?&lt;!--\s*Menu\s*Ends\s*--&gt;\s*
</pre>
            Of course I do want the <B>.*?</B> part of the regular expression, 
            so I un-escape it to yield this:
            <P> 
            <pre>
&lt;!--\s*Menu\s*Starts\s*--&gt;.*?&lt;!--\s*Menu\s*Ends\s*--&gt;\s*
</pre>
            That completes the regular expression. Next, I define an rfile (run 
            <B>dwreplace.pl -e</B> to see a sample rfile), called, for example 
            "rightnav.rfile":
            <P> 
            <pre>
# Example rfile, rightnav.rfile:
# Note: use a normal Perl single quoted string here, since it's a
# single line regular expression

$OLD[0] = '&lt;!--\s*Menu\s*Starts\s*--&gt;.*?&lt;!--\s*Menu\s*Ends\s*--&gt;\s*';

$NEW[0] = &lt;&lt;'END_OF_TEXT';
&lt;!-- Menu Starts --&gt;
include("/rightnav.inc");
&lt;!-- Menu Ends --&gt;
END_OF_TEXT

# use the isregexp option in the rfie.

$OPTIONS[0] = {
   isregexp =&gt; 1,
};
</pre>
            An important thing to remember about Perl's regular expressions is 
            greediness versus non-greediness. Most GUI tools do not support a 
            greediness meta-character, but modern Perl regular expressions do. 
            When matching HTML content, non-greediness is always represented by 
            a question mark, usually like this <B>.*?</B>. In this case, it only 
            matters if there are other "Menu Ends" comment tags after the first. 
            (A non-greedy match will grab only up to the first "Menu Ends" tag, 
            while the greedy match will grab all content up to the final "Menu 
            Ends" comment tag.)
            <P> For my third example, I'd like to show a "reverse search and replace". 
              In this type of search, you reverse the contents of the file and 
              regular expression, perform the match, and then un-reverse the file.
            <P> Regular expression algorithms move linearly forward though the 
              match-string as different match attempts are made. For matches where 
              your known text is ahead of repeating, known text, this forward 
              moving behavior can be undesirable.
            <P> To illustrate the general case of how reversing the match string 
              can simplify your regular expressions, consider writing a regular 
              expression to find the file extension in a filename such as "theory.of.int.design.edoc" 
              or "case.b.doc", where "doc" or "edoc" are both valid results. It 
              is easier to reverse the filename and search forward for all characters 
              up to the first period and reverse the results than to concoct a 
              regular expression using "look behind" regular expressions.
            <P> The same is often true when matching HTML content. For example, 
              suppose you know the phrase "Click Here to" exists in a page, and 
              you want to grab all HTML from "Click Here to", backwards to the 
              next two table tags. (The following HTML code shows the structure 
              of the HTML; note that table tags above the "Click Here to" may 
              be nested and non-distinguishable from other table tags, which makes 
              this more complicated than having a single or uniquely identifiable 
              table above the text. You may also want to generalize the regular 
              expression by ignoring unique table tags so that you can get more 
              input files to match.) I prefer to do this with a reverse search, 
              because Perl regular expressions work forward through the match-string. 
              The reverse search keeps your regular expressions simpler. As an 
              example, consider this HTML code:
            <P> 
            <Pre>
&lt;table&gt;&lt;!-- random html --&gt;
&lt;table&gt;
&lt;table&gt;
random html
&lt;!-- grab everything from this point (two table tags before \
  "Click here to") to the text "Click here to" --&gt;
&lt;table&gt;
random html
&lt;table&gt;
random html
Click Here to
&lt;!-- grab everything above this point, to the previous 2 table \
  tags --&gt;
</pre>
            To perform this search, I combine the <B>isregexp</B> and <B>reversefile</B> 
            options for the match. I also reverse the text of the regular expression. 
            The rfile looks like this:
            <P> 
            <pre>
$OPTIONS[0] = [ isregexp , reversefile ];

$OLD[0] = 'ot ereh kcilC.*?&gt;elbat&lt;.*?&gt;elbat&lt;';

$NEW[0] = '&lt;p&gt;&lt;center&gt;{$sendbutton}&lt;/center&gt;&lt;/p&gt;';
</pre>
            There are a few optional parameters that can be passed to wreplace.pl. 
            They are:
            <P> <b>--s</B> -- Sarch only, do not replace.
            <P> <B>--e</B> -- Show an example rfile.
            <P> <B>--v</B> -- Verbose mode, shows detailed matching info and highlighted 
              text for changes (under development).
            <P> <B>--ni</B> -- Case-sensitive mode (not insensitive).
            <P> 
            <P> It takes a combination of tricks to improve GUI search and replace 
              tools. This article should help you to perform these operations 
              more effectively. It also allows you to do these operations when 
              using the command line. Finally, the dwreplace.pl program is a nice 
              tool to keep around in your toolkit, whether you are a Web developer 
              or a sys admin.
            <P> <I>Charles M. Dalsass is the CTO of Neptune Web, Inc., a Boston 
              area full-service, Web design and development company. Neptune Web, 
              Inc. provides open source consulting services as well as content 
              management software, creative services, development and hosting. 
              Charles can be reached at <B>charles.dalsass@neptuneweb.com</B>.</I></table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
