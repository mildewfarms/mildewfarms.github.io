<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i09: Listing 4 arp method</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>

<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink"><a href="a2.htm">Article</a></span></td>
		<td><span class="navbarLink"><a href="a2_f1.htm">Figure 1</a></span></td>
		<td><span class="navbarLink"><a href="a2_f2.htm">Figure 2</a></span></td>
		<td><span class="navbarLink"><a href="a2_l1.htm">Listing 1</a></span></td>
		<td><span class="navbarLink"><a href="a2_l2.htm">Listing 2</a></span></td>
	</tr>
	<tr>
		<td><span class="navbarLink"><a href="a2_l3.htm">Listing 3</a></span></td>
		<td><span class="navbarLink">Listing 4</span></td>
		<td><span class="navbarLink"><a href="a2_l5.htm">Listing 5</a></span></td>
		<td><a href="../../../../source/SA/2006/sep2006.tar"><b class=codeListing>sep2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h2>Listing 4 <I> arp method</I></h2>
<pre>
public byte[] arp(InetAddress ip, InetAddress srcip, \
  int networkInterfaceID) throws java.io.IOAcception{

    /*  Verify that we obtained a valid networkInterfaceID */

            if (networkInterfaceID < 0 || devices.length <= networkInterfaceID)
                    return null;

    /*  Set device to the network interface specified by the 
        networkInterfaceID */

    NetworkInterface device=devices[networkInterfaceID];

    /*  Lets obtain our MAC address and put it in an array of bytes called 
        myMac */

                byte[] myMac = myMacAddress(networkInterfaceID);

    /*  Initialize our network device and open it for sending/receiving  */

    JpcapCaptor captor=JpcapCaptor.openDevice(device,2000,false,3000);
    captor.setFilter("arp",true);

    /*  initiate our sender instance of the network  device */ 

    JpcapSender sender=captor.getJpcapSenderInstance();

    /*  We will use ff:ff:ff:ff:ff:ff as our broadcast address so everyone 
        on our network will receive the ARP request */

    byte[] broadcast=new \
      byte[]{(byte)255,(byte)255,(byte)255,(byte)255,(byte)255,(byte)255};

    /*  Initiate an ARPPacket called arp and  build the packet */

                ARPPacket arp=new ARPPacket();
    arp.hardtype=ARPPacket.HARDTYPE_ETHER; //set hardware type to Ethernet
    arp.prototype=ARPPacket.PROTOTYPE_IP;  // set the protocol type to IP
    arp.operation=ARPPacket.ARP_REQUEST;   // define the operation to be an 
                                           // ARP request
    arp.hlen=6;                               //  Hardware address length
    arp.plen=4;                               // protocol address length
    arp.sender_hardaddr=myMac;                // Set the MAC address of the 
                                              // sender to our MAC add
    arp.sender_protoaddr=srcip.getAddress();  // Set the IP address of the 
                                              // sender to our IP add
    arp.target_hardaddr=broadcast;            // Set the MAC address of the 
                                              // remote to the broadcast add
    arp.target_protoaddr=ip.getAddress();     // Set the IP address of the 
                                              // remote to the remote IP add

    /*  Initiate the EthernetPacke ether that will transport the ARP request 
        and start to build the packet */

    EthernetPacket ether=new EthernetPacket();
    ether.frametype=EthernetPacket.ETHERTYPE_ARP;  // set the Ethernet Frame 
                                                   // type to a ARP request
    ether.src_mac=myMac;   //  Set the source MAC address to our MAC address
    ether.dst_mac=broadcast;  //  Set the destination MAC address to the 
                              // broadcast ADD
    arp.datalink=ether;       // Set the Data Link Layer of the arp packet 
                              // to the Ethernet packet

    /*  send out the ARP request */

    sender.sendPacket(arp);

    /*  Captor the information coming back to our computer, and see if an 
        ARP response was sent back if not throw an Acception */

    while(true){
        ARPPacket p=(ARPPacket)captor.getPacket();  
                       // captor any packet that fits the filter
        if(p==null)    // if the filter timesout send an acception back
        {
            throw new IllegalArgumentException(ip+" did not responed to \
              ARP request");
        }
        
        /*  If the address of the captured packet equals the remote ip 
            address return the senders MAC address */

        if(Arrays.equals(p.target_protoaddr,srcip.getAddress()))
        {
            return p.sender_hardaddr;
        }
    }
}
</pre>
            </table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
