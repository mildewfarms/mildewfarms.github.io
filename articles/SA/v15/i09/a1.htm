<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 4.0//EN">


<HTML>
<HEAD>
<TITLE>v15, i09: Network Device Configuration Management</TITLE>
<LINK REL=StyleSheet HREF="../../resource/css/sacdrom.css" TYPE="text/css" TITLE="CSS1">
</HEAD>

<body bgcolor="#ffffff" text="#000000" link="#000000" alink="#669999" vlink="#333366" topmargin=0 leftmargin=0>
<! -- Begin MASTER TABLE -- >
<!center>
<table width=98% cellpadding=0 cellspacing=0 border=0 bgcolor="#ffffff">
  <tr>

<table cellpadding=5 cellspacing=0 border=0>
	<tr>

		<td><span class="navbarLink">Article</span></td>
		<td><a href="../../../../source/SA/2006/sep2006.tar"><b class=codeListing>sep2006.tar</b></a></td>

	</tr>
</table>


</tr>
<tr>
<! -- Begin Content ------ >
    <td valign=top width=527 bgcolor="#ffffff"> 
      <table width=100% cellpadding=15 cellspacing=0 border=0>
<tr>
          <td valign=top> 
            <! -- Insert Content ------ >
            <h1><img src="a1.gif" width="200" height="167" align="right">Network Device Configuration Management </h1>
            <p> Anshuman Kanwar 
          <p> Your most elaborate disaster recovery 
            plans are only as good as your backups. In the context of routers (and most 
            firewalls), all configuration is normally stored as a plain-text file in 
            flash memory or some sort of NVRAM. Creating a replica of a router in case 
            of catastrophic failure is simply a matter of physically plugging in a cold 
            standby and copying the configuration from some backup medium onto the new 
            device. 
          <p> Rancid (Really Awesome New CIsco config Differ) is a 
            tool that automates the process of backing up 
            device configuration. In this article, I will discuss how to install and 
            maintain rancid and also explore the benefits that result from having a 
            working, up-to-date rancid repository. 
          <p>

            <b>What Is Rancid? </b>
          <p> Rancid is a combination of shell, Perl, and Expect 
            scripts that work together to provide configuration management. Although 
            the name implies Cisco-only support, the tool has grown to work with a 
            multitude of devices from most major vendors. Adding extensions for new 
            device classes is also fairly easy. Details about supported devices can be 
            found at: 
          <p>

          <pre>
http://www.shrubbery.net/rancid/ 
            </pre>
Rancid takes as input a list of device names and login 
    credentials. It then cycles through this list and attempts to log into each 
    device. Then, it runs a pre-determined set of commands at the CLI and 
    collects the responses. Subsequently, it tries to match the generated 
    output against a template to filter out incrementing changes and sensitive 
    information. For instance, this step can mask out plain-text passwords or 
    IPSec keys from the config file [1]. This output is compared, using diff, 
    against the one generated via the prior run of the same process. These 
    diffs are emailed to a set of admins, and, finally, the new file is checked 
    into a version control system. Both CVS and subversion are supported (as of 
    version 2.3.1).
<p>

<b>Benefits </b>
<p> There are many uses for these collected configs 
  besides the obvious disaster recovery scenario. In the first place, it 
  becomes pretty easy to search for a line of config across multiple devices. 
  As a simple example, suppose you want to find all interfaces that lack a 
  "descr" line. A more involved example could be the case where 
  you want to find any switch ports that are non-trunk, have "spanning 
  tree portfast" enabled but may not have "bpdugard" 
  enabled. With rancid this information is available on a local file system, so instead of logging into every router, you can 
  parse, filter, and analyze it using standard 
  text-manipulation tools such as grep, awk, or Perl. 
<p> The second win is for inventory control and patch 
  management. Since all routers are already in 
  the configuration management system, a report can be generated enumerating 
  the code version across them. Depending on the device type, a list of 
  modules can be created allowing you to track, for instance, how many of 
  your network blades are Fast Ethernet (10/100) and how many are Gigabit 
  Ethernet (10/100/1000). 
<p> The third benefit is that the operator does not have 
  to log in to the device to look at a config or to confirm how to implement 
  something. He or she can simply pull up the configuration as a Web page 
  [2]. Human error is (therefore) reduced in proportion to the decreased 
  number of operations performed directly on CLI. 
<p> Fourth, change management and tracking are 
  automatically implemented. Hourly cron jobs can be set up to mail config 
  diffs to senior network engineers so that all changes can be tracked. After 
  the end of change windows, the tool can be run manually to report deltas 
  across all device configs. 
<p> Finally, rancid includes a looking-glass service. 
  This means that status check commands (such as "sho ip route 
  &lt;ip&gt;" or "sho ip bgp summary") can be run by 
  filling in a Web form. No direct ssh login to the router is required. You 
  can see some examples of looking glasses at: 
<p>

<pre>

http://bgp4.net/wiki/doku.php?id=tools:ipv4_looking_glasses 
</pre>

<b>Installing the Dependencies </b>
<p> The following install instructions are based on Fedora 
  Core 5. You can modify them to function with your packaging system or 
  flavor of *nix: 
<p>

<pre>
# make sure the pre-requisites are installed 
su - 
yum install gcc 
yum install make 
yum install automake 
yum install cvs        # installs tcsh as a dependency 
yum install perl 
yum install expect     # installs tcl as a dependency 
yum install diffutils 
exit 
</pre>

<b>Installing Rancid </b>
<p> The actual installation is fairly easy: 
<p>

<pre>
wget ftp://ftp.shrubbery.net/pub/rancid/rancid-2.3.1.tar.gz 
tar -xzvf rancid-2.3.1.tar.gz 
cd rancid-2.3.1 
view README
./configure --prefix=/home/rancid --localstatedir=/home/rancid/data/ 
su - 
groupadd rancid 
useradd rancid -g rancid 
make install 
chown -R rancid:rancid /home/rancid/ 
exit 
</pre>

<b>Component Overview </b>
<p> At the end of the above steps, all rancid-related 
  files are installed under /home/rancid. The collected configurations will 
  live under /home/rancid/data. The main config file will be 
  /home/rancid/etc/rancid.conf. All interesting scripts live under 
  /home/rancid/bin. The login credentials will be stored in 
  /home/rancid/.cloginrc.
<p> Bin/rancid-run is the top-level script and is 
  typically run via cron. It in turn calls bin/control_rancid. This is the 
  main script responsible for launching a collection process per router. More 
  than one router can be collected simultaneously. This script manages the 
  router.db files, which define the lists of routers that need to be 
  collected; it also sends out diffs via email post data collection. 
  Bin/control_rancid calls bin/rancid-fe. If you peruse this script, you will 
  discover that it acts as the switchboard that launches an appropriate 
  collection script for every platform. Here are a few lines from 
  bin/rancid-fe: 
<p>

<pre>
elsif ($vendor =~ /^baynet$/i)     { exec('brancid', $router); } 
elsif ($vendor =~ /^cat5$/i)       { exec('cat5rancid', $router); } 
elsif ($vendor =~ /^cisco$/i)      { exec('rancid', $router); } 
</pre>
This implies that every platform has a <b>{$plat}rancid</b> script that 
    actually runs the collection commands [3]. These <b>{$plat}rancid</b> scripts are mostly 
    written in Perl. The final pieces of the puzzle are <b>bin/{$plat}login</b> scripts. These are 
    Expect scripts that perform the actual password exchange and provide the 
    authenticated CLI for the <b>{$plat}rancid</b> scripts to run commands on.
    <p> Also note that in addition to grabbing the config by 
      running <b>sho running-config</b> on Cisco, for example, the <b>{$plat}rancid</b> scripts run a multitude of informational commands, such as <b>sho modules</b> and <b>sho vlan</b>. As the output of 
      these commands is strictly informational in nature and is not required for 
      restoring device configuration, it is put in the repository preceded by a 
      comment character (e.g., a "!" for Cisco). 
  <p>

    <b>Configuring Rancid </b>
  <p> Once you have Rancid installed, you're ready for 
    some configuration. To begin, edit the main config file. Only one line 
    needs to be updated: 
  <p>

  <pre>
# as user rancid 
vi /home/rancid/etc/rancid.conf 
    </pre>
Uncomment the <b>LIST_OF_GROUPS</b> variable. You can organize devices as groups based on 
    geographical location or based on administrative boundaries or device 
    types. For this example, I have created two groups: corp-routers and 
    corp-firewalls:
<p>

<pre>LIST_OF_GROUPS=&quot;corp-routers corp-firewalls&quot;<br> 
</pre>
If you have a large number of devices, it may make 
    sense to collect more than one at a time. To do this, set the variable <b>PAR_COUNT</b> to a higher number. 
    Two other useful variables relate to security. <b>FILTER_PWDS</b> can be set to NO if you 
    want to keep the passwords visible in the configs. Similarly, <b>NOCOMMSTR</b> can be set if 
    you want to hide the community strings in the configs. As an example of 
    password blanking, the following:
    <p>

  <pre>
line vty 0 4 
 ... 
 password S0mepMd% 
    </pre>
is saved in the repository as:
<p>

<pre>
line vty 0 4 
 ... 
! password &lt;removed&gt; 
</pre>
For every group defined in <b>LIST_OF_GROUPS</b>, Rancid requires two 
    email addresses: rancid-admin-&lt;groupname&gt; and rancid-&lt;groupname&gt;. This allows flexibility in assigning 
    roles to different "noc" personnel. Create the required aliases 
    according to your organizational structure:
    <p>

  <pre>
  su - 
  cat - &lt;&lt; END_ALIASES &gt;&gt; /etc/aliases 
rancid-admin-corp-routers: noc,bofh 
rancid-admin-corp-firewalls: noc,bofh 
rancid-corp-routers: noc 
rancid-corp-firewalls: noc 
noc: noc@&lt;yourcompany.com&gt;
bofh: &lt;yourname&gt;@&lt;yourcompany.com&gt;
END_ALIASES

 newaliases 
    </pre>
Manually send mail to these accounts to make sure the 
    setup works.
<p>

<b>Login Credentials </b>
<p> Rancid needs to be provided with a login name and 
  password(s) such that configuration can be obtained from the device. These 
  credentials are entered in the file ~/.cloginrc. If you have a AAA system, 
  such as Cisco ACS server or OpenRadius, already installed, create a user in 
  that system and allow it enough privilege to run commands listed in the 
  corresponding <b>bin/{$plat}rancid</b> script. Let's assume that you have created a 
  user named "rancid". Then this user "rancid" must 
  be allowed to run the following commands for a Cisco router (line 1010 
  onwards in bin/rancid): 
<p>

<pre>
@commands=( 
        &quot;show version&quot;, 
        &quot;show boot&quot;, 
        &quot;show flash&quot;, 
        &quot;dir bootflash:&quot;, 
        &quot;dir slot0:&quot;, 
        &quot;dir slot1:&quot;, 
        &quot;dir sup-bootflash:&quot;, 
        &quot;dir sup-microcode:&quot;, 
        &quot;show module&quot;, 
        &quot;show port ifindex&quot;, 
        &quot;write term all&quot;, 
        &quot;write term&quot;
    
); 
</pre>
Here is how to set up the .cloginrc file:
<p>

<pre>
 # as user rancid  
 cd ~ 
 cat - &lt;&lt; END_CLOGIN &gt;&gt; .cloginrc 
add user * rancid 
add password routername1  LoginPwdA EnablePwdA 
add password *.sfo  LoginPwdB EnablePwdB 
add method routername3 ssh 
add method * telnet 
END_CLOGIN 
</pre>
As shown above, wildcards can be used to specify 
    multiple devices. This file must be accessible by the owner only:
<p>

<pre>
 chmod 600 .cloginrc 
</pre>

<b>Test, Test, Test </b>
<p> At this point, you should be able to log into your 
  devices using the <b>bin/${plat}login</b> scripts. For Cisco, this script is <b>bin/clogin</b>.
  
  To test, run: 
<p>

<pre>
$ bin/clogin routername1 
 spawn ssh -c 3des -x -l rancid routername1 
 rancid@routername1's password: 
 routername1&gt;enable 
 Password: 
 routername1# 
</pre>
Now you are logged in as you would be by manually 
    typing in your username and password. Type in a command or two to verify 
    functionality:
<p>

<pre>
 routername1#sho clock 
 *13:43:17.136 PDT Wed Apr 5 2006 
 routername1#exit 
 Connection to routername1  closed. 
$ 
</pre>

<b>Create the Repository </b>
<p> The next step is to create the initial directory 
  structure that will store the configs. To do this, run the initialization 
  command: 
<p>

<pre>
 # as user rancid 
 bin/rancid-cvs 
</pre>
By running this command, a separate directory will be 
    created under /home/rancid/data/ for every group specified in the <b>LIST_OF_GROUPS</b> variable in 
    etc/rancid.conf. Now you can add the names of the actual devices into 
    rancid. For example, to put routername1 and rtr2 in corp-routers and fw1 
    and fw2 in corp firewalls, you need to edit the /home/rancid/data/$groupname/router.db files:
    <p>

  <pre>
 cat - &lt;&lt; END_RTRS &gt;&gt;  /home/rancid/data/corp-routers/routers.db 
routername1:cisco:up 
rtr2:juniper:up 
END_RTRS 

 cat - &lt;&lt; END_FWS &gt;&gt;  /home/rancid/data/corp-firewalls/routers.db 
fw1:netscreen:up 
fw2:cisco:up 
END_FWS 
    </pre>
Note that the file format is &lt;devicename&gt;:
    &lt;devicetype&gt;:&lt;status=collect if "up"&gt;. The list 
    of all possible device types can be determined by peering into the 
    bin/rancid-fe script.
    <p> Finally, you can run the rancid collection on all 
      devices: 
  <p>

  <pre>
 # as user rancid 
 bin/rancid-run 
    </pre>
If there is a problem, check the log files in /home/rancid/data/logs:
<p>

<pre>
 cd data/logs 
 tail -f `ls -tr | tail -1` 
</pre>
Note that a new log file is created per group per run.
<p>
   
<b>Day-to-Day Operation </b>
<p> It is typical to run rancid every few hours (or 
  hourly) via a cronjob. A second cron job can be used to clean out old log 
  files: 
<p>

<pre>
 # as user rancid 
 crontab -l 
 * */4 * * * /home/rancid/bin/rancid-run 
 # clean out config differ logs 
 45 22 * * * /usr/bin/find /home/rancid/data/logs -type f 
  -mtime +4 -exec rm {} \; 
</pre>
After the initial install phase, adding a new router 
    group is a simple process:
<ul>
  1. Edit LIST_OF_GROUPS in etc/rancid.conf.<br>
  2. Add the two corresponding aliases in /etc/aliases; run newaliases. <br>
  3. Create subtree for this group using bin/rancid-cvs. <br>
  4. Add the routers in router.db for the new group.
</ul>
Either run collection by hand i.e. rancid/run or wait 
    for the next cron collection cycle.
<p> Also note that it is easy to collect individual 
  routers by using <b>-r &lt;routername&gt;</b> as an argument to 
  bin/rancid-run. This comes in useful to document config changes after a 
  change window. 
<p>

<b>Adding a Repository Viewer </b>
<p> So far, we have a deployed a great data collection 
  system, but the only interface it has is CLI. To enhance usability and 
  access to the data, we can add a Web wrapper. CVSweb is the perfect 
  workhorse for this purpose. Here is how to install it on Fedora Core 5: 
<p>

<pre>
 yum install httpd 
 yum install cvsweb 
 yum install cvsgraph # optional 
</pre>
The only required configuration is to edit cvsweb.conf 
    and point it at the right repository:
<p>

<pre>
 vi /etc/cvsweb/cvsweb.conf 
 # change the below line 
 'local'   =&gt; ['Local Repository', '/home/rancid/data/CVS'], 
 # now start httpd 
 /etc/init.d/httpd start 
</pre>
You should be able point your browser <b>http://yourserver/cgi-bin/cvsweb.cgi</b> and click through your configurations with ease. For added security, my own 
    setup uses mod_ssl and mod_auth_ldap to demand authentication over an SSL 
    channel before allowing access to either the 
    data or the looking glass, which I will cover next.
<p>

<b>Looking Glass </b>
<p> To install the looking-glass scripts, copy bin/lg.cgi 
  and bin/lgform.cgi to the cgi-bin directory of your Web server. The 
  simplest way to deal with permissions is to make sure that Apache (or any 
  other http server) is running as the same user that owns the repository 
  (i.e., rancid): 
<p>

<pre>
# as root 
perl -MCPAN -e 'install LockFile::Simple' 
cp /home/rancid/bin/lg* /var/www/cgi-bin/ 
</pre>
The config file for the looking glass is <b>/home/rancid/etc/lg.conf</b>. Edit this file and change <b>$LG_CACHE_DIR</b> to <b>/home/rancid/data/tmp</b> and <b>LG_CLOGINRC</b> to <b>/home/rancid/.cloginrc</b>.
<p> You should now be able to browse to <b>http://yourserver/cgi-bin/lgform.cgi</b> and take the looking glass for a drive. 
<p>

<b>Summary </b>
<p> Rancid combines a slew of open source tools to create 
  a comprehensive, extensible, and compelling 
  configuration management system for network devices. If maintained 
  correctly, the config repository will save your chops in many a fix. I know 
  that it has saved mine many a time! 
<p>

<b>Footnotes </b>
<p> 1. Make sure these are saved elsewhere manually, if 
  you decide to use password masking. 
<p> 2. Cvsweb is needed in addition to rancid. 
<p> 3. The Cisco script is simply called bin/rancid. 
<p>

<i>Anshuman Kanwar has dabbled in Unix administration, 
  datacenter design, and computer security for the past five years, realizing 
  in the process that perhaps the most valuble class he took in grad school 
  was "Time Management -- expedited". Currently he works at 
  Citrix Online as their Network Architect. He can be reached at: <b>human@digitarchy.com</b>.</i> 
</table></table>&nbsp;

<! -- End Content ------ >

<!/center>
<! -- End MASTER TABLE -- >

</body>



<! -- Begin Content ------ >
</html>
