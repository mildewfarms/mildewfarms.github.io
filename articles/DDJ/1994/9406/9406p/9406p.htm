<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUN94: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="0190_0001"></h1><P>


<h3><a name="0190_0002">Revisiting Variably Dimensioned Arrays in C<a name="0190_0002"></h3><P>


Dear <I>DDJ</I>,<P>


Many scientific and engineering programmers are changing from Fortran to C or C++ for technical and numerical applications. As with Fortran, C/C++ enable separate development of general-purpose routines, and libraries for holding them, that can be linked later with a variety of programs.<P>


However, a serious weakness of C/C++ is the inability of either language to handle arrays with two or more dimensions as arguments to a function--if the array sizes are to be specified at run time.<P>


With single-dimensioned arrays, there is no problem. In C or C++, the array dimension can be omitted in the function (for example, <I>float a[];</I>). With arrays of two or more dimensions, all sizes except the first must be known at compile time, as these sizes are used by the compiler in generating the machine instructions to access the array elements.<P>


This has been a major cause for the slowness of scientists, mathematicians, and engineers to accept C or C++ as a viable language for their work, despite the availability of better data and program structuring features and recursion.<P>


In his article, &quot;Variably Dimensioned Arrays in C&quot; (<I>DDJ</I>, August 1993), John Ross discussed a number of methods for overcoming this weakness of C or C++. The most useful and transparent method for the user of the function or library is to use pointer variables instead of arrays. The person using the library would write a program calling such a function by passing the address of the array and its dimensions as arguments. The person writing the function itself would use the pointer variable and increment it as needed to process the desired array elements.<P>


This approach is most suitable if the array can be processed sequentially. It has the disadvantage for the function writer that the use of pointers and the need for sequential processing of the array can make the function itself difficult to understand and write.<P>


However, the approach can be extended and simplified by using the preprocessor. It is possible to define a macro for performing an array-address calculation. Then elements of an array can be referred to with a convenient notation, and the function becomes much more readable.<P>


To calculate the address of an element of the array, we need to add to the base address (for instance, the address of the start of the array), the number of elements in the rows before the current one, and the position of the desired element in its row. If <I>a</I> is the start address of the array, <I>m</I> the number of rows, and <I>n</I> the number of columns, the address of the <I>i,j</I> element will be <I>a+i*n+j</I>.<P>


A suitable macro might be <I>#define A(I,J) (*(a+(I)*n+(J))),</I> where we are using the uppercase <I>A</I> to refer to elements of the array passed through the pointer argument <I>a</I>. Macros use a notation different from array references, one that will be familiar to Fortran programmers for the arguments. We can refer to an element of the array as <I>A(1,3)</I>, for example.<P>


This is not as fast as directly incrementing pointer variables, as John demonstrated, but makes the program easier to read--and will be applicable to a wider range of applications.<P>


For example, an algorithm for matrix multiplication (<a href="#0190_0007">Example 1</A>) and its implementation in C (<a href="#0190_0008">Example 2</A>) show a direct correspondence of the lines, made possible by the use of simple macros for array references. Such a function can be called from a C program where the arrays are declared normally (<a href="#0190_0009">Example 3</A>).<P>


You have to be careful if you try to mix such C functions with Fortran programs, because the two languages use different storage orders for the elements. Fortran holds the elements of an array column-wise, whereas C and C++ hold the elements row-wise. This, in effect, is a reversal of the order of the dimensions.<P>


T. Graham Freeman<P>


Australian Defense Force Academy<P>


<h3><a name="0190_0003">Reverse Engineering<a name="0190_0003"></h3><P>


Dear <I>DDJ</I>,<P>


Regarding your editorial on reverse engineering (<I>DDJ</I>, March 1994), you're right in saying that most programmers end up doing some reverse engineering, but in my experience it is rarely out of choice. Most of us are not in the business of reverse engineering some system just to find out how it does some neat trick; we're reverse engineering it because we have to make our own code work with it. When supplied systems have bugs, or are incorrectly documented, or even undocumented, what is the alternative to reverse engineering? In my opinion, the European Community law has it right--when you have to make your code work with somebody else's system, you need to be able to reverse engineer. That's not lenient, that's common sense! But I'm prepared to make a concession. When someone delivers a system that is completely and correctly documented, and that is entirely free from bugs, I'll be more than happy to agree not to reverse engineer it.<P>


John Hoyland<P>


Swindon, England<P>


<h3><a name="0190_0004">One Ringy-Dingy_<a name="0190_0004"></h3><P>


Dear <I>DDJ</I>,<P>


Your April 1994 editorial about Ma Bell hit a nerve. In November 1993, Southwestern Bell implemented a plan called the &quot;Metropolitan Calling Area'' (or MCA), which is supposed to reduce our phone rates. Yeah, right! In St. Charles county, near St. Louis, SW Bell raised the basic phone rates 25 percent across the board in return for the ability to call places halfway across the state for free. (Well, free if you don't consider the 25 percent increase in your phone rates.) The way this was passed is that they held a series of meetings out in the sticks, asking people if they wanted the service. Of course, these people fell all over themselves as the 25 percent increase was a drop in the bucket compared to their long-distance bills to call St. Louis. Then evidently with this, SW Bell convinced the Public Service Commission (PSC) to raise the rates. Conveniently, they had only one public meeting in our area. SW Bell conveniently ignored the opinions of hundreds of thousands of people living close to St. Louis.<P>


If that weren't bad enough, the plan wasn't fully implemented after the rates went up 25 percent. In the St. Charles area, the plan will not be fully functional until the fall of 1994. So for 8 to 10 months, we have to pay 25 percent higher bills and still pay long-distance charges to call the places we are supposed to be able to call for free. We are, in effect, being double-billed for the calls. SW Bell doesn't think that there is anything wrong with raising our rates to provide a service, then not providing the service. Letters to the PSC get double-talk responses saying that the plan can't be implemented all at once, and 8 to 10 months of double billing seems reasonable to them.<P>


It's just like Lily Tomlin used to say on the TV show &quot;Laugh In,'' &quot;the phone company is omnipotent.&quot;<P>


P. Lyle Mariam<P>


St. Charles, Missouri<P>


<I>DDJ responds:</I> Thanks for your note, Lyle. Subsequent to the April issue, Southwestern Bell began a similar push in the Kansas legislature (where it is the state's leading lobbyist) to free itself from the shackles of public oversight. Partly in response to SW Bell's efforts, both Missouri and Kansas are launching extensive studies to examine what their respective tele-communication system needs will be in the future. A Missouri bill has, in fact, proposed the establishment of a Commission on Information Technology which will focus on future telecommunication needs in the education and health fields.<P>


<h3><a name="0190_0005">Help for Help<a name="0190_0005"></h3><P>


Dear <I>DDJ</I>,<P>


As the author of the Help Magician, I'd like to address &quot;Help for Windows Help Authors,&quot; by Al Stevens (<I>DDJ</I>, April 1994).<P>


Al made several negative comments about the 3-D interface. In talking to our customers, however, we find that the overwhelming majority likes the interface. Those who do not, however, are the most vocal.<P>


Regarding Help Magician's functionality, in addition to entering the page number of the topic to access, the user can use Ctrl+PgUp and Ctrl+PgDn; click on the PgUp and PgDn button; or go to topic by title, context string, and context number.<P>


It is not necessary to compile the entire help file to see the results of a particular topic. There is a One Page Preview function that compiles faster.<P>


Not only are there left and right border functions, but complete paragraph formatting is available from the Paragraph submenu. Al did discover a bug. While I can't say that we've never had bugs, I can say that we fix problems the same day they are discovered and provide the customer with the help needed to continue working effectively. Help Magician has been on the market for about two years now and is very stable at this point.<P>


In response to Al's request for a help tool that emulates WinHelp, our next release, Version 3.0, will have a WYSIWYG editor that will look like WinHelp, with a built-in test mode. It will also have a document-to-help conversion, a Visual Basic source-code scanner that builds a help- file shell, automatic glossary generation, a macro editor, a build-tag manager, and a more-standard Windows interface.<P>


Robert B. Heberger<P>


Foster, Rhode Island<P>


Dear <I>DDJ</I>,<P>


I agree with Al Stevens (<I>DDJ</I>, April 1994) that Help Magician's interface is a little too &quot;3-D-ish.&quot; However, there is a checkable menu item that lets you turn it off. I also agree that the Help Magician approach isn't quite as polished as it might be--the paired markers are a little tough to work with, <I>especially</I> if you're importing an existing project; but if you're starting from scratch and have time to get more familiar with the tool, you can get used to it.<P>


Al didn't address the issues of speed and support. I've used RoboHelp for years. Compared to Help Magician, RoboHelp is slow. With RoboHelp, lookups in list boxes for jumps can take forever on large projects or in multifile projects. Help Magician is lightning fast, especially when it comes to RTF generation.<P>


On the support side, I've never worked with a company as responsive to developer input as the Help Magician folks. For instance, I found a small glitch on the sizing of the primary help window. When you enter 0,0,0,0 for location and height and width when controlling the color of the nonscrolling region in the main help window, Help Magician follows Microsoft's documentation and outputs a _,(0,0,0,0),, in the [Windows] section of the .HPJ file. Microsoft acknowledges this error in documentation, but that correction didn't get worked into the current Help Magician release. When I called them about it, I got a crisp, &quot;You're right. We'll fix that immediately.&quot; When was the last time you heard a tool ISV respond that way?<P>


Richard L. Warren<P>


CompuServe 70750,3436<P>


<h3><a name="0190_0006">Varhol is Sent to the Office<a name="0190_0006"></h3><P>


Dear <I>DDJ</I>,<P>


In reference to Peter Varhol's February 1994 &quot;Programmer's Bookshelf,'' in which he states, &quot;Wherever the school of the future ends up, we--as computer professionals--should be leading the way,''   please stick to programming and stay out of education. Heaven help us all!<P>


No thank you Mr. Varhol, computer professionals should not be leading the way! Your industry is in its precious adolescence and does not have the credibility to lead any educational revolution. I applaud your interest, as a parent and citizen, to get involved in your child's education but as an industry--keep your collective butts at the programming desk until you get that right.<P>


I apologize if I have overreacted to your article but either you wanted an overreaction and stimulated discussion or you are participating in the &quot;lynch-mob'' mentality that is running rampant throughout the country. Your article is full of quasi-statistics that are fueling the feeding frenzy of criticism of the American educational system. Public education in America is <I>not</I> &quot;broken.'' It works, everyday, everywhere!<P>


I submit most educators (myself included) found the same thing you did. &quot;I quickly concluded that LOGO was limiting and difficult to use compared to other [teaching tools] and set it aside.'' I don't know about your profession, but there is very limited time to adapt materials to classroom use. There are many tools (and certainly LOGO is one of them) that I would love to adapt to my classroom. It is a question of priorities.<P>


Unfortunately, you can't complain about the high cost of education and then &quot;fix'' the problem by spending more money. Education is expensive and will get more expensive and &quot;doubling'' has no bearing, just more whipping up the fervor value.<P>


Please, do get involved with your local school, but don't march in and tell us you have all of the answers. Try hitting a home run, first. Just sit down and write some simple program like &quot;Carmen San Diego'' or &quot;LOGO.'' Use your expertise, but use it carefully! Teachers may make some mistakes, but then the computer-programming industry is based on mistakes.<P>


Ralph Hammersborg<P>


Seattle, Washington<P>


DDJ<P>


DDJ <I>welcomes your comments and suggestions. Mail your letters to </I>DDJ, <I>411 Borel Ave., San Mateo, CA 94402, or send them electronically to CompuServe 76704,50 or via MCI Mail, c/o </I>DDJ. <I>If your letter is lengthy or contains code, we ask that you include a disk. Please state your name, city, and state. </I>DDJ <I>reserves the right to edit letters for length and/or content.</I><P>


<pre></pre><P>


<h4><a name="0190_0007"><B>Example 1:</B> Simplest algorithm for array multiplication.<a name="0190_0007"></h4><P>


<pre>for i = 1 to m
  for j = 1 to p
    C(i,j) = 0
    for k = 1 to n
      C(i,j) = C(i,j)+A(i,k)*B(k,j);

</pre><P>


<h4><a name="0190_0008"><B>Example 2:</B> C/C++ function using macros to simplify array references.<a name="0190_0008"></h4><P>


<pre>void matmul(int m, int n, int p,
   float *a, float *b, float *c)
   /* &quot;a&quot; is m rows by n cols,
      &quot;b&quot; is n rows by p cols, and
      &quot;c&quot; is m rows by p cols */ {
#define A(I,J) (*(a+(I)*n+(J)))
#define B(I,J) (*(b+(I)*p+(J)))
#define C(I,J) (*(c+(I)*p+(J)))
  int i, j, k;
  for (i=0; i&lt;m; ++i)  {
    for (j=0; j&lt;p; ++j)  {
      C(i,j) = 0;
      for (k=0; k&lt;n; ++k)  {
        C(i,j) += A(i,k)*B(k,j);
     }
   }
 }
#undef A
#undef B
#undef C
}

</pre><P>


<h4><a name="0190_0009"><B>Example 3:</B> Main program to call the function in Example 2.<a name="0190_0009"></h4><P>


<pre>void matmul(int m, int n, int p,
    float *a, float *b, float *c);

main()
  {
    float aa[6][4],
    bb[4][7],
    cc[6][7];
    /* read numbers into aa and bb */
    matmul(6,4,7,aa,bb,cc);
    /* matmul(6,4,7,<P>

      (float*)aa,(float*)bb,(float*)cc);<P>

       will press the warning messages */
    /* print cc */
  }

</pre><HR><P>

Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
