<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUN94: A Dual-UI  Constraint Equation Solver in C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A Dual-UI  Constraint Equation Solver in C++<a name="01b3_0003"></h1><P>


<h2><a name="01b3_0001"><a name="01b3_0000">When two UIs are better than one</h2><P>


<h3>Larry Medwin</h3><P>


<a name="01b3_0002"><a name="01b3_0000">Larry is the director of engineering at Advanced NMR Systems Inc., in Wilmington, MA. He is currently responsible for the development of an MRI (Magnetic Resonance Imaging) scanner dedicated to mammography. He can be reached on the Internet at !uunet!thehulk!medwin!larry.<P>


Irecently implemented a set of C++ programs to solve constraint equations, including a program that uses the InterViews GUI toolkit for the X Window System. Designing a constraint-equation solver turned out to be an interesting problem, both algorithmically and in terms of its user interface.<P>


Algorithmically, it's interesting because equations are normally programmed to be solved in one direction--one is always solving for a particular unknown, and the rest of the variables are always given. But many systems are modeled in terms of mathematical relationships among many quantities. In such systems, any one value can be found if all the rest are known. You can represent the relationships among the variables and operators of a linear algebraic equation by using what's known as a &quot;constraint network.&quot; With this structure (and appropriate algorithms), you can compute the value of any one variable automatically as soon as the values of all other variables are given.<P>


In terms of the user interface, I found it a design challenge to present a clear and simple model of program functionality to the user via a GUI. I also used a dual-mode architecture, implementing two versions: one using a GUI and the other driven by a tty interface (simple commands read from <I>stdio</I>). Both are connected to a common, equation-solving back end.<P>


Although the constraint solver is a relatively small system (about 1500 lines of code), the design approach used should allow scaling up to more powerful systems. This article describes the implementation of the program, starting with the dual-mode architecture.<P>


<h3><a name="01b3_0004">A Dual-UI Architecture<a name="01b3_0004"></h3><P>


The two versions of constraint solver are known as <I>calc</I> and <I>icalc</I> and represent alternate front ends to the equation solver. The functionality of the two programs is almost identical, but <I>calc</I> is accessed via a <I>stdio</I>-driven interface, while <I>icalc</I> is a GUI program built with the InterViews toolkit for X Windows. The application's ability to access the constraint-solving &quot;engine&quot; via <I>calc</I>'s <I>stdio</I> interface allows it to be used in batch-style regression testing: <I>calc</I> receives input from test files, and the resulting output can be compared automatically with known good output. Internally, user-visible functionality is implemented via virtual functions. In <I>calc</I>, these become tty commands for input, output, and control; in the GUI version, these functions have overloaded equivalents.<P>


To use <I>calc</I>, you launch the program and type some simple commands--for example, the keyword <I>equation</I> followed by an algebraic equation. An <I>equation</I> is defined as two algebraic expressions joined by an equal sign. Other commands include the <I>set</I> command, to force a value on a variable, and <I>unset</I>, which leaves the value unspecified. Note that a variable must be unset before it can be given a new value with <I>set</I>. Finally, you can simply type the name of a variable to obtain its solved value. At any time during the session, you can use the <I>equation</I> command to switch to another problem.<P>


The GUI version of the constraint solver is similar to the command-line version in that there are three basic operations: editing an equation, specifying whether a variable is forcing its value, and editing that value. In designing the user interface to <I>icalc</I>, I made sure the user does not have to know about things such as equation parsing or be aware of internal entities. All the user needs to know is that he or she can type in an equation and specify some, but not all, of the variables. The user cannot specify a variable without first indicating that its value will be &quot;forced;&quot; the program does not allow forcing if all remaining variables have already been forced. When <I>icalc</I> is launched, a window similar to <a href="199401b5.htm">Figure 1</A> is displayed. An equation is preloaded into the equation-editing area, and the user can immediately set values of variables. To set the value of a variable, you must first click on the corresponding Force Value pushbutton to change the variable's state so that it can force a value. Then you can enter a value, which is a floating-point number. This value can be changed at any time. Clicking on the Force Value pushbutton again changes the variable's state so that it will no longer accept values.<P>


<h3><a name="01b3_0005">The Constraint Solver<a name="01b3_0005"></h3><P>


The constraint-solving engine is in the constraint.c module, available electronically (see &quot;Availability,&quot; page 3). My implementation is based on a system described in Abelson and Sussman's <I>The Structure and Interpretation of Computer Programs</I> (MIT Press, 1985), except that their's is built using the Lisp-like language Scheme.<P>


I chose C++ because I found that the components of the constraint network can be naturally modeled as objects that encapsulate functions and state. Inheritance allows a &quot;constraint protocol&quot; to be defined for a virtual base class, <I>Constraint</I>. The type and connectivity of objects of classes derived from <I>Constraint</I> is known only to the equation parser and the objects themselves. Polymorphism allows me to treat objects of classes derived from <I>Constraint</I> as objects of class <I>Constraint</I> itself. Constrained values, from <I>Constants</I> or user controlled <I>Syms</I>, are propagated around the network by <I>Connectors</I> according to a message protocol.<P>


The bidirectional properties of the constraint network are the result of the behavior of the <I>primitive constraints</I>--operators which enforce relationships like <I>x+y=z</I>. In this case, knowing any two variables allows computation of the third. The other primitive constraints are <I>Constants</I> and <I>Syms</I>. A <I>Constant</I> always forces its value, but a <I>Sym</I> is a UI object for input (user sets value) or output (value is calculated from other known values). In the InterViews version, I added a class derived from <I>Sym</I>, called <I>IVSym</I>, which inherits from both <I>Sym</I> and the <I>MonoGlyph</I> classes in InterViews.<P>


With the addition of <I>Connector</I> objects, primitive constraint objects can be combined to express more complex relationships. <I>Connectors</I> connect pairs of constraints. They can hold and propagate values. When a connector gets a new value from one constraint, it sends the value to its other one. A constraint can also &quot;unconstrain&quot; a connector. In this case, the <I>Connector</I> will tell its other constraint to forget the value previously forced by that <I>Connector</I>.<P>


A <I>Binop</I> (BINary OPerator) is an operator that computes a result from two operands. It is a primitive constraint attached to three connectors. It represents the symmetrical relationship between two operands and a result. The symmetry results from the fact that knowing any two values, the third can be computed. For example, assume <I>x+y=z</I>. If <I>x</I> and <I>y</I> are known, <I>z</I> can be calculated. Alternatively, if <I>z</I> and <I>y</I> are known, <I>x</I> can be calculated as <I>z--y</I>. The same <I>Binop</I> represents both addition and subtraction by assigning the proper connectors to its operands and results. In normal operation of the network, a <I>Binop</I> is told every time one of its connectors gets or loses a value.<P>


The root of the inheritance hierarchy is the <I>Constraint</I> class. A <I>Constraint</I> object must be able to determine if it has enough information to calculate a new value, and to tell attached <I>Connectors</I> about that new value. Similarly, it can withdraw a value lost when one of its inputs loses a value. These behaviors are implemented by the member functions <I>process_new_value()</I> and <I>process_forget_value()</I>, defined as pure virtual member functions in <I>Constraint</I>, implemented only its subclasses. This interface protocol allows client classes, such as <I>Connector</I>, to invoke <I>process_new_value()</I> and <I>process_forget_value()</I> on attached objects, knowing only that the objects are derived from class <I>Constraint</I>.<P>


The other common behavior of all <I>Constraints</I> has to do with the construction of the constraint network. The member function <I>replace_connector()</I> asks the <I>Constraint</I> to disconnect itself from one specified connector and replace it with another. This is used when the equation parser sees an equal sign. All <I>Constraints</I> are attached to one or more <I>Connectors</I>, but the connectivity is specialized by the derived classes.<P>


The <I>process_delete()</I> member function is similar to a destructor, except that it requires a single argument to identify the caller. The network is destroyed by traversing it and passing <I>process_delete()</I> messages recursively to each network object, except the caller. If a conventional destructor were called, the recursion step would pass a <I>delete</I> message to all attached <I>Connectors</I>, including the caller, resulting in an infinite loop.<P>


The <I>Binop</I> class encapsulates the behavior of a generalized undirected operator taking two arguments. <I>Binop</I> has no state or value; it only responds to changes in its inputs. <I>Binop</I> is also a virtual class, and although it has a constructor, <I>Binop</I> objects themselves cannot be instantiated.<P>


<h3><a name="01b3_0006">Propagation of Constraints<a name="01b3_0006"></h3><P>


Now that you know what comprises a constraint network, I'll present an example that illustrates how constraints propagate. This particular network expresses the relationship between the force exerted on a spring, <I>F,</I> and the length to which it is stretched, <I>L</I>; see <a href="199401b6.htm">Figure 2</A>. The spring constant <I>K</I> gives the &quot;stiffness&quot; of the spring, while the constant <I>L0</I> gives the length of the spring with no forces acting on it. As you can see from the figure, the two circles represent <I>Binops</I>: a <I>Multiplier</I> and <I>Adder</I>. The four rectangles represent the four <I>Syms</I>. <I>Connectors</I> (labeled <I>c1</I> through <I>c5</I>) attach the <I>Binops</I> and <I>Syms</I> to each other.<P>


Because the network is initially created by the parser, the <I>Syms</I> do not have values to propagate. Assume the user starts off by setting the value of the spring constant <I>K</I>. As soon as the value of the <I>K Sym</I> is set, it sets the value of <I>Connector c4</I>; <I>c4</I> tells the <I>Multiplier</I> that it has acquired a value, but the <I>Multiplier</I> determines that it only has one value and cannot calculate anything.<P>


Now the user sets <I>L0</I>, the unstretched length of the spring. Again, the <I>L0 Sym</I> sets the value of <I>Connector c2</I>, but the <I>Adder</I> doesn't have enough information to perform any computations.<P>


Say the user assigns a value to the <I>Sym L</I> that tells <I>Connector c1</I> to perform a computation; this, in turn, tells <I>Adder</I> to do the same. <I>Adder</I> finds that two of its connectors have values, so it computes a third value (by subtracting the value on <I>Connector c2</I> from the value on <I>Connector c1</I>) and passes this value to the <I>Connector c3</I>. <I>Connector c3</I> passes its value to the <I>Multiplier</I>, which finds that it has two values, so it multiplies the values on <I>Connectors c3</I> and <I>c4</I> and passes the product to <I>Connector c5</I>. Finally, <I>Connector c5</I> tells the <I>Sym</I> to display its value.<P>


Before you can use the network to compute the length <I>L</I> from a known force <I>F</I>, you must first stop forcing the value of <I>L</I>. The user tells the <I>Sym L</I> to &quot;unforce&quot; its value, and the <I>Sym</I> passes this message to the <I>Connector c1</I>. <I>C1</I> sees that the value has been retracted by the <I>Constraint</I> that set it in the first place, so it forgets its value, and informs the <I>Adder</I> that it no longer has one. The <I>Adder</I> sees that one of its <I>Connectors</I> that had been forcing its value has withdrawn that value, and tells <I>Connectors c2</I> and <I>c3</I> to forget their values. <I>C2</I> knows that its value was set by the <I>Sym L0</I>, so it retains its value, but <I>Connector c3</I> was forced by the <I>Adder</I>. So <I>c3</I> forgets its value and passes a &quot;forget value&quot; message along to the <I>Multiplier</I>. The process repeats until the value of <I>Sym F</I> is no longer forced. At this point, the user can have the <I>Sym F</I> force its own value on the network.<P>


<h3><a name="01b3_0007">The User Interface<a name="01b3_0007"></h3><P>


<a href="#01b3_000a">Listing One</A> (page 93) is calc.c. This is the straightforward, <I>stdio</I>-driven version of the user interface, which simply invokes a yacc-generated parser to process input from <I>stdio</I>. The electronic version of the source code contains the grammar and lexer source files (gram.y and lex.l).<P>


The second version of the program is the GUI implemention in icalc.h and icalc.c (Listings Two and Three, page 93). This UI is built using InterViews, a public-domain GUI toolkit in C++ created by Mark Linton at Stanford University. It contains class libraries for user-interface objects and for drawing and interacting with users, as well as general-purpose classes such as lists and strings. A central part of the design of InterViews is the glyph, a lightweight screen object. Characters are implemented as glyphs, as are the various layout objects: <I>hbox</I>, <I>vbox</I>, <I>hglue</I>, and <I>vglue</I>. These objects are all constructed by calls to a <I>LayoutKit</I> instance, essentially a &quot;factory&quot; of layout objects.<P>


The <I>FieldEditor</I>, used in the equation editor and the <I>IVSym</I> object, is built by an instance of <I>DialogKit</I>, another factory, this one for interactive objects. The <I>FieldEditor</I> allows a line of text to be edited and displayed; a callback function gets invoked when a line is entered. Another widget factory, <I>WidgetKit</I>, is used to get instances of buttons. InterViews allows the look-and-feel of these objects to be Motif-like or OpenLook-like, depending on a command-line argument used when invoking the application.<P>


The instance hierarchy of UI objects basically consists of two levels. An instance of class <I>App</I> is at the root. The areas of the user interface that are not background are the <I>eq_editor_</I> (the equation editor), and <I>sym_box_</I> (the <I>vbox</I> holding the <I>IVSym</I>). The <I>sym_box_</I> is built by traversing the symbol table and appending each <I>IVSym</I> inside the <I>sym_box_</I>.<P>


The instance of class <I>IVSym</I> is the most complex user-interface object in this program. Nested inside its <I>hbox</I> are a <I>Label</I>, <I>Patch</I>, and <I>Button</I>, each of which is separated from the other and the edges of the <I>hbox</I> by <I>hglue</I>. The <I>Label</I> shows an <I>IVSym</I>'s name, and the <I>Button</I> allows the user to force or unforce an <I>IVSym</I>'s value. The <I>Patch</I> causes a portion of the screen to be redisplayed when it changes.<P>


Underneath the <I>Patch</I> is a <I>Deck</I>, an unusual interface object which contains a set of <I>Glyphs</I> but only displays one. Inside the <I>Deck</I> are two <I>FieldEditors</I>: <I>ed_</I>, which represents the <I>IVSym</I> value when it can be edited; and <I>uned_</I>, which shows the value but does not allow the user to change it. The <I>Deck</I> has a member function, <I>flip_to()</I>, which gives the index of the glyph to display. When the <I>IVSym</I> is built, the <I>Deck</I> is given a list of pointers to <I>ed_</I> and <I>uned_</I>, as in the following statement: <I>deck_=layout.deck( uned_, uned_, ed_, ed_);</I>. Due to an InterViews bug, the symbol area is not redisplayed with the new variable values when you delete the equation in the equation area and type in a new one. Resizing the window (using the window manager) forces the symbol area to be redrawn.<P>


<h3><a name="01b3_0008">Future Directions<a name="01b3_0008"></h3><P>


This program can be enhanced in several ways. One idea is to extend the underlying constraint mechanism to solve simultaneous equations. This might involve the propagation of partially constrained values around the network, and algorithms to reduce sets of partially constrained values to known values. This would be an interesting test of the generality and reusability of the class design used in this program.<P>


<h4><B> <a href="199401b7.htm">Figure 1</A>:</B> Constraint solver with graphical-user interface.</h4><P>


<h4><B> <a href="199401b8.htm">Figure 2</A>:</B> An example constraint network; F=K*(L--L0).</h4><P>


<a name="01b3_0009">Fresco: The Next-Generation InterViews<a name="01b3_0009"><P>


<h3>Mark Linton</h3><P>


<P>

<i>Mark, known as the father of the InterViews toolkit, is the principle architect of Fresco. Portions of this article first appeared in X Resources, published by O'Reilly &amp; Associates. Mark can be reached at linton@sgi.com.</i></p><hr><P>


The X Consortium's officially supported successor to InterViews is Fresco, a technology that supports &quot;graphical embedding&quot; by combining structured graphics and application embedding into a single architectural framework. With graphical embedding, you can compose both graphical objects (circles, polygons, and the like) and application-level editors (word processors, spreadsheets, and so on) with a uniform mechanism. Embedded application objects can appear within graphical scenes and will be appropriately transformed.<P>


The Fresco API in X11R6 covers Xlib and Xt functionality, with additional features for graphical embedding. The Fresco API is defined using the Interface Definition Language (IDL) that's part of the Common Object Request Broker Architecture (CORBA) from the Object Management Group (OMG). Among IDL's advantages are:<P>


<UL>
<li>IDL is more abstract than object-oriented programming languages, yet concrete enough to be translated automatically into source code.</li>
<li>IDL can be mapped to several languages. OMG has defined a mapping to C and is defining a mapping for C++ and Smalltalk.</li>
<li>IDL can support distribution--the sender and receiver of an operation may be on different machines in a network.</li>
</UL>
Being able to distribute IDL-specified objects across address spaces or machines is particularly important for application embedding. For instance, you often might prefer relatively large applications to run as independent processes. Distribution also increases the likelihood of concurrency because of the desire to take advantage of available processing power. Even in the absence of distribution, there are certain applications that are simpler when implemented using multiple threads. The Fresco sample implementation (Fresco 1.0) supports multithreaded applications by locking access to shared data and spawning an independent thread to handle screen redraw.<P>


As part of the support for graphical objects, Fresco operations are screen-resolution independent--coordinates are automatically translated by the implementation from application-defined units to pixels. Consequently, an application's appearance is the same on different screens or printers, without special coding by the programmer. Fresco includes a type that provides stencil/paint operations for rendering.<P>


Fresco 1.0 in X11R6, written entirely in C++, includes an IDL-to-C++ translator, C++ <I>include</I> files, and a library that implements the Fresco classes. This implementation does not completely support distribution, though extensions to the run-time library would make that possible.<P>


The sample implementation also includes an application called &quot;Dish&quot; that allows invocation of Fresco operations through the Tcl scripting language (developed at the University of California, Berkeley). Fresco does not include a Tcl implementation, but if you have the Tcl library installed, then Dish uses it along with CORBA dynamic invocation to create and manipulate Fresco objects from a script.<P>


To summarize, the distinguishing features of Fresco are a standard object model (OMG CORBA) with a C++ implementation, resolution-independence, and graphical embedding. The use of CORBA means Fresco objects can be distributed across a network. Fresco also supports multithreaded applications in a single address space.<P>



<h4><a name="01b3_000a"><a name="01b3_000b"><B>[LISTING ONE]</B></H4>

<PRE>


/***** CALC.C --- simple tty interface to constraint solver.
#include &lt;stdio.h&gt;
#include &quot;constraints.h&quot;

extern int yyparse();

main()
{
    Phase = INIT;
    yyparse();    // Parse input
    exit(0);
}


</PRE>

<h4><a name="01b3_000c"><a name="01b3_000d"><B>[LISTING TWO]</B></H4>

<PRE>


// *** icalc.h -- Larry Medwin 4/5/93    (Abridged version)
// *** InterViews user interface for the constraint system

extern class IVSym;
extern class Lexio;
extern class App;
extern Style* global_style;
extern App* Myapp;

declareFieldEditorCallback(App)
declareFieldEditorCallback(IVSym)
declareActionCallback(IVSym)

//---------------------------------------------------------------------
class IVSym : public Sym , public MonoGlyph
{
  public:
    IVSym(Sym*);
    ~IVSym() {};
    void accept_editor(FieldEditor*);    // FieldEditor callbacks
    void cancel_editor(FieldEditor*);
    void click_me();                     // Pushbutton callback
    static Style* sym_style;             // set by App::App()
  private:
    void IVSym_init();
                                         // UI stuff
    FieldEditor* ed_;                    // User enters values here
    FieldEditor* uned_;                  // Replaces ed_ when not forced
    Deck* deck_;
    Patch* patch_;
    Button* pbutton_;                    // Displays name_

    virtual void show_val();             // Display value and state
    virtual void show_no_val();
    virtual void show_state();
};
// Replaces lex I/O handlers to read from char arrays instead of stdio
class Lexio
{
  private:
    char* equation_;            // char string for lex
    char* current_;             // cursor for lex
  public:
    Lexio(String);
    ~Lexio();
    // Undefine lex I/O macros
#   undef lex_input()
#   undef unput(char)
    // Lex I/O handlers
    int lex_input();
    void unput(char);
};
//----------------------------------------------------------------------
class App                  // Canvas with equation editor and ActiveSyms
{
  private:
    String equation_;                    // FieldEditor String
    IVSym* network_;                     // Access to constraint network
  public:
    App(Style*);
    Lexio* lex_handler;
    FieldEditor* eq_editor_;             // InterViews components
    Glyph* sym_box_;                     // vbox to hold sym_area_
    void accept_editor(FieldEditor*);    // FieldEditor callbacks
    void cancel_editor(FieldEditor*);
                                  // Start off App with initial equation
    void kick_start(char *);      // (shouldn't need this)
};


</PRE>

<h4><a name="01b3_000e"><a name="01b3_000f"><B>[LISTING THREE]</B></H4>

<PRE>


//*** icalc.c --  user interface for InterViews-based version of
//    the constraint equation solver.        By Larry Medwin, 1993

#include &lt;stream.h&gt;
#include &quot;icalc.h&quot;

Style* IVSym::sym_style;     // Set by App::App(), read by IVSym::IVSym()
App*    Myapp;               // Global I/O handlers for lex
implementFieldEditorCallback(IVSym)
implementActionCallback(IVSym)

//*** class IVSym ***
IVSym::IVSym( Sym* source_sym) : Sym(source_sym-&gt;name())
{
    state_ = source_sym-&gt;state();    // Copy state_ and value_
    value_ = source_sym-&gt;value();
    IVSym_init();
}
void IVSym::IVSym_init()
{
    WidgetKit&amp;        kit   = *WidgetKit::instance();
    const LayoutKit&amp; layout = *LayoutKit::instance();
    //--- Init field editors (one for editing, one for uneditable display)
    kit.begin_style(&quot;ed&quot;);
    ed_ = DialogKit::instance()-&gt;field_editor(
        &quot;       &quot;, sym_style,
        new FieldEditorCallback(IVSym)(
            this, &amp;IVSym::accept_editor, &amp;IVSym::cancel_editor)
    );
    kit.end_style();
    //-------------------
    kit.begin_style(&quot;uned&quot;);
    uned_ = DialogKit::instance()-&gt;field_editor(
                     &quot;       &quot;, sym_style,
                     new FieldEditorCallback(IVSym)(
                         this, &amp;IVSym::cancel_editor, &amp;IVSym::cancel_editor)
    );
    kit.end_style();
    //--- Put ed and uned in deck arrange the glyphs in the deck in same
    //  order as enum state_ values, so that flip_to can index the proper
    //  glyph by state
    deck_ = layout.deck( uned_, uned_, ed_, ed_);
    deck_-&gt;flip_to( state());

    patch_ = new Patch( deck_);
    //--- The Pushbutton
    pbutton_ = kit.push_button(&quot;Force value&quot;,
                   new ActionCallback(IVSym)(this, &amp;IVSym::click_me));
    //--- Put all this stuff in an hbox
    body(
        layout.vbox(
            layout.vglue(),
            layout.hbox(
                layout.hglue(), kit.label(name()),  // Sym name
//              layout.hglue(), kit.label(&quot;  &quot;),    // spaces
                layout.hglue(), patch_,             // deck
                layout.hglue(), pbutton_,
                layout.hglue()
            ),
            layout.vglue()
        )
    );
    //-------------------
    ed_-&gt;field(&quot;&quot;);    // Start these guys up
    uned_-&gt;field(&quot;&quot;);

    return;
};
void IVSym::click_me()                   // Implement state transition
{
    switch(state()) {
        case UNCONSTRAINED:
            state(ACTIVE_NO_VALUE);
            break;
        case PASSIVE:       // Can't make transition if Sym is constrained
            break;
        case ACTIVE_WITH_VALUE:
            state(UNCONSTRAINED);
            con_-&gt;forget_value( this );
            break;
        case ACTIVE_NO_VALUE:
            state(UNCONSTRAINED);
            break;
        default:

            assert(True);
    }
    // see /home/iv/src/examples/zoomer/main.c
    patch_-&gt;redraw();
    return;
//------------------------------------------------------------------
void IVSym::accept_editor(FieldEditor* ed)
{
    float ed_val;
    assert( state() != PASSIVE);            // Shouldn't try to set this
                                            // value if it is being forced
    const String&amp; valueStr = *ed-&gt;text();   // Get value from field editor
    if (!valueStr.convert(ed_val)) {        // Illegal number?
        cancel_editor(ed);
    }
    else {
        con_-&gt;forget_value(this);           // Remove last constraint
        state(ACTIVE_WITH_VALUE);           // Update state &amp; propagate value
        set_value(ed_val);
    }
    return;
};
void IVSym::cancel_editor(FieldEditor* ed)
{   switch(state())                         // Restore old value
    {   case PASSIVE:
        case ACTIVE_WITH_VALUE:
            show_val();
            break;
        case UNCONSTRAINED:
        case ACTIVE_NO_VALUE:
            show_no_val();
            break;
        default:
            assert(True);
    }
    return;
};
void IVSym::show_val()
{
    char tmp[100];
    assert( state() != ACTIVE_NO_VALUE);
    assert( state() != UNCONSTRAINED);
    switch(state())
    {
        case ACTIVE_WITH_VALUE:
            sprintf( tmp, &quot;%6.2f&quot;, value());
            ed_-&gt;field(tmp);
            break;
        case PASSIVE:
            sprintf( tmp, &quot;%6.2f&quot;, con_-&gt;get_value());
            uned_-&gt;field(tmp);
            break;

        default:
            assert(True);
    }
    return;
}
//----------------------------------------------------------------------
{
    assert( state() != ACTIVE_WITH_VALUE);
    assert( state() != PASSIVE);
    switch(state())
    {
        case ACTIVE_NO_VALUE:
            ed_-&gt;field(&quot;&quot;);
            break;
        case UNCONSTRAINED:
            uned_-&gt;field(&quot;&quot;);
            break;
        default:
            assert(True);
    }
    return;
}
void IVSym::show_state()
{
    deck_-&gt;flip_to(state());
    patch_-&gt;redraw();
    return;
}
//*** class Lexio ***
Lexio::Lexio( String equation)
{
    // Copy into lex input string
    // Format: &quot;equation &quot; %s '\0'
    equation_ = new char[equation.length()+strlen(&quot;equation &quot;)+1];
    sprintf( equation_, &quot;equation %s&quot;, equation.string());
    current_ = equation_;
}
Lexio::~Lexio()
{
    delete[] equation_;
}
int Lexio::lex_input()
{
    if (current_ &lt; equation_)     // Don't step back over start of string...
        return 0;                 // EOF
    else                          // Return char, or 0 at end of string
        return *(current_++);
//---------------------------------------------------------------------
void Lexio::unput(char c)
{

    if (current_ &gt; equation_)    // If not before beginning
        *(--current_) = c;       // Push back pointer and put in char
    return;
}
//*** class App ***
implementFieldEditorCallback(App)
App::App(Style* style) : network_(0)
{
    const LayoutKit&amp; layout = *LayoutKit::instance();
    IVSym::sym_style = new Style(style);    // Save copy of style
    // Init field editor
    eq_editor_ = DialogKit::instance()-&gt;field_editor(
                      &quot;                    &quot;, IVSym::sym_style,
                      new FieldEditorCallback(App)(
                              this, &amp;App::accept_editor, &amp;App::cancel_editor
                              )
                      );
    sym_box_ = layout.vbox();    // Init CurSymArea &amp; its enclosing box
}
void App::accept_editor(FieldEditor* ed)
{
    IVSym* tmp_sym;
    WidgetKit&amp; kit = *WidgetKit::instance();

    // Get rid of old constraint network
    //  if( network_ != 0) {
    //  network_-&gt;process_delete((Connector*)0);
    //  delete network_;
    //}
    for (GlyphIndex g = sym_box_-&gt;count(); g &gt; 0; g--)  // Clean up glyphs
    {
        sym_box_-&gt;remove(g-1);
    }
    lex_handler = new Lexio( *ed-&gt;text());    // Get FieldEditor string to lex
    delete Symtab;                            // Create and empty symbol table
    Symtab = new SymbolList;
    // Parse the equation, generate constraint network and symbol table
    Phase = PARSE;
    yyparse();
    // Build up sym_box area
    for (ListUpdater(SymList) i(*Symtab); i.more(); i.next())
    {
        Sym* cur_sym = i.cur();
        tmp_sym = new IVSym( cur_sym);        // &quot;Promote&quot; Sym to IVSym
        // Replace Sym with IVSym in the constraint network
        Connector* tmp_con = cur_sym-&gt;con_;
        tmp_con-&gt;disconnect(cur_sym);
        tmp_sym-&gt;connect(tmp_con);
        // delete cur_sym;
        // Put the IVSym in the sym_box_ area
        sym_box_-&gt;append(tmp_sym);
    }
    // Keep a hook into the network so we can clean up later

    // network_ = tmp_sym;
    // UI gives us access to symbols, not the symbol table
    // delete Symtab;
    // Send expose event (How??)
//---------------------------------------------------------------------
void App::cancel_editor(FieldEditor* ed)
{
    ed-&gt;field(equation_);                 // Restore old equation
    return;
//---------------------------------------------------------------------
void App::kick_start(char* s)             // Start it off
{
    eq_editor_-&gt;field( s );               // Set up initial string
    accept_editor( eq_editor_);           // Get started
    return;
}
//*** main() ***
int main(int argc, char** argv)
{
    Session* session = new Session(&quot;FieldEditorTest&quot;, argc, argv);
    WidgetKit&amp; kit = *WidgetKit::instance();
    const LayoutKit&amp; layout = *LayoutKit::instance();
    Myapp = new App(session-&gt;style());
    Myapp-&gt;kick_start(&quot;a+b+c+d+e=0&quot;);      // Start it off
    return session-&gt;run_window(            // Set up app window
        new ApplicationWindow(
            new Background(
                layout.hbox(
                    layout.hglue(),
                    layout.vbox(
                        layout.vglue(), Myapp-&gt;eq_editor_,
                        layout.vglue(), Myapp-&gt;sym_box_,
                        layout.vglue()
                    ),
                    layout.hglue()
                    ),
                kit.background()
            )
        )
    );
    exit(0);
}

</pre><HR><P>

Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
