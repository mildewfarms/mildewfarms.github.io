<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUN94: Extending imake</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Extending imake<a name="01bf_0003"></h1><P>


<h2><a name="01bf_0001"><a name="01bf_0000">Taking a tool beyond the X Window System</h2><P>


<h3>Kamran Husain</h3><P>


<P>

<i><a name="01bf_0002"><a name="01bf_0000">Kamran is an independent consultant specializing in designing X/Motif and real-time systems for geophysical and telecommunications applications. He can be reached at 713-265-1635.</i></p><hr><P>


Imake is a utility that works with make so that code can automatically be configured, compiled, and installed on different UNIX platforms. It is currently used to configure systems such as the X Window System and Kerberos authentication. In his book, <I>Software Portability with imake</I> (O'Reilly &amp; Associates, 1993), Paul DuBois points out that much of X's success can be credited to its portability, and this portability is in large part due to imake. While primarily an X tool, imake is useful for any project that involves porting to multiple UNIX systems.<P>


Imake generates makefiles from the Imakefiles template--a set of C preprocessor macros. Makefiles are generally not portable across different machines. Separating machine dependencies from items being built, however, renders Imakefiles platform independent. imake uses Imakefiles to generate a makefile for each platform for a given application; see <a href="199401c1.htm">Figure 1</A>. It is invaluable for making a release available on a wide variety of machines. The X Window System imake (distributed by MIT with the standard X Window System release 3 and greater) generates platform-specific makefiles by using descriptions defined in Imakefiles. In this article, I'll discuss imake, its template and rule files, and Imakefiles. And since imake isn't restricted to X, I'll also show you how to extend Imakefiles beyond the X Window System to AIX, SunOs, Linux, and the like. I'll refer to the site-specific config files as <I>siteConfFile</I> (and the directory they're stored in as <I>siteConfDir</I>) and project-specific configuration files as <I>projConfFile</I> (and the directory they're stored in as <I>projConfDir</I>).<P>


<h3><a name="01bf_0004">How imake Works<a name="01bf_0004"></h3><P>


Imake uses the cpp preprocessor's conditionals to determine how to create a makefile: It requires you to define an Imakefile and a template file with all default rules, definitions, compiler options, and special make rules.<P>


Just as make relies on makefiles, imake relies on Imakefiles. Imakefiles contain definitions of make variables and one or more invocations of macro functions to build the desired parts of a makefile; see <a href="#01bf_0009">Example 1</A>.<P>


Imake looks at template files to determine how to create a makefile from your instructions. This makefile will have the <I>clean</I>, <I>depend</I>, <I>install</I>, and <I>all</I> targets defined for you. imake looks for its template file, Imake.tmpl, through the path specified in the command-line option --Ipathname.<P>


The Imake.tmpl file contains definitions common to all makefiles. The general structure of this file is in <a href="#01bf_000a">Example 2</A>. The preprocessor picks up definitions in the files defined. If these definitions are not overridden in subsequent files, they will be used to create makefiles. Think of the Project.tmpl file as a way to override definitions in the site.def file which, in turn, can override declarations in the platform.cf file.<P>


Using the Imake.rules file, imake appends a set of common make rules at the bottom of a makefile. These rules are generally for the <I>all</I>, <I>depend</I>, <I>clean</I>, and <I>install</I> directives.<P>


The Imake.tmpl file should be modified with great care since it contains platform-specific definitions. These files can usually be found in the ./lib/X11/config directory where you've installed the X Window System. If you don't have this directory, use a find command to find the files.<P>


<h3><a name="01bf_0005">Imakefiles<a name="01bf_0005"></h3><P>


<a href="#01bf_000b">Example 3</A> shows the definition of a platform in the Imake.tmpl file. If you're running on a Sun, for instance, you should have a <I>#define sun</I> declared before these constructs. There are about ten such constructs for machines in the template file (DEC, Apollo, Cray, and the like) and one for a generic file, in case a machine isn't defined. For example, if <I>#define sun</I> is declared at the top, then the sun.cf file will be included in Imake.tmpl. If nothing is declared, the generic template file will be used.<P>


The site.def file defines a preprocessor variable called <I>ProjectRoot</I>, which is the root directory for all your projects; see <a href="#01bf_000c">Example 4</A>. The Project.tmpl file has multiple levels of nested <I>if</I>/<I>ifndef</I>/<I>else</I>/<I>endif</I> pairs that can be confusing. Consequently, it's a good idea to print out the file and examine the nest levels. Since in most cases, you'll have to modify variables related only to your project, you probably should take the Project.tmpl provided here and modify it to fit your needs.<P>


<h3><a name="01bf_0006">Extending Imakefiles for Multiple Projects<a name="01bf_0006"></h3><P>


The file structures I've defined so far are for general imake use. However, you can modify these file structures. <a href="#01bf_000d">Example 5</A>, for instance, shows how the Imake.tmpl file can be modified to work with multiple projects.<P>


Once Imake.tmpl has been modified, you can create four empty files (platform.pcf, site.pdef, Project.ptmpl, Imake.prules) in the same directory as Imake.tmpl. Next you can create a pmkmf from the xmkmf shell script, as in <a href="#01bf_000e">Example 6</A>. The inclusion of the search path for the template files forces imake to look at the current project directory before the standard directory. (I'm using a flag called <I>UseInstalled</I> in the xmkmf file. If this flag is not defined in the command line, imake will attempt to make itself.)<P>


In each of the project directories, you should have the option of overriding anything in the standard directories by creating your own platform.pcf, site.pdef, Project.ptmpl, and Imake.prules files. If you choose to work with the standard files, then you don't have to do anything for that project. The empty files in the standard directory will be picked up, satisfying the preprocessor requirements.<P>


If you do have to override the declarations in the standard files, then you can create your own files in your project directory with those changes. The empty file will not be picked up in that event since you search your local directory (PROJECTDIR) first.<P>


In <a href="#01bf_000e">Example 6</A>, I defined two empty files, Motif.rules and Motif.tmpl, for my particular installation in the project-files area. You may have to do the same if your Imake.tmpl file requires some files unnecessary to your project. This makefile  is available electronically (see &quot;Availability,&quot; page 3). Of special interest are the targets <I>depend</I>, <I>all</I>, and <I>clean</I> that have been defined in the makefile by default.<P>


Recall that almost all the declarations in the standard files are of type:<P>


<pre>
#ifdef variable
#define variable
#endif</pre><P>


This forces the need for the template files for projects to be in front of the standard files so that these declarations can be seen by the preprocessor first. However, you must be careful to check if this declaration is not defined elsewhere. If a similar variable is declared earlier in the execution cycle, then this particular declaration will not be used. If a similar variable is declared later in the execution cycle, then this particular declaration will override the latter declaration. Be sure to grep all template files just before declaring a new variable.<P>


However, if you want to explicitly override a variable (even if it was not previously defined), then use the following construct if you do not want warning messages from the preprocessor:<P>


<pre>#ifdef variable
#undef variable
#endif
#define variable <I>asSomethingDifferent</I></pre><P>


<h3><a name="01bf_0007">Working with Multiple Projects<a name="01bf_0007"></h3><P>


Assume that you have three projects--alpha, beta, and theta-- under your directory. You would include in each of these directories an Imakefile similar to <a href="#01bf_0009">Example 1</A>. To invoke imake, you would then add a script file in your path similar to <a href="#01bf_000e">Example 6</A>. This Imakefile would contain the rule necessary to create your directory's project.<P>


You then have two options: You can either browse through the Imake.rules to find the rule that best fits your needs or write your own. In most cases, you'll find a rule close to what you need. Obviously, any new global rules you create will go in the standard Imake.rules file; if they're specific to this project, they'll go in the Imake.prules file.<P>


Imake rules have the format in <a href="#01bf_000f">Example 7(a)</A>, which is illustrated in the rule, <a href="#01bf_000f">Example 7(b)</A>. When called, <I>MakeMyProgram(OurProject,BigFile.o Onefile.o OurProject.o,--lm)</I> will expand as in  <a href="#01bf_000f">Example 7(c)</A>. There are two preconditions for parsers in the C preprocessor and imake, respectively. The entire macro must be one continuous line and the end of the line is terminated by the @@\ symbol. If you forget to add one or the other, you'll see some really unusual rule expansion. The @@\ symbol is stripped away by imake before handing off to the C preprocessor.<P>


In almost all cases, you want to consider macros offered by Imake.rules before writing your own. <a href="#01bf_0010">Table 1</A> lists some of the macros in the Imake.rules file. <a href="#01bf_0011">Table 2</A> lists some of the predefined variables that you can use in your Imakefiles and macros. You can always look in the generated makefile for the complete list of predefined symbols.<P>


For my projects, I typically use:<P>


<UL>
<li> <I>SimpleProgramTarget</I>, which lets you specify only one simple target with just one source and one object file.</li>
<li> <I>SingleProgramTarget</I>, which lets you specify a target composed of the objects defined in the list OBJS (see <a href="#01bf_0009">Example 1</A>).</li>
<li> <I>ComplexProgramTarget</I>, for when you have more than one executable or new libraries to install on your system (use <I>ComplexProgramTarget_1, ComplexProgramTarget_2</I>, and so on).</li>
</UL>
Actually, <I>SingleProgramTarget</I> is sometimes considered an obsolete version of <I>NormalProgramTarget,</I> which allows you to have dependent libraries. I still find it simpler to use, and in most cases, I don't have dependent libraries.<P>


If an existing macro doesn't meet your particular rule requirements, you can modify a similar one that's defined in Imake.rules.<P>


The Imake.rules macro <I>MakeSubdirs($(SUBDIRS))</I> allows you to descend into a list, issuing $(MAKE) in subdirectories listed in $(SUBDIRS). Since I didn't find the rule to fit my exact needs, I wrote my own macro (see <a href="#01bf_0012">Example 8</A>), which lets you issue a command that can be executed in each of the directories listed in <I>dir</I>, with <I>flags</I> passed into <I>cmd</I>. (In your particular case, the <I>cmd</I> would be your shell script to invoke imake.)<P>


This lets you invoke your own command set using imake on various sets of directories. This shell script is extensible for adding in man pages, copying binaries to a passed location, and so on. However, Imake.rules can still use all of the rules if you generalize it. If you want to use other predefined rules within this rule, then put your rule either at the end of the Imake.rules file, or  in another file (say, Imake.postRules) that's searched after the Imake.rules file. Then include the reference to it, as in <a href="#01bf_000a">Example 2</A>.<P>


<h3><a name="01bf_0008">Testing Macros and/or Rules<a name="01bf_0008"></h3><P>


Naturally, you want to test macros without clobbering existing makefiles. To avoid overwriting these files, use imake's <I>-- sFilename</I> option. If the -- option precedes the filename, the output is written to standard output; otherwise it's written to the filename specified. Therefore, if you invoke the imake command with the -- option and redirect the output to a temporary file (say, myMakefile), you can compare the myMakefile and the old makefile file using diff to see what changes were incurred by including your new macro. The --v option on the imake command line will tell you what's being passed to the C preprocessor.<P>


Remember that macros are difficult to debug. When in doubt, put parentheses around any variable that might be expanded and ensure that the number of parentheses match up. If you see unusual expansions, check to see if you have placed the \ and @@\ terminators correctly at ends of all noncontiguous lines. When in doubt, place echo statements in the rule to show what's going on during expansion. It's important to remember that in makefiles the $ is a special character that expands the next field in front of itself. To keep $MAKE from expanding $M instead of $MAKE, be sure to use $(MAKE).<P>


For example, consider this construct expanded to a rule in a makefile:<P>


<pre>
a.o b.o : $$@.bkp
cp $@.bkp $@
</pre><P>


This is used to derive <I>a.o</I> from <I>a.o.bkp</I> and <I>b.o</I> from <I>b.o.backup</I>. make always reads a dependency list twice, once when it's initially reading the makefile, and again when it's generating the dependency list for the target's dependencies. In each pass, it performs a macro expansion. The $$@ is thus expanded to $@ on the first pass, and $@ is expanded to the actual dependency on the second.<P>


Another catch when using special make macros in imake rules is that, unlike dependency lists, the target-name part is scanned only once per invocation of make. So a $$(NAME) in the target area will not expand beyond $(NAME) for a target name and will yield unexpected results.<P>


<h4><B> <a href="199401c2.htm">Figure 1</A>: </B>Building programs with imake and make.</h4><P>


<pre>
</pre><P>


<h4><a name="01bf_0009"><B>Example 1:</B> Definitions of make variables.<a name="01bf_0009"></h4><P>


<pre>
# This is a simple Imakefile for a
# single program target myfile
SRCS=myfile.c another.c
OBJS=$(SRCS:.c=.o)
MYLIBS=-lm

SingleProgramTarget(myfile,$(OBJS),
$(MYLIBS),NullParameter)

</pre><P>


<h4><a name="01bf_000a"><B>Example 2:</B> General structure of Imake.tmpl file; (a) system descriptions; (b)  general rules.<a name="01bf_000a"></h4><P>


<pre>
<b>(a)</b>
#include &lt;platform.cf&gt;
#include &lt;site.def&gt;

<b>(b)</b>
#include &lt;Project.tmpl&gt;
#include &lt;Imake.rules&gt;

</pre><P>


<h4><a name="01bf_000b"><B>Example 3:</B> Definition of a platform in the Imake.tmpl file.<a name="01bf_000b"></h4><P>


<pre>
#ifdef sun

#define MacroIncludeFile &lt;sun.cf&gt;
#define MacroFile sun.cf
#undef sun
#define SunArchitecture
#endif /* sun */

#ifdef hpux
#define MacroIncludeFile &lt;hp.cf&gt;
#define MacroFile hp.cf
#undef hpux
#define HPArchitecture
#endif /* hpux */
</pre><P>


<h4><a name="01bf_000c"><B>Example 4:</B> The site.def file defines a preprocessor variable called ProjectRoot, the root directory for all your projects.<a name="01bf_000c"></h4><P>


<pre>/* This is the site.def file for my projects */

#define ProjectRoot /home/kamran/proj
#define BinDir      Concat(ProjectRoot,/bin)

</pre><P>


<h4><a name="01bf_000d"><B>Example 5:</B> Modifying the Imake.tmpl file to work with multiple projects; (a) system descriptions; (b) general rules.<a name="01bf_000d"></h4><P>


<pre>
<b>(a)</b>
#include &lt;platform.pcf&gt;
#include &lt;platform.cf&gt;

#include &lt;site.pdef&gt;
#include &lt;site.def&gt;


<b>(b)</b>
#include &lt;Project.ptmpl&gt;
#include &lt;Project.tmpl&gt;
#include &lt;Imake.prules&gt;
#include &lt;Imake.rules&gt;
</pre><P>


<h4><a name="01bf_000e"><B>Example 6:</B> Creating a pmkmf from the xmkmf shell script.<a name="01bf_000e"></h4><P>


<pre>#!/usr/bin/sh
CONFIGSTDDIR=/usr/local/X4M1.1/usr/lib/X11/config
PROJECTDIR=.
imake -DUseInstalled -I$PROJECTDIR -I$CONFIGSTDDIR $MAKEDEFINES
</pre><P>


<h4><a name="01bf_000f"><B>Example 7:</B> (a) imake rule format; (b) typical imake rule; (c) expanding the imake rule.<a name="01bf_000f"></h4><P>


<pre>
<b>(a)</b>
   #define RuleName(arg1,arg2,..,argN)           @@\
   definitions                               @@\
   definitions                               @@\
   definitions

<b>(b)</b>
   #define MakeMyProgram(program,objs,libs)       @@\
   program: objs                             @@\
     cc -o program objs libs

<b>(c)</b>
   OurProject: BigFile.o Onefile.o OurProject.o 
   cc -o OurProject BigFile.o Onefile.o OurProject.o -lm

</pre><P>


<h4><a name="01bf_0010"><B>Table 1:</B> Some sample macros in the Imake.rules file.<a name="01bf_0010"></h4><P>


<pre>
Macro                      Description
--------------------------------------------------------------------
<I>NormalProgramTarget</I>        program,objects,deplibs,locallibs,syslibs
<I>SimpleProgramTarget</I>        program
<I>ComplexProgramTarget</I>       program
<I>ComplexProgramTarget_1</I>     program,locallib,syslib
<I>ComplexProgramTarget_2</I>     program,locallib,syslib
<I>ComplexProgramTarget_3</I>     program,locallib,syslib
<I>ServerTarget</I>               server,subdirs,objects,libs,syslibs
<I>InstallLibrary</I>             libname,dest
<I>InstallSharedLibrary</I>       ibname,rev,dest
<I>InstallLibraryAlias</I>        ibname,alias,dest
<I>InstallLintLibrary</I>         libname,dest

</pre><P>


<h4><a name="01bf_0011"><B>Table 2:</B> Some Imakefile variables.<a name="01bf_0011"></h4><P>


<pre>
Variable          Description
------------------------------------------------
CC                C compiler invocation
SRCS              C sources files
OBJS              Object files
DEFINES           Application-specific preprocessor symbols
INCLUDES          Application-specific header files
SYS_LIBRARIES     X11 libraries
DEPLIBS           Libraries used for dependencies
CDEBUGFLAGS       Compiler options using --g, --o, and so on
LOCAL_LDFLAGS     Linker options

</pre><P>


<h4><a name="01bf_0012"><B>Example 8:</B> Macro which lets you issue a command that can be executed in each of the directories listed in dir, with flags passed into cmd.<a name="01bf_0012"></h4><P>


<pre>
/* An example rule for the top level directory of a multi-project
 * directory. This rule should be placed in Imake.rules or
 * Imake.prules.
 * FireUpSubDirs - For each directory in dirs do cmd with flags. Look
 * at a similar example in Imake.rules called MakeSubDirs
 * for an alternative.
 */

#ifndef FireUpSubDirs
#define FireUpSubDirs(name,dirs,cmd,flags)            @@\
    for i in dirs ;\                                 @@\
    do \                                             @@\
       (cd ./$$i ; echo &quot;In $(CURRENT_DIR)/$$i...&quot;; \  @@\
            cmd flags ); \                          @@\
    done
#endif

</pre><HR><P>

Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
