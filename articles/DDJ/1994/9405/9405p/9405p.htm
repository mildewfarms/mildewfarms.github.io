<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAY94: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="0151_0001"></h1><P>
<h3><a name="0151_0002">More on ASPI<a name="0151_0002"></h3><P>
Dear <I>DDJ</I>,<P>
Brian Sawert's article &quot;The Advanced SCSI Programming Interface&quot; (<I>DDJ</I>, March 1994) was both readable and useful--especially the C examples for using ASPI. I'd like to add some information about ASPI host managers and how they fit into the scheme of things, at least under DOS.<P>
Adaptec has an SDK manual with source-code diskette, available to companies or individuals who have joined Adaptec's ACAP (Adaptec Compatibility Advantage Program). Contact Kristi Rinehart at Adaptec (408-945-8600) for more details. The materials include a MASM program showing how to use ASPI under DOS, a C program and headers showing how to use ASPI under Windows through Adaptec's WINASPI.DLL, and comparable information for using ASPI under OS/2 and Novell NetWare.<P>
As far as I know, only Adaptec has a Windows DLL, WINASPI.DLL, for using ASPI with the ASPI host managers that are paired with the various Adaptec SCSI host adapters. This approach avoids using DPMI and also depends on the availability of an undocumented extension to ASPI, as described in released Adaptec materials. Only WINASPI.DLL--not your Windows app--needs to use the undocumented ASPI stuff. I'm pretty certain that WINASPI.DLL also requires that the ASPI host manager be capable of executing either in real or protected mode, which would make ASPI run a lot faster than via DPMI with its necessary switching from protected to real mode and back again.<P>
Although not necessarily a complete list, the following vendors do supply ASPI host managers, a prerequisite for any ASPI programming, with their SCSI host adapters: Adaptec, Advanced Integration Research (AIR), Alpha Research, Always Technology, American Megatrends (AMI), BusLogic, Distributed Processing Technology, DTC, Future Domain, LinkSys, Trantor (now a fully owned Adaptec subsidiary), and UltraStor. In addition, Corel includes the IBMASPI.SYS ASPI host manager for DOS in Version 2.0 of CorelSCSI. This device driver is for the SCSI host adapters that are primarily in IBM's PS/2 Micro Channel computers. In summary, ASPI has become fairly ubiquitous in the SCSI world, since the above list probably covers more than 99 percent of all SCSI host adapters in the personal computing universe.<P>
The ASPI specification provides for true overlapping of SCSI I/O with CPU-intensive processes, even under monotasking DOS, but requires a bus-mastering SCSI host adapter to really do it. The documented ASPI mechanism for doing so is called &quot;posting.&quot; You put a nonzero <I>segment:offset</I> of a callback address in the SRB, and your program gets control there when the I/O is completed or posted. (A zero callback address causes the ASPI host manager to complete the SCSI I/O before returning to your program.) A word of caution: An ASPI manager for a non-bus-mastering device (such as parallel-port SCSI or the PIO Adaptec 1522) executes the SRB to completion, then gives your program control at the callback address. In other words, the sequencing between callback and return to your program may vary among ASPI host managers.<P>
Ben Myers<P>
Spirit of Performance<P>
Harvard, Massachusetts<P>
<h3><a name="0151_0003">Post-Compile Optimization<a name="0151_0003"></h3><P>
Dear <I>DDJ</I>,<P>
In his article, &quot;Examining OPTLINK for Windows&quot; (<I>DDJ</I>, November 1993), Matt Pietrek did an excellent job of comparing the optimization capabilities of SLR's OPTLINK with Microsoft's LINK and Borland's TLINK.<P>
It should be noted that any code optimizations beyond those listed in the article would require the complete disassembly, adjustment, and reassembly of the input machine code and symbol tables. PC_Opt, a post-compile optimization tool I've developed, performs such additional optimizations.<P>
In its present form, PC_Opt performs far-to-near procedure conversion, register parameter-passing conversion, stack-clearing conversion, and unaccessed-code elimination on MS-DOS OMF-compatible object modules and libraries. The resultant size and speed improvements vary, depending on the application being optimized.<P>
Although PC_Opt (which sells for $15.00 plus $5.00 shipping and handling) lacks the features and flexibility of the tools Matt discussed, it does operate within levels of reliability and ease-of-use, which sufficiently demonstrates that a post-compile complete, object-code optimization step should be considered as an integral part in any worthy software-development environment.<P>
Jim Taylor<P>
Optimite Systems<P>
Dallas, Texas<P>
<h3><a name="0151_0004">Palindromes<a name="0151_0004"></h3><P>
Dear <I>DDJ</I>,<P>
I enjoyed Tom Swan's &quot;Algorithm Alley&quot; column on palindromic encryption (<I>DDJ</I>, November 1993) and the subsequent letters from readers contributing their own palindromes. Some years ago, I worked with a fellow who had previously been employed by Mostek (remember them?) and hated the company with all his heart and soul. For his edification, I composed this palindrome: <I>Market some Mostek RAM</I>. Thanks for an interesting article.<P>
Harold M. Martin<P>
Bellaire, Texas<P>
<h3><a name="0151_0005">That Looks Familiar<a name="0151_0005"></h3><P>
Dear <I>DDJ</I>,<P>
I noticed something very familiar on your January 1994 cover: one of my company's products. The red-striped mainframe is an Amdahl 5995-a1400mp. Like many <I>DDJ</I> readers, I have an eye for detail. When looking for the note as to where this cover was taken (Apple Computer's data center), I noticed no mention of the type or manufacturer of the mainframe.<P>
Of course, being an Amdahl employee, I'm always looking for defense of our mainframe-vendor honor. It's amusing to me that in the midst of all this PC and workstation hype, Apple has a big Amdahl mainframe in their data center. Yes, I'm nitpicking, but to hear the PC trade journals tell, the mainframe is dead and buried. We, as a company, are and will be getting smaller, as many businesses are today. But mainframes still carry the major work loads for business and industry. We are still selling and improving them. As speeds improve in CMOS technology to what mainframe ECL logic is capable of, all computers will get smaller. In the same light, as PC and workstation platforms learn to use &quot;RAS&quot; (reliability, availability, serviceability) and multiprocessing as mainframes do, the great fissure between the two camps will look like a drainage ditch for the runoff of the companies that can't keep up with change in user direction.<P>
Michael R. Bonuchi<P>
Chicago, Illinois<P>
<h3><a name="0151_0006">Forth Corrections<a name="0151_0006"></h3><P>
Dear <I>DDJ</I>,<P>
Thanks for publishing my letter in the March 1994 issue of <I>Dr. Dobb's Journal</I>. Unfortunately, there were a couple of errors in Example 2 on page 12. <a href="#0151_0009">Example 1</A> here is a revised, corrected version.<P>
William E. Drissel<P>
Grand Prairie, Texas<P>
<h3><a name="0151_0007">Prior Patents<a name="0151_0007"></h3><P>
Dear <I>DDJ</I>,<P>
In his March 1994 &quot;C Programming&quot; column, Al Stevens discussed a patent (#4.540.292) for an electronic calendar display that's owned by Psytronics of Princeton, NJ.<P>
I wrote a program in 1977 to &quot;electronically&quot; display and print calendars in conventional paper form. I later mailed it to D.E. Cortesi, <I>Dr. Dobb's</I> resident intern. He published it in the July 1981 &quot;Dr. Dobb's Clinic&quot; column on page 42. Because the typesetter left off the &quot;&lt;&quot; and &quot;&gt;&quot; symbols, the program was published again several months later.<P>
I have no idea when Psytronics applied for their patent, but if it was after the July 1981 issue, couldn't the published article be used to establish prior art?<P>
In any event, Al was correct. Granting the patent was absurd.<P>
L. Barker<P>
Chicago, Illinois<P>
<h3><a name="0151_0008">Galileo! Newton! Where Are You When We Need You?<a name="0151_0008"></h3><P>
Dear <I>DDJ</I>,<P>
This is regarding Peter Varhol's review of Bart Kosko's book <I>Fuzzy Thinking</I> (<I>DDJ</I>, November 1993).<P>
All this talk about multistate logic puts me in mind of a fad prominent with science-fiction writers circa 1940: They called it &quot;non-Aristotelian logic&quot; and abbreviated it null-A. There was a whole line of &quot;Null-A&quot; stories by Heinlein, Asimov, and the like.<P>
Or does &quot;fuzzy&quot; mean nonlinear? Or probabilistic? Or analog? Or precisely what? I must say, it's aptly named--it's all so fuzzy. Is the wheel being reinvented? In light of all this fuzzy thinking, Galileo's observation that &quot;the universe is written in the language of mathematics&quot; bears repeating. Galileo, where are you when we need you?<P>
One can empathize with the author's disillusionment with &quot;the complexities of nonlinear mathematics,&quot; but there exists a little-known mathematical discipline called &quot;relaxation analysis&quot; that enables relaxation oscillations and other broken and finitely discontinuous functions to be handled directly in the time domain with ease and aplomb--allowing them to be readily differentiated and integrated, among other things. (See my book, <I>Waveforms: A Modern Guide to Nonsinusoidal Waves and Nonlinear Processes</I>, Prentice-Hall, 1986.) Thus, some seemingly intractable problems of writing analytic expressions for the nonsinusoidal functions often encountered in electronics and other walks of life are easily handled. For example, <a href="#0151_000a">Figure 1(a)</A> shows the integral of the AC component of a full-wave rectified sinusoid; in this case, a cosine wave. Try graphing it using Basic or whatever, and you'll see the skewed sinuous wave typical of the incompletely filtered output of a full-wave rectified sinusoid. The curve is not sinusoidal, but you have to look closely to see that! If you have a CGA (or better) card and a pipeable Basic on path (such as GWBASIC 3.22), you can graph it using the command in <a href="#0151_000a">Figure 1(b)</A> at the DOS prompt.<P>
Still, whatever gets you thinking is cool. Long live fuzzy!<P>
As for Michael Swaine's &quot;Swaine's Flames&quot; in the same issue, &quot;the model is the thing&quot; is a case in point of &quot;familiarity breeds contempt.&quot; In this case, familiarity with the model breeds contempt for the <I>real</I> thing, and the model then becomes the real thing in one's thinking. I thought Sir Isaac Newton got mankind out of that destructive loop long ago.<P>
Before Newton's extended use of the scientific method of experimentation, many wise men were convinced they could uncover all the secrets of the universe by simply reasoning about them. Boy, did that get us off track!<P>
No, the model is not the real thing, any more than <I>The Nightmare Before Christmas </I>is the real world. And thinking it is represents a reversion to earlier times in which superstition ruled supreme. Lord deliver us from a revisitation of those times.<P>
Sir Isaac, where are you when we need <I>you</I>?<P>
Homer Tilton<P>
Tucson, Arizona<P>
<pre></pre><P>
<h4><a name="0151_0009"><B>Example 1: </B>A Forth text interpreter, compiler, and debugger in pseudocode.<a name="0151_0009"></h4><P>
<pre>forever {
  get the next word (delimited by
                     whitespace)
  look it up in the dictionary
  if found
    if we are compiling
      if the word is immediate
        execute the word
      else
        &quot;compile&quot; the word into the
                        dictionary
    else
      execute the word
   else //(not found, must be a number
                        or undefined)
    if it's a number
      if we're compiling
        &quot;compile&quot; a literal into the
                         dictionary
       else
         push the number onto the stack
     else
       send word followed by &quot;?&quot; to
                            screen
       stop compiling
       flush interpreter input buffer
       accept future input from keyboard
} // end of forever
</pre><P>
<h4><a name="0151_000a"><B>Figure 1: </B>(a) A cosine wave; (b) Basic command graphing a full-wave rectified sinusoid.<a name="0151_000a"></h4><P>
<pre>(a)  {_COS(X)_--2/PI}=SIN(ATN(TAN(X)))--(2/PI)ATN(TAN(X))+constant

(b)  Echo h=6.28:v=1:screen 2:for j=0 to 600:x=h*(j/300- 1):Q=atn(tan(x))<P>          :y=sin(Q)-.64*Q:pset(j,100-95*y/v):next:wait 96,2|GWBASIC


</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
