<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAY94: RTMK: A Real-Time Microkernel</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>RTMK: A Real-Time Microkernel<a name="016f_0002"></h1><P>

<h2><a name="016f_0001"><a name="016f_0000">This portable microkernel is based on the Sceptre standard</h2><P>

<h3>J.F. Bortolotti, P. Bernard, and E. Bouchet</h3><P>

<P>
<i><a name="016f_0000"><a name="016f_0000">The authors are electrical engineers and can be contacted at fax number +41 22 784 3452.</i></p><hr><P>

Digital-signal processors such as Texas Instruments' 320C30/40, Motorola's 96000, and Analog Devices' ADSP-210x are typically used as dedicated coprocessors--number-crunchers hooked to interrupt vectors, for example. In such configurations, the digital-signal processor (DSP) feeds a general-purpose CPU with &quot;predigested&quot; data so it can take care of housekeeping. Because the inevitable resource duplication is both expensive in cost-sensitive applications and inefficient in design, we needed a way to get rid of the general-purpose microprocessor in interrupt-driven systems we were designing.<P>

With interrupt-driven systems, time is intentionally sacrificed as a safety margin while the CPU waits (via a loop) for the next interrupt. However, the time spent in a background loop with high-performance DSPs is typically 10 to 20 percent of the total CPU time--power that's often more than the total power of the general-purpose CPU. In designing our interrupt-driven system, we decided to utilize this power, instead of resorting to another processor. The only element we lacked was a simple method of scheduling the various low-frequency processes (compared to the interrupt processing) that run on the system. We needed a real-time kernel that would provide a fast context switch (to spend as little time in the kernel as possible), a simple interface to a standard programming language, interruptibility of the kernel to allow high-priority immediate processes hooked to an interrupt, a standardized approach to kernel services, and a high level of portability.<P>

Since we weren't aware of any commercial software that could deliver total control over the interrupt state of the processor (and because a fast interrupt was time critical in our application), we ended up designing RTMK, the real-time kernel presented in this article.<P>

The source code for both DSP and PC implementations of the kernel is provided with this article. Listings One through Three are the PC implementation. <a href="#016f_000b">Listing One</A> (page 105) is the RTMK.H header file, <a href="#016f_000d">Listing Two</A> (page 105) is the RTMK.C source file, and <a href="#016f_000f">Listing Three</A> (page 106) is TEST.C, the test program. The source code for the DSP version (specifically, the TMS320C30) is available electronically; see &quot;Availability,&quot; page 3. (Executables for the PC version are also available electronically.) The PC implementation and test programs have been compiled with Borland C 3.1 but should compile as-is with Microsoft C. The DSP version has been compiled with the TI C compiler (Version 4.5) for TMS320C30.<P>

<h3><a name="016f_0003">RTMK and the Sceptre Standard<a name="016f_0003"></h3><P>

In 1980, several European software houses, tired of waiting for the ideal &quot;real-time&quot; language, proposed a simple but realistic set of commands for a real-time kernel; see &quot;Sceptre,&quot; BNI Y (the French computing-standards bureau) September 1982. Our real-time kernel is based on this standard, although it supports only a subset of the original Sceptre commands.<P>

The authors of Sceptre defined a set of primitives that is portable only by its specification. This means that once you've ported the kernel to a new target system, all applications that require specific real-time services are portable to this new target, as well. Services standardized by the Sceptre kernel are listed in <a href="#016f_0008">Table 1</A>. Note that unlike other kernels, Sceptre events are associated with tasks because events are an elementary mechanism that does not require a system-event queue handled by the kernel. This minimizes the addressing needed to identify which task to schedule and suppresses the need to clock a kernel function at a submultiple frequency of the fastest task to properly schedule the tasks in the system.<P>

Remember that a real-time application is composed of programs under the control of an executive system. Any program execution is achieved through an active agent called a &quot;task/process.&quot; The mechanisms that control the execution of these tasks are part of the executive. The executive has to hide specific properties of the target system by turning them into logical properties, interface between different parts of an application (possibly written in different languages), handle communications, and manage hardware resources (files, memory, and so on).<P>

Since most high-level languages already provide parts of this executive as elements of their library, it is only necessary to design the kernel--a set of operations and data structures that can be used through the procedural calling mechanism of a high-level language.<P>

The entities of the Sceptre standard include:<P>

<UL>
<li>Tasks/processes. The agent responsible for the execution of a program. A task has a name and attributes. A task context is the minimum set of information necessary for the target processor to execute the task instructions. A stored context is a memory area where the execution context of the task is saved when the task is not currently executing.</li>
<li>Immediate Tasks. A task ensuring the interface between the real-time application and the environment. Immediate tasks are often handled via the interruption mechanism. In RTMK, the immediate process is the interrupt-service routine.</li>
<li>Scheduler. A software or hardwired module in charge of handling the CPU power of a set of processors and dispatching it to a set of tasks. Generally, the scheduler of the immediate task is the interrupt mechanism of the processor, while the scheduler of standard (or differed) tasks is part of the kernel.</li>
<li>Events. The event object stores a signal, which means that a condition became True. In the Sceptre standard, events are associated with specific tasks. This provides an efficient signalling process with low overhead.</li>
<li>Region. The region object is purely a mark of CPU ownership. Context switches through the scheduler will not occur until a region is exited.</li>
<li>Queue. The queue is a communication object between tasks that behaves like FIFO memory.</li>
</UL>
When designing a kernel, it's important to choose a well-behaved compiler that permits context switches with a limited context save. It's also important to select a hardware platform with a stack-oriented architecture and no stack-size limitations. Although PC programmers are familiar with this, DSP developers who work in environments where architectures are optimized for branching speed--thus having limited stack or no stack pointer--may be unfamiliar with this. The compiler itself is important, and its behavior must be carefully analyzed to define the appropriate context, which will be saved in the processes descriptor.<P>

<h3><a name="016f_0004">Process Descriptors<a name="016f_0004"></h3><P>

In any multitasking kernel, the CPU has to be allocated to different processes, even when they are not finished. During process changes (or &quot;context switches&quot;), we preserve the environment the process was executing in (the &quot;process context&quot;), while reinstating the next scheduled process.<P>

A context switch consists of saving the current context, selecting the process that will get processor time, and restoring the context of this new process. Consequently, the context must contain all the necessary data to maintain the integrity of the CPU and compiled code for the process. The area where all this data is stored is a &quot;process descriptor.&quot;<P>

The RTMK PC process descriptor is shown in <a href="#016f_0009">Example 1</A>. The task priority is handled by the structure's <I>priority</I> and <I>pmask</I> fields. The second item is simply a mask that is precalculated during task definition in order to accelerate the context switches by avoiding unnecessary left shifts at run time. The <I>expected_signals</I> field is a mask. If bit <I>n</I> is set in this mask, then signal <I>n</I> can activate the process. The <I>received_signals</I> is another 32-bit field in which each bit set means that the corresponding signal has been sent to the process. Another element of the context is the microprocessor context that was saved (in the form of a <I>jmp_buf</I> buffer set by the <I>setjump</I> function in the PC implementation).<P>

In the original Sceptre implementation of a real-time application, each process is associated with a set of signals. Each signal can be <I>arrived </I>or <I>not_arrived</I>. The process specifies its own activation condition through these signals.<P>

A process can be in one of the following states:<P>

<UL>
<li>Waiting.<B> </B>The process is suspended until one of its signals has arrived.</li>
<li>Ready. The process has received a signal and will continue execution when  the kernel allocates it CPU time.</li>
<li>In progress. The process is currently running.</li>
</UL>
Sending or receiving signals is done through kernel services by the process. In these primitives, the signals that have arrived are checked against those expected. If a match occurs, the CPU can be reallocated to another process, depending on its priority. This mechanism means that the process-ready list can only be updated when a process sends or waits for a signal. Consequently, a task switch from the kernel's point of view will only occur during the execution of the signal and wait primitives.<P>

In RTMK, we've implemented only the basic services. The signals are sent directly to the task, not (as in many other operating systems) to the kernel. This means RTMK signal handling is much easier and faster, thanks to its Sceptre characteristics.<P>

<h3><a name="016f_0005">Process-Handling Services<a name="016f_0005"></h3><P>

RTMK provides a number of process-handling services, including:<P>

<UL>
<li><I>o</I>send(PROCESS,SIGNALS). Sets the bits contained in SIGNALS with the corresponding bits in the <I>received_signals</I> field of the processor decriptor and calls the scheduler. When executing, this primitive CPU ownership can be lost if the signals being sent activate a higher-priority task.</li>
<li><I>o</I>wait(SIGNALS). Sets the process descriptor <I>expected_signals</I> field and calls the scheduler, which usually suspends the process until the notified signals arrive. This service returns the list of received signals. The return value distinguishes between the signals that triggered the process, since two signals can be active at the same time.</li>
<li><I>o</I>reset(SIGNALS). Clears the bits corresponding to SIGNALS in the process descriptor <I>arrived_signals</I> field in order to permit another cycle. By clearing these bits just before the next call to the wait service, we can ignore all the events that occurred during the processing (though it is not common practice to do so).</li>
<li><I>o</I>arrived_signals(void). Returns the field <I>arrived_signals</I> to the caller.</li>
</UL>
In each of these calls, the signal is a mask containing the bit corresponding to a given signal set. Consequently, multiple signals can be sent to a given task at the same time. The tokens ALL_SIGNALS and ANY_SIGNAL improve the readability of the code (see <a href="#016f_000a">Example 2</A>).<P>

A process is simply defined by allocating a Process Control Structure (PCS) and calling the <I>create_process</I> function with two arguments: a pointer to the PCS and the address of the process's entry point (again, see <a href="#016f_000a">Example 2</A>).<P>

<h3><a name="016f_0006">An Example<a name="016f_0006"></h3><P>

In <a href="#016f_000a">Example 2</A>, the interrupt handler signals events directly to two processes. <I>Process1</I> is a short routine that writes a character directly on the PC screen. <I>Process2</I> is a long process that spends a lot of time in a useless loop and prints dots on the screen through the standard I/O library.<P>

<I>Process1</I> is activated 200 times when <I>Process2</I> is activated once. The long calculation times of <I>Process2</I> demonstrate that the direct screen writes are continuing when <I>Process2</I> is active, which shows that the CPU has been temporarily reallocated to <I>Process1</I> during the execution of <I>Process2</I>. The CPU has not been directly stolen by the kernel, but by the interrupt (an &quot;immediate process&quot; in Sceptre terminology) that is sending signals, thus giving control to the kernel.<P>

<h3><a name="016f_0007">Performance<a name="016f_0007"></h3><P>

Context-switch performance is critical if the time spent in the kernel is to be minimized. We've measured it at 11 ms with a full C version on a Texas Instruments TMS320C30 clocked at 32 MHz. This time drops to 5.5 ms with a scheduler written in assembler. The PC version has not been timed.<P>

<h4><a name="016f_0008"><B>Table 1:</B> Sceptre kernel services.<a name="016f_0008"></h4><P>

<pre>
Class             Operation        Parameters        Action
------------------------------------------------------------------------------------------------
Task Handling     Start            Task              Starts the execution of the task.
                  Stop             Task              Stops the execution of the task.
                  Continues        Task              Resumes the execution of the task.
                  Terminate                          Terminates the task that calls this service.
                  Change           Task,             Gives task the new priority.
                    priority       priority
                  State            Task              Returns task state.
                  Priority         Task              Returns the task priority.
                  Current task                       Returns the id of currently executing task.

Signaling         Send             Event,task        Sends an event to a task.
                  Wait             Event list        Waits until one of the events has arrived.
                  Arrived          Event list        True if all the events have arrived.
                  Clear            Event list        Resets all events in list to nonarrived state.

Communication     Put              Element,queue     Places the element into the queue.
                  Get              Element,queue     Gets the element from the queue.
                  Empty            Queue             True if the queue is empty.
                  Full             Queue             True if the queue is full.

Mutual-           Lock             Region            Requests exclusive property of the region.
 exclusion               
                  Unlock           Region            Releases the region.

Task States       Nonexisting                        No descriptor associated to task (not created).
                  Existing                           A descriptor has been defined for the task.
                  Nonexecutable                      Task has descriptor but can't start execution.
                  Executable                         Task has descriptor and can start execution.
                  Not in service                     Task is executable but execution has not yet 
                                                       been started or is finished.
                  In Service                         Task is executable and has started execution
                                                        but has not finished.
                  Waiting                            Task is in service and waiting for a condition
                                                       to become True to continue execution.
                  Active                             Task is in service and not waiting for anything
                                                       except a free processor to execute.
                  Ready                              Task is active and only waiting for processor.
                  In Progress                        Task is active and currently executing on a
                                                       processor.

</pre><P>

<h4><a name="016f_0009"><B>Example 1: </B>RTMK process descriptor (PC version).<a name="016f_0009"></h4><P>

<pre>typedef unsigned long word32;    /* Double Word for 32 process max kernel */
typedef word32 SIGNALS;          /* Signal type */
struct PCS {
                jmp_buf context;        /* CPU Context (registers) */
                SIGNALS expected_signals;
                SIGNALS received_signals;
                word32 pmask;
                word32 priority;
           };

typedef struct PCS *PROCESS;     /* pointer of PROCESS CONTEXT STRUCTURE */

</pre><P>

<h4><a name="016f_000a"><B>Example 2: </B>Defining a process.<a name="016f_000a"></h4><P>

<pre>#include &quot;RTMK.H&quot;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;dos.h&gt;
#include &lt;signal.h&gt;

#define IT 0x1C
#define VIDEO_RAM 0xB8000000

PROCESS p1,p2;

int i,j;
char far* p=(char far*)VIDEO_RAM+1;

void interrupt (*old_vector)();
void interrupt clock_it()
{
 outp(0x20,0x20);
  i+=1;
  if(i==200){
    i=0;
    send(p2,1);
  }
  else send(p1,1);
}
far process1()
{
  while(1) {
    p++;
    *p++=0x31;
    if(p&gt;(char far *)VIDEO_RAM+25*80*2)
p=(char far* )VIDEO_RAM+1;
    wait(ANY_SIGNAL);
    reset(ALL_SIGNALS);
  }
}
far process2()
{static long n;
  enable();
  while(1) {
    printf(&quot;process 2:waiting\t&quot;);
    wait(1);
    printf(&quot;process 2 :reseting signals\t&quot;);
    reset(1);
    printf(&quot;process 2:calculating&quot;);
    for(j=0;j&lt;60;j+=1){
     for(n=0;n&lt;100000;n+=1);
     printf(&quot;.&quot;);
    }
    printf(&quot;calculation terminated &quot;);
  }
}
jmp_buf sys_context;
void terminate()
{
  longjmp(sys_context,1);
}
void main() {
  clrscr();
  create_process(&amp;p1,process1);
  create_process(&amp;p2,process2);
  old_vector=getvect(IT);
  disable();
  signal(SIGINT,terminate);
  setvect(IT,clock_it);
  if(!setjmp(sys_context)){
  run_kernel();
  }
  setvect(IT,old_vector);
}

</pre>

<a name="016f_000b"><a name="016f_000c"><B>[LISTING ONE]</B>

<PRE>

/* functions' prototypes */
#include &quot;rtmktype.h&quot; /* declaration of system's types */

#ifndef RTMK_H
#define RTMK_H

void create_process(PROCESS *,void far *);
void send(PROCESS,SIGNALS);

SIGNALS wait(SIGNALS);
SIGNALS reset(SIGNALS);
SIGNALS arrived_signals(void);
SIGNALS process_state(PROCESS);

#define ANY_SIGNAL 0xffffffff
#define ALL_SIGNALS 0xffffffff

int run_kernel(void);

#endif /* RTMK_H */


</PRE>

<h4><a name="016f_000d"><a name="016f_000e"><B>[LISTING TWO]</B></H4>

<PRE>


/* RTMK.C Real Time Micro Kernel */

#include &quot;RTMKTYPE.h&quot;   /* RTMK types' definitions */
#include &lt;dos.h&gt;        /* include for context and interrupts management */

#define NULL 0
#define PROCESS_STACK_SIZE 500  /* Stack size for each process */

unsigned _stklen=20;    /* minimal stack needed to start the kernel */

/********************* System's variables ****************/
struct PCS pcs_tab[32]; /* Process Context Structure table */

unsigned stack[32*PROCESS_STACK_SIZE]; /* stack table for all the process */
unsigned nbr_process;       /* number of process declared */

PROCESS current_process;    /* pointer on current process PCS */
word32 ready_process;       /* bit map list of ready process */

/************************************************************************/
/* create_process: declares the process where p is the identifier for  */
/* the kernel and entry_point is the address of the process's code      */
/* the context of the process is initialized.                           */
/************************************************************************/

void create_process(PROCESS *process_id,void far *entry_point())
{
  if (nbr_process&lt;32){ /* 32 is the maximun number of process */
  *process_id=pcs_tab+nbr_process;
  (pcs_tab[nbr_process].context)-&gt;j_ip=FP_OFF(entry_point);
  (pcs_tab[nbr_process].context)-&gt;j_cs=FP_SEG(entry_point);
  (pcs_tab[nbr_process].context)-&gt;j_flag=0;
                              /* reset flag register to disable interrupts */
    /* process stack */
  (pcs_tab[nbr_process].context)-&gt;j_sp=
            (unsigned)stack+PROCESS_STACK_SIZE*(32-nbr_process);
  (pcs_tab[nbr_process].context)-&gt;j_bp=(pcs_tab[nbr_process].context)-&gt;j_sp;    /* bp=sp (stack) */
  (pcs_tab[nbr_process].context)-&gt;j_ds=FP_SEG((void far *)stack);
  (pcs_tab[nbr_process].context)-&gt;j_ss=FP_SEG((void far *)stack);
  nbr_process+=1;
  }
}
/**************************************************************************/
/* scheduler:  the context  of the current process is saved and the system  */
/* switch to the ready process. If next_process=NULL the higher priority    */
/* ready process is searched, else the process is the ready process.        */
/**************************************************************************/
void scheduler(PROCESS next_process)
{word32 n,i;            /* i and n loop variables */

/* saves the context of current process */
  if (setjmp(current_process-&gt;context)==0){
    if (next_process)
    current_process=next_process;     /* scheduled is one in next_process */
    else {                            /* determine the next_process */
      n=0;
      i=0x80000000;
      while (!(i&amp;ready_process)) {
    n+=1;
    i&gt;&gt;=1;
      }
      current_process=pcs_tab+n; /* scheduled process is elected process */
    }
  longjmp(current_process-&gt;context,1); /* switch to the scheduled process */
  }
}
/************************************************************************/
/*  SIGNALS MANAGEMENT: send(process,signals_mask), wait(signals_mask), */
/*   reset(signals_mask), arrived_signals(), process_state(process)     */
/************************************************************************/
/* send: send to process signals that are on (1) in signals_mask        */
/************************************************************************/
void send(process,signals_mask)
PROCESS process;
SIGNALS signals_mask;
{
  process-&gt;received_signals|=signals_mask;      /* update arrived signals */
  if (process-&gt;received_signals&amp;process-&gt;expected_signals){
    /* if the process is waiting for the signals */
    ready_process|=process-&gt;pmask;      /* put the process ready */
    process-&gt;expected_signals=0;        /* reset expected signals   */
    if (current_process-&gt;priority&lt;process-&gt;priority){
    /* process's priority level is higher than current_process priority */
      scheduler(process); /* switch to process directly */
    }
  }
}
/**************************************************************************/
/* wait: puts current process in wait for signals_mask return arrived signasl*/
/**************************************************************************/
SIGNALS wait(signals_mask)
SIGNALS signals_mask;
{
  if (!(current_process-&gt;received_signals&amp;signals_mask)){
  /* if signals in signals_mask are not arrived */
    /* update expected_signals */
    current_process-&gt;expected_signals=signals_mask;
    ready_process^=current_process-&gt;pmask; /* turn process not ready */
    scheduler(NULL);                    /* switch to next process */
  }
  return (current_process-&gt;received_signals); /* returns arrived signals */
}
/************************************************************************/
/* reset: puts signals that are on in signals_mask to zero(not arrived) */
/*  returns signals that were arrived                                   */
/************************************************************************/
SIGNALS reset(signals_mask)
SIGNALS signals_mask;
{SIGNALS old_signals;
  old_signals=current_process-&gt;received_signals;  /* saves arrived signals */
                    /* reset signals_mask */
  current_process-&gt;received_signals=
        current_process-&gt;received_signals&amp;~signals_mask;
  return (old_signals);      /* returns arrived signals before reset */
}
/************************************************************************/
/* arrived_signals: returns arrived signals of the current process      */
/************************************************************************/
SIGNALS arrived_signals()
{
  return (current_process-&gt;received_signals); /* returns arrived signals */
}
/************************************************************************/
/* process_state: returns expected signals of process                   */
/************************************************************************/
SIGNALS process_state(process)
PROCESS process;
{
  return (process-&gt;expected_signals); /* returns expected signals */
}
/************************************************************************/
/* run_kernel: initialize the kernel's variables and switch to the      */
/*  first process, the last loop is the system idle process.            */
/************************************************************************/
word32 free_time;  /* time not used by process */
int run_kernel()
{int i;                         /* loop variable */
 word32 current_process_mask;   /* manage the process mask */
 PROCESS pcs_ptr;               /* pointer on process contect structure */
  disable();                    /* disable interrupts */
  /* initialization of process context structures */
  current_process_mask=0x80000000;
  ready_process=0;
  for(i=0;i&lt;=nbr_process;i++){  /* for each process initialize pcs */
    pcs_ptr=pcs_tab+i;          /* point to the pcs in the pcs table */
    pcs_ptr-&gt;received_signals=0;                /* no events arrived */
    pcs_ptr-&gt;expected_signals=0;                /* no events expected */
    pcs_ptr-&gt;pmask=current_process_mask;        /* put the process mask */
    pcs_ptr-&gt;priority=nbr_process-i;            /* set the priority */
            /* the process is now ready to take the CPU */
    ready_process|=current_process_mask;
        /* current_process_mask for the next process */
    current_process_mask=current_process_mask&gt;&gt;1;
  }
  current_process=pcs_tab+nbr_process;  /* current process is idle process */
  free_time=0;          /* reset free_time */
  scheduler(pcs_tab);   /* switch to the higher priority process */
  enable();             /* enable interrupts in idle process */
  for(;;)       /* loop forever : idle process */
    free_time+=1;       /* one for each loop */
}


</PRE>

<h4><a name="016f_000f"><a name="016f_0010"><B>[LISTING THREE]</B></H4>

<PRE>


#include &quot;RTMK.H&quot;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;dos.h&gt;
#include &lt;signal.h&gt;

#define IT 0x1C
#define VIDEO_RAM 0xB8000000

PROCESS p1,p2;
int i,j;
char far* p=(char far*)VIDEO_RAM+1;

void interrupt (*old_vector)();
void interrupt clock_it()
{
 outp(0x20,0x20);
  i+=1;
  if(i==200){
    i=0;
    send(p2,1);
  }
  else send(p1,1);
}
far process1()
{
  while(1) {

    p++;
    *p++=0x31;
    if(p&gt;(char far *)VIDEO_RAM+25*80*2) p=(char far* )VIDEO_RAM+1;
    wait(ANY_SIGNAL);
    reset(ALL_SIGNALS);
  }
}
far process2()
{static long n;
  enable();
  while(1) {
    printf(&quot;process 2:waiting\t&quot;);
    wait(1);
    printf(&quot;process 2 :reseting signals\t&quot;);
    reset(1);
    printf(&quot;process 2:calculating&quot;);
    for(j=0;j&lt;60;j+=1){
     for(n=0;n&lt;100000;n+=1);
     printf(&quot;.&quot;);
    }
    printf(&quot;calculation terminated &quot;);
  }
}
jmp_buf sys_context;
void terminate()
{
  longjmp(sys_context,1);
}
void main() {
  clrscr();
  create_process(&amp;p1,process1);
  create_process(&amp;p2,process2);

  old_vector=getvect(IT);
  disable();
  signal(SIGINT,terminate);
  setvect(IT,clock_it);
  if(!setjmp(sys_context)){
  run_kernel();
  }
  setvect(IT,old_vector);
}

</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
