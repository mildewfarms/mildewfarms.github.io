<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAY94: A C++ Multitasking Class Library</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>A C++ Multitasking Class Library<a name="0159_0003"></h1><P>
<h2><a name="0159_0001"><a name="0159_0000">Preemptive multitasking under DOS</h2><P>
<h3>Ken Gibson</h3><P>
<p><i><a name="0159_0002"><a name="0159_0000">Ken has been designing real-time embedded software for the last several years and is currently a software engineer with Intel. He can be reached at kenneth_gibson@ccm.jf.intel.com.</i></p><hr><P>
Multithreaded applications, programs capable of executing more than one section of code concurrently, can solve a number of fprogramming problems, including those found in simulation and real-time device control. Languages like Ada address this by providing support for concurrent processing in their language definition. However, most languages (including C++) do not provide built-in support for the execution of multiple threads.<P>
This article presents a class library that lets you implement a program as a set of concurrent threads. The multitasking class library is written to run under DOS and is built with Microsoft C++ 7.0. In the library, I define a <I>Thread</I> class that can be allocated for each thread of execution. A <I>Scheduler</I> object is defined to schedule the processor for thread execution. In addition, I provide a semaphore class for thread synchronization and a queue class which can be used for interthread communications. To illustrate how you use the class library, I'm providing a sample program electronically (see &quot;Availability,&quot; page 3).<P>
Although designed for DOS, the multitasking class library is not difficult to port to other systems. By adding the proper processor initialization and using a locator program, a ROMable image can be created for use on embedded processors in place of a real-time executive.<P>
<h3><a name="0159_0004">Design Goals<a name="0159_0004"></h3><P>
I wanted the library to be easy to use, flexible, and portable. As such, concurrent processing is achieved by allocating instances of the thread class and specifying a <I>main()</I> function in the constructor for each one. Flexibility is enhanced through a priority-based, preemptive scheduler.<P>
I chose counted semaphores for thread synchronization because they are flexible and can be used to implement higher-level abstractions, such as monitors and pipes. Furthermore, semaphores are designed so that they can be signaled from interrupt service routines. Thus, high-priority threads can preempt lower-priority ones for fast response to external events.<P>
Portability is more difficult because of the processor- and compiler-specific requirements of swapping processor context between threads. However, I've isolated nonportable code to a few assembly functions in one assembly module (<a href="#0159_000f">Listing Three</A>, page 98), with processor-specific definitions contained in one header file (<a href="#0159_0011">Listing Four</A>, page 98).<P>
<h3><a name="0159_0005">Class Definitions<a name="0159_0005"></h3><P>
The first class in the library is a doubly linked queue. Queues are integral to the operation of multitasking classes and are used by all of the other classes. Many existing queue classes are available, but I've included my own so that my class library can be used by itself.<P>
The <I>Dlque</I> class is defined in <a href="#0159_000b">Listing One</A>, page 96. A <I>Dlque</I> object contains a <I>private</I> forward and backward link to other <I>Dlque</I> objects, and <I>public</I> member functions for standard operations to add items, remove items, and check for an empty queue. Additional member functions include <I>Delink()</I>, which removes an item from the middle of a <I>Dlque</I>, and <I>Peak()</I> which looks at the item on the head of a <I>Dlque</I> without removing it.<P>
The doubly linked queue class is defined so that both the queue head and the items placed on the queue are <I>Dlque </I>objects: The constructor for a <I>Dlque</I> object simply sets both forward and backward pointers to point to <I>Dlque</I>. <a href="1994015b.htm">Figure 1</A> shows an empty <I>Dlque</I> head. After items have been added to the queue, the <I>flink</I> fields each point to the next item on the queue, and the <I>blink</I>s point to the previous item. The exceptions are the <I>blink</I> on the head, which points to the last item on the queue, and the <I>flink</I> on the last item, which points back to the head. <a href="1994015c.htm">Figure 2</A> shows a queue with two items.<P>
The <I>Add()</I> member function appends a new <I>Dlque</I> object to the end of a queue (see <a href="#0159_000d">Listing Two</A>, page 96). Since the <I>Dlque</I> object to be added is not on a queue, the constructor has initialized both <I>flink</I> and <I>blink</I> to point to the new item. <I>Add()</I> first sets the <I>blink</I> of the new item to the <I>blink</I> of the head. If the queue is empty, the <I>blink</I> in the head points to itself. Otherwise, it points to the current end of the queue. <I>Add()</I> sets the <I>flink</I> of the new item to point back to the queue head, because this item is added at the end of the queue. <I>Add()</I> then sets the <I>flink</I> of the <I>Dlque</I> object pointed to by the <I>blink</I> of the head to point to the new item being inserted. This could be the <I>flink</I> of either the head or the previous last item on the queue. Finally, <I>Add()</I> sets the <I>blink</I> of the queue head to point to the new item.<P>
<I>Remove()</I> removes the first item on a queue. It first checks for an empty queue and returns NULL if it finds one. Otherwise, it gets the pointer to the first item from the <I>flink</I> in the head. Next, it updates the <I>flink</I> of the head to point to the item that was pointed to by the <I>flink</I> of the item being removed. This is either the next item on the queue, or a pointer back to the queue head (if only one item was on the queue). <I>Remove()</I> then sets the <I>blink</I> of the next item in the queue to the <I>blink</I> of the item being removed. If the queue had only one item on it, the head is left with its <I>blink</I> and <I>flink</I> pointing to the head itself. Finally, <I>Remove()</I> updates the <I>flink</I> and <I>blink</I> of the removed item to point to itself.<P>
The <I>Delink()</I> member function is used to remove a <I>Dlque</I> object from the middle of a queue. It sets the <I>flink</I> of the previous item on the queue (referenced by the <I>blink</I>) to the <I>flink</I> of the item being removed, and the <I>blink</I> of the next item on the queue to the <I>blink</I> of the item being removed.<P>
<h3><a name="0159_0006">The <I>Scheduler</I> Class<a name="0159_0006"></h3><P>
The <I>Scheduler</I> object can be viewed as the kernel of a multitasking application that uses the class library presented with this article. Although users do not use the <I>Scheduler</I> class directly, an instance of a <I>Scheduler</I> object is created by the class library for use by the thread and semaphore objects in an application. As <a href="#0159_000b">Listing One</A> shows, the scheduler contains a table of all threads in the application; the prioritized ready list; and member functions to set up threads at initialization time, select which threads to execute, and swap processor context between threads. The scheduler does this through a combination of portable C++ member functions and calls to processor-specific assembly functions.<P>
When the scheduler is created, its constructor initializes its thread table (which contains all threads in the application) to be initially empty. It initializes its pointer to the free stack space available for allocation to individual threads. Each thread must have its own region of free stack, which the scheduler must allocate from the application's stack space. The <I>CurStackBase</I> member variable is initialized using the processor-specific <I>InitStackBase()</I> in its constructor. This function simply returns the current value of the stack pointer. As a thread is created, its constructor calls the scheduler's <I>GetStackSpace()</I> member function to reserve stack space and obtain an initial stack pointer. Assuming the stack grows toward low memory, <I>GetStackSpace()</I> subtracts the thread's requested stack space from <I>CurStackBase</I> to allocate a region of free stack for this new thread and leaves <I>CurStackBase</I> pointing to the new beginning of free application stack. <I>GetStackSpace()</I> then returns the previous value of <I>CurStackSpace</I> as the base of the new thread's stack. <a href="1994015d.htm">Figure 3</A> shows the stack configuration for an application that has created two threads.<P>
<I>GetStackSpace()</I> also enforces a minimum stack size for each thread, because although a thread may not allocate any stack variables, on many processors interrupts push data onto the application's stack using the stack pointer at the time of the interrupt. If there's not enough free stack space to accommodate this data, the stack pointer will cross into the adjacent thread's stack and corrupt its data.<P>
Finally, the constructor creates the NULL thread, which guarantees that when the scheduler reschedules the threads on the processor, the NULL thread will be ready to run. This can happen when all of the application threads are blocked, waiting on some event. The NULL thread executes an idle loop and runs at a priority level below any application threads, allowing one to preempt it when it's ready to run.<P>
The <I>AddThread()</I> member function adds new threads into the scheduler. It first searches the thread table for an empty entry and, if one is found, enters a pointer to the new thread. It then calls the new thread's <I>MakeReady()</I> member function to set the thread's state to READY and enters the new thread on the ready list at the specified priority level. The ready list is implemented as an array of <I>Dlque</I> objects. Each <I>Dlque</I> holds the ready threads for one priority level; <I>AddReady()</I> just adds the thread to the appropriate <I>Dlque</I>.<P>
The <I>Resched()</I> member function selects threads in the application for execution. It searches the array of ready queues in priority order for a nonempty queue. The NULL thread ensures that at least one ready thread can be scheduled. After selecting a thread, <I>Resched()</I> checks whether this new thread is the same as the last current thread. If so, the processor is already running in the correct thread's context, and <I>Resched()</I> simply returns. If not, <I>Resched()</I> calls the new thread's <I>MakeCurrent()</I> member function, which marks the new thread's state as CURRENT, points the <I>CurrentThread</I> pointer to the new thread, and calls the <I>ContextSwitch()</I> member function. <I>ContextSwitch()</I> makes an inline call to the assembly-language <I>AsmContextSwitch()</I>, which does the processor-specific work of swapping context between the old and new threads.<P>
<I>AsmContextSwitch()</I> takes as parameters pointers to the old and new thread's <I>pregs</I> structures, processor-specific structures containing the registers that must be part of a thread's saved context; see <a href="#0159_0011">Listing Four</A>. <I>AsmContextSwitch()</I> gets the pointer to the old thread's saved-register area into an internal register after saving the value of that register on the stack. Since this function is always entered through a function call, registers not conserved across function calls need not be saved. <I>AsmContextSwitch()</I> saves those that must be conserved into the saved-register area. The current values of the stack and instruction pointers are not saved, however. Instead, the return address is taken off the stack and saved as the instruction pointer, and the stack pointer is incremented so that when this thread is rescheduled, the context will be restored as if it had just returned to <I>Resched()</I>.<P>
Next, <I>Resched()</I> gets the pointer to the new thread's saved registers and restores all of the registers except the instruction pointer and the register pointing to the saved-register area. The final steps are to push the saved instruction pointer onto the stack, restore the register currently pointing to the saved-register structure, and execute a return instruction that pops the saved instruction pointer off the stack and begins executing in the new thread. <a href="#0159_000f">Listing Three</A> provides an example of <I>AsmContextSwitch()</I> for the Intel architecture.<P>
<I>Pause()</I>, the next member function, allows a thread to voluntarily relinquish control of the processor to other threads of the same priority. <I>Pause()</I> puts the calling thread back on the end of the ready list and calls <I>ReSched()</I>.<P>
The last function in the scheduler is <I>StartMultiTasking()</I>, which is called at initialization and transforms a single-threaded application to a set of threads, each running in its own context. <I>StartMultiTasking()</I> first sets up the scheduler such that the NULL thread appears to be the current thread by removing it from the ready list, setting its state to CURRENT, and pointing the scheduler's <I>CurrentThread</I> member variable to point to the NULL thread. <I>StartMultiTasking()</I> calls <I>Pause()</I>, which calls <I>Resched()</I> to select the highest-priority thread for execution and call <I>ContextSwitch()</I>. This saves the current context as the NULL thread's context and begins executing the selected thread. If the NULL thread is later rescheduled, it returns from the call to <I>Resched()</I> in <I>StartMultiTasking()</I> and executes the next statement in this function, which is an infinite loop.<P>
The <I>Scheduler</I> class is not instantiated by users of the class library. Instead, the library creates a <I>Scheduler</I> object during initialization. The library must guarantee that only one instance of the scheduler is created and that its constructor is executed before users can create any thread objects. Allocating one instance of the scheduler in a .cpp module and referencing it as an <I>extern</I> from a header file won't work because C++ does not guarantee the execution order of constructors for objects statically allocated in different modules. In that case, a class-library user could statically allocate thread objects, and their constructors could be executed before the constructor for the scheduler.<P>
This is addressed by the <I>SchedulerInit</I> helper class in <a href="#0159_000b">Listing One</A>. The header file that defines the multitasking classes allocates a static instance of <I>SchedulerInit</I> in each module that includes it. <I>SchedulerInit</I> contains a static count variable that is initialized to 0 at compile time. The constructor for <I>SchedulerInit</I> increments this count each time it is called and only creates an instance of the scheduler when the count is 0. It also initializes the static pointer <I>Scheduler::InstancePtr</I> to point to this single instance of the scheduler so that other classes can reference it.<P>
<h3><a name="0159_0007">The <I>Thread </I>Class<a name="0159_0007"></h3><P>
The <I>Thread</I> class in <a href="#0159_000b">Listing One</A> contains the context of a thread of execution within the application. <I>Private</I> member variables include the <I>Dlque</I> object that places the thread on the ready list or on semaphores, and the processor-specific <I>pregs</I> structure for saving the thread's processor state when the thread must block. A thread also stores its current state in its private area. <a href="1994015e.htm">Figure 4</A> shows the allowable states and state transitions for a thread. A thread can either be CURRENT, BLOCKED, or READY. A READY thread waits on the ready list and will transition to the CURRENT state when it becomes the highest-priority thread to run. A currently running thread can transition to the BLOCKED state by waiting on a semaphore or back to READY if preempted by a higher-priority thread, or if it signals a semaphore with a waiting thread of equal or higher priority. A BLOCKED thread waiting on a semaphore will return to the READY state when the semaphore is signaled and the thread is at the head of the waiter's list.<P>
<I>Public</I> member functions on threads include functions to set the current state of the thread as well as the constructor. The thread constructor takes a pointer to a <I>main()</I> function as a parameter; optional parameters may be provided to specify the amount of stack space and the priority. The constructor allocates a region of free stack space from the scheduler, gets its initial stack pointer, and places a pointer to the static <I>ThreadRet()</I> on the thread's stack so that if the thread ever returns from its <I>main()</I> function, it will return to <I>ThreadRet()</I>.<P>
The thread constructor also calls the assembly-language <I>InitPregs()</I> to get its initial saved-processor registers. These are initialized so that the first time the thread is scheduled, it begins executing at its <I>main()</I> function. An <I>InitPregs()</I> for the Intel architecture is in <a href="#0159_000f">Listing Three</A>. Finally, the constructor sets the thread state to READY and enters the thread into the scheduler's ready list to await execution.<P>
<h3><a name="0159_0008">The <I>Semaphore </I>Class<a name="0159_0008"></h3><P>
A semaphore is defined as a subclass of a <I>Dlque</I> since one of its primary functions is to queue waiting threads. Otherwise, it is a straightforward implementation of a counted semaphore. The constructor for a semaphore allows the option to specify a nonzero initial count: If none is provided, it defaults to 0. <I>Wait()</I> first checks for a nonzero count. If nonzero, the count is decremented and <I>Wait()</I> returns to the caller. If 0, then the calling thread must be blocked. It changes the calling thread to the blocked state, queues it on the list of waiting threads, and calls the scheduler's <I>Resched()</I> to switch to another thread.<P>
The semaphore's <I>Signal()</I> first checks for any waiting threads. If none are present, it increments the count and returns to the caller. If threads are waiting, <I>Signal()</I> removes the next waiting thread from the list, readies it to run, and returns it to the ready list. <I>Signal()</I> then checks to see if this is now the highest-priority thread and if so, returns the calling thread to the ready list and tells the scheduler to perform a context switch.<P>
<h3><a name="0159_0009">The <I>Main() </I>Function<a name="0159_0009"></h3><P>
When using the class library, application programmers provide the main-<P>level functions for the threads that they create. The class library provides the <I>main()</I> for the application where it initiates concurrent processing among the threads. When <I>main()</I> is executed, the scheduler's constructor will have already executed. The scheduler requires that at least one thread be statically allocated so that it will be initialized and entered into the ready list when <I>main()</I> is called. As shown in <a href="#0159_000d">Listing Two</A>, <I>main()</I> calls <I>Scheduler::StartMultiTasking()</I> to begin executing in a thread context.<P>
<h3><a name="0159_000a">Conclusion<a name="0159_000a"></h3><P>
The multitasking class library presented here allows C++ programmers to write programs as a set of concurrent threads. It does so using thread and semaphore classes and a scheduler object. While this is particularly relevant for real-time system designers, it can also be a valuable addition to any C++ programmer's toolbox.<P>
<h4><a href="1994015f.htm">Figure 1</A>: Empty doubly linked queue head.</h4><P>
<h4><a href="19940160.htm">Figure 2</A>: Doubly linked queue with two items.</h4><P>
<h4><a href="19940161.htm">Figure 3</A>: Stack use with two threads.</h4><P>
<h4><a href="19940162.htm">Figure 4</A>: Thread states.</h4><P>


<h4><a name="0159_000b"><a name="0159_000c"><B>[LISTING ONE]</B></H4>

<PRE>


//    threads.h  -- Multitasking class definitions
#ifndef THREADS_H
#define THREADS_H
#include &quot;specific.h&quot;
#define TRUE    1
#define FALSE   0

typedef void    (*vfptr)();

class Thread;
class Semaphore;

// Stack size values
#define MIN_STACK        0x400      // Minimum stack size per thread
#define NULL_STACK       0x400      // Space for NULL thread
#define INIT_STACK       0x080      // Space for scheduler initialization
#define DEFAULT_STACK    0x400      // Default size

// Values for thread states
#define THREAD_UNUSED   0           // Thread Table entry unused
#define THREAD_READY    1           // Thread is ready to run
#define THREAD_CURRENT  2           // Thread is currently running
#define THREAD_BLOCKED  3           // Blocked on a sem or timer

// Thread priorities
#define LOWEST_PRIORITY     4
#define HIGHEST_PRIORITY    0
#define NULL_PRIORITY       (LOWEST_PRIORITY+1)

// Max number of threads to allow
#define MAX_THREADS     8
#define MAX_THREADID    (MAX_THREADS-1)

//  Doubly Linked Queue class
class Dlque
{
private:
    Dlque   *flink;         // Forward Link
     Dlque  *blink;         // Backward Link
public:
    int Empty();                // Check for empty queue
    void Add( Dlque *Queue );   // Add to the back
    Dlque *Remove();            // Remove from the front
    void Delink();              // Remove from the middle
    Dlque *Peak();              // Look at front without removing.

    Dlque() { flink = blink = this; }
    ~Dlque() {}
};
//  The SCHEDULER class
class Scheduler
{
private:
     Thread  *ThreadTab[MAX_THREADS];
     Dlque   ReadyList[NULL_PRIORITY+1];
     char    *CurStackBase;
     Thread  *NullThread;
     void    ContextSwitch( pregs *OldRegs, pregs *NewRegs )
                 { asmContextSwitch( OldRegs, NewRegs ); }
public:
      static Scheduler *InstancePtr;  // Ptr to one and only instance
    Thread  *CurrentThread;          // Current thread
    char    *GetStackSpace( unsigned Size );
    void    ReSched();               // Reschedule threads
    void    AddReady( Thread *pThread );
    void    RemoveReady( Thread *pThread );
    char    AddThread( Thread *pThread );
    void    Pause();
    void    StartMultiTasking();
    Scheduler();
    ~Scheduler() {}
};
// Scheduler initialization class.  Insures that only one instance
// of the Scheduler is created no matter how many modules include
// threads.h.  Also insures that it is created before any threads.
class SchedulerInit
{
private:
    static int count;       // Compile time initialized to 0
public:
     SchedulerInit() { if( count++ == 0 )
                Scheduler::InstancePtr = new Scheduler; }
     ~SchedulerInit() { if( --count == 0 )
                delete Scheduler::InstancePtr; }
};
static SchedulerInit   SchedInit;
// THREAD class
class Thread
{
private:
     friend class Scheduler;
     friend class Semaphore;
     Dlque       Queue;          // For putting threads on Queues
     pregs       Regs;           // Processor specific saved registers
     char        State;          // Current thread state
     static void ThreadRet();    // Called if a thread returns from main
public:
     char        id;             // Thread ID
     unsigned    Priority;
     void MakeReady() { State = THREAD_READY; }
     void MakeCurrent() { State = THREAD_CURRENT; }
     void MakeBlocked() { State = THREAD_BLOCKED; }
     Thread( vfptr MainRtn,
                unsigned Priority=LOWEST_PRIORITY,
                unsigned StackSpace=DEFAULT_STACK );
     ~Thread() {}
};
//  SEMAPHORE class
class Semaphore : Dlque
{
private:
     short       count;
public:
     void Wait();
     void Signal();
     Semaphore( short InitCount=0 );
     ~Semaphore() {}
};
#endif  // THREADS_H


</PRE>

<h4><a name="0159_000d"><a name="0159_000e"><B>[LISTING TWO]</B></H4>

<PRE>


//  threads.cpp   -- Implementation of Multitasking Classes
#include        &lt;stdio.h&gt;
#include        &lt;stdlib.h&gt;
#include        &quot;threads.h&quot;

#define TRUE    1
#define FALSE   0

// Static count of SchedulerInit object that have been created.
int SchedulerInit::count = 0;

// Pointer to the one instance of the scheduler.
Scheduler *Scheduler::InstancePtr;

//  Dlque::Empty  --  Returns TRUE if the Dlque is empty.
inline int Dlque::Empty()
{
     return( flink == this );
}
//  Dlque::Add  -- Adds an item to the end of a doubly linked queue.
void Dlque::Add( Dlque *Queue )
{
     Queue-&gt;blink = blink;
     Queue-&gt;flink = this;
     blink-&gt;flink = Queue;
     blink = Queue;
}
//  Dlque::Remove  -- Removes item at the head of the dlque.  NULL if empty.
Dlque *Dlque::Remove()
{
     Dlque   *Item;
     if( Empty() )  {
          return( NULL );
     }
     Item = flink;
     flink = Item-&gt;flink;
     Item-&gt;flink-&gt;blink = Item-&gt;blink;
     Item-&gt;flink = Item-&gt;blink = Item;
     return( Item );
}
//  Dlque::Delink  -- Delinks an item from the middle of a dlque.
void Dlque::Delink()
{
     blink-&gt;flink = flink;
     flink-&gt;blink = blink;
     flink = blink = this;
}
//  Dlque::Peak -- Returns a pointer to the first item without removing it.
Dlque *Dlque::Peak()
{
     if( Empty() ) {
          return( NULL );
     }
     return( flink );
}
//  Scheduler Constructor
Scheduler::Scheduler()
{
     short       i;
     InstancePtr = this;
     // Initialize the Thread Table
     for( i=0; i&lt;MAX_THREADS; ++i ) {
          ThreadTab[i] = NULL;
     }
     // Initialize System Stack Base to the current stack pointer
     CurStackBase = InitStackBase();
     // Allocate space for scheduler initialization
     CurStackBase -= INIT_STACK;
     // Create the NULL Thread.
     NullThread = new Thread( NULL, NULL_PRIORITY, NULL_STACK );
}
//  GetStackSpace -- Used by new threads to get their initial SP
char *Scheduler::GetStackSpace( unsigned Size )
{
     char *Base;
     if ( Size &lt; MIN_STACK ) {
          Size = MIN_STACK;
     }
     Base = CurStackBase;
     CurStackBase -= Size;   // Assume stack grows toward low mem.
     return Base;
}
//  Scheduler::AddThread  -- Add a new thread into the Scheduler
char Scheduler::AddThread( Thread *pThread )
{
     register char id;
     for( id=0; id&lt;MAX_THREADS; ++id ) {
          if( ThreadTab[id] == NULL ) {
                break;
          }
     }
     if( id == MAX_THREADS ) {
          return( FALSE );
     }
     ThreadTab[id] = pThread;
     pThread-&gt;MakeReady();   // Tell new thread to make itself READY
     AddReady( pThread );    // Add to ready list in the scheduler
     return( TRUE );
}
//  AddReady -- Add the given thread to the ReadyList
inline void Scheduler::AddReady( Thread *pThread )
{
     ReadyList[pThread-&gt;Priority].Add( &amp;pThread-&gt;Queue );
}
//  RemoveReady -- Remove the specified thread from the ready list.
inline void Scheduler::RemoveReady( Thread *pThread )
{
     pThread-&gt;Queue.Delink();
}
//  Scheduler::ReSched  -- Picks next ready thread and calls ContextSwitch to
//      perform the context switch to the new thread.
void Scheduler::ReSched()
{
     Thread              *OldThread;
     Thread              *NewThread;
     unsigned            Priority;
     for( Priority=0; Priority&lt;=NULL_PRIORITY; ++Priority ) {
          if( !ReadyList[Priority].Empty() ) {
                        NewThread = (Thread *)ReadyList[Priority].Remove();
                break;
          }
     }
     // If calling thread is still ready and is the highest
     // priority ready thread, just return
     if( NewThread == CurrentThread ) {
          CurrentThread-&gt;MakeCurrent();
          return;
     }
     OldThread = CurrentThread;
     CurrentThread = NewThread;
     CurrentThread-&gt;MakeCurrent();
     ContextSwitch( &amp;OldThread-&gt;Regs, &amp;CurrentThread-&gt;Regs );
}
//  Scheduler::Pause -- Checks for any ready threads that are equal or higher
//      priority than the calling thread.  If so, reshcedules.
void Scheduler::Pause()
{
     short       SavedPS;
     SavedPS = DisableInt();
     CurrentThread-&gt;MakeReady(); // Switch from Current to Ready
    AddReady( CurrentThread );  // Caller back on end of ReadyList
    ReSched();                  // Run new highest priority thread
    EnableInt( SavedPS );
}
//  StartMultiTasking -- Perform transformation from a single threaded
//     application to a set of threads running in individual contexts. This
//     is done by first setting up the system variables to look like the Null
//     thread is the current thread. Then, call Pause() which will cause the
//     context of this routine to be saved as the Null thread's context. When
//     the Null thread is rescheduled, the CPU will return to this routine.
//     Rest of this routine then becomes the loop that runs in the Null thread.
void Scheduler::StartMultiTasking()
{
     RemoveReady( NullThread );
     CurrentThread = NullThread;
     NullThread-&gt;MakeCurrent();
     Pause();
     while( TRUE );      // Loop in the NULL thread
}
//  Thread::Thread -- Creates a new thread based on the specified params.
Thread::Thread( vfptr MainRtn,
                unsigned TaskPriority, unsigned StackSpace )
:Queue()
{
     short       *StackPtr;
     short       RegContents;
     // Set up the initial stack so that if the main routine for this
     // thread returns for some reason, it returns to ThreadRet
     StackPtr
          = (short*)Scheduler::InstancePtr-&gt;GetStackSpace(StackSpace);
     *StackPtr = (short)Thread::ThreadRet;
     // Call processor/compiler specific routine to initialize
     // the saved processor registers.
     InitPregs( &amp;this-&gt;Regs, (short)StackPtr, (short)MainRtn );
     Priority = TaskPriority;
     Scheduler::InstancePtr-&gt;AddThread( this );
     MakeReady();                    // Set our state to READY
}
//  ThreadRet -- Routine that is placed on each thread's stack as the return
//      address in case the 'main' routine ever returns.
void Thread::ThreadRet()
{
#ifdef _DEBUG
    printf( &quot;A Thread returned from main()\n&quot; );
#endif
    exit( 1 );
}
//  Semaphore::Semaphaore  -- Constructor for objects of the class semaphore.
Semaphore::Semaphore( short InitCount )
{
     count = InitCount;
}

//  Semaphore::Wait -- Queue a thread as a waiter on a semaphore
void Semaphore::Wait()
{
     short       SavedPS;
     SavedPS = DisableInt();
     if( count )         // No need to block waiter
     {
          --count;
     }
     else                // Waiter must block
     {
          Scheduler::InstancePtr-&gt;CurrentThread-&gt;MakeBlocked();
          Add( &amp;Scheduler::InstancePtr-&gt;CurrentThread-&gt;Queue );
          Scheduler::InstancePtr-&gt;ReSched();
     }
     EnableInt( SavedPS );
}
//  Semaphore::Signal -- Signal a semaphore
void Semaphore::Signal()
{
     short       SavedPS;
     Thread      *Waiter;
     SavedPS = DisableInt();
     if( Empty() )                       // No waiters to reschedule
     {
          ++count;
     }
     else                                // There are blocked waiters
     {
          Waiter = (Thread*)Remove();     // Get next waiter
          Waiter-&gt;MakeReady();            // Make it ready
          Scheduler::InstancePtr-&gt;AddReady( Waiter );
          if( Waiter-&gt;Priority &lt;
             Scheduler::InstancePtr-&gt;CurrentThread-&gt;Priority ) {
             Scheduler::InstancePtr-&gt;CurrentThread-&gt;MakeReady();
             Scheduler::InstancePtr-&gt;AddReady(
             Scheduler::InstancePtr-&gt;CurrentThread );
             Scheduler::InstancePtr-&gt;ReSched();
          }
     }
     EnableInt( SavedPS );
}
//  main()
void main()
{
     Scheduler::InstancePtr-&gt;StartMultiTasking();
}


</PRE>

<h4><a name="0159_000f"><a name="0159_0010"><B>[LISTING THREE]</B></H4>

<PRE>


;  Intel Architecture specific routines.
     .MODEL small
     .CODE                       ; Create C compatible CS
; Offsets into the saved register area for each register
AX_OFST = 0
BX_OFST = 2
CX_OFST = 4
DX_OFST = 6
BP_OFST = 8
SI_OFST = 10
DI_OFST = 12
DS_OFST = 14
SS_OFST = 16
ES_OFST = 18
PSW_OFST= 20
PC_OFST = 22
SP_OFST = 24
INIT_PSW = 0200h        ;Thread's initial Processor Status Word
; Return the current stack pointer. This will be used as a reference for
; assigning the stack base for each thread.
; C Prototype:  char *InitStackBase( void );
     PUBLIC _InitStackBase
_InitStackBase  PROC
     mov ax, sp
     sub ax, 2       ;Where it will be after return
     ret
_InitStackBase ENDP
;  asmContextSwitch - Switches processor context between two threads
;  C Prototype: void asmContextSwitch( pregs *OldRegs, pregs *NewRegs );
;  1.  Assume SMALL or COMPACT memory model. Don't save and restore CODE,
;      STACK, or DATA SEGMENTS. These always stay the same.
;  2.  Assume Microsoft and Borland C calling conventions. This routine will
;      always be 'called' and the registers AX, BX, CX, DX do not need to be
;      preserved across procedure calls and are not saved and restored here.
     PUBLIC _asmContextSwitch
_asmContextSwitch   PROC
; Currently have:   SP   -&gt; Return Address
;                   SP+2 -&gt; Old reg save area pointer
;                   SP+4 -&gt; New reg save area pointer
     push    si              ;Save old task's SI
     push    bp              ;And BP
     mov bp, sp              ;Get back to the base of the stack frame
     add bp, 4
     mov si, [bp+2]          ;Get pointer to old register save area
     pop [si+BP_OFST]        ;Save old process's BP in save area
     pop [si+SI_OFST]        ;and SI
     mov [si+DI_OFST], di    ;and rest of the regs that must be saved
     mov [si+ES_OFST], es
     pushf                   ;Push PSW onto the stack
     pop [si+PSW_OFST]       ;then pop into save area
; Save the return address as the saved PC and increment the SP before
; saving so context will be restored as if just returned to ReSched
     mov bx, [bp]            ;Get return address off the stack
     mov [si+PC_OFST], bx
     mov bx, sp              ;Increment SP
     add bx, 2
     mov [si+SP_OFST], bx    ;and save
     mov si, [bp+4]          ;Get new process's saved regs
     mov bp, [si+BP_OFST]    ;and restore registers
     mov di, [si+DI_OFST]
     mov es, [si+ES_OFST]
     push    [si+PSW_OFST]   ;Push new PSW onto the stack
     popf                    ;then pop into PSW
     mov sp, [si+SP_OFST]    ;Switch to new stack
; Push the saved PC on the stack to be restored when RET is executed
     push    [si+PC_OFST]
     mov si, [si+SI_OFST]    ;Finally, restore SI
     ret
_asmContextSwitch  ENDP
; InitPregs -- Sets the initial saved processor register for a new thread.
; C Prototype: void InitPregs(pregs* pRegs,short InitStack,short MainRoutine );
     PUBLIC _InitPregs
_InitPregs PROC
     push    si
     push    bp
     mov bp, sp
     add bp, 4
     mov si, [bp+2]                  ;Get pointer to pregs
     ; Assume SMALL or COMPACT memory model and set the
     ; initial segments the same as the current ones
     mov [si+SS_OFST], ss
     mov [si+DS_OFST], ds
     mov [si+ES_OFST], es
     mov [si+PSW_OFST], INIT_PSW
     mov ax, [bp+4]
     mov [si+SP_OFST], ax        ;Stackbase
     mov ax, [bp+6]
     mov [si+PC_OFST], ax        ;Main Routine
     pop bp
     pop si
     ret
_InitPregs  ENDP
; DisableInt - Disables Interrupts and returns current Processor Status Word
; C Prototype:  short DisableInt( void );
     PUBLIC _DisableInt
_DisableInt PROC
     pushf
     pop     ax
     cli
     ret
_DisableInt ENDP
; EnableInt - Enables interrupts IF enabled in saved Processor Status Word
; C Prototype:  void EnableInt( short );
     PUBLIC _EnableInt
_EnableInt  PROC
     push    bp
     mov     bp, sp
     mov     ax, [bp+4]      ;Get saved Processor Status Word
     and     ax, 0200h       ;If Interrupts were enabled
     jz      NoEnable
     sti                     ;then re-enable them
NoEnable:
     pop     bp
     ret
_EnableInt  ENDP

     END


</PRE>

<h4><a name="0159_0011"><a name="0159_0012"><B>[LISTING FOUR]</B></H4>

<PRE>


//  specific.h  --  Processor and compiler specific definitions
#ifndef SPECIFIC_H
#define SPECIFIC_H
// Intel processor saved register area.
struct pregs
{
     short    ax;     // Offset 0
     short    bx;     // 2
     short    cx;     // 4
     short    dx;     // 6
     short    bp;     // 8
     short    si;     // 10
     short    di;     // 12
     short    ds;     // 14
     short    ss;     // 16
     short    es;     // 18
     short    psw;    // 20
     short    pc;     // 22
     short    sp;     // 24
};
// Processor specific routines in specific.asm
extern &quot;C&quot; void asmContextSwitch( pregs*, pregs* );
extern &quot;C&quot; void InitPregs( pregs*, short, short );
extern &quot;C&quot; char *InitStackBase( void );
extern &quot;C&quot; short DisableInt( void );
extern &quot;C&quot; void EnableInt( short );

#endif

</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
