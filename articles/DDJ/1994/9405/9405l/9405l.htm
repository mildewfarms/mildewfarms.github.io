<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAY94: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="0184_0003"></h1><P>
<h2><a name="0184_0001"><a name="0184_0000">Trouble in Paradise</h2><P>
<h3>Tom Swan</h3><P>
<a name="0184_0002"><a name="0184_0000">Algorithms are great at describing solutions to problems such as how to sort an array or how to compress a text file. But algorithms don't usually provide all the gory details needed to implement a method of solution--my favorite definition for an algorithm. Error handling, for example, complicates the job of turning an algorithm into a running program. What should an algorithm do to help programmers cast out the demons in their code?<P>
The answer depends on the algorithm's needs, its peculiarities, operating-system requirements, and a host of other variables. How you deal with trouble in paradise also depends on what you consider to be an error. The word error suggests that something has gone wrong, but it isn't practical for algorithms to account for every possible unplanned event such as a hard-drive failure or a bad parity bit in RAM. Instead, errors at the algorithm level are better thought of as <I>exceptional conditions</I> that arise during the course of an algorithm's execution. In this sense, errors are normal, though unusual, values, conditions, or other happenstance that require special handling.<P>
Why, then, do most algorithms ignore exceptional conditions? I've never seen a sorting algorithm that explains, for example, what to do with a stack overflow, even though a proper implementation must plan for that unhappy event. Programmers are expected to understand that, in addition to implementing an algorithm's steps, other details such as error handling are required. Perhaps if algorithms provided more of these details, fewer bugs would be introduced by neglecting to account for potential problems known to the algorithm's designer.<P>
ANSI C++ exceptions provide the tools that algorithms can use to do exactly that. The concepts of exceptions and exception handlers aren't new. They've been around for years but have usually been provided as library functions or operating-system interrupt services. As nonsystem-dependent language elements, exceptions are suitable for incorporating error handling into algorithms. For those who haven't used exceptions, the following is a brief tutorial. After that, I'll list an algorithm in pseudo-Pascal and its implementation in C++, both of which use exceptions to report illegal input values.<P>
<h3><a name="0184_0004">C++ Exceptions<a name="0184_0004"></h3><P>
Exceptions come with their own terminology. There are three main concepts to learn--how to create an exception, how to handle one, and how to enable exception handling.<P>
<UL>
<li>To create an exception, a program <I>throws </I>an object that describes the nature of the exception. The object can be a literal value, a string, an object of a class, or any other object. (An object is not necessarily a class object. It's just a value that describes an exceptional condition.)</li>
<li>To handle an exception, a program <I>catches</I> the value thrown by another process. Program statements that catch exceptions are called <I>exception handlers</I>.</li>
<li>To enable exception handling, a program <I>tries</I> one or more processes that might throw exceptions.</li>
</UL>
A function throws an exception, signaling a problem, by using a Throw statement such as: <I>throw 1;</I>. Usually, however, you shouldn't throw literal integers around--they don't mean much out of context. A better object to throw is a string: <I>throw &quot;overflow&quot;;</I>. That's more meaningful. Elsewhere in the program, an exception handler can catch and display the message; see <a href="#0184_0008">Example 1(a)</A>.<P>
What happens at this point is up to you. The program might continue or end, or it could restart the condition that caused the problem. An exception is a mechanism for reporting and dealing with errors--an exception doesn't dictate a course of action. Actually, exceptions aren't limited to error handling. An empty list, for example, could report its bare cupboards as an exceptional condition that requires special treatment. Exceptions can be objects of any type, but they are most conveniently represented as instances of a class. For example, you might declare an <I>Overflow </I>class--it doesn't need any substance, just a name: <I>class Overflow { };</I>. You can throw an instance of the class as an exception, <I>throw Overflow();</I>. Elsewhere, the program can catch the exception in a Catch statement, as in <a href="#0184_0008">Example 1(b)</A>.<P>
The Throw statement throws an object of the <I>Overflow</I> class, which is caught by the Catch statement at another place in the program (never mind exactly where for the moment). The technique might be easier to understand by giving the object a name; see <a href="#0184_0008">Example 1(c)</A>.<P>
You might call error-class member functions for the named exception object. For example, class <I>Overflow</I> could declare a member function <I>Report</I>, as in <a href="#0184_0008">Example 1(d)</A>. The Catch statement can call <I>Report</I> for the thrown exception object to display an error message; see <a href="#0184_0008">Example 1(e)</A>.<P>
Now it's time to toss in another wrinkle--try blocks. Consider the sample function in <a href="#0184_0009">Example 2(a)</A> that throws a couple of exceptions. If conditionA is True (whatever that is), the function throws a string exception that reports &quot;Big trouble!.&quot; If conditionB is true, the function throws an object of the <I>Overflow</I> class, initialized by the default constructor. If the function detects no errors, it returns normally, passing back the return value &quot;123.&quot; Throwing an exception immediately terminates the function. In other words, <I>an exception provides functions with an alternate return mechanism</I>. Rather than reserve a special value such as --1 that, if returned by a function, signals an error, exceptions make it possible for functions to return a different type of value that flags a problem.<P>
To enable exception handling, call a function inside a try block. For example, <a href="#0184_0009">Example 2(b)</A> shows how you might call <I>AnyFunction</I>.<P>
A try block contains one or more statements for which you want to catch exceptions. The most important rule to remember about try blocks is that Catch statements must follow them immediately. You cannot have a try block in one place and Catch statements elsewhere. That would be like having a baseball pitcher in one stadium and the catcher in another. <a href="#0184_0009">Example 2(c)</A> is a more complete example that keeps all the necessary players in the same ballpark. The expanded code first tries to call <I>AnyFunction</I>. If the function returns normally, the program assigns the function result to x. In that case, the program skips the two Catch statements because there are no exceptions to handle. If <I>AnyFunction</I> throws an exception, however, the try block immediately terminates, and a subsequent Catch statement catches the thrown object.<P>
<h3><a name="0184_0005">Exceptions in Practice<a name="0184_0005"></h3><P>
There are several other esoteric details concerning exceptions, their declaration forms, and the consequences of throwing exceptions in constructors, destructors, and so forth. My aim here, though, is not to provide a complete tutorial on C++ exceptions, but to introduce the main concepts as a means for dealing with errors in algorithms expressed in Pascal. <a href="#0184_000a">Example 3</A> shows a sample algorithm in pseudo-Pascal for raising a real number to any real-number power.<P>
The method uses the formula <I>exp(E * ln(B)),</I> where <I>E</I> is the exponent and <I>B</I> is the base. Textbooks on programming typically list this algorithm, but neglect to account for conditions that cause the method to fail--raising a negative base to a fractional exponent, for instance, and raising zero to an exponent less than zero. As a consequence, many programs that use the standard formula simply halt when fed illegal input--not exactly a robust implementation. In the example, on attempting to raise a negative base to a fractional exponent, <I>Power</I> accounts for illegal arguments by throwing an exception. The resulting <I>Error</I> object completely describes the problem, and it includes copies of the illegal input values: <I>throw Error(b, e);</I>.<P>
I don't know of any Pascal compilers that have Catch, Throw, and Try keywords, so you probably can't run the example as listed. Using an ANSI C++ compiler such as Borland C++ 4.0, however, you can compile and run the algorithm's implementation in <a href="#0184_000f">Listing One</A> (page 147). The sample program includes a <I>Power</I> function that throws exceptions for illegal arguments. Call <I>Power</I> in a try block like that in <a href="#0184_000b">Example 4(a)</A>. If <I>Power</I> throws an exception, the final output statement is skipped and the try block immediately ends. A subsequent Catch statement can trap the exceptions; see <a href="#0184_000b">Example 4(b)</A>.<P>
Listing One's <I>Power</I> function also shows one way to use exceptions to trap errors in source-code implementations--a function that doesn't account for all possible input values, for example. Enable the last commented statement in <I>Power</I> to throw the exception &quot;Implementation Error&quot; if the preceding code doesn't account for all possible exponent and base arguments (see the <I>Error</I> class's default constructor). This statement causes the compiler to generate an expected &quot;Unreachable Code&quot; warning. The warning is desirable in this case because it indicates that the preceding statements provide for all possible exit paths from <I>Power</I>.<P>
<h3><a name="0184_0006">Unhandled Exceptions<a name="0184_0006"></h3><P>
You might wonder: What happens to dropped exceptions--those that the program fails to catch? The answer is simple and logical. Unhandled exceptions pass upwards in the call chain until handled by a Catch statement or until there are no more exception handlers left. In that case, C++ calls one of three global functions to deal with the exception: <I>Abort</I>, <I>Terminate</I>, or <I>Unexpected</I>:<P>
<UL>
<li>Exceptions that are not handled by a Catch statement call the <I>Unexpected</I> function. By default, <I>Unexpected</I> calls <I>Terminate.</I></li>
<li>Exceptions that detect a corrupted stack or that result from a destructor throwing an exception (a dangerous practice to be reserved only for the most critical of problems) call the <I>Terminate</I> function. By default, <I>Terminate</I> calls <I>Abort</I>.</li>
<li>The <I>Abort</I> function is lowest on the totem pole. As you might expect, <I>Abort</I> ends the program immediately. Programs should never directly call <I>Abort</I>.</li>
</UL>
Obviously, <I>Unexpected</I>, <I>Terminate</I>, and <I>Abort</I> are intimately related. You can replace the first two functions with your own code to deal with unhandled exceptions in whatever way you wish. In some programs, it might make sense to replace <I>Unexpected</I> with a default error handler. In others, you might want to replace <I>Terminate</I> to sweep the floors and dust the rugs (and close open files) in case a program ends prematurely. You cannot replace <I>Abort</I>. An <I>Unexpected</I> function may throw an exception, in which case the search for an exception handler (that is, a Catch statement) begins at the location that originally caused <I>Unexpected </I>to be called. A <I>Terminate</I> function may not throw an exception. Neither <I>Unexpected</I> nor <I>Terminate</I> may return normally to their callers. Call the C++ <I>set_terminate</I> and <I>set_unexpected</I> functions to replace <I>Terminate</I> and <I>Unexpected</I> with your own code. Because these functions are defined at the language level, rather than as low-level system subroutines, algorithms and their implementations can employ exceptions for error handling, while still providing programmers complete control over the specific actions to be taken when trouble brews.<P>
<h3><a name="0184_0007">Your Turn<a name="0184_0007"></h3><P>
Next month, more algorithms and techniques in Pascal and C++. Meanwhile, send your favorite algorithms, tools, and comments to me in care of <I>DDJ</I>.<P>
<h4><a name="0184_0008"><B>Example 1:</B> (a) An exception handler can catch and display a message; <P>(b) a program can catch an exception in a Catch statement; (c) using the Throw statement; (d) class Overflow declares a member function Report; (e) displaying an error message.<a name="0184_0008"></h4><P>
<pre>
<b>(a)</b>
catch (char* message) {
  cout 
    &lt;&lt; &quot;Error! -- &quot; 
    &lt;&lt; message 
    &lt;&lt; endl;
}

<b>(b)</b>
catch (Overflow) {
  cout 
    &lt;&lt; &quot;Overflow detected!&quot; 
    &lt;&lt; endl;

}

<b>(c)</b>
catch (Overflow overObject) {
  // ...
}

<b>(d)</b>
class Overflow {
  void Report() { 
    cout 
      &lt;&lt; &quot;Error: overflow&quot; 
      &lt;&lt; endl;
  }
};

<b>(e)</b>
catch (Overflow overObject) {
  overObject.Report();
}

</pre><P>
<h4><I>Dr. Dobb's Journal, May 1994     </I>#</h4><P>
<h4><a name="0184_0009"><B>Example 2:</B> (a) Throwing exceptions; (b) enabling exception handling by calling a function inside a try block; (c) calling AnyFunction.<a name="0184_0009"></h4><P>
<pre>
<b>(a)</b>
int AnyFunction()
{
  if (conditionA) 
    throw &quot;Big trouble!&quot;;
  if (conditionB) 
    throw Overflow();
  return 123;  // normal return
}

<b>(b)</b>
try {
  int x = AnyFunction();
}

<b>(c)</b>
try {
  cout &lt;&lt; &quot;Here we go! &lt;&lt; endl;
  int x = AnyFunction();
  cout &lt;&lt; &quot;x == &quot; &lt;&lt; x &lt;&lt; endl;
}
catch (char* message) {
  cout &lt;&lt; &quot;Error! -- &quot; 
    &lt;&lt; message &lt;&lt; endl;
}
catch (Overflow) {
  cout &lt;&lt; &quot;Overflow!&quot; &lt;&lt; endl;
}

</pre><P>
<h4><a name="0184_000a"><B>Example 3:</B> Pseudocode for Algorithm #19 (Power).<a name="0184_000a"></h4><P>
<pre>function Power(Base, Exponent: double):
double;
  function Pow(B, E: double): double;
  begin
    Pow := exp(E * ln(B))
  end;
begin
  if (Base &gt; 0.0) then
    Power := Pow(Base, Exponent)
else if (Base &lt; 0.0) then
  begin
    if frac(Exponent) = 0.0 then
      if odd(trunc(Exponent)) then
        Power := -Pow(-Base, Exponent)
      else
        Power := Pow(-Base, Exponent)
    else
      Throw Error(Base, Exponent)
  end else
  begin
    if Exponent = 0.0 then
      Power := 1.0
    else if Exponent &lt; 1.0 then
      Throw Error(Base, Exponent)
    else
      Power := 0.0
  end
end;

</pre><P>
<h4><a name="0184_000b"><B>Example 4:</B> (a) Calling Power in a try block; (b) trapping exceptions with a Catch statement.<a name="0184_000b"></h4><P>
<pre>
<b>(a)</b>
try {
  double base, exponent, result
  // ... prompt for base and exponent
  result = Power(base, exponent);
  cout &lt;&lt; &quot;result == &quot; &lt;&lt; result &lt;&lt; endl;
};

<b>(b)</b>
catch (Error&amp; e) {
  e.Report();
  return -1;
}
return 0;
</pre><P>

<a name="0184_000e"><a name="0184_000f"><B>[LISTING ONE]</B>

<PRE>

// powex.cpp -- Implementation of Power function
// requires Borland C++ 4.0 or ANSI C++ compiler with exceptions
// Copyright (c) 1994 by Tom Swan. All rights reserved

#include &lt;iostream.h&gt;
#include &lt;math.h&gt;

class Error;

double Pow(double b, double e);
double Power(double b, double e) throw(Error);

class Error {
  double b;    // Base
  double e;    // Exponent
public:
  Error()
    { cout &lt;&lt; &quot;Implementation error!&quot; &lt;&lt; endl; }
  Error(double bb, double ee)
    : b(bb), e(ee) { }
  void Report();
};

int main()
{
  cout &lt;&lt; &quot;Power Demonstration\n\n&quot;;
  cout &lt;&lt; &quot;This program displays the result of raising\n&quot;;
  cout &lt;&lt; &quot;a value (base) to a power (exponent). To\n&quot;;
  cout &lt;&lt; &quot;force an exception, enter a negative base\n&quot;;
  cout &lt;&lt; &quot;and a fractional exponent (e.g. -4 and 1.5)\n&quot;;
  cout &lt;&lt; &quot;Or, enter a zero base and an exponent less than\n&quot;;
  cout &lt;&lt; &quot;zero.\n\n&quot;;
  try {
    double base, exponent, result;
    cout &lt;&lt; &quot;base? &quot;;
    cin &gt;&gt; base;
    cout &lt;&lt; &quot;exponent? &quot;;
    cin &gt;&gt; exponent;
    result = Power(base, exponent);
    cout &lt;&lt; &quot;result == &quot; &lt;&lt; result &lt;&lt; endl;
  }
  catch (Error&amp; e) {
    e.Report();
    return -1;
  }
  return 0;
}

// Subfunction to Power
double Pow(double b, double e)
{
  return exp(e * log(b));
}

// Return b raised to the e power
double Power(double b, double e) throw(Error)
{
  if (b &gt; 0.0) return Pow(b, e);
  if (b &lt; 0.0) {
    double ipart;
    double fpart = modf(e, &amp;ipart);
    if (fpart == 0) {
      if (fmod(ipart, 2) != 0)  // i.e. ipart is odd
        return -Pow(-b, e);
      else
        return Pow(-b, e);
    } else
      throw Error(b, e);
  } else {
    if (e == 0.0) return 1.0;
    if (e &lt; 1.0) throw Error(b, e);
    return 0.0;
  }
//  throw Error();  // Unreachable code warning expected
}

// Display values that caused an exception
void
Error::Report()
{
  cout &lt;&lt; &quot;Domain error:&quot;
    &lt;&lt; &quot; base:&quot; &lt;&lt; b
    &lt;&lt; &quot; exponent:&quot; &lt;&lt; e
    &lt;&lt; endl
    &lt;&lt; &quot;Press Enter to continue...&quot;;
  char c;
  char buffer[80];
  if (cin.peek() == '\n') cin.get(c);
  cin.getline(buffer, sizeof(buffer) - 1);
}

</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
