<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAR94: Emulating Non-DOS Systems Under MS-DOS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Emulating Non-DOS Systems Under MS-DOS<a name="00d6_0003"></h1><P>
<h2><a name="00d6_0001"><a name="00d6_0000">Creating a development environment for working within the familiar confines of DOS</h2><P>
<h3>Dan Troy</h3><P>
<p><i><a name="00d6_0002"><a name="00d6_0000">Dan is a software engineer at Granite Communications Inc., 9 Townsend West, Nashua, NH 03063. He can be reached at 603-881-8666, or by fax at 603-881-4042.</i></p><hr><P>
One of the challenges embedded-systems designers have grappled with for years is developing for operating systems that require unfamiliar, nonstandard development tools. Coincidentally, this is the problem that is now confronting many programmers writing software for the emerging class of hand-held, wireless, personal-data communications devices such as the Newton MessagePad from Apple, Zoomer from Casio, and, in this case, my company's VP5 personal digital-communication device. Still, history has taught us that:<P>
<UL>
<li>No matter how slick it is, a hardware device won't be accepted by users if there's no software for it.</li>
<li>Programmers won't write software for a hardware device unless the development environment is at least approachable.</li>
</UL>
Realizing this, we wanted to create a development environment for the VP5 that would allow programmers to work within the familiar confines of MS-DOS using DOS-based tools. Furthermore, we wanted programmers to test applications under MS-DOS before loading the cross-compiled program into the VP5. Just to complicate matters, we also needed to develop a simple mechanism for adding new operating-system function-emulation capability as existing products are enhanced, or as new products are developed. This article presents the solution we devised for the VP5 development environment.<P>
Our approach to remotely executing an application isn't specific to the VP5, however. You should be able to apply it to any similar situation where noncompatible operating systems exist. Also, since the emulation code is written in ANSI C, it is portable to any other microprocessor/operating-system environment, as long as the necessary hooks exist between the development platform and the remote communication device. In addition to this, contained in the emulation code is the simple, table-driven function-execution mechanism, which is applicable to any other remote-execution environment written in C.<P>
<h3><a name="00d6_0004">Our Solution<a name="00d6_0004"></h3><P>
The VP5 is a wireless, hand-held, touchscreen personal data communicator (see <a href="199400d8.htm">Figure 1</A>) designed to allow VARs and programmers to develop custom touchscreen applications written in C. To emulate as many videopad functions as possible--including the touchscreen and display--we decided to remotely execute the proprietary videopad operating-system functions from MS-DOS on the PC. The developer could then see the VP5 screen exactly as it appears when the application is cross-compiled, linked, loaded, and executed in the VP5 itself. Also, the developer could actuate developer-defined, touchscreen-sensitive keys to make sure the application did what it was expected to do. This gives WYSIWYG feedback in the development process. To accomplish this goal, we remotely commanded the VP5 via the serial ports on the PC and VP5. In order to allow easy emulation expandability for future enhancements and portability to new products, we developed a table-mapping mechanism that would handle C operating-system functions and their associated parameters.<P>
The overall emulation logic is summed up in <a href="199400db.htm">Figure 2</A>. To implement all 89 videopad operating-system calls, we implemented a table-driven mechanism. The table is defined as an array of structures of type shown in <a href="#00d6_0007">Listing One</A> (page 58). <a href="#00d6_0009">Listing Two</A> (page 58) shows a portion of the table. According to the table, the inputs to the <I>define_key()</I> function are character, integer, character, character, character, character, character, string. There are no outputs (NULL string). This corresponds to the function prototype in <a href="#00d6_000b">Listing Three</A> (page 58). The execution sequence to remotely define a key on the VP5 keyboard would be like that in <a href="#00d6_000d">Listing Four</A> (page 58).<P>
On the PC side, the VP5 operating-system library function looks like <a href="#00d6_000f">Listing Five</A> (page 58) which calls <I>process_cmd()</I>; see <a href="#00d6_0011">Listing Six</A> (page 58). This, in turn, sets up and sends a message to the special VP5 emulation application and receives the response from the VP5.<P>
The counterpart of the <I>define_key()</I> function resides on the VP5. It uses the <I>arg_table[]</I> identical to that on the PC-emulation software. <a href="#00d6_0013">Listing Seven</A> (page 60) is the VP5 emulation-command processor.<P>
The <I>spawn_define_key() </I>function is a spawned function located in the <I>arg_table[]</I>; see <a href="#00d6_0015">Listing Eight</A> (page 62). No return values must be passed to the <I>define_key()</I> function in the customer application. However, in <I>get_key()</I>, the videopad must return the key value pressed on the videopad. In this case, the VP5 operating-system library function looks like <a href="#00d6_0017">Listing Nine</A> (page 62).<P>
Since the <I>get_key()</I> function has no inputs, none are required to set up the call to <I>process_cmd()</I>. The actual key pressed on the videopad is in <I>c[1]</I>. But why are there two outputs--<I>c[0]</I> and <I>c[1]</I>--in the <I>get_key()</I> table entry, when there's only one output from <I>get_key()</I>? Because in this case, <I>get_key()</I> on the videopad will wait forever for a key to be pressed under normal operation. If the application-program developer decides to take his or her time pressing a key after <I>get_key()</I> has been called, then the emulation software on the PC will eventually time out. To avoid this and allow the developer to spend as much time as he or she desires before pressing a key on the videopad, we implemented the algorithm in <a href="#00d6_0019">Listing Ten</A> (page 62) on the VP5. Here, the spawned function <I>spawn_get_key()</I> is found in the <I>arg_table[]</I>. If no key has been pressed, the function immediately returns a False condition for <I>c[0]</I>. The emulated <I>get_key()</I> function on the PC loops until a key is pressed, thus maintaining constant communication between the PC and the VP5.<P>
One drawback of executing the application remotely is that the VP5 RS-232 port is not available for the application since it's being used by the emulator. In order to emulate the VP5 RS-232 COMserial-port communications within the emulated application, the other RS-232 port on the PC, COM2, is used. In other words, data that would normally be transferred on the VP5 COMport is instead transferred via COM2 on the PC, since the VP5 COM port is being used for application emulation. We created a special cable so that the VP5 COM port is now represented by p4 (see <a href="19940254.htm">Figure 3</A>). The p4 connector is the same as the COMport on the V5.<P>
<h3><a name="00d6_0005">A Sample Program<a name="00d6_0005"></h3><P>
<a href="#00d6_001b">Listing Eleven</A> (page 62) is a typical VP5 program in which the touch-sensitive, boxed key appears on the VP5 and the VP5 waits until the defined key is pressed. When the defined key is activated by the user touchscreen, the screen clears, and the message displayed in the WELCOME_KEY is replaced with the &quot;Requesting Info&quot; message. The VP5 then logs on to the base station, sends a message to the host, and waits until a message is received back from the host. Then the received message is displayed in the defined text window on the VP5 screen for ten seconds. This sample program can be tested under CodeView, utilizing its full functionality and incorporating DOS calls such as <I>printf()</I> while debugging.<P>
<h4><B><a href="199400da.htm">Figure 1</A>:</B> Non-DOS VP5 handheld device.</h4><P>
<h4><B><a href="199400db.htm">Figure 2</A>:</B> Flow of control in VP5 emulation environment.<a name="00d6_0006"></h4><P>
<h4><B><a href="19940254.htm">Figure 3</A>:</B> VP5 RS-232 COM serial-port configuration.</h4><P>

<h4><a name="00d6_0007"><a name="00d6_0008"><B>[LISTING ONE]</B></H4>

<PRE>

typedef struct args
{
  unsigned char *input;     /* string of inputs to function */

  unsigned char *output;    /* string of outputs from function */
  void (*spawn_function)(); /* emulated VP5 OS function */
};


</PRE>

<h4><a name="00d6_0009"><a name="00d6_000a"><B>[LISTING TWO]</B></H4>

<PRE>


const struct args arg_table[] =
{

/* COMMAND   RESPONSE      SPAWN           COMMAND */
/*   ARGS      ARGS       FUNCTION          OFFSET */

  &quot;cicccccs&quot;, &quot;&quot;,     spawn_define_key,        /* 0 */
  &quot;cs&quot;,       &quot;&quot;,     spawn_display_key_label, /* 1 */
  &quot;ccc&quot;,      &quot;&quot;,     spawn_display_window,    /* 2 */
  &quot;&quot;,         &quot;cc&quot;,   spawn_get_key,           /* 3 */
  &quot;c&quot;,        &quot;c&quot;,    spawn_rf_close,          /* 4 */
  &quot;cic&quot;,      &quot;cc&quot;,   spawn_rf_open,           /* 5 */
  &quot;i&quot;,        &quot;cis&quot;,  spawn_rf_read,           /* 6 */
  &quot;is&quot;,       &quot;c&quot;,    spawn_rf_write,          /* 7 */
  &quot;&quot;,         &quot;&quot;,     spawn_turn_off,          /* 8 */
  &quot;&quot;,         &quot;&quot;,     spawn_wait_1_sec,        /* 9 */
};


</PRE>

<h4><a name="00d6_000b"><a name="00d6_000c"><B>[LISTING THREE]</B></H4>

<PRE>


  void define_key(char key_name, int key_attributes, char
    start_row, char start_col, char end_row, char end_col,
    char font_table, char *key_label).


</PRE>

<h4><a name="00d6_000d"><a name="00d6_000e"><B>[LISTING FOUR]</B></H4>

<PRE>


#define WELCOME_KEY 'W'
 .
 .
 .
define_key(WELCOME_KEY, BOX|SENSITIVE, 'A', '1', 'B', '8',
            STANDARD_FONT,
           &quot;WELCOME to GRANITE'S VP5\nPRESS HERE to BEGIN&quot;);
 .
 .
 .

</PRE>

<h4><a name="00d6_000f"><a name="00d6_0010"><B>[LISTING FIVE]</B></H4>

<PRE>


void define_key(char key_name, int key_attributes, char
    start_row, char start_col, char end_row, char end_col,
    char font_table, char *key_label)
{
     c[0] = key_name;
     i[0] = key_attributes;
     c[1] = start_row;
     c[2] = start_col;
     c[3] = end_row;
     c[4] = end_col;
     c[5] = font_table;
     strcpy(s[0], key_label);
     cmd = DEFINE_KEY;
     process_cmd();
}


</PRE>

<h4><a name="00d6_0011"><a name="00d6_0012"><B>[LISTING SIX]</B></H4>

<PRE>


void process_cmd(void)
{
   .
   .
   .
   /* frame up command to send to videopad */
   while(element_type = arg_table[cmd].input[element++])
   {
      switch(element_type)
      {
         /* argument type of character */
         /* pack it into global cmd_buff via pack_char() */
         case 'c': pack_char(c[c_cnt++]);
                   cmd_buff_length++;
                   break;
         /* argument type of string */
         /* pack it into global cmd_buff via pack_char() */
         case 's': str_length = 0;
                   do
                   {
                      temp_char = s[s_cnt][str_length++];
                      pack_char(temp_char);
                   }
                   while(temp_char);
                   s_cnt++;
                   cmd_buff_length += str_length;
                   break;

         /* argument type of integer */
         /* pack it into global cmd_buff via pack_char() */
         case 'i': pack_char((char)(i[i_cnt] &gt;&gt; 8));
                   pack_char((char)(i[i_cnt++] &amp; 0xff));
                   cmd_buff_length += 2;
                   break;
      }
   }
   /* send framed up function command to videopad */
   if(link_layer_send(cmd_buff, cmd_buff_length) !=
            TX_OK) process_fatal_error(NO_LINK_RESPONSE);
   /* look for link layer response from videopad - time out
         if none is found within expected time */
   while((rx_status = link_layer_received()) != READY ||
              rx_status != TIMED_OUT);
   if(rx_status == TIMED_OUT) process_fatal_error(TIMED_OUT);
   /* process response from videopad */
   .
   .

   .
   /* if first byte of response buffer (status) is
        not a status command character, then process error */
   if(response_buff[0] != RESPONSE_STATUS_COMMAND)
        process_fatal_error(NON_STATUS_RETURNED);
   while(element_type = (arg_table[cmd].output[element++]))
   {
      switch(element_type)
      {
         /* argument of type character */
         /* unpack it and put into global c[] array */
         case 'c': c[c_cnt++] = unpack_char();
                   break;
         /* argument of type string */
         /* unpack it and put into global s[][] array */
         case 's': str_length = 0;
                   while(((s[s_cnt][str_length++] =
                     unpack_char()) != 0) &amp;&amp; (str_length &lt;=
                        MAX_STRING_SIZE));
                   break;
         /* argument of type integer */
         /* unpack it and put into global i[] array */
         case 'i': i[i_cnt] = (int)(unpack_char() &lt;&lt; 8);
                   i[i_cnt] |= (int)unpack_char();
                   break;
      }
   }
   .
   .
   .
}

</PRE>

<h4><a name="00d6_0013"><a name="00d6_0014"><B>[LISTING SEVEN]</B></H4>

<PRE>


void main(void)
{
   int status;
   init_link_layer();
   for(;;)
   {
      /* look for link layer command from PC - time out if
         none is found within expected time */
      while((rx_status = link_layer_received()) != READY ||
              rx_status != TIMED_OUT);
      if(rx_status == TIMED_OUT)
              process_fatal_error(TIMED_OUT);
      /* process command from PC */
      /* first byte of command message is command */
      cmd = cmd_buff[0];
      while(element_type = (arg_table[cmd].input[element++]))
      {
         switch(element_type)
         {
            /* argument type character */
            /* unpack it and put into global c[] array */
            case 'c': c[c_cnt++] = unpack_char();
                      break;
            /* argument type string */
            /* unpack it and put into global s[][] array */
            case 's': str_length = 0;
                      while(((s[s_cnt][str_length++] =
                        unpack_char()) != 0) &amp;&amp; (str_length
                          &lt;= MAX_STRING_SIZE));
                       break;
            /* argument type integer */
            /* unpack it and put into global i[] array */
            case 'i': i[i_cnt] = (int)(unpack_char() &lt;&lt; 8);
                      i[i_cnt] |= (int)unpack_char();
                      break;
         }
      }
      /* look up spawning function corresponding to cmd */
      function_address = arg_table[cmd].spawn_function;
      /* execute spawning function */
      (*function_address)();
      /* prepare response message to last received cmd */
      response_buff[0] = STATUS_OK;

      /* frame up command to send to videopad */
      while(element_type = arg_table[cmd].input[element++])
      {
         switch(element_type)
         {
            /* argument type of character */
            /* pack it into global response_buff via
                  pack_char() */
            case 'c': pack_char(c[c_cnt++]);
                      response_buff_length++;
                      break;
            /* argument type of string */
            /* pack it into global response_buff via
                  pack_char() */
            case 's': str_length = 0;
                      do
                      {
                         temp_char = s[s_cnt][str_length++];
                         pack_char(temp_char);
                      }
                      while(temp_char);
                      s_cnt++;
                      response_buff_length += str_length;
                      break;
            /* argument type of integer */
            /* pack it into global response_buff via
                  pack_char() */
            case 'i': pack_char((char)(i[i_cnt] &gt;&gt; 8));
                      pack_char((char)(i[i_cnt++] &amp; 0xff));
                      response_buff_length += 2;
                      break;
         }
      }
      /* send framed up function command to videopad */
      if(link_layer_send(response_buff,
           response_buff_length) !=
               TX_OK) process_fatal_error(LINK_ERROR);
   }
}



</PRE>

<h4><a name="00d6_0015"><a name="00d6_0016"><B>[LISTING EIGHT]</B></H4>

<PRE>


void spawn_define_key(void)
{
  define_key(c[0], i[0], c[1], c[2], c[3], c[4], c[5], s[0]);
}









</PRE>

<h4><a name="00d6_0017"><a name="00d6_0018"><B>[LISTING NINE]</B></H4>

<PRE>


char get_key(void)
{
   do
   {
      cmd = GET_KEY;
      process_cmd();
   }while(!c[0]);

   /* return actual key pressed on videopad here */
   return(c[1]);
}



</PRE>

<h4><a name="00d6_0019"><a name="00d6_001a"><B>[LISTING TEN]</B></H4>

<PRE>


void spawn_get_key(void)
{
     if(key_pressed())
     {
        c[0] = TRUE;
        c[1] = get_key();
     }
     else c[0] = c[1] = FALSE;
}



</PRE>

<h4><a name="00d6_001b"><a name="00d6_001c"><B>[LISTING ELEVEN]</B></H4>

<PRE>


/* special vp5 library header files */
#include &lt;key.h&gt;
#include &lt;times.h&gt;
#include &lt;control.h&gt;
#include &lt;rf.h&gt;
#include &lt;display.h&gt;

#define WELCOME_KEY          'W'
#define BASE_STATION_NUMBER  7
#define PERIOD               30

char *msg_to_send = &quot;Please send me the info&quot;;
unsigned int unsol_size;

unsigned char unsol_msg[2048];

void main(void)
{
   unsigned char key;
   int i;
   unsigned char remote_number;
   unsigned int msg_length;
  /* define a boxed, touch sensitive key on rows A and B of
        the VP5 screen */
   define_key(WELCOME_KEY, BOX|SENSITIVE, 'A', '1', 'B', '8',
      STANDARD_FONT, &quot;WELCOME to GRANITE'S VP5\n&quot;
                     &quot;PRESS HERE to BEGIN&quot;);
   /* wait until a sensitive VP5 key is touched */
   key = get_key();
   /* replace message in WELCOME_KEY with a new message */
   display_key_label(WELCOME_KEY, &quot;Requesting Info\n&quot;
                      &quot;Waiting for response&quot;);
   /* log on to base station via RF */
   rf_open(BASE_STATION_NUMBER, PERIOD, unsol_msg,
            &amp;unsol_size, unsol_handler, &amp;remote_number);
   /* send the message via RF to the host */
   rf_write(strlen(msg_to_send), msg_to_send);
   /* wait for the response from the host */
   rf_read(&amp;msg_length, msg_rcvd);
   /* display response from host on VP5 screen from line 3
           through line 12 */
   display_window(TEXT_WINDOW, 3, 12);
   for(i = 0; i &lt; msg_length; i++) display_char(msg_rcvd[i]);
   /* log off the base station via RF */
   rf_close(BASE_STATION_NUMBER);
   wait_1_sec(10);     /* display rcvd msg for 10 seconds */
   turn_off();        /* shut off VP5 */
}

</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
