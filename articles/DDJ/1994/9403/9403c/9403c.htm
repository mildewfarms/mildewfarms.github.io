<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAR94: Multiplatform .INI Files</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Multiplatform .INI Files<a name="00c8_0003"></h1><P>
<h2><a name="00c8_0001"><a name="00c8_0000">Portable profile functions</h2><P>
<h3>Joseph J. Graf</h3><P>
<p><i><a name="00c8_0002"><a name="00c8_0000">Joe has been programming for eleven years. He is currently working on an embedded system, writing PC and Windows-based development tools for the embedded OS. He can be reached at jg@usorder.com.</i></p><hr><P>
Portable-interface toolkits allow you to write code once and recompile with the appropriate libraries for other target platforms. Most of these interface libraries are implemented with a lowest-common-denominator feature subset. This means that if you depend heavily on a specific operating-system feature, the only option available is to develop your own portable version of the routines.<P>
One of the features in the Windows API that I continually rely on is its profile functions, which encapsulate the reading and writing of information to .INI files. For example, I often use .INI files to maintain a list of last-used settings for &quot;smart&quot; dialog boxes. This feature has been so popular in the Windows version of my applications that I implemented the same for my DOS and UNIX programs. The routines presented in this article are portable versions of the Windows functions <I>GetPrivateProfileString()</I>, <I>GetPrivateProfileInt()</I>, and <I>WritePrivateProfileString()</I>. My functions only work with private profile strings for the obvious reason that other operating environments do not have a WIN.INI file.<P>
<h3><a name="00c8_0004">Reading from the .INI File<a name="00c8_0004"></h3><P>
To read an entry's value in a section of an .INI file, you use my functions <I>get_private_profile_int()</I> and <I>get_private_profile_string()</I>. <a href="#00c8_0007">Listing One</A> (page 91) presents the header file which contains the prototypes to these functions. The two functions use the same parameters as the equivalent Windows versions, allowing you to incorporate them easily into your existing code. You can use <I>#ifdef</I>s at the point of call, as in <a href="#00c8_0006">Example 1</A>. Alternately, you can use <I>#define</I>s, for example, to make <I>get_private_profile_string</I> resolve to <I>GetPrivateProfileString</I> when compiling for Windows and to remain unchanged when compiling for DOS and UNIX. Thus, you can maintain a single source module for multiple platforms--at least in the case of profile-string manipulations.<P>
Windows .INI files are divided into <I>sections</I> and <I>entries</I>. A section appears within the file as <I>[section_name]</I>, followed by any number of entries using the format <I>entry_name=entry_value</I>. For example, the <I>[ports]</I> section of your WIN.INI file contains entries such as <I>COM1:=9600,n,8,1,x</I>.<P>
So the first task in obtaining an entry's value is to find the appropriate section within the file. Your code passes the section name to either of the <I>GetPrivateProfileInt</I> or <I>_String</I> functions as a regular string, for example, <I>&quot;section_name&quot;</I>. The Windows function then turns this parameter into <I>&quot;[section_name]&quot;.</I> Likewise, <I>get_private_profile_int()</I> and <I>get_private_profile_string()</I> also enclose the section-name parameter within square brackets. Once the section-name string is in the correct format, the routines search the .INI file line by line until a matching section name is found. If one is not found, the value specified in the default parameter will be returned for the integer function; the string function copies the default string into the buffer and returns the default-string length.<P>
If the correct section was found in the .INI file, the profile routines search for a matching entry. The entry name is compared up to the equal sign using the length of the entry parameter. If the search traverses the section without finding the specified entry, the default value or string is returned. If an entry is found, a pointer is set to point to the value portion of the string. The <I>get_private_profile_int()</I> function copies the entry's value string into a temporary string buffer as long as the entry contains numbers, then returns the numeric value of the string using the standard library function <I>atoi()</I>. The <I>get_private_profile_string()</I> function copies the value portion of the entry to the buffer up to a maximum of <I>buffer_len</I> characters. If the entry contains more characters than the buffer can hold, it is truncated to prevent memory overruns. This function returns the number of characters copied into the buffer.<P>
<h3><a name="00c8_0005">Writing to .INI Files<a name="00c8_0005"></h3><P>
The Windows profile routines only support the writing of strings to .INI files. To maintain compatibility with the Windows routines, my code has the equivalent limitation. In the effort to keep the code straightforward, my <I>write</I> function creates a temporary file and copies the .INI file to it, as the .INI file is read and searched. At the end, when the file has been completely written, the old .INI file is unlinked and the temporary filename is changed to the supplied filename. This may not be the most efficient method, but it was easy to implement and will be easy to maintain.<P>
The <I>write</I> function tries to open the file for reading first. If it can't do so, the file must not exist, so <I>write </I>creates one and then writes the section information, followed by the entry and its associated string.<P>
The <I>write_private_profile_string()</I> function searches the .INI file for the correct section as with the <I>get </I>functions, but this function copies its input to the temporary file as it goes. If it never finds the section asked for, the function appends the section and entry to the end of the file. If the function finds the correct section, it then searches for the correct entry, copying the file in the process. If the end of the section comes without finding the entry, my routine adds the entry at the end of the section, and the remainder of the file is then copied. In the case where the entry was found, its old value is discarded, replaced by the value passed into the function.<P>
<a href="#00c8_0007">Listing One</A> contains the prototypes for the functions plus the <I>#define MAX_LINE_LENGTH</I>, which is currently set at 80. <a href="#00c8_0009">Listing Two</A> (page 91) implements the functions <I>read_line()</I>, <I>get_private_profile_int()</I>, and <I>get_private_profile_string()</I>. <a href="#00c8_000b">Listing Three</A> (page 91) contains the <I>write_private_profile_string()</I> function.<P>
These functions were designed for ease of reading. There are places where the code could be made smaller by creating subroutines from redundant code, although the savings would be nominal at best. Also, you could write additional functions to handle reading/writing longs, floats, and so on. I didn't implement these additional functions because Windows itself does not support them, and compatibility was of utmost importance. The goal of write-once-port-many is often elusive, but achieving it in this particular case is not too difficult.<P>
<pre></pre><P>
<h4><a name="00c8_0006"><B>Example 1:</B> Calling a routine to read a profile string, using a compile-time conditional to invoke either a Windows version or a portable version.<a name="00c8_0006"></h4><P>
<pre>#ifdef WINDOWS
GetPrivateProfileString(ini_section,ini_entry,default_str,buffer, buffer_len,ini_file);
#else
get_private_profile_string(ini_section,ini_entry,default_str,buffer, buffer_len,ini_file);
#endif
</pre><P>

<h4><a name="00c8_0007"><a name="00c8_0008"><B>[LISTING ONE]</B></H4>

<PRE>

/***************************************************************************
 PORTABLE ROUTINES FOR WRITING PRIVATE PROFILE STRINGS --  by Joseph J. Graf
 Header file containing prototypes and compile-time configuration.
***************************************************************************/

#define MAX_LINE_LENGTH    80

int get_private_profile_int(char *, char *, int,    char *);
int get_private_profile_string(char *, char *, char *, char *, int, char *);
int write_private_profile_string(char *, char *, char *, char *);


</PRE>

<h4><a name="00c8_0009"><a name="00c8_000a"><B>[LISTING TWO]</B></H4>

<PRE>


/***** Routines to read profile strings --  by Joseph J. Graf ******/
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &quot;profport.h&quot;   /* function prototypes in here */

/*****************************************************************
* Function:     read_line()
* Arguments:    &lt;FILE *&gt; fp - a pointer to the file to be read from
*               &lt;char *&gt; bp - a pointer to the copy buffer
* Returns:      TRUE if successful FALSE otherwise
******************************************************************/
int read_line(FILE *fp, char *bp)
{   char c = '\0';
    int i = 0;
    /* Read one line from the source file */
    while( (c = getc(fp)) != '\n' )
    {   if( c == EOF )         /* return FALSE on unexpected EOF */
            return(0);
        bp[i++] = c;
    }
    bp[i] = '\0';
    return(1);
}
/************************************************************************
* Function:     get_private_profile_int()
* Arguments:    &lt;char *&gt; section - the name of the section to search for
*               &lt;char *&gt; entry - the name of the entry to find the value of
*               &lt;int&gt; def - the default value in the event of a failed read
*               &lt;char *&gt; file_name - the name of the .ini file to read from
* Returns:      the value located at entry
*************************************************************************/
int get_private_profile_int(char *section,
    char *entry, int def, char *file_name)
{   FILE *fp = fopen(file_name,&quot;r&quot;);
    char buff[MAX_LINE_LENGTH];
    char *ep;
    char t_section[MAX_LINE_LENGTH];
    char value[6];
    int len = strlen(entry);
    int i;
    if( !fp ) return(0);
    sprintf(t_section,&quot;[%s]&quot;,section); /* Format the section name */
    /*  Move through file 1 line at a time until a section is matched or EOF */
    do
    {   if( !read_line(fp,buff) )
        {   fclose(fp);
            return(def);
        }
    } while( strcmp(buff,t_section) );
    /* Now that the section has been found, find the entry.
     * Stop searching upon leaving the section's area. */
    do
    {   if( !read_line(fp,buff) || buff[0] == '\0' )
        {   fclose(fp);
            return(def);
        }
    }  while( strncmp(buff,entry,len) );
    ep = strrchr(buff,'=');    /* Parse out the equal sign */
    ep++;
    if( !strlen(ep) )          /* No setting? */
        return(def);
    /* Copy only numbers fail on characters */

    for(i = 0; isdigit(ep[i]); i++ )
        value[i] = ep[i];
    value[i] = '\0';
    fclose(fp);                /* Clean up and return the value */
    return(atoi(value));
}
/**************************************************************************
* Function:     get_private_profile_string()
* Arguments:    &lt;char *&gt; section - the name of the section to search for
*               &lt;char *&gt; entry - the name of the entry to find the value of
*               &lt;char *&gt; def - default string in the event of a failed read
*               &lt;char *&gt; buffer - a pointer to the buffer to copy into
*               &lt;int&gt; buffer_len - the max number of characters to copy
*               &lt;char *&gt; file_name - the name of the .ini file to read from
* Returns:      the number of characters copied into the supplied buffer
***************************************************************************/
int get_private_profile_string(char *section, char *entry, char *def,
    char *buffer, int buffer_len, char *file_name)
{   FILE *fp = fopen(file_name,&quot;r&quot;);
    char buff[MAX_LINE_LENGTH];
    char *ep;
    char t_section[MAX_LINE_LENGTH];
    int len = strlen(entry);
    if( !fp ) return(0);
    sprintf(t_section,&quot;[%s]&quot;,section);    /* Format the section name */
    /*  Move through file 1 line at a time until a section is matched or EOF */
    do
    {   if( !read_line(fp,buff) )
        {   fclose(fp);
            strncpy(buffer,def,buffer_len);
            return(strlen(buffer));
        }
    }
    while( strcmp(buff,t_section) );
    /* Now that the section has been found, find the entry.
     * Stop searching upon leaving the section's area. */
    do
    {   if( !read_line(fp,buff) || buff[0] == '\0' )
        {   fclose(fp);
            strncpy(buffer,def,buffer_len);
            return(strlen(buffer));
        }
    }  while( strncmp(buff,entry,len) );
    ep = strrchr(buff,'=');    /* Parse out the equal sign */
    ep++;
    /* Copy up to buffer_len chars to buffer */
    strncpy(buffer,ep,buffer_len - 1);

    buffer[buffer_len] = '\0';
    fclose(fp);               /* Clean up and return the amount copied */
    return(strlen(buffer));
}


</PRE>

<h4><a name="00c8_000b"><a name="00c8_000c"><B>[LISTING THREE]</B></H4>

<PRE>


/***** Routine for writing private profile strings --- by Joseph J. Graf *****/
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &quot;profport.h&quot;

/*************************************************************************
 * Function:    write_private_profile_string()
 * Arguments:   &lt;char *&gt; section - the name of the section to search for
 *              &lt;char *&gt; entry - the name of the entry to find the value of
 *              &lt;char *&gt; buffer - pointer to the buffer that holds the string
 *              &lt;char *&gt; file_name - the name of the .ini file to read from
 * Returns:     TRUE if successful, otherwise FALSE
 *************************************************************************/
int write_private_profile_string(char *section,
    char *entry, char *buffer, char *file_name)

{   FILE *rfp, *wfp;
    char tmp_name[15];
    char buff[MAX_LINE_LENGTH];
    char t_section[MAX_LINE_LENGTH];
    int len = strlen(entry);
    tmpnam(tmp_name); /* Get a temporary file name to copy to */
    sprintf(t_section,&quot;[%s]&quot;,section);/* Format the section name */
    if( !(rfp = fopen(file_name,&quot;r&quot;)) )  /* If the .ini file doesn't exist */
    {   if( !(wfp = fopen(file_name,&quot;w&quot;)) ) /*  then make one */
        {   return(0);   }
        fprintf(wfp,&quot;%s\n&quot;,t_section);
        fprintf(wfp,&quot;%s=%s\n&quot;,entry,buffer);
        fclose(wfp);
        return(1);
    }
    if( !(wfp = fopen(tmp_name,&quot;w&quot;)) )
    {   fclose(rfp);
        return(0);
    }

    /* Move through the file one line at a time until a section is
     * matched or until EOF. Copy to temp file as it is read. */

    do
    {   if( !read_line(rfp,buff) )
        {   /* Failed to find section, so add one to the end */
            fprintf(wfp,&quot;\n%s\n&quot;,t_section);
            fprintf(wfp,&quot;%s=%s\n&quot;,entry,buffer);
            /* Clean up and rename */
            fclose(rfp);
            fclose(wfp);
            unlink(file_name);
            rename(tmp_name,file_name);
            return(1);
        }
        fprintf(wfp,&quot;%s\n&quot;,buff);
    } while( strcmp(buff,t_section) );

    /* Now that the section has been found, find the entry. Stop searching
     * upon leaving the section's area. Copy the file as it is read
     * and create an entry if one is not found.  */
    while( 1 )
    {   if( !read_line(rfp,buff) )
        {   /* EOF without an entry so make one */
            fprintf(wfp,&quot;%s=%s\n&quot;,entry,buffer);
            /* Clean up and rename */
            fclose(rfp);
            fclose(wfp);
            unlink(file_name);
            rename(tmp_name,file_name);
            return(1);

        }

        if( !strncmp(buff,entry,len) || buff[0] == '\0' )
            break;
        fprintf(wfp,&quot;%s\n&quot;,buff);
    }

    if( buff[0] == '\0' )
    {   fprintf(wfp,&quot;%s=%s\n&quot;,entry,buffer);
        do
        {
            fprintf(wfp,&quot;%s\n&quot;,buff);
        } while( read_line(rfp,buff) );
    }
    else
    {   fprintf(wfp,&quot;%s=%s\n&quot;,entry,buffer);
        while( read_line(rfp,buff) )
        {
             fprintf(wfp,&quot;%s\n&quot;,buff);
        }
    }

    /* Clean up and rename */
    fclose(wfp);
    fclose(rfp);
    unlink(file_name);
    rename(tmp_name,file_name);
    return(1);
}
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
