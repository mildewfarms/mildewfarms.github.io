<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>MAR94: Binary-Data Portability</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Binary-Data Portability<a name="00bc_0003"></h1><P>
<h2><a name="00bc_0001"><a name="00bc_0000">The DDR compiler--a tool for binary-file portability</h2><P>
<h3>Jos&eacute; Luu</h3><P>
<p><i><a name="00bc_0002"><a name="00bc_0000">Jos&eacute; is vice president of engineering at Mainsoft Corp. He can be reached via Internet mail at jluu@mainsoft.com.</i></p><hr><P>
Sooner or later, all developers writing cross-platform applications to run on 80x86/Windows and RISC/UNIX platforms have to grapple with binary-file portability. Binary files saved by a PC usually have a data representation natural to the 80x86 architecture. If the application program is ported to the UNIX environment, the data representations in the new system are likely to have a different byte order, alignment, and size. To minimize programming efforts, you want the file read/write routines to work in both 80x86 and RISC environments and produce compatible data files, all without an elaborate rewrite of the source code.<P>
Programmers choose to write binary data because it's easy. Usually, the format of the binary file is the same as the data image stored in memory. The code necessary to write binary data to a file is often as simple as a few instructions. There is no need to convert the data into some complex format. The raw data is just sent to the disk. It is simple, fast, and concise, but it also tends to be nonportable. One of the most popular forms of binary data, for instance, is the binary graphic image (bitmap). The graphic image consists of a header structure indicating how the data is arranged, followed by the data itself.<P>
With MainWin for Workstations, a tool that provides the Windows API on UNIX workstations, one of our goals was to create a truly portable way to handle the differences in binary-data representation in all environments, while retaining a single source-code base and without having to manually add a lot of elaborate data-translation code. We knew programmers cross-developing PC-based Windows applications to run on these workstations would often need to deal with binary-file portability.<P>
Our solution to the binary-data conundrum was to create an underlying technology we call &quot;DDR compiler.&quot; While DDR is short for &quot;DOS data representation,&quot; it could more precisely be referred to as the &quot;Intel 16-bit data representation.&quot;<P>
Our scheme works best when programmers simply write the contents of a structure to disk; see <a href="#00bc_0007">Example 1</A>. Using DDR-based tools, you can automatically generate file read/write macros that handle the differences in binary-data formats between the 80x86 and a number of RISC workstation platforms (IBM RS/6000, HP700, Sun, SGI, and the like). You can also extend the tool to translate the data representation to or from practically any architecture. This is because the tool is built from a simple script that uses a common UNIX network utility found on most workstations, rpcgen.<P>
The DDR compiler takes for its input the data <I>typedef</I>s and structures from your application's header files. Its output is a new header file and a C source file that implements custom read/write functions. This file can be easily incorporated into the application, making binary data available across all supported platforms. Because the new read/write macros are conditionally defined, they're expanded back into their original forms when compiled on the PC, allowing a single code base to be used for both the PC and RISC platforms.<P>
This article details the basic DDR architecture. The complete source code for the DDR compiler described here is available free of charge at ftp.mainsoft.com. Although Mainsoft retains all rights to the source code, you can download a copy, modify it, use it for your own purposes (commercial or otherwise), and include the object code in your library. We do ask that you don't upload the software to a BBS or pass it along to others.<P>
<h3><a name="00bc_0004">Sharing Binary Data Between Systems is Not New<a name="00bc_0004"></h3><P>
Of course, movement of data between systems with different data representations isn't new. It has been a perennial problem, and there are many schemes for managing such operations. The one we employed is based on that used by the Sun Remote Procedure Call (RPC) protocol.<P>
The idea behind RPC is to allow programs to easily access compute resources across a network. A program running in one machine makes a call to a procedure in another machine. To make this work, a scheme had to be devised to standardize the data representations of the procedures' calling arguments and the results. To execute a procedure in another system, calling parameters are converted to a binary neutral format understood by the other system. The return values from the call are also provided in the binary neutral format. Each system provides the logic to translate data to and from the common binary format. This process, which is illustrated in <a href="199400be.htm">Figure 1</A>, is referred to as &quot;data marshaling.&quot; There are a number of formats of this kind, each corresponding to a given protocol, including Courier data representation of the Xerox Network Protocol, Sun's XDR, and the X409 ISO standard.<P>
To accomplish data translation to and from the standard neutral format, you have to write the necessary translation routines. Inventors of these protocols were quick to realize that this was a mechanical task that could easily be automated. That's how they came up with structure compilers that would write the translation procedures for them. The most widely available compiler is the rpcgen tool, so we chose it to develop the DDR compiler. Rpcgen is the structure compiler used for developing RPC procedures compliant to the Sun RPC protocol, so it is potentially available on many platforms.<P>
Rpcgen's basic functionality is exactly what's needed to translate the 80x86's common data format into a form usable on RISC workstations. Rpcgen generates the high-level translation routines for the complex structures. However, nothing within rpcgen's domain allows for direct translation between particular data representations. For that, we developed our own low-level DOS/UNIX translation library routines. <a href="199400bf.htm">Figure 2</A> illustrates how we use rpcgen for DDR functionality.<P>
<h3><a name="00bc_0005">How DDR Works<a name="00bc_0005"></h3><P>
The DDR tool consists of the ddrgen program and associated library and header files. Ddrgen is simply a script that wraps around a call to rpcgen and subsequently modifies the files generated by rpcgen so that calls are made to the ddr library instead of the xdr library.<P>
Ddrgen takes as input the structure definition of the binary data, defined with approximately the same syntax as a C header file. I say &quot;approximately&quot; because the ddrgen syntaxer (the rpcgen syntaxer) does not allow complex structure declarations.<P>
You might need to simplify some of the data-structure definitions. For instance, the rpcgen front end does not support the declaration of nested structures. In such situations, the nested structure can be declared at the top level and its name used inside other structures in order to achieve the same results.<P>
The structure definitions drive ddrgen. As a result, ddrgen outputs three files that can be incorporated into your application source code:<P>
<UL>
<li>filename_ddr.c, a C source file containing the read and write translation routines constructed from the input-file data definitions.</li>
<li>filename_ddr.h, a header file for filename_ddr.c.</li>
<li>filename_rw.h, a header file that must be inserted into all application source modules that read or write binary data using the DDR scheme.</li>
</UL>
The C source file which acts as a data translator is made up of a series of simple function calls, one for each data element in the structure definition that drove the process. For instance, your input structure might look like <a href="#00bc_0008">Example 2(a)</A>, where <I>struct1</I> is a <I>typedef</I> that has been defined before.<P>
The DDR compiler outputs a C file with the <I>ddr_MYSTRUCTURE</I> function call, which contains a series of function calls that encode or decode each data element. Since the input structure contains three data elements, the resulting function has three translation calls, arranged in the same order as the structure definition. Thus, the output file would look like <a href="#00bc_0008">Example 2(b)</A>.<P>
Ddrgen creates the translation calls by constructing the function-call names from the data types called out in the input structure definition. The low-level functions for integers, shorts, and the like are provided in the translation library. To call the ddrgen-generated functions, you replace your binary file <I>fread</I> and <I>fwrite</I> function calls with new DDR calls that know about the translation code. (This assumes that the program is written in the way I described earlier, simply reading and writing data structures directly to a file. If the program does otherwise, some code would have to be rewritten to employ this scheme.)<P>
Four new macros replace the standard functions.<P>
<UL>
<li><I>ddr_write</I> replaces <I>write.</I></li>
<li><I>ddr_fwrite</I> replaces <I>fwrite.</I></li>
<li><I>ddr_read</I> replaces <I>read.</I></li>
<li><I>ddr_fread</I> replaces <I>fread.</I></li>
</UL>
The process of replacing the read and write routines with their DDR-equivalents is not much more than a simple search-and-replace process with your editor. You also have to tell each DDR routine which data structure to read or write. <a href="#00bc_0009">Example 3</A> shows read and write routines compared to their DDR equivalents. You can see that the functions are similar, but there are two additional parameters to pass, <I>MYSTRUCTURE</I> and <I>nStatus</I>. The DDR system block diagram (<a href="199400c0.htm">Figure 3</A>) shows how the various elements of the application are linked to form an executable.<P>
To see how all the elements of the DDR system work together, I'll examine how a single data translation takes place, starting at a <I>ddr_fread</I> function call and tracing the process all the way through. I'll assume that you ran the DDR compiler and did the edits to your source files.<P>
The ddr.h file, which is included by <I>filename</I>_ddr.c, contains many of the core definitions of the DDR system, including the conditional statements (<I>#ifdef</I>s) that select between the PC-compatible read/write routines and the new translation routines. The code is set up so that if it is compiled in a PC environment, the original <I>fread</I> and <I>fwrite</I> routines are used. If compiled for a supported RISC machine, the DDR routines are used. In this example, assume that I'm cross-developing to a 32-bit RISC machine.<P>
In this case, the <I>ddr_fread</I> macro is expanded, as in <a href="#00bc_000a">Example 4(a)</A>. <I>ddr_fread</I> creates a DDR handle (<I>ddrs</I>) using the <I>ddrstdio_create</I> function. <I>ddrstdio_create</I> will initialize the ddr handle for reading from the file stream and set up compatible data-translation function calls in the DDR structure. In addition, it knows this will be a DDR_DECODE operation, and it stores the DDR_DECODE operation code in the DDR handle to use later to select a <I>read</I> routine.<P>
The next line constructs a call to the user's structure-translation function. In the example, the user's structure is called MYSTRUCTURE; this parameter is substituted for <I>##Name</I> to produce <a href="#00bc_000a">Example 4(b)</A>.<P>
Recall that this function was created by <I>ddrgen</I> (in the <I>filename_</I>ddr.c). It sequentially executes a translation of each element in the structure. For this example, focus on just the first element since they all act approximately the same; see <a href="#00bc_000a">Example 4(c)</A>.<P>
The function <I>ddr_int</I> in <a href="#00bc_000a">Example 4(c)</A> is a call to the DDR <I>int</I> translation function. (The function <I>ddr_struc1</I> is a call to a function that has also been constructed by the ddr compiler when it has processed the previously defined <I>struc1</I>. This is how we handle nested data structures.)<P>
The translation functions are constructed using a few primitives keyed to the 80x86 architecture: Read routines read 80x86 data, and write routines write 80x86 data. These primitives include read/write routines for <I>byte</I> (8-bits), <I>short</I> (16-bits), and <I>long</I> (32-bits).<P>
<I>ddr_int</I> uses the DDR_DECODE opcode to select the DDR_GETSHORT macro. <a href="#00bc_000b">Example 5(a)</A> shows the code that does it in ddr.c. <I>ddr_int</I> creates a short storage space (<I>sValue</I>) to receive the <I>int</I> from the selected macro. Notice that if the opcode was DDR_ENCODE, the DDR_PUTSHORT routine would have been selected. DDR_GETSHORT is a macro that expands <a href="#00bc_000b">Example 5(b)</A>. The macro DDR_GETSHORT is expanded to a call to the function stored in the <I>getshort</I> field of the <I>operations_vector</I> of <I>ddrs</I>.<P>
Recall that I chose to use <I>ddr_fread</I> for example, and that the macro expanded to open our DDR handle with the function call <I>ddrstdio_create()</I>. As a part of its process, <I>ddrstdio</I> initialized <I>ddrs-&gt;operations_vector</I> to a whole list of low-level function calls designed specifically for the <I>fread</I> translation. This gives the flexibility to have other <I>getshort</I> operations read data from different sources. For instance, creating the DDR handle with <I>ddrmem_create</I> would allow translating data to or from a memory buffer instead of a file.<P>
You can see in <a href="#00bc_000d">Listing One</A> (page 88) that <I>operations_vector</I> -&gt; <I>getshort</I> is a pointer to a function. It was initialized by the create function to call <I>ddrstdio_getshort</I>. This routine fetches the next <I>int</I> from the input stream and does the conversion, storing the result in the target structure. <a href="#00bc_000c">Example 6(a)</A> shows this step.<P>
The routine first <I>fread</I>s the next <I>short</I> into a little 2-byte buffer, <I>sBuffer</I>. (Notice that this is the <I>fread</I> that you replaced with the <I>ddr_fread</I> macro. The DDR compiler has built all this superstructure above it and a little code below it also.)<P>
Finally, <I>MoveShort</I> is called; see <a href="#00bc_000f">Listing Two</A> (page 88). <I>MoveShort</I> has been selected by <I>#ifdef</I> <I>architecture</I> to be the translation macro for the selected target architecture. For this example, I'm assuming a Sparc or other Big-endian RISC machine. The actual byte-by-byte translation now takes place; see <a href="#00bc_000c">Example 6(b)</A>. (This implementation happens to be a macro, but it could also be implemented as a function.) This little gem takes bytes from <I>pSrc</I> (source) and stores them in <I>pDest</I> (destination), swapping the two bytes, as required by the RISC machine. <I>pDest</I> points to the short <I>sValue</I> allocated in the <I>ddr_int</I> routine. <I>ddr_int</I> will eventually get control back and put the short translated value (<I>sValue</I>) at the location pointed by <I>i</I>p (an integer pointer--4 bytes) in the application data structure. This implements the 2- to 4-byte extension required for integers.<P>
To recapitulate, I substituted <I>ddr_fread</I> for <I>fread</I>. I then went from <I>ddr_fread</I> to <I>ddrstdio_create</I> and <I>ddr_MYSTRUCTURE</I>. I then chose to follow the first ddr translation, an <I>int</I>, which took us to <I>ddr_int</I>, and then to DDR_GETSHORT. DDR_GETSHORT expanded to <I>ddrs-&gt;operations_vector&gt;getshort</I> in the DDR structure, which was initialized earlier (by <I>ddrstdio_create</I>) to <I>ddrstdio_getshort</I>. It read a 2-byte element from the input stream, translated it with a version of <I>MoveShort</I> (selected by an <I>#ifdef architecture</I>), and returned.<P>
<h3><a name="00bc_0006">Conclusion<a name="00bc_0006"></h3><P>
For all its complication internally, the DDR compiler turns out to be simple to use. It is a very useful tool for creating platform-independent read/write routines for binary data. The overall scheme is here. If you want to investigate it further, you can download the complete DDR compiler source code via ftp at ftp.mainsoft.com.<P>
<pre></pre><P>
<h4><a name="00bc_0007"><B>Example 1: </B>Writing contents of a structure to disk.<a name="00bc_0007"></h4><P>
<pre>struct MYSTRUCTURE {
   int mydata1;
   struc1 mydata2;
   long mydata3;
} mydata;

nStatus = fwrite (&amp;mydata, sizeof(MYSTRUCTURE), 1, stream);
</pre><P>
<h4><B> <a href="199400c1.htm">Figure 1</A>:</B> The data-marshaling process.</h4><P>
<h4><B> <a href="199400c2.htm">Figure 2</A>:</B> The use of rpcgen simplifies the translation process.</h4><P>
<pre></pre><P>
<h4><a name="00bc_0008"><B>Example 2: </B>(a) A typical input structure; (b) C code generated by the DDR compiler.<a name="00bc_0008"></h4><P>
<pre>(a)
     struct MYSTRUCTURE {<P>    int mydata1;<P>    struc1 mydata2;<P>    long mydata3;<P>};<P>
(b)
     bool_t ddr_MYSTRUCTURE (ddrs, objp) <P>    DDR *ddrs;<P>    MYSTRUCTURE *objp;<P>{<P>    if (!ddr_int(ddrs,objp-&gt;mydata1))return (FALSE);<P><P>    if (!ddr_struc1(ddrs,objp-&gt;mydata2))return (FALSE);<P>    if (!ddr_long(ddrs,objp-&gt;mydata3))return (FALSE);<P>    return (TRUE);<P>}

</pre><P>
<h4><a name="00bc_0009"><B>Example 3: </B>Standard read and write routines compared to DDR equivalents.<a name="00bc_0009"></h4><P>
<pre>nStatus =      write (fd, &amp;mydata, sizeof(mydata));
ddr_write (fd, mydata, sizeof(mydata), MYSTRUCTURE, &amp;nStatus);
nStatus = fwrite (&amp;mydata, sizeof(mydata), 1, stream);
ddr_fwrite (&amp;mydata, sizeof(mydata), 1, stream, MYSTRUCTURE, &amp;nStatus);
nStatus = read (fd, &amp;mydata, sizeof(mydata));
ddr_read (fd, &amp;mydata, sizeof(mydata), MYSTRUCTURE, &amp;nStatus);
nStatus = fread (&amp;mydata, sizeof(mydata), 1, stream);
ddr_fread (&amp;mydata, sizeof(mydata), 1, stream, MYSTRUCTURE, &amp;nStatus);
</pre><P>
<h4><B> <a href="199400c3.htm">Figure 3</A>:</B> DDR system block diagram.</h4><P>
<pre></pre><P>
<h4><a name="00bc_000a"><B>Example 4: </B>The expanded ddr_fread macro; <P>(b) substituting MYSTRUCTURE for ##Name; (c) the ddr_MYSTRUCTURE routine sequentially translates each structure element.<a name="00bc_000a"></h4><P>
<pre>(a)
     ddr_fread (pData, nSize, nNumber, stream, Name, pnStatus) {<P>    DDR ddrs;<P>    ddrstdio_create (&amp;ddrs, stream, DDR_DECODE);<P>    if (ddr_##Name(&amp;ddrs,(void*)(pData))) <P>       *(pnStatus) = ddrs.nCount;<P>    else *pnStatus = -1;<P>    ddrstdio_destroy (&amp;ddrs); /* kill the handle when done */<P>}<P>
(b)
     if (ddr_MYSTRUCTURE(&amp;ddrs,(void*)(pData))) ...<P>
(c)
     bool_t ddr_MYSTRUCTURE (ddrs, objp) <P>    DDR *ddrs;<P>    MYSTRUCTURE *objp;<P>{<P>    if (!ddr_int(ddrs, objp-&gt;mydata1)) return (FALSE);<P>    if (!ddr_struc1(ddrs, objp-&gt;mydata1)) return (FALSE);<P>    /* etc... */<P>    return (TRUE);<P>}

</pre><P>
<h4><a name="00bc_000b"><B>Example 5: </B>(a) The ddr_int routine uses the DDR_DECODE opcode to select the DDR_GETSHORT macro; (b) the DDR_GETSHORT macro.<a name="00bc_000b"></h4><P>
<pre>
(a)
     bool_t ddr_int(DDR * ddrs, int *ip) {<P>    short sValue;<P>    switch (ddrs-&gt;operation) {<P>    case DDR_ENCODE:<P>        return (DDR_PUTSHORT(ddrs, ((short *) ip)));<P>    case DDR_DECODE:<P>        *ip = 0;      /* clear whole int because the reading will <P>                                   only affect the lower part */<P>        if (!DDR_GETSHORT(ddrs, &amp;sValue)) {<P>        return (FALSE);<P>}<P>        *ip = sValue; /* this is how the translated int is passed  <P>                                                    back up */<P>        return (TRUE);<P>
(b)
     #define DDR_GETSHORT (ddrs, shortp)      \<P>    (*(ddrs)-&gt;operations_vector-&gt;getshort)(ddrs, shortp)

</pre><P>
<h4><a name="00bc_000c"><B>Example 6: </B>(a) Fetching the next int from the input stream and does the conversion, storing the result in the target structure; (b) the MoveShort macro.<a name="00bc_000c"></h4><P>
<pre>(a)
     boo_t ddrstdio_getshort(DDR * ddrs, short *sp) {<P>     short sBuffer;<P>     if (fread((caddr_t) &amp; sBuffer, sizeof(short), 1, (FILE *)<P>            ddrs-&gt;ddr_private) != 1)<P>         return (FALSE);  /* If you cant get the int, return a fail<P>                                                         code */<P>      MoveShort(&amp;sBuffer, sp);<P>      ddrs-&gt;nCount += sizeof(short);<P>      return (TRUE);<P>}<P>
(b)
     #define MoveShort(pSrc,pDest) (*(char*)(pDest) =            \<P>                          *((char *)(pSrc)+1),            \<P>                          *((char*)(pDest)+1) = *(char *)(pSrc))
</pre>

<h4><a name="00bc_000d"><a name="00bc_000e"><B>[LISTING ONE]</B></H4>

<PRE>

typedef struct {
     enum ddr_op    operation;
     struct ddr_ops *operations_vector;
     void *       ddr_public;     /* for application usage */
     char *       ddr_private;         /* for internal use 1 */
     char *       ddr_base;       /* for internal use 2 */
     int          nCount;              /* for internal use 3 */
}     DDR;

struct ddr_ops {
     BOOL (*getlong)();
     BOOL (*putlong)();
     BOOL (*getshort)();
     BOOL (*putshort)();
     BOOL (*getbytes)();
     BOOL (*putbytes)();
     void (*destroy)();
}    ;

enum ddr_op {
     DDR_ENCODE = 0,
     DDR_DECODE = 1,
}    ;


</PRE>

<h4><a name="00bc_000f"><a name="00bc_0010"><B>[LISTING TWO]</B></H4>

<PRE>


#ifdef unix              /* used in Ddr.h (via makeheaders) */

#if defined(sparc) || defined(rs6000) || defined (hp700) || defined(m88k)
#define BIG_ENDIAN
#define ALIGNED
#elif defined(i86) || defined(vax)
#define LITTLE_ENDIAN
#elif defined(mips)
#define LITTLE_ENDIAN
#define ALIGNED
#endif

/* Move&lt;type&gt;(from,to) */

/*
 * Byte moving, with byte-swapping.
 * For use on 68000, sparc and most of the riscs
 */

#if defined(BIG_ENDIAN)
#define MoveByte(pSrc,pDest)    (*(char*)(pDest) = *((char*)(pSrc)),1)
#define MoveShort(pSrc,pDest)   (*(char*)(pDest) = *((char*)(pSrc)+1),\
                                *((char*)(pDest)+1) = *(char*)(pSrc),2)
#define MoveLong(pSrc,pDest)    (*(char*)(pDest) = *((char*)(pSrc)+3),\
                                *((char*)(pDest)+1) = *((char*)(pSrc)+2),\
                                *((char*)(pDest)+2) = *((char*)(pSrc)+1),\

#elif defined(LITTLE_ENDIAN)
#ifndef ALIGNED

 /* Low-level byte moving, without byte-swapping. Use these definitions for 386
  * and other low-enders ciscs that dont have alignment constraints. (vax) */

#define MoveByte(pSrc,pDest)  (*(char *)(pDest) = *(char*)(pSrc),1)
#define MoveShort(pSrc,pDest) (*(short *)(pDest) = *(short*)(pSrc),2)
#define MoveLong(pSrc,pDest)  (*(long *)(pDest) = *(long*)(pSrc),4)
#else

 /* use this for mips(ultrix) and may be other riscs (alpha) */

#define MoveByte(pSrc,pDest)  (*(char *)(pDest) = *(char *)(pSrc),1)
#define MoveShort(pSrc,pDest) (*(char*)(pDest) = *((char*)(pSrc)),\
                              *((char*)(pDest)+1) = *(char*)(pSrc)+1,2)
#define MoveLong(pSrc,pDest)  (*(char*)(pDest) = *((char*)(pSrc)),\
                              *((char*)(pDest)+1) = *((char*)(pSrc)+1),\
                              *((char*)(pDest)+2) = *((char*)(pSrc)+2),\
                              *((char*)(pDest)+3) = *(char*)(pSrc)+3, 4)
#endif
#else
#error &quot;unknown machine architecture&quot;
#endif
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
