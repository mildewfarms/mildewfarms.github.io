<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>SP 94: The Dylan Programming Language</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>The Dylan Programming Language<a name="0272_00dd"></h1><P>
<h2><a name="0272_00db"><a name="0272_0000">A small, efficient object-oriented language </h2><P>
<h3>Tamme D. Bowen and Kelly M. Hall</h3><P>
<p><i><a name="0272_00dc"><a name="0272_0000">The authors were formerly associated with the Laboratory for Applied Logic of the University of Idaho. Copyright (C) 1993, Laboratory for Application Logic, University of Idaho. All rights reserved.</i></p><hr><P>
Dylan, an object-oriented dynamic language developed by Apple Computer, is designed to replace existing static languages for the development of large software systems, yet remains small and efficient enough for the next generation of portable computers. Dylan was developed from the language Scheme, augmented with the Common-Lisp Object System (CLOS). <P>
In this article, we will model Dylan's type system. In doing so, we will formally define the terms class, method, generic function, and instance. We will also discuss features Dylan provides for efficiency and security. Function descriptions have been written to resemble that of the Haskell programming language. For more information on Dylan, refer to <I>Dylan: An Object-Oriented Dynamic Language,</I> by the Apple Computer Eastern Research and Technology Group (1992) and &quot;A Taste of Dylan,&quot; by David Betz (<I>DDJ,</I> October 1992). <P>
<h3><a name="0272_00de">Major Concepts <a name="0272_00de"></h3><P>
For the most part, Dylan can be characterized by two main concepts: objects and functions. The core of Dylan implements objects and functions, but omits many of the features you need to write useful programs. Dylan extends the core with ten required libraries that provide control flow, numbers, and abstract data types. <P>
All data values in Dylan are considered &quot;objects,&quot; organized by groups of &quot;classes.&quot; All objects are &quot;instances&quot; of at least one class, where the classes are organized into a heterarchy (direct acyclic graph) and inherit the features of classes above themselves in the heterarchy. The top of the heterarchy is the class <I>&lt;object&gt;,</I> the most general class in Dylan. <P>
Classes determine the structural characteristics of their instances by specifying &quot;slots,&quot; which hold the object's local state. Each slot has a name which identifies it, and functions (called &quot;getters&quot; and &quot;setters&quot;) are used to read and write the values stored in the slots. <P>
Functions in Dylan are objects that perform actions corresponding to functions, procedures, methods, and messages in other languages. Dylan has two types of functions: methods and generic functions. <P>
Methods are functions that contain a typed argument list and a body of code. Methods are defined with typed formal parameters and can be applied to arguments with either the same class as the defined parameters or to subclasses of the defined parameters. If functions are applied to incorrect argument types, an error is signaled. Note that this type checking is performed at run time even though static analysis is possible. <P>
Generic functions are ways to group together zero or more methods (each having different types) under the same function name. The generic function examines the types of the arguments and chooses the most appropriate method to invoke. If no appropriate method can be found, an error is generated. Since generic functions can be created and modified at run time, all type checking is dynamic. Generic functions are by definition overloaded and give Dylan ad hoc polymorphic capabilities. <P>
The Dylan reference manual is often vague in its description of how classes, methods, and generic functions work together. To better understand Dylan, we have formalized the relationship of these entities. This section contains an abstract syntax and description of the basic operations on classes and functions. No static validity functions are provided since Dylan performs no static analysis. <P>
<a href="#0272_00e6">Table 1</A> provides a list of the abstract syntax of classes, methods, and generic functions--note that <I>Symbol</I> and <I>Expr</I> are not defined. <I>Symbol</I> is analogous to <I>Char+,</I> and <I>Expr</I> corresponds with function bodies in Scheme. <P>
<h3><a name="0272_00df">Classes <a name="0272_00df"></h3><P>
The acyclic directed graph of classes can be represented in many ways. Our representations will be a list of <I>Class,</I> where <I>classname</I> is the name of a class, <I>sl</I> is a list of that class's slots, and <I>subclasses </I>is a list of classes that directly inherit properties from <I>classname.</I> The basic operations on classes can be coded; see <a href="#0272_00e4">Example 1</A>. <P>
New classes are created in Dylan with the function <I>make-class,</I> which takes three parameters: the name of the new class, a list of the direct superclasses of the new class, and a list of the new class's slots. For new classes, Dylan defines functions to access and update the slots. These <I>getter</I> and <I>setter</I> functions are added to the generic-function space later. <a href="#0272_00e5">Example 2(a)</A> provides code to define new classes. In <a href="#0272_00e5">Example 2(b)</A>, <I>FixLinks</I> and <I>Update</I> add the new class to the heterarchy and make sure <I>subclasses</I>' lists get modified to reflect the new class. <I>NewClass</I> adds new classes to the heterarchy by checking that the class doesn't already exist. If the class does exist, it is removed and then added to the heterarchy again. Otherwise, the new class is added to the old class list and the <I>subclass</I> pointers are updated accordingly. <a href="#0272_00e5">Example 2(c)</A> presents another operation on classes--making new instances of them. <P>
<h3><a name="0272_00e0">Generic Functions <a name="0272_00e0"></h3><P>
Generic functions in Dylan are overloaded functions that examine the types of their parameters and invoke the most appropriate method based on those types. We represented the space of all generic functions as a list, where each element in this list is itself a list of parameter lists and a pointer to the corresponding method that takes that parameter list. All top-level function applications in Dylan take place through generic functions. <P>
The operations on generic functions include defining new generic functions, removing generic functions, adding methods to existing generic functions, removing methods from generic functions, and applying generic functions to arguments; see <a href="#0272_00e7">Example 3</A>. Note in <a href="#0272_00e7">Example 3(f)</A> that <I>SpecificMethod</I> chooses the most specific method to apply based on the types of the supplied parameters and <I>SchemeApply</I> is the <I>apply</I> function in Scheme modified so that if a function cannot be found in the Scheme top-level namespace, then the function name is treated as a generic function. <P>
<h3><a name="0272_00e1">Methods <a name="0272_00e1"></h3><P>
Methods are Dylan's basic functional unit, taking a list of typed parameters and returning a typed value. Methods can be defined but not applied by the user. Defining a method automatically creates a new generic function with the same name, and the new method is attached to the new generic function. A new method is defined by creating a new, unique identifier, called a &quot;key,&quot; for this method, having Scheme bind the new key to the method's equivalent <I>lambda</I> expression in the Scheme namespace, adding the parameter list and key to the appropriate generic function, and creating a new generic function if required. Defining a new method must then alter the generic function space and the Scheme environment. <P>
In <a href="#0272_00e8">Example 4</A>, <I>NewMethod</I> creates a new method by modifying the Scheme environment and the generic function space. <I>MkUniqueKey</I> generates a new, unique key in the generic function space, and <I>bind</I> binds the key and the <I>lambda</I> expression in the Scheme environment. <P>
<h3><a name="0272_00e2">An Example <a name="0272_00e2"></h3><P>
To further illustrate how Dylan works, we'll use an example which calculates the square root of a number using Newton's method (see <I>Structure and Interpretation of Computer Programs,</I> by Harold Abelson and Gerald Sussman, MIT Press, 1985). <P>
In <a href="#0272_00e9">Example 5</A>, the Dylan implementation's call to <I>define-method</I> creates a generic function called <I>newtons-sqrt</I> that has one method with a parameter of type <I>&lt;object&gt;</I> (since <I>x</I> wasn't given a more specific class, it defaults to the most general class <I>&lt;object&gt;</I>) and stores the <I>lambda</I> expression Scheme's top-level environment. The local functions created with <I>bind-methods</I> do not generate functions themselves--these functions are stored, like any other Scheme local functions, in nested environments. <P>
Tracing the call (<I>newtons-sqrt 4</I>) illustrates how Dylan and Scheme work together: The generic function <I>newtons-sqrt</I> is found and the argument class <I>&lt;number&gt;</I> matches the method <I>&lt;object&gt;,</I> so the Scheme function associated with that method is invoked with parameter <I>4.</I> In the Scheme environment, the call (<I>sqrt 1</I>) is evaluated, generating the call (<I>close? 1</I>) which, in turn, generates the call (<I>* 1 1</I>). Since the asterisk (*) is not found in the Scheme environment, it is reevaluated as a generic function in Dylan. Dylan matches the types, dispatches the proper method to multiply <I>guess,</I> and continues. <P>
<h3><a name="0272_00e3">Conclusion <a name="0272_00e3"></h3><P>
In this article, we've focused on what sets Dylan apart from other functional and object-oriented languages. In doing so, the features we haven't covered include: <P>
<UL>
<li> Slot options: Slots may initial values, initializing functions, and storage-allocation modifiers. </li>
<li> Additional method functions: Methods can defer execution to more general methods. </li>
<li> Security options: Methods, generic functions, and classes may be &quot;sealed,&quot; which prevents any modifications to these items. </li>
<li> Efficiency option: Classes may be declared as &quot;abstract&quot; or &quot;instantiable,&quot; preventing instantiation of classes that are too general to be implemented efficiently. Abstract classes could be used as parents to more concrete, instantiable classes. Generic functions can still be defined to operate on the abstract classes since they can be overloaded to deal with all of the instantiable classes. </li>
</UL>
In any event, the Dylan language is a small, efficient way to get the benefits of object-oriented programming without writing a new language from scratch. Using the Scheme as a starting point, Dylan gives you the ability to define new types (classes) and typed functions (methods). Polymorphism is fundamental to Dylan, and is provided through inclusion (class inheritance) and ad hoc polymorphic functions (generic functions). <P>
Dylan lacks type inference and static type checking. Type inference could help verify correctness in <a href="#0272_00e9">Example 5</A>, for instance, by inferring the type for the parameter <I>x</I> as <I>&lt;number&gt;</I> instead of <I>&lt;object&gt;.</I> But inference is complicated by Dylan's dynamic nature, which allows functions such as <I>abs, +, *,</I> and the like to be overloaded at run time to operate on nonnumeric objects. This dynamic nature also limits the use of any static type checking. <P>
Since Dylan can be readily built by adding two new namespaces on top of Scheme--a graph representing the class heterarchy and a list of generic functions, each with a list of specific methods. These new namespaces, combined with new functions (to support the namespaces and replace the Scheme functions) form the core of the Dylan language. <P>
<h4><a name="0272_00e4"><B>Example 1:</B> Basic operations on classes. (a) IsClass returns True if cl is a valid class; (b) GetSlots returns the slot list for class cl; (c) GetKids returns a list of direct descendants of class cl; (d) GetSupers returns a list of all of superclasses for class cl; (e) GetSubs returns a list of all of the subclasses for class cl, where unique removes duplicate items from a list and element checks for membership in a list.<a name="0272_00e4"></h4><P>
<pre>(a)
IsClass :: ClassName -&gt; ClassList -&gt; Boolean
IsClass (cl:ClassName) ([]:ClassList) = False
IsClass cl (c::cs) =
   if cl = c.name then True else IsClass cl cs

(b)
GetSlots :: ClassName -&gt; ClassList -&gt; SlotList
GetSlots (cl:ClassName) ([]:ClassList) = error &quot;class not found
GetSlots cl (c::cs) =
   if cl = c.name then c.sl also GetSlots cl cs

(c)
GetKids :: ClassName -&gt; ClassList -&gt; ClassList
GetKids (cl:ClassName) ([]:ClassList) = error &quot;class not found
GetKids cl (c::cs) =
   if cl = c.name then c.subclasses else GetKids cl cs

(d)
GetSupers :: ClassName -&gt; ClassList -&gt;  ClassList -&gt; ClassList
GetSupers (cl:ClassName) ([]:ClassList) = (CC:ClassList) = []
GetSupers cl (c::cs) CC =
   if element cl = c.subclasses
     then unique ((cl.name::GetSupers cl cs CC)@(GetSupers c.name CC CC))
     else GetSupers cl cs CC

(e)
GetSubs :: ClassName -&gt; ClassList -&gt;  ClassList -&gt; ClassList
GetSubs (cl:ClassName) ([]:ClassList) = (CC:ClassList) = []
GetSubs cl (c::cs) CC =
   if cl = c.name
      then unique (direct @ indirect)
      else GetSupers cl cs CC
where direct = c.subclasses
and   indirect = fold '@' (map (\x. GetSubs x CC CC) c.subclasses)
</pre><P>
<h4><a name="0272_00e5"><B>Example 2:</B> (a) Defining new classes; (b) adding the new class to the heterarchy; (c) making new instances of classes where BuildRecord returns a record with field names identical to the SlotNames it is passed.<a name="0272_00e5"></h4><P>
<pre>(a)
NewClass :: ClassName -&gt; ClassList -&gt; SlotList -&gt; ClassList -&gt; ClassList
NewClass (n:ClassName) (pl:ClassList) (sl:SlotsList) (C:ClassList) =
   if IsClass n C
      then NewClass n pl sl (remove n C)
      else if fold and (map (\x. IsClass x C) pl)
           then FixLinks n pl (n,pl,sl)::C
           else error &quot;superclass does not exist&quot;

(b)
FixLinks :: ClassName -&gt; ClassList -&gt; ClassList -&gt; ClassList
FixLinks (n:ClassName) ([]:ClassList) (CC:ClassList) = CC
FixLinks n (p::ps) CC = FixLinks n ps (Update n p CC)
Update :: ClassName -&gt; ClassName -&gt; ClassList -&gt; ClassList
Update (n:ClassName) (p:ClassName) ([]:ClassList) = error
Update n p (c:cs) =
   if p = c.name
     then (c.name, c.sl, n::c.subclasses)::CS
     else c::(Update n p cs)

(c)
Make :: ClassName -&gt; ClassList -&gt; Instance
Make (n:ClassName) (CL:ClassList) =
   if IsClass n CL
   then BuildRecord unique (localslots @ superslots)
   else error &quot;class not found
where localslots = GetSlots n CL
and   superslots = fold '@' (map GetSlots (GetSupers n CL))
</pre><P>
<h4><a name="0272_00e6"><B>Table 1:</B> Abstract syntax of Dylan classes, methods, and generic functions.<a name="0272_00e6"></h4><P>
<pre>    <I>Classlist</I>    =   <I>Class+</I>
    <I>Class</I>        =   name:<I>ClassName</I>;sl:<I>SlotList</I>;subclasses:<I>ClassList</I>
    <I>SlotList</I>     =   <I>EmptySlot</I>*
    <I>ClassList</I>    =   <I>ClassName</I>+
    <I>ClassName</I>    =   <I>Symbol</I>
    <I>EmptySlot</I>    =   name:<I>SlotName</I>;pl:<I>ParamList</I>;body:<I>Expr</I>
    <I>ParamList</I>    =   <I>Param</I>*
    <I>Param</I>        =   name:<I>Symbol</I>;class:<I>ClassName</I>
    <I>FunName</I>      =   Symbol
    <I>Generic</I>      =   name:<I>GenName</I>;ml:<I>MethodList</I>
    <I>MethodList</I>   =   <I>FunName</I>*
    <I>GFList</I>       =   <I>Generic</I>*
    <I>Instance</I>     =   name:<I>IName</I>;slots:<I>FullSlots</I>;class:<I>ClassName</I>
    <I>FullSlots</I>    =   <I>FullSlot</I>*
    <I>FullSlot</I>     =   name:<I>SlotName</I>;class:<I>ClassName</I>
    <I>IName</I>        =   <I>Symbol</I>
    <I>Key</I>          =   <I>Symbol</I>
</pre><P>
<h4><a name="0272_00e7"><B>Example 3:</B> (a) IsGF returns True if n is a generic function; (b) AddMethod adds a new method to generic function n; (c) RemoveMethod and RMAux remove a method with parameters pl from a generic function n; (d) NewGF creates a new generic function, overriding any old methods that might be there; (e) RemoveGF removes a generic function n; (f) ApplyGF applys a generic function to an argument list.<a name="0272_00e7"></h4><P>
<pre>(a)
IsGF :: FunNames -&gt; GFList -&gt; Boolean
IsGF (n:FunName) ([]:FGList) = False
IsGF n (g:gs) =
    if n = g.name then True else IsGF n gs

(b)
AddMethod :: FunName -&gt; ParamList -&gt; Key -&gt; GFList -&gt; GFList
AddMethod (n:FunName) (pl:ParamList) (key:Key) ([]GFList) = []
AddMethod n pl key (g:gs) =
   if n = g.name
       then ((g.name),(pl.key)::(g.methods)) :: gs
       else g :: AddMethod n pl key gs

(c)
RemoveMethod :: FunName -&gt; ParamList -&gt; GFList -&gt; GFList
RemoveMethod (n:FunName) (pl:ParamList) ([]GFList) = error
RemoveMethod n pl key (g:gs) =
   if n = g.name
       then (g.name,(RMAux pl g.methods)) :: gs
       else g :: RemoveMethod n pl key gs
RMAux :: ParamList -&gt; MethodList -&gt; MethodList
RMAux (n:ParamList) ([]:MethodList) = error
RMAux pl key (m:ms) =
   if foreach i in pl (pl.i.type = m.pl.i.type)
       then ms
       else m :: RMAux pl ms

(d)
NewGF :: FunName -&gt; GFList -&gt; GFList
NewGF (n:FunName) (GF:GFList) =
   if IsGF n GF
      then NewGF n (RemoveGF n GF)
      else (n,[]) :: GF

(e)
RemoveGF :: FunName -&gt; GFList -&gt; GFList
RemoveGF (n:FunName) ([]:GFList) = error
RemoveGF n (g:gs) =
   if n = g.name      then gs
     else g:: RemoveGF n gs

(f)
ApplyGF :: FunName -&gt; ParamList -&gt; GFList -&gt; Object
ApplyGF (n:FunName) (pl:ParamList) ([]:GFList) = error
ApplyGF n pl (g:gs) =
   if n = g.name
      then SchemeApply (SpecificMethod pl g.methods) pl
      else ApplyGF n pl gs
</pre><P>
<h4><a name="0272_00e8"><B>Example 4:</B> NewMethod creates a new method by modifying the Scheme environment and the generic function space.<a name="0272_00e8"></h4><P>
<pre>NewMethod (n:FunName) (pl:ParamList) (l:Expr) (GF:GFList) 
(SE:Env) =
let key = MkUniqueKey GF in
if IsGF n GF
  then (AddMethod n pl key GF) , (bind key l SE)
  else NewMethod n pl l (AddMethod n [] Nil GF)
</pre><P>
<h4><a name="0272_00e9"><B>Example 5:</B> Calculating the square root of a number using Newton's method.<a name="0272_00e9"></h4><P>
<pre>(define-method newtons-sqrt (x)
   (bind-methods ((sqrt1 (guess)
                   (if (close? guess)
                       guess
                       (sqrt1 (improve guess))))
                   (close? (guess)
                       (&lt; (abs (- (* guess guess) x)) 0.0001))
                   (improve (guess)
                       (/ (+ guess (/ x guess)) 2)))
  (sqrt1 1)))
</pre><P>
<P>
<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
