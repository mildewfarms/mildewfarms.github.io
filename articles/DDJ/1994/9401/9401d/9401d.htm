<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JAN94: Skip Lists</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Skip Lists<a name="0044_0003"></h1><P>
<h2><a name="0044_0001"><a name="0044_0000">They're easy to implement and they work</h2><P>
<h3>Bruce Schneier</h3><P>
<p><i><a name="0044_0002"><a name="0044_0000">Bruce is the author of Applied Cryptography (John Wiley &amp; Sons) and can be reached at 730 Fair Oaks Ave., Oak Park, IL 60302.</i></p><hr><P>
Binary trees look great on paper, but they can have problems in real-life implementations. If nodes are inserted and deleted randomly, binary-tree performance is unmatched. If, however, nodes are inserted in order, the binary-tree structure degenerates into a linked list, and performance plummets. There are tree-balancing algorithms in every post-Knuth book on algorithms ever written, but they are difficult to implement and consume a lot of execution time. Dean Clark's &quot;Splay Trees&quot; (<I>DDJ</I>, December 1992) and my article, &quot;Red-Black Trees&quot; (<I>DDJ</I>, April 1992) describe binary trees with almost-balanced properties that are relatively efficient. Skip lists are even better.<P>
Skip lists were invented by William Pugh at the University of Maryland as an easy alternative to balanced trees. To understand skip lists, we first have to look at their derivation from simple linked lists.<P>
A linked list is a dynamic data structure in which every node points to the node after it. It's easy to implement, but to find a particular node, you have to look at every node before it in the list; see <a href="19940046.htm">Figure 1(a)</A>. If, however, every other node had an additional pointer that skipped to the node two ahead of it, you would only have to look at every other node in the list before you found the node you were looking for, and then maybe one more; see <a href="19940047.htm">Figure 1(b)</A>. If, in addition, every fourth node had yet another pointer to the node four ahead of it, you would only have to look at about every fourth node plus another two before you found the one you wanted; see <a href="19940048.htm">Figure 1(c)</A>. And so on. This would be great for searching--as efficient as a balanced binary tree--but insertion and deletion would be a nightmare. With every insertion and deletion, every node would have to have its pointers rearranged to conform to the skip structure.<P>
<h3><a name="0044_0004">Skip Lists<a name="0044_0004"></h3><P>
Pugh's skip lists get around this problem by taking a probabilistic approach to the skip pointers; see <a href="19940049.htm">Figure 1(d)</A>. Instead of demanding that every second node have two pointers, every fourth node have three pointers, and so on, the number of pointers in a particular node is determined probabilistically. On the average, half the nodes only have pointers to the node directly in front of them. The other half also have pointers to the node two ahead of them. Half of those nodes also have pointers to the node four ahead of them, half of those nodes also have pointers to the node eight ahead of them, and so on. This means that half the nodes have one pointer, a quarter have two pointers, an eighth have three pointers, and so forth. The addition of randomness means that insertions and deletions won't require modifications to the whole list. Sure, the random dice might degenerate into a normal linked list with lousy performance characteristics, but the odds of that happening are minuscule for a list of reasonable size.<P>
Skip-list algorithms are substantially simpler than balanced tree algorithms. C code for searching, inserting, and deleting nodes in skip lists is given in <a href="#0044_0008">Listing One</A> (page 88). Pascal code is available electronically; see &quot;Availability,&quot; page 3.<P>
The function <I>search()</I> implements the searching algorithm. Searches start at the top level of pointers, those that cover the most ground. Simply search until the node's value is greater than the value you are looking for, and then drop down to the next level of pointers. Eventually you will either find the node or overshoot the value on the bottom pointer level. <a href="1994004a.htm">Figure 2(d)</A> shows an example search path through a skip list.<P>
Skip-list insertion is implemented in the function <I>insert()</I>, which is nothing more than searching and splicing. Depending on the number of pointers the new node has, determined randomly by the function <I>randomlevel()</I>, different pointers will have to be updated. In the example source code, the array <I>update[]</I> contains the list of pointers that must be updated.<P>
Deleting is also easy: Search for the correct node, pull it out of the list, and reconnect a few pointers. The function <I>delete()</I> implements skip-list deletion.<P>
<h3><a name="0044_0005">More with Skip Lists<a name="0044_0005"></h3><P>
There are still more tricks to improve skip-list performance. You can vary the constant <I>p</I> in the probabilistic algorithm that determines how many pointers a given node has. This affects both performance as well as disk-storage requirements. If <I>p</I>=1/2 (as described in the example), the average node has two pointers.<P>
This is no better than a linked list. If <I>p</I> is reduced to 1/4, the algorithm runs no slower, but the average node has only 1.33 pointers. A <I>p</I> of 1/8 runs one-third slower than a <I>p</I> of 1/4, but only 1.14 pointers are required for each node. If <I>p</I>=16, search time is double that of a <I>p</I> of 1/4, but only 1.07 pointers are required for each node, and so on. Since the space savings converge on 1 fairly rapidly, little savings is gained by making <I>p</I> any less than 1/4.<P>
<h3><a name="0044_0006">Conclusion<a name="0044_0006"></h3><P>
William Pugh said it best: &quot;From a theoretical point of view, there is no need for skip lists. Balanced trees can do everything skip lists can and have good worst-case time bounds (unlike skip lists). However, the difficulty of implementing balanced trees greatly restricts their use_. Skip lists are simple data structures that can be used in place of balanced trees for most applications.&quot; They're easy to implement. They're as versatile as any balanced tree algorithm. They're faster than most tree-balancing &quot;trick&quot; algorithms. They require less memory storage for pointers than tree structures. And they work.<P>
<h3><a name="0044_0007">Bibliography<a name="0044_0007"></h3><P>
Pugh, William. &quot;Skip Lists: A Probabilistic Alternative to Balanced Trees.&quot; <I>Communications of the ACM</I> (June 1990).<P>
Pugh, William. &quot;A Skip List Cookbook.&quot; <I>Tech. Report CS-TR-2286.1</I>. Department of Computer Science, University of Maryland, July 1989.<P>
Pugh, William. &quot;Concurrent Maintenance of Skip Lists.&quot; <I>Tech. Report, CS-TR-2222.1</I>. Department of Computer Science, University of Maryland, April 1989.<P>
<h4><B> <a href="1994004b.htm">Figure 1</A>: </B>(a) Finding a particular node; (b) looking at every other node in the list; (c) looking at about every fourth node plus another two; (d) taking a probabilistic approach to skip pointers.</h4><P>
<h4><B> <a href="1994004c.htm">Figure 2</A>: </B>Search path through a skip list.</h4><P>

<PRE>

<a name="0044_0008"><a name="0044_0009"><B>[LISTING ONE]</B>


/* This file contains source code to implement a dictionary using
skip lists and a test driver to test the routines. A couple of comments
about this implementation: The routine randomLevel has been hard-coded to
generate random levels using p=0.25. It can be easily changed. The insertion
routine has been implemented so as to use the dirty hack described in the CACM
paper: if a random level is generated that is more than the current maximum
level, the current maximum level plus one is used instead. Levels start at
zero and go up to MaxLevel (which is equal to (MaxNumberOfLevels-1).
The compile flag allowDuplicates determines whether or not duplicates
are allowed. If defined, duplicates are allowed and act in a FIFO manner.
If not defined, an insertion of a value already in the file updates the
previously existing binding. BitsInRandom is defined to be the number of bits
returned by a call to random(). For most all machines with 32-bit integers,
this is 31 bits as currently set. The routines defined in this file are:
  init: defines NIL and initializes the random bit source
  newList: returns a new, empty list
  freeList(l): deallocates the list l (along with any elements in l)
  randomLevel: Returns a random level
  insert(l,key,value): inserts the binding (key,value) into l. If
    allowDuplicates is undefined, returns true if key was newly
    inserted into the list, false if key already existed
  delete(l,key): deletes any binding of key from the l. Returns
    false if key was not defined.
  search(l,key,&amp;value): Searches for key in l and returns true if found.
    If found, the value associated with key is stored in the
    location pointed to by &amp;value
*/

#define false 0
#define true 1
typedef char boolean;
#define BitsInRandom 31
#define allowDuplicates
#define MaxNumberOfLevels 16
#define MaxLevel (MaxNumberOfLevels-1)
#define newNodeOfLevel(l) (node)malloc(sizeof(struct
nodeStructure)+(l)*sizeof(node *))

typedef int keyType;
typedef int valueType;

#ifdef allowDuplicates
boolean delete(), search();
void insert();
#else
boolean insert(), delete(), search();
#endif

typedef struct nodeStructure *node;
typedef struct nodeStructure{
    keyType key;
    valueType value;
    node forward[1]; /* variable sized array of forward pointers */
    };
typedef struct listStructure{
   int level;     /* Maximum level of the list
            (1 more than the number of levels in the list) */
   struct nodeStructure * header; /* pointer to header */
   } * list;
node NIL;
int randomsLeft;
int randomBits;
init() {
  NIL = newNodeOfLevel(0);
  NIL-&gt;key = 0x7fffffff;
  randomBits = random();
  randomsLeft = BitsInRandom/2;
};
list newList() {
  list l;
  int i;
  l = (list)malloc(sizeof(struct listStructure));
  l-&gt;level = 0;
  l-&gt;header = newNodeOfLevel(MaxNumberOfLevels);
  for(i=0;i&lt;MaxNumberOfLevels;i++) l-&gt;header-&gt;forward[i] = NIL;
  return(l);
  };
freeList(l)
  list l;
  {
  register node p,q;
  p = l-&gt;header;
  do {
    q = p-&gt;forward[0];
    free(p);
    p = q; }
    while (p!=NIL);
  free(l);
  };
int randomLevel()
  {register int level = 0;
   register int b;
   do {
    b = randomBits&amp;3;
    if (!b) level++;
    randomBits&gt;&gt;=2;
    if (--randomsLeft == 0) {
    randomBits = random();
    randomsLeft = BitsInRandom/2;
    };
    } while (!b);
    return(level&gt;MaxLevel ? MaxLevel : level);
    };
#ifdef allowDuplicates
void insert(l,key,value)
#else
boolean insert(l,key,value)
#endif

register list l;
register keyType key;
register valueType value;
  {
  register int k;
  node update[MaxNumberOfLevels];
  register node p,q;
  p = l-&gt;header;
  k = l-&gt;level;
  do {
    while (q = p-&gt;forward[k], q-&gt;key &lt; key) p = q;
    update[k] = p;
    } while(--k&gt;=0);
#ifndef allowDuplicates
  if (q-&gt;key == key) {
    q-&gt;value = value;
    return(false);
    };
#endif
    k = randomLevel();
    if (k&gt;l-&gt;level) {
    k = ++l-&gt;level;
    update[k] = l-&gt;header;
    };
    q = newNodeOfLevel(k);
    q-&gt;key = key;
    q-&gt;value = value;
    do {
    p = update[k];
    q-&gt;forward[k] = p-&gt;forward[k];
    p-&gt;forward[k] = q;
    } while(--k&gt;=0);
#ifndef allowDuplicates
    return(true);
#endif
    }
boolean delete(l,key)
register list l;
register keyType key;
  {
  register int k,m;
  node update[MaxNumberOfLevels];
  register node p,q;
  p = l-&gt;header;
  k = m = l-&gt;level;
  do {
    while (q = p-&gt;forward[k], q-&gt;key &lt; key) p = q;
    update[k] = p;
    } while(--k&gt;=0);
  if (q-&gt;key == key) {
    for(k=0; k&lt;=m &amp;&amp; (p=update[k])-&gt;forward[k] == q; k++)
      p-&gt;forward[k] = q-&gt;forward[k];
    free(q);
    while( l-&gt;header-&gt;forward[m] == NIL &amp;&amp; m &gt; 0 )
         m--;
    l-&gt;level = m;
    return(true);
    }
    else return(false);
    }
boolean search(l,key,valuePointer)
register list l;
register keyType key;
valueType * valuePointer;
  {
  register int k;
  register node p,q;
  p = l-&gt;header;
  k = l-&gt;level;
  do while (q = p-&gt;forward[k], q-&gt;key &lt; key) p = q;
      while (--k&gt;=0);
  if (q-&gt;key != key) return(false);
  *valuePointer = q-&gt;value;
  return(true);
  };
#define sampleSize 65536
main() {
  list l;
  register int i,k;
  keyType keys[sampleSize];
  valueType v;
  init();
  l= newList();
  for(k=0;k&lt;sampleSize;k++) {
    keys[k]=random();
    insert(l,keys[k],keys[k]);
    };
  for(i=0;i&lt;4;i++) {
    for(k=0;k&lt;sampleSize;k++) {
        if (!search(l,keys[k],&amp;v)) printf(&quot;error in search #%d,#%d\n&quot;,i,k);
        if (v != keys[k]) printf(&quot;search returned wrong value\n&quot;);
        };
    for(k=0;k&lt;sampleSize;k++) {
        if (! delete(l,keys[k])) printf(&quot;error in delete\n&quot;);
        keys[k] = random();
        insert(l,keys[k],keys[k]);
        };
    };
  freeList(l);
  };
End Listing
</pre>


<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
