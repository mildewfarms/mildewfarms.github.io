<HTML><HEAD><TITLE>Software Patents: You Make the Choice</TITLE></HEAD>
<body bgcolor="FFFFFF">



<H1>Software Patents: You Make the Choice</H1><P>

<P>

<H3><I>Ray Valdes</I></H3><P>

<P>

We've been circling warily around the smoke and noise of the patent debate for several years now. The issues are complex and multifaceted. Here are some of the major points we've heard--and our response to them.<P>

If you're unfamiliar with this controversy, one word of advice is to not jump too quickly to conclusions. The controversy has been evolving for a long time and some fine legal distinctions are continually being reshaped by court decisions. For example, many people are surprised to learn that a patent, strictly speaking, is not a right to make or sell an invention--but rather an &quot;offensive right&quot; to exclude others from making, selling, or using a machine composed of the precise claims you've stated in your patent document. As patent attorney and former patent examiner David Pressman puts it: &quot;A patent is like a hunting license. It's useful just to go after infringers.&quot; (<I>Patent It Yourself</I>, Nolo Press, 1991). It should come as no surprise that at the Patent and Trademark Office (PTO) hearings, all 14 law firms that testified in San Jose supported the notion of software patents. To a cynic, it seems that a previously healthy industry is now being taken over by an external parasitic infection, one that takes a toll without any clear benefit.<P>

We've heard the argument from the lawyer's corner. This is the &quot;economic doomsday&quot; scenario: If you ban software patents, then investors will pull money out of this industry, and it will wither and die. This argument ignores the basic fact that the tremendous growth of the software industry over the past 20 years occurred largely without any patent &quot;protection&quot; of any kind. Now things seem to have shifted. Yes, of course any sane investor would prefer a startup with strong, broad patents. But investors would also like it if a startup resurrected George Washington and Abe Lincoln and negotiated an exclusive product endorsement. It does not mean such wishful desires are feasible, or even right. If the playing field is level, patents are irrelevant. It's a shame that many software firms are now being forced to play the patent game only because the playing field has become otherwise uneven.<P>

Moving to the other side of the debate, we've heard a different kind of doomsday scenario from some programmers: If software patents are freely granted, no one will be able to write a line of code or subroutine without consulting a patent attorney, so progress will come to a standstill. But this doomsday scenario is unlikely to arrive. The economic forces at play are not seeking to kill a golden goose. Remember the fundamental rule of parasitic behavior: The <P>parasite should feed on--not kill--the host organism. Programmers and software companies will likely have to pay--in time, aggravation, and money--but, in general, we will be able to work as before. There will even be an opportunity for a new generation of programming tools, such as text editors that automatically track patentable routines and algorithms and transfer funds electronically to patent holders. (If you patent this idea, please acknowledge the source.)<P>

Another important issue in the patent debate has to do with algorithms. As you may know, the legal principle is that algorithms are not patentable, in the same way that you cannot patent a mathematical formula, law of nature, or a new method of doing business.<P>

It is amusing to hear some lawyers at PTO hearings spout knowledgeably about how software is <I>not</I> equivalent to mathematical algorithms and therefore should be freely patentable. Anyone who has the most basic familiarity with the work of Alan Turing or John McCarthy would get a good laugh out of this assertion. (Turing machines are an abstract formal system invented a decade before the first electronic computer; every computer program is mathematically equivalent to an instance of a Turing machine. John McCarthy invented the Lisp language in 1956 purely as a mathematical notation; it was a surprise to McCarthy when, several years later, one of his graduate students implemented a Lisp interpreter on a computer.)<P>

Finally, there are some programmers (or exprogrammers) who strongly support patents. It's hard to say for sure, but it seems that this falls into what David Pressman calls the &quot;novice inventor's syndrome,&quot; in which one believes that all people have to do is &quot;show their invention to a company, sign a lucrative contract, and let the money roll in. Unfortunately, it hardly ever happens so easily.&quot; All sides agree that PTO examiners have granted some patents that are clearly invalid. There are two ways to approach this. One is to pour more resources into the examining process in order to make it work better: pay examiners more, give them better training and tools, establish a prior-art database, even relocate to Silicon Valley. These actions would beef up what has historically been an anemic area of expertise in PTO. The other approach is to leave software under the protection of copyright and trade-secret laws, where it has prospered and served us well. From our side of the room, the choice seems pretty clear.<P>


</body>
</HTML>

