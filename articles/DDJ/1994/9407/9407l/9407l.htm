<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUL94: ALGORITHM ALLEY</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>ALGORITHM ALLEY<a name="0073_001a"></h1><P>

<h2><a name="0073_0018"><a name="0073_0000">Rendering Circles and Ellipses</h2><P>

<h3>Tim Kientzle</h3><P>

<P>
<i><a name="0073_0019"><a name="0073_0000">Tim, who has a PhD in mathematics from the University of California, Berkeley, is the author of numerous commercial, shareware, and public-domain programs for graphics and serial communication. Tim can be contacted at kientzle@netcom.com.</i></p><hr><P>

In the July 1990 issue of <I>Dr. Dobb's Journal</I>, Tim Paterson presented the article &quot;Circles and the Digital Differential Analyzer.&quot; While Paterson's algorithm does not accumulate error, his explanation involves a method for solving the differential equation <I>dy/dx=-x/y</I> which does accumulate error.<P>

In a subsequent letter to the editor (&quot;Letters,&quot; <I>DDJ</I>, July 1991), V. Venkataraman pointed out that Paterson's algorithm plots points on or just within the ideal circle, and suggests the desirability of a method that plots the points closest to the circle, even if they are outside it. Venkataraman presented a minor change to Paterson's algorithm, but still failed to consistently choose the optimal point.<P>

Based on this exchange, I developed a circle algorithm which satisfies both Paterson's interest in speed and Venkataraman's interest in plotting the closest points to the circle. The corresponding algorithm for drawing ellipses is faster than the line algorithm that inspired it.<P>

<h3><a name="0073_001b">Lining Up<a name="0073_001b"></h3><P>

The digital differential analyzer (DDA), also known as &quot;Bresenham's algorithm,&quot; is based on a simple idea: Instead of picking points on the ideal line, you should pick points on the screen that are close to the line. To do this, increment one coordinate while updating the other so that you pick the integer closest to the line. Since the endpoints of the lines have integer coordinates, the slope is always rational, so you can obtain a fast, exact algorithm by using rational arithmetic.<P>

For example, assume you're drawing a line from (0,0) to (3,2). Whenever you increment the x-coordinate, you need to increase the y-coordinate by 2/3. If you let the variable <I>y</I> hold the integral part of the y-coordinate and add a new variable to hold the numerator of the fractional part, you have the algorithm in <a href="#0073_001e">Listing One</A> .<P>

The problem with this approach is that by simply using <I>y</I> to plot the point, you are truncating the exact value rather than rounding. Since rounding involves adding 1/2 and then truncating, in this algorithm it suffices to initialize the exact y-coordinate to 1/2 before you start, as in <a href="#0073_001f">Listing Two</A> .<P>

<h3><a name="0073_001c">Going in Circles<a name="0073_001c"></h3><P>

Drawing circles using the DDA algorithm requires more-involved geometry than drawing lines, but it uses the same approach: Step the x-coordinate through successive values and update the approximate y-coordinate based on some additional information. The trick is to figure out what that additional information should be.<P>

You need the following simplifications: First, deal with points on the circle as &quot;offsets&quot; from the center of the circle (this is required by the algebra); and second, only compute the pixels in 1/8 of the circle, taking advantage of symmetry. Reflection to the remaining octants of the circle is handled by the routines in Listings <a href="#0073_0020">Three</A> and <a href="#0073_0021">Four</A> .<P>

To get a first cut at a circle algorithm, you compute <I>y</I> from <I>sqrt(r<SUP>2</SUP>-x<SUP>2</SUP>)</I> (see <a href="#0073_0022">Listing Five</A>). Although it may not look like it, the algorithm in <a href="#0073_0022">Listing Five</A> is almost the same as Paterson's. The difference is that his approach replaced an expensive, repeated square-root calculation with a series of additions and subtractions. This is similar to the &quot;strength reduction&quot; performed by many optimizing compilers that replace an expensive operation within a loop with a series of less-expensive operations, usually adding a new variable in the process. Of course, strength reduction of a square-root operation is considerably beyond what can be handled automatically by today's compilers.<P>

Then, reduce the square-root calculation to calculation of squares. In the octant you're computing (the part of the circle from the top to the top-left), the y-coordinate of the next point is always the same or one less than the previous y-coordinate. This means that you can simply decrement <I>y</I> whenever <I>y<SUP>2</SUP> &gt; radius<SUP>2</SUP> - x<SUP>2</SUP></I>, or equivalently, whenever <I>x<SUP>2</SUP>+y<SUP>2</SUP>-radius<SUP>2</SUP>&gt;0</I>.<P>

Next, remove the calculation of the squares. Keep the square of the radius in a temporary variable. You can then use the algebraic simplification <I>(x+1)<SUP>2</SUP> = x<SUP>2</SUP>+2x+1</I> to keep track of <I>x<SUP>2</SUP></I> and <I>y<SUP>2</SUP></I> as you change <I>x</I> and <I>y</I>. This involves adding new variables <I>xSquared</I> and <I>ySquared</I>, adding <I>2x+1</I> before incrementing <I>x</I> and subtracting <I>2y-1</I> from <I>y<SUP>2</SUP></I> before decrementing <I>y</I>.<P>

Finally, because the only place you need all these squares is in the condition to decrement <I>y</I>, you can combine them into a single <I>error</I> variable kept equal to <I>xSquared+ySquared-radiusSquared</I>. The earlier condition then simplifies to <I>error&gt;0</I>, which gives exactly the algorithm Paterson describes; see <a href="#0073_0023">Listing Six</A> . This explanation of the variable <I>error</I> should make clear why this algorithm works: Whenever the current <I>y</I> gives a point outside the circle (whenever <I>x<SUP>2</SUP>+y<SUP>2</SUP>&gt;radius<SUP>2</SUP></I>), you reduce <I>y</I> by 1 to remain within the circle. As Venkataraman pointed out, you'd get a smoother result if you could instead choose the points closest to the circle; that is, if you could only reduce <I>y</I> when the lower point would be closer to the circle.<P>

To accomplish this, take a careful look at how the algorithm decides when to decrement <I>y</I>. You want a condition that will tell you whether (<I>x,y</I>) or (<I>x,y-1</I>) is closer to the circle. Algebraically, you want to decrement <I>y</I> whenever the inequality in <a href="#0075_0001">Figure 1</A>(a) is true. Changing the absolute values to squares gives something equivalent, but easier to simplify. The simplification is still tedious, but you eventually end up with something useful. The left side of <a href="#0075_0001">Figure 1</A>(b) is simply the value <I>error</I> from earlier attempts. The value in brackets is always positive and less than 1. This means that the right side of the inequality is less than <I>y</I> but greater than <I>y-1</I>. Since everything else is an integer, the inequality simplifies to <I>error >= y</I>.<P>


<HR>
<a name="0075_0001">
<P>
<img src="9407d3f1.gif"></P>
<P>
<B>Figure 1</B>  (a) You need to decrement y whenever the inequality is true; (b) the left side is simply the value error from earlier attempts. </P>
<HR>


This results in <a href="#0073_0024">Listing Seven</A> , which is close to Venkataraman's suggestion, but always gives the point closest to the circle. To test this code, replace the <I>plot8</I> routine with one that computes the radius of the points being plotted and the radius of points just above and below them. You'll see that the algorithm always picks the y-coordinate that results in a radius closest to the circle. You may be able to speed up <a href="#0073_0024">Listing Seven</A> slightly by changing <I>error</I> to be <I>x<SUP>2</SUP>+y<SUP>2</SUP>-r<SUP>2</SUP>-y</I>, which allows the condition to simply test <I>error >= 0</I>. <P>

<h3><a name="0073_001d">Handling Ellipses and Nonsquare Pixels<a name="0073_001d"></h3><P>

If you're only interested in drawing perfect circles on screens with square pixels, then <a href="#0073_0024">Listing Seven</A> serves the purpose quite nicely. However, if the pixels are not square, you have to draw an ellipse in order to get a circular result. <P>

The biggest problem in drawing ellipses is that you lose the eight-fold symmetry used to simplify the circle routine. Where before you had eight identical octants, you now have two sets of octants: two each at the top and bottom of the circle that are identical to each other, and four at the left and right that are identical to each other. So, you need to run the earlier algorithm twice, once for each set. <P>

The formula for the ellipse that fits within a rectangle of width <I>2a</I> and height <I>2b</I> is <I>b<SUP>2</SUP>x<SUP>2</SUP>+a<SUP>2</SUP>y<SUP>2</SUP>=a<SUP>2</SUP>b<SUP>2</SUP></I>. Adjusting the calculation of <I>error </I>to match this gives us the algorithm in <a href="#0073_0025">Listing Eight</A> for drawing the ellipse. The least-obvious part of this is how to determine where each octant stops. Remember that the algorithm depends on <I>y</I> either staying the same or decreasing by 1. This means that each loop has to continue until you reach a place in the ellipse where the slope is 1 or -1. This happens exactly when <I>b<SUP>2</SUP>x==a<SUP>2</SUP>y</I>; see <a href="#0073_0025">Listing Eight</A>.<P>

Clearly, a few more things could be done to speed up this routine. By adding variables to keep track of <I>b<SUP>2</SUP>x</I> and <I>a<SUP>2</SUP>y</I>, you could replace all of the multiplications with additions. You could also alter the definition of <I>error </I>as discussed earlier to simplify the condition test. <a href="#0073_0026">Listing Nine</A> incorporates those optimizations, plus a few others. In assembly language, you should be able to optimize this to a maximum of eight addition/subtraction/comparison operations per loop iteration, not counting the operations in the <I>plot4</I> routine. Counting those, you get a maximum of 16 such operations for four points on the ellipse, or a mere four additions per point, which compares quite favorably to the three additions per point for the less-general circle routine developed earlier, and the six additions per point for the line algorithm. In fact, this shows that drawing the ellipse directly is faster than computing several points on the ellipse and using DDA lines to connect them!<P>

Of course, it might be faster to undo some of these optimizations to reduce the number of variables required. By doing that, you may be able to fit all the variables in registers, thus speeding up the algorithm. As is usual for such low-level graphics operations, optimizing for the specific processor and video hardware is critical.<P>


<h4><a name="0073_001e">Listing One <a name="0073_001e"></h4><pre>

void line_1(int x0, int y0, int x1, int y1 )
{
    int x = x0,y = y0;          /* Current point on line */
    int deltaX = x1-x0;         /* Change in x from x0 to x1 */
    int deltaY = y1-y0;         /* Change in y from y0 to y1 */
    int numerator = 0;          /* Numerator of fractional part of y */

    while ( x &lt;= x1 )
    {
        plot( x,y );
        x += 1;

        numerator += deltaY;        /* Increase fractional part of y */
        if (numerator &gt;= deltaX)    /* If fraction is 1 or more */
        {
            numerator -= deltaY;    /* Reduce fraction */
            y += 1;                 /* Increase whole part of y */
        }
    }
}




</pre>
<h4><a name="0073_001f">Listing Two<a name="0073_001f"></h4><pre>

#define abs(x)  (((x)&gt;=0)?(x):-(x))  /* Absolute value */
void line_2(int x0, int y0, int x1, int y1 )
{
    int x = x0,y = y0;
    int deltaX = 2*abs(x1-x0);
    int deltaY = 2*abs(y1-y0);
    int numerator = deltaX/2;      /* Initialize y-coordinate to 1/2 */
    while ( x &lt;= x1 )
    {
        plot( x,y );
        x += 1;

        numerator += deltaY;
        if (numerator &gt;= deltaX)
        {
            numerator -= deltaY;
            y += 1;
        }
    }
}





</pre>
<h4><a name="0073_0020">Listing Three<a name="0073_0020"></h4><pre>

void plot4( int xOrigin, int yOrigin, int xOffset, int yOffset)
{
    plot( xOrigin + xOffset, yOrigin + yOffset );
    plot( xOrigin + xOffset, yOrigin - yOffset );
    plot( xOrigin - xOffset, yOrigin + yOffset );
    plot( xOrigin - xOffset, yOrigin - yOffset );
}


</pre>
<h4><a name="0073_0021">Listing Four<a name="0073_0021"></h4><pre>

void plot8( int xOrigin, int yOrigin, int xOffset, int yOffset)
{
    plot4( xOrigin, yOrigin, xOffset, yOffset );
    plot4( xOrigin, yOrigin, yOffset, xOffset );
}


</pre>
<h4><a name="0073_0022">Listing Five<a name="0073_0022"></h4><pre>

void circle_1(int xOrigin, int yOrigin, int radius)
{
   int x = 0;                           /* Exact x coordinate */
   int y = radius;                      /* Approximate y coordinate */

   while (x &lt;= y)                       /* Just one octant */
   {
       plot8( xOrigin, yOrigin, x, y );
       x += 1;
       y = sqrt(radius*radius - x*x);
   }
}


</pre>
<h4><a name="0073_0023">Listing Six<a name="0073_0023"></h4><pre>

void circle_2(int xOrigin, int yOrigin, int radius)
{
    int x = 0;                         /* Exact x coordinate */
    int y = radius;                    /* Approximate y coordinate */
    int error = 0;                     /* x^2 + y^2 - r^2 */

    while (x &lt;= y)
    {
        plot8( xOrigin, yOrigin, x, y );

        error += 2 * x + 1;
        x += 1;

        if (error &gt; 0)
        {
            error -= 2 * y - 1;

            y -= 1;
        }
    }
}


</pre>
<h4><a name="0073_0024">Listing Seven<a name="0073_0024"></h4><pre>

void circle_3(int xOrigin, int yOrigin, int radius)
{
    int x = 0;                  /* Exact x coordinate */
    int y = radius;             /* Approximate y coordinate */
    int error = 0;              /* x^2 + y^2 - r^2 */

    while (x &lt;= y)
    {
        plot8( xOrigin, yOrigin, x, y );

        error += 2 * x + 1;
        x += 1;

        if (error &gt;= y)
        {
            error -= 2 * y - 1;
            y -= 1;
        }
    }
}


</pre>
<h4><a name="0073_0025">Listing Eight<a name="0073_0025"></h4><pre>

void ellipse_1(int xOrigin, int yOrigin, int a, int b)
{
    {    /* Plot the octant from the top to the top-right */
        int x = 0;
        int y = b;
        int error = 0;/* b^2 x^2 + a^2 y^2 - a^2 b^2 */

    
        while (x * b *b &lt;= y * a * a)
        {
            plot4( xOrigin, yOrigin, x, y );
    
            error += 2 * b*b * x + b*b;
            x += 1;

            if (error &gt;= y * a*a)
            {
                error -= 2 * a*a * y - a*a;
                y -= 1;
            }
        }
    }

    {    /* Plot the octant from right to top-right */
        int x = a;
        int y = 0;
        int error = 0;/* b^2 x^2 + a^2 y^2 - a^2 b^2 */
    
        while (x * b * b &gt; y * a * a)
        {
            plot4( xOrigin, yOrigin, x, y );
    
            error += 2 * a*a * y + a*a;
            y += 1;

            if (error &gt;= x * b*b)
            {
                error -= 2 * b*b * x - b*b;
                x -= 1;
            }
        }
    }
}


</pre>
<h4><a name="0073_0026">Listing Nine<a name="0073_0026"></h4><pre>

void ellipse_2(int xOrigin, int yOrigin, int a, int b)
{
    int aSquared = a*a;
    int bSquared = b*b;
    int twoASquared = 2 * aSquared;
    int twoBSquared = 2 * bSquared;

    {    /* Plot the octant from the top to the top-right */
        int x = 0;
        int y = b;
        int twoXTimesBSquared = 0;
        int twoYTimesASquared = y * twoASquared;

        int error = -y* aSquared;  /* b^2 x^2 + a^2 y^2 - a^2 b^2 - a^2y */
    
        while (twoXTimesBSquared &lt;= twoYTimesASquared )
        {
            plot4( xOrigin, yOrigin, x, y );
            x += 1;
            twoXTimesBSquared += twoBSquared;
            error += twoXTimesBSquared - bSquared;
            if (error &gt;= 0)
            {
                y -= 1;
                twoYTimesASquared -= twoASquared;
                error -= twoYTimesASquared;
            }
        }
    }
    {    /* Plot the octant from right to top-right */
        int x = a;
        int y = 0;
        int twoXTimesBSquared = x * twoBSquared;
        int twoYTimesASquared = 0;
        int error = -x* bSquared;  /* b^2 x^2 + a^2 y^2 - a^2 b^2 - b^2x */

        while (twoXTimesBSquared &gt; twoYTimesASquared)
        {
            plot4( xOrigin, yOrigin, x, y );
            y += 1;
            twoYTimesASquared += twoASquared;
            error += twoYTimesASquared - aSquared;
            if (error &gt;= 0)
            {
                x -= 1;
                twoXTimesBSquared -= twoBSquared;
                error -= twoXTimesBSquared;
            }
        }
    }
}
</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
