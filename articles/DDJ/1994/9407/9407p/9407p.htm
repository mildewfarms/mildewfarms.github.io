<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUL94: LETTERS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>LETTERS<a name="001e_0001"></h1><P>
<h3><a name="001e_0002">Securing Secure Algorithms<a name="001e_0002"></h3><P>
Dear <I>DDJ</I>,<P>
Bruce Schneier's article, &quot;The Cambridge Algorithms Workshop&quot; (<I>DDJ</I>, April 1994) lists three conditions under which an encryption algorithm should be secure. There is one class of encryption algorithms that not only satisfies these conditions, but has been mathematically proven to be impossible to break--those algorithms that allow the use of a key that is longer than the plaintext to be encrypted. In addition to being absolutely secure, these algorithms are the simplest to implement and the fastest to execute. The proof of unbreakability is quite simple and based on the following theorem.<P>
<B>Theorem</B>: Any binary number <I>N</I>, when  XORed with a random binary number <I>R,</I> produces a random number.<P>
<B>Proof</B>: <P>
<OL>
<LI>Let <I>K</I> be a random sequence of <I>X</I> number of bytes.</LI>
<LI>Let <I>P</I> be plaintext of length <I>X</I>.</LI>
<LI>Let <I>C</I> be the ciphertext produced by <I>K xor P</I>.</LI>
<LI>From the theorem we know that the ciphertext <I>C</I> is a sequence of totally random bytes and is therefore unbreakable.</LI>
</OL>
<a href="19940020.htm">Example 1</A> shows <I>P1</I> and <I>P2</I> as plaintext to be encrypted. <I>K1</I> is a random series of 8-bit numbers used to encrypt <I>P1</I>. <I>C1</I> is the ciphertext produced by XORing <I>P1</I> with <I>K1</I>. <I>C2</I> is the ciphertext produced by using <I>C1</I> as the key when encrypting <I>P2</I>. <P>
If ciphertext <I>C1</I> is unencrypted by XORing it with the random sequence <I>K1</I>, then we get plaintext <I>P1</I>. If ciphertext <I>C1</I> is unencrypted by XORing it with cipher-  text <I>C2</I>, then we get plaintext <I>P2</I>! Thus we see that, given any plaintext <I>P</I> of length ten, there exists a key that will produce <I>P</I> when the key is XORed with <I>C1</I>. That is, <I>C1</I> could be unencrypted into <I>any</I> ten-character message, given the right random key.<P>
One criticism of this type of data-encryption algorithm is that to encrypt ten megabytes of plaintext you need a random-number key that is ten megabytes long. In this age of CDs and laser disks, however, distributing large keys to those with whom you correspond is no more difficult than distributing short keys.<P>
William D. Hause<P>
Bryan, Texas <P>
<h3><a name="001e_0003">Rx  for Phone Woes<a name="001e_0003"></h3><P>
Dear <I>DDJ</I>,<P>
After reading about Al Stevens's telephone experience (<I>DDJ</I>, March 1994), I can say only one thing: Switch to MCI! All the instructions I ever need are printed on the back of my MCI credit card, and they work. Access to MCI is (almost) always a local call, and when it's not, the 800 number works. No distance is too long or too short. My wife claims that she once had to use the 800 number because she got a private party on the other one, but I think that either she or the local telephone company screwed up and she got the wrong number.<P>
AT&amp;T has called me several times to offer me $50.00 to switch. I have refused because of a feeling that AT&amp;T is the IBM of the telephone world. You know: Do it our way or don't do it at all. Reading the instructions on a lot of motel phones made me suspicious. Reading your article has confirmed them.<P>
Long-distance telephone rates are lower than they have ever been, and they keep falling. Back in the early '80s, when I was living in Germany, it cost three  times as much to call the States from Germany as it cost to call Germany from the States. Don't knock Judge Green. The best system in the world has gotten better, but it has changed. Switch to a company that understands the new situation.<P>
Clair J. Robinson<P>
Minneapolis, Minnesota<P>
<h3><a name="001e_0004">Software Testing<a name="001e_0004"></h3><P>
Dear <I>DDJ</I>,<P>
In his article &quot;Software Testing Cycles&quot; (<I>DDJ</I>, February 1994), Scott Bradley prefaced his approach to automate testing with the phrase, &quot;QA engineers who are not constrained by time_.&quot; In doing so, he announces that he is not dealing with the real world. Time constraints are often the reason people buy automated testing tools. It's time to admit that writing programs to test programs doesn't work and never has. Test- scripting tools are not news, they've been around for decades--yet the majority of testing is still manual. Why?<P>
Scott also asserts that end users are consigned to using recording for their testing. The flaw in this conclusion is that users must be closely involved with test design from the earliest stages, yet recording is not possible until the application exists. Further, as the application moves into production and then maintenance, users bear the greatest responsibility for testing; with unstructured, sequential recordings, maintenance is almost impossible.<P>
Linda G. Hayes<P>
AutoTester<P>
Dallas, Texas<P>
<h3><a name="001e_0005">Modeless Dialog Boxes<a name="001e_0005"></h3><P>
Dear <I>DDJ</I>,<P>
The May 1993 article by Joseph Newcomer, &quot;Modeless Dialog Boxes for Windows,&quot; was particularly interesting to me. I have recently come across exactly the same requirements--namely, the need to simplify the main Windows message loop for multiple modeless dialogs and have iconized modeless dialogs to reduce screen clutter.<P>
While the method of keeping a linked list of dialog handles is fine, it is totally unnecessary. I also thought that you needed to keep global variables for each modeless dialog box that your application had &quot;active.&quot; This is not the case. If you read between the lines in the SDK documentation on <I>IsDialogMessage</I> (with hindsight) you can see that <I>IsDialog-Message </I>seems only to work on keystrokes to the (presumably) active dialog.<P>
The method I use is very simple and will fit easily into the default dialog processing in Joseph's code. I can't lay claims to this method, as I first saw it in the <I>Microsoft Knowledge Base</I>. All you need is a single global variable for the window handle of the active dialog box. In Joseph's default-dialog processing routine, you process the WM_ACTIVATE message; if the dialog is becoming active, set the <I>ghActiveDlg</I> variable to that dialog handle; if it is being deactivated, set <I>ghActiveDlg</I> to NULL.<P>
The keystrokes to move between the application window and modeless dialogs, (ALT+F6, ALT+SHIFT+F6) still work as before. Incidentally, has anyone else noticed that if you have multiple modeless dialogs, the behavior of these keystrokes is not quite what you may expect? <P>
The simplicity of this method, shown in <a href="#001e_0008">Example 2</A>, highlights deficiencies in the SDK documentation (which is improving slowly). The only use of this method I could find was in the C7 CDDEMO sample program.<P>
On the topic of minimizing modeless dialog boxes, I find that Joseph's method seems to have some redundant processing--notably the setting of the dialog icon word to NULL. In my experiments, the dialog-icon word is always NULL. The only reason I can see that he might need this is if some other application running has changed the dialog-icon word. This is a bit naughty--since all applications share the dialog class, no application should be changing the dialog-class word. Joe's approach then removes the need to process the WM_NCPAINT message and the other places where he sets the dialog-class word to NULL.<P>
Minimizing the dialog works fine if the icon is outside the application window, but not if the icon is over the application's client area. This is because the icon's background is always the desktop bitmap, rather than the windows underlying the icon. We need to get windows beneath the icon to repaint before using <I>DrawIcon</I>, rather than the simple use of WM_ICONERASEBKGND. I can't help feeling that Windows should have already repainted any underlying windows, and the application should not be forcing the background to repaint anyway! Since modeless dialogs with icons are a requirement, maybe we need to ask Microsoft to provide these in a future version of Windows.<P>
David Lowndes<P>
Stoke-on-Trent, England<P>
<h3><a name="001e_0006">Far Be It From Us<a name="001e_0006"></h3><P>
Dear <I>DDJ</I>,<P>
<I>Multimedia World </I>and <I>PC Magazine</I> have decided to no longer accept advertising for erotic, pornographic &quot;adult&quot; multimedia or CD-ROM products.<P>
Degrading and dehumanizing women into sex objects both contribute to physical violence against women and have been invaluable assets in the war against social, political, and economic equality for women.<P>
The constitution protects the right of free speech. It does not guarantee the right to make a profit. I am writing to ask you to take a positive step toward promoting social, political, and economic equality for women by refusing to accept &quot;adult software&quot; advertising in your magazine. For equality and safety.<P>
Lisa Gray<P>
Bothell, Washington<P>
<I>DDJ responds</I>: Thanks for writing; we appreciate hearing from you. While we agree in principle with your statements, we're curious about what led you to believe that <I>Dr. Dobb's Journal</I> accepts advertising for erotic products? <P>
By the way, the constitution does, in fact &quot;guarantee the right to make a profit,&quot; unless we missed some important news recently.<P>
<h3><a name="001e_0007">Trying Tries<a name="001e_0007"></h3><P>
Dear <I>DDJ</I>,<P>
I was happy to see Tom Swan's column on tries (<I>DDJ</I>, April 1994). Though I've been using tries to do many things (for at least ten years) I find that they are misunderstood in general by people who otherwise use binary trees and the like. And so they don't get much press (or use).<P>
I find that for dealing with words, concordance programs and things like that, I almost always put one character in a node with downward links for the next character in the word, and also with sideways links for a similar word but with a different character in this location.<P>
The diagram in <a href="19940021.htm">Figure 1</A> shows a trie, which includes the words <I>and</I>,<I> arts</I>,<I> </I>and <I>ant</I>. Each leaf is a null, signifying end of word. This makes for a compact and easily searchable dictionary. I also add an additional item on each leaf, a number, which can be used as a counter. Thus, when a word is inserted into the trie, a count of the number of occurrences can be easily kept.<P>
I also want to thank Tom for using pseudocode in his column. Far too often nowadays people will write a program and call it an &quot;algorithm.'' They don't understand the difference between an algorithm and an implementation, which is something that I found disturbing, since I have been a Modula-2 user for many years and that distinction is so important to the language (and to Professor Wirth himself).<P>
I've read of a time when Algol was the pseudocode of choice. I remember a time when pseudocode really was a readable nonimplementation (those were the days), and now it seems that C has become the pseudocode (which is a sad statement on the state of computer science).<P>
John Andrea<P>
Antigonish, Nova Scotia <P>
<a href="19940022.htm">Figure 1:</A> Trying tries.
<a href="19940023.htm">Example 1:</A> Securing secure algorithms.
<h4><a name="001e_0008"><B>Example 2:</B> Modeless dialog boxes.<a name="001e_0008"></h4><P>
<pre>/* Global variable - the active dialog handle */
HWND ghActiveDlg = NULL;
case WM_ACTIVATE:
  if ( wParam == WA_INACTIVE )
  {
    /* Becoming inactive */
    ghActiveDlg = NULL;
  }
  else
  {
    /* Becoming active */
    ghActiveDlg = hDlg;
  }
  return( FALSE );
In the main message loop the modeless dialog processing is simply:
/* If one of the modeless dialogs is active process the message */
if ( ( ghActiveDlg == NULL ) || !IsDialogMessage( ghActiveDlg, &amp;msg ) )
{
  /* Otherwise process it as normal */
  TranslateMessage( &amp;msg );
  DispatchMessage( &amp;msg );
}</pre><P>
<P>
<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
