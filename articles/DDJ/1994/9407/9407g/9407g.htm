<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUL94: Postman: A Bridge to the UNIX Mail System</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Postman: A Bridge to the UNIX Mail System<a name="0054_0010"></h1><P>
<h2><a name="0054_000e"><a name="0054_0000">Automating the mail process</h2><P>
<h3>Zongnan H. Lu</h3><P>
<p><i><a name="0054_000f"><a name="0054_0000">Henry is a system analyst with the University of Michigan School of Business Administration. He can be contacted at henry_lu@ccmail.bus.umich.edu.</i></p><hr><P>
Postman is an interface program that sits between PIS, our in-house UNIX-based personal-information system (which currently supports more than 3000 registered users) and the UNIX sendmail program, which allows access to the outside world. Postman checks incoming mail delivered by sendmail, putting it into the PIS, and checks outgoing mail in the PIS, sending it to sendmail. In short, postman provides a way to exchange mail between user-application programs and the outside world through the existing UNIX Mail System. <P>
Communication between sendmail and postman is handled by the UNIX Mail command. If a user has an Internet mailing address, any mail coming from outside will not only go into the PIS, but will also be forwarded to the Internet mailing address; see <a href="19940056.htm">Figure 1</A>.<P>
Before running postman or PIS, your application program must be running on a UNIX computer which is set to be either mail master, or using the DNS. <P>
A special user group must be created for the application users. The system-specific mail-spooling directory is used in the postman program. Each user has his own mailbox bearing the user's name. In our case, /usr/spool/mail is used as a mail-spooling directory. Postman is owned by a superuser--root--and can handle only mail formatted as ASCII text. <P>
Communication between postman and the PIS is flexible. For example, I put mail read from a mailbox directly into a database accessed by PIS. Conversely, the notes in the database are read by the postman program and then sent out.<P>
<h3><a name="0054_0011">Adding a User<a name="0054_0011"></h3><P>
Whenever a new user is registered in PIS, the user's name should be added into the UNIX-system password file /etc/passwd, which will be checked by the sendmail program when mail comes in. All users in PIS are set to be in the same group; that is, they have the same group ID and an entry in the /etc/passwd file as follows: <I>henry_smith:ABC123XYZ:101:66:henry_smith:/pis_mailuser:/bin/csh,</I> where henry_smith is the user's mailing address known to outside senders. <I>ABC123XYZ</I> is the user's password for logging onto the UNIX system. 101 is a unique user ID, assigned by the postman program. Under UNIX, a user ID could be as large as 32767 or 65534. The group's ID registered in the /etc./group file is 66, /pis_mailuser is the user's home directory used by the postman program, and /bin/csh is the login shell. For simplicity and to save disk space, group ID, home directory, login shell, and even password are shared by all PIS users. When the postman is alerted that a user has been denied access to PIS, the user's entry in the /etc/passwd will be deleted. <P>
If a user has an Internet address set in PIS, then the user's name and Internet address will be added into the UNIX alias file etc/aliases. The entry looks like: <I>henry_smith:pis_user, henry_smith@ccmail.bus.umich.edu,</I> where the first part of the line is the user's name registered in /etc/passwd. The third part is an Internet mailing address. This could be a number of forwarding addresses separated by commas. The second part, pis_user, is shared by all PIS users in the /etc/aliases file. This forces incoming mail not only to go into PIS but also to forward it to its Internet address. Depending on how sendmail searches the file /etc/aliases, if henry_smith was placed in the position of pis_user, then the search would go into an infinite loop. Ignoring this problem, I created another user in /etc/passwd, pis_user. This caused all incoming mail to be put into pis_user's mailbox instead of the mailboxes belonging to those users who have set their Internet addresses. The postman will open the pis_user's mailbox, find the name of sender and recipient, and put them into PIS properly. The system command <I>newaliases</I> should be called every time /etc/aliases is updated.<P>
<h3><a name="0054_0012">Reading Incoming Mail<a name="0054_0012"></h3><P>
Before running the postman program, I create a reading mail format shell-command file, /pis_mailuser/d that looks like this: <P>
<pre>p 1
d 1
q</pre><P>
The first line tells the Mail command to read the first piece of mail in a special mailbox, <I>d 1</I> deletes the piece after reading, and <I>q</I> exits from Mail command.<P>
When mail is delivered by sendmail, it is added to its recipient's mailbox (a text-format file) in the /usr/spool/mail directory. The postman program scans all mailboxes in the mail-spooling directory. To read one piece of mail for each user, the postman calls: <I>system(&quot;Mail --N &gt;/pis_mailuser/a --u henry_smith &lt;/pis_mailuser/d&quot;),</I> where --N tells the Mail command to read mail without the initial header summary; /pis_mailuser/a is a temporary file for Mail to put mail into and later for postman to read; the name following --u (henry_smith, in this case) is a user's name; and <I>d</I> is the format file for Mail to use. Before calling <I>system()</I>, /pis_mailuser/a<I> </I>must be deleted. After <I>system()</I>, postman calls another function to read /pis_mailuser/a and put it into PIS. This whole process is in two loops, and it continues until all mailboxes are empty. If a recipient has a forwarding address in /etc/aliases, then the sendmail program will forward the incoming mail to its Internet address and deliver it into the pis_user mailbox.<P>
<h3><a name="0054_0013">Sending Mail<a name="0054_0013"></h3><P>
In sending mail, the postman program reads the mail sender's name, recipient's address, and mail text from PIS and puts the mail itself into /pis_mailuser/a. It then changes the owner of /pis_mailuser/a to the sender's name, and root creates a file that changes the mode of /pis_mailuser/a to 0777 (executable). For root to send the mail using the original mail sender's name, the postman program creates a one-line shell-command file: <I>/pis_mailuser/m: Mail --s &quot;this is a test&quot; john_smith@um.umich.edu &lt;/pis_mailuser/a</I>, where &quot;this is a test&quot; is the mail's subject, john_smith@um.umich.edu is the destination address, and /pis_mailuser/a is the mail file. The owner and mode of /pis_mailuser/m must then be changed to the sender's name and 0777. Finally, postman issues the function call: <I>system(&quot;su --henry_smith c /pis_mailuser/m&quot;) </I>to post the mail.<P>
<h3><a name="0054_0014">The Postman Program <a name="0054_0014"></h3><P>
The postman program (see <a href="#0054_0015">Listing One</A> and <a href="#0054_0016">Listing Two</A>) was written in Sun C++ 2.1 under SunOS 4.1.3. <I>Letter</I> is a base class that includes five members: mail title, date, sender, recipient, and the name of the file in which mail text is stored. Two pure virtual functions <I>send() </I>and <I>read(),</I> are created to <I>send mail out</I> and <I>read mail in</I>. Users must create their own version of <I>send()</I> and <I>read()</I> based on different applications and environments. Class <I>myletter</I> is derived from <I>letter</I>. As mentioned earlier, if a user has a forwarding address set in the /etc/aliases file, then his or her mail will be put into pis_user's mailbox. When <I>myletter::read()</I> reads the pis_user mailbox, it may see mail for different users each time. To find the recipient's name, <I>read()</I> scans mail text, reads the line with the first substring &quot;To: &quot;, and calls <I>_getusrname()</I> to separate the user name from its mailing address for later use.<P>
A simple error-handling class, <I>Errors</I>, reports error messages when a critical error occurs and terminates the program. Class <I>dirf</I> is used for reading the mailbox in the mail-spool directory. Postman resides in the default directory. The member function <I>resetdir()</I> should be called before starting another search if <I>dirf</I> is declared as static or global.<P>
The main body of the program is in a loop that checks incoming mail and passes it to PIS, checks outgoing mail from PIS and sends it out to the sendmail, and goes to sleep for a certain period of time until the alarm wakes it up.<P>
<a href="19940057.htm">Figure 1</A>  Postman sits between the personal-information system and sendmail.
<P>
<h4><a name="0054_0015">Listing One <a name="0054_0015"></h4><pre>

//////////////////////////////////////////
//    ml.h - header file for postman    //
//////////////////////////////////////////

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/file.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/dir.h&gt;
#include &lt;signal.h&gt;

#include &lt;sysent.h&gt;
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#include &lt;stdarg.h&gt;

const int WAITTIME = 60;
const int MAXDAT   = 24;
const int MAXNAM   = 128;
const int MAXFNM   = 32;
const int MAXID    = 12;

const int FRSTUSRID = 200; // PIS users' ID start from 200

const char* A_FILE = &quot;a&quot;;
const char* M_FILE = &quot;m&quot;;
const char* D_FILE = &quot;d&quot;;

#define MAILDIR  &quot;/usr/spool/mail&quot;
#define ERRLOG   &quot;/tmp/postman.err&quot;
#define HOSTADDR &quot;@my_pis.my_corp.com&quot;

class Errors {
   enum {bsize = 256};
   char fname[bsize];          // error log file
 public:
   Errors(char *fn) {strcpy(fname, fn);};
   void seterr(const char *,...);
};
class letter {
 public:
   char title[MAXNAM];
   char date[MAXDAT];
   char sender[MAXNAM];
   char recipient[MAXNAM];
   char textf[MAXFNM];
 public:
   virtual int send() = 0;
   virtual int read(char *) = 0;
};
class myletter : public letter {
   char *hostaddr;
   char usrdir[MAXFNM];
   int  usrid;
   int  grpid;
 public:
   int  letterId;
 public:
   myletter(char *hst) : letterId(-1), hostaddr(hst) {
      usrdir[0]=0;
   }
   int  isinPIS(char *);
   int  send();
   int  read(char *);
};
class dirf {
   DIR  *dirp;
   char *dirname;
   struct direct *ds;
 public:
   dirf (char *drnm=&quot;.&quot;) { dirname=drnm; dirp=NULL;}
   ~dirf() {dirp=NULL;}
   void resetdir(char *drnm=&quot;.&quot;) {
      if (dirp)
         closedir(dirp);
      dirp=NULL;
      dirname=drnm;
   }
   int  rddir(char *);
};
extern Errors _syserr;
extern &quot;C&quot; {
   int  _getusrname(char *, char *, char *);
   void check_inmail();
   void check_outmail();
   int  _read_outmail(myletter *);
   void _readmail(char *);
   void wakeup();
   void _mail2note(myletter *);
}


</pre>
<h4><a name="0054_0016">Listing Two<a name="0054_0016"></h4><pre>

//////////////////////////////////////////
//              postman.c               //
//////////////////////////////////////////

#include &quot;ml.h&quot;
//---------------------------------------//
// dirf::rddir() - class member function //
//---------------------------------------//
int dirf::rddir(char *fname)
{
   if (dirp == NULL) {
      if ((dirp = opendir(dirname)) == NULL)
         _syserr.seterr(&quot;open %s failed, errno = %d\n&quot;, dirname, errno);
   }
   errno = 0;
   if ((ds = readdir(dirp)) == NULL) {
      if (errno) {
         _syserr.seterr(&quot;readdir failed, errno = %d\n&quot;, errno);
      }
      return 0;
   }
   strcpy(fname, ds-&gt;d_name);
   return 1;
}
//------------------------------------------//
// Errors::seterr() - class member function //
//------------------------------------------//
void Errors::seterr(const char *format_str,...)
{
   FILE *fp;
   va_list arg_ptr;

   va_start(arg_ptr, format_str);
   if ((fp=fopen(fname,&quot;w&quot;))!=NULL) {
      vfprintf(fp, format_str, arg_ptr);
      fclose(fp);
   }
   va_end(arg_ptr);
   exit (-1);
}
//--------------------------------------------------------------------//
// _find_usrid() - find a user's login I.D. in the  /etc/passwd file. //
// -------------------------------------------------------------------//
int myletter::isinPIS(char *usrnam)
{
   struct passwd *p;
   
   setpwent();
   while (p=getpwent()) {
      if (!strcmp(usrnam,p-&gt;pw_name)) {
         if (p-&gt;pw_uid &lt; FRSTUSRID)
            return 0;
         strcpy (usrdir, p-&gt;pw_dir);
         usrid = p-&gt;pw_uid;
         grpid = p-&gt;pw_gid;
         return 1;
      }
   }
   endpwent();
   return 0;
}
//------------------------------------------//
// myletter::send() - class member function //
//------------------------------------------//
int  myletter::send()
{
   char mfile[256], buf[256];
   FILE *fp;
   int  ret, forward=0;

   if (!isinPIS(sender)) {
      _syserr.seterr(&quot;send:isinPIS:[%s]&quot;,sender);
   }
   sprintf(mfile,&quot;%s/%s&quot;, usrdir, M_FILE);
   if ((fp=fopen(mfile,&quot;w&quot;))== NULL) {
      return -1;
   }
   fprintf(fp,
      &quot;Mail -s \&quot;%s\&quot; %s &lt;%s\n&quot;, title, recipient, textf),
   fclose(fp);

   if (chmod(mfile, 0777))
      _syserr.seterr(&quot;send:chmod:%s&quot;,mfile);
   if (chmod(textf, 0777))
      _syserr.seterr(&quot;send:chmod:%s&quot;,textf);
   if (chown(mfile, usrid, grpid))
      _syserr.seterr(&quot;send:chown:%s&quot;,mfile);
   if (chown(textf, usrid, grpid))
      _syserr.seterr(&quot;send:chown:%s&quot;,textf);

   sprintf(buf,&quot;su - %s -c %s&quot;, sender, mfile);
   ret=system(buf); 
   if (ret)
      _syserr.seterr(&quot;send:system:%s(%d)\n&quot;,buf,ret);

   return 1;
}
//------------------------------------------//
// myletter::read() - class member function //
//------------------------------------------//
int  myletter::read(char *usr)
{
   short frnm=0, tonm=0, subj=0, datm=0, ret;
   char buf[256];
   ifstream  inf;

   sprintf(buf, &quot;%s/%s&quot;, usrdir, A_FILE);
   unlink(buf);
   sprintf(buf,&quot;Mail -N &gt;%s/%s -u %s &lt;%s/%s&quot;,
               usrdir, A_FILE, usr, usrdir, D_FILE);
   ret = system(buf);
   if (ret) {
      _syserr.seterr(&quot;read:system:%s:ret=%d\n&quot;,buf, ret);
   }
   sprintf(textf, &quot;%s/%s&quot;, usrdir, A_FILE);
   inf.open(textf);
   while (inf.getline(buf,256)) {
      if (!datm &amp;&amp; !strncmp(buf,&quot;Date:&quot;,5)){
         strcpy(date,(char *)&amp;(buf[5]));
         datm++;
      } else if (!frnm &amp;&amp; !strncmp(buf,&quot;From&quot;,4)) {
         strcpy(sender,strtok((char *)&amp;(buf[5]),&quot; &quot;));
         frnm=1;
      } else if (!tonm &amp;&amp; !strncmp(buf,&quot;To: &quot;,4)) {
         if (strstr(buf,usr)) {
            // mail is in the user's mailbox //
            strcpy(recipient, usr);
         } else {
            // mail is in the pis_user mailbox //
            if (!_getusrname((char *)&amp;(buf[4]),
                              recipient, hostaddr))
               _syserr.seterr(&quot;_getusrname:[%s]\n&quot;,buf);
         }
         tonm++;
      } else if (!subj &amp;&amp; !strncmp(buf,&quot;Subject: &quot;,9)) {
         strcpy(title, (char *)&amp;(buf[9]));
         subj++;
      } else if (datm &amp;&amp; frnm &amp;&amp; tonm &amp;&amp; datm &amp;&amp;
                 !strncmp(buf,&quot;Status:&quot;,7)) {
         break;
      }
   }
   inf.close();
   return 1;
}
//-------------------------------------//
// wakeup() - signal handling function //
//-------------------------------------//
void wakeup()
{
   alarm(0);
   signal(SIGALRM, (SIG_PF)wakeup);
}
Errors _syserr(ERRLOG);
void main()
{
   signal(SIGALRM, (SIG_PF)wakeup);
   alarm(1);

   do {
      pause();

      check_inmail();

      check_outmail();

      alarm(WAITTIME);
   } while (1);
}
//-------------------------------------------------------//
// check_outmail() - check outgoing mail and send it out //
//-------------------------------------------------------//
void check_outmail()
{
   myletter ml(HOSTADDR);
   do {
      if (!_read_outmail(&amp;ml)) {
         break;
      }
      ml.send();
   } while (1);
}
//---------------------------------------------------------//
// check_inmail() - check incoming mail and pass it to PIS //
//---------------------------------------------------------//
void check_inmail()
{
   char fname[256];
   dirf df(MAILDIR);

   while (df.rddir(fname)) {
      if (strcmp(fname, &quot;.&quot;) &amp;&amp; strcmp(fname, &quot;..&quot;) &amp;&amp;
          strcmp(fname,&quot;root&quot;)) {
         _readmail(fname);
      }
   }
}
//------------------------------------------------------------------//
// _readmail() - read title, sender, recipient, and date from mail. //
//------------------------------------------------------------------//
void _readmail(char *usr)
{
   char     tmp[256];
   myletter ml(HOSTADDR);
   int      ret;

   if (!ml.isinPIS(usr))
      return;

   do {
      ml.read(usr);

      _mail2note(&amp;ml);

      sprintf(tmp,&quot;%s/%s&quot;, MAILDIR, usr);
      ret= access(tmp, F_OK);
   } while (!ret);
}
//-------------------------------------------------------------//
// _getusrname() - find a user's name from a recipient string. //
//-------------------------------------------------------------//
int  _getusrname(char *s, char *usr, char *hst)
{
   char tmp[256], *p;

   usr[0]=0;
   strcpy(tmp, s);
   if (strchr(s,'@')==NULL) {
      p = strtok(tmp,&quot; \&quot;&lt;&gt;&quot;);
      p = strtok(NULL,&quot; \&quot;&lt;&gt;&quot;);
      if (p == NULL)
         return 0;
      strcpy(usr,p);
      return (strlen(usr));
   }
   p = strstr(tmp,hst);
   int i = strlen(s)-strlen(p);
   tmp[i]=0;
   for (i=strlen(tmp)-1;i&gt;=0;i--) {
      if (strchr(&quot; &lt;,[\&quot;&quot;,tmp[i]))
         break;
   }
   strcpy(usr,(char *)&amp;(tmp[i+1]));
   return (strlen(usr));
}
//---------------------------------------//
// _read_outmail() - read mail from PIS. //
//---------------------------------------//
int  _read_outmail(myletter *ml)
{
   strcpy(ml-&gt;textf,&quot;&quot;);
   //
   // user application function getone_inpis()
   // assigns mail title, date, sender, recipient,
   // and text file name to ml.
   //
   // if(getone_inpis(ml-&gt;title, ml-&gt;date, ml-&gt;sender,
   //                 ml-&gt;recipient, ml-&gt;textf)) {
   //    return 1;
   // else
   //    return 0;
   //
   return 0;
}
//---------------------------------//
// _mail2note() - pass mail to PIS //
//---------------------------------//
int  _getletterId(void)
{
   static i=0;

   return (++i);
}
void _mail2note(myletter *ml)
{
   ml-&gt;letterId = _getletterId();
   //
   // pass2pis(ml-&gt;title, ml-&gt;date,
   //          ml-&gt;sender, ml-&gt;recipient, ml-&gt;textf);
   //
}
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
