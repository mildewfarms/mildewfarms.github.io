<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>JUL94: PROGRAMMING PARADIGMS</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>PROGRAMMING PARADIGMS<a name="006d_0016"></h1><P>
<h2><a name="006d_0014"><a name="006d_0000">Mushroom Programming, the Sequel</h2><P>
<h3>Michael Swaine</h3><P>
<a name="006d_0015"><a name="006d_0000">A generation or two ago, schoolmarms with their hair in buns taught that good handwriting really mattered. Who knew then that these teachers were anticipating the arrival of the Newton MessagePad?<P>
Hmm. That's not going to work. I can blame the MessagePad's unsatisfactory handwriting recognition on bad writing skills, but then how do I alibi its year-long lack of cellular communications or its sluggish sales?<P>
My view is that Newton is not really about handwriting or wireless communication and that ultimately the sales of Newton devices will be out of Apple's hands, as other hardware manufacturers build Newton devices.<P>
Newton is just not the same kind of platform as a PC, and it isn't subject to the same old marketing homilies. In particular, I don't think that the size of the installed base matters very much. When the hardware platform costs less than a lot of PC software packages, I think it's clear that a different model applies. In my view, Newton is mainly about vertical applications of certain types, and the right vertical application can be sold to its target market directly; the hardware can be bundled with the application.<P>
We used to talk about VisiCalc or Lotus 1-2-3 selling computers; in the case of Newton I think that the idea of the software selling the hardware may become the norm.<P>
Anyway, that's my theory. Thus this non-handwriting-dependent, non-communications-oriented, vertical-application project. It's more an elucidation of my theory than a demonstration of my programming skills. <P>
<h3><a name="006d_0017">Our Friend, the Fungus<a name="006d_0017"></h3><P>
Last month, I presented part of a Newton-Script programming project I'm working on: a field guide to identifying mushrooms. I should emphasize two terms: &quot;project&quot; and &quot;field guide.&quot; This endeavor is for my own education; definite identification of mushrooms can require a microscope, while indefinite identification can be dangerous, to say the least. This program (see <a href="1994006f.htm">Figure 1</A>) is intended, at most, as a guide to deciding which mushrooms to throw in the basket to take back to the house for later, more accurate identification. That, anyway, is the disclaimer I'd use if it were a real product.<P>
What I supplied last month was the user interface. That column was really an exercise in using the Newton Toolkit (NTK), since a whole slew of user-interface templates are built into the ROM, and the NTK lets you build a UI by dragging these around on screen and setting their attributes via menu selections. If you think that sounds like using custom controls in Visual Basic, you've got the idea, although the NextStep environment is probably an even better analogy.<P>
I did do some coding in building the interface, but not much. This month's effort was much more of an exercise in NewtonScript programming, since I wrote the program's internals, for which there are no handy templates, in ROM.<P>
Last month, in a flight of rhetoric, I referred to these internals as an &quot;expert system.&quot; What I've written is really just a database and a matching routine, but it arguably follows the basic structure of an expert system as laid down in <I>The Handbook of Artificial Intelligence, Volume IV</I> by Avram Barr, Paul R. Cohen, and Edward A. Feigenbaum (Addison-Wesley, 1989). That is, it has a knowledge base of facts about the domain of knowledge and a relatively simple program, called an &quot;inference engine,&quot; for reasoning about that knowledge base.<P>
And in fact, I started to design a somewhat less-minimal expert system, only to be redirected in my efforts by a principle of object-oriented design. Some of you may be interested in that process, so I'm reporting it here.<P>
Many of you, though, will find the programming insights obvious and the design trivial. They are, and it is, but perhaps my efforts will demonstrate some interesting features of this fascinating new object-oriented language.<P>
<h3><a name="006d_0018">There are a Lot of Mushrooms<a name="006d_0018"></h3><P>
The so-called &quot;knowledge base&quot; of this application is intended to hold all the knowledge necessary for identifying mushrooms on the basis of their attributes. In a conventional expert system, this knowledge might be stored as rules, as in <a href="#006d_001b">Example 1</A>.<P>
Last month's user interface lets the user enter attributes of the found mushroom (the exemplar) such as color (white, buff, grey, yellow, brown, black, and so on); size (in centimeters); gill presence, appearance, and mode of attachment to the stem; and five other attributes.<P>
This list is way too short. There are thousands of mushroom species. To tell one species from another with any reasonable certainty might require knowledge of attributes such as: <I>cap_presence</I>, <I>cap_color</I>, <I>cap_color_change</I>, <I>cap_surface</I>, <I>cap_shape</I>, <I>cap_size</I>, <I>cap_texture</I>, plus a couple dozen others; the stem, flesh, and gills; where the mushroom was found (what part of the country, presence of trees nearby, whether the mushroom was growing on the ground or on wood); and the time of year.<P>
In addition to the many species, attributes, and possible values (color, for example), other complications afflict this data. First, some attributes are contingent on others: Mushrooms that lack gills have no meaningful gill-appearance or gill-attachment attribute values, for example.<P>
Then there is the question of the appropriate level at which to make the identification. Identifying the species may not be precise enough, as some species (<I>Boletus Edulis</I>, for example) have distinct varieties. You might want to identify the variety, or you might just want to use certain information to shorten your search by eliminating, for example, an East Coast USA variety if you're on the West Coast.<P>
But species can also be too precise an identification. Out in the field, you might be satisfied to know simply that the mushroom is the genus boletus; species identification can be postponed until you get home.<P>
All these considerations affect the structure of the knowledge base, of course, but they also affect the inference engine. In expert systems, the inference engine needs to crank through the knowledge base efficiently.<P>
<h3><a name="006d_0019">What do You Mean by Identify?<a name="006d_0019"></h3><P>
The scientific name of a mushroom is one kind of identification, but there are others. It might be enough to know if it is poisonous, good to eat, or hallucinogenic.<P>
Knowledge bases are usually structured to facilitate answering useful questions. Other criteria that could influence the knowledge-base structure include:<P>
<UL>
<li>The desire to identify the most-common mushrooms easily and quickly. This would argue for emphasizing those attributes most useful for distinguishing these common mushrooms, rather than generally distinctive or very salient attributes (like size and color).</li>
<li>The desire to make things natural and easy for the user. The user will recognize and enter salient attributes like color whether or not they happen to be the most useful attributes for identifying the current mushroom.</li>
</UL>
As it happens, I didn't take any of these things into account in building the knowledge base. I just implemented the scientific hierarchy of variety, species, genus, and the like, and let that dictate the order in which the knowledge base was accessed. I did this for two reasons:<P>
<UL>
<li>&quot;The expert system is a_model of the expert's model of the domain,&quot; according to Bruce Buchanan in <I>The Handbook of AI</I>. The real experts are the botanists who sort these fungi into Linnean categories.</li>
<li>&quot;A good plan is to study the physical system you are trying to model and create the classes of objects it has,&quot; is Actor author Chuck Duff's advice on deciding what objects to create in an object-oriented system.</li>
</UL>
Well, the classes that mushrooms have, in the model of reality that botanists use, are: kingdom (fungi), division, subdivision, class, order (agaricales), family (boletacaea), genus (boletus), species (edulis).<P>
This structure submits willingly to object-oriented exploitation. Each rule is simply a description of a species (or variety or genus or whatever) of mushroom in terms of defining attributes. Inheritance comes into play naturally: Species inherit from genus, and so on. Family boletacaea is defined by the lack of gills, so the <I>gill_type</I> slot in all its genera and species inherit this value unless they explicitly override it.<P>
This structure imposes a hierarchy on the search, so the inference engine doesn't have to examine the entire knowledge base and can be much more efficient. Another nice feature is that the inference engine could be designed to stop at the level of family or genus or keep cranking down to species or variety, although I haven't implemented this yet.<P>
<h3><a name="006d_001a">The Knowledge Base and the Inference Engine<a name="006d_001a"></h3><P>
The knowledge base consists of frames, each defining a mushroom species, or genus, or order, or whatever. The inference engine always starts with the same frame, corresponding to the highest level in this hierarchy of fungi; see <a href="#006d_001c">Example 2(a)</A>. <P>
It compares the values of this frame's slots with the values of corresponding slots in the frame named <I>Observations</I>, which gets built as the user enters data about the mushroom to be identified; see <a href="#006d_001c">Example 2(b)</A>. In this version of the program, only one slot in the agaricales frame, namely <I>stem_position</I>, has its value compared with that of the corresponding slot in <I>Observations</I>. If there is a match, the inference engine then recurses over the children of this frame. The single quote in front of the names in the array <I>children</I> indicates that these are symbols, which is what they need to be to appear as names of frames; see <a href="#006d_001c">Example 2(c)</A>.<P>
The inference engine then does its comparison with each of these children. If it finds a match, it continues down the tree further, examining that frame's children. The frame above is a child of agaricales, and it has children suillus, boletus, and so on. Each of these children is a genus, and each genus has child frames that represent species; that's where the recursion stops and an identification is returned. As <a href="#006d_001c">Example 2(d)</A> shows, the inference engine hands back to the user the genus, species, and possibly other information picked up along the way (poisonous, delicious, attracts maggots, or whatever). The key to the inference engine is its matching algorithm. I may seem to be glossing over its detail here, but I'm not: As currently implemented, it really does no more than what I've described. Well, it does shift gears when looking at the size slot, using the size value to create a range and checking to see if the observation's size value is in that range. But there's a serious flaw in the model I've used.<P>
Although the inheritance mechanism in NewtonScript does allow a child to inherit from a parent (for example, all frames inherit the slot <I>stem_position</I> with value &quot;central&quot; from frame agaricales), and it allows the child to override that value (you could give boletus a <I>stem_position</I> of &quot;eccentric&quot; if you wished), the overriding does no good, because this inference engine will never compare an eccentric-stemmed sample with the frame for boletus. It will have bailed out with the very first comparison.<P>
The problem is that nature is not neat. Agaricales consists of mushrooms that generally, but not always, have centrally placed stems, while on the other hand, always have pores rather than gills. Some of the characteristics actually do allow cutting off entire branches of the search tree, while others merely indicate which branches are less promising than others.<P>
What I apparently need are two things: 1. a flag attached to each slot indicating whether it is a required, typical, rare, or prohibited characteristic for this particular species, genus, and the like; and 2. a matching algorithm that uses this information to manage the search tree, cutting off a branch whenever a required characteristic is missing or a prohibited one is found, and reordering branches to follow promising ones first whenever typical or rare characteristics are found or missed. I'm working on it.<P>
That's probably enough of this. My real point was to give an example of what I consider an appropriate Newton application: a vertical, handwriting-independent application that requires transportability and gives quick answers.<P>
How many people will be asking the questions that my program is prepared to answer is an issue, of course, and uncertainty about the size of the market does give me pause. There is already at least one mushroom-identification program on the market, though. It runs on, er, um, the Amiga.<P>
<a href="19940070.htm">Figure 1</A>  The mushroom-identification program in action.
<h4><a name="006d_001b"><B>Example 1:</B> Storing knowledge as rules.<a name="006d_001b"></h4><P>
<pre>if stem_position = &quot;central&quot;
and gill_type = &quot;absent&quot;
then return &quot;boletus&quot;</pre><P>
<h4><a name="006d_001c"><B>Example 2:</B> (a) The knowledge base starts at the highest level; (b) comparing the values of this frame's slots with the values of corresponding slots in the frame; (c) the single quote in front of the names in the array children indicates that these are symbols; (d) the inference engine hands back to the user the genus, species, and other information.<a name="006d_001c"></h4><P>
<pre>(a)
  agaricales : {
  // Agaricales is an order of fungi,
  // usually characterized by a centrally placed stem.
  // It contains several families of fungi.
  level:&quot;order&quot;,
  children:['boletacaea,...],
  stem_position:&quot;central&quot;}
(b)
  Observations : {
  color : &quot;brown&quot;,
  size : &quot;15&quot;,
  cap_shape : &quot;&quot;,
  cap_surface : &quot;dry&quot;,
  gill_type : &quot;absent&quot;,
  gill_attachment : &quot;&quot;,
  stem_position : &quot;central&quot;,
  stem_surface : &quot;smooth&quot;,
  veils : &quot;&quot;}
(c)
  boletacaea : {
  // Boletacaea is a family of fungi,
  // characterized by pores rather than gills.
  // It contains several genera of fungi.
  level:&quot;family&quot;,
  children:
    ['suillus, 'boletus, 'boletellus, 'gyroporus, 'pulveroboletus],
  gill_type:&quot;absent&quot;}
(d)
  suillus : {
  // Suillus is a genus of fungi,
  // typically characterized by a viscid cap surface.
  // It contains several species of fungi.
  level:&quot;genus&quot;,
  children:[],
  cap_surface:&quot;viscid&quot;}
boletus : {
  // Boletus is a genus of fungi,
  // typically characterized by a dry cap surface.
  // It contains several species of fungi.
  level:&quot;genus&quot;,
  children:['flaviporus,'satanas,'pulcherrimus,'edulis],
  cap_surface:&quot;dry&quot;}
flaviporus : {
  // Flaviporus is a species of fungi,
  // usually yellow with a smooth stem.
  level:&quot;species&quot;,
  children:[],
  color:&quot;yellow&quot;,
  stem_surface:&quot;smooth&quot;}
edulis : {
  // Edulis is a species of fungi,
  // usually large and brown, with a scaly stem.
  level:&quot;species&quot;,
  children:[],
  color:&quot;brown&quot;,
  size:15,
  stem_surface:&quot;scaly&quot;}
</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
