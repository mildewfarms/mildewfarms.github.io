<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>AUG94: Data Attribute Notation in C++</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Data Attribute Notation in C++<a name="0097_002d"></h1><P>
<h2><a name="0097_002b"><a name="0097_0000">A coding style that emphasizes data abstraction</h2><P>
<h3>Reginald B. Charney </h3><P>
<p><i><a name="0097_002c"><a name="0097_0000">Reg is president of Charney &amp; Day and a voting member of ANSI's X3J16 Committee on the C++ Language. He can be reached on CompuServe at 70272,3427.</i></p><hr><P>
Data Attribute Notation (DAN) is an object-oriented coding style that emphasizes data abstraction. DAN closely relates the abstract concepts defined in a project's analysis and design stages to the implementation stage. Thus, the differences across these three stages are minimized. The benefits of this include: better comprehension, higher productivity through clearer communications, and fewer errors as a result of fewer misunderstandings. DAN also provides better data abstraction, stronger type checking, greater clarity, and fewer errors than traditional programming styles. <P>
Most C++ classes are composed of one or more components. As such, a class can be thought of as a collection of components. By implication, a derived class then is also a collection of components. Normally, components have a type and a unique name. These names usually reflect an attribute or property of a class. For example, a product has an id, a description, a cost price, and a list price. In <a href="#0097_0033">Listing One</A> , <I>pid</I>, <I>desc</I>, <I>cost_price</I>, and <I>list_price</I> are attributes of a product. If another component were added to the class, it would form another attribute for the abstract entity called a &quot;product.&quot; For instance, a quantity attribute could be added to the class <I>Product</I>.<P>
At this point, there are no surprises: A class is defined in terms of its components, or &quot;attributes.&quot;<P>
<h3><a name="0097_002e">Attribute Classes<a name="0097_002e"></h3><P>
An <I>attribute class </I>is a class encapsulating a single logical entity, usually represented by one data member. Its interface is limited to a few operations that make logical sense for the logical entity in the class. Thus, an attribute class that defines product ids can ensure that only valid codes are created and only valid operations can be performed on them.<P>
Constructors, including copy and conversion constructors, are used to create instances consistent with the meaning of the data. Conversion operators are also needed to allow instances of attribute classes to be used with non-user-defined data types. To read or write instances of attribute classes, input and output operations need to be defined. There may also be other member functions for attribute classes, depending on their requirements. Using the example of the product code, you can define an attribute class called <I>Pid</I>; see <a href="#0097_0034">Listing Two</A> .<P>
Note that now, only certain defined operations are possible on a product id. Also, the actual implementation of a product code is hidden inside the class and its member functions. Thus, the <I>Product </I>class can be defined in terms of attribute classes (as in <a href="#0097_0035">Listing Three</A>), where the member names play a less important role in attribute classes than they would in normal classes that use normal coding practices. As such, the names in attribute classes tend to be shorter than normal.<B> </B>Since the elements of the class <I>Product</I> are private, <I>Product</I> users can treat the implementation of the class as a black box, allowing the implementation of any attribute class to change. Thus, the class <I>Product</I> can be considered a collection of attributes, and this leads to the question of how to manipulate the value of <I>Product</I> attributes.<P>
<h3><a name="0097_002f">Changing Attribute Class Values<a name="0097_002f"></h3><P>
An assignment operator is used to change values. However, it does not work well for assigning values to implicit members of the class <I>Product</I>. For example, in <a href="#0097_0036">Listing Four</A> , to what component is the value 7 assigned?<P>
Defining assignment operators for individual attributes does not work well either, since it requires both that the user know the names of the components of the <I>Product</I> class and that the components be public, a clear violation of the principle of data hiding. <a href="#0097_0037">Listing Five</A> is a poor solution to this problem. <a href="#0097_0038">Listing Six</A> is the classic C++ method for changing attribute values. It requires that a user learn the names and prototypes for a number of member functions that can be used to get and set attribute values. An approach that uses data attributes and the black box, however, avoids the problems associated with both Listings <a href="#0097_0038">Six</A> and <a href="#0097_0039">Seven</A>.<P>
DAN treats a given class as being defined by its attribute classes. Also, all attributes are unique in a given collection. In the <I>Product</I> example, both cost and list prices started out as type <I>double</I>, but ended up being represented by the unique attribute classes <I>Cost</I> and <I>List</I>. <P>
There is a final piece of groundwork that needs to be laid; it is the analogy to the I/O streams classes. Most programmers use these classes without knowing how they are implemented. However, you can change the contents of a stream by using friend functions and overloading operator functions: for example, &lt;&lt; for inserting data, and &gt;&gt; for extracting data. Thus, the stream classes are treated as black boxes that are modified using the <I>insert </I>and <I>extract </I>operators. Overloading the &lt;&lt; and &gt;&gt; operators also allows streams to appear in expressions and be extensible.<P>
DAN uses the <I>insert </I>and <I>extract </I>operators for the same reasons that I/O streams do. Other operators could have been used, and originally were, but the correspondence between I/O streams as black boxes and collection classes as black boxes was too good to ignore. Therefore, DAN uses the <I>insert </I>and <I>extract </I>operators to get and set data in collection classes. Single components can also be extracted from a collection by using the attribute classes as conversion operators. <a href="#0097_0039">Listing Seven</A> illustrates this.<P>
<h3><a name="0097_0030">Relationships<a name="0097_0030"></h3><P>
While attributes define the properties of a class, they also define relationships within a class. For example, all instances of the <I>Product</I> class must have a product id and a description. Attributes can define relationships between different classes. For example, you can define an invoice line-item class, called <I>LineItem</I>; see <a href="#0097_003a">Listing Eight</A> .<P>
A relationship between an invoice line item and a product is formed by the product id. A product is part of an invoice line item if both have the same value for their product id. This relationship is expressed in <a href="#0097_003b">Listing Nine</A> . At execution time, the <I>isIn</I> function returns nonzero if the supplied product is in the given invoice line item. Otherwise, it returns zero. This <I>isIn</I> function can be defined outside either class <I>Product</I> or class <I>LineItem</I>. It depends on the linking or <I>key</I> attribute. In this case, the key attribute is <I>Pid</I>. <P>
<h3><a name="0097_0031">Static and Dynamic Relationships<a name="0097_0031"></h3><P>
If a relationship exists between two or more classes, then, at a minimum, there must exist a function to verify the relationship between the classes and use one or more attributes that the classes have in common. In the <I>isIn</I> example, the classes <I>Product</I> and <I>LineItem</I> have the <I>Pid</I> attribute in common, and it is valid C++ to write the function <I>isIn</I>.<P>
During execution, if a given <I>LineItem Pid</I> value matches the <I>Pid</I> attribute value of a <I>Product</I>, then the corresponding invoice line item contains the product.<P>
A static relationship always exists if classes have common attributes. A dynamic relationship exists during execution. Static relationships can be checked at compile time, while dynamic relationships need to be evaluated at run time.<P>
<h3><a name="0097_0032">Conclusion<a name="0097_0032"></h3><P>
There is a trade-off between classic C++ coding methods and DAN: A program using DAN has more classes but does not pollute the namespace as badly. That is, DAN overloads attribute names, thus avoiding the need for access functions like <I>getX()</I> and <I>setX()</I>, where <I>X</I> is some attribute name.<P>
Using DAN to define a problem is more declarative in nature than most other C++ coding styles, yet, it leads more directly to an implementation, since you compile the specifications that you wrote. Because the step from specification to implementation is very short, the chance of errors and misunderstandings is smaller.<P>
<P>
<h4><a name="0097_0033">Listing One <a name="0097_0033"></h4><pre>
// classic C++ style

class Product {
  long pid;
  char desc[30];
  double cost_price;
  double list_price;
};


</pre>
<h4><a name="0097_0034">Listing Two<a name="0097_0034"></h4><pre>

class Pid {
  long p;
public:
  Pid(long pp = 0) { p = pp; }
  Pid(const Pid&amp; pp) { p = pp.p; }
  Pid operator long() { return p; }
  Pid operator +(const long pp)
     { return Pid(p+pp); }
  Pid operator -(const long pp)
     { return Pid(p-pp); }
  friend ostream&amp; operator &lt;&lt;
       (ostream&amp; os, Pid&amp; pp)
     { return os &lt;&lt; pp.p; }
  friend istream&amp; operator &gt;&gt;
       (istream&amp; is, Pid&amp; pp)
     { return is &gt;&gt; pp.p; }
};


</pre>
<h4><a name="0097_0035">Listing Three<a name="0097_0035"></h4><pre>

class Product {
  Pid  p; // product code
  Desc d; // description
  Cost c; // cost price
  List l; // list price
public:
  Product(const Pid&amp; pp,
          const Desc&amp; dd,
          const Cost&amp; cc,
          const List&amp; ll)
     :p(pp), d(dd), c(cc), l(ll) { }
  ~Product() { }
  friend ostream&amp; operator &lt;&lt;
     (ostream&amp; os, Product&amp; p);
  friend istream&amp; operator &gt;&gt;
     (istream&amp; is, Product&amp; p);
}; 


</pre>
<h4><a name="0097_0036">Listing Four<a name="0097_0036"></h4><pre>

Product p;  // product instance
p = 7;    // assign 7 to what?



</pre>
<h4><a name="0097_0037">Listing Five<a name="0097_0037"></h4><pre>

// poor solution - do not use
class Product
{
public:
  Pid p;  // bad practise
  // ... other members
}
      Product aP;
      aP.p = 7;


</pre>
<h4><a name="0097_0038">Listing Six<a name="0097_0038"></h4><pre>

// classic C++ coding style

class Product {
  Pid  p;
  Desc d;
  Cost c;
  List l;
public:
  Cost getCost() const
      { return c; }
  void setCost(const Cost&amp; cc)
     { c = cc; }
  // ... other members
};
  Product aP;
  Cost aCost;
  aCost = aP.getCost();
  aP.setCost(aCost);


</pre>
<h4><a name="0097_0039">Listing Seven<a name="0097_0039"></h4><pre>

// Data Attribute Notation style
class Product
{
  Pid  p; // product code
  Desc d; // description
  Cost c; // cost price
  List l; // list price
public:
  // insert &amp; extract operators
  Product&amp; operator &lt;&lt;(Pid&amp; pp)      { p = pp; return *this; }
  Product&amp; operator &lt;&lt;(Desc&amp; dd)
     { d = dd; return *this; }
  Product&amp; operator &lt;&lt;(Cost&amp; cc)
     { c = cc; return *this; }
  Product&amp; operator &lt;&lt;(List&amp; ll)
     { l = ll; return *this; }
  Product&amp; operator &gt;&gt;(Pid&amp; pp)
     { p = pp; return *this; }
  Product&amp; operator &gt;&gt;(Desc&amp; dd)
     { dd = d; return *this; }
  Product&amp; operator &gt;&gt;(Cost&amp; cc)
     { cc = c; return *this; }
  Product&amp; operator &gt;&gt;(List&amp; ll)
     { ll = l; return *this; }
  // attribute conversion ops
  operator Pid()  const  
     { return p; }
  operator Desc() const
     { return d; }
  operator Cost() const
     { return c; }
  operator List() const
     { return l; }
  // constructors/destructor
  Product() { }
  Product(  const Pid&amp; pp, 
            const Desc&amp; dd,
            const Cost&amp; cc, 
            const List&amp; ll)
  : p(pp),d(dd),c(cc),l(ll) { }
  ~Product() { }
  // I/O stream friend functions
  friend ostream&amp; operator &lt;&lt;
     (ostream&amp; os, Product&amp; pp);
  friend istream&amp; operator &gt;&gt;
     (istream&amp; is, Product&amp; pp);
};
ostream&amp; operator &lt;&lt;
  (ostream&amp; os, Product&amp; prod)
{
  os &lt;&lt; &quot; Prod: &quot; &lt;&lt; prod.p
     &lt;&lt; &quot; Desc: &quot; &lt;&lt; prod.d
     &lt;&lt; &quot; Cost: &quot; &lt;&lt; prod.c
     &lt;&lt; &quot; List: &quot; &lt;&lt; prod.l
  return os;
}
istream&amp; operator &gt;&gt;
  (istream&amp; is, Product&amp; prod)
{
  is &gt;&gt; prod.p &gt;&gt; prod.d
     &gt;&gt; prod.c &gt;&gt; prod.l;
  return is;
}
int main() {
  Product prod;
  Pid pid(184389);
  Desc desc(&quot;Angle Bracket&quot;);
  Cost cost;
  // using insert/extract ops
  prod &lt;&lt; pid &lt;&lt; desc;
  prod &gt;&gt; desc &gt;&gt; pid;
  prod &lt;&lt; Pid(34562);
  prod &gt;&gt; cost;
  // using conversion operators
  cout &lt;&lt; &quot; Prod: &quot; &lt;&lt;Pid(prod)
       &lt;&lt; &quot; Desc: &quot; &lt;&lt;Desc(prod)
       &lt;&lt; &quot; Cost: &quot; &lt;&lt;Cost(prod)
       &lt;&lt; &quot; List: &quot; &lt;&lt;List(prod)
       &lt;&lt; endl;
  // using stream I/O
  cin &gt;&gt; prod;
  cout &lt;&lt; prod;
  return 0;
}


</pre>
<h4><a name="0097_003a">Listing Eight<a name="0097_003a"></h4><pre>

class LineItem {
  Iid  i;   // invoice id
  Pid  p;   // product id
  Quant q;  // quantity
public:
  // ... other members
};


</pre>
<h4><a name="0097_003b">Listing Nine<a name="0097_003b"></h4><pre>

Bool isIn(Product&amp; p,LineItem&amp; i)
{
  return Pid(p)==Pid(i);
} 
</pre><HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
