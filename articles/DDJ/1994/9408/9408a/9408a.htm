<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>AUG94: Numerical C and DSP</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>Numerical C and DSP<a name="0084_0023"></h1><P>

<h2><a name="0084_0021"><a name="0084_0000">Numeric extensions for C programmers</h2><P>

<h3>Kevin Leary</h3><P>

<P>
<i><a name="0084_0022"><a name="0084_0000">Kevin is systems-engineering manager at Analog Devices. He can be contacted at kevin.leary@analog.com.</i></p><hr><P>

Digital-signal processors have traditionally been difficult to program in high-level languages such as C. In part, this is due to the fact that the constructs for performing operations such as dot products (which are the same as FIR filters) were not necessarily appropriate for DSP architectures. For example, most programmers code loops in C by counting up like this: <I>for (i=0;i&lt;N;i++)</I>. The index <I>i</I> is often used as an induction variable in the loop. DSP chips, however, often have looping hardware that counts down, so the count register is not readily available as an induction variable. This results in source code that can adversely affect the compiler's optimization in loops. This is significant since DSPs are intended to perform loops well. (In fact, performance in loops is one of the key differentiators between DSP and RISC processors.) <P>

Numerical C, a new high-level language built on the Free Software Foundation's GNU C compiler (gcc), makes it easier to program DSP applications and related mathematical algorithms. It is easy to use, and it also makes it easier to produce better code for the target. <P>

Numerical C is a superset of ANSI-standard C. It differs from Standard C in that the additional language constructs are geared to mathematical-programming paradigms. These constructs enable the compiler to generate more-efficient code by giving the compiler more information about the algorithm and by enforcing a canonical form on the input program. <P>

The effort to define Numerical C began with the formation of the Numerical C Extensions Group (NCEG) in March of 1989. This group quickly became part of the ongoing C standardization efforts of ANSI X3J11 and officially operated as ANSI X3J11.1. NCEG has been chartered by ANSI to standardize the math library and suggest any changes to X3J11 in the area of high-speed numerical computing for the next draft of the C language. <P>

In particular, NCEG is focusing on math libraries, floating-point math, complex numbers, variable-length arrays (VLAs), and language extensions to handle parallel and vector architectures. (For more information, see &quot;Numerical Extensions to C&quot; by Robert Jervis, <I>DDJ</I>, August 1992.) The most important extensions that have been added to gcc include operators, data types, and iterators. In this article, I'll focus on complex numbers and iterators using Analog Devices' implementation of Numerical C for the ADSP-21060 SHARC DSP as an example. For more details on this processor, see the accompanying text box, entitled &quot;The ADSP-21060 SHARC DSP.&quot; Note, however, that as part of the GNU releases, Numerical C is supported on SPARC, 386 (32-bit), and 486 (32-bit) platforms. As for other DSPs, Texas Instruments has publicly committed to supporting Numerical C on its floating-point DSPs.<P>

<h3><a name="0084_0024">Complex Numbers<a name="0084_0024"></h3><P>

Numerical algorithms in general, and DSP applications in particular, often rely on complex numbers and complex arithmetic as a basis for analysis. Numerical C supports complex numbers implicitly in order to allow better support for DSP applications. <P>

In Numerical C, complex numbers are supported as an aggregated pair of values: One value represents the real component of the complex number, and the other value represents the imaginary part of the number--the so-called &quot;Cartesian representation.&quot; Two primitives are used to access the real and imaginary values of a complex number--<I>creal</I> and <I>cimag</I>, both of which follow the same syntax and semantics as the <I>sizeof</I> operator in C. <I>creal</I> is used to extract the real part of the complex number, and <I>cimag</I>, the imaginary part.<P>

The type qualifier <I>complex</I> is used to construct a complex data type. By combining <I>complex</I> with <I>int</I>, <I>float</I>, or <I>double</I>, you can construct a complex data type with different base types. For example, <I>complex float x</I> declares <I>x</I> to be a complex number in which its real and imaginary parts are of type <I>float</I>. Likewise, the construct <I>complex int ca[10]</I> declares an array of complex integers. <P>

In Numerical C, all operators behave as you would expect, regardless of whether the operands are complex or real. The Numerical C compiler is responsible for generating the best possible code for implementing the complex operation on the target architecture.<P>

Complex constants are constructed with the same syntax found in mathematical notation. The <I>i</I> suffix notation is used to build complex lexical constants; for example, <I>5+6i</I>, <I>1i</I>, and <I>3--.01i</I>. The complex data type has been integrated directly into the compiler's type system, and complex numbers will exist cleanly with the normal, basic types in C. If you add a <I>float</I> to a <I>complex</I> number, the <I>float</I> first gets promoted to a <I>complex float</I>, then added. For instance, adding <I>5</I> to <I>6+4i</I> would result in promoting <I>5</I> to <I>5+0i</I>, and then adding it to <I>6+4i</I>, resulting in <I>11+4i</I>. <a href="#0084_002b">Example 1</A> illustrates this by computing a &quot;twiddle factor&quot; for a discrete Fourier transform.<P>

<h3><a name="0084_0025">Iterators<a name="0084_0025"></h3><P>

In Standard C, arrays are declared and operated on explicitly--exact array sizes must be known at declaration time, and every element of an array that is to be operated on must be explicitly accessed. In Numerical C, on the other hand, arrays are declared explicitly but operated on implicitly. A tool to help this implicit operating on arrays is called an &quot;iterator.&quot;<P>

Iterators are represented syntactically as declarations. To declare an iterator, you use the new <I>iter</I> keyword. Iterators need to be initialized when they are declared. The initialization value of the iterator is the iterator's upperbound. When an iterator is used in an expression, it causes the expression's evaluation to be based on all integer values <I>[0,N)</I> for the iterator. That is, the iterator itself takes on all the values in the set <I>0,N).</I> Note that <I>{[0,N)</I> means <I>0,1,2_N--1 }</I>. <P>

<a href="#0084_002c">Example 2(a)</A>, for instance, loads the first ten elements of the vector <I>A</I> with a <I>ramp</I> resulting in <I>A[0]=0, A[1]=1, _ A[8]=8, A[9]=9</I>. As you can see in this example, all elements of the array <I>A</I> were explicitly declared and (with the help of the iterator <I>I</I>) implicitly operated upon. This example demonstrates two important benefits of Numerical C: <P>

<UL>
<li>Coding of an algorithm is much more succinct since the algorithm can be abstracted above the element-wise level of analysis.</li>
<li>The compiler has more information about the actual function of the algorithm. Consequently, the compiler can more reliably generate the best code for the algorithm. In this particular case, the compiler can utilize the <I>do loop</I> capability and automated address generation of the ADSP-21060.</li>
</UL>
For the sake of comparison, <a href="#0084_002c">Example 2(b)</A> is Standard C code that is semantically equivalent to <a href="#0084_002c">Example 2(a)</A>. <P>

When an expression contains an iterator, the expression becomes a vector expression. Vector expressions can include piece-wise operations and reduction operations.<P>

Piecewise operations are the simplest operations. They typically involve use of the Standard C operators to perform standard arithmetic operations on arrays of data. <a href="#0084_002d">Example 3(a)</A>, for instance, results in <I>{Z[0]=X[0]*Y[0], Z[1]=X[1]*Y[1], _, Z[9]=X[9]*Y[9]}</I>. All Standard C operators work in this piece-wise manner on vector expressions. <P>

Reductions are used to reduce a vector into a scalar quantity. The most common operation is the <I>sum</I> reduction, which works the same as <img src="sum12.gif" alt="[sum]"> does in standard mathematical notation. <I>sum</I> adds up all the elements of the expression, resulting in a scalar value that is the sum of the vector expression. To take the dot product of X and Y, you reduce the vector expression <I>X[I]*Y[I]</I> to scalar by summation, as in <a href="#0084_002d">Example 3(b)</A>.<P>

<h3><a name="0084_0026">Order of Iteration and Multidimensions<a name="0084_0026"></h3><P>

Up to to this point, the iteration space has been one-dimensional. Still, Numerical C is flexible enough to support a three-dimensional iteration space. Given the matrices <I>C</I>, <I>A</I>, and <I>B</I>, where <I>A</I>, <I>B</I>, and <I>C</I> are m x n, p x n, and m x p matrices respectively, the algorithm in <a href="19940086.htm">Example 4</A>(a) would be coded with iterators in Numerical C as <a href="19940087.htm">Example 4</A>(b).<P>

Expressions that involve more-complicated iterators and require explicit control of the order of iteration use the <I>for(&lt;iter&gt;)</I> construct. <a href="#0084_002e">Example 5(a)</A> is the grammar extension for this. For instance, <a href="#0084_002e">Example 5(b)</A> is semantically identical to <a href="#0084_002e">Example 5(c)</A>, while <a href="#0084_002e">Example 5(d)</A> is semantically identical to <a href="#0084_002e">Example 5(e)</A>.<P>

<h3><a name="0084_0027">Other Extensions<a name="0084_0027"></h3><P>

Numerical C extensions included in the Analog Devices implementation provide support for dual data-storage architectures. Most DSP chips are architected with a Harvard or modified Harvard architecture. These architectures support two or three memory spaces for the simultaneous fetching of up to two data operands and an instruction. Numerical C allows you to specify in which of two memory spaces data is to be located. In the case of the ADSP-21060, these spaces are known as <I>pm</I> and <I>dm</I>; as such, the ADI implementation of Numerical C supports <I>pm</I> and <I>dm</I> type qualifiers, allowing you full control over which memory data resides in. <P>

Since Numerical C is based on the gcc core, it has inherited many other extensions to Standard C. These include support for variable-length arrays and run-time initializers for aggregates.<P>

<h3><a name="0084_0028">A Neural-Net Example<a name="0084_0028"></h3><P>

One Numerical C application we've written is a backprop neural-network system based on <I>Neural Networks: Algorithms, Applications, and Programming Techniques</I>, by James Freeman and David Skapura. If you're unfamiliar with neural-net concepts, refer to Freeman and Skapura's book, as well as any number of <I>DDJ</I> articles, among them &quot;Neural Networks and Character Recognition,&quot; by Ken Karnofsky (June 1993), &quot;A Neural-Network Audio Synthesizer,&quot; by Thorson et al. (February 1993), and &quot;Bidirectional Associative Memory Systems in C++,&quot; by Adam Blum (April 1990).<P>

The network in <a href="#0084_0031">Listing One</A> is a feed-forward network, where all signals move forward from the input to the outputs to simulate a back-propagation network. In simple terms, you'll find in <a href="#0084_0031">Listing One</A> two arrays of coefficients modified by a training algorithm based on minimizing the LMS error. Training is the crux of the entire algorithm (and where the network gets the name, &quot;back propagation&quot;) because we compute the error at the output layer and then adjust the weights on the output layer. Then we take some weighted multiple of the error and propagate the error back to the hidden layer. Since the code is heavily commented, I won't go into detail about how the network works. Suffice it to say, that this neural net, implemented for a DSP chip, is an example of how you can best use Numerical C.<P>

<h3><a name="0084_0029">Performance<a name="0084_0029"></h3><P>

The most important reason for using Numerical C is performance. To examine this issue, I'll briefly present an assembly-language code fragment generated by the ADSP-21060 implementation of Numerical C for a dot product. <P>

<a href="#0084_002f">Example 6(a)</A> is the Numerical C source code used to generate the ADSP-21060 assembly-language code in <a href="#0084_002f">Example 6(b)</A>. In this example, the most important features are the use of the chip's <I>do loop</I> instruction, the single-cycle inner loop, and the dual-memory fetch capability. Note that all ADSP-21060 instructions execute in a single cycle at 25 ns. Also note the algebraic syntax of the ADSP-21060 assembly language.<P>

<h3><a name="0084_002a">Conclusions<a name="0084_002a"></h3><P>

Numerical C makes writing application code simpler, and the code produced using the Numerical C compiler is more efficient than the code produced by standard C compilers.<P>

Numerical C is now available as a part of gcc as a publicly available compiler covered by the ENU Software licence agreement which encourages the dissemination of source code. Analog Devices encourages the use of Numerical C on any platform and specifically encourages the porting of Numerical C to other DSP chips.<P>

<h2>The ADSP-21060 SHARC DSP</h2><P>

The ADSP-21060 Super Harvard Architecture (SHARC) digital-signal processor is a 32/40-bit IEEE floating-point system on a chip offering 40-MIPS performance with a 25-ns instruction rate and single-cycle instruction execution. In particular, the processor and its instruction set are designed to support efficient C code generation. Through the Harvard architecture and three independent computation units, the processor can achieve 120-MFLOPS peak performance without an arithmetic pipeline. The 4-Mbit on-chip SRAM memory allows real-time signal processing without the off-chip data bottlenecks typically found in data-intensive systems. Dual data-address generators with indirect, immediate, modulo, and bit-reverse addressing and efficient program sequencing with zero-overhead looping contribute to sustaining the ADSP-21060's throughput. <P>

As <a href="19940088.htm">Figure 1</A> shows, the core of the ADSP-21060 includes:<P>

<UL>
<li>Independent, parallel computation units. The ADSP-21060 contains three independent, parallel computation units--the ALU, multiplier, and shifter--that perform single-cycle instructions. The units are arranged in parallel, maximizing computational throughput. Single, multifunction instructions execute parallel ALU and multiplier operations. These computation units support the following data formats: IEEE 32-bit, single-precision floating point; extended-precision, 40-bit floating point; and 32-bit fixed point. </li>
<li>Data-register file. This is a general-purpose register file used for transferring data between the computation units and the data buses, and for storing intermediate results. This 10-port, 32-register (16 primary, 16 secondary) register file, combined with the on-chip Harvard architecture, allows unconstrained data flow between computation units and internal memory.</li>
<li>Single-cycle fetch of instruction and two operands. The data memory (DM) bus transfers data and the program memory (PM) bus transfers both instructions and data. </li>
<li>High-performance instruction cache. This enables three-bus operation for fetching one instruction and two data values. The cache is selective: Only the instructions whose fetches conflict with PM bus data accesses are cached. This allows full-speed execution of core, looped operations such as digital-filter multiply accumulates and FFT butterfly processing.</li>
<li>Two data-address generators (DAGs) with hardware circular buffers. Circular buffers allow efficient implementation of delay lines and other data structures required in digital-signal processing. They are commonly used in digital filters and Fourier transforms. The two DAGs contain sufficient registers to allow the creation of up to 32 circular buffers (16 primary register sets, 16 secondary). The DAGs automatically handle address-pointer wraparound, thus reducing overhead, increasing performance, and simplifying implementation. Circular buffers can start and end at any memory location.</li>
<li>Flexible instruction set. The 48-bit instruction word accommodates a variety of parallel operations, for concise programming. For example, the ADSP-21060 can conditionally execute a multiply, add, subtract, and branch in a single instruction.</li>
</UL>
The ADSP-21060 takes advantage of its Super Harvard Architecture to yield high performance for signal processing applications. <a href="#0084_0030">Table 1</A> provides a sampling of benchmarks. <P>

The processor contains 4 Mbits of dual-ported internal SRAM, organized as two blocks of 2 Mbits. Each block is dual-ported for single-cycle, independent accesses by the core processor and I/O processor or DMA controller (the 21060 achieves 240-Mbyte DMA transfer rate). The dual-ported memory and separate on-chip buses allow two data transfers from the core and one from I/O processor, all in a single cycle. The memory can be configured as a maximum of 128K words of 32-bit data, 256K words of 16-bit data, 80K words of 48-bit instructions (and 40-bit data), or combinations of different word sizes up to 4 Mbits. For example, each block can be organized into 64K 32-bit words for data or into 40K 48-bit words to support the ADSP-21060's 48-bit instruction word. These two-word types can coexist in the same memory block. All memory can be accessed as 16-, 32-, or 48-bit words. <P>

While each 2-Mbit block can store combinations of code and data, on-chip memory accesses are most efficient when one block stores data using the DM bus for transfers and the other block stores instructions and data, using the PM bus for transfers. Using the DM bus and PM bus with one dedicated to each memory block assures single-cycle execution with two data transfers. In this case, the instruction must be available in the cache. Single-cycle execution is also maintained when one of the data operands is transferred to or from off-chip, via the ADSP-21060's external port.<P>

--K.L.<P>

<a href="19940089.htm">Figure 1</A>  ADSP-21060 block diagram.
<h4><a name="0084_002b"><B>Example 1:</B> Computation for Fourier-transform twiddle factor.<a name="0084_002b"></h4><P>

<pre>complex float Wn;
Wn = cexp (2.0*PI*1.0i/N);</pre><P>

<h4><a name="0084_002c"><B>Example 2:</B> (a) is the semantic equivalent of (b).<a name="0084_002c"></h4><P>

<pre>(a)  int A[10];
     iter I = 10;
     A[I] = I;

(b)  int A[10];
     int i;
     for (i=0; i&lt;10; i++)
         A[i] = i;</pre><P>

<h4><a name="0084_002d"><B>Example 3:</B> (a) Piece-wise operations; (b) reducing vector expressions.<a name="0084_002d"></h4><P>

<pre>(a)  float Z[10], X[10], Y[10];
     iter I = 10;
     Z[I] = X[I]*Y[I];

(b)   sum(X[I]*Y[I]);</pre><P>

<a href="1994008a.htm">Example 4</A>  (a) would be coded with iterators in Numerical C as (b).
<h4><a name="0084_002e"><B>Example 5:</B> (a) is the grammar extension for the for(&lt;iter) construct; (b) is semantically identical to (c); (d) is semantically identical to (e).<a name="0084_002e"></h4><P>

<pre>(a)  for (&lt;iterator-variable&gt;)
          statement;

(b)  float A[m][m], B[m];
     iter I=m, J=m;
     for (I) B[J] = B[I] + A[J][I]*I;

(c)  float A[m][m], B[m];
     int i, j;
     for (i=0; i&lt;m; i++)
         for (j=0; j&lt;m; j++)
             B[j] = B[i] + A[j][i]*i;

(d)  float A[m][m], B[m];
     iter I=m, J=m;
     for (J) B[J] = B[I] + A[J][I]*I;

(e)  float A[m][m], B[m];
     int i, j;
     for (j=0; j&lt;m; j++)
         for (i=0; i&lt;m; i++)
             B[j] = B[i] + A[j][i]*i;</pre><P>

<h4><a name="0084_002f"><B>Example 6:</B> (a) is the Numerical C source code used to generate the ADSP-21060 assembly-language code in (b).<a name="0084_002f"></h4><P>

<pre>(a)  int fir, A[10];
     pm int B[10];
     iter I=10;
     fir = sum (A[I]*B[I]);.

(b)  r4=dm(i4,m6), r2=pm(i12,m14);
     lcntr = 9,  do (pc,1) until lce;
        mrf=mrf+r4*r2(ssi), r4=dm(i4,m6), r2=pm(i12,m14);
     mrf=mrf+r4*r2(ssi);</pre><P>

<h4><a name="0084_0030"><B>Table 1:</B> ADSP-21060 benchmarks (@ 40 MHz).<a name="0084_0030"></h4><P>

<PRE>
Operation                     Time        Cycles

1024-Pt. Complex FFT          0.46 msec   18,221
FIR Filter (per tap)           25 ns           1
IIR Filter (per biquad)       100 ns           4
Divide (y/x)                  150 ns           6
Inverse Square Root
    (1/sqrt(x))               225 ns           9
</pre>

<h4><a name="0084_0031">Listing One <a name="0084_0031"></h4>

<pre>

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;dspc.h&gt;

static inline float sigmoid (float x){ return 1.f/(1.f+expf(-x));}
/* Simulating a backpropogation network: a feed-forward network. All signals 
move foward from the input to the outputs. xp ip op the 'p' is used to denote
the pth exemplar. Multiply 'xp' our input vector by wts on the hidden layer.
      * * * * * * *  input layer.
      \ | | | | | /
       + + + + + +   hidden layer.
      / | | | | | \
     o  o o o o o  o output layer 
     ip output of the hidden layer.  op output of the output layer.
The matrix wts_h is used to map the input layer to the hidden layer, each node
in the input layer has a weight from that node to every node in hidden layer.
An zero in the weight matrix implies there is no connection. So the ip vector 
or the output of the input layer.
                     h
   ip  = SUM xp * wts
     i    j    i     ji
                     o
   op  = SUM ip * wts
     k    j    j     kj       the sigmoid function is used as a thresholding 
function on the output signal of the layer.*/
void
bpn_simulate(int nni, int nho, int nno, float xp[nni], float ip[nho], 
             float op[nno], float pm wts_h[nho][nni], float pm wts_o[nno][nho])
{
  iter i = nni, j = nho, k = nno;
  ip[j] = sigmoid (sum (xp[i]*wts_h[j][i]));
  op[k] = sigmoid (sum (ip[j]*wts_o[k][j]));
}
/* Training is the crux of the algorithim and where network got its name--
Backpropogation. Compute the error at the output layer and adjust the weights
on the output layer. Take some weighted multiple of the error and propogate 
error back to hidden layer. Given xp the input vector, yp the expected output 
vector, and a set of weights wts_h, wts_o, the control variable eta is used to
control how fast algorithim learns. erro = yp-op is the difference of what we 
expected and what we got. Now we find the gradiant of the error surface and 
build delta_o and delta_h from delta_o. Modify the weights with delta_h and 
delta_o. Return half of the gradiant squared to be used by a control algorithm
to determine how much more we need to train. */
float
bpn_train(int nni, int nho, int nno, float xp[nni], float yp[nno],
                float pm wts_h[nho][nni], float pm wts_o[nno][nho], float eta)
{
  iter i = nni, j = nho, k = nno;
  float s;
  float ip[nho], op[nno], delta_h[nho], delta_o[nno];
  /* simulate xp to get ip, op */
  ip[j] = sigmoid (sum (xp[i]*wts_h[j][i]));
  op[k] = sigmoid (sum (ip[j]*wts_o[k][j]));
  /* error * derivitive of 1/(1+exp(op)) {simplifed} */
  delta_o[k] = (yp[k] - op[k]) * op[k] * (1 - op[k]);
  delta_h[j] = ip[j] * (1 - ip[j]) * sum (delta_o[k] * wts_o[k][j]);
  /* adjust the weights on the output layer. */
  wts_o[k][j] += eta * delta_o[k] * ip[j];
  /* adjust the weights on the hidden layer */
  wts_h[j][i] += eta * delta_h[j] * xp[i];
  /* return half of the gradiant squared  d2 */
  return .5f * sum (delta_o[k] * delta_o[k]);
}
/* Initialize the weights to random values between 0 1. not too important */
void
bpn_wts_init(int nni, int nho, int nno,
                           float pm wts_h[nho][nni], float pm wts_o[nno][nho])
{
  float op[nno],ip[nho];
  for (p) { 
    bpn_simulate (nni,nho,nno,exemplars[p],ip,op,wts_h,wts_o);
#if 0
    printf(&quot;{&quot;); printf (&quot; %f,&quot;,exemplars[p][i]); printf(&quot;}\n&quot;);  
    printf(&quot;{&quot;); printf (&quot; %f,&quot;,desired[p][j]); printf(&quot;}\n&quot;);  
    printf(&quot;{&quot;); printf (&quot; %f,&quot;,op[j]); printf(&quot;}\n&quot;);  
    printf (&quot;------------\n&quot;); 
#endif
  }
}
void
bpn_training_loop(int nni, int nho, int nno,int nex, float exemplars[nex][nni],
   float outputs[nex][nno],float pm wts_h[nho][nni], float pm wts_o[nno][nho],
   float eta,float epsilon,int printp)
{
  float error = 100;
  int    iteration=0;
  iter   p = nex;
  while (error &gt; epsilon)
    {
      error = 0;
      for (p) 
       error += bpn_train (nni, nho, nno,exemplars[p], outputs[p], wts_h, 
                                                                   wts_o, eta);
      error /= nex;
      if (printp)
         printf (&quot;%5d: err=%10lf\n&quot;,iteration,error);
      iteration++;
      if (printp &amp;&amp; (iteration % printp) == 0)
       bpn_simulate_set (nni, nho, nno, nex, exemplars, outputs, wts_h, wts_o);
    }
}

</pre><HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
