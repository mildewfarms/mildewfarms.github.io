<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>AUG94: C++ Namespaces</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>C++ Namespaces<a name="0093_0029"></h1><P>
<h2><a name="0093_0027"><a name="0093_0000">Controlling global-namespace pollution</h2><P>
<h3>Tom Pennello</h3><P>
<p><i><a name="0093_0028"><a name="0093_0000">Tom is vice president of engineering at MetaWare and can be contacted at 2161 Delaware Ave., Santa Cruz, CA 95060. </i></p><hr><P>
Most programmers understand the global namespace problem that C++ inherited from C. Global names--those of functions, variables, types, and enumerators--declared in one third-party library can clash with names found in another third-party library or in the programmer's own application. For example, a graphics library from Vendor A and a math library from Vendor B can both have a method called <I>Curve::rotate(int degrees)</I>. If you run into this situation, your only recourse is to change the name of the class <I>Curve</I> in one of the libraries. Sometimes this change is difficult, if not impossible, to implement.<P>
To address such problems, C++ includes namespaces, which make it possible to encapsulate library names in a library namespace. In general, a namespace is a named declarative region, and its name is used to access the names declared within that region. Thus, Vendor A's rotate function can be known as <I>A_graphics::Curve::rotate</I>, and Vendor B's as <I>B_math::Curve::rotate</I>. The external (mangled) names given to the linker for such encapsulated library names include the namespace name, so that they are distinct to the linker. Even if you are using a library that predates namespaces, you can use namespaces to encapsulate names in your own code that clash with those of the library.<P>
Namespaces are a recent addition to C++, accepted in July 1993 at the Munich meeting of X3J16. They were preceded by many experiments in programming-language design, such as the packages of Ada (1980), which were also incorporated in MetaWare's Pascal (1984). C++'s namespaces offer new twists not present in these two languages, such as the distinction between a <I>using</I> declaration and a <I>using</I> directive.<P>
Names are introduced in a namespace via the namespace definition in <a href="#0093_002f">Example 1(a)</A>. A namespace definition is syntactically a declaration, but it may only appear at the global scope or within another namespace definition. All names declared directly within a namespace definition, except those introduced by a <I>using</I> declaration, are &quot;owned&quot; by the namespace.<P>
If the <I>namespace </I>identifier is not declared in the current scope, it is declared as a namespace. If it has already been declared, the definition &quot;continues&quot; the namespace. In this way, a namespace can be extended to allow a single large namespace to be defined over different header files; see <a href="#0093_002f">Example 1</A> (b).<P>
A library vendor can choose a very long name for a namespace to minimize potential clashes with other vendors; see <a href="#0093_002f">Example 1(c)</A>. However, it may be unwieldy to use such a long name to refer to names in the namespace. A namespace-aliasing definition allows you to use a shorthand name like that in <a href="#0093_002f">Example 1(d)</A>, where DSOML is declared as a namespace that stands for the longer name in the scope of the alias definition.<P>
<h3><a name="0093_002a">Using the Names: Explicit Qualification<a name="0093_002a"></h3><P>
The names declared in a namespace can be denoted explicitly using the existing qualified name syntax for classes. In <a href="#0093_0030">Example 2(a)</A>, for instance, <I>Colors::invert</I> denotes a member <I>invert </I>of namespace <I>Colors</I>. A name declared in a namespace can be defined outside the namespace, if not already defined within it, using the qualified name to denote the member being defined; see <a href="#0093_0030">Example 2(b)</A>. Just as with classes, the text following the qualification is considered in the scope of the namespace. So, although we say <I>Colors::color</I> for the return type, namespace members <I>color</I> (the parameter type) and <I>red</I> (the initializer) can appear unqualified.<P>
<h3><a name="0093_002b">The <I>using </I>Declaration<a name="0093_002b"></h3><P>
A <I>using</I> declaration declares a name N from a namespace as a current declaration in the scope in which the <I>using </I>declaration appears. The declaration of N is an alias of its declaration in the namespace. In <a href="#0093_0031">Example 3(a)</A>, for example, a <I>using</I> declaration uses a qualified name to refer to the used name. (The current X3J16 proposal does not allow the comma-separated list; MetaWare High C++ does.) <P>
Just as with normal declarations, a <I>using</I> declaration can introduce a function that overloads other functions in the same scope. And just as with normal declarations, a <I>using</I> declaration can cause a duplicate declaration if a nonfunction of the same name has already been declared; see <a href="#0093_0031">Example 3(b)</A>.<P>
Unlike normal declarations, <I>using </I>declarations can overload functions with the same argument types. The ambiguity is detected at the point of use, rather than the point of declaration. Suppose <I>Other_namespace::invert</I> had the same signature as <I>Colors::invert</I>; then for <I>//1 invert(C)</I>, an error message would result.<P>
If ambiguity exists between two functions with identical argument types, where one function was introduced by a <I>using </I>declaration and the other by a non-<I>using</I> declaration, the non-<I>using </I>declaration is preferred over the <I>using </I>declaration. In <a href="#0093_0031">Example 3(c)</A>, <I>//2 invert(C)</I> calls the <I>extern int</I> function rather than the function introduced by the <I>using </I>declaration. No diagnostic is produced; this silent choice could easily be a point of disagreement among language designers.<P>
A <I>using</I> declaration may appear in the same places as any other declaration. A <I>using</I> declaration within a namespace N  makes the name declared in N; see <a href="#0093_0031">Example 3(d)</A>. Hence, <I>N::name</I> can refer to the <I>using</I>-declared name, as <a href="#0093_0031">Example 3(e)</A> illustrates. The only difference is that the imported name is still &quot;owned&quot; by its original namespace. Thus, being <I>using</I>-declared doesn't affect its external mangled name. You can now say <I>TV::color</I> or <I>using TV::color</I>, even though color is owned by namespace <I>Colors</I>.  <P>
Partly because <I>using</I> declarations allow a name to be declared in multiple namespaces, and partly because <I>using</I> declarations are just aliases, different <I>using</I> declarations may import the same declaration. Such an otherwise-invalid duplicate declaration is allowed and has the same effect as if the duplicate were not there; see <a href="#0093_0031">Example 3(e)</A>. This is more useful with functions, where you may use a namespace solely for constructing a collection of functions, as in <a href="#0093_0031">Example 3(f)</A>. But, as <a href="#0093_0031">Example 3(g)</A> shows, you may also now import both collections without fear of duplication. A <I>using</I> declaration does not allow you to select a single, individual function; see <a href="#0093_0031">Example 3(h)</A>. (High C++ also supports <I>using</I> <I>N::*</I>, which effectively performs a <I>using</I> declaration on every name declared in N.)<P>
<h3><a name="0093_002c">The <I>using </I>Directive<a name="0093_002c"></h3><P>
A <I>using</I> directive is quite different from a <I>using</I> declaration. The directive imports an entire namespace at once, but not as declarations in the scope containing the directive. Instead, within the scope containing the directive, the names are treated as if they were declared in the smallest enclosing non-namespace scope. (This is the global scope for namespaces declared globally or within global namespaces.) Furthermore, apparent duplicate declarations do not occur until a name's point of use.<P>
As <a href="#0093_0032">Example 4(a)</A> illustrates, a <I>using</I> directive begins with <I>using namespace</I> followed by the (potentially qualified) name denoting the namespace. The names are treated as though they were declared globally, so local declarations of the same name, like those in <a href="#0093_0032">Example 4(b)</A>, hide the global declarations. The local declaration <I>//1</I> hides the global; <I>//2</I> invokes <I>//1Other_namespace::invert</I>. However, in <a href="#0093_0032">Example 4(c)</A> both namespaces' members are introduced globally, so in <I>//3</I> there is the choice of two globally declared <I>invert </I>functions. <P>
As with <I>using</I> declarations, ambiguity between two functions with identical argument types is resolved in favor of a function that was not introduced by a <I>using</I> directive. Similarly, ambiguity that cannot be resolved via overload resolution is reported at the use of a name, not at the occurrence of the <I>using </I>directive.<P>
Names introduced by <I>using</I> directives are ignored when an expression uses explicit qualification. Thus, even though the names are treated as being declared globally, a reference <I>::global_name</I>, as in <a href="#0093_0032">Example 4(d)</A>, does <I>not</I> refer to any names introduced by <I>using</I> directives.<P>
According to a preliminary paper on namespaces (93-055), directives may be transitive--if namespace A contains <I>using namespace B</I> in its definition, then <I>using namespace A</I> also gains access to the names in B. In the formal proposal for namespaces (93-105), such an intent is not indicated by the language. The transitivity was intended for &quot;joining&quot; two namespaces together in a single one, but it does not have the intended effect; thus in High C++ directives are not transitive.<P>
<h3><a name="0093_002d"><I>Friend</I> and <I>extern </I>Declarations<a name="0093_002d"></h3><P>
<I>Friend</I>s first declared in a class are declared in the smallest enclosing nonclass, nonfunction-prototype scope. With the addition of namespaces, this means a <I>friend</I> declaration like that in <a href="#0093_0033">Example 5</A> can be &quot;injected&quot; into the namespace. The same holds for an <I>extern</I> declaration first declared within a function in a namespace. Rather than being a global <I>extern</I>, the declaration is owned by the namespace.<P>
<h3><a name="0093_002e">Unnamed Namespaces <a name="0093_002e"></h3><P>
You can omit the identifier in a namespace definition, in which case you are then referring to that &quot;unnamed&quot; namespace that exists for every compilation unit. The unnamed namespace is unique for that compilation unit, and a <I>using </I>directive for it is automatically assumed. The resultant effect is that you can enclose your local data in the unnamed namespace without fear of it clashing with local data in other compilation units. <a href="#0093_0034">Example 6(a)</A>, for instance, is equivalent to having written <a href="#0093_0034">Example 6(b)</A>, where UNIQUE is a compiler-chosen name unique to each compilation unit. <P>
The proposed C++ draft says that names within the unnamed namespace have internal linkage, but this is being debated on the X3J16 core language reflectors, as some think that the internal linkage provision serves no purpose.<P>
Because namespaces are so new, some issues currently under discussion include: statements such as &quot;the scope of a class is a namespace&quot;; the implicit internal linkage of unnamed namespaces; the transitivity of directives; and the possible inclusion of <I>using N::*</I>. But even without decisions on these finer points, MetaWare's engineers have found namespaces extremely useful.<P>
<h4><a name="0093_002f"><B>Example 1:</B> (a) Namespace definition; (b) extending a namespace; (c) long names for namespaces can minimize potential clashes; (d) using a shorthand name.<a name="0093_002f"></h4><P>
<pre>(a) namespace identifier {
        ... list of zero or more declarations
        }

(b) namespace A {           // Declare A as a namespace.
         int f() { ... }
         typedef int T;
         }
         ...
    namespace A {           // Add more to namespace A.
        int g();
        }

(c) namespace Distributed_System_Object_Model_Library {
        ...
        }

(d) namespace DSOML = Distributed_System_Object_Model_Library;</pre><P>
<h4><a name="0093_0030"><B>Example 2:</B> (a) Colors::invert denotes a member invert of the namespace Colors; (b) defining a name outside the namespace.<a name="0093_0030"></h4><P>
<pre>(a) namespace Colors {
       enum color {red,white,blue};
       typedef int color;
       color invert(color);
       extern color c;
       };
    ...
    func() {
       Colors::color C = ...;
       Colors::invert(C);
       }

(b) Colors::color Colors::invert(color c) { ... }
    Colors::color Colors::c = red;</pre><P>
<h4><a name="0093_0031"><B>Example 3:</B> (a) A using declaration uses a qualified name to refer to the used name; (b) a duplicate declaration; (c) //2 invert(C) calls the extern int function; (d) an imported name is still &quot;owned&quot; by its original namespace; (e) an allowable duplicate declaration; (f) using a namespace for constructing a collection of functions; (g) importing both collections without duplication; (h) a using declaration does not allow you to select a single, individual function.<a name="0093_0031"></h4><P>
<pre>(a) func() {
      using Colors::red, Colors::white, Colors::blue;
      Colors::color x = red;
      using Colors::invert;
      x = invert(x);
      }

(b) func() {
      extern int invert(int);
      using Colors::invert;         // invert is now overloaded.
      using Other_namespace::invert;// OK if invert's a function.
      Colors::color C = ...;
      invert(C);                   //1 Selects from 3 inverts.
      typedef int T;
      using Other_namespace::T;     // Error.
      }

(c) extern int invert(Colors::color);
    using Colors::invert;             // invert is now overloaded.
    Colors::color C = ...;
    invert(C);                       //2 Selects from 2 inverts.

(d) namespace TV {
      using Colors::color;
      color pixels[1024*1024];
      }

(e) using Colors::color;
      using TV:color;         // OK; same as Colors::color.

(f) namespace Collection1 {
      using A::f, B::f, C::f;
      };
    namespace Collection2 {
      using       B::f, C::f, D::f;
      };
    ...
    ... Collection1::f(...) ...
    ... Collection2::f(...) ...

(g) using Collection1::f, Collection2::f;
    ... f(...) ...  // Select from A::f, B::f, C::f, and D::f.

(h) using N::f(int);        // NOT ALLOWED.
    using N::f(char);       // NOT ALLOWED.
    // But skip a whole bunch of other f's from N.</pre><P>
<h4><a name="0093_0032"><B>Example 4:</B> (a) A using directive begins with using namespace, followed by the (potentially qualified) name denoting the namespace; (b) hiding global declarations; (c) namespaces' members are introduced globally.<a name="0093_0032"></h4><P>
<pre>(a) func() {
      using namespace Colors;
      color C = red;
      invert(C);
      }

(b) func() {
      using namespace Colors;
      using Other_namespace::invert;  //1 local declaration
      color C = red;
      invert(C);                     //2 gets //1.
      }

(c) func() {
      using namespace Colors;         //1 invert declared globally
      using namespace Other_namespace;//2 another global invert
      color C = red;
      invert(C);                     //3 chooses between 1 and 2
      }

(d) namespace A { int glob; }
    using namespace A;
    int glob;       // OK, now we have two of them globally.
    func() {
      glob++;     // Ambiguous:  A::glob or ::glob.
      ::glob++;   // Refers to global, non-namespace glob.
      A::glob++;  // Refers to namespace A's glob.
      }</pre><P>
<h4><a name="0093_0033"><B>Example 5:</B> Injecting a friend declaration into the namespace.<a name="0093_0033"></h4><P>
<pre>namespace A                   {
    class C                   {
        // This is A::func.
        friend func();
        };
    }
int A::func() { ... }</pre><P>
<h4><a name="0093_0034"><B>Example 6:</B> (a) is equivalent to (b). <a name="0093_0034"></h4><P>
<pre>(a) namespace {
       int a, b, c;
       void f() { ... }
       }

(b) namespace UNIQUE {
      int a, b, c;
      void f() { ... }
      }; using namespace UNIQUE;

</pre>

<HR><P>Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
