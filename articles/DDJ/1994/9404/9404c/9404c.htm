<HTML>
<META NAME="year" CONTENT="1994">
<HEAD>
<TITLE>APR94: SHA: The Secure Hash Algorithm</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<h1>SHA: The Secure Hash Algorithm<a name="0106_0003"></h1><P>

<h3><a name="0106_0001"><a name="0106_0000">William Stallings</h3><P>

<P>
<i><a name="0106_0002"><a name="0106_0000">William is an independent consultant and president of Comp-Comm Consulting of Brewster, MA. This article is based on material in his forthcoming book, Network and Internetwork Security (Macmillan, due June 1994). He can be reached at stallings@acm.org.</i></p><hr><P>

An essential element of most authentication and digital-signature schemes is a hash algorithm. A hash function accepts a variable-size message M as input and produces a fixed-size tag H(M), sometimes called a &quot;message digest,&quot; as output (see &quot;One-Way Hash Functions,&quot; by Bruce Schneier, <I>DDJ</I>, September 1991). Typically, a hash code is generated for a message, encrypted, and sent with the message. The receiver computes a new hash code for the incoming message, decrypts the hash code that accompanies the message, and compares them. If the message has been altered in transit, there will be a mismatch.<P>

The Secure Hash Algorithm (SHA) was developed by the National Institute of Standards and Technology (NIST) and published as a federal information-processing standard (FIPS PUB 180) in 1993. SHA is based on the MD4 algorithm, developed by Ron Rivest of MIT, and its design closely models MD4. SHA is used as part of the new Digital Signature Standard from NIST, but it can be used in any security application that requires a hash code.<P>

<h3><a name="0106_0004">SHA Logic<a name="0106_0004"></h3><P>

SHA takes as input a message with a maximum length of less than 2<SUP>64</SUP> bits and produces as output a 160-bit message digest. The input is processed in 512-bit blocks. <a href="19940108.htm">Figure 1</A> shows the overall processing of a message to produce a digest. The processing consists of the following steps:<P>

<B>Step 1: Append padding bits.</B> The message is padded so that its length is congruent to 448 modulo 512. Padding is always added, even if the message is already of the desired length. Thus, the number of padding bits is in the range of 1 to 512. The padding consists of a single 1 bit followed by the necessary number of 0 bits.<P>

<B>Step 2: Append length.</B> A block of 64 bits is appended to the message. This block is treated as an unsigned 64-bit integer and contains the length of the original message (before the padding).<P>

The outcome of the first two steps yields a message that is an integer multiple of 512 bits in length. The figure represents the expanded message as the sequence of 512-bit blocks Y<sub>0</sub>, Y<sub>1</sub>...Y<sub>L-1</sub>, so that the total length of the expanded message is Lx512 bits. Equivalently, the result is a multiple of 16 32-bit words. Let M[0...N-1] denote the words of the resulting message, with N being an integer multiple of 16. Thus N=Lx16.<P>

<B>Step 3: Initialize MD buffer.</B> A 160-bit buffer is used to hold intermediate and final results of the hash function. The buffer can be represented as five 32-bit registers (A,B,C,D,E). These registers are initialized to the following hexadecimal values (high-order octets first):<P>

<p>
A=67452301<br>
B=EFCDAB89<br>
C=98BADCFE<br>
D=10325476<br>
E=C3D2E1F0<br>
</p>


<B>Step 4: Process message in </B><B>5</B><B>1</B><B>2-bit (16-word) blocks.</B> The heart of the algorithm is a module that consists of 80 steps of processing; this module is labeled H<sub>SHA</sub> in <a href="19940109.htm">Figure 1</A>, and its logic is illustrated in <a href="19940251.htm">Figure 2</A>. The 80 steps have a similar structure.<P>

Note that each round takes as input the current 512-bit block being processed (Y<sub>q</sub>) and the 160-bit buffer value ABCDE, and updates the contents of the buffer. Each round also makes use of an additive constant K<sub>t</sub>. Only four distinct constants are used. The values, in hexadecimal, are shown in <a href="#0106_0008">Figure 3</A>.<P>

Overall, for block Y<sub>q</sub>, the algorithm takes Y<sub>q</sub> and an intermediate digest value MD<sub>q</sub> as inputs. MD<sub>q</sub> is placed into buffer ABCDE. The output of the 80th step is added to MD<sub>q</sub> to produce MD<sub>q+1</sub>. The addition is done independently for each of the five words in the buffer with each of the corresponding words in MD<sub>q</sub>, using addition modulo 2<SUP>32</SUP>.<P>

<B>Step 5: Output.</B> After all L 512-bit blocks have been processed, the output from the L<I>th</I> stage is the 160-bit message digest.<P>

In the logic of each round, each round is of the form:<P>

A,B,C,D,E &lt;- [CLS<sub>5</sub>(A)+f<sub>t</sub>(B,C,D)+E+W<sub>t</sub>+K<sub>t</sub>],A, CLS<sub>30</sub>(B),C,D<P>

where A,B,C,D,E=the five words of the buffer; t=round, or step, number; 0 &lt;= t &lt;= 79; f<sub>t</sub>=a primitive logical function; CLS<sub>s</sub>=circular left shift (rotation) of the 32-bit argument by s bits; W<sub>t</sub>=a 32-bit word derived from the current 512-bit input block; and K<sub>t</sub>=an additive constant. Four distinct values are used, and +=addition modulo 2<SUP>32</SUP>.<P>

Each primitive function takes three 32-bit words as input and produces a 32-bit word output. Each function performs a set of bitwise-logical operations; that is, the n<I>th</I> bit of the output is a function of the n<I>th</I> bit of the three inputs. The functions are in <a href="#0106_0009">Table 1</A>. As you can see, only three different functions are used. For 0 &lt;= t &lt;= 19, the function is the conditional function: <I>If B then C else D</I>. For 20&lt;=t&lt;=39 and 60&lt;=t&lt;=79, the function produces a parity bit. For 40&lt;=t&lt;=59, the function is True if two or three of the arguments are True.<P>

It remains to indicate how the 32-bit word values, Wt, are derived from the 512-bit message. The first 16 values of Wt are taken directly from the 16 words of the current block. The remaining values are defined as:<P>

W<sub>t</sub>=W<sub>t-16</sub><img src="xor14.gif">W<sub>t-14</sub><img src="xor14.gif">W<sub>t-8</sub><img src="xor14.gif">W<sub>t-3</sub><P>

Thus, in the first 16 rounds of processing, the input from the message block consists of a single 32-bit word from that block. For the remaining 64 rounds, the input consists of the XOR of a number of the words from the message block.<P>


<p>
SHA can be summarized as:
</p>

<p>
MD<sub>0</sub>=IV<br>
MD<sub>q+1</sub>=SUM<sub>32</sub>(MD<sub>q</sub>, ABCDE<sub>q</sub>)<br>
MD=MD<sub>L-1</sub><br>
</p>


where IV=initial value of the ABCDE buffer, defined in Step 3; ABCDE<sub>q</sub>=the output of the last round of processing of the q<I>th</I> message block; L=the number of blocks in the message (including padding and length fields); SUM<sub>32</sub>=addition modulo 2<sup>32</sup> performed separately on each word of the pair of inputs; and MD=final message-digest value.<P>

<h3><a name="0106_0005">SHA Security<a name="0106_0005"></h3><P>

SHA has the property that every bit of the hash code is a function of every bit in the input. The complex repetition of the basic function f<sub>t</sub> produces well-mixed results; that is, it is unlikely that two messages chosen at random, even if they exhibit similar regularities, will have the same hash code. Unless there is some hidden weakness in SHA, which has not so far been published, the difficulty of coming up with two messages having the same message digest is on the order of 2<SUP>80</SUP> operations, while the difficulty of finding a message with a given digest is on the order of 2<SUP>160</SUP> operations.<P>

<h3><a name="0106_0006">Putting message digests to work<a name="0106_0006"></h3><P>

<h4><B>  <a href="1994010a.htm">Figure 1</A>:</B> Overall processing of a message to produce a digest.</h4><P>

<h4> <a name="0106_0007"><B> </B><B><a href="19940251.htm">Figure 2</A>:</B> The logic of the module HSHA; addition (+) is mod 232.<a name="0106_0007"></h4><P>

<pre></pre><P>

<h4><a name="0106_0008"><B>Figure 3: </B>Hexadecimal values of the four constants.<a name="0106_0008"></h4><P>

<pre>
0&lt;=t&lt;=19      K<SUB>t</SUB>=5A827999
20&lt;=t&lt;=39     K<SUB>t</SUB>=6ED9EBA1
40&lt;=t&lt;=59     K<SUB>t</SUB>=8F1BBCDC
60&lt;=t&lt;=79     K<SUB>t</SUB>=CA62C1D6

</pre><P>

<h4><a name="0106_0009"><B>Table 1: </B>SHA primitive functions.<a name="0106_0009"></h4><P>

<PRE>
     Round                 f<SUB>t</SUB>(B,C,D)
     --------------------------------------
     (0&lt;=t&lt;=19)      (B.C)<img src="vee12.gif">(<img src="bbar.gif">.D)
     (20&lt;=t&lt;=39)     B<img src="xor14.gif">C<img src="xor14.gif">D
     (40&lt;=t&lt;=59)     (B.C)<img src="vee12.gif">(B.D)<img src="vee12.gif">(C.D)
     (60&lt;=t&lt;=79)     B<img src="xor14.gif">C<img src="xor14.gif">D
</pre>

<HR><P>
Copyright &copy; 1994, <I>Dr. Dobb's Journal</I></P></BODY></HTML>
